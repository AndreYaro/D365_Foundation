<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceChangeTrackingPriceGroupEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// DataEventHandler for price groups changes.
/// Price group is just a name, and it has 2 tales to link with discount and entity () separately.
/// Then we need to track both tables.
/// </summary>
internal class RetailPriceChangeTrackingPriceGroupEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>RetailDiscountPriceGroup_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for updating discount price group (price group associated to discount).
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailDiscountPriceGroup_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailDiscountPriceGroup original = orig as RetailDiscountPriceGroup;
        RetailPeriodicDiscount discount = RetailPeriodicDiscount::findByOfferId(original.OfferId);

        RetailPeriodicDiscountChangeTrackingHelper::trackPeriodicDiscount(discount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailDiscountPriceGroup_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for deleting discount price group (price group associated to discount).
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailDiscountPriceGroup_onDeleted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailDiscountPriceGroup original = orig as RetailDiscountPriceGroup;
        RetailPeriodicDiscount discount = RetailPeriodicDiscount::findByOfferId(original.OfferId);

        RetailPeriodicDiscountChangeTrackingHelper::trackPeriodicDiscount(discount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailDiscountPriceGroup_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for inserting discount price group (price group associated to discount).
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailDiscountPriceGroup_onInserted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailDiscountPriceGroup newInstance = sender;
        RetailPeriodicDiscount discount = RetailPeriodicDiscount::findByOfferId(newInstance.OfferId);

        RetailPeriodicDiscountChangeTrackingHelper::trackPeriodicDiscount(discount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailChannelPriceGroup_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for updating channel price group.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailChannelPriceGroup_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailChannelPriceGroup original = orig as RetailChannelPriceGroup;
        RetailChannelPriceGroup newInstance = sender;

        RetailDiscountPriceGroup discountPriceGroup;
        RetailPeriodicDiscount discount;

        // All discounts associated with the price group.
        // In thoery the update can change only channel id but not the price group.
        while select discountPriceGroup
            where discountPriceGroup.PriceDiscGroup == original.PriceGroup || discountPriceGroup.PriceDiscGroup == newInstance.PriceGroup
        {
            discount = RetailPeriodicDiscount::findByOfferId(discountPriceGroup.OfferId);
            RetailPeriodicDiscountChangeTrackingHelper::trackPeriodicDiscount(discount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailChannelPriceGroup_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for inserting channel price group.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailChannelPriceGroup_onInserted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailChannelPriceGroup newInstance = sender;

        RetailDiscountPriceGroup discountPriceGroup;
        RetailPeriodicDiscount discount;

        // All discounts associated with the price group.
        while select discountPriceGroup
            where discountPriceGroup.PriceDiscGroup == newInstance.PriceGroup
        {
            discount = RetailPeriodicDiscount::findByOfferId(discountPriceGroup.OfferId);
            RetailPeriodicDiscountChangeTrackingHelper::trackPeriodicDiscount(discount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailChannelPriceGroup_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for deleting channel price group.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailChannelPriceGroup_onDeleted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailChannelPriceGroup original = orig as RetailChannelPriceGroup;
        RetailDiscountPriceGroup discountPriceGroup;
        RetailPeriodicDiscount discount;

        // All discounts associated with the price group.
        while select discountPriceGroup
            where discountPriceGroup.PriceDiscGroup == original.PriceGroup
        {
            discount = RetailPeriodicDiscount::findByOfferId(discountPriceGroup.OfferId);
            RetailPeriodicDiscountChangeTrackingHelper::trackPeriodicDiscount(discount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailCatalogPriceGroup_onUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for updating catalog price group.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailCatalogPriceGroup_onUpdated(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailCatalogPriceGroup original = orig as RetailCatalogPriceGroup;
        RetailCatalogPriceGroup newInstance = sender;

        RetailDiscountPriceGroup discountPriceGroup;
        RetailPeriodicDiscount discount;

        // All discounts associated with the price group.
        // In thoery the update can change only catalog id but not the price group.
        while select discountPriceGroup
            where discountPriceGroup.PriceDiscGroup == original.PriceDiscGroup || discountPriceGroup.PriceDiscGroup == newInstance.PriceDiscGroup
        {
            discount = RetailPeriodicDiscount::findByOfferId(discountPriceGroup.OfferId);
            RetailPeriodicDiscountChangeTrackingHelper::trackPeriodicDiscount(discount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailCatalogPriceGroup_onInserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for inserting catalog price group.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailCatalogPriceGroup_onInserted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailCatalogPriceGroup newInstance = sender;

        RetailDiscountPriceGroup discountPriceGroup;
        RetailPeriodicDiscount discount;

        // All discounts associated with the price group.
        while select discountPriceGroup
            where discountPriceGroup.PriceDiscGroup == newInstance.PriceDiscGroup
        {
            discount = RetailPeriodicDiscount::findByOfferId(discountPriceGroup.OfferId);
            RetailPeriodicDiscountChangeTrackingHelper::trackPeriodicDiscount(discount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>RetailCatalogPriceGroup_onDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handle for deleting catalog price group.
    /// </summary>
    /// <param name="sender">The sender.</param>
    /// <param name="orig">The orig.</param>
    /// <param name="e">The data event args.</param>
    internal static void RetailCatalogPriceGroup_onDeleted(Common sender, Common orig, DataEventArgs e)
    {
        if (RetailPriceChangeTrackingHelper::shouldSkipChangeTracking())
        {
            return;
        }

        RetailCatalogPriceGroup original = orig as RetailCatalogPriceGroup;

        RetailDiscountPriceGroup discountPriceGroup;
        RetailPeriodicDiscount discount;

        // All discounts associated with the price group.
        while select discountPriceGroup
            where discountPriceGroup.PriceDiscGroup == original.PriceDiscGroup
        {
            discount = RetailPeriodicDiscount::findByOfferId(discountPriceGroup.OfferId);
            RetailPeriodicDiscountChangeTrackingHelper::trackPeriodicDiscount(discount);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>