<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetFinancialReportingNavigationHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetFinancialReportingNavigationHandler</c> class supports client navigation from financial reports to the budget register entry inquiry form.
/// </summary>
[ExportMetadataAttribute("BudgetFinancialReporting", "BudgetFinancialReporting"),ExportAttribute("Dynamics.AX.Application.FinancialReportingINavigationHandler")]
public class BudgetFinancialReportingNavigationHandler implements FinancialReportingINavigationHandler
{								
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>navigateToBudgetTransactionInquiry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Navigates to the BudgetTransactionInquiry form and changes the default company if needed.
    /// </summary>
    /// <param name = "budgetModel">The budget model used to filter the form.</param>
    /// <param name = "accounts">Key Value pair list of the accounts used to filter the form.</param>
    /// <param name = "startDate">The start date used to filter the form.</param>
    /// <param name = "endDate">The end date used to filter the form.</param>
    /// <param name = "companyCode">The company code used to change the default company for the form.</param>
    /// <param name = "caller">The caller object to be used.</param>
    public void navigateToBudgetTransactionInquiry(str budgetModel, str accounts, date startDate, date endDate, SelectableDataArea companyCode, Object caller)
    {
        // Change the default company to show the correct data in the form
        var companyChanged = (curExt() != companyCode) && (appl.setDefaultCompany(companyCode, false));

        Args args = new Args();
        BudgetTransactionInquiryRequest btInquiryRequest = BudgetFinancialReportingNavigationHandler::getBudgetTransactionInquiryArgs(budgetModel, accounts, startDate, endDate);
        args.parmObject(btInquiryRequest);
        args.caller(caller);
        new MenuFunction(menuItemDisplayStr(BudgetTransactionInquiry), MenuItemType::Display).run(args);

        // Show the company changed warning after navigating to the form
        if (companyChanged)
        {
            warning(strFmt("@SYS53441", companyCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canNavigateToBudgetTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to determine if BudgetTransactionInquiry forum exists, and if the user has access to it.
    /// </summary>
    /// <returns>If form exists and the user has permissions to navigate to it true; otherwise false.</returns>
    public boolean canNavigateToBudgetTransactions()
    {
        return hasMenuItemAccess(menuItemDisplayStr(BudgetTransactionInquiry), MenuItemType::Display);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetTransactionInquiryArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get a BudgetTransactionInquiryRequest object to be used for navigation.
    /// </summary>
    /// <param name = "budgetModel">The budget model used for the request.</param>
    /// <param name = "accounts">Key Value pair list of the accounts used for the request.</param>
    /// <param name = "startDate">The start date used for the request.</param>
    /// <param name = "endDate">The end date for the request.</param>
    /// <returns>BudgetTransactionInquiryRequest that is used to navigate to the BudgetTransactionInquiry form</returns>
    public static BudgetTransactionInquiryRequest getBudgetTransactionInquiryArgs(str budgetModel, str accounts, date startDate, date endDate)
    {
        BudgetTransactionInquiryRequest btInquiryRequest = BudgetTransactionInquiryRequest::construct();
        Map accountsMap = new Map(Types::String, Types::String);

        List accountsList = strSplit(accounts, ';');
        ListIterator li = new ListIterator(accountsList);
        while (li.more())
        {
            List keyValuePairs = strSplit(li.value(), ',');
            ListIterator keyValueIterator = new ListIterator(keyValuePairs);
            str key = keyValueIterator.value();
            keyValueIterator.next();
            str value = keyValueIterator.value();

            if (key)
            {
                if (!value)
                {
                    // If a key is specified, but not a value, it means we specifically want the value to be empty
                    value = SysQuery::valueEmptyString();
                }

                accountsMap.insert(key, value);
            }

            li.next();
        }

        btInquiryRequest.parmBudgetModelId(budgetModel);
        btInquiryRequest.parmDimensionAttributeValueSet(accountsMap);
        btInquiryRequest.parmStartDate(startDate);
        btInquiryRequest.parmEndDate(endDate);

        return btInquiryRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>