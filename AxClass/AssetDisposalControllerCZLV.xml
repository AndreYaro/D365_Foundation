<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDisposalControllerCZLV</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetDisposalControllerCZLV</c> class is the controller for the <c>AssetDisposalActCZLV</c> report.
/// </summary>
public class AssetDisposalControllerCZLV extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Modifies the contract before the dialog is shown to the user.
    /// </summary>
    protected void prePromptModifyContract()
    {
        AssetTrans                assetTrans;
        Query                     query;
        QueryBuildDataSource      assetTransDataSource;
        QueryBuildDataSource      assetTableDataSource;
        AssetDisposalContractCZLV contract;
        DocumentDate              documentDate;

        #ISOCountryRegionCodes

        if (this.parmArgs())
        {
            assetTrans = this.parmArgs().record() as AssetTrans;
            if (assetTrans)
            {
                if (!AssetTable::find(assetTrans.AssetId))
                {
                    throw error(strfmt("@SYS19324", this.parmArgs().menuItemName()));
                }

                query                = this.getFirstQuery();
                assetTransDataSource = query.dataSourceTable(tableNum(AssetTrans));
                assetTableDataSource = query.dataSourceTable(tableNum(AssetTable));

                assetTransDataSource.clearRanges();
                assetTableDataSource.clearRanges();

                findOrCreateRange_W(assetTransDataSource, fieldNum(AssetTrans, BookId), queryValue(assetTrans.BookId));
                findOrCreateRange_W(assetTransDataSource, fieldnum(AssetTrans, TransType),
                    queryValue(AssetTransType::DisposalSale) + ',' + queryValue(AssetTransType::DisposalScrap));
                findOrCreateRange_W(assetTableDataSource, fieldNum(AssetTable, AssetId), queryValue(assetTrans.AssetId));

                contract     = this.parmReportContract().parmRdpContract() as AssetDisposalContractCZLV;
                documentDate =  assetTrans.DocumentDate_W ? assetTrans.DocumentDate_W : assetTrans.TransDate;
                contract.parmDocumentDate(documentDate);
                contract.parmDocumentNumber(assetTrans.DocumentNum_W);

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCZ00002, funcName());
                    contract.parmCountryContext(#isoCZ);
                }
                else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLV]))
                {
                    GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00020, funcName());
                    contract.parmCountryContext(#isoLV);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Instantiates the <c>AssetDisposalControllerCZLV</c> class and initializes it.
    /// </summary>
    /// <param name="_args">
    ///     An <c>Args</c> object containing values used to initialize the <c>AssetDisposalControllerCZLV</c> object.
    /// </param>
    /// <returns>
    ///     An <c>AssetDisposalControllerCZLV</c> object.
    /// </returns>
    public static AssetDisposalControllerCZLV construct(Args _args)
    {
        AssetDisposalControllerCZLV controller = new AssetDisposalControllerCZLV();
        controller.parmReportName(ssrsReportStr(AssetDisposalActCZLV, Report));
        controller.parmArgs(_args);
        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00038, funcName());

        AssetDisposalControllerCZLV::construct(_args).startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>