<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustDebitCreditNoteDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustDebitCreditNote</c> class is the report data provider class that supports the <c>CustDebitCreditNote</c>
///    report.
/// </summary>
/// <remarks>
///    This class provides the methods that are used by the <c>CustDebitCreditNote</c> report that lists items and
/// </remarks>
[SRSReportQueryAttribute(queryStr(CustDebitCreditNote)),
SRSReportParameterAttribute(classStr(CustDebitCreditNoteContract))]
public class CustDebitCreditNoteDP extends SrsReportDataProviderPreProcess
{
    RecId                           custInvoiceJourRecId;
    //table declaration
    CustDebitCreditNoteTmp          tmpTable;
    CustDebitCreditNoteTaxTmp       taxTmpTable;
    CustInvoiceJour                 custInvoiceJour;
    CustInvoiceTrans                custInvoiceTrans;

    Counter                         sequence;
    SalesPrice                      diffPrice;
    AmountCur                       diffAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustDebitCreditNoteTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data table from the <c>CustDebitCreditNoteTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [SRSReportDataSetAttribute('CustDebitCreditNoteTmp')]
    public CustDebitCreditNoteTmp getCustDebitCreditNoteTmp()
    {
        select * from tmpTable;
        return tmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustDebitCreditNoteTaxTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data table from the <c>CustDebitCreditNoteTaxTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [SRSReportDataSetAttribute('CustDebitCreditNoteTaxTmp')]
    public CustDebitCreditNoteTaxTmp getCustDebitCreditNoteTaxTmp()
    {
        select * from taxTmpTable;
        return taxTmpTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForQuantityExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends the base insertion for quantity.
    /// </summary>
    /// <param name = "_custInvoiceJour">The customer invoice journal record.</param>
    /// <param name = "_custInvoiceTrans">The customer invoice transaction record.</param>
    /// <param name = "_custDebitCreditNoteTmp">The customer debit credit note temporary record.</param>
    delegate void insertForQuantityExtension(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans, CustDebitCreditNoteTmp _custDebitCreditNoteTmp)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForValueExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Extends the base insertion for value.
    /// </summary>
    /// <param name = "_custInvoiceJour">The customer invoice journal record.</param>
    /// <param name = "_custInvoiceTrans">The customer invoice transaction record.</param>
    /// <param name = "_custDebitCreditNoteTmp">The customer debit credit note temporary record.</param>
    delegate void insertForValueExtension(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans, CustDebitCreditNoteTmp _custDebitCreditNoteTmp)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Inserts data to the table.
    /// </summary>
    public void insertForQuantity()
    {
        tmpTable.Sequence      = sequence;
        tmpTable.Name          = custInvoiceTrans.Name;
        tmpTable.LineAmount    = abs(custInvoiceTrans.LineAmount);
        tmpTable.SalesPrice    = abs(custInvoiceTrans.SalesPrice);
        tmpTable.SalesQty      = abs(custInvoiceTrans.Qty);

        this.insertForQuantityExtension(custInvoiceJour, custInvoiceTrans, tmpTable);

        tmpTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Inserts data to the table
    /// </summary>
    public void insertForValue()
    {
        tmpTable.Sequence      = sequence;
        tmpTable.Name          = custInvoiceTrans.Name;
        tmpTable.LineAmount    = diffAmount;
        tmpTable.SalesPrice    = diffPrice;
        tmpTable.SalesQty      = custInvoiceTrans.Qty;
        
        this.insertForValueExtension(custInvoiceJour, custInvoiceTrans, tmpTable);

        tmpTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        CustDebitCreditNoteContract     contract;
        CustInvoiceJourExtensionTH      custInvoiceJourExtensionTH;
        CustInvoiceTrans                custInvoiceTransLocal;
        CustInvoiceTrans                custInvoiceTransPre;
        LineNum                         previousLineNum;
        QueryRun                        qr;
        Query                           query = new Query(queryStr(CustDebitCreditNote));

        this.setTableConnections();
        contract = this.parmDataContract() as CustDebitCreditNoteContract;
        custInvoiceJourRecId =contract.parmRecordId();
        query.dataSourceTable(tableNum(CustInvoiceJour)).findRange(fieldNum(CustInvoiceJour,RecId)).value(queryValue(custInvoiceJourRecId));

        sequence            = 0;
        previousLineNum     = 0;

        qr = new QueryRun (query);

        while (qr.next())
        {
            custInvoiceJour  = qr.get(tableNum(CustInvoiceJour));
            custInvoiceTrans = qr.get(tableNum(CustInvoiceTrans));

            custInvoiceJourExtensionTH = custInvoiceJour.custInvoiceJourExtensionTH();

            if (custInvoiceTrans.ItemId && contract.parmPrintHeader())
            {
                if (contract.parmProdType() == TaxUnrealizedDocuProdType::Item)
                {
                    if (InventTable::find(custInvoiceTrans.ItemId).ItemType != ItemType::Item)
                    {
                        continue;
                    }
                }
                else if (contract.parmProdType() == TaxUnrealizedDocuProdType::Service)
                {
                    if (InventTable::find(custInvoiceTrans.ItemId).ItemType != ItemType::Service)
                    {
                        continue;
                    }
                }
            }
            // CN_QTY and DN_QTY
            if (custInvoiceJourExtensionTH.NoteFormat       == TaxUnrealizedSalesNoteFormat::CreditNoteQuantity
                || custInvoiceJourExtensionTH.NoteFormat    == TaxUnrealizedSalesNoteFormat::DebitNoteQuantity)
            {
                ++sequence;
                this.insertForQuantity();
            }
            else if (custInvoiceTrans.Qty < 0 && (custInvoiceJourExtensionTH.NoteFormat == TaxUnrealizedSalesNoteFormat::CreditNoteValue
                    || custInvoiceJourExtensionTH.NoteFormat == TaxUnrealizedSalesNoteFormat::DebitNoteValue))
            {
                diffPrice   = custInvoiceTrans.SalesPrice;
                diffAmount  = custInvoiceTrans.LineAmount;
                ++sequence;
                this.insertForValue();
            }
            else if (custInvoiceTrans.Qty > 0)
            {
                if (custInvoiceTransPre.LedgerDimension != custInvoiceTrans.LedgerDimension
                    || custInvoiceTransPre.ItemId       != custInvoiceTrans.ItemId
                    || custInvoiceTransPre.Qty          != custInvoiceTrans.Qty
                    || custInvoiceTransPre.InventDimId  != custInvoiceTrans.InventDimId)
                {
                    previousLineNum = 0;
                }

                select firstonly custInvoiceTransLocal
                    order by custInvoiceTransLocal.LineNum asc
                    where custInvoiceTransLocal.SalesId                 == custInvoiceJour.SalesId
                        && custInvoiceTransLocal.InvoiceId              == custInvoiceJour.InvoiceId
                        && custInvoiceTransLocal.InvoiceDate            == custInvoiceJour.InvoiceDate
                        && custInvoiceTransLocal.NumberSequenceGroup    == custInvoiceJour.NumberSequenceGroup
                        && (custInvoiceTransLocal.ItemId == custInvoiceTrans.ItemId || custInvoiceTransLocal.LedgerDimension == custInvoiceTrans.LedgerDimension)
                        && custInvoiceTransLocal.InventDimId            == custInvoiceTrans.InventDimId
                        && custInvoiceTransLocal.Qty                    == -custInvoiceTrans.Qty
                        && custInvoiceTransLocal.LineNum                >  previousLineNum;

                if (custInvoiceTransLocal)
                {
                    previousLineNum = custInvoiceTransLocal.LineNum;
                }

                diffPrice   = abs(custInvoiceTrans.SalesPrice - custInvoiceTransLocal.SalesPrice);
                diffAmount  = abs(custInvoiceTrans.LineAmount + custInvoiceTransLocal.LineAmount);
                ++sequence;
                this.insertForValue();

                custInvoiceTransPre.data(custInvoiceTrans);
            }
        }

        if (CustFormletterParameters::find().TaxSpecPrintLevel != TaxSpecPrintLevel::None)
        {
            this.insertTaxes(contract, CustInvoiceJour::findRecId(custInvoiceJourRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the invoice taxes information.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// A <c>CustInvoiceJour</c> record that contains invoice data.
    /// </param>
    public void insertTaxes(CustDebitCreditNoteContract _contract, CustInvoiceJour _custInvoiceJour)
    {
        TaxSpec             taxSpec;
        TaxTrans            taxTransLocal;
        CustInvoiceTrans    custInvoiceTransLocal;
        InventTable         inventTableLocal;
        TaxTable            taxTableLocal;

        if (_contract.parmProdType() == TaxUnrealizedDocuProdType::All)
        {
            taxSpec = TaxSpec::construct(_custInvoiceJour.LedgerVoucher, _custInvoiceJour.InvoiceDate, _custInvoiceJour.RecId);
            taxSpec.parmLanguageId(_custInvoiceJour.LanguageId);

            while (taxSpec.parmTaxSpec(false))
            {
                taxTmpTable.clear();
                taxTmpTable.TaxCode   = taxSpec.taxCode();
                taxTmpTable.PrintCode = taxSpec.taxWriteCode();
                taxTmpTable.TaxAmount = taxSpec.taxAmount();
                taxTmpTable.insert();
            }
        }
        else
        {
            SysDictType dictType = new SysDictType(extendedTypeNum(TaxValue));

            while select sum(SourceTaxAmountCur) from taxTransLocal
                group by TaxCode, TaxValue
                where taxTransLocal.Voucher == _custInvoiceJour.LedgerVoucher
                    && taxTransLocal.TransDate == _custInvoiceJour.InvoiceDate
            join RecId from custInvoiceTransLocal
                where taxTransLocal.SourceTableId == custInvoiceTransLocal.TableId
                    && taxTransLocal.SourceRecId == custInvoiceTransLocal.RecId
            join RecId from inventTableLocal
                where inventTableLocal.ItemId == custInvoiceTransLocal.ItemId
                    && (   (_contract.parmProdType() == TaxUnrealizedDocuProdType::Item    && inventTableLocal.ItemType == ItemType::Item)
                        || (_contract.parmProdType() == TaxUnrealizedDocuProdType::Service && inventTableLocal.ItemType == ItemType::Service))                        
            {
                taxTableLocal = TaxTable::find(taxTransLocal.TaxCode);
                taxTmpTable.clear();
                taxTmpTable.TaxCode   = taxTransLocal.TaxCode;
                taxTmpTable.PrintCode = taxTableLocal.TaxWriteSelection == TaxWriteSelection::PrintCode ? taxTableLocal.PrintCode :
                                        num2str(taxTransLocal.TaxValue, -1, dictType.noOfDecimals(), -1, -1);
                taxTmpTable.TaxAmount = taxTransLocal.SourceTaxAmountCur;
                taxTmpTable.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableConnections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the user connection to use on table.
    /// </summary>
    /// <remarks>
    /// This is required to guarantee that the <c>createdTransactionId</c> ID of inserted record differs
    /// from default transaction.
    /// </remarks>
    public void setTableConnections()
    {
        tmpTable.setConnection(this.parmUserConnection());
        taxTmpTable.setConnection(this.parmUserConnection());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>