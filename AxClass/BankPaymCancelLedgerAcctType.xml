<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymCancelLedgerAcctType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPaymCancelLedgerAcctType</c> class provides methods to find the original account entry when creating a cancelled entry.
/// </summary>
abstract class BankPaymCancelLedgerAcctType
{
    BankAccountTrans bankAccountTransToCancel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variables to the values provided.
    /// </summary>
    /// <param name="_common">
    /// The transaction being cancelled.
    /// </param>
    /// <param name="_bankAccountTransToCancel">
    /// The bank account transaction being cancelled.
    /// </param>
    abstract void init(Common _common,
        BankAccountTrans _bankAccountTransToCancel)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveCashGeneralJournalAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the general journal account entry record ID of the cash entry for the payment.
    /// </summary>
    /// <returns>
    /// The record ID of the <c>GeneralJournalAccountEntry</c> record.
    /// </returns>
    abstract RecId retrieveCashGeneralJournalAccount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveOffsetToCancelGeneralJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the general journal account entry record ID that offsets the bank transaction.
    /// </summary>
    /// <returns>
    /// The <c>GeneralJournalAccountEntry</c> table record ID of the record found.
    /// </returns>
    abstract RecId retrieveOffsetToCancelGeneralJournal()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BankPaymCancelLedgerAccountType</c> sub class based on the common table type.
    /// </summary>
    /// <param name="_common">
    /// The table that drives the behavior of the class.
    /// </param>
    /// <param name="_bankAccountTransToCancel">
    /// The bank account transaction being cancelled.
    /// </param>
    /// <returns>
    /// An instance of the appropriate <c>BankPaymCancelLedgerAccountType</c> sub class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The table buffer that was passed into the method is not valid.
    /// </exception>
    public static BankPaymCancelLedgerAcctType construct(Common _common,
        BankAccountTrans _bankAccountTransToCancel)
    {
        BankPaymCancelLedgerAcctType bankPaymCancelLedgerAcctType;

        switch (_common.TableId)
        {
            case tableNum(BankDeposit) :
                bankPaymCancelLedgerAcctType = new BankPaymCancelLedgerAcctType_Deposit();

                break;

            case tableNum(CustTrans) :
                bankPaymCancelLedgerAcctType = new BankPaymCancelLedgerAcctType_CustTrans();

                break;

            case tableNum(BankAccountTrans) :
                bankPaymCancelLedgerAcctType = new BankPaymCancelLedgerAcctType_BankTrans();

                break;

            case tableNum(CustVendPaymJournalFee) :
                bankPaymCancelLedgerAcctType = new BankPaymCancelLedgerAcctType_BankFee();

                break;

            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        bankPaymCancelLedgerAcctType.init(_common, _bankAccountTransToCancel);

        return bankPaymCancelLedgerAcctType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findGenJourAcctEntryToCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the general journal transaction to offset based on the voucher, date, posting type, amount and currency.
    /// </summary>
    /// <param name="_voucherToCancel">
    /// The voucher being cancelled.
    /// </param>
    /// <param name="_transDateToCancel">
    /// The date of the voucher being cancelled.
    /// </param>
    /// <param name="_voucherDataAreaId">
    /// The data area of the voucher being cancelled.
    /// </param>
    /// <param name="_postingType">
    /// The posting type to restrict on.
    /// </param>
    /// <param name="_paymReferenceToCancel">
    /// The payment reference of the voucher being cancelled; optional.
    /// </param>
    /// <param name="_amountToCancel">
    /// The amount of the voucher being cancelled; optional.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency code of the voucher being cancelled; optional.
    /// </param>
    /// <returns>
    /// The <c>GeneralJournalAccountEntry</c> table record ID of the bank fee.
    /// </returns>
    static protected RecId findGenJourAcctEntryToCancel(Voucher _voucherToCancel,
        TransDate _transDateToCancel,
        DataAreaId _voucherDataAreaId,
        LedgerPostingType _postingType,
        PaymReference _paymReferenceToCancel = '',
        AmountCur _amountToCancel = 0.0,
        CurrencyCode _currencyCode = '')
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        boolean doNotFilterByReference = (_paymReferenceToCancel == '');
        boolean doNotFilterByAmount= (_amountToCancel == 0.0);
        boolean doNotFilterByCurrency = (_currencyCode == '');

        select firstonly RecId from subledgerVoucherGeneralJournalEntry
            where subledgerVoucherGeneralJournalEntry.Voucher ==  _voucherToCancel
                && subledgerVoucherGeneralJournalEntry.AccountingDate == _transDateToCancel
                && subledgerVoucherGeneralJournalEntry.VoucherDataAreaId == _voucherDataAreaId
        join RecId from generalJournalAccountEntry
            where generalJournalAccountEntry.GeneralJournalEntry == subledgerVoucherGeneralJournalEntry.GeneralJournalEntry
                && generalJournalAccountEntry.PostingType == _postingType
                && (doNotFilterByReference || generalJournalAccountEntry.PaymentReference == _paymReferenceToCancel)
                && (doNotFilterByAmount || generalJournalAccountEntry.TransactionCurrencyAmount == _amountToCancel)
                && (doNotFilterByCurrency || generalJournalAccountEntry.TransactionCurrencyCode == _currencyCode);

        return generalJournalAccountEntry.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>