<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCImportModelDefinitionHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PCImportModelDefinitionHandler extends PCImportModelNodeHandler
{
    PCProductConfigurationModel             productConfigurationModel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the old <c>PCProductConfigurationModel</c> with the specified name if any.
    /// </summary>
    protected void importData()
    {
        PCProductConfigurationModel oldProductConfigurationModel;
        PCImportXmlDocumentHandler        root                            = this.root();
        str                         rootComponentName               = this.getFieldByName(fieldStr(PCProductConfigurationModel, RootComponentClass));

        this.copyField(fieldStr(PCProductConfigurationModel, Name));
        this.copyIntField(fieldStr(PCProductConfigurationModel, SolverStrategy));
        this.copyIntField(fieldStr(PCProductConfigurationModel, Columns), PcModelingLibrary::ColumnsDefault);

        productConfigurationModel.RootComponentClass                = root.importedComponents().lookup(rootComponentName);

        boolean isPCImportPriceModelSelectionCriteriaFlightEnabled = PCImportPriceModelSelectionCriteriaV2Flight::instance().isEnabled();

        RefRecId emptyModelReference;
        if (isPCImportPriceModelSelectionCriteriaFlightEnabled)
        {
            // Remove the product configuration model reference in the price model and selection criteria records to 
            // prevent deletion of these records when the old product configuration model is deleted
            this.updateExistingPriceModelAndSelectionCriteriaRecordModelReference(PCProductConfigurationModel::findByName(productConfigurationModel.Name).RecId, emptyModelReference);
        }

        delete_from oldProductConfigurationModel
            where oldProductConfigurationModel.Name == productConfigurationModel.Name;

        productConfigurationModel.insert();

        if (isPCImportPriceModelSelectionCriteriaFlightEnabled)
        {
            // Update the product configuration model reference in the price model and selection criteria records to the new configuration model
            this.updateExistingPriceModelAndSelectionCriteriaRecordModelReference(emptyModelReference, productConfigurationModel.RecId);
        }

        root.parmProductConfigurationModel(productConfigurationModel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingPriceModelAndSelectionCriteriaRecordModelReference</Name>
				<Source><![CDATA[
    private void updateExistingPriceModelAndSelectionCriteriaRecordModelReference(RefRecId _oldModelRecId, RefRecId _updateModelRecId)
    {
        PCPriceModel priceModel;
        update_recordset priceModel
            setting ProductConfigurationModel = _updateModelRecId
            where priceModel.ProductConfigurationModel == _oldModelRecId;

        PCPriceModelSelectionCriteria priceModelSelectionCriteria;
        priceModelSelectionCriteria.skipAosValidation(true);
        priceModelSelectionCriteria.skipDatabaseLog(true);
        priceModelSelectionCriteria.skipDataMethods(true);
        priceModelSelectionCriteria.skipEvents(true);

        if (PCImportModelDefinitionHandlerCrossCompanyUpdateFlight::instance().isEnabled()
            && !isSystemAdministrator())
        {
            while select forupdate crosscompany priceModelSelectionCriteria
                where priceModelSelectionCriteria.ProductConfigurationModel == _oldModelRecId
            {
                changecompany(priceModelSelectionCriteria.dataAreaId)
                {
                    priceModelSelectionCriteria.ProductConfigurationModel = _updateModelRecId;
                    priceModelSelectionCriteria.update();
                }
            }
        }
        else
        {
            update_recordset crosscompany priceModelSelectionCriteria
                setting ProductConfigurationModel = _updateModelRecId
                where priceModelSelectionCriteria.ProductConfigurationModel == _oldModelRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>record</Name>
				<Source><![CDATA[
    public Common record(boolean _suppressValidation = false)
    {
        return productConfigurationModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCImportModelDefinitionHandler construct()
    {
        return new PCImportModelDefinitionHandler();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>