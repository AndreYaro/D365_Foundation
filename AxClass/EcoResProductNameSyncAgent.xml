<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductNameSyncAgent</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductNameSyncAgent extends EcoResProductSynchronizationAgent
{
    EcoResProductSearchName     searchName;
    EcoResProductSearchName     searchNameOrigin;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfCanSyncSearchName</Name>
				<Source><![CDATA[
        protected boolean checkIfCanSyncSearchName()
    {
        if (searchName != searchNameOrigin)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoIfNotSyncAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a warning that the search name will not be updated in companies where it has been modified
    /// by a user.
    /// </summary>
    protected void infoIfNotSyncAll()
    {
        InventTable inventTable;

        //if search name has been changed on Legal Entity level then inform that not all items will be updated
        select firstonly crossCompany RecId from inventTable
            where  inventTable.Product      == product
                && inventTable.NameAlias    != searchNameOrigin;
        if (inventTable.RecId)
        {
            warning("@SYS331340");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSynchronize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether synchronization should be executed.
    /// </summary>
    /// <returns>
    ///    true if synchronization should be executed; otherwise, false.
    /// </returns>
    public boolean mustSynchronize()
    {
        EcoResProduct   ecoResProduct   = EcoResProduct::find(product);
        boolean         ret             = false;

        if (ecoResProduct.isProductMaster() || ecoResProduct.isDistinctProduct())
        {
            ret = this.checkIfCanSyncSearchName();
            if (ret)
            {
                this.infoIfNotSyncAll();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchName</Name>
				<Source><![CDATA[
        public EcoResProductSearchName parmSearchName(EcoResProductSearchName _searchName = searchName)
    {
        searchName = _searchName;

        return searchName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchNameOrigin</Name>
				<Source><![CDATA[
        public EcoResProductSearchName parmSearchNameOrigin(EcoResProductSearchName _searchNameOrigin = searchNameOrigin)
    {
        searchNameOrigin = _searchNameOrigin;

        return searchNameOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeInsertAndUpdateAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes the <c>EcoResProduct</c> table name and search name attributes for insert and update
    ///    actions.
    /// </summary>
    public void synchronizeInsertAndUpdateAction()
    {
        EcoResProduct   ecoResProduct = EcoResProduct::find(product);

        this.validate();

        if (ecoResProduct.isProductMaster() || ecoResProduct.isDistinctProduct())
        {
            InventTable inventTable = InventTable::findByProduct(product, true);

            //sync only if name alias in legal entity is the same as for the product.
            if (inventTable.NameAlias == searchNameOrigin)
            {
                inventTable.NameAlias = searchName;
                inventTable.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static EcoResProductNameSyncAgent construct()
    {
        return new EcoResProductNameSyncAgent();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
