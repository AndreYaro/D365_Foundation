<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCalculationEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>HcmPositionForecastCalculationEngine</c> class manages the position forecast calculation processing for a selected group
///    of positions and cost elements.
/// </summary>
class HcmPositionForecastCalculationEngine
{
    HcmPositionForecastRecId            positionForecastRecId;
    LegalEntity                         legalEntity;
    ValidFromDate                       activationDate;
    ValidToDate                         retirementDate;
    RefRecId                            hcmPositionForecastCalcGroupId;
    boolean                             isSubProcess;
    HcmBudgetAmountCur                  selectedBudgetAccLinebudgetAmountCur;
    boolean                             markForDeletion;
    boolean                             processMultipleCostElements;
    Set                                 positionBudgetAccLineSet;
    RefRecId                            deletedRecId;
    Set                                 positionForecastScenarioSet;
    HcmPositionForecastScenarioRecId    positionForecastScenarioRecId;
    BudgetPlanningProcessRecId          budgetPlanningProcessRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateCostElementBudgetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the budget amount for the position forecast by calculating dependent earning basis.
    /// </summary>
    /// <param name="_parentBudgetAccLine">
    /// The parent <c>HcmPositionForecastBudgetAcctLine</c> table record that is to be used for calculation.
    /// </param>
    /// <param name="_sourceBudgetAccLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record that is at first place in the earning basis hierarchy; optional.
    /// </param>
    /// <returns>
    /// The budget amount for the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </returns>
    public HcmBudgetAmountCur calculateCostElementBudgetAmount(HcmPositionForecastBudgetAcctLine _parentBudgetAccLine,
                                                              HcmPositionForecastBudgetAcctLine _sourceBudgetAccLine = null)
    {
        HcmBudgetPurposeTypeDetail budgetPurposeTypeDetail = HcmBudgetPurposeTypeDetail::find(_parentBudgetAccLine.BudgetPurposeTypeDetail);
        HcmBudgetPurposeType budgetPurpose = HcmBudgetPurposeType::find(budgetPurposeTypeDetail.BudgetPurposeType);
        HcmBudgetPurposeEarningBasis earningBasis;
        HcmPositionForecastBudgetAcctLine acctLine;

        //Budget purpose for the parent cost element
        HcmBudgetPurposeType sourceBudgetPurpose;
        AmountCur totalAmount;

        //Check the parent budget purpose for the dependent earning basis
        if (HcmBudgetPurposeEarningBasis::isBudgetPurposeAnEarningBasis(budgetPurpose.RecId))
        {
            //loop all basis
            while select earningBasis
                where earningBasis.BudgetPurposeType == budgetPurpose.RecId
            {
                //loop all line for each basis to get the amount
                while select acctLine order by IsPercentageBased asc
                    where acctLine.PositionForecastScenario == _parentBudgetAccLine.PositionForecastScenario
                        && acctLine.LegalEntity == _parentBudgetAccLine.LegalEntity
                        && _parentBudgetAccLine.EffectiveDate <= acctLine.ExpirationDate
                        && _parentBudgetAccLine.ExpirationDate >= acctLine.EffectiveDate
                    join budgetPurposeTypeDetail
                        where budgetPurposeTypeDetail.RecId == acctLine.BudgetPurposeTypeDetail
                    join sourceBudgetPurpose
                        where budgetPurposeTypeDetail.BudgetPurposeType == sourceBudgetPurpose.RecId
                        && budgetPurposeTypeDetail.BudgetPurposeType == earningBasis.EarningBudgetPurposeType
                {
                    if (!acctLine.IsPercentageBased)
                    {
                        if (_sourceBudgetAccLine == null)
                        {
                            // Calculate fixed amount value if it is not percentage on percentage earning
                            totalAmount += this.costElementAmount(_parentBudgetAccLine, acctLine);
                        }
                        else
                        {
                            //
                            // Consider originally selected cost element line if cost element on the line is percentage based and it depends on percentage based earning.
                            // Example Tax -> Bonus -> Base Pay
                            //
                            totalAmount += this.costElementAmount(_parentBudgetAccLine, acctLine, _sourceBudgetAccLine);
                        }
                    }
                    else
                    {
                        // If the budget account line is of type percentage then look for the earning basis to calculate this percentage
                        totalAmount += this.calculateCostElementBudgetAmount(acctLine, _parentBudgetAccLine);
                    }
                }
            }

            if (_sourceBudgetAccLine != null)
            {
                if (this.getDateFactor(_sourceBudgetAccLine, _parentBudgetAccLine) != 0)
                {
                    totalAmount = this.calculatePercentageOnAmount(totalAmount, _parentBudgetAccLine.PercentageOfDefaultBasisAmount);
                }
                else
                {
                    totalAmount = 0;
                }
            }
            else
            {
                totalAmount = this.calculatePercentageOnAmount(totalAmount, _parentBudgetAccLine.PercentageOfDefaultBasisAmount);
            }
        }
        else
        {
            //If the budget account line does not have any earning basis and is a fixed amount, then simple sum the amount
            totalAmount = _parentBudgetAccLine.AmountCur;
            totalAmount = totalAmount * this.getDaysProratedPercentage(_parentBudgetAccLine.EffectiveDate, _parentBudgetAccLine.ExpirationDate);
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateCostElementBudgetAmountV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the budget amount for the position forecast by calculating dependent earning basis.
    /// </summary>
    /// <param name="_parentBudgetAccLine">
    /// The parent <c>HcmPositionForecastBudgetAcctLine</c> table record that is to be used for calculation.
    /// </param>
    /// <param name="_sourceBudgetAccLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record that is at first place in the earning basis hierarchy; optional.
    /// </param>
    /// <returns>
    /// The budget amount for the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </returns>
    public HcmBudgetAmountCur calculateCostElementBudgetAmountV2(
        HcmPositionForecastBudgetAcctLine _parentBudgetAccLine,
        HcmPositionForecastBudgetAcctLine _sourceBudgetAccLine = null)
    {
        HcmBudgetPurposeTypeDetail childBudgetPurposeTypeDetail;
        HcmBudgetPurposeTypeDetail parentBudgetPurposeTypeDetail;
        HcmBudgetPurposeEarningBasis earningBasis;
        HcmPositionForecastBudgetAcctLine acctLine;
        AmountCur totalAmount;

        //Check the budget purpose on the parent line for dependent earning basis
        if (_parentBudgetAccLine.existsDependentEarningBasisOnCostElement())
        {
            //loop all line for each basis to get the amount
            while select acctLine order by IsPercentageBased asc
                where acctLine.PositionForecastScenario == _parentBudgetAccLine.PositionForecastScenario
                    && acctLine.LegalEntity == _parentBudgetAccLine.LegalEntity
                    && acctLine.ExpirationDate >= _parentBudgetAccLine.EffectiveDate
                    && acctLine.EffectiveDate <= _parentBudgetAccLine.ExpirationDate
                exists join parentBudgetPurposeTypeDetail
                    where parentBudgetPurposeTypeDetail.RecId == _parentBudgetAccLine.BudgetPurposeTypeDetail
                exists join earningBasis
                    where earningBasis.BudgetPurposeType == parentBudgetPurposeTypeDetail.BudgetPurposeType
                exists join childBudgetPurposeTypeDetail
                    where childBudgetPurposeTypeDetail.BudgetPurposeType == earningBasis.EarningBudgetPurposeType
                        && childBudgetPurposeTypeDetail.RecId == acctLine.BudgetPurposeTypeDetail
            {
                if (!acctLine.IsPercentageBased)
                {
                    if (_sourceBudgetAccLine == null)
                    {
                        // Calculate fixed amount value if it is not percentage on percentage earning
                        totalAmount += this.costElementAmount(_parentBudgetAccLine, acctLine);
                    }
                    else
                    {
                        //
                        // Consider originally selected cost element line if cost element on the line is percentage based and it depends on percentage based earning.
                        // Example Tax -> Bonus -> Base Pay
                        //
                        totalAmount += this.costElementAmount(_parentBudgetAccLine, acctLine, _sourceBudgetAccLine);
                    }
                }
                else
                {
                    // If the budget account line is of type percentage then look for the earning basis to calculate this percentage
                    totalAmount += this.calculateCostElementBudgetAmountV2(acctLine, _parentBudgetAccLine);
                }
            }

            if (_sourceBudgetAccLine != null)
            {
                if (this.getDateFactor(_sourceBudgetAccLine, _parentBudgetAccLine) != 0)
                {
                    totalAmount = this.calculatePercentageOnAmount(totalAmount, _parentBudgetAccLine.PercentageOfDefaultBasisAmount);
                }
                else
                {
                    totalAmount = 0;
                }
            }
            else
            {
                totalAmount = this.calculatePercentageOnAmount(totalAmount, _parentBudgetAccLine.PercentageOfDefaultBasisAmount);
            }
        }
        else
        {
            //If the budget account line does not have any earning basis and is a fixed amount, then simple sum the amount
            totalAmount = _parentBudgetAccLine.AmountCur;
            totalAmount = totalAmount * this.getDaysProratedPercentage(_parentBudgetAccLine.EffectiveDate, _parentBudgetAccLine.ExpirationDate);
        }

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFTEFactoredBudgetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Multiplies FTE value with the budget amount to calculate the budget amount for a <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </summary>
    /// <param name="_positionForecastBudgetAccLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </param>
    /// <returns>
    /// The FTE value times budget amount value for a for a <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </returns>
    private HcmBudgetAmountCur calculateFTEFactoredBudgetAmount(HcmPositionForecastBudgetAcctLine _positionForecastBudgetAccLine)
    {
        HcmFullTimeEquivalency              positionForecastFTE = HcmPositionForecastScenario::find(_positionForecastBudgetAccLine.PositionForecastScenario).FullTimeEquivalency;
        HcmBudgetAmountCur                  budgetAmount;
        HcmBudgetPurposeTypeAnnualLimit     budgetPurposeTypeAnnualLimit = _positionForecastBudgetAccLine.getCostElementYearlyLimit();

        HcmPositionForecastScenario           hcmPositionForecastScenario;
        HcmPositionForecastBudgetDefaultValue hcmPositionForecastBudgetDefaultValue;

        budgetAmount = this.calculateCostElementBudgetAmountV2(_positionForecastBudgetAccLine) * positionForecastFTE;

        if (budgetPurposeTypeAnnualLimit > 0 && budgetAmount > budgetPurposeTypeAnnualLimit)
        {
            budgetAmount = budgetPurposeTypeAnnualLimit;
        }

        select firstOnly CurrencyCode from hcmPositionForecastBudgetDefaultValue
            where hcmPositionForecastBudgetDefaultValue.LegalEntity == _positionForecastBudgetAccLine.LegalEntity
                exists join hcmPositionForecastScenario
                    where hcmPositionForecastScenario.PositionForecast == hcmPositionForecastBudgetDefaultValue.PositionForecast
                          && hcmPositionForecastScenario.RecId == _positionForecastBudgetAccLine.PositionForecastScenario;

        budgetAmount = CurrencyExchange::round(budgetAmount, hcmPositionForecastBudgetDefaultValue.CurrencyCode);

        return budgetAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePercentageOnAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates percentage on the fixed amount.
    /// </summary>
    /// <param name="_fixedAmount">
    /// The annual amount of the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </param>
    /// <param name="_percentage">
    /// The percentage  of the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </param>
    /// <returns>
    /// The percentage of the amount that is related to the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </returns>
    private AmountCur calculatePercentageOnAmount(AmountCur _fixedAmount, HcmBudgetPercent _percentage)
    {
        return (_fixedAmount * _percentage) / 100;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costElementAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the prorated amount for the selected <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </summary>
    /// <param name="_currentlySelectedAmountBudgetAccLine">
    /// The selected <c>HcmPositionForecastBudgetAcctLine</c> table record that forms the basis for the other
    /// <c>HcmPositionForecastBudgetAcctLine</c> table records.
    /// </param>
    /// <param name="_currentlySelectedEarningBasisBudgetAccLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record that is selected to compute the budget amount.
    /// </param>
    /// <param name="_originalSelectedSourceBudgetAcctLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record that is at first place in the earning basis hierarchy; optional.
    /// </param>
    /// <returns>
    /// The prorated amount for the selected <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </returns>
    private HcmBudgetAmountCur costElementAmount(HcmPositionForecastBudgetAcctLine _currentlySelectedAmountBudgetAccLine,
                                                HcmPositionForecastBudgetAcctLine _currentlySelectedEarningBasisBudgetAccLine,
                                                HcmPositionForecastBudgetAcctLine _originalSelectedSourceBudgetAcctLine = null)
    {
        HcmBudgetAmountCur costElementAmount;

        costElementAmount = _currentlySelectedEarningBasisBudgetAccLine.AmountCur * this.getDateFactor(_currentlySelectedAmountBudgetAccLine,
                                                                                    _currentlySelectedEarningBasisBudgetAccLine,
                                                                                    _originalSelectedSourceBudgetAcctLine);

        return costElementAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the date factor for the <c>HcmPositionForecastBudgetAcctLine</c> table record to prorate the annual amount.
    /// </summary>
    /// <param name="_currentlySelectedAmountBudgetAccLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record that is selected to compute the budget amount.
    /// </param>
    /// <param name="_currentlySelectedEarningBasisBudgetAccLine">
    /// The selected <c>HcmPositionForecastBudgetAcctLine</c> table record that forms the basis for the other
    /// <c>HcmPositionForecastBudgetAcctLine</c> table records.
    /// </param>
    /// <param name="_originalSelectedSourceBudgetAcctLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table record that is at first place in the earning basis hierarchy.
    /// </param>
    /// <returns>
    /// The date factor for the <c>HcmPositionForecastBudgetAcctLine</c> table record to prorate the annual amount.
    /// </returns>
    /// <remarks>
    /// This method determines the date range for the cost element that could have multiple hierarchies
    /// and it also calculates number of days between that date range.
    /// </remarks>
    private AmountCur getDateFactor(HcmPositionForecastBudgetAcctLine _currentlySelectedAmountBudgetAccLine,
                                    HcmPositionForecastBudgetAcctLine _currentlySelectedEarningBasisBudgetAccLine,
                                    HcmPositionForecastBudgetAcctLine _originalSelectedSourceBudgetAcctLine = null)
    {
        EffectiveDate dateRangeEffectiveDate;
        ExpirationDate dateRangeExpirationDate;
        real proratedBudgetPercentage;

        dateRangeEffectiveDate = max(_currentlySelectedAmountBudgetAccLine.EffectiveDate, _currentlySelectedEarningBasisBudgetAccLine.EffectiveDate);
        dateRangeExpirationDate = min(_currentlySelectedAmountBudgetAccLine.ExpirationDate, _currentlySelectedEarningBasisBudgetAccLine.ExpirationDate);

        if (_originalSelectedSourceBudgetAcctLine != null)
        {
            // Compare dates with first cost element line in the hierarchy, if the line is based on cost element that depends on percentage based earning.
            dateRangeEffectiveDate =  max(_originalSelectedSourceBudgetAcctLine.EffectiveDate, dateRangeEffectiveDate);
            dateRangeExpirationDate =  min(_originalSelectedSourceBudgetAcctLine.ExpirationDate, dateRangeExpirationDate);
        }

        if (dateRangeExpirationDate > dateRangeEffectiveDate)
        {
            proratedBudgetPercentage = this.getDaysProratedPercentage(dateRangeEffectiveDate, dateRangeExpirationDate);
        }
        else
        {
            proratedBudgetPercentage = 0.00;
        }

        return proratedBudgetPercentage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDaysProratedPercentage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the date factor for the <c>HcmPositionForecastBudgetAcctLine</c> table record that is used to prorate an amount.
    /// </summary>
    /// <param name="_validFrom">
    /// The effective date of the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </param>
    /// <param name="_validTo">
    /// The expiration date of the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </param>
    /// <returns>
    /// The date factor for the <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </returns>
    private HcmBudgetPercent getDaysProratedPercentage(TransDate _validFrom, TransDate _validTo)
    {
        return (_validTo - _validFrom + 1) / 365;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivationDate</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ValidFromDate parmActivationDate(ValidFromDate _activationDate = activationDate)
    {
        activationDate = _activationDate;
        return activationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetAmountCur</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public HcmBudgetAmountCur parmBudgetAmountCur(HcmBudgetAmountCur _budgetAmountCur = selectedBudgetAccLinebudgetAmountCur)
    {
        selectedBudgetAccLinebudgetAmountCur = _budgetAmountCur;
        return selectedBudgetAccLinebudgetAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanningProcessRecId</Name>
				<Source><![CDATA[
    public BudgetPlanningProcessRecId parmBudgetPlanningProcessRecId(BudgetPlanningProcessRecId _budgetPlanningProcessRecId = budgetPlanningProcessRecId)
    {
        budgetPlanningProcessRecId = _budgetPlanningProcessRecId;

        return budgetPlanningProcessRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHcmPositionForecastCalcGroupId</Name>
				<Source><![CDATA[
    public RefRecId parmHcmPositionForecastCalcGroupId(RefRecId _hcmPositionForecastCalcGroupId = hcmPositionForecastCalcGroupId)
    {
        hcmPositionForecastCalcGroupId = _hcmPositionForecastCalcGroupId;
        return hcmPositionForecastCalcGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public LegalEntity parmLegalEntity(LegalEntity _legalEntity = legalEntity)
    {
        legalEntity = _legalEntity;
        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastRecId</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public HcmPositionForecastRecId parmPositionForecastRecId(HcmPositionForecastRecId _positionForecastRecId = positionForecastRecId)
    {
        positionForecastRecId = _positionForecastRecId;
        return positionForecastRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastScenarioRecId</Name>
				<Source><![CDATA[
    public HcmPositionForecastScenarioRecId parmPositionForecastScenarioRecId(HcmPositionForecastScenarioRecId _positionForecastScenarioRecId = positionForecastScenarioRecId)
    {
        positionForecastScenarioRecId = _positionForecastScenarioRecId;

        return positionForecastScenarioRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastScenarioSet</Name>
				<Source><![CDATA[
    public Set parmPositionForecastScenarioSet(Set _positionForecastScenarioSet = positionForecastScenarioSet)
    {
        positionForecastScenarioSet = _positionForecastScenarioSet;
        return positionForecastScenarioSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessMultipleCostElements</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public boolean parmProcessMultipleCostElements(boolean _processMultipleCostElements = processMultipleCostElements)
    {
        processMultipleCostElements = _processMultipleCostElements;
        return processMultipleCostElements;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetirementDate</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public ValidToDate parmRetirementDate(ValidToDate _retirementDate = retirementDate)
    {
        retirementDate = _retirementDate;
        return retirementDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionForecastScenarioSetEnumerator</Name>
				<Source><![CDATA[
    private SetEnumerator positionForecastScenarioSetEnumerator()
    {
        return positionForecastScenarioSet.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSingleForecastPosition</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes all of the <c>HcmPositionForecastCalculationStatus</c> records by validating them and creating
    /// calculation process records.
    /// </summary>
    /// <remarks>
    /// Also sets the flag on the retrieved <c>HcmPositionForecastCalculationStatus</c> record to mark it processed.
    /// The calculation process record is created in the <c>HcmPositionForecastBudgetAcctLine</c> table if validation is
    /// successful; otherwise, a record in the <c>HcmPositionForecastBudgetAcctLine</c> table is created.
    /// </remarks>
    private void processSingleForecastPosition()
    {
        #OCCRetryCount

        HcmPositionForecastCalculationStatus    hcmPositionForecastCalculationStatus, statusUpdateTable;
        HcmPositionForecastCalculationGroup     hcmPositionForecastCalculationGroup;
        HcmPositionForecastBudgetAcctLine       hcmPositionForecastBudgetAcctLine;
        HcmPositionForecastScenario             hcmPositionForecastScenario;
        HcmBenefitEnrollmentStatusRecId         statusRecId;
        container                               validationResult;

        hcmPositionForecastCalculationGroup = HcmPositionForecastCalculationGroup::find(this.parmHcmPositionForecastCalcGroupId());

        while select forupdate hcmPositionForecastCalculationStatus
            where hcmPositionForecastCalculationStatus.PositionForecastCalculationGroup == hcmPositionForecastCalculationGroup.RecId
        {
            statusRecId = hcmPositionForecastCalculationStatus.RecId;

            while select * from hcmPositionForecastBudgetAcctLine
                exists join hcmPositionForecastScenario
                where hcmPositionForecastBudgetAcctLine.PositionForecastScenario ==  hcmPositionForecastScenario.RecId
                && hcmPositionForecastScenario.RecId == hcmPositionForecastCalculationGroup.PositionForecastScenario
            {
                try
                {
                    validationResult = conNull();
                    validationResult = this.validateCostElement();
                    ttsbegin;

                    if (conLen(validationResult) > 0)
                    {
                        // Validation errors exist
                        hcmPositionForecastCalculationStatus.PositionForecastCalcStatusState = HcmPositionForecastCalcStatusState::Fail;
                    }
                    else
                    {
                        // Validation was successful.
                        hcmPositionForecastCalculationStatus.PositionForecastCalcStatusState = HcmPositionForecastCalcStatusState::Pass;

                        //Calculate the budget amount by going through all the earning basis references that are in the <c>HcmPositionForecastBudgetAcctLine</c> table
                        hcmPositionForecastBudgetAcctLine.BudgetAmountCur = this.calculateFTEFactoredBudgetAmount(hcmPositionForecastBudgetAcctLine);

                        //Update the budget amount for the budegt account line
                        hcmPositionForecastBudgetAcctLine.selectForUpdate(true);
                        this.parmBudgetAmountCur(hcmPositionForecastBudgetAcctLine.BudgetAmountCur);
                        hcmPositionForecastBudgetAcctLine.update();
                    }

                    select firstonly forupdate statusUpdateTable
                        where statusUpdateTable.RecId == hcmPositionForecastCalculationStatus.RecId;

                    statusUpdateTable.PositionForecastCalcStatusState = HcmPositionForecastCalcStatusState::Pass;

                    statusUpdateTable.update();
                    ttscommit;
                }

                catch (Exception::Deadlock)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::Deadlock;
                    }
                    else
                    {
                        retry;
                    }
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCalcProcessPositionForecastScenario</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point into the <c>HcmPositionForecastCalculationEngine</c> class.
    /// </summary>
    /// <param name="_positionForecastCalculationGroupId">
    ///    A <c>HcmPositionForecastCalculationGroup</c> value that specifies the group of positions and cost elements to process.
    /// </param>
    /// <remarks>
    ///    This method is the only entry point into the <c>HcmPositionForecastCalculationEngine</c> class, which starts
    ///    off the processing of cost elements for the selected positions.
    /// </remarks>
    public void runCalcProcessPositionForecastScenario(HcmPositionForecastCalculationGroupRecId _positionForecastCalculationGroupId)
    {
        HcmPositionForecastCalculationGroup  positionForecastCalculatioGroup;

        ttsbegin;

        select firstonly forupdate PositionForecastScenario, BudgetPlanningProcess, BudgetPlanScenario, LegalEntity, ProcessStatus, ActivationDate, RetirementDate from positionForecastCalculatioGroup
            where positionForecastCalculatioGroup.PositionForecastScenario == _positionForecastCalculationGroupId;

        positionForecastCalculatioGroup.ProcessStatus = HcmPositionForecastCalcProcessStatus::InProcess;
        positionForecastCalculatioGroup.update();
        ttscommit;

        this.parmPositionForecastRecId(_positionForecastCalculationGroupId);
        this.parmHcmPositionForecastCalcGroupId(positionForecastCalculatioGroup.RecId);
        this.parmActivationDate(positionForecastCalculatioGroup.ActivationDate);
        this.parmRetirementDate(positionForecastCalculatioGroup.RetirementDate);
        this.parmBudgetPlanningProcessRecId(positionForecastCalculatioGroup.BudgetPlanningProcess);
        this.parmPositionForecastScenarioRecId(positionForecastCalculatioGroup.PositionForecastScenario);

        this.processSingleForecastPosition();

        //finally update the last processed date to current date for the benefit eligibility just processed.
        ttsbegin;
        positionForecastCalculatioGroup.clear();

        select firstonly forupdate PositionForecastScenario, BudgetPlanningProcess, BudgetPlanScenario, LegalEntity, ProcessStatus, ActivationDate, RetirementDate from positionForecastCalculatioGroup
            where positionForecastCalculatioGroup.PositionForecastScenario == _positionForecastCalculationGroupId;

        positionForecastCalculatioGroup.ProcessStatus = HcmPositionForecastCalcProcessStatus::Completed;
        positionForecastCalculatioGroup.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runCalcProcessPositions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides an entry point into the <c>HcmPositionForecastCalculationEngine</c> class.
    /// </summary>
    /// <remarks>
    ///    This method is the only entry point into the <c>HcmPositionForecastCalculationEngine</c> class, which starts
    ///    off the processing of cost elements for selected positions.
    /// </remarks>
    public void runCalcProcessPositions()
    {
        HcmPositionForecastCalculationGroup     positionForecastCalculatioGroup;
        SetEnumerator                           positionForecastSetEnumerator = this.positionForecastScenarioSetEnumerator();

        while (positionForecastSetEnumerator.moveNext())
        {
            ttsbegin;
            select firstonly forupdate PositionForecastScenario, BudgetPlanningProcess, BudgetPlanScenario, LegalEntity, ProcessStatus, ActivationDate, RetirementDate from positionForecastCalculatioGroup
                where positionForecastCalculatioGroup.PositionForecastScenario == positionForecastSetEnumerator.current();

            positionForecastCalculatioGroup.ProcessStatus = HcmPositionForecastCalcProcessStatus::InProcess;
            positionForecastCalculatioGroup.update();
            ttscommit;

            this.parmPositionForecastScenarioRecId(positionForecastCalculatioGroup.PositionForecastScenario);
            this.parmHcmPositionForecastCalcGroupId(positionForecastCalculatioGroup.RecId);
            this.parmActivationDate(positionForecastCalculatioGroup.ActivationDate);
            this.parmRetirementDate(positionForecastCalculatioGroup.RetirementDate);

            this.processSingleForecastPosition();

            //finally update the last processed date to current date for the benefit eligibility just processed.
            ttsbegin;
            positionForecastCalculatioGroup.clear();

            select firstonly forupdate PositionForecastScenario, BudgetPlanningProcess, BudgetPlanScenario, LegalEntity, ProcessStatus, ActivationDate, RetirementDate from positionForecastCalculatioGroup
                where positionForecastCalculatioGroup.PositionForecastScenario == positionForecastSetEnumerator.current();

            positionForecastCalculatioGroup.ProcessStatus = HcmPositionForecastCalcProcessStatus::Completed;
            positionForecastCalculatioGroup.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDependentEarningsBudgetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes budget amount of <c>HcmPositionForecastBudgetAcctLine</c> table by going through the dependent earning basis.
    /// </summary>
    /// <param name="_budgetAccLine">
    /// The <c>HcmPositionForecastBudgetAcctLine</c> table
    /// </param>
    /// <remarks>
    /// The method is used to update the <c>HcmPositionForecastBudgetAcctLine</c> table record on the basis of the changes made on the currently selected
    /// <c>HcmPositionForecastBudgetAcctLine</c> table record.
    /// </remarks>
    private void updateDependentEarningsBudgetAmount(HcmPositionForecastBudgetAcctLine _budgetAccLine)
    {
        HcmBudgetPurposeTypeDetail          budgetPurposeTypeDetail = HcmBudgetPurposeTypeDetail::find(_budgetAccLine.BudgetPurposeTypeDetail);
        HcmBudgetPurposeType                budgetPurpose = HcmBudgetPurposeType::find(budgetPurposeTypeDetail.BudgetPurposeType);
        HcmBudgetPurposeEarningBasis        earningBasis;
        HcmPositionForecastBudgetAcctLine   acctLine;
        HcmBudgetPurposeType                sourceBudgetPurpose;
        AmountCur                           TotalAmount;

        if (HcmBudgetPurposeEarningBasis::isBudgetPurposeUsedAsEarningBasis(budgetPurpose.RecId))
        {
            while select forUpdate acctLine
                where acctLine.PositionForecastScenario == _budgetAccLine.PositionForecastScenario
                    && acctLine.RecId != _budgetAccLine.RecId
                    && acctLine.LegalEntity == _budgetAccLine.LegalEntity
                join budgetPurposeTypeDetail
                    where budgetPurposeTypeDetail.RecId ==  acctLine.BudgetPurposeTypeDetail
                join sourceBudgetPurpose
                    where sourceBudgetPurpose.RecId == budgetPurposeTypeDetail.BudgetPurposeType
                join  earningBasis
                    where earningBasis.BudgetPurposeType == budgetPurposeTypeDetail.BudgetPurposeType
                    && earningBasis.EarningBudgetPurposeType == budgetPurpose.Recid
            {
                TotalAmount = this.calculateFTEFactoredBudgetAmount(acctLine);
                acctLine.BudgetAmountCur = TotalAMount;
                acctLine.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCostElement</Name>
				<Source><![CDATA[
    private container validateCostElement()
    {
        container validationResultContainer;

        return validationResultContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new calculation process object that will be used for performing calculation for the single budget cost element.
    /// </summary>
    /// <returns>
    /// A new calculation process object.
    /// </returns>
    public static HcmPositionForecastCalculationEngine construct()
    {
        HcmPositionForecastCalculationEngine hcmPositionForecastCalculationEngine = new HcmPositionForecastCalculationEngine();

        hcmPositionForecastCalculationEngine.parmProcessMultipleCostElements(true);

        return hcmPositionForecastCalculationEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalcProcessMultiplePositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new calculation process object that will be used for performing calculation for multiple cost elements.
    /// </summary>
    /// <param name="_positionForecastScenarioSet">
    /// The  set of <c>HcmPositionForecastScenario</c> table record.
    /// </param>
    /// <returns>
    /// A new calculation process object.
    /// </returns>
    public static HcmPositionForecastCalculationEngine newCalcProcessMultiplePositions(Set _positionForecastScenarioSet)
    {
        HcmPositionForecastCalculationEngine hcmPositionForecastCalculationEngine = new HcmPositionForecastCalculationEngine();

        hcmPositionForecastCalculationEngine.parmPositionForecastScenarioSet(_positionForecastScenarioSet);
        return hcmPositionForecastCalculationEngine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>