<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransCleanupMarkedRecIdNullTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class SpecTransCleanupMarkedRecIdNullTask implements IDataMaintenanceTask
{
    private const str Placeholder = '%1';
    private SpecTrans specTrans;
    private SpecTrans specTransToDel;
    private DataMaintenanceTaskResult taskResult;
    private CashManagementDataMaintainLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@CashManagement:SpecTransCleanupTaskWhereMarkedTransNotExistCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceTaskResult run()
    {
        taskResult = DataMaintenanceTaskResult::construct();
        logger = CashManagementDataMaintainLogger::createLogger(classStr(SpecTransCleanupDataAction));
        taskResult.parmCount(this.deleteSpecTrans());
        return taskResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTrans</Name>
				<Source><![CDATA[
    private int deleteSpecTrans()
    {
        CashManagementDataMaintainHelper::skipDeleteLogic(specTransToDel);

        return this.deleteSpecTransWhereRefRecIdIsNull(tableNum(CustTrans), fieldStr(CustTrans, RecId))
            + this.deleteSpecTransWhereRefRecIdIsNull(tableNum(CustSettlement), fieldStr(CustSettlement, RecId))
            + this.deleteSpecTransWhereRefRecIdIsNull(tableNum(CustTransOpen), fieldStr(CustTransOpen, RecId))
            + this.deleteSpecTransWhereRefRecIdIsNull(tableNum(VendSettlement), fieldStr(VendSettlement, RecId))
            + this.deleteSpecTransWhereRefRecIdIsNull(tableNum(VendTransOpen), fieldStr(VendTransOpen, RecId))
            + this.deleteSpecTransWhereSpecRecIdIsNull(tableNum(BankCodaAccountStatementLines), fieldStr(BankCodaAccountStatementLines, RecId))
            + this.deleteSpecTransWhereSpecRecIdIsNull(tableNum(CustTable), fieldStr(CustTable, RecId))
            + this.deleteSpecTransWhereSpecRecIdIsNull(tableNum(VendTable), fieldStr(VendTable, RecId))
            + this.deleteSpecTransWhereSpecRecIdIsNull(tableNum(LedgerJournalTrans), fieldStr(LedgerJournalTrans, RecId))
            + this.deleteSpecTransWhereSpecRecIdIsNull(tableNum(PurchTable), fieldStr(PurchTable, RecId))
            + this.deleteSpecTransWhereSpecRecIdIsNull(tableNum(SalesTable), fieldStr(SalesTable, RecId))
            + this.deleteSpecTransWhereSpecRecIdIsNull(tableNum(SpecContext), fieldStr(SpecContext, RecId))
            + this.deleteSpecTransWhereSpecRecIdIsNull(tableNum(SysUserInfo), fieldStr(SysUserInfo, RecId))
            + this.deleteSpecTransWhereSpecRecIdIsNull(tableNum(ProjTable), fieldStr(ProjTable, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTransWhereRefRecIdIsNull</Name>
				<Source><![CDATA[
    private int deleteSpecTransWhereRefRecIdIsNull(TableId _tableId, FieldName _fieldName)
    {
        TableName refTableName = tableId2Name(_tableId);

        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(
            CashManagementDataMaintainInstrumentationConstants::DeleteSpecTransForRefRecIdIsNull + refTableName))
        {
            int fixCount;

            while select RefCompany from specTrans
                group by specTrans.RefCompany
                where specTrans.RefTableId == _tableId
                    && specTrans.RefCompany
            {
                changecompany(specTrans.RefCompany)
                {
                    SysDaQueryObject queryObject = this.buildQuerySpecTransWhereLinkRecIdIsNull(
                        _tableId,
                        fieldStr(SpecTrans, RefTableId),
                        fieldStr(SpecTrans, RefRecId),
                        fieldStr(SpecTrans, RefCompany),
                        _fieldName);
                    CashManagementDataMaintainHelper::statementDelete(queryObject);
                    fixCount += int642int(specTransToDel.RowCount());
                }
            }

            this.addMessage(fixCount, refTableName, activityContext, "@CashManagement:SpecTransCleanupResultRefRecIdIsNull");
            return fixCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTransWhereSpecRecIdIsNull</Name>
				<Source><![CDATA[
    private int deleteSpecTransWhereSpecRecIdIsNull(TableId _tableId, FieldName _fieldName)
    {
        TableName specTableName = tableId2Name(_tableId);

        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(
            CashManagementDataMaintainInstrumentationConstants::DeleteSpecTransForSpecRecIdIsNull + specTableName))
        {
            int fixCount;

            while select SpecCompany from specTrans
                group by specTrans.SpecCompany
                where specTrans.SpecTableId == _tableId
                    && specTrans.SpecCompany
            {
                changecompany(specTrans.SpecCompany)
                {
                    SysDaQueryObject queryObject = this.buildQuerySpecTransWhereLinkRecIdIsNull(
                        _tableId,
                        fieldStr(SpecTrans, SpecTableId),
                        fieldStr(SpecTrans, SpecRecId),
                        fieldStr(SpecTrans, SpecCompany),
                        _fieldName);
                    CashManagementDataMaintainHelper::statementDelete(queryObject);
                    fixCount += int642int(specTransToDel.RowCount());
                }
            }
            
            this.addMessage(fixCount, specTableName, activityContext, "@CashManagement:SpecTransCleanupResultSpecRecIdIsNull");
            return fixCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySpecTransWhereLinkRecIdIsNull</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQuerySpecTransWhereLinkRecIdIsNull(
        TableId _tableId,
        FieldName _leftTableField,
        FieldName _leftRecField,
        FieldName _leftCompanyField,
        FieldName _rightRecField)
    {
        Common linkTable = new DictTable(_tableId).makeRecord();
        SysDaQueryObject specTransQuery = new SysDaQueryObject(specTransToDel);
        SysDaQueryObject linkQuery = new SysDaQueryObject(linkTable);

        specTransQuery.joinClause(SysDaJoinKind::NotExistsJoin, linkQuery);
        specTransQuery.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(specTransToDel, _leftTableField),
                    new SysDaValueExpression(_tableId)),
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(specTransToDel, _leftCompanyField),
                    new SysDaValueExpression(curExt()))));
        linkQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDel, _leftRecField),
                new SysDaFieldExpression(linkTable, _rightRecField)));

        return specTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMessage</Name>
				<Source><![CDATA[
    private void addMessage(int _fixRows, str _tableStr, SysInstrumentationActivityContext _activityContext, str _message)
    {
        if (_fixRows)
        {
            taskResult.addMessage(
                DataMaintenanceMessageContract::constructForMessage(
                    Exception::Info,
                    strFmt(_message, int642Str(_fixRows), _tableStr)));
        }

        _activityContext.addCustomProperty(CashManagementDataMaintainInstrumentationConstants::CountOfChangesMade, int642Str(_fixRows));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>