<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximEntitlement_ExportOrder_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim entitlement export order class.
/// </summary>
class EximEntitlement_ExportOrder_IN extends EximEntitlement_IN  implements BatchRetryable
{
    TmpEximDEPBExportOrderTable_IN tmpEximDEPBExportOrderTable;
    TmpEximDEPBExportOrderLine_IN  tmpEximDEPBExportOrderLine;
    FromDateTime                   fromDateTime;
    ToDateTime                     toDateTime;
    boolean                        realizedInvoices;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExportedOrderDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets exported order details.
    /// </summary>
    /// <param name="_schemeRecId">
    /// The record id of the scheme.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void getExportedOrderDetails(RefRecId  _schemeRecId)
    {
        TmpEximDEPBExportOrderTable_IN eximDEPBExportOrderTable;
        TmpEximDEPBExportOrderLine_IN  eximDEPBExportOrderLine;
        EximDEPBExportOrderTable_IN    eximDEPBExportOrderTableOrig;
        EximDEPBExportOrderLine_IN     eximDEPBExportOrderLineOrig;
        EximDEPBSchemesTable_IN        eximDEPBSchemesTable;

        eximDEPBSchemesTable = EximDEPBSchemesTable_IN::findRecId(_schemeRecId);
        this.parmFromDateTime(DateTimeUtil::applyTimeZoneOffset(eximDEPBSchemesTable.FromDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        this.parmToDateTime(DateTimeUtil::applyTimeZoneOffset(eximDEPBSchemesTable.ToDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        this.parmRealizedInvoices(eximDEPBSchemesTable.RealizedInvoice);
        while select eximDEPBExportOrderTableOrig
            where eximDEPBExportOrderTableOrig.SchemeTableRecId == _schemeRecId
        {
            eximDEPBExportOrderTable.EximProductGroupTable    = eximDEPBExportOrderTableOrig.EximProductGroupTable;
            eximDEPBExportOrderTable.DutyEntitlement          = eximDEPBExportOrderTableOrig.DutyEntitlement;
            eximDEPBExportOrderTable.Reduction                = eximDEPBExportOrderTableOrig.Reduction;
            eximDEPBExportOrderTable.AllowableDutyEntitlement = eximDEPBExportOrderTableOrig.AllowableDutyEntitlement;
            eximDEPBExportOrderTable.SchemeTableRecId         = eximDEPBExportOrderTableOrig.SchemeTableRecId;
            eximDEPBExportOrderTable.insert();

            while select eximDEPBExportOrderLineOrig
                where eximDEPBExportOrderLineOrig.ExportOrderTableRecId == eximDEPBExportOrderTableOrig.RecId
            {
                eximDEPBExportOrderLine.Mark                        = eximDEPBExportOrderLineOrig.Mark;
                eximDEPBExportOrderLine.ExportValue                 = eximDEPBExportOrderLineOrig.ExportValue;
                eximDEPBExportOrderLine.depbRate                    = eximDEPBExportOrderLineOrig.depbRate;
                eximDEPBExportOrderLine.ValueCap                    = eximDEPBExportOrderLineOrig.ValueCap;
                eximDEPBExportOrderLine.ValueCapAmount              = eximDEPBExportOrderLineOrig.ValueCapAmount;
                eximDEPBExportOrderLine.DutyEntitlement             = eximDEPBExportOrderLineOrig.DutyEntitlement;
                eximDEPBExportOrderLine.AllowMarketValue            = eximDEPBExportOrderLineOrig.AllowMarketValue;
                eximDEPBExportOrderLine.AllowablePresentMarketValue = eximDEPBExportOrderLineOrig.AllowablePresentMarketValue;
                eximDEPBExportOrderLine.AllowableDutyEntitlement    = eximDEPBExportOrderLineOrig.AllowableDutyEntitlement;
                eximDEPBExportOrderLine.BankCertificateNum          = eximDEPBExportOrderLineOrig.BankCertificateNum;
                eximDEPBExportOrderLine.BankCertificateDateTime     = eximDEPBExportOrderLineOrig.BankCertificateDateTime;
                eximDEPBExportOrderLine.ExportOrderTableRecId       = eximDEPBExportOrderTable.RecId;
                eximDEPBExportOrderLine.ShippingBillTransRecId      = eximDEPBExportOrderLineOrig.ShippingBillTransRecId;
                eximDEPBExportOrderLine.Unit                        = eximDEPBExportOrderLineOrig.Unit;
                eximDEPBExportOrderLine.insert();
            }
        }

        this.parmTmpExportOrderTable(eximDEPBExportOrderTable);
        this.parmTmpExportOrderLine(eximDEPBExportOrderLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProceedValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the export can be proceed.
    /// </summary>
    /// <param name="_shippingBillRecId">
    /// The record id of the shipping bill.
    /// </param>
    /// <param name="_salesId">
    /// The id of the sales.
    /// </param>
    /// <param name="_schemeTableRecId">
    /// The record id of the scheme table.
    /// </param>
    /// <returns>
    /// If 'True', the export can be proceed.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean getProceedValue(
        RefRecId _shippingBillRecId,
        SalesId  _salesId,
        RefRecId _schemeTableRecId)
    {
        EximDEPBSchemesTable_IN     eximDEPBSchemesTableLocal;
        EximDEPBExportOrderTable_IN eximDEPBExportOrderTable;
        EximDEPBExportOrderLine_IN  eximDEPBExportOrderLine;
        boolean                     proceed;

        select Status,RecId from eximDEPBSchemesTableLocal
            join SchemeTableRecId,RecId from eximDEPBExportOrderTable
                where eximDEPBSchemesTableLocal.RecId == eximDEPBExportOrderTable.SchemeTableRecId
                   && eximDEPBSchemesTableLocal.RecId != _schemeTableRecId
            join Mark,ShippingBillTransRecId,ExportOrderTableRecId,RecId from eximDEPBExportOrderLine
                where eximDEPBExportOrderLine.ShippingBillTransRecId == _shippingBillRecId
                   && eximDEPBExportOrderLine.ExportOrderTableRecId  == eximDEPBExportOrderTable.RecId;

        if ((!eximDEPBExportOrderLine)
             || (eximDEPBExportOrderLine
             && eximDEPBSchemesTableLocal.Status == EximAuthorizationStatus_IN::Approved
             && !eximDEPBExportOrderLine.Mark))
        {
            proceed =   true;
        }

        return proceed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets total allowable duty entitlement.
    /// </summary>
    /// <param name="_tmpEximDEPBExportOrderTable">
    /// The exim DEPB export order table.
    /// </param>
    /// <returns>
    /// The amount of all allowable duty entitlement.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST getTotalAllowed(TmpEximDEPBExportOrderTable_IN _tmpEximDEPBExportOrderTable)
    {
        TmpEximDEPBExportOrderTable_IN    tmpEximDEPBExportOrderTableLoc;

        tmpEximDEPBExportOrderTableLoc.setTmpData(_tmpEximDEPBExportOrderTable);

        select sum(AllowableDutyEntitlement)
            from tmpEximDEPBExportOrderTableLoc;

        return tmpEximDEPBExportOrderTableLoc.AllowableDutyEntitlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRealized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the <c>EximEntitlement_ExportOrder_IN</c> class is realized.
    /// </summary>
    /// <param name="_customsShippingBillTrans">
    /// The shipping transaction bills.
    /// </param>
    /// <param name="_realizedInvoice">
    /// The realized invoice.
    /// </param>
    /// <returns>
    /// If 'True', the <c>EximEntitlement_ExportOrder_IN</c> is realized.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isRealized(
        CustomsShippingBillTrans_IN _customsShippingBillTrans,
        NoYesId                     _realizedInvoice = false)
    {
        CustTrans       custTrans;
        CustInvoiceJour custInvoiceJour;
        boolean         realizedInvoice;

        if (_realizedInvoice)
        {
            select RecId from custTrans
                join RecId from custInvoiceJour
                    where custTrans.Invoice       == custInvoiceJour.InvoiceId
                       && custTrans.AccountNum    == custInvoiceJour.InvoiceAccount
                       && custTrans.TransDate     == custInvoiceJour.InvoiceDate
                       && custInvoiceJour.SalesId == _customsShippingBillTrans.SalesId
                       && custTrans.Invoice       == _customsShippingBillTrans.InvoiceId;
            if (custTrans.RecId && !CustTransOpen::findRefId(custTrans.RecId))
            {
                realizedInvoice = true;
            }
        }
        return realizedInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FromDateTime parmFromDateTime(FromDateTime _fromDateTime = fromDateTime)
    {
        fromDateTime = _fromDateTime;

        return fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRealizedInvoices</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmRealizedInvoices(boolean _realizedInvoices = realizedInvoices)
    {
        realizedInvoices = _realizedInvoices;

        return realizedInvoices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpExportOrderLine</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximDEPBExportOrderLine_IN parmTmpExportOrderLine(TmpEximDEPBExportOrderLine_IN _tmpEximDEPBExportOrderLineOrig = tmpEximDEPBExportOrderLine)
    {
        tmpEximDEPBExportOrderLine = _tmpEximDEPBExportOrderLineOrig;

        return tmpEximDEPBExportOrderLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpExportOrderTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TmpEximDEPBExportOrderTable_IN parmTmpExportOrderTable(TmpEximDEPBExportOrderTable_IN _tmpEximDEPBExportOrderTableOrig = tmpEximDEPBExportOrderTable)
    {
        tmpEximDEPBExportOrderTable = _tmpEximDEPBExportOrderTableOrig;

        return tmpEximDEPBExportOrderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDateTime</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ToDateTime parmToDateTime(ToDateTime _toDateTime = toDateTime)
    {
        toDateTime = _toDateTime;

        return toDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;
            this.updateExportOrderDetails(tmpEximDEPBExportOrderTable,
                                          tmpEximDEPBExportOrderLine);
            this.updateScheme();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows data of the <c>EximEntitlement_ExportOrder_IN</c> class.
    /// </summary>
    /// <param name="_eximAuthorizationArgs">
    /// The arguments of the exim authorization.
    /// </param>
    /// <param name="_fromDateTime">
    /// The from date time of the transaction order.
    /// </param>
    /// <param name="_toDateTime">
    /// The end date time of the transaction order.
    /// </param>
    /// <param name="_realizedInvoice">
    /// The realized invoice.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void showData(
        Args         _eximAuthorizationArgs = null,
        FromDateTime _fromDateTime          = DateTimeUtil::newDateTime(dateNull(), 0, DateTimeUtil::getUserPreferredTimeZone()),
        ToDateTime   _toDateTime            = DateTimeUtil::newDateTime(dateNull(), 0, DateTimeUtil::getUserPreferredTimeZone()),
        NoYesId      _realizedInvoice       = false)
    {
        CustomsShippingBillJour_IN     customsShippingBillJour;
        CustomsShippingBillTrans_IN    customsShippingBillTransLoc;
        EximShippingBillTrans_IN       eximShippingBillTrans;
        TmpEximDEPBExportOrderTable_IN eximDEPBExportOrderTableLoc;
        TmpEximDEPBExportOrderLine_IN  eximDEPBExportOrderLineLoc;
        EximDEPBScheduleTable_IN       eximDEPBSchedules;
        EximDEPBScheduleValues_IN      eximDEPBScheduleValues;
        boolean                        realizedInvoice;
        EximProductGroupTable_IN       eximProductGroupTable;
        UTCDateTime                    exportDateTime;

        if (_eximAuthorizationArgs)
        {
            depbSchemesTable = _eximAuthorizationArgs.record();
        }

        ttsbegin;

        while select SalesId, InvoiceId, ItemId, ShippingBillDate, RecId
                from customsShippingBillTransLoc
                    where customsShippingBillTransLoc.ShippingBillDate  >= DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_fromDateTime, DateTimeUtil::getUserPreferredTimeZone()))
                        && customsShippingBillTransLoc.ShippingBillDate <= DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_toDateTime, DateTimeUtil::getUserPreferredTimeZone()))
                join EximProductGroupTable, AssessableValue, AllowedMarketValue, EximPorts, ApplyDEPB
                    from eximShippingBillTrans
                        order by eximShippingBillTrans.EximProductGroupTable
                        where eximShippingBillTrans.ApplyDEPB              == NoYes::Yes
                           && eximShippingBillTrans.EximPorts                 == depbSchemesTable.EximPorts
                           && eximShippingBillTrans.ShippingBillTransRecId == customsShippingBillTransLoc.RecId
        {
            if (this.getProceedValue(customsShippingBillTransLoc.RecId,
                                     customsShippingBillTransLoc.SalesId,
                                     depbSchemesTable.RecId))
            {
                select firstonly CurrencyCode, EximExportDateTime
                    from customsShippingBillJour
                        where customsShippingBillJour.SalesId   == customsShippingBillTransLoc.SalesId
                           && customsShippingBillJour.InvoiceId == customsShippingBillTransLoc.InvoiceId;

                realizedInvoice = this.isRealized(customsShippingBillTransLoc,_realizedInvoice);
                if ((_realizedInvoice && realizedInvoice) ||
                   (!_realizedInvoice))
                {
                    select firstonly RecId
                        from eximDEPBExportOrderTableLoc
                            where eximDEPBExportOrderTableLoc.SchemeTableRecId == depbSchemesTable.RecId
                               && eximDEPBExportOrderTableLoc.EximProductGroupTable     == eximShippingBillTrans.EximProductGroupTable;

                    if (!eximDEPBExportOrderTableLoc.RecId)
                    {
                        eximDEPBExportOrderTableLoc.clear();
                        eximDEPBExportOrderTableLoc.SchemeTableRecId = depbSchemesTable.RecId;
                        eximDEPBExportOrderTableLoc.EximProductGroupTable     = eximShippingBillTrans.EximProductGroupTable;
                        eximDEPBExportOrderTableLoc.insert();
                    }

                    exportDateTime = customsShippingBillJour.EximExportDateTime;

                    select firstonly validtimestate(exportDateTime)  Recid  from eximDEPBSchedules
                        join firstonly RecId from eximProductGroupTable
                        where eximProductGroupTable.RecId              == eximShippingBillTrans.EximProductGroupTable
                           && eximDEPBSchedules.ProductGroupTableRecId == eximProductGroupTable.RecId;
                    eximDEPBScheduleValues = EximDEPBScheduleValues_IN::findByScheduleItemId(eximDEPBSchedules.RecId,customsShippingBillTransLoc.ItemId);

                    eximDEPBExportOrderLineLoc.clear();

                    eximDEPBExportOrderLineLoc.ExportOrderTableRecId           = eximDEPBExportOrderTableLoc.RecId;
                    eximDEPBExportOrderLineLoc.ShippingBillTransRecId          = customsShippingBillTransLoc.RecId;
                    eximDEPBExportOrderLineLoc.Mark                            = NoYes::Yes;
                    eximDEPBExportOrderLineLoc.ExportValue                     = CurrencyHelper_IN::customsMSTAmount_IN(eximShippingBillTrans.AssessableValue,
                                                                                                               customsShippingBillJour.CurrencyCode,
                                                                                                               Direction_IN::Export,
                                                                                                               customsShippingBillTransLoc.ShippingBillDate);
                    eximDEPBExportOrderLineLoc.Unit                            = eximDEPBScheduleValues.Unit;
                    eximDEPBExportOrderLineLoc.depbRate                        = eximDEPBScheduleValues.ScheduleRate;
                    eximDEPBExportOrderLineLoc.ValueCap                        = eximDEPBScheduleValues.ValueCap;
                    eximDEPBExportOrderLineLoc.ValueCapAmount                  = eximDEPBScheduleValues.roundedOffAmount(eximDEPBScheduleValues.ValueCap * EximDEPBExportOrderLine_IN::getShippingBillQty(
                                                                                                                                                                    eximDEPBExportOrderLineLoc.ShippingBillTransRecId,
                                                                                                                                                                    eximDEPBExportOrderLineLoc.Unit));

                    eximDEPBExportOrderLineLoc.DutyEntitlement                 = eximDEPBScheduleValues.roundedOffAmount(
                                                                                    eximDEPBExportOrderLineLoc.ExportValue >= eximDEPBExportOrderLineLoc.ValueCapAmount ?
                                                                                  (((eximDEPBExportOrderLineLoc.ValueCapAmount == 0 ?
                                                                                     eximDEPBExportOrderLineLoc.ExportValue :
                                                                                     eximDEPBExportOrderLineLoc.ValueCapAmount)
                                                                                     * eximDEPBExportOrderLineLoc.depbRate) / 100) :
                                                                                  (((eximDEPBExportOrderLineLoc.ExportValue == 0 ?
                                                                                     eximDEPBExportOrderLineLoc.ValueCapAmount :
                                                                                     eximDEPBExportOrderLineLoc.ExportValue)
                                                                                     * eximDEPBExportOrderLineLoc.depbRate) / 100));
                    eximDEPBExportOrderLineLoc.AllowMarketValue                = eximDEPBScheduleValues.ApplyMarketValue;
                    eximDEPBExportOrderLineLoc.AllowablePresentMarketValue = eximShippingBillTrans.AllowedMarketValue;
                    if (eximDEPBExportOrderLineLoc.AllowMarketValue)
                    {
                        if (eximDEPBExportOrderLineLoc.AllowablePresentMarketValue < 0 ||
                            eximDEPBExportOrderLineLoc.DutyEntitlement             <= eximDEPBExportOrderLineLoc.AllowablePresentMarketValue)
                        {
                            eximDEPBExportOrderLineLoc.AllowableDutyEntitlement = eximDEPBExportOrderLineLoc.DutyEntitlement;
                        }
                        else if (eximDEPBExportOrderLineLoc.DutyEntitlement             < 0 ||
                                 eximDEPBExportOrderLineLoc.AllowablePresentMarketValue <= eximDEPBExportOrderLineLoc.DutyEntitlement)
                        {
                            eximDEPBExportOrderLineLoc.AllowableDutyEntitlement = eximDEPBExportOrderLineLoc.AllowablePresentMarketValue;
                        }
                    }
                    else
                    {
                        eximDEPBExportOrderLineLoc.AllowableDutyEntitlement  = eximDEPBExportOrderLineLoc.DutyEntitlement;
                    }
                    eximDEPBExportOrderLineLoc.insert();

                    eximDEPBExportOrderTableLoc.DutyEntitlement += eximDEPBExportOrderLineLoc.AllowableDutyEntitlement;
                    eximDEPBExportOrderTableLoc.AllowableDutyEntitlement = eximDEPBExportOrderTableLoc.DutyEntitlement;
                    eximDEPBExportOrderTableLoc.doUpdate();
                }
            }
        }
        this.parmTmpExportOrderTable(eximDEPBExportOrderTableLoc);
        this.parmTmpExportOrderLine(eximDEPBExportOrderLineLoc);
        this.parmFromDateTime(_fromDateTime);
        this.parmToDateTime(_toDateTime);
        this.parmRealizedInvoices(_realizedInvoice);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDutyEntitlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update duty entitlement.
    /// </summary>
    /// <param name="_tmpEximDEPBExportOrderTable">
    /// The table of the exim DEPB export order.
    /// </param>
    /// <param name="_tmpEximDEPBExportOrderLine">
    /// The line of the exim DEPB export order.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateDutyEntitlement(
        TmpEximDEPBExportOrderTable_IN _tmpEximDEPBExportOrderTable,
        TmpEximDEPBExportOrderLine_IN  _tmpEximDEPBExportOrderLine)
    {
        TmpEximDEPBExportOrderTable_IN tmpEximDEPBExportOrderTableLocal;
        TmpEximDEPBExportOrderLine_IN  tmpEximDEPBExportOrderLineLocal;

        tmpEximDEPBExportOrderTableLocal.setTmpData(_tmpEximDEPBExportOrderTable);
        tmpEximDEPBExportOrderLineLocal.setTmpData(_tmpEximDEPBExportOrderLine);

        while select forupdate tmpEximDEPBExportOrderTableLocal
        {
            select sum(AllowableDutyEntitlement)
                from tmpEximDEPBExportOrderLineLocal
                    where tmpEximDEPBExportOrderLineLocal.ExportOrderTableRecId == tmpEximDEPBExportOrderTableLocal.RecId
                       && tmpEximDEPBExportOrderLineLocal.Mark  == NoYes::Yes;
            tmpEximDEPBExportOrderTableLocal.DutyEntitlement = tmpEximDEPBExportOrderLineLocal.AllowableDutyEntitlement;
            tmpEximDEPBExportOrderTableLocal.Reduction = tmpEximDEPBExportOrderTableLocal.Reduction > tmpEximDEPBExportOrderTableLocal.DutyEntitlement ?
                                                         0.0 : tmpEximDEPBExportOrderTableLocal.Reduction;
            tmpEximDEPBExportOrderTableLocal.AllowableDutyEntitlement = tmpEximDEPBExportOrderTableLocal.DutyEntitlement - tmpEximDEPBExportOrderTableLocal.Reduction;
            tmpEximDEPBExportOrderTableLocal.update();
        }

        this.parmTmpExportOrderTable(tmpEximDEPBExportOrderTableLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExportOrderDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates export order details.
    /// </summary>
    /// <param name="_tmpEximDEPBExportOrderTable">
    /// The table of the exim DEPB export order.
    /// </param>
    /// <param name="_tmpEximDEPBExportOrderLine">
    /// The line of the exim DEPB export order.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateExportOrderDetails(
        TmpEximDEPBExportOrderTable_IN _tmpEximDEPBExportOrderTable,
        TmpEximDEPBExportOrderLine_IN  _tmpEximDEPBExportOrderLine)
    {
        EximDEPBExportOrderTable_IN eximDEPBExportOrderTableLoc;
        EximDEPBExportOrderLine_IN  eximDEPBExportOrderLineLoc;
        EximDEPBSchemesTable_IN     eximDEPBSchemesTable;

        ttsbegin;
        delete_from eximDEPBExportOrderTableLoc
                where eximDEPBExportOrderTableLoc.SchemeTableRecId == schemeTableRecId; //_tmpEximDEPBExportOrderTable.SchemeTableRecId;
        eximDEPBSchemesTable = EximDEPBSchemesTable_IN::findRecId(schemeTableRecId,true);//_tmpEximDEPBExportOrderTable.SchemeTableRecId,true);
        if (eximDEPBSchemesTable)
        {
            eximDEPBSchemesTable.FromDateTime    = DateTimeUtil::removeTimeZoneOffset(this.parmFromDateTime(), DateTimeUtil::getUserPreferredTimeZone());
            eximDEPBSchemesTable.ToDateTime      = DateTimeUtil::removeTimeZoneOffset(this.parmToDateTime(), DateTimeUtil::getUserPreferredTimeZone());
            eximDEPBSchemesTable.RealizedInvoice = this.parmRealizedInvoices();
            eximDEPBSchemesTable.update();
        }

        while select _tmpEximDEPBExportOrderTable
        {
            eximDEPBExportOrderTableLoc.EximProductGroupTable    = _tmpEximDEPBExportOrderTable.EximProductGroupTable;
            eximDEPBExportOrderTableLoc.DutyEntitlement          = _tmpEximDEPBExportOrderTable.DutyEntitlement;
            eximDEPBExportOrderTableLoc.Reduction                = _tmpEximDEPBExportOrderTable.Reduction;
            eximDEPBExportOrderTableLoc.AllowableDutyEntitlement = _tmpEximDEPBExportOrderTable.AllowableDutyEntitlement;
            eximDEPBExportOrderTableLoc.SchemeTableRecId         = _tmpEximDEPBExportOrderTable.SchemeTableRecId;
            eximDEPBExportOrderTableLoc.insert();

            while select _tmpEximDEPBExportOrderLine
                where _tmpEximDEPBExportOrderLine.ExportOrderTableRecId == _tmpEximDEPBExportOrderTable.RecId
            {
                eximDEPBExportOrderLineLoc.Mark                        = _tmpEximDEPBExportOrderLine.Mark;
                eximDEPBExportOrderLineLoc.ExportValue                 = _tmpEximDEPBExportOrderLine.ExportValue;
                eximDEPBExportOrderLineLoc.depbRate                    = _tmpEximDEPBExportOrderLine.depbRate;
                eximDEPBExportOrderLineLoc.ValueCap                    = _tmpEximDEPBExportOrderLine.ValueCap;
                eximDEPBExportOrderLineLoc.ValueCapAmount              = _tmpEximDEPBExportOrderLine.ValueCapAmount;
                eximDEPBExportOrderLineLoc.DutyEntitlement             = _tmpEximDEPBExportOrderLine.DutyEntitlement;
                eximDEPBExportOrderLineLoc.AllowMarketValue            = _tmpEximDEPBExportOrderLine.AllowMarketValue;
                eximDEPBExportOrderLineLoc.AllowablePresentMarketValue = _tmpEximDEPBExportOrderLine.AllowablePresentMarketValue;
                eximDEPBExportOrderLineLoc.AllowableDutyEntitlement    = _tmpEximDEPBExportOrderLine.AllowableDutyEntitlement;
                eximDEPBExportOrderLineLoc.BankCertificateNum          = _tmpEximDEPBExportOrderLine.BankCertificateNum;
                eximDEPBExportOrderLineLoc.BankCertificateDateTime     = _tmpEximDEPBExportOrderLine.BankCertificateDateTime;
                eximDEPBExportOrderLineLoc.ExportOrderTableRecId       = eximDEPBExportOrderTableLoc.RecId;
                eximDEPBExportOrderLineLoc.ShippingBillTransRecId      = _tmpEximDEPBExportOrderLine.ShippingBillTransRecId;
                eximDEPBExportOrderLineLoc.Unit                        = _tmpEximDEPBExportOrderLine.Unit;
                eximDEPBExportOrderLineLoc.insert();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToNo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates exim DEPB export order line mark to 'No'.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateToNo()
    {
        ttsbegin;
        update_recordset tmpEximDEPBExportOrderLine
            setting Mark   = NoYes::No
                where tmpEximDEPBExportOrderLine.ExportOrderTableRecId  == tmpEximDEPBExportOrderTable.RecId;
        this.parmTmpExportOrderLine(tmpEximDEPBExportOrderLine);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateToYes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates exim DEPB export order line mark to 'Yes'.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateToYes()
    {
        ttsbegin;
        update_recordset tmpEximDEPBExportOrderLine
            setting Mark   = NoYes::Yes
                where tmpEximDEPBExportOrderLine.ExportOrderTableRecId  == tmpEximDEPBExportOrderTable.RecId;

        this.parmTmpExportOrderLine(tmpEximDEPBExportOrderLine);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>