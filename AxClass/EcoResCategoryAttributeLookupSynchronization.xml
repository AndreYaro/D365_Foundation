<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResCategoryAttributeLookupSynchronization</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Executes the synchronization of <c>EcoResCategoryAttributeLookup</c>.
/// 
/// For each of the child nodes of the given category (including itself):
/// 1. delete all from <c>EcoResCategoryAttributeLookup</c> for the category
/// 2. copy all for the category from <c>EcoResCategoryAttribute</c> to <c>EcoResCategoryAttributeLookup</c>
/// 3. if IsProductAttributesInherited=true,
///     copy all from <c>EcoResCategoryAttributeLookup</c> for the category's parent,
///       excluding the ones already there
///
/// Due to the above algorithm, we must start from the node closet to root first.
/// Processing a child depends on its parent having been processed already.
/// 
/// The algorithm *must not* delete a <c>EcoResCategoryAttributeLookup</c> record, only to add another for the same Category+Attribute.
/// Tables with FK on <c>EcoResCategoryAttributeLookup</c> would become invalid.
/// ****************************************************************
/// 1. delete
///     if Inherit=NO:
///         delete in my CAx those Attribute not in my CA
///     if Inherit=YES:
///         delete in my CAx those Attribute
///                 not in my CA
///              and not in my parent's CAx
/// 2. update CAx.CA
///     if YES:
///         update my CAx join my parent's CAx on Attribute
///     update my CAx join my CA on Attribute
/// 3. insert
///     insert in my CAx missing Attribute from my CA
///     if YES:
///         insert in my CAx missing Attribute from my parent's CAx
/// ****************************************************************
/// </summary>
internal final class EcoResCategoryAttributeLookupSynchronization
{
    private EcoResCategory ecoResCategoryUpdated;
    private boolean doFullSync = false;

    #macro.CategoryExpandedJoin
     join RecId from ecoResCategory
    where ecoResCategory.NestedSetLeft     >= ecoResCategoryUpdated.NestedSetLeft
       && ecoResCategory.NestedSetRight    <= ecoResCategoryUpdated.NestedSetRight
       && ecoResCategory.CategoryHierarchy == ecoResCategoryUpdated.CategoryHierarchy
       && ecoResCategory.RecId             == categoryAttributeLookup.Category
       && ecoResCategory.Level             == _level
    #endmacro

    #macro.UpdateParentWhere
    where parentCategoryAttributeLookup.Category  == ecoResCategory.ParentCategory
       && parentCategoryAttributeLookup.Attribute == categoryAttributeLookup.Attribute
       // skip the records not needing update:
       && parentCategoryAttributeLookup.CategoryAttribute != categoryAttributeLookup.CategoryAttribute
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EcoResCategoryAttributeLookupSynchronization</c> class.
    /// </summary>
    /// <returns>The newly created instance.</returns>
    internal static EcoResCategoryAttributeLookupSynchronization construct()
    {
        return new EcoResCategoryAttributeLookupSynchronization();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEcoResCategoryUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the category to be updated.
    /// </summary>
    /// <param name = "_ecoResCategoryUpdated">The category from which the update originates.</param>
    /// <returns>The category set to be updated.</returns>
    internal EcoResCategory parmEcoResCategoryUpdated(EcoResCategory _ecoResCategoryUpdated)
    {
        ecoResCategoryUpdated = _ecoResCategoryUpdated;
        return ecoResCategoryUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoFullSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and gets whether a full synchronization should be executed.
    /// </summary>
    /// <param name = "_doFullSync">Whether a full synchronization should be executed.</param>
    /// <returns>The current value of the doFullSync variable.</returns>
    internal boolean parmDoFullSync(boolean _doFullSync = doFullSync)
    {
        doFullSync = _doFullSync;
        return doFullSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the synchronization from the updated category.
    /// </summary>
    internal void synchronize()
    {
        if (ecoResCategoryUpdated)
        {
            ttsbegin;
            this.insertMissingAttributes();
            this.insertGroup();
            this.syncByLevel(false);
            this.updateAttributeGroupType();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSynchronized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the category is synchronized.
    /// </summary>
    /// <returns>true if the category is synchronized; false if not.</returns>
    /// <remarks>
    /// Performs the synchronization but stops once a query returns results, and aborts the transaction.
    /// </remarks>
    internal boolean isSynchronized()
    {
        boolean isInSync = true;

        if (ecoResCategoryUpdated)
        {
            ttsbegin;
            isInSync = !this.insertMissingAttributes();
            isInSync = isInSync && !this.insertGroup();
            isInSync = isInSync && !this.syncByLevel(true);
            isInSync = isInSync && !this.updateAttributeGroupType();
            ttsabort;
        }

        return isInSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete all lookups that should no longer exist for this level.
    /// </summary>
    /// <param name = "_level">The hierarchy level to check.</param>
    /// <returns>true when committing, or when nothing was deleted; otherwise false.</returns>
    /// <remarks>
    /// The delete query aims to capture the following cases:
    /// 1. Lookups which are not inherited.
    /// 2. Lookups for which no attribute exists.
    /// 3. Lookups which are not in an attribute group.
    /// </remarks>
    private int64 delete(EcoResCategoryLevel _level)
    {
        Query q = new Query();
        QueryBuildDataSource lookupDs = q.addDataSource(tableNum(EcoResCategoryAttributeLookup));

        QueryBuildDataSource categoryDs = lookupDs.addDataSource(tableNum(ProcCategoryExpanded));
        categoryDs.joinMode(JoinMode::ExistsJoin);
        categoryDs.addLink(fieldNum(EcoResCategoryAttributeLookup, Category), fieldNum(ProcCategoryExpanded, CategoryId));
        categoryDs.addRange(fieldNum(ProcCategoryExpanded, Level)).value(queryValue(_level));
        categoryDs
            .addRange(fieldNum(ProcCategoryExpanded, NestedSetLeft))
            .value(strFmt('(%1.%2 >= %3)', categoryDs.name(), fieldStr(ProcCategoryExpanded, NestedSetLeft), ecoResCategoryUpdated.NestedSetLeft));
        categoryDs
            .addRange(fieldNum(ProcCategoryExpanded, NestedSetRight))
            .value(strFmt('(%1.%2 <= %3)', categoryDs.name(), fieldStr(ProcCategoryExpanded, NestedSetRight), ecoResCategoryUpdated.NestedSetRight));
        categoryDs.addRange(fieldNum(ProcCategoryExpanded, CategoryHierarchy)).value(queryValue(ecoResCategoryUpdated.CategoryHierarchy));
            
        // 1. Lookups which are not inherited.
        QueryBuildDataSource parentDs = categoryDs.addDataSource(tableNum(EcoResCategoryAttributeLookup));
        parentDs.joinMode(JoinMode::NoExistsJoin);
        parentDs.addLink(fieldNum(ProcCategoryExpanded, ParentCategory), fieldNum(EcoResCategoryAttributeLookup, Category));
        parentDs.addLink(fieldNum(EcoResCategoryAttributeLookup, Attribute), fieldNum(EcoResCategoryAttributeLookup, Attribute), lookupDs.name());
        parentDs.addRange(fieldNum(EcoResCategoryAttributeLookup, TableId)) // only delete attributes if not inherited
            .value(strFmt('(%1.%2 == %3)', categoryDs.name(), fieldStr(ProcCategoryExpanded, IsProductAttributesInherited), 1));
        
        // 2. Lookups for which no attribute exists.
        QueryBuildDataSource attributeDs = categoryDs.addDataSource(tableNum(EcoResCategoryAttribute));
        attributeDs.joinMode(JoinMode::NoExistsJoin);
        attributeDs.addLink(fieldNum(ProcCategoryExpanded, CategoryId), fieldNum(EcoResCategoryAttribute, Category));
        attributeDs.addLink(fieldNum(EcoResCategoryAttributeLookup, Attribute), fieldNum(EcoResCategoryAttribute, Attribute), lookupDs.name());
        attributeDs.addRange(fieldNum(EcoResCategoryAttribute, Modifier)).value(queryValue(EcoResCategoryAttributeModifier::Product));

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            // 3. Lookups which are not in an attribute group.
            QueryBuildDataSource groupDs = categoryDs.addDataSource(tableNum(EcoResCategoryAttributeGroup));
            groupDs.joinMode(JoinMode::NoExistsJoin);
            groupDs.addLink(fieldNum(ProcCategoryExpanded, CategoryId), fieldNum(EcoResCategoryAttributeGroup, Category));
            groupDs.addRange(fieldNum(EcoResCategoryAttributeGroup, Modifier)).value(queryValue(EcoResCategoryAttributeModifier::Product));

            QueryBuildDataSource attributeGroupDs = groupDs.addDataSource(tableNum(EcoResAttributeGroupAttribute));
            attributeGroupDs.joinMode(JoinMode::ExistsJoin);
            attributeGroupDs.addLink(fieldNum(EcoResCategoryAttributeGroup, AttributeGroup), fieldNum(EcoResAttributeGroupAttribute, AttributeGroup));
            attributeGroupDs.addLink(fieldNum(EcoResCategoryAttributeLookup, Attribute), fieldNum(EcoResAttributeGroupAttribute, Attribute), lookupDs.name());
        }

        return Query::delete_from(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMissingAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert missing lookups which have a corresponding category attribute.
    /// </summary>
    /// <returns>The number of affected rows.</returns>
    private int64 insertMissingAttributes()
    {
        EcoResCategoryAttributeLookup categoryAttributeLookup;
        EcoResCategoryAttributeLookup myCategoryAttributeLookup;
        EcoResCategoryAttribute       myCategoryAttribute;
        EcoResCategory                ecoResCategory;
        insert_recordset categoryAttributeLookup (Category, Attribute, CategoryAttribute)
                  select Category, Attribute, RecId
                    from myCategoryAttribute
                   where myCategoryAttribute.Modifier == EcoResCategoryAttributeModifier::Product
                  exists join ecoResCategory
                   where ecoResCategory.NestedSetLeft     >= ecoResCategoryUpdated.NestedSetLeft
                      && ecoResCategory.NestedSetRight    <= ecoResCategoryUpdated.NestedSetRight
                      && ecoResCategory.CategoryHierarchy == ecoResCategoryUpdated.CategoryHierarchy
                      && ecoResCategory.RecId             == myCategoryAttribute.Category
               notexists join myCategoryAttributeLookup
                   where myCategoryAttributeLookup.Category  == ecoResCategory.RecId
                      && myCategoryAttributeLookup.Attribute == myCategoryAttribute.Attribute;

        return categoryAttributeLookup.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncByLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronizes the category hierarchy level by level starting from the provided category.
    /// </summary>
    /// <param name = "_stopWhenChangesFound">Whether the synchronization should stop once changes have been found.</param>
    /// <returns>The number of affected rows.</returns>
    /// <remarks>
    /// The process has to be in order by level to ensure that parents are synchronized before their children.
    /// Additionally, the process should stop if there is no inheriting child in the next level and full sync is off.
    /// </remarks>
    private int64 syncByLevel(boolean _stopWhenChangesFound)
    {
        int64 numRecordsUpdated = 0;
        ProcCategoryExpanded categoryExpanded;
        EcoResCategoryLevel level = 0;
        while select Level
                from categoryExpanded
               order by Level asc
               group by Level
               where categoryExpanded.NestedSetLeft     >= ecoResCategoryUpdated.NestedSetLeft
                  && categoryExpanded.NestedSetRight    <= ecoResCategoryUpdated.NestedSetRight
                  && categoryExpanded.CategoryHierarchy == ecoResCategoryUpdated.CategoryHierarchy
                  && (categoryExpanded.IsProductAttributesInherited == NoYes::Yes // include inheriting
                  || categoryExpanded.CategoryId == ecoResCategoryUpdated.RecId // include the originating category
                  || this.doFullSync) // force full sync of all levels
        {
            if (this.hasNoMoreImmediateChildLevels(level, categoryExpanded) || (_stopWhenChangesFound && numRecordsUpdated))
            {
                break;
            }

            level = categoryExpanded.Level;
            numRecordsUpdated += this.delete(level);
            numRecordsUpdated += this.updateFromParent(level);
            numRecordsUpdated += this.updateCategoryAttribute(level);
            numRecordsUpdated += this.insert(level);
        }

        return numRecordsUpdated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNoMoreImmediateChildLevels</Name>
				<Source><![CDATA[
    private boolean hasNoMoreImmediateChildLevels(EcoResCategoryLevel _level, ProcCategoryExpanded _categoryExpanded)
    {
        return _level && _level + 1 != _categoryExpanded.Level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFromParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates lookup records which are not properly synchronized to their parent.
    /// </summary>
    /// <param name = "_level">The hierarchy level to check.</param>
    /// <returns>The number of affected rows.</returns>
    private int64 updateFromParent(EcoResCategoryLevel _level)
    {
        EcoResCategoryAttributeLookup categoryAttributeLookup;
        EcoResCategoryAttributeLookup parentCategoryAttributeLookup;
        EcoResCategory                ecoResCategory;
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            update_recordset categoryAttributeLookup
                     setting CategoryAttribute = parentCategoryAttributeLookup.CategoryAttribute
                           , AttributeGroupAttribute = parentCategoryAttributeLookup.AttributeGroupAttribute
                           , AttributeGroupType = parentCategoryAttributeLookup.AttributeGroupType
                        #CategoryExpandedJoin
                        join CategoryAttribute, AttributeGroupAttribute, AttributeGroupType from parentCategoryAttributeLookup
                        #UpdateParentWhere;
        }
        else
        {
            update_recordset categoryAttributeLookup
                     setting CategoryAttribute = parentCategoryAttributeLookup.CategoryAttribute
                        #CategoryExpandedJoin
                        join CategoryAttribute from parentCategoryAttributeLookup
                        #UpdateParentWhere;
        }

        return categoryAttributeLookup.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCategoryAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the category attribute field of a lookup if it doesn't match the category attribute's RecId.
    /// </summary>
    /// <param name = "_level">The hierarchy level to check.</param>
    /// <returns>The number of affected rows.</returns>
    private int64 updateCategoryAttribute(EcoResCategoryLevel _level)
    {
        EcoResCategoryAttributeLookup categoryAttributeLookup;
        EcoResCategoryAttribute       myCategoryAttribute;
        EcoResCategory                ecoResCategory;
        update_recordset categoryAttributeLookup
                 setting CategoryAttribute = myCategoryAttribute.RecId
                    #CategoryExpandedJoin
                    join RecId from myCategoryAttribute
                   where myCategoryAttribute.Category  == ecoResCategory.RecId
                      && myCategoryAttribute.Attribute == categoryAttributeLookup.Attribute
                      && myCategoryAttribute.Modifier  == EcoResCategoryAttributeModifier::Product
                      // skip the records not needing update:
                      && myCategoryAttribute.RecId != categoryAttributeLookup.CategoryAttribute;

        return categoryAttributeLookup.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts missing lookups for group attributes.
    /// </summary>
    /// <returns>The number of affected rows.</returns>
    private int64 insertGroup()
    {
        EcoResCategory                ecoResCategory;
        EcoResCategoryAttributeLookup categoryAttributeLookup;
        EcoResCategoryAttributeLookup myCategoryAttributeLookup;
        EcoResCategoryAttributeGroup  categoryAttributeGroup;
        EcoResAttributeGroupAttribute attributeGroupAttribute;
        insert_recordset categoryAttributeLookup (Category, Attribute, AttributeGroupAttribute)
                  select Category
                    from categoryAttributeGroup
                   group by Category
                   where categoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
                    join Attribute, maxof(RecId) from attributeGroupAttribute
                   group by Attribute
                   where attributeGroupAttribute.AttributeGroup == categoryAttributeGroup.AttributeGroup
                  exists join ecoResCategory
                   where ecoResCategory.NestedSetLeft     >= ecoResCategoryUpdated.NestedSetLeft
                      && ecoResCategory.NestedSetRight    <= ecoResCategoryUpdated.NestedSetRight
                      && ecoResCategory.CategoryHierarchy == ecoResCategoryUpdated.CategoryHierarchy
                      && ecoResCategory.RecId             == categoryAttributeGroup.Category
               notexists join myCategoryAttributeLookup
                   where myCategoryAttributeLookup.Category  == ecoResCategory.RecId
                      && myCategoryAttributeLookup.Attribute == attributeGroupAttribute.Attribute;

        return categoryAttributeLookup.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttributeGroupType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the attribute group type of lookups where it doesn't match the group attribute.
    /// </summary>
    /// <returns>true when committing, or when nothing was changed; otherwise false.</returns>
    private int64 updateAttributeGroupType()
    {
        EcoResCategory                ecoResCategory;
        EcoResCategoryAttributeLookup categoryAttributeLookup;
        EcoResCategoryAttributeGroup  categoryAttributeGroup;
        EcoResAttributeGroupAttribute attributeGroupAttribute;
        update_recordSet categoryAttributeLookup
                 setting AttributeGroupType = categoryAttributeGroup.AttributeGroupType
                    join RecId from ecoResCategory
                   where ecoResCategory.CategoryHierarchy == ecoResCategoryUpdated.CategoryHierarchy
                      && ecoResCategory.RecId             == categoryAttributeLookup.Category
                    join RecId from attributeGroupAttribute
                   where attributeGroupAttribute.RecId == categoryAttributeLookup.AttributeGroupAttribute
                    join AttributeGroupType from categoryAttributeGroup
                   where categoryAttributeGroup.Category == categoryAttributeLookup.Category
                      && categoryAttributeGroup.AttributeGroup == attributeGroupAttribute.AttributeGroup
                      && categoryAttributeGroup.Modifier == EcoResCategoryAttributeModifier::Product
                      // skip the records not needing update:
                      && categoryAttributeGroup.AttributeGroupType != categoryAttributeLookup.AttributeGroupType;

        return categoryAttributeLookup.RowCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts missing lookups for the specified hierarchy level for categories which are set to inherit from their parent.
    /// </summary>
    /// <param name = "_level">The hierarchy level to check.</param>
    /// <returns>The number of affected rows.</returns>
    private int64 insert(EcoResCategoryLevel _level)
    {
        ProcCategoryExpanded          categoryExpanded;
        EcoResCategoryAttributeLookup categoryAttributeLookup;
        EcoResCategoryAttributeLookup parentCategoryAttributeLookup;
        EcoResCategoryAttributeLookup myCategoryAttributeLookup;
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            insert_recordset categoryAttributeLookup (Attribute, CategoryAttribute, AttributeGroupAttribute, AttributeGroupType, Category)
                      select Attribute, CategoryAttribute, AttributeGroupAttribute, AttributeGroupType
                        from parentCategoryAttributeLookup
                        join CategoryId from categoryExpanded
                       where categoryExpanded.NestedSetLeft     >= ecoResCategoryUpdated.NestedSetLeft
                          && categoryExpanded.NestedSetRight    <= ecoResCategoryUpdated.NestedSetRight
                          && categoryExpanded.Level             == _level
                          && categoryExpanded.CategoryHierarchy == ecoResCategoryUpdated.CategoryHierarchy
                          && categoryExpanded.ParentCategory    == parentCategoryAttributeLookup.Category
                          && categoryExpanded.IsProductAttributesInherited == NoYes::Yes
                   notexists join myCategoryAttributeLookup
                       where myCategoryAttributeLookup.Category  == categoryExpanded.CategoryId
                          && myCategoryAttributeLookup.Attribute == parentCategoryAttributeLookup.Attribute;
        }
        else
        {
            insert_recordset categoryAttributeLookup (Attribute, CategoryAttribute, Category)
                      select Attribute, CategoryAttribute
                        from parentCategoryAttributeLookup
                        join CategoryId from categoryExpanded
                       where categoryExpanded.NestedSetLeft     >= ecoResCategoryUpdated.NestedSetLeft
                          && categoryExpanded.NestedSetRight    <= ecoResCategoryUpdated.NestedSetRight
                          && categoryExpanded.Level == _level
                          && categoryExpanded.CategoryHierarchy == ecoResCategoryUpdated.CategoryHierarchy
                          && categoryExpanded.ParentCategory == parentCategoryAttributeLookup.Category
                          && categoryExpanded.IsProductAttributesInherited == NoYes::Yes
                   notexists join myCategoryAttributeLookup
                       where myCategoryAttributeLookup.Category  == categoryExpanded.CategoryId
                          && myCategoryAttributeLookup.Attribute == parentCategoryAttributeLookup.Attribute;
        }

        return categoryAttributeLookup.RowCount();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>