<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdNotificationDefectRatioRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for defining and generating notifications pertaining to defect ratio
/// The class generates a notification when the reported error quantity / estimated quantity exceeds the scrap percentage defined for the operation.
/// One notification is generated per operation.
/// </summary>
public class ProdNotificationDefectRatioRule implements ProdINotificationRule
{
    private const ProdNotificationRuleName ruleName = "@SCM:DefectRatioNotificationRuleName";
    private const ProdNotificationRuleDescription ruleDescription = "@SCM:DefectRatioNotificationRuleDescription";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeParameterRecord</Name>
				<Source><![CDATA[
    public ProdNotificationParameterBase initializeParameterRecord(ProdNotificationSetup _setup)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public ProdNotificationRuleName parmName()
    {
        return ruleName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public ProdNotificationRuleDescription parmDescription()
    {
        return ruleDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNotifications</Name>
				<Source><![CDATA[
    public void generateNotifications(ProdNotificationSetup _prodNotificationSetup)
    {
        ProdNotificationSetupSubscription notificationSubscription;

        while select notificationSubscription
            where notificationSubscription.ProdNotificationSetup == _prodNotificationSetup.RecId
        {
            Query defectRatioQuery = new Query(queryStr(ProdNotificationDefectRatioQuery));
            this.addFilters(defectRatioQuery, notificationSubscription.UserId);

            QueryRun queryRun  = new QueryRun(defectRatioQuery);

            while (queryRun.next())
            {
                ProdRoute prodRoute = queryRun.get(tableNum(ProdRoute));
                ProdRouteTrans routeTrans = queryRun.get(tableNum(ProdRouteTrans));

                var estimatedQty = prodRoute.CalcQty;
                var errorQty = routeTrans.QtyError;

                if (estimatedQty <= 0)
                {
                    continue;
                }

                int defectRatio = real2int(errorQty / estimatedQty * 100);
                if (errorQty / estimatedQty * 100 > prodRoute.ErrorPct)
                {
                    ProdNotification::createNotification(
                        ProdNotificationSourceType::Operation,
                        prodRoute.RecId,
                        classStr(ProdNotificationDefectRatioRule),
                        strFmt('%1 %2', prodRoute.ProdId, prodRoute.operationName()),
                        strFmt("@SCM:DefectRatioNotificationMessage", defectRatio),
                        ProdNotificationLevel::Warning,
                        notificationSubscription.UserId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMenuFunction</Name>
				<Source><![CDATA[
    public MenuFunction getMenuFunction()
    {
        return new MenuFunction(menuItemActionStr(ProdNotificationOpenJournal), MenuItemType::Action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterJobsDataSource</Name>
				<Source><![CDATA[
    public QueryBuildDataSource filterJobsDataSource(QueryBuildDataSource _jobDataSource)
    {
        return _jobDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterAffectedJobs</Name>
				<Source><![CDATA[
    public void filterAffectedJobs(Query _query, ProdNotification _notification)
    {
        var jobDataSource = _query.dataSourceTable(tableNum(JmgJobTable));

        if (jobDataSource != null)
        {
            ProdRoute prodRoute = ProdRoute::findRecId(_notification.Source);
            jobDataSource.addRange(fieldNum(JmgJobTable, ModuleRefId)).value(queryValue(prodRoute.ProdId));
            jobDataSource.addRange(fieldNum(JmgJobTable, OprNum)).value(queryValue(prodRoute.OprNum));
            jobDataSource.addRange(fieldNum(JmgJobTable, Priority)).value(queryValue(prodRoute.OprPriority));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFilters</Name>
				<Source><![CDATA[
    private void addFilters(Query _query, SysUserId _userId)
    {
        JmgShopSupervisorWorkspaceConfiguration workspaceConfig;

        select firstonly workspaceConfig where workspaceConfig.UserId == _userId;

        QueryBuildDataSource routeTransDS = _query.dataSourceTable(tableNum(ProdRouteTrans), 2);
        this.addAreaFilter(routeTransDS, fieldNum(ProdRouteTrans, ProdUnitId), workspaceConfig.ProdUnitFilter);
        this.addAreaFilter(routeTransDS, fieldNum(ProdRouteTrans, ResourceGroup), workspaceConfig.ResourceGroupFilter);
        this.addAreaFilter(routeTransDS, fieldNum(ProdRouteTrans, WrkCtrId), workspaceConfig.ResourceFilter);

        QueryBuildDataSource prodJournalRouteDS = _query.dataSourceTable(tableNum(ProdJournalRoute));
        QueryBuildRange qbr = prodJournalRouteDS.addRange(fieldNum(ProdJournalRoute, TransDate));
        qbr.value(queryValue(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAreaFilter</Name>
				<Source><![CDATA[
    private void addAreaFilter(QueryBuildDataSource _dataSource, FieldId _fieldNum, str _filterValue)
    {
        if (_filterValue != '')
        {
            var qbr = _dataSource.addRange(_fieldNum);
            qbr.value(_filterValue);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>