<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimTracking</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventDimTracking extends RunBase
{
    QueryRun                        initialQueryRun;
    InventDimParm                   inventDimParm;
    NoYes                           doDateChecking;
    NoYes                           onlyWithDate;

    InventTrans                     callerInventTrans;
    private WHSInventTransAndWarehouseTransactionView callerWarehouseTransaction;

    Map                             inventTransOriginMap;

    DialogField                     dialogDateChecking;
    DialogField                     dialogOnlyWithDate;
    DialogGroup                     dialogInventDimParmTracking;
    DialogRunbase                   dialog;

    NoYes                           showItemId;
    NoYes                           showItemName;
    NoYes                           showTransType;
    NoYes                           showRefId;
    NoYes                           showQty;
    NoYes                           showValue;
    NoYes                           showDatePhysical;

    FormTreeControl                 tree;
    Map                             nodeInfoMap;
    FormComboBoxControl             forwardBackwardCtrl;
    FormCheckBoxControl             doDateCheckingCtrl;
    FormStringControl               formatStrCtrl;
    InventDimParm                   inventDimParmLine;
    Counter                         recCount;
    Counter                         warnCount;
    boolean                         reDrawTree;

    internal static boolean includeWarehouseSpecificInventoryTransactions = WHSInventoryTransactionConfigurationProvider::isWarehouseInventoryTransactionStackEnabled();

    #DEFINE.WarnCountLimit(100)

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
         showItemId,
         showItemName,
         showTransType,
         showRefId,
         showQty,
         showValue,
         showDatePhysical,
         doDateChecking,
         onlyWithDate
    #ENDMACRO

    const str rightArrowSymbol = '→';
    const str leftArrowSymbol = '←';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventTrans2List</Name>
				<Source><![CDATA[
    private void addInventTrans2List(SysRecordSortedList _inventTransList, InventTrans _inventTrans, InventTransOrigin _inventTransOrigin)
    {
        //  Filter out SummedUp type transactions. SummedUp transactions represent other transactions,
        //  but as these original transactions will also be found, the SummedUp transactions are redundant here.
        if (_inventTransOrigin.ReferenceCategory == InventTransType::SummedUp)
        {
            return;
        }

        // if the current search has already contains more than warnCount transactions
        // then rollback and raise error
        if (recCount >= warnCount)
        {
            throw error('');
        }
        _inventTrans.DatePhysical = this.inventTransDate(_inventTrans);

        _inventTransList.ins(_inventTrans, false);

        if (!inventTransOriginMap.exists(_inventTransOrigin.RecId))
        {
            inventTransOriginMap.insert(_inventTransOrigin.RecId, _inventTransOrigin);
        }

        recCount++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransList2Tree</Name>
				<Source><![CDATA[
    private void addInventTransList2Tree(TreeItemIdx _nodeId, SysRecordSortedList _inventTransList)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        boolean             cont                = _inventTransList.first(inventTrans);

        while (cont)
        {
            if (inventTransOrigin.RecId != inventTrans.InventTransOrigin)
            {
                inventTransOrigin = this.inventTransOrigin(inventTrans.InventTransOrigin);
            }
            this.createTreeNode(inventTransOrigin, inventTrans, _nodeId);
            cont = _inventTransList.next(inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTransAndWHSInventoryTransactionList2Tree</Name>
				<Source><![CDATA[
    private void addInventTransAndWHSInventoryTransactionList2Tree(
        TreeItemIdx _nodeId,
        SysRecordSortedList _list,
        Map _allTransactionMap)
    {
        InventTrackingTransactionInMemoryTable transaction;
        boolean listHasMoreTransactions = _list.first(transaction);

        while (listHasMoreTransactions)
        {
            Debug::assert(transaction.UniqueKey != null);

            if (transaction.TransactionType == InventTrackingTransactionType::InventTrans)
            {
                this.createTreeNodeFromInventTrans(_nodeId, transaction, _allTransactionMap);
            }
            else if (transaction.TransactionType == InventTrackingTransactionType::WHSInventoryTransaction)
            {
                this.createTreeNodeFromWHSInventoryTransaction(_nodeId, transaction, _allTransactionMap);
            }              

            listHasMoreTransactions = _list.next(transaction);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTreeNodeFromInventTrans</Name>
				<Source><![CDATA[
    private void createTreeNodeFromInventTrans(
        TreeItemIdx _nodeId,
        InventTrackingTransactionInMemoryTable _transaction,
        Map _allTransactionMap)
    {
        InventTransOrigin inventTransOrigin;

        InventTrans inventTrans = _allTransactionMap.lookup(_transaction.UniqueKey);

        if (inventTransOrigin.RecId != inventTrans.InventTransOrigin)
        {
            inventTransOrigin = this.inventTransOrigin(inventTrans.InventTransOrigin);
        }

        this.createTreeNode(inventTransOrigin, inventTrans, _nodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTreeNodeFromWHSInventoryTransaction</Name>
				<Source><![CDATA[
    private void createTreeNodeFromWHSInventoryTransaction(
        TreeItemIdx _nodeId,
        InventTrackingTransactionInMemoryTable _transaction,
        Map _allTransactionMap)
    {
        WHSInventoryTransactionView inventoryTransaction = _allTransactionMap.lookup(_transaction.UniqueKey);

        this.createWHSInventoryTransactionTreeNode(inventoryTransaction, _nodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTree</Name>
				<Source><![CDATA[
    protected void buildTree()
    {
        SysRecordSortedList     inventTransList;

        tree.deleteAll();
        nodeInfoMap = new Map(Types::Integer, Types::Class);

        if (callerInventTrans.RecId)
        {
            this.createTreeNode(this.inventTransOrigin(callerInventTrans.InventTransOrigin), callerInventTrans, 0);
            return;
        }

        if (callerWarehouseTransaction.RecId)
        {
            this.createTreeNodeFromWarehouseTransaction(callerWarehouseTransaction, 0);
            return;
        }

        int infoLine = infologLine();
        try
        {
            inventTransList = this.initInventTransList();
            this.parmWarnCount(#WarnCountLimit);
            this.parmRecCount(0);

            while (initialQueryRun.next())
            {
                InventTrans inventTrans = initialQueryRun.get(tableNum(InventTrans)) as InventTrans;
                InventTransOrigin inventTransOrigin = initialQueryRun.get(tableNum(InventTransOrigin)) as InventTransOrigin;
                if (!onlyWithDate || this.inventTransDate(inventTrans))
                {
                    this.addInventTrans2List(inventTransList, inventTrans, inventTransOrigin);
                }
            }
        }
        catch (Exception::Error)
        {
            infolog.clear(infoLine);
        }

        if (inventTransList)
        {
            this.addInventTransList2Tree(0, inventTransList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>traceSetupChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reacts to changes in the trace setup.
    /// </summary>
    public void traceSetupChanged()
    {
        TreeItemIdx             setupNode = this.setupNode();
        boolean                 anyChanges = false;

        if (setupNode == 0)
        {
            if (reDrawTree)
            {
                this.reDrawTree();
            }
            return;
        }

        InventDimTrackingNode inventDimTrackingNode = nodeInfoMap.lookup(setupNode);

        if (forwardBackwardCtrl.selection() != inventDimTrackingNode.parmForwardBackward())
        {
            inventDimTrackingNode.parmForwardBackward(forwardBackwardCtrl.selection());
            anyChanges = true;
        }

        if (doDateCheckingCtrl.value() != inventDimTrackingNode.parmDoDateChecking())
        {
            inventDimTrackingNode.parmDoDateChecking(doDateCheckingCtrl.value());
            anyChanges = true;
        }

        if (!bufCmp(inventDimParmLine, inventDimTrackingNode.parmInventDimParm()))
        {
            inventDimTrackingNode.parmInventDimParm(inventDimParmLine);
            anyChanges = true;
        }

        if (anyChanges)
        {
            this.markAsNotExpanded(setupNode);
        }

        if (reDrawTree)
        {
            this.reDrawTree();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySetupChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reacts to changes in the display setup.
    /// </summary>
    public void displaySetupChanged()
    {
        if (reDrawTree)
        {
            this.reDrawTree();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTraceSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the trace setup from the current selected node.
    /// </summary>
    public void initTraceSetup()
    {
        TreeItemIdx             setupNode = this.setupNode();
        FormDataSource          inventDimParmLine_ds = FormDataUtil::getFormDataSource(inventDimParmLine);

        if (setupNode == 0)
        {
            forwardBackwardCtrl.enabled(false);
            doDateCheckingCtrl.enabled(false);
            doDateCheckingCtrl.value(doDateChecking);
            inventDimParmLine.data(inventDimParm.data());
            inventDimParmLine_ds.allowEdit(false);
        }
        else
        {
            InventDimTrackingNode inventDimTrackingNode = nodeInfoMap.lookup(setupNode);
            forwardBackwardCtrl.enabled(true);
            forwardBackwardCtrl.selection(inventDimTrackingNode.parmForwardBackward());
            doDateCheckingCtrl.enabled(true);
            doDateCheckingCtrl.value(inventDimTrackingNode.parmDoDateChecking());
            inventDimParmLine_ds.allowEdit(true);
            inventDimParmLine.data(inventDimTrackingNode.parmInventDimParm().data());
            inventDimParmLine_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDateOrder</Name>
				<Source><![CDATA[
    protected boolean checkDateOrder(
        InventDimTrackingNode   _inventDimTrackingNode,
        InventTrans             _inventTrans)
    {
        InventTrans     inventTransParent   = _inventDimTrackingNode.parmInventTrans();
        boolean         ret = true;
        date            dateParent, dateChild;

        dateChild = this.inventTransDate(_inventTrans);
        if (!dateChild && onlyWithDate)
        {
            return false;
        }

        if (_inventDimTrackingNode.parmDoDateChecking())
        {
            dateParent = inventTransParent.DatePhysical;

            switch (_inventDimTrackingNode.parmForwardBackward())
            {
                case ForwardBackward::Forward:
                    if (dateChild < dateParent)
                    {
                        ret = false;
                    }
                    break;
                case ForwardBackward::Backward:
                    if (!dateParent && dateChild)
                    {
                        ret = false;
                    }
                    else if (dateParent < dateChild)
                    {
                        ret = false;
                    }
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQuarantineOrder</Name>
				<Source><![CDATA[
    protected boolean checkQuarantineOrder(
        InventDimTrackingNode   _inventDimTrackingNode,
        InventTrans             _inventTrans,
        InventTransOrigin       _inventTransOrigin)
    {
        InventTrans             inventTransParent       = _inventDimTrackingNode.parmInventTrans();
        InventTransOrigin       inventTransOriginParent = _inventDimTrackingNode.parmInventTransOrigin();

        if (inventTransOriginParent.ReferenceCategory != InventTransType::QuarantineOrder)
        {
            return true;
        }

        switch (_inventDimTrackingNode.parmForwardBackward())
        {
            case ForwardBackward::Forward:
                if (inventTransParent.inventDim().inventLocation().InventLocationType == InventLocationType::Quarantine)
                {
                    if (inventTransParent.Qty < 0)
                    {
                        // item going from quarantine warehouse to standard warehouse
                        if (_inventTransOrigin.ReferenceId != inventTransOriginParent.ReferenceId)
                        {
                            return false;
                        }
                        if (_inventTrans.inventDim().inventLocation().InventLocationType != InventLocationType::Standard)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        // item going from quarantine receipt to quarantine issue
                        if (_inventTransOrigin.ReferenceId != inventTransOriginParent.ReferenceId)
                        {
                            return false;
                        }
                        if (_inventTrans.inventDim().inventLocation().InventLocationType != InventLocationType::Quarantine)
                        {
                            return false;
                        }
                    }
                }
                else
                {
                    // Parent is at standard warehouse
                    if (inventTransParent.Qty < 0)
                    {
                        // going from standard warehouse to quarantine warehouse
                        if (_inventTransOrigin.ReferenceId != inventTransOriginParent.ReferenceId)
                        {
                            return false;
                        }
                        if (_inventTrans.inventDim().inventLocation().InventLocationType != InventLocationType::Quarantine)
                        {
                            return false;
                        }
                    }
                    // else it is the receipt back at standard warehouse
                }
                break;
            case ForwardBackward::Backward:
                if (inventTransParent.inventDim().inventLocation().InventLocationType == InventLocationType::Quarantine)
                {
                    if (inventTransParent.Qty < 0)
                    {
                        // item going from quarantine issue to quarantine receipt
                        if (_inventTransOrigin.ReferenceId != inventTransOriginParent.ReferenceId)
                        {
                            return false;
                        }
                        if (_inventTrans.inventDim().inventLocation().InventLocationType != InventLocationType::Quarantine)
                        {
                            return false;
                        }
                    }
                    else
                    {
                        // item going from standard warehouse to quarantine warehouse
                        if (_inventTransOrigin.ReferenceId != inventTransOriginParent.ReferenceId)
                        {
                            return false;
                        }
                        if (_inventTrans.inventDim().inventLocation().InventLocationType != InventLocationType::Standard)
                        {
                            return false;
                        }
                    }
                }
                else
                {
                    // Parent is at standard warehouse
                    if (inventTransParent.Qty > 0)
                    {
                        // item going from quarantine warehouse to standard warehouse
                        if (_inventTransOrigin.ReferenceId != inventTransOriginParent.ReferenceId)
                        {
                            return false;
                        }
                        if (_inventTrans.inventDim().inventLocation().InventLocationType != InventLocationType::Quarantine)
                        {
                            return false;
                        }
                    }
                    // else it is the original issue at standard warehouse
                }
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransOriginIds</Name>
				<Source><![CDATA[
    protected boolean checkTransOriginIds(
        InventDimTrackingNode   _inventDimTrackingNode,
        InventTrans             _inventTrans,
        InventTransOrigin       _inventTransOrigin)
    {
        InventTrans         inventTransParent       = _inventDimTrackingNode.parmInventTrans();
        InventTransOrigin   inventTransOriginParent = _inventDimTrackingNode.parmInventTransOrigin();

        boolean isInventTransBefore(InventTrans _inventTrans1, InventTrans _inventTrans2)
        {
            // returns true if _inventTrans1 is considered to happen before _inventTrans2
            if (_inventTrans1.DateFinancial && _inventTrans2.DateFinancial)
            {
                if (_inventTrans1.DateFinancial < _inventTrans2.DateFinancial)
                {
                    return true;
                }
                if (_inventTrans1.DateFinancial > _inventTrans2.DateFinancial)
                {
                    return false;
                }
                // both have same date
                if (_inventTrans1.Voucher < _inventTrans2.Voucher)
                {
                    return true;
                }
                return false;
            }
            if (_inventTrans1.DateFinancial && !_inventTrans2.DateFinancial)
            {
                return true;
            }
            if (_inventTrans2.DateFinancial && !_inventTrans1.DateFinancial)
            {
                return false;
            }
            // no dates
            if (_inventTrans1.InventTransOrigin < _inventTrans2.InventTransOrigin)
            {
                // last resort, which isn't completely safe if inventTransOrigin is created on differernt AOS's
                return true;
            }
            return false;
        }

        if (_inventTransOrigin.ReferenceId      == '' &&
            inventTransOriginParent.ReferenceId == '')        // Both are virtual movements where inventTransOrigin is assigned at posting time.
        {
            switch (_inventDimTrackingNode.parmForwardBackward())
            {
                case ForwardBackward::Forward:
                    if (isInventTransBefore(_inventTrans, inventTransParent))
                    {
                        return false;
                    }
                    break;
                case ForwardBackward::Backward:
                    if (isInventTransBefore(inventTransParent, _inventTrans))
                    {
                        return false;
                    }
                    break;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTreeNodeFromWarehouseTransaction</Name>
				<Source><![CDATA[
    private FormTreeItem createTreeNodeFromWarehouseTransaction(
        WHSInventTransAndWarehouseTransactionView _warehouseTransaction,
        TreeItemIdx _nodeId)
    {
        if (_warehouseTransaction.InventTransId)
        {
            var inventTrans = InventTrans::findRecId(_warehouseTransaction.RecId);
            return this.createTreeNode(this.inventTransOrigin(inventTrans.InventTransOrigin), inventTrans, 0);
        }

        var inventoryTransaction = _warehouseTransaction.createInventoryTransactionView();
        return this.createWHSInventoryTransactionTreeNode(inventoryTransaction, _nodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWHSInventoryTransactionTreeNode</Name>
				<Source><![CDATA[
    private FormTreeItem createWHSInventoryTransactionTreeNode(
        WHSInventoryTransactionView _inventoryTransaction,
        TreeItemIdx _nodeId)
    {
        Counter level = 1;
        ForwardBackward forwardBackward;
        InventDimParm inventDimParmParent;
        NoYes doDateCheckingTmp;

        if (_nodeId)
        {
            InventDimTrackingNode inventDimTrackingNodeParent = nodeInfoMap.lookup(_nodeId);
            level = inventDimTrackingNodeParent.parmLevel() + 1;
            forwardBackward = inventDimTrackingNodeParent.parmForwardBackward();
            inventDimParmParent = inventDimTrackingNodeParent.parmInventDimParm();
            doDateCheckingTmp = inventDimTrackingNodeParent.parmDoDateChecking();
        }
        else
        {
            // root
            inventDimParmParent = inventDimParm;
            doDateCheckingTmp   = doDateChecking;
        }

        var lineTxt = this.lineTxtFromWHSInventoryTransaction(_inventoryTransaction, forwardBackward);

        FormTreeItem item = new FormTreeItem(lineTxt);
        item.stateExpanded(false);
        item.children(true);

        TreeItemIdx childNodeId = tree.addItem(_nodeId, 0, item);

        InventDimTrackingNode inventDimTrackingNodeChild = InventDimTrackingWarehouseTransactionNode::newFromWHSInventoryTransactionView(
            childNodeId,
            _inventoryTransaction,
            level,
            false,
            _nodeId,
            forwardBackward,
            inventDimParmParent,
            doDateCheckingTmp);
        nodeInfoMap.insert(childNodeId, inventDimTrackingNodeChild);
        return tree.getItem(childNodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTreeNode</Name>
				<Source><![CDATA[
    protected FormTreeItem createTreeNode(
        InventTransOrigin   _inventTransOrigin,
        InventTrans         _inventTrans,
        TreeItemIdx         _nodeId,
        TreeItemIdx         _insertAfter = 0)
    {
        Counter                 level                           = 1;
        ForwardBackward         forwardBackward;
        InventDimParm           inventDimParmParent;
        NoYes                   doDateCheckingTmp;

        if (_nodeId)
        {
            InventDimTrackingNode inventDimTrackingNodeParent = nodeInfoMap.lookup(_nodeId);
            level = inventDimTrackingNodeParent.parmLevel() + 1;
            forwardBackward = inventDimTrackingNodeParent.parmForwardBackward();
            inventDimParmParent = inventDimTrackingNodeParent.parmInventDimParm();
            doDateCheckingTmp = inventDimTrackingNodeParent.parmDoDateChecking();
        }
        else
        {
            // root
            inventDimParmParent = inventDimParm;
            doDateCheckingTmp   = doDateChecking;

            switch (_inventTransOrigin.ReferenceCategory)
            {
                case InventTransType::Sales:
                case InventTransType::InventCounting:
                case InventTransType::InventLossProfit:
                case InventTransType::KanbanJobWIP:
                    if (_inventTrans.Qty < 0 && _inventTrans.ReturnInventTransOrigin == 0)
                    {
                        forwardBackward = ForwardBackward::Backward;
                    }
                    break;
                case InventTransType::Statement:
                    if (isConfigurationkeyEnabled(configurationKeyNum(Retail))
                        && _inventTrans.Qty < 0
                        && _inventTrans.ReturnInventTransOrigin == 0)
                    {
                        forwardBackward = ForwardBackward::Backward;
                    }
            }
        }

        FormTreeItem item = new FormTreeItem(this.lineTxt(_inventTrans, _inventTransOrigin, NoYes::No, forwardBackward));
        item.stateExpanded(false);
        item.children(true);

        TreeItemIdx childNodeId = tree.addItem(_nodeId,_insertAfter,item);
        InventDimTrackingNode inventDimTrackingNodeChild = InventDimTrackingNode::newParameters(childNodeId, _inventTransOrigin, _inventTrans, level, false, _nodeId, forwardBackward, inventDimParmParent, doDateCheckingTmp);
        nodeInfoMap.insert(childNodeId, inventDimTrackingNodeChild);
        return tree.getItem(childNodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSubNodes</Name>
				<Source><![CDATA[
    private void deleteSubNodes(TreeItemIdx _nodeId)
    {
        TreeItemIdx             child       = _nodeId ? tree.getChild(_nodeId) : 0;

        while (child)
        {
            this.deleteSubNodes(child);
            nodeInfoMap.remove(child);
            TreeItemIdx nextChild = tree.getNextSibling(child);

            tree.delete(child);
            child = nextChild;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        if (callerInventTrans || callerWarehouseTransaction)
        {
            return null;        // Don't show dialog if called directly from transaction.
        }

        dialog = super();

        dialog.addGroup("@SYS321");
        dialogDateChecking      = dialog.addField(enumStr(NoYes), "@SYS29015", "@SYS65291");
        dialogDateChecking.value(doDateChecking);
        dialogOnlyWithDate      = dialog.addField(enumStr(NoYes), "@SYS65319");
        dialogOnlyWithDate.value(onlyWithDate);

        dialogInventDimParmTracking = inventDimParm.addFieldsToDialog(dialog, "@SYS65217");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNode</Name>
				<Source><![CDATA[
    public void expandNode(TreeItemIdx _nodeId)
    {
        FormTreeItem            parentItem              = tree.getItem(_nodeId);
        SysRecordSortedList     inventTransList;
        SysRecordSortedList     inventTransAndWHSInventoryTransactionList;
        Map allTransactionMap = new Map(Types::String, Types::Record);

        if (!nodeInfoMap.exists(_nodeId))
        {
            return;
        }

        InventDimTrackingNode inventDimTrackingNode = nodeInfoMap.lookup(_nodeId);
        if (inventDimTrackingNode.parmStateExpanded())
        {
            return;
        }

        parentItem.stateExpanded(true);
        tree.setItem(parentItem);
        int infoLine = infologLine();

        try
        {
            this.parmRecCount(0);
            this.parmWarnCount(#WarnCountLimit);
            inventDimTrackingNode.parmStateExpanded(true);

            if (includeWarehouseSpecificInventoryTransactions)
            {
                inventTransAndWHSInventoryTransactionList = this.initInventoryTransactionList();
                this.expandWarehouseTransactionNode(inventTransAndWHSInventoryTransactionList, inventDimTrackingNode, allTransactionMap);
            }
            else
            {
                inventTransList = this.initInventTransList();

                this.expandNodeServerProxy(inventTransList, inventDimTrackingNode);
            }
        }
        catch (Exception::Error)
        {
            infolog.clear(infoLine);
        }

        if (inventTransList)
        {
            this.addInventTransList2Tree(_nodeId, inventTransList);
        }

        if (inventTransAndWHSInventoryTransactionList)
        {
            this.addInventTransAndWHSInventoryTransactionList2Tree(_nodeId, inventTransAndWHSInventoryTransactionList, allTransactionMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNodeBackwardIssue</Name>
				<Source><![CDATA[
    protected void expandNodeBackwardIssue(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode)
    {
        InventTrans             inventTransParent           = _inventDimTrackingNode.parmInventTrans();
        InventTransOrigin       inventTransOriginParent     = _inventDimTrackingNode.parmInventTransOrigin();
        InventDim               inventDimParent             = inventTransParent.inventDim();
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventDim               inventDim;

        switch (inventTransOriginParent.ReferenceCategory)
        {
            case InventTransType::TransferOrderReceive:
                while select inventTransOrigin
                    where inventTransOrigin.ItemId              == inventTransParent.ItemId
                      &&  inventTransOrigin.ReferenceCategory   == InventTransType::TransferOrderShip
                      &&  inventTransOrigin.ReferenceId         == inventTransOriginParent.ReferenceId
                    join inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                      &&  inventTrans.Qty                >  0
                #inventDimJoin(inventTrans.inventDimId,inventDim,inventDimParent,_inventDimTrackingNode.parmInventDimParm())
                {
                    if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                    {
                        this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                    }
                }
                break;
            default:
                while select inventTransOrigin
                    where inventTransOrigin.ItemId      == inventTransParent.ItemId
                    join inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                      &&  inventTrans.Qty                >  0
                #inventDimJoin(inventTrans.inventDimId,inventDim,inventDimParent,_inventDimTrackingNode.parmInventDimParm())
                {
                    if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                    {
                        this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNodeBackwardForwardReceiptOwnershipChangeJournal</Name>
				<Source><![CDATA[
    private void expandNodeBackwardForwardReceiptOwnershipChangeJournal(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode,
        InventTrans             _inventTransParent,
        InventTransOrigin       _inventTransOriginParent)
    {
        InventTransOriginOwnershipChangeJournalTransPurchLineLink   inventTransOriginOwnershipChangeJournalTransPurchLineLink;
        InventTransOrigin                                           inventTransOrigin;
        InventTrans                                                 inventTrans;

        while select inventTransOriginOwnershipChangeJournalTransPurchLineLink
            where inventTransOriginOwnershipChangeJournalTransPurchLineLink.PurchaseOrderLine == _inventTransOriginParent.RecId
            join inventTransOrigin
                where inventTransOrigin.ItemId  == _inventTransParent.ItemId
                   && inventTransOrigin.RecId   == inventTransOriginOwnershipChangeJournalTransPurchLineLink.OwnershipChangeJournalLine
            join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                   &&  inventTrans.Qty              <  0
        {
            if (!_inventTransParent.ReturnInventTransOrigin || _inventTransParent.ReturnInventTransOrigin != inventTrans.InventTransOrigin)
            {
                if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                {
                    this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNodeBackwardReceiptDefault</Name>
				<Source><![CDATA[
    private void expandNodeBackwardReceiptDefault(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode,
        InventTrans             _inventTransParent)
    {
        if (_inventTransParent.ReturnInventTransOrigin && _inventTransParent.isReceipt())
        {
            this.findTransIssues(_inventTransList, _inventDimTrackingNode, _inventTransParent.ReturnInventTransOrigin, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNodeBackwardReceipt</Name>
				<Source><![CDATA[
    protected void expandNodeBackwardReceipt(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode)
    {
        InventTrans             inventTransParent       = _inventDimTrackingNode.parmInventTrans();
        InventTransOrigin       inventTransOriginParent = _inventDimTrackingNode.parmInventTransOrigin();

        switch (inventTransOriginParent.ReferenceCategory)
        {
            case InventTransType::Production:
                this.findProdLines(_inventTransList, _inventDimTrackingNode);
                break;
            case InventTransType::BOMMain:
                this.findBOMLines(_inventTransList, _inventDimTrackingNode);
                break;
            case InventTransType::KanbanJobProcess:
                this.findKanbanJobPickingList(_inventTransList,_inventDimTrackingNode);
                break;
            case InventTransType::InventTransfer:
            case InventTransType::WMSTransport:
            case InventTransType::QuarantineOrder:
            case InventTransType::TransferOrderShip:
            case InventTransType::TransferOrderReceive:
            case InventTransType::KanbanJobTransferIssue:
            case InventTransType::KanbanJobTransferReceipt:
                InventTransOriginId transferInventTransOriginId = InventTransOriginTransfer::findTransferRefId(inventTransParent.InventTransOrigin);
                if (!transferInventTransOriginId)
                {
                    transferInventTransOriginId = inventTransParent.InventTransOrigin;
                }
                this.findTransIssues(_inventTransList, _inventDimTrackingNode, transferInventTransOriginId, inventTransParent.Voucher);
                break;
            case InventTransType::ProdLine:
                if (#PmfEnabled)
                {
                    if (inventTransParent.direction() == InventDirection::Receipt)
                    {
                        this.findBatchIssues(_inventTransList, _inventDimTrackingNode);
                    }
                }
                break;
            case InventTransType::PmfProdCoBy:
                if (inventTransParent.direction() == InventDirection::Receipt)
                {
                    this.findBatchIssues(_inventTransList, _inventDimTrackingNode);
                }
                break;
            case InventTransType::Purch:
                if (InventTransOriginOwnershipChangeJournalTransPurchLineLink::existByPurchaseOrderLineOriginId(inventTransOriginParent.RecId))
                {
                    this.expandNodeBackwardForwardReceiptOwnershipChangeJournal(_inventTransList, _inventDimTrackingNode, inventTransParent, inventTransOriginParent);
                }
                else
                {
                    this.expandNodeBackwardReceiptDefault(_inventTransList, _inventDimTrackingNode, inventTransParent);
                }
                break;

            default:
                this.expandNodeBackwardReceiptDefault(_inventTransList, _inventDimTrackingNode, inventTransParent);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNodeForwardIssue</Name>
				<Source><![CDATA[
    protected void expandNodeForwardIssue(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode)
    {
        InventTrans             inventTransParent       = _inventDimTrackingNode.parmInventTrans();
        InventTransOrigin       inventTransOriginParent = _inventDimTrackingNode.parmInventTransOrigin();

        switch (inventTransOriginParent.ReferenceCategory)
        {
            case InventTransType::ProdLine:
                if (#PmfEnabled && inventTransParent.isIssue())
                {
                    this.findBatchReceipts(_inventTransList, _inventDimTrackingNode);
                }
            // fall through
            case InventTransType::BOMLine:
                this.findTransReceipts(_inventTransList, _inventDimTrackingNode, inventTransParent.assemblyInventTransOrigin().RecId, inventTransParent.Voucher);
                break;
            case InventTransType::InventTransfer:
            case InventTransType::WMSTransport:
            case InventTransType::QuarantineOrder:
            case InventTransType::TransferOrderReceive:
            case InventTransType::TransferOrderShip:
            case InventTransType::KanbanJobTransferIssue:
            case InventTransType::KanbanJobTransferReceipt:
                this.findTransTransferReceipts(_inventTransList, _inventDimTrackingNode, inventTransParent, inventTransOriginParent, inventTransParent.Voucher);
                break;
            case InventTransType::InventOwnershipChange:
                this.findTransReceipts(_inventTransList, _inventDimTrackingNode, InventTransOriginOwnershipChangeJournalTransPurchLineLink::findByJournalLineOriginId(inventTransOriginParent.RecId).PurchaseOrderLine, '');
                break;
            default:
                if (inventTransParent.ReturnInventTransOrigin && inventTransParent.isIssue())
                {
                    this.findTransReceipts(_inventTransList, _inventDimTrackingNode, inventTransParent.ReturnInventTransOrigin, '');
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNodeForwardReceiptDefault</Name>
				<Source><![CDATA[
    private void expandNodeForwardReceiptDefault(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode,
        InventTrans             _inventTransParent,
        InventDim               _inventDimParent)
    {
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventDim               inventDim;

        while select inventTransOrigin
                    where inventTransOrigin.ItemId              == _inventTransParent.ItemId
                    join inventTrans
                    where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                      &&  inventTrans.Qty                        <  0
                #inventDimJoin(inventTrans.inventDimId, inventDim, _inventDimParent, _inventDimTrackingNode.parmInventDimParm())
        {
            if (!_inventTransParent.ReturnInventTransOrigin || _inventTransParent.ReturnInventTransOrigin != inventTrans.InventTransOrigin)
            {
                if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                {
                    this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNodeForwardReceipt</Name>
				<Source><![CDATA[
    protected void expandNodeForwardReceipt(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode)
    {
        InventTrans             inventTransParent       = _inventDimTrackingNode.parmInventTrans();
        InventTransOrigin       inventTransOriginParent = _inventDimTrackingNode.parmInventTransOrigin();
        InventDim               inventDimParent         = inventTransParent.inventDim();
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventDim               inventDim;

        switch (inventTransOriginParent.ReferenceCategory)
        {
            case InventTransType::TransferOrderShip:
                while select inventTransOrigin
                    where inventTransOrigin.ItemId              == inventTransParent.ItemId
                      &&  inventTransOrigin.ReferenceCategory   == InventTransType::TransferOrderReceive
                      &&  inventTransOrigin.ReferenceId         == inventTransOriginParent.ReferenceId
                    join inventTrans
                    where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                      &&  inventTrans.Qty                        <  0
                #inventDimJoin(inventTrans.inventDimId,inventDim,inventDimParent,_inventDimTrackingNode.parmInventDimParm())
                {
                    if (!inventTransParent.ReturnInventTransOrigin || inventTransParent.ReturnInventTransOrigin != inventTrans.InventTransOrigin)
                    {
                        if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                        {
                            this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                        }
                    }
                }
                break;
            case InventTransType::QuarantineOrder:
                if (inventDim.inventLocation().InventLocationType == InventLocationType::Quarantine)
                {
                    while select inventTransOrigin
                        where inventTransOrigin.ItemId              == inventTransParent.ItemId
                          &&  inventTransOrigin.ReferenceCategory   == InventTransType::QuarantineOrder
                          &&  inventTransOrigin.ReferenceId         == inventTransOriginParent.ReferenceId
                        join inventTrans
                        where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                          &&  inventTrans.Qty       <  0
                        #inventDimJoin(inventTrans.inventDimId,inventDim,inventDimParent,_inventDimTrackingNode.parmInventDimParm())
                    {
                        if (!inventTransParent.ReturnInventTransOrigin || inventTransParent.ReturnInventTransOrigin != inventTrans.InventTransOrigin)
                        {
                            if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                            {
                                this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                            }
                        }
                    }
                }
                else
                {
                    while select inventTransOrigin
                        where inventTransOrigin.ItemId              == inventTransParent.ItemId
                        join inventTrans
                        where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                          &&  inventTrans.Qty                        <  0
                        #inventDimJoin(inventTrans.inventDimId,inventDim,inventDimParent, _inventDimTrackingNode.parmInventDimParm())
                    {
                        if (!inventTransParent.ReturnInventTransOrigin || inventTransParent.ReturnInventTransOrigin != inventTrans.InventTransOrigin)
                        {
                            if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                            {
                                this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                            }
                        }
                    }
                }
                break;
            case InventTransType::KanbanJobTransferIssue:
                while select inventTransOrigin
                    where inventTransOrigin.ItemId              == inventTransParent.ItemId
                      &&  inventTransOrigin.ReferenceCategory   == InventTransType::KanbanJobTransferReceipt
                      &&  inventTransOrigin.ReferenceId         == inventTransOriginParent.ReferenceId
                    join inventTrans
                    where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                      &&  inventTrans.Qty                        <  0
                #inventDimJoin(inventTrans.inventDimId,inventDim,inventDimParent,_inventDimTrackingNode.parmInventDimParm())
                {
                    if (!inventTransParent.ReturnInventTransOrigin || inventTransParent.ReturnInventTransOrigin != inventTrans.InventTransOrigin)
                    {
                        if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                        {
                            this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                        }
                    }
                }
                break;

            case InventTransType::Purch:
                if (InventTransOriginOwnershipChangeJournalTransPurchLineLink::existByPurchaseOrderLineOriginId(inventTransOriginParent.RecId))
                {
                    this.expandNodeBackwardForwardReceiptOwnershipChangeJournal(_inventTransList, _inventDimTrackingNode, inventTransParent, inventTransOriginParent);
                }
                else
                {
                    this.expandNodeForwardReceiptDefault(_inventTransList, _inventDimTrackingNode, inventTransParent, inventDimParent);
                }
                break;

            default:
                this.expandNodeForwardReceiptDefault(_inventTransList, _inventDimTrackingNode, inventTransParent, inventDimParent);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNodeServerProxy</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Communicates with the server bound instance of the <c>InventDimTracking</c> class
    /// </summary>
    /// <param name="_inventTransList">
    ///    The reference on the <c>SysRecordSortedList</c>. The server bound <c>InventDimTracking</c> class
    ///    performs a search of related transactions for current node and updates this list with the result
    ///    transactions
    /// </param>
    /// <param name="_inventDimTrackingNode">
    ///    The reference on the current node in the tree.
    /// </param>
    protected void expandNodeServerProxy(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode)
    {
        Counter counter = this.parmWarnCount();
        int infoLine = infologLine();

        try
        {
            // the method creates a server bound instance of InventDimTracking class;
            // unpack all need data to find all related transactions for curent node;
            // return result container [InventTransList]
            container resultContainer = InventDimTracking::expandNodeSearchOnServer(this.parmWarnCount(),_inventDimTrackingNode.pack(),nodeInfoMap.pack());
            
            if (conLen(resultContainer)== 2)
            {
                // Unpack result InventTransList
                container inventTransListPacked = conPeek(resultContainer, 1);
                // Update inventTransList with find transactions
                _inventTransList.unpack(inventTransListPacked);
                container inventTransOriginMapPacked = conPeek(resultContainer, 2);
                this.mergeInventTransOriginMap(inventTransOriginMapPacked);
            }
        }
        catch (Exception::Error)
        {
            infolog.clear(infoLine);

            // Run Retry User popup dialog
            if (Box::yesNo(strFmt("@SYS65197",this.parmWarnCount())
                    + '\n\n' + "@SYS60031",DialogButton::Yes) == DialogButton::Yes)
            {
                // increase warning transactions amount for current search
                counter = counter *10;
                this.parmWarnCount(counter);

                retry;
            }
            else    // the calculation transactions amount has reached pre default amount!
            {
                throw error("@SYS70800");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBatchIssues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the batch issues for lot tracking.
    /// </summary>
    /// <param name="_inventTransList">
    /// A sorted list of the <c>InventTrans</c> records.
    /// </param>
    /// <param name="_inventDimTrackingNode">
    /// An <c>InventDimTracking</c> node to which the batch receipts belong.
    /// </param>
    protected void findBatchIssues(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode)
    {
        InventTrans             inventTransParent   = _inventDimTrackingNode.parmInventTrans();
        InventTransOrigin       inventTransOriginParent = _inventDimTrackingNode.parmInventTransOrigin();
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        ProdBOM                 prodBOM;
        PmfProdCoBy             prodCoBy;

        while select TableId from prodBOM
            where prodBOM.ProdId    == inventTransOriginParent.ReferenceId
            join inventTransOrigin
                where inventTransOrigin.InventTransId   == prodBOM.InventTransId
            join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
        {
            if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
            {
                this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
            }
        }

        while select TableId from prodCoBy
            where prodCoBy.ProdId == inventTransOriginParent.ReferenceId
            join inventTransOrigin
                where inventTransOrigin.InventTransId   == prodCoBy.InventTransId
            join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
        {
            if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
            {
                this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBatchReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the batch receipts for lot tracking.
    /// </summary>
    /// <param name="_inventTransList">A <c>SysRecordSortList</c> list of transactions.</param>
    /// <param name="_inventDimTrackingNode">A <c>InventDimTracking</c> tracking node.</param>
    protected void findBatchReceipts(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode)
    {
        InventTrans             inventTransParent   = _inventDimTrackingNode.parmInventTrans();
        InventTransOrigin       inventTransOriginParent = _inventDimTrackingNode.parmInventTransOrigin();
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        ProdBOM                 prodBOM;
        PmfProdCoBy             prodCoBy;

        while select TableId from prodBOM
            where prodBOM.ProdId    == inventTransOriginParent.ReferenceId
            join inventTransOrigin
                where inventTransOrigin.InventTransId   == prodBOM.InventTransId
            join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                &&    inventTrans.StatusIssue       == StatusIssue::None
                &&    inventTrans.Qty                >  0
        {
            if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
            {
                this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
            }
        }

        while select TableId from prodCoBy
            where prodCoBy.ProdId == inventTransOriginParent.ReferenceId
            join inventTransOrigin
                where inventTransOrigin.InventTransId   == prodCoBy.InventTransId
            join inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                &&    inventTrans.StatusIssue       == StatusIssue::None
                &&    inventTrans.Qty                >  0
        {
            if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
            {
                this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBOMLines</Name>
				<Source><![CDATA[
    protected void findBOMLines(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode)
    {
        InventTrans             inventTransParent       = _inventDimTrackingNode.parmInventTrans();
        InventTransOrigin       inventTransOriginParent = _inventDimTrackingNode.parmInventTransOrigin();
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventJournalTrans      inventJournalTrans;
        InventTransPosting      inventTransPosting;

        if ((inventTransParent.Qty > 0 && inventTransParent.StatusReceipt == StatusReceipt::Purchased)  ||
            (inventTransParent.Qty < 0 && inventTransParent.StatusIssue   == StatusIssue::Sold))
        {
            while select TableId from inventTransPosting
                where inventTransPosting.TransDate              == inventTransParent.DateFinancial
                   && inventTransPosting.Voucher                == inventTransParent.Voucher
                   && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
                join inventTrans
                    where inventTrans.Voucher                   == inventTransParent.Voucher
                       && inventTrans.DateFinancial             == inventTransParent.DateFinancial
                       && inventTrans.InventTransOrigin         == inventTransPosting.InventTransOrigin
                join inventTransOrigin
                    where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
            {
                if (inventTransParent.Qty * inventTrans.Qty < 0         &&
                    this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                {
                    this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                }
            }
        }
        else
        {
            while select TableId from inventJournalTrans
                where inventJournalTrans.JournalId          == inventTransOriginParent.ReferenceId
                join inventTransOrigin
                    where inventTransOrigin.InventTransId   == inventJournalTrans.InventTransId
                join inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                       && inventTrans.StatusReceipt         != StatusReceipt::Purchased
                       && inventTrans.StatusIssue           != StatusIssue::Sold
                       && inventTrans.RecId                 != inventTransParent.RecId
            {
                if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                {
                    this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findKanbanJobPickingList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds and adds the kanban job picking list transactions related to the parent transaction to the
    ///    transaction list.
    /// </summary>
    /// <param name="_inventTransList">
    ///    The <c>SysRecordSortedList</c> object to insert into.
    /// </param>
    /// <param name="_inventDimTrackingNode">
    ///    A <c>InventDimTrackingNode</c> object.
    /// </param>
    /// <remarks>
    ///    A kanban job picking list record is related to the parent transaction, if the
    ///    <c>KanbanJobPickingList.Job</c> field represents the origin of the parent transaction.
    /// </remarks>
    protected void findKanbanJobPickingList(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode)
    {
        InventTrans                             inventTransParent       = _inventDimTrackingNode.parmInventTrans();
        InventTransOrigin                       inventTransOriginParent = _inventDimTrackingNode.parmInventTransOrigin();
        InventTransOrigin                       inventTransOrigin;
        InventTrans                             inventTrans;
        KanbanJobPickingList                    kanbanJobPickingList;
        KanbanJob                               kanbanJob;

        while select TableId from kanbanJob
            where kanbanJob.InventTransId                                 == inventTransOriginParent.InventTransId
            join TableId from kanbanJobPickingList
                where kanbanJobPickingList.Job                            == kanbanJob.RecId
            join inventTransOrigin
                where inventTransOrigin.InventTransId                     == kanbanJobPickingList.InventTransId
            join inventTrans
                where inventTrans.InventTransOrigin                       == inventTransOrigin.RecId
        {
            if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
            {
                this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProdLines</Name>
				<Source><![CDATA[
    protected void findProdLines(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode)
    {
        InventTrans             inventTransParent       = _inventDimTrackingNode.parmInventTrans();
        InventTransOrigin       inventTransOriginParent = _inventDimTrackingNode.parmInventTransOrigin();
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        ProdBOM                 prodBOM;

        PmfProdCoBy             prodCoBy;

        InventTransPosting      inventTransPosting;
        ProdTable               prodTable;

        if ((inventTransParent.Qty > 0 && inventTransParent.StatusReceipt == StatusReceipt::Purchased)  ||
            (inventTransParent.Qty < 0 && inventTransParent.StatusIssue   == StatusIssue::Sold))
        {
            if (inventTransParent.ProjId)
            {
                select firstOnly prodTable
                    where prodTable.ProjId == inventTransParent.ProjId
                    join inventTransOrigin
                        where inventTransOrigin.RecId           == inventTransParent.InventTransOrigin
                            && inventTransOrigin.InventTransId  == prodTable.InventTransId;
            }

            if (prodTable && prodTable.isProjMethodConsumed())
            {
                while select TableId from inventTransPosting
                    where inventTransPosting.TransDate              == inventTransParent.DateFinancial
                            &&  inventTransPosting.ProjId                   == inventTransParent.ProjId
                            &&  inventTransPosting.InventTransPostingType   == InventTransPostingType::Financial
                        join inventTrans
                            where inventTrans.DateFinancial                 == inventTransParent.DateFinancial
                                &&  inventTrans.InventTransOrigin           == inventTransPosting.InventTransOrigin
                                &&  inventTrans.ProjId                      == inventTransParent.ProjId
                        join inventTransOrigin
                            where inventTransOrigin.RecId                   == inventTrans.InventTransOrigin
                        join prodBOM
                            where prodBOM.ProdId                            == inventTransOriginParent.ReferenceId
                                && prodBOM.InventTransId                    == inventTransOrigin.InventTransId
                {
                    if ((inventTransParent.Qty * inventTrans.Qty < 0 ||
                                (inventTransOrigin.ReferenceCategory == InventTransType::PmfProdCoBy && InventTable::find(inventTrans.ItemId).isCoProduct()))
                            && this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                    {
                        this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                    }
                }
            }
            else
            {
                while select TableId from inventTransPosting
                    where inventTransPosting.TransDate              == inventTransParent.DateFinancial
                  &&  inventTransPosting.Voucher                == inventTransParent.Voucher
                  &&  inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
                join inventTrans
                    where inventTrans.Voucher                   == inventTransParent.Voucher
                      &&  inventTrans.DateFinancial             == inventTransParent.DateFinancial
                      &&  inventTrans.InventTransOrigin         == inventTransPosting.InventTransOrigin
                join inventTransOrigin
                    where inventTransOrigin.RecId               == inventTrans.InventTransOrigin
                {
                    if ((inventTransParent.Qty * inventTrans.Qty < 0 ||
                         (inventTransOrigin.ReferenceCategory == InventTransType::PmfProdCoBy && InventTable::find(inventTrans.ItemId).isCoProduct()))
                        && this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                    {
                        this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                    }
                }
            }
        }
        else
        {
            while select TableId from prodBOM
                where prodBOM.ProdId    == inventTransOriginParent.ReferenceId
                join inventTransOrigin
                    where inventTransOrigin.InventTransId   == prodBOM.InventTransId
                join inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                        && inventTrans.StatusReceipt != StatusReceipt::Purchased
                        && inventTrans.StatusIssue != StatusIssue::Sold
            {
                if (#PmfEnabled
                    && inventTrans.direction() != InventDirection::Issue)
                {
                    continue;
                }

                if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                {
                    this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                }
            }

            while select TableId from prodCoBy
                where prodCoBy.ProdId == inventTransOriginParent.ReferenceId
                join inventTransOrigin
                    where inventTransOrigin.InventTransId   == prodCoBy.InventTransId
                join inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                      &&  inventTrans.StatusReceipt         != StatusReceipt::Purchased
                      &&  inventTrans.StatusIssue           != StatusIssue::Sold
            {
                if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
                {
                    this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransIssues</Name>
				<Source><![CDATA[
    protected void findTransIssues(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode,
        InventTransOriginId     _inventTransOriginId,
        Voucher                 _voucher)
    {
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;

        while select inventTransOrigin
            where inventTransOrigin.RecId       == _inventTransOriginId
            join inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
              &&  inventTrans.StatusReceipt     == StatusReceipt::None
              &&  inventTrans.Qty                <  0
              && (inventTrans.Voucher           == _voucher || !_voucher)
        {
            if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
            {
                this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransReceipts</Name>
				<Source><![CDATA[
    protected void findTransReceipts(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode,
        InventTransOriginId     _inventTransOriginId,
        Voucher                 _voucher)
    {
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;

        while select inventTransOrigin
            where inventTransOrigin.RecId       == _inventTransOriginId
            join inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
              &&  inventTrans.StatusIssue       == StatusIssue::None
              &&  inventTrans.Qty                >  0
              && (inventTrans.Voucher           == _voucher  || !_voucher)
        {
            if (this.isTransChild(_inventDimTrackingNode, inventTrans, inventTransOrigin))
            {
                this.addInventTrans2List(_inventTransList, inventTrans, inventTransOrigin);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTransTransferReceipts</Name>
				<Source><![CDATA[
    protected void findTransTransferReceipts(
        SysRecordSortedList     _inventTransList,
        InventDimTrackingNode   _inventDimTrackingNode,
        InventTrans             _inventTransParent,
        InventTransOrigin       _inventTransOriginParent,
        Voucher                 _voucher)
    {
        InventDim               inventDimParent             = _inventTransParent.inventDim();
        InventTransOrigin       transferInventTransOrigin   = _inventTransParent.transferInventTransOrigin();
        InventTrans             inventTrans;
        InventDim               inventDim;
        InventDimParm           inventDimParmNonLocation;

        //  transfer journal can be transfered between different dimentions
        if (_inventTransOriginParent.ReferenceCategory != InventTransType::InventTransfer)
        {
            inventDimParmNonLocation.initFromInventDim(inventDimParent);
            inventDimParmNonLocation.InventSiteIdFlag       = NoYes::No;
            inventDimParmNonLocation.InventLocationIdFlag   = NoYes::No;
            inventDimParmNonLocation.wmsLocationIdFlag      = NoYes::No;
        }
        select sum(Qty) from inventTrans
            where inventTrans.InventTransOrigin     == transferInventTransOrigin.RecId
              && (inventTrans.Voucher               == _voucher   || !_voucher)
            #InventDimJoin(inventTrans.inventDimId, inventDim, inventDimParent, inventDimParmNonLocation);

        if (inventTrans.Qty == 0)
        {
            while select inventTrans
                where inventTrans.InventTransOrigin == transferInventTransOrigin.RecId
                  &&  inventTrans.StatusIssue       == StatusIssue::None
                  &&  inventTrans.Qty               >  0
                  && (inventTrans.Voucher           == _voucher  || !_voucher)
                #InventDimJoin(inventTrans.inventDimId, inventDim, inventDimParent, inventDimParmNonLocation)
            {
                if (this.isTransChild(_inventDimTrackingNode, inventTrans, transferInventTransOrigin))
                {
                    this.addInventTrans2List(_inventTransList, inventTrans, transferInventTransOrigin);
                }
            }
        }
        else
        {
            while select inventTrans
                where inventTrans.InventTransOrigin == transferInventTransOrigin.RecId
                  &&  inventTrans.StatusIssue       == StatusIssue::None
                  &&  inventTrans.Qty               >  0
                  && (inventTrans.Voucher           == _voucher  || !_voucher)
            {
                if (this.isTransChild(_inventDimTrackingNode, inventTrans, transferInventTransOrigin))
                {
                    this.addInventTrans2List(_inventTransList, inventTrans, transferInventTransOrigin);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret     = super();

        doDateChecking  = dialogDateChecking.value();
        onlyWithDate    = dialogOnlyWithDate.value();

        inventDimParm.getFromDialog(dialog,dialogInventDimParmTracking);
        inventDimParm.ItemIdFlag    = NoYes::Yes;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    protected void initFromArgs(Args _args)
    {
        // <GEERU>
        // </GEERU>

        if (!_args || !_args.dataset())
        {
            return;
        }

        Query query = initialQueryRun.query();
        QueryBuildDataSource queryBuildDataSourceOrigin = query.dataSourceTable(tableNum(InventTransOrigin));
        if (!queryBuildDataSourceOrigin)
        {
            queryBuildDataSourceOrigin = query.addDataSource(tableNum(InventTransOrigin));
        }

        queryBuildDataSourceOrigin.clearRanges();
        QueryBuildRange queryBuildRangeItemId = queryBuildDataSourceOrigin.addRange(fieldNum(InventTransOrigin, ItemId));

        QueryBuildDataSource queryBuildDataSourceTrans = query.dataSourceTable(tableNum(InventTrans));
        if (!queryBuildDataSourceTrans)
        {
            queryBuildDataSourceTrans = queryBuildDataSourceOrigin.addDataSource(tableNum(InventTrans));
            queryBuildDataSourceTrans.joinMode(JoinMode::InnerJoin);
            queryBuildDataSourceTrans.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTrans, InventTransOrigin));
        }

        queryBuildDataSourceTrans.clearRanges();

        QueryBuildDataSource queryBuildDataSourceDim = query.dataSourceTable(tableNum(InventDim));
        if (!queryBuildDataSourceDim)
        {
            queryBuildDataSourceDim = queryBuildDataSourceTrans.addDataSource(tableNum(InventDim));
            queryBuildDataSourceDim.addLink(fieldNum(InventTrans, InventDimId), fieldNum(InventDim, InventDimId));
        }
        queryBuildDataSourceDim.joinMode(JoinMode::ExistsJoin);

        queryBuildDataSourceDim.clearRanges();

        switch (_args.dataset())
        {
            case tableNum(InventSum):
                InventSum inventSum = _args.record() as InventSum;
                queryBuildRangeItemId.value(queryValue(inventSum.ItemId));
                InventDim inventDim = Global::getJoinChildFormDataSource(FormDataUtil::getFormDataSource(_args.record()), tableNum(InventDim)).cursor() as InventDim;
                if (inventDim.InventBatchId)
                {
                    queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventBatchId)).value(queryValue(inventDim.InventBatchId));
                }
                if (inventDim.InventSerialId)
                {
                    queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventSerialId)).value(queryValue(inventDim.InventSerialId));
                }
                break;
            case tableNum(InventBatch):
                InventBatch inventBatch = _args.record() as InventBatch;
                queryBuildRangeItemId.value(queryValue(inventBatch.ItemId));
                queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventBatchId)).value(queryValue(inventBatch.InventBatchId));
                break;
            case tableNum(InventSerial):
                InventSerial inventSerial = _args.record() as InventSerial;
                queryBuildRangeItemId.value(queryValue(inventSerial.ItemId));
                queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventSerialId)).value(queryValue(inventSerial.InventSerialId));
                break;
            // <GEERU>
            case tableNum(InventGTD_RU):
                InventGTD_RU inventGTD = _args.record() as InventGTD_RU;
                queryBuildRangeItemId.value(queryValue(inventGTD.ItemId));
                queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventGtdId_RU)).value(queryValue(inventGTD.InventGTDId));
                break;
            case tableNum(InventProfile_RU):
                InventProfile_RU inventProfile = _args.record() as InventProfile_RU;
                queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventProfileId_RU)).value(queryValue(inventProfile.InventProfileId));
                break;
            case tableNum(InventOwner_RU):
                InventOwner_RU inventOwner = _args.record() as InventOwner_RU;
                queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventOwnerId_RU)).value(queryValue(inventOwner.InventOwnerId));
                break;
            // </GEERU>
            case tableNum(InventLocation):
                InventLocation inventLocation = _args.record() as InventLocation;
                queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventLocationId)).value(queryValue(inventLocation.InventLocationId));
                break;
            case tableNum(InventSite):
                InventSite inventSite = _args.record() as InventSite;
                queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventSiteId)).value(queryValue(inventSite.SiteId));
                break;
            case tableNum(InventTrans):
                callerInventTrans                   = _args.record() as InventTrans;
                break;
            case tableNum(WMSLocation):
                WMSLocation wmsLocation = _args.record() as WMSLocation;
                queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventLocationId)).value(queryValue(wmsLocation.InventLocationId));
                queryBuildDataSourceDim.addRange(fieldNum(InventDim, wmsLocationId)).value(queryValue(wmsLocation.wmsLocationId));
                break;
            case tableNum(WHSInventTransAndWarehouseTransactionView):
                callerWarehouseTransaction = _args.record() as WHSInventTransAndWarehouseTransactionView;
                break;
            default:
                InventMovement inventMovement = InventMovement::constructFromArgs(_args);
                if (inventMovement)
                {
                    queryBuildRangeItemId.value(queryValue(inventMovement.itemId()));
                    queryBuildDataSourceOrigin.addRange(fieldNum(InventTransOrigin, RecId)).value(queryValue(inventMovement.inventTransOriginId()));
                }
                break;
        }

        initialQueryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransList</Name>
				<Source><![CDATA[
    protected SysRecordSortedList initInventTransList()
    {
        SysRecordSortedList     inventTransList = new SysRecordSortedList(tableNum(InventTrans));

        inventTransList.sortOrder(  fieldNum(InventTrans, ItemId),
                                    fieldNum(InventTrans, DatePhysical),
                                    fieldNum(InventTrans, InventTransOrigin),
                                    fieldNum(InventTrans, RecId));
        return inventTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventoryTransactionList</Name>
				<Source><![CDATA[
    private SysRecordSortedList initInventoryTransactionList()
    {
        // The list can contain both InventTrans and warehouse-specific inventory transactions (WHSInventoryTransaction joined with WHSInventoryItemSetElement or the corresponding archived data).
        SysRecordSortedList inventTrackingTransactionList = new SysRecordSortedList(tableNum(InventTrackingTransactionInMemoryTable));

        inventTrackingTransactionList.sortOrder(fieldNum(InventTrackingTransactionInMemoryTable, ItemId));
        inventTrackingTransactionList.sortOrder(fieldNum(InventTrackingTransactionInMemoryTable, DatePhysical));
        inventTrackingTransactionList.sortOrder(fieldNum(InventTrackingTransactionInMemoryTable, InventTransOrigin));
        inventTrackingTransactionList.sortOrder(fieldNum(InventTrackingTransactionInMemoryTable, UniqueKey));

        return inventTrackingTransactionList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        Query                   query                       = new Query();
        QueryBuildDataSource    queryBuildDataSourceOrigin  = query.addDataSource(tableNum(InventTransOrigin));
        QueryBuildDataSource    queryBuildDataSourceTrans   = queryBuildDataSourceOrigin.addDataSource(tableNum(InventTrans));
        QueryBuildDataSource    queryBuildDataSourceDim     = queryBuildDataSourceTrans.addDataSource(tableNum(InventDim));
        List                    dimFields                   = InventDim::dimProductDimFieldList();
        ListEnumerator          enumerator                  = dimFields ? dimFields.getEnumerator() : null;

        showItemId          = NoYes::Yes;
        showQty             = NoYes::Yes;
        showTransType       = NoYes::Yes;
        showRefId           = NoYes::Yes;
        showDatePhysical    = NoYes::Yes;

        inventDimParm.setAllInventDim();

        queryBuildDataSourceTrans.joinMode(JoinMode::InnerJoin);
        queryBuildDataSourceTrans.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTrans, InventTransOrigin));

        queryBuildDataSourceOrigin.addRange(fieldNum(InventTransOrigin, ItemId));

        queryBuildDataSourceDim.joinMode(JoinMode::InnerJoin);

        queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventSiteId));
        queryBuildDataSourceDim.addRange(fieldNum(InventDim, InventLocationId));
        if (enumerator)
        {
            while (enumerator.moveNext())
            {
                FieldId inventDimFieldId = enumerator.current();
                queryBuildDataSourceDim.addRange(inventDimFieldId);
            }
        }

        queryBuildDataSourceDim.addLink(fieldNum(InventTrans, InventDimId), fieldNum(InventDim, InventDimId));

        initialQueryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransDate</Name>
				<Source><![CDATA[
    protected date inventTransDate(InventTrans _inventTrans)
    {
        if (_inventTrans.DateInvent)
        {
            return _inventTrans.DateInvent;
        }

        if (_inventTrans.DatePhysical)
        {
            return _inventTrans.DatePhysical;
        }

        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOrigin</Name>
				<Source><![CDATA[
    protected InventTransOrigin inventTransOrigin(InventTransOriginId _inventTransOriginId)
    {
        InventTransOrigin   inventTransOrigin;

        if (!_inventTransOriginId)
        {
            return inventTransOrigin;
        }

        if (inventTransOriginMap.exists(_inventTransOriginId))
        {
            return inventTransOriginMap.lookup(_inventTransOriginId);
        }

        inventTransOrigin = InventTransOrigin::find(_inventTransOriginId);
        inventTransOriginMap.insert(_inventTransOriginId, inventTransOrigin);

        return inventTransOrigin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginMap</Name>
				<Source><![CDATA[
    protected Map inventTransOriginMap()
    {
        return inventTransOriginMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInParentPath</Name>
				<Source><![CDATA[
    private boolean isInParentPath(
        InventTrans     _inventTrans,
        TreeItemIdx     _nodeId)
    {
        if (!_nodeId)
        {
            return false;
        }

        InventDimTrackingNode inventDimTrackingNodeParent = nodeInfoMap.lookup(_nodeId);
        if (inventDimTrackingNodeParent.parmInventTrans() && inventDimTrackingNodeParent.parmInventTrans().RecId == _inventTrans.RecId)
        {
            return true;
        }

        return this.isInParentPath(_inventTrans, inventDimTrackingNodeParent.parmParentNodeIdx());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransChild</Name>
				<Source><![CDATA[
    protected boolean isTransChild(
        InventDimTrackingNode   _inventDimTrackingNode,
        InventTrans             _inventTrans,
        InventTransOrigin       _inventTransOrigin)
    {
        if (this.isInParentPath(_inventTrans, _inventDimTrackingNode.parmNodeIdx()))
        {
            return false;
        }

        if (onlyWithDate && !this.inventTransDate(_inventTrans))
        {
            return false;
        }

        return this.checkTransOriginIds(_inventDimTrackingNode, _inventTrans, _inventTransOrigin)
            && this.checkDateOrder(_inventDimTrackingNode, _inventTrans)
            && this.checkQuarantineOrder(_inventDimTrackingNode, _inventTrans, _inventTransOrigin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTxt</Name>
				<Source><![CDATA[
    protected str lineTxt(
        InventTrans _inventTrans,
        InventTransOrigin _inventTransOrigin,
        NoYes _explanation = NoYes::No,
        ForwardBackward _forwardBackward = ForwardBackward::Forward)
    {
        date inventTransDate = this.inventTransDate(_inventTrans);

        return this.buildLineTxt(
            _inventTransOrigin.ReferenceCategory,
            _inventTrans.Qty,
            _inventTrans.costValue(),
            inventTransDate,
            _inventTrans.ItemId,
            _inventTrans.inventTable().defaultProductName(),
            _inventTransOrigin.ReferenceId,
            _inventTrans.inventDim().preFix(),
            _explanation,
            _forwardBackward);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTxtFromWHSInventoryTransaction</Name>
				<Source><![CDATA[
    private str lineTxtFromWHSInventoryTransaction(
        WHSInventoryTransactionView _inventoryTransaction,
        ForwardBackward _forwardBackward = ForwardBackward::Forward)
    {
        var explanation = NoYes::No;

        return this.buildLineTxt(
            _inventoryTransaction.InventoryReferenceCategory,
            _inventoryTransaction.InventoryQuantity,
            0,
            _inventoryTransaction.TransDate,
            _inventoryTransaction.ItemId,
            _inventoryTransaction.inventTable().defaultProductName(),
            _inventoryTransaction.ReferenceId,
            _inventoryTransaction.preFix(),
            explanation,
            _forwardBackward);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildLineTxt</Name>
				<Source><![CDATA[
    private str buildLineTxt(
        InventTransType _referenceCategory,
        InventQty _qty,
        CostAmountValue _costValue,
        date _transDate,
        ItemId _itemId = null,
        EcoResProductName _defaultProductName = null,
        InventTransRefId _referenceId = null,
        str _inventDimPrefix = null,
        NoYes _explanation = NoYes::No,
        ForwardBackward _forwardBackward = ForwardBackward::Forward)
    {
        str lineTxt;

        void addFieldBreak()
        {
            lineTxt += ' / ';
        }

        if (!_explanation)
        {
            if (_forwardBackward == ForwardBackward::Backward)
            {
                lineTxt += (currentSessionLanguageRTL() ? rightArrowSymbol : leftArrowSymbol);
            }
            else
            {
                lineTxt += (currentSessionLanguageRTL() ? leftArrowSymbol : rightArrowSymbol);
            }
            lineTxt += ' ';
        }

        if (showItemId)
        {
            if (_explanation)
            {
                lineTxt += "@SYS12836";
            }
            else
            {
                lineTxt += (_itemId ? _itemId : '--');
            }
            addFieldBreak();
        }

        if (showItemName)
        {
            if (_explanation)
            {
                lineTxt += "@SYS7399";
            }
            else
            {
                str txt = _defaultProductName;
                lineTxt += (txt ? txt : '--');
            }
            addFieldBreak();
        }

        if (showDatePhysical)
        {
            if (_explanation)
            {
                lineTxt += "@SYS22321";
            }
            else
            {
                lineTxt += (_transDate ? date2StrUsr(_transDate, DateFlags::FormatAll) : '--');
            }
            addFieldBreak();
        }

        if (showTransType)
        {
            if (_explanation)
            {
                lineTxt += "@SYS15217";
            }
            else
            {
                lineTxt += enum2str(_referenceCategory);
            }
            addFieldBreak();
        }

        if (showRefId)
        {
            if (_explanation)
            {
                lineTxt += "@SYS13864";
            }
            else
            {
                lineTxt += (_referenceId ? _referenceId : '--');
            }
            addFieldBreak();
        }

        if (showQty)
        {
            if (_explanation)
            {
                lineTxt += "@SYS14578";
            }
            else
            {
                lineTxt += (_qty ? num2str(_qty,0,2,1,2) : '--');
            }
            addFieldBreak();
        }

        if (showValue)
        {
            if (_explanation)
            {
                lineTxt += "@SYS3058";
            }
            else
            {
                lineTxt += (_costValue ? num2str(_costValue,0,2,1,2) : '--');
            }
            addFieldBreak();
        }

        if (_explanation)
        {
            lineTxt += "@SYS53627";
        }
        else
        {
            lineTxt += _inventDimPrefix;
        }
        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAsNotExpanded</Name>
				<Source><![CDATA[
    protected void markAsNotExpanded(TreeItemIdx _nodeId)
    {
        if (!_nodeId)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        InventDimTrackingNode inventDimTrackingNode = nodeInfoMap.lookup(_nodeId);
        inventDimTrackingNode.parmStateExpanded(false);
        FormTreeItem treeItem = tree.getItem(_nodeId);
        treeItem.stateExpanded(false);

        this.redrawTreeNode(_nodeId);

        tree.expand(_nodeId,FormTreeExpand::Collapse);
        this.deleteSubNodes(_nodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeInventTransOriginMap</Name>
				<Source><![CDATA[
    protected void mergeInventTransOriginMap(container _packedMap)
    {
        Map                 newMap                  = Map::create(_packedMap);
        MapEnumerator       enumerator              = newMap.getEnumerator();

        while (enumerator.moveNext())
        {
            InventTransOriginId inventTransOriginId = enumerator.currentKey();
            if (!inventTransOriginMap.exists(inventTransOriginId))
            {
                inventTransOriginMap.insert(inventTransOriginId, enumerator.currentValue());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        inventTransOriginMap    = new Map(Types::Int64, Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openInventTransForm</Name>
				<Source><![CDATA[
    public void openInventTransForm(TreeItemIdx _nodeId)
    {
        if (!_nodeId)
        {
            this.runEmptyInventTransForm();
            return;
        }
        
        InventTrans inventTrans = nodeInfoMap.lookup(_nodeId).parmInventTrans();
        if (inventTrans)
        {
            this.openInvenTrans(inventTrans);
            return;
        }

        WHSInventoryTransactionView inventoryTransactionView = nodeInfoMap.lookup(_nodeId).parmInventoryTransaction();
        if (inventoryTransactionView)
        {
            this.openWHSInventoryTransaction(inventoryTransactionView);
            return;
        }
        
        this.runEmptyInventTransForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransForm</Name>
				<Source><![CDATA[
    private FormRun initInventTransForm()
    {
        Args args = new Args();
        args.name(formStr(InventTrans));
        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runEmptyInventTransForm</Name>
				<Source><![CDATA[
    private void runEmptyInventTransForm()
    {
        FormRun formRun = this.initInventTransForm();
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openInvenTrans</Name>
				<Source><![CDATA[
    private void openInvenTrans(InventTrans _inventTrans)
    {
        FormRun formRun = this.initInventTransForm();
        FormDataSource formDataSource = formRun.objectSet();
        while (formDataSource.joinSourceDataSource())
        {
            formDataSource = formDataSource.joinSourceDataSource();
        }
        Query query = formDataSource.query();
        QueryBuildDataSource queryBuildDataSource = query.dataSourceTable(tableNum(InventTrans));
        queryBuildDataSource.addRange(fieldNum(InventTrans, RecId)).value(queryValue(_inventTrans.RecId));
        formDataSource.query(query);

        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openWHSInventoryTransaction</Name>
				<Source><![CDATA[
    private void openWHSInventoryTransaction(WHSInventoryTransactionView _inventoryTransactionView)
    {
        Args args = new Args();
        args.record(_inventoryTransactionView);
        new MenuFunction(menuitemDisplayStr(WHSWarehouseTransactions), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSettlementForm</Name>
				<Source><![CDATA[
    public void openSettlementForm(TreeItemIdx _nodeId)
    {
        Args                    args = new Args();

        if (!_nodeId)
        {
            return;
        }

        InventTrans inventTrans = nodeInfoMap.lookup(_nodeId).parmInventTrans();

        args.name(formStr(InventSettlementRecord));
        args.caller(this);
        args.record(inventTrans);
        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSettlementTreeForm</Name>
				<Source><![CDATA[
    public void openSettlementTreeForm(TreeItemIdx _nodeId)
    {
        Args                    args = new Args();

        if (!_nodeId)
        {
            return;
        }

        InventTrans inventTrans = nodeInfoMap.lookup(_nodeId).parmInventTrans();

        args.name(formStr(InventSettlementTree));
        args.caller(this);
        args.record(inventTrans);
        FormRun formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList] + [[initialQueryRun.pack()] + [inventDimParm]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoDateCheckingCtrl</Name>
				<Source><![CDATA[
    public FormCheckBoxControl parmDoDateCheckingCtrl(FormCheckBoxControl _doDateCheckingCtrl = doDateCheckingCtrl)
    {
        doDateCheckingCtrl = _doDateCheckingCtrl;
        return doDateCheckingCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormatStrCtrl</Name>
				<Source><![CDATA[
    public FormStringControl parmFormatStrCtrl(FormStringControl _formatStrCtrl = formatStrCtrl)
    {
        if (formatStrCtrl != _formatStrCtrl)
        {
            formatStrCtrl = _formatStrCtrl;
            if (formatStrCtrl)
            {
                formatStrCtrl.text(this.lineTxt(null, null, NoYes::Yes));
            }
        }
        return formatStrCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForwardBackwardCtrl</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmForwardBackwardCtrl(FormComboBoxControl _forwardBackwardCtrl = forwardBackwardCtrl)
    {
        forwardBackwardCtrl = _forwardBackwardCtrl;
        return forwardBackwardCtrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParmLine</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParmLine(InventDimParm _inventDimParmLine = inventDimParmLine)
    {
        inventDimParmLine = _inventDimParmLine;
        return inventDimParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNodeInfoMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>NodeInfoMap</c> parameter.
    /// </summary>
    /// <param name="_nodeInfoMap">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>NodeInfoMap</c> parameter.
    /// </returns>
    public Map parmNodeInfoMap(Map _nodeInfoMap = nodeInfoMap)
    {
        nodeInfoMap = _nodeInfoMap;
        return nodeInfoMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>RecCount</c> parameter.
    /// </summary>
    /// <param name="_recCount">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>RecCount</c> parameter.
    /// </returns>
    public Counter parmRecCount(Counter _recCount = recCount)
    {
        recCount = _recCount;
        return recCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDatePhysical</Name>
				<Source><![CDATA[
    public NoYes parmShowDatePhysical(NoYes _showDatePhysical = showDatePhysical)
    {
        if (showDatePhysical != _showDatePhysical)
        {
            showDatePhysical = _showDatePhysical;
            reDrawTree = true;
            this.saveLast();
        }
        return showDatePhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowItemId</Name>
				<Source><![CDATA[
    public NoYes parmShowItemId(NoYes _showItemId = showItemId)
    {
        if (showItemId != _showItemId)
        {
            showItemId = _showItemId;
            reDrawTree = true;
            this.saveLast();
        }
        return showItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowItemName</Name>
				<Source><![CDATA[
    public NoYes parmShowItemName(NoYes _showItemName = showItemName)
    {
        if (showItemName != _showItemName)
        {
            showItemName = _showItemName;
            reDrawTree = true;
            this.saveLast();
        }
        return showItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowQty</Name>
				<Source><![CDATA[
    public NoYes parmShowQty(NoYes _showQty = showQty)
    {
        if (showQty != _showQty)
        {
            showQty = _showQty;
            reDrawTree = true;
            this.saveLast();
        }
        return showQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowRefId</Name>
				<Source><![CDATA[
    public NoYes parmShowRefId(NoYes _showRefId = showRefId)
    {
        if (showRefId != _showRefId)
        {
            showRefId = _showRefId;
            reDrawTree = true;
            this.saveLast();
        }
        return showRefId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowTransType</Name>
				<Source><![CDATA[
    public NoYes parmShowTransType(NoYes _showTransType = showTransType)
    {
        if (showTransType != _showTransType)
        {
            showTransType = _showTransType;
            reDrawTree = true;
            this.saveLast();
        }
        return showTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowValue</Name>
				<Source><![CDATA[
    public NoYes parmShowValue(NoYes _showValue = showValue)
    {
        if (showValue != _showValue)
        {
            showValue = _showValue;
            reDrawTree = true;
            this.saveLast();
        }
        return showValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTree</Name>
				<Source><![CDATA[
    public FormTreeControl parmTree(FormTreeControl _tree = tree)
    {
        if (tree != _tree)
        {
            tree = _tree;
        }
        return tree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarnCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>WarnCount</c> parameter.
    /// </summary>
    /// <param name="_warnCount">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>WarnCount</c> parameter.
    /// </returns>
    public Counter parmWarnCount(Counter _warnCount = warnCount)
    {
        warnCount = _warnCount;
        return warnCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return initialQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reDrawTree</Name>
				<Source><![CDATA[
    protected void reDrawTree(TreeItemIdx _parent = 0)
    {
        if (_parent == 0 && formatStrCtrl)
        {
            formatStrCtrl.text(this.lineTxt(null, null, NoYes::Yes));
        }

        TreeItemIdx child = _parent ? tree.getChild(_parent) : tree.getRoot();

        while (child)
        {
            this.reDrawTree(child);
            this.redrawTreeNode(child);

            child = tree.getNextSibling(child);
        }

        reDrawTree = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>redrawTreeNode</Name>
				<Source><![CDATA[
    private void redrawTreeNode(TreeItemIdx _nodeId)
    {
        if (!_nodeId)
        {
            return;
        }

        FormTreeItem treeItem = tree.getItem(_nodeId);

        if (!treeItem)
        {
            return;
        }

        InventDimTrackingNode inventDimTrackingNode = nodeInfoMap.lookup(_nodeId);

        InventDimTrackingWarehouseTransactionNode inventDimTrackingWarehouseTransactionNode = inventDimTrackingNode as InventDimTrackingWarehouseTransactionNode;

        if (inventDimTrackingWarehouseTransactionNode)
        {
            treeItem.text(this.lineTxtFromWHSInventoryTransaction(inventDimTrackingWarehouseTransactionNode.parmInventoryTransaction(), inventDimTrackingNode.parmForwardBackward()));
        }
        else
        {
            treeItem.text(this.lineTxt(inventDimTrackingNode.parmInventTrans(), inventDimTrackingNode.parmInventTransOrigin(), NoYes::No, inventDimTrackingNode.parmForwardBackward()));
        }

        tree.setItem(treeItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        Args args = new Args();
        args.name(formStr(InventDimTracking));
        args.caller(this);

        FormRun resultForm = classfactory.formRunClass(args);
        resultForm.init();
        resultForm.run();
        this.buildTree();
        resultForm.detach();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupNode</Name>
				<Source><![CDATA[
    public TreeItemIdx setupNode()
    {
        TreeItemIdx     setupNode = tree.getFirstSelected();

        if (setupNode == 0 || setupNode == -1)
        {
            setupNode = tree.getRoot();
        }

        return setupNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a Select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will display the query form. Therefore, the <c>queryRun</c> method has
    ///    to return a valid <c>QueryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);
        container   containers;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList, containers] = _packedClass;
                container packedQuery = conPeek(containers, 1);
                initialQueryRun       = new QueryRun(packedQuery);
                [inventDimParm]       = conPeek(containers, 2);

                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static InventDimTracking construct()
    {
        InventDimTracking   inventDimTracking = new InventDimTracking();
        return inventDimTracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS65176";
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandWarehouseTransactionNode</Name>
				<Source><![CDATA[
    private void expandWarehouseTransactionNode(
        SysRecordSortedList _inventTransAndWHSInventoryTransactionList,
        InventDimTrackingNode _inventDimTrackingNode,
        Map _allTransactionMap)
    {
        // init SysRecordSortedList
        SysRecordSortedList inventTransList = this.initInventTransList();

        switch (_inventDimTrackingNode.parmForwardBackward())
        {
            case ForwardBackward::Forward:
                this.expandWarehouseTransactionNodeForward(_inventTransAndWHSInventoryTransactionList, inventTransList, _inventDimTrackingNode, _allTransactionMap);
                break;
            case ForwardBackward::Backward:
                this.expandWarehouseTransactionNodeBackward(_inventTransAndWHSInventoryTransactionList, inventTransList, _inventDimTrackingNode, _allTransactionMap);
                break;
        }

        InventTrackingDimTracingSearch::addInventTransListToInventTrackingTransactionList(
            _inventTransAndWHSInventoryTransactionList,
            inventTransList,
            _allTransactionMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandWarehouseTransactionNodeForward</Name>
				<Source><![CDATA[
    private void expandWarehouseTransactionNodeForward(
        SysRecordSortedList _inventTransAndWHSInventoryTransactionList,
        SysRecordSortedList _inventTransList,
        InventDimTrackingNode _inventDimTrackingNode,
        Map _allTransactionMap)
    {
        if (_inventDimTrackingNode.isIssue())
        {
            if (_inventDimTrackingNode is InventDimTrackingWarehouseTransactionNode)
            {
                // We are not expanding work or container issue transactions forward.
                return;
            }

            this.expandNodeForwardIssue(_inventTransList, _inventDimTrackingNode);
        }
        else
        {
            this.expandNodeForwardReceipt(_inventTransList, _inventDimTrackingNode);

            this.expandReceiptTransactionsWHSTransactions(
                        _inventTransAndWHSInventoryTransactionList,
                        _inventDimTrackingNode,
                        _allTransactionMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandWarehouseTransactionNodeBackward</Name>
				<Source><![CDATA[
    private void expandWarehouseTransactionNodeBackward(
        SysRecordSortedList _inventTransAndWHSInventoryTransactionList,
        SysRecordSortedList _inventTransList,
        InventDimTrackingNode _inventDimTrackingNode,
        Map _allTransactionMap)
    {
        if (_inventDimTrackingNode.isIssue())
        {
            this.expandNodeBackwardIssue(_inventTransList, _inventDimTrackingNode);

            this.expandIssueTransactionWHSTransactions(
                        _inventTransAndWHSInventoryTransactionList,
                        _inventDimTrackingNode,
                        _allTransactionMap);
        }
        else
        {
            if (_inventDimTrackingNode is InventDimTrackingWarehouseTransactionNode)
            {
                // We are not expanding work or container receipt transactions backward.
                return;
            }
                
            this.expandNodeBackwardReceipt(_inventTransList, _inventDimTrackingNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandReceiptTransactionsWHSTransactions</Name>
				<Source><![CDATA[
    private void expandReceiptTransactionsWHSTransactions(
        SysRecordSortedList _inventTransAndWHSInventoryTransactionList,
        InventDimTrackingNode _currentNode,
        Map _allTransactionMap)
    {
        WHSInventoryTransactionView transactionView = new WHSWarehouseTransactionItemTracingQuery().findIssueTransaction(_currentNode.getItemId(), _currentNode.getInventDim());

        if (this.isWarehouseTransactionChild(_currentNode, transactionView))
        {
            this.addTransactionViewRecordsToListAndMap(_currentNode, transactionView, _inventTransAndWHSInventoryTransactionList, _allTransactionMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandIssueTransactionWHSTransactions</Name>
				<Source><![CDATA[
    private void expandIssueTransactionWHSTransactions(
        SysRecordSortedList _inventTransAndWHSInventoryTransactionList,
        InventDimTrackingNode _currentNode,
        Map _allTransactionMap)
    {
        WHSInventoryTransactionView transactionView;
        WHSWarehouseTransactionItemTracingQuery query = new WHSWarehouseTransactionItemTracingQuery();

        transactionView = query.findReceiptTransaction(_currentNode.getItemId(), _currentNode.getInventDim(), _currentNode.getActiveInventDimParm());
        
        if (this.isWarehouseTransactionChild(_currentNode, transactionView))
        {
            this.addTransactionViewRecordsToListAndMap(_currentNode, transactionView, _inventTransAndWHSInventoryTransactionList, _allTransactionMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransactionViewRecordsToListAndMap</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void addTransactionViewRecordsToListAndMap(
        InventDimTrackingNode _currentNode,
        WHSInventoryTransactionView _transactionView,
        SysRecordSortedList _inventTransAndWHSInventoryTransactionList,
        Map _allTransactionMap)
    {
        while(_transactionView)
        {
            InventTrackingDimTracingSearch::addChildWHSInventoryTransaction2List(_inventTransAndWHSInventoryTransactionList, _transactionView);
            _allTransactionMap.add(_transactionView.UniqueKey, _transactionView);

            next _transactionView;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWarehouseTransactionInParentPath</Name>
				<Source><![CDATA[
    private boolean isWarehouseTransactionInParentPath(
        WHSInventoryTransactionView _transactionView,
        TreeItemIdx _nodeId)
    {
        if (!_nodeId)
        {
            return false;
        }

        InventDimTrackingNode inventDimTrackingNodeParent = nodeInfoMap.lookup(_nodeId);

        InventDimTrackingWarehouseTransactionNode inventDimTrackingWarehouseTransactionNodeParent = inventDimTrackingNodeParent as InventDimTrackingWarehouseTransactionNode;

        if (!inventDimTrackingWarehouseTransactionNodeParent)
        {
            return false;
        }

        if (inventDimTrackingWarehouseTransactionNodeParent.parmInventoryTransaction().RecId == _transactionView.RecId)
        {
            return true;
        }

        return this.isWarehouseTransactionInParentPath(_transactionView, inventDimTrackingNodeParent.parmParentNodeIdx());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWarehouseTransactionChild</Name>
				<Source><![CDATA[
    private boolean isWarehouseTransactionChild(
        InventDimTrackingNode _inventDimTrackingNode,
        WHSInventoryTransactionView _transactionView)
    {
        if (this.isWarehouseTransactionInParentPath(_transactionView, _inventDimTrackingNode.parmNodeIdx()))
        {
            return false;
        }

        return this.checkDateOrderForWarehouseTransaction(_inventDimTrackingNode, _transactionView);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDateOrderForWarehouseTransaction</Name>
				<Source><![CDATA[
    private boolean checkDateOrderForWarehouseTransaction(
        InventDimTrackingNode _inventDimTrackingNodeParent,
        WHSInventoryTransactionView _transactionView)
    {
        date dateParent;
        date dateChild;
        boolean ret = true;

        dateChild = _transactionView.TransDate;

        if (_inventDimTrackingNodeParent.parmDoDateChecking())
        {
            if (_inventDimTrackingNodeParent is InventDimTrackingWarehouseTransactionNode)
            {
                InventDimTrackingWarehouseTransactionNode inventDimTrackingWarehouseTransactionNodeParent = _inventDimTrackingNodeParent as InventDimTrackingWarehouseTransactionNode;
                dateParent = inventDimTrackingWarehouseTransactionNodeParent.getTransactionDate();
            }
            else
            {
                dateParent = _inventDimTrackingNodeParent.parmInventTrans().DatePhysical;
            }

            switch (_inventDimTrackingNodeParent.parmForwardBackward())
            {
                case ForwardBackward::Forward:
                    if (dateChild < dateParent)
                    {
                        return false;
                    }
                    break;
                case ForwardBackward::Backward:
                    if (!dateParent && dateChild)
                    {
                        return false;
                    }
                    else if (dateParent < dateChild)
                    {
                        return false;
                    }
                    break;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandNodeSearchOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a server bound instance of the <c>InventDimTracking</c> class.
    /// </summary>
    /// <param name="_warningCounter">
    ///    The maximum value of transactions that the current search can hold.
    /// </param>
    /// <param name="_inventDimTrackingNodePacked">
    ///    The current node in the tree.
    /// </param>
    /// <param name="_nodeInfoMapPacked">
    ///    The <c>nodeInfoMap</c> that contains information about the tree structure.
    /// </param>
    /// <returns>
    ///    A container of all the transactions that correspond to the current node.
    /// </returns>
    /// <remarks>
    ///    This method unpacks all the data that is necessary to find all related transactions for the current
    ///    node and returns a container of the corresponding transactions.
    /// </remarks>
    protected static container expandNodeSearchOnServer(
        Counter     _warningCounter,
        container   _inventDimTrackingNodePacked,
        container   _nodeInfoMapPacked)
    {
        // Create server class instance
        InventDimTracking inventDimTracking = InventDimTracking::construct();
        inventDimTracking.parmWarnCount(_warningCounter);

        // init SysRecordSortedList
        SysRecordSortedList inventTransList = inventDimTracking.initInventTransList();

        // Unpack current tree node
        InventDimTrackingNode inventDimTrackingNode = InventDimTrackingNode::construct();
        inventDimTrackingNode.unpack(_inventDimTrackingNodePacked);

        // Unpack Map object, contains info about exisitng tree
        Map nodeInfoMap = Map::create(_nodeInfoMapPacked);

        // Update local server bound class with the Map instance
        inventDimTracking.parmNodeInfoMap(nodeInfoMap);

        // Start search on the server
        switch (inventDimTrackingNode.parmForwardBackward())
        {
            case ForwardBackward::Forward:
                if (inventDimTrackingNode.parmInventTrans().Qty < 0)
                {
                    inventDimTracking.expandNodeForwardIssue(inventTransList, inventDimTrackingNode);
                }
                else
                {
                    inventDimTracking.expandNodeForwardReceipt(inventTransList, inventDimTrackingNode);
                }
                break;
            case ForwardBackward::Backward:
                if (inventDimTrackingNode.parmInventTrans().Qty < 0)
                {
                    inventDimTracking.expandNodeBackwardIssue(inventTransList, inventDimTrackingNode);
                }
                else
                {
                    inventDimTracking.expandNodeBackwardReceipt(inventTransList, inventDimTrackingNode);
                }
                break;
        }

        return [inventTransList.pack(), inventDimTracking.inventTransOriginMap().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventDimTracking   inventDimTracking = InventDimTracking::newFromArgs(_args);

        if (inventDimTracking.prompt())
        {
            inventDimTracking.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    protected static InventDimTracking newFromArgs(Args _args)
    {
        InventDimTracking   inventDimTracking =  InventDimTracking::construct();

        inventDimTracking.getLast();
        inventDimTracking.initFromArgs(_args);
        return inventDimTracking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>