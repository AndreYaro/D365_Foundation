<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTermJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    An instance of the <c>JmgTermJob</c> class represents a job in Shop Floor Control. Shop Floor
///    Control handles different types of jobs: absence jobs, indirect production jobs, and project jobs.
///    This class provides a uniform way to retrieve information about jobs and create employee
///    registrations on jobs.
/// </summary>
/// <remarks>
///    The <c>JmgTermJob</c> is declared abstract. Each of the subclasses mentioned in the See Also
///    section represent a type of job. An instance of the <c>JmgTermJob</c> subclasses should be created
///    by using either of the static methods <see cref="M:JmgTermJob::construct" /> or <see
///    cref="M:JmgTermJob::constructJobTable" />. If the supplied job ID, or <c>JmgJobTable</c> record,
///    denotes an illegal job, such as if the job ID is not valid, no error is thrown. Instead, an
///    instance of the <see cref="T:JmgTermJob_illegal" /> is returned.
/// </remarks>
abstract class JmgTermJob
{
    #define.keyDelimitor('#')
    // Optimization of JobQueue - Begin
    JmgJobId    jobid;
    JmgJobTable jmgJobTable;
    boolean     selectSourceDataForUpdate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actOprId</Name>
				<Source><![CDATA[
    // Optimization of JobQueue - End
    /// <summary>
    ///    This method retrieves the operation or activity ID associated with the job.
    /// </summary>
    /// <returns>
    ///    The operation/activity ID associated with the job.
    /// </returns>
    /// <remarks>
    ///       Depending on the type of job, this method returns one of the following:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Operation ID for production jobs</description>
    ///       </item>
    ///       <item>
    ///          <description>Activity ID for project jobs</description>
    ///       </item>
    ///       <item>
    ///          <description>Activity ID for IPC jobs</description>
    ///       </item>
    ///       <item>
    ///          <description>Absence code for absence jobs</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public JmgActOprID actOprId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>allow</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns whether employees are allowed to register on the job.
    /// </summary>
    /// <returns>
    ///    true, if employees are allowed to make registrations on the job, otherwise false.
    /// </returns>
    boolean allow()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimatedHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the estimated job time
    /// </summary>
    /// <returns>
    /// the estimated job time.
    /// </returns>
    public Hours estimatedHours()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>function</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the function associated with the job.
    /// </summary>
    /// <param name="_worker">
    ///    The worker ID for which the function should be returned.
    /// </param>
    /// <returns>
    ///    The button function associated with this job.
    /// </returns>
    /// <remarks>
    ///    For all jobs, except IPC jobs, the return value is <c>JmgSingInButtonFunction::Blank</c>. However,
    ///    it is possible to assign button functions to IPC activities, which allows certain button functions
    ///    to be "barcode enabled." That is, when a certain job ID is entered, the system will perform a
    ///    certain function.
    /// </remarks>
    JmgSignInButtonFunction function(JmgWorkerRecId _worker)
    {
        return JmgSignInButtonFunction::Blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Part of the initialization procedure of an instance. The method is called by the <see
    ///    cref="M:JmgTermJob::construct" /> and <see cref="M:JmgTermJob::constructJobTable" />.
    /// </summary>
    /// <param name="_jmgJobId">
    ///    ID of the job.
    /// </param>
    /// <param name="_jmgJobTable">
    ///    JmgJobTable record, which contains information about the job.
    /// </param>
    /// <param name="_sourceData">
    ///    A record, which contains the data upon which the job is based (such as a ProdRouteJob record, a
    ///    ProjActivity record, a JmgIpcActivity record, etc.).
    /// </param>
    /// <remarks>
    ///    Protected method. Only invoked from JmgTermJob::construct method and JmgTermJob::constructJobTable
    ///    method.
    /// </remarks>
    protected void init(JmgJobId _jmgJobId, JmgJobTable _jmgJobTable, Common _sourceData)
    {
        jobid = _jmgJobId;
        jmgJobTable = _jmgJobTable;
        this.initSourceData(_jmgJobTable, _sourceData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCommon</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method initializes the common fields in a JmgTermReg record, which is created when making a
    ///    registration. The common fields are those which are initialized in the same way, regardless of the
    ///    job type.
    /// </summary>
    /// <param name="_jmgTermReg">
    ///    The JmgTermReg record, which should be initialized.
    /// </param>
    /// <param name="_worker">
    ///    The Worker of the employee making the registration.
    /// </param>
    /// <param name="_date">
    ///    The registration date.
    /// </param>
    /// <param name="_time">
    ///    The registration time.
    /// </param>
    /// <param name="_autoStamp">
    ///    A <c>NoYes</c> parameter, which determines whether the registration is made directly by an employee
    ///    (<c>NoYes::No</c>).
    /// </param>
    /// <param name="_registrationParameters">
    ///    Additional registration parameters.
    /// </param>
    /// <remarks>
    ///    This protected method is invoked from the <c>makeRegistration</c> methods in the <c>JmgTermJob</c>
    ///    subclasses.
    /// </remarks>
    protected void initCommon(
        JmgTermReg                  _jmgTermReg,
        JmgWorkerRecId              _worker,
        JmgDate                     _date,
        JmgTime                     _time,
        NoYes                       _autoStamp,
        JmgRegistrationParameters   _registrationParameters)
    {
        _jmgTermReg.JobId           = jobid;
        _jmgTermReg.Worker          = _worker;
        _jmgTermReg.RegDateTime     = DateTimeUtil::newDateTime(_date,_time,DateTimeUtil::getUserPreferredTimeZone());
        _jmgTermReg.AutoStamp       = _autoStamp;
        _jmgTermReg.WorkerPilot     = _registrationParameters.jobPilot();
        _jmgTermReg.WrkCtrIdPilot   = _registrationParameters.parmWrkCtrIdPilot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Part of the initialization procedure of an instance. Loads the source data, upon which the job is
    ///    based, into memory. For example, for a production job, the corresponding ProdRouteJob record is
    ///    fetched from the database and stored in memory.
    /// </summary>
    /// <param name="_jmgJobTable">
    ///    The JmgJobTable record with the corresponding job ID.
    /// </param>
    /// <param name="_sourceData">
    ///    If the source data has already been fetched from the database, it can be supplied as a parameter;
    ///    optional.
    /// </param>
    /// <remarks>
    ///    The method is declared abstract, and must be implemented for each type of job. The method is
    ///    invoked from the <see cref="M:JmgTermJob.init" />.
    /// </remarks>
    protected abstract void initSourceData(JmgJobTable _jmgJobTable, Common _sourceData = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidJobId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns whether an instance of the <see cref="T:JmgTermJob" /> is based on a valid job
    ///    ID.
    /// </summary>
    /// <returns>
    ///    true, if the job is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The implementation of this method on the <c>JmgTermJob</c> class always returns true. It is
    ///    overridden on the <see cref="T:JmgTermJob_illegal" /> to return false.
    /// </remarks>
    public boolean isValidJobId()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jmgJobTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>JmgJobTable</c> record, which is associated to the job.
    /// </summary>
    /// <returns>
    /// the <c>JmgJobTable</c> record, which is associated to the job.
    /// </returns>
    public JmgJobTable jmgJobTable()
    {
        return jmgJobTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobDescription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns a description of the job.
    /// </summary>
    /// <returns>
    ///    The description associated with the job.
    /// </returns>
    public JmgDescription jobDescription()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns the job ID which identifies this job.
    /// </summary>
    /// <returns>
    ///    The job ID which identifies the job.
    /// </returns>
    JmgJobId jobId()
    {
        return jobid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobRef</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the job reference of the job.
    /// </summary>
    /// <returns>
    ///    The job reference of this job.
    /// </returns>
    /// <remarks>
    ///       Depending on the type of job, this method returns the following:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Production ID for production jobs. Implemented in <see cref="JmgTermJob_Prod.jobRef
    ///          Method" /></description>
    ///       </item>
    ///       <item>
    ///          <description>Project ID for project jobs. Implemented in <see cref="JmgTermJob_Proj.jobRef Method"
    ///          />.</description>
    ///       </item>
    ///       <item>
    ///          <description>Indirect Category ID for IPC jobs. Implemented in <see cref="JmgTermJob_IPC.jobRef
    ///          Method" />.</description>
    ///       </item>
    ///       <item>
    ///          <description>Absence code group ID for absence jobs. Implemented in <see
    ///          cref="JmgTermJob_HRMAbsence.jobRef Method" />.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    JmgJobRef jobRef()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns job status.
    /// </summary>
    /// <returns>Returns the status of the job.</returns>
    public JmgJobStatus jobStatus()
    {
        JmgJobStatus ret = JmgJobStatus::NotAvailable;
        JmgTermReg   jmgTermReg;

        jmgTermReg.recordLevelSecurity(true);

        select firstonly RecId
            from  jmgTermReg
            where jmgTermReg.JobId      == jmgJobTable.JobId   &&
                  jmgTermReg.JobActive  == NoYes::Yes;
        if (jmgTermReg)
        {
            ret = JmgJobStatus::InProgress;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourRegType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the journal registration type to which this type of job corresponds.
    /// </summary>
    /// <returns>
    ///    Returns the type of journal line to create, when a registration is made on this job.
    /// </returns>
    /// <remarks>
    ///    When making a registration on a job, a journal line is created in the <see
    ///    cref="T:JmgStampJournalTrans" />. The type of journal line is determined by this method.
    ///    Furthermore, the method is used to initialize <see cref="T:JmgTimecardTrans" /> records, when lines
    ///    are added by the user through the Electronic timecard form.
    /// </remarks>
    public abstract JmgJourRegType jourRegType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeFeedback</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method is used to provide feedback on a started job (currently only relevant for production
    ///    jobs). Use this method to enter feedback regarding number of good items that are produced, the
    ///    number of scrap items, and whether the job is finished. If the user has indicated that she is no
    ///    longer working on the job, a stop job registration will be inserted as well.
    /// </summary>
    /// <param name="_worker">
    ///    The ID of the worker making the feedback.
    /// </param>
    /// <param name="_regParameters">
    ///    An instance of the <c>JmgRegistrationParameters</c> class, which encapsulates the parameters to the
    ///    registration.
    /// </param>
    /// <param name="_regDate">
    ///    Date where the feedback is made.
    /// </param>
    /// <param name="_regTime">
    ///    Time where the feedback is made.
    /// </param>
    /// <remarks>
    ///    This method is only used with production jobs, as these are the only type of jobs on which feedback
    ///    can be made.
    /// </remarks>
    public abstract void makeFeedback(JmgWorkerRecId _worker, JmgRegistrationParameters _regParameters, JmgDate _regDate, JmgTime _regTime)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method creates a start or a stop job registration on this job.
    /// </summary>
    /// <param name="_worker">
    ///    The worker that is making the registration.
    /// </param>
    /// <param name="_date">
    ///    The date of the registration.
    /// </param>
    /// <param name="_time">
    ///    The time of the registration.
    /// </param>
    /// <param name="_start">
    ///    Boolean indicates whether it should be a start registration (true), or a stop registration (false);
    ///    optional.
    /// </param>
    /// <param name="_registrationParameters">
    ///    Additional registration parameters, which should be used to make the registration; optional.
    /// </param>
    /// <param name="_autoStamp">
    ///    <c>NoYes</c> indicates whether this registration is made by an employee (<c>NoYes::Yes</c>), or by
    ///    some function activated by a supervisor (<c>NoYes::No</c>); optional.
    /// </param>
    /// <remarks>
    ///    If an error is detected while making the registration, an error is thrown.
    /// </remarks>
    public abstract void makeRegistration(
        JmgWorkerRecId              _worker,
        JmgDate                     _date,
        JmgTime                     _time,
        boolean                     _start = true,
        JmgRegistrationParameters   _registrationParameters = new JmgRegistrationParameters(),
        NoYes                       _autoStamp = NoYes::No)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns the module from where the job originates.
    /// </summary>
    /// <returns>
    ///    The module from where the job originates.
    /// </returns>
    /// <remarks>
    ///    Due to legacy issues, the module of an absence job is <c>JmgModuleEnum::IPC</c>.
    /// </remarks>
    JmgModuleEnum module()
    {
        throw error("@SYS19559");
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfCanHaveCoProducts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the job can have co-product outputs.
    /// </summary>
    /// <returns>
    /// true if the job can have co-product outputs; otherwise, false.
    /// </returns>
    public boolean pmfCanHaveCoProducts()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pmfIsBatchOrderJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the term job belongs to the batch order.
    /// </summary>
    /// <returns>
    /// true - if it is a batch order; false - otherwise.
    /// </returns>
    public boolean pmfIsBatchOrderJob()
    {
        return ProdTable::find(this.jmgJobTable().ModuleRefId).ProdType == ProdType::Process;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registrationError</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method is invoked if an error occurs during the creation of a registration on the job. It throws an error with the specified error message. If special handling of registration errors is
    ///    necessary for a specific type of job, this method should be overridden.
    /// </summary>
    /// <param name="_errorMessage">
    ///    Error message to display to the user.
    /// </param>
    /// <remarks>
    ///    This protected method is invoked when an error is detected during the creation of a registration on the job. For example, if an attempt is made to create a registration on an illegal job ID.
    /// </remarks>
    protected void registrationError(SysInfoLogStr _errorMessage)
    {
        throw error(_errorMessage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedFinish</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns whether the job is reported as finished in Shop Floor Control.
    /// </summary>
    /// <returns>
    ///    true, if an employee has reported the job as finished; otherwise, false.
    /// </returns>
    boolean reportedFinish()
    {
        return (JmgJobStatusFactory::buildJmgJobStatusInstance()).reportedFinish(jobid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportedStarted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns whether the job has been reported as started.
    /// </summary>
    /// <returns>
    ///    true, if the job is started; otherwise, false.
    /// </returns>
    public abstract boolean reportedStarted()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireFeedbackInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns whether any additional feedback is needed. A set of feedback parameters is supplied to the method and based on these parameters it is determined whether additional feedback is
    ///    needed to make a stop registration on the job.
    /// </summary>
    /// <param name="_regParameters">
    ///    The registration parameters already given; optional.
    /// </param>
    /// <returns>
    ///    true, if any additional feedback is required in order to make a registration.
    /// </returns>
    public abstract boolean requireFeedbackInfo(JmgRegistrationParameters _regParameters = new JmgRegistrationParameters())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>requireStartupInfo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns whether any additional startup information is needed. A set of startup
    ///    parameters is supplied to the method and based on these parameters it is determined whether
    ///    additional feedback is needed to make a start registration on the job.
    /// </summary>
    /// <param name="_regParameters">
    ///    The registration parameters already given. May be set to NULL.
    /// </param>
    /// <returns>
    ///    true, if any additional startup information is required in order to make a registration.
    /// </returns>
    public abstract boolean requireStartupInfo(JmgRegistrationParameters _regParameters = new JmgRegistrationParameters())
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>signType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method returns the type of registration associated with this job.
    /// </summary>
    /// <returns>
    ///    The registration type associated with this job.
    /// </returns>
    /// <remarks>
    ///    In most cases this method will return <c>JmgSignInOut::Job</c>. However, for special types of IPC jobs, like the clock-in job, clock-out job, start team job, etc., this method indicates the type of
    ///    job.
    /// </remarks>
    JmgSignInOut signType()
    {
        return JmgSignInOut::Job;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method provides access to the source data record from which the job originates. For example,
    ///    for a project activity job, this method will return the corresponding ProjActivity record.
    /// </summary>
    /// <returns>
    ///    The record with source data from which this job originates.
    /// </returns>
    /// <remarks>
    ///    If the returned record should be selected for update, then the <see cref="M:JmgTermJob::construct"
    ///    /> or <see cref="M:JmgTermJob::constructJobTable" /> methods should be invoked with the <paramref
    ///    name="_forUpdate " />parameter set to true.
    /// </remarks>
    public abstract Common sourceData()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>stampType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the stamp type associated with this job.
    /// </summary>
    /// <returns>
    ///    The stamp type associated with this job.
    /// </returns>
    public abstract JmgStampTypeEnum stampType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStampJournalTransWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates JmgStampJournalTrans record.
    /// </summary>
    /// <param name="_jmgStampJournalTrans">
    /// JmgStampJournalTrans record to be validated.
    /// </param>
    /// <returns>
    /// true if validation passes, otherwise - false.
    /// </returns>
    public boolean validateStampJournalTransWrite(JmgStampJournalTrans _jmgStampJournalTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jobOrderSortingKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a sort string to determine the processing order of the jobs in a bundle.
    /// </summary>
    /// <returns>The generated sort string.</returns>
    internal str jobOrderSortingKey()
    {
        return this.jobId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a string value to a key.
    /// </summary>
    /// <param name="_key">
    /// A string value that contains a key.
    /// </param>
    /// <param name="_addTokey">
    /// The string value to add to the given key.
    /// </param>
    /// <param name="_fixLen">
    /// The expected fixed length of the added string. Default value is the length of the value to be added.
    /// </param>
    /// <param name="_char">
    /// The char to add to the appended string to achieve the expected length. Default value is '0'.
    /// </param>
    /// <returns>
    /// A string with the modified key.
    /// </returns>
    internal str addToKey(str _key, str _addTokey, int _fixLen = strLen(_addTokey), char _char = '0')
    {
        str key = _key;

        if (_addTokey)
        {
            if (key)
            {
                key += #keyDelimitor;
            }

            key += strRFix(_addTokey, _fixLen, _char);
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commonJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This static method is used to retrieve the source data record from which the supplied job ID
    ///    originates.
    /// </summary>
    /// <param name="jobId">
    ///    The job ID for which the source data record should be fetched.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines whether the record should be selected for update. Default value is false. May be set to
    ///    NULL.
    /// </param>
    /// <returns>
    ///    The source data record from where the specified job ID originates.
    /// </returns>
    /// <remarks>
    ///    The source data record for a job ID can also be fetched by instantiating a new <c>JmgTermJob</c>
    ///    object using the <see cref="M:JmgTermJob::construct" />, followed by an invocation of the <see
    ///    cref="M:JmgTermJob.sourceData" />. Using the <c>commonJob</c> method directly avoids the additional
    ///    initialization made in the <see cref="M:JmgTermJob::construct" />.
    /// </remarks>
    static Common commonJob(JmgJobId jobId, boolean _forUpdate = false)
    {
        Common  jobrec;

        if (! jobId)
            return null;

        jobrec = JmgIpcActivity::findJobId(jobId, _forUpdate);
        if (jobrec)
            return jobrec;

        jobrec = HRMAbsenceCode::findByJobId(jobId, _forUpdate);
        if (jobrec)
            return jobrec;

        jobrec = HRMAbsenceCodeGroup_Extension::findJobId(jobId, _forUpdate);
        if (jobrec)
            return jobrec;

        jobrec = ProdRouteJob::findJobId(jobId, _forUpdate);
        if (jobrec)
            return jobrec;

        jobrec = ProdRoute::findJobId(jobId, _forUpdate);
        if (jobrec)
            return jobrec;

        jobrec = ProjTable::findJobId(jobId, _forUpdate);
        if (jobrec)
            return jobrec;

        jobrec = ProjActivity::findJobId(jobId, _forUpdate);
        if (jobrec)
            return jobrec;

        jobrec = ProjForecastEmpl::findJobId(jobId, _forUpdate);
        if (jobrec)
            return jobrec;

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method creates a new instance of the <c>JmgTermJob</c> subclasses. Based on the specified job ID, an instance of the appropriate subclasses is returned.
    /// </summary>
    /// <param name="_jobId">
    ///    The job ID for which an instance of the <c>JmgTermJob</c> is created.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines whether the source data record is selected for update.
    /// </param>
    /// <returns>
    ///    An instance of a subclass to the <c>JmgTermJob</c> class.
    /// </returns>
    /// <remarks>
    ///    The new methods of the <c>JmgTermJob</c> classes should not be called directly. Instead new instances should be created by using this method.
    /// </remarks>
    static JmgTermJob construct(JmgJobId _jobId, boolean _forUpdate = false)
    {
        JmgJobTable jmgJobTable;
        Common jobTable;
        JmgTermJob ret;
        jmgJobTable = JmgJobTable::find(_jobId, _forUpdate);
        if (jmgJobTable)
        {
            ret = JmgTermJob::constructJobTable(jmgJobTable, _forUpdate);
        }
        else
        {
            jobTable = JmgTermJob::commonJob(_jobId, _forUpdate);
            switch (jobTable.TableId)
            {
                case tablenum(ProdRoute):
                case tablenum(ProdRouteJob):
                    ret     = new JmgTermJob_Prod(_forUpdate);
                    break;
                case tablenum(ProjTable):
                case tablenum(ProjActivity):
                    ret     = new JmgTermJob_Proj(_forUpdate);
                    break;
                case tablenum(JmgIpcCategory):
                case tablenum(JmgIpcActivity):
                    ret     = new JmgTermJob_IPC(_forUpdate);
                    break;
                case tablenum(HRMAbsenceCodeGroup):
                case tablenum(HRMAbsenceCode):
                    ret     = new JmgTermJob_HRMAbsence(_forUpdate);
                    break;
                default :
                    ret     = new JmgTermJob_illegal();
                    break;
            }
            ret.init(_jobId, jmgJobTable, jobTable);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructJobTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method constructs a new instance of the <c>JmgTermJob</c> class based on a JmgJobTable record.
    ///    Based on the jobId field of the JmgJobTable, an instance of the appropriate subclass is returned.
    /// </summary>
    /// <param name="_jmgJobTable">
    ///    The JmgjobTable record for which an instance of the <c>JmgTermJob</c> class is constructed.
    /// </param>
    /// <param name="_forUpdate">
    ///    Determines whether the source data record is selected for update; optional. Default value is false
    /// </param>
    /// <returns>
    ///    An instance of a subclass to the <c>JmgTermJob</c> class.
    /// </returns>
    /// <remarks>
    ///    For performance reasons, this method should be preferred to the JmgTermJob::construct method if a
    ///    JmgJobTable record has already been retrieved. The JmgTermJob::construct method also loads this
    ///    record.
    /// </remarks>
    // Optimization of JobQueue - Begin
    public static JmgTermJob constructJobTable(JmgJobTable _jmgJobTable, boolean _forUpdate = false)
    {
        JmgTermJob ret;
        switch (_jmgJobTable.Type)
        {
            case JmgJobTableType::ProdQueueBefore:
            case JmgJobTableType::ProdProcess:
            case JmgJobTableType::ProdQueueAfter:
            case JmgJobTableType::ProdOverlap:
            case JmgJobTableType::ProdTransport:
            case JmgJobTableType::ProdSetup:
                ret = new JmgTermJob_Prod(_forUpdate);
                break;
            case JmgJobTableType::ProjActivity:
            case JmgJobTableType::ProjProject:
            case JmgJobTableType::ProjBudget:
                ret = new JmgTermJob_Proj(_forUpdate);
                break;
            case JmgJobTableType::SFCActivity:
            case JmgJobTableType::SFCBreak:
            case JmgJobTableType::SFCClockIn:
            case JmgJobTableType::SFCClockOut:
            case JmgJobTableType::SFCEventCode:
            case JmgJobTableType::SFCOnCall:
            case JmgJobTableType::SFCStartTeam:
            case JmgJobTableType::SFCStopTeam:
                ret = new JmgTermJob_IPC(_forUpdate);
                break;
            case JmgJobTableType::HRMAbsenceCode:
            case JmgJobTableType::HRMAbsenceCodeGroup:
                ret = new JmgTermJob_HRMAbsence(_forUpdate);
                break;
            default:
                ret = new JmgTermJob_illegal();
                break;
        }
        ret.init(_jmgJobTable.JobId, _jmgJobTable, null);
        return ret;
    }
    // Optimization of JobQueue - End

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>