<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_TangibleGroupDepr</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25RegCalc_TangibleGroupDepr extends RTax25RegCalc_AssetsInfo implements BatchRetryable
{
    Counter          transCount;
    AmountMST        amountFooter, amountTotal, deprGroup, deprSubGroup;
    AmountMST        origCostAsset, origCostSubGroup, origCostGroup;
    TransDate        factorDate;
    RAssetFactor     subGroupFactor;
    RAssetGroupId    lastGroupId;
    RAssetSubGroupId lastSubGroupId;
    Map              map;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createFooter</Name>
				<Source><![CDATA[
    protected void createFooter()
    {
    }
    
]]></Source>
			</Method>
			<Method>
				<Name>createFooterRecord</Name>
				<Source><![CDATA[
    private void createFooterRecord(RAssetId         _accountNum    = "",
                                    int              _i             = 0,
                                    AmountMST        _origCostTotal = 0.0,
                                    TempStr          _description   = "")
    {
        regQuery.addFooterRecord(0,
                                 [lastGroupId,
                                 lastSubGroupId,
                                 dateNull(),
                                 _accountNum ? strfmt(_accountNum) : "",
                                 _accountNum ? RAssetTable::find(_accountNum).Name : "",
                                 "",
                                 "",
                                 lastSubGroupId && ! _accountNum ? subGroupFactor : 0.0,
                                 _accountNum ? origCostAsset : _origCostTotal,
                                 0.0,
                                 "",
                                 amountFooter,
                                 0.0],
                                 _accountNum  ? 0 : 1,
                                 _description ? _description : strfmt("@GLS104014", _accountNum),
                                 _i);
    
    }
]]></Source>
			</Method>
			<Method>
				<Name>createHeaderRecord</Name>
				<Source><![CDATA[
    private void createHeaderRecord(RAssetId  _accountNum  = "",
                                    int       _i           = 0,
                                    TempStr   _description = "")
    {
        regQuery.addHeaderRecord(0,
                                 conNull(),
                                 _accountNum  ? 0 : 1,
                                 _description ? _description :
                                  (_accountNum ? strfmt("@GLS104112", _accountNum) : "@SYS28004"),
                                 _i);
    }
]]></Source>
			</Method>
			<Method>
				<Name>createRegisterTrans</Name>
				<Source><![CDATA[
private void createRegisterTrans()
    {
        AmountMST            mstAmount, baseAmount = 0;
        RAssetLifeTime       monthsLine, lifeTime;
        TransDate            deductionDate;
        MapIterator          iterator = new MapIterator(map);
        container            con;
        int                  trans;
        RecId                recId;
    
        RTax25StdDocuments   stddocuments;
        RTax25LedgerRun      ledgerRun;
        RAssetDeprProfile    deprProfile;
    
        GeneralJournalAccountEntry          accountEntry, offsetAccountEntry;
        GeneralJournalAccountEntry_W        accountEntryW, offsetAccountEntryW;
        GeneralJournalEntry                 journalEntry;
        DimensionAttributeLevelValueView    dimAccount,             offsetDimAccount;
    
        DimensionAttribute                  mainAccountAttr = DimensionAttribute::find(DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount));
        RAssetTrans                         assetTrans;
    
        void initialize()
        {
            RAssetTransReportingView deduction;
            ;
    
            rAssetStandards = RAssetStandards::find(assetTrans.AccountNum, assetTrans.AssetStandardId);
            rAssetTable     = RAssetTable::find(assetTrans.AccountNum);
    
            mstAmount      = 0; deductionDate = dateNull(); baseAmount = 0;
            deprMethod     = this.assetDeprMethod(dateFrom);
    
            rTax25PeriodIterator.first(true);
    
            do
            {
                select firstonly ReportingDate, AssetTransType, AttachDocumentNumber, AttachDocumentDate from deduction
                    order by  ReportingDate desc
                where deduction.AccountNum      == rAssetTable.AccountNum                &&
                        (!rTax25PeriodIterator.fromDateAccounting()                                     ||
                          deduction.AccountingDate  >= rTax25PeriodIterator.fromDateAccounting())       &&
                        (!rTax25PeriodIterator.fromDateReporting()                                      ||
                          deduction.ReportingDate   >= rTax25PeriodIterator.fromDateReporting())        &&
                          deduction.AccountingDate  <= rTax25PeriodIterator.toDateAccounting()          &&
                          deduction.ReportingDate   <= rTax25PeriodIterator.toDateReporting()           &&
                      deduction.AssetStandardId == assetStandardId                       &&
                      (deduction.AssetTransType == RAssetTransType::Disposal             ||
                       deduction.AssetTransType == RAssetTransType::DisposalSale         ||
                       deduction.AssetTransType == RAssetTransType::DisposalScrap)       &&
                      ! deduction.StornoRecId;
    
                if (deductionDate < deduction.ReportingDate)
            {
                    deductionDate  = deduction.ReportingDate;
            }
        }
            while (rTax25PeriodIterator.next());
        }
        ;
    
        while (iterator.more())
        {
            con = iterator.value();
            lastAssetId = "";
            for (trans = 1; trans <= conlen(con); trans++)
            {
                recId = conpeek(con, trans);
                assetTrans = RAssetTrans::find(recId);
    
                if (!retHeader)
                {
                    lastAssetId = assetTrans.AccountNum;
                    retHeader   = true;
                    initialize();
                }
                else if (lastAssetId != assetTrans.AccountNum)
                {
                    lastAssetId = assetTrans.AccountNum;
                    initialize();
                }
                lifeTime = this.lifeTime(assetTrans.TransDate - 1);
                this.reduceFactor(assetTrans.TransDate - 1);
    
                mstAmount += - assetTrans.AmountMST;
                this.baseCostValue(assetTrans.TransDate, endmth(deductionDate) == endmth(assetTrans.TransDate) ? false : true);
                monthsLine  = this.deprMonthsCalc(assetTrans.TransDate);
                if (rAssetSumTrans.acquisitionValueMST() + rAssetSumTrans.depreciationTotalMST() == 0)
                {
                    baseCostValue = baseAmount;
                    monthsLine    = lifeTime;
                }
                baseAmount = baseCostValue;
    
                productionSign   = this.productionSign(assetTrans.Voucher, assetTrans.TransDate);
                profitTableRecId = RTax25ProfitTable::findDefaultDimension(
                                        assetTrans.DefaultDimension ? assetTrans.DefaultDimension : LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(assetTrans.DefaultDimension),
                                        false,
                                        registerId).RecId;
    
                if (!profitTableRecId)
                {
                    stddocuments = RTax25StdDocuments::construct();
                    ledgerRun    = RTax25LedgerRun::newRegisterId(stddocuments, "", registerId);
    
                    while select LedgerDimension from accountEntry
                        join RecId from accountEntryW
                            where accountEntryW.GeneralJournalAccountEntry == accountEntry.RecId
                        join EntityInstance from dimAccount
                            where dimAccount.ValueCombinationRecId  == accountEntry.LedgerDimension
                             && dimAccount.DimensionAttribute     == mainAccountAttr.RecId
                        join RecId from offsetAccountEntryW
                            where offsetAccountEntryW.BondBatchTrans_RU == accountEntryW.BondBatchTrans_RU
                        join LedgerDimension from offsetAccountEntry
                            where offsetAccountEntry.GeneralJournalEntry == accountEntry.GeneralJournalEntry
                                && offsetAccountEntry.RecId == offsetAccountEntryW.GeneralJournalAccountEntry
                                && offsetAccountEntry.RecId != accountEntry.RecId
                                && offsetAccountEntry.IsCredit != accountEntry.IsCredit
                        join EntityInstance from offsetDimAccount
                            where offsetDimAccount.ValueCombinationRecId == offsetAccountEntry.LedgerDimension
                                &&  offsetDimAccount.DimensionAttribute == mainAccountAttr.RecId
                        exists join journalEntry
                            where journalEntry.RecId  == accountEntry.GeneralJournalEntry &&
                                    journalEntry.Ledger == Ledger::current()
                    {
                        profitTableRecId = ledgerRun.checkAccountsInRange(dimAccount.EntityInstance,
                                                                          LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(accountEntry.LedgerDimension),
                                                                          offsetDimAccount.EntityInstance,
                                                                          LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(offsetAccountEntry.LedgerDimension));
                        if (profitTableRecId)
                            break;
                    }
                }
    
                deprProfile = rAssetStandards.deprProfile(assetTrans.TransDate - 1);
                transCount++;
    
                regQuery.addBodyRecord(profitTableRecId,
                                      [rAssetStandards.AssetGroup,
                                      rAssetStandards.subGroupId(assetTrans.TransDate),
                                      assetTrans.TransDate,
                                      strfmt(rAssetTable.AccountNum),
                                      rAssetTable.Name,
                                      productionSign ? "@SYS5461" : "@SYS2048",
                                      deprProfile.Name ? deprProfile.Name : deprProfile.DeprProfile,
                                      reduceFactor,
                                      origCostValue,
                                      baseCostValue,
                                      baseCostValue ? int2str(lifeTime - monthsLine) : int2str(lifeTime),
                                      - assetTrans.AmountMST,
                                      mstAmount],
                                      assetTrans.TableId,
                                      assetTrans.RecId,
                                      strfmt("@GLS116360", rAssetTable.AccountNum, rAssetTable.Name),
                                      -transCount);
            }
    
            iterator.next();
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>createTotal</Name>
				<Source><![CDATA[
    protected void createTotal()
    {
        this.createRegisterTrans();
        regQuery.insertDatabase();
        regQuery.initRegBuffer();
        this.sortRegisterTrans();
    }
    
]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean ret;
    
        ret = super(_registerJournalTrans, _batch);
        map = new Map(Types::Container, Types::Container);
        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>outputHeaderFooterGroup</Name>
				<Source><![CDATA[
    private int outputHeaderFooterGroup(RAssetGroupId _groupId, RAssetSubGroupId _subGroupId, int _i)
    {
        int i = _i;
        ;
    
        if (lastGroupId != _groupId || lastSubGroupId != _subGroupId)
        {
            if (lastSubGroupId != _subGroupId && lastSubGroupId)
            {
                amountFooter = deprSubGroup;
                this.createFooterRecord("", i, origCostSubGroup, strfmt("@SYS96096", lastGroupId) + ': ' + strfmt("@GLS117103", lastSubGroupId));
                i++;
            }
            if (lastGroupId != _groupId)
            {
                if (lastGroupId)
                {
                    if (! lastSubGroupId)
                    {
                        amountFooter = deprSubGroup;
                        this.createFooterRecord("", i, origCostSubGroup, strfmt("@SYS96096", lastGroupId) + ': ' + strfmt("@GLS117103", lastSubGroupId));
                        i++;
                    }
                    amountFooter = deprGroup;
                    lastSubGroupId = "";
                    this.createFooterRecord("", i, origCostGroup, strfmt("@GLS117102", lastGroupId));
                    i++;
                }
                if (_groupId)
                {
                    this.createHeaderRecord("", i, strfmt("@GLS117100", _groupId));
                    i++;
                    this.createHeaderRecord("", i, strfmt("@GLS117101", _subGroupId));
                    i++;
                }
    
                deprGroup = 0; deprSubGroup = 0; origCostSubGroup = 0; origCostGroup = 0; subGroupFactor = 0; factorDate = dateNull();
            }
            else if (lastSubGroupId != _subGroupId && _subGroupId)
            {
                if (! lastSubGroupId)
                {
                    amountFooter = deprSubGroup;
                    this.createFooterRecord("", i, origCostSubGroup, strfmt("@SYS96096", lastGroupId) + ': ' + strfmt("@GLS117103", lastSubGroupId));
                    i++;
                }
                this.createHeaderRecord("", i, strfmt("@GLS117101", _subGroupId));
                i++;
                deprSubGroup = 0; origCostSubGroup = 0; subGroupFactor = 0; factorDate = dateNull();
            }
        }
        lastGroupId    = _groupId;
        lastSubGroupId = _subGroupId;
        return i;
    }
]]></Source>
			</Method>
			<Method>
				<Name>sortRegisterTrans</Name>
				<Source><![CDATA[
    private void sortRegisterTrans()
    {
        RTax25RegisterTrans_TangibleGroupDepr   trans;
        RAssetId                accountNum, lastAccount = '';
        AmountMST               amountDeprType;
        int                     i = 1;
        boolean                 methodHeader;
        RAssetGroupId           groupId;
        RAssetSubGroupId        subGroupId;
    
        void createBody(boolean _deprType) // 0 - nongroup, 1 - group
        {
            RAssetTrans assetTrans = RAssetTrans::find(trans.RefRecId);
            boolean deprType = RAssetStandards::find(assetTrans.AccountNum, assetTrans.AssetStandardId).
                                   deprProfile(assetTrans.TransDate - 1).DeprMethod == RAssetDeprMethod::TaxNonLinearGroup;
    
            groupId    = trans.DepreciationGroup;
            subGroupId = trans.Subgroup;
    
            if (deprType != _deprType)
                return;
    
            if (! methodHeader)
            {
                this.createHeaderRecord("", i, _deprType ? "@GLS116631" : "@GLS113676");
                methodHeader = true;
                i++;
            }
    
            accountNum = trans.AssetId;
            if (lastAccount != accountNum ||
                (deprType && (lastGroupId != groupId || lastSubGroupId != subGroupId)))
            {
                if (lastAccount != "")
                {
                    this.createFooterRecord(lastAccount, i, 0, "");
                    amountFooter  = 0;
                    i++;
                }
                if (deprType)
                {
                    i = this.outputHeaderFooterGroup(groupId, subGroupId, i);
                    amountFooter = 0;
                }
                this.createHeaderRecord(accountNum, i);
                i++;
                origCostAsset = 0;
                lastAccount = accountNum;
            }
            amountFooter   += trans.DepreciationAmount;
            if (deprType)
            {
                deprGroup    += trans.DepreciationAmount;
                deprSubGroup += trans.DepreciationAmount;
            }
            amountDeprType += trans.DepreciationAmount;
            amountTotal    += trans.DepreciationAmount;
            trans.TotalDepreciationAmount = amountFooter;
            if (trans.DepreciationMonth == dateFrom)
            {
                origCostAsset = trans.OriginalDeprCost;
                origCostSubGroup += origCostAsset;
                origCostGroup    += origCostAsset;
            }
            if (subGroupId &&
                (! factorDate || trans.DepreciationMonth < factorDate))
            {
                factorDate = trans.DepreciationMonth;
                subGroupFactor = trans.SpecialFactorUsing;
            }
            trans.LineNumber = i;
            trans.doUpdate();
            i++;
            progress.incCount();
        }
    
        void createFooter(TempStr descr = "")
        {
            if (lastAccount)
            {
                this.createFooterRecord(lastAccount, i, 0);
                i++;
            }
            if (groupId || subGroupId)
            {
                i = this.outputHeaderFooterGroup("", "", i);
            }
            if (methodHeader)
            {
                amountFooter = amountDeprType;
                this.createFooterRecord("", i, 0, descr);
                i++;
            }
        }
    
        void purge()
        {
            lastAccount   = "";
            amountFooter  = 0; amountDeprType   = 0; origCostAsset  = 0;
            origCostGroup = 0; origCostSubGroup = 0; subGroupFactor = 0;
            methodHeader  = false;
        }
        ;
    
        progress.setText("@SYS4138");
        progress.setTotal(transCount);
        progress.setCount(0);
    
        ttsbegin;
    
        while select forupdate trans
            order by LineNumber desc
            where trans.JournalTransRefRecId == registerJournalTrans.RecId &&
                  trans.LineNumber           <= 0
        {
            createBody(false);
        }
        createFooter(strfmt("@GLS113676"));
    
        purge();
        while select forupdate trans
            order by LineNumber desc
            where trans.JournalTransRefRecId == registerJournalTrans.RecId &&
                  trans.LineNumber           <= 0
        {
            createBody(true);
        }
        createFooter(strfmt("@GLS116631"));
    
        if (amountTotal)
        {
            amountFooter = amountTotal;
            this.createFooterRecord("", i, 0, "@SYS9242");
        }
    
        ttscommit;
    }
]]></Source>
			</Method>
			<Method>
				<Name>tableOperation</Name>
				<Source><![CDATA[
    protected AmountMST tableOperation()
    {
        void insCon()
        {
            container con;
            RAssetSubGroupId subGroupId = rAssetStandards.subGroupId(rAssetTrans.ReportingDate);
    
            if (map.exists([rAssetStandards.AssetGroup, subGroupId]))
            {
                con = map.lookup([rAssetStandards.AssetGroup, subGroupId]);
            }
            map.insert([rAssetStandards.AssetGroup, subGroupId],
                       conins(con, conlen(con) + 1, [rAssetTrans.TransRecId]));
    
        }
    
        rTax25PeriodIterator.first();
    
        do
        {
            while select rAssetTrans
                where rAssetTrans.AccountNum      == rAssetTable.AccountNum                     &&
                      rAssetTrans.AccountingDate  >= rTax25PeriodIterator.fromDateAccounting()  &&
                      rAssetTrans.AccountingDate  <= rTax25PeriodIterator.toDateAccounting()    &&
                      rAssetTrans.ReportingDate   >= rTax25PeriodIterator.fromDateReporting()   &&
                      rAssetTrans.ReportingDate   <= rTax25PeriodIterator.toDateReporting()     &&
                      rAssetTrans.AssetStandardId == assetStandardId                            &&
                      (rAssetTrans.AssetTransType == RAssetTransType::Depreciation              ||
                       rAssetTrans.AssetTransType == RAssetTransType::DepreciationAdj)          &&
                      ! rAssetTrans.StornoRecId
            {
                insCon();
            }
        }
        while (rTax25PeriodIterator.next());
    
        return 1;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>