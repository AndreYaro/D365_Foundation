<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>NonSSRSPrintMgmtAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>NonSSRSPrintMgmtAdapter</c> used for adoptation of print management for excel reports
/// </summary>
abstract class NonSSRSPrintMgmtAdapter
{
    PrintMgmtReportRun      printMgmtReportRun;
    PrintMgmtDocumentType   printMgmtDocumentType;
    Args                    args;
    PrintCopyOriginal       printCopyOriginal;

    RecId                   recordId;
    NonSSRSPrintMgmtPromptExtensionParameters extensionsSettings;
    private boolean existsSSRS;
    #RusReportFormats

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>NonSSRSReportExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   All non-SSRS reports known by the adapter are executed
    /// </summary>
    /// <param name = "_caller">A caller - the adapter itself.</param>
    /// <param name = "_args">Arguments.</param>
    delegate void NonSSRSReportExecuted(NonSSRSPrintMgmtAdapter _caller, NonSSRSPrintMgmtAdapterReportExecutedEventArgs _args){}

]]></Source>
			</Method>
			<Method>
				<Name>nonSSRSPrompting</Name>
				<Source><![CDATA[
    /// <summary>
    ///   All non-SSRS reports known by the adapter are executed
    /// </summary>
    /// <param name = "_caller">A caller - the adapter itself.</param>
    /// <param name = "_args">Arguments.</param>
    static delegate void nonSSRSPrompting(Object _caller, NonSSRSPrintMgmtAdapterPromptingEventArgs _args)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeNonSSRSReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report associated with given <c>PrintMgmtPrintSettingDetail</c>
    /// </summary>
    /// <param name="_setting">
    /// <c>PrintMgmtPrintSettingDetail</c> object which holds parameters for report execution
    /// </param>
    protected void executeNonSSRSReport(PrintMgmtPrintSettingDetail _setting)
    {
        switch (_setting.parmReportFormatName())
        {
            case #Torg12M15                  :
                if (this.parmPrintMgmtDocumentType() == PrintMgmtDocumentType::SalesOrderInvoice)
                {
                    SalesPurchReport_RU::executeWithPrintMgmtTorg12M15(
                        args,
                        _setting,
                        recordId);

                    break;
                }
            case #Invoice4Paym               :
            case #ProductReceipt             :
                SalesPurchReport_RU::executeWithPrintMgmt(
                    this.parmPrintMgmtDocumentType(),
                    args,
                    _setting,
                    recordId);
                break;
            case #Facture                    :
                XMLExcelReport_Facture_RU::executeWithPrintMgmt(args, _setting, recordId);
                break;
            case #MX1                        :
                OXMLExcelReport_MX1::executeWithPrintMgmt(args, _setting, recordId);
                break;
            case #MX3                        :
                OXMLExcelReport_MX3::executeWithPrintMgmt(args, _setting, recordId);
                break;
            case #BillOfLading1T             :
                OXMLExcelReport_WMSBillOfLading::executeWithPrintMgmt(args, _setting, recordId);
                break;
            case #BillOfLadingTranspDocument :
                OXMLExcelReport_TransportInvoice::executeWithPrintMgmt(args, _setting, recordId);
                break;
            default:
        }

        var eventArgs = new NonSSRSPrintMgmtAdapterReportExecutedEventArgs();
        eventArgs.parmSettingDetail(_setting);
        eventArgs.parmRecordID(recordID);
        eventArgs.parmArgs(args);
        eventArgs.parmExtensionsSettings(extensionsSettings);
        this.NonSSRSReportExecuted(this, eventArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsSSRS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to determine if any SSRS reports present for given document
    /// </summary>
    /// <returns>
    /// True if there are SSRS reports
    /// </returns>
    public boolean existsSSRS()
    {
        return existsSSRS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>PrintMgmtNodeType</c> enumeration value of the node.
    /// </summary>
    /// <returns>
    /// The <c>PrintMgmtNodeType</c> enumeration value of the node.
    /// </returns>
    /// <remarks>
    /// New node types should be defined in the <c>PrintMgmtNodeType</c> enumeration and returned through
    /// this method.
    /// </remarks>
    abstract protected PrintMgmtNodeType getNodeType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to initialize this object
    /// </summary>
    abstract protected void initialize()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads instances of the <c>PrintMgmtPrintSettingDetail</c> class that are used for printing the
    ///    report.
    /// </summary>
    /// <param name="_jourTable">
    ///    The journal table that is currently being printed.
    /// </param>
    /// <param name="_transTable">
    ///    The table to which print management information has been related.
    /// </param>
    /// <param name="_languageId">
    ///    The language ID that should be used to retrieve footer text.
    /// </param>
    /// <param name="_documentKeyValue">
    ///    A human readable value that uniquely identifies the document to be printed.
    /// </param>
    public void loadPrintSettings(Common _jourTable, Common _transTable, str _languageId, str _documentKeyValue = '')
    {
        boolean isValidReference(Common _referencedTableBuffer)
        {
            PrintMgmtNodeInstance nodeInstance = new PrintMgmtNodeInstance();

            nodeInstance.parmNodeDefinition(PrintMgmtNode::construct(this.getNodeType()));
            nodeInstance.parmReferencedTableBuffer(_referencedTableBuffer);

            return nodeInstance.isValidReference();
        }

        void setSettingDetail(PrintMgmtDocInstanceType _type, SRSPrintDestinationSettings _defaultSettings)
        {
            PrintMgmtPrintSettingDetail printSettingDetail = new PrintMgmtPrintSettingDetail();

            PrintMgmtReportFormat       printMgmtReportFormat;

            printMgmtReportFormat = PrintMgmtReportFormat::findSystem(printMgmtDocumentType);

            printSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
            printSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);

            printSettingDetail.parmType(_type);

            printSettingDetail.parmInstanceName(enum2str(_type));

            // Since this will be reported to the screen, one copy is the only thing that makes sense
            printSettingDetail.parmNumberOfCopies(1);

            printSettingDetail.parmPrintJobSettings(_defaultSettings);

            printMgmtReportRun.loadSettingDetail(printSettingDetail, _documentKeyValue);
        }

        if (printCopyOriginal == PrintCopyOriginal::OriginalPrint && isValidReference(_transTable))
        {
            // Print an original
            printMgmtReportRun.load(_jourTable, _transTable, _languageId, _documentKeyValue);
        }
        else if (printCopyOriginal == PrintCopyOriginal::Copy)
        {
            // Print a copy
            setSettingDetail(PrintMgmtDocInstanceType::Copy, printMgmtReportRun.parmDefaultCopyPrintJobSettings());
        }
        else
        {
            // Print an original.  We also default to print one original when we are trying to
            // print using Print Mgmt information, but don't have a valid table reference.
            // This covers the reprint case where the original transaction record may not be present.
            setSettingDetail(PrintMgmtDocInstanceType::Original, printMgmtReportRun.parmDefaultOriginalPrintJobSettings());
        }

        if (!printMgmtReportRun.more())
        {
            checkFailed("@SYS78951");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReports</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes found print management settings
    /// </summary>
    protected void outputReports()
    {
        PrintMgmtPrintSettingDetail settingDetail;

        this.setRecordId();

        while (printMgmtReportRun.next())
        {
            settingDetail = printMgmtReportRun.settingDetail();

            if (settingDetail.parmSSRS() == PrintMgmtSSRS::NonSSRS)
            {
                this.executeNonSSRSReport(settingDetail);
            }
            else
            {
                existsSSRS = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
        public Args parmArgs(Args _args = args)
    {
        args = _args;
        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintMgmtDocumentType</Name>
				<Source><![CDATA[
        public PrintMgmtDocumentType parmPrintMgmtDocumentType(PrintMgmtDocumentType _printMgmtDocumentType = printMgmtDocumentType)
    {
        printMgmtDocumentType = _printMgmtDocumentType;
        return printMgmtDocumentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Searches for print management settings and then executes them
    /// </summary>
    abstract protected void runPrintMgmt()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method used to set record id parameter of record being processed
    /// </summary>
    abstract protected void setRecordId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of <c>NonSSRSPrintMgmtAdapter</c> class
    /// </summary>
    /// <param name="_printMgmtDocumentType">
    /// <c>PrintMgmtDocumentType</c> parameter, which determines type of document being printed
    /// </param>
    /// <returns>
    /// New instance of <c>NonSSRSPrintMgmtAdapter</c> class
    /// </returns>
    protected static NonSSRSPrintMgmtAdapter construct(PrintMgmtDocumentType _printMgmtDocumentType)
    {
        NonSSRSPrintMgmtAdapter           printMgmtAdapter;
        NonSSRSPrintMgmtAdapterAttribute  adapterAttribute = new NonSSRSPrintMgmtAdapterAttribute(_printMgmtDocumentType);

        printMgmtAdapter = SysExtensionAppClassFactory::getClassFromSysAttribute(
            classStr(NonSSRSPrintMgmtAdapter),
            adapterAttribute);

        return printMgmtAdapter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmtNonSSRS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes print management settings, which are associated with Non-SSRS report formats
    /// </summary>
    /// <param name="_printMgmtDocumentType">
    /// <c>PrintMgmtDocumentType</c> value which determines type of document being printed
    /// </param>
    /// <param name="_args">
    /// <c>Args</c> object with parameters of the report
    /// </param>
    /// <returns>
    /// True, if any SSRS reports exist, otherwise false
    /// </returns>
    /// <remarks>
    /// Method used to execute Non-SSRS reports in controller prior to SSRS reports.
    /// If no SSRS reports exist, execution should be stopped
    /// </remarks>
    public static boolean runPrintMgmtNonSSRS(PrintMgmtDocumentType _printMgmtDocumentType, Args _args)
    {
        NonSSRSPrintMgmtAdapter printMgmtAdapter = NonSSRSPrintMgmtAdapter::construct(_printMgmtDocumentType);

        printMgmtAdapter.parmArgs(_args);
        printMgmtAdapter.parmPrintMgmtDocumentType(_printMgmtDocumentType);

        printMgmtAdapter.initialize();
        printMgmtAdapter.runPrintMgmt();

        return printMgmtAdapter.existsSSRS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptAdditionalParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Prompts user for additional parameter for Non-SSRS print management 
    /// </summary>
    /// <param name = "_printMgmtContexts">List of print management print contexts (<c>PrintMgmtPrintContext</c> class).</param>
    /// <returns>A result.</returns>
    public static NonSSRSPrintMgmtAdapterPromptAdditionalParametersResult promptAdditionalParameters(
        List _printMgmtContexts)
    {
        if (!_printMgmtContexts)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        var details = NonSSRSPrintMgmtAdapter::getDetailsFromPrintContexts(_printMgmtContexts);        
        var formatNames = new Set(Types::String);
        var namedDestinations = new Map(Types::String, Types::Int64);
        var i = details.getEnumerator();
        while (i.moveNext())
        {
            PrintMgmtPrintSettingDetail current = i.current();
            formatNames.add(current.parmReportFormatName());
            namedDestinations.insert(current.parmReportFormatName(), current.parmNamedDestination());
        }

        var promptArgs = new NonSSRSPrintMgmtAdapterPromptingEventArgs(formatNames);

        if (!isFlightEnabled(LocalizationFlights::ForcePrintJobSettings))
        {
            promptArgs.parmDestinationAction(ERDestinationAction::Print);
        }
        else
        {
            promptArgs.parmDestinationAction(ERDestinationAction::View);
        }

        promptArgs.parmNamedDestinations(namedDestinations);

        NonSSRSPrintMgmtAdapter::nonSSRSPrompting(null, promptArgs);
        return NonSSRSPrintMgmtAdapterPromptAdditionalParametersResult::construct(
            promptArgs.parmPromptResult(), 
            !promptArgs.parmReportNames().empty(),
            promptArgs.getExtensionParameters());
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptAndRestoreAdditionalParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prompts and restores additional parameter for Non-SSRS print management.
    /// </summary>
    /// <param name = "_formatNamesDestination">The Map of format names and named destinations.</param>
    /// <param name = "_extensionParameters">Extension parameters.</param>
    /// <returns>A result.</returns>
    [Hookable(false)]
    public static NonSSRSPrintMgmtAdapterPromptAdditionalParametersResult promptAndRestoreAdditionalParameters(
        Map _formatNamesDestination,
        NonSSRSPrintMgmtPromptExtensionParameters _extensionParameters)
    {
        if (!_formatNamesDestination)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        var promptArgs = new NonSSRSPrintMgmtAdapterPromptingEventArgs(_formatNamesDestination.keySet());

        if (!isFlightEnabled(LocalizationFlights::ForcePrintJobSettings))
        {
            promptArgs.parmDestinationAction(ERDestinationAction::Print);
        }
        else
        {
            promptArgs.parmDestinationAction(ERDestinationAction::View);
        }

        promptArgs.parmNamedDestinations(_formatNamesDestination);

        ERFormatsDestinations initialFormatsDestinations = _extensionParameters
            ? _extensionParameters.get(classStr(ERPrintMgmtReportFormatSubscriber))
            : null;

        promptArgs.parmInitialFormatsDestinations(initialFormatsDestinations);

        NonSSRSPrintMgmtAdapter::nonSSRSPrompting(null, promptArgs);
        return NonSSRSPrintMgmtAdapterPromptAdditionalParametersResult::construct(
            promptArgs.parmPromptResult(),
            !promptArgs.parmReportNames().empty(),
            promptArgs.getExtensionParameters());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailsFromPrintContexts</Name>
				<Source><![CDATA[
    private static Set getDetailsFromPrintContexts(List _printContexts)
    {
        Set ret = new Set(Types::Class);
        var i = _printContexts.getEnumerator();
        while (i.moveNext())
        {
            ret = Set::union(ret, NonSSRSPrintMgmtAdapter::getDetailsFromPrintContext(i.current()));
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDetailsFromPrintContext</Name>
				<Source><![CDATA[
    private static Set getDetailsFromPrintContext(PrintMgmtPrintContext _context)
    {
        Set ret = new Set(Types::Class);
        var printSetting = PrintMgmt::getSettings(_context);
        for (var i=1; i<=printSetting.numDetails(); i++)
        {
            var current = printSetting.getDetailByPos(i);
            ret.add(current);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>srsPrintDestSettings2PrintJobSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts <c>SRSPrintDestinationSettings</c> to <c>PrintJobSettings</c>
    /// </summary>
    /// <param name="_srsPrintDestinationSettings">
    /// <c>SRSPrintDestinationSettings</c> to be converted
    /// </param>
    /// <returns>
    /// <c>PrintJobSettings</c> object, which is result of conversion
    /// </returns>
    public static PrintJobSettings srsPrintDestSettings2PrintJobSettings(SRSPrintDestinationSettings _srsPrintDestinationSettings)
    {
        PrintJobSettings printJobSettings = new PrintJobSettings();

        // printMedium
        switch (_srsPrintDestinationSettings.printMediumType())
        {
            case SRSPrintMediumType::Screen:
                printJobSettings.setTarget(PrintMedium::Screen);
                break;
            case SRSPrintMediumType::Printer:
                printJobSettings.setTarget(PrintMedium::Printer);
                break;
            case SRSPrintMediumType::File:
                printJobSettings.setTarget(PrintMedium::File);
                break;
            case SRSPrintMediumType::Email:
                printJobSettings.setTarget(PrintMedium::Mail);
                break;
            case SRSPrintMediumType::Custom:
                printJobSettings.setTarget(PrintMedium::ViewerClass);
                break;
            case SRSPrintMediumType::Archive:
                printJobSettings.setTarget(PrintMedium::PrintArchive);
                break;
        }
        // copies
        printJobSettings.copies(_srsPrintDestinationSettings.numberOfCopies());
        // format
        switch (_srsPrintDestinationSettings.fileFormat())
        {
            case SRSReportFileFormat::CSV:
                printJobSettings.format(PrintFormat::ASCII);
                break;
            case SRSReportFileFormat::Excel:
            case SRSReportFileFormat::Image:
            case SRSReportFileFormat::XML:
                printJobSettings.format(PrintFormat::RTF);
                break;
            case SRSReportFileFormat::HTML4_0:
            case SRSReportFileFormat::MHTML:
                printJobSettings.format(PrintFormat::HTML);
                break;
            case SRSReportFileFormat::PDF:
                printJobSettings.format(PrintFormat::PDF);
                break;
        }

        // fileName
        printJobSettings.fileName(_srsPrintDestinationSettings.fileName());
        // deviceName
        printJobSettings.deviceName(_srsPrintDestinationSettings.printerName());

        return printJobSettings;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>