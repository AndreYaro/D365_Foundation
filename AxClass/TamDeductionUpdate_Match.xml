<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TamDeductionUpdate_Match</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TAMDeductionUpdate_Match</c> class manages the update of deductions
/// for the match action.
/// </summary>
class TamDeductionUpdate_Match extends TAMDeductionUpdate
{
    TmpTAMDeductionParmMatch    tmpDeductionParmMatch;
    Map                         mapLJTransLineNumToCustTransOpen;
    Map                         mapLJTransLineNumToCurrencyCode;
    SpecTransManager            specTransManager;
    TAMDeductionUpdateHistory   deductionUpdateHistory;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(TmpTAMDeductionParmMatch _tmpDeductionParmMatch,
                       SpecTransManager         _specTransManager)
    {
        super(_tmpDeductionParmMatch);
        tmpDeductionParmMatch.setTmpData(_tmpDeductionParmMatch);

        specTransManager = _specTransManager;

        // Initialize map to remember transaction amounts (to mark for settlement later)
        mapLJTransLineNumToCustTransOpen = new Map(typeName2Type(extendedTypeStr(LineNum)),
                                                                Types::Record);

        mapLJTransLineNumToCurrencyCode = new Map(typeName2Type(extendedTypeStr(LineNum)),
                                                  typeName2Type(extendedTypeStr(CurrencyCode)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>numDeductions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of deductions.
    /// </summary>
    /// <returns>
    /// The number of deductions.
    /// </returns>
    private int numDeductions()
    {
        Set set;

        set = new Set(typeName2Type(extendedTypeStr(TAMDeductionID)));

        while select tmpDeductionParmMatch
        {
            set.add(tmpDeductionParmMatch.DeductionId);
        }

        return set.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temporary buffer that specifies match.
    /// </summary>
    /// <returns>
    /// The temporary buffer that specifies match.
    /// </returns>
    protected Common parmBuffer()
    {
        return tmpDeductionParmMatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the match form string.
    /// </summary>
    /// <returns>
    /// The match form string.
    /// </returns>
    protected str parmFormString()
    {
        return formStr(TAMDeductionParmMatch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTAMDeductionUpdateType</Name>
				<Source><![CDATA[
    protected TAMDeductionUpdateType parmTAMDeductionUpdateType()
    {
        return TAMDeductionUpdateType::Match;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Settles the customer transactions, given a list of <c>LedgerJournalTrans</c> records that just posted,
    /// created by that posting with the transactions specified for matching.
    /// </summary>
    /// <param name="_listLedgerJournalTrans">
    /// The list of <c>LedgerJournalTrans</c> records to use to settle the customer transactions.
    /// </param>
    private void settle(RecordSortedList _listLedgerJournalTrans)
    {
        CustTable                 custTable;
        CustTrans                 custTrans;
        CustTransOpen             custTransOpenDeduction;
        CustTransOpen             custTransOpenMatchCredit;
        LedgerJournalTrans        ledgerJournalTrans;
        LineNum                   lineNumber;
        CurrencyCode              currencyCode;
        AccountNum                accountNum;
        boolean                   loop;
        SpecTransManager          specTransManagerLocal;
        SpecTransExecutionContext context;

        loop = _listLedgerJournalTrans.first(ledgerJournalTrans);
        while (loop)
        {
            // Retrieve customer if customer account changed (or first record)
            if (!accountNum
                || accountNum != ledgerJournalTrans.parmAccount())
            {
                custTable = CustTable::find(ledgerJournalTrans.parmAccount());
                if (!custTable)
                {
                    throw error(strFmt("@SYS16734",
                                       ledgerJournalTrans.parmAccount()));
                }
                accountNum = ledgerJournalTrans.parmAccount();
                context = SpecTransExecutionContext::newFromSource(custTable);
                specTransManagerLocal = SpecTransManager::newFromSpec(context.parmSpecContext());
            }

            // Reread to get CustTransId value because CustTransId assigned during posting
            ledgerJournalTrans.reread();

            // Find CustTransOpen created by LedgerJournalTrans posting
            select custTransOpenDeduction
                join CurrencyCode from custTrans
                where custTransOpenDeduction.RefRecId == custTrans.RecId
                    && custTrans.RecId == ledgerJournalTrans.CustTransId;
            if (!custTransOpenDeduction)
            {
                // Should not occur.  Open transaction should still exist for customer transaction
                // created by deduction debit posting.  Relying on catch in update to report that
                // error occurred.
                throw Exception::Error;
            }

            // Mark CustTransOpen (deduction (customer debit))
            specTransManagerLocal.insert(curext(),
                                         custTransOpenDeduction.TableId,
                                         custTransOpenDeduction.RecId,
                                         custTransOpenDeduction.AmountCur,
                                         custTrans.CurrencyCode);

            // Find CustTransOpen that deduction matched against (found earlier and saved in map)
            lineNumber = ledgerJournalTrans.LineNum;
            custTransOpenMatchCredit = mapLJTransLineNumToCustTransOpen.lookup(lineNumber);
            currencyCode = mapLJTransLineNumToCurrencyCode.lookup(lineNumber);

            // Mark CustTransOpen (transaction to match against (customer credit))
            specTransManagerLocal.insert(curext(),
                                         custTransOpenMatchCredit.TableId,
                                         custTransOpenMatchCredit.RecId,
                                         custTransOpenMatchCredit.AmountCur,
                                         currencyCode);

            // Settle transactions
            CustTrans::settleTransaction(context, CustTransSettleTransactionParameters::construct());

            // Delete transaction marking
            specTransManagerLocal.deleteAll();

            // Advance to next LedgerJournalTrans record
            loop = _listLedgerJournalTrans.next(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the prompt if more than one transaction is selected for match
    /// and the deduction amount will completely settle all transactions selected.
    /// </summary>
    /// <returns>
    /// true if the prompt should be shown; otherwise, false.
    /// </returns>
    protected boolean showPrompt()
    {
        boolean     ret;

        ret = super();

        // If super() indicates to not show form then do no more checking
        if (!ret)
        {
            return false;
        }

        // If just one record then no need to show form
        select count(RecId) from tmpDeductionParmMatch;
        if (tmpDeductionParmMatch.RecId == 1)
        {
            return false;
        }

        if (this.numDeductions() == 1)
        {
            // One deduction to multiple transactions.  Show form if there is any transaction that
            // will have a remainder amount.
            while select tmpDeductionParmMatch
            {
                if (tmpDeductionParmMatch.MatchAmountCur <
                    abs(tmpDeductionParmMatch.TransAmountConverted))
                {
                    return true;
                }
            }
            // Every transaction matched completely, no need to show form
            return false;
        }
        // More than one deduction (currently not supported so should not happen)
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the match on the deduction.
    /// </summary>
    protected void update()
    {
        #OCCRetryCount
        CustTrans               custTrans;
        CustTransOpen           custTransOpen;
        TAMDeduction            deduction;
        LedgerJournalTable      ledgerJournalTable;
        LedgerJournalTrans      ledgerJournalTrans;
        LedgerJournalCheckPost  ledgerJournalCheckPost;
        RecordSortedList        listLedgerJournalTrans;
        TAMDeductionID          tamDeductionID;
        TAMPromotionParameters  tamPromotionParameters;
        TAMDeductionUpdateHistory   deductionUpdateHistoryLocal;
        TAMDeductionUpdateHistory   deductionUpdateHistoryLocalOrig;
        LedgerJournalTrans      ledgerJournalTransOrig;

        this.initLedgerJournalTable(ledgerJournalTable);

        // Store LedgerJournalTrans in a list.  Purpose is to initialize outside TTS
        // and insert all records at once inside TTS
        listLedgerJournalTrans = new RecordSortedList(tableNum(LedgerJournalTrans));
        listLedgerJournalTrans.sortOrder(fieldNum(LedgerJournalTrans, LineNum));

        // For each transaction specified by match parameter records
        while select tmpDeductionParmMatch
        {
            select custTransOpen
                where custTransOpen.RecId == tmpDeductionParmMatch.CustTransOpenRecId
                join CurrencyCode from custTrans
                where custTrans.RecId   == custTransOpen.RefRecId
                    && custTrans.AccountNum == custTransOpen.AccountNum;

            // Retrieve deduction if deduction ID changed (or first record)
            if (!tamDeductionID
                || tamDeductionID != tmpDeductionParmMatch.DeductionId)
            {
                deduction = TAMDeduction::find(tmpDeductionParmMatch.DeductionId);
                tamDeductionID = deduction.tamDeductionID;
            }

            // Initialize LedgerJournalTrans and add to list
            this.initLedgerJournalTrans(ledgerJournalTrans,
                                        deduction,
                                        tmpDeductionParmMatch.MatchAmountCur);

            listLedgerJournalTrans.ins(ledgerJournalTrans);

            // Store CustTransOpen record and currency code for settlement later
            if (mapLJTransLineNumToCustTransOpen.exists(ledgerJournalTrans.LineNum))
            {
                // Should not occur since line number being assigned in initLedgerJournalTrans
                throw Exception::Error;
            }
            else
            {
                mapLJTransLineNumToCustTransOpen.insert(ledgerJournalTrans.LineNum,
                                                        custTransOpen);

                mapLJTransLineNumToCurrencyCode.insert(ledgerJournalTrans.LineNum,
                                                       custTrans.CurrencyCode);
            }

            //Find original reversed line if any
            select firstonly RecId from deductionUpdateHistoryLocalOrig
                exists join ledgerJournalTransOrig
                where deductionUpdateHistoryLocalOrig.LedgerJournalTransRecId == ledgerJournalTransOrig.RecId
                    && ledgerJournalTransOrig.CustTransId == custTrans.RecId;

            if (deductionUpdateHistoryLocalOrig.RecId)
            {
                this.initMapLJTransLineNumToSourceRecId(ledgerJournalTrans.LineNum, deductionUpdateHistoryLocalOrig.RecId);
            }
        }

        try
        {
            ttsbegin;
            ledgerJournalTable = this.insertJournalAndLines(ledgerJournalTable, listLedgerJournalTrans);

            // Post journal
            ledgerJournalCheckPost = LedgerJournalCheckPost::newLedgerJournalTable(ledgerJournalTable, NoYes::Yes);
            ledgerJournalCheckPost.parmBeQuiet(true);

            tamPromotionParameters = TAMPromotionParameters::find();

            LedgerJournalCheckPost::processOperation(ledgerJournalCheckPost);

            // Settle posted deduction transactions (customer debits) against transactions
            // (customer credits) selected for matching.
            this.settle(listLedgerJournalTrans);
            // Delete previous marking done by specification object passed to object.  This way
            // relevant transactions stay marked until settlement occurs after matching journal posts.
            specTransManager.deleteAll();

            // Update deductions and history
            this.updateDeductionsAfterPost();
            this.insertDeductionUpdateHistory(listLedgerJournalTrans);

            select forupdate deductionUpdateHistoryLocal
            where deductionUpdateHistoryLocal.TAMDeductionID == tamDeductionID && deductionUpdateHistoryLocal.LedgerJournalId == ledgerJournalTable.JournalNum;

            deductionUpdateHistoryLocal.CustTransOpenRecId = custTransOpen.RecId;
            deductionUpdateHistoryLocal.update();

            ttscommit;
            this.parmUpdateOccurred(true);
        }
        catch (Exception::Error)
        {
            error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeductionsAfterPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates each deduction for the match action.
    /// </summary>
    /// <remarks>
    ///  Updates each deduction by adding total amount matched to match amount and
    /// subtractracting total amount matched from remaining amount
    /// and if no more amount is remaining then sets status to closed.
    /// </remarks>
    private void updateDeductionsAfterPost()
    {
        TAMDeduction     deduction;

        while select sum(MatchAmountCur) from tmpDeductionParmMatch
            group by DeductionId
        {
            deduction = TAMDeduction::find(tmpDeductionParmMatch.DeductionId, true);

            deduction.MatchAmountCur  += tmpDeductionParmMatch.MatchAmountCur;
            deduction.RemainAmountCur -= tmpDeductionParmMatch.MatchAmountCur;

            if (deduction.RemainAmountCur == 0)
            {
                deduction.tamDeductionStatus = TAMDeductionStatus::Closed;
            }
            if (deduction.validateWrite())
            {
                deduction.update();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that deduction and transactions.
    /// </summary>
    /// <returns>
    /// true when the deduction is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Check that match amount is not greater than transaction amount is done in validate write
    /// of <c>TmpTAMDeductionParmMatch</c>.
    /// </remarks>
    protected boolean validate()
    {
        CustTransOpen           custTransOpen;
        TAMDeduction            deduction;
        Map                     mapDeductionIdToMatchAmount;
        Set                     setDeductionsWarned;
        AmountCur               matchAmount;
        boolean                 ret;
        ret = true;

        mapDeductionIdToMatchAmount = new Map(typeName2Type(extendedTypeStr(TAMDeductionID)),
                                              typeName2Type(extendedTypeStr(AmountCur)));

        setDeductionsWarned = new Set(typeName2Type(extendedTypeStr(TAMDeductionID)));

        while select tmpDeductionParmMatch
        {
            deduction = TAMDeduction::find(tmpDeductionParmMatch.DeductionId);

            // Account of deduction and transaction must match
            // Can't retrieve CustTransOpen records in join due to temp table.
            select AccountNum from custTransOpen
                where custTransOpen.RecId == tmpDeductionParmMatch.CustTransOpenRecId;

            if (deduction.AccountNum != custTransOpen.AccountNum)
            {
                ret = checkFailed(strFmt("@MCR27667",
                                         deduction.tamDeductionID,
                                         deduction.AccountNum));
            }

            // Sum of match amounts can't be greater than remaining amount of deduction
            if (mapDeductionIdToMatchAmount.exists(deduction.tamDeductionID))
            {
                matchAmount = mapDeductionIdToMatchAmount.lookup(deduction.tamDeductionID);
            }
            else
            {
                matchAmount = 0;
            }
            matchAmount += tmpDeductionParmMatch.MatchAmountCur;
            mapDeductionIdToMatchAmount.insert(deduction.tamDeductionID, matchAmount);

            // Only warn user if haven't already warned
            if (deduction.RemainAmountCur < matchAmount && ! setDeductionsWarned.in(deduction.tamDeductionID))
            {
                ret = checkFailed(strFmt("@MCR27669",
                                         deduction.tamDeductionID));

                setDeductionsWarned.add(deduction.tamDeductionID);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a match update object given temporary records that specify what to match and specification
    /// object.
    /// </summary>
    /// <param name="_tmpDeductionParmMatch">
    /// The temporary records used to build the match.
    /// </param>
    /// <param name="_specTransManager">
    /// The specification object used to the build the match.
    /// </param>
    /// <returns>
    /// The initialized deduction update match update.
    /// </returns>
    /// <remarks>
    /// Specification object allows transactions to remain marked for settlement until match begins
    /// and prevent any other process from marking the transactions for settlement.
    /// </remarks>
    public static TAMDeductionUpdate_Match construct(TmpTAMDeductionParmMatch _tmpDeductionParmMatch,
                                                     SpecTransManager         _specTransManager)
    {
        TAMDeductionUpdate_Match tamDeductionUpdate_Match;
        tamDeductionUpdate_Match = new TAMDeductionUpdate_Match(_tmpDeductionParmMatch, _specTransManager);
        return tamDeductionUpdate_Match;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>