<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ELedgerAccountingAuxLedger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ELedgerAccountingAuxLedger</c> creates the auxiliary ledger temporary data
/// and calls GER Mapping that consumes it.
/// </summary>
public class ELedgerAccountingAuxLedger extends ELedgerAccountingLedgerBalance
{
    ELedgerAccountingAuxLedgerTmp               auxLedgerTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLine</Name>
				<Source><![CDATA[
    private void createLine(MainAccountNum _mainAccountId)
    {
        MainAccount mainAccount = MainAccount::findByMainAccountId(_mainAccountId);

        AmountMST   openingBalanceAmount;
        AmountMST   endingBalanceAmount;

        ledgerBalanceOpened.calculateBalance(mainAccount);
        ledgerBalanceOpening.calculateBalance(mainAccount);
        ledgerBalanceDebitCredit.calculateBalance(mainAccount);

        if (MexicanAuxiliaryLedgerXMLReportFlight::instance().isEnabled())
        {
            openingBalanceAmount = ledgerBalanceOpened.getAccountingCurrencyBalance();
        }
        else
        {
            openingBalanceAmount = ledgerBalanceOpened.getAccountingCurrencyBalance() + ledgerBalanceOpening.getAccountingCurrencyBalance();
        }
        endingBalanceAmount = this.endingBalance(mainAccount,
                                            openingBalanceAmount,
                                            ledgerBalanceDebitCredit.getAccountingCurrencyDebitBalance(),
                                            ledgerBalanceDebitCredit.getAccountingCurrencyCreditBalance());

        auxLedgerTmp.MainAccountId = mainAccount.MainAccountId;
        auxLedgerTmp.AccountName = mainAccount.Name;
        auxLedgerTmp.OpeningBalance = openingBalanceAmount;
        auxLedgerTmp.EndingBalance = endingBalanceAmount;
        auxLedgerTmp.FromDate = fromDate;
        auxLedgerTmp.ToDate = toDate;
        auxLedgerTmp.IncludeClosingTransactions = contract.parmIncludeClosingPeriods();

        auxLedgerTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    private Query getQuery()
    {
        Query query;
        QueryBuildDataSource qbdsMA, qbdsDAVC, qbdsGJE, qbdsGJAE, qbdsFCP;

        query = new Query();
        qbdsMA = query.adddataSource(tableNum(MainAccount));
        qbdsMA.addSelectionField(fieldNum(MainAccount, RecId));
        qbdsMA.addSelectionField(fieldNum(MainAccount, MainAccountId));
        qbdsMA.addSelectionField(fieldNum(MainAccount, Type));
        qbdsMA.addSelectionField(fieldNum(mainAccount, LedgerChartOfAccounts));
        qbdsMA.addSelectionField(fieldNum(MainAccount, Name));
        qbdsMA.addOrderByField(fieldNum(mainAccount, MainAccountId));
        qbdsMA.addGroupByField(fieldNum(mainAccount, MainAccountId));

        qbdsDAVC = qbdsMA.addDataSource(tableNum(DimensionAttributeValueCombination));
        qbdsDAVC.relations(true);
        qbdsDAVC.joinMode(JoinMode::ExistsJoin);
        qbdsDAVC.addSelectionField(fieldNum(DimensionAttributeValueCombination, MainAccount));

        qbdsGJAE = qbdsDAVC.addDataSource(tableNum(GeneralJournalAccountEntry));
        qbdsGJAE.relations(true);
        qbdsGJAE.joinMode(JoinMode::ExistsJoin);

        qbdsGJE = qbdsGJAE.addDataSource(tableNum(GeneralJournalEntry));
        qbdsGJE.relations(true);
        qbdsGJE.joinMode(JoinMode::ExistsJoin);
        qbdsGJE.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(SysQuery::range(fromDate, toDate));
        qbdsGJE.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(SysQuery::value(Ledger::current()));
        qbdsGJE.addRange(fieldNum(GeneralJournalEntry, PostingLayer)).value(SysQuery::value(OperationsTax::Current));

        qbdsFCP = qbdsGJE.addDataSource(tableNum(FiscalCalendarPeriod));
        qbdsFCP.relations(true);
        qbdsFCP.joinMode(JoinMode::ExistsJoin);
        qbdsFCP.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Operating));

        if (contract.parmIncludeClosingPeriods())
        {
            qbdsFCP.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Opening));
            qbdsFCP.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Closing));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new xml formatter class
    /// </summary>
    /// <param name="_contract">
    /// The contract instance with necessary parameters
    /// </param>
    protected void new(EledgerAccountingContract _contract)
    {
        super(_contract);

        formatMapping = LedgerParameters::find().ELedgerAccountingAuxiliaryLedgerFormatMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the auxiliary ledger query.
    /// </summary>
    protected void processQuery()
    {
        QueryRun                        queryRun;

        MainAccount                     mainAccount;

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            GeneralLedgerBalanceProvider::getBalanceStatus(Ledger::current());
        }
        else
        {
            DimensionFocusUpdateBalance::updateBalance(
                DimensionHierarchy::findByTypeAndName(DimensionHierarchyType::Focus, DimensionHierarchy::getMainAccountFocus().Name), true);
        }

        this.initializeLedgerBalances();

        queryRun = new queryRun(this.getQuery());

        ttsbegin;

        while (queryRun.next())
        {
            mainAccount  = queryRun.get(tableNum(MainAccount));
            this.createLine(mainAccount.MainAccountId);
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupFormatMappingRunParameters</Name>
				<Source><![CDATA[
    protected void setupFormatMappingRunParameters()
    {
        formatMappingRun.withParameter(new ERModelDefinitionDatabaseContext()
                .addTemporaryTable(auxLedgerTmp)
                .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ELedgerAccountingAuxLedger construct(EledgerAccountingContract _contract)
    {
        return new ELedgerAccountingAuxLedger(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies the file name
    /// </summary>
    /// <returns>
    /// The string that represents file name
    /// </returns>
    public Filename fileName()
    {
        return strFmt('%1%2XC', reportHeader.getRFC(), date2str(toDate, 321, 0, 0, 2, 0, 4, DateFlags::None));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>