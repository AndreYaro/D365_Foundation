<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocumentDescriptorGeneralJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the tax document bundler for normal general journal.
/// </summary>
[TaxableDocumentDescriptorAttribute("General journal", "GeneralJour")]
public class TaxableDocumentDescriptorGeneralJournal extends TaxableDocumentDescriptorBase
    implements TaxableDocumentTypeDefinitionGeneralJournalInvoice,
                TaxableDocumentTypeDefinitionGeneralJournalCustInvoice,
                TaxableDocumentTypeDefinitionGeneralJournalProjectInvoice,
                TaxableDocumentTypeDefinitionGeneralJournalVendInvoice,
                TaxableDocumentTypeDefinitionGeneralJournalTaxJournal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineDistributionSide</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get distribution side for the ledgerJournalTrans.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The <c>LedgerJournalTrans</c>.</param>
    /// <returns>The distribution side.</returns>
    private TaxAccountingPostingProfileDistributionSide determineDistributionSide(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxAccountingPostingProfileDistributionSide ret = TaxAccountingPostingProfileDistributionSide::Auto;

        if (LedgerJournalTrans::isCustomerInvoice(_ledgerJournalTrans)
            || LedgerJournalTrans::isGeneralInvoice(_ledgerJournalTrans)
            || LedgerJournalTrans::isCustomerPayment(_ledgerJournalTrans))
        {
            ret = TaxAccountingPostingProfileDistributionSide::Credit;
        }

        if (LedgerJournalTrans::isVendorInvoice(_ledgerJournalTrans)
            || LedgerJournalTrans::isVendorPayment(_ledgerJournalTrans))
        {
            ret = TaxAccountingPostingProfileDistributionSide::Debit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data provider.
    /// </summary>
    /// <returns>
    /// The data provider instance.
    /// </returns>
    public ITaxableDocumentDataProvider getDataProvider()
    {
        return new TaxableDocGeneralJournalDataProvider(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSide</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default distribution side for the transaction.
    /// </summary>
    /// <returns>The default distribution side for the transaction.</returns>
    public TaxAccountingPostingProfileDistributionSide getDistributionSide()
    {
        TaxAccountingPostingProfileDistributionSide ret;
        TaxEngineLedgerJournalTransHeader  ledgerJournalTransHeader = rootTable as TaxEngineLedgerJournalTransHeader;
        LedgerJournalTrans                 ledgerJournalTrans;

        while select ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == ledgerJournalTransHeader.JournalNum
                && ledgerJournalTrans.Voucher == ledgerJournalTransHeader.Voucher
            {
                ret = this.determineDistributionSide(ledgerJournalTrans);
                if (ret != TaxAccountingPostingProfileDistributionSide::Auto)
                {
                    break;
                }
            }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTaxableDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decide which taxable document type base on the root record.
    /// </summary>
    /// <returns>The interface name of the taxable document type.</returns>
    public ClassName getSourceTaxableDocumentType()
    {
        ClassName ret;
        TaxEngineLedgerJournalTransHeader ledgerJournalTransHeader = rootTable as TaxEngineLedgerJournalTransHeader;

        ret = TaxEngineLedgerJournalTransHeader::determineTaxableDocumentType(ledgerJournalTransHeader.JournalNum, ledgerJournalTransHeader.Voucher);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxAdjustable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is tax adjustable for this transaction
    /// </summary>
    /// <returns>
    /// True if tax is adjustable; otherwise, false.
    /// </returns>
    public boolean isTaxAdjustable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxableDocumentRootRecord</Name>
				<Source><![CDATA[
    protected void setTaxableDocumentRootRecord(Common _rootRecord)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans ledgerJournalTransLoc;

        if (_rootRecord.TableId == tableNum(TaxEngineLedgerJournalTransHeader))
        {
            rootTable = _rootRecord;
        }
        else
        {
            ledgerJournalTrans = _rootRecord;

            rootTable = TaxEngineLedgerJournalTransHeader::findOrCreateByJourNumVoucher(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSkipTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init skipTaxDocument attribute
    /// </summary>
    protected void initSkipTaxDocument()
    {
        super();

        if (!skipTaxDocument)
        {
            skipTaxDocument = this.getSourceTaxableDocumentType() == classStr(TaxableDocumentTypeDefinition);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPersistTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if tax document should be persisted in database.
    /// </summary>
    /// <returns>True if the tax document should be persisted; otherwise, false.</returns>
    public boolean shouldPersistTaxDocument()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>