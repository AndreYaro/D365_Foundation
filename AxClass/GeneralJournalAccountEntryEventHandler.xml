<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralJournalAccountEntryEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles events for the <c>GeneralJournalAccountEntry</c> table.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class GeneralJournalAccountEntryEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateLedgerAccountV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// This event handlers updates the <c>LedgerAccount</c> values based on changes in the dimension attribute values.
    /// </summary>
    /// <param name="_e">
    /// The <c>DimensionAttributeValueChangeEventArgs</c> object containing event arguments.
    /// </param>
    [SubscribesTo(classStr(DimensionValueRenameDelegates), delegateStr(DimensionValueRenameDelegates, dimensionAttributeValuesChanged))]
    public static void updateLedgerAccountV2(DimensionAttributeValueChangeEventArgs _e)
    {
        GeneralJournalAccountEntryEventHandler::updateLedgerAccount(_e);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// This event handlers updates the <c>LedgerAccount</c> values based on changes in the dimension attribute values.
    /// </summary>
    /// <param name="_e">
    /// The <c>DimensionAttributeValueChangeEventArgs</c> object containing event arguments.
    /// </param>
    [SubscribesTo(classStr(DimensionValueRename), delegateStr(DimensionValueRename, dimensionAttributeValuesChanged))]
    public static void updateLedgerAccount(DimensionAttributeValueChangeEventArgs _e)
    {
        SetEnumerator dimAttrValuesEnumerator;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        DimensionAttributeValueCombination dimensionAttributeValueCombination;
        DimensionAttributeValueGroupCombination dimensionAttributeValueGroupCombination;
        DimensionAttributeLevelValue dimensionAttributeLevelValue;
        Set renamedDimensionAttributeValues;

        renamedDimensionAttributeValues = _e.parmRenamedDimensionAttributeValues();

        if (renamedDimensionAttributeValues == null || renamedDimensionAttributeValues.elements() == 0)
        {
            return;
        }

        dimAttrValuesEnumerator = renamedDimensionAttributeValues.getEnumerator();

        while (dimAttrValuesEnumerator.moveNext())
        {
            update_recordSet generalJournalAccountEntry setting
                LedgerAccount = dimensionAttributeValueCombination.DisplayValue
                join DisplayValue from dimensionAttributeValueCombination where
                    dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                exists join dimensionAttributeValueGroupCombination where
                    dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == dimensionAttributeValueCombination.RecId &&
                    dimensionAttributeValueGroupCombination.DimensionAttributeValueCombination == generalJournalAccountEntry.LedgerDimension
                exists join dimensionAttributeLevelValue where
                    dimensionAttributeLevelValue.DimensionAttributeValueGroup == dimensionAttributeValueGroupCombination.DimensionAttributeValueGroup &&
                    dimensionAttributeLevelValue.DimensionAttributeValue == dimAttrValuesEnumerator.current();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DimensionSegmentSeparatorDataUpdate_updateDisplayValueData</Name>
				<Source><![CDATA[
    [SubscribesTo(classStr(DimensionSegmentSeparatorDataUpdate), delegateStr(DimensionSegmentSeparatorDataUpdate, updateDisplayValueData))]
    public static void DimensionSegmentSeparatorDataUpdate_updateDisplayValueData(DimensionSegmentSeparatorDataUpdateTmp _updatedDisplayValues)
    {
        if (GeneralJournalAccountEntryEventHandlerUpdateByChunkFlight::instance().isEnabled())
        {
            GeneralJournalAccountEntryEventHandler::updateLedgerAccountInGeneralJournalAccountEntry(_updatedDisplayValues);
        }
        else
        {
            ttsbegin;

            GeneralJournalAccountEntry generalJournalAccountEntry;

            GeneralJournalAccountEntryEventHandler::skipMethods(generalJournalAccountEntry);

            update_recordset generalJournalAccountEntry
                setting LedgerAccount = _updatedDisplayValues.NewDisplayValue
                join NewDisplayValue from _updatedDisplayValues
                    where _updatedDisplayValues.LedgerDimension == generalJournalAccountEntry.LedgerDimension;

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerAccountInGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    private static void updateLedgerAccountInGeneralJournalAccountEntry(DimensionSegmentSeparatorDataUpdateTmp _updatedDisplayValues)
    {
        const int MaximumRetries = 4;
        int backOffWait = RandomGenerate::construct().randomInt(50, 500);

        GeneralJournalAccountEntry generalJournalAccountEntry;
        select maxof(RecId) from generalJournalAccountEntry;
        RecId maxRecId = generalJournalAccountEntry.RecId;

        RefRecId fromRecId;
        RefRecId toRecId;
        int throttleTotal = 30000;
        boolean isRunnable = true;

        try
        {
            GeneralJournalAccountEntryEventHandler::skipMethods(generalJournalAccountEntry);

            while (isRunnable)
            {
                ttsbegin;

                fromRecId = GeneralJournalAccountEntryEventHandler::getNextFromRecId(toRecId);
                toRecId = fromRecId + throttleTotal;
                isRunnable = maxRecId >= toRecId;

                update_recordset generalJournalAccountEntry
                    setting LedgerAccount = _updatedDisplayValues.NewDisplayValue
                    join NewDisplayValue from _updatedDisplayValues
                        where _updatedDisplayValues.LedgerDimension == generalJournalAccountEntry.LedgerDimension
                            && generalJournalAccountEntry.RecId >= fromRecId && generalJournalAccountEntry.RecId < toRecId;
            
                ttscommit;
            }
        }
        catch(Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                int currentRetryCount = xSession::currentRetryCount();

                if (currentRetryCount <= MaximumRetries)
                {
                    sleep(currentRetryCount * backOffWait);
                    toRecId = max(toRecId - throttleTotal, 0);

                    retry;
                }
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {

            if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
            {
                toRecId = max(toRecId - throttleTotal, 0);
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::Deadlock)
        {
            int currentRetryCount = xSession::currentRetryCount();

            if (currentRetryCount <= MaximumRetries)
            {
                sleep(currentRetryCount * backOffWait);
                toRecId = max(toRecId - throttleTotal, 0);

                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextFromRecId</Name>
				<Source><![CDATA[
    private static RefRecId getNextFromRecId(RefRecId _fromRecId)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;

        select minof(RecId) from generalJournalAccountEntry
            where generalJournalAccountEntry.RecId >= _fromRecId;

        return generalJournalAccountEntry.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMethods</Name>
				<Source><![CDATA[
    private static void skipMethods(Common _common, boolean _skip = true)
    {
        _common.skipDataMethods(_skip);
        _common.skipDatabaseLog(_skip);
        _common.skipEvents(_skip);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>