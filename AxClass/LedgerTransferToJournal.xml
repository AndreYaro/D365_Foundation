<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransferToJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransferToJournal</c> class transfers journal lines to a new journal.
/// </summary>
class LedgerTransferToJournal extends LedgerJournalSave
{
    // The following fields can be directly  persisted to a
    // container as they are primitive data types.
    Voucher             fromVoucher;
    Voucher             toVoucher;
    userId              transferredBy;
    LedgerJournalId     fromLedgerJournalId;
    LedgerJournalTable  newLedgerJournalTable;
    boolean             transferWhenPosting;
    AmountCur           taxAmountCur;

    // <GIN>
    boolean             formulaWithPriceInclTax;
    // </GIN>

    // The following fields cannot be directly persisted to a
    // container as they are object type.
    QueryRun            queryRun;

    // This list defines which fields will be persisted and
    // restored via the system's SysLastValue functionality.
    #DEFINE.SysLastValuesCurrentVersion(100)
    #LOCALMACRO.SysLastValuesList
        toLedgerJournalId
    #ENDMACRO

    #DEFINE.SysLastValuesForkedFromVersion(4) // Defines what version of CurrentList that
    // SysLastValuesList forked from.

    // This list defines how the object is serialized and unserialized
    // as it is sent across the wire. This list should contain all non-
    // object types defined on this class declaration.
    #DEFINE.CurrentVersion(6)
    #LOCALMACRO.CurrentList
        fromVoucher,
        toVoucher,
        transferredBy,
        fromLedgerJournalId,
        toLedgerJournalId,
        newLedgerJournalTable,
        transferWhenPosting,
        taxAmountCur,
        formulaWithPriceInclTax
    #ENDMACRO

    #DEFINE.Version5(5)
    #LOCALMACRO.CurrentListV5
        fromVoucher,
        toVoucher,
        transferredBy,
        fromLedgerJournalId,
        newLedgerJournalTable,
        transferWhenPosting,
        taxAmountCur
    #ENDMACRO

    #DEFINE.Version4(4)
    #LOCALMACRO.CurrentListV4
        toLedgerJournalId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMenuItem</Name>
				<Source><![CDATA[
    void addMenuItem(DialogRunbase dialog)
    {
        dialog.addMenuItemButton(MenuItemType::Display, menuitemDisplayStr(RunBaseQueryDialog), DialogMenuItemGroup::BottomGrp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewLedgerTable</Name>
				<Source><![CDATA[
    void createNewLedgerTable()
    {
        newLedgerJournalTable.JournalName = LedgerJournalTable::find(fromLedgerJournalId).JournalName;
        newLedgerJournalTable.JournalNum  = toLedgerJournalId;
        newLedgerJournalTable.Name        = "@SYS57805";
        newLedgerJournalTable.JournalType = LedgerJournalType::VendInvoicePool;
        newLedgerJournalTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogToJournalNameType</Name>
				<Source><![CDATA[
    protected extendedDataTypeName dialogToJournalNameType()
    {
        return extendedTypeStr(LedgerJournalNameIdApproval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogToJournalNumType</Name>
				<Source><![CDATA[
    protected extendedDataTypeName dialogToJournalNumType()
    {
        return extendedTypeStr(LedgerJournalIdApproval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerJournalTrans</Name>
				<Source><![CDATA[
    void insertLedgerJournalTrans(LedgerJournalTable _ledgerJournalTable, LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalOldTrans   = _ledgerJournalTrans;
        LedgerJournalTrans  ledgerJournalNewTrans;
        LedgerJournalTrans_Project  ledgerJournalNewTrans_Project;
        AmountCur           amountCur;
        AmountCur           taxAmountToSubtract;
        TaxTrans            taxTrans;
        //  Is the old Journal's "Amount incl. sales tax:" checkbox marked?
        boolean             ledgerJournalInclTax = ledgerJournalOldTrans.ledgerJournalTable().LedgerJournalInclTax;

        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>

        // <GTE>
        ITaxableDocument            taxableDocument;
        ITaxDocument                taxDocumentObject;
        // </GTE>

        // <GIN>
        LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExtensionIN;
        amountCur                           withholdTaxAmount;
        boolean                             isIndiaTaxEnabled = TaxParameters::checkTaxParameters_IN();
        boolean                             isIndiaWithholdTaxEnabled = TaxWithholdParameters_IN::checkTaxParameters();
        LedgerJournalTransTaxExtensionIN    ledgerJournalTransTaxExt;
        #ISOCountryRegionCodes

        if (isIndiaTaxEnabled)
        {
            formulaWithPriceInclTax = FormulaDesigner_IN::isPriceInclTaxOnLineAmount(ledgerJournalOldTrans.TaxItemGroup);
        }

        if (isIndiaWithholdTaxEnabled)
        {
            ledgerJournalTransTaxExt = ledgerJournalOldTrans.ledgerJournalTransTaxExtensionIN();
            withholdTaxAmount = ledgerJournalEngine_Server::getWithholdTaxAmount_IN(ledgerJournalOldTrans.VendTransId, ledgerJournalTransTaxExt.tdsGroup, ledgerJournalTransTaxExt.tcsGroup);
        }
        // </GIN>

        ledgerJournalOldTrans.TransferredBy      = curUserId();
        ledgerJournalOldTrans.TransferredOn      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalOldTrans.TransferredTo      = toLedgerJournalId;
        ledgerJournalOldTrans.update();

        ledgerJournalNewTrans.clear();
        ledgerJournalNewTrans = ledgerJournalOldTrans.data();
        // <GTH>
        ledgerJournalNewTrans.SysExtensionSerializerMap::copyExtensionTableData(ledgerJournalOldTrans);
        // </GTH>

        ledgerJournalNewTrans.JournalNum          = toLedgerJournalId;
        ledgerJournalNewTrans.TransferredBy       = curUserId();
        ledgerJournalNewTrans.TransferredOn       = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        ledgerJournalNewTrans.Transferred         = NoYes::Yes;
        ledgerJournalNewTrans.NoEdit              = NoYes::Yes;
        ledgerJournalNewTrans.LineNum = LedgerJournalTrans::lastLineNum(toLedgerJournalId) + 1;

        switch (ledgerJournalOldTrans.AccountType)
        {
            case LedgerJournalACType::Vend:
                // Generate line for offset account first

                taxAmountCur = Tax::taxTotal(ledgerJournalOldTrans.Voucher,
                                            ledgerJournalOldTrans.TransDate);

                // <GTE>
                if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
                {
                    taxableDocument = TaxableDocumentObject::construct(
                        TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(ledgerJournalOldTrans));

                    taxDocumentObject = TaxBusinessService::calculateTax(taxableDocument);
                    if (taxDocumentObject)
                    {
                        taxAmountCur = taxDocumentObject.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Credit).amountTransactionCurrency();
                        taxAmountCur -= taxDocumentObject.sumByTaxAccountingProvider(TaxAccountingProvider::Party, TaxAccountingPostingProfileDistributionSide::Debit).amountTransactionCurrency();
                    }
                }
                // </GTE>

                if (!ledgerJournalInclTax
                    // <GIN>
                    && !formulaWithPriceInclTax
                    // </GIN>
                    )
                {
                    // Adjust the amounts for sales tax
                    if (ledgerJournalNewTrans.AmountCurCredit)
                    {
                        ledgerJournalNewTrans.AmountCurCredit  += taxAmountCur;
                    }
                    else
                    {
                        ledgerJournalNewTrans.AmountCurDebit   -= taxAmountCur;
                    }
                }

                //<GIN>
                if (isIndiaWithholdTaxEnabled)
                {
                    if (ledgerJournalNewTrans.AmountCurCredit)
                    {
                        ledgerJournalNewTrans.AmountCurCredit  -= withholdTaxAmount;
                    }
                    else
                    {
                        ledgerJournalNewTrans.AmountCurDebit   += withholdTaxAmount;
                    }
                }
                //</GIN>
                break;

            case LedgerJournalACType::Ledger:

                if (ledgerJournalInclTax && !ledgerJournalNewTrans.TaxCode)
                {
                    taxAmountToSubtract = Tax::taxAmountToSubtract(ledgerJournalOldTrans.Voucher,
                                                                   ledgerJournalOldTrans.TransDate,
                                                                   ledgerJournalOldTrans.RecId);
                    // Adjust the amounts for sales tax
                    if (ledgerJournalNewTrans.AmountCurCredit)
                    {
                        ledgerJournalNewTrans.AmountCurCredit  += taxAmountToSubtract;
                    }
                    else
                    {
                        ledgerJournalNewTrans.AmountCurDebit   -= taxAmountToSubtract;
                    }
                }

                // Adjust the amounts for sales tax when amount include sales tax is not present
                if (!ledgerJournalInclTax && !ledgerJournalNewTrans.TaxCode)
                {
                    select sum(TaxInCostPrice) from taxTrans
                        where taxTrans.Voucher == ledgerJournalOldTrans.Voucher
                           && taxTrans.TransDate == ledgerJournalOldTrans.TransDate
                           && taxTrans.SourceRecId == ledgerJournalOldTrans.RecId
                           && taxTrans.SourceTableId == tableNum(LedgerJournalTrans)
                           && taxTrans.ExemptTax == NoYes::No;

                    if (ledgerJournalNewTrans.AmountCurCredit)
                    {
                        ledgerJournalNewTrans.AmountCurCredit -= taxTrans.TaxInCostPrice;
                    }
                    else
                    {
                        ledgerJournalNewTrans.AmountCurDebit += taxTrans.TaxInCostPrice;
                    }
                }

                amountCur                                 = ledgerJournalNewTrans.AmountCurDebit;
                ledgerJournalNewTrans.AmountCurDebit      = ledgerJournalNewTrans.AmountCurCredit;
                ledgerJournalNewTrans.AmountCurCredit     = amountCur;
                ledgerJournalNewTrans.PurchLedgerPosting  = ArrivalPostingType::Offset;
                ledgerJournalNewTrans.TaxGroup            = '';
                ledgerJournalNewTrans.TaxItemGroup        = '';

                //There are scenarios where there needs to be a direct tie from the originating LedgerJournalTrans record to this new LedgerJournalTrans record.
                //In those scenarios, we will need to be able to track the TaxTrans records associated with the original LedgerJournalTrans record.
                //The PoolRecId field enables this functionality.
                if (_ledgerJournalTable.JournalType == LedgerJournalType::PurchaseLedger || _ledgerJournalTable.JournalType == LedgerJournalType::VendInvoiceRegister)
                {
                    ledgerJournalNewTrans.PoolRecId = ledgerJournalOldTrans.RecId;
                }

                break;
        }

        if (ledgerJournalNewTrans.amount()
            || (newLedgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool
                && FeatureStateProvider::isFeatureEnabled(PostingZeroInvoicesInGeneralLedgerFeature::instance())))
        {
            ledgerJournalNewTrans.insert();
            Docu::copy(ledgerJournalOldTrans, ledgerJournalNewTrans);

            // <GIN>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                ledgerJournalTransTaxExtensionIN.LedgerJournalTrans = ledgerJournalNewTrans.RecId;
                ledgerJournalTransTaxExtensionIN.insert();
            }
            // </GIN>
            // <GTE>
            if (TaxIntegrationUtils::isTaxInformationEnabled())
            {
                TransTaxInformationHelper::copyTransTaxInformation(ledgerJournalOldTrans, ledgerJournalNewTrans);
            }
            // </GTE>

            if (newLedgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool
                && TaxIntegrationUtils::isTaxIntegrationEnabledForJournalType(LedgerJournalType::VendInvoicePool))
            {
                LedgerJournalTransTaxExtension::copyLedgerJournalTransTaxExtension(ledgerJournalOldTrans, ledgerJournalNewTrans, true);
            }
        }

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            TaxServiceTariff::insertTaxServiceTariffForNewParent(ledgerJournalOldTrans.TableId, ledgerJournalOldTrans.RecId, ledgerJournalNewTrans.TableId, ledgerJournalNewTrans.RecId);
        }
        // </GEEPL>

        ledgerJournalNewTrans.TaxGroup            = '';
        ledgerJournalNewTrans.TaxItemGroup        = '';
        ledgerJournalNewTrans.TaxCode             = '';

        // If this is a project journal then we must set and save the related Journal table for project fields.
        if ((ledgerJournalOldTrans.AccountType == LedgerJournalACType::Project) ||
            (ledgerJournalOldTrans.OffsetAccountType == LedgerJournalACType::Project && ledgerJournalOldTrans.parmOffsetLedgerDimension()))
        {
            ledgerJournalNewTrans_Project = LedgerJournalTrans_Project::find(ledgerJournalOldTrans.RecId).data();
            ledgerJournalNewTrans_Project.RefRecId = ledgerJournalNewTrans.RecId;
            ledgerJournalNewTrans_Project.insert();
        }

        if (ledgerJournalNewTrans.CashDiscCode &&
            ledgerJournalNewTrans.AccountType == LedgerJournalACType::Vend)
        {
            VendTransCashDisc::copyCashDisc(ledgerJournalOldTrans.TableId,
                                            ledgerJournalOldTrans.RecId,
                                            ledgerJournalNewTrans.TableId,
                                            ledgerJournalNewTrans.RecId);
        }

        if (ledgerJournalOldTrans.parmOffsetLedgerDimension())
        {
            ledgerJournalNewTrans.LedgerDimension     = ledgerJournalOldTrans.OffsetLedgerDimension;
            ledgerJournalNewTrans.AccountType         = ledgerJournalOldTrans.OffsetAccountType;
            ledgerJournalNewTrans.DefaultDimension    = ledgerJournalOldTrans.OffsetDefaultDimension;

            amountCur                                 = ledgerJournalNewTrans.AmountCurDebit;
            ledgerJournalNewTrans.AmountCurDebit      = ledgerJournalNewTrans.AmountCurCredit;
            ledgerJournalNewTrans.AmountCurCredit     = amountCur;

            if (ledgerJournalOldTrans.AccountType != LedgerJournalACType::Ledger)
            {
                // <GIN>
                if (isIndiaTaxEnabled
                    && ledgerJournalTrans.DocumentDate
                    && VendParameters::find().UseDocumentDate)
                {
                    taxAmountToSubtract = Tax::taxAmountToSubtract(
                        ledgerJournalOldTrans.Voucher,
                        ledgerJournalOldTrans.DocumentDate,
                        ledgerJournalOldTrans.RecId);
                }
                else
                {
                    // </GIN>

                    // Exclude tax if 'Apply sales tax taxation rules' is true and it is use tax; otherwise, include tax.
                    if (TaxParameters::find().PurchTaxOnOperations && Tax::isUseTax(ledgerJournalOldTrans))
                    {
                        taxAmountToSubtract = 0;
                    }
                    else
                    {
                        taxAmountToSubtract = Tax::taxAmountToSubtract(
                            ledgerJournalOldTrans.Voucher,
                            ledgerJournalOldTrans.TransDate,
                            ledgerJournalOldTrans.RecId);
                    }

                    // <GIN>
                }
                // </GIN>
                if (ledgerJournalNewTrans.AmountCurCredit)
                {
                    ledgerJournalNewTrans.AmountCurCredit  += taxAmountToSubtract;
                }
                else
                {
                    ledgerJournalNewTrans.AmountCurDebit   -= taxAmountToSubtract;
                }

                //<GIN>
                if (isIndiaWithholdTaxEnabled)
                {
                    if (ledgerJournalNewTrans.AmountCurCredit)
                    {
                        ledgerJournalNewTrans.AmountCurCredit  -= withholdTaxAmount;
                    }
                    else
                    {
                        ledgerJournalNewTrans.AmountCurDebit   += withholdTaxAmount;
                    }
                }
                //</GIN>
            }

            ledgerJournalNewTrans.parmOffsetLedgerDimension(0);
            ledgerJournalNewTrans.OffsetDefaultDimension = 0;
            ledgerJournalNewTrans.PurchLedgerPosting  = ArrivalPostingType::Offset;

            if (ledgerJournalNewTrans.amount()
                ||(newLedgerJournalTable.JournalType == LedgerJournalType::VendInvoicePool
                    && FeatureStateProvider::isFeatureEnabled(PostingZeroInvoicesInGeneralLedgerFeature::instance())))
            {
                ledgerJournalNewTrans.createTransferTrans(ledgerJournalNewTrans,toLedgerJournalId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(boolean _transferWhenPosting = false)
    {
        super();

        queryRun = new QueryRun(queryStr(LedgerInvoiceToApproval));
        transferWhenPosting = _transferWhenPosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForNew</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new <c>LedgerTransferToJournal</c> object.
    /// </summary>
    /// <param name="_transferWhenPosting">Indicates when to do a transfer when posting.</param>
    /// <returns>A new instance of the <c>LedgerTransferToJournal</c> object.</returns>
    public static LedgerTransferToJournal constructForNew(boolean _transferWhenPosting = false)
    {
        return new LedgerTransferToJournal(_transferWhenPosting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Packs the object for the <c>SysLastValue</c> framework to support persisting user input.
    /// </summary>
    /// <returns>
    ///    A container that stores the list of values specified by the <c>SysLastValuesList</c> macro.
    /// </returns>
    /// <remarks>
    ///    This method brings support for inheritance to the <c>SysLastValue</c> implementation on this class.
    ///    Derivative classes should override this method and provide their own implementation with a pack
    ///    list like "[#SysLastValuesList, <c>super()</c>]".
    /// </remarks>
    public container packSysLastValues()
    {
        return [#SysLastValuesCurrentVersion, [#SysLastValuesList, super()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromJournalNum</Name>
				<Source><![CDATA[
    LedgerJournalId parmFromJournalNum(LedgerJournalId _ledgerJournalId = fromLedgerJournalId)
    {
        fromLedgerJournalId = _ledgerJournalId;

        return fromLedgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromVoucher</Name>
				<Source><![CDATA[
    Voucher parmFromVoucher(Voucher _voucher = fromVoucher)
    {
        fromVoucher = _voucher;

        return fromVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToJournalNum</Name>
				<Source><![CDATA[
    LedgerJournalId parmToJournalNum(LedgerJournalId _ledgerJournalId = toLedgerJournalId)
    {
        toLedgerJournalId = _ledgerJournalId;

        return toLedgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToVoucher</Name>
				<Source><![CDATA[
    Voucher parmToVoucher(Voucher _voucher = toVoucher)
    {
        toVoucher = _voucher;

        return toVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferredBy</Name>
				<Source><![CDATA[
    userId  parmTransferredBy(userId _transferredBy = transferredBy)
    {
        transferredBy = _transferredBy;

        return transferredBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        LedgerJournalTable  ledgerJournalTable;
        LedgerJournalTrans  ledgerJournalOldTrans;
        VendTrans           vendTrans;
        boolean             transferred = false;

        if (! this.validate())
        {
            throw error("");
        }

        try
        {
            if (LedgerParameters::isStornoEnabledEE())
            {
                GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00015, funcName());
            }

            ttsbegin;

            if (! toLedgerJournalId)
            {
                toLedgerJournalId =  JournalTableData::newTable(ledgerJournalTable).nextJournalId();
            }
            else
            {
                newLedgerJournalTable = LedgerJournalTable::find(toLedgerJournalId);
            }

            if (!newLedgerJournalTable)
            {
                this.createNewLedgerTable();
            }

            if (this.validateRun())
            {
                while (queryRun.next())
                {
                    ledgerJournalTable      =  queryRun.get(tableNum(LedgerJournalTable));
                    ledgerJournalOldTrans   =  queryRun.get(tableNum(LedgerJournalTrans));

                    if (ledgerJournalTable.JournalType     == LedgerJournalType::VendPaymRemittance  &&
                        ! VendPaymModeTable::findInterCompanyLedgerDimension(ledgerJournalOldTrans.PaymMode))
                    {
                        info(strFmt("@SYS23821",ledgerJournalOldTrans.Voucher));
                    }

                    if (ledgerJournalOldTrans.VendTransId)
                    {
                        select firstonly forupdate vendTrans
                            index hint recid
                            where vendTrans.RecId == ledgerJournalOldTrans.VendTransId;

                        vendTrans.JournalNum = toLedgerJournalId;
                        vendTrans.update();
                    }

                    if (ledgerJournalTable.PostedDateTime || transferWhenPosting)
                    {
                        this.insertLedgerJournalTrans(ledgerJournalTable, ledgerJournalOldTrans);
                        transferred = true;
                    }
                    else
                    {
                        info(strFmt("@SYS23821", ledgerJournalOldTrans.Voucher));
                    }
                }
                if (transferred)
                {
                    info(strFmt("@SYS27184", toLedgerJournalId));
                }
            }
            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version     = RunBase::getVersion(packedClass);
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQuery] = packedClass;

                break;

            case #Version5 :
                [version, #CurrentListV5, packedQuery] = packedClass;

                break;

            case #Version4 :
                [version, #CurrentListV4, packedQuery] = packedClass;

                break;

            default :
                return false;
        }

        if (packedQuery)
        {
            queryRun = new QueryRun(packedQuery);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the object for the <c>SysLastValue</c> framework to support persisting user input.
    /// </summary>
    /// <param name="_packedValues">
    ///    A packed instance of <c>LedgerJournalSave</c>.
    /// </param>
    /// <remarks>
    ///    This method brings support for inheritance to the <c>SysLastValue</c> implementation on this class.
    ///    Derivative classes should override this method and provide their own implementation with an unpack
    ///    list like: [#SysLastValuesList, <c>baseClassPackedValues</c>] = <paramref name="_packedValues" />;
    ///    <c>super(baseClassPackedValues)</c>;
    /// </remarks>
    public void unpackSysLastValues(container _packedValues)
    {
        Version version = RunBase::getVersion(_packedValues);
        container packedClasses, baseClassPackedValues;

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, packedClasses] = _packedValues;
                [#SysLastValuesList, baseClassPackedValues] = packedClasses;
                super(baseClassPackedValues);

                break;
            case #SysLastValuesForkedFromVersion:
                // This pack list came from the forked version of the
                // CurrentList list.
                [version, #CurrentListV4] = _packedValues;

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the range on the query for the JournalNum field.
    /// </summary>
    void updateQueryBuild()
    {
        queryRun.query().dataSourceTable(tableNum(LedgerJournalTable)).findRange(fieldNum(LedgerJournalTable, JournalNum)).value(strFmt('%1', fromLedgerJournalId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRestore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the range on the query for three fields: JournalNum, Voucher, TransferredBy.
    /// </summary>
    void updateQueryRestore()
    {
        queryRun.query().dataSourceTable(tableNum(LedgerJournalTable)).findRange(fieldNum(LedgerJournalTable, JournalNum)).value(strFmt('%1', fromLedgerJournalId));
        queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).findRange(fieldNum(LedgerJournalTrans, Voucher)).value(strFmt('%1', toVoucher));
        queryRun.query().dataSourceTable(tableNum(LedgerJournalTrans)).findRange(fieldNum(LedgerJournalTrans, TransferredBy)).value(strFmt('%1', transferredBy));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the journal lines can be transferred.
    /// </summary>
    /// <returns>
    /// true if the journal lines can be transferred; otherwise, false.
    /// </returns>
    boolean validateRun()
    {
        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::find(toLedgerJournalId);
        if (ledgerJournalTable.SystemBlocked || ledgerJournalTable.Posted)
        {
            info(strFmt("@SYS18419", toLedgerJournalId));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerTransferToJournal construct(LedgerJournalId _journalId, boolean _transferWhenPosting = false)
    {
        LedgerTransferToJournal ledgerTransferToJournal;
        LedgerJournalType journalType = LedgerJournalTable::find(_journalId).JournalType;

        switch (journalType)
        {
            case LedgerJournalType::VendInvoiceRegister, LedgerJournalType::PurchaseLedger:
                ledgerTransferToJournal = new LedgerTransferToJournalPurchase(_transferWhenPosting);
                break;
            default:
                ledgerTransferToJournal = new LedgerTransferToJournal(_transferWhenPosting);
        }

        ledgerTransferToJournal.parmJournalNum(_journalId);

        return ledgerTransferToJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructforMain</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>LedgerTransferToJournal</c> class, or a derivative of the
    ///    <c>LedgerTransferToJournal</c> class.
    /// </summary>
    /// <param name="_journalNum">
    ///    The journal number of the journal for which to construct the instance.
    /// </param>
    /// <returns>
    ///    A new instance of <c>LedgerTransferToJournal</c> or derivatives.
    /// </returns>
    /// <remarks>
    ///    This method is used by the <c>main</c> method in the <c>LedgerTransferToJournal</c> class.
    /// </remarks>
    private static LedgerTransferToJournal constructforMain(LedgerJournalId _journalNum)
    {
        LedgerTransferToJournal     ledgerTransferToJournal;

        ledgerTransferToJournal = LedgerTransferToJournal::construct(_journalNum);
        ledgerTransferToJournal.getLast();
        ledgerTransferToJournal.updateQueryBuild();
        ledgerTransferToJournal.queryRun();

        return ledgerTransferToJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS23813";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LedgerTransferToJournal     ledgerTransferToJournal;
        LedgerJournalTrans          ledgerJournalTrans;

        if (args)
        {
            switch (args.dataset())
            {
                case tableNum(LedgerJournalTrans):
                    ledgerJournalTrans = args.record();
                    break;

                default:
                    throw error(Error::missingRecord(funcName()));
            }
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ledgerTransferToJournal = LedgerTransferToJournal::constructforMain(ledgerJournalTrans.JournalNum);

        if (ledgerTransferToJournal.prompt())
        {
            ledgerTransferToJournal.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>