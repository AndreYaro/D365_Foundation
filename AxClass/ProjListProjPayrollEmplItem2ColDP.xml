<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjPayrollEmplItem2ColDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjPayrollEmplItem2ColDP</c> class is the report data provider class for the
///    associated <c>ProjListProjPayRollEmplItem2Column</c> reports.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjStatementEmplItem)),
    SRSReportParameterAttribute(classStr(ProjListProjPayrollContract))
]

class ProjListProjPayrollEmplItem2ColDP extends SRSReportDataProviderBase
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    ProjOptionInvestment    investment;
    ProjOptionInternal      internalCost;
    TransDate               projFromDate;
    TransDate               projBreakDate;
    TransDate               projToDate;
    TransDate               ledgerFromDate;
    TransDate               ledgerBreakDate;
    TransDate               ledgerToDate;
    projActualVsBudget      actualVsBudget;
    ProjForecastModelId     forecastModelId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;
    ProjAmountQty           amountQty;

    ProjListProjTrans_PayRoll       listProjTrans;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjHelpClass           projHelpClass;
    ProjListProjPayrollTmp          projListProjPayrollTmp;

    ProjListStateProjType   stateProjType;
    QueryRun                qrun;

    ResourceRecId           resource;
    ProjEmplItemId          id;
    Name                    name;

    AmountMST               actualPayRollCost;
    AmountMST               budgetPayRollCost;
    ProjQty                 actualQtyHour;
    ProjQty                 budgetQtyHour;

    projStatement           actualProjStatement;
    projStatement           budgetProjStatement;

    int                     reportType;
    int                     hourQtyDecimals, valueAddedDecimals, grossMarginDecimals, amountDecimals;
    int                     showPayrollCost, showQtyHour;
    str                     headerLabel, devianceLabel, hourQtyLabel, payrollCostLabel, periodLabel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
/// <summary>
/// Calculates the payroll cost amount and hour quantity.
/// </summary>
void calculate()
{
    actualProjStatement.parmResource(resource);
    budgetProjStatement.parmResource(resource);

    if (amountQty == ProjAmountQty::Amount || amountQty == ProjAmountQty::AmountQty)
    {
        actualPayRollCost     = actualProjStatement.d100_PayrollAllocation();
        budgetPayRollCost     = budgetProjStatement.d100_PayrollAllocation();
    }

    if (amountQty == ProjAmountQty::Qty || amountQty == ProjAmountQty::AmountQty)
    {
        actualQtyHour         = actualProjStatement.d100_PayrollAllocation_Qty();
        budgetQtyHour         = budgetProjStatement.d100_PayrollAllocation_Qty();
    }
}
]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjPayrollTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Gets the data from <c>ProjListProjPayrollTmp</c> table.
/// </summary>
/// <returns>
///    The data from <c>ProjListProjPayrollTmp</c> table.
/// </returns>

[SRSReportDataSetAttribute('ProjListProjPayrollTmp')]
public ProjListProjPayrollTmp getProjListProjPayrollTmp()
{
    select * from projListProjPayrollTmp;
    return projListProjPayrollTmp;
}
]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
/// <summary>
///    Initializes an instance of the <c>ProjListProjTrans</c> class.
/// </summary>
private void initProjListTrans()
{
    listProjTrans = ProjListProjTrans::construct(ProjListStateType::Payroll, ProjListStateId::EmplItem);
    listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans);

    listProjTrans.parmTimeMaterial(timeMaterial);
    listProjTrans.parmFixedPrice(fixedPrice);
    listProjTrans.parmInvestment(investment);
    listProjTrans.parmInternalCost(internalCost);

    listProjTrans.parmProjFromDate(projFromDate);
    listProjTrans.parmProjBreakDate(projBreakDate);
    listProjTrans.parmProjToDate(projToDate);
    listProjTrans.parmLedgerFromDate(ledgerFromDate);
    listProjTrans.parmLedgerBreakDate(ledgerBreakDate);
    listProjTrans.parmLedgerToDate(ledgerToDate);

    listProjTrans.parmActualVsBudget(actualVsBudget);
    listProjTrans.parmForecastModelId(forecastModelId);

    listProjTransLayout.parmStateProjType(stateProjType);
    listProjTransLayout.parmSkipZero(skipZero);

    listProjTransLayout.parmShowAmount(showAmount);
    listProjTransLayout.parmAmountQty(amountQty);
}
]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjPayrollTmp</Name>
				<Source><![CDATA[
/// <summary>
///    Gets the required data and inserts it into the temporary table.
/// </summary>
private void insertProjListProjPayrollTmp()
{
    projListProjPayrollTmp.clear();

    projListProjPayrollTmp.Id   = id;
    projListProjPayrollTmp.Name = name;
    projListProjPayrollTmp.IdLabel = "@SYS89158";

    projListProjPayrollTmp.QtyHour       = actualQtyHour;
    projListProjPayrollTmp.QtyHour1      = budgetQtyHour;
    projListProjPayrollTmp.QtyHour2      = ProjListProjHelpClass::calcActualVsBudget(projListProjPayrollTmp.QtyHour,
                                            projListProjPayrollTmp.QtyHour1, actualVsBudget, false);

    projListProjPayrollTmp.PayrollCost   = listProjTransLayout.showAmountReport(actualPayRollCost, showAmount);
    projListProjPayrollTmp.PayrollCost1  = listProjTransLayout.showAmountReport(budgetPayRollCost, showAmount);
    projListProjPayrollTmp.PayrollCost2  = ProjListProjHelpClass::calcActualVsBudget(projListProjPayrollTmp.PayrollCost,
                                            projListProjPayrollTmp.PayrollCost1, actualVsBudget, true);

    // set labels
    projListProjPayrollTmp.HeaderLabel      = headerLabel;
    projListProjPayrollTmp.QtyHourLabel     = hourQtyLabel;
    projListProjPayrollTmp.PayrollCostLabel = payrollCostLabel;
    projListProjPayrollTmp.DevianceLabel    = devianceLabel;
    projListProjPayrollTmp.PeriodLabel      = periodLabel;

    // set decimal values
    projListProjPayrollTmp.DecimalPayrollCost = amountDecimals;
    projListProjPayrollTmp.DecimalHourQty = hourQtyDecimals;

    // set field visibility
    projListProjPayrollTmp.ShowQtyHour = showQtyHour;
    projListProjPayrollTmp.ShowPayrollCost = showPayrollCost;

    projListProjPayrollTmp.insert();
}
]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
/// <summary>
///    Indicates whether the payroll cost amount and hour quantities are zero.
/// </summary>
/// <returns>
///    true if the values are not zero; otherwise, false.
/// </returns>
boolean lineValue()
{
    return ((actualPayRollCost != 0) ||
            (budgetPayRollCost != 0) ||
            (actualQtyHour     != 0) ||
            (budgetQtyHour     != 0));
}
]]></Source>
			</Method>
			<Method>
				<Name>printEmplItem</Name>
				<Source><![CDATA[
/// <summary>
///    Gets the employee record and calls the <c>calculate</c> method.
/// </summary>
void printEmplItem()
{
    ResourceView    resourceLocal;

    if (SysReportRun::changed(qrun,tableNum(ResourceView)))
    {
        resourceLocal   = qrun.get(tableNum(ResourceView));

        resource        = resourceLocal.RecId;
        id              = ResourceFacade::getID(resource);
        name            = ResourceFacade::getName(resource);

        this.calculate();

        if (! skipZero || (this.lineValue()))
        {
            this.insertProjListProjPayrollTmp();
        }
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
/// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    This method provides the ability to write the report business logic. It will be called by SSRS at
///    runtime. The method should compute data and populate the data tables that will be returned to SSRS.
/// </remarks>
public void processReport()
{
    ProjListProjPayrollContract contract = this.parmDataContract() as ProjListProjPayrollContract;

    timeMaterial = contract.parmTimeMaterial();
    fixedPrice = contract.parmFixedPrice();
    investment = contract.parmInvestment();
    internalCost = contract.parmInternalCost();

    projFromDate = contract.parmProjFromDate();
    projBreakDate = contract.parmProjBreakDate();
    projToDate = contract.parmProjToDate();
    ledgerFromDate = contract.parmLedgerFromDate();
    ledgerBreakDate = contract.parmLedgerBreakDate();
    ledgerToDate = contract.parmLedgerToDate();

    actualVsBudget = contract.parmActualVsBudget2Col();
    forecastModelId = contract.parmForecastModelId();

    skipZero = contract.parmSkipZero();

    showAmount = contract.parmShowAmount();
    amountQty = contract.parmAmountQty();

    reportType = contract.parmReportType();

    this.initProjListTrans();

    [headerLabel, hourQtyLabel, payrollCostLabel, devianceLabel, periodLabel] = listProjTrans.setDisplayLabel2Column(showAmount);

    [showQtyHour, showPayrollCost] = listProjTrans.setDisplayFlags(amountQty);

    [hourQtyDecimals, amountDecimals,
    grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

    actualProjStatement = projStatement::newProjListPayroll(listProjTrans,ProjActualBudget::Actual,amountQty);
    budgetProjStatement = projStatement::newProjListPayroll(listProjTrans,ProjActualBudget::Budget,amountQty,forecastModelId);

    qrun = new QueryRun(this.parmQuery());

    while (qrun.next())
    {
        this.printEmplItem();
    }
}
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
