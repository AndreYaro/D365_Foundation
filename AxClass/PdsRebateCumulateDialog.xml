<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateCumulateDialog</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that serves to cumulate selected rebates.
/// </summary>
class PdsRebateCumulateDialog extends RunBaseBatch implements BatchRetryable
{
    CustAccount             custAccount;
    PdsCustRebateGroupId    pdsCustRebateGroupId;
    PdsStartDate            pdsStartDate;
    PdsExpiryDate           pdsExpiryDate;

    DialogField             diagCustAccount;
    DialogField             diagpdsCustRebateGroupId;
    DialogField             diagpdsStartDate;
    DialogField             diagpdsExpiryDate;

    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList
        custAccount,
        pdsCustRebateGroupId,
        pdsStartDate,
        pdsExpiryDate
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds customer and date range fields to dialog box.
    /// </summary>
    /// <returns>Any object.</returns>
    public Object dialog()
    {
        DialogRunbase dialogRunbase = super();

        diagCustAccount = dialogRunbase.addFieldValue(
                                extendedtypestr(CustAccount),
                                custAccount,
                                "@SYS24704",
                                "@SYS7149");
        diagpdsCustRebateGroupId = dialogRunbase.addFieldValue(
                               extendedtypestr(PdsCustRebateGroupId),
                               pdsCustRebateGroupId,
                               "@PRO1314",
                               "@PRO1314");
        diagpdsStartDate = dialogRunbase.addFieldValue(
                                extendedtypestr(PdsStartDate),
                                pdsStartDate,
                                "@SYS6255",
                                "@SYS6255");
        diagpdsExpiryDate = dialogRunbase.addFieldValue(
                                extendedtypestr(PdsExpiryDate),
                                pdsExpiryDate,
                                "@SYS22882",
                                "@SYS22882");

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets dialog customer and date range values.
    /// </summary>
    /// <returns>Return flag.</returns>
    public boolean getFromDialog()
    {
        custAccount = diagCustAccount.value();
        pdsCustRebateGroupId = diagpdsCustRebateGroupId.value();
        pdsStartDate = diagpdsStartDate.value();
        pdsExpiryDate = diagpdsExpiryDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets application module value.
    /// </summary>
    /// <returns>Returns vendor application module value.</returns>
    public SysModule module()
    {
        return SysModule::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// substantiates the object
    /// </summary>
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// stores the dialog object parameters.
    /// </summary>
    /// <returns>Returns list of stored parameters.</returns>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Launches cumulate rebate functionality.
    /// </summary>
    public void run()
    {
        PdsRebateTable::cumulateRebates(custAccount, pdsStartDate, pdsExpiryDate, pdsCustRebateGroupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// restore the last parameters saved.
    /// </summary>
    /// <param name="_packedClass">list of stored parameters.</param>
    /// <returns>Returns if restore succeded or failed.</returns>
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conpeek(_packedClass,1);
        boolean     ret = true;

        switch (version)
        {
            case #CurrentVersion  :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates dialog box values.
    /// </summary>
    /// <param name="_calledFrom">Any object passed</param>
    /// <returns>Return flag.</returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;

        if (custAccount)
        {
            ret = CustTable::checkExist(custAccount);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns an instance of the class
    /// </summary>
    /// <returns>returns instance</returns>
    public static PdsRebateCumulateDialog construct()
    {
        return new PdsRebateCumulateDialog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns class description.
    /// </summary>
    /// <returns>class description.</returns>
    public static ClassDescription description()
    {
        return "@PRO1123";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method constructs an instance and runs the class
    /// </summary>
    /// <param name="_args">Any arguments passed</param>
    public static void main(Args _args)
    {
        PdsRebateCumulateDialog pdsRebateCumulateDialog = PdsRebateCumulateDialog::construct();

        try
        {
            if (pdsRebateCumulateDialog.prompt())
            {
                pdsRebateCumulateDialog.runOperation();

                Common record = _args.record();
                if (record && FormDataUtil::getFormDataSource(record))
                {
                    FormDataSource pdsRebateTable_ds = FormDataUtil::getFormDataSource(record);
                    pdsRebateTable_ds.research();
                }
            }
        }
        catch (Exception::Error)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>