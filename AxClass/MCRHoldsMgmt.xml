<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRHoldsMgmt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRHoldsMgmt</c> class is a static class to reduce duplication
/// betewen the holds list pages and the holds form.
/// </summary>
class MCRHoldsMgmt
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels the selected sales order.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record that needs to be cancelled.
    /// </param>
    public static void cancelSalesOrder(SalesTable _salesTable)
    {
        if (DialogButton::Yes ==
                Box::yesNo(strfmt("@MCR20581",
                                  _salesTable.SalesId),
                           DialogButton::No, "@MCR10925"))
        {
            MCRSalesOrderCancellation::cancelOrder(_salesTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOutHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds functionality to held order tabs to
    /// to be able to pass the table and datasource.
    /// </summary>
    /// <param name="_holdCodeTrans">
    /// The hold code transaction record.
    /// </param>
    /// <param name="_holdCodeTransDS">
    /// The hold code transaction datasource on the form.
    /// </param>
    public static void checkOutHold(MCRHoldCodeTrans _holdCodeTrans, object _holdCodeTransDS)
    {
        _holdCodeTrans.MCRCheckedOut = NoYes::Yes;
        _holdCodeTrans.MCRCheckedOutTo = CurUserId();
        _holdCodeTrans.MCRCheckedOutDateTime = DateTimeUtil::getSystemDateTime();
        _holdCodeTrans.write();
        _holdCodeTransDS.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCheckOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides functionality for the hold code transaction datasource on the form.
    /// </summary>
    /// <param name="_holdCodeTrans">
    /// The hold code transaction record.
    /// </param>
    /// <param name="_holdCodeTransDS">
    /// The hold code transaction datasource on the form.
    /// </param>
    public static void clearCheckOut(MCRHoldCodeTrans _holdCodeTrans, object _holdCodeTransDS)
    {
        _holdCodeTrans.MCRCheckedOut = NoYes::No;
        _holdCodeTrans.MCRCheckedOutTo = "";
        _holdCodeTrans.MCRCheckedOutDateTime = utcDateTimeNull();
        _holdCodeTrans.write();
        _holdCodeTransDS.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMark</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears all selected hold codes.
    /// </summary>
    /// <param name="_holdCodeTrans">
    /// The hold code transaction record.
    /// </param>
    /// <param name="submit">
    /// A <c>Boolean</c> value that defines whether the sales order should be submitted
    /// after clearing holds or not; optional.
    /// </param>
    public static void clearMark(MCRHoldCodeTrans _holdCodeTrans, boolean submit = false)
    {
        MCRCustPaymTotals   custPaymTotals;
        boolean             paymentExist =  false;
        SalesTable          salesTable;
        MCRHoldCodeTrans    holdCodeTrans = _holdCodeTrans;

        holdCodeTrans.selectForUpdate(true);

        try
        {
            ttsBegin;
            if (holdCodeTrans)
            {
                if (holdCodeTrans.MCRCheckedOut   == noyes::No
                ||  holdCodeTrans.MCRCheckedOutTo == CurUserId())
                {
                    holdCodeTrans.MCRCleared = noyes::Yes;
                    holdCodeTrans.setClearFlag();
                    if (holdCodeTrans.validateWrite())
                    {
                        holdCodeTrans.update();
                    }
                    else
                    {
                        throw error("@SYS104318");
                    }
                }
                else
                {
                    error(strfmt(   "@MCR24324",
                                    holdCodeTrans.MCRHoldCode,
                                    holdCodeTrans.MCRCheckedOutTo ));
                }
            }
            ttsCommit;
            // submit the sales orders if paramters are set
            if (submit
            || MCROrderParameters::find().MCRSubmitOnClear)
            {
                salesTable = SalesTable::find(_holdCodeTrans.InventRefId);
                if (!MCRHoldCodeTrans::findActiveOrderHolds(salesTable.SalesId))
                {
                    //Since this involves submitting the order, it should be ensured that
                    // a payment exists before trying to submit the order.
                    custPaymTotals = MCRCustPaymTotals::construct(salesTable.tableId, salesTable.recid);
                    paymentExist = custPaymTotals.validateAuthorize(true);
                    if (paymentExist)
                    {
                        MCREndOrder::endOrder(salesTable.SalesId);
                    }
                }
            }
        }
        catch
        {
            global::exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySOTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the sales order recap in a totals only mode.
    /// </summary>
    /// <param name="_salesTable">
    /// The <c>SalesTable</c> record passed to the sales order recap form.
    /// </param>
    public static void displaySOTotals(SalesTable  _salesTable)
    {
        Args recapArgs;
        FormRun recapFormRun;
        MCRSalesOrderRecapConfigure mcrSalesOrderRecapConfigure = new MCRSalesOrderRecapConfigure();
        recapArgs = new Args();
        recapArgs.name(formstr(MCRSalesOrderRecap));
        recapArgs.record(_salesTable);
        recapFormRun = classFactory.formRunClass(recapArgs);
        mcrSalesOrderRecapConfigure.parmShowTotalsOnly(true);
        mcrSalesOrderRecapConfigure.parmShowModifyOrderButton(false);
        recapArgs.parmObject(mcrSalesOrderRecapConfigure);

        recapFormRun = classFactory.formRunClass(recapArgs);
        recapFormRun.run();
        recapFormRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>launchCheckOutOverrideForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allows an authorized user to change the user to whom the hold record
    /// is checked out.
    /// </summary>
    /// <param name="_mcrHoldCodeTrans">
    /// The hold code transaction record.
    /// </param>
    /// <returns>
    /// true if the called form closed ok; otherwise, false.
    /// </returns>
    public static boolean launchCheckOutOverrideForm(MCRHoldCodeTrans _mcrHoldCodeTrans)
    {
        FormRun    formRun;
        Args       formArgs = new Args();
        str        formArgsFormStr;
        str        formArgsParm;
        common     formArgsRecord;

        formArgsRecord = _mcrHoldCodeTrans;
        formArgsFormStr = formstr(MCRHoldCheckOutOverride);
        formArgs.name(formArgsFormStr);
        formArgs.parm(formArgsParm);
        formArgs.record(formArgsRecord);
        formRun = classFactory.formRunClass(formArgs);
        formRun.init();
        formRun.run();
        formRun.wait();
        if (formRun.closedOk())
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifySalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the sales order.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales order record to be modified.
    /// </param>
    public static void modifySalesOrder(SalesTable _salesTable)
    {
        Args            args;
        formrun         formrun;
        args = new args();
        args.record(_salesTable);
        formrun = new menufunction(menuitemdisplaystr(salestable), menuitemtype::Display).create(args);
        if (formrun)
        {
            formrun.run();
            formrun.wait();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>