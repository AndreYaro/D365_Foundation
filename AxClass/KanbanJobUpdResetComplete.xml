<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobUpdResetComplete</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class KanbanJobUpdResetComplete extends KanbanJobUpdReset
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs actions for resetting the status to complete.
    /// </summary>
    protected void cleanUp()
    {
        this.resetLeanDocumentAssignments();
        this.beginLedger();
        this.resetUpdatePhysicalKanbanJob();
        this.resetUpdatePhysicalPickingList(FlushingPrincipKanban::End);
        this.commitLedger();
        this.resetSourceDocumentLineStatus();
        this.resetQualityMeasure();
        this.resetEndDateTime();
        this.resetUpdateNextKanbanJob();
        this.resetUpdateJobOrderedQuantities();
        this.resetQuantities();
        this.resetCurrentJob();
        this.resetKanbanJob();
        this.resetKanban();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResetDateTime</Name>
				<Source><![CDATA[
    protected utcDateTime getResetDateTime()
    {
        return kanbanJob.ActualEndDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCurrentJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the current job on the related <c>Kanban</c> record.
    /// </summary>
    protected void resetCurrentJob()
    {
        kanbanJob.kanban(true).setCurrentJob(kanbanJob.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetEndDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the end date of the kanban job.
    /// </summary>
    protected void resetEndDateTime()
    {
        kanbanJob.ActualEndDateTime = DateTimeUtil::minValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>KanbanJob</c> table record.
    /// </summary>
    /// <remarks>
    /// The record must already be selected for update.
    /// </remarks>
    protected void resetKanbanJob()
    {
        this.resetStatus(LeanKanbanJobStatus::InProgress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLeanDocumentAssignments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes a related record in the <c>KanbanJobReceiptAdviceLine</c> table.
    /// </summary>
    protected void resetLeanDocumentAssignments()
    {
        LeanDocumentServiceController::updateSubcontractingDocuments(LeanDocumentCreationType::ReceiptAdvices, kanbanJob);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetQualityMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the related record in the <c>KanbanJobQualityMeasure</c> table.
    /// </summary>
    protected void resetQualityMeasure()
    {
        KanbanJobQualityMeasure kanbanJobQualityMeasure;

        ttsbegin;
        delete_from kanbanJobQualityMeasure
            where kanbanJobQualityMeasure.Job == kanbanJob.RecId;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the received quantity and scrapped quantity of the kanban job.
    /// </summary>
    protected void resetQuantities()
    {
        kanbanJob.QuantityReceived  = 0;
        kanbanJob.QuantityScrapped  = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetSourceDocumentLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the job that is related to source document lines to draft status.
    /// </summary>
    protected void resetSourceDocumentLineStatus()
    {
        SourceDocumentLineImplementationList    sourceDocumentLineImplementationList = SourceDocumentLineImplementationList::construct();

        ttsbegin;
        KanbanJobIssue kanbanJobIssue = KanbanJobIssue::findKanbanJob(kanbanJob.RecId);
        if (kanbanJobIssue)
        {
            sourceDocumentLineImplementationList.addEnd(kanbanJobIssue);
        }

        KanbanJobReceipt kanbanJobReceipt = KanbanJobReceipt::findKanbanJob(kanbanJob.RecId);
        if (kanbanJobReceipt)
        {
            sourceDocumentLineImplementationList.addEnd(kanbanJobReceipt);
        }

        this.resetSourceDocument(kanbanJob, sourceDocumentLineImplementationList, SourceDocumentAccountingStatus::InProcess);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUpdateJobOrderedQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ordered quantity of following jobs.
    /// </summary>
    protected void resetUpdateJobOrderedQuantities()
    {
        if (kanbanJob.QuantityReceived != kanbanJob.QuantityOrdered)
        {
            kanbanJob.updateOrderedQuantities(kanbanJob.QuantityOrdered);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUpdateNextKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses updates to date and inventory dimensions of the next kanban jobs.
    /// </summary>
    protected void resetUpdateNextKanbanJob()
    {
        KanbanJobType               kanbanJobType = kanbanJob.type();
        InventTrans                 inventTrans;
        InventMovement              inventMovement;
        InventTable                 inventTable;
        InventDim                   fromInventDim;
        InventDimParm               inventDimParm;
        InventTransOriginId         inventTransOriginId;
        InventDimGroupSetup         inventDimGroupSetup;

        ttsbegin;

        if (kanbanJobType.mustBeInventoryControlled())
        {
            inventMovement      = kanbanJob.inventMovement();
            inventTransOriginId = inventMovement.isTransfer()
                                    ? inventMovement.transferInventTransOriginId()
                                    : inventMovement.inventTransOriginId();
        }

        KanbanDateCalculation::newKanbanJob(kanbanJob).setExpectedDateTimeTransfer(kanbanJob);

        // next transfer jobs
        KanbanJob nextKanbanJob = kanbanJob.nextJob(true);
        while (   nextKanbanJob
               && !nextKanbanJob.type().canHaveStatus(LeanKanbanJobStatus::Planned))
        {
            if (kanbanJobType.mustBeInventoryControlled() &&
                nextKanbanJob.type().mustBeInventoryControlled())
            {
                inventMovement = nextKanbanJob.inventMovement();
                InventDim inventDim = inventMovement.inventdim();
                inventDimParm.initFromInventDim(inventDim);

                //transfer inventory dimensions from the kanban job receipt to the next job
                while select sum(Qty), InventDimId, ItemId from inventTrans
                    group by InventDimId, ItemId
                    where inventTrans.StatusReceipt     == StatusReceipt::Purchased 
                       && inventTrans.StatusIssue       == StatusIssue::None
                       && inventTrans.InventTransOrigin == inventTransOriginId
                {
                    if (!inventTable)
                    {
                        inventTable = inventTrans.inventTable();
                        inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);
                    }
                    fromInventDim.data(inventDim);
                    fromInventDim.copyDimParmDim(inventDimGroupSetup, inventTrans.inventDim(), KanbanJob::nextJobInventDimParm());
                    fromInventDim = InventDim::findOrCreate(fromInventDim);

                    if (fromInventDim.InventDimId != inventDim.InventDimId)
                    {
                        InventUpd_ChangeDimension inventUpd_ChangeDimension = InventUpd_ChangeDimension::newParameters(inventMovement,fromInventDim,inventDimParm,inventDim,-inventTrans.Qty);
                        inventUpd_ChangeDimension.updateNow();
                    }
                }
            }

            nextKanbanJob    = nextKanbanJob.nextJob(true);
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUpdatePhysicalKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Reverts the physical updates the inventory transaction for the kanban job, if it is required.
    /// </summary>
    protected void resetUpdatePhysicalKanbanJob()
    {
        InventMovement   inventMovement   = kanbanJob.inventMovement();
        InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginId(inventMovement.inventTransOriginId());
        InventQty        inventQty        = inventTransIdSum.physical();

        if (inventQty)
        {
            //packing slip revert
            InventUpd_Physical inventUpd_Physical = InventUpd_Physical::newKanbanJob(inventMovement);
            inventUpd_Physical.parmPhysical(-inventQty);
            inventUpd_Physical.parmPhysicalUnit(-inventQty);
            inventUpd_Physical.parmReturnMode(InventUpdate::physicalReturn());
            inventUpd_Physical.updateNow(ledgerVoucher);

            if (KanbanItemCheckMovement::newStandard(inventMovement,false,true).isAllowed())
            {
                // Trigger the indirect and direct manufacturing cost
                if (kanbanJob.Type().mustBeWIPIssueMovement())
                {
                    costUpd.addDirectMaterialConsumption(inventUpd_Physical.movement().inventModelType().inventCostMovement().parmInventItemPrice(),
                                                         -inventUpd_Physical.movement().inventModelType().inventCostMovement().totalQty());
                }
                else
                {
                    costUpd.addDirectMaterialFinished(inventUpd_Physical.movement().inventModelType().inventCostMovement().parmInventItemPrice(),
                                                          inventUpd_Physical.movement().inventModelType().inventCostMovement().totalQty());
                }
            }

            //recreate estimated
            InventUpd_Estimated inventUpd_Estimated = InventUpd_Estimated::newInventMovement(inventMovement);
            inventUpd_Estimated.parmEstimated(inventQty);
            inventUpd_Estimated.updateNow();

            if (inventMovement.isTransfer())
            {
                //packing slip revert
                inventMovement = kanbanJob.inventMovement(InventMovSubType::TransferReceipt);
                inventUpd_Physical = InventUpd_Physical::newKanbanJob(inventMovement);
                inventUpd_Physical.parmPhysical(inventQty);
                inventUpd_Physical.parmPhysicalUnit(inventQty);
                inventUpd_Physical.parmReturnMode(InventUpdate::physicalReturn());
                inventUpd_Physical.updateNow(ledgerVoucher);

                //recreate estimated
                inventUpd_Estimated = InventUpd_Estimated::newInventMovement(inventMovement);
                inventUpd_Estimated.parmEstimated(-inventQty);
                inventUpd_Estimated.updateNow();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static KanbanJobUpdReset construct()
    {
        return new KanbanJobUpdResetComplete();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>