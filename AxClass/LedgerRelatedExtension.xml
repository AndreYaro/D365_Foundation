<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRelatedExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Ledger extension helper class.
/// </summary>
class LedgerRelatedExtension implements LedgerRelatedExtensible
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>registerExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiating the LedgerRelatedHelper class.
    /// </summary>
    /// <param name = "_helperExtension">
    /// Instance of LedgerRelatedHelper to implement the LedgerRelatedExtension interface on.
    /// </param>
    [SubscribesTo(classstr(LedgerRelatedHelper), delegatestr(LedgerRelatedHelper, registerExtensionDelegate))]
    static void registerExtension(LedgerRelatedHelper _helper)
    {
        LedgerRelatedExtension extension = new LedgerRelatedExtension();
        _helper.registerExtension(extension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the accounting currency of the <c>Ledger</c> record for the specified legal entity.
    /// </summary>
    /// <param name="_legalEntityRecId">
    /// The record ID of the legal entity.
    /// </param>
    /// <returns>
    /// The accounting currency code of the record.
    /// </returns>
    /// <remarks>
    /// If no legal entity is specified, the accounting currency of the current legal entity is returned.
    /// </remarks>
    CurrencyCode accountingCurrency(LegalEntity _legalEntityRecId)
    {
        return Ledger::accountingCurrency(_legalEntityRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingCurrencyField</Name>
				<Source><![CDATA[
    str getAccountingCurrencyField()
    {
        return fieldStr(Ledger, AccountingCurrency);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTableName</Name>
				<Source><![CDATA[
    str getLedgerTableName()
    {
        return tableStr(Ledger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultExchangeRateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default exchange rate type of the <c>Ledger</c> record for a specific company.
    /// </summary>
    /// <param name="_legalEntityRecId">
    /// The record ID of a legal entity.
    /// </param>
    /// <returns>
    /// The record ID of default exchange rate type.
    /// </returns>
    RefRecId defaultExchangeRateType(LegalEntity _legalEntityRecId)
    {
        return Ledger::defaultExchangeRateType(_legalEntityRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>OnSysExpressionBuildModelField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check and build currency model field.
    /// </summary>
    /// <param name = "_field">Currency field.</param>
    /// <param name = "_dictTable">DictTable to check for the currency field.</param>
    /// <param name = "_dictType">Type of DictTable.</param>
    /// <param name = "_result">Event handler.</param>
    [SubscribesTo(classstr(SysExpression), delegatestr(SysExpression, OnBuildDataSourceField))]
    static void OnSysExpressionBuildModelField(Microsoft.Dynamics.AX.Framework.Expression.Model.Field _field, SysDictTable _dictTable, SysDictType _dictType, EventHandlerResult _result)
    {
        boolean isCurrency = _field.get_IsCurrency();
        CurrencyCode defaultCurrencyCode;
        Microsoft.Dynamics.AX.Framework.Expression.Model.DefaultCurrencyField defaultCurrencyField;

        if (!_result.hasResult() && isCurrency &&
            (!_dictTable || _dictTable.dataPrCompany()) &&
            _dictType &&
            _dictType.isExtending(extendedTypeNum(MoneyMST)))
        {
            defaultCurrencyCode = Ledger::accountingCurrency(CompanyInfo::findDataArea(curext()).RecId);
            defaultCurrencyField = new Microsoft.Dynamics.AX.Framework.Expression.Model.DefaultCurrencyField(_field, defaultCurrencyCode);
            _result.result(defaultCurrencyField);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>