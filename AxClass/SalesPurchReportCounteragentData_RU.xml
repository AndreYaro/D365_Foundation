<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchReportCounteragentData_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class SalesPurchReportCounteragentData_RU
{
    DirPartyName        name;
    Addressing          address;
    Phone               phone;
    TeleFax             teleFax;

    OKPO_RU             okpo;
    OKDP_RU             okdp;
    INN_RU              inn;
    StructDepartment_RU structDepartment;
    KPPU_RU             kpp;

    BankAccountMap      bankAccountTable;

    LanguageId          languageId;

    #define.space(' ')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    private FreeTxt add(FreeTxt _str, FreeTxt _txt)
    {
        return _str + (_str && _txt ? ', ' : '') + _txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyRequisites</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates string with company tax requisites.
    /// </summary>
    /// <returns>
    /// String with company tax requisites.
    /// </returns>
    public FreeTxt companyRequisites()
    {
        return (inn ?        SysLabel::labelId2String(literalstr("@GLS101470"), languageId) + ' ' + inn : '') +
               (kpp ? ', ' + SysLabel::labelId2String(literalstr("@GLS103115"), languageId) + ' ' + kpp : '') ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editAddress</Name>
				<Source><![CDATA[
    private str editAddress(boolean _dropLineBreaks   = false,
                            boolean _dropExcessCommas = false)
    {
        str ret = address;

        int commaPos,
            nextCommaPos,
            nextCharPos;

        if (_dropLineBreaks)
        {
            ret = strReplace(ret, '\n', ', ');
        }

        if (_dropExcessCommas)
        {
            commaPos = strfind(ret,  ',',  1,            strlen(ret));

            while (commaPos)
            {
                nextCommaPos = strfind(ret,  ',',  commaPos + 1, strlen(ret));
                nextCharPos  = strnfind(ret, ', ', commaPos + 1, strlen(ret));

                if (nextCharPos)
                {
                    if (nextCommaPos && nextCommaPos < nextCharPos)
                    {
                        ret = strdel(ret, commaPos, nextCommaPos - commaPos);
                        continue;
                    }
                }
                else
                {
                    ret          = strdel(ret, commaPos, strlen(ret));
                    nextCommaPos = 0;
                }

                commaPos = nextCommaPos;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns string containing address and contact details separated with spaces
    /// </summary>
    /// <param name="_dropLineBreaks">
    /// Boolean value indicating whether line breaks should be removed from address; optional.
    /// </param>
    /// <param name="_dropExcessCommas">
    /// Boolean value indicating whether excess commas should be removed from address; optional.
    /// </param>
    /// <returns>
    /// String containing address and contact details separated with spaces
    /// </returns>
    public FreeTxt fullAddress(boolean _dropLineBreaks   = false,
                               boolean _dropExcessCommas = false)
    {
        FreeTxt ret = this.editAddress(_dropLineBreaks, _dropExcessCommas);

        ret = this.add(ret, phone   ? strfmt("@SYS76498", strlwr(SysLabel::labelId2String(literalstr("@GLS101790"), languageId)), phone)   : "");
        ret = this.add(ret, teleFax ? strfmt("@SYS76498", strlwr(SysLabel::labelId2String(literalstr("@SYS7888"), languageId)), teleFax) : "");

        return  ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullBankAccountName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns string containing bankAccountName and details separated with spaces
    /// </summary>
    /// <returns>
    /// String containing bankAccountName and details separated with spaces
    /// </returns>
    public FreeTxt fullBankAccountName()
    {
        LogisticsPostalAddress bankPostalAddress = LogisticsPostalAddress::findByLocation(bankAccountTable.BankAccountMap::bankGroup_W().Location);

        return
            (bankAccountTable.AccountNum    ? strFmt("@SYS76498", SysLabel::labelId2String(literalstr("@GLS101791"), languageId), bankAccountTable.AccountNum)    + #space : "") +
            (bankAccountTable.Name          ? strFmt("@SYS76498", SysLabel::labelId2String(literalstr("@GLS101792"), languageId), bankAccountTable.bankName_RU()) + #space : "") +
            (bankPostalAddress.City         ? bankPostalAddress.City                                                                                              + #space : "") +
            (bankAccountTable.CorrAccount_W ? strFmt("@SYS76498", SysLabel::labelId2String(literalstr("@GLS101793"), languageId), bankAccountTable.CorrAccount_W) + #space : "") +
            (bankAccountTable.bankBIC_RU()  ? strFmt("@SYS76498", SysLabel::labelId2String(literalstr("@GLS101794"), languageId), bankAccountTable.bankBIC_RU()) : "");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullInvoiceInfo</Name>
				<Source><![CDATA[
    public FreeTxt fullInvoiceInfo(boolean _dropLineBreaks   = false,
                                   boolean _dropExcessCommas = false,
                                   boolean _addRequisites    = CompanyInfo::find().PrintINNKPPInAddress_RU)
    {
        FreeTxt ret = this.parmName();

        if (_addRequisites)
        {
            ret = this.add(ret, this.companyRequisites());
        }

        ret = this.add(ret, this.fullAddress(_dropLineBreaks, _dropExcessCommas));
        ret = this.add(ret, this.fullBankAccountName());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(LanguageId _languageId = CompanyInfo::languageId())
    {
        languageId = _languageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddress</Name>
				<Source><![CDATA[
    public Addressing parmAddress(Addressing _address = address)
    {
        address = _address;
        return address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBankAccountTable</Name>
				<Source><![CDATA[
    public BankAccountMap parmBankAccountTable(BankAccountMap _bankAccountTable = bankAccountTable)
    {
        bankAccountTable = _bankAccountTable;
        return bankAccountTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmINN</Name>
				<Source><![CDATA[
    public INN_RU parmINN(INN_RU _inn = inn)
    {
        inn = _inn;
        return inn;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKPP</Name>
				<Source><![CDATA[
    public KPPU_RU parmKPP(KPPU_RU _kpp = kpp)
    {
        kpp = _kpp;
        return kpp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public DirPartyName parmName(DirPartyName _name = name)
    {
        name = _name;
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOKDP</Name>
				<Source><![CDATA[
    public OKDP_RU parmOKDP(OKDP_RU _okdp = okdp)
    {
        okdp = _okdp;
        return okdp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOKPO</Name>
				<Source><![CDATA[
    public OKPO_RU parmOKPO(OKPO_RU _okpo = okpo)
    {
        okpo = _okpo;
        return okpo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPhone</Name>
				<Source><![CDATA[
    public Phone parmPhone(Phone _phone = phone)
    {
        phone = _phone;
        return phone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStructDept</Name>
				<Source><![CDATA[
    public StructDepartment_RU parmStructDept(StructDepartment_RU _structDepartment = structDepartment)
    {
        structDepartment = _structDepartment;
        return structDepartment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTelefax</Name>
				<Source><![CDATA[
    public TeleFax parmTelefax(TeleFax _teleFax = teleFax)
    {
        teleFax = _teleFax;
        return teleFax;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>