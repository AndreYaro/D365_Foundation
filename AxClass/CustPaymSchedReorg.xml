<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymSchedReorg</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustPaymSchedReorg extends CustVendPaymSchedReorg
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createPaymSchedTransLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an open transaction line for a payment schedule line of free text invoice.
    /// </summary>
    /// <param name="_custTransOpen">
    ///    The <c>CustTransOpen</c> table buffer.
    /// </param>

    public void createPaymSchedTransLine(CustVendTransOpen   _custTransOpen)
    {
        CustVendTrans           custTransLocal;
        CustTransOpenLine       custTransOpenLine;
        CustTransOpenLine       custTransOpenLineSum;
        CustInvoiceLineIdRef    custInvoiceLineIdRef;
        CustInvoiceJour         custInvoiceJour;
        CustInvoiceTrans        custInvoiceTrans;
        MarkupTrans             markupTrans;
        boolean                 isMarkupTrans;
        Factor                  calcFactor;
        Amount                  roundLineAmount;
        Amount                  calcLineAmount;
        Amount                  lineTotal;
        Amount                  totalLineAmount;
        Amount                  netDiff;
        ;

        custTransLocal      = CustTrans::find(_custTransOpen.RefRecId);

        custInvoiceJour     = CustInvoiceJour::findFromCustTrans(custTransLocal.Invoice, custTransLocal.TransDate , custTransLocal.AccountNum);

        isMarkupTrans       = MarkupTrans::exist(custInvoiceJour.TableId, custInvoiceJour.RecId);

        // Open Transaction line creates when customer parameter MarkOpenInvoiceLine is checked; transaction amount greater than zero
        // and invoice lines greater than 1 or invoice line have any miscellaneous charges.
        if (CustParameters::find().MarkOpenInvoiceLine == NoYes::Yes && custTransLocal.AmountCur > 0.0 &&
            custTransLocal.TransType == LedgerTransType::Cust && (CustInvoiceTrans::numOfLines(custTransLocal.Invoice, custTransLocal.TransDate) > 1 || isMarkupTrans))
        {
            calcFactor = (_custTransOpen.AmountCur / (custTransLocal.AmountCur - custTransLocal.SettleAmountCur)) * 100;

            while select forupdate custInvoiceTrans
                where custInvoiceTrans.InvoiceId == custTransLocal.Invoice
                   && custInvoiceTrans.InvoiceDate == custTransLocal.TransDate
                   && custInvoiceTrans.ReversedRecId == 0
            {
                if (SysCountryRegionCode::isLegalEntityInConsolidatedCountryRegion())
                {
                    totalLineAmount = CustOpenTransLineManager::calculateTotalAmountOfCustOpenTransLine(custInvoiceTrans);
                }
                else
                {
                    totalLineAmount =   custInvoiceTrans.LineAmount + custInvoiceTrans.TaxAmount;
                }
                calcLineAmount  =  (totalLineAmount  * calcFactor) / 100;
                roundLineAmount =  CurrencyExchange::round(calcLineAmount, custInvoiceTrans.CurrencyCode);

                lineTotal -= roundLineAmount;

                custInvoiceLineIdRef = CustInvoiceLineIdRef::find(custInvoiceTrans.CustInvoiceLineIdRef, true);

                if (custInvoiceTrans.CustInvoiceLineIdRef == 0)
                {
                    custInvoiceLineIdRef.clear();
                    custInvoiceLineIdRef.EntityType = CustInvoiceLineType::Customer;
                    custInvoiceLineIdRef.insert();

                    custInvoiceTrans.CustInvoiceLineIdRef = custInvoiceLineIdRef.RecId;
                    custInvoiceTrans.update();
                }

                custTransOpenLine.CustTransOpen          = _custTransOpen.RecId;
                custTransOpenLine.CustInvoiceLineIdRef   = custInvoiceTrans.CustInvoiceLineIdRef;
                custTransOpenLine.AmountCur              = roundLineAmount;
                custTransOpenLine.insert();

                custTransOpenLineSum.clear();

                // check penny difference for the same invoice reference record Id.
                select sum(AmountCur) from custTransOpenLineSum
                where custTransOpenLineSum.CustInvoiceLineIdRef == custInvoiceTrans.CustInvoiceLineIdRef;

                netDiff = totalLineAmount - custTransOpenLineSum.AmountCur;

                if (abs(netDiff) > 0 && abs(netDiff) < 1)
                {
                    select forupdate firstonly custTransOpenLine
                    order by RecId desc
                    where custTransOpenLine.CustTransOpen == _custTransOpen.RecId;

                    if (custTransOpenLine.RecId != 0 )
                    {
                        custTransOpenLine.AmountCur += (netDiff);
                        custTransOpenLine.update();

                        lineTotal += netDiff;
                    }
                }
            }

            // check penny difference for the same open trasaction record Id.
            select sum(AmountCur) from custTransOpenLineSum
            where custTransOpenLineSum.CustTransOpen == _custTransOpen.RecId;

            netDiff = _custTransOpen.AmountCur - custTransOpenLineSum.AmountCur ;

            if (abs(netDiff) > 0 && abs(netDiff) < 1)
            {
                select forupdate firstonly custTransOpenLine
                order by RecId desc
                where custTransOpenLine.CustTransOpen == _custTransOpen.RecId;

                if (custTransOpenLine.RecId != 0 )
                {
                    custTransOpenLine.AmountCur += (netDiff);
                    custTransOpenLine.update();

                    lineTotal += netDiff;
                }
            }

            if (isMarkupTrans)
            {
                while select forupdate markupTrans
                where markupTrans.TransTableId == custInvoiceJour.TableId &&
                      markupTrans.TransRecId == custInvoiceJour.RecId     &&
                     !markupTrans.IsDeleted
                {
                    totalLineAmount =   markupTrans.Value + markupTrans.TaxAmount;
                    calcLineAmount  =  (totalLineAmount * calcFactor) / 100;
                    roundLineAmount =  CurrencyExchange::round(calcLineAmount, markupTrans.CurrencyCode);

                    lineTotal -= roundLineAmount;

                    if (markupTrans.CustInvoiceLineIdRef == 0)
                    {
                        custInvoiceLineIdRef.clear();
                        custInvoiceLineIdRef.EntityType  = CustInvoiceLineType::MarkupTrans;
                        custInvoiceLineIdRef.insert();

                        markupTrans.CustInvoiceLineIdRef = custInvoiceLineIdRef.RecId;
                        markupTrans.update();
                    }

                    custTransOpenLine.CustTransOpen          = _custTransOpen.RecId;
                    custTransOpenLine.CustInvoiceLineIdRef   = markupTrans.CustInvoiceLineIdRef;
                    custTransOpenLine.AmountCur              = roundLineAmount;
                    custTransOpenLine.insert();

                    custTransOpenLineSum.clear();

                    // check penny difference for the same invoice reference record Id.
                    select sum(AmountCur) from custTransOpenLineSum
                    where custTransOpenLineSum.CustInvoiceLineIdRef ==  markupTrans.CustInvoiceLineIdRef;

                    netDiff = totalLineAmount - custTransOpenLineSum.AmountCur;

                    if (abs(netDiff) > 0 && abs(netDiff) < 1)
                    {
                        select forupdate firstonly custTransOpenLine
                        order by RecId desc
                        where custTransOpenLine.CustTransOpen == _custTransOpen.RecId;
                        if (custTransOpenLine.RecId != 0 )
                        {
                            custTransOpenLine.AmountCur += (netDiff);
                            custTransOpenLine.update();

                            lineTotal += netDiff;
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
