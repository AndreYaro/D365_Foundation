<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkExecuteDisplay_InfiniteLoopGuard_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkExecuteDisplay_InfiniteLoopGuard_Extension</c> class guards againist infinite recursion before a stack overflow occurs.
/// </summary>
[ExtensionOf(classStr(WhsWorkExecuteDisplay))]
final internal class WhsWorkExecuteDisplay_InfiniteLoopGuard_Extension
{
    const private int infiniteLoopThreshold = 100;
    private boolean infiniteLoopAlreadyChecked = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setGlobals</Name>
				<Source><![CDATA[
    public void setGlobals(WHSWorkExecuteMode  _mode,
                    int                 _step,
                    WHSUserId           _userId,
                    WHSRFPassthrough    _pass,
                    WHSWorkLine         _workLine)
    {
        boolean isFirstTimeGlobalsAreSetForThisInstance = pass == null;

        next setGlobals(_mode, _step, _userId, _pass, _workLine);
        
        if (isFirstTimeGlobalsAreSetForThisInstance)
        {
            this.preventStackOverflow();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWHSStackFramesAboveThreshold</Name>
				<Source><![CDATA[
    private boolean isWHSStackFramesAboveThreshold(System.Diagnostics.StackTrace _stackTrace)
    {
        int frameCount = _stackTrace.FrameCount;

        if (frameCount <= infiniteLoopThreshold)
        {
            return false;
        }
        int result = 0;
        
        for (int i = 0; i<frameCount; i++)
        {
            var frame = _stackTrace.GetFrame(i);
            if (frame)
            {
                var method = frame.GetMethod();
                if (method)
                {
                    var declaringType = method.DeclaringType;
                    if (declaringType)
                    {
                        str className = declaringType.Name;
                        if (strStartsWith(className, 'WHS') && !strEndsWith(className, 'Test'))
                        {
                            result++;
                        }
                    }
                }
            }
        }
        return result > infiniteLoopThreshold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preventStackOverflow</Name>
				<Source><![CDATA[
    private void preventStackOverflow()
    {
        if (this.mustPreventStackOverflow() &&
            !infiniteLoopAlreadyChecked)
        {
            List collectedInfo = this.collectStateInformationForFirstInitialization();

            int classesInitializedInThisTransaction = collectedInfo.elements();

            if (classesInitializedInThisTransaction > infiniteLoopThreshold)
            {
                var stackTrace = new System.Diagnostics.StackTrace(false);

                if (this.isWHSStackFramesAboveThreshold(stackTrace))
                {
                    str stackTraceAsString = stackTrace.ToString();

                    this.createInfiniteLoopLog(strFmt('{ "stacktrace": "%1", "info": "%2"}', stackTraceAsString, collectedInfo.toString()));
                    throw error(strFmt("@WAX:WarehouseMobileDeviceInfiniteLoop", mode));
                }
            }
        }
        infiniteLoopAlreadyChecked = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectStateInformationForFirstInitialization</Name>
				<Source><![CDATA[
    private List collectStateInformationForFirstInitialization()
    {
        str cacheKey = funcName();
        List collectedInfo = SysTransactionScopeCache::get(cacheKey, 0, null);

        if (!collectedInfo)
        {
            collectedInfo = new List(Types::String);
            SysTransactionScopeCache::set(cacheKey, 0, collectedInfo);
        }

        collectedInfo.addEnd(strFmt('{ "iteration": "%1", "mode": "%2", "step": "%3", "pass": "%4"}', collectedInfo.elements(), mode, step, pass ? pass.toString() : 'null'));

        return collectedInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInfiniteLoopLog</Name>
				<Source><![CDATA[
    private void createInfiniteLoopLog(str _logMessage)
    {
        UserConnection conn = new UserConnection();

        try
        {
            conn.ttsbegin();

            WHSOperationInternalErrorLog errorLog;

            errorLog.setConnection(conn);
            errorLog.ErrorType   = WHSOperationInternalErrorType::InfiniteLoop;
            errorLog.ClassName   = classStr(WHSWorkExecuteDisplay);
            errorLog.LogMsg      = _logMessage;

            errorLog.insert();

            conn.ttscommit();

            WHSWarehouseMobileDeviceTelemetryEventLogger::logMobileDeviceRequestInternalError(errorLog.ErrorType, errorLog.RecId);
        }
        finally
        {
            conn.finalize();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>