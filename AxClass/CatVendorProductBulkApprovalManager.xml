<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatVendorProductBulkApprovalManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CatVendorProductBulkApprovalManager</c> class provides services to the menu item classes in
///    catalog import that are used for processing workflow outcomes in bulk.
/// </summary>
/// <remarks>
///    This is extension of the <c>WorkflowWorkItemActionManager</c> class.Provides the ability to process
///    multiple workflow outcomes at a time.It retrieves workflow items for each selected record and
///    submits to the respective approval process in loop.This class dependent on the implementation of
///    the <c>WorkflowWorkItemTable</c> and <c>WorkflowElementTable</c> workflow framework tables.Changes
///    in the schema of the tables may break this class.
/// </remarks>
class CatVendorProductBulkApprovalManager extends WorkflowWorkItemActionManager
{
    CatVendorProductCandidate       catVendorProductCandidate;
    WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmProductCandidate</Name>
				<Source><![CDATA[
    protected CatVendorProductCandidate parmProductCandidate(CatVendorProductCandidate _catVendorProductCandidate = catVendorProductCandidate)
    {
        catVendorProductCandidate = _catVendorProductCandidate;

        return catVendorProductCandidate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItem</Name>
				<Source><![CDATA[
    public WorkflowWorkItemTable parmWorkflowWorkItem(WorkflowWorkItemTable _workItem = workItem)
    {
        WorkflowWorkItemTable ret = CatVendorProductBulkApprovalManager::getWorkflowWorkItemTable(this.parmProductCandidate());

        ret = super(ret);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemActionDialog</Name>
				<Source><![CDATA[
    protected WorkflowWorkItemActionDialog parmWorkflowWorkItemActionDialog(WorkflowWorkItemActionDialog _workflowWorkItemActionDialog = workflowWorkItemActionDialog)
    {
        workflowWorkItemActionDialog = _workflowWorkItemActionDialog;

        return workflowWorkItemActionDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptWorkflowWorkItemAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prompts for the action dialog for workflow work item actions
    /// </summary>
    protected void promptWorkflowWorkItemAction()
    {
        if (this.parmIsActionDialogClosedOK())
        {
            this.parmWorkflowComment(workflowWorkItemActionDialog.parmWorkflowComment());
            this.parmTargetUser(workflowWorkItemActionDialog.parmTargetUser());
            this.parmTargetQueue(workflowWorkItemActionDialog.parmTargetQueue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mayCreatePurchTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the pre-requisite checks before the creation of purchase order.
    /// </summary>
    /// <param name="_retailAttributesGlobalLookup">
    ///    A <c>RetailAttributesGlobalLookup</c> object that represents a table record.
    /// </param>
    /// <param name="_retailAttributesLegalEntityLookup">
    ///    A <c>RetailAttributesLegalEntityLookup</c> object that represents a table record.
    /// </param>
    /// <returns>
    /// true if condition succeeded; otherwise, false.
    /// </returns>
    internal boolean mayCreatePurchTable(RetailAttributesGlobalLookup _retailAttributesGlobalLookup, RetailAttributesLegalEntityLookup _retailAttributesLegalEntityLookup)
    {
        boolean result = _retailAttributesGlobalLookup.GroupStorageDimension && _retailAttributesGlobalLookup.GroupTrackingDimension
                            && _retailAttributesLegalEntityLookup.GroupInventoryModel && _retailAttributesLegalEntityLookup.WarehousePurch
                            && _retailAttributesLegalEntityLookup.UnitInvent;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowWorkItemTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a <c>WorkflowWorkItemTable</c> record for workflow enabled record.
    /// </summary>
    /// <param name="_catVendorProductCandidate">
    ///    A <c>CatVendorProductCandidate</c> object that represents a workflow enabled record.
    /// </param>
    /// <returns>
    ///    A <c>WorkflowWorkItemTable</c> record.
    /// </returns>
    private static WorkflowWorkItemTable getWorkflowWorkItemTable(CatVendorProductCandidate _catVendorProductCandidate)
    {
        WorkflowWorkItemTable           workflowWorkItemTable;
        WorkflowElementTable            workflowElementTable;
        ListIterator                    workItemListIterator;
        guid                            workflowWorkItemId;
        List                            workItemList;

        if ( _catVendorProductCandidate.Status == CatVendorProductStatus::Submitted )
        {
            workItemList = Workflow::findWorkItemsForCurrentUser( _catVendorProductCandidate );

            if ( workItemList.elements() > 0 )
            {
                workItemListIterator = new ListIterator(workItemList);
                workflowWorkItemId = workItemListIterator.value();

                select * from workflowWorkItemTable
                    join ElementId from workflowElementTable
                        where workflowWorkItemTable.Id == workflowWorkItemId &&
                                workflowElementTable.ElementId == workflowWorkItemTable.ElementId;
            }
        }

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        FormDataSource                          formDataSource;
        CatVendorProductCandidate               catVendorProductCandidate;
        CatVendorProductBulkApprovalManager     catVendorProductBulkApprovalManager = new CatVendorProductBulkApprovalManager();
        CatVendorProductCandidate               catVendorProductCandidateForVendor;
        boolean                                 createPurchaseOrder;
        CatVendorCatalog                        catVendorCatalog;
        CatVendorCatalogMaintenanceRequest      catVendorCatalogMaintenanceRequest;
        VendTable                               vendTable;
        CatVendorReleaseCatalog                 catVendorReleaseCatalog;
        PurchTable                              purchTable;
        NumberSeq                               numberSeq;
        CatVendorCatalogProductPerCompany       catVendorCatalogProductPerCompany;
        PurchId                                 purchId;
        RetailAttributesGlobalLookup            retailAttributesGlobalLookup;
        RetailAttributesLegalEntityLookup       retailAttributesLegalEntityLookup;
        boolean                                 configKey;

        int catVendorProductCandidateCounter =1;

        catVendorProductBulkApprovalManager.parmArgs(_args);
        if ( _args.caller() && _args.caller() is FormRun)
        {
            catVendorProductBulkApprovalManager.parmCaller(_args.caller());

            formDataSource = _args.caller().datasource();
            boolean calledFromWorkflowWorkList = formDataSource.cursor() is WorkflowWorkItemTable;

            if (calledFromWorkflowWorkList)
            {
                catVendorProductCandidate = _args.record() as CatVendorProductCandidate;
            }
            else
            {
                formDataSource = _args.caller().getCatVendorProductCandidateDS();
                catVendorProductCandidate = getFirstSelection(formDataSource);
            }

            configKey = isConfigurationkeyEnabled(configurationKeyNum(Retail));

            if (configKey && !calledFromWorkflowWorkList)
            {
                createPurchaseOrder = _args.caller().isCreatePurchaseOrderChecked();
            }

            while (catVendorProductCandidate)
            {
                catVendorProductBulkApprovalManager.parmProductCandidate(catVendorProductCandidate);

                if (catVendorProductCandidate.Status == CatVendorProductStatus::Submitted)
                {
                    //show the action dialog only once for all workflow work item actions.
                    if (catVendorProductCandidateCounter ==1)
                    {
                        //Fetch the vendor information from the first selected product information.
                        if (configKey)
                        {
                            select RecId, VendorParty from catVendorCatalog

                            join VendorCatalog, RecId from catVendorCatalogMaintenanceRequest
                                where catVendorCatalogMaintenanceRequest.VendorCatalog == catVendorCatalog.RecId

                            join catVendorProductCandidateForVendor
                                where catVendorProductCandidateForVendor.CatalogMaintenanceRequest == catVendorCatalogMaintenanceRequest.RecId
                                && catVendorProductCandidateForVendor.RecId == catVendorProductCandidate.RecId;

                            catVendorReleaseCatalog = CatVendorReleaseCatalog::find(catVendorCatalog.RecId);

                            select AccountNum from vendTable where vendTable.Party == catVendorCatalog.VendorParty;
                        }

                        // Create a purchase order to contain all going-to-be-released products
                        if (configKey && createPurchaseOrder && catVendorReleaseCatalog)
                        {
                            retailAttributesGlobalLookup = RetailAttributesGlobalLookup::findByCategory(catVendorProductCandidate.Category);
                            retailAttributesLegalEntityLookup = RetailAttributesLegalEntityLookup::findByCategory(catVendorProductCandidate.Category, CompanyInfo::current());

                            if (catVendorProductBulkApprovalManager.mayCreatePurchTable(retailAttributesGlobalLookup, retailAttributesLegalEntityLookup))
                            {
                                ttsbegin;
                                numberSeq = NumberSeq::newGetNum(PurchParameters::numRefPurchId());
                                purchId = numberSeq.num();

                                //create purchase order
                                purchTable.clear();
                                purchTable.initValue();
                                purchTable.PurchaseType = PurchaseType::Purch;
                                purchTable.PurchId = purchId;
                                purchTable.OrderAccount = vendTable.AccountNum;
                                purchTable.initFromVendTable();
                                purchTable.InventLocationId = retailAttributesLegalEntityLookup.WarehousePurch;
                                purchTable.setInventSiteId(InventLocation::find(retailAttributesLegalEntityLookup.WarehousePurch).InventSiteId);
                                purchTable.insert();
                                ttscommit;
                            }
                            else
                            {
                                CatVendorCatalogImportEventLog::logEvent(catVendorProductCandidate.CatalogMaintenanceRequest,
                                                                        CatImportProcessingMessageType::Warning,
                                                                        CatVendorCatalogProcessingState::ReleasingApprovedProductReleased,
                                                                        "@RET260128");
                            }
                        }

                        CatVendorProductBulkApprovalManager::promptWorkflowWorkItemActionDailog(
                                                                                        catVendorProductCandidate,
                                                                                        catVendorProductBulkApprovalManager,
                                                                                        _args.menuItemName()
                                                                                        );
                        catVendorProductCandidateCounter++;
                    }

                    if (catVendorProductBulkApprovalManager.parmIsActionDialogClosedOK())
                    {
                        catVendorProductBulkApprovalManager.run();
                    }
                    else
                    {
                        break;
                    }
                }

                catVendorProductCandidate.markProductToRelease();//Mark the products to release for legal entites.

                if (configKey)
                {
                    ttsbegin;
                    catVendorCatalogProductPerCompany = CatVendorCatalogProductPerCompany::find(catVendorProductCandidate.RecId,CompanyInfo::find().DataArea,true);
                    if (catVendorCatalogProductPerCompany)
                    {
                        catVendorCatalogProductPerCompany.RetailPurchTableRefRecId = PurchTable::find(purchId).RecId;
                        catVendorCatalogProductPerCompany.update();
                    }
                    ttscommit;
                }

                if (calledFromWorkflowWorkList)
                {
                    catVendorProductCandidate = null;
                }
                else
                {
                    catVendorProductCandidate  = formDataSource.getNext();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptWorkflowWorkItemActionDailog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prompts a dialog for a workflow work item action.
    /// </summary>
    /// <param name="_catVendorProductCandidate">
    ///    A record form the <c>CatVendorProductCandidate</c> table.
    /// </param>
    /// <param name="_catVendorProductBulkApprovalManager">
    ///    An instance of <c>CatVendorProductBulkApprovalManager</c> class.
    /// </param>
    /// <param name="_menuItemName">
    ///    The <c>MenuItemName</c> object for which the action dialog is called.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The <paramref name="_menuItemName" /> is not a <c>CatProductApproveAll</c> object or a
    ///    <c>CatProductDenyAll</c> object.
    /// </exception>
    private static void promptWorkflowWorkItemActionDailog
                                        (
                                        CatVendorProductCandidate _catVendorProductCandidate,
                                        CatVendorProductBulkApprovalManager _catVendorProductBulkApprovalManager,
                                        menuItemName _menuItemName
                                        )
    {
        WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;
        WorkflowWorkItemActionType      workflowWorkItemActionType;
        WorkflowWorkItemTable           workflowWorkItemTable;

        switch (_menuItemName)
        {
            case menuitemactionstr(CatProductApprovalApprove):
                workflowWorkItemActionType = WorkflowWorkItemActionType::Complete;
                break;

            case menuitemactionstr(CatProductApprovalDeny):
                workflowWorkItemActionType = WorkflowWorkItemActionType::Deny;
                break;

            default :
            throw error("@SYS331018");
        }

        workflowWorkItemTable = CatVendorProductBulkApprovalManager::getWorkflowWorkItemTable(_catVendorProductCandidate);
        workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(
                                                            workflowWorkItemTable,
                                                            workflowWorkItemActionType,
                                                            new MenuFunction(_menuItemName,MenuItemType::Action)
                                                           );

        workflowWorkItemActionDialog.run();

        _catVendorProductBulkApprovalManager.parmIsActionDialogClosedOK(workflowWorkItemActionDialog.parmIsClosedOK());

        if ( workflowWorkItemActionDialog.parmIsClosedOK() )
        {
            _catVendorProductBulkApprovalManager.parmWorkflowWorkItemActionDialog(workflowWorkItemActionDialog);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>