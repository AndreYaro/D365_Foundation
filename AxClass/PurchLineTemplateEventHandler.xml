<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineTemplateEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchLineTemplateEventHandler</c> class is used as an event handler for a purchase line
///    workflow.
/// </summary>
/// <remarks>
///    This class implements the <c>WorkflowStartedEventHandler</c>, <c>WorkflowCanceledEventHandler</c>,
///    <c>WorkflowCompletedEventHandler</c> class interfaces and handles the updates required when a
///    different workflow event has ended.
/// </remarks>
class
    PurchLineTemplateEventHandler

implements
    WorkflowStartedEventHandler,
    WorkflowCanceledEventHandler,
    WorkflowCompletedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>WorkflowState</c> field on the <c>PurchLine</c> table.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    /// <remarks>
    ///    This method is called from the workflow framework when the workflow is completed. The <c>WorkflowState</c>
    ///    field on the <c>PurchLine</c> table is set to the <c>TradeWorkflowState::NotSubmitted</c>
    ///    enumeration value.
    /// </remarks>
    public void  canceled(WorkflowEventArgs  _workflowEventArgs)
    {
        ttsbegin;

        PurchLine::setWorkflowState(_workflowEventArgs.parmWorkflowContext().parmRecId(), TradeWorkflowState::NotSubmitted);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>WorkflowState</c> field on the <c>PurchLine</c> table.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    /// <remarks>
    ///    This method is called from the workflow framework when the workflow is completed. The <c>WorkflowState</c>
    ///    field on the <c>PurchLine</c> table is set to the <c>TradeWorkflowState::Approved</c>
    ///    enumeration value.
    /// </remarks>
    public void  completed(WorkflowEventArgs  _workflowEventArgs)
    {
        ttsbegin;

        PurchLine::setWorkflowState(_workflowEventArgs.parmWorkflowContext().parmRecId(), TradeWorkflowState::Completed);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the <c>WorkflowState</c> field on the <c>PurchLine</c> table.
    /// </summary>
    /// <param name="_workflowEventArgs">
    ///    An instance of the <c>WorkflowEventArgs</c> class.
    /// </param>
    /// <remarks>
    ///    This method is called from the workflow framework when the workflow is completed. The <c>WorkflowState</c>
    ///    field on the <c>PurchLine</c> table is set to the <c>TradeWorkflowState::Submitted</c>
    ///    enumeration value.
    /// </remarks>
    public void started(WorkflowEventArgs _workflowEventArgs)
    {
        ttsbegin;

        PurchLine::setWorkflowState(_workflowEventArgs.parmWorkflowContext().parmRecId(), TradeWorkflowState::Submitted);

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>