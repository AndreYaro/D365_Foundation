<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTable_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(tableStr(LedgerJournalTable))]
public final class LedgerJournalTable_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSimulation_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the journal is of simulation type.
    /// </summary>
    /// <returns>true if the journal is of simulation type, false otherwise.</returns>
    public boolean isSimulation_IT()
    {
        LedgerJournalName ledgerJournalName = LedgerJournalName::find(this.JournalName);

        return ledgerJournalName.IsSimulation_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerJournalTable_onDeleting_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws error if simulation is posted for current journal.
    /// </summary>
    /// <param name="_sender">The <c>LedgerJournalTable</c> record.</param>
    /// <param name="_e">Event arguments.</param>
    [DataEventHandler(tableStr(LedgerJournalTable), DataEventType::Deleting)]
    public static void LedgerJournalTable_onDeleting_IT(Common _sender, DataEventArgs _e)
    {
        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            LedgerJournalTable ledgerJournalTable = _sender as LedgerJournalTable;

            if (ledgerJournalTable && !LedgerJournalTable::checkSimulationPosted_IT(ledgerJournalTable))
            {
                throw error("@SYS21628");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBePosted_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if given journal can be posted.
    /// </summary>
    /// <param name = "_ledgerJournalTable">The <c>LedgerJournalTable</c> record.</param>
    /// <returns>true if given journal can be posted; false otherwise.</returns>
    public static boolean canBePosted_IT(LedgerJournalTable _ledgerJournalTable)
    {
        return !(_ledgerJournalTable.JournalType == LedgerJournalType::Daily
            && _ledgerJournalTable.IsSimulation_IT()
            && !_ledgerJournalTable.SimulationPosted_IT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRequired_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cheks if given journal requires simulation validation.
    /// </summary>
    /// <param name = "_ledgerJournalTable">The <c>LedgerJournalTable</c> record.</param>
    /// <returns>Yes if given journal requires simulation validation; No otherwise.</returns>
    public static display NoYes checkRequired_IT(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalName ledgerJournalName = _ledgerJournalTable.ledgerJournalName();
        NoYes ret;

        if (ledgerJournalName && ledgerJournalName.RequiresSimulationValidation_IT == NoYes::Yes)
        {
            ret = NoYes::Yes;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSimulationPosted_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if simulation is posted for given journal.
    /// </summary>
    /// <param name = "_ledgerJournalTable">The <c>LedgerJournalTable</c> record.</param>
    /// <returns>true if simulation is posted for given journal; false otherwise.</returns>
    public static boolean checkSimulationPosted_IT(LedgerJournalTable _ledgerJournalTable)
    {
        return _ledgerJournalTable.SimulationPosted_IT 
            ? checkFailed(strFmt("@ExtendedItallianLocalization:PostedSimulationsEsistForJournal", _ledgerJournalTable.JournalNum)) 
            : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reOpenSimulation_IT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reopens journal simulation.
    /// </summary>
    /// <param name = "_ledgerJournalTable">The <c>LedgerJournalTable</c> record.</param>
    public static void reOpenSimulation_IT(LedgerJournalTable _ledgerJournalTable)
    {
        if (_ledgerJournalTable.SimulationPosted_IT && !_ledgerJournalTable.Posted)
        {
            SimulationJournalReOpen_IT simulationJournalReOpen = SimulationJournalReOpen_IT::construct(_ledgerJournalTable.JournalNum);
            simulationJournalReOpen.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>