<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjSubconPOProductReceiptPostBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjSubconPOProductReceiptPostBatch</c> batch to post all non posted subcon PO product receipts
/// </summary>
public class ProjSubconPOProductReceiptPostBatch extends RunBaseBatch implements BatchRetryable
{
    private ProjPurchSubConInstrumentationLogger logger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjSubconPOProductReceiptPostBatch construct()
    {
        return new ProjSubconPOProductReceiptPostBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Proj:PostAllNonPostedProductReceipts";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(xArgs _args)
    {
        ProjSubconPOProductReceiptPostBatch projSubconPOProductReceiptPostBatch = ProjSubconPOProductReceiptPostBatch::construct();

        if (!projSubconPOProductReceiptPostBatch.prompt())
        {
            return;
        }

        projSubconPOProductReceiptPostBatch.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        ProjSubConProductReceipt projSubConProductReceipt;
        logger = ProjPurchSubConInstrumentationLogger::createLogger(classStr(ProjSubconPOProductReceiptPostBatch));

        while select PurchId, SubconNumber, SubConProductReceiptId from projSubConProductReceipt
            where projSubConProductReceipt.Posted == NoYes::No
        {
            try
            {
                ttsbegin;
                ProjPostSubConProductReceipt projPostSubConProductReceipt = new ProjPostSubConProductReceipt();
                boolean processed = projPostSubConProductReceipt.proceed(projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId, projSubConProductReceipt.ReceiptDate);

                if (processed)
                {
                    ProjSubConProductReceipt projSubConProductReceiptLoc = ProjSubConProductReceipt::findByProductReceiptNum(projSubConProductReceipt.SubConProductReceiptId, true);
                    ProjPostSubConProductReceipt.updateProductReceiptStatusAndActuals(projSubConProductReceiptLoc);
                }
                ttscommit;
            }
            catch (Exception::TransientSqlConnectionError)  // In case of error with sql connection, db can't be updated to reflect error status. Log data to telemetry.
            {
                if (xSession::currentRetryCount() <= #RetryNum && ProjTransientSQLConnectionRetryProvider::retryTransientSqlConnectionError())
                {
                    logger.logWarning(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                            this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                            Exception::TransientSqlConnectionError, xSession::currentRetryCount()));
                    retry;
                }
                else
                {
                    logger.logError(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                            this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                            Exception::TransientSqlConnectionError, xSession::currentRetryCount()));
                    Error (strFmt("@Proj:ProjectSubconProductReceiptPostingFailure", projSubConProductReceipt.SubConProductReceiptId));
                    continue;
                }
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.logError(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                            this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                            Exception::Deadlock, xSession::currentRetryCount()));
                    Error (strFmt("@Proj:ProjectSubconProductReceiptPostingFailure", projSubConProductReceipt.SubConProductReceiptId));
                    // Assumes that any error message was already raised at the point that threw the exception, so continue to the next record.
                    continue;
                }
                else
                {
                    logger.logWarning(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                            this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                            Exception::Deadlock, xSession::currentRetryCount()));
                    sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    logger.logError(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                            this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                            Exception::UpdateConflict, xSession::currentRetryCount()));
                    Error (strFmt("@Proj:ProjectSubconProductReceiptPostingFailure", projSubConProductReceipt.SubConProductReceiptId));
                    // Assumes that any error message was already raised at the point that threw the exception, so continue to the next record.
                    continue;
                }
                else
                {
                    logger.logWarning(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                            this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                            Exception::UpdateConflict, xSession::currentRetryCount()));
                    retry;
                }
            }
            
            catch (Exception::Error)
            {
                Error (strFmt("@Proj:ProjectSubconProductReceiptPostingFailure", projSubConProductReceipt.SubConProductReceiptId));
                logger.logError(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                            this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                            Exception::Error, xSession::currentRetryCount()));
                // Assumes that any error message was already raised at the point that threw the exception, so continue to the next record.
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>