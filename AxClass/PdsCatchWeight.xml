<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsCatchWeight</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PdsCatchWeight</c> class handles inventory conversions and validations for catch weight
/// items.
/// </summary>
class PdsCatchWeight
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustSplitInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the quantity to be split in inventory unit based on original quantities and requested
    /// quantities to be split considering catch weight constraints.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_cwOriginalQuantity">
    /// The original quantity in catch weight unit.
    /// </param>
    /// <param name="_originalQuantity">
    /// The original quantity in inventory unit.
    /// </param>
    /// <param name="_cwRequestedSplitQuantity">
    /// The quantity to split in catch weight unit.
    /// </param>
    /// <param name="_requestedSplitQuantity">
    /// The quantity to split in inventory unit.
    /// </param>
    /// <returns>
    /// The quantity to split in inventory unit.
    /// </returns>
    /// <remarks>
    /// This method adjusts <c>_requestedSplitQuantity</c> quantity in the way that remainder does not fall
    /// outside catch weight constraints.
    /// </remarks>
    public static InventQty adjustSplitInventQty(
        ItemId          _itemId,
        PdsCWInventQty  _cwOriginalQuantity,
        InventQty       _originalQuantity,
        PdsCWInventQty  _cwRequestedSplitQuantity,
        InventQty       _requestedSplitQuantity)
    {
        PdsCWInventQty  cwDeltaQuantity = _cwOriginalQuantity - _cwRequestedSplitQuantity;
        InventQty       deltaQuantity = _originalQuantity - _requestedSplitQuantity;
        InventQty       minimalQuantity = PdsCatchWeight::minInventQty(_itemId, cwDeltaQuantity);
        InventQty       maximalQuantity = PdsCatchWeight::maxInventQty(_itemId, cwDeltaQuantity);
        InventQty       lowerQuantityLimit = min(minimalQuantity, maximalQuantity);
        InventQty       upperQuantityLimit = max(minimalQuantity, maximalQuantity);
        InventQty       splitQuantity = _requestedSplitQuantity;

        if (deltaQuantity < lowerQuantityLimit)
        {
            splitQuantity -= lowerQuantityLimit - deltaQuantity;
        }
        else if (deltaQuantity > upperQuantityLimit)
        {
            splitQuantity -= upperQuantityLimit - deltaQuantity;
        }

        return splitQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustSplitQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the quantity and catch weight quantity to be split in inventory unit based on
    /// original quantities and requested quantities to be split considering catch weight
    /// constraints.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_originalQuantity">
    /// The original positive quantity in inventory unit.
    /// </param>
    /// <param name="_originalCWQuantity">
    /// The original positive quantity in catch weight unit.
    /// </param>
    /// <param name="_requestedSplitQuantity">
    /// The positive quantity to split in inventory unit.
    /// </param>
    /// <param name="_requestedSplitCWQuantity">
    /// The positive quantity to split in catch weight unit.
    /// </param>
    /// <returns>
    /// A container with the quantity to split in inventory unit and catch weight quantity to split.
    /// </returns>
    /// <remarks>
    /// This method adjusts <c>_requestedSplitQuantity</c> quantity and <c>_requestedSplitCWQuantity</c>
    /// quantity in the way that remainder does not fall outside catch weight constraints.
    /// </remarks>
    public static container adjustSplitQuantities(
        ItemId          _itemId,
        InventQty       _originalQuantity,
        PdsCWInventQty  _originalCWQuantity,
        InventQty       _requestedSplitQuantity,
        PdsCWInventQty  _requestedSplitCWQuantity)
    {
        InventQty       remainingQuantity;
        PdsCWInventQty  remainingCWQuantity;
        InventQty       grantedQuantity;
        PdsCWInventQty  grantedCWQuantity;
        InventQty       minRemainingQuantity;
        PdsCWInventQty  minRemainingCWQuantity;

        if (_originalQuantity < 0 || _originalCWQuantity < 0 ||
            _requestedSplitQuantity < 0 || _requestedSplitCWQuantity < 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (   _requestedSplitQuantity   >= _originalQuantity
            && _requestedSplitCWQuantity >= _originalCWQuantity)
        {
            // There is more requested than available, take all available
            return [_originalQuantity, _originalCWQuantity];
        }

        // There is remainder quantity after satisfying the request
        // (quantity, catch weight or both)
        remainingQuantity   = max(0, _originalQuantity - _requestedSplitQuantity);
        remainingCWQuantity = max(0, _originalCWQuantity - _requestedSplitCWQuantity);

        if (   _originalCWQuantity > 0
            && remainingCWQuantity == 0)
        {
            remainingCWQuantity = 1;    // 0 CW transactions after the adjustment are not allowed
        }

        grantedQuantity     = _originalQuantity - remainingQuantity;
        grantedCWQuantity   = _originalCWQuantity - remainingCWQuantity;

        if (_originalCWQuantity == 0)
        {
            // Especial case. If we had already a 0 CW transaction, it is ok to reduce the amount
            // independent of constraints
            return [grantedQuantity, 0];
        }

        if (PdsCatchWeight::validateInventQty(
                                    _itemId,
                                    remainingQuantity,
                                    remainingCWQuantity,
                                    false))
        {
            // The remaining quantity would be valid, take as requested
            return [grantedQuantity, grantedCWQuantity];
        }

        // The remaining quantity would be not valid,
        // leave a transaction with enough quantity to make it valid
        // (minimum invent quantity for the CW units left)
        minRemainingQuantity = PdsCatchWeight::minInventQty(_itemId, remainingCWQuantity);
        if (remainingQuantity < minRemainingQuantity)
        {
            grantedQuantity -= minRemainingQuantity - remainingQuantity;
            if (grantedQuantity >= 0)
            {
                return [grantedQuantity, grantedCWQuantity];
            }
        }

        // Or if the transaction is left with too much quantity, make it valid by taking less CW
        minRemainingCWQuantity = PdsCatchWeight::minCWQty(_itemId, remainingQuantity);
        if (remainingCWQuantity < minRemainingCWQuantity)
        {
            grantedCWQuantity -=  minRemainingCWQuantity - remainingCWQuantity;
            if (grantedCWQuantity >= 0)
            {
                return [grantedQuantity, grantedCWQuantity];
            }
        }

        // Cannot leave a valid transaction, give up
        return [0, 0];
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a quantity from a catch weight unit to an inventory unit.
    /// </summary>
    /// <param name="_cwQty">
    ///     The quantity to convert.
    /// </param>
    /// <param name="_productRecId">
    ///     The ID of the product.
    /// </param>
    /// <param name="_fromCWUnitRecId">
    ///     The ID of the unit of measure in which the quantity is specified.
    /// </param>
    /// <param name="_toUnitRecId">
    ///     The ID of the unit of measure to which the quantity should be converted.
    /// </param>
    /// <returns>
    ///     The converted value of the quantity if the conversion is successful; otherwise, zero.
    /// </returns>
    private static InventQty convertCWQty(
        PdsCWInventQty      _cwQty,
        EcoResProductRecId  _productRecId,
        UnitOfMeasureRecId  _fromCWUnitRecId,
        UnitOfMeasureRecId  _toUnitRecId)
    {
        UnitOfMeasureConverter_Product  unitConverter   = UnitOfMeasureConverter_Product::construct();

        if (    (_cwQty             == 0)    // quantity is 0
            ||  (_productRecId      == 0)    // product is not specified
            ||  (_fromCWUnitRecId   == 0)    // from Unit is not specified
            ||  (_toUnitRecId       == 0))   // to Unit is not specified
        {
            return 0;
        }

        unitConverter.parmProduct(_productRecId);
        unitConverter.parmFromUnitOfMeasure(_fromCWUnitRecId);
        unitConverter.parmToUnitOfMeasure(_toUnitRecId);
        unitConverter.parmRoundAbsoluteValue(NoYes::Yes);
        unitConverter.parmApplyRounding(NoYes::Yes);

        return unitConverter.convertValue(_cwQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQtyToCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a quantity in the specified unit to a catch weight quantity.
    /// </summary>
    /// <param name="_itemId">
    /// A string value that holds the item ID.
    /// </param>
    /// <param name="_qty">
    /// A real value that represents a quantity to be converted.
    /// </param>
    /// <param name="_unitId">
    /// A string value that represents a unit symbol.
    /// </param>
    /// <param name="_applyRounding">
    /// A Boolean that indicates whether rounding should be applied.
    /// </param>
    /// <returns>
    /// A real value that represents a catch weight quantity.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// The specified unit ID is empty.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The inventory unit ID does not exist.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    /// The catch weight unit ID does not exist.
    /// </exception>
    public static PdsCWInventQty convertQtyToCWQty(
        ItemId              _itemId,
        Qty                 _qty,
        UnitOfMeasureSymbol _unitId,
        NoYes               _applyRounding      = NoYes::Yes)
    {
        UnitOfMeasure           specifiedUnitOfMeasure;
        UnitOfMeasure           inventUnitOfMeasure;
        UnitOfMeasure           cwUnitOfMeasure;

        UnitOfMeasureSymbol     inventUnitId;
        UnitOfMeasureSymbol     cwUnitId;

        InventQty               inventQty;
        EcoResProductRecId      productRecId;

        if (!PdsGlobal::pdsIsCWItem(_itemId))
        {
            return 0;
        }

        if (! _qty)
        {
            return _qty;
        }

        if (! _unitId)
        {
            throw error("@SYS190834");
        }

        cwUnitId      = PdsCatchWeightItem::find(_itemId).PdsCWUnitId;

        if (! cwUnitId)
        {
            throw error(strFmt("@SYS89866","@PDS297"));
        }

        if (_unitId == cwUnitId)
        {
            return _qty;
        }

        inventUnitId  = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;
        if (! inventUnitId)
        {
            throw error("@SYS329027");
        }

        productRecId = InventTable::find(_itemId).Product;
        inventUnitOfMeasure     = UnitOfMeasure::findBySymbol(inventUnitId);

        if (_unitId != inventUnitId)
        {
            // convert first to invent unit
            specifiedUnitOfMeasure  = UnitOfMeasure::findBySymbol(_unitId);
            inventQty = UnitOfMeasureConverter::convert(_qty,
                                                        specifiedUnitOfMeasure.RecId,
                                                        inventUnitOfMeasure.RecId,
                                                        NoYes::Yes,
                                                        productRecId,
                                                        _applyRounding);
        }
        else
        {
            inventQty = _qty;
        }

        cwUnitOfMeasure = UnitOfMeasure::findBySymbol(cwUnitId);

        // convert to catch weight unit
        return UnitOfMeasureConverter::convert( inventQty,
                                                inventUnitOfMeasure.RecId,
                                                cwUnitOfMeasure.RecId,
                                                NoYes::Yes,
                                                productRecId,
                                                _applyRounding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an inventory quantity to a catch weight quantity.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which the quantity is to be converted.
    /// </param>
    /// <param name="_qty">
    /// The inventory quantity to be converted.
    /// </param>
    /// <param name="_applyRounding">
    /// A Boolean value that determines whether the resulting catch weight quantity should be rounded
    /// according to the rule defined on the unit; optional.
    /// </param>
    /// <returns>
    /// A converted catch weight quantity.
    /// </returns>
    public static PdsCWInventQty cwQty(ItemId _itemId, InventQty _qty, boolean _applyRounding = true)
    {
        #COSNumbers

        return conPeek(PdsCatchWeight::cwUnitAndQty(_itemId,_qty, _applyRounding),#2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwRoundUpInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds up the invent quantity to the next catch weight quantity.
    /// </summary>
    /// <param name="_itemId">
    /// The catch weight item ID of the quantity that is rounded up.
    /// </param>
    /// <param name="_qty">
    /// The quantity to round up.
    /// </param>
    /// <returns>
    /// The invent quantity rounded up to the next catch weight quantity.
    /// </returns>
    public static InventQty cwRoundUpInventQty(
        ItemId      _itemId,
        InventQty   _qty)
    {
        // Get the unrounded CW quantity
        PdsCWInventQty cwQty = PdsCatchWeight::cwQty(_itemId, _qty, false);

        // Always round up to whole CW units
        cwQty = roundUpDec(cwQty, 0);

        return PdsCatchWeight::inventQty(_itemId, cwQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwUnitAndQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts an inventory quantity to a catch weight quantity.
    /// </summary>
    /// <param name="_itemId">
    /// An item for which the quantity is to be converted.
    /// </param>
    /// <param name="_qty">
    /// An inventory quantity to be converted.
    /// </param>
    /// <param name="_applyRounding">
    /// A <c>Boolean</c> value that determines whether the resulting catch weight quantity should be
    /// rounded according to the rule defined on the unit; optional.
    /// </param>
    /// <returns>
    /// A catch weight unit and converted catch weight quantity in a container.
    /// </returns>
    public static container cwUnitAndQty(ItemId _itemId, InventQty _qty, boolean _applyRounding = true)
    {
        PdsCWUnitId                 cwUnit;
        PdsCWInventQty              cwQty;
        container                   cwUnitAndQty;

        if (!PdsGlobal::pdsIsCWItem(_itemId))
        {
            return ['', 0];
        }

        cwUnit = PdsCatchWeightItem::find(_itemId).PdsCWUnitId;
        if (_qty == 0)
        {
            return  [cwUnit, _qty];
        }

        UnitOfMeasureConverter_Product converter = UnitOfMeasureConverter_Product::construct();

        converter.parmProduct(InventTable::itemProduct(_itemId));
        converter.parmFromUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(
            InventTableModule::find(_itemId,ModuleInventPurchSales::Invent).UnitId));
        converter.parmToUnitOfMeasure(UnitOfMeasure::unitOfMeasureIdBySymbol(cwUnit));
        converter.parmApplyRounding(_applyRounding);

        //calculate catch weight quantity - which should round to catch units decimal precision
        cwQty = converter.convertValue(_qty);

        cwUnitAndQty = [cwUnit, cwQty];

        return cwUnitAndQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cwUnitId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the catch weight unit for the specified item ID.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which to find the catch weight unit.
    /// </param>
    /// <returns>
    /// The catch weight unit ID.
    /// </returns>
    public static PdsCWUnitId cwUnitId(ItemId _itemId)
    {
        PdsCWUnitId  cwUnit = '';

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            cwUnit =  PdsCatchWeightItem::pdsCWUnitId(_itemId);
        }

        return cwUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a catch weight quantity to an inventory quantity or to a quantity in the specified unit.
    /// </summary>
    /// <param name="_itemId">
    /// An item for which to convert the catch weight quantity.
    /// </param>
    /// <param name="_cwQty">
    /// A catch weight quantity to be converted.
    /// </param>
    /// <param name="_unitId">
    /// A inventory unit to convert.
    /// </param>
    /// <param name="_cwUnitId">
    /// The catch weight unit to convert from; optional.
    /// </param>
    /// <returns>
    /// A converted quantity.
    /// </returns>
    public static InventQty inventQty(
        ItemId          _itemId,
        PdsCWInventQty  _cwQty,
        InventUnitId    _unitId = '',
        PdsCWUnitId     _cwUnitId = PdsCatchWeightItem::find(_itemId).PdsCWUnitId)
    {
        InventUnitId        baseInventUnit;
        EcoResProductRecId  productRecId;
        UnitOfMeasureRecId  toUnitRecId;
        UnitOfMeasureRecId  fromCWUnitRecId;
        UnitOfMeasureRecId  baseInventUnitRecId;

        InventQty           qty         = _cwQty;

        if (!PdsGlobal::pdsIsCWItem(_itemId))
        {
            return 0;
        }

        if (_unitId == _cwUnitId)
        {
            return qty;
        }

        baseInventUnit  = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;

        productRecId        = InventTable::itemProduct(_itemId);
        fromCWUnitRecId     = UnitOfMeasure::unitOfMeasureIdBySymbol(_cwUnitId);
        baseInventUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(baseInventUnit);

        //convert first to the base unit
        qty = PdsCatchWeight::convertCWQty(qty, productRecId, fromCWUnitRecId, baseInventUnitRecId);

        if (_unitId) // if a target unit is specified
        {
            toUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(_unitId);
            qty         = PdsCatchWeight::convertCWQty(qty, productRecId, baseInventUnitRecId, toUnitRecId);
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventQtyAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the inventory quantity that is making a particular pair of catch weight quantity and inventory quantity fall outside the minimum and maximum range.
    /// </summary>
    /// <param name="_itemId">
    ///     The ID of the item.
    /// </param>
    /// <param name="_inventQty">
    ///     The inventory quantity that may be outside the maximum and minimum range for specified catch weight quantity.
    /// </param>
    /// <param name="_cwQty">
    ///     The catch weight quantity.
    /// </param>
    /// <returns>
    ///     The inventory quantity that is making a particular pair of catch weight quantity and inventory quantity fall outside the minimum and maximum range.
    /// </returns>
    public static InventQty inventQtyAdjustment(ItemId _itemId, InventQty _inventQty, PdsCWInventQty _cwQty)
    {
        return PdsCatchWeight::adjustSplitInventQty(_itemId, _cwQty, _inventQty, 0, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransFullVisSerialReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether given transaction is reserved on a specific serial number
    ///     for a full visibility catch weight item.
    /// </summary>
    /// <param name="_inventTrans">
    ///     Transaction to check.
    /// </param>
    /// <returns>
    ///     true if transaction is reserved for a full visibility catch weight item; false otherwise.
    /// </returns>
    public static boolean isTransFullVisSerialReserved(InventTrans _inventTrans)
    {
        InventDim   inventDim = InventDim::find(_inventTrans.InventDimId);

        return _inventTrans.PdsCWQty            == -1
               && (_inventTrans.StatusIssue     == StatusIssue::ReservOrdered
                   || _inventTrans.StatusIssue  == StatusIssue::ReservPhysical)
               && inventDim.InventSerialId      != ''
               && PdsGlobal::pdsIsCWFullVisItem(_inventTrans.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the maximum catch weight quantity for an inventory quantity.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which to perform the calculation.
    /// </param>
    /// <param name="_qty">
    /// The inventory quantity for which to calculate the catch weight quantity.
    /// </param>
    /// <returns>
    /// The maximum catch weight quantity for the inventory quantity.
    /// </returns>
    public static PdsCWInventQty maxCWQty(
                                    ItemId _itemId,
                                    InventQty _qty)
    {
        PdsCatchWeightItem            cwItem;

        if (_qty == 0)
        {
            return 0;
        }

        cwItem = PdsCatchWeightItem::find(_itemId);
        if (!cwItem && !cwItem.PdsCWMin)
        {
            return 0;
        }

        return roundUp(_qty / cwItem.PdsCWMin, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the maximum inventory quantity for a catch weight quantity.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which to perform the calculation.
    /// </param>
    /// <param name="_cwQty">
    /// The catch weight quantity for which to calculate the inventory quantity.
    /// </param>
    /// <returns>
    /// The maximum inventory quantity for the catch weight quantity.
    /// </returns>
    public static InventQty maxInventQty(
        ItemId          _itemId,
        PdsCWInventQty  _cwQty)
    {
        InventQty           qty = 0;
        PdsCatchWeightItem  cwItem;

        cwItem = PdsCatchWeightItem::find(_itemId);
        if (cwItem)
        {
            qty = _cwQty * cwItem.PdsCWMax;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minCWQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the minimum catch weight quantity for an inventory quantity.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which to perform the calculation.
    /// </param>
    /// <param name="_qty">
    /// The inventory quantity for which to calculate the catch weight quantity.
    /// </param>
    /// <returns>
    /// The minimum catch weight quantity for the inventory quantity.
    /// </returns>
    public static PdsCWInventQty minCWQty(
                                    ItemId _itemId,
                                    InventQty _qty)
    {
        PdsCatchWeightItem            cwItem;

        if (_qty == 0)
        {
            return 0;
        }

        cwItem = PdsCatchWeightItem::find(_itemId);
        if (!cwItem && !cwItem.PdsCWMin)
        {
            return 0;
        }

        return roundUp(_qty / cwItem.PdsCWMax, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>minInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the minimum inventory quantity for a catch weight quantity.
    /// </summary>
    /// <param name="_itemId">
    /// The item for which to perform the calculation.
    /// </param>
    /// <param name="_cwQty">
    /// The catch weight quantity for which to calculate the inventory quantity.
    /// </param>
    /// <param name="_unitId">
    /// The unit of measure for the result; optional.
    /// </param>
    /// <returns>
    /// The minimum inventory quantity for the catch weight quantity.
    /// </returns>
    public static InventQty minInventQty(
        ItemId          _itemId,
        PdsCWInventQty  _cwQty,
        InventUnitId    _unitId = '')
    {
        InventUnitId                    baseInventUnit;
        EcoResProductRecId              productRecId;
        UnitOfMeasureRecId              toUnitRecId;
        UnitOfMeasureRecId              baseInventUnitRecId;
        UnitOfMeasureConverter_Product  unitConverter;

        InventQty                       qty = 0;
        PdsCatchWeightItem              cwItem = PdsCatchWeightItem::find(_itemId);

        if (!cwItem)
        {
            return qty;
        }
        if (_unitId == cwItem.PdsCWUnitId)
        {
            return _cwQty;
        }

        qty = _cwQty * cwItem.PdsCWMin;
        if (_unitId == '')
        {
            return qty;
        }

        baseInventUnit  = InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId;

        productRecId        = InventTable::itemProduct(_itemId);
        baseInventUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(baseInventUnit);

        toUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(_unitId);

        if (    (qty                    == 0)    // quantity is 0
            ||  (productRecId           == 0)    // product is not specified
            ||  (baseInventUnitRecId    == 0)    // from Unit is not specified
            ||  (toUnitRecId            == 0))   // to Unit is not specified
        {
            return qty;
        }

        unitConverter   = UnitOfMeasureConverter_Product::construct();

        unitConverter.parmProduct(productRecId);
        unitConverter.parmFromUnitOfMeasure(baseInventUnitRecId);
        unitConverter.parmToUnitOfMeasure(toUnitRecId);

        return unitConverter.convertValue(qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>minOverDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method calculates the max over delivery allowed for the specified item ID.
    /// </summary>
    /// <param name="_itemId">
    /// The item to use in calculation.
    /// </param>
    /// <returns>
    /// The max over delivery percentage allowed for the item.
    /// </returns>
    public static Percent minOverDelivery(ItemId _itemId)
    {
        PdsCWInventQty   maxQty,stdQty;
        Percent     ret = 0;

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            maxQty = PdsCatchWeightItem::find(_itemId).PdsCWMax;
            stdQty = PdsCatchWeight::inventQty(_itemId,1);
            ret = ((maxQty - stdQty)/stdQty) * 100;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>minUnderDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the minimum allowed under delivery for the specified item ID.
    /// </summary>
    /// <param name="_itemId">
    /// The item to use in calculation.
    /// </param>
    /// <returns>
    /// The minimum percentage of under delivery allowed.
    /// </returns>
    public static Percent minUnderDelivery(ItemId _itemId)
    {
        PdsCWInventQty   minQty,stdQty;
        Percent     ret = 0;

        if (PdsGlobal::pdsIsCWItem(_itemId))
        {
            minQty = PdsCatchWeightItem::find(_itemId).PdsCWMin;
            stdQty = PdsCatchWeight::inventQty(_itemId,1);
            ret = ((stdQty - minQty)/stdQty) * 100;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInventQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the inventory quantity falls with the acceptable range for the item's catch
    /// weight quantity.
    /// </summary>
    /// <param name="_itemId">
    /// The ID of the item used in validation.
    /// </param>
    /// <param name="_qty">
    /// The specified inventory quantity to validate.
    /// </param>
    /// <param name="_cwQty">
    /// The specified catch weight quantity used in validation.
    /// </param>
    /// <param name="_verbose">
    /// A Boolean value indicating whether to show the error message if the validation fails; optional.
    /// </param>
    /// <returns>
    /// true if the quantity falls in the acceptable range; otherwise, false.
    /// </returns>
    public static boolean validateInventQty(
        ItemId              _itemId,
        InventQty           _qty,
        PdsCWInventQty      _cwQty,
        boolean             _verbose = true)
    {
        return PdsCatchWeight::validateQty(
            _itemId,
            _qty,
            UnitOfMeasure::unitOfMeasureIdBySymbol(InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId),
            _cwQty,
            _verbose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNonCWItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the given control, bound to an <c>ItemId</c> field, contains an item ID of an item
    /// that is not catch weight enabled.
    /// </summary>
    /// <param name="_control">
    /// The control to validate.
    /// </param>
    /// <param name="_previousValue">
    /// The previous value of the control, that will be restored in case validation fails.
    /// </param>
    /// <returns>
    /// false if the control contains the ID of a catch weight enabled item; otherwise, true (even if the
    /// item does not exist).
    /// </returns>
    /// <remarks>
    /// If the control contains a catch weight enabled item, the field is restored to the previous value.
    /// </remarks>
    public static boolean validateNonCWItemId(
        FormStringControl _control,
        ItemId _previousValue = '')
    {
        ItemId  itemId;
        Common  buffer;
        boolean valid = true;

        itemId = _control.valueStr();

        if (itemId && InventTable::exist(itemId) && PdsGlobal::pdsIsCWItem(itemId))
        {
            valid = false;

            buffer = _control.dataSourceObject().cursor();
            buffer.(_control.dataField()) = _previousValue;
            _control.text(_previousValue);

            setPrefix(strFmt("@SYS71901", itemId));
            checkFailed(strFmt("@PRO1994", itemId));
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the quantity in specified unit falls with the acceptable range for the item's
    /// catch weight quantity.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_qty">
    /// The specified quantity.
    /// </param>
    /// <param name="_unitOfMeasureRecId">
    /// A unit of measure ID.
    /// </param>
    /// <param name="_cwQty">
    /// A quantity in catch weight unit.
    /// </param>
    /// <param name="_verbose">
    /// A Boolean value indicating whether to show the error message if the validation fails; optional.
    /// </param>
    /// <returns>
    /// true if quantity falls in the acceptable range or the item is not a catch-weight item; otherwise,
    /// false.
    /// </returns>
    public static boolean validateQty(
        ItemId              _itemId,
        Qty                 _qty,
        UnitOfMeasureRecId  _unitOfMeasureRecId,
        PdsCWInventQty      _cwQty,
        boolean             _verbose = true)
    {
        UnitOfMeasureConverter  converterToInventUnit;
        UnitOfMeasureConverter  converterFromInventUnit;
        UnitOfMeasureRecId      inventUnitOfMeasureRecId;
        EcoResProductRecId      productRecId;
        InventQty               inventQty;
        PdsCatchWeightItem      catchWeightItem = PdsCatchWeightItem::find(_itemId);
        boolean                 ret = true;

        if (    catchWeightItem
            &&  !((_cwQty == 0) && (_qty == 0)))
        {
            inventUnitOfMeasureRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(
                InventTableModule::find(_itemId, ModuleInventPurchSales::Invent).UnitId);

            productRecId = InventTable::itemProduct(_itemId);

            converterToInventUnit = UnitOfMeasureConverter::newFromConversionParameters(
                _unitOfMeasureRecId,
                inventUnitOfMeasureRecId,
                NoYes::Yes,
                productRecId,
                NoYes::Yes);

            converterFromInventUnit = UnitOfMeasureConverter::newFromConversionParameters(
                inventUnitOfMeasureRecId,
                _unitOfMeasureRecId,
                NoYes::Yes,
                productRecId,
                NoYes::Yes);

            inventQty = converterToInventUnit.convertValue(_qty);

            if (sign(inventQty) != sign(_cwQty))
            {
                if (_verbose)
                {
                    checkFailed(strFmt("@PDS86", _itemId));
                }
                ret = false;
            }

            // by the check above, both CW and Inventory are not zero
            if (_cwQty == 0)
            {
                // CW Quantity cannot be zero when inventory quantity is different than zero.
                if (_verbose)
                {
                    checkFailed("@PDS2046");
                }
                ret = false;
            }
            else if (inventQty == 0)
            {
                // Quantity cannot be zero when Catch-Weight quantity is different than zero.
                if (_verbose)
                {
                    checkFailed("@PDS2047");
                }
                ret = false;
            }

            if (    ret
                && (abs(_cwQty * catchWeightItem.PdsCWMax) < abs(inventQty)
                ||  abs(_cwQty * catchWeightItem.PdsCWMin) > abs(inventQty)))
            {
                if (_verbose)
                {
                    checkFailed(strFmt("@SCM:PdsCatchWeightShowInventQtyErrorMessage", real2double(abs(inventQty)).toString()));

                    checkFailed(strFmt("@PDS85",
                        converterFromInventUnit.convertValue(abs(_cwQty * catchWeightItem.PdsCWMin)),
                        converterFromInventUnit.convertValue(abs(_cwQty * catchWeightItem.PdsCWMax)),
                        _itemId));
                }
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>