<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchJournalSelect_Invoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class PurchJournalSelect_Invoice extends SalesPurchJournalSelect
{
    #isoCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected void buildQuery()
    {
        QueryBuildDataSource qbds;
        //<GEERU>
        QueryBuildDataSource qbdsTrans;
        container vendPackingSlipExcludeRecId;
        //</GEERU>

        switch (this.parmBasedOnDocument())
        {
            case DocumentStatus::PackingSlip :

                qbds = this.journalHeader_ds().query().dataSourceTable(tablenum(VendPackingSlipJour));

                if (qbds)
                {
                    //<GEERU>
                    if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
                    {
                        vendPackingSlipExcludeRecId = this.getExcluded_RU();
                        if (conLen(vendPackingSlipExcludeRecId))
                        {
                            findOrCreateRange_W(qbds, fieldnum(VendPackingSlipJour,RecID)).value(queryNotValueCon_W(vendPackingSlipExcludeRecId));
                        }

                        if (conLen(vendPSTransExcludeRecId))
                        {
                            qbdsTrans = this.journalLines_ds().query().dataSourceTable(tablenum(VendPackingSlipTrans));
                            findOrCreateRange_W(qbdsTrans, fieldnum(VendPackingSlipTrans,RecId)).value(queryNotValueCon_W(vendPSTransExcludeRecId));
                        }
                    }
                    //</GEERU>
                    this.buildRangesSelectedOrders(qbds);
                    qbds = qbds.addDataSource(tablenum(VendPackingSlipTrans));
                    qbds.relations(true);
                    qbds.joinMode(JoinMode::ExistsJoin);
                    qbds.addRange(fieldnum(VendPackingSlipTrans,FullyMatched)).value(queryValue(NoYes::No));
                }

                qbds = this.qbdsAll();
                if (qbds)
                {
                    qbds = qbds.addDataSource(tablenum(VendPackingSlipTrans));
                    qbds.relations(true);
                    qbds.joinMode(JoinMode::ExistsJoin);
                    qbds.addRange(fieldnum(VendPackingSlipTrans,FullyMatched)).value(queryValue(NoYes::No));
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRangesSelectedOrders</Name>
				<Source><![CDATA[
    protected void buildRangesSelectedOrders(QueryBuildDataSource _qbds)
    {
        boolean rangeAdded;
        QueryBuildRange range;
        #define.NoOrders('----');

        while select tmpFrmVirtual
            where tmpFrmVirtual.NoYes == NoYes::Yes
        {
            range = _qbds.addRange(fieldnum(VendPackingSlipJour, PurchId));
            range.value(queryValue(tmpFrmVirtual.Id));
            range.status(RangeStatus::Hidden);
            rangeAdded = true;
        }

        if (!rangeAdded)
        {
            range = _qbds.addRange(fieldnum(VendPackingSlipJour, PurchId));
            range.value(queryValue(#NoOrders));
            range.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeOK</Name>
				<Source><![CDATA[
    public void closeOK()
    {
        super();

        if (SalesPurchJournalSelect::checkCaller(formRun, formStr(VendEditInvoice)))
        {
            formRun.args().caller().chooseTable();
            formRun.args().caller().updateFormCacheVendInvoiceInfoTable();
            formRun.args().caller().checkForPrepaymentApplicationFlag();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataSourceNameAll</Name>
				<Source><![CDATA[
    protected str dataSourceNameAll()
    {
        return 'VendPackingSlipJourAll';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcluded_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills container with recID of product receipts that should not be included in query.
    /// </summary>
    /// <returns>
    /// A container with RecIds corresponding to excluded vendPackingSlipJour records.
    /// </returns>
    protected container getExcluded_RU()
    {
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        VendPackingSlipTrans vendPackingSlipTrans;
        VendPackingSlipJour vendPackingSlipJour;

        container vendPackingSlipExcludeRecId;

        while select RecId from vendInvoiceInfoSubLine
            where vendInvoiceInfoSubLine.ParmId == parmId
            join VendPackingSlipJour, inventTransId from vendPackingSlipTrans
                where vendInvoiceInfoSubLine.JournalRefTableId == vendPackingSlipTrans.TableId
                   && vendInvoiceInfoSubLine.JournalRefRecId == vendPackingSlipTrans.RecId
                   && vendPackingSlipTrans.FullyMatched == NoYes::No
            join vendPackingSlipJour
                group by vendPackingSlipJour.RecId
                    where vendPackingSlipJour.RecId == vendPackingSlipTrans.VendPackingSlipJour
        {
            select tmpFrmVirtual
            where tmpFrmVirtual.TableNum == vendPackingSlipJour.TableId &&
                  tmpFrmVirtual.RecordNo == vendPackingSlipJour.RecId &&
                  tmpFrmVirtual.NoYes == NoYes::Yes;

            if (!tmpFrmVirtual)
            {
                vendPackingSlipExcludeRecId += vendPackingSlipJour.RecId;
            }
        }
        return vendPackingSlipExcludeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        PurchFormLetter purchFormletter = formLetter as PurchFormLetter;

        // synchronize the parmTable in the formletter contract
        purchFormletter.currentPurchParmTable();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIncluded</Name>
				<Source><![CDATA[
    protected void initIncluded()
    {
        VendInvoiceInfoSubLine vendInvoiceInfoSubLine;
        VendPackingSlipTrans vendPackingSlipTrans;
        VendPackingSlipJour vendPackingSlipJour;

        //<GEERU>
        VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::find(parmId, tradeLineRefId);
        //</GEERU>

        while select RecId from vendInvoiceInfoSubLine
            where vendInvoiceInfoSubLine.ParmId == parmId
            join VendPackingSlipJour
                //<GEERU>
                , inventTransId, RecId
                //</GEERU>
                from vendPackingSlipTrans
                where vendInvoiceInfoSubLine.JournalRefTableId == vendPackingSlipTrans.TableId
                   && vendInvoiceInfoSubLine.JournalRefRecId == vendPackingSlipTrans.RecId
                   && vendPackingSlipTrans.FullyMatched == NoYes::No
                join vendPackingSlipJour
                    where vendPackingSlipJour.RecId == vendPackingSlipTrans.VendPackingSlipJour
        {
            //<GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                if (this.isPostingProfileAndKindActivityMatch_RU(vendPackingSlipJour, vendPackingSlipTrans, vendInvoiceInfoTable))
                {
                    this.included(true, vendPackingSlipJour, NoYes::Yes);
                }
                else
                {
                    vendPSTransExcludeRecId += vendPackingSlipTrans.RecId;
                }
            }
            else
            {
            //</GEERU>
                this.included(true, vendPackingSlipJour, NoYes::Yes);
            //<GEERU>
            }
            //</GEERU>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPostingProfileAndKindActivityMatch_RU</Name>
				<Source><![CDATA[
    private boolean isPostingProfileAndKindActivityMatch_RU(VendPackingSlipJour _vendPackingSlipJour,
                                                            VendPackingSlipTrans _vendPackingSlipTrans,
                                                            VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        PurchLine purchLine;
        PurchTable purchTable;
        PurchLine_W purchLine_W;

        select firstonly PostingProfile_RU from purchLine_W
            join RecId from purchLine
                where purchLine.RecId == purchLine_W.PurchLine
                    && purchLine.InventTransId == _vendPackingSlipTrans.InventTransId
                    && purchLine.PurchId == _vendPackingSlipJour.PurchId
            join PostingProfile from purchTable
                where purchTable.PurchId == purchLine.PurchId;

        if (((purchLine_W.PostingProfile_RU && purchLine_W.PostingProfile_RU == postingProfile)
             ||
             (!purchLine_W.PostingProfile_RU && purchTable.PostingProfile == postingProfile))
            && (_vendInvoiceInfoTable.vendDocumentTableMap::parmInventProfileType_RU(_vendPackingSlipJour.InventProfileType_RU)))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLines_ds</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the data source used by the bottom grid on the corresponding form.
    /// </summary>
    /// <returns>
    ///    The data source that corresponds to the matching packing slips grid.
    /// </returns>
    protected FormDataSource journalLines_ds()
    {
        Object callerFormRun = formRun;
        FormDataSource callerFormDS = callerFormRun.journalLines_ds();

        return callerFormDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        orderSet = new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchJournalSelect_Invoice construct()
    {
        return new PurchJournalSelect_Invoice();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>