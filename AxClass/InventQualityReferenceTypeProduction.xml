<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityReferenceTypeProduction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventQualityReferenceTypeProduction</c> class typifies a production reference document.
/// </summary>
[InventQualityReferenceTableName(tableStr(ProdTable))]
[InventNonConformanceTypeFactoryAttribute(InventNonConformanceType::Production)]
[InventTransTypeFactoryAttribute(InventTransType::Production)]
[InventTestReferenceTypeFactoryAttribute(InventTestReferenceType::Production)]
class InventQualityReferenceTypeProduction extends InventQualityReferenceType
{
    ProdTable prodTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromInventNonConformanceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on the <c>InventNonConformanceTable</c> buffer.
    /// </summary>
    /// <param name="_inventNonConformanceTable">
    ///    An <c>InventNonConformanceTable</c> buffer.
    /// </param>
    protected void initFromInventNonConformanceTable(InventNonConformanceTable _inventNonConformanceTable)
    {
        this.parmBuffer(ProdTable::find(_inventNonConformanceTable.InventRefId));
        super(_inventNonConformanceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on the <c>InventTransOrigin</c> table record.
    /// </summary>
    /// <param name="_inventTransOrigin">
    ///    An <c>InventTransOrigin</c> table buffer.
    /// </param>
    protected void initFromInventTransOrigin(InventTransOrigin _inventTransOrigin)
    {
        this.parmBuffer(InventTransOriginProdTable::prodTable(_inventTransOrigin.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on an <c>InventQualityOrderTable</c> buffer.
    /// </summary>
    /// <param name="_orderTable">
    ///    An <c>InventQualityOrderTable</c> buffer.
    /// </param>
    protected void initFromQualityOrder(InventQualityOrderTable _orderTable)
    {
        this.parmBuffer(ProdTable::find(_orderTable.InventRefId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDirection</Name>
				<Source><![CDATA[
    public InventDirection inventDirection()
    {
        return InventDirection::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventRefId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventRefId</c> value.
    /// </returns>
    public InventRefId inventRefId()
    {
        return prodTable.ProdId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventSiteId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventSiteId</c> value.
    /// </returns>
    public InventSiteId inventSiteId()
    {
        return prodTable.inventDim().InventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTransId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTransId</c> value.
    /// </returns>
    public InventTransId inventTransId()
    {
        return prodTable.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = prodTable)
    {
        prodTable        = _buffer;

        defaultDimension  = prodTable.DefaultDimension ? prodTable.DefaultDimension : defaultDimension;
        inventDimId       = prodTable.InventDimId      ? prodTable.InventDimId      : inventDimId;
        itemId            = prodTable.ItemId           ? prodTable.ItemId           : itemId;

        return prodTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsBatchAttribCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the quality order selected can be updated with the production inventory batch
    /// attributes.
    /// </summary>
    /// <param name="_orderTable">
    /// The inventory quality order selected.
    /// </param>
    /// <returns>
    /// true if the validation passed; otherwise, false.
    /// </returns>
    protected boolean pdsBatchAttribCheck(InventQualityOrderTable _orderTable)
    {
        boolean ret = super(_orderTable);

        if (ret && _orderTable.inventBatchId())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTestReferenceType</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTestReferenceType</c> value.
    /// </returns>
    public InventTestReferenceType referenceType()
    {
        return InventTestReferenceType::Production;
    }

]]></Source>
			</Method>
			<Method>
				<Name>routeId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>RouteId</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>RouteId</c> value.
    /// </returns>
    public RouteId routeId()
    {
        return prodTable.RouteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQueryInventTransOrdering</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ordering of transactions for the <c>InventTrans</c> table data source, depending on the
    /// document status and test execution values.
    /// </summary>
    /// <param name="_qbdsInventTrans">
    /// A query build data source object that is related to the <c>InventTrans</c> table.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    /// A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    /// A test execution value.
    /// </param>
    protected void setQueryInventTransOrdering(
        QueryBuildDataSource        _qbdsInventTrans,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        if (    _inventTestDocumentStatus   == InventTestDocumentStatus::ReportFinished
            &&  _inventTestExecution        == InventTestExecution::After)
        {
            // first take those most recently reported as finished
            this.setQueryInventTransOrderingPhysicalVouch(_qbdsInventTrans);
        }

        InventQualityOrderPhysicalVoucherContext context = InventQualityOrderPhysicalVoucherContext::current();
        if(context && context.parmPhysicalVoucherForBlocking())
        {
            _qbdsInventTrans.addRange(fieldnum(InventTrans, VoucherPhysical)).value(queryValue(context.parmPhysicalVoucherForBlocking()));
        }
        super(_qbdsInventTrans, _inventTestDocumentStatus, _inventTestExecution);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusReceiptRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a range value for the <c>StatusReceipt</c> field on the data source of the <c>InventTrans</c>
    ///    table that is based on the document status and test execution values.
    /// </summary>
    /// <param name="_qbrStatusReceipt">
    ///    A query build range object.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    ///    A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    ///    A test execution value.
    /// </param>
    protected void setStatusReceiptRangeValue(
        QueryBuildRange             _qbrStatusReceipt,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        if (    _inventTestDocumentStatus   == InventTestDocumentStatus::ReportFinished
            &&  _inventTestExecution        == InventTestExecution::After)
        {
            _qbrStatusReceipt.value(SysQuery::range(StatusReceipt::Received, StatusReceipt::Ordered));
        }
        else
        {
            _qbrStatusReceipt.value(SysQuery::range(StatusReceipt::Registered, StatusReceipt::Ordered));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryInventTrans</Name>
				<Source><![CDATA[
    public Query queryInventTrans(InventTestDocumentStatus _inventTestDocumentStatus, InventTestExecution _inventTestExecution, InventTestDiscriminatingInventDims _discriminatingInventoryDimensions)
    {
        Query query = super(_inventTestDocumentStatus, _inventTestExecution, _discriminatingInventoryDimensions);
    
        if (_inventTestDocumentStatus == InventTestDocumentStatus::ReportFinished)
        {
            QueryBuildDataSource qbdsInventTrans = query.dataSourceTable(tableNum(InventTrans));
            qbdsInventTrans.addRange(fieldnum(InventTrans, TransChildType)).value(queryValue(InventTransChildType::ProdJournalProd));
        }
    
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQualityReferenceTypeProduction construct()
    {
        return new InventQualityReferenceTypeProduction();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>