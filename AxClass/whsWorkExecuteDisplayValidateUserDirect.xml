<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayValidateUserDirect</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to validate user directed work.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::ValidatedUserDirected)]
class whsWorkExecuteDisplayValidateUserDirect extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildGetFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds controls to form state for scanning field value.
    /// </summary>
    /// <param name="_con">
    /// Container containing the form state before the controls are added.
    /// </param>
    /// <param name="_extraText">
    /// Label text.
    /// </param>
    /// <returns>
    /// Container containing the form state after the controls are added.
    /// </returns>
    container buildGetFieldName(container _con, str _extraText = '')
    {
        container ret = this.buildGetFieldNameScanFieldOK(_con, _extraText);

        ret += [this.buildControl(#RFButton, #RFCancel, "@SYS50163", 1, '', #WHSRFUndefinedDataType, '', 0)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkTableByEnteredId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the work table by the entered ID.
    /// </summary>
    /// <param name = "_id">The entered ID.</param>
    /// <returns>The work table if found; otherwise, null.</returns>
    protected WHSWorkTable findWorkTableByEnteredId(str _id)
    {
        WHSWorkTable whsWorkTable = WHSWorkTable::find(_id);

        if (!whsWorkTable)
        {
            whsWorkTable = WHSWorkTable::findByLicensePlate(_id);
        }

        return whsWorkTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
	container displayForm(container _con, str _buttonClicked = '')
    {
        Set                                 excludeLocationId = new Set(Types::String);
        WHSWorkExecuteDisplay               workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        WhsWorkExecute                      workExecute = WhsWorkExecute::construct();
        WHSWorkExecuteMode                  workExecuteMode;
        WMSLocationId                       newLocationId;
        boolean                             hasError;
        boolean                             recall;
        container                           tmpCon;
        container                           tmpPass;
        container                           ret;
        container                           con = _con;
        boolean                             addButtons = true;
        WHSRFPassthrough                    globalPass;
        str                                 validateUserDirectField;

        globalPass = pass;

        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        pass = this.combineMaps(globalPass, pass);

        hasError = this.hasError(con);

        pass.remove(#AddButtons);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        if (_buttonClicked == #RFOverride)       // Override
        {
            step = #OverrideStep1;
        }
        else if (_buttonClicked == #RFFull && step != 0)  // Full (Split)
        {
            step = #SplitWork;
        }
        else if (_buttonClicked == #RFNoLocation)  // Suggest Location (NoLocation)
        {
            workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
            if (pass.exists(#ExcludedLocations))
            {
                excludeLocationId = this.buildLocationListFromStr(pass.lookup(#ExcludedLocations));
            }
            else
            {
                excludeLocationId = this.buildLocationListFromStr(workLine.wmsLocationId);
            }
            [newLocationId, tmpCon] = workExecute.findNewLocation(workLine, excludeLocationId);
            excludeLocationId = Set::create(tmpCon);
            pass.insert(#SuggestLocation, 1);
            pass.insert(#ExcludedLocations, this.buildLocationListFromSet(excludeLocationId));
            if (pass.exists(#PrevStep))
            {
                step = pass.lookup(#PrevStep);
            }
            else
            {
                pass.insert(#NoValidation, '1');
            }
        }
        else if (_buttonClicked == #RFShortPick)  // Short Pick
        {
            pass.insert(#Initiation, 1);
            step = #ShortPick;
        }
        else if (_buttonClicked == #RFSkip)  // Skip
        {
            if (pass.isGroupPick())
            {
                pass.skipGroupedWorkLines();
            }
            else
            {
                WHSWorkLine::skipWorkLine(pass.lookup(#WorkId), pass.parmLineNum());               
                pass.clearGroupPickFail();               
            }

            workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);
            pass.parmLineNum(workLine.LineNum);
            pass.insert(#DetermineStep, 1);
        }
        else if (_buttonClicked == #RFOverpick)
        {
            pass.insert(#PrevStep, step);
            step = #OverpickStep;
        }
        else if (_buttonClicked == #RFSplitPut)
        {
            this.validateSplitPutAllowed();
            step = #SplitPutWork;
        }

        switch (step)
        {
            case 0:
                if (pass.exists(#WorkComplete))
                {
                    ret = this.addErrorLabel(ret, strFmt("@WAX2332",
                                                         WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfSysGroupLabel,
                                                         pass.lookup(#ValidateUserDirectField)), WHSRFColorText::Success);

                    pass.remove(#ValidateUserDirectField);
                    pass.remove(#Recall);
                    pass.remove(#WorkComplete);
                }
                ret = this.buildGetFieldName(ret);
                addButtons = false;
                step = 1;
                break;

            case 1:
                hasError = this.hasError(con);

                if (hasError)
                {
                    con = conDel(con, 3, 1);
                }

                if (!pass.exists(#ValidateUserDirectField))
                {
                    pass.insert(#ValidateUserDirectField, conPeek(conPeek(con, 4), #data));
                }

                if (pass.lookup(#ValidateUserDirectField) == '')
                {
                    pass.remove(#ValidateUserDirectField);

                    ret = this.addErrorLabel(ret, "@WAX1080", WHSRFColorText::Error);
                    ret = this.buildGetFieldName(ret);
                    addButtons = false;
                    break;
                }

                if (!this.validateUserDirectWorkExist())
                {
                    validateUserDirectField = pass.lookup(#ValidateUserDirectField);

                    pass.remove(#ValidateUserDirectField);

                    throw error(strFmt("@WAX2291",
                                        WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfSysGroupLabel,
                                        validateUserDirectField));
                }

                if (pass.exists(#WorkComplete))
                {
                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);

                    if (pass.exists(#Recall))
                    {
                        pass.remove(#Recall);
                    }

                    pass.remove(#WorkComplete);
                }

                ret = this.buildGetWorkIdLicensePlateId(ret);
                addButtons = false;
                step = 2;
                break;

            case 2:
                if (!pass.exists(#Recall))
                {
                    pass.insert(#Id, conPeek(conPeek(con, 4 + hasError), #data));
                }

                if (pass.exists(#WorkId))
                {
                    workTable = WHSWorkTable::find(pass.lookup(#WorkId));
                }
                else
                {
                    if (!pass.exists(#Id) || pass.lookup(#Id) == '')
                    {
                        ret = this.addErrorLabel(ret, "@WAX1080", WHSRFColorText::Error);
                        ret = this.buildGetWorkIdLicensePlateId(ret);
                        addButtons = false;
                        break;
                    }
                }

                if (!workTable)
                {
                    if (WHSBarcodeDataParserFactory::isBarcodeDataParsingEnabled())
                    {
                        WHSGS1BarcodeEAN128UserDirected barcodeEAN128 = WHSGS1BarcodeEAN128UserDirected::construct(pass);
                        barcodeEAN128.decode();
                    }

                    workTable = this.findWorkTableByEnteredId(pass.lookup(#Id));
                    if (!workTable)
                    {
                        throw error("@WAX1081");
                    }
                }
                pass.insert(#WorkId, workTable.WorkId);

                if (!this.validateUserDirectWork(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfSysGroupFieldNum, pass.lookup(#ValidateUserDirectField)))
                {
                    if (pass.exists(#WorkId))
                    {
                        pass.remove(#WorkId);
                    }
                    throw error(strFmt("@WAX2294",
                                        WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfSysGroupLabel,
                                        pass.lookup(#ValidateUserDirectField)));
                }
                if (workTable.InventLocationId != pass.lookup(#InventLocationId))
                {
                    if (pass.exists(#WorkId))
                    {
                        pass.remove(#WorkId);
                    }
                    throw error("@WAX1239");
                }
                if (!WHSWorkTable::validateWorkInCluster(workTable.WorkId))
                {
                    if (pass.exists(#WorkId))
                    {
                        pass.remove(#WorkId);
                    }
                    throw error("@WAX3828");
                }
                workLine = workExecute.getFirstOpenLine(workTable.WorkId, userId);
                if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                {
                    if (pass.exists(#WorkId))
                    {
                        pass.remove(#WorkId);
                    }
                    throw error("@WAX1459");
                }
                if (!workLine)
                {
                    if (pass.exists(#WorkId))
                    {
                        pass.remove(#WorkId);
                    }
                    throw error("@WAX1323");
                }
                if (pass.lookup(#InventLocationId) != workLine.whsWorkTable().InventLocationId)
                {
                    if (pass.exists(#WorkId))
                    {
                        pass.remove(#WorkId);
                    }
                    throw error("@WAX1207");
                }

                pass.parmLineNum(workLine.LineNum);
                pass.insert(#DetermineStep, 1);
                con = conPoke(con, 2, pass.pack());
                workExecuteMode = this.getWorkExecuteModeFromWorkTransType(workTable.WorkTransType, workTable.TargetLicensePlateId);
                [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, workExecuteMode, step, userId, newLocationId, _buttonClicked, false);
                pass = new WHSRFPassthrough(Types::String, Types::String);
                pass = WHSRFPassthrough::create(tmpPass);

                if (step == #Restart)
                {
                    if (!this.validateUserDirectWorkExist())
                    {
                        step = 0;
                    }
                    else
                    {
                        step = 1;
                    }
                }
                else if (step == #StepOne)
                {
                    step = 2;
                    pass.insert(#DetermineStep, 1);
                }

                if (recall)
                {
                    pass.insert(#Recall, 1);
                    con = this.updateModeStepPass(con, mode, step, pass);
                    con = conPoke(con, 1, [mode, step]);
                    workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                    ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                    pass = new WHSRFPassthrough(Types::String, Types::String);
                    pass = WHSRFPassthrough::create(conPeek(ret, 2));
                    if (pass.exists(#WorkId) && pass.exists(#LineNum))
                    {
                        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                    }
                }
                break;

            default:
                if (pass.exists(#WorkId) || step == #WorkAuditTemplate)
                {
                    if (pass.exists(#LineNum))
                    {
                        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                    }
                    else if (pass.exists(#AuditWorkId))
                    {
                        workLine = WHSWorkTable::getLastWorkLine(pass.lookup(#AuditWorkId));
                        pass.insert(#InventLocationId, workLine.whsWorkTable().InventLocationId);
                    }
                    else
                    {
                        workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);
                    }

                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }

                    if (workLine)
                    {
                        if (pass.lookup(#InventLocationId) != workLine.whsWorkTable().InventLocationId)
                        {
                            throw(error("@WAX1207"));
                        }
                        con = conPoke(con, 2, pass.pack());
                        workTable = workLine.whsWorkTable();
                        workExecuteMode = this.getWorkExecuteModeFromWorkTransType(workTable.WorkTransType, workTable.TargetLicensePlateId);
                        validateUserDirectField = pass.lookupStr(#ValidateUserDirectField);
                        [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, workExecuteMode, step, userId, newLocationId, _buttonClicked, false);
                        pass = new WHSRFPassthrough(Types::String, Types::String);
                        pass = WHSRFPassthrough::create(tmpPass);
                        pass.insert(#ValidateUserDirectField, validateUserDirectField);

                        if (step == #Restart)
                        {
                            if (this.validateUserDirectWorkExist())
                            {
                                step = 1;
                                addButtons = false;
                            }
                            else
                            {
                                step = 0;
                                addButtons = false;
                            }
                        }
                        else if (step == #StepOne)
                        {
                            step = 2;
                            pass.insert(#DetermineStep, 1);
                        }

                        if (recall)
                        {
                            pass.insert(#Recall, 1);
                            con = this.updateModeStepPass(con, mode, step, pass);
                            con = conPoke(con, 1, [mode, step]);
                            workExecuteDisplay.setGlobals(mode, step, userId, pass, null);
                            ret = workExecuteDisplay.displayForm(con, _buttonClicked);
                            pass = new WHSRFPassthrough(Types::String, Types::String);
                            pass = WHSRFPassthrough::create(conPeek(ret, 2));
                            if (pass.exists(#WorkId) && pass.exists(#LineNum))
                            {
                                workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                            }
                        }
                    }
                    else
                    {
                        throw error("@WAX859");
                    }
                }
                else
                {
                    throw error("@WAX859");
                }
                break;
        }

        if (addButtons && !pass.exists(#AddButtons))
        {
            ret = this.addButtons(ret);
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUserDirectWork</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks if the entered field value is valid.
	/// </summary>
	/// <param name="_fieldNum">
	/// The field number.
	/// </param>
	/// <param name="_validateFieldValue">
	/// The field value.
	/// </param>
	/// <returns>
	/// true if the field value is valid; otherwise, false.
	/// </returns>
    boolean validateUserDirectWork(int  _fieldNum,
                                   str  _validateFieldValue)
    {
        boolean ret;

        if (workTable.(_fieldNum) == _validateFieldValue)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFindUserDirectWorkQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for finding user directed work.
    /// </summary>
    /// <returns>The query.</returns>
    protected Query buildFindUserDirectWorkQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(WHSWorkTable));

        qbds.addRange(WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).rfSysGroupFieldNum).value(pass.lookup(#ValidateUserDirectField));
        qbds.addRange(fieldNum(WHSWorkTable, WorkStatus)).value(SysQuery::range(enum2str(WHSWorkStatus::Open), enum2str(WHSWorkStatus::InProcess)));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findUserDirectWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds user directed work.
    /// </summary>
    /// <returns>The user directed work.</returns>
    protected WHSWorkTable findUserDirectWork()
    {
        QueryRun queryRun = new QueryRun(this.buildFindUserDirectWorkQuery());

        if (queryRun.next())
        {
            return queryRun.get(tableNum(WHSWorkTable));
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUserDirectWorkExist</Name>
				<Source><![CDATA[
	/// <summary>
	/// Checks that the user directed work exists in database.
	/// </summary>
	/// <returns>
	/// true if the user directed work exists; otherwise, false.
	/// </returns>
    boolean validateUserDirectWorkExist()
    {
        if (this.findUserDirectWork())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>