<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ActivityResourceFacade</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Holds convenience methods for working with activity resources.
/// </summary>
class ActivityResourceFacade
{
    #TimeConstants

    private static str cacheScope_getAssignedCapacity = "getAssignedCapacity";
    private static str key_HierarchyId = "HierarchyId";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findByProjResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds activity resource associated with the specified resource working on the project.
    /// </summary>
    /// <param name = "_projId">Project that resource is working on.</param>
    /// <param name = "_resource">Resource to find activity resource for.</param>
    /// <returns>Activity resource associated with the specified resource.</returns>
    public static ActivityResourceRecId findByProjResource(ProjId _projId,
                                            ResourceRecId _resource)
    {
        PSAProjSchedRole psaProjSchedRole;

        if (_resource == 0)
        {
            return 0;
        }

        select firstOnly RecId from psaProjSchedRole
            where psaProjSchedRole.ProjId == _projId
                && psaProjSchedRole.Resource == _resource;

        return psaProjSchedRole.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the activity resource record using activity record ID and name.
    /// </summary>
    /// <param name = "_activity">Record id of the activity.</param>
    /// <param name = "_activityType">Type of activity (project/quotation).</param>
    /// <param name = "_name">Name of the activity resource.</param>
    /// <returns>Activity resource record.</returns>
    public static PSAProjSchedRole findByName(ActivityRecId _activity, PSARSEntityType _activityType, Name _name)
    {
        PSAProjSchedRole activityResource;

        switch (_activityType)
        {
            case PSARSEntityType::Project:
                ProjId projectId = ProjTable::findByActivityRecId(_activity).ProjId;

                select firstonly activityResource
                    where activityResource.ProjId == projectId
                    && activityResource.Name == _name;

                break;

            case PSARSEntityType::Quotation:
                QuotationId quoteId = SalesQuotationTable::findByActivityRecId(_activity).QuotationId;

                select firstonly activityResource
                    where activityResource.QuotationId == quoteId
                    && activityResource.Name == _name;

                break;
        }

        return activityResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByActivityAndResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the activity resource record using activity record ID and resource.
    /// </summary>
    /// <param name = "_activity">Record id of the activity.</param>
    /// <param name = "_resource">Record id of the resource that activity resource is based of.</param>
    /// <returns>Activity resource record Id.</returns>
    public static ActivityResourceRecId findByActivityAndResource(ActivityRecId _activity, ResourceRecId _resource)
    {
        ActivityResourceRecId activityResource;
        ActivityRecId rootActivity = ActivityResourceFacade::getWbsRootActivity(_activity);

        if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
        {
            PSAProjSchedRole teamTable;

            select firstonly RecId from teamTable
                where teamTable.RootActivity == rootActivity
                    && teamTable.Resource == _resource;

            activityResource = teamTable.RecId;
        }
        else
        {
            ResActivityResourceEngagementView resActivityResourceView;

            select firstonly ActivityResource from resActivityResourceView
                where resActivityResourceView.Activity == rootActivity
                    && resActivityResourceView.Resource == _resource;

            activityResource = resActivityResourceView.ActivityResource;
        }

        return activityResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWbsRootActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves WBS root activity record id.
    /// </summary>
    /// <param name = "_taskActivity">The WBS task activity record ID.</param>
    /// <returns>Record Id of the activity associated with WBS root.</returns>
    public static ActivityRecId getWbsRootActivity(ActivityRecId _taskActivity)
    {
        ResActivityTaskView activityTaskView;

        select firstonly activityTaskView
            where activityTaskView.TaskActivity == _taskActivity;

        return activityTaskView.Activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives calendar that activity resource is using.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get calendar for.</param>
    /// <returns>Record ID of the calendar that activity resource is using.</returns>
    public static CalendarRecId getCalendar(ActivityResourceRecId _activityResource)
    {
        return ActivityResourceFacade::getCalendarByDateTime(_activityResource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarByDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives calendar that activity resource is using by specific date time.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get calendar for.</param>
    /// <param name = "_useTargetDateTime">Whether to lookup by the specified target date or using the <c>PSAProjSchedRole</c> start date.</param>
    /// <param name = "_targetDateTime">Date time to lookup.</param>
    /// <returns>Record ID of the calendar that activity resource is using.</returns>
    internal static CalendarRecId getCalendarByDateTime(ActivityResourceRecId _activityResource, boolean _useTargetDateTime = false, utcdatetime _targetDateTime = DateTimeUtil::minValue())
    {
        CalendarRecId calendarRecId;

        PSAProjSchedRole teamTable;
        select firstonly Resource, PSARoleStartDate, ProjId from teamTable
            where teamTable.RecId == _activityResource;

        if (teamTable)
        {
            // All project planned resources should use project calendar.
            boolean useProjectCalendar = teamTable.Resource == 0 && teamTable.ProjId != '' ? true : false;

            calendarRecId = ActivityResourceFacade::getProjectCalendar(teamTable.ProjId, useProjectCalendar);

            if (!calendarRecId)
            {
                ResourceRecId resource = teamTable.Resource;
                utcdatetime targetDateTime;
                if (_useTargetDateTime)
                {
                    targetDateTime = _targetDateTime;
                }
                else
                {
                    targetDateTime = DateTimeUtil::newDateTime(teamTable.PSARoleStartDate, 0);
                }

                calendarRecId = ActivityResourceFacade::getNamedResourceCalendarFromTeamRecord(resource, targetDateTime);
            }
        }

        return calendarRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectCalendar</Name>
				<Source><![CDATA[
    private static CalendarRecId getProjectCalendar(ProjId _projId, boolean _useProjectCalendar)
    {
        CalendarRecId calendarRecId;

        if (_projId)
        {
            // All project planned resources should use project calendar.
            // Named resource should also use project calendar if project is set with PSASchedIgnoreCalendar as NoYes::Yes.
            ProjTable projTable;
            select firstonly PSASchedIgnoreCalendar, PSASchedCalendarId from projTable
                where projTable.ProjId == _projId;

            if (_useProjectCalendar || projTable.PSASchedIgnoreCalendar == NoYes::Yes)
            {
                calendarRecId = WorkCalendarTable::find(projTable.PSASchedCalendarId).RecId;
            }
        }

        return calendarRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNamedResourceCalendarFromTeamRecord</Name>
				<Source><![CDATA[
    private static CalendarRecId getNamedResourceCalendarFromTeamRecord(ResourceRecId _resource, utcdatetime _targetDateTime)
    {
        CalendarRecId calendarRecId;

        if (_resource)
        {
            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                ResCalendarDateTimeRange calendarDateTimeRange;

                select firstonly Calendar from calendarDateTimeRange
                    where calendarDateTimeRange.Resource == _resource &&
                        calendarDateTimeRange.ValidFromDateTime <= _targetDateTime &&
                        calendarDateTimeRange.ValidToDateTime >= _targetDateTime;

                calendarRecId = calendarDateTimeRange.Calendar;
            }
            else
            {
                ResourceLegalEntityView legalEntityView;
                
                select firstonly Calendar from legalEntityView
                    where legalEntityView.Resource == _resource &&
                        legalEntityView.ValidFrom <= _targetDateTime &&
                        legalEntityView.ValidTo >= _targetDateTime;
                        
                calendarRecId = legalEntityView.Calendar;
            }
        }

        return calendarRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives Id of the calendar that activity resource is using.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get calendar Id for.</param>
    /// <returns>Id of the calendar that activity resource is using.</returns>
    public static CalendarId getCalendarId(ActivityResourceRecId _activityResource)
    {
        return ResourceCalendarFacade::getCalendarId(ActivityResourceFacade::getCalendar(_activityResource));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the activity resource.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get the name of.</param>
    /// <returns>The name of the activity resource.</returns>
    public static ActivityResourceName getName(ActivityResourceRecId _activityResource)
    {
        PSAProjSchedRole psaProjSchedRole;
        select firstOnly Name from psaProjSchedRole
            where psaProjSchedRole.RecId == _activityResource;

        return psaProjSchedRole.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves resource associated with the specified activity resource.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get related resource for.</param>
    /// <returns>Record Id of the resource associated with the specified activity resource.</returns>
    public static ResourceRecId getResource(ActivityResourceRecId _activityResource)
    {
        PSAProjSchedRole psaProjSchedRole;

        select firstOnly Resource from psaProjSchedRole
            where psaProjSchedRole.RecId == _activityResource;

        return psaProjSchedRole.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves resource category used in a project for specified activity resource.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get resource category for.</param>
    /// <returns>Resource category of specified activity resource.</returns>
    public static ResourceCategoryRecId getResourceCategory(ActivityResourceRecId _activityResource)
    {
        PSAProjSchedRole psaProjSchedRole;
        select firstonly ResourceCategory from psaProjSchedRole
            where psaProjSchedRole.RecId == _activityResource;

        return psaProjSchedRole.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves resource category ID used in a project for specified activity resource.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get resource category for.</param>
    /// <returns>Resource category ID of specified activity resource.</returns>
    public static PSASchedRoleId getResourceCategoryId(ActivityResourceRecId _activityResource)
    {
        return PSASchedRole::find(ActivityResourceFacade::getResourceCategory(_activityResource)).RoleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResourceLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves legal entity of the resource associated with the specified activity resource.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get resource legal entity for.</param>
    /// <returns>Legal entity record ID.</returns>
    public static LegalEntityRecId getResourceLegalEntity(ActivityResourceRecId _activityResource)
    {
        PSAProjSchedRole psaProjSchedRole;
        LegalEntityRecId legalEntity;

        select firstOnly Resource from psaProjSchedRole
            where psaProjSchedRole.RecId == _activityResource;

        if (psaProjSchedRole.Resource)
        {
            legalEntity = ResourceFacade::getLegalEntity(psaProjSchedRole.Resource);            
        }
        else
        {
            legalEntity = CompanyInfo::current();
        }

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGenericResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether activity resource is generic resource or named resource.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to check.</param>
    /// <returns>true if the activity resource is generic resource; false if the activity resource is named resource.</returns>
    public static boolean isGenericResource(ActivityResourceRecId _activityResource)
    {
        return ActivityResourceFacade::getResource(_activityResource) == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTeamMember</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether resource is a member of specific project team.
    /// </summary>
    /// <param name = "_projId">The project that resource may or may not be team member of.</param>
    /// <param name = "_resource">Resource to check project team membership.</param>
    /// <returns>true if the resource is member of the specified project team; otherwise, false.</returns>
    public static boolean isTeamMember(ProjId _projId, ResourceRecId _resource)
    {
        PSAProjSchedRole activityResource;

        select RecId from activityResource
            where activityResource.ProjId   == _projId
            &&    activityResource.Resource == _resource;

        return activityResource.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the start date of the specified activity resource.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get the start date of.</param>
    /// <returns>The start date of the activity resource.</returns>
    public static SchedFromDate getStartDate(ActivityResourceRecId _activityResource)
    {
        PSAProjSchedRole psaProjSchedRole;
            select firstonly PSARoleStartDate from psaProjSchedRole
            where psaProjSchedRole.RecId == _activityResource;

        return psaProjSchedRole.PSARoleStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the end date of the specified activity resource.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get the end date of.</param>
    /// <returns>The end date of the activity resource.</returns>
    public static SchedToDate getEndDate(ActivityResourceRecId _activityResource)
    {
        PSAProjSchedRole psaProjSchedRole;
            select firstonly PSARoleEndDate from psaProjSchedRole
            where psaProjSchedRole.RecId == _activityResource;

        return psaProjSchedRole.PSARoleEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the booked capacity of the specified activity resource.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get booked capacity of.</param>
    /// <param name = "_commitType">Commitment type of capacity.</param>
    /// <returns>Booked capacity in seconds.</returns>
    public static real getBookedCapacity(ActivityResourceRecId _activityResource, ResCommitType _commitType)
    {
        ResBookingView   resBooking;

        select sum(Capacity) from resBooking
            where resBooking.ActivityResource == _activityResource
                && resBooking.CommitType == _commitType;

        return resBooking.Capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookedCapacityByTimeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the booked capacity of the specified activity resource by time range.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get booked capacity of.</param>
    /// <param name = "_commitType">Commitment type of capacity.</param>
    /// <param name = "_startTime">Start time.</param>
    /// <param name = "_endTime">End time.</param>
    /// <returns>Booked capacity in seconds.</returns>
    public static real getBookedCapacityByTimeRange(ActivityResourceRecId _activityResource, ResCommitType _commitType,
        utcdatetime _startTime, utcdatetime _endTime)
    {
        ResBookingView   resBooking;

        select sum(Capacity) from resBooking
            where resBooking.ActivityResource == _activityResource
                && resBooking.CommitType == _commitType
                && resBooking.Hour >= _startTime
                && resBooking.Hour <= _endTime;

        return resBooking.Capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHardReservedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the hard reserved capacity for the specified activity resource.
    /// </summary>
    /// <param name = "_activityResource">Activity resource record ID.</param>
    /// <param name = "_rootActivity">Root activity record ID.</param>
    /// <returns>Hard reserved hours.</returns>
    public static real getHardReservedCapacity(ActivityResourceRecId _activityResource, ActivityRecId _rootActivity = 0)
    {
        ResReservationRollupRootTaskDayView activityResourceReservationView;

        if (_rootActivity)
        {
            select sum(LockedCapacity) from activityResourceReservationView
                where activityResourceReservationView.ActivityResource == _activityResource
                    && activityResourceReservationView.RootActivity == _rootActivity;
        }
        else
        {
            select sum(LockedCapacity) from activityResourceReservationView
                where activityResourceReservationView.ActivityResource == _activityResource;
        }
        
        return activityResourceReservationView.LockedCapacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the assigned capacity of the specific activity resource working on specified activity within the project.
    /// If no activity is specified in the call then the entire assigned capacity within the project is returned for the specified activity resource.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get assigned capacity of.</param>
    /// <param name = "_commitType">Commitment type.</param>
    /// <param name = "_activity">Activity that resource is assigned to.</param>
    /// <returns>Assigned capacity in seconds.</returns>
    public static real getAssignedCapacity(ActivityResourceRecId _activityResource, ResCommitType _commitType, ActivityRecId _activity = 0)
    {
        ResAssignmentView   resAssignment;

        if (_activityResource && _commitType)
        {    
            select sum(Capacity) from resAssignment
                where resAssignment.ActivityResource == _activityResource
                    && resAssignment.CommitType == _commitType
                    && (!_activity || resAssignment.Activity == _activity);
        }

        return resAssignment.Capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssignedCapacityByTimeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the assigned capacity of the specific activity resource by time range.
    /// If activity is specified, then it will return the assigned capacity for that activity only.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get assigned capacity of.</param>
    /// <param name = "_commitType">Commitment type of capacity.</param>
    /// <param name = "_startTime">Start time.</param>
    /// <param name = "_endTime">End time.</param>
    /// <param name = "_activity">Activity that resource is assigned to.</param>
    /// <returns>Assigned capacity in seconds.</returns>
    public static real getAssignedCapacityByTimeRange(ActivityResourceRecId _activityResource, ResCommitType _commitType,
        utcdatetime _startTime, utcdatetime _endTime, ActivityRecId _activity = 0)
    {
        ResAssignmentView   resAssignment;

        select sum(Capacity) from resAssignment
            group by resAssignment.CommitType, resAssignment.ActivityResource
            where resAssignment.ActivityResource == _activityResource
                && (!_activity || resAssignment.Activity == _activity)
                && resAssignment.CommitType == _commitType
                && resAssignment.Hour >= _startTime
                && resAssignment.Hour <= _endTime;

        return resAssignment.Capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReservation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the activity resource has any reservation.
    /// </summary>
    /// <param name = "_activityResource">Specify activity resource rec Id.</param>
    /// <param name = "_commitType">Reservation commit type.</param>
    /// <returns>True if the the activity resource has any reservation.</returns>
    public static boolean hasReservation(ActivityResourceRecId _activityResource, ResCommitType _commitType = ResCommitType::AnyType)
    {
        ResReservationDayUnionView reservationView;

        select firstonly ActivityResource from reservationView
            where reservationView.ActivityResource == _activityResource
                && (_commitType == ResCommitType::AnyType || reservationView.CommitType == _commitType);

        return reservationView ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBookingByTimeFrame</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the activity resource has any booking by the specified time frame.
    /// </summary>
    /// <param name = "_activityResource">Specify activity resource rec Id.</param>
    /// <param name = "_start">Specify the starting time frame.</param>
    /// <param name = "_end">Specify the ending time frame.</param>
    /// <param name = "_commitType">Reservation commit type.</param>
    /// <param name = "_timeFrameType">Time frame type.</param>
    /// <returns>True if the the activity resource has any booking in the specified time frame.</returns>
    public static boolean hasBookingByTimeFrame(ActivityResourceRecId _activityResource, utcdatetime _start, utcdatetime _end,
        ResCommitType _commitType = ResCommitType::AnyType, AVTimeframeType _timeFrameType =  AVTimeframeType::Day)
    {
        ResBookingView bookingView;

        switch (_timeFrameType)
        {
            case AVTimeframeType::Hour:
                select firstonly ActivityResource from bookingView
                    where bookingView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || bookingView.CommitType == _commitType)
                        && bookingView.Hour >= _start && bookingView.Hour <= _end;
                break;
            case AVTimeframeType::Day:
                select firstonly ActivityResource from bookingView
                    where bookingView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || bookingView.CommitType == _commitType)
                        && bookingView.Day >= _start && bookingView.Day <= _end;
                break;
            case AVTimeframeType::Week:
                select firstonly ActivityResource from bookingView
                    where bookingView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || bookingView.CommitType == _commitType)
                        && bookingView.Week >= _start && bookingView.Week <= _end;
                break;
            case AVTimeframeType::Month:
                select firstonly ActivityResource from bookingView
                    where bookingView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || bookingView.CommitType == _commitType)
                        && bookingView.Month >= _start && bookingView.Month <= _end;
                break;
            case AVTimeframeType::Quarter:
                select firstonly ActivityResource from bookingView
                    where bookingView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || bookingView.CommitType == _commitType)
                        && bookingView.Quarter >= _start && bookingView.Quarter <= _end;
                break;
            case AVTimeframeType::HalfYear:
                select firstonly ActivityResource from bookingView
                    where bookingView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || bookingView.CommitType == _commitType)
                        && bookingView.HalfYear >= _start && bookingView.HalfYear <= _end;
                break;
        }

        return bookingView ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAssignmentByTimeFrame</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the activity resource has any assignment by the specified time frame.
    /// </summary>
    /// <param name = "_activityResource">Specify activity resource rec Id.</param>
    /// <param name = "_start">Specify the starting time frame.</param>
    /// <param name = "_end">Specify the ending time frame.</param>
    /// <param name = "_commitType">Reservation commit type.</param>
    /// <param name = "_timeFrameType">Time frame type.</param>
    /// <returns>True if the the activity resource has any assignment in the specified time frame.</returns>
    public static boolean hasAssignmentByTimeFrame(ActivityResourceRecId _activityResource, utcdatetime _start, utcdatetime _end,
        ResCommitType _commitType = ResCommitType::AnyType, AVTimeframeType _timeFrameType =  AVTimeframeType::Day)
    {
        ResAssignmentView assignmentView;

        switch (_timeFrameType)
        {
            case AVTimeframeType::Hour:
                select firstonly ActivityResource from assignmentView
                    where assignmentView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || assignmentView.CommitType == _commitType)
                        && assignmentView.Hour >= _start && assignmentView.Hour <= _end;
                break;
            case AVTimeframeType::Day:
                select firstonly ActivityResource from assignmentView
                    where assignmentView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || assignmentView.CommitType == _commitType)
                        && assignmentView.Day >= _start && assignmentView.Day <= _end;
                break;
            case AVTimeframeType::Week:
                select firstonly ActivityResource from assignmentView
                    where assignmentView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || assignmentView.CommitType == _commitType)
                        && assignmentView.Week >= _start && assignmentView.Week <= _end;
                break;
            case AVTimeframeType::Month:
                select firstonly ActivityResource from assignmentView
                    where assignmentView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || assignmentView.CommitType == _commitType)
                        && assignmentView.Month >= _start && assignmentView.Month <= _end;
                break;
            case AVTimeframeType::Quarter:
                select firstonly ActivityResource from assignmentView
                    where assignmentView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || assignmentView.CommitType == _commitType)
                        && assignmentView.Quarter >= _start && assignmentView.Quarter <= _end;
                break;
            case AVTimeframeType::HalfYear:
                select firstonly ActivityResource from assignmentView
                    where assignmentView.ActivityResource == _activityResource
                        && (_commitType == ResCommitType::AnyType || assignmentView.CommitType == _commitType)
                        && assignmentView.HalfYear >= _start && assignmentView.HalfYear <= _end;
                break;
        }

        return assignmentView ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Id of the project that activity resource is working on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get project Id of.</param>
    /// <returns>The Id of the project that activity resource is working on.</returns>
    public static ProjId getProjectId(ActivityResourceRecId _activityResource)
    {
        PSAProjSchedRole psaProjSchedRole;

        select firstOnly ProjId from psaProjSchedRole where psaProjSchedRole.RecId == _activityResource;

        return psaProjSchedRole.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuotationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Id of the quotation that activity resource is working on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to get quotation Id of.</param>
    /// <returns>The Id of the quotation that activity resource is working on.</returns>
    private static QuotationId getQuotationId(ActivityResourceRecId _activityResource)
    {
        PSAProjSchedRole psaProjSchedRole;

        select firstOnly QuotationId from psaProjSchedRole where psaProjSchedRole.RecId == _activityResource;

        return psaProjSchedRole.QuotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRootActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves root activity rec Id that activity resource is working on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource rec Id.</param>
    /// <returns>The activity rec Id of that activity resource is working on.</returns>
    public static ActivityRecId getRootActivity(ActivityResourceRecId _activityResource)
    {
        ActivityRecId activity;
        ProjId projectId = ActivityResourceFacade::getProjectId(_activityResource);

        if (projectId)
        {
            activity = ActivityFacade::findActivityByProjectId(projectId);
        }
        else
        {
            QuotationId quotationId = ActivityResourceFacade::getQuotationId(_activityResource);
            activity = ActivityFacade::findActivityByQuotationId(quotationId);
        }
        return activity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDate</Name>
				<Source><![CDATA[
    private static TransDate getDefaultDate()
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDateTime</Name>
				<Source><![CDATA[
    private static utcdatetime getDefaultDateTime()
    {
        return utcdatetimeNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestBookingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the earliest date that the activity resource is booked on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The earliest date that the activity resource is booked on.</returns>
    public static TransDate getEarliestBookingDate(ActivityResourceRecId _activityResource)
    {
        ResBooking     ResBooking;

        select minof(Day) from ResBooking
            where ResBooking.ActivityResource == _activityResource;

        return ResBooking ? DateTimeUtil::date(ResBooking.Day) : ActivityResourceFacade::getDefaultDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestBookingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest date that the activity resource is booked on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The latest date that the activity resource is booked on.</returns>
    public static TransDate getLatestBookingDate(ActivityResourceRecId _activityResource)
    {
        ResBooking     resBooking;

        select maxof(Day) from resBooking
            where resBooking.ActivityResource == _activityResource;

        return resBooking ? DateTimeUtil::date(resBooking.Day) : ActivityResourceFacade::getDefaultDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestAssignmentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the earliest date that the activity resource has assignments on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The earliest date that the activity resource has assignments on.</returns>
    public static TransDate getEarliestAssignmentDate(ActivityResourceRecId _activityResource)
    {
        ResAssignment     resAssignment;

        select minof(Day) from resAssignment
            where resAssignment.ActivityResource == _activityResource;

        return resAssignment ? DateTimeUtil::date(resAssignment.Day) : ActivityResourceFacade::getDefaultDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestAssignmentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest date that the activity resource has assignments on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The earliest date that the activity resource has assingments on.</returns>
    public static TransDate getLatestAssignmentDate(ActivityResourceRecId _activityResource)
    {
        ResAssignment     resAssignment;

        select maxof(Day) from resAssignment
            where resAssignment.ActivityResource == _activityResource;

        return resAssignment ? DateTimeUtil::date(resAssignment.Day) : ActivityResourceFacade::getDefaultDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestReservationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the earliest date that the activity resource has bookings or assignments on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The earliest date that the activity resource has bookings or assignments on.</returns>
    public static TransDate getEarliestReservationDate(ActivityResourceRecId _activityResource)
    {
        TransDate   earliestDate;
        TransDate   defaultDate = ActivityResourceFacade::getDefaultDate();
        TransDate   bookingEarliestDate = ActivityResourceFacade::getEarliestBookingDate(_activityResource);
        TransDate   assignmentEarliestDate = ActivityResourceFacade::getEarliestAssignmentDate(_activityResource);

        if ((bookingEarliestDate != defaultDate) && (assignmentEarliestDate != defaultDate))
        {
            earliestDate = bookingEarliestDate < assignmentEarliestDate ? bookingEarliestDate : assignmentEarliestDate;
        }
        else if (bookingEarliestDate != defaultDate)
        {
            earliestDate = bookingEarliestDate;
        }
        else
        {
            earliestDate = assignmentEarliestDate;
        }

        return earliestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestReservationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest date that the activity resource has bookings or assignments on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The latest date that the activity resource has bookings or assingments on.</returns>
    public static TransDate getLatestReservationDate(ActivityResourceRecId _activityResource)
    {
        TransDate   latestDate;
        TransDate   defaultDate = ActivityResourceFacade::getDefaultDate();
        TransDate   bookingLatestDate = ActivityResourceFacade::getLatestBookingDate(_activityResource);
        TransDate   assignmentLatestDate = ActivityResourceFacade::getLatestAssignmentDate(_activityResource);

        if ((bookingLatestDate != defaultDate) && (assignmentLatestDate != defaultDate))
        {
            latestDate = bookingLatestDate > assignmentLatestDate ? bookingLatestDate : assignmentLatestDate;
        }
        else if (bookingLatestDate != defaultDate)
        {
            latestDate = bookingLatestDate;
        }
        else
        {
            latestDate = assignmentLatestDate;
        }

        return latestDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestBookingDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the earliest datetime that the activity resource is booked on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The earliest datetime that the activity resource is booked on.</returns>
    public static utcdatetime getEarliestBookingDateTime(ActivityResourceRecId _activityResource)
    {
        ResBooking  resBooking;
        utcdatetime targetDateTime = ActivityResourceFacade::getDefaultDateTime();

        select firstonly Hour, Start from resBooking
            order by Hour asc
            where resBooking.ActivityResource == _activityResource;

        if (resBooking)
        {
            targetDateTime = datetimeUtil::addSeconds(resBooking.Hour, real2int(resBooking.Start));
        }

        return targetDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestBookingDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest datetime that the activity resource is booked on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The latest datetime that the activity resource is booked on.</returns>
    public static utcdatetime getLatestBookingDateTime(ActivityResourceRecId _activityResource)
    {
        ResBooking     resBooking;
        utcdatetime targetDateTime = ActivityResourceFacade::getDefaultDateTime();

        select firstonly Hour, End from resBooking
            order by Hour desc
            where resBooking.ActivityResource == _activityResource;

        if (resBooking)
        {
            targetDateTime = datetimeUtil::addSeconds(resBooking.Hour, real2int(resBooking.End));
        }

        return targetDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestAssignmentDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the earliest utcdatetime that the activity resource has assignments on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The earliest utcdatetime that the activity resource has assignments on.</returns>
    public static utcdatetime getEarliestAssignmentDateTime(ActivityResourceRecId _activityResource)
    {
        ResAssignment   resAssignment;
        utcdatetime     targetDateTime = ActivityResourceFacade::getDefaultDateTime();

        select firstonly Hour, Start from resAssignment
            order by Hour asc
            where resAssignment.ActivityResource == _activityResource;

        if (resAssignment)
        {
            targetDateTime = datetimeUtil::addSeconds(resAssignment.Hour, real2int(resAssignment.Start));
        }

        return targetDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestAssignmentDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest datetime that the activity resource has assignments on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The earliest datetime that the activity resource has assingments on.</returns>
    public static utcdatetime getLatestAssignmentDateTime(ActivityResourceRecId _activityResource)
    {
        ResAssignment   resAssignment;
        utcdatetime     targetDateTime = ActivityResourceFacade::getDefaultDateTime();

        select firstonly Hour, End from resAssignment
            order by Hour desc
            where resAssignment.ActivityResource == _activityResource;

        if (resAssignment)
        {
            targetDateTime = datetimeUtil::addSeconds(resAssignment.Hour, real2int(resAssignment.End));
        }

        return targetDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestReservationDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the earliest datetime that the activity resource has bookings or assignments on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The earliest datetime that the activity resource has bookings or assignments on.</returns>
    public static utcdatetime getEarliestReservationDateTime(ActivityResourceRecId _activityResource)
    {
        utcdatetime   earliestDateTime;
        utcdatetime   defaultDateTime = ActivityResourceFacade::getDefaultDateTime();
        utcdatetime   bookingEarliestDateTime = ActivityResourceFacade::getEarliestBookingDateTime(_activityResource);
        utcdatetime   assignmentEarliestDateTime = ActivityResourceFacade::getEarliestAssignmentDateTime(_activityResource);

        if ((bookingEarliestDateTime != defaultDateTime) && (assignmentEarliestDateTime != defaultDateTime))
        {
            earliestDateTime = bookingEarliestDateTime < assignmentEarliestDateTime ?
                bookingEarliestDateTime : assignmentEarliestDateTime;
        }
        else if (bookingEarliestDateTime != defaultDateTime)
        {
            earliestDateTime = bookingEarliestDateTime;
        }
        else
        {
            earliestDateTime = assignmentEarliestDateTime;
        }

        return earliestDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestReservationDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest datetime that the activity resource has bookings or assignments on.
    /// </summary>
    /// <param name = "_activityResource">Activity resource.</param>
    /// <returns>The latest datetime that the activity resource has bookings or assingments on.</returns>
    public static utcdatetime getLatestReservationDateTime(ActivityResourceRecId _activityResource)
    {
        utcdatetime   latestDateTime;
        utcdatetime   defaultDateTime = ActivityResourceFacade::getDefaultDateTime();
        utcdatetime   bookingLatestDateTime = ActivityResourceFacade::getLatestBookingDateTime(_activityResource);
        utcdatetime   assignmentLatestDateTime = ActivityResourceFacade::getLatestAssignmentDateTime(_activityResource);

        if ((bookingLatestDateTime != defaultDateTime) && (assignmentLatestDateTime != defaultDateTime))
        {
            latestDateTime = bookingLatestDateTime > assignmentLatestDateTime ?
                bookingLatestDateTime : assignmentLatestDateTime;
        }
        else if (bookingLatestDateTime != defaultDateTime)
        {
            latestDateTime = bookingLatestDateTime;
        }
        else
        {
            latestDateTime = assignmentLatestDateTime;
        }

        return latestDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseReservations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes all reservations of activity resource within specified time range. Related activity scheduling status is updated accordingly.
    /// </summary>
    /// <param name = "_activityResource">Activity resource to remove reservations of.</param>
    /// <param name = "_from">Start of the time range.</param>
    /// <param name = "_to">End of the time range.</param>
    /// <param name = "_executeRollup">Whether to update the <c>ResRollup</c> table records.</param>
    public static void releaseReservations(ActivityResourceRecId _activityResource, 
        utcdatetime _from, utcdatetime _to, boolean _executeRollup = true)
    {
        ResReservationType type = ResReservationType::Both;

        var cancellationParameters = ResReservationSchedule::construct();
        cancellationParameters.activityResource(_activityResource);
        cancellationParameters.reservationType(type);
        cancellationParameters.start(_from);
        cancellationParameters.end(_to);
        cancellationParameters.commitment(ResCommitType::AnyType);

        List schedules = new List(Types::Class);
        schedules.addEnd(cancellationParameters);

        ResIResourceManager resourceManager = ResResourceManager::construct();
        resourceManager.Schedules(schedules);
        resourceManager.ReservationType(type);
        resourceManager.ExecuteRollUp(_executeRollup);
        resourceManager.Cancel(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRequestedCapacityByTimeRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the requested capacity of the specified activity for a given time range.
    /// </summary>
    /// <param name = "_activityResource">Activity resource record ID.</param>
    /// <param name = "_resourceRequest">Resource request record ID.</param>
    /// <param name = "_approvalStatus">Request approval status.</param>
    /// <param name = "_startTime">Start time.</param>
    /// <param name = "_endTime">End time.</param>
    /// <returns>Assigned capacity in seconds.</returns>
    public static real getRequestedCapacityByTimeRange(ActivityResourceRecId _activityResource, ResRequestRecId _resourceRequest,
        ResApprovalStatus _approvalStatus, utcdatetime _startTime, utcdatetime _endTime)
    {
        ResRequestLineView   requestLineView;

        select sum(Capacity) from requestLineView
            where requestLineView.ActivityResource == _activityResource
                && requestLineView.Request == _resourceRequest
                && requestLineView.ReservationType == ResReservationType::Booking
                && requestLineView.ApprovalStatus == _approvalStatus
                && requestLineView.Hour >= _startTime
                && requestLineView.Hour <= _endTime;

        return requestLineView.Capacity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEarliestApprovedRequestBookingDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the earliest booking hour of the activity resource from the specify resource request.
    /// </summary>
    /// <param name = "_activityResource">Activity resource record ID.</param>
    /// <param name = "_request">Request record ID.</param>
    /// <returns>The earliest hour that the activity resource has been requested for.</returns>
    public static utcdatetime getEarliestApprovedRequestBookingDateTime(
        ActivityResourceRecId _activityResource, ResRequestRecId _request)
    {
        ResRequestLine requestLine;

        select minof(Hour) from requestLine
            where requestLine.Request == _request
                && requestLine.activityResource == _activityResource
                && requestLine.ApprovalStatus == ResApprovalStatus::Approved
                && requestLine.ReservationType == ResReservationType::Booking;

        return requestLine ? requestLine.Hour : ActivityResourceFacade::getDefaultDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLatestApprovedRequestBookingDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the latest booking hour of the activity resource from the specify resource request.
    /// </summary>
    /// <param name = "_activityResource">Activity resource rec ID.</param>
    /// <param name = "_request">Request rec ID.</param>
    /// <returns>The latest hour that the activity resource has been requested for.</returns>
    public static utcdatetime getLatestApprovedRequestBookingDateTime(
        ActivityResourceRecId _activityResource, ResRequestRecId _request)
    {
        ResRequestLine requestLine;

        select maxof(Hour) from requestLine
            where requestLine.Request == _request
                && requestLine.activityResource == _activityResource
                && requestLine.ApprovalStatus == ResApprovalStatus::Approved
                && requestLine.ReservationType == ResReservationType::Booking;

        return requestLine ? requestLine.Hour : ActivityResourceFacade::getDefaultDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAssignmentByActivityAndDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if the specified activity resource has assignment records by WBS task activity and the specified date time range.
    /// </summary>
    /// <param name = "_activityResource">Activity resource record ID.</param>
    /// <param name = "_activity">WBS task activity record ID.</param>
    /// <param name = "_fromDateTime">From date time.</param>
    /// <param name = "_toDateTime">To date time.</param>
    /// <returns>true if the specified activity resource has assignment records; otherwise false.</returns>
    public static boolean hasAssignmentByActivityAndDateTime(ActivityResourceRecId _activityResource,
        ActivityRecId _activity, utcdatetime _fromDateTime, utcdatetime _toDateTime)
    {
        ResAssignment resAssignment;

        select firstonly RecId from resAssignment
            where resAssignment.ActivityResource == _activityResource
                && resAssignment.Activity == _activity
                && resAssignment.Hour >= _fromDateTime
                && resAssignment.Hour <= _toDateTime;

        boolean hasAssignment = resAssignment.RecId ? true : false;
        
        return hasAssignment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalendarByActivityAndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get calendar record identifier for the activity resource by the specific activity record identifier and scheduling date.
    /// </summary>
    /// <param name = "_activityResource">Acitivyt resource record identifier.</param>
    /// <param name = "_activity">Activity record identifier.</param>
    /// <param name = "_schedulingDate">Scheduling date.</param>
    /// <returns>Calendar record identifier.</returns>
    public static CalendarRecId getCalendarByActivityAndDate(ActivityResourceRecId _activityResource, ActivityRecId _activity, Date _schedulingDate)
    {
        CalendarRecId calendar;

        if (_activityResource && _activity)
        {
            boolean useActivityCalendar = ActivityFacade::useActivityCalendar(_activity);
            if (useActivityCalendar|| ActivityResourceFacade::isGenericResource(_activityResource))
            {
                calendar = ActivityFacade::getCalendar(_activity);
            }
            else
            {
                calendar = ResourceFacade::getCalendar(
                    ActivityResourceFacade::getResource(_activityResource),
                    _schedulingDate, _schedulingDate);
            }
        }
        return calendar;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReservedHoursByActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get reserved hours by activity resource and activity.
    /// </summary>
    /// <param name = "_activityResource">Activity resource record ID.</param>
    /// <param name = "_activity">Activity record ID.</param>
    /// <returns>Reserved hours by the specified actiivty resource and activity.</returns>
    public static real getReservedHoursByActivity(ActivityResourceRecId _activityResource, ActivityRecId _activity)
    {
        ResResourceRemainingCapacity remainingCapacity;
        if (ActivityFacade::isRootActivity(_activity))
        {
            ResBooking      bookingTable;
            ResAssignment   assignmentTable;

            select sum(Start), sum(End) from bookingTable
                where bookingTable.ActivityResource == _activityResource
                    && bookingTable.Activity == _activity
                notexists join assignmentTable
                    where assignmentTable.ActivityResource == bookingTable.ActivityResource
                        && assignmentTable.Hour == bookingTable.Hour
                        && assignmentTable.Start == bookingTable.Start
                        && assignmentTable.End == bookingTable.End;

            remainingCapacity = bookingTable.End - bookingTable.Start;
        }
        else
        {
            ResAssignmentView assignmentView;
            select sum(Capacity) from assignmentView
                where assignmentView.ActivityResource == _activityResource
                    && assignmentView.Activity == _activity;

            remainingCapacity = assignmentView.Capacity;
        }
        
        return remainingCapacity / #SecondsPerHour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>