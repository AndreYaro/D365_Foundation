<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransExtensionTHConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransExtensionTHConsistencyCheck</c> performs consistency check for <c>TaxTransExtensionTHConsistencyCheck</c> table.
/// </summary>
internal class TaxTransExtensionTHConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
    /// <summary>
    /// Runs the process of checking and fixing records in TaxTransExtensionTH table.
    /// </summary>
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoTH ]))
        {
            FromDate fromDate = this.consistencyCheckJob.parmFromDate();
            CheckFix checkFix = this.checkFix();
            Counter numRecords = this.processRecords(checkFix, fromDate);
            if (checkFix == CheckFix::Fix)
            {
                this.updateCorrected(numRecords);
                info(strFmt("@TaxTrans:ResultFixMessage", numRecords));
            }
            else
            {
                this.updateNotCorrected();
                if (numRecords > 0)
                {
                    info(strFmt("@TaxTrans:ResultCheckMessage", numRecords));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>singleProcessRecords</Name>
				<Source><![CDATA[
    private Counter singleProcessRecords(FromDate _fromDate, boolean _doUpdate = false)
    {
        TaxTrans             taxTransInvoice;
        TaxTransExtensionTH  taxTransExtensionTHInvoice;
        TaxTrans             taxTransPayment;
        TaxTransExtensionTH  taxTransExtensionTHPayment;
        TaxTrans             taxTransGainLoss;
        TaxTransExtensionTH  taxTransExtensionTHGainLoss;
        TaxTransExtensionTH  taxTransExtensionTHGainLossToUpd;
        TaxAmount            taxRemainingAmount;

        Query                query;
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;
        QueryRun             qr;

        Counter              numOfRecords;

        query   = new Query(queryStr(TaxUnrealizedVATRemaining));
        qbds    = query.dataSourceTable(tableNum(TaxTrans));
        qbr     = SysQuery::findOrCreateRange(qbds, fieldNum(TaxTrans, TransDate));

        qbr.value(SysQuery::range(_fromDate, maxDate()));

        qr     = new QueryRun(query);
        while (qr.next())
        {
            taxRemainingAmount = 0;
            taxTransInvoice             = qr.get(tableNum(TaxTrans));
            taxTransExtensionTHInvoice  = qr.get(tableNum(TaxTransExtensionTH));

            select sum(TaxAmount) from taxTransPayment
                        where taxTransPayment.TaxOrigin == TaxOrigin::Payment
                        exists join taxTransExtensionTHPayment
                            where taxTransExtensionTHPayment.TaxTrans               == taxTransPayment.RecId
                                && taxTransExtensionTHPayment.TaxUnrealizedRefRecId == taxTransInvoice.RecId;

            if (taxTransPayment.TaxAmount == taxTransInvoice.TaxAmount)
            {
                taxRemainingAmount = 0;
            }
            else
            {
                if (taxTransInvoice.TaxAmount == 0)
                {
                    taxRemainingAmount = 0;
                }
                else
                {
                    taxRemainingAmount = (taxTransInvoice.TaxAmount - taxTransInvoice.TaxInCostPriceRegulated) * (taxTransInvoice.TaxAmount - taxTransPayment.TaxAmount) / taxTransInvoice.TaxAmount;
                }
            }

            if (taxRemainingAmount)
            {
                if (_doUpdate)
                {
                    update_recordset taxTransExtensionTHGainLossToUpd
                        setting IsReversalGainLoss = NoYes::Yes
                        join taxTransGainLoss
                        where taxTransExtensionTHGainLossToUpd.TaxTrans                 == taxTransGainLoss.RecId
                            && taxTransExtensionTHGainLossToUpd.TaxUnrealizedRefRecId   == taxTransInvoice.RecId
                            && taxTransExtensionTHGainLossToUpd.IsReversalGainLoss      == NoYes::No
                            && taxTransGainLoss.TaxOrigin                               == TaxOrigin::TaxReversed
                            && taxTransGainLoss.TaxAmount                               == taxTransGainLoss.TaxAmountCur
                            && taxTransGainLoss.TaxAmount                               != 0
                            && taxTransGainLoss.TaxBaseAmount                           == 0
                            && taxTransGainLoss.TaxBaseAmountCur                        == 0
                            && taxTransGainLoss.SourceTaxAmountCur                      == 0;
                    
                    numOfRecords += taxTransExtensionTHGainLossToUpd.RowCount();
                }
                else
                {
                    select count(recid) from taxTransExtensionTHGainLossToUpd
                        join taxTransGainLoss
                        where taxTransExtensionTHGainLossToUpd.TaxTrans                 == taxTransGainLoss.RecId
                            && taxTransExtensionTHGainLossToUpd.TaxUnrealizedRefRecId   == taxTransInvoice.RecId
                            && taxTransExtensionTHGainLossToUpd.IsReversalGainLoss      == NoYes::No
                            && taxTransGainLoss.TaxOrigin                               == TaxOrigin::TaxReversed
                            && taxTransGainLoss.TaxAmount                               == taxTransGainLoss.TaxAmountCur
                            && taxTransGainLoss.TaxAmount                               != 0
                            && taxTransGainLoss.TaxBaseAmount                           == 0
                            && taxTransGainLoss.TaxBaseAmountCur                        == 0
                            && taxTransGainLoss.SourceTaxAmountCur                      == 0;

                    numOfRecords += taxTransExtensionTHGainLossToUpd.RecId;
                }
            }
        }

        return numOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies records in TaxTransExtensionTH with unfilled IsReversalGainLoss and updates them.
    /// </summary>
    /// <param name = "_checkFix">The type of processing: either Check or Fix.</param>
    /// <param name = "_fromDate">The date, from which should be processed the lines from TaxTrans table.</param>
    /// <returns>The number of records, which should be update in TaxTransExtensionTH</returns>
    private Counter processRecords(CheckFix _checkFix, FromDate _fromDate)
    {
        Counter numOfRecords;

        int tryCount = 0;

        if (_checkFix == CheckFix::Fix)
        {
            try
            {
                ttsBegin;

                numOfRecords = this.singleProcessRecords(_fromDate, true);
                
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (tryCount < 3)
                {
                    tryCount++;
                    retry;
                }
                else
                {
                    throw Exception::Deadlock;
                }
            }
        }
        else
        {
            numOfRecords = this.singleProcessRecords(_fromDate);
        }

        return numOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the id of the parent class.
    /// </summary>
    /// <returns>The class id of the parent class.</returns>
    public ClassId treeParentClassId()
    {
        return classNum(TaxConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxTransExtensionTHConsistencyCheck construct()
    {
        return new TaxTransExtensionTHConsistencyCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@TaxTrans:Name";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return strFmt("@TaxTrans:Description", "@SYS23189", "@GLS109142", "@SYS336146");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>