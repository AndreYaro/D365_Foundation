<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventReleaseOrderPickingForm_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventReleaseOrderPickingForm_Sales</c> class is used to create and update orders that have
///    been released to sales.
/// </summary>
class InventReleaseOrderPickingForm_Sales extends InventReleaseOrderPickingForm
{
    Map numberOfOrderLinesDeliverableMap;
    Set salesLineRecIdSet;
    Map qtyWMSOrderMap;
    Map qtyRemainToDeliverMap;
    private boolean pdsSkipFetchSellableDays;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allOrdersDeliverable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether all orders with the same item and inventory dimensions can be delivered.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> record.
    /// </param>
    /// <param name="_custId">
    /// The customer account.
    /// </param>
    /// <param name="_dateReq">
    /// Requested receipt date.
    /// </param>
    /// <returns>
    /// True if all orders can be delivered; otherwise, false.
    /// </returns>
    protected boolean allOrdersDeliverable(
        ItemId _itemId,
        InventDim _inventDim,
        CustAccount _custId = "",
        date _dateReq = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        InventSum inventSum = this.findInventOnHandQty(_itemId, _inventDim);
        if (inventSum.AvailPhysical < inventSum.OnOrder)
        {
            return false;
        }

        PdsSellableDays pdsDays;
        
        if (!pdsSkipFetchSellableDays)
        {
            pdsDays = PdsCustSellableDays::findValidRec(_itemId, _custId, _inventDim).SellableDays;
        }

        PdsExpiredPhysical expiredPhysical = conPeek(inventSum.pdsCustExpiredOrBlockPhysical(pdsDays, _dateReq, _inventDim), 1);

        if (inventSum.AvailPhysical - expiredPhysical < inventSum.OnOrder)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventReleaseOrderPickingTmpFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>inventReleaseOrderPickingTmp</c> class member from a sales line.
    /// </summary>
    /// <param name = "_salesLine">The sales line.</param>
    protected void initializeInventReleaseOrderPickingTmpFromSalesLine(SalesLine _salesLine)
    {
        inventReleaseOrderPickingTmp.TransRecId = _salesLine.RecId;
        inventReleaseOrderPickingTmp.TransType = InventReleaseOrderPickingType::Sales;

        inventReleaseOrderPickingTmp.OrderId = _salesLine.SalesId;
        inventReleaseOrderPickingTmp.CustClassificationId = _salesLine.custClassification();
    }

]]></Source>
			</Method>
			<Method>
				<Name>bldInventReleaseOrderPickingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the temporary table that is used in the related forms.
    /// </summary>
    /// <param name="_packedQueryRun">
    ///    A container that has the packed <c>QueryRun</c> that should be used for the order lines selection.
    /// </param>
    public void bldInventReleaseOrderPickingTmp(container _packedQueryRun)
    {
        #avifiles

        SalesLine salesLine;
        InventDimParm inventDimParm;

        ttsbegin;

        delete_from inventReleaseOrderPickingTmp;

        QueryRun queryRun = new QueryRun(_packedQueryRun);

        //Pull out date range so it can be used for the sales,prod,and transfer exist queries
        QueryBuildDataSource qbdsSalesLine = queryRun.query().dataSourceTable(tableNum(SalesLine));

        if (qbdsSalesLine)
        {
            QueryBuildRange qbrDates = qbdsSalesLine.findRange(fieldNum(SalesLine,ConfirmedDlv));

            if (qbrDates)
            {
                dateRange = qbrDates.value();
            }
        }

        SysOperationProgress progressBar = SysOperationProgress::newGeneral(#aviUpdate, "@SYS90340", QueryRun::getQueryRowCount(queryRun.query(), maxInt()));

        numberOfOrderLinesDeliverableMap = new Map(Types::String,Types::Integer);
        salesLineRecIdSet = new Set(Types::Int64);

        while (queryRun.next())
        {
            salesLine = queryRun.get(salesLine.TableId);

            if(this.skipSalesLineInInventoryReleaseOrderPicking(salesLine))
            {
                continue;
            }

            salesLineRecIdSet.add(salesLine.RecId);

            progressBar.incCount();
            progressBar.setText(strFmt("@SYS90342",salesLine.SalesId));

            InventQty qtyOnPickWMSTotal = 0;
            InventQty qtyRemainToDeliver = 0;

            InventDim inventDimSalesLine = this.findInventDim(salesLine.InventDimId);

            inventDimParm.data(this.initInventDimParm(inventDimSalesLine));

            InventQty qtyPhysicalInvent = this.findQtyPhysicalInvent(salesLine.ItemId, inventDimSalesLine);

            if (qtyPhysicalInvent > 0 && deductUnReserved)
            {
                qtyOnPickWMSTotal = this.findQtyOnPick(salesLine.ItemId,inventDimSalesLine);
                qtyPhysicalInvent -= qtyOnPickWMSTotal;
            }

            if (qtyPhysicalInvent > 0)
            {
                InventQty qtyReservedOrdered = this.findQtyReservedOrdered(salesLine.InventTransId);

                qtyRemainToDeliver = this.findQtyRemainToDeliver(salesLine, qtyReservedOrdered);

                if (qtyRemainToDeliver > 0)
                {
                    this.initializeInventReleaseOrderPickingTmpFromSalesLine(salesLine);

                    inventReleaseOrderPickingTmp.AllOrdersDeliverable = qtyReservedOrdered ? false : this.allOrdersDeliverable(
                                                                                                            salesLine.ItemId,
                                                                                                            inventDimSalesLine,
                                                                                                            salesLine.CustAccount,
                                                                                                            salesLine.ReceiptDateConfirmed
                                                                                                                ? salesLine.ReceiptDateConfirmed
                                                                                                                : salesLine.ReceiptDateRequested);

                    inventReleaseOrderPickingTmp.NeedAllocation = this.needAllocation(salesLine.ItemId, inventDimSalesLine, salesLine);
                    if (!this.parmSkipProductionOrderExistCalculation())
                    {
                        inventReleaseOrderPickingTmp.ProductionOrderExist = this.productionOrderLineExist(salesLine.ItemId, inventDimSalesLine.InventDimId, dateRange);
                    }

                    if (!this.parmSkipTransferOrderExistCalculation())
                    {
                        inventReleaseOrderPickingTmp.TransferOrderExist = this.transferOrderExist(salesLine.ItemId, inventDimSalesLine.InventDimId,dateRange);
                    }

                    inventReleaseOrderPickingTmp.insert();
                    this.updateNumberOfOrderLinesDeliverableMap(inventReleaseOrderPickingTmp.OrderId, inventReleaseOrderPickingTmp.AllOrdersDeliverable);
                }
            }
        }
        this.deliverPossiblePctCalc();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipSalesLineInInventoryReleaseOrderPicking</Name>
				<Source><![CDATA[
    protected boolean skipSalesLineInInventoryReleaseOrderPicking(SalesLine _salesLine)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrderLinesPossibleQuery</Name>
				<Source><![CDATA[
    private Query createOrderLinesPossibleQuery()
    {
        Query query = new Query(queryStr(SalesReleaseOrderPicking));

        QueryBuildDataSource dsSalesLine = query.dataSourceTable(tableNum(SalesLine));

        QueryBuildDataSource dsReleaseOrderPickingTmp = dsSalesLine.addDataSource(tableNum(InventReleaseOrderPickingTmp));
        dsReleaseOrderPickingTmp.joinMode(JoinMode::ExistsJoin);
        dsReleaseOrderPickingTmp.relations(false);
        dsReleaseOrderPickingTmp.addLink(fieldNum(SalesLine, SalesId), fieldNum(InventReleaseOrderPickingTmp, OrderId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliverPossiblePctCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the delivery percent possible for the whole order and updates this amount in the
    /// temporary table.
    /// </summary>
    protected void deliverPossiblePctCalc()
    {
        InventReleaseOrderPickingTmp releaseOrderPickingTmp;
        SalesLine salesLine;
        InventTable inventTable;
        InventTransOriginSalesLine inventTransOriginSalesLine;
        InventTrans inventTrans;

        releaseOrderPickingTmp.linkPhysicalTableInstance(inventReleaseOrderPickingTmp);

        SysQueryRun queryRun = new SysQueryRun(this.createOrderLinesPossibleQuery());

        while (queryRun.next())
        {
            salesLine = queryRun.get(salesLine.TableId);
            if (!salesLineRecIdSet.in(salesLine.RecId))
            {
                InventDim inventDimSalesLine = this.findInventDim(salesLine.InventDimId);

                InventQty qtyPhysicalInvent = this.findQtyPhysicalInvent(salesLine.ItemId,inventDimSalesLine);

                if (qtyPhysicalInvent > 0)
                {
                    InventQty qtyReservedOrdered = this.findQtyReservedOrdered(salesLine.InventTransId);
                    InventQty qtyRemainToDeliver = this.findQtyRemainToDeliver(salesLine, qtyReservedOrdered);
                    if (qtyRemainToDeliver > 0)
                    {
                        this.updateNumberOfOrderLinesDeliverableMap(salesLine.SalesId, this.allOrdersDeliverable(salesLine.ItemId,inventDimSalesLine));
                    }
                }
            }
        }

        while select count(RecId) from inventReleaseOrderPickingTmp
            group by OrderId
        {
            // find total number of order lines found deliverable (AllOrderDeliverable == Yes)
            Counter numberOfOrderLinesDeliverable = numberOfOrderLinesDeliverableMap.lookup(inventReleaseOrderPickingTmp.OrderId);

            if (numberOfOrderLinesDeliverable)
            {
                // find total number of possible order lines for this order
                select count(RecId) from salesLine
                    where salesLine.SalesId == inventReleaseOrderPickingTmp.OrderId
                       && salesLine.SalesStatus == SalesStatus::Backorder
                       && salesLine.Blocked == NoYes::No
                       && salesLine.DeliveryType != TradeLineDlvType::DropShip
                       &&(salesLine.SalesType == SalesType::Subscription
                       || salesLine.SalesType == SalesType::Sales
                       || salesLine.SalesType == SalesType::ItemReq)
                   exists join inventTransOriginSalesLine
                    where inventTransOriginSalesLine.SalesLineDataAreaId == salesLine.DataAreaId
                       && inventTransOriginSalesLine.SalesLineInventTransId == salesLine.InventTransId
                       exists join inventTrans
                            where inventTrans.InventTransOrigin == inventTransOriginSalesLine.InventTransOrigin
                              && inventTrans.StatusReceipt == StatusReceipt::None
                              && (inventTrans.StatusIssue == StatusIssue::ReservPhysical
                              ||  inventTrans.StatusIssue == StatusIssue::ReservOrdered
                              ||  inventTrans.StatusIssue == StatusIssue::OnOrder)
                            notexists join inventTable
                                where inventTable.ItemId == inventTrans.ItemId
                                  &&  inventTable.ItemType == ItemType::Service;

                Counter numberOfOrderLines = any2int(salesLine.RecId);

                // calculate the possible delivery percentage for the entire order
                Percent deliverPossiblePct = numberOfOrderLinesDeliverable * 100 / minOne(numberOfOrderLines);

                update_recordset releaseOrderPickingTmp
                    setting DeliverPossiblePct = deliverPossiblePct
                    where releaseOrderPickingTmp.OrderId == inventReleaseOrderPickingTmp.OrderId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findQtyRemainToDeliver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantity which remains to deliver.
    /// </summary>
    /// <param name="_salesLine">
    /// The <c>SalesLine</c> record for which the calculation should be performed.
    /// </param>
    /// <param name="_qtyReservedOrdered">
    /// The inventory quantity with status <c>StatusIssue::ReservOrdered</c>.
    /// </param>
    /// <returns>
    /// Inventory quantity which remains to deliver.
    /// </returns>
    protected InventQty findQtyRemainToDeliver(SalesLine _salesLine, InventQty _qtyReservedOrdered)
    {
        InventQty qtyRemainToDeliver;

        if (!qtyRemainToDeliverMap)
        {
            qtyRemainToDeliverMap = new Map(Types::String, Types::Real);
        }

        if (qtyRemainToDeliverMap.exists(_salesLine.InventTransId))
        {
            qtyRemainToDeliver = qtyRemainToDeliverMap.lookup(_salesLine.InventTransId);
        }
        else
        {
            qtyRemainToDeliver = _salesLine.RemainInventPhysical - _qtyReservedOrdered - this.findQtyWMSOrder(_salesLine)- _salesLine.pickedInTotalInventUnit();
            qtyRemainToDeliverMap.insert(_salesLine.InventTransId, qtyRemainToDeliver);
        }

        return qtyRemainToDeliver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findQtyWMSOrder</Name>
				<Source><![CDATA[
    private InventQty findQtyWMSOrder(SalesLine _salesLine)
    {
        InventQty qtyWMSOrder;

        if (!qtyWMSOrderMap)
        {
            qtyWMSOrderMap = new Map(Types::String, Types::Real);
        }

        if (qtyWMSOrderMap.exists(_salesLine.InventTransId))
        {
            qtyWMSOrder = qtyWMSOrderMap.lookup(_salesLine.InventTransId);
        }
        else
        {
            qtyWMSOrder = InventTrans::qtyWMSOrder(InventTransOriginSalesLine::findInventTransOriginId(_salesLine.DataAreaId, _salesLine.InventTransId));

            qtyWMSOrderMap.insert(_salesLine.InventTransId, qtyWMSOrder);
        }

        return -qtyWMSOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>needAllocation</Name>
				<Source><![CDATA[
    protected boolean needAllocation(ItemId _itemId, InventDim _inventDim, Common _salesLine = null)
    {
        SalesLine salesLine = _salesLine as SalesLine;

        if (!super(_itemId, _inventDim)
         || salesLine.InventDeliverNow == salesLine.qtyActivateRemainder())
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        if (#pdsShelfEnabled)
        {
            PdsCustSellableDays pdsCustSellableDays;
            select firstonly RecId from pdsCustSellableDays;
            if (!pdsCustSellableDays.RecId)
            {
                pdsSkipFetchSellableDays = true;
            }
        }
        else
        {
            pdsSkipFetchSellableDays = true;
        }
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNumberOfOrderLinesDeliverableMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the internal structures that contain information about how many order lines can be
    /// delivered.
    /// </summary>
    /// <param name="_salesId">
    /// The order for which information is being adjusted.
    /// </param>
    /// <param name="_allOrdersDeliverable">
    /// A <c>NoYes</c> enumeration value that indicates whether the number of lines is to be incremented.
    /// </param>
    protected void updateNumberOfOrderLinesDeliverableMap(SalesId _salesId, NoYes _allOrdersDeliverable)
    {
        Counter numberOfOrderLinesDeliverable;

        if (numberOfOrderLinesDeliverableMap.exists(_salesId))
        {
            numberOfOrderLinesDeliverable = numberOfOrderLinesDeliverableMap.lookup(_salesId);
        }
        else
        {
            numberOfOrderLinesDeliverable = 0;
            numberOfOrderLinesDeliverableMap.insert(_salesId,numberOfOrderLinesDeliverable);
        }

        if (_allOrdersDeliverable)
        {
            numberOfOrderLinesDeliverableMap.insert(_salesId,numberOfOrderLinesDeliverable+1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the temporary table that is used in the related forms.
    /// </summary>
    /// <param name="_inventReleaseOrderPickingTmp">
    /// The instance of the temporary table in which the proposed and selected order lines are contained.
    /// </param>
    /// <param name="_packedQueryRun">
    /// A container that contains the packed <c>QueryRun</c> object that should be used for the order lines
    /// selection.
    /// </param>
    /// <param name="_deductUnreserved">
    /// A Boolean value that indicates whether the form check box is marked.
    /// </param>
    public static void buildData(
        InventReleaseOrderPickingTmp _inventReleaseOrderPickingTmp,
        container _packedQueryRun,
        boolean _deductUnreserved)
    {
        InventReleaseOrderPickingForm_Sales inventReleaseOrderPickingForm_Sales = InventReleaseOrderPickingForm_Sales::construct();
        inventReleaseOrderPickingForm_Sales.parmSkipProductionOrderExistCalculation(_inventReleaseOrderPickingTmp.SkipProductionOrderExistCalculation);
        inventReleaseOrderPickingForm_Sales.parmSkipTransferOrderExistCalculation(_inventReleaseOrderPickingTmp.SkipTransferOrderExistCalculation);

        select firstonly _inventReleaseOrderPickingTmp; // Ensure that instance has been initialized;

        inventReleaseOrderPickingForm_Sales.parmDeductUnreserved(_deductUnreserved);
        inventReleaseOrderPickingForm_Sales.parmInventReleaseOrderPickingTmp(_inventReleaseOrderPickingTmp);

        inventReleaseOrderPickingForm_Sales.bldInventReleaseOrderPickingTmp(_packedQueryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverActivate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the user is not requesting to release a quantity that exceeds the available quantity.
    /// </summary>
    /// <param name="_salesLine">
    /// The sales order line that is being modified.
    /// </param>
    /// <param name="_activateNow">
    /// The quantity that is being requested by the user.
    /// </param>
    /// <param name="_deductUnreserved">
    /// A Boolean value that indicates whether the form check box is marked.
    /// </param>
    /// <param name="_cwActivateNow">
    ///    The catch weight quantity being requested by the user.
    /// </param>
    /// <returns>
    /// true if the quantity is acceptable; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The <paramref>_cwActivateNow</paramref> parameter has been introduced in the AX2012 R2 release
    /// to support the catch weight feature which requires to track both inventory quantity
    /// and catch weight quantity rather than just inventory quantity.
    /// </remarks>
    public static boolean checkOverActivate(
        SalesLine _salesLine,
        InventQty _activateNow,
        boolean _deductUnreserved,
        PdsCWInventQty  _cwActivateNow)
    {
        return InventReleaseOrderPickingForm::checkOverActivate(_salesLine, _activateNow, _deductUnreserved, _cwActivateNow);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventReleaseOrderPickingForm_Sales construct()
    {
        return new InventReleaseOrderPickingForm_Sales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateClearActivateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears values that are entered in the <c>ActivateNow</c> field for each <c>SalesLine</c> record.
    /// </summary>
    /// <param name="_inventReleaseOrderPickingTmp">
    /// An <c>InventReleaseOrderPickingTmp</c> record.
    /// </param>
    /// <remarks>
    /// This method is used by the <c>SalesReleaseOrderPicking</c> form.
    /// </remarks>
    public static void updateClearActivateNow(InventReleaseOrderPickingTmp _inventReleaseOrderPickingTmp)
    {
        SalesLine salesLine;
        InventReleaseOrderPickingTmp inventReleaseOrderPickingTmp;

        ttsbegin;

        inventReleaseOrderPickingTmp.linkPhysicalTableInstance(_inventReleaseOrderPickingTmp);

        update_recordSet salesLine
            setting InventDeliverNow = 0,
                    SalesDeliverNow = 0,
                    PdsCWInventDeliverNow = 0
               where salesLine.SalesStatus == SalesStatus::Backorder &&
                        (salesLine.InventDeliverNow != 0
                        || salesLine.SalesDeliverNow  != 0
                        || salesLine.PdsCWInventDeliverNow != 0)
                exists join inventReleaseOrderPickingTmp
                where inventReleaseOrderPickingTmp.TransRecId == salesLine.RecId;

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNoManualAllocationNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all <c>SalesLine</c> records in the form where no manual allocation is needed with a
    /// quantity in the <c>DEL_InventDeliverNowCatchWgt</c> field.
    /// </summary>
    /// <param name="_inventReleaseOrderPickingTmp">
    /// An <c>InventReleaseOrderPickingTmp</c> record.
    /// </param>
    public static void updateNoManualAllocationNeeded(InventReleaseOrderPickingTmp _inventReleaseOrderPickingTmp)
    {
        SalesLine salesLine;
        InventTableModule inventTableModule;
        InventQty reservQty;
        InventReleaseOrderPickingTmp inventReleaseOrderPickingTmp;

        PdsCWInventQty cwReservQty;

        ttsbegin;

        inventReleaseOrderPickingTmp.linkPhysicalTableInstance(_inventReleaseOrderPickingTmp);

        while select forupdate salesLine
            where salesLine.SalesStatus == SalesStatus::Backorder
            join UnitId from inventTableModule
                where inventTableModule.ItemId == salesLine.ItemId &&
                      inventTableModule.ModuleType == ModuleInventPurchSales::Invent
            exists join inventReleaseOrderPickingTmp
                where inventReleaseOrderPickingTmp.TransRecId == salesLine.RecId &&
                      inventReleaseOrderPickingTmp.AllOrdersDeliverable == NoYes::Yes
        {
            boolean pdsIsCWItem = PdsGlobal::pdsIsCWItem(salesLine.ItemId);
            if (pdsIsCWItem)
            {
                salesLine.PdsCWInventDeliverNow = salesLine.pdsCWQtyActivateRemainder();
                salesLine.InventDeliverNow = PdsCatchWeight::inventQty(
                                                salesLine.ItemId,
                                                salesLine.PdsCWInventDeliverNow);
            }
            else
            {
                salesLine.InventDeliverNow = salesLine.qtyActivateRemainder();
            }

            salesLine.SalesDeliverNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                              salesLine.InventDimId,
                                                                                                              salesLine.InventDeliverNow,
                                                                                                              inventTableModule.UnitId,
                                                                                                              salesLine.SalesUnit,
                                                                                                              NoYes::Yes);
            salesLine.update();

            InventMovement movement = InventMovement::construct(salesLine);

            if (movement.pdsCWItem())
            {
                cwReservQty = (movement.pdsCWReserveQty()
                                - movement.transIdSum().pdsCWReserved())
                                - salesLine.PdsCWInventDeliverNow
                                - (salesLine.PdsCWQty
                                    - salesLine.pdsCWQtyActivateRemainder());
                reservQty   = PdsCatchWeight::inventQty(
                                                salesLine.ItemId,
                                                cwReservQty);
            }
            else
            {
                cwReservQty = 0;
                reservQty   = (movement.reserveQty() - movement.transIdSum().reserved()) - salesLine.InventDeliverNow - (salesLine.QtyOrdered - salesLine.qtyActivateRemainder());
            }

            InventUpd_Reservation reservation = InventUpd_Reservation::newMovement(
                                                                          movement,
                                                                          reservQty,
                                                                          true,
                                                                          false,
                                                                          false,
                                                                          cwReservQty);
            reservation.updateNow();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReservedPhyscical</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates an update with the quantity reserved physical for all <c>SalesLine</c> records that have
    /// quantity reserved physical.
    /// </summary>
    /// <param name="_inventReleaseOrderPickingTmp">
    /// An <c>InventReleaseOrderPickingTmp</c> record.
    /// </param>
    public static void updateReservedPhyscical(InventReleaseOrderPickingTmp _inventReleaseOrderPickingTmp)
    {
        SalesLine salesLine;
        InventTableModule inventTableModule;
        InventQty inventQty;
        InventReleaseOrderPickingTmp inventReleaseOrderPickingTmp;
        PdsCWInventQty cwQty;

        ttsbegin;

        inventReleaseOrderPickingTmp.linkPhysicalTableInstance(_inventReleaseOrderPickingTmp);

        while select forupdate salesLine
            where salesLine.SalesStatus == SalesStatus::Backorder
            join UnitId from inventTableModule
                where inventTableModule.ItemId == salesLine.ItemId &&
                      inventTableModule.ModuleType == ModuleInventPurchSales::Invent
            exists join inventReleaseOrderPickingTmp
                where inventReleaseOrderPickingTmp.TransRecId == salesLine.RecId
        {
            if (salesLine.InventTransId && salesLine.isStocked())
            {
                inventQty = -InventTransIdSumSingleStatus::qtyReservPhysicalChildTypeNone(
                     InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId));
                cwQty = -InventTransIdSumSingleStatus::pdsCWQtyReservPhysicalChildTypeNone(
                     InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId));
            }
            else
            {
                inventQty = 0;
                cwQty = 0;
            }

            salesLine.InventDeliverNow  = inventQty;
            salesLine.PdsCWInventDeliverNow = cwQty;

            salesLine.SalesDeliverNow   = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                                salesLine.InventDimId,
                                                                                                                salesLine.InventDeliverNow,
                                                                                                                inventTableModule.UnitId,
                                                                                                                salesLine.SalesUnit,
                                                                                                                NoYes::Yes);
            salesLine.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWhereEntireOrderCanBeDelivered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the quantity on all <c>SalesLine</c> records in the form where the delivery percent is
    /// <c>100</c>.
    /// </summary>
    /// <param name="_inventReleaseOrderPickingTmp">
    /// An <c>InventReleaseOrderPickingTmp</c> record.
    /// </param>
    public static void updateWhereEntireOrderCanBeDelivered(InventReleaseOrderPickingTmp _inventReleaseOrderPickingTmp)
    {
        SalesLine salesLine;
        InventTableModule inventTableModule;
        InventQty reservQty;
        InventReleaseOrderPickingTmp inventReleaseOrderPickingTmp;

        PdsCWInventQty cwReservQty;

        ttsbegin;

        inventReleaseOrderPickingTmp.linkPhysicalTableInstance(_inventReleaseOrderPickingTmp);

        while select forupdate salesLine
            where salesLine.SalesStatus == SalesStatus::Backorder
            join UnitId from inventTableModule
                where inventTableModule.ItemId == salesLine.ItemId
                    && inventTableModule.ModuleType == ModuleInventPurchSales::Invent
            exists join inventReleaseOrderPickingTmp
                where inventReleaseOrderPickingTmp.TransRecId == salesLine.RecId
                    && inventReleaseOrderPickingTmp.DeliverPossiblePct == 100
        {
            if (PdsGlobal::pdsIsCWItem(salesLine.ItemId))
            {
                salesLine.PdsCWInventDeliverNow = salesLine.pdsCWQtyActivateRemainder();
                salesLine.InventDeliverNow = PdsCatchWeight::inventQty(
                                                salesLine.ItemId,
                                                salesLine.PdsCWInventDeliverNow);
            }
            else
            {
                salesLine.InventDeliverNow = salesLine.qtyActivateRemainder();
            }

            salesLine.SalesDeliverNow = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(salesLine.ItemId,
                                                                                                              salesLine.InventDimId,
                                                                                                              salesLine.InventDeliverNow,
                                                                                                              inventTableModule.UnitId,
                                                                                                              salesLine.SalesUnit,
                                                                                                              NoYes::Yes);

            salesLine.update();

            InventMovement movement = InventMovement::construct(salesLine);

            if (movement.pdsCWItem())
            {
                cwReservQty = (movement.pdsCWReserveQty()
                                    - movement.transIdSum().pdsCWReserved())
                                - salesLine.PdsCWInventDeliverNow
                                - (salesLine.PdsCWQty
                                    - salesLine.pdsCWQtyActivateRemainder());
                reservQty   = PdsCatchWeight::inventQty(salesLine.ItemId, cwReservQty);
            }
            else
            {
                cwReservQty = 0;
                reservQty   = (movement.reserveQty() - movement.transIdSum().reserved()) - salesLine.InventDeliverNow - (salesLine.QtyOrdered - salesLine.qtyActivateRemainder());
            }

            InventUpd_Reservation reservation = InventUpd_Reservation::newMovement(
                                                                          movement,
                                                                          reservQty,
                                                                          true,
                                                                          false,
                                                                          false,
                                                                          cwReservQty);
            reservation.updateNow();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>