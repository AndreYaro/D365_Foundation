<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedBidIFXAuditHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.XppServices.Instrumentation;
using Microsoft.Dynamics.ApplicationPlatform.Environment;
using Microsoft.Dynamics.AX.Framework.SealedBid.IFXAuditLogEncryption;

// TODO: After platform https://msdyneng.visualstudio.com/FinOps/_workitems/edit/553788 has been resolved delete below two lines
using XppLogger = Microsoft.Dynamics.ServiceFramework.Instrumentation.Xpp;
using Microsoft.Extensions.Logging;

[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
internal final class PurchRFQSealedBidIFXAuditHandler
{
    private static PurchRFQSealedBidInstrumentationLogger logger = PurchRFQSealedBidInstrumentationLogger::createLogger(classStr(PurchRFQSealedBidIFXAuditHandler));

    // IFXAudit. We use a fixed GUID as caller ID for all sealed bid related IFXAudit logs
    private static const str CallerIdentity = '3EDFB786-4066-4423-B85E-D71C906A5C4B';
    private static const str CallerIdentityType = IfxAuditHelper::CallerIdentityType_ObjectID;

    private static const str Activity = staticMethodStr(PurchRFQSealedBidIFXAuditHandler, logEncryptionAuditLogToIFXAudit);
    private static const str AuditCategory_SealedBid = IfxAuditHelper::AuditCategory_Other;
    private static const str Category = classStr(PurchRFQSealedBidIFXAuditHandler);

    private static const str OperationResult = IfxAuditHelper::OperationResult_Success;

    private static const str RequestId = '';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>logEncryptionAuditLogToIFXAudit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs the encryption audit log to Azure IFXAudit storage
    /// </summary>
    /// <param name = "_rfqReplyEncryptionAuditLog">The <c>PurchRFQReplyEncryptionAuditLog</c> table buffer.</param>
    [Hookable(false)]
    public static final void logEncryptionAuditLogToIFXAudit(PurchRFQReplyEncryptionAuditLog _rfqReplyEncryptionAuditLog)
    {
        if (!_rfqReplyEncryptionAuditLog.RecId)
        {
            error(Error::missingRecord(tableStr(PurchRFQReplyEncryptionAuditLog)));
        }

        try
        {
            using (SysInstrumentationActivityContext activityContext = logger.encryptionDecryptionActivities().logIFXAudit(_rfqReplyEncryptionAuditLog.RecId, _rfqReplyEncryptionAuditLog.TableId))
            {
                // initialize values necessary for audit
                str operationName = strFmt(IfxAuditHelper::OperationName_ActivityFormatStr, Category,  Activity);
                Map activityPropertyMap = PurchRFQSealedBidIFXAuditHandler::constructActivityPropertyMap(_rfqReplyEncryptionAuditLog);
                str requestDescription = IfxAuditHelper::activityPropertyMap2RequestDescription(activityPropertyMap);
        
                // TODO: After platform https://msdyneng.visualstudio.com/FinOps/_workitems/edit/553788 has been resolved delete below workaround
                ILogger xLogger = IfxAuditHelper::getLogger(Category);

                if (!xLogger)
                {
                    throw Error("@SCM:CanNotCreateLogger");
                }

                XppLogger.ActivityType activityType = new XppLogger.ActivityType(Activity);

                if (activityPropertyMap != null && activityPropertyMap.elements() > 0)
                {
                    MapEnumerator enumerator = activityPropertyMap.getEnumerator();
                    while (enumerator.MoveNext())
                    {
                        str propertyName = enumerator.currentKey();
                        str propertyValue = enumerator.currentValue();

                        activityType.AddCustomProperty(propertyName, propertyValue);
                    }
                }

                XppLogger.ActivityContext ifxAuditActivityContext = new XppLogger.ActivityContext(xLogger, activityType);
                // END work arround

                // Add to the application IFX Audit log
                IfxAuditHelper::logApplicationAuditEvent(AuditCategory_SealedBid, operationName, OperationResult, CallerIdentity, CallerIdentityType, RequestId, requestDescription);
            }
        }
        catch
        {
            PurchRFQSealedBidManager::throwSealedBidError(logger);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncryptionCertThumbprint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get encryption certificate thumbprint.
    /// </summary>
    /// <returns>The encryption certificate thumbprint.</returns>
    [Hookable(false)]
    internal final static str getEncryptionCertThumbprint()
    {
        str thumbprint = '';
        try
        {
            thumbprint = IFXAuditLogEncryptionUtility::Instance.GetEncryptionCertificateThumbprint();
        }
        catch
        {
            PurchRFQSealedBidManager::throwSealedBidError(logger);
        }

        return thumbprint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructActivityPropertyMap</Name>
				<Source><![CDATA[
    private static final Map constructActivityPropertyMap(PurchRFQReplyEncryptionAuditLog _rfqReplyEncryptionAuditLog)
    {
        Map activityPropertyMap = new Map(Types::String, Types::String);
        
        activityPropertyMap.insert("EnvironmentID",  SysHttpCommunicationEnvironmentSettings::getEnvironmentId());
        activityPropertyMap.insert("TenantID", EnvironmentFactory::GetApplicationEnvironment().Aad.TenantDomainGUID);
        activityPropertyMap.insert("DataAreaID", _rfqReplyEncryptionAuditLog.DataAreaId);
        activityPropertyMap.insert("Partition", int642Str(_rfqReplyEncryptionAuditLog.Partition));
        activityPropertyMap.insert("Action", enum2Str(_rfqReplyEncryptionAuditLog.Action));
        activityPropertyMap.insert("EncryptionActivity", enum2Str(_rfqReplyEncryptionAuditLog.EncryptionActivity));
        activityPropertyMap.insert("CreatedDateTime", datetime2Str(_rfqReplyEncryptionAuditLog.CreatedDateTime));
        activityPropertyMap.insert("PurchRFQReplyTableRecId", int642Str(_rfqReplyEncryptionAuditLog.PurchRFQReplyTable));

        str plainStringSid;
        unchecked(Uncheck::TableSecurityPermission)
        {
            plainStringSid = _rfqReplyEncryptionAuditLog.UserSid;
        }

        str plainStringUserObjectId = guid2Str(_rfqReplyEncryptionAuditLog.UserObjectId);

        activityPropertyMap.insert("UserSidId", IFXAuditLogEncryptionUtility::Instance.Encrypt(plainStringSid));
        activityPropertyMap.insert("UserObjectId", IFXAuditLogEncryptionUtility::Instance.Encrypt(plainStringUserObjectId));
        activityPropertyMap.insert("EncryptionCertThumbprint", PurchRFQSealedBidIFXAuditHandler::getEncryptionCertThumbprint());

        return activityPropertyMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>