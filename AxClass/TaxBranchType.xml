<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxBranchType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The class <c>TaxBranchType</c> is uesed to check and get the tax branch.
/// </summary>
class TaxBranchType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkAccountStrucForLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the account structure for ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    ///    The record ID of the <c>DimensionAttributeValueCombination</c> record to find.
    /// </param>
    /// <returns>
    ///    True if checked successful; otherwise, false.
    /// </returns>
    public static boolean checkAccountStrucForLedgerDimension(DimensionDefault _ledgerDimension)
    {
        boolean                             ret = true;
        DimensionAttribute                  dimensionAttribute;
        DimensionHierarchyLevelView         dimensionHierarchyLevelView;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;

        select RecId from dimensionAttributeValueCombination
            where dimensionAttributeValueCombination.RecId == _ledgerDimension
            exists join RecId from dimensionHierarchyLevelView
                where dimensionHierarchyLevelView.HierarchyRecId == dimensionAttributeValueCombination.AccountStructure
            exists join RecId from dimensionAttribute
                where dimensionHierarchyLevelView.DimensionAttribute == dimensionAttribute.RecId
                    && dimensionAttribute.BackingEntityType == tableNum(DimAttributeTaxBranch);

        if (!dimensionAttributeValueCombination.RecId)
        {
            // A tax branch segment must be attached to all active account structures.
            ret = checkFailed("@SYS4082519");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkAllLocationIdFilledIn</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether all locationId are filled in.
    /// </summary>
    /// <returns>
    ///     True if check successful, otherwise false.
    /// </returns>
    public static boolean checkAllLocationIdFilledIn()
    {
        TaxBranch taxBranch;
        boolean ret = true;

        taxBranch = TaxBranch::findByLocationId();

        if (taxBranch)
        {
            // Enter an address for the tax branch.
            ret = checkFailed("@SYS4082520");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHeadOfficeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether the head office has been selected.
    /// </summary>
    /// <returns>
    ///     True if checked successful, otherwise false.
    /// </returns>
    public static boolean checkHeadOfficeSelected()
    {
        boolean         ret = true;

        if (TaxBranch::exist() && !TaxBranch::getHeadOffice())
        {
            // Select a Tax branch as the head office.
            ret = checkFailed("@SYS4082521");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxBranchByDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the tax branch by default dimension.
    /// </summary>
    /// <param name="_defaultDimension">
    ///    The field DimensionAttributeValueSet in <c>DimensionAttributeValueSetItemView</c> view to find.
    /// </param>
    /// <returns>
    ///    True if checked successful, otherwise false.
    /// </returns>
    public static boolean checkTaxBranchByDefaultDimension(DimensionDefault _defaultDimension)
    {
        boolean ret = true;

        if (!_defaultDimension
            || !TaxBranchType::getTaxBranchRecIdByDefaultDimension(_defaultDimension))
        {
            // Enter the tax branch dimension.
            ret = checkFailed("@SYS4082517");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxBranchByLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the tax branch by ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    ///    The field ValueCombinationRecId in <c>DimensionAttributeLevelValueView</c> view to find.
    /// </param>
    /// <returns>
    ///    True if checked successful, otherwise false.
    /// </returns>
    public static boolean checkTaxBranchByLedgerDimension(DimensionDefault _ledgerDimension)
    {
        boolean ret = true;

        if (!_ledgerDimension
            || !TaxBranchType::getTaxBranchRecIdByLedgerDimension(_ledgerDimension))
        {
            // Enter the tax branch dimension.
            ret = checkFailed("@SYS4082517");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmTaxBranchChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Confirms whether the tax branch changed.
    /// </summary>
    /// <param name="_origTaxBranch">
    ///    The original tax branch code.
    /// </param>
    /// <param name="_newTaxBranch">
    ///    The new tax branch code.
    /// </param>
    /// <returns>
    ///    True if changed, otherwise false.
    /// </returns>
    public static boolean confirmTaxBranchChanged(
        TaxBranchCode    _origTaxBranch,
        TaxBranchCode    _newTaxBranch)
    {
        boolean ret = true;

        if (_origTaxBranch != _newTaxBranch)
        {
            // The tax branch dimension will be changed from '%1' to '%2'.
            if (Box::okCancel(strFmt("@SYS4082522", _origTaxBranch, _newTaxBranch), DialogButton::Ok) == DialogButton::Cancel)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionFromSite</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the default dimension from site.
    /// </summary>
    /// <param name="_dimension">
    ///    The field DimensionAttributeValueSet in <c>DimAttrValueSetItem</c> record to find.
    /// </param>
    /// <param name="_taxBranchRefRecId">
    ///    The record ID for <c>TaxBranch</c> record to find.
    /// </param>
    /// <returns>
    ///    Returns the default dimension.
    /// </returns>
    public static DimensionDefault getDefaultDimensionFromSite(DimensionDefault _dimension, TaxBranchRefRecId _taxBranchRefRecId)
    {
        DimensionAttribute                  dimAttr;
        DimensionAttributeValue             dimAttrValue;
        DimensionAttributeValueSetStorage   dimensionAttributeValueSetStorage;
        DimensionAttributeValueSetItem      dimAttrValueSetItem;
        TaxBranchCode                       taxBranchCode;

        select firstonly dimAttr
            where dimAttr.BackingEntityType == tableNum(DimAttributeTaxBranch);

        taxBranchCode = TaxBranch::find(_taxBranchRefRecId).Code;
        dimAttrValue = DimensionAttributeValue::findByDimensionAttributeAndValueNoError(dimAttr, taxBranchCode, false, true);
        dimensionAttributeValueSetStorage = DimensionAttributeValueSetStorage::find(_dimension);
        if (taxBranchCode)
        {
            dimensionAttributeValueSetStorage.addItemDisplayValue(dimensionAttributeValueSetStorage.addItem(dimAttrValue), taxBranchCode);
        }
        else
        {
            select firstonly dimAttrValue
                where dimAttrValue.DimensionAttribute   == dimAttr.RecId
                    && dimAttrValue.IsDeleted           == NoYes::No
                exists join dimAttrValueSetItem
                    where dimAttrValueSetItem.DimensionAttributeValue       == dimAttrValue.RecId
                        && dimAttrValueSetItem.DimensionAttributeValueSet   == _dimension;

            dimensionAttributeValueSetStorage.removeDimensionAttributeValue(dimAttrValue.RecId);
        }

        return dimensionAttributeValueSetStorage.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBranchRecIdByDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the table <c>TaxBranch</c> recId depending on default dimension.
    /// </summary>
    /// <param name="_defaultDimension">
    ///    The field DimensionAttributeValueSet in <c>DimensionAttributeValueSetItemView</c> view to find.
    /// </param>
    /// <returns>
    ///    Returns the reference recId for table <c>TaxBranch</c>.
    /// </returns>
    public static TaxBranchRefRecId getTaxBranchRecIdByDefaultDimension(DimensionDefault _defaultDimension)
    {
        DimensionAttributeValueSetItemView  dimensionAttributeValueSetItemView;
        DimensionAttribute                  dimensionAttribute;
        TableId                             taxBranchTableId;

        taxBranchTableId = tableNum(DimAttributeTaxBranch);

        select firstonly EntityInstance from dimensionAttributeValueSetItemView
            join RecId from dimensionAttribute
                where dimensionAttribute.RecId == dimensionAttributeValueSetItemView.DimensionAttribute
                    && dimensionAttribute.BackingEntityType == taxBranchTableId
                    && dimensionAttributeValueSetItemView.DimensionAttributeValueSet == _defaultDimension;

        return TaxBranch::find(dimensionAttributeValueSetItemView.EntityInstance).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxBranchRecIdByLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the table <c>TaxBranch</c> recId depending on ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    ///    The field ValueCombinationRecId in <c>DimensionAttributeLevelValueView</c> view to find.
    /// </param>
    /// <returns>
    ///    Returns the reference recId for table <c>TaxBranch</c>.
    /// </returns>
    public static TaxBranchRefRecId getTaxBranchRecIdByLedgerDimension(DimensionDefault _ledgerDimension)
    {
        DimensionAttributeLevelValueView        dimensionAttributeLevelValueView;
        DimensionAttribute                      dimensionAttribute;
        TableId                                 taxBranchTableId;

        taxBranchTableId = tableNum(DimAttributeTaxBranch);

        select firstonly EntityInstance from dimensionAttributeLevelValueView
            join RecId from dimensionAttribute
                where dimensionAttribute.RecId == dimensionAttributeLevelValueView.DimensionAttribute
                    && dimensionAttribute.BackingEntityType == taxBranchTableId
                    && dimensionAttributeLevelValueView.ValueCombinationRecId == _ledgerDimension;

        return TaxBranch::find(dimensionAttributeLevelValueView.EntityInstance).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTBDisplayValueByDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the display value depending on default dimension.
    /// </summary>
    /// <param name="_defaultDimension">
    ///    The field DimensionAttributeValueSet in <c>DimensionAttributeValueSetItemView</c> view to find.
    /// </param>
    /// <returns>
    ///    Returns tax branch display value.
    /// </returns>
    public static DimensionValue getTBDisplayValueByDefaultDimension(DimensionDefault _defaultDimension)
    {
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeValueSetItemView  dimensionAttributeValueSetItemView;

        select firstonly DisplayValue from dimensionAttributeValueSetItemView
            where dimensionAttributeValueSetItemView.DimensionAttributeValueSet == _defaultDimension
        exists join dimensionAttribute
            where dimensionAttribute.BackingEntityType == tableNum(DimAttributeTaxBranch)
                && dimensionAttributeValueSetItemView.DimensionAttribute == dimensionAttribute.RecId;

        return dimensionAttributeValueSetItemView.DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTBDisplayValueByLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the display value depending on ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    ///    The field ValueCombinationRecId in <c>DimensionAttributeLevelValueView</c> view to find.
    /// </param>
    /// <returns>
    ///    Returns tax branch display value.
    /// </returns>
    public static DimensionValue getTBDisplayValueByLedgerDimension(DimensionDefault _ledgerDimension)
    {
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeLevelValueAllView dimensionAttributeLevelValueAllView;

        select firstonly DisplayValue from dimensionAttributeLevelValueAllView
            where dimensionAttributeLevelValueAllView.ValueCombinationRecId == _ledgerDimension
        exists join dimensionAttribute
            where dimensionAttribute.BackingEntityType == tableNum(DimAttributeTaxBranch)
                && dimensionAttributeLevelValueAllView.DimensionAttribute == dimensionAttribute.RecId;

        return dimensionAttributeLevelValueAllView.DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxBranchDimAttrDuplicate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the tax branch is duplicate.
    /// </summary>
    /// <param name="_recId">
    /// The record Id of table <c>DimensionAttribute</c>.
    /// </param>
    /// <returns>
    /// True if the tax branch is duplicate, otherwise false.
    /// </returns>
    public static boolean isTaxBranchDimAttrDuplicate(DimensionAttributeRecId _recId)
    {
        DimensionAttribute  dimAttr;
        boolean             ret;
        TableId             taxBranchTableId;

        taxBranchTableId = tableNum(DimAttributeTaxBranch);

        select firstonly RecId from dimAttr
            where dimAttr.BackingEntityType == taxBranchTableId
                && dimAttr.RecId != _recId;

        if (dimAttr.RecId)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxBranchDimCreatedAndBoundWithSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the tax branch is created and bounded with site.
    /// </summary>
    /// <returns>
    /// True if the tax branch is created and bounded with site, otherwise false.
    /// </returns>
    public static boolean isTaxBranchDimCreatedAndBoundWithSite()
    {
        InventParameters        inventParameters;
        DimensionAttribute      dimensionAttribute;
        boolean                 ret = true;

        inventParameters = InventParameters::find();

        select firstonly RecId from dimensionAttribute
            where dimensionAttribute.BackingEntityType == tableNum(DimAttributeTaxBranch);

        if (dimensionAttribute.RecId &&
            (inventParameters.isMultiSiteDimensionLinkInactive()
            || inventParameters.SiteDimensionAttribute != dimensionAttribute.RecId))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unMarkPreviousHeadOffice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the previous head office to false.
    /// </summary>
    public static void unMarkPreviousHeadOffice()
    {
        TaxBranch taxBranch;

        ttsbegin;
        update_recordset taxBranch
            setting HeadOffice = NoYes::No
            where taxBranch.HeadOffice == NoYes::Yes;
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>