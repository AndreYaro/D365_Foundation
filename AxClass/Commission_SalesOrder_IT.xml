<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Commission_SalesOrder_IT</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class manages the commissions preview.
/// </summary>
public class Commission_SalesOrder_IT extends Commission
{
    public TmpCommissionTrans_IT tmpCommissionTrans;
    public SalesTable salesTable;
    public SalesLine salesLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCommissionAmount</Name>
				<Source><![CDATA[
    public void addCommissionAmount(AmountCur commissionAmountCur)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>commissionLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount commissionLedgerDimension()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commissionOffsetLedgerDimension</Name>
				<Source><![CDATA[
    protected LedgerDimensionDefaultAccount commissionOffsetLedgerDimension()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        commissionTrans.initFromSalesLine_IT(salesLine);

        endFactor = ((100 - salesTable.discPercent) / 100);
        itemGroup = InventTable::find(salesLine.itemId).commissionGroupId;
        custGroup = salesTable.commissionGroup;

        orderAccount = salesTable.CustAccount;
        languageId = salesTable.languageId;
        triangulation = salesTable.euroTriangulation();
        exchRate = salesTable.exchRate();
        exchrateSecondary = salesTable.exchRateSecondary();

        salesGroup = salesLine.salesGroup;
        itemId_IT = salesLine.itemId;
        qty = salesLine.SalesQty;
        salesPrice = salesLine.salesPrice;
        priceUnit = salesLine.priceUnit;
        markup = salesLine.salesMarkup;
        lineAmount = salesLine.lineAmount;
        costValue = (salesLine.SalesStatus!=SalesStatus::Invoiced)?salesLine.calcCostAmount():-inventTrans::findTransId(salesLine.InventTransId).costValue();
        endDisc = InventTableModule::find(salesLine.ItemId, ModuleInventPurchSales::Sales).EndDisc;

        commissionTrans.commissionType_IT = salesTable.CommissionType_IT;

        custTableGroupId_IT = salesTable.custTable_InvoiceAccount().CustGroup;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCommissionTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts commission transactions.
    /// </summary>
    public void insertCommissionTrans()
    {
        tmpCommissionTrans.AmountCur = commissionTrans.AmountCur;
        tmpCommissionTrans.AmountMST = commissionTrans.AmountMST;
        tmpCommissionTrans.CurrencyCode = commissionTrans.CurrencyCode;
        tmpCommissionTrans.ItemId = commissionTrans.ItemId;
        tmpCommissionTrans.Person = commissionTrans.Person;
        tmpCommissionTrans.CommissionType = commissionTrans.CommissionType_IT;
        tmpCommissionTrans.InvoiceDate = commissionTrans.InvoiceDate;
        tmpCommissionTrans.TransRefId = commissionTrans.InvoiceId;

        tmpCommissionTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCommissionCalculated</Name>
				<Source><![CDATA[
    public CommissCalc isCommissionCalculated()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceJour</Name>
				<Source><![CDATA[
    public CustVendInvoiceJour parmInvoiceJour(CustVendInvoiceJour _custVendInvoiceJour = null)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceTrans</Name>
				<Source><![CDATA[
    public CustVendInvoiceTrans parmInvoiceTrans(CustVendInvoiceTrans _custVendInvoiceTrans = null)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    public SalesLine parmSalesLine(salesLine _salesLine = salesLine)
    {
        salesLine =_salesLine;
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable(salesTable _salesTable = salesTable)
    {
        salesTable =_salesTable;
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpCommissionTrans</Name>
				<Source><![CDATA[
    public TmpCommissionTrans_IT parmTmpCommissionTrans(TmpCommissionTrans_IT _tmpCommissionTrans = tmpCommissionTrans)
    {
        tmpCommissionTrans =_tmpCommissionTrans;
        return tmpCommissionTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCommissionCalc</Name>
				<Source><![CDATA[
    public void updateCommissionCalc()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static Commission construct()
    {
        return new Commission_SalesOrder_IT();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCommission</Name>
				<Source><![CDATA[
    public static Commission newCommission(
        SalesTable _salesTable,
        SalesLine _salesLine,
        TmpCommissionTrans_IT _tmpCommissionTrans)
    {
        Commission_SalesOrder_IT commission_SalesOrder ;

        commission_SalesOrder = Commission_SalesOrder_IT::construct();
        commission_SalesOrder.parmSalesTable(_salesTable);
        commission_SalesOrder.parmSalesLine(_salesLine);
        commission_SalesOrder.parmTmpCommissionTrans(_tmpCommissionTrans);
        commission_SalesOrder.init();
        return commission_SalesOrder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>