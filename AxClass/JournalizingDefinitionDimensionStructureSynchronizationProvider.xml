<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionDimensionStructureSynchronizationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>JournalizingDefinitionDimensionStructureSynchronizationProvider</c> is the dimension structure synchronization provider for journalizing definition master data.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.DimensionStructureISynchronizationMasterDataProvider))]
[DimensionStructureSynchronizationProviderCaptionAttribute("@Subledger:JournalizingDefinitionDimensionStructureSynchronizationProviderCaption")]
[DimensionStructureSynchronizationProviderInterface(true)]
public class JournalizingDefinitionDimensionStructureSynchronizationProvider implements DimensionStructureISynchronizationMasterDataProvider, DimensionStructureISynchronizationMasterDataProviderV2
{
    private const str InstrumentationNamespace = classStr(JournalizingDefinitionDimensionStructureSynchronizationProvider);
    private SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);
    private const int MaxRetryCount = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfStuctureRemovalFromLedgerIsPrevented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the account structure is prevented from being removed from the ledger.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The account structure being removed.
    /// </param>
    /// <param name="_ledger">
    /// The Ledger from which the structure is being removed.
    /// </param>
    /// <param name = "_ret">
    /// The event handler result.
    /// </param>
    /// <returns>
    /// true if the account structure cannot be removed; otherwise, false.
    /// </returns>
    [SubscribesTo(classStr(LedgerStructureDelegates), delegateStr(LedgerStructureDelegates, checkIfStuctureRemovalFromLedgerIsPrevented))]
    public static void checkIfStuctureRemovalFromLedgerIsPrevented(DimensionHierarchy _dimensionHierarchy, Ledger _ledger, EventHandlerResult _ret)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(JournalizingDefinitionDimensionStructureSynchronizationProvider),
            staticMethodStr(JournalizingDefinitionDimensionStructureSynchronizationProvider, checkIfStuctureRemovalFromLedgerIsPrevented));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(JournalizingDefinitionDimensionStructureSynchronizationProvider));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            activityContext.addCustomProperty('MethodName', 'checkIfStuctureRemovalFromLedgerIsPrevented');

            JournalizingDefinitionMatch journalizingDefinitionMatch;
            JournalizingDefinitionMatchDetail journalizingDefinitionMatchDetail;
            DimensionAttributeValueCombination dimAttrValueCombination;
            DimensionAttributeValueGroupCombination dimAttrValueGroupCombination;
            DimensionAttributeValueGroup dimAttrValueGroup;

            CompanyInfo companyInfo = CompanyInfo::find(_ledger.PrimaryForLegalEntity);

            unchecked(Uncheck::XDS)
            {
                // Locate any LedgerDimension from unposted journalizing definitions
                changecompany(companyInfo.DataArea)
                {
                    select firstonly RecId from journalizingDefinitionMatch
                exists join LedgerDimensionType from dimAttrValueCombination
                    where dimAttrValueCombination.RecId == journalizingDefinitionMatch.LedgerDimension
                        && (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account
                        || dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                exists join dimAttrValueGroupCombination
                    where dimAttrValueGroupCombination.DimensionAttributeValueCombination == dimAttrValueCombination.RecId
                exists join dimAttrValueGroup
                    where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                        && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId;

                    select firstonly RecId from journalizingDefinitionMatchDetail
                join LedgerDimensionType from dimAttrValueCombination
                    where dimAttrValueCombination.RecId == journalizingDefinitionMatchDetail.LedgerDimension
                        &&  dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account         // NOTE: Budget doesn't come into play here.
                exists join dimAttrValueGroupCombination
                    where dimAttrValueGroupCombination.DimensionAttributeValueCombination == dimAttrValueCombination.RecId
                exists join dimAttrValueGroup
                    where dimAttrValueGroup.RecId == dimAttrValueGroupCombination.DimensionAttributeValueGroup
                        && dimAttrValueGroup.DimensionHierarchy == _dimensionHierarchy.RecId;
                }
            }

            if (journalizingDefinitionMatch.RecId || journalizingDefinitionMatchDetail.RecId)
            {
                // The account structure is referenced by a journalizing definition
                checkFailed(strfmt("@Subledger:JournalizingDefinitionLedgerDimensionWithStructureInUseForLedger", _dimensionHierarchy.Name, _ledger.Name));
                _ret.booleanResult(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronize</Name>
				<Source><![CDATA[
    public void insertDimensionSynchronize(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize                    dimSynchronize;
            DimensionSynchronize                    dimSynchronizeNotExists;
            DimensionSynchronizeLedger              dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeNotExists.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            JournalizingDefinitionMatch             journalizingDefinitionMatch;
            JournalizingDefinitionMatchDetail       journalizingDefinitionMatchDetail;
            DimensionAttributeValueCombination      dimAttrValueCombination;
            DataArea                                company;
            DataAreaId                              companyId;

            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(JournalizingDefinitionDimensionStructureSynchronizationProvider, insertDimensionSynchronize));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked(Uncheck::XDS)
                {
                    // Extract LedgerDimension's from posting definition records

                    while select Id from company
                    where company.IsVirtual == NoYes::No
                    {
                        // Init includeCompany
                        companyId = company.Id;

                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId;

                        if (dimSynchronizeLedger.RecId)
                        {
                            changecompany(companyId)
                            {
                                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                                journalizingDefinitionMatch.clear();
                                journalizingDefinitionMatchDetail.clear();

                                // LedgerDimension (JournalizingDefinitionMatch)
                                insert_recordset dimSynchronize (OriginalLedgerDimension, LedgerDimensionType, DataArea)
                                select LedgerDimension from journalizingDefinitionMatch
                                        group by journalizingDefinitionMatch.LedgerDimension, dimAttrValueCombination.LedgerDimensionType, dimSynchronizeLedger.DataArea
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == journalizingDefinitionMatch.LedgerDimension &&
                                            (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                            dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                    join DataArea from dimSynchronizeLedger
                                        where dimSynchronizeLedger.DataArea == companyId
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == journalizingDefinitionMatch.LedgerDimension;

                                activityContext.addCustomProperty('MethodName', 'insertDimensionSynchronize');
                                activityContext.addCustomProperty('WereRecordsInserted_JournalizingDefinitionMatch', int2str(dimSynchronize.rowCount() > 0));

                                // LedgerDimension (JournalizingDefinitionMatchDetail)
                                insert_recordset dimSynchronize (OriginalLedgerDimension, LedgerDimensionType, DataArea)
                                select LedgerDimension from journalizingDefinitionMatchDetail
                                        group by journalizingDefinitionMatchDetail.LedgerDimension, dimAttrValueCombination.LedgerDimensionType, dimSynchronizeLedger.DataArea
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == journalizingDefinitionMatchDetail.LedgerDimension &&
                                            dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account         // NOTE: Budget doesn't come into play here.
                                join DataArea from dimSynchronizeLedger
                                        where dimSynchronizeLedger.DataArea == companyId
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == journalizingDefinitionMatchDetail.LedgerDimension;

                                activityContext.addCustomProperty('WereRecordsInserted_JournalizingDefinitionMatchDetail', int2str(dimSynchronize.rowCount() > 0));
                            }
                        }
                    }

                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChanges</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChanges(DimensionSynchronize _dimensionSynchronize)
    {
        // Synchronizing for posting definitions requires special logic (begin by retrieving the original ledger dimension)
        LedgerDimensionBase ledgerDimension = _dimensionSynchronize.OriginalLedgerDimension;
        DimensionStorage dimStorage = DimensionValidation::syncStructureChanges(ledgerDimension, true, true);
        DimensionAttributeValueCombination dimAttrValueCombinationOriginal = DimensionAttributeValueCombination::find(ledgerDimension);

        if (dimStorage)
        {
            ledgerDimension = dimStorage.save();

            if (ledgerDimension)
            {
                // Check if the account structure was updated
                DimensionAttributeValueCombination dimAttrValueCombinationUpdated = DimensionAttributeValueCombination::find(ledgerDimension);

                if (dimAttrValueCombinationOriginal.AccountStructure != dimAttrValueCombinationUpdated.AccountStructure)
                {
                    _dimensionSynchronize.UpdatedAccountStructure = dimAttrValueCombinationUpdated.AccountStructure;
                }
            }
        }
        else
        {
            ledgerDimension = 0;
        }

        // Retry without checking the account structure against the current hierarchy disambiguation
        if ((ledgerDimension == 0) && (dimAttrValueCombinationOriginal.MainAccount == 0))
        {
            dimStorage = DimensionValidation::syncStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true, false);

            if (dimStorage)
            {
                ledgerDimension = dimStorage.save();
            }
        }

        // Revert to original LedgerDimension if sync failed
        if (!ledgerDimension)
        {
            ledgerDimension = _dimensionSynchronize.OriginalLedgerDimension;
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferences</Name>
				<Source><![CDATA[
    public void updateProviderReferences(DimensionStructureISynchronizationRequest _synchronizationRequest)
    {
        DimensionStructureSynchronizationRequest synchronizationRequest = _synchronizationRequest as DimensionStructureSynchronizationRequest;

        if (synchronizationRequest)
        {
            DimensionSynchronize                    dimSynchronize;
            DimensionSynchronizeLedger              dimSynchronizeLedger;

            dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
            dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

            JournalizingDefinitionMatch             journalizingDefinitionMatch;
            JournalizingDefinitionMatch             journalizingDefinitionMatchExisting;
            JournalizingDefinitionMatchDetail       journalizingDefinitionMatchDetail;
            JournalizingDefinitionMatchDetail       journalizingDefinitionMatchDetailExisting;
            DimensionAttributeValueCombination      dimAttrValueCombination;
            DataArea                                company;
            RecId                                   dimHierarchyId;
            int rowsRead, rowsUpdated;
            SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(JournalizingDefinitionDimensionStructureSynchronizationProvider, updateProviderReferences));

            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                unchecked(Uncheck::XDS)
                {
                    // Update posting definition records with the new ledger dimension values   (update methods exists so don't use update_recordset)

                    while select Id from company
                    where company.IsVirtual == NoYes::No
                    exists join dimSynchronizeLedger
                        where dimSynchronizeLedger.DataArea == company.Id
                    {
                        changecompany(company.Id)
                        {
                            journalizingDefinitionMatch.clear();
                            journalizingDefinitionMatchDetail.clear();

                            rowsRead = 0;
                            rowsUpdated = 0;

                            // LedgerDimension (JournalizingDefinitionMatch)
                            while select forupdate journalizingDefinitionMatch
                            join UpdatedLedgerDimension, UpdatedAccountStructure from dimSynchronize
                                where dimSynchronize.OriginalLedgerDimension == journalizingDefinitionMatch.LedgerDimension &&
                                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                            {
                                // Check for existing record
                                dimHierarchyId = dimSynchronize.UpdatedAccountStructure ? dimSynchronize.UpdatedAccountStructure : journalizingDefinitionMatch.DimensionHierarchy;

                                select firstonly RecId from journalizingDefinitionMatchExisting
                                where journalizingDefinitionMatchExisting.LedgerDimension == dimSynchronize.UpdatedLedgerDimension &&
                                    journalizingDefinitionMatchExisting.JournalizingDefinitionVersion == journalizingDefinitionMatch.JournalizingDefinitionVersion &&
                                    journalizingDefinitionMatchExisting.DimensionHierarchy == dimHierarchyId;

                                if (journalizingDefinitionMatchExisting.RecId == 0)
                                {
                                    journalizingDefinitionMatch.LedgerDimension = dimSynchronize.UpdatedLedgerDimension;
                                    journalizingDefinitionMatch.DimensionHierarchy = dimHierarchyId;

                                    journalizingDefinitionMatch.doUpdate();
                                    rowsUpdated++;
                                }
                                rowsRead++;
                            }
                            activityContext.addCustomProperty('MethodName', 'updateProviderReferences');
                            activityContext.addCustomProperty('WereRowsRead_JournalizingDefinitionMatch', int2str(rowsRead > 0));
                            activityContext.addCustomProperty('WereRecordsUpdated_JournalizingDefinitionMatch', int2str(rowsUpdated > 0));

                            Info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", rowsUpdated, tableId2PName(journalizingDefinitionMatch.TableId), company.Id));

                            rowsRead = 0;
                            rowsUpdated = 0;

                            // LedgerDimension (JournalizingDefinitionMatchDetail)
                            while select forupdate journalizingDefinitionMatchDetail
                            join UpdatedLedgerDimension, UpdatedAccountStructure from dimSynchronize
                                where dimSynchronize.OriginalLedgerDimension == journalizingDefinitionMatchDetail.LedgerDimension &&
                                        dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                            {
                                // Check for existing record
                                select firstonly RecId from journalizingDefinitionMatchDetailExisting
                                where journalizingDefinitionMatchDetailExisting.LedgerDimension == dimSynchronize.UpdatedLedgerDimension &&
                                    journalizingDefinitionMatchDetailExisting.JournalizingDefinitionMatch == journalizingDefinitionMatchDetail.JournalizingDefinitionMatch;

                                if (journalizingDefinitionMatchDetailExisting.RecId == 0)
                                {
                                    journalizingDefinitionMatchDetail.LedgerDimension = dimSynchronize.UpdatedLedgerDimension;

                                    if (dimSynchronize.UpdatedAccountStructure)
                                    {
                                        journalizingDefinitionMatchDetail.DimensionHierarchy = dimSynchronize.UpdatedAccountStructure;
                                    }

                                    journalizingDefinitionMatchDetail.doUpdate();
                                    rowsUpdated++;
                                }
                                rowsRead++;
                            }
                            activityContext.addCustomProperty('WereRowsRead_JournalizingDefinitionMatchDetail', int2str(rowsRead > 0));
                            activityContext.addCustomProperty('WereRecordsUpdated_JournalizingDefinitionMatchDetail', int2str(rowsUpdated > 0));
                        }
                    }

                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionSynchronizeV2</Name>
				<Source><![CDATA[
    public RefRecId insertDimensionSynchronizeV2(DimensionStructureSynchronizationRequestV2 _synchronizationRequest)
    {
        RefRecId providerStatusTrackingId;
        RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(JournalizingDefinitionDimensionStructureSynchronizationProvider, insertDimensionSynchronizeV2));

        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            DimensionSynchronizeDetail dimSynchronize;
            DimensionSynchronizeDetail dimSynchronizeNotExists;
            DimensionSynchronizeLedgerDetail dimSynchronizeLedger;
            JournalizingDefinitionMatch journalizingDefinitionMatch;
            JournalizingDefinitionMatchDetail journalizingDefinitionMatchDetail;
            DimensionAttributeValueCombination dimAttrValueCombination;
            DataArea company;
            DataAreaId companyId;
            DimensionStructureSyncProviderStatusTracking dimensionStructureSyncProviderStatusTracking;

            unchecked(Uncheck::XDS)
            {
                select forupdate firstonly dimensionStructureSyncProviderStatusTracking
                    where dimensionStructureSyncProviderStatusTracking.BatchJobId == batchJobId &&
                        dimensionStructureSyncProviderStatusTracking.ProviderName == _synchronizationRequest.parmProviderName();

                if (!dimensionStructureSyncProviderStatusTracking)
                {
                    dimensionStructureSyncProviderStatusTracking.BatchJobId = batchJobId;
                    dimensionStructureSyncProviderStatusTracking.ProviderName = _synchronizationRequest.parmProviderName();
                    dimensionStructureSyncProviderStatusTracking.insert();
                    providerStatusTrackingId = dimensionStructureSyncProviderStatusTracking.RecId;

                    ttsbegin;

                    // Extract LedgerDimension's from posting definition records

                    while select Id from company
                    where company.IsVirtual == NoYes::No
                    {
                        // Init includeCompany
                        companyId = company.Id;

                        select firstonly RecId from dimSynchronizeLedger where dimSynchronizeLedger.DataArea == companyId;

                        if (dimSynchronizeLedger.RecId)
                        {
                            changecompany(companyId)
                            {
                                // Company tables must be nulled to work properly when changecompany is invoked multiple times.
                                journalizingDefinitionMatch.clear();
                                journalizingDefinitionMatchDetail.clear();

                                // LedgerDimension (JournalizingDefinitionMatch)
                                insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, LedgerDimensionType, DataArea)
                                select providerStatusTrackingId, LedgerDimension from journalizingDefinitionMatch
                                        group by journalizingDefinitionMatch.LedgerDimension, dimAttrValueCombination.LedgerDimensionType, dimSynchronizeLedger.DataArea
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == journalizingDefinitionMatch.LedgerDimension &&
                                            (dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account ||
                                            dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Budget)
                                    join DataArea from dimSynchronizeLedger
                                        where dimSynchronizeLedger.DataArea == companyId
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == journalizingDefinitionMatch.LedgerDimension &&
                                            dimSynchronizeNotExists.ProviderStatusTrackingId == providerStatusTrackingId;

                                activityContext.addCustomProperty('MethodName', methodStr(JournalizingDefinitionDimensionStructureSynchronizationProvider, insertDimensionSynchronizeV2));
                                activityContext.addCustomProperty('WereRecordsInserted_JournalizingDefinitionMatch', int2str(dimSynchronize.rowCount() > 0));

                                // LedgerDimension (JournalizingDefinitionMatchDetail)
                                insert_recordset dimSynchronize (ProviderStatusTrackingId, OriginalLedgerDimension, LedgerDimensionType, DataArea)
                                select providerStatusTrackingId, LedgerDimension from journalizingDefinitionMatchDetail
                                        group by journalizingDefinitionMatchDetail.LedgerDimension, dimAttrValueCombination.LedgerDimensionType, dimSynchronizeLedger.DataArea
                                    join LedgerDimensionType from dimAttrValueCombination
                                        where dimAttrValueCombination.RecId == journalizingDefinitionMatchDetail.LedgerDimension &&
                                            dimAttrValueCombination.LedgerDimensionType == LedgerDimensionType::Account         // NOTE: Budget doesn't come into play here.
                                join DataArea from dimSynchronizeLedger
                                        where dimSynchronizeLedger.DataArea == companyId
                                    notexists join dimSynchronizeNotExists
                                        where dimSynchronizeNotExists.OriginalLedgerDimension == journalizingDefinitionMatchDetail.LedgerDimension &&
                                            dimSynchronizeNotExists.ProviderStatusTrackingId == providerStatusTrackingId;

                                activityContext.addCustomProperty('WereRecordsInserted_JournalizingDefinitionMatchDetail', int2str(dimSynchronize.rowCount() > 0));
                            }
                        }
                    }

                    dimensionStructureSyncProviderStatusTracking.Status = DimensionStructureSyncProviderStatus::Inserted;
                    dimensionStructureSyncProviderStatusTracking.update();
                    ttscommit;
                }
                else
                {
                    providerStatusTrackingId = dimensionStructureSyncProviderStatusTracking.RecId;
                }
            }
        }

        return providerStatusTrackingId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProviderReferencesV2</Name>
				<Source><![CDATA[
    public void updateProviderReferencesV2(DimensionStructureSynchronizationRequestV2 _synchronizationRequest)
    {
        RecId batchJobId = BatchHeader::getCurrentBatchHeader().parmBatchHeaderId();

        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(InstrumentationNamespace, methodStr(JournalizingDefinitionDimensionStructureSynchronizationProvider, updateProviderReferencesV2));

        try
        {
            using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
            {
                DimensionSynchronizeDetail dimSynchronize;
                DimensionSynchronizeLedgerDetail dimSynchronizeLedger;
                JournalizingDefinitionMatch journalizingDefinitionMatch;
                JournalizingDefinitionMatch journalizingDefinitionMatchExisting;
                JournalizingDefinitionMatchDetail journalizingDefinitionMatchDetail;
                JournalizingDefinitionMatchDetail journalizingDefinitionMatchDetailExisting;
                DataArea company;
                RecId dimHierarchyId;

                unchecked(Uncheck::XDS)
                {
                    ttsbegin;

                    while select Id from company
                        where company.IsVirtual == NoYes::No
                        exists join dimSynchronizeLedger
                            where dimSynchronizeLedger.DataArea == company.Id
                    {
                        changecompany(company.Id)
                        {
                            journalizingDefinitionMatch.clear();
                            journalizingDefinitionMatchDetail.clear();

                            // LedgerDimension (JournalizingDefinitionMatch)
                            while select forupdate journalizingDefinitionMatch
                                join UpdatedLedgerDimension, UpdatedAccountStructure from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == journalizingDefinitionMatch.LedgerDimension &&
                                            dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                            dimSynchronize.ProviderStatusTrackingId == _synchronizationRequest.parmProviderStatusTrackingId()
                            {
                                // Check for existing record
                                dimHierarchyId = dimSynchronize.UpdatedAccountStructure ? dimSynchronize.UpdatedAccountStructure : journalizingDefinitionMatch.DimensionHierarchy;

                                select firstonly RecId from journalizingDefinitionMatchExisting
                                    where journalizingDefinitionMatchExisting.LedgerDimension == dimSynchronize.UpdatedLedgerDimension &&
                                        journalizingDefinitionMatchExisting.JournalizingDefinitionVersion == journalizingDefinitionMatch.JournalizingDefinitionVersion &&
                                        journalizingDefinitionMatchExisting.DimensionHierarchy == dimHierarchyId;

                                if (journalizingDefinitionMatchExisting.RecId == 0)
                                {
                                    journalizingDefinitionMatch.LedgerDimension = dimSynchronize.UpdatedLedgerDimension;
                                    journalizingDefinitionMatch.DimensionHierarchy = dimHierarchyId;

                                    journalizingDefinitionMatch.doUpdate();
                                }
                            }

                            activityContext.addCustomProperty('MethodName', methodStr(JournalizingDefinitionDimensionStructureSynchronizationProvider, updateProviderReferencesV2));
                            activityContext.addCustomProperty('WereRecordsUpdated_JournalizingDefinitionMatch', int2str(journalizingDefinitionMatch.rowCount() > 0));

                            Info(strFmt("@Dimension:StructureSynchronizationProviderLogPerCompany", int2str(journalizingDefinitionMatch.rowCount()), tableId2PName(journalizingDefinitionMatch.TableId), company.Id));

                            // LedgerDimension (JournalizingDefinitionMatchDetail)
                            while select forupdate journalizingDefinitionMatchDetail
                                join UpdatedLedgerDimension, UpdatedAccountStructure from dimSynchronize
                                    where dimSynchronize.OriginalLedgerDimension == journalizingDefinitionMatchDetail.LedgerDimension &&
                                            dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension &&
                                            dimSynchronize.ProviderStatusTrackingId == _synchronizationRequest.parmProviderStatusTrackingId()
                            {
                                // Check for existing record
                                select firstonly RecId from journalizingDefinitionMatchDetailExisting
                                    where journalizingDefinitionMatchDetailExisting.LedgerDimension == dimSynchronize.UpdatedLedgerDimension &&
                                        journalizingDefinitionMatchDetailExisting.JournalizingDefinitionMatch == journalizingDefinitionMatchDetail.JournalizingDefinitionMatch;

                                if (journalizingDefinitionMatchDetailExisting.RecId == 0)
                                {
                                    journalizingDefinitionMatchDetail.LedgerDimension = dimSynchronize.UpdatedLedgerDimension;

                                    if (dimSynchronize.UpdatedAccountStructure)
                                    {
                                        journalizingDefinitionMatchDetail.DimensionHierarchy = dimSynchronize.UpdatedAccountStructure;
                                    }

                                    journalizingDefinitionMatchDetail.doUpdate();
                                }
                            }

                            activityContext.addCustomProperty('WereRecordsUpdated_JournalizingDefinitionMatchDetail', int2str(journalizingDefinitionMatchDetail.rowCount() > 0));
                        }
                    }

                    ttscommit;
                }
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() > MaxRetryCount)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeStructureChangesV2</Name>
				<Source><![CDATA[
    public LedgerDimensionBase synchronizeStructureChangesV2(DimensionSynchronizeDetail _dimensionSynchronize)
    {
        // Synchronizing for posting definitions requires special logic (begin by retrieving the original ledger dimension)
        LedgerDimensionBase ledgerDimension = _dimensionSynchronize.OriginalLedgerDimension;
        DimensionStorage dimStorage = DimensionValidation::syncStructureChanges(ledgerDimension, true, true);
        DimensionAttributeValueCombination dimAttrValueCombinationOriginal = DimensionAttributeValueCombination::find(ledgerDimension);

        if (dimStorage)
        {
            ledgerDimension = dimStorage.save();

            if (ledgerDimension)
            {
                // Check if the account structure was updated
                DimensionAttributeValueCombination dimAttrValueCombinationUpdated = DimensionAttributeValueCombination::find(ledgerDimension);

                if (dimAttrValueCombinationOriginal.AccountStructure != dimAttrValueCombinationUpdated.AccountStructure)
                {
                    _dimensionSynchronize.UpdatedAccountStructure = dimAttrValueCombinationUpdated.AccountStructure;
                }
            }
        }
        else
        {
            ledgerDimension = 0;
        }

        // Retry without checking the account structure against the current hierarchy disambiguation
        if ((ledgerDimension == 0) && (dimAttrValueCombinationOriginal.MainAccount == 0))
        {
            dimStorage = DimensionValidation::syncStructureChanges(_dimensionSynchronize.OriginalLedgerDimension, true, false);

            if (dimStorage)
            {
                ledgerDimension = dimStorage.save();
            }
        }

        // Revert to original LedgerDimension if sync failed
        if (!ledgerDimension)
        {
            ledgerDimension = _dimensionSynchronize.OriginalLedgerDimension;
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>