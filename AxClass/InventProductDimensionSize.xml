<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventProductDimensionSize</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventProductDimensionSize</c> class defines the behavior of the size inventory dimension.
/// </summary>
class InventProductDimensionSize extends InventProductDimension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDefaultValueForItem</Name>
				<Source><![CDATA[
    public anytype parmDefaultValueForItem(InventTable _inventTable, anytype _value = _inventTable.StandardInventSizeId)
    {
        _inventTable.StandardInventSizeId = _value;
        return _inventTable.StandardInventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAlternativeValueForItem</Name>
				<Source><![CDATA[
    public anytype parmAlternativeValueForItem(InventTable _inventTable, anytype _value = _inventTable.AltInventSizeId)
    {
        _inventTable.AltInventSizeId = _value;
        return _inventTable.AltInventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimensionByNaturalKey</Name>
				<Source><![CDATA[
    public Common findDimensionByNaturalKey(anytype _value)
    {
        return EcoResSize::findByName(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionNaturalKey</Name>
				<Source><![CDATA[
    public anytype retrieveDimensionNaturalKey(RecId _id)
    {
        return EcoResSize::find(_id).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveDimensionNaturalKeyByProductId</Name>
				<Source><![CDATA[
    public anytype retrieveDimensionNaturalKeyByProductId(RecId _productRecId)
    {
        EcoResSize ecoResSize;
        EcoResProductVariantSize ecoResProductVariantSize;

        RefRecId productDimensionAttribute   = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(this.parmInventDimFieldId());

        select firstonly Name
            from         ecoResSize
            exists join  ecoResProductVariantSize
                where    ecoResProductVariantSize.Size                           == ecoResSize.RecId
                    &&   ecoResProductVariantSize.ProductDimensionAttribute      == productDimensionAttribute
                    &&   ecoResProductVariantSize.DistinctProductVariant         == _productRecId;

        return ecoResSize.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProductDimensionValue</Name>
				<Source><![CDATA[
    public void createProductDimensionValue(
        EcoResDistinctProductVariant    _ecoResDistinctProductVariant,
        EcoResProductDimensionAttribute _ecoResProductDimensionAttribute,
        RefRecId                        _dimensionValue)
    {
        EcoResProductVariantSize ecoResProductVariantSize;
        ecoResProductVariantSize.initFromDistinctProductVariant(_ecoResDistinctProductVariant);
        ecoResProductVariantSize.ProductDimensionAttribute              = _ecoResProductDimensionAttribute.recId;
        ecoResProductVariantSize.Size                                   = _dimensionValue;

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            EcoResProductMasterSize ecoResProductMasterSize;

            select RetailWeight, RetailDisplayOrder from ecoResProductMasterSize
                where ecoResProductMasterSize.Size              == _dimensionValue &&
                      ecoResProductMasterSize.SizeProductMaster == _ecoResDistinctProductVariant.ProductMaster ;

            ecoResProductVariantSize.RetailWeight = ecoResProductMasterSize.RetailWeight;
            ecoResProductVariantSize.RetailDisplayOrder = ecoResProductMasterSize.RetailDisplayOrder;

            EcoResDistinctProductVariant ecoResDistinctProductVariant = EcoResDistinctProductVariant::find(_ecoResDistinctProductVariant.RecId,true);

            if (ecoResDistinctProductVariant)
            {
                ecoResDistinctProductVariant.setCalculatedRetailTotalWeight(ecoResProductMasterSize.RetailWeight);
                ecoResDistinctProductVariant.doUpdate();
            }
        }

        ecoResProductVariantSize.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTranslationByProduct</Name>
				<Source><![CDATA[
    public EcoResProductMasterDimValueTranslation findTranslationByProduct(EcoResProductRecId _productMasterRecId, anytype _dimensionValue, SystemLanguageId _languageId)
    {
        return EcoResProductMasterSize::findTranslationByProduct(_productMasterRecId, _dimensionValue, _languageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailSupported</Name>
				<Source><![CDATA[
    public boolean isRetailSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the singleton instance of the <c>InventProductDimensionSize</c> class.
    /// </summary>
    /// <returns>An instance of the <c>InventProductDimensionSize</c> class.</returns>
    public static InventProductDimensionSize getInstance()
    {
        return InventDimension::singletonFromInventDimFieldId(fieldNum(InventDim, InventSizeId)) as InventProductDimensionSize;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>