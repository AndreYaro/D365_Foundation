<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventItemPriceActivationTaskComplete</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventItemPriceActivationTaskComplete</c> class finalizes item price activation.
/// </summary>
class InventItemPriceActivationTaskComplete extends RunBaseBatch implements BatchRetryable
{
    Query    pricesToBeActivated;
    int      pricesScheduledCount;
    NoYes    recalculateProduction;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        pricesScheduledCount,
        recalculateProduction
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, pricesToBeActivated.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPricesQuery</Name>
				<Source><![CDATA[
    public Query parmPricesQuery(Query _pricesQuery = pricesToBeActivated)
    {
        pricesToBeActivated = _pricesQuery;

        return pricesToBeActivated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPricesScheduledCount</Name>
				<Source><![CDATA[
    public int parmPricesScheduledCount(int _pricesScheduledCount = pricesScheduledCount)
    {
        pricesScheduledCount = _pricesScheduledCount;

        return pricesScheduledCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecalculateProduction</Name>
				<Source><![CDATA[
    public NoYes parmRecalculateProduction(NoYes _recalculateProduction = recalculateProduction)
    {
        recalculateProduction = _recalculateProduction;

        return recalculateProduction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        int pricesRemainingCount = QueryRun::getQueryRowCount(pricesToBeActivated, maxInt());
        int activatedPricesCount = pricesScheduledCount - pricesRemainingCount;

        info(strFmt("@SYS104966", activatedPricesCount));

        if (recalculateProduction)
        {
            InventCostProdRecalcMultiJob productionCalcJob = InventCostProdRecalcMultiJob::construct();
            productionCalcJob.batchInfo().parmBatchExecute(true);
            productionCalcJob.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        container   packedQuery;
        Integer     version         = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, packedQuery] = packedClass;

                if (packedQuery)
                {
                    pricesToBeActivated = new Query(packedQuery);
                }
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventItemPriceActivationTaskComplete construct()
    {
        return new InventItemPriceActivationTaskComplete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4009905";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
