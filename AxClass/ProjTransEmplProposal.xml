<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransEmplProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjTransEmplProposal extends ProjTransEmpl
{
    ProjProposalEmpl    projProposalEmpl;
    ProjEmplTrans       projEmplTrans;
    ProjTransStatus     proposalTransStatus;

    boolean             calcTransCost;
    Amount              transCost;
    boolean             calcTransTurnover;
    AmountCur           transTurnover;
    boolean             calcLedgerSalesAmountMST;
    AmountMST           ledgerSalesAmountMST;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber activityNumber()
    {
        return projEmplTrans.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the category ID for a transaction.
    /// </summary>
    /// <returns>
    /// The category ID for the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projEmplTrans.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost price for a transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    public CostPrice costPrice()
    {
        CostPrice                costPrice;
        ProjEmplTransCost        projEmplTransCost;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplProposal)))
        {
            select count(RecId), sum(CostPrice) from projEmplTransCost
            where projEmplTransCost.TransId == projEmplTrans.TransId;

            // Multiple funding sources exist
            if (projEmplTransCost.RecId > 1)
            {
                costPrice = this.qty() ? CurrencyExchangeHelper::price(this.transCost() / this.qty(), this.currencyIdCost()) : 0;
            }
            else
            {
                costPrice = projEmplTransCost.CostPrice;
            }
        }
        else
        {
            costPrice = super();
        }

        return costPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyIdSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code for the sales amounts that are reported by a transaction.
    /// </summary>
    /// <returns>
    /// The currency code for the sales amounts that are reported by the transaction.
    /// </returns>
    public ProjSalesCurrencyCode currencyIdSales()
    {
        return projEmplTrans.CurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultdimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultdimension()
    {
        return projEmplTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projProposalEmpl.projProposalJour().FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransDate</Name>
				<Source><![CDATA[
    TransDate getTaxTransDate()
    {
        return projEmplTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxBuffer</Name>
				<Source><![CDATA[
    boolean hasTaxBuffer()
    {
        if (projEmplTrans)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerSalesAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales amount to post to the general ledger.
    /// </summary>
    /// <returns>
    /// The sales amount to post to the general ledger.
    /// </returns>
    public AmountMST ledgerSalesAmountMST()
    {
        AmountMST               ret;
        ProjProposalEmplDetail  projProposalEmplDetail;
        ProjEmplTransSale       projEmplTransSale;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplProposal)))
        {
            if (!calcLedgerSalesAmountMST)
            {
                calcLedgerSalesAmountMST = true;
                while select projProposalEmplDetail
                where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
                    join projEmplTransSale
                        where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalEmplSale(projProposalEmpl, projProposalEmplDetail, projEmplTransSale);
                    ledgerSalesAmountMST += projTransSale.ledgerSalesAmountMST();
                }
            }

            ret = ledgerSalesAmountMST;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    public ProjLinePropertyId linePropertyId()
    {
        return projEmplTrans.LinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjProposalEmpl _projProposalEmpl)
    {
        projProposalEmpl = _projProposalEmpl;
        projEmplTrans    = ProjEmplTrans::find(_projProposalEmpl.TransId);

        super(_projProposalEmpl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project that is associated with this transaction.
    /// </returns>
    public ProjId projId()
    {
        return projEmplTrans.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ID of the project proposal that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The ID of the project proposal that is associated with this transaction.
    /// </returns>
    public ProjProposalId proposalId()
    {
        return projProposalEmpl.ProposalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proposalTransStatus</Name>
				<Source><![CDATA[
    private ProjTransStatus proposalTransStatus()
    {
        ProjProposalEmplDetail  projProposalEmplDetail;
        ProjEmplTransSale       projEmplTransSale;

        if (!proposalTransStatus)
        {
            select SaleRefRecId from projProposalEmplDetail
            where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
                join TransStatus from projEmplTransSale
                    where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId;

            proposalTransStatus = projEmplTransSale.TransStatus;
        }

        return proposalTransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>psaContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the contract billing rule that is associated with this transaction.
    /// </summary>
    /// <returns>
    ///    The ID of the contract billing rule that is associated with this transaction.
    /// </returns>
    public PSAContractLineNum psaContractLineNum()
    {
        return projProposalEmpl.psaContractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the quantity for this transaction.
    /// </summary>
    /// <returns>
    /// The quantity for this transaction.
    /// </returns>
    public Qty qty()
    {
        ProjProposalJour projProposalJour = ProjProposalJour::find(projProposalEmpl.ProposalId);
        boolean invoiced   = projProposalJour.LineProperty   == ProjLinePropertyCode::Invoiced;

        if (invoiced)
        {
            return (select projInvoiceEmpl
                    where projInvoiceEmpl.ProjInvoiceId == projProposalJour.ProjInvoiceId
                       && projInvoiceEmpl.TransId       == this.transId()).Qty;
        }
        else
        {
            if (this.proposalTransStatus()   == ProjTransStatus::CreditnoteProposal)
            {
                return -projEmplTrans.Qty;
            }
            else
            {
                return projEmplTrans.Qty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    public RecId recId()
    {
        return projProposalEmpl.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceRecId resource()
    {
        return projEmplTrans.Resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the resource category that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// Always returns 0.
    /// </returns>
    /// <remarks>
    /// This method must be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public ResourceCategoryRecId resourceCategory()
    {
        return projEmplTrans.ResourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales price for this transaction.
    /// </summary>
    /// <returns>
    /// The sales price for this transaction.
    /// </returns>
    SalesPrice salesPrice()
    {
        SalesPrice        salesPrice;
        Qty               qty;
        ProjEmplTransSale projEmplTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplProposal)))
        {
            select count(RecId), sum(SalesPrice) from projEmplTransSale
            where projEmplTransSale.TransId == projEmplTrans.TransId;

            // Multiple funding sources exist
            if (projEmplTransSale.RecId > 1)
            {
                qty = this.qty();
                salesPrice = qty ? CurrencyExchangeHelper::price(this.transTurnover() / qty, this.currencyIdSales()) : 0;
            }
            else
            {
                salesPrice = projEmplTransSale.SalesPrice;
            }
        }
        else
        {
            salesPrice = super();
        }

        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    public TableId tableId()
    {
        return tableName2id(tableStr(ProjProposalEmpl));
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The tax group for this transaction.
    /// </returns>
    public TaxGroup taxGroup()
    {
        return projProposalEmpl.TaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxItemGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item tax group for this transaction.
    /// </summary>
    /// <returns>
    /// The item tax group for this transaction.
    /// </returns>
    /// <remarks>
    /// This method should be overridden by classes that extend this class to provide the necessary
    /// functionality for the specific transaction.
    /// </remarks>
    public TaxItemGroup taxItemGroup()
    {
        return projProposalEmpl.TaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public Amount transCost()
    {
        Amount                  ret;
        ProjProposalEmplDetail  projProposalEmplDetail;
        ProjEmplTransSale       projEmplTransSale;
        ProjEmplTransCost       projEmplTransCost;
        ProjTransStatus         locSaleTransStatus;
        container               con;
        Query                   query;
        QueryRun                queryRun;
        ProjTrans               projTransSale;
        ProjTrans               projTransCost;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplProposal)))
        {
            if (!calcTransCost)
            {
                calcTransCost = true;
                while select projProposalEmplDetail
                where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
                    join projEmplTransSale
                        where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalEmplSale(projProposalEmpl, projProposalEmplDetail, projEmplTransSale);
                    locSaleTransStatus = projTransSale.transStatus();

                    con = ProjEmplTransCost::findForSalesRefRecId(projProposalEmplDetail.SaleRefRecId);
                    query = new Query(con);
                    queryRun = new QueryRun(query);
                    while (queryRun.next())
                    {
                        projEmplTransCost = queryRun.get(tableNum(ProjEmplTransCost));
                        projTransCost = ProjTrans::newProjProposalEmplCost(projProposalEmpl, projProposalEmplDetail, projEmplTransCost, locSaleTransStatus);
                        transCost += projTransCost.transCost();
                    }
                }
            }

            ret = transCost;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction date.
    /// </summary>
    /// <returns>
    /// The transaction date.
    /// </returns>
    TransDate   transDate()
    {
        return projProposalEmpl.projEmplTrans().TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction ID.
    /// </summary>
    /// <returns>
    /// The transaction ID.
    /// </returns>
    public TransactionID transId()
    {
        return projProposalEmpl.TransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        AmountCur               ret;
        ProjProposalEmplDetail  projProposalEmplDetail;
        ProjEmplTransSale       projEmplTransSale;
        ProjTrans               projTransSale;

        if (!SysDictClass::isSuperclass(classIdGet(this), classNum(ProjTransEmplProposal)))
        {
            if (!calcTransTurnover)
            {
                calcTransTurnover = true;
                while select projProposalEmplDetail
                where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
                    join projEmplTransSale
                        where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId
                {
                    projTransSale = ProjTrans::newProjProposalEmplSale(projProposalEmpl, projProposalEmplDetail, projEmplTransSale);
                    transTurnover += projTransSale.transTurnover();
                }
            }

            ret = transTurnover;
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnoverGTE</Name>
				<Source><![CDATA[
    public AmountCur transTurnoverGTE()
    {
        ITaxDocumentLine             taxDocumentLineObject;
        AmountCur                    inclTaxAmount;
        AmountCur                    balanceGTE;
        AmountCur                    balance           = this.transTurnover();
        TaxEngineProjEmplTransHeader emplTransHeader   = TaxEngineProjEmplTransHeader::findOrCreateByProjProposalJour(projProposalEmpl.projProposalJour());
        ITaxDocument                 taxDocumentObject = TaxBusinessService::getTaxDocumentBySource(emplTransHeader.TableId, emplTransHeader.RecId);
        
        if (taxDocumentObject)
        {
            taxDocumentLineObject = taxDocumentObject.findLineBySource(projProposalEmpl.TableId, projProposalEmpl.RecId);
            inclTaxAmount = taxDocumentLineObject.getInclTax().amountTransactionCurrency();

            if (inclTaxAmount)
            {
                if (balance < 0)
                {
                    balanceGTE = CurrencyExchangeHelper::amount(abs(balance) - abs(inclTaxAmount)) * -1;
                }
                else
                {
                    balanceGTE = CurrencyExchangeHelper::amount(balance - abs(inclTaxAmount));
                }
            }
            else
            {
                balanceGTE = balance;
            }
        }
        else
        {
            balanceGTE = balance;
        }
        return balanceGTE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>txt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the transaction text.
    /// </summary>
    /// <returns>
    /// The transaction text.
    /// </returns>
    public TransTxt txt()
    {
        return projProposalEmpl.Txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the voucher number that is associated with this transaction.
    /// </summary>
    /// <returns>
    /// The voucher number that is associated with this transaction.
    /// </returns>
    Voucher voucherInvoice()
    {
        Voucher ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify whether the transaction is an intercompany transaction.
    /// </summary>
    /// <returns>
    /// true if the transaction is an intercompany; otherwise false.
    /// </returns>
    public boolean isIntercompany()
    {
        return projEmplTrans.isIntercompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lendingLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the lending legal entity.
    /// </summary>
    public DataAreaId lendingLegalEntity()
    {
        DataAreaId ret = curExt();

        if (this.isIntercompany())
        {
            ret = CompanyInfo::findRecId(ResourceFacade::getLegalEntity(projEmplTrans.Resource)).DataArea;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>