<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalResetPostingEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BankCurrencyRevalResetPostingEngine
{
    private Transdate postingDate;
    private container bankDimensionConfig;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankCurrencyRevalResetContract</Name>
				<Source><![CDATA[
    internal static BankCurrencyRevalResetPostingEngine newFromBankCurrencyRevalResetContract(
        BankCurrencyRevalResetContract _contract)
    {
        BankCurrencyRevalResetPostingEngine postingEngine = new BankCurrencyRevalResetPostingEngine();
        postingEngine.postingDate = _contract.parmPostingDate();
        postingEngine.bankDimensionConfig = _contract.parmBankDimensionConfig();

        return postingEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    internal void run()
    {
        for (int i = 1; i <= conLen(bankDimensionConfig); i++)
        {
            container currentDimensionSetting = conPeek(bankDimensionConfig, i);
            RecId refRecId = conPeek(currentDimensionSetting, 1);
            BankCurrencyRevalDimensionSetting dimensionSetting = conPeek(currentDimensionSetting, 2);

            if (!BankCurrencyRevalTracking::lockBankAccountProcessingFCR(refRecId))
            {
                warning(strFmt("@CashManagement:BankCurrencyRevalRequireLockFailed", BankAccountTable::findByRecId(refRecId).AccountID));
                continue;
            }
            
            try
            {
                ttsbegin;

                BankAccountTable bankAccountTable = BankAccountTable::findByRecId(refRecId, true);

                changecompany(bankAccountTable.DataAreaId)
                {
                    if (this.validateDate(bankAccountTable))
                    {
                        BankCurrencyRevalLedgerVoucher bankCurrencyRevalLedgerVoucher = BankCurrencyRevalLedgerVoucher::construct();

                        this.processLedgerPosting(bankCurrencyRevalLedgerVoucher, bankAccountTable);

                        bankCurrencyRevalLedgerVoucher.end();

                        this.processBankTransactionPosting(bankCurrencyRevalLedgerVoucher, bankAccountTable);

                        this.createHistory(bankCurrencyRevalLedgerVoucher, bankAccountTable);

                        this.updateDimensionSetting(bankAccountTable, dimensionSetting);
                    }
                    else
                    {
                        warning("@CashManagement:BankCurrencyRevalResetInvalidResetPostingDate");
                    }
                }

                ttscommit;
            }
            catch
            {
                exceptionTextFallThrough();
            }

            BankCurrencyRevalTracking::unlockBankAccountProcessingFCR(refRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDate</Name>
				<Source><![CDATA[
    private boolean validateDate(BankAccountTable _bankAccountTable)
    {
        BankCurrencyRevalHistory bankCurrencyRevalHistory;

        if (BankCurrencyRevalResetDupAccountCheckFlight::instance().isEnabled())
        {
            select firstonly RecId from bankCurrencyRevalHistory
                where bankCurrencyRevalHistory.BankAccountId == _bankAccountTable.AccountID
                    && bankCurrencyRevalHistory.LegalEntity == _bankAccountTable.DataAreaId
                    && bankCurrencyRevalHistory.TransDate > postingDate;
        }
        else
        {
            select firstonly RecId from bankCurrencyRevalHistory
                where bankCurrencyRevalHistory.BankAccountId == _bankAccountTable.AccountID
                    && bankCurrencyRevalHistory.TransDate > postingDate;
        }

        return bankCurrencyRevalHistory.RecId == 0 && _bankAccountTable.LastRevalResetDate < postingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLedgerPosting</Name>
				<Source><![CDATA[
    private void processLedgerPosting(BankCurrencyRevalLedgerVoucher _ledgerVoucher, BankAccountTable _bankAccountTable)
    {
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        BankCurrencyRevalHistory revalHistory;

        _ledgerVoucher.addVoucher(postingDate);

        while select sum(AccountingCurrencyAmount), sum(ReportingCurrencyAmount), PostingType, LedgerDimension, TransactionCurrencyCode from generalJournalAccountEntry
            group by PostingType, LedgerDimension, TransactionCurrencyCode
            exists join generalJournalEntry
                where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
            exists join revalHistory
                where generalJournalEntry.SubledgerVoucher == revalHistory.SubledgerVoucher
                    && generalJournalEntry.SubledgerVoucherDataAreaId == revalHistory.LegalEntity
                    && (!BankCurrencyRevalResetLimitScopeFlight::instance().isEnabled() || generalJournalEntry.CreatedTransactionId == revalHistory.CreatedTransactionId)
                    && revalHistory.BankAccountId == _bankAccountTable.AccountID
                    && revalHistory.LegalEntity == _bankAccountTable.DataAreaId
                    && revalHistory.TransDate > _bankAccountTable.LastRevalResetDate
        {
            if (generalJournalAccountEntry.AccountingCurrencyAmount != 0 || generalJournalAccountEntry.ReportingCurrencyAmount != 0)
            {
                LedgerVoucherObject ledgerVoucherObject = _ledgerVoucher.getLedgerVoucherObject(postingDate);

                LedgerVoucherTransObject ledgerVoucherTransObject = LedgerVoucherTransObject::newAdjustmentDefault(
                    ledgerVoucherObject,
                    generalJournalAccountEntry.PostingType,
                    generalJournalAccountEntry.LedgerDimension,
                    generalJournalAccountEntry.TransactionCurrencyCode,
                    -generalJournalAccountEntry.AccountingCurrencyAmount,
                    -generalJournalAccountEntry.ReportingCurrencyAmount);

                // Don't allocate since we are reversing records that have already been allocated.
                ledgerVoucherTransObject.parmIgnoreAllocation(true);

                _ledgerVoucher.addLedgerVoucherTransObject(ledgerVoucherTransObject);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBankTransactionPosting</Name>
				<Source><![CDATA[
    private void processBankTransactionPosting(BankCurrencyRevalLedgerVoucher _ledgerVoucher, BankAccountTable _bankAccountTable)
    {
        BankAccountTrans bankAccountTrans;
        BankCurrencyRevalHistory revalHistory;

        while select sum(AmountMST), sum(AmountReportingCurrency), CurrencyCode, DefaultDimension from bankAccountTrans
            group by CurrencyCode, DefaultDimension
            exists join revalHistory
                where bankAccountTrans.Voucher == revalHistory.SubledgerVoucher
                    && revalHistory.BankAccountId == _bankAccountTable.AccountID
                    && revalHistory.LegalEntity == _bankAccountTable.DataAreaId
                    && revalHistory.TransDate > _bankAccountTable.LastRevalResetDate
                    && revalHistory.IsReset == NoYes::No
                    && BankAccountTrans.AccountId == _bankAccountTable.AccountID
        {
            if (bankAccountTrans.AmountMST != 0 || bankAccountTrans.AmountReportingCurrency != 0)
            {
                BankAccountTrans bankAccountTransReset;

                bankAccountTransReset.TransDate = postingDate;
                bankAccountTransReset.AccountId = _bankAccountTable.AccountID;
                bankAccountTransReset.Voucher = _ledgerVoucher.getLastVoucher();
                bankAccountTransReset.Txt = _ledgerVoucher.getSubledgerTransactionText();
                bankAccountTransReset.LedgerTransType = LedgerTransType::ExchAdjustment;
                bankAccountTransReset.Reconciled = NoYes::Yes;
                bankAccountTransReset.CurrencyCode = bankAccountTrans.CurrencyCode;
                bankAccountTransReset.BankTransCurrencyCode = _bankAccountTable.CurrencyCode;
                bankAccountTransReset.AmountMST = -bankAccountTrans.AmountMST;
                bankAccountTransReset.AmountReportingCurrency = -bankAccountTrans.AmountReportingCurrency;
                bankAccountTransReset.DefaultDimension = bankAccountTrans.DefaultDimension;

                bankAccountTransReset.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDimensionSetting</Name>
				<Source><![CDATA[
    private void updateDimensionSetting(BankAccountTable _bankAccountTable, BankCurrencyRevalDimensionSetting _dimensionSetting)
    {
        _bankAccountTable.RevalDimensionSetting = _dimensionSetting;
        _bankAccountTable.LastRevalResetDate = postingDate;
        _bankAccountTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHistory</Name>
				<Source><![CDATA[
    private void createHistory(BankCurrencyRevalLedgerVoucher _ledgerVoucher, BankAccountTable _bankAccountTable)
    {
        if (_ledgerVoucher.getLedgerVoucherObject(postingDate).transElements() > 0)
        {
            BankCurrencyRevalHistory bankCurrencyRevalHistory;

            bankCurrencyRevalHistory.LegalEntity = curExt();
            bankCurrencyRevalHistory.BankAccountId = _bankAccountTable.AccountID;
            bankCurrencyRevalHistory.TransDate = postingDate;
            bankCurrencyRevalHistory.SubledgerVoucher = _ledgerVoucher.getLastVoucher();
            bankCurrencyRevalHistory.Ledger = Ledger::current();
            bankCurrencyRevalHistory.IsReset = true;

            bankCurrencyRevalHistory.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>