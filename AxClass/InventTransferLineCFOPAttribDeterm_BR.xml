<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferLineCFOPAttribDeterm_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransferLineCFOPAttribDeterm_BR</c> class determines attributes to transfer order CFOP.
/// </summary>
class InventTransferLineCFOPAttribDeterm_BR extends CFOPAttributesDeterminer_BR
{
    InventTransferUpdateType            inventTransferUpdateType;
    inventTransferLineFiscalInfo_BR     inventTransferLineFiscalInfo;
    InventTransferTable                 inventTransferTable;
    InventTransferTableFiscalInfo_BR    inventTransferTableFiscalInfo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fetchInventTransferTableFromDS</Name>
				<Source><![CDATA[
    private void fetchInventTransferTableFromDS(FormDataSource _callerDataSource)
    {
        if (!_callerDataSource.isBaseDataSource())
        {
            FormDataSource dataSource = _callerDataSource.joinSourceDataSource();

            if (dataSource.cursor().TableId == tableNum(InventTransferLine))
            {
                InventTransferLine inventTransferLine = dataSource.cursor();
                dataSource = FormDataUtil::getFormDataSource(inventTransferLine);

                if (dataSource.joinSourceDataSource().cursor().TableId == tableNum(InventTransferTable))
                {
                    inventTransferTable = dataSource.joinSourceDataSource().cursor();

                    inventTransferTableFiscalInfo = inventTransferTable.inventTransferTableFiscalInfo_BR();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchWarehouseFiscalEstablishment</Name>
				<Source><![CDATA[
    private void fetchWarehouseFiscalEstablishment()
    {
        FiscalEstablishmentInventSite_BR fiscalEstablishmentInventSite;
        InventSite inventSite;
        InventLocation inventLocation;

        if (this.parmInventTransferUpdateType() == InventTransferUpdateType::Shipment)
        {
            select fiscalEstablishment
                exists join fiscalEstablishmentInventSite
                    where fiscalEstablishmentInventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
                exists join inventSite
                    where inventSite.SiteId == fiscalEstablishmentInventSite.InventSite
                exists join inventLocation
                    where inventLocation.InventSiteId == inventSite.SiteId
                        && inventLocation.InventLocationId == inventTransferTable.InventLocationIdFrom;
        }
        else
        {
            select fiscalEstablishment
                exists join fiscalEstablishmentInventSite
                    where fiscalEstablishmentInventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
                exists join inventSite
                    where inventSite.SiteId == fiscalEstablishmentInventSite.InventSite
                exists join inventLocation
                    where inventLocation.InventSiteId == inventSite.SiteId
                        && inventLocation.InventLocationId == inventTransferTable.InventLocationIdTo;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressOriginEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// It Defines the Common  used to identify the logistic postal address for Origin Address
    /// </summary>
    /// <returns>
    /// Returns the FiscalEstablishment that should be used
    /// </returns>
    public Common getAddressOriginEntity()
    {
        return fiscalEstablishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFOPTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// It Defines the CFOPTable_BR Record used by this SalesLine
    /// </summary>
    /// <returns>
    /// Returns the tabnle Record
    /// </returns>
    public CFOPTable_BR getCFOPTable()
    {
        return CFOPTable_BR::find(inventTransferLineFiscalInfo.ShipCFOPTable_BR);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDestinationPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// It Defines the RecId used to identify the logistic postal address for
    /// Destination Address
    /// </summary>
    /// <returns>
    /// Returns the deliveryLocation used for postal address
    /// </returns>
    public recId getDestinationPostalAddressRecId()
    {
        if (this.getTransactionType() == SalesPurchTrntype_BR::FiscalEstablishmentTransfer)
        {
            return inventTransferTable.ToPostalAddress;
        }
        else
        {
            if (this.parmInventTransferUpdateType() == InventTransferUpdateType::Shipment)
            {
                return inventTransferTable.ToPostalAddress;
            }
            else
            {
                return inventTransferTable.FromPostalAddress;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDirection</Name>
				<Source><![CDATA[
    public FiscalDocDirection_BR getDirection()
    {
        if (this.parmInventTransferUpdateType() == InventTransferUpdateType::Shipment)
        {
            return FiscalDocDirection_BR::Outgoing;
        }

        return FiscalDocDirection_BR::Incoming;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOperationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Define the Operation Type ID used by on salesLine
    /// </summary>
    /// <returns>
    /// Returnts the operation ID
    /// </returns>
    public SalesPurchOperationTypeRecId_BR getOperationId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the Transaction Type (Sales/Purch) used by SalesLine
    /// </summary>
    /// <returns>
    /// Transaction type used in invent transfer line.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If there is no information about the Transaction Type.
    /// </exception>
    [Replaceable]
    public SalesPurchTrntype_BR getTransactionType()
    {
        SalesPurchTrntype_BR ret;

        switch (inventTransferTableFiscalInfo.InventTransferOrderType)
        {
            case InventTransferOrderType_BR::ThirdPartyTransfer :
            case InventTransferOrderType_BR::ThirdPartyReturn :
                ret =  SalesPurchTrntype_BR::ThirdPartyTransfer;
                break;

            case InventTransferOrderType_BR::FiscalEstablishmentTransfer :
            case InventTransferOrderType_BR::FiscalEstablishmentReturn   :
                ret =  SalesPurchTrntype_BR::FiscalEstablishmentTransfer;
                break;

            default :
                throw error(error::wrongUseOfFunction(funcName()));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemOutgoingOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// It defines if the transactions is sending services/goods
    /// </summary>
    /// <returns>
    /// It returns true if is sending services/goods
    /// </returns>
    /// <remarks>
    /// Returns true is services/goods are sent, otherwise false if the transaction is receveing services/goods
    /// </remarks>
    public boolean isItemOutgoingOperation()
    {
        return this.parmInventTransferUpdateType() == InventTransferUpdateType::Shipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnedItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if the Transfer order is for returned items.
    /// </summary>
    /// <returns>
    ///     Boolean value indicating whether the transaction is for returned items.
    /// </returns>
    public boolean isReturnedItem()
    {
        return inventTransferTableFiscalInfo.isReturnOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a <c>Query</c> object with ranges determined by a given <c>CFOPAttributesDeterminer_BR</c> class.
    /// </summary>
    /// <returns>
    /// The <c>Query</c> object built.
    /// </returns>
    public Query lookupQuery()
    {
        Query                   query = super();

        QueryBuildDataSource qbds = query.dataSourceTable(tablenum(CFOPTable_BR));

        if (this.isReturnedItem())
        {
            qbds.addRange(fieldnum(CFOPTable_BR, Purpose)).value(queryValue(CFOPPurpose_BR::Return));
        }
        else
        {
            qbds.addRange(fieldnum(CFOPTable_BR, Purpose)).value(SysQuery::valueNot(CFOPPurpose_BR::Return));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _cfopOrderTable)
    {
        inventTransferLineFiscalInfo = _cfopOrderTable;

        if (FormDataUtil::isFormDataSource(inventTransferLineFiscalInfo))
        {
            this.fetchInventTransferTableFromDS(FormDataUtil::getFormDataSource(inventTransferLineFiscalInfo));
        }
        else
        {
            select inventTransferTable
                where inventTransferTable.TransferId == inventTransferLineFiscalInfo.InventTransferTable
                join  inventTransferTableFiscalInfo
                    where inventTransferTableFiscalInfo.InventTransferTable == inventTransferTable.RecId;
        }

        this.fetchWarehouseFiscalEstablishment();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTransferUpdateType</Name>
				<Source><![CDATA[
    public InventTransferUpdateType parmInventTransferUpdateType(InventTransferUpdateType _InventTransferUpdateType = inventTransferUpdateType)
    {
        inventTransferUpdateType = _InventTransferUpdateType;

        if (!prmisDefault(_InventTransferUpdateType))
        {
            this.getCFOPAttributes();
        }

        return inventTransferUpdateType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>