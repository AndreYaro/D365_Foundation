<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostProdRecalcMultiJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventCostProdRecalcMultiJob</c> class bundles production orders where
/// the estimated costs for material and time consumption should be recalculated
/// and schedules recalculation tasks.
/// </summary>
public class InventCostProdRecalcMultiJob extends RunBaseBatch implements BatchRetryable
{
    RefRecid    queuedFromInventoryClose;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
    queuedFromInventoryClose
    #ENDMACRO


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBundleSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the actual number of bundle size to be used during bundling of calculation tasks.
    /// </summary>
    /// <returns>
    /// Maximum mumber of production orders to be placed in one bundle.
    /// </returns>
    private InventCostProdRecalcMultiBundleSize getBundleSize()
    {
        ProdParameters                      parameters  = ProdParameters::find();
        InventCostProdRecalcMultiBundleSize bundleSize  = parameters.InventCostProdRecalcMultiBundleSize;

        if (bundleSize <= 0)
        {
            bundleSize = maxInt();
        }

        return bundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQueuedFromInventoryClose</Name>
				<Source><![CDATA[
    protected RefRecid parmQueuedFromInventoryClose(RefRecId _queuedFromInventoryClose = queuedFromInventoryClose)
    {
        queuedFromInventoryClose = _queuedFromInventoryClose;
        return queuedFromInventoryClose;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ProdTableRecalcQueue defered;

        int maxRecordsPerBundle = this.getBundleSize();
        int bundledCount;

        BatchHeader currentBatchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

        InventCostProdRecalcMultiTaskCalculate task;

        while select defered where defered.QueuedFromInventoryClosing == this.parmQueuedFromInventoryClose()
        {
            if (bundledCount mod maxRecordsPerBundle == 0)
            {
                task = InventCostProdRecalcMultiTaskCalculate::construct();
                currentBatchHeader.addTask(task);
            }

            task.parmProductionOrderIds().add(defered.ProdId);
            bundledCount++;
        }

        if (bundledCount > 0)
        {
            currentBatchHeader.save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostProdRecalcMultiJob construct()
    {
        return new InventCostProdRecalcMultiJob();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromInventoryCloseAndDoBatch</Name>
				<Source><![CDATA[
    public static InventCostProdRecalcMultiJob constructFromInventoryCloseAndDoBatch(RefRecId _inventClosing)
    {
        InventCostProdRecalcMultiJob    inventCostProdRecalcMultiJob = new InventCostProdRecalcMultiJob();
        InventCostProdRecalcMultiJob.parmQueuedFromInventoryClose(_inventClosing);
        InventCostProdRecalcMultiJob.batchInfo().parmBatchExecute(true);
        InventCostProdRecalcMultiJob.batchInfo().parmCaption("@SYS4009907");

        inventCostProdRecalcMultiJob.doBatch();
        return inventCostProdRecalcMultiJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4009906";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        InventCostProdRecalcMultiJob        multiJob    = InventCostProdRecalcMultiJob::construct();

        if (multiJob.prompt())
        {
            multiJob.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  packedClass)
    {
        Integer  version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList]        = packedClass;
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>