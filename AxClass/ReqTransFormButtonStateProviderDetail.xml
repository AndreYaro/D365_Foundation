<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransFormButtonStateProviderDetail</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqTransFormButtonStateProviderDetail extends ReqTransFormButtonStateProvider
{
    int numOfSelectedPo;

    int countCanBeTransferred;
    int countCanBeProduced;

    Map                             distinctOrderTypeCounters;
    ReqTransFormMultiSelectionState multiSelectionState;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allSelectedOrdersHaveSameType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that all the selected orders have the same type.
    /// </summary>
    /// <param name="_refType">
    ///    A <c>ReqRefType</c> value that indicates the order type.
    /// </param>
    /// <returns>
    ///    true if all selected planned orders have the same type; otherwise, false.
    /// </returns>
    private boolean allSelectedOrdersHaveSameType(ReqRefType  _refType = ReqRefType::None)
    {
        boolean ret = distinctOrderTypeCounters.elements() == 1;

        if ( ret && _refType != ReqRefType::None )
        {
            ret = distinctOrderTypeCounters.exists(_refType);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleCalcScheduleExpPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the planned order can be further exploded.
    /// </summary>
    /// <returns>
    ///    true if the selected planned order can be exploded further; otherwise, false.
    /// </returns>
    public boolean checkRuleCalcScheduleExpPO()
    {
        return this.checkRuleRecordExists() &&
            ReqTrans::derivedRefType(reqPO.RefType) != ReqRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChange2Kanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the selected planned order can be changed to a planned kanban.
    /// </summary>
    /// <returns>
    ///    true if the selected planned orders can be changed to planned kanbans; otherwise, false.
    /// </returns>
    public boolean checkRuleChange2Kanban()
    {
        return  countCanBeProduced > 0 &&
                countCanBeProduced == multiSelectionState.selectedRecordsCount() &&
                !distinctOrderTypeCounters.exists(ReqRefType::PlannedKanban);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChange2Production</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected planned order can be changed to a planned production order.
    /// </summary>
    /// <returns>
    ///    true if the selected planned orders can be changed to planned production orders; otherwise, false.
    /// </returns>
    public boolean checkRuleChange2Production()
    {
        return  countCanBeProduced > 0 &&
                countCanBeProduced == multiSelectionState.selectedRecordsCount() &&
                !distinctOrderTypeCounters.exists(ReqRefType::BOMPlannedOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChange2Purch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected planned orders can be changed to planned purchase orders.
    /// </summary>
    /// <returns>
    ///    true if the selected planned orders can be changed to planned purchase orders; otherwise, false.
    /// </returns>
    public boolean checkRuleChange2Purch()
    {
        return  multiSelectionState.selectedRecordsCount() &&
                !distinctOrderTypeCounters.exists(ReqRefType::ItemPlannedOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChange2RFQ</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected planned orders can be changed to requests for quotes.
    /// </summary>
    /// <returns>
    ///    true if selected planned orders can be changed to requests for quotes; otherwise, false.
    /// </returns>
    public boolean checkRuleChange2RFQ()
    {
        return this.allSelectedOrdersHaveSameType(ReqRefType::ItemPlannedOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleChange2Transfer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the selected records can be changed to planned transfer orders.
    /// </summary>
    /// <returns>
    ///    true if the selected planned orders can be changed to planned transfer orders; otherwise, false.
    /// </returns>
    public boolean checkRuleChange2Transfer()
    {
        return  countCanBeTransferred &&
                countCanBeTransferred == multiSelectionState.selectedRecordsCount() &&
                !distinctOrderTypeCounters.exists(ReqRefType::TransferPlannedOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether more than one record has been selected and if all of the selected records have
    ///    the same <c>ReqRefType</c> enumeration value.
    /// </summary>
    /// <returns>
    ///    true if more than one record has been selected and all of the selected records have the same
    ///    <c>ReqRefType</c> enumeration value; otherwise, false.
    /// </returns>
    public boolean checkRuleGroup()
    {
        return  multiSelectionState &&
                multiSelectionState.selectedRecordsCount() > 1 &&
                this.allSelectedOrdersHaveSameType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleSelectRemove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether more than one planned order has been selected.
    /// </summary>
    /// <returns>
    ///    true if more than one planned order is selected; otherwise, false.
    /// </returns>
    public boolean checkRuleSelectRemove()
    {
        return multiSelectionState && multiSelectionState.selectedRecordsCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRuleTransPoMarkSched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the number of selected records are planned production orders.
    /// </summary>
    /// <returns>
    /// Returns true if all selected records are planned production orders otherwise false.
    /// </returns>
    public boolean checkRuleTransPoMarkSched()
    {
        MapEnumerator   iter = distinctOrderTypeCounters.getEnumerator();

        while (iter.moveNext())
        {
            if (iter.currentKey() != ReqRefType::BOMPlannedOrder
                && iter.currentKey() != ReqRefType::PmfPlannedProdBatch)
            {
                return false;
            }
        }

        return distinctOrderTypeCounters.elements() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCheckRulePurchSalesHIstory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether more than one planned order has been selected.
    /// </summary>
    /// <returns>
    ///    true if more than one planned order is selected; otherwise, false.
    /// </returns>
    public boolean mcrCheckRulePurchSalesHIstory()
    {
        return multiSelectionState && multiSelectionState.selectedRecordsCount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        this.resetOrderTypeCounters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOrderTypeCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes all internal order type counters.
    /// </summary>
    protected void resetOrderTypeCounters()
    {
        distinctOrderTypeCounters = new Map(Types::Enum,Types::Integer);

        countCanBeProduced      = 0;
        countCanBeTransferred   = 0;
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setMultiSelectionState</Name>
				<Source><![CDATA[
        public ReqTransFormMultiSelectionState setMultiSelectionState(ReqTransFormMultiSelectionState _multiSelectionState)
    {
        multiSelectionState = _multiSelectionState;

        this.updateOrderTypeCounters();

        return multiSelectionState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCanBeProducedCounter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates an internal counter of orders for the items that can be produced.
    /// </summary>
    /// <param name="_selectedRecord">
    ///    A <c>ReqTrans</c> record that refers the item.
    /// </param>
    private void updateCanBeProducedCounter(ReqTrans _selectedRecord)
    {
        if ( InventTable::find(_selectedRecord.ItemId).inventItemType().canBeProduced() )
        {
            countCanBeProduced++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCanBeTransferredCounter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates an internal counter of orders for the items that can be transferred.
    /// </summary>
    /// <param name="_selectedRecord">
    ///    A <c>ReqTrans</c> record that refers the item.
    /// </param>
    private void updateCanBeTransferredCounter(ReqTrans _selectedRecord)
    {
        InventDimGroupSetup inventDimGroupSetup;
        InventDimParm       inventDimParm;

        inventDimGroupSetup = InventDimGroupSetup::newItemId(_selectedRecord.ItemId);
        inventDimParm.initCovPrDimension(inventDimGroupSetup);

        if (inventDimParm.InventLocationIdFlag)
        {
            countCanBeTransferred++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDistinctOrderTypeCounters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the internal counters for each distinct order type.
    /// </summary>
    /// <param name="_selectedRecord">
    ///    A <c>ReqTrans</c> record.
    /// </param>
    private void updateDistinctOrderTypeCounters(ReqTrans _selectedRecord)
    {
        int currentOrderTypeCounter = 1;

        if ( distinctOrderTypeCounters.exists(_selectedRecord.RefType) )
        {
            currentOrderTypeCounter = distinctOrderTypeCounters.lookup(_selectedRecord.RefType);
            currentOrderTypeCounter++;
        }

        distinctOrderTypeCounters.insert(_selectedRecord.RefType, currentOrderTypeCounter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderTypeCounters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all internal order type counters for all selected records.
    /// </summary>
    private void updateOrderTypeCounters()
    {
        MapEnumerator   selectedRecords;
        ReqTrans        selectedRecord;

        this.resetOrderTypeCounters();

        if ( multiSelectionState )
        {
            selectedRecords = multiSelectionState.getEnumerator();

            while (selectedRecords.moveNext())
            {
                selectedRecord = selectedRecords.currentValue();

                this.updateDistinctOrderTypeCounters(selectedRecord);
                this.updateCanBeProducedCounter(selectedRecord);
                this.updateCanBeTransferredCounter(selectedRecord);
                this.updatePmfCounters(selectedRecord);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqTransFormButtonStateProviderDetail construct()
    {
        return new ReqTransFormButtonStateProviderDetail();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>