<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransferMultiShip</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransferMultiShip</c> class handles updates regarding the shipping of transfer orders.
/// </summary>
public class InventTransferMultiShip extends InventTransferMulti implements BatchRetryable
{
    private Map transferLineNumMap;
    private boolean mustShowTransferLinesOnLoadsWarning;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>mustBuildParmFromWMSShipmentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides if the warehouse order line must be included when building the <c>InventTransferParmLine</c> data.
    /// </summary>
    /// <param name = "_wmsOrderTrans">The warehouse order line.</param>
    /// <returns>true if the line must be included; otherwise, false.</returns>
    protected boolean mustBuildParmFromWMSShipmentLine(WmsOrderTrans _wmsOrderTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExistingInventTransferParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates an existing <c>InventTransferParmLine</c> record for a warehouse order line.
    /// </summary>
    /// <param name = "_inventTransferParmLine">The line to update.</param>
    /// <param name = "_wmsOrderTrans">The warehouse order line.</param>
    protected void updateExistingInventTransferParmLine(InventTransferParmLine _inventTransferParmLine, WmsOrderTrans _wmsOrderTrans)
    {
        _inventTransferParmLine.QtyShipNow += _wmsOrderTrans.Qty;
        _inventTransferParmLine.PdsCWQtyShipNow += _wmsOrderTrans.PdsCWQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventTransferParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize an <c>InventTransferParmLine</c> record for a warehouse order line.
    /// </summary>
    /// <param name = "_inventTransferLine">The transfer order line.</param>
    /// <param name = "_wmsOrderTrans">The warehouse order line.</param>
    protected InventTransferParmLine initInventTransferParmLine(InventTransferLine _inventTransferLine, WmsOrderTrans _wmsOrderTrans)
    {
        InventTransferParmLine inventTransferParmLine;

        inventTransferParmLine.initFromInventTransferLine(_inventTransferLine);
        inventTransferParmLine.InventTransId        = _inventTransferLine.InventTransId;
        inventTransferParmLine.InventTransIdTransit = _inventTransferLine.InventTransIdTransitTo;
        inventTransferParmLine.TransferId           = _inventTransferLine.TransferId;
        inventTransferParmLine.QtyShipNow           = _wmsOrderTrans.Qty;
        inventTransferParmLine.PdsCWQtyShipNow      = _wmsOrderTrans.PdsCWQty;
        inventTransferParmLine.InventDimId          = _wmsOrderTrans.InventDimId;

        return inventTransferParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildParmFromWMSShipmentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>InventTransferParmLine</c> data for a warehouse order line.
    /// </summary>
    /// <param name = "_wmsOrderTrans">The warehouse order line.</param>
    /// <param name = "_inventTransferParmTable">The transfer parameter table.</param>
    protected void buildParmFromWMSShipmentLine(WmsOrderTrans _wmsOrderTrans, InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferLine inventTransferLine = InventTransferLine::findTransIdShip(_wmsOrderTrans.InventTransId);
            
        InventTransferParmLine inventTransferParmLine = this.findInventTransferParmLine(_inventTransferParmTable, inventTransferLine, _wmsOrderTrans);

        if (inventTransferParmLine)
        {
            this.updateExistingInventTransferParmLine(inventTransferParmLine, _wmsOrderTrans);
            inventTransferParmLine.update();
        }
        else
        {
            //get line numbers for parm lines for current order
            Counter transferlineNum = transferLineNumMap.lookup(_wmsOrderTrans.InventTransRefId);
            transferlineNum++;  

            //store line numbers for parm lines for previous order
            transferLineNumMap.insert(_wmsOrderTrans.InventTransRefId, transferlineNum);

            //Create Parm Line
            inventTransferParmLine = this.initInventTransferParmLine(inventTransferLine, _wmsOrderTrans);
            inventTransferParmLine.ParmId = _inventTransferParmTable.ParmId;
            inventTransferParmLine.LineNum = transferlineNum;
            inventTransferParmLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildParmFromWMSShipment</Name>
				<Source><![CDATA[
    void buildParmFromWMSShipment(
        WMSShipment             _wmsShipment,
        InventTransferParmTable _inventTransferParmTable)
    {
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        InventTransferId        inventTransferId = '';
        WMSOrderTrans           wmsOrderTrans;

        ttsbegin;

        while select wmsOrderTrans
            order by InventTransRefId, InventTransId, InventDimId asc //Done to optimize shipment - transit recepits are updated in reverse order
            where wmsOrderTrans.ShipmentId          == _wmsShipment.ShipmentId               &&
                  wmsOrderTrans.InventTransType     == InventTransType::TransferOrderShip   &&
                  wmsOrderTrans.ExpeditionStatus    == WMSExpeditionStatus::Complete
            exists join inventTransOrigin   // Filter by Picked transactions to avoid including already shipped lines in partial shipping scenarios
                where inventTransOrigin.InventTransId   == wmsOrderTrans.InventTransId
                join TableId from inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                       && inventTrans.StatusReceipt     == StatusReceipt::None
                       && inventTrans.StatusIssue       == StatusIssue::Picked
                       && inventTrans.PickingRouteID    == wmsOrderTrans.RouteId
        {
            if (this.mustBuildParmFromWMSShipmentLine(wmsOrderTrans))
            {
                if (inventTransferId != wmsOrderTrans.InventTransRefId)
                {
                    inventTransferId = wmsOrderTrans.InventTransRefId;

                    if (!transferLineNumMap.exists(inventTransferId))
                    {
                        transferLineNumMap.insert(inventTransferId, 0);
                    }

                    if (!InventTransferParmTable::exist(_inventTransferParmTable.ParmId, inventTransferId))
                    {
                        _inventTransferParmTable.clear();
                        //this will initialize values but will not insert the record
                        this.insert(_wmsShipment, _inventTransferParmTable);
                        _inventTransferParmTable.TransferId = inventTransferId;
                        _inventTransferParmTable.initWMSShipmentParameters();
                        _inventTransferParmTable.insert(false);//dont let this call create lines
                    }
                }

                this.buildParmFromWMSShipmentLine(wmsOrderTrans, _inventTransferParmTable);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventTransferParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>InventTransferParmLine</c> for building the WMS Shipment.
    /// </summary>
    /// <param name = "_inventTransferParmTable">The transfer parameter table</param>
    /// <param name = "_inventTransferLine">The transfer line.</param>
    /// <param name = "_wmsOrderTrans">The warehouse order line.</param>
    /// <returns>The <c>InventTransferParmLine</c>; if found.</returns>
    protected InventTransferParmLine findInventTransferParmLine(
        InventTransferParmTable _inventTransferParmTable,
        InventTransferLine _inventTransferLine,
        WmsOrderTrans _wmsOrderTrans)
    {
        InventTransferParmLine inventTransferParmLine;

        select forupdate firstonly inventTransferParmLine
            where inventTransferParmLine.ParmId         == _inventTransferParmTable.ParmId   &&
                  inventTransferParmLine.InventTransId  == _inventTransferLine.InventTransId &&
                  inventTransferParmLine.InventDimId    == _wmsOrderTrans.InventDimId;

        return inventTransferParmLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    public FormName formName()
    {
        return formStr(InventTransferParmShip);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer _inventTransferParmTable)
    {
        InventTransferParmTable   inventTransferParmTable = _inventTransferParmTable;
        super(inventTransferParmTable);
        inventTransferParmTable.UpdateType = InventTransferUpdateType::Shipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmFromWMSShipmentInternal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>InventTransferMultiShip</c> class from a container with the
    ///    packed <c>WMSShipment</c> records.
    /// </summary>
    /// <param name="_packedRecords">
    ///    A container that contains the packed records.
    /// </param>
    protected void initParmFromWMSShipmentInternal(container _packedRecords)
    {
        InventTransferParmTable     inventTransferParmTable     = this.defaultParmBuffer();
        InventTransferParmUpdate    inventTransferParmUpdate    = this.defaultParmUpdate();
        int                         recordCounter;

        transferLineNumMap = new Map(Types::String, Types::Integer); //Key = TransferID, Value = LineNum
        RunBaseMultiParm::initParm(this); //sets parm id

        //never use lateselection when called from WMS because record selection is not done based on a query
        inventTransferParmUpdate.initValue();
        inventTransferParmUpdate.ParmId             = parmId;
        inventTransferParmUpdate.LateSelection      = NoYes::No;
        inventTransferParmUpdate.LateSelectionQuery = conNull();
        inventTransferParmUpdate.insert();

        this.parmCalledFromWMS(true);

        inventTransferParmTable.LineNum = 0;

        for (recordCounter = conLen(_packedRecords); recordCounter >= 1; --recordCounter)
        {
            Common common = conPeek(_packedRecords, recordCounter);
            WMSShipment wmsShipment = common as WMSShipment;
            this.buildParmFromWMSShipment(wmsShipment,inventTransferParmTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmFromWMSShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>InventTransferMultiShip</c> class from a calling
    ///    <c>WMSShipment</c> form.
    /// </summary>
    /// <param name="_args">
    ///    An argument that represents the calling form.
    /// </param>
    protected void initParmFromWMSShipment(Args _args)
    {
        Common          common;
        container       packedRecords;

        if (_args && _args.dataset() && FormDataUtil::getFormDataSource(_args.record()))
        {
            FormDataSource formDataSource = FormDataUtil::getFormDataSource(_args.record());
            for (   common = formDataSource.getFirst(true) ? formDataSource.getFirst(true) : _args.record();
                    common;
                    common = formDataSource.getNext())
            {
                packedRecords += [common];
            }
        }

        this.unpackClientServerTransfer(InventTransferMultiShip::initParmFromWMSShipmentOnServer(
            this.packClientServerTransfer(),
            packedRecords));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmFromWMSShipmentSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates <c>ParmTables</c> and <c>ParmLines</c> based on the lines that where included in the
    ///    shipments passed in set.
    /// </summary>
    /// <param name="_shipmentIdSet">
    ///    A <c>Set</c> of shipment IDs.
    /// </param>
    protected void initParmFromWMSShipmentSet(Set _shipmentIdSet)
    {
        InventTransferParmTable inventTransferParmTable = this.defaultParmBuffer();

        transferLineNumMap = new Map(Types::String, Types::Integer); //Key = TransferID, Value = LineNum
        RunBaseMultiParm::initParm(this); //sets parm id
        this.parmCalledFromWMS(true);

        inventTransferParmTable.LineNum = 0;

        SetEnumerator se = _shipmentIdSet.getEnumerator();
        while (se.moveNext())
        {
            WMSShipment wmsShipment = WMSShipment::find(se.current());
            this.buildParmFromWMSShipment(wmsShipment,inventTransferParmTable);
        }//shipment loop
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueElementName</Name>
				<Source><![CDATA[
    public IdentifierName lastValueElementName()
    {
        IdentifierName ret;

        if (this.parmCalledFromWMS())
        {
            ret = identifierStr(inventTransferMultiShipWms);
        }
        else
        {
            ret = super();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        Query query = super();

        return (query ? query : new QueryRun(queryStr(InventTransferMultiShip)).query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instructs the batch framework that this class can run impersonating the user who requested the task
    /// </summary>
    /// <returns>
    ///    Always returns true as this class has been validated to be able to use impersonation
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructInventTransferUpdShip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventTransferUpdShip</c> class.
    /// </summary>
    /// <param name = "_inventTransferParmTable">The buffer for the construction.</param>
    /// <returns>A new instance of the <c>InventTransferUpdShip</c> class.</returns>
    protected InventTransferUpdShip constructInventTransferUpdShip(InventTransferParmTable _inventTransferParmTable)
    {
        InventTransferUpdShip inventTransferUpdShip = InventTransferUpdShip::newParmBuffer(_inventTransferParmTable);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            inventTransferUpdShip.parmDocNumberingCode_LT(ltDocNumberingCode);
        }

        return inventTransferUpdShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment.
    /// </summary>
    /// <param name = "_inventTransferUpdShip">The class performing the update.</param>
    protected void updateShipment(InventTransferUpdShip _inventTransferUpdShip)
    {
        _inventTransferUpdShip.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runUpdate</Name>
				<Source><![CDATA[
    public InventTransferPrintDataProvider runUpdate(InventTransferParmTable   _inventTransferParmTable)
    {
        InventTransferUpdShip inventTransferUpdShip = this.constructInventTransferUpdShip(_inventTransferParmTable);
        this.updateShipment(inventTransferUpdShip);

        InventTransferPrintDataProviderShip dataProvider;
        if (!isSkipCreatePrintDataProviderFlightEnabled ||
            this.isNeedPrintOut(_inventTransferParmTable, inventTransferUpdShip.parmInventTransferJour()))
        {
            dataProvider = InventTransferPrintDataProviderShip::construct();
            dataProvider.parmInventTransferJour(inventTransferUpdShip.parmInventTransferJour());
        }

        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTransferMultiShip construct()
    {
        InventTransferMultiShip inventTransferMultiShip = new InventTransferMultiShip();

        return inventTransferMultiShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS78234" + ' - ' + "@SYS50389";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmFromWMSShipmentOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Delegates the initialization of an instance of the <c>InventTransferMultiShip</c> class from a
    ///    calling <c>WMSShipment</c> form to the server tier.
    /// </summary>
    /// <param name="_packedClass">
    ///    A container from which to deserialize a class instance.
    /// </param>
    /// <param name="_packedRecords">
    ///    A container with a packed set of records.
    /// </param>
    /// <returns>
    ///    A container that contains a serialized current instance of the <c>InventTransferMultiShip</c> class.
    /// </returns>
    public static container initParmFromWMSShipmentOnServer(
        container   _packedClass,
        container   _packedRecords)
    {
        InventTransferMultiShip inventTransferMultiShip = InventTransferMultiShip::construct();

        inventTransferMultiShip.unpackClientServerTransfer(_packedClass);
        inventTransferMultiShip.initParmFromWMSShipmentInternal(_packedRecords);

        return inventTransferMultiShip.packClientServerTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args   _args)
    {
        InventTransferMultiShip inventTransferMultiShip = InventTransferMultiShip::construct();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(inventTransferMultiShip.formName(), _args.menuItemName()))
        {
            if (_args.parmEnum() == RunChoose::Run)
            {
                boolean doFormCache;

                switch ( _args.dataset())
                {
                    case tableNum(InventTransferTable)  :
                        inventTransferMultiShip.parmCalledFromWMS(false);
                        RunBaseMultiParm::initFromForm(inventTransferMultiShip, _args);
                        doFormCache = true;
                        break;

                    case tableNum(WMSShipment)          :
                        inventTransferMultiShip.initParmFromWMSShipment(_args);
                        doFormCache = false;
                        break;

                    default                             :
                        // Make sure parmId is set
                        RunBaseMultiParm::initParm(inventTransferMultiShip);
                        InventTransferParmUpdate inventTransferParmUpdate = inventTransferMultiShip.defaultParmUpdate();

                        // Init and insert overall update table for this update
                        inventTransferMultiShip.insertParmUpdate(inventTransferParmUpdate);
                        inventTransferMultiShip.parmCalledFromWMS(false);
                        break;
                }

                inventTransferMultiShip.mustShowTransferLinesOnLoadsWarning = inventTransferMultiShip.transferLinesOnLoadsExist();

                if (!inventTransferMultiShip.prompt())
                {
                    return;
                }

                inventTransferMultiShip.runOperation();
                inventTransferMultiShip.runReports();

                if (doFormCache && _args && _args.caller())
                {
                    Object formRun = _args.caller();
                    formRun.doFormCache(inventTransferMultiShip.packRecs());
                }
                // Print product labels from transfer order during ship
                RetailCreateSpecificLabel::PrintLabels(_args, InventTransferStatus::Shipped, inventTransferMultiShip.parmId());
            }
            else
            {
                RunBaseMultiParm::runSpecial(_args);
                // After re-selecting transfers to ship, find the InventTransferMultiShip from caller
                if (_args.caller() && _args.caller().name() == formStr(InventTransferParmShip))
                {
                    inventTransferMultiShip = _args.caller().runBase() as InventTransferMultiShip;
                    if (inventTransferMultiShip && inventTransferMultiShip.transferLinesOnLoadsExist())
                    {
                        inventTransferMultiShip.showTransferLinesOnLoadsWarning();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWMSShipmentIdSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Instantiates a new instance of the <c>InventTransferMultiShip</c> class.
    /// </summary>
    /// <param name="_shipmentIdSet">
    ///    A <c>Set</c> of shipment IDs.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventTransferMultiShip</c> class.
    /// </returns>
    public static InventTransferMultiShip newWMSShipmentIdSet(Set _shipmentIdSet)
    {
        InventTransferMultiShip inventTransferMultiShip = InventTransferMultiShip::construct();

        inventTransferMultiShip.initParmFromWMSShipmentSet(_shipmentIdSet);
        return inventTransferMultiShip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferLinesOnLoadsExist</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if any transfer orders in this update have lines associated with loads.
    /// </summary>
    /// <returns>true if transfer orders have lines on loads; otherwise, false</returns>
    protected boolean transferLinesOnLoadsExist()
    {
        WHSLoadLine loadLine;
        InventTransferLine transferLine;
        InventTransferTable transferOrder;
        InventTransferParmTable transferParm;

        select firstonly loadLine
            where loadLine.InventTransType == InventTransType::TransferOrderShip
            exists join transferLine
                where transferLine.InventTransId == loadLine.InventTransId                    
            exists join transferParm
                where transferParm.TransferId == transferLine.TransferId
                    && transferParm.ParmId == this.parmId();

        return (loadLine.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTransferLinesOnLoadsWarning</Name>
				<Source><![CDATA[
    private void showTransferLinesOnLoadsWarning()
    {
        warning("@WAX:Message_TransferLinesToShipOnLoad");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays a warning about transfer order lines on loads if needed.
    /// </summary>
    /// <param name = "dialog">The dialog.</param>
    protected void dialogPost(Object dialog)
    {
        super(dialog);

        if (mustShowTransferLinesOnLoadsWarning)
        {
            this.showTransferLinesOnLoadsWarning();
            mustShowTransferLinesOnLoadsWarning = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNeedPrintout</Name>
				<Source><![CDATA[
    private boolean isNeedPrintout(InventTransferParmTable _inventTransferParmTable, InventTransferJour _inventTransferJour)
    {
        #ISOCountryRegionCodes

        if (_inventTransferParmTable.PrintTransferShipment)
        {
            return true;
        }

        // <GTE><GIN>
        if(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && _inventTransferParmTable.inventTransferParmTable_IN().PrintGSTTransferInvoice
            && TaxGSTInvoiceHelper_IN::isGSTInvoice(_inventTransferParmTable))
        {
            return true;            
        }
        // </GTE></GIN>

        // <GIN>
        if (TaxParameters::isExciseEnable_IN() && _inventTransferParmTable.inventTransferParmTable_IN().PrintExciseTransferInvoice)
        {
            return true;
        }
        // </GIN>

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (_inventTransferParmTable.PrintBillOfLading_RU && _inventTransferJour.BillOfLadingId_RU)
            {
                return true;
            }

            if (_inventTransferParmTable.PrintInvoice_RU &&
                _inventTransferParmTable.ShipUpdateQty != InventTransferShipUpdateQty::DocumentReturn_RU)
            {
                return true;
            }

            if (_inventTransferParmTable.PrintTransportInvoice_RU && _inventTransferJour.BillOfLadingId_RU)
            {
                return true;
            }
        }
        // </GEERU>

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>