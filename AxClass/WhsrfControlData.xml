<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSRFControlData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsrfControlData</c> class contains the validation logic for the data passed from RF controls.
/// </summary>
using System.Globalization;
public class  WhsrfControlData
{
    #WHSRF
    #WHSWorkExecuteControlElements
    #WHSWorkExecuteDisplayCases
    #define.SortVerification(4)

    // Unique state
    WHSWorkExecuteMode              mode;
    int                             step;
    WHSRFColorText                  colorText;
    WHSRFPassthrough                pass;
    WHSRFPassthrough                fieldValues;
    str                             errorMessage;
    WhsWorkExecuteDisplay           workExecuteDisplay;
    NoYes                           defaulting;
    WHSMenuItemName                 menuItemName;
    WHSWorkLine                     workLine;
    InventDimParm                   inventDimParmItem;

    // Redundant state - also present in fieldValues
    WMSLocationId                   locationId;                 //Aligned with fieldValues.
    WHSLicensePlateId               targetLicensePlateId;
    UnitOfMeasureSymbol             uom;                        //Aligned with fieldValues.
    WHSWorkId                       workId;
    KanbanId                        kanbanId;
    KanbanCardId                    kanbanCardId;
    WMSCheckText                    checkDigit;
    WHSInventStatusId               fromInventStatusId;
    InventProfileId_RU              inventProfileId;
    InventOwnerId_RU                inventOwnerId;              //Aligned with fieldValues.
    InventGTDId_RU                  inventGtdId;
    InventSiteId                    inventSiteId;               //Aligned with fieldValues.
    InventLocationId                inventLocationId;           //Aligned with fieldValues.
    EcoResItemColorName             inventColorId;
    EcoResItemSizeName              inventSizeId;
    EcoResItemStyleName             inventStyleId;
    EcoResItemVersionName           inventVersionId;
    EcoResItemConfigurationName     inventConfigId;
    PurchId                         purchId;
    InventTransferId                transferId;
    [SysObsolete('The field has been deprecated and replaced with a local variable.', false, 27\02\2023)]
    TradeLineNumber                 poLineNum;
    LineNumber                      toLineNum;
    Qty                             batchQty;
    WHSInventStatusId               inventoryStatusSelectedOnControl;
    boolean                         saveUOMValue;
    private boolean                 saveQtyValue;
    public  boolean                 qtyDefaultedFromScan;
    private WHSContainerId			containerId;

    [SysObsolete('Use the values saved in fieldValues instead', false, 1\02\2020)]
    ProdId                          prodId;

    public static const str WorkLineUOMRecId = 'WorkLineUOMRecId';
    public static const str WorkLineUOM = 'WorkLineUOM';

    [SysObsolete('Use WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmUOM instead', false, 30\06\2020)]
    public static const str PieceByPieceConfirmUOM = 'PieceByPieceConfirmUOM';

    // Flights that determine the selection of the parser used (extensible parser factory, GS1 enhanced parser or the legacy GS1 parser)
    // After removing WHSBarcodeDataParserExtensibilityV2Flight, check if WHSParameters::isGS1Enabled() should be removed as well
    private static boolean ShouldUseExtensibleBarcodeDataParser = WHSBarcodeDataParserExtensibilityV2Flight::instance().isEnabled();    
    private static boolean ShouldUseNewGS1Parser = !ShouldUseExtensibleBarcodeDataParser && WHSParameters::isGS1Enabled();
    private static boolean ShouldUseOriginalGS1Parser = !ShouldUseNewGS1Parser && WHSParameters::isGS1Enabled();

    private static boolean IsControlSkipProcessingBlankValueFlightEnabled = WHSControlSkipProcessingBlankValueV2Flight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmLicensePlateId</Name>
				<Source><![CDATA[
    public WHSLicensePlateId parmLicensePlateId()
    {
        return fieldValues.parmLicensePlateId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromInventStatusId</Name>
				<Source><![CDATA[
    public WHSInventStatusId parmFromInventStatusId(WHSInventStatusId _fromInventStatusId = fromInventStatusId)
    {
        fromInventStatusId = _fromInventStatusId;
        return fromInventStatusId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal final WHSContainerId parmContainerId(WHSContainerId _containerId = containerId)
    {
        containerId = _containerId;
        return containerId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmErrorMessage</Name>
				<Source><![CDATA[
    public str parmErrorMessage()
    {
        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the number of decimals fits within the allowed number of decimals for the item.
    /// </summary>
    /// <param name="_itemId">
    /// The current item id.
    /// </param>
    /// <param name="_qty">
    /// The current quantity.
    /// </param>
    /// <returns>
    /// true if valid; otherwise, false.
    /// </returns>
    private boolean checkDecimals(ItemId _itemId, Qty _qty)
    {
        if (numOfDec(_qty) > InventTable::inventDecimals(_itemId))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimForFindingBatchInLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the inventory dimensions for checking whether an item with the same batch id exists in the location specified in RF pass through.
    /// </summary>
    /// <param name="_inventBatchId">
    /// Batch id of the item.
    /// </param>
    /// <returns>
    /// The inventory dimensions to look for.
    /// </returns>
    protected InventDim inventDimForFindingBatchInLocation(InventBatchId _inventBatchId)
    {
        InventDim   inventDim;

        if (pass.exists(#InventSiteId))
        {
            inventDim.InventSiteId = pass.lookup(#InventSiteId);
        }
        else
        {
            inventDim.InventSiteId = inventSiteId;
        }

        if (pass.exists(#InventLocationId))
        {
            inventDim.InventLocationId = pass.lookup(#InventLocationId);
        }
        else
        {
            inventDim.InventLocationId = inventLocationId;
        }

        if (pass.exists(#WMSLocationId))
        {
            inventDim.wmsLocationId = pass.lookup(#WMSLocationId);
        }
        else
        {
            inventDim.wmsLocationId = locationId;
        }

        if (fieldValues.parmLicensePlateId())
        {
            inventDim.LicensePlateId = fieldValues.parmLicensePlateId();
        }
        else if (pass.exists(#LicensePlateId))
        {
            inventDim.LicensePlateId = pass.lookup(#LicensePlateId);
        }

        inventDim.initFromInventDim(workLine.inventDim(), InventDim::dimProductDimensionEnabledFieldList());
        this.initInventDimProductDimFromMembers(inventDim);

        if (pass.exists(#SerialId)
            && !pass.exists(#CaptureSerialNumberAtPacking))
        {
            inventDim.InventSerialId = pass.lookup(#SerialId);
        }

        if (workLine.inventDim().InventStatusId)
        {
            inventDim.InventStatusId = workLine.inventDim().InventStatusId;
        }

        if (mode == WHSWorkExecuteMode::MovementByTemplate && pass.exists(#SelectedFromValue))
        {
            if (pass.lookup(#SelectedFromValue) != '')
            {
                if (WHSInventStatus::find(pass.lookup(#SelectedFromValue)))
                {
                    inventDim.InventStatusId = pass.lookup(#SelectedFromValue);
                }
            }
            else
            {
                inventDim.InventStatusId = this.parmFromInventStatusId();
            }
        }
        else if (mode != WHSWorkExecuteMode::AdjustmentOut && pass.exists(#SelectedValue))
        {
            if (pass.lookup(#SelectedValue) != '')
            {
                if (WHSInventStatus::find(pass.lookup(#SelectedValue)))
                {
                    inventDim.InventStatusId = pass.lookup(#SelectedValue);
                }
            }
            else
            {
                inventDim.InventStatusId = this.parmFromInventStatusId();
            }
        }

        if (mode == WHSWorkExecuteMode::AdjustmentOut && pass.exists(#InventoryStatus))
        {
            if (pass.lookup(#InventoryStatus) != '')
            {
                inventDim.InventStatusId = pass.lookup(#InventoryStatus);
            }
            else
            {
                inventDim.InventStatusId = this.parmFromInventStatusId();
            }
        }

        inventDim.InventBatchId = _inventBatchId;
        
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchExistInLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an item with the same batch id exists in the location specified in RF pass through.
    /// </summary>
    /// <param name="_inventBatchId">
    /// Batch id of the item.
    /// </param>
    /// <returns>
    /// true if an item with the same batch id exists in the location.
    /// </returns>
    boolean batchExistInLocation(InventBatchId _inventBatchId)
    {
        InventDim inventDim = this.inventDimForFindingBatchInLocation(_inventBatchId);
        inventDim = InventDim::findOrCreate(inventDim);

        ItemId itemId = fieldValues.parmItemId();
        if (WHSInventOnHand::getWorkPhysicalInventHandlingQty(itemId ? itemId : workLine.ItemId, inventDim.InventDimId) > 0)
        {
            return true;
        }

        if (InventTable::find(itemId).whsAllowPhysNeg() && inventDim.wmsLocation().whsLocationProfile().AllowNegative)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCarrierByName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds carrier record by carrier name.
    /// </summary>
    /// <param name="_name">
    /// Name of the carrier.
    /// </param>
    /// <returns>
    /// Carrier record.
    /// </returns>
    TMSCarrier findCarrierByName(TMSName _name)
    {
        TMSCarrier  carrier;

        select carrier
            where carrier.Name == _name;

        return carrier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds InventDim record specified by the dimensions set in the map.
    /// </summary>
    /// <param name = "_overrideLoc">
    /// true if the location should be overridden; otherwise, false. Optional.
    /// </param>
    /// <returns>
    /// The InventDim record.
    /// </returns>
    InventDimId findInventDimId(boolean _overrideLoc = false)
    {
        InventDim       inventDim;

        this.findInventDim(inventDim, _overrideLoc);

        inventDim = InventDim::findOrCreate(inventDim);

        return inventDim.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDimIdInclWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds InventDim record by combining the dimensions set in the map, with the work line dimensions.
    /// </summary>
    /// <returns>
    /// The InventDim record.
    /// </returns>
    public InventDimId findInventDimIdInclWorkLine()
    {
        InventDim inventDim = workLine.inventDim();
        
        this.findInventDim(inventDim);

        inventDim = InventDim::findOrCreate(inventDim);

        return InventDim.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDim</Name>
				<Source><![CDATA[
    private void findInventDim(InventDim _inventDim, boolean _overrideLoc = false)
    {
        this.initInventDimProductDimFromMembers(_inventDim);
        this.initInventDimStorageDimFromMembers(_inventDim);
        this.initInventDimTrackingDimFromMembers(_inventDim);

        if (!_inventDim.wmsLocationId ||  _overrideLoc)
        {
            _inventDim.wmsLocationId = this.findLocationByLicensePlate(fieldValues.parmLicensePlateId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocationByLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a location of the specified license plate.
    /// </summary>
    /// <param name="_licensePlateId">
    /// A license plate ID.
    /// </param>
    /// <param name="_includePicked">
    /// A boolean flag to identify whether picked location should be considered.
    /// </param>
    /// <returns>
    /// The warehouse location Id. If no license plate is passed a blank location Id is returned.
    /// </returns>
    [SysObsolete('Use WhsrfControlData::findLocationByLP() instead.', false, 19\03\2020)]
    public WMSLocationId findLocationByLicensePlate(WHSLicensePlateId  _licensePlateId, boolean _includePicked = false)
    {
        return WhsrfControlData::findLocationByLP(_licensePlateId, inventLocationId, _includePicked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocationByLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a location of the specified license plate.
    /// </summary>
    /// <param name="_licensePlateId">A license plate ID.</param>
    /// <param name="_inventLocationId">Inventory location ID.</param>
    /// <param name="_includePicked">A boolean flag to identify whether picked location should be considered.</param>
    /// <returns>
    /// The warehouse location Id. If no license plate is passed a blank location Id is returned.
    /// </returns>
    static public WMSLocationId findLocationByLP(WHSLicensePlateId  _licensePlateId, InventLocationId _inventLocationId, boolean _includePicked = false)
    {
        InventSum   inventSum;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (_licensePlateId)
            {
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    PDSCatchWeightItem catchWeightItem;

                    select firstonly wmsLocationId from inventSum
                    where inventSum.InventLocationId    == _inventLocationId
                        && inventSum.LicensePlateId     == _licensePlateId
                            && inventSum.ClosedQty      == NoYes::No
                            && (inventSum.PhysicalInvent     > 0
                            || (_includePicked && inventSum.PhysicalInvent == 0 && inventSum.Picked > 0))
                            notexists join catchWeightItem
                                where catchWeightItem.ItemId == inventSum.ItemId;

                    if (!inventSum.wMSLocationId)
                    {
                        select firstonly wmsLocationId from inventSum
                        where inventSum.InventLocationId    == _inventLocationId
                            && inventSum.LicensePlateId     == _licensePlateId
                                && inventSum.ClosedQty      == NoYes::No
                                && (inventSum.PdsCWPhysicalInvent   > 0
                                || (_includePicked && inventSum.PdsCWPhysicalInvent == 0 && inventSum.PdsCWPicked > 0))
                                exists join catchWeightItem
                                    where catchWeightItem.ItemId == inventSum.ItemId;
                    }
                }
                else
                {
                    select firstonly wmsLocationId from inventSum
                    where inventSum.InventLocationId    == _inventLocationId
                        && inventSum.LicensePlateId     == _licensePlateId
                            && inventSum.ClosedQty      == NoYes::No
                            && (inventSum.PhysicalInvent     > 0
                                || (_includePicked && inventSum.PhysicalInvent == 0 && inventSum.Picked > 0));
                }
            }
        
            return inventSum.wmsLocationId;
        }
        else
        {
            InventDim   inventDim;

            if (_licensePlateId)
            {
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    PDSCatchWeightItem catchWeightItem;

                    select firstonly wmsLocationId from inventDim
                    where inventDim.InventLocationId    == _inventLocationId
                        && inventDim.LicensePlateId     == _licensePlateId
                    exists join inventSum
                        where inventSum.InventDimId     == inventDim.InventDimId
                            && inventSum.ClosedQty      == NoYes::No
                            && (inventSum.PhysicalInvent     > 0
                            || (_includePicked && inventSum.PhysicalInvent == 0 && inventSum.Picked > 0))
                            notexists join catchWeightItem
                                where catchWeightItem.ItemId == inventSum.ItemId;

                    if (!inventDim.wMSLocationId)
                    {
                        select firstonly wmsLocationId from inventDim
                        where inventDim.InventLocationId    == _inventLocationId
                            && inventDim.LicensePlateId     == _licensePlateId
                        exists join inventSum
                            where inventSum.InventDimId     == inventDim.InventDimId
                                && inventSum.ClosedQty      == NoYes::No
                                && (inventSum.PdsCWPhysicalInvent   > 0
                                || (_includePicked && inventSum.PdsCWPhysicalInvent == 0 && inventSum.PdsCWPicked > 0))
                                exists join catchWeightItem
                                    where catchWeightItem.ItemId == inventSum.ItemId;
                    }
                }
                else
                {
                    select firstonly wmsLocationId from inventDim
                    where inventDim.InventLocationId    == _inventLocationId
                        && inventDim.LicensePlateId     == _licensePlateId
                    exists join inventSum
                        where inventSum.InventDimId     == inventDim.InventDimId
                            && inventSum.ClosedQty      == NoYes::No
                            && (inventSum.PhysicalInvent     > 0
                                || (_includePicked && inventSum.PhysicalInvent == 0 && inventSum.Picked > 0));
                }
            }
        
            return inventDim.wmsLocationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLocationByNestedPlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds location of nested license plate
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate ID.
    /// </param>
    /// <returns>
    /// The warehouse location ID.
    /// </returns>
    WMSLocationId findLocationByNestedPlate(WHSLicensePlateId   _licensePlateId)
    {
        WHSLicensePlate childLicensePlate;
        WMSLocationId   ret;

        while select LicensePlateId from childLicensePlate
            where childLicensePlate.LicensePlateParent == _licensePlateId
        {
            WMSLocation location = WHSLicensePlate::getWMSLocationWithOnHand(childLicensePlate.LicensePlateId);

            if (location)
            {
                ret = location.wMSLocationId;
                break;
            }
            else
            {
                ret = this.findLocationByNestedPlate(childLicensePlate.LicensePlateId);

                if (ret)
                {
                    break;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCheckDigit</Name>
				<Source><![CDATA[
    private str getCheckDigit()
    {
        str     ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColorId</Name>
				<Source><![CDATA[
    private str getColorId()
    {
        return this.getValueFromInventDimField(fieldNum(InventDim, InventColorId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConfigId</Name>
				<Source><![CDATA[
    private str getConfigId()
    {
        return this.getValueFromInventDimField(fieldNum(InventDim, ConfigId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGtdId</Name>
				<Source><![CDATA[
    private str getGtdId()
    {
        return this.getValueFromInventDimField(fieldNum(InventDim, InventGtdId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultValue</Name>
				<Source><![CDATA[
    private WHSDefaultDataValue getDefaultValue(WHSDefaultDataField _defaultDataField)
    {
        WHSDefaultDataValue defaultDataValue = '';
        if (defaulting)
        {
            defaultDataValue = WHSRFDefaultData::getDefaultValue(menuItemName,
                                                            _defaultDataField,
                                                            pass.lookup(#UserId),
                                                            inventLocationId,
                                                            locationId);
        }
        return defaultDataValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventStatusId</Name>
				<Source><![CDATA[
    public WHSInventStatusId getInventStatusId()
    {
        InventDim     inventDim;
        InventSum     inventSum;
        InventDim     inventDimCriteria;
        InventDimParm inventDimParm;
        WHSDefaultDataValue defaultDataValue;

        inventDimParm.setAllProductDimensions();
        this.initInventDimProductDimFromMembers(inventDimCriteria);

        if (InventUseDimOfInventSumToggle::instance().isEnabled() && InventUseDimOfInventSumDeltaToggle::instance().isEnabled())
        {
            WHSInventStatusId inventStatusId;

            ttsbegin;

            if (pass.lookupStr(#FromInventoryStatus) == '')
            {
                defaultDataValue = this.getDefaultValue(WHSDefaultDataField::FromInventStatus);
                if (defaultDataValue)
                {
                    inventDimCriteria.InventStatusId = defaultDataValue;
                    inventDimParm.InventStatusFlag = NoYes::Yes;
                }
            }

            if (fieldValues.parmLicensePlateId() && fieldValues.parmItemId())
            {
                if (InventUpdateOnhandGlobal::mustAddInventSumDeltaOnhand(fieldValues.parmItemId()))
                {
                    InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty    inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty;

                    select inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty
                        where #InventDimFieldsFilter(inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, inventDimCriteria, inventDimParm)    &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.LicensePlateId       == fieldValues.parmLicensePlateId()     &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.InventSiteId         == inventSiteId                         &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.InventLocationId     == inventLocationId                     &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.ItemId               == fieldValues.parmItemId()             &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.PhysicalInvent       > 0;

                    inventStatusId = inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.InventStatusId;
                }
                else
                {
                    select inventSum
                        where #InventDimFieldsFilter(inventSum, inventDimCriteria, inventDimParm)   &&
                              inventSum.LicensePlateId      == fieldValues.parmLicensePlateId()     &&
                              inventSum.InventSiteId        == inventSiteId                         &&
                              inventSum.InventLocationId    == inventLocationId                     &&
                              inventSum.ItemId              == fieldValues.parmItemId()             &&
                              inventSum.ClosedQty           == NoYes::No                            &&
                              inventSum.PhysicalInvent      > 0;

                    inventStatusId = inventSum.InventStatusId;
                }
            }
            else if (fieldValues.parmLicensePlateId())
            {
                
                inventDimParm.clearProductDimensions();

                if (InventUpdateOnhandGlobal::instance().inventUpdateOnhand().mustAddAnyInventSumDeltaOnhand())
                {
                    InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty    inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty;

                    select inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty
                        where #InventDimFieldsFilter(inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, inventDimCriteria, inventDimParm)    &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.LicensePlateId       == fieldValues.parmLicensePlateId()     &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.InventSiteId         == inventSiteId                         &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.InventLocationId     == inventLocationId                     &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.PhysicalInvent       > 0;

                    inventStatusId = inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.InventStatusId;
                }
                else
                {
                    select inventSum
                        where #InventDimFieldsFilter(inventSum, inventDimCriteria, inventDimParm)   &&
                              inventSum.LicensePlateId      == fieldValues.parmLicensePlateId()     &&
                              inventSum.InventSiteId        == inventSiteId                         &&
                              inventSum.InventLocationId    == inventLocationId                     &&
                              inventSum.ClosedQty           == NoYes::No                            &&
                              inventSum.PhysicalInvent      > 0;

                    inventStatusId = inventSum.InventStatusId;
                }
            }
            else if (locationId)
            {
                inventDimParm.setAllTrackingDimensions();
                this.initInventDimTrackingDimFromMembers(inventDimCriteria);

                if (InventUpdateOnhandGlobal::mustAddInventSumDeltaOnhand(fieldValues.parmItemId()))
                {
                    InventSumWithInventDimUnionDeltaWithInventDimPhysicalQty    inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty;

                    select inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty
                        where #InventDimFieldsFilter(inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty, inventDimCriteria, inventDimParm)    &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.wmsLocationId        == locationId                           &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.InventSiteId         == inventSiteId                         &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.InventLocationId     == inventLocationId                     &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.ItemId               == fieldValues.parmItemId()             &&
                              inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.PhysicalInvent       > 0;

                    inventStatusId = inventSumWithInventDimUnionDeltaWithInventDimPhysicalQty.InventStatusId;
                }
                else
                {
                    select inventSum
                        where #InventDimFieldsFilter(inventSum, inventDimCriteria, inventDimParm)   &&
                              inventSum.wmsLocationId       == locationId                           &&
                              inventSum.InventSiteId        == inventSiteId                         &&
                              inventSum.InventLocationId    == inventLocationId                     &&
                              inventSum.ItemId              == fieldValues.parmItemId()             &&
                              inventSum.ClosedQty           == NoYes::No                            &&
                              inventSum.PhysicalInvent      > 0;

                    inventStatusId = inventSum.InventStatusId;
                }
            }

            ttscommit;

            return inventStatusId;
        }
        else
        {
            ttsbegin;

            if (pass.lookupStr(#FromInventoryStatus) == '')
            {
                defaultDataValue = this.getDefaultValue(WHSDefaultDataField::FromInventStatus);
                if (defaultDataValue)
                {
                    inventDimCriteria.InventStatusId = defaultDataValue;
                    inventDimParm.InventStatusFlag = NoYes::Yes;
                }
            }

            if (fieldValues.parmLicensePlateId() && fieldValues.parmItemId())
            {
                if (InventUpdateOnhandGlobal::mustAddInventSumDeltaOnhand(fieldValues.parmItemId()))
                {
                    InventSumUnionDeltaPhysicalQty  inventSumUnionDeltaPhysicalQty;

                    #InventDimSelect(inventDim, inventDimCriteria, inventDimParm)                       &&
                    inventDim.LicensePlateId       == fieldValues.parmLicensePlateId()                  &&
                    inventDim.InventSiteId         == inventSiteId                                      &&
                    inventDim.InventLocationId     == inventLocationId
                    exists join inventSumUnionDeltaPhysicalQty
                        where inventSumUnionDeltaPhysicalQty.InventDimId    == inventDim.inventDimId    &&
                            inventSumUnionDeltaPhysicalQty.ItemId           == fieldValues.parmItemId() &&
                            inventSumUnionDeltaPhysicalQty.PhysicalInvent   > 0;
                }
                else
                {
                    #InventDimSelect(inventDim, inventDimCriteria, inventDimParm)       &&
                    inventDim.LicensePlateId       == fieldValues.parmLicensePlateId()  &&
                    inventDim.InventSiteId         == inventSiteId                      &&
                    inventDim.InventLocationId     == inventLocationId
                    exists join inventSum
                        where inventSum.InventDimId     == inventDim.InventDimId        &&
                            inventSum.ItemId            == fieldValues.parmItemId()     &&
                            inventSum.ClosedQty         == NoYes::No                    &&
                            inventSum.PhysicalInvent    > 0;
                }
            }
            else if (fieldValues.parmLicensePlateId())
            {
                if (InventUpdateOnhandGlobal::instance().inventUpdateOnhand().mustAddAnyInventSumDeltaOnhand())
                {
                    InventSumUnionDeltaPhysicalQty  inventSumUnionDeltaPhysicalQty;

                    #InventDimSelect(inventDim, inventDimCriteria, inventDimParm)                       &&
                    inventDim.LicensePlateId       == fieldValues.parmLicensePlateId()                  &&
                    inventDim.InventSiteId         == inventSiteId                                      &&
                    inventDim.InventLocationId     == inventLocationId
                    exists join inventSumUnionDeltaPhysicalQty
                        where inventSumUnionDeltaPhysicalQty.InventDimId    == inventDim.inventDimId    &&
                            inventSumUnionDeltaPhysicalQty.PhysicalInvent   > 0;
                }
                else
                {
                    #InventDimSelect(inventDim, inventDimCriteria, inventDimParm)       &&
                    inventDim.LicensePlateId       == fieldValues.parmLicensePlateId()  &&
                    inventDim.InventSiteId         == inventSiteId                      &&
                    inventDim.InventLocationId     == inventLocationId
                    exists join inventSum
                        where inventSum.InventDimId     == inventDim.InventDimId        &&
                            inventSum.ClosedQty         == NoYes::No                    &&
                            inventSum.PhysicalInvent    > 0;
                }
            }
            else if (locationId)
            {
                inventDimParm.setAllTrackingDimensions();
                this.initInventDimTrackingDimFromMembers(inventDimCriteria);

                if (InventUpdateOnhandGlobal::mustAddInventSumDeltaOnhand(fieldValues.parmItemId()))
                {
                    InventSumUnionDeltaPhysicalQty  inventSumUnionDeltaPhysicalQty;

                    #InventDimSelect(inventDim, inventDimCriteria, inventDimParm)                       &&
                    inventDim.wmsLocationId        == locationId                                        &&
                    inventDim.InventSiteId         == inventSiteId                                      &&
                    inventDim.InventLocationId     == inventLocationId
                    exists join inventSumUnionDeltaPhysicalQty
                        where inventSumUnionDeltaPhysicalQty.InventDimId    == inventDim.inventDimId    &&
                            inventSumUnionDeltaPhysicalQty.ItemId           == fieldValues.parmItemId() &&
                            inventSumUnionDeltaPhysicalQty.PhysicalInvent   > 0;
                }
                else
                {
                    #InventDimSelect(inventDim, inventDimCriteria, inventDimParm)       &&
                    inventDim.wmsLocationId        == locationId                        &&
                    inventDim.InventSiteId         == inventSiteId                      &&
                    inventDim.InventLocationId     == inventLocationId
                    exists join inventSum
                        where inventSum.InventDimId    == inventDim.InventDimId         &&
                            inventSum.PhysicalInvent  > 0                               &&
                            inventSum.ItemId         == fieldValues.parmItemId()        &&
                            inventSum.ClosedQty      == NoYes::No;
                }
            }

            ttscommit;

            return inventDim.InventStatusId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    public ItemId getItemId()
    {
        InventDim           inventDim;
        InventSum           inventSum;
        ItemId              tmpItemId;
        str                 ret;

        ttsbegin;

        if (fieldValues.parmLicensePlateId())
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select ItemId from inventSum
                group by ItemId
                where inventSum.ClosedQty == NoYes::No
                    && inventSum.PhysicalInvent > 0
                    && inventSum.LicensePlateId     == fieldValues.parmLicensePlateId()
                    && inventSum.InventLocationId   == inventLocationId;
            }
            else
            {
                select ItemId from inventSum
                group by ItemId
                where inventSum.ClosedQty == NoYes::No
                    && inventSum.PhysicalInvent > 0
                exists join inventDim
                    where inventDim.InventDimId         == inventSum.InventDimId
                        && inventDim.LicensePlateId     == fieldValues.parmLicensePlateId()
                        && inventDim.InventLocationId   == inventLocationId;
            }
        }
        else if (locationId)
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select ItemId from inventSum
                group by ItemId
                where inventSum.ClosedQty == NoYes::No
                    && inventSum.PhysicalInvent > 0
                    && inventSum.wmsLocationId      == locationId
                    && inventSum.InventLocationId   == inventLocationId;
            }
            else
            {
                select ItemId from inventSum
                group by ItemId
                where inventSum.ClosedQty == NoYes::No
                    && inventSum.PhysicalInvent > 0
                exists join inventDim
                    where inventSum.InventDimId         == inventDim.InventDimId
                        && inventDim.wmsLocationId      == locationId
                        && inventDim.InventLocationId   == inventLocationId;
            }
        }

        while (inventSum)
        {
            // Do not default catch weight enabled item if there is no physical handling unit.
            if (this.isCatchWeightItem(inventSum.ItemId) && inventSum.PdsCWPhysicalInvent == 0)
            {
                next inventSum;
                continue;
            }

            if (tmpItemId != '' && tmpItemId != inventSum.ItemId)
            {
                ret = '';
                break;
            }
            else
            {
                ret = inventSum.ItemId;
            }

            tmpItemId = inventSum.ItemId;
            next inventSum;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the item ID of the kanban.
    /// </summary>
    /// <returns>
    ///    The item ID of the kanban.
    /// </returns>
    private ItemId getKanbanItemId()
    {
        ItemId  kanbanItemId;

        if (kanbanId)
        {
            kanbanItemId = Kanban::findKanbanId(kanbanId).ItemId;
        }

        return kanbanItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the process quantity of the kanban.
    /// </summary>
    /// <returns>
    ///    The process quantity of the kanban.
    /// </returns>
    private InventQty getKanbanQty()
    {
        Kanban      kanban;
        KanbanJob   kanbanJob;
        InventQty   inventQty;

        if (kanbanId)
        {
            kanban    = Kanban::findKanbanId(kanbanId);
            kanbanJob = kanban.lastKanbanJob();
            inventQty = kanbanJob.QuantityOrdered;
        }

        return inventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getKanbanUOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory unit of measure for the kanban item.
    /// </summary>
    /// <returns>
    ///    The inventory unit of measure for the kanban item.
    /// </returns>
    private str getKanbanUOM()
    {
        InventUnitId    unitId;
        ItemId          kanbanItemId;

        ItemId itemId = fieldValues.parmItemId();

        if (   itemId
            || kanbanId)
        {
            kanbanItemId = itemId ? itemId : Kanban::findKanbanId(kanbanId).ItemId;
            unitId       = InventTableModule::find(kanbanItemId,ModuleInventPurchSales::Invent).UnitId;
        }

        return unitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLicensePlateId</Name>
				<Source><![CDATA[
    public str getLicensePlateId()
    {
        WHSLicensePlateId   tmpLicensePlateId;
        InventDim           inventDim;
        InventSum           inventSum;
        str                 ret;
        ItemId              itemId = fieldValues.parmItemId();

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (locationId && itemId)
            {
                if (this.isCatchWeightItem(itemId))
                {
                    while select LicensePlateId from inventSum
                        group by LicensePlateId
                        where inventSum.InventSiteId            == inventSiteId     &&
                              inventSum.InventLocationId        == inventLocationId &&
                              inventSum.wmsLocationId           == locationId       &&
                              inventSum.LicensePlateId          != ''               &&
                              inventSum.ClosedQty               == NoYes::No        &&
                              inventSum.ItemId                  == itemId           &&
                              inventSum.PdsCWPhysicalInvent     > 0
                    {
                        if (tmpLicensePlateId != '' && tmpLicensePlateId != inventSum.LicensePlateId)
                        {
                            ret = '';
                            break;
                        }
                        else
                        {
                            ret = inventSum.LicensePlateId;
                        }

                        tmpLicensePlateId = inventSum.LicensePlateId;
                    }
                }
                else
                {
                    while select LicensePlateId from inventSum
                        group by LicensePlateId
                        where inventSum.InventSiteId        == inventSiteId     &&
                              inventSum.InventLocationId    == inventLocationId &&
                              inventSum.wmsLocationId       == locationId       &&
                              inventSum.LicensePlateId      != ''               &&
                              inventSum.ClosedQty           == NoYes::No        &&
                              inventSum.ItemId              == itemId           &&
                              inventSum.PhysicalInvent      > 0
                    {
                        if (tmpLicensePlateId != '' && tmpLicensePlateId != inventSum.LicensePlateId)
                        {
                            ret = '';
                            break;
                        }
                        else
                        {
                            ret = inventSum.LicensePlateId;
                        }

                        tmpLicensePlateId = inventSum.LicensePlateId;
                    }
                }
            }
            else if (locationId)
            {
                while select LicensePlateId from inventSum
                    group by LicensePlateId
                    where inventSum.InventSiteId        == inventSiteId     &&
                          inventSum.InventLocationId    == inventLocationId &&
                          inventSum.wmsLocationId       == locationId       &&
                          inventSum.LicensePlateId      != ''               &&
                          inventSum.ClosedQty           == NoYes::No        &&
                          inventSum.PhysicalInvent      > 0
                {
                    if (tmpLicensePlateId != '' && tmpLicensePlateId != inventSum.LicensePlateId)
                    {
                        ret = '';
                        break;
                    }
                    else
                    {
                        ret = inventSum.LicensePlateId;
                    }

                    tmpLicensePlateId = inventSum.LicensePlateId;
                }
            }
        }
        else
        {
            if (locationId && itemId)
            {
                if (this.isCatchWeightItem(itemId))
                {
                    while select LicensePlateId from inventDim
                        group by LicensePlateId
                        where inventDim.InventSiteId        == inventSiteId
                            && inventDim.InventLocationId   == inventLocationId
                            && inventDim.wmsLocationId      == locationId
                            && inventDim.LicensePlateId     != ''
                        exists join inventSum
                            where inventSum.InventDimId          == inventDim.InventDimId
                                && inventSum.ClosedQty           == NoYes::No
                                && inventSum.ItemId              == itemId
                                && inventSum.PdsCWPhysicalInvent > 0
                    {
                        if (tmpLicensePlateId != '' && tmpLicensePlateId != inventDim.LicensePlateId)
                        {
                            ret = '';
                            break;
                        }
                        else
                        {
                            ret = inventDim.LicensePlateId;
                        }

                        tmpLicensePlateId = inventDim.LicensePlateId;
                    }
                }
                else
                {
                    while select LicensePlateId from inventDim
                        group by LicensePlateId
                        where inventDim.InventSiteId        == inventSiteId
                            && inventDim.InventLocationId   == inventLocationId
                            && inventDim.wmsLocationId      == locationId
                            && inventDim.LicensePlateId     != ''
                        exists join inventSum
                            where inventSum.InventDimId     == inventDim.InventDimId
                                && inventSum.ClosedQty      == NoYes::No
                                && inventSum.ItemId         == itemId
                                && inventSum.PhysicalInvent > 0
                    {
                        if (tmpLicensePlateId != '' && tmpLicensePlateId != inventDim.LicensePlateId)
                        {
                            ret = '';
                            break;
                        }
                        else
                        {
                            ret = inventDim.LicensePlateId;
                        }

                        tmpLicensePlateId = inventDim.LicensePlateId;
                    }
                }
            }
            else if (locationId)
            {
                while select LicensePlateId from inventDim
                    group by LicensePlateId
                    where inventDim.InventSiteId        == inventSiteId
                        && inventDim.InventLocationId   == inventLocationId
                        && inventDim.wmsLocationId      == locationId
                        && inventDim.LicensePlateId     != ''
                    exists join inventSum
                        where inventSum.InventDimId     == inventDim.InventDimId
                            && inventSum.PhysicalInvent > 0
                            && inventSum.ClosedQty      == NoYes::No
                {
                    if (tmpLicensePlateId != '' && tmpLicensePlateId != inventDim.LicensePlateId)
                    {
                        ret = '';
                        break;
                    }
                    else
                    {
                        ret = inventDim.LicensePlateId;
                    }

                    tmpLicensePlateId = inventDim.LicensePlateId;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundOrderLineNumByItemInventDimParm</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal TradeLineNumber getInboundOrderLineNumByItemInventDimParm(
        Num             _orderNum,
        ItemId          _itemId,
        InventDim       _itemInventDim,
        InventTransType _inventTransType,
        InventDimParm   _inventDimParmItem)
    {
        TradeLineNumber ret;

        if (_inventTransType == InventTransType::Purch)
        {
            ret = this.getLineNumByItemInventDimParm(_orderNum, _itemId, _itemInventDim, _inventDimParmItem);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundOrderLineNumByItem</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal TradeLineNumber getInboundOrderLineNumByItem(
        Num             _orderNum,
        ItemId          _itemId,
        InventDim       _itemInventDim,
        InventTransType _inventTransType)
    {
        TradeLineNumber ret;

        if (_inventTransType == InventTransType::Purch)
        {
            ret = this.getLineNumByItem(_orderNum, _itemId, _itemInventDim);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNumByItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the line number tied to a purchase order line depending on ordered or registered quantity
    /// </summary>
    /// <param name="_purchId">
    ///    Purchase order number used to return line number
    /// </param>
    /// <param name="_itemId">
    ///    Item id used to return line number
    /// </param>
    /// <param name="_itemInventDim">
    ///    InventDim record to compare the product variants
    /// </param>
    /// <returns>
    ///    Purchase order line number
    /// </returns>
    public TradeLineNumber getLineNumByItem(PurchId    _purchId,
                                            ItemId     _itemId,
                                            InventDim  _itemInventDim = null)
    {
        InventDimParm inventDimParm = this.inventDimParmForGetLineNumByItem(_itemInventDim);

        TradeLineNumber ret = this.retrievePurchLineNumberFromOrderedInventTrans(_purchId, _itemId, _itemInventDim, inventDimParm);

        if (!ret && this.mustCheckForPurchLinesForOverDelivery())
        {
            EcoResReleasedProductUnitConverter unitConverter = EcoResReleasedProductUnitConverter::construct();

            PurchLine purchLine;
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;
            InventDim inventDim;

            while select LineNumber, PurchQty, OverDeliveryPct, PurchUnit from purchLine
                group by LineNumber, PurchQty, OverDeliveryPct, PurchUnit
                where purchLine.PurchId                     == _purchId
                    && purchLine.ItemId                     == _itemId
                    && purchLine.OverDeliveryPct            >  0
                join TableId from inventTransOrigin
                    where inventTransOrigin.InventTransId   == purchLine.InventTransId
                join InventTransOrigin, ItemId, InventDimId, sum(Qty) from inventTrans
                    group by InventTransOrigin, ItemId, InventDimId
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                        && inventTrans.StatusReceipt        == StatusReceipt::Registered
                        && inventTrans.StatusIssue          == StatusIssue::None
                        && inventTrans.Qty                  >  0
                        #InventDimExistsJoinNoField(purchLine.InventDimId, inventDim, _itemInventDim, inventDimParm)
            {
                InventQty purchaseQty = unitConverter.convert(inventTrans.Qty,
                                                    UnitOfMeasure::findBySymbol(inventTrans.inventUnit()).RecId,
                                                    UnitOfMeasure::findBySymbol(purchLine.PurchUnit).RecId,
                                                    NoYes::No,
                                                    inventTrans.ItemId,
                                                    inventTrans.InventDimId,
                                                    NoYes::No);

                if (purchaseQty < (purchLine.PurchQty * purchLine.OverDeliveryPct / 100 + purchLine.PurchQty))
                {
                    ret = purchLine.LineNumber;
                    break;
                }
            }
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmForGetLineNumByItem</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal InventDimParm inventDimParmForGetLineNumByItem(InventDim _itemInventDim)
    {
        InventDimParm inventDimParm;

        if (this.inventDimParmItem.anyProductDimensionFlagSet())
        {
            inventDimParm = this.inventDimParmItem;
        }
        else
        {
            inventDimParm.InventLocationIdFlag = NoYes::Yes;
            pass.initInventDimFromPassParm(_itemInventDim, inventDimParm);
            InventSite::setReceivingWarehouseCriteria(_itemInventDim, inventDimParm);

            if (_itemInventDim.anyProductDimensionSpecified())
            {
                inventDimParm.initProductDimensionsAllGroups();
            }
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckForPurchLinesForOverDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether we should proceed on finding purchase order lines for over delivery.
    /// </summary>
    /// <returns>true if we should proceed on finding purchase order lines for over delivery. Otherwise false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    internal boolean mustCheckForPurchLinesForOverDelivery()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrievePurchLineNumberFromOrderedInventTrans</Name>
				<Source><![CDATA[
    private TradeLineNumber retrievePurchLineNumberFromOrderedInventTrans(
        PurchId         _purchId,
        ItemId          _itemId,
        InventDim       _itemInventDim,
        InventDimParm   _inventDimParm)
    {
        if (this.shouldSelectSinglePurchLineForReceiving())
        {
            return this.retrieveLineNumberFromSinglePurchLineWithOrderedInventTrans(_purchId, _itemId, _itemInventDim, _inventDimParm);
        }
        else
        {
            return this.retrieveLineNumberFromMultiplePurchLinesWithOrderedInventTrans(_purchId, _itemId, _itemInventDim, _inventDimParm);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSelectSinglePurchLineForReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if only a single purchase order line should be selected for receiving.
    /// </summary>
    /// <returns>true if a single purchase order line should be selected for receiving; otherwise, false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    internal boolean shouldSelectSinglePurchLineForReceiving()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveLineNumberFromSinglePurchLineWithOrderedInventTrans</Name>
				<Source><![CDATA[
    private TradeLineNumber retrieveLineNumberFromSinglePurchLineWithOrderedInventTrans(
        PurchId         _purchId,
        ItemId          _itemId,
        InventDim       _itemInventDim,
        InventDimParm   _inventDimParm)
    {
        PurchLine           purchLine;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        InventDim           inventDim;

        boolean isCWItem = PdsGlobal::pdsIsCWItem(_itemId);

        if (WHSDeferredReceivingContext::isInContext())
        {
            while select LineNumber, InventTransId, PdsCWQty, PurchQty from purchLine
                    where purchLine.PurchId                     == _purchId
                        && purchLine.ItemId                     == _itemId
                    exists join inventTransOrigin
                        where inventTransOrigin.InventTransId   == purchLine.InventTransId
                            && inventTransOrigin.ReferenceCategory == InventTransType::Purch
                            && inventTransOrigin.ReferenceId == _purchId
                    exists join inventTrans
                        where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                            && inventTrans.StatusReceipt        == StatusReceipt::Ordered
                            && inventTrans.StatusIssue          == StatusIssue::None
                            && ((!isCWItem && inventTrans.Qty > 0) || (isCWItem && inventTrans.PdsCWQty > 0))
                    #InventDimExistsJoinNoField(purchLine.InventDimId, inventDim, _itemInventDim, _inventDimParm)
            {
                Qty totalDeferredQty = WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(purchLine.InventTransId);

                Qty qtyToCheck = PdsGlobal::pdsIsCWItem(_itemId) ? purchLine.PdsCWQty : purchLine.PurchQty;

                if (qtyToCheck <= totalDeferredQty)
                {
                    continue;
                }
                else
                {
                    break;
                }
            }
        }
        else
        {
            boolean isLineRetrieveUseCorrectCWQtyAndDocReferenceFlightEnabled = WHSLineRetrieveUseCorrectCWQtyAndDocReferenceFlight::instance().isEnabled();

            if (!isLineRetrieveUseCorrectCWQtyAndDocReferenceFlightEnabled)
            {
                isCWItem = false;
            }

            select firstonly LineNumber from purchLine
                where purchLine.PurchId                     == _purchId
                    && purchLine.ItemId                     == _itemId
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId   == purchLine.InventTransId
                            && (!isLineRetrieveUseCorrectCWQtyAndDocReferenceFlightEnabled
                                || (inventTransOrigin.ReferenceCategory == InventTransType::Purch
                                && inventTransOrigin.ReferenceId == _purchId))
                exists join inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                        && inventTrans.StatusReceipt        == StatusReceipt::Ordered
                        && inventTrans.StatusIssue          == StatusIssue::None
                        && ((!isCWItem && inventTrans.Qty > 0) || (isCWItem && inventTrans.PdsCWQty > 0))
                #InventDimExistsJoinNoField(purchLine.InventDimId, inventDim, _itemInventDim, _inventDimParm);
        }

        return purchLine.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveLineNumberFromMultiplePurchLinesWithOrderedInventTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    internal TradeLineNumber retrieveLineNumberFromMultiplePurchLinesWithOrderedInventTrans(
        PurchId         _purchId,
        ItemId          _itemId,
        InventDim       _itemInventDim,
        InventDimParm   _inventDimParm)
    {
        PurchLine           purchLine;
        InventTransOrigin   inventTransOrigin;
        InventTrans         inventTrans;
        InventDim           inventDim;

        boolean isCWItem = PdsGlobal::pdsIsCWItem(_itemId);

        if (WHSDeferredReceivingContext::isInContext())
        {
            while select purchLine
                where purchLine.PurchId                     == _purchId
                    && purchLine.ItemId                     == _itemId
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId   == purchLine.InventTransId
                        && inventTransOrigin.ReferenceCategory == InventTransType::Purch
                        && inventTransOrigin.ReferenceId == _purchId
                exists join inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                        && inventTrans.StatusReceipt        == StatusReceipt::Ordered
                        && inventTrans.StatusIssue          == StatusIssue::None
                        && ((!isCWItem && inventTrans.Qty > 0) || (isCWItem && inventTrans.PdsCWQty > 0))
                #InventDimExistsJoinNoField(purchLine.InventDimId, inventDim, _itemInventDim, _inventDimParm)
            {
                Qty totalDeferredQty = WHSMixedLicensePlateReceiptLine::getTotalOpenQtyOnTransId(purchLine.InventTransId);

                Qty qtyToCheck = PdsGlobal::pdsIsCWItem(_itemId) ? purchLine.PdsCWQty : purchLine.PurchQty;

                if (qtyToCheck <= totalDeferredQty)
                {
                    continue;
                }
                else if (this.isPurchLineValidForReceiving(purchLine))
                {
                    break;
                }
            }
        }
        else
        {
            boolean isLineRetrieveUseCorrectCWQtyAndDocReferenceFlightEnabled = WHSLineRetrieveUseCorrectCWQtyAndDocReferenceFlight::instance().isEnabled();

            if (!isLineRetrieveUseCorrectCWQtyAndDocReferenceFlightEnabled)
            {
                isCWItem = false;
            }

            while select purchLine
                where purchLine.PurchId                     == _purchId
                    && purchLine.ItemId                     == _itemId
                exists join inventTransOrigin
                    where inventTransOrigin.InventTransId   == purchLine.InventTransId
                        && (!isLineRetrieveUseCorrectCWQtyAndDocReferenceFlightEnabled
                            || (inventTransOrigin.ReferenceCategory == InventTransType::Purch
                            && inventTransOrigin.ReferenceId == _purchId))
                exists join inventTrans
                    where inventTrans.InventTransOrigin     == inventTransOrigin.RecId
                        && inventTrans.StatusReceipt        == StatusReceipt::Ordered
                        && inventTrans.StatusIssue          == StatusIssue::None
                        && ((!isCWItem && inventTrans.Qty > 0) || (isCWItem && inventTrans.PdsCWQty > 0))
                #InventDimExistsJoinNoField(purchLine.InventDimId, inventDim, _itemInventDim, _inventDimParm)
            {
                if (this.isPurchLineValidForReceiving(purchLine))
                {
                    break;
                }
            }
        }

        return purchLine.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchLineValidForReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the passed <c>PurchTable</c> record is valid for receiving.
    /// </summary>
    /// <param name = "_purchLine">The <c>PurchTable</c> record to be validated.</param>
    /// <returns>true if the purchase order line is valid for receiving; otherwise, false.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute, Wrappable(true)]
    internal boolean isPurchLineValidForReceiving(PurchLine _purchLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNumByItemInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the line number tied to a purchase order line depending on ordered or registered quantity
    /// </summary>
    /// <param name="_purchId">
    ///    Purchase order number used to return line number
    /// </param>
    /// <param name="_itemId">
    ///    Item id used to return line number
    /// </param>
    /// <param name="_itemInventDim">
    ///    InventDim record to compare the product variants
    /// </param>
    /// <param name="_inventDimParm">
    ///    InventDimParm record to compare the product variants
    /// </param>
    /// <returns>
    ///    Purchase order line number
    /// </returns>
    public TradeLineNumber getLineNumByItemInventDimParm(PurchId         _purchId,
                                                         ItemId          _itemId,
                                                         InventDim       _itemInventDim,
                                                         InventDimParm   _inventDimParm)
    {
        TradeLineNumber ret;

        this.inventDimParmItem = _inventDimParm;
        
        ret = this.getLineNumByItem(_purchId, _itemId, _itemInventDim);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationId</Name>
				<Source><![CDATA[
    private str getLocationId()
    {
        str     ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigInventBatchId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the originally selected inventory batch ID.
    /// </summary>
    /// <returns>
    ///     Returns the originally selected inventory batch ID.
    /// </returns>
    protected InventBatchId getOrigInventBatchId()
    {
        InventBatchId   origInventBatchId;

        if (pass.hasValue(#UpdatedBatchId))
        {
            origInventBatchId = pass.lookup(#UpdatedBatchId);
        }
        else if (pass.hasValue(#BatchId))
        {
            origInventBatchId = pass.lookup(#BatchId);
        }
        else if (WHSWorkExecuteDisplayReceivingRefactoringFlight::instance().isEnabled() &&
                 WHSWorkExecutionMode::newFromMode(mode).isInboundOrderOrLoadReceiving() &&
                 pass.receivingOrderProvider(false))
        {
            origInventBatchId = pass.receivingOrderProvider().orderLine(pass).inventDim().InventBatchId;
        }
        else
        {
            switch (mode)
            {
                case WHSWorkExecuteMode::PurchaseOrderItemReceiving:
                case WHSWorkExecuteMode::PurchaseOrderItemReceivingAndLocate:
                case WHSWorkExecuteMode::PurchaseOrderLineReceiving:
                case WHSWorkExecuteMode::PurchaseOrderLineReceivingAndLocate:
                case WHSWorkExecuteMode::LoadItemReceiving:
                case WHSWorkExecuteMode::LoadItemReceivingAndLocate:
                    if (!WHSWorkExecuteDisplayReceivingRefactoringFlight::instance().isEnabled())
                    {
                        origInventBatchId = PurchLine::find(pass.lookup(#PONum), pass.lookup(#POLineNum)).inventDim().InventBatchId;
                    }
                    break;
                case WHSWorkExecuteMode::ReportAsFinished:
                case WHSWorkExecuteMode::ReportAsFinishedAndLocate:
                    origInventBatchId = ProdTable::find(pass.lookup(#ProdId)).inventDim().InventBatchId;
                    break;
                default:
                    break;
            }
        }

        return origInventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOwnerId</Name>
				<Source><![CDATA[
    private str getOwnerId()
    {
        return this.getValueFromInventDimField(fieldNum(InventDim, InventOwnerId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProfileId</Name>
				<Source><![CDATA[
    private str getProfileId()
    {
        return this.getValueFromInventDimField(fieldNum(InventDim, InventProfileId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundUOM</Name>
				<Source><![CDATA[
    private str getInboundUOM(WHSReceiptOrderLine _orderLine)
    {
        str     ret;

        if (defaulting)
        {
            ret = WHSRFDefaultData::getDefaultValue(menuItemName,
                                                    WHSDefaultDataField::UOM,
                                                    pass.lookup(#UserId),
                                                    inventLocationId,
                                                    locationId);

            this.processControl(#UOM, uom);
            fieldValues.insert(#SelectedValueUOM, ret);
        }
        else
        {
            ret = this.isCatchWeightItem(_orderLine.ItemId) ? _orderLine.pdsCWUnitId() : _orderLine.Unit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQty</Name>
				<Source><![CDATA[
    public InventQty getQty()
    {
        InventDim inventDim = InventDim::find(this.findInventDimId());

        if (mode == WHSWorkExecuteMode::Movement)
        {
            InventDim inventDimProduct = fieldValues.createProductInventDimFromPass();

            if (inventDimProduct.anyProductDimensionSpecified())
            {
                inventDim.copyProductDimensions(inventDimProduct, fieldValues.parmItemId());
                inventDim = InventDim::findOrCreate(inventDim);
            }
        }

        if (this.isLPControlWithLPOrNotLPControlWithoutLP())
        {
            // If InventStatus is blank because it is not displayed then try to resolve it before retrieving the quantity
            if (!inventDim.InventStatusId
                && (mode == WHSWorkExecuteMode::AdjustmentOut 
                || mode == WHSWorkExecuteMode::Movement
                || mode == WHSWorkExecuteMode::WarehouseTransfer)
                && !WHSRFMenuItemTable::find(menuItemName).RFDisplayStatus)
            {
                if (this.parmInventoryStatusSelectedOnControl()
                    && mode == WHSWorkExecuteMode::WarehouseTransfer)
                {
                    inventDim.inventStatusId = this.parmInventoryStatusSelectedOnControl();
                }
                else
                {
                    this.captureUniqueInventStatusWithPhysicalOnHand(inventDim);
                }

                inventDim = InventDim::findOrCreate(inventDim);
            }

            if (this.mustUsePhysicalInventHandlingQuantity())
            {
                if (!inventDim.InventStatusId)
                {
                    this.captureUniqueInventStatusWithPhysicalOnHand(inventDim);
                    inventDim = InventDim::findOrCreate(inventDim);
                }

                return this.getPhysicalInventHandlingQty(
                        inventDim, 
                        true, 
                        true);
            }

            return whsInventOnHand::getPhysicalAvailHandlingQty(fieldValues.parmItemId(), inventDim, true, true);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>captureUniqueInventStatusWithPhysicalOnHand</Name>
				<Source><![CDATA[
    private void captureUniqueInventStatusWithPhysicalOnHand(InventDim _inventDim)
    {
        boolean throwIfNoUniqueStatus = this.mustThrowIfNoUniqueStatus();

        using (var context = WHSWorkExecuteDisplayGetUniqueInventStatusWithPhysicalOnHandThrowContext::construct().setThrowIfNoUniqueStatus(throwIfNoUniqueStatus))
        {
            _inventDim.inventStatusId = WhsWorkExecuteDisplay::getUniqueInventStatusWithPhysicalOnHand(fieldValues.parmItemId(), _inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustThrowIfNoUniqueStatus</Name>
				<Source><![CDATA[
    private boolean mustThrowIfNoUniqueStatus()
    {
        return mode != WHSWorkExecuteMode::Movement
            && (mode != WHSWorkExecuteMode::WarehouseTransfer
            || !WHSAllowWarehouseTranferForMixedInventoryStatusFlight::instance().isEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUsePhysicalInventHandlingQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if movement is allowed with existing work reservations,
    /// we can use the entirety of the quantity physically in the location,
    /// not just the available quantity that accounts for work reservations.
    /// </summary>
    /// <returns>true if the validation succeeded; otherwise false.</returns>
    [Replaceable]
    protected boolean mustUsePhysicalInventHandlingQuantity()
    {
        return mode == WHSWorkExecuteMode::Movement && WHSWorkUser::find(pass.lookup(#UserId)).AllowInventoryMovementWithAssociatedWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSizeId</Name>
				<Source><![CDATA[
    private str getSizeId()
    {
        return this.getValueFromInventDimField(fieldNum(InventDim, InventSizeId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStyleId</Name>
				<Source><![CDATA[
    private str getStyleId()
    {
        return this.getValueFromInventDimField(fieldNum(InventDim, InventStyleId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVersionId</Name>
				<Source><![CDATA[
    private str getVersionId()
    {
        return this.getValueFromInventDimField(fieldNum(InventDim, InventVersionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTOLineNumByItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds transfer order line number by item.
    /// </summary>
    /// <param name="_transferId">
    /// Transfer order id.
    /// </param>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    /// <returns>
    /// The line number of the transfer line.
    /// </returns>
    LineNum getTOLineNumByItem(InventTransferId _transferId,
                               ItemId           _itemId)
    {
        InventTransferLine  transferLine;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        select firstonly LineNum from transferLine
            join ReferenceId, InventTransId, ReferenceCategory, RecId from inventTransOrigin
            join InventTransOrigin, StatusReceipt, Qty from inventTrans
            where transferLine.TransferId               ==  inventTransOrigin.ReferenceId           &&
                  transferLine.InventTransIdReceive     ==  inventTransOrigin.InventTransId         &&
                  transferLine.TransferId               ==  _transferId                             &&
                  transferLine.ItemId                   ==  _itemId                                 &&
                  inventTransOrigin.ReferenceCategory   ==  InventTransType::TransferOrderReceive   &&
                  inventTransOrigin.RecId               == inventTrans.InventTransOrigin            &&
                  inventTrans.StatusReceipt             ==  StatusReceipt::Ordered                  &&
                  inventTrans.StatusIssue               ==  StatusIssue::None                       &&
                  inventTrans.Qty                        >   0;

        return transferLine.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransferUOM</Name>
				<Source><![CDATA[
    private str getTransferUOM(InventTransferLine _transferLine)
    {
        str  ret;

        if (defaulting)
        {
            ret = WHSRFDefaultData::getDefaultValue(menuItemName,
                                                    WHSDefaultDataField::UOM,
                                                    pass.lookup(#UserId),
                                                    inventLocationId,
                                                    locationId);

            this.processControl(#UOM, uom);
            fieldValues.insert(#SelectedValueUOM, ret);
        }
        else
        {
            ret = this.isCatchWeightItem(_transferLine.ItemId) ? _transferLine.pdsCWUnitId() : _transferLine.UnitId;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUOM</Name>
				<Source><![CDATA[
    private str getUOM()
    {
        return workLine.UnitId ? workLine.UnitId : WHSCatchWeightHelper::inventHandlingUnitId(fieldValues.parmItemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValueFromInventDimField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets a value from inventDim field.
    /// </summary>
    /// <param name="_dimFieldId">
    ///     Field ID.
    /// </param>
    /// <returns>
    ///     Field value.
    /// </returns>
    public str getValueFromInventDimField(FieldId _dimFieldId)
    {
        InventDim               inventDimReturnValue;
        Query                   query;
        QueryRun                queryRun;
        QueryBuildDataSource    qbdsInventDim;
        QueryBuildDataSource    qbdsInventSum;
        Counter                 counter;
        Common                  queryResult;
        str                     dimFieldName;

        if (fieldValues.parmItemId() && (locationId || fieldValues.parmLicensePlateId()))
        {
            query = new Query();

            if (!InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                qbdsInventDim = query.addDataSource(tableNum(InventDim));
                qbdsInventDim.addGroupByField(_dimFieldId);
                qbdsInventDim.addSelectionField(_dimFieldId);

                if (locationId)
                {
                    qbdsInventDim.addRange(fieldNum(InventDim, wmsLocationId)).value(queryValue(locationId));
                }

                if (this.isInventDimFieldIdMandatory(_dimFieldId))
                {
                    qbdsInventDim.addRange(_dimFieldId).value(SysQuery::valueNotEmptyString());
                }

                if (fieldValues.parmLicensePlateId())
                {
                    qbdsInventDim.addRange(fieldNum(InventDim, LicensePlateId)).value(queryValue(fieldValues.parmLicensePlateId()));
                }
                qbdsInventDim.addRange(fieldNum(InventDim, InventLocationId)).value(queryValue(inventLocationId));

                qbdsInventSum = qbdsInventDim.addDataSource(tableNum(InventSum));
                qbdsInventSum.joinMode(JoinMode::ExistsJoin);
                qbdsInventSum.relations(true);

                qbdsInventSum.addRange(fieldNum(InventSum, ItemId)).value(queryValue(fieldValues.parmItemId()));
                qbdsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
                if (this.isCatchWeightItem(fieldValues.parmItemId()))
                {
                    qbdsInventSum.addRange(fieldNum(InventSum, PdsCWPhysicalInvent)).value('>0');
                }
                else
                {
                    qbdsInventSum.addRange(fieldNum(InventSum, PhysicalInvent)).value('>0');
                }

                queryRun = new QueryRun(query);
                while (queryRun.next() && counter < 2)
                {
                    queryResult  = queryRun.get(tableNum(InventDim));
                    dimFieldName = fieldId2name(tableNum(InventDim), _dimFieldId);
                    inventDimReturnValue.(_dimFieldId) = queryResult.getFieldValue(dimFieldName);
                    counter++;
                    if (counter == 2)
                    {
                        inventDimReturnValue.clear();
                    }
                }
            }
            else
            {
                FieldId inventSumDimensionFieldId = InventDim::getInventSumFieldIdFromInventDimFieldId(_dimFieldId);
                qbdsInventSum = query.addDataSource(tableNum(InventSum));
                qbdsInventSum.addGroupByField(inventSumDimensionFieldId);
                qbdsInventSum.addSelectionField(inventSumDimensionFieldId);

                qbdsInventSum.addRange(fieldNum(InventSum, ItemId)).value(queryValue(fieldValues.parmItemId()));
                qbdsInventSum.addRange(fieldNum(InventSum, ClosedQty)).value(queryValue(NoYes::No));
                if (this.isCatchWeightItem(fieldValues.parmItemId()))
                {
                    qbdsInventSum.addRange(fieldNum(InventSum, PdsCWPhysicalInvent)).value('>0');
                }
                else
                {
                    qbdsInventSum.addRange(fieldNum(InventSum, PhysicalInvent)).value('>0');
                }
                if (locationId)
                {
                    qbdsInventSum.addRange(fieldNum(InventSum, wmsLocationId)).value(queryValue(locationId));
                }

                if (this.isInventDimFieldIdMandatory(_dimFieldId))
                {
                    qbdsInventSum.addRange(inventSumDimensionFieldId).value(SysQuery::valueNotEmptyString());
                }

                if (fieldValues.parmLicensePlateId())
                {
                    qbdsInventSum.addRange(fieldNum(InventSum, LicensePlateId)).value(queryValue(fieldValues.parmLicensePlateId()));
                }
                qbdsInventSum.addRange(fieldNum(InventSum, InventLocationId)).value(queryValue(inventLocationId));

                queryRun = new QueryRun(query);
                while (queryRun.next() && counter < 2)
                {
                    queryResult  = queryRun.get(tableNum(InventSum));
                    dimFieldName = fieldId2name(tableNum(InventSum), inventSumDimensionFieldId);
                    inventDimReturnValue.(_dimFieldId) = queryResult.getFieldValue(dimFieldName);
                    counter++;
                    if (counter == 2)
                    {
                        inventDimReturnValue.clear();
                    }
                }
            }
        }

        return inventDimReturnValue.(_dimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowBlankInventSerialId</Name>
				<Source><![CDATA[
    private boolean allowBlankInventSerialId()
    {
        return (mode == WHSWorkExecuteMode::Movement
            || (workLine.WorkType == WHSWorkType::Pick
                && WhsWorkExecuteDisplay::isBlanksSerialNumberAssignmentAllowed(workLine, fieldValues.parmItemId())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimFieldIdMandatory</Name>
				<Source><![CDATA[
    private boolean isInventDimFieldIdMandatory(FieldId _dimFieldId)
    {
        return !(_dimFieldId == fieldNum(InventDim, InventSerialId)
                    && this.allowBlankInventSerialId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkId</Name>
				<Source><![CDATA[
    private WHSWorkId getWorkId()
    {
        return workLine.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimProductDimFromMembers</Name>
				<Source><![CDATA[
    private void initInventDimProductDimFromMembers(InventDim _inventDim)
    {
        this.initInventDimFromMembers(_inventDim, InventDim::dimProductDimFieldList().getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimStorageDimFromMembers</Name>
				<Source><![CDATA[
    private void initInventDimStorageDimFromMembers(InventDim _inventDim)
    {
        this.initInventDimFromMembers(_inventDim, InventDim::dimStorageDimFieldList().getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimTrackingDimFromMembers</Name>
				<Source><![CDATA[
    private void initInventDimTrackingDimFromMembers(InventDim _inventDim)
    {
        this.initInventDimFromMembers(_inventDim, InventDim::dimTrackingDimFieldList().getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimFromMembers</Name>
				<Source><![CDATA[
    private void initInventDimFromMembers(InventDim _inventDim, Enumerator _fieldListEnumerator)
    {
        while (_fieldListEnumerator.moveNext())
        {
            FieldId fieldId = _fieldListEnumerator.current();

            if (!_inventDim.(fieldId))
            {
                _inventDim.(fieldId) = this.dimensionMemberValue(fieldId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionMemberValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the value of a given dimension member.
    /// </summary>
    /// <param name = "_inventDimFieldId">The field Id defining the dimension.</param>
    /// <returns>The value.</returns>
    protected anytype dimensionMemberValue(FieldId _inventDimFieldId)
    {
        #InventDimDevelop

        switch (_inventDimFieldId)
        {
            case fieldNum(InventDim, InventColorId):
                return inventColorId;
            case fieldNum(InventDim, ConfigId):
                return inventConfigId;
            case fieldNum(InventDim, InventSizeId):
                return inventSizeId;
            case fieldNum(InventDim, InventStyleId):
                return inventStyleId;
            case fieldNum(InventDim, InventVersionId):
                return inventVersionId;
            case fieldNum(InventDim, InventSiteId):
                return inventSiteId;
            case fieldNum(InventDim, InventLocationId):
                return inventLocationId;
            case fieldNum(InventDim, wmsLocationId):
                return locationId;
            case fieldNum(InventDim, LicensePlateId):
                return fieldValues.parmLicensePlateId();
            case fieldNum(InventDim, InventStatusId):
                return fromInventStatusId;
            case fieldNum(InventDim, InventBatchId):
                return fieldValues.parmBatchId();
            case fieldNum(InventDim, InventSerialId):
                return fieldValues.parmSerialId();
            case fieldNum(InventDim, InventProfileId_RU):
                return inventProfileId;
            case fieldNum(InventDim, InventOwnerId_RU):
                return inventOwnerId;
            case fieldNum(InventDim, InventGTDId_RU):
                return inventGtdId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        fieldValues = new WHSRFPassthrough(Types::String, Types::String);
        colorText = WHSRFColorText::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveUOMValue</Name>
				<Source><![CDATA[
    public boolean parmSaveUOMValue(boolean _saveUOMValue = saveUOMValue)
    {
        saveUOMValue = _saveUOMValue;

        return saveUOMValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaveQtyValue</Name>
				<Source><![CDATA[
    internal boolean parmSaveQtyValue(boolean _saveQtyValue = saveQtyValue)
    {
        saveQtyValue = _saveQtyValue;

        return saveQtyValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryStatusSelectedOnControl</Name>
				<Source><![CDATA[
    public WHSInventStatusId parmInventoryStatusSelectedOnControl(WHSInventStatusId _inventoryStatusSelectedOnControl = inventoryStatusSelectedOnControl)
    {
        inventoryStatusSelectedOnControl = _inventoryStatusSelectedOnControl;

        return inventoryStatusSelectedOnControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final PurchId parmPurchId(PurchId _purchId = purchId)
    {
        purchId = _purchId;

        return purchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaulting</Name>
				<Source><![CDATA[
    NoYes parmDefaulting(NoYes _defaulting = defaulting)
    {
        defaulting = _defaulting;

        return defaulting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldValues</Name>
				<Source><![CDATA[
    WHSRFPassthrough parmFieldValues(WHSRFPassthrough _fieldValues = null)
    {
        if (_fieldValues)
        {
            fieldValues = _fieldValues;
        }

        return fieldValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    InventLocationId parmInventLocationId(InventLocationId _inventLocationId)
    {
        inventLocationId = _inventLocationId;

        fieldValues.insert(#InventLocationId, inventLocationId);

        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventSiteId</Name>
				<Source><![CDATA[
    InventSiteId parmInventSiteId(InventSiteId  _inventSiteId)
    {
        inventSiteId = _inventSiteId;

        fieldValues.insert(#InventSiteId, inventSiteId);

        return inventSiteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUOM</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUOM(UnitOfMeasureSymbol _uom = uom)
    {
        uom = _uom; 
        return uom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the location.
    /// </summary>
    /// <returns>The location.</returns>
    [Hookable(false)]
    public final WMSLocation wmsLocation()
    {
        return WMSLocation::find(locationId, inventLocationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    WHSMenuItemName parmMenuItemName(WHSMenuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;

        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMode</Name>
				<Source><![CDATA[
    WHSWorkExecuteMode parmMode(WHSWorkExecuteMode _mode)
    {
        mode = _mode;

        return mode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmColorText</Name>
				<Source><![CDATA[
    public WHSRFColorText parmColorText(WHSRFColorText _colorText)
    {
        colorText = _colorText;
        return colorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPass</Name>
				<Source><![CDATA[
    WHSRFPassthrough parmPass(WHSRFPassthrough _pass = null)
    {
        if (_pass)
        {
            pass = _pass;
        }

        return pass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStep</Name>
				<Source><![CDATA[
    public int parmStep(int _step = step)
    {
        step = _step;

        return step;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkLine</Name>
				<Source><![CDATA[
    WHSWorkLine parmWorkLine(WHSWorkLine    _workLine = null)
    {
        if (_workLine)
        {
            workLine = _workLine;
        }

        return workLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatingData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event raised before fields in fieldValue map are populated.
    /// </summary>
    /// <param name = "_control">The control to populate for.</param>
    delegate void populatingData(WhsControl _control)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatedData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event raised after fields in fieldValue map are populated.
    /// </summary>
    /// <param name = "_control">The control to populate for.</param>
    delegate void populatedData(WhsControl _control)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFullQtyGroupPickExceedsRemaining</Name>
				<Source><![CDATA[
    private boolean validateFullQtyGroupPickExceedsRemaining(Qty _fullQty)
    {
        WHSGroupPickLineDetails groupPickLineDetails = WHSGroupPickLineDetails::newFromWorkLine(workLine);

        return groupPickLineDetails.inventQty - _fullQty < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a field in fieldValue map.
    /// </summary>
    /// <param name="_name">
    /// Name of the field to be populated in the map.
    /// </param>
    public void populateData(str _name)
    {
        WhsControl control = WhsControl::newFromControlName(_name, this.createContext());
        this.populatingData(control);

        control.populate();

        if (mode == WHSWorkExecuteMode::AdjustmentOut
            && (_name != #CountingReasonCode
                || !WHSInventAdjustOutSkipOptionalBlankCountReasonContext::currentMustSkipCountingReasonCodeInitiation())) // The context is used to limit this behavior to only the process guide.
        {
            pass.insert(#Initiation, 1);
        }

        // Do not add more case statements to this list. Instead create a class derived from WhsControl
        switch (_name)
        {
            case #WMSLocationId:
                if (mode != WHSWorkExecuteMode::AdjustmentIn    &&
                    WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(menuItemName)) != WHSWorkExecuteMode::AdjustmentIn)
                {
                    locationId = this.getLocationId();
                    fieldValues.insert(#WMSLocationId, locationId);
                }
                if (defaulting)
                {
                    locationId = WHSRFDefaultData::getDefaultValue(menuItemName,
                                                                   WHSDefaultDataField::ToLocation,
                                                                   pass.lookup(#UserId),
                                                                   inventLocationId,
                                                                   locationId);
                    if (locationId)
                    {
                        this.processControl(#WMSLocationId, locationId);
                    }

                    if (fieldValues.exists(#WMSLocationId) && fieldValues.lookup(#WMSLocationId) != '')
                    {
                        pass.insert(#SystemPopulated, 1);
                    }
                }
                break;

            case #LocOrLP:
                if (defaulting)
                {
                    locationId = WHSRFDefaultData::getDefaultValue(menuItemName,
                                                                   WHSDefaultDataField::FromLocation,
                                                                   pass.lookup(#UserId),
                                                                   inventLocationId,
                                                                   locationId);
                    if (locationId)
                    {
                        this.processControl(#LocOrLP, locationId);
                    }
                }
                else
                {
                    fieldValues.insert(#LocOrLP, '');
                }
                break;

            case #WorkId:
                workId = this.getWorkId();
                fieldValues.insert(#WorkId, workId);
                break;

            case #CheckDigit:
                checkDigit = this.getCheckDigit();
                fieldValues.insert(#CheckDigit, checkDigit);
                break;

            case #ProfileId_RU:
                if (mode == WHSWorkExecuteMode::AdjustmentIn)
                {
                    if (fieldValues.parmLicensePlateId())
                    {
                        if (WHSLicensePlate::exist(fieldValues.parmLicensePlateId()))
                        {
                            inventProfileId = this.getProfileId();
                        }
                    }
                    else
                    {
                        inventProfileId = this.getProfileId();
                    }
                }
                else if (workLine.WorkType != WHSWorkType::Count)
                {
                    inventProfileId = this.getProfileId();
                }
                fieldValues.insert(#ProfileId_RU, inventProfileId);
                break;

            case #OwnerId_RU:
                this.insertOwnerIntoFieldValues();
                break;

            case #GtdId_RU:
                if (mode == WHSWorkExecuteMode::AdjustmentIn)
                {
                    if (fieldValues.parmLicensePlateId())
                    {
                        if (WHSLicensePlate::exist(fieldValues.parmLicensePlateId()))
                        {
                            inventGtdId = this.getGtdId();
                        }
                    }
                    else
                    {
                        inventGtdId = this.getGtdId();
                    }
                }
                else if (workLine.WorkType != WHSWorkType::Count)
                {
                    inventGtdId = this.getGtdId();
                }
                fieldValues.insert(#GtdId_RU, inventGtdId);
                break;

            case #SizeId:
                if (workLine.WorkType == WHSWorkType::Count)
                {
                    fieldValues.insert(#SizeId, '');
                    break;
                }
                else
                {
                    if (mode    != WHSWorkExecuteMode::AdjustmentIn &&
                        mode    != WHSWorkExecuteMode::LicensePlateLoading)
                    {
                        inventSizeId = this.getSizeId();
                    }

                    fieldValues.insert(#SizeId, inventSizeId);
                    if (defaulting)
                    {
                        inventSizeId = WHSRFDefaultData::getDefaultValue(menuItemName,
                                                                         WHSDefaultDataField::Size,
                                                                         pass.lookup(#UserId),
                                                                         inventLocationId,
                                                                         locationId);
                        if (inventSizeId)
                        {
                            this.processControl(#SizeId, inventSizeId);
                        }

                        if (fieldValues.exists(#SizeId))
                        {
                            inventSizeId = fieldValues.lookup(#SizeId);
                        }
                    }
                    break;
                }

            case #StyleId:
                if (workLine.WorkType == WHSWorkType::Count)
                {
                    fieldValues.insert(#StyleId, '');
                    break;
                }
                else
                {
                    if (mode    != WHSWorkExecuteMode::AdjustmentIn &&
                        mode    != WHSWorkExecuteMode::LicensePlateLoading)
                    {
                        inventStyleId = this.getStyleId();
                    }

                    fieldValues.insert(#StyleId, inventStyleId);
                    if (defaulting)
                    {
                        inventStyleId = WHSRFDefaultData::getDefaultValue(menuItemName,
                                                                          WHSDefaultDataField::Style,
                                                                          pass.lookup(#UserId),
                                                                          inventLocationId,
                                                                          locationId);
                        if (inventStyleId)
                        {
                            this.processControl(#StyleId, inventStyleId);
                        }

                        if (fieldValues.exists(#StyleId))
                        {
                            inventStyleId = fieldValues.lookup(#StyleId);
                        }
                    }
                    break;
                }

            case #VersionId:
                if (workLine.WorkType == WHSWorkType::Count)
                {
                    fieldValues.insert(#VersionId, '');
                    break;
                }
                else
                {
                    if (mode    != WHSWorkExecuteMode::AdjustmentIn &&
                        mode    != WHSWorkExecuteMode::LicensePlateLoading)
                    {
                        inventVersionId = this.getVersionId();
                    }

                    fieldValues.insert(#VersionId, inventVersionId);
                    if (defaulting)
                    {
                        inventVersionId = WHSRFDefaultData::getDefaultValue(menuItemName,
                                                                          WHSDefaultDataField::Version,
                                                                          pass.lookup(#UserId),
                                                                          inventLocationId,
                                                                          locationId);
                        if (inventVersionId)
                        {
                            this.processControl(#VersionId, inventVersionId);
                        }

                        if (fieldValues.exists(#VersionId))
                        {
                            inventVersionId = fieldValues.lookup(#VersionId);
                        }
                    }
                    break;
                }

            case #ColorId:
                if (workLine.WorkType == WHSWorkType::Count)
                {
                    fieldValues.insert(#ColorId, '');
                    break;
                }
                else
                {
                    if (mode    != WHSWorkExecuteMode::AdjustmentIn &&
                        mode    != WHSWorkExecuteMode::LicensePlateLoading)
                    {
                        inventColorId = this.getColorId();
                    }

                    fieldValues.insert(#ColorId, inventColorId);
                    if (defaulting)
                    {
                        inventColorId = WHSRFDefaultData::getDefaultValue(menuItemName,
                                                                          WHSDefaultDataField::Color,
                                                                          pass.lookup(#UserId),
                                                                          inventLocationId,
                                                                          locationId);
                        if (inventColorId)
                        {
                            this.processControl(#ColorId, inventColorId);
                        }

                        if (fieldValues.exists(#ColorId))
                        {
                            inventColorId = fieldValues.lookup(#ColorId);
                        }
                    }
                    break;
                }

            case #ConfigId:
                if (workLine.WorkType == WHSWorkType::Count)
                {
                    fieldValues.insert(#ConfigId, '');
                    break;
                }
                else
                {
                    if (mode    != WHSWorkExecuteMode::AdjustmentIn &&
                        mode    != WHSWorkExecuteMode::LicensePlateLoading)
                    {
                        inventConfigId = this.getConfigId();
                    }

                    fieldValues.insert(#ConfigId, inventConfigId);
                    if (defaulting)
                    {
                        inventConfigId = WHSRFDefaultData::getDefaultValue(menuItemName,
                                                                           WHSDefaultDataField::Config,
                                                                           pass.lookup(#UserId),
                                                                           inventLocationId,
                                                                           locationId);
                        if (inventConfigId)
                        {
                            this.processControl(#ConfigId, inventConfigId);
                        }

                        if (fieldValues.exists(#ConfigId))
                        {
                            inventConfigId = fieldValues.lookup(#ConfigId);
                        }
                    }
                    break;
                }

            case #AdjustmentType:
                fieldValues.insert(#AdjustmentType, '');
                fieldValues.insert(#SelectedAdjustmentType, WHSRFMenuItemTable::getDefaultAdjustmentTypeCode(pass.lookup(#MenuItem)));
                if (mode == WHSWorkExecuteMode::AdjustmentIn && !fieldValues.exists(#SelectedValue))
                {
                    fieldValues.insert(#SelectedValue, '');
                }
                break;

            case #FromInventoryStatus:
                this.populateFromInventoryStatus();
                break;

            case #ExpDate:
                InventBatchExpDate expDate = WHSWorkExecuteDisplay::getBatchExpDate(fieldValues.parmItemId(), fieldValues.parmBatchId(), pass.lookupStr(#ReceiptId));

                if (defaulting && !expDate)
                {
                    fieldValues.insert(#ExpDate, strFmt('%1', WHSRFDefaultData::getDefaultValue(menuItemName,
                                                                                            WHSDefaultDataField::ExpDate,
                                                                                            pass.lookup(#UserId),
                                                                                            inventLocationId,
                                                                                            locationId)));
                }
                else
                {
                    fieldValues.insert(#ExpDate, WHSRFControlData::convertDate2DateFormatStrCurrentUserDateCulture(expDate, pass.lookupStr(#UserId)));
                }

                if (fieldValues.lookup(#ExpDate) != '')
                {
                    pass.insert(#DisplayBatch, 1);
                }
                break;

            case #ShortPickReason:
                fieldValues.insert(#ShortPickReason, '');
                fieldValues.insert(#SelectedValue, '');
                break;

            case #TargetLicensePlateId:
                if (step == #ShortPick)
                {
                    // Short pick does not require Target License Plate to be specified if picking zero.
                    if (pass.exists(#QtyToPick) && pass.parmQtyToPick() == 0)
                    {
                        fieldValues.remove(#TargetLicensePlateId);
                    }
                    else
                    {
                        fieldValues.insert(#TargetLicensePlateId, '');
                    }
                }
                else
                {
                    fieldValues.insert(#TargetLicensePlateId, '');
                }
                break;

            case #WorkPoolId:
                fieldValues.insert(#WorkPoolId, '');
                fieldValues.insert(#SelectedWorkPoolId, '');
                break;

            case #Potency:
                // If the batch was updated in the current tracking dim display, the value will be defaulted when the RF control is built.
                if (pass.exists(#UpdatedBatchId))
                {
                    fieldValues.insert(#Potency, '');
                }
                else
                {
                    if (InventBatch::exist(fieldValues.parmBatchId(), fieldValues.parmItemId()))
                    {
                        fieldValues.insert(#Potency, PdsBatchAttributes::find(fieldValues.parmItemId(), fieldValues.parmBatchId(), InventTable::find(fieldValues.parmItemId()).pdsBaseAttributeId).PdsBatchAttribValue);
                    }
                    else
                    {
                        fieldValues.insert(#Potency, WHSInventBatchReceiptDetails::find(pass.lookupStr(#ReceiptId), fieldValues.parmItemId(), fieldValues.parmBatchId()).PdsPotencyBaseValue);
                    }
                }

                if (fieldValues.lookup(#Potency) != '')
                {
                    pass.insert(#DisplayBatch, 1);
                }
                break;

            case #DimUOM:
                fieldValues.insert(#BatchUOM, '');
                break;

            case #DimQty:
                fieldValues.insert(#BatchQty, '');
                break;

            case WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmation:
                if (WhsWorkExecuteDisplay::str2numDisplay(fieldValues.lookupStr(WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmation)) == 0)
                {
                    fieldValues.insert(WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmation, '');
                }
                break;
        }

        this.populatedData(control);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFromInventoryStatus</Name>
				<Source><![CDATA[
    public void populateFromInventoryStatus()
    {
        WHSDefaultDataValue localDefaultValue;

        if ((locationId && fieldValues.parmItemId() && !this.wmsLocation().whsLocationIsLPControlled())
            || (fieldValues.parmLicensePlateId() && this.wmsLocation().whsLocationIsLPControlled()))
        {
            // Check if multiple quantities are found matching the given inventory dimensions, and they have different Inventory statuses, error is thrown;
            // otherwise gets the unique Inventory status Id if one is found
            if (mode == WHSWorkExecuteMode::MovementByTemplate
                && locationId
                && !this.wmsLocation().whsLocationIsLPControlled()
                && !WHSRFMenuItemTable::find(pass.lookup(#MenuItem)).RFDisplayStatus)
            {
                InventDimParm inventDimParm;
                InventDim     InventDimCriteria;

                inventDimParm.setAllProductDimensions();
                this.initInventDimProductDimFromMembers(inventDimCriteria);

                // Gets mobile device defaulting data configuration for FromInventStatus
                if (pass.lookupStr(#FromInventoryStatus) == '')
                {
                    localDefaultValue = this.getDefaultValue(WHSDefaultDataField::FromInventStatus);
                    if (localDefaultValue)
                    {
                        inventDimCriteria.InventStatusId = localDefaultValue;
                        inventDimParm.InventStatusFlag = NoYes::Yes;
                    }
                }

                inventDimParm.setAllTrackingDimensions();
                this.initInventDimTrackingDimFromMembers(inventDimCriteria);

                InventSum inventSum;
                InventDim inventDim;

                if (InventUseDimOfInventSumToggle::instance().isEnabled())
                {
                    select count(RecId) from inventSum
                        where inventSum.ItemId              == fieldValues.parmItemId()             &&
                              inventSum.PhysicalInvent      > 0                                     &&
                              inventSum.ClosedQty           == NoYes::No                            &&
                              #InventDimFieldsFilter(inventSum, inventDimCriteria, inventDimParm)   &&
                              inventSum.wmsLocationId       == locationId                           &&
                              inventSum.InventSiteId        == inventSiteId                         &&
                              inventSum.InventLocationId    == inventLocationId;
                }
                else
                {
                    select count(RecId) from inventSum
                        where   inventSum.ItemId            == fieldValues.parmItemId()
                        &&      inventSum.PhysicalInvent    > 0
                        &&      inventSum.ClosedQty         == NoYes::No
                        #inventDimInnerJoin(inventSum.inventDimId, inventDim, inventDimCriteria, inventDimParm)
                            && inventDim.wmsLocationId       == locationId
                            && inventDim.InventSiteId        == inventSiteId
                            && inventDim.InventLocationId    == inventLocationId;
                }

                if (inventSum.RecId > 1)
                {
                    throw error("@WAX:ErrorCannotResolveUniqueInventoryStatus");
                }
            }

            this.parmFromInventStatusId(this.getInventStatusId());
            fieldValues.insert(#FromInventoryStatus, this.parmFromInventStatusId());

            //When doing quarantine for a license plate, all the items on this LP need to be quarantined. The quantity must be defaulted to the sum of
            //the physical inventory quantity (including different tracking and product dimensions). In the other cases, the dimensions need to be specified first.
            if (((mode == WHSWorkExecuteMode::Quarantine && fieldValues.parmLicensePlateId()) || this.parmFromInventStatusId() != '')
                        && !fieldValues.lookupStr(#Qty))
            {
                InventQty qty;

                if (mode == WHSWorkExecuteMode::MovementByTemplate)
                {
                    qty = this.getQty();

                    InventHandlingUnitId inventHandlingUOM = WHSCatchWeightHelper::inventHandlingUnitId(fieldValues.parmItemId());
                    fieldValues.parmSelectedValueUOM(inventHandlingUOM);
                }
                else
                {
                    qty = this.getPhysicalInventHandlingQty();
                }

                if (qty != 0)
                {
                    fieldValues.parmQty(qty);
                }

                if (!fieldValues.exists(#Qty))
                {
                    fieldValues.insert(#Qty, '');
                }
            }
            fieldValues.insert(#SelectedFromValue, this.parmFromInventStatusId());
        }
        else
        {
            fieldValues.insert(#FromInventoryStatus, '');
        }

        if (!fieldValues.lookupStr(#SelectedFromValue))
        {
            localDefaultValue = this.getDefaultValue(WHSDefaultDataField::FromInventStatus);
            if (localDefaultValue)
            {
                fieldValues.insert(#SelectedFromValue, localDefaultValue);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInventoryStatus</Name>
				<Source><![CDATA[
    public void populateInventoryStatus()
    {
        if (mode                    != WHSWorkExecuteMode::Quarantine           &&
            mode                    != WHSWorkExecuteMode::MovementByTemplate   &&
            mode                    != WHSWorkExecuteMode::AdjustmentIn         &&
            mode                    != WHSWorkExecuteMode::LicensePlateLoading  &&
            mode                    != WHSWorkExecuteMode::ReturnOrder          &&
            mode                    != WHSWorkExecuteMode::ReturnOrderAndLocate &&
            workLine.WorkType       != WHSWorkType::Count)
        {
            if ((locationId && fieldValues.parmItemId() && !this.wmsLocation().whsLocationIsLPControlled())
                || (fieldValues.parmLicensePlateId() && this.wmsLocation().whsLocationIsLPControlled()))
            {
                this.parmFromInventStatusId(this.getInventStatusId());
                fieldValues.insert(#InventoryStatus, this.parmFromInventStatusId());
                fieldValues.insert(#SelectedValue, fieldValues.lookup(#InventoryStatus));
                if (this.parmFromInventStatusId() != '')
                {
                    if (!InventTable::find(fieldValues.parmItemId()).whsBatchActive() || fieldValues.parmBatchId())
                    {
                        if (!fieldValues.exists(#Qty) || fieldValues.lookup(#Qty) == '')
                        {
                            fieldValues.parmQty(this.getQty());
                        }
                    }
                }
            }
        }
        else
        {
            fieldValues.insert(#InventoryStatus, '');
            fieldValues.insert(#SelectedValue, '');
        }

        if (defaulting && mode != WHSWorkExecuteMode::Quarantine && mode != WHSWorkExecuteMode::MovementByTemplate)
        {
            fieldValues.insert(#SelectedValue, WHSRFDefaultData::getDefaultValue(menuItemName,
                                                                                WHSDefaultDataField::FromInventStatus,
                                                                                pass.lookup(#UserId),
                                                                                inventLocationId,
                                                                                locationId));

            if (fieldValues.lookup(#SelectedValue) == '' && this.parmFromInventStatusId())
            {
                fieldValues.insert(#SelectedValue, this.parmFromInventStatusId());
            }

            if (fieldValues.exists(#SelectedValue) && fieldValues.lookup(#SelectedValue) != '')
            {
                this.parmInventoryStatusSelectedOnControl(fieldValues.lookup(#SelectedValue));
            }
        }
        else if (defaulting)
        {
            fieldValues.insert(#SelectedValue, WHSRFDefaultData::getDefaultValue(menuItemName,
                                                                                 WHSDefaultDataField::ToInventStatus,
                                                                                 pass.lookup(#UserId),
                                                                                 inventLocationId,
                                                                                 locationId));
            if (mode == WHSWorkExecuteMode::MovementByTemplate
                    && fieldValues.lookup(#SelectedValue) == ''
                    && fieldValues.exists(#SelectedFromValue))
            {
                fieldValues.insert(#SelectedValue, fieldValues.lookup(#SelectedFromValue));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>WhsControlContext</c> object.
    /// </summary>
    /// <returns>A <c>WhsControlContext</c> with the current work line associated data.</returns>
    [Hookable(false)]
    internal final WhsControlContext createContext()
    {
        WhsControlContext context = WhsControlContext::construct();
                    
        context.controlData = this;
        context.step = step;
        context.mode = mode;
        context.pass = pass;
        context.fieldValues = fieldValues;
        context.workExecuteDisplay = workExecuteDisplay;
        context.workLine = workLine;

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processingControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event raised before a control is processed.
    /// </summary>
    /// <param name = "_control">The control being processed.</param>
    delegate void processingControl(WhsControl _control)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processedControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event raised after a control is processed.
    /// </summary>
    /// <param name = "_control">The control processed.</param>
    delegate void processedControl(WhsControl _control)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLegacyControl</Name>
				<Source><![CDATA[
    private void processLegacyControl(whsControl _control)
    {
        WhsWorkExecute                  workExecute = WhsWorkExecute::construct();

        // Do not add more case statements to this list. Instead create a class derived from WhsControl
        switch (_control.parmName())
        {
            case #LocOrLP:
    
                if (WHSDockInventoryManagementFeature::instance().isEnabled()
                    && WHSContainerTable::findByContainerId(_control.parmData())
                    && mode == WHSWorkExecuteMode::Movement)
                {
                    containerId = _control.parmData();
     
                    WHSLicensePlateId licensePlateId = WHSContainerTable::findLicensePlateByContainer(containerId);

                    locationId = this.findLocationByLicensePlate(licensePlateId);

                    if (!licensePlateId || !locationId)
                    {
                        throw error("@WAX1169");
                    }

                    fieldValues.insert(WHSWorkExecuteDisplayMovementControls::MergeContainerId, containerId);
                    fieldValues.insert(#WMSLocationId, locationId);
                    fieldValues.insert(#LicensePlateId, licensePlateId);
                    break;
                }
                else if (WHSLicensePlate::exist(_control.parmData())
                    && (!pass.exists(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck)
                        || pass.lookupStr(WHSWorkExecuteDisplayLocOrLPCheckControls::LocOrLPCheck) == WHSWorkExecuteDisplayLocOrLPCheckControls::ConfirmLicensePlate))
                {
                    fieldValues.parmLicensePlateId(_control.parmData());

                    if (mode == WHSWorkExecuteMode::MovementByTemplate
                        && WHSContainerTable::isLicensePlateIdAssociatedToContainer(fieldValues.parmLicensePlateId()))
                    {
                        fieldValues.remove(#LicensePlateId);
                        _control.fail("@WAX:MovementByTemplateOfContainersNotSupported");
                        break;
                    }

                    if (!locationId)
                    {
                        locationId = this.findLocationByLicensePlate(fieldValues.parmLicensePlateId(), mode == WHSWorkExecuteMode::MaterialConsumption);

                        // If the license plate is a parent and a movement is being done then the whole
                        // nest needs to be moved.
                        if ((mode == WHSWorkExecuteMode::Movement
                                || mode == WHSWorkExecuteMode::WarehouseTransfer)
                            && WHSLicensePlate::isParentLicensePlate(fieldValues.parmLicensePlateId()))
                        {
                            locationId = locationId ? locationId : this.findLocationByNestedPlate(fieldValues.parmLicensePlateId());

                            if (locationId)
                            {
                                pass.insert(#MoveNest, 1);
                            }
                        }

                        if (!locationId)
                        {
                            locationId = WMSLocation::whsGetLocationId(_control.parmData(), inventLocationId);

                            if (locationId)
                            {
                                if (pass.exists(#MoveNest))
                                {
                                    pass.remove(#MoveNest);
                                }

                                fieldValues.remove(#LicensePlateId);
                            }
                        }

                        WMSLocation location = WMSLocation::find(locationId, inventLocationId);
                        if (!location)
                        {
                            if (pass.exists(#MoveNest))
                            {
                                pass.remove(#MoveNest);
                            }
                            fieldValues.remove(#LicensePlateId);
                            _control.fail("@WAX1159");
                            break;
                        }
                        else if (mode == WHSWorkExecuteMode::Quarantine &&
                                 !this.validateStatusMixingQuarantine(locationId))
                        {
                            fieldValues.remove(#LicensePlateId);
                            _control.fail("@WAX3389");
                            break;
                        }
                        else if (mode == WHSWorkExecuteMode::MovementByTemplate && location.isUserLocationNotAllowedToAdjust())
                        {
                            fieldValues.remove(#LicensePlateId);
                            _control.fail("@WAX465");
                            break;
                        }

                        fieldValues.insert(#WMSLocationId, locationId);

                        if (fieldValues.lookup(#WMSLocationId) != '')
                        {
                            pass.insert(#SystemPopulated, 1);
                        }
                    }
                }
                else
                {
                    locationId = WMSLocation::whsGetLocationId(_control.parmData(), inventLocationId);

                    if (locationId)
                    {
                        if (mode == WHSWorkExecuteMode::Quarantine &&
                            !this.validateStatusMixingQuarantine(locationId))
                        {
                            _control.fail("@WAX3389");
                            break;
                        }

                        fieldValues.insert(#WMSLocationId, locationId);
                        if (!fieldValues.parmLicensePlateId())
                        {
                            fieldValues.parmLicensePlateId(this.getLicensePlateId());
                        }
                    }
                    else
                    {
                        _control.fail("@WAX1159");
                        break;
                    }
                }

                if (_control.parmData())
                {
                    fieldValues.insert(#LocOrLP, locationId);
                }
                break;

            case #WMSLocationId:
                if (!WMSLocation::whsGetLocationId(_control.parmData(), inventLocationId))
                {
                    _control.fail("@WAX1160");
                    break;
                }
                locationId = WMSLocation::whsGetLocationId(_control.parmData(), inventLocationId);
                fieldValues.insert(#WMSLocationId, locationId);
                break;
  
            case #LocVerification:
                if (_control.parmData() == locationId)
                {
                    fieldValues.insert(#LocVerification, _control.parmData());
                }
                else
                {
                    _control.fail("@WAX1160");
                    break;
                }
                break;

            case #QtyVerification:
                fieldValues.insert(#QtyVerification, _control.parmData());
                //UOM is not available for multiple SKU, only verify quantity.
                if (!workLine.ItemId || step == #Put)
                {
                    WHSQtyRemain expectedQty;
                    str          localErrorMessage;
                    [expectedQty, localErrorMessage] = this.getExpectedQuantityOfCurrentWorkLine();
                    if (localErrorMessage)
                    {
                        _control.fail(localErrorMessage);
                    }
                    else
                    {
                        if (expectedQty == WHSWorkExecuteDisplay::str2numDisplay(fieldValues.lookup(#QtyVerification)))
                        {
                            fieldValues.insert(#QtyVerification, expectedQty);
                        }
                        else
                        {
                            fieldValues.insert(#QtyVerification, '');
                            _control.fail("@WAX1172");
                        }
                    }
                }
                break;

            case #QtyVerifyUOM:
                if (_control.parmData() == '')
                {
                    //Clear value because verification fails.
                    fieldValues.insert(#QtyVerification, '');
                    _control.fail("@WAX5601");
                    break;
                }

                WHSQtyRemain expectedQty;
                str          localErrorMessage;
                [expectedQty, localErrorMessage] = this.getExpectedQuantityOfCurrentWorkLine();
                if (localErrorMessage)
                {
                    _control.fail(localErrorMessage);
                }
                else
                {
                    real qtyVerification = WHSWorkExecuteDisplay::str2numDisplay(fieldValues.lookup(#QtyVerification));
                    
                    UnitOfMeasureSymbol qtyVerifyUOM = _control.parmData();
                    UnitOfMeasureSymbol expectedUOM = this.getExpectedUOMOfCurrentWorkLine();

                    boolean verificationResult = false;

                    if (qtyVerifyUOM == expectedUOM && qtyVerification == expectedQty)
                    {
                        verificationResult = true;
                    }
                    else
                    {
                        real highestUnitQtyVerification;
                        UnitOfMeasureSymbol highesetUnitUOMVerification;
                        [highestUnitQtyVerification, highesetUnitUOMVerification] = WHSInventTable::getHighestUnitQtyByUOMSeqGroup(fieldValues.parmItemId(),
                                                                                                         qtyVerification,
                                                                                                         qtyVerifyUOM,
                                                                                                         workLine.InventDimId);
         
                        if ((highesetUnitUOMVerification == expectedUOM && highestUnitQtyVerification == expectedQty)
                            || ([highestUnitQtyVerification, highesetUnitUOMVerification] == WHSInventTable::getHighestUnitQtyByUOMSeqGroup(fieldValues.parmItemId(),
                                                                                                                  expectedQty,
                                                                                                                  expectedUOM,
                                                                                                                  workLine.InventDimId)))
                        {
                            verificationResult = true;
                        }
                    }

                    if (verificationResult)
                    {
                        fieldValues.insert(#QtyVerification, qtyVerification);
                        fieldValues.insert(#QtyVerifyUOM, qtyVerifyUOM);
                    }
                    else
                    {
                        fieldValues.insert(#QtyVerification, '');
                        _control.fail(strFmt("@WAX:ErrorQtyIsNotValidExpectedQty", WHSWorkExecuteDisplay::num2StrDisplay(expectedQty), expectedUOM));
                        break;
                    }
                }
                break;

            case #ClusterPickQtyVerification:
                Qty clusterPickQty = this.GetClusterPickQty();
                Qty expectedVerificationQty = clusterPickQty;

                if (this.wmsLocation().whsLocationIsLPControlled() && fieldValues.parmLicensePlateId())
                {
                    Qty qtyOnLicensePlate = WHSInvent::getQtyOnLicensePlate(fieldValues.parmLicensePlateId(), fieldValues.parmItemId(), this.findInventDimId(), locationId);

                    expectedVerificationQty = min(clusterPickQty, qtyOnLicensePlate);
                }
                
                if (WHSWorkExecuteDisplay::str2numDisplay(_control.parmData()) == expectedVerificationQty)
                {
                    fieldValues.insert(#QtyVerification, expectedVerificationQty);
                }
                else
                {
                    _control.fail("@WAX1172");
                    break;
                }
                break;

            case #WorkId:
                if (!WHSWorkTable::exist(_control.parmData()))
                {
                    _control.fail("@WAX613");
                    break;
                }
                if (mode == WHSWorkExecuteMode::ClusterPicking || mode == WHSWorkExecuteMode::SystemDirectedClusterPicking)
                {
                    WHSWorkTable clusterWorkTable = WHSWorkTable::find(_control.parmData());

                    if (clusterWorkTable.WorkTransType == WHSWorkTransType::PackedContainerPicking)
                    {
                        _control.fail(strFmt("@WAX:WorkOrderTypeNotSupportedForProcess", clusterWorkTable.WorkTransType, mode));
                        break;
                    }

                    if (clusterWorkTable.WorkStatus       > WHSWorkStatus::InProcess     ||
                        clusterWorkTable.WorkTransType   == WHSWorkTransType::CycleCount)
                    {
                        _control.fail("@WAX613");
                        break;
                    }
                    else if (!this.validateWorkTableLocations(clusterWorkTable.WorkId))
                    {
                        _control.fail("@WAX:InvalidWorkTableLocationsWhenClusterPicking");
                        break;
                    }
                    else if (clusterWorkTable.InventLocationId != pass.lookup(#InventLocationId))
                    {
                        _control.fail("@WAX1239");
                        break;
                    }

                    if (!this.validateCatchWeightClusterPick(clusterWorkTable.WorkId))
                    {
                        _control.fail("@WAX:Error_ClusterPickingDoesNotSupportCW");
                        break;
                    }

                    WHSWorkLine clusterWorkLine = workExecute.getFirstOpenLine(clusterWorkTable.WorkId, pass.lookup(#UserId));

                    if (!WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookup(#MenuItem), clusterWorkLine.WorkClassId))
                    {
                        _control.fail("@WAX1459");
                        break;
                    }
                }
                workId = _control.parmData();
                fieldValues.insert(#WorkId, _control.parmData());
                break;

            case #KanbanOrCardId:
                // try as card ID first
                Kanban kanban       = Kanban::findKanbanCardId(_control.parmData());
                kanbanCardId = kanban.KanbanCardId;
                kanbanId     = kanban.KanbanId;

                if (!kanban)
                {
                    // try as kanban ID
                    kanban   = Kanban::findKanbanId(_control.parmData());
                    kanbanId = kanban.KanbanId;
                }

                if (!kanban)
                {
                    _control.fail("@WAX4617");
                    break;
                }

                KanbanJob kanbanJob = kanban.lastKanbanJob();

                // has a value if kanban was identified by card or ID
                fieldValues.insert(#KanbanId,kanbanId);

                // has a value if kanban was identified by card
                fieldValues.insert(#KanbanCardId,kanbanCardId);

                if (   !kanbanJob
                    || !kanbanJob.type().mustBeInventoryControlled())
                {
                    _control.fail("@WAX4618");
                }
                else if (!kanban.status().isStatusUpdateAllowed(LeanKanbanStatus::Received,true))
                {
                    _control.fail("@WAX4619");
                }

                if (_control.parmHasError())
                {
                    kanbanId     = '';
                    kanbanCardId = '';
                    fieldValues.remove(#KanbanId);
                    fieldValues.remove(#KanbanCardId);
                    break;
                }

                fieldValues.parmItemId(this.getKanbanItemId());

                fieldValues.parmQty(this.getKanbanQty());

                uom = this.getKanbanUOM();
                fieldValues.insert(#UOM,uom);
                fieldValues.insert(#SelectedValueUOM,uom);
                break;

            case #KanbanCardId:
                if (this.validateKanbanCardId(_control) && this.validateEmptyRegistration(_control))
                {
                    fieldValues.insert(#KanbanCardId, _control.parmData());
                }

                break;

            case #CheckDigit:
                if (this.wmsLocation().CheckText != _control.parmData())
                {
                    _control.fail("@WAX623");
                    break;
                }
                checkDigit = _control.parmData();
                fieldValues.insert(#CheckDigit, _control.parmData());
                break;

            case #ProfileId_RU:
                if (workLine.WorkType == WHSWorkType::Count && !this.validateProfileInLocationCycleCount(_control.parmData()))
                {
                    if (pass.exists(#RFAddLP))
                    {
                        fieldValues.insert(#ProfileId_RU, _control.parmData());
                        break;
                    }
                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
                    pass.insert(#RFAddLP, 1);
                    _control.fail(strFmt("@WAX1165", "@WAX5626"));
                    break;
                }
                inventProfileId = _control.parmData();
                fieldValues.insert(#ProfileId_RU, _control.parmData());
                break;

            case #OwnerId_RU:
                if (workLine.WorkType == WHSWorkType::Count && !this.validateOwnerInLocationCycleCount(_control.parmData()))
                {
                    if (pass.exists(#RFAddLP))
                    {
                        fieldValues.insert(#OwnerId_RU, _control.parmData());
                        break;
                    }
                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
                    pass.insert(#RFAddLP, 1);
                    _control.fail(strFmt("@WAX1165", "@SYS77709"));
                    break;
                }
                inventOwnerId = _control.parmData();
                fieldValues.insert(#OwnerId_RU, _control.parmData());
                break;

            case #GtdId_RU:
                if (workLine.WorkType == WHSWorkType::Count && !this.validateGtdInLocationCycleCount(_control.parmData()))
                {
                    if (pass.exists(#RFAddLP))
                    {
                        fieldValues.insert(#GtdId_RU, _control.parmData());
                        break;
                    }
                    pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
                    pass.insert(#RFAddLP, 1);
                    _control.fail(strFmt("@WAX1165", "@GLS114996"));
                    break;
                }
                inventGtdId = _control.parmData();
                fieldValues.insert(#GtdId_RU, _control.parmData());
                break;

            case #SizeId:
                if (workLine.WorkType == WHSWorkType::Count && !this.validateSizeInLocationCycleCount(_control.parmData()))
                {
                    if (pass.exists(#RFAddLP))
                    {
                        InventDim  validationInventDim;
                        validationInventDim.InventSizeId = _control.parmData();

                        if (!this.validateProductDimensionFieldMixing(validationInventDim, fieldNum(InventDim, InventSizeId)))
                        {
                            _control.fail(this.handleLocationProductDimensionFieldMixingError(fieldValues.parmWMSLocationId(), "@SYS73727"));
                            break;
                        }

                        if (InventTable::checkSize(fieldValues.parmItemId(), _control.parmData()))
                        {
                            fieldValues.insert(#SizeId, _control.parmData());
                            break;
                        }
                    }
                    else
                    {
                        pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
                        pass.insert(#RFAddLP, 1);
                    }
                    _control.fail(strFmt("@WAX1165", "@SYS73727"));
                    break;
                }
                else if (fieldValues.parmItemId() && !InventTable::checkSize(fieldValues.parmItemId(), _control.parmData()))
                {
                    _control.fail(strFmt("@WAX1165", "@SYS73727"));
                    break;
                }
                else if (mode == WHSWorkExecuteMode::AdjustmentIn ||
                         mode == WHSWorkExecuteMode::LicensePlateLoading)
                {
                    InventDim  validationInventDim;
                    validationInventDim.InventSizeId = _control.parmData();

                    if (!this.validateProductDimensionFieldMixing(validationInventDim, fieldNum(InventDim, InventSizeId)))
                    {
                        _control.fail(this.handleLocationProductDimensionFieldMixingError(fieldValues.parmWMSLocationId(), "@SYS73727"));
                        break;
                    }
                }

                if (mode == WHSWorkExecuteMode::MaterialConsumption
                &&  !this.validateItemVariantIsProdBOM(pass.lookupStr(#ProdId), fieldValues.parmItemId(), fieldNum(InventDim, inventSizeId), _control.parmData()))
                {
                    _control.fail(strFmt("@WAX:ErrorRawMaterialProductDimDoNotMatchBOM", pass.lookupStr(#ProdId)));
                    fieldValues.parmItemId('');
                    break;
                }

                inventSizeId = _control.parmData();
                if (!fieldValues.lookupStr(#SizeId))
                {
                    fieldValues.insert(#SizeId, _control.parmData());
                }
                break;
    
            case #StyleId:
                if (workLine.WorkType == WHSWorkType::Count && !this.validateStyleInLocationCycleCount(_control.parmData()))
                {
                    if (pass.exists(#RFAddLP))
                    {
                        InventDim  validationInventDim;
                        validationInventDim.InventStyleId = _control.parmData();

                        if (!this.validateProductDimensionFieldMixing(validationInventDim, fieldNum(InventDim, InventStyleId)))
                        {
                            _control.fail(this.handleLocationProductDimensionFieldMixingError(fieldValues.parmWMSLocationId(), "@FPK270000"));
                            break;
                        }

                        if (InventTable::checkStyle(fieldValues.parmItemId(), _control.parmData()))
                        {
                            fieldValues.insert(#StyleId, _control.parmData());
                            break;
                        }
                    }
                    else
                    {
                        pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
                        pass.insert(#RFAddLP, 1);
                    }
                    _control.fail(strFmt("@WAX1165", "@FPK270000"));
                    break;
                }
                else if (fieldValues.parmItemId() && !InventTable::checkStyle(fieldValues.parmItemId(), _control.parmData()))
                {
                    _control.fail(strFmt("@WAX1165", "@FPK270000"));
                    break;
                }
                else if (mode == WHSWorkExecuteMode::AdjustmentIn ||
                         mode == WHSWorkExecuteMode::LicensePlateLoading)
                {
                    InventDim  validationInventDim;
                    validationInventDim.InventStyleId = _control.parmData();

                    if (!this.validateProductDimensionFieldMixing(validationInventDim, fieldNum(InventDim, InventStyleId)))
                    {
                        _control.fail(this.handleLocationProductDimensionFieldMixingError(fieldValues.parmWMSLocationId(), "@FPK270000"));
                        break;
                    }
                }

                if (mode == WHSWorkExecuteMode::MaterialConsumption
                &&  !this.validateItemVariantIsProdBOM(pass.lookupStr(#ProdId), fieldValues.parmItemId(), fieldNum(InventDim, InventStyleId), _control.parmData()))
                {
                    _control.fail(strFmt("@WAX:ErrorRawMaterialProductDimDoNotMatchBOM", pass.lookupStr(#ProdId)));
                    fieldValues.parmItemId('');
                    break;
                }

                inventStyleId = _control.parmData();
                if (!fieldValues.lookupStr(#StyleId))
                {
                    fieldValues.insert(#StyleId, _control.parmData());
                }
                break;

            case #VersionId:
                if (workLine.WorkType == WHSWorkType::Count && !this.validateVersionInLocationCycleCount(_control.parmData()))
                {
                    if (pass.exists(#RFAddLP))
                    {
                        InventDim  validationInventDim;
                        validationInventDim.InventVersionId = _control.parmData();

                        if (!this.validateProductDimensionFieldMixing(validationInventDim, fieldNum(InventDim, InventVersionId)))
                        {
                            _control.fail(this.handleLocationProductDimensionFieldMixingError(fieldValues.parmWMSLocationId(), "@SCM:Version"));
                            break;
                        }

                        if (InventTable::checkProductVersion(fieldValues.parmItemId(), _control.parmData()))
                        {
                            fieldValues.insert(#VersionId, _control.parmData());
                            break;
                        }
                    }
                    else
                    {
                        pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
                        pass.insert(#RFAddLP, 1);
                    }
                    _control.fail(strFmt("@WAX1165", "@SCM:Version"));
                    break;
                }
                else if (fieldValues.parmItemId() && !InventTable::checkProductVersion(fieldValues.parmItemId(), _control.parmData()))
                {
                    _control.fail(strFmt("@WAX1165", "@SCM:Version"));
                    break;
                }
                else if (mode == WHSWorkExecuteMode::AdjustmentIn ||
                         mode == WHSWorkExecuteMode::LicensePlateLoading)
                {
                    InventDim  validationInventDim;
                    validationInventDim.InventVersionId = _control.parmData();

                    if (!this.validateProductDimensionFieldMixing(validationInventDim, fieldNum(InventDim, InventVersionId)))
                    {
                        _control.fail(this.handleLocationProductDimensionFieldMixingError(fieldValues.parmWMSLocationId(), "@SCM:Version"));
                        break;
                    }
                }

                if (mode == WHSWorkExecuteMode::MaterialConsumption
                &&  !this.validateItemVariantIsProdBOM(pass.lookupStr(#ProdId), fieldValues.parmItemId(), fieldNum(InventDim, InventVersionId), _control.parmData()))
                {
                    _control.fail(strFmt("@WAX:ErrorRawMaterialProductDimDoNotMatchBOM", pass.lookupStr(#ProdId)));
                    fieldValues.parmItemId('');
                    break;
                }

                inventVersionId = _control.parmData();
                if (!fieldValues.lookupStr(#VersionId))
                {
                    fieldValues.insert(#VersionId, _control.parmData());
                }
                break;

            case #ColorId:
                if (workLine.WorkType == WHSWorkType::Count && !this.validateColorInLocationCycleCount(_control.parmData()))
                {
                    if (pass.exists(#RFAddLP))
                    {
                        InventDim  validationInventDim;
                        validationInventDim.InventColorId = _control.parmData();

                        if (!this.validateProductDimensionFieldMixing(validationInventDim, fieldNum(InventDim, InventColorId)))
                        {
                            _control.fail(this.handleLocationProductDimensionFieldMixingError(fieldValues.parmWMSLocationId(), "@SYS73726"));
                            break;
                        }

                        if (InventTable::checkColor(fieldValues.parmItemId(), _control.parmData()))
                        {
                            fieldValues.insert(#ColorId, _control.parmData());
                            break;
                        }
                    }
                    else
                    {
                        pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
                        pass.insert(#RFAddLP, 1);
                    }
                    _control.fail(strFmt("@WAX1165", "@SYS73726"));
                    break;
                }
                else if (fieldValues.parmItemId() && !InventTable::checkColor(fieldValues.parmItemId(), _control.parmData()))
                {
                    _control.fail(strFmt("@WAX1165", "@SYS73726"));
                    break;
                }
                else if (mode == WHSWorkExecuteMode::AdjustmentIn ||
                         mode == WHSWorkExecuteMode::LicensePlateLoading)
                {
                    InventDim  validationInventDim;
                    validationInventDim.InventColorId = _control.parmData();

                    if (!this.validateProductDimensionFieldMixing(validationInventDim, fieldNum(InventDim, InventColorId)))
                    {
                        _control.fail(this.handleLocationProductDimensionFieldMixingError(fieldValues.parmWMSLocationId(), "@SYS73726"));
                        break;
                    }
                }

                if (mode == WHSWorkExecuteMode::MaterialConsumption
                &&  !this.validateItemVariantIsProdBOM(pass.lookupStr(#ProdId), fieldValues.parmItemId(), fieldNum(InventDim, InventColorId), _control.parmData()))
                {
                    _control.fail(strFmt("@WAX:ErrorRawMaterialProductDimDoNotMatchBOM", pass.lookupStr(#ProdId)));
                    fieldValues.parmItemId('');
                    break;
                }

                inventColorId = _control.parmData();
                if (!fieldValues.lookupStr(#ColorId))
                {
                    fieldValues.insert(#ColorId, _control.parmData());
                }
                break;

            case #ConfigId:
                if (workLine.WorkType == WHSWorkType::Count && !this.validateConfigInLocationCycleCount(_control.parmData()))
                {
                    if (pass.exists(#RFAddLP))
                    {
                        InventDim  validationInventDim;
                        validationInventDim.configId = _control.parmData();
                        
                        if (!this.validateProductDimensionFieldMixing(validationInventDim, fieldNum(InventDim, configId)))
                        {
                            _control.fail(this.handleLocationProductDimensionFieldMixingError(fieldValues.parmWMSLocationId(), "@SYS14011"));
                            break;
                        }

                        if (InventTable::checkConfig(fieldValues.parmItemId(), _control.parmData()))
                        {
                            fieldValues.insert(#ConfigId, _control.parmData());
                            break;
                        }
                    }
                    else
                    {
                        pass.insert(#RetryCounter, str2int(pass.lookup(#RetryCounter)) + 1);
                        pass.insert(#RFAddLP, 1);
                    }
                    _control.fail(strFmt("@WAX1165", "@SYS14011"));
                    break;
                }
                else if (fieldValues.parmItemId() && !InventTable::checkConfig(fieldValues.parmItemId(), _control.parmData()))
                {
                    _control.fail(strFmt("@WAX1165", "@SYS14011"));
                    break;
                }
                else if (mode == WHSWorkExecuteMode::AdjustmentIn ||
                         mode == WHSWorkExecuteMode::LicensePlateLoading)
                {
                    InventDim  validationInventDim;
                    validationInventDim.configId = _control.parmData();

                    if (!this.validateProductDimensionFieldMixing(validationInventDim, fieldNum(InventDim, configId)))
                    {
                        _control.fail(this.handleLocationProductDimensionFieldMixingError(fieldValues.parmWMSLocationId(), "@SYS14011"));
                        break;
                    }
                }

                if (mode == WHSWorkExecuteMode::MaterialConsumption
                &&  !this.validateItemVariantIsProdBOM(pass.lookupStr(#ProdId), fieldValues.parmItemId(), fieldNum(InventDim, configId), _control.parmData()))
                {
                    _control.fail(strFmt("@WAX:ErrorRawMaterialProductDimDoNotMatchBOM", pass.lookupStr(#ProdId)));
                    fieldValues.parmItemId('');
                    break;
                }

                inventConfigId = _control.parmData();
                if (!fieldValues.lookupStr(#ConfigId))
                {
                    fieldValues.insert(#ConfigId, _control.parmData());
                }
                break;

            case #TargetLicensePlateId:
                if (mode == WHSWorkExecuteMode::ClusterPicking || mode == WHSWorkExecuteMode::SystemDirectedClusterPicking)
                {
                    if (this.validateTargetLicensePlateOnClusterPicking(_control.parmData()))
                    {
                        targetLicensePlateId = _control.parmData();
                        fieldValues.insert(#TargetLicensePlateId, _control.parmData());
                        break;
                    }
                    else
                    {
                        _control.fail("@WAX2194");
                        break;
                    }
                }
                else
                {
                    if ((workLine.WorkType   == WHSWorkType::Pick  && workLine.AskForNewLicensePlate) ||
                        (workLine.WorkType   == WHSWorkType::Pick                                        &&
                         !this.wmsLocation().whsLocationIsLPControlled()       &&
                         !workLine.whsWorkTable().TargetLicensePlateId)                                  ||
                        workLine.WorkType    == WHSWorkType::Put)
                    {
                        if (pass.exists(#GroupPutaway))
                        {
                            targetLicensePlateId = _control.parmData();
                            fieldValues.insert(#TargetLicensePlateId, _control.parmData());
                            break;
                        }

                        if (WHSParameters::find().TransitWarehouseLicensePlatePolicy == WHSTransitWarehouseLicensePlatePolicy::PreventReuse &&
                            !WHSLicensePlateIsNotInTransitToOtherWarehouseCheck::validateLicensePlate(_control.parmData(), ''))
                        {
                            _control.fail(strFmt("@WAX:LicensePlateInTransitToOtherWarehouseError", _control.parmData(), ''));
                            break;
                        }
                        
                        if ((this.validateLicensePlateQty(_control.parmData()) || this.allowNotEmptyTargetLP(_control.parmData())) &&
                            !WMSLocation::find(_control.parmData(), inventLocationId) &&
                            !WHSLicensePlate::isParentLicensePlate(_control.parmData()))
                        {
                            targetLicensePlateId = _control.parmData();
                            fieldValues.insert(#TargetLicensePlateId, _control.parmData());

                            if (workLine.AskForNewLicensePlate)
                            {
                                ttsbegin;
                                WHSWorkLine tmpWorkLine = WHSWorkLine::find(workLine.WorkId, workLine.LineNum, true);
                                tmpWorkLine.AskForNewLicensePlate = NoYes::No;
                                tmpWorkLine.update();
                                ttscommit;
                            }
                        }
                        /*
                        The license plate will be the target one if the user is putting
                        to a license plate which exists in the location or it is already the work's target LP.
                        */
                        else if ((workLine.WorkType == WHSWorkType::Put
                                 && this.validateLicensePlateInLocation(_control.parmData(), true, true))
                                 || (workLine.whsWorkTable().TargetLicensePlateId == _control.parmData()))
                        {
                            targetLicensePlateId = _control.parmData();
                            fieldValues.insert(#TargetLicensePlateId, _control.parmData());
                            break;
                        }
                        else
                        {
                            if (mode == WHSWorkExecuteMode::PickPack    &&
                                pass.exists(#TargetWorkId)              &&
                                pass.lookup(#TargetWorkId) != workLine.WorkId)
                            {
                                targetLicensePlateId = _control.parmData();
                                fieldValues.insert(#TargetLicensePlateId, _control.parmData());
                            }
                            else
                            {
                                _control.fail("@WAX2194");
                            }
                        }
                        break;
                    }
                    else
                    {
                        targetLicensePlateId = _control.parmData();
                        fieldValues.insert(#TargetLicensePlateId, _control.parmData());
                        break;
                    }
                }

            case #POLineNum:
                this.validateReceiptLineNumber(_control, InventTransType::Purch);
                break;

            case #AdjustmentType:
                fieldValues.insert(#AdjustmentType, _control.parmData());
                fieldValues.insert(#SelectedAdjustmentType, _control.parmData());
                break;
           
            case #FromInventoryStatus:
                WHSInventStatusId localInventStatusId = _control.parmData();
                if (mode == WHSWorkExecuteMode::Quarantine || mode == WHSWorkExecuteMode::MovementByTemplate)
                {
                    fieldValues.insert(#FromInventoryStatus, localInventStatusId);
                    fieldValues.insert(#SelectedFromValue, localInventStatusId);
                    if (pass.exists(#FromInventoryStatus) && pass.lookup(#FromInventoryStatus) != localInventStatusId)
                    {
                        this.parmFromInventStatusId(localInventStatusId);
                        Qty fromInventoryStatusPhysicalInventQty = this.getPhysicalInventHandlingQty();
                        if (fromInventoryStatusPhysicalInventQty)
                        {
                            fieldValues.parmQty(fromInventoryStatusPhysicalInventQty);
                        }
                        else
                        {
                            fieldValues.parmQty('');
                        }

                        pass.insert(#Initiation, 1);
                    }
                }
                else
                {
                    fieldValues.insert(#FromInventoryStatus, localInventStatusId);
                }
                break;

            case #FullQty:
                fieldValues.insert(#FullQty, _control.parmData());
                Qty fullQty = WHSWorkExecuteDisplay::str2numDisplay(_control.parmData());

                boolean isGroupPick = pass.isGroupPick();
                boolean enableFullQtyGroupPickFlight = WHSEnableFullQtyGroupPickFlight::instance().isEnabled();

                if ((fullQty < 0)
                    || ((!enableFullQtyGroupPickFlight || !isGroupPick) && (workLine.InventQtyRemain - fullQty < 0))
                    || ((enableFullQtyGroupPickFlight && isGroupPick) && this.validateFullQtyGroupPickExceedsRemaining(fullQty)))
                {
                    _control.fail(fullQty < 0 ? "@WAX:MobileDevice_NegativeFullQty_Error" : "@WAX:MobileDevice_FullQtyExceedsRemaining_Error");
                    break;
                }
                else if (fullQty == 0 && workLine.InventQtyWork == workLine.InventQtyRemain && !WHSWorkTable::anyPicksBeforeFirstPutCompleted(workLine.WorkId))
                {
                    _control.fail("@WAX1172");
                    break;
                }
                else if (!this.checkDecimals(workLine.ItemId, fullQty))
                {
                    _control.fail(strfmt("@SYS83631", InventTable::inventDecimals(workLine.ItemId))+'\n');
                    break;
                }
                break;

            case #ExpDate:
                fieldValues.insert(#ExpDate, _control.parmData());
                if (WHSRFControlData::convertDateFormatStr2Date(_control.parmData(), pass.lookupStr(#UserId)) == Global::dateNull())
                {
                    _control.fail("@WAX1891");
                    break;
                }
                if (this.shouldCreateBatchForExpDate())
                {
                    ttsbegin;
                    InventBatch inventBatch;
                    inventBatch.ItemId          = pass.lookup(#ItemId);
                    inventBatch.InventBatchId   = fieldValues.parmBatchId();
                    inventBatch.ExpDate         = WHSRFControlData::convertDateFormatStr2Date(_control.parmData(), pass.lookupStr(#UserId));
                    inventBatch.insert();
                    ttscommit;
                }
                break;

            case #BatchUOM:
                fieldValues.insert(#BatchUOM, _control.parmData());
                InventDimId inventDimIdProduct = this.findInventDimIdProduct();
                if (pass.exists(#BatchRunningQty) && WHSWorkExecuteDisplay::str2numDisplay(pass.lookup(#BatchRunningQty)) != 0 &&
                    WHSCatchWeightHelper::convertInventQuantity(pass.lookup(#ItemId),
                                                   _control.parmData(),
                                                   fieldValues.parmBatchQty(),
                                                   inventDimIdProduct) > WHSWorkExecuteDisplay::str2numDisplay(pass.lookup(#BatchRunningQty)))
                {
                    _control.fail("@WAX1172");
                    break;
                }
                break;

            case #BatchQty:
                batchQty = WHSWorkExecuteDisplay::str2numDisplay(_control.parmData());
                if (batchQty < 0)
                {
                    _control.fail("@WAX1172");
                    break;
                }

                if (mode == WHSWorkExecuteMode::TransferOrderItemReceiving || mode == WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate   ||
                    mode == WHSWorkExecuteMode::TransferOrderLineReceiving || mode == WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate)
                {
                    if (!this.validateBatchQtyOnTOItemReceiving(fieldValues.parmBatchId(), batchQty))
                    {
                        fieldValues.parmBatchId('');
                        break;
                    }
                }

                fieldValues.insert(#BatchQty, batchQty);
                break;

            case #ShortPickReason:
                fieldValues.insert(#ShortPickReason, WHSWorkException::findByDescriptionAndType(_control.parmData(), WHSExceptionType::ShortPick).WorkExceptionCode);
                fieldValues.insert(#SelectedValue, _control.parmData());
                break;

            case #RMANum:
                if (SalesTable::findReturnItemNum(_control.parmData()).RecId != 0)
                {
                    fieldValues.insert(#RMANum, _control.parmData());
                }
                else
                {
                    _control.fail("@WAX3262");
                }
                break;

            case #LoadId:
                if (WHSLoadTable::exist(_control.parmData()) && WHSLoadTable::find(_control.parmData()).LoadDirection == WHSLoadDirection::Inbound)
                {
                    fieldValues.insert(#LoadId, _control.parmData());
                }
                else
                {
                    _control.fail("@WAX3626");
                }
                break;

            case #TONum:
                if (!InventTransferTable::find(_control.parmData()))
                {
                    _control.fail("@WAX3859");
                    break;
                }
                else if (InventTransferTable::find(_control.parmData()).InventLocationIdTo != pass.lookup(#InventLocationId))
                {
                    _control.fail("@WAX1239");
                    break;
                }
                transferId = _control.parmData();
                fieldValues.insert(#TONum, _control.parmData());
                break;

            case #ParentLP:
                if (mode == WHSWorkExecuteMode::LicensePlateBuild)
                {
                    if (!this.validateLicensePlateQty(_control.parmData())    ||
                        WMSLocation::exist(_control.parmData(), pass.lookup(#InventLocationId)))
                    {
                        _control.fail("@WAX3901");
                        break;
                    }
                    if (WHSContainerTable::isLicensePlateIdUsedForContainerGrouping(_control.parmData()))
                    {
                        _control.fail("@WAX:CantNestToContainerGroupLicensePlate");
                        break;
                    }
                }
                else if (mode == WHSWorkExecuteMode::LicensePlateBreak)
                {
                    if (!WHSLicensePlate::isParentLicensePlate(_control.parmData()))
                    {
                        _control.fail("@WAX3901");
                        break;
                    }
                    if (WHSContainerTable::isLicensePlateIdUsedForContainerGrouping(_control.parmData()))
                    {
                        _control.fail("@WAX:CantUnNestFromContainerGroupLicensePlate");
                        break;
                    }
                }
                fieldValues.insert(#ParentLP, _control.parmData());
                break;

            case #ChildLP:
                if (mode == WHSWorkExecuteMode::LicensePlateBuild)
                {
                    WMSLocationId locationByLicensePlate = this.findLocationByLicensePlate(_control.parmData());
                    WMSLocationId locationByParentLicensePlate;
                    if (locationByLicensePlate)
                    {
                        locationByParentLicensePlate = this.findLocationByNestedPlate(pass.lookup(#ParentLP));
                    }
        
                    if (locationByParentLicensePlate && locationByLicensePlate != locationByParentLicensePlate)
                    {
                        _control.fail("@WAX3931");
                        break;
                    }
                    else if (WMSLocation::find(locationByLicensePlate, pass.lookup(#InventLocationId)).LocProfileId == WHSParameters::find().UserLocType  ||
                             WMSLocation::find(this.findLocationByNestedPlate(_control.parmData()), pass.lookup(#InventLocationId)).LocProfileId == WHSParameters::find().UserLocType)
                    {
                        _control.fail("@WAX3932");
                        break;
                    }
                    else if (WHSWorkTable::findByLicensePlate(_control.parmData()))
                    {
                        _control.fail("@WAX3933");
                        break;
                    }
                    else if (WHSContainerTable::isLicensePlateIdAssociatedToContainer(_control.parmData()))
                    {
                        _control.fail("@WAX:CannotNestLPAssociatedToContainer");
                        break;
                    }
                    else if (_control.parmData() == pass.lookup(#ParentLP))
                    {
                        _control.fail(strFmt("@WAX:Error_LicensePlateSameAsParent", _control.parmData()));
                        break;
                    }
                    else if (!locationByLicensePlate)
                    {
                        _control.fail(strFmt("@WAX:Error_LicensePlateHasNoPhysicalOnHand", _control.parmData(), inventLocationId));
                        break;
                    }
                }
                else if (mode == WHSWorkExecuteMode::LicensePlateBreak)
                {
                    if (WHSLicensePlate::find(_control.parmData()).LicensePlateParent != pass.lookup(#ParentLP))
                    {
                        _control.fail("@WAX3924");
                        break;
                    }
                }
                fieldValues.insert(#ChildLP, _control.parmData());
                break;

            case #StartLocationId:
                if (!WMSLocation::whsGetLocationId(_control.parmData(), inventLocationId))
                {
                    _control.fail("@WAX1160");
                    break;
                }

                fieldValues.insert(#StartLocationId, WMSLocation::whsGetLocationId(_control.parmData(), inventLocationId));

                if (pass.exists(#StartLocationId) && pass.lookup(#StartLocationId) != fieldValues.lookup(#StartLocationId))
                {
                    pass.insert(#Initiation, 1);
                }
                break;

            case #ZoneId:
                if (!WHSZone::exist(_control.parmData()))
                {
                    _control.fail("@WAX4085");
                    break;
                }

                fieldValues.insert(#ZoneId, _control.parmData());

                if (pass.exists(#ZoneId) && pass.lookup(#ZoneId) != fieldValues.lookup(#ZoneId))
                {
                    pass.insert(#Initiation, 1);
                }
                break;

            case #WorkPoolId:
                fieldValues.insert(#WorkPoolId, _control.parmData());
                fieldValues.insert(#SelectedWorkPoolId, _control.parmData());

                if (pass.exists(#SelectedWorkPoolId) && pass.lookup(#SelectedWorkPoolId) != fieldValues.lookup(#SelectedWorkPoolId))
                {
                    pass.insert(#Initiation, 1);
                }
                break;

            case #CheckInOutId:
                if (mode == WHSWorkExecuteMode::DriverCheckIn || mode == WHSWorkExecuteMode::DriverCheckOut)
                {
                    if (WHSLoadTable::exist(_control.parmData()))
                    {
                        fieldValues.insert(#CheckInOutId, _control.parmData());
                        fieldValues.insert(#LoadId, _control.parmData());
                    }
                    else if (WHSShipmentTable::exist(_control.parmData()))
                    {
                        fieldValues.insert(#CheckInOutId, _control.parmData());
                        fieldValues.insert(#LoadId, WHSShipmentTable::find(_control.parmData()).LoadId);
                    }
                    else if (TMSAppointment::exist(_control.parmData()) && TMSAppointment::find(_control.parmData()).ApptRefType == TMSApptRefType::Load)
                    {
                        fieldValues.insert(#CheckInOutId, _control.parmData());
                        fieldValues.insert(#LoadId, TMSAppointment::find(_control.parmData()).ApptRefNum);
                    }
                    else
                    {
                        _control.fail("@WAX1081");
                        break;
                    }

                    if (WHSLoadTable::exist(fieldValues.lookup(#LoadId)))
                    {
                        if (this.validateLoadIdCheckOut(fieldValues.lookup(#LoadId)))
                        {
                            _control.fail(this.parmErrorMessage());
                        }
                    }
                    else
                    {
                        _control.fail("@WAX3626");
                    }
                }
                break;

            case #Carrier:
                fieldValues.insert(#SelectedValue, _control.parmData());
                fieldValues.insert(#Carrier, this.findCarrierByName(_control.parmData()).CarrierCode);
                break;

            case #TOLineNum:
                toLineNum = WHSWorkExecuteDisplay::str2numDisplay(_control.parmData());

                InventTransferLine transferLine = InventTransferLine::find(transferId, toLineNum);

                if (!transferLine.RecId)
                {
                    _control.fail("@WAX:InvalidLineNumber");
                    break;
                }

                fieldValues.insert(#TOLineNum, toLineNum);

                if (mode == WHSWorkExecuteMode::TransferOrderLineReceiving          ||
                    mode == WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate)
                {
                    fieldValues.parmItemId(transferLine.ItemId);

                    if (this.isCatchWeightItem(transferLine.ItemId))
                    {
                        fieldValues.parmQty(transferLine.PdsCWQtyRemainReceive);
                    }
                    else
                    {
                        fieldValues.parmQty(transferLine.QtyRemainReceive);
                    }
                }

                uom = this.getTransferUOM(transferLine);
                fieldValues.insert(#UOM, uom);
                break;

            case #VendBatchDate:
                if (this.validateVendBatchDate(_control.parmData()))
                {
                    _control.fail(this.parmErrorMessage());
                    break;
                }
                fieldValues.insert(#VendBatchDate, _control.parmData());

                if (pass.lookup(#VendBatchDate) != fieldValues.lookup(#VendBatchDate))
                {
                    pass.insert(#Initiation, 1);
                }
                break;

            case #UseVendBatchDate:
                if (this.validateUseVendBatchDate(_control.parmData()))
                {
                    _control.fail(this.parmErrorMessage());
                    break;
                }
                fieldValues.insert(#UseVendBatchDate, _control.parmData());

                if (pass.lookup(#UseVendBatchDate) != fieldValues.lookup(#UseVendBatchDate))
                {
                    pass.insert(#Initiation, 1);
                }
                break;

            case #VendExpDate:
                if (this.validateVendExpDate(_control.parmData()))
                {
                    _control.fail(this.parmErrorMessage());
                    break;
                }
                fieldValues.insert(#VendExpDate, _control.parmData());

                if (pass.lookup(#VendExpDate) != fieldValues.lookup(#VendExpDate))
                {
                    pass.insert(#Initiation, 1);
                }
                break;

            case #UseVendExpDate:
                if (this.validateUseVendExpDate(_control.parmData()))
                {
                    _control.fail(this.parmErrorMessage());
                    break;
                }
                fieldValues.insert(#UseVendExpDate, _control.parmData());

                if (pass.lookup(#UseVendExpDate) != fieldValues.lookup(#UseVendExpDate))
                {
                    pass.insert(#Initiation, 1);
                }
                break;

            case #CountryOfOrigin1:
                if (this.validateCountryOfOrigin1(_control.parmData()))
                {
                    _control.fail(this.parmErrorMessage());
                    break;
                }
                fieldValues.insert(#CountryOfOrigin1, _control.parmData());

                if (pass.lookup(#CountryOfOrigin1) != fieldValues.lookup(#CountryOfOrigin1))
                {
                    pass.insert(#Initiation, 1);
                }
                break;

            case #CountryOfOrigin2:
                if (this.validateCountryOfOrigin2(_control.parmData()))
                {
                    _control.fail(this.parmErrorMessage());
                    break;
                }
                fieldValues.insert(#CountryOfOrigin2, _control.parmData());

                if (pass.lookup(#CountryOfOrigin2) != fieldValues.lookup(#CountryOfOrigin2))
                {
                    pass.insert(#Initiation, 1);
                }
                break;

            case #VendBatchId:
                fieldValues.insert(#VendBatchId, _control.parmData());

                if (pass.lookup(#VendBatchId) != fieldValues.lookup(#VendBatchId))
                {
                    pass.insert(#Initiation, 1);
                }
                break;

            case #Potency:
                InventBatchId origInventBatchId = this.getOrigInventBatchId();

                // If the batch ID has changed, clear out the potency value.
                if (origInventBatchId && origInventBatchId != fieldValues.parmBatchId())
                {
                    fieldValues.insert(#Potency, '');
                    break;
                }

                // Validate the potency value.
                if (_control.parmEnabled()
                &&  !pass.exists(#SkipPotencyValidation)
                &&  !(pass.hasValue(#Potency)
                &&    pass.lookup(#Potency) == _control.parmData()))
                {
                    if (this.validatePotency(_control.parmData()))
                    {
                        _control.fail(this.parmErrorMessage());
                    }
                }

                if (pass.exists(#SkipPotencyValidation))
                {
                    pass.remove(#SkipPotencyValidation);
                }

                if (!_control.parmHasError())
                {
                    // Clear out the base attribute ID, if it has been set.
                    if (pass.exists(#BaseAttributeId))
                    {
                        pass.remove(#BaseAttributeId);
                    }

                    // If the potency value has passed validation, remove the warning.
                    if (pass.exists(#PotencyValueWarn))
                    {
                        pass.remove(#PotencyValueWarn);
                    }

                    fieldValues.insert(#Potency, _control.parmData());
                }
                break;

            case #DimUOM:
                // Use the selected dimension UOM, if necessary.
                if (pass.exists(#UseSelectedDimUOM))
                {
                    _control.parmData(_control.parmSelected());
                    pass.remove(#UseSelectedDimUOM);
                }

                fieldValues.insert(#DimUOM, _control.parmData());
                InventDimId inventDimIdProductUoM = this.findInventDimIdProduct();
                if (pass.exists(#DimRunningQty) && WHSWorkExecuteDisplay::str2numDisplay(pass.lookupStr(#DimRunningQty)) != 0 &&
                    WHSCatchWeightHelper::convertInventQuantity(pass.lookupStr(#ItemId),
                                                   _control.parmData(),
                                                   fieldValues.parmDimQty(),
                                                   inventDimIdProductUoM) > WHSWorkExecuteDisplay::str2numDisplay(pass.lookupStr(#DimRunningQty)))
                {
                    _control.fail("@WAX1172");
                    break;
                }
                break;

            case #DimQty:
                Qty dimQty = WHSWorkExecuteDisplay::str2numDisplay(_control.parmData());
                if (dimQty < 0)
                {
                    _control.fail("@WAX1172");
                    break;
                }

                fieldValues.insert(#DimQty, dimQty);
                break;

            case #ClusterPosition:
                if (!this.validateAndUpdateWorkClusterPositionName(_control.parmData()))
                {
                    _control.fail("@WAX5565");
                }
                break;

            case #BatchDisposition:
                origInventBatchId = this.getOrigInventBatchId();

                // If the batch ID has changed, reset the batch disposition code to the default value.
                if (origInventBatchId && origInventBatchId != fieldValues.parmBatchId())
                {
                    pass.insert(#ResetBatchDisposition, 1);

                    fieldValues.insert(#BatchDisposition, '');
                    break;
                }

                // Use the selected batch disposition code, if necessary.
                if (pass.exists(#UseSelectedBatchDispCode))
                {
                    _control.parmData(_control.parmSelected());
                    pass.remove(#UseSelectedBatchDispCode);
                }

                // Validate the batch disposition code.
                if (_control.parmEnabled() &&
                    this.validateBatchDisposition(_control.parmData()))
                {
                    _control.fail(this.parmErrorMessage());
                    break;
                }

                // If the batch disposition code has passed validation, remove the warning.
                if (pass.exists(#BatchDispositionWarn))
                {
                    pass.remove(#BatchDispositionWarn);
                }

                fieldValues.insert(#BatchDisposition, _control.parmData());
                break;

            case #MixedLPLineNum:
                if (WHSMixedLicensePlateReceiptLine::existOpenLPLine(fieldValues.parmLicensePlateId(), str2int(_control.parmData())))
                {
                    fieldValues.insert(#MixedLPLineNum, _control.parmData());
                }
                else
                {
                    _control.fail("@WAX:MixedLPIncorrectLineNumber");
                }
                break;

            case #NewQty:
                fieldValues.insert(#NewQty, _control.parmData());
                break;

            case WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmation:
                this.processControlPieceByPieceConfirmation(_control.parmData(), _control);
                break;

            case #CycleCountUOM1:
                if (!fieldValues.exists(WHSWorkExecuteDisplayPieceByPieceControls::CycleCountContainer)
                    &&  WHSRFAutoConfirm::isPieceByPieceConfirmationEnabled(pass.lookup(#MenuItem), workLine.WorkType)
                    &&  !this.isCatchWeightItem(pass.lookupStr(#ItemId)))
                {
                    this.updatePieceByPieceCycleCountContainer(_control.parmData());
                }
                else
                {
                    fieldValues.insert(_control.parmName(), _control.parmData());
                }
                break;

            default:
                FieldId dimFieldId = fieldName2Id(tableNum(InventDim), _control.parmName());
                if (dimFieldId && !InventDim::isFieldIdDimensional(dimFieldId))
                {
                    break;
                }
                _control.defaultProcessing();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCreateBatchForExpDate</Name>
				<Source><![CDATA[
    private boolean shouldCreateBatchForExpDate()
    {
        if (mode == WHSWorkExecuteMode::LicensePlateLoading)
        {
            return !InventBatch::exist(fieldValues.parmBatchId(), pass.lookup(#ItemId));
        }

        if (mode == WHSWorkExecuteMode::AdjustmentIn)
        {
            if (WHSBatchDetailsCapturePolicyDateValuesCalculationFlight::instance().isEnabled() &&
                WhsBatchDetailsCapturePolicy::findByItemId(pass.lookup(#ItemId)).CalculateBatchDateValues)
            {
                return false;
            }

            return !InventBatch::exist(fieldValues.parmBatchId(), pass.lookup(#ItemId));
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInboundOrderLine</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal WHSReceiptOrderLine getInboundOrderLine(TradeLineNumber lineNum, InventTransType _inventTransType)
    {
        WHSReceiptOrderLine ret;

        if (_inventTransType == InventTransType::Purch)
        {
            ret = PurchLine::find(purchId, lineNum);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReceiptLineNumber</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean validateReceiptLineNumber(WhsControl _control, InventTransType _inventTransType)
    {
        TradeLineNumber lineNum = str2int64(_control.parmData());

        WHSReceiptOrderLine orderLine = this.getInboundOrderLine(lineNum, _inventTransType);
        if (!orderLine)
        {
            return _control.fail("@WAX:InvalidLineNumber");
        }

        WHSWorkExecutionMode workExecutionMode = WHSWorkExecutionMode::newFromMode(mode);

        if (workExecutionMode.isInboundOrderLineReceiving())
        {
            if (this.inboundOrderLineHasMoreThanOneLoadLine(orderLine))
            {
                return _control.fail(strFmt("%1\n%2", "@WAX:InboundOrderLineOnMoreThanOneLoad", "@SYP4881106"));
            }

            if (this.inboundOrderLineHasNegativeQuantity(orderLine))
            {
                return _control.fail(strFmt("@WAX:InboundOrderLineCannotBeReceivedWithNegativeQuantity", orderLine.LineNumber));
            }

            if (WHSRFControlDataValidatePOLineStatusFlight::instance().isEnabled()
                && this.isInboundOrderLineStatusCanceled(orderLine, _inventTransType))
            {
                return _control.fail(strFmt("@WAX:InboundOrderLineInStatusCanceledCannotBeReceived", orderLine.LineNumber));
            }
        }
        else if (workExecutionMode.isInboundOrderItemReceiving())
        {
            if (orderLine.ItemId != fieldValues.parmItemId())
            {
                pass.remove(_control.parmName());
                return true;
            }
        }

        fieldValues.insert(_control.parmName(), lineNum);

        if (workExecutionMode.isInboundOrderLineReceiving()         ||
            mode == WHSWorkExecuteMode::LoadItemReceiving           ||
            mode == WHSWorkExecuteMode::LoadItemReceivingAndLocate)
        {
            InventInventItemSearch localInventItemSearch             = InventInventItemSearch::construct();
            InventInventItemSearchResult localInventItemSearchResult = localInventItemSearch.search(orderLine.ItemId);
                    
            InventDim itemInventDim;

            if (localInventItemSearchResult
                && localInventItemSearchResult.parmItemId() == orderLine.ItemId)
            {
                itemInventDim = InventDim::find(localInventItemSearchResult.parmInventDimId());
            }

            if (!this.validateItemOnReceiptOrderLine(orderLine.OrderNumber, orderLine.ItemId, itemInventDim, _inventTransType))
            {
                return _control.fail("@SYP4980009");
            }

            if (this.getInboundOrderLineNumByItem(orderLine.OrderNumber, orderLine.ItemId, itemInventDim, _inventTransType) == 0
                && !workLine)
            {
                return _control.fail(strFmt("%1\n%2", "@SYP4980046", "@SYP4980047"));
            }

            fieldValues.insert(#ItemId, orderLine.ItemId);
            fieldValues.insert(#Qty, orderLine.Qty);
        }

        uom = this.getInboundUOM(orderLine);
        fieldValues.insert(#UOM, uom);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundOrderLineStatusCanceled</Name>
				<Source><![CDATA[
    private boolean isInboundOrderLineStatusCanceled(WHSReceiptOrderLine _orderLine, InventTransType _inventTransType)
    {
        boolean ret;

        if (_inventTransType == InventTransType::Purch)
        {
            PurchLine purchLine = PurchLine::find(_orderLine.OrderNumber, _orderLine.LineNumber);
            ret = purchLine.isCanceled();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetLicensePlateOnClusterPicking</Name>
				<Source><![CDATA[
    private boolean validateTargetLicensePlateOnClusterPicking(WHSLicensePlateId _targetLicensePlate)
    {
        if (step < #SortVerification)
        {
            return (this.validateTargetLicensePlateNotOnWork(_targetLicensePlate) && this.validateLicensePlateQty(_targetLicensePlate)) ||
                    this.targetLicensePlaceOnCurrentClusterPickingWork(_targetLicensePlate);
        }
        
        return this.validateAndUpdateWorkClusterLPScan(_targetLicensePlate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowNotEmptyTargetLP</Name>
				<Source><![CDATA[
    private boolean allowNotEmptyTargetLP(WHSLicensePlateId _licensePlateId)
    {
        return pass.parmLicensePlateId() == _licensePlateId 
            && WHSRFMenuItemTable::find(menuItemName).OverrideTargetLP
            && WhsWorkExecute::construct().isWholeLicensePlate(_licensePlateId, workLine, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustMarkComboBoxControlErrorOnPreviousControl</Name>
				<Source><![CDATA[
    //Do not expose.
    private boolean mustMarkComboBoxControlErrorOnPreviousControl(str _name)
    {
        switch (_name)
        {
            case #BatchUOM:
            case #DimUOM:
                return !pass.exists(#SelectedValue);

            case #UOM:
            case #QtyVerifyUOM:
                return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessSelectedValueOnComboBoxControl</Name>
				<Source><![CDATA[
    //Do not expose. Extenders must implement a control.
    private boolean canProcessSelectedValueOnComboBoxControl(str _name, str _data)
    {
        WhsControlContext context = this.createContext();
        WhsControl control = WhsControl::newFromControlName(_name, context);
        control.parmData(_data);

        return control.isValueSelected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessDefaultValueOnComboBoxControl</Name>
				<Source><![CDATA[
    //Do not expose. Extenders must implement a control.
    private boolean canProcessDefaultValueOnComboBoxControl(str _name, str _data)
    {
        WhsControlContext context = this.createContext();
        WhsControl control = WhsControl::newFromControlName(_name, context);
        control.parmData(_data);

        if (_data && control.canProcessDefaultValue())
        {
            return true;
        }

        switch (_name)
        {
            case #InventoryStatus:
            case #FromInventoryStatus:
                if (pass.exists(#SelectedValue))
                {
                    return false;
                }
                break;
            
            case #WorkPoolId:
            case #UseVendBatchDate:
            case #UseVendExpDate:
            case #BatchDisposition:
            case #RAFEndJob:
                if (_data)
                {
                    return true;
                }
                break;

            case #AdjustmentType:
                if (_data && mode == WHSWorkExecuteMode::AdjustmentOut)
                {
                    return true;
                }
                break;

            case #CountingReasonCode:
                if (mode == WHSWorkExecuteMode::AdjustmentOut) //Processes the counting reason code control for adjustment out work execute mode
                {
                    return true;
                }
                break;
        }

        if (workLine.whsWorkTable().WorkTransType == WHSWorkTransType::CycleCount)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes each RF control.
    /// </summary>
    /// <param name="_name">
    ///     The name of the control.
    /// </param>
    /// <param name="_data">
    ///     The data contained within the control.
    /// </param>
    /// <param name="_enabled">
    ///     A Boolean value indicating whether the control is enabled for edit.
    /// </param>
    /// <param name="_selected">
    ///     The currently selected value.
    /// </param>
    /// <returns>
    ///     Returns a Boolean value indicating whether the data is invalid.
    /// </returns>
    boolean processControl(
        str _name,
        str _data,
        int _enabled = 1,
        str _selected = '')
    {
        WhsControlContext context = this.createContext();
        WhsControl control = WhsControl::newFromControlName(_name, context);
        
        boolean isBarcodeData;

        control.initializeForProcessing(_data, _selected, _enabled);

        if (ShouldUseExtensibleBarcodeDataParser)
        {
            if (control.parmEnabled())
            {
                WHSIBarcodeDataParser dataParser = WHSBarcodeDataParserFactory::newForInputString(_data).withMenuItemName(menuItemName).tryCreate();
            
                if (dataParser)
                {
                    isBarcodeData = true;
                    control.parmData('');

                    WHSGS1BarcodeEAN128Control barcodeEAN128 = WHSGS1BarcodeEAN128Control::newWithControlAndParser(control, dataParser, menuItemName, pass, fieldValues, this);
                    barcodeEAN128.decode();
                }
            }
        }
        else if (ShouldUseNewGS1Parser)
        {
            WHSGS1Parser dataParser = WHSGS1Parser::newWithInputString(_data);
            isBarcodeData = dataParser.isGS1EncodedData();
            if (isBarcodeData)
            {
                control.parmData('');

                WHSGS1BarcodeEAN128Control barcodeEAN128 = WHSGS1BarcodeEAN128Control::newWithControlAndParser(control, dataParser, menuItemName, pass, fieldValues, this);
                barcodeEAN128.decode();
            }
        }

        this.processingControl(control);

        if (ShouldUseOriginalGS1Parser)
        {
            WHSGS1BarcodeEAN128Control barcodeEAN128 = WHSGS1BarcodeEAN128Control::construct(control, menuItemName, pass, fieldValues, this);
            barcodeEAN128.decode();
        }

        if (control.parmHasError())
        {
            this.setErrorMessage(control);
            return true;
        }

        if (IsControlSkipProcessingBlankValueFlightEnabled && (ShouldUseNewGS1Parser || ShouldUseExtensibleBarcodeDataParser) && isBarcodeData && control.parmData() == '' && control.parmSelected() == '')
        {
            // Skip process
            fieldValues.insert(_name, '');
        }
        else
        {
            control.process();
            this.processLegacyControl(control);
        }
        
        if (control.parmHasError())
        {
            this.setErrorMessage(control);

            if (_name != #BatchUOM)
            {
                fieldValues.insert(_name, '');
            }
        }

        this.processedControl(control);

        if (control.parmHasError())
        {
            this.setErrorMessage(control);
        }

        return control.parmHasError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the error message to the outcome of the current control.
    /// </summary>
    /// <param name = "_control">Current control being processed. Do not expose this method.</param>
    private void setErrorMessage(WhsControl _control)
    {
        if (_control.parmHasError() && !_control.parmErrorMessage())
        {
            Debug::assert(_control.parmErrorMessage() != '');
            this.setGenericErrorMessage();
            _control.fail(errorMessage);
        }
        else if (_control.parmHasError())
        {
            errorMessage = _control.parmErrorMessage();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGenericErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the error message to a generic error.
    /// </summary>
    /// <remarks>This method is a fall back in case an error message has not been properly set. Do not expose this method.</remarks>
    private void setGenericErrorMessage()
    {
        if (!errorMessage)
        {
            Debug::assert(errorMessage != '');
            errorMessage = "@WAX:WhsMobileDeviceUnknownError";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitEnabledForCycleCount</Name>
				<Source><![CDATA[
    internal final boolean validateUnitEnabledForCycleCount(
        WHSWorkType         _workType,
        ItemId              _item,
        UnitOfMeasureSymbol _uom,
        WhsControl          _control)
    {
        if (_workType == WHSWorkType::Count
            && !WHSUOMSeqGroupLine::isUnitEnabledForCycleCount(WHSInventTable::find(_item).UOMSeqGroupId, _uom))
        {
            _control.fail("@WAX:InvalidUOMForCycleCount");
        }

        return _control.parmHasError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFieldsFromItemSearch</Name>
				<Source><![CDATA[
    internal final boolean populateFieldsFromItemSearch(
        InventDimId         _itemInventDimId,
        InventDimId         _workingInventDimId,
        UnitOfMeasureSymbol _uom,
        Qty                 _qty,
        WhsControl          _control,
        boolean             _updatePieceByPiece = true,
        str                 _data = '')
    {
        InventDim itemInventDim     = InventDim::find(_itemInventDimId);
        InventDim workingInventDim  = InventDim::find(_workingInventDimId);
        
        if (itemInventDim.anyProductDimensionSpecified() || workingInventDim.anyProductDimensionSpecified())
        {
            InventTable inventTable = InventTable::find(workLine.WorkType == WHSWorkType::Count ? pass.lookup(#ItemId) : workLine.ItemId);
            EcoResProductDimGroupSetup productDimGroupSetup = EcoResProductDimGroupSetup::newInventTable(inventTable);

            if (InventDim::isInventDimEqualProductDim(productDimGroupSetup, workingInventDim, itemInventDim))
            {
                if (_data)
                {
                    fieldValues.insert(#ProductConfirmation, _data);
                    pass.insert(WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmUOM, _uom);
                }

                if (_updatePieceByPiece)
                {
                    this.increasePieceByPieceConfirmation(_control, _qty, _uom);
                }
            }
            else
            {
                _control.fail("@SYP4980009");
                
            }
        }
        else
        {
            if (_data)
            {
                fieldValues.insert(#ProductConfirmation, _data);
                pass.insert(WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmUOM, _uom);
            }

            if (_updatePieceByPiece)
            {
                this.increasePieceByPieceConfirmation(_control, _qty, _uom);
            }
        }

        return _control.parmHasError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processControlPieceByPieceConfirmation</Name>
				<Source><![CDATA[
    private void processControlPieceByPieceConfirmation(
        str        _data,
        WhsControl _control)
    {
        InventInventItemSearchResult localInventItemSearchResult = this.createItemSearch(_data);
        ItemId  passItemId = pass.lookupStr(#ItemId);

        if (localInventItemSearchResult
            && (localInventItemSearchResult.parmItemId() == workLine.ItemId
            ||  (workLine.WorkType == WHSWorkType::Count
            &&   localInventItemSearchResult.parmItemId() == passItemId)))
        {
            if (!localInventItemSearchResult.parmQty())
            {
                _control.fail("@WAX:PieceByPieceNoQtyScanError");
            }
            else
            {
                UnitOfMeasureSymbol pieceConfirmUOM = localInventItemSearchResult.parmUnitOfMeasureSymbol();
                
                if (!this.validateUnitEnabledForCycleCount(workLine.WorkType, passItemId, pieceConfirmUOM, _control))
                {
                    InventDimId currentDimId;

                    if (workLine.WorkType == WHSWorkType::Count)
                    {
                        currentDimId = pass.createInventDimFromPass().inventDimId;
                    }
                    else
                    {
                        currentDimId = workLine.inventDimId;
                    }

                    this.populateFieldsFromItemSearch(localInventItemSearchResult.parmInventDimId(),
                                                                 currentDimId,
                                                                 pieceConfirmUOM,
                                                                 localInventItemSearchResult.parmQty(),
                                                                 _control,
                                                                 true,
                                                                 _data);
                }
            }
        }
        else if (workLine.WorkType != WHSWorkType::Count)
        {
            this.increasePieceByPieceConfirmation(_control, WhsWorkExecuteDisplay::str2numDisplay(_data));
        }
        else
        {
            if (WHSWorkExecuteDisplay::str2numDisplay(_data) == 0)
            {
                _control.fail("@WAX1172");
            }

            fieldValues.insert(WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmation, _data);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemSearch</Name>
				<Source><![CDATA[
    internal final InventInventItemSearchResult createItemSearch(str _data)
    {
        return InventInventItemSearch::construct().search(_data);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePieceByPieceCycleCountContainer</Name>
				<Source><![CDATA[
    private void updatePieceByPieceCycleCountContainer(
        UnitOfMeasureSymbol _uom,
        Qty                 _qty = fieldValues.lookupReal(WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmation))
    {
        container cycleCountContainer = str2con(pass.lookupStr(WHSWorkExecuteDisplayPieceByPieceControls::CycleCountContainer));
        int uomLoc = conFind(cycleCountContainer, _uom);

        if (uomLoc)
        {
            int uomQtyLoc = uomLoc + 1;
            
            Qty newQty = str2num(conPeek(cycleCountContainer, uomQtyLoc));
            newQty += _qty;
            cycleCountContainer = conPoke(cycleCountContainer, uomQtyLoc, newQty);
 
        }
        else
        {
            cycleCountContainer += _uom;
            cycleCountContainer += _qty;
        }
        
        fieldValues.insert(WHSWorkExecuteDisplayPieceByPieceControls::CycleCountContainer, con2Str(cycleCountContainer));
        fieldValues.insert(WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmation, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>increasePieceByPieceConfirmation</Name>
				<Source><![CDATA[
    private boolean increasePieceByPieceConfirmation(
        WhsControl          _control,
        Qty                 _qty,
        UnitOfMeasureSymbol _fromUOM = '')
    {
        if (workLine)
        {
            if (workLine.WorkType == WHSWorkType::Count
            &&  _fromUOM)
            {
                this.updatePieceByPieceCycleCountContainer(_fromUOM, _qty);
            }
            else if (!fieldValues.exists(#ProductConfirmation)
                 ||  fieldValues.lookupStr(#ProductConfirmation) != '')
            {
                Qty totalConverted = this.calculateTotalConvertedQuantity(_qty, _fromUOM);
                
                if (totalConverted > pass.lookupReal(WHSWorkExecuteDisplayPieceByPieceControls::TotalPiecesToConfirm))
                {
                    _control.fail("@WAX:PieceByPieceOverConfirmError");
                }
                else
                {
                    fieldValues.insert(WHSWorkExecuteDisplayPieceByPieceControls::PiecesConfirmed, totalConverted);
                    fieldValues.insert(WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmation, fieldValues.lookup(WHSWorkExecuteDisplayPieceByPieceControls::PiecesConfirmed));
                }
            }
            else
            {
                fieldValues.insert(WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmation, _qty);
            }
        }
        else
        {
            _control.fail("@WAX:PieceByPieceNoWorkLineError");
        }

        return _control.parmHasError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUOMFromProductConfirmationField</Name>
				<Source><![CDATA[
    private RecId getUOMFromProductConfirmationField()
    {
        RecId uomRefRecId;

        if (fieldValues.exists(#ProductConfirmation)
            && pass.exists(WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmUOM)
            && fieldValues.lookupStr(#ProductConfirmation) != workLine.ItemId)
        {
            uomRefRecId = UnitOfMeasure::findBySymbol(pass.lookup(WHSWorkExecuteDisplayPieceByPieceControls::PieceByPieceConfirmUOM)).RecId;
        }

        return uomRefRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalConvertedQuantity</Name>
				<Source><![CDATA[
    private Qty calculateTotalConvertedQuantity(
        Qty                 _qty,
        UnitOfMeasureSymbol _fromUOM)
    {
        Qty totalConverted;
        RecId fromUOMRefRecId;

        if (!_fromUOM)
        {
            fromUOMRefRecId = this.getUOMFromProductConfirmationField();
        }
        else
        {
            fromUOMRefRecId = UnitOfMeasure::findBySymbol(_fromUOM).RecId;
        }

        if (!fromUOMRefRecId)
        {
            // If UOM still does not exist, assume that the incoming quantity is in inventory quantity.
            // Reason: UI does not have a UOM selection option and the value displayed as "x of y confirmed" is in inventory qty.
            totalConverted = _qty + WhsWorkExecuteDisplay::str2numDisplay(pass.lookupStr(WHSWorkExecuteDisplayPieceByPieceControls::PiecesConfirmed));
            return totalConverted;
        }
        
        RecId toUOMRefRecId = UnitOfMeasure::findBySymbol(InventTable::find(workLine.ItemId).inventUnitId()).RecId;

        EcoResReleasedProductUnitConverter unitConverter = EcoResReleasedProductUnitConverter::construct();
        Qty convertedQty = unitConverter.convert(_qty,
                                                    fromUOMRefRecId,
                                                    toUOMRefRecId,
                                                    NoYes::No,
                                                    workLine.ItemId,
                                                    workLine.InventDimId,
                                                    NoYes::No);
        totalConverted = convertedQty + WhsWorkExecuteDisplay::str2numDisplay(pass.lookupStr(WHSWorkExecuteDisplayPieceByPieceControls::PiecesConfirmed));

        return totalConverted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rebuilds container with error message in it.
    /// </summary>
    /// <param name="_con">
    /// Container to be rebuilt.
    /// </param>
    /// <returns>
    /// Rebuilt container.
    /// </returns>
    container rebuildContainer(container    _con)
    {
        container       ret = conNull();
        container       con = _con;
        container       errorCon = conNull();

        ret += [conPeek(con, 1)];
        ret += [conPeek(_con, 2)];

        con = conDel(con, 1, 1);
        con = conDel(con, 1, 1);

        errorCon += #RFLabel;
        errorCon += #RFError;
        errorCon += errorMessage;
        errorCon += 1;
        errorCon += '';
        errorCon += '';
        errorCon += 0;
        errorCon += '';
        errorCon += 0;
        errorCon += true;
        errorCon += '';
        errorCon += #RFColorDefault;

        ret += [errorCon];
        ret += con;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialExistInLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an item with the same serial id exists in the location specified in RF pass through.
    /// </summary>
    /// <param name="_inventSerialId">
    /// Serial id of the item.
    /// </param>
    /// <returns>
    /// True if an item with the same serial id exists in the location.
    /// </returns>
    boolean serialExistInLocation(InventSerialId      _inventSerialId)
    {
        InventDim   inventDim;
        InventDim   workInventDim = workLine.inventDim();
        boolean     ret = false;

        inventDim = pass.createInventDimFromPass();

        if (workInventDim.InventStatusId)
        {
            inventDim.InventStatusId = workInventDim.InventStatusId;
        }

        if (!inventDim.inventBatchId && workInventDim.inventBatchId)
        {
            inventDim.inventBatchId = workInventDim.inventBatchId;
        }

        if (mode != WHSWorkExecuteMode::AdjustmentOut && pass.exists(#SelectedValue))
        {
            if (WHSInventStatus::find(pass.lookup(#SelectedValue)))
            {
                inventDim.InventStatusId = pass.lookup(#SelectedValue);
            }

            if (this.parmFromInventStatusId() && this.parmFromInventStatusId() != pass.lookup(#SelectedValue))
            {
                inventDim.InventStatusId = this.parmFromInventStatusId();
            }
        }

        inventDim.InventSerialId = _inventSerialId;

        inventDim = InventDim::findOrCreate(inventDim);

        if (WHSInventOnHand::getWorkPhysicalInventHandlingQty(fieldValues.parmItemId(), inventDim.InventDimId) > 0)
        {
            ret = true;
        }

        // If the On Hand validation fails we are looking for transactions that are picked for the Prod order of a material consumption scenario
        if (!ret && mode == WHSWorkExecuteMode::MaterialConsumption)
        {
            this.parmFromInventStatusId(this.getInventStatusId());
            if (!this.parmFromInventStatusId())
            {
                this.parmFromInventStatusId(WHSMaterialConsumptionJournalHelper::statusFromPickedOrReservedTransactionInventDim(this.findInventDimId(),
                                                                                                                        pass.lookup(#ItemId),
                                                                                                                        pass.lookupStr(#ProdId)));
            }
            
            InventDim dimWithSerial = InventDim::find(this.findInventDimId());
            dimWithSerial.InventSerialId = _inventSerialId;
            if (this.isCatchWeightItem(pass.lookup(#ItemId)))
            {
                if (!dimWithSerial.WMSLocationId && pass.exists(#WMSLocationId))
                {
                    dimWithSerial.WMSLocationId = pass.lookupStr(#WMSLocationId);
                }
                if (!dimWithSerial.LicensePlateId && pass.exists(#LicensePlateId))
                {
                    dimWithSerial.LicensePlateId = pass.lookupStr(#LicensePlateId);
                }
            }
            dimWithSerial = InventDim::findOrCreate(dimWithSerial);
            if (WHSMaterialConsumptionJournalHelper::getRemainingTransHandlingQtyForConsumptionForPickReservPhy(pass.lookupStr(#ProdId),
                                                                                                                    fieldValues.parmItemId(),
                                                                                                                     dimWithSerial) != 0)
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateWorkClusterLPScan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the license plate id scanned in is the proper target license plate id for the cluster item and updates the container
    /// </summary>
    /// <param name="_licensePlateId">
    /// The target license plate id scanned in during cluster picking
    /// </param>
    /// <returns>
    /// True if the LP is the same as the target for the current work in the cluster; otherwise, false
    /// </returns>
    public boolean validateAndUpdateWorkClusterLPScan(WHSLicensePlateId _licensePlateId)
    {
        boolean             ret;

        ttsbegin;

        WHSWorkClusterTable workClusterTable = WHSWorkClusterTable::find(pass.lookupStr(#ClusterId), true);

        ret = this.validateWorkClusterLPScan(workClusterTable, _licensePlateId);

        if (ret)
        {
            workClusterTable.WorkClusterTransContainer = conDel(workClusterTable.WorkClusterTransContainer, 1, 1);
            workClusterTable.update();
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkClusterLPScan</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the license plate id scanned in is the proper target license plate id for the cluster item.
    /// </summary>
    /// <param name="_workClusterTable">
    /// The cluster being picked.
    /// </param>
    /// <param name="_licensePlateId">
    /// The target license plate id scanned in during cluster picking.
    /// </param>
    /// <returns>
    /// True if the LP is the same as the target for the current work in the cluster; otherwise, false.
    /// </returns>
    protected boolean validateWorkClusterLPScan(WHSWorkClusterTable _workClusterTable, WHSLicensePlateId _licensePlateId)
    {
        if (_workClusterTable.WorkClusterTransContainer)
        {
            WHSWorkTransId workTransId = conPeek(_workClusterTable.WorkClusterTransContainer, 1);

            WHSWorkTable workTable = WHSWorkTable::find(WHSWorkTrans::find(workTransId).WorkId);

            return _licensePlateId == workTable.TargetLicensePlateId;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateWorkClusterPositionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the work cluster position name against the current work in the work cluster and updates the container
    /// </summary>
    /// <param name="_clusterPosition">
    /// The position scanned into the RF for the current work
    /// </param>
    /// <returns>
    /// True if the cluster position entered matches position of the current work; otherwise, false
    /// </returns>
    public boolean validateAndUpdateWorkClusterPositionName(WHSClusterPosition _clusterPosition)
    {
        WHSWorkTransId      workTransId;
        WHSWorkTrans        workTrans;
        WHSWorkClusterTable workClusterTable;
        WHSWorkClusterLine  workClusterLine;
        boolean             ret;

        ttsbegin;

        workClusterTable = WHSWorkClusterTable::find(pass.lookupStr(#ClusterId), true);

        if (workClusterTable.WorkClusterTransContainer)
        {
            workTransId = conPeek(workClusterTable.WorkClusterTransContainer, 1);

            workTrans = WHSWorkTrans::find(workTransId);

            select firstonly ClusterPosition from workClusterLine
                where workClusterLine.ClusterId == pass.lookup(#ClusterId)  &&
                      workClusterLine.WorkId    == workTrans.WorkId;

            ret = (_clusterPosition == workClusterLine.ClusterPosition) ? true : false;

            if (ret)
            {
                workClusterTable.WorkClusterTransContainer = conDel(workClusterTable.WorkClusterTransContainer, 1, 1);
                workClusterTable.update();
            }
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAssignSerial</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates assigned serial id.
    /// </summary>
    /// <param name="_serialId">
    /// Serial id.
    /// </param>
    /// <returns>
    /// True if it is validated, false otherwise.
    /// </returns>
    boolean validateAssignSerial(InventSerialId     _serialId)
    {
        WHSDimTracking  dimTracking;
        InventDim       inventDim;
        boolean         ret = true;

        if (WHSWorkExecute::skipSerialValidation(workLine.ItemId))
        {
            return true;
        }

        select firstonly RecId from dimTracking
            join InventDimId, InventSerialId from inventDim
            where dimTracking.InventDimId   == inventDim.InventDimId    &&
                  dimTracking.WorkId        == workLine.WorkId       &&
                  dimTracking.LineNum       == workLine.LineNum         &&
                  inventDim.InventSerialId  == _serialId;

        if (dimTracking.RecId != 0)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchDisposition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the specified batch disposition code.
    /// </summary>
    /// <param name="_batchDispCode">
    ///     The specified batch disposition code.
    /// </param>
    /// <param name="_controlName">
    ///     The name used to identify the RF control.
    /// </param>
    /// <returns>
    ///     Returns a Boolean value to indicate whether the data is valid.
    /// </returns>
    protected boolean validateBatchDisposition(PdsBatchDispositionCode _batchDispCode, str _controlName = #BatchDisposition)
    {
        boolean                 hasError;
        PdsBatchDispositionCode defaultValue;

        // Only perform the validation check if the batch disposition code has changed.
        if (!pass.exists(_controlName)
        ||  pass.lookup(_controlName) != _batchDispCode)
        {
            defaultValue = pass.lookupStr(#BatchDispositionDefault);

            // If batch disposition is being changed, validate that the new disposition code is not the same as the original.
            if (mode            == WHSWorkExecuteMode::ChangeBatchDisposition
            &&  _batchDispCode  == defaultValue)
            {
                hasError = true;
                errorMessage = "@WAX5577";
            }

            // Display a warning if the batch disposition code does not match the default value.
            if (!hasError
            &&  _batchDispCode                      != defaultValue
            &&  (!pass.exists(#BatchDispositionWarn)
            ||   pass.lookup(#BatchDispositionWarn) != _batchDispCode))
            {
                hasError = true;
                errorMessage = "@WAX5566";

                pass.insert(#BatchDispositionWarn, _batchDispCode);
                colorText = WHSRFColorText::Warning;
            }
        }

        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchIdOnTOItemReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates batch id on the receiving transfer order item.
    /// </summary>
    /// <param name="_batchId">
    /// Batch id to be validated.
    /// </param>
    /// <returns>
    /// True if the batch id is validated.
    /// </returns>
    boolean validateBatchIdOnTOItemReceiving(InventBatchId _batchId)
    {
        boolean             ret = true;
        InventTransferLine  transferLine;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventDim           inventDim;

        transferLine = InventTransferLine::find(pass.lookup(#TONum), pass.parmTOLineNum());

        select firstonly inventTrans
            join InventDimId, InventBatchId from inventDim
            join InventTransId, RecId from inventTransOrigin
            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId              &&
                  inventTransOrigin.InventTransId   == transferLine.InventTransIdReceive    &&
                  inventTrans.StatusReceipt         == StatusReceipt::Ordered               &&
                  inventTrans.StatusIssue           == StatusIssue::None                    &&
                  inventDim.InventDimId             == inventTrans.InventDimId              &&
                  inventDim.InventBatchId           == _batchId;

        if (!inventTrans)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferOrderReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the control is used by a transfer order receiving flow.
    /// </summary>
    /// <returns>true if the control is used by a transfer order receiving flow; otherwise, false.</returns>
    internal boolean isTransferOrderReceiving()
    {
        switch (mode)
        {
            case WHSWorkExecuteMode::TransferOrderItemReceiving:
            case WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate:
            case WHSWorkExecuteMode::TransferOrderLineReceiving:
            case WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate:
                return true;

            case WHSWorkExecuteMode::MixedLPReceiving:
            case WHSWorkExecuteMode::MixedLPReceivingAndLocate:
                WHSRFMenuItemTable rfMenuItem = WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem));
                return rfMenuItem.MixedLPReceivingMode == WHSMixedLPReceivingMode::TOItemReceiving
                    || rfMenuItem.MixedLPReceivingMode == WHSMixedLPReceivingMode::TOLineReceiving;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates batch id in location cycle count.
    /// </summary>
    /// <param name="_batchId">
    /// Batch id to be validated.
    /// </param>
    /// <returns>
    /// True if batch id is validated.
    /// </returns>
    boolean validateBatchInLocationCycleCount(InventBatchId   _batchId)
    {
        InventDim inventDimValue;

        inventDimValue.InventBatchId = _batchId;

        return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventBatchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchQtyOnTOItemReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that quantity of the transfer order line that has item from a specific batch
    /// matches with receiving quantity.
    /// </summary>
    /// <param name="_batchId">
    /// Batch id.
    /// </param>
    /// <param name="_batchQty">
    /// Receiving batch quantity.
    /// </param>
    /// <returns>
    /// True if it is validated, false otherwise.
    /// </returns>
    boolean validateBatchQtyOnTOItemReceiving(InventBatchId _batchId, Qty _batchQty)
    {
        boolean             ret = true;
        InventTransferLine  transferLine;
        InventDim           inventDim;
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        transferLine = InventTransferLine::find(pass.lookup(#TONum), pass.parmTOLineNum());

        select firstonly Qty, PdsCWQty from inventTrans
            join InventDimId, InventBatchId from inventDim
            join RecId, InventTransId from inventTransOrigin
            where inventTrans.InventTransOrigin     == inventTransOrigin.RecId              &&
                  inventTransOrigin.InventTransId   == transferLine.InventTransIdReceive    &&
                  inventTrans.StatusReceipt         == StatusReceipt::Ordered               &&
                  inventTrans.StatusIssue           == StatusIssue::None                    &&
                  inventDim.InventDimId             == inventTrans.InventDimId              &&
                  inventDim.InventBatchId           == _batchId;

        InventHandlingQty handlingQty;

        //if we have a pdscwqty we assume the item is CW enabled and use the cw qty as handling qty
        if (inventTrans.PdsCWQty)
        {
            handlingQty = inventTrans.PdsCWQty;
        }
        else
        {
            handlingQty = inventTrans.Qty;
        }

        if (handlingQty < _batchQty)
        {
            fieldValues.insert(#BatchQty, handlingQty);
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateColorIdMixing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the given color id of an item is allowed in the location.
    /// </summary>
    /// <param name="_inventColorId">
    /// Color id to be validated.
    /// </param>
    /// <returns>
    /// True if it is validated, false otherwise.
    /// </returns>
    boolean validateColorIdMixing(EcoResItemColorName _inventColorId)
    {
        boolean     ret;
        InventSum   inventSum;
        InventDim   inventDim;

        ttsbegin;

        if (WHSLocationProfile::find(this.wmsLocation().LocProfileId).AllowMixedItems)
        {
            ret = true;
        }
        else
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select firstonly RecId from inventSum
                    where inventSum.PhysicalInvent      != 0                    &&
                          inventSum.ClosedQty           == NoYes::No            &&
                          inventSum.InventSiteId        == inventSiteId         &&
                          inventSum.InventLocationId    == inventLocationId     &&
                          inventSum.wmsLocationId       == locationId           &&
                          inventSum.InventColorId       != _inventColorId;
            }
            else
            {
                select firstonly RecId from inventSum
                join InventDimId, InventSiteId, InventLocationId, wmsLocationId, InventColorId from inventDim
                    where inventSum.InventDimId         == inventDim.InventDimId    &&
                          inventSum.PhysicalInvent      != 0                        &&
                          inventSum.ClosedQty           == NoYes::No                &&
                          inventDim.InventSiteId        == inventSiteId             &&
                          inventDim.InventLocationId    == inventLocationId         &&
                          inventDim.wmsLocationId       == locationId               &&
                          inventDim.InventColorId       != _inventColorId;
            }

            if (inventSum.RecId == 0)
            {
                ret = true;
            }
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateColorInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates color id location cycle count.
    /// </summary>
    /// <param name="_colorId">
    /// Color id to be validated.
    /// </param>
    /// <returns>
    /// True if it validated, false otherwise.
    /// </returns>
    boolean validateColorInLocationCycleCount(EcoResItemColorName _colorId)
    {
        InventDim inventDimValue;

        inventDimValue.InventColorId = _colorId;

        return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventColorId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVersionIdMixing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the given version id of an item is allowed in the location.
    /// </summary>
    /// <param name="_inventVersionId">
    /// Version id to be validated.
    /// </param>
    /// <returns>
    /// True if it is validated, false otherwise.
    /// </returns>
    boolean validateVersionIdMixing(EcoResItemVersionName _inventVersionId)
    {
        boolean     ret;
        InventSum   inventSum;
        InventDim   inventDim;

        ttsbegin;

        if (WHSLocationProfile::find(this.wmsLocation().LocProfileId).AllowMixedItems)
        {
            ret = true;
        }
        else
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select firstonly RecId from inventSum
                    where inventSum.PhysicalInvent      != 0                    &&
                          inventSum.ClosedQty           == NoYes::No            &&
                          inventSum.InventSiteId        == inventSiteId         &&
                          inventSum.InventLocationId    == inventLocationId     &&
                          inventSum.wmsLocationId       == locationId           &&
                          inventSum.InventVersionId     != _inventVersionId;
            }
            else
            {
                select firstonly RecId from inventSum
                join InventDimId, InventSiteId, InventLocationId, wmsLocationId, InventVersionId from inventDim
                    where inventSum.InventDimId         == inventDim.InventDimId    &&
                          inventSum.PhysicalInvent      != 0                        &&
                          inventSum.ClosedQty           == NoYes::No                &&
                          inventDim.InventSiteId        == inventSiteId             &&
                          inventDim.InventLocationId    == inventLocationId         &&
                          inventDim.wmsLocationId       == locationId               &&
                          inventDim.InventVersionId     != _inventVersionId;
            }

            if (inventSum.RecId == 0)
            {
                ret = true;
            }
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateConfigInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates configuration id location cycle count.
    /// </summary>
    /// <param name="_configId">
    /// Configuration id to be validated.
    /// </param>
    /// <returns>
    /// True if it validated, false otherwise.
    /// </returns>
    boolean validateConfigInLocationCycleCount(EcoResItemConfigurationName _configId)
    {
        InventDim inventDimValue;

        inventDimValue.ConfigId = _configId;

        return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, ConfigId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCountryOfOrigin1</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the first country of origin field.
    /// </summary>
    /// <param name="_countryOfOrigin1">
    ///     The first country of origin.
    /// </param>
    /// <returns>
    ///     Returns a Boolean value to indicate whether the data is valid.
    /// </returns>
    protected boolean validateCountryOfOrigin1(PdsCountryOfOrigin _countryOfOrigin1)
    {
        PdsCountryOfOrigin  countryOfOrigin2;
        boolean             hasError;

        if (_countryOfOrigin1 && !LogisticsAddressCountryRegion::find(_countryOfOrigin1))
        {
            errorMessage = strFmt("@SYS316352", _countryOfOrigin1, fieldPName(PdsVendBatchInfo, CountryOfOrigin1), tablePName(LogisticsAddressCountryRegion));
            hasError = true;
        }
        else
        {
            countryOfOrigin2 = pass.lookup(#CountryOfOrigin2);

            if (_countryOfOrigin1 && _countryOfOrigin1 == countryOfOrigin2)
            {
                errorMessage = "@PDS1356";
                hasError = true;
            }
        }

        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCountryOfOrigin2</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the second country of origin field.
    /// </summary>
    /// <param name="_countryOfOrigin2">
    ///     The second country of origin.
    /// </param>
    /// <returns>
    ///     Returns a Boolean value to indicate whether the data is valid.
    /// </returns>
    protected boolean validateCountryOfOrigin2(PdsCountryOfOrigin _countryOfOrigin2)
    {
        PdsCountryOfOrigin  countryOfOrigin1;
        boolean             hasError;

        if (_countryOfOrigin2 && !LogisticsAddressCountryRegion::find(_countryOfOrigin2))
        {
            errorMessage = strFmt("@SYS316352", _countryOfOrigin2, fieldPName(PdsVendBatchInfo, CountryOfOrigin2), tablePName(LogisticsAddressCountryRegion));
            hasError = true;
        }
        else
        {
            countryOfOrigin1 = fieldValues.exists(#CountryOfOrigin1) ? fieldValues.lookup(#CountryOfOrigin1) : pass.lookup(#CountryOfOrigin1);

            if (_countryOfOrigin2 && _countryOfOrigin2 == countryOfOrigin1)
            {
                errorMessage = "@PDS1356";
                hasError = true;
            }
        }

        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates a field in location cycle count.
    /// </summary>
    /// <param name="_inventDimValue">
    ///     InventDim value.
    /// </param>
    /// <param name="_dimFieldId">
    ///     Field ID in InventDim.
    /// </param>
    /// <returns>
    ///     true if validation succeed; otherwise false.
    /// </returns>
    protected boolean validateFieldInLocationCycleCount(
        InventDim   _inventDimValue,
        FieldId     _dimFieldId)
    {
        WHSWorkLineCycleCount   workLineCycleCount;
        InventDim               inventDim;

        select firstonly forceselectorder forcenestedloop RecId from workLineCycleCount
            where workLineCycleCount.WorkId  == workLine.WorkId
            && workLineCycleCount.LineNum == workLine.LineNum
            && (!fieldValues.parmItemId() || workLineCycleCount.ItemId == fieldValues.parmItemId())
        exists join inventDim
            where inventDim.InventDimId      == workLineCycleCount.InventDimId
            &&    inventDim.(_dimFieldId)    == _inventDimValue.(_dimFieldId);

        return (workLineCycleCount.RecId != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGtdInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates GTD id in location cycle count.
    /// </summary>
    /// <param name="_gtdId">
    /// GTD id to be validated.
    /// </param>
    /// <returns>
    /// True if it validated, false otherwise.
    /// </returns>
    boolean validateGtdInLocationCycleCount(InventGTDId_RU _gtdId)
    {
        InventDim inventDimValue;

        inventDimValue.InventGtdId_RU = _gtdId;

        return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventGtdId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemInLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if there is physical inventory quantity for the current item. The inventory dimension values that are used
    /// to retrieve the quantity are copied from the <c>InventDim</c> record related to the current work line and from the
    /// product dimension values specified in the <c>InventDim</c> record passed to the method.
    /// </summary>
    /// <param name="_itemId">
    /// The current item id
    /// </param>
    /// <param name="_productInventDim">
    /// The <c>InventDim</c> record containing the product dimensions values
    /// </param>
    /// <returns>
    /// true if on hand quantity meeting the requirements was found; otherwise, false
    /// </returns>
    boolean validateItemInLocation(ItemId _itemId, InventDim _productInventDim = null)
    {
        InventDim inventDim = this.retrieveInventDimFromWorkLine(_itemId);
        
        if (_productInventDim && _productInventDim.anyProductDimensionSpecified())
        {
            InventDimParm inventDimParm;
            inventDimParm.initProductDimensionsAllGroups();
            inventDim.copyDimParmDim(InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId), _productInventDim, inventDimParm);
            inventDim = InventDim::findOrCreate(inventDim);
        }

        Qty tmpQty = WHSInventOnHand::getWorkPhysicalInventHandlingQty(_itemId, inventDim.InventDimId);

        return tmpQty > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemVariantIsProdBOM</Name>
				<Source><![CDATA[
    private boolean validateItemVariantIsProdBOM(
        ProdId  _prodId,
        ItemId  _itemId,
        FieldId _dimFieldId,
        str     _data)
    {
        ProdBOM         prodBOM;
        InventDim       inventDimLoop;
        InventDim       inventDimCriteria;
        InventDimParm   inventDimParm;

        inventDimCriteria = pass.createProductInventDimFromPass();
        inventDimCriteria.(_dimFieldId) = _data;
        inventDimParm.initFromInventDim(inventDimCriteria);

        select firstOnly RecId from prodBOM
            where prodBOM.ProdId    == _prodId
            &&    prodBOM.ItemId    == _itemId
                #InventDimExistsJoin(prodBOM.inventDimId, inventDimLoop, inventDimCriteria, inventDimParm);

        return prodBOM.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemOnPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks to see if item id used is actually on purchase order and hasn't been deleted
    ///    and if the product dimensions match with the ones of the order.
    /// </summary>
    /// <param name="_itemId">
    ///    Item id to be checked against
    /// </param>
    /// <param name="_itemInventDim">
    ///    InventDim Id to be checked against
    /// </param>
    /// <param name="_purchId">
    ///    Purch id to be checked against
    /// </param>
    /// <returns>
    ///    True if a purchase order line that matches the criteria is found ; false otherwise.
    /// </returns>
    public boolean validateItemOnPurchLine(ItemId _itemId, InventDim _itemInventDim = null, PurchId _purchId = pass.lookup(#PONum))
    {
        PurchLine       purchLine;
        InventDim       inventDim;
        InventDimParm   inventDimParm;

        if (_purchId)
        {
            if (_itemInventDim.anyProductDimensionSpecified())
            {
                inventDimParm.initProductDimensionsAllGroups();

                select firstonly RecId from purchLine
                    where purchLine.PurchId == _purchId
                        && purchLine.ItemId == _itemId
                        && !purchLine.IsDeleted
                        #InventDimExistsJoinNoField(purchLine.InventDimId, inventDim, _itemInventDim, inventDimParm);
            }
            else
            {
                select firstonly RecId from purchLine
                    where purchLine.PurchId     == _purchId
                        && purchLine.ItemId     == _itemId
                        && !purchLine.IsDeleted;
            }
        }

        return purchLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemOnReceiptOrderLine</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean validateItemOnReceiptOrderLine(Num _orderNumber, ItemId _itemId, InventDim _itemInventDim, InventTransType _inventTransType)
    {
        boolean ret = true;

        if (_inventTransType == InventTransType::Purch)
        {
            ret = this.validateItemOnPurchLine(_itemId, _itemInventDim, _orderNumber);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemOnReturnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that item is on a return order.
    /// </summary>
    /// <param name="_itemId">
    /// Item id to be validated.
    /// </param>
    /// <returns>
    /// True if it is validated, false otherwise.
    /// </returns>
    boolean validateItemOnReturnOrder(ItemId _itemId)
    {
        boolean         ret;
        SalesLine       salesLine;
        SalesTable      salesTable;
        ReturnItemNum   returnItemNum;

        if (pass.exists(#RMANum))
        {
            returnItemNum = pass.lookup(#RMANum);
        }

        select firstonly RecId from salesLine
            join SalesId, ReturnItemNum from salesTable
            where salesTable.SalesId        == salesLine.SalesId        &&
                  salesTable.ReturnItemNum  == returnItemNum            &&
                  salesLine.SalesType       == SalesType::ReturnItem    &&
                  salesLine.ItemId          == _itemId;

        if (salesLine.RecId != 0)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemOnTOLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks if a specific item id used on the transfer order
    ///    and if the product dimensions match with the ones of the order.
    /// </summary>
    /// <param name="_itemId">
    ///     Item id to be checked against
    /// </param>
    /// <param name="_itemInventDim">
    ///     InventDim Id to be checked against
    /// </param>
    /// <returns>
    ///     True if a transfer order line that matches the criteria is found ; false otherwise.
    /// </returns>
    public boolean validateItemOnTOLine(ItemId _itemId, InventDim _itemInventDim = null)
    {
        InventTransferLine  transferLine;
        InventDim           inventDim;
        InventDimParm       inventDimParm;

        if (!pass.exists(#TONum))
        {
            return false;
        }

        if (_itemInventDim.anyProductDimensionSpecified())
        {
            inventDimParm.initProductDimensionsAllGroups();

            select firstonly RecId from transferLine
                where transferLine.TransferId   == pass.lookup(#TONum)
                    && transferLine.ItemId      == _itemId
                    #InventDimExistsJoinNoField(transferLine.InventDimId, inventDim, _itemInventDim, inventDimParm);
        }
        else
        {
            select firstonly RecId from transferLine
                where transferLine.TransferId   == pass.lookup(#TONum)
                    && transferLine.ItemId      == _itemId;
        }

        return transferLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateInLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that license plate exists in location.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate to be validated.
    /// </param>
    /// <param name="_override">
    /// Determines whether the license plate is to be overridden.
    /// </param>
    /// <param name="_validateStatus">
    /// Determines whether to check status dimension also.
    /// </param>
    /// <returns>
    /// True if it is validated, false otherwise.
    /// </returns>
    boolean validateLicensePlateInLocation(WHSLicensePlateId _licensePlateId, boolean _override = false, boolean _validateStatus = false)
    {
        InventSum         inventSum;
        boolean           ret = true;

        if (workLine.WorkType == WHSWorkType::Pick                 ||
            mode              == WHSWorkExecuteMode::AdjustmentOut ||
            workLine.WorkType == WHSWorkType::Count                ||
            mode              == WHSWorkExecuteMode::Movement      ||
            _override)
        {
            ttsbegin;

            WHSInventStatusId   inventStatusId = workLine.inventDim().InventStatusId;
            boolean             allowNegativeQtyForAdjustIn = (mode == WHSWorkExecuteMode::AdjustmentIn);

            this.validateLPNotInAnotherWarehouse(_licensePlateId, inventLocationId);
            
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    PdsCatchWeightItem catchWeightItem;

                    select firstonly RecId from inventSum
                    where ((allowNegativeQtyForAdjustIn && inventSum.PhysicalInvent != 0)
                        || inventSum.PhysicalInvent > 0)
                        && inventSum.ClosedQty == NoYes::No
                        && inventSum.InventLocationId                   == inventLocationId
                        && inventSum.LicensePlateId                     == _licensePlateId
                        && inventSum.wmsLocationId                      == locationId
                        && (!_validateStatus || inventSum.InventStatusId == inventStatusId)
                        notexists join catchWeightItem
                            where catchWeightItem.ItemId == inventSum.ItemId;

                    if (inventSum.RecId == 0)
                    {
                        select firstonly RecId from inventSum
                        where ((allowNegativeQtyForAdjustIn && inventSum.PdsCWPhysicalInvent != 0)
                            || inventSum.PdsCWPhysicalInvent > 0)
                            && inventSum.ClosedQty == NoYes::No
                            && inventSum.InventLocationId                   == inventLocationId
                            && inventSum.LicensePlateId                     == _licensePlateId
                            && inventSum.wmsLocationId                      == locationId
                            && (!_validateStatus || inventSum.InventStatusId == inventStatusId)
                            exists join catchWeightItem
                                where catchWeightItem.ItemId == inventSum.ItemId;
                    }
                }
                else
                {
                    select firstonly RecId from inventSum
                    where ((allowNegativeQtyForAdjustIn && inventSum.PhysicalInvent != 0)
                        || inventSum.PhysicalInvent > 0)
                        && inventSum.ClosedQty == NoYes::No
                        && inventSum.InventLocationId                   == inventLocationId
                        && inventSum.LicensePlateId                     == _licensePlateId
                        && inventSum.wmsLocationId                      == locationId
                        && (!_validateStatus || inventSum.InventStatusId == inventStatusId);
                }
            }
            else
            {
                InventDim         inventDim;

                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    PdsCatchWeightItem catchWeightItem;

                    select firstonly RecId from inventSum
                    where ((allowNegativeQtyForAdjustIn && inventSum.PhysicalInvent != 0)
                        || inventSum.PhysicalInvent > 0)
                        && inventSum.ClosedQty == NoYes::No
                    exists join inventDim
                    where inventDim.InventDimId                        == inventSum.InventDimId &&
                            inventDim.InventLocationId                   == inventLocationId      &&
                            inventDim.LicensePlateId                     == _licensePlateId       &&
                            inventDim.wmsLocationId                      == locationId            &&
                            (!_validateStatus || inventDim.InventStatusId == inventStatusId)
                        notexists join catchWeightItem
                            where catchWeightItem.ItemId == inventSum.ItemId;

                    if (inventSum.RecId == 0)
                    {
                        select firstonly RecId from inventSum
                        where ((allowNegativeQtyForAdjustIn && inventSum.PdsCWPhysicalInvent != 0)
                            || inventSum.PdsCWPhysicalInvent > 0)
                            && inventSum.ClosedQty == NoYes::No
                        exists join inventDim
                        where inventDim.InventDimId                        == inventSum.InventDimId &&
                                inventDim.InventLocationId                   == inventLocationId      &&
                                inventDim.LicensePlateId                     == _licensePlateId       &&
                                inventDim.wmsLocationId                      == locationId            &&
                                (!_validateStatus || inventDim.InventStatusId == inventStatusId)
                            exists join catchWeightItem
                                where catchWeightItem.ItemId == inventSum.ItemId;
                    }
                }
                else
                {
                    select firstonly RecId from inventSum
                    where ((allowNegativeQtyForAdjustIn && inventSum.PhysicalInvent != 0)
                        || inventSum.PhysicalInvent > 0)
                        && inventSum.ClosedQty == NoYes::No
                    exists join inventDim
                    where inventDim.InventDimId                        == inventSum.InventDimId &&
                            inventDim.InventLocationId                   == inventLocationId      &&
                            inventDim.LicensePlateId                     == _licensePlateId       &&
                            inventDim.wmsLocationId                      == locationId            &&
                            (!_validateStatus || inventDim.InventStatusId == inventStatusId);
                }
            }

            ret = inventSum.RecId != 0;

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLicensePlateQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that there exists item on license plate.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id to be validated.
    /// </param>
    /// <returns>
    /// True if it is valid, false otherwise.
    /// </returns>
    public boolean validateLicensePlateQty(WHSLicensePlateId _licensePlateId)
    {
        return WHSLicensePlate::validateLicensePlateQty(_licensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLoadIdCheckOut</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates load for driver check in/out.
    /// </summary>
    /// <param name="_loadId">
    /// Load id to be validated.
    /// </param>
    /// <returns>
    /// True if the load is valid, false otherwise.
    /// </returns>
    boolean validateLoadIdCheckOut(WHSLoadId _loadId)
    {
        boolean         hasError;
        TMSAppointment  appt;
        WHSLoadTable    loadTable = WHSLoadTable::find(_loadId);

        if (this.isLoadValid(loadTable))
        {
            errorMessage = "@WAX4175";
            hasError = true;
        }

        if (!hasError)
        {
            appt = TMSAppointment::find(loadTable.tmsDisplayAppointmentId());

            if (appt)
            {
                if (appt.ApptStatus == TMSApptStatus::Completed)
                {
                    errorMessage = "@WAX4171";
                    hasError     = true;
                }

                if (mode == WHSWorkExecuteMode::DriverCheckOut && !hasError)
                {
                    if (appt.ApptStatus == TMSApptStatus::CheckedIn)
                    {
                        fieldValues.insert(#LoadId, _loadId);
                    }
                    else
                    {
                        errorMessage = "@WAX4172";
                        hasError = true;
                    }
                }
                else if (mode == WHSWorkExecuteMode::DriverCheckIn && !hasError)
                {
                    if (appt.ApptStatus == TMSApptStatus::CheckedIn)
                    {
                        errorMessage = "@WAX4173";
                        hasError = true;
                    }
                    else if (appt.ApptStatus == TMSApptStatus::Tentative)
                    {
                        errorMessage = "@WAX:ErrorCheckInTentativeAppointment";
                        hasError = true;
                    }
                    else
                    {
                        fieldValues.insert(#LoadId, _loadId);
                    }
                }
            }
            else
            {
                errorMessage = "@WAX4174";
                hasError = true;
            }
        }

        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inboundOrderLineHasNegativeQuantity</Name>
				<Source><![CDATA[
    private boolean inboundOrderLineHasNegativeQuantity(WHSReceiptOrderLine _orderLine)
    {
        return (_orderLine.InventQty < 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoadValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the load is valid.
    /// </summary>
    /// <param name = "_loadTable">
    /// A load to be validated.
    /// </param>
    /// <returns>
    /// true if the load is valid; otherwise false.
    /// </returns>
    [SysObsolete('This method is obsolete. Use isLoadInvalidForDriver instead.', false, 30\06\2020)]
    protected boolean isLoadValid(WHSLoadTable _loadTable)
    {
        return this.isLoadInvalidForDriver(_loadTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLoadInvalidForDriver</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the load is valid for driver.
    /// </summary>
    /// <param name = "_loadTable">
    /// A load to be validated.
    /// </param>
    /// <returns>
    /// true if the load is valid; otherwise false.
    /// </returns>
    protected boolean isLoadInvalidForDriver(WHSLoadTable _loadTable)
    {
        return mode == WHSWorkExecuteMode::DriverCheckOut
               && _loadTable.LoadDirection == WHSLoadDirection::Outbound
               && (   _loadTable.LoadStatus != WHSLoadStatus::Loaded
                   && _loadTable.LoadStatus != WHSLoadStatus::Shipped
                   && _loadTable.LoadStatus != WHSLoadStatus::PartiallyShipped);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventoryStatusForCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Processes inventory status for cycle count if Inventory status is not displayed.
    /// </summary>
    /// <returns>
    ///  true if there is error; otherwise, false.
    /// </returns>
    [SysObsolete('WhsControlInventoryStatus::processInventoryStatusForCycleCount', false, 28\02\2020)]
    public boolean processInventoryStatusForCycleCount()
    {
        return WhsControlInventoryStatus::processInventoryStatusForCycleCount(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventoryStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Processes the inventory status dimension.
    /// </summary>
    /// <param name="_selectedInventoryStatus">
    ///     The selected inventory status id.
    /// </param>
    /// <returns>
    ///     true if there is error; otherwise, false.
    /// </returns>
    [Hookable(false)]
    internal boolean processInventoryStatus(WHSInventStatusId _selectedInventoryStatus)
    {
        str errorstr = WhsControlInventoryStatus::processInventoryStatus(this, _selectedInventoryStatus);
        if (errorstr)
        {
            errorMessage = errorstr;
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOldestBatchAtLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that item with license plate is from the oldest batch.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id of the item validated.
    /// </param>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    /// <param name="_inventDim">
    /// Location and above dimension set.
    /// </param>
    /// <returns>
    /// True if it is valid, false otherwise.
    /// </returns>
    public boolean validateOldestBatchAtLocation(
        WHSLicensePlateId   _licensePlateId,
        ItemId              _itemId,
        InventDim           _inventDim)
    {
        date            licensePlateDate;
        boolean         ret = true;
        InventBatch     inventBatch;
        InventDim       inventDim;
        InventSum       inventSum;
        InventDimParm   inventDimParm;

        ttsbegin;

        inventDimParm.initFromInventDim(_inventDim);
        inventDimParm.LicensePlateFlag = NoYes::No;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly ExpDate from inventBatch
                order by ExpDate asc
                where inventBatch.ItemId        == _itemId
                exists join inventSum
                where inventSum.ItemId          == inventBatch.ItemId
                   && inventSum.ClosedQty       == NoYes::No
                   && inventSum.PhysicalInvent  > 0
                   && #InventDimFieldsFilter(inventSum, _inventDim, inventDimParm)
                   && inventSum.InventBatchId   == inventBatch.InventBatchId
                   && inventSum.LicensePlateId  == _licensePlateId;
        }
        else
        {
            select firstonly ExpDate from inventBatch
                order by ExpDate asc
                where inventBatch.ItemId        == _itemId
                exists join inventSum
                where inventSum.ItemId          == inventBatch.ItemId
                   && inventSum.ClosedQty       == NoYes::No
                   && inventSum.PhysicalInvent  > 0
                #InventDimExistsJoinNoField(inventSum.InventDimId, inventDim, _inventDim, inventDimParm)
                   && inventDim.InventBatchId   == inventBatch.InventBatchId
                   && inventDim.LicensePlateId  == _licensePlateId;
        }

        licensePlateDate = inventBatch.ExpDate;

        inventBatch.clear();
        inventDim.clear();
        inventSum.clear();

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventBatch
                order by ExpDate asc
                where inventBatch.ItemId        == _itemId
                   && inventBatch.ExpDate        < licensePlateDate
                exists join inventSum
                where inventSum.ItemId          == inventBatch.ItemId
                   && inventSum.ClosedQty       == NoYes::No
                   && inventSum.PhysicalInvent  > 0
                   && #InventDimFieldsFilter(inventSum, _inventDim, inventDimParm)
                   && inventSum.InventBatchId   == inventBatch.InventBatchId;
        }
        else
        {
            select firstonly RecId from inventBatch
                order by ExpDate asc
                where inventBatch.ItemId        == _itemId
                   && inventBatch.ExpDate        < licensePlateDate
                exists join inventSum
                where inventSum.ItemId          == inventBatch.ItemId
                   && inventSum.ClosedQty       == NoYes::No
                   && inventSum.PhysicalInvent  > 0
                #InventDimExistsJoinNoField(inventSum.InventDimId, inventDim, _inventDim, inventDimParm)
                   && inventDim.InventBatchId   == inventBatch.InventBatchId;
        }

        ttscommit;

        if (inventBatch.RecId != 0)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOldestBatchForPickLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validate if an older batch exists in a different location than the one specified in the license plate.
    /// </summary>
    /// <param name="_licensePlateId">
    ///   The license plate to check the oldest batch number.
    /// </param>
    /// <param name="_pickLine">
    ///   The pick work line to check the oldest batch number.
    /// </param>
    /// <returns>
    ///  true if the license plate has the oldest batch number; else false.
    /// </returns>
    boolean validateOldestBatchForPickLine(WHSLicensePlateId _licensePlateId, WHSWorkLine _pickLine)
    {
        if (_pickLine.WorkType != WHSWorkType::Pick)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        InventDim inventDimPick = _pickLine.inventDimWithLocation();

        if (_pickLine.OrderCommittedInventDimId)
        {
            inventDimPick.inventBatchId = InventDim::find(_pickLine.OrderCommittedInventDimId).inventBatchId;
            inventDimPick = InventDim::findOrCreate(inventDimPick);
        }

        InventDimParm inventDimPickParm;
        inventDimPickParm.initFromInventDim(inventDimPick);
        inventDimPickParm.LicensePlateFlag = NoYes::No;

        InventBatch inventBatch;
        InventDim inventDim;
        InventSum inventSum;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly ExpDate from inventBatch
            order by ExpDate asc
            where inventBatch.ItemId        == _pickLine.ItemId
            exists join inventSum
            where inventSum.ItemId              == inventBatch.ItemId
                && inventSum.ClosedQty          == NoYes::No
                && inventSum.PhysicalInvent     > 0
                && #InventDimFieldsFilter(inventSum, inventDimPick, inventDimPickParm)
                && inventSum.InventBatchId      == inventBatch.InventBatchId
                && inventSum.LicensePlateId     == _licensePlateId;
        }
        else
        {
            select firstonly ExpDate from inventBatch
            order by ExpDate asc
            where inventBatch.ItemId        == _pickLine.ItemId
            exists join inventSum
            where inventSum.ItemId          == inventBatch.ItemId
                && inventSum.ClosedQty      == NoYes::No
                && inventSum.PhysicalInvent > 0
            #InventDimExistsJoinNoField(inventSum.InventDimId, inventDim, inventDimPick, inventDimPickParm)
                && inventDim.InventBatchId   == inventBatch.InventBatchId
                && inventDim.LicensePlateId  == _licensePlateId;
        }

        date licensePlateDate = inventBatch.ExpDate;

        inventBatch.clear();
        inventDim.clear();
        inventSum.clear();

        PdsBestBeforeDate batchBestBeforeDate = WhsWorkExecuteDisplay::getMinAllowedBestBeforeDate(_pickLine);

        WHSWorkLine putWorkLine;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select firstonly RecId from inventBatch
            order by ExpDate asc
            where inventBatch.ItemId        == _pickLine.ItemId
               && inventBatch.ExpDate       <  licensePlateDate
               && inventBatch.PdsBestBeforeDate >= batchBestBeforeDate
            exists join inventSum
            where inventSum.ItemId          == inventBatch.ItemId
               && inventSum.ClosedQty       == NoYes::No
               && inventSum.PhysicalInvent  > 0
               && #InventDimFieldsFilter(inventSum, inventDimPick, inventDimPickParm)
               && inventSum.InventBatchId   == inventBatch.InventBatchId
            notExists join putWorkLine
            where putWorkLine.WorkId        == _pickLine.WorkId
               && putWorkLine.WorkType      == WHSWorkType::Put
               && putWorkLine.WMSLocationId == inventSum.wMSLocationId;
        }
        else
        {
            select firstonly RecId from inventBatch
            order by ExpDate asc
            where inventBatch.ItemId        == _pickLine.ItemId
               && inventBatch.ExpDate       <  licensePlateDate
               && inventBatch.PdsBestBeforeDate >= batchBestBeforeDate
            exists join inventSum
            where inventSum.ItemId          == inventBatch.ItemId
               && inventSum.ClosedQty       == NoYes::No
               && inventSum.PhysicalInvent  > 0
            #InventDimExistsJoinNoField(inventSum.InventDimId, inventDim, inventDimPick, inventDimPickParm)
               && inventDim.InventBatchId   == inventBatch.InventBatchId
            notExists join putWorkLine
            where putWorkLine.WorkId        == _pickLine.WorkId
               && putWorkLine.WorkType      == WHSWorkType::Put
               && putWorkLine.WMSLocationId == inventDim.wMSLocationId;
        }
        
        boolean ret = true;
        if (inventBatch.RecId != 0)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOwnerInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates owner id in location cycle count.
    /// </summary>
    /// <param name="_ownerId">
    /// Owner id to be validated.
    /// </param>
    /// <returns>
    /// True if it validated, false otherwise.
    /// </returns>
    boolean validateOwnerInLocationCycleCount(InventOwnerId_RU _ownerId)
    {
        InventDim inventDimValue;

        inventDimValue.InventOwnerId_RU = _ownerId;

        return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventOwnerId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePotency</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the specified potency value.
    /// </summary>
    /// <param name="_potency">
    ///     The specified potency value.
    /// </param>
    /// <returns>
    ///     Returns a Boolean value to indicate whether the data is valid.
    /// </returns>
    protected boolean validatePotency(PdsBatchAttribValue _potency)
    {
        PdsBatchAttrib                  pdsBatchAttrib;
        PdsBatchAttribMin               batchAttribMin;
        PdsBatchAttribMax               batchAttribMax;
        PdsBatchAttribToleranceAction   batchAttribToleranceAction;
        PdsBatchAttribMultiple          batchAttribMultiple;
        boolean                         hasError;

        pdsBatchAttrib = PdsBatchAttrib::find(pass.lookupStr(#BaseAttributeId));

        switch (pdsBatchAttrib.PdsBatchAttribType)
        {
            case PdsBatchAttribType::Integer :
                if (!str2numOK(_potency))
                {
                    errorMessage = strFmt("@PRO1954", _potency);
                    hasError = true;
                }
                break;
            case PdsBatchAttribType::Realnumber :
                if (!WhsWorkExecuteDisplay::str2numDisplayOK(_potency))
                {
                    errorMessage = strFmt("@PRO2249", _potency);
                    hasError = true;
                }
                break;
        }

        if (!hasError
        &&  (!pass.exists(#PotencyValueWarn)
        ||   pass.lookup(#PotencyValueWarn) != _potency))
        {
            [batchAttribMin, batchAttribMax, batchAttribToleranceAction, batchAttribMultiple] = pdsBatchAttrib.getAttribRange(fieldValues.parmItemId());

            [hasError, errorMessage] = PdsBatchAttrib::isValidAttribRangeErrorMsgMode (batchAttribMin, batchAttribMax, _potency, true);
            if (!hasError)
            {
                [hasError, errorMessage] = PdsBatchAttrib::isValidAttribMultipleErrorMsgMode(batchAttribMin, batchAttribMultiple, _potency, true);
            }

            if (hasError && errorMessage == strFmt("@SYS87701", batchAttribMin, batchAttribMax))
            {
                errorMessage = strFmt("@SYS87701", WHSWorkExecuteDisplay::num2StrDisplay(batchAttribMin), WHSWorkExecuteDisplay::num2StrDisplay(batchAttribMax));
            }
        }
        if (hasError && batchAttribToleranceAction == PdsBatchAttribToleranceAction::Warning)
        {
            pass.insert(#PotencyValueWarn, _potency);
            colorText = WHSRFColorText::Warning;
        }
        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProdOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the production order has been modified using non-WHS processes. Will traverse Batch order co/by Products as well
    /// </summary>
    /// <param name="_prodId">
    /// The production order.
    /// </param>
    /// <returns>
    /// True if no related transactions are status registered, false if any exist
    /// </returns>
    public boolean validateProdOrder(ProdId _prodId)
    {
        return this.isProductionOrderValidForReceiving(_prodId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductionOrderValidForReceiving</Name>
				<Source><![CDATA[
    /// <summary>
    /// Detemines if the production order has been modified using non-WHS processes. Will traverse Batch order co/by Products as well.
    /// </summary>
    /// <param name="_prodId">
    /// The production order.
    /// </param>
    /// <returns>
    /// True if no related transactions are status registered, false if any exist
    /// </returns>
    [Wrappable(true)]
    internal boolean isProductionOrderValidForReceiving(ProdId _prodId)
    {
        PmfProdCoBy                     pmfProdCoBy;
        ProdTable                       prodTable;
        InventTrans                     inventTrans;
        InventTransOriginPmfProdCoBy    inventTransOriginPmfProdCoBy;
        InventTransOriginProdTable      inventTransOriginProdTable;
        boolean                         ok = true;

        if (!WhsrfControlDataSkipIsProductionOrderValidForReceivingFlight::instance().isEnabled())
        {
            prodTable = ProdTable::find(_prodId);

            select firstonly RecId from inventTransOriginProdTable
                where inventTransOriginProdTable.ProdOrderDataAreaId    == prodTable.DataAreaId
                &&    inventTransOriginProdTable.ProdOrderId            == prodTable.ProdId
                exists join inventTrans
                    where  inventTrans.InventTransOrigin                == inventTransOriginProdTable.InventTransOrigin
                    &&     inventTrans.StatusReceipt                    == StatusReceipt::Registered
                    &&     inventTrans.StatusIssue                      == StatusIssue::None;

            ok = ok && inventTransOriginProdTable.RecId == 0;

            if (ok && prodTable.ProdType == ProdType::Process)
            {
                select firstonly RecId from pmfProdCoBy
                    where pmfProdCoBy.ProdId                                        == prodTable.ProdId
                    exists join TableId from inventTransOriginPmfProdCoBy
                        where   inventTransOriginPmfProdCoBy.PmfProdCoByDataAreaId  == pmfProdCoBy.DataAreaId
                        &&      inventTransOriginPmfProdCoBy.PmfProdCoByRecId       == pmfProdCoBy.RecId
                        exists join inventTrans
                            where   inventTrans.InventTransOrigin                   == inventTransOriginPmfProdCoBy.InventTransOrigin
                            &&      inventTrans.StatusReceipt                       == StatusReceipt::Registered
                            &&      inventTrans.StatusIssue                         == StatusIssue::None;

                ok = ok && pmfProdCoBy.RecId == 0;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProfileInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates profile id in location cycle count.
    /// </summary>
    /// <param name="_profileId">
    /// Profile id to be validated.
    /// </param>
    /// <returns>
    /// True if it validated, false otherwise.
    /// </returns>
    boolean validateProfileInLocationCycleCount(InventProfileId_RU _profileId)
    {
        InventDim inventDimValue;

        inventDimValue.InventProfileId_RU = _profileId;

        return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventProfileId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSerialInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates serial id in location cycle count.
    /// </summary>
    /// <param name="_serialId">
    /// Serial id to be validated.
    /// </param>
    /// <returns>
    /// True if it validated, false otherwise.
    /// </returns>
    boolean validateSerialInLocationCycleCount(InventSerialId   _serialId)
    {
        InventDim inventDimValue;

        inventDimValue.InventSerialId = _serialId;

        return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventSerialId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSerialQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that item with a specific serial number does not exist.
    /// </summary>
    /// <param name="_serialId">
    /// Serial id to be validated.
    /// </param>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    /// <returns>
    /// True if it is valid, false otherwise.
    /// </returns>
    boolean validateSerialQty(InventSerialId    _serialId,
                              ItemId            _itemId)
    {
        boolean     ret;
        InventSum   inventSum;

        if (WHSWorkExecute::skipSerialValidation(workLine.ItemId))
        {
            return true;
        }

        ttsbegin;
        
        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (this.isCatchWeightItem(_itemId))
            {
                select firstonly RecId from inventSum
                where inventSum.ClosedQty           == NoYes::No                &&
                      inventSum.PdsCWPhysicalInvent != 0                        &&
                      inventSum.ItemId              == _itemId                  &&
                      inventSum.InventSerialId      == _serialId;
            }
            else
            {
                select firstonly RecId from inventSum
                where inventSum.ClosedQty       == NoYes::No                &&
                      inventSum.PhysicalInvent  != 0                        &&
                      inventSum.ItemId          == _itemId                  &&
                      inventSum.InventSerialId  == _serialId;
            }
        }
        else
        {
            InventDim   inventDim;

            if (this.isCatchWeightItem(_itemId))
            {
                select firstonly RecId from inventSum
                exists join inventDim
                where inventSum.InventDimId         == inventDim.InventDimId    &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      inventSum.PdsCWPhysicalInvent != 0                        &&
                      inventSum.ItemId              == _itemId                  &&
                      inventDim.InventSerialId      == _serialId;
            }
            else
            {
                select firstonly RecId from inventSum
                exists join inventDim
                where inventSum.InventDimId     == inventDim.InventDimId    &&
                      inventSum.ClosedQty       == NoYes::No                &&
                      inventSum.PhysicalInvent  != 0                        &&
                      inventSum.ItemId          == _itemId                  &&
                      inventDim.InventSerialId  == _serialId;
            }
        }

        if (inventSum.RecId == 0)
        {
            ret = true;
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSizeInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates size id in location cycle count.
    /// </summary>
    /// <param name="_sizeId">
    /// Size id to be validated.
    /// </param>
    /// <returns>
    /// True if it validated, false otherwise.
    /// </returns>
    boolean validateSizeInLocationCycleCount(EcoResItemSizeName _sizeId)
    {
        InventDim inventDimValue;

        inventDimValue.InventSizeId = _sizeId;

        return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventSizeId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTrackingDimFieldValuesEqualToPass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the values in the pass are the same as in the field values.  If the control has not been processed the field value won't be populated.
    /// </summary>
    /// <returns>true if the tracking dimensions have not been changed; otherwise, false</returns>
    /// <remarks>If an item does not use tracking dimensions, this will return false.</remarks>
    public boolean isTrackingDimFieldValuesEqualToPass()
    {
        ListEnumerator le = InventDimGroupSetup::newDimensionGroups(0, 0, InventTable::find(pass.lookupStr(#ItemId)).trackingDimensionGroup()).activeFields().getEnumerator();
        boolean		   ret;

        while (le.moveNext())
        {
            DictField df = new DictField(tableNum(InventDim), le.current());

            ret = fieldValues.lookupStr(df.name()) == pass.lookupStr(df.name());

            if (!ret)
            {
                break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates status in location cycle count.
    /// </summary>
    /// <param name="_statusId">
    /// Status to be validated.
    /// </param>
    /// <returns>
    /// True if it validated, false otherwise.
    /// </returns>
    [SysObsolete('WhsControlInventoryStatus::validateStatusInLocationCycleCount', false, 28\02\2020)]
    boolean validateStatusInLocationCycleCount(WHSInventStatusId _statusId)
    {
        return WhsControlInventoryStatus::validateStatusInLocationCycleCount(fieldValues.parmItemId(),
                                                                             workLine,
                                                                             _statusId,
                                                                             pass.exists(#SerialId) ? pass.lookup(#SerialId) : '',
                                                                             pass.exists(#BatchId) ? pass.lookup(#BatchId) : '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStatusMixingQuarantine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that status can be mixed in quarantine location.
    /// </summary>
    /// <param name="_locationId">
    /// Quarantine location id.
    /// </param>
    /// <returns>
    /// True if it is valid, false otherwise.
    /// </returns>
    boolean validateStatusMixingQuarantine(WMSLocationId        _locationId)
    {
        InventSum           inventSum;
        boolean             ret = true;
        WMSLocation         location;
        WHSLicensePlateId   tmpLicensePlate;

        location = WMSLocation::find(_locationId, inventLocationId);

        if (location.whsLocationIsLPControlled() && !WHSLocationProfile::find(location.LocProfileId).AllowMixedStatus)
        {
            ttsbegin;
            
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    PdsCatchWeightItem catchWeightItem;

                    while select LicensePlateId from inventSum
                    where inventSum.PhysicalInvent       > 0
                    &&    inventSum.ClosedQty           == NoYes::No
                    &&    inventSum.InventLocationId    == inventLocationId
                    &&    inventSum.wmsLocationId       == _locationId
                        notexists join catchWeightItem
                            where catchWeightItem.ItemId == inventSum.ItemId
                    {
                        if (tmpLicensePlate && inventSum.LicensePlateId != tmpLicensePlate)
                        {
                            ret = false;
                            break;
                        }

                        tmpLicensePlate = inventSum.LicensePlateId;
                    }

                    // If we found a non catch weight item on a location that does not allow mix then we assume we cannot find a catch weight item.
                    if (ret && WMSLocation::find(_locationId, inventLocationId).whsLocationprofile().checkAllowMixedItems())
                    {
                        while select LicensePlateId from inventSum
                        where inventSum.PdsCWPhysicalInvent       > 0
                        &&    inventSum.ClosedQty           == NoYes::No
                        &&    inventSum.InventLocationId    == inventLocationId
                        &&    inventSum.wmsLocationId       == _locationId
                            exists join catchWeightItem
                                where catchWeightItem.ItemId == inventSum.ItemId
                        {
                            if (tmpLicensePlate && inventSum.LicensePlateId != tmpLicensePlate)
                            {
                                ret = false;
                                break;
                            }

                            tmpLicensePlate = inventSum.LicensePlateId;
                        }
                    }
                }
                else
                {
                    while select InventDimId, PhysicalInvent, LicensePlateId from inventSum
                    where inventSum.PhysicalInvent       > 0
                    &&    inventSum.ClosedQty           == NoYes::No
                    &&    inventSum.InventLocationId    == inventLocationId
                    &&    inventSum.wmsLocationId       == _locationId
                    {
                        if (tmpLicensePlate && inventSum.LicensePlateId != tmpLicensePlate)
                        {
                            ret = false;
                            break;
                        }

                        tmpLicensePlate = inventSum.LicensePlateId;
                    }
                }
            }
            else
            {
                InventDim           inventDim;

                if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
                {
                    PdsCatchWeightItem catchWeightItem;

                    while select InventDimId, PhysicalInvent from inventSum
                    join LicensePlateId from inventDim
                    where inventSum.InventDimId         == inventDim.InventDimId
                    &&    inventSum.PhysicalInvent       > 0
                    &&    inventSum.ClosedQty           == NoYes::No
                    &&    inventDim.InventLocationId    == inventLocationId
                    &&    inventDim.wmsLocationId       == _locationId
                        notexists join catchWeightItem
                            where catchWeightItem.ItemId == inventSum.ItemId
                    {
                        if (tmpLicensePlate && inventDim.LicensePlateId != tmpLicensePlate)
                        {
                            ret = false;
                            break;
                        }

                        tmpLicensePlate = inventDim.LicensePlateId;
                    }

                    // If we found a non catch weight item on a location that does not allow mix then we assume we cannot find a catch weight item.
                    if (ret && WMSLocation::find(_locationId, inventLocationId).whsLocationprofile().checkAllowMixedItems())
                    {
                        while select InventDimId, PhysicalInvent from inventSum
                        join LicensePlateId from inventDim
                        where inventSum.InventDimId         == inventDim.InventDimId
                        &&    inventSum.PdsCWPhysicalInvent       > 0
                        &&    inventSum.ClosedQty           == NoYes::No
                        &&    inventDim.InventLocationId    == inventLocationId
                        &&    inventDim.wmsLocationId       == _locationId
                            exists join catchWeightItem
                                where catchWeightItem.ItemId == inventSum.ItemId
                        {
                            if (tmpLicensePlate && inventDim.LicensePlateId != tmpLicensePlate)
                            {
                                ret = false;
                                break;
                            }

                            tmpLicensePlate = inventDim.LicensePlateId;
                        }
                    }
                }
                else
                {
                    while select InventDimId, PhysicalInvent from inventSum
                    join LicensePlateId from inventDim
                    where inventSum.InventDimId         == inventDim.InventDimId
                    &&    inventSum.PhysicalInvent       > 0
                    &&    inventSum.ClosedQty           == NoYes::No
                    &&    inventDim.InventLocationId    == inventLocationId
                    &&    inventDim.wmsLocationId       == _locationId
                    {
                        if (tmpLicensePlate && inventDim.LicensePlateId != tmpLicensePlate)
                        {
                            ret = false;
                            break;
                        }

                        tmpLicensePlate = inventDim.LicensePlateId;
                    }
                }
            }

            ttscommit;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStyleInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates style in location cycle count.
    /// </summary>
    /// <param name="_styleId">
    /// Style id to be validated.
    /// </param>
    /// <returns>
    /// True if it validated, false otherwise.
    /// </returns>
    boolean validateStyleInLocationCycleCount(EcoResItemStyleName _styleId)
    {
        InventDim inventDimValue;

        inventDimValue.InventStyleId = _styleId;

        return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventStyleId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVersionInLocationCycleCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates Version in location cycle count.
    /// </summary>
    /// <param name="_versionId">
    /// Version id to be validated.
    /// </param>
    /// <returns>
    /// True if it validated, false otherwise.
    /// </returns>
    boolean validateVersionInLocationCycleCount(EcoResItemVersionName _versionId)
    {
        InventDim inventDimValue;

        inventDimValue.InventVersionId = _versionId;

        return this.validateFieldInLocationCycleCount(inventDimValue, fieldNum(InventDim, InventVersionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetLicensePlateNotOnOpenInProcessWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the license plate id is not used as a target license plate id for any in progress/open work
    /// </summary>
    /// <param name="_licensePlateId">
    /// The license plate id to validate
    /// </param>
    /// <returns>
    /// True when there is no open/in progress work with this license plate id; otherwise, false
    /// </returns>
    public static boolean validateTargetLicensePlateNotOnOpenInProcessWork(WHSLicensePlateId _licensePlateId)
    {
        return WHSWorkTable::findByTargetLicensePlate(_licensePlateId, WHSWorkStatus::InProcess).RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTargetLicensePlateNotOnWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the license plate id is not used as a target license plate id for any in progress/open work
    /// </summary>
    /// <param name="_licensePlateId">
    /// The license plate id to validate
    /// </param>
    /// <returns>
    /// True when there is no open/in progress work with this license plate id; otherwise, false
    /// </returns>
    public boolean validateTargetLicensePlateNotOnWork(WHSLicensePlateId _licensePlateId)
    {
        return WhsrfControlData::validateTargetLicensePlateNotOnOpenInProcessWork(_licensePlateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>targetLicensePlaceOnCurrentClusterPickingWork</Name>
				<Source><![CDATA[
    private boolean targetLicensePlaceOnCurrentClusterPickingWork(WHSLicensePlateId _targetLicensePlateId)
    {
        if (mode == WHSWorkExecuteMode::ClusterPicking || mode == WHSWorkExecuteMode::SystemDirectedClusterPicking)
        {
            return WHSWorkTable::find(this.workId).TargetLicensePlateId == _targetLicensePlateId;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUseVendBatchDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the use vendor batch date field.
    /// </summary>
    /// <param name="_useVendBatchDate">
    ///     The value indicating whether vendor batch date must be used.
    /// </param>
    /// <returns>
    ///     Returns a Boolean value to indicate whether the data is valid.
    /// </returns>
    protected boolean validateUseVendBatchDate(str _useVendBatchDate)
    {
        boolean hasError;

        if (_useVendBatchDate == enum2str(NoYes::Yes) && WHSRFControlData::convertDateFormatStr2Date(fieldValues.lookup(#VendBatchDate), pass.lookupStr(#UserId)) == Global::dateNull())
        {
            errorMessage = "@PRO2231";
            hasError = true;
        }

        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUseVendExpDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the use vendor expiry date field.
    /// </summary>
    /// <param name="_useVendExpDate">
    ///     The value indicating whether vendor expiry date must be used.
    /// </param>
    /// <returns>
    ///     Returns a Boolean value to indicate whether the data is valid.
    /// </returns>
    protected boolean validateUseVendExpDate(str _useVendExpDate)
    {
        boolean hasError;

        if (_useVendExpDate == enum2str(NoYes::Yes) && WHSRFControlData::convertDateFormatStr2Date(fieldValues.lookup(#VendExpDate), pass.lookupStr(#UserId)) == Global::dateNull())
        {
            errorMessage = "@PDS1352";
            hasError = true;
        }

        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendBatchDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the vendor batch date field.
    /// </summary>
    /// <param name="_vendBatchDate">
    ///     The vendor batch date.
    /// </param>
    /// <returns>
    ///     Returns a Boolean value to indicate whether the data is valid.
    /// </returns>
    protected boolean validateVendBatchDate(str _vendBatchDate)
    {
        boolean hasError;
        date vendBatchDate = WHSRFControlData::convertDateFormatStr2Date(_vendBatchDate, pass.lookupStr(#UserId));
        if (vendBatchDate == Global::dateNull())
        {
            errorMessage = "@WAX1891";
            hasError = true;
        }
        else if (vendBatchDate > DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            errorMessage = "@PRO2230";
            hasError = true;
        }

        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendExpDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the vendor expiry date field.
    /// </summary>
    /// <param name="_vendExpDate">
    ///     The vendor expiry date.
    /// </param>
    /// <returns>
    ///     Returns a Boolean value to indicate whether the data is valid.
    /// </returns>
    protected boolean validateVendExpDate(str _vendExpDate)
    {
        boolean hasError;
        date vendExpDate = WHSRFControlData::convertDateFormatStr2Date(_vendExpDate, pass.lookupStr(#UserId));
        if (vendExpDate == Global::dateNull())
        {
            errorMessage = "@WAX1891";
            hasError = true;
        }
        else if (vendExpDate <= DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            errorMessage = "@PDS1353";
            hasError = true;
        }

        return hasError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkTableLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that temporary work lines have location defined.
    /// </summary>
    /// <param name="_workId">
    /// Work id to be validated.
    /// </param>
    /// <returns>
    /// True if it is valid, false otherwise.
    /// </returns>
    boolean validateWorkTableLocations(WHSWorkId _workId)
    {
        WHSWorkLine tmpWorkLine;
        boolean skipCustomWork = WHSCustomWorkLineSkipLocationValidationFlight::instance().isEnabled();

        select firstonly RecId from tmpWorkLine
            where tmpWorkLine.WorkId         == _workId
                && tmpWorkLine.wmsLocationId == ''
                && (tmpWorkLine.WorkType    != WHSWorkType::Custom
                   || !skipCustomWork)
                && tmpWorkLine.WorkType      != WHSWorkType::Print;

        return tmpWorkLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineInventDimParmForMoveLPDuringPartialCycleCount</Name>
				<Source><![CDATA[
    private static InventDimParm determineInventDimParmForMoveLPDuringPartialCycleCount()
    {
        InventDimParm inventDimParm;
        inventDimParm.setAllInventDim();
                
        // The movement of the LP is executed in the current transaction, but the query is looking at InventSum,
        // which will be updated only at the end of the transaction
        // so the location of the LP is different than the location of the WorkLine.
        inventDimParm.WMSLocationIdFlag = NoYes::No;

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCycleCountWorkLineLP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates cycle count work for a specific license plate in a specific location.
    /// </summary>
    /// <param name="_licensePlateId">
    /// License plate id of the items.
    /// </param>
    /// <param name="_toLocationId">
    /// Cycle counting location.
    /// </param>
    /// <param name="_workId">
    /// Cycle counting work id.
    /// </param>
    public static void createCycleCountWorkLineLP(WHSLicensePlateId    _licensePlateId,
                                           WMSLocationId        _toLocationId,
                                           WHSWorkId            _workId)
    {
        WHSWorkLineCycleCount   workLineCycleCount;
        InventSum               inventSum;
        InventDim               tmpInventDim;

        ttsbegin;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            if (WHSWorkTable::find(_workId).IsPartialCycleCountWork)
            {
                WHSWorkLine workLine;
                InventDim workLineInventDim;              

                InventDimParm inventDimParm = WhsrfControlData::determineInventDimParmForMoveLPDuringPartialCycleCount();

                // There should be at most one WHSWorkLine for each InventSum with physical inventory for the LP that is being moved
                // so at most 1 WHSWorkLineCycleCount record will be created for each InventSum.

                while select PhysicalInvent, PdsCWPhysicalInvent, ItemId, InventDimId from inventSum
                where inventSum.LicensePlateId   == _licensePlateId         &&
                      inventSum.ClosedQty        == NoYes::No               &&
                      inventSum.PhysicalInvent    > 0
                join LineNum from workLine
                    where workLine.WorkId == _workId
                       && (workLine.WorkStatus == WHSWorkStatus::Open
                            || workLine.WorkStatus == WHSWorkStatus::InProcess)
                       && workLine.ItemId == inventSum.ItemId
                exists join workLineInventDim
                    where workLineInventDim.inventDimId == workLine.InventDimId
                       && #InventDimRanges(workLineInventDim, inventSum, inventDimParm, inventDimParm)
                {
                    WhsrfControlData::createWorkLineCycleCountFromInventSum(
                        inventSum,
                        inventSum.InventDimId, 
                        _toLocationId,
                        _workId,
                        workLine.LineNum);                   
                }
            }
            else
            {
                while select PhysicalInvent, PdsCWPhysicalInvent, ItemId, InventDimId from inventSum
                where inventSum.LicensePlateId   == _licensePlateId         &&
                      inventSum.ClosedQty        == NoYes::No               &&
                      inventSum.PhysicalInvent    > 0
                {
                    tmpInventDim.clear();
                    tmpInventDim = InventDim::find(inventSum.InventDimId);
                    tmpInventDim.wmsLocationId = _toLocationId;
                    tmpInventDim = InventDim::findOrCreate(tmpInventDim);

                    workLineCycleCount.clear();
                    workLineCycleCount.InventDimId = tmpInventDim.InventDimId;

                    if (PdsGlobal::pdsIsCWItem(inventSum.ItemId))
                    {
                        workLineCycleCount.QtyExpected = inventSum.PdsCWPhysicalInvent;
                        workLineCycleCount.ExpectedWeight = inventSum.PhysicalInvent;
                    }
                    else
                    {
                        workLineCycleCount.QtyExpected = inventSum.PhysicalInvent;
                    }

                    workLineCycleCount.WorkId = _workId;
                    workLineCycleCount.LineNum = 1;
                    workLineCycleCount.ItemId = inventSum.ItemId;
                    workLineCycleCount.insert();
                }
            }
        }
        else
        {
            if (WHSWorkTable::find(_workId).IsPartialCycleCountWork)
            {
                WHSWorkLine workLine;
                InventDim inventSumInventDim, workLineInventDim;
                InventDimParm inventDimParm = WhsrfControlData::determineInventDimParmForMoveLPDuringPartialCycleCount();

                // There should be at most one WHSWorkLine for each InventSum with physical inventory for the LP that is being moved
                // so at most 1 WHSWorkLineCycleCount record will be created for each InventSum.
               
                while select InventDimId from inventSumInventDim
                join PhysicalInvent, PdsCWPhysicalInvent, ItemId from inventSum
                where inventSumInventDim.InventDimId      == inventSum.InventDimId   &&
                      inventSumInventDim.LicensePlateId   == _licensePlateId         &&
                      inventSum.ClosedQty        == NoYes::No               &&
                      inventSum.PhysicalInvent    > 0
                join LineNum from workLine
                    where workLine.WorkId == _workId
                       && (workLine.WorkStatus == WHSWorkStatus::Open
                            || workLine.WorkStatus == WHSWorkStatus::InProcess)
                       && workLine.ItemId == inventSum.ItemId
                exists join workLineInventDim
                    where workLineInventDim.inventDimId == workLine.InventDimId
                       && #InventDimRanges(workLineInventDim, inventSumInventDim, inventDimParm, inventDimParm)
                {
                    WhsrfControlData::createWorkLineCycleCountFromInventSum(
                        inventSum,
                        inventSumInventDim.InventDimId,
                        _toLocationId,
                        _workId,
                        workLine.LineNum);
                }
            }

            else
            {
                InventDim               inventDim;

                while select inventDim
                join PhysicalInvent, PdsCWPhysicalInvent, ItemId from inventSum
                where inventDim.InventDimId      == inventSum.InventDimId   &&
                      inventDim.LicensePlateId   == _licensePlateId         &&
                      inventSum.ClosedQty        == NoYes::No               &&
                      inventSum.PhysicalInvent    > 0
                {
                    tmpInventDim.clear();
                    tmpInventDim = InventDim::find(inventDim.InventDimId);
                    tmpInventDim.wmsLocationId = _toLocationId;
                    tmpInventDim = InventDim::findOrCreate(tmpInventDim);

                    workLineCycleCount.clear();
                    workLineCycleCount.InventDimId = tmpInventDim.InventDimId;

                    if (PdsGlobal::pdsIsCWItem(inventSum.ItemId))
                    {
                        workLineCycleCount.QtyExpected = inventSum.PdsCWPhysicalInvent;
                        workLineCycleCount.ExpectedWeight = inventSum.PhysicalInvent;
                    }
                    else
                    {
                        workLineCycleCount.QtyExpected = inventSum.PhysicalInvent;
                    }

                    workLineCycleCount.WorkId = _workId;
                    workLineCycleCount.LineNum = 1;
                    workLineCycleCount.ItemId = inventSum.ItemId;
                    workLineCycleCount.insert();
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkLineCycleCountFromInventSum</Name>
				<Source><![CDATA[
    private static void createWorkLineCycleCountFromInventSum(
        InventSum               _inventSum,
        InventDimId             _inventDimId,
        WMSLocationId           _toLocationId,
        WHSWorkId               _workId,
        LineNum                 _workLineLineNum)
    {
        InventDim tmpInventDim;
        tmpInventDim = InventDim::find(_inventDimId);
        tmpInventDim.wmsLocationId = _toLocationId;
        tmpInventDim = InventDim::findOrCreate(tmpInventDim);

        WHSWorkLineCycleCount  workLineCycleCount;

        workLineCycleCount.InventDimId = tmpInventDim.InventDimId;

        if (PdsGlobal::pdsIsCWItem(_inventSum.ItemId))
        {
            workLineCycleCount.QtyExpected = _inventSum.PdsCWPhysicalInvent;
            workLineCycleCount.ExpectedWeight = _inventSum.PhysicalInvent;
        }
        else
        {
            workLineCycleCount.QtyExpected = _inventSum.PhysicalInvent;
        }

        workLineCycleCount.WorkId = _workId;
        workLineCycleCount.LineNum = _workLineLineNum;
        workLineCycleCount.ItemId = _inventSum.ItemId;
        workLineCycleCount.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSerialSalesProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an <c>InventTrackingRegisterTrans</c> record exists for a particular transId/serialId combination.
    /// </summary>
    /// <param name="_inventTransId">
    /// The <c>InventTransId</c> to use to find the <c>InventTransOrigin</c>
    /// </param>
    /// <param name="_serialId">
    /// The serial number to check.
    /// </param>
    /// <param name="_itemId">
    /// The <c>ItemId</c> used to find appropriate return line.
    /// </param>
    /// <param name="_returnNum">
    /// The return sales number to search for.
    /// </param>
    /// <returns>
    /// True if a record exists; otherwise, false.
    /// </returns>
    public static boolean checkSerialSalesProcess(
        InventTransId       _inventTransId,
        InventSerialId      _serialId,
        ItemId              _itemId     = '',
        SalesReturnItemNum  _returnNum  = '')
    {
        InventTransId   transId = _inventTransId;
        boolean         ret;

        if (_returnNum)
        {
            transId = WHSRFControlData::findReturnLine(_itemId, _returnNum);
        }

        ret = InventTrackingRegisterTrans::checkSerialId(transId, _serialId);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReturnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the latest return line.
    /// </summary>
    /// <param name="_itemId">
    /// The <c>ItemId</c> to search with.
    /// </param>
    /// <param name="_returnNum">
    /// The return sales number to search for.
    /// </param>
    /// <returns>
    /// The <c>InventTransId</c> related to the return line.
    /// </returns>
    public static InventTransId findReturnLine(
        ItemId              _itemId,
        SalesReturnItemNum  _returnNum)
    {
        SalesTable      salesTable  = SalesTable::findReturnItemNum(_returnNum);
        SalesLine       returnLine;
        InventTransId   transId;

        // Selecting the latest registered line to check if the same serial Id has been used.
        select firstonly InventTransId from returnLine
            order by LineNum desc
            where returnLine.SalesId         == salesTable.SalesId
                && returnLine.ItemId         == _itemId
                && returnLine.ReturnStatus   == ReturnStatusLine::Registered;

        transId = returnLine.InventTransId;

        return transId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOldestBatchInLoc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds oldest batch id in a specific location.
    /// </summary>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    /// <param name="_inventDim">
    /// Location and above dimensions.
    /// </param>
    /// <param name="_batchExpDate">
    /// Oldest acceptable expiry date; optional.
    /// </param>
    /// <returns>
    /// The oldest batch id of an item in a specific location.
    /// </returns>
    public static Set getOldestBatchInLoc(
        ItemId             _itemId,
        InventDim          _inventDim,
        InventBatchExpDate _batchExpDate = dateNull())
    {
        InventSum           inventSum;
        InventDim           inventDim;
        InventBatch         inventBatch;
        InventDimParm       inventDimParm;
        InventBatchExpDate  expDate;
        Set                 oldestBatchSet = new Set(Types::String);

        ttsbegin;

        inventDimParm.initFromInventDim(_inventDim);
        inventDimParm.LicensePlateFlag = NoYes::No;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select InventBatchId, ExpDate from inventBatch
                order by ExpDate asc
                where inventBatch.ItemId        == _itemId
                    && inventBatch.expDate      >= _batchExpDate
                exists join inventSum
                where inventSum.ItemId          == inventBatch.ItemId
                   && inventSum.ClosedQty       == NoYes::No
                   && inventSum.PhysicalInvent  > 0
                   && #InventDimFieldsFilter(inventSum, _inventDim, inventDimParm)
                   && inventSum.inventBatchId  == inventBatch.inventBatchId;
        }
        else
        {
            select InventBatchId, ExpDate from inventBatch
                order by ExpDate asc
                where inventBatch.ItemId        == _itemId
                    && inventBatch.expDate      >= _batchExpDate
                exists join inventSum
                where inventSum.ItemId          == inventBatch.ItemId
                   && inventSum.ClosedQty       == NoYes::No
                   && inventSum.PhysicalInvent  > 0
                #InventDimExistsJoinNoField(inventSum.InventDimId, inventDim, _inventDim, inventDimParm)
                   && inventDim.inventBatchId  == inventBatch.inventBatchId;
        }

        ttscommit;

        expDate = inventBatch.expDate;
        while (inventBatch &&
               inventBatch.expDate == expDate)
        {
            oldestBatchSet.add(inventBatch.InventBatchId);

            next inventBatch;
        }

        return oldestBatchSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOldestBatchInLocForPickLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Get the oldest batch numbers before specified date for the pick work line
    /// </summary>
    /// <param name="_pickLine">
    ///   The pick work line.
    /// </param>
    /// <param name="_batchExpDate">
    ///   The expire date the oldest batch number before.
    /// </param>
    /// <returns>
    ///   A set which store the oldest batch numbers.
    /// </returns>
    static Set getOldestBatchInLocForPickLine(WHSWorkLine _pickLine, InventBatchExpDate _batchExpDate = dateNull())
    {
        if (_pickLine.WorkType != WHSWorkType::Pick)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        PdsBestBeforeDate  batchBestBeforeDate = WhsWorkExecuteDisplay::getMinAllowedBestBeforeDate(_pickLine);

        InventDim inventDimPick = _pickLine.inventDimWithLocation();

        if (_pickLine.OrderCommittedInventDimId)
        {
            inventDimPick.inventBatchId = InventDim::find(_pickLine.OrderCommittedInventDimId).inventBatchId;
            inventDimPick = InventDim::findOrCreate(inventDimPick);
        }

        InventDimParm inventDimParmPick;
        inventDimParmPick.initFromInventDim(inventDimPick);
        inventDimParmPick.LicensePlateFlag = NoYes::No;

        InventSum inventSum;
        InventDim inventDim;
        InventBatch inventBatch;
        WHSWorkLine putWorkLine;

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            select InventBatchId, ExpDate, PdsDispositionCode from inventBatch
                order by ExpDate asc
                where inventBatch.ItemId        == _pickLine.ItemId
                   && inventBatch.expDate       >= _batchExpDate
                   && inventBatch.PdsBestBeforeDate >= batchBestBeforeDate
                exists join inventSum
                where inventSum.ItemId          == inventBatch.ItemId
                   && inventSum.PhysicalInvent  > 0
                   && #InventDimFieldsFilter(inventSum, inventDimPick, inventDimParmPick)
                   && inventSum.inventBatchId   == inventBatch.inventBatchId
                notExists join putWorkLine
                where putWorkLine.WorkId        == _pickLine.WorkId
                   && putWorkLine.WorkType      == WHSWorkType::Put
                   && putWorkLine.WMSLocationId == inventSum.wMSLocationId;
        }
        else
        {
            select InventBatchId, ExpDate, PdsDispositionCode from inventBatch
                order by ExpDate asc
                where inventBatch.ItemId        == _pickLine.ItemId
                   && inventBatch.expDate       >= _batchExpDate
                   && inventBatch.PdsBestBeforeDate >= batchBestBeforeDate
                exists join inventSum
                where inventSum.ItemId          == inventBatch.ItemId
                   && inventSum.PhysicalInvent  > 0
                #InventDimExistsJoinNoField(inventSum.InventDimId, inventDim, inventDimPick, inventDimParmPick)
                   && inventDim.inventBatchId   == inventBatch.inventBatchId
                notExists join putWorkLine
                where putWorkLine.WorkId        == _pickLine.WorkId
                   && putWorkLine.WorkType      == WHSWorkType::Put
                   && putWorkLine.WMSLocationId == inventDim.wMSLocationId;
        }

        InventBatchExpDate expDate = inventBatch.expDate;
        Set oldestBatchSet = new Set(Types::String);

        if (WHSValidateBatchDispCodeForPickingOnOldestBatchCalcFlight::instance().isEnabled())
        {
            boolean oldestBatchFound = false;

            while (inventBatch
                && (!oldestBatchFound || inventBatch.expDate == expDate))
            {
                expDate = inventBatch.expDate;

                if (WHSRFControlData::validateBatchDispCodeForPicking(inventBatch, _pickLine))
                {
                    oldestBatchSet.add(inventBatch.InventBatchId);
                    oldestBatchFound = true;
                }

                next inventBatch;
            }
        }
        else
        {
            while (inventBatch && inventBatch.expDate == expDate)
            {
                oldestBatchSet.add(inventBatch.InventBatchId);

                next inventBatch;
            }
        }

        return oldestBatchSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBatchDispCodeForPicking</Name>
				<Source><![CDATA[
    private static boolean validateBatchDispCodeForPicking(InventBatch _inventBatch, WHSWorkLine _workLine)
    {
        return _inventBatch.validateBatchDispCodeForPicking(_workLine.whsWorkTable().WorkTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDataWithCallback</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes data in all RF controls using processing on the <c>WhsWorkExecuteDisplay</c> class.
    /// </summary>
    /// <param name="_workExecuteDisplay">Container containing control data.</param>
    /// <param name="_con">Container containing control data.</param>
    /// <param name="_pass">RF pass through data contains state info.</param>
    /// <returns>
    /// Container containing RF control data after all controls are processed.
    /// </returns>
    static public container processDataWithCallback(
        WhsWorkExecuteDisplay _workExecuteDisplay,
        container             _con,
        WHSRFPassthrough      _pass)
    {
        return WhsrfControlData::processDataInternal(_con, _pass, _workExecuteDisplay);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes data in all RF controls.
    /// </summary>
    /// <param name="_con">
    /// Container containing control data.
    /// </param>
    /// <param name="_pass">
    /// RF pass through data contains state info.
    /// </param>
    /// <returns>
    /// Container containing RF control data after all controls are processed.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Exception is thrown when control data container is empty.
    /// </exception>
    static public container processData(container          _con,
                                 WHSRFPassthrough   _pass)
    {
        return WhsrfControlData::processDataInternal(_con, _pass, null);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDataInternal</Name>
				<Source><![CDATA[
    //Do not expose. Extenders must implement a control.
    static private container processDataInternal(
         container              _con,
         WHSRFPassthrough       _pass,
         WhsWorkExecuteDisplay  _workExecuteDisplay)
    {
        #WHSRF
        #WHSWorkExecuteControlElements
        #WHSWorkExecuteDisplayCases
        WHSRFControlData    controlData = new WHSRFControlData();
        container           con = _con;
        str                 controlType;
        str                 data;
        int                 i;
        int                 length;
        str                 name;
        int                 step;
        WHSWorkLine         workLine;
        WHSWorkExecuteMode  mode;
        boolean             hasError;
        int                 enabled;
        str                 selected;
        
        controlData.workExecuteDisplay = _workExecuteDisplay;
        
        length = conLen(con);

        if (!length)
        {
            throw error("@WAX1169");
        }
        
        mode = conPeek(conPeek(con, 1), 1);
        step = conPeek(conPeek(con, 1), 2);
        controlData.parmMode(mode);
        controlData.parmStep(step);
        controlData.parmPass(_pass);

        if (_pass.exists(#MenuItem))
        {
            controlData.populateFromMenuItem(_pass.lookup(#MenuItem));
        }
        
        if (_pass.exists(#WorkId) && _pass.exists(#LineNum))
        {
            workLine = WHSWorkLine::find(_pass.lookup(#WorkId), _pass.parmLineNum());
        }

        if (workLine)
        {
            controlData.parmWorkLine(workLine);
        }

        if (_pass.exists(#UserId))
        {
            controlData.populateSiteWarehouse(_pass.lookup(#UserId), workLine);
        }

        int inventStatusControlPos;

        for (i = 3; i <= length; i++)
        {
            container controlContainer = conPeek(con, i);
            controlType = conPeek(controlContainer, #controlType);

            if (controlType == #RFText      ||
                controlType == #RFPassword)
            {
                data    = conPeek(controlContainer, #data);
                name    = conPeek(controlContainer, #name);
                enabled = conPeek(controlContainer, #enabled);

                if (data)
                {
                    str allowedLength = conPeek(controlContainer, #length);
                    if (WhsrfControlData::isDataLengthValid(data, conPeek(controlContainer, #type), allowedLength))
                    {
                        if (WHSWorkExecuteDisplayMovInventStatusQtyCheckFlight::instance().isEnabled()
                            && name == #Qty
                            && mode == WHSWorkExecuteMode::Movement
                            && inventStatusControlPos != 0
                            && !_pass.lookupStr(#InventoryStatus)
                            && controlData.parmFieldValues().exists(#InventoryStatus)
                            && WHSRFMenuItemTable::find(_pass.lookup(#MenuItem)).RFDisplayStatus)
                        {
                            controlData = WhsrfControlData::processInventoryStatusSelectedOnControl(controlData, conPeek(con, inventStatusControlPos));
                        }

                        hasError = controlData.processControl(name, data, enabled);
                        if (hasError)
                        {
                            con = WhsrfControlData::markAsErrorAndPrepareForInput(con, i);
                            break;
                        }
                    }
                    else
                    {
                        str controlLabel = conPeek(controlContainer, #label);
                        throw error(strFmt("@WAX:Error_ValidateMobileFieldValueCharacterLength", controlLabel, allowedLength));
                    }
                    con = conPoke(con, i, conPoke(conPeek(con, i), #error, '0'));
                }
                else
                {
                    controlData.populateData(name);
                }
            }
            else if (controlType == #RFListBox  ||
                     controlType == #RFComboBox)
            {
                data        = conPeek(controlContainer, #data);
                name        = conPeek(controlContainer, #name);
                enabled     = conPeek(controlContainer, #enabled);
                selected    = conPeek(controlContainer, #selected);

                if (controlData.canProcessSelectedValueOnComboBoxControl(name, data))
                {
                    hasError = controlData.processControl(name, data, enabled, selected);
                    if (hasError)
                    {
                        int offset = controlData.mustMarkComboBoxControlErrorOnPreviousControl(name) ? -1 : 0;

                        con = conPoke(con, i + offset, conPoke(conPeek(con, i + offset), #data, ''));
                        con = conPoke(con, i + offset, conPoke(conPeek(con, i + offset), #error, '1'));

                        if (name == #QtyVerifyUOM)
                        {
                            // Now data is the selected value, need reset to list all choices.
                            con = conPoke(con, i, conPoke(conPeek(con, i), #data, WHSInventTable::find(_pass.parmItemId()).buildUOMSequenceGroupString(false)));
                            con = conPoke(con, i, conPoke(conPeek(con, i), #selected, workLine.UnitId));
                        }
                        break;
                    }

                    if (name == #InventoryStatus &&
                        controlData.parmFieldValues().exists(#InventoryStatus))
                    {
                        controlData.parmInventoryStatusSelectedOnControl(controlData.parmFieldValues().lookup(#InventoryStatus));
                    }
                }
                else if (controlData.canProcessDefaultValueOnComboBoxControl(name, data))
                {
                    hasError = controlData.processControl(name, data, enabled, selected);

                    if (hasError)
                    {
                        con = conPoke(con, i, conPoke(conPeek(con, i), #error, '1'));
                        break;
                    }
                }
                else
                {
                    controlData.populateData(name);
                }

                if (name == #InventoryStatus
                    && WHSWorkExecuteDisplayMovInventStatusQtyCheckFlight::instance().isEnabled())
                {
                    inventStatusControlPos = i;
                }
            }
            else if (controlType == #RFFastValidationIds)
            {
                data        = conPeek(controlContainer, #data);
                name        = conPeek(controlContainer, #name);
                enabled     = conPeek(controlContainer, #enabled);
                selected    = conPeek(controlContainer, #selected);

                hasError = controlData.processControl(name, data, enabled, selected);

                if (hasError)
                {
                    con = WhsrfControlData::markAsErrorAndPrepareForInput(con, i);
                    con = conPoke(con, i, conPoke(conPeek(con, i), #data, data));//Data contains available values, shouldn't be cleared in case of an error
                    con = conPoke(con, i, conPoke(conPeek(con, i), #selected, ''));
                    break;
                }

                con = conPoke(con, i, conPoke(conPeek(con, i), #error, '0'));
            }
        }

        if (hasError)
        {
            con = controlData.rebuildContainer(con);
        }

        return [con, controlData.parmFieldValues().pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInventoryStatusSelectedOnControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates properties in <c>WhsrfControlData</c> for Inventory status control.
    /// </summary>
    /// <param name = "_controlData">
    /// Actual properties in <c>WhsrfControlData</c> for inventory status control.
    /// </param>
    /// <param name = "_inventStatusControlCon">
    /// Properties for selected value on inventory status control.
    /// </param>
    static private WHSRFControlData processInventoryStatusSelectedOnControl(
         WHSRFControlData _controlData,
         container _inventStatusControlCon)
    {
        WHSRFControlData controlData = _controlData;
        str name = conPeek(_inventStatusControlCon, #name);
        str data = conPeek(_inventStatusControlCon, #data);

        if (controlData.canProcessSelectedValueOnComboBoxControl(name, data))
        {
            controlData.processControl(name,
                                       data,
                                       conPeek(_inventStatusControlCon, #enabled),
                                       conPeek(_inventStatusControlCon, #selected));
        }

        controlData.parmInventoryStatusSelectedOnControl(controlData.parmFieldValues().lookup(#InventoryStatus));

        return controlData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateFromMenuItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates properties in <c>WhsrfControlData</c> class from the menu item.
    /// </summary>
    /// <param name = "_menuItemName">
    /// Name of the menu item from which the properties should be populated.
    /// </param>
    public void populateFromMenuItem(WHSMenuItemName _menuItemName)
    {
        if (mode == WHSWorkExecuteMode::AdjustmentIn                                ||
            mode == WHSWorkExecuteMode::Movement                                    ||
            mode == WHSWorkExecuteMode::MovementByTemplate                          ||
            mode == WHSWorkExecuteMode::Quarantine                                  ||
            mode == WHSWorkExecuteMode::TransferOrderItemReceiving                  ||
            mode == WHSWorkExecuteMode::TransferOrderItemReceivingAndLocate         ||
            mode == WHSWorkExecuteMode::TransferOrderLineReceiving                  ||
            mode == WHSWorkExecuteMode::TransferOrderLineReceivingAndLocate         ||
            mode == WHSWorkExecuteMode::LicensePlateLoading                         ||
            mode == WHSWorkExecuteMode::WarehouseTransfer                           ||
            WHSWorkExecutionMode::newFromMode(mode).isInboundOrderOrLoadReceiving() ||
            WHSRFMenuItemTable::getWHSWorkExecuteMode(WHSRFMenuItemTable::find(_menuItemName)) == WHSWorkExecuteMode::AdjustmentIn)
        {
            this.parmDefaulting(WHSRFMenuItemTable::find(_menuItemName).DefaultData);
        }
        this.parmMenuItemName(_menuItemName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSiteWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates site and warehouse into the <c>WhsrfControlData</c> class.
    /// </summary>
    /// <param name = "_userId">
    /// <c>WHSUserId</c> for the current session.
    /// </param>
    /// <param name = "_workLine">
    /// <c>WHSWorkLine</c> record, if any, being executed.
    /// </param>
    public void populateSiteWarehouse(WHSUserId _userId, WHSWorkLine _workLine)
    {
        WHSWorkUserSession userSession = WHSWorkUserSession::find(_userId);

        if (_workLine &&  WhsWorkExecuteDisplay::isFinalPutKanbanAutoComplete(_workLine))
        {
            InventLocationId recvLocationId = Kanban::findKanbanId(_workLine.whsWorkTable().OrderNum).kanbanRule().kanbanFlow().firstPlanActivity().receiptLocation().InventLocationId;
            this.parmInventLocationId(recvLocationId);
            this.parmInventSiteId(InventLocation::find(recvLocationId).InventSiteId);
        }
        else
        {
            this.parmInventLocationId(userSession.InventLocationId);
            this.parmInventSiteId(InventLocation::find(userSession.InventLocationId).InventSiteId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDataLengthValid</Name>
				<Source><![CDATA[
    protected static boolean isDataLengthValid(str _data, str _dataType, str _allowedLength)
    {
        boolean isValid         = true;
        int     allowedLength   = str2Int(_allowedLength);
        
        if (allowedLength > 0 && _dataType == #TypeString && strLen(_data) > allowedLength)
        {
            isValid = false;
        }

        if (!isValid 
            && WHSBarcodeDataParserFactory::canParseBarcodeDataFromString(_data))
        {
            isValid = true;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDecimalPrecision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the number of decimals provided for the number is consistent with the unit of measure
    /// </summary>
    /// <param name = "_number">Decimal number to validate</param>
    /// <param name = "_unitId">Unit of measure for the number</param>
    [Hookable(false)]
    internal static void validateDecimalPrecision(Qty _number, UnitOfMeasureSymbol _unitId)
    {
        // Skip validation if no unit of measure is provided
        if (!_unitId)
        {
            return;
        }
        
        var maxDecimalPrecisionForUnitId = UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(_unitId));
        if (numOfDec(_number) > maxDecimalPrecisionForUnitId)
        {
            throw error(strFmt("@WAX:NumberOfDecimalsAllowed", _unitId, maxDecimalPrecisionForUnitId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAsErrorAndPrepareForInput</Name>
				<Source><![CDATA[
    private static container markAsErrorAndPrepareForInput(container _con, int _i)
    {
        _con = conPoke(_con, _i, conPoke(conPeek(_con, _i), #data, ''));
        _con = conPoke(_con, _i, conPoke(conPeek(_con, _i), #error, '1'));
        _con = conPoke(_con, _i, conPoke(conPeek(_con, _i), #enabled, true));

        return _con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBatchSellableDays</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify that the batch number assigned to the work has a valid expiration date.
    /// </summary>
    /// <param name="_workLine">
    /// The work line to check against.
    /// </param>
    /// <param name="_licensePlateId">
    /// The license plate associated with the work.
    /// </param>
    /// <param name="_batchId">
    /// The batch Id to verify.
    /// </param>
    /// <returns>
    /// True if the batch expiration date is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method will always return false if neither license plate nor batch are passed in.
    /// </remarks>
    public boolean checkBatchSellableDays(
        WHSWorkLine        _workLine,
        WHSLicensePlateId  _licensePlateId = '',
        inventBatchId      _batchId = '')
    {
        #InventDimDevelop
        InventDim            inventDim;
        InventBatch          inventBatch;
        boolean              ret = false;
        Qty                  validQty;
        Query                batchesQuery = new Query();
        QueryRun             batchesQR;
        QueryBuildDataSource inventDimDS, inventBatchDS;
        InventModelGroup     inventModelGroup;
        InventModelGroupItem inventModelGroupItem;
        SalesLine            salesLine = SalesLine::findInventTransId(_workLine.InventTransId);

        date orderDate = salesLine.getExpiryCheckDate();
        InventDim productInventDim = _workLine.inventDim();
        productInventDim.clearNotProductDim(InventDimGroupSetup::newItemId(_workLine.ItemId));
        productInventDim = InventDim::findOrCreate(productInventDim);

        if (_batchId)
        {
            ret = InventBatch::pdsCheckExpiryDate(_batchId,
                                              _workLine.ItemId,
                                              orderDate,
                                              false,
                                              salesLine.CustAccount,
                                              false,
                                              productInventDim);
        }
        else if (_licensePlateId)
        {
            // Determine batch sort based on item model's pick criteria.
            select firstOnly PdsCheck, PdsPickCriteria from inventModelGroup
                exists join inventModelGroupItem
                    where inventModelGroup.ModelGroupId     == inventModelGroupItem.ModelGroupId
                          && inventModelGroupItem.ItemId    == workLine.ItemId;

            if (inventModelGroup.PdsCheck)
            {
                // Iterate over batches on the license plate to determine valid quantity.
                inventBatchDS = batchesQuery.addDataSource(tableNum(InventBatch));
                inventBatchDS.addSelectionField(fieldNum(InventBatch, inventBatchId));
                inventBatchDS.addRange(fieldNum(InventBatch, ItemId)).value(SysQuery::value(workLine.ItemId));
                inventDimDS = inventBatchDS.addDataSource(tableNum(InventDim));
                inventDimDS.addLink(fieldNum(InventBatch, inventBatchId), fieldNum(inventDim, InventBatchId));
                inventDimDS.joinMode(JoinMode::InnerJoin);
                inventDimDS.fetchMode(QueryFetchMode::One2One);
                InventDim::queryAddRangeForProductDimensions(inventDimDS, productInventDim);
                inventDimDS.addRange(fieldNum(inventDim, InventSiteId)).value(SysQuery::value(_workLine.whsWorkTable().InventSiteId));
                inventDimDS.addRange(fieldNum(inventDim, InventLocationId)).value(SysQuery::value(_workLine.whsWorkTable().InventLocationId));
                inventDimDS.addRange(fieldNum(inventDim, wmsLocationId)).value(SysQuery::value(_workLine.WmsLocationId));
                inventDimDS.addRange(fieldNum(inventDim, LicensePlateId)).value(SysQuery::value(_licensePlateId));
                inventDimDS.addRange(fieldNum(inventDim, inventBatchId)).value(SysQuery::valueNotEmptyString());

                if (inventModelGroup.PdsPickCriteria == PdsPickCriteria::BestBeforeDate)
                {
                    inventBatchDS.addSortField(fieldNum(InventBatch, PdsBestBeforeDate), SortOrder::Descending);
                }
                else if (inventModelGroup.PdsPickCriteria == PdsPickCriteria::ExpiryDate)
                {
                    inventBatchDS.addSortField(fieldNum(InventBatch, expDate), SortOrder::Descending);
                }

                batchesQR = new QueryRun(batchesQuery);

                while (batchesQR.next())
                {
                    inventBatch = batchesQR.get(tableNum(InventBatch));
                    inventDim = batchesQR.get(tableNum(InventDim));
                    if (InventBatch::pdsCheckExpiryDate(inventBatch.inventBatchId,
                                                    _workLine.ItemId,
                                                    orderDate,
                                                    false,
                                                    salesLine.CustAccount,
                                                    false,
                                                    productInventDim))
                    {
                        validQty += InventSum::findSum(_workLine.ItemId, inventDim, inventDim.toDimParm()).PhysicalInvent;

                        //If there is some valid inventory on the license plate then the pick process should continue,
                        //since other license plates may have additional inventory to pick.
                        if (validQty > 0)
                        {
                            ret = true;
                            break;
                        }
                    }
                }
            }
            else
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDimIdProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the <c>InventDimId</c> for the product dimensions.
    /// </summary>
    /// <returns>The <c>InventDimId</c> for the product dimensions.</returns>
    public InventDimId findInventDimIdProduct()
    {
        InventDim   inventDimProduct;

        // take the product dimensions from the pass...
        inventDimProduct = pass.createProductInventDimFromPass();
        // ... and if anything is missing, get it from what is present on the screen
        this.initInventDimProductDimFromMembers(inventDimProduct);

        inventDimProduct = InventDim::findOrCreate(inventDimProduct);

        return inventDimProduct.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getClusterPickQty</Name>
				<Source><![CDATA[
    private Qty getClusterPickQty()
    {
        #WHSBuildQty
        Qty clusterPickQty;

        ItemId currentItemId = pass.lookupStr(#ItemId);

        Query inventQtyRemainQuery =  this.buildInventQtyRemainQuery();
        QueryRun queryRun = new QueryRun(inventQtyRemainQuery);
        if (queryRun.next())
        {
            WHSWorkLine pickWorkLine = queryRun.get(tableNum(WHSWorkLine));

            clusterPickQty = WHSUOMSeqGroupQtyUnitCalculator::newFromItemQtyAndDimensionForInventHandlingUnit(
                currentItemId, pickWorkLine.InventQtyRemain, pass.createInventDimFromPass().inventDimId)
                .calculateQtyWithNoDecimalForHighestUOM();
        }

        return clusterPickQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventQtyRemainQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the query for the sum of the inventory quantity remain.
    /// </summary>
    /// <returns>
    /// A <c>Query</c> object
    /// </returns>
    protected Query buildInventQtyRemainQuery()
    {
        Query query = new Query();

        ItemId currentItemId = pass.lookupStr(#ItemId);

        QueryBuildDataSource pickWorkLineSource = query.addDataSource(tableNum(WHSWorkLine));
        pickWorkLineSource.addSelectionField(fieldNum(WHSWorkLine, InventQtyRemain), SelectionField::Sum);

        QueryBuildDataSource whsWorkClusterLineSource = pickWorkLineSource.addDataSource(tableNum(WHSWorkClusterLine));
        whsWorkClusterLineSource.joinMode(JoinMode::ExistsJoin);
        whsWorkClusterLineSource.addLink(fieldNum(WHSWorkLine, WorkId), fieldNum(WHSWorkClusterLine, WorkId));

        pickWorkLineSource.addRange(fieldNum(WHSWorkLine, WorkType)).value(queryValue(WHSWorkType::Pick));
        pickWorkLineSource.addRange(fieldNum(WHSWorkLine, wmsLocationId)).value(queryValue(pass.lookupStr(#WMSLocationId)));
        pickWorkLineSource.addRange(fieldNum(WHSWorkLine, ItemId)).value(queryValue(currentItemId));
        whsWorkClusterLineSource.addRange(fieldNum(WHSWorkClusterLine, ClusterId)).value(queryValue(pass.lookupStr(#ClusterId)));

        QueryBuildDataSource qbdsInventDim = pickWorkLineSource.addDataSource(tableNum(InventDim));
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);
        qbdsInventDim.addLink(fieldNum(WHSWorkLine, InventDimId), fieldNum(InventDim, InventDimId));

        InventDimParm dimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(currentItemId));
        InventDim::queryAddRangeCriteriaForSelectedDims(qbdsInventDim, pass.createInventDimFromPass(), dimParm);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPhysicalInventHandlingQty</Name>
				<Source><![CDATA[
    private InventHandlingQty getPhysicalInventHandlingQty(
        InventDim _inventDim = InventDim::find(this.findInventDimId()),
        boolean _skipLPValidation = false,
        boolean _initializeInventDimId = false)
    {
        InventHandlingQty   ret;

        if (_skipLPValidation || this.isLPControlWithLPOrNotLPControlWithoutLP())
        {
            InventOnhandQty inventOnhandQty = InventOnhandQty::newParameters(fieldValues.parmItemId(), _inventDim);
            //we are only looking for physical inventory so no need to find reservation related sums
            inventOnhandQty.parmDelayAvailabilityCalculation(true);
            
            if (_initializeInventDimId)
            {
                inventOnhandQty.parmInventDimId(_inventDim.InventDimId);
            }

            ret = this.isCatchWeightItem(fieldValues.parmItemId()) ?
                inventOnhandQty.pdsCWPhysicalInvent() : inventOnhandQty.physicalInvent();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLPControlWithLPOrNotLPControlWithoutLP</Name>
				<Source><![CDATA[
    private boolean isLPControlWithLPOrNotLPControlWithoutLP()
    {
        boolean ret = false;
        boolean lpControlled;

        if (fieldValues.parmItemId() && locationId)
        {
            lpControlled = this.wmsLocation().whsLocationIsLPControlled();

            if ((!lpControlled && !fieldValues.parmLicensePlateId()) || (lpControlled && fieldValues.parmLicensePlateId()))
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPurchaseOrderLineOnMoreThanOneLoad</Name>
				<Source><![CDATA[
    [SysObsolete('Logic has been moved to inboundOrderLineHasMoreThanOneLoadLine', false, 27\02\2023)]
    public boolean isPurchaseOrderLineOnMoreThanOneLoad(InventTransId _purchLineInventTransId)
    {
        WHSLoadLine loadLine;

        if (WhsReceivingIgnoreReceivedLoadsFlight::instance().isEnabled())
        {
            WHSLoadTable loadTable;

            select count(RecId) from loadLine
                where loadLine.InventTransId == _purchLineInventTransId
                    && loadLine.InventTransType == InventTransType::Purch
                exists join loadTable
                    where loadTable.LoadId == loadLine.LoadId
                       && loadTable.LoadStatus != WHSLoadStatus::Received
                       && !loadTable.LoadReceivingCompletedUTCDateTime;
        }
        else
        {
            select count(RecId) from loadLine
                where loadLine.InventTransId == _purchLineInventTransId
                    && loadLine.InventTransType == InventTransType::Purch;
        }

        return (loadLine.RecId > 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inboundOrderLineHasMoreThanOneLoadLine</Name>
				<Source><![CDATA[
    public boolean inboundOrderLineHasMoreThanOneLoadLine(WHSReceiptOrderLine _orderLine)
    {
        if (_orderLine is PurchLine)
        {
            return this.isPurchaseOrderLineOnMoreThanOneLoad(_orderLine.InventTransId);
        }

        WHSLoadLine loadLine;

        if (WhsReceivingIgnoreReceivedLoadsFlight::instance().isEnabled())
        {
            WHSLoadTable loadTable;

            select count(RecId) from loadLine
                where loadLine.InventTransId == _orderLine.InventTransId
                   && loadLine.InventTransType == _orderLine.inventTransType()
                exists join loadTable
                    where loadTable.LoadId == loadLine.LoadId
                       && loadTable.LoadStatus != WHSLoadStatus::Received
                       && !loadTable.LoadReceivingCompletedUTCDateTime;
        }
        else
        {
            select count(RecId) from loadLine
                where loadLine.InventTransId   == _orderLine.InventTransId
                   && loadLine.InventTransType == _orderLine.inventTransType();
        }

        return (loadLine.RecId > 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadItemReceivingPurchLineProvider</Name>
				<Source><![CDATA[
    [SysObsolete('Deprecated method. Please use loadItemReceivingOrderLineProvider method instead.', false, 22\02\2023)]
    public WHSLoadItemReceivingPurchLineProvider loadItemReceivingPurchLineProvider(
        WHSLoadId   _loadId,
        ItemId      _itemId,
        InventDim   _productInventDim = null,
        PurchId     _purchId = '')
    {
        return WHSLoadItemReceivingOrderLineProvider::newFromParameters(
                                                        InventTransType::Purch,
                                                        _loadId,
                                                        _itemId,
                                                        _productInventDim,
                                                        _purchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadItemReceivingOrderLineProvider</Name>
				<Source><![CDATA[
    public WHSLoadItemReceivingOrderLineProvider loadItemReceivingOrderLineProvider(
        WHSLoadId   _loadId,
        ItemId      _itemId,
        InventDim   _productInventDim = null,
        Num         _orderId = '')
    {
        InventTransType inventTransType = WHSWorkExecuteDisplayReceivingOrderProvider::getInventTransTypeFromLoadAndItem(_loadId, _itemId);

        if (inventTransType == InventTransType::Purch)
        {
            return this.loadItemReceivingPurchLineProvider(_loadId, _itemId, _productInventDim, _orderId);
        }

        return WHSLoadItemReceivingOrderLineProvider::newFromParameters(
                                                        inventTransType,
                                                        _loadId,
                                                        _itemId,
                                                        _productInventDim,
                                                        _orderId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDate2DateFormatStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a date value to a string based on system's date format.
    /// </summary>
    /// <param name="_date">
    ///     The date to convert.
    /// </param>
    /// <returns>
    ///     The date string in system's (en-us) date format.
    /// </returns>
    public static str convertDate2DateFormatStr(date _date)
    {
        if (!_date)
        {
            return '';
        }

        // Default culture for serializing dates in WMDP XML is EN-US,
        // which for X++ is defined by #DateFormat.
        // Native X++ conversion is significantly faster than CultureInfo based parsing, thus using date2Str.
        var separator = DateSeparator::Slash;
        return date2Str(_date, #DateFormat, DateDay::Digits1or2, separator, DateMonth::Auto, separator, DateYear::Digits4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDate2DateFormatStrCurrentUserDateCulture</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a date value to a string based on the current user date culture.
    /// </summary>
    /// <param name="_date">
    ///     The date to convert.
    /// </param>
    /// <param name="_userId">
    ///    The user ID to get the date culture. Optional.
    /// </param>
    /// <returns>
    ///     The date string in current user date culture format.
    /// </returns>
    public static str convertDate2DateFormatStrCurrentUserDateCulture(date _date, WHSUserId _userId = '')
    {
        if (!_date)
        {
            return '';
        }

        CultureInfo userCulture = new CultureInfo(WHSParameters::getCurrentUserDateCulture(_userId));
        var dateTime = new System.DateTime(year(_date),
                                           mthOfYr(_date),
                                           dayOfMth(_date));

        return dateTime.ToString('d', userCulture);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDateFormatStr2Date</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a string value to a date based on system's date format.
    /// </summary>
    /// <param name="_dateString">
    ///     The date string whose date format is defined based on system's date format.
    /// </param>
    /// <param name="_userId">
    ///    The user ID to get the date culture. Optional.
    /// </param>
    /// <returns>
    ///     Returns the converted date.
    /// </returns>
    public static date convertDateFormatStr2Date(str _dateString, WHSUserId _userId = '')
    {
        if (!_dateString)
        {
            return dateNull();
        }

        utcdatetime dateTime = WhsrfControlData::getDateTimeCurrentUserCulture(_dateString, _userId, Types::Date);

        return DateTimeUtil::date(dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDateTimeFormatStr2DateTime</Name>
				<Source><![CDATA[
    internal static utcdatetime convertDateTimeFormatStr2DateTime(str _dateTimeString, WHSUserId _userId)
    {
        if (!_dateTimeString)
        {
            return utcDateTimeNull();
        }

        return WhsrfControlData::getDateTimeCurrentUserCulture(_dateTimeString, _userId, Types::UtcDateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateTimeCurrentUserCulture</Name>
				<Source><![CDATA[
    private static utcdatetime getDateTimeCurrentUserCulture(str _dateTimeString, WHSUserId _userId, Types _type)
    {
        System.DateTime dateTime;
        CultureInfo userCulture = new CultureInfo(WHSParameters::getCurrentUserDateCulture(_userId));

        if (!System.DateTime::TryParse(_dateTimeString, userCulture, System.Globalization.DateTimeStyles::None, byref dateTime))
        {
            throw error(strfmt("@WAX:WAX_Message_Error_CannotConvertValueToType", _dateTimeString, _type));
        }
        else
        {
            dateTime = System.DateTime::Parse(_dateTimeString, userCulture);
        }

        return Global::clrSystemDateTime2UtcDateTime(dateTime);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustInsertOwnerIntoFieldValues</Name>
				<Source><![CDATA[
    private boolean mustInsertOwnerIntoFieldValues()
    {
        if (mode == WHSWorkExecuteMode::AdjustmentIn)
        {
            WHSLicensePlateId licensePlateId = fieldValues.parmLicensePlateId();
            return !licensePlateId || WHSLicensePlate::exist(licensePlateId);
        }
        return workLine.WorkType != WHSWorkType::Count;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertOwnerIntoFieldValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts owner into field values.
    /// </summary>
    public void insertOwnerIntoFieldValues()
    {
        if (this.mustInsertOwnerIntoFieldValues())
        {
            inventOwnerId = this.getOwnerId();
            fieldValues.insert(#OwnerId_RU, inventOwnerId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKanbanCardId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the kanban card exists and is assigned to a kanban.
    /// </summary>
    /// <param name = "_control">
    /// Current control used.
    /// </param>
    /// <returns>
    /// True if the card id is valid; false otherwise.
    /// </returns>
    private boolean validateKanbanCardId(WhsControl _control)
    {
        KanbanCardId cardId = _control.parmData();
        KanbanCard  kanbanCard = KanbanCard::findCardId(cardId);
        
        if (kanbanCard.recId == 0)
        {
            _control.fail(strFmt("@SYS4000391", cardId));
        }
        else if (kanbanCard.Kanban == 0)
        {
            _control.fail(strFmt("@SYS4000392", cardId));
        }

        return !_control.parmHasError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEmptyRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the current KanbanCard can be emptied.
    /// </summary>
    /// <param name = "_control">
    /// Current control used.
    /// </param>
    /// <returns>
    /// True if the card is valid; false otherwise.
    /// </returns>
    private boolean validateEmptyRegistration(WhsControl _control)
    {
        KanbanCardId cardId = _control.parmData();
        Kanban       kanban    = Kanban::findKanbanCardId(cardId);
        KanbanJob    kanbanJob = kanban.currentJob();

        if (kanbanJob.RecId == 0 || kanban.Status != LeanKanbanStatus::Received)
        {
            _control.fail(strFmt("@SYS314195", cardId));
        }

        return !_control.parmHasError();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpectedUOMOfCurrentWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the expected unit of measurement of the current work line.
    /// </summary>
    /// <returns>
    /// Expected unit of measurement.
    /// </returns>
    private UnitOfMeasureSymbol getExpectedUOMOfCurrentWorkLine()
    {
        // For the group pick without overpick the lowest UOM on the work should be returned since group pick Qty is calculated using lowest UOM as well
        if (pass.isGroupPick() 
            && !pass.exists(#ProductionOverPickQty))
        {
            return WHSGroupPickLineDetails::newFromWorkLine(workLine).lowestUOMOnWork;
        }
        else
        {
            return workLine.UnitId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForOutboundShipment</Name>
				<Source><![CDATA[
    private boolean isForOutboundShipment()
    {
        return WhsWorkTransactionType::singletonFromTypeOrDefault(workLine.whsWorkTable().WorkTransType).isForOutboundShipment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpectedQuantityOfCurrentWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the expected quantity of the current work line.
    /// </summary>
    /// <returns>
    /// A container for the expected quantity and error message.
    /// </returns>
    private container getExpectedQuantityOfCurrentWorkLine()
    {
        WHSQtyRemain expectedQty;

        if (workLine.WorkType == WHSWorkType::Put
            && pass.exists(#GroupPutaway)
            && !pass.exists(#GroupPutawayFail)
            && !WHSWorkLine::getNextOppositeWorkLine(workLine.WorkId, workLine.LineNum, workLine.WorkType))
        {
            var multiplePutsQty = WHSWorkTable::multipleFinalPutsWithLocAndUnitsEqualRemainQty(workLine.WorkId);
            expectedQty = multiplePutsQty ? multiplePutsQty : workLine.QtyRemain;
        }
        else if (workLine.WorkType == WHSWorkType::Pick
                && this.isForOutboundShipment()
                && this.wmsLocation().whsLocationIsLPControlled())
        {
            if (!fieldValues.parmLicensePlateId())
            {
                fieldValues.parmLicensePlateId(pass.parmLicensePlateId());
            }

            // For the group pick pass contains calculated Qty in lowest UOM for the work considering remaining Qty on LP
            if (pass.isGroupPick())
            {
                expectedQty = this.getQtyToPick();
            }
            else
            {
                expectedQty = min(this.getQtyToPick(), this.getQtyOnLicensePlate());
            }

            if (!expectedQty)
            {
                return [0, "@WAX1159"];
            }
        }
        else if (mode == WHSWorkExecuteMode::AdjustmentIn
            || (mode == WHSWorkExecuteMode::ClusterPutaway
                && WHSClusterPutawaySupportQtyConfirmationPutSingleItemFlight::instance().isEnabled()))
        {
            if (pass.exists(#Qty))
            {
                expectedQty = pass.lookupNum(#Qty);
            }
        }
        else if ((workLine.WorkType == WHSWorkType::Pick || workLine.WorkType == WHSWorkType::Put)
                 && pass.exists(#ProductionOverPickQty))
        {
            expectedQty = pass.lookupNum(#ProductionOverPickQty);
        }
        else if (workLine.whsWorkTable().WorkTransType == WHSWorkTransType::ProdPick 
              && fieldValues.parmLicensePlateId())
        {
            // For the group pick pass contains calculated Qty in lowest UOM for the work considering remaining Qty on LP
            if (pass.isGroupPick())
            {
                expectedQty = this.getQtyToPick();
            }
            else
            {
                expectedQty = min(this.getQtyToPick(), this.getQtyOnLicensePlate());
            }
        }
        else
        {
            expectedQty = this.getQtyToPick();
        }

        return [expectedQty, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightClusterPick</Name>
				<Source><![CDATA[
    private boolean validateCatchWeightClusterPick(WHSWorkId _workId)
    {
        WHSWorkLine         cwWorkLine;
        PdsCatchWeightItem  catchWeightItem;

        if (WHSCatchWeightConfigurationKeyManager::instance().isEnabled())
        {
            select firstOnly RecId from cwWorkLine
                where cwWorkLine.WorkId == _workId
                    exists join catchWeightItem
                    where catchWeightItem.ItemId == cwWorkLine.ItemId;
        }

        return cwWorkLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyToPick</Name>
				<Source><![CDATA[
    private Qty getQtyToPick()
    {
        Qty qtyToPick;

        if (pass.isGroupPick()
        && pass.exists(WHSWorkExecuteDisplayGroupPickControls::GroupPickQty)
        && workLine.WorkType == WHSWorkType::Pick)
        {
            qtyToPick = pass.lookupNum(WHSWorkExecuteDisplayGroupPickControls::GroupPickQty);
        }
        else
        {
            qtyToPick = workLine.QtyRemain;
        }

        return qtyToPick;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyOnLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets quantity on current license plate.
    /// </summary>
    /// <returns>Quantity on current license plate.</returns>
    private Qty getQtyOnLicensePlate()
    {
        Qty qtyOnLicensePlate;

        if (fieldValues.parmLicensePlateId())
        {
            EcoResReleasedProductUnitConverter  unitConverter       = EcoResReleasedProductUnitConverter::construct();
            InventHandlingUnitId                inventHandlingUOM   = WHSCatchWeightHelper::inventHandlingUnitId(fieldValues.parmItemId());
            InventDimId                         inventDimId         = workLine.InventDimId;

            qtyOnLicensePlate = WHSInvent::getQtyOnLicensePlate(fieldValues.parmLicensePlateId(), fieldValues.parmItemId(), inventDimId, locationId);

            if (unitConverter.canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(inventHandlingUOM),
                                             UnitOfMeasure::unitOfMeasureIdBySymbol(workLine.UnitId),
                                             fieldValues.parmItemId(),
                                             inventDimId))
            {
                qtyOnLicensePlate = unitConverter.convert(qtyOnLicensePlate,
                                                          UnitOfMeasure::unitOfMeasureIdBySymbol(inventHandlingUOM),
                                                          UnitOfMeasure::unitOfMeasureIdBySymbol(workLine.UnitId),
                                                          NoYes::No,
                                                          fieldValues.parmItemId(),
                                                          inventDimId,
                                                          NoYes::No);
            }
        }
        
        return qtyOnLicensePlate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBestMatchReturnLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method that gets return line based off RMA number.
    /// </summary>
    /// <returns>The best matching return order line line.</returns>
    [Hookable(false)]
    internal SalesLine findBestMatchReturnLine()
    {
        SalesTable      salesTable  = SalesTable::findReturnItemNum(pass.lookup(#RMANum));
        SalesLine       returnLine;
        InventDim       inventDim;
        InventDim       inventDimCriteria;
        InventDimParm   inventDimParm;
        InventDimParm   inventDimParmAllowBlank;

        if (InventDimGroupSetup::newItemIdProductDimensionsOnly(pass.lookup(#ItemId)).activeFields().elements())
        {
            inventDimParm.setAllProductDimensions();
        }

        inventDimParm.InventLocationIdFlag = NoYes::Yes;

        if (pass.exists(#BatchId))
        {
            inventDimParm.InventBatchIdFlag = NoYes::Yes;
            inventDimParmAllowBlank.InventBatchIdFlag = NoYes::Yes;
        }

        pass.initInventDimFromPassParm(inventDimCriteria, inventDimParm);

        InventSite::setReceivingWarehouseCriteria(inventDimCriteria, inventDimParm);

        select firstonly returnLine
            where returnLine.SalesId         == salesTable.SalesId
                && returnLine.ItemId         == pass.lookup(#ItemId)
                && returnLine.ReturnStatus   == ReturnStatusLine::Awaiting
                #InventDimExistsJoinAllowBlank(returnLine.InventDimId, inventDim, inventDimCriteria, inventDimParm, inventDimParmAllowBlank);

        return returnLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDateTime2DateTimeFormatStrCurrentUserDateCulture</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Converts a date time value to a string based on the current user date culture.
    /// </summary>
    /// <param name="_utcDateTime">
    ///     The UTC date time to convert.
    /// </param>
    /// <param name="_userId">
    ///    The user ID to get the date culture. Optional.
    /// </param>
    /// <returns>
    ///     The date time string in current user date culture format.
    /// </returns>
    public static str convertDateTime2DateTimeFormatStrCurrentUserDateCulture(utcdatetime _utcDateTime, WHSUserId _userId = '')
    {
        if (!_utcDateTime)
        {
            return '';
        }

        CultureInfo userCulture = new CultureInfo(WHSParameters::getCurrentUserDateCulture(_userId));
                                                 
        var dateTime = new System.DateTime(DateTimeUtil::year(_utcDateTime),
                                           DateTimeUtil::month(_utcDateTime),
                                           DateTimeUtil::day(_utcDateTime),
                                           DateTimeUtil::hour(_utcDateTime),
                                           DateTimeUtil::minute(_utcDateTime),
                                           DateTimeUtil::second(_utcDateTime));
       
        return dateTime.ToString('G', userCulture);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCatchWeightItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an item is catch weight enabled.
    /// </summary>
    /// <param name = "_itemId">The item being evaluated.</param>
    /// <returns>True if catch weight enabled; otherwise False.</returns>
    [Hookable(false)]
    protected internal boolean isCatchWeightItem(ItemId _itemId)
    {
        return PdsGlobal::pdsIsCWItem(_itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLPNotInAnotherWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is to validate LP is not in another warehouse.
    /// </summary>
    private void validateLPNotInAnotherWarehouse(WHSLicensePlateId _licensePlateId, InventLocationId _inventLocationId)
    {
        InventDim inventDim = WHSLicensePlate::getInventDimWithOnHand(_licensePlateId);

        if (inventDim.InventLocationId && inventDim.InventLocationId != _inventLocationId)
        {
            throw error(strFmt("@WAX:LPInAnotherWarehouse", _licensePlateId, inventDim.InventLocationId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleLocationProductDimensionFieldMixingError</Name>
				<Source><![CDATA[
    private str handleLocationProductDimensionFieldMixingError(WMSLocationId _locationId, str _invalidDimension)
    {
        error(strFmt("@WAX:Error_LocationDoesNotAllowForMixedDimension", locationId, _invalidDimension));
        return strFmt("@WAX1165", _invalidDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProductDimensionFieldMixing</Name>
				<Source><![CDATA[
    private boolean validateProductDimensionFieldMixing(InventDim _inventDim, FieldId _dimFieldId)
    {
        boolean ret = true;

        if (WMSLocation::find(locationId, inventLocationId).WHSLocationProfile().EnableLocationProductDimensionSpecificMixing)
        {
            WHSRFControlDataLocationProductDimensionMixingFieldValidator productDimensionMixingFieldValidator = WHSRFControlDataLocationProductDimensionMixingFieldValidator::newFromLocationItemInventDimFieldId(WMSLocation::find(locationId, inventLocationId),
                pass.lookup(#ItemId),
                _inventDim,
                _dimFieldId);

            ret = productDimensionMixingFieldValidator.validateLocationProductDimensionFieldMixing();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveInventDimFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the inventory dimensions from current work line and pass.
    /// </summary>
    /// <param name="_itemId">
    /// The current item id
    /// </param>
    /// <returns>
    /// The inventory dimension record.
    /// </returns>
    public InventDim retrieveInventDimFromWorkLine(ItemId _itemId)
    {
        InventDim inventDim = InventDim::find(this.findInventDimId());

        if (!WHSWorkLine::isInventDimIdBlank(workLine.InventDimId))
        {
            InventDimParm inventDimParm;
            InventDim workLineDim = workLine.inventDim();
            inventDimParm.initFromInventDim(workLineDim);
            inventDim.copyDimParmDim(InventDimGroupSetup::newItemId(_itemId), workLineDim, inventDimParm);
            inventDim = InventDim::findOrCreate(inventDim);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSWorkExecuteDisplay</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal  WhsWorkExecuteDisplay parmWHSWorkExecuteDisplay()
    {
        return workExecuteDisplay;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>