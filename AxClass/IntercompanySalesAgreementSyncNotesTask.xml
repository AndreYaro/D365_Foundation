<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntercompanySalesAgreementSyncNotesTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>IntercompanySalesAgreementSyncNotesTask</c> class handles the transfer of documents when it
///    is called from the <c>SalesAgreementHeader</c> table.
/// </summary>
class IntercompanySalesAgreementSyncNotesTask extends IntercompanySyncNotesTask
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>synchronizeCommon</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Synchronizes notes from the sales agreement header to the purchase agreement header.
    /// </summary>
    protected void synchronizeCommon()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().interCompanyActivities().synchronizeCommon(this.parmDocRefRecId(), this.parmRefCompanyId(), this.parmRefTableId(), this.parmRefRecId()))
        {
            ttsbegin;
            changecompany(refCompanyId)
            {
                setprefix(strfmt("@SYS93821",TradeInterCompany::curCompanyName()));

                SalesAgreementHeader salesAgreementHeader = SalesAgreementHeader::find(refRecId);

                if (salesAgreementHeader.intercompanyLinkExist())
                {
                    boolean docuRefExists;

                    // Delete all notes on associated agreement
                    PurchAgreementHeader purchAgreementHeader = salesAgreementHeader.purchAgreementHeader();

                    if (purchAgreementHeader.RecId
                        && purchAgreementHeader.RecId != fromRecId)
                    {
                        // No need to delete all notes in order to improve performance if new notes are created
                        if (!this.isCreatedDocu())
                        {
                            if (TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled() && this.parmIsInitialSync())
                            {
                                docuRefExists = this.deleteDocuRefExists(purchAgreementHeader, salesAgreementHeader.RecId);
                            }
                            else
                            {
                                this.deleteDocuRef(purchAgreementHeader, salesAgreementHeader.RecId);
                            }
                        
                        }
                    }

                    // Retrieve the base table reference for documents
                    TableId baseTableId = DocuRef::GetRootTableID(salesAgreementHeader.TableId);

                    if ((!docuRefExists && this.parmIsInitialSync())
                        || !TradeInterCompanyDoNotSynchronizeNotesIfExistsFlight::instance().isEnabled()
                        || !this.parmIsInitialSync())
                    {
                        DocuRef fromDocuRef;

                        // Create all notes on associated Agreement
                        while select fromDocuRef
                            where fromDocuRef.RefCompanyId == salesAgreementHeader.DataAreaId
                               && fromDocuRef.RefTableId   == baseTableId
                               && fromDocuRef.RefRecId     == salesAgreementHeader.RecId
                               // Only process new created notes if new notes are created
                               && (fromDocuRef.RecId       == this.parmDocRefRecId() || !this.isCreatedDocu())
                        {
                            if (this.validateDocuRefTypeGroup(fromDocuRef))
                            {
                                if (purchAgreementHeader.RecId
                                    && purchAgreementHeader.RecId != fromRecId)
                                {
                                    this.writeDocuRef(purchAgreementHeader,fromDocuRef,salesAgreementHeader.RecId);
                                }
                            }
                        }
                    }
                }
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDocuRefTypeGroup</Name>
				<Source><![CDATA[
    protected boolean validateDocuRefTypeGroup(DocuRef _docuRef)
    {
        if (IntercompanySyncNotesTaskWriteDocuRefCheckFlight::instance().isEnabled())
        {
            return this.canWriteDocuRef(_docuRef);
        }
        else
        {
            return _docuRef.docuType().TypeGroup == DocuTypeGroup::Note;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntercompanySalesAgreementSyncNotesTask construct()
    {
        return new IntercompanySalesAgreementSyncNotesTask();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>