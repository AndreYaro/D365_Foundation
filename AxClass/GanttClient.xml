<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttClient</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>GanttClient</c> class implements the base functionality for controlling a Gantt chart.
/// </summary>
/// <remarks>
///    The class provides the basic features that are needed for implementing a custom Gantt chart. These
///    include the following:
///    <list type="bullet">
///       <item>
///          <description>Handling of Gantt chart initialization.</description>
///       </item>
///       <item>
///          <description>Support for data loading and saving by the usage of the Gantt data
///          classes.</description>
///       </item>
///       <item>
///          <description>Basic support for data validation.</description>
///       </item>
///       <item>
///          <description>Basic support for configuration keys check.</description>
///       </item>
///       <item>
///          <description>Support for creation and usage of the Gantt color, data, setup and view
///          classes.</description>
///       </item>
///       <item>
///          <description>Handling of Gantt chart loading progress display.</description>
///       </item>
///    </list>
/// </remarks>
abstract class GanttClient extends RunBase
{
    GanttData           ganttData;
    GanttVisualization  ganttVisualization;

    GanttSetup          ganttSetup;
    GanttColor          ganttColor;
    GanttView           ganttView;

    // Time scale interval dates
    FromDate            fromDate;
    ToDate              toDate;

    // Order dates (used for time scale interval when no nodes have been found)
    FromDate            orderFromDate;
    ToDate              orderToDate;

    boolean             isTimeScaleIntervalModified;

    boolean             isFirstLoad;

    Set                 setLoadIds;

    Counter             progressCounter;
    
    #define.NoOfBars(2)

    #Define.CurrentVersion(1)
    #localmacro.CurrentList
        fromDate,
        toDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLoadIds</Name>
				<Source><![CDATA[
    public boolean addLoadIds(str _id)
    {
        return setLoadIds.add(_id);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLoadIdsFromDS</Name>
				<Source><![CDATA[
    public void addLoadIdsFromDS(Common         _currentRecord,
                                 FormDataSource _formDataSource,
                                 fieldId        _fieldIdLoadId,
                                 fieldId        _fieldIdOrderFromDate   = 0,
                                 fieldId        _fieldIdOrderToDate     = 0)
    {
        Common  common;
        // read from data source if given
        if (_formDataSource)
        {
            common = _formDataSource.getFirst(true);
        }

        if (!common.RecId)
        {
            common = _currentRecord;
        }

        while (common.RecId)
        {
            this.addLoadIds(common.(_fieldIdLoadId));

            if (_fieldIdOrderFromDate && _fieldIdOrderToDate)
            {
                this.adjustOrderDatesInterval(common.(_fieldIdOrderFromDate), common.(_fieldIdOrderToDate));
            }

            common = _formDataSource ?_formDataSource.getNext() : null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustOrderDatesInterval</Name>
				<Source><![CDATA[
    public void adjustOrderDatesInterval(FromDate   _orderFromDate,
                                         ToDate     _orderToDate)
    {
        if (_orderFromDate < this.parmOrderFromDate())
        {
            this.parmOrderFromDate(_orderFromDate);
        }

        if (_orderToDate > this.parmOrderToDate())
        {
            this.parmOrderToDate(_orderToDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcProgressTotal</Name>
				<Source><![CDATA[
    protected int64 calcProgressTotal()
    {
        int64   progressTotal;
        int     daysInterval;
        progressTotal   = this.parmGanttData().parmGanttTableCollection().totalRecordsInAllTables();

        daysInterval    = this.parmGanttData().parmLoadingToDate() - this.parmGanttData().parmLoadingFromDate();

        progressTotal   = progressTotal + this.parmGanttData().parmGanttCalendarCollection().elements() * daysInterval;

        return progressTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReload</Name>
				<Source><![CDATA[
    protected boolean canReload()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUndo</Name>
				<Source><![CDATA[
    public boolean canUndo()
    {
        return this.parmGanttData().canUndo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the description from the current class by calling the static description method on the
    ///    class if there is one.
    /// </summary>
    /// <returns>
    ///    The description from the current class.
    /// </returns>
    /// <remarks>
    ///    This method can be overridden to give a more precise description, for example, when you need some
    ///    internal variables to build the description text.The static <c>RunBase::description </c> method is
    ///    generally used to obtain the description of a class because you do not have to instantiate the
    ///    class to call it. The method speeds up displaying the description in a grid, for example.
    /// </remarks>
    public ClassDescription caption()
    {
        if (inPrompt)
        {
            return this.captionPrompt();
        }
        else
        {
            return this.captionMain();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>captionMain</Name>
				<Source><![CDATA[
    protected ClassDescription captionMain()
    {
        return "@SYS20037";
    }

]]></Source>
			</Method>
			<Method>
				<Name>captionPrintTitle</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the title of the Gantt chart.
    /// </summary>
    /// <returns>
    ///    A <c>ClassDescription</c> value that contains the Gantt chart title.
    /// </returns>
    /// <remarks>
    ///    This method should be overridden in the derived classes in order to provide the correct title to
    ///    the ActiveX.
    /// </remarks>
    public ClassDescription captionPrintTitle()
    {
        return "@SYS20037";
    }

]]></Source>
			</Method>
			<Method>
				<Name>captionPrompt</Name>
				<Source><![CDATA[
    protected ClassDescription captionPrompt()
    {
        return "@SYS20037";
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkConfigurationKeyEnabled</Name>
				<Source><![CDATA[
    public boolean checkConfigurationKeyEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDatesInterval</Name>
				<Source><![CDATA[
    public boolean checkDatesInterval(FromDate  _fromDate,
                                      ToDate    _toDate,
                                      boolean   _showErrorMessage = false)
    {
        if (_fromDate > _toDate     ||
            _toDate   <= dateNull() ||
            _toDate   == naDate())
        {
            if (_showErrorMessage)
            {
                return checkFailed("@SYS74446");
            }
            else
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanAll</Name>
				<Source><![CDATA[
    public void cleanAll()
    {
        this.cleanAllGanttData();

        this.cleanAllGanttVisualization();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanAllGanttData</Name>
				<Source><![CDATA[
    protected void cleanAllGanttData()
    {
        this.parmGanttData().cleanAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanAllGanttVisualization</Name>
				<Source><![CDATA[
    protected void cleanAllGanttVisualization()
    {
        this.parmGanttVisualization().cleanAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        this.saveLast();

        this.parmGanttVisualization().close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttColor</Name>
				<Source><![CDATA[
    protected GanttColor createGanttColor()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttData</Name>
				<Source><![CDATA[
    // Must be overridden
    protected GanttData createGanttData()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttSetup</Name>
				<Source><![CDATA[
    protected GanttSetup createGanttSetup()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttView</Name>
				<Source><![CDATA[
    protected GanttView createGanttView()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGanttVisualization</Name>
				<Source><![CDATA[
    // Must be overridden
    protected GanttVisualization createGanttVisualization()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfologPrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Infolog prefix for the current gantt client.
    /// </summary>
    /// <returns>
    /// A String with the Infolog prefix to use.
    /// </returns>
    public str getInfologPrefix()
    {
        return GanttClient::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    // If you need to do any feature related changes to this method,
    // then copy/paste it to the derived class without calling super()
    public boolean init()
    {
        try
        {
            this.getLast();

            if (!super() || !this.validate())
            {
                throw Exception::Error;
            }

            this.initOrderDates();

            this.initGanttSetup();
            this.initGanttColor();
            this.initGanttView();

            this.initGanttData();
            this.initGanttVisualization();
        }
        catch (Exception::Error)
        {
            throw error("@SYS108473");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGanttColor</Name>
				<Source><![CDATA[
    protected void initGanttColor()
    {
        if (this.parmGanttColor())
        {
            this.parmGanttColor().init();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGanttData</Name>
				<Source><![CDATA[
    protected void initGanttData()
    {
        this.parmGanttData().init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGanttSetup</Name>
				<Source><![CDATA[
    protected void initGanttSetup()
    {
        if (this.parmGanttSetup())
        {
            this.parmGanttSetup().init();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGanttView</Name>
				<Source><![CDATA[
    protected void initGanttView()
    {
        if (this.parmGanttView())
        {
            this.parmGanttView().init();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initGanttVisualization</Name>
				<Source><![CDATA[
    protected void initGanttVisualization()
    {
        this.parmGanttVisualization().init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOrderDates</Name>
				<Source><![CDATA[
    protected void initOrderDates()
    {
        date dateToday = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (this.parmOrderFromDate() == dateMax() && this.parmOrderToDate() == dateNull())
        {
            this.adjustOrderDatesInterval(dateToday, dateToday + this.orderDatesDefaultInterval());
        }
        else if (this.parmOrderFromDate() != dateMax() && this.parmOrderToDate() == dateNull())
        {
            this.adjustOrderDatesInterval(this.parmOrderFromDate(), this.parmOrderFromDate() + this.orderDatesDefaultInterval());
        }
        else if (this.parmOrderFromDate() == dateMax() && this.parmOrderToDate() != dateNull())
        {
            this.adjustOrderDatesInterval(this.parmOrderToDate() - this.orderDatesDefaultInterval(), this.parmOrderToDate());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when the
    ///    <c>SysLastValue.GetLast</c> method is called. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        fromDate    = dateStartMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        toDate      = dateEndMth(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFirstLoad</Name>
				<Source><![CDATA[
    public boolean isFirstLoad()
    {
        return isFirstLoad;
    }

]]></Source>
			</Method>
			<Method>
				<Name>load</Name>
				<Source><![CDATA[
    // If you need to do any feature related changes to this method,
    // then copy/paste it to the derived class without calling super()
    public void load()
    {
        try
        {
            this.progressInitLoading();

            this.loadGanttData();

            this.progressTotal(this.calcProgressTotal());

            this.loadGanttVisualization();

            this.progressFinish();

            this.postLoad();

            isFirstLoad = false;
        }
        catch (Exception::Error)
        {
            this.progressFinish();

            throw error("@SYS108473");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadGanttData</Name>
				<Source><![CDATA[
    protected void loadGanttData()
    {
        this.parmGanttData().load();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadGanttVisualization</Name>
				<Source><![CDATA[
    protected void loadGanttVisualization()
    {
        this.parmGanttVisualization().load();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        setLoadIds                  = new Set(Types::String);

        fromDate                    = dateMax();
        toDate                      = dateNull();

        orderFromDate               = dateMax();
        orderToDate                 = dateNull();

        isTimeScaleIntervalModified = false;

        isFirstLoad                 = true;

        ganttData                   = this.createGanttData();
        ganttVisualization          = this.createGanttVisualization();

        ganttSetup                  = this.createGanttSetup();
        ganttView                   = this.createGanttView();
        ganttColor                  = this.createGanttColor();        
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderDatesDefaultInterval</Name>
				<Source><![CDATA[
    protected int orderDatesDefaultInterval()
    {
        return 7;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttColor</Name>
				<Source><![CDATA[
    public GanttColor parmGanttColor(GanttColor _ganttColor = ganttColor)
    {
        ganttColor = _ganttColor;
        return ganttColor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttData</Name>
				<Source><![CDATA[
    public GanttData parmGanttData(GanttData _ganttData = ganttData)
    {
        ganttData = _ganttData;

        return ganttData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttSetup</Name>
				<Source><![CDATA[
    public GanttSetup parmGanttSetup(GanttSetup _ganttSetup = ganttSetup)
    {
        ganttSetup = _ganttSetup;

        return ganttSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttView</Name>
				<Source><![CDATA[
    public GanttView parmGanttView(GanttView _ganttView = ganttView)
    {
        ganttView = _ganttView;
        return ganttView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttVisualization</Name>
				<Source><![CDATA[
    public GanttVisualization parmGanttVisualization(GanttVisualization _ganttVisualization = ganttVisualization)
    {
        ganttVisualization = _ganttVisualization;
        return ganttVisualization;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsTimeScaleIntervalModified</Name>
				<Source><![CDATA[
    public boolean parmIsTimeScaleIntervalModified(boolean _isTimeScaleIntervalModified = isTimeScaleIntervalModified)
    {
        isTimeScaleIntervalModified = _isTimeScaleIntervalModified;

        return isTimeScaleIntervalModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderFromDate</Name>
				<Source><![CDATA[
    public FromDate parmOrderFromDate(FromDate _orderFromDate = orderFromDate)
    {
        orderFromDate = _orderFromDate;

        return orderFromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrderToDate</Name>
				<Source><![CDATA[
    public ToDate parmOrderToDate(FromDate _orderToDate = orderToDate)
    {
        orderToDate = _orderToDate;

        return orderToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSetLoadIds</Name>
				<Source><![CDATA[
    public Set parmSetLoadIds(Set _setLoadIds = setLoadIds)
    {
        setLoadIds = _setLoadIds;
        return setLoadIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postLoad</Name>
				<Source><![CDATA[
    protected void postLoad()
    {
        this.parmGanttData().postLoad();

        this.parmGanttVisualization().postLoad();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareReload</Name>
				<Source><![CDATA[
    protected void prepareReload()
    {
        this.parmGanttData().prepareReload();

        this.parmGanttVisualization().prepareReload();
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressFinish</Name>
				<Source><![CDATA[
    public void progressFinish()
    {
        if (progress)
        {
            this.progressKill();

            progress        = null;
            progressCounter = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressInit</Name>
				<Source><![CDATA[
    public void progressInit(str        _caption    = "@SYS20037",
                             int64      _total      = 1,
                             Filename   _animation  = #AviUpdate,
                             int        _numOfBars  = #NoOfBars,
                             FormBuildControl _embedded = null)
    {
        if (this.showProgress())
        {
            progressCounter = 0;

            super(_caption, _total, _animation, _numOfBars);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressInitLoading</Name>
				<Source><![CDATA[
    public void progressInitLoading()
    {
        this.progressInit();
        this.progressUpdate("@SYS80596", 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTotal</Name>
				<Source><![CDATA[
    public void progressTotal(int64 _total)
    {
        if (progress)
        {
            progress.setTotal(_total);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    public void progressUpdate(str  _text = '',
                               int  _increment = 1)
    {
        if (progress)
        {
            if (_increment)
            {
                progressCounter = progressCounter + _increment;
                progress.setCount(progressCounter);
            }

            if (!prmisdefault(_text))
            {
                progress.setText(_text);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshVisualization</Name>
				<Source><![CDATA[
    public void refreshVisualization()
    {
        this.parmGanttVisualization().refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reload</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers a reload of the data in the Gantt chart.
    /// </summary>
    /// <returns>
    ///    true if the data was reloaded; otherwise, false.
    /// </returns>
    public boolean reload()
    {
        if (!this.canReload())
        {
            return false;
        }

        this.prepareReload();

        this.cleanAll();

        this.load();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTimeScaleInterval</Name>
				<Source><![CDATA[
    public void resetTimeScaleInterval()
    {
        fromDate = dateMax();
        toDate   = dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    // If you need to do any feature related changes to this method,
    // then copy/paste it to the derived class without calling super()
    public void run()
    {
        setprefix(this.getInfologPrefix());

        this.init();

        this.load();
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    // If you need to do any feature related changes to this method,
    // then copy/paste it to the derived class without calling super()
    public void save()
    {
        this.saveGanttData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveGanttData</Name>
				<Source><![CDATA[
    protected void saveGanttData()
    {
        this.parmGanttData().save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTimeScaleInterval</Name>
				<Source><![CDATA[
    public void setTimeScaleInterval(FromDate _fromDate, ToDate _toDate)
    {
        if (!this.checkDatesInterval(_fromDate, _toDate, true))
        {
            throw Exception::Error;
        }

        this.parmIsTimeScaleIntervalModified(true);

        if (this.extendTimeScaleInterval(_fromDate, _toDate))
        {
            this.refreshVisualization();
        }
        else
        {
            this.parmFromDate(_fromDate);
            this.parmToDate(_toDate);
            this.reload();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendTimeScaleInterval</Name>
				<Source><![CDATA[
    protected boolean extendTimeScaleInterval(FromDate _fromDate, ToDate _toDate)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showProgress</Name>
				<Source><![CDATA[
    protected boolean showProgress()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>undo</Name>
				<Source><![CDATA[
    public void undo()
    {
        this.parmGanttData().undo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean  ret;
        Integer  version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        if (!this.parmGanttData() || !this.parmGanttVisualization())
        {
            return checkFailed(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSave</Name>
				<Source><![CDATA[
    public boolean validateSave()
    {
        return this.parmGanttData().validateSave(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS20037";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>