<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntegrationTaxJurisdictionParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxIntegrationTaxJurisdictionParameters</c> holds the parameters corresponding to the tax jurisdiction that determined by tax engine.
/// </summary>
public final class TaxIntegrationTaxJurisdictionParameters
{
    private Map taxJurisdictionParametersMap;

    public static const str TaxJurisdiction = 'Tax Jurisdiction';
    public static const str ParameterDeductCashDiscBeforeTaxCalculation = 'Deduct Cash Discount Before Tax Calculation';
    public static const str ParameterCustCalcCashDiscOnAmountInclTax = 'Calculate Cash Discount On Amount Including Tax - Customer';
    public static const str ParameterVendCalcCashDiscOnAmountInclTax = 'Calculate Cash Discount On Amount Including Tax - Vendor';
    public static const str ParameterReverseTaxOnCashDisc = 'Reverse Tax On Cash Discount';
    // Currently, it is only used for journal transaction
    public static const str ParameterCalcCashDiscOnAmountInclTax = 'Calculate Cash Discount On Amount Including Tax';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationTaxJurisdictionParameters</c>.
    /// </summary>
    private void new()
    {
        taxJurisdictionParametersMap = new Map(Types::String, Types::AnyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>TaxIntegrationTaxJurisdictionParameters</c> object.
    /// </summary>
    /// <returns>The new <c>TaxIntegrationTaxJurisdictionParameters</c> object.</returns>
    public final static TaxIntegrationTaxJurisdictionParameters construct()
    {
        return new TaxIntegrationTaxJurisdictionParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPackedMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>TaxIntegrationTaxJurisdictionParameters</c> object based on the packed parameters map.
    /// </summary>
    /// <param name = "_parameterMapContainer">The packed parameters map.</param>
    /// <returns>A <c>TaxIntegrationTaxJurisdictionParameters</c> object.</returns>
    public static TaxIntegrationTaxJurisdictionParameters constructFromPackedMap(container _parameterMapContainer)
    {
        TaxIntegrationTaxJurisdictionParameters taxJurisdictionParameters = TaxIntegrationTaxJurisdictionParameters::construct();
        taxJurisdictionParameters.unpack(_parameterMapContainer);

        return taxJurisdictionParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return taxJurisdictionParametersMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _pack)
    {
        taxJurisdictionParametersMap = Map::create(_pack);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parameter.
    /// </summary>
    /// <param name = "_parameterName">The name of the parameter.</param>
    /// <param name = "_value">The value of the parameter.</param>
    public void setParameter(str _parameterName, anytype _value)
    {
        if (_parameterName && _value != null)
        {
            taxJurisdictionParametersMap.insert(_parameterName, _value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the parameter.
    /// </summary>
    /// <param name = "_parameterName">The name of the parameter.</param>
    /// <returns>The value of the parameter.</returns>
    private anytype getParameter(str _parameterName)
    {
        anytype ret;

        if (_parameterName && taxJurisdictionParametersMap.exists(_parameterName))
        {
            ret = taxJurisdictionParametersMap.lookup(_parameterName);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>empty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>SourceDocumentAmountMap</c> class contains any key and value pairs.
    /// </summary>
    /// <returns>
    /// true if the <c>SourceDocumentAmountMap</c> does not contain any elements; otherwise, false.
    /// </returns>
    public boolean empty()
    {
        return taxJurisdictionParametersMap.empty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashDiscDeductedBeforeTaxCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether cash discount is deducted before sales tax calculation.
    /// </summary>
    /// <returns>The boolean indicates whether cash discount is deducted before sales tax calculation or not.</returns>
    public boolean isCashDiscDeductedBeforeTaxCalculation()
    {
        return this.getParameter(TaxIntegrationTaxJurisdictionParameters::ParameterDeductCashDiscBeforeTaxCalculation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashDiscCalculatedOnAmountInclTaxForCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether cash discount is calculated on amount including sales tax for customer.
    /// </summary>
    /// <returns>The boolean indicates whether the cash discount is calculated on amount including sales tax or not for customer.</returns>
    public boolean isCashDiscCalculatedOnAmountInclTaxForCust()
    {
        return this.getParameter(TaxIntegrationTaxJurisdictionParameters::ParameterCustCalcCashDiscOnAmountInclTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashDiscCalculatedOnAmountInclTaxForVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether cash discount is calculated on amount including sales tax parameter for vendor.
    /// </summary>
    /// <returns>The boolean indicates whether the cash discount is calculated on amount including sales tax or not for vendor.</returns>
    public boolean isCashDiscCalculatedOnAmountInclTaxForVend()
    {
        return this.getParameter(TaxIntegrationTaxJurisdictionParameters::ParameterVendCalcCashDiscOnAmountInclTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCashDiscCalculatedOnAmountInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether cash discount is calculated on amount including sales tax parameter for journal.
    /// </summary>
    /// <returns>The boolean indicates whether the cash discount is calculated on amount including sales tax or not for journal.</returns>
    /// <remarks>Currently, it is only used for journal transaction. Do not use it in other transactions</returns>
    public boolean isCashDiscCalculatedOnAmountInclTax()
    {
        return this.getParameter(TaxIntegrationTaxJurisdictionParameters::ParameterCalcCashDiscOnAmountInclTax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReverseTaxOnCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets whether it should reverse sales tax on cash discount.
    /// </summary>
    /// <returns>The boolean indicates whether it should reverse sales tax on cash discount.</returns>
    public boolean shouldReverseTaxOnCashDisc()
    {
        return this.getParameter(TaxIntegrationTaxJurisdictionParameters::ParameterReverseTaxOnCashDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the setting of the parameters is valid.
    /// </summary>
    /// <param name = "_document">The document.</param>
    /// <returns>true, if the setting of the parameters is valid; otherwise, fales</returns>
    public boolean checkParameters(TaxIntegrationDocumentObject _document)
    {
        boolean isValid = true;

        if (this.isCashDiscDeductedBeforeTaxCalculation()
            && (this.isCashDiscCalculatedOnAmountInclTaxForCust() || this.isCashDiscCalculatedOnAmountInclTaxForVend()))
        {
            isValid = false;
            _document.setException(new System.ApplicationException(
                strFmt("@TaxIntegration:ParametersInvalidForTaxJurisdiction", 
                    this.getParameter(TaxIntegrationTaxJurisdictionParameters::TaxJurisdiction),
                    "@TaxIntegration:TaxParametersMutexException")));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    public static container cacheKey(RefTableId _sourceTableId, RefRecId _sourceRecId)
    {
        SysDictTable dictTable = SysDictTable::newTableId(_sourceTableId);

        Common sourceTable = dictTable.makeRecord();

        select firstonly RecVersion from sourceTable
            where sourceTable.RecId == _sourceRecId;

        return [_sourceTableId, _sourceRecId, sourceTable.RecVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCashDiscDeductedBeforeTaxCalc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if cash discount should be calculated before tax calculation.
    /// If tax service is enabled, get from tax service. Otherwise, from tax parameter.
    /// </summary>
    /// <returns>true, if the cash discount should be calculated before tax calculation; otherwise, fales</returns>
    public static boolean shouldCashDiscDeductedBeforeTaxCalc(LedgerJournalTrans _ledgerJournalTrans, TaxParameters _taxParameters = TaxParameters::find())
    {
        boolean isCashDiscDeductedBeforeTaxCalc = _taxParameters.TaxLessCashDisc;
        TaxIntegrationTaxJurisdictionParameters taxIntegrationTaxJurisdictionParameters = TaxIntegrationFacade::getTaxJurisdictionParametersByTable(_ledgerJournalTrans);

        if (taxIntegrationTaxJurisdictionParameters && !taxIntegrationTaxJurisdictionParameters.empty())
        {
            isCashDiscDeductedBeforeTaxCalc = taxIntegrationTaxJurisdictionParameters.isCashDiscDeductedBeforeTaxCalculation();
        }
        return isCashDiscDeductedBeforeTaxCalc;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>