<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailReportUIBuilderBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailReportUIBuilderBase</c> is the parameter UI builder class
/// where org hierarchy control is required.
/// </summary>
class RetailReportUIBuilderBase extends SrsReportDataContractUIBuilder
{
    DialogField                             dialogHierarchyRelationId;
    RetailOrgHierarchyTreeLookup            lookup = new RetailOrgHierarchyTreeLookup();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called by the framework after the parameter dialog is built.
    /// </summary>
    public void postBuild()
    {
        super();

        if (dialogHierarchyRelationId)
        {
            //register the method we want to override
            dialogHierarchyRelationId.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(RetailReportUIBuilderBase, lookupOperatingUnitNum), this);
            dialogHierarchyRelationId.registerOverrideMethod(methodStr(FormStringControl, validate), methodStr(RetailReportUIBuilderBase, validateOperatingUnitNum), this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeOrgHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the org hierarchy control.
    /// </summary>
    /// <param name = "hierarchyRelationId">The hierarchy relationship id for the store to be selected.</param>
    protected void initializeOrgHierarchy(str hierarchyRelationId)
    {
        if (dialogHierarchyRelationId)
        {
            RecId relationshipId = str2Int64(hierarchyRelationId);
            FormBuildStringControl orgStringControl = dialogHierarchyRelationId.control() as FormBuildStringControl;

            str orgName = this.getOrgName(relationshipId);
            if (orgName)
            {
                orgStringControl.text(orgName);
                lookup.selectedNodeId(relationshipId);
            }
            else
            {
                orgStringControl.text('');
                lookup.selectedNodeId(0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupOperatingUnitNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called by the store selection control when lookup button is clicked.
    /// It will display the org hierarchical lookup for stores.
    /// </summary>
    /// <param name = "_formStringControl">The control for which the org hierarchy selection must be shown. </param>
    public void lookupOperatingUnitNum(FormStringControl _formStringControl)
    {
        if (RetailEnableSelectingOrgHierarchyForChannelReportingFlight::instance().isEnabled())
        {
            lookup.instanceLookup(_formStringControl, lookup.selectedNodeId(), HierarchyPurpose::RetailReporting,
                false); // false means "do not hide the hierarchy selector"
        }
        else
        {
            lookup.instanceLookup(_formStringControl, 0, HierarchyPurpose::RetailReporting, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOperatingUnitNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method validates if the selected store value is correct.
    /// </summary>
    /// <param name = "_formStringControl">The string control for store selection.</param>
    /// <returns>The method returns true if value is valid. Else, false is returned.</returns>
    public boolean validateOperatingUnitNum(FormStringControl _formStringControl)
    {
        boolean ret = _formStringControl.validate();
        str orgName = _formStringControl.text();
        RecId relationshipRecId;

        if (ret)
        {
            relationshipRecId = this.getHierarchyRelationshipId(orgName);
            ret = ret && (relationshipRecId != 0);
        }

        if (ret)
        {
            lookup.selectedNodeId(relationshipRecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrgName</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method looks up name of the organization using the hierarchy relationship id.
    /// </summary>
    /// <param name = "hierarchyRelationshipId">The hierarchy relationship id for the organization.</param>
    /// <returns>Name of the organization.</returns>
    protected str getOrgName(RecId hierarchyRelationshipId)
    {
        OMInternalOrganization internalOrganization;
        OMHierarchyRelationship hierarchyRelationship;

        select firstonly Name from internalOrganization
                join hierarchyRelationship
                where hierarchyRelationship.RecId == hierarchyRelationshipId &&
                    hierarchyRelationship.ChildOrganization == internalOrganization.RecId;

        return internalOrganization.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHierarchyRelationshipId</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method looks up the hierarchy relationship id using the name of the
    /// organization.
    /// </summary>
    /// <param name = "orgName">The name of the organization.</param>
    /// <returns>The hierarchy relationship id for the organization.</returns>
    protected RecId getHierarchyRelationshipId(str orgName)
    {
        OMInternalOrganization internalOrganization;
        OMHierarchyRelationship hierarchyRelationship;

        if (orgName)
        {
            select firstonly RecId from hierarchyRelationship
                exists join internalOrganization
                where internalOrganization.Name == orgName &&
                    hierarchyRelationship.ChildOrganization == internalOrganization.RecId;
        }

        return hierarchyRelationship.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>