<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCertificatePaymSumDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxWithholdCertificatePaymSumDP</c> class is the base Report Data Provider class for the subreport of tax withholding certificate SSRS report.
/// </summary>
/// <remarks>
/// This is the RDP class for the subreport of tax withholding certificate SSRS report..
/// </remarks>
[
    SRSReportParameterAttribute(classStr(TaxWithholdCertificateSubReportContract))
]
public class TaxWithholdCertificatePaymSumDP extends SRSReportDataProviderBase
{
    TaxWithholdCertificatePaymSumTmp        taxWithholdCertificatePaymSumTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPaymentSummary</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic for certificate.
    /// </summary>
    /// <param name="_certificateNumber">
    /// The report parameter certificate number from report data contract.
    /// </param>
    /// <param name="_componentGroup">
    /// The report parameter component group from report data contract.
    /// </param>
    /// <param name="_taxWithholdType">
    /// The report parameter TaxWithholdType from report data contract.
    /// </param>
    /// <param name="_accountNum">
    /// The report parameter account number from report data contract.
    /// </param>
    /// <param name="_custVendACType">
    /// The report parameter CustVendACType from report data contract.
    /// </param>
    /// <param name="_fromDate">
    /// The report parameter FromDate from report data contract.
    /// </param>
    /// <param name="_toDate">
    /// The report parameter ToDate from report data contract.
    /// </param>
    /// <param name="_tanNumber">
    /// The report parameter TAN number from report data contract.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void getPaymentSummary(
        TaxWithholdCertificateNumber_IN _certificateNumber,
        TaxWithholdComponentGroup_IN    _componentGroup,
        TaxWithholdType_IN              _taxWithholdType,
        AccountNum                      _accountNum,
        CustVendACType                  _custVendACType,
        TransDate                       _fromDate,
        TransDate                       _toDate,
        TaxWithholdTAN_IN               _tanNumber)
    {
        TaxWithholdSettleTrans_IN           taxWithholdSettleTrans;
        TaxWithholdSettleTrans_IN           taxWithholdSettleTransAdjust;
        TaxWithholdComponentGroupTable_IN   taxWithholdComponentGroup;
        TaxWithholdComponentGroupRecId_IN   componentGroupRecId;
        TaxWithholdSection_IN               sectionCode;
        TaxWithholdRegNumberRecId_IN        tanNumberRecId;

        Map         paymentSumMap = new Map(Types::Date, Types::Real);
        MapIterator mi;

        container   origVoucherCon;
        container   conVoucherTransdate;
        int         counterOrigVoucherCon;
        Amount      totalAmount;

        taxWithholdComponentGroup = TaxWithholdComponentGroupTable_IN::findByComponentGroup(_taxWithholdType, _componentGroup);

        componentGroupRecId = taxWithholdComponentGroup.RecId;
        sectionCode         = taxWithholdComponentGroup.SectionCode;
        tanNumberRecId      = TaxWithholdRegNumbers_IN::findByTaxRegistrationNumber(_tanNumber, TaxRegistrationType_IN::Company).RecId;

        totalAmount = 0;

        while select sum(Amount) from taxWithholdSettleTrans
            group by OrigVoucher, TransDate
            where   taxWithholdSettleTrans.TaxWithholdComponentGroup    == componentGroupRecId
                &&  taxWithholdSettleTrans.TaxWithholdRegNumber         == tanNumberRecId
                &&  taxWithholdSettleTrans.CertificateNumber            == _certificateNumber
                &&  taxWithholdSettleTrans.CustVendAccount              == _accountNum
                &&  taxWithholdSettleTrans.TaxType                      == _taxWithholdType
                &&  taxWithholdSettleTrans.SourceTransVoucher           == ''
                &&  taxWithholdSettleTrans.SourceTransDate              == dateNull()
                &&  taxWithholdSettleTrans.TransDate                    >= _fromDate
                &&  taxWithholdSettleTrans.TransDate                    <= _toDate
        {
            totalAmount       = 0;
            conVoucherTransdate = [taxWithholdSettleTrans.OrigVoucher, taxWithholdSettleTrans.TransDate];
            counterOrigVoucherCon++;
            origVoucherCon  = conPoke(origVoucherCon, counterOrigVoucherCon, conVoucherTransdate);
            totalAmount       += taxWithholdSettleTrans.Amount;

            select sum(Amount) from taxWithholdSettleTransAdjust
                where   taxWithholdSettleTransAdjust.SourceTransDate            == taxWithholdSettleTrans.TransDate
                    &&  taxWithholdSettleTransAdjust.SourceTransVoucher         == taxWithholdSettleTrans.OrigVoucher
                    &&  taxWithholdSettleTransAdjust.TaxWithholdComponentGroup  == componentGroupRecId;
            totalAmount   += taxWithholdSettleTransAdjust.Amount;

            if (paymentSumMap.exists(taxWithholdSettleTrans.TransDate))
            {
                paymentSumMap.insert(taxWithholdSettleTrans.TransDate, paymentSumMap.lookup(taxWithholdSettleTrans.TransDate) + totalAmount);
            }
            else
            {
                paymentSumMap.insert(taxWithholdSettleTrans.TransDate, totalAmount);
            }
        }

        while select sum(Amount) from taxWithholdSettleTrans
            group by SourceTransVoucher, SourceTransDate
            where   taxWithholdSettleTrans.TaxWithholdComponentGroup    == componentGroupRecId
                &&  taxWithholdSettleTrans.TaxWithholdRegNumber         == tanNumberRecId
                &&  taxWithholdSettleTrans.CertificateNumber            == _certificateNumber
                &&  taxWithholdSettleTrans.CustVendAccount              == _accountNum
                &&  taxWithholdSettleTrans.TaxType                      == _taxWithholdType
                &&  taxWithholdSettleTrans.SourceTransVoucher           != ''
                &&  taxWithholdSettleTrans.SourceTransDate              != dateNull()
                &&  taxWithholdSettleTrans.TransDate                    >= _fromDate
                &&  taxWithholdSettleTrans.TransDate                    <= _toDate
        if (!conFind(origVoucherCon, [taxWithholdSettleTrans.SourceTransVoucher, taxWithholdSettleTrans.SourceTransDate]))
        {
            totalAmount       = 0;
            conVoucherTransdate = [taxWithholdSettleTrans.SourceTransVoucher, taxWithholdSettleTrans.SourceTransDate];
            counterOrigVoucherCon++;
            origVoucherCon  = conPoke(origVoucherCon, counterOrigVoucherCon, conVoucherTransdate);
            totalAmount       += taxWithholdSettleTrans.Amount;

            if (paymentSumMap.exists(taxWithholdSettleTrans.SourceTransDate))
            {
                paymentSumMap.insert(taxWithholdSettleTrans.SourceTransDate, paymentSumMap.lookup(taxWithholdSettleTrans.SourceTransDate) + totalAmount);
            }
            else
            {
                paymentSumMap.insert(taxWithholdSettleTrans.SourceTransDate, totalAmount);
            }
        }
        //insert the report temp table
        mi = new MapIterator(paymentSumMap);
        while (mi.more())
        {
            taxWithholdCertificatePaymSumTmp.clear();
            taxWithholdCertificatePaymSumTmp.PaymentDate        = mi.key();
            taxWithholdCertificatePaymSumTmp.TransAmount        = mi.value();
            taxWithholdCertificatePaymSumTmp.SectionCode        = sectionCode;
            taxWithholdCertificatePaymSumTmp.insert();
            mi.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdCertificatePaymSumTmp</Name>
				<Source><![CDATA[

    /// <summary>
    /// Retrieves data from the <c>TaxWithholdCertificatePaymSumTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>TaxWithholdCertificatePaymSumTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TaxWithholdCertificatePaymSumTmp))
    , Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdCertificatePaymSumTmp getTaxWithholdCertificatePaymSumTmp()
    {
        return taxWithholdCertificatePaymSumTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[

    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic.
    /// </remarks>
    public void processReport()
    {
        TaxWithholdCertificateSubReportContract contract = this.parmDataContract();

        //Duplicate certificate
        this.getPaymentSummary(
            contract.parmCertificateNumber(),
            contract.parmComponentGroup(),
            contract.parmTaxWithholdType(),
            contract.parmAccountNum(),
            contract.parmCustVendACType(),
            contract.parmFromDate(),
            contract.parmToDate(),
            contract.parmTanNumber());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
