<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQReSendJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQReSendJournalPost extends FormletterJournalPost
{
    VendRFQJour             vendRFQJour;
    VendRFQTrans            vendRFQTrans;
    PurchRFQTotals          purchTotals;
    PurchRFQTable           purchRFQTable;
    PurchRFQLine            purchRFQLine;
    PurchRFQReplyLine       purchRFQReplyLine;

    PurchRFQParmTable       purchRFQParmTable;
    PurchCalcTax            purchCalcTax;
    PurchRFQTotals          purchRFQTotals;
    PurchRFQCaseTable       purchRFQCaseTable;
    PurchRFQParmUpdate      purchRFQParmUpdate;

    private PurchRFQInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a record to the <c>InventReportDimHistory</c> table.
    /// </summary>
    /// <param name="_journalline">
    /// A journal line record.
    /// </param>
    protected void addToInventReportDimHistory(Common _journalline)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostLedger</Name>
				<Source><![CDATA[
    protected boolean canPostLedger()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostTax</Name>
				<Source><![CDATA[
    protected boolean canPostTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    DocumentStatus documentStatus()
    {
        return DocumentStatus::RFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a voucher number.
    /// </summary>
    /// <returns>
    /// A voucher number.
    /// </returns>
    protected Num getVoucher()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();

        select firstonly purchRFQParmUpdate where purchRFQParmUpdate.ParmId == purchRFQParmTable.ParmId;

        select firstonly forupdate purchRFQTable where purchRFQTable.rfqId == vendRFQJour.rfqId;

        purchRFQTotals = PurchRFQTotals::construct(purchRFQTable,
                                                   purchRFQParmUpdate.SpecQty);
        purchRFQTotals.calc();
        this.tax(purchRFQTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>Markup</c> object.
    /// </summary>
    protected void  initMarkup()
    {
        markup = new Markup(purchRFQTable.CurrencyCode);
        markup.setTax(this.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    protected void initRelatedLineTables()
    {
        select firstonly forupdate purchRFQLine
            where purchRFQLine.rfqId   == vendRFQTrans.rfqId
               && purchRFQLine.LineNum == vendRFQTrans.LineNum;

        purchRFQReplyLine = PurchRFQReplyLine::findRFQLine(purchRFQLine.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the current journal line record.
    /// </summary>
    /// <param name="_journalLine">
    /// A journal line record.
    /// </param>
    /// <returns>
    /// A journal line record.
    /// </returns>
    protected Common journalLine(Common _journalLine = vendRFQTrans)
    {
        vendRFQTrans = _journalLine as VendRFQTrans;
        return vendRFQTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected tableId journalLineTableId()
    {
        return tableNum(VendRFQTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineType</Name>
				<Source><![CDATA[
    protected VendRFQTrans journalLineType()
    {
        return vendRFQTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = vendRFQJour)
    {
        vendRFQJour = _journalTable as VendRFQJour;
        return vendRFQJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = purchRFQParmTable)
    {
        purchRFQParmTable = _parmTable as PurchRFQParmTable;

        return purchRFQParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts a journal line to the <c>VendRFQTrans</c> table.
    /// </summary>
    protected void postMarkupLine()
    {
        markup.postJournal(purchRFQReplyLine.PurchQty,
                           purchRFQReplyLine.LineAmount,
                           purchRFQLine,
                           purchRFQLine.DefaultDimension,
                           vendRFQTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the journal header to the <c>VendRFQJour</c> table.
    /// </summary>
    /// <param name="_purchRFQTableMarkup">
    /// A <c>PurchRFQTable</c> record buffer.
    /// </param>
    protected void postMarkupOnJour(PurchRFQTable  _purchRFQTableMarkup)
    {
        markup.postJournal(1,
                           purchRFQTotals.totalOrderBalance(_purchRFQTableMarkup.RecId),
                           _purchRFQTableMarkup,
                           _purchRFQTableMarkup.DefaultDimension,
                           vendRFQJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    protected void  postMarkupTable()
    {
        QueryRun                queryRun;
        PurchRFQTable           purchRFQTableMarkup;
        PurchRFQParmSubTable    purchRFQParmSubTable;
        queryRun = new QueryRun(purchRFQParmTable.queryPurchRFQParmSubTable());
        while (queryRun.next())
        {
            purchRFQTableMarkup = null;
            if (queryRun.changed(tableNum(PurchRFQParmSubTable)))
            {
                purchRFQParmSubTable = queryRun.get(tableNum(PurchRFQParmSubTable));

                purchRFQTableMarkup = purchRFQParmSubTable.purchRFQTable();
            }

            if (!purchRFQTableMarkup)
                continue;

            this.postMarkupOnJour(purchRFQTableMarkup);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax should be posted on update.
    /// </summary>
    /// <returns>
    /// true if tax should be posted on update; otherwise, false.
    /// </returns>
    protected boolean postTaxOnUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source line record for the current journal line.
    /// </summary>
    /// <returns>
    /// A source line record.
    /// </returns>
    protected Common sourceLine()
    {
        return purchRFQLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source header record for the journal header.
    /// </summary>
    /// <returns>
    /// A source header record.
    /// </returns>
    protected Common sourceTable()
    {
        return purchRFQTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradeCalcTax</Name>
				<Source><![CDATA[
    protected Object tradeCalcTax()
    {
        return PurchCalcTax::construct(this.parmJournalTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>TransTxt</c> object.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TransTxt</c> object.
    /// </returns>
    protected TransTxt transactionLogTxt()
    {
        return "@SYS106426";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    protected TransactionLogType  transactionLogType()
    {
        return TransactionLogType::PurchRFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction date.
    /// </summary>
    /// <returns>
    /// A transaction date.
    /// </returns>
    protected TransDate updateDate()
    {
        return vendRFQJour.rfqDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source table for the journal header.
    /// </summary>
    protected void updateSourceTable()
    {
        super();

        using (var activityContextUpdateSourceTable = this.instrumentationLogger().journalInstrumentationActivities().reSendJournalPostUpdateSourceTable(purchRFQTable))
        {
            if (PurchRFQCaseAutoCreateUpdateHeaderStatusPerLineFlight::instance().isEnabled())
            {
                purchRFQTable = PurchRFQTable::find(purchRFQTable.RFQId, true);
                purchRFQTable.updateStatus();
            }
            PurchRFQReplyTable::find(purchRFQTable.RFQId, true).updateReplyProgressStatus(PurchRFQReplyProgressStatus::VendorEditing);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source line for the current journal line.
    /// </summary>
    protected void updateSourceLine()
    {
        using (var activityContextUpdateSourceLine = this.instrumentationLogger().journalInstrumentationActivities().reSendJournalPostUpdateSourceLine(purchRFQLine))
        {
            purchRFQLine.ReasonRef = vendRFQTrans.ReasonRef;
            purchRFQLine.Status = PurchRFQStatus::Sent;
            purchRFQLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQReSendJournalPost construct()
    {
        return new PurchRFQReSendJournalPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates class <c>PurchRFQInstrumentationLogger</c> object.
    /// </summary>
    /// <returns>
    /// Class <c>PurchRFQInstrumentationLogger</c> object.
    /// </returns>
    private PurchRFQInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = PurchRFQInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>