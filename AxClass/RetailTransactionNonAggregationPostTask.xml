<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionNonAggregationPostTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailTransactionNonAggregationPostTask</c> performs non-aggregate posting.
/// </summary>
[SysObsolete('This class is obsolete.', true, 20\11\2023)]
class RetailTransactionNonAggregationPostTask extends RunBaseBatch implements BatchRetryable
{
    RetailStatementId  statementId;
    boolean finalizeOrder;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        statementId,
        finalizeOrder
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStatementId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set/Get statementId parameter.
    /// </summary>
    /// <param name = "_statementId">Statement Id</param>
    /// <returns>Statement Id</returns>
    public RetailStatementId parmStatementId(RetailStatementId _statementId = statementId)
    {
        statementId = _statementId;
        return statementId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinalizeOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set/Get finalizeOrder parameter.
    /// </summary>
    /// <param name = "finalizeOrder">
    ///     A boolean value indicate if the Sales Order is finalized.
    ///     A finalized order will be invoiced immidiately after it is created, in addition an exception will be thrown when error occurs.
    /// </param>
    /// <returns>Finalize Order flag</returns>
    public boolean parmFinalizeOrder(boolean _finalizeOrder = finalizeOrder)
    {
        finalizeOrder = _finalizeOrder;
        return finalizeOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process non-aggregation transaction.
    /// </summary>
    public void run()
    {
        RetailTransactionSalesTrans salesLine;

        RetailStatementPostingLogger::postNonAggregatedTransactionStart(this.parmStatementId());

        RetailTransactionTable transactionTable;
        RetailTransactionPost transactionPost = RetailTransactionPost::construct(finalizeOrder, this.parmStatementId());

        BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();

        RetailStatementPost retailStatementPost = null;

        RetailStatementTable statementTable = RetailStatementTable::find(this.parmStatementId());

        if (this.parmFinalizeOrder() && this.parmStatementId())
        {
            // create statement posting task instance if the task is to finalize a statement.
            retailStatementPost = new RetailStatementPost();
            retailStatementPost.parmStatementId(this.parmStatementId());
            if (batchHeader)
            {
                retailStatementPost.parmInBatch(true);
                retailStatementPost.batchInfo().parmCaption(strfmt("@RET5022", statementTable.storeId, statementTable.statementId));
                batchHeader.addRuntimeTask(retailStatementPost, BatchHeader::getCurrentBatchTask().RecId);
            }
        }

        // Process non-aggregated transactions.
        while select transactionTable
            where   transactionTable.type == RetailTransactionType::Sales
                &&  (!transactionTable.invoiceId)
                &&  (transactionTable.entryStatus == RetailEntryStatus::None || (finalizeOrder && transactionTable.entryStatus == RetailEntryStatus::PendingInvoice))
                &&  transactionTable.statementId    == statementTable.statementId
                &&  transactionTable.store          == statementTable.storeId
            join salesLine
            where   salesLine.store         == transactionTable.store
                &&  salesLine.terminalId    == transactionTable.terminal
                &&  salesLine.transactionId == transactionTable.transactionId
        {
            if (finalizeOrder && transactionTable.saleIsReturnSale)
            {
                RetailTransactionSalesTrans returnSalesTrans;
                select firstonly returnTransactionId, returnStore, returnTerminalId, returnLineNum
                    from returnSalesTrans
                    where returnSalesTrans.transactionId == transactionTable.transactionId
                        && returnSalesTrans.Channel == transactionTable.Channel
                        && returnSalesTrans.returnTransactionId
                        && returnSalesTrans.returnStore
                        && returnSalesTrans.returnTerminalId
                        && returnSalesTrans.returnLineNum;
                if (returnSalesTrans.returnTransactionId && returnSalesTrans.returnStore && returnSalesTrans.returnTerminalId && returnSalesTrans.returnLineNum)
                {
                    RetailTransactionTable originalTransactionTable;
                    select firstonly originalTransactionTable
                    index hint transactionIdx
                    where originalTransactionTable.transactionId == returnSalesTrans.returnTransactionId
                        && originalTransactionTable.store == returnSalesTrans.returnStore
                        && originalTransactionTable.terminal == returnSalesTrans.returnTerminalId;

                    // If the original transaction is not invoiced, invoice it only if skip aggregation is true for that transaction
                    // or aggregate before posting flag is false. If the transaction is supposed to invoice as part of an aggregation, do not invoice it here.

                    RetailEodStatementConfigurationAccessor statementTableAccessor = RetailEodStatementConfigurationAccessor::construct(statementTable);
                    boolean aggregateBeforePosting = statementTableAccessor.isAggregateBeforePosting();
                    if (!originalTransactionTable.invoiceId && (originalTransactionTable.SkipAggregation || !aggregateBeforePosting))
                    {
                        transactionPost.post(originalTransactionTable, batchHeader, retailStatementPost, 0);
                    }
                }
            }

            if (transactionPost.post(transactionTable, batchHeader, retailStatementPost, RetailParameters::find().maxSalesOrdersPerTask))
            {
                transactionPost = RetailTransactionPost::construct(finalizeOrder, this.parmStatementId());
            }
        }

        transactionPost.postBatch(batchHeader, retailStatementPost);

        RetailStatementPostingLogger::postNonAggregatedTransactionFinish(this.parmStatementId());

        if (batchHeader)
        {
            RetailStatementBatchHeaderHelper::save(batchHeader, BatchHeader::getCurrentBatchTask().BatchJobId, this.parmStatementId());
        }
        else if (retailStatementPost)
        {
            retailStatementPost.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false (e.g., the class is not designed for execution of the operation in a new session).
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>