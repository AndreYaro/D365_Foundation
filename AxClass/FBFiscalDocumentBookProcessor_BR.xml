<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBFiscalDocumentBookProcessor_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Starts the bookkeeping process. Creates the tax assessments, determines the type of the SPED record and books the fiscal documents.
/// </summary>
public class FBFiscalDocumentBookProcessor_BR
{
    FBBookingPeriod_BR                      fbBookingPeriod;
    FiscalEstablishment_BR                  fiscalEstablishment;

    boolean                                 bookFiscalDocuments;
    private NoYesId                         enableDocumentAdjustment;
    RunbaseProgress                         runbaseProgress;

    FBPeriodFrom_BR periodFrom;
    FBPeriodTo_BR periodTo;

    internal const str Delimeter = ',';

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bookApplicableFiscalDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books applicable fiscal documents.
    /// </summary>
    [Hookable(false)]
    protected void bookApplicableFiscalDocuments()
    {
        Query queryCount = this.initQueryApplicableFiscalDocuments();
        QueryBuildDataSource qbds = queryCount.dataSourceTable(tableNum(FiscalDocument_BR));
        qbds.addSelectionField(fieldNum(FiscalDocument_BR, RecId), SelectionField::Count);
        QueryRun qrCount = new QueryRun(queryCount);

        if (qrCount.next())
        {
            FiscalDocument_BR fiscalDocument = qrCount.get(tableNum(FiscalDocument_BR));

            this.getRunBaseProgress().setTotal(fiscalDocument.RecId);
            this.getRunBaseProgress().setCaption("@SYS4001783");
            this.getRunBaseProgress().update(true);

            QueryRun qr = new QueryRun(this.initQueryApplicableFiscalDocuments());

            while (qr.next())
            {
                fiscalDocument = qr.get(tableNum(FiscalDocument_BR));

                Common fbBookingPeriodFiscalDocument = this.initBookingFiscalDocument(fiscalDocument);

                fbBookingPeriodFiscalDocument.insert();

                this.getRunBaseProgress().incCount(1);
                this.getRunBaseProgress().setText(strFmt("@SYS4001677", 
                                                            fiscalDocument.FiscalDocumentSeries,
                                                            fiscalDocument.FiscalDocumentNumber));
                this.getRunBaseProgress().update(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookApplicableInventoryAdjustments</Name>
				<Source><![CDATA[
    private void bookApplicableInventoryAdjustments()
    {
        FBBookingPeriodInventTrans_BR fBBookingPeriodInventTrans_BR;
        FiscalEstablishment_BR fiscalEstablishment_BR;
        FiscalEstablishmentInventSite_BR fiscalEstablishmentInventSite_BR;
        FBBookingPeriodInventTrans_BR notExistsfBBookingPeriodInventTrans_BR;
        InventTrans inventTrans;
        InventDim inventDim;
        InventTransOrigin inventTransOrigin;

        while select inventTrans
            join inventTransOrigin
            where inventTrans.inventTransOrigin == inventTransOrigin.RecId
                && (inventTrans.DatePhysical >= 01\01\2019
                    && inventTrans.DatePhysical <= fbBookingPeriod.periodTo())
                && inventTransOrigin.ReferenceCategory == InventTransType::InventLossProfit
            exists join inventDim
                where inventDim.inventDimId == inventTrans.inventDimId
            exists join fiscalEstablishmentInventSite_BR
                where fiscalEstablishmentInventSite_BR.InventSite == inventDim.InventSiteId
            exists join fiscalEstablishment_BR
                where fiscalEstablishment_BR.RecId == fiscalEstablishmentInventSite_BR.FiscalEstablishment_BR
                    && fiscalEstablishment_BR.FiscalEstablishmentId == fbBookingPeriod.FiscalEstablishmentId
            notexists join notExistsfBBookingPeriodInventTrans_BR
                where notExistsfBBookingPeriodInventTrans_BR.InventTransId == inventTransOrigin.InventTransId
        {
            ttsbegin;
            fBBookingPeriodInventTrans_BR.InventTransId = inventTransOrigin.InventTransId;
            fBBookingPeriodInventTrans_BR.FBBookingPeriod_BR = fbBookingPeriod.RecId;
            fBBookingPeriodInventTrans_BR.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookApplicableProduction_ProdTable</Name>
				<Source><![CDATA[
    private void bookApplicableProduction_ProdTable()
    {
        InventDim                           inventDim;
        FiscalEstablishmentInventSite_BR    fiscalEstablishmentInventSite;
        FBBookingPeriodProdTable_BR         fbBookingPeriodProdTable;
        FBBookingPeriodProdTable_BR         nonExistingFBBookingPeriodProdTable;
        FBProdTableMinStartDateView_BR      fbProdTableView;
        ProdTableJour                       prodTableJour;
        
        RecId bookingPeriodRecId = fbBookingPeriod.RecId;

        this.getRunBaseProgress().setCaption("@FiscalBooks_SpedFiscal:FBFiscalDocumentBookProcessor_ProgressProdOrders");

        
        while select ProdTableRecId from fbProdTableView
            exists join inventDim
                where fbProdTableView.InventDimId == inventDim.InventDimId
            exists join fiscalEstablishmentInventSite
                where inventDim.InventSiteId == fiscalEstablishmentInventSite.InventSite
                    && fiscalEstablishmentInventSite.FiscalEstablishment_BR == fiscalEstablishment.RecId
                    && fbProdTableView.MinStartDate <= periodTo
                    && (fbProdTableView.RealDate >= periodFrom || fbProdTableView.ProdStatus != ProdStatus::Completed)
            exists join prodTableJour
                where prodTableJour.ProdId == fbProdTableView.ProdId
                    && (prodTableJour.JournalType == ProdJourType::Release || prodTableJour.JournalType == ProdJourType::Receipt)
                    && prodTableJour.TransDate >= periodFrom
                    && prodTableJour.TransDate <= periodTo
            notExists join nonExistingFBBookingPeriodProdTable
                where nonExistingFBBookingPeriodProdTable.FBBookingPeriod_BR == fbBookingPeriod.RecId
                    && nonExistingFBBookingPeriodProdTable.ProdTable == fbProdTableView.ProdTableRecId
        {
            ttsbegin;
            fbBookingPeriodProdTable.clear();
            fbBookingPeriodProdTable.FBBookingPeriod_BR = bookingPeriodRecId;
            fbBookingPeriodProdTable.ProdTable = fbProdTableView.ProdTableRecId;
            fbBookingPeriodProdTable.FBInventoryAdjustmentSource_BR = this.getProductionSource(fbProdTableView.ProdTableRecId);

            if (fbBookingPeriodProdTable.FBInventoryAdjustmentSource_BR == FBInventoryAdjustmentSource_BR::K260K265)
            {
                fbBookingPeriodProdTable.IsReworkOrder = NoYes::Yes;
            }

            fbBookingPeriodProdTable.insert();
            ttscommit;
        }

        this.getRunBaseProgress().kill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductionSource</Name>
				<Source><![CDATA[
    private FBInventoryAdjustmentSource_BR getProductionSource(RecId _productionRecId)
    {
        ProdTable prodTable;

        select firstonly prodTable
            where prodTable.RecId == _productionRecId;

        if (prodTable.PmfReworkBatch)
        {
            return FBInventoryAdjustmentSource_BR::K260K265;
        }

        PmfProdCoBy pmfProdCoBy;

        select firstonly pmfProdCoBy
            where pmfProdCoBy.ProdId == prodTable.ProdId;

        if (pmfProdCoBy.RecId)
        {
            return FBInventoryAdjustmentSource_BR::K291;
        }

        return FBInventoryAdjustmentSource_BR::k230k235;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookApplicableZReports</Name>
				<Source><![CDATA[
    private void bookApplicableZReports()
    {
        RetailZReport_BR                        retailZReport;
        FBBookingPeriodFiscalDocument_BR        fbBookingPeriodFiscalDocument;
        FBZReportTaxSummarizer_BR               taxSummarizer;
        boolean                                 hasNewRetailZReports;
        FBFiscalPrinterDailyReportProcessor_BR  processor;
        int                                     newZReports;
        RetailZReportValidation_BR              retailZReportValidation;

        Query                   query;
        QueryBuildDataSource    zReportDS, bookingPeriodDS;
        QueryRun                queryRun;

        query           = new Query();
        zReportDS       = query.addDataSource(tableNum(RetailZReport_BR));
        zReportDS.addRange(fieldNum(RetailZReport_BR, FiscalEstablishment)).value(this.fiscalEstablishmentId());
        zReportDS.addRange(fieldNum(RetailZReport_BR, AccountingDate)).value(SysQuery::range(fbBookingPeriod.periodFrom(), fbBookingPeriod.periodTo()));

        bookingPeriodDS = zReportDS.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        bookingPeriodDS.joinMode(JoinMode::NoExistsJoin);
        bookingPeriodDS.relations(true);
        
        queryRun = new queryRun(query);
        newZReports = SysQuery::countTotal(queryRun);

        if (newZReports > 0)
        {
            this.getRunBaseProgress().reset();
            this.getRunBaseProgress().setTotal(newZReports);
            this.getRunBaseProgress().setCaption("@SYS4006960");
            this.getRunBaseProgress().update(true);
        }

        retailZReportValidation = new RetailZReportValidation_BR();
        
        while (queryRun.next())
        {
            retailZReport = queryRun.get(tableNum(RetailZReport_BR));

            retailZReportValidation.parmRetailZReport(retailZReport);
            if (!retailZReportValidation.validateAll())
            {
                continue;
            }

            hasNewRetailZReports = true;

            taxSummarizer = FBZReportTaxSummarizer_BR::construct(retailZReport);

            fbBookingPeriodFiscalDocument.FBBookingPeriod_BR    = fbBookingPeriod.RecId;
            fbBookingPeriodFiscalDocument.RetailZReport_BR      = retailZReport.RecId;
            fbBookingPeriodFiscalDocument.FiscalSituation       = FBFiscalDocumentSituation_BR::Regular;
            fbBookingPeriodFiscalDocument.HasIcms               = taxSummarizer.existsTaxType(TaxType_BR::ICMS);
            fbBookingPeriodFiscalDocument.HasIcmsSt             = NoYes::No;
            fbBookingPeriodFiscalDocument.HasIcmsDiff           = NoYes::No;
            fbBookingPeriodFiscalDocument.HasIpi                = NoYes::No;
            fbBookingPeriodFiscalDocument.HasPis                = taxSummarizer.existsTaxType(TaxType_BR::PIS);
            fbBookingPeriodFiscalDocument.HasIss                = NoYes::No;
            fbBookingPeriodFiscalDocument.HasCofins             = taxSummarizer.existsTaxType(TaxType_BR::COFINS);
            fbBookingPeriodFiscalDocument.insert();

            ttsBegin;
            fbBookingPeriodFiscalDocument.SpedFiscalRecord      = '';
            fbBookingPeriodFiscalDocument.SpedContribRecord     = FiscalBooksConstants_BR::SpedRecord_C405;
            fbBookingPeriodFiscalDocument.write();
            ttsCommit;

            this.updateFiscalPrinterDailyReportNumber(retailZReport);

            this.getRunBaseProgress().incCount(1);
            this.getRunBaseProgress().setText("@SYS4110534" + ':' + strFmt('%1', retailZReport.FiscalPrinterSerialNumber));
            this.getRunBaseProgress().update(true);
        }

        if (hasNewRetailZReports)
        {
            processor = new FBFiscalPrinterDailyReportProcessor_BR();
            processor.reorderFiscalPrinterDailyReportsBP(fbBookingPeriod);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookNonFiscalOperation</Name>
				<Source><![CDATA[
    private void bookNonFiscalOperation()
    {
        FBNonFiscalOperation_BR fbNonFiscalOperation;

        ttsbegin;

        while select forupdate fbNonFiscalOperation
            where  fbNonFiscalOperation.FiscalEstablishment_BR == fiscalEstablishment.RecId
                && fbNonFiscalOperation.TransDate >= fbBookingPeriod.periodFrom()
                && fbNonFiscalOperation.TransDate <= fbBookingPeriod.periodTo()
                && !fbNonFiscalOperation.fbBookingPeriod_BR
        {
            fbNonFiscalOperation.fbBookingPeriod_BR = fbBookingPeriod.RecId;
            fbNonFiscalOperation.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookTaxWithholdTrans</Name>
				<Source><![CDATA[
    private void bookTaxWithholdTrans()
    {
        FBTaxWithholdTrans_BR   fbTaxWithholdTrans;
        FiscalOrganization_BR   rootFiscalOrganization;

        ttsbegin;

        changecompany (fbBookingPeriod.FiscalEstablishmentDataArea)
        {
            while select forupdate fbTaxWithholdTrans
                where  fbTaxWithholdTrans.FiscalEstablishment == this.fiscalEstablishmentId()
                    && fbTaxWithholdTrans.TransDate >= fbBookingPeriod.periodFrom()
                    && fbTaxWithholdTrans.TransDate <= fbBookingPeriod.periodTo()
                    && fbTaxWithholdTrans.fbBookingPeriod_BR == 0
                    && fbTaxWithholdTrans.Version >= FBTaxWithholdTransVersion_BR::v1
            {
                // Tax configuration could be wrong previously
                if (fbTaxWithholdTrans.PisWithholdAmount    == 0 ||
                        fbTaxWithholdTrans.CofinsWithholdAmount == 0)
                {
                    fbTaxWithholdTrans.PisWithholdAmount        = FBTaxWithholdTransProcessor_BR::getTaxWithholdAmountByTaxType(fbTaxWithholdTrans.VoucherId, fbTaxWithholdTrans.InvoiceNumber, fbTaxWithholdTrans.TransDate, TaxWithholdType_BR::PIS);
                    fbTaxWithholdTrans.CofinsWithholdAmount     = FBTaxWithholdTransProcessor_BR::getTaxWithholdAmountByTaxType(fbTaxWithholdTrans.VoucherId, fbTaxWithholdTrans.InvoiceNumber, fbTaxWithholdTrans.TransDate, TaxWithholdType_BR::COFINS);
                    fbTaxWithholdTrans.OtherTaxWithholdAmount   = FBTaxWithholdTransProcessor_BR::getOtherTaxWithholdAmount(fbTaxWithholdTrans.VoucherId, fbTaxWithholdTrans.InvoiceNumber, fbTaxWithholdTrans.TransDate);
                }

                if (fbTaxWithholdTrans.AssessmentRegimen == FBContribAssessmentRegimen_BR::None)
                {
                    fiscalEstablishment     = FiscalEstablishment_BR::findById(fbTaxWithholdTrans.FiscalEstablishment);
                    rootFiscalOrganization  = FiscalOrganization_BR::find(fiscalEstablishment.FiscalOrganization_BR);

                    fbTaxWithholdTrans.AssessmentRegimen        = FBTaxWithholdTransProcessor_BR::getAssessmentRegimenForFiscalOrg(rootFiscalOrganization, fbTaxWithholdTrans);
                }

                fbTaxWithholdTrans.fbBookingPeriod_BR       = fbBookingPeriod.RecId;
                fbTaxWithholdTrans.write();
            }
        }
        
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookContribAssetTransactions</Name>
				<Source><![CDATA[
    private void bookContribAssetTransactions()
    {
        new FBContribAssetBookProcessor_BR(fbBookingPeriod, fiscalEstablishment.RecId)
                .run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the details for all tax assessments.
    /// </summary>
    protected void createTaxDetails()
    {
        FBTaxAssessment_BR              fbTaxAssessment;
        FBTaxAssessmentDetailCreator_BR taxAssessmentDetailCreator;

        while select fbTaxAssessment
            where fbTaxAssessment.fbBookingPeriod_BR == fbBookingPeriod.RecId
        {
            taxAssessmentDetailCreator = FBTaxAssessmentDetailCreator_BR::construct(fbTaxAssessment);
            taxAssessmentDetailCreator.createAllAssessmentDetails();
        }

        this.createTaxDetailsPISCOFINSForRoot();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookingDataForPeriod</Name>
				<Source><![CDATA[
    private void deleteBookingDataForPeriod(FBBookingPeriod_BR _fbBookingPeriod)
    {
        #LocalMacro.ExistsJoinFiscalDocument
            exists join fiscalDocumentLine
                where fiscalDocumentLine.RecId == fiscalDocumentTaxTrans.FiscalDocumentLine
            exists join fiscalDocument
                where fiscalDocument.RecId == fiscalDocumentLine.FiscalDocument
                    && (fiscalDocument.Status == FiscalDocumentStatus_BR::Cancelled
                        || fiscalDocument.Status == FiscalDocumentStatus_BR::Reversed
                        || fiscalDocument.Status == FiscalDocumentStatus_BR::Denied
                        || fiscalDocument.Status == FiscalDocumentStatus_BR::Discarded)
            exists join fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.FiscalDocument_BR   == fiscalDocument.RecId
                    && fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == _fbBookingPeriod.RecId;
        #endMacro

        FiscalDocument_BR                   fiscalDocument;
        FiscalDocumentLine_BR               fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR           fiscalDocumentTaxTrans;
        FBTaxTrans_BR                       fbTaxTrans;
        FBTaxAssessmentAdjustment_BR        fbTaxAssessmentAdjustment;
        FBFiscalDocumentAdjustment_BR       fbFiscalDocumentAdjustment;
        FBBookingPeriodFiscalDocument_BR    fbBookingPeriodFiscalDocument;

        ttsbegin;

        //Deletes the cancelled and reversed fiscal documents from tax transaction details
        delete_from fbTaxTrans
            exists join fiscalDocumentTaxTrans
                where fbTaxTrans.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
            #ExistsJoinFiscalDocument

        //Deletes the tax assessment adjustment from the cancelled and reversed fiscal document
        delete_from fbTaxAssessmentAdjustment
            exists join fiscalDocumentTaxTrans
                where fbTaxAssessmentAdjustment.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
            #ExistsJoinFiscalDocument

        //Deletes the cancelled and reversed fiscal documents adjustments
        delete_from fbFiscalDocumentAdjustment
            exists join fiscalDocumentTaxTrans
                where fbFiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
            #ExistsJoinFiscalDocument

        //Deletes the relation of the cancelled and reversed fiscal documents
        delete_from fbBookingPeriodFiscalDocument
            where fbBookingPeriodFiscalDocument.fbBookingPeriod_BR == _fbBookingPeriod.RecId
            exists join fiscalDocument
                where fbBookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
                    && (fiscalDocument.Status == FiscalDocumentStatus_BR::Cancelled
                        || fiscalDocument.Status == FiscalDocumentStatus_BR::Reversed
                        || fiscalDocument.Status == FiscalDocumentStatus_BR::Denied
                        || fiscalDocument.Status == FiscalDocumentStatus_BR::Discarded);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookPreprocessedFiscalDocuments</Name>
				<Source><![CDATA[
    private void bookPreprocessedFiscalDocuments()
    {
        FiscalDocument_BR fiscalDocument;
        FBBookingPeriodPrepFiscalDocument_BR fbBookingPeriodPrepFiscalDocument;
        FBBookingPeriodFiscalDocument_BR fbBookingPeriodFiscalDocument;
        FBBookingPeriod_BR bookingPeriod;

        Query query = this.initQueryPreprocessedFiscalDocuments();
        Map targetToSourceMap = this.buildFieildMapForPreprocessedFiscalDocuments(query);
        Query::insert_recordset(fbBookingPeriodFiscalDocument, targetToSourceMap, query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieildMapForPreprocessedFiscalDocuments</Name>
				<Source><![CDATA[
    private Map buildFieildMapForPreprocessedFiscalDocuments(Query _query)
    {
        _query.clearAllFields();
        Map fieldMap = new Map(Types::String, Types::Container);
        QueryBuildDataSource qbdsPrepFiscalDocument = _query.dataSourceTable(tableNum(FBBookingPeriodPrepFiscalDocument_BR));
        QueryBuildFieldList qbflPrepFiscalDocument = qbdsPrepFiscalDocument.fields();

        int prepUniqueId = qbdsPrepFiscalDocument.uniqueId();
        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, FiscalDocument_BR));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, FiscalDocument_BR), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, FiscalDocument_BR)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, FiscalSituation));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, FiscalSituation), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, FiscalSituation)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, HasIcms));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, HasIcms), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, HasIcms)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, HasIpi));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, HasIpi), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, HasIpi)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, HasPis));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, HasPis), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, HasPis)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, HasCofins));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, HasCofins), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, HasCofins)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, HasIcmsSt));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, HasIcmsSt), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, HasIcmsSt)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, HasIcmsDiff));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, HasIcmsDiff), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, HasIcmsDiff)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, HasIss));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, HasIss), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, HasIss)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, HasInss));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, HasInss), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, HasInss)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, HasInssRet));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, HasInssRet), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, HasInssRet)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, ThirdPartyType));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, ThirdPartyType), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, ThirdPartyType)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, SpedFiscalRecord));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, SpedFiscalRecord), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, SpedFiscalRecord)]);

        qbflPrepFiscalDocument.addField(fieldNum(FBBookingPeriodPrepFiscalDocument_BR, SpedContribRecord));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, SpedContribRecord), [prepUniqueId, fieldStr(FBBookingPeriodPrepFiscalDocument_BR, SpedContribRecord)]);

        QueryBuildDataSource qbdsFBBookingPeriod = _query.dataSourceTable(tableNum(FBBookingPeriod_BR));
        QueryBuildFieldList qbflFBBookingPeriod = qbdsFBBookingPeriod.fields();

        qbflFBBookingPeriod.addField(fieldNum(FBBookingPeriod_BR, RecId));
        fieldMap.insert(fieldStr(FBBookingPeriodFiscalDocument_BR, FBBookingPeriod_BR), [qbdsFBBookingPeriod.uniqueId(), fieldStr(FBBookingPeriod_BR, RecId)]);

        return fieldMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSpedContribBlock</Name>
				<Source><![CDATA[
    private FBSpedFileRecordIdentification_BR determineSpedContribBlock(
        FiscalDocument_BR _fiscalDocument,
        boolean _hasPisCofins = false)
    {
        FBSpedRecordDeterminer_Contrib_BR recordDeterminer = FBSpedRecordDeterminer_BR::constructForSpedContrib(_fiscalDocument);
        recordDeterminer.parmHasPisCofins(_hasPisCofins);
        FiscalOrganization_BR fiscalOrganization  = FiscalOrganization_BR::find(fiscalEstablishment.FiscalOrganization_BR);
        recordDeterminer.parmFiscalOrganization(fiscalOrganization);

        return recordDeterminer.determineRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineSpedFiscalBlock</Name>
				<Source><![CDATA[
    private FBSpedFileRecordIdentification_BR determineSpedFiscalBlock(
        FiscalDocument_BR _fiscalDocument,
        boolean _hasIcmsIpi = false)
    {
        FBSpedRecordDeterminer_Fiscal_BR recordDeterminer = FBSpedRecordDeterminer_BR::constructForSpedFiscal(_fiscalDocument);
        recordDeterminer.parmHasIcmsIpi(_hasIcmsIpi);

        return recordDeterminer.determineRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fiscalEstablishmentId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected FiscalEstablishmentId_BR fiscalEstablishmentId()
    {
        return fiscalEstablishment.FiscalEstablishmentId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFiscalSituationForFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a fiscal situation for a fiscal document.
    /// </summary>
    /// <param name = "_parameters">
    /// A contract to pass the needed parameters.
    /// </param>
    /// <returns>
    /// The fiscal situation value.
    /// </returns>
    protected FBFiscalDocumentSituation_BR getFiscalSituationForFiscalDocument(FBFiscalDocumentBookProcessorGetFiscalSituationForFiscalDocumentArgs_BR _parameters)
    {
        FiscalDocument_BR               fiscalDocument = _parameters.parmFiscalDocument();
        FBFiscalDocumentSituation_BR    situation;
        int                             fiscalDocumentSeries;

        switch (fiscalDocument.Status)
        {
            case FiscalDocumentStatus_BR::Cancelled:

                situation = FBFiscalDocumentSituation_BR::Cancelled;

                break;

            case FiscalDocumentStatus_BR::Approved:

                fiscalDocumentSeries = str2int(strKeep(fiscalDocument.FiscalDocumentSeries, '0123456789'));

                if (fiscalDocument.Model != FiscalBooksConstants_BR::FiscalDocModel_59
                    && fiscalDocumentSeries >= 890
                    && fiscalDocumentSeries <= 899)
                {
                    situation = FBFiscalDocumentSituation_BR::SpecialLegislation;
                }
                else
                {
                    if (fiscalDocument.ComplementaryType != InvoiceComplementaryType_BR::Blank)
                    {
                        situation = FBFiscalDocumentSituation_BR::Complementary;
                    }
                    else
                    {
                        situation = FBFiscalDocumentSituation_BR::Regular;
                    }
                }

                break;

            case FiscalDocumentStatus_BR::Denied:

                situation = FBFiscalDocumentSituation_BR::Denied;

                break;

            case FiscalDocumentStatus_BR::Discarded:

                situation = FBFiscalDocumentSituation_BR::Discarded;

                break;
        }

        return situation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRunBaseProgress</Name>
				<Source><![CDATA[
    private RunbaseProgress getRunBaseProgress()
    {
        if (!runbaseProgress)
        {
            runbaseProgress = new RunbaseProgress();
        }

        return runbaseProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyRangesFiscalDocumentDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies ranges for fiscal document datasource.
    /// </summary>
    /// <param name = "_qbdsFiscalDocument">
    /// The <c>QueryBuildDataSource</c> object.
    /// </param>
    internal void applyRangesFiscalDocumentDataSource(QueryBuildDataSource _qbdsFiscalDocument)
    {
        _qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, FiscalEstablishment)).value(queryValue(this.fiscalEstablishmentId()));
        _qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, Version)).value(con2Str(FiscalBooksConstants_BR::FiscalDocumentVersion, Delimeter));

        QueryBuildRange queryBuildRange = _qbdsFiscalDocument.addRange(fieldNum(FiscalDocument_BR, DataAreaId));

        //   Adds the following extended range:
        //   ( (fiscalDocument.Status == FiscalDocumentStatus_BR::Approved
        //       || fiscalDocument.Status == FiscalDocumentStatus_BR::Denied
        //       || fiscalDocument.Status == FiscalDocumentStatus_BR::Discarded)
        //     && fiscalDocument.AccountingDate >= periodFrom
        //     && fiscalDocument.AccountingDate <= periodTo)
        //   || (fiscalDocument.Status == FiscalDocumentStatus_BR::Cancelled
        //       && fiscalDocument.CancelAccountingDate >= periodFrom
        //       && fiscalDocument.CancelAccountingDate <= periodTo) )

        queryBuildRange.value(strFmt(
            '( (((%1 == %2) || (%1 == %3) || (%1 == %4)) && (%5 >= %6) && (%5 <= %7)) || ((%1 == %8) && (%9 >= %6) && (%9 <= %7)) )',
            fieldStr(FiscalDocument_BR, Status),
            any2int(FiscalDocumentStatus_BR::Approved),
            any2int(FiscalDocumentStatus_BR::Denied),
            any2int(FiscalDocumentStatus_BR::Discarded),
            fieldStr(FiscalDocument_BR, AccountingDate),
            date2StrXpp(periodFrom),
            date2StrXpp(periodTo),
            any2int(FiscalDocumentStatus_BR::Cancelled),
            fieldStr(FiscalDocument_BR, CancelAccountingDate)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBookingFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the table record which related to fiscal document.
    /// </summary>
    /// <param name = "_fiscalDocument"></param>
    /// Fiscal document record.
    /// <returns>The <c>Common</c> object.</returns>
    internal Common initBookingFiscalDocument(FiscalDocument_BR _fiscalDocument)
    {
        FBFiscalDocumentTaxSummarizer_BR taxSummarizer = FBFiscalDocumentTaxSummarizer_BR::construct(_fiscalDocument);
        FBBookingPeriodFiscalDocument_BR fbBookingPeriodFiscalDocument;

        fbBookingPeriodFiscalDocument.fbBookingPeriod_BR = fbBookingPeriod.RecId;
        fbBookingPeriodFiscalDocument.FiscalDocument_BR  = _fiscalDocument.RecId;
        fbBookingPeriodFiscalDocument.FiscalSituation    = this.getFiscalSituationForFiscalDocument(FBFiscalDocumentBookProcessorGetFiscalSituationForFiscalDocumentArgs_BR::construct(_fiscalDocument));
        fbBookingPeriodFiscalDocument.HasIcms            = taxSummarizer.existsTaxType(TaxType_BR::ICMS) || taxSummarizer.existsTaxType(TaxType_BR::ICMSST) || taxSummarizer.existsTaxType(TaxType_BR::ICMSDiff);
        fbBookingPeriodFiscalDocument.HasIpi             = taxSummarizer.existsTaxType(TaxType_BR::IPI);
        fbBookingPeriodFiscalDocument.HasPis             = taxSummarizer.existsTaxType(TaxType_BR::PIS);
        fbBookingPeriodFiscalDocument.HasCofins          = taxSummarizer.existsTaxType(TaxType_BR::COFINS);
        fbBookingPeriodFiscalDocument.HasIcmsSt          = taxSummarizer.existsTaxType(TaxType_BR::ICMSST);
        fbBookingPeriodFiscalDocument.HasIcmsDiff        = taxSummarizer.existsTaxType(TaxType_BR::ICMSDiff);
        fbBookingPeriodFiscalDocument.HasIss             = taxSummarizer.existsTaxType(TaxType_BR::ISS);
        fbBookingPeriodFiscalDocument.HasInss            = taxSummarizer.existsTaxType(TaxType_BR::INSS);
        fbBookingPeriodFiscalDocument.HasInssRet         = taxSummarizer.existsTaxType(TaxType_BR::INSSRetained);
        fbBookingPeriodFiscalDocument.HasIrrf            = taxSummarizer.existsTaxType(TaxType_BR::IRRF);
        fbBookingPeriodFiscalDocument.ThirdPartyType     = _fiscalDocument.thirdPartyType();

        boolean hasPisCofins = fbBookingPeriodFiscalDocument.HasPis || fbBookingPeriodFiscalDocument.HasCofins;
        boolean hasIcmsIpi = fbBookingPeriodFiscalDocument.HasIcms || fbBookingPeriodFiscalDocument.HasIpi;

        fbBookingPeriodFiscalDocument.SpedFiscalRecord   = this.determineSpedFiscalBlock(_fiscalDocument, hasIcmsIpi);
        fbBookingPeriodFiscalDocument.SpedContribRecord  = this.determineSpedContribBlock(_fiscalDocument, hasPisCofins);

        return fbBookingPeriodFiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryApplicableFiscalDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query for applicabple fiscal documents.
    /// </summary>
    /// <returns>
    /// The <c>Query</c> object.
    /// </returns>
    internal Query initQueryApplicableFiscalDocuments()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsFiscalDocument = query.addDataSource(tableNum(FiscalDocument_BR));
        this.applyRangesFiscalDocumentDataSource(qbdsFiscalDocument);

        QueryBuildDataSource qbdsBookFiscalDocument = qbdsFiscalDocument.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbdsBookFiscalDocument.relations(true);
        qbdsBookFiscalDocument.joinMode(JoinMode::NoExistsJoin);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryPreprocessedFiscalDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the query for preprocessed fiscal documents.
    /// </summary>
    /// <returns>
    /// The <c>Query</c> object.
    /// </returns>
    internal Query initQueryPreprocessedFiscalDocuments()
    {
        Query query = new Query();
        QueryBuildDataSource qbdsPrepFiscalDocument = query.addDataSource(tableNum(FBBookingPeriodPrepFiscalDocument_BR));
        qbdsPrepFiscalDocument.fields().dynamic(QueryFieldListDynamic::No);

        QueryBuildDataSource qbdsFiscalDocument = qbdsPrepFiscalDocument.addDataSource(tableNum(FiscalDocument_BR));
        qbdsFiscalDocument.relations(true);
        qbdsFiscalDocument.joinMode(JoinMode::ExistsJoin);
        qbdsFiscalDocument.fetchMode(QueryFetchMode::One2One);
        this.applyRangesFiscalDocumentDataSource(qbdsFiscalDocument);
        qbdsFiscalDocument.fields().dynamic(QueryFieldListDynamic::No);

        QueryBuildDataSource qbdsBookFiscalDocument = qbdsFiscalDocument.addDataSource(tableNum(FBBookingPeriodFiscalDocument_BR));
        qbdsBookFiscalDocument.relations(true);
        qbdsBookFiscalDocument.fetchMode(QueryFetchMode::One2One);
        qbdsBookFiscalDocument.joinMode(JoinMode::NoExistsJoin);
        qbdsBookFiscalDocument.fields().dynamic(QueryFieldListDynamic::No);

        QueryBuildDataSource qbdsBookingPeriod= qbdsPrepFiscalDocument.addDataSource(tableNum(FBBookingPeriod_BR));
        qbdsBookingPeriod.relations(false);
        qbdsBookingPeriod.joinMode(JoinMode::InnerJoin);
        qbdsBookingPeriod.fetchMode(QueryFetchMode::One2One);
        qbdsBookingPeriod.addRange(fieldNum(FBBookingPeriod_BR, RecId)).value(queryValue(fbBookingPeriod.RecId));
        qbdsBookingPeriod.fields().dynamic(QueryFieldListDynamic::No);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>FBFiscalDocumentBookProcessor_BR</c> class.
    /// </summary>
    /// <param name="_fbBookingPeriod">
    /// The booking period for which the class will process data from.
    /// </param>
    public void new(FBBookingPeriod_BR _fbBookingPeriod)
    {
        FBParametersPerState_BR::init();

        fbBookingPeriod = _fbBookingPeriod;

        fiscalEstablishment = fbBookingPeriod.fiscalEstablishment();
        enableDocumentAdjustment = FBParametersPerState_BR::find(fiscalEstablishment.postalAddress()).EnableDocumentAdjustment;

        bookFiscalDocuments = true;

        periodFrom = fbBookingPeriod.periodFrom();
        periodTo = fbBookingPeriod.periodTo();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBookFiscalDocuments</Name>
				<Source><![CDATA[
    public boolean parmBookFiscalDocuments(boolean _bookFiscalDocuments = bookFiscalDocuments)
    {
        bookFiscalDocuments = _bookFiscalDocuments;
        return bookFiscalDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunBaseProgress</Name>
				<Source><![CDATA[
    public RunbaseProgress parmRunBaseProgress(RunbaseProgress _runbaseProgress = runbaseProgress)
    {
        runbaseProgress = _runbaseProgress;
        return runbaseProgress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBooking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs the whole orchestration of the book processing.
    /// </summary>
    public void processBooking()
    {
        using(var telemetry = RetailInstrumentationSegment::construct(classId2Name(classIdGet(this)), funcName()))
        {
            System.Diagnostics.Stopwatch fiscalBookSyncStopWatch = new System.Diagnostics.Stopwatch();
            eventSource.WriteEventSyncFiscalBookBegin(fbBookingPeriod.RecId, funcName());
            fiscalBookSyncStopWatch.Start();
            try
            {
                if (this.parmBookFiscalDocuments())
                {
                    this.fillFinancialLedgerDimension();

                    ttsbegin;

                    changecompany (fbBookingPeriod.FiscalEstablishmentDataArea)
                    {
                        if (fbBookingPeriod.existsClosedTaxAssessment())
                        {
                            throw error("@SYS4001748");
                        }

                        if (!this.canSyncDocumentsForContribTaxAssessment())
                        {
                            throw error("@SYP4882704");
                        }

                        this.bookPreprocessedFiscalDocuments();
                        this.deleteBookingDataForPeriod(fbBookingPeriod);

                        this.bookApplicableFiscalDocuments();
                        this.bookApplicableInventoryAdjustments();
                        this.bookApplicableZReports();
                    
                        if (FBSpedFiscalFileParameters_BR::find(fbBookingPeriod.FiscalEstablishmentId, fbBookingPeriod.FiscalEstablishmentDataArea).SyncProductionOrder)
                        {
                            FBFiscalDocumentBookProcessor_BR::bookApplicableProduction_FBProduction(fbBookingPeriod);
                            this.bookApplicableProduction_ProdTable();
                        }

                        this.bookTaxWithholdTrans();
                        this.bookNonFiscalOperation();

                        this.bookContribAssetTransactions();

                        this.createTaxDetails();

                        this.createBenefitAdjustments();

                        if (enableDocumentAdjustment)
                        {
                            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR10010, funcName());

                            this.createGeneralTaxAdjustmentJournal();
                        }
                    }

                    ttscommit;
                }
            }
            catch
            {
                ttsabort;
                eventSource.WriteEventSyncFiscalBookError(fbBookingPeriod.RecId, funcName(), CLRInterop::getLastException().toString());
            }
            fiscalBookSyncStopWatch.Stop();
            eventSource.WriteEventSyncFiscalBookEnd(fbBookingPeriod.RecId, funcName(), fiscalBookSyncStopWatch.ElapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookApplicableProduction_FBProduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Books applicable production in reporting period.
    /// </summary>
    /// <param name = "_fbBookingPeriod">The booking period for which the class will process data from.</param>
    public static void bookApplicableProduction_FBProduction(FBBookingPeriod_BR _fbBookingPeriod)
    {
        FBProductionReportingPeriod_BR productionReportingPeriod;

        while select productionReportingPeriod
            where productionReportingPeriod.FBBookingPeriod_BR == _fbBookingPeriod.Recid
        {
            RecId productionReportingPeriodRecId = productionReportingPeriod.RecId;
            FBProductionHeader_BR productionHeader;
            FBBookingPeriodProduction_BR alreadyBookedProductions;
            FBBookingPeriodProduction_BR bookingPeriodProduction;

            // book qty reported as finished
            insert_recordset bookingPeriodProduction (FBProductionReportingPeriod_BR, FBProductionHeader_BR, ProductionId)
                select productionReportingPeriodRecId, RecId, ProductionId
                    from productionHeader
                        where productionHeader.TransDate >= productionReportingPeriod.FromDate
                            && productionHeader.TransDate <= productionReportingPeriod.ToDate
                            && productionHeader.FiscalEstablishmentId == _fbBookingPeriod.FiscalEstablishmentId
                            && productionHeader.Qty > 0
                notExists join alreadyBookedProductions
                    where alreadyBookedProductions.FBProductionReportingPeriod_BR == productionReportingPeriodRecId
                            && alreadyBookedProductions.FBProductionHeader_BR == productionHeader.RecId;

            FBProductionLine_BR productionLine;

            // book consumption
            insert_recordset bookingPeriodProduction (FBProductionReportingPeriod_BR, FBProductionHeader_BR, ProductionId)
                select productionReportingPeriodRecId, RecId, ProductionId
                    from productionHeader
                        where productionHeader.TransDate >= productionReportingPeriod.FromDate
                            && productionHeader.TransDate <= productionReportingPeriod.ToDate
                            && productionHeader.FiscalEstablishmentId == _fbBookingPeriod.FiscalEstablishmentId
                            && productionHeader.Qty == 0
                exists join productionLine
                    where productionLine.FBProductionHeader_BR == productionHeader.RecId
                notExists join alreadyBookedProductions
                    where alreadyBookedProductions.FBProductionReportingPeriod_BR == productionReportingPeriodRecId
                            && alreadyBookedProductions.FBProductionHeader_BR == productionHeader.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSyncDocumentsForContribTaxAssessment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if a tax payment was posted for a PIS/COFINS non cumulative or both tax assessment.
    /// </summary>
    /// <returns>
    /// True if don't exists a posted payment or the regimen is cumulative; otherwise, false;
    /// </returns>
    private boolean canSyncDocumentsForContribTaxAssessment()
    {
        FBTaxAssessment_BR taxAssessment;
        FBTaxAssessmentPayment_BR taxAssessmentPayment;

        select firstOnly RecId
        from taxAssessment
            where  taxAssessment.FBBookingPeriod_BR             == fbBookingPeriod.RecId
                && taxAssessment.ContribAssessmentRegimen       != FBContribAssessmentRegimen_BR::Cumulative
                && taxAssessment.ContribCreditAllocationMethod  == FBContribCreditAllocationMethod_BR::Proportional
                && (taxAssessment.TaxType   == TaxType_BR::PIS
                || taxAssessment.TaxType    == TaxType_BR::COFINS)
        exists join taxAssessmentPayment
            where  taxAssessmentPayment.FBTaxAssessment_BR == taxAssessment.RecId
                && taxAssessmentPayment.Reversed           == NoYes::No
                && taxAssessmentPayment.Voucher            != '';

        return taxAssessment.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalPrinterDailyReportNumber</Name>
				<Source><![CDATA[
    private void updateFiscalPrinterDailyReportNumber(RetailZReport_BR retailZReport)
    {
        #RetailZReportTotalizers_BR

        FBFiscalPrinterDailyReport_BR           fbFiscalPrinterDailyReport;
        RetailZReportTotalizer_BR               retailZReportTotalizer;
        real                                    taxValue;

        select firstonly forUpdate fbFiscalPrinterDailyReport
            where   fbFiscalPrinterDailyReport.FBBookingPeriod_BR    == fbBookingPeriod.RecId &&
                    fbFiscalPrinterDailyReport.AccountingDate        == retailZReport.AccountingDate;

        if (!fbFiscalPrinterDailyReport)
        {
            ttsBegin;

            fbFiscalPrinterDailyReport.FBBookingPeriod_BR    = fbBookingPeriod.RecId;
            fbFiscalPrinterDailyReport.AccountingDate        = retailZReport.AccountingDate;
            fbFiscalPrinterDailyReport.Number                = fiscalEstablishment.nextFiscalPrinterDailyReportNumber;
            fbFiscalPrinterDailyReport.insert();

            fiscalEstablishment.selectForUpdate(true);
            fiscalEstablishment.nextFiscalPrinterDailyReportNumber++;
            fiscalEstablishment.write();

            ttsCommit;
        }

        ttsBegin;

        fbFiscalPrinterDailyReport.CanceledAmount    += retailZReport.ICMSCancelAmount();
        fbFiscalPrinterDailyReport.DiscountAmount    += retailZReport.ICMSDiscountAmount();
        fbFiscalPrinterDailyReport.ExemptBaseAmount  += retailZReport.getICMSExemptAmount() + retailZReport.getICMSNonTribAmount();
        fbFiscalPrinterDailyReport.GrossAmount       += retailZReport.GrossDailySale;
        fbFiscalPrinterDailyReport.ISSTaxAmount      += retailZReport.ISSTotalAmount() + retailZReport.ISSCancelAmount() + retailZReport.ISSDiscountAmount();
        fbFiscalPrinterDailyReport.NetAmount         += retailZReport.NetAmount;
        fbFiscalPrinterDailyReport.STAmount          += retailZReport.getICMSTribSubstitutionAmount();

        while select TotalizerName, TotalizerAmount from retailZReportTotalizer
            where   retailZReportTotalizer.StoreId                       == retailZReport.StoreId
                &&  retailZReportTotalizer.TerminalId                    == retailZReport.TerminalId
                &&  retailZReportTotalizer.FiscalPrinterSerialNumber     == retailZReport.FiscalPrinterSerialNumber
                &&  retailZReportTotalizer.AdditionalFiscalMemoryIndex   == retailZReport.AdditionalFiscalMemoryIndex
                &&  retailZReportTotalizer.ZReportNumber                 == retailZReport.ZReportNumber
        {
            if (subStr(retailZReportTotalizer.TotalizerName, 3, 1)  == #ICMSTotalizerCharacter)
            {
                taxValue                                    = str2int(subStr(retailZReportTotalizer.TotalizerName, 4, 99)) / 100;
                fbFiscalPrinterDailyReport.TaxBaseAmount    += retailZReportTotalizer.TotalizerAmount;

                CurrencyCode currencyCode = Ledger::accountingCurrency();

                fbFiscalPrinterDailyReport.TaxAmount += CurrencyExchange::round(retailZReportTotalizer.TotalizerAmount * (taxValue / 100), currencyCode);
            }
        }

        fbFiscalPrinterDailyReport.write();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxDetailsPISCOFINSForRoot</Name>
				<Source><![CDATA[
    private void createTaxDetailsPISCOFINSForRoot()
    {
        FBTaxAssessment_BR              fbTaxAssessment;
        FiscalOrganization_BR           fiscalOrganization;
        FBBookingPeriod_BR              fbBookingPeriodRootFiscalEstablishment;
        FBTaxAssessmentDetailCreator_BR taxAssessmentDetailCreator;

        fiscalOrganization = FiscalOrganization_BR::find(fiscalEstablishment.FiscalOrganization_BR);

        if (    fiscalOrganization
            && (fiscalOrganization.FiscalEstablishmentId        != fiscalEstablishment.FiscalEstablishmentId
            ||  fiscalOrganization.FiscalEstablishmentDataArea  != fiscalEstablishment.DataAreaId))
        {
            fbBookingPeriodRootFiscalEstablishment = FBBookingPeriod_BR::findByFiscalEstablishmentAndPeriod(
                                                                        fiscalOrganization.FiscalEstablishmentId,
                                                                        fiscalOrganization.FiscalEstablishmentDataArea,
                                                                        fbBookingPeriod.PeriodMonth,
                                                                        fbBookingPeriod.PeriodYear);
            while select fbTaxAssessment
                where   fbTaxAssessment.fbBookingPeriod_BR == fbBookingPeriodRootFiscalEstablishment.RecId
                    && (    fbTaxAssessment.TaxType == TaxType_BR::PIS
                        ||  fbTaxAssessment.TaxType == TaxType_BR::COFINS)
            {
                taxAssessmentDetailCreator = FBTaxAssessmentDetailCreator_BR::construct(fbTaxAssessment);
                taxAssessmentDetailCreator.createAllAssessmentDetails();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillFinancialLedgerDimension</Name>
				<Source><![CDATA[
    private void fillFinancialLedgerDimension()
    {
        FBFiscalDocumentLineLedgerDimensionHelper::fillLedgerDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBenefitAdjustments</Name>
				<Source><![CDATA[
    private void createBenefitAdjustments()
    {
        FiscalDocument_BR fiscalDocument;
        FiscalDocumentLine_BR fiscalDocumentLine;
        FiscalDocumentTaxTrans_BR fiscalDocumentTaxTrans;
        FBTaxAssessment_BR fbTaxAssessment, notExistantTaxAssessment;
        FBFiscalDocumentAdjustmentCodeICMS_BR fiscalDocumentAdjustmentCode;
        FBBookingPeriodFiscalDocument_BR fbBookingPeriodFiscalDocument;
        FBFiscalDocumentAdjustment_BR notExistFiscalDocumentAdjustment, orphanedFiscalDocumentAdjustment;
        FBObservationCodeTable_BR observationCodeTable;
        TaxFiscalDocument_BR taxFiscalDocument;
        
        while select TaxBaseAmountExempt, TaxBaseAmountOther, TaxAmountOther, TaxValue, TaxAmount, TaxBaseAmount, RecId, Type, taxReductionPct from fiscalDocumentTaxTrans
            where fiscalDocumentTaxTrans.Type == TaxType_BR::ICMS
                || fiscalDocumentTaxTrans.Type == TaxType_BR::ICMSST
                || fiscalDocumentTaxTrans.Type == TaxType_BR::ICMSDiff
            join RecId, LineAmount, BenefitCode, AdjustmentCode53, ObservationCode from fiscalDocumentLine
                where fiscalDocumentLine.RecId == fiscalDocumentTaxTrans.FiscalDocumentLine
                    && fiscalDocumentLine.BenefitCode
            join FiscalDocumentDate, Purpose, RefTableId, RefRecId from fiscalDocument
                where fiscalDocument.RecId == fiscalDocumentLine.FiscalDocument
            join RecId, State from fbTaxAssessment
                where fbTaxAssessment.FBBookingPeriod_BR == fbBookingPeriod.RecId
                    && fbTaxAssessment.TaxType == fiscalDocumentTaxTrans.Type
            exists join fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
                    && fbBookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
        {
            observationCodeTable = FBObservationCodeTable_BR::findByObservationCode(fiscalDocumentLine.ObservationCode);
            // Relink orphaned fiscal document adjustments
            update_recordSet orphanedFiscalDocumentAdjustment
                setting FBTaxAssessment_BR = fbTaxAssessment.RecId
                where orphanedFiscalDocumentAdjustment.FBTaxAssessment_BR
                    && orphanedFiscalDocumentAdjustment.FBTaxAssessment_BR != fbTaxAssessment.RecId
                    && orphanedFiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR == fiscalDocumentTaxTrans.RecId
                    && orphanedFiscalDocumentAdjustment.State == fbTaxAssessment.State
                notExists join notExistantTaxAssessment
                    where notExistantTaxAssessment.RecId == orphanedFiscalDocumentAdjustment.FBTaxAssessment_BR;
            this.createBenefitAdjustment52(fiscalDocument, fiscalDocumentLine, fiscalDocumentTaxTrans, fbTaxAssessment, observationCodeTable);
            this.createBenefitAdjustment53(fiscalDocument, fiscalDocumentLine, fiscalDocumentTaxTrans, fbTaxAssessment, observationCodeTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBenefitAdjustment53</Name>
				<Source><![CDATA[
    private void createBenefitAdjustment53(
        FiscalDocument_BR _fiscalDocument,
        FiscalDocumentLine_BR _fiscalDocumentLine,
        FiscalDocumentTaxTrans_BR _fiscalDocumentTaxTrans,
        FBTaxAssessment_BR _fbTaxAssessment,
        FBObservationCodeTable_BR _observationCodeTable)
    {
        FBFiscalDocumentAdjustmentCodeICMS_BR fiscalDocumentAdjustmentCode;
        FBFiscalDocumentAdjustment_BR notExistFiscalDocumentAdjustment;

        if (_fiscalDocument.RefTableId == tableNum(TaxFiscalDocument_BR))
        {
            TaxFiscalDocument_BR taxFiscalDocument = TaxFiscalDocument_BR::findRecId(_fiscalDocument.RefRecId);

            if (taxFiscalDocument.TaxFiscalDocumentType == TaxFiscalDocumentType_BR::ICMSTaxTransfer)
            {
                return;
            }
        }

        select firstOnly RecId, State, Classification, TaxType, Table52 from fiscalDocumentAdjustmentCode
                where fiscalDocumentAdjustmentCode.SpedAdjustmentCode == _fiscalDocumentLine.AdjustmentCode53
                    && !fiscalDocumentAdjustmentCode.Table52
                    && fiscalDocumentAdjustmentCode.TaxType == _fiscalDocumentTaxTrans.Type
            notexists join notExistFiscalDocumentAdjustment
                where notExistFiscalDocumentAdjustment.FBTaxAssessment_BR == _fbTaxAssessment.RecId
                    && notExistFiscalDocumentAdjustment.FBFiscalDocumentAdjustmentCodeICMS_BR == fiscalDocumentAdjustmentCode.RecId
                    && notExistFiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR == _fiscalDocumentTaxTrans.RecId;
            
        if (fiscalDocumentAdjustmentCode)
        {
            this.createFiscalDocumentAdjustment(
                _fiscalDocument,
                _fiscalDocumentLine,
                _fiscalDocumentTaxTrans,
                fiscalDocumentAdjustmentCode,
                _fbTaxAssessment,
                _observationCodeTable,
                _fiscalDocumentLine.BenefitCode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBenefitAdjustment52</Name>
				<Source><![CDATA[
    private void createBenefitAdjustment52(
        FiscalDocument_BR _fiscalDocument,
        FiscalDocumentLine_BR _fiscalDocumentLine,
        FiscalDocumentTaxTrans_BR _fiscalDocumentTaxTrans,
        FBTaxAssessment_BR _fbTaxAssessment,
        FBObservationCodeTable_BR _observationCodeTable)
    {
        FBComplementaryDescription_BR complementaryDescription = 'Benefit adjustment';

        FBFiscalDocumentAdjustmentCodeICMS_BR fiscalDocumentAdjustmentCode;
        FBFiscalDocumentAdjustment_BR notExistFiscalDocumentAdjustment;

        select firstOnly RecId, State, Classification, TaxType, Table52 from fiscalDocumentAdjustmentCode
                where fiscalDocumentAdjustmentCode.SpedAdjustmentCode == _fiscalDocumentLine.BenefitCode
                    && fiscalDocumentAdjustmentCode.Table52
                    && fiscalDocumentAdjustmentCode.LiteralCode == NoYes::No
                    && fiscalDocumentAdjustmentCode.TaxType == _fiscalDocumentTaxTrans.Type
            notexists join notExistFiscalDocumentAdjustment
                where notExistFiscalDocumentAdjustment.FBTaxAssessment_BR == _fbTaxAssessment.RecId
                    && notExistFiscalDocumentAdjustment.FBFiscalDocumentAdjustmentCodeICMS_BR == fiscalDocumentAdjustmentCode.RecId
                    && notExistFiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR == _fiscalDocumentTaxTrans.RecId;
            
        if (fiscalDocumentAdjustmentCode)
        {
            this.createFiscalDocumentAdjustment(_fiscalDocument,
                                                _fiscalDocumentLine,
                                                _fiscalDocumentTaxTrans,
                                                fiscalDocumentAdjustmentCode,
                                                _fbTaxAssessment,
                                                _observationCodeTable,
                                                complementaryDescription);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalDocumentAdjustment</Name>
				<Source><![CDATA[
    private void createFiscalDocumentAdjustment(
        FiscalDocument_BR _fiscalDocument,
        FiscalDocumentLine_BR _fiscalDocumentLine,
        FiscalDocumentTaxTrans_BR _fiscalDocumentTaxTrans,
        FBFiscalDocumentAdjustmentCodeICMS_BR _fiscalDocumentAdjustmentCode,
        FBTaxAssessment_BR _fbTaxAssessment,
        FBObservationCodeTable_BR _observationCodeTable,
        FBComplementaryDescription_BR _complementaryDescription)
    {
        FBFiscalDocumentAdjustment_BR fiscalDocumentAdjustment;
        Amount taxBaseAmount, taxAmount;
        TaxValue taxValue = _fiscalDocumentTaxTrans.TaxValue;
        Amount lineAmount = _fiscalDocumentLine.LineAmount;
        CurrencyCode currencyCode = Ledger::accountingCurrency();

        if (_fiscalDocumentTaxTrans.TaxBaseAmountExempt)
        {
            taxBaseAmount = _fiscalDocumentTaxTrans.TaxBaseAmountExempt; 
            
            if (enableDocumentAdjustment)
            {
                if (_fiscalDocumentTaxTrans.taxReductionPct) 
                {
                    if (taxValue != 100)
                    {
                        real reductionfactor = 1 - _fiscalDocumentTaxTrans.taxReductionPct / 100;
                        real taxReduction = 1 - (taxValue / 100 * reductionfactor);
                        real taxFactor = 1 - taxValue / 100;

                        taxAmount = CurrencyExchange::round(lineAmount * taxReduction / taxFactor - lineAmount, currencyCode);
                    }
                    else
                    {
                        taxAmount = lineAmount;
                    }
                }
                else
                {
                    real taxPovertyFundLinePercentage = FiscalDocumentTaxTransPovertyFund_BR::taxPovertyFundLinePercentage(_fiscalDocumentLine.RecId, _fiscalDocumentTaxTrans.Type);
                    real taxPoverty = taxPovertyFundLinePercentage / 100;
                    real taxValueCoef = taxValue / 100;

                    real povertyFactor = taxValueCoef + taxPoverty;

                    if (povertyFactor != 1)
                    {
                        taxAmount = CurrencyExchange::round(taxBaseAmount / (1 - povertyFactor) * povertyFactor, currencyCode);
                    }
                    else
                    {
                        taxAmount = lineAmount;
                    }
                }
            }
            else
            {
                taxAmount = CurrencyExchange::round(taxBaseAmount * taxValue / 100, currencyCode);
            }
        }
        else if (_fiscalDocumentTaxTrans.TaxAmountOther)
        {
            taxBaseAmount = _fiscalDocumentTaxTrans.TaxBaseAmountOther;
            taxAmount = _fiscalDocumentTaxTrans.TaxAmountOther;
        }
        else
        {
            if (enableDocumentAdjustment)
            {
                taxBaseAmount = _fiscalDocumentTaxTrans.TaxBaseAmount;
                taxAmount  = _fiscalDocumentTaxTrans.TaxAmount + FiscalDocumentTaxTransPovertyFund_BR::taxPovertyFundTotalLineAmountForTax(_fiscalDocumentLine.RecId, _fiscalDocumentTaxTrans.Type);
            }
            else
            {
                taxBaseAmount = 0;
                taxAmount = 0;
            }
        }
        
        if (taxAmount)
        {
            fiscalDocumentAdjustment.clear();
            fiscalDocumentAdjustment.FBFiscalDocumentAdjustmentCodeICMS_BR = _fiscalDocumentAdjustmentCode.RecId;
            fiscalDocumentAdjustment.FBTaxAssessment_BR = _fbTaxAssessment.RecId;
            fiscalDocumentAdjustment.ComplementaryDescription = _complementaryDescription;
            fiscalDocumentAdjustment.FiscalDocumentTaxTrans_BR = _fiscalDocumentTaxTrans.RecId;
            fiscalDocumentAdjustment.FiscalEstablishmentId = fbBookingPeriod.FiscalEstablishmentId;
            fiscalDocumentAdjustment.State = _fbTaxAssessment.State;
            fiscalDocumentAdjustment.TaxBaseAmount = taxBaseAmount;
            fiscalDocumentAdjustment.TaxValue = taxValue;
            fiscalDocumentAdjustment.TaxType_BR = _fiscalDocumentTaxTrans.Type;
            fiscalDocumentAdjustment.TransDate = _fiscalDocument.FiscalDocumentDate;
            fiscalDocumentAdjustment.FBObservationCodeTable_BR = _observationCodeTable.RecId;
            
            if (_fiscalDocumentAdjustmentCode.Table52)
            {
                fiscalDocumentAdjustment.TaxAmount = taxAmount;
            }
            else
            {
                if (_fiscalDocumentAdjustmentCode.Classification == FBFiscalDocumentClassificationICMS_BR::Information)
                {
                    fiscalDocumentAdjustment.TaxAmountOther = taxAmount;
                }
                else
                {
                    fiscalDocumentAdjustment.TaxAmount = taxAmount;
                }
            }
            
            fiscalDocumentAdjustment.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createGeneralTaxAdjustmentJournal</Name>
				<Source><![CDATA[
    private void createGeneralTaxAdjustmentJournal()
    {
        FBTaxAdjustmentJournalCreator_BR taxAdjustmentJournalCreator;
        TaxFiscalDocument_BR taxFiscalDocument;
        FiscalDocument_BR fiscalDocument;
        FiscalDocumentLine_BR fiscalDocumentLine;
        FBFiscalDocumentAdjustmentCodeICMS_BR fiscalDocumentAdjustmentCode;
        FBBookingPeriodFiscalDocument_BR fbBookingPeriodFiscalDocument;
        FBLedgerJournalTrans_FiscalBooks_BR journalLineFiscalBooks;
        
        while select taxFiscalDocument
            where taxFiscalDocument.TaxFiscalDocumentType == TaxFiscalDocumentType_BR::ICMSTaxTransfer
                && !taxFiscalDocument.CancelReason
            join RecId, State, Classification, TaxType, Table52, AssessmentType from fiscalDocumentAdjustmentCode
                where !fiscalDocumentAdjustmentCode.Table52
            exists join fiscalDocument
                where fiscalDocument.RefRecId == taxFiscalDocument.RecId
                    && fiscalDocument.RefTableId == taxFiscalDocument.TableId
            exists join fiscalDocumentLine
                where fiscalDocumentLine.FiscalDocument == fiscalDocument.RecId
                    && fiscalDocumentLine.AdjustmentCode53 == fiscalDocumentAdjustmentCode.SpedAdjustmentCode
            exists join fbBookingPeriodFiscalDocument
                where fbBookingPeriodFiscalDocument.FBBookingPeriod_BR == fbBookingPeriod.RecId
                    && fbBookingPeriodFiscalDocument.FiscalDocument_BR == fiscalDocument.RecId
            notExists join journalLineFiscalBooks
                where journalLineFiscalBooks.FiscalDocumentLine_BR == fiscalDocumentLine.RecId
                    && journalLineFiscalBooks.FiscalDocument_BR == fiscalDocumentLine.FiscalDocument
        {
            if (fiscalDocumentAdjustmentCode.getTaxAssessmentClassification() != FBTaxAssessmentClassification_BR::Informative)
            {
                taxAdjustmentJournalCreator = FBTaxAdjustmentJournalCreator_BR::construct();
                taxAdjustmentJournalCreator.init(taxFiscalDocument);
                taxAdjustmentJournalCreator.createAndPostJournal();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>