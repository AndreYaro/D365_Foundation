<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxIntgrExportDocumentReset_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>TaxIntgrExportDocumentReset_CN</c> handles the export document reset.
/// </summary>
class TaxIntgrExportDocumentReset_CN extends TaxIntgrExportDocumentOperator_CN
{
    TaxIntgrExportDocumentSplitCalc_CN  curSplitCalculation;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
        protected void calculate(RefRecId _sourceRecId)
    {
        curSplitCalculation = TaxIntgrExportDocumentSplitCalc_CN::construct(_sourceRecId, false);
        curSplitCalculation.splitByPercent(100);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOperation</Name>
				<Source><![CDATA[
    protected void doOperation(RefRecId _sourceRecId, boolean _isGenerateFromOriginalDoc = false)
    {
        List                                listOfSourceRecIdLocal;

        listOfSourceRecIdLocal = new List(Types::Int64);
        listOfSourceRecIdLocal.addEnd(_sourceRecId);

        TaxIntgrExportDocumentManager_CN::createExportDocumentFromMap(
            listOfSourceRecIdLocal,
            curSplitCalculation.getExportDocMap(),
            TaxIntgrExportDocumentOperationType_CN::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImpactedSource</Name>
				<Source><![CDATA[
        protected void initializeImpactedSource()
    {
        TaxIntgrExportDocumentOperation_CN  exportDocumentOperation;
        TaxIntgrExportDocument_CN           exportDocument;
        TaxIntgrExportDocumentOperation_CN  exportDocumentOperationJoin;
        RefRecId                            exportDocumentSourceRecId;
        SetEnumerator                       enumerator;

        enumerator = setOfSource.getEnumerator();
        enumerator.moveNext();
        exportDocumentSourceRecId = enumerator.current();

        select firstOnly TaxIntgrExportDocument_CN from exportDocumentOperationJoin
            where exportDocumentOperationJoin.TaxIntgrExportDocumentSource_CN == exportDocumentSourceRecId;
        //this export document is generated before
        if (exportDocumentOperationJoin.TaxIntgrExportDocument_CN)
        {
            setOfImpactedSource = new Set(Types::Int64);

            while select TaxIntgrExportDocumentSource_CN from exportDocumentOperation
                where exportDocumentOperation.TaxIntgrExportDocument_CN == exportDocumentOperationJoin.TaxIntgrExportDocument_CN
            {
                setOfImpactedSource.add(exportDocumentOperation.TaxIntgrExportDocumentSource_CN);
            }

            setOfImpactedDocument = new Set(Types::String);

            while select Id from exportDocument
            exists join exportDocumentOperation
                where exportDocument.RecId == exportDocumentOperation.TaxIntgrExportDocument_CN
                    && exportDocumentOperation.TaxIntgrExportDocumentSource_CN == exportDocumentSourceRecId
            {
                setOfImpactedDocument.add(exportDocument.Id);
            }
        }
        else
        {
            setOfImpactedSource     = setOfSource;
            setOfImpactedDocument   = new Set(Types::String);
        }

        setOfTargetSource = setOfImpactedSource;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>