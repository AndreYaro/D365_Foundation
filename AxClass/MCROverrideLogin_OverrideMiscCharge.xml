<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCROverrideLogin_OverrideMiscCharge</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCROverrideLogin_OverrideMiscCharge</c> class validates a user
///     is authorized to override miscellaneous charges.
/// </summary>
/// <remarks>
///     The determination of whether a user is authorized is based on the difference between
///     the newly overrridden price and the original misc charge value.  The misc charge
///     percent will need to be greater than or equal to the percent assigned to the users
///     authorization group in the Override Price Mark up Groups form.
/// </remarks>
class MCROverrideLogin_OverrideMiscCharge extends MCROverrideLogin
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcMiscChargeOverridePercent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the percentage of original from the original misc charge value and the override value.
    /// </summary>
    /// <param name="_originalValue">
    ///     The original <c>MarkupValue</c> the user wants to overrride.
    /// </param>
    /// <param name="_overrideValue">
    ///     The new <c>MarkupValue</c> the user wants to override to.
    /// </param>
    /// <returns>
    ///     The <c>MCRMiscChargeOverridePercent</c> calculated from the original value and the overridden value.
    /// </returns>
    private MCRMiscChargeOverridePercent calcMiscChargeOverridePercent(MarkupValue _originalValue,
                                                                    MarkupValue _overrideValue)
    {
        real pct;

        if (_originalValue == 0)
        {
            // If original value was 0, we cannot get a percentage change
            // (would be division by zero).  So, return 0.
            return 0;
        }

        pct = 1 - (_overrideValue / _originalValue);

        // If the value is being changed to a lesser value we want the percentage to be postive
        // which will then make the ovveride user groups be checked.  Otherwise, the value is being increased
        // which will result in charging the customer more, which we allow all the time, so make the percentage
        // negative.
        if (_overrideValue >= _originalValue)
        {
            // not decreasing
            pct = (-1) * abs(pct);
        }
        else
        {
            // decreasing
            pct = abs(pct);
        }

        return pct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserValidForMiscCharge</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a <c>boolean</c> value indicating whether or not the user is authorized
    ///     to override the miscellaneous charge to the new value.
    /// </summary>
    /// <param name="_userId">
    ///     The network alias to use for the override login.
    /// </param>
    /// <param name="_originalValue">
    ///     The original <c>MarkupValue</c> before the override.
    /// </param>
    /// <param name="_overrideValue">
    ///     The requested <c>MarkupValue</c> after the override.
    /// </param>
    /// <returns>
    ///     true if the user can override the miscellaneous charges; otherwise, false.
    /// </returns>
    private boolean isUserValidForMiscCharge(UserId _userId,
                                MarkupValue _originalValue,
                                MarkupValue _overrideValue)
    {
        container                       roles;
        MCRMiscChargeOverridePercent    mcoPercent;
        int                             idx;
        boolean                         roleValid;
        int                             containerLength;

        mcoPercent = 100 * this.CalcMiscChargeOverridePercent(_originalValue, _overrideValue);
        roles = MCRAssistantUserRole::getRolesForUser(_userId, curext());
        if (conPeek(roles, 1))
        {
            containerLength = conLen(roles);
            for (idx = 1; idx <= containerLength; idx++)
            {
                // If we are checking the user to make an override, we need to make sure that they are in a group and that group has the permission
                // to give that % of original Markup discount.  If a new misc charge is sent in then we are looking at an override.  If no misc charge is sent in,
                // only check to see that the user is in an override group.  If they are in an override group, then that user can release the misc override
                // which will revert the line to the system calculated misc charge.
                roleValid = MCRPriceOverrideMarkUpGroup::IsUserAllowedModifyMiscCharge(mcoPercent, conPeek(roles, idx));

                if (roleValid)
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserValidForOverride</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the user is allowed to apply miscellaneous charges.
    /// </summary>
    /// <param name="_userId">
    /// The user's ID to check.
    /// </param>
    /// <param name="_originalValue">
    /// The original value of the miscellaneous charge.
    /// </param>
    /// <param name="_overrideValue">
    /// The new, overridden value of the miscellaneous charge.
    /// </param>
    /// <returns>
    /// true if the user is permitted to override the miscellaneous charge; otherwise, false.
    /// </returns>
    public boolean isUserValidForOverride(UserId _userId,
                                        MarkupValue _originalValue,
                                        MarkupValue _overrideValue)
    {
        return this.isUserValidForMiscCharge(_userId, _originalValue, _overrideValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUserValidForTurnMiscChargeOverrideOff</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a boolean value indicating whether or not the user is authorized to
    ///     turn miscellaneous charge overrides off.
    /// </summary>
    /// <returns>
    ///     This method always returns true.
    /// </returns>
    /// <remarks>
    ///     A business requirement has been changed, and we no longer need security on
    ///     price override releases.
    /// </remarks>
    public boolean isUserValidForTurnMiscChargeOverrideOff()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>