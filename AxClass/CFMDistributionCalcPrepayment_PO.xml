<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMDistributionCalcPrepayment_PO</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class calculates prepayment amounts distribution for purchase order.
/// </summary>
class CFMDistributionCalcPrepayment_PO
{
    PurchTable purchTable;

    boolean paymentRequestsEnabled;
    boolean isCalcOnlyPreInvoice;
    CFMLedgerDimensionConverterInterface cfmDimensionConverter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMDistributionCalcPrepayment_PO</c>.
    /// </summary>
    /// <param name="_purchTable">
    /// The source purchase order.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMDistributionCalcPrepayment_PO</c>.
    /// </returns>
    public static CFMDistributionCalcPrepayment_PO construct(PurchTable _purchTable)
    {
        CFMDistributionCalcPrepayment_PO distributionCalc = new CFMDistributionCalcPrepayment_PO();

        distributionCalc.initialize(_purchTable);

        return distributionCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates prepayment amounts distribution related to predefined source record.
    /// </summary>
    /// <param name="_prepaymentDistributionsHeader">
    /// The <c>CFMRefernceDistributionHeaderTmp</c> buffer to update.
    /// </param>
    /// <param name="_prepaymentDistributionLines">
    /// The <c>CFMRefernceDistributionLinesTmp</c> buffer to update.
    /// </param>
    public void calc(CFMReferenceDistributionHeaderTmp _prepaymentDistributionsHeader, CFMReferenceDistributionLinesTmp _prepaymentDistributionLines)
    {
        this.fillPrepaymentDistributionFromInvoice(_prepaymentDistributionsHeader, _prepaymentDistributionLines);

        if (paymentRequestsEnabled && !isCalcOnlyPreInvoice)
        {
            this.fillPrepaymentDistributionFromPR(_prepaymentDistributionsHeader, _prepaymentDistributionLines);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPrepaymentDistributionFromInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills distribution temporary tables with amounts from prepayment invoices.
    /// </summary>
    /// <param name="_prepaymentDistributionsHeader">
    /// The <c>CFMReferenceDistributionHeaderTmp</c> buffer to update.
    /// </param>
    /// <param name="_prepaymentDistributionLines">
    /// The <c>CFMReferenceDistributionLinesTmp</c> buffer to update.
    /// </param>
    protected void fillPrepaymentDistributionFromInvoice(CFMReferenceDistributionHeaderTmp _prepaymentDistributionsHeader, CFMReferenceDistributionLinesTmp _prepaymentDistributionLines)
    {
        VendInvoiceJour vendInvoiceJour;
        VendInvoicePurchLink vendInvoicePurchLink;

        while select PurchId, InvoiceId, InternalInvoiceId, InvoiceDate, numberSequenceGroup, DefaultDimension from vendInvoiceJour
            where vendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance
        exists join vendInvoicePurchLink
            where vendInvoiceJour.PurchId == vendInvoicePurchLink.PurchId
                && vendInvoiceJour.InvoiceId == vendInvoicePurchLink.InvoiceId
                && vendInvoiceJour.InternalInvoiceId == vendInvoicePurchLink.InternalInvoiceId
                && vendInvoiceJour.InvoiceDate == vendInvoicePurchLink.InvoiceDate
                && vendInvoicePurchLink.origPurchId == purchTable.purchId
        {
            _prepaymentDistributionsHeader.ReferenceDistributionId = vendInvoiceJour.InvoiceId;
            _prepaymentDistributionsHeader.TransDate = vendInvoiceJour.InvoiceDate;
            _prepaymentDistributionsHeader.HeaderRefRecId = vendInvoiceJour.RecId;
            _prepaymentDistributionsHeader.insert();

            VendInvoicetrans vendInvoiceTrans;
            select firstOnly DefaultDimension, TaxGroup, TaxItemGroup, TaxAmount, LineAmount from vendInvoiceTrans
                where vendInvoiceTrans.PurchId == vendInvoiceJour.PurchId
                   && vendInvoiceTrans.InvoiceId == vendInvoiceJour.InvoiceId
                   && vendInvoiceTrans.InternalInvoiceId == vendInvoiceJour.InternalInvoiceId
                   && vendInvoiceTrans.numberSequenceGroup == vendInvoiceJour.numberSequenceGroup
                   && vendInvoiceTrans.InvoiceDate == vendInvoiceJour.InvoiceDate;

            _prepaymentDistributionLines.DistributionHeader = _prepaymentDistributionsHeader.RecId;
            _prepaymentDistributionLines.LedgerDimension = cfmDimensionConverter.convertDefaultDimension(vendInvoiceTrans.DefaultDimension);
            _prepaymentDistributionLines.TaxGroup = vendInvoiceTrans.TaxGroup;
            _prepaymentDistributionLines.TaxItemGroup = vendInvoiceTrans.TaxItemGroup;
            _prepaymentDistributionLines.Amount = vendInvoiceTrans.LineAmount + vendInvoiceTrans.TaxAmount;
            _prepaymentDistributionLines.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPrepaymentDistributionFromPR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills distribution temporary tables with amounts from prepayment payment requests.
    /// </summary>
    /// <param name="_prepaymentDistributionsHeader">
    /// The <c>CFMReferenceDistributionHeaderTmp</c> buffer to update.
    /// </param>
    /// <param name="_prepaymentDistributionLines">
    /// The <c>CFMReferenceDistributionLinesTmp</c> buffer to update.
    /// </param>
    protected void fillPrepaymentDistributionFromPR(CFMReferenceDistributionHeaderTmp _prepaymentDistributionsHeader, CFMReferenceDistributionLinesTmp _prepaymentDistributionLines)
    {
        CFMPaymentRequestTable prepaymentPR;
        while select PaymentRequestId, PaymentDate from prepaymentPR
            where prepaymentPR.HeaderRefRecId == purchTable.RecId
               && prepaymentPR.SourceType == CFMPaymentRequestSourceType::PlannedPayment
               && prepaymentPR.Status != CFMPaymentRequestStatus::Canceled
        {
            _prepaymentDistributionsHeader.ReferenceDistributionId = prepaymentPR.PaymentRequestId;
            _prepaymentDistributionsHeader.TransDate = prepaymentPR.PaymentDate;
            _prepaymentDistributionsHeader.HeaderRefRecId = prepaymentPR.RecId;
            _prepaymentDistributionsHeader.insert();

            CFMPaymentRequestLine prepaymentPRLine;

            while select LedgerDimension, TaxGroup, TaxItemGroup, BalanceAmountCur from prepaymentPRLine
                where prepaymentPRLine.PaymentRequestTable == prepaymentPR.RecId
            {
                _prepaymentDistributionLines.DistributionHeader = _prepaymentDistributionsHeader.RecId;
                _prepaymentDistributionLines.LedgerDimension = prepaymentPRLine.LedgerDimension;
                _prepaymentDistributionLines.TaxGroup = prepaymentPRLine.TaxGroup;
                _prepaymentDistributionLines.TaxItemGroup = prepaymentPRLine.TaxItemGroup;
                _prepaymentDistributionLines.Amount = prepaymentPRLine.BalanceAmountCur;
                _prepaymentDistributionLines.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of <c>CFMDistributionCalcPrepayment_PO</c>.
    /// </summary>
    /// <param name="_purchTable">
    /// The source purchase order.
    /// </param>
    protected void initialize(PurchTable _purchTable)
    {
        purchTable = _purchTable;

        paymentRequestsEnabled = CFMParameters::isPaymentRequestsEnabled();
        cfmDimensionConverter = CFMLedgerDimensionConverterCache::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCalcOnlyPreInvoice</Name>
				<Source><![CDATA[
    final public boolean parmIsCalcOnlyPreInvoice(boolean _value = isCalcOnlyPreInvoice)
    {
        isCalcOnlyPreInvoice = _value;

        return isCalcOnlyPreInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>