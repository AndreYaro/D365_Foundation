<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountStatementContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data Contract class for <c>BankAccountStatement</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the Data Contract class for the <c>BankAccountStatement</c> SSRS Report.
/// </remarks>
[
    DataContractAttribute,
    SysOperationGroupAttribute('Period', "@SYS40", '1')
]
public class BankAccountStatementContract implements SysOperationValidatable
{
    TransDate fromDate;
    TransDate toDate;
    CompanyBankAccount bankAccount;
    boolean showReportingCurrency = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmBankAccount</Name>
				<Source><![CDATA[
    [
    DataMemberAttribute('BankAccount'),
    SysOperationLabelAttribute(literalStr("@SYS24585")),
    SysOperationHelpTextAttribute(literalStr("@SYS178344")),
    SysOperationGroupMemberAttribute('Period'),
    SysOperationDisplayOrderAttribute('3')
    ]
    public CompanyBankAccount parmBankAccount(CompanyBankAccount _bankAccount = bankAccount)
    {
        bankAccount = _bankAccount;
        return bankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter FromDate.
    /// </summary>
    /// <param name="_fromDate">
    /// The new value of the datacontract parameter FromDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter FromDate.
    /// </returns>
    [
        DataMemberAttribute('FromDate'),
        SysOperationLabelAttribute(literalstr("@SYS939")),
        SysOperationHelpTextAttribute(literalstr("@SYS26930")),
        SysOperationGroupMemberAttribute('Period'),
        SysOperationDisplayOrderAttribute('1')
    ]
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the datacontract parameter ToDate.
    /// </summary>
    /// <param name="_toDate">
    /// The new value of the datacontract parameter ToDate; optional.
    /// </param>
    /// <returns>
    ///  The current value of datacontract parameter ToDate.
    /// </returns>
    [
        DataMemberAttribute('ToDate'),
        SysOperationLabelAttribute(literalstr("@SYS15867")),
        SysOperationHelpTextAttribute(literalstr("@SYS26929")),
        SysOperationGroupMemberAttribute('Period'),
        SysOperationDisplayOrderAttribute('2')
    ]
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the parameters are valid.
    /// </summary>
    /// <returns>
    ///    true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean isValid = true;

        if (!this.parmBankAccount())
        {
            isValid = checkFailed("@SYS4003369");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowReportingCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Hidden parameter for reporting currency column visibility.
    /// </summary>
    /// <param name = "_showReportingCurrency">
    /// boolean value.
    /// </param>
    /// <returns>
    /// Returns True if the current ledger's reporting currency is not blank and it is not same as accounting currency.
    /// </returns>
    [ 
        DataMemberAttribute('ShowReportingCurrency'), 
        SysOperationControlVisibilityAttribute(false)
    ]
    public boolean parmShowReportingCurrency(boolean _showReportingCurrency = showReportingCurrency)
    {
        if (Ledger::reportingCurrency() && Ledger::accountingCurrency() != Ledger::reportingCurrency())
        {
            showReportingCurrency = true;
        }
        else
        {
            showReportingCurrency = _showReportingCurrency;
        }

        return showReportingCurrency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>