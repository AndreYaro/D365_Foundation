<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvWorkflowEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TrvWorkflowEventHandler</c> class implements <c>WorkflowEvent</c> interfaces.
/// </summary>
public class TrvWorkflowEventHandler implements WorkflowStartedEventHandler,
                                                WorkflowCompletedEventHandler,
                                                WorkflowCanceledEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Called when a cancel action is applied to a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The <c>WorkflowElementEventArgs</c> value that is used to retrieve the workflow context of the
    ///    workflow item that fired the event
    /// </param>
    public void canceled(WorkflowEventArgs _workflowElementEventArgs)
    {
        WorkflowContext workflowContext;
        ;

        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        if (workflowContext.parmTableId() == tableNum(TrvCashAdvance))
        {
           TrvCashAdvanceStateChangeMgr::updateCashAdvanceStatus(workflowContext.parmRecId(), TrvWorkflowCashAdvanceStatus::Created);
        }

        if (workflowContext.parmTableId() == tableNum(TrvRequisitionTable))
        {
            TrvRequisitionStateChangeManager::updateRequisitionStatus(workflowContext.parmRecId(), TrvRequisitionApprovalStatus::Create);
                        
            TrvWorkflowUtilities::clearPolicyJustifications(workflowContext, workflowContext.parmRecId(),
                                                            TrvPolicyViolationJustificationTypeEnum::TrvReqHeader, true);
            // clear policy violation logs when the travel requisition items are canceled
            TrvWorkflowUtilities::clearPolicyViolations(workflowContext.parmRecId(), tablenum(TrvRequisitionTable), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the approve action that is applied to a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    A value that obtains the workflow context of the workflow item that fired the event.
    /// </param>
    public void completed(WorkflowEventArgs _workflowElementEventArgs)
    {
        WorkflowContext         workflowContext;
        TrvExpenseTaxRecovery   trvExpenseTaxRecovery;

        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        switch (workflowContext.parmTableId())
        {
            case tableNum(TrvCashAdvance):
                TrvCashAdvanceStateChangeMgr::updateCashAdvanceStatus(workflowContext.parmRecId(), TrvWorkflowCashAdvanceStatus::Approved);
                break;

            case tableNum(TrvRequisitionTable):
                TrvRequisitionStateChangeManager::updateRequisitionStatus(workflowContext.parmRecId(), TrvRequisitionApprovalStatus::Approved);
                TrvRequisitionTable::find(workflowContext.parmRecId()).approvalCompleted();
                // update policy violation logs when the travel requisition items are approved
                TrvWorkflowUtilities::updateViolationsLog(workflowContext.parmRecId(), TrvWorkflowAction::Approve, true);
                break;

            case tableNum(TrvExpenseTaxRecovery):
                select forupdate firstonly trvExpenseTaxRecovery where trvExpenseTaxRecovery.RecId == workflowContext.parmRecId();

                if (trvExpenseTaxRecovery.RecId && trvExpenseTaxRecovery.Status == TrvTaxRecoveryStatus::PendingApproval)
                {
                    ttsbegin;
                    trvExpenseTaxRecovery.Status = TrvTaxRecoveryStatus::Approved;
                    trvExpenseTaxRecovery.doUpdate();
                    ttscommit;
                }

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>

    ///    Handles a start event for a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    A value that is used to obtain the workflow context of the workflow item that fired the event.
    /// </param>
    public void started(WorkflowEventArgs _workflowElementEventArgs)
    {
        WorkflowContext workflowContext;
        ;
        workflowContext = _workflowElementEventArgs.parmWorkflowContext();

        if (workflowContext.parmTableId() == tableNum(TrvRequisitionTable))
        {
           TrvRequisitionStateChangeManager::updateRequisitionStatus(workflowContext.parmRecId(), TrvRequisitionApprovalStatus::Pending);
        }

        if (workflowContext.parmTableId() == tableNum(TrvCashAdvance))
        {
            TrvCashAdvanceStateChangeMgr::updateCashAdvanceStatus(workflowContext.parmRecId(), TrvWorkflowCashAdvanceStatus::Submitted);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>