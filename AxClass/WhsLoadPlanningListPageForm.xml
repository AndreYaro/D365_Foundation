<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadPlanningListPageForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsLoadPlanningListPageForm</c> class contains the business logic of <c>WhsLoadPlanningListPage</c> form.
/// </summary>
public class WhsLoadPlanningListPageForm
{
    private WHSLoadTable loadTableTmpAllClosedLoadsCombinations;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLoadTableTmpAllClosedLoadsCombinations</Name>
				<Source><![CDATA[
    /// <summary>
    /// It creates if it hasn't been created yet, and returns InMemory WhsLoadTable with 2 records representing closed loads
    /// </summary>
    /// <returns>InMemory WhsLoadTable with 2 records representing closed loads</returns>
    internal WHSLoadTable getLoadTableTmpAllClosedLoadsCombinations()
    {
        void createNewClosedLoadFieldsCombination(WHSLoadDirection _loadDirection, WHSLoadStatus _loadStatus)
        {
            loadTableTmpAllClosedLoadsCombinations.LoadDirection    = _loadDirection;
            loadTableTmpAllClosedLoadsCombinations.LoadStatus       = _loadStatus;
            loadTableTmpAllClosedLoadsCombinations.LoadId           = strFmt("%1%2", loadTableTmpAllClosedLoadsCombinations.LoadDirection, loadTableTmpAllClosedLoadsCombinations.LoadStatus);
            loadTableTmpAllClosedLoadsCombinations.doInsert();
        }

        if (!loadTableTmpAllClosedLoadsCombinations.isTmp())
        {
            loadTableTmpAllClosedLoadsCombinations.setTmp();
            createNewClosedLoadFieldsCombination(WHSLoadDirection::Inbound, WHSLoadStatus::Received);
            createNewClosedLoadFieldsCombination(WHSLoadDirection::Outbound, WHSLoadStatus::Shipped);
        }

        return loadTableTmpAllClosedLoadsCombinations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryAllowsClosedLoads</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check, if closed loads are allowed by the ranges and filters of the given query.
    /// It's used to update Show closed checkbox value on the form when new query is applied (e.g. by changing saved view).
    /// Rather than analysing query filters and ranges, that can be set in many different ways, we use more reliable way:
    /// Load is considered closed when: 
    /// (LoadDirection, LoadStatus) = (Inbound, Received), or
    /// (LoadDirection, LoadStatus) = (Outbound, Shipped)
    /// So, we create 'In memory' 2 Loads with these 2 combinations, then run on them query with filters and ranges of the _query2Check of the 2 fields,
    /// if it returns any of the 2 records, it means closed loads are allowed
    /// </summary>
    /// <param name="_query2Check">Query to check</param>
    /// <returns>true if closed loads are allowed by the ranges and filters of the query; otherwise, false.</returns>
    internal boolean queryAllowsClosedLoads(Query _queryToCheck)
    {
        boolean retQueryAllowsClosedLoads = true;

        QueryBuildDataSource qbdsOfQueryToCheck = _queryToCheck.dataSourceTable(tableNum(WHSLoadTable));
        if (qbdsOfQueryToCheck)
        {
            FieldId loadStatusFieldId       = fieldNum(WHSLoadTable, LoadStatus);
            FieldId LoadDirectionFieldId    = fieldNum(WHSLoadTable, LoadDirection);

            Query queryChecker = new Query();
            QueryBuildDataSource qbdsOfChecker = queryChecker.addDataSource(tableNum(WhsLoadTable), qbdsOfQueryToCheck.name());
            qbdsOfChecker.addSelectionField(loadStatusFieldId);
            qbdsOfChecker.firstOnly(true);
          
            WHSQueryHelper::copyFieldQueryRanges(qbdsOfQueryToCheck, qbdsOfChecker, loadStatusFieldId);
            WHSQueryHelper::copyFieldQueryRanges(qbdsOfQueryToCheck, qbdsOfChecker, LoadDirectionFieldId);
            WHSQueryHelper::copyFieldQueryFilters(_queryToCheck, qbdsOfQueryToCheck, queryChecker, qbdsOfChecker, fieldId2Name(tableNum(WHSLoadTable), loadStatusFieldId));
            WHSQueryHelper::copyFieldQueryFilters(_queryToCheck, qbdsOfQueryToCheck, queryChecker, qbdsOfChecker, fieldId2Name(tableNum(WHSLoadTable), LoadDirectionFieldId));
  
            QueryRun qRunChecker = new QueryRun(queryChecker);
            qRunChecker.setRecord(this.getLoadTableTmpAllClosedLoadsCombinations());
            retQueryAllowsClosedLoads = qRunChecker.next();
        }

        return retQueryAllowsClosedLoads;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcShowClosedRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates value for the range deciding if showing closed loads.
    /// </summary>
    /// <param name="_showClosedLoads">
    /// Determines whether to include closed loads or not.
    /// </param>
    /// <returns>
    /// range value
    /// </returns>
    internal str calcShowClosedRangeValue(boolean _showClosedLoads)
    {
        str retRangeValue = SysQuery::valueUnlimited();

        if (!_showClosedLoads)
        {
            retRangeValue = strFmt('(((%1.%2 == %4) && (%1.%3 != %5)) || ((%1.%2 == %6) && (%1.%3 != %7)))',
                formDataSourceStr(WHSLoadPlanningListPage, WHSLoadTable),   // 1
                fieldStr(WHSLoadTable, LoadDirection),                      // 2
                fieldStr(WHSLoadTable, LoadStatus),                         // 3
                any2Int(WHSLoadDirection::Outbound),                        // 4
                any2Int(WHSLoadStatus::Shipped),                            // 5
                any2Int(WHSLoadDirection::Inbound),                         // 6
                any2Int(WHSLoadStatus::Received));                          // 7
        }

        return retRangeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens <c>TMSAddRouteToLoad</c> form for load.
    /// </summary>
    /// <param name="_whsLoadTable">
    /// The load that the form is opened for.
    /// </param>
    public void addRoute(WHSLoadTable  _whsLoadTable)
    {
        MenuFunction    menuFunction;
        Args            args = new Args();

        menuFunction = new MenuFunction(menuitemDisplayStr(TMSAddRouteToLoad), MenuItemType::Display);
        args.parm(_whsLoadTable.LoadId);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>apptId_jumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens <c>TMSAppointment</c> form for an appointment.
    /// </summary>
    /// <param name="_caller">
    /// Caller object.
    /// </param>
    /// <param name="_value">
    /// Value corresponds to the appointment id.
    /// </param>
    public void apptId_jumpRef(Object  _caller, str    _value)
    {
        Args             args = new Args();
        TMSAppointment  appt = TMSAppointment::find(_value);

        args.caller(_caller);

        if (appt)
        {
            args.record(appt);
        }

        new MenuFunction(menuitemDisplayStr(TMSAppointment), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectionHelper</Name>
				<Source><![CDATA[
    private MultiSelectionHelper getSelectionHelper(FormDataSource _dataSource)
    {
        MultiSelectionHelper helper = MultiSelectionHelper::construct();

        helper.parmDatasource(_dataSource);

        return helper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>btnPostShipTransfer_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ships the transfer orders on a load.
    /// </summary>
    /// <param name = "_whsLoadTableDS">
    /// Given data source.
    /// </param>
    public void btnPostShipTransfer_clicked(FormDataSource _whsLoadTableDS)
    {
        WHSLoadTable loadTable;

        MultiSelectionHelper helper = this.getSelectionHelper(_whsLoadTableDS);

        loadTable = helper.getFirst();

        while (loadTable.RecId)
        {
            if (WHSShipConfirm::canShipTransferOrder(loadTable))
            {
                WHSShipConfirm::postTransferShip(loadTable.LoadId);
            }
            else
            {
                warning(strFmt("@WAX:LoadProcessCancel", loadTable.LoadId));
            }

            loadTable = helper.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>btnReverseShipConfirm_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the ship confirmation.
    /// </summary>
    /// <param name = "_whsLoadTableDS">
    /// Given data source.
    /// </param>
    public void btnReverseShipConfirm_clicked(FormDataSource _whsLoadTableDS)
    {
        WHSLoadTable loadTable;

        MultiSelectionHelper helper = this.getSelectionHelper(_whsLoadTableDS);

        loadTable = helper.getFirst();

        while (loadTable.RecId)
        {
            WHSReverseShipConfirm reverseShipConfirm = WHSReverseShipConfirm::newFromLoadTable(loadTable);

            reverseShipConfirm.reverseShipConfirm();

            loadTable = helper.getNext();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>btnCancelPackingSlips_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels outbound packing slips.
    /// </summary>
    /// <param name = "_loadTable">
    /// The given load.
    /// </param>
    public void btnCancelPackingSlips_clicked(WHSLoadTable _loadTable)
    {
        if (Box::yesNo("@WAX:LoadPackingSlipCancel", DialogButton::No) == DialogButton::Yes)
        {
            WHSLoadTableCustPackingSlipJour loadCustJour;
            CustPackingSlipJour             custJour;

            while select custJour
                where custJour.Qty
                exists join loadCustJour
                    where loadCustJour.WHSLoadTableLoadId       == _loadTable.LoadId
                    &&    loadCustJour.WHSLoadTableDataAreaId   == _loadTable.DataAreaId
                    &&    loadCustJour.CustPackingSlipJourRecId == custJour.RecId
            {
                Args args = new Args();
                args.record(custJour);
                args.parmEnum(enum2int(DocumentStatus::PackingSlip));

                new MenuFunction(menuItemActionStr(SalesFormLetter_PackingSlipCancel), MenuItemType::Action).run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>btnCancelProductReceipt_clicked</Name>
				<Source><![CDATA[
    public void btnCancelProductReceipt_clicked(WHSLoadTable _loadTable)
    {
        if (Box::yesNo("@WAX:CancelProductReceiptLoad", DialogButton::No) == DialogButton::Yes)
        {
            WHSCancelProductReceiptService::cancelProductReceiptForLoad(_loadTable.LoadId, _loadTable.DataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>btnInboundShipConfirm_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ship confirms selected inbound loads.
    /// </summary>
    /// <param name="_whsLoadTableDS">
    /// Given data source.
    /// </param>
    public void btnInboundShipConfirm_clicked(FormDataSource  _whsLoadTableDS)
    {
        WHSPostPackingSlip::shipConfirmAllLoads(WhsLoadPlanningListPageForm::getLoadIdsFromDataSource(_whsLoadTableDS));
    }

]]></Source>
			</Method>
			<Method>
				<Name>btnProductReceipt_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts product receipt for a load.
    /// </summary>
    /// <param name="_whsLoadTable">
    /// Load for which we want to post product receipt.
    /// </param>
    public void btnProductReceipt_clicked(WHSLoadTable  _whsLoadTable)
    {
        if (DialogButton::Yes == Box::yesNoOnce("@SYS332892", strFmt("@WAX:Warning_UpdateProductReceiptFromLoad_WillShipConfirm", _whsLoadTable.LoadId), DialogButton::No))
        {
            var postPackingSlip = WHSPostPackingSlip::construct();

            if (WHSParameters::find().AllowMultipleProductReceiptsForLoad == WHSAllowMultipleProductReceiptsForLoad::Prompt)
            {                
                boolean allowMultipleProductReceipts = DialogButton::Yes == Box::yesNo("@WAX:AllowMultipleProductReceiptsWhenPostingLoad", DialogButton::No, strFmt("@WAX:AllowMultipleProductReceiptsWhenPostingLoadCaption", _whsLoadTable.LoadId));
                postPackingSlip.parmAllowMultipleProductReceipts(allowMultipleProductReceipts);
            }
            
            postPackingSlip.preparePackingSlipPosting(_whsLoadTable.LoadId);
            postPackingSlip.postPackingSlipAndUpdateLoadAndShipment(_whsLoadTable.LoadId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAcceptedUnderOverDelivery</Name>
				<Source><![CDATA[
    internal boolean hasAcceptedUnderOverDelivery(WHSLoadTable _whsLoadTable)
    {
        int lineNum = 0;
        int recordsCountLimit = 50;

        WHSLoadLine loadLine;
        WHSLoadLine tmpLoadLine;
        tmpLoadLine.setTmp();

        while select loadLine where loadLine.LoadId == _whsLoadTable.LoadId
        {
            if (loadLine.isUnderOrOverDelivery())
            {
                lineNum++;
                if (lineNum > recordsCountLimit)
                {
                    break;
                }

                this.createTmpLoadLineFromLoadLine(loadLine, tmpLoadLine);
            }
        }

        boolean anyUnderOverDeliveryDetected = lineNum > 0;
        if (anyUnderOverDeliveryDetected)
        {
            boolean tooManyRecords = lineNum > recordsCountLimit;
            
            FormRun acceptExceptionsDialog = this.openAcceptExceptionsDialog(tmpLoadLine, tooManyRecords, recordsCountLimit);
            boolean shouldContinue = acceptExceptionsDialog.shouldContinue();
            return shouldContinue;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openAcceptExceptionsDialog</Name>
				<Source><![CDATA[
    private FormRun openAcceptExceptionsDialog(WHSLoadLine _tmpLoadLine, boolean _tooManyRecords, int _recordsCountLimit)
    {
        Args args = new Args();
        args.name(formStr(WHSConfirmQuantityExceptionsDialog));
        args.record(_tmpLoadLine);

        FormRun acceptExceptionsDialog = classfactory.formRunClass(args);
        if (_tooManyRecords)
        {
            acceptExceptionsDialog.setTooManyRecordsDetected(_recordsCountLimit);
        }
        acceptExceptionsDialog.init();
        acceptExceptionsDialog.run();
        acceptExceptionsDialog.wait();

        return acceptExceptionsDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpLoadLineFromLoadLine</Name>
				<Source><![CDATA[
    private void createTmpLoadLineFromLoadLine(WHSLoadLine _loadLine, WHSLoadLine _tmpLoadLine)
    {
        _tmpLoadLine.clear();
        buf2Buf(_loadLine, _tmpLoadLine);
        _tmpLoadLine.doInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadTender_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a transportation tender for the load and opens <c>TMSTransportationTender</c> form.
    /// </summary>
    /// <param name="_whsLoadTable">
    /// Load record that transportation tender is created for.
    /// </param>
    public void createLoadTender_clicked(WHSLoadTable  _whsLoadTable)
    {
        TMSTransportTender::createTransTender(_whsLoadTable);

        new MenuFunction(menuitemDisplayStr(TMSTransportationTender), MenuItemType::Display).run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLoadIdsFromDataSource</Name>
				<Source><![CDATA[
    internal static List getLoadIdsFromDataSource(FormDataSource  _whsLoadTableDS)
    {
        List            loadIdList;
        WHSLoadTable    loadTable;

        loadIdList = new List(Types::String);

        for (loadTable = _whsLoadTableDS.getFirst(true) ? _whsLoadTableDS.getFirst(true) : _whsLoadTableDS.cursor();
        loadTable;
        loadTable = _whsLoadTableDS.getNext())
        {
            loadIdList.addEnd(loadTable.LoadId);
        }

        return loadIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedLoadIds</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds selected load ids on the form.
    /// </summary>
    /// <param name="_whsLoadTableDS">
    /// Form date source containing selected loads.
    /// </param>
    /// <returns>
    /// Container containing selected load ids.
    /// </returns>
    public container getSelectedLoadIds(FormDataSource   _whsLoadTableDS)
    {
        WHSLoadTable    loadTable = _whsLoadTableDS.getFirst(true) ? _whsLoadTableDS.getFirst(true) : _whsLoadTableDS.cursor();
        container       ret;

        while (loadTable)
        {
            ret += loadTable.LoadId;
            loadTable = _whsLoadTableDS.getNext();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>manualRoute_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a route manually to the load.
    /// </summary>
    /// <param name="_whsLoadTable">
    /// Load record that route will be assigned.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Exception is thrown when carrier code is not defined for the load.
    /// </exception>
    public void manualRoute_clicked(WHSLoadTable   _whsLoadTable)
    {
        TMSRouteCode            routeCode;
        MenuFunction            menuFunction;
        Args                    args = new Args();

        if (_whsLoadTable.CarrierCode != '')
        {
            routeCode = TMSRouteAssignment::manualAssignment(_whsLoadTable.LoadId);
            menuFunction = new MenuFunction(menuitemDisplayStr(TMSRouteWorkbench_ManualRoute), MenuItemType::Display);
            args.parm(routeCode);
            menuFunction.run(args);
        }
        else
        {
            throw error("@TRX1294");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipWorkLine_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Skips work lines created for the load when Skip Work Line button is clicked.
    /// </summary>
    /// <param name="_whsLoadTable">
    /// Load record.
    /// </param>
    public void skipWorkLine_clicked(WHSLoadTable  _whsLoadTable)
    {
        _whsLoadTable.skipWorkLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unshipQty_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reduce quantity for a selected load line
    /// </summary>
    /// <param name="_loadLine">
    /// A load line for which we want to reduce quantity
    /// </param>
    public void unshipQty_clicked(WHSLoadLine _loadLine)
    {
        WHSUnShip unship;

        unship = new WHSUnShip();

        unship.buildUnshipForm(_loadLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsLoadList_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints Load list report when Load List button is clicked.
    /// </summary>
    /// <param name="_caller">
    /// Caller form object.
    /// </param>
    /// <param name="_whsLoadTable">
    /// Load record.
    /// </param>
    public void whsLoadList_clicked(Object _caller, WHSLoadTable  _whsLoadTable)
    {
        Args args = new Args(ssrsReportStr(WHSLoadList, Report));
        args.caller(_caller);
        args.menuItemType(MenuItemType::Display);
        args.menuItemName(menuItemDisplayStr(WHSLoadPlanningListPage));
        args.record(_whsLoadTable);
        args.parm(_whsLoadTable.LoadId);

        WHSLoadListController srsReportRun = new WHSLoadListController();
        srsReportRun.parmReportName(ssrsReportStr(WHSLoadList, Report));
        srsReportRun.parmArgs(args);
        srsReportRun.parmShowDialog(false);
        srsReportRun.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsPickListShipping_clicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints pick list of the load when Pick List button is clicked.
    /// </summary>
    /// <param name="_caller">
    /// Caller form object.
    /// </param>
    /// <param name="_whsLoadTable">
    /// Load record.
    /// </param>
    public void whsPickListShipping_clicked(Object _caller, WHSLoadTable   _whsLoadTable)
    {
        Args args = new Args(ssrsReportStr(WHSPickListShipping, Report));
        args.caller(_caller);
        args.menuItemType(MenuItemType::Display);
        args.menuItemName(menuItemDisplayStr(WHSLoadPlanningListPage));
        args.record(_whsLoadTable);
        args.parm(_whsLoadTable.LoadId);

        WHSPickListShippingController srsReportRun = new WHSPickListShippingController();
        srsReportRun.parmReportName(ssrsReportStr(WHSPickListShipping, Report));
        srsReportRun.parmArgs(args);
        srsReportRun.parmShowDialog(false);
        srsReportRun.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldBtnPostShipTransferBeVisible</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean shouldBtnPostShipTransferBeVisible()
    {
        return TMSParameters::find().SeparateShipConfirmationForMixedLoads;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>