<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendConsolidatedInvoiceCreation_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VendConsolidatedInvoiceCreation_JP</c> class provides a dialog to create consolidated invoice for vendor.
/// </summary>
public class VendConsolidatedInvoiceCreation_JP extends ConsolidatedInvoice_JP implements BatchRetryable
{
    Args argsLoc;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        executionDate,
        consDateSpecified,
        isConsDateSpecified
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        #ISOCountryRegionCodes
        super();
        GlobalizationInstrumentationHelper::featureRunByCountryRegionCodes([
            [#isoJP, GlobalizationConstants::FeatureReferenceJP00011] ],
            funcName()
        );
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when a <c>SysLastValue</c> record cannot be found when the code calls the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        this.initQuery();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the query used by the creation of consolidated invoice.
    /// </summary>
    void initQuery()
    {
        Query query;
        VendConsInvoiceType_JP vendConsInvoiceType;

        vendConsInvoiceType = VendConsInvoiceType_JP::construct(argsLoc.record());
        query = vendConsInvoiceType.buildConstructQuery();
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (TaxConsInvoice_JP::isTaxDifferencePostingOnConsInvoiceEnabled(false))
        {
            VendConsInvoiceType_JP::createV2(
                queryRun.query(),
                executionDate,
                isConsDateSpecified,
                consDateSpecified,
                consCurrency);
        }
        else
        {
            VendConsInvoiceType_JP::create(
                queryRun.query(),
                executionDate,
                isConsDateSpecified,
                consDateSpecified);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args parmArgs(Args _args = argsLoc)
    {
        argsLoc = _args;
        return argsLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion, #CurrentList, queryrun.pack()];
        packed = SysPackExtensions::appendVariableToPack(packed, classStr(VendConsolidatedInvoiceCreation_JP), varStr(consCurrency), consCurrency);

        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks the parameters that were packed during the call to the <c>pack</c> method.
    /// </summary>
    /// <param name="packedClass">
    ///    A container that holds the packed parameters.
    /// </param>
    /// <returns>
    ///    True if unpack succeeds
    /// </returns>
    /// <remarks>
    ///    The sequence of the parameters in the container must be in the same order as in the <c>pack</c>
    ///    method.
    /// </remarks>
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass, 1);
        PackedQueryRun packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = packedClass;
                consCurrency = SysPackExtensions::extractPackedVariable(packedClass, classStr(VendConsolidatedInvoiceCreation_JP), varStr(consCurrency));
                if (SysQuery::isPackedOk(packedQuery))
                    queryRun = new QueryRun(packedQuery);
                else
                    this.initQuery();
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>VendConsolidatedInvoiceCreation_JP</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>VendConsolidatedInvoiceCreation_JP</c> class.
    /// </returns>
    static VendConsolidatedInvoiceCreation_JP construct()
    {
        return new VendConsolidatedInvoiceCreation_JP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Here goes a description of the class
    /// </summary>
    /// <returns>The description text of the class</returns>
    static ClassDescription description()
    {
        return "@GLS60235";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        VendConsolidatedInvoiceCreation_JP vendConsolidatedInvoiceCreation = VendConsolidatedInvoiceCreation_JP::construct();
        vendConsolidatedInvoiceCreation.parmArgs(args);
        if (vendConsolidatedInvoiceCreation.prompt())
            vendConsolidatedInvoiceCreation.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>