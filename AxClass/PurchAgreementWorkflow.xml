<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchAgreementWorkflow</c> class is used to to activate a purchase agreement workflow by calling
/// <c>SubmitToWorkflow</c> class or the <c>ResubmitToWorkflow</c> class for purhcase agreement workflow.
/// </summary>
public class PurchAgreementWorkflow
{
    PurchAgreementHeader        purchAgreementHeader;
    WorkflowVersionTable        workflowVersionTable;
    WorkflowComment             workflowComment;
    boolean                     submit;
    WorkflowWorkItemTable       workflowWorkItemTable;
    userId                      userId;
    menuItemName                menuItemName;
    workflowTypeName            workflowTemplateName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialogOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens a dialog box for submitting a free text invoice.
    /// </summary>
    /// <returns>
    /// True if the dialog box was closed by pressing the Ok button; otherwise, False.
    /// </returns>
    public boolean dialogOk()
    {
        WorkflowSubmitDialog            workflowSubmitDialog;
        WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;
        boolean                         isClosedok;

        if (menuItemName == menuitemactionstr(PurchAgreementWorkflowSubmit))
        {
            workflowSubmitDialog = WorkflowSubmitDialog::construct(this.parmWorkflowVersionTable());
            workflowSubmitDialog.run();
            this.parmWorkflowComment(workflowSubmitDialog.parmWorkflowComment());
            isClosedok = workflowSubmitDialog.parmIsClosedOK();
        }
        else if (menuItemName == menuitemactionstr(PurchAgreementWorkflowReSubmit))
        {
            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct(workflowWorkItemTable,
                                                                                    WorkflowWorkItemActionType::Resubmit,
                                                                                    new MenuFunction(menuitemactionstr(PurchAgreementWorkflowReSubmit), MenuItemType::Action));
            workflowWorkItemActionDialog.run();
            this.parmWorkflowComment(workflowWorkItemActionDialog.parmWorkflowComment());
            isClosedok      = workflowWorkItemActionDialog.parmIsClosedOK();
            userId          = workflowWorkItemActionDialog.parmTargetUser();
        }

        return isClosedok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the purchase agreement workflow.
    /// </summary>
    /// <param name="_documentRecord">
    /// The document record for which the workflow is initialize.
    /// </param>
    /// <param name="_menuItemName">
    /// The name of the caller menu item.
    /// </param>
    /// <param name="_workflowVersionTable">
    /// A record in the <c>WorkflowVersionTable</c> table.
    /// </param>
    /// <param name="_workflowWorkItemTable">
    /// A record in the <c>WorkflowWorkItemTable</c> table.
    /// </param>
    public void init(Common                     _documentRecord,
                    menuItemName                _menuItemName,
                    WorkflowVersionTable        _workflowVersionTable,
                    WorkflowWorkItemTable       _workflowWorkItemTable)
    {
        this.parmPurchAgreementHeader(_documentRecord);
        this.parmSubmit(_menuItemName == menuitemactionstr(PurchAgreementWorkflowSubmit));
        this.parmMenuItemName(_menuItemName);

        this.parmWorkflowVersionTable(_workflowVersionTable);
        this.parmWorkflowWorkItemtable(_workflowWorkItemTable);
        this.parmWorkflowTemplateName(this.parmWorkflowVersionTable().workflowTable().TemplateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMenuItemName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the name of the workflow menu item.
    /// </summary>
    /// <param name="_menuItemName">
    /// The menu item name to set.
    /// </param>
    /// <returns>
    /// The current menu item name.
    /// </returns>
    public menuItemName parmMenuItemName(menuItemName _menuItemName = menuItemName)
    {
        menuItemName = _menuItemName;

        return menuItemName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchAgreementHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>purchAgreementHeader</c> record.
    /// </summary>
    /// <param name="_purchAgreementHeader">
    /// The <c>PurchAgreementHeader</c> record to set.
    /// </param>
    /// <returns>
    /// The current <c>purchAgreementHeader</c> record.
    /// </returns>
    public PurchAgreementHeader parmPurchAgreementHeader(PurchAgreementHeader _purchAgreementHeader = purchAgreementHeader)
    {
        purchAgreementHeader = _purchAgreementHeader;

        return purchAgreementHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the value of the submit class variable.
    /// </summary>
    /// <param name="_submit">
    /// The value of submit class variable to set.
    /// </param>
    /// <returns>
    /// The current value of the submit class variable.
    /// </returns>
    public boolean parmSubmit(boolean _submit = submit)
    {
        submit = _submit;

        return submit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>WorkflowComment</c> record.
    /// </summary>
    /// <param name="_workflowComment">
    /// The <c>WorkflowComment</c> record to set.
    /// </param>
    /// <returns>
    /// The current <c>WorkflowComment</c> record.
    /// </returns>
    public WorkflowComment parmWorkflowComment(WorkflowComment _workflowComment = workflowComment)
    {
        workflowComment = _workflowComment;

        return workflowComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowTemplateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the template name of the free text invoice workflow.
    /// </summary>
    /// <param name="_workflowTemplateName">
    /// The template name of the free text invoice workflow to set.
    /// </param>
    /// <returns>
    /// The current template name of the free text invoice workflow.
    /// </returns>
    public workflowTypeName parmWorkflowTemplateName(workflowTypeName _workflowTemplateName = workflowTemplateName)
    {
        workflowTemplateName = _workflowTemplateName;

        return workflowTemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowVersionTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>WorkflowVersionTable</c> record.
    /// </summary>
    /// <param name="_workflowVersionTable">
    /// The <c>WorkflowVersionTable</c> record to set.
    /// </param>
    /// <returns>
    /// The current <c>WorkflowVersionTable</c> record.
    /// </returns>
    public WorkflowVersionTable parmWorkflowVersionTable(WorkflowVersionTable _workflowVersionTable = workflowVersionTable)
    {
        workflowVersionTable = _workflowVersionTable;

        return workflowVersionTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkflowWorkItemtable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>WorkflowWorkItemTable</c> record.
    /// </summary>
    /// <param name="_workflowWorkItemTable">
    /// The <c>WorkflowWorkItemTable</c> record to set.
    /// </param>
    /// <returns>
    /// The current <c>WorkflowWorkItemTable</c> record.
    /// </returns>
    public WorkflowWorkItemTable parmWorkflowWorkItemtable(WorkflowWorkItemTable _workflowWorkItemTable = workflowWorkItemTable)
    {
        workflowWorkItemTable = _workflowWorkItemTable;

        return workflowWorkItemTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resubmits the purchase agreement to workflow.
    /// </summary>
    /// <remarks>
    /// This method is called from the workflow framework when the purchase agreement task or approval is resubmitted.
    /// </remarks>
    public void reSubmit()
    {
        this.checkPurchAgreementOwnerCLM();

        Object      purchAgreementHeader_ds;

        ttsbegin;

        WorkflowWorkItemActionManager::dispatchWorkItemAction(workflowWorkItemTable,
                                                                workflowComment,
                                                                userId,
                                                                WorkflowWorkItemActionType::Resubmit,
                                                                menuItemName);

        purchAgreementHeader_ds                 = FormDataUtil::getFormDataSource(purchAgreementHeader);
        purchAgreementHeader.WorkflowStatus_PSN = PurchAgreementWorkflowStatus::Submitted;

        if (purchAgreementHeader_ds)
        {
            purchAgreementHeader_ds.write();
            purchAgreementHeader_ds.refresh();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Activates the purchase agreement workflow.
    /// </summary>
    /// <remarks>
    /// This method starts the workflow configuration by calling the <c>activateFromWorkflowTemplate</c>
    /// method of the <c>Workflow</c> class by using information about the purchse agreement record.
    /// </remarks>
    public void submit()
    {
        this.checkPurchAgreementOwnerCLM();

        Object      purchAgreementHeader_ds;

        Workflow::activateFromWorkflowType(this.parmWorkflowTemplateName(),
                                                purchAgreementHeader.RecId,
                                                this.parmWorkflowComment(),
                                                NoYes::No);

        purchAgreementHeader_ds                 = FormDataUtil::getFormDataSource(purchAgreementHeader);
        purchAgreementHeader.WorkflowStatus_PSN = PurchAgreementWorkflowStatus::Submitted;

        if (purchAgreementHeader_ds)
        {
            purchAgreementHeader_ds.write();
            purchAgreementHeader_ds.refresh();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchAgreementOwnerCLM</Name>
				<Source><![CDATA[
    internal void checkPurchAgreementOwnerCLM()
    {
        if (purchAgreementHeader && purchAgreementHeader.isAgreementCLMOwned())
        {
            throw error(strFmt("@CLMIntegration:ErrorWhenSubmitCLMOwnedPurchAgreement", purchAgreementHeader.PurchNumberSequence));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchAgreementWorkflow construct()
    {
        return new PurchAgreementWorkflow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Submits a purchase agreement document and starts the corresponding workflow.
    /// </summary>
    /// <param name="_args">
    /// An <c>Args</c> value from the caller.
    /// </param>
    public static void main(Args _args)
    {
        PurchAgreementWorkflow      purchAgreementWorkflow;
        PurchAgreementHeader        purchAgreementHeader;

        purchAgreementHeader    =  PurchAgreementHeader::find(_args.record().RecId);

        if (purchAgreementHeader.isAgreementCLMOwned())
        {
            return;
        }

        if (purchAgreementHeader.WorkflowStatus_PSN == PurchAgreementWorkflowStatus::NotSubmitted
            || purchAgreementHeader.WorkflowStatus_PSN == PurchAgreementWorkflowStatus::Returned
            || purchAgreementHeader.WorkflowStatus_PSN == PurchAgreementWorkflowStatus::ChangeRequested)
        {
            purchAgreementWorkflow  = PurchAgreementWorkflow::construct();
            if (_args.menuItemName() == menuitemactionstr(PurchAgreementWorkflowSubmit)
                || _args.menuItemName() == menuitemactionstr(PurchAgreementWorkflowReSubmit))
            {
                purchAgreementWorkflow.init(_args.record(),
                                        _args.menuItemName(),
                                        _args.caller().getActiveWorkflowConfiguration(),
                                        _args.caller().getActiveWorkflowWorkItem());
            }
            else
            {
                purchAgreementWorkflow.init(_args.record(),
                                            _args.menuItemName(),
                                            null,
                                            null);
            }

            if (purchAgreementWorkflow.dialogOk())
            {
                if (purchAgreementWorkflow.parmSubmit())
                {
                    purchAgreementWorkflow.submit();
                }

                else
                {
                    purchAgreementWorkflow.reSubmit();
                }

                if (_args.menuItemName() == menuitemactionstr(PurchAgreementWorkflowSubmit) ||
                    _args.menuItemName() == menuitemactionstr(PurchAgreementWorkflowReSubmit))
                {
                    _args.caller().updateWorkflowControls();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>