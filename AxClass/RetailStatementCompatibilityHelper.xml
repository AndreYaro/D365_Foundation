<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStatementCompatibilityHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailStatementCompatibilityHelper</c> class is a helper class for getting
/// information for statements to support backward compatibility.
/// </summary>
public static class RetailStatementCompatibilityHelper
{
    private static ItemInfo ItemInfoInstance = null;
    private static boolean HasNewFields = false;
    private static boolean HasWmsLocationIdField = false;
    
    public const str AggregationHeaderRecIdPropertyName = 'AggregationHeaderRecId';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyNewAggregationCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get if new aggregation criteria should be applied, by checking if ItemInfo contains new aggregation fields.
    /// The new aggregation criteria does not use InventTransId but adds LinePercentageDiscount, then when creating
    /// orders we find sales transactions based on these new fields in addition to the original.
    /// </summary>
    /// <returns>True if new aggregation criteria should be applied; otherwise, false.</returns>
    [SysObsolete('Use aggregateBeforePosting flag instead', false, 30\06\2020)]
    public static boolean applyNewAggregationCriteria()
    {
        return RetailParameters::find().aggregateBeforePosting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAggregatedWmsLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get if itemInfo contains the WmsLocationId field.
    /// </summary>
    /// <returns>True if new aggregation criteria should be applied; otherwise, false.</returns>
    public static boolean useAggregatedWmsLocationId()
    {
        RetailStatementCompatibilityHelper::initialize();

        return HasWmsLocationIdField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private static void initialize()
    {
        if (ItemInfoInstance == null)
        {
            ItemInfoInstance = new ItemInfo();

            HasNewFields = ReflectionHelper::hasObjectProperty(ItemInfoInstance, 'LinePercentageDiscount')
                        && ReflectionHelper::hasObjectProperty(ItemInfoInstance, 'ReturnLineNum')
                        && ReflectionHelper::hasObjectProperty(ItemInfoInstance, 'ReturnStore')
                        && ReflectionHelper::hasObjectProperty(ItemInfoInstance, 'ReturnTerminalId')
                        && ReflectionHelper::hasObjectProperty(ItemInfoInstance, 'ReturnTransactionId');

            HasWmsLocationIdField = ReflectionHelper::hasObjectProperty(ItemInfoInstance, 'WmsLocationId');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAggregationHeaderRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the AggregationHeader.RecId from the CustomerOrderInfo in a backwards compatible way.
    /// </summary>
    /// <param name = "_customerOrderInfo">The CustomerOrderInfo object.</param>
    /// <returns>The RecId if found; otherwise, zero.</returns>
    public static RecId getAggregationHeaderRecId(CustomerOrderInfo _customerOrderInfo)
    {
        var extensionProps = _customerOrderInfo.ExtensionProperties;
        for (int i = 0; i < extensionProps.get_Count(); i++)
        {
            var commerceProperty = extensionProps.get_Item(i);
            
            if (commerceProperty.get_Key() == RetailStatementCompatibilityHelper::AggregationHeaderRecIdPropertyName)
            {
                return commerceProperty.get_Value();
            }
        }
  
        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
        eventSource.EventWriteStatementsAggregationHeaderRecIdNotFound();

        return 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>