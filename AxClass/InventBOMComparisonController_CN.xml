<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBOMComparisonController_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// control class for InventBOMComparison_CN report
/// </summary>
class InventBOMComparisonController_CN extends SrsReportRunController implements BatchRetryable
{
    InventBOMComparisonTmp_CN       inventBOMComparisonTmp_CN;
    InventBOMComparisonType_CN      compType;
    InventBOMComparisonCostType_CN  costType;
    Array                           bomIds;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initBOMVersions</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize bom versions
    /// </summary>
    /// <param name="_BomIds">
    /// Array
    /// </param>
    public void initBOMVersions(Array _BomIds)
    {
        bomIds = _BomIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initComparisonParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// initialize comparsion parameters
    /// </summary>
    /// <param name="_compType">
    /// InventBOMComparisonType_CN
    /// </param>
    /// <param name="_costType">
    /// InventBOMComparisonCostType_CN
    /// </param>
    public void initComparisonParameter(
        InventBOMComparisonType_CN      _compType,
        InventBOMComparisonCostType_CN  _costType)
    {
        compType = _compType;
        costType = _costType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventBOMComparisonTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the required objects here
    /// </summary>
    /// <param name="_bomComparison">
    ///     Object of <c>InventBOMComparisonTmp_CN</c> table.
    /// </param>
    public void initInventBOMComparisonTmp(InventBomComparisonTmp_CN _bomComparison)
    {
        inventBOMComparisonTmp_CN = _bomComparison;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
        protected void prePromptModifyContract()
    {
        super();

        SrsReportDataContract reportDataContract = this.parmReportContract();
        InventBOMComparisonContract_CN contract = reportDataContract.parmRdpContract() as InventBOMComparisonContract_CN;

        contract.parmBOMQtyHeader(bomIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        protected void preRunModifyContract()
    {
        SrsReportDataContract reportDataContract = this.parmReportContract();
        InventBOMComparisonContract_CN contract = reportDataContract.parmRdpContract() as InventBOMComparisonContract_CN;

        SrsReportRunPermission permission = new SrsReportRunPermission();
        permission.assert();

        Recid recid = SRSTmpTblMarshaller::SendTmpTblToDataProvider(inventBOMComparisonTmp_CN);
        CodeAccessPermission::revertAssert();

        contract.parmSrsTmpTblMarshallerContract().parmTmpTableDataRecId(recid);
        contract.parmInventBOMComparisonType_CN(compType);
        contract.parmInventBOMComparisonCostType_CN(costType);
        contract.parmBOMQtyHeader(bomIds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Main</Name>
				<Source><![CDATA[
        public static void Main(Args _args)
    {
        const str FeatureReference = 'CN-00022';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        InventBOMComparisonController_CN controller = new InventBOMComparisonController_CN();

        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(InventBOMComparison_CN,Report));
        //BOM comparison
        controller.parmDialogCaption("@GLS63208");

        if (_args && _args.caller() && _args.dataset())
        {
            Object inventBOMComparisonForm = _args.caller();

            // initialize comparsion parameters
            if (formHasMethod(inventBOMComparisonForm, identifierstr('getInventBOMComparisonType'))
                && formHasMethod(inventBOMComparisonForm, identifierstr('getInventBOMComparisonCostType')))
            {
                controller.initComparisonParameter(
                    inventBOMComparisonForm.getInventBOMComparisonType(),
                    inventBOMComparisonForm.getInventBOMComparisonCostType());
            }

            // initialize bom versions
            if (formHasMethod(inventBOMComparisonForm, identifierstr('getBOMVersions')))
            {
                Array bomIds = inventBOMComparisonForm.getBOMVersions();
                controller.initBOMVersions(bomIds);
            }

            // initialize inventBOMComparisonTmp table
            controller.initInventBOMComparisonTmp(_args.record() as InventBOMComparisonTmp_CN);
        }
        else
        {
            // Invalid value
            throw error("@SYS119633");
        }

        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>