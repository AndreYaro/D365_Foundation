<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayEventsExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgPayEventsExport</c> class is used to export <c>JmgPayEvents</c> records to an external file.
/// </summary>

public class JmgPayEventsExport extends RunBaseBatch implements BatchRetryable
{
    DialogField     dialogFieldPayrollPeriod;
    DialogField     dialogFieldDatePay;
    DialogField     dialogFieldReTransmit;
    DialogField     dialogFieldAcceptError;

    JmgDate         dateFrom;
    JmgDate         dateTo;
    JmgDate         datePay;
    ProjPeriodId    payrollPeriod;
    boolean         reTransmit;
    boolean         acceptError;

    QueryRun        queryRun;

    container       packedQuery;

    private boolean isJmgOptimizeTransferToPayExportFlightEnabled;

    #DEFINE.DialogColumns(2)

    #DEFINE.CurrentVersion(4)
    #LOCALMACRO.CurrentList
        payrollPeriod,
        datePay,
        reTransmit,
        acceptError
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPayrollPeriodRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds a payroll period range to the query.
    /// </summary>
    protected void addPayrollPeriodRange()
    {
        utcDateTime periodFrom  = DateTimeUtil::newDateTime(dateFrom, 0, DateTimeUtil::getUserPreferredTimeZone());
        utcDateTime periodTo    = DateTimeUtil::newDateTime(dateTo, 0, DateTimeUtil::getUserPreferredTimeZone());
    
        QueryBuildDataSource qbdsJmgEmployee = queryRun.query().dataSourceTable(tablenum(JmgEmployee));
        qbdsJmgEmployee.addRange(fieldnum(JmgEmployee, ProjPeriodId)).value(payrollPeriod);
    
        QueryBuildDataSource qbdsHcmEmployment = queryRun.query().dataSourceTable(tablenum(HcmEmployment));
        QueryBuildRange qbrValid = qbdsHcmEmployment.addRange(fieldnum(HcmEmployment, RecId));
        str qbrValue = strFmt("(((%1.%2 <= %5) && (%1.%3 >= %4)))"
                            , qbdsHcmEmployment.name()
                            , fieldStr(HcmEmployment, ValidFrom)
                            , fieldStr(HcmEmployment, ValidTo)
                            , DateTimeUtil::toStr(periodFrom)
                            , DateTimeUtil::toStr(periodTo)
                            );
        qbrValid.value(qbrValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildEmployeeQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieved the query to use when exporting pay events.
    /// </summary>
    /// <returns>
    /// The query to use when exporting pay events.
    /// </returns>
    protected QueryRun buildEmployeeQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbrsJmgEmployee;
        QueryBuildDataSource    qbrsHcmEmployment;

        if (!queryRun)
        {
            query = new Query();
            qbrsJmgEmployee = query.addDataSource(tablenum(JmgEmployee));
            qbrsJmgEmployee.addRange(fieldnum(JmgEmployee,Worker));
            qbrsJmgEmployee.addRange(fieldnum(JmgEmployee,FlexProfile));
            qbrsJmgEmployee.addRange(fieldnum(JmgEmployee,Active)).value(queryValue(NoYes::Yes));
            qbrsHcmEmployment = qbrsJmgEmployee.addDataSource(tableNum(HcmEmployment));
            query.validTimeStateDateTimeRange(DateTimeUtil::minValue(), DateTimeUtil::maxValue());
            qbrsHcmEmployment.addLink(fieldNum(JmgEmployee,Worker),fieldNum(HcmEmployment,Worker));
            qbrsHcmEmployment.joinMode(JoinMode::ExistsJoin);
            queryRun = new QueryRun(query);
        }

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the class can be run as a batch job.
    /// </summary>
    /// <returns>
    ///    true if the class can be run as a batch job; otherwise, false.
    /// </returns>
    public boolean canGoBatch()
    {
        if (JmgOptimizeTransferToPayExportJobFlight::instance().isEnabled())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether unprocessed registrations exists for workers referenced by the specified query.
    /// </summary>
    /// <param name="_employeeQuery">
    ///    The query which references workers to check for unprocessed registrations.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    Unprocessed registrations exist.
    /// </exception>
    protected void checkForJournalLines(QueryRun _employeeQuery)
    {
        JmgEmployee             jmgEmployee;
        JmgStampJournalTrans    jmgStampJournalTrans;
        boolean                 throwError;

        if (acceptError)
        {
            return;
        }

        _employeeQuery.reset();

        while (_employeeQuery.next())
        {
            jmgEmployee = _employeeQuery.get(tablenum(JmgEmployee));

            while select ProfileDate from jmgStampJournalTrans
                group by ProfileDate
                where jmgStampJournalTrans.Worker       == jmgEmployee.Worker   &&
                      jmgStampJournalTrans.ProfileDate  >= dateFrom             &&
                      jmgStampJournalTrans.ProfileDate  <= dateTo
            {
                checkFailed(strfmt("@SYS39894", HcmWorker::find(jmgEmployee.Worker).PersonnelNumber, date2StrUsr(jmgStampJournalTrans.ProfileDate, DateFlags::FormatAll)));
                throwError = true;
            }
        }

        if (throwError)
        {
            throw error("@SYS18447");
        }

        _employeeQuery.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        Dialog          dialog = super();
        DialogGroup dialogGroup = dialog.addGroup("@SYS39441");

        dialogFieldPayrollPeriod= dialog.addField(extendedtypestr(ProjPeriodId),"@SYS39441");
        dialogFieldPayrollPeriod.value(payrollPeriod);
        dialogGroup.columns(#DialogColumns);

        dialog.addGroup("");
        dialogFieldDatePay      = dialog.addField(extendedtypestr(JmgDate),"@SYS38537");
        dialogFieldReTransmit   = dialog.addField(enumstr(boolean),"@SYS38538");
        dialogFieldAcceptError  = dialog.addField(enumstr(boolean), "@SYS14646");

        dialogFieldDatePay.value(datePay);
        dialogFieldReTransmit.value(reTransmit);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates values entered by the user.
    /// </summary>
    /// <returns>
    ///    true if the values are validated successfully; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The payroll period is not specified.
    /// </exception>
    public boolean getFromDialog()
    {
        boolean ret;

        if (isJmgOptimizeTransferToPayExportFlightEnabled)
        {
            ret = super();
        }

        if (inCheckClose)
        {
            if (queryRun)
            {
                packedQuery = queryRun.pack();
            }
            payrollPeriod = dialogFieldPayrollPeriod.value();
            if (!payrollPeriod)
            {
                throw error("@SYS39828");
            }

            datePay    = dialogFieldDatePay.value();
            if (!datePay)
            {
                datePay = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            }

            if (!this.setDateToAndDateFrom())
            {
                return false;
            }

            reTransmit  = dialogFieldReTransmit.value();
            acceptError = dialogFieldAcceptError.value();
        }
        return isJmgOptimizeTransferToPayExportFlightEnabled ? ret : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDateToAndDateFrom</Name>
				<Source><![CDATA[
    protected boolean setDateToAndDateFrom()
    {
        var projPeriodLine = ProjPeriodLine::findPeriod(payrollPeriod, datePay);
        if (projPeriodLine)
        {
            dateFrom    = projPeriodLine.PeriodFrom;
            dateTo      = projPeriodLine.PeriodTo;
        }
        else
        {
            return checkFailed(strfmt("@SYS39744", payrollPeriod, datePay));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();
        this.buildEmployeeQuery();
        isJmgOptimizeTransferToPayExportFlightEnabled = JmgOptimizeTransferToPayExportJobFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList, packedQuery];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the select button must be shown on the dialog.
    /// </summary>
    /// <returns>
    ///    true if the select button is shown on the dialog; otherwise, false.
    /// </returns>
    boolean showQuerySelectButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> object.If you change the return value to false the button will no
    ///    longer be added.
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version      = conpeek(packedClass,1);
        container   q;
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, q] = packedClass;
                if (SysQuery::isPackedOk(q))
                {
                    queryRun = new QueryRun(q);
                }
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the instance is valid.
    /// </summary>
    /// <param name="calledFrom">
    ///    The caller of this class.
    /// </param>
    /// <returns>
    ///    true if the instance is validated ok; otherwise, false.
    /// </returns>
    boolean validate(Object calledFrom = null)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>JmgPayEventsExport</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>JmgPayEventsExport</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The parameters are not setup correctly.
    /// </exception>
    static JmgPayEventsExport construct()
    {
        JmgPayEventsExportType                  jmgPayEventsExportType  = JmgParameters::find().PayExportType;
        JmgPayEventsExportTypeFactoryAttribute  attribute               = new JmgPayEventsExportTypeFactoryAttribute(jmgPayEventsExportType);
        JmgPayEventsExport                      instance                = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(JmgPayEventsExport), attribute) as JmgPayEventsExport;

        if (classIdGet(instance) == classNum(JmgPayEventsExport))
        {
            throw error("@SYS55194");
        }

        return instance;

    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS38536";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        JmgPayEventsExport  jmgPayEventsExport = JmgPayEventsExport::construct();

        if (jmgPayEventsExport.prompt())
        {
            try
            {
                jmgPayEventsExport.runOperation();
            }
            catch (Exception::Error)
            {
                info("@SYS78886");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        if (JmgOptimizeTransferToPayExportJobFlight::instance().isEnabled())
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>