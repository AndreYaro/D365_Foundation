<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetMoveSumDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Report Data Provider <c>RAssetMoveSumDP</c> class for <c>RAssetMoveSumDP</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(RAssetGroup)),
    SRSReportParameterAttribute(classStr(RAssetMoveSumContract))
]
class rAssetMoveSumDP extends SRSReportDataProviderBase
{
    RAssetMoveSumTmp      rAssetMoveSumTmp;
    RAssetGroupId         rAssetGroupId;

    int                   qtyOnBeginDate;
    real                  sumOnBeginDate;
    int                   qtyAcquisition;
    real                  sumAcquisition;
    int                   qtyOnEndDate;
    real                  sumOnEndDate;
    int                   qtyDisposal;
    real                  sumDisposal;
    real                  sumDepreciation;
    real                  sumChangeNetBook;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateSum</Name>
				<Source><![CDATA[
        /// <summary>
    /// Calculate the variables.
    /// </summary>
    private void calculateSum()
    {
        sumDisposal      = abs(sumDisposal);
        sumDepreciation  = abs(sumDepreciation);
        qtyOnEndDate     = qtyOnBeginDate + qtyAcquisition - qtyDisposal;
        sumChangeNetBook = sumOnEndDate - sumOnBeginDate  + sumDepreciation - sumAcquisition + sumDisposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearSum</Name>
				<Source><![CDATA[
        /// <summary>
    /// Clear the variables.
    /// </summary>

    private void clearSum()
    {
        qtyOnBeginDate   = 0;
        sumOnBeginDate   = 0.0;
        qtyOnEndDate     = 0;
        sumOnEndDate     = 0.0;
        qtyDisposal      = 0;
        sumDisposal      = 0.0;
        qtyAcquisition   = 0;
        sumAcquisition   = 0.0;
        sumDepreciation  = 0.0;
        sumChangeNetBook = 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRAssetMoveSumTmp</Name>
				<Source><![CDATA[
        /// <summary>
    /// Returns the <c>RAssetMoveSumTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The temporary table <c>RAssetMoveSumTmp</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(RAssetMoveSumTmp))
    ]
    public RAssetMoveSumTmp getRAssetMoveSumTmp()
    {
        return rAssetMoveSumTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRAssetMoveSumTmp</Name>
				<Source><![CDATA[
        /// <summary>
    ///     Inserts all the values into the <c>tRAssetMoveSumTmp</c> temporary table.
    /// </summary>
    private void insertRAssetMoveSumTmp()
    {
        rAssetMoveSumTmp.AssetGroupId       = rAssetGroupId;
        rAssetMoveSumTmp.QtyAcquisition     = qtyAcquisition;
        rAssetMoveSumTmp.SumAcquisition     = sumAcquisition;
        rAssetMoveSumTmp.QtyOnBeginDate     = qtyOnBeginDate;
        rAssetMoveSumTmp.SumOnBeginDate     = sumOnBeginDate;
        rAssetMoveSumTmp.QtyOnEndDate       = qtyOnEndDate;
        rAssetMoveSumTmp.SumOnEndDate       = sumOnEndDate;
        rAssetMoveSumTmp.QtyDisposal        = qtyDisposal;
        rAssetMoveSumTmp.SumDisposal        = sumDisposal;
        rAssetMoveSumTmp.SumDepreciation    = sumDepreciation;
        rAssetMoveSumTmp.SumChangeNetBook   = sumChangeNetBook;
        rAssetMoveSumTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
        /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        RAssetTable             rAssetTable;
        RAssetTrans             rAssetTrans;
        RAssetAmount            disposalAmount;
        RAssetSumCalc           rassetSumTrans;
        QueryRun                qr;
        QueryRun                assetqueryRun;
        Query                   assetquery;
        QueryBuildDataSource    qbs;
        QueryBuildDataSource    assetqueryBuildDataSource;
        QueryBuildRange         assetGroupRange;
        QueryBuildDataSource    queryBuildDataSource;
        RAssetGroup             rAssetGroup;
        FromDate                fromDate;
        ToDate                  toDate;
        RAssetStandardId        rAssetStandardId;
        RAssetMoveSumContract   contract = this.parmDataContract() as RAssetMoveSumContract;

        rAssetStandardId    = contract.parmRAssetStandardId();
        fromDate            = contract.parmRAssetStartDate();
        toDate              = contract.parmRAssetToDate();

        qr  = new QueryRun(this.parmQuery());
        qbs = qr.query().dataSourceTable(tableNum(RAssetGroup));
        SysQuery::findOrCreateRange(qbs,fieldNum(RAssetGroup, AssetStandardId)).value(rAssetStandardId);

        assetquery = new Query();
        assetqueryBuildDataSource = assetquery.addDataSource(tableNum(RAssetTable));

        queryBuildDataSource = assetqueryBuildDataSource.addDataSource(tableNum(RAssetStandards));
        queryBuildDataSource.fetchMode(JoinMode::InnerJoin);
        queryBuildDataSource.relations(false);
        queryBuildDataSource.addLink(fieldNum(RAssetTable, AccountNum), fieldNum(RAssetStandards, AssetId));
        assetGroupRange = queryBuildDataSource.addRange(fieldNum(RAssetStandards, AssetGroup));
        while (qr.next())
        {
            this.clearSum();
            rAssetGroup     = qr.get(tableNum(RAssetGroup));
            rAssetGroupId   = rAssetGroup.AssetGroupId;
            assetGroupRange.value(queryValue(rAssetGroup.AssetGroupId));
            assetqueryRun = new QueryRun(assetquery);
            while(assetqueryRun.next())
            {
                rAssetTable = assetqueryRun.get(tableNum(RAssetTable));

                select firstonly rAssetTrans
                    order by TransDate asc
                    where rAssetTrans.AssetStandardId == rAssetStandardId             &&
                          rAssetTrans.AccountNum      == rAssetTable.AccountNum       &&
                          rAssetTrans.AssetTransType  == RAssetTransType::Acquisition &&
                          ! rAssetTrans.StornoRecId;

                if(rAssetTrans && (rAssetTrans.TransDate <= toDate))
                {


                    rassetSumTrans = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum,
                                                                         rAssetStandardId,
                                                                         toDate);
                    sumOnEndDate += rassetSumTrans.netBookValueMST();

                    if (rAssetTrans.TransDate < fromDate)
                    {
                        qtyOnBeginDate ++;
                        rassetSumTrans.parmDateTo(fromDate - 1);

                        sumOnBeginDate += rassetSumTrans.netBookValueMST();
                    }
                    else
                    {
                        qtyAcquisition ++;
                        sumAcquisition += rAssetTrans.AmountMST;
                    }

                    rassetSumTrans.parmDateTo(toDate);
                    rassetSumTrans.parmDateFrom(fromDate);

                    sumDepreciation += (rassetSumTrans.depreciationTotalMST() - rassetSumTrans.takeDownDeprAdjValueMST());

                    disposalAmount = rassetSumTrans.disposalDisposedValueMST() +
                                     rassetSumTrans.disposalSaleValueMST()     +
                                     rassetSumTrans.disposalScrapValueMST();

                    if (disposalAmount != 0)
                    {
                        qtyDisposal++;
                        sumDisposal += disposalAmount;
                    }

                    sumDisposal += (rassetSumTrans.takeDownAcqAdjValueMST() + rassetSumTrans.takeDownDeprAdjValueMST());
                }
            }
            this.calculateSum();
            this.insertRAssetMoveSumTmp();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>