<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchQuantity_PackingSlip</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactory(DocumentStatus::PackingSlip)]
[DocumentStatusFactory(DocumentStatus::ReceiptsList)]
public class PurchQuantity_PackingSlip extends PurchQuantity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateInventDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for inventory.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventDelegate(PurchLine _purchLine, PurchUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyUpdateInvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>QtyUpdate</c> for inventory.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_qty">An <c>InventQty</c> instance. If provided, this quantity is used instead of calculating <c>QtyUpdate</c>.</param>
    /// <returns>The <c>QtyUpdate</c> for inventory.</returns>
    protected InventQty calcQtyUpdateInvent(
        PurchLine _purchLine,
        PurchUpdate _specQty,
        InventQty _qty)
    {
        InventQty qtyUpdate;
        NoYes customsMarked = TaxParameters::isCustomsEnable_IN();

        if (_qty != naReal())
        {
            return _qty;
        }

        switch (_specQty)
        {
            case PurchUpdate::ReceiveNow:
                qtyUpdate = _purchLine.InventReceivedNow;
                break;

            case PurchUpdate::All:
                qtyUpdate = _purchLine.RemainInventPhysical;
                break;

            case PurchUpdate::RegisteredAndServices:

            case PurchUpdate::Recorded:
                qtyUpdate = InventTransIdSumSingleStatus::qtyRegistered(InventTransOriginPurchLine::findInventTransOriginId(_purchLine.DataAreaId, _purchLine.InventTransId));
                break;

            // <GIN>
            case PurchUpdate::BillOfEntryQuantity_IN:
                if (customsMarked)
                {
                    qtyUpdate = _purchLine.RemainInventPhysical;
                    if (CustomsVendBOETrans_IN::mustGetRemainingInventQuantityForPackingSlipUpdate(_purchLine, _qty))
                    {
                        qtyUpdate = CustomsVendBOETrans_IN::getRemainingQuantityForPackingSlipUpdate(_purchLine.PurchId,
                                                                                                     _purchLine.InventTransId,
                                                                                                     _purchLine.RemainPurchPhysical,
                                                                                                     customsVendBOETransRecId);
                    }
                }
                break;
            // </GIN>

            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.calculateQtyUpdateInventDelegate(_purchLine, _specQty, result);
                if (result.hasResult())
                {
                    qtyUpdate = result.result();
                }
                break;
        }

        return qtyUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyInvent</Name>
				<Source><![CDATA[
    protected container calcQtyInvent(
        PurchLine _purchLine,
        PurchUpdate _specQty = PurchUpdate::All,
        InventQty _qty = naReal(),
        boolean _creditRemaining = false,
        boolean _calcRemaining = true)
    {
        // <GIN>
        InventQty           qtyUpdateLoc;
        NoYes               customsMarked = TaxParameters::isCustomsEnable_IN();
        // </GIN>
        InventQty           numOfRemainOri;
        InventQty           qtyRemainNew;

        if (!_purchLine.isStocked())
        {
            return [0,0,0];
        }

        InventQty qtyUpdate = this.calcQtyUpdateInvent(_purchLine, _specQty, _qty);

        if (_specQty == PurchUpdate::BillOfEntryQuantity_IN
            && customsMarked
            && CustomsVendBOETrans_IN::mustGetRemainingInventQuantityForPackingSlipUpdate(_purchLine, _qty))
        {
            qtyUpdateLoc = qtyUpdate;
        }

        if (_calcRemaining)
        {
            numOfRemainOri = _purchLine.RemainInventPhysical;

            if (qtyUpdate * _purchLine.PurchQty < 0  &&  !_creditRemaining)
            {
                qtyRemainNew = _purchLine.RemainInventPhysical;
            }
            else
            {
                // <GIN>
                if (customsMarked
                && PurchTable::find(_purchLine.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes
                && CustomsVendBOETrans_IN::findOrderId(_purchLine.PurchId)
                && _qty == naReal())
                {
                    qtyRemainNew = numOfRemainOri - qtyUpdateLoc;
                }
                else
                {
                    // </GIN>
                    qtyRemainNew = numOfRemainOri - qtyUpdate;
                    // <GIN>
                }
                // </GIN>

                if (qtyRemainNew * _purchLine.PurchQty < 0)
                {
                    qtyRemainNew = 0;
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdatePurchDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for purchase.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdatePurchDelegate(PurchLine _purchLine, PurchUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyUpdatePurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>QtyUpdate</c> for purchase.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_qty">An <c>InventQty</c> instance. If provided, this quantity is used instead of calculating <c>QtyUpdate</c>.</param>
    /// <returns>The <c>QtyUpdate</c> for purchase.</returns>
    protected PurchQty calcQtyUpdatePurch(
        PurchLine _purchLine,
        PurchUpdate _specQty,
        PurchQty _qty)
    {
        PurchQty qtyUpdate;
        NoYes customsMarked = TaxParameters::isCustomsEnable_IN();

        if (_qty != naReal())
        {
            return _qty;
        }

        switch (_specQty)
        {
            case PurchUpdate::ReceiveNow:
                qtyUpdate = _purchLine.PurchReceivedNow;
                break;

            case PurchUpdate::All:
                qtyUpdate = _purchLine.RemainPurchPhysical;
                break;

            case PurchUpdate::RegisteredAndServices:
                if (!_purchLine.isStocked())
                {
                    qtyUpdate = _purchLine.RemainPurchPhysical;
                    break;
                }

            case PurchUpdate::Recorded:
                qtyUpdate = _purchLine.registeredInPurchUnit();
                break;

        

                // <GIN>
            case PurchUpdate::BillOfEntryQuantity_IN :
                if (customsMarked)
                {
                    qtyUpdate = _purchLine.RemainPurchPhysical;
                    if (CustomsVendBOETrans_IN::mustGetRemainingPurchQuantityForPackingSlipUpdate(_purchLine, _qty))
                    {
                        qtyUpdate = CustomsVendBOETrans_IN::getRemainingQuantityForPackingSlipUpdate(_purchLine.PurchId,
                                                                                                     _purchLine.InventTransId,
                                                                                                     0,
                                                                                                     customsVendBOETransRecId);
                    }
                }
                break;
                // </GIN>
            default:
                EventHandlerResult result = EventHandlerResult::newSingleResponse();
                this.calculateQtyUpdatePurchDelegate(_purchLine, _specQty, result);
                if (result.hasResult())
                {
                    qtyUpdate = result.result();
                }
                break;
        }

        return qtyUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurch</Name>
				<Source><![CDATA[
    protected container calcQtyPurch(
        PurchLine _purchLine,
        PurchUpdate _specQty = PurchUpdate::All,
        PurchQty _qty = naReal(),
        boolean _creditRemaining = false,
        boolean _calcRemaining = true)
    {
        // <GIN>
        PurchQty        qtyUpdateLoc;
        NoYes           customsMarked = TaxParameters::isCustomsEnable_IN();
        // </GIN>
        PurchQty        numOfRemainOri;
        PurchQty        qtyRemainNew;

        PurchQty qtyUpdate = this.calcQtyUpdatePurch(_purchLine, _specQty, _qty);

        if (_specQty == PurchUpdate::BillOfEntryQuantity_IN
            && customsMarked
            && CustomsVendBOETrans_IN::mustGetRemainingPurchQuantityForPackingSlipUpdate(_purchLine, _qty))
        {
            qtyUpdateLoc = qtyUpdate;
        }

        if (_calcRemaining)
        {
            numOfRemainOri = _purchLine.RemainPurchPhysical;

            if (qtyUpdate * _purchLine.PurchQty < 0  &&   !_creditRemaining)
            {
                qtyRemainNew = _purchLine.RemainPurchPhysical;
            }
            else
            {
                // <GIN>
                if (customsMarked
                && PurchTable::find(_purchLine.PurchId).purchTable_W().CustomsImportOrder_IN == NoYes::Yes
                && CustomsVendBOETrans_IN::findOrderId(_purchLine.PurchId)
                && _qty == naReal())
                {
                    qtyRemainNew =  _purchLine.RemainPurchPhysical - qtyUpdateLoc;
                }
                else
                {
                    // </GIN>
                    qtyRemainNew = _purchLine.RemainPurchPhysical - qtyUpdate;
                    // <GIN>
                }
                // </GIN>

                if (qtyRemainNew * _purchLine.PurchQty < 0)
                {
                    qtyRemainNew = 0;
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcQtyPurchOnModification_IN</Name>
				<Source><![CDATA[
    public container calcQtyPurchOnModification_IN(
        PurchLine      _purchLine,
        PurchQty       _purchQtyModified,
        PurchUpdate    _specQty             = PurchUpdate::All,
        PurchQty       _qty                 = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
        PurchQty            qtyUpdate;
        PurchQty            numOfRemainOri;
        PurchQty            qtyRemainNew;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }

        if (_calcRemaining)
        {
            numOfRemainOri = _purchLine.RemainPurchPhysical;
            qtyUpdate = CustomsVendBOETrans_IN::getRemainingQuantityForPackingSlipUpdate(_purchLine.PurchId,
                                                                                   _purchLine.InventTransId,
                                                                                   0,
                                                                                   customsVendBOETransRecId);

            if (abs(_purchQtyModified) > 0
                && qtyUpdate
                && abs(_purchQtyModified) <= abs(qtyUpdate))
            {
                qtyUpdate = _purchQtyModified;
            }

            qtyRemainNew = numOfRemainOri - qtyUpdate;

            // The logic only use on product receipt for import order transaction, 
            // the condition is satisfied when change quantity over line quantity and enable over delivery
            if (qtyRemainNew * _purchLine.PurchQty < 0
                && PurchParameters::find().OverDelivery
                && _purchLine.OverDeliveryPct > 0
                && CustomsVendBOETrans_IN::find(customsVendBOETransRecId))
            {
                qtyRemainNew = 0;
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyUpdateInventCWDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for calculating <c>QtyUpdate</c> for catch weight.
    /// </summary>
    /// <param name = "_purchLine">The purchase order line.</param>
    /// <param name = "_specQty">The requested type of update.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> for returning the calculated value.</param>
    delegate void calculateQtyUpdateInventCWDelegate(PurchLine _purchLine, PurchUpdate _specQty, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWCalcQtyInvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the <c>PdsCWReceiveNow</c>, <c>PdsCWRemainBefore</c> and <c>PdsCWRemainAfter</c> quantities.
    /// </summary>
    /// <param name="_purchLine">
    ///     The <c>PurchLine</c> record used in the calculation.
    /// </param>
    /// <param name="_specQty">
    ///     The quantity qualifier used to determine the quantity; optional.
    /// </param>
    /// <param name="_qty">
    ///     The catch weight quantity update; optional.
    /// </param>
    /// <param name="_creditRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be credited; optional.
    /// </param>
    /// <param name="_calcRemaining">
    ///     A Boolean value that determines whether the remaining quantity should be calculated; optional.
    /// </param>
    /// <returns>
    ///     The calculated values for <c>PdsCWReceiveNow</c>, <c>PdsCWRemainBefore</c> and <c>PdsCWRemainAfter</c>.
    /// </returns>
    protected container pdsCWCalcQtyInvent(
        PurchLine      _purchLine,
        PurchUpdate    _specQty             = PurchUpdate::All,
        PdsCWInventQty  _qty                = naReal(),
        boolean        _creditRemaining     = false,
        boolean        _calcRemaining       = true)
    {
        PdsCWInventQty  qtyUpdate;
        PdsCWInventQty  qtyRemainNew;
        PdsCWInventQty  numOfRemainOri;
        boolean         remainOk;

        if (_qty != naReal())
        {
            qtyUpdate = _qty;
        }
        else
        {
            switch (_specQty)
            {
                case PurchUpdate::ReceiveNow  :
                    qtyUpdate = _purchLine.PdsCWInventReceivedNow;
                    break;

                case PurchUpdate::All         :
                    qtyUpdate = _purchLine.PdsCWRemainInventPhysical;
                    break;

                case PurchUpdate::Recorded    :
                    qtyUpdate = InventTransIdSumSingleStatus::pdsCWQtyRegistered(InventTransOriginPurchLine::findInventTransOriginId(_purchLine.DataAreaId, _purchLine.InventTransId));
                    break;

                default:
                    EventHandlerResult result = EventHandlerResult::newSingleResponse();
                    this.calculateQtyUpdateInventCWDelegate(_purchLine, _specQty, result);
                    if (result.hasResult())
                    {
                        qtyUpdate = result.result();
                    }
                    break;
            }
        }

        if (_calcRemaining)
        {
            numOfRemainOri = _purchLine.PdsCWRemainInventPhysical;

            remainOk = false;

            if (qtyUpdate * _purchLine.PdsCWQty < 0
                &&  _purchLine.PurchaseType == PurchaseType::DEL_Subscription)
            {
                remainOk = true;
            }
            else
            {
                if (qtyUpdate * _purchLine.PdsCWQty < 0
                    &&  _creditRemaining == false)
                {
                    remainOk = true;
                }
            }

            if (remainOk)
            {
                qtyRemainNew = _purchLine.PdsCWRemainInventPhysical;
            }
            else
            {
                qtyRemainNew = numOfRemainOri - qtyUpdate;

                if (qtyRemainNew * _purchLine.PdsCWQty < 0)
                {
                    qtyRemainNew = 0;
                }
            }
        }

        return [qtyUpdate, numOfRemainOri, qtyRemainNew];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunFastCheckQuantity</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public boolean canRunFastCheckQuantity()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>