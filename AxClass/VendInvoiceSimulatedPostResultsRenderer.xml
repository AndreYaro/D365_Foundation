<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceSimulatedPostResultsRenderer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceSimulatedPostResultsRenderer</c> class contains methods that display the results of the vendor invoice simulated post.
/// </summary>
internal final class VendInvoiceSimulatedPostResultsRenderer
{
    private List simulatedPostResults = new List(Types::Class);
    private int successCount;
    private int failureCount;
    private str commaSeparatedInvoiceIdentifiers;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static VendInvoiceSimulatedPostResultsRenderer construct()
    {
        return new VendInvoiceSimulatedPostResultsRenderer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSimulatedPostResults</Name>
				<Source><![CDATA[
    internal static VendInvoiceSimulatedPostResultsRenderer newFromSimulatedPostResults(List _simulatedPostResults)
    {
        VendInvoiceSimulatedPostResultsRenderer vendInvoiceSimulatedPostResultsRenderer = VendInvoiceSimulatedPostResultsRenderer::construct();
        vendInvoiceSimulatedPostResultsRenderer.simulatedPostResults = _simulatedPostResults;
        vendInvoiceSimulatedPostResultsRenderer.parseResults();

        return vendInvoiceSimulatedPostResultsRenderer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displaySimulatedPostResults</Name>
				<Source><![CDATA[
    internal void displaySimulatedPostResults()
    {
        if (simulatedPostResults.elements() == 0)
        {
            Error::wrongUseOfFunction(funcName());
            return;
        }

        MenuItemMessageAction menuItemMessageAction = new MenuItemMessageAction();
        menuItemMessageAction.MenuItemName(menuItemDisplayStr(VendInvoiceSimulatePostingResultsMenuItemDisplay));
        menuItemMessageAction.Data(commaSeparatedInvoiceIdentifiers);

        if (simulatedPostResults.elements() > 1)
        {
            if (failureCount == 0)
            {
                Message::AddAction(
                    MessageSeverity::Informational,
                    strFmt("@AccountsPayable:SimulatePostingResultsMessage", failureCount, successCount),
                    "@ProcessAutomationFramework:ProcessScheduleOccurrenceResults",
                    MessageActionType::DisplayMenuItem,
                    FormJsonSerializer::serializeClass(menuItemMessageAction));
            }
            else
            {
                Message::AddAction(
                    MessageSeverity::Error,
                    strFmt("@AccountsPayable:SimulatePostingResultsMessage", failureCount, successCount),
                    "@ProcessAutomationFramework:ProcessScheduleOccurrenceResults",
                    MessageActionType::DisplayMenuItem,
                    FormJsonSerializer::serializeClass(menuItemMessageAction));
            }
        }
        else if (simulatedPostResults.elements() == 1)
        {
            if (failureCount == 0)
            {
                Message::AddAction(
                    MessageSeverity::Informational,
                    strFmt("@AccountsPayable:SimulatePostingResultsMessageSingleInvoice", enum2Str(VendInvoiceSimulatedPostStatus::Passed)),
                    "@ProcessAutomationFramework:ProcessScheduleOccurrenceResults",
                    MessageActionType::DisplayMenuItem,
                    FormJsonSerializer::serializeClass(menuItemMessageAction));
            }
            else
            {
                Message::AddAction(
                    MessageSeverity::Error,
                    strFmt("@AccountsPayable:SimulatePostingResultsMessageSingleInvoice", enum2Str(VendInvoiceSimulatedPostStatus::Failed)),
                    "@ProcessAutomationFramework:ProcessScheduleOccurrenceResults",
                    MessageActionType::DisplayMenuItem,
                    FormJsonSerializer::serializeClass(menuItemMessageAction));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseResults</Name>
				<Source><![CDATA[
    private void parseResults()
    {
        commaSeparatedInvoiceIdentifiers = strMin();
        successCount = 0;
        failureCount = 0;
        ListEnumerator enumerator = simulatedPostResults.getEnumerator();

        while (enumerator.moveNext())
        {
            VendInvoiceSimulatedPostResult vendInvoiceSimulatedPostResult = enumerator.current();
            commaSeparatedInvoiceIdentifiers += strFmt("%1,", vendInvoiceSimulatedPostResult.parmInvoiceIdentifier());

            if (vendInvoiceSimulatedPostResult.parmResult() == VendInvoiceSimulatedPostStatus::Passed)
            {
                successCount++;
            }
            else
            {
                failureCount++;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>