<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSApplicationInsightsEventTelemetryConverter</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.ApplicationInsights.DataContracts;
using Microsoft.ApplicationInsights.Extensibility.Implementation;
using System.Collections;
using System.Collections.Generic;

internal final class WHSApplicationInsightsEventTelemetryConverter
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertWHSEventTelemetryContractToSysEventTelemetryContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converter method to convert contracts of type WHSSysApplicationInsightsEventTelemetryDuplicate into contracts of type SysApplicationInsightsEventTelemetry.
    /// This is used to solve dependency on the platform while backporting.
    /// </summary>
    /// <param name = "_whsContract">The contract to convert.</param>
    /// <returns>A data contract of the type SysApplicationInsightsEventTelemetry.</returns>
    internal static SysApplicationInsightsEventTelemetry convertWHSEventTelemetryContractToSysEventTelemetryContract(WHSSysApplicationInsightsEventTelemetryDuplicate _whsContract)
    {
        // Grab the wrapped Application Insights contract as we want the properties in there.
        Microsoft.ApplicationInsights.DataContracts.EventTelemetry  eventTelemetry = _whsContract.eventTelemetryContract();
        SysApplicationInsightsEventTelemetry                        sysEventTelemetryContract = SysApplicationInsightsEventTelemetry::newFromEventIdName('',eventTelemetry.Name); // The Id will be in the properties that we copy
        
        IEnumerator sourcePropertiesEnumerator = eventTelemetry.Properties.GetEnumerator();
        var         destinationProperties = sysEventTelemetryContract.eventTelemetryContract().Properties;

        while(sourcePropertiesEnumerator.MoveNext())
        {
            KeyValuePair<System.String, System.String> currentProperty = sourcePropertiesEnumerator.get_Current();

            var currentKey = currentProperty.Key;
            str 8192 currentValue = currentProperty.Value;

            if (!currentValue)
            {
                currentValue = '<empty>';     // An actual value is needed, because the property would otherwise not be present in the telemetry results.
            }

            if (destinationProperties.ContainsKey(currentKey))
            {
                destinationProperties.Remove(currentKey); // This is needed as the Add method would throw an exception if the key already exists.
            }

            destinationProperties.Add(currentKey, currentValue);
        }
        
        return sysEventTelemetryContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>