<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustAccounting_PostItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to update original item transaction and post accounting adjustments.
/// </summary>
public class ProjAdjustAccounting_PostItem extends ProjAdjustAccounting_Post
{
    private ProjItemTrans projItemTrans;
 
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkOrigVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the voucher passed is associated with the original <c>ProjItemTrans</c> posted transaction.
    /// </summary>
    /// <param name = "_voucher">A voucher.</param>
    /// <returns>
    ///  true if <c>ProjItemTrans</c> has the voucher; otherwise, false.
    /// </returns>
    public boolean checkOrigVoucher(Voucher _voucher)
    {
        return projItemTrans.VoucherPackingSlip == _voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjItemTrans</Name>
				<Source><![CDATA[
    public ProjItemTrans parmProjItemTrans(ProjItemTrans _projItemTrans = projItemTrans)
    {
        projItemTrans = _projItemTrans;
        return projItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _origTrans)
    {
        super();
        projItemTrans = _origTrans as ProjItemTrans;
        
		if (!projItemTrans)
        {
            throw error(Error::missingRecord(tableStr(ProjItemTrans)));
        }
        this.parmOrigTransId(projItemTrans.ProjTransId);
        this.parmNewVoucher(projItemTrans.VoucherPackingSlip);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjItemTrans</Name>
				<Source><![CDATA[
    private void updateProjItemTrans(ProjItemTrans _projItemTrans, ProjTransIdBase _projTransId, Voucher _subledgerVoucher)
    {
        this.updateRelatedTablesWithNewDimension(_projItemTrans, _projTransID, _subledgerVoucher);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedTables</Name>
				<Source><![CDATA[
    private void updateRelatedTables(ProjItemTrans _projItemTrans, ProjTransIdBase _projTransId, Voucher _subledgerVoucher)
    {
        Set unAdjustedSet = this.parmUnAdjustedVoucherSet();
        // Cost
        if (!unAdjustedSet.in(_projItemTrans.VoucherPackingSlip) && _subledgerVoucher)
        {
            ProjItemTransCost projItemTransCost;
            update_recordset projItemTransCost
            setting
                Voucher = _subledgerVoucher
            where projItemTransCost.InventTransId == _projItemTrans.InventTransId
                && projItemTransCost.ProjAdjustRefId == _projItemTrans.ProjAdjustRefId;
        }

        //Sale
        ProjItemTransSale projItemTransSale;
        update_recordset projItemTransSale
        setting
            ProjTransId = _projTransId
        where projItemTransSale.ProjTransId == _projItemTrans.ProjTransId
            && projItemTransSale.DataAreaId == _projItemTrans.DataAreaId;
 
        this.updateProjInvoiceItem(_projItemTrans, _projTransId, _subledgerVoucher);

        ProjPostedTransTable projPostedTransTable;
        select firstonly forupdate projPostedTransTable
            where projPostedTransTable.TransId == _projItemTrans.ProjTransId;
        projPostedTransTable.TransId = _projTransId;
        projPostedTransTable.update();

  
        ProjItemTrans projItemTransBuff;
        select firstonly forupdate RecId, ProjTransId, voucherPackingSlip from  projItemTransBuff
            where projItemTransBuff.ProjTransId == _projItemTrans.ProjTransId;
        
        projItemTransBuff.ProjTransId = _projTransId;
  
        // Only update voucher if there was any adjustments made on the original voucher.
        if (!unAdjustedSet.in(projItemTransBuff.VoucherPackingSlip) && _subledgerVoucher)
        {
            projItemTransBuff.VoucherPackingSlip = _subledgerVoucher;
        }

        projItemTransBuff.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRelatedTablesWithNewDimension</Name>
				<Source><![CDATA[
    private void updateRelatedTablesWithNewDimension(ProjItemTrans _projItemTrans, ProjTransIdBase _projTransId, Voucher _subledgerVoucher)
    {
        DimensionDefault mergedDimension;
        if (dataContract)
        {
            mergedDimension = dataContract.parmMergedDimension();
        }

        if (!mergedDimension)
        {
            this.updateRelatedTables(_projItemTrans, _projTransID, _subledgerVoucher);
        }
        else
        {
            Set unAdjustedSet = this.parmUnAdjustedVoucherSet();
            // Cost
            if (!unAdjustedSet.in(_projItemTrans.VoucherPackingSlip) && _subledgerVoucher)
            {
                ProjItemTransCost projItemTransCost;
                update_recordset projItemTransCost
                setting
                    Voucher = _subledgerVoucher, DefaultDimension = mergedDimension
                where projItemTransCost.InventTransId == _projItemTrans.InventTransId
                    && projItemTransCost.ProjAdjustRefId == _projItemTrans.ProjAdjustRefId;
            }

            //Sale
            ProjItemTransSale projItemTransSale;
            update_recordset projItemTransSale
            setting
                ProjTransId = _projTransId, DefaultDimension = mergedDimension
            where projItemTransSale.ProjTransId == _projItemTrans.ProjTransId
                && projItemTransSale.DataAreaId == _projItemTrans.DataAreaId;
 
            this.updateProjInvoiceItem(_projItemTrans, _projTransId, _subledgerVoucher);

            // Posted trans
            ProjPostedTransTable projPostedTransTable = ProjPostedTransTable::findByTransId(_projItemTrans.ProjTransId, true);
            projPostedTransTable.TransId = _projTransId;
            projPostedTransTable.DefaultDimension = mergedDimension;
            projPostedTransTable.update();

            // Parent trans record
            ProjItemTrans projItemTransBuff = ProjItemTrans::find(_projItemTrans.ProjTransId, true);
            projItemTransBuff.ProjTransId = _projTransId;
            projItemTransBuff.DefaultDimension = mergedDimension;
  
            // Only update voucher if there was any adjustments made on the original voucher.
            if (!unAdjustedSet.in(projItemTransBuff.VoucherPackingSlip) && _subledgerVoucher)
            {
                projItemTransBuff.VoucherPackingSlip = _subledgerVoucher;
            }

            projItemTransBuff.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden method for updating original posted item transaction.
    /// </summary>
    public void updateProjTrans()
    {
        ProjTransIdBase transId = this.parmNewTransId();
        Voucher voucher = this.parmNewVoucher();
        if (transId && voucher)
        {
            this.updateProjItemTrans(projItemTrans, transId, voucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjInvoiceItem</Name>
				<Source><![CDATA[
    private void updateProjInvoiceItem(ProjItemTrans _projItemTrans, ProjTransIdBase _projTransId, Voucher _voucher)
    {
        ProjProposalJour projProposalJour;
        ProjInvoiceJour projInvoiceJour;
        ProjProposalItem projProposalItem;
        ProjInvoiceItem projInvoiceItem;
        Set unAdjustedSet = this.parmUnAdjustedVoucherSet();
 
        while select forupdate projProposalJour
            join forupdate projProposalItem
            where projProposalJour.ProposalId == projProposalItem.ProposalId
            && projProposalItem.ProjTransId == _projItemTrans.ProjTransId
            outer join forupdate projInvoiceJour
            join forupdate projInvoiceItem
            where projInvoiceJour.ProposalId == projProposalJour.ProposalId
            && projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId
            && projInvoiceItem.InvoiceDate == projInvoiceJour.InvoiceDate
            && projInvoiceItem.ProjTransId == projProposalItem.ProjTransId
        {
            projProposalItem.ProjTransId = _projTransId;
            projProposalItem.update();
   
            // ProjProposalJour.LedgerVoucher only needs to be updated if any
            // voucher entry for an invoice was adjusted.
            if(projProposalJour.LedgerVoucher
                && unAdjustedSet
                && !unAdjustedSet.in(projProposalJour.LedgerVoucher))
            {
                projProposalJour.LedgerVoucher = _voucher;
                projProposalJour.update();
            }

            if (projInvoiceJour)
            {
                if (!unAdjustedSet.in(projInvoiceJour.LedgerVoucher))
                {
                    projInvoiceJour.LedgerVoucher = _voucher;
                    projInvoiceJour.update();
                }
                
                projInvoiceItem.ProjTransId = _projTransId;
                projInvoiceItem.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>