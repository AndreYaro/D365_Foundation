<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceOrderCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SmaServiceOrderCreate
{
    ProjTable                               projTable;
    smmActivities                           templateActivity;
    SMAServiceOrderTable                    serviceOrderTable;
    SMAPreServiceOrderLine                  preServiceOrderLine;
    LogisticsLocationSelectForm_ServiceOrder locationSelectForm;
    SMAServiceOrderId                       serviceOrderId;
    SMAScopeId                              scopeId;
    SMAStageId                              firstStageId;
    TransDate                               tmpDate;
    boolean                                 showInfolog;
    Counter                                 seO_Created;
    boolean                                 isBatch;
    SMAParameters                           parameters;
    TransDate                               previousDate;
    SMAPreferredServiceDateTime             preferredDateTime;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildServiceOrders</Name>
				<Source><![CDATA[
    public Counter buildServiceOrders()
    {
        this.parmFirstStageId(SMAStageTable::firstStage());

        if (scopeId)
        {
            parameters          = SMAParameters::find();

            ttsbegin;

            this.createCombineByAgreement();
            this.createCombineByEmployee();
            this.createCombineByObject();
            this.createCombineByTask();

            ttscommit;
        }

        return seO_Created;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCombineByAgreement</Name>
				<Source><![CDATA[
    void createCombineByAgreement()
    {
        // Find all transactions grouped by Service agreement
        select nofetch forupdate preServiceOrderLine
            order by AgreementId, DateCalculated, AgreementLineNum
            where preServiceOrderLine.ScopeId        == scopeId &&
                  preServiceOrderLine.ServiceOrderId == ''      &&
                  preServiceOrderLine.GroupBy        == SMAGroupServiceOrder::ServiceAgreement;

        this.createCombinedServiceOrder(preServiceOrderLine, SMAGroupServiceOrder::ServiceAgreement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCombineByEmployee</Name>
				<Source><![CDATA[
    void createCombineByEmployee()
    {
        // Find all transactions grouped by Employee
        select nofetch forupdate preServiceOrderLine
            order by AgreementId, Worker, DateCalculated
            where preServiceOrderLine.ScopeId        == scopeId &&
                  preServiceOrderLine.ServiceOrderId == ''      &&
                  preServiceOrderLine.GroupBy        == SMAGroupServiceOrder::Employee;

        this.createCombinedServiceOrder(preServiceOrderLine, SMAGroupServiceOrder::Employee);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCombineByObject</Name>
				<Source><![CDATA[
    void createCombineByObject()
    {
        // Find all groupby ServiceObject transactions
        select nofetch forupdate preServiceOrderLine
            index hint ScopeIdx
            order by AgreementId, ServiceObjectId, DateCalculated
            where preServiceOrderLine.ScopeId        == scopeId &&
                  preServiceOrderLine.ServiceOrderId == ''      &&
                  preServiceOrderLine.GroupBy        == SMAGroupServiceOrder::ServiceObject;

        this.createCombinedServiceOrder(preServiceOrderLine, SMAGroupServiceOrder::ServiceObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCombineByTask</Name>
				<Source><![CDATA[
    void createCombineByTask()
    {
        // Find all groupby ServiceTask transactions
        select nofetch forupdate preServiceOrderLine
            index hint ScopeIdx
            order by AgreementId, ServiceTaskId, DateCalculated
            where preServiceOrderLine.ScopeId        == scopeId &&
                  preServiceOrderLine.ServiceOrderId == ''      &&
                  preServiceOrderLine.GroupBy        == SMAGroupServiceOrder::ServiceTask;

        this.createCombinedServiceOrder(preServiceOrderLine, SMAGroupServiceOrder::ServiceTask);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCombinedServiceOrder</Name>
				<Source><![CDATA[
    private void createCombinedServiceOrder(SMAPreServiceOrderLine _smaPreServiceOrderLine, SMAGroupServiceOrder _smaGroupServiceOrder)
    {
        TransDate               fromDate;
        TransDate               toDate;
        SMAWorker               workerRecId;
        SMAServiceObjectId      tmpObjectId = '';
        SMAServiceTaskId        tmpTaskId = '';
        boolean                 createServiceOrder;
        SMAPreServiceOrderLine  smaPreServiceOrderLine = _smaPreServiceOrderLine;

        next smaPreServiceOrderLine;

        while (smaPreServiceOrderLine)
        {
            // Data is sorted by DataCalculated column, so group them based on the condition that
            // the start date for the new record is before the end date of the previous records.
            createServiceOrder = !fromDate || !toDate || (smaPreServiceOrderLine.DateRangeFrom > toDate);

            switch (_smaGroupServiceOrder)
            {
                case SMAGroupServiceOrder::Employee:
                    createServiceOrder = createServiceOrder || (workerRecId != smaPreServiceOrderLine.Worker);
                    workerRecId = createServiceOrder ? smaPreServiceOrderLine.Worker : workerRecId;
                    break;

                case SMAGroupServiceOrder::ServiceObject:
                    createServiceOrder = createServiceOrder || (tmpObjectId != smaPreServiceOrderLine.ServiceObjectId);
                    tmpObjectId = createServiceOrder ? smaPreServiceOrderLine.ServiceObjectId : tmpObjectId;
                    break;

                case SMAGroupServiceOrder::ServiceTask:
                    createServiceOrder = createServiceOrder || (tmpTaskId != smaPreServiceOrderLine.ServiceTaskId);
                    tmpTaskId   = createServiceOrder ? smaPreServiceOrderLine.ServiceTaskId : tmpTaskId;
                    break;
            }

            if (createServiceOrder)
            {
                fromDate = smaPreServiceOrderLine.DateRangeFrom;
                toDate   = smaPreServiceOrderLine.DateRangeTo;
                tmpDate  = smaPreServiceOrderLine.DateCalculated;

                this.getNewServiceOrderId();
                this.createServiceOrders(smaPreServiceOrderLine, serviceOrderId);
            }

            smaPreServiceOrderLine.ServiceOrderId = serviceOrderId;
            smaPreServiceOrderLine.ProjTransId    = this.createServiceOrderLine(smaPreServiceOrderLine, tmpDate);
            smaPreServiceOrderLine.update();
            //Inserting record with respect to Service order created.
            if (serviceOrderId && !createServiceOrder)
            {
                this.createServiceObjectRelation();
            }

            next smaPreServiceOrderLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemRequirement</Name>
				<Source><![CDATA[
    public ProjTransIdBase createItemRequirement(SMAAgreementLine _agreementLine)
    {
        SalesTableForm_ProjectSalesItem salesTableForm;
        SalesLine                       salesLine;

        salesTableForm = SalesTableForm::construct(SalesTableFormId::ProjectSalesItem, this.parmProjTable());

        salesLine.clear();
        salesLine.SalesType = SalesType::ItemReq;

        salesTableForm.salesLine_initValue(salesLine);

        salesLine.initFromProjTable(this.parmProjTable());

        salesTableForm.salesLine_Create(salesLine);

        salesTableForm.resetSalesLine(salesLine);

        salesLine.initFromSMAServiceOrderTable(serviceOrderTable);

        salesLine.ItemId                = _agreementLine.ItemId;
        salesLine.setInventDimId(_agreementLine.InventDimId);

        salesLine.itemIdChanged();

        salesLine.SalesUnit             = _agreementLine.Unit;
        salesLine.QtyOrdered            = _agreementLine.Qty;
        salesLine.SalesQty              = _agreementLine.Qty;
        salesLine.ProjCategoryId        = _agreementLine.ProjCategoryId;
        salesLine.DefaultDimension      = salesLine.copyDimension(_agreementLine.DefaultDimension);

        AxSalesLine::newSalesLine(salesLine);

        salesLine.LineNum = SalesLine::lastLineNum(salesLine.SalesId) + 1.0;

        salesTableForm.salesLine_Write(salesLine);

        salesLine.write();

        return salesLine.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createServiceObjectRelation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a relation record in <c>SMAServiceObjectRelation</c> when service order is created from Service Agreement.
    /// </summary>
    /// <remarks>
    /// Record will be created when the service object relation is specified.
    /// </remarks>
    private void createServiceObjectRelation()
    {
        SMAServiceObjectRelation smaServiceObjectRelation;

        if (preServiceOrderLine.ServiceObjectId)
        {
            smaServiceObjectRelation.RelKeyId                = preServiceOrderLine.ServiceOrderId;
            smaServiceObjectRelation.ServiceObjectId         = preServiceOrderLine.ServiceObjectId;
            smaServiceObjectRelation.InventDimId             = SMAServiceObjectTable::find(preServiceOrderLine.ServiceObjectId).InventDimId;
            smaServiceObjectRelation.ServiceObjectRelationId = NumberSeq::newGetNum(SMAParameters::numRefSMAServiceObjectRelationId(),false).num();
            smaServiceObjectRelation.RelTableId              = tableNum(SMAServiceOrderTable);
            smaServiceObjectRelation.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createServiceOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the service order line.
    /// </summary>
    /// <param name = "_preServiceOrderLine">The <c>SMAPreServiceOrderLine</c> record.</param>
    /// <param name = "_serviceDate">The <c>TransDate</c> used for initialization of service order line.</param>
    /// <returns>The service order line transaction Id.</returns>
    protected ProjTransIdBase createServiceOrderLine(SMAPreServiceOrderLine _preServiceOrderLine, TransDate _serviceDate)
    {
        SMAServiceOrderLine     serviceOrderLine;
        SMAAgreementLine        agreementLine;
        ProjTransIdBase         tmpProjTransId;

        agreementLine = SMAAgreementLine::find(_preServiceOrderLine.AgreementId, _preServiceOrderLine.AgreementLineNum);

        if (agreementLine.ItemSetupType == SMAItemSetupType::ItemRequirement)
        {
            tmpProjTransId = this.createItemRequirement(agreementLine);
        }
        else
        {
            serviceOrderLine.clear();

            this.initSMAServiceOrderLine(serviceOrderLine, agreementLine, _preServiceOrderLine, _serviceDate);

            serviceOrderLine.insert();
            tmpProjTransId = serviceOrderLine.ProjTransId;
        }

        return tmpProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSMAServiceOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the passed <c>SMAServiceOrderLine</c> record based on the given arguments.
    /// </summary>
    /// <param name = "_serviceOrderLine">
    /// The <c>SMAServiceOrderLine</c> record to be initialized.
    /// </param>
    /// <param name = "_agreementLine">
    /// The <c>SMAAgreementLine</c> record to initialize from.
    /// </param>
    /// <param name = "_preServiceOrderLine">
    /// The <c>SMAPreServiceOrderLine</c> record to initialize from.
    /// </param>
    /// <param name = "_serviceDate">
    /// The <c>TransDate</c> value to initialize from.
    /// </param>
    protected void initSMAServiceOrderLine(SMAServiceOrderLine _serviceOrderLine,
                                           SMAAgreementLine _agreementLine, 
                                           SMAPreServiceOrderLine _preServiceOrderLine,
                                           TransDate _serviceDate)
    {
        _serviceOrderLine.Origin              = SMAServiceOrderOrigin::System;
        _serviceOrderLine.ServiceOrderId      = _preServiceOrderLine.ServiceOrderId;

        _serviceOrderLine.DateExecution       = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(this.getServiceDateTimeCached(_serviceDate), DateTimeUtil::getUserPreferredTimeZone()));

        _serviceOrderLine.DateCalculated      = _preServiceOrderLine.DateCalculated;
        _serviceOrderLine.DateRangeFrom       = _preServiceOrderLine.DateRangeFrom;
        _serviceOrderLine.DateRangeTo         = _preServiceOrderLine.DateRangeTo;

        _serviceOrderLine.initFromAgreementLine(_agreementLine);
        
        if (_agreementLine.ServiceObjectRelationId)
        {
            _serviceOrderLine.ServiceObjectRelationId    = _agreementLine.ServiceObjectRelationId;
            _serviceOrderLine.ServiceObjectId            = _agreementLine.ServiceObjectId;
        }

        if (_serviceOrderLine.TransactionType == SMATransactionType::Expense)
        {
            _serviceOrderLine.CurrencyIdCost = CompanyInfoHelper::standardCurrency();
            _serviceOrderLine.setDefaultOffsetAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initServiceOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SMAServiceOrderTable</c> service order header based on the given arguments.
    /// </summary>
    /// <param name = "_preServiceOrderLine">
    /// The <c>SMAPreServiceOrderLine</c> record used for AgreementId initialization
    /// </param>
    /// <param name = "_serviceOrderId">
    /// The service order ID
    /// </param>
    protected void initServiceOrder(SMAPreServiceOrderLine _preServiceOrderLine, SMAServiceOrderId _serviceOrderId)
    {
        serviceOrderTable.clear();

        serviceOrderTable.Origin             = SMAServiceOrderOrigin::System;
        serviceOrderTable.Progress           = SMAServiceOrderProgress::InProcess;
        serviceOrderTable.StageId            = firstStageId;
        serviceOrderTable.ServiceOrderId     = _serviceOrderId;
        serviceOrderTable.AgreementId        = _preServiceOrderLine.AgreementId;

        serviceOrderTable.initFromAgreement();

        serviceOrderTable.ServiceDateTime = this.getServiceDateTimeCached(_preServiceOrderLine.DateCalculated, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createServiceOrders</Name>
				<Source><![CDATA[
    private void createServiceOrders(SMAPreServiceOrderLine _preServiceOrderLine, SMAServiceOrderId _serviceOrderId)
    {
        if (!locationSelectForm)
        {
            locationSelectForm = LogisticsLocationSelectForm_ServiceOrder::construct(serviceOrderTable);
        }

        this.initServiceOrder(_preServiceOrderLine, _serviceOrderId);
        this.parmProjTable(ProjTable::find(serviceOrderTable.ProjId));

        locationSelectForm.copyAddressToCaller(projTable, projTable.postalAddress().RecId);

        serviceOrderTable.insert(isBatch, (templateActivity ? true : false), templateActivity);

        if (serviceOrderTable.CalendarConflict)
        {
            //  Service order %1, Service date %2 is in conflict with the calandar.
            warning(strFmt("@SYS90872", serviceOrderTable.ServiceOrderId,   date2StrUsr(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(serviceOrderTable.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone())), DateFlags::FormatAll) ));
        }
        else
        if (showInfolog)
        {
            // Service order : %1, Service date %2
            info(strFmt("@SYS91765", serviceOrderTable.ServiceOrderId,      date2StrUsr(DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(serviceOrderTable.ServiceDateTime,DateTimeUtil::getUserPreferredTimeZone())), DateFlags::FormatAll) ));
        }

        seO_Created++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewServiceOrderId</Name>
				<Source><![CDATA[
    void getNewServiceOrderId()
    {
        ttsbegin;

        // Getting a new service order id
        this.parmSmaServiceOrderId(NumberSeq::newGetNum(SMAParameters::numRefServiceOrderId()).num());

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceDateTimeCached</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the preferred service date and time based on a calculated date.
    /// </summary>
    /// <param name="_currentDate">
    ///    Calculated date.
    /// </param>
    /// <param name="checkCalendar">
    ///    A Boolean value that indicates whether to validate calendar date is open; optional.
    /// </param>
    /// <returns>
    ///    The preferred service date and time.
    /// </returns>
    /// <remarks>
    ///    The preferred date and time are cached and are recalculated only if the calculated date is changed.
    /// </remarks>
    public SMAPreferredServiceDateTime getServiceDateTimeCached(TransDate _currentDate, boolean checkCalendar = true)
    {
        if (_currentDate != previousDate)
        {
            previousDate = _currentDate;

            preferredDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(_currentDate, 0), DateTimeUtil::getUserPreferredTimeZone());

            if (parameters.CalendarId && checkCalendar)
            {
                preferredDateTime   = WorkCalendar::findOpenDateTimeForward(parameters.CalendarId, preferredDateTime, true);
            }
        }

        return preferredDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(SMAScopeId _scopeId, boolean _showInfolog = true, boolean _isBatch = false)
    {
        scopeId     = _scopeId;
        showInfolog = _showInfolog;
        isBatch     = _isBatch;

        previousDate = dateNull();

        this.parmFirstStageId(SMAStageTable::firstStage());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFirstStageId</Name>
				<Source><![CDATA[
    public SMAStageId parmFirstStageId(SMAStageId _firstStageId = firstStageId)
    {
        firstStageId = _firstStageId;

        return firstStageId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    public ProjTable parmProjTable(ProjTable _projTable = projTable)
    {
        projTable = _projTable;

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSmaServiceOrderId</Name>
				<Source><![CDATA[
    public SMAServiceOrderId parmSmaServiceOrderId(SMAServiceOrderId _serviceOrderId = serviceOrderId)
    {
        serviceOrderId = _serviceOrderId;

        return serviceOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateActivity</Name>
				<Source><![CDATA[
    public smmActivities parmTemplateActivity(smmActivities _templateActivity = templateActivity)
    {
        templateActivity = _templateActivity;

        return templateActivity;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>