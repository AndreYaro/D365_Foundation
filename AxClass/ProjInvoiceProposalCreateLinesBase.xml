<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalCreateLinesBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains base function used in creating invoice proposal lines.
/// </summary>
abstract class ProjInvoiceProposalCreateLinesBase
{
    ProjInvoiceProposalCreateLinesParams proposalCreateLinesParams;
    boolean isMultipleContractLinesForProjectEnabled;

    //proposalTransDisplay records are displayed in the create proposal form. The lines are NOT split on the basis of funding source
    PSATmpProjProposalTrans proposalTransDisplay;
    //proposalTransCreate are used to create the proposal. The lines are split on the basis of funding source
    PSATmpProjProposalTrans proposalTransCreate;
    PSATmpProjProposalTrans proposalTransDisplayDeduction;
    PSATmpProjProposalTrans proposalTransCreateDeduction;

    ProjFundingSourceRefId projFundingSourceRefId;
    #ISOCountryRegionCodes
    //<GBR>
    boolean isDebitNote;
    protected Map invoiceableCache;
    private boolean advanceInvoiceSettlement;
    private boolean countryRegion_PL = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAdvanceInvoiceSettlement</Name>
				<Source><![CDATA[
    public boolean parmAdvanceInvoiceSettlement(boolean _advanceInvoiceSettlement = advanceInvoiceSettlement)
    {
        if (!countryRegion_PL)
        {
            return false;
        }

        advanceInvoiceSettlement = _advanceInvoiceSettlement;

        return advanceInvoiceSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a record in <c>PSATmpProjProposalTrans</c> table.
    /// </summary>
    /// <param name="_createLinesInit">
    /// An instance of <c>ProjInvoiceProposalCreateLinesInit</c> class.
    /// </param>
    /// <param name="_isCreate">
    /// Indicates whether a record should be inserted into proposalTransCreate buffer.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void createProposalTrans(ProjInvoiceProposalCreateLinesInit _createLinesInit, boolean _isCreate, PSAContractLineNum _contractLineNum)
    {
        boolean                     createDisplayTrans;
        PSATmpProjProposalTrans     tmpProjProposalTrans = _createLinesInit.getProposalTransCreate();

        while select tmpProjProposalTrans
        {
            if (_isCreate)
            {
                this.initPSATmpProjProposalTransCreate(proposalTransCreate, tmpProjProposalTrans, _contractLineNum);
                proposalTransCreate.insert();
            }

            createDisplayTrans = true;
        }

        if (createDisplayTrans)
        {
            tmpProjProposalTrans.clear();

            tmpProjProposalTrans = _createLinesInit.getProposalTransDisplay();

            while select tmpProjProposalTrans
            {
                this.initPSATmpProjProposalTransDisplay(proposalTransDisplay, tmpProjProposalTrans, _contractLineNum);
                proposalTransDisplay.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPSATmpProjProposalTransCommon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>PSATmpProjProposalTrans</c> table buffer from <c>PSATmpProjProposalTrans</c>.
    /// </summary>
    /// <param name = "_psaTmpProjProposalTrans">
    /// <c>PSATmpProjProposalTrans</c> table buffer that needs to be initialized.
    /// </param>
    /// <param name = "_psaTmpProjProposalTransValue">
    /// <c>PSATmpProjProposalTrans</c> table buffer.
    /// </param>
    /// <param name = "_contractLineNum">
    /// Value of type <c>PSAContractLineNum</c> to be set to the field <c>ContractLineNum</c> on <c>PSATmpProjProposalTrans</c> table.
    /// </param>
    /// <remarks>
    /// This method is used to initialize common fields of the table buffer of type <c>PSATmpProjProposalTrans</c> passed in through the parameter <c>_psaTmpProjProposalTrans</c>.
    /// This is called from <c>initPSATmpProjProposalTransCreate</c> and <c>initPSATmpProjProposalTransDisplay</c> methods.
    /// </remarks>
    private void initPSATmpProjProposalTransCommon(PSATmpProjProposalTrans _psaTmpProjProposalTrans, PSATmpProjProposalTrans _psaTmpProjProposalTransValue, PSAContractLineNum _contractLineNum)
    {
        _psaTmpProjProposalTrans.data(_psaTmpProjProposalTransValue);
        _psaTmpProjProposalTrans.ContractLineNum = _contractLineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPSATmpProjProposalTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>PSATmpProjProposalTrans</c> table buffer from <c>PSATmpProjProposalTrans</c>.
    /// </summary>
    /// <param name = "_psaTmpProjProposalTransCreate">
    /// <c>PSATmpProjProposalTrans</c> table buffer that needs to be initialized.
    /// </param>
    /// <param name = "_psaTmpProjProposalTrans">
    /// <c>PSATmpProjProposalTrans</c> table buffer. 
    /// </param>
    /// <param name = "_contractLineNum">
    /// Value of type <c>PSAContractLineNum</c> to be set to the field <c>ContractLineNum</c> on <c>PSATmpProjProposalTrans</c> table.
    /// </param>
    /// <remarks>
    /// This is called from <c>createProposalTrans</c> method to initialize the <c>proposalTransCreate</c> buffer of type <c>PSATmpProjProposalTrans</c>.
    /// </remarks>
    protected void initPSATmpProjProposalTransCreate(PSATmpProjProposalTrans _psaTmpProjProposalTransCreate, PSATmpProjProposalTrans _psaTmpProjProposalTrans, PSAContractLineNum _contractLineNum)
    {
        this.initPSATmpProjProposalTransCommon(_psaTmpProjProposalTransCreate, _psaTmpProjProposalTrans, _contractLineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPSATmpProjProposalTransDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>PSATmpProjProposalTrans</c> table buffer from <c>PSATmpProjProposalTrans</c>.
    /// </summary>
    /// <param name = "_psaTmpProjProposalTransDisplay">
    /// <c>PSATmpProjProposalTrans</c> table buffer that needs to be initialized.
    /// </param>
    /// <param name = "_psaTmpProjProposalTrans">
    /// <c>PSATmpProjProposalTrans</c> table buffer.
    /// </param>
    /// <param name = "_contractLineNum">
    /// Value of type <c>PSAContractLineNum</c> to be set to the field <c>ContractLineNum</c> on <c>PSATmpProjProposalTrans</c> table.
    /// </param>
    /// <remarks>
    /// This is called from <c>createProposalTrans</c> method to initialize the <c>proposalTransDisplay</c> buffer of type <c>PSATmpProjProposalTrans</c>.
    /// </remarks>
    protected void initPSATmpProjProposalTransDisplay(PSATmpProjProposalTrans _psaTmpProjProposalTransDisplay, PSATmpProjProposalTrans _psaTmpProjProposalTrans, PSAContractLineNum _contractLineNum)
    {
        this.initPSATmpProjProposalTransCommon(_psaTmpProjProposalTransDisplay, _psaTmpProjProposalTrans, _contractLineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deductionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns total deduction amount for an invoice proposal.
    /// </summary>
    /// <param name="_currencyCode">
    /// Currency code in which deduction amount is to be calcualated.
    /// </param>
    /// <returns>
    /// Total deduction amount for an invoice proposal.
    /// </returns>
    public Amount deductionAmount(CurrencyCode _currencyCode = Ledger::accountingCurrency())
    {
        AmountCur   amountCur;

        select sum(LineAmount), sum(IndirectAmount) from proposalTransDisplayDeduction where
            proposalTransDisplayDeduction.CurrencyCode == _currencyCode &&
            proposalTransDisplayDeduction.Selected     == true;

        amountCur = proposalTransDisplayDeduction.LineAmount - proposalTransDisplayDeduction.IndirectAmount;

        while select sum(LineAmount), sum(IndirectAmount) from proposalTransDisplayDeduction group by CurrencyCode where
            proposalTransDisplayDeduction.CurrencyCode != _currencyCode &&
            proposalTransDisplayDeduction.Selected     == true
        {
            amountCur += CurrencyExchangeHelper::curAmount2CurAmount(proposalTransDisplayDeduction.LineAmount - proposalTransDisplayDeduction.IndirectAmount,
                        proposalTransDisplayDeduction.CurrencyCode,
                        _currencyCode,
                        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                        false);
        }

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type cost.
    /// </summary>
    /// <param name="_projCostTrans">
    /// A record in <c>ProjCostTrans</c> table.
    /// </param>
    /// <param name="_isCreate">
    /// Indicates whether a record should be inserted into proposalTransCreate buffer.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doCost(ProjCostTrans _projCostTrans, boolean _isCreate, PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceProposalCreateLinesInit projInvoiceProposalCreateLinesInit = new ProjInvoiceProposalCreateLinesInit();

        projInvoiceProposalCreateLinesInit.setCache(invoiceableCache);
        projInvoiceProposalCreateLinesInit.initCost(_projCostTrans, projFundingSourceRefId);

        this.createProposalTrans(projInvoiceProposalCreateLinesInit, _isCreate, _contractLineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type deduction.
    /// </summary>
    /// <param name="_projOnAccTrans">
    /// A record in <c>ProjOnAccTrans</c> table.
    /// </param>
    protected void doDeduction(ProjOnAccTrans _projOnAccTrans)
    {
        boolean isTransInserted;

        select firstonly RecId from proposalTransDisplayDeduction
            where proposalTransDisplayDeduction.RefRecIdTrans == _projOnAccTrans.RecId
            && proposalTransDisplayDeduction.RefTransId       == _projOnAccTrans.TransId;

        if (!proposalTransDisplayDeduction.RecId)
        {
            proposalTransDisplayDeduction.clear();
            isTransInserted = this.populateProposalTransDisplayDeduction(_projOnAccTrans);

            if (isTransInserted)
            {
                proposalTransDisplayDeduction.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProposalTransDisplayDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initialize <c>PSATmpProjProposalTrans</c> table buffer.
    /// </summary>
    /// <param name = "_projOnAccTrans">
    ///     A record in <c>ProjOnAccTrans</c> table.
    /// </param>
    /// <returns>
    ///     Returns a boolean value.
    /// </returns>
    protected boolean populateProposalTransDisplayDeduction(ProjOnAccTrans _projOnAccTrans)
    {
        boolean isTransInserted;

        proposalTransDisplayDeduction.initFromProjOnAccTrans(_projOnAccTrans);

        proposalTransDisplayDeduction.LineAmount = 0;
        proposalTransDisplayDeduction.SalesPrice = 0;

        ProjOnAccTransSale          projOnAccTransSale;
        ProjOnAccTrans              projOnAccTransCustomerAdvance;
        ProjOnAccTransSale          projOnAccTransSaleCustomerAdvance;

        while select projOnAccTransSale where
                projOnAccTransSale.TransId == _projOnAccTrans.TransId &&
                (!projFundingSourceRefId || (projFundingSourceRefId && projOnAccTransSale.FundingSource == projFundingSourceRefId))
                    outer join firstOnly TransId from projOnAccTransCustomerAdvance
                        where projOnAccTransCustomerAdvance.RecId == _projOnAccTrans.PSARefRecId
                            outer join firstOnly RecId from projOnAccTransSaleCustomerAdvance
                                where projOnAccTransSaleCustomerAdvance.TransId == projOnAccTransCustomerAdvance.TransId
                                && (projOnAccTransSaleCustomerAdvance.TransStatus == ProjTransStatus::Invoiced || projOnAccTransSaleCustomerAdvance.TransStatus == ProjTransStatus::Estimated)
                                && projOnAccTransSaleCustomerAdvance.FundingSource == projOnAccTransSale.FundingSource
        {
            if (!_projOnAccTrans.PSARefRecId || projOnAccTransSaleCustomerAdvance.RecId)
            {
                proposalTransCreateDeduction.clear();
                proposalTransCreateDeduction.data(proposalTransDisplayDeduction);

                proposalTransCreateDeduction.FundingSourceRefId = projOnAccTransSale.FundingSource;
                proposalTransCreateDeduction.RefTableId         = projOnAccTransSale.TableId;
                proposalTransCreateDeduction.RefRecId           = projOnAccTransSale.RecId;

                if (projOnAccTransSale.canBeInvoiced())
                {
                    if (projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                    {
                        proposalTransCreateDeduction.LineAmount     += projOnAccTransSale.Amount * -1;
                        proposalTransCreateDeduction.Qty            =  proposalTransDisplay.Qty * -1;

                        proposalTransDisplayDeduction.LineAmount    += projOnAccTransSale.Amount * -1;
                        proposalTransDisplayDeduction.Qty           =  proposalTransDisplay.Qty * -1;
                    }
                    else
                    {
                        proposalTransCreateDeduction.LineAmount     =  projOnAccTransSale.Amount;
                        proposalTransDisplayDeduction.LineAmount    += projOnAccTransSale.Amount;
                    }

                    proposalTransCreateDeduction.insert();

                    isTransInserted = true;
                }
            }
        }

        return isTransInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type OnAcccount for the create proposal with billing rule.
    /// It will get only Registered amounts
    /// </summary>
    /// <param name="_projOnAccTrans">
    /// A record in <c>ProjOnAccTrans</c> table.
    /// </param>
    protected void doOnAcc(ProjOnAccTrans _projOnAccTrans)
    {
        ProjOnAccTransSale           projOnAccTransSale;
        boolean                      isTransInserted;

        proposalTransDisplayDeduction.clear();
        proposalTransDisplayDeduction.initFromProjOnAccTrans(_projOnAccTrans);

        proposalTransDisplayDeduction.LineAmount = 0;
        proposalTransDisplayDeduction.SalesPrice = 0;

        while select projOnAccTransSale where
            projOnAccTransSale.TransId == _projOnAccTrans.TransId &&
        projOnAccTransSale.TransStatus == ProjTransStatus::Registered &&
            (!projFundingSourceRefId || (projFundingSourceRefId && projOnAccTransSale.FundingSource == projFundingSourceRefId))
        {
            if (this.shouldInsertTransCreateDeduction(projOnAccTransSale))
            {
                proposalTransCreateDeduction.clear();
                proposalTransCreateDeduction.data(proposalTransDisplayDeduction);

                proposalTransCreateDeduction.FundingSourceRefId = projOnAccTransSale.FundingSource;
                proposalTransCreateDeduction.RefTableId         = projOnAccTransSale.TableId;
                proposalTransCreateDeduction.RefRecId           = projOnAccTransSale.RecId;

                proposalTransCreateDeduction.LineAmount     =  projOnAccTransSale.Amount;
                proposalTransDisplayDeduction.LineAmount    += projOnAccTransSale.Amount;

                proposalTransCreateDeduction.insert();

                isTransInserted = true;
            }
        }

        if (isTransInserted)
        {
            proposalTransDisplayDeduction.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldInsertTransCreateDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether <c>ProposalTransCreateDeduction</c> record should be created.
    /// </summary>
    /// <param name = "_projOnAccTransSale"><c>ProjOnAccTransSale</c> buffer.</param>
    /// <returns>true if <c>ProposalTransCreateDeduction</c> record should be created; false otherwise.</returns>
    protected boolean shouldInsertTransCreateDeduction(ProjOnAccTransSale _projOnAccTransSale)
    {
        return _projOnAccTransSale.canBeInvoiced();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type hour.
    /// </summary>
    /// <param name="_projEmplTrans">
    /// A record in <c>ProjEmplTrans</c> table.
    /// </param>
    /// <param name="_isCreate">
    /// Indicates whether a record should be inserted into proposalTransCreate buffer.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doEmpl(ProjEmplTrans _projEmplTrans, boolean _isCreate, PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceProposalCreateLinesInit projInvoiceProposalCreateLinesInit = new ProjInvoiceProposalCreateLinesInit();

        projInvoiceProposalCreateLinesInit.setCache(invoiceableCache);
        projInvoiceProposalCreateLinesInit.initEmpl(_projEmplTrans, projFundingSourceRefId);

        this.createProposalTrans(projInvoiceProposalCreateLinesInit, _isCreate, _contractLineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type item.
    /// </summary>
    /// <param name="_projItemTrans">
    /// A record in <c>ProjItemTrans</c> table.
    /// </param>
    /// <param name="_isCreate">
    /// Indicates whether a record should be inserted into proposalTransCreate buffer.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doItem(ProjItemTrans _projItemTrans, boolean _isCreate, PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceProposalCreateLinesInit projInvoiceProposalCreateLinesInit = new ProjInvoiceProposalCreateLinesInit();

        projInvoiceProposalCreateLinesInit.setCache(invoiceableCache);
        projInvoiceProposalCreateLinesInit.initItem(_projItemTrans, projFundingSourceRefId);

        this.createProposalTrans(projInvoiceProposalCreateLinesInit, _isCreate, _contractLineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type on account.
    /// </summary>
    /// <param name="_projOnAccTrans">
    /// A record in <c>ProjOnAccTrans</c> table.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doOnAccount(ProjOnAccTrans _projOnAccTrans, PSAContractLineNum _contractLineNum)
    {
        ProjOnAccTransSale  projOnAccTransSale;
        boolean             isTransInserted;

        proposalTransDisplay.clear();
        proposalTransDisplay.initFromProjOnAccTrans(_projOnAccTrans);
        proposalTransDisplay.LineAmount      = 0;
        proposalTransDisplay.ContractLineNum = _contractLineNum;

        while select projOnAccTransSale where
            projOnAccTransSale.TransId == _projOnAccTrans.TransId &&
            (!projFundingSourceRefId || (projFundingSourceRefId && projOnAccTransSale.FundingSource == projFundingSourceRefId))
        {
            if (this.setPSATmpProjProposalTransOnAccount(projOnAccTransSale))
            {
                isTransInserted = true;
            }
        }

        if (isTransInserted)
        {
            proposalTransDisplay.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPSATmpProjProposalTransOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets <c>PSATmpProjProposalTrans</c> table fields from <c>ProjOnAccTransSale</c> table buffer.
    /// </summary>
    /// <param name = "_projOnAccTransSale">
    /// <c>ProjOnAccTransSale</c> table buffer.
    /// </param>
    /// <returns>
    /// true if the <c>ProjOnAccTransSale</c> table buffer passed in can be invoiced; otherwise, false.
    /// </returns>
    protected boolean setPSATmpProjProposalTransOnAccount(ProjOnAccTransSale _projOnAccTransSale)
    {
        proposalTransCreate.data(proposalTransDisplay);
        proposalTransCreate.FundingSourceRefId = _projOnAccTransSale.FundingSource;
        proposalTransCreate.RefTableId         = _projOnAccTransSale.TableId;
        proposalTransCreate.RefRecId           = _projOnAccTransSale.RecId;

        boolean canBeInvoiced = _projOnAccTransSale.canBeInvoiced();

        if (canBeInvoiced)
        {
            if (_projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
            {
                proposalTransCreate.LineAmount      =  _projOnAccTransSale.Amount * -1;
                proposalTransDisplay.LineAmount     += _projOnAccTransSale.Amount * -1;

                proposalTransCreate.Qty             =  proposalTransCreate.Qty  * -1;
                proposalTransDisplay.Qty            =  proposalTransDisplay.Qty * -1;

                if (ProjUseOriginalInvoiceDateCalcTotalsFlight::instance().isEnabled())
                {
                    InvoiceDate origInvoiceDate = new ProjTransOnAccTransSale(_projOnAccTransSale.projOnAccTrans(), _projOnAccTransSale).getCreditNoteOrigTransInvoiceDate();
                    if (origInvoiceDate)
                    {
                        proposalTransCreate.FixedExchRate = ExchangeRateHelper::exchRate(proposalTransCreate.CurrencyCode, origInvoiceDate);
                        proposalTransDisplay.FixedExchRate = proposalTransCreate.FixedExchRate;
                    }
                }
            }
            else
            {
                proposalTransCreate.LineAmount      =  _projOnAccTransSale.Amount;
                proposalTransDisplay.LineAmount     += _projOnAccTransSale.Amount;
            }

            proposalTransCreate.insert();
        }

        return canBeInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records of type revenue.
    /// </summary>
    /// <param name="_projRevenueTrans">
    /// A record in <c>ProjRevenueTrans</c> table for which invoice lines are to be created.
    /// </param>
    /// <param name="_contractLineNum">
    /// Reference to cotnract line for which revenue records are being created.
    /// </param>
    public void doRevenue(ProjRevenueTrans _projRevenueTrans, PSAContractLineNum _contractLineNum)
    {
        ProjInvoiceProposalCreateLinesInit projInvoiceProposalCreateLinesInit = new ProjInvoiceProposalCreateLinesInit();

        projInvoiceProposalCreateLinesInit.setCache(invoiceableCache);
        projInvoiceProposalCreateLinesInit.initRevenue(_projRevenueTrans, projFundingSourceRefId);

        this.createProposalTrans(projInvoiceProposalCreateLinesInit, true, _contractLineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type sales.
    /// </summary>
    /// <param name="_salesLine">
    /// A record in <c>SalesLine</c> table.
    /// </param>
    /// <param name="_projInvoiceProjId">
    /// Identifier of the contract.
    /// </param>
    /// <param name="_isCreate">
    /// Indicates whether a record should be inserted into proposalTransCreate buffer.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doSalesLine(SalesLine _salesLine, ProjInvoiceProjId _projInvoiceProjId, boolean _isCreate, PSAContractLineNum _contractLineNum)
    {
        #ISOCountryRegionCodes
        SalesQuantity           salesQuantity;
        SalesQty                deliverNow;
        SalesQty                remainBefore;
        SalesQty                remainAfter;
        ProjProposalItem        projProposalItem;
        ProjProposalJour        projProposalJour;

        if (_salesLine.canBeInvoiced())
        {
            salesQuantity = SalesQuantity::construct(DocumentStatus::Invoice);

            if (proposalCreateLinesParams.parmInvoiceDate() &&
                SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]))
            {
                salesQuantity.parmTransDate(proposalCreateLinesParams.parmInvoiceDate());
            }

            [deliverNow, remainBefore, remainAfter] = salesQuantity.qtySales(_salesLine, this.getSalesLineSalesUpdate(_salesLine));

            select sum(DeliverNow) from projProposalItem where
                    projProposalItem.InventTransId == _salesLine.InventTransId
                join TableId from projProposalJour where
                    projProposalJour.ProposalId    == projProposalItem.ProposalId &&
                    (projProposalJour.LineProperty  == ProjLinePropertyCode::Open || projProposalJour.LineProperty  == ProjLinePropertyCode::Approved);

            deliverNow = deliverNow - projProposalItem.DeliverNow;

            if (proposalCreateLinesParams.parmSalesUpdate() == SalesUpdate::PickingList && deliverNow < 0)
            {
                deliverNow = 0;
            }

            if (deliverNow)
            {
                proposalTransDisplay.clear();
                proposalTransDisplay = this.setProposalTransDisplayForSalesLine(_salesLine, _projInvoiceProjId, deliverNow, _contractLineNum);               
                proposalTransDisplay.insert();

                if (_isCreate)
                {
                    proposalTransCreate.data(proposalTransDisplay);
                    proposalTransCreate.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesLineSalesUpdate</Name>
				<Source><![CDATA[
    protected SalesUpdate getSalesLineSalesUpdate(SalesLine _salesLine)
    {
        return proposalCreateLinesParams.parmSalesUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProposalTransDisplayForSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes <c>proposalTransDisplay</c> table buffer for a given <c>SalesLine</c>.
    /// </summary>
    /// <param name = "_salesLine"> 
    ///     A record in <c>SalesLine</c> table.
    /// </param>
    /// <param name = "_projInvoiceProjId">
    ///     Identifier of the contract.
    /// </param>
    /// <param name = "_deliverNow">
    ///     A <c>SalesQty</c> variable.
    /// </param>
    /// <param name = "_contractLineNum">
    ///     Identifier of the billing rule line.
    /// </param>
    /// <returns>
    ///     Returns <c>proposalTransDisplay</c> table buffer.
    /// </returns>
    protected PSATmpProjProposalTrans setProposalTransDisplayForSalesLine(SalesLine _salesLine, ProjInvoiceProjId _projInvoiceProjId, SalesQty _deliverNow, PSAContractLineNum _contractLineNum)
    {
        if (this.isMultipleContractLinesForProjectEnabled && ProjMultipleContractLinesForProjectFeatureHelper::hasFixedPriceBillingForItemTransactions(_salesLine.ProjId))
        {
            proposalTransDisplay.initFromSalesLineExceptLineAmount(_salesLine, _deliverNow);
        }
        else
        {
            proposalTransDisplay.initFromSalesLine(_salesLine, _deliverNow);
        }

        proposalTransDisplay.ContractLineNum = _contractLineNum;

        ProjFundingSource projFundingSource = ProjFundingSource::fundingSourceFromSalesLine(_projInvoiceProjId, _salesLine);
		
		if (!projFundingSource)
        {
            select firstonly RecId from projFundingSource
                where projFundingSource.ContractId == _projInvoiceProjId &&
					(projFundingSource.FundingType == ProjFundingType::Customer || projFundingSource.FundingType == ProjFundingType::Grant);
        }
        proposalTransDisplay.FundingSourceRefId = projFundingSource.RecId;
        proposalTransDisplay.RefTableId = _salesLine.TableId;
        proposalTransDisplay.RefRecId = _salesLine.RecId;
        return proposalTransDisplay;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProposalCreateLinesParams</Name>
				<Source><![CDATA[
    public ProjInvoiceProposalCreateLinesParams parmProposalCreateLinesParams(ProjInvoiceProposalCreateLinesParams _proposalCreateLinesParams = proposalCreateLinesParams)
    {
        proposalCreateLinesParams = _proposalCreateLinesParams;

        return proposalCreateLinesParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfDeductionIsAdvanceInvoice</Name>
				<Source><![CDATA[
    private void checkIfDeductionIsAdvanceInvoice(PSATmpProjProposalTrans _proposalTransCreateDeduction)
    {
        ProjOnAccTrans onAccTrans;
        ProjAdvancesSettle advancesSettle;

        select firstonly RecId from advancesSettle
            where advancesSettle.ProjInvoiceJour != 0
        exists join onAccTrans
            where onAccTrans.TransId == _proposalTransCreateDeduction.RefTransId
                && advancesSettle.TransRecId == onAccTrans.PSARefRecId;

        if (advancesSettle.RecId)
        {
            advanceInvoiceSettlement = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareForInvoicing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the selected records for invoicing.
    /// </summary>
    /// <returns>
    /// A buffer of type <c>PSATmpProjProposalTrans</c>
    /// </returns>
    /// <remarks>
    /// Deduction transactions and regular transactions are merged.
    /// </remarks>
    public PSATmpProjProposalTrans prepareForInvoicing()
    {
        PSATmpProjProposalTrans     tmpProposalTrans;

        while select proposalTransCreateDeduction where proposalTransCreateDeduction.Selected == true
        {
            tmpProposalTrans.data(proposalTransCreateDeduction);
            if (countryRegion_PL && !advanceInvoiceSettlement)
            {
                this.checkIfDeductionIsAdvanceInvoice(proposalTransCreateDeduction);
            }

            tmpProposalTrans.insert();
        }

        while select proposalTransCreate where proposalTransCreate.Selected == true
        {
            tmpProposalTrans.data(proposalTransCreate);
            tmpProposalTrans.insert();
        }

        return tmpProposalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Records the fact that user has selected/deselected an invoice line in the create invoice proposal form.
    /// </summary>
    /// <param name="_transId">
    /// Transaction ID of the record.
    /// </param>
    /// <param name="_isSelected">
    /// Indicates whether the record is selected/deselected.
    /// </param>
    /// <param name="_isDeduction">
    /// Indicates whether the record is of type deduction.
    /// </param>
    public void selectionChanged(ProjTransIdBase _transId, boolean _isSelected, boolean _isDeduction)
    {
        if (_isDeduction)
        {
            if (_transId)
            {
                update_recordset proposalTransDisplayDeduction setting Selected = _isSelected where proposalTransDisplayDeduction.RefTransId == _transId;

                update_recordset proposalTransCreateDeduction  setting Selected = _isSelected where proposalTransCreateDeduction.RefTransId  == _transId;
            }
            else
            {
                update_recordset proposalTransDisplayDeduction setting Selected = _isSelected;
                update_recordset proposalTransCreateDeduction  setting Selected = _isSelected;
            }
        }
        else
        {
            if (_transId)
            {
                update_recordset proposalTransDisplay setting Selected = _isSelected where proposalTransDisplay.RefTransId == _transId;

                update_recordset proposalTransCreate  setting Selected = _isSelected where proposalTransCreate.RefTransId  == _transId;
            }
            else
            {
                update_recordset proposalTransDisplay setting Selected = _isSelected;
                update_recordset proposalTransCreate  setting Selected = _isSelected;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChangedByTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Records the fact that user has selected/deselected an invoice line in the create invoice proposal form by table buffer.
    /// </summary>
    /// <param name = "_invoiceProposalDisplayTableBuffer">
    /// <c>PSATmpProjProposalTrans</c> table buffer for display records for to specified which RefTransId field to be updated.
    /// </param>
    /// <param name="_isSelected">
    /// Indicates whether the record is selected/deselected.
    /// </param>
    /// <param name="_isDeduction">
    /// Indicates whether the record is of type deduction.
    /// </param>
    public void selectionChangedByTable(PSATmpProjProposalTrans _invoiceProposalDisplayTableBuffer, boolean _isSelected, boolean _isDeduction)
    {
        if (_invoiceProposalDisplayTableBuffer)
        {
            select count(RecId) from _invoiceProposalDisplayTableBuffer 
                where _invoiceProposalDisplayTableBuffer.RefTransId != '';
            int invoiceProposalTableBufferCount = int642int(_invoiceProposalDisplayTableBuffer.RecId);

            if (_isDeduction)
            {
                select count(RecId) from proposalTransDisplayDeduction
                    where proposalTransDisplayDeduction.RefTransId != '';

                // If the number of records in the buffer is the same as the display table, then we can
                // assume all records can be updated with the same selected value.
                if (int642int(proposalTransDisplayDeduction.RecId) == invoiceProposalTableBufferCount)
                {
                    update_recordset proposalTransDisplayDeduction setting Selected = _isSelected;
                    update_recordset proposalTransCreateDeduction setting Selected = _isSelected;
                }
                else
                {
                    update_recordset proposalTransDisplayDeduction setting Selected = _isSelected
                        exists join _invoiceProposalDisplayTableBuffer
                        where _invoiceProposalDisplayTableBuffer.RefTransId == proposalTransDisplayDeduction.RefTransId;
                    update_recordset proposalTransCreateDeduction setting Selected = _isSelected
                        exists join _invoiceProposalDisplayTableBuffer
                        where _invoiceProposalDisplayTableBuffer.RefTransId == proposalTransCreateDeduction.RefTransId;
                }
            }
            else
            {
                select count(RecId) from proposalTransDisplay
                    where proposalTransDisplay.RefTransId != '';

                // If the number of records in the buffer is the same as the display table, then we can
                // assume all records can be updated with the same selected value.
                if (int642int(proposalTransDisplay.RecId) == invoiceProposalTableBufferCount)
                {
                    update_recordset proposalTransDisplay setting Selected = _isSelected;
                    update_recordset proposalTransCreate setting Selected = _isSelected;
                }
                else
                {
                    update_recordset proposalTransDisplay setting Selected = _isSelected
                        exists join _invoiceProposalDisplayTableBuffer
                        where _invoiceProposalDisplayTableBuffer.RefTransId == proposalTransDisplay.RefTransId;
                    update_recordset proposalTransCreate setting Selected = _isSelected
                        exists join _invoiceProposalDisplayTableBuffer
                        where _invoiceProposalDisplayTableBuffer.RefTransId == proposalTransCreate.RefTransId;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContractLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates revenue records, updates contact line number.
    /// </summary>
    public void updateContractLineNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLineWithInDateRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks whether <c>SalesLine</c> table buffer is within the date range or not.
    /// </summary>
    /// <param name = "_salesLine">
    ///     A record in <c>SalesLine</c> table.
    /// </param>
    /// <returns>
    ///     true if the <c>SalesLine</c> table buffer is within the date range; otherwise, false.
    /// </returns>
    internal protected boolean checkSalesLineWithInDateRange(SalesLine _salesLine)
    {
        SalesShippingDate confirmedDlv = _salesLine.ConfirmedDlv;
        TransDate startDate = proposalCreateLinesParams.parmStartDate();
        TransDate endDate = proposalCreateLinesParams.parmEndDate();
        boolean doSalesLine = false;

        if ((startDate == dateNull() || confirmedDlv >= startDate) && (endDate == dateNull() || confirmedDlv <= endDate))
        {
            doSalesLine = true;
        }

        if (!doSalesLine && (proposalCreateLinesParams.parmSalesUpdate() == SalesUpdate::All || proposalCreateLinesParams.parmSalesUpdate() == SalesUpdate::PackingSlip))
        {
            CustPackingSlipJour custPackingSlipJour;
            CustPackingSlipTrans custPackingSlipTrans;

            select firstonly DeliveryDate from custPackingSlipJour
                exists join custPackingSlipTrans
                    where custPackingSlipJour.SalesId == custPackingSlipTrans.SalesId &&
                        custPackingSlipJour.PackingSlipId == custPackingSlipTrans.PackingSlipId &&
                        custPackingSlipTrans.SalesId == _salesLine.SalesId &&
                        custPackingSlipTrans.InventTransId == _salesLine.InventTransId;

            if (custPackingSlipJour.DeliveryDate)
            {
                SalesShippingDate deliveryDate = custPackingSlipJour.DeliveryDate;

                if (deliveryDate >= startDate && deliveryDate <= endDate)
                {
                    doSalesLine = true;
                }
            }
        }

        return doSalesLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>