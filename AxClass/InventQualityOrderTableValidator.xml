<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityOrderTableValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that is used to validate <c>InventQualityOrderTable</c> fields.
/// </summary>
/// <remarks>
/// This class does not do a quality order validation from a business point of view.
/// </remarks>
public class InventQualityOrderTableValidator
{
    InventQualityOrderTable         inventQualityOrderTable;
    InventQualityReferenceType      inventQualityReference;

    boolean                         cwItem;
    Qty                             availableQty;
    Qty                             qualityOrderQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCanCreate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether a quality order can be created from the specified reference.
    /// </summary>
    /// <returns>
    ///    true if a quality order can be created; otherwise, false.
    /// </returns>
    public boolean checkCanCreate()
    {
        return inventQualityReference.isEligibleForQualityManagement()
           && (!inventQualityOrderTable.TestDestructive || inventQualityReference.isEligibleForDestructiveTest())
           && this.checkQty()
           && this.checkNoCrossDockingWorkExists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCheckQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the quantity check must be skipped.
    /// </summary>
    /// <returns>
    /// true if the quantity check must be skipped; otherwise, false.
    /// </returns>
    protected boolean skipCheckQty()
    {
        return inventQualityOrderTable.orig().Qty != 0 && inventQualityOrderTable.Qty == inventQualityOrderTable.orig().Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the quantity that is specified is valid.
    /// </summary>
    /// <returns>
    /// true if the quantity is valid; otherwise, false.
    /// </returns>
    public boolean checkQty()
    {
        if (this.skipCheckQty())
        {
            return true;
        }

        cwItem = PdsGlobal::pdsIsCWItem(inventQualityOrderTable.ItemId);
        qualityOrderQty = this.qualityOrderQty();
        availableQty = this.referenceDocumentQty();

        if (availableQty <= 0 || availableQty < qualityOrderQty)
        {
            Qty referenceDocumentTotalQty = this.referenceDocumentTotalQty();

            if (sign(availableQty) != sign(referenceDocumentTotalQty))
            {
                referenceDocumentTotalQty = referenceDocumentTotalQty * this.calcReferenceDocomentTotalSign();
            }

            availableQty = referenceDocumentTotalQty;

            if (availableQty <= 0)
            {
                return checkFailed(strFmt("@SYS113820", inventQualityOrderTable.ItemId));
            }

            if (availableQty < qualityOrderQty)
            {
                return checkFailed(strFmt("@SYS113830", availableQty));
            }
        }

        if (inventQualityOrderTable.ReferenceType != InventTestReferenceType::Inventory &&
            inventQualityOrderTable.TestDestructive &&
            !this.checkQtyForDestructiveTest())
        {
            return false;
        }

        if (inventQualityOrderTable.ReferenceType == InventTestReferenceType::Inventory &&
            !qualityOrderQty &&
            !InventQualityOrderTableOrigin::exist(inventQualityOrderTable.QualityOrderId))
        {
            return checkFailed("@SYS113821");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReferenceDocomentTotalSign</Name>
				<Source><![CDATA[
    private sign calcReferenceDocomentTotalSign()
    {
        if (inventQualityReference 
            && inventQualityReference.referenceType() == InventTestReferenceType::Sales)
        {
            return inventQualityReference.parmMovementForRefQty().transSign();
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoCrossDockingWorkExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether no related cross-docking works have been created for the original transaction.
    /// </summary>
    /// <returns>
    /// true if there is no work; otherwise, false.
    /// </returns>
    private boolean checkNoCrossDockingWorkExists()
    {
        WHSWorkTable        workTable;
        WHSWorkLine         workLine;
        InventTransOrigin   inventTransOrigin;
        InventTransOrigin   inventTransOriginMark;
        InventTrans         inventTrans;

        select firstonly RecId, WorkTransType from workTable
            where workTable.WorkTransType == WHSWorkTransType::CrossDocking
        exists join workLine
            where workLine.WorkId == workTable.WorkId
        exists join inventTransOrigin
            where inventTransOrigin.InventTransId == workLine.InventTransId
        exists join inventTrans
            where inventTrans.InventTransOrigin == inventTransOrigin.RecId
        exists join inventTransOriginMark
            where inventTransOriginMark.RecId == inventTrans.MarkingRefInventTransOrigin
            &&    inventTransOriginMark.InventTransId == inventQualityOrderTable.InventRefTransId;

        if (workTable)
        {
            return checkFailed(strFmt("@WAX:WHSCreateQualityOrderWithWorkError", inventQualityOrderTable.ReferenceType, inventQualityOrderTable.InventRefId, workTable.WorkTransType));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkQtyForDestructiveTest</Name>
				<Source><![CDATA[
    private boolean checkQtyForDestructiveTest()
    {
        boolean ret = true;

        Qty referenceQty = availableQty -
                                        (cwItem ? inventQualityOrderTable.pdsCWReferenceTotalDestructiveQty():
                                        inventQualityOrderTable.referenceTotalDestructiveQty()
                                        );

        if (referenceQty < qualityOrderQty)
        {
            warning(strFmt("@SYS113818", referenceQty));
            ret = checkFailed("@SYS113817");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventQualityOrderTableValidator</c> class from the specified quality order.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// A quality order.
    /// </param>
    protected void new(InventQualityOrderTable _inventQualityOrderTable)
    {
        inventQualityOrderTable = _inventQualityOrderTable;
        inventQualityReference = InventQualityReferenceType::newFromQualityOrder(inventQualityOrderTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQualityReference</Name>
				<Source><![CDATA[
    public InventQualityReferenceType parmInventQualityReference(InventQualityReferenceType _inventQualityReference = inventQualityReference)
    {
        if (!prmisDefault(_inventQualityReference))
        {
            inventQualityReference = _inventQualityReference;
        }

        return inventQualityReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qualityOrderQty</Name>
				<Source><![CDATA[
    private Qty qualityOrderQty()
    {
        Qty qty;

        if (cwItem)
        {
            qty = inventQualityOrderTable.PdsCWQty;
        }
        else
        {
            qty = inventQualityOrderTable.Qty;
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceDocumentQty</Name>
				<Source><![CDATA[
    private Qty referenceDocumentQty()
    {
        Qty qty;

        if (cwItem)
        {
            qty = inventQualityReference.pdsCWInventRefQty();
        }
        else
        {
            qty = inventQualityReference.inventRefQty();
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceDocumentTotalQty</Name>
				<Source><![CDATA[
    private Qty referenceDocumentTotalQty()
    {
        Qty qty;

        if (cwItem)
        {
            qty = inventQualityReference.inventRefTotalQtyCW();
        }
        else
        {
            qty = inventQualityReference.inventRefTotalQty();
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromQualityOrderTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>InventQualityOrderTableValidator</c> class from the specified quality order.
    /// </summary>
    /// <param name="_inventQualityOrderTable">
    /// A quality order.
    /// </param>
    /// <returns>
    /// A new instance of the <c>InventQualityOrderTableValidator</c> class.
    /// </returns>
    public static InventQualityOrderTableValidator newFromQualityOrderTable(
        InventQualityOrderTable _inventQualityOrderTable)
    {
        return new InventQualityOrderTableValidator(_inventQualityOrderTable);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>