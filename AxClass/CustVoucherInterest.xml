<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVoucherInterest</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVoucherInterest extends CustVoucher
{
    Set custVoucherInterestSet;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the specified invoice should have an invoice journal entry
    /// created for it.
    /// </summary>
    /// <param name="_custVendAC">
    /// A CustVendAC enumeration value that indicates the module to which the
    /// invoice belongs.
    /// </param>
    /// <param name="_invoiceId">
    /// The InvoiceId value of the invoice.
    /// </param>
    /// <param name="_transDate">
    /// The TransDate of the invoice; optional.
    /// </param>
    /// <returns>
    /// true if a journal entry should be created; otherwise, false.
    /// </returns>
    protected boolean checkInvoice(CustVendAC _custVendAC,
                                   InvoiceId _invoiceId,
                                   TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        // don't create CustInvoiceJour entries when posting interest vouchers
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransOpenLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates open transaction lines for the interest note.
    /// </summary>
    /// <param name="_custTransOpen">
    ///    The <c>CustTransOpen</c> table buffer.
    /// </param>

    protected void createTransOpenLine(CustVendTransOpen _custTransOpen)
    {
        CustInvoiceLineIdRef custInvoiceLineIdRef;
        CustTransOpenLine custTransOpenLine;
        CustInterestTrans custInterestTrans;
        RecId custInterestTransRecId;
        SetEnumerator custVoucherInterestEnumerator;

        custVoucherInterestEnumerator = this.parmInterestTrans().getEnumerator();

        if (CustParameters::find().MarkOpenInvoiceLine == NoYes::Yes && this.parmInterestTrans().elements() > 1)
        {
            while (custVoucherInterestEnumerator.moveNext())
            {
                custInterestTransRecId = custVoucherInterestEnumerator.current();

                select forupdate custInterestTrans
                where custInterestTrans.RecId == custInterestTransRecId;

                if (custInterestTrans)
                {
                    custInvoiceLineIdRef.clear();
                    custInvoiceLineIdRef.EntityType = CustInvoiceLineType::InterestNote;
                    custInvoiceLineIdRef.insert();

                    custInterestTrans.CustInvoiceLineIdRef = custInvoiceLineIdRef.RecId;
                    custInterestTrans.update();

                    custTransOpenLine.CustTransOpen = _custTransOpen.RecId;
                    custTransOpenLine.CustInvoiceLineIdRef = custInvoiceLineIdRef.RecId;
                    custTransOpenLine.AmountCur = custInterestTrans.InterestAmount;
                    custTransOpenLine.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInterestTrans</Name>
				<Source><![CDATA[
    Set parmInterestTrans(Set _custVoucherInterestSet = custVoucherInterestSet)
    {
        custVoucherInterestSet = new Set(typeName2Type(extendedtypestr(recId)));
        custVoucherInterestSet = _custVoucherInterestSet;

        return custVoucherInterestSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>