<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSplitShipConfirmCancelQty</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>WHSSplitShipConfirmCancelQty</c> handles load splitting at ship confirmation by cancelling remaining quantity.
/// </summary>
[WHSSplitShipConfirmFactoryAttribute(WHSLoadSplitShipConfirmMethod::CancelQty)]
internal final class WHSSplitShipConfirmCancelQty extends WHSSplitShipConfirm
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelLoadLines</Name>
				<Source><![CDATA[
    private void cancelLoadLines(WHSShipmentTable _shipmentTable)
    {
        using (var activityContext = this.instrumentationLogger().splitShipConfirmActivities().cancelLoadLines())
        {
            this.instrumentationLogger().logRecordInformation(loadTable);
            this.instrumentationLogger().logRecordInformation(_shipmentTable);

            WHSLoadLine loadLine;
            int         deletedLines;
            int         reducedLines;

            // Cancel load lines in full if nothing is picked.
            // Loop and delete since the delete method is overridden.
            while select forupdate loadLine
                where loadLine.ShipmentId   == _shipmentTable.ShipmentId
                    &&  loadLine.LoadId     == loadTable.LoadId
            {
                if (loadLine.PickedQty == 0)
                {
                    loadLine.delete();
                    deletedLines++;
                }
                else if (loadLine.PickedQty != loadLine.InventQty && loadLine.PickedQty != 0)
                {
                    this.reduceLoadLineQuantityToPickedQuantity(loadLine, false);
                    WHSLoadTable::reduceLoadWeightsForLoadLine(loadLine, loadLine.InventQty);
                    reducedLines++;
                }
            }

            activityContext.addCustomProperty('SplitShipConfirmCancelQty.DeletedLines', int2Str(deletedLines));
            activityContext.addCustomProperty('SplitShipConfirmCancelQty.ReducedLines', int2Str(reducedLines));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkNotExists</Name>
				<Source><![CDATA[
    private boolean validateWorkNotExists()
    {
        WHSWorkTable    workTable;
        WHSWorkLine     workLine;

        select firstOnly RecId from workTable
            where workTable.WorkStatus < WHSWorkStatus::Closed
                exists join workLine
                    where workLine.WorkId   == workTable.WorkId
                        &&  workLine.LoadId == loadTable.LoadId;

        if (workTable.RecId != 0)
        {
            return checkFailed(strFmt("@WAX:SplitLoadErrorWorkCreated", loadTable.LoadId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canLoadBeSplit</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean canLoadBeSplit()
    {
        return this.validateWorkNotExists();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoad</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void updateLoad()
    {
        WHSShipmentTable notAssignedShipment;

        this.cancelLoadLines(notAssignedShipment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipments</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void updateShipments()
    {
        this.cancelShipmentLoadLines();
        this.deleteShipmentWithNoPickedQuantity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelShipmentLoadLines</Name>
				<Source><![CDATA[
    private void cancelShipmentLoadLines()
    {
        WHSShipmentTable    shipmentTable;
        WHSLoadLine         loadLine;
        
        while select shipmentTable
            where shipmentTable.LoadId          == loadTable.LoadId
            &&    shipmentTable.ShipmentStatus   < WHSShipmentStatus::Shipped
        {
            this.cancelLoadLines(shipmentTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteShipmentWithNoPickedQuantity</Name>
				<Source><![CDATA[
    private void deleteShipmentWithNoPickedQuantity()
    {
        using (var activityContext = this.instrumentationLogger().splitShipConfirmActivities().deleteShipments())
        {
            this.instrumentationLogger().logRecordInformation(loadTable);
            
            WHSShipmentTable    shipmentTable;
            WHSLoadLine         loadLine;

            delete_from shipmentTable
                where shipmentTable.LoadId          == loadTable.LoadId
                    &&  shipmentTable.ShipmentStatus < WHSShipmentStatus::Shipped
                        notExists join loadLine
                            where loadLine.ShipmentId   == shipmentTable.ShipmentId
                                &&  loadLine.PickedQty  != 0;
            
            activityContext.addCustomProperty('SplitShipConfirmCancelQty.DeletedShipments', int2Str(shipmentTable.RowCount()));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>