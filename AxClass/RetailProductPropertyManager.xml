<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailProductPropertyManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailProductPropertyManager</c> class sets and gets all the attributes of a Retail product.
/// </summary>
public class RetailProductPropertyManager
{
    #ISOCountryRegionCodes

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    CompanyInfoRecId        legalEntityId;
    EcoResProduct           ecoResProduct;
    InventTable             inventTable;
    RetailInventTable       retailInventTable;
    InventTableModule       inventTableInventModule;
    InventTableModule       inventTableSalesModule;
    InventTableModule       inventTablePurchModule;
    InventItemLocation      inventItemLocationTable;
    InventItemGroupItem     inventItemGroupItemTable;
    InventModelGroupItem    inventModelGroupItemTable;
    WHSInventTable          whsInventTable;
    MCRInventTable          mcrInventTable;

    EcoResProductDimensionGroupProduct  productProductDimensionTable;
    EcoResStorageDimensionGroupItem     itemStorageDimensionTable;
    EcoResTrackingDimensionGroupItem    itemTrackingDimensionTable;
    WHSReservationHierarchyItem         whsReservationHierarchyItem;

    EcoResProductDimensionGroup productDimensionTable;
    EcoResStorageDimensionGroup storageDimensionTable;
    EcoResTrackingDimensionGroup trackingDimensionTable;

    EcoResProductRecId productId;
    ItemId          itemId;

    //<GlobalAttributes>
    BarcodeSetupId                      barcodeSetup;
    NoYesId                             barCodeUseEANStandard;
    EcoResProductDimensionGroupName     groupProductDimension;
    EcoResTrackingDimensionGroupName    groupStorageDimension;
    EcoResTrackingDimensionGroupName    groupTrackingDimension;
    RetailQtyBecomesNegative            posAllowNegativeQuantity;
    RetailNoDiscountAllowed             posDisallowDiscount;
    RetailNoManualDiscountAllowed       posDisallowManualDiscount;
    RetailScaleItem                     posIsScaleItem;
    RetailZeroPriceValid                posIsZeroPriceValid;
    RetailKeyingInPrice                 posKeyingInPrice;
    RetailKeyingInQty                   posKeyingInQuantity;
    RetailMustKeyInComment              posMustKeyInComment;
    RetailReportName                    reportItemLabel;
    RetailReportName                    reportShelfLabel;
    RetailColorGroupId                  variantColorGroup;
    RetailSizeGroupId                   variantSizeGroup;
    RetailStyleGroupId                  variantStyleGroup;
    RetailDateToBeBlocked               dateToBeBlocked;
    RetailDateToActivateItem            dateToActivateItem;
    RetailDateBlocked                   dateBlocked;
    RetailBlocked                       blockedAtRegister;
    //</GlobalAttributes>

    //<LegalEntityAttributes>
    CountGroupId                        groupCounting;
    ReqGroupId                          groupCoverage;
    InventModelGroupId                  groupInventoryModel;
    ItemGroupId                         groupItemGroup;
    TaxItemGroup                        itemSalesTaxGroupPurch;
    TaxItemGroup                        itemSalesTaxGroupSales;
    UnitOfMeasureSymbol                 unitBaseComparison;
    UnitOfMeasureSymbol                 unitBOM;
    UnitOfMeasureSymbol                 unitInvent;
    PriceUnit                           unitPrice;
    PriceUnit                           unitPriceSales;
    UnitOfMeasureSymbol                 unitSales;
    UnitOfMeasureSymbol                 unitPurchase;
    InventSiteId                        siteId;
    InventLocationId                    warehouseInvent;
    InventLocationId                    warehousePurch;
    InventLocationId                    warehouseSales;
    // <GBR>
    ExceptionCode_BR                    exceptionCode_BR;
    ICMSonService_BR                    icmsOnService_BR;
    InventProductTypeId_BR              inventProductType_BR;
    FITaxationOrigin_BR                 taxationOrigin_BR;
    TaxFiscalClassificationId_BR        taxFiscalClassification_BR;
    TaxServiceCodeId_BR                 taxServiceCode_BR;
    // </GBR>

    // <GEERU>
    RetailProhibitReturn_RU                   prohibitReturn_RU;
    RefRecId                            labelAttribute1;
    RefRecId                            labelAttribute2;
    RefRecId                            labelAttribute3;
    RefRecId                            labelAttribute4;
    RefRecId                            labelAttribute5;
    // </GEERU>

    WHSUOMSeqGroupId                    whsUOMSeqGroupId;
    WHSReservationHierarchyRecId        whsReservationHierarchy;

    OverDeliveryPct                     purchaseOverdeliveryPct;
    UnderDeliveryPct                    purchaseUnderdeliveryPct;
    OverDeliveryPct                     salesOverdeliveryPct;
    UnderDeliveryPct                    salesUnderdeliveryPct;
    OverDeliveryPct                     inventoryOverdeliveryPct;
    UnderDeliveryPct                    inventoryUnderdeliveryPct;
    ItemPurchModel                      itemPurchModel;
    ItemCostModel                       itemCostModel;
    ItemBuyerGroupId                    itemBuyerGroupId;

    // Purchase
    InterCompanyBlocked                 purchaseInterCompanyBlocked;
    ItemPriceToleranceGroupId           itemPriceToleranceGroupId;
    ItemPrimaryVendId                   primaryVendorId;
    PriceDate                           purchasePriceDate;
    Price                               purchasePrice;
    InventPriceMarkup                   purchaseMarkup;
    InventPriceMarkupQty                purchasePriceQty;
    InventMarkupGroupId                 purchaseMarkupGroupId;
    PriceAllocateMarkup                 purchaseAllocateMarkup;
    InventLineDiscCode                  purchaseLineDisc;
    InventMultiLineDiscCode             purchaseMultiLineDisc;
    NoYes                               purchaseEndDisc;
    InventSuppItemGroupId               purchaseSuppItemGroupId;
    PDSPricingPrecision                 purchasePDSPricingPrecision;
    TAMItemVendRebateGroupId            itemVendRebateGroupId;
    PdsVendorCheckItem                  pdsVendorCheckItem;

    // Sales
    InterCompanyBlocked                 salesInterCompanyBlocked;
    CommissItemGroup                    salesCommisionGroupId;
    ItemSalesModel                      salesPriceModel;
    SalesPriceModelBasic                salesBasePriceModel;
    ItemSalesContributionRatio          salesContributionRatio;
    ItemSalesPercentMarkup              salesPercentMarkup;
    PriceDate                           salesPriceDate;
    Price                               salesPrice;
    InventPriceMarkup                   salesPriceMarkup;
    InventPriceMarkupQty                salesPriceMarkupQuantity;
    InventMarkupGroupId                 salesMarkupGroupId;
    PriceAllocateMarkup                 salesAllocateMarkup;
    InventLineDiscCode                  salesLineDiscount;
    InventMultiLineDiscCode             salesMultiLineDiscount;
    NoYes                               salesTotalDiscount;
    InventSuppItemGroupId               salesSuppItemGroupId;
    ItemUseAlternative                  salesUseAltItemId;
    ItemIdAlternative                   salesAltItemId;
    ConfigIdAlternative                 salesAltConfigId;
    EcoResItemSizeName                  salesAltInventSizeId;
    EcoResItemColorName                 salesAltInventColorId;
    EcoResItemStyleName                 salesAltInventStyleId;
    EcoResItemVersionName               salesAltInventVersionId;
    MCRInstallmentEligible              salesInstallmentEligible;
    PDSPricingPrecision                 salesPDSPricingPrecision;
    MCRFTCExempt                        salesFTCExempt;
    NoYes                               salesAllowPriceAdjust;
    MCRContinuityScheduleID             salesContinuityScheduleId;
    MCRSellStartDate                    salesStartDate;
    MCRSellEndDate                      salesEndDate;
    PdsItemRebateGroupId                salesPdsItemRebateGroupId;
    PdsFreightAllocationGroupId         salesPdsFreightAllocationGroupId;
    private RetailInventoryBuffer       salesRetailInventoryAvailabilityBuffer;
    private RetailInventoryLevelProfileId salesRetailInventoryAvailabilityLevelProfile;

    // Inventory
    ItemNetWeight                       netWeight;
    ItemTaraWeight                      taraWeight;
    InventDepth                         grossDepth;
    InventWidth                         grossWidth;
    InventHeight                        grossHeight;
    ItemVolume                          unitVolume;
    InventNumGroupId                    batchNumGroupId;
    InventNumGroupId                    serialNumGroupId;
    WMSArrivalHandlingTime              wmsArrivalHandlingTime;
    WMSSortCode                         sortCode;
    ItemPackagingGroupId                packagingGroupId;
    TaxPackagingQty                     taxPackagingQty;

    // Cost
    CostGroupId                         costGroupId;
    PriceDate                           inventoryPriceDate;
    Price                               inventoryPrice;
    InventPriceUnitQty                  inventoryPriceUnit;
    InventPriceMarkup                   inventoryMarkup;
    InventPriceMarkupQty                inventoryPriceQty;
    PriceAllocateMarkup                 inventoryAllocateMarkup;
    ABC                                 abcValue;
    ABC                                 abcContributionMargin;
    ABC                                 abcRevenue;
    ABC                                 abcTieUp;

    // Retail
    RetailPrintVariantsShelfLabels      printVariantsShelfLabels;
    RetailSeasonCode                    seasonCode;
    RetailLifeFrom                      lifeFrom;
    RetailLifeTo                        lifeTo;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canChangeInventItemGroupIdValue</Name>
				<Source><![CDATA[
    private boolean canChangeInventItemGroupIdValue()
    {
        boolean ok;

        ok = !inventTable.hasInventTrans();

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataAreaId</Name>
				<Source><![CDATA[
    private DataAreaId getDataAreaId()
    {
        return CompanyInfo::getDataArea(legalEntityId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLocationOnlyInventDim</Name>
				<Source><![CDATA[
    private InventDim getLocationOnlyInventDim(InventLocationId _locationId)
    {
        InventDim               inventDimLocal;
        InventDim               inventDim;

        //find the existing location dimension
        inventDimLocal.initValue();
        inventDimLocal.InventLocationId = _locationId;
        inventDim = InventDim::findOrCreate(inventDimLocal);

        return InventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks in <c>InventTable</c> and <c>RetailInventTable</c> tables if the product exists.
    /// </summary>
    /// <returns>
    /// True if the product exists; otherwise false
    /// </returns>
    public boolean hasProduct()
    {
        if ((inventTable.RecId) && (retailInventTable.RecId))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes attributes for <c>RetailProductPropertyManager</c>.
    /// </summary>
    /// <param name="_itemLabel">
    /// Optional parameter specifies the default value to use for item label.
    /// </param>
    /// <param name="_shelfLabel">
    /// Optional parameter specifies the default value to use for shelf label.
    /// </param>
    protected void initializeAttributes(RetailReportName _itemLabel = '', RetailReportName _shelfLabel = '')
    {
        OMHierarchyRelationship omHierarchyRelationship;
        OMHierarchyPurpose omHierarchyPurpose;

        EcoResProductMaster productMaster;

        inventTableInventModule = InventTableModule::find(itemId, ModuleInventPurchSales::Invent);
        inventTableSalesModule = InventTableModule::find(itemId, ModuleInventPurchSales::Sales);
        inventTablePurchModule = InventTableModule::find(itemId, ModuleInventPurchSales::Purch);

        mcrInventTable = MCRInventTable::findByItemId(itemId);

        // it seems that when we release a product we create this record with default; hence we use default to retrieve it.
        inventItemLocationTable = InventItemLocation::findDefault(itemId);
        inventItemGroupItemTable = InventItemGroupItem::findByItemIdLegalEntity(itemId);
        inventModelGroupItemTable = InventModelGroupItem::findByItemIdLegalEntity(itemId);

        if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            whsInventTable = WHSInventTable::find(itemId);
            whsReservationHierarchyItem = WHSReservationHierarchyItem::findByItem(inventTable.dataAreaId, itemId);
        }

        productId = inventTable.Product;

        //<GlobalAttributes>
        barcodeSetup = retailInventTable.BarcodeSetupId;
        barCodeUseEANStandard = retailInventTable.UseEanStandardBarcode;

        posAllowNegativeQuantity = retailInventTable.QtyBecomesNegative;
        posDisallowDiscount = retailInventTable.NoDiscountAllowed;
        posDisallowManualDiscount = retailInventTable.NoManualDiscountAllowed;
        posIsScaleItem = retailInventTable.ScaleItem;
        posIsZeroPriceValid = retailInventTable.ZeroPriceValid;
        posKeyingInPrice = retailInventTable.KeyingInPrice;
        posKeyingInQuantity = retailInventTable.KeyingInQty;
        posMustKeyInComment = retailInventTable.MustKeyInComment;

        productMaster = EcoResProductMaster::find(productId);
        if (productMaster.RecId)
        {
            variantColorGroup = productMaster.RetailColorGroupId;
            variantSizeGroup = productMaster.RetailSizeGroupId;
            variantStyleGroup = productMaster.RetailStyleGroupId;
        }

        productProductDimensionTable = EcoResProductDimensionGroupProduct::findByProduct(productId);
        if (productProductDimensionTable)
        {
            productDimensionTable = EcoResProductDimensionGroup::find(productProductDimensionTable.ProductDimensionGroup);
            groupProductDimension = productDimensionTable.Name;
        }

        itemStorageDimensionTable = EcoResStorageDimensionGroupItem::findByItem(inventTable.dataAreaId, itemId);
        if (itemStorageDimensionTable)
        {
            storageDimensionTable = EcoResStorageDimensionGroup::find(itemStorageDimensionTable.StorageDimensionGroup);
            groupStorageDimension = storageDimensionTable.Name;
        }

        itemTrackingDimensionTable = EcoResTrackingDimensionGroupItem::findByItem(inventTable.dataAreaId, itemId);
        if (itemTrackingDimensionTable)
        {
            trackingDimensionTable = EcoResTrackingDimensionGroup::find(itemTrackingDimensionTable.TrackingDimensionGroup, false);
            groupTrackingDimension = trackingDimensionTable.Name;
        }

        // find the root node for Report hierarchy if it exist...
        select firstOnly * from omHierarchyPurpose
            where omHierarchyPurpose.HierarchyPurpose == HierarchyPurpose::RetailReporting
            join RecId from omHierarchyRelationship
                where omHierarchyRelationship.HierarchyType == omHierarchyPurpose.HierarchyType
                    && omHierarchyRelationship.ParentOrganization == 0;

        if (omHierarchyRelationship.RecId)
        {   // Set the values (which are set from the report hiearchy form under the basic product properties)...
            reportItemLabel = _itemLabel;
            reportShelfLabel = _shelfLabel;
        }
        //</GlobalAttributes>

        //<LegalEntityAttributes>
        groupCounting = inventItemLocationTable.CountGroupId;
        groupCoverage = inventTable.ReqGroupId;
        groupInventoryModel = inventModelGroupItemTable.ModelGroupId;
        groupItemGroup = inventItemGroupItemTable.ItemGroupId;
        itemSalesTaxGroupPurch = inventTablePurchModule.TaxItemGroupId;
        itemSalesTaxGroupSales = inventTableSalesModule.TaxItemGroupId;

        unitBaseComparison = retailInventTable.BaseComparisonUnitCode;
        unitBOM = inventTable.bomUnitId;
        unitInvent = inventTableInventModule.UnitId;
        unitSales = inventTableSalesModule.UnitId;
        unitPurchase = inventTablePurchModule.UnitId;
        unitPrice = inventTablePurchModule.PriceUnit;
        unitPriceSales = inventTableSalesModule.PriceUnit;
        whsUOMSeqGroupId = whsInventTable.UOMSeqGroupId;
        whsReservationHierarchy = whsReservationHierarchyItem.ReservationHierarchy;

        purchaseOverdeliveryPct = inventTablePurchModule.OverDeliveryPct;
        purchaseUnderdeliveryPct = inventTablePurchModule.UnderDeliveryPct;
        salesOverdeliveryPct = inventTableSalesModule.OverDeliveryPct;
        salesUnderdeliveryPct = inventTableSalesModule.UnderDeliveryPct;
        inventoryOverdeliveryPct = inventTableInventModule.OverDeliveryPct;
        inventoryUnderdeliveryPct = inventTableInventModule.UnderDeliveryPct;
        itemPurchModel = inventTable.PurchModel;
        itemCostModel = inventTable.CostModel;
        itemBuyerGroupId = inventTable.ItemBuyerGroupId;

        // Purchase
        purchaseInterCompanyBlocked = inventTablePurchModule.InterCompanyBlocked;
        itemPriceToleranceGroupId = inventTable.ItemPriceToleranceGroupId;
        primaryVendorId = inventTable.PrimaryVendorId;
        purchasePriceDate = inventTablePurchModule.PriceDate;
        purchasePrice = inventTablePurchModule.Price;
        purchaseMarkup = inventTablePurchModule.Markup;
        purchasePriceQty = inventTablePurchModule.PriceQty;
        purchaseMarkupGroupId = inventTablePurchModule.MarkupGroupId;
        purchaseAllocateMarkup = inventTablePurchModule.AllocateMarkup;
        purchaseLineDisc = inventTablePurchModule.LineDisc;
        purchaseMultiLineDisc = inventTablePurchModule.MultiLineDisc;
        purchaseEndDisc = inventTablePurchModule.EndDisc;
        purchaseSuppItemGroupId = inventTablePurchModule.SuppItemGroupId;
        itemVendRebateGroupId = mcrInventTable.ItemVendRebateGroupId;
        purchasePDSPricingPrecision = inventTablePurchModule.PDSPricingPrecision;
        pdsVendorCheckItem = inventTable.PdsVendorCheckItem;

        // Sales
        salesInterCompanyBlocked = inventTableSalesModule.InterCompanyBlocked;
        salesCommisionGroupId = inventTable.CommissionGroupId;
        salesPriceModel = inventTable.SalesModel;
        salesBasePriceModel = inventTable.SalesPriceModelBasic;
        salesContributionRatio = inventTable.SalesContributionRatio;
        salesPercentMarkup = inventTable.SalesPercentMarkup;
        salesPriceDate = inventTableSalesModule.PriceDate;
        salesPrice = inventTableSalesModule.Price;
        salesPriceMarkup = inventTableSalesModule.Markup;
        salesPriceMarkupQuantity = inventTableSalesModule.PriceQty;
        salesMarkupGroupId = inventTableSalesModule.MarkupGroupId;
        salesAllocateMarkup = inventTableSalesModule.AllocateMarkup;
        salesLineDiscount = inventTableSalesModule.LineDisc;
        salesMultiLineDiscount = inventTableSalesModule.MultiLineDisc;
        salesTotalDiscount = inventTableSalesModule.EndDisc;
        salesSuppItemGroupId = inventTableSalesModule.SuppItemGroupId;
        salesUseAltItemId = inventTable.UseAltItemId;
        salesAltItemId = inventTable.AltItemId;
        salesAltConfigId = inventTable.AltConfigId;
        salesAltInventSizeId = inventTable.AltInventSizeId;
        salesAltInventColorId = inventTable.AltInventColorId;
        salesAltInventStyleId = inventTable.AltInventStyleId;
        salesAltInventVersionId = inventTable.AltInventVersionId;
        salesInstallmentEligible = mcrInventTable.InstallmentEligible;
        salesPDSPricingPrecision = inventTableSalesModule.PDSPricingPrecision;
        salesFTCExempt = mcrInventTable.FTCExempt;
        salesAllowPriceAdjust = mcrInventTable.AllowPriceAdjust;
        salesContinuityScheduleId = mcrInventTable.ContinuityScheduleId;
        salesStartDate = mcrInventTable.SellStartDate;
        salesEndDate = mcrInventTable.SellEndDate;
        salesPdsItemRebateGroupId = inventTable.PdsItemRebateGroupId;
        salesPdsFreightAllocationGroupId = InventTable.PdsFreightAllocationGroupId;
        salesRetailInventoryAvailabilityBuffer = inventTableSalesModule.RetailInventoryAvailabilityBuffer;
        salesRetailInventoryAvailabilityLevelProfile = inventTableSalesModule.RetailInventoryAvailabilityLevelProfile;

        // Inventory
        netWeight = inventTable.NetWeight;
        taraWeight = inventTable.TaraWeight;
        grossDepth = inventTable.GrossDepth;
        grossWidth = inventTable.GrossWidth;
        grossHeight = inventTable.GrossHeight;
        unitVolume = inventTable.UnitVolume;
        batchNumGroupId = inventTable.BatchNumGroupId;

        if (!RetailMerchandisingKillSwitch::disableCopySerialNumGrpIdFromTemplateForEngChgProduct())
        {
            serialNumGroupId = inventTable.SerialNumGroupId;
        }

        wmsArrivalHandlingTime = inventTable.WMSArrivalHandlingTime;
        sortCode = inventTable.SortCode;
        packagingGroupId = inventTable.PackagingGroupId;
        taxPackagingQty = inventTable.TaxPackagingQty;

        // Cost
        costGroupId = inventTable.CostGroupId;
        inventoryPriceDate = inventTableInventModule.PriceDate;
        inventoryPrice = inventTableInventModule.Price;
        inventoryPriceUnit = inventTableInventModule.PriceUnit;
        inventoryMarkup = inventTableInventModule.Markup;
        inventoryPriceQty = inventTableInventModule.PriceQty;
        inventoryAllocateMarkup = inventTableInventModule.AllocateMarkup;
        abcValue = inventTable.ABCValue;
        abcContributionMargin = inventTable.ABCContributionMargin;
        abcRevenue = inventTable.ABCRevenue;
        abcTieUp = inventTable.ABCTieUp;

        // Retail
        printVariantsShelfLabels = retailInventTable.PrintVariantsShelfLabels;
        seasonCode = retailInventTable.seasonCode;
        lifeFrom = retailInventTable.lifeFrom;
        lifeTo = retailInventTable.lifeTo;
        dateToBeBlocked = retailInventTable.dateToBeBlocked;
        dateBlocked = retailInventTable.dateBlocked;
        dateToActivateItem = retailInventTable.dateToActivateItem;


        // <GBR>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
        {
            exceptionCode_BR            = inventTable.ExceptionCode_BR;
            icmsOnService_BR            = inventTable.ICMSonService_BR;
            inventProductType_BR        = inventTable.InventProductType_BR;
            taxationOrigin_BR           = inventTable.TaxationOrigin_BR;
            taxFiscalClassification_BR  = inventTable.TaxFiscalClassification_BR;
            taxServiceCode_BR           = inventTable.TaxServiceCode_BR;
        }
        // </GBR>

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            prohibitReturn_RU = retailInventTable.ProhibitReturn_RU;
            labelAttribute1     = retailInventTable.LabelAttribute1;
            labelAttribute2     = retailInventTable.LabelAttribute2;
            labelAttribute3     = retailInventTable.LabelAttribute3;
            labelAttribute4     = retailInventTable.LabelAttribute4;
            labelAttribute5     = retailInventTable.LabelAttribute5;
        }
        // </GEERU>

        // we can not really retrieve the default warehouses for the product unless we store them as a list.
        //</LegalEntityAttributes>
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBarcodeSetup</Name>
				<Source><![CDATA[
    public BarcodeSetupId parmBarcodeSetup(BarcodeSetupId _barcodeSetup = barcodeSetup)
    {
        barcodeSetup = _barcodeSetup;
        return barcodeSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBarCodeUseEANStandard</Name>
				<Source><![CDATA[
    public NoYesId parmBarCodeUseEANStandard(NoYesId _barCodeUseEANStandard = barCodeUseEANStandard)
    {
        barCodeUseEANStandard = _barCodeUseEANStandard;
        return barCodeUseEANStandard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBlockedAtRegister</Name>
				<Source><![CDATA[
    public RetailBlocked parmBlockedAtRegister(RetailBlocked _blockedAtRegister = blockedAtRegister)
    {
        blockedAtRegister = _blockedAtRegister;
        return blockedAtRegister;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateBlocked</Name>
				<Source><![CDATA[
    public RetailDateBlocked parmDateBlocked(RetailDateBlocked _dateBlocked = dateBlocked)
    {
        dateBlocked = _dateBlocked;
        return dateBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateToActivateItem</Name>
				<Source><![CDATA[
    public RetailDateToActivateItem parmDateToActivateItem(RetailDateToActivateItem _activateDate = dateToActivateItem)
    {
        dateToActivateItem = _activateDate;
        return dateToActivateItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateToBeBlocked</Name>
				<Source><![CDATA[
    public RetailDateToBeBlocked parmDateToBeBlocked(RetailDateToBeBlocked _dateToBeBlocked = dateToBeBlocked)
    {
        dateToBeBlocked = _dateToBeBlocked;
        return dateToBeBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEcoResProduct</Name>
				<Source><![CDATA[
    public EcoResProduct parmEcoResProduct(EcoResProduct _ecoResProduct = ecoResProduct)
    {
        if (_ecoResProduct)
        {
            inventTable = InventTable::findByProduct(_ecoResProduct.RecId);
            itemId = inventTable.ItemId;
            retailInventTable = RetailInventTable::find(itemId, false);
        }

        ecoResProduct = _ecoResProduct;

        return ecoResProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExceptionCode_BR</Name>
				<Source><![CDATA[
    public ExceptionCode_BR parmExceptionCode_BR(ExceptionCode_BR _exceptionCode_BR = exceptionCode_BR)
    {
        exceptionCode_BR = _exceptionCode_BR;
        return exceptionCode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupCounting</Name>
				<Source><![CDATA[
    public CountGroupId parmGroupCounting(CountGroupId _groupCounting = groupCounting)
    {
        groupCounting = _groupCounting;
        return groupCounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupCoverage</Name>
				<Source><![CDATA[
    public ReqGroupId parmGroupCoverage(ReqGroupId _groupCoverage = groupCoverage)
    {
        groupCoverage = _groupCoverage;
        return groupCoverage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupInventoryModel</Name>
				<Source><![CDATA[
    public InventModelGroupId parmGroupInventoryModel(InventModelGroupId _groupInventoryModel = groupInventoryModel)
    {
        groupInventoryModel = _groupInventoryModel;
        return groupInventoryModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupItemGroup</Name>
				<Source><![CDATA[
    public ItemGroupId parmGroupItemGroup(ItemGroupId _groupItemGroup = groupItemGroup)
    {
        groupItemGroup = _groupItemGroup;
        return groupItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupProductDimension</Name>
				<Source><![CDATA[
    public EcoResProductDimensionGroupName parmGroupProductDimension(EcoResProductDimensionGroupName _groupProductDimension = groupProductDimension)
    {
        groupProductDimension = _groupProductDimension;
        return groupProductDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupStorageDimension</Name>
				<Source><![CDATA[
    public EcoResTrackingDimensionGroupName parmGroupStorageDimension(EcoResTrackingDimensionGroupName _groupStorageDimension = groupStorageDimension)
            {
                groupStorageDimension = _groupStorageDimension;

                return groupStorageDimension;
            }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupTrackingDimension</Name>
				<Source><![CDATA[
    public EcoResTrackingDimensionGroupName parmGroupTrackingDimension(EcoResTrackingDimensionGroupName _groupTrackingDimension = groupTrackingDimension)
    {
        groupTrackingDimension = _groupTrackingDimension;
        return groupTrackingDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIcmsOnService_BR</Name>
				<Source><![CDATA[
    public ICMSOnService_BR parmIcmsOnService_BR(ICMSOnService_BR _icmsOnService_BR = icmsOnService_BR)
    {
        icmsOnService_BR = _icmsOnService_BR;
        return icmsOnService_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventProductType_BR</Name>
				<Source><![CDATA[
    public InventProductTypeId_BR parmInventProductType_BR(InventProductTypeId_BR _inventProductType_BR = inventProductType_BR)
    {
        inventProductType_BR = _inventProductType_BR;
        return inventProductType_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemSalesTaxGroupPurch</Name>
				<Source><![CDATA[
    public TaxItemGroup parmItemSalesTaxGroupPurch(TaxItemGroup _itemSalesTaxGroupPurch = itemSalesTaxGroupPurch)
    {
        itemSalesTaxGroupPurch = _itemSalesTaxGroupPurch;
        return itemSalesTaxGroupPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemSalesTaxGroupSales</Name>
				<Source><![CDATA[
    public TaxItemGroup parmItemSalesTaxGroupSales(TaxItemGroup _itemSalesTaxGroupSales = itemSalesTaxGroupSales)
    {
        itemSalesTaxGroupSales = _itemSalesTaxGroupSales;
        return itemSalesTaxGroupSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntityId</Name>
				<Source><![CDATA[
    public CompanyInfoRecId parmLegalEntityId(CompanyInfoRecId _legalEntityId = legalEntityId)
    {
        legalEntityId = _legalEntityId;

        return legalEntityId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPOSAllowNegativeQuantity</Name>
				<Source><![CDATA[
    public RetailQtyBecomesNegative parmPOSAllowNegativeQuantity(RetailQtyBecomesNegative _posAllowNegativeQuantity = posAllowNegativeQuantity)
    {
        posAllowNegativeQuantity = _posAllowNegativeQuantity;
        return posAllowNegativeQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPOSDisallowDiscount</Name>
				<Source><![CDATA[
    public RetailNoDiscountAllowed parmPOSDisallowDiscount(RetailNoDiscountAllowed _posDisallowDiscount = posDisallowDiscount)
    {
        posDisallowDiscount = _posDisallowDiscount;
        return posDisallowDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPOSDisallowManualDiscount</Name>
				<Source><![CDATA[
    public RetailNoManualDiscountAllowed parmPOSDisallowManualDiscount(RetailNoManualDiscountAllowed _posDisallowManualDiscount = posDisallowManualDiscount)
    {
        posDisallowManualDiscount = _posDisallowManualDiscount;
        return posDisallowManualDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPOSIsScaleItem</Name>
				<Source><![CDATA[
    public RetailScaleItem parmPOSIsScaleItem(RetailScaleItem _posIsScaleItem = posIsScaleItem)
    {
        posIsScaleItem = _posIsScaleItem;
        return posIsScaleItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPOSIsZeroPriceValid</Name>
				<Source><![CDATA[
    public RetailZeroPriceValid parmPOSIsZeroPriceValid(RetailZeroPriceValid _posIsZeroPriceValid = posIsZeroPriceValid)
    {
        posIsZeroPriceValid = _posIsZeroPriceValid;
        return posIsZeroPriceValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPOSKeyingInPrice</Name>
				<Source><![CDATA[
    public RetailKeyingInPrice parmPOSKeyingInPrice(RetailKeyingInPrice _posKeyingInPrice = posKeyingInPrice)
    {
        posKeyingInPrice = _posKeyingInPrice;
        return posKeyingInPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPOSKeyingInQuantity</Name>
				<Source><![CDATA[
    public RetailKeyingInQty parmPOSKeyingInQuantity(RetailKeyingInQty _posKeyingInQuantity = posKeyingInQuantity)
    {
        posKeyingInQuantity = _posKeyingInQuantity;
        return posKeyingInQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPOSMustKeyInComment</Name>
				<Source><![CDATA[
    public RetailMustKeyInComment parmPOSMustKeyInComment(RetailMustKeyInComment _posMustKeyInComment = posMustKeyInComment)
    {
        posMustKeyInComment = _posMustKeyInComment;
        return posMustKeyInComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProhibitReturn_RU</Name>
				<Source><![CDATA[
    public RetailProhibitReturn_RU parmProhibitReturn_RU(RetailProhibitReturn_RU _prohibitReturn_RU = prohibitReturn_RU)
    {
        prohibitReturn_RU = _prohibitReturn_RU;
        return prohibitReturn_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportItemLabel</Name>
				<Source><![CDATA[
    public RetailReportName parmReportItemLabel(RetailReportName _reportItemLabel = reportItemLabel)
    {
        reportItemLabel = _reportItemLabel;
        return reportItemLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportShelfLabel</Name>
				<Source><![CDATA[
    public RetailReportName parmReportShelfLabel(RetailReportName _reportShelfLabel = reportShelfLabel)
    {
        reportShelfLabel = _reportShelfLabel;
        return reportShelfLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmSiteId(InventSiteId _siteId = siteId)
    {
        siteId = _siteId;
        return siteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxationOrigin_BR</Name>
				<Source><![CDATA[
    public FITaxationOrigin_BR parmTaxationOrigin_BR(FITaxationOrigin_BR _taxationOrigin_BR = taxationOrigin_BR)
    {
        taxationOrigin_BR = _taxationOrigin_BR;
        return taxationOrigin_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxFiscalClassification_BR</Name>
				<Source><![CDATA[
    public TaxFiscalClassificationId_BR parmTaxFiscalClassification_BR(TaxFiscalClassificationId_BR _taxFiscalClassification_BR = taxFiscalClassification_BR)
    {
        taxFiscalClassification_BR = _taxFiscalClassification_BR;
        return taxFiscalClassification_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxServiceCode_BR</Name>
				<Source><![CDATA[
    public TaxServiceCodeId_BR parmTaxServiceCode_BR(TaxServiceCodeId_BR _taxServiceCode_BR = taxServiceCode_BR)
    {
        taxServiceCode_BR = _taxServiceCode_BR;
        return taxServiceCode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitBaseComparison</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitBaseComparison(UnitOfMeasureSymbol _unitBaseComparison = unitBaseComparison)
    {
        unitBaseComparison = _unitBaseComparison;
        return unitBaseComparison;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitBOM</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitBOM(UnitOfMeasureSymbol _unitBOM = unitBOM)
    {
        unitBOM = _unitBOM;
        return unitBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitInvent</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitInvent(UnitOfMeasureSymbol _unitInvent = unitInvent)
    {
        unitInvent = _unitInvent;
        return unitInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitPrice</Name>
				<Source><![CDATA[
    public PriceUnit parmUnitPrice(PriceUnit _unitPrice = unitPrice)
    {
        unitPrice = _unitPrice;
        return unitPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitPriceSales</Name>
				<Source><![CDATA[
    public PriceUnit parmUnitPriceSales(PriceUnit _unitPriceSales = unitPriceSales)
    {
        unitPriceSales = _unitPriceSales;
        return unitPriceSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitPurchase</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitPurchase(UnitOfMeasureSymbol _unitPurchase = unitPurchase)
    {
        unitPurchase = _unitPurchase;
        return unitPurchase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitSales</Name>
				<Source><![CDATA[
    public UnitOfMeasureSymbol parmUnitSales(UnitOfMeasureSymbol _unitSales = unitSales)
    {
        unitSales = _unitSales;
        return unitSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVariantColorGroup</Name>
				<Source><![CDATA[
    public RetailColorGroupId parmVariantColorGroup(RetailColorGroupId _variantColorGroup = variantColorGroup)
    {
        variantColorGroup = _variantColorGroup;
        return variantColorGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVariantSizeGroup</Name>
				<Source><![CDATA[
    public RetailSizeGroupId parmVariantSizeGroup(RetailSizeGroupId _variantSizeGroup = variantSizeGroup)
    {
        variantSizeGroup = _variantSizeGroup;
        return variantSizeGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVariantStyleGroup</Name>
				<Source><![CDATA[
    public RetailStyleGroupId parmVariantStyleGroup(RetailStyleGroupId _variantStyleGroup = variantStyleGroup)
    {
        variantStyleGroup = _variantStyleGroup;
        return variantStyleGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarehouseInvent</Name>
				<Source><![CDATA[
    public InventLocationId parmWarehouseInvent(InventLocationId _warehouseInvent = warehouseInvent)
    {
        warehouseInvent = _warehouseInvent;
        return warehouseInvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarehousePurch</Name>
				<Source><![CDATA[
    public InventLocationId parmWarehousePurch(InventLocationId _warehousePurch = warehousePurch)
    {
        warehousePurch = _warehousePurch;
        return warehousePurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWarehouseSales</Name>
				<Source><![CDATA[
    public InventLocationId parmWarehouseSales(InventLocationId _warehouseSales = warehouseSales)
    {
        warehouseSales = _warehouseSales;
        return warehouseSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReservationHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default reservation hierarchy.
    /// </summary>
    /// <param name = "_whsReservationHierarchy">Default reservation hierarchy rec id</param>
    /// <returns>Default reservation hierarchy rec id.</returns>
    public WHSReservationHierarchyRecId parmReservationHierarchy(WHSReservationHierarchyRecId _whsReservationHierarchy = whsReservationHierarchy)
    {
        whsReservationHierarchy = _whsReservationHierarchy;
        return _whsReservationHierarchy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUOMSeqGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default unit of measure sequence.
    /// </summary>
    /// <param name = "_whsUOMSeqGroupId">Default unit of measure sequence.</param>
    /// <returns>Default unit of measure sequence.</returns>
    public WHSUOMSeqGroupId parmUOMSeqGroupId(WHSUOMSeqGroupId _whsUOMSeqGroupId = whsUOMSeqGroupId)
    {
        whsUOMSeqGroupId = _whsUOMSeqGroupId;
        return _whsUOMSeqGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseOverdeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default purchase overdelivery.
    /// </summary>
    /// <param name = "_purchaseOverdeliveryPct">Default purchase overdelivery.</param>
    /// <returns>Default purchase overdelivery.</returns>
    public OverDeliveryPct parmPurchaseOverdeliveryPct(OverDeliveryPct _purchaseOverdeliveryPct = purchaseOverdeliveryPct)
    {
        purchaseOverdeliveryPct = _purchaseOverdeliveryPct;
        return purchaseOverdeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseUnderdeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default purchase underdelivery.
    /// </summary>
    /// <param name = "_purchaseUnderdeliveryPct">Default purchase underdelivery.</param>
    /// <returns>Default purchase underdelivery.</returns>
    public UnderDeliveryPct parmPurchaseUnderdeliveryPct(UnderDeliveryPct _purchaseUnderdeliveryPct = purchaseUnderdeliveryPct)
    {
        purchaseUnderdeliveryPct = _purchaseUnderdeliveryPct;
        return purchaseUnderdeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesOverdeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales overdelivery.
    /// </summary>
    /// <param name = "_salesOverdeliveryPct">Default sales overdelivery.</param>
    /// <returns>Default sales overdelivery.</returns>
    public OverDeliveryPct parmSalesOverdeliveryPct(OverDeliveryPct _salesOverdeliveryPct = salesOverdeliveryPct)
    {
        salesOverdeliveryPct = _salesOverdeliveryPct;
        return salesOverdeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUnderdeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales underdelivery.
    /// </summary>
    /// <param name = "_salesUnderdeliveryPct">Default sales underdelivery.</param>
    /// <returns>Default sales underdelivery.</returns>
    public UnderDeliveryPct parmSalesUnderdeliveryPct(UnderDeliveryPct _salesUnderdeliveryPct = salesUnderdeliveryPct)
    {
        salesUnderdeliveryPct = _salesUnderdeliveryPct;
        return salesUnderdeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryOverdeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default inventory overdelivery.
    /// </summary>
    /// <param name = "_inventoryOverdeliveryPct">Default inventory overdelivery.</param>
    /// <returns>Default inventory overdelivery.</returns>
    public OverDeliveryPct parmInventoryOverdeliveryPct(OverDeliveryPct _inventoryOverdeliveryPct = inventoryOverdeliveryPct)
    {
        inventoryOverdeliveryPct = _inventoryOverdeliveryPct;
        return inventoryOverdeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryUnderdeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default inventory underdelivery.
    /// </summary>
    /// <param name = "_inventoryUnderdeliveryPct">Default inventory underdelivery.</param>
    /// <returns>Default inventory underdelivery.</returns>
    public UnderDeliveryPct parmInventoryUnderdeliveryPct(UnderDeliveryPct _inventoryUnderdeliveryPct = inventoryUnderdeliveryPct)
    {
        inventoryUnderdeliveryPct = _inventoryUnderdeliveryPct;
        return inventoryUnderdeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemPurchModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default latest purchase price.
    /// </summary>
    /// <param name = "_itemPurchModel">Default latest purchase price.</param>
    /// <returns>Default latest purchase price.</returns>
    public ItemPurchModel parmItemPurchModel(ItemPurchModel _itemPurchModel = itemPurchModel)
    {
        itemPurchModel = _itemPurchModel;
        return itemPurchModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemCostModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default latest cost price.
    /// </summary>
    /// <param name = "_itemCostModel">Default latest cost price.</param>
    /// <returns>Default latest cost price.</returns>
    public ItemCostModel parmItemCostModel(ItemCostModel _itemCostModel = itemCostModel)
    {
        itemCostModel = _itemCostModel;
        return itemCostModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemBuyerGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default buyer group.
    /// </summary>
    /// <param name = "_itemBuyerGroupId">Default buyer group.</param>
    /// <returns>Default buyer group.</returns>
    public ItemBuyerGroupId parmItemBuyerGroupId(ItemBuyerGroupId _itemBuyerGroupId = itemBuyerGroupId)
    {
        itemBuyerGroupId = _itemBuyerGroupId;
        return itemBuyerGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseInterCompanyBlocked</Name>
				<Source><![CDATA[
    // Purchase
    public InterCompanyBlocked parmPurchaseInterCompanyBlocked(InterCompanyBlocked _purchaseInterCompanyBlocked = purchaseInterCompanyBlocked)
    {
        purchaseInterCompanyBlocked = _purchaseInterCompanyBlocked;
        return purchaseInterCompanyBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemPriceToleranceGroupId</Name>
				<Source><![CDATA[
    public ItemPriceToleranceGroupId parmItemPriceToleranceGroupId(ItemPriceToleranceGroupId _itemPriceToleranceGroupId = itemPriceToleranceGroupId)
    {
        itemPriceToleranceGroupId = _itemPriceToleranceGroupId;
        return itemPriceToleranceGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrimaryVendorId</Name>
				<Source><![CDATA[
    public ItemPrimaryVendId parmPrimaryVendorId(ItemPrimaryVendId _primaryVendorId = primaryVendorId)
    {
        primaryVendorId = _primaryVendorId;
        return primaryVendorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchasePriceDate</Name>
				<Source><![CDATA[
    public PriceDate parmPurchasePriceDate(PriceDate _purchasePriceDate = purchasePriceDate)
    {
        purchasePriceDate = _purchasePriceDate;
        return purchasePriceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchasePrice</Name>
				<Source><![CDATA[
    public Price parmPurchasePrice(Price _purchasePrice = purchasePrice)
    {
        purchasePrice = _purchasePrice;
        return purchasePrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseMarkup</Name>
				<Source><![CDATA[
    public InventPriceMarkup parmPurchaseMarkup(InventPriceMarkup _purchaseMarkup = purchaseMarkup)
    {
        purchaseMarkup = _purchaseMarkup;
        return purchaseMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchasePriceQty</Name>
				<Source><![CDATA[
    public InventPriceMarkupQty parmPurchasePriceQty(InventPriceMarkupQty _purchasePriceQty = purchasePriceQty)
    {
        purchasePriceQty = _purchasePriceQty;
        return purchasePriceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseMarkupGroupId</Name>
				<Source><![CDATA[
    public InventMarkupGroupId parmPurchaseMarkupGroupId(InventMarkupGroupId _purchaseMarkupGroupId = purchaseMarkupGroupId)
    {
        purchaseMarkupGroupId = _purchaseMarkupGroupId;
        return purchaseMarkupGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseAllocateMarkup</Name>
				<Source><![CDATA[
    public PriceAllocateMarkup parmPurchaseAllocateMarkup(PriceAllocateMarkup _purchaseAllocateMarkup = purchaseAllocateMarkup)
    {
        purchaseAllocateMarkup = _purchaseAllocateMarkup;
        return purchaseAllocateMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseLineDisc</Name>
				<Source><![CDATA[
    public InventLineDiscCode parmPurchaseLineDisc(InventLineDiscCode _purchaseLineDisc = purchaseLineDisc)
    {
        purchaseLineDisc = _purchaseLineDisc;
        return purchaseLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseMultiLineDisc</Name>
				<Source><![CDATA[
    public InventMultiLineDiscCode parmPurchaseMultiLineDisc(InventMultiLineDiscCode _purchaseMultiLineDisc = purchaseMultiLineDisc)
    {
        purchaseMultiLineDisc = _purchaseMultiLineDisc;
        return purchaseMultiLineDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseEndDisc</Name>
				<Source><![CDATA[
    public NoYes parmPurchaseEndDisc(NoYes _purchaseEndDisc = purchaseEndDisc)
    {
        purchaseEndDisc = _purchaseEndDisc;
        return purchaseEndDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchaseSuppItemGroupId</Name>
				<Source><![CDATA[
    public InventSuppItemGroupId parmPurchaseSuppItemGroupId(InventSuppItemGroupId _purchaseSuppItemGroupId = purchaseSuppItemGroupId)
    {
        purchaseSuppItemGroupId = _purchaseSuppItemGroupId;
        return purchaseSuppItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchasePDSPricingPrecision</Name>
				<Source><![CDATA[
    public PDSPricingPrecision parmPurchasePDSPricingPrecision(PDSPricingPrecision _purchasePDSPricingPrecision = purchasePDSPricingPrecision)
    {
        purchasePDSPricingPrecision = _purchasePDSPricingPrecision;
        return purchasePDSPricingPrecision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemVendRebateGroupId</Name>
				<Source><![CDATA[
    public TAMItemVendRebateGroupId parmItemVendRebateGroupId(TAMItemVendRebateGroupId _itemVendRebateGroupId = itemVendRebateGroupId)
    {
        itemVendRebateGroupId = _itemVendRebateGroupId;
        return itemVendRebateGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsVendorCheckItem</Name>
				<Source><![CDATA[
    public PdsVendorCheckItem parmPdsVendorCheckItem(PdsVendorCheckItem _pdsVendorCheckItem = pdsVendorCheckItem)
    {
        pdsVendorCheckItem = _pdsVendorCheckItem;
        return pdsVendorCheckItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesInterCompanyBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales intercompany blocked.
    /// </summary>
    /// <param name = "_salesInterCompanyBlocked">Default sales intercompany blocked.</param>
    /// <returns>Default sales intercompany blocked.</returns>
    public InterCompanyBlocked parmSalesInterCompanyBlocked(InterCompanyBlocked _salesInterCompanyBlocked = salesInterCompanyBlocked)
    {
        salesInterCompanyBlocked = _salesInterCompanyBlocked;
        return salesInterCompanyBlocked;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesCommisionGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales commission group id.
    /// </summary>
    /// <param name = "_salesCommisionGroupId">Default sales commission group id.</param>
    /// <returns>Default sales commission group id.</returns>
    public CommissItemGroup parmSalesCommisionGroupId(CommissItemGroup _salesCommisionGroupId = salesCommisionGroupId)
    {
        salesCommisionGroupId = _salesCommisionGroupId;
        return salesCommisionGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPriceModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales price model.
    /// </summary>
    /// <param name = "_salesPriceModel">Default sales price model.</param>
    /// <returns>Default sales price model.</returns>
    public ItemSalesModel parmSalesPriceModel(ItemSalesModel _salesPriceModel = salesPriceModel)
    {
        salesPriceModel = _salesPriceModel;
        return salesPriceModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesBasePriceModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales base price model.
    /// </summary>
    /// <param name = "_salesBasePriceModel">Default sales base price model.</param>
    /// <returns>Default sales base price model.</returns>
    public SalesPriceModelBasic parmSalesBasePriceModel(SalesPriceModelBasic _salesBasePriceModel = salesBasePriceModel)
    {
        salesBasePriceModel = _salesBasePriceModel;
        return salesBasePriceModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesContributionRatio</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales contribution ratio.
    /// </summary>
    /// <param name = "_salesContributionRatio">Default sales contribution ratio.</param>
    /// <returns>Default sales contribution ratio.</returns>
    public ItemSalesContributionRatio parmSalesContributionRatio(ItemSalesContributionRatio _salesContributionRatio = salesContributionRatio)
    {
        salesContributionRatio = _salesContributionRatio;
        return salesContributionRatio;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPercentMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales percent markup.
    /// </summary>
    /// <param name = "_salesPercentMarkup">Default sales percent markup.</param>
    /// <returns>Default sales percent markup.</returns>
    public ItemSalesPercentMarkup parmSalesPercentMarkup(ItemSalesPercentMarkup _salesPercentMarkup = salesPercentMarkup)
    {
        salesPercentMarkup = _salesPercentMarkup;
        return salesPercentMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPriceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales price date.
    /// </summary>
    /// <param name = "_salesPriceDate">Default sales price date.</param>
    /// <returns>Default sales price date.</returns>
    public PriceDate parmSalesPriceDate(PriceDate _salesPriceDate = salesPriceDate)
    {
        salesPriceDate = _salesPriceDate;
        return salesPriceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales price.
    /// </summary>
    /// <param name = "_salesPrice">Default sales price.</param>
    /// <returns>Default sales price.</returns>
    public Price parmSalesPrice(Price _salesPrice = salesPrice)
    {
        salesPrice = _salesPrice;
        return salesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPriceMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales price markup.
    /// </summary>
    /// <param name = "_salesPriceMarkup">Default sales price markup.</param>
    /// <returns>Default sales price markup.</returns>
    public InventPriceMarkup parmSalesPriceMarkup(InventPriceMarkup _salesPriceMarkup = salesPriceMarkup)
    {
        salesPriceMarkup = _salesPriceMarkup;
        return salesPriceMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPriceMarkupQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales price markup quantity.
    /// </summary>
    /// <param name = "_salesPriceMarkupQuantity">Default sales price markup quantity.</param>
    /// <returns>Default sales price markup quantity.</returns>
    public InventPriceMarkupQty parmSalesPriceMarkupQuantity(InventPriceMarkupQty _salesPriceMarkupQuantity = salesPriceMarkupQuantity)
    {
        salesPriceMarkupQuantity = _salesPriceMarkupQuantity;
        return salesPriceMarkupQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesMarkupGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales price markup group id.
    /// </summary>
    /// <param name = "_salesMarkupGroupId">Default sales price markup group id.</param>
    /// <returns>Default sales price markup group id.</returns>
    public InventMarkupGroupId parmSalesMarkupGroupId(InventMarkupGroupId _salesMarkupGroupId = salesMarkupGroupId)
    {
        salesMarkupGroupId = _salesMarkupGroupId;
        return salesMarkupGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAllocateMarkup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales price allocate markup.
    /// </summary>
    /// <param name = "_salesAllocateMarkup">Default sales price allocate markup.</param>
    /// <returns>Default sales price allocate markup.</returns>
    public PriceAllocateMarkup parmSalesAllocateMarkup(PriceAllocateMarkup _salesAllocateMarkup = salesAllocateMarkup)
    {
        salesAllocateMarkup = _salesAllocateMarkup;
        return salesAllocateMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales line discount.
    /// </summary>
    /// <param name = "_salesLineDiscount">Default sales line discount.</param>
    /// <returns>Default sales line discount.</returns>
    public InventLineDiscCode parmSalesLineDiscount(InventLineDiscCode _salesLineDiscount = salesLineDiscount)
    {
        salesLineDiscount = _salesLineDiscount;
        return salesLineDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesMultiLineDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales multiline discount.
    /// </summary>
    /// <param name = "_salesMultiLineDiscount">Default sales multiline discount.</param>
    /// <returns>Default sales multiline discount.</returns>
    public InventMultiLineDiscCode parmSalesMultiLineDiscount(InventMultiLineDiscCode _salesMultiLineDiscount = salesMultiLineDiscount)
    {
        salesMultiLineDiscount = _salesMultiLineDiscount;
        return salesMultiLineDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTotalDiscount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales total discount.
    /// </summary>
    /// <param name = "_salesTotalDiscount">Default sales total discount.</param>
    /// <returns>Default sales total discount.</returns>
    public NoYes parmSalesTotalDiscount(NoYes _salesTotalDiscount = salesTotalDiscount)
    {
        salesTotalDiscount = _salesTotalDiscount;
        return salesTotalDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesSuppItemGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales supplemental item group id.
    /// </summary>
    /// <param name = "_salesSuppItemGroupId">Default sales supplemental item group id.</param>
    /// <returns>Default sales supplemental item group id.</returns>
    public InventSuppItemGroupId parmSalesSuppItemGroupId(InventSuppItemGroupId _salesSuppItemGroupId = salesSuppItemGroupId)
    {
        salesSuppItemGroupId = _salesSuppItemGroupId;
        return salesSuppItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesUseAltItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales use alternative item id.
    /// </summary>
    /// <param name = "_salesUseAltItemId">Default sales use alternative item id.</param>
    /// <returns>Default sales supplemental use alternative item id.</returns>
    public ItemUseAlternative parmSalesUseAltItemId(ItemUseAlternative _salesUseAltItemId = salesUseAltItemId)
    {
        salesUseAltItemId = _salesUseAltItemId;
        return salesUseAltItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAltItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales alternative item id.
    /// </summary>
    /// <param name = "_salesAltItemId">Default sales alternative item id.</param>
    /// <returns>Default sales supplemental alternative item id.</returns>
    public ItemIdAlternative parmSalesAltItemId(ItemIdAlternative _salesAltItemId = salesAltItemId)
    {
        salesAltItemId = _salesAltItemId;
        return salesAltItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAltConfigId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales alternative item configuration id.
    /// </summary>
    /// <param name = "_salesAltConfigId">Default sales alternative item configuration id.</param>
    /// <returns>Default sales supplemental alternative item configuration id.</returns>
    public ConfigIdAlternative parmSalesAltConfigId(ConfigIdAlternative _salesAltConfigId = salesAltConfigId)
    {
        salesAltConfigId = _salesAltConfigId;
        return salesAltConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAltInventSizeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales alternative item size id.
    /// </summary>
    /// <param name = "_salesAltInventSizeId">Default sales alternative item size id.</param>
    /// <returns>Default sales supplemental alternative item size id.</returns>
    public EcoResItemSizeName parmSalesAltInventSizeId(EcoResItemSizeName _salesAltInventSizeId = salesAltInventSizeId)
    {
        salesAltInventSizeId = _salesAltInventSizeId;
        return salesAltInventSizeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAltInventColorId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales alternative item color id.
    /// </summary>
    /// <param name = "_salesAltInventColorId">Default sales alternative item color id.</param>
    /// <returns>Default sales supplemental alternative item color id.</returns>
    public EcoResItemColorName parmSalesAltInventColorId(EcoResItemColorName _salesAltInventColorId = salesAltInventColorId)
    {
        salesAltInventColorId = _salesAltInventColorId;
        return salesAltInventColorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAltInventStyleId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales alternative item style id.
    /// </summary>
    /// <param name = "_salesAltInventStyleId">Default sales alternative item style id.</param>
    /// <returns>Default sales supplemental alternative item style id.</returns>
    public EcoResItemStyleName parmSalesAltInventStyleId(EcoResItemStyleName _salesAltInventStyleId = salesAltInventStyleId)
    {
        salesAltInventStyleId = _salesAltInventStyleId;
        return salesAltInventStyleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAltInventVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales alternative item version id.
    /// </summary>
    /// <param name = "_salesAltInventVersionId">Default sales alternative item version id.</param>
    /// <returns>Default sales supplemental alternative item version id.</returns>
    public EcoResItemVersionName parmSalesAltInventVersionId(EcoResItemVersionName _salesAltInventVersionId = salesAltInventVersionId)
    {
        salesAltInventVersionId = _salesAltInventVersionId;
        return salesAltInventVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesInstallmentEligible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales installment eligible.
    /// </summary>
    /// <param name = "_salesInstallmentEligible">Default sales installment eligible.</param>
    /// <returns>Default sales supplemental installment eligible.</returns>
    public MCRInstallmentEligible parmSalesInstallmentEligible(MCRInstallmentEligible _salesInstallmentEligible = salesInstallmentEligible)
    {
        salesInstallmentEligible = _salesInstallmentEligible;
        return salesInstallmentEligible;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPDSPricingPrecision</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales PDS pricing precision.
    /// </summary>
    /// <param name = "_salesPDSPricingPrecision">Default sales PDS pricing precision.</param>
    /// <returns>Default sales supplemental PDS pricing precision.</returns>
    public PDSPricingPrecision parmSalesPDSPricingPrecision(PDSPricingPrecision _salesPDSPricingPrecision = salesPDSPricingPrecision)
    {
        salesPDSPricingPrecision = _salesPDSPricingPrecision;
        return salesPDSPricingPrecision;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesFTCExempt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales FTC exempt.
    /// </summary>
    /// <param name = "_salesFTCExempt">Default sales FTC exempt.</param>
    /// <returns>Default sales supplemental FTC exempt.</returns>
    public MCRFTCExempt parmSalesFTCExempt(MCRFTCExempt _salesFTCExempt = salesFTCExempt)
    {
        salesFTCExempt = _salesFTCExempt;
        return salesFTCExempt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAllowPriceAdjust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales allow price adjust.
    /// </summary>
    /// <param name = "_salesAllowPriceAdjust">Default sales allow price adjust.</param>
    /// <returns>Default sales supplemental allow price adjust.</returns>
    public NoYes parmSalesAllowPriceAdjust(NoYes _salesAllowPriceAdjust = salesAllowPriceAdjust)
    {
        salesAllowPriceAdjust = _salesAllowPriceAdjust;
        return salesAllowPriceAdjust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesContinuityScheduleId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales continuity schedule id.
    /// </summary>
    /// <param name = "_salesContinuityScheduleId">Default sales continuity schedule id.</param>
    /// <returns>Default sales supplemental continuity schedule id.</returns>
    public MCRContinuityScheduleID parmSalesContinuityScheduleId(MCRContinuityScheduleID _salesContinuityScheduleId = salesContinuityScheduleId)
    {
        salesContinuityScheduleId = _salesContinuityScheduleId;
        return salesContinuityScheduleId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesStartDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales start date.
    /// </summary>
    /// <param name = "_salesStartDate">Default sales start date.</param>
    /// <returns>Default sales supplemental start date.</returns>
    public MCRSellStartDate parmSalesStartDate(MCRSellStartDate _salesStartDate = salesStartDate)
    {
        salesStartDate = _salesStartDate;
        return salesStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesEndDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales end date.
    /// </summary>
    /// <param name = "_salesEndDate">Default sales end date.</param>
    /// <returns>Default sales supplemental end date.</returns>
    public MCRSellEndDate parmSalesEndDate(MCRSellEndDate _salesEndDate = salesEndDate)
    {
        salesEndDate = _salesEndDate;
        return salesEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPDSItemRebateGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales PDS item rebate group id.
    /// </summary>
    /// <param name = "_salesPdsItemRebateGroupId">Default sales PDS item rebate group id.</param>
    /// <returns>Default sales supplemental PDS item rebate group id.</returns>
    public PdsItemRebateGroupId parmSalesPDSItemRebateGroupId(PdsItemRebateGroupId _salesPdsItemRebateGroupId = salesPdsItemRebateGroupId)
    {
        salesPdsItemRebateGroupId = _salesPdsItemRebateGroupId;
        return salesPdsItemRebateGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPDSFreightAllocationGroupId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales PDS freight allocation group id.
    /// </summary>
    /// <param name = "_salesPdsFreightAllocationGroupId">Default sales PDS freight allocation group id.</param>
    /// <returns>Default sales supplemental PDS freight allocation group id.</returns>
    public PdsFreightAllocationGroupId parmSalesPDSFreightAllocationGroupId(PdsFreightAllocationGroupId _salesPdsFreightAllocationGroupId = salesPdsFreightAllocationGroupId)
    {
        salesPdsFreightAllocationGroupId = _salesPdsFreightAllocationGroupId;
        return salesPdsFreightAllocationGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesRetailInventoryAvailabilityBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales retail inventory availability buffer.
    /// </summary>
    /// <param name = "_salesRetailInventoryAvailabilityBuffer">Default sales retail inventory availability buffer.</param>
    /// <returns>Default sales supplemental retail inventory availability buffer.</returns>
    public RetailInventoryBuffer parmSalesRetailInventoryAvailabilityBuffer(RetailInventoryBuffer _salesRetailInventoryAvailabilityBuffer = salesRetailInventoryAvailabilityBuffer)
    {
        salesRetailInventoryAvailabilityBuffer = _salesRetailInventoryAvailabilityBuffer;
        return salesRetailInventoryAvailabilityBuffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesRetailInventoryAvailabilityLevelProfile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets product's default sales retail inventory availability level profile id.
    /// </summary>
    /// <param name = "_salesRetailInventoryAvailabilityLevelProfile">Default sales retail inventory availability level profile id.</param>
    /// <returns>Default sales retail inventory availability level profile id.</returns>
    public RetailInventoryLevelProfileId parmSalesRetailInventoryAvailabilityLevelProfile(RetailInventoryLevelProfileId _salesRetailInventoryAvailabilityLevelProfile = salesRetailInventoryAvailabilityLevelProfile)
    {
        salesRetailInventoryAvailabilityLevelProfile = _salesRetailInventoryAvailabilityLevelProfile;
        return salesRetailInventoryAvailabilityLevelProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNetWeight</Name>
				<Source><![CDATA[
    // Inventory
    public ItemNetWeight parmNetWeight(ItemNetWeight _netWeight = netWeight)
    {
        netWeight = _netWeight;
        return netWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaraWeight</Name>
				<Source><![CDATA[
    public ItemTaraWeight parmTaraWeight(ItemTaraWeight _taraWeight = taraWeight)
    {
        taraWeight = _taraWeight;
        return taraWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrossDepth</Name>
				<Source><![CDATA[
    public InventDepth parmGrossDepth(InventDepth _grossDepth = grossDepth)
    {
        grossDepth = _grossDepth;
        return grossDepth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrossWidth</Name>
				<Source><![CDATA[
    public InventWidth parmGrossWidth(InventWidth _grossWidth = grossWidth)
    {
        grossWidth = _grossWidth;
        return grossWidth;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGrossHeight</Name>
				<Source><![CDATA[
    public InventHeight parmGrossHeight(InventHeight _grossHeight = grossHeight)
    {
        grossHeight = _grossHeight;
        return grossHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUnitVolume</Name>
				<Source><![CDATA[
    public ItemVolume parmUnitVolume(ItemVolume _unitVolume = unitVolume)
    {
        unitVolume = _unitVolume;
        return unitVolume;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchNumGroupId</Name>
				<Source><![CDATA[
    public InventNumGroupId parmBatchNumGroupId(InventNumGroupId _batchNumGroupId = batchNumGroupId)
    {
        batchNumGroupId = _batchNumGroupId;
        return batchNumGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSerialNumGroupId</Name>
				<Source><![CDATA[
    public InventNumGroupId parmSerialNumGroupId(InventNumGroupId _serialNumGroupId = serialNumGroupId)
    {
        serialNumGroupId = _serialNumGroupId;
        return serialNumGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSArrivalHandlingTime</Name>
				<Source><![CDATA[
    public WMSArrivalHandlingTime parmWMSArrivalHandlingTime(WMSArrivalHandlingTime _wmsArrivalHandlingTime = wmsArrivalHandlingTime)
    {
        wmsArrivalHandlingTime = _wmsArrivalHandlingTime;
        return wmsArrivalHandlingTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSortCode</Name>
				<Source><![CDATA[
    public WMSSortCode parmSortCode(WMSSortCode _sortCode = sortCode)
    {
        sortCode = _sortCode;
        return sortCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackagingGroupId</Name>
				<Source><![CDATA[
    public ItemPackagingGroupId parmPackagingGroupId(ItemPackagingGroupId _packagingGroupId = packagingGroupId)
    {
        packagingGroupId = _packagingGroupId;
        return packagingGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxPackagingQty</Name>
				<Source><![CDATA[
    public TaxPackagingQty parmTaxPackagingQty(TaxPackagingQty _taxPackagingQty = taxPackagingQty)
    {
        taxPackagingQty = _taxPackagingQty;
        return taxPackagingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostGroupId</Name>
				<Source><![CDATA[
    // Cost
    public CostGroupId parmCostGroupId(CostGroupId _costGroupId = costGroupId)
    {
        costGroupId = _costGroupId;
        return costGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryPriceDate</Name>
				<Source><![CDATA[
    public PriceDate parmInventoryPriceDate(PriceDate _inventoryPriceDate = inventoryPriceDate)
    {
        inventoryPriceDate = _inventoryPriceDate;
        return inventoryPriceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryPrice</Name>
				<Source><![CDATA[
    public Price parmInventoryPrice(Price _inventoryPrice = inventoryPrice)
    {
        inventoryPrice = _inventoryPrice;
        return inventoryPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryPriceUnit</Name>
				<Source><![CDATA[
    public InventPriceUnitQty parmInventoryPriceUnit(InventPriceUnitQty _inventoryPriceUnit = inventoryPriceUnit)
    {
        inventoryPriceUnit = _inventoryPriceUnit;
        return inventoryPriceUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryMarkup</Name>
				<Source><![CDATA[
    public InventPriceMarkup parmInventoryMarkup(InventPriceMarkup _inventoryMarkup = inventoryMarkup)
    {
        inventoryMarkup = _inventoryMarkup;
        return inventoryMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryPriceQty</Name>
				<Source><![CDATA[
    public InventPriceMarkupQty parmInventoryPriceQty(InventPriceMarkupQty _inventoryPriceQty = inventoryPriceQty)
    {
        inventoryPriceQty = _inventoryPriceQty;
        return inventoryPriceQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryAllocateMarkup</Name>
				<Source><![CDATA[
    public PriceAllocateMarkup parmInventoryAllocateMarkup(PriceAllocateMarkup _inventoryAllocateMarkup = inventoryAllocateMarkup)
    {
        inventoryAllocateMarkup = _inventoryAllocateMarkup;
        return inventoryAllocateMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmABCValue</Name>
				<Source><![CDATA[
    public ABC parmABCValue(ABC _abcValue = abcValue)
    {
        abcValue = _abcValue;
        return abcValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmABCContributionMargin</Name>
				<Source><![CDATA[
    public ABC parmABCContributionMargin(ABC _abcContributionMargin = abcContributionMargin)
    {
        abcContributionMargin = _abcContributionMargin;
        return abcContributionMargin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmABCRevenue</Name>
				<Source><![CDATA[
    public ABC parmABCRevenue(ABC _abcRevenue = abcRevenue)
    {
        abcRevenue = _abcRevenue;
        return abcRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmABCTieUp</Name>
				<Source><![CDATA[
    public ABC parmABCTieUp(ABC _abcTieUp = abcTieUp)
    {
        abcTieUp = _abcTieUp;
        return abcTieUp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintVariantsShelfLabels</Name>
				<Source><![CDATA[
    // Retail
    public RetailPrintVariantsShelfLabels parmPrintVariantsShelfLabels(RetailPrintVariantsShelfLabels _printVariantsShelfLabels = printVariantsShelfLabels)
    {
        printVariantsShelfLabels = _printVariantsShelfLabels;
        return printVariantsShelfLabels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSeasonCode</Name>
				<Source><![CDATA[
    public RetailSeasonCode parmSeasonCode(RetailSeasonCode _seasonCode = seasonCode)
    {
        seasonCode = _seasonCode;
        return seasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLifeFrom</Name>
				<Source><![CDATA[
    public RetailLifeFrom parmLifeFrom(RetailLifeFrom _lifeFrom = lifeFrom)
    {
        lifeFrom = _lifeFrom;
        return lifeFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLifeTo</Name>
				<Source><![CDATA[
    public RetailLifeTo parmLifeTo(RetailLifeTo _lifeTo = lifeTo)
    {
        lifeTo = _lifeTo;
        return lifeTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDefaultWarehouseFields</Name>
				<Source><![CDATA[
    private void saveDefaultWarehouseFields()
    {
        InventItemPurchSetup    inventItemPurchSetup;

        if (!siteId)
        {
            //nothing to do. the site was not specified.
            return;
        }

        ttsBegin;

        InventDim inventDimSite = this.saveDefaultSiteFields();
        
        InventItemSetupSequence  nextSequence = inventItemPurchSetup.getNextSequence();

        this.saveDefaultWarehouse(warehousePurch, InventItemOrderSetupType::Purch, inventDimSite.inventDimId, nextSequence);
        this.saveDefaultWarehouse(warehouseInvent, InventItemOrderSetupType::Invent, inventDimSite.inventDimId, nextSequence);
        this.saveDefaultWarehouse(warehouseSales, InventItemOrderSetupType::Sales, inventDimSite.inventDimId, nextSequence);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDefaultSiteFields</Name>
				<Source><![CDATA[
    private InventDim saveDefaultSiteFields()
    {
        InventDim   inventDimSiteLocal;
        InventDim   inventDimSite;

        // find the existing site dimension
        inventDimSiteLocal.initValue();
        inventDimSiteLocal.InventSiteId = siteId;
        inventDimSite = InventDim::findOrCreate(inventDimSiteLocal);
        
        this.saveDefaultSite(InventItemOrderSetupType::Purch, inventDimSite.inventDimId);
        this.saveDefaultSite(InventItemOrderSetupType::Invent, inventDimSite.inventDimId);
        this.saveDefaultSite(InventItemOrderSetupType::Sales, inventDimSite.inventDimId);
        
        return inventDimSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDefaultSite</Name>
				<Source><![CDATA[
    private void saveDefaultSite(InventItemOrderSetupType _setupType, InventDimId _siteInventDimId)
    {
        InventItemOrderSetupMap inventItemSetup = InventItemOrderSetupMap::find(itemId, _setupType, InventDim::inventDimIdBlank(), true);

        boolean canWrite =  this.trySetAndValidateFieldValue(
                            inventItemSetup,
                            fieldNum(InventItemOrderSetupMap, InventDimIdDefault),
                            fieldStr(InventItemOrderSetupMap, InventDimIdDefault),
                            _siteInventDimId);

        if (canWrite && inventItemSetup.validateWrite())
        {
            inventItemSetup.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDefaultWarehouse</Name>
				<Source><![CDATA[
    private void saveDefaultWarehouse(InventLocationId _warehouseId, InventItemOrderSetupType _setupType, InventDimId _siteInventDimId, InventItemSetupSequence nextSequence)
    {
        InventItemOrderSetupMap inventItemSetup;
        InventDim               inventWarehouseDim;
        InventItemPurchSetup    inventItemPurchSetup;
        boolean canWrite = true;
        boolean isInventDimIdBlank = false;

        if (_warehouseId)
        {
            //find the existing location dimension
            inventWarehouseDim = this.getLocationOnlyInventDim(_warehouseId);
        }

        //check if the setup has this site
        inventItemSetup = InventItemOrderSetupMap::find(itemId, _setupType, _siteInventDimId, true);

        // The found inventItemSetup may be for blank InventDim.
        // In such case, we create a new inventItemSetup instead of updating it.
        if (!inventItemSetup || inventItemSetup.InventDimId == InventDim::inventDimIdBlank())
        {
            inventItemSetup.initValue();
            inventItemSetup.ItemId = itemId;
            inventItemSetup.Sequence = nextSequence;
            isInventDimIdBlank = true;
        }

        if (_warehouseId)
        {
            // Always set this flag when we are creating or updating an existing one
            inventItemSetup.OverrideDefaultStorageDimensions = 1;

            canWrite =  canWrite
                     && this.trySetAndValidateFieldValue(
                                inventItemSetup,
                                fieldNum(InventItemOrderSetupMap, InventDimIdDefault),
                                fieldStr(InventItemOrderSetupMap, InventDimIdDefault),
                                inventWarehouseDim.inventDimId);
        }

        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            inventItemSetup,
                            fieldNum(InventItemOrderSetupMap, InventDimId),
                            fieldStr(InventItemOrderSetupMap, InventDimId),
                            _siteInventDimId);

        if (canWrite && inventItemSetup.validateWrite())
        {
            if (isInventDimIdBlank)
            {
                // Create a new record for inventItemSetup if it originally has blank InventDim values
                inventItemSetup.insert();
            }
            else
            {
                inventItemSetup.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveInventModules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the modules table based on properties of the retail product.
    /// </summary>
    /// <remarks>
    /// The assumption is that the records are already created by a different process (e.g. release manager when dealing with inventTable.)
    /// </remarks>
    private void saveInventModules()
    {
        //<LegalEntityAttributes>
        //invent
        if (inventTableInventModule)
        {
            inventTableInventModule.selectForUpdate(true);
            inventTableInventModule.UnitId = unitInvent;
            inventTableInventModule.update();
        }
        else
        {
            inventTableInventModule.initValue();
            inventTableInventModule.UnitId = unitInvent;
            inventTableInventModule.insert();
        }

        //purchase
        if (inventTablePurchModule)
        {
            inventTablePurchModule.selectForUpdate(true);
            inventTablePurchModule.TaxItemGroupId = itemSalesTaxGroupPurch;
            inventTablePurchModule.PriceUnit = unitPrice;
            inventTablePurchModule.UnitId = unitPurchase;
            inventTablePurchModule.update(true /*_updatePriceDate*/, true /*_updatePrice*/);
        }
        else
        {
            inventTablePurchModule.initValue();
            inventTablePurchModule.TaxItemGroupId = itemSalesTaxGroupPurch;
            inventTablePurchModule.PriceUnit = unitPrice;
            inventTablePurchModule.UnitId = unitPurchase;
            inventTablePurchModule.insert();
        }

        //sales
        if (inventTableSalesModule)
        {
            inventTableSalesModule.selectForUpdate(true);
            inventTableSalesModule.TaxItemGroupId = itemSalesTaxGroupSales;
            inventTableSalesModule.UnitId = unitSales;
            inventTableSalesModule.PriceUnit = unitPriceSales;
            inventTableSalesModule.update();
        }
        else
        {
            inventTableSalesModule.initValue();
            inventTableSalesModule.TaxItemGroupId = itemSalesTaxGroupSales;
            inventTableSalesModule.UnitId = unitSales;
            inventTableSalesModule.PriceUnit = unitPriceSales;
            inventTableSalesModule.insert();
        }

        //</LegalEntityAttributes>
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveInventTableAndMisc</Name>
				<Source><![CDATA[
    private void saveInventTableAndMisc()
    {
        ///<LegalEntityAttributes>

        // invent table
        inventTable.selectForUpdate(true);
        inventTable.ReqGroupId = groupCoverage;
        inventTable.bomUnitId = unitBOM;
        // <GBR>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
        {
            inventTable.ExceptionCode_BR            = exceptionCode_BR;
            inventTable.ICMSonService_BR            = icmsOnService_BR;
            inventTable.InventProductType_BR        = inventProductType_BR;
            inventTable.TaxationOrigin_BR           = taxationOrigin_BR;
            inventTable.TaxFiscalClassification_BR  = taxFiscalClassification_BR;
            inventTable.TaxServiceCode_BR           = taxServiceCode_BR;
        }
        // </GBR>
        inventTable.update();

        //misc
        if (!inventItemLocationTable)
        {
            inventItemLocationTable = InventItemLocation::createDefault(itemId);
        }

        inventItemLocationTable.selectForUpdate(true);
        inventItemLocationTable.CountGroupId = groupCounting;
        inventItemLocationTable.update();

        if (groupItemGroup)
        {
            if (inventItemGroupItemTable.RecId)
            {
                inventItemGroupItemTable.selectForUpdate(true);
                inventItemGroupItemTable.ItemGroupId = groupItemGroup;
                inventItemGroupItemTable.update();
            }
            else
            {
                inventItemGroupItemTable.selectForUpdate(true);
                inventItemGroupItemTable.ItemGroupId = groupItemGroup;
                inventItemGroupItemTable.ItemGroupDataAreaId = CompanyInfo::findRecId(legalEntityId).DataArea;
                inventItemGroupItemTable.ItemId = itemId;
                inventItemGroupItemTable.ItemDataAreaId = inventTable.DataAreaId;

                inventItemGroupItemTable.insert();
            }
        }

        ///</LegalEntityAttributes>
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveInventTableAndRelated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for the invent table and related modules table based on properties of the retail product.
    /// Will validate if the changes are permitted according to the business rules.
    /// </summary>
    /// <remarks>
    /// This is an all or nothing save. If one validation fails for InventTable or
    /// one of the related ones the change won't be saved.
    /// </remarks>
    protected void saveInventTableAndRelated()
    {
        WHSInventTableReservationHierarchy  whsInventTableReservationHierarchy;
        boolean canWrite = true;

        //<LegalEntityAttributes>

        // Verifies if the inventTableInventModule properties are valid to be written to database.
        canWrite = this.canWriteInventTableInventModule(canWrite);

        // Verifies if the inventTablePurchModule properties are valid to be written to database.
        canWrite = this.canWriteInventTablePurchModule(canWrite);

        // MCR
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            // Verifies if the mcrInventTable properties are valid to be written to database.
            canWrite = this.canWriteMcrInventTable(canWrite);
        }

        // Verifies if the inventTableSalesModule properties are valid to be written to database.
        canWrite = this.canWriteInventTableSalesModule(canWrite);

        if (groupInventoryModel)
        {
            // Verifies if the inventModelGroupItemTable properties are valid to be written to database.
            canWrite = this.canWriteInventModelGroupItemTable(canWrite);
        }

        // Verifies if the inventTable properties are valid to be written to database.
        canWrite = this.canWriteInventTable(canWrite);

        canWrite =  canWrite
                 && inventTableInventModule.validateWrite()
                 && inventTablePurchModule.validateWrite()
                 && inventTableSalesModule.validateWrite()
                 && this.validateWriteOnInventModelGroupItem()
                 && this.validateWriteOnInventTable();

        if (canWrite)
        {
            boolean updateConflictFlight = RetailProductInventTableModuleUpdateConflictFlight::instance().isEnabled();

            if (updateConflictFlight)
            {
                //Values which are assigned should be saved, because write method of IvnentTableInventModule may update InventTableSalesModule
                //and InventTable buffer, So reread() will erase the values which are assigned earlier.
                inventTableSalesModule.write();
                inventTable.update();
            }

            inventTableInventModule.write();
            inventTablePurchModule.write();

            if (updateConflictFlight)
            {
                //inventTableSalesModule may get updated in inventTableInventModule.write(), so reread will bring the latest values.
                inventTableSalesModule.reread();
            }

            inventTableSalesModule.write();

            if (groupInventoryModel)
            {
                inventModelGroupItemTable.write();
            }

            if (updateConflictFlight)
            {
                inventTable.reread();
            }

            inventTable.update();

            // MCR
            if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
            {
                MCRInventTable.write();
            }
        }

        // WHS
        if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
        {
            // Verifies if the whsInventTable properties are valid to be written to database.
            canWrite = this.canWriteWHSInventTable(canWrite);

            canWrite = canWrite && whsInventTable.validateInventTableRecord(true, false);
            
            whsInventTableReservationHierarchy = WHSInventTableReservationHierarchy::newFromParameters(itemId, whsReservationHierarchy);
            canWrite = canWrite && whsInventTableReservationHierarchy.validateCanAssignOrDeleteHierarchy();
            
            if (canWrite)
            {
                whsInventTable.write();
                WHSInventTableReservationHierarchy::assignReservationHierarchyToItem(ItemId, whsReservationHierarchy);
            }
        }

        // Verifies if the inventItemLocationTable properties are valid to be written to database.
        canWrite = this.canWriteInventItemLocationTable(canWrite);

        if (canWrite && inventItemLocationTable.validateWrite())
        {
            inventItemLocationTable.write();
        }

        if (groupItemGroup && this.canChangeInventItemGroupIdValue())
        {
            // Verifies if the inventItemGroupItemTable properties are valid to be written to database.
            canWrite = this.canWriteInventItemGroupItemTable(canWrite);

            if (canWrite && inventItemGroupItemTable.validateWrite())
            {
                inventItemGroupItemTable.write();
            }
        }
        ///</LegalEntityAttributes>
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWriteInventTableInventModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the inventory module properties are valid to be written.
    /// </summary>
    /// <param name = "_canWrite">Indicates if we can write into database.</param>
    /// <returns>
    /// Returns true if all the inventory module properties are valid; otherwise, false.
    /// </returns>
    protected boolean canWriteInventTableInventModule(boolean _canWrite)
    {
        //invent
        if (inventTableInventModule)
        {
            inventTableInventModule.selectForUpdate(true);
        }
        else
        {
            inventTableInventModule.initValue();
            inventTableInventModule.ItemId = inventTable.ItemId;
        }

        _canWrite = _canWrite
                 && this.trySetAndValidateFieldValue(
                        inventTableInventModule,
                        fieldNum(InventTableModule, UnitId),
                        fieldStr(InventTableModule, unitId),
                        unitInvent);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableInventModule,
                        fieldNum(InventTableModule, OverDeliveryPct),
                        fieldStr(InventTableModule, OverDeliveryPct),
                        inventoryOverdeliveryPct);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableInventModule,
                        fieldNum(InventTableModule, UnderDeliveryPct),
                        fieldStr(InventTableModule, UnderDeliveryPct),
                        inventoryUnderdeliveryPct);

        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableInventModule,
                        fieldNum(InventTableModule, PriceDate),
                        fieldStr(InventTableModule, PriceDate),
                        inventoryPriceDate);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableInventModule,
                        fieldNum(InventTableModule, Price),
                        fieldStr(InventTableModule, Price),
                        inventoryPrice);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableInventModule,
                        fieldNum(InventTableModule, PriceUnit),
                        fieldStr(InventTableModule, PriceUnit),
                        inventoryPriceUnit);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableInventModule,
                        fieldNum(InventTableModule, Markup),
                        fieldStr(InventTableModule, Markup),
                        inventoryMarkup);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableInventModule,
                        fieldNum(InventTableModule, PriceQty),
                        fieldStr(InventTableModule, PriceQty),
                        inventoryPriceQty);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableInventModule,
                        fieldNum(InventTableModule, AllocateMarkup),
                        fieldStr(InventTableModule, AllocateMarkup),
                        inventoryAllocateMarkup);

        return _canWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWriteInventTablePurchModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the inventory purchase module properties are valid to be written.
    /// </summary>
    /// <param name = "_canWrite">Indicates if we can write into database.</param>
    /// <returns>
    /// Returns true if all the inventory purchase module properties are valid; otherwise, false.
    /// </returns>
    protected boolean canWriteInventTablePurchModule(boolean _canWrite)
    {
        //purchase
        if (inventTablePurchModule)
        {
            inventTablePurchModule.selectForUpdate(true);
        }
        else
        {
            inventTablePurchModule.initValue();
            inventTablePurchModule.ItemId = inventTable.ItemId;

            _canWrite = _canWrite
                     && this.trySetAndValidateFieldValue(
                            inventTablePurchModule,
                            fieldNum(InventTableModule, ItemId),
                            fieldStr(InventTableModule, ItemId),
                            inventTable.ItemId);
        }

        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, TaxItemGroupId),
                        fieldStr(InventTableModule, TaxItemGroupId),
                        itemSalesTaxGroupPurch);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, PriceUnit),
                        fieldStr(InventTableModule, PriceUnit),
                        unitPrice);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, UnitId),
                        fieldStr(InventTableModule, UnitId),
                        unitPurchase);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, OverDeliveryPct),
                        fieldStr(InventTableModule, OverDeliveryPct),
                        purchaseOverdeliveryPct);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, UnderDeliveryPct),
                        fieldStr(InventTableModule, UnderDeliveryPct),
                        purchaseUnderdeliveryPct);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, InterCompanyBlocked),
                        fieldStr(InventTableModule, InterCompanyBlocked),
                        purchaseInterCompanyBlocked);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, PriceDate),
                        fieldStr(InventTableModule, PriceDate),
                        purchasePriceDate);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, Price),
                        fieldStr(InventTableModule, Price),
                        purchasePrice);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, Markup),
                        fieldStr(InventTableModule, Markup),
                        purchaseMarkup);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, PriceQty),
                        fieldStr(InventTableModule, PriceQty),
                        purchasePriceQty);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, MarkupGroupId),
                        fieldStr(InventTableModule, MarkupGroupId),
                        purchaseMarkupGroupId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, AllocateMarkup),
                        fieldStr(InventTableModule, AllocateMarkup),
                        purchaseAllocateMarkup);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, LineDisc),
                        fieldStr(InventTableModule, LineDisc),
                        purchaseLineDisc);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, MultiLineDisc),
                        fieldStr(InventTableModule, MultiLineDisc),
                        purchaseMultiLineDisc);

        if (isConfigurationkeyEnabled(configurationKeyNum(PriceDisc)))
        {
            _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            inventTablePurchModule,
                            fieldNum(InventTableModule, EndDisc),
                            fieldStr(InventTableModule, EndDisc),
                            purchaseEndDisc);
        }

        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, SuppItemGroupId),
                        fieldStr(InventTableModule, SuppItemGroupId),
                        purchaseSuppItemGroupId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTablePurchModule,
                        fieldNum(InventTableModule, PDSPricingPrecision),
                        fieldStr(InventTableModule, PDSPricingPrecision),
                        purchasePDSPricingPrecision);

        return _canWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWriteMCRInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the retail inventory properties are valid to be written.
    /// </summary>
    /// <param name = "_canWrite">Indicates if we can write into database.</param>
    /// <returns>
    /// Returns true if all the retail inventory properties are valid; otherwise, false.
    /// </returns>
    protected boolean canWriteMCRInventTable(boolean _canWrite)
    {
        if (mcrInventTable)
        {
            mcrInventTable.selectForUpdate(true);
        }
        else
        {
            mcrInventTable.initValue();
            mcrInventTable.InventTable = inventTable.RecId;
                
            _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            mcrInventTable,
                            fieldNum(MCRInventTable, InventTable),
                            fieldStr(MCRInventTable, InventTable),
                            inventTable.RecId);
        }

        _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            mcrInventTable,
                            fieldNum(MCRInventTable, ItemVendRebateGroupId),
                            fieldStr(MCRInventTable, ItemVendRebateGroupId),
                            itemVendRebateGroupId);

        _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            mcrInventTable,
                            fieldNum(MCRInventTable, AllowPriceAdjust),
                            fieldStr(MCRInventTable, AllowPriceAdjust),
                            salesAllowPriceAdjust);
        _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            mcrInventTable,
                            fieldNum(MCRInventTable, InstallmentEligible),
                            fieldStr(MCRInventTable, InstallmentEligible),
                            salesInstallmentEligible);
        _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            mcrInventTable,
                            fieldNum(MCRInventTable, FTCExempt),
                            fieldStr(MCRInventTable, FTCExempt),
                            salesFTCExempt);
        _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            mcrInventTable,
                            fieldNum(MCRInventTable, ContinuityScheduleId),
                            fieldStr(MCRInventTable, ContinuityScheduleId),
                            salesContinuityScheduleId);
        _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            mcrInventTable,
                            fieldNum(MCRInventTable, SellStartDate),
                            fieldStr(MCRInventTable, SellStartDate),
                            salesStartDate);
        _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            mcrInventTable,
                            fieldNum(MCRInventTable, SellEndDate),
                            fieldStr(MCRInventTable, SellEndDate),
                            salesEndDate);

        return _canWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWriteInventTableSalesModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the inventory sales module properties are valid to be written.
    /// </summary>
    /// <param name = "_canWrite">Indicates if we can write into database.</param>
    /// <returns>
    /// Returns true if all the inventory sales module properties are valid; otherwise, false.
    /// </returns>
    protected boolean canWriteInventTableSalesModule(boolean _canWrite)
    {
        //sales
        if (inventTableSalesModule)
        {
            inventTableSalesModule.selectForUpdate(true);
        }
        else
        {
            inventTableSalesModule.initValue();
            inventTableSalesModule.ItemId = inventTable.ItemId;

            _canWrite = _canWrite
                     && this.trySetAndValidateFieldValue(
                            inventTableSalesModule,
                            fieldNum(InventTableModule, ItemId),
                            fieldStr(InventTableModule, ItemId),
                            inventTable.ItemId);
        }

        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, TaxItemGroupId),
                        fieldStr(InventTableModule, TaxItemGroupId),
                        itemSalesTaxGroupSales);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, PriceUnit),
                        fieldStr(InventTableModule, PriceUnit),
                        unitPriceSales);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, UnitId),
                        fieldStr(InventTableModule, UnitId),
                        unitSales);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, OverDeliveryPct),
                        fieldStr(InventTableModule, OverDeliveryPct),
                        salesOverdeliveryPct);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, UnderDeliveryPct),
                        fieldStr(InventTableModule, UnderDeliveryPct),
                        salesUnderdeliveryPct);

        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, InterCompanyBlocked),
                        fieldStr(InventTableModule, InterCompanyBlocked),
                        salesInterCompanyBlocked);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, PriceDate),
                        fieldStr(InventTableModule, PriceDate),
                        salesPriceDate);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, Price),
                        fieldStr(InventTableModule, Price),
                        salesPrice);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, Markup),
                        fieldStr(InventTableModule, Markup),
                        salesPriceMarkup);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, PriceQty),
                        fieldStr(InventTableModule, PriceQty),
                        salesPriceMarkupQuantity);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, MarkupGroupId),
                        fieldStr(InventTableModule, MarkupGroupId),
                        salesMarkupGroupId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, AllocateMarkup),
                        fieldStr(InventTableModule, AllocateMarkup),
                        salesAllocateMarkup);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, LineDisc),
                        fieldStr(InventTableModule, LineDisc),
                        salesLineDiscount);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, MultiLineDisc),
                        fieldStr(InventTableModule, MultiLineDisc),
                        salesMultiLineDiscount);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, EndDisc),
                        fieldStr(InventTableModule, EndDisc),
                        salesTotalDiscount);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, SuppItemGroupId),
                        fieldStr(InventTableModule, SuppItemGroupId),
                        salesSuppItemGroupId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, PDSPricingPrecision),
                        fieldStr(InventTableModule, PDSPricingPrecision),
                        salesPDSPricingPrecision);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, RetailInventoryAvailabilityBuffer),
                        fieldStr(InventTableModule, RetailInventoryAvailabilityBuffer),
                        salesRetailInventoryAvailabilityBuffer);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTableSalesModule,
                        fieldNum(InventTableModule, RetailInventoryAvailabilityLevelProfile),
                        fieldStr(InventTableModule, RetailInventoryAvailabilityLevelProfile),
                        salesRetailInventoryAvailabilityLevelProfile);

        return _canWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWriteInventModelGroupItemTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the inventory model group item properties are valid to be written.
    /// </summary>
    /// <param name = "_canWrite">Indicates if we can write into database.</param>
    /// <returns>
    /// Returns true if all the inventory model group item properties are valid; otherwise, false.
    /// </returns>
    protected boolean canWriteInventModelGroupItemTable(boolean _canWrite)
    {
        if (!inventModelGroupItemTable.RecId)
        {
            inventModelGroupItemTable.ItemId = itemId;
            inventModelGroupItemTable.ItemDataAreaId = inventTable.DataAreaId;
            inventModelGroupItemTable.ModelGroupDataAreaId = curExt2dataareaid(tableNum(InventModelGroup));
        }
        else
        {
            inventModelGroupItemTable.selectForUpdate(true);
        }

        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventModelGroupItemTable,
                        fieldNum(InventModelGroupItem, ModelGroupId),
                        fieldStr(InventModelGroupItem, ModelGroupId),
                        groupInventoryModel);

        return _canWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWriteInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the inventory properties are valid to be written.
    /// </summary>
    /// <param name = "_canWrite">Indicates if we can write into database.</param>
    /// <returns>
    /// Returns true if all the inventory properties are valid; otherwise, false.
    /// </returns>
    protected boolean canWriteInventTable(boolean _canWrite)
    {
        // invent table
        inventTable.selectForUpdate(true);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, ReqGroupId),
                        fieldStr(InventTable, ReqGroupId),
                        groupCoverage);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, bomUnitId),
                        fieldStr(InventTable, bomUnitId),
                        unitBOM);

        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, PurchModel),
                        fieldStr(InventTable, PurchModel),
                        itemPurchModel);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, CostModel),
                        fieldStr(InventTable, CostModel),
                        itemCostModel);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, ItemBuyerGroupId),
                        fieldStr(InventTable, ItemBuyerGroupId),
                        itemBuyerGroupId);

        // invent from Purchase tab
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, ItemPriceToleranceGroupId),
                        fieldStr(InventTable, ItemPriceToleranceGroupId),
                        itemPriceToleranceGroupId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, PrimaryVendorId),
                        fieldStr(InventTable, PrimaryVendorId),
                        primaryVendorId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, PdsVendorCheckItem),
                        fieldStr(InventTable, PdsVendorCheckItem),
                        pdsVendorCheckItem);

        // invent from Sell tab
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, CommissionGroupId),
                        fieldStr(InventTable, CommissionGroupId),
                        salesCommisionGroupId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, SalesModel),
                        fieldStr(InventTable, SalesModel),
                        salesPriceModel);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, SalesPriceModelBasic),
                        fieldStr(InventTable, SalesPriceModelBasic),
                        salesBasePriceModel);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, SalesContributionRatio),
                        fieldStr(InventTable, SalesContributionRatio),
                        salesContributionRatio);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, SalesPercentMarkup),
                        fieldStr(InventTable, SalesPercentMarkup),
                        salesPercentMarkup);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, UseAltItemId),
                        fieldStr(InventTable, UseAltItemId),
                        salesUseAltItemId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, AltItemId),
                        fieldStr(InventTable, AltItemId),
                        salesAltItemId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, AltConfigId),
                        fieldStr(InventTable, AltConfigId),
                        salesAltConfigId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, AltInventSizeId),
                        fieldStr(InventTable, AltInventSizeId),
                        salesAltInventSizeId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, AltInventColorId),
                        fieldStr(InventTable, AltInventColorId),
                        salesAltInventColorId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, AltInventStyleId),
                        fieldStr(InventTable, AltInventStyleId),
                        salesAltInventStyleId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, AltInventVersionId),
                        fieldStr(InventTable, AltInventVersionId),
                        salesAltInventVersionId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, PdsItemRebateGroupId),
                        fieldStr(InventTable, PdsItemRebateGroupId),
                        salesPdsItemRebateGroupId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, PdsFreightAllocationGroupId),
                        fieldStr(InventTable, PdsFreightAllocationGroupId),
                        salesPdsFreightAllocationGroupId);

        // invent from Inventory tab
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, NetWeight),
                        fieldStr(InventTable, NetWeight),
                        netWeight);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, TaraWeight),
                        fieldStr(InventTable, TaraWeight),
                        taraWeight);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, grossDepth),
                        fieldStr(InventTable, grossDepth),
                        grossDepth);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, grossWidth),
                        fieldStr(InventTable, grossWidth),
                        grossWidth);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, grossHeight),
                        fieldStr(InventTable, grossHeight),
                        grossHeight);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, UnitVolume),
                        fieldStr(InventTable, UnitVolume),
                        unitVolume);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, BatchNumGroupId),
                        fieldStr(InventTable, BatchNumGroupId),
                        batchNumGroupId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, SerialNumGroupId),
                        fieldStr(InventTable, SerialNumGroupId),
                        serialNumGroupId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, WMSArrivalHandlingTime),
                        fieldStr(InventTable, WMSArrivalHandlingTime),
                        wmsArrivalHandlingTime);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, sortCode),
                        fieldStr(InventTable, sortCode),
                        sortCode);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, PackagingGroupId),
                        fieldStr(InventTable, PackagingGroupId),
                        packagingGroupId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, TaxPackagingQty),
                        fieldStr(InventTable, TaxPackagingQty),
                        taxPackagingQty);

        // invent from Cost tab
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, CostGroupId),
                        fieldStr(InventTable, CostGroupId),
                        costGroupId);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, ABCValue),
                        fieldStr(InventTable, ABCValue),
                        abcValue);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, ABCContributionMargin),
                        fieldStr(InventTable, ABCContributionMargin),
                        abcContributionMargin);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, ABCRevenue),
                        fieldStr(InventTable, ABCRevenue),
                        abcRevenue);
        _canWrite = _canWrite
                    && this.trySetAndValidateFieldValue(
                        inventTable,
                        fieldNum(InventTable, ABCTieUp),
                        fieldStr(InventTable, ABCTieUp),
                        abcTieUp);

        // <GBR>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBR]))
        {
            _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            inventTable,
                            fieldNum(InventTable, ExceptionCode_BR),
                            fieldStr(InventTable, ExceptionCode_BR),
                            exceptionCode_BR);
            _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            inventTable,
                            fieldNum(InventTable, ICMSonService_BR),
                            fieldStr(InventTable, ICMSonService_BR),
                            icmsOnService_BR);
            _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            inventTable,
                            fieldNum(InventTable, InventProductType_BR),
                            fieldStr(InventTable, InventProductType_BR),
                            inventProductType_BR);
            _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            inventTable,
                            fieldNum(InventTable, TaxationOrigin_BR),
                            fieldStr(InventTable, TaxationOrigin_BR),
                            taxationOrigin_BR);
            _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            inventTable,
                            fieldNum(InventTable, TaxFiscalClassification_BR),
                            fieldStr(InventTable, TaxFiscalClassification_BR),
                            taxFiscalClassification_BR);
            _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                            inventTable,
                            fieldNum(InventTable, TaxServiceCode_BR),
                            fieldStr(InventTable, TaxServiceCode_BR),
                            taxServiceCode_BR);
        }
        // </GBR>

        return _canWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWriteWHSInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the inventory warehouse properties are valid to be written.
    /// </summary>
    /// <returns>
    /// Returns true if all the inventory warehouse properties are valid; otherwise, false.
    /// </returns>
    protected boolean canWriteWHSInventTable(boolean _canWrite)
    {
        if (whsInventTable)
        {
            whsInventTable.selectForUpdate(true);
        }
        else
        {
            whsInventTable.initValue();
            whsInventTable.ItemId = inventTable.ItemId;
                
            _canWrite = _canWrite
                             && this.trySetAndValidateFieldValue(
                                    whsInventTable,
                                    fieldNum(WHSInventTable, ItemId),
                                    fieldStr(WHSInventTable, ItemId),
                                    inventTable.ItemId);
        }

        _canWrite = _canWrite
                            && this.trySetAndValidateFieldValue(
                                whsInventTable,
                                fieldNum(WHSInventTable, UOMSeqGroupId),
                                fieldStr(WHSInventTable, UOMSeqGroupId),
                                whsUOMSeqGroupId);

        return _canWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWriteInventItemLocationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the inventory item location properties are valid to be written.
    /// </summary>
    /// <param name = "_canWrite">Indicates if we can write into database.</param>
    /// <returns>
    /// Returns true if all the inventory item location properties are valid; otherwise, false.
    /// </returns>
    protected boolean canWriteInventItemLocationTable(boolean _canWrite)
    {
        //misc
        if (!inventItemLocationTable)
        {
            inventItemLocationTable = InventItemLocation::createDefault(itemId);
        }

        //reset
        _canWrite = true;
        inventItemLocationTable.selectForUpdate(true);

        _canWrite = _canWrite
                 && this.trySetAndValidateFieldValue(
                    inventItemLocationTable,
                    fieldNum(InventItemLocation, CountGroupId),
                    fieldStr(InventItemLocation, CountGroupId),
                    groupCounting);

        return _canWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWriteInventItemGroupItemTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the inventory item group properties are valid to be written.
    /// </summary>
    /// <param name = "_canWrite">Indicates if we can write into database.</param>
    /// <returns>
    /// Returns true if all the inventory item group properties are valid; otherwise, false.
    /// </returns>
    protected boolean canWriteInventItemGroupItemTable(boolean _canWrite)
    {
        //reset
        _canWrite = true;

        if (inventItemGroupItemTable)
        {
            inventItemGroupItemTable.selectForUpdate(true);
        }
        else
        {
            inventItemGroupItemTable.initValue();

            _canWrite = _canWrite
                         && this.trySetAndValidateFieldValue(
                            inventItemGroupItemTable,
                            fieldNum(InventItemGroupItem, ItemId),
                            fieldStr(InventItemGroupItem, ItemId),
                            inventTable.ItemId);
            _canWrite = _canWrite
                         && this.trySetAndValidateFieldValue(
                            inventItemGroupItemTable,
                            fieldNum(InventItemGroupItem, ItemGroupDataAreaId),
                            fieldStr(InventItemGroupItem, ItemGroupDataAreaId),
                            curExt2dataareaid(tableNum(InventItemGroup)));
            _canWrite = _canWrite
                         && this.trySetAndValidateFieldValue(
                            inventItemGroupItemTable,
                            fieldNum(InventItemGroupItem, ItemDataAreaId),
                            fieldStr(InventItemGroupItem, ItemDataAreaId),
                            inventTable.DataAreaId);
        }

        _canWrite = _canWrite
                        && this.trySetAndValidateFieldValue(
                        inventItemGroupItemTable,
                        fieldNum(InventItemGroupItem, ItemGroupId),
                        fieldStr(InventItemGroupItem, ItemGroupId),
                        groupItemGroup);

        return _canWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLabelSetup</Name>
				<Source><![CDATA[
    private void saveLabelSetup()
    {
        RetailInventItemLabelSetup       shelfLabelSetup, itemLabelSetup;
        OMHierarchyType                  omHierarchyType;
        OMHierarchyPurpose               omHierarchyPurpose;
        OmHierarchyRelationship          omHierarchyRelationship;
        boolean canWrite;

        // find the root node for Report hierarchy if it exist...
        select firstOnly * from omHierarchyPurpose
            where omHierarchyPurpose.HierarchyPurpose == HierarchyPurpose::RetailReporting
            join RecId, ChildOrganization from omHierarchyRelationship
                where omHierarchyRelationship.HierarchyType == omHierarchyPurpose.HierarchyType
                    && omHierarchyRelationship.ParentOrganization == 0
            join RecId from omHierarchyType where omHierarchyType.RecId == omHierarchyRelationship.HierarchyType;

        if (reportItemLabel)
        {
            select firstonly itemLabelSetup
                where itemLabelSetup.ItemId == inventTable.ItemId
                    && itemLabelSetup.LabelType == RetailLabelTypeBase::ItemLabel
                    && itemLabelSetup.OMHierarchyType == omHierarchyType.RecId
                    && itemLabelSetup.OMInternalOrganization == omHierarchyRelationship.ChildOrganization;

            if (!itemLabelSetup)
            {
                itemLabelSetup.initValue();
                itemLabelSetup.ItemId                   = itemId;
                itemLabelSetup.LabelType                = RetailLabelTypeBase::ItemLabel;
                itemLabelSetup.OMHierarchyType          = omHierarchyType.RecId;
                itemLabelSetup.OMInternalOrganization   = omHierarchyRelationship.ChildOrganization;
                itemLabelSetup.ReportName               = reportItemLabel;
                itemLabelSetup.Text1                    = inventTable.defaultProductName();
                itemLabelSetup.Text1IsItemDescription   = true;
                itemLabelSetup.Text2                    = '';
            }
            else
            {
                itemLabelSetup.selectForUpdate(true);
            }

            canWrite =  this.trySetAndValidateFieldValue(
                                itemLabelSetup,
                                fieldNum(RetailInventItemLabelSetup, ReportName),
                                fieldStr(RetailInventItemLabelSetup, ReportName),
                                itemLabelSetup.ReportName);

            if (canWrite && itemLabelSetup.validateWrite())
            {
                itemLabelSetup.write();
            }
        }

        if (reportShelfLabel)
        {
            select firstonly shelfLabelSetup
                where shelfLabelSetup.ItemId == itemId
                    && shelfLabelSetup.LabelType == RetailLabelTypeBase::ShelfLabel
                    && shelfLabelSetup.OMHierarchyType == omHierarchyType.RecId
                    && shelfLabelSetup.OMInternalOrganization  == omHierarchyRelationship.ChildOrganization;

            if (!shelfLabelSetup)
            {
                shelfLabelSetup.initValue();
                shelfLabelSetup.ItemId                  = itemId;
                shelfLabelSetup.LabelType               = RetailLabelTypeBase::ShelfLabel;
                shelfLabelSetup.OMHierarchyType         = omHierarchyType.RecId;
                shelfLabelSetup.OMInternalOrganization  = omHierarchyRelationship.ChildOrganization;
                shelfLabelSetup.ReportName              = reportShelfLabel;
                shelfLabelSetup.Text1                   = inventTable.defaultProductName();
                shelfLabelSetup.Text1IsItemDescription  = true;
                shelfLabelSetup.Text2                   = '';
            }
            else
            {
                shelfLabelSetup.selectForUpdate(true);
            }

            canWrite =  this.trySetAndValidateFieldValue(
                                shelfLabelSetup,
                                fieldNum(RetailInventItemLabelSetup, ReportName),
                                fieldStr(RetailInventItemLabelSetup, ReportName),
                                shelfLabelSetup.ReportName);

            if (canWrite && shelfLabelSetup.validateWrite())
            {
                shelfLabelSetup.write();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveProductDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves product dimensions.
    /// </summary>
    protected void saveProductDimensions()
    {
        EcoResTrackingDimensionGroupRecId   groupStorageDimensionRecId;
        EcoResTrackingDimensionGroupRecId   groupTrackingDimensionRecId;

        productId = inventTable.Product;

        storageDimensionTable = EcoResStorageDimensionGroup::findByDimensionGroupName(groupStorageDimension);
        groupStorageDimensionRecId = storageDimensionTable.RecId;

        trackingDimensionTable = EcoResTrackingDimensionGroup::findByDimensionGroupName(groupTrackingDimension);
        groupTrackingDimensionRecId = trackingDimensionTable.RecId;

        // this should be used and set only when the product is a master and when the value was not previously set.
        if (ecoResProduct.isProductMaster())
        {
            if (groupProductDimension)
            {
                productDimensionTable = EcoResProductDimensionGroup::findByDimensionGroupName(groupProductDimension);

                // this only can be set once.
                if (productDimensionTable && !productProductDimensionTable)
                {
                    productProductDimensionTable.initFromProduct(ecoResProduct);

                    if (this.trySetAndValidateFieldValue(
                                productProductDimensionTable,
                                fieldNum(EcoResProductDimensionGroupProduct, ProductDimensionGroup),
                                fieldStr(EcoResProductDimensionGroupProduct, ProductDimensionGroup),
                                productDimensionTable.RecId)
                     && productProductDimensionTable.validateWrite())
                    {
                        productProductDimensionTable.write();
                    }
                }
            }
        }

        InventTableInventoryDimensionGroups::updateDimensionGroupsForItem(
            inventTable.DataAreaId,itemId,
            groupStorageDimensionRecId,
            groupTrackingDimensionRecId);

        whsInventTable = WhsInventTable::find(itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveProductVariantGroups</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save product variant group settings
    /// </summary>
    public void saveProductVariantGroups()
    {
        EcoResProductMaster productMaster;
        boolean canWrite = true;

        if (ecoResProduct.isProductMaster() && !ecoResProduct.isReleased())
        {
            productMaster = EcoResProductMaster::find(ecoResProduct.RecId, true);

            canWrite =  canWrite
                     && this.trySetAndValidateFieldValue(
                                productMaster,
                                fieldNum(EcoResProductMaster, RetailColorGroupId),
                                fieldStr(EcoResProductMaster, RetailColorGroupId),
                                variantColorGroup);
            canWrite =  canWrite
                     && this.trySetAndValidateFieldValue(
                                productMaster,
                                fieldNum(EcoResProductMaster, RetailSizeGroupId),
                                fieldStr(EcoResProductMaster, RetailSizeGroupId),
                                variantSizeGroup);
            canWrite =  canWrite
                     && this.trySetAndValidateFieldValue(
                                productMaster,
                                fieldNum(EcoResProductMaster, RetailStyleGroupId),
                                fieldStr(EcoResProductMaster, RetailStyleGroupId),
                                variantStyleGroup);

            if ((productMaster.RetailColorGroupId != productMaster.orig().RetailColorGroupId) ||
                (productMaster.RetailSizeGroupId != productMaster.orig().RetailSizeGroupId) ||
                (productMaster.RetailStyleGroupId != productMaster.orig().RetailStyleGroupId))
            {
                if (canWrite && productMaster.validateWrite())
                {
                    productMaster.write();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRetailCoreProperties</Name>
				<Source><![CDATA[
    private void saveRetailCoreProperties()
    {
        if (!retailInventTable.RecId)
        {
            retailInventTable.ItemId = itemId;
        }

        retailInventTable.selectForUpdate(true);

        if (this.canWriteRetailCoreProperties() && retailInventTable.validateWrite())
        {
            retailInventTable.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canWriteRetailCoreProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies if the retail core properties are valid to be writen.
    /// </summary>
    /// <returns>
    /// Returns true if all the retail core properties are valid or false otherwise.
    /// </returns>
    protected boolean canWriteRetailCoreProperties()
    {
        boolean canWrite = true;

        ///<GlobalAttributes>
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, BarcodeSetupId),
                            fieldStr(RetailInventTable, BarcodeSetupId),
                            barcodeSetup);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, UseEanStandardBarcode),
                            fieldStr(RetailInventTable, UseEanStandardBarcode),
                            barCodeUseEANStandard);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, QtyBecomesNegative),
                            fieldStr(RetailInventTable, QtyBecomesNegative),
                            posAllowNegativeQuantity);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, NoDiscountAllowed),
                            fieldStr(RetailInventTable, NoDiscountAllowed),
                            posDisallowDiscount);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, NoManualDiscountAllowed),
                            fieldStr(RetailInventTable, NoManualDiscountAllowed),
                            posDisallowManualDiscount);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, ScaleItem),
                            fieldStr(RetailInventTable, ScaleItem),
                            posIsScaleItem);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, ZeroPriceValid),
                            fieldStr(RetailInventTable, ZeroPriceValid),
                            posIsZeroPriceValid);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, KeyingInPrice),
                            fieldStr(RetailInventTable, KeyingInPrice),
                            posKeyingInPrice);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, KeyingInQty),
                            fieldStr(RetailInventTable, KeyingInQty),
                            posKeyingInQuantity);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, MustKeyInComment),
                            fieldStr(RetailInventTable, MustKeyInComment),
                            posMustKeyInComment);

        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, blockedOnPOS),
                            fieldStr(RetailInventTable, blockedOnPOS),
                            blockedAtRegister);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, dateToBeBlocked),
                            fieldStr(RetailInventTable, dateToBeBlocked),
                            dateToBeBlocked);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, dateBlocked),
                            fieldStr(RetailInventTable, dateBlocked),
                            dateBlocked);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, dateToActivateItem),
                            fieldStr(RetailInventTable, dateToActivateItem),
                            dateToActivateItem);

        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, PrintVariantsShelfLabels),
                            fieldStr(RetailInventTable, PrintVariantsShelfLabels),
                            printVariantsShelfLabels);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, seasonCode),
                            fieldStr(RetailInventTable, seasonCode),
                            seasonCode);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, lifeFrom),
                            fieldStr(RetailInventTable, lifeFrom),
                            lifeFrom);
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, lifeTo),
                            fieldStr(RetailInventTable, lifeTo),
                            lifeTo);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            canWrite = canWrite
                       && this.trySetAndValidateFieldValue(
                               retailInventTable,
                               fieldNum(RetailInventTable, ProhibitReturn_RU),
                               fieldStr(RetailInventTable, ProhibitReturn_RU),
                               prohibitReturn_RU);

            canWrite = canWrite
                       && this.trySetAndValidateFieldValue(
                               retailInventTable,
                               fieldNum(RetailInventTable, LabelAttribute1),
                               fieldStr(RetailInventTable, LabelAttribute1),
                               labelAttribute1);

            canWrite = canWrite
                       && this.trySetAndValidateFieldValue(
                               retailInventTable,
                               fieldNum(RetailInventTable, LabelAttribute2),
                               fieldStr(RetailInventTable, LabelAttribute2),
                               labelAttribute2);

            canWrite = canWrite
                       && this.trySetAndValidateFieldValue(
                               retailInventTable,
                               fieldNum(RetailInventTable, LabelAttribute3),
                               fieldStr(RetailInventTable, LabelAttribute3),
                               labelAttribute3);

            canWrite = canWrite
                       && this.trySetAndValidateFieldValue(
                               retailInventTable,
                               fieldNum(RetailInventTable, LabelAttribute4),
                               fieldStr(RetailInventTable, LabelAttribute4),
                               labelAttribute4);

            canWrite = canWrite
                       && this.trySetAndValidateFieldValue(
                               retailInventTable,
                               fieldNum(RetailInventTable, LabelAttribute5),
                               fieldStr(RetailInventTable, LabelAttribute5),
                               labelAttribute5);
        }
        // </GEERU>

        ///</GlobalAttributes>

        ///<LegalEntityAttributes>
        canWrite =  canWrite
                    && this.trySetAndValidateFieldValue(
                            retailInventTable,
                            fieldNum(RetailInventTable, BaseComparisonUnitCode),
                            fieldStr(RetailInventTable, BaseComparisonUnitCode),
                            unitBaseComparison);
        ///</LegalEntityAttributes>

        return canWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRetailProductProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Will save all the retail products properties.
    /// </summary>
    public void saveRetailProductProperties()
    {
        using(var telemetry = RetailInstrumentationSegment::construct(classId2Name(ClassIdGet(this)), funcName()))
        {
            ttsbegin;

            ///<GlobalAttributes>
            this.saveRetailCoreProperties();
            this.saveLabelSetup();
            this.saveProductDimensions();
            ///</GlobalAttributes>

            ///<LegalEntityAttributes>
            this.saveInventTableAndRelated();
            this.saveDefaultWarehouseFields();
            ///</LegalEntityAttributes>

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trySetAndValidateFieldValue</Name>
				<Source><![CDATA[
    private boolean trySetAndValidateFieldValue(Common _table, FieldId _fieldId, FieldName _fieldName, anytype _value)
    {
        boolean ret;

        _table.setFieldValue(_fieldName, _value);

        if (_table.validateFieldValue(_fieldName))
        {
            _table.modifiedField(_fieldId);
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteOnInventModelGroupItem</Name>
				<Source><![CDATA[
    private boolean validateWriteOnInventModelGroupItem()
    {
        boolean ret = true;
        PdsBatchAttribByItem         byItem;
        PdsBatchAttribByItemCustomer byCust;

        // there is no need to validate if the value was not set.
        if (!groupInventoryModel)
        {
            return ret;
        }

        if (ecoResProduct.PdsCWProduct
            && !InventModelGroup::find(inventModelGroupItemTable.ModelGroupId).isStocked())
        {
            ret = checkFailed("@PDS1441");
        }

        if (#PdsBatchAttribEnabled
        && !inventModelGroupItemTable.RecId
        && inventTable.isItemBatchActivated()
        && !InventModelGroup::find(inventModelGroupItemTable.ModelGroupId).isStocked())
        {
            if (inventTable.anyProductDatesSpecified())
            {
                ret = false;
            }

            if (ret)
            {
                select firstonly RecId from byItem
                    where byItem.PdsBatchAttribItemId == inventTable.ItemId;

                select firstonly RecId from byCust
                    where byItem.PdsBatchAttribItemId == inventTable.ItemId;

                if (byItem || byCust)
                {
                    ret = false;
                }
            }
        }

        ret = inventModelGroupItemTable.validateFieldValue(fieldStr(InventModelGroupItem, ModelGroupId))
           && inventModelGroupItemTable.validateWrite()
           && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWriteOnInventTable</Name>
				<Source><![CDATA[
    [Hookable(true)]
    private boolean validateWriteOnInventTable()
    {
        boolean ret = true;
        EcoResReleasedProduct ecoResReleasedProduct = EcoResReleasedProduct::construct();

        ecoResReleasedProduct.parmInventTable(inventTable);
        ecoResReleasedProduct.parmInventTableModuleInvent(inventTableInventModule);
        ecoResReleasedProduct.parmInventTableModulePurch(inventTablePurchModule);
        ecoResReleasedProduct.parmInventTableModuleSales(inventTableSalesModule);
        ecoResReleasedProduct.parmInventModelGroupItem(inventModelGroupItemTable);

        ecoResReleasedProduct.parmUnitOfMeasureConverter(UnitOfMeasureConverter_Product::construct());
        ecoResReleasedProduct.parmInventModelTypeFactory(InventModelTypeFactory::construct());

        // <GEERU>
        if (   inventModelGroupItemTable.ModelGroupId
            && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && !inventModelGroupItemTable.modelGroup().inventModelTypeSecCur_RU().validateWriteInventTable(inventTable))
        {
            return false;
        }
        // </GEERU>

        ecoResReleasedProduct.checkAndUpdateNonStockedDependencies();
        ret = ret && ecoResReleasedProduct.validateWrite();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProduct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the class <c>RetailProductPropertyManager</c> with product and lengal entity.
    /// </summary>
    /// <param name="_product">
    /// The value for the product.
    /// </param>
    /// <param name="_legalEntityId">
    /// The value of th legal entity Id.
    /// </param>
    /// <returns>
    /// Instance of class <c>RetailProductPropertyManager</c>.
    /// </returns>
    static public RetailProductPropertyManager newFromProduct(EcoResProduct _product, CompanyInfoRecId _legalEntityId)
    {
        RetailProductPropertyManager productPropertyManager = new RetailProductPropertyManager();

        productPropertyManager.parmEcoResProduct(_product);
        productPropertyManager.parmLegalEntityId(_legalEntityId);
        changecompany(productPropertyManager.getDataAreaId())
        {
            productPropertyManager.initializeAttributes();
        }
        return productPropertyManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProductRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the class <c>RetailProductPropertyManager</c> with product RecId and legal entity RecId.
    /// </summary>
    /// <param name="_productRecId">
    /// The RecId of the product in <c>EcoResProduct</c> atbel.
    /// </param>
    /// <param name="_legalEntityId">
    /// The RecId of the legal entity RecId.
    /// </param>
    /// <returns>
    /// Instance of class <c>RetailProductPropertyManager</c>.
    /// </returns>
    static public RetailProductPropertyManager newFromProductRecId(EcoResProductRecId _productRecId, CompanyInfoRecId _legalEntityId)
    {
        return RetailProductPropertyManager::newFromProduct(EcoResProduct::find(_productRecId), _legalEntityId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveExisting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class <c>RetailProductPropertyManager</c> with product and legal entity.
    /// </summary>
    /// <param name="_product">
    /// The value for the product.
    /// </param>
    /// <param name="_legalEntityId">
    /// The value of the legal entity RecId.
    /// </param>
    /// <param name="_itemLabel">
    /// Optional parameter specifics the default value to use for item label.
    /// </param>
    /// <param name="_shelfLabel">
    /// Optional parameter specifics the default value to use for shelf label.
    /// </param>
    /// <returns>
    /// The instantiated class <c>RetailProductPropertyManager</c>.
    /// </returns>
    /// <remarks>
    /// If the product does not exists in base table then an error message is displayed.
    /// </remarks>
    static public RetailProductPropertyManager retrieveExisting(EcoResProduct _product, CompanyInfoRecId _legalEntityId, RetailReportName _itemLabel = '', RetailReportName _shelfLabel = '')
    {
        RetailProductPropertyManager retailProduct;
        retailProduct = new RetailProductPropertyManager();

        retailProduct.parmLegalEntityId(_legalEntityId);
        retailProduct.parmEcoResProduct(_product);

        changecompany(retailProduct.getDataAreaId())
        {
            // has the product been released to this legal entity?
            if (retailProduct.hasProduct())
            {
                retailProduct.initializeAttributes(_itemLabel, _shelfLabel);
            }
            else
            {
                eventSource.EventWriteProductsProductNotReleasedToLegalEntity(classStr(RetailProductPropertyManager), funcName(), _product.RecId, _legalEntityId);
            }
        }

        return retailProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateUnitOfMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if units of measure are compatible.
    /// </summary>
    /// <param name="_unitFrom">
    /// A <c>UnitOfMeasure</c> record specifying source unit of measure.
    /// </param>
    /// <param name="_unitTo">
    /// A <c>UnitOfMeasure</c> record specifying target unit of measure.
    /// </param>
    /// <param name= "_showInfo">
    /// A <c>boolean</c> decides to show infolog.
    /// </param>
    /// <returns>
    /// true if validation succeeded; otherwise, false.
    /// </returns>
    public static boolean validateUnitOfMeasure(UnitOfMeasure _unitFrom, UnitOfMeasure _unitTo, boolean _showInfo = true)
    {
        boolean canBeConverted;

        if (_unitFrom && _unitTo)
        {
            canBeConverted = UnitOfMeasureConverter::canBeConverted(
                                _unitFrom.RecId,
                                _unitTo.RecId);

            if (!canBeConverted)
            {
                if (_showInfo)
                {
                    eventSource.EventWriteProductsUOMConversionError(classStr(RetailProductPropertyManager), funcName(), _unitFrom.RecId, _unitTo.RecId);
                    error(strFmt("@SYS28690", _unitFrom.Symbol, _unitTo.Symbol));
                }

                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabelAttribute1</Name>
				<Source><![CDATA[
    public RefRecId parmLabelAttribute1(RefRecId _labelAttribute1 = labelAttribute1)
    {
        labelAttribute1 = _labelAttribute1;
        return _labelAttribute1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabelAttribute2</Name>
				<Source><![CDATA[
    public RefRecId parmLabelAttribute2(RefRecId _labelAttribute2 = labelAttribute2)
    {
        labelAttribute2 = _labelAttribute2;
        return _labelAttribute2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabelAttribute3</Name>
				<Source><![CDATA[
    public RefRecId parmLabelAttribute3(RefRecId _labelAttribute3 = labelAttribute3)
    {
        labelAttribute3 = _labelAttribute3;
        return _labelAttribute3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabelAttribute4</Name>
				<Source><![CDATA[
    public RefRecId parmLabelAttribute4(RefRecId _labelAttribute4 = labelAttribute4)
    {
        labelAttribute4 = _labelAttribute4;
        return _labelAttribute4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLabelAttribute5</Name>
				<Source><![CDATA[
    public RefRecId parmLabelAttribute5(RefRecId _labelAttribute5 = labelAttribute5)
    {
        labelAttribute5 = _labelAttribute5;
        return _labelAttribute5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRetailVariantDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the formatted description string for the provided product variant
    /// </summary>
    /// <param name = "_itemId">The Item Id</param>
    /// <param name = "_retailVariantId">The variant id.</param>
    /// <param name = "_languageId">The language id</param>
    /// <returns>Variant description.</returns>
    internal static str getRetailVariantDescription(ItemId _itemId, RetailVariantId _retailVariantId, LanguageId _languageId)
    {
        str variantDescription;
        InventDimCombination inventDimCombination;
        EcoResProductDimensionGroupRecId productDimensionGroup;
        EcoResProductDimensionGroupFldSetup dimensionGroupFldSetup;

        if (_itemId && _retailVariantId && _languageId)
        {
            select InventDimId from inventDimCombination
                where inventDimCombination.ItemId == _itemId
                    && inventDimCombination.RetailVariantId == _retailVariantId;

            InventDim inventDim = InventDim::find(inventDimCombination.InventDimId);
            RefRecId productMasterRecId = InventTable::find(_itemId).Product;

            if (inventDim.RecId && productMasterRecId)
            {
                productDimensionGroup = EcoResProductDimensionGroupProduct::findByProduct(productMasterRecId).ProductDimensionGroup;

                while select dimensionGroupFldSetup
                    order by dimensionGroupFldSetup.DisplayOrder asc
                    where dimensionGroupFldSetup.ProductDimensionGroup == productDimensionGroup
                        && dimensionGroupFldSetup.IsActive == NoYes::Yes
                {
                    switch (dimensionGroupFldSetup.DimensionFieldId)
                    {
                        case fieldNum(InventDim,InventSizeId):
                            EcoResSize ecoResSize;
                            EcoResProductMasterSize masterProductSize;
                            EcoResProductMasterDimValueTranslation masterSizeTransLation;

                            select Name from ecoResSize
                                where ecoResSize.Name == inventDim.InventSizeId
                                join RecId from masterProductSize
                                    where masterProductSize.Size == ecoResSize.recId
                                        && masterProductSize.SizeProductMaster == productMasterRecId
                                outer join Name from masterSizeTransLation
                                    where masterSizeTransLation.ProductMasterDimensionValue == masterProductSize.RecId
                                        && masterSizeTransLation.LanguageId == _languageId;

                            Name size = masterSizeTransLation.Name ? masterSizeTransLation.Name : ecoResSize.Name;

                            variantDescription += !variantDescription ? size : ("@Retail:RetailVariantDescriptionSeparator" + size);
                            break;
                        case fieldNum(InventDim,InventColorId):
                            EcoResColor ecoResColor;
                            EcoResProductMasterColor masterProductColor;
                            EcoResProductMasterDimValueTranslation masterColorTransLation;

                            select Name from ecoResColor
                                where ecoResColor.Name == inventDim.InventColorId
                                join RecId from masterProductColor
                                    where masterProductColor.Color == ecoResColor.recId
                                        && masterProductColor.ColorProductMaster == productMasterRecId
                                outer join Name from masterColorTransLation
                                    where masterColorTransLation.ProductMasterDimensionValue == masterProductColor.RecId
                                        && masterColorTransLation.LanguageId == _languageId;

                            Name color = masterColorTransLation.Name ? masterColorTransLation.Name : ecoResColor.Name;

                            variantDescription += !variantDescription ? color : ("@Retail:RetailVariantDescriptionSeparator" + color);
                            break;
                        case fieldNum(InventDim,InventStyleId):
                            EcoResStyle ecoResStyle;
                            EcoResProductMasterStyle masterProductStyle;
                            EcoResProductMasterDimValueTranslation masterStyleTransLation;

                            select Name from ecoResStyle
                                where ecoResStyle.Name == inventDim.InventStyleId
                                join RecId from masterProductStyle
                                    where masterProductStyle.Style == ecoResStyle.recId
                                        && masterProductStyle.StyleProductMaster == productMasterRecId
                                outer join Name from masterStyleTransLation
                                    where masterStyleTransLation.ProductMasterDimensionValue == masterProductStyle.RecId
                                        && masterStyleTransLation.LanguageId == _languageId;

                            Name style = masterStyleTransLation.Name ? masterStyleTransLation.Name : ecoResStyle.Name;

                            variantDescription += !variantDescription ? style : ("@Retail:RetailVariantDescriptionSeparator" + style);
                            break;
                        case fieldNum(InventDim,configId):
                            EcoResConfiguration ecoResConfig;
                            EcoResProductMasterConfiguration masterProductConfig;
                            EcoResProductMasterDimValueTranslation masterConfigTransLation;

                            select Name from ecoResConfig
                                where ecoResConfig.Name == inventDim.configId
                                join RecId from masterProductConfig
                                    where masterProductConfig.Configuration == ecoResConfig.recId
                                        && masterProductConfig.ConfigProductMaster == productMasterRecId
                                outer join Name from masterConfigTransLation
                                    where masterConfigTransLation.ProductMasterDimensionValue == masterProductConfig.RecId
                                        && masterConfigTransLation.LanguageId == _languageId;

                            Name config = masterConfigTransLation.Name ? masterConfigTransLation.Name : ecoResConfig.Name;

                            variantDescription += !variantDescription ? config : ("@Retail:RetailVariantDescriptionSeparator" + config);
                            break;
                    }
                }
            }
        }

        return variantDescription;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>