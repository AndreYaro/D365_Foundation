<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransactionReversal_Disposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetTransactionReversal_Disposal extends RAssetTransactionReversal
{
    RDeferralsBook          deferralsBook;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>blockDeferrals</Name>
				<Source><![CDATA[
    protected void blockDeferrals()
    {
        RDeferralsTransactionReversal deferralsTransReversal;
        RDeferralsTrans               deferralsTrans;
    
        if (deferralsBook.RecId)
        {
            deferralsBook.Depreciate = NoYes::Yes;
            deferralsBook.doUpdate();
        }
    
        deferralsTrans = RDeferralsTrans::findLastType(deferralsBook.DeferralsId,
                                                       deferralsBook.DeferralsBookId,
                                                       RDeferralsTransType::Receipt,
                                                       false);
        if (deferralsTrans)
        {
            deferralsTransReversal = RDeferralsTransactionReversal::construct(deferralsTrans);
            deferralsTransReversal.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret;

        ret = super();

        ret = this.checkDeferrals();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDeferrals</Name>
				<Source><![CDATA[
    protected boolean checkDeferrals()
    {
        RDeferralsTable         deferralsTable;
        RAssetDeferralsAccounts rAssetDeferralsAccounts;

        if (rAssetParameters.StandardIdDefault    != rAssetStandards.AssetStandardId &&
            rAssetParameters.StandardTaxIdDefault != rAssetStandards.AssetStandardId)
            return true;

        rAssetDeferralsAccounts = RAssetDeferralsAccounts::find(RAssetTableGroupAllStandard::Table,
                                                                rAssetStandards.AssetId,
                                                                rAssetStandards.AssetStandardId,
                                                                RassetDeferralsType::Disposal);

        deferralsTable = RDeferralsTable::findFromSource(tablenum(RAssetTable),
                                                         rAssetTable.RecId,
                                                         rAssetDeferralsAccounts.rTax25ProfitTable);

        deferralsBook = RDeferralsBook::find(deferralsTable.DeferralsId,
                                             rAssetDeferralsAccounts.rDeferralsBookId,
                                             true);

        if (deferralsBook.RecId &&
            (deferralsBook.Status != RDeferralsStatus::Open ||
             deferralsBook.LastDeferralsDate))
        {
            return checkFailed("@GLS116990");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    protected void updateStatus()
    {
        RAssetStandards rassetStandardsLocal;
        ;

        this.blockDeferrals();

        rAssetStandards.SaleValue    = 0;
        rAssetStandards.DisposalDate = dateNull();
        rAssetStandards.doUpdate();

        select firstonly RecId from rassetStandardsLocal
            where rassetStandardsLocal.AssetId == rAssetTable.AccountNum &&
                  rassetStandardsLocal.DisposalDate;

        if (! rassetStandardsLocal.RecId)
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>