<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineProjAdvancedJournalTaxExtImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is a tax model class for <c>ProjAdvancedJournalLineTaxExtensionIN</c> with India localization.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(ProjAdvancedJournalLineTaxExtensionIN))]
public class TaxModelDocLineProjAdvancedJournalTaxExtImpl_IN extends TaxModelDocLineWithholdImpl_IN
{
    private ProjAdvancedJournalLine projAdvancedJournalLine;
    private ProjAdvancedJournal projAdvancedJournal;
    private ProjAdvancedJournalLineTaxExtensionIN projAdvancedJournalLineTaxExtensionIN;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        projAdvancedJournalLineTaxExtensionIN = _documentLineMap;
        projAdvancedJournalLine = projAdvancedJournalLineTaxExtensionIN.ProjAdvancedJournalLine();
        projAdvancedJournal = projAdvancedJournalLine.getProjAdvancedJournal();
        super(_documentLineMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax direction.
    /// </summary>
    /// <returns>
    /// The tax direction.
    /// </returns>
    public TaxDirection getTaxDirection()
    {
        return TaxDirection::OutgoingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTable</c> based on the cust account on the transaction line.
    /// </summary>
    /// <returns>
    /// The <c>CustTable</c>
    /// </returns>
    public CustTable getCustTable()
    {
        ProjTable projTable = ProjTable::find(projAdvancedJournalLine.ProjId);
        CustTable custTable = CustTable::find(projTable.CustAccount);
        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax module type.
    /// </summary>
    /// <returns>
    /// The transaction tax module type.
    /// </returns>
    public TaxModuleType getTaxModuleType()
    {
        return TaxModuleType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        return projAdvancedJournalLine.ExtendedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    /// The quantity.
    /// </returns>
    /// <remarks>
    /// If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    /// to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        return projAdvancedJournalLine.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the unit of the item in this transaction document line.
    /// </summary>
    /// <returns>The unit of the item in this transaction line.</returns>
    public UnitOfMeasureSymbol getUnit()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
        return projAdvancedJournalLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventDimId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventDimId</c>
    /// </returns>
    public InventDimId getInventDimId()
    {
        return projAdvancedJournalLine.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction delivery date.
    /// </summary>
    /// <returns>
    /// The transaction delivery date.
    /// </returns>
    public Date getDeliveryDate()
    {
        return projAdvancedJournalLine.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date.
    /// </summary>
    /// <returns>
    /// The transaction invoice date.
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return projAdvancedJournalLine.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date.
    /// </summary>
    /// <returns>
    /// The transaction document date.
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return projAdvancedJournalLine.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date.
    /// </summary>
    /// <returns>
    /// The transaction posting date.
    /// </returns>
    public TransDate getTransDate()
    {
        return projAdvancedJournalLine.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        return projAdvancedJournalLine.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumRetailPriceTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum retail price of the document line.
    /// </summary>
    /// <returns>
    /// The maximum retail price.
    /// </returns>
    public MaximumRetailPrice_IN getMaximumRetailPriceTransactionCurrency()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canModifyTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the document line can be edited or not on tax information.
    /// </summary>
    /// <returns>
    /// True if the document line is editable; otherwise, false.
    /// </returns>
    public NoYes canModifyTaxInformation()
    {
        if (projAdvancedJournal.Status == ProjAdvancedJournalStatus::Draft)
        {
            return NoYes::Yes;
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value of the document line.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    public AmountCur getAssessableValueTransactionCurrency()
    {
        return projAdvancedJournalLineTaxExtensionIN.ProjectSalesAssessableValueTransactionCurrency;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>