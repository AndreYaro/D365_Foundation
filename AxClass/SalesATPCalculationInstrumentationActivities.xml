<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesATPCalculationInstrumentationActivities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesATPCalculationInstrumentationActivities</c> class provides activities for sales order ATP calculation instrumentation logging.
/// </summary>
internal final class SalesATPCalculationInstrumentationActivities
{
    private const str ActivityNamePrefix = 'SalesATPCalculation.';
    private const str ATPLeadTimeActivity = 'ATPLeadTime';
    private const str CalculationActivity = 'Calculation';
    private const str CalcSalesTmpATPActivity = 'CalcSalesTmpATP';
    private const str CalculateOnHandActivity = 'CalculateOnHand';
    private const str CalculateOrdersActivity = 'CalculateOrders';
    private const str CalculatePlannedOrdersActivity = 'CalculatePlannedOrders';
    private const str ProcessPlannedDemandActivity = 'ProcessPlannedDemand';
    private const str ProcessPlannedSupplyActivity = 'ProcessPlannedSupply';
    private const str CurrentOnHandActivity = 'CurrentOnHand';
    private const str CurrentOnHandWithDipositionNotSetActivity = 'CurrentOnHandWithDipositionNotSet';
    private const str CalculateExpiredBatchIssuesActivity = 'CalculateExpiredBatchIssues';
    private const str GetExpiredBatchIssuesActivity = 'GetExpiredBatchIssues';
    private const str GetExpiredBatchOnHandActivity = 'GetExpiredBatchOnHand';
    private const str CalculateExpiredBatchIssueQuantityActivity = 'CalculateExpiredBatchIssueQuantity';
    private const str CurrentOnHandWithDipositionSetAvailableActivity = 'CurrentOnHandWithDipositionSetAvailable';
    private const str ProcessIssuesActivity = 'ProcessIssues';
    private const str ProcessReceiptsActivity = 'ProcessReceipts';
    private const str GetCustomerSellableDaysActivity = 'GetCustomerSellableDays';
    private const str ApplyDeliveryScheduleActivity = 'ApplyDeliverySchedule';
    private const str UpdateSalesTmpATPWithIssueActivity = 'UpdateSalesTmpATPWithIssue';
    private const str UpdateSalesTmpATPWithReceiptActivity = 'UpdateSalesTmpATPWithReceipt';
    private const str UpdateSalesTmpATPWithPlannedDemandActivity = 'UpdateSalesTmpATPWithPlannedDemand';
    private const str UpdateSalesTmpATPWithPlannedSupplyActivity = 'UpdateSalesTmpATPWithPlannedSupply';

    private SalesInstrumentationLogger logger;

    }
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(SalesInstrumentationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLogger</Name>
				<Source><![CDATA[
    internal static SalesATPCalculationInstrumentationActivities newFromLogger(SalesInstrumentationLogger _logger)
    {
        return new SalesATPCalculationInstrumentationActivities(_logger);
    }

]]></Source>
			</Method>
			<Method>
				<Name>atpLeadTime</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext atpLeadTime()
    {
        return logger.activityContext(ActivityNamePrefix + ATPLeadTimeActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculation</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calculation()
    {
        return logger.activityContext(ActivityNamePrefix + CalculationActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSalesTmpATP</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calcSalesTmpATP()
    {
        return logger.activityContext(ActivityNamePrefix + CalcSalesTmpATPActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOnHand</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calculateOnHand()
    {
        return logger.activityContext(ActivityNamePrefix + CalculateOnHandActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOrders</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calculateOrders()
    {
        return logger.activityContext(ActivityNamePrefix + CalculateOrdersActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculatePlannedOrders</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calculatePlannedOrders()
    {
        return logger.activityContext(ActivityNamePrefix + CalculatePlannedOrdersActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPlannedDemand</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext processPlannedDemand()
    {
        return logger.activityContext(ActivityNamePrefix + ProcessPlannedDemandActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPlannedSupply</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext processPlannedSupply()
    {
        return logger.activityContext(ActivityNamePrefix + ProcessPlannedSupplyActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentOnHand</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext currentOnHand()
    {
        return logger.activityContext(ActivityNamePrefix + CurrentOnHandActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentOnHandWithDipositionNotSet</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext currentOnHandWithDipositionNotSet()
    {
        return logger.activityContext(ActivityNamePrefix + CurrentOnHandWithDipositionNotSetActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExpiredBatchIssues</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calculateExpiredBatchIssues()
    {
        return logger.activityContext(ActivityNamePrefix + CalculateExpiredBatchIssuesActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpiredBatchIssues</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext getExpiredBatchIssues()
    {
        return logger.activityContext(ActivityNamePrefix + GetExpiredBatchIssuesActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExpiredBatchOnHand</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext getExpiredBatchOnHand()
    {
        return logger.activityContext(ActivityNamePrefix + GetExpiredBatchOnHandActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExpiredBatchIssueQuantity</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext calculateExpiredBatchIssueQuantity()
    {
        return logger.activityContext(ActivityNamePrefix + CalculateExpiredBatchIssueQuantityActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentOnHandWithDipositionSetAvailable</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext currentOnHandWithDipositionSetAvailable()
    {
        return logger.activityContext(ActivityNamePrefix + CurrentOnHandWithDipositionSetAvailableActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processIssues</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext processIssues()
    {
        return logger.activityContext(ActivityNamePrefix + ProcessIssuesActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReceipts</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext processReceipts()
    {
        return logger.activityContext(ActivityNamePrefix + ProcessReceiptsActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustomerSellableDays</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext getCustomerSellableDays()
    {
        return logger.activityContext(ActivityNamePrefix + GetCustomerSellableDaysActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDeliverySchedule</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext applyDeliverySchedule()
    {
        return logger.activityContext(ActivityNamePrefix + ApplyDeliveryScheduleActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTmpATPWithIssue</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateSalesTmpATPWithIssue()
    {
        return logger.activityContext(ActivityNamePrefix + UpdateSalesTmpATPWithIssueActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTmpATPWithReceipt</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateSalesTmpATPWithReceipt()
    {
        return logger.activityContext(ActivityNamePrefix + UpdateSalesTmpATPWithReceiptActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTmpATPWithPlannedDemand</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateSalesTmpATPWithPlannedDemand()
    {
        return logger.activityContext(ActivityNamePrefix + UpdateSalesTmpATPWithPlannedDemandActivity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTmpATPWithPlannedSupply</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext updateSalesTmpATPWithPlannedSupply()
    {
        return logger.activityContext(ActivityNamePrefix + UpdateSalesTmpATPWithPlannedSupplyActivity);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>