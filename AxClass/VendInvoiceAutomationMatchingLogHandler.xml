<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationMatchingLogHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceAutomationMatchingLogHandler</c> class handles the automatic matching of vendor invoices to product receipts results.
/// </summary>
internal final class VendInvoiceAutomationMatchingLogHandler
{
    private VendInvoiceAutomationMatchingLogger matchingLogger;
    private ProcessScheduleWorkItem processScheduleWorkItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeMatchingLogHandler</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationMatchingLogHandler initializeMatchingLogHandler(
        ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        VendInvoiceAutomationMatchingLogHandler matchingLogHandler = new VendInvoiceAutomationMatchingLogHandler();
        matchingLogHandler.matchingLogger = VendInvoiceAutomationMatchingLogger::initializeMatchingLogger(_processScheduleWorkItem);
        matchingLogHandler.processScheduleWorkItem = _processScheduleWorkItem;

        return matchingLogHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logAutomationMatchingResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs automation matching of vendor invoices to product receipts results.
    /// </summary>
    /// <param name="_invoicesRanMatching">
    /// List of invoices that ran automatic matching.
    /// </param>
    internal void logAutomationMatchingResults(VendInvoiceAutomationInvoiceTmp _invoicesRanMatching)
    {
        select firstonly RecId from _invoicesRanMatching;

        if (_invoicesRanMatching.RecId)
        {
            DocumentEvent documentMatchingEvent = DocumentEvent::findByEventType(enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent));
            VendInvoiceLineMatchingTmp invoiceLineForInvoiceRanMatching;
            VendInvoiceInfoLine vendInvoiceInfoLine;

            insert_recordset invoiceLineForInvoiceRanMatching (RefRecId, ParmId, TableRefId, ReceiveNow)
                select RecId, ParmId, TableRefId, ReceiveNow from vendInvoiceInfoLine
                    exists join _invoicesRanMatching
                        where _invoicesRanMatching.VendInvoiceParmId == vendInvoiceInfoLine.ParmId
                            && _invoicesRanMatching.VendInvoiceTableRefId == vendInvoiceInfoLine.TableRefId;

            this.logLineAutomationMatchingResults(invoiceLineForInvoiceRanMatching, documentMatchingEvent);
            this.logHeaderAutomationMatchingResults(invoiceLineForInvoiceRanMatching, _invoicesRanMatching, documentMatchingEvent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logLineAutomationMatchingResults</Name>
				<Source><![CDATA[
    private void logLineAutomationMatchingResults(
        VendInvoiceLineMatchingTmp _invoiceLineForInvoiceRanMatching,
        DocumentEvent _documentMatchingEvent)
    {
        // Logs automation matching of vendor invoices lines to product receipts results.
        VendInvoiceLineMatchingTmp invoiceLineNotApplicableMatching = this.logNotApplicableLineAutomationMatchingResults(_invoiceLineForInvoiceRanMatching);

        VendInvoiceLineMatchingTmp invoiceLineApplicableMatching;

        insert_recordset invoiceLineApplicableMatching (RefRecId, ParmId, TableRefId, ReceiveNow)
            select RefRecId, ParmId, TableRefId, ReceiveNow from _invoiceLineForInvoiceRanMatching
                notexists join invoiceLineNotApplicableMatching
                    where invoiceLineNotApplicableMatching.RefRecId == _invoiceLineForInvoiceRanMatching.RefRecId;
        
        select firstonly RecId from invoiceLineApplicableMatching;

        if (invoiceLineApplicableMatching.RecId)
        {
            VendInvoiceInfoSubLineSumAll vendInvoiceInfoSubLineSumAll;
            
            VendInvoiceLineMatchingTmp invoiceLinesFullyMatched;

            insert_recordset invoiceLinesFullyMatched (RefRecId)
                select RefRecId from invoiceLineApplicableMatching
                    join vendInvoiceInfoSubLineSumAll
                        where vendInvoiceInfoSubLineSumAll.LineRefRecId == invoiceLineApplicableMatching.RefRecId
                            && vendInvoiceInfoSubLineSumAll.SumOfReceiveNow == invoiceLineApplicableMatching.ReceiveNow;
            
            select firstonly RecId from invoiceLinesFullyMatched;

            if (invoiceLinesFullyMatched.RecId)
            {
                delete_from invoiceLineApplicableMatching
                    exists join invoiceLinesFullyMatched
                        where invoiceLinesFullyMatched.RefRecId == invoiceLineApplicableMatching.RefRecId;

                this.logCompletedLineAutomationMatchingResults(invoiceLinesFullyMatched, _documentMatchingEvent);
            }
            
            this.logNotCompletedLineAutomationMatchingResults(invoiceLineApplicableMatching, _documentMatchingEvent);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCompletedLineAutomationMatchingResults</Name>
				<Source><![CDATA[
    private void logCompletedLineAutomationMatchingResults(
        VendInvoiceLineMatchingTmp _invoiceLinesFullyMatched,
        DocumentEvent _documentMatchingEvent)
    {
        // Logs automation matching results for completed invoice lines.
        DocumentEventLogTmp documentEventLogTmp = VendInvoiceAutomationMatchingLogHandler::collectRecentInvoiceLineAutomationHistory(_invoiceLinesFullyMatched, _documentMatchingEvent);
        
        DocumentEventLog documentEventLog;

        delete_from _invoiceLinesFullyMatched
            exists join documentEventLog
                where documentEventLog.SourceTableId == tableNum(VendInvoiceInfoLine)
                    && documentEventLog.SourceRecId == _invoiceLinesFullyMatched.RefRecId
                    && documentEventLog.DocumentEvent == _documentMatchingEvent.RecId
                    && documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed
            exists join documentEventLogTmp
                    where documentEventLogTmp.DocumentEventLog == documentEventLog.RecId;

        matchingLogger.writeLineMatchingResultToInvoiceDocumentHistory(
            _invoiceLinesFullyMatched,
            VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logNotCompletedLineAutomationMatchingResults</Name>
				<Source><![CDATA[
    private void logNotCompletedLineAutomationMatchingResults(
        VendInvoiceLineMatchingTmp _invoiceLinesNotFullyMatched,
        DocumentEvent _documentMatchingEvent)
    {
        // Logs automation matching results for not completed invoice lines.
        select firstonly RecId from _invoiceLinesNotFullyMatched;

        if (_invoiceLinesNotFullyMatched.RecId)
        {
            VendParameters vendParameters = VendParameters::find();

            if (vendParameters.AutomationProductReceiptMatchingMaxAttempts == 0)
            {
                matchingLogger.writeLineMatchingResultToInvoiceDocumentHistory(
                    _invoiceLinesNotFullyMatched,
                    VendInvoiceMatchProductReceiptToInvoiceLineEvent::Waiting);
            }
            else
            {
                DocumentEventLog documentEventLog;
                VendInvoiceLineMatchingTmp collectInvoiceLinesRetryMatching, invoiceLinesRetryMatchWaiting;
                DocumentEventLogTmp documentEventLogTmp = VendInvoiceAutomationMatchingLogHandler::collectRecentInvoiceLineFailedAutomationHistory(_invoiceLinesNotFullyMatched, _documentMatchingEvent);

                // Get all the invoices that are resubmitted to matching after recent 'Failed' state'
                // and resetting the number of attempts.
                insert_recordset collectInvoiceLinesRetryMatching(RefRecId, AutomationHistoryCount)
                    select RefRecId from _invoiceLinesNotFullyMatched
                        join Sequence from documentEventLog
                            where documentEventLog.SourceRecId == _invoiceLinesNotFullyMatched.RefRecId
                                && documentEventLog.SourceTableId == tableNum(VendInvoiceInfoLine)
                                && documentEventLog.DocumentEvent == _documentMatchingEvent.RecId
                        exists join documentEventLogTmp
                            where documentEventLogTmp.DocumentEventLog == documentEventLog.RecId;
                
                // Get the count of automation history records for this failed invoice
                // after resetting the number of attempts.
                insert_recordset invoiceLinesRetryMatchWaiting(RefRecId, AutomationHistoryCount)
                    select RefRecId from collectInvoiceLinesRetryMatching
                        outer join count(SourceRecId) from documentEventLog
                        group by collectInvoiceLinesRetryMatching.RefRecId, documentEventLog.SourceRecId
                            where documentEventLog.SourceRecId == collectInvoiceLinesRetryMatching.RefRecId
                                && documentEventLog.SourceTableId == tableNum(VendInvoiceInfoLine)
                                && documentEventLog.DocumentEvent == _documentMatchingEvent.RecId
                                && documentEventLog.Sequence > collectInvoiceLinesRetryMatching.AutomationHistoryCount
                                && documentEventLog.ExecutionId != emptyGuid();

                VendInvoiceLineMatchingTmp invoiceLinesFirstRunMatchingWaiting;

                // Get all the invoices that are running matching for the first time
                insert_recordset invoiceLinesFirstRunMatchingWaiting(RefRecId, AutomationHistoryCount)
                    select RefRecId from _invoiceLinesNotFullyMatched
                        outer join count(SourceRecId) from documentEventLog
                        group by _invoiceLinesNotFullyMatched.RefRecId, documentEventLog.SourceRecId
                            where documentEventLog.SourceRecId == _invoiceLinesNotFullyMatched.RefRecId
                                && documentEventLog.SourceTableId == tableNum(VendInvoiceInfoLine)
                                && documentEventLog.DocumentEvent == _documentMatchingEvent.RecId
                                && documentEventLog.ExecutionId != emptyGuid()
                        notexists join collectInvoiceLinesRetryMatching
                            where collectInvoiceLinesRetryMatching.RefRecId == _invoiceLinesNotFullyMatched.RefRecId;
                
                VendInvoiceLineMatchingTmp invoiceLinesFailedMatch;
                
                int lastMatchAttempt = vendParameters.AutomationProductReceiptMatchingMaxAttempts - 1;

                insert_recordset invoiceLinesFailedMatch(RefRecId)
                    select RefRecId from invoiceLinesFirstRunMatchingWaiting
                        where invoiceLinesFirstRunMatchingWaiting.AutomationHistoryCount >= lastMatchAttempt;

                insert_recordset invoiceLinesFailedMatch (RefRecId)
                    select RefRecId from invoiceLinesRetryMatchWaiting
                        where invoiceLinesRetryMatchWaiting.AutomationHistoryCount >= lastMatchAttempt;
                
                matchingLogger.writeLineMatchingResultToInvoiceDocumentHistory(
                    invoiceLinesFailedMatch,
                    VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed);
                
                VendInvoiceLineMatchingTmp invoiceLinesWaitingMatch;

                insert_recordset invoiceLinesWaitingMatch (RefRecId)
                    select RefRecId from invoiceLinesFirstRunMatchingWaiting
                        where invoiceLinesFirstRunMatchingWaiting.AutomationHistoryCount < lastMatchAttempt;

                insert_recordset invoiceLinesWaitingMatch (RefRecId)
                    select RefRecId from invoiceLinesRetryMatchWaiting
                        where invoiceLinesRetryMatchWaiting.AutomationHistoryCount < lastMatchAttempt;
                
                matchingLogger.writeLineMatchingResultToInvoiceDocumentHistory(
                    invoiceLinesWaitingMatch,
                    VendInvoiceMatchProductReceiptToInvoiceLineEvent::Waiting);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logNotApplicableLineAutomationMatchingResults</Name>
				<Source><![CDATA[
    private VendInvoiceLineMatchingTmp logNotApplicableLineAutomationMatchingResults(VendInvoiceLineMatchingTmp _invoiceLineForInvoiceRanMatching)
    {
        // Logs automation matching results for not applicable invoice lines.
        VendInvoiceLineMatchingTmp invoiceLineNotApplicableMatching;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        PurchLine purchLine;

        // Invoice lines with no reference to purchase order lines.
        insert_recordset invoiceLineNotApplicableMatching (RefRecId)
            select RecId from vendInvoiceInfoLine
                exists join _invoiceLineForInvoiceRanMatching
                    where _invoiceLineForInvoiceRanMatching.RefRecId == vendInvoiceInfoLine.RecId
                        && vendInvoiceInfoLine.PurchLineRecId == 0;
        
        // Invoice lines that does not have three way matching policy.
        insert_recordset invoiceLineNotApplicableMatching (RefRecId)
            select RecId from vendInvoiceInfoLine
                exists join _invoiceLineForInvoiceRanMatching
                    where _invoiceLineForInvoiceRanMatching.RefRecId == vendInvoiceInfoLine.RecId
                exists join purchLine
                    where purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
                        && purchLine.MatchingPolicy != PurchMatchingPolicyOption::ThreeWayMatch;

        matchingLogger.writeLineMatchingResultToInvoiceDocumentHistory(invoiceLineNotApplicableMatching, VendInvoiceMatchProductReceiptToInvoiceLineEvent::NotApplicable);
        
        return invoiceLineNotApplicableMatching;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logHeaderAutomationMatchingResults</Name>
				<Source><![CDATA[
    private void logHeaderAutomationMatchingResults(
        VendInvoiceLineMatchingTmp _invoiceLineForInvoiceRanMatching,
        VendInvoiceAutomationInvoiceTmp _invoicesRanMatching,
        DocumentEvent _documentMatchingEvent)
    {
        // Logs automation matching results for invoices.
        DocumentEventLogTmp documentEventLogTmp = VendInvoiceAutomationMatchingLogHandler::collectRecentInvoiceLineAutomationHistory(_invoiceLineForInvoiceRanMatching, _documentMatchingEvent);
        
        DocumentEventLog documentEventLog;
        VendInvoiceAutomationInvoiceTmp invoicesFailedMatching;
        insert_recordset invoicesFailedMatching (VendInvoiceRecId, VendInvoiceDataAreaId, VendInvoiceNum, VendInvoiceParmId, VendInvoiceTableRefId)
            select VendInvoiceRecId, VendInvoiceDataAreaId, VendInvoiceNum, VendInvoiceParmId, VendInvoiceTableRefId from _invoicesRanMatching
                exists join _invoiceLineForInvoiceRanMatching
                    where _invoiceLineForInvoiceRanMatching.ParmId == _invoicesRanMatching.VendInvoiceParmId
                        && _invoiceLineForInvoiceRanMatching.TableRefId == _invoicesRanMatching.VendInvoiceTableRefId
                exists join documentEventLog
                    order by documentEventLog.Sequence desc
                    where documentEventLog.SourceTableId == tableNum(VendInvoiceInfoLine)
                        && documentEventLog.SourceRecId == _invoiceLineForInvoiceRanMatching.RefRecId
                        && documentEventLog.DocumentEvent == _documentMatchingEvent.RecId
                        && documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed
                exists join documentEventLogTmp
                    where documentEventLogTmp.DocumentEventLog == documentEventLog.RecId;
        
        select firstonly RecId from invoicesFailedMatching;

        if (invoicesFailedMatching.RecId)
        {
            this.logFailedHeaderAutomationMatchingResults(invoicesFailedMatching, _documentMatchingEvent);

            delete_from _invoicesRanMatching
                exists join invoicesFailedMatching
                    where invoicesFailedMatching.VendInvoiceRecId == _invoicesRanMatching.VendInvoiceRecId;
        }
        
        VendInvoiceAutomationInvoiceTmp invoicesWaitingMatching;

        insert_recordset invoicesWaitingMatching (VendInvoiceRecId, VendInvoiceDataAreaId, VendInvoiceNum, VendInvoiceParmId, VendInvoiceTableRefId)
           select VendInvoiceRecId, VendInvoiceDataAreaId, VendInvoiceNum, VendInvoiceParmId, VendInvoiceTableRefId from _invoicesRanMatching
                exists join _invoiceLineForInvoiceRanMatching
                    where _invoiceLineForInvoiceRanMatching.ParmId == _invoicesRanMatching.VendInvoiceParmId
                        && _invoiceLineForInvoiceRanMatching.TableRefId == _invoicesRanMatching.VendInvoiceTableRefId
                exists join documentEventLog
                    order by documentEventLog.Sequence desc
                    where documentEventLog.SourceTableId == tableNum(VendInvoiceInfoLine)
                        && documentEventLog.SourceRecId == _invoiceLineForInvoiceRanMatching.RefRecId
                        && documentEventLog.DocumentEvent == _documentMatchingEvent.RecId
                        && documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Waiting
                exists join documentEventLogTmp
                    where documentEventLogTmp.DocumentEventLog == documentEventLog.RecId;
        
        select firstonly RecId from invoicesWaitingMatching;

        if (invoicesWaitingMatching.RecId)
        {
            this.logWaitingHeaderAutomationMatchingResults(invoicesWaitingMatching, _documentMatchingEvent);

            delete_from _invoicesRanMatching
                exists join invoicesWaitingMatching
                    where invoicesWaitingMatching.VendInvoiceRecId == _invoicesRanMatching.VendInvoiceRecId;
        }

        this.logCompletedHeaderAutomationMatchingResults(_invoicesRanMatching, _documentMatchingEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCompletedHeaderAutomationMatchingResults</Name>
				<Source><![CDATA[
    private void logCompletedHeaderAutomationMatchingResults(
        VendInvoiceAutomationInvoiceTmp _invoicesCompletedMatched,
        DocumentEvent _documentMatchingEvent)
    {
        // Logs automation matching results for completed invoices.
        this.handleApplicableHeaderMatchingLogs(
            _invoicesCompletedMatched,
            VendInvoiceMatchProductReceiptToInvoiceLineEvent::Completed,
            _documentMatchingEvent);

        select firstonly RecId from _invoicesCompletedMatched;
        VendParameters vendParameters = VendParameters::find();

        if (vendParameters.AutomationWorkflowSubmission == NoYes::No && VendInvoiceExcludeCompletedWithAutoSubmissionDisabledFlight::instance().isEnabled())
        {
            if (_invoicesCompletedMatched.RecId)
            {
                VendInvoiceAutomationInvoiceTmp invoiceTmp;
                invoiceTmp.linkPhysicalTableInstance(_invoicesCompletedMatched);

                VendInvoiceAutomationStateManagement::pauseInvoicesInAutomation(invoiceTmp);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWaitingHeaderAutomationMatchingResults</Name>
				<Source><![CDATA[
    private void logWaitingHeaderAutomationMatchingResults(
        VendInvoiceAutomationInvoiceTmp _invoicesWaitingMatch,
        DocumentEvent _documentMatchingEvent)
    {
        // Logs automation matching results for waiting invoices.
        this.handleApplicableHeaderMatchingLogs(
            _invoicesWaitingMatch,
            VendInvoiceMatchProductReceiptToInvoiceLineEvent::Waiting,
            _documentMatchingEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logFailedHeaderAutomationMatchingResults</Name>
				<Source><![CDATA[
    private void logFailedHeaderAutomationMatchingResults(
        VendInvoiceAutomationInvoiceTmp _invoicesFailedMatch,
        DocumentEvent _documentMatchingEvent)
    {
        // Logs automation matching results for failed invoices.
        this.handleApplicableHeaderMatchingLogs(
            _invoicesFailedMatch,
            VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed,
            _documentMatchingEvent);
        
        select firstonly RecId from _invoicesFailedMatch;
        VendParameters vendParameters = VendParameters::find();

        if (VendInvoiceExcludeFailedWithAutoSubmissionDisabledFlight::instance().isEnabled())
        {
            if (_invoicesFailedMatch.RecId)
            {
                VendInvoiceAutomationInvoiceTmp invoiceTmp;
                invoiceTmp.linkPhysicalTableInstance(_invoicesFailedMatch);

                if (vendParameters.AutomationWorkflowSubmission == NoYes::No
                    || (vendParameters.AutomationWorkflowSubmission == NoYes::Yes && vendParameters.AutomationMatchingPriorToWorkflow == NoYes::Yes)
                    || vendParameters.AutomationProductReceiptMatching == NoYes::No)
                {
                    VendInvoiceAutomationStateManagement::pauseInvoicesInAutomation(invoiceTmp);
                    matchingLogger.writeAutomationPausedDueToFailedMatchingToDocumentHistory(_invoicesFailedMatch);
                }
            }
        }
        else {
            if (_invoicesFailedMatch.RecId && vendParameters.AutomationWorkflowSubmission == NoYes::Yes)
            {
                VendInvoiceAutomationInvoiceTmp invoiceTmp;
                invoiceTmp.linkPhysicalTableInstance(_invoicesFailedMatch);
            
                if (!(vendParameters.AutomationMatchingPriorToWorkflow == NoYes::No
                    && vendParameters.AutomationProductReceiptMatching == NoYes::Yes))
                {
                    VendInvoiceAutomationStateManagement::pauseInvoicesInAutomation(invoiceTmp);
                    matchingLogger.writeAutomationPausedDueToFailedMatchingToDocumentHistory(_invoicesFailedMatch);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logNotApplicableHeaderAutomationMatchingResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs automation matching results for not applicable invoices.
    /// </summary>
    /// <param name="_invoicesNotApplicableForMatching">
    /// List of invoices not applicable for matching.
    /// </param>
    internal void logNotApplicableHeaderAutomationMatchingResults(VendInvoiceAutomationInvoiceTmp _invoicesNotApplicableForMatching)
    {
        matchingLogger.writeHeaderMatchingResultToInvoiceDocumentHistory(_invoicesNotApplicableForMatching, VendInvoiceMatchProductReceiptToInvoiceLineEvent::NotApplicable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleApplicableHeaderMatchingLogs</Name>
				<Source><![CDATA[
    private void handleApplicableHeaderMatchingLogs(
        VendInvoiceAutomationInvoiceTmp _invoicesApplicableMatching,
        VendInvoiceMatchProductReceiptToInvoiceLineEvent _matchStatus,
        DocumentEvent _documentMatchingEvent)
    {
        // Logs automation matching results for applicable invoices.
        matchingLogger.writeHeaderMatchingResultToInvoiceDocumentHistory(_invoicesApplicableMatching, _matchStatus);
        matchingLogger.writeMatchingResultToProcessAutomationLogs(_invoicesApplicableMatching, _matchStatus, _documentMatchingEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateNotApplicableMatchingInvoiceLogs</Name>
				<Source><![CDATA[
    internal void generateNotApplicableMatchingInvoiceLogs(
        VendInvoiceAutomationInvoiceTmp _invoicesNotApplicableForMatching,
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForMatching)
    {
        delete_from _invoicesNotApplicableForMatching
            exists join _invoicesEligibleForMatching
                where _invoicesEligibleForMatching.VendInvoiceRecId == _invoicesNotApplicableForMatching.VendInvoiceRecId;
 
        DocumentEvent matchingEvent = DocumentEvent::findByEventType(enumNum(VendInvoiceMatchProductReceiptToInvoiceLineEvent));
        DocumentEventLogTmp documentEventLogTmp = VendInvoiceAutomationMatchingLogHandler::collectRecentInvoiceAutomationHistory(_invoicesNotApplicableForMatching, matchingEvent);
        
        // Do not log if the recent invoice document event history has record with 'Not Applicable' match status.
        DocumentEventLog documentEventLog;

        delete_from _invoicesNotApplicableForMatching
            exists join documentEventLog
                where documentEventLog.SourceTableId == tableNum(VendInvoiceInfoTable)
                    && documentEventLog.SourceRecId == _invoicesNotApplicableForMatching.VendInvoiceRecId
                    && documentEventLog.DocumentEvent == matchingEvent.RecId
                    && documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::NotApplicable
            exists join documentEventLogTmp
                    where documentEventLogTmp.DocumentEventLog == documentEventLog.RecId;

        this.logNotApplicableHeaderAutomationMatchingResults(_invoicesNotApplicableForMatching);
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectRecentInvoiceAutomationHistory</Name>
				<Source><![CDATA[
    internal static DocumentEventLogTmp collectRecentInvoiceAutomationHistory(
        VendInvoiceAutomationInvoiceTmp _invoiceRanMatching,
        DocumentEvent _documentMatchingEvent)
    {
        DocumentEventLog documentEventLog;
        DocumentEventSequenceTmp documentEventSequenceTmp;

        insert_recordset documentEventSequenceTmp(SourceRecId, SourceTableId, CurrentSequence)
            select SourceRecId, SourceTableId, maxof(Sequence) from documentEventLog
                group by documentEventLog.SourceRecId, documentEventLog.SourceTableId
            exists join _invoiceRanMatching
                where _invoiceRanMatching.VendInvoiceRecId == documentEventLog.SourceRecId
                    && documentEventLog.SourceTableId == tableNum(VendInvoiceInfoTable)
                    && documentEventLog.DocumentEvent == _documentMatchingEvent.RecId;
        
        DocumentEventLogTmp invoiceRecentDocumentEventEntry = VendInvoiceAutomationMatchingLogHandler::collectDocumentEventEntries(documentEventSequenceTmp);

        return invoiceRecentDocumentEventEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectRecentInvoiceLineAutomationHistory</Name>
				<Source><![CDATA[
    internal static DocumentEventLogTmp collectRecentInvoiceLineAutomationHistory(
        VendInvoiceLineMatchingTmp _invoiceLinesRanMatching,
        DocumentEvent _documentMatchingEvent)
    {
        DocumentEventLog documentEventLog;
        DocumentEventSequenceTmp documentEventSequenceTmp;

        insert_recordset documentEventSequenceTmp(SourceRecId, SourceTableId, CurrentSequence)
            select SourceRecId, SourceTableId, maxof(Sequence) from documentEventLog
                group by documentEventLog.SourceRecId, documentEventLog.SourceTableId
            exists join _invoiceLinesRanMatching
                where _invoiceLinesRanMatching.RefRecId == documentEventLog.SourceRecId
                    && documentEventLog.SourceTableId == tableNum(VendInvoiceInfoLine)
                    && documentEventLog.DocumentEvent == _documentMatchingEvent.RecId;
        
        DocumentEventLogTmp invoiceLineRecentDocumentEventEntry = VendInvoiceAutomationMatchingLogHandler::collectDocumentEventEntries(documentEventSequenceTmp);

        return invoiceLineRecentDocumentEventEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectRecentInvoiceLineFailedAutomationHistory</Name>
				<Source><![CDATA[
    private static DocumentEventLogTmp collectRecentInvoiceLineFailedAutomationHistory(
        VendInvoiceLineMatchingTmp _invoiceLinesRanMatching,
        DocumentEvent _documentMatchingEvent)
    {
        DocumentEventLog documentEventLog;
        DocumentEventSequenceTmp documentEventSequenceTmp;

        insert_recordset documentEventSequenceTmp(SourceRecId, SourceTableId, CurrentSequence)
            select SourceRecId, SourceTableId, maxof(Sequence) from documentEventLog
                group by documentEventLog.SourceRecId, documentEventLog.SourceTableId
            exists join _invoiceLinesRanMatching
                where _invoiceLinesRanMatching.RefRecId == documentEventLog.SourceRecId
                    && documentEventLog.SourceTableId == tableNum(VendInvoiceInfoLine)
                    && documentEventLog.DocumentEvent == _documentMatchingEvent.RecId
                    && documentEventLog.EventEnumValue == VendInvoiceMatchProductReceiptToInvoiceLineEvent::Failed
                    && documentEventLog.ExecutionId != emptyGuid();
        
        DocumentEventLogTmp invoiceLineRecentFailedDocumentEventEntry = VendInvoiceAutomationMatchingLogHandler::collectDocumentEventEntries(documentEventSequenceTmp);
            
        return invoiceLineRecentFailedDocumentEventEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectDocumentEventEntries</Name>
				<Source><![CDATA[
    private static DocumentEventLogTmp collectDocumentEventEntries(DocumentEventSequenceTmp _documentEventSequenceTmp)
    {
        DocumentEventLog documentEventLog;
        DocumentEventLogTmp documentEventLogTmp;

        insert_recordset documentEventLogTmp(DocumentEventLog, MaxSequence)
            select RecId, Sequence from documentEventLog
                exists join _documentEventSequenceTmp
                    where _documentEventSequenceTmp.SourceTableId == documentEventLog.SourceTableId
                        && _documentEventSequenceTmp.SourceRecId == documentEventLog.SourceRecId
                        && _documentEventSequenceTmp.CurrentSequence == documentEventLog.Sequence;

        return documentEventLogTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>