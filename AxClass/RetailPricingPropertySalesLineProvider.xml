<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPropertySalesLineProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using System.Collections;
using CrtPricingPropertyDefinition = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyDefinition;
using CrtSalesTransaction = Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction;
using CrtSalesLine = Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine;
using CrtProductVariant = Microsoft.Dynamics.Commerce.Runtime.DataModel.ProductVariant;
using CrtPricingPropertyValueContext = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyValueContext;
using CrtPricingPredefinedProperty = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPredefinedProperty;
using CrtPricingPropertyLevel = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyLevel;
using CrtPricingPropertyType = Microsoft.Dynamics.Commerce.Runtime.DataModel.PricingPropertyType;

/// <summary>
/// Property providers for delivery mode, site, warehouse, unit, catalog, size, style, color, config, etc.
/// </summary>
[ExportAttribute(identifierStr(Dynamics.AX.Application.RetailPricingPropertyValueProviderBase))]
internal final class RetailPricingPropertySalesLineProvider extends RetailPricingPropertyValueProviderBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>IsPropertySupported</Name>
				<Source><![CDATA[
    public boolean IsPropertySupported(CrtPricingPropertyDefinition definition)
    {
        return definition.get_PropertyLevel() == CrtPricingPropertyLevel::Line
            && definition.get_PropertyType() == CrtPricingPropertyType::Predefined
            && (
                definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::DeliveryMode
                || definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Site
                || definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Warehouse
                || definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::UnitOfMeasure
                || definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Catalog
                || definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Style
                || definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Size
                || definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Color
                || definition.get_PredefinedProperty() == CrtPricingPredefinedProperty::Configuration
            );
    }

]]></Source>
			</Method>
			<Method>
				<Name>Resolve</Name>
				<Source><![CDATA[
    public void Resolve(CrtPricingPropertyValueContext valueContext, CrtSalesTransaction salesTransaction)
    {
        IEnumerator enumerator = valueContext.get_PricingProperties().GetEnumerator();

        CrtPricingPropertyDefinition deliveryModeProperty;
        CrtPricingPropertyDefinition siteProperty;
        CrtPricingPropertyDefinition warehouseProperty;
        CrtPricingPropertyDefinition uomProperty;
        CrtPricingPropertyDefinition catalogProperty;
        CrtPricingPropertyDefinition styleProperty;
        CrtPricingPropertyDefinition sizeProperty;
        CrtPricingPropertyDefinition colorProperty;
        CrtPricingPropertyDefinition configProperty;

        while (enumerator.MoveNext())
        {
            CrtPricingPropertyDefinition crtDefinition = enumerator.get_Current();
            if (crtDefinition.PredefinedProperty == CrtPricingPredefinedProperty::DeliveryMode)
            {
                deliveryModeProperty = crtDefinition;
            }
            else if (crtDefinition.PredefinedProperty == CrtPricingPredefinedProperty::Site)
            {
                siteProperty = crtDefinition;
            }
            else if (crtDefinition.PredefinedProperty == CrtPricingPredefinedProperty::Warehouse)
            {
                warehouseProperty = crtDefinition;
            }
            else if (crtDefinition.PredefinedProperty == CrtPricingPredefinedProperty::UnitOfMeasure)
            {
                uomProperty = crtDefinition;
            }
            else if (crtDefinition.PredefinedProperty == CrtPricingPredefinedProperty::Catalog)
            {
                catalogProperty = crtDefinition;
            }
            else if (crtDefinition.PredefinedProperty == CrtPricingPredefinedProperty::Style)
            {
                styleProperty = crtDefinition;
            }
            else if (crtDefinition.PredefinedProperty == CrtPricingPredefinedProperty::Size)
            {
                sizeProperty = crtDefinition;
            }
            else if (crtDefinition.PredefinedProperty == CrtPricingPredefinedProperty::Color)
            {
                colorProperty = crtDefinition;
            }
            else if (crtDefinition.PredefinedProperty == CrtPricingPredefinedProperty::Configuration)
            {
                configProperty = crtDefinition;
            }
        }

        IEnumerator salesLineEnumerator = salesTransaction.get_ActiveSalesLines().GetEnumerator();
        while (salesLineEnumerator.MoveNext())
        {
            CrtSalesLine salesLine = salesLineEnumerator.Current;
            System.Decimal lineNumber = salesLine.get_LineNumber();
            if (deliveryModeProperty && salesLine.get_DeliveryMode() != null)
            {
                System.String deliveryMode = salesLine.get_DeliveryMode();
                valueContext.AddLineValue(deliveryModeProperty, lineNumber, deliveryMode);
            }
            else if (siteProperty && salesLine.get_InventorySiteId() != null)
            {
                System.String inventorySiteId = salesLine.get_InventorySiteId();
                valueContext.AddLineValue(siteProperty, lineNumber, inventorySiteId);
            }
            else if (warehouseProperty && salesLine.get_InventoryLocationId() != null)
            {
                System.String inventoryLocationId = salesLine.get_InventoryLocationId();
                valueContext.AddLineValue(warehouseProperty, lineNumber, inventoryLocationId);
            }
            else if (uomProperty && salesLine.get_UnitOfMeasureSymbol() != null)
            {
                System.String unitOfMeasure = salesLine.get_UnitOfMeasureSymbol();
                valueContext.AddLineValue(uomProperty, lineNumber, unitOfMeasure);
            }
            else if (catalogProperty && salesLine.get_CatalogId() > 0)
            {
                System.Int64 catalogId = salesLine.get_CatalogId();
                valueContext.AddLineValue(catalogProperty, lineNumber, catalogId);
            }
            if (salesLine.get_Variant() && !System.String::IsNullOrEmpty(salesLine.get_Variant().get_VariantId()))
            {
                CrtProductVariant variant = salesLine.get_Variant();
                if (styleProperty && variant.get_StyleId() != null)
                {
                    System.String style = variant.get_StyleId();
                    valueContext.AddLineValue(styleProperty, lineNumber, style);
                }
                else if (sizeProperty && variant.get_SizeId() != null)
                {
                    System.String size = variant.get_SizeId();
                    valueContext.AddLineValue(sizeProperty, lineNumber, size);
                }
                else if (colorProperty && variant.get_ColorId() != null)
                {
                    System.String color = variant.get_ColorId();
                    valueContext.AddLineValue(colorProperty, lineNumber, color);
                }
                else if (configProperty && variant.get_ConfigId() != null)
                {
                    System.String configuration = variant.get_ConfigId();
                    valueContext.AddLineValue(configProperty, lineNumber, configuration);
                }
            }
        }

        if (deliveryModeProperty)
        {
            valueContext.Resolve(deliveryModeProperty);
        }

        if (siteProperty)
        {
            valueContext.Resolve(siteProperty);
        }

        if (warehouseProperty)
        {
            valueContext.Resolve(warehouseProperty);
        }

        if (uomProperty)
        {
            valueContext.Resolve(uomProperty);
        }

        if (catalogProperty)
        {
            valueContext.Resolve(catalogProperty);
        }

        if (styleProperty)
        {
            valueContext.Resolve(styleProperty);
        }

        if (sizeProperty)
        {
            valueContext.Resolve(sizeProperty);
        }

        if (colorProperty)
        {
            valueContext.Resolve(colorProperty);
        }

        if (configProperty)
        {
            valueContext.Resolve(configProperty);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>