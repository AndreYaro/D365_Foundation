<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmPositionForecastCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>HcmPositionForecastCopy</c> class controls the bulk creation of position forecast data based upon a source position.
/// </summary>
class HcmPositionForecastCopy extends HcmPositionCopyBase implements SysPackable
{
    HcmPositionForecastDetail   hcmPositionForecastDetail;
    HcmPositionForecastDetailV2 hcmPositionForecastDetailV2;
    HcmPositionForecastRecId    destinationPositionForecastRecId;

    HcmPositionForecastScenarioRecId    destinationPositionForecastScenarioRecId;
    HcmPositionForecastScenario         hcmPositionForecastScenario;

    #define.currentversion(2)
    #localmacro.currentlist
    position,
    positionNumberofCopies,
    positionNumMask,
    startValue,
    interval,
    activationDate,
    retirementDate,
    copyRelationships,
    copyDimensions,
    copyLaborUnion,
    copyPayroll,
    runResult,
    formUseNumSeq,
    positionForecastRecId,
    hcmPositionForecastScenario,
    asOfDateTime
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the budget related data from the source position to destination position record.
    /// </summary>
    private void copyBudget()
    {
        HcmPositionForecastBudgetAcctLine       hcmPositionForecastBudgetAccountLine;
        HcmPositionForecastBudgetAcctLine       hcmPositionForecastBudgetAccountLineCopy;
        HcmPositionForecastScenarioRecId        hcmDestPositionForecastScenarioRecId;
        HcmPositionForecastScenario             positionForecastScenarioDest;
        HcmPositionForecastCalcProcessLauncher  positionForecastLauncher;
        HcmPositionForecastScenario             positionForecastScenarioOrig;
        ValidFromDate                           newPositionForecastStartDate, newPositionForecastEndDate;
        ValidFromDateTime                       newPositionForecastStartDateTime, newPositionForecastEndDateTime;
        HcmPositionForecastScenarioRecId        fromPositionForecastScenarioRecId = this.parmPositionForecastScenario().RecId;;
        hcmDestPositionForecastScenarioRecId    =   this.parmDestPositionForecastScenarioRecId();

        positionForecastScenarioDest         =   HcmPositionForecastScenario::find(hcmDestPositionForecastScenarioRecId, true );
        positionForecastScenarioOrig         =   HcmPositionForecastScenario::find(fromPositionForecastScenarioRecId);

        newPositionForecastStartDate = positionForecastScenarioDest.getUserTimeZoneActivationDate();
        newPositionForecastEndDate = positionForecastScenarioDest.getUserTimeZoneRetirementDate();
        newPositionForecastStartDateTime = positionForecastScenarioDest.ActivationDateTime;
        newPositionForecastEndDateTime = positionForecastScenarioDest.RetirementDateTime;

        ttsbegin;
        // Set new Forecast position with original dates first
        this.setPositionForecastScenarioDuration(positionForecastScenarioDest, positionForecastScenarioOrig.ActivationDateTime, positionForecastScenarioOrig.RetirementDateTime);

        insert_recordset hcmPositionForecastBudgetAccountLineCopy
            (
                AmountCur,
                BudgetAmountCur,
                BudgetPurposeTypeDetail,
                EffectiveDate,
                ExpirationDate,
                IsLineLockedForRecalculation,
                IsPercentageBased,
                IsPositionLineOverridden,
                IsSystemGenerated,
                LedgerDimension,
                LegalEntity,
                PercentageOfDefaultBasisAmount,
                PositionForecastScenario,
                CostLineSource,
                PositionForecastCompensationGrid
            )
            select
              AmountCur,
              BudgetAmountCur,
              BudgetPurposeTypeDetail,
              EffectiveDate,
              ExpirationDate,
              IsLineLockedForRecalculation,
              IsPercentageBased,
              IsPositionLineOverridden,
              IsSystemGenerated,
              LedgerDimension,
              LegalEntity,
              PercentageOfDefaultBasisAmount,
              hcmDestPositionForecastScenarioRecId,
              CostLineSource,
              PositionForecastCompensationGrid

            from hcmPositionForecastBudgetAccountLine
            where hcmPositionForecastBudgetAccountLine.PositionForecastScenario == fromPositionForecastScenarioRecId;

        // Adjust cost element dates based on new Forecast position dates
        HcmPositionForecastBudgetAcctLine::updatePositionBudgetCostElementDates(positionForecastScenarioDest.RecId,
                                                                                    newPositionForecastStartDate,
                                                                                    newPositionForecastEndDate);

        // Set new dates to Forecast position at last
        this.setPositionForecastScenarioDuration(positionForecastScenarioDest, newPositionForecastStartDateTime, newPositionForecastEndDateTime);

        // Calculate Budget amount for Forecast position
        positionForecastLauncher = HcmPositionForecastCalcProcessLauncher::newForecastCalculateSinglePosition(positionForecastScenarioDest);
        positionForecastLauncher.runPositionForecstCalculationProcess();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the position default dimension data from the source forecast position to destination
    /// forecast position record.
    /// </summary>
    private void copyDefaultDimension()
    {
        HcmPositionForecastDefaultDim  hcmPositionForecastDefaultDim;
        HcmPositionForecastDefaultDim  hcmPositionForecastDefaultDimCopy;

        while select hcmPositionForecastDefaultDim
            where hcmPositionForecastDefaultDim.PositionForecast == this.parmPositionForecastRecId()
        {
            buf2Buf(hcmPositionForecastDefaultDim, hcmPositionForecastDefaultDimCopy);
            hcmPositionForecastDefaultDimCopy.PositionForecast = this.parmDestinationPositionForecastRecId();
            hcmPositionForecastDefaultDimCopy.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFinancialDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the financial dimension related data from the source forecast position to destination
    /// forecast position record.
    /// </summary>
    private void copyFinancialDimensions()
    {
        this.copyDefaultDimension();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPositionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>HcmPositionDetail</c> table from the passed in parameters.
    /// </summary>
    /// <returns>
    /// true if the record creation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The <c>HcmPositionDetail</c> record is being created from the <c>HcmPositionForecastDetail</c>
    /// record.
    /// </remarks>
    protected boolean copyPositionDetail()
    {
        HcmPositionDetail  hcmPositionDetail;
        boolean            success = false;

        hcmPositionDetail.Position      = this.parmDestinationPositionRecId();
        if (BudgetLinkPositionToMultipleForecastDetailsFlight::instance().isEnabled())
        {
            hcmPositionDetail.CompLocation  = hcmPositionForecastDetailV2.CompLocation;
            hcmPositionDetail.Department    = hcmPositionForecastDetailV2.Department;
            hcmPositionDetail.Job           = hcmPositionForecastDetailV2.Job;
            hcmPositionDetail.PositionType  = hcmPositionForecastDetailV2.PositionType;
            hcmPositionDetail.Title         = hcmPositionForecastDetailV2.Title;
        }
        else
        {
            hcmPositionDetail.CompLocation  = hcmPositionForecastDetail.CompLocation;
            hcmPositionDetail.Department    = hcmPositionForecastDetail.Department;
            hcmPositionDetail.Job           = hcmPositionForecastDetail.Job;
            hcmPositionDetail.PositionType  = hcmPositionForecastDetail.PositionType;
            hcmPositionDetail.Title         = hcmPositionForecastDetail.Title;
        }
        hcmPositionDetail.Description   = "@GLS190451";
        hcmPositionDetail.ValidFrom     = validFrom;
        hcmPositionDetail.ValidTo       = validTo;
        hcmPositionDetail.AvailableForAssignment = hcmAvailableForAssignment;

        if (hcmPositionDetail.validateWrite())
        {
            hcmPositionDetail.write();
            success = true;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPositionDuration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>HcmPositionDuration</c> table from the passed in parameters.
    /// </summary>
    protected void copyPositionDuration()
    {
        HcmPositionDuration hcmPositionDuration;

        hcmPositionDuration.Position = this.parmDestinationPositionRecId();
        hcmPositionDuration.ValidFrom = activationDate;
        hcmPositionDuration.ValidTo = retirementDate;
        hcmPositionDuration.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPositionForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in the <c>HcmForecastPosition</c>, <c>HcmPositionForecastDetail</c>, and
    /// <c>HcmPositionForecastDuration</c> tables.
    /// </summary>
    /// <returns>
    /// true if record creation in the <c>HcmPositionForecastDetail</c> table was successful; otherwise,
    /// false.
    /// </returns>
    private boolean copyPositionForecast()
    {
        HcmPositionForecast    hcmPositionForecast;
        boolean                success = false;

        // create forecast position
        hcmPositionForecast.Position = this.parmDestinationPositionRecId();
        hcmPositionForecast.ForecastStatus = HcmPositionForecastStatus::Proposed;
        hcmPositionForecast.insert();

        this.parmDestinationPositionForecastRecId(hcmPositionForecast.RecId);

        if (this.copyPositionForecastDetail())
        {
            this.copyPositionForecastScenario();
            this.copyPositionForecastLastModified();
            success = this.copyPositionForecastDetailV2();
        }
        this.copyBudget();

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPositionForecastDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>HcmPositionForecastDetail</c> table from the passed in parameters.
    /// </summary>
    /// <returns>
    /// true if the record creation was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A redundant check on maximum number of positions for a given job is coded to check for concurrent
    /// processes trying to create positions.
    /// </remarks>
    private boolean copyPositionForecastDetail()
    {
        HcmPositionForecastDetail  hcmPositionForecastDetailCopy;
        boolean            success = false;

        buf2Buf(hcmPositionForecastDetail, hcmPositionForecastDetailCopy);
        hcmPositionForecastDetailCopy.PositionForecast = this.parmDestinationPositionForecastRecId();

        // If this validateWrite fails for one, it should fail for all the rest of positions
        if (hcmPositionForecastDetailCopy.validateWrite())
        {
            hcmPositionForecastDetailCopy.write();
            success = true;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPositionForecastDetailV2</Name>
				<Source><![CDATA[
    private boolean copyPositionForecastDetailV2()
    {
        HcmPositionForecastDetailV2 hcmPositionForecastDetailCopy;
        boolean success = false;

        buf2Buf(hcmPositionForecastDetailV2, hcmPositionForecastDetailCopy);
        hcmPositionForecastDetailCopy.PositionForecast = this.parmDestinationPositionForecastRecId();
        hcmPositionForecastDetailCopy.PositionForecastScenario= this.parmDestPositionForecastScenarioRecId();

        // If this validateWrite fails for one, it should fail for all the rest of positions
        if (hcmPositionForecastDetailCopy.validateWrite())
        {
            hcmPositionForecastDetailCopy.write();
            success = true;
        }

        return success;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPositionForecastLastModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>HcmPositionForecastLastModified</c> table from the passed in parameters.
    /// </summary>
    private void copyPositionForecastLastModified()
    {
        HcmPositionForecastLastModified hcmPositionForecastLastModified;

        hcmPositionForecastLastModified.PositionForecastScenario = this.parmDestPositionForecastScenarioRecId();
        hcmPositionForecastLastModified.Dummy = NoYes::No;
        hcmPositionForecastLastModified.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPositionForecastScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>HcmPositionForecastScenario</c> table from the passed in parameters.
    /// </summary>
    protected void copyPositionForecastScenario()
    {
        HcmPositionForecastScenario hcmPositionForecastScenarioCopy;

        buf2Buf(hcmPositionForecastScenario, hcmPositionForecastScenarioCopy);

        hcmPositionForecastScenarioCopy.PositionForecast = this.parmDestinationPositionForecastRecId();
        hcmPositionForecastScenarioCopy.ForecastScenario = this.parmPositionForecastScenario().ForecastScenario;
        hcmPositionForecastScenarioCopy.LegalEntity     = HcmForecastScenario::find(this.parmPositionForecastScenario().ForecastScenario).LegalEntity;
        hcmPositionForecastScenarioCopy.ActivationDateTime = activationDate;
        hcmPositionForecastScenarioCopy.RetirementDateTime = retirementDate;
        // The worker name field should not be copied to new forecast positions.
        hcmPositionForecastScenarioCopy.WorkerName = "";

        ttsbegin;
        hcmPositionForecastScenarioCopy.insert();

        HcmPositionForecastBudgetDefaultValue::createFromHcmPositionForecastScenario(hcmPositionForecastScenarioCopy.ForecastScenario, hcmPositionForecastScenarioCopy.PositionForecast);
        ttscommit;

        this.parmDestPositionForecastScenarioRecId(hcmPositionForecastScenarioCopy.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRelationships</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the reporting relationship related data from the source forecast position to destination
    /// forecast position record.
    /// </summary>
    private void copyRelationships()
    {
        HcmPositionForecastHierarchy  hcmPositionForecastHierarchy;
        HcmPositionForecastHierarchy  hcmPositionForecastHierarchyCopy;

        select firstonly hcmPositionForecastHierarchy
            where hcmPositionForecastHierarchy.PositionForecast == this.parmPositionForecastRecId();

        hcmPositionForecastHierarchyCopy.PositionHierarchyType = HcmPositionHierarchyType::lineHierarchyType();
        hcmPositionForecastHierarchyCopy.PositionForecast = this.parmDestinationPositionForecastRecId();
        if (copyRelationships)
        {
            hcmPositionForecastHierarchyCopy.ParentPosition = hcmPositionForecastHierarchy.ParentPosition;
        }

        hcmPositionForecastHierarchyCopy.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewPositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method creates new forecast positions from the selected forecast position.
    /// </summary>
    /// <remarks>
    ///  Copying a forecast involves two steps
    ///  <list type="number">
    ///   <item>
    ///   <description>Create skeleton position data.</description>
    ///   </item>
    ///   <item>
    ///   <description>Create forecast position.</description>
    ///   </item>
    ///  </list>
    /// </remarks>
    private void createNewPositions()
    {
        Counter                     idx;
        Counter                     idNumber;
        Counter                     idxPosition;
        container                   newPositionsCreated;
        boolean                     success;

        idNumber = startValue;

        hcmPositionForecastDetailV2 = HcmPositionForecastDetailV2::findByPositionForecastScenerio(this.parmPositionForecastScenario().RecId,this.parmPositionForecastRecId());
        hcmPositionForecastDetail = HcmPositionForecastDetail::findByPositionForecast(this.parmPositionForecastRecId());

        this.setEffectiveDates();
        hcmAvailableForAssignment = this.setAvailableForAssignment();

        if (!this.validatePositionForecast())
        {
            return;
        }

        for (idx = 1; idx <= positionNumberofCopies; idx++)
        {
            ttsbegin;

            // Create skeleton position
            this.parmDestinationPositionRecId(this.createCopyPositionPosId(idNumber));

            if (this.parmDestinationPositionRecId() != 0)
            {
                // Copy the position and position detail.
                success = this.copyPositionDetail();

                if (success)
                {
                    // Positions and details were copied successfully; copy the position durations
                    this.copyPositionDuration();

                    // copy forecast position
                    success = success && this.copyPositionForecast();

                    if (success)
                    {
                        // A relationship record is always created. Parent position is copied depending whether copy relationship checkbox was checked.
                        this.copyRelationships();

                        if (copyDimensions)
                        {
                            this.copyFinancialDimensions();
                        }
                    }
                }

                if (!success)
                {
                    // If there is an error anywhere in the copying process abort the current transaction and break execution from this iteration
                    ttsabort;
                    break;
                }
            }

            ttscommit;

            newPositionsCreated = conPoke(newPositionsCreated, idx, HcmPosition::find(this.parmDestinationPositionRecId()).PositionId);
            idNumber += interval;
        }

        idx = idx - 1;
        if ( idx != 0)
        {
            setPrefix(strFmt("@Budget:BudgetPlan_PositionForecasting_PositionForecast_CopyForecastPosition", idx, this.parmPosition()));
            for (idxPosition = 1; idxPosition <= idx; idxPosition++)
            {
                info(strFmt("@Budget:BudgetPlan_PositionForecasting_PositionForecast_NewPositionCreated", conPeek(newPositionsCreated, idxPosition)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initalize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs housekeeping, initializes class properties, and calls the run method.
    /// </summary>
    /// <param name="args">
    /// The <c>Args</c> object which contains metadata information from the calling menu item.
    /// </param>
    /// <returns>
    /// true if number sequence initialization was successful; otherwise, false.
    /// </returns>
    public boolean initalize(Args args)
    {
        boolean                          initSuccessful;
        HcmPositionForecastScenario      selectedHcmPositionForecastScenario;

        this.initParmNumberSequence();

        if (this.isInitParamNumberSeqSuccessful() && this.checkNumSeq())
        {
            selectedHcmPositionForecastScenario = args.record();

            // Make sure to get the latest information of Forecast position scenario
            hcmPositionForecastScenario = HcmPositionForecastScenario::find(selectedHcmPositionForecastScenario.RecId);

            this.parmPositionForecastScenario(hcmPositionForecastScenario);
            this.parmPositionForecastRecId(hcmPositionForecastScenario.PositionForecast);
            this.parmPosition(HcmPosition::find(HcmPositionForecast::find(hcmPositionForecastScenario.PositionForecast).Position).PositionId);
            initSuccessful = true;
        }
        else
        {
            initSuccessful = false;
            error("@SYS25038");
        }

        return initSuccessful;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastRecId</Name>
				<Source><![CDATA[
    public RecId parmPositionForecastRecId(RecId _positionForecastRecId = positionForecastRecId)
    {
        positionForecastRecId = _positionForecastRecId;
        return positionForecastRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestinationPositionForecastRecId</Name>
				<Source><![CDATA[
    protected final HcmPositionForecastRecId parmDestinationPositionForecastRecId(HcmPositionForecastRecId _destinationPositionForecastRecId = destinationPositionForecastRecId)
    {
        destinationPositionForecastRecId = _destinationPositionForecastRecId;
        return destinationPositionForecastRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDestPositionForecastScenarioRecId</Name>
				<Source><![CDATA[
    protected final HcmPositionForecastScenarioRecId parmDestPositionForecastScenarioRecId(HcmPositionForecastScenarioRecId _destinationPositionForecastScenarioRecId = destinationPositionForecastScenarioRecId)
    {
        destinationPositionForecastScenarioRecId = _destinationPositionForecastScenarioRecId;
        return destinationPositionForecastScenarioRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPositionForecastScenario</Name>
				<Source><![CDATA[
    public final HcmPositionForecastScenario parmPositionForecastScenario(HcmPositionForecastScenario _hcmPositionForecastScenario = hcmPositionForecastScenario)
    {
        hcmPositionForecastScenario = _hcmPositionForecastScenario;
        return hcmPositionForecastScenario;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        super();

        if (this.isFormClosedOk() && this.parmNumberOfCopies() > 0)
        {
            HcmPositionForecastCopy::runOnServer(this.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPositionForecastScenarioDuration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves Forecast position duration.
    /// </summary>
    /// <param name="_positionForecastScenario">
    /// The data record buffer from the table <c>HcmPositionForecastScenario</c>.
    /// </param>
    /// <param name="_activationDateTime">
    /// The activation date for Forecast position.
    /// </param>
    /// <param name="_retirementDateTime">
    /// The retirement date for Forecast position.
    /// </param>

    private void setPositionForecastScenarioDuration(HcmPositionForecastScenario _positionForecastScenario, ValidFromDateTime _activationDateTime, ValidToDateTime _retirementDateTime)
    {
        ttsbegin;
        _positionForecastScenario.selectForUpdate(true);
        _positionForecastScenario.ActivationDateTime = _activationDateTime;
        _positionForecastScenario.RetirementDateTime = _retirementDateTime;
        _positionForecastScenario.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePositionForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the dates and the number sequence for the forecast position to be created.
    /// </summary>
    /// <returns>
    /// true if the position forecast is valid; otherwise, false.
    /// </returns>

    private boolean validatePositionForecast()
    {
        HcmForecastScenario         hcmForecastScenario;
        ValidFromDate               positionActivationDate;
        ValidToDate                 positionRetirementDate;
        boolean                     isValid = true;

        hcmForecastScenario    = HcmForecastScenario::find(this.parmPositionForecastScenario().ForecastScenario);
        positionActivationDate = HcmDateTimeUtil::convertToDate(activationDate, DateTimeUtil::getUserPreferredTimeZone());
        positionRetirementDate = HcmDateTimeUtil::convertToDate(retirementDate, DateTimeUtil::getUserPreferredTimeZone());

        // Before copying, check if the new Position Activation and Retirement date falls within the Budget Cycle
        // If it doesn't fall within Budget Cycle, a warning message will be displayed and forecast position will not be copied
        if (!hcmForecastScenario.isPositionDurationWithinBudgetCycle(positionActivationDate, positionRetirementDate))
        {
            error("@SYS4005922");
            isValid = false;
        }

        // Setup number sequence on server side only if it was used on client side and validate number sequence again on server side
        if (this.parmFormUseNumSeq())
        {
            this.initParmNumberSequence();
            if (!this.checkNumSeq())
            {
                error("@SYS25038");
                isValid = false;
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>HcmPositionForecastCopy</c> class on the server and sets the
    /// properties of the class from the supplied container.
    /// </summary>
    /// <param name="_packedPositionForCopy">
    /// A container which contains the property values of the <c>HcmPositionForecastCopy</c> class.
    /// </param>
    /// <returns>
    /// An object of the <c>HcmPositionForecastCopy</c> class.
    /// </returns>
    public static HcmPositionForecastCopy create(container _packedPositionForCopy)
    {
        HcmPositionForecastCopy positionForecastCopy = new HcmPositionForecastCopy();

        positionForecastCopy.unpack(_packedPositionForCopy);

        return positionForecastCopy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        HcmPositionForecastCopy     hcmPositionForecastCopy;
        boolean                     initSuccessful;

        if (!args || args.dataset() != tableNum(HcmPositionForecastScenario))
        {
            if (!HcmPositionForecastScenario::exist(args.record().RecId))
            {
                throw error(strFmt("@SYS25516",classId2Name(classIdGet(hcmPositionForecastCopy))));
            }
        }

        hcmPositionForecastCopy = new HcmPositionForecastCopy();
        initSuccessful = hcmPositionForecastCopy.initalize(args);

        if (initSuccessful)
        {
            hcmPositionForecastCopy.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>HcmPositionForecastCopy</c> on the server and sets the properties of the class from the supplied container.
    /// </summary>
    /// <param name="_packedPositionForCopy">
    /// A container which contains the property values of the class <c>HcmPositionForecastCopy</c>.
    /// </param>
    public static void runOnServer(container _packedPositionForCopy)
    {
        HcmPositionForecastCopy positionForecastCopy = HcmPositionForecastCopy::create(_packedPositionForCopy);

        try
        {
            positionForecastCopy.createNewPositions();
        }
        catch(Exception::Error)
        {
            exceptionTextFallThrough();
            error("@GLS190450");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>