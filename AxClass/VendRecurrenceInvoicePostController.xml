<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRecurrenceInvoicePostController</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendRecurrenceInvoicePostController extends SysOperationServiceController implements BatchRetryable
{
    private RecId startBundle;
    private RecId endBundle;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        VendRecurrenceInvoicePostController controller;
        identifierName className, methodName;
        SysOperationExecutionMode mode;
        VendRecurrenceInvoicePostContract vendRecurrenceInvoiceDataContract;

        [className, methodName, mode] = SysOperationServiceController::parseServiceInfo(args);
        controller = new VendRecurrenceInvoicePostController(className, methodName, mode);

        vendRecurrenceInvoiceDataContract = controller.getDataContractObject(classStr(VendRecurrenceInvoicePostContract));
        vendRecurrenceInvoiceDataContract.vendRecurrenceInvoiceGroup(args.record());

        switch (args.menuItemName())
        {
            case identifierstr(VendRecurrInvoicePostServiceOperation) :
                controller.initiateRecurrenceInvoicePostingInParallel(vendRecurrenceInvoiceDataContract);
                return;

            case identifierstr(VendRecurrInvCheckServiceOperation) :
                vendRecurrenceInvoiceDataContract.parmCheckRecurrenceInvoice(NoYes::Yes);
                vendRecurrenceInvoiceDataContract.parmRecurrenceInvoicePost(NoYes::No);
                vendRecurrenceInvoiceDataContract.parmRecurrencePostTransfer(NoYes::No);
                break;

            case identifierstr(VendRecurrInvPostTransferServiceOpertion) :
                vendRecurrenceInvoiceDataContract.parmCheckRecurrenceInvoice(NoYes::No);
                vendRecurrenceInvoiceDataContract.parmRecurrenceInvoicePost(NoYes::No);
                vendRecurrenceInvoiceDataContract.parmRecurrencePostTransfer(NoYes::Yes);
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        // If run in batch then validation in sandbox does not need to be done
        if (mode == SysOperationExecutionMode::Synchronous && vendRecurrenceInvoiceDataContract.parmCheckRecurrenceInvoice())
        {
            vendRecurrenceInvoiceDataContract.parmValidateInSandbox(NoYes::Yes);
        }
        else
        {
            vendRecurrenceInvoiceDataContract.parmValidateInSandbox(NoYes::No);
        }

        controller.parmArgs(args);
        controller.parmShowDialog(false);
        controller.parmDialogCaption("@AccountsPayable:PostRecurrentVendorInvoice");
        controller.startOperation();
        // Show message about sending to batch queue.
        if (mode != SysOperationExecutionMode::Synchronous)
        {
            info(strFmt("@SYS73254", controller.parmDialogCaption()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initiateRecurrenceInvoicePostingInParallel</Name>
				<Source><![CDATA[
    private void initiateRecurrenceInvoicePostingInParallel(VendRecurrenceInvoicePostContract _contract)
    {
        VendRecurrenceInvoicePostController controller = new VendRecurrenceInvoicePostController(
            classStr(VendRecurrenceInvoicePostController),
            methodStr(VendRecurrenceInvoicePostController, splitInvoiceBundles),
            SysOperationExecutionMode::ScheduledBatch);

        VendRecurrenceInvoicePostContract dataContract = controller.getDataContractInfoObject().dataContractObject() as VendRecurrenceInvoicePostContract;
        dataContract.vendRecurrenceInvoiceGroup(_contract.parmVendRecurrenceInvoiceGroup());

        controller.parmShowDialog(false);
        controller.parmDialogCaption("@AccountsPayable:PostRecurrentVendorInvoice");
        controller.startOperation();
        info(strFmt("@SYS73254", controller.parmDialogCaption()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitInvoiceBundles</Name>
				<Source><![CDATA[
    internal void splitInvoiceBundles(VendRecurrenceInvoicePostContract _contract)
    {
        const int MinBundleSize = 100;
        int bundleSize = PurchParameters::find().OrderBatchTaskSize;

        if (bundleSize < MinBundleSize)
        {
            bundleSize = MinBundleSize;
        }

        BatchHeader batchHeader = BatchHeader::getCurrentBatchHeader();

        if (batchHeader == null)
        {
            batchHeader = batchHeader::construct();
        }

        VendorRecurrenceInvoice invoice;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        Counter i = 0;
        RecId lastBundle;
        boolean hasInvoicesToProcess;

        while select RecId from invoice
            order by invoice.RecId asc
                where invoice.VendRecurrenceInvoiceGroup == _contract.parmVendRecurrenceInvoiceGroup().RecId
            exists join vendInvoiceInfoTable 
                where vendInvoiceInfoTable.RecId == invoice.VendInvoiceInfoTable
                    && vendInvoiceInfoTable.ParmJobStatus != ParmJobStatus::Executed
        {
            i++;

            if (i == 1)
            {
                startBundle = invoice.RecId;
            }

            if (i >= bundleSize)
            {
                endBundle = invoice.RecId;
                i = 0;

                VendRecurrenceInvoicePostController controller = this.cloneForSubProcess(_contract);
                batchHeader.addTask(controller, this.parmCurrentBatch().RecId);
            }

            lastBundle = invoice.RecId;
            hasInvoicesToProcess = true;
        }

        boolean shouldCreateNewBundle = (i > 0 || !hasInvoicesToProcess);
        if (shouldCreateNewBundle)
        {
            endBundle = lastBundle;
            VendRecurrenceInvoicePostController controller = this.cloneForSubProcess(_contract);
            batchHeader.addTask(controller, this.parmCurrentBatch().RecId);
        }

        batchHeader.save();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cloneForSubProcess</Name>
				<Source><![CDATA[
    private VendRecurrenceInvoicePostController cloneForSubProcess(VendRecurrenceInvoicePostContract _contract)
    {
        VendRecurrenceInvoicePostController controller = new VendRecurrenceInvoicePostController(
            classStr(VendRecurrenceInvoicePostController),
            methodStr(VendRecurrenceInvoicePostController, executeParallelTaskForRecurrenceInvoicePosting),
            SysOperationExecutionMode::Synchronous);

        VendRecurrenceInvoicePostContract dataContract = controller.getDataContractInfoObject().dataContractObject() as VendRecurrenceInvoicePostContract;
        dataContract.parmStartBundle(startBundle);
        dataContract.parmEndBundle(endBundle);
        dataContract.vendRecurrenceInvoiceGroup(_contract.parmVendRecurrenceInvoiceGroup());
        dataContract.parmRecurrencePostTransfer(NoYes::No);
        dataContract.parmRecurrenceInvoicePost(NoYes::Yes);
        dataContract.parmValidateInSandbox(NoYes::No);
        dataContract.parmCheckRecurrenceInvoice(NoYes::No);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeParallelTaskForRecurrenceInvoicePosting</Name>
				<Source><![CDATA[
    internal void executeParallelTaskForRecurrenceInvoicePosting(VendRecurrenceInvoicePostContract _contract)
    {
        VendRecurrenceInvoicePostService postService = new VendRecurrenceInvoicePostService();
        postService.post(_contract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>