<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticSourceDataEdit_PR</Name>
	<SourceCode>
		<Declaration><![CDATA[
[CFMJournalSourceAttribute(CFMJournalTransSourceType::PaymentRequest)]
class CFMAnalyticSourceDataEdit_PR extends CFMAnalyticSourceDataEdit
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initEditTmpTableFromSource</Name>
				<Source><![CDATA[
    protected boolean initEditTmpTableFromSource(QueryRun _queryRun, CFMJournalProtoTrans _protoTrans)
    {
        CFMPaymentRequestTable paymentRequestTable = _queryRun.get(tableNum(CFMPaymentRequestTable));
        CFMAnalyticDataEditUncommitted uncommittedValues = CFMAnalyticDataEditUncommitted::find(CFMJournalTransSourceType::PaymentRequest, paymentRequestTable.RecId);

        PaymDate paymDate = uncommittedValues.RecId != 0 ? uncommittedValues.DueDate : paymentRequestTable.PaymentDate;

        dataEditTable.clear();
        dataEditTable.initValue();

        dataEditTable.AmountCur = paymentRequestTable.amountToPayInCurrency(paymDate);
        dataEditTable.CashDiscAmount = paymentRequestTable.cashDiscAmount(paymDate);
        dataEditTable.DirPartyRecId = paymentRequestTable.custVendTable().Party;
        dataEditTable.DocumentNum = paymentRequestTable.PaymentRequestId;
        dataEditTable.Priority = paymentRequestTable.PaymentPriority;
        dataEditTable.SourceDataAreaId = paymentRequestTable.SourceDataAreaId;
        dataEditTable.PaymentDataAreaId = paymentRequestTable.PaymentDataAreaId;
        dataEditTable.SourceType = this.sourceType();
        dataEditTable.SourceRefRecId = paymentRequestTable.RecId;
        dataEditTable.CashFlowDirection = _protoTrans.cashFlowDirection();
        dataEditTable.AccountType = paymentRequestTable.AccountType;
        dataEditTable.PaymDate = paymDate;
        dataEditTable.DueDate = paymentRequestTable.DueDate;

        if (uncommittedValues)
        {
            dataEditTable.PaymentAccountNum  = uncommittedValues.PaymentAccountNum;
            dataEditTable.PaymentAccountType = uncommittedValues.PaymentAccountType;
            dataEditTable.PaymMode = uncommittedValues.PaymMode;
            dataEditTable.PaymSpec = uncommittedValues.PaymSpec;
        }
        else
        {
            dataEditTable.PaymentAccountNum  = paymentRequestTable.PaymentAccountNum;
            dataEditTable.PaymentAccountType = paymentRequestTable.PaymentAccountType;
            dataEditTable.PaymMode = paymentRequestTable.PaymMode;
            dataEditTable.PaymSpec = paymentRequestTable.PaymSpec;
        }

        if (dataEditTable.CashFlowDirection == CFMCashFlowDirection::Outflow)
        {
            dataEditTable.AmountCur = - dataEditTable.AmountCur;
            dataEditTable.CashDiscAmount = - dataEditTable.CashDiscAmount;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProtoTransParmContract</Name>
				<Source><![CDATA[
    protected CFMJournalProtoTransParmContract initProtoTransParmContract(QueryRun _queryRun)
    {
        CFMJournalProtoTransParmContractPaymReq parmContract = new CFMJournalProtoTransParmContractPaymReq();

        CFMPaymentRequestTable paymentRequest = _queryRun.get(tableNum(CFMPaymentRequestTable));
        parmContract.parmPaymentRequestTable(paymentRequest);

        CFMPaymentRequestType paymentRequestType = CFMPaymentRequestType::find(paymentRequest.PaymentRequestType);
        parmContract.parmPaymentRequestType(paymentRequestType);
        parmContract.parmDirPartyMap(paymentRequest.dirPartyMap());
        
        CFMPaymentRequestLine paymentRequestLine;

        select firstOnly paymentRequestLine
            where paymentRequestLine.PaymentRequestTable == paymentRequest.RecId;

        parmContract.parmPaymentRequestLine(paymentRequestLine);

        return parmContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceDataQuery</Name>
				<Source><![CDATA[
    protected void initSourceDataQuery()
    {
        sourceDataQuery.addDataSource(tableNum(CFMPaymentRequestTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDataDatasource</Name>
				<Source><![CDATA[
    protected QueryBuildDataSource sourceDataDatasource()
    {
        return sourceDataQuery.dataSourceTable(tableNum(CFMPaymentRequestTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceType</Name>
				<Source><![CDATA[
    protected CFMJournalTransSourceType sourceType()
    {
        return CFMJournalTransSourceType::PaymentRequest;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>