<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesDocumentStatusConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesDocumentStatusConsistencyCheck</c> class is a consistency check that verifies if the sales order header document status corresponds to the 
/// document created farthest in the engagement process.
/// </summary>
public class SalesDocumentStatusConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    configurationKeyId configurationKey()
    {
        return configurationkeynum(LogisticsBasic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executionOrder</Name>
				<Source><![CDATA[
    Integer executionOrder()
    {
        return 30;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        Query salesOrderQuery = this.buildSalesOrdersQuery();
        QueryRun salesOrderQueryRun = new QueryRun(salesOrderQuery);

        progress.setTotal(QueryRun::getQueryRowCount(salesOrderQuery, maxInt()));
        
        info(strFmt("@SCM:SalesDocumentStatusConsistencyCheck_FoundToCheckTotal", int2Str(QueryRun::getQueryRowCount(salesOrderQuery, maxInt()))));

        while (salesOrderQueryRun.next())
        {
            SalesTable salesOrder = salesOrderQueryRun.get(tableNum(SalesTable));
            progress.setText(strFmt("@SCM:SalesDocumentStatusConsistencyCheck_ProgressUpdateText", salesOrder.SalesId));
            progress.incCount();

            setPrefix(strFmt("@SCM:SalesDocumentStatusConsistencyCheck_SalesOrderLogSectionTitle", salesOrder.SalesId));
            int statusErrorsFixed = this.fixSalesOrderDocumentStatus(salesOrder);
            if (statusErrorsFixed > 0)
            {
                info("@SCM:SalesDocumentStatusConsistencyCheck_DocumentStatusIsFixed");
                this.updateCorrected(statusErrorsFixed);
            }
        }

        this.updateNotCorrected();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SCM:SalesDocumentStatusConsistencyCheck_Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    static HelpTxt helpText()
    {
        return "@SCM:SalesDocumentStatusConsistencyCheck_HelpText";
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    ClassId treeParentClassId()
    {
        return classNum(SalesRootConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixSalesOrderDocumentStatus</Name>
				<Source><![CDATA[
    private int fixSalesOrderDocumentStatus(SalesTable _salesOrder)
    {
        int statusErrorsFixed;

        var correctDocumentStatus = this.findCorrectDocumentStatus(_salesOrder);

        DocumentStatus originalDocumentStatus = _salesOrder.DocumentStatus;
        
        if (correctDocumentStatus != _salesOrder.DocumentStatus)
        {
            warning(strFmt(
                    "@SCM:SalesDocumentStatusConsistencyCheck_InvalidDocumentStatusDetectedForOrder",
                    enum2Str(_salesOrder.DocumentStatus),
                    enum2Str(correctDocumentStatus)));

            if (this.checkFix() == CheckFix::Fix)
            {
                statusErrorsFixed += this.updateDocumentStatus(_salesOrder, correctDocumentStatus);
            }
        }

        return statusErrorsFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentStatus</Name>
				<Source><![CDATA[
    private int updateDocumentStatus(SalesTable _salesOrder, DocumentStatus _documentStatus)
    {
        #OCCRetryCount

        int statusErrorsFixed;

        try
        {
            _salesOrder.updateDocumentStatus(_documentStatus);
            statusErrorsFixed++;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::UpdateConflict;
            }
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::UpdateConflictNotRecovered;
            }
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() != 0)
            {
                throw Exception::DuplicateKeyException;
            }
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::DuplicateKeyExceptionNotRecovered;
            }
            retry;
        }

        return statusErrorsFixed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCorrectDocumentStatus</Name>
				<Source><![CDATA[
    private DocumentStatus findCorrectDocumentStatus(SalesTable _salesOrder)
    {
        if (this.existFacture_RU(_salesOrder))
        {
            return DocumentStatus::Facture_RU;
        }
        else if (this.existInvoice(_salesOrder))
        {
            return DocumentStatus::Invoice;
        }
        else if (this.existPackingSlip(_salesOrder))
        {
            return DocumentStatus::PackingSlip;
        }
        else if (this.existPickingList(_salesOrder))
        {
            return DocumentStatus::PickingList;
        }
        else if (this.existInvoice4Paym_RU(_salesOrder))
        {
            return DocumentStatus::Invoice4Paym_RU;
        }
        else if (this.existConfirmation(_salesOrder))
        {
            return DocumentStatus::Confirmation;
        }

        return DocumentStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existFacture_RU</Name>
				<Source><![CDATA[
    private boolean existFacture_RU(SalesTable _salesOrder)
    {
        #ISOCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && this.existJournal(_salesOrder, DocumentStatus::Facture_RU, SalesTableType::posFacture_RU());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInvoice</Name>
				<Source><![CDATA[
    private boolean existInvoice(SalesTable _salesOrder)
    {
        return this.existJournal(_salesOrder, DocumentStatus::Invoice, SalesTableType::posInvoice());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPackingSlip</Name>
				<Source><![CDATA[
    private boolean existPackingSlip(SalesTable _salesOrder)
    {
        return this.existJournal(_salesOrder, DocumentStatus::PackingSlip, SalesTableType::posPackingSlip());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existPickingList</Name>
				<Source><![CDATA[
    private boolean existPickingList(SalesTable _salesOrder)
    {
        return this.existJournal(_salesOrder, DocumentStatus::PickingList, SalesTableType::posPickingList());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existInvoice4Paym_RU</Name>
				<Source><![CDATA[
    private boolean existInvoice4Paym_RU(SalesTable _salesOrder)
    {
        #ISOCountryRegionCodes

        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU])
            && this.existJournal(_salesOrder, DocumentStatus::Invoice4Paym_RU, SalesTableType::posInvoice4Paym_RU());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existConfirmation</Name>
				<Source><![CDATA[
    private boolean existConfirmation(SalesTable _salesOrder)
    {
        return this.existJournal(_salesOrder, DocumentStatus::Confirmation, SalesTableType::posConfirmation());
    }

]]></Source>
			</Method>
			<Method>
				<Name>existJournal</Name>
				<Source><![CDATA[
    private boolean existJournal(SalesTable _salesOrder, DocumentStatus _documentStatus, int _journalTypePosition)
    {
        Set journalTypeSet = new Set(Types::Enum);
        journalTypeSet.add(_documentStatus);

        return conPeek(_salesOrder.existingJournals(journalTypeSet.pack(), false), _journalTypePosition);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSalesOrdersQuery</Name>
				<Source><![CDATA[
    private Query buildSalesOrdersQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(SalesTable));
        qbds.update(true);

        this.addDocumentStatusQueryRanges(fieldNum(SalesTable, DocumentStatus), qbds);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDocumentStatusQueryRanges</Name>
				<Source><![CDATA[
    private void addDocumentStatusQueryRanges(fieldId _documentStatusFieldId, QueryBuildDataSource _qbds)
    {
        QueryBuildRange documentStatusQueryBuildRange = _qbds.addRange(_documentStatusFieldId);
        documentStatusQueryBuildRange.value(SysQuery::valueNot(DocumentStatus::Invoice));
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>