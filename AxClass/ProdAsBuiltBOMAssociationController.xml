<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdAsBuiltBOMAssociationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class ProdAsBuiltBOMAssociationController 
{    
    private Map mapProductLotBuilder;
    private Map mapComponentLotBuilder;
    private ProdAsBuiltBOMProductLotAssociation currentActiveProductLotAssociation;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        mapProductLotBuilder    = new Map(Types::String, Types::Class); // KV = {product LOT, ProdAsBuiltBOMProductLotBuilder}
        mapComponentLotBuilder  = new Map(Types::String, Types::Class); // KV = {component LOT, ProdAsBuiltBOMComponentLotBuilder}    
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentActiveProductLotAssociation</Name>
				<Source><![CDATA[
    internal void setCurrentActiveProductLotAssociation(ProdAsBuiltBOMProductLotAssociation _newProductLotAssociation)
    {
        if (_newProductLotAssociation.RecId)
        {
            currentActiveProductLotAssociation = _newProductLotAssociation;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentActiveProductLotAssociation</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotAssociation getCurrentActiveProductLotAssociation()
    {
        return currentActiveProductLotAssociation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetCurrentActiveProductLotAssociation</Name>
				<Source><![CDATA[
    internal void resetCurrentActiveProductLotAssociation()
    {
        currentActiveProductLotAssociation = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryResolveTrackingDimensionAndRegisterProductLotAssociation</Name>
				<Source><![CDATA[
    internal boolean tryResolveTrackingDimensionAndRegisterProductLotAssociation(ProdAsBuiltBOMProductLotAssociationParameters _parameters, str _productTrackingDimension)
    {
        ProdAsBuiltBOMFormulaProducts productLot = _parameters.getProductLot();
        ProdAsBuiltBOMProductContext  productContext = this.getProductLotBuilderCache(productLot).getProductContext();
        InventBatchId                 batchId;
        InventSerialId                serialId;
        boolean                       result;

        _parameters.setProductContext(productContext);

        if (productContext.isItemBatchable() && productContext.isItemSerializable())
        {
            [result, batchId] = this.tryRegisterBatchProductLotAssociation(_parameters, _productTrackingDimension);

            if (!batchId)
            {
                [result, serialId] = this.tryRegisterSerialProductLotAssociation(_parameters, _productTrackingDimension);
            }

            result = result && (batchId != null || serialId != null);
        }
        else if (productContext.isItemBatchable())
        {
            [result, batchId] = this.tryRegisterBatchProductLotAssociation(_parameters, _productTrackingDimension);

            result = result && batchId != null;   
        }
        else if (productContext.isItemSerializable())
        {
            [result, serialId] = this.tryRegisterSerialProductLotAssociation(_parameters, _productTrackingDimension);

            result = result && serialId != null;
        }

        if (!result)
        {
            error(strFmt("@SCM:TrackedComponentsProductAssociationFailure", _productTrackingDimension, productLot.ItemId, productLot.InventTransId));
        
            if (!batchId && !serialId)
            {
                error(strFmt("@SCM:TrackedComponentsProductAssociationFailureDescription", _productTrackingDimension, productLot.ItemId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryRegisterBatchProductLotAssociation</Name>
				<Source><![CDATA[
    internal container tryRegisterBatchProductLotAssociation(ProdAsBuiltBOMProductLotAssociationParameters _parameters, InventBatchId _productBatchId)
    {
        InventBatch productBatch = InventBatch::find(_productBatchId, _parameters.getProductLot().ItemId);
        boolean     result;

        if (productBatch.InventBatchId)
        {
            _parameters.setBatchNumberId(_productBatchId);
            result = this.registerProductLotAssociation(_parameters);
        }

        return [result, productBatch.InventBatchId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryRegisterSerialProductLotAssociation</Name>
				<Source><![CDATA[
    internal container tryRegisterSerialProductLotAssociation(ProdAsBuiltBOMProductLotAssociationParameters _parameters, InventSerialId _productSerialId)
    {
        ProdAsBuiltBOMFormulaProducts productLot     = _parameters.getProductLot();
        ProdAsBuiltBOMProductContext  productContext = _parameters.getProductContext();
        InventSerialId                productSerialId;
        boolean                       result;

        if (!productContext.isSerialNumberControlEnabled())
        {
            productSerialId = _productSerialId; // accept the input without existance validation. SN persistance InventMovement.persistSerialNumber()
        }
        else
        {
            productSerialId = InventSerial::find(_productSerialId, productLot.ItemId).InventSerialId;
        }

        if (productSerialId)
        {
            _parameters.setSerialNumberId(productSerialId);
            result = this.registerProductLotAssociation(_parameters);
        }

        return [result, productSerialId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerProductLotManualAssociation</Name>
				<Source><![CDATA[
    internal boolean registerProductLotManualAssociation(ProdAsBuiltBOMProductLotAssociation _productLotAssociation,
                                                         ProdAsBuiltBOMInputOrigin           _inputOrigin = ProdAsBuiltBOMInputOrigin::Standard,
                                                         ProdAsBuiltBOMInputType             _inputType = ProdAsBuiltBOMInputType::CreateManual)
    {
        var productLot = this.getProductLotBuilderCacheFromAssociation(_productLotAssociation).productLot();
        var parameters = ProdAsBuiltBOMProductLotAssociationParameters::construct()
                                                            .setProductLot(productLot)
                                                            .setProductLotAssociation(_productLotAssociation)
                                                            .setGoodQuantity(_productLotAssociation.QtyGood)
                                                            .setErrorQuantity(_productLotAssociation.QtyError)
                                                            .setValidateInput(false)
                                                            .setInputOrigin(_inputOrigin)
                                                            .setInputType(_inputType);

        return this.registerProductLotAssociation(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerProductLotAssociation</Name>
				<Source><![CDATA[
    internal boolean registerProductLotAssociation(ProdAsBuiltBOMProductLotAssociationParameters _parameters)
    {
        var builder = ProdAsBuiltBOMProductLotAssociationBuilder::createBuilder(_parameters);
        var result = builder.save();

        if (result)
        {
            this.setCurrentActiveProductLotAssociation(builder.productLotAssociation());
            this.rereadSumProductInventGoodErrorQty(_parameters.getProductLot());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryResolveTrackingDimensionAndRegisterComponentLotAssociation</Name>
				<Source><![CDATA[
    internal boolean tryResolveTrackingDimensionAndRegisterComponentLotAssociation(ProdAsBuiltBOMComponentLotAssociationParameters _parameters, str _componentTrackingDimension)
    {
        ProdBOM                      componentLot = _parameters.getComponentLot();
        ProdAsBuiltBOMProductContext componentContext = this.getComponentLotBuilderCache(componentLot).getProductContext();
        InventBatchId                batchId;
        InventSerialId               serialId;
        boolean                      result;

        _parameters.setComponentContext(componentContext);
        
        if (componentContext.isItemBatchable() && componentContext.isItemSerializable())
        {
            [result, batchId] = this.tryRegisterBatchComponentLotAssociation(_parameters, _componentTrackingDimension);

            if (!batchId)   // if input is not a batch => try serial
            {
                [result, serialId] = this.tryRegisterSerialComponentLotAssociation(_parameters, _componentTrackingDimension);
            }

            result = result && (batchId != null || serialId != null);
        }
        else if (componentContext.isItemBatchable())
        {
            [result, batchId] = this.tryRegisterBatchComponentLotAssociation(_parameters, _componentTrackingDimension);

            result = result && batchId != null;   
        }
        else if (componentContext.isItemSerializable())
        {
            [result, serialId] = this.tryRegisterSerialComponentLotAssociation(_parameters, _componentTrackingDimension);

            result = result && serialId != null;
        }
        
        if (!result)
        {
            error(strFmt("@SCM:TrackedComponentsComponentAssociationFailure", _componentTrackingDimension, componentLot.ItemId, componentLot.InventTransId));
        
            if (!batchId && !serialId)
            {
                error(strFmt("@SCM:TrackedComponentsComponentAssociationFailureDescription", _componentTrackingDimension, componentLot.ItemId));
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryRegisterBatchComponentLotAssociation</Name>
				<Source><![CDATA[
    internal container tryRegisterBatchComponentLotAssociation(ProdAsBuiltBOMComponentLotAssociationParameters _parameters, InventBatchId _componentBatchId)
    {
        ProdBOM     componentLot = _parameters.getComponentLot();
        InventBatch componentBatch = InventBatch::find(_componentBatchId, componentLot.ItemId);
        boolean     result;

        if (componentBatch.InventBatchId)
        {
            _parameters.setBatchNumberId(componentBatch.InventBatchId);
            result = this.registerComponentLotAssociation(_parameters);
        }

        return [result, componentBatch.InventBatchId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryRegisterSerialComponentLotAssociation</Name>
				<Source><![CDATA[
    internal container tryRegisterSerialComponentLotAssociation(ProdAsBuiltBOMComponentLotAssociationParameters _parameters, InventSerialId _componentSerialId)
    {
        ProdBOM                      componentLot     = _parameters.getComponentLot();
        ProdAsBuiltBOMProductContext componentContext = _parameters.getComponentContext();
        InventSerialId               componentSerialId;
        boolean                      result;

        if (!componentContext.isSerialNumberControlEnabled())
        {
            componentSerialId = _componentSerialId; // accept the input without existance validation. SN persistance InventMovement.persistSerialNumber()
        }
        else
        {
            componentSerialId = InventSerial::find(_componentSerialId, componentLot.ItemId).InventSerialId;
        }

        if (componentSerialId)
        {
            _parameters.setSerialNumberId(componentSerialId);
            result = this.registerComponentLotAssociation(_parameters);
        }

        return [result, componentSerialId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerComponentLotAssociation</Name>
				<Source><![CDATA[
    internal boolean registerComponentLotAssociation(ProdAsBuiltBOMComponentLotAssociationParameters _parameters)
    {
        ProdAsBuiltBOMProductLotAssociationBuilder activeProductLotAssociationBuilder;
        ProdAsBuiltBOMFormulaProducts              productLot = _parameters.getProductLot();
        boolean                                    result;

        if (currentActiveProductLotAssociation.RecId)
        {
            activeProductLotAssociationBuilder = ProdAsBuiltBOMProductLotAssociationBuilder::createBuilderFromProductLotAssociation(currentActiveProductLotAssociation);
        }
        else
        {
            error(strfmt("@SCM:TrackedComponentsProductAssociationFirst", productLot.ItemId, productLot.InventTransId));
            return result;
        }

        _parameters.setProductLotAssociation(activeProductLotAssociationBuilder.productLotAssociation());
        result = ProdAsBuiltBOMComponentLotAssociationBuilder::createBuilder(_parameters).save();

        if (result)
        {
            this.rereadSumComponentLotConsumptionQty(_parameters.getComponentLot());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerComponentLotManualAssociation</Name>
				<Source><![CDATA[
    internal boolean registerComponentLotManualAssociation(ProdAsBuiltBOMProductLotAssociation   _productLotAssociation, 
                                                           ProdAsBuiltBOMComponentLotAssociation _componentLotAssociation,
                                                           ProdAsBuiltBOMInputOrigin             _inputOrigin = ProdAsBuiltBOMInputOrigin::Standard,
                                                           ProdAsBuiltBOMInputType               _inputType = ProdAsBuiltBOMInputType::CreateManual)
    {
        var productLotBuilder   = this.getProductLotBuilderCacheFromAssociation(_productLotAssociation);
        var componentLotBuilder = this.getComponentLotBuilderCacheFromAssociation(_componentLotAssociation);
        var parameters          = ProdAsBuiltBOMComponentLotAssociationParameters::construct()
                                                                .setProductLot(productLotBuilder.productLot())
                                                                .setProductLotAssociation(_productLotAssociation)
                                                                .setComponentLot(componentLotBuilder.componentLot())
                                                                .setComponenLotAssociation(_componentLotAssociation)
                                                                .setInventoryConsumptionQuantity(_componentLotAssociation.InventConsumptionQty)
                                                                .setValidateInput(false)
                                                                .setInputOrigin(_inputOrigin)
                                                                .setInputType(_inputType);

        var result = ProdAsBuiltBOMComponentLotAssociationBuilder::createBuilder(parameters).save();
        if (result)
        {
            this.rereadSumComponentLotConsumptionQty(componentLotBuilder.componentLot());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumProductInventGoodErrorQty</Name>
				<Source><![CDATA[
    internal InventQty sumProductInventGoodErrorQty(ProdAsBuiltBOMFormulaProducts _product)
    {
        if (!mapProductLotBuilder.exists(_product.InventTransId))
        {
            return this.rereadSumProductInventGoodErrorQty(_product);
        }

        return this.getProductLotBuilderCache(_product).sumProductInventGoodErrorQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadSumProductInventGoodErrorQty</Name>
				<Source><![CDATA[
    internal InventQty rereadSumProductInventGoodErrorQty(ProdAsBuiltBOMFormulaProducts _product)
    {
        return this.getProductLotBuilderCache(_product).sumProductInventGoodErrorQty(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductLotBuilderCache</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotBuilder getProductLotBuilderCache(ProdAsBuiltBOMFormulaProducts _product)
    {
        ProdAsBuiltBOMProductLotBuilder productLotBuilder;

        if (!mapProductLotBuilder.exists(_product.InventTransId))
        {
            productLotBuilder = ProdAsBuiltBOMProductLotBuilder::createBuilder(_product);
            mapProductLotBuilder.insert(_product.InventTransId, productLotBuilder);
        }
        else
        {
            productLotBuilder = mapProductLotBuilder.lookup(_product.InventTransId);
        }

        return productLotBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProductLotBuilderCacheFromAssociation</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMProductLotBuilder getProductLotBuilderCacheFromAssociation(ProdAsBuiltBOMProductLotAssociation _productAssociation)
    {
        ProdAsBuiltBOMProductLotBuilder productLotBuilder;

        if (!mapProductLotBuilder.exists(_productAssociation.InventTransId))
        {
            productLotBuilder = ProdAsBuiltBOMProductLotBuilder::createBuilder(_productAssociation.findProductLot());
            mapProductLotBuilder.insert(_productAssociation.InventTransId, productLotBuilder);
        }
        else
        {
            productLotBuilder = mapProductLotBuilder.lookup(_productAssociation.InventTransId);
        }

        return productLotBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumComponentLotConsumptionQty</Name>
				<Source><![CDATA[
    internal InventQty sumComponentLotConsumptionQty(ProdBOM _component, ProdAsBuiltBOMMatchId _matchId = '')
    {
        if (!mapComponentLotBuilder.exists(_component.InventTransId))
        {
            return this.rereadSumComponentLotConsumptionQty(_component);
        }

        return this.getComponentLotBuilderCache(_component).sumComponentLotConsumptionQty(false, _matchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>rereadSumComponentLotConsumptionQty</Name>
				<Source><![CDATA[
    internal InventQty rereadSumComponentLotConsumptionQty(ProdBOM _component, ProdAsBuiltBOMMatchId _matchId = '')
    {
        return this.getComponentLotBuilderCache(_component).sumComponentLotConsumptionQty(true, _matchId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComponentLotBuilderCache</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotBuilder getComponentLotBuilderCache(ProdBOM _component)
    {
        ProdAsBuiltBOMComponentLotBuilder componentLotBuilder;

        if (!mapComponentLotBuilder.exists(_component.InventTransId))
        {
            componentLotBuilder = ProdAsBuiltBOMComponentLotBuilder::createBuilder(_component);
            mapComponentLotBuilder.insert(_component.InventTransId, componentLotBuilder);
        }
        else
        {
            componentLotBuilder = mapComponentLotBuilder.lookup(_component.InventTransId);
        }

        return componentLotBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetMapComponentLotBuilder</Name>
				<Source><![CDATA[
    internal void resetMapComponentLotBuilder()
    {
        mapComponentLotBuilder  = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComponentLotBuilderCacheFromAssociation</Name>
				<Source><![CDATA[
    internal ProdAsBuiltBOMComponentLotBuilder getComponentLotBuilderCacheFromAssociation(ProdAsBuiltBOMComponentLotAssociation _componentAssociation)
    {
        if (!_componentAssociation.InventTransId)
        {
            return null;
        }

        ProdAsBuiltBOMComponentLotBuilder componentLotBuilder;
        
        if (!mapComponentLotBuilder.exists(_componentAssociation.InventTransId))
        {
            componentLotBuilder = ProdAsBuiltBOMComponentLotBuilder::createBuilder(_componentAssociation.findComponentLot());
            mapComponentLotBuilder.insert(_componentAssociation.InventTransId, componentLotBuilder);
        }
        else
        {
            componentLotBuilder = mapComponentLotBuilder.lookup(_componentAssociation.InventTransId);
        }

        return componentLotBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static ProdAsBuiltBOMAssociationController construct()
    {
        return new ProdAsBuiltBOMAssociationController();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>