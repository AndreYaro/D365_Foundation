<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportController_NO</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxReportController_NO</c> class is the controller class for the <c>TaxReport_NO</c> report.
/// </summary>
public class TaxReportController_NO extends SrsReportRunController implements BatchRetryable
{
    private const str FeatureReference = 'NO-00015';

    private TaxReport taxReport;
    private TaxReportVoucher taxReportVoucher;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes all the required objects.
    /// </summary>
    /// <param name="_args">
    /// The arguments for the <c>TaxReport_NO</c> class.
    /// </param>
    public void init(Args _args)
    {
        this.initFromArgs(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns values for the fields in the temporary table, depending on the <c>args</c> value.
    /// </summary>
    /// <param name="_args">
    /// The caller arguments.
    /// </param>
    private void initFromArgs(Args _args)
    {
        TaxReportContract_NO     contract;
        contract = this.parmReportContract().parmRdpContract() as TaxReportContract_NO;

        if (_args && _args.dataset() == tablenum(TaxReportVoucher))
        {
            taxReportVoucher = _args.record();
            contract.parmTaxRepVerisonContract(taxReportVoucher.TaxRepVersion);
            contract.parmTaxPeriodContract(taxReportVoucher.TaxPeriod);
            contract.parmTaxFromDateContract(taxReportVoucher.FromDate);
            contract.parmTaxToDateContract(taxReportVoucher.ToDate);
            contract.parmTaxRepCounterContract(taxReportVoucher.TaxRepCounter);
        }
        else if (_args && classidget(_args.parmObject()) == classnum(TaxReport))
        {
            taxReport = _args.parmObject();
            contract.parmTaxRepVerisonContract(taxReport.taxRepVersion());
            contract.parmTaxPeriodContract(taxReport.taxPeriod());
            contract.parmTaxFromDateContract(taxReport.fromDate());
            contract.parmTaxToDateContract(taxReport.toDate());
            contract.parmUpdateNow(taxReport.update());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        this.init(this.parmArgs());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController controller = new TaxReportController_NO();
        controller.parmReportName(ssrsReportStr(TaxReport_NO, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>