<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjProjectCopier</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjProjectCopier
{
    #TimeConstants

    ProjTable           existingProj;
    ProjTable           newProj;
    Map                 activityNumberMapping;
    ProjId              newProjProjId;
    Description         newProjDescription;
    ProjName            newProjName;
    RecId               newProjRecId;
    ProjInvoiceProjId   newProjProjInvoiceProjId;
    ProjType            newProjType;
    ProjGroupId         newProjProjGroupId;
    CustAccount         newProjCustAccount;
    NoYes               newProjTemplateApplied;
    date                newProjProjectedStartDate      = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    date                newProjProjectedEndDate        = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    date                newProjCreatedDate             = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    date                newProjStartDate               = dateNull();
    date                newProjEndDate                 = dateNull();
    date                newProjExtensionDate           = dateNull();
    ProjStatus          newProjStatus                  = ProjStatus::Created;
    ProjParentId        newProjParentId                = "";
    int                 newProjTemplate                = 0;
    ProjWipId           newProjWIPProject              = "";
    Map                 genericResourceMapping         = new Map(Types::Int64, Types::Int64);

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new (ProjTable _existingProj, ProjTable _newProj)
    {
        existingProj = _existingProj;
        newProj = _newProj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjProjectCopier construct (ProjTable _existingProj, ProjTable _newProj)
    {
        ProjProjectCopier projProjectCopier;
        projProjectCopier = new ProjProjectCopier(_existingProj, _newProj);
        projProjectCopier.copyFieldsFromExistingProj();
        return projProjectCopier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFieldsFromExistingProj</Name>
				<Source><![CDATA[
    public void copyFieldsFromExistingProj()
    {
        // save the following settings from the new project
        newProjProjId              = newProj.ProjId;
        newProjName                = newProj.Name;
        newProjDescription         = newProj.Description;
        newProjParentId            = newProj.ParentId;
        newProjProjGroupId         = newProj.ProjGroupId;
        newProjType                = newProj.Type;
        newProjCreatedDate         = newProj.Created;
        newProjProjectedStartDate  = newProj.ProjectedStartDate;
        newProjProjectedEndDate    = newProj.ProjectedEndDate;
        newProjStartDate           = newProj.StartDate;
        newProjEndDate             = newProj.EndDate;
        newProjExtensionDate       = newProj.ExtensionDate;
        newProjStatus              = newProj.Status;
        newProjTemplate            = newProj.Template;
        newProjWIPProject          = newProj.WIPProject;
        newProjProjInvoiceProjId   = newProj.ProjInvoiceProjId;
        newProjCustAccount         = newProj.CustAccount;
        newProjTemplateApplied     = newProj.TemplateApplied;

        // copy existing project settings to the new project
        global::buf2buf(existingProj, newProj);

        // revert the new project settings back for the following fields
        newProj.ProjId              = newProjProjId;
        newProj.Name                = newProjName;
        newProj.Description         = newProjDescription;
        newProj.ParentId            = newProjParentId;
        newProj.Created             = newProjCreatedDate;
        newProj.ProjectedStartDate  = newProjProjectedStartDate;
        newProj.ProjectedEndDate    = newProjProjectedEndDate;
        newProj.StartDate           = newProjStartDate;
        newProj.EndDate             = newProjEndDate;
        newProj.ExtensionDate       = newProjExtensionDate;
        newProj.Status              = newProjStatus;
        newProj.Template            = newProjTemplate;
        newProj.WIPProject          = newProjWIPProject;
        newProj.TemplateApplied     = newProjTemplateApplied;

        if (newProjProjInvoiceProjId)
        {
           newProj.ProjInvoiceProjId = newProjProjInvoiceProjId;
        }

        if (newProjCustAccount)
        {
            newProj.CustAccount = newProjCustAccount;
        }

        if (newProjProjGroupId)
        {
            newProj.ProjGroupId = newProjProjGroupId;
            newProj.Type        = newProjType;
        }

        this.copyProjInvoice();
        this.updateNewProjWorkingDates();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProjInvoice</Name>
				<Source><![CDATA[
    private void copyProjInvoice()
    {
        LogisticsLocationEntity location;
        ProjInvoiceTable        projInvoiceTable;
        CustTable               custTable;

        // Address will be setup latter in the script.
        newProj.DlvName = '';
        newProj.DeliveryLocation = 0;
        projInvoiceTable = ProjInvoiceTable::find(newProj.ProjInvoiceProjId);
        newProj.initFromInvoice(projInvoiceTable);

        select Party from custTable where custTable.AccountNum == newProj.CustAccount;
        newProj.Email = custTable.email();

        //create location
        location = DirParty::primaryPostalAddressLocation(custTable.Party);
        if (location && location.parmLocationRecId())
        {
            newProj.DlvName = location.parmLocationDescription();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAllRefDataForNewProj</Name>
				<Source><![CDATA[
    public void copyAllRefDataForNewProj()
    {
        this.copyProjTeamForNewProj();
        this.copyActivityForNewProj();
        this.copyPwpSettingForNewProj();
        this.copyAttachedDocForNewProj();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyActivityForNewProj</Name>
				<Source><![CDATA[
    public Map copyActivityForNewProj()
    {
        Hierarchy                   hierarchy;
        HierarchyCreate             hierarchyCreate;
        HierarchyLinkTable          hierarchyLinkTable;

        ttsbegin;
        // copy only if old proj has hierarchy
        if (HierarchyLinkTable::findRefTableRecId(tablenum(ProjTable), existingProj.RecId))
        {
            //create hierarchylinktable record
            select HierarchyId, refRecId from hierarchyLinkTable where hierarchyLinkTable.RefRecId == newProj.RecId;

            if (hierarchyLinkTable)
            {
                select hierarchy where hierarchy.HierarchyId == hierarchyLinkTable.HierarchyId;
            }
            else
            {
                //create Hierarchy record
                hierarchyCreate = HierarchyCreate::construct(HierarchyType::Project);
                hierarchyCreate.parmSourceCommon(newProj);
                hierarchyCreate.run();
                hierarchy = hierarchyCreate.parmHierarchy();
            }

            if (hierarchy)
            {
                // this will copy Activity, Activity requirements and generic resource assignment
                activityNumberMapping = HierarchyTemplateCopying_Proj::runOnServer(existingProj.ProjId,
                                                                              buf2Con(hierarchy),
                                                                              true,
                                                                              true,
                                                                              conNull(),
                                                                              "",
                                                                              true,
                                                                              false,
                                                                              null,
                                                                              false,
                                                                              genericResourceMapping);
            }
        }
        ttscommit;
        return activityNumberMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyPwpSettingForNewProj</Name>
				<Source><![CDATA[
    public void copyPwpSettingForNewProj()
    {
        ProjPWPVendorRetentionSetting   existingProjPWPVendorRetentionSetting;
        ProjPWPVendorRetentionSetting   newProjPWPVendorRetentionSetting;

        select existingProjPWPVendorRetentionSetting
        where existingProjPWPVendorRetentionSetting.ProjId == existingProj.ProjId;

        if (existingProjPWPVendorRetentionSetting)
        {
            ttsbegin;
            newProjPWPVendorRetentionSetting.data(existingProjPWPVendorRetentionSetting);
            newProjPWPVendorRetentionSetting.ProjId = newProjProjId;
            newProjPWPVendorRetentionSetting.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAttachedDocForNewProj</Name>
				<Source><![CDATA[
    public void copyAttachedDocForNewProj()
    {
        Docu::copy(existingProj, newProj);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewProj</Name>
				<Source><![CDATA[
    public void createNewProj()
    {
        ttsbegin;
        newProj.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNewProj</Name>
				<Source><![CDATA[
    public void updateNewProj()
    {
        ttsbegin;
        newProj.selectForUpdate(true);
        newProj.Update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyProjTeamForNewProj</Name>
				<Source><![CDATA[
    public Map copyProjTeamForNewProj()
    {
        ResActivityResourceCalendarView     activityResourceCalendarView;
        PSAProjSchedRole                    existingProjPSAProjSchedRole;
        PSAProjSchedRole                    newProjPSAProjSchedRole;
        Days                                dayDiff_ProjectStart_TeamStart;
        Days                                dayDiff_TeamStart_TeamEnd;
        CalendarId                          calendarId;
        DataAreaId                          companyId;
        ResGenericResourceNameGenerator     resourceName;

        resourceName                = ResGenericResourceNameGenerator::construct();

        ttsbegin;
        while select existingProjPSAProjSchedRole
            where existingProjPSAProjSchedRole.ProjId == existingProj.ProjId
        {
            Global::buf2Buf(existingProjPSAProjSchedRole, newProjPSAProjSchedRole);

            if (existingProj.PSASchedIgnoreCalendar)
            {
                calendarId = existingProj.PSASchedCalendarId;
                companyId  = existingProj.DataAreaId;
            }
            else
            {
                CalendarRecId calendar = ActivityResourceFacade::getCalendar(existingProjPSAProjSchedRole.RecId);
                if (calendar)
                {
                    WorkCalendarTable workCalendarTable = WorkCalendarTable::findByRecId(calendar);

                    calendarId = workCalendarTable.CalendarId;
                    companyId  = WorkCalendarTable.DataAreaId;
                }
            }

            
            // calculate the day difference between project start date and team member start date of
            // existing project
            dayDiff_ProjectStart_TeamStart = WorkCalendarCalculator::calcDuration(existingProj.PSASchedStartDate, existingProjPSAProjSchedRole.PSARoleStartDate, existingProj.PSASchedCalendarId);

            if (calendarId && companyId)
            {
                changecompany(companyId)
                {
                    // calculate the day difference between team member start date and team member end date of existing project
                    dayDiff_TeamStart_TeamEnd = WorkCalendarCalculator::calcDuration(existingProjPSAProjSchedRole.PSARoleStartDate, existingProjPSAProjSchedRole.PSARoleEndDate, calendarId);
                }
            }
            else
            {
                dayDiff_TeamStart_TeamEnd = dayDiff_ProjectStart_TeamStart;
            }

            newProjPSAProjSchedRole.PSARoleStartDate        = WorkCalendarCalculator::findEndDateForStartDateAndDuration(newProj.PSASchedStartDate, dayDiff_ProjectStart_TeamStart, newProj.PSASchedCalendarId);
            newProjPSAProjSchedRole.PSARoleEndDate          = WorkCalendarCalculator::findEndDateForStartDateAndDuration(newProjPSAProjSchedRole.PSARoleStartDate, dayDiff_TeamStart_TeamEnd, newProj.PSASchedCalendarId);
            newProjPSAProjSchedRole.ProjId                  = newProj.ProjId;
            newProjPSAProjSchedRole.Resource                = 0;

            // we assume if the existing project\template is already using generic resource, the name of the resource should be unique
            // and no need to update it
            if (existingProjPSAProjSchedRole.Resource != 0)
            {
                newProjPSAProjSchedRole.Name = resourceName.getNextNewName(ResourceCategoryFacade::getId(newProjPSAProjSchedRole.ResourceCategory));
            }

            newProjPSAProjSchedRole.insert();
            genericResourceMapping.insert(existingProjPSAProjSchedRole.RecId, newProjPSAProjSchedRole.RecId);

            // copy project resource Requirement
            ResCharacteristicRequirement::copyResRequirement(existingProjPSAProjSchedRole.RecId, newProjPSAProjSchedRole.RecId, ResCharacteristicReqEntityType::ActivityResource);

            // copy resource booking hours
            this.copyBookedCapacity(existingProjPSAProjSchedRole, newProjPSAProjSchedRole);
        }
        ttscommit;
        return genericResourceMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyBookedCapacity</Name>
				<Source><![CDATA[
    private void copyBookedCapacity(PSAProjSchedRole _existingProjPSAProjSchedRole, PSAProjSchedRole _newProjPSAProjSchedRole)
    {
        real softBookedSecs;
        real hardBookedSecs;

        // copy soft booked hours
        softBookedSecs = ActivityResourceFacade::getBookedCapacity(_existingProjPSAProjSchedRole.RecId, ResCommitType::SoftBook);
        this.bookResourceForNewProj(_newProjPSAProjSchedRole, softBookedSecs, ResCommitType::SoftBook);

        // copy hard booked hours
        hardBookedSecs = ActivityResourceFacade::getBookedCapacity(_existingProjPSAProjSchedRole.RecId, ResCommitType::HardBook);
        this.bookResourceForNewProj(_newProjPSAProjSchedRole, hardBookedSecs, ResCommitType::HardBook);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bookResourceForNewProj</Name>
				<Source><![CDATA[
    private void bookResourceForNewProj(PSAProjSchedRole _newProjPSAProjSchedRole, real _bookedCapacity, ResCommitType _commitType)
    {
        ResReservationSchedule schedule        = ResReservationSchedule::construct();
        ResIResourceManager    resourceManager = ResResourceManager::construct();
        ResIReserveProcessor   reserveProcessor = ResReserveProcessor::getProcessor(ResBookingType::DistributeCapacityEvenly);

        // book resource to a project
        if (_bookedCapacity > 0)
        {
            schedule.ActivityResource(_newProjPSAProjSchedRole.RecId);
            schedule.Activity(ProjWBS::getRootActivityRecId(newProj.ProjId));
            schedule.Start(DateTimeUtil::newDateTime(_newProjPSAProjSchedRole.PSARoleStartDate, 0));
            schedule.End(DateTimeUtil::newDateTime(_newProjPSAProjSchedRole.PSARoleEndDate, #LastSecondOfTheDay));
            schedule.Commitment(_commitType);
            schedule.ReservationType(ResReservationType::Booking);

            List schedules = new List(Types::Class);
            schedules.addEnd(schedule);

            resourceManager.ReserveProcessor(reserveProcessor);
            resourceManager.Schedules(schedules);
            resourceManager.Capacity(_bookedCapacity);
            resourceManager.Reserve(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNewProjWorkingDates</Name>
				<Source><![CDATA[
    private void updateNewProjWorkingDates()
    {
        Days    oldProjDuration;

        if (!WorkCalendarDate::isPickupDate(newProj.PsaSchedCalendarId, newProj.ProjectedStartDate))
        {
            newProj.PsaSchedStartDate  = WorkCalendar::findOpenDateForward(newProj.PsaSchedCalendarId, newProj.ProjectedStartDate, newProj.PsaSchedFromTime);
        }
        else
        {
            newProj.PsaSchedStartDate  = newProj.ProjectedStartDate;
        }

        if (existingProj.PSASchedCalendarId)
        {
            oldProjDuration         = WorkCalendarCalculator::calcDuration(existingProj.PSASchedStartDate, existingProj.PSASchedEndDate, existingProj.PSASchedCalendarId);
            newProj.PsaSchedEndDate  = WorkCalendarCalculator::findEndDateForStartDateAndDuration(newProj.ProjectedStartDate, oldProjDuration, newProj.PSASchedCalendarId);
        }
        else
        {
            newProj.PsaSchedEndDate    = newProj.ProjectedStartDate;
        }

        newProj.ProjectedEndDate = newProj.PsaSchedEndDate;
        newProj.PSASchedEffort = 0;
        newProj.PSASchedScheduled = PSAScheduled::NotScheduled;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>