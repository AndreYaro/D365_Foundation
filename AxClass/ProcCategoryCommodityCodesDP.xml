<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProcCategoryCommodityCodesDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProcCategoryCommodityCodesDP</c> class provides data for the
/// <c>ProcCategoryCommodityCodes</c>Microsoft SQL Server Reporting Services report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProcCategoryCommodityCodes)),
    SRSReportParameterAttribute(classstr(ProcCategoryCommodityCodesContract))
]
public class ProcCategoryCommodityCodesDP extends SRSReportDataProviderBase
{
    ProcCategoryTmpCommodityCode   procCategoryTmpCommodityCode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProcCategoryTmpCommodityCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>ProcCategoryTmpCommodityCode</c> table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>ProcCategoryTmpCommodityCode</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(ProcCategoryTmpCommodityCode))
    ]
    public ProcCategoryTmpCommodityCode getProcCategoryTmpCommodityCode()
    {
        select procCategoryTmpCommodityCode;
        return procCategoryTmpCommodityCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the Microsoft SQL Server Reporting Services report.
    /// </summary>
    /// <remarks>
    /// This method provides the ability to write the report business logic. It will be called by Reporting
    /// Services at run time. The method computes data and populates the data tables that will be returned
    /// to Reporting Services.
    /// </remarks>
    public void processReport()
    {
        ProcCategoryCommodityCodesContract  contract = this.parmDataContract() as ProcCategoryCommodityCodesContract;

        QueryRun                            queryRun;
        QueryBuildRange                     categoryBuildRange;
        EcoResCategory                      procCategory, procCommodity;
        EcoResCategoryTranslation           ecoResCategoryTranslation;
        List                                category;
        ListEnumerator                      categoryEnum;

        category = contract.parmCategory();

        this.parmQuery().dataSourceTable(tablenum(EcoResCategory), 1).clearRanges();
        categoryBuildRange = this.parmQuery().dataSourceTable(tablenum(EcoResCategory), 1).addRange(fieldnum(EcoResCategory, RecId));

        // when the container is empty,
        // it should be no categories
        // and not all categories.
        categoryEnum = category.getEnumerator();
        while (categoryEnum.moveNext())
        {
            categoryBuildRange.value(queryRangeConcat(categoryBuildRange.value(), categoryEnum.current()));
        }

        categoryBuildRange.value(queryRangeConcat(categoryBuildRange.value(), 0));

        queryRun = new QueryRun(this.parmQuery());

        ttsbegin;

        while (queryRun.next())
        {
            procCategoryTmpCommodityCode.clear();
            ecoResCategoryTranslation   = queryRun.get(tablenum(EcoResCategoryTranslation));
            procCategory                = queryRun.get(tablenum(EcoResCategory), 1);
            procCommodity               = queryRun.get(tablenum(EcoResCategory), 2);

            procCategoryTmpCommodityCode.Category          = procCategory.RecId;
            procCategoryTmpCommodityCode.CategoryName      = procCategory.Name;
            procCategoryTmpCommodityCode.FriendlyName      = ecoResCategoryTranslation.FriendlyName;
            procCategoryTmpCommodityCode.Description       = ecoResCategoryTranslation.Description;
            procCategoryTmpCommodityCode.CreateDate        = procCategory.CreatedDateTime;
            procCategoryTmpCommodityCode.LastModifiedDate  = procCategory.ModifiedDateTime;
            procCategoryTmpCommodityCode.LastModifiedBy    = procCategory.ModifiedBy;
            procCategoryTmpCommodityCode.CommodityName     = procCommodity.Name;
            procCategoryTmpCommodityCode.CommodityCode     = procCommodity.Code;

            procCategoryTmpCommodityCode.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
