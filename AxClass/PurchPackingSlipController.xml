<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPackingSlipController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchPackingSlipController</c> is the helper class for the associated SSRS Report.
/// </summary>
public class PurchPackingSlipController extends TradeDocumentReportController implements BatchRetryable
{
    PurchPackingSlipJournalPrint        purchPackingSlipJournalPrint;
    VendPackingSlipVersion              vendPackingSlipVersion;
    VendPackingSlipJour                 vendPackingSlipJour;

    RecordSortedList                    journalListJournals;
    Map                                 vendPackingSlipJournalMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>convertToLatestVersionJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the list of journals to the list of latest versions.
    /// </summary>
    /// <param name="_sourceJournalList">
    /// The journals to convert.
    /// </param>
    /// <remarks>
    /// If report data already exist for a journal record then the jornal will be added to dataReadyJournalList record list.
    /// </remarks>
    protected void convertToLatestVersionJournalList(RecordSortedList _sourceJournalList)
    {
        VendPackingSlipVersion  localVendPackingSlipVersion;
        VendPackingSlipJour     localVendPackingSlipJour;

        if (_sourceJournalList && _sourceJournalList.first(localVendPackingSlipJour))
        {
            do
            {
                if (localVendPackingSlipJour.isProforma() && PurchPackingSlipHeaderTmp::existJourRecId(localVendPackingSlipJour.RecId))
                {
                    if (!dataReadyJournalList)
                    {
                        dataReadyJournalList = new RecordSortedList(tableNum(VendPackingSlipJour));
                        dataReadyJournalList.sortOrder(fieldNum(VendPackingSlipJour, RecId));
                    }
                    dataReadyJournalList.ins(localVendPackingSlipJour);
                }
                else
                {
                    localVendPackingSlipVersion = VendPackingSlipVersion::findLatest(localVendPackingSlipJour.RecId);
                    if (localVendPackingSlipVersion)
                    {
                        if (!journalList)
                        {
                            journalList = new RecordSortedList(tableNum(VendPackingSlipVersion));
                            journalList.sortOrder(fieldNum(VendPackingSlipVersion, RecId));
                        }
                        journalList.ins(localVendPackingSlipVersion);
                    }
                }
            }
            while (_sourceJournalList.next(localVendPackingSlipJour));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the title for the document.
    /// </summary>
    /// <returns>
    /// The document title.
    /// </returns>
    protected str documentTitle()
    {
        str documentTitle;

        if (vendPackingSlipJour.PurchaseType == PurchaseType::ReturnItem)
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (vendPackingSlipJour.isProforma())
                {
                    documentTitle = literalStr("@SYS70796");
                }
                else
                {
                    documentTitle = literalStr("@SYS24430");
                }
            }
            else
            {
                if (vendPackingSlipJour.isProforma())
                {
                    documentTitle = literalStr("@SYS12874");
                }
                else
                {
                    documentTitle = literalStr("@SYS11549");
                }
            }
        }
        else
        {
            if (printCopyOriginal == PrintCopyOriginal::Copy)
            {
                if (vendPackingSlipJour.isProforma())
                {
                    documentTitle = literalStr("@SYS343415");
                }
                else
                {
                    documentTitle = literalStr("@SYS332884");
                }
            }
            else
            {
                if (vendPackingSlipJour.isProforma())
                {
                    documentTitle = literalStr("@SYS333388");
                }
                else
                {
                    documentTitle = literalStr("@SYS333386");
                }
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentIdentifier</Name>
				<Source><![CDATA[
    protected str documentIdentifier()
    {
        return vendPackingSlipJour.PackingSlipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReportExceptions</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean handleReportExceptions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextTableId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected TableId reportExceptionContextTableId()
    {
        return vendPackingSlipJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextRecordId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected RecId reportExceptionContextRecordId()
    {
        return vendPackingSlipJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstDataReadyJournal</Name>
				<Source><![CDATA[
    protected boolean getFirstDataReadyJournal()
    {
        return dataReadyJournalList.first(vendPackingSlipJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstJournal</Name>
				<Source><![CDATA[
    protected boolean getFirstJournal()
    {
        if (PurchPackingSlipPrintGetJournalReportFlight::instance().isEnabled() && journalList.len() > 1)
        {
            this.initVendPackingSlipJournalMap();

            if (journalListJournals.first(vendPackingSlipJour))
            {
                vendPackingSlipVersion = vendPackingSlipJournalMap.lookup(vendPackingSlipJour.RecId);
                return true;
            }
        }
        else if (journalList.first(vendPackingSlipVersion))
        {
            vendPackingSlipJour = VendPackingSlipJour::findRecId(vendPackingSlipVersion.VendPackingSlipJour);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendPackingSlipJournalMap</Name>
				<Source><![CDATA[
    private void initVendPackingSlipJournalMap()
    {
        journalList.first(vendPackingSlipVersion);

        vendPackingSlipJournalMap = new Map(Types::Int64, Types::Record);
            
        do
        {
            vendPackingSlipJour = VendPackingSlipJour::findRecId(vendPackingSlipVersion.VendPackingSlipJour);

            if (!journalListJournals)
            {
                journalListJournals = new RecordSortedList(tableNum(VendPackingSlipJour));
                journalListJournals.sortOrderFromContainer(FormLetterSortingParameters::formLetterSorting(tableNum(VendPackingSlipJour), fieldNum(VendPackingSlipJour, RecId)));

            }
            journalListJournals.ins(vendPackingSlipJour);

            vendPackingSlipJournalMap.add(vendPackingSlipJour.RecId, vendPackingSlipVersion);
        }
        while (journalList.next(vendPackingSlipVersion));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextDataReadyJournal</Name>
				<Source><![CDATA[
    protected boolean getNextDataReadyJournal()
    {
        return dataReadyJournalList.next(vendPackingSlipJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextJournal</Name>
				<Source><![CDATA[
    protected boolean getNextJournal()
    {
        if (PurchPackingSlipPrintGetJournalReportFlight::instance().isEnabled() && journalListJournals && journalListJournals.len())
        {
            if (journalListJournals.next(vendPackingSlipJour))
            {
                vendPackingSlipVersion = vendPackingSlipJournalMap.lookup(vendPackingSlipJour.RecId);
                return true;
            }
        }
        else if (journalList.next(vendPackingSlipVersion))
        {
            vendPackingSlipJour = VendPackingSlipJour::findRecId(vendPackingSlipVersion.VendPackingSlipJour);
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record ID of the journal record that is to be passed to the contract.
    /// </summary>
    /// <returns>
    /// The record ID of the journal record.
    /// </returns>
    protected RecId getRecordId()
    {
        if (dataReady)
        {
            return vendPackingSlipJour.RecId;
        }
        else
        {
            return vendPackingSlipVersion.RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record table ID of the journal record that is to be passed to the contract.
    /// </summary>
    /// <returns>
    /// The table ID of the journal record.
    /// </returns>
    protected TableId getTableId()
    {
        if (dataReady)
        {
            return tableNum(VendPackingSlipJour);
        }
        else
        {
            return tableNum(VendPackingSlipVersion);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchPackingSlipJournalPrint))
        {
            purchPackingSlipJournalPrint     = this.parmArgs().caller();
        }

        this.initializeJournalLists(this.parmArgs());

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::PurchaseOrderPackingSlip);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (purchPackingSlipJournalPrint)
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(purchPackingSlipJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(purchPackingSlipJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(purchPackingSlipJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalLists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal list used to print the reports based on arguments to the report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    /// <remarks>
    /// The report can be opened from multiple sources. This will result in either a
    /// <c>VendPackingSlipJour</c>, <c>VendPackingSlipVersion</c> buffer, or a <c>RecordSortedList</c> of
    /// <c>VendPackingSlipHeader</c> buffers.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    /// An invalid buffer was parsed as argument.
    /// </exception>
    public void initializeJournalLists(Args _args)
    {
        RecordSortedList    argJourList;
        Common              common = _args.record();

        if (common)
        {
            argJourList = FormLetter::createJournalListCopy(common);

            switch (common.TableId)
            {
                case tableNum(VendPackingSlipVersion):
                    journalList = argJourList;
                    break;
                case tableNum(VendPackingSlipJour):
                    this.convertToLatestVersionJournalList(argJourList);
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            this.convertToLatestVersionJournalList(_args.object());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    protected void output()
    {
        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().documentReport().output(this.reportExceptionContextTableId(), this.reportExceptionContextRecordId()))
        {
            formLetterReport.loadPrintSettings(vendPackingSlipJour, PurchTable::find(vendPackingSlipJour.PurchId), vendPackingSlipJour.LanguageId);
            this.parmReportContract().parmRdlContract().parmLanguageId(vendPackingSlipJour.LanguageId);
            this.parmReportContract().parmRdlContract().parmLabelLanguageId(vendPackingSlipJour.LanguageId);

            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataContractRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>VendPackingSlipVersion</c> record based on a <c>VendPackingSlipJour</c> table buffer.
    /// </summary>
    /// <param name="_common">
    /// A <c>VendPackingSlipJour</c> record.
    /// </param>
    protected void setDataContractRecord(Common _common)
    {
        vendPackingSlipVersion = VendPackingSlipVersion::findLatest(_common.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchPackingSlipController construct()
    {
        return new PurchPackingSlipController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        SrsReportRunController      formLetterController  = PurchPackingSlipController::construct();
        PurchPackingSlipController  controller;
        // <GEERU>
        #isoCountryRegionCodes
        // </GEERU>

        if (TradeFormHelper::isCalledFromForm(_args, formStr(VendPackingSlipJournalListPage)))
        {
            _args.record(VendPackingSlipJour::findRecId(_args.record().RecId));
        }

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            if (!NonSSRSPrintMgmtAdapter::runPrintMgmtNonSSRS(PrintMgmtDocumentType::PurchaseOrderPackingSlip, _args))
            {
                return;
            }
        }
        // </GEERU>

        controller = formLetterController;
        controller.initArgs(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderPackingSlip).getDefaultReportFormat());

        if (classIdGet(_args.caller()) == classNum(PurchPackingSlipJournalPrint))
        {
            formLetterController.renderingCompleted += eventhandler(purchPackingSlipJournalPrint::renderingCompleted);
        }
        formLetterController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDataContract</Name>
				<Source><![CDATA[
    public static SrsReportDataContract newDataContract(Args _args)
    {
        PurchPackingSlipController formLetterController = PurchPackingSlipController::construct();

        if (_args.dataset() != tableNum(VendPackingSlipJour))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        formLetterController.initDataContract(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderPackingSlip).getDefaultReportFormat());

        return formLetterController.parmReportContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>