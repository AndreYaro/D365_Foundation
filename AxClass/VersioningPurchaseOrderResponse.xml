<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningPurchaseOrderResponse</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VersioningPurchaseOrderResponse</c> class is the purchase order response versioning state model implementation.
/// </summary>
public class VersioningPurchaseOrderResponse extends VersioningDocument
{
    boolean                                 versionCreated;
    PurchaseOrderResponseVersionRecId       responseVersionRecId;
    PurchaseOrderResponseHeaderRecId        responseRecId;
    PurchTableVersionRecId                  purchTableVersionRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>archiveCurrentVersion</Name>
				<Source><![CDATA[
    protected void archiveCurrentVersion()
    {
        PurchaseOrderResponseHeader responseHeader =
            PurchaseOrderResponseHeader::find(responseRecId);

        PurchaseOrderResponseVersion responseVersion =
            responseHeader.findLatestResponseVersion(true);

        responseVersion.IsArchived = NoYes::Yes;
        responseVersion.update();

        PurchaseOrderResponseHeaderHistory responseHeaderHistory =
            this.archiveResponseHeader(responseHeader, responseVersion);

        this.archiveResponseLines(responseHeader, responseVersion, responseHeaderHistory);
        this.archiveHeaderDocuments(responseHeader.RecId, responseHeaderHistory.RecId);
        this.archiveLineDocuments(responseHeaderHistory.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewVersion</Name>
				<Source><![CDATA[
    protected PurchaseOrderResponseHeaderRecId createNewVersion(VersioningTimeStamp _versionTimeStamp = DateTimeUtil::minValue(),
                                        boolean _isProformaVersion = false)
    {
        PurchaseOrderResponseVersion purchaseOrderResponseVersion;

        if (versionCreated)
        {
            return responseVersionRecId;
        }

        purchaseOrderResponseVersion.PurchaseOrderResponseHeader = responseRecId;
        purchaseOrderResponseVersion.PurchTableVersion           = this.purchTableVersionRecId;
        purchaseOrderResponseVersion.VersionDateTime             = this.getResponseVersionDateTime();
        purchaseOrderResponseVersion.IsArchived                  = false;
        purchaseOrderResponseVersion.ResponseState				 = PurchaseOrderResponseState::Pending;
        purchaseOrderResponseVersion.insert();

        versionCreated = true;
        responseVersionRecId = purchaseOrderResponseVersion.RecId;
        return responseVersionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeConfirmationRequired</Name>
				<Source><![CDATA[
    protected boolean isChangeConfirmationRequired(Common _newRecord, Common _oldRecord)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeRequestRequired</Name>
				<Source><![CDATA[
    protected boolean isChangeRequestRequired()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDocumentState</Name>
				<Source><![CDATA[
    protected void setDocumentState(VersioningDocumentState _versioningState)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesHistoryExist</Name>
				<Source><![CDATA[
    public boolean doesHistoryExist()
    {
        PurchaseOrderResponseHeaderArchivedVersions responseHeaderArchivedVersions;
        PurchTableVersion purchTableVersion;

        select firstonly RecId from responseHeaderArchivedVersions
            exists join purchTableVersion
            where responseHeaderArchivedVersions.PurchId == purchTableVersion.PurchId
            && purchTableVersion.RecId == purchTableVersionRecId;

        return responseHeaderArchivedVersions.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentState</Name>
				<Source><![CDATA[
    public VersioningDocumentState getDocumentState()
    {
        return VersioningDocumentState::Approved;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastVersionArchived</Name>
				<Source><![CDATA[
    public boolean isLastVersionArchived()
    {
        PurchaseOrderResponseHeader responseHeader = PurchaseOrderResponseHeader::find(responseRecId);
        PurchaseOrderResponseVersion responseVersion = responseHeader.findLatestResponseVersion();

        return !responseVersion || responseVersion.IsArchived;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromResponse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>VersioningPurchaseOrderResponse</c> class.
    /// </summary>
    /// <param name = "_responseRecId">RecId of <c>PurchaseOrderResponseHeader</c> table.</param>
    /// <param name = "_purchTableVersionRecId">RecId of <c>PurchTableVersion</c> table.</param>
    /// <returns>A new instance of the <c>VersioningPurchaseOrderResponse</c> class.</returns>
    public static VersioningPurchaseOrderResponse newFromResponse(PurchaseOrderResponseHeaderRecId _responseRecId,
        PurchTableVersionRecId _purchTableVersionRecId)
    {
        VersioningPurchaseOrderResponse versioningPurchaseOrderResponse = new VersioningPurchaseOrderResponse();
        versioningPurchaseOrderResponse.parmResponseRecId(_responseRecId);
        versioningPurchaseOrderResponse.parmPurchTableVersionRecId(_purchTableVersionRecId);
        return versioningPurchaseOrderResponse;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchTableVersionRecId</Name>
				<Source><![CDATA[
    public PurchTableVersionRecId parmPurchTableVersionRecId(PurchTableVersionRecId _purchTablerVersionRecId)
    {
        this.purchTableVersionRecId = _purchTablerVersionRecId;

        return this.purchTableVersionRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResponseRecId</Name>
				<Source><![CDATA[
    public PurchaseOrderResponseHeaderRecId parmResponseRecId(PurchaseOrderResponseHeaderRecId _responseRecId = responseRecId)
    {
        responseRecId = _responseRecId;

        return responseRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseState</Name>
				<Source><![CDATA[
    public PurchaseOrderResponseState getResponseState()
    {
        PurchaseOrderResponseVersion responseVersion;

        select firstonly ResponseState from responseVersion order by VersionDateTime desc
            where responseVersion.PurchaseOrderResponseHeader == responseRecId;

        return responseVersion.ResponseState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertToPreviousVersion</Name>
				<Source><![CDATA[
    public void revertToPreviousVersion()
    {
        PurchaseOrderResponseHeaderHistory responseHeaderHistory;
        PurchaseOrderResponseVersion responseVersion;

        responseVersion.selectForUpdate(true);

        select firstonly responseHeaderHistory
            order by responseVersion.VersionDateTime desc
            join responseVersion
            where responseVersion.PurchTableVersion == purchTableVersionRecId
               && responseVersion.VersionDateTime >= responseHeaderHistory.ValidFrom
               && responseVersion.VersionDateTime <= responseHeaderHistory.ValidTo
               && responseVersion.IsArchived == NoYes::Yes
               && responseVersion.PurchaseOrderResponseHeader == responseHeaderHistory.PurchaseOrderResponseHeader;

        if (!responseHeaderHistory)
        {
            throw error("@SCM:NoValidVersionToRevertTo");
        }

        PurchaseOrderResponseHeader responseHeader = this.restoreHeader(responseHeaderHistory);
        this.restoreLines(responseHeaderHistory, responseHeader);
        this.invalidatePreviousVersion(responseVersion);
        this.setCurrentVersionToPending(responseHeader);
        this.restoreHeaderAttachedDocuments(responseHeaderHistory, responseHeader);
        this.restoreLineAttachedDocuments(responseHeaderHistory, responseHeader);
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreHeaderAttachedDocuments</Name>
				<Source><![CDATA[
    private void restoreHeaderAttachedDocuments(PurchaseOrderResponseHeaderHistory _responseHeaderHistory,
        PurchaseOrderResponseHeader _responseHeader)
    {
        _responseHeader.deleteExistingAttachedDocumentOnHeader();

        RecordInsertList docuRefList = new RecordInsertList(tableNum(DocuRef));
        DocuRef docuRef, docuRefToInsert;

        while select docuRef
            where docuRef.RefRecId == _responseHeaderHistory.RecId
                && docuRef.RefTableId == _responseHeaderHistory.TableId
                && docuRef.RefCompanyId == _responseHeaderHistory.DataAreaId
        {
            docuRefToInsert.initDocuRef(_responseHeader.TableId, _responseHeader.RecId, docuRef);
            docuRefList.add(docuRefToInsert);
        }
        docuRefList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreLineAttachedDocuments</Name>
				<Source><![CDATA[
    private void restoreLineAttachedDocuments(PurchaseOrderResponseHeaderHistory _responseHeaderHistory,
        PurchaseOrderResponseHeader _responseHeader)
    {
        _responseHeader.deleteExistingAttachedDocumentOnLines();

        RecordInsertList docuRefList = new RecordInsertList(tableNum(DocuRef));
        PurchaseOrderResponseLine responseLine;
        DocuRef docuRef, docuRefToInsert;
        PurchaseOrderResponseLineHistory responseLineHistory;

        while select docuRef
            join responseLine
                where responseLine.PurchaseOrderResponseHeader == _responseHeader.RecId
                exists join responseLineHistory
                where responseLineHistory.PurchaseOrderResponseHeaderHistory == _responseHeaderHistory.RecId
                    && docuRef.RefRecId == responseLineHistory.RecId
                    && docuRef.RefTableId == tableNum(PurchaseOrderResponseLineHistory)
                    && docuRef.RefCompanyId == responseLineHistory.DataAreaId
                    && responseLineHistory.LineNumber == responseLine.LineNumber
        {
            docuRefToInsert.initDocuRef(tableNum(PurchaseOrderResponseLine), responseLine.RecId, docuRef);
            docuRefList.add(docuRefToInsert);
        }
        docuRefList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Restores the purchase order lines in <c>PurchaseOrderResponseLine</c>,
    /// based on the given response header history.
    /// </summary>
    /// <param name = "_responseHeaderHistory">
    /// The purchase order response header history to restore lines from.
    /// </param>
    /// <param name = "_responseHeader">
    /// The current purchase order response version to revert from.
    /// </param>
    protected void restoreLines(PurchaseOrderResponseHeaderHistory _responseHeaderHistory,
        PurchaseOrderResponseHeader _responseHeader)
    {
        _responseHeader.deleteExistingLines();

        RecordInsertList responseLineList = new RecordInsertList(tableNum(PurchaseOrderResponseLine));
        PurchaseOrderResponseLine responseLine;
        PurchaseOrderResponseLineHistory responseLineHistory;

        while select responseLineHistory
            where responseLineHistory.PurchaseOrderResponseHeaderHistory == _responseHeaderHistory.RecId
        {
            responseLine.clear();
            responseLine.initFromResponseLineHistory(responseLineHistory);
            responseLineList.add(responseLine);
        }

        responseLineList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>restoreHeader</Name>
				<Source><![CDATA[
    private PurchaseOrderResponseHeader restoreHeader(PurchaseOrderResponseHeaderHistory _responseHeaderHistory)
    {
        PurchaseOrderResponseHeader responseHeader =
            PurchaseOrderResponseHeader::find(responseRecId, true);

        responseHeader.initFromPurchaseOrderResponseHeaderHistory(_responseHeaderHistory);
        responseHeader.update();

        return responseHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidatePreviousVersion</Name>
				<Source><![CDATA[
    private void invalidatePreviousVersion(PurchaseOrderResponseVersion _responseVersion)
    {
        _responseVersion.delete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentVersionToPending</Name>
				<Source><![CDATA[
    private void setCurrentVersionToPending(PurchaseOrderResponseHeader _responseHeader)
    {
        PurchaseOrderResponseVersion responseVersion = _responseHeader.findLatestResponseVersion(true);

        if (responseVersion)
        {
            responseVersion.ResponseState = PurchaseOrderResponseState::Pending;
            responseVersion.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveResponseLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Archives the current purchase order response lines.
    /// </summary>
    /// <param name = "_responseHeader">
    /// The purchase order response header version being archived.
    /// </param>
    /// <param name = "_responseVersion">
    /// The purchase order response version being archived.
    /// </param>
    /// <param name = "_responseHeaderHistory">
    /// The current purchase order response history.
    /// </param>
    protected void archiveResponseLines(PurchaseOrderResponseHeader _responseHeader,
         PurchaseOrderResponseVersion _responseVersion, PurchaseOrderResponseHeaderHistory _responseHeaderHistory)
    {
        RecordInsertList responseLineHistoryList = new RecordInsertList(tableNum(PurchaseOrderResponseLineHistory));
        PurchaseOrderResponseLine responseLine;
        PurchaseOrderResponseLineHistory responseLineHistory;

        while select responseLine
            where responseLine.PurchaseOrderResponseHeader == _responseHeader.RecId
        {
            responseLineHistory.clear();
            responseLineHistory.initFromResponseLine(responseLine);
            responseLineHistory.PurchaseOrderResponseHeaderHistory = _responseHeaderHistory.RecId;
            responseLineHistory.PurchaseOrderResponseLine = responseLine.RecId;
            responseLineHistory.ValidFrom = _responseVersion.VersionDateTime;
            responseLineHistory.ValidTo   = DateTimeUtil::maxValue();
            responseLineHistoryList.add(responseLineHistory);
        }

        responseLineHistoryList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveResponseHeader</Name>
				<Source><![CDATA[
    private PurchaseOrderResponseHeaderHistory archiveResponseHeader(PurchaseOrderResponseHeader _responseHeader,
        PurchaseOrderResponseVersion _responseVersion)
    {
        PurchaseOrderResponseHeaderHistory responseHeaderHistory;
        responseHeaderHistory.initFromResponseHeader(_responseHeader);

        responseHeaderHistory.ValidFrom = _responseVersion.VersionDateTime;
        responseHeaderHistory.ValidTo   = DateTimeUtil::maxValue();
        responseHeaderHistory.PurchaseOrderResponseHeader = _responseHeader.RecId;
        responseHeaderHistory.insert();

        return responseHeaderHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponseVersionDateTime</Name>
				<Source><![CDATA[
    private utcdatetime getResponseVersionDateTime()
    {
        utcdatetime          lastDateTime;
        PurchaseOrderResponseVersion purchaseOrderResponseVersion;

        select firstonly VersionDateTime from purchaseOrderResponseVersion
            order by VersionDateTime desc
            where purchaseOrderResponseVersion.PurchaseOrderResponseHeader == responseRecId;

        if (purchaseOrderResponseVersion.VersionDateTime == DateTimeUtil::minValue() ||
            DateTimeUtil::utcNow() > purchaseOrderResponseVersion.VersionDateTime)
        {
            lastDateTime = DateTimeUtil::utcNow();
        }
        else
        {
            lastDateTime = DateTimeUtil::addSeconds(purchaseOrderResponseVersion.VersionDateTime, 1);
        }

        return lastDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveHeaderDocuments</Name>
				<Source><![CDATA[
    private void archiveHeaderDocuments(PurchaseOrderResponseHeaderRecId _responseHeaderRecId,
        PurchaseOrderResponseHeaderHistoryRecId _purchaseOrderResponseHeaderHistoryRecId)
    {
        DocuRef docuRef, docuRefToInsert;
        RecordInsertList docuRefList = new RecordInsertList(tableNum(DocuRef));

        while select docuRef
            where docuRef.RefTableId == tableNum(PurchaseOrderResponseHeader)
                && docuRef.RefRecId == _responseHeaderRecId
        {
            docuRefToInsert.initDocuRef(tableNum(PurchaseOrderResponseHeaderHistory), _purchaseOrderResponseHeaderHistoryRecId, docuRef);
            docuRefList.add(docuRefToInsert);
        }
        docuRefList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveLineDocuments</Name>
				<Source><![CDATA[
    private void archiveLineDocuments(PurchaseOrderResponseHeaderHistoryRecId _purchaseOrderResponseHeaderHistoryRecId)
    {
        PurchaseOrderResponseLineHistory purchaseOrderResponseLineHistory;
        DocuRef docuRef, docuRefToInsert;
        RecordInsertList docuRefList = new RecordInsertList(tableNum(DocuRef));

        while select docuRef
            join purchaseOrderResponseLineHistory
                where purchaseOrderResponseLineHistory.PurchaseOrderResponseHeaderHistory == _purchaseOrderResponseHeaderHistoryRecId
                    && docuRef.RefTableId == tableNum(PurchaseOrderResponseLine)
                    && docuRef.RefRecId == purchaseOrderResponseLineHistory.PurchaseOrderResponseLine
        {
            docuRefToInsert.initDocuRef(tableNum(PurchaseOrderResponseLineHistory), purchaseOrderResponseLineHistory.RecId, docuRef);
            docuRefList.add(docuRefToInsert);
        }
        docuRefList.insertDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>