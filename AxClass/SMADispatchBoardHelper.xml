<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SMADispatchBoardHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class SMADispatchBoardHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateGanttTmpSMA</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates <c>GanttTmpSMA</c> Table with serviceorderline activities
    /// </summary>
    /// <param name="fromDateTime">
    ///    A Datetime that indicates the start of the activities
    /// </param>
    /// <param name="toDateTime">
    ///    A Datetime that indicates the end of the activities
    /// </param>
    public static GanttTmpSMA populateGanttTmpSMA(FromDateTime _fromDateTime, ToDateTime _toDateTime)
    {
        ProjParameters          parameters = ProjParameters::find();
        HcmWorker               hcmWorker;
        DirPartyTable           dirPartyTable;
        SMADispatchTeamTable    dispatchTeamTable;
        SMADispatchWorkerSetup  dispatchWorkerSetup;
        GanttTmpSMA             ganttSMA;

        ganttSMA.clear();

        while select    PersonnelNumber, RecId  from    hcmWorker
        join            DispatchTeamId          from    dispatchWorkerSetup
        where dispatchWorkerSetup.Worker    ==      hcmWorker.RecId
        join            Name                    from    dirPartyTable
        where           hcmWorker.Person        ==      dirPartyTable.RecId
        join            Description             from    dispatchTeamTable
            where   dispatchWorkerSetup.DispatchTeamId != ''
            &&      dispatchTeamTable.DispatchTeamId == dispatchWorkerSetup.DispatchTeamId
        {
            //validate worker status
            if (parameters.ShowInactiveEmployees == NoYes::Yes ||
                (parameters.ShowInactiveEmployees != NoYes::Yes && HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany().validateWorker(hcmWorker.RecId)))
            {
                ganttSMA = SMADispatchBoardHelper::populateActivities(ganttSMA, hcmWorker, dispatchWorkerSetup.DispatchTeamId, _fromDateTime, _toDateTime, false);
            }
        }
        return ganttSMA;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateActivities</Name>
				<Source><![CDATA[
    static GanttTmpSMA populateActivities(GanttTmpSMA _ganttSMA, HcmWorker _hcmWorker, SMADispatchTeamId _dispatchTeamId, FromDateTime _fromDateTime, ToDateTime _toDateTime, boolean showClosed = false)
    {
        smmActivities               smmActivities;
        smmActivityParentLinkTable  smmActivityParentLinkTable;
        SMAParameters               smaParameters;
        CalendarId                  workerCalendarId;
        int                         serviceActivityCategory = 0;

        smaParameters = SMAParameters::find();
        serviceActivityCategory = smaParameters.ServiceOrderActivityCategory;
        workerCalendarId =  int642str(Workcalendartable::find(WorkCalendarEmployment::findCalendarIdSMA(_hcmWorker.PersonnelNumber)).RecId);

        while select smmActivities
        exists join  smmActivityParentLinkTable
        where        smmActivityParentLinkTable.ActivityNumber  == smmActivities.ActivityNumber
                  && smmActivityParentLinkTable.ParentType      == smmActivityParentType::ServiceOrderLine
                  && smmActivities.ResponsibleWorker            == _hcmWorker.RecId
                  && smmActivities.Category                     == serviceActivityCategory
                  && smmActivities.Dispatched                   != SMADispatched::Never
                  && smmActivities.EndDateTime                  <= _toDateTime
                  && smmActivities.StartDateTime                >= _fromDateTime
                  && (showClosed || smmActivities.Closed        == NoYes::No)
        {
            SMAServiceOrderTable serviceOrderTable;

            _ganttSMA.clear();
            _ganttSMA.DispatchTeamId = _dispatchTeamId;
            _ganttSMA.CalendarId = workerCalendarId;

            serviceOrderTable = SMAServiceOrderTable::findByLineActivityId(smmActivities.ActivityNumber, true);
            if (serviceOrderTable)
            {
                _ganttSMA.ActivityNumber = smmActivities.ActivityNumber;
                _ganttSMA.ActualWork = smmActivities.ActualWork;
                _ganttSMA.AgreementId = serviceOrderTable.AgreementId;
                _ganttSMA.ContactPersonName = serviceOrderTable.contactPersonName();
                _ganttSMA.CustName = serviceOrderTable.customerName();
                _ganttSMA.Description = serviceOrderTable.Description;
                if (smmActivities.Dispatched == SMADispatched::Yes)
                {
                    _ganttSMA.Dispatched = NoYes::Yes;
                }
                else
                {
                    _ganttSMA.Dispatched = NoYes::No;
                }

                _ganttSMA.EndDate = smmActivities.endDate();
                _ganttSMA.EndTime = smmActivities.endTime();
                _ganttSMA.PhaseId = smmActivities.PhaseId;
                _ganttSMA.Priority = serviceOrderTable.Priority;
                _ganttSMA.ProjId = serviceOrderTable.ProjId;
                _ganttSMA.ServiceLevelAgreement = serviceOrderTable.ServiceLevelAgreement;
                _ganttSMA.ServiceOrderId = serviceOrderTable.ServiceOrderId;
                _ganttSMA.SignOff = serviceOrderTable.SignOff;
                _ganttSMA.SLALatestCompletionDateTime = serviceOrderTable.displayLatestCompletionDateTime();
                _ganttSMA.SLAStartDateTime = serviceOrderTable.serviceLevelAgreementStartDateTime();
                _ganttSMA.StartDate = smmActivities.startDate();
                _ganttSMA.StartTime = smmActivities.startTime();
                _ganttSMA.TotalWork = smmActivities.TotalWork;
                _ganttSMA.TypeId = smmActivities.TypeId;
                _ganttSMA.WorkerPersonnelNumber = _hcmWorker.PersonnelNumber;
                _ganttSMA.WorkerPreferredTechnician = serviceOrderTable.WorkerPreferredTechnician;
                _ganttSMA.WorkerResponsible = smmActivities.ResponsibleWorker;
                _ganttSMA.StartDateTime = smmActivities.StartDateTime();
                _ganttSMA.EndDateTime = smmActivities.EndDateTime();
                //insert
                _ganttSMA.insert();
            }
        }
        return _ganttSMA;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>