<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanStatus</c> class is the base class that controls the status of kanbans.
/// </summary>
/// <remarks>
///    The status of a kanban may be:
///    <list type="bullet">
///       <item>
///          <description>Created.</description>
///       </item>
///       <item>
///          <description>Started.</description>
///       </item>
///       <item>
///          <description>Ended.</description>
///       </item>
///    </list>
/// </remarks>
public abstract class KanbanStatus
{
    Kanban                  kanban;
    boolean                 updateJobs;
    KanbanJobStatusUpdate   kanbanJobStatusUpdate;
    LeanCostingFacadeBase   leanCostingFacade;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a Kanban can be deleted.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean canDelete()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveReceivedQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a kanban can have a received quantity.
    /// </summary>
    /// <returns>
    ///    true if the kanban can have a received quantity; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    public boolean canHaveReceivedQty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveScrapQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a kanban can have a scrap quantity.
    /// </summary>
    /// <returns>
    ///    true if the kanban can have a scrap quantity; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.
    /// </remarks>
    public boolean canHaveScrapQty()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correspondingKanbanJobStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the kanban job status that corresponds to a given kanban status.
    /// </summary>
    /// <param name="_status">
    ///    A <c>LeanKanbanStatus</c> enumeration value; optional.
    /// </param>
    /// <returns>
    ///    A <c>LeanKanbanJobStatus</c> enumeration value.
    /// </returns>
    /// <remarks>
    ///    This method returns <c>LeanKanbanJobStatus::Created</c> when a status that corresponds does not
    ///    exist.
    /// </remarks>
    public LeanKanbanJobStatus correspondingKanbanJobStatus(LeanKanbanStatus _status = kanban.Status)
    {
        LeanKanbanJobStatus leanKanbanJobStatus;

        switch (_status)
        {
            case LeanKanbanStatus::Assigned:
                leanKanbanJobStatus = LeanKanbanJobStatus::InProgress;
                break;
            case LeanKanbanStatus::Received:
                leanKanbanJobStatus = LeanKanbanJobStatus::Completed;
                break;
            default:
                leanKanbanJobStatus = LeanKanbanJobStatus::NotPlanned;
                break;
        }

        return leanKanbanJobStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban record is deleted.
    /// </summary>
    public void deleting()
    {
        kanban.type().deleting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban record has been deleted.
    /// </summary>
    public void deleted()
    {
        kanban.type().deleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPreviousStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new <c>KanbanStatusUpdate</c> table buffer in preparation for a status update.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    ///    The target status <c>KanbanStatusUpdate</c> table buffer.
    /// </param>
    /// <returns>
    ///    An initialized <c>KanbanStatusUpdate</c> table buffer.
    /// </returns>
    protected KanbanStatusUpdate initPreviousStatusUpdate(KanbanStatusUpdate _kanbanStatusUpdate)
    {
        Kanban               targetKanban;
        KanbanStatusUpdate   kanbanStatusUpdate;

        targetKanban.data(kanban);
        targetKanban.Status = this.prevStatus(_kanbanStatusUpdate.Type);
        KanbanStatus targetKanbanStatus = KanbanStatus::newKanban(targetKanban,updateJobs);

        kanbanStatusUpdate.data(_kanbanStatusUpdate);
        kanbanStatusUpdate.ParmId                  = '';
        kanbanStatusUpdate.LineNum                 = 0;
        kanbanStatusUpdate.RecId                   = 0;
        kanbanStatusUpdate.JobStatus               = ParmJobStatus::Waiting;
        kanbanStatusUpdate.ExecutedDateTime        = DateTimeUtil::minValue();
        kanbanStatusUpdate.AutoUpdate              = NoYes::Yes;
        kanbanStatusUpdate.Type                    = targetKanban.Status;

        if (kanbanStatusUpdate.QuantityScrapped != 0 &&
            !targetKanbanStatus.canHaveScrapQty())
        {
            kanbanStatusUpdate.QuantityReceived += kanbanStatusUpdate.QuantityScrapped;
            kanbanStatusUpdate.QuantityScrapped  = 0;
        }

        return kanbanStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a <c>KanbanStatusUpdate</c> table buffer.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    ///    The <c>KanbanStatusUpdate</c> table buffer to initialize.
    /// </param>
    /// <param name="_leanKanbanStatus">
    ///    The target status.
    /// </param>
    /// <returns>
    ///    The initialized <c>KanbanStatusUpdate</c> table buffer.
    /// </returns>
    public KanbanStatusUpdate initStatusUpdate(
        KanbanStatusUpdate _kanbanStatusUpdate,
        LeanKanbanStatus   _leanKanbanStatus)
    {
        Kanban          targetKanban;
        TransDate       transDate     = this.minStatusTransactionDate();

        targetKanban.data(kanban);
        targetKanban.Status = _leanKanbanStatus;
        KanbanStatus targetKanbanStatus = KanbanStatus::newKanban(targetKanban,updateJobs);

        transDate = max(transDate,targetKanbanStatus.minStatusTransactionDate());
        TransDateTime transDateTime = max(DateTimeUtil::getSystemDateTime(),
                                          DateTimeUtil::newDateTime(transDate,0,DateTimeUtil::getCompanyTimeZone()));

        _kanbanStatusUpdate.initParmDefault();
        _kanbanStatusUpdate.initFromKanban(kanban);
        _kanbanStatusUpdate.FirstTimeThrough        = NoYes::Yes;
        _kanbanStatusUpdate.QuantityScrapped        = 0;
        _kanbanStatusUpdate.TransactionDateTime     = transDateTime;
        _kanbanStatusUpdate.KanbanCard              = 0;
        _kanbanStatusUpdate.DeleteKanban            = 0;
        _kanbanStatusUpdate.AutoUpdate              = NoYes::No;
        _kanbanStatusUpdate.Type                    = targetKanban.Status;
        _kanbanStatusUpdate.WantedStatus            = targetKanban.Status;

        if (kanbanJobStatusUpdate.RecId)
        {
            _kanbanStatusUpdate.initFromKanbanJobStatusUpdate(kanbanJobStatusUpdate);
        }

        if (_kanbanStatusUpdate.QuantityScrapped != 0 &&
            !targetKanbanStatus.canHaveScrapQty())
        {
            _kanbanStatusUpdate.QuantityScrapped  = 0;
        }

        return _kanbanStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban record is inserted.
    /// </summary>
    public void inserting()
    {
        kanban.type().inserting();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inserted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban record has been inserted.
    /// </summary>
    public void inserted()
    {
        kanban.type().inserted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReadyForStatusReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether all preconditions are met and the <c>Kanban</c> object is ready for a given
    ///    target status update.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    ///    A <c>KanbanStatusUpdate</c> table buffer.
    /// </param>
    /// <param name="_status">
    ///    The target status.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that specifies whether the method can add warnings to the Infolog; optional.
    /// </param>
    /// <returns>
    ///    true if the kanban is ready for the status update; otherwise, false.
    /// </returns>
    public boolean isReadyForStatusReset(
        KanbanStatusUpdate _kanbanStatusUpdate,
        LeanKanbanStatus   _status = this.nextStatus(),
        boolean            _silent = false)
    {
        boolean                 result = true;

        switch (kanban.Status)
        {
            case LeanKanbanStatus::Received:
                if (updateJobs)
                {
                    LeanKanbanJobStatus leanKanbanJobStatus = this.correspondingKanbanJobStatus(_status);
                    KanbanJobStatus kanbanJobStatus = kanban.lastKanbanJob().status(false);
                    result = kanbanJobStatus.isReadyForStatusReset(leanKanbanJobStatus,_silent);
                }
                break;
            case LeanKanbanStatus::Emptied:
                if (_status != LeanKanbanStatus::Received)
                {
                    result = checkFailed(strFmt("@GLS180228",kanban.KanbanId));
                }
                if (   result
                    && !KanbanResetEmptyValidate::isValidKanbanStatusUpdate(_kanbanStatusUpdate,kanban))
                {
                    // throw an error, do not just return false.
                    throw error(strFmt("@GLS180228",kanban.KanbanId));
                }
                break;
            default : result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReadyForStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether all preconditions are met and the <c>Kanban</c> object is ready for a given
    ///    target status update.
    /// </summary>
    /// <param name="_status">
    ///    The target status.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that specifies whether the method can add warnings to the Infolog; optional.
    /// </param>
    /// <returns>
    ///    true if the kanban is ready for the status update; otherwise, false.
    /// </returns>
    public boolean isReadyForStatusUpdate(
        LeanKanbanStatus _status = this.nextStatus(),
        boolean          _silent = false)
    {
        KanbanJob               kanbanJob;
        LeanKanbanJobStatus     leanKanbanJobStatus = this.correspondingKanbanJobStatus(_status);
        boolean                 result = true;

        switch (_status)
        {
            case LeanKanbanStatus::Assigned:
                if (updateJobs)
                {
                    kanbanJob = kanban.firstKanbanJob();
                    result    = kanbanJob.Status >= leanKanbanJobStatus ||
                                kanbanJob.status(false).isReadyForStatusUpdate(leanKanbanJobStatus,true);
                }
                break;
            case LeanKanbanStatus::Received:
                if (updateJobs)
                {
                    kanbanJob = kanban.lastKanbanJob();
                    result    = kanbanJob.Status >= leanKanbanJobStatus ||
                                kanbanJob.status(false).canAcceptComplete();
                }
                break;
            case LeanKanbanStatus::Emptied:
                //must be received
                if (kanban.Status != LeanKanbanStatus::Received)
                {
                    result = _silent ? false : checkFailed(strFmt("@SYS134895",kanban.KanbanId,_status));
                }
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStatusResetAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a status reset to a specified target status is allowed.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    ///    A <c>KanbanStatusUpdate</c> table buffer.
    /// </param>
    /// <param name="_status">
    ///    The target status; optional.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that specifies whether the method can add warnings to the Infolog; optional.
    /// </param>
    /// <returns>
    ///    true if the status reset is allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The status reset is allowed under these conditions:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>All preconditions are met.</description>
    ///       </item>
    ///       <item>
    ///          <description>The current status is after the target status.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public boolean isStatusResetAllowed(
        KanbanStatusUpdate _kanbanStatusUpdate,
        LeanKanbanStatus   _status = this.nextStatus(),
        boolean            _silent = false)
    {
        return    this.isReadyForStatusReset(_kanbanStatusUpdate, _status,_silent)
               && kanban.Status > _status
               && kanban.checkValid(kanban.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStatusUpdateAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a status update to a given target status is allowed.
    /// </summary>
    /// <param name="_status">
    ///    The target status; optional.
    /// </param>
    /// <param name="_silent">
    ///    A Boolean value that specifies whether the method can add warnings to the Infolog; optional.
    /// </param>
    /// <returns>
    ///    true if the status update is allowed; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The status update is allowed under these conditions:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>All preconditions are met.</description>
    ///       </item>
    ///       <item>
    ///          <description>The current status is before the target status.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    public boolean isStatusUpdateAllowed(
        LeanKanbanStatus _status = this.nextStatus(),
        boolean          _silent = false)
    {
        return    this.isReadyForStatusUpdate(_status,_silent)
               && kanban.Status < _status
               && kanban.checkValid(kanban.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>minStatusTransactionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the minimum transaction date for a status change.
    /// </summary>
    /// <returns>
    /// The minimum transaction date.
    /// </returns>
    public TransDate minStatusTransactionDate()
    {
        return dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRunPreviousStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a previous status update must run in order to move from the current status to the
    ///    given status.
    /// </summary>
    /// <param name="_toStatus">
    ///    The <c>LeanKanbanStatus</c> enumeration value to test.
    /// </param>
    /// <returns>
    ///    true if at least one previous status update must run to achieve the given status.
    /// </returns>
    protected boolean mustRunPreviousStatus(LeanKanbanStatus _toStatus)
    {
        return this.nextStatus() != _toStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSynchronizeKanbanJobStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a status update must be synchronized to the kanban jobs.
    /// </summary>
    /// <param name="_reset">
    ///    A Boolean value that indicates whether the status is reset; optional.
    /// </param>
    /// <returns>
    ///    true if the kanban job status must be synchronized; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The base class always returns false.This method should be called from an instance that represents
    ///    the new status.
    /// </remarks>
    public boolean mustSynchronizeKanbanJobStatus(boolean _reset = false)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        leanCostingFacade = LeanCostingFacade::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the next status for the <c>Kanban</c> table buffer.
    /// </summary>
    /// <param name="_status">
    ///    The current status; optional.
    /// </param>
    /// <returns>
    ///    The next status.
    /// </returns>
    /// <remarks>
    ///    This method returns the same as the current value, if the final status has already been reached.
    /// </remarks>
    public LeanKanbanStatus nextStatus(LeanKanbanStatus _status = kanban.Status)
    {
        LeanKanbanStatus    leanKanbanStatus = _status;
        SysDictEnum         dictStatus       = new SysDictEnum(enumNum(LeanKanbanStatus));

        if (leanKanbanStatus != dictStatus.lastValue())
        {
            leanKanbanStatus = dictStatus.nextValue(leanKanbanStatus);
        }

        return leanKanbanStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanban</Name>
				<Source><![CDATA[
    public Kanban parmKanban(Kanban _kanban = kanban)
    {
        kanban = _kanban;
        return kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJobStatusUpdate</Name>
				<Source><![CDATA[
    public KanbanJobStatusUpdate parmKanbanJobStatusUpdate(KanbanJobStatusUpdate _kanbanJobStatusUpdate = kanbanJobStatusUpdate)
    {
        kanbanJobStatusUpdate = _kanbanJobStatusUpdate;
        return kanbanJobStatusUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLeanCostingFacade</Name>
				<Source><![CDATA[
    public LeanCostingFacadeBase parmLeanCostingFacade(LeanCostingFacadeBase _leanCostingFacade = leanCostingFacade)
    {
        leanCostingFacade = _leanCostingFacade;
        return leanCostingFacade;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateJobs</Name>
				<Source><![CDATA[
    public boolean parmUpdateJobs(boolean _updateJobs = updateJobs)
    {
        updateJobs = _updateJobs;
        return updateJobs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prevStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the previous status for the <c>Kanban</c> table buffer.
    /// </summary>
    /// <param name="_status">
    ///    The current status; optional.
    /// </param>
    /// <returns>
    ///    The previous status.
    /// </returns>
    /// <remarks>
    ///    This method returns the same as the current value, if the first status has already been reached.
    /// </remarks>
    public LeanKanbanStatus prevStatus(LeanKanbanStatus _status = kanban.Status)
    {
        LeanKanbanStatus    previousLeanKanbanStatus = _status;
        SysDictEnum         dictStatus               = new SysDictEnum(enumNum(LeanKanbanStatus));

        if (_status != dictStatus.firstValue())
        {
            previousLeanKanbanStatus = dictStatus.firstValue();
            while (dictStatus.nextValue(previousLeanKanbanStatus) != _status)
            {
                previousLeanKanbanStatus = dictStatus.nextValue(previousLeanKanbanStatus);
            }
        }

        return previousLeanKanbanStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs a status update for the current kanban.
    /// </summary>
    /// <param name="_leanKanbanStatus">
    ///    The target status.
    /// </param>
    /// <param name="_validateOnly">
    ///    A Boolean value that indicates whether the update must be executed or validated; optional.
    /// </param>
    /// <returns>
    ///    true if the update can be executed or was successfully executed, depending on the <paramref
    ///    name="_validateOnly" /> parameter; otherwise, false.
    /// </returns>
    public boolean run(
        LeanKanbanStatus _leanKanbanStatus,
        boolean          _validateOnly = false)
    {
        return this.runStatusUpdate(KanbanStatusUpdate::makeParameters(this,_leanKanbanStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs a status update reset for the current kanban.
    /// </summary>
    /// <param name="_leanKanbanStatus">
    ///    The target status.
    /// </param>
    /// <param name="_validateOnly">
    ///    A Boolean value that indicates whether the update must be executed or validated; optional.
    /// </param>
    /// <returns>
    ///    true if the update can be executed or was successfully executed, depending on the <paramref
    ///    name="_validateOnly" /> parameter; otherwise, false.
    /// </returns>
    public boolean runReset(
        LeanKanbanStatus _leanKanbanStatus,
        boolean          _validateOnly = false)
    {
        return this.runStatusReset(KanbanStatusUpdate::makeParameters(this,_leanKanbanStatus));
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusReset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs a status reset for the current kanban using a given <c>KanbanStatusReset</c> record.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    ///    The <c>KanbanStatusUpdate</c> parameter record.
    /// </param>
    /// <param name="_status">
    ///    The target status of the update; optional.
    /// </param>
    /// <param name="_validateOnly">
    ///    A Boolean value that indicates whether the update must be executed or just validated; optional.
    /// </param>
    /// <param name="_multi">
    ///    A <c>RunbaseRecsMapable</c> object to use in the status reset; optional.
    /// </param>
    /// <returns>
    ///    true if the reset can be executed or was successfully executed, depending on the <paramref
    ///    name="_validateOnly" /> parameter; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    If provided, the target status must match the update parameter record. The parameter is required
    ///    for calls where the <paramref name="_validateOnly" /> is true.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The target status and parameter record do not match.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The status reset cannot be executed.
    /// </exception>
    public boolean runStatusReset(
        KanbanStatusUpdate _kanbanStatusUpdate,
        LeanKanbanStatus   _status       = _kanbanStatusUpdate.WantedStatus,
        boolean            _validateOnly = false,
        RunbaseRecsMapable _multi        = null)
    {
        boolean              canReset  = this.isStatusResetAllowed(_kanbanStatusUpdate, _status);
        KanbanType           kanbanType = kanban.type();

        if (_validateOnly)
        {
            return canReset;
        }

        if (canReset)
        {
            kanbanType.runStatusReset(_kanbanStatusUpdate,updateJobs,this,_multi);
            LeanKanbanStatus localLeanKanbanStatus = Kanban::find(kanban.RecId).Status;
            KanbanStatusUpdate kanbanStatusUpdate = this.initPreviousStatusUpdate(_kanbanStatusUpdate);
            while (localLeanKanbanStatus > _kanbanStatusUpdate.WantedStatus)
            {
                kanbanType.runStatusReset(kanbanStatusUpdate,updateJobs,this,_multi);
                kanbanStatusUpdate    = this.initPreviousStatusUpdate(kanbanStatusUpdate);
                localLeanKanbanStatus = Kanban::find(kanban.RecId).Status;
            }
        }
        else
        {
            throw error(strFmt("@SYS134896",kanban.KanbanId,_kanbanStatusUpdate.WantedStatus));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a status update for the current kanban , using a given <c>KanbanStatusUpdate</c> record.
    /// </summary>
    /// <param name="_kanbanStatusUpdate">
    /// The <c>KanbanStatusUpdate</c> parameter record.
    /// </param>
    /// <param name="_status">
    /// The target status of the update; optional.
    /// </param>
    /// <param name="_validateOnly">
    /// A Boolean value that indicates whether the update needs to be executed or just validated; optional.
    /// </param>
    /// <param name="_multi">
    /// A <c>RunbaseRecsMapable</c> object used in the status update; optional.
    /// </param>
    /// <param name="_notifyChangeStatus">
    /// A Boolean value that specifies if messages should be printed for a change of status.
    /// </param>
    /// <returns>
    /// true if the update can be executed or was successfully executed, depending on the <paramref>_validateOnly</paramref> parameter; otherwise, false.
    /// </returns>
    /// <remarks>
    /// If provided, target status must match the update parameter record. The parameter is required for calls where <paramref>_validateOnly</paramref> is true.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The target status and parameter record do not match.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The status update can not be executed.
    /// </exception>
    public boolean runStatusUpdate(
        KanbanStatusUpdate _kanbanStatusUpdate,
        LeanKanbanStatus   _status = _kanbanStatusUpdate.Type,
        boolean            _validateOnly       = false,
        RunbaseRecsMapable _multi              = null,
        boolean            _notifyChangeStatus = false)
    {
        boolean              canUpdate  = this.isStatusUpdateAllowed(_status);
        KanbanType           kanbanType = kanban.type();

        if (_validateOnly)
        {
            return canUpdate;
        }

        if (_status != _kanbanStatusUpdate.Type)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (canUpdate)
        {
            if (this.mustRunPreviousStatus(_kanbanStatusUpdate.Type))
            {
                KanbanStatusUpdate kanbanStatusUpdate = this.initPreviousStatusUpdate(_kanbanStatusUpdate);
                this.runStatusUpdate(kanbanStatusUpdate,kanbanStatusUpdate.Type,_validateOnly,_multi, _notifyChangeStatus);
            }
            kanbanType.runStatusUpdate(_kanbanStatusUpdate,updateJobs,this,_multi, _notifyChangeStatus);
        }
        else
        {
            throw error(strFmt("@SYS134896",kanban.KanbanId,_kanbanStatusUpdate.Type));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic before a kanban is updated.
    /// </summary>
    public void updating()
    {
        kanban.type().updating();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles logic after a kanban record has been updated.
    /// </summary>
    /// <param name="_kanbanOrig">
    /// The original kanban which is updated.
    /// </param>
    public void updated(Kanban _kanbanOrig)
    {
        kanban.type().updated(_kanbanOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanban</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanStatus</c> class.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> table buffer used to initialize the class.
    /// </param>
    /// <param name="_updateJobs">
    ///    A Boolean value that indicates whether the kanban jobs must be updated when the parent kanban is
    ///    updated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanStatus</c> class.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The specified value is not a <c>LeanKanbanStatus</c> enumeration value.
    /// </exception>
    public static KanbanStatus newKanban(
        Kanban  _kanban,
        boolean _updateJobs)
    {
        KanbanStatus kanbanStatus;

        switch (_kanban.Status)
        {
            case LeanKanbanStatus::NotAssigned:
                kanbanStatus = KanbanStatusNotAssigned::construct();
                break;
            case LeanKanbanStatus::Assigned:
                kanbanStatus = KanbanStatusAssigned::construct();
                break;
            case LeanKanbanStatus::Received:
                kanbanStatus = KanbanStatusReceived::construct();
                break;
            case LeanKanbanStatus::Emptied:
                kanbanStatus = KanbanStatusEmptied::construct();
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        kanbanStatus.parmKanban(_kanban);
        kanbanStatus.parmUpdateJobs(_updateJobs);

        return kanbanStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanKanbanJobStatusUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanStatus</c> class.
    /// </summary>
    /// <param name="_kanban">
    ///    The <c>Kanban</c> table buffer used to initialize the class.
    /// </param>
    /// <param name="_kanbanJobStatusUpdate">
    ///    The <c>KanbanJobStatusUpodate</c> table buffer used to initialize the class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanStatus</c> class.
    /// </returns>
    public static KanbanStatus newKanbanKanbanJobStatusUpdate(
        Kanban                _kanban,
        KanbanJobStatusUpdate _kanbanJobStatusUpdate)
    {
        KanbanStatus kanbanStatus = KanbanStatus::newKanban(_kanban,false);
        kanbanStatus.parmKanbanJobStatusUpdate(_kanbanJobStatusUpdate);

        return kanbanStatus;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>