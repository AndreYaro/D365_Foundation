<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandIndexQueryEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
public final class InventOnHandIndexQueryEvent
{
    private const str organizationIdName = 'OrganizationId';
    private const str productIdName = 'ProductId';
    private const str siteIdName = 'SiteId';
    private const str locationIdName = 'LocationId';

    private Map filters;
    private List groupByValues;
    private boolean returnNegative;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        filters = new Map(Types::String, Types::AnyType);
        groupByValues = new List(Types::String);
        returnNegative = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    public static InventOnHandIndexQueryEvent create(str _company, List _items)
    {
        List company = new List(Types::String);
        company.addEnd(_company);
        
        InventOnHandIndexQueryEvent event = new InventOnHandIndexQueryEvent();
        Map filter = event.parmFilters();

        filter.add(organizationIdName, company);
        filter.add(productIdName, _items);

        return event;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFilters</Name>
				<Source><![CDATA[
    [DataMember('filters')]
    public Map parmFilters(Map _filters = filters)
    {
        filters = _filters;
        return filters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnNegative</Name>
				<Source><![CDATA[
    [DataMember('returnNegative')]
    public boolean parmReturnNegative(boolean _returnNegative = returnNegative)
    {
        returnNegative = _returnNegative;
        return returnNegative;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupByValues</Name>
				<Source><![CDATA[
    [DataMember('groupByValues')]
    public List parmGroupByValues(List _groupByValues = groupByValues)
    {
        groupByValues = _groupByValues;
        return groupByValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompany</Name>
				<Source><![CDATA[
    public str getCompany()
    {
        if (filters != null && filters.exists(organizationIdName))
        {
            var company = filters.lookup(organizationIdName) as List;
            ListEnumerator companyEnum = company.getEnumerator();
            if (companyEnum.moveNext())
            {
                return companyEnum.current();
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSiteLocation</Name>
				<Source><![CDATA[
    public void addSiteLocation(str _siteId, str _locationId)
    {
        List site       = new List(Types::String);
        List location   = new List(Types::String);
        site.addEnd(_siteId);
        location.addEnd(_locationId);
        filters.add(siteIdName, site);
        filters.add(locationIdName, location);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>