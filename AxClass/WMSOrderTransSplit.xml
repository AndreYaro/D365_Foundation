<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsOrderTransSplit</Name>
	<SourceCode>
		<Declaration><![CDATA[
class WmsOrderTransSplit   extends RunBase
{
    private WMSOrderTrans   wmsSplitOrderTrans;

    InventQty       splitQty;
    InventQty       wmsQty;
    RecId           wmsRecId;
    recVersion      wmsRecVersion;
    WMSOrderId      wmsOrderId;
    ItemId          wmsItemId;
    
    PdsCWInventQty  pdsCWSplitQty;
    PdsCWInventQty  pdsCWWmsQty;

    DialogRunbase   dialog;
    DialogField     dialogSplitQty;

    DialogField     pdsCWDialogSplitQty;

    #DEFINE.CurrentVersion(3)

    #LOCALMACRO.CurrentList
        wmsItemId,
        wmsOrderid,
        wmsRecid,
        wmsRecversion,
        wmsQty,
        splitQty,
        pdsCWWmsQty,
        pdsCWSplitQty
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogField     qtyField;

        DialogField     pdsCWQtyField;

        dialog          = super();

        if (PdsGlobal::pdsIsCWItem(this.parmWmsItemId()))
        {
            pdsCWQtyField   = dialog.addField(
                                extendedtypestr(PdsCWInventQty),
                                "@PDS1",
                                "@PDS1");
            pdsCWQtyField.value(pdsCWWmsQty);
            pdsCWQtyField.active(false);
        }

        qtyField   = dialog.addField(extendedtypestr(InventQty),"@SYS14578","@SYS14578");
        qtyField.value(wmsQty);
        qtyField.active(false);

        if (PdsGlobal::pdsIsCWItem(this.parmWmsItemId()))
        {
            pdsCWDialogSplitQty = dialog.addField(
                                    extendedtypestr(PdsCWInventQty),
                                    "@PDS561",
                                    "@PDS561");

            pdsCWDialogSplitQty.value(pdsCWSplitQty);
            pdsCWDialogSplitQty.registerOverrideMethod(
                methodStr(FormRealControl, modified),
                methodStr(WmsOrderTransSplit, pdsQtyModified),
                this);
        }

        dialogSplitQty   = dialog.addField(extendedtypestr(InventQty), "@SYS19602", "@SYS19602");
        dialogSplitQty.value(splitQty);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (PdsGlobal::pdsIsCWItem(this.parmWmsItemId()))
        {
            pdsCWSplitQty = pdsCWDialogSplitQty.value();
        }
        splitQty   = dialogSplitQty.value();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBeenChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Compares a <c>wmsRecVersion</c> class member with the current <c>RecVersion</c> record.
    /// </summary>
    /// <param name="_recVersion">
    ///    The <c>RecVersion</c> record.
    /// </param>
    /// <returns>
    ///    true if the records have identical values; otherwise, false.
    /// </returns>
    protected boolean hasBeenChanged(RecVersion   _recVersion)
    {
        return  _recVersion != this.parmWmsRecVersion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWSplitQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmPdsCWSplitQty(
        PdsCWInventQty _pdsCWSplitQty = pdsCWSplitQty)
    {
        pdsCWSplitQty = _pdsCWSplitQty;
        return pdsCWSplitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPdsCWWmsQty</Name>
				<Source><![CDATA[
    public PdsCWInventQty parmPdsCWWmsQty(
        PdsCWInventQty _pdsCWWmsQty = pdsCWWmsQty)
    {
        pdsCWWmsQty = _pdsCWWmsQty;
        return pdsCWWmsQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSplitQty</Name>
				<Source><![CDATA[
    public InventQty parmSplitQty(InventQty _splitQty = splitQty)
    {
        splitQty = _splitQty;
        return splitQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsItemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>WmsItemId</c> parameter.
    /// </summary>
    /// <param name="_wmsItemId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>WmsItemId</c> value.
    /// </returns>
    public ItemId parmWmsItemId(ItemId _wmsItemId = wmsItemId)
    {
        wmsItemId = _wmsItemId;
        return wmsItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>wmsOrderId</c> parameter.
    /// </summary>
    /// <param name="_wmsOrderId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>wmsOrderId</c> value.
    /// </returns>
    public WMSOrderId parmWmsOrderId(WMSOrderId _wmsOrderId = wmsOrderId)
    {
        wmsOrderId = _wmsOrderId;
        return wmsOrderId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>wmsQty</c> parameter.
    /// </summary>
    /// <param name="_wmsQty">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>wmsQty</c> value.
    /// </returns>
    public InventQty parmWmsQty(InventQty _wmsQty = wmsQty)
    {
        wmsQty = _wmsQty;
        return wmsQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>wmsRecId</c> parameter.
    /// </summary>
    /// <param name="_wmsRecId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>wmsRecId</c> value.
    /// </returns>
    public RecId parmWmsRecId(RecId _wmsRecId = wmsRecId)
    {
        wmsRecId = _wmsRecId;
        return wmsRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsRecVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>wmsRecVersion</c> parameter.
    /// </summary>
    /// <param name="_wmsRecVersion">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The <c>wmsRecVersion</c> value.
    /// </returns>
    public RecVersion parmWmsRecVersion(RecVersion _wmsRecVersion = wmsRecVersion)
    {
        wmsRecVersion = _wmsRecVersion;
        return wmsRecVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWmsSplitOrderTrans</Name>
				<Source><![CDATA[
    public WMSOrderTrans parmWmsSplitOrderTrans()
    {
        return wmsSplitOrderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsQtyModified</Name>
				<Source><![CDATA[
    public boolean pdsQtyModified(Object _callerControl)
    {
        if (dialogSplitQty.value() == 0.0)
        {
            dialogSplitQty.value(PdsCatchWeight::inventQty(this.parmWmsItemId(), pdsCWDialogSplitQty.value()));
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        WMSOrderTrans   wmsOrderTransCopy;

        setprefix(WMSOrderTransSplit::description());

        try
        {
            ttsbegin;

            if (!this.validate())
            {
                throw error("@SYS18447");
            }

            select firstonly forupdate wmsOrderTransCopy
                where wmsOrderTransCopy.OrderId     == this.parmWmsOrderId()    &&
                      wmsOrderTransCopy.ItemId      == this.parmWmsItemId()     &&
                      wmsOrderTransCopy.RecId       == this.parmWmsRecId();

            if (!wmsOrderTransCopy || this.hasBeenChanged(wmsOrderTransCopy.RecVersion))
            {
                throw error("@SYS18447");
            }

            wmsSplitOrderTrans = wmsOrderTransCopy.split(splitQty, pdsCWSplitQty);

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion    :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (splitQty <= 0)
        {
            return checkFailed("@SYS50502");
        }

        if (numOfDec(splitQty) > InventTable::inventDecimals(wmsItemId))
        {
            return checkFailed(strfmt("@SYS83631", InventTable::inventDecimals(wmsItemId)));
        }

        if (!PdsCatchWeight::validateInventQty(
                wmsItemId,
                splitQty,
                pdsCWSplitQty))
        {
            return false;
        }

        if (!PdsCatchWeight::validateInventQty(
                wmsItemId,
                wmsQty - splitQty,
                pdsCWWmsQty - pdsCWSplitQty))
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS15396";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WMSOrderTransSplit  wmsOrderTransSplit;
        Object              callerForm;

        if (!_args || !_args.caller() || ! _args.dataset())
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        switch (_args.record().TableId)
        {
            case (tableNum(WMSOrderTrans)) :

                wmsOrderTransSplit   = WMSOrderTransSplit::newStandard(_args.record());
                if (wmsOrderTransSplit.prompt())
                {
                    wmsOrderTransSplit.runOperation();
                }

                callerForm = _args.caller();
                callerForm.doResearch();

                break;
            default:
                throw error(strFmt("@SYS19306",funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>WMSOrderTransSplit</c> class.
    /// </summary>
    /// <param name="_wmsOrderTrans">
    ///    The <c>WMSOrderTrans</c> value that is used to initialize class values.
    /// </param>
    /// <returns>
    ///    A new server bound instance of the <c>WMSOrderTransSplit</c> class.
    /// </returns>
    static public WMSOrderTransSplit newStandard(WMSOrderTrans _wmsOrderTrans)
    {
        WMSOrderTransSplit  wmsOrderTransSplit;

        wmsOrderTransSplit = new WMSOrderTransSplit();

        wmsOrderTransSplit.getLast();
        wmsOrderTransSplit.parmWmsQty(_wmsOrderTrans.Qty);
        wmsOrderTransSplit.parmWmsOrderId(_wmsOrderTrans.OrderId);
        wmsOrderTransSplit.parmWmsRecId(_wmsOrderTrans.RecId);
        wmsOrderTransSplit.parmWmsRecVersion(_wmsOrderTrans.RecVersion);
        wmsOrderTransSplit.parmWmsItemId(_wmsOrderTrans.ItemId);

        if (PdsGlobal::pdsIsCWItem(_wmsOrderTrans.ItemId))
        {
            wmsOrderTransSplit.parmPdsCWWmsQty(_wmsOrderTrans.PdsCWQty);
            wmsOrderTransSplit.parmPdsCWSplitQty(1);
            wmsOrderTransSplit.parmSplitQty(PdsCatchWeight::inventQty(_wmsOrderTrans.ItemId, 1));
        }
        else
        {
            wmsOrderTransSplit.parmSplitQty(1);
            wmsOrderTransSplit.parmPdsCWSplitQty(0);
            wmsOrderTransSplit.parmPdsCWWmsQty(0);
        }

        return wmsOrderTransSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>