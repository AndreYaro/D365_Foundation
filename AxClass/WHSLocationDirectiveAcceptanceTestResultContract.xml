<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationDirectiveAcceptanceTestResultContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSLocationDirectiveAcceptanceTestResultContract implements SysPackable
{
    private str log;
    private Set recordsVisited = new Set(Types::String);
    private Set recordsSucceeding = new Set(Types::String);
    private RecId currentLocDirTable;
    private RecId currentLocDirLine;
    private RecId currentLocDirAction;
    private int locationsEvaluated;

    #define.CurrentVersion(1)
    #define.version1(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRecordVisited</Name>
				<Source><![CDATA[
    public boolean isRecordVisited(Common _record)
    {
        return recordsVisited.in(this.keyFromCommon(_record));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecordSucceeding</Name>
				<Source><![CDATA[
    public boolean isRecordSucceeding(Common _record)
    {
        return recordsSucceeding.in(this.keyFromCommon(_record));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, recordsVisited.pack(), recordsSucceeding.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion:
                container recordsVisitedContainer;
                container recordsSucceedingContainer;
                [version, recordsVisitedContainer, recordsSucceedingContainer] = packedClass;
                recordsVisited = Set::create(recordsVisitedContainer);
                recordsSucceeding = Set::create(recordsSucceedingContainer);

                return true;         
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLocationDirectiveVisited</Name>
				<Source><![CDATA[
    private void onLocationDirectiveVisited(WHSLocDirTable _locationDirective)
    {
        currentLocDirTable = _locationDirective.RecId;
        this.recordVisited(_locationDirective);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLocationDirectiveLineVisited</Name>
				<Source><![CDATA[
    private void onLocationDirectiveLineVisited(WHSLocDirLine _locationDirectiveLine)
    {
        currentLocDirLine = _locationDirectiveLine.RecId;
        this.recordVisited(_locationDirectiveLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLocationDirectiveActionVisited</Name>
				<Source><![CDATA[
    private void onLocationDirectiveActionVisited(WHSLocDirAction _locationDirectiveAction)
    {
        currentLocDirAction = _locationDirectiveAction.RecId;
        this.recordVisited(_locationDirectiveAction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendToLog</Name>
				<Source><![CDATA[
    internal void appendToLog(str _message)
    {
        log += _message+'\n';
    }

]]></Source>
			</Method>
			<Method>
				<Name>onWorkHistoryLineCreated</Name>
				<Source><![CDATA[
    private void onWorkHistoryLineCreated(ItemId _itemId, Qty _qty, UnitOfMeasureSymbol _unitId, WHSMessage _message, boolean _fail, WHSInventStatusId _statusId)
    {
        this.appendToLog(_message);

        if (_fail)
        {
            recordsSucceeding = new Set(Types::String);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLocationEvaluated</Name>
				<Source><![CDATA[
    private void onLocationEvaluated(WMSLocation _location)
    {
        locationsEvaluated++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onLocationFound</Name>
				<Source><![CDATA[
    private void onLocationFound(WMSLocationId _locationId)
    {
        recordsSucceeding.add(this.keyFromTableIdRecId(tableNum(WHSLocDirTable), currentLocDirTable));
        recordsSucceeding.add(this.keyFromTableIdRecId(tableNum(WHSLocDirLine), currentLocDirLine));
        recordsSucceeding.add(this.keyFromTableIdRecId(tableNum(WHSLocDirAction), currentLocDirAction));
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordVisited</Name>
				<Source><![CDATA[
    private void recordVisited(Common _record)
    {
        recordsVisited.add(this.keyFromCommon(_record));
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyFromCommon</Name>
				<Source><![CDATA[
    private str keyFromCommon(Common _record)
    {
        return this.keyFromTableIdRecId(_record.TableId, _record.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyFromTableIdRecId</Name>
				<Source><![CDATA[
    private str keyFromTableIdRecId(TableId _tableId, RecId _recId)
    {
        return int2Str(_tableId)+';'+int642Str(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateResult</Name>
				<Source><![CDATA[
    internal void populateResult(WHSLocationDirectiveAcceptanceTestResult _result)
    {
        _result.Log = log;
        _result.LocationsEvaluated = locationsEvaluated;
        _result.Contract = this.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribeToLocationDirective</Name>
				<Source><![CDATA[
    public void subscribeToLocationDirective(WhsLocationDirective _locationDirective)
    {
        _locationDirective.onLocationDirectiveVisited += eventhandler(this.onLocationDirectiveVisited);
        _locationDirective.onLocationDirectiveLineVisited += eventhandler(this.onLocationDirectiveLineVisited);
        _locationDirective.onLocationDirectiveActionVisited += eventhandler(this.onLocationDirectiveActionVisited);
        _locationDirective.onWorkHistoryLineCreated += eventhandler(this.onWorkHistoryLineCreated);
        _locationDirective.onLocationEvaluated += eventhandler(this.onLocationEvaluated);
        _locationDirective.onLocationFound += eventhandler(this.onLocationFound);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSLocationDirectiveAcceptanceTestResultContract construct()
    {
        return new WHSLocationDirectiveAcceptanceTestResultContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromResult</Name>
				<Source><![CDATA[
    public static WHSLocationDirectiveAcceptanceTestResultContract createFromResult(WHSLocationDirectiveAcceptanceTestResult _result)
    {
        WHSLocationDirectiveAcceptanceTestResultContract contract = WHSLocationDirectiveAcceptanceTestResultContract::construct();
        contract.unpack(_result.Contract);
        return contract;        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>