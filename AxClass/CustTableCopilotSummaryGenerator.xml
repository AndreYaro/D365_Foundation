<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTableCopilotSummaryGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Xrm.Sdk;

/// <summary>
/// The <c>CustTableCopilotSummaryGenerator</c> is used to for generated the summary content and update the content into form.
/// </summary>
internal class CustTableCopilotSummaryGenerator
{
    internal const str StatusTopic = 'Status';
    internal const str InsightsTopic = 'Insights';

    private AppCopilotSummaryControlBuilder summaryControlBuilder;
    private CustTableCopilotSummaryDataProvider dataProvider = new CustTableCopilotSummaryDataProvider();
    private SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(formStr(CustTable));
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initAppCopilotSummaryControlBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the copilot control.
    /// </summary>
    /// <param name = "_formRun">The <c>FormRun</c> instance.</param>
    /// <param name = "_parentControl">The parent control which added the copilot control in.</param>
    /// <returns>The copilot summary control builder instance.</returns>
    internal AppCopilotSummaryControlBuilder initAppCopilotSummaryControlBuilder(
        FormRun _formRun,
        FormGroupControl _parentControl)
    {
        if (dataProvider)
        {
            summaryControlBuilder = AppCopilotSummaryControlBuilder::newFromContract(
                CustTableCopilotSummaryGenerator::initCopilotControlContract(
                    _formRun,
                    _parentControl));

            this.addSummaryTopics();
        }

        return summaryControlBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSummaryTopics</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds summary topics.
    /// </summary>
    internal protected void addSummaryTopics()
    {
        summaryControlBuilder.addTopic(StatusTopic, "@AccountsReceivable:StatusTopic");
        summaryControlBuilder.addTopic(InsightsTopic, "@AccountsReceivable:InsightsTopic");
    }

]]></Source>
			</Method>
			<Method>
				<Name>summaryCallBackAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Summary call back method.
    /// </summary>
    /// <param name = "_apiName">The API name.</param>
    /// <param name = "_formRun">The <c>FormRun</c> instance.</param>
    /// <param name = "_summaryGenerator">The instance of <c>CustTableCopilotSummaryGenerator</c>.</param>
    /// <param name = "_controller">The instance of <c>AppCopilotSummaryController</c>.</param>
    /// <param name = "_result">The async result.</param>
    internal static void summaryCallBackAsync(
        str _apiName,
        FormRun _formRun,
        CustTableCopilotSummaryGenerator _summaryGenerator,
        AsyncTaskResult _result,
        AppCopilotSummaryController _controller)
    {
        if (_formRun && !_formRun.isClosed() && _summaryGenerator)
        {
            SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(formStr(CustTable));
            using (SysInstrumentationActivityContext activityContext = logger.activityContext(staticMethodStr(CustTableCopilotSummaryGenerator, summaryCallBackAsync), formStr(CustTable))
                .addCustomProperty('PrincipalObjectId', guid2Str(curUserGuid()))
                .addCustomProperty('ActivityId', guid2Str(getCurrentThreadActivityId()))
                .addCustomProperty('UniqueCorrelationId', guid2Str(_controller.parmUniqueCorrelationId()))
                .addCustomProperty('APIName', _apiName))
            {
                boolean updateTopicSuccess;

                str topicName = _summaryGenerator.getTopicNameByAPIName(_apiName);
                AppCopilotSummaryControlBuilder summaryControlBuilder = _summaryGenerator.summaryControlBuilder;
                boolean isCacheEnabled = CustTableCopilotSummaryCacheFlight::instance().isEnabled();
                utcdatetime lastGeneratedDateTime = DateTimeUtil::getSystemDateTime();

                AppCopilotSummaryResultContract contract = _controller.getSummaryResult(_result, isCacheEnabled);
                if (contract)
                {
                    lastGeneratedDateTime = contract.getLastGenertedDateTime();
                    container AISummaryResultContainer = contract.getSummaryResult();
                    CustTableCopilotSummaryResultContract custTableResultContract = CustTableCopilotSummaryResultContract::unpack(AISummaryResultContainer);
                    if (custTableResultContract)
                    {
                        str resultStr = custTableResultContract.getCustTableSummaryResult();
                        AccountNum custAccount = custTableResultContract.getCustAccount();
                        CustTable currentCustTable = _formRun.dataSource(formDataSourceStr(CustTable, CustTable)).cursor();
                        if (custAccount == currentCustTable.AccountNum)
                        {
                            if (resultStr == CustTableCopilotSummaryConstants::LanguageNotSupported)
                            {
                                summaryControlBuilder.updateTopicContent(topicName, "@AppCopilotSummaryControl:LanguageNotSupport");
                            }
                            else if (resultStr != '')
                            {
                                summaryControlBuilder.updateTopicContent(topicName, resultStr);
                                
                                updateTopicSuccess = true;
                            }
                            else
                            {
                                summaryControlBuilder.updateTopicContent(topicName, "@AppCopilotSummaryControl:AISummaryUnavailable");
                            }

                            if (_summaryGenerator.canDisplayTopicsContent())
                            {
                                summaryControlBuilder.displayTopicContent();
                            }
        
                            if (isCacheEnabled)
                            {
                                summaryControlBuilder.setLastGeneratedDateTime(lastGeneratedDateTime);
                            }
                        }
                        else
                        {
                            logger.logError('Returned CustAccount did not match current worker CustAccount');
                        }
                    }
                }
                
                activityContext.addCustomProperty('UpdateTopicSuccess', int2Str(updateTopicSuccess));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDisplayTopicsContent</Name>
				<Source><![CDATA[
    private boolean canDisplayTopicsContent()
    {
        return summaryControlBuilder.isTopicContentSet(StatusTopic) && summaryControlBuilder.isTopicContentSet(InsightsTopic);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTopicNameByAPIName</Name>
				<Source><![CDATA[
    private str getTopicNameByAPIName(str _apiName)
    {
        str topicName = '';

        switch (_apiName)
        {
            case CustTableCopilotSummaryConstants::CustomerStatusSummaryWebAPIName:
                topicName = StatusTopic;
                break;

            case CustTableCopilotSummaryConstants::CustomerInsightsSummaryWebAPIName:
                topicName = InsightsTopic;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return topicName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCopilotControlContract</Name>
				<Source><![CDATA[
    private static AppCopilotSummaryControlContract initCopilotControlContract(
        FormRun _formRun,
        FormGroupControl _parentControl)
    {
        AppCopilotSummaryControlContract contract = AppCopilotSummaryControlContract::construct(_formRun, _parentControl, _formRun.name());

        contract.parmTermsLabelId("@AppCopilotSummaryControl:LearnMore");
        contract.parmTermsLink('https://go.microsoft.com/fwlink/?linkid=2272624');
        return contract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateSummaryResult</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the summary result to determine whether the value is valid.
    /// </summary>
    /// <param name = "_cacheKey">The cache key.</param>
    /// <param name = "_summaryResult">The summary result from genert summary method.</param>
    /// <param name = "_isFromCache">true if the summary result from cache, otherwise, false, which is new generated summary.</param>
    /// <returns>true if the summary result is valid; otherwise, false.</returns>
    internal static boolean validateSummaryResult(container _cacheKey, container _summaryResult, boolean _isFromCache)
    {
        if (_summaryResult == conNull())
        {
            return false;
        }

        CustTableCopilotSummaryResultContract contract = CustTableCopilotSummaryResultContract::unpack(_summaryResult);
        if (!contract)
        {
            return false;
        }

        str custTableSummaryResult = contract.getCustTableSummaryResult();

        if (custTableSummaryResult == ''
            || custTableSummaryResult == CustTableCopilotSummaryConstants::LanguageNotSupported)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSummaryAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the AI summary by calling dataverse API.
    /// </summary>
    /// <param name = "_parameters">The Async parameter container.</param>
    /// <returns>The result container.</returns>
    internal static container processSummaryAsync(container _parameters)
    {
        AccountNum custAccount = conPeek(_parameters, 1);
        str apiName = conPeek(_parameters, 2);
        guid uniqueCorrelationId = conPeek(_parameters, 3);
        
        str resultValue;

        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(classStr(CustTableCopilotSummaryGenerator));
        using (var activityContext = logger.activityContext(staticMethodStr(CustTableCopilotSummaryGenerator, processSummaryAsync), classStr(CustTableCopilotSummaryGenerator))
            .addCustomProperty('PrincipalObjectId', guid2Str(curUserGuid()))
            .addCustomProperty('ActivityId', guid2Str(getCurrentThreadActivityId()))
            .addCustomProperty('UniqueCorrelationId', guid2Str(uniqueCorrelationId)))
        {
            boolean isSuccessful;
            boolean isLanguageError;

            if (custAccount)
            {
                if (AppCopilotDataverseUtility::canMakeAICall(apiName, CustTableCopilotSummaryConstants::FinanceAISolutionName))
                {
                    CustTableCopilotSummaryDataProvider dataProvider = CustTableCopilotSummaryDataProvider::newFromCustTableAndAPICalled(custAccount, apiName);
                    ParameterCollection parameterCollection = dataProvider.buildParameterCollection();
                    ParameterCollection resultsCollection = AppCopilotDataverseUtility::callAPIInternal(CustTableCopilotSummaryConstants::FinanceAISolutionName, apiName, parameterCollection, uniqueCorrelationId);
                    if (resultsCollection && resultsCollection.ContainsKey(CustTableCopilotSummaryConstants::AIResponseValue))
                    {
                        resultValue = resultsCollection.get_Item(CustTableCopilotSummaryConstants::AIResponseValue).ToString();

                        if (resultValue == CustTableCopilotSummaryConstants::LanguageNotSupported)
                        {
                            isLanguageError = true;
                        }
                        else if (resultValue != '')
                        {
                            isSuccessful = true;
                        }
                        else
                        {
                            logger.logError('Summary returned blank response');
                        }
                    }
                    else
                    {
                        logger.logError('Result collection null or missing response');
                    }
                }
            }

            activityContext.addCustomProperty('IsSuccessful', any2Str(isSuccessful));
            activityContext.addCustomProperty('IsLanguageError', any2Str(isLanguageError));
        }

        CustTableCopilotSummaryResultContract contract = CustTableCopilotSummaryResultContract::newFromSummaryResult(custAccount, resultValue);
        return CustTableCopilotSummaryResultContract::pack(contract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>