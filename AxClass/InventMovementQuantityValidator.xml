<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMovementQuantityValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventMovementQuantityValidator</c> class is responsible for validating
/// whether the quantity specified by the user satisfies the constraints defined by the default order settings.
/// In the case when the quantity specified by the user does not satisfy the constraints the class will
/// resolve this conflict by applying one of the error correction methods, such as: ask the user to make the decision,
/// use the user-specified quantity despite the conflict, use the corrected quantity, e.t.c.
/// </summary>
class InventMovementQuantityValidator
{
    protected InventItemOrderSetupMap inventItemOrderSetupMap;

    protected InventMovementQuantityErrorCorrectionMethod lowerLimitErrorCorrectionMethod;
    protected InventMovementQuantityErrorCorrectionMethod upperLimitErrorCorrectionMethod;
    protected InventMovementQuantityErrorCorrectionMethod multiplicityErrorCorrectionMethod;

    private InventDimId							productInventDimId;
    private UnitOfMeasureSymbol					moduleUnitId;
    private EcoResReleasedProductUnitConverter	unitConverter;
    private UnknownNoYes						hasGUI;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createInventMovementQuantityValidator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the conflict resolver.
    /// </summary>
    /// <param name = "_inventMovemnetQuantityValidatorParameters">Parameters used to creat the <c>InventMovementQuantityValidator</c> record.</param>
    /// <returns>A new instance of the conflict resolver.</returns>
    public static InventMovementQuantityValidator createInventMovementQuantityValidator(InventMovementQuantityValidatorParameters _inventMovementQuantityValidatorParameters)
    {
        var resolver = InventMovementQuantityValidator::newFromOrderSettings(_inventMovementQuantityValidatorParameters.inventItemOrderSetupMap);

        resolver.initFromParameters(_inventMovementQuantityValidatorParameters.displayInformationToUser,
                                    _inventMovementQuantityValidatorParameters.lockMinQtyCheck,
                                    _inventMovementQuantityValidatorParameters.lockMaxQtyCheck,
                                    _inventMovementQuantityValidatorParameters.lockMultipleCheck,
                                    _inventMovementQuantityValidatorParameters.doMultipleCheck,
                                    _inventMovementQuantityValidatorParameters.doMinQtyCheck,
                                    _inventMovementQuantityValidatorParameters.doMaxQtyCheck);
		
        resolver.parmProductInventDimId(_inventMovementQuantityValidatorParameters.productInventDimId);

        return resolver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the conflict resolver.
    /// </summary>
    /// <param name = "_inventItemOrderSetupMap">A record with the order settings that define the quantity constraints.</param>
    /// <param name="_displayInformationToUser">A boolean value that defines if the information should be shown to the user.</param>
    /// <param name="_lockMinQtyCheck">A boolean value that defines if the minimum quantity must be adjusted without user interaction if the requirement is not met.</param>
    /// <param name="_lockMaxQtyCheck">A boolean value that defines if the maximum quantity must be adjusted without user interaction if the requirement is not met.</param>
    /// <param name="_lockMultipleCheck">A boolean value that defines if the multiple quantity must be adjusted without user interaction if the requirement is not met.</param>
    /// <param name="_doMultipleCheck">A boolean value that defines if the multiple quantity should be validated after corrected.</param>
    /// <param name="_doMinQtyCheck">A boolean value that defines if the minimum quantity should be validated after corrected.</param>
    /// <param name="_doMaxQtyCheck">A boolean value that defines if the maximum quantity should be validated after corrected.</param>
    /// <returns>A new instance of the conflict resolver.</returns>
    [SysObsolete('This method is deprecated use createInventMovementQuantityValidator instead.', false, 31\03\2019)]
    public static InventMovementQuantityValidator newFromParameters(
        InventItemOrderSetupMap _inventItemOrderSetupMap,
        boolean                 _displayInformationToUser   = true,
        boolean                 _lockMinQtyCheck            = false,
        boolean                 _lockMaxQtyCheck            = false,
        boolean                 _lockMultipleCheck          = false,
        boolean                 _doMultipleCheck            = true,
        boolean                 _doMinQtyCheck              = true,
        boolean                 _doMaxQtyCheck              = true)
    {
        InventMovementQuantityValidatorParameters parameters = InventMovementQuantityValidatorParameters::construct();

        parameters.inventItemOrderSetupMap  = _inventItemOrderSetupMap;
        parameters.displayInformationToUser = _displayInformationToUser;
        parameters.lockMinQtyCheck		    = _lockMinQtyCheck;
        parameters.lockMaxQtyCheck			= _lockMaxQtyCheck;
        parameters.lockMultipleCheck		= _lockMultipleCheck;
        parameters.doMultipleCheck			= _doMultipleCheck;
        parameters.doMinQtyCheck			= _doMinQtyCheck;
        parameters.doMaxQtyCheck		    = _doMaxQtyCheck;

        return InventMovementQuantityValidator::createInventMovementQuantityValidator(parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromErrorCorrectionMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the conflict resolver.
    /// </summary>
    /// <param name = "_inventItemOrderSetupMap">A record with the order settings that define the quantity constraints.</param>
    /// <param name = "_errorCorrectionMethods">The error correction methods.</param>
    /// <returns>A new instance of the conflict resolver.</returns>
    public static InventMovementQuantityValidator newFromErrorCorrectionMethods(
        InventItemOrderSetupMap                         _inventItemOrderSetupMap,
        InventMovementQuantityErrorCorrectionMethods    _errorCorrectionMethods)
    {
        var resolver = InventMovementQuantityValidator::newFromOrderSettings(_inventItemOrderSetupMap);
        resolver.initFromErrorCorrectionMethods(_errorCorrectionMethods);
        return resolver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>acceptableQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the acceptable order quantity using the current error correction methods
    /// given the requested quantity.
    /// </summary>
    /// <param name = "_requestedQty">The requested quantity.</param>
    /// <param name = "_transUnitId">The unit symbol in which the requested quantity is given.</param>
    /// <returns>The acceptable order quantity</returns>
    public Qty acceptableQty(Qty _requestedQty, UnitOfMeasureSymbol _transUnitId)
    {
        Qty acceptableQuantity = _requestedQty;
        PurchReqLineCalculateOrderQuantityContext purchReqLineCalculateOrderQuantityContext = PurchReqLineCalculateOrderQuantityContext::current();
        if (acceptableQuantity > 0
            || (purchReqLineCalculateOrderQuantityContext != null
                && purchReqLineCalculateOrderQuantityContext.parmCheckZeroQuantity()
                && acceptableQuantity == 0))
        {
            acceptableQuantity = this.resolveLowerLimitConflict(acceptableQuantity, _transUnitId);
            acceptableQuantity = this.resolveUpperLimitConflict(acceptableQuantity, _transUnitId);
            acceptableQuantity = this.resolveMultiplicityConflict(acceptableQuantity, _transUnitId);

            acceptableQuantity = decRound(acceptableQuantity, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(_transUnitId)));
        }

        return acceptableQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventMovementQuantityValidator construct()
    {
        return new InventMovementQuantityValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromOrderSettings</Name>
				<Source><![CDATA[
    private static InventMovementQuantityValidator newFromOrderSettings(InventItemOrderSetupMap _inventItemOrderSetupMap)
    {
        var resolver = InventMovementQuantityValidator::construct();

        resolver.initFromOrderSettings(_inventItemOrderSetupMap);

        return resolver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromOrderSettings</Name>
				<Source><![CDATA[
    protected void initFromOrderSettings(InventItemOrderSetupMap _inventItemOrderSetupMap)
    {
        inventItemOrderSetupMap = _inventItemOrderSetupMap;

		if (!productInventDimId
        &&  inventItemOrderSetupMap.InventDimId != InventDim::inventDimIdBlank())
        {
            productInventDimId = inventItemOrderSetupMap.InventDimId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProductInventDimId</Name>
				<Source><![CDATA[
	public InventDimId parmProductInventDimId(InventDimId _productInventDimId = productInventDimId)
    {
        productInventDimId = _productInventDimId;

        return productInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    protected void initFromParameters(
        boolean                 _displayInformationToUser   = true,
        boolean                 _lockMinQtyCheck            = false,
        boolean                 _lockMaxQtyCheck            = false,
        boolean                 _lockMultipleCheck          = false,
        boolean                 _doMultipleCheck            = true,
        boolean                 _doMinQtyCheck              = true,
        boolean                 _doMaxQtyCheck              = true)
    {
        lowerLimitErrorCorrectionMethod = this.getErrorCorrectionMethodFromParameters(_displayInformationToUser, _lockMinQtyCheck, _doMinQtyCheck);
        upperLimitErrorCorrectionMethod = this.getErrorCorrectionMethodFromParameters(_displayInformationToUser, _lockMaxQtyCheck, _doMaxQtyCheck);
        multiplicityErrorCorrectionMethod = this.getErrorCorrectionMethodFromParameters(_displayInformationToUser, _lockMultipleCheck, _doMultipleCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromErrorCorrectionMethods</Name>
				<Source><![CDATA[
    protected void initFromErrorCorrectionMethods(InventMovementQuantityErrorCorrectionMethods _errorCorrectionMethods)
    {
        lowerLimitErrorCorrectionMethod = _errorCorrectionMethods.parmLowerLimitErrorCorrectionMethod();
        upperLimitErrorCorrectionMethod = _errorCorrectionMethods.parmUpperLimitErrorCorrectionMethod();
        multiplicityErrorCorrectionMethod = _errorCorrectionMethods.parmMultiplicityErrorCorrectionMethod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorCorrectionMethodFromParameters</Name>
				<Source><![CDATA[
    private InventMovementQuantityErrorCorrectionMethod getErrorCorrectionMethodFromParameters(
        boolean _displayInformationToUser,
        boolean _lockQtyCheck,
        boolean _doQtyCheck)
    {
        if (!_doQtyCheck)
        {
            return InventMovementQuantityErrorCorrectionMethod::AcceptUserInput;
        }
        else if (!_displayInformationToUser)
        {
            return InventMovementQuantityErrorCorrectionMethod::AutoCorrectUserInput;
        }
        else if (this.hasGUI())
        {
            if (_lockQtyCheck)
            {
                return InventMovementQuantityErrorCorrectionMethod::AutoCorrectUserInputWithInfoBox;
            }

            return InventMovementQuantityErrorCorrectionMethod::PromptUser;
        }

        return InventMovementQuantityErrorCorrectionMethod::AutoCorrectUserInputWithWarning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCheckNeeded</Name>
				<Source><![CDATA[
    protected boolean isCheckNeeded(InventMovementQuantityErrorCorrectionMethod _errorCorrectionMethod)
    {
        return _errorCorrectionMethod != InventMovementQuantityErrorCorrectionMethod::AcceptUserInput;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleUnitId</Name>
				<Source><![CDATA[
    protected UnitOfMeasureSymbol moduleUnitId()
    {
        if (!moduleUnitId)
        {
            moduleUnitId = InventTableModule::find(inventItemOrderSetupMap.ItemId, InventItemOrderSetupMap::setup2ModuleType(inventItemOrderSetupMap.setupType())).UnitId;
        }

        return moduleUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertQty</Name>
				<Source><![CDATA[
    protected Qty convertQty(Qty _qty, UnitOfMeasureSymbol _fromUnitId, UnitOfMeasureSymbol _toUnitId)
    {
        if (_fromUnitId == _toUnitId)
        {
            return _qty;
        }

        if (!unitConverter)
        {
            unitConverter = EcoResReleasedProductUnitConverter::construct();
        }

        return unitConverter.convertGivenUnitSymbols(_qty, 
													 _fromUnitId, 
													 _toUnitId, 
													 NoYes::Yes, 
													 inventItemOrderSetupMap.ItemId, 
													 productInventDimId, 
													 NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveLowerLimitConflict</Name>
				<Source><![CDATA[
    protected Qty resolveLowerLimitConflict(Qty _requestedQuantity, UnitOfMeasureSymbol _requestedUnitId)
    {
        Qty acceptableQuantity = _requestedQuantity;
        InventMovementQuantityValidatorDialogsContext dialogContext = InventMovementQuantityValidatorDialogsContext::current();
        boolean skipLowerLimitConflictCheck = dialogContext && dialogContext.parmIsLowerLimitDialogPrompted();

        if (this.isCheckNeeded(lowerLimitErrorCorrectionMethod) && !skipLowerLimitConflictCheck)
        {
            Qty lowestQtyModuleUnit = inventItemOrderSetupMap.lowestQty();
            if (lowestQtyModuleUnit != 0)
            {
                Qty lowestQtyRequestedUnit = this.convertQty(lowestQtyModuleUnit, this.moduleUnitId(), _requestedUnitId);
                lowestQtyRequestedUnit = decRound(lowestQtyRequestedUnit, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(_requestedUnitId)));

                if (lowestQtyRequestedUnit > _requestedQuantity)
                {
                    str minQtyDialogStr = this.buildMinQtyDialogStr(lowestQtyRequestedUnit, _requestedQuantity);

                    if (this.mustCorrectQty(lowerLimitErrorCorrectionMethod, minQtyDialogStr))
                    {
                        acceptableQuantity = lowestQtyRequestedUnit;
                    }

                    if (dialogContext)
                    {
                        dialogContext.parmIsLowerLimitDialogPrompted(true);
                    }
                }
            }
        }

        return acceptableQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveUpperLimitConflict</Name>
				<Source><![CDATA[
    protected Qty resolveUpperLimitConflict(Qty _requestedQuantity, UnitOfMeasureSymbol _requestedUnitId)
    {
        Qty acceptableQuantity = _requestedQuantity;
        InventMovementQuantityValidatorDialogsContext dialogContext = InventMovementQuantityValidatorDialogsContext::current();
        boolean skipUpperLimitConflictCheck = dialogContext && dialogContext.parmIsUpperLimitDialogPrompted();

        if (this.isCheckNeeded(upperLimitErrorCorrectionMethod) && !skipUpperLimitConflictCheck)
        {
            Qty highestQtyModuleUnit = inventItemOrderSetupMap.highestQty();
            if (highestQtyModuleUnit != 0)
            {
                Qty highestQtyRequestedUnit = this.convertQty(highestQtyModuleUnit, this.moduleUnitId(), _requestedUnitId);
                highestQtyRequestedUnit = decRound(highestQtyRequestedUnit, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(_requestedUnitId)));

                if (highestQtyRequestedUnit < _requestedQuantity)
                {
                    str maxQtyDialogStr = this.buildMaxQtyDialogStr(highestQtyRequestedUnit, _requestedQuantity);

                    if (this.mustCorrectQty(upperLimitErrorCorrectionMethod, maxQtyDialogStr))
                    {
                        acceptableQuantity = highestQtyRequestedUnit;
                    }

                    if (dialogContext)
                    {
                        dialogContext.parmIsUpperLimitDialogPrompted(true);
                    }
                }
            }
        }

        return acceptableQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveMultiplicityConflict</Name>
				<Source><![CDATA[
    protected Qty resolveMultiplicityConflict(Qty _requestedQuantity, UnitOfMeasureSymbol _requestedUnitId)
    {
        Qty acceptableQuantity = _requestedQuantity;
        InventMovementQuantityValidatorDialogsContext dialogContext = InventMovementQuantityValidatorDialogsContext::current();
        boolean skipMultiplicityLimitConflictCheck = dialogContext && dialogContext.parmIsMultiplicityDialogPrompted();

        if (this.isCheckNeeded(multiplicityErrorCorrectionMethod) && !skipMultiplicityLimitConflictCheck)
        {
            Qty multipleQtyModuleUnit = inventItemOrderSetupMap.multipleQty();
            if (multipleQtyModuleUnit)
            {
                Qty multipleQtyRequestedUnit = this.convertQty(multipleQtyModuleUnit, this.moduleUnitId(), _requestedUnitId);
                Qty roundedUpQtyRequestedUnit = round(_requestedQuantity + multipleQtyRequestedUnit / 2.00001, multipleQtyRequestedUnit);

                Qty highestQtyModuleUnit = inventItemOrderSetupMap.highestQty();
                if (highestQtyModuleUnit != 0)
                {
                    Qty highestQtyRequestedUnit = this.convertQty(highestQtyModuleUnit, this.moduleUnitId(), _requestedUnitId);
                    if (roundedUpQtyRequestedUnit > highestQtyRequestedUnit &&
                        acceptableQuantity <= highestQtyRequestedUnit)  // Skip to minus the multiple qty when request quantity is greater than highest qty
                    {
                        roundedUpQtyRequestedUnit = roundedUpQtyRequestedUnit - multipleQtyRequestedUnit;
                    }
                }

                roundedUpQtyRequestedUnit = decRound(roundedUpQtyRequestedUnit, UnitOfMeasure::unitOfMeasureDecimalPrecision(UnitOfMeasure::unitOfMeasureIdBySymbol(_requestedUnitId)));

                if (roundedUpQtyRequestedUnit != _requestedQuantity)
                {
                    str multipleQtyDialogStr = this.buildMultipleDialogStr(multipleQtyRequestedUnit, _requestedQuantity, roundedUpQtyRequestedUnit);

                    if (this.mustCorrectQty(multiplicityErrorCorrectionMethod, multipleQtyDialogStr))
                    {
                        acceptableQuantity = roundedUpQtyRequestedUnit;
                    }

                    if (dialogContext)
                    {
                        dialogContext.parmIsMultiplicityDialogPrompted(true);
                    }
                }
            }
        }

        return acceptableQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMaxQtyDialogStr</Name>
				<Source><![CDATA[
    private str buildMaxQtyDialogStr(Qty _highestQty, Qty _transQty)
    {
        str maxQtyDialogStr = strFmt("@SCM:MaximumAllowedQuantityMessage", _transQty, _highestQty );

        if (upperLimitErrorCorrectionMethod == InventMovementQuantityErrorCorrectionMethod::PromptUser)
        {
            maxQtyDialogStr += strFmt("@SCM:ReplaceQuantityMessage", _highestQty);
        }

        return maxQtyDialogStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMinQtyDialogStr</Name>
				<Source><![CDATA[
    private str buildMinQtyDialogStr(Qty _lowestQty, Qty _transQty)
    {
        str minQtyDialogStr = strFmt("@SCM:MinimumAllowedQuantityMessage", _transQty, _lowestQty);

        if (lowerLimitErrorCorrectionMethod == InventMovementQuantityErrorCorrectionMethod::PromptUser)
        {
            minQtyDialogStr += strFmt("@SCM:ReplaceQuantityMessage", _lowestQty);
        }

        return minQtyDialogStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMultipleDialogStr</Name>
				<Source><![CDATA[
    private TempStr buildMultipleDialogStr(Qty _multipleQty, Qty _transQty, Qty _roundedUpQty)
    {
        boolean isUserInteractionAllowed = multiplicityErrorCorrectionMethod == InventMovementQuantityErrorCorrectionMethod::PromptUser;
        return InventTable::buildMultipleDialogStr(_multipleQty, _transQty, _roundedUpQty, isUserInteractionAllowed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCorrectQty</Name>
				<Source><![CDATA[
    protected boolean mustCorrectQty(
        InventMovementQuantityErrorCorrectionMethod _errorCorrectionMethod,
        TempStr                                     _dialogText)
    {
        boolean result;

        switch (_errorCorrectionMethod)
        {
            case InventMovementQuantityErrorCorrectionMethod::PromptUser:
                result = Box::yesNo(_dialogText, DialogButton::Yes) == DialogButton::Yes;
                break;

            case InventMovementQuantityErrorCorrectionMethod::AutoCorrectUserInputWithInfoBox:
                result = true;
                Box::info(_dialogText);
                break;

            case InventMovementQuantityErrorCorrectionMethod::AutoCorrectUserInputWithWarning:
                result = true;
                warning(_dialogText);
                break;

            case InventMovementQuantityErrorCorrectionMethod::AutoCorrectUserInput:
                result = true;
                break;

            case InventMovementQuantityErrorCorrectionMethod::AcceptUserInput:
                result = false;
                break;

            case InventMovementQuantityErrorCorrectionMethod::AcceptUserInputWithWarning:
                warning(_dialogText);
                result = false;
                break;

            default:
                throw(error(Error::wrongUseOfFunction(funcName())));
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasGUI</Name>
				<Source><![CDATA[
    private boolean hasGUI()
    {
        if (hasGUI == UnknownNoYes::Unknown)
        {
            hasGUI = hasGUI() ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        return hasGUI == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>