<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankAccountStatementReconciliationCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankAccountStatementReconciliationCancel</c> class is performing the cancellation of last reconciled bank statement.
/// </summary>
internal final class BankAccountStatementReconciliationCancel
{
    private BankAccountStatement bankAccountStatement;
    private TransDate cancelDate;
    private ReasonCode reasonCode;
    private ReasonComment reasonComment;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromBankStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>BankAccountStatementReconciliationCancel</c> class.
    /// </summary>
    /// <param name = "_statement">The bank account statement.</param>
    /// <param name = "_cancelDate">The cancel date.</param>
    /// <param name = "_reasonCode">The reason code.</param>
    /// <param name = "_reasonComment">The reason comment.</param>
    /// <returns>The <c>BankAccountStatementReconciliationCancel</c> class instance.</returns>
    internal static BankAccountStatementReconciliationCancel newFromBankStatement(
        BankAccountStatement _statement,
        TransDate _cancelDate,
        ReasonCode _reasonCode,
        ReasonComment _reasonComment)
    {
        BankAccountStatementReconciliationCancel cancelBankReconciliation = new BankAccountStatementReconciliationCancel();

        cancelBankReconciliation.bankAccountStatement = _statement;
        cancelBankReconciliation.cancelDate = _cancelDate;
        cancelBankReconciliation.reasonCode = _reasonCode;
        cancelBankReconciliation.reasonComment = _reasonComment;

        return cancelBankReconciliation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates all necessary tables when a bank account statement is cancelled.
    /// </summary>
    internal static void cancelStatement(container _inputParameters)
    {
        BankAccountStatementReconciliationCancelInfo bankAccountStatementReconciliationCancelInfo = BankAccountStatementReconciliationCancelInfo::construct();
        bankAccountStatementReconciliationCancelInfo.unpack(_inputParameters);

        BankAccountStatementReconciliationCancel bankAccountStatementReconciliationCancel = BankAccountStatementReconciliationCancel::newFromBankStatement(
            bankAccountStatementReconciliationCancelInfo.bankAccountStatement,
            bankAccountStatementReconciliationCancelInfo.cancelDate,
            bankAccountStatementReconciliationCancelInfo.reasonCode,
            bankAccountStatementReconciliationCancelInfo.reasonComment);

        ttsbegin;
       
        bankAccountStatementReconciliationCancel.trackStatementInformation();
        bankAccountStatementReconciliationCancel.trackBankAccountTrans();

        bankAccountStatementReconciliationCancel.reverseBankAdjustments();
        bankAccountStatementReconciliationCancel.updateBankAccountStatement();

        bankAccountStatementReconciliationCancel.updateBankAccountTrans();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankAccountStatement</Name>
				<Source><![CDATA[
    private void updateBankAccountStatement()
    {
        BankAccountStatement bankAccountStatementToUpdate;

        update_recordset bankAccountStatementToUpdate
            setting
                CancelDate = cancelDate
            where bankAccountStatementToUpdate.AccountId == bankAccountStatement.AccountId
                && bankAccountStatementToUpdate.AccountStatementDate == bankAccountStatement.AccountStatementDate
                && bankAccountStatementToUpdate.AccountStatementNum == bankAccountStatement.AccountStatementNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankAccountTrans</Name>
				<Source><![CDATA[
    private void updateBankAccountTrans()
    {
        BankAccountTrans bankAccountTransToUpdate;

        update_recordset bankAccountTransToUpdate
            setting
                AmountCorrect = 0.0,
                LedgerDimension = 0
            where bankAccountTransToUpdate.AccountId == bankAccountStatement.AccountId
                && bankAccountTransToUpdate.AccountStatement == bankAccountStatement.AccountStatementNum
                && bankAccountTransToUpdate.AccountStatementDate == bankAccountStatement.AccountStatementDate
                && bankAccountTransToUpdate.Included == NoYes::Yes
                && bankAccountTransToUpdate.Reconciled == NoYes::Yes
                && bankAccountTransToUpdate.Manual == NoYes::No
                && bankAccountTransToUpdate.AmountCorrect != 0.0;

        if (FeatureStateProvider::isFeatureEnabled(BankBridgingVendorTransactionDetailsFeature::instance()))
        {
            update_recordset bankAccountTransToUpdate
            setting
                Included = NoYes::No,
                Reconciled = NoYes::No,
                AccountStatement = '',
                AccountStatementDate = dateNull(),
                ClearedDate = dateNull()
            where bankAccountTransToUpdate.AccountId == bankAccountStatement.AccountId
                && bankAccountTransToUpdate.AccountStatement == bankAccountStatement.AccountStatementNum
                && bankAccountTransToUpdate.AccountStatementDate == bankAccountStatement.AccountStatementDate
                && bankAccountTransToUpdate.Included == NoYes::Yes
                && bankAccountTransToUpdate.Reconciled == NoYes::Yes
                && bankAccountTransToUpdate.Manual == NoYes::No;
        }
        else
        {
            update_recordset bankAccountTransToUpdate
            setting
                Included = NoYes::No,
                Reconciled = NoYes::No,
                AccountStatement = '',
                AccountStatementDate = dateNull()
            where bankAccountTransToUpdate.AccountId == bankAccountStatement.AccountId
                && bankAccountTransToUpdate.AccountStatement == bankAccountStatement.AccountStatementNum
                && bankAccountTransToUpdate.AccountStatementDate == bankAccountStatement.AccountStatementDate
                && bankAccountTransToUpdate.Included == NoYes::Yes
                && bankAccountTransToUpdate.Reconciled == NoYes::Yes
                && bankAccountTransToUpdate.Manual == NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackStatementInformation</Name>
				<Source><![CDATA[
    private void trackStatementInformation()
    {
        bankAccountStatementReconciliationCancelHistory::insertCancelledStatementInformation(
            bankAccountStatement.RecId,
            bankAccountStatement.EndingBalance,
            bankAccountStatement.openingBalance(),
            cancelDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackBankAccountTrans</Name>
				<Source><![CDATA[
    private void trackBankAccountTrans()
    {
        BankAccountStatementTransactionsHistory::insertCancelledStatementTransactions(
            bankAccountStatement.AccountId,
            bankAccountStatement.AccountStatementDate,
            bankAccountStatement.AccountStatementNum,
            bankAccountStatement.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseBankAdjustments</Name>
				<Source><![CDATA[
    private void reverseBankAdjustments()
    {
        BankAccountTrans bankAccountTransToReverse;

        while select bankAccountTransToReverse
            where bankAccountTransToReverse.AccountId == bankAccountStatement.AccountId
                && bankAccountTransToReverse.AccountStatement == bankAccountStatement.AccountStatementNum
                && bankAccountTransToReverse.AccountStatementDate == bankAccountStatement.AccountStatementDate
                && bankAccountTransToReverse.Included == NoYes::Yes
                && bankAccountTransToReverse.Reconciled == NoYes::Yes
                && (bankAccountTransToReverse.AmountCorrect || bankAccountTransToReverse.Manual)
        {
            TransactionReversal_Bank transactionReversal_Bank = TransactionReversalBankFactory::newFromBankTrans(
                bankAccountTransToReverse, 
                cancelDate, 
                reasonCode, 
                reasonComment);

            Args args = new Args();
            args.record(bankAccountTransToReverse);

            transactionReversal_Bank.reversal(args);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>