<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25DebtReverse</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25DebtReverse
{
    TransDate           transDate;
    Map                 custMarkTrans;
    Map                 vendMarkTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendMarkup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean appendMarkup(CustVendTrans _custVendTrans, TransDate _transDate)
    {
        boolean ok;

        switch (_custVendTrans.TableId)
        {
            case tableNum(CustTrans) :
                ok = custMarkTrans.insert(_custVendTrans.RecId, _transDate);
                break;
            case tableNum(VendTrans) :
                ok = vendMarkTrans.insert(_custVendTrans.RecId, _transDate);
                break;
            default :
                throw error(strFmt(Error::wrongUseOfFunction(funcName())));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearMarkups</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clearMarkups()
    {
        custMarkTrans = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Date);
        vendMarkTrans = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsMarkup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean existsMarkup(CustVendTrans _custVendTrans)
    {
        boolean ret;

        switch (_custVendTrans.TableId)
        {
            case tableNum(CustTrans) :
                ret = custMarkTrans.exists(_custVendTrans.RecId);
                break;
            case tableNum(VendTrans) :
                ret = vendMarkTrans.exists(_custVendTrans.RecId);
                break;
            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
        ;
        custMarkTrans = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Date);
        vendMarkTrans = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeMarkup</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean removeMarkup(CustVendTrans _custVendTrans)
    {
        boolean ok;

        switch (_custVendTrans.TableId)
        {
            case tableNum(CustTrans) :
                ok = custMarkTrans.remove(_custVendTrans.RecId);
                break;
            case tableNum(VendTrans) :
                ok = vendMarkTrans.remove(_custVendTrans.RecId);
                break;
            default :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TransDate transDate(TransDate _transDate = transDate)
    {
        ;
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean updateNow()
    {
        #Macrolib.AviFiles

        CustTable               custTable;
        CustTrans               custTrans;
        CustSettlement          custSettlement;

        VendTable               vendTable;
        VendTrans               vendTrans;
        VendSettlement          vendSettlement;

        SpecTransManager        specTransManager;

        MapIterator             it;
        SysOperationProgress    progress;

        try
        {
            ttsbegin;

            progress = new SysOperationProgress();

            progress.setAnimation(#AviUpdate);

            progress.setCaption(strFmt("@SYS53184", "@GLS103847", "@SYS11307"));

            progress.setTotal(custMarkTrans.elements());

            it = new MapIterator(custMarkTrans);

            while (it.more())
            {
                transDate  = it.value();
                custTrans  = CustTrans::find(it.key());
                custTable  = CustTable::find(custTrans.AccountNum);

                progress.setText(custTable.name());

                select firstonly RecId, SettleAmountCur, TransRecId, OffsetRecid, TransDate, OffsetCompany, TransCompany from custSettlement
                    where custSettlement.TransRecId  == custTrans.RecId;

                specTransManager = SpecTransManager::newFromSpec(custTable, false);

                specTransManager.deleteAll();

                custSettlement.CustVendSettlement::markThisAndRelatedOffsets(specTransManager, custTrans.CurrencyCode);

                CustTrans::reverseTransact(custTable, null, SettleDatePrinc::DateOfPayment ,dateNull(), false);

                specTransManager.deleteAll();

                it.next();

                progress.incCount();
            }

            progress.setCount(0);
            progress.setCaption(strFmt("@SYS53184", "@GLS103847", "@SYS9449"));

            progress.setTotal(vendMarkTrans.elements());

            it = new MapIterator(vendMarkTrans);

            while (it.more())
            {
                transDate  = it.value();
                vendTrans  = VendTrans::find(it.key());
                vendTable  = VendTable::find(vendTrans.AccountNum);

                progress.setText(vendTable.name());

                select firstonly RecId, SettleAmountCur, TransRecId, OffsetRecid, TransDate, OffsetCompany, TransCompany from vendSettlement
                    where vendSettlement.TransRecId  == vendTrans.RecId;

                specTransManager = SpecTransManager::newFromSpec(vendTable, false);

                specTransManager.deleteAll();

                vendSettlement.CustVendSettlement::markThisAndRelatedOffsets(specTransManager, vendTrans.CurrencyCode);

                VendTrans::reverseTransact(vendTable, null,SettleDatePrinc::DateOfPayment ,dateNull(), false);
                specTransManager.deleteAll();

                it.next();

                progress.incCount();
            }

            this.clearMarkups();

            ttscommit;
            return true;
        }

        catch(Exception::Deadlock)
        {
            retry;
        }

        catch(Exception::Error)
        {
            ttsabort;
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25DebtReverse construct()
    {
        return new RTax25DebtReverse();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>