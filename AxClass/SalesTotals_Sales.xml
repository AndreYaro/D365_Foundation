<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotals_Sales</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesTotals_Sales extends SalesTotals implements PaymCalendarIDerivationSource, PaymCalendarIBankAddress
{
    SalesTable          salesTable;

    SalesUpdate         specQty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addMarkupLineDetails_RU</Name>
				<Source><![CDATA[
    protected void addMarkupLineDetails_RU(Common _record, MarkupAmount _markupAmount)
    {
        SalesLine           salesLine;

        switch (_record.TableId)
        {
            case tableNum(SalesLine):
                salesLine = _record;
                break;
            case tableNum(CustInvoiceTrans):
                CustInvoiceTrans custInvoiceTrans = _record;
                salesLine = custInvoiceTrans.salesLine();
                break;
            default:
                return;
        }

        CustPostingProfile postingProfile = salesLine.PostingProfile_RU ? salesLine.PostingProfile_RU : salesTable.PostingProfile;

        MarkupAmount markupAmountTmp = 0;
        if (markupLineDetails.exists([postingProfile, salesLine.inventProfileType_RU()]))
        {
            markupAmountTmp = markupLineDetails.lookup([postingProfile, salesLine.inventProfileType_RU()]);
        }
        markupLineDetails.insert([postingProfile, salesLine.inventProfileType_RU()], _markupAmount + markupAmountTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFreeValue</Name>
				<Source><![CDATA[
    [Replaceable]
    protected AmountCur calculateFreeValue()
    {
        #ISOCountryRegionCodes

        CustTable custTable = CustTable::find(this.invoiceAccount());

        if (checkAgreementLimit && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && CustParameters::find().AgreementCreditLine_RU)
        {
            SalesTable_RU salesTableRU = salesTable.salesTable_RU();
            if (salesTableRU.AgreementHeaderExt_RU)
            {
                SalesAgreementHeaderExt_RU salesAgreementHeaderExt = SalesAgreementHeaderExt_RU::find(salesTableRU.AgreementHeaderExt_RU);

                freeValue = salesAgreementHeaderExt.CreditMax - custTable.openBalanceMSTPerAgreement_RU(salesAgreementHeaderExt.AgreementId)
                                                                    - CurrencyExchangeHelper::mstAmount(this.totalAmount(), this.currencyCode(),
                                                                    DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                    Currency::noYes2UnknownNoYes(this.triangulation()),
                                                                    this.exchRate(), this.exchRateSecondary());
            }
            else
            {
                freeValue = custTable.CreditMax - SalesAgreementHeaderExt_RU::creditLimitPerCustAccount(custTable.InvoiceAccount)
                                                - custTable.openBalanceMSTPerAgreement_RU('')
                                                - CurrencyExchangeHelper::mstAmount(this.totalAmount(), this.currencyCode(), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), Currency::noYes2UnknownNoYes(this.triangulation()), this.exchRate(), this.exchRateSecondary());
            }
        }
        else
        {
            freeValue = super();

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoPL]) && (custTable.CreditMax || custTable.MandatoryCreditLimit) && CustParameters::find().CreditMaxCheck !=  TypeOfCreditmaxCheck::None)
            {
                CzCustAdvanceInvoiceTable advanceInvoice;

                select sum(InvoiceAmount) from advanceInvoice
                    where advanceInvoice.OrderAccount == custTable.AccountNum
                        && advanceInvoice.Type == AdvanceInvoiceType_W::Reversal;

                AmountMST reverseAdvanceInvoiceAmt = advanceInvoice.InvoiceAmount;

                select sum(InvoiceAmount) from advanceInvoice
                    where advanceInvoice.OrderAccount == custTable.AccountNum
                        && advanceInvoice.Type == AdvanceInvoiceType_W::Common;

                AmountMST advanceInvoiceAmt = advanceInvoice.InvoiceAmount;

                freeValue = freeValue + advanceInvoiceAmt + reverseAdvanceInvoiceAmt;
            }
        }

        return freeValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCallCenterOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns whether the sales order is associated with a call center or not.
    /// </summary>
    /// <returns>
    /// true if the sales order is a call center order; otherwise, false.
    /// </returns>
    protected boolean isCallCenterOrder()
    {
        return salesTable.mcrIsCallCenter();
	}

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscCode</Name>
				<Source><![CDATA[
    public CashDiscCode cashDiscCode()
    {
        return salesTable.CashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscPercent</Name>
				<Source><![CDATA[
    public DiscPct cashDiscPercent()
    {
        return salesTable.CashDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMax</Name>
				<Source><![CDATA[
    [Replaceable]
    public AmountMST creditMax()
    {
        // <GEERU>
        // </GEERU>

        if (CustParameters::find().AgreementCreditLine_RU && checkAgreementLimit)
        {
            // <GEERU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                SalesTable_RU salesTableRU = salesTable.salesTable_RU();
                if (salesTableRU.AgreementHeaderExt_RU)
                {
                    return SalesAgreementHeaderExt_RU::find(salesTableRU.AgreementHeaderExt_RU).CreditMax;
                }
            }
            // </GEERU>

            return CustTable::creditMax(this.invoiceAccount()) - SalesAgreementHeaderExt_RU::creditLimitPerCustAccount(this.invoiceAccount());
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the currency code of the record in the <c>Currency</c> table.
    /// </summary>
    /// <returns>
    /// The currency code of the record in the <c>Currency</c> table.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return salesTable.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate_ES</Name>
				<Source><![CDATA[
    public TransDate deliveryDate_ES()
    {
        return salesTable.ReceiptDateConfirmed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    public ExchRate exchRate()
    {
        return salesTable.exchRate(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    public ExchrateSecondary exchRateSecondary()
    {
        return salesTable.exchRateSecondary(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>LogisticsPostalAddress</c> record for the bank account for the invoice account on a
    /// sales order.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record.
    /// </returns>
    public LogisticsPostalAddress getBankPostalAddress()
    {
        CustTable custTable = CustTable::findByCompany(salesTable.company(), salesTable.InvoiceAccount);
        CustBankAccount custBankAccount = CustBankAccount::findByCompany(custTable.company(), custTable.AccountNum, custTable.BankAccount);

        return LogisticsLocationEntity::location2PostalAddress(custBankAccount.Location);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a <c>LogisticsPostalAddress</c> record for the invoice account on a sales order.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record.
    /// </returns>
    public LogisticsPostalAddress getPrimaryPostalAddress()
    {
        CustTable custTable = CustTable::findByCompany(salesTable.DataAreaId, salesTable.InvoiceAccount);

        return custTable.postalAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    protected CustAccount  invoiceAccount()
    {
        return salesTable.InvoiceAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineMarkupTransExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if any <c>MarkupTrans</c> table record is related to any line of the order.
    /// </summary>
    /// <returns>
    ///     true if a <c>MarkupTrans</c> table record exist; otherwise, false.
    /// </returns>
    public boolean lineMarkupTransExist()
    {
        SalesLine           localSalesLine;
        MarkupTrans         localMarkUpTrans;
        if (!lineMarkupTransExistSet)
        {
            if (SalesTotalsReplaceExistJoinWithJoinFlight::instance().isEnabled())
            {
                select firstonly RecId from localSalesLine
                    where localSalesLine.SalesId == salesTable.SalesId
                join localMarkUpTrans
                    where localMarkUpTrans.TransTableId == tableNum(SalesLine)
                       && localMarkUpTrans.IsDeleted    == NoYes::No
                       && localMarkUpTrans.TransRecId   == localSalesLine.RecId;
            }
            else 
            {
                select firstonly RecId from localMarkUpTrans
                    where localMarkUpTrans.TransTableId == tableNum(SalesLine)
                       && localMarkUpTrans.IsDeleted    == NoYes::No
                exists join localSalesLine
                    where localSalesLine.SalesId == salesTable.SalesId
                       && localSalesLine.RecId   == localMarkUpTrans.TransRecId;
            
            }
            lineMarkupTransExist    = localMarkUpTrans.RecId;
            lineMarkupTransExistSet = true;
        }

        return lineMarkupTransExist;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesTable     _salesTable,
             SalesUpdate    _specQty)

    {
        super(_salesTable);

        salesTable  = _salesTable;
        specQty     = _specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public PaymCalendarModuleType parmModuleType()
    {
        return PaymCalendarModuleType::Customer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode()
    {
        return salesTable.PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmPaymTermDataAreaId()
    {
        return salesTable.DataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermId</Name>
				<Source><![CDATA[
    public PaymTermId parmPaymTermId()
    {
        return salesTable.Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymCode</Name>
				<Source><![CDATA[
    public PaymTermId paymCode()
    {
        return salesTable.Payment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymDayId</Name>
				<Source><![CDATA[
    public PaymDayId paymDayId()
    {
        return salesTable.paymDayId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTaxAmountCalculation</Name>
				<Source><![CDATA[
    public void prepareTaxAmountCalculation()
    {
        super();

        // Project Accounting will calculate the taxes
        if (salesTable.SalesType == SalesType::ItemReq)
        {
            calculateTaxAmount = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipLine</Name>
				<Source><![CDATA[
    protected boolean skipLine(Common _orderLine)
    {
        boolean ret = super(_orderLine);

        if (ret)
        {
            // No further check needed, result of super indicates line should be skipped
            return ret;
        }

        // _orderLine could be SalesParmLine or SalesParmSubTable.  If _orderLine
        // is salesLine no need to find, can just assign
        if (_orderLine.TableId == tableNum(SalesLine))
        {
            SalesLine tSalesLine = _orderLine;

            //  Skip the Multiple ship to header line for the totals. The line is a virtual
            //  line that does not contribute to totals nor does it get fulfilled.
            if (tSalesLine.LineDeliveryType == LineDeliveryType::OrderLineWithMultipleDeliveries)
            {
                return true;
            }
            else
            {
                return false;
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    public EUROTriangulation  triangulation()
    {
        return salesTable.euroTriangulation(this.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesTotals_Sales construct(Common           _orderTable,
                                       SalesUpdate      _specQty       = SalesUpdate::All,
                                       AccountOrder     _sumBy         = AccountOrder::None,
                                       ParmId           _parmId        = '',
                                       SalesId          _sumSalesId    = '',
                                       DocumentStatus   _documentStatus= DocumentStatus::None)
    {
        if (_parmId)
        {
            if (_documentStatus == DocumentStatus::Invoice)
            {
                return SalesTotals_ParmTransInvoice::construct(_orderTable, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
            }
            else
            {
                return new SalesTotals_ParmTrans(_orderTable, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
            }
        }

        return new SalesTotals_Trans(_orderTable, _specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public DocumentDate documentDate()
    {
        if (salesTable.CashDiscBaseDate)
        {
            return salesTable.CashDiscBaseDate;
        }

        return super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>