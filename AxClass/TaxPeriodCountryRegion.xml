<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxPeriodCountryRegion</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   Calculates tax amount which are related to internal EU trade.
/// </summary>
public class TaxPeriodCountryRegion extends TaxPeriodAmounts
{
    TmpTaxPeriodAmount  tmpTaxPeriodCountryRegion;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillTmpTaxPeriodCountryRegion</Name>
				<Source><![CDATA[
    private void fillTmpTaxPeriodCountryRegion(
        TransDate           _fromDate,
        TransDate           _toDate,
        TaxPeriod           _taxPeriod,
        Counter             _versionMin,
        Counter             _versionMax,
        NoYes               _excludeServices)
    {
        TaxTable            taxTable;
        boolean             firstRow;
        container           prevTaxDirectionGroup;
        container           curTaxDirectionGroup;
        container           prevDistinctTaxBaseGroup;
        container           curDistinctTaxBaseGroup;
        TaxTrans            taxTransAggregatedAmounts;
        TaxItemGroupHeading taxItemGroupHeading;

        TaxTrans            taxTransGoods;
        TaxItemGroupHeading taxItemGroupGoods;

        firstRow = true;

        while select TaxDirection, Voucher, TransDate, SourceRecId, InventTransId,
                     TaxBaseAmount, TaxAmount, TaxInCostPrice, TaxAmountCur,
                     TaxBaseAmountCur, TaxInCostPriceMST, TaxInCostPriceCur
            from taxTrans
            order by TaxDirection, Voucher, TransDate, SourceRecId, InventTransId
            where taxTrans.TransDate     >= _fromDate        &&
                taxTrans.TransDate       <= _toDate          &&
                taxTrans.TaxPeriod       == _taxPeriod       &&
                taxTrans.TaxRepCounter   >= _versionMin      &&
                taxTrans.TaxRepCounter   <= _versionMax      &&
                taxTrans.Source          != TaxModuleType::Tax
                join TableId from taxTable
                    where taxTrans.TaxCode              == taxTable.TaxCode &&
                        taxTable.TaxCountryRegionType   == CountryRegionType::EU
                outer join EUSalesListType from taxItemGroupHeading
                    where taxItemGroupHeading.TaxItemGroup == taxTrans.TaxItemGroup
        {
            if (firstRow)
            {
                taxTransAggregatedAmounts.TaxDirection = taxTrans.TaxDirection;
                prevTaxDirectionGroup = [taxTrans.TaxDirection];
            }

            if (_excludeServices && taxItemGroupHeading.EUSalesListType == EUSalesListType::Service)
            {
                select firstOnly RecId from taxTransGoods
                    where taxTransGoods.Voucher   == taxTrans.Voucher   &&
                          taxTransGoods.TransDate == taxTrans.TransDate &&
                          taxTransGoods.RecId     != taxTrans.RecId
                    join TableId from taxItemGroupGoods
                        where taxItemGroupGoods.TaxItemGroup    == taxTransGoods.TaxItemGroup &&
                              taxItemGroupGoods.EUSalesListType != EUSalesListType::Service;

                if (!taxTransGoods.RecId)
                {
                    continue;
                }
            }

            // For each encountered combination of [taxTrans.TaxDirection] we want to calculate total amounts
            curTaxDirectionGroup = [taxTrans.TaxDirection];
            if (!firstRow && curTaxDirectionGroup != prevTaxDirectionGroup)
            {
                this.insertAggregatedAmountsCountryRegion(taxTransAggregatedAmounts);

                prevTaxDirectionGroup = curTaxDirectionGroup;

                taxTransAggregatedAmounts.clear();
                taxTransAggregatedAmounts.TaxDirection = taxTrans.TaxDirection;
            }

            // Aggregate tax amounts
            taxTransAggregatedAmounts.TaxAmount         += taxTrans.TaxAmount;
            taxTransAggregatedAmounts.TaxInCostPrice    += taxTrans.TaxInCostPrice;
            taxTransAggregatedAmounts.TaxAmountCur      += taxTrans.TaxAmountCur;
            taxTransAggregatedAmounts.TaxInCostPriceMST += taxTrans.TaxInCostPriceMST;
            taxTransAggregatedAmounts.TaxInCostPriceCur += taxTrans.TaxInCostPriceCur;

            // We don't want the same tax base to be included into the report twice so we are selecting firstonly records with distinct
            // [taxTrans.TaxDirection, taxTrans.ReverseChargeApplies_UK, taxTrans.Voucher, taxTrans.TransDate, taxTrans.SourceRecId, taxTrans.InventTransId] value combination
            // We act under assumption that in UK it is not possible to have
            // two tax codes one of which taxes gross amount and the other taxes net amount applied to the same sales/purchase line.
            curDistinctTaxBaseGroup = [taxTrans.TaxDirection, taxTrans.Voucher, taxTrans.TransDate, taxTrans.SourceRecId, taxTrans.InventTransId];
            if (curDistinctTaxBaseGroup != prevDistinctTaxBaseGroup)
            {
                taxTransAggregatedAmounts.TaxBaseAmount     += taxTrans.TaxBaseAmount;
                taxTransAggregatedAmounts.TaxBaseAmountCur  += taxTrans.TaxBaseAmountCur;

                prevDistinctTaxBaseGroup = curDistinctTaxBaseGroup;
            }

            firstRow = false;
        }

        if (!firstRow)
        {
            this.insertAggregatedAmountsCountryRegion(taxTransAggregatedAmounts);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes and inserts transactions in the <c>TmpTaxPeriodAmount</c> table, based upon the
    ///    transactions in the <c>TaxTrans</c> table.
    /// </summary>
    /// <param name="_fromDate">
    ///    The from date.
    /// </param>
    /// <param name="_toDate">
    ///    The to date.
    /// </param>
    /// <param name="_taxPeriod">
    ///    The tax period.
    /// </param>
    /// <param name="_taxRepVersion">
    ///    A <c>TaxRepVersion</c> value.
    /// </param>
    /// <param name="_taxRepCounter">
    ///    A <c>TaxVersion</c> value; optional.
    /// </param>
    /// <param name="_updateNow">
    ///    A <c>NoYes::No</c> enumeration value; optional.
    /// </param>
    /// <param name="_excludeServices">
    ///    A <c>NoYes::No</c> enumeration value; optional.
    /// </param>
    protected void init(TransDate       _fromDate,
                        TransDate       _toDate,
                        TaxPeriod       _taxPeriod,
                        TaxRepVersion   _taxRepVersion,
                        TaxVersion      _taxRepCounter  = 0,
                        NoYes           _updateNow      = NoYes::No,
                        NoYes           _excludeServices = NoYes::No)
    {
        super(_fromDate,
              _toDate,
              _taxPeriod,
              _taxRepVersion,
              _taxRepCounter,
              _updateNow);

        if (_taxRepCounter)
        {
            versionMax = _taxRepCounter;
            versionMin = _taxRepCounter;
        }
        else
        {
            versionMax    = TaxReport::counterMax(_taxRepVersion, _taxPeriod, _fromDate);
            versionMin    = TaxReport::counterMin(_taxRepVersion, _taxPeriod, _fromDate);

            if (_taxRepVersion == TaxRepVersion::Latest && _updateNow)
            {
                versionMin--;
                versionMax--;
            }
        }

        ttsbegin;

        this.fillTmpTaxPeriodCountryRegion(_fromDate, _toDate, _taxPeriod, versionMin, versionMax, _excludeServices);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAggregatedAmountsCountryRegion</Name>
				<Source><![CDATA[
    private void insertAggregatedAmountsCountryRegion(TaxTrans _taxTransAggregatedAmounts)
    {
        this.insertTmpTaxPeriodCountryRegion(TaxAmountType::TaxBaseAmount, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxBaseAmount);
        this.insertTmpTaxPeriodCountryRegion(TaxAmountType::TaxAmount, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxAmount);
        this.insertTmpTaxPeriodCountryRegion(TaxAmountType::TaxInCostPrice, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxInCostPrice);
        this.insertTmpTaxPeriodCountryRegion(TaxAmountType::TaxAmountCur, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxAmountCur);
        this.insertTmpTaxPeriodCountryRegion(TaxAmountType::TaxBaseAmountCur, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxBaseAmountCur);
        this.insertTmpTaxPeriodCountryRegion(TaxAmountType::TaxInCostPriceMST, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxInCostPriceMST);
        this.insertTmpTaxPeriodCountryRegion(TaxAmountType::TaxInCostPriceCur, _taxTransAggregatedAmounts, _taxTransAggregatedAmounts.TaxInCostPriceCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTaxPeriodCountryRegion</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Inserts values to temporary tables.
    /// </summary>
    /// <param name = "_taxAmountType">
    ///   Type of tax amount.
    /// </param>
    /// <param name = "_taxTrans">
    ///   <c>TaxTrans</c> record.
    /// </param>
    /// <param name = "_amount">
    ///   Amount value.
    /// </param>
    protected void insertTmpTaxPeriodCountryRegion(TaxAmountType _taxAmountType, TaxTrans _taxTrans, Amount _amount)
    {
        tmpTaxPeriodCountryRegion.initValue();
        tmpTaxPeriodCountryRegion.Amount = _amount;
        tmpTaxPeriodCountryRegion.TaxAmountType = _taxAmountType;
        tmpTaxPeriodCountryRegion.TaxDirection = _taxTrans.TaxDirection;
        tmpTaxPeriodCountryRegion.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountCurCty</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns tax amount in transaction currency related to trade with EU countries.
    /// </summary>
    /// <param name = "_taxDirection">
    ///   <c>TaxDirection</c> value.
    /// </param>
    /// <returns>
    ///   Tax amount.
    /// </returns>
    TaxBase taxAmountCurCty(TaxDirection _taxDirection)
    {
        select tmpTaxPeriodCountryRegion
            where tmpTaxPeriodCountryRegion.TaxDirection  == _taxDirection &&
                  tmpTaxPeriodCountryRegion.TaxAmountType == TaxAmountType::TaxAmountCur;

        return tmpTaxPeriodCountryRegion.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmountCurCty</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns tax base amount in transaction currency related to trade with EU countries.
    /// </summary>
    /// <param name = "_taxDirection">
    ///   <c>TaxDirection</c> value.
    /// </param>
    /// <returns>
    ///   Tax base amount.
    /// </returns>
    TaxBase taxBaseAmountCurCty(TaxDirection _taxDirection)
    {
        select tmpTaxPeriodCountryRegion
            where tmpTaxPeriodCountryRegion.TaxDirection  == _taxDirection &&
                  tmpTaxPeriodCountryRegion.TaxAmountType == TaxAmountType::TaxBaseAmountCur;

        return tmpTaxPeriodCountryRegion.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Creates and initializes new instance of <c>TaxPeriodCountryRegion</c> class.
    /// </summary>
    /// <param name = "_fromDate">
    ///   Start date for calculation.
    /// </param>
    /// <param name = "_toDate">
    ///   End date for calculation.
    /// </param>
    /// <param name = "_taxPeriod">
    ///   <c>TaxPeriod</c> value.
    /// </param>
    /// <param name = "_taxRepVersion">
    ///   <c>TaxRepVersion</c> value.
    /// </param>
    /// <param name = "_taxRepCounter">
    ///   <c>TaxVersion</c> value.
    /// </param>
    /// <param name = "_updateNow">
    ///    Boolean value.
    /// </param>
    /// <param name = "_excludeServices">
    ///   Boolean, indicating if services must be excluded from calculation.
    /// </param>
    /// <returns>
    ///   Calculated <c>TaxPeriodCountryRegion</c> class instance.
    /// </returns>
    public static TaxPeriodAmounts construct(TransDate        _fromDate,
                                                           TransDate        _toDate,
                                                           TaxPeriod        _taxPeriod,
                                                           TaxRepVersion    _taxRepVersion,
                                                           TaxVersion       _taxRepCounter  = 0,
                                                           NoYes            _updateNow      = NoYes::No,
                                                           NoYes            _excludeServices = NoYes::No)
    {
        TaxPeriodCountryRegion  taxPeriodCountryRegion;

        taxPeriodCountryRegion = new TaxPeriodCountryRegion();

        taxPeriodCountryRegion.init(_fromDate,
                                    _toDate,
                                    _taxPeriod,
                                    _taxRepVersion,
                                    _taxRepCounter,
                                    _updateNow,
                                    _excludeServices);

        return taxPeriodCountryRegion;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>