<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_DebtDebitReservation</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegCalc_DebtDebitReservation extends RTax25RegCalc implements BatchRetryable
{
    LedgerDimensionDefaultAccount revenueLedgerDimension,
                                  expenceLedgerDimension,
                                  reserveLedgerDimension;

    container           debtAmounts;
    AmountMST           regBadDebtAmount,      // Total bad debt amount

                        regPctReceipt,         // Percent from receipt

                        regReserve,            // Bad debt reserve for a current period
                        regUnusedReserve,      // Reserve remain from last period

                        regExpence,
                        regRevenue;

    RTax25DebtReserveVoucher    voucher;
    DimensionDefault            expenceDefaultDimension,
                                revenueDefaultDimension;
    RefRecId                    profitTableRecId;
    RTax25DebtModel             rTax25DebtModel;
    TransDate                   modelStartDate;
    TransDate                   modelEndDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        try
        {
            ttsbegin;

            super();

            if (modelEndDate == dateTo)
            {
                this.calcRegistry();
                this.saveRegistry();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcReceipt</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AmountMST calcReceipt()
    {
        RTax25StdExpressionTable            expressionTable;
        RTax25StdExpression                 expression;
        RTax25StdChannel_ARRegister         channel;
        RTax25RegType_DebtDebitReservation  regTypeReserve;
        AmountMST                           receiptLimit;

        if (! rTax25DebtModel.RevenueSeqNum)
        {
            return 0;
        }

        channel = RTax25StdChannel_ARRegister::construct();
        channel.open();

        while select expressionTable
        where expressionTable.SeqNum == rTax25DebtModel.RevenueSeqNum
        {
            expression = RTax25StdExpression::newParameters(expressionTable,
                                                        channel,
                                                        dateFrom,
                                                        dateTo,
                                                        rTax25PeriodIterator);
            expression.calc();
        }

        channel.close();

        if (regType is RTax25RegType_DebtDebitReservation)
        {
            regTypeReserve = regType as RTax25RegType_DebtDebitReservation;

            if (channel.transMap().exists(regTypeReserve.revLimitFieldId()))
            {
                receiptLimit = channel.transMap().lookup(regTypeReserve.revLimitFieldId()).decimal();
            }
        }

        if (receiptLimit < 0)
        {
            warning("@RTax25BadDebtReserve:ReserveLimitNegative");
            receiptLimit = 0;
        }

        return CurrencyExchangeHelper::amount(receiptLimit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRegistry</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calcRegistry()
    {
        RTax25DebtModelPeriod       debtPeriod;
        RTax25Query                 inventoryQuery, reservMovement;
        container                   childRegistryId;
        RTax25RegisterJournalTrans  childJournal;
        AmountMST                   debtAmount;
        int                         i;
        boolean                     inventoryFound;
        const int DebtPosStart = 5;
        const int ExclFromReserve = 4;
        const int ReserveRemainder = 5;

        childRegistryId  = regType.childRegisters();
        childJournal = RTax25RegCalcController::findChildJournalTrans(conpeek(regType.childRegisters(), 1), registerJournalTrans);

        inventoryQuery   = RTax25Query::newParameters(conpeek(childRegistryId, 1), childJournal, true);

        inventoryFound = inventoryQuery.first();

        while select Percent from debtPeriod
            order by DaysFrom
            where debtPeriod.DebtModel == rTax25DebtModel.RecId
        {
            if (debtPeriod.Percent)
            {
                debtAmount = inventoryFound ? inventoryQuery.getFieldTotal(DebtPosStart + i, ExclFromReserve, queryValue(NoYes::No)) : 0;
                debtAmounts += debtAmount;
                regBadDebtAmount += debtAmount * debtPeriod.Percent / 100;
            }
            i++;
        }

        if (! inventoryFound)
        {
            return;
        }

        regPctReceipt     = this.calcReceipt();

        if (rTax25DebtModel.RevenueSeqNum && ! rTax25DebtModel.ReserveLimitOnDelta)
        {
            regReserve = min(regPctReceipt, regBadDebtAmount);
        }
        else
        {
            regReserve = regBadDebtAmount;
        }

        regUnusedReserve  = 0;

        reservMovement   = RTax25Query::newParameters(this.reserveMovRegType(),
                                                  RTax25RegCalcController::findChildJournalTrans(this.reserveMovRegType(),
                                                                                                 registerJournalTrans), true);
        if (reservMovement.first())
        {
            regUnusedReserve = reservMovement.getField(ReserveRemainder);
        }

        regExpence  = regReserve - regUnusedReserve;

        if (regExpence > 0)
        {
            regRevenue = 0;
        }
        else
        {
            regRevenue = -regExpence;
            regExpence = 0;
        }

        if (rTax25DebtModel.RevenueSeqNum && rTax25DebtModel.ReserveLimitOnDelta)
        {
            regExpence = min(regPctReceipt, regExpence); //only expense is limited
        }

        this.createLedgerTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean ret;
        RTax25DebtModelPeriod debtPeriod;

        ret = super();

        if (CustParameters::taxation_RU(registerJournalTrans.toDate()) != CustTaxation_RU::OnDelivery)
        {
            ret = checkFailed("@GLS104248");
        }

        select count(RecId) from debtPeriod
        where debtPeriod.DebtModel == regType.badDebtModel() &&
              debtPeriod.Percent  != 0;

        if (debtPeriod.RecId < 1)
        {
            ret = checkFailed("@GLS104246");
        }

        if (! revenueLedgerDimension || ! expenceLedgerDimension || ! reserveLedgerDimension)
        {
            ret = checkFailed("@GLS104247");
        }

        if (! revenueDefaultDimension || ! expenceDefaultDimension)
        {
            ret = checkFailed(strFmt("@RTax25BadDebtReserve:RevExpCodeNotSpecified", rTax25DebtModel.ModelId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createLedgerTrans()
    {
        LedgerVoucher                 ledgerVoucher;
        LedgerVoucherTransObject      ledgerVoucherTransObject;
        AmountMST                     transAmount;
        LedgerBondClient_RU           ledgerBondClient;
        LedgerDimensionDefaultAccount defaultAccount, offsetDefaultAccount;
        NumberSeq                     numberSeq;
        DictType                      dictType;
        DimensionDefault              defaultDimension;
        CurrencyExchangeHelper        currencyExchangeHelper;

        if (regRevenue)
        {
            defaultAccount       = reserveLedgerDimension;
            offsetDefaultAccount = revenueLedgerDimension;
            transAmount          = regRevenue;
            defaultDimension     = revenueDefaultDimension;
        }
        else
        {
            defaultAccount       = expenceLedgerDimension;
            offsetDefaultAccount = reserveLedgerDimension;
            transAmount          = regExpence;
            defaultDimension     = expenceDefaultDimension;
        }

        profitTableRecId = RTax25ProfitTable::findDefaultDimension(defaultDimension).RecId;

        if (transAmount == 0)
            return;

        numberSeq = NumberSeq::newGetVoucher(CustParameters::numRefRTax25DebtReserveVoucher(), false, true);

        if (! numberSeq)
        {
            dictType = new DictType(extendedTypeNum(RTax25DebtReserveVoucher));
            throw error(strFmt("@GLS111170","@SYS53912", dictType.label()));
        }

        voucher = numberSeq.voucher();

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                     SysModule::Cust,
                                                     CustParameters::numRefRTax25DebtReserveVoucher().numberSequenceTable().NumberSequence);

        ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(voucher,
                                                                 dateTo,
                                                                 SysModule::Cust,
                                                                 LedgerTransType::Payment));

        ledgerVoucher.findLedgerVoucherObject().parmVoucherCheck(false);
        ledgerBondClient = ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();

        if (ledgerBondClient)
        {
            ledgerBondClient.addNewLogObject();
        }
        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                         dateTo);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::CustPayment,
                                        LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, defaultDimension),
                                        CompanyInfoHelper::standardCurrency(),
                                        transAmount,
                                        currencyExchangeHelper);

        ledgerVoucherTransObject.parmSourceTableId(registerJournalTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(registerJournalTrans.RecId);
        ledgerVoucherTransObject.parmTransTxt("@GLS103823");
        ledgerVoucher.addTrans(ledgerVoucherTransObject);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::CustPayment,
                                        LedgerDimensionFacade::serviceCreateLedgerDimension(offsetDefaultAccount, defaultDimension),
                                        CompanyInfoHelper::standardCurrency(),
                                        -transAmount,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmSourceTableId(registerJournalTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(registerJournalTrans.RecId);
        ledgerVoucherTransObject.parmTransTxt("@GLS103823");
        ledgerVoucher.addTrans(ledgerVoucherTransObject);

        if (ledgerBondClient)
        {
            ledgerBondClient.bondLastVRef2CurrentLog();
            ledgerBondClient.removeCurrentLogObject();
        }

        ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStornoLedgerTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void createStornoLedgerTrans()
    {
        LedgerVoucher                 ledgerVoucher;
        LedgerVoucherTransObject      ledgerVoucherTransObject;
        AmountMST                     transAmount;
        LedgerDimensionDefaultAccount defaultAccount, offsetDefaultAccount;
        TransDate                     transDate;
        DimensionDefault              defaultDimension;
        CurrencyExchangeHelper        currencyExchangeHelper;
        RTax25DebtModelPeriod         debtPeriod;
        const int Expend = 5;
        const int SaleReceipt = 6;
        const int ReservationVoucher = 7;
        const int TransDatePos = 8;

        select count(DaysFrom) from debtPeriod
            where debtPeriod.DebtModel == regType.badDebtModel()
               && debtPeriod.Percent   != 0;

        if (regQuery.first())
        {
            regExpence  = regQuery.getField(Expend + debtPeriod.DaysFrom);
            regRevenue  = regQuery.getField(SaleReceipt + debtPeriod.DaysFrom);
            voucher     = regQuery.getField(ReservationVoucher + debtPeriod.DaysFrom);
            transDate   = regQuery.getField(TransDatePos + debtPeriod.DaysFrom);
        }
        else
            return;

        if (regRevenue)
        {
            defaultAccount       = revenueLedgerDimension;
            offsetDefaultAccount = reserveLedgerDimension;
            transAmount          = regRevenue;
            defaultDimension     = revenueDefaultDimension;
        }
        else
        {
            defaultAccount       = reserveLedgerDimension;
            offsetDefaultAccount = expenceLedgerDimension;
            transAmount          = regExpence;
            defaultDimension     = expenceDefaultDimension;
        }

        if (transAmount == 0 || ! voucher || ! transDate)
            return;

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                     SysModule::Cust,
                                                     CustParameters::numRefRTax25DebtReserveVoucher().numberSequenceTable().NumberSequence);

        ledgerVoucher.addVoucher(LedgerVoucherObject::newVoucher(voucher,
                                                                 transDate,
                                                                 SysModule::Cust,
                                                                 LedgerTransType::Payment,
                                                                 NoYes::Yes));

        ledgerVoucher.findLedgerVoucherObject().parmVoucherCheck(false);
        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                         transDate);
        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::CustPayment,
                                        LedgerDimensionFacade::serviceCreateLedgerDimension(defaultAccount, defaultDimension),
                                        CompanyInfoHelper::standardCurrency(),
                                        transAmount,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmSourceTableId(registerJournalTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(registerJournalTrans.RecId);
        ledgerVoucherTransObject.parmTransTxt(strFmt("@SYS76785","@GLS103823", "@GLS104140"));
        ledgerVoucher.addTrans(ledgerVoucherTransObject);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerVoucher.findLedgerVoucherObject(),
                                        LedgerPostingType::CustPayment,
                                        LedgerDimensionFacade::serviceCreateLedgerDimension(offsetDefaultAccount, defaultDimension),
                                        CompanyInfoHelper::standardCurrency(),
                                        -transAmount,
                                        currencyExchangeHelper);
        ledgerVoucherTransObject.parmSourceTableId(registerJournalTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(registerJournalTrans.RecId);
        ledgerVoucherTransObject.parmTransTxt(strFmt("@SYS76785","@GLS103823", "@GLS104140"));
        ledgerVoucher.addTrans(ledgerVoucherTransObject);

        ledgerVoucher.bondLast2_RU();

        ledgerVoucher.end();
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    public void delete()
    {
        this.createStornoLedgerTrans();
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null,
                        Batch                       _batch                = null)
    {
        boolean             ret = super(_registerJournalTrans, _batch);

        debtAmounts         = conNull();
        regBadDebtAmount    = 0;

        rTax25DebtModel = RTax25DebtModel::findRecId(regType.badDebtModel());

        revenueLedgerDimension  = rTax25DebtModel.UnrealisedRevenueLedgerDimension;
        revenueDefaultDimension = RTax25ProfitTable::profitRecId2DefaultDimension(rTax25DebtModel.RTax25ProfitTableProfit);

        expenceLedgerDimension  = rTax25DebtModel.UnrealisedExpenseLedgerDimension;
        reserveLedgerDimension  = rTax25DebtModel.BadDebtReserveLedgerDimension;
        expenceDefaultDimension = RTax25ProfitTable::profitRecId2DefaultDimension(rTax25DebtModel.rTax25ProfitTableLoss);

        [modelStartDate, modelEndDate] = RTax25DebtModel::periodDates(rTax25DebtModel.PeriodType, dateTo);

        if (modelEndDate == dateTo)
        {
            dateFrom = modelStartDate;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveMovRegType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a relevant reserve movement register type.
    /// </summary>
    /// <returns>
    /// A relevant reserve movement register type.
    /// </returns>

    protected RTax25RegisterType reserveMovRegType()
    {
        return RTax25RegisterType::DebtDebitReservMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveRegistry</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void saveRegistry()
    {
        regQuery.addBodyRecord(profitTableRecId,
                           debtAmounts +
                           [
                            CurrencyExchangeHelper::amount(regBadDebtAmount),
                            regPctReceipt,
                            CurrencyExchangeHelper::amount(regReserve),
                            regUnusedReserve,
                            CurrencyExchangeHelper::amount(regExpence),
                            CurrencyExchangeHelper::amount(regRevenue),
                            voucher,
                            dateTo],
                           rTax25DebtModel.TableId,
                           rTax25DebtModel.RecId,
                           "",
                           0,
                           CurrencyExchangeHelper::amount(regExpence ? regExpence : regRevenue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>