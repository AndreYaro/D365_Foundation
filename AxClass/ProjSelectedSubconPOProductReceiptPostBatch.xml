<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjSelectedSubconPOProductReceiptPostBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjSelectedSubconPOProductReceiptPostBatch</c> batch to post selected product receipt
/// </summary>
public class ProjSelectedSubconPOProductReceiptPostBatch extends RunBaseBatch implements BatchRetryable
{
    public static ProjSubconProductReceiptRecId projSubConProductReceiptRecID;
    private ProjPurchSubConInstrumentationLogger logger;

     #define.CurrentVersion(1)
     #LOCALMACRO.CurrentList
        projSubConProductReceiptRecID
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container  _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                return true;

            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ProjSelectedSubconPOProductReceiptPostBatch construct(ProjSubconProductReceiptRecId _projSubConProductReceiptRecid)
    {
        ProjSelectedSubconPOProductReceiptPostBatch batch = new ProjSelectedSubconPOProductReceiptPostBatch();
        batch.parmProjSubconProductReceiptRecId(_projSubConProductReceiptRecid);

        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjSubconProductReceiptRecId</Name>
				<Source><![CDATA[
    public projSubconProductReceiptRecId parmProjSubconProductReceiptRecId(ProjSubconProductReceiptRecId _projSubConProductReceiptRecid = projSubConProductReceiptRecId)
    {
        projSubConProductReceiptRecId = _projSubConProductReceiptRecid;

        return projSubConProductReceiptRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Proj:PostSelectedProjSubConProductReceipt";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(xArgs _args)
    {
        if (!_args)
        {
            throw error(strFmt("@SPS1272", funcName()));
        }

        ProjSubConProductReceipt productReceipt = _args.record() as ProjSubConProductReceipt;

        ProjSelectedSubconPOProductReceiptPostBatch task = ProjSelectedSubconPOProductReceiptPostBatch::construct(productReceipt.RecId);

        if (task.prompt())
        {
            task.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppresses the retrieving of the last values.
    /// </summary>
    /// <remarks>
    /// This class must always run with the currently passed values. Therefore, no last values are
    /// retrieved from the <see cref="T:SysLastValue" /> table.
    /// </remarks>
    public void getLast()
    {
        // This is a RunBaseBatch derivative class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());

        // Do not get last values for this batch task
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount

        ProjSubConProductReceipt projSubConProductReceipt;
        logger = ProjPurchSubConInstrumentationLogger::createLogger(classStr(ProjSelectedSubconPOProductReceiptPostBatch));
        try 
        {
            projSubConProductReceipt = ProjSubConProductReceipt::find(projSubConProductReceiptRecID);

            ttsbegin;
            ProjPostSubConProductReceipt projPostSubConProductReceipt = new ProjPostSubConProductReceipt();
        
            boolean Processed = projPostSubConProductReceipt.proceed(projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId, projSubConProductReceipt.ReceiptDate);
            if (Processed)
            {
                projSubConProductReceipt = ProjSubConProductReceipt::findByProductReceiptNum(projSubConProductReceipt.SubConProductReceiptId, true);
                ProjPostSubConProductReceipt.updateProductReceiptStatusAndActuals(projSubConProductReceipt);
            }
            ttscommit;
        }

        catch (Exception::TransientSqlConnectionError)  // In case of error with sql connection, db can't be updated to reflect error status. Log data to telemetry.
        {
            if (xSession::currentRetryCount() <= #RetryNum && ProjTransientSQLConnectionRetryProvider::retryTransientSqlConnectionError())
            {
                logger.logWarning(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                    this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                    Exception::TransientSqlConnectionError, xSession::currentRetryCount()));
                retry;
            }
            else
            {
                logger.logError(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                    this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                    Exception::TransientSqlConnectionError, xSession::currentRetryCount()));
                Error (strFmt("@Proj:ProjectSubconProductReceiptPostingFailure", projSubConProductReceipt.SubConProductReceiptId));
            }
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                logger.logError(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                    this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                    Exception::Deadlock, xSession::currentRetryCount()));
                Error (strFmt("@Proj:ProjectSubconProductReceiptPostingFailure", projSubConProductReceipt.SubConProductReceiptId));
            }
            else
            {
                logger.logWarning(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                    this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                    Exception::Deadlock, xSession::currentRetryCount()));
                sleep(ProjConstants::DeadLockRetryInterval * xSession::currentRetryCount());
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                logger.logError(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                    this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                    Exception::UpdateConflict, xSession::currentRetryCount()));
                Error (strFmt("@Proj:ProjectSubconProductReceiptPostingFailure", projSubConProductReceipt.SubConProductReceiptId));
            }
            else
            {
                logger.logWarning(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                    this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId,
                    Exception::UpdateConflict, xSession::currentRetryCount()));
                retry;
            }
        }
            
        catch (Exception::Error)
        {
            logger.logError(strFmt("@Proj:ProjPurchSubConReceiptPostingError",
                this.parmCurrentBatch(), projSubConProductReceipt.PurchId, projSubConProductReceipt.SubConProductReceiptId, 
                Exception::Error, xSession::currentRetryCount()));
            Error (strFmt("@Proj:ProjectSubconProductReceiptPostingFailure", projSubConProductReceipt.SubConProductReceiptId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>