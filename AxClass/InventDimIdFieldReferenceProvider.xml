<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimIdFieldReferenceProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimIdFieldReferenceProvider</c> class provides information about tables that can store references to <c>InventDim</c> records.
/// </summary>
public class InventDimIdFieldReferenceProvider
{
    boolean calculated;
    List    fieldList; // each element is a container: [tableId, fieldId]
    Set     tableNames; // each element is a string, table name
    Set     excludedConfigIds;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findInventDimIdFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list containing information about tables and fields that can store refereces to <c>InventDim</c> records.
    /// </summary>
    /// <returns>
    /// A list containing information about tables and fields that can store refereces to <c>InventDim</c> records.
    /// </returns>
    /// <remarks>
    /// The elements of the returned list is container of the format [tableId, fieldId].
    /// </remarks>
    public List findInventDimIdFields()
    {
        if (!calculated)
        {
            this.calculate();
        }

        return fieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    private void calculate()
    {
        Enumerator tableDictTableListEnumerator = this.getEnumerator();

        while (tableDictTableListEnumerator.moveNext())
        {
            // Loop through all fields in the current table and find fields that use the inventDimid
            SysDictTable sysDictTable = tableDictTableListEnumerator.current();
            if (sysDictTable && this.isCandidateInventDimIdTable(sysDictTable))
            {
                for (int fieldNo = 1; fieldNo <= sysDictTable.fieldCnt(); fieldNo++)
                {
                    SysDictField sysDictField = new SysDictField(sysDictTable.id(), sysDictTable.fieldCnt2Id(fieldNo));
                    if (sysDictField && this.isCandidateInventDimIdField(sysDictField))
                    {
                        tableNames.add(sysDictTable.name());
                        fieldList.addEnd([sysDictTable.id(), sysDictField.id()]);
                    }
                }
            }
        }

        calculated = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDimIdTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds all tables that can store refereces to <c>InventDim</c> records.
    /// </summary>
    /// <returns>A set with table names.</returns>
    public Set findInventDimIdTables()
    {
        if (!calculated)
        {
            this.calculate();
        }

        return tableNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an enumerator over the collection of tables that should be examined.
    /// </summary>
    /// <returns>
    /// An enumerator over the collection of tables that should be examined.
    /// </returns>
    protected Enumerator getEnumerator()
    {
        return new InventDimReferenceTableEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCandidateInventDimIdField</Name>
				<Source><![CDATA[
    private boolean isCandidateInventDimIdField(SysDictField _sysDictField)
    {
        // The field is affected if it uses InventDimId extended data type or a subtype of it
        return (_sysDictField.saveContents() && _sysDictField.isDerivedFrom(extendedTypeNum(InventDimId)) && this.isCandidateConfigKey(_sysDictField.configurationKeyId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCandidateInventDimIdTable</Name>
				<Source><![CDATA[
    private boolean isCandidateInventDimIdTable(SysDictTable _sysDictTable)
    {
        TableId tableId = _sysDictTable.id();

        // The table should only be evaluated if it has not been marked for deletion, it is
        // not a temporary table and is not excluded
        return (!_sysDictTable.isTmp()
            && !_sysDictTable.isTempDb()
            && !_sysDictTable.isMap()
            && !_sysDictTable.isView()
            && this.isCandidateConfigKey(_sysDictTable.configurationKeyId()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCandidateConfigKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the configuration key qualifies records for deletion.
    /// </summary>
    /// <param name="_configurationKeyId">
    /// A configuration key ID.
    /// </param>
    /// <returns>
    /// true if the configuration key qualifies records for deletion; otherwise, false.
    /// </returns>
    protected boolean isCandidateConfigKey(ConfigurationKeyId _configurationKeyId)
    {
        return !excludedConfigIds.in(_configurationKeyId);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        fieldList = new List(Types::Container);
        tableNames = new Set(Types::String);
        excludedConfigIds = new Set(Types::AnyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimIdFieldReferenceProvider construct()
    {
        return new InventDimIdFieldReferenceProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysDeletedObjectsConfigKeys</Name>
				<Source><![CDATA[
    private static Set sysDeletedObjectsConfigKeys()
    {
        Set excludedConfigIds = new Set(Types::AnyType);

        excludedConfigIds.add(configurationKeyNum(SysDeletedObjects41));
        excludedConfigIds.add(configurationKeyNum(SysDeletedObjects60));
        excludedConfigIds.add(configurationKeyNum(SysDeletedObjects62));
        excludedConfigIds.add(configurationKeyNum(SysDeletedObjects63));
        excludedConfigIds.add(configurationKeyNum(SysDeletedObjects70));
        excludedConfigIds.add(configurationKeyNum(SysDeletedObjects72));

        return excludedConfigIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExcludeSysDeletedObjects</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of the <c>InventDimIdFieldReferenceProvider</c> class that will exclude tables and fields with a SysDeletedObjects configuration key.
    /// </summary>
    /// <returns>A new instance of the <c>InventDimIdFieldReferenceProvider</c> class.</returns>
    public static InventDimIdFieldReferenceProvider newExcludeSysDeletedObjects()
    {
        InventDimIdFieldReferenceProvider provider = InventDimIdFieldReferenceProvider::construct();

        provider.parmExcludedConfigIds(InventDimIdFieldReferenceProvider::sysDeletedObjectsConfigKeys());

        return provider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludedConfigIds</Name>
				<Source><![CDATA[
    public Set parmExcludedConfigIds(Set _excludedConfigIds = excludedConfigIds)
    {
        excludedConfigIds = _excludedConfigIds;
        return excludedConfigIds;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>