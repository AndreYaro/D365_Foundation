<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventDimMetaDataCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventDimMetaDataCache</c> class caches metadata information about the <c>InventDim</c>
/// table and the <c>InventDimParm</c> table.
/// </summary>
public class InventDimMetaDataCache
{
    const int MinimumLenghtOfPackedListOrSet = 2;
    const str CacheClassScope = 'InventDimMetaDataCache';

    static List dimFieldList;
    static List dimAgreementFieldList;
    static List dimCovDimEnabledFieldList;
    static List dimEnabledFieldList;
    static List dimParmFieldList;
    static List dimParmFieldListLarge;
    static List dimParmEnabledFieldList;
    static List dimProductDimEnabledFieldList;
    static List dimProductDimFieldList;
    static List dimStorageDimEnabledFieldList;
    static List dimStorageDimFieldList;
    static List dimTrackingDimEnabledFieldList;
    static List dimTrackingDimFieldList;
    static List interCompanyDimFieldList;
    static List inventTransAndWarehouseTransactionViewDimFieldList;
    static List whsInventoryTransactionViewDimFieldList;
    static Set handleListReport;
    static Set dimProductDimFieldSet;
    static Set dimStorageDimFieldSet;
    static Set dimStorageDimEnabledFieldSet;
    static Set dimTrackingDimFieldSet;
    static Set dimProductDimEnabledFieldSet;

    private static int inventDimIdLength;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    public static void clearCache()
    {
        dimFieldList = null;
        dimAgreementFieldList = null;
        dimCovDimEnabledFieldList = null;
        dimEnabledFieldList = null;
        dimParmFieldList = null;
        dimParmFieldListLarge = null;
        dimParmEnabledFieldList = null;
        dimProductDimEnabledFieldList = null;
        dimProductDimFieldList = null;
        dimStorageDimEnabledFieldList = null;
        dimStorageDimFieldList = null;
        dimTrackingDimEnabledFieldList = null;
        dimTrackingDimFieldList = null;
        interCompanyDimFieldList = null;
        handleListReport = null;
        dimProductDimFieldSet = null;
        dimStorageDimFieldSet = null;
        dimTrackingDimFieldSet = null;
        dimProductDimEnabledFieldSet = null;
        inventDimIdLength = 0;

        classfactory.globalObjectCache().clear(CacheClassScope);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventDimMetaDataCache construct()
    {
        return new InventDimMetaDataCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimAgreementFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of field IDs from the <c>AgreementDimensionsPrioritized</c> field group in the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List dimAgreementFieldList()
    {
        if (!dimAgreementFieldList)
        {
            dimAgreementFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDim), tableFieldgroupStr(InventDim, AgreementDimensionsPrioritized), false);
        }

        return dimAgreementFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimCovDimEnabledFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of configuration enabled field IDs from the <c>ReqDimensionsPrioritized</c> field
    ///    group in the <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List dimCovDimEnabledFieldList()
    {
        if (!dimCovDimEnabledFieldList)
        {
            dimCovDimEnabledFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDim), tableFieldgroupStr(InventDim, ReqDimensionsPrioritized), true);
        }

        return dimCovDimEnabledFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimEnabledFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of configuration enabled field IDs from the <c>InventoryDimensions</c> field group
    ///    in the <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List dimEnabledFieldList()
    {
        if (!dimEnabledFieldList)
        {
            dimEnabledFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDim), tableFieldgroupStr(InventDim, InventoryDimensions), true);
        }
        return dimEnabledFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a list of field IDs from the <c>InventoryDimensions</c> field group in the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List dimFieldList()
    {
        if (!dimFieldList)
        {
            dimFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDim), tableFieldgroupStr(InventDim, InventoryDimensions), false);
        }
        return dimFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimParmFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of field IDs from the <c>FixedView</c> field group in the <c>InventDimParm</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List dimParmFieldList()
    {
        if (!dimParmFieldList)
        {
            dimParmFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDimParm), tableFieldgroupStr(InventDimParm, FixedView), false);
        }
        return dimParmFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimParmFieldListLarge</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of field IDs from the <c>View</c> field group in the <c>InventDimParm</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List dimParmFieldListLarge()
    {
        if (!dimParmFieldListLarge)
        {
            dimParmFieldListLarge = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDimParm), tableFieldgroupStr(InventDimParm, View), false);
        }
        return dimParmFieldListLarge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimParmEnabledFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of configuration enabled field IDs from the <c>FixedView</c> field group in the <c>InventDimParm</c> table.
    /// </summary>
    /// <returns>
    ///    The list of configuration enabled field IDs.
    /// </returns>
    static public List dimParmEnabledFieldList()
    {
        if (!dimParmEnabledFieldList)
        {
            dimParmEnabledFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDimParm), tableFieldgroupStr(InventDimParm, FixedView), true);
        }
        return dimParmEnabledFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimProductDimEnabledFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of configuration enabled field IDs from the <c>ProductDimensions</c> field group in the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    /// <remarks>
    ///    Only fields that are product dimensions are sent.
    /// </remarks>
    static public List dimProductDimEnabledFieldList()
    {
        if (!dimProductDimEnabledFieldList)
        {
            dimProductDimEnabledFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDim), tableFieldgroupStr(InventDim, ProductDimensions), true);
        }
        return dimProductDimEnabledFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimProductDimEnabledFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a set of configuration enabled field IDs from the <c>ProductDimensions</c> field group in the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The set of field IDs.
    /// </returns>
    /// <remarks>
    ///    Only fields that are product dimensions are sent.
    /// </remarks>
    static public Set dimProductDimEnabledFieldSet()
    {
        if (!dimProductDimEnabledFieldSet)
        {
            dimProductDimEnabledFieldSet = InventDimMetaDataCache::list2Set(InventDimMetaDataCache::dimProductDimEnabledFieldList());
        }

        return dimProductDimEnabledFieldSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimProductDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of field IDs from the <c>ProductDimensions</c> field group in the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List dimProductDimFieldList()
    {
        if (!dimProductDimFieldList)
        {
            dimProductDimFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDim), tableFieldgroupStr(InventDim, ProductDimensions), false);
        }
        return dimProductDimFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>list2Set</Name>
				<Source><![CDATA[
    static private Set list2Set(List _list)
    {
        return Set::create(_list.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimProductDimFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a set of field IDs from the <c>ProductDimensions</c> field group in the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The set of field IDs.
    /// </returns>
    static public Set dimProductDimFieldSet()
    {
        if (!dimProductDimFieldSet)
        {
            dimProductDimFieldSet = InventDimMetaDataCache::list2set(InventDimMetaDataCache::dimProductDimFieldList());
        }
        return dimProductDimFieldSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimTrackingDimFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a set of field IDs from the <c>TrackingDimensions</c> field group in the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The set of field IDs.
    /// </returns>
    static public Set dimTrackingDimFieldSet()
    {
        if (!dimTrackingDimFieldSet)
        {
            dimTrackingDimFieldSet = InventDimMetaDataCache::list2set(InventDimMetaDataCache::dimTrackingDimFieldList());
        }
        return dimTrackingDimFieldSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimStorageDimFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a set of field IDs from the <c>StorageDimensions</c> field group in the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The set of field IDs.
    /// </returns>
    static public Set dimStorageDimFieldSet()
    {
        if (!dimStorageDimFieldSet)
        {
            dimStorageDimFieldSet = InventDimMetaDataCache::list2set(InventDimMetaDataCache::dimStorageDimFieldList());
        }
        return dimStorageDimFieldSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimStorageDimEnabledFieldSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a set of configuration enabled field IDs from the <c>StorageDimensions</c> field group in the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The set of field IDs.
    /// </returns>
    /// <remarks>
    ///    Only fields that are enabled storage dimensions.
    /// </remarks>
    static public Set dimStorageDimEnabledFieldSet()
    {
        if (!dimStorageDimEnabledFieldSet)
        {
            dimStorageDimEnabledFieldSet = InventDimMetaDataCache::list2Set(InventDimMetaDataCache::dimStorageDimEnabledFieldList());
        }

        return dimStorageDimEnabledFieldSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimStorageDimEnabledFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of configuration enabled field IDs from the <c>StorageDimensions</c> field group in the
    ///    <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    /// <remarks>
    ///    Only fields that are storage dimensions are sent.
    /// </remarks>
    static public List dimStorageDimEnabledFieldList()
    {
        if (!dimStorageDimEnabledFieldList)
        {
            dimStorageDimEnabledFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDim), tableFieldgroupStr(InventDim, StorageDimensions), true);
        }
        return dimStorageDimEnabledFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimStorageDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of field IDs from the <c>StorageDimensions</c> field group in the <c>InventDim</c>
    ///    table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List dimStorageDimFieldList()
    {
        if (!dimStorageDimFieldList)
        {
            dimStorageDimFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDim), tableFieldgroupStr(InventDim, StorageDimensions), false);
        }
        return dimStorageDimFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimTrackingDimEnabledFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of configuration enabled field IDs from the <c>TrackingDimensions</c> field group in
    ///    the <c>InventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List dimTrackingDimEnabledFieldList()
    {
        if (!dimTrackingDimEnabledFieldList)
        {
            dimTrackingDimEnabledFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDim), tableFieldgroupStr(InventDim, TrackingDimensions), true);
        }
        return dimTrackingDimEnabledFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimTrackingDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of field IDs from the <c>TrackingDimensions</c> field group in the <c>InventDim</c>
    ///    table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List dimTrackingDimFieldList()
    {
        if (!dimTrackingDimFieldList)
        {
            dimTrackingDimFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InventDim), tableFieldgroupStr(InventDim, TrackingDimensions), false);
        }
        return dimTrackingDimFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillParameterFormView</Name>
				<Source><![CDATA[
    static public void fillParameterFormView(FormListControl _listView)
    {
        ListEnumerator  dimFields = InventDim::dimEnabledFieldList().getEnumerator();

        const int FieldImage = 11;

        _listView.deleteAll();

        while (dimFields.moveNext())
        {
            FieldId fieldId = dimFields.current();
            str fieldLabel = fieldId2pname(tableNum(InventDim), fieldId);

            _listView.addItem(new FormListItem(fieldLabel, FieldImage, fieldId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldGroupFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the list of field IDs from a field group of a table.
    /// </summary>
    /// <param name="_tableId">
    ///    The ID of a table for which to get the fields.
    /// </param>
    /// <param name="_fieldGroupStr">
    ///    The name of a field group in the table that is specified by the <paramref name="_tableId" />
    ///    parameter for which fields are to be returned.
    /// </param>
    /// <param name="_cfgEnabled">
    ///    If this parameter is true, the configuration key for the field will be checked.
    /// </param>
    /// <returns>
    ///    A List that has field names or IDs.
    /// </returns>
    static protected List getFieldGroupFields(
        TableId         _tableId,
        str             _fieldGroupStr,
        boolean         _cfgEnabled)
    {
        container               cacheKey = [_tableId, _fieldGroupStr, _cfgEnabled];
        List                    fieldList;

        var sysGlobalObjectCache = classfactory.globalObjectCache();
        container packedFields = sysGlobalObjectCache.find(CacheClassScope, cacheKey);

        if (packedFields && conLen(packedFields) >= MinimumLenghtOfPackedListOrSet)
        {
            fieldList = List::create(packedFields);
        }
        else
        {
            fieldList = InventDimMetaDataCache::getFieldGroupFieldsFromMetaData(_tableId, _fieldGroupStr, _cfgEnabled);
            sysGlobalObjectCache.insert(CacheClassScope, cacheKey, fieldList.pack());
        }

        return fieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldGroupFieldsFromMetaData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the list of field IDs from a field group of a table from metadata.
    /// </summary>
    /// <param name="_tableId">
    ///    The ID of a table for which to get the fields.
    /// </param>
    /// <param name="_fieldGroupStr">
    ///    The name of a field group in the table that is specified by the <paramref name="_tableId" />
    ///    parameter for which fields are to be returned.
    /// </param>
    /// <param name="_cfgEnabled">
    ///    If this parameter is true, the configuration key for the field will be checked.
    /// </param>
    /// <returns>
    ///    A list that has field names or IDs.
    /// </returns>
    static private List getFieldGroupFieldsFromMetaData(
        TableId         _tableId,
        str             _fieldGroupStr,
        boolean         _cfgEnabled)
    {
        List result = new List(Types::Integer);
        DictFieldGroup dictFieldGroup = new DictFieldGroup(_tableId, _fieldGroupStr);
        if (dictFieldGroup)
        {
            int fieldCnt = dictFieldGroup.numberOfFields();
            for (int i = 1; i <= fieldCnt; i++)
            {
                DictField dictField = new DictField(_tableId, dictFieldGroup.field(i));

                if (InventDimMetaDataCache::skipDictFieldNullCheck() || dictField)
                {
                    DictConfigurationKey dictConfigurationKey;
                    if (_cfgEnabled && dictField.configurationKeyId())
                    {
                        dictConfigurationKey = new DictConfigurationKey(dictField.configurationKeyId());
                    }

                    if (!dictConfigurationKey || dictConfigurationKey.enabled())
                    {
                        result.addEnd(dictField.id());
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleListReport</Name>
				<Source><![CDATA[
    static public Set handleListReport()
    {
        if (!handleListReport)
        {
            // Not found in cache
            str keyStr = 'handleListReport';
            var sysGlobalObjectCache = classfactory.globalObjectCache();
            container handleListReportPacked = sysGlobalObjectCache.find(CacheClassScope, [keyStr]);
            if (handleListReportPacked && conLen(handleListReportPacked) >= MinimumLenghtOfPackedListOrSet)
            {
                handleListReport = Set::create(handleListReportPacked);
            }
            else
            {
                handleListReport = new Set(Types::Integer);

                handleListReport.add(classNum(ReportStringControl));
                handleListReport.add(classNum(ReportIntegerControl));
                handleListReport.add(classNum(ReportRealControl));
                handleListReport.add(classNum(ReportEnumControl));
                handleListReport.add(classNum(ReportTimeControl));
                handleListReport.add(classNum(ReportPromptControl));
                sysGlobalObjectCache.insert(CacheClassScope, [keyStr], handleListReport.pack());
            }
        }
        return handleListReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimIdLength</Name>
				<Source><![CDATA[
    [Hookable(false)]
    static internal int inventDimIdLength()
    {
        if (!inventDimIdLength)
        {
            DictField inventDimId = new DictField(tableNum(InventDim), fieldNum(InventDim, inventDimId));

            inventDimIdLength = inventDimId.stringLen();
        }

        return inventDimIdLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of field IDs from the <c>InventoryDimensions</c> field group in the
    ///    <c>InterCompanyInventDim</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List interCompanyDimFieldList()
    {
        if (!interCompanyDimFieldList)
        {
            interCompanyDimFieldList = InventDimMetaDataCache::getFieldGroupFields(tableNum(InterCompanyInventDim), tableFieldgroupStr(InterCompanyInventDim, InventoryDimensions), false);
        }
        return interCompanyDimFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransAndWarehouseTransactionViewDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of field IDs from the <c>InventoryDimensions</c> field group in the
    ///    <c>WHSInventTransAndWarehouseTransactionView</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List inventTransAndWarehouseTransactionViewDimFieldList()
    {
        if (!inventTransAndWarehouseTransactionViewDimFieldList)
        {
            inventTransAndWarehouseTransactionViewDimFieldList = InventDimMetaDataCache::getFieldGroupFields(
                tableNum(WHSInventTransAndWarehouseTransactionView),
                tableFieldgroupStr(WHSInventTransAndWarehouseTransactionView, InventoryDimensions), false);
        }
        return inventTransAndWarehouseTransactionViewDimFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsInventoryTransactionViewDimFieldList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a list of field IDs from the <c>InventoryDimensions</c> field group in the
    ///    <c>WHSInventortTransactionView</c> table.
    /// </summary>
    /// <returns>
    ///    The list of field IDs.
    /// </returns>
    static public List whsInventoryTransactionViewDimFieldList()
    {
        if (!whsInventoryTransactionViewDimFieldList)
        {
            whsInventoryTransactionViewDimFieldList = InventDimMetaDataCache::getFieldGroupFields(
                tableNum(WHSInventoryTransactionView),
                tableFieldgroupStr(WHSInventoryTransactionView, InventoryDimensions), false);
        }
        return whsInventoryTransactionViewDimFieldList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipDictFieldNullCheck</Name>
				<Source><![CDATA[
    static protected boolean skipDictFieldNullCheck()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>systemHasMultipleProductDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets information about the multiple product dimensions that are enabled in the system.
    /// </summary>
    /// <returns>
    ///    A Boolean value that indicates whether more than one product dimension is enabled.
    /// </returns>
    static public boolean systemHasMultipleProductDim()
    {
        return InventDimMetaDataCache::dimProductDimEnabledFieldList().elements() > 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>