<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostClosingRecalcSecCur_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class InventCostClosingRecalcSecCur_RU extends InventCostClosingSecCur_RU implements BatchRetryable
{
    Integer                 dummy;

    QueryRun                queryRun;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        dummy
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkStdCostConversion</Name>
				<Source><![CDATA[
        protected boolean checkStdCostConversion(TransDate _transDate)
    {
        boolean ret = true;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventCostListRecordSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the initial work list for the recalculation.
    /// </summary>
    protected void createInventCostListRecordSet()
    {
        // If the query contains ranges or filters we need to create the InventCostList based on executing the query
        // Filters could exist if the user has changed the query in the query form UI
        if (SysQuery::queryHasRangesOrFilters(queryRun.query()))
        {
            // Build InventCostList using query with ranges
            this.createInventCostList();
        }
        else
        {
            // Build InventCostList using insert_recordset
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableCancelRecalculation</Name>
				<Source><![CDATA[
        protected boolean enableCancelRecalculation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
        public void initParmDefault()
    {
        super();

        runRecalculation    = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();

        queryRun = new QueryRun(queryStr(InventAdj_ClosingRecalc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container  pack()
    {
        return [#CurrentVersion, #CurrentList,queryRun.pack(),super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
        public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showCancelRecalculation</Name>
				<Source><![CDATA[
        protected boolean showCancelRecalculation()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
        public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showRunRecalculation</Name>
				<Source><![CDATA[
        protected boolean showRunRecalculation()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        container       base;
        boolean         ret;
        Integer         version    = conPeek(_packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList,packedQuery,base] = _packedClass;
                if (packedQuery && conLen(packedQuery) == 1)
                {
                    queryRun = new QueryRun(packedQuery);
                }

                ret = super(base);
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the description of the inventory close task.
    /// </summary>
    /// <returns>
    /// Inventory close task description.
    /// </returns>
    public static ClassDescription description()
    {
        return "@GLS106610";
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>