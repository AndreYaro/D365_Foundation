<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdjustmentUpdate_Post</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjAdjustmentUpdate_Post extends ProjAdjustmentUpdate
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCreateNewTransaction</Name>
				<Source><![CDATA[
    boolean checkCreateNewTransaction(ProjTrans _projTrans)
    {
        return (this.checkTransChanged() || this.checkCreateNewTrans(_projTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpFromAdjust</Name>
				<Source><![CDATA[
    TmpProjAdjustmentCreate createTmpFromAdjust()
    {
        TmpProjAdjustmentCreate tmpProjAdjustmentCreateLocal;
  
        tmpProjAdjustmentCreateLocal.clear();
        tmpProjAdjustmentCreateLocal.Txt             = tmpProjAdjustment.Txt;
        tmpProjAdjustmentCreateLocal.CurrencyIdCost  = tmpProjAdjustment.CurrencyIdCost;
        tmpProjAdjustmentCreateLocal.CurrencyId      = tmpProjAdjustment.CurrencyId;
        tmpProjAdjustmentCreateLocal.DefaultDimension = tmpProjAdjustment.DefaultDimension;
        tmpProjAdjustmentCreateLocal.QtyToBeInvoiced = tmpProjAdjustment.QtyToBeInvoiced;
        tmpProjAdjustmentCreateLocal.TaxgroupId      = tmpProjAdjustment.TaxGroupId;
        tmpProjAdjustmentCreateLocal.TaxItemGroupId  = tmpProjAdjustment.TaxItemGroupId;
        tmpProjAdjustmentCreateLocal.TotalCostAmountCur = tmpProjAdjustment.TotalCostAmountCur;
        tmpProjAdjustmentCreateLocal.TotalSalesAmountCur = tmpProjAdjustment.TotalSalesAmountCur;
        tmpProjAdjustmentCreateLocal.Transdate       = tmpProjAdjustment.TransDate;
        tmpProjAdjustmentCreateLocal.TransID         = tmpProjAdjustment.TransId;
        tmpProjAdjustmentCreateLocal.Qty             = -tmpProjAdjustment.Qty;
        tmpProjAdjustmentCreateLocal.Resource        = tmpProjAdjustment.Resource;
        tmpProjAdjustmentCreateLocal.ResourceCategory    = tmpProjAdjustment.ResourceCategory;
        tmpProjAdjustmentCreateLocal.ActivityNumber  = tmpProjAdjustment.ActivityNumber;
        tmpProjAdjustmentCreateLocal.AdjustmentType  = tmpProjAdjustment.AdjustmentType;

        tmpProjAdjustmentCreateLocal.InventTransId   = tmpProjAdjustment.InventTransId;
        tmpProjAdjustmentCreateLocal.ProjAdjustRefId = tmpProjAdjustment.ProjAdjustRefid;

        tmpProjAdjustmentCreateLocal.InventDimId     = tmpProjAdjustment.InventDimid;
        tmpProjAdjustmentCreateLocal.PackingSlipId   = tmpProjAdjustment.PackingSlipId;

        tmpProjAdjustmentCreateLocal.ProjId          = tmpProjAdjustment.ProjId;
        tmpProjAdjustmentCreateLocal.ActivityNumber  = tmpProjAdjustment.ActivityNumber;
        tmpProjAdjustmentCreateLocal.CategoryId      = tmpProjAdjustment.CategoryId;
        tmpProjAdjustmentCreateLocal.LinePropertyId  = tmpProjAdjustment.LinePropertyId;
        tmpProjAdjustmentCreateLocal.LedgerDimension   = tmpProjAdjustment.LedgerDimension;
        tmpProjAdjustmentCreateLocal.ItemId          = tmpProjAdjustment.ItemId;
        tmpProjAdjustmentCreateLocal.ItemType        = tmpProjAdjustment.ItemType;

        tmpProjAdjustmentCreateLocal.SalesUnit       = tmpProjAdjustment.SalesUnit;

        tmpProjAdjustmentCreateLocal.ProjIdentId     = tmpProjAdjustment.ProjIdentId;
        tmpProjAdjustmentCreateLocal.ProjIdentResource = tmpProjAdjustment.ProjIdentResource;
        tmpProjAdjustmentCreateLocal.Module          = tmpProjAdjustment.Module;
        tmpProjAdjustmentCreateLocal.OriginCost      = tmpProjAdjustment.OriginCost;
        tmpProjAdjustmentCreate.psaProjOrigTransId   = tmpProjAdjustment.TransId;

        // <GEEU>
        if (LedgerParameters::isStornoEnabledEE())
        {
            select firstonly tmpProjAdjustmentCreate
            where tmpProjAdjustmentCreate.TransID == tmpProjAdjustment.TransId;

            tmpProjAdjustmentCreateLocal.AdjustCorrection = tmpProjAdjustmentCreate.AdjustCorrection;
        }
        // </GEEU>

        // <GIN>
        if (TaxParameters::checkTaxParameters_IN() || TaxWithholdParameters_IN::checkTaxParameters())
        {
            tmpProjAdjustmentCreateLocal.AssessableValue_IN             = tmpProjAdjustment.AssessableValue_IN;
            tmpProjAdjustmentCreateLocal.MaximumRetailPrice_IN          = tmpProjAdjustment.MaximumRetailPrice_IN;
            tmpProjAdjustmentCreateLocal.tcsGroup_IN                    = tmpProjAdjustment.tcsGroup_IN;
            tmpProjAdjustmentCreateLocal.tdsGroup_IN                    = tmpProjAdjustment.tdsGroup_IN;
        }
        // </GIN>

        tmpProjAdjustmentCreateLocal.insert();

        // <GTE>
        if (TaxIntegrationUtils::isTaxInformationEnabled())
        {
            TransTaxInformationHelper::copyTransTaxInformation(tmpProjAdjustment, tmpProjAdjustmentCreateLocal);
        }
        // </GTE>

        return tmpProjAdjustmentCreateLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpProjAdjustmentCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a <c>TmpProjAdjustmentCreateCost</c> table record.
    /// </summary>
    /// <param name = "_tmpProjAdjustmentCreate">A <c>TmpProjAdjustmentCreate</c> table record.</param>
    /// <param name = "_tmpProjAdjustmentCost">A <c>TmpProjAdjustmentCost</c> table record.</param>
    /// <returns>An initialized <c>TmpProjAdjustmentCreateCost</c> table record.</returns>
    protected TmpProjAdjustmentCreateCost initFromTmpProjAdjustmentCost(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate, TmpProjAdjustmentCost _tmpProjAdjustmentCost)
    {
        TmpProjAdjustmentCreateCost tmpProjAdjustmentCreateCostLocal;

        tmpProjAdjustmentCreateCostLocal.clear();
        tmpProjAdjustmentCreateCostLocal.RefRecId         = _tmpProjAdjustmentCreate.RecId;
        tmpProjAdjustmentCreateCostLocal.CostRefRecId     = 0;
        tmpProjAdjustmentCreateCostLocal.CostPrice        = _tmpProjAdjustmentCost.CostPrice;
        if (!ProjAdjustmentPostCostCorrectlyFlight::instance().isEnabled())
        {
            int sign = (_tmpProjAdjustmentCreate.Qty < 0 ? -1 : 1);
            tmpProjAdjustmentCreateCostLocal.LineAmount = abs(_tmpProjAdjustmentCost.LineAmount) * sign;
        }
        else
        {
            tmpProjAdjustmentCreateCostLocal.LineAmount = (_tmpProjAdjustmentCost.LineAmount) * -1;        
        }
        tmpProjAdjustmentCreateCostLocal.FundingSource    = _tmpProjAdjustmentCost.FundingSource;
        tmpProjAdjustmentCreateCostLocal.DefaultDimension = _tmpProjAdjustmentCost.DefaultDimension;

        return tmpProjAdjustmentCreateCostLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpFromAdjustCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a new <c>TmpProjAdjustmentCreateCost</c> table record.
    /// </summary>
    /// <param name = "_tmpProjAdjustmentCreate">A <c>TmpProjAdjustmentCreate</c> table record.</param>
    /// <param name = "_tmpProjAdjustmentCost">A <c>TmpProjAdjustmentCost</c> table record.</param>
    /// <returns>The inserted <c>TmpProjAdjustmentCreateCost</c> table record.</returns>
    public TmpProjAdjustmentCreateCost createTmpFromAdjustCost(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate, TmpProjAdjustmentCost _tmpProjAdjustmentCost)
    {
        TmpProjAdjustmentCreateCost tmpProjAdjustmentCreateCostLocal = this.initFromTmpProjAdjustmentCost(_tmpProjAdjustmentCreate, _tmpProjAdjustmentCost);
        tmpProjAdjustmentCreateCostLocal.insert();

        return tmpProjAdjustmentCreateCostLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTmpProjAdjustmentSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a <c>TmpProjAdjustmentCreateSale</c> table record.
    /// </summary>
    /// <param name = "_tmpProjAdjustmentCreate">A <c>TmpProjAdjustmentCreate</c> table record.</param>
    /// <param name = "_tmpProjAdjustmentSale">A <c>TmpProjAdjustmentSale</c> table record.</param>
    /// <returns>An initialized <c>TmpProjAdjustmentCreateSale</c> table record.</returns>
    protected TmpProjAdjustmentCreateSale initFromTmpProjAdjustmentSale(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate, TmpProjAdjustmentSale _tmpProjAdjustmentSale)
    {
        TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSaleLocal;

        tmpProjAdjustmentCreateSaleLocal.clear();
        tmpProjAdjustmentCreateSaleLocal.RefRecId = _tmpProjAdjustmentCreate.RecId;
        tmpProjAdjustmentCreateSaleLocal.SaleRefRecId = 0;
        tmpProjAdjustmentCreateSaleLocal.SalesPrice = _tmpProjAdjustmentSale.SalesPrice;
        tmpProjAdjustmentCreateSaleLocal.LineAmount = _tmpProjAdjustmentSale.LineAmount * -1;
        tmpProjAdjustmentCreateSaleLocal.FundingSource = _tmpProjAdjustmentSale.FundingSource;
        tmpProjAdjustmentCreateSaleLocal.DefaultDimension = _tmpProjAdjustmentSale.DefaultDimension;

        return tmpProjAdjustmentCreateSaleLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpFromAdjustSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and inserts a new <c>TmpProjAdjustmentCreateSale</c> table record.
    /// </summary>
    /// <param name = "_tmpProjAdjustmentCreate">A <c>TmpProjAdjustmentCreate</c> table record.</param>
    /// <param name = "_tmpProjAdjustmentSale">A <c>TmpProjAdjustmentSale</c> table record.</param>
    /// <returns>The inserted <c>TmpProjAdjustmentCreateSale</c> table record.</returns>
    public TmpProjAdjustmentCreateSale createTmpFromAdjustSale(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate, TmpProjAdjustmentSale _tmpProjAdjustmentSale)
    {
        TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSaleLocal = this.initFromTmpProjAdjustmentSale(_tmpProjAdjustmentCreate, _tmpProjAdjustmentSale);
        tmpProjAdjustmentCreateSaleLocal.insert();

        return tmpProjAdjustmentCreateSaleLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>docuCopy</Name>
				<Source><![CDATA[
    public void docuCopy(ProjEmplTrans _projEmplTrans, ProjJournalTrans _projJournalTrans)
    {
        Docu::copy(_projEmplTrans, _projJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoError</Name>
				<Source><![CDATA[
    public void infoError()
    {
        throw error("@SYS25904");
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        ProjTrans           projTrans;
        ProjAdjustmentType  oldAdjustmentType;

        // Post adjusted records
        while select tmpProjAdjustment
            order by AdjustmentType
            where tmpProjAdjustment.Adjusted
        {
            if (!this.validateProjStatusForAdjustment(ProjTable::find(tmpProjAdjustment.ProjId)))
            {
                return;
            }

            if (this.parmLineNum() && (tmpProjAdjustment.AdjustmentType != oldAdjustmentType))
            {
                this.deleteJournal();
            }

            projTrans = this.projTrans(tmpProjAdjustment.AdjustmentType, tmpProjAdjustment.TransId);

            if (this.checkCreateNewTransaction(projTrans) && !tmpProjAdjustment.smaSubscriptionId)
            {
                if (!voucher)
                {
                    AccountingDate accountingDate = this.parmAccountingDate();

                    if (!this.validateAccountingDate(accountingDate))
                    {
                        return;
                    }

                    this.ledgerVoucherTransCreate(accountingDate);
                }

                // For record not created through 'standard' journals post old record as negative
                if (!TmpProjAdjustment::createReverseTrans(tmpProjAdjustment.AdjustmentType))
                {
                    this.postNegative(projTrans,this.adjustStatus());
                }

                // item record must be split according to inventtrans split
                if (tmpProjAdjustment.checkAdjustmentType(ProjAdjustmentType::Item) && ProjItemTrans::isStocked(tmpProjAdjustment.InventTransId))
                {
                    inventTransMapOrig = this.insertInventTransMap(InventTransOrigin::findByInventTransId(tmpProjAdjustment.InventTransId).RecId, tmpProjAdjustment.ProjAdjustRefid);

                    inventRemainQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(tmpProjAdjustment.ItemId,
                                                                                                            tmpProjAdjustment.InventDimid,
                                                                                                            tmpProjAdjustment.Qty,
                                                                                                            tmpProjAdjustment.SalesUnit,
                                                                                                            InventTable::find(tmpProjAdjustment.ItemId).inventUnitId(),
                                                                                                            NoYes::Yes);
                    inventUsedCost  = 0;
                }

                this.doPosting();

                if (remainQty)
                {
                    throw error("@SYS74611");
                }
                if (useInfolog)
                {
                    info(strFmt("@SYS76924", tmpProjAdjustment.TransId));
                }
            }

            // Update old transaction

            if (this.checkTransChanged())
            {
                while select forupdate tmpProjAdjustmentCreate
                where tmpProjAdjustmentCreate.TransID == tmpProjAdjustment.TransId &&
                        !tmpProjAdjustmentCreate.AdjustOrig
                {
                    this.update(tmpProjAdjustmentCreate,projTrans,tmpProjAdjustment.IsIntercompany);
                }
                if (useInfolog)
                {
                    info(strFmt("@SYS76925", tmpProjAdjustment.TransId));
                }
            }
            else
            {
                info(strFmt("@SYS76926", tmpProjAdjustment.TransId));
            }

            oldAdjustmentType = tmpProjAdjustment.AdjustmentType;
        }

        if (this.parmLineNum())
        {
            this.deleteJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjStatusForAdjustment</Name>
				<Source><![CDATA[
    protected boolean validateProjStatusForAdjustment(ProjTable _projTable)
    {
        boolean ret = true;

        // Validates whether project stage is closed at the time of adjustment
        if (_projTable.Status == ProjStatus::Completed)
        {
            ret = checkFailed(strFmt("@SYS135526", _projTable.Stage()));
            throw error("@SYS21628");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPosting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the project adjustment transactions.
    /// </summary>
    protected void doPosting()
    {
        QueryRun queryRun;

        first   = true;

        queryRun = new QueryRun(this.createPostNewQuery());
        queryRun.setRecord(tmpProjAdjustmentCreate);
            
        // Create new transaction
        while (queryRun.next())
        {
            this.postNew(queryRun.get(tableNum(TmpProjAdjustmentCreate)));
            first = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPostNewQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for the project adjustment posting.
    /// </summary>
    /// <returns>
    /// The <c>Query</c> instance.
    /// </returns>
    protected Query createPostNewQuery()
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        
        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(TmpProjAdjustmentCreate));
        queryBuildDataSource.addRange(fieldNum(TmpProjAdjustmentCreate, TransID)).value(tmpProjAdjustment.TransId);
        
        if (!ProjTable::find(tmpProjAdjustment.ProjId).UseBudgeting)
        {
            // qty to be sure that inventTrans comes in the correct sequence
            queryBuildDataSource.addSortField(fieldNum(TmpProjAdjustmentCreate, Qty), SortOrder::Ascending);
        }
        else
        {
            queryBuildDataSource = this.getQueryBuildDataSourceToSortField(queryBuildDataSource);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAccountingDate</Name>
				<Source><![CDATA[
    private boolean validateAccountingDate(AccountingDate _accountingDate)
    {
        RecId fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        if (!LedgerFiscalCalendar::checkLedgerPeriodDateModule(fiscalCalendarRecId, _accountingDate, SysModule::Project, false))
        {
            return checkFailed(strFmt("@SYS17615", _accountingDate));
        }

        return true;

    }

]]></Source>
			</Method>
			<Method>
				<Name>performAdjustmentCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if adjustment correction on posted expense transaction needs to be done based on country region.
    /// </summary>
    /// <returns>
    /// true, if the country region of the legal entity needs adjustment correction; otherwise, false.
    /// </returns>
    protected boolean performAdjustmentCorrection()
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoCZ, #isoHU, #isoLT, #isoLV, #isoEE]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postCost</Name>
				<Source><![CDATA[
    public void postCost(ProjTransStatus _status)
    {
        ProjCostTrans               projCostTransOrig;
        ProjCostTrans               projCostTransNew;
        ProjCostTransCost           projCostTransCostOrig;
        ProjCostTransSale           projCostTransSaleOrig;
        boolean                     enterCost   = true;
        TransDate                   adjTransDate;
        LedgerJournalTrans          ledgerJournalTrans;
        ProjPost                    projPostLedger;
        LedgerJournalTrans_Project  ledgerJournalTrans_Project;
        TmpProjAdjustmentCreate     tmpProjAdjustmentCreate_Nagative;
        TmpProjAdjustmentCreateCost tmpProjAdjustmentCreateCost_Nagative;
        TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSale_Nagative;
        LedgerJournalTable          ledgerJournalTable;

        // <GEEU>
        #ISOCountryRegionCodes

        boolean                     countryRegion_EU = this.performAdjustmentCorrection();
        LedgerCorrection            isAdjustmentCorrection;

        if (LedgerParameters::isStornoEnabledEE())
        {
            isAdjustmentCorrection = this.isAdjustmentCorrection(this.tmpProjAdjustmentCreate(tmpProjAdjustment.TransId).AdjustCorrection,
                                                                    tmpProjAdjustment.AdjustCorrection,
                                                                    true);
        }
        // </GEEU>
        if (_status == ProjTransStatus::Adjusted)
        {
            projCostTransOrig   = ProjCostTrans::find(tmpProjAdjustment.TransId, true);
            adjTransDate = this.tmpProjAdjustmentCreate(tmpProjAdjustment.TransId).Transdate;

            boolean setAdjustProjTransStatus = FeatureStateProvider::isFeatureEnabled(ProjAdjustmentKeepOrigFinDimOnReversingTransFeature::instance());
            
            // create new negative projCostTrans
            ProjPost projCostTransPost = this.instantiateProjPostForNegativeAdjustmentTransaction(
                projCostTransOrig,
                adjTransDate);
            // <GEEU>
            if (countryRegion_EU)
            {
                projCostTransPost.parmAdjustCorrection(isAdjustmentCorrection);
            }
            // </GEEU>
            
            if (setAdjustProjTransStatus)
            {
                projCostTransPost.parmTransStatus(_status);
            }

            projCostTransPost.postTrans();

            projCostTransNew = ProjCostTrans::find(projCostTransPost.parmTransIdNew());

            ProjPost projCostTransCostPost;
            // create new negative projCostTransCost
            while select tmpProjAdjustmentCost
                where tmpProjAdjustmentCost.TransId == tmpProjAdjustment.TransId
            {
                projCostTransCostOrig = ProjCostTransCost::find(tmpProjAdjustmentCost.CostRefRecId, true);

                projCostTransCostPost = this.instantiateProjPostForNegativeAdjustmentTransactionCost(
                    projCostTransNew,
                    projCostTransOrig,
                    projCostTransCostOrig,
                    enterCost);
                // <GEEU>
                if (countryRegion_EU)
                {
                    projCostTransCostPost.parmAdjustCorrection(isAdjustmentCorrection);
                }
                // </GEEU>

                ExchRate exchRate, reportingCurrencyExchRate;
                // Calculate exch rate for expense journals
                select firstOnly ExchRate, ReportingCurrencyExchRate from ledgerJournalTrans
                    exists join ledgerJournalTrans_Project
                    where ledgerJournalTrans_Project.RefRecId == ledgerJournalTrans.RecId
                        && ledgerJournalTrans_Project.TransId == projCostTransOrig.TransIdRef;

                if (ledgerJournalTrans.ExchRate)
                {
                    exchRate = ledgerJournalTrans.ExchRate;
                    reportingCurrencyExchRate = ledgerJournalTrans.ReportingCurrencyExchRate;
                }
                else
                {
                    // Calculate exch rate for expense reports
                    TrvExpTrans trvExpTrans;
                    CompanyInfo companyInfo;

                    select firstonly trvExpTrans
                        where trvExpTrans.ProjTransId == projCostTransOrig.TransIdRef
                        exists join companyInfo
                        where companyInfo.RecId == trvExpTrans.LegalEntity
                            && CompanyInfo.DataArea == projCostTransOrig.DataAreaId;

                    if (trvExpTrans.ExchangeRate)
                    {
                        exchRate = trvExpTrans.ExchangeRate;

                        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curExt()).RecId), projCostTransOrig.currencyIdCost, projCostTransOrig.TransDate);
                        exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());
                        exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
                        reportingCurrencyExchRate = exchangeRateHelper.getExchangeRate1();
                    }
                }

                if (exchRate == 0)
                {
                    // For Intercompany expense reports
                    ProjCostTrans projCostTransOrigLoc = ProjCostTrans::find(projCostTransOrig.TransId);
                    while (projCostTransOrigLoc.AdjRefTransId)
                    {
                        projCostTransOrigLoc = ProjCostTrans::find(projCostTransOrigLoc.AdjRefTransId);
                    }

                    ProjCostTransCost projCostTransCostLoc;
                    select firstonly LedgerTransdate from projCostTransCostLoc
                        where projCostTransCostLoc.TransId == projCostTransOrigLoc.TransId;

                    if (projCostTransCostLoc.LedgerTransdate)
                    {
                        ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                            projCostTransOrig.CurrencyIdCost,
                                                                                            projCostTransCostLoc.LedgerTransdate);

                        exchRate = exchangeRateHelper.getCrossRate();

                        exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());
                        exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
                        reportingCurrencyExchRate = exchangeRateHelper.getExchangeRate1();
                    }
                    else
                    {
                        throw error(strFmt("@Proj:AdjustmentLedgerTransDateNotFoundError", projCostTransOrigLoc.TransId));
                    }
                }

                projCostTransCostPost.parmExchangeRate(exchRate);
                projCostTransCostPost.parmPostToGeneralLedger(this.parmPostToLedger());

                if (ProjAdjustmentUpdateOverrideReportingExchRateFlight::instance().isEnabled())
                {
                    projCostTransCostPost.parmReportingExchangeRate(reportingCurrencyExchRate);
                }

                if (setAdjustProjTransStatus)
                {
                    projCostTransCostPost.parmTransStatus(_status);
                }

                projCostTransCostPost.postTrans();
            }

            ProjPost projCostTransSalePost;
            // create new negative projCostTransSale
            while select tmpProjAdjustmentSale
                where tmpProjAdjustmentSale.TransId == tmpProjAdjustment.TransId
            {
                projCostTransSaleOrig = ProjCostTransSale::find(tmpProjAdjustmentSale.SaleRefRecId, true);

                projCostTransSalePost = this.instantiateProjPostForNegativeAdjustmentTransactionSale(
                    projCostTransNew,
                    projCostTransOrig,
                    projCostTransSaleOrig);
                // <GEEU>
                if (countryRegion_EU)
                {
                    projCostTransSalePost.parmAdjustCorrection(isAdjustmentCorrection);
                }
                // </GEEU>

                if (setAdjustProjTransStatus)
                {
                    projCostTransSalePost.parmTransStatus(_status);
                }

                projCostTransSalePost.postTrans();
            }
        }
        else if (_status == ProjTransStatus::Posted)
        {
            tmpProjAdjustmentCreate_Nagative =this.createTmpFromAdjust();
            // <GEEU>
            if (countryRegion_EU)
            {
                isAdjustmentCorrection = this.isAdjustmentCorrection(tmpProjAdjustmentCreate_Nagative.AdjustCorrection,
                                                                        tmpProjAdjustment.AdjustCorrection,
                                                                        true);
            }
            // </GEEU>
            ledgerJournalTrans.clear();
            ledgerJournalTrans_Project.clear();

            ledgerJournalTable = this.initLedgerJournalTableNew();
            ledgerJournalTable.insert();
            ledgerJournalTrans = this.initLedgerJournalNew(tmpProjAdjustmentCreate_Nagative);
            ledgerJournalTrans.JournalNum = ledgerJournalTable.JournalNum;
            ledgerJournalTrans_Project = this.initLedgerJournalProjectNew(tmpProjAdjustmentCreate_Nagative);

            if (LedgerParameters::isChineseVoucher_CN())
            {
                ledgerJournalTrans.createVoucherType_CN();
            }

            if (!ledgerJournalTrans.validateWrite())
            {
                throw error("@SYS21628");
            }

            ledgerJournalTrans.insert();

            ledgerJournalTrans_Project.RefRecId = ledgerJournalTrans.RecId;
            if (!ledgerJournalTrans_Project.validateWrite())
            {
                throw error("@SYS21628");
            }

            ledgerJournalTrans_Project.insert();

            projCostTransOrig = ProjCostTrans::find(tmpProjAdjustmentCreate_Nagative.TransID);
            projPostLedger  =  this.instantiateProjPostForCostAndLedgerAdjustment(
                ledgerJournalTrans,
                tmpProjAdjustmentCreate_Nagative,
                projCostTransOrig,
                adjTransDate);
            // <GEEU>
            if (countryRegion_EU)
            {
                projPostLedger.parmAdjustCorrection(isAdjustmentCorrection);
            }
            // </GEEU>
            if (projPostLedger.checkTrans())
            {
                this.transNew_Update(projPostLedger);
            }
            else
            {
                this.initInfologAction(tmpProjAdjustment);
                checkFailed = true;
                if (this.parmPost())
                {
                    throw error("@SYS18447");
                }
            }

            this.deleteLedgerJournal(ledgerJournalTrans, ledgerJournalTable);

            projCostTransNew = ProjCostTrans::find(projPostLedger.parmTransIdNew());

            while select tmpProjAdjustmentCost
                where tmpProjAdjustmentCost.TransId == tmpProjAdjustment.TransId
            {
                tmpProjAdjustmentCreateCost_Nagative=this.createTmpFromAdjustCost(tmpProjAdjustmentCreate_Nagative,tmpProjAdjustmentCost);
                this.transCostNewCost(projCostTransNew, tmpProjAdjustmentCreate_Nagative, tmpProjAdjustmentCreateCost_Nagative, false, ledgerJournalTrans.ExchRate);
            }

            while select tmpProjAdjustmentSale
                where tmpProjAdjustmentSale.TransId == tmpProjAdjustment.TransId
            {
                tmpProjAdjustmentCreateSale_Nagative=this.createTmpFromAdjustSale(tmpProjAdjustmentCreate_Nagative,tmpProjAdjustmentSale);
                this.transCostNewSale(projCostTransNew, tmpProjAdjustmentCreate_Nagative, tmpProjAdjustmentCreateSale_Nagative, false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the exchange rate value.
    /// </summary>
    /// <param name = "_isAdjustmentDateEnabled">
    /// A boolean value indicating UseAdjustmentDate parameter.
    /// This parameter is no longer used as the UseAdjustmentDate parameter setting for the module is deprecated.
    /// </param>
    /// <param name = "_projCostTransOrig">
    /// Record for the original <c>ProjCostTrans</c> buffer.
    /// </param>
    /// <param name = "_adjTransDate">
    /// The date of the transaction.
    /// </param>
    /// <param name = "_tmpProjAdjustment">
    /// Record for the <c>TmpProjAdjustment</c> buffer.
    /// </param>
    /// <returns>
    /// Calculated value of exchange rate.
    /// </returns>
    [SysObsolete('UseAdjustmentDate parameter setting for the module is deprecated, use calculateExchangeRateV2 instead', true, 28\11\2022)]
    protected ExchRate calculateExchangeRate(
        boolean _isAdjustmentDateEnabled,
        ProjCostTrans _projCostTransOrig,
        TransDate _adjTransDate,
        TmpProjAdjustment _tmpProjAdjustment)
    {
        // _isAdjustmentDateEnabled is no longer used
        return this.calculateExchangeRateV2(_projCostTransOrig, _adjTransDate, _tmpProjAdjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExchangeRateV2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the exchange rate value.
    /// </summary>
    /// <param name = "_projCostTransOrig">
    /// Record for the original <c>ProjCostTrans</c> buffer.
    /// </param>
    /// <param name = "_adjTransDate">
    /// The date of the transaction.
    /// </param>
    /// <param name = "_tmpProjAdjustment">
    /// Record for the <c>TmpProjAdjustment</c> buffer.
    /// </param>
    /// <returns>
    /// Calculated value of exchange rate.
    /// </returns>
    protected ExchRate calculateExchangeRateV2(
        ProjCostTrans _projCostTransOrig,
        TransDate _adjTransDate,
        TmpProjAdjustment _tmpProjAdjustment)
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Project  ledgerJournalTrans_Project;
        ExchRate exchRate;

        if (_tmpProjAdjustment.TransDateAdjustment == _tmpProjAdjustment.TransDate)
        {
            select firstOnly ExchRate from ledgerJournalTrans
                exists join ledgerJournalTrans_Project
                    where ledgerJournalTrans_Project.RefRecId == ledgerJournalTrans.RecId
                        && ledgerJournalTrans_Project.TransId == _projCostTransOrig.TransIdRef;

            if (ledgerJournalTrans.ExchRate)
            {
                exchRate = ledgerJournalTrans.ExchRate;
            }
        }
        else
        {
            exchRate = ExchangeRateHelper::exchRate(_projCostTransOrig.CurrencyIdCost, _projCostTransOrig.TransDate);
        }

        if (!exchRate)
        {
            TrvExpTrans trvExpTrans;
            CompanyInfo companyInfo;

            select firstonly trvExpTrans
                where trvExpTrans.ProjTransId == _projCostTransOrig.TransIdRef
            exists join companyInfo
                where companyInfo.RecId == trvExpTrans.LegalEntity
                    && CompanyInfo.DataArea == _projCostTransOrig.DataAreaId;
            if (trvExpTrans.ExchangeRate)
            {
                exchRate = trvExpTrans.ExchangeRate;
            }
        }

        if (exchRate == 0)
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                                                                    _projCostTransOrig.CurrencyIdCost,
                                                                                    _adjTransDate);

            exchRate = exchangeRateHelper.getCrossRate();
        }

        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForNegativeAdjustmentTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class to use to post negative adjustment ledger entries.
    /// </summary>
    /// <param name = "_projCostTransOrig">
    /// The table for the transaction type.
    /// </param>
    /// <param name = "_adjTransDate">
    /// The date of the transaction.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForNegativeAdjustmentTransaction(
        ProjCostTrans    _projCostTransOrig,
        TransDate        _adjTransDate)
    {
        ProjPost projPostCost = ProjPost::newTransAdjNegativeTrans(
            _projCostTransOrig,
            ledgerVoucher,
            _projCostTransOrig.TransId);

        projPostCost.parmAdjustmentDate(_adjTransDate);
        projPostCost.parmAdjustment(true);

        return projPostCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForNegativeAdjustmentTransactionCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class to use to post negative cost adjustment ledger entries.
    /// </summary>
    /// <param name = "_projCostTransNew">
    /// Record for the <c>ProjCostTrans</c> buffer.
    /// </param>
    /// <param name = "_projCostTransOrig">
    /// Record for the original <c>ProjCostTrans</c> buffer.
    /// </param>
    /// <param name = "_projCostTransCostOrig">
    /// Record for the <c>ProjCostTransCost</c> buffer.
    /// </param>
    /// <param name = "_enterCost">
    /// A flag for enter cost.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForNegativeAdjustmentTransactionCost(
        ProjCostTrans     _projCostTransNew,
        ProjCostTrans     _projCostTransOrig,
        ProjCostTransCost _projCostTransCostOrig,
        boolean           _enterCost)
    {
        ProjPost projPostCost = ProjPost::newTransAdjNegativeTransCost(
            _projCostTransNew,
            _projCostTransOrig,
            _projCostTransCostOrig,
            ledgerVoucher,
            _enterCost,
            _projCostTransCostOrig.LedgerStatusCost,
            _projCostTransOrig.TransId);

        projPostCost.parmAdjustmentDate(this.parmAccountingDate());
        projPostCost.parmAdjustment(true);

        return projPostCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForNegativeAdjustmentTransactionSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class to use to post negative sale adjustment ledger entries.
    /// </summary>
    /// <param name = "_projCostTransNew">
    /// Record for the <c>ProjCostTrans</c> buffer.
    /// </param>
    /// <param name = "_projCostTransOrig">
    /// Record for the original <c>ProjCostTrans</c> buffer.
    /// </param>
    /// <param name = "_projCostTransSaleOrig">
    /// Record for the original <c>ProjCostTransSale</c> buffer.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForNegativeAdjustmentTransactionSale(
        ProjCostTrans     _projCostTransNew,
        ProjCostTrans     _projCostTransOrig,
        ProjCostTransSale _projCostTransSaleOrig)
    {
        ProjPost projPostCost = ProjPost::newTransAdjNegativeTransSale(
            _projCostTransNew,
            _projCostTransOrig,
            _projCostTransSaleOrig,
            ledgerVoucher,
            _projCostTransSaleOrig.LedgerSalesPosted,
            _projCostTransSaleOrig.LedgerSalesAmount,
            _projCostTransSaleOrig.LineAmount,
            _projCostTransOrig.TransId);

        projPostCost.parmAdjustmentDate(this.parmAccountingDate());
        projPostCost.parmAdjustment(true);

        return projPostCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForCostAndLedgerAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class to use to post adjustment ledger entries.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">
    /// Record for the <c>LedgerJournalTrans</c> buffer.
    /// </param>
    /// <param name = "_tmpProjAdjustmentCreate_Nagative">
    /// Record for the <c>TmpProjAdjustmentCreate</c> buffer.
    /// </param>
    /// <param name = "_projCostTransOrig">
    /// Record for the <c>ProjCostTrans</c> buffer.
    /// </param>
    /// <param name = "_adjTransDate">
    /// The date of the transaction
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForCostAndLedgerAdjustment(
        LedgerJournalTrans      _ledgerJournalTrans,
        TmpProjAdjustmentCreate _tmpProjAdjustmentCreate_Nagative,
        ProjCostTrans           _projCostTransOrig,
        TransDate               _adjTransDate)
    {
        ProjPost projPostLedger = ProjPost::newCreateProjCostAndLedgerAdj(
            _ledgerJournalTrans,
            ledgerVoucher,
            ProjCostTrans::originCost2LedgerJournalType(_tmpProjAdjustmentCreate_Nagative.OriginCost),
            false);

        projPostLedger.parmAdjustment(true);
        projPostLedger.parmAdjustmentDate(_adjTransDate);
        projPostLedger.parmTransIdRef(_projCostTransOrig.TransIdRef);
        projPostLedger.parmAdjRefTransId(_projCostTransOrig.TransId);

        return projPostLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postItem</Name>
				<Source><![CDATA[
    private void postItem(ProjTransStatus _status)
    {
        ProjItemTrans               projItemTrans;
        ProjPost                    projPostItem;
        ProjPost                    projPostItemCost;
        ProjPost                    projPostItemSale;
        InventTransOrigin           inventTransOrigin;
        InventTrans                 inventTrans;
        InventMov_ProjItemTrans     invent_Mov;
        TmpProjAdjustmentCreate     tmpProjAdjustmentCreateNew;
        TmpProjAdjustmentCreate     tmpProjAdjustmentCreate_Nagative;
        TmpProjAdjustmentCreateSale tmpProjAdjustmentCreateSale_Nagative;
        TransDate                   adjTransDate;
        Map                         fundingSourceMap = new  Map(Types::Int64, Types::Real);
        boolean                     neverLedgerPosting = false;
        ProjLedger                  projLedger;

        ProjItemTrans               projItemTransOrig;
        ProjItemTransCost           projItemTransCostOrig;
        boolean                     isStocked;
        List                        fundingSourceList;
        // <GEEU>
        #ISOCountryRegionCodes

        boolean                     performAdjustmentCorrection = this.performAdjustmentCorrection();
        LedgerCorrection            isAdjustmentCorrection;
        // </GEEU>

        void initFundingSourceList()
        {
            ProjSplitAllocation         allocation;
            boolean                     firstRecord = true;

            fundingSourceList = new List(Types::Class);

            while select tmpProjAdjustmentCost
            where tmpProjAdjustmentCost.TransId == tmpProjAdjustment.TransId
            {
                if (tmpProjAdjustment.TotalCostAmountCur != 0.00)
                {
                    allocation = ProjSplitAllocation::construct(tmpProjAdjustmentCost.FundingSource,
                                                            (tmpProjAdjustmentCost.LineAmount / tmpProjAdjustment.TotalCostAmountCur) * 100,
                                                            0,
                                                            firstRecord ? NoYes::Yes : NoYes::No );
                }
                else
                {
                    allocation = ProjSplitAllocation::construct(tmpProjAdjustmentCost.FundingSource,
                                                            100,
                                                            0,
                                                            firstRecord ? NoYes::Yes : NoYes::No );
                }
                fundingSourceList.addEnd(allocation);
                firstRecord = false;
            }
        }

        lineNum++;

        tmpProjAdjustmentCreateNew = this.createTmpFromAdjust();
        isStocked = ProjItemTrans::isStocked(tmpProjAdjustmentCreateNew.InventTransId);
        // <GEEU>
        if (performAdjustmentCorrection)
        {
            isAdjustmentCorrection = this.isAdjustmentCorrection(tmpProjAdjustmentCreateNew.AdjustCorrection,
                                                                tmpProjAdjustment.AdjustCorrection,
                                                                true);
        }
        // </GEEU>

        ProjItemTrans origProjItemTrans;
        if (isStocked)
        {
            origProjItemTrans = ProjItemTrans::find(tmpProjAdjustmentCreateNew.TransID, true);

            if (origProjItemTrans.TransactionOrigin == ProjOrigin::ItemRequirement)
            {
                //If feature is on and item req packing slip trans is being adjusted and inventory is in physically posted state
                //Move inventory to Sold/Purchsed state by posting financially

                ProjItemTrans rootProjItemTrans;
                select firstonly TransIdPackSlip from rootProjItemTrans 
                    where rootProjItemTrans.AdjRefTransId == '' 
                        && rootProjItemTrans.ProjTransIDRef == origProjItemTrans.ProjTransIDRef;

                if (rootProjItemTrans.TransIdPackSlip != '')
                {
                    InventTrans inventTransLoc;
                    InventTransOrigin inventTransOriginLoc;

                    if (ProjAdjustItemReqWithMultiPickingListFlight::instance().isEnabled())
                    {
                        // The following query gets a physically posted inventory transaction linked to project transaction
                        // The query is executed only to check if the inventory transaction is not financially posted and needs to be financially posted before doing adjustment
                        // All inventory transactions linked to the same project transaction will have the same physical voucher from packing slip posting
                        // If one of the inventory transactions linked to the project is physically posted, the project transaction is used to create InventMovement and financially post all related inventory transactions

                        select firstonly inventTransLoc
                            where inventTransLoc.ProjAdjustRefId == origProjItemTrans.ProjAdjustRefId
                                && (inventTransLoc.StatusIssue == StatusIssue::Deducted
                                    || inventTransLoc.StatusReceipt == StatusReceipt::Received)
                        join inventTransOriginLoc
                            where inventTransOriginLoc.RecId == inventTransLoc.inventTransOrigin
                                && inventTransOriginLoc.InventTransId == origProjItemTrans.InventTransId;
                    }
                    else
                    {
                        select firstonly RecId 
                        from inventTransOriginLoc
                            where inventTransOriginLoc.InventTransId == origProjItemTrans.InventTransId
                        join inventTransLoc
                            where inventTransLoc.inventTransOrigin == inventTransOriginLoc.RecId
                                && inventTransLoc.ProjAdjustRefId == origProjItemTrans.ProjAdjustRefId
                                && inventTransLoc.Qty == -origProjItemTrans.Qty
                                && (inventTransLoc.StatusIssue == StatusIssue::Deducted 
                                    || inventTransLoc.StatusReceipt == StatusReceipt::Received);
                        
                    }
                    if (inventTransLoc.RecId)
                    {
                        inventoryFinancialPosted = false;
                        invent_Mov = InventMov_ProjItemTrans::newFromProjItemTrans(origProjItemTrans);
                        invent_Mov.parmInventoryPhysicalPostingRequired(true);
                        InventUpd_Financial::newAdjustProjItemTrans(invent_Mov, ledgerVoucher, inventTransLoc.costAmountPhysicalVoucher()).updateNow();
                    }
                }
            }
        }

        if (_status == ProjTransStatus::Adjusted)
        {
            adjTransDate        = tmpProjAdjustment.TransDateAdjustment;
            projPostItem        = this.instantiateProjPostForNegativeAdjustmentTransactionItem(
                                    tmpProjAdjustmentCreateNew,
                                    adjTransDate);
            // <GEEU>
            if (performAdjustmentCorrection)
            {
                projPostItem.parmAdjustCorrection(isAdjustmentCorrection);
            }
            // </GEEU>
            if (!isStocked)
            {
                projPostItem.parmAdjustRefId(NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num());
            }
            projPostItem.postTrans();

            projItemTrans       = projPostItem.newTrans();

            if (isStocked)
            {
                initFundingSourceList();
                projPostItemCost = this.instantiateProjPostForNegativeAdjustmentTransactionItemCost(
                    tmpProjAdjustmentCreateNew,
                    fundingSourceList,
                    adjTransDate);
                // <GEEU>
                if (performAdjustmentCorrection)
                {
                    projPostItemCost.parmAdjustCorrection(isAdjustmentCorrection);
                }
                // </GEEU>
                projPostItemCost.postTrans();
            }

            while select tmpProjAdjustmentCost
            where tmpProjAdjustmentCost.TransId == tmpProjAdjustment.TransId
            {
                if (tmpProjAdjustmentCost.LedgerStatusCost == ProjLedgerStatus::Never)
                {
                    neverLedgerPosting = true;
                }

                if (tmpProjAdjustmentCost.FundingSource)
                {
                    fundingSourceMap.insert( tmpProjAdjustmentCost.FundingSource, CurrencyExchangeHelper::amount(tmpProjAdjustmentCost.CostPrice * -tmpProjAdjustment.Qty, tmpProjAdjustment.CurrencyIdCost));
                }

                if (!isStocked)
                {
                    projItemTransOrig = ProjItemTrans::find(tmpProjAdjustmentCreateNew.TransID, true);
                    projItemTransCostOrig = ProjItemTransCost::findRecId(tmpProjAdjustmentCost.CostRefRecId, true);

                    // create new negative projItemTransCost
                    projPostItemCost = this.instantiateProjPostForNegativeAdjustmentTransactionItemNotStockedCost(
                        projItemTrans,
                        tmpProjAdjustmentCreateNew,
                        projItemTransCostOrig,
                        projItemTransOrig);
                    // <GEEU>
                    if (performAdjustmentCorrection)
                    {
                        projPostItemCost.parmAdjustCorrection(isAdjustmentCorrection);
                    }
                    // </GEEU>
                    projPostItemCost.postTrans();
                }
            }

            while select tmpProjAdjustmentSale
            where tmpProjAdjustmentSale.TransId == tmpProjAdjustment.TransId
            {
                projPostItemSale = this.instantiateProjPostForNegativeAdjusmentTransactionItemSale(
                    projItemTrans,
                    tmpProjAdjustmentCreateNew,
                    adjTransDate);
                // <GEEU>
                if (performAdjustmentCorrection)
                {
                    projPostItemSale.parmAdjustCorrection(isAdjustmentCorrection);
                }
                // </GEEU>
                projPostItemSale.postTrans();
            }
        }
        else if (_status == ProjTransStatus::Posted)
        {
            tmpProjAdjustmentCreate_Nagative =this.createTmpFromAdjust();

            projPostItem = this.instantiateProjPostForAdjustmentTransactionItem(
                tmpProjAdjustmentCreateNew,
                adjTransDate);
            // <GEEU>
            if (performAdjustmentCorrection)
            {
                isAdjustmentCorrection = this.isAdjustmentCorrection(tmpProjAdjustmentCreateNew.AdjustCorrection,
                                                                     tmpProjAdjustment.AdjustCorrection,
                                                                     true);

                projPostItem.parmAdjustCorrection(isAdjustmentCorrection);
            }
            // </GEEU>
            if (!isStocked)
            {
                projPostItem.parmAdjustRefId(NumberSeq::newGetNum(CompanyInfo::numRefParmId()).num());
            }
            projPostItem.postTrans();
            projItemTrans       = projPostItem.newTrans();

            while select tmpProjAdjustmentCost
            where tmpProjAdjustmentCost.TransId == tmpProjAdjustment.TransId
            {
                if (tmpProjAdjustmentCost.LedgerStatusCost == ProjLedgerStatus::Never)
                {
                    neverLedgerPosting = true;
                }

                if (tmpProjAdjustmentCost.FundingSource)
                {
                    fundingSourceMap.insert( tmpProjAdjustmentCost.FundingSource,  CurrencyExchangeHelper::amount(-tmpProjAdjustmentCost.CostPrice * tmpProjAdjustment.Qty, tmpProjAdjustment.CurrencyIdCost));
                }

                if (!isStocked)
                {
                    projItemTransOrig = ProjItemTrans::find(tmpProjAdjustmentCreateNew.TransID);
                    projPostItemCost = this.instantiateProjPostForAdjustmentTransactionItemNotStockedCost(
                        projItemTrans,
                        projItemTransOrig,
                        tmpProjAdjustmentCreate_Nagative);
                    // <GEEU>
                    if (performAdjustmentCorrection)
                    {
                        projPostItemCost.parmAdjustCorrection(isAdjustmentCorrection);
                    }
                    // </GEEU>
                    projPostItemCost.postTrans();
                }
            }

            if (isStocked)
            {
                initFundingSourceList();
                projPostItem = this.instantiateProjPostForAdjustmentTransactionItemCost(
                    tmpProjAdjustmentCreate_Nagative,
                    fundingSourceList,
                    adjTransDate);
                // <GEEU>
                if (performAdjustmentCorrection)
                {
                    projPostItem.parmAdjustCorrection(isAdjustmentCorrection);
                }
                // </GEEU>
                projPostItem.postTrans();
            }

            while select tmpProjAdjustmentSale
            where tmpProjAdjustmentSale.TransId == tmpProjAdjustment.TransId
            {
                tmpProjAdjustmentCreateSale_Nagative=this.createTmpFromAdjustSale(tmpProjAdjustmentCreate_Nagative,tmpProjAdjustmentSale);
                projPostItem = this.instantiateProjPostForAdjustmentTransactionItemCostSale(
                    projItemTrans,
                    tmpProjAdjustmentCreate_Nagative,
                    tmpProjAdjustmentCreateSale_Nagative,
                    adjTransDate);
                // <GEEU>
                if (performAdjustmentCorrection)
                {
                    projPostItem.parmAdjustCorrection(isAdjustmentCorrection);
                }
                // </GEEU>
                projPostItem.postTrans();
            }
        }

        if (isStocked)
        {
            boolean allowAdjustmentOfReturnedTrans = ProjAllowAdjustmentOfReturnedItemTransFlight::instance().isEnabled();

            while select TableId from inventTransOrigin
                where inventTransOrigin.InventTransId == tmpProjAdjustment.InventTransId
                join forupdate inventTrans
                    where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    &&  inventTrans.ProjAdjustRefId == tmpProjAdjustment.ProjAdjustRefid
                    &&  inventTrans.Qty != 0
            {
                // Old behavior behind <c>ProjAllowAdjustmentOfReturnedItemTransFlight</c>
                // Can cause inventory on-hand inconsistency if enabled
                if (allowAdjustmentOfReturnedTrans && inventTrans.ReturnInventTransOrigin)
                {
                    // Don't create inventory transaction if the transaction has been already returned
                    continue;
                }

                this.updateReturnInventTransOrigin(inventTrans, projItemTrans);

                if (inventTrans.MarkingRefInventTransOrigin)
                {
                    this.updateInventTransMarking(inventTrans);
                }
                else
                {
                    // Resets <c>InventRefTransId</c> when the inventory transaction is not marked.
                    this.parmInventRefTransIdOrig('');
                }

                invent_Mov = InventMov_ProjItemTrans::newProjItemTransNeg(projItemTrans, inventTrans, tmpProjAdjustment.InventTransId);
                // <GEEU>
                if (performAdjustmentCorrection)
                {
                    invent_Mov.parmProjAdjustCorrection(isAdjustmentCorrection);
                }
                // </GEEU>

                select firstonly ProjId, ProjAdjustRefId from origProjItemTrans where origProjItemTrans.ProjTransId == projItemTrans.AdjRefTransId;

                if (projItemTrans.AdjRefTransId && origProjItemTrans.ProjId && origProjItemTrans.ProjAdjustRefId)
                {
                    str cacheKey = strFmt(ProjConstants::twoParmCacheKeyConst, origProjItemTrans.ProjId, inventTrans.InventTransOrigin);
                    SysTransactionScopeCache::set(classStr(ProjAdjustmentUpdate_Post), cacheKey, origProjItemTrans.ProjAdjustRefId);
                    InventUpd_Financial::newAdjustProjItemTrans(invent_Mov,ledgerVoucher,-inventTrans.costValue()).updateNow();
                    SysTransactionScopeCache::remove(classStr(ProjAdjustmentUpdate_Post), cacheKey);
                }
                else
                {
                    InventUpd_Financial::newAdjustProjItemTrans(invent_Mov,ledgerVoucher,-inventTrans.costValue()).updateNow();
                }

                projItemTrans.reread();
                projItemTrans.ProjAdjustRefId   = invent_Mov.projAdjustRefId();
                projItemTrans.update();

                if (neverLedgerPosting == true)
                {
                    projLedger = ProjLedger::newInventCostAdjust(projItemTrans.ProjId,projItemTrans.InventTransId,projItemTrans.ProjAdjustRefId,
                                                                  projItemTrans.TransactionOrigin, true);

                    if (projLedger)
                    {
                        ProjLedgerUpdate::newNeverLedger(projLedger,
                                                    LedgerPostingType::ProjNeverLedger,
                                                    projItemTrans.DefaultDimension,
                                                    ledgerVoucher.lastVoucher(),
                                                    adjTransDate,
                                                    inventTrans.costValue()).insert();
                    }

                    ProjItemTrans::splitNeverLedger(projItemTrans.InventTransId, projItemTrans.ProjAdjustRefId) ;
                }
                inventTransMapNegative = this.insertInventTransMap(InventTransOrigin::findByInventTransId(projItemTrans.InventTransId).RecId, projItemTrans.ProjAdjustRefId);
            }

            projPostItem = ProjPost::newTransAdj(projItemTrans);
            projPostItem.parmLedgerVoucher(ledgerVoucher);
            projPostItem.parmFundingSourceList(fundingSourceList);
            
            if (this.parmOnlyDefaultDimAdjusted() == ProjNoneNoYes::Yes)
            {
                projItemTransOrig = ProjItemTrans::find(tmpProjAdjustmentCreateNew.TransID);
                projItemTransCostOrig = ProjItemTransCost::find(projItemTransOrig.InventTransId, projItemTransOrig.ProjAdjustRefId, 1);
                if (this.checkUnequalLedgerStatusCost(tmpProjAdjustmentCreateNew.ProjId, projItemTransCostOrig.LedgerStatusCost, ProjAdjustmentType::Item))
                {
                    projPostItem.parmLedgerStatusCostOrig(true);
                }
            }

            if (_status == ProjTransStatus::Adjusted && FeatureStateProvider::isFeatureEnabled(ProjAdjustmentKeepOrigFinDimOnReversingTransFeature::instance()))
            {
                projPostItem.parmAdjustment(true);
                projPostItem.parmTransStatus(ProjTransStatus::Adjusted);
            }

            ProjPost::postItemReverseTransaction(projPostItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForNegativeAdjustmentTransactionItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class for posting a negative item adjustment to ledger entries.
    /// </summary>
    /// <param name = "_tmpProjAdjustmentCreateNew">
    /// Record for the <c>TmpProjAdjustmentCreate</c> buffer.
    /// </param>
    /// <param name = "_adjTransDate">
    /// Date of the transaction.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForNegativeAdjustmentTransactionItem(
        TmpProjAdjustmentCreate _tmpProjAdjustmentCreateNew,
        TransDate               _adjTransDate)
    {
        ProjPost projPostItem = ProjPost::newCreateProjTransItemAdjustNeg(
            _tmpProjAdjustmentCreateNew,
            ledgerVoucher,
            '',
            tmpProjAdjustment.TransId);
          
        projPostItem.parmAdjustment(true);
        projPostItem.parmAdjustmentDate(_adjTransDate);
        projPostItem.parmAdjRefTransId(tmpProjAdjustment.TransId);
        projPostItem.parmTransIdOrig(tmpProjAdjustment.TransId);

        return projPostItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForNegativeAdjustmentTransactionItemCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class for posting a negative item cost adjustment to ledger entries.
    /// </summary>
    /// <param name = "_tmpProjAdjustmentCreateNew">
    /// Record for the <c>TmpProjAdjustmentCreate</c> buffer.
    /// </param>
    /// <param name = "_fundingSourceList">
    /// A <c>List</c> of funding.
    /// </param>
    /// <param name = "_adjTransDate">
    /// Date of the transaction.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForNegativeAdjustmentTransactionItemCost(
        TmpProjAdjustmentCreate _tmpProjAdjustmentCreateNew,
        List                    _fundingSourceList,
        TransDate               _adjTransDate)
    {
        ProjPost projPostItemCost;
        if (this.parmOnlyDefaultDimAdjusted() == ProjNoneNoYes::Yes)
        {
            ProjItemTrans projItemTransOrig = ProjItemTrans::find(_tmpProjAdjustmentCreateNew.TransID);
            ProjItemTransCost projItemTransCost = ProjItemTransCost::find(projItemTransOrig.InventTransId, projItemTransOrig.ProjAdjustRefId, 1);
            if (this.checkUnequalLedgerStatusCost(_tmpProjAdjustmentCreateNew.ProjId, projItemTransCost.LedgerStatusCost, ProjAdjustmentType::Item))
            {
                projPostItemCost = ProjPost::newCreateProjTransItemCostAdjustNegWithSameLedger(
                _tmpProjAdjustmentCreateNew,
                _fundingSourceList,
                ledgerVoucher,
                '',
                tmpProjAdjustment.TransId,
                projItemTransCost.LedgerStatusCost);

                // For the case where the original ledgerStatusCost needs to be the same for the reversing entry.
                projPostItemCost.parmLedgerStatusCostOrig(true);
            }
            else
            {
                projPostItemCost = ProjPost::newCreateProjTransItemCostAdjustNeg(
                _tmpProjAdjustmentCreateNew,
                _fundingSourceList,
                ledgerVoucher,
                '',
                tmpProjAdjustment.TransId);
            }
        }
        else
        {
            projPostItemCost = ProjPost::newCreateProjTransItemCostAdjustNeg(
            _tmpProjAdjustmentCreateNew,
            _fundingSourceList,
            ledgerVoucher,
            '',
            tmpProjAdjustment.TransId);
        }

        projPostItemCost.parmAdjustment(true);
        projPostItemCost.parmAdjustmentDate(_adjTransDate);
        projPostItemCost.parmAdjRefTransId(tmpProjAdjustment.TransId);

        return projPostItemCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForNegativeAdjustmentTransactionItemNotStockedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class for posting a negative item not stocked cost adjustment to ledger entries.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// Record for the <c>ProjItemTrans</c> buffer.
    /// </param>
    /// <param name = "_tmpProjAdjustmentCreateNew">
    /// Record for the <c>TmpProjAdjustmentCreate</c> buffer.
    /// </param>
    /// <param name = "_projItemTransCostOrig">
    /// Record for the original <c>ProjItemTransCost</c> buffer.
    /// </param>
    /// <param name = "_projItemTransOrig">
    /// Record for the original <c>ProjItemTrans</c> buffer.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForNegativeAdjustmentTransactionItemNotStockedCost(
        ProjItemTrans           _projItemTrans,
        TmpProjAdjustmentCreate _tmpProjAdjustmentCreateNew,
        ProjItemTransCost       _projItemTransCostOrig,
        ProjItemTrans           _projItemTransOrig)
    {
        ProjPost projPostItemCost = ProjPost::newTransAdjNegativeNotStockedCost(
            _projItemTrans,
            this.createTmpFromAdjustCost(_tmpProjAdjustmentCreateNew, tmpProjAdjustmentCost),
            ledgerVoucher,
            _projItemTransCostOrig.LedgerStatusCost,
            _projItemTransOrig.ProjTransId,
            _projItemTransOrig.TransactionOrigin);

        if (this.parmOnlyDefaultDimAdjusted() == ProjNoneNoYes::Yes &&
            this.checkUnequalLedgerStatusCost(_projItemTrans.ProjId,_projItemTransCostOrig.LedgerStatusCost,ProjAdjustmentType::Item))
        {
            projPostItemCost.parmLedgerStatusCostOrig(true);
        }
        projPostItemCost.parmAdjustment(true);
        projPostItemCost.parmAdjustmentDate(tmpProjAdjustment.TransDateAdjustment);
        projPostItemCost.parmTransIdRef(_projItemTransOrig.ProjTransIdRef);
        projPostItemCost.parmAdjRefTransId(_projItemTransOrig.ProjTransId);
        projPostItemCost.parmExchangeRate(ExchangeRateHelper::exchRate(projPostItemCost.currencyIdCost(), _projItemTransOrig.TransDate));

        if (ProjAdjustmentUpdateOverrideReportingExchRateFlight::instance().isEnabled())
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curExt()).RecId), projPostItemCost.currencyIdCost(), _projItemTransOrig.TransDate);
            exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());
            exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
            projPostItemCost.parmReportingExchangeRate(exchangeRateHelper.getExchangeRate1());
        }

        return projPostItemCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForNegativeAdjusmentTransactionItemSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class for posting a negative item sale adjustment to ledger entries.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// Record for the <c>ProjItemTrans</c> buffer.
    /// </param>
    /// <param name = "_tmpProjAdjustmentCreateNew">
    /// Record for the <c>TmpProjAdjustmentCreate</c> buffer.
    /// </param>
    /// <param name = "_adjTransDate">
    /// Date of the transaction.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForNegativeAdjusmentTransactionItemSale(
        ProjItemTrans            _projItemTrans,
        TmpProjAdjustmentCreate  _tmpProjAdjustmentCreateNew,
        TransDate                _adjTransDate)
    {
        ProjPost projPostItemSale = ProjPost::newCreateProjTransItemSaleAdjustNeg(
            _projItemTrans,
            _tmpProjAdjustmentCreateNew,
            this.createTmpFromAdjustSale(_tmpProjAdjustmentCreateNew, tmpProjAdjustmentSale),
            ledgerVoucher,
            '',
            tmpProjAdjustment.TransId,
            tmpProjAdjustmentSale.SaleRefRecId);
        projPostItemSale.parmAdjustment(true);
        projPostItemSale.parmAdjustmentDate(_adjTransDate);
        projPostItemSale.parmAdjRefTransId(tmpProjAdjustment.TransId);

        return projPostItemSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForAdjustmentTransactionItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class for posting an item adjustment to ledger entries.
    /// </summary>
    /// <param name = "_tmpProjAdjustmentCreateNew">
    /// Record for the <c>TmpProjAdjustmentCreate</c> buffer.
    /// </param>
    /// <param name = "_adjTransDate">
    /// Date of the transaction.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForAdjustmentTransactionItem(
        TmpProjAdjustmentCreate _tmpProjAdjustmentCreateNew,
        TransDate               _adjTransDate)
    {
        ProjPost projPostItem = ProjPost::newCreateProjTransItemAdjust(
            _tmpProjAdjustmentCreateNew,
            ledgerVoucher,
            false);
        projPostItem.parmAdjustment(true);
        projPostItem.parmAdjustmentDate(_adjTransDate);
        projPostItem.parmAdjRefTransId(tmpProjAdjustment.TransId);
        projPostItem.parmTransIdOrig(tmpProjAdjustment.TransId);

        return projPostItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForAdjustmentTransactionItemNotStockedCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class for posting an item adjustment not stocked cost to ledger entries.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// Record for the <c>ProjItemTrans</c> buffer.
    /// </param>
    /// <param name = "_projItemTransOrig">
    /// Record for the original <c>ProjItemTrans</c> buffer.
    /// </param>
    /// <param name = "_tmpProjAdjustmentCreate_Nagative">
    /// Record for the <c>TmpProjAdjustmentCreate</c> buffer.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForAdjustmentTransactionItemNotStockedCost(
        ProjItemTrans           _projItemTrans,
        ProjItemTrans           _projItemTransOrig,
        TmpProjAdjustmentCreate _tmpProjAdjustmentCreate_Nagative)
    {
        ProjPost projPostItemCost;
        if (this.parmOnlyDefaultDimAdjusted() == ProjNoneNoYes::Yes)
        {
            ProjItemTransCost projItemTransCostOrig = ProjItemTransCost::findRecId(tmpProjAdjustmentCost.CostRefRecId);
            if (this.checkUnequalLedgerStatusCost(_tmpProjAdjustmentCreate_Nagative.ProjId, projItemTransCostOrig.LedgerStatusCost, ProjAdjustmentType::Item))
            {
                projPostItemCost = ProjPost::newTransAdjNotStockedCostWithSameLedger(
                _projItemTrans,
                this.createTmpFromAdjustCost(_tmpProjAdjustmentCreate_Nagative, tmpProjAdjustmentCost),
                ledgerVoucher,
                _projItemTransOrig.TransactionOrigin,
                projItemTransCostOrig.LedgerStatusCost,
                false);
                projPostItemCost.parmLedgerStatusCostOrig(true);
            }
            else
            {
                projPostItemCost = ProjPost::newTransAdjNotStockedCost(
                _projItemTrans,
                this.createTmpFromAdjustCost(_tmpProjAdjustmentCreate_Nagative, tmpProjAdjustmentCost),
                ledgerVoucher,
                _projItemTransOrig.TransactionOrigin,
                false);
            }
        }
        else
        {
            projPostItemCost = ProjPost::newTransAdjNotStockedCost(
            _projItemTrans,
            this.createTmpFromAdjustCost(_tmpProjAdjustmentCreate_Nagative, tmpProjAdjustmentCost),
            ledgerVoucher,
            _projItemTransOrig.TransactionOrigin,
            false);
        }

        projPostItemCost.parmAdjustmentDate(tmpProjAdjustment.TransDateAdjustment);
        projPostItemCost.parmTransIdOrig(_projItemTransOrig.ProjTransId);
        projPostItemCost.parmAdjustment(true);
        projPostItemCost.parmTransIdRef(_projItemTransOrig.ProjTransIdRef);
        projPostItemCost.parmAdjRefTransId(_projItemTransOrig.ProjTransId);

        ProjSalesCurrencyCode currencyId = projPostItemCost.currencyIdCost();        
        projPostItemCost.parmExchangeRate(ExchangeRateHelper::exchRate(currencyId, _projItemTransOrig.TransDate));

        if (ProjAdjustmentUpdateOverrideReportingExchRateFlight::instance().isEnabled())
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curExt()).RecId), projPostItemCost.currencyIdCost(), _projItemTransOrig.TransDate);
            exchangeRateHelper.parmToCurrency(Ledger::reportingCurrency());
            exchangeRateHelper.parmExchangeRateTypeRecId(Ledger::reportingCurrencyExchangeRateType());
            projPostItemCost.parmReportingExchangeRate(exchangeRateHelper.getExchangeRate1());
        }
        
        return projPostItemCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForAdjustmentTransactionItemCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class for posting an item adjustment cost to ledger entries.
    /// </summary>
    /// <param name = "_tmpProjAdjustmentCreate_Nagative">
    /// Record for the <c>TmpProjAdjustmentCreate</c> buffer.
    /// </param>
    /// <param name = "_fundingSourceList">
    /// A <c>List</c> of funding.
    /// </param>
    /// <param name = "_adjTransDate">
    /// Date of the transaction.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForAdjustmentTransactionItemCost(
        TmpProjAdjustmentCreate _tmpProjAdjustmentCreate_Nagative,
        List                    _fundingSourceList,
        TransDate               _adjTransDate)
    {
        ProjPost projPostItem;

        if (this.parmOnlyDefaultDimAdjusted() == ProjNoneNoYes::Yes)
        {
            ProjItemTrans projItemTransOrig = ProjItemTrans::find(_tmpProjAdjustmentCreate_Nagative.TransID);
            ProjItemTransCost projItemTransCost = ProjItemTransCost::find(projItemTransOrig.InventTransId, projItemTransOrig.ProjAdjustRefId, 1);
            if (this.checkUnequalLedgerStatusCost(_tmpProjAdjustmentCreate_Nagative.ProjId, projItemTransCost.LedgerStatusCost, ProjAdjustmentType::Item))
            {
                projPostItem = projPost::newCreateProjTransItemCostAdjustWithSameLedger(
                _tmpProjAdjustmentCreate_Nagative,
                _fundingSourceList,
                ledgerVoucher,
                projItemTransCost.LedgerStatusCost,
                1);
            }
            else
            {
                projPostItem = ProjPost::newCreateProjTransItemCostAdjust(
                _tmpProjAdjustmentCreate_Nagative,
                _fundingSourceList,
                ledgerVoucher,
                false);
            }
        }
        else
        {
            projPostItem = ProjPost::newCreateProjTransItemCostAdjust(
            _tmpProjAdjustmentCreate_Nagative,
            _fundingSourceList,
            ledgerVoucher,
            false);
        }
        projPostItem.parmAdjustment(true);
        projPostItem.parmAdjustmentDate(_adjTransDate);

        return projPostItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateProjPostForAdjustmentTransactionItemCostSale</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>ProjPost</c> class for posting an item adjustment sale to ledger entries.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// Record for the <c>ProjItemTrans</c> buffer.
    /// </param>
    /// <param name = "_tmpProjAdjustmentCreate_Nagativ">
    /// Record for the <c>TmpProjAdjustmentCreate</c> buffer.
    /// </param>
    /// <param name = "_tmpProjAdjustmentCreateSale_Nagative">
    /// Record for the <c>TmpProjAdjustmentCreateSale</c> buffer.
    /// </param>
    /// <param name = "_adjTransDate">
    /// Date of the transaction.
    /// </param>
    /// <returns>
    /// An instance of <c>ProjPost</c>.
    /// </returns>
    protected ProjPost instantiateProjPostForAdjustmentTransactionItemCostSale(
        ProjItemTrans               _projItemTrans,
        TmpProjAdjustmentCreate     _tmpProjAdjustmentCreate_Nagativ,
        TmpProjAdjustmentCreateSale _tmpProjAdjustmentCreateSale_Nagative,
        TransDate                   _adjTransDate)
    {
        ProjPost projPostItem = ProjPost::newCreateProjTransItemSaleAdjust(
            _projItemTrans,
            _tmpProjAdjustmentCreate_Nagativ,
            _tmpProjAdjustmentCreateSale_Nagative,
            ledgerVoucher,
            _projItemTrans.ProjTransId,
            false);
        projPostItem.parmAdjustment(true);
        projPostItem.parmAdjustmentDate(_adjTransDate);

        return projPostItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReturnInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the return inventory transaction's value on the inventory transaction record buffer.
    /// </summary>
    /// <param name = "_inventTrans">
    /// An <c>InventTrans</c> record buffer.
    /// </param>
    /// <param name = "_projItemTrans">
    /// A <c>ProjItemTrans</c> record buffer.
    /// </param>
    protected void updateReturnInventTransOrigin(InventTrans _inventTrans, ProjItemTrans _projItemTrans)
    {
        if (_inventTrans.Qty > 0 && !_inventTrans.ReturnInventTransOrigin && !_inventTrans.inventTable().modelGroup().inventModelType().stdCostBased())
        {
            _inventTrans.ReturnInventTransOrigin = InventTransOrigin::findByInventTransId(_projItemTrans.InventTransId).RecId;
            _inventTrans.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventTransMarking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the marking related fields on the inventory transaction record buffer.
    /// </summary>
    /// <param name = "_inventTrans">
    /// An <c>InventTrans</c> record buffer.
    /// </param>
    protected void updateInventTransMarking(InventTrans _inventTrans)
    {
        // before break the link, remember the link first
        this.parmInventRefTransIdOrig(InventTransOrigin::find(_inventTrans.MarkingRefInventTransOrigin).InventTransId);

        _inventTrans.clearMarking();
        _inventTrans.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postNegative</Name>
				<Source><![CDATA[
    public void postNegative(
    ProjTrans         _projTrans,
    ProjTransStatus   _status)
    {
        if (_projTrans.adjustable())
        {
            switch (tmpProjAdjustment.AdjustmentType)
            {
                case ProjAdjustmentType::Cost:
                    // When ProjUseFundingLimitTrackingForAdjustmentsV2Flight is enabled, 
                    // the following public method will not be called from standard code
                    this.postCost(_status);
                    break;

                case ProjAdjustmentType::Item:
                    this.postItem(_status);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>research</Name>
				<Source><![CDATA[
    public void research(Object _callerForm)
    {
        _callerForm.setTmp(tmpProjAdjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    TransTxt transactionLogTxt()
    {
        return "@SYS76152";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    TransactionLogType transactionLogType()
    {
        return TransactionLogType::ProjAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transNew_Update</Name>
				<Source><![CDATA[
    public void transNew_Update(ProjPost  projPostUpdate)
    {
        projPostUpdate.parmPostToGeneralLedger(this.parmPostToLedger());
        projPostUpdate.postTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update(
    TmpProjAdjustmentCreate _tmpProjAdjustmentCreate,
    ProjTrans               _projTrans,
    boolean _isIntercompany = false
    )
    {
        switch (_tmpProjAdjustmentCreate.AdjustmentType)
        {
            case ProjAdjustmentType::Hour :
                this.updateEmpl(_tmpProjAdjustmentCreate, _projTrans, _isIntercompany);
                break;

            case ProjAdjustmentType::Cost :
                this.updateCost(_tmpProjAdjustmentCreate, _projTrans);
                break;

            case ProjAdjustmentType::Revenue :
                if (ProjCategory::find(_tmpProjAdjustmentCreate.CategoryId).SetupSubscription)
                {
                    this.updateSMASubscription(_tmpProjAdjustmentCreate, _projTrans);
                }
                else
                {
                    this.updateRevenue(_tmpProjAdjustmentCreate, _projTrans);
                }
                break;

            case ProjAdjustmentType::Item :
                switch (_tmpProjAdjustmentCreate.ItemType)
                {
                    case ProjOrigin::ItemRequirement :
                        this.updateItem(_tmpProjAdjustmentCreate, _projTrans);
                        break;

                    case ProjOrigin::ItemJournal:
                        this.updateItem(_tmpProjAdjustmentCreate, _projTrans);
                        break;

                    case ProjOrigin::PurchaseOrder:
                        this.updateItem(_tmpProjAdjustmentCreate, _projTrans);
                        break;

                    case ProjOrigin::VendorInvoice:
                        this.updateItem(_tmpProjAdjustmentCreate, _projTrans);
                        break;

                    case ProjOrigin::ProductionFinished:
                        this.updateItem(_tmpProjAdjustmentCreate, _projTrans);
                        break;

                    case ProjOrigin::ProductionConsumed:
                        this.updateItem(_tmpProjAdjustmentCreate, _projTrans);
                        break;
                }
                break;

            default:
                if(this.shouldRunUpdateForExtendedProjAdjustmentType())
                {
                    this.updateForExtendedProjAdjustmentTypes(_tmpProjAdjustmentCreate, _projTrans, _isIntercompany);
                }
                else
                {
                    // Update has been aborted due to an error.
                    throw error("@SYS21628");
                }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRunUpdateForExtendedProjAdjustmentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to run the update process for extended <c>ProjAdjustmentType</c>.
    /// </summary>
    /// <returns>
    /// true, if update for extended <c>ProjAdjustmentType</c> needs to be run; otherwise, false.
    /// </returns>
    protected boolean shouldRunUpdateForExtendedProjAdjustmentType()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateForExtendedProjAdjustmentTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update for extended <c>ProjAdjustmentType</c> enum values.
    /// </summary>
    /// <param name = "_tmpProjAdjustmentCreate">
    /// <c>TmpProjAdjustmentCreate</c> table buffer.
    /// </param>
    /// <param name = "_projTrans">
    /// An instance of <c>ProjTrans</c> class.
    /// </param>
    /// <param name = "_isIntercompany">
    /// A boolean value indicating if the transaction is inter company.
    /// </param>
    [SuppressBPWarning("BPParameterNotUsed", "Parameters will be used only on extension methods.")]
    protected void updateForExtendedProjAdjustmentTypes(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate, ProjTrans _projTrans, boolean _isIntercompany = false)
    {
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCost</Name>
				<Source><![CDATA[
    private void updateCost(
    TmpProjAdjustmentCreate _tmpProjAdjustmentCreate,
    ProjTrans               _projTrans)
    {
        ProjCostTrans       projCostTransOrig;
        ProjCostTransCost   projCostTransCostOrig;
        ProjCostTransSale   projCostTransSaleOrig;

        projCostTransOrig   = ProjCostTrans::find(_tmpProjAdjustmentCreate.TransID, true);

        if (this.checkCreateNewTransaction(_projTrans))
        {
            ProjPost::newTransAdj(projCostTransOrig, _tmpProjAdjustmentCreate.Transdate).postTrans();

            while select forupdate projCostTransCostOrig
            where projCostTransCostOrig.TransId == projCostTransOrig.TransId
            {
                ProjPost::newTransAdjCost(projCostTransOrig, projCostTransCostOrig, _projTrans).postTrans();
            }

            while select forupdate projCostTransSaleOrig
            where projCostTransSaleOrig.TransId == projCostTransOrig.TransId
            {
                ProjPost::newTransAdjSale(projCostTransOrig, projCostTransSaleOrig, _projTrans).postTrans();
            }
        }
        else
        {
            ProjPost::newTransAdjNoLedger(projCostTransOrig,_tmpProjAdjustmentCreate).postTrans();

            while select tmpProjAdjustmentCreateCost
            where tmpProjAdjustmentCreateCost.RefRecId == _tmpProjAdjustmentCreate.RecId
            {
                projCostTransCostOrig = ProjCostTransCost::find(tmpProjAdjustmentCreateCost.CostRefRecId, true);
                ProjPost::newTransAdjNoLedgerCost(projCostTransOrig, projCostTransCostOrig, tmpProjAdjustmentCreateCost).postTrans();
            }

            while select tmpProjAdjustmentCreateSale
            where tmpProjAdjustmentCreateSale.RefRecId == _tmpProjAdjustmentCreate.RecId
            {
                projCostTransSaleOrig = ProjCostTransSale::find(tmpProjAdjustmentCreateSale.SaleRefRecId, true);
                ProjPost::newTransAdjNoLedgerSale(projCostTransOrig, projCostTransSaleOrig, tmpProjAdjustmentCreateSale).postTrans();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmpl</Name>
				<Source><![CDATA[
    private void updateEmpl(
    TmpProjAdjustmentCreate _tmpProjAdjustmentCreate,
    ProjTrans               _projTrans
    ,boolean _isIntercompany = false
    )
    {
        ProjEmplTrans       projEmplTransOrig;
        ProjEmplTransCost   projEmplTransCostOrig;
        ProjEmplTransSale   projEmplTransSaleOrig;

        projEmplTransOrig   = ProjEmplTrans::find(_tmpProjAdjustmentCreate.TransID, true);

        if (this.checkCreateNewTransaction(_projTrans))
        {
            ProjPost::newTransAdj(projEmplTransOrig, _tmpProjAdjustmentCreate.Transdate).postTrans();

            while select forupdate projEmplTransCostOrig
            where projEmplTransCostOrig.TransId == projEmplTransOrig.TransId
            {
                ProjPost::newTransAdjCost(projEmplTransOrig, projEmplTransCostOrig, _projTrans).postTrans();
            }

            while select forupdate projEmplTransSaleOrig
            where projEmplTransSaleOrig.TransId == projEmplTransOrig.TransId
            {
                ProjPost::newTransAdjSale(projEmplTransOrig, projEmplTransSaleOrig, _projTrans).postTrans();
            }
        }
        else
        {
            ProjPost::newTransAdjNoLedger(projEmplTransOrig,_tmpProjAdjustmentCreate).postTrans();

            // Update the indirect component group if the original and the adjustment transaction’s PSA indirect component group was different.
            if (projEmplTransOrig.PSAIndirectComponentGroup != _tmpProjAdjustmentCreate.PSAIndirectComponentGroup)
            {
                projEmplTransOrig.PSAIndirectComponentGroup = _tmpProjAdjustmentCreate.PSAIndirectComponentGroup;
                projEmplTransOrig.update();
            }

            while select tmpProjAdjustmentCreateCost
            where tmpProjAdjustmentCreateCost.RefRecId == _tmpProjAdjustmentCreate.RecId
            {
                projEmplTransCostOrig = ProjEmplTransCost::find(tmpProjAdjustmentCreateCost.CostRefRecId, true);
                ProjPost::newTransAdjNoLedgerCost(projEmplTransOrig, projEmplTransCostOrig, tmpProjAdjustmentCreateCost).postTrans();
            }

            while select tmpProjAdjustmentCreateSale
            where tmpProjAdjustmentCreateSale.RefRecId == _tmpProjAdjustmentCreate.RecId
            {
                projEmplTransSaleOrig = ProjEmplTransSale::find(tmpProjAdjustmentCreateSale.SaleRefRecId, true);
                ProjPost::newTransAdjNoLedgerSale(projEmplTransOrig, projEmplTransSaleOrig, tmpProjAdjustmentCreateSale).postTrans();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateItem</Name>
				<Source><![CDATA[
    private void updateItem(
    TmpProjAdjustmentCreate _tmpProjAdjustmentCreate,
    ProjTrans               _projTrans)

    {
        ProjItemTrans       projItemTransOrig;
        ProjItemTransCost   projItemTransCostOrig;
        ProjItemTransSale   projItemTransSaleOrig;

        projItemTransOrig   = ProjItemTrans::find(_tmpProjAdjustmentCreate.TransID, true);

        if (this.checkCreateNewTransaction(_projTrans))
        {
            ProjPost::newTransAdj(projItemTransOrig, _tmpProjAdjustmentCreate.Transdate).postTrans();

            while select forupdate projItemTransCostOrig
            where projItemTransCostOrig.InventTransId == projItemTransOrig.InventTransId &&
                projItemTransCostOrig.ProjAdjustRefId == projItemTransOrig.ProjAdjustRefId
            {
                ProjPost::newTransAdjCost(projItemTransOrig, projItemTransCostOrig,_projTrans).postTrans();
            }

            while select forupdate projItemTransSaleOrig
            where projItemTransSaleOrig.ProjTransId == projItemTransOrig.ProjTransId
            {
                ProjPost::newTransAdjSale(projItemTransOrig, projItemTransSaleOrig, _projTrans).postTrans();
            }
        }
        else
        {
            ProjPost::newTransAdjNoLedger(projItemTransOrig,_tmpProjAdjustmentCreate).postTrans();

            while select tmpProjAdjustmentCreateCost
            where tmpProjAdjustmentCreateCost.RefRecId == _tmpProjAdjustmentCreate.RecId
            {
                projItemTransCostOrig = ProjItemTransCost::findRecId(tmpProjAdjustmentCreateCost.CostRefRecId, true);
                ProjPost::newTransAdjNoLedgerCost(projItemTransOrig, projItemTransCostOrig, tmpProjAdjustmentCreateCost).postTrans();
            }

            while select tmpProjAdjustmentCreateSale
            where tmpProjAdjustmentCreateSale.RefRecId == _tmpProjAdjustmentCreate.RecId
            {
                projItemTransSaleOrig = ProjItemTransSale::find(tmpProjAdjustmentCreateSale.SaleRefRecId, true);
                ProjPost::newTransAdjNoLedgerSale(projItemTransOrig, projItemTransSaleOrig, tmpProjAdjustmentCreateSale).postTrans();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRevenue</Name>
				<Source><![CDATA[
    private void updateRevenue(
    TmpProjAdjustmentCreate _tmpProjAdjustmentCreate,
    ProjTrans               _projTrans)
    {
        ProjRevenueTrans        projRevenueTransOrig;
        ProjRevenueTransSale    projRevenueTransSaleOrig;

        projRevenueTransOrig   = ProjRevenueTrans::find(_tmpProjAdjustmentCreate.TransID, true);

        if (this.checkCreateNewTransaction(_projTrans))
        {
            ProjPost::newTransAdj(projRevenueTransOrig,_tmpProjAdjustmentCreate.Transdate).postTrans();

            while select forupdate projRevenueTransSaleOrig
            where projRevenueTransSaleOrig.TransId == projRevenueTransOrig.TransId
            {
                ProjPost::newTransAdjSale(projRevenueTransOrig, projRevenueTransSaleOrig, _projTrans).postTrans();
            }
        }
        else
        {
            ProjPost::newTransAdjNoLedger(projRevenueTransOrig,_tmpProjAdjustmentCreate).postTrans();

            while select tmpProjAdjustmentCreateSale
            where tmpProjAdjustmentCreateSale.RefRecId == _tmpProjAdjustmentCreate.RecId
            {
                projRevenueTransSaleOrig = ProjRevenueTransSale::find(tmpProjAdjustmentCreateSale.SaleRefRecId, true);
                ProjPost::newTransAdjNoLedgerSale(projRevenueTransOrig, projRevenueTransSaleOrig, tmpProjAdjustmentCreateSale).postTrans();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSMASubscription</Name>
				<Source><![CDATA[
    private void updateSMASubscription(TmpProjAdjustmentCreate _tmpProjAdjustmentCreate, ProjTrans _projTrans)
    {
        SMASubscriptionTable        smaSubscriptionTable;
        ProjRevenueTrans            projRevenueTransOrig;
        ProjRevenueTransSale        projRevenueTransSaleOrig;
        ProjRevenueTrans            projRevenueTransNegative;
        ProjRevenueTransSale        projRevenueTransSaleNegative;
        ProjRevenueTrans            projRevenueTransNew;
        ProjRevenueTransSale        projRevenueTransSaleNew;
        SMASubscriptionPeriodType   periodType;

        ttsbegin;

        smaSubscriptionTable = SMASubscriptionTable::find(_tmpProjAdjustmentCreate.smaSubscriptionId, true);
        projRevenueTransOrig = ProjRevenueTrans::find(_tmpProjAdjustmentCreate.TransID, true);

        if (_tmpProjAdjustmentCreate.smaSubscriptionPeriodType == SMASubscriptionPeriodType::PriceChange || _tmpProjAdjustmentCreate.smaSubscriptionPeriodType == SMASubscriptionPeriodType::ReductionDays)
        {
            periodType = _tmpProjAdjustmentCreate.smaSubscriptionPeriodType;
        }
        else
        {
            periodType = SMASubscriptionTable::getPeriodType(_tmpProjAdjustmentCreate.smaStartDate, _tmpProjAdjustmentCreate.smaEnddate, smaSubscriptionTable.invoicePeriodCode());
        }

        if (this.checkCreateNewTransaction(_projTrans))
        {
            projRevenueTransNew = SMASubscriptionTable::createTrans(_tmpProjAdjustmentCreate.smaSubscriptionId,
                                                                _tmpProjAdjustmentCreate.smaBasePrice,
                                                                _tmpProjAdjustmentCreate.smaIndex,
                                                                _tmpProjAdjustmentCreate.smaStartDate,
                                                                _tmpProjAdjustmentCreate.smaEnddate,
                                                                periodType,
                                                                _tmpProjAdjustmentCreate.Transdate,
                                                                _tmpProjAdjustmentCreate.Txt);

            projRevenueTransNew.ActivityNumber  = _tmpProjAdjustmentCreate.ActivityNumber;
            projRevenueTransNew.CategoryId      = _tmpProjAdjustmentCreate.CategoryId;
            projRevenueTransNew.CurrencyId      = _tmpProjAdjustmentCreate.CurrencyId;
            projRevenueTransNew.DefaultDimension       = _tmpProjAdjustmentCreate.DefaultDimension;
            projRevenueTransNew.TaxGroupId      = _tmpProjAdjustmentCreate.TaxgroupId;
            projRevenueTransNew.TaxItemGroupId  = _tmpProjAdjustmentCreate.TaxItemGroupId;
            projRevenueTransNew.ProjId          = _tmpProjAdjustmentCreate.ProjId;
            projRevenueTransNew.Txt             = _tmpProjAdjustmentCreate.Txt;
            projRevenueTransNew.TransDate       = _tmpProjAdjustmentCreate.Transdate;
            projRevenueTransNew.smaStartDate    = _tmpProjAdjustmentCreate.smaStartDate;
            projRevenueTransNew.smaEnddate      = _tmpProjAdjustmentCreate.smaEnddate;
            projRevenueTransNew.smaBasePrice    = _tmpProjAdjustmentCreate.smaBasePrice;
            projRevenueTransNew.smaIndex        = _tmpProjAdjustmentCreate.smaIndex;
            projRevenueTransNew.TransIdRef      = projRevenueTransOrig.TransIdRef;
            projRevenueTransNew.AdjRefTransId   = projRevenueTransOrig.TransId;
            projRevenueTransNew.update();

            projRevenueTransNegative.data(projRevenueTransOrig);
            projRevenueTransNegative.TransId        = ProjParameters::newTransId();
            projRevenueTransNegative.AdjRefTransId  = projRevenueTransOrig.TransId;
            projRevenueTransNegative.TotalSalesAmountCur = 0;
            projRevenueTransNegative.insert();

            while select tmpProjAdjustmentCreateSale
            where tmpProjAdjustmentCreateSale.RefRecId == _tmpProjAdjustmentCreate.RecId
            {
                projRevenueTransSaleNew = SMASubscriptionTable::createTransSale(projRevenueTransNew, tmpProjAdjustmentCreateSale.SalesPrice, tmpProjAdjustmentCreateSale.FundingSource);
            }

            while select tmpProjAdjustmentSale
            where tmpProjAdjustmentSale.TransId == _tmpProjAdjustmentCreate.TransID
            {
                projRevenueTransSaleOrig = ProjRevenueTransSale::find(tmpProjAdjustmentSale.SaleRefRecId, true);
                projRevenueTransSaleNegative.data(projRevenueTransSaleOrig);
                projRevenueTransSaleNegative.SalesPrice = -projRevenueTransSaleOrig.SalesPrice;
                projRevenueTransSaleNegative.LineAmount = -projRevenueTransSaleOrig.LineAmount;
                projRevenueTransSaleNegative.TransId = projRevenueTransNegative.TransId;

                if (projRevenueTransSaleOrig.TransStatus == ProjTransStatus::Posted &&
                projRevenueTransOrig.TransDate == _tmpProjAdjustmentCreate.Transdate ||
                projRevenueTransSaleOrig.TransStatus == ProjTransStatus::InvoiceProposal ||
                projRevenueTransSaleOrig.TransStatus == ProjTransStatus::Invoiced)
                {
                    projRevenueTransSaleNegative.TransStatus = ProjTransStatus::Adjusted;

                    projRevenueTransSaleOrig.TransStatus = ProjTransStatus::Adjusted;
                    projRevenueTransSaleOrig.update();
                }
                else
                {
                    projRevenueTransSaleNegative.TransStatus = ProjTransStatus::Posted;
                }

                projRevenueTransSaleNegative.insert();
            }

            info(strFmt("@SYS76924", projRevenueTransNew.TransId));
        }
        else
        {
            ProjPost::newTransAdjNoLedger(projRevenueTransOrig,_tmpProjAdjustmentCreate).postTrans();

            while select tmpProjAdjustmentCreateSale
            where tmpProjAdjustmentCreateSale.RefRecId == _tmpProjAdjustmentCreate.RecId
            {
                projRevenueTransSaleOrig = ProjRevenueTransSale::find(tmpProjAdjustmentCreateSale.SaleRefRecId, true);
                ProjPost::newTransAdjNoLedgerSale(projRevenueTransOrig, projRevenueTransSaleOrig, tmpProjAdjustmentCreateSale).postTrans();
            }
        }

        smaSubscriptionTable.StartDate      = smaSubscriptionTable.getStartDate();
        smaSubscriptionTable.LatestEnddate  = smaSubscriptionTable.getLatestEndDate();
        smaSubscriptionTable.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjAdjustmentCreate</Name>
				<Source><![CDATA[
    private TmpProjAdjustmentCreate tmpProjAdjustmentCreate(ProjTransIdBase _transId)
    {
        select firstonly tmpProjAdjustmentCreate
                where tmpProjAdjustmentCreate.TransID == _transId;

        return tmpProjAdjustmentCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryBuildDataSourceToSortField</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the sort field to query.
    /// </summary>
    /// <param name = "_queryBuildDataSource">
    ///     data source for the query.
    /// </param>
    /// <returns>
    ///     An instance of <c>QueryBuildDataSource</c>.
    /// </returns>
    protected QueryBuildDataSource getQueryBuildDataSourceToSortField(QueryBuildDataSource _queryBuildDataSource)
    {
        switch (tmpProjAdjustment.AdjustmentType)
        {
            case ProjAdjustmentType::Revenue:
                select firstonly tmpProjAdjustmentSale where tmpProjAdjustmentSale.TransId  == tmpProjAdjustment.TransId;

                if (tmpProjAdjustmentSale.SalesPrice >= 0)
                {
                    _queryBuildDataSource.addSortField(fieldNum(TmpProjAdjustmentCreate,Qty),SortOrder::Ascending);
                }
                else
                {
                    _queryBuildDataSource.addSortField(fieldNum(TmpProjAdjustmentCreate,AdjustOrig),SortOrder::Descending);
                }
                break;

            case ProjAdjustmentType::Hour:
            if (tmpProjAdjustment.Qty >= 0)
                {
                    _queryBuildDataSource.addSortField(fieldNum(TmpProjAdjustmentCreate,Qty),SortOrder::Ascending);
                }
                else
                {
                    _queryBuildDataSource.addSortField(fieldNum(TmpProjAdjustmentCreate,Qty),SortOrder::Descending);
                }
                break;

            default:
                _queryBuildDataSource.addSortField(fieldNum(TmpProjAdjustmentCreate,Qty),SortOrder::Ascending);
                break;
        }
        return _queryBuildDataSource;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>