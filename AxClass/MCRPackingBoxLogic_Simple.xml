<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPackingBoxLogic_Simple</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>MCRPackingBoxLogic_Simple</c> class impliments a simpler way of running
///     the packing box logic.
/// </summary>
/// <remarks>
///     Simple boxing, meaning the boxing algorithm is simple (especially compared
///     the optimized boxing logic).  It runs faster than the Optimized boxing
///     logic.  However, its results are not expected to be as accurate as the
///     Optimized boxing logic.
/// </remarks>
class MCRPackingBoxLogic_Simple extends MCRPackingBoxLogic
{
    Volume totalVolume, availableVolume, usedVolume;
    Weight totalWeight, availableWeight, usedWeight;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLargestFittableItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Adds the largest item that will fit into the specified
    ///     <c>TmpMCRPackingBoxStage</c> record.
    /// </summary>
    /// <param name="_packingBoxStage">
    ///     The <c>TmpMCRPackingBoxStage</c> record to find the largest item that will fit.
    /// </param>
    /// <param name="_packingBoxStageUnboxable">
    ///     Holds <c>TmpMCRPackingBoxStage</c> records that won't fit into any box.
    /// </param>
    /// <param name="_packingBoxTable">
    ///     The <c>MCRPackingBoxTable</c> record for the current box.
    /// </param>
    /// <param name="_packingBoxTrans">
    ///     The <c>MCRPackingBoxTrans</c> buffer containing the item in the box.
    /// </param>
    /// <returns>
    ///     true if the largest item was able to fit into the specified box; otherwise, false.
    /// </returns>
    protected boolean addLargestFittableItem(TmpMCRPackingBoxStage   _packingBoxStage,
                                             TmpMCRPackingBoxStage   _packingBoxStageUnboxable,
                                             MCRPackingBoxTable      _packingBoxTable,
                                             MCRPackingBoxTrans      _packingBoxTrans)
    {
        InventQty qtyToAdd;

        if (availableVolume == 0 || availableWeight == 0)
        {
            return false;
        }

        select _packingBoxStage
            order by LengthLongest     desc,
                     LengthMiddle      desc,
                     LengthShortest    desc,
                     GrossInventVolume desc,
                     GrossInventWeight desc
            where  _packingBoxStage.LengthLongest     <= _packingBoxTable.LengthLongest
                && _packingBoxStage.LengthMiddle      <= _packingBoxTable.LengthMiddle
                && _packingBoxStage.LengthShortest    <= _packingBoxTable.LengthShortest
                && ((      _packingBoxStage.GrossInventVolume <= availableVolume
                        && _packingBoxStage.GrossInventWeight <= availableWeight)
                     ||
                    (      _packingBoxStage.GrossTotalVolume <= availableVolume
                        && _packingBoxStage.GrossTotalWeight <= availableWeight));

        if (!_packingBoxStage)
        {
            // Could not fit by volume and weight, so get new box.
            return false;
        }

        qtyToAdd = this.getQtyToAdd(_packingBoxStage);

        // If Qty-to-add is less than one,
        // then the remaining quantity is considered unboxable.  Remove item
        // from stage, put it on the unboxable stage, and add the next largest
        // fittable item.
        if (qtyToAdd < 1)
        {
            // Add item to unboxable stage.
            _packingBoxStageUnboxable.initFrom(_packingBoxStage);
            _packingBoxStageUnboxable.insert();

            // Remove item from stage.
            _packingBoxStage.delete();

            // Return the (next) largest fittable item.
            return this.addLargestFittableItem(_packingBoxStage,
                                               _packingBoxStageUnboxable,
                                               _packingBoxTable,
                                               _packingBoxTrans);
        }

        // Add item to box here.
        // Do not call clear().  The PackingBoxTransId field needs to stay
        // intact.
        _packingBoxTrans.PackingBoxName  = _packingBoxTable.PackingBoxName;
        _packingBoxTrans.InventQty          = qtyToAdd;
        _packingBoxTrans.SalesParmLine      = _packingBoxStage.SalesParmLine;
        _packingBoxTrans.insert();

        // Subtract item's qty and volume from available.
        this.addToUsed(qtyToAdd * _packingBoxStage.GrossInventVolume,
                       qtyToAdd * _packingBoxStage.GrossInventWeight);

        _packingBoxStage.InventQty -= qtyToAdd;
        // The updating of packingBoxStage's volumeTotal and weightTotal
        // calculations should be handled by the update() call below (or, it
        // won't matter if delete() is called instead).

        // Remove line if no more qty, otherwise, update.
        if (_packingBoxStage.InventQty)
        {
            _packingBoxStage.update();
        }
        else
        {
            _packingBoxStage.delete();
        }

        this.setAvailable(_packingBoxTable);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToUsed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Increments the used volume and weight by the specified amounts.
    /// </summary>
    /// <param name="_volume">
    ///     Increments the used volume by this amount.
    /// </param>
    /// <param name="_weight">
    ///     Increments the used weight by this amount.
    /// </param>
    protected void addToUsed(real _volume, real _weight)
    {
        usedVolume += _volume;
        usedWeight += _weight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>areMoreItemsToBox</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns a <c>boolean</c> value indicating whether there are more items to box.
    /// </summary>
    /// <param name="_packingBoxStage">
    ///     The <c>TmpMCRPackingBoxStage</c> record to check.
    /// </param>
    /// <returns>
    ///     true if there are more items to box; otherwise, false.
    /// </returns>
    protected boolean areMoreItemsToBox(TmpMCRPackingBoxStage _packingBoxStage)
    {
        select firstonly RecId from _packingBoxStage;
        return (_packingBoxStage ? true: false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildStagingTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the <c>TmpMCRPackingBoxStage</c> record based on the passed parameters.
    /// </summary>
    /// <param name="_parmId">
    /// The <c>ParmId</c> to be set on the <c>TmpMCRPackingBoxStage</c> record.
    /// </param>
    /// <param name="_tableRefId">
    /// The <c>TradeLineRefId</c> to be set on the <c>TmpMCRPackingBoxStage</c> record.
    /// </param>
    /// <param name="_packingBoxStage">
    /// The <c>TmpMCRPackingBoxStage</c> record to be created if boxing is possible.
    /// </param>
    /// <param name="_packingBoxStageUnboxable">
    /// The <c>TmpMCRPackingBoxStage</c> record to be created if boxing is not possible.
    /// </param>
    protected void buildStagingTable(
        ParmId                  _parmId,
        TradeLineRefId          _tableRefId,
        TmpMCRPackingBoxStage    _packingBoxStage,
        TmpMCRPackingBoxStage    _packingBoxStageUnboxable)
    {
        InventTable         inventTable;
        SalesParmLine       salesParmLine;
        MCRPackingBoxTable  packingBoxTable;
        real                itemLengthShortest;
        real                itemLengthMiddle;
        real                itemLengthLongest;
        MCRInventTable      mcrInventTable;

        // Only box positive quantities (not return lines).
        // This means that negative quantity lines will be considered
        // unboxable.
        while select salesParmLine
            where  salesParmLine.ParmId == _parmId
                && salesParmLine.TableRefId == _tableRefId
                && salesParmLine.DeliverNow > 0
            join RecId from  inventTable
                order by GrossWidth, GrossHeight, GrossDepth
                where salesParmLine.ItemId == inventTable.ItemId
            outer join IsPackingBoxable from mcrInventTable
                where mcrInventTable.InventTable == inventTable.RecId
        {
            _packingBoxStage.initFrom(salesParmLine);

            // If the item's volume or weight are zero, the item is considered
            // unboxable.  Put the current item in the unboxable stage and move to
            // the next item.
            if ( _packingBoxStage.GrossInventVolume == 0
                || _packingBoxStage.GrossInventWeight == 0)
            {
                _packingBoxStageUnboxable.initFrom(salesParmLine);
                _packingBoxStageUnboxable.insert();
                continue;
            }

            [itemLengthShortest, itemLengthMiddle, itemLengthLongest] = this.sortDimensions(
                _packingBoxStage.GrossInventWidth,
                _packingBoxStage.GrossInventHeight,
                _packingBoxStage.GrossInventDepth);

            // Reset packingBoxTable variable, because it might have been set
            // previously as part of the loop.
            packingBoxTable = null;

            packingBoxTable = MCRPackingBoxTable::getSmallestAccomodatingBox(
                                    _packingBoxStage.GrossInventVolume,
                                    _packingBoxStage.GrossInventWeight,
                                    itemLengthShortest,
                                    itemLengthMiddle,
                                    itemLengthLongest);

            // If item is not boxable, add it to the non-boxable staging table.
            // Otherwise, add it to the staging table.
            if ( packingBoxTable
                && mcrInventTable.IsPackingBoxable == NoYes::Yes)
            {
                _packingBoxStage.insert();
            }
            else
            {
                 _packingBoxStageUnboxable.initFrom(salesParmLine);
                _packingBoxStageUnboxable.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBoxes</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates a new instance of the <c>MCRPackingBoxLogic_Simple</c> class.
    /// </summary>
    /// <param name="_parmId">
    ///     The <c>ParmId</c> of the <c>SalesParmTable</c> to pack.
    /// </param>
    /// <param name="_tableRefId">
    ///     The ID of the <c>TradeLineRef</c> table.
    /// </param>
    /// <param name="_showOversizeItems">
    ///     Indicates whether or not to show oversized items.
    /// </param>
    /// <remarks>
    ///     This is the general idea of how to do 'simple' boxing:
    ///     1. Find out which items can be boxed, and which can't
    ///         a. If an item doesn't fit in the system's biggest box, it doesn't fit in any box
    ///         b. Put all boxable items on one 'stage', and the unboxable items on another 'stage'
    ///     2. NEWBOX:
    ///     3. Get total volume and weight from stage of boxable items
    ///     4. Select smallest accomodating box that will fit items by volume/weight and W/H/D
    ///         a. If all items won't fit together in one box, use the largest box
    ///         that accomodates the largest item.
    ///     5. Set 'available' volume and weight to box's volume and weight limit
    ///     6. ADDITEM:
    ///     7. If no more items, goto DONE
    ///     8. Add largest fittable item to box
    ///         a. If no fittable items, goto NEWBOX
    ///         b. Add as many qty of item to box as possible, and subtract qty from
    ///         remaining qty; if no more qty, delete line
    ///         c. subtract qty * volume and weight from available volume and weight
    ///     9. Goto ADDITEM
    ///     10. DONE
    /// </remarks>
    public void createBoxes(ParmId _parmId, TradeLineRefId _tableRefId, boolean _showOversizeItems = false)
    {
        TmpMCRPackingBoxStage packingBoxStage, packingBoxStageUnboxable;
        MCRPackingBoxTrans packingBoxTrans;
        MCRPackingBoxTable packingBoxTable;
        int numItemsInBox;

        ttsBegin;

        this.buildStagingTable(_parmId, _tableRefId, packingBoxStage, packingBoxStageUnboxable);

        while (this.areMoreItemsToBox(packingBoxStage))
        {
            // Grab new box
            packingBoxTrans.clear();
            packingBoxTrans.initValue();

            numItemsInBox = 0;

            this.getTotalVolumeAndWeight(packingBoxStage);

            packingBoxTable = this.selectSmallestAccomodatingBox(packingBoxStage);

            this.resetUsed();
            this.setAvailable(packingBoxTable);

            while (this.addLargestFittableItem(packingBoxStage,
                                               packingBoxStageUnboxable,
                                               packingBoxTable,
                                               packingBoxTrans))
            {
                numItemsInBox++;
            }
        }

        ttsCommit;

        if (_showOversizeItems)
        {
            this.warnOversizeItems(packingBoxStageUnboxable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyToAdd</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the qty to add to the box from the specified <c>TmpMCRPackingBoxStage</c> record buffer.
    /// </summary>
    /// <param name="_packingBoxStage">
    ///     The <c>TmpMCRPackingBoxStage</c> record containing the qty to add.
    /// </param>
    /// <returns>
    ///     The <c>InventQty</c> to add to the packing box.
    /// </returns>
    protected InventQty getQtyToAdd(TmpMCRPackingBoxStage _packingBoxStage)
    {
        // Qty-to-add is limited by both volume and weight.
        InventQty qtyLimitedByVolume, qtyLimitedByWeight;
        InventTableModule inventTableModule =
            InventTable::find(_packingBoxStage.ItemId).inventTableModuleInvent();
        InventQty limitedQty;

        // If both the item's volume and weight is 0, just return the full
        // quantity.
        if ( _packingBoxStage.GrossInventVolume == 0
            && _packingBoxStage.GrossInventWeight == 0)
        {
            return _packingBoxStage.InventQty;
        }

        // Prevent divide by zero errors.
        if (_packingBoxStage.GrossInventVolume)
        {
            qtyLimitedByVolume = availableVolume
                / _packingBoxStage.GrossInventVolume;
        }
        else
        {
            qtyLimitedByVolume = realMax();
        }

        // Prevent divide by zero errors.
        if (_packingBoxStage.GrossInventWeight)
        {
            qtyLimitedByWeight = availableWeight
                / _packingBoxStage.GrossInventWeight;
        }
        else
        {
            qtyLimitedByWeight = realMax();
        }

        // At this point, we know whether volume or weight is the limiting
        // factor.  So we no longer need to keep track of both.
        limitedQty = min(qtyLimitedByVolume, qtyLimitedByWeight);

        limitedQty = min(limitedQty, _packingBoxStage.InventQty);

        // Assume discrete quantities of 1.
        limitedQty = trunc(limitedQty); // old code, but generated compile warning, this method does the same   limitedQty div 1;

        return limitedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalVolumeAndWeight</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the total volume and weight from the <c>TmpMCRPackingBoxStage</c> record buffer.
    /// </summary>
    /// <param name="_packingBoxStage">
    ///     The <c>TmpMCRPackingBoxStage</c> record to get the total volume and weight for.
    /// </param>
    protected void getTotalVolumeAndWeight(TmpMCRPackingBoxStage _packingBoxStage)
    {
        select sum(GrossTotalVolume) from _packingBoxStage;
        totalVolume = _packingBoxStage.GrossTotalVolume;

        select sum(GrossTotalWeight) from _packingBoxStage;
        totalWeight = _packingBoxStage.GrossTotalWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetUsed</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Resets the used weight and volume back to zero.
    /// </summary>
    protected void resetUsed()
    {
        usedVolume = 0;
        usedWeight = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectSmallestAccomodatingBox</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Selects the smallest accomodating box for the <c>TmpMCRPackingBoxStage</c> record buffer.
    /// </summary>
    /// <param name="_packingBoxStage">
    ///     The <c>TmpMCRPackingBoxStage</c> record to find a box for.
    /// </param>
    /// <returns>
    ///     An <c>MCRPackingBoxTable</c> record containing the smallest box that will
    ///     accomodate the <c>MCRTmpPackingBoxStaging</c> record.
    /// </returns>
    protected MCRPackingBoxTable selectSmallestAccomodatingBox(TmpMCRPackingBoxStage _packingBoxStage)
    {
        //  Here's how to select the smallest accomodating box:
        //  1. See if all items will fit in one box.
        //      a. If so, use that box.
        //  2. If not, get biggest item.  Use its largest accomodating box.

        MCRPackingBoxTable packingBoxTable;
        real lengthShortest, lengthMiddle, lengthLongest;
        TmpMCRPackingBoxStage tmpPackingBoxStageLargestItem;

        [lengthShortest, lengthMiddle, lengthLongest] =
            _packingBoxStage.getLongestOverallLengths();

        packingBoxTable = MCRPackingBoxTable::getSmallestAccomodatingBox(
            totalVolume, totalWeight, lengthShortest, lengthMiddle, lengthLongest);

        if (!packingBoxTable)
        {
            // Cannot fit all items together into one box.  So use largest box
            // (that accomodates the largest item).
            tmpPackingBoxStageLargestItem = _packingBoxStage.getLargestItem();

            [lengthShortest, lengthMiddle, lengthLongest] = this.sortDimensions(
                tmpPackingBoxStageLargestItem.GrossInventWidth,
                tmpPackingBoxStageLargestItem.GrossInventHeight,
                tmpPackingBoxStageLargestItem.GrossInventDepth);

            // Developer's note: Another possible idea here is to use the
            // smallest accomodating box.  Both strategies have drawbacks.
            // (The query for the smallest accomodating box is almost identical
            // to the query for the largest accomdating box, just switching the
            // place of the LengthLongest and LengthShortest fields in the
            // "order by" clause.)
            packingBoxTable = MCRPackingBoxTable::getLargestAccomodatingBox(
                                tmpPackingBoxStageLargestItem.GrossInventVolume,
                                tmpPackingBoxStageLargestItem.GrossInventWeight,
                                lengthShortest,
                                lengthMiddle,
                                lengthLongest);
        }

        return packingBoxTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAvailable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the available volume and weight from the specified <c>MCRPackingBoxTable</c> record buffer.
    /// </summary>
    /// <remarks>
    ///     This method sets the available volume and weight based on
    ///     the currently used volume and weight and the volume and
    ///     weight limit of the <c>MCRPackingBoxTable</c> that is passed in.
    /// </remarks>
    /// <param name="_packingBoxTable">
    ///     The <c>MCRPackingBoxTable</c> record to use in calculating the
    ///     the available volume and weight.
    /// </param>
    protected void setAvailable(MCRPackingBoxTable _packingBoxTable)
    {
        availableVolume = _packingBoxTable.VolumeLimit - usedVolume;
        availableWeight = _packingBoxTable.WeightLimit - usedWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sorts three values returning them in a sorted container.
    /// </summary>
    /// <param name="_dimension1">
    /// One of the three values to sort.
    /// </param>
    /// <param name="_dimension2">
    /// One of the three values to sort.
    /// </param>
    /// <param name="_dimension3">
    /// One of the three values to sort.
    /// </param>
    /// <returns>
    /// A container containing values in the position of shortest, middle, and then longest.
    /// </returns>
    /// <remarks>
    /// Utilized a bubble sort since only three values being sorted.
    /// </remarks>
    protected container sortDimensions(
        real _dimension1,
        real _dimension2,
        real _dimension3)
    {
        real shortest   = _dimension1;
        real middle     = _dimension2;
        real longest    = _dimension3;

        //internal method to sort two values, returning a container of two values with first value being the smaller
        container sortTwoValues(real _value1, real _value2)
        {
            if (_value1 <= _value2)
            {
                return [_value1, _value2];
            }
            else
            {
                return [_value2, _value1];
            }
        }

        [shortest, middle]  = sortTwoValues(shortest, middle);
        [middle, longest]   = sortTwoValues(middle, longest);
        //Rechecking now that other positions may have swapped.
        [shortest, middle]  = sortTwoValues(shortest, middle);

        return [shortest, middle, longest];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>