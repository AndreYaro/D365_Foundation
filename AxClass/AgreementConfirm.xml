<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AgreementConfirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class AgreementConfirm extends AgreementProformaConfirm
{
    boolean                     printReport;
    boolean                     makeEffective;

    utcdatetime                 dateTimeNow;

    boolean                     rereadAgreementLine;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyDocs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the documents that are attached to the agreement line to the agreement history line.
    /// </summary>
    /// <param name="_from">
    /// The agreement line to copy the documents from.
    /// </param>
    /// <param name="_to">
    /// The agreement history line to copy the documents to.
    /// </param>
    private void copyDocs(AgreementLine _from, AgreementLineHistory _to)
    {
        // Ensure AgreementLine is the base table record
        AgreementLine agreementLineFrom = AgreementLine::find(_from.RecId);
        Docu::copy(agreementLineFrom, _to);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeaderHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a history record for an agreement header.
    /// </summary>
    /// <returns>
    ///    The ID of the created history record.
    /// </returns>
    /// <remarks>
    ///    The method is overridden in the <c>AgreementConfirm_Purch</c>, <c>AgreementConfirm_Sales</c>
    ///    classes.
    /// </remarks>
    abstract protected recId createHeaderHistory()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Takes a snapshot of an agreement when the agreement is confirmed.
    /// </summary>
    /// <returns>
    ///    The ID of the created history record.
    /// </returns>
    public recId createHistory()
    {
        recId       = 0;
        dateTimeNow = DateTimeUtil::utcNow();

        ttsbegin;

        recId = this.createHeaderHistory();

        this.createLineQuantityCommitmentHistory();
        this.createLineVolumeCommitmentHistory();
        ttscommit;

        return recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineDefaultHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a history record for an agreement default line.
    /// </summary>
    /// <param name="_line">
    ///    An agreement line.
    /// </param>
    /// <param name="_lineHistory">
    ///    An agreement line history record.
    /// </param>
    private void createLineDefaultHistory(AgreementLine _line, AgreementLineHistory _lineHistory)
    {
        AgreementLineDefault lineDefault;
        AgreementLineDefaultHistory lineDefaultHistory;

        lineDefault = _line.agreementLineDefault();

        if (lineDefault)
        {
            lineDefaultHistory.initFromAgreementLineDefault(lineDefault);
            lineDefaultHistory.AgreementLineHistory = _lineHistory.RecId;
            lineDefaultHistory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineHistory_RU</Name>
				<Source><![CDATA[
    private void createLineHistory_RU(AgreementLine _line, AgreementLineHistory _lineHistory)
    {
        AgreementLineExt_RU lineExt;
        AgreementLineHistoryExt_RU lineHistoryExt;

        lineExt = AgreementLineExt_RU::findByAgreementLine(_line.RecId);

        if (lineExt)
        {
            lineHistoryExt.initFromAgreementLineExt(lineExt);
            lineHistoryExt.AgreementLineHistory = _lineHistory.RecId;
            lineHistoryExt.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineQuantityCommitmentHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates history records for modified agreement quantity lines. It also resets the modified flag on
    ///    the agreement quantity line records.
    /// </summary>
    private void createLineQuantityCommitmentHistory()
    {
        AgreementLineQuantityCommitment quantityCommitmentLine;

        AgreementLineQuantityCommitmentHistory quantityCommitmentlineHistory;
        AgreementLineQuantityCommitmentHistory previousQuantityCommitmentLineHistory;
        DocuRef                                agreementLineDocuRef;
        DocuRef                                agreementLineHistoryDocuRef;
        AgreementLine                          agreementLine;
        AgreementLineHistory                   agreementLineHistory;
        // <GEERU>
        #ISOCountryRegionCodes
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        ttsbegin;

        // Check document if exsit for agreement line
        select firstonly RecId from agreementLineDocuRef
            join agreementLine
                where agreementLine.RecId             == agreementLineDocuRef.RefRecId
                   && agreementLineDocuRef.RefTableId == agreementLine.TableId
                   && agreementLine.Agreement         == agreementHeader.RecId;

        // Check document if exsit for agreement line history
        select firstonly RecId from agreementLineHistoryDocuRef
            join agreementLineHistory
                where agreementLineHistoryDocuRef.RefRecId   == agreementLineHistory.RecId
                   && agreementLineHistoryDocuRef.RefTableId == agreementLineHistory.TableId
            join agreementLine
                where agreementLineHistory.AgreementLine     == agreementLine.RecId
                   && agreementLine.Agreement                == agreementHeader.RecId;

        while select forupdate quantityCommitmentLine
             where quantityCommitmentLine.Agreement == agreementHeader.RecId
                 && (quantityCommitmentLine.IsModified == NoYes::Yes
                 || agreementLineDocuRef
                 || agreementLineHistoryDocuRef)
        {
            previousQuantityCommitmentLineHistory = AgreementLineHistory::findLatest(quantityCommitmentLine.RecId, true) as AgreementLineQuantityCommitmentHistory;

            if (previousQuantityCommitmentLineHistory)
            {
                previousQuantityCommitmentLineHistory.ValidTo = DateTimeUtil::addSeconds(dateTimeNow, -1);
                previousQuantityCommitmentLineHistory.update();
            }

            if (quantityCommitmentLine.IsDeleted == NoYes::No)
            {
                quantityCommitmentlineHistory.clear();

                quantityCommitmentlineHistory.initFromAgreementLineQuantityCommitment(quantityCommitmentLine);
                quantityCommitmentlineHistory.ValidFrom = dateTimeNow;
                quantityCommitmentlineHistory.ValidTo   = DateTimeUtil::maxValue();
                quantityCommitmentlineHistory.insert();

                this.createLineDefaultHistory(quantityCommitmentLine,quantityCommitmentlineHistory);
                // <GEERU>
                if (countryRegion_RU)
                {
                    this.createLineHistory_RU(quantityCommitmentLine, quantityCommitmentlineHistory);
                }
                // </GEERU>

                this.copyDocs(quantityCommitmentLine, quantityCommitmentlineHistory);
            }

            quantityCommitmentLine.IsModified = NoYes::No;
            quantityCommitmentLine.doUpdate();
            rereadAgreementLine = true;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineVolumeCommitmentHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates history records for modified agreement volume lines.
    /// </summary>
    /// <remarks>
    ///    This method also resets the <c>IsModified</c> enumeration value on the agreement volume line
    ///    records.
    /// </remarks>
    private void createLineVolumeCommitmentHistory()
    {
        AgreementLineVolumeCommitment volumeCommitmentLine;

        AgreementLineVolumeCommitmentHistory volumeCommitmentLineHistory;
        AgreementLineVolumeCommitmentHistory previousVolumeCommitmentLineHistory;

        ttsbegin;

        while select forupdate volumeCommitmentLine
             where (  (volumeCommitmentLine.Agreement == agreementHeader.RecId)
                 && (volumeCommitmentLine.IsModified == NoYes::Yes))
        {
            previousVolumeCommitmentLineHistory = AgreementLineHistory::findLatest(volumeCommitmentLine.RecId, true) as AgreementLineVolumeCommitmentHistory;

            if (previousVolumeCommitmentLineHistory)
            {
                previousVolumeCommitmentLineHistory.ValidTo =  DateTimeUtil::addSeconds(dateTimeNow, -1);
                previousVolumeCommitmentLineHistory.update();
            }

            if (volumeCommitmentLine.IsDeleted == NoYes::No)
            {
                volumeCommitmentLineHistory.clear();

                volumeCommitmentLineHistory.initFromAgreementLineVolumeCommitment(volumeCommitmentLine);
                volumeCommitmentLineHistory.ValidFrom = dateTimeNow;
                volumeCommitmentLineHistory.ValidTo   = DateTimeUtil::maxValue();
                volumeCommitmentLineHistory.insert();

                this.createLineDefaultHistory(volumeCommitmentLine,volumeCommitmentLineHistory);

                this.copyDocs(volumeCommitmentLine, volumeCommitmentLineHistory);
            }

            volumeCommitmentLine.IsModified = NoYes::No;
            volumeCommitmentLine.doUpdate();
            rereadAgreementLine = true;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCaption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the title for the SSRS report run form.
    /// </summary>
    /// <returns>
    ///    The string with the dialog caption.
    /// </returns>
    /// <remarks>
    ///    The method is overridden in the <c>AgreementConfirm_Purch</c>, <c>AgreementConfirm_Sales</c>
    ///    classes.
    /// </remarks>
    abstract public str dialogCaption()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the dialog box parameter values into variables.
    /// </summary>
    /// <param name="_formRun">
    /// The form to get the parameters from.
    /// </param>
    public void getFromDialog(FormRun _formRun)
    {
        FormCheckBoxControl fcbc;

        super (_formRun);

        fcbc = _formRun.control(_formRun.controlId(identifierStr(MakeEffective)));
        makeEffective   = fcbc.value();
        fcbc = _formRun.control(_formRun.controlId(identifierStr(PrintReport)));
        printReport   = fcbc.value();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        proforma = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefreshFormButtons</Name>
				<Source><![CDATA[
    public boolean parmRefreshFormButtons(boolean _refreshFormButtons = refreshFormButtons)
    {
        refreshFormButtons = _refreshFormButtons;
        return refreshFormButtons;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRereadAgreementLine</Name>
				<Source><![CDATA[
    public boolean parmRereadAgreementLine(boolean _rereadAgreementLine = rereadAgreementLine)
    {
        rereadAgreementLine = _rereadAgreementLine;
        return rereadAgreementLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Takes a snapshot of an agreement when the agreement is confirmed and prints the report.
    /// </summary>
    public void startConfirm()
    {
        if (makeEffective && agreementHeader.AgreementState != AgreementState::Effective)
        {
            agreementHeader = AgreementHeader::find(agreementHeader.RecId, true);
            agreementHeader.AgreementState = AgreementState::Effective;
            agreementHeader.update();
        }

        recId = this.createHistory();

        if (printReport)
        {
            super(); //it will print the report
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AgreementIRereadableAgreementForm agreementRereadableForm;
        AgreementConfirm agreementConfirm = AgreementConfirm::newAgreementConfirm(_args.record());

        agreementConfirm.prompt();

        if (FormDataUtil::isFormDataSource(_args.record()))
        {
            agreementRereadableForm = _args.caller() as AgreementIRereadableAgreementForm;

            if (agreementRereadableForm)
            {
                if (agreementConfirm.parmRereadAgreementLine())
                {
                    agreementRereadableForm.rereadAgreementLine();
                }

                if (agreementConfirm.parmRefreshFormButtons())
                {
                    agreementRereadableForm.refreshButtonsAfterConfirmation();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAgreementConfirm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an <c>AgreementConfirm</c> object based on the type of the agreement header.
    /// </summary>
    /// <param name="_agreementHeader">
    ///    The agreement header object to use for creation.
    /// </param>
    /// <returns>
    ///    An <c>AgreementConfirm</c> object.
    /// </returns>
    public static AgreementConfirm newAgreementConfirm(AgreementHeader _agreementHeader)
    {
        AgreementConfirm agreementConfirm;

        if (_agreementHeader is SalesAgreementHeader)
        {
            agreementConfirm = AgreementConfirm_Sales::construct();
        }
        else if (_agreementHeader is PurchAgreementHeader)
        {
            agreementConfirm = AgreementConfirm_Purch::construct();
        }
        else
        {
            throw error("@SYS18626");
        }

        agreementConfirm.parmAgreementHeader(_agreementHeader);

        return agreementConfirm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>