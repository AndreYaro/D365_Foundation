<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWBSTreeNode</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjWBSTreeNode</c> class represents a WBS tree node.
/// </summary>
class ProjWBSTreeNode extends Object
{
    ElementNumber     elementNumber;
    ElementNumber     parentElementNumber;
    LineNum           siblingNumber;
    HierarchyPath     path;
    smmActivityNumber activityNumber;
    Integer           level;

    Set               predecessors;

    str outlineNumber;
    str indentation;
    boolean isExpanded;

    Name name;
    Hours effort;
    SchedFromDate startDate;
    SchedToDate endDate;
    Hours activityDuration;
    NumberOfResources numberOfResources;
    ProjCategoryId category;

    Total actualCost;
    Total plannedCost;
    Total costAtComplete;
    Total childrenCostAtComplete;

    Hours actualEffort;
    Hours effortAtComplete;
    Hours childrenEffortAtComplete;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the activity number of the current node.
    /// </summary>
    /// <returns>
    /// The activity number.
    /// </returns>
    /// <remarks>
    /// An activity number does NOT uniquely identify a node.
    /// </remarks>
    public smmActivityNumber activityNumber()
    {
        return activityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costToComplete</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Get cost to complete
    /// </summary>
    /// <returns>
    ///     Cost to complete
    /// </returns>
    public Total costToComplete()
    {
        return this.parmCostAtComplete() - this.parmActualCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>elementNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the element number of the current node.
    /// </summary>
    /// <returns>
    /// The element number.
    /// </returns>
    /// <remarks>
    /// An element number uniquely identifies a node.
    /// </remarks>
    public ElementNumber elementNumber()
    {
        return elementNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasParent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether this node has a parent.
    /// </summary>
    /// <returns>
    /// true if the node has a parent; otherwise, false.
    /// </returns>
    public boolean hasParent()
    {
        return (this.parmParentElementNumber() != "");
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ElementNumber       _elementNumber,
                    ElementNumber       _parentElementNumber,
                    LineNum             _siblingNumber,
                    smmActivityNumber   _activityNumber,
                    HierarchyPath       _path,
                    boolean             _isExpanded,
                    Name                _name,
                    ProjCategoryId      _category,
                    Hours               _effort,
                    SchedFromDate       _startDate,
                    SchedToDate         _endDate,
                    Hours               _activityDuration,
                    NumberOfResources   _numberOfResources,

                    Set                 _predecessors,

                    Total               _plannedCost,
                    Total               _actualCost,
                    Total               _costAtComplete,

                    Hours               _actualEffort,
                    Hours               _effortAtComplete)
    {
        super();

        outlineNumber = "";
        indentation = "";
        isExpanded = _isExpanded;

        elementNumber = _elementNumber;
        parentElementNumber = _parentElementNumber;
        siblingNumber = _siblingNumber;
        path = _path;
        activityNumber = _activityNumber;
        level = 0;

        name = _name;
        category = _category;
        effort = _effort;
        startDate = _startDate;
        endDate = _endDate;
        activityDuration = _activityDuration;
        numberOfResources = _numberOfResources;

        actualCost = _actualCost;
        plannedCost = _plannedCost;
        costAtComplete = _costAtComplete;
        childrenCostAtComplete = 0;

        predecessors = _predecessors;
        actualEffort = _actualEffort;
        effortAtComplete = _effortAtComplete;
        childrenEffortAtComplete = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityDuration</Name>
				<Source><![CDATA[
    public Hours parmActivityDuration(Hours _activityDuration = activityDuration)
    {
        activityDuration = _activityDuration;
        return activityDuration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualCost</Name>
				<Source><![CDATA[
    public Total parmActualCost(Total _actualCost = actualCost)
    {
        actualCost = _actualCost;
        return actualCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActualEffort</Name>
				<Source><![CDATA[
    public Hours parmActualEffort(Hours _actualEffort = actualEffort)
    {
        actualEffort = _actualEffort;
        return actualEffort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategory</Name>
				<Source><![CDATA[
    public ProjCategoryId parmCategory(ProjCategoryId _category = category)
    {
        category = _category;
        return category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildrenCostAtComplete</Name>
				<Source><![CDATA[
    public Total parmChildrenCostAtComplete(Total _childrenCostAtComplete = childrenCostAtComplete)
    {
        childrenCostAtComplete = _childrenCostAtComplete;
        return childrenCostAtComplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildrenEffortAtComplete</Name>
				<Source><![CDATA[
    public Hours parmChildrenEffortAtComplete(Hours _childrenEffortAtComplete = childrenEffortAtComplete)
    {
        childrenEffortAtComplete = _childrenEffortAtComplete;
        return childrenEffortAtComplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChildrensPath</Name>
				<Source><![CDATA[
    public HierarchyPath parmChildrensPath()
    {
        #Characters;
        return this.parmPath() + this.elementNumber() + #Sharp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostAtComplete</Name>
				<Source><![CDATA[
    public Total parmCostAtComplete(Total _costAtComplete = costAtComplete)
    {
        costAtComplete = _costAtComplete;
        return costAtComplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEffort</Name>
				<Source><![CDATA[
    public Hours parmEffort(Hours _effort = effort)
    {
        effort = _effort;
        return effort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEffortAtComplete</Name>
				<Source><![CDATA[
    public Hours parmEffortAtComplete(Hours _effortAtComplete = effortAtComplete)
    {
        effortAtComplete = _effortAtComplete;
        return effortAtComplete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public SchedToDate parmEndDate(SchedToDate _endDate = endDate)
    {
        endDate = _endDate;
        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIndentation</Name>
				<Source><![CDATA[
    public str parmIndentation(str _indentation = indentation)
    {
        indentation = _indentation;
        return indentation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsExpanded</Name>
				<Source><![CDATA[
    public boolean parmIsExpanded(boolean _isExpanded = isExpanded)
    {
        isExpanded = _isExpanded;
        return isExpanded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLevel</Name>
				<Source><![CDATA[
    public Integer parmLevel(Integer _level = level)
    {
        level = _level;
        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public name parmName(Name _name = name)
    {
        name = _name;
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumberOfResources</Name>
				<Source><![CDATA[
    public NumberOfResources parmNumberOfResources(NumberOfResources _numberOfResources = numberOfResources)
    {
        numberOfResources = _numberOfResources;
        return numberOfResources;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOutlineNumber</Name>
				<Source><![CDATA[
    public str parmOutlineNumber(str _outlineNumber = outlineNumber)
    {
        outlineNumber = _outlineNumber;

        return outlineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentElementNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets the node's parent element number.
    /// </summary>
    /// <param name="_parentElementNumber">
    /// The parent element number to be set.
    /// </param>
    /// <returns>
    /// The node's parent element number.
    /// </returns>
    public ElementNumber parmParentElementNumber(str _parentElementNumber = parentElementNumber)
    {
        parentElementNumber = _parentElementNumber;

        return parentElementNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPath</Name>
				<Source><![CDATA[
    public HierarchyPath parmPath(HierarchyPath _path = path)
    {
        path = _path;
        return path;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlannedCost</Name>
				<Source><![CDATA[
    public Total parmPlannedCost(Total _plannedCost = plannedCost)
    {
        plannedCost = _plannedCost;
        return plannedCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPredecessors</Name>
				<Source><![CDATA[
    public Set parmPredecessors(Set _predecessors = predecessors)
    {
        predecessors = _predecessors;
        return predecessors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSiblingNumber</Name>
				<Source><![CDATA[
    public LineNum parmSiblingNumber(LineNum _siblingNumber = siblingNumber)
    {
        siblingNumber = _siblingNumber;
        return siblingNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public SchedFromDate parmStartDate(SchedFromDate _startDate = startDate)
    {
        startDate = _startDate;
        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toTableNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a table buffer containing the node's data.
    /// </summary>
    /// <param name="_hierarchyId">
    /// Hierarchy Id of the WBS tree that this node belogs to.
    /// </param>
    /// <returns>
    /// Table buffer that contains the node's data.
    /// </returns>
    public ProjTmpHierarchyTreeTable toTableNode(HierarchyIdBase _hierarchyId)
    {
        ProjTmpHierarchyTreeTable tmpHierarchyTreeTable;

        tmpHierarchyTreeTable.ElementNumber = elementNumber;
        tmpHierarchyTreeTable.HierarchyId = _hierarchyId;
        tmpHierarchyTreeTable.Path = path;
        tmpHierarchyTreeTable.Level = level;

        return tmpHierarchyTreeTable.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSubPath</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Checks if one <c>ProjWBSTreeNode</c> childrens path is a sub path of another one.
    /// </summary>
    /// <param name="_path1">
    ///     Path that is checked for containing the other one.
    /// </param>
    /// <param name="_path2">
    ///     Path that is checked for being subpath of the other one.
    /// </param>
    /// <returns>
    ///     true if path2 is a subpath of path1.
    /// </returns>
    public static boolean isSubPath(HierarchyPath _path1, HierarchyPath _path2)
    {
        return subStr(_path1, 0, strlen(_path2)) == _path2;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>