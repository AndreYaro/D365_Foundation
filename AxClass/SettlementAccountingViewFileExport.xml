<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementAccountingViewFileExport</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementAccountingViewFileExport</c> class provides export for settlement accounting views.
/// </summary>
public class SettlementAccountingViewFileExport extends SettlementViewFileExportBase
{
    private Map ledgerDimensionToAccountName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>writeView</Name>
				<Source><![CDATA[
    public void writeView(System.IO.StreamWriter _streamWriter, Common _common)
    {
        SettlementAccountingView settlementAccountingView;

        if (_common is SettlementAccountingView)
        {
            settlementAccountingView.linkPhysicalTableInstance(_common);
        }

        this.findMainAccountNames(settlementAccountingView);

        this.writeHeader(_streamWriter);

        while select settlementAccountingView
        {
            this.writeLine(_streamWriter, settlementAccountingView);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMainAccountNames</Name>
				<Source><![CDATA[
    private void findMainAccountNames(SettlementAccountingView _settlementAccountingView)
    {
        ledgerDimensionToAccountName = new Map(Types::Int64, Types::String);

        DimensionAttributeValueCombination davc;
        MainAccount mainAccount;

        while select _settlementAccountingView
            join Name from mainAccount
            exists join RecId, MainAccount from davc
                where _settlementAccountingView.LedgerDimension == davc.RecId
                    && davc.MainAccount == mainAccount.RecId
        {
            ledgerDimensionToAccountName.insert(_settlementAccountingView.LedgerDimension, mainAccount.Name);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeHeader</Name>
				<Source><![CDATA[
    private void writeHeader(System.IO.StreamWriter _streamWriter)
    {
        System.String headerLine = fieldPName(SettlementAccountingView, JournalNum) + columnDelimiterString
            + fieldPName(SettlementAccountingView, Voucher)                         + columnDelimiterString
            + fieldPName(SettlementAccountingView, TransDate)                       + columnDelimiterString
            + fieldPName(SettlementAccountingView, LedgerAccount)                   + columnDelimiterString
            + "@SYS9624"                                                            + columnDelimiterString
            + fieldPName(SettlementAccountingView, Description)                     + columnDelimiterString
            + fieldPName(SettlementAccountingView, TransactionCurrencyCode)         + columnDelimiterString
            + fieldPName(SettlementAccountingView, TransactionCurrencyAmount)       + columnDelimiterString
            + fieldPName(SettlementAccountingView, AccountingCurrencyAmount)        + columnDelimiterString
            + fieldPName(SettlementAccountingView, PostingType);

        _streamWriter.WriteLine(headerLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeLine</Name>
				<Source><![CDATA[
    private void writeLine(System.IO.StreamWriter _streamWriter, SettlementAccountingView _settlementAccountingView)
    {
        str transDateStr = this.transDateToString(_settlementAccountingView.TransDate);
        str accountName = (ledgerDimensionToAccountName.exists(_settlementAccountingView.LedgerDimension)) ?
            ledgerDimensionToAccountName.lookup(_settlementAccountingView.LedgerDimension) : '';

        System.String line = this.qualifyText(_settlementAccountingView.JournalNum)       + columnDelimiterString
            + this.qualifyText(_settlementAccountingView.Voucher)                         + columnDelimiterString
            + this.qualifyText(transDateStr)                                              + columnDelimiterString
            + this.qualifyText(any2Str(_settlementAccountingView.LedgerAccount))          + columnDelimiterString
            + this.qualifyText(accountName)                                               + columnDelimiterString
            + this.qualifyText(_settlementAccountingView.Description)                     + columnDelimiterString
            + this.qualifyText(_settlementAccountingView.TransactionCurrencyCode)         + columnDelimiterString
            + this.amountCurToString(_settlementAccountingView.TransactionCurrencyAmount) + columnDelimiterString
            + this.amountCurToString(_settlementAccountingView.AccountingCurrencyAmount)  + columnDelimiterString
            + this.qualifyText(enum2Str(_settlementAccountingView.PostingType));

        _streamWriter.WriteLine(line);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exports a file containing the settlement accounting view data.
    /// </summary>
    /// <param name = "_args">The arguments for processing.</param>
    public static void main(Args _args)
    {
        SettlementAccountingView settlementAccountingView;

        if (_args.record())
        {
            settlementAccountingView = _args.record() as SettlementAccountingView;
        }

        if (settlementAccountingView)
        {
            SettlementAccountingViewFileExport viewFileExport = new SettlementAccountingViewFileExport();
            viewFileExport.exportSettlementViewToCSV(settlementAccountingView);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>