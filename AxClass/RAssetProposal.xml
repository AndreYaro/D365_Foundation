<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetProposal</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetProposal extends RunBaseBatch implements BatchRetryable
{
    QueryRun queryRun;
    FiscalCalendarPeriod fiscalCalendarPeriod;
    DialogField dialogAssetBudgetModelId;
    RAssetBudgetModelId  rAssetBudgetModelId;
    RAssetTransDate      runDate;
    DialogField          dialogRunDate;
    LedgerJournalId      ledgerJournalId;
    RAssetJournal        rAssetJournal;
    RAssetTable          rAssetTable;
    RAssetStandards      rAssetStandards;
    RAssetStandardId     rAssetStandardId;
    RAssetPostingProfile postingProfileDisposal;
    DialogField          dialogAssetStandardId;

    RAssetDeprBonusId       deprBonusId;
    DialogField             dialogDeprBonusId;
    RAssetDeprBonusDateType deprDateType;

    DialogField          dialogReasonCode;
    ReasonCode           reasonCode;
    DialogField          dialogReasonComment;
    ReasonComment        reasonComment;
    ReasonRefRecID       reasonRefRecID;

    DialogGroup          corrGroup;
    DialogField          dialogCorrect;
    DialogField          dialogCorrectedPeriod;

    Correct_RU           correct;
    CorrectedPeriod_RU   correctedPeriod;

    boolean              singleOperation;
    boolean              isBudgetJournal;
    internal NoYes calcToTransDate;
    protected AmountMST componentryScrapAmount;

    #define.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        runDate,
        rassetStandardId,
        rassetBudgetModelId,
        ledgerJournalId,
        reasonCode,
        reasonComment,
        isBudgetJournal,
        correct,
        correctedPeriod
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
    public RAssetTransType assetTransType()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateJournalLine</Name>
				<Source><![CDATA[
    public boolean canCreateJournalLine(RAssetStandardId _rAssetStandardId)
    {
        RAssetStatusType    rAssetStatusType;
        RAssetSumCalc_Trans calcAssetTrans;
        SysDictClass        dictClass = new SysDictClass(classNum(RAssetStatusType));
        ExecutePermission   executePermission   = new ExecutePermission();
        boolean             ret = true;
        #define.methodPrefix("allow")
    
    
        if (! rAssetBudgetModelId)
        {
            rAssetStatusType = RAssetStatusType::construct(rAssetTable);
    
            executePermission.assert();
            //BP deviation documented
            ret = dictClass.callObject(#methodPrefix +  new DictEnum(enumNum(RAssetTransType)).value2Symbol(this.assetTransType()),
                                       rAssetStatusType,
                                       _rAssetStandardId);
            CodeAccessPermission::revertAssert();
        }
    
        if (ret && this.deprPeriodCheck())
        {
            calcAssetTrans = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum, _rAssetStandardId, runDate);
            if (calcAssetTrans.netBookValue())
            {
                ret = RAssetStandards::find(rAssetTable.AccountNum, _rAssetStandardId).checkDeprPeriod(runDate);
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkFirstDate</Name>
				<Source><![CDATA[
    public RAssetTransDate checkFirstDate(RAssetTransDate _assetTransDate,
                                          RAssetId        _assetId)
    {
        RAssetTransDate    rAssetTransDate = _assetTransDate;
    
        this.initFiscalCalendarPeriod();
    
        if (rAssetTransDate < fiscalCalendarPeriod.StartDate)
        {
            info(strFmt("@GLS116417", _assetId, rAssetTransDate, fiscalCalendarPeriod.StartDate));
            rAssetTransDate = fiscalCalendarPeriod.StartDate;
        }
    
        return rAssetTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDisposalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the additional lines in Fixed Asset journal under the disposal parameters.
    /// </summary>
    /// <param name="_assetSoldScrap">
    /// The asset disposal type.
    /// </param>
    /// <param name="_assetStandardId">
    /// The value model of the fixed asset.
    /// </param>
    /// <param name="_disposalLine">
    /// The main journal line.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The posting profile isn't setup for the current operation.
    /// </exception>
    public void createDisposalTrans(RAssetDisposalType _assetSoldScrap,
                                    RAssetStandardId   _assetStandardId,
                                    LedgerJournalTrans _disposalLine     = null)
    {
        RAssetDisposalParameters  rAssetDisposalParameters;
        RAssetAmount              rAssetAmount;
        LedgerJournalTrans        ledgerJournalTrans;
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset;
        RassetDisposalValue       assetDisposalValue;
        LedgerJournalTrans        disposalLine = _disposalLine.data();
        RAssetPostingProfile      postingProfile = postingProfileDisposal ? postingProfileDisposal :
                                                   rAssetStandards.postingProfile(runDate);
        RAssetTrans               rassetBonusTrans;
        AmountCur                 scrapAmount;

        void createLedgerJournalTrans(RAssetTrans _rassetBonusTrans = null)
        {
            rAssetJournal.createTrans(_assetSoldScrap == this.getReturnDisposalType() ? rAssetAmount : -rAssetAmount,
                                        rAssetTable,
                                        runDate,
                                        rAssetStandards,
                                        '',
                                        enum2str(rAssetDisposalParameters.PostValue),
                                        _rassetBonusTrans ? _rassetBonusTrans.LedgerDimension : assetDisposalValue.ledgerDimension(),
                                        NoYes::No);
            ledgerJournalTrans                       = rAssetJournal.ledgerJournalTrans();
            ledgerJournalTrans_RAsset                = rAssetJournal.ledgerJournalTrans_RAsset();
            ledgerJournalTrans.OffsetLedgerDimension = this.mergeLedgerDimensionAndDefaultDimension(assetDisposalValue.offsetLedgerDimension(),
                                                                                                    ledgerJournalTrans.DefaultDimension);
            ledgerJournalTrans.Invisible             = rAssetDisposalParameters.Invisible;
            ledgerJournalTrans.NoEdit                = rAssetDisposalParameters.Invisible;
            ledgerJournalTrans_RAsset.ToFromRecId    = disposalLine.RecId ? disposalLine.RecId : ledgerJournalTrans.RecId;
            ledgerJournalTrans_RAsset.PostValue      = rAssetDisposalParameters.PostValue;
            if (_rassetBonusTrans)
            {
                ledgerJournalTrans_RAsset.DepreciationBonusId = _rassetBonusTrans.DeprBonusId;
                ledgerJournalTrans_RAsset.TransType           = RAssetTransType::Depreciation;
                ledgerJournalTrans_RAsset.DebLedgerDimension  = _rassetBonusTrans.LedgerDimension;
            }
            ledgerJournalTrans.update();
            ledgerJournalTrans_RAsset.doUpdate();
        }

        if (! (select firstonly RecId from rAssetDisposalParameters
                   where rAssetDisposalParameters.SoldScrap      == _assetSoldScrap &&
                         rAssetDisposalParameters.PostingProfile == postingProfile  &&
                         (rAssetDisposalParameters.Invisible     == NoYes::No)).RecId)
            throw error(strFmt("@GLS220505", this.assetTransType()));

        if (_assetSoldScrap == RAssetDisposalType::Scrap)
        {
            scrapAmount = CurrencyExchangeHelper::curAmount2CurAmount(componentryScrapAmount, CompanyInfoHelper::standardCurrency(), rAssetStandards.CurrencyCode, runDate);
        }
        else if (disposalLine.RecId)
        {
            scrapAmount = CurrencyExchangeHelper::curAmount2CurAmount(disposalLine.amount(), disposalLine.CurrencyCode, rAssetStandards.CurrencyCode, runDate);
        }

        while select rAssetDisposalParameters
            group by PostValue, ValueType, Invisible
            where rAssetDisposalParameters.SoldScrap      == _assetSoldScrap &&
                  rAssetDisposalParameters.PostingProfile == postingProfile
        {
            rAssetAmount = RassetDisposalValue::postValue(rAssetTable.AccountNum,
                                                          _assetStandardId,
                                                          rAssetDisposalParameters.PostValue,
                                                          scrapAmount,
                                                          runDate);
            assetDisposalValue = new RassetDisposalValue(postingProfile,
                                                         _assetSoldScrap,
                                                         rAssetDisposalParameters.PostValue,
                                                         rAssetTable.AccountNum,
                                                         rAssetDisposalParameters.ValueType);

            if (assetDisposalValue.postThis(rAssetAmount, _assetStandardId))
            {
                rAssetAmount = RAssetProposal::roundAmount(_assetStandardId,
                                                           rAssetTable,
                                                           runDate,
                                                           rAssetAmount,
                                                           rAssetStandards.CurrencyCode);

                if (rAssetAmount)
                {
                    if (_assetSoldScrap == this.getSoldDisposalType() &&
                        rAssetDisposalParameters.PostValue == RAssetPostValue::DepBonusRecovery)
                    {
                        while select  rassetBonusTrans
                        where   rassetBonusTrans.AccountNum       == rAssetTable.AccountNum               &&
                                rassetBonusTrans.AssetStandardId  == _assetStandardId                     &&
                                rassetBonusTrans.PostingType      == RAssetPostingType::DepreciationBonus &&
                                !rassetBonusTrans.StornoRecId
                        {
                            rAssetAmount = RAssetProposal::roundAmount(_assetStandardId,
                                                           rAssetTable,
                                                           runDate,
                                                           rassetBonusTrans.AmountCur,
                                                           rAssetStandards.CurrencyCode);

                            createLedgerJournalTrans(rassetBonusTrans);
                        }
                    }
                    else
                    {
                        createLedgerJournalTrans();
                    }
                }
            }
        }

        if (ledgerJournalTrans && ! disposalLine.RecId)
        {
            ledgerJournalTrans_RAsset.CanDisposal = true;
            ledgerJournalTrans_RAsset.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnDisposalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets return disposal type.
    /// </summary>
    /// <returns>The return disposal type.</returns>
    protected RAssetDisposalType getReturnDisposalType()
    {
        return RAssetDisposalType::LendRet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSoldDisposalType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sold disposal type.
    /// </summary>
    /// <returns>The sold disposal type.</returns>
    protected RAssetDisposalType getSoldDisposalType()
    {
        return RAssetDisposalType::Sold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount  = 0)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deprPeriodCheck</Name>
				<Source><![CDATA[
    protected boolean deprPeriodCheck()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog =  super();
        DialogGroup     dialogGroupReason;
        ReasonTableRef  reasonTableRef;

        dialogRunDate         = dialog.addField(extendedTypeStr(RAssetTransDate), "@SYS67");
        dialogAssetStandardId = dialog.addField(extendedTypeStr(RAssetStandardId), "@GLS116120");
        dialogRunDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        if (isBudgetJournal)
        {
            dialogAssetBudgetModelId = dialog.addField(extendedTypeStr(RAssetBudgetModelId));
            dialogAssetBudgetModelId.value((select firstonly budgetModel
                                                where budgetModel.RecId > 0).ModelId);
        }
    
        if (reasonRefRecID)
        {
            reasonTableRef  = ReasonTableRef::find(reasonRefRecID);
            reasonCode      = reasonTableRef.Reason;
            reasonComment   = reasonTableRef.ReasonComment;
        }
    
        dialogGroupReason = dialog.addGroup("@SYS86426");
    
        dialogReasonCode = dialog.addField(extendedTypeStr(ReasonCode));
        dialogReasonCode.value(reasonCode);
    
        dialogReasonCode.control().registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(RAssetProposal, dialogReasonCode_lookup),
            this);
        dialogReasonCode.control().registerOverrideMethod(
            methodStr(FormStringControl, jumpRef),
            methodStr(RAssetProposal, dialogReasonCode_jumpRef),
            this);
        dialogReasonCode.control().registerOverrideMethod(
            methodStr(FormStringControl, modified),
            methodStr(RAssetProposal, dialogReasonCode_modified),
            this);
    
        dialogReasonComment = dialog.addField(extendedTypeStr(ReasonComment));
        dialogReasonComment.value(reasonComment);
    
        corrGroup = dialog.addGroup("@GLS105434");
    
        dialogCorrect = dialog.addField(extendedTypeStr(Correct_RU));
    
        dialogCorrectedPeriod = dialog.addField(extendedTypeStr(CorrectedPeriod_RU));
        dialogCorrectedPeriod.enabled(false);
    
        dialogCorrect.control().registerOverrideMethod(
            methodStr(FormCheckBoxControl, modified),
            methodStr(RAssetProposal, dialogCorrect_modified),
            this);
    
        if (isBudgetJournal)
        {
            corrGroup.visible(false);
        }
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCorrect_modified</Name>
				<Source><![CDATA[
    private boolean dialogCorrect_modified(FormCheckBoxControl _ctrl)
    {
        boolean ret = _ctrl.modified();
    
        if (ret)
        {
            dialogCorrectedPeriod.enabled(dialogCorrect.value());
    
            if (dialogCorrect.value())
            {
                dialogCorrectedPeriod.value(dialogRunDate.value());
            }
            else
            {
                dialogCorrectedPeriod.value(dateNull());
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_jumpRef</Name>
				<Source><![CDATA[
    private void dialogReasonCode_jumpRef(FormStringControl _ctrl)
    {
        Args args = new Args();
        args.parmEnumType(enumNum(ReasonCodeAccountTypeAll));
        args.parmEnum(enum2int(ReasonCodeAccountTypeAll::RAsset));
        
        FormRun formRun = new MenuFunction(menuitemDisplayStr(Reasons), MenuItemType::Display).create(args);
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_lookup</Name>
				<Source><![CDATA[
    private void dialogReasonCode_lookup(FormStringControl _ctrl)
    {
        LedgerJournalACType     ledgerJournalACType;
    
        ledgerJournalACType = LedgerJournalACType::FixedAssets_RU;
        ReasonFormTable::reasonCodeLookup(_ctrl, ledgerJournalACType, ledgerJournalACType, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogReasonCode_modified</Name>
				<Source><![CDATA[
    private void dialogReasonCode_modified(FormStringControl _ctrl)
    {
        FormStringControl controlReasonComment = dialogReasonComment.control();
    
        _ctrl.modified();
    
        controlReasonComment.text(ReasonTable::find(_ctrl.text()).Description);
        controlReasonComment.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();
    
        if (ret)
        {
            if (dialogAssetBudgetModelId)
            {
                rAssetBudgetModelId = dialogAssetBudgetModelId.value();
            }
    
            rAssetStandardId = dialogAssetStandardId.value();
            runDate          = dialogRunDate.value();
    
            reasonCode       = dialogReasonCode.value();
            reasonComment    = dialogReasonComment.value();
            correct          = dialogCorrect.value();
            correctedPeriod  = dialogCorrectedPeriod.value();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalCalendarPeriod</Name>
				<Source><![CDATA[
    private void initFiscalCalendarPeriod()
    {
        LedgerFiscalCalendarPeriod ledgerPeriod;
    
        if (!fiscalCalendarPeriod)
        {
            select firstonly fiscalCalendarPeriod
                order by StartDate
                where fiscalCalendarPeriod.FiscalCalendar == CompanyInfoHelper::fiscalCalendarRecId() &&
                      fiscalCalendarPeriod.Type           == FiscalPeriodType::Operating
            exists join ledgerPeriod
                where ledgerPeriod.Ledger               == Ledger::current() &&
                      ledgerPeriod.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId &&
                      ledgerPeriod.Status               == FiscalPeriodStatus::Open;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes correction operation.
    /// </summary>
    public void initJournalCorrection()
    {
        TransDate accountingDate;
    
        if (correctedPeriod)
        {
            accountingDate = runDate;
    
            this.initFiscalCalendarPeriod();
    
            if (accountingDate < fiscalCalendarPeriod.StartDate)
            {
                accountingDate = fiscalCalendarPeriod.StartDate;
            }
    
            rAssetJournal.parmCorrect(true);
            rAssetJournal.parmAccountingDate(accountingDate);
    
            runDate = correctedPeriod;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    public void initParameters(LedgerJournalId      _ledgerJournalId,
                               RAssetTransDate      _runDate,
                               RAssetStandards      _rAssetStandards,
                               RAssetPostingProfile _postingProfileDisposal = '',
                               boolean              _singleOperation        = false)
    {
        this.journalNum(_ledgerJournalId);
    
        rAssetJournal   = new RAssetJournal(this.journalNum(), this.assetTransType());
        rAssetJournal.parmReasonRefRecId(reasonRefRecID);
    
        runDate         = _runDate;
        rAssetStandards = _rAssetStandards;
        rAssetTable     = RAssetTable::find(rAssetStandards.AssetId);
        postingProfileDisposal = _postingProfileDisposal;
        singleOperation        = _singleOperation;
        isBudgetJournal        = LedgerJournalTable::find(ledgerJournalId).JournalType == LedgerJournalType::AssetBudgets_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDeprBonus</Name>
				<Source><![CDATA[
    public void initParmDeprBonus(RAssetDeprBonusId         _deprBonusId,
                                  RAssetDeprBonusDateType   _deprDateType)
    {
        deprBonusId  = _deprBonusId;
        deprDateType = _deprDateType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNum</Name>
				<Source><![CDATA[
    public LedgerJournalId journalNum(LedgerJournalId _ledgerJournalId = ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;
        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeLedgerDimensionAndDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the ledger dimension default account and the default dimensions to create a ledger dimension.
    /// </summary>
    /// <param name="_ledgerDimension">
    /// The ledger dimension default account.
    /// </param>
    /// <param name="_defaultDimension">
    /// The default dimensions.
    /// </param>
    /// <returns>
    /// A ledger dimension.
    /// </returns>
    protected LedgerDimensionAccount mergeLedgerDimensionAndDefaultDimension(
        LedgerDimensionDefaultAccount _ledgerDimension,
        DimensionDefault _defaultDimension)
    {
        LedgerDimensionAccount mergedLedgerDimension;
        List dimensionSources;
    
        if (_ledgerDimension)
        {
            dimensionSources = new List(Types::Class);
    
            dimensionSources.addEnd(LedgerDimensionDefaultingEngine::getDefaultDimensionSpecifiers(_defaultDimension));
            mergedLedgerDimension = LedgerDimensionDefaultingEngine::createLedgerDimension(_ledgerDimension, dimensionSources);
        }
    
        return mergedLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrigQueryRun</Name>
				<Source><![CDATA[
    private QueryRun getOrigQueryRun()
    {
        return new QueryRun(queryStr(RassetTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        queryRun = this.getOrigQueryRun();
        rAssetBudgetModelId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetModelId</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetBudgetModelId parmBudgetModelId(RAssetBudgetModelId _budgetModelId = rAssetBudgetModelId)
    {
        rAssetBudgetModelId = _budgetModelId;
    
        return rAssetBudgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcToTransDate</Name>
				<Source><![CDATA[
    internal NoYes parmCalcToTransDate(NoYes _calcToTransDate = calcToTransDate)
    {
        calcToTransDate = _calcToTransDate;
        return calcToTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrect</Name>
				<Source><![CDATA[
    public Correct_RU parmCorrect(Correct_RU _correct = correct)
    {
        correct = _correct;
    
        return correct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectedPeriod</Name>
				<Source><![CDATA[
    public CorrectedPeriod_RU parmCorrectedPeriod(CorrectedPeriod_RU _correctedPeriod = correctedPeriod)
    {
        correctedPeriod = _correctedPeriod;
        return correctedPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonCode</Name>
				<Source><![CDATA[
    public ReasonCode parmReasonCode(ReasonCode _reasonCode = reasonCode)
    {
        reasonCode = _reasonCode;
    
        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonComment</Name>
				<Source><![CDATA[
    public ReasonComment parmReasonComment(ReasonComment _reasonComment = reasonComment)
    {
        reasonComment = _reasonComment;
    
        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonRefRecId</Name>
				<Source><![CDATA[
    public ReasonRefRecID parmReasonRefRecId(ReasonRefRecID _reasonRefRecID = reasonRefRecID)
    {
        reasonRefRecID  = _reasonRefRecID;
    
        return reasonRefRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardId</Name>
				<Source><![CDATA[
    // the method was created for automation test
    public RAssetStandardId parmStandardId(RAssetStandardId _standardId = rAssetStandardId)
    {
        rAssetStandardId = _standardId;
    
        return rAssetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run(QueryRun _runProposal = queryRun)
    {
        boolean              addLineFromAllModels;
        LedgerJournalTrans   ledgerJournalTrans;
        boolean              derivedExists;
        RAssetTransDate      currentRunDate = runDate;
        DictEnum             assetTransTypeEnum = new DictEnum(enumNum(RAssetTransType));
    
        rAssetJournal        = new RAssetJournal(this.journalNum(), this.assetTransType());
        addLineFromAllModels = RAssetProposal::addLineFromAllModels(this.assetTransType()) || ! rAssetStandardId;
        derivedExists        = ! addLineFromAllModels &&
                               (select firstonly RecId from rAssetStandardTableDerived
                                    where rAssetStandardTableDerived.AssetStandardId == rAssetStandardId &&
                                          rAssetStandardTableDerived.AssetTransType  == assetTransTypeEnum.index2Value(this.assetTransType())).RecId;
    
        _runProposal.query(RAssetStatusType::allowStatusRangeValue(_runProposal.query(),this.assetTransType()));
    
        this.progressInit(strFmt("@GLS106745", this.assetTransType()),
                          SysQuery::countTotal(_runProposal),
                          #AviUpdate);
        progress.updateInterval(5);
    
        while (_runProposal.next())
        {
            rAssetTable = _runProposal.get(tableNum(RAssetTable));
            progress.setText("@GLS104037" + "@SYS77038" + rAssetTable.AccountNum);
            progress.incCount();
    
            ttsbegin;
            while select rAssetStandards
                where rAssetStandards.AssetId == rAssetTable.AccountNum
            {
                if (addLineFromAllModels ||
                    rAssetStandards.AssetStandardId == rAssetStandardId ||
                    (derivedExists && RAssetStandardTableDerived::existDerived(rAssetStandardId,
                                                                               rAssetStandards.AssetStandardId,
                                                                               assetTransTypeEnum.index2Value(this.assetTransType()))))
                {
                    if (correct)
                    {
                        this.initJournalCorrection();
                    }
    
                    if (this.canCreateJournalLine(rAssetStandards.AssetStandardId))
                    {
                        if (!reasonRefRecID && (reasonCode != '' || reasonComment != ''))
                        {
                            rAssetJournal.parmReasonRefRecId(reasonRefRecID);
                            rAssetJournal.parmReasonCode(reasonCode);
                            rAssetJournal.parmReasonComment(reasonComment);
                        }
    
                        rAssetJournal.ledgerJournalTrans(ledgerJournalTrans);
                        this.createJournalLines(rAssetStandards.AssetStandardId);
                    }
                }
                runDate = currentRunDate;
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setIsAssetBudgetJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets whether the proposal is called from the fixed asset budget journal.
    /// </summary>
    /// <param name="_isBudgetJournal">
    ///    true if the proposal is called from a fixed asset budget journal; otherwise, false.
    /// </param>
    protected void setIsAssetBudgetJournal(boolean _isBudgetJournal)
    {
        isBudgetJournal = _isBudgetJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version = conPeek(packedClass,1);
        container       packedQuery = conPeek(packedClass, conLen(packedClass));
        LedgerJournalId journalId = ledgerJournalId;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                ledgerJournalId = journalId ? journalId : ledgerJournalId;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    SysQueryRun sysQueryRun =  new SysQueryRun(packedQuery);
                    sysQueryRun.origQueryPack(this.getOrigQueryRun().pack());
                    queryRun = sysQueryRun;
                }
                break;
    
            default:
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the entered dialog values.
    /// </summary>
    /// <param name="_calledFrom">
    /// An instance of the dialog.
    /// </param>
    /// <returns>
    /// true, if the validations are OK; otherwise, false.
    /// </returns>
    boolean validate(Object _calledFrom = null)
    {
        boolean ret = true;
    
        if (isBudgetJournal && ! rAssetBudgetModelId)
        {
            ret = checkFailed("@SYS71103");
        }
    
        if (ret && correct)
        {
            if (!correctedPeriod)
            {
                ret = checkFailed(strfmt("@SYS110217", "@GLS111794"));
            }
    
            if (ret && runDate && (runDate < correctedPeriod))
            {
                ret = checkFailed(strfmt("@SYS91558", "@SYS67", "@GLS111794"));
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineFromAllModels</Name>
				<Source><![CDATA[
    /// <summary>
    /// defines whether the journal lines should be created for all asset value models
    /// </summary>
    /// <param name="_assetTransType">
    /// the transaction type of the proposal operation
    /// </param>
    /// <returns>
    /// a boolean sign, true - the proposal operation creates journal line for all value models
    /// </returns>
    public static boolean addLineFromAllModels(RAssetTransType _assetTransType)
    {
        DictEnum  standardTransType = new DictEnum(enumNum(RAssetStandardTransType));
        int       i;

        for (i = 0; i < standardTransType.values(); i++)
        {
            if (standardTransType.index2Value(i) == _assetTransType)
                return false;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RAssetProposal construct(
        RAssetTransType _assetTransType,
        ParmTxt _parm = '',
        boolean _budgetJournal = false)
    {
        RAssetProposal rAssetProposal = RAssetProposal::newFromTransTypeParmBudgetJournal(
            _assetTransType,
            _parm,
            _budgetJournal);

        if (!rAssetProposal)
        {
            throw error("@GLS116402");
        }

        rAssetProposal.setIsAssetBudgetJournal(_budgetJournal);
        return rAssetProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromTransTypeParmBudgetJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an <c>RAssetProposal</c> object.
    /// </summary>
    /// <param name = "_assetTransType">An asset trans type.</param>
    /// <param name = "_parm">A param text.</param>
    /// <param name = "_budgetJournal">A budget journal flag.</param>
    /// <returns>The proper instance of <c>RAssetProposal</c> class.</returns>
    protected static RAssetProposal newFromTransTypeParmBudgetJournal(
        RAssetTransType _assetTransType,
        ParmTxt _parm = '',
        boolean _budgetJournal = false)
    {
        const ParmTxt ParmValue = 'storno';
        const ParmTxt GroupDepreciation = 'group';

        RAssetProposal rAssetProposal;

        switch (_assetTransType)
        {
            case RAssetTransType::Acquisition    :
                if (_budgetJournal)
                {
                    rAssetProposal = new RAssetProposalAcquisitionBudget();
                }
                else
                {
                    rAssetProposal = new RAssetproposalAcquisition();
                }
                break;
    
            case RAssetTransType::AcquisitionAdj :
                rAssetProposal = new RAssetProposalAcquisitionAdj();
                break;
    
            case RAssetTransType::Depreciation   :
                if (_parm == ParmValue)
                {
                    rAssetProposal = new RAssetproposalDepreciationStorno();
                }
                else if (_parm == GroupDepreciation)
                {
                    rAssetProposal = new RAssetproposalDepreciationGroup();
                }
                else if (_budgetJournal)
                {
                    rAssetProposal = new RAssetProposalDepreciationBudget();
                }
                else
                {
                    rAssetProposal = new RAssetproposalDepreciation();
                }
                break;
    
            case RAssetTransType::DepreciationAdj:
                rAssetProposal = new RAssetProposalDepreciationAdj();
                break;
    
            case RAssetTransType::Revaluation    :
                rAssetProposal = new RAssetproposalRevalution();
                break;
    
            case RAssetTransType::Lending        :
                rAssetProposal = new RAssetproposalLending();
                break;
    
            case RAssetTransType::LendingRet     :
                rAssetProposal = new RAssetproposalLendingRet();
                break;
    
            case RAssetTransType::DisposalSale   :
                rAssetProposal = new RAssetproposalDisposalSale();
                break;
    
            case RAssetTransType::DisposalScrap  :
                rAssetProposal = new RAssetproposalDisposalScrap();
                break;
    
            case RAssetTransType::PartialTakeDown  :
                rAssetProposal = new RAssetProposalPartialTakeDown();
                break;
    
            case RAssetTransType::Disposal       :
                rAssetProposal = new RAssetproposalDisposal();
                break;
    
            case RAssetTransType::WriteUpAdj     :
                rAssetProposal = new RAssetproposalWriteUpAdj();
                break;
    
            case RAssetTransType::WriteDownAdj     :
                rAssetProposal = new RAssetproposalWriteDownAdj();
                break;
    
            case RAssetTransType::Other     :
                rAssetProposal = new RAssetProposalOther();
                break;
    
            case RAssetTransType::CompanyReceipt :
                rAssetProposal = new RAssetproposalCompanyReceipt();
                break;
    
            case RAssetTransType::CompanyIssue :
                rAssetProposal = new RAssetproposalCompanyIssue();
                break;
        }

        return rAssetProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    server client static public ClassDescription description()
    {
        return "@GLS116357";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static client void main(Args _args)
    {
        LedgerJournalTable  ledgerJournalTable  = _args.caller().ledgerJournalTable();
        LedgerJournalEngine ledgerJournalEngine = _args.caller().ledgerJournalEngine();
        RAssetProposal      rAssetProposal      = RAssetProposal::construct(_args.parmEnum(), _args.parm(),
                                                                            ledgerJournalTable.JournalType == LedgerJournalType::AssetBudgets_RU);
        FormDataSource      formDataSource      = FormDataUtil::getFormDataSource(_args.record());
        LedgerJournalTrans  ledgerJournalTrans  = _args.record();
    
        RAssetProposal::performInitialization_Server(rAssetProposal, ledgerJournalTable.JournalNum);
    
        if (rAssetProposal.prompt())
        {
            if (! ledgerJournalTrans.RecId && ledgerJournalTrans.Voucher)
            {
                ledgerJournalEngine.clearVoucher();
            }
    
            RAssetProposal::performProposal_Server(rAssetProposal, ledgerJournalTrans, ledgerJournalTable.JournalNum);
    
            if (ledgerJournalTrans)
            {
                ledgerJournalEngine.voucherTotals(ledgerJournalTrans, true);
            }
    
            formDataSource.executeQuery();
            ledgerJournalEngine.ledgerJournalTableUpdateTotals(ledgerJournalTable,true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>performInitialization_Server</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs some of the initialization of the rasset proposal on the server.
    /// </summary>
    /// <param name="_rAssetProposal">
    ///    The rasset proposal to perform the initialization on.
    /// </param>
    /// <param name="_journalNum">
    ///    The journal number that will be used by the proposal.
    /// </param>
    protected static server void performInitialization_Server(RAssetProposal _rAssetProposal, LedgerJournalId _journalNum)
    {
        _rAssetProposal.getLast();
        _rAssetProposal.journalNum(_journalNum);
        _rAssetProposal.setIsAssetBudgetJournal(LedgerJournalTable::find(_journalNum).JournalType == LedgerJournalType::AssetBudgets_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performProposal_Server</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs the proposal.
    /// </summary>
    /// <param name="_rAssetProposal">
    ///    The rasset proposal that will be run.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    ///    The journal line that the user was on when they performed the proposal.
    /// </param>
    /// <param name="_journalNum">
    ///    The journal number that will be used by the proposal.
    /// </param>
    protected static server void performProposal_Server(RAssetProposal _rAssetProposal, LedgerJournalTrans _ledgerJournalTrans, LedgerJournalId _journalNum)
    {
        Voucher             lastVoucher;
        LedgerJournalTrans  ledgerJournalTransLocal;
    
        //
        // Find the last voucher number. This is needed when user had done a ctrl-N to
        // create a new line and then deleted the line.
        //
        if (_ledgerJournalTrans.RecId)
        {
            select firstonly Voucher from _ledgerJournalTrans
                order by Voucher desc
                where _ledgerJournalTrans.JournalNum == _journalNum;
    
            lastVoucher = _ledgerJournalTrans.Voucher;
        }
    
        // run the proposal
        _rAssetProposal.runOperation();
    
        // update the voucher totals if reuse the voucher
        if (!_ledgerJournalTrans.Voucher || !_ledgerJournalTrans.RecId)
        {
            // No lines existed where user did the proposal, need to update the
            // totals for the first voucher.
            if (!_ledgerJournalTrans.Voucher)
            {
                select firstonly _ledgerJournalTrans
                    order by Voucher
                    where _ledgerJournalTrans.JournalNum == _journalNum;
            }
            // User was on a new line when doing the proposal, need to update the
            // totals for the voucher on that line.
            else
            {
                _ledgerJournalTrans = LedgerJournalTrans::find(_journalNum, _ledgerJournalTrans.Voucher, false);
            }
        }
        // User was on an existing line when doing the proposal, need to update the
        // total for the next voucher after the last voucher number that existed
        // before doing the proposal
        else
        {
            select firstonly RecId from ledgerJournalTransLocal
                order by Voucher
                where ledgerJournalTransLocal.JournalNum == _journalNum &&
                      ledgerJournalTransLocal.Voucher > lastVoucher;
            if(ledgerJournalTransLocal)
            {
                _ledgerJournalTrans.data(ledgerJournalTransLocal);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmount</Name>
				<Source><![CDATA[
    server client static public AmountCur roundAmount(RAssetStandardId  _assetStandardId,
                                                      RAssetTable       _rAssetTable,
                                                      RAssetTransDate   _transDate,
                                                      AmountCur         _amountCur,
                                                      CurrencyCode      _currencyCode)
    {
        AmountCur    amountCur;
        CurrencyCode journalTransCurrencyCode = RAssetJournal::currencyCode(_assetStandardId, _rAssetTable);
    
        amountCur = CurrencyExchangeHelper::curAmount2CurAmount(_amountCur, _currencyCode, journalTransCurrencyCode, _transDate);
    
        return RAssetTableMethod::roundAmount(_assetStandardId, amountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>