<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProductReceiptSourceDocumentLineItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>SourceDocLineItemProductReceipt</c> class provides the information to handle the
///    distributions and sub-ledger journal account entries for a product receipt line.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(SourceDocumentLine_ProductReceipt), SourceDocumentLine_ProductReceipt::ProductReceiptLine)]
public class ProductReceiptSourceDocumentLineItem extends SourceDocumentLineItem
    implements SourceDocumentLineItemIProductQuantity,
               SourceDocumentLineItemIProduct,
               SourceDocumentLineItemIProductionFlow,
               SourceDocumentLineItemIFinalize,
               SourceDocumentLineItemITermQuantity,
               SourceDocumentLineItemIInventory
{
    VendPackingSlipTrans        vendPackingSlipTrans;
    VendPackingSlipTrans        origVendPackingSlipTrans;
    VendPackingSlipJour         vendPackingSlipJour;
    VendPackingSlipVersion      vendPackingSlipVersion;
    PurchLine                   purchLine;
    InventTable                 inventTable;
    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault calculateDefaultDimension()
    {
        return vendPackingSlipTrans.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        boolean                                     includesTax;
        Qty                                         purchQty = purchLine.PurchQty ? purchLine.PurchQty : 1;

        if ((sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Completed && vendPackingSlipTrans.Qty == origVendPackingSlipTrans.Qty) ||
            sourceDocumentLine.AccountingStatus == SourceDocumentLineAccountingStatus::Finalized || 
            // not existed purchLine means that it is soft deleted
            (ProductReceiptSourceDocLinePurchLineExistsFlight::instance().isEnabled() && !purchLine))
        {
            return SourceDocumentLineProvider::getDistributedAmountMap(sourceDocumentLine);
        }

        // Create map
        SourceDocumentAmountMap sourceDocumentAmountMap = SourceDocumentAmountMap::construct();

        // Do amounts include tax?
        if (purchLine.inclTax())
        {
            includesTax = true;
        }

        Factor factor = vendPackingSlipTrans.Qty / purchQty;

        SourceDocumentLineMatchingList matchingList = SourceDocumentLineMatchingFacade::addSourceDocLineItemToList(this, purchLine);

        Debug::assert(matchingList.elements() == 1);

        factor = factor / (matchingList.elements() ? matchingList.elements() : 1);

        SourceDocumentLineMatchingListEnumerator matchingListEnum = matchingList.getEnumerator();

        while (matchingListEnum.moveNext())
        {
            SourceDocumentLineMatching sourceDocucmentLineMatching = matchingListEnum.current();
            SourceDocumentLineItem matchedSourceDocumentLineItem = sourceDocucmentLineMatching.parmIndependentSourceDocumentLineItem();

            SourceDocumentAmountMapEnumerator matchingAmountMapEnum = matchedSourceDocumentLineItem.parmSourceDocumentAmountMap().getEnumerator();

            while (matchingAmountMapEnum.moveNext())
            {
                SourceDocumentAmount matchingSourceDocumentAmount = matchingAmountMapEnum.currentValue();

                if ((matchingSourceDocumentAmount.parmMonetaryAmount() != MonetaryAmount::TotalDiscount)
                    && (matchingSourceDocumentAmount.parmMonetaryAmount() != MonetaryAmount::Discount
                        && matchingSourceDocumentAmount.parmMonetaryAmount() != MonetaryAmount::PriceAdjustment
                        || !purchLine.ledgerDimensionDiscount())
                        )
                {
                    Amount amount;

                    if (factor
                        && PurchProductReceiptFactorForChargesFlight::instance().isEnabled()
                        && matchingSourceDocumentAmount.parmMonetaryAmount() == MonetaryAmount::Charge
                        && !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                    {
                        amount = CurrencyExchangeHelper::amount(matchingSourceDocumentAmount.parmAmount(), purchLine.CurrencyCode);
                    }
                    else
                    {
                        amount = CurrencyExchangeHelper::amount(matchingSourceDocumentAmount.parmAmount() * factor, purchLine.CurrencyCode);
                    }

                    sourceDocumentAmountMap.insert(SourceDocumentAmount::newFromParameters(this.parmSourceDocumentLine(), amount, matchingAmountMapEnum.currentKey(), includesTax));
                }
            }
        }
        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SourceDocumentLineItem</c> documents a business event.
    /// </summary>
    /// <returns>
    /// true if the <c>SourceDocumentLineItem</c> documents a business event; otherwise, false.
    /// </returns>
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent businessEvent = new BusinessEvent(enumNum(BusinessEvent_ProductReceipt),BusinessEvent_ProductReceipt::ReceiptOfExpensedProducts);

        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMainAccDerivationInputChanged</Name>
				<Source><![CDATA[
    public boolean hasMainAccDerivationInputChanged()
    {
        boolean     hasMainAccDerivationInputChanged;

        if (purchLine.PlanReference != 0)
        {
            hasMainAccDerivationInputChanged = false;
        }
        else
        {
            hasMainAccDerivationInputChanged = true;
        }

        return hasMainAccDerivationInputChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance variables.
    /// </summary>
    /// <param name="_sourceDocumentLineImplementation">
    /// A source document line implementation table.
    /// </param>
    /// <param name="_additionalInformation">
    /// A map to hold buffers of pre initiliazed objects need by the framework to the source document.
    /// </param>
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        vendPackingSlipTrans        = _sourceDocumentLineImplementation.data();
        origVendPackingSlipTrans    = _sourceDocumentLineImplementation.orig();
        vendPackingSlipJour         = vendPackingSlipTrans.vendPackingslipJour();
        purchLine                   = vendPackingSlipTrans.purchLine();
        vendPackingSlipVersion      = VendPackingSlipVersion::findLatest(vendPackingSlipJour.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initOriginSourceDocumentLineItem</Name>
				<Source><![CDATA[
    protected void initOriginSourceDocumentLineItem()
    {
        if (purchLine)
        {
            originSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLineImplementation(purchLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChildSourceDocumentLineItemList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the document graph for distributing child source document lines with their parent source document line information.
    /// </summary>
    protected void initChildSourceDocumentLineItemList()
    {
        SourceDocumentLine      childSourceDocumentLine;

        childSourceDocumentLineItemList = SourceDocumentLineItemList::construct();

        while select childSourceDocumentLine
        where childSourceDocumentLine.SourceDocumentHeader == sourceDocumentLine.SourceDocumentHeader
        && childSourceDocumentLine.ParentSourceDocumentLine == sourceDocumentLine.RecId
        {
            SourceDocumentLineItem childSourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(childSourceDocumentLine);
            childSourceDocumentLineItem.parmParentSourceDocumentLineItem(this);
            childSourceDocumentLineItemList.addEnd(childSourceDocumentLineItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        return  vendPackingSlipVersion.AccountingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategory</Name>
				<Source><![CDATA[
    public Common parmCategory()
    {
        return EcoResCategory::find(vendPackingSlipTrans.ProcurementCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryName</Name>
				<Source><![CDATA[
    public str parmCategoryName()
    {
        return EcoResCategory::find(vendPackingSlipTrans.ProcurementCategory).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventoryDimensionId</Name>
				<Source><![CDATA[
    public InventDimId parmInventoryDimensionId()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return purchLine.InventDimId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public Common parmInventTable()
    {
        if (vendPackingSlipTrans.ItemId && !inventTable.RecId)
        {
            inventTable = InventTable::find(vendPackingSlipTrans.ItemId);
        }

        return inventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDataAreaId</Name>
				<Source><![CDATA[
    public dataAreaId parmItemDataAreaId()
    {
        dataAreaId      dataAreaId;

        if (vendPackingSlipTrans.ItemId)
        {
            dataAreaId = vendPackingSlipTrans.DataAreaId;
        }

        return dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return vendPackingSlipTrans.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLineNum()
    {
        return vendPackingSlipTrans.LineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLotId</Name>
				<Source><![CDATA[
    public InventTransId parmLotId()
    {
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            return purchLine.InventTransId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanReference</Name>
				<Source><![CDATA[
    public LeanProductionFlowReferenceRefRecId parmPlanReference()
    {
        return purchLine.PlanReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity()
    {
        return vendPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityDecimalPlaces</Name>
				<Source><![CDATA[
    public Decimals parmQuantityDecimalPlaces()
    {
        Decimals inventDecimalPlaces;

        inventTable = this.parmInventTable();

        if (inventTable)
        {
            inventDecimalPlaces = InventTable::inventDecimals(vendPackingSlipTrans.ItemId);
        }

        return inventDecimalPlaces;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineFinalizedDate</Name>
				<Source><![CDATA[
    public AccountingDate parmSourceDocLineFinalizedDate()
    {
        VendInvoiceTrans        vendInvoiceTrans;

        select firstonly vendInvoiceTrans
            order by vendInvoiceTrans.RecId desc  // get the last VendInvoiceTrans
            where vendInvoiceTrans.InventTransId == vendPackingSlipTrans.InventTransId;

        return vendInvoiceTrans.vendInvoiceJour().InvoiceDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStocked</Name>
				<Source><![CDATA[
    public TradeStockedProduct parmStocked()
    {
        return vendPackingSlipTrans.StockedProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup parmTaxGroup(TaxGroup _taxGroup = purchLine.TaxGroup)
    {
        purchLine.TaxGroup = _taxGroup;

        return purchLine.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTermQuantity</Name>
				<Source><![CDATA[
    public Qty parmTermQuantity()
    {
        return vendPackingSlipTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return purchLine.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useOriginalDistributionAmount</Name>
				<Source><![CDATA[
    public boolean useOriginalDistributionAmount()
    {
        boolean useOriginalDistributionAmount;

        if (purchLine && purchLine.PurchQty == vendPackingSlipTrans.Qty)
        {
            useOriginalDistributionAmount = true;
        }

        return useOriginalDistributionAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>