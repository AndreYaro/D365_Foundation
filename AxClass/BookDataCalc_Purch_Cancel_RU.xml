<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookDataCalc_Purch_Cancel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookDataCalc_Purch_Cancel_RU extends BookDataCalc_Purch_RU implements BatchRetryable
{
    PurchBookVATProcessLogTable_RU      purchBookVATProcessLogTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>begin</Name>
				<Source><![CDATA[
    protected void begin()
    {
        // there is no super() call
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcLineData</Name>
				<Source><![CDATA[
    protected void calcLineData()
    {
        PurchBookVATProcessLogTrans_RU          logTrans;
        PurchBookVATProcessLogTransOper_RU      logTransOper;
        TmpPurchBookVATProcessLogTrans_RU       tmpLogTrans = salesPurchBookData;
        BookStructVATAmounts_RU                 settledAmounts;
        BookStructSmallVATAmounts_RU            operSettledAmounts;
        recId                                   currentLogTransRecId;
        Map                                     mapOperSettledAmounts = new Map(Types::Container, Types::Class);
        boolean                                 createCancelation;

        while select sum(AmountLiableToVAT), sum(TaxAmount) from logTransOper
            group by RefRecId, TaxCode, DefaultDimension, InventTransId, DocumentType
            where logTransOper.LogTableRefRecId  == purchBookVATProcessLogTable.RecId &&
                  logTransOper.CanceledRefRecId  == 0                                 &&
                  logTransOper.Correct           == NoYes::No                         &&
                  logTransOper.Blocked           == NoYes::No
        {
            if (mapOperSettledAmounts.exists([logTransOper.RefRecId, logTransOper.TaxCode, logTransOper.DefaultDimension,
                 logTransOper.InventTransId, logTransOper.DocumentType]))
            {
                operSettledAmounts = mapOperSettledAmounts.lookup([logTransOper.RefRecId, logTransOper.TaxCode,
                    logTransOper.DefaultDimension, logTransOper.InventTransId, logTransOper.DocumentType]);
            }
            else
            {
                operSettledAmounts = new BookStructSmallVATAmounts_RU();
            }
            operSettledAmounts.addAmounts(logTransOper.amountInclVAT(), logTransOper.AmountLiableToVAT, logTransOper.TaxAmount);
            mapOperSettledAmounts.insert([logTransOper.RefRecId, logTransOper.TaxCode, logTransOper.DefaultDimension,
                logTransOper.InventTransId, logTransOper.DocumentType], operSettledAmounts);
        }

        while select logTransOper
            order by RefRecId
            where logTransOper.LogTableRefRecId  == purchBookVATProcessLogTable.RecId &&
                  logTransOper.CanceledRefRecId  == 0                                 &&
                  logTransOper.Correct           == NoYes::No                         &&
                  logTransOper.Blocked           == NoYes::No
            join logTrans
                where logTrans.RecId    == logTransOper.RefRecId &&
                      logTrans.Reversed == NoYes::No
        {
            if (logTrans.RecId != currentLogTransRecId)
            {
                currentLogTransRecId = logTrans.RecId;

                createCancelation = ! PurchBookVATProcessLogTransOper_RU::findContractorsWithSettlement(logTrans.FactureId,
                                                                                                        logTransOper.TaxCode,
                                                                                                        logTransOper.DefaultDimension,
                                                                                                        logTransOper.InventTransId,
                                                                                                        logTrans.InvoiceRecIdRef,
                                                                                                        logTrans.PaymentRecIdRef,
                                                                                                        logTrans.InvoiceCompany,
                                                                                                        logTrans.PaymentCompany,
                                                                                                        logTrans.SettlementRecId,
                                                                                                        logTrans.SettlementDate,
                                                                                                        logTransOper.DocumentType,
                                                                                                        logTransOper.TransDate,
                                                                                                        logTrans.ProcessingType);
                if (! createCancelation)
                {
                    continue;
                }

                progress.setText(strFmt('%1 %2, %3 %4', "@SYS8079",
                                        logTrans.AccountNum,
                                        "@GLS104802",
                                        logTrans.FactureExternalId));

                settledAmounts = PurchBookVATProcessLogTrans_RU::getLogAmounts(logTrans.RecId, purchBookVATProcessLogTable.RecId, false, false);  // not blocked & not canceled
                tmpLogTrans.clear();
                tmpLogTrans.initFromPBookVATProcessLogTrans(logTrans);
                tmpLogTrans.initFromPurchBookVATProcessLogTable(purchBookVATProcessLogTable);
                tmpLogTrans.SettledAmounts = settledAmounts.pack();
                tmpLogTrans.insert();
            }

            if (createCancelation)
            {
                operSettledAmounts = mapOperSettledAmounts.lookup([logTransOper.RefRecId, logTransOper.TaxCode, logTransOper.DefaultDimension,
                    logTransOper.InventTransId, logTransOper.DocumentType]);

                tmpProcessLogTransOper.clear();
                tmpProcessLogTransOper.initFromPBookVATProcessLogTransOper(logTransOper);
                tmpProcessLogTransOper.initFromPurchBookVATProcessLogTable(purchBookVATProcessLogTable);
                tmpProcessLogTransOper.initFromTmpPurchBookVATProcessLogTrans(tmpLogTrans);
                tmpProcessLogTransOper.SettledAmounts = operSettledAmounts.pack();
                tmpProcessLogTransOper.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        RestoredVATLogTable_RU  restoredVATLogTable;
        boolean                 ret                 = super();
        TransDate               fromDateLocal       = conPeek(BookDataCalc_RU::datePeriodBook(fromDate), 1);
        TransDate               toDateLocal         = conPeek(BookDataCalc_RU::datePeriodBook(toDate), 2);

        select firstonly restoredVATLogTable
            index hint PeriodDateIdx
            where restoredVATLogTable.TransDate >= fromDateLocal &&
                  restoredVATLogTable.TransDate <= toDateLocal   &&
                  restoredVATLogTable.Approved;

        if (restoredVATLogTable)
        {
            ret = checkFailed("@GLS114200");
        }

        if ( ! ret)
        {
            throw error("@GLS101992");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>end</Name>
				<Source><![CDATA[
    protected void end()
    {
        // there is no super() call
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchNextRecord</Name>
				<Source><![CDATA[
    protected boolean fetchNextRecord()
    {
        return recordSortedList.next(purchBookVATProcessLogTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInfologPrefix</Name>
				<Source><![CDATA[
    protected InfologText getInfologPrefix()
    {
        return BookDataCalc_Purch_Cancel_RU::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        TmpPurchBookVATProcessLogTrans_RU logTrans;

        processMode = PurchBookVATProcessCancelType_RU::Cancel;

        this.initRecordSortedList();

        salesPurchBookData = logTrans;

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00021, funcName());

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmountAdjust</Name>
				<Source><![CDATA[
    private void initAmountAdjust(PurchBookProcessingType_RU _processingType)
    {
        PurchBookVATProcessLogTable_RU      localLogTable;
        PurchBookVATProcessLogTrans_RU      localLogTrans;
        PurchBookVATProcessLogTransOper_RU  localLogTransOper;

        while select localLogTable
            where localLogTable.TransDate  >= fromDate &&
                  localLogTable.TransDate  <= toDate   &&
                  localLogTable.ActionType == PurchBookVATProcessCancelType_RU::Process
            exists join localLogTransOper
                where localLogTransOper.LogTableRefRecId  == localLogTable.RecId &&
                      localLogTransOper.CanceledRefRecId  == 0                   &&
                      localLogTransOper.Correct           == NoYes::No
            exists join localLogTrans
                where localLogTrans.RecId           == localLogTransOper.RefRecId          &&
                      localLogTrans.ProcessingType  == _processingType                     &&
                      localLogTrans.TransType       == SalesPurchBookTransType_RU::SumDiff &&
                      localLogTrans.CorrectedPeriod                                        &&
                      localLogTrans.Reversed        == NoYes::No
        {
            recordSortedList.ins(localLogTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedList</Name>
				<Source><![CDATA[
    protected void initRecordSortedList()
    {
        PurchBookVATProcessLogTable_RU      localLogTable;
        PurchBookVATProcessLogTrans_RU      localLogTrans;
        PurchBookVATProcessLogTransOper_RU  localLogTransOper;
        PurchBookProcessingType_RU          processingType = RestoredVATLogTable_RU::checkApproved(toDate) ?
                                                             PurchBookProcessingType_RU::ExpConfirmation   :
                                                             PurchBookProcessingType_RU::Standard;

        recordSortedList = new RecordSortedList(tableNum(PurchBookVATProcessLogTable_RU));

        recordSortedList.sortOrder(fieldNum(PurchBookVATProcessLogTable_RU, TransDate),
                                   fieldNum(PurchBookVATProcessLogTable_RU, Voucher));

        if (processAmountAdj && VendParameters::find().AmountDiffBookCorrection_RU)
        {
            this.initAmountAdjust(processingType);
        }
        else
        {
            while select localLogTable
                where localLogTable.TransDate  >= fromDate &&
                      localLogTable.TransDate  <= toDate   &&
                      localLogTable.ActionType == PurchBookVATProcessCancelType_RU::Process
                exists join localLogTransOper
                    where localLogTransOper.LogTableRefRecId == localLogTable.RecId &&
                          localLogTransOper.CanceledRefRecId == 0                   &&
                          localLogTransOper.Correct          == NoYes::No
                exists join localLogTrans
                    where localLogTrans.RecId          == localLogTransOper.RefRecId &&
                          localLogTrans.ProcessingType == processingType             &&
                          localLogTrans.Reversed       == NoYes::No
            {
                recordSortedList.ins(localLogTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInfologPrefix</Name>
				<Source><![CDATA[
    protected void setInfologPrefix()
    {
        setPrefix(BookDataCalc_Purch_Cancel_RU::description());
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;

        ret = super(_packedClass);

        bookTableMode = false;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS101193" + "@GLS101637" + strLwr("@GLS101168");
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>