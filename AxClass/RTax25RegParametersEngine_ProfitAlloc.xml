<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegParametersEngine_ProfitAlloc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RTax25RegParametersEngine_ProfitAlloc</c> used for working with profit tax allocation register parameters.
/// </summary>
/// <remarks>
/// The class used to create register parameters, lookup them and validate entered data.
/// </remarks>
class RTax25RegParametersEngine_ProfitAlloc extends RTax25RegParametersEngine
{
    #define.parameterSequences(1)
    #define.parameterAssetType(2)
    #define.parameterEmplData(3)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkType</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method checks enum values entered as strings to register parameters.
    /// </summary>
    /// <param name="_parameter">
    ///  Enum values as string.
    /// </param>
    /// <param name="_enumNum">
    ///  A enum id, which is used to validate entered values.
    /// </param>
    /// <returns>
    ///  True, if validation suceed; otherwise false.
    /// </returns>
    private boolean checkType(NotesLine _parameter, int _enumNum)
    {
        Range           line;
        SysDictEnum     dictEnum = new SysDictEnum(_enumNum);
        boolean         ret      = true;
        container       contain;
        Counter         containLen, i = 1;
        ;
    
    
        contain     = RTax25RegParametersEngine::parameters2Con(_parameter);
        containLen  = conlen(contain);
        do
        {
            line = strRem(strltrim(strrtrim(conpeek(contain,i))), '"');
            if (line && line != dictEnum.value2Name(dictEnum.name2Value(line)))
            {
                ret = checkFailed("@SYS68284");
                break;
            }
            i++;
        }
        while (i <= containLen);
    
        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method performs lookup on register parameters according to parameter data types.
    /// </summary>
    /// <param name="_lookupCtrl">
    ///  A control, at which lookup performed.
    /// </param>
    #localMacro.ChannelTypeRange
        strFmt("((ChannelType != RTax25StdChannelType::Register)  || " +
                "((ChannelType == RTax25StdChannelType::Register) && " +
                 "(ChannelId == \"\%1\")))", %1)
    #endMacro
    public void lookup(FormStringControl _lookupCtrl)
    {
        Args                    args;
        RTax25RegisterType      registerType = RTax25RegisterTable::findRegisterId(registerParameters.RegisterId).RegisterType;
        SysTableLookup          sysTableLookup;
        str                     value;
        Query                   query = new Query();
        ;
    
        switch (registerParameters.ParameterCode)
        {
            case #parameterSequences:
                sysTableLookup = SysTableLookup::newParameters(tablenum(RTax25StdSeq), _lookupCtrl);
    
                value = #ChannelTypeRange(regType.registerId());
    
                query.addDataSource(tablenum(RTax25StdSeq)).addRange(fieldnum(RTax25StdSeq, ChannelType)).value(value);
    
                sysTableLookup.addLookupfield(fieldnum(RTax25StdSeq, SeqNum));
                sysTableLookup.addLookupfield(fieldnum(RTax25StdSeq, Description));
    
                sysTableLookup.parmQuery(query);
                sysTableLookup.performFormLookup();
            break;
            case #parameterAssetType:
                args    = new Args(formstr(SysLookup));
                switch (registerType)
                {
                    case RTax25RegisterType::ProfitAllocation:
                         args.parm(int2str(enumnum(RAssetType)));
                         break;
                }
                formRun = classfactory.formRunClass(args);
                formRun.init();
                _lookupCtrl.performFormLookup(formRun);
            break;
            case #parameterEmplData:
                args    = new Args(formstr(SysLookup));
                switch (registerType)
                {
                    case RTax25RegisterType::ProfitAllocation:
                         args.parm(int2str(enumnum(RTax25EmplDataCalcType)));
                         break;
                }
                formRun = classfactory.formRunClass(args);
                formRun.init();
                _lookupCtrl.performFormLookup(formRun);
                _lookupCtrl.replaceOnLookup(true);
            break;
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>lookupEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines, if lookup button enabled for the register parameters.
    /// </summary>
    /// <returns>
    ///  Always true for this register.
    /// </returns>
    public boolean lookupEnabled()
    {
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>specificParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Determines, if specific parameters must be set up for this register.
    /// </summary>
    /// <returns>
    ///  Always true for this register.
    /// </returns>
    public boolean specificParm()
    {
        return true;
    }
]]></Source>
			</Method>
			<Method>
				<Name>specificParmCall</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Goes to register specific parameters set up.
    /// </summary>
    public void specificParmCall()
    {
        Args   args = new Args();
        ;
        args.caller(this);
        args.record(RTax25RegisterTable::findRegisterId(regType.registerId()));
    
        new MenuFunction(menuitemdisplaystr(RTax25StdSeq), MenuItemType::Display).run(args);
    
    }
]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Validates parameter values entered by user.
    /// </summary>
    /// <returns>
    ///  True, if validation succeed, otherwise false.
    /// </returns>
    public boolean validateWrite()
    {
        boolean ret = true;
    
        registerParameters = registerParametersDs.cursor();
    
        if (! registerParameters.Parameter)
            return true;
    
        switch (registerParameters.ParameterCode)
        {
            case #parameterSequences :
                if (! RTax25RegParametersEngine_Std::parameters2SeqList(registerParameters.Parameter))
                    return false;
                break;
            case #parameterAssetType :
                ret = this.checkType(registerParameters.Parameter, enumnum(RAssetType));
                break;
            case #parameterEmplData  :
                ret = this.checkType(registerParameters.Parameter, enumnum(RTax25EmplDataCalcType));
                break;
        }
    
        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>