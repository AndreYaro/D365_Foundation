<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionTransformer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections.Specialized;
using System.Reflection;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;

/// <summary>
/// This class <c>RetailTransactionTransformer</c> is used to transform retail transactions into order info object.
/// </summary>
public class RetailTransactionTransformer
{
    #ISOCountryRegionCodes

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ConvertTransactionToCustomerOrderInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert a transaction data into customer order info.
    /// </summary>
    /// <param name = "transactionTable">retail transaction to be converted.</param>
    /// <returns>An object of customer order info.</returns>
    public static CustomerOrderInfo ConvertTransactionToCustomerOrderInfo(RetailTransactionTable transactionTable)
    {
        RetailStatementPostingLogger::readTransactionStart(transactionTable);

        CustomerOrderInfo customerOrderInfo = new CustomerOrderInfo();

        customerOrderInfo.ContractVersion = CustomerOrderContractVersionHelper::GetLatestContractVersion();

        // Read transaction header.
        RetailTransactionTransformer::ReadTransactionHeader(customerOrderInfo, transactionTable);

        RetailTransactionTransformer::ReadTransactionSalesTrans(customerOrderInfo.Items, transactionTable);

        RetailTransactionTransformer::ReadDiscountCodes(customerOrderInfo.DiscountCodes, transactionTable);

        RetailTransactionTransformer::ReadTransactionCharges(customerOrderInfo.Charges, transactionTable);

        // Don't read payment info for cash & carry transaction as the payment is posted right before the sales order is invoiced.

        RetailTransactionTransformerContext context = RetailTransactionTransformerContext::current();

        if (transactionTable.type != RetailTransactionType::Sales || (context != null && context.parmReadPaymentTrans()))
        {
            RetailTransactionTransformer::ReadTransactionPaymentTrans(customerOrderInfo.Payments, transactionTable);
        }

        if (!customerOrderInfo.CustomerAccount)
        {
            customerOrderInfo.CustomerAccount = RetailStoreTable::find(transactionTable.store).DefaultCustAccount;
        }
        else
        {
            // Find or create customer created in async mode
            RetailAsyncCustomer asyncCust;
            select firstonly forupdate asyncCust
            index hint CustAccountAsyncIdx
            where asyncCust.CustAccountAsync == customerOrderInfo.CustomerAccount;

            if (asyncCust)
            {
                RetailTransactionServiceCustomer::createAsyncCustomerWithAddresses(asyncCust);

                customerOrderInfo.CustomerAccount = asyncCust.CustAccount;
            }
            else
            {
                RetailAsyncCustomerCreator customerCreator = new RetailAsyncCustomerCreator();
                customerCreator.ProcessAllAsyncCustomerV2Records();

                str associatedCustAccountNumber = RetailTransactionServiceCustomer::getAccountNumberAssociatedToAsyncCustomer(customerOrderInfo.CustomerAccount);
                if (!System.String::IsNullOrWhiteSpace(associatedCustAccountNumber))
                {
                    // Replace the async customer GUID with the non-async customer account number, if available.
                    customerOrderInfo.CustomerAccount = associatedCustAccountNumber;
                }
            }
        }

        RetailStatementPostingLogger::readTransactionFinish(transactionTable);

        RetailTransactionTransformer::ReadAffiliation(customerOrderInfo.Affiliations, transactionTable);

        return customerOrderInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreateLogisticsElectronicAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates Electronic Address.
    /// </summary>
    /// <param name="parentLocationId">
    /// Parent Location Id.
    /// </param>
    /// <param name="methodType">
    /// Represents LogisticsElectronicAddressMethodType.
    /// </param>
    /// <param name="locator">
    /// The value of the LogisticsElectronicAddressLocator.
    /// </param>
    private static void CreateLogisticsElectronicAddress(int64 parentLocationId, LogisticsElectronicAddressMethodType methodType, LogisticsElectronicAddressLocator locator)
    {
        LogisticsLocation location;
        LogisticsElectronicAddress electronicAddress;
        location.initValue();
        location.ParentLocation = parentLocationId;
        location.IsPostalAddress = NoYes::No;
        location.insert();

        electronicAddress.initValue();
        electronicAddress.Type = methodType;
        electronicAddress.Location = location.RecId;
        electronicAddress.Locator = locator;
        electronicAddress.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAddressLineFromTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetch the address records corresponding to specified sales lines of the provided transaction.
    /// </summary>
    /// <param name="transactionTable">
    /// The transaction that needs to be looked up.
    /// </param>
    /// <param name="salesLineNum">
    /// The sale line number associated with the address line. (optional)
    /// </param>
    /// <returns>
    /// RetailTransactionAddressTrans for the specified sales line.
    /// </returns>
    /// <remarks>
    /// A sales line number with the value of zero indicates that the address at the order header level should be returned.
    /// </remarks>
    [Hookable(false), Wrappable(false)]
    internal static RetailTransactionAddressTrans getAddressLineFromTransaction(
                                                                RetailTransactionTable transactionTable,
                                                                LineNum salesLineNum = 0 /* By default, only the address at the order header is fetched. */
                                                              )
    {
        RetailTransactionAddressTrans      addressTrans;

        select firstOnly
            RecId,
            Street,
            ZipCode,
            City,
            CountryRegionId,
            State,
            County,
            StreetNumber,
            Store,
            DeliveryName,
            SaleLineNum,
            DistrictName,
            Phone,
            Email,
            AttentionToAddressLine,
            BuildingCompliment
        from addressTrans
            where addressTrans.transactionId == transactionTable.transactionId
            && addressTrans.store == transactionTable.store
            && addressTrans.terminal == transactionTable.terminal
            && addressTrans.saleLineNum == salesLineNum
            && addressTrans.Channel == transactionTable.Channel;

        return addressTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsPostalAddressOfStore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetch the logisitics postal address record id of the provided store.
    /// </summary>
    /// <param name="storeNumber">
    /// Store number to look up.
    /// </param>
    /// <returns>
    /// Logistics postal address RecordId.
    /// </returns>
    private static LogisticsPostalAddressRecId getLogisticsPostalAddressOfStore(RetailStoreId storeNumber)
    {
        RetailStoreTable            retailStoreTable;
        OMOperatingUnit             omOperatingUnit;
        OMOperatingUnitView         omOperatingUnitView;
        DirPartyTable               dirPartyTable;
        LogisticsPostalAddress      logisticsPostalAddress;

        select RecId from retailStoreTable where retailStoreTable.StoreNumber == storeNumber
            join RecId from omOperatingUnit where omOperatingUnit.RecId == retailStoreTable.OMOperatingUnitID
            join RecId from omOperatingUnitView where omOperatingUnitView.RecId == omOperatingUnit.RecId
            join RecId from dirPartyTable where  dirPartyTable.PartyNumber == omOperatingUnitView.PartyNumber
            join RecId from logisticsPostalAddress where logisticsPostalAddress.Location == dirPartyTable.PrimaryAddressLocation;

        return logisticsPostalAddress.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryPostalAddress</Name>
				<Source><![CDATA[
    private static LogisticsPostalAddressRecId getDeliveryPostalAddress(RetailTransactionTable transactionTable, CustDlvTermId dlvMode, LineNum salesLineNum = 0)
    {
        LogisticsPostalAddressRecId logisticsPostalAddressRecId;
        RetailChannelTable channel;
        boolean isDefaultCustomer;

        if (transactionTable.transactionId)
        {
            RetailTransactionAddressTrans addressTrans = RetailTransactionTransformer::getAddressLineFromTransaction(transactionTable, salesLineNum);;

            if (RetailDlvMode::isPickupDeliveryMode(dlvMode))
            {
                // Find location of store.
                logisticsPostalAddressRecId = RetailTransactionTransformer::getLogisticsPostalAddressOfStore(addressTrans.store);
            }
        }

        return logisticsPostalAddressRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read transaction header into customer order info object.
    /// </summary>
    /// <param name = "customerOrderInfo">Customer order info object.</param>
    /// <param name = "transactionTable">Retail transaction.</param>
    private static void ReadTransactionHeader(CustomerOrderInfo customerOrderInfo, RetailTransactionTable transactionTable)
    {
        customerOrderInfo.ChannelRecordId = int642Str(transactionTable.Channel);
        customerOrderInfo.Id = transactionTable.salesOrderId;
        customerOrderInfo.QuotationId = transactionTable.salesOrderId;
        customerOrderInfo.CustomerAccount = transactionTable.custAccount;
        customerOrderInfo.CurrencyCode = transactionTable.currency;
        customerOrderInfo.WarehouseId = transactionTable.InventLocationId;
        customerOrderInfo.DeliveryMode = transactionTable.DlvMode;
        customerOrderInfo.SalespersonStaffId = transactionTable.staff;
        customerOrderInfo.CommissionSalesGroup = transactionTable.SalesGroup;
        customerOrderInfo.LanguageId = transactionTable.LanguageId;

        RetailTransactionTransformerContext context = RetailTransactionTransformerContext::current();
        if (context != null && context.parmUseTaxIncludedInPriceFlag())
        {
            if (transactionTable.IsTaxIncludedInPrice)
            {
                customerOrderInfo.IsTaxIncludedInPrice = 'True';
            }
            else
            {
                customerOrderInfo.IsTaxIncludedInPrice = 'False';
            }
        }

        customerOrderInfo.IsTaxExemptedForPriceInclusive = transactionTable.IsTaxExemptedForPriceInclusive;
        customerOrderInfo.ExpiryDateString = date2Str(transactionTable.QuotationExpiryDate, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4);

        // If ReceiptDate is given, use the receipt date and if not, use the business date.
        TransDate receiptDateRequested = transactionTable.ReceiptDateRequested == dateNull() ? transactionTable.businessDate : transactionTable.ReceiptDateRequested;
        customerOrderInfo.RequestedDeliveryDateString = date2Str(receiptDateRequested, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4);

        if (transactionTable.type == RetailTransactionType::Sales)
        {
            customerOrderInfo.RoundingDifference = -(transactionTable.grossAmount + transactionTable.paymentAmount);
            // check if rounding difference is allowed.
            if (customerOrderInfo.RoundingDifference != 0)
            {
                RetailStoreTable  storeTable = RetailStoreTable::findRecId(transactionTable.Channel);
                if (storeTable)
                {
                    if (!storeTable.RoundingAccountLedgerDimension)
                    {
                        throw error(strfmt("@RET4158", storeTable.StoreNumber));
                    }

                    if (storeTable.MaxRoundingAmount && (abs(customerOrderInfo.RoundingDifference) > storeTable.MaxRoundingAmount))
                    {
                        throw error(strfmt("@RET4159", customerOrderInfo.RoundingDifference, storeTable.MaxRoundingAmount, storeTable.StoreNumber));
                    }
                }
            }
        }

        if (transactionTable.LogisticsPostalAddress)
        {
            customerOrderInfo.AddressRecordId = int642Str(transactionTable.LogisticsPostalAddress);
        }
        else if (transactionTable.type != RetailTransactionType::Sales)
        {
            LogisticsPostalAddressRecId logisticsPostalAddressRecId = RetailTransactionTransformer::getDeliveryPostalAddress(transactionTable, transactionTable.DlvMode);
            customerOrderInfo.AddressRecordId = int642Str(logisticsPostalAddressRecId);

            RetailTransactionAddressTrans retailTransactionAddressTrans;
            retailTransactionAddressTrans = RetailTransactionTransformer::getAddressLineFromTransaction(transactionTable);

            AddressInfo addressInfo = new AddressInfo();

            addressInfo.AttentionToAddressLine = retailTransactionAddressTrans.AttentionToAddressLine;
            addressInfo.BuildingCompliment = retailTransactionAddressTrans.BuildingCompliment;
            addressInfo.City = retailTransactionAddressTrans.City;
            addressInfo.County = retailTransactionAddressTrans.County;
            addressInfo.DistrictName = retailTransactionAddressTrans.DistrictName;
            addressInfo.Email = retailTransactionAddressTrans.Email;
            addressInfo.IsAsyncAddress = NoYes::No;
            addressInfo.Name = retailTransactionAddressTrans.DeliveryName;
            addressInfo.PhoneNumber = retailTransactionAddressTrans.Phone;
            addressInfo.State = retailTransactionAddressTrans.State;
            addressInfo.Street = retailTransactionAddressTrans.Street;
            addressInfo.StreetNumber = retailTransactionAddressTrans.StreetNumber;
            addressInfo.ThreeLetterISORegionName = retailTransactionAddressTrans.CountryRegionId;
            addressInfo.ZipCode = retailTransactionAddressTrans.ZipCode;

            customerOrderInfo.ShippingAddress = addressInfo;
        }

        customerOrderInfo.Email = transactionTable.receiptEmail;

        customerOrderInfo.StoreId = transactionTable.store;
        customerOrderInfo.TerminalId = transactionTable.terminal;
        customerOrderInfo.ChannelReferenceId = transactionTable.ChannelReferenceId;
        customerOrderInfo.InitialReceiptId = transactionTable.receiptId;

        customerOrderInfo.TotalManualDiscountAmount = transactionTable.TotalManualDiscountAmount;
        customerOrderInfo.TotalManualDiscountPercentage = (transactionTable.TotalManualDiscountPercentage || !transactionTable.netAmount) ?
                                                                transactionTable.TotalManualDiscountPercentage :
                                                                transactionTable.TotalManualDiscountAmount / transactionTable.netAmount;

        customerOrderInfo.Comment = transactionTable.comment;
        customerOrderInfo.CustomerRequisition = transactionTable.CustPurchaseOrder;

        utcdatetime transDateTime = DateTimeUtil::newDateTime(transactionTable.transDate, transactionTable.transTime);
        customerOrderInfo.LocalHourOfDay = DateTimeUtil::hour(transDateTime) + 1;
        customerOrderInfo.OriginalTransactionTime = transDateTime;

        // If it is not defined, we should stick with old behavior
        if (transactionTable.IsDepositOverridden == UnknownNoYes::Unknown)
        {
            customerOrderInfo.PrepaymentAmountOverridden = true;
        }
        else
        {
            customerOrderInfo.PrepaymentAmountOverridden = (transactionTable.IsDepositOverridden == UnknownNoYes::Yes);
        }

        customerOrderInfo.TransactionId = transactionTable.transactionId;
        customerOrderInfo.LoyaltyCardId = transactionTable.loyaltyCardId;
        customerOrderInfo.SourceId = transactionTable.SourceId;
        customerOrderInfo.IsPriceOverride = transactionTable.PriceOverride;
        customerOrderInfo.IsFTCExempt = transactionTable.FTCExempt;
        customerOrderInfo.IsCatalogUpSellShown = transactionTable.CatalogUpSellShown;
        customerOrderInfo.IsContinuityOrder = transactionTable.ContinuityOrder;
        customerOrderInfo.IsContinuityChild = transactionTable.ContinuityChild;
        customerOrderInfo.ContinuityLineEval = transactionTable.ContinuityLineEval;
        customerOrderInfo.IsInstallmentOrderSubmitted = transactionTable.InstallmentOrderSubmitted;
        customerOrderInfo.IsInstallmentBillingPrompt = transactionTable.InstallmentBillingPrompt;
        customerOrderInfo.OutOfBalanceReleaseType = transactionTable.OutOfBalanceReleaseType;
        customerOrderInfo.PaymentOutOfBalanceType = transactionTable.PaymOutOfBalanceType;
        customerOrderInfo.AllocationPriority = transactionTable.AllocationPriority;

        // Read SalesAgreement info if exists.
        customerOrderInfo.SalesAgreementRecordId = RetailTransactionTransformer::getSalesAgreementRecordIdOnTransactionHeader(transactionTable);

        customerOrderInfo.BusinessDateString = date2Str(transactionTable.businessDate, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4);

        if (transactionTable.type == RetailTransactionType::Sales || !RetailOrdersFeatureControl::skipLinkStatementIdForAsyncOrderFeatureEnabled())
        {
            customerOrderInfo.StatementId = transactionTable.statementId;
        }

        customerOrderInfo.NumberOfItems = transactionTable.numberOfItems;
        customerOrderInfo.NumberOfItemLines = transactionTable.numberOfItemLines;
        customerOrderInfo.NetAmount = -transactionTable.netAmount;
        customerOrderInfo.GrossAmount = -transactionTable.grossAmount;
        customerOrderInfo.PaymentAmount = transactionTable.paymentAmount;
        customerOrderInfo.DiscountAmount = transactionTable.discAmount;
        customerOrderInfo.DataAreaId = transactionTable.DataAreaId;

        // -1 denotes that the header is the parent
        RetailTransactionTransformer::ReadInfocodeLines(customerOrderInfo.ReasonCodeLines, -1, RetailInfocodeTransType::Header, transactionTable);
        RetailTransactionTransformer::ReadInfocodeLines(customerOrderInfo.ReasonCodeLines, -1, RetailInfocodeTransType::Affiliation, transactionTable);

        PropertyInfo propertyInfo = customerOrderInfo.GetType().GetProperty(RetailTransactionServiceOrders::PropertyTaxCalculationType);
        if (propertyInfo != null)
        {
            propertyInfo.SetValue(customerOrderInfo, transactionTable.TaxCalculationType);
        }

        RetailTransactionTransformer::ReadTaxInformation(customerOrderInfo.Taxes, transactionTable);

        // Read notes
        RetailTransactionTransformerHelper::ReadTransactionNotes(customerOrderInfo.Notes, transactionTable.transactionId, transactionTable.terminal, transactionTable.store, transactionTable.Channel);

        //Read attributes
        if (RetailAttributesOnNonAggregatedTransactionsFlight::instance().isEnabled())
        {
            RetailTransactionTransformerHelper::ReadTransactionAttributes(customerOrderInfo.AttributeValues, transactionTable.transactionId, transactionTable.terminal, transactionTable.store, transactionTable.Channel, 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadTransactionPaymentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read transaction payment trans into customer order info.
    /// </summary>
    /// <param name = "paymentInfoCollection">Payment info collection.</param>
    /// <param name = "transactionTable">Transaction to read payment info from.</param>
    public static void ReadTransactionPaymentTrans(PaymentInfoCollection paymentInfoCollection, RetailTransactionTable transactionTable)
    {
        Map paymentTransMap;

        void updateTenderInfo(container _key, AmountCur _amount, AmountCur _authorizedAmount, LineNum _lineNum)
        {
            AmountCur amountCur;
            AmountCur authorizedAmount;
            if (_amount || _authorizedAmount)
            {
                if (paymentTransMap.exists(_key))
                {
                    [amountCur, authorizedAmount] = paymentTransMap.lookup(_key);
                    paymentTransMap.remove(_key);
                }
                amountCur += _amount;
                authorizedAmount += _authorizedAmount;
                paymentTransMap.insert(_key, [amountCur, authorizedAmount, _lineNum]);
            }
        }

        paymentTransMap = new Map(Types::Container, Types::Container);

        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionPaymentTrans));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, currency));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, amountCur));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, authorizedAmount));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, tenderType));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, cardTypeId));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, isPrepayment));

        // Flight is enabled add filed to get data for paymentCaptureToken .
        if (RetailSavePaymentCaptureTokenFiledValueInCustomerOrderPropertyFlight::instance().isEnabled())
        {
            primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, paymentCaptureToken));
        }

        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, paymentAuthorization));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, paymentCardToken));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, IsPaymentCaptured));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, TransactionStatus));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, ExchRate));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, giftCardId));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, loyaltyCardId));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, creditVoucherId));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, Channel));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPaymentTrans, lineNum));

        query = RetailTransactionTransformer::buildQueryFilterByTransaction(query, primaryDataSource, transactionTable);

        QueryRun qrPayment = new QueryRun(query);
        while (qrPayment.next())
        {
            RetailTransactionPaymentTrans   paymentTrans = qrPayment.getNo(1);

            RetailTenderLineStatus tenderLineStatus = RetailTransactionTransformer::computeTenderLineStatus(paymentTrans.TransactionStatus, paymentTrans.IsPaymentCaptured);

            if (RetailStoreTenderTypeTable::find(transactionTable.Channel, paymentTrans.tenderType))
            {
                container paymentContainer;

                // Flight is enabled set paymentCaptureToken field value in customer order property.
                if (RetailSavePaymentCaptureTokenFiledValueInCustomerOrderPropertyFlight::instance().isEnabled())
                {
                    paymentContainer = [paymentTrans.currency, paymentTrans.tenderType, paymentTrans.cardTypeId, paymentTrans.isPrepayment,
                    paymentTrans.paymentAuthorization, paymentTrans.paymentCardToken, paymentTrans.IsPaymentCaptured, enum2int(tenderLineStatus),
                    paymentTrans.exchRate, paymentTrans.giftCardId, paymentTrans.loyaltyCardId, paymentTrans.creditVoucherId, paymentTrans.Channel,
                    paymentTrans.paymentCaptureToken];
                }
                else
                {
                    paymentContainer = [paymentTrans.currency, paymentTrans.tenderType, paymentTrans.cardTypeId, paymentTrans.isPrepayment,
                    paymentTrans.paymentAuthorization, paymentTrans.paymentCardToken, paymentTrans.IsPaymentCaptured, enum2int(tenderLineStatus),
                    paymentTrans.exchRate, paymentTrans.giftCardId, paymentTrans.loyaltyCardId, paymentTrans.creditVoucherId, paymentTrans.Channel];
                }

                updateTenderInfo(paymentContainer, paymentTrans.amountCur, paymentTrans.AuthorizedAmount, paymentTrans.lineNum);
            }
            else
            {
                throw error(strFmt("@Retail:RetailPaymentMethodNotFound", paymentTrans.tenderType, RetailChannelTable::findByRecId(transactionTable.Channel).RetailChannelId));
            }
        }

        MapIterator paymentsIterator = new MapIterator(paymentTransMap);
        while (paymentsIterator.more())
        {
            PaymentInfo paymentInfo = new PaymentInfo();

            // Flight is enabled set paymentCaptureToken field value in customer order property.
            if (RetailSavePaymentCaptureTokenFiledValueInCustomerOrderPropertyFlight::instance().isEnabled())
            {
                [paymentInfo.Currency, paymentInfo.PaymentType,  paymentInfo.CardType, paymentInfo.Prepayment, paymentInfo.CreditCardAuthorization,
                paymentInfo.CreditCardToken, paymentInfo.PaymentCaptured, paymentInfo.PaymentStatusValue, paymentInfo.ExchangeRate,
                paymentInfo.GiftCardId, paymentInfo.LoyaltyCardId, paymentInfo.CreditMemoId, paymentInfo.ChannelRecordId,
                paymentInfo.CreditCardCaptureToken, paymentInfo.LineNum] = paymentsIterator.key();
            }
            else
            {
                [paymentInfo.Currency, paymentInfo.PaymentType,  paymentInfo.CardType, paymentInfo.Prepayment, paymentInfo.CreditCardAuthorization,
                paymentInfo.CreditCardToken, paymentInfo.PaymentCaptured, paymentInfo.PaymentStatusValue, paymentInfo.ExchangeRate,
                paymentInfo.GiftCardId, paymentInfo.LoyaltyCardId, paymentInfo.CreditMemoId, paymentInfo.ChannelRecordId, paymentInfo.LineNum] = paymentsIterator.key();
            }

            [paymentInfo.Amount, paymentInfo.AuthorizedAmount, paymentInfo.LineNum] = paymentsIterator.value();

            RetailTransactionTransformer::ReadInfocodeLines(paymentInfo.ReasonCodeLines, paymentInfo.LineNum, RetailInfocodeTransType::Payment, transactionTable);

            if (paymentInfo.Amount != 0 || paymentInfo.AuthorizedAmount != 0)
            {
                paymentInfoCollection.Add(paymentInfo);
            }

            paymentsIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>computeTenderLineStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Computes the tender line status based on the entry status and isPaymentCaptured field.
    /// </summary>
    /// <param name = "entryStatus">The entry status.</param>
    /// <param name = "isPaymentCaptured">The flag that indicates whether a payment was captured.</param>
    /// <returns>The tender line status.</returns>
    private static RetailTenderLineStatus computeTenderLineStatus(RetailEntryStatus entryStatus, RetailPaymentStatus isPaymentCaptured)
    {
        RetailTenderLineStatus tenderLineStatus = RetailTenderLineStatus::None;

        if (isPaymentCaptured == NoYes::Yes)
        {
            tenderLineStatus = RetailTenderLineStatus::Committed;
        }
        else
        {
            // If payment is not captured, determine tender line status based on entry status.
            switch(entryStatus)
            {
                case RetailEntryStatus::None:
                    tenderLineStatus = RetailTenderLineStatus::PendingCommit;
                    break;
                case RetailEntryStatus::Voided:
                    tenderLineStatus = RetailTenderLineStatus::Voided;
                    break;
                default:
                    tenderLineStatus = RetailTenderLineStatus::None;
            }
        }

        return tenderLineStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadDiscountCodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read all discount codes for the specified transaction.
    /// </summary>
    /// <param name="discountCodesCollection">
    /// Collection of discount code string.
    /// </param>
    /// <param name="transactionTable">
    /// Retail transaction table entry to read discount code for.
    /// </param>
    private static void ReadDiscountCodes(StringCollection discountCodesCollection, RetailTransactionTable transactionTable)
    {
        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionDiscountTrans));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, DiscountCode));
        query = RetailTransactionTransformer::buildQueryFilterByTransaction(query, primaryDataSource, transactionTable);

        QueryRun qrDiscountCode = new QueryRun(query);
        while (qrDiscountCode.next())
        {
            // collect any non-empty discount codes on the transaction
            RetailTransactionDiscountTrans discountTrans = qrDiscountCode.getNo(1);

            if (discountTrans.DiscountCode)
            {
                discountCodesCollection.Add(discountTrans.DiscountCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadTransactionCharges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read charge info for the specified transaction.
    /// </summary>
    /// <param name="chargeInfoColloection">
    /// Collection of charge info.
    /// </param>
    /// <param name = "transactionTable">
    /// Retail transaction record.
    /// </param>
    /// <param name = "salesTrans">
    /// Retail transaction sales trans record, null if only filter by RetailTransactionTable record.
    /// </param>
    /// <param name = "filterBySaleTrans">
    /// If filter by retail transaction sales trans.
    /// </param>
    /// <param name = "_isGiftCard">Flag to indicate that the sales transaction is related to gift cards.</param>
    private static void ReadTransactionCharges(
        ChargeInfoCollection chargeInfoColloection,
        RetailTransactionTable transactionTable,
        RetailTransactionSalesTrans salesTrans = null,
        boolean filterBySaleTrans = false,
        boolean _isGiftCard = false)
    {
        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionMarkupTrans));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, MarkupCode));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, Value));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, CalculatedAmount));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, TaxGroup));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, TaxItemGroup));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, Method));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, HSNCode_IN));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, ServiceAccountingCode_IN));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, Exempt_IN));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, NonGST_IN));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, ITCCategory_IN));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, ServiceCategory_IN));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, ModuleType));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, Keep));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, MarkupAutoLineRecId));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, MarkupAutoTableRecId));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, TaxRateType));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, Channel));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, Store));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, TerminalId));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, TransactionId));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, MarkupLineNum));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, SaleLineNum));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, IsOverriddenLine));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, TaxExemptPriceInclusiveOriginalPrice));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, TaxExemptPriceInclusiveReductionAmount));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionMarkupTrans, Description));

        if (!filterBySaleTrans)
        {
            primaryDataSource.addRange(fieldNum(RetailTransactionMarkupTrans, SaleLineNum)).value(queryValue(0.0));
            query = RetailTransactionTransformer::buildQueryFilterByTransaction(query, primaryDataSource, transactionTable);
        }
        else
        {
            query = RetailTransactionTransformer::buildQueryFilterBySalesTrans(query, primaryDataSource, salesTrans, transactionTable, _isGiftCard);
        }

        QueryRun qrCharge = new QueryRun(query);
        while (qrCharge.next())
        {
            RetailTransactionMarkupTrans markupLine = qrCharge.getNo(1);

            ChargeInfo chargeInfo = new ChargeInfo();

            chargeInfo.Code = markupLine.MarkupCode;
            chargeInfo.Amount = markupLine.CalculatedAmount;
            chargeInfo.SalesTaxGroup = markupLine.TaxGroup;
            chargeInfo.TaxGroup = markupLine.TaxItemGroup;
            chargeInfo.Method = enum2int(markupLine.Method);
            chargeInfo.ChargeType = (markupLine.MarkupAutoTableRecId && markupLine.MarkupAutoLineRecId)
                ? Microsoft.Dynamics.Commerce.Runtime.DataModel.ChargeType::AutoCharge
                : Microsoft.Dynamics.Commerce.Runtime.DataModel.ChargeType::ManualCharge;
            chargeInfo.ModuleType = markupLine.ModuleType;
            chargeInfo.ShouldApplyEveryInvoice = markupLine.Keep;
            chargeInfo.MarkupAutoTableRecId = markupLine.MarkupAutoTableRecId;
            chargeInfo.MarkupAutoLineRecId = markupLine.MarkupAutoLineRecId;
            chargeInfo.IsOverriddenLine = markupLine.IsOverriddenLine;
            chargeInfo.TaxExemptPriceInclusiveOriginalAmount = markupLine.TaxExemptPriceInclusiveOriginalPrice;
            chargeInfo.TaxExemptPriceInclusiveReductionAmount = markupLine.TaxExemptPriceInclusiveReductionAmount;
            chargeInfo.Description = markupLine.Description;

            if (transactionTable.isGTETransaction())
            {
                // Read tax info from RetailTransactionTaxTransGTE for consistency check purpose.
                RetailTransactionTransformer::ReadChargeTaxInformationGTE(chargeInfo.Taxes, markupLine);
            }
            else
            {
                // Add associated charge taxes
                RetailTransactionTransformer::ReadChargeTaxInformation(chargeInfo.Taxes, markupLine);
            }

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
            {
                Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder.ExtensionPropertyCollection extensionPropertyCollection = chargeInfo.ExtensionProperties;

                RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::HSNCodePropertyName, markupLine.HSNCode_IN);
                RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::ServiceAccountingCodePropertyName, markupLine.ServiceAccountingCode_IN);
                RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::IsExemptPropertyName, markupLine.Exempt_IN == NoYes::Yes ? true : false);
                RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::NonGSTPropertyName, markupLine.NonGST_IN == NoYes::Yes ? true : false);
                RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::ITCCategoryPropertyName, enum2int(markupLine.ITCCategory_IN));
                RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::ServiceCategoryPropertyName, enum2int(markupLine.ServiceCategory_IN));
                RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::TaxRateTypePropertyName, markupLine.TaxRateType);

                RetailTransactionTransformer::ReadChargeTaxMeasure(chargeInfo.TaxMeasures, markupLine);
            }

            chargeInfoColloection.Add(chargeInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExtensionProperty</Name>
				<Source><![CDATA[
    private static void setExtensionProperty(
        Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder.ExtensionPropertyCollection _extensionPropertyCollection,
        str _key,
        anytype _value)
    {

        Microsoft.Dynamics.Commerce.Runtime.DataModel.CommerceProperty commerceProperty = new Microsoft.Dynamics.Commerce.Runtime.DataModel.CommerceProperty(_key, _value);

        _extensionPropertyCollection.Add(commerceProperty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadDiscountLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read discount entries for the transaction sales line.
    /// </summary>
    /// <param name="discountInfoCollection">
    /// Discount info collection to be populated.
    /// </param>
    /// <param name = "transactionTable">
    /// Retail transaction record.
    /// </param>
    /// <param name = "salesTrans">
    /// Retail transaction sales trans record.
    /// </param>
    /// <param name = "_isGiftCard">Flag to indicate that the sales transaction is related to gift cards.</param>
    private static void ReadDiscountLines(
        DiscountInfoCollection discountInfoCollection,
        RetailTransactionTable transactionTable,
        RetailTransactionSalesTrans salesTrans,
        boolean _isGiftCard)
    {
        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionDiscountTrans));

        RetailTransactionTransformer::addQueryBuildDataSourceSelectionFields(primaryDataSource);

        query = RetailTransactionTransformer::buildQueryFilterBySalesTrans(query, primaryDataSource, salesTrans, transactionTable, _isGiftCard);

        QueryRun qrDiscounts = new QueryRun(query);
        while (qrDiscounts.next())
        {
            RetailTransactionDiscountTrans  discountTransLine = qrDiscounts.getNo(1);

            DiscountInfo discountInfo = new DiscountInfo();

            RetailTransactionTransformer::initDiscountInfo(discountInfo, discountTransLine);

            discountInfoCollection.Add(discountInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadPriceLines</Name>
				<Source><![CDATA[
    private static void ReadPriceLines(
        PriceInfoCollection _priceInfoCollection,
        RetailTransactionTable _transactionTable,
        RetailTransactionSalesTrans _salesTrans,
        boolean _isGiftCard)
    {
        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionPriceTrans));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPriceTrans, PriceType));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPriceTrans, RecordId));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionPriceTrans, Value));

        query = RetailTransactionTransformer::buildQueryFilterBySalesTrans(query, primaryDataSource, _salesTrans, _transactionTable, _isGiftCard);

        QueryRun qrPrices = new QueryRun(query);
        while (qrPrices.next())
        {
            RetailTransactionPriceTrans priceTransLine = qrPrices.getNo(1);
            PriceInfo priceInfo = new PriceInfo();
            RetailTransactionTransformer::initPriceInfo(priceInfo, priceTransLine);
            _priceInfoCollection.Add(priceInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPriceInfo</Name>
				<Source><![CDATA[
    private static void initPriceInfo(PriceInfo _priceInfo, RetailTransactionPriceTrans _priceTransLine)
    {
        _priceInfo.PriceType = _priceTransLine.PriceType;
        _priceInfo.RecordId = _priceTransLine.RecordId;
        _priceInfo.Value = _priceTransLine.Value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQueryBuildDataSourceSelectionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection field to the QueryBuildDataSource.
    /// </summary>
    /// <param name="_primaryDataSource">
    /// The QueryBuildDataSource to which the selection fields need to be added.
    /// </param>
    [Wrappable(true)]
    protected final static void addQueryBuildDataSourceSelectionFields(QueryBuildDataSource _primaryDataSource)
    {
        _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, Amount));
        _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, DiscountCost));
        _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, DiscountCode));
        _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, PeriodicDiscountOfferId));
        _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, DealPrice));
        _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, DiscountAmount));
        _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, Percentage));
        _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, DiscountOriginType));
        _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, CustomerDiscountType));
        _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, ManualDiscountType));

        if (RetailTransactionTransformerHelper::shouldAddMorePriceDetailsInfo() && RetailTransactionServiceOrderSyncPriceDetailsFlight::instance().isEnabled())
        {
            _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, AppliedDiscountLineNum));
            _primaryDataSource.addSelectionField(fieldNum(RetailTransactionDiscountTrans, DiscountLineRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDiscountInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>DiscountInfo</c>.
    /// </summary>
    /// <param name="_discountInfo">
    /// The <c>DiscountInfo</c> object to be initialized.
    /// </param>
    /// <param name="_discountTransLine">
    /// The <c>RetailTransactionDiscountTrans</c> table buffer.
    /// </param>
    [Wrappable(true)]
    protected static void initDiscountInfo(DiscountInfo _discountInfo, RetailTransactionDiscountTrans _discountTransLine)
    {
        DiscountInfo discountInfo = _discountInfo;

        discountInfo.Amount = _discountTransLine.Amount;
        discountInfo.DiscountCost = _discountTransLine.DiscountCost;
        discountInfo.DealPrice = _discountTransLine.DealPrice;
        discountInfo.DiscountAmount = _discountTransLine.DiscountAmount;
        discountInfo.Percentage = _discountTransLine.Percentage;
        discountInfo.DiscountOriginType = _discountTransLine.DiscountOriginType;
        discountInfo.CustomerDiscountType = _discountTransLine.CustomerDiscountType;
        discountInfo.ManualDiscountType = _discountTransLine.ManualDiscountType;
        discountInfo.DiscountCode = _discountTransLine.DiscountCode;
        discountInfo.PeriodicDiscountOfferId = _discountTransLine.PeriodicDiscountOfferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadInfocodeLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read the infocode lines for the given parent line number, type, and transaction.
    /// </summary>
    /// <param name = "_reasonCodeInfoCollection">Reason code info collection to be populated.</param>
    /// <param name = "_parentLineNum">The parent line number.</param>
    /// <param name = "_type">The infocode type.</param>
    /// <param name = "_transactionTable">The transaction record.</param>
    private static void ReadInfocodeLines(
        ReasonCodeLineInfoCollection _reasonCodeInfoCollection,
        LineNum _parentLineNum,
        RetailInfocodeTransType _type,
        RetailTransactionTable _transactionTable)
    {
        if (_reasonCodeInfoCollection == null)
        {
            return;
        }

        Query query = new Query();
        QueryBuildDataSource dataSource = query.addDataSource(tableNum(RetailTransactionInfocodeTrans));

        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, amount));
        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, infoAmount));
        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, infocodeId));
        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, information));
        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, inputType));
        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, itemTender));
        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, lineNum));
        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, sourceCode));
        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, sourceCode2));
        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, sourceCode3));
        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, statementCode));
        dataSource.addSelectionField(fieldNum(RetailTransactionInfocodeTrans, subInfocodeId));

        dataSource.addRange(fieldNum(RetailTransactionInfocodeTrans, Channel)).value(queryValue(_transactionTable.Channel));
        dataSource.addRange(fieldNum(RetailTransactionInfocodeTrans, store)).value(queryValue(_transactionTable.store));
        dataSource.addRange(fieldNum(RetailTransactionInfocodeTrans, terminal)).value(queryValue(_transactionTable.terminal));
        dataSource.addRange(fieldNum(RetailTransactionInfocodeTrans, transactionId)).value(queryValue(_transactionTable.transactionId));
        dataSource.addRange(fieldNum(RetailTransactionInfocodeTrans, parentLineNum)).value(queryValue(_parentLineNum));
        dataSource.addRange(fieldNum(RetailTransactionInfocodeTrans, type)).value(queryValue(_type));

        dataSource.addOrderByField(fieldNum(RetailTransactionInfocodeTrans, lineNum), SortOrder::Ascending);

        QueryRun queryInfocodes = new QueryRun(query);
        while (queryInfocodes.next())
        {
            RetailTransactionInfocodeTrans infocode = queryInfocodes.getNo(1);

            ReasonCodeLineInfo reasonCodeLineInfo = new ReasonCodeLineInfo();

            reasonCodeLineInfo.Amount = infocode.amount;
            reasonCodeLineInfo.Information = infocode.information;
            reasonCodeLineInfo.InformationAmount = infocode.infoAmount;
            reasonCodeLineInfo.InputTypeValue = infocode.inputType;
            reasonCodeLineInfo.ItemTender = infocode.itemTender;
            reasonCodeLineInfo.LineNumber = infocode.lineNum;
            reasonCodeLineInfo.LineTypeValue = _type;
            reasonCodeLineInfo.ReasonCodeId = infocode.infocodeId;
            reasonCodeLineInfo.SourceCode = infocode.sourceCode;
            reasonCodeLineInfo.SourceCode2 = infocode.sourceCode2;
            reasonCodeLineInfo.SourceCode3 = infocode.sourceCode3;
            reasonCodeLineInfo.StatementCode = infocode.statementCode;
            reasonCodeLineInfo.SubReasonCodeId = infocode.subInfocodeId;

            _reasonCodeInfoCollection.Add(reasonCodeLineInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read tax information for the transaction sales line.
    /// </summary>
    /// <param name="taxInfoCollection">
    /// Tax info collection to be populated.
    /// </param>
    /// <param name = "transactionTable">
    /// Retail transaction record.
    /// </param>
    /// <param name = "salesTrans">
    /// Retail transaction sales trans record.
    /// </param>
    /// <param name = "filterBySaleTrans">
    /// If filter by retail transaction sales trans.
    /// </param>
    /// <param name = "_isGiftCard">Flag to indicate that the sales transaction is related to gift cards.</param>
    private static void ReadTaxInformation(
        TaxInfoCollection taxInfoCollection,
        RetailTransactionTable transactionTable,
        RetailTransactionSalesTrans salesTrans = null,
        boolean filterBySaleTrans = false,
        boolean _isGiftCard = false)
    {
        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionTaxTrans));
        primaryDataSource.addGroupByField(fieldNum(RetailTransactionTaxTrans, TaxCode));
        primaryDataSource.addGroupByField(fieldNum(RetailTransactionTaxTrans, IsIncludedInPrice));
        primaryDataSource.addGroupByField(fieldNum(RetailTransactionTaxTrans, IsExempt));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionTaxTrans, TaxCode));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionTaxTrans, IsIncludedInPrice));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionTaxTrans, IsExempt));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionTaxTrans, Amount), SelectionField::Sum);

        if (!filterBySaleTrans)
        {
            primaryDataSource.addRange(fieldNum(RetailTransactionTaxTrans, SaleLineNum)).value(queryValue(0.0));
            query = RetailTransactionTransformer::buildQueryFilterByTransaction(query, primaryDataSource, transactionTable);
        }
        else
        {
            query = RetailTransactionTransformer::buildQueryFilterBySalesTrans(query, primaryDataSource, salesTrans, transactionTable, _isGiftCard);
        }

        QueryRun qrTax = new QueryRun(query);
        while (qrTax.next())
        {
            RetailTransactionTaxTrans taxTrans = qrTax.getNo(1);

            TaxCode taxCode = taxTrans.TaxCode;
            if (taxCode)
            {
                CurrencyCode currencyCode = TaxTable::find(taxCode).TaxCurrencyCode;
                TaxRegulationAmountCur taxRegulationAmountCur = taxTrans.Amount;

                // Get the tax code and tax amount per the tax code per sales line
                TaxInfo taxInfo = new TaxInfo();

                taxInfo.TaxCode = taxCode;

                RetailTransactionTransformerContext context = RetailTransactionTransformerContext::current();
                if (context != null && context.parmSkipTaxRounding())
                {
                    taxInfo.Amount = taxRegulationAmountCur;
                }
                else
                {
                    taxInfo.Amount = CurrencyExchangeHelper::amount(taxRegulationAmountCur, currencyCode);
                }
                
                taxInfo.IsIncludedInPrice = taxTrans.IsIncludedInPrice == NoYes::Yes;
                taxInfo.IsExempt = taxTrans.IsExempt;

                taxInfoCollection.Add(taxInfo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadTaxInformationGTE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read tax information for the sales line of GTE transaction.
    /// </summary>
    /// <param name="taxInfoCollection">
    /// Tax info collection to be populated.
    /// </param>
    /// <param name = "transactionTable">
    /// Retail transaction record.
    /// </param>
    /// <param name = "salesTrans">
    /// Retail transaction sales trans record.
    /// </param>
    /// <param name = "filterBySaleTrans">
    /// If filter by retail transaction sales trans.
    /// </param>
    /// <param name = "_isGiftCard">
    /// Flag to indicate that the sales transaction is related to gift cards.
    /// </param>
    private static void ReadTaxInformationGTE(
        TaxInfoCollection taxInfoCollection,
        RetailTransactionTable transactionTable,
        RetailTransactionSalesTrans salesTrans = null,
        boolean filterBySaleTrans = false,
        boolean _isGiftCard = false)
    {
        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionTaxTransGTE));
        primaryDataSource.addGroupByField(fieldNum(RetailTransactionTaxTransGTE, TaxComponent));
        primaryDataSource.addGroupByField(fieldNum(RetailTransactionTaxTransGTE, IsIncludedInPrice));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionTaxTransGTE, TaxComponent));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionTaxTransGTE, IsIncludedInPrice));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionTaxTransGTE, TaxAmount), SelectionField::Sum);

        if (!filterBySaleTrans)
        {
            primaryDataSource.addRange(fieldNum(RetailTransactionTaxTransGTE, SaleLineNum)).value(queryValue(0.0));
            query = RetailTransactionTransformer::buildQueryFilterByTransaction(query, primaryDataSource, transactionTable);
        }
        else
        {
            query = RetailTransactionTransformer::buildQueryFilterBySalesTrans(query, primaryDataSource, salesTrans, transactionTable, _isGiftCard);
        }

        QueryRun qrTax = new QueryRun(query);
        while (qrTax.next())
        {
            RetailTransactionTaxTransGTE taxTransGTE = qrTax.getNo(1);

            TaxComponent_IN taxComponent = taxTransGTE.TaxComponent;
            if (taxComponent)
            {
                TaxInfo taxInfo = new TaxInfo();

                taxInfo.Amount = taxTransGTE.TaxAmount;
                taxInfo.IsIncludedInPrice = taxTransGTE.IsIncludedInPrice == NoYes::Yes;

                taxInfoCollection.Add(taxInfo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadTaxMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read tax measure for the transaction sales line.
    /// </summary>
    /// <param name="taxMeasureInfoCollection">Tax measure collection to be populated.</param>
    /// <param name = "transactionTable">Retail transaction record.</param>
    /// <param name = "salesTrans">Retail transaction sales trans record.</param>
    /// <param name = "filterBySaleTrans">If filter by retail transaction sales trans.</param>
    /// <param name = "_isGiftCard">Flag to indicate that the sales transaction is related to gift cards.</param>
    public static void ReadTaxMeasure(
        CLRObject /*Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder.TaxMeasureInfoCollection*/ taxMeasureInfoCollection,
        RetailTransactionTable transactionTable,
        RetailTransactionSalesTrans salesTrans = null,
        boolean filterBySaleTrans = false,
        boolean _isGiftCard = false)
    {
        TaxMeasureInfoCollection taxMeasureInfos = taxMeasureInfoCollection as TaxMeasureInfoCollection;

        if (taxMeasureInfos == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionTaxMeasure));
        primaryDataSource.addGroupByField(fieldNum(RetailTransactionTaxMeasure, Path));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionTaxMeasure, Path));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionTaxMeasure, Value), SelectionField::Sum);

        if (!filterBySaleTrans)
        {
            primaryDataSource.addRange(fieldNum(RetailTransactionTaxMeasure, SaleLineNum)).value(queryValue(0.0));
            query = RetailTransactionTransformer::buildQueryFilterByTransaction(query, primaryDataSource, transactionTable);
        }
        else
        {
            query = RetailTransactionTransformer::buildQueryFilterBySalesTrans(query, primaryDataSource, salesTrans, transactionTable, _isGiftCard);
        }

        QueryRun qrTaxMeasure = new QueryRun(query);
        while (qrTaxMeasure.next())
        {
            RetailTransactionTaxMeasure taxMeasure = qrTaxMeasure.getNo(1);

            ERDataItemPath path = taxMeasure.Path;
            if (path)
            {
                TaxMeasureInfo taxMeatureInfo = new TaxMeasureInfo();
                
                taxMeatureInfo.Path = path;
                taxMeatureInfo.Value = taxMeasure.Value;

                taxMeasureInfoCollection.Add(taxMeatureInfo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadChargeTaxMeasure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read tax measure for the transaction header or line level charge line.
    /// </summary>
    /// <param name="_taxMeasureInfoCollection">Tax measure collection to be populated.</param>
    /// <param name="_markupTrans">Retail transaction markup trans record.</param>
    private static void ReadChargeTaxMeasure(
        TaxMeasureInfoCollection _taxMeasureInfoCollection,
        RetailTransactionMarkupTrans _markupTrans)
    {
        if (_taxMeasureInfoCollection == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionChargeTaxMeasure));
        primaryDataSource.addGroupByField(fieldNum(RetailTransactionChargeTaxMeasure, Path));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionChargeTaxMeasure, Path));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionChargeTaxMeasure, Value), SelectionField::Sum);
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxMeasure, Channel)).value(queryValue(_markupTrans.Channel));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxMeasure, StoreId)).value(queryValue(_markupTrans.Store));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxMeasure, TerminalId)).value(queryValue(_markupTrans.TerminalId));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxMeasure, TransactionId)).value(queryValue(_markupTrans.TransactionId));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxMeasure, SaleLineNum)).value(queryValue(_markupTrans.SaleLineNum));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxMeasure, MarkupLineNum)).value(queryValue(_markupTrans.MarkupLineNum));

        QueryRun qrTaxMeasure = new QueryRun(query);
        while (qrTaxMeasure.next())
        {
            RetailTransactionChargeTaxMeasure chargeTaxMeasure = qrTaxMeasure.getNo(1);

            ERDataItemPath path = chargeTaxMeasure.Path;
            if (path)
            {
                TaxMeasureInfo taxMeatureInfo = new TaxMeasureInfo();
                
                taxMeatureInfo.Path = path;
                taxMeatureInfo.Value = chargeTaxMeasure.Value;

                _taxMeasureInfoCollection.Add(taxMeatureInfo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadChargeTaxInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read charge tax information for the transaction header and sales line.
    /// </summary>
    /// <param name="taxInfoCollection">
    /// Tax info collection to be populated.
    /// </param>
    /// <param name = "markupLine">
    /// Retail transaction markup trans record.
    /// </param>
    private static void ReadChargeTaxInformation(
        TaxInfoCollection taxInfoCollection,
        RetailTransactionMarkupTrans markupLine)
    {
        Query query = new Query();

        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionChargeTaxTrans));

        primaryDataSource.addGroupByField(fieldNum(RetailTransactionChargeTaxTrans, TaxCode));
        primaryDataSource.addGroupByField(fieldNum(RetailTransactionChargeTaxTrans, IsIncludedInPrice));
        primaryDataSource.addGroupByField(fieldNum(RetailTransactionChargeTaxTrans, IsExempt));

        primaryDataSource.addSelectionField(fieldNum(RetailTransactionChargeTaxTrans, TaxCode));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionChargeTaxTrans, IsIncludedInPrice));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionChargeTaxTrans, IsExempt));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionChargeTaxTrans, Amount), SelectionField::Sum);

        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTrans, Channel)).value(queryValue(markupLine.Channel));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTrans, StoreId)).value(queryValue(markupLine.Store));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTrans, TerminalId)).value(queryValue(markupLine.TerminalId));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTrans, TransactionId)).value(queryValue(markupLine.TransactionId));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTrans, MarkupLineNum)).value(queryValue(markupLine.MarkupLineNum));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTrans, SaleLineNum)).value(queryValue(markupLine.SaleLineNum));

        QueryRun qrChargeTax = new QueryRun(query);

        while (qrChargeTax.next())
        {
            RetailTransactionChargeTaxTrans chargeTaxTrans = qrChargeTax.getNo(1);

            TaxCode taxCode = chargeTaxTrans.TaxCode;
            if (taxCode)
            {
                CurrencyCode currencyCode = TaxTable::find(taxCode).TaxCurrencyCode;
                TaxRegulationAmountCur taxRegulationAmountCur = chargeTaxTrans.Amount;

                // Get the tax code and tax amount per the tax code per sales line
                TaxInfo taxInfo = new TaxInfo();

                taxInfo.TaxCode = taxCode;
                taxInfo.Amount = CurrencyExchangeHelper::amount(taxRegulationAmountCur, currencyCode);
                taxInfo.IsIncludedInPrice = (chargeTaxTrans.IsIncludedInPrice == NoYes::Yes);
                taxInfo.IsExempt = (chargeTaxTrans.IsExempt == NoYes::Yes);

                taxInfoCollection.Add(taxInfo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadChargeTaxInformationGTE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read GTE charge tax information for the transaction header and sales line.
    /// </summary>
    /// <param name="_taxInfoCollection">
    /// Tax info collection to be populated.
    /// </param>
    /// <param name="_markupLine">
    /// Retail transaction markup trans record.
    /// </param>
    private static void ReadChargeTaxInformationGTE(
        TaxInfoCollection _taxInfoCollection,
        RetailTransactionMarkupTrans _markupLine)
    {
        Query query = new Query();

        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionChargeTaxTransGTE));

        primaryDataSource.addGroupByField(fieldNum(RetailTransactionChargeTaxTransGTE, TaxComponent));
        primaryDataSource.addGroupByField(fieldNum(RetailTransactionChargeTaxTransGTE, IsIncludedInPrice));

        primaryDataSource.addSelectionField(fieldNum(RetailTransactionChargeTaxTransGTE, TaxComponent));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionChargeTaxTransGTE, IsIncludedInPrice));
        primaryDataSource.addSelectionField(fieldNum(RetailTransactionChargeTaxTransGTE, TaxAmount), SelectionField::Sum);

        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTransGTE, Channel)).value(queryValue(_markupLine.Channel));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTransGTE, StoreId)).value(queryValue(_markupLine.Store));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTransGTE, TerminalId)).value(queryValue(_markupLine.TerminalId));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTransGTE, TransactionId)).value(queryValue(_markupLine.TransactionId));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTransGTE, MarkupLineNum)).value(queryValue(_markupLine.MarkupLineNum));
        primaryDataSource.addRange(fieldNum(RetailTransactionChargeTaxTransGTE, SaleLineNum)).value(queryValue(_markupLine.SaleLineNum));

        QueryRun qrChargeTax = new QueryRun(query);

        while (qrChargeTax.next())
        {
            RetailTransactionChargeTaxTransGTE chargeTaxTransGTE = qrChargeTax.getNo(1);

            TaxComponent_IN taxComponent = chargeTaxTransGTE.TaxComponent;
            if (taxComponent)
            {
                TaxInfo taxInfo = new TaxInfo();

                taxInfo.Amount = chargeTaxTransGTE.TaxAmount;
                taxInfo.IsIncludedInPrice = chargeTaxTransGTE.IsIncludedInPrice == NoYes::Yes;

                _taxInfoCollection.Add(taxInfo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadOneTransactionSalesTransGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to read sales transactions related to gift card items.
    /// </summary>
    /// <param name = "transactionTable">The <c>RetailTransactionTable</c> record buffer.</param>
    /// <param name = "salesTrans">The <c>RetailTransactionSalesTrans</c> record buffer.</param>
    /// <returns>The item information.</returns>
    private static ItemInfo ReadOneTransactionSalesTransGiftCard(
                RetailTransactionTable transactionTable,
                RetailTransactionSalesTrans salesTrans)
    {
        ItemInfo itemInfo = RetailTransactionTransformer::BuildItemInfoFromSalesTrans(transactionTable, salesTrans, true);

        RetailTransactionTransformerContext context = RetailTransactionTransformerContext::current();
        if (context != null && context.parmSetGiftCard())
        {
            itemInfo.Giftcard = 1;
        }
     
        return itemInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadOneTransactionSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to read sales transactions.
    /// </summary>
    /// <param name = "transactionTable">The <c>RetailTransactionTable</c> record buffer.</param>
    /// <param name = "salesTrans">The <c>RetailTransactionSalesTrans</c> record buffer.</param>
    /// <returns>The item information.</returns>
    public static ItemInfo ReadOneTransactionSalesTrans(
                RetailTransactionTable transactionTable,
                RetailTransactionSalesTrans salesTrans)
    {
        ItemInfo itemInfo = RetailTransactionTransformer::BuildItemInfoFromSalesTrans(transactionTable, salesTrans, false);
       
        return itemInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadOneTransactionSalesTransForReturn</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to read sales transactions for return.
    /// </summary>
    /// <param name = "transactionTable">The <c>RetailTransactionTable</c> record buffer.</param>
    /// <param name = "salesTrans">The <c>RetailTransactionSalesTrans</c> record buffer.</param>
    /// <returns>The item information.</returns>
    public static ItemInfo ReadOneTransactionSalesTransForReturn(
                RetailTransactionTable transactionTable,
                RetailTransactionSalesTrans salesTrans)
    {
        ItemInfo itemInfo = RetailTransactionTransformer::BuildItemInfoFromSalesTrans(transactionTable, salesTrans, false);

        // we don't aggregate by statementId on the SalesTrans level, because this is already done at the header level
        // this is just a temporary copy to satisfy the need for statementId inside originalInventTransId()
        salesTrans.statementId = transactionTable.statementId;

        RetailTransactionTransformerContext context = RetailTransactionTransformerContext::current();

        if (context != null && context.parmIgnoreReturnLink())
        {
            itemInfo.ReturnInventTransId = '';
        }
        else
        {
            itemInfo.ReturnInventTransId = salesTrans.originalInventTransId();
        }

        return itemInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>BuildItemInfoFromSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used to read sales transactions.
    /// </summary>
    /// <param name = "transactionTable">The <c>RetailTransactionTable</c> record buffer.</param>
    /// <param name = "salesTrans">The <c>RetailTransactionSalesTrans</c> record buffer.</param>
    /// <param name = "_isGiftCard">Flag to indicate that the sales transaction is related to gift cards.</param>
    /// <returns>The item information.</returns>
    private static ItemInfo BuildItemInfoFromSalesTrans(
                RetailTransactionTable transactionTable,
                RetailTransactionSalesTrans salesTrans,
                boolean _isGiftCard)
    {
        str giftCardItem;
        if (salesTrans.StatementId)
        {
            giftCardItem = RetailEodStatementConfigurationAccessor::constructFromStatementId(salesTrans.StatementId).getGiftcardItem();
        }
        else
        {
            giftCardItem = RetailParameters::find().GiftCardItem;
        }

        ItemInfo itemInfo = new ItemInfo();

        itemInfo.ItemId = salesTrans.itemId;
        itemInfo.Quantity = -salesTrans.qty;
        itemInfo.Unit = salesTrans.unit;
        itemInfo.Price = salesTrans.Price;
        itemInfo.IsPriceOverridden = salesTrans.priceChange;
        itemInfo.TaxExemptPriceInclusiveOriginalPrice = salesTrans.TaxExemptPriceInclusiveOriginalPrice;
        itemInfo.TaxExemptPriceInclusiveReductionAmount = salesTrans.TaxExemptPriceInclusiveReductionAmount;
        itemInfo.SalesTaxGroup = salesTrans.taxGroup;
        itemInfo.ItemTaxGroup = salesTrans.TaxItemGroup;
        itemInfo.VariantId = salesTrans.variantId;
        itemInfo.WarehouseId = salesTrans.InventLocationId;
        itemInfo.InventTransId = salesTrans.inventTransId;
        itemInfo.BatchId = salesTrans.InventBatchId;
        itemInfo.SerialId = salesTrans.InventSerialId;
        itemInfo.NetAmount = -salesTrans.netAmountInclTax;
        itemInfo.Discount = itemInfo.Quantity == 0 ? 0 : salesTrans.discAmount / itemInfo.Quantity;
        itemInfo.DeliveryMode = salesTrans.DlvMode;
        itemInfo.FulfillmentStoreId = salesTrans.FulfillmentStoreId;
        itemInfo.BarCodeId = salesTrans.barcode;
        itemInfo.SalesAgreementLineRecordId = RetailTransactionTransformer::getSalesAgreementLineRecordIdOnTransactionSalesTrans(salesTrans);

        // If ReceiptDate is given, use the receipt date and if not, use the business date.
        TransDate receiptDateRequested = salesTrans.ReceiptDateRequested == dateNull() ? transactionTable.businessDate : salesTrans.ReceiptDateRequested;
        itemInfo.RequestedDeliveryDateString = date2Str(receiptDateRequested, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4);

        if (salesTrans.PickupEndTime > 0)
        {
            itemInfo.PickupTimeslotStartDateTimeString = DateTimeUtil::ToStr(DateTimeUtil::newDateTime(salesTrans.ShippingDateRequested, salesTrans.PickupStartTime));
            itemInfo.PickupTimeslotEndDateTimeString = DateTimeUtil::ToStr(DateTimeUtil::newDateTime(salesTrans.ShippingDateRequested, salesTrans.PickupEndTime));
        }

        itemInfo.ReturnLineNum = salesTrans.returnLineNum;
        itemInfo.ReturnStore = salesTrans.returnStore;
        itemInfo.ReturnTerminalId = salesTrans.returnTerminalId;
        itemInfo.ReturnTransactionId = salesTrans.returnTransactionId;

        itemInfo.BlockedQuantity = salesTrans.BlockQty;
        itemInfo.InventDimensionId = salesTrans.ReturnInventDimId;

        itemInfo.WmsLocationId = salesTrans.PostingCalculatedWMSLocationId;

        if (!salesTrans.LogisticsPostalAddress)
        {
            // No LPA set, look for it based on other fields
            itemInfo.AddressRecordId = int642Str(RetailTransactionTransformer::getDeliveryPostalAddress(transactionTable, salesTrans.DlvMode, salesTrans.lineNum));

            RetailTransactionAddressTrans retailTransactionAddressTrans;
            retailTransactionAddressTrans = RetailTransactionTransformer::getAddressLineFromTransaction(transactionTable, salesTrans.lineNum);

            if (retailTransactionAddressTrans)
            {
                AddressInfo addressInfo = new AddressInfo();

                addressInfo.AttentionToAddressLine = retailTransactionAddressTrans.AttentionToAddressLine;
                addressInfo.City = retailTransactionAddressTrans.City;
                addressInfo.County = retailTransactionAddressTrans.County;
                addressInfo.DistrictName = retailTransactionAddressTrans.DistrictName;
                addressInfo.Email = retailTransactionAddressTrans.Email;
                addressInfo.IsAsyncAddress = NoYes::No;
                addressInfo.Name = retailTransactionAddressTrans.DeliveryName;
                addressInfo.PhoneNumber = retailTransactionAddressTrans.Phone;
                addressInfo.State = retailTransactionAddressTrans.State;
                addressInfo.Street = retailTransactionAddressTrans.Street;
                addressInfo.StreetNumber = retailTransactionAddressTrans.StreetNumber;
                addressInfo.ThreeLetterISORegionName = retailTransactionAddressTrans.CountryRegionId;
                addressInfo.ZipCode = retailTransactionAddressTrans.ZipCode;
                addressInfo.BuildingCompliment = retailTransactionAddressTrans.BuildingCompliment;

                itemInfo.Address = addressInfo;
            }
        }
        else if (LogisticsPostalAddress::findRecId(salesTrans.LogisticsPostalAddress))
        {
            // LPA set and exists in the LPA table
            itemInfo.AddressRecordId = int642Str(salesTrans.LogisticsPostalAddress);
        }
        else
        {
            // LPA set and doesn't exist in the LPA table. Look for it in the async table
            RetailAsyncAddress asyncAddress;
            select asyncAddress
                    where asyncAddress.CustAccountAsync == salesTrans.CustAccount
                       && asyncAddress.ReplicationCounterFromOrigin == salesTrans.LogisticsPostalAddress
                       && asyncAddress.OnlineAddressCreated == NoYes::Yes
                       && asyncAddress.LogisticsPostalAddress != 0;

            if (asyncAddress)
            {
                // LPA set and exists in the async table
                itemInfo.AddressRecordId = int642Str(asyncAddress.LogisticsPostalAddress);
            }
            else if (RetailAsyncAddressCreationFeature::isEnabled())
            {
                // If the Retail async address creation feature is enabled, then attempt to locate the record in the new location.
                RetailAsyncAddressV2 asyncAddressV2;

                select firstonly asyncAddressV2
                                where (asyncAddressV2.CustAccountAsync == salesTrans.CustAccount || asyncAddressV2.CustAccount == salesTrans.CustAccount)
                                && asyncAddressV2.ReplicationCounterFromOrigin == salesTrans.LogisticsPostalAddress
                                && asyncAddressV2.OnlineOperationCompleted == NoYes::Yes
                                && asyncAddressV2.LogisticsPostalAddress > 0;

                if (asyncAddressV2)
                {
                    itemInfo.AddressRecordId = int642Str(asyncAddressV2.LogisticsPostalAddress);
                }
            }
            else
            {
                // LPA set, but doesn't exist in the LPA or async tables. Look for it based on other fields
                eventSource.EventWriteTransformerNoSalesLineAddressFound(funcName(), salesTrans.RecId, salesTrans.LogisticsPostalAddress);
                itemInfo.AddressRecordId = int642Str(salesTrans.LogisticsPostalAddress);
            }
        }

        itemInfo.ListingId = salesTrans.ListingId;
        itemInfo.Catalog = salesTrans.Catalog;

        itemInfo.LineDscAmount = salesTrans.lineDscAmount;

        itemInfo.LinePercentageDiscount = salesTrans.LinePercentageDiscount;

        itemInfo.TotalDiscount = salesTrans.totalDiscAmount;
        itemInfo.TotalPctDiscount = salesTrans.totalDiscPct;

        itemInfo.LineManualDiscountAmount = salesTrans.LineManualDiscountAmount;
        itemInfo.LineManualDiscountPercentage = salesTrans.LineManualDiscountPercentage;

        itemInfo.PeriodicDiscount = salesTrans.periodicDiscAmount;
        itemInfo.PeriodicPercentageDiscount = salesTrans.PeriodicPercentageDiscount;

        itemInfo.TenderDiscount = salesTrans.TenderDiscountAmount;
        itemInfo.TenderDiscountPercentage = salesTrans.TenderDiscountPercentage;

        itemInfo.Comment = salesTrans.comment;
        itemInfo.CommissionSalesGroup = salesTrans.SalesGroup;

        itemInfo.Giftcard = (salesTrans.itemId == giftCardItem);
        itemInfo.GiftcardDeliveryEmail = salesTrans.ElectronicDeliveryEmail;
        itemInfo.GiftcardDeliveryMessage = salesTrans.ElectronicDeliveryEmailContent;
        itemInfo.GiftcardNumber = salesTrans.GiftCardNumber;

        // Attempt to save the GiftCardOperation property available on the RetailTransactionSalesTrans table as an extension property on the itemInfo object.
        // This property is later utilized to skip certain validations for gift cards that are being cashed out.
        Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder.ExtensionPropertyCollection extensionPropertyCollection = itemInfo.ExtensionProperties;

        RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, fieldStr(RetailTransactionSalesTrans, GiftCardOperation), enum2int(salesTrans.GiftCardOperation));

        itemInfo.SourceId = salesTrans.SourceId;
        itemInfo.ContinuityScheduleId = salesTrans.ContinuityScheduleId;
        itemInfo.CustInvoiceTransId = salesTrans.CustInvoiceTransRecId;
        itemInfo.IsInstallmentEligible = salesTrans.InstallmentEligible;
        itemInfo.LineType = salesTrans.LineType;
        itemInfo.UpSellOrigin = salesTrans.UpSellOrigin;
        itemInfo.UpSellOriginOfferId = salesTrans.UpSellOriginOfferId;
        itemInfo.ParentInventTransId = salesTrans.ParentInventTransId;
        itemInfo.LineNumber = salesTrans.lineNum;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::HSNCodePropertyName, salesTrans.HSNCode_IN);
            RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::ServiceAccountingCodePropertyName, salesTrans.ServiceAccountingCode_IN);
            RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::IsExemptPropertyName, salesTrans.Exempt_IN == NoYes::Yes ? true : false);
            RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::NonGSTPropertyName, salesTrans.NonGST_IN == NoYes::Yes ? true : false);
            RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::TaxRateTypePropertyName, salesTrans.TaxRateType);

            RetailTransactionTransformer::ReadTaxMeasure(itemInfo.TaxMeasures, transactionTable, salesTrans, true, _isGiftCard);

            if (FeatureStateProvider::isFeatureEnabled(RetailGSTInvoiceAddressTaxCalculationFeature_IN::instance()))
            {
                RetailTransactionAdditionalAddressTrans retailTransactionAdditionalAddressTrans = RetailTransactionAdditionalAddressTrans::find(transactionTable.transactionId, transactionTable.Channel, transactionTable.store, transactionTable.terminal,  RetailAdditionalAddressType::Invoice, false);

                if (retailTransactionAdditionalAddressTrans)
                {
                    RetailTransactionAdditionalAddressTransContract contract = new RetailTransactionAdditionalAddressTransContract();

                    contract.initFromRetailTransactionAdditionalAddressTrans(retailTransactionAdditionalAddressTrans);

                    RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, RetailTransactionServiceOrders::InvoiceAddressIndiaPropertyName, contract.serialize());
                }
            }
        }

        itemInfo.NetAmountExclTax = -salesTrans.netAmount;
        itemInfo.TaxAmount = -salesTrans.taxAmount;

        RetailTransactionTransformer::addLegacyValidationExtensionPropertiesToItemInfo(itemInfo, salesTrans);

        if (RetailTransactionServiceOrderSyncPriceDetailsFlight::instance().isEnabled())
        {
            RetailTransactionTransformer::ReadPriceLines(itemInfo.Prices, transactionTable, salesTrans, _isGiftCard);
        }

        RetailTransactionTransformer::ReadDiscountLines(itemInfo.Discounts, transactionTable, salesTrans, _isGiftCard);

        RetailTransactionTransformer::ReadInfocodeLines(itemInfo.ReasonCodeLines, salesTrans.lineNum, RetailInfocodeTransType::Sales, transactionTable);

        RetailTransactionTransformerWarranty::readWarrantyTransactionIntoItemInfo(itemInfo, transactionTable, salesTrans);

        if (transactionTable.isGTETransaction())
        {
            // Read tax info from RetailTransactionTaxTransGTE for consistency check purpose.
            RetailTransactionTransformer::ReadTaxInformationGTE(itemInfo.Taxes, transactionTable, salesTrans, true, _isGiftCard);
        }
        else
        {
            RetailTransactionTransformer::ReadTaxInformation(itemInfo.Taxes, transactionTable, salesTrans, true, _isGiftCard);
        }

        RetailTransactionTransformer::ReadTransactionCharges(itemInfo.Charges, transactionTable, salesTrans, true, _isGiftCard);

        //Read attributes
        if (RetailAttributesOnNonAggregatedTransactionsFlight::instance().isEnabled())
        {
            RetailTransactionTransformerHelper::ReadTransactionAttributes(itemInfo.AttributeValues, salesTrans.TransactionId, salesTrans.terminalId, salesTrans.store, salesTrans.Channel, salesTrans.lineNum);
        }

        return itemInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLegacyValidationExtensionPropertiesToItemInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the extension properties needed for consistency checker validation
    /// </summary>
    /// <param name="itemInfo">
    /// Item info that the extension property will be added to.
    /// </param>
    /// <param name="salesTrans">
    /// The sales transaction with the properties to add to the item info.
    /// </param>
    /// <remarks>
    /// Kept for backwards compatibility. Please use ItemInfo.TaxAmount and ItemInfo.NetAmountExclTax instead.
    /// </remarks>
    private static void addLegacyValidationExtensionPropertiesToItemInfo(ItemInfo itemInfo, RetailTransactionSalesTrans salesTrans)
    {
        Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder.ExtensionPropertyCollection extensionPropertyCollection = itemInfo.ExtensionProperties;
        
        RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, 'NetAmountExclTax', -salesTrans.netAmount);
        RetailTransactionTransformer::setExtensionProperty(extensionPropertyCollection, fieldStr(RetailTransactionSalesTrans, TaxAmount), -salesTrans.taxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadTransactionSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read retail transaction sales trans.
    /// </summary>
    /// <param name="itemInfoCollection">
    /// Item info collection that the sales lines will be added to.
    /// </param>
    /// <param name="transactionTable">
    /// Retail transaction table entry that the lines will be created from.
    /// </param>
    private static void ReadTransactionSalesTrans(
        ItemInfoCollection itemInfoCollection,
        RetailTransactionTable transactionTable)
    {
        RetailTransactionSalesTrans salesTrans;

        str giftCardItem;
        if (transactionTable.StatementId)
        {
            giftCardItem = RetailEodStatementConfigurationAccessor::constructFromStatementId(transactionTable.StatementId).getGiftcardItem();
        }
        else
        {
            giftCardItem = RetailParameters::find().GiftCardItem;
        }

        TaxItemGroup giftcardItemTaxGroupId = InventTable::find(giftCardItem).salesTaxItemGroupId();

        Query query = new Query();
        QueryBuildDataSource primaryDataSource = query.addDataSource(tableNum(RetailTransactionSalesTrans));
        query = RetailTransactionTransformer::buildQueryFilterByTransaction(query, primaryDataSource, transactionTable);

        primaryDataSource.addAllFields(tableStr(RetailTransactionSalesTrans));
        QueryBuildRange queryRange = primaryDataSource.addRange(fieldNum(RetailTransactionSalesTrans, giftcard));

        if (giftCardItem)
        {
            queryRange.value(strFmt('((%1 == 1) || (%2 == "%3"))',
                fieldStr(RetailTransactionSalesTrans, giftcard),
                fieldStr(RetailTransactionSalesTrans, itemId),
                giftCardItem));
        }
        else
        {
            queryRange.value(queryValue(1));
        }

        primaryDataSource.addRange(fieldNum(RetailTransactionSalesTrans, lineNum)).value(queryValue('!=0'));
        primaryDataSource.addRange(fieldNum(RetailTransactionSalesTrans, transactionStatus)).value(queryValue('!=1'));
        QueryRun qrGiftCard = new QueryRun(query);
        while (qrGiftCard.next())
        {
            salesTrans = qrGiftCard.getNo(1);

            if ( salesTrans.itemId == '')
            {
                // If the itemId is empty use the gift card setup in retail parameters.
                salesTrans.itemId = giftCardItem;
                salesTrans.TaxItemGroup = giftcardItemTaxGroupId;
            }
            else
            {
                // ItemId is not blank, use the item id sent from MPOS and lookup it's TaxItemGroup.
                salesTrans.TaxItemGroup = InventTable::find(salesTrans.itemId).salesTaxItemGroupId();
            }

            // Set the line number to 0 for gift cards lines that are part of an aggregated transaction
            // so we correctly assign line numbers when creating the sales order during statement posting
            if (!transactionTable.transactionId)
            {
                salesTrans.lineNum = 0;
            }

            // Map linking postal address to address ref recId
            Map addressMap = new Map(Types::String , Types::String);

            Amount runningTotalNetAmount = 0;
            real giftCardCount = abs(salesTrans.qty);
            // Note: salesTrans.netAmount is stored as a negative value
            Amount totalNetAmount = (-1 * salesTrans.netAmount);
            Amount perLineNetAmount = (-1 * CurrencyExchangeHelper::amount((totalNetAmount / giftCardCount), salesTrans.Currency));
            // Note: salesTrans.netAmountInclTax is stored as a negative value
            Amount runningTotalNetAmountInclTax = 0;
            Amount totalNetAmountInclTax = (-1 * salesTrans.netAmountInclTax);
            Amount perLineNetAmountInclTax = (-1 * CurrencyExchangeHelper::amount((totalNetAmountInclTax / giftCardCount), salesTrans.Currency));
            for (int i = 0; i < giftCardCount; i++)
            {
                // For each gift card sales line set the net amount to totalAmount/qty
                // For the last gift card sales line set the net amount with the remaining balance
                if (i == (giftCardCount - 1))
                {
                    perLineNetAmount = (-1 * CurrencyExchangeHelper::amount((totalNetAmount - runningTotalNetAmount), salesTrans.Currency));
                    perLineNetAmountInclTax = (-1 * CurrencyExchangeHelper::amount((totalNetAmountInclTax - runningTotalNetAmountInclTax), salesTrans.Currency));
                }
                runningTotalNetAmount -= perLineNetAmount;
                salesTrans.qty = salesTrans.GiftCardOperation == RetailGiftCardSalesLineOperation::CashOut ? 1: -1;
                salesTrans.netAmount = perLineNetAmount;

                runningTotalNetAmountInclTax -= perLineNetAmountInclTax;
                salesTrans.netAmountInclTax = perLineNetAmountInclTax;

                ItemInfo itemInfo = RetailTransactionTransformer::ReadOneTransactionSalesTransGiftCard(transactionTable, salesTrans);
                RetailTransactionTransformer::setSalesLineAddressRefRecId(transactionTable, salesTrans, itemInfo, addressMap);
                itemInfoCollection.Add(itemInfo);
            }
        }

        if (!transactionTable.transactionId)
        {
            query.clearAllFields();

            // Add group by fields
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, itemId));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, unit));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, price));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, store));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, taxGroup));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, taxItemGroup));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, variantId));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, InventLocationId));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, InventBatchId));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, PostingCalculatedWMSLocationId));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, InventSerialId));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, ReceiptDateRequested));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, totalDiscPct));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, LinePercentageDiscount));
            
            // Keeping this line for Backwards compatibility. Possible scenarios for compatibility:
            // - Binary is not updated.
            // - Binary is updated , but there are old sales transactions created without the LinePercentageDiscount.
            // - Integration with other system that does not have the field populated.
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, LineManualDiscountPercentage));

            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, PeriodicPercentageDiscount));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, TenderDiscountPercentage));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, SalesGroup));

            if (!RetailParameters::isAggregateSalesAndReturns_W())
            {
                // The below 4 fields are added for return scenario.
                primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, ReturnLineNum));
                primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, ReturnStore));
                primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, ReturnTerminalId));
                primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, ReturnTransactionId));
                primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, ReturnInventDimId));
            }


            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, HSNCode_IN));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, ServiceAccountingCode_IN));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, Exempt_IN));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, NonGST_IN));
            primaryDataSource.addGroupByField(fieldNum(RetailTransactionSalesTrans, TaxRateType));

            // Add aggregated selection fields
            primaryDataSource.addSelectionField(fieldNum(RetailTransactionSalesTrans, qty), SelectionField::Sum);
            primaryDataSource.addSelectionField(fieldNum(RetailTransactionSalesTrans, discAmount), SelectionField::Sum);
            primaryDataSource.addSelectionField(fieldNum(RetailTransactionSalesTrans, netAmount), SelectionField::Sum);
            primaryDataSource.addSelectionField(fieldNum(RetailTransactionSalesTrans, netAmountInclTax), SelectionField::Sum);
            primaryDataSource.addSelectionField(fieldNum(RetailTransactionSalesTrans, lineDscAmount), SelectionField::Sum);
            primaryDataSource.addSelectionField(fieldNum(RetailTransactionSalesTrans, totalDiscAmount), SelectionField::Sum);
            primaryDataSource.addSelectionField(fieldNum(RetailTransactionSalesTrans, periodicDiscAmount), SelectionField::Sum);
            primaryDataSource.addSelectionField(fieldNum(RetailTransactionSalesTrans, TenderDiscountAmount), SelectionField::Sum);
            primaryDataSource.addSelectionField(fieldNum(RetailTransactionSalesTrans, unitQty), SelectionField::Sum);
            primaryDataSource.addSelectionField(fieldNum(RetailTransactionSalesTrans, BlockQty), SelectionField::Sum);
        }

        // Map linking postal address to address ref recId
        Map addressMap = new Map(Types::String , Types::String);

        queryRange.value(queryValue(0));
        primaryDataSource.addRange(fieldNum(RetailTransactionSalesTrans, itemId)).value(queryValue(SysQuery::valueNot(giftCardItem)));

        RetailAddClausesToPrimaryDataSourceParameters parameters = RetailAddClausesToPrimaryDataSourceParameters::construct();
        parameters.primaryDataSource = primaryDataSource;

        RetailCustomerOrderExtensions::addClausesToPrimaryDataSourceOfRetailTransactionSalesTrans(parameters);

        if (!transactionTable.transactionId && RetailParameters::isAggregateSalesAndReturns_W())
        {
            // If aggregation of Sales and Returns is on, then negative and positive lines are summed.
            // To prevent scenario with zero qty line e.g. when return qty = sales qty there is added a having filter.

            query.addHavingFilter(
                query.dataSourceTable(tableNum(RetailTransactionSalesTrans)),
                fieldStr(RetailTransactionSalesTrans, qty),
                AggregateFunction::Sum).value(SysQuery::valueNot(0));

            QueryRun qrNonGiftCardSales = new QueryRun(query);
            while (qrNonGiftCardSales.next())
            {
                salesTrans = qrNonGiftCardSales.getNo(1);
                ItemInfo itemInfo = RetailTransactionTransformer::ReadOneTransactionSalesTrans(transactionTable, salesTrans);
                RetailTransactionTransformer::setSalesLineAddressRefRecId(transactionTable, salesTrans, itemInfo, addressMap);
                itemInfoCollection.Add(itemInfo);
            }
        }
        else
        {
            // We split aggregation of Sales and Returns to avoid cases where return qty = sales qty, causing Qty = 0
            // In such a case, aggregation will cause the failure in line creation with Qty = 0.
            // Splitting aggregation will guarantee the creation of lines with Qty = +n for Sales and Qty = -n for Returns

            // Group lines with negative quantity for sales (don't want to aggregate sales and returns to one line).
            primaryDataSource.addRange(fieldNum(RetailTransactionSalesTrans, qty)).value('<0');
            QueryRun qrNonGiftCardSales = new QueryRun(query);
            while (qrNonGiftCardSales.next())
            {
                salesTrans = qrNonGiftCardSales.getNo(1);
                ItemInfo itemInfo = RetailTransactionTransformer::ReadOneTransactionSalesTrans(transactionTable, salesTrans);
                RetailTransactionTransformer::setSalesLineAddressRefRecId(transactionTable, salesTrans, itemInfo, addressMap);
                itemInfoCollection.Add(itemInfo);
            }

            // Group lines with positive quantity for returns.
            primaryDataSource.clearRange(fieldNum(RetailTransactionSalesTrans, qty));
            primaryDataSource.addRange(fieldNum(RetailTransactionSalesTrans, qty)).value('>0');
            QueryRun qrNonGiftCardReturn = new QueryRun(query);
            while (qrNonGiftCardReturn.next())
            {
                salesTrans = qrNonGiftCardReturn.getNo(1);
                ItemInfo itemInfo = RetailTransactionTransformer::ReadOneTransactionSalesTransForReturn(transactionTable, salesTrans);
                RetailTransactionTransformer::setSalesLineAddressRefRecId(transactionTable, salesTrans, itemInfo, addressMap);
                itemInfoCollection.Add(itemInfo);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryFilterByTransaction</Name>
				<Source><![CDATA[
    private static Query buildQueryFilterByTransaction(Query query, QueryBuildDataSource parentDataSource, RetailTransactionTable transactionTable)
    {
        TableId parentTableId   = parentDataSource.table();
        FieldId fieldStoreid    = RetailTransactionTransformer::GetFieldIdByNames(parentTableId, 'Store' , 'StoreId');
        FieldId fieldTerminalid = RetailTransactionTransformer::GetFieldIdByNames(parentTableId, 'Terminal' , 'TerminalId');

        if (transactionTable.transactionId)
        {
            parentDataSource.addRange(fieldName2Id(parentTableId, 'Channel')).value(queryValue(transactionTable.Channel));
            parentDataSource.addRange(fieldStoreId).value(queryValue(transactionTable.store));
            parentDataSource.addRange(fieldTerminalid).value(queryValue(transactionTable.terminal));
            parentDataSource.addRange(fieldName2Id(parentTableId, 'TransactionId')).value(queryValue(transactionTable.transactionId));
        }
        else
        {
            QueryBuildDataSource filterDataSource = parentDataSource.addDataSource(tableNum(RetailTransactionTable));
            filterDataSource.joinMode(JoinMode::InnerJoin);
            filterDataSource.relations(true);

            // Projecting only the RecId to avoid Key Lookups on the Query Plan
            filterDataSource.fields().dynamic(NoYes::No);
            filterDataSource.fields().clearFieldList();
            filterDataSource.addSelectionField(fieldNum(RetailTransactionTable, RecId));

            // aggregationIdx fields
            filterDataSource.addRange(fieldNum(RetailTransactionTable, Channel)).value(queryValue(transactionTable.Channel));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, store)).value(queryValue(transactionTable.store));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, businessDate)).value(queryValue(transactionTable.businessDate));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, statementId)).value(queryValue(transactionTable.statementId));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, currency)).value(queryValue(transactionTable.currency));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, custAccount)).value(queryValue(transactionTable.custAccount));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, LogisticsPostalAddress)).value(queryValue(transactionTable.LogisticsPostalAddress));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, type)).value(queryValue(transactionTable.type));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, entryStatus)).value(queryValue(transactionTable.entryStatus));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, SalesGroup)).value(queryValue(transactionTable.SalesGroup));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, IsTaxIncludedInPrice)).value(queryValue(transactionTable.IsTaxIncludedInPrice));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, SkipAggregation)).value(SysQuery::value(0));
            filterDataSource.addRange(fieldNum(RetailTransactionTable, incomeExpenseAmount)).value(SysQuery::value(0));
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetFieldIdByNames</Name>
				<Source><![CDATA[
    private static FieldId GetFieldIdByNames(TableId table, str fieldName, str alternateFieldName)
    {
        FieldId field = fieldName2Id(table, fieldName);
        if (!field)
        {
            field = fieldName2Id(table, alternateFieldName);
        }
        return field;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryFilterBySalesTrans</Name>
				<Source><![CDATA[
    private static Query buildQueryFilterBySalesTrans(Query query,
                                                      QueryBuildDataSource parentDataSource,
                                                      RetailTransactionSalesTrans salesTrans,
                                                      RetailTransactionTable transactionTable,
                                                      boolean _isGiftCard)
    {
        TableId parentTableId   = parentDataSource.table();
        FieldId fieldStoreid    = RetailTransactionTransformer::GetFieldIdByNames(parentTableId, 'Store' , 'StoreId');
        FieldId fieldTerminalid = RetailTransactionTransformer::GetFieldIdByNames(parentTableId, 'Terminal' , 'TerminalId');

        if (salesTrans.transactionId)
        {
            parentDataSource.addRange(fieldName2Id(parentTableId, 'SaleLineNum')).value(queryValue(salesTrans.LineNum));
            parentDataSource.addRange(fieldName2Id(parentTableId, 'Channel')).value(queryValue(salesTrans.Channel));
            parentDataSource.addRange(fieldStoreId).value(queryValue(salesTrans.store));
            parentDataSource.addRange(fieldTerminalid).value(queryValue(salesTrans.terminalId));
            parentDataSource.addRange(fieldName2Id(parentTableId, 'TransactionId')).value(queryValue(salesTrans.transactionId));
        }
        else
        {
            QueryBuildDataSource filterDataSource = parentDataSource.addDataSource(tableNum(RetailTransactionSalesTrans));
            filterDataSource.joinMode(JoinMode::InnerJoin);
            filterDataSource.addLink(fieldName2Id(parentTableId, 'Channel'), fieldNum(RetailTransactionSalesTrans, Channel));
            filterDataSource.addLink(fieldStoreId, fieldNum(RetailTransactionSalesTrans, store));
            filterDataSource.addLink(fieldTerminalid, fieldNum(RetailTransactionSalesTrans, TerminalId));
            filterDataSource.addLink(fieldName2Id(parentTableId, 'TransactionId'), fieldNum(RetailTransactionSalesTrans, transactionId));
            filterDataSource.addLink(fieldName2Id(parentTableId, 'SaleLineNum'), fieldNum(RetailTransactionSalesTrans, LineNum));

            // Projecting only the RecId to avoid Key Lookups on the Query Plan
            filterDataSource.fields().dynamic(NoYes::No);
            filterDataSource.fields().clearFieldList();
            filterDataSource.addSelectionField(fieldNum(RetailTransactionSalesTrans, RecId));

            filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, lineNum)).value(queryValue('!=0'));
            filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, transactionStatus)).value(queryValue('!=1'));
            
            QueryBuildRange queryRange = filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, giftcard));

            if (_isGiftCard)
            {
                str giftCardItem;
                if (salesTrans.StatementId)
                {
                    giftCardItem = RetailEodStatementConfigurationAccessor::constructFromStatementId(salesTrans.StatementId).getGiftcardItem();
                }
                else
                {
                    giftCardItem = RetailParameters::find().GiftCardItem;
                }

                if (giftCardItem)
                {
                    queryRange.value(strFmt('((%1 == 1) || (%2 == "%3"))', fieldStr(RetailTransactionSalesTrans, giftcard), fieldStr(RetailTransactionSalesTrans, itemId), giftCardItem));
                }
                else
                {
                    queryRange.value(queryValue(1));
                }
            }
            else
            {
                queryRange.value(queryValue(0));

                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, itemId)).value(queryValue(salesTrans.itemId));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, unit)).value(queryValue(salesTrans.unit));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, price)).value(queryValue(salesTrans.price));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, store)).value(queryValue(salesTrans.store));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, taxGroup)).value(queryValue(salesTrans.taxGroup));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, taxItemGroup)).value(queryValue(salesTrans.taxItemGroup));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, variantId)).value(queryValue(salesTrans.variantId));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, InventLocationId)).value(queryValue(salesTrans.InventLocationId));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, InventBatchId)).value(queryValue(salesTrans.InventBatchId));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, PostingCalculatedWMSLocationId)).value(queryValue(salesTrans.PostingCalculatedWMSLocationId));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, InventSerialId)).value(queryValue(salesTrans.InventSerialId));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, ReceiptDateRequested)).value(queryValue(salesTrans.ReceiptDateRequested));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, totalDiscPct)).value(queryValue(salesTrans.totalDiscPct));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, LinePercentageDiscount)).value(queryValue(salesTrans.LinePercentageDiscount));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, LineManualDiscountPercentage)).value(queryValue(salesTrans.LineManualDiscountPercentage));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, PeriodicPercentageDiscount)).value(queryValue(salesTrans.PeriodicPercentageDiscount));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, SalesGroup)).value(queryValue(salesTrans.SalesGroup));
                
                if (!RetailParameters::isAggregateSalesAndReturns_W())
                {
                    filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, ReturnLineNum)).value(queryValue(salesTrans.ReturnLineNum));
                    filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, ReturnStore)).value(queryValue(salesTrans.ReturnStore));
                    filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, ReturnTerminalId)).value(queryValue(salesTrans.ReturnTerminalId));
                    filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, ReturnTransactionId)).value(queryValue(salesTrans.ReturnTransactionId));
                    filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, ReturnInventDimId)).value(queryValue(salesTrans.ReturnInventDimId));

                    if (salesTrans.qty < 0)
                    {
                        filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, qty)).value('<0');
                    }
                    else
                    {
                        filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, qty)).value('>0');
                    }
                }

                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, HSNCode_IN)).value(queryValue(salesTrans.HSNCode_IN));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, ServiceAccountingCode_IN)).value(queryValue(salesTrans.ServiceAccountingCode_IN));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, Exempt_IN)).value(queryValue(salesTrans.Exempt_IN));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, NonGST_IN)).value(queryValue(salesTrans.NonGST_IN));
                filterDataSource.addRange(fieldNum(RetailTransactionSalesTrans, TaxRateType)).value(queryValue(salesTrans.TaxRateType));
            }

            query = RetailTransactionTransformer::buildQueryFilterByTransaction(query, filterDataSource, transactionTable);
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesLineAddressRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set salesLines with same address to same AddressRefRecId
    /// </summary>
    /// <param name = "transactionTable">Retail transaction.</param>
    /// <param name = "salesTrans">Retail transaction sales trans record.</param>
    /// <param name = "itemInfo">Item info that the sales lines has been added to.</param>
    /// <param name = "addressMap">Map linking address to adress ref recid.</param>
    private static void setSalesLineAddressRefRecId ( RetailTransactionTable transactionTable,
                                                      RetailTransactionSalesTrans salesTrans,
                                                      ItemInfo itemInfo,
                                                      Map addressMap)
    {
        RetailTransactionAddressTrans addressTrans;
        LogisticsAddressing logisticsAddressing;

        addressTrans = RetailTransactionTransformer::getAddressLineFromTransaction(transactionTable, salesTrans.lineNum);

        if (addressTrans)
        {
            logisticsAddressing = LogisticsPostalAddressStringBuilder::buildAddressStringFromParameters(addressTrans.postalAddressStringBuilderParameters());

            if (addressMap.exists(logisticsAddressing))
            {
                itemInfo.AddressRecordId = addressMap.lookup(logisticsAddressing);
            }
            else
            {
                addressMap.insert(logisticsAddressing, itemInfo.AddressRecordId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadAffiliation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read all affiliations for the specified transaction.
    /// </summary>
    /// <param name="affiliationCollection">
    /// Collection of affiliation info.
    /// </param>
    /// <param name="transactionTable">
    /// Retail transaction record.
    /// </param>
    private static void ReadAffiliation(AffiliationInfoCollection affiliationCollection, RetailTransactionTable transactionTable)
    {
        RetailTransactionAffiliationTrans affiliationTrans;

        while select affiliationTrans
            where affiliationTrans.Channel == transactionTable.Channel
                && affiliationTrans.TransactionId == transactionTable.transactionId
                && affiliationTrans.StoreId == transactionTable.store
                && affiliationTrans.TerminalId == transactionTable.terminal
                && affiliationTrans.Affiliation != 0
        {
            AffiliationInfo affiliationInfo = new AffiliationInfo();

            affiliationInfo.AffiliationRecordId = affiliationTrans.Affiliation;
            affiliationInfo.LoyaltyTierRecordId = affiliationTrans.LoyaltyTier;
            affiliationInfo.AffiliationType = RetailAffiliation::find(affiliationTrans.Affiliation).AffiliationType;
            affiliationCollection.Add(affiliationInfo);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesAgreementRecordIdOnTransactionHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sales agreement record id on the retail transaction header.
    /// </summary>
    /// <param name = "_transactionTable">The retail transaction header.</param>
    /// <returns>The sales agreement record id.</returns>
    private static RefRecId getSalesAgreementRecordIdOnTransactionHeader(RetailTransactionTable _transactionTable)
    {
        return RetailSalesAgreementSalesTrans::getSalesAgreementRecordId(_transactionTable.Channel, _transactionTable.store, _transactionTable.terminal, _transactionTable.transactionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesAgreementLineRecordIdOnTransactionSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets sales agreement line record id on the retail transaction.
    /// </summary>
    /// <param name = "_salesTrans">The retail transaction line.</param>
    /// <returns>The sales agreement line record id.</returns>
    private static RefRecId getSalesAgreementLineRecordIdOnTransactionSalesTrans(RetailTransactionSalesTrans _salesTrans)
    {
        return RetailSalesAgreementSalesTrans::getSalesAgreementLineRecordId(_salesTrans.Channel, _salesTrans.store, _salesTrans.terminalId, _salesTrans.transactionId, _salesTrans.lineNum);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>