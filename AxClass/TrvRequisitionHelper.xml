<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvRequisitionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Handles all the requisition related methods.
/// </summary>
class TrvRequisitionHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateRequisitionCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a descriptive caption for a travel requisition expense line.
    /// to inform the user which travel requisition he is looking at. Shows the requisition number and, if not empty, its purpose.
    /// </summary>
    /// <param name = "_trvReqTable">The TrvRequisitionTable record to have its caption generated</param>
    /// <param name = "_creatingWorkerName">The optional name of the delegator that owns the travel requisition.</param>
    /// <returns>Returns the caption based on the travel purpose.</returns>
    public static str generateRequisitionCaption(TrvRequisitionTable _trvReqTable, HcmWorkerName _creatingWorkerName = null)
    {
        str formCaption;

        if (_trvReqTable.TravelPurpose)
        {
            formCaption = strfmt("@Expense:TravelRequisitionCaptionWithPurpose", _creatingWorkerName, _trvReqTable.RequisitionNumber, _trvReqTable.TravelPurpose);
        }
        else
        {
            formCaption = strfmt("@Expense:TravelRequisitionCaptionWithoutPurpose", _creatingWorkerName, _trvReqTable.RequisitionNumber);
        }

        return formCaption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleRequisitionSourceDocumentAndPoliciesAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create source document line and evaluate policies.
    /// This is a wrapper method suitable for being called asynchronously.
    /// </summary>
    /// <param name = "_params">
    /// A container with two values in this order:
    /// 1. RecId of <c>TrvRequisitionLine</c> record.
    /// 2. A boolean value that controls policy evaluation. True, if policies are to be evaluated; otherwise, false.
    /// </param>
    /// <param name = "_cancellationToken">A cancellation token to request cancellation of async method's execution.</param>
    public static void handleRequisitionSourceDocumentAndPoliciesAsync(container _params, System.Threading.CancellationToken _cancellationToken)
    {
        if (conLen(_params) != 2)
        {
            error(strFmt("@SYS22828", funcName()));
        }

        RefRecId trvReqLineRecId = conpeek(_params, 1);
        boolean evaluatePolicies = conpeek(_params, 2);

        if (trvReqLineRecId)
        {
            TrvRequisitionLine::handleRequisitionSourceDocumentAndPolicies(trvReqLineRecId, evaluatePolicies);
        }

        if (_cancellationToken.IsCancellationRequested)
        {
            _cancellationToken.ThrowIfCancellationRequested();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>