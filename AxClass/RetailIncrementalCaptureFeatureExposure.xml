<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailIncrementalCaptureFeatureExposure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailIncrementalCaptureFeatureExposure</c> class is a helper on retail incremental capture feature exposure.
/// </summary>
internal static class RetailIncrementalCaptureFeatureExposure
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether Retail Incremental Capture feature is enabled.
    /// </summary>
    /// <returns>True if Retail Incremental Capture feature is enabled; otherwise, false.</returns>
    internal static boolean isEnabled()
    {
        return FeatureStateProvider::isFeatureEnabled(RetailIncrementalCaptureFeature::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>enabledDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the enabled date related to Incremental Capture feature.
    /// </summary>
    /// <returns>Enabled date for Retail Incremental Capture feature.</returns>
    internal static date enabledDate()
    {
        FeatureManagementMetadata   featureManagementMetadata;
        FeatureManagementState      featureState;

        var featureName = FeatureStateProvider::featureName(RetailIncrementalCaptureFeature::instance());
            
        select firstonly featureManagementMetadata
            join RecId from featureState
            where   featureManagementMetadata.FeatureState == featureState.RecId
                &&  featureState.Name == featureName;

        return featureManagementMetadata.EnableDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledAndSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is incremental capture switched on and does the payment support incremental capture.
    /// </summary>
    /// <param name = "_record">The payment to check for incremental capture support.</param>
    /// <returns>True if incremental Capture is enabled and supported by payment; otherwise, false.</returns>
    internal static boolean isEnabledAndSupported(Common _record)
    {
        if (!RetailIncrementalCaptureFeatureExposure::isEnabled() || _record.RecId == 0)
        {
            return false;
        }
            
        CreditCardAuthTrans creditCardAuthTrans;
        
        switch (_record.TableId)
        {
            case tableNum(MCRCustPaymTable):
                creditCardAuthTrans = CreditCardAuthTrans::mcrFindLatest(_record.RecId);
                break;
            case tableNum(CreditCardAuthTrans):
                creditCardAuthTrans = _record;
                break;
            default:
                return false;
        }

        CreditCardAuthTrans associatedAuthorization = creditCardAuthTrans.OrigAuthRecId == 0 ? creditCardAuthTrans : CreditCardAuthTrans::find(creditCardAuthTrans.OrigAuthRecId);
        return associatedAuthorization.supportsIncrementCapture();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>