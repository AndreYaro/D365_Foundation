<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfRecycledBpConsumptionCalc_ProdEst</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>PmfRecycledBpConsumptionCalc_ProdEst</c> is responsible for calculation of the recycled byporoduct
/// estimated consumption on parent production order.
/// </summary>
class PmfRecycledBpConsumptionCalc_ProdEst implements IPmfRecycledBpConsumptionCalc
{
    BOMCalcProdLine                         parentBomLine;
    BOMCalcCost                             bomCalcCost;

    Qty                                     reducedQty,
                                            bomLineQty;
    ProdId                                  prodId;
    PmfRecycledBpParentCalcState            parentState;
    PmfRecycledBpProdCalcCreator            calcCreator;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        PmfProdCoBy                         pmfProdCoBy;
        InventDim                           inventDim;
        InventDimParm                       inventDimParm;
        Qty                                 allocatedQty;
        BomCalcProd_PmfRecycledByproduct    bomCalcItem;
        BOMCalcProd                         parentCalcItem = this.parmParentBomLine().parmParentBOMCalc();

        inventDimParm.setAllProductDimensions();
        calcCreator.parmParentBomCalc(this.parmParentBomLine().parmParentBOMCalc());

        while select pmfProdCoBy
            where pmfProdCoBy.ProdId      == this.parmProdId()
               && pmfProdCoBy.ItemId      == this.parmParentBomLine().parmItemId()
               && pmfProdCoBy.ProductType == PmfProductType::By_Product
               && pmfProdCoBy.BurdenType  == PmfBurdenType::Recycled
            #inventDimExistsJoin(pmfProdCoBy.inventDimId, inventDim, InventDim::find(this.parmParentBomLine().parmInventDimId()), inventDimParm)
        {
            calcCreator.parmPmfProdCoBy(pmfProdCoBy);
            bomCalcItem = calcCreator.getResult();

            bomCalcItem.parmBomCalcProdLine(this.parmParentBomLine());
            bomCalcItem.parmPmfCostAllocationPct(100);

            bomCalcItem.parmPmfRecycledBpConsumptionCalcParam().parmParentCostAllocation(parentCalcItem.parmPmfCostAllocationPct());
            bomCalcItem.parmPmfRecycledBpConsumptionCalcParam().parmQtyAlreadyAllocatedByParent(this.parmParentState().getQtyAllocatedForByproduct(pmfProdCoBy));
            bomCalcItem.parmPmfRecycledBpConsumptionCalcParam().parmQtyToAllocateFromBomLine(this.parmParentBomLine().parmConsumptionInventQty() - allocatedQty);

            bomCalcItem.calc();

            allocatedQty += bomCalcItem.parmAllocatedQty();
            this.parmParentState().persistAllocatedQty(pmfProdCoBy, bomCalcItem.parmAllocatedQty());
            if (allocatedQty >= this.parmParentBomLine().parmConsumptionInventQty())
            {
                break;
            }
        }

        this.parmReducedQty(this.parmParentBomLine().parmConsumptionInventQty() - allocatedQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllocatedQty</Name>
				<Source><![CDATA[
    public Qty parmAllocatedQty()
    {
        return this.parmBomLineQty() - this.parmReducedQty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomCalcCost</Name>
				<Source><![CDATA[
    public BOMCalcCost parmBomCalcCost(BOMCalcCost _bomCalcCost = bomCalcCost)
    {
        bomCalcCost = _bomCalcCost;

        return bomCalcCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomLineQty</Name>
				<Source><![CDATA[
    public Qty parmBomLineQty(Qty _bomLineQty = bomLineQty)
    {
        bomLineQty = _bomLineQty;

        return bomLineQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcCreator</Name>
				<Source><![CDATA[
    public PmfRecycledBpProdCalcCreator parmCalcCreator(PmfRecycledBpProdCalcCreator _calcCreator = calcCreator)
    {
        calcCreator = _calcCreator;

        return calcCreator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentBomLine</Name>
				<Source><![CDATA[
    public BOMCalcProdLine parmParentBomLine(BOMCalcProdLine _parentBomLine = parentBomLine)
    {
        parentBomLine = _parentBomLine;

        return parentBomLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentState</Name>
				<Source><![CDATA[
    public PmfRecycledBpParentCalcState parmParentState(PmfRecycledBpParentCalcState _parentState = parentState)
    {
        parentState = _parentState;

        return parentState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdId</Name>
				<Source><![CDATA[
    public ProdId parmProdId(ProdId _prodId = prodId)
    {
        prodId = _prodId;

        return prodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReducedQty</Name>
				<Source><![CDATA[
    public Qty parmReducedQty(Qty _reducedQty = reducedQty)
    {
        reducedQty = _reducedQty;

        return reducedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalcTransForCostSheetCalc</Name>
				<Source><![CDATA[
    public void updateCalcTransForCostSheetCalc(BOMCalcTransMap _bomCalcTransMap, Qty _seriesSize)
    {
        PmfProdCalcTransMap     prodCalcTransMap;
        Common                  common;

        if ( _bomCalcTransMap.TableId == tableNum(ProdCalcTrans)
          || _bomCalcTransMap.TableId == tableNum(PmfCoByProdCalcTrans))
        {
            common = _bomCalcTransMap;
            prodCalcTransMap = common;
            if (this.parmAllocatedQty())
            {
                prodCalcTransMap.ConsumpVariable += this.parmAllocatedQty();

                prodCalcTransMap.CostAmount = prodCalcTransMap.ConsumpVariable * bomCalcCost.costPrice() / (bomCalcCost.costPriceUnit() ? bomCalcCost.costPriceUnit() : 1);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfRecycledBpConsumptionCalc_ProdEst construct()
    {
        return new PmfRecycledBpConsumptionCalc_ProdEst();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>