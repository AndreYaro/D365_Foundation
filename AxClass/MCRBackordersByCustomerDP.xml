<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRBackordersByCustomerDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRBackordersByCustomerDP</c> populates the temporary table
/// used in the backorders by customer report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(MCRBackordersByCustomer)),
    SRSReportParameterAttribute(classstr(MCRBackordersByCustomerContract))
]
public class MCRBackordersByCustomerDP extends SRSReportDataProviderBase
{
    const int                   secondsInDay = 86400;
    mcrBackordersByCustomerTmp  mcrBackordersByCustomerTmp;
    SalesTable                  salesTable;
    SalesLine                   salesLine;
    InventTrans                 inventTrans;
    InventTransOrigin           inventTransOrigin;
    InventDim                   inventDim;
    CustAccount                 accountNumber;
    TransDate                   startDate;
    TransDate                   endDate;
    MCRSalesTableShipping       mcrSalesTableShipping;
    boolean                     expeditedOrder;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCompanyCurrencyCode</Name>
				<Source><![CDATA[
    private CurrencyCode getCompanyCurrencyCode()
    {
        LedgerRecId     ledgerRecId;
        CurrencyCode    companyCurrency;

        ledgerRecId  = Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId);
        companyCurrency = Ledger::find(ledgerRecId).AccountingCurrency;

        return companyCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMCRBackordersByCustomerTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the first record in the <c>MCRBackordersByCustomerTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The now set <c>MCRBackordersByCustomerTmp</c> calss variable.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(MCRBackordersByCustomerTmp))
    ]
    public MCRBackordersByCustomerTmp getMCRBackordersByCustomerTmp()
    {
        select  mcrBackordersByCustomerTmp;

        return  mcrBackordersByCustomerTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertMCRBackordersByCustomerTmp</Name>
				<Source><![CDATA[
    private void insertMCRBackordersByCustomerTmp()
    {
        mcrBackordersByCustomerTmp.CustAccount     = salesLine.CustAccount;
        mcrBackordersByCustomerTmp.DeliveryName    = salesLine.DeliveryName;
        mcrBackordersByCustomerTmp.SalesId         = salesLine.SalesId;
        mcrBackordersByCustomerTmp.ItemId          = salesLine.ItemId;
        InventProductDimension::initTableFromInventDim(mcrBackordersByCustomerTmp, inventDim);
        mcrBackordersByCustomerTmp.Qty             = inventTrans.Qty;
        mcrBackordersByCustomerTmp.Amount          = salesLine.SalesPrice;
        mcrBackordersByCustomerTmp.DateExpected    = inventTrans.DateExpected;
        mcrBackordersByCustomerTmp.CompanyCurrency = this.getCompanyCurrencyCode();
        mcrBackordersByCustomerTmp.ReferenceId     = inventTransOrigin.ReferenceId;
        mcrBackordersByCustomerTmp.OrderCreatedDate     = DateTimeUtil::date(
                                                                DateTimeUtil::applyTimeZoneOffset(salesTable.CreatedDateTime,
                                                                DateTimeUtil::getUserPreferredTimeZone()));

        mcrBackordersByCustomerTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    public void processReport()
    {
        Query                           query;
        QueryRun                        queryRange;
        QueryBuildRange                 qbRange;
        MCRBackorderNumDays             backorderDays;
        MCRBackordersByCustomerContract contract;
        QueryBuildDataSource            mcrSalesTableQueryBuildDataSource;

        query = this.parmQuery();
        queryRange = new QueryRun(query);

        backorderDays = MCROrderParameters::find().BackorderDays;

        contract = this.parmDataContract() as MCRBackordersByCustomerContract;

        accountNumber  = contract.parmAccountNumber();
        startDate      = contract.parmStartDate();
        endDate        = contract.parmEndDate();
        expeditedOrder = contract.parmExpeditedOrder();

        utcdatetime toDateTime = DateTimeUtil::newDateTime(contract.parmEndDate(), secondsInDay -1, DateTimeUtil::getUserPreferredTimeZone());
        utcdatetime fromDateTime = DateTimeUtil::newDateTime(contract.parmStartDate(), 0, DateTimeUtil::getUserPreferredTimeZone());
        utcdatetime expectedToDate = DateTimeUtil::newDateTime(contract.parmExpectedToDate(), 0, DateTimeUtil::getUserPreferredTimeZone());

        if (accountNumber != "")
        {
            qbRange = queryRange.query().dataSourceTable(tableNum(SalesLine)).addRange(fieldNum(SalesLine, CustAccount));
            qbRange.value(QueryValue(accountNumber));
        }

        if (startDate  != dateNull()
            || endDate != dateNull())
        {
            qbRange = queryRange.query().dataSourceTable(tableNum(SalesTable)).addRange(fieldNum(SalesTable, CreatedDateTime));
            qbRange.value(QueryRange(fromDateTime, toDateTime));
        }

        date backOrderDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()) - backorderDays;
        date effectiveBackOrderDate = backOrderDate;

        if (contract.parmExpectedToDate() != dateNull())
        {
            effectiveBackOrderDate = backOrderDate < contract.parmExpectedToDate()? backOrderDate : contract.parmExpectedToDate();
        }

        QueryBuildDataSource inventTransDs     = queryRange.query().dataSourceTable(tableNum(InventTrans));
        inventTransDs.addRange(fieldNum(InventTrans, DateExpected))
            .value(SysQuery::range(dateNull(), effectiveBackOrderDate));

        queryRange.query().dataSourceTable(tableNum(SalesLine)).sortClear();
        queryRange.query().dataSourceTable(tableNum(SalesLine)).orderMode(OrderMode::ORDERBY);
        queryRange.query().dataSourceTable(tableNum(SalesLine)).addSortField(fieldNum(SalesLine, CustAccount));
        queryRange.query().dataSourceTable(tableNum(InventTrans)).sortClear();
        queryRange.query().dataSourceTable(tableNum(InventTrans)).orderMode(OrderMode::ORDERBY);
        queryRange.query().dataSourceTable(tableNum(InventTrans)).addSortField(fieldNum(InventTrans, DateExpected));

        while (queryRange.next())
        {
            salesTable              = queryRange.get(tableNum(SalesTable));
            salesLine               = queryRange.get(tableNum(SalesLine));
            inventTrans             = queryRange.get(tableNum(InventTrans));
            inventTransOrigin       = queryRange.get(tableNum(InventTransOrigin));
            inventDim               = queryRange.get(tableNum(InventDim));
            mcrSalesTableShipping   = queryRange.get(tableNum(MCRSalesTableShipping));

            if (!expeditedOrder || mcrSalesTableShipping.Expedite != '')
            {
                this.insertMCRBackordersByCustomerTmp();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>