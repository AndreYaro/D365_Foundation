<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWarehouseInitiationWizardWaveTemplateCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSWarehouseInitiationWizardWaveTemplateCreator extends WHSWarehouseInitiationWizardEntityCreatorBase
{
    private WHSWaveTemplateName waveTemplateName;
    private WHSWaveTemplateType type;
    private InventSiteId siteId;
    private InventLocationId warehouseId;
    private WhsWarehouseGroupAll warehouseSelection;
    private WhsWarehouseGroupId warehouseGroupId;
    private WHSWaveStepCode waveStepCode;
    private boolean waveContainerizationIsSelected;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>entityName</Name>
				<Source><![CDATA[
    public str entityName()
    {
        return tablePName(WHSWaveTemplateTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFrom</Name>
				<Source><![CDATA[
    public static WHSWarehouseInitiationWizardWaveTemplateCreator newFrom(
        WHSWarehouseInitiationWizardEntitiesCreatorMode _mode,
        WHSWarehouseInitiationWizardEntitiesCreationSummaryBuilder _summaryBuilder,
        WHSWaveTemplateName _waveTemplateName,
        WHSWaveTemplateType _type,
        InventSiteId _siteId,
        InventLocationId _warehouseId,
        WhsWarehouseGroupAll _warehouseSelection,
        WhsWarehouseGroupId _warehouseGroupId,
        WHSWaveStepCode _waveStepCode,
        boolean _waveContainerizationIsSelected)
    {
        WHSWarehouseInitiationWizardWaveTemplateCreator creator = new WHSWarehouseInitiationWizardWaveTemplateCreator(_mode, _summaryBuilder);
        creator.waveTemplateName = strFmt('%1 %2', _warehouseId, _waveTemplateName);
        creator.type = _type;
        creator.siteId = _siteId;
        creator.warehouseId = _warehouseId;
        creator.warehouseSelection = _warehouseSelection;
        creator.warehouseGroupId = _warehouseGroupId;
        creator.waveStepCode = _waveStepCode;
        creator.waveContainerizationIsSelected = _waveContainerizationIsSelected;

        return creator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreate</Name>
				<Source><![CDATA[
    protected boolean canCreate()
    {
        return waveTemplateName != ''
            && type != WHSWaveTemplateType::None
            && siteId != ''
            && warehouseId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>exist</Name>
				<Source><![CDATA[
    protected boolean exist()
    {
        return WHSWaveTemplateTable::exist(waveTemplateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    protected void insert()
    {
        WHSWaveTemplateTable waveTemplate;
        waveTemplate.WaveTemplateType = type;
        waveTemplate.WaveTemplateName = waveTemplateName;
        waveTemplate.WaveTemplateDesc = waveTemplateName;
        waveTemplate.AutoCreateWave = NoYes::Yes;
        waveTemplate.AutoExecuteWaveAtLoadPost = NoYes::Yes;
        waveTemplate.AutoReleaseWave = NoYes::Yes;

        waveTemplate.WarehouseGroupAll = warehouseSelection;

        if (warehouseSelection == WhsWarehouseGroupAll::Group)
        {
            waveTemplate.WarehouseGroupId = warehouseGroupId;
        }
        else if (warehouseSelection == WhsWarehouseGroupAll::Warehouse)
        {
            waveTemplate.InventLocationId = warehouseId;
            waveTemplate.InventSiteId = siteId;
        }

        waveTemplate.initSequenceNumber();
        waveTemplate.initQuery();

        waveTemplate.insert();

        if (waveContainerizationIsSelected && waveStepCode)
        {
            this.createWaveTempLineTemplateAndPostMethodName();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaveTempLineTemplateAndPostMethodName</Name>
				<Source><![CDATA[
    protected void createWaveTempLineTemplateAndPostMethodName()
    {
        WHSPostMethod postMethod = WHSPostMethod::findByMethodName('containerization');
        WHSWaveTemplateLine::createWaveTemplateLine(waveTemplateName, postMethod);
        
        WHSWaveTemplateLine   containerLine;
        select forupdate containerLine
            where
            containerLine.WaveTemplateName  == waveTemplateName
            && containerLine.PostMethodName  == postMethod.PostMethodName;

        containerLine.WaveStepCode = waveStepCode;
        containerLine.update();
       
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>