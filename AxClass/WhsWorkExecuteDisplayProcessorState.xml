<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsWorkExecuteDisplayProcessorState</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsWorkExecuteDisplayProcessorState</c> contains the state of the current processing operation in the <c>WhsWorkExecuteDisplayProcessor</c> class.
/// </summary>
internal final class WhsWorkExecuteDisplayProcessorState
{
    #WHSRF
    #WHSWorkExecuteControlElements

    public WHSUserId                userId = '';
    public WHSRFPassthrough         pass;
    public WHSWorkExecuteDisplay    workExecuteDisplay;

    private boolean                 mustUpdateSession = false;
    internal WHSWorkUserSessionId   userSessionId = emptyGuid();

    private WHSWorkExecuteMode      mode = WHSWorkExecuteMode::Login;
    private int                     step = 0;
    private container               con;
    private str                     buttonClicked = '';
        
    private WHSRFPassthrough        passOrig;
    private WHSWorkExecuteMode      modeOrig;
    private int                     stepOrig;
    private container               conOrig;
    private container               conInitial;
    private boolean                 isNextFormEnterDetourSession;
    private boolean                 isWebRequest;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeWorkExecuteDisplay</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void initializeWorkExecuteDisplay(WHSServiceXMLTranslator _xmlTranslator)
    {
        workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode, pass.lookupStr(#MenuItem));

        WhsWorkExecuteDisplayLogin workExecuteDisplayLogin = workExecuteDisplay as WhsWorkExecuteDisplayLogin;
        if (workExecuteDisplayLogin)
        {
            workExecuteDisplayLogin.setTranslator(_xmlTranslator);
        }

        workExecuteDisplay.setGlobals(mode, step, userId, pass);
        buttonClicked = workExecuteDisplay.getButtonClicked(con);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeUserInformation</Name>
				<Source><![CDATA[
    private void initializeUserInformation()
    {
        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
            if (userId && pass.exists(#UserSessionId))
            {
                userSessionId = str2guid(pass.lookup(#UserSessionId));
                mustUpdateSession = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeOriginalState</Name>
				<Source><![CDATA[
    private void storeOriginalState()
    {
        passOrig = pass.clone();
        modeOrig = mode;
        stepOrig = step;
        conOrig = con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancelConfirmation</Name>
				<Source><![CDATA[
    private boolean isCancelConfirmation()
    {
        return buttonClicked == #RFYes && pass.exists(#Confirmresult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDisplayForm</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container buildDisplayForm()
    {
        return workExecuteDisplay.displayForm(con, buttonClicked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSingleTransactionMode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean useSingleTransactionMode()
    {
        return workExecuteDisplay.callUseSingleTransactionMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateCatchWeightTagsOnCancel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean mustUpdateCatchWeightTagsOnCancel()
    {
        return pass.hasValue(WHSWorkExecuteDisplayCatchWeightControls::ScannedCatchWeightTagList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRemoveCapturedWeightOnCancel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean mustRemoveCapturedWeightOnCancel()
    {
        return pass.hasValue(WHSWorkExecuteDisplayCatchWeightControls::ASNItemRecId)
                && WHSCatchWeightConfigurationKeyManager::instance().isEnabled()
                && (mode == WHSWorkExecuteMode::LicensePlateReceiving
                ||  mode == WHSWorkExecuteMode::LicensePlateReceivingAndLocate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureWorkExecuteDisplay</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void ensureWorkExecuteDisplay()
    {
        if (!workExecuteDisplay)
        {
            workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        }
        workExecuteDisplay.setGlobals(mode, step, userId, pass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLogin</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isLogin()
    {
        return mode == WHSWorkExecuteMode::Login;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUseProcessGuide</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean mustUseProcessGuide()
    {
        return WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).useProcessGuideFramework();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRemoveUserFromOpenLPsOnCancel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean mustRemoveUserFromOpenLPsOnCancel()
    {
        if (step != 1 || !pass.hasValue(#ItemId))
        {
            WHSMenuItemName  menuItemName = pass.lookupStr(#MenuItem);
            WHSRFMenuItemTable menuItem = WHSRFMenuItemTable::find(menuItemName);

            return menuItem.WorkCreationProcess == WHSWorkCreationProcess::MixedLPReceiving
                || menuItem.WorkCreationProcess == WHSWorkCreationProcess::MixedLPReceivingAndLocate;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean mustUpdateSession(container _formContainer)
    {
        boolean updateSession = mustUpdateSession;

        if (workExecuteDisplay)
        {
            if (!updateSession)
            {
                updateSession = workExecuteDisplay.parmOverrideSession();
            }
            else if (!workExecuteDisplay.callMustUpdateSessionOnError())
            {
                updateSession = !workExecuteDisplay.hasError(_formContainer);
            }
        }
        return updateSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReturnFromDetour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean shouldReturnFromDetour()
    {
        if (!this.isDetourExiting())
        {
            return false;
        }

        return this.isCancel() || (this.isBack() && this.shouldReturnFromDetourOnBackClicked());
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReturnFromDetourOnBackClicked</Name>
				<Source><![CDATA[
    private boolean shouldReturnFromDetourOnBackClicked()
    {
        return WHSRFMenuItemTable::find(pass.lookupStr(#MenuItem)).WorkActivity == WHSWorkActivity::WorkList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWhenComingFromWorkList</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void resetWhenComingFromWorkList()
    {
        if (pass.exists(#CameFromWorkList))
        {
            str cameFromWorkListMenuItem = pass.lookup(#CameFromWorkList);
            pass.insert(#MenuItem, cameFromWorkListMenuItem);
            WHSRFMenuItemTable menuItem = WHSRFMenuItemTable::find(cameFromWorkListMenuItem);
            mode = WHSRFMenuItemTable::getWHSWorkExecuteMode(menuItem);
            workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
                    
            con = conPoke(con, #StateInfo, [mode, 0]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCatchWeightTagOnCancelOrLogoff</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void handleCatchWeightTagOnCancelOrLogoff()
    {
        // Must update catch weight tags, before the check below potentially resets the pass
        if (this.isCancel())
        {
            if (this.mustUpdateCatchWeightTagsOnCancel())
            {
                workExecuteDisplay.callUpdateCatchWeightTagsOnCancel();
            }

            if (this.mustRemoveCapturedWeightOnCancel())
            {
                workExecuteDisplay.removeCapturedWeightOnCancel();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDetourButtonClicked</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isDetourButtonClicked()
    {
        if (userId && this.workUserSessionState().canEnterDetour())
        {
            int controlCount = conLen(con);
            for (int i = #FieldControlStartLoc; i <= controlCount; i++)
            {
                container conElement = conPeek(con, i);
                str controlType = conPeek(conElement, #controlType);

                if (controlType == #RFDetourButton
                    && conPeek(conElement, #data) == #DataButtonClicked)
                {
                    return true;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>navigateToDetour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void navigateToDetour()
    {
        XML xmlInputToStore;
        if (WhsMobileDetoursUseTheLastMainSessionXmlFlight::instance().isEnabled())
        {
            xmlInputToStore = WhsrfPassthrough::createFromFormContainer(conInitial).parmRequestXml();
        }
        this.workUserSessionState().navigateToDetour(xmlInputToStore);
        this.initPassForDetour();

        mode = WHSWorkExecuteMode::Menu;
        workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);

        con = conPoke(con, #StateInfo, [mode, 0]);
        con = conPoke(con, #PassThroughInfo, pass.pack());

        isNextFormEnterDetourSession = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPassForDetour</Name>
				<Source><![CDATA[
    private void initPassForDetour()
    {
        pass = WHSRFPassthrough::newEmpty();
        pass.insert(#UserId, userId);
        pass.insert(#UserSessionId, guid2str(userSessionId));
        pass.parmDeviceId(passOrig.parmDeviceId());
        pass.parmInventLocationId(passOrig.parmInventLocationId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnFromDetour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container returnFromDetour(WHSServiceXMLTranslator _xmlTranslator, container _messageControl)
    {
        return this.workUserSessionState(true).returnFromDetour(conOrig, _messageControl, _xmlTranslator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteEmptyDetour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void deleteEmptyDetour()
    {
        this.workUserSessionState(true).deleteEmptyDetour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetPassOnCancelOrLogOff</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void resetPassOnCancelOrLogOff()
    {
        WhsRFPassthroughReset resetter = WhsRFPassthroughReset::newFromState(this, mode, step);

        if (resetter.run())
        {
            con = conPoke(con, #PassthroughInfo, resetter.pass.pack());
        }
        pass = resetter.pass;

        if (resetter.mode != mode || resetter.step != step)
        {
            mode = resetter.mode;
            step = resetter.step;

            con = conPoke(con, #StateInfo, [mode, step]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCancel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isCancel()
    {
        return buttonClicked == #RFCancel || this.isCancelConfirmation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isBack()
    {
        return buttonClicked == #RFBack;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLogOff</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isLogOff()
    {
        WHSWorkActivity workActivity = WHSRFMenuItemTable::find(buttonClicked).WorkActivity;
        return workActivity == WHSWorkActivity::LogOff;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExceptionHandler</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkExecuteDisplayExceptionHandler createExceptionHandler()
    {
        return WHSWorkExecuteDisplayExceptionHandler::construct(
                        workExecuteDisplay,
                        passOrig,
                        modeOrig,
                        stepOrig,
                        conOrig,
                        userId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOnCancel</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void resetOnCancel()
    {
        step = workExecuteDisplay.parmStep();
        con = conPoke(con, #PassthroughInfo, pass.pack());

        this.resetAfterButtonClick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOnBack</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void resetOnBack()
    {
        this.resetAfterButtonClick();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAfterButtonClick</Name>
				<Source><![CDATA[
    private void resetAfterButtonClick()
    {
        int stepFromWorkExecuteDisplay = workExecuteDisplay.parmStep();
        WHSWorkExecuteMode modeFromWorkExecuteDisplay = workExecuteDisplay.parmModeInternal();
        
        con = conPoke(con, #StateInfo, [modeFromWorkExecuteDisplay, stepFromWorkExecuteDisplay]);

        if (mode != modeFromWorkExecuteDisplay)
        {
            mode = modeFromWorkExecuteDisplay;
            step = stepFromWorkExecuteDisplay;
            workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
            workExecuteDisplay.setGlobals(mode, step, userId, pass);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExecuteProcessParameters</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSExecuteProcessParameters createExecuteProcessParameters()
    {
        WHSExecuteProcessParameters parameters = WHSExecuteProcessParameters::construct();
        parameters.mode = mode;
        parameters.step = step;
        parameters.pass = pass;
        parameters.con = con;

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivityData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWarehouseMobileDeviceActivityData createActivityData(
        str _requestXML,                
        WHSUserActivityDuration _durationInMilliSeconds)
    {
        return WHSWarehouseMobileDeviceActivityData::construct(userId, mode, step, buttonClicked, _requestXML, pass, _durationInMilliSeconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOriginalActivityData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWarehouseMobileDeviceActivityData createOriginalActivityData(WHSUserId _userId = userid)
    {
        return WHSWarehouseMobileDeviceActivityData::construct(_userId, mode, step, buttonClicked, '', passOrig, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetWhenLoggingOff</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void resetWhenLoggingOff(WHSServiceXMLTranslator _xmlTranslator)
    {
        con = conNull();
        mode = WHSWorkExecuteMode::Login;
        step = 0;
        buttonClicked = '';
        
        if (WhsMobileAutoLoginFlight::instance().isEnabled())
        {
            this.initializeWorkExecuteDisplay(_xmlTranslator);

            WhsWorkExecuteDisplayLogin workExecuteDisplayLogin = workExecuteDisplay as WhsWorkExecuteDisplayLogin;
            if (workExecuteDisplayLogin)
            {
                workExecuteDisplayLogin.parmAllowAutoLogin(false);
            }
        }
        else
        {
            workExecuteDisplay = WHSWorkExecuteDisplay::construct(mode);
        }

        mustUpdateSession = false;
        userId = '';
        userSessionId = emptyGuid();

        if (pass.exists(#UserId))
        {
            pass.remove(#UserId);
            pass.remove(#UserSessionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDeviceId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void resetDeviceId()
    {
        pass.parmDeviceId(passOrig.parmDeviceId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WhsWorkExecuteDisplayProcessorState construct()
    {
        return new WhsWorkExecuteDisplayProcessorState();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeIsWebRequest</Name>
				<Source><![CDATA[
    private void initializeIsWebRequest(container _con)
    {         
        container stateInfo = conPeek(_con, #StateInfo);
        isWebRequest = conPeek(stateInfo, #StateInfoMode) == WHSWorkExecuteMode::WebRequestDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSessionTokens</Name>
				<Source><![CDATA[
    internal container prepareSessionTokens(container _con)
    {
        if (isWebRequest && passOrig)
        {
            container passthroughInfo = conPeek(_con, #PassthroughInfo);
            if (conLen(passthroughInfo) > 0)
            {
                WHSRFPassthrough localPass = WHSRFPassthrough::create(passthroughInfo);

                if (passOrig.parmSessionToken() != emptyGuid())
                {
                    localPass.parmPreviousSessionToken(passOrig.parmSessionToken());
                }
                localPass.regenerateSessionToken();

                return conPoke(_con, #PassthroughInfo, localPass.pack());                
            }
        }

        return _con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromContainer</Name>
				<Source><![CDATA[
    private void initializeFromContainer(container _con)
    {
        conInitial = _con;
        this.initializeIsWebRequest(_con);
        con = WHSWorkExecuteDisplay::authenticateSession(_con);

        // Read out variables
        if (con)
        {
            container stateInfo = conPeek(con, #StateInfo);
            mode = conPeek(stateInfo, #StateInfoMode);
            step = conPeek(stateInfo, #StateInfoStep);

            container passthroughInfo = conPeek(con, #PassthroughInfo);
            if (conLen(passthroughInfo) > 0)
            {
                pass = WHSRFPassthrough::create(passthroughInfo);
            }

            this.initializeSharedParametersContext();
        }

        if (!pass)
        {
            pass = WHSRFPassthrough::newEmpty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeSharedParametersContext</Name>
				<Source><![CDATA[
    private void initializeSharedParametersContext()
    {
        WHSMobileAppNextPageRequestApplicationInsightsActivity::addModeAsSharedContext(mode);
        WHSMobileAppNextPageRequestApplicationInsightsActivity::addStepAsSharedContext(step);
    }

]]></Source>
			</Method>
			<Method>
				<Name>workUserSessionState</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkUserSessionStateFacade workUserSessionState(boolean _forUpdate = false)
    {
        WHSWorkUserSessionStateFacade sessionState;
        
        if (userId)
        {
            ttsbegin;
            sessionState = WHSWorkUserSession::find(userId).sessionState(_forUpdate);
            ttscommit;
        }

        return sessionState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFromContainer</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WhsWorkExecuteDisplayProcessorState createFromContainer(container _con)
    {
        WhsWorkExecuteDisplayProcessorState state = WhsWorkExecuteDisplayProcessorState::construct();
        state.initializeFromContainer(_con);
        state.storeOriginalState(); 
        state.initializeUserInformation();

        return state;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDetourExiting</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isDetourExiting()
    {
        return mode == WHSWorkExecuteMode::Menu
            && this.isDetourSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDetourSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isDetourSession()
    {
        return userId 
            && this.workUserSessionState().parmSessionType() != WHSWorkUserSessionType::Main;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNextFormEnterDetourSession</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean isNextFormEnterDetourSession()
    {
        return isNextFormEnterDetourSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDataToDetour</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal container populateDataToDetour(WHSMobileAppStepId _stepId, container _detourFormContainer, WHSServiceXMLTranslator _xmlTranslator)
    {
        WHSWorkUserSessionStateFacade sessionState = this.workUserSessionState();

        boolean hasBeenPopulated;
        str xmlState;
        [_detourFormContainer, hasBeenPopulated, xmlState] = sessionState.runDetour(WHSMobileAppFlowStepDetourFieldDirection::FromMainToDetour, passOrig.parmMenuItem(),
            _stepId, _stepId, conOrig, _detourFormContainer, _xmlTranslator);

        return [_detourFormContainer, xmlState];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>