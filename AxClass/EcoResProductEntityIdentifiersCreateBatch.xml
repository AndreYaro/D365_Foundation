<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductEntityIdentifiersCreateBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The product entity identifiers create batch class.
/// </summary>
public class EcoResProductEntityIdentifiersCreateBatch extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EcoResProductEntityIdentifiersCreateBatch</c> class.
    /// </summary>
    /// <returns>The new instance of the <c>EcoResProductEntityIdentifiersCreateBatch</c> class.</returns>
    public static EcoResProductEntityIdentifiersCreateBatch construct()
    {
        return new EcoResProductEntityIdentifiersCreateBatch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>EcoResProductEntityIdentifiersCreateBatch</c> class.
    /// </summary>
    /// <param name = "_args">The arguments.</param>
    /// <returns>The new instance of the <c>EcoResProductEntityIdentifiersCreateBatch</c> class.</returns>
    public static EcoResProductEntityIdentifiersCreateBatch constructFromArgs(Args _args)
    {
        EcoResProductEntityIdentifiersCreateBatch createBatch = EcoResProductEntityIdentifiersCreateBatch::construct();
        return createBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        var createBatch = EcoResProductEntityIdentifiersCreateBatch::constructFromArgs(_args);

        if (createBatch.prompt())
        {
            createBatch.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SCM:EcoResProductEntityIdentifiersCreate";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.deleteAllIdentifiers();

        EcoResProduct product;

        while select product
        {
            ttsbegin;

            EcoResProductEntityIdentifiersCreator creator = EcoResProductEntityIdentifiersCreator::newFromProduct(product);
            creator.createAllIdentifiers();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllIdentifiers</Name>
				<Source><![CDATA[
    private void deleteAllIdentifiers()
    {
        ttsbegin;

        EcoResProductEntityIdentifier identifier;

        delete_from identifier;

        EcoResProductEntityIdentifierScope identifierScope;

        delete_from identifierScope;

        ttscommit;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>