<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsBillOfLadingDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSBillOfLading</c> class declares the variables and tables required for the
///    <c>WHSBillOfLading</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(WHSBillOfLadingReportQuery))
]
class WhsBillOfLadingDP extends SRSReportDataProviderPreProcessTempDB
{
    WHSBillOfLading             billOfLading;
    WHSBillOfLadingTmp          whsBillOfLadingTmp;
    WHSParameters               whsParameters;

    InventQty                   totalQty;
    Weight                      totalWeight;

    InventQty                   totalCarrierHandlingQty;
    InventQty                   totalCarrierPackageQty;
    Weight                      totalCarrierWeight;

    Integer                     totalNumberOfPages;

    RecordLinkList              orderList;
    RecordLinkList              carrierList;

    #define.FrontPageOrderLines(5)
    #define.FrontPageCarrierLines(5)

    #define.SupplementPageOrderLines(8)
    #define.SupplementPageCarrierLines(12)

    #define.CheckedX('X')
    #define.CircleChar('O')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWHSBillOfLadingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the actual data for the report from the temporary table.
    /// </summary>
    /// <returns>
    /// The <c>WHSBillOfLadingTmp</c> temporary table.
    /// </returns>
    [SrsReportDataSetAttribute(tableStr(WHSBillOfLadingTmp))]
    public WHSBillOfLadingTmp getWHSBillOfLadingTmp()
    {
        select whsBillOfLadingTmp;
        return whsBillOfLadingTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBOL</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates the Bill Of lading calculations.
    /// </summary>
    /// <remarks>
    ///    This method calculates the total quantities for carrier and order. It also calculates the total
    ///    number of pages for a Bill of lading specified by Bill Of lading ID.
    /// </remarks>
    private void generateBOL()
    {
        WHSBillOfLadingCarrier      billOfLadingCarrier;
        WHSBillOfLadingOrder        billOfLadingOrder;
        WHSBillOfLading             childBOL;
        Counter                     orderPages;
        Counter                     carrierPages;

        totalQty                = 0;
        totalWeight             = 0;
        totalCarrierHandlingQty = 0;
        totalCarrierPackageQty  = 0;
        totalCarrierWeight      = 0;

        orderList               = new RecordLinkList();
        carrierList             = new RecordLinkList();

        while select billOfLadingOrder
            where billOfLadingOrder.BillOfLadingId == billOfLading.BillOfLadingId
        {
            totalQty            += billOfLadingOrder.Qty;
            totalWeight         += billOfLadingOrder.Weight;
            orderList.ins(billOfLadingOrder);
        }

        while select billOfLadingCarrier
            where billOfLadingCarrier.BillOfLadingId == billOfLading.BillOfLadingId                
        {
            totalCarrierHandlingQty     += billOfLadingCarrier.HandlingQty;
            totalCarrierPackageQty      += billOfLadingCarrier.PackageQty;
            totalCarrierWeight          += billOfLadingCarrier.Weight;
            carrierList.ins(billOfLadingCarrier);
        }

        if (billOfLading.MasterBOLFlag)
        {
            while select billOfLadingOrder
                where billOfLadingOrder.BillOfLadingId != billOfLading.BillOfLadingId
                exists join childBOL
                    where childBOL.MasterBillOfLadingId == billOfLading.BillOfLadingId
                       && childBOL.BillOfLadingId       == billOfLadingOrder.BillOfLadingId
            {
                totalQty            += billOfLadingOrder.Qty;
                totalWeight         += billOfLadingOrder.Weight;
                orderList.ins(billOfLadingOrder);
            }

            while select billOfLadingCarrier
                where billOfLadingCarrier.BillOfLadingId != billOfLading.BillOfLadingId
                exists join childBOL
                    where childBOL.MasterBillOfLadingId == billOfLading.BillOfLadingId
                       && childBOL.BillOfLadingId       == billOfLadingCarrier.BillOfLadingId
            {
                totalCarrierHandlingQty     += billOfLadingCarrier.HandlingQty;
                totalCarrierPackageQty      += billOfLadingCarrier.PackageQty;
                totalCarrierWeight          += billOfLadingCarrier.Weight;
                carrierList.ins(billOfLadingCarrier);
            }
        }

        if (orderList.len() <= #FrontPageOrderLines &&
            carrierList.len() <= #FrontPageCarrierLines)
        {
            totalNumberOfPages  = 1;
        }
        else
        {
            orderPages          = 1 + orderList.len() div #SupplementPageOrderLines;
            if ((orderPages - 1) * #SupplementPageOrderLines == orderList.len())
            {
                orderPages--;
            }

            carrierPages        = 1 + carrierList.len() div #SupplementPageCarrierLines;
            if ((carrierPages - 1) * #SupplementPageCarrierLines == carrierList.len())
            {
                carrierPages--;
            }

            totalNumberOfPages = 1 + max(orderPages, carrierPages);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPageForOrderAndCarrier</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the current page for order or carrier.
    /// </summary>
    /// <param name="_rowNum">
    ///    The row number.
    /// </param>
    /// <returns>
    ///    The current page number.
    /// </returns>
    private int getCurrentPageForOrderAndCarrier(int _rowNum)
    {
        int     currentPageNumber = 0;
        int     row;
        int     additionalPages;
        real    additionalPage;
        int     firstPageStandard;
        int     supplementPageStandard;

        firstPageStandard = #FrontPageOrderLines;
        supplementPageStandard = max(#SupplementPageOrderLines,#SupplementPageCarrierLines);

        if (_rowNum + 1 <= firstPageStandard)
        {
            currentPageNumber = 1;
        }
        else
        {
            row = _rowNum + 1 - firstPageStandard;
            additionalPages = row div supplementPageStandard;
            additionalPage = row mod supplementPageStandard;
            if (additionalPage == 0)
            {
                currentPageNumber = 1 + additionalPages;
            }
            else
            {
                currentPageNumber = 1 + additionalPages + 1;
            }
        }

        return currentPageNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDummyRecordsForCustomer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the dummy record must be inserted for order details.
    /// </summary>
    /// <param name="_rowCount">
    ///    The row number.
    /// </param>
    /// <returns>
    ///    true if the dummy records should be inserted for the order; otherwise, false.
    /// </returns>
    private boolean getDummyRecordsForCustomer(int _rowCount)
    {
        boolean check       = false;
        int     gap         = #SupplementPageCarrierLines - #SupplementPageOrderLines;
        int     divisor     = 0;
        int     remainder   = 0;
        int     excludeRows = 0;
        int     rowCount;
        int     pageCount;

        rowCount            = _rowCount + 1;

        /* First Supplement to the BOL page has `rowCount` value range from 6 to 17.
        For the second and subsequent Supplement to the BOL pages we need "convert" them to the first page to avoid errors in dispersing of Customer order 
        numbers through the pages, i.e. to move `rowCount` value to equivalent position on the first supplemental page.
        For example: 2nd Supplement page starts with `rowCount` value = 18 (18 - 6 = 12 `rowCount` values ahead the first line of the 1 Supplement page),
        we get the number of this page for the BOL - actually it is 3 (1 main BOL page + 2 Supplement pages) to calculate the multiplier (3 - 2 = 1)
        To "convert" the current page to the first page it is necessary to subtract 12 * multiplier from the current `rowCount` value (18 - 12 * 1 = 6).*/
        if (rowCount > #FrontPageOrderLines + #SupplementPageCarrierLines
            && WhsBillOfLadingDPPopulateAllCustomerOrderNumbersFlight::instance().isEnabled())
        {
            pageCount           = this.getCurrentPageForOrderAndCarrier(_rowCount);
            rowCount = rowCount - (#SupplementPageCarrierLines * (pageCount - 2));
        }

        if (rowCount > #FrontPageOrderLines)
        {
            rowCount            = rowCount - #FrontPageOrderLines;
            divisor             = rowCount div #SupplementPageOrderLines;
            if (divisor == 0)
            {
                check = false;
            }
            else
            {
                excludeRows     = (divisor - 1) * 2;
                remainder       = (rowCount - excludeRows) mod #SupplementPageOrderLines;
                if (remainder == 0)
                {
                    check = false;
                }
                else
                {
                    if (remainder <= gap)
                    {
                        check = true;
                    }
                    else
                    {
                        check = false;
                    }
                }
            }
        }

        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the maximum number of records as per page details for a bill of lading ID.
    /// </summary>
    /// <returns>
    ///    The total number of records for the bill Of lading ID.
    /// </returns>
    private int getTotalRecords()
    {
        int maxRows     = 0;
        maxRows         = #FrontPageOrderLines + ((totalNumberOfPages - 1) * #SupplementPageCarrierLines);

        return maxRows;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWHSBillOfLadingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the specified records in the temporary table.
    /// </summary>
    /// <param name="_rowNum">
    ///    The row or record number for the bill of lading ID.
    /// </param>
    /// <param name="_emptyRecords">
    ///    A Boolean value that specifies whether empty records should be inserted.
    /// </param>
    /// <param name="_dummyRecordsForCustomer">
    ///    A Boolean value that specifies whether dummy records should entered for customers or order details.
    /// </param>
    /// <param name="_useNextBillOfLadingOrder">
    ///    A Boolean value that indicates whether to look for a customer related record link list for the next
    ///    record.
    /// </param>
    /// <param name="_useNextBillOfLadingCarrier">
    ///    A Boolean value that indicates whether to look for a carrier related to a record link list for the
    ///    next record.
    /// </param>
    /// <remarks>
    ///    This method checks for a particular record and inserts it and also inserts dummy records when it is
    ///    required.
    /// </remarks>
    private void insertWHSBillOfLadingTmp(int         _rowNum,
                                          boolean     _emptyRecords,
                                          boolean     _dummyRecordsForCustomer,
                                          boolean     _useNextBillOfLadingOrder,
                                          boolean     _useNextBillOfLadingCarrier)
    {
        this.initializeFromWHSBillOfLadingOrder(_useNextBillOfLadingOrder, _dummyRecordsForCustomer);
        this.initializeFromWHSBillOfLadingCarrier(_useNextBillOfLadingCarrier);
        this.initializeShipFromAddress();
        this.initializeShipToAddress();
        this.initializeWHSBillOfLadingTmp(_rowNum);
        this.initializeEMSCodes();
        this.initializeBillOfLadingFooter();

        whsBillOfLadingTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBillOfLadingFooter</Name>
				<Source><![CDATA[
    private void initializeBillOfLadingFooter()
    {
        whsBillOfLadingTmp.FooterMessage = whsParameters.BillOfLadingFooterText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEMSCodes</Name>
				<Source><![CDATA[
    protected void initializeEMSCodes()
    {
        WHSShipmentTable    shipmentTable;
        WHSLoadLine         whsLoadLine;
        HMIMItemMaterial    itemMaterial;

        whsBillOfLadingTmp.HMIMEMSCodes = HMIMEMS::find(whsParameters.HMIMEMSCode).Description;

        while select EMSCode from itemMaterial
            group by EMSCode
            where itemMaterial.EMSCode      !=  ''
               && itemMaterial.RegCode      ==  WHSShipmentTable::find(billOfLading.ShipmentId).HMIMGetRegCode()
        join RecId from whsLoadLine
            where whsLoadLine.ItemId        ==  itemMaterial.ItemId
        join RecId from shipmentTable
            where shipmentTable.ShipmentId  ==  billOfLading.ShipmentId
               && shipmentTable.LoadId      ==  whsLoadLine.LoadId
        {
            whsBillOfLadingTmp.HMIMEMSCodes += whsBillOfLadingTmp.HMIMEMSCodes ? ' ' : '';
            whsBillOfLadingTmp.HMIMEMSCodes += HMIMEMS::find(itemMaterial.EMSCode).Description;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the required data for the <c>WHSBillOfLading</c> report and
    ///    inserts it into the <c>WHSBillOfLadingTmp</c> temporary table.
    /// </summary>
    public void processReport()
    {
        QueryRun                queryRun;
        int                     len;
        int                     counterPrimary,counterSecondaryOrder,counterSecondaryCarrier;
        boolean                 multiplePages;
        boolean                 dummyRecordsForCustomers;
        boolean                 peekCustomer;
        boolean                 peekCarrier;

        whsParameters = WHSParameters::find();

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            //Set all variables to normal for each Bill of lading record/Id
            multiplePages                    =   false;
            len                              =   0;
            counterPrimary                   =   0;
            counterSecondaryOrder            =   0;
            counterSecondaryCarrier          =   0;
            dummyRecordsForCustomers         =   false;
            peekCustomer                     =   false;
            peekCarrier                      =   false;

            billOfLading                     =   queryRun.get(tableNum(WHSBillOfLading));
            this.generateBOL();
            len = this.getTotalRecords();

            // If multi pages insert dummy columns in first page
            if (totalNumberOfPages > 1)
            {
                multiplePages = true;
                for (counterPrimary = 0; counterPrimary < #FrontPageOrderLines; counterPrimary++)
                {
                    this.insertWHSBillOfLadingTmp(counterPrimary, true, dummyRecordsForCustomers, peekCustomer, peekCarrier);
                }
            }

            while (counterPrimary < len)
            {
                // Get whether to insert dummy columns or not
                if (multiplePages)
                {
                    dummyRecordsForCustomers = this.getDummyRecordsForCustomer(counterPrimary);
                }

                if (counterSecondaryCarrier < carrierList.len())
                {
                    carrierList.next();// Go To next record in record list
                    peekCarrier = true;
                    counterSecondaryCarrier++;
                }
                else
                {
                    peekCarrier = false;
                }

                if (!dummyRecordsForCustomers)
                {
                    if (counterSecondaryOrder < orderList.len())
                    {
                        orderList.next();
                        peekCustomer = true;
                        counterSecondaryOrder++;
                    }
                    else
                    {
                        peekCustomer = false;
                    }
                }
                else
                {
                    peekCustomer = false;
                }

                this.insertWHSBillOfLadingTmp(counterPrimary, false, dummyRecordsForCustomers, peekCustomer, peekCarrier);

                counterPrimary++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnCheckedXIfTrue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Will return the designated CheckedX character if condition is true.
    /// </summary>
    /// <param name="_condition">
    /// The Boolean value of the condition being evaluated in the caller.
    /// </param>
    /// <returns>
    /// A string which will either be the CheckedX character or blank;
    /// </returns>
    /// <remarks>
    /// The CheckedX character is used in the bill of lading report as the value populated in checkbox like entities.
    /// </remarks>
    private str returnCheckedXIfTrue(boolean _condition)
    {
        return _condition ? #CheckedX : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeWHSBillOfLadingTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the WHSBillOfLadingTmp record before inserting it into the table.
    /// </summary>
    /// <param name="_rowNum">
    ///    The row or record number for the bill of lading ID.
    /// </param>
   protected void initializeWHSBillOfLadingTmp(int _rowNum)
   {
        whsBillOfLadingTmp.TotalNumberOfPages       = totalNumberOfPages;

        // Fills in the header information fields on the report
        whsBillOfLadingTmp.CarrierCode              = billOfLading.CarrierCode;
        whsBillOfLadingTmp.CarrierServiceCode       = billOfLading.CarrierServiceCode;
        whsBillOfLadingTmp.Name                     = billOfLading.CarrierName;
        whsBillOfLadingTmp.TrailerNumber            = billOfLading.TrailerNumber;
        whsBillOfLadingTmp.scac                     = billOfLading.SCAC;
        whsBillOfLadingTmp.ProNumShipment           = billOfLading.ProNum;
        whsBillOfLadingTmp.CustAccount              = billOfLading.CustAccount;
        whsBillOfLadingTmp.SealNum                  = billOfLading.SealNum;
        whsBillOfLadingTmp.ShipmentId               = billOfLading.ShipmentId;
        whsBillOfLadingTmp.BillOfLadingId           = billOfLading.BillOfLadingId;
        whsBillOfLadingTmp.Notes                    = billOfLading.Notes;

        // Fills in fields on Master bill of lading and freight charge terms portion of the report.
        whsBillOfLadingTmp.MasterBillOfLadingId     = billOfLading.MasterBillOfLadingId;
        whsBillOfLadingTmp.FreightPrepaid           = this.returnCheckedXIfTrue(billOfLading.FreightChargeTerms == WMSFreightChargeTerms::Prepaid);
        whsBillOfLadingTmp.FreightCollect           = this.returnCheckedXIfTrue(billOfLading.FreightChargeTerms == WMSFreightChargeTerms::Collect);
        whsBillOfLadingTmp.FreightThirdParty        = this.returnCheckedXIfTrue(billOfLading.FreightChargeTerms == WMSFreightChargeTerms::ThirdParty);
        whsBillOfLadingTmp.MasterBillOfLadingId     = this.returnCheckedXIfTrue(billOfLading.MasterBOLFlag == NoYes::Yes);

        // Fills in the fields on the Shipment (Third Party) Header portion of the report
        LogisticsPostalAddress address              = LogisticsPostalAddress::findRecId(billOflading.ThirdPartyPostalAddress);
        whsBillOfLadingTmp.CompanyName              = billOfLading.displayThirdPartyName();
        whsBillOfLadingTmp.Address                  = address.Address;

        // Get page number for order lines and carrier lines
        whsBillOfLadingTmp.CustLine                 = this.getCurrentPageForOrderAndCarrier(_rowNum);
        whsBillOfLadingTmp.CountLine                = whsBillOfLadingTmp.CustLine;

        // Lower section of BOL
        whsBillOfLadingTmp.TrailerLoaded            = billOfLading.TrailerLoaded;
        whsBillOfLadingTmp.LoadedByShipperValue     = this.returnCheckedXIfTrue(billOfLading.TrailerLoaded == WMSTrailerLoaded::ByShipper);
        whsBillOfLadingTmp.LoadedByDriverValue      = this.returnCheckedXIfTrue(billOfLading.TrailerLoaded == WMSTrailerLoaded::ByDriver);
        whsBillOfLadingTmp.FreightCounted           = billOfLading.FreightCounted;
        whsBillOfLadingTmp.CountedByShipperValue    = this.returnCheckedXIfTrue(billOfLading.FreightCounted == WMSFreightCounted::ByShipper);
        whsBillOfLadingTmp.CountedByDriver1Value    = this.returnCheckedXIfTrue(billOfLading.FreightCounted == WMSFreightCounted::ByDriverPallets);
        whsBillOfLadingTmp.CountedByDriver2Value    = this.returnCheckedXIfTrue(billOfLading.FreightCounted == WMSFreightCounted::ByDriverPieces);

        // Carrier totals
        whsBillOfLadingTmp.TotalHandlingQty         = totalCarrierHandlingQty;
        whsBillOfLadingTmp.TotalPackingQty          = totalCarrierPackageQty;
        whsBillOfLadingTmp.TotalCarrierWeight       = totalCarrierWeight;

        // Order totals
        whsBillOfLadingTmp.TotalWeight              = totalWeight;
        whsBillOfLadingTmp.TotalQty                 = totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeShipFromAddress</Name>
				<Source><![CDATA[
    private void initializeShipFromAddress()
    {
        // Fills in the fields on the Shipment (Ship from) Header portion of the report
        LogisticsPostalAddress address  = LogisticsPostalAddress::findRecId(billOfLading.ShippingPostalAddress);

        whsBillOfLadingTmp.ShipFromName = billOfLading.displayShippingName();
        whsBillOfLadingTmp.FromStreet   = address.Street;
        whsBillOfLadingTmp.FromCity     = address.City;
        whsBillOfLadingTmp.FromState    = address.State;
        whsBillOfLadingTmp.FromZipCode  = address.ZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeShipToAddress</Name>
				<Source><![CDATA[
    private void initializeShipToAddress()
    {
        // Fills in the fields on the Shipment (Ship to) Header portion of the report
        LogisticsPostalAddress address  = LogisticsPostalAddress::findRecId(billOflading.DeliveryPostalAddress);

        whsBillOfLadingTmp.ShipToName   = billOfLading.displayDeliveryName();
        whsBillOfLadingTmp.ToCity       = address.City;
        whsBillOfLadingTmp.ToStreet     = address.Street;
        whsBillOfLadingTmp.ToState      = address.State;
        whsBillOfLadingTmp.ToZipCode    = address.ZipCode;
        whsBillOfLadingTmp.DeliveryName = whsBillOfLadingTmp.ShipToName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromWHSBillOfLadingCarrier</Name>
				<Source><![CDATA[
    private void initializeFromWHSBillOfLadingCarrier(boolean _useNextBillOfLadingCarrier)
    {
        if (_useNextBillOfLadingCarrier)
        {
            WHSBillOfLadingCarrier billOfLadingCarrier  = carrierList.peek();

            whsBillOfLadingTmp.LineQty                  = billOfLadingCarrier.HandlingQty;
            whsBillOfLadingTmp.DefaultHandlingType      = billOfLadingCarrier.HandlingType;
            whsBillOfLadingTmp.Qty                      = billOfLadingCarrier.PackageQty;
            whsBillOfLadingTmp.PackingType              = billOfLadingCarrier.PackageType;
            whsBillOfLadingTmp.grossWeight              = billOfLadingCarrier.Weight;
            whsBillOfLadingTmp.HazardousMaterial        = this.returnCheckedXIfTrue(billOfLadingCarrier.HazardousMaterial);
            whsBillOfLadingTmp.NmfcName                 = billOfLadingCarrier.Name;
            whsBillOfLadingTmp.LTLClassCode             = billOfLadingCarrier.LTLClassCode;
            whsBillOfLadingTmp.nmfcCode                 = billOfLadingCarrier.NMFCCode;
        }
        else
        {
            whsBillOfLadingTmp.LineQty                  = 0;
            whsBillOfLadingTmp.DefaultHandlingType      = '';
            whsBillOfLadingTmp.Qty                      = 0;
            whsBillOfLadingTmp.PackingType              = '';
            whsBillOfLadingTmp.grossWeight              = 0;
            whsBillOfLadingTmp.HazardousMaterial        = '';
            whsBillOfLadingTmp.NmfcName                 = '';
            whsBillOfLadingTmp.LTLClassCode             = '';
            whsBillOfLadingTmp.nmfcCode                 = '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromWHSBillOfLadingOrder</Name>
				<Source><![CDATA[
    private void initializeFromWHSBillOfLadingOrder(boolean _useNextBillOfLadingOrder,
                                                    boolean _dummyRecordsForCustomer)
    {
        // Fills in Customer Order information field on the report
        if (_useNextBillOfLadingOrder)
        {
            WHSBillOfLadingOrder billOfLadingOrder  = orderList.peek();

            whsBillOfLadingTmp.PurchOrderFormNum    = billOfLadingOrder.OrderNum;
            whsBillOfLadingTmp.CustOrderPackQty     = billOfLadingOrder.Qty;
            whsBillOfLadingTmp.CustOrderWeight      = billOfLadingOrder.Weight;
            whsBillOfLadingTmp.CircleY              = (billOfLadingOrder.OrderNum && billOfLadingOrder.IsPallet)    ? #CircleChar : '';
            whsBillOfLadingTmp.CircleN              = (billOfLadingOrder.OrderNum && !billOfLadingOrder.IsPallet)   ? #CircleChar : '';
            whsBillOfLadingTmp.AdditionalInfo       = billOfLadingOrder.AdditionalInfo;
            whsBillOfLadingTmp.DummyCustomer        = NoYes::No;
        }
        else
        {
            whsBillOfLadingTmp.PurchOrderFormNum    = '';
            whsBillOfLadingTmp.CustOrderPackQty     = 0;
            whsBillOfLadingTmp.CustOrderWeight      = 0;
            whsBillOfLadingTmp.CircleY              = '';
            whsBillOfLadingTmp.CircleN              = '';
            whsBillOfLadingTmp.AdditionalInfo       = '';
            whsBillOfLadingTmp.DummyCustomer        = _dummyRecordsForCustomer ? NoYes::Yes : NoYes::No;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>