<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalCreateLinesExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to get the Onhold,Non-Chargeble and Billable Transactions out of date range.
/// </summary>
/// <remarks>
/// This class contains event handler methods for getQuery and methods of the PSATmpProjProposalTrans table
/// </remarks>
class ProjInvoiceProposalCreateLinesExt extends ProjInvoiceProposalCreateLines
{
    TransDate                               endDate;
    TransDate                               startDate;
    ProjId                                  projId;
    ProjInvoiceProjId                       projInvoiceProjId;
    ProjInvoiceProposalCreateLinesExt       proposalPendingLines;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type cost.
    /// </summary>
    /// <param name="_projCostTrans">
    /// A record in <c>ProjCostTrans</c> table.
    /// </param>
    /// <param name="_isCreate">
    /// Indicates whether a record should be inserted into proposalTransCreate buffer.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doCost(ProjCostTrans _projCostTrans, boolean _isCreate, PSAContractLineNum _contractLineNum)
    {
        switch (proposalCreateLinesParams.parmProjInvPendingType())
        {
            case ProjInvPendingType::OnHold:
                this.initCostOnHold(_projCostTrans);
                break;

            case ProjInvPendingType::Billable:
                this.initCostBillable(_projCostTrans, projFundingSourceRefId);
                break;

            case ProjInvPendingType::Other:
                this.initCostOther(_projCostTrans);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type hour.
    /// </summary>
    /// <param name="_projEmplTrans">
    /// A record in <c>ProjEmplTrans</c> table.
    /// </param>
    /// <param name="_isCreate">
    /// Indicates whether a record should be inserted into proposalTransCreate buffer.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doEmpl(ProjEmplTrans _projEmplTrans, boolean _isCreate, PSAContractLineNum _contractLineNum)
    {
        switch (proposalCreateLinesParams.parmProjInvPendingType())
        {
            case ProjInvPendingType::OnHold:
                this.initEmplOnHold(_projEmplTrans);
                break;

            case ProjInvPendingType::Billable:
                this.initEmplBillable(_projEmplTrans, projFundingSourceRefId);
                break;

            case ProjInvPendingType::Other:
                this.initEmplOther(_projEmplTrans);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOnAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type on account.
    /// </summary>
    /// <param name="_projOnAccTrans">
    /// A record in <c>ProjOnAccTrans</c> table.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doOnAccount(ProjOnAccTrans _projOnAccTrans, PSAContractLineNum _contractLineNum)
    {
        switch (proposalCreateLinesParams.parmProjInvPendingType())
        {
            case ProjInvPendingType::OnHold:
                 this.doOnAccountOnHold(_projOnAccTrans, _contractLineNum);
                break;

            case ProjInvPendingType::Billable:
                this.doOnAccountBillable(_projOnAccTrans, _contractLineNum);
                break;

            case ProjInvPendingType::Other:
                this.doOnAccountOther(_projOnAccTrans, _contractLineNum);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOnAccountBillable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type on account.
    /// </summary>
    /// <param name="_projOnAccTrans">
    /// A record in <c>ProjOnAccTrans</c> table.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doOnAccountBillable(ProjOnAccTrans _projOnAccTrans, PSAContractLineNum _contractLineNum)
    {
        ProjOnAccTransSale  projOnAccTransSale;
        ProjFundingSource   fundingSourceDetails;

        proposalTransDisplay.clear();
        proposalTransDisplay.initFromProjOnAccTrans(_projOnAccTrans);
        proposalTransDisplay.LineAmount      = 0;
        proposalTransDisplay.ContractLineNum = _contractLineNum;

        while select projOnAccTransSale
            order by projOnAccTransSale.FundingSource
            where projOnAccTransSale.TransId == _projOnAccTrans.TransId
                && (!projFundingSourceRefId || (projFundingSourceRefId
                    && projOnAccTransSale.FundingSource == projFundingSourceRefId))
            join FundingType, FundingSourceId
                from fundingSourceDetails
                    where fundingSourceDetails.RecId == projOnAccTransSale.FundingSource
                        && fundingSourceDetails.FundingType != ProjFundingType::OnHoldFundingSource
        {
            if (projOnAccTransSale.canBeInvoiced())
            {
                proposalTransDisplay.FundingSourceRefId = projOnAccTransSale.FundingSource;

                proposalTransDisplay.FundingSourceId = fundingSourceDetails.FundingSourceId;
                proposalTransDisplay.FundingType = fundingSourceDetails.FundingType;

                if (projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount = projOnAccTransSale.Amount * -1;
                    proposalTransDisplay.Qty =  proposalTransDisplay.Qty * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount = projOnAccTransSale.Amount;
                }
                proposalTransDisplay.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOnAccountOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type on account.
    /// </summary>
    /// <param name="_projOnAccTrans">
    /// A record in <c>ProjOnAccTrans</c> table.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doOnAccountOnHold(ProjOnAccTrans _projOnAccTrans, PSAContractLineNum _contractLineNum)
    {
        ProjOnAccTransSale  projOnAccTransSale;
        boolean             isTransInserted;
        ProjFundingSource   fundingSource;

        proposalTransDisplay.clear();
        proposalTransDisplay.initFromProjOnAccTrans(_projOnAccTrans);
        proposalTransDisplay.LineAmount = 0;
        proposalTransDisplay.ContractLineNum = _contractLineNum;

        while select TransId, Amount, FundingSource , TransStatus from projOnAccTransSale
            join RecId, FundingType, FundingSourceId from fundingSource
            where projOnAccTransSale.TransId == _projOnAccTrans.TransId
                && fundingSource.RecId == projOnAccTransSale.FundingSource
                    && fundingSource.FundingType == ProjFundingType::OnHoldFundingSource
        {
                if (!isTransInserted)
                {
                    proposalTransDisplay.FundingSourceRefId = projOnAccTransSale.FundingSource;
                    proposalTransDisplay.FundingType = fundingSource.FundingType;
                    proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;
                }

                if (projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount += projOnAccTransSale.Amount * -1;
                    proposalTransDisplay.Qty = proposalTransDisplay.Qty * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount += projOnAccTransSale.Amount;
                }

                isTransInserted = true;
            }

        if (isTransInserted)
        {
            proposalTransDisplay.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doOnAccountOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process transactions of type on account.
    /// </summary>
    /// <param name="_projOnAccTrans">
    /// A record in <c>ProjOnAccTrans</c> table.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doOnAccountOther(ProjOnAccTrans _projOnAccTrans, PSAContractLineNum _contractLineNum)
    {
        ProjOnAccTransSale  projOnAccTransSale;
        ProjFundingSource   fundingSource;

        proposalTransDisplay.clear();
        proposalTransDisplay.initFromProjOnAccTrans(_projOnAccTrans);
        proposalTransDisplay.LineAmount = 0;
        proposalTransDisplay.ContractLineNum = _contractLineNum;

        while select projOnAccTransSale
            join FundingType, FundingSourceId,RecId from fundingSource
            where projOnAccTransSale.TransId == _projOnAccTrans.TransId
                && (!projFundingSourceRefId || (projFundingSourceRefId && projOnAccTransSale.FundingSource == projFundingSourceRefId))
                    && fundingSource.RecId == projOnAccTransSale.FundingSource
                        && fundingSource.FundingType != ProjFundingType::OnHoldFundingSource
        {
            if (!projOnAccTransSale.canBeInvoiced())
            {
                proposalTransDisplay.FundingSourceRefId = projOnAccTransSale.FundingSource;
                proposalTransDisplay.FundingType = fundingSource.FundingType;
                proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;

                if (projOnAccTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount = projOnAccTransSale.Amount * -1;
                    proposalTransDisplay.Qty = proposalTransDisplay.Qty * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount = projOnAccTransSale.Amount;
                }
                proposalTransDisplay.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records of type revenue.
    /// </summary>
    /// <param name="_projRevenueTrans">
    /// A record in <c>ProjRevenueTrans</c> table for which invoice lines are to be created.
    /// </param>
    /// <param name="_contractLineNum">
    /// Reference to contract line for which revenue records are being created.
    /// </param>
    public void doRevenue(ProjRevenueTrans _projRevenueTrans, PSAContractLineNum _contractLineNum)
    {
        switch (proposalCreateLinesParams.parmProjInvPendingType())
        {
            case ProjInvPendingType::OnHold:
                 this.initRevenueOnHold(_projRevenueTrans);
                break;

            case ProjInvPendingType::Billable:
                this.initRevenueBillable(_projRevenueTrans, projFundingSourceRefId);
                break;

            case ProjInvPendingType::Other:
                this.initRevenueOther(_projRevenueTrans);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostBillable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type cost.
    /// </summary>
    /// <param name="_projCostTrans">
    /// Record ID of a record in <c>ProjCostTrans</c> table.
    /// </param>
    /// <param name="_projFundingSourceRefId">
    /// Record ID of a record in <c>ProjFundingSource</c> table.
    /// </param>
    public void initCostBillable(ProjCostTrans _projCostTrans, ProjFundingSourceRefId _projFundingSourceRefId)
    {
        ProjCostTransSale           projCostTransSale;
        ProjFundingSource           fundingSource;

        proposalTransDisplay.clear();
        proposalTransDisplay.initFromProjCostTrans(_projCostTrans);

        proposalTransDisplay.LineAmount = 0;
        proposalTransDisplay.SalesPrice = 0;

        while select projCostTransSale
            where projCostTransSale.TransId == _projCostTrans.TransId
                && (!_projFundingSourceRefId || (_projFundingSourceRefId && projCostTransSale.FundingSource == _projFundingSourceRefId))
        {
            if (projCostTransSale.canBeInvoiced())
            {
                proposalTransDisplay.FundingSourceRefId = projCostTransSale.FundingSource;
                fundingSource = ProjFundingSource::find(projCostTransSale.FundingSource);
                proposalTransDisplay.FundingType = fundingSource.FundingType;
                proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;

                if (projCostTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount = projCostTransSale.LineAmount * -1;
                    proposalTransDisplay.Qty = proposalTransDisplay.Qty * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount = projCostTransSale.LineAmount;
                    proposalTransDisplay.SalesPrice = projCostTransSale.SalesPrice;
                }
                proposalTransDisplay.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type cost.
    /// </summary>
    /// <param name="_projCostTrans">
    /// Record ID of a record in <c>ProjCostTrans</c> table.
    /// </param>
    public void initCostOnHold(ProjCostTrans _projCostTrans)
    {
        ProjCostTransSale           projCostTransSale;
        boolean                     isTransInserted;
        ProjFundingSource           fundingSource;
        boolean                     initProposalTransDisplay;

        while select TransId, LineAmount, SalesPrice, FundingSource , TransStatus from projCostTransSale
            join RecId,FundingType, FundingSourceId from fundingSource
                where projCostTransSale.TransId == _projCostTrans.TransId
                    && fundingSource.RecId == projCostTransSale.FundingSource
                        && fundingSource.FundingType == ProjFundingType::OnHoldFundingSource
        {
                if (!initProposalTransDisplay)
                {
                    proposalTransDisplay.clear();
                    proposalTransDisplay.initFromProjCostTrans(_projCostTrans);

                    proposalTransDisplay.LineAmount = 0;
                    proposalTransDisplay.SalesPrice = 0;
                    initProposalTransDisplay = true;
                }

                if (!isTransInserted)
                {
                    proposalTransDisplay.FundingSourceRefId = projCostTransSale.FundingSource;
                    proposalTransDisplay.FundingType = fundingSource.FundingType;
                    proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;
                }

                if (projCostTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount += projCostTransSale.LineAmount * -1;
                    proposalTransDisplay.Qty =  proposalTransDisplay.Qty * -1;
                    proposalTransDisplay.SalesPrice += projCostTransSale.SalesPrice * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount += projCostTransSale.LineAmount;
                    proposalTransDisplay.SalesPrice += projCostTransSale.SalesPrice;
                }

                isTransInserted = true;
            }

        if (isTransInserted)
        {
            proposalTransDisplay.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type cost.
    /// </summary>
    /// <param name="_projCostTrans">
    /// Record ID of a record in <c>ProjCostTrans</c> table.
    /// </param>
    public void initCostOther(ProjCostTrans _projCostTrans)
    {
        ProjCostTransSale           projCostTransSale;
        boolean                     initProposalTransDisplay;
        ProjFundingSource           fundingSource;

        while select TransId, TransStatus, FundingSource, LineAmount, SalesPrice from projCostTransSale
            join RecId,FundingType, FundingSourceId from fundingSource
                where projCostTransSale.TransId == _projCostTrans.TransId
                    && projCostTransSale.TransStatus == ProjTransStatus::Posted
                        && (!projFundingSourceRefId || (projFundingSourceRefId && projCostTransSale.FundingSource == projFundingSourceRefId))
                            && fundingSource.RecId == projCostTransSale.FundingSource
                                && fundingSource.FundingType != ProjFundingType::OnHoldFundingSource
        {
            if (!projCostTransSale.canBeInvoiced())
            {
                if (!initProposalTransDisplay)
                {
                    proposalTransDisplay.clear();
                    proposalTransDisplay.initFromProjCostTrans(_projCostTrans);

                    proposalTransDisplay.LineAmount = 0;
                    proposalTransDisplay.SalesPrice = 0;
                    initProposalTransDisplay = true;
                }

                proposalTransDisplay.FundingSourceRefId = projCostTransSale.FundingSource;
                proposalTransDisplay.FundingType = fundingSource.FundingType;
                proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;

                if (projCostTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount = projCostTransSale.LineAmount * -1;
                    proposalTransDisplay.Qty =  proposalTransDisplay.Qty * -1;
                    proposalTransDisplay.SalesPrice = projCostTransSale.SalesPrice * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount = projCostTransSale.LineAmount;
                    proposalTransDisplay.SalesPrice = projCostTransSale.SalesPrice;
                }
                proposalTransDisplay.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplBillable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type empl.
    /// </summary>
    /// <param name="_projEmplTrans">
    /// Record ID of a record in <c>ProjEmplTrans</c> table.
    /// </param>
    /// <param name="_projFundingSourceRefId">
    /// Record ID of a record in <c>ProjFundingSource</c> table.
    /// </param>
    public void initEmplBillable(ProjEmplTrans _projEmplTrans, ProjFundingSourceRefId _projFundingSourceRefId)
    {
        ProjEmplTransSale           projEmplTransSale;
        ProjFundingSource           fundingSource;

        proposalTransDisplay.clear();
        proposalTransDisplay.initFromProjEmplTrans(_projEmplTrans);

        proposalTransDisplay.LineAmount = 0;
        proposalTransDisplay.SalesPrice = 0;

        while select projEmplTransSale
            where projEmplTransSale.TransId == _projEmplTrans.TransId
                && (!_projFundingSourceRefId || (_projFundingSourceRefId && projEmplTransSale.FundingSource == _projFundingSourceRefId))
        {
            if (projEmplTransSale.canBeInvoiced())
            {
                proposalTransDisplay.FundingSourceRefId = projEmplTransSale.FundingSource;
                fundingSource = ProjFundingSource::find(projEmplTransSale.FundingSource);
                proposalTransDisplay.FundingType     = fundingSource.FundingType;
                proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;

                if (projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount = projEmplTransSale.LineAmount * -1;
                    proposalTransDisplay.Qty = proposalTransDisplay.Qty * -1;
                    proposalTransDisplay.SalesPrice = projEmplTransSale.SalesPrice * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount = projEmplTransSale.LineAmount;
                    proposalTransDisplay.SalesPrice = projEmplTransSale.SalesPrice;
                }
                proposalTransDisplay.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type empl.
    /// </summary>
    /// <param name="_projEmplTrans">
    /// Record ID of a record in <c>ProjEmplTrans</c> table.
    /// </param>
    public void initEmplOnHold(ProjEmplTrans _projEmplTrans)
    {
        ProjEmplTransSale           projEmplTransSale;
        boolean                     isTransInserted;
        ProjFundingSource           fundingSource;
        ProjTable                   projTable = ProjTable::find(_projEmplTrans.ProjId);
        boolean                     initProposalTransDisplay;

        while select TransId, SalesPrice, LineAmount, FundingSource , TransStatus from projEmplTransSale
            join RecId,FundingType, FundingSourceId from fundingSource
                where projEmplTransSale.TransId == _projEmplTrans.TransId
                    && fundingSource.ContractId == projTable.ProjInvoiceProjId
                        && fundingSource.RecId == projEmplTransSale.FundingSource
                            && fundingSource.FundingType == ProjFundingType::OnHoldFundingSource
        {
                if (!initProposalTransDisplay)
                {
                    proposalTransDisplay.clear();
                    proposalTransDisplay.initFromProjEmplTrans(_projEmplTrans);

                    proposalTransDisplay.LineAmount = 0;
                    proposalTransDisplay.SalesPrice = 0;
                    initProposalTransDisplay =  true;
                }

                if (!isTransInserted)
                {
                    proposalTransDisplay.FundingSourceRefId = projEmplTransSale.FundingSource;
                    proposalTransDisplay.FundingType = fundingSource.FundingType;
                    proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;
                }

                if (projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount  += projEmplTransSale.LineAmount * -1;
                    proposalTransDisplay.Qty  =  proposalTransDisplay.Qty * -1;
                    proposalTransDisplay.SalesPrice  += projEmplTransSale.SalesPrice * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount     += projEmplTransSale.LineAmount;
                    proposalTransDisplay.SalesPrice     += projEmplTransSale.SalesPrice;
                }

                isTransInserted = true;
            }

        if (isTransInserted)
        {
            proposalTransDisplay.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmplOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type empl.
    /// </summary>
    /// <param name="_projEmplTrans">
    /// Record ID of a record in <c>ProjEmplTrans</c> table.
    /// </param>
    public void initEmplOther(ProjEmplTrans _projEmplTrans)
    {
        ProjEmplTransSale           projEmplTransSale;
        boolean                     initProposalTransDisplay;
        ProjFundingSource           fundingSource;

        while select TransId, TransStatus, SalesPrice, LineAmount, FundingSource from projEmplTransSale
            where projEmplTransSale.TransId == _projEmplTrans.TransId
                && projEmplTransSale.TransStatus == ProjTransStatus::Posted
                && (!projFundingSourceRefId || (projFundingSourceRefId && projEmplTransSale.FundingSource == projFundingSourceRefId))
                join FundingType,FundingSourceId,RecId from fundingSource
                    where fundingSource.RecId == projEmplTransSale.FundingSource
                        && fundingSource.FundingType != ProjFundingType::OnHoldFundingSource
        {
            if (!projEmplTransSale.canBeInvoiced())
            {
                if (!initProposalTransDisplay)
                {
                    proposalTransDisplay.clear();
                    proposalTransDisplay.initFromProjEmplTrans(_projEmplTrans);

                    proposalTransDisplay.LineAmount = 0;
                    proposalTransDisplay.SalesPrice = 0;
                    initProposalTransDisplay =  true;
                }

                proposalTransDisplay.FundingSourceRefId = projEmplTransSale.FundingSource;
                proposalTransDisplay.FundingType     = fundingSource.FundingType;
                proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;

                if (projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount     = projEmplTransSale.LineAmount * -1;
                    proposalTransDisplay.Qty            = proposalTransDisplay.Qty * -1;
                    proposalTransDisplay.SalesPrice     = projEmplTransSale.SalesPrice * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount     = projEmplTransSale.LineAmount;
                    proposalTransDisplay.SalesPrice     = projEmplTransSale.SalesPrice;
                }
                proposalTransDisplay.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRevenueBillable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type revenue.
    /// </summary>
    /// <param name="_projRevenueTrans">
    /// Record ID of a record in <c>ProjRevenueTrans</c> table.
    /// </param>
    /// <param name="_projFundingSourceRefId">
    /// Record ID of a record in <c>ProjFundingSource</c> table.
    /// </param>
    public void initRevenueBillable(ProjRevenueTrans _projRevenueTrans, ProjFundingSourceRefId _projFundingSourceRefId)
    {
        ProjRevenueTransSale        projRevenueTransSale;
        ProjFundingSource           fundingSource;

        proposalTransDisplay.clear();
        proposalTransDisplay.initFromProjRevenueTrans(_projRevenueTrans);

        proposalTransDisplay.LineAmount = 0;
        proposalTransDisplay.SalesPrice = 0;

        while select projRevenueTransSale
            where projRevenueTransSale.TransId == _projRevenueTrans.TransId
                && (!_projFundingSourceRefId || (_projFundingSourceRefId && projRevenueTransSale.FundingSource == _projFundingSourceRefId))
        {
            if (projRevenueTransSale.canBeInvoiced())
            {
                proposalTransDisplay.FundingSourceRefId = projRevenueTransSale.FundingSource;
                fundingSource = ProjFundingSource::find(projRevenueTransSale.FundingSource);
                proposalTransDisplay.FundingType = fundingSource.FundingType;
                proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;

                if (projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount = projRevenueTransSale.LineAmount * -1;
                    proposalTransDisplay.Qty = proposalTransDisplay.Qty * -1;
                    proposalTransDisplay.SalesPrice = projRevenueTransSale.SalesPrice * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount = projRevenueTransSale.LineAmount;
                    proposalTransDisplay.SalesPrice = projRevenueTransSale.SalesPrice;
                }
                proposalTransDisplay.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRevenueOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type revenue.
    /// </summary>
    /// <param name="_projRevenueTrans">
    /// Record ID of a record in <c>ProjRevenueTrans</c> table.
    /// </param>
    public void initRevenueOnHold(ProjRevenueTrans _projRevenueTrans)
    {
        ProjRevenueTransSale        projRevenueTransSale;
        boolean                     isTransInserted;
        ProjFundingSource           fundingSource;
        boolean                     initProposalTransDisplay;

        while select TransId, SalesPrice, LineAmount, FundingSource , TransStatus from projRevenueTransSale
            join RecId,FundingType, FundingSourceId from fundingSource
            where projRevenueTransSale.TransId == _projRevenueTrans.TransId
                && fundingSource.RecId == projRevenueTransSale.FundingSource
                    && fundingSource.FundingType == ProjFundingType::OnHoldFundingSource
        {
            if (!initProposalTransDisplay)
            {
                proposalTransDisplay.clear();
                proposalTransDisplay.initFromProjRevenueTrans(_projRevenueTrans);

                proposalTransDisplay.LineAmount = 0;
                proposalTransDisplay.SalesPrice = 0;
                initProposalTransDisplay = true;
            }

            if (!isTransInserted)
            {
                proposalTransDisplay.FundingSourceRefId = projRevenueTransSale.FundingSource;
                proposalTransDisplay.FundingType = fundingSource.FundingType;
                proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;
            }

            if (projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
            {
                proposalTransDisplay.LineAmount += projRevenueTransSale.LineAmount * -1;
                proposalTransDisplay.Qty =  proposalTransDisplay.Qty * -1;
                proposalTransDisplay.SalesPrice += projRevenueTransSale.SalesPrice * -1;
            }
            else
            {
                proposalTransDisplay.LineAmount += projRevenueTransSale.LineAmount;
                proposalTransDisplay.SalesPrice += projRevenueTransSale.SalesPrice;
            }

            isTransInserted = true;
        }

        if (isTransInserted)
        {
            proposalTransDisplay.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRevenueOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type revenue.
    /// </summary>
    /// <param name="_projRevenueTrans">
    /// Record ID of a record in <c>ProjRevenueTrans</c> table.
    /// </param>
    public void initRevenueOther(ProjRevenueTrans _projRevenueTrans)
    {
        ProjRevenueTransSale        projRevenueTransSale;
        boolean                     initProposalTransDisplay;
        ProjFundingSource           fundingSource;

        while select TransId, TransStatus, FundingSource, SalesPrice, LineAmount from projRevenueTransSale
            join  FundingType , FundingSourceId from fundingSource
                where projRevenueTransSale.TransId == _projRevenueTrans.TransId
                    && projRevenueTransSale.TransStatus == ProjTransStatus::Posted
                        && (!projFundingSourceRefId || (projFundingSourceRefId && projRevenueTransSale.FundingSource == projFundingSourceRefId))
                            && fundingSource.RecId == projRevenueTransSale.FundingSource
                                && fundingSource.FundingType != ProjFundingType::OnHoldFundingSource
        {
            if (!projRevenueTransSale.canBeInvoiced())
            {
                if (!initProposalTransDisplay)
                {
                    proposalTransDisplay.clear();
                    proposalTransDisplay.initFromProjRevenueTrans(_projRevenueTrans);

                    proposalTransDisplay.LineAmount = 0;
                    proposalTransDisplay.SalesPrice = 0;
                    initProposalTransDisplay = true;
                }

                proposalTransDisplay.FundingSourceRefId = projRevenueTransSale.FundingSource;
                proposalTransDisplay.FundingType = fundingSource.FundingType;
                proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;

                if (projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount = projRevenueTransSale.LineAmount * -1;
                    proposalTransDisplay.Qty = proposalTransDisplay.Qty * -1;
                    proposalTransDisplay.SalesPrice = projRevenueTransSale.SalesPrice * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount = projRevenueTransSale.LineAmount;
                    proposalTransDisplay.SalesPrice = projRevenueTransSale.SalesPrice;
                }
                proposalTransDisplay.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjInvoiceProposalCreateLinesExt construct()
    {
        return new ProjInvoiceProposalCreateLinesExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryPost</Name>
				<Source><![CDATA[
    [PostHandlerFor(classStr(ProjInvoiceProposalCreateLines), methodStr(ProjInvoiceProposalCreateLines, getQuery))]
    /// <summary>
    /// Post event handler method for getQuery
    /// To restrict the On-Account transactions to include in the Invoice proposal
    /// when ReadyTOBill is not checked for the periodic proposals
    /// To get the project type to not show deduction line
    /// Do not fetch the transactions if, on account transactions exist with
    /// chrgeable status and Ready to Bill for Periodic project invoice proposal
    /// </summary>
    /// <param name="_args">
    /// Args object which will have the class buffer.
    /// </param>
    public static void getQueryPost(XppPrePostArgs _args)
    {
        #define.TransDate("TransDate")

        ProjInvoiceProposalCreateLines              projInvoiceProposalCreateLines;

        TableId                                     tableIdTrans;
        ProjInvoiceProposalCreateLinesParams        proposalCreateLinesParams;
        Query                                       query;

        QueryBuildDataSource                        qbdsTrans;
        QueryBuildDataSource                        qbdsTransSales;
        QueryBuildDataSource                        qbdsFundingSource;
        DataArea                                    dataArea;

        projInvoiceProposalCreateLines = _args.getThis();

        query           = _args.getReturnValue();
        qbdsTrans       = query.dataSourceNo(1);
        qbdsTransSales  = query.dataSourceNo(2);

        tableIdTrans        = _args.getArgNum(3);

        proposalCreateLinesParams = projInvoiceProposalCreateLines.parmProposalCreateLinesParams();

        if (proposalCreateLinesParams.parmIsPeriodicProposal() && !proposalCreateLinesParams.parmEndDate())
        {
            qbdsTrans.clearRange(new DictTable(tableIdTrans).fieldName2Id(#TransDate));

            select firstonly TimeZone
                from dataArea
                    where  dataArea.Id == curext();

            if (dataArea.RecId)
            {
                qbdsTrans.addRange(new DictTable(tableIdTrans).fieldName2Id(#TransDate)).value(SysQuery::range(proposalCreateLinesParams.parmStartDate(),DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::utcNow(), dataArea.TimeZone))));
            }
        }
        else if (proposalCreateLinesParams.parmStartDate() || proposalCreateLinesParams.parmEndDate())
        {
            if (proposalCreateLinesParams.parmProjInvPendingType() != ProjInvPendingType::None)
            {
                qbdsTrans.clearRange(new DictTable(tableIdTrans).fieldName2Id(#TransDate));
                switch (proposalCreateLinesParams.parmProjInvPendingType())
                {
                    case  ProjInvPendingType::Billable:
                        if (proposalCreateLinesParams.parmStartDate())
                        {
                            qbdsTrans.addRange(new DictTable(tableIdTrans).fieldName2Id(#TransDate)).value(SysQuery::range(dateNull(), (proposalCreateLinesParams.parmStartDate() -1)));
                        }
                        if (proposalCreateLinesParams.parmEndDate())
                        {
                            qbdsTrans.addRange(new DictTable(tableIdTrans).fieldName2Id(#TransDate)).value(SysQuery::range((proposalCreateLinesParams.parmEndDate() +1), dateMax()));
                        }
                        break;

                    case ProjInvPendingType::OnHold:
                        qbdsFundingSource = qbdsTransSales.addDataSource(tableNum(ProjFundingSource));
                        qbdsFundingSource.relations(true);
                        qbdsFundingSource.joinMode(JoinMode::ExistsJoin);
                        qbdsFundingSource.addRange(fieldNum(ProjFundingSource, FundingType)).value(queryValue(ProjFundingType::OnHoldFundingSource));
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class and unpacks the parameters
    /// </summary>
    /// <param name="_params">
    /// Container containing the packed parameters
    /// </param>
    /// <returns>
    /// The unpacked parameter values
    /// </returns>
    public static ProjInvoiceProposalCreateLinesExt newStandard(container _params)
    {
        ProjInvoiceProposalCreateLinesExt    createLines = ProjInvoiceProposalCreateLinesExt::construct();
        ProjInvoiceProposalCreateLinesParams    createLinesParams = ProjInvoiceProposalCreateLinesParams::construct();

        createLinesParams.unpack(_params);

        createLines.parmProposalCreateLinesParams(createLinesParams);

        return createLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process an item transaction.
    /// </summary>
    /// <param name = "_projItemTrans">
    /// The <c>ProjItemTrans</c> to be processed.
    /// </param>
    /// <param name = "_isCreate">
    /// Indicates whether a record should be inserted into proposalTransCreate buffer.
    /// </param>
    /// <param name="_contractLineNum">
    /// Identifier of the billing rule line.
    /// </param>
    protected void doItem(ProjItemTrans _projItemTrans, boolean _isCreate, PSAContractLineNum _contractLineNum)
    {
        switch (proposalCreateLinesParams.parmProjInvPendingType())
        {
            case ProjInvPendingType::OnHold:
                this.initItemOnHold(_projItemTrans);
                break;

            case ProjInvPendingType::Billable:
                super(_projItemTrans, _isCreate, _contractLineNum);
                break;

            case ProjInvPendingType::Other:
                this.initItemOther(_projItemTrans);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemOnHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type item that are associated to a funding source that is on hold.
    /// </summary>
    /// <param name="_projItemTrans">
    /// Record ID of a record in <c>ProjItemTrans</c> table.
    /// </param>
    private void initItemOnHold(ProjItemTrans _projItemTrans)
    {
        ProjItemTransSale           projItemTransSale;
        boolean                     isTransInserted;
        ProjFundingSource           fundingSource;
        boolean                     hasTrans    = false;

        while select LineAmount, SalesPrice, FundingSource , TransStatus from projItemTransSale
            where projItemTransSale.ProjTransId == _projItemTrans.ProjTransId
            join FundingType, FundingSourceId from fundingSource
            where fundingSource.RecId == projItemTransSale.FundingSource &&
                  fundingSource.FundingType == ProjFundingType::OnHoldFundingSource
        {
            if (!hasTrans)
            {
                hasTrans = true;

                proposalTransDisplay.clear();
                proposalTransDisplay.initFromProjItemTrans(_projItemTrans);
                proposalTransDisplay.LineAmount = 0;
                proposalTransDisplay.SalesPrice = 0;
                proposalTransDisplay.FundingSourceRefId = projItemTransSale.FundingSource;
                proposalTransDisplay.FundingType = fundingSource.FundingType;
                proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;
            }

            if (projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
            {
                proposalTransDisplay.LineAmount += projItemTransSale.LineAmount * -1;
                proposalTransDisplay.Qty =  proposalTransDisplay.Qty * -1;
                proposalTransDisplay.SalesPrice += projItemTransSale.SalesPrice * -1;
            }
            else
            {
                proposalTransDisplay.LineAmount += projItemTransSale.LineAmount;
                proposalTransDisplay.SalesPrice += projItemTransSale.SalesPrice;
            }
        }

        if (hasTrans)
        {
            proposalTransDisplay.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemOther</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the invoice display records for transactions of type item that are neither
    /// chargeable nor on hold.
    /// </summary>
    /// <param name="_projItemTrans">
    /// Record ID of a record in <c>ProjItemTrans</c> table.
    /// </param>
    private void initItemOther(ProjItemTrans _projItemTrans)
    {
        ProjItemTransSale           projItemTransSale;
        boolean                     initProposalTransDisplay;
        ProjFundingSource           fundingSource;

        while select projItemTransSale
            where projItemTransSale.ProjTransId == _projItemTrans.ProjTransId &&
                projItemTransSale.TransStatus == ProjTransStatus::Posted &&
                (!projFundingSourceRefId || projItemTransSale.FundingSource == projFundingSourceRefId)
            join FundingType, FundingSourceId from fundingSource
            where fundingSource.RecId == projItemTransSale.FundingSource &&
                fundingSource.FundingType != ProjFundingType::OnHoldFundingSource
        {
            if (!projItemTransSale.canBeInvoiced())
            {
                if (!initProposalTransDisplay)
                {
                    proposalTransDisplay.clear();
                    proposalTransDisplay.initFromProjItemTrans(_projItemTrans);

                    proposalTransDisplay.LineAmount = 0;
                    proposalTransDisplay.SalesPrice = 0;
                    initProposalTransDisplay = true;
                }

                proposalTransDisplay.FundingSourceRefId = projItemTransSale.FundingSource;
                proposalTransDisplay.FundingType = fundingSource.FundingType;
                proposalTransDisplay.FundingSourceId = fundingSource.FundingSourceId;

                if (projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransDisplay.LineAmount = projItemTransSale.LineAmount * -1;
                    proposalTransDisplay.Qty =  proposalTransDisplay.Qty * -1;
                    proposalTransDisplay.SalesPrice = projItemTransSale.SalesPrice * -1;
                }
                else
                {
                    proposalTransDisplay.LineAmount = projItemTransSale.LineAmount;
                    proposalTransDisplay.SalesPrice = projItemTransSale.SalesPrice;
                }
                proposalTransDisplay.insert();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>