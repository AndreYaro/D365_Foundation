<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchTableToLineParametersForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class SalesPurchTableToLineParametersForm extends RunBase
{
    List        parameterFields;
    Map         fieldList;
    container   packedFieldList;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        packedFieldList
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase               dialog = super();

        if (this is PurchTable2LineParametersForm)
        {
            dialog.formBuildDesign().dialogSize(SysDialogSize::Large);
        }
        else
        {
            dialog.formBuildDesign().dialogSize(SysDialogSize::Full);
        }
        ListEnumerator parameterFieldsEnumerator = parameterFields.getEnumerator();

        fieldList                  = new Map(Types::Integer, Types::Class);

        dialog.caption("@SCM:SRMParametersHeader2Line");
        DialogGroup dialogGroup = dialog.addGroup('');

        dialogGroup.columns(this.dialogColumns());
        dialogGroup.frameType(FormFrameType::None);

        while (parameterFieldsEnumerator.moveNext())
        {
            SalesPurchTableToLineField salesPurchTableToLineField = parameterFieldsEnumerator.current();

            if (this.includeField(salesPurchTableToLineField.parmFieldId()))
            {
                dialog.addGroup(salesPurchTableToLineField.fieldGroupLabel(), dialogGroup);
                DialogField dialogField = dialog.addField(enumStr(TradeTable2LineUpdate),
                                                        salesPurchTableToLineField.parameterLabel(),
                                                        salesPurchTableToLineField.parameterHelp());
                dialogField.value(salesPurchTableToLineField.parmTableToLineUpdate());

                fieldList.insert(salesPurchTableToLineField.parmFieldId(), dialogField);
            }
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogColumns</Name>
				<Source><![CDATA[
    private int dialogColumns()
    {
        return real2int(trunc(power(parameterFields.elements(), 0.5)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to enable the field for the specified on the parameters form.
    /// </summary>
    /// <param name="_fieldId">
    /// The field to check for enabling.
    /// </param>
    /// <returns>
    /// true if the field should be enabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Typically, this is going to be determined by checking the document table-to-line field parameters
    /// table.
    /// </remarks>
    public boolean fieldEnabled(FieldId _fieldId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ListEnumerator parameterFieldsEnumerator = parameterFields.getEnumerator();

        while (parameterFieldsEnumerator.moveNext())
        {
            SalesPurchTableToLineField salesPurchTableToLineField = parameterFieldsEnumerator.current();

            if (this.includeField(salesPurchTableToLineField.parmFieldId()))
            {
                DialogField dialogField = fieldList.lookup(salesPurchTableToLineField.parmFieldId());

                salesPurchTableToLineField.parmTableToLineUpdate(dialogField.value());
            }
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>headerToLineFieldIdList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the fields that are supported by the table-to-line functionality of the module.
    /// </summary>
    /// <returns>
    /// A container of fields that are supported by the table-to-line functionality of the module.
    /// </returns>
    /// <remarks>
    /// Typically, this will be determined by checking the document table-to-line field parameters table.
    /// </remarks>
    abstract public container headerToLineFieldIdList()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to include the field for the field that is specified by the <c>FieldId</c> value
    /// on the parameters form.
    /// </summary>
    /// <param name="_fieldId">
    /// The field to check for inclusion.
    /// </param>
    /// <returns>
    /// true if the field should be included on the form; otherwise, false.
    /// </returns>
    protected boolean includeField(FieldId _fieldId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableToLineParameterFields</Name>
				<Source><![CDATA[
    protected void initTableToLineParameterFields()
    {
        int                         pos = 1;

        parameterFields  = new List(Types::Class);

        container headerToLineFieldIds = this.headerToLineFieldIdList();

        while (pos <= conlen(headerToLineFieldIds))
        {
            fieldId fieldId = conpeek(headerToLineFieldIds, pos);

            if (this.fieldEnabled(fieldId))
            {
                SalesPurchTableToLineField salesPurchTableToLineField = this.newFieldObject(fieldId);
                parameterFields.addEnd(salesPurchTableToLineField);
            }

            pos++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFieldObject</Name>
				<Source><![CDATA[
    abstract protected SalesPurchTableToLineField newFieldObject(FieldId _fieldId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container  pack()
    {
        packedFieldList = parameterFields.pack();
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        ListEnumerator parameterFieldsEnumerator = parameterFields.getEnumerator();

        ttsbegin;

        while (parameterFieldsEnumerator.moveNext())
        {
            SalesPurchTableToLineField salesPurchTableToLineField = parameterFieldsEnumerator.current();
            salesPurchTableToLineField.updateSalesPurchTableToLineParameters();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean  unpack(container  _packedClass)
    {
        boolean         ret;
        Version         version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                parameterFields = List::create(packedFieldList);
                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS62837";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
