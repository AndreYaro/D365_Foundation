<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdPicklistDPDimHistoryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdPicklistDPDimHistoryBuilder</c> class builds the storage dimension and the data to be entered to temporary table for the <c>ProdPicklistDP</c> class.
/// </summary>
class ProdPicklistDPDimHistoryBuilder extends InventReportDimHistoryBuilder
{
    ProdJournalBOM prodJournalBOM;
    List printDimHistoryList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmProdJournalBOM</Name>
				<Source><![CDATA[
    public ProdJournalBOM parmProdJournalBOM(ProdJournalBOM _prodJournalBOM = prodJournalBOM)
    {
        prodJournalBOM = _prodJournalBOM;
        return prodJournalBOM;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return prodJournalBOM.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionString</Name>
				<Source><![CDATA[
    protected void buildDimensionString()
    {
        Qty         quantity;
        InventDimId inventDimId;
        Enumerator printDimHistoryEnumerator = printDimHistoryList.getEnumerator();
                
        while (printDimHistoryEnumerator.moveNext())
        {
            [quantity, inventDimId] = printDimHistoryEnumerator.current();
            this.appendToDimensionString(this.formatQuantityStringForDimension(quantity, InventDim::find(inventDimId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHistoryListForPostedJournal</Name>
				<Source><![CDATA[
    protected void initHistoryListForPostedJournal()
    {
        printDimHistoryList = new List(Types::Container);

        InventReportDimHistory inventReportDimHistory;

        while select Qty, InventDimId from inventReportDimHistory
                index hint TypeTransIdRefIdx
                where inventReportDimHistory.InventTransId      == prodJournalBOM.InventTransId                     &&
                      inventReportDimHistory.TransRefId         == prodJournalBOM.InventTransChildRefId             &&
                      inventReportDimHistory.TransactionLogType == InventReportDimHistoryLogType::ProdJournalBOM    &&
                      inventReportDimHistory.Qty                != 0
        {
            printDimHistoryList.addEnd([inventReportDimHistory.Qty, inventReportDimHistory.InventDimId]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHistoryListForOpenJournal</Name>
				<Source><![CDATA[
    protected void initHistoryListForOpenJournal()
    {
        printDimHistoryList = new List(Types::Container);

        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        while select Qty, InventDimId from inventTrans
            order by StatusIssue, InventDimId
            join RecId from inventTransOrigin
            where inventTransOrigin.RecId == inventTrans.InventTransOrigin                &&
                    inventTransOrigin.InventTransId == prodJournalBOM.InventTransId         &&
                    inventTrans.TransChildType    == prodJournalBOM.InventTransChildType    &&
                    inventTrans.TransChildRefId   == prodJournalBOM.InventTransChildRefId   &&
                    inventTrans.StatusReceipt     == StatusReceipt::None                    &&
                    (inventTrans.StatusIssue      == StatusIssue::Picked                    ||
                    inventTrans.StatusIssue       == StatusIssue::ReservPhysical            ||
                    inventTrans.StatusIssue       == StatusIssue::ReservOrdered             ||
                    inventTrans.StatusIssue       == StatusIssue::OnOrder)                  &&
                    inventTrans.Qty               != 0
        {
            printDimHistoryList.addEnd([-inventTrans.Qty, inventTrans.InventDimId]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalPosted</Name>
				<Source><![CDATA[
    protected boolean isJournalPosted()
    {
        return ProdJournalTable::find(prodJournalBOM.JournalId).Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    protected void init()
    {
        super();

        if (this.isJournalPosted())
        {
            this.initHistoryListForPostedJournal();
        }
        else
        {
            this.initHistoryListForOpenJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>languageId</Name>
				<Source><![CDATA[
    protected LanguageId languageId()
    {
        return CompanyInfo::languageId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProdPicklistDPDimHistoryBuilder construct()
    {
        return new ProdPicklistDPDimHistoryBuilder();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>