<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendDueAmountAnalysisDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is the data provider class for the vendor due amount analysis Report.
/// </summary>
public class VendDueAmountAnalysisDP_CN
{
    AgingAndDueAmountTmp_CN     vendDueAmountAnalysisTmp_CN;
    VendTrans                   vendTrans;
    VendSettlement              vendSettlement;
    VendInvoiceJour             vendInvoiceJour;
    TransDate                   toPeriod;
    AmountMSTDebCred            dueAmount;
    AmountMSTDebCred            undueAmount;
    AmountMSTDebCred            prepaymentAmount;
    AmountMSTDebCred            prepaymentAppliedAmount;
    VendAccount                 lastVendAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>hasDueOrUndueAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether value of dueAmount or unDueAmount is not zero.
    /// </summary>
    /// <returns>
    /// True if value of dueAmount or unDueAmount is not zero; otherwise, false.
    /// </returns>
    private boolean hasDueOrUndueAmount()
    {
        return dueAmount != 0 || undueAmount != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate due, undue, prepayment for current vendor transaction.
    /// </summary>
    private void calculateAmounts()
    {
        AmountMSTDebCred currentAmountMST;

        // Prepayment vendor invoice.
        if (vendTrans.Prepayment == NoYes::No
            && vendTrans.TransType == LedgerTransType::Purch
            && vendInvoiceJour.InvoiceType == PurchInvoiceType::VendorAdvance)
        {
            // Prepayment vendor invoice will increase prepayment including settled amount.
            currentAmountMST = vendTrans.AmountMST;
            currentAmountMST = -currentAmountMST;
            prepaymentAmount += currentAmountMST;

            // Prepayment vendor invoice will increase due/undue amount excluding settled amount.
            currentAmountMST = vendTrans.AmountMST - VendSettlement.SettleAmountMST;
            currentAmountMST = -currentAmountMST;
            if (toPeriod <= vendTrans.DueDate)
            {
                undueAmount += currentAmountMST;
            }
            else
            {
                dueAmount += currentAmountMST;
            }
        }
        // Apply prepayment or reverse applied prepayment
        else if (vendTrans.Prepayment == NoYes::No
            && vendTrans.TransType == LedgerTransType::PurchAdvanceApplication)
        {
            currentAmountMST = vendTrans.AmountMST;
            prepaymentAppliedAmount += currentAmountMST;
        }
        // Standard purchase order invoice, vendor invoice, payment journal and prepayment journal.
        else if (vendTrans.Prepayment == NoYes::No
            &&(vendTrans.TransType == LedgerTransType::Purch
                || vendTrans.TransType ==LedgerTransType::Vend
                || vendTrans.TransType == LedgerTransType::payment
                || vendTrans.TransType ==LedgerTransType::GeneralJournal
                || (vendTrans.transType == LedgerTransType::None
                    && vendTrans.AmountMST < 0)))
        {
            currentAmountMST = vendTrans.AmountMST - VendSettlement.SettleAmountMST;
            currentAmountMST = -currentAmountMST;

            if (toPeriod <= vendTrans.DueDate)
            {
                undueAmount += currentAmountMST;
            }
            else
            {
                dueAmount += currentAmountMST;
            }
        }
        // Prepayment journal
        else if (vendTrans.Prepayment == NoYes::Yes
            && (vendTrans.TransType == LedgerTransType::Payment
                || vendTrans.TransType == LedgerTransType::GeneralJournal))
        {
            currentAmountMST = vendTrans.AmountMST - VendSettlement.SettleAmountMST;
            prepaymentAmount += currentAmountMST;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendDueAmountAnalysisTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts all the values into <c>AgingAndDueAmountTmp_CN</c> temp table.
    /// </summary>
    /// <param name = "_vendAccount">Vendor account</param>
    private void insertVendDueAmountAnalysisTmp_CN(VendAccount _vendAccount)
    {
        AmountMSTDebCred creditBalance;
        VendTable        vendTable = VendTable::find(_vendAccount);

        vendDueAmountAnalysisTmp_CN.AccountNum   = _vendAccount;
        vendDueAmountAnalysisTmp_CN.AccountName      = vendTable.name();
        vendDueAmountAnalysisTmp_CN.DueAmount     = dueAmount;
        vendDueAmountAnalysisTmp_CN.UndueAmount   = undueAmount;
        vendDueAmountAnalysisTmp_CN.PrepaymentAmount    = prepaymentAmount - prepaymentAppliedAmount;
        vendDueAmountAnalysisTmp_CN.CreditLimit   = vendTable.CreditMax;
        creditBalance                             = vendTable.CreditMax - (dueAmount + undueAmount) + prepaymentAmount - prepaymentAppliedAmount;
        vendDueAmountAnalysisTmp_CN.CreditBalance = (creditBalance > 0) ? creditBalance : 0;

        vendDueAmountAnalysisTmp_CN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare data for the vend due amount analysis report.
    /// </summary>
    /// <param name="_contract">
    /// Instance of <c>VendDueAmountAnalysisContract_CN</c>.
    /// </param>
    /// <returns>
    /// The <c>AgingAndDueAmountTmp_CN</c> contains the generated data.
    /// </returns>
    public AgingAndDueAmountTmp_CN prepareData(VendDueAmountAnalysisContract_CN _contract)
    {
        Query                    query;
        QueryRun                 queryRun;
        QueryBuildDataSource     qbdsVendTrans;
        QueryBuildDataSource     qbdsVendSettlement;

        toPeriod = _contract.parmAsOn();

        if (!toPeriod)
        {
            toPeriod = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        query = new Query(SysOperationHelper::base64Decode(_contract.parmQuery()));

        qbdsVendTrans = query.dataSourceTable(tableNum(VendTrans));

        SysQuery::findOrCreateRange(
            qbdsVendTrans,
            fieldnum(VendTrans, TransDate)).value(SysQuery::range(dateNull(), toPeriod));

        qbdsVendSettlement = query.dataSourceTable(tableNum(VendSettlement));
        SysQuery::findOrCreateRange(
            qbdsVendSettlement,
            fieldnum(VendSettlement, TransDate)).value(SysQuery::range(dateNull(), toPeriod));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            vendTrans = queryRun.get(tableNum(VendTrans));
            vendSettlement = queryRun.get(tableNum(VendSettlement));
            VendInvoiceJour = queryRun.get(tableNum(VendInvoiceJour));

            if (lastVendAccount != vendTrans.AccountNum)
            {
                if (this.hasDueOrUndueAmount())
                {
                    this.insertVendDueAmountAnalysisTmp_CN(lastVendAccount);
                }

                dueAmount               = 0;
                undueAmount             = 0;
                prepaymentAmount        = 0;
                prepaymentAppliedAmount = 0;
            }

            this.calculateAmounts();

            lastVendAccount = vendTrans.AccountNum;
        }

        if (this.hasDueOrUndueAmount())
        {
            this.insertVendDueAmountAnalysisTmp_CN(lastVendAccount);
        }

        return vendDueAmountAnalysisTmp_CN;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>