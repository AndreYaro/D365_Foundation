<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayPFReportExcel_SZV63</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayPFReportExcel_SZV63 extends RPayPFReportExcel
{
    NoYesId     showZero;
    DialogField showZeroDlg;

    RHRMEmplId          currentEmplId;
    str                 personCategoryId; //НР, ОЗОИ
    int                 agreementType;
    ReportPeriod_RU     curPeriod;
    container           conKey, conValue;
    RPayRateCode        livingTypeRate;

    #define.ReportTitle("@RUP3322")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return #ReportTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        taxPeriod     = RPayReportSocialTaxPeriod::Year;
        corrTaxPeriod = RPayReportSocialTaxPeriod::Year;

        dialog = super();
        dialog.addGroup("@SYS28007");
        showZeroDlg = dialog.addFieldValue(extendedTypeStr(NoYesId), showZero, "@RUP3325", "@RUP3326");

        taxPeriodField.visible(false);
        corrTaxPeriodField.visible(false);
        taxPeriod2010Field.visible(false);
        corrTaxPeriod2010Field.visible(false);

        taxPeriodField.value(RPayReportSocialTaxPeriod::Year);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplTraverse</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void emplTraverse()
    {
        RHRMEmplTable   emplTableLocal;
        Map             dataMap;
        MapEnumerator   mapEnum;
        container       docKey, tmpKey;

        dataMap = holderData.getMap();

        if (dataMap.elements())
        {
            this.progressInit(this.caption(), dataMap.elements(), #AviFormLetter);
            progress.updateInterval(0);

            mapEnum = dataMap.getEnumerator();

            while (mapEnum.moveNext())
            {
                conKey   = mapEnum.currentKey();
                conValue = mapEnum.currentValue();

                this.unpackKey();
                emplTableLocal = RHRMEmplTable::find(currentEmplId);
                progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));

                if (this.isNewDocument() && (showZero || (conpeek(conValue, 1) && conpeek(conValue, 2))))
                {
                    if (excelDocument)
                    {
                        excelDocument.visible(true);
                        excelDocument.finalize();
                        excelDocument = NULL;
                    }

                    if (this.makeDocument())
                    {
                        this.fillDocument(emplTableLocal);
                        docKey = conKey;
                        docKey = condel(docKey, conlen(docKey), 1);
                    }
                    else
                    {
                        throw Exception::Error;
                    }
                }

                tmpKey = conKey;
                tmpKey = condel(tmpKey, conlen(tmpKey), 1);

                if (excelDocument && this.isNewRow(conKey) && tmpKey == docKey)
                {
                    this.fillRows(conValue);
                }

                progress.incCount();
            }

            if (excelDocument)
            {
                excelDocument.visible(true);
                excelDocument.finalize();
                excelDocument = NULL;
            }

            if (!printedEmplSet.elements())
            {
                info("@GLS101555");
            }
        }
        else
        {
            info("@GLS101555");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillDocument</Name>
				<Source><![CDATA[
    void fillDocument(RHRMEmplTable _emplTable)
    {
        DirPersonName  dirPersonName = _emplTable.personTable().dirPersonName();
        RHRMSortOfWork sortOfWork;
        SysDictEnum    dictEnum;

        excelDocument.insertValue('COMPANY_PFR_ID',         companyInfo.PFRegNum_RU);
        excelDocument.insertValue('COMPANY_NAME_SHORT',     companyInfo.Name);
        excelDocument.insertValue('COMPANY_INN',            CompanyInfoHelper::partyINN_RU(companyInfo));
        excelDocument.insertValue('COMPANY_KPP',            CompanyInfoHelper::partyKPP_RU(companyInfo));
        excelDocument.insertValue('INS_PERSON_CATEGORY_ID', personCategoryId);
        excelDocument.insertValue('EMPLNAME_MIDDLE',        dirPersonName.MiddleName);
        excelDocument.insertValue('EMPLNAME_LAST',          dirPersonName.LastName);
        excelDocument.insertValue('EMPLNAME_FIRST',         dirPersonName.FirstName);
        excelDocument.insertValue('EMPL_PFR_ID',            _emplTable.payPFRINN());

        switch (reportType)
        {
            case RpayPensionFundExportKindOfCorrection::Cancellative:
                excelDocument.insertValue('REPORTED_YEAR',   corrReportYear);
                excelDocument.insertValue('DOC_TYPE_CANCEL', #CheckSign);
                break;

            case RpayPensionFundExportKindOfCorrection::None:
                excelDocument.insertValue('REPORTED_YEAR',   reportYear);
                excelDocument.insertValue('DOC_TYPE_ORIGIN', #CheckSign);
                break;

            case RpayPensionFundExportKindOfCorrection::Correctional:
                excelDocument.insertValue('REPORTED_YEAR',    corrReportYear);
                excelDocument.insertValue('DOC_TYPE_CORRECT', #CheckSign);
                break;
        }

        dictEnum = new SysDictEnum(enumnum(RHRMSortOfWork));
        if (dictEnum.lastValue() >= (agreementType - 1) && dictEnum.firstValue() <= (agreementType - 1))
        {
            sortOfWork = agreementType - 1;

            switch (sortOfWork)
            {
                case RHRMSortOfWork::CivilContract:
                    excelDocument.insertValue('AGREEMENT_CIVIL', #CheckSign);
                    break;

                default:
                    excelDocument.insertValue('AGREEMENT_LABOR', #CheckSign);
            }
        }

        excelDocument.insertValue('FUND_SUM', conpeek(conValue, 1));
        excelDocument.insertValue('BASE_SUM', conpeek(conValue, 2));

        excelDocument.insertValue('SIGN_OCCUPATION',    OfficialsTable_RU::findDirector().Title);
        excelDocument.insertValue('SIGN_NAME',   OfficialsTable_RU::nameDirector());

        excelDocument.insertValue('SIGN_DATE',  date2str(DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()), 123, 2, 2, 2, 2, 4, DateFlags::None));
        printedEmplSet.add(currentEmplId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRows</Name>
				<Source><![CDATA[
    #define.FUND('FUND_')
    #define.BASE('BASE_')
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillRows(container _values)
    {
        Bookmark    bookmarkFund, bookmarkBase;
        int mthNo = mthOfYr(curPeriod);

        if (mthNo > 12 || mthNo < 1)
            return;

        bookmarkFund = #FUND + ((mthNo < 10) ? '0' : '') + int2str(mthNo);
        bookmarkBase = #BASE + ((mthNo < 10) ? '0' : '') + int2str(mthNo);

        excelDocument.insertValue(bookmarkFund, conpeek(_values, 1));
        excelDocument.insertValue(bookmarkBase, conpeek(_values, 2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            showZero = showZeroDlg.value();
        }

        reportStartPeriod     = mkDate(1, 1, reportYear);
        corrReportStartPeriod = mkDate(1, 1, corrReportYear);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>holderKey</Name>
				<Source><![CDATA[
    protected container holderKey()
    {
        return [currentEmplId, personCategoryId, agreementType, curPeriod];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmployeesData</Name>
				<Source><![CDATA[
    protected void initEmployeesData()
    {
        RHRMEmplTable   emplTableLocal;
        RHRMEmplTable   emplTableMainLocal;
        Set         processedEmplSet    = new Set(Types::String);

        this.progressInit("@RUP1997", SysQuery::countTotal(queryRun), #AviFormLetter);
        progress.updateInterval(0);

        while (queryRun.next())
        {
            emplTableLocal = queryRun.get(tablenum(RHRMEmplTable));

            progress.setText(strFmt("@RUP3038", emplTableLocal.EmployeeId, emplTableLocal.Name()));

            if (! processedEmplSet.in(emplTableLocal.PayMainEmplId))
            {
                emplTableMainLocal = emplTableLocal.emplTableMain();

                if (this.checkEmplIsInsured(emplTableLocal, false))
                {
                    this.initHolderData(emplTableMainLocal);
                }

                processedEmplSet.add(emplTableLocal.PayMainEmplId);
            }

            progress.incCount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHolderData</Name>
				<Source><![CDATA[
    protected void initHolderData(RHRMEmplTable _emplTable)
    {
        RPayAmount          fundAmountIns, fundTotalAmount, dedAmount, dedAmountDis;
        int                 monthIdx;
        container           contractInfo;
        TransDate           curPeriodRate;
        RPayPFReportCalc    reportCalc;
        container           conAmount, dedAmounts;
        boolean             temporaryLiving;

        currentEmplId   = _emplTable.PayMainEmplId;

        reportCalc = new RPayPFReportCalc();
        reportCalc.corReportPeriod(this.currentPeriod(1), this.currentPeriod(12));

        reportCalc.parmEmplId(currentEmplId);
        reportCalc.parmFund(payTaxParameters.PensionFundInsurance);
        reportCalc.setDeductionCodes([[SysQuery::valueNot(payTaxParameters.PensionFundinvalidDeduction), true], [payTaxParameters.PensionFundinvalidDeduction, true]]);
        reportCalc.init();
        reportCalc.calc();

        for (monthIdx = 1; monthIdx <= 12; monthIdx++)
        {
            contractInfo  = this.contractMthInfo(_emplTable, mkDate(1, monthIdx, reportType == RpayPensionFundExportKindOfCorrection::None ? reportYear : corrReportYear));
            curPeriod     = this.currentPeriod(monthIdx);

            [conAmount, dedAmounts] = reportCalc.periodAmount(curPeriod);
            fundTotalAmount = conpeek(conAmount, 1);
            fundAmountIns   = conpeek(conAmount, 3);

            [dedAmount, dedAmountDis] = dedAmounts;

            if (fundTotalAmount != 0 || (this.checkEmplIsInsuredMth(_emplTable, curPeriod, false) && conpeek(contractInfo, 2)))
            {
                agreementType = conpeek(contractInfo, 1) + 1;

                if (dedAmountDis == 0)
                {
                    personCategoryId = #InsuredPersonCatEmployee;
                    if (disabilityRateTable)
                    {
                        curPeriodRate = endMth(mkDate(1, monthIdx, year(curPeriod)));
                        if (disabilityRateTable.getValue(RPayRateCallContext::construct(curPeriodRate, _emplTable.PayMainEmplId)) > 0)
                        {
                            personCategoryId = this.insPersonCatDisabled(year(curPeriod));
                        }
                    }
                }
                else
                {
                    personCategoryId = this.insPersonCatDisabled(year(curPeriod));
                }

                if (RPayRateTable::find(payTaxParameters.InsuredForeignCitizens).getValue(RPayRateCallContext::construct(curPeriod, currentEmplId)) > 0)
                {
                    temporaryLiving = RPayRateTable::find(livingTypeRate).getValue(RPayRateCallContext::construct(curPeriod, currentEmplId)) > 0;

                    if (personCategoryId == #InsuredPersonCatEmployee)
                    {
                        if (temporaryLiving)
                        {
                            personCategoryId = #TempLiveForeign;
                        }
                        else
                        {
                            personCategoryId = #TempResidenceForeign;
                        }
                    }
                    else
                    {
                        if (temporaryLiving)
                        {
                            personCategoryId = #TempLiveForeignDis;
                        }
                        else
                        {
                            personCategoryId = #TempResidenceForeignDis;
                        }
                    }
                }

                this.insertHolderData([fundTotalAmount, fundTotalAmount - dedAmount]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isNewDocument()
    {
        boolean ret = true;
        int i;

        //check for element is on the last level of tree
        for (i = 1; i < conlen(conKey); i++)
        {
            ret = ret && conpeek(conKey, i);

            if (!ret) break;
        }

        //check if it is a leaf of the tree
        if (ret)
        {
            ret = ret && !conpeek(conKey, i);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewRow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isNewRow(container _key)
    {
        boolean ret = true;
        int i;

        for (i = 1; i <= conlen(_key); i++)
        {
            ret = ret && conpeek(_key, i);

            if (!ret) break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Set             checkedMainEmplSetLocal = new Set(Types::String);

        if (! this.checkTaxParameters())
            return;

        try
        {
            livingTypeRate = RPayCounterTable::find(payTaxParameters.CounterUnit2011).PayRateEmpl;

            this.initEmployeesData();
            this.emplTraverse();
        }
        catch(Exception::Error)
        {
            if (excelDocument)
                excelDocument.finalize();

            excelDocument = NULL;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPeriodDialogFields</Name>
				<Source><![CDATA[
    protected void setPeriodDialogFields(RpayPensionFundExportKindOfCorrection _reportType, Yr _year, Yr _corrYear)
    {
        taxPeriodField.visible(false);
        corrTaxPeriodField.visible(false);
        taxPeriod2010Field.visible(false);
        corrTaxPeriod2010Field.visible(false);

        if (_reportType == RpayPensionFundExportKindOfCorrection::None)
        {
            corrPeriodGroup.visible(false);
        }
        else
        {
            corrPeriodGroup.visible(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackKey</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void unpackKey()
    {
        currentEmplId       = conpeek(conKey, 1);
        personCategoryId    = conpeek(conKey, 2);
        agreementType       = conpeek(conKey, 3);
        curPeriod           = conpeek(conKey, 4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>