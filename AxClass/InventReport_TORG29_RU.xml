<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventReport_TORG29_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventReport_TORG29_RU</c> generates TORG-29 report.
/// </summary>
public final class InventReport_TORG29_RU extends RunBase
{
    TransDate                 fromDate;
    TransDate                 toDate;
    InventLocationId          inventLocationId;
    DocumentNum               documentNum;
    TransDate                 documentDate;
    HcmWorkerRecId            workerFCP;
    HcmWorkerRecId            workerChecker;
    NoYes                     excludeStorno;

    DialogField               fieldFromDate;
    DialogField               fieldToDate;
    DialogField               fieldInventLocationId;
    DialogField               fieldDocumentNum;
    DialogField               fieldDocumentDate;
    DialogField               fieldWorkerFCP;
    DialogField               fieldWorkerChecker;
    DialogField               fieldExcludeStorno;

    SysQueryRun               queryRun;
    TmpInventReport_TORG29_RU tmpTrans;
    TmpInventReport_TORG29_RU tmpTransReceipt;
    TmpInventReport_TORG29_RU tmpTransIssue;

    Amount                    startBalance;

    private const Version CurrentVersion = 2;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildExcludedTransactionsSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates excluded transactions <c>set</c>.
    /// </summary>
    /// <param name = "_queryRun">The <c>QueryRun</c> object with transactions.</param>
    /// <param name = "_excludedTransactions">The <c>Set</c> with excluded transactions.</param>
    protected void buildExcludedTransactionsSet(QueryRun _queryRun, Set _excludedTransactions)
    {
        InventTransPosting      inventTransPosting;
        InventTrans             inventTransStorned;
        TransLink_RU            transLink;
        QueryRun                queryRunStorno = new QueryRun(_queryRun.query());

        QueryBuildDataSource qbds = queryRunStorno.query().dataSourceTable(tablenum(InventTransPosting));
        QueryBuildRange qbr = qbds.rangeField(fieldnum(InventTransPosting, TransDate));
        qbr.value(SysQuery::range(fromDate, toDate));

        qbds = queryRunStorno.query().dataSourceTable(tablenum(InventTrans));
        qbr  = qbds.rangeField(fieldnum(InventTrans, Storno_RU));
        qbr.value(SysQuery::value(NoYes::Yes));

        while (queryRunStorno.next())
        {
            InventTrans inventTrans = queryRunStorno.get(tablenum(InventTrans));
            select firstonly RecId from inventTransPosting
                where inventTransPosting.TransDate              >= fromDate
                   && inventTransPosting.TransDate              <= toDate
                   && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
                exists join inventTransStorned
                where inventTransStorned.Voucher                == inventTransPosting.Voucher
                   && inventTransStorned.InventTransOrigin      == inventTransPosting.InventTransOrigin
                   && inventTransStorned.DateFinancial          == inventTransPosting.TransDate
                exists join transLink
                where transLink.RefTableId                      == tablenum(InventTrans)
                   && transLink.RefPri                          == inventTransStorned.RecId
                   && transLink.RefSec                          == inventTrans.RecId;

            if (inventTransPosting)
            {
                _excludedTransactions.add(inventTrans.RecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryRunFetch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>QueryRun</c> for transactions.
    /// </summary>
    /// <param name = "_queryRun">The base <c>QueryRun</c> object.</param>
    /// <returns>The <c>QueryRun</c> object.</returns>
    protected QueryRun buildQueryRunFetch(QueryRun _queryRun)
    {
        Query                   queryFetch = new Query(_queryRun.query());

        QueryBuildDataSource qbds = queryFetch.dataSourceTable(tablenum(InventTrans));

        QueryBuildRange qbr = qbds.rangeField(fieldnum(InventTrans, Qty));
        qbr.value(SysQuery::valueNot(0));

        qbr = qbds.rangeField(fieldnum(InventTrans, StatusIssue));
        qbr.value(SysQuery::value(StatusIssue::Sold));

        qbr = qbds.addRange(fieldnum(InventTrans, StatusIssue));
        qbr.value(SysQuery::value(StatusIssue::None));

        qbr = qbds.rangeField(fieldnum(InventTrans, StatusReceipt));
        qbr.value(SysQuery::value(StatusReceipt::Purchased));

        qbr = qbds.addRange(fieldnum(InventTrans, StatusReceipt));
        qbr.value(SysQuery::value(StatusReceipt::None));

        qbds = qbds.addDataSource(tablenum(InventTransPosting));
        qbds.fetchMode(QueryFetchMode::One2One);
        qbds.addSelectionField(fieldnum(InventTransPosting, TableId));

        qbr = qbds.addRange(fieldnum(InventTransPosting, TransDate));
        qbr.value(SysQuery::range(fromDate, toDate));

        qbr = qbds.addRange(fieldnum(InventTransPosting, InventTransPostingType));
        qbr.value(SysQuery::value(InventTransPostingType::Financial));

        qbds.addLink(fieldnum(InventTrans, Voucher),           fieldnum(InventTransPosting, Voucher));
        qbds.addLink(fieldnum(InventTrans, DateFinancial),     fieldnum(InventTransPosting, TransDate));
        qbds.addLink(fieldnum(InventTrans, InventTransOrigin), fieldnum(InventTransPosting, InventTransOrigin));

        qbds = queryFetch.dataSourceTable(tablenum(InventDim));
        qbr  = qbds.rangeField(fieldnum(InventDim, InventLocationId));
        qbr.value(SysQuery::value(inventLocationId));

        return new QueryRun(queryFetch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates amount adjustment from <c>InventSettlement</c>.
    /// </summary>
    /// <param name = "_beginDate">The begin date settlement transactions.</param>
    /// <param name = "_inventTransRecId">Referenced record to <c>InventTrans</c>.</param>
    /// <returns>The <c>CostAmountAdjusted</c> value.</returns>
    protected CostAmountAdjusted calcAdjustment(TransDate _beginDate, RecId _inventTransRecId)
    {
        InventSettlement inventSettlement;

        select sum(CostAmountAdjustment) from inventSettlement
            where inventSettlement.TransRecId             == _inventTransRecId         &&
                  inventSettlement.Cancelled              == NoYes::No                 &&
                  inventSettlement.TransDate              >  _beginDate                &&
                  inventSettlement.InventTransCurrency_RU == InventTransCurrency_RU::PrimaryCur;

        return inventSettlement.CostAmountAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcStornedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates storned amount for the <c>InventTrans</c> record.
    /// </summary>
    /// <param name="_stornedInventTransRecId">
    /// The <c>InventTrans</c> record identifier storned amount is calculated for.
    /// </param>
    /// <returns>
    /// Storned amount for the <c>InventTrans</c> record.
    /// </returns>
    protected Amount calcStornedAmount(RecId _stornedInventTransRecId)
    {
        InventTransPosting  inventTransPosting;
        InventTrans         stornoInventTrans;
        Amount              stornoAmount;
        TransLink_RU        transLink;

        while select stornoInventTrans
            where
                stornoInventTrans.Storno_RU == true
            join TableId from inventTransPosting
            where inventTransPosting.TransDate               >= fromDate
                && inventTransPosting.TransDate              <= toDate
                && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
                && inventTransPosting.Voucher                == stornoInventTrans.Voucher
                && inventTransPosting.InventTransOrigin      == stornoInventTrans.InventTransOrigin
                && inventTransPosting.TransDate              == stornoInventTrans.DateFinancial
            exists join transLink
            where transLink.RefTableId                       == tablenum(InventTrans)
                && transLink.RefPri                          == _stornedInventTransRecId
                && transLink.RefSec                          == stornoInventTrans.RecId
        {
            stornoAmount += stornoInventTrans.costValue()
                - this.calcAdjustment(toDate, stornoInventTrans.RecId)
                + this.calcStornedAmount(stornoInventTrans.RecId);
        }

        return stornoAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWarehouseStartBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates warehouse start balance.
    /// </summary>
    /// <param name = "_inventLocationId">The <c>InventLocationId</c> of warehouse.</param>
    /// <param name = "_perDate">Start date of calculation.</param>
    /// <returns>The <c>Amount</c> value.</returns>
    protected Amount calcWarehouseStartBalance(
        InventLocationId _inventLocationId = inventLocationId,
        TransDate _perDate = fromDate)
    {
        InventDimParm           inventDimParm;
        Amount                  warehouseStartBalance;
        Query                   repQuery = this.queryRun().query();

        if (_perDate)
        {
            Query balQuery = new Query(repQuery);
            balQuery.dataSourceTable(tableNum(InventTransOrigin)).addGroupByField(fieldNum(InventTransOrigin, ItemId));
            balQuery.dataSourceTable(tableNum(InventDim)).addGroupByField(fieldNum(InventDim, InventDimId));
            findOrCreateRange_W(balQuery.dataSourceTable(tableNum(InventDim)), fieldNum(InventDim, InventLocationId), _inventLocationId);

            QueryRun balQueryRun = new queryRun(balQuery);
            while (balQueryRun.next())
            {
                InventTransOrigin inventTransOrigin = balQueryRun.get(tableNum(InventTransOrigin));
                InventDim inventDim = balQueryRun.get(tableNum(InventDim));

                inventDim = inventDim::find(inventDim.inventDimId);
                inventDimParm.initFromInventDim(inventDim);
                warehouseStartBalance += new InventSumFinancial(_perDate - 1, inventTransOrigin.ItemId, inventDim, inventDimParm).value();
            }
        }

        return warehouseStartBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addGroup("@SYS98430");
        fieldFromDate         = dialog.addFieldValue(extendedtypestr(FromDate), fromDate, "@SYS428");
        fieldToDate           = dialog.addFieldValue(extendedtypestr(ToDate),   toDate,   "@SYS50115");

        dialog.addGroup("@SYS6437");
        fieldInventLocationId = dialog.addFieldValue(extendedtypestr(InventLocationId), inventLocationId);

        dialog.addGroup("@SYS21873");
        fieldDocumentNum      = dialog.addFieldValue(extendedtypestr(DocumentNum),      documentNum,     "@SYS8434");
        fieldDocumentDate     = dialog.addFieldValue(extendedtypestr(TransDate),        DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS2587");
        fieldWorkerFCP        = dialog.addFieldValue(extendedtypestr(HcmWorkerRecId),   workerFCP,       "@SYS4330");
        fieldWorkerChecker    = dialog.addFieldValue(extendedtypestr(HcmWorkerRecId),   workerChecker,   "@SYS119328");

        dialog.addGroup("@GLS105964");
        fieldExcludeStorno    = dialog.addFieldValue(enumstr(NoYes), excludeStorno, "@GLS112480", "@GLS112482");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs <c>OXMLExcelReport_TORG29</c> object.
    /// </summary>
    public void doPrint()
    {
        OXMLExcelReport_TORG29::newFromInventReportTORG29(this).runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches transactions for report.
    /// </summary>
    protected void fetchTransactions()
    {
        Set               excludedTransactions;
        QueryRun          queryRunFetch = this.buildQueryRunFetch(this.queryRun());

        if (excludeStorno)
        {
            excludedTransactions = new Set(extendedTypeId2Type(extendedtypenum(recId)));
            this.buildExcludedTransactionsSet(this.buildQueryRunFetch(this.getBaseQueryRun()), excludedTransactions);
        }

        startBalance = this.calcWarehouseStartBalance();

        while (queryRunFetch.next())
        {
            InventTransOrigin inventTransOrigin = queryRunFetch.get(tablenum(InventTransOrigin));
            InventTrans inventTrans = queryRunFetch.get(tablenum(InventTrans));

            if ((excludeStorno && excludedTransactions.in(inventTrans.RecId)))
            {
                continue;
            }

            tmpTrans.clear();
            tmpTrans.ReferenceCategory  = inventTransOrigin.ReferenceCategory;
            tmpTrans.ReferenceId        = inventTransOrigin.ReferenceId;
            tmpTrans.CustVendAC         = inventTransOrigin.custVendAC();
            tmpTrans.InventTransId      = inventTransOrigin.InventTransId;
            tmpTrans.Voucher            = inventTrans.Voucher;
            tmpTrans.InvoiceId          = inventTrans.InvoiceId;
            tmpTrans.DateFinancial      = inventTrans.DateFinancial;
            tmpTrans.CostAmountPosted   = inventTrans.costValue() - this.calcAdjustment(toDate, inventTrans.RecId);

            if (excludeStorno)
            {
                tmpTrans.CostAmountPosted += this.calcStornedAmount(inventTrans.RecId);
            }

            if (inventTrans.Qty < 0 && inventTransOrigin.ReferenceCategory == InventTransType::InventTransfer)
            {
                tmpTrans.InventTransId = inventTransOrigin.transferInventTransOrigin().InventTransId;
            }

            tmpTrans.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates base query run from query <c>InventReport_TORG29_RU</c>.
    /// </summary>
    /// <returns>The <c>QueryRun</c> object.</returns>
    protected QueryRun getBaseQueryRun()
    {
        return new SysQueryRun(querystr(InventReport_TORG29_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        fromDate         = fieldFromDate.value();
        toDate           = fieldToDate.value();
        inventLocationId = fieldInventLocationId.value();
        documentNum      = fieldDocumentNum.value();
        documentDate     = fieldDocumentDate.value();
        workerFCP        = fieldWorkerFCP.value();
        workerChecker    = fieldWorkerChecker.value();
        excludeStorno    = fieldExcludeStorno.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceiptOrIssueTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets recept or issue transactions.
    /// </summary>
    /// <param name = "_isReceipt">Indicates types of transactions.</param>
    /// <returns>The <c>TmpInventReport_TORG29_RU</c> object.</returns>
    public TmpInventReport_TORG29_RU getReceiptOrIssueTrans(boolean _isReceipt = true)
    {
        return _isReceipt ? tmpTransReceipt : tmpTransIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartBalance</Name>
				<Source><![CDATA[
    public CostAmount getStartBalance()
    {
        return startBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates sum of transactions.
    /// </summary>
    protected void groupTransactions()
    {
        TmpInventReport_TORG29_RU tmpTransGroupByLot;

        while select sum(CostAmountPosted) from tmpTrans
            group by Voucher, InvoiceId, ReferenceCategory, ReferenceId,
                     CustVendAC, InventTransId, DateFinancial
        {
            if (tmpTrans.CostAmountPosted != 0)
            {
                tmpTransGroupByLot.clear();
                tmpTransGroupByLot.data(tmpTrans);
                tmpTransGroupByLot.Direction = tmpTrans.CostAmountPosted < 0 ? InventDirection::Issue : InventDirection::Receipt;
                tmpTransGroupByLot.doInsert();
            }
        }

        while select sum(CostAmountPosted) from tmpTransGroupByLot
            group by Voucher, InvoiceId, ReferenceCategory, ReferenceId,
                     CustVendAC, DateFinancial, Direction
        {
            TmpInventReport_TORG29_RU tmpTransLocal = tmpTransGroupByLot.Direction == InventDirection::Receipt ? tmpTransReceipt : tmpTransIssue;

            tmpTransLocal.clear();
            tmpTransLocal.data(tmpTransGroupByLot);
            tmpTransLocal.doInsert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        this.initQuery();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected void initQuery()
    {
        queryRun = this.getBaseQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, fromDate, toDate, inventLocationId, documentNum, documentDate, workerFCP, workerChecker, excludeStorno, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmChecker</Name>
				<Source><![CDATA[
    public HcmWorkerRecId parmChecker(HcmWorkerRecId _workerChecker = workerChecker)
    {
        workerChecker = _workerChecker;
        return workerChecker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentDate</Name>
				<Source><![CDATA[
    public TransDate parmDocumentDate(TransDate _documentDate = documentDate)
    {
        documentDate = _documentDate;
        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentNum</Name>
				<Source><![CDATA[
    public DocumentNum parmDocumentNum(DocumentNum _documentNum = documentNum)
    {
        documentNum = _documentNum;
        return documentNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeStorno</Name>
				<Source><![CDATA[
    public boolean parmExcludeStorno(boolean _excludeStorno = excludeStorno)
    {
        excludeStorno = _excludeStorno;
        return excludeStorno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFinanciallyChargedPerson</Name>
				<Source><![CDATA[
    public HcmWorkerRecId parmFinanciallyChargedPerson(HcmWorkerRecId _workerFcp = workerFcp)
    {
        workerFcp = _workerFcp;
        return workerFcp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventLocationId</Name>
				<Source><![CDATA[
    public InventLocationId parmInventLocationId(InventLocationId _inventLocationId = inventLocationId)
    {
        inventLocationId = _inventLocationId;
        return inventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (! this.validate())
        {
            throw error("@GLS104275");
        }

        this.fetchTransactions();
        this.groupTransactions();
        this.doPrint();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    boolean showQuerySelectButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container   packedQueryRun;
        Integer     version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, fromDate, toDate, inventLocationId, documentNum, documentDate, workerFCP, workerChecker, excludeStorno, packedQueryRun] = _packedClass;
                if (SysQuery::isPackedOk(packedQueryRun))
                {
                    queryRun = new SysQueryRun(packedQueryRun);
                }
                else
                {
                    this.initQuery();
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        TransDate   closingDate = InventClosing::closingDate();
        boolean     ret = super(_calledFrom);

        if (! toDate)
        {
            ret = checkFailed(strfmt("@GLS103654", "@SYS50115"));
        }
        else if (fromDate > toDate)
        {
            ret = checkFailed("@GLS101164");
        }

        if (! inventLocationId)
        {
            ret = checkFailed(strfmt("@GLS103654", "@SYS6437"));
        }
        else if (! InventLocation::exist(inventLocationId))
        {
            ret = checkFailed(strfmt("@SYS55265", inventLocationId,
                                                  "@SYS6437",
                                                  tablestr(InventDim)));
        }

        if (! documentNum)
        {
            ret = checkFailed(strfmt("@GLS103654", "@SYS8434"));
        }

        if (! documentDate)
        {
            ret = checkFailed(strfmt("@GLS103654", "@SYS2587"));
        }

        if (workerFCP && ! HcmWorker::exist(workerFCP))
        {
            ret = checkFailed(strfmt("@SYS55265", workerFCP,
                                                  "@SYS4330",
                                                  tablestr(HcmWorker)));
        }

        if (workerChecker && ! HcmWorker::exist(workerChecker))
        {
            ret = checkFailed(strfmt("@SYS55265", workerChecker,
                                                  "@SYS119328",
                                                  tablestr(HcmWorker)));
        }

        if (ret && _calledFrom && closingDate && closingDate < toDate)
        {
            if (Box::yesNo("@GLS113672", DialogButton::No) == DialogButton::No)
            {
                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static InventReport_TORG29_RU construct()
    {
        return new InventReport_TORG29_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS113673";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventReport_TORG29_RU report = InventReport_TORG29_RU::construct();

        if (report.prompt())
        {
            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>