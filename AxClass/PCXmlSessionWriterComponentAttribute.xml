<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCXmlSessionWriterComponentAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCXmlSessionWriterComponentAttribute</c> class writes session XML for a component attribute.
/// </summary>
class PCXmlSessionWriterComponentAttribute
{
    private PCInstrumentationLogger logger;
    private boolean isPCDecimalDomainNoOfDecimalsFlightEnabled = PCDecimalDomainNoOfDecimalsFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        logger = PCInstrumentationLogger::createLogger(classStr(PCXmlSessionWriterComponentAttribute));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAttributeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <param name="_attributeType">
    /// The attribute type record.
    /// </param>
    /// <param name="_attributeTypeWriter">
    /// The XML writer used to store the types of attributes.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// The XML writer used to store the tree of components.
    /// </param>
    /// <param name="_parsedTypes">
    /// A collection containing the record IDs of the attribute types already parsed.
    /// </param>
    /// <param name="_parsedIntegerDomains">
    /// A map containing integer domains that have already been encountered during the XML generation.
    /// </param>
    /// <param name="_sessionLanguage">
    /// The language ID of the current session.
    /// </param>
    /// <param name="_hasBounds">
    /// The language ID of the current session.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Throws an error if an integer domain with no ranges specified is encountered.
    /// </exception>
    public void writeAttributeType(
        EcoResAttributeType _attributeType,
        PCXmlWriter         _attributeTypeWriter,
        PCXmlWriter         _componentTreeWriter,
        Set                 _parsedTypes,
        Map                 _parsedIntegerDomains,
        LanguageId          _sessionLanguage,
        boolean             _hasBounds)
    {
        #PC
        EcoResEnumerationAttributeTypeValue enumAttributeTypeValue;
        EcoResBoundedAttributeTypeValue     bounds;
        EcoResValue                         upperBound;
        EcoResValue                         lowerBound;
        XmlWriter                           integerDomainXMLWriter;
        str                                 integerDomainXML;

        EcoResTextValue                 textValue;
        EcoResIntValue                  intValue;
        EcoResTextValueTranslation      textValueTranslation;
        PCSolverTextValue               solverValue;

        using (var activityContext = logger.preRuntime().generateAttributeTypeXml())
        {
            if (_attributeType.IsEnumeration && _attributeType.DataType == AttributeDataType::Text)
            {
                _componentTreeWriter.writeStartElement(#enumDomainElement);
                _componentTreeWriter.writeAttributeString(#variableDomainAttribute, _attributeType.Name);
                _componentTreeWriter.writeAttributeString(#enumDefinitionId, int642str(_attributeType.RecId));

                if (!_parsedTypes.in(_attributeType.RecId))
                {
                    //don't write the enum domain more than once
                    _parsedTypes.add(_attributeType.RecId);
                    _attributeTypeWriter.writeStartElement(#enumDomainElement);
                    _attributeTypeWriter.writeAttributeString(#nameAttribute, _attributeType.Name);
                    _attributeTypeWriter.writeAttributeString(#enumDomainId, int642str(_attributeType.RecId));

                    while select Value from solverValue
                    join RecId, TextValue from textValue
                    where textValue.RecId == solverValue.TextValue
                        join RecId from enumAttributeTypeValue
                            order by enumAttributeTypeValue.OrdinalNumber
                                where   enumAttributeTypeValue.AttributeType == _attributeType.RecId &&
                                        enumAttributeTypeValue.Value == textValue.RecId
                     outer join TextValue from textValueTranslation
                                where textValueTranslation.TextValueTable   == textValue.RecId &&
                                      textValueTranslation.Language         == _sessionLanguage
                    {
                        _attributeTypeWriter.writeStartElement(#EnumValueElement);
                        _attributeTypeWriter.writeAttributeString(#valueAttribute, solverValue.Value);
                        // if translation exists for client language use it, else use default language
                        _attributeTypeWriter.writeAttributeString(#displayValue, textValueTranslation.TextValue ? textValueTranslation.TextValue : textValue.TextValue);
                        _attributeTypeWriter.writeEndElement();
                    }
                    _attributeTypeWriter.writeEndElement();
                }
                _componentTreeWriter.writeEndElement();

            }
            else if (!_attributeType.IsEnumeration && _attributeType.DataType == AttributeDataType::Text)  // text with no enumerations
            {
                _componentTreeWriter.writeStartElement(#textDomainElement);
                _componentTreeWriter.writeEndElement();

            }
            else if (_attributeType.IsEnumeration && _attributeType.DataType == AttributeDataType::Integer)
            {
                _componentTreeWriter.writeStartElement(#integerSetDomainElement);
                _componentTreeWriter.writeAttributeString(#variableDomainAttribute, _attributeType.Name);
                _componentTreeWriter.writeAttributeString(#integerSetDomainId, int642str(_attributeType.RecId));

                if (!_parsedTypes.in(_attributeType.RecId))
                {
                    //don't write the enum domain more than once
                    _parsedTypes.add(_attributeType.RecId);
                    _attributeTypeWriter.writeStartElement(#integerSetDomainElement);
                    _attributeTypeWriter.writeAttributeString(#nameAttribute, _attributeType.Name);
                    _attributeTypeWriter.writeAttributeString(#integerSetDomainId, int642str(_attributeType.RecId));

                    while select RecId, IntValue from intValue
                    join RecId from enumAttributeTypeValue
                        order by enumAttributeTypeValue.OrdinalNumber
                            where   enumAttributeTypeValue.AttributeType == _attributeType.RecId &&
                                    enumAttributeTypeValue.Value == intValue.RecId
                    {
                        _attributeTypeWriter.writeStartElement(#Value);
                        _attributeTypeWriter.writeAttributeString(#valueAttribute, int2str(intValue.IntValue));
                        _attributeTypeWriter.writeEndElement();
                    }
                    _attributeTypeWriter.writeEndElement();
                }
                _componentTreeWriter.writeEndElement();

            }
            else if (_attributeType.DataType == AttributeDataType::Integer)
            {
                if (_hasBounds)
                {
                    if ( ! _parsedIntegerDomains.exists(_attributeType.RecId) )
                    {
                        select firstonly RecId from bounds
                    where   bounds.AttributeType == _attributeType.RecId
                    join    upperBound
                    where   upperBound.RecId == bounds.UpperBound
                    join    lowerBound
                    where   lowerBound.RecId == bounds.LowerBound;

                        // check if this is an integer with no bounds
                        if (upperBound.RecId == 0 || lowerBound.RecId == 0)
                        {
                            _componentTreeWriter.writeStartElement(#booleanDomainElement);
                            _componentTreeWriter.writeEndElement();
                            return;

                        }

                        integerDomainXMLWriter = PCRuntimeLibrary::createXmlWriter();
                        integerDomainXMLWriter.writeStartElement(#integerDomainElement);
                        integerDomainXMLWriter.writeAttributeString(#fromAttribute, lowerBound.pcGetStringValue());
                        integerDomainXMLWriter.writeAttributeString(#toAttribute, upperBound.pcGetStringValue());
                        integerDomainXMLWriter.writeEndElement();
                        integerDomainXMLWriter.close();

                        integerDomainXML = integerDomainXMLWriter.writeToString();
                        _parsedIntegerDomains.insert(_attributeType.RecId, integerDomainXML);
                    }

                    _componentTreeWriter.writeRaw(_parsedIntegerDomains.lookup(_attributeType.RecId));
                }
                else
                {
                    _componentTreeWriter.writeStartElement(#integerUnboundDomainElement);
                    _componentTreeWriter.writeEndElement();
                }

            }
            else if (_attributeType.DataType == AttributeDataType::Decimal)
            {
                _componentTreeWriter.writeStartElement(#decimalDomainElement);

                if (isPCDecimalDomainNoOfDecimalsFlightEnabled)
                {
                    _componentTreeWriter.writeAttributeString(#numberOfDecimalsElement, int2Str(PCXmlSessionWriterComponentAttribute::numberOfDecimals(_attributeType)));
                }

                _componentTreeWriter.writeEndElement();

            }
            else if (_attributeType.DataType == AttributeDataType::TrueFalse)
            {
                _componentTreeWriter.writeStartElement(#booleanDomainElement);
                _componentTreeWriter.writeEndElement();

            }
            else
            {
                this.writeAttributeTypeDefault();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberOfDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the number of decimals for the given attribute type.
    /// </summary>
    /// <param name="_attributeType">
    /// The attribute type record.
    /// </param>
    /// <returns>
    /// The number of decimals for the given attribute type.
    /// </returns>
    protected static int numberOfDecimals(EcoResAttributeType _attributeType)
    {
        return PCAttributeValueFormatter::numberOfDecimals();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeAttributeTypeDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    [Replaceable]
    protected void writeAttributeTypeDefault()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>write</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <param name="_categoryAttribute">
    /// A category attribute.
    /// </param>
    /// <param name="_attributeTypeWriter">
    /// The XML writer used to store the types of attributes.
    /// </param>
    /// <param name="_componentTreeWriter">
    /// The XML writer used to store the tree of components.
    /// </param>
    /// <param name="_parsedTypes">
    /// A collection containing the record IDs of the attribute types already parsed.
    /// </param>
    /// <param name="_parsedSystemTableConstraintTypes">
    /// A collection containing the record IDs of the system table constraint types already parsed.
    /// </param>
    /// <param name="_parsedIntegerDomains">
    /// A map containing integer domains that have already been encountered during the XML generation.
    /// </param>
    /// <param name="_attributeType">
    /// An attribute type record.
    /// </param>
    /// <param name="_solverVariable">
    /// A solver variable.
    /// </param>
    /// <param name="_sessionLanguage">
    /// The language ID of the current session.
    /// </param>
    /// <param name="_tableConstraintRelationsMap">
    /// A map containing any table constraint relations the component may have.
    /// </param>
    /// <param name="_attributeDefaultValuesMap">
    /// A map containing attribute default values.
    /// </param>
    /// <param name="_attributeValuesMap">
    /// A map containing attribute values.
    /// </param>
    /// <param name="_attributeModifiersMap">
    /// A map containing attribute modifiers.
    /// </param>
    /// <param name="_xmlSessionComponentAttributeBindings">
    /// A collection containing record IDs of the attributes which have an attribute binding to a BOM or route.
    /// </param>
    /// <param name="_runtimeInstanceIdManager">
    /// A runtime instance ID manager.
    /// </param>
    public void write(
        EcoResCategoryAttribute                 _categoryAttribute,
        PCXmlWriter                             _attributeTypeWriter,
        PCXmlWriter                             _componentTreeWriter,
        Set                                     _parsedTypes,
        PCXmlSessionDatabaseRelationTypes       _parsedSystemTableConstraintTypes,
        Map                                     _parsedIntegerDomains,
        EcoResAttributeType                     _attributeType,
        PCSolverVariable                        _solverVariable,
        LanguageId                              _sessionLanguage,
        Map                                     _tableConstraintRelationsMap,
        Map                                     _attributeDefaultValuesMap,
        Map                                     _attributeValuesMap,
        Map                                     _attributeModifiersMap,
        PCXmlSessionComponentAttributeBindings  _xmlSessionComponentAttributeBindings,
        PCRuntimeInstanceIdManager              _runtimeInstanceIdManager
    )
    {
        #PC
        EcoResAttributeValue                        attributeValue;
        EcoResComponentControl                      modifier;
        AttributeValueText                          defaultValue;
        PCTableConstraintColumnCategoryAttribute    tableConstraintRelation;
        boolean                                     hasMandatoryModifier;
        boolean                                     hasBounds;
        List                                        modifiersList;
        ListEnumerator                              le;

        PCXmlSessionWriterDatabaseRelationType      xmlSessionWriterDatabaseRelationType;

        using (var activityContext = logger.preRuntime().generateAttributeXml())
        {
            _componentTreeWriter.writeStartElement(#attributeElement);
            _componentTreeWriter.writeAttributeString(#nameAttribute, _solverVariable.Name);
            _componentTreeWriter.writeAttributeString(#displayName, _categoryAttribute.getAttributeTranslatedName(_sessionLanguage));
            _componentTreeWriter.writeAttributeString(#ReqIdAttribute, int642str(_categoryAttribute.RecId));
            _componentTreeWriter.writeAttributeString(#instanceId, int2str(_runtimeInstanceIdManager.getNextId()));

            //the domain "type" writes itself to XML
            if (_attributeType.IsEnumeration && _attributeType.DataType == AttributeDataType::Text)
            {
                _componentTreeWriter.writeAttributeString(#typeAttribute, #variableTypeEnum);
            }
            else if (_attributeType.DataType == AttributeDataType::Integer)
            {
                hasBounds = _attributeType.hasBounds();

                if (hasBounds)
                {
                    _componentTreeWriter.writeAttributeString(#typeAttribute, #variableTypeInteger);
                }
                else if (_attributeType.IsEnumeration)
                {
                    _componentTreeWriter.writeAttributeString(#typeAttribute, #variableTypeIntegerSet);
                }
                else
                {
                    _componentTreeWriter.writeAttributeString(#typeAttribute, #variableTypeIntegerUnbound);
                }
            }
            else if (_attributeType.DataType == AttributeDataType::TrueFalse)
            {
                _componentTreeWriter.writeAttributeString(#typeAttribute, #variableTypeBoolean);
            }
            else if ( _attributeType.DataType == AttributeDataType::Text )
            {
                _componentTreeWriter.writeAttributeString(#typeAttribute, #variableTypeText);
            }
            else if ( _attributeType.DataType == AttributeDataType::Decimal )
            {
                _componentTreeWriter.writeAttributeString(#typeAttribute, #variableTypeDecimal);
            }
            else if (!this.writeDefault(_categoryAttribute, _attributeTypeWriter, _componentTreeWriter, _parsedTypes,  _parsedSystemTableConstraintTypes,
                              _parsedIntegerDomains, _attributeType, _solverVariable, _sessionLanguage, _tableConstraintRelationsMap,  _attributeDefaultValuesMap,
                              _attributeValuesMap,  _attributeModifiersMap, _xmlSessionComponentAttributeBindings,  _runtimeInstanceIdManager))
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
        
            if (_attributeValuesMap.exists(_categoryAttribute.RecId))
            {
                attributeValue = _attributeValuesMap.lookup(_categoryAttribute.RecId);
                attributeValue.pcToXML(_componentTreeWriter);
            }

            if (_attributeDefaultValuesMap.exists(_categoryAttribute.RecId))
            {
                defaultValue = _attributeDefaultValuesMap.lookup(_categoryAttribute.RecId);

                if (defaultValue != '')
                {
                    _componentTreeWriter.writeAttributeString(#defaultAttribute, defaultValue);
                }
            }

            // check if the category attribute has a relation to a table constraint of type database relation (system in UI)
            if (_tableConstraintRelationsMap.exists(_categoryAttribute.RecId))
            {
                xmlSessionWriterDatabaseRelationType = PCXmlSessionWriterDatabaseRelationType::construct();

                tableConstraintRelation = _tableConstraintRelationsMap.lookup(_categoryAttribute.RecId);
                xmlSessionWriterDatabaseRelationType.write(_attributeType.Name,
                                                       tableConstraintRelation,
                                                       _parsedSystemTableConstraintTypes,
                                                       _componentTreeWriter,
                                                       _attributeType);
            }
            else
            {
                this.writeAttributeType(
                _attributeType,
                _attributeTypeWriter,
                _componentTreeWriter,
                _parsedTypes,
                _parsedIntegerDomains,
                _sessionLanguage,
                hasBounds);
            }

            if (_attributeModifiersMap.exists(_categoryAttribute.RecId))
            {
                modifiersList = List::create(_attributeModifiersMap.lookup(_categoryAttribute.RecId));

                le = modifiersList.getEnumerator();

                while (le.moveNext())
                {
                    modifier = le.current();
                    if (modifier.Modifier == EcoResModifierType::Mandatory)
                    {
                        hasMandatoryModifier = true;
                    }
                    modifier.pcToXML(_componentTreeWriter);
                }
            }

            //allocated attributes are implicitly mandatory
            if (!hasMandatoryModifier)
            {
                if (_xmlSessionComponentAttributeBindings.hasBinding(_categoryAttribute))
                {
                    modifier.clear();
                    modifier.Modifier = EcoResModifierType::Mandatory;
                    modifier.pcToXML(_componentTreeWriter);
                }
            }
            _componentTreeWriter.writeEndElement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates the XML representation of this record that is compatible with the product configuration.
    /// </summary>
    /// <param name="_categoryAttribute">
    ///     A category attribute.
    /// </param>
    /// <param name="_attributeTypeWriter">
    ///     The XML writer used to store the types of attributes.
    /// </param>
    /// <param name="_componentTreeWriter">
    ///     The XML writer used to store the tree of components.
    /// </param>
    /// <param name="_parsedTypes">
    ///     A collection containing the record IDs of the attribute types already parsed.
    /// </param>
    /// <param name="_parsedSystemTableConstraintTypes">
    ///     A collection containing the record IDs of the system table constraint types already parsed.
    /// </param>
    /// <param name="_parsedIntegerDomains">
    ///     A map containing integer domains that have already been encountered during the XML generation.
    /// </param>
    /// <param name="_attributeType">
    ///     An attribute type record.
    /// </param>
    /// <param name="_solverVariable">
    ///     A solver variable.
    /// </param>
    /// <param name="_sessionLanguage">
    ///     The language ID of the current session.
    /// </param>
    /// <param name="_tableConstraintRelationsMap">
    ///     A map containing any table constraint relations the component may have.
    /// </param>
    /// <param name="_attributeDefaultValuesMap">
    ///     A map containing attribute default values.
    /// </param>
    /// <param name="_attributeValuesMap">
    ///     A map containing attribute values.
    /// </param>
    /// <param name="_attributeModifiersMap">
    ///     A map containing attribute modifiers.
    /// </param>
    /// <param name="_xmlSessionComponentAttributeBindings">
    ///     A collection containing record IDs of the attributes which have an attribute binding to a BOM or route.
    /// </param>
    /// <param name="_runtimeInstanceIdManager">
    ///     A runtime instance ID manager.
    /// </param>
    /// <returns>
    ///     true if the attribute was successfully handled; otherwise, false.
    /// </returns>
    [Replaceable]
    protected boolean writeDefault(
        EcoResCategoryAttribute                 _categoryAttribute,
        PCXmlWriter                             _attributeTypeWriter,
        PCXmlWriter                             _componentTreeWriter,
        Set                                     _parsedTypes,
        PCXmlSessionDatabaseRelationTypes       _parsedSystemTableConstraintTypes,
        Map                                     _parsedIntegerDomains,
        EcoResAttributeType                     _attributeType,
        PCSolverVariable                        _solverVariable,
        LanguageId                              _sessionLanguage,
        Map                                     _tableConstraintRelationsMap,
        Map                                     _attributeDefaultValuesMap,
        Map                                     _attributeValuesMap,
        Map                                     _attributeModifiersMap,
        PCXmlSessionComponentAttributeBindings  _xmlSessionComponentAttributeBindings,
        PCRuntimeInstanceIdManager              _runtimeInstanceIdManager)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCXmlSessionWriterComponentAttribute construct()
    {
        return new PCXmlSessionWriterComponentAttribute();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>