<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxModelDocLineSalesParmLineImpl_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The tax model class for <c>SalesParmLine</c>.
/// </summary>
[TaxModelDocumentLineAttribute(tableStr(SalesParmLine))]
public class TaxModelDocLineSalesParmLineImpl_IN extends TaxModelDocLineSalesLineImpl_IN
{
    SalesParmTable salesParmTable;
    SalesParmLine  salesParmLine;
    SalesParmLine_IN  salesParmLine_IN;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssessableValueTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the assessable value of the document line.
    /// </summary>
    /// <returns>
    /// The assessable value.
    /// </returns>
    public AmountCur getAssessableValueTransactionCurrency()
    {
        return salesParmLine_IN.AssessableValueTransactionCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDeliveryDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction posting date.
    /// </summary>
    /// <returns>
    /// The sales order parm transaction posting date.
    /// </returns>
    public Date getDeliveryDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>TableId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>TableId</c>
    /// </returns>
    public TableId getDocumentLineMainTableId()
    {
        return salesParmLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLineMainTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>RecId</c> of the document line main table.
    /// </summary>
    /// <returns>
    /// The <c>RecId</c> of the document line main table.
    /// </returns>
    public RecId getDocumentLineMainTableRecId()
    {
        return salesParmLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGSTScrap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Scrap of the transaction line.
    /// </summary>
    /// <returns>
    /// True if the tax is Scrap for the transaction line; otherwise, false.
    /// </returns>
    public NoYesId getGSTScrap()
    {
        TransTaxInformation  transTaxInformationLoc;

        transTaxInformationLoc = this.getTransTaxInfomation();

        return transTaxInformationLoc.ExciseIsScrap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventTransId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>InventTransId</c>
    /// </returns>
    public InventTransId getInventTransId()
    {
        return salesParmLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> of the document line.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c>
    /// </returns>
    public ItemId getItemId()
    {
        return salesParmLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaximumRetailPriceTransactionCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the maximum retail price of the document line.
    /// </summary>
    /// <returns>
    /// The maximum retail price.
    /// </returns>
    public MaximumRetailPrice_IN getMaximumRetailPriceTransactionCurrency()
    {
        return salesParmLine_IN.MaximumRetailPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the quantity from the transaction line.
    /// </summary>
    /// <returns>
    ///    The quantity.
    /// </returns>
    /// <remarks>
    ///    If the transaction does not support quantities, 0 may be passed as the quantity. This will be used
    ///    to calculate taxes by unit.
    /// </remarks>
    public Qty getQuantity()
    {
        if (salesCalcTax)
        {
            return  salesCalcTax.transQty();
        }
        else
        {
            return salesParmLine.DeliverNow;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRelatedPackingSlip</Name>
				<Source><![CDATA[
    private CustPackingSlipTrans getRelatedPackingSlip()
    {
        SalesParmSubLine        salesParmSubLine;
        CustPackingSlipTrans    custPackingSlipTrans;

        select firstOnly RecId, deliveryDate from custPackingSlipTrans
            join RecId from salesParmSubLine
                where custPackingSlipTrans.RecId == salesParmSubLine.JournalRefRecId
                    && salesParmSubLine.JournalRefTableId == tableNum(CustPackingSlipTrans)
                    && salesParmSubLine.LineRefRecId == salesParmLine.RecId;

        return custPackingSlipTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRateBasingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax rate basing date for the given tax type.
    /// </summary>
    /// <param name="_taxType">
    /// The given tax type.
    /// </param>
    /// <returns>
    /// The tax rate date.
    /// </returns>
    public TransDate getTaxRateBasingDate(TaxType_IN _taxType)
    {
        TransDate       taxCalculationDate;
        TaxParameters   taxParameters;
        CustPackingSlipTrans    custPackingSlipTrans;

        if (_taxType == TaxType_IN::Excise)
        {
            taxParameters = TaxParameters::find();
            switch (taxParameters.CustomerCalculationDateType_IN)
            {
                case CustomerCalculationDateType_IN::DeliveryDate :
                    if (this.isInvoice())
                    {
                        custPackingSlipTrans = this.getRelatedPackingSlip();
                        if (custPackingSlipTrans.RecId != 0)
                        {
                            taxCalculationDate = custPackingSlipTrans.DeliveryDate;
                        }
                        else
                        {
                            taxCalculationDate = salesParmTable.Transdate;
                        }
                    }
                    else
                    {
                        taxCalculationDate = salesParmTable.Transdate;
                    }
                    break;
                case CustomerCalculationDateType_IN::InvoiceDate  :
                    taxCalculationDate = salesParmTable.Transdate;
                    break;
            }
        }
        else
        {
            taxCalculationDate = salesParmTable.Transdate;
        }

        return taxCalculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction posting date
    /// </summary>
    /// <returns>
    /// The transaction posting date
    /// </returns>
    public TransDate getTransDate()
    {
        if(!salesParmTable.Transdate && this.isForeignTransaction() && this.isShippingBill())
        {
            return CustInvoiceJour::findCustomsExportInvoiceDate_IN(salesParmTable.SalesId, salesParmTable.CustomsExportInvoiceId_IN);
        }

        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the domain object.
    /// The method should only be called by the <c>TaxModelDocLineFactoryable_IN</c> classes.
    /// </summary>
    /// <param name="_documentLineMap">
    /// The document line buffer.
    /// </param>
    public void init(SalesPurchJournalLine _documentLineMap)
    {
        CustomsShippingBillTrans_IN customsShippingBillTrans;
        CustomsShippingBillJour_IN  customsShippingBillJour;
        
        if (_documentLineMap.SourceTableId == tableNum(CustomsShippingBillTrans_IN))
        {
            customsShippingBillTrans = _documentLineMap;
            select firstOnly ParmId, SalesId from customsShippingBillJour
                where customsShippingBillJour.SalesId                       == customsShippingBillTrans.SalesId
                && customsShippingBillJour.InvoiceId                        == customsShippingBillTrans.InvoiceId
                && customsShippingBillJour.InvoiceDate                      == customsShippingBillTrans.InvoiceDate
                && customsShippingBillJour.LedgerVoucher                    == customsShippingBillTrans.LedgerVoucher
                && customsShippingBillJour.CustomsShippingBillNumberTable   == customsShippingBillTrans.CustomsShippingBillNumberTable;
            
            salesParmLine = SalesParmLine::findByInventTransId_IN(customsShippingBillJour.ParmId,
            SalesParmTable::findSalesId(customsShippingBillJour.SalesId, customsShippingBillJour.parmId).TableRefId,
                customsShippingBillTrans.InventTransId);
        }
        else
        {
            salesParmLine = _documentLineMap;
        }

        salesParmTable = salesParmLine.salesParmTable();
        salesParmLine_IN = salesParmLine.salesParmLine_IN();

        super(salesParmLine.salesLine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoice</Name>
				<Source><![CDATA[
    private boolean isInvoice()
    {
        DocumentStatus  documentStatus;

        documentStatus = salesParmTable.salesParmUpdate().DocumentStatus;
        return documentStatus == DocumentStatus::Invoice || documentStatus == documentStatus::ShippingBill_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShippingBill</Name>
				<Source><![CDATA[
    private boolean isShippingBill()
    {
        DocumentStatus  documentStatus;

        documentStatus = salesParmTable.salesParmUpdate().DocumentStatus;
        return documentStatus == DocumentStatus::ShippingBill_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPostTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// To determine if tax transaction should be posted or not.
    /// </summary>
    /// <returns>
    /// True if the document line should post tax transaction; otherwise, false.
    /// </returns>
    public NoYes shouldPostTaxTrans()
    {
        DocumentStatus  documentStatus;

        documentStatus = salesParmTable.salesParmUpdate().DocumentStatus;

        boolean isCreditDebitNote;

        // Credit note/debit note against export only IGST tax amount can be reversed or adjusted.
        SalesParmLine salesParmLineSum;
        select sum(LineAmount) from salesParmLineSum
            where salesParmLineSum.ParmId == salesParmTable.ParmId
                && salesParmLineSum.OrigSalesId == salesParmTable.SalesId;

        if (salesParmLineSum.LineAmount < 0)
        {
            isCreditDebitNote = true;
        }
        else
        {
            TaxDocument taxDocument = TaxDocumentUtils::getTaxDocumentBySource(salesParmTable.TableId, salesParmTable.RecId);
            if (taxDocument.RecId)
            {
                TaxDocumentExtension_IN taxDocumentExtension = TaxDocumentExtension_IN::findByTaxDocument(taxDocument.TaxDocumentGuid);
                isCreditDebitNote = taxDocumentExtension.RefTaxDocumentExtension != 0;
            }
        }

        return ((documentStatus == DocumentStatus::Invoice || documentStatus == DocumentStatus::ProjectInvoice)
                && salesTable
                && (!salesTable.CustomsExportOrder_IN
                    || isCreditDebitNote))
            || documentStatus == documentStatus::ShippingBill_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line amount of the document line.
    /// </summary>
    /// <returns>
    /// The line amount.
    /// </returns>
    public LineAmount getLineAmount()
    {
        return salesParmLine.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentInvoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction invoice date
    /// </summary>
    /// <returns>
    /// The transaction invoice date
    /// </returns>
    public InvoiceDate getDocumentInvoiceDate()
    {
        return salesParmTable.Transdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Transaction document date
    /// </summary>
    /// <returns>
    /// The transaction document date
    /// </returns>
    public DocumentDate getDocumentDate()
    {
        return salesParmTable.DocumentDate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>