<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BOMHierarchyCheckJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BomHierarchyCheckJob extends RunBaseBatch implements BatchRetryable
{
    boolean                     checkCircularity;
    BOMRouteVersionSelectAll    versionSelect;
    BOMId                       bomId;
    BOMCircularityCheckStrategy bomCircularityCheckStrategy;

    BOMSearchInterval           searchInterval;
    BOMSearchIntervalBOM        searchIntervalBOM;  // Works only for BOMÂ´s
    TransDate                   fromDate;
    TransDate                   toDate;

    Integer                     maxLevels;

    DialogField                 dialogCheckCircularity;
    DialogField                 dialogVersionSelect;
    DialogField                 dialogBOMId;
    DialogField                 dialogBOMCircularityCheckStrategy;

    DialogField                 dialogSearchInterval;
    DialogField                 dialogSearchIntervalBOM;
    DialogField                 dialogFromDate;
    DialogField                 dialogToDate;

    DialogField                 dialogMaxLevels;
    internal PmfBOMFormula      bomOrFormula;

    #define.CurrentVersion(5)
    #localmacro.CurrentList
        CheckCircularity,
        bomCircularityCheckStrategy,
        versionSelect,
        BOMId,
        MaxLevels,
        searchInterval,
        searchIntervalBOM,
        FromDate,
        ToDate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        BOMTable        bomTableLocal;
        boolean         versionsEnabled = isConfigurationkeyEnabled(configurationkeynum(BOMVersion));
        DialogRunbase   dialog          = super();

        dialogCheckCircularity  = dialog.addFieldValue(extendedtypestr(BOMCheckCircularity),checkCircularity);
        bomTableLocal = BOMTable::find(this.parmBOMId());
        
        dialogBOMCircularityCheckStrategy = dialog.addFieldValue(enumStr(BOMCircularityCheckStrategy), BOMParameters::find().BOMCircularityCheckStrategy);
        
        if (versionsEnabled)
        {
            dialogVersionSelect     = dialog.addFieldValue(enumstr(BOMRouteVersionSelectAll),versionSelect);

            if (!#PmfEnabled || (bomTableLocal.RecId && bomTableLocal.PmfBOMFormula == PmfBOMFormula::BOM) || (!bomTableLocal.RecId && bomOrFormula == PmfBOMFormula::BOM))
            {
                dialogBOMId = dialog.addField(extendedtypestr(BOMId),"@SYS22298");
            }
            else
            {
                dialogBOMId = dialog.addField(extendedtypestr(PmfFormulaId),"@SYS672");
            }
        }

        dialog.addGroup("@SYS12899");
        dialogSearchInterval    = dialog.addFieldValue(extendedtypestr(BOMSearchInterval),searchInterval);
        dialogSearchIntervalBOM = dialog.addFieldValue(extendedtypestr(BOMSearchIntervalBOM),searchIntervalBOM);
        dialogFromDate          = dialog.addField(extendedtypestr(StartDate),"@SYS5209");
        dialogToDate            = dialog.addField(extendedtypestr(EndDate),"@SYS14656");

        if (versionsEnabled)
        {
            dialogVersionSelect.value(versionSelect);
            dialogBOMId.value(bomId);
        }

        dialogSearchInterval.value(searchInterval);
        dialogSearchIntervalBOM.value(searchIntervalBOM);
        dialogFromDate.value(fromDate);
        dialogToDate.value(toDate);

        this.dialogSetSearchIntervalBOM();

        dialog.allowUpdateOnSelectCtrl(true);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    When using the dialog class for dialog, this method is called whenever a control is selected.
    /// </summary>
    /// <remarks>
    ///    To enable this callback, the <c>allowUpdateOnSelectCtrl</c> property method must have been set to
    ///    true.
    /// </remarks>
    public void dialogSelectCtrl()
    {
        super();

        this.dialogSetSearchIntervalBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSetSearchIntervalBOM</Name>
				<Source><![CDATA[
    void dialogSetSearchIntervalBOM()
    {
        boolean         allowEdit;

        // Allow edit, when groupId is specified
        allowEdit   = (dialogSearchInterval && dialogSearchInterval.value())
                      ||
                      (! dialogSearchInterval && searchInterval);

        if (! allowEdit)
        {
            dialogSearchIntervalBOM.value(0);
            dialogFromDate.value(dateNull());
            dialogToDate.value(dateNull());
        }

        dialogSearchIntervalBOM.allowEdit(allowEdit);
        dialogFromDate.allowEdit(allowEdit);
        dialogToDate.allowEdit(allowEdit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogTask</Name>
				<Source><![CDATA[
    void dialogTask(int _p1 = 0)
    {
        super(_p1);

        this.dialogSetSearchIntervalBOM();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        checkCircularity            = dialogCheckCircularity.value();
        bomCircularityCheckStrategy = dialogBOMCircularityCheckStrategy.value();

        if (dialogVersionSelect)
            versionSelect = dialogVersionSelect.value();

        if (dialogBOMId)
            bomId = dialogBOMId.value();

        searchInterval      = dialogSearchInterval.value();
        searchIntervalBOM   = dialogSearchIntervalBOM.value();
        fromDate            = dialogFromDate.value();
        toDate              = dialogToDate.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMId</Name>
				<Source><![CDATA[
    BOMId parmBOMId(BOMId _bomId = bomId)
    {
        bomId = _bomId;
        return bomId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersionSelect</Name>
				<Source><![CDATA[
    BOMRouteVersionSelectAll parmVersionSelect(BOMRouteVersionSelectAll _versionSelect = versionSelect)
    {
        versionSelect = _versionSelect;

        return versionSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBOMCircularityCheckStrategy</Name>
				<Source><![CDATA[
    BOMCircularityCheckStrategy parmBOMCircularityCheckStrategy(BOMCircularityCheckStrategy _bomCircularityCheckStrategy = bomCircularityCheckStrategy)
    {
        bomCircularityCheckStrategy = _bomCircularityCheckStrategy;

        return bomCircularityCheckStrategy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBomOrFormula</Name>
				<Source><![CDATA[
    internal PmfBOMFormula parmBomOrFormula(PmfBOMFormula _bomOrFormula = bomOrFormula)
    {
        bomOrFormula = _bomOrFormula;

        return bomOrFormula;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        BOMHierarchyCheck   check   = new BOMHierarchyCheck(versionSelect,searchInterval);

        check.parmSearchIntervalBOM(searchIntervalBOM);

        if (bomId)
        {
            this.processBOM(check, BOMTable::find(bomId));
        }
        else
        {
            BOMTable bomTable;

            while select bomTable
                where bomTable.CheckBOM == true
            {
                bomId = bomTable.BOMId;
                this.processBOM(check, bomTable);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processBOM</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Verifies a Bill of materials validity
    /// </summary>
    /// <param name="_check">
    ///    A <c>BOMHierarchyCheck</c> instance, ensures a high complexity check loads BOM graph once even when multiple BOMs are processed
    /// </param>
    /// <param name="_bomTable">
    ///    A <c>BOMTable</c> row to check
    /// </param>
    private void processBOM(BOMHierarchyCheck _check, BOMTable _bomTable)
    {
        #OCCRetryCount

        try
        {
            boolean ok = true;
            this.progressInit(BOMHierarchyCheckJob::description(),2,#AviFindFile);

            progress.setCount(1);
            if (checkCircularity)
            {
                progress.setText("@SYS27677");
                ok = _check.checkCircularity(bomId,'','',fromDate,toDate, '', bomCircularityCheckStrategy) && ok;
            }
            progress.setCount(2);
            if (bomId && !checkCircularity)
            {
                progress.setText("@SYS27679");
                ok = _check.checkBOMConsistOf(bomId,1,fromDate,toDate) && ok;
            }

            if (bomId && checkCircularity && ! searchInterval)
            {
                BOMTable::setCheckBOM(bomId,ok);
            }

            if (_bomTable.PmfBOMFormula == PmfBOMFormula::Formula)
            {
                ok = ok && _bomTable.pmfCheckPctTotal(bomId);

                ok = ok && _bomTable.pmfCheckZeroLineQty(bomId);

                if (ok && !BOM::existBOMId(bomId))
                {
                    ok = false;
                    info("@PDS1514");
                }

                BOM bom;
                while select bom
                    where bom.BOMId == bomId
                    &&    bom.PmfPctEnable == true
                {
                    ok = ok && bom.pmfCheckUnitConversion();
                }

                ok = ok && _bomTable.pmfCheckVersionsBatchSizeFitsLinesQtySerie();

                ok = ok && BOMVersion::pmfCheckBatchSize(bomId);

                ok = ok && PmfFormulaCoBy::checkPerSeries(bomId);
            }

            if (ok)
            {
                if (_bomTable.PmfBOMFormula == PmfBOMFormula::Formula)
                {
                    info(strfmt("@PRO2346",bomId));
                }
                else
                {
                    info(strfmt("@SYS27492",bomId));
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> must override the <c>runsImpersonated</c> method and
    ///    return false, if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);
        boolean     dummy;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            case 2:
                [version, bomId, fromDate, toDate, dummy, checkCircularity, searchInterval, maxLevels] = packedClass;
                versionSelect = BOMHierarchyCheckJob::onlyActive2VersionSelect(dummy);
                break;
            case 3:
                [version, bomId, versionSelect, searchInterval, fromDate, toDate, checkCircularity, maxLevels] = packedClass;
                break;
            case 4:
                [version, versionSelect, bomId, maxLevels, searchInterval, searchIntervalBOM, fromDate, toDate] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCloseDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a dialog box can be closed.
    /// </summary>
    /// <param name="_calledFrom">
    ///    The object that called this method; optional.
    /// </param>
    /// <returns>
    ///    true if the dialog box can be closed; otherwise, false.
    /// </returns>
    public boolean checkCloseDialog(Object _calledFrom = null)
    {
        return super(_calledFrom);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        if (#PmfEnabled)
        {
            return "@PRO125";
        }
        else
        {
            return "@SYS11781";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDesignerParamsFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the BOM Designer parameters from an <c>Args</c> instance.
    /// </summary>
    /// <param name="_args">
    /// The <c>args</c> instance.
    /// </param>
    /// <returns>
    /// The parameters packed in a container.
    /// </returns>
    static private container getDesignerParamsFromArgs(Args _args)
    {
        container       bomDesignerParams;

        if (_args.caller() && _args.caller() is BOMDesignerCtrl)
        {
            BOMDesignerCtrl bomDesignerCtrl = _args.caller();
            bomDesignerParams = bomDesignerCtrl.getBOMDesignerParams();
        }
        return bomDesignerParams;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        BOMHierarchyCheckJob    checkJob;
        Common                  record;
        container               bomDesignerParams;
        BOMRouteVersionSelect   bomRouteVersionPrinciple;
        AccessType              accessBOMVersion;
        TransDate               versionDate;

        record = args.record();
        switch (record.TableId)
        {
            case tablenum(BOMVersion):
                checkJob = BOMHierarchyCheckJob::newBOMVersion(record);
                break;
            case tablenum(BOM):
                checkJob = BOMHierarchyCheckJob::newBOM(record);
                break;
            case tablenum(BOMTable):
                bomDesignerParams = BOMHierarchyCheckJob::getDesignerParamsFromArgs(args);
                if (bomDesignerParams)
                {
                    [accessBOMVersion, bomRouteVersionPrinciple, versionDate] = bomDesignerParams;
                    checkJob = BOMHierarchyCheckJob::newBOMDesigner(record,
                                                                    accessBOMVersion == AccessType::NoAccess ?
                                                                    BOMRouteVersionSelect::Active                   :
                                                                    bomRouteVersionPrinciple,
                                                                    versionDate);
                }
                else
                {
                    checkJob = BOMHierarchyCheckJob::newBOMTable(record);
                }
                break;

            default:
                checkJob = BOMHierarchyCheckJob::newDefault(args);
        }

        if (checkJob.prompt())
        {
            using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextByFormAndAction(strFmt('%1_%2', formStr(Dialog), classStr(BomHierarchyCheckJob)), args.menuItemName()))
            {
                checkJob.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDefault</Name>
				<Source><![CDATA[
    internal static BOMHierarchyCheckJob newDefault(Args _args)
    {
        BOMHierarchyCheckJob checkJob = new BOMHierarchyCheckJob();

        checkJob.getLast();
        checkJob.parmBOMId('');
        checkJob.parmBomOrFormula(_args.parmEnum());

        return checkJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOM</Name>
				<Source><![CDATA[
    static BOMHierarchyCheckJob newBOM(
        BOM         bom,
        boolean     resetParms = true
        )
    {
        BOMHierarchyCheckJob checkJob = new BOMHierarchyCheckJob();

        checkJob.getLast();
        checkJob.parmBOMId(bom.bomId);
        if (resetParms)
        {
            checkJob.parmFromDate(dateNull());
            checkJob.parmToDate(dateNull());
        }

        return checkJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMDesigner</Name>
				<Source><![CDATA[
    static BOMHierarchyCheckJob newBOMDesigner(BOMTable                 table,
                                               BOMRouteVersionSelect    versionSelect,
                                               TransDate                versionDate
                                              )
    {
        BOMHierarchyCheckJob checkJob;
        int                  tmpVersionSelect = enum2int(versionSelect);
        if (!table.RecId)
            return null;

        checkJob = new BOMHierarchyCheckJob();

        checkJob.getLast();
        checkJob.parmBOMId(table.bomId);
        checkJob.parmVersionSelect(tmpVersionSelect);
        checkJob.parmFromDate(versionDate);
        checkJob.parmToDate(versionDate);

        return checkJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMTable</Name>
				<Source><![CDATA[
    static BOMHierarchyCheckJob newBOMTable(BOMTable table)
    {
        BOMHierarchyCheckJob checkJob = new BOMHierarchyCheckJob();

        checkJob.getLast();
        checkJob.parmBOMId(table.bomId);

        return checkJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMVersion</Name>
				<Source><![CDATA[
    static BOMHierarchyCheckJob newBOMVersion(BOMVersion version)
    {
        BOMHierarchyCheckJob checkJob = new BOMHierarchyCheckJob();

        checkJob.getLast();
        checkJob.parmBOMId(version.bomId);
        checkJob.parmFromDate(version.FromDate);
        checkJob.parmToDate(version.ToDate);

        return checkJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onlyActive2VersionSelect</Name>
				<Source><![CDATA[
    static BOMRouteVersionSelectAll onlyActive2VersionSelect(boolean onlyActive)
    {
        return (onlyActive
            ? BOMRouteVersionSelectAll::Active
            : BOMRouteVersionSelectAll::All);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>