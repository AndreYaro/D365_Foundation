<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustExchAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustExchAdj extends CustVendExchAdj implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildBaseQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected Query buildBaseQuery()
    {
        Query userDefinedQuery = new Query(querystr(CustExchAdj));

        QueryBuildDataSource custTransDs = userDefinedQuery.dataSourceTable(tablenum(CustTrans));
        custTransDs.addRange(fieldNum(CustTrans, PostingProfile));
        custTransDs.update(true);

        CustTrans_W::addToQuery(custTransDs, JoinMode::OuterJoin);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            custTransDs.addRange(fieldNum(CustTrans, Prepayment)).value(queryValue(NoYes::No));
        }

        return userDefinedQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransTableId</Name>
				<Source><![CDATA[
    protected TableId getCustVendTransTableId()
    {
        return tableNum(CustTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenTableId</Name>
				<Source><![CDATA[
    protected TableId getCustVendTransOpenTableId()
    {
        return tableNum(CustTransOpen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransWTableId</Name>
				<Source><![CDATA[
    protected TableId getCustVendTransWTableId()
    {
        return tableNum(CustTrans_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransAccountNum</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransAccountNum()
    {
        return fieldNum(CustTrans, AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenRecId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransOpenRecId()
    {
        return fieldNum(CustTransOpen, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransRecId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransRecId()
    {
        return fieldNum(CustTrans, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransDate</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransDate()
    {
        return fieldNum(CustTrans, TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenRefRecId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransOpenRefRecId()
    {
        return fieldNum(CustTransOpen, RefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class where the same parameters can be used
    /// repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Running a class twice with the
    /// same parameters is not always possible. If the <c>canGoBatch</c> method returns false, this method
    /// will not have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    public SysModule module()
    {
        return SysModule::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        queryRun = new QueryRun(this.buildBaseQuery());
        postingProfile = CustParameters::find().PostingProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputReport</Name>
				<Source><![CDATA[
    protected void outputReport(createdTransactionId _transactionId)
    {
        TmpCustVendTransReorg tmpCustVendTransReorg;
        MenuFunction menuFunction;
        Args args;

        tmpCustVendTransReorg.RefRecId = _transactionId;
        tmpCustVendTransReorg.DueDate = this.postingDate();
        tmpCustVendTransReorg.TransDate = this.exchRateDate();

        args = new Args();
        args.record(tmpCustVendTransReorg);
        menuFunction = new MenuFunction(menuItemOutputStr(CustExchRateAdjustment), MenuItemType::Output);
        menuFunction.run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [CurrentVersion, dimSpec, printExchAdj, postingSpec, postingProfile, postingDate, exchRateDate, exchPrinciples, transExchAdjTxt, notes, hasBatchBeenSplit, fromCustVendAccountNum, toCustVendAccountNum, queryRun.pack()];
        if (FeatureStateProvider::isFeatureEnabled(CustVendExchAdjTopPickingFeature::instance()))
        {
            packed = SysPackExtensions::appendVariableToPack(packed, this.name(), varStr(hidden), this.parmHidden());
            packed = SysPackExtensions::appendVariableToPack(packed, this.name(), varStr(executionId), this.parmExecutionId());
        }
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Your classes that extend <c>RunBaseBatch</c> class must override the <c>runsImpersonated</c> method
    /// and return false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container packedQuery;

        switch (version)
        {
            case CurrentVersion:
                [version, dimSpec, printExchAdj, postingSpec, postingProfile, postingDate, exchRateDate, exchPrinciples, transExchAdjTxt, notes, hasBatchBeenSplit, fromCustVendAccountNum, toCustVendAccountNum, packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            case 7:
                [version, dimSpec, printExchAdj, postingSpec, postingProfile, postingDate, exchRateDate, exchPrinciples, transExchAdjTxt, notes, packedQuery] = _packedClass;

                if (packedQuery)
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default:
                return false;
        }

        if (FeatureStateProvider::isFeatureEnabled(CustVendExchAdjTopPickingFeature::instance()))
        {
            this.parmHidden(SysPackExtensions::extractPackedVariable(_packedClass, this.name(), varStr(hidden)));
            this.parmExecutionId(SysPackExtensions::extractPackedVariable(_packedClass, this.name(), varStr(executionId)));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        if (!postingDate)
        {
            throw error(strfmt("@SYS84378", "@SYS95471"));
        }

        ret = super();

        if (ret && exchRateDate != postingDate)
        {
            ret = (Box::yesNo("@SYS95677", DialogButton::Yes, "@SYS8879", "@SYS95678") == DialogButton::Yes);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS55328";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        CustExchAdj custExchAdj = new CustExchAdj();

        if (custExchAdj.prompt())
        {
            custExchAdj.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPostingProfileControlToDialog</Name>
				<Source><![CDATA[
    protected DialogField addPostingProfileControlToDialog()
    {
        return dialogRunbase.addFieldValue(extendedTypeStr(CustPostingProfile), postingProfile, "@SYS21530", "@SYS95476");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayloadOpenTrans</Name>
				<Source><![CDATA[
    internal protected Query getPayloadOpenTrans()
    {
        Query query = new Query(queryRun.query());

        QueryBuildDataSource custTransDs = query.dataSourceTable(tableNum(CustTrans));
        custTransDs.update(false);
        custTransDs.addRange(fieldNum(CustTrans, TransDate)).value(queryRange(dateNull(), postingDate));

        Ledger ledger = Ledger::findByLegalEntity(CompanyInfo::current());

        custTransDs.addRange(fieldNum(CustTrans, CurrencyCode)).value(SysQuery::valueNot(ledger.AccountingCurrency));
        if (!CustVendExchAdjVoucherLookupFlight::instance().isEnabled() || ledger.ReportingCurrency)
        {
            custTransDs.addRange(fieldNum(CustTrans, CurrencyCode)).value(SysQuery::valueNot(ledger.ReportingCurrency));
        }

        QueryBuildDataSource custTransOpenDs = custTransDs.addDataSource(tableNum(CustTransOpen));
        custTransOpenDs.addLink(fieldNum(CustTrans, RecId), fieldNum(CustTransOpen, RefRecId), custTransDs.name());
        custTransOpenDs.joinMode(JoinMode::ExistsJoin);
        custTransOpenDs.relations(false);

        for (int dataSourceNo = 1; dataSourceNo <= query.dataSourceCount(); dataSourceNo ++)
        {
            query.dataSourceNo(dataSourceNo).fields().clearFieldList();
            query.dataSourceNo(dataSourceNo).sortClear();
        }

        custTransDs.addSortField(fieldNum(CustTrans, RecId));
        custTransDs.addSelectionField(fieldNum(CustTrans, RecId));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayloadSettleTrans</Name>
				<Source><![CDATA[
    internal protected Query getPayloadSettleTrans()
    {
        Query query = new Query(queryRun.query());

        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        QueryBuildDataSource custTransDs = query.dataSourceTable(tableNum(CustTrans));
        custTransDs.update(false);
        custTransDs.addRange(fieldNum(CustTrans, TransDate)).value(queryRange(dateNull(), postingDate));

        Ledger ledger = Ledger::findByLegalEntity(CompanyInfo::current());

        custTransDs.addRange(fieldNum(CustTrans, CurrencyCode)).value(SysQuery::valueNot(ledger.AccountingCurrency));
        if (!CustVendExchAdjVoucherLookupFlight::instance().isEnabled() || ledger.ReportingCurrency)
        {
            custTransDs.addRange(fieldNum(CustTrans, CurrencyCode)).value(SysQuery::valueNot(ledger.ReportingCurrency));
        }

        // <GEERU>
        if (countryRegion_RU)
        {
            custTransDs.addRange(fieldNum(CustTrans, TransType)).value(queryNotValueCon_W([LedgerTransType::ExchAdjustment, LedgerTransType::AdvanceAdjustment_RU]));
        }
        // </GEERU>

        QueryBuildDataSource custSettlementDs = custTransDs.addDataSource(tableNum(CustSettlement));
        custSettlementDs.addLink(fieldNum(CustTrans, RecId), fieldNum(CustSettlement, TransRecId), custTransDs.name());
        custSettlementDs.joinMode(JoinMode::ExistsJoin);

        // <GEERU>
        if (countryRegion_RU)
        {
            custSettlementDs.addRange(fieldNum(CustSettlement, TransDate)).value(SysQuery::range(postingDate, null));
        }
        else
        {
            // </GEERU>
            custSettlementDs.addRange(fieldNum(CustSettlement, TransDate)).value(strFmt('> %1', queryValue(postingDate)));
            // <GEERU>
        }
        // </GEERU>
        custSettlementDs.addRange(fieldNum(CustSettlement, SettleAmountCur)).value(SysQuery::valueNot(0));
        custSettlementDs.addSortField(fieldNum(CustSettlement, TransDate), SortOrder::Ascending);
        custSettlementDs.relations(false);

        for (int dataSourceNo = 1; dataSourceNo <= query.dataSourceCount(); dataSourceNo ++)
        {
            query.dataSourceNo(dataSourceNo).fields().clearFieldList();
            query.dataSourceNo(dataSourceNo).sortClear();
        }

        custTransDs.addSortField(fieldNum(CustTrans, RecId));
        custTransDs.addSelectionField(fieldNum(CustTrans, RecId));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>