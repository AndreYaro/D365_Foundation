<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalAccEntryVwMod_MulDoc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Model for multidocument set (if line linst containe lines of multiple documents)
/// </summary>
class SubledgerJournalAccEntryVwMod_MulDoc_RU extends SubledgerJournalAccountEntryViewModel
{
    Map sourceDocuments;
    AccountingTmpEvent detailedAccountingTmpEvent;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>appendTmpSubledger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends _from to _to
    /// </summary>
    /// <param name="_from">appended tmp table</param>
    /// <param name="_to">destination</param>
    /// <param name="_bondMapping">stores mapping of bonding of from</param>
    /// <param name="_header">stores id of source document to distinguish mapping of bond ids</param>
    protected void appendTmpSubledger(SubledgerJournalAccountEntryTmpSummary _from, SubledgerJournalAccountEntryTmpSummary _to, LedgerBondIDMapping_RU  _bondMapping=null, RecID _header=0)
    {
        int sign;
        while select _from
        {
            _to.data(_from);
            if (_bondMapping && _from.BondBatchTrans_RU)
            {
                _to.BondBatchTrans_RU = _bondMapping.getID([_header, _from.BondBatchTrans_RU]);
            }
            sign = (_to.DebitCredit == DebitCredit::Debit) ? 1 : -1;
            // fixing \Data Dictionary\Tables\SubledgerJournalAccountEntryTmpDetail\Methods\initFromSubledgerJournalAccEntry
            if (_to.IsCorrection   && (sign * _to.TransactionCurrencyAmount > 0 ||
                                       sign * _to.AccountingCurrencyAmount  > 0 ||
                                       sign * _to.ReportingCurrencyAmount   > 0))
            {
                _to.TransactionCurrencyAmount  = -_to.TransactionCurrencyAmount;
                _to.AccountingCurrencyAmount   = -_to.AccountingCurrencyAmount;
                _to.ReportingCurrencyAmount    = -_to.ReportingCurrencyAmount;
            }
            _to.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copiedSubledgerJournalAccEntrySummary_RU</Name>
				<Source><![CDATA[
        protected void copiedSubledgerJournalAccEntrySummary_RU(SubledgerJournalAccountEntryTmpSummary _from, SubledgerJournalAccountEntryTmpSummary _to)
    {
        super(_from, _to);
        _to.IsCorrection = _from.IsCorrection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActiveAccountingTmpEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Creates accounting event.
    /// </summary>
    /// <param name="_accountingTmpEvent">
    ///  A table buffer that contains the <c>AccountingTmpEvent</c> record.
    /// </param>
    protected void createActiveAccountingTmpEvent(AccountingTmpEvent _accountingTmpEvent)
    {
        activeAccountingTmpEvent.State = _accountingTmpEvent.State;
        super(_accountingTmpEvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>groupAccountingEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Groups accountingTmpEvent  by all except recid, originals are stored in detailedAccountingTmpEvent
    /// </summary>
    protected void groupAccountingEvents()
    {
        delete_from detailedAccountingTmpEvent;
        while select accountingTmpEvent
        {
            detailedAccountingTmpEvent.data(accountingTmpEvent);
            detailedAccountingTmpEvent.insert();
        }

        delete_from accountingTmpEvent;

        while select detailedAccountingTmpEvent
            group by Type,
                     AccountingDate,
                     State,
                     CreationUser,
                     EventDateTime
        {
            accountingTmpEvent.data(detailedAccountingTmpEvent);
            accountingTmpEvent.AccountingEventRecId = 0;
            accountingTmpEvent.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAccountingEventsForLines</Name>
				<Source><![CDATA[
        protected void populateAccountingEventsForLines()
    {
        Enumerator i = this.sourceDocuments().valueSet().getEnumerator();
        while (i.moveNext())
        {
            activeSourceDocument = i.current();
            super();
        }
        this.groupAccountingEvents();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSummarizedJournalAccountEntries</Name>
				<Source><![CDATA[
        protected void populateSummarizedJournalAccountEntries(boolean _skipRefresh_RU = false)
    {
        SubledgerJournalAccountEntryTmpSummary  mergedSubledgers;
        LedgerBondIDMapping_RU                  bondMappping = new LedgerBondIDMapping_RU(Types::Container);
        // save an active accounting event
        AccountingTmpEvent groupedActiveEvent = activeAccountingTmpEvent;
        void superForDocument(SourceDocument _doc)
        {
            activeSourceDocument = _doc;
            super(true);
            this.appendTmpSubledger(subledgerJournalAccEntrySummaryBuffer, mergedSubledgers, bondMappping, activeSourceDocument.parmSourceDocumentHeader().RecId);
        }
        void superForAllDocuments()
        {
            Enumerator i = this.sourceDocuments().valueSet().getEnumerator();
            while (i.moveNext())
            {
                superForDocument(i.current());
            }
        }

        // for each detailed accounting event related to saved:
        select firstOnly detailedAccountingTmpEvent
            where detailedAccountingTmpEvent.Type           == groupedActiveEvent.Type              &&
                  detailedAccountingTmpEvent.AccountingDate == groupedActiveEvent.AccountingDate    &&
                  detailedAccountingTmpEvent.CreationUser   == groupedActiveEvent.CreationUser      &&
                  detailedAccountingTmpEvent.EventDateTime  == groupedActiveEvent.EventDateTime     &&
                  detailedAccountingTmpEvent.State          == groupedActiveEvent.State             &&
                  ! detailedAccountingTmpEvent.AccountingEventRecId;

        if (detailedAccountingTmpEvent.recID)
        {
            activeAccountingTmpEvent.data(detailedAccountingTmpEvent);
            superForAllDocuments();
        }

        while select detailedAccountingTmpEvent
            where detailedAccountingTmpEvent.Type           == groupedActiveEvent.Type              &&
                  detailedAccountingTmpEvent.AccountingDate == groupedActiveEvent.AccountingDate    &&
                  detailedAccountingTmpEvent.CreationUser   == groupedActiveEvent.CreationUser      &&
                  detailedAccountingTmpEvent.EventDateTime  == groupedActiveEvent.EventDateTime     &&
                  detailedAccountingTmpEvent.State          == groupedActiveEvent.State             &&
                  detailedAccountingTmpEvent.AccountingEventRecId
        {
            activeAccountingTmpEvent.data(detailedAccountingTmpEvent);
            superForDocument(this.sourceDocuments().lookup(AccountingEvent::find(detailedAccountingTmpEvent.AccountingEventRecId).SourceDocumentHeader));
        }

        delete_from subledgerJournalAccEntrySummaryBuffer;
        this.appendTmpSubledger(mergedSubledgers, subledgerJournalAccEntrySummaryBuffer);
        // restore saved values
        activeAccountingTmpEvent = groupedActiveEvent;

        if (! _skipRefresh_RU)
        {
            subledgerJournalAccEntrytmpSummaryDataSource.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocuments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of all source documents
    /// </summary>
    /// <returns>List of <c>SourceDocument</c></returns>
    protected Map sourceDocuments()
    {
        SourceDocumentLineListEnumerator    i;
        RecId                               header;
        if (! sourceDocuments)
        {
            sourceDocuments = new Map(typeName2Type(extendedTypeStr(RecID)), Types::Class);
            i = sourceDocumentLineList.getEnumerator();
            while (i.moveNext())
            {
                header = i.current().SourceDocumentHeader;
                if (! sourceDocuments.exists(header))
                {
                    sourceDocuments.insert(header, SourceDocument::newFromSourceDocumentHeader(SourceDocumentHeader::find(header)));
                }
            }
        }
        return sourceDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        static SubledgerJournalAccEntryVwMod_MulDoc_RU construct()
    {
        return new SubledgerJournalAccEntryVwMod_MulDoc_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does _vew shpuld be handle by multiheader model
    /// </summary>
    /// <param name="_view">view</param>
    /// <returns>true if _view is attached to multiheader document</returns>
    static public boolean isApplicable(SubledgerJournalAccountEntryFormView _view)
    {
        #isoCountryRegionCodes
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) &&
               _view                                                        &&
               _view.parmSubledgerFormRun()                                 &&
               _view.parmSubledgerFormRun().args()                          &&
               SubledgerJournalAccEntryVwMod_MulDoc_RU::isMultiHeader(_view.parmSubledgerFormRun().args().parmObject());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMultiHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is has multiple headers
    /// </summary>
    /// <param name="_list">List of lines</param>
    /// <returns>true if lines have different headers</returns>
    static boolean isMultiHeader(SourceDocumentLineList _list)
    {
        SourceDocumentLineListEnumerator    i;
        recId                               header;
        if (_list)
        {
            i = _list.getEnumerator();
            if (i.moveNext())
            {
                header = i.current().SourceDocumentHeader;
                while (i.moveNext())
                {
                    if (i.current().SourceDocumentHeader != header)
                    {
                        return true;
                    }
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newByView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of <c>SubledgerJournalAccountEntryViewModel</c> class.
    /// </summary>
    /// <param name="_view">
    /// The instance of <c>SubledgerJournalAccountEntryFormView</c> class.
    /// </param>
    /// <returns>
    /// The instance of <c>SubledgerJournalAccountEntryViewModel</c> class.
    /// </returns>
    public static SubledgerJournalAccEntryVwMod_MulDoc_RU newByView(SubledgerJournalAccountEntryFormView _view)
    {
        SubledgerJournalAccEntryVwMod_MulDoc_RU ret;

        Debug::assert(_view != null);

        ret = SubledgerJournalAccEntryVwMod_MulDoc_RU::construct();
        ret.parmSubledgerJournalAccountEntryFormView(_view);

        ret.initialize();

        Debug::assert(ret != null);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newIfApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of class if it is applicable for _view
    /// </summary>
    /// <param name="_view">instance of <c>_view</c></param>
    /// <returns>instance of class if is applicable or null if not</returns>
    public static SubledgerJournalAccEntryVwMod_MulDoc_RU newIfApplicable(SubledgerJournalAccountEntryFormView  _view)
    {
        return SubledgerJournalAccEntryVwMod_MulDoc_RU::isApplicable(_view) ? SubledgerJournalAccEntryVwMod_MulDoc_RU::newByView(_view) : null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>