<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankBillOfExchangeController_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>BankBillOfExchangeController_ES</c> class is the controller class for the <c>BankBillOfExchange_ES</c> report.
/// </summary>
public class BankBillOfExchangeController_ES extends SrsReportRunController implements BatchRetryable
{
    TmpBankBillOfExchangePrintout tmpBankBillOfExchangePrintout;
    TmpBankBillOfExchangePrintout tmpNote;
    BankBillOfExchangeTmp_ES bankBillOfExchangeTmp;
    TransDate noteDate;
    Bitmap singnature1Bitmap, singnature2Bitmap;
    tempstr amountTxt, curTxt;

    int currentSessionId;
    str dayNoteDate, monthNoteDate, yearNoteDate, pattern;
    const Timezone GMT = Timezone::GMT_DUBLIN_EDINBURGH_LISBON_LONDON;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceES00014, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Override this method to change report contract before you run the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        CustBillOfExchangeDocument_ES billOfExchange = this.parmArgs().caller();
        tmpNote = billOfExchange.tmpBankBillOfExchangePrintout();
        BankBillOfExchangeLayout bankBillOfExchangeLayout = tmpNote.bankBillOfExchangeLayout();
        this.processReport(bankBillOfExchangeLayout, tmpNote);

        Query reportQuery = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        SRSReportHelper::addParameterValueRangeToQuery(reportQuery,
                                                        tableNum(BankBillOfExchangeTmp_ES),
                                                        fieldNum(BankBillOfExchangeTmp_ES, RecId),
                                                        int642Str(bankBillOfExchangeTmp.RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Builds the query object.
    /// </summary>
    /// <param name="_bankBillOfExchangeLayout">
    ///     The <c>BankBillOfExchangeLayout</c> table.
    /// </param>
    /// <param name="_tmpNote">
    ///     The <c>TmpBankBillOfExchangePrintout</c> table.
    /// </param>
    /// <remarks>
    ///     The <paramref name="_tmpNote" /> parameter is populated in the collar of the report to fill in the
    /// <c>TmpBankBillOfExchangePrintout</c> table.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void processReport(BankBillOfExchangeLayout _bankBillOfExchangeLayout,
                                TmpBankBillOfExchangePrintout _tmpNote)
    {
        Query locQuery = new Query(querystr(BankBillOfExchange_ES));

        currentSessionId = new xSession().sessionId();

        noteDate = _tmpNote.TransDate;

        // We are using the NumeralsToTxt Global method and remove all the
        // unwanted texts like ***, /100 kind of stuff using strDel.
        dayNoteDate = strdel( strdel(numeralsToTxt(dayofmth(noteDate)), 1, 3),
                                strlen(strdel(numeralsToTxt(dayofmth(noteDate)), 1, 3)), -10);

        monthNoteDate = mthname(mthofyr(noteDate));
        yearNoteDate = date2str(noteDate, 123, 0, 0, 0, 0, 2, DateFlags::FormatAll);
        amountTxt = _tmpNote.Numerals2Letter;
        curTxt = _tmpNote.CurrencyTxt;

        if (_bankBillOfExchangeLayout.Signature1)
        {
            singnature1Bitmap = _bankBillOfExchangeLayout.Signature1Bmp;
        }

        if (_bankBillOfExchangeLayout.Signature2)
        {
            singnature2Bitmap = _bankBillOfExchangeLayout.Signature2Bmp;
        }

        this.identifyPattern(_tmpNote);

        BankAccountTable bankAccountTable = BankAccountTable::find(_tmpNote.AccountId);
        bankBillOfExchangeTmp.AccountNum = _tmpNote.AccountNum;
        bankBillOfExchangeTmp.BankName = _tmpNote.BankName;
        bankBillOfExchangeTmp.NoteNum = _tmpNote.NoteNum;
        bankBillOfExchangeTmp.AmountTxt = _tmpNote.AmountTxt;
        bankBillOfExchangeTmp.AmountPlusCur = amountTxt;
        bankBillOfExchangeTmp.RecipientName = _tmpNote.RecipientName;
        bankBillOfExchangeTmp.DayName = dayNoteDate;
        bankBillOfExchangeTmp.MonthName = monthNoteDate;
        bankBillOfExchangeTmp.Year = yearNoteDate;
        bankBillOfExchangeTmp.CompanyCity = LogisticsAddressCounty::find(bankAccountTable.postalAddress().CountryRegionId,
                                                                            bankAccountTable.postalAddress().State,
                                                                            bankAccountTable.postalAddress().County).Name;

        if (_tmpNote.BankName)
        {
            bankBillOfExchangeTmp.Address = BankAccountTable::find(_tmpNote.AccountId).postalAddress().Address;
        }
        else
        {
            bankBillOfExchangeTmp.Address = '';
        }

        bankBillOfExchangeTmp.SlipTxt = _tmpNote.SlipTxt;
        bankBillOfExchangeTmp.NumOfSlips = _tmpNote.NumOfSlips;
        bankBillOfExchangeTmp.SessionID = currentSessionId;
        bankBillOfExchangeTmp.DateOfCreation = DateTimeUtil::getToday(GMT);
        bankBillOfExchangeTmp.Pattern = pattern;
        bankBillOfExchangeTmp.Signature1Bmp = singnature1Bitmap;
        bankBillOfExchangeTmp.Signature2Bmp = singnature2Bitmap;
        bankBillOfExchangeTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPatternA</Name>
				<Source><![CDATA[
    private void applyPatternA(TmpBankBillOfExchangePrintout _tmpNote)
    {
        pattern = 'A';
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPatternAB</Name>
				<Source><![CDATA[
    private void applyPatternAB(TmpBankBillOfExchangePrintout _tmpNote)
    {
        if (_tmpNote.NumOfSlips > 0 && _tmpNote.NoteTop < _tmpNote.SlipTop1 && _tmpNote.NumOfSlips <= 1)
        {
            pattern = 'AB';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPatternABB</Name>
				<Source><![CDATA[
    private void applyPatternABB(TmpBankBillOfExchangePrintout _tmpNote)
    {
        if (_tmpNote.NumOfSlips > 0 && _tmpNote.NoteTop < _tmpNote.SlipTop1 && _tmpNote.NumOfSlips > 1)
        {
            pattern = 'ABB';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPatternBAB</Name>
				<Source><![CDATA[
    private void applyPatternBAB(TmpBankBillOfExchangePrintout _tmpNote)
    {
        if (_tmpNote.NumOfSlips > 0 && _tmpNote.NoteTop >= _tmpNote.SlipTop1 && _tmpNote.NumOfSlips > 1
                && _tmpNote.NoteTop < _tmpNote.SlipTop2)
        {
            pattern = 'BAB';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyPatternBBA</Name>
				<Source><![CDATA[
    private void applyPatternBBA(TmpBankBillOfExchangePrintout _tmpNote)
    {
        if (_tmpNote.NumOfSlips > 0 && _tmpNote.NoteTop >= _tmpNote.SlipTop1 && _tmpNote.NumOfSlips > 1
            && _tmpNote.NoteTop >= _tmpNote.SlipTop2)
        {
            pattern = 'BBA';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>identifyPattern</Name>
				<Source><![CDATA[
    private void identifyPattern(TmpBankBillOfExchangePrintout _tmpNote)
    {
        this.applyPatternAB(_tmpNote);

        if (pattern == '')
        {
            this.applyPatternABB(_tmpNote);
        }
        if (pattern == '')
        {
            this.applyPatternBAB(_tmpNote);
        }
        if (pattern == '')
        {
            this.applyPatternBBA(_tmpNote);
        }
        if (pattern == '')
        {
            this.applyPatternA(_tmpNote);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController controller = new BankBillOfExchangeController_ES();
        controller.parmReportName(ssrsreportstr(BankBillOfExchange_ES, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>