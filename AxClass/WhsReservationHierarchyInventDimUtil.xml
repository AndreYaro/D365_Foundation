<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReservationHierarchyInventDimUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsReservationHierarchyInventDimUtil</c> class contains the utility methods for reservation hierarchy dimensions.
/// </summary>
class WhsReservationHierarchyInventDimUtil
{
    #WHSReservationHierarchy

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>inventDimSetupNoAllowBlank</Name>
				<Source><![CDATA[
    private static boolean inventDimSetupNoAllowBlank(InventDimGroupFieldSetup _inventDimGroupFieldSetup)
    {
        return (_inventDimGroupFieldSetup.isActive() && (!_inventDimGroupFieldSetup.isAllowBlankIssueEnabled() || !_inventDimGroupFieldSetup.isAllowBlankReceiptEnabled()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimRemoveNotAllowedBlanks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Remove not allowed blanks in the specified inventory dimensions.
    /// </summary>
    /// <param name="_inventTable">
    /// The item that defines the reservation hierarchy.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension values.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    ///  An <c>InventDimGroupSetup</c> instance that will be used to determine if dimensions are allowed as blank issue or blank receipt.
    /// </param>
    /// <returns>
    /// InventDim where all not allowed blanks are removed.
    /// </returns>
    public static InventDim inventDimRemoveNotAllowedBlanks(
        InventTable         _inventTable,
        InventDim           _inventDim,
        InventDimGroupSetup _inventDimGroupSetup)
    {
        List                                hierarchyList;
        ListEnumerator                      le;
        WHSReservationHierarchyElementData  elementData;
        FieldId                             dimFieldId;
        InventDimGroupFieldSetup            inventDimGroupFieldSetup;
        WHSReservationHierarchyLevel        level;
        InventDim                           inventDim;

        hierarchyList = WHSReservationHierarchyProvider::construct()
                            .getDimListAllFromInventTable(_inventTable, WHSReservationHierarchySortOrder::TopDown);
        le = hierarchyList.getEnumerator();
        inventDim.data(_inventDim);

        while (le.moveNext())
        {
            elementData = le.current();
            dimFieldId = elementData.parmDimensionFieldId();
            if (!level && !inventDim.(dimFieldId))
            {
                inventDimGroupFieldSetup = _inventDimGroupSetup.getFieldSetup(elementData.parmDimensionFieldId());
                //find first level where we do not allow blank
                if (inventDimGroupFieldSetup.isActive()
                && (!inventDimGroupFieldSetup.isAllowBlankIssueEnabled()
                || !inventDimGroupFieldSetup.isAllowBlankReceiptEnabled()))
                {
                    level = elementData.parmLevel();
                }
            }
            else if (level)
            {
                inventDim.clearField(dimFieldId);
            }
        }

        inventDim = inventDim::findOrCreate(inventDim);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDimDiffOnIssuesNonBlankDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if dimensions are different between issue and receipt dimensions for whs item.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record.
    /// </param>
    /// <param name="_issueInventDim">
    /// The issue <c>InventDim</c> records.
    /// </param>
    /// <param name="_receiptInventDim">
    /// The receipt <c>InventDim</c> record.
    /// </param>
    /// <returns>
    /// Return true if inventory dimensions are changing from issue to receipt on the dimensions that are assigned on the issue dimension;
    /// otherwise, false.
    /// </returns>
    public static boolean isDimDiffOnIssuesNonBlankDimensions(
        InventTable         _inventTable,
        InventDim           _issueInventDim,
        InventDim           _receiptInventDim)
    {
        //Special check if dimension are changed for WHS due to the reservation hierarchy.
        List hierarchyList = WHSReservationHierarchyProvider::construct()
                                .getDimListAllFromInventTable(_inventTable, WHSReservationHierarchySortOrder::BottomUp);
        ListEnumerator le = hierarchyList.getEnumerator();
        boolean dimDiffOnIssuesNonBlankDimensions = false;

        while (le.moveNext())
        {
            WHSReservationHierarchyElementData hierarchyElementData = le.current();
            FieldId dimFieldId = hierarchyElementData.parmDimensionFieldId();
            if (_issueInventDim.(dimFieldId)
                && _issueInventDim.(dimFieldId) != _receiptInventDim.(dimFieldId))
            {
                dimDiffOnIssuesNonBlankDimensions = true;
                break;
            }
        }
        
        return dimDiffOnIssuesNonBlankDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDimHierarchyForBlanks</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates that there are no blank dimensions in the middle of the reservation hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    ///     <c>InventTable</c> to check against.
    /// </param>
    /// <param name="_inventDim">
    ///     <c>InventDim</c> containing dimensions to check.
    /// </param>
    /// <param name="_showError">
    ///     Determines whether a warning message should be displayed when a blank dimension in the middle of the hierarchy is found.
    /// </param>
    /// <returns>
    ///     true if there are no blank dimensions; otherwise, false.
    /// </returns>
    public static boolean checkDimHierarchyForBlanks(
        InventTable _inventTable,
        InventDim   _inventDim,
        boolean     _showError = true)
    {
        List hierarchyList = WHSReservationHierarchyProvider::construct().getDimListAllFromInventTable(_inventTable, WHSReservationHierarchySortOrder::BottomUp);
        
        if (WHSTransitWarehouseDefaultLocationMustBeSpecifiedFlight::instance().isEnabled())
        {
            
            // Fields might not have been selected on the specified buffers, or might have been updated since selection
            _inventDim.checkInvalidFieldAccess(false);

            return WhsInvent::checkDimHierarchyFromInventDim(_inventDim, hierarchyList);
        }
        else
        {
            ListEnumerator le = hierarchyList.getEnumerator();
            FieldId dimSet;

            // Fields might not have been selected on the specified buffers, or might have been updated since selection
            _inventDim.checkInvalidFieldAccess(false);

            while (le.moveNext())
            {
                WHSReservationHierarchyElementData elementData = le.current();
                FieldId dimFieldId = elementData.parmDimensionFieldId();

                if (_inventDim.(dimFieldId))
                {
                    dimSet = dimFieldId;
                }
                else
                {
                    if (dimSet && !WHSReservationHierarchyInventDimUtil::isFieldAllowedBlankInMiddleOfHierarchy(dimFieldId))
                    {
                        if (dimFieldId == fieldNum(InventDim, wMSLocationId)
                        && _inventDim.inventLocation().isTransit()
                        && WHSTransitWarehouseDefaultLocationMustBeSpecifiedFlight::instance().isEnabled())
                        {
                            if (_showError)
                            {
                                warning(strFmt("@WAX:TransitWarehouseDefaultLocationMustBeSpecified", fieldId2PName(tableNum(InventDim), dimFieldId), fieldId2PName(tableNum(InventDim), dimSet)));
                            }
                            return false;
                        }
                        else
                        {
                            if (_showError)
                            {
                                warning(strFmt("@WAX439", fieldId2PName(tableNum(InventDim), dimFieldId), fieldId2PName(tableNum(InventDim), dimSet)));
                            }
                            return false;
                        }
                    }
                }
            }

            return true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deepestLevelFromInventDimParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the deepest hierarchy level that is enabled by the <c>InventDimParm</c>
    ///     for the given item.
    /// </summary>
    /// <param name="_reservationHierarchy">
    ///     Reservation hierarchy to scan.
    /// </param>
    /// <param name="_inventDimParm">
    ///     <c>InventDimParm</c> record specifying which dimensions to consider.
    /// </param>
    /// <returns>
    ///     Deepest hierarchy level enabled by the _inventDimParm parameter.
    /// </returns>
    public static WHSReservationHierarchyLevel deepestLevelFromInventDimParm(
        List            _reservationHierarchy,
        InventDimParm   _inventDimParm)
    {
        WHSReservationHierarchyLevel        ret = #ITEMHIERARCHYLEVEL;
        ListEnumerator                      le;
        WHSReservationHierarchyElementData  elementData;
        FieldId                             dimensionFieldId;

        if (_reservationHierarchy != null
            && !_reservationHierarchy.empty())
        {
            le = _reservationHierarchy.getEnumerator();
            while (le.moveNext())
            {
                elementData = le.current();
                dimensionFieldId = elementData.parmDimensionFieldId();

                if (dimensionFieldId && //dimensionFieldId is not set at #ITEMHIERARCHYLEVEL
                    _inventDimParm.(InventDim::dim2dimParm(dimensionFieldId)))
                {
                    if (elementData.parmLevel() > ret)
                    {
                        ret = elementData.parmLevel();
                    }
                    // We already reached the deepest hierarchy level
                    else
                    {
                        break;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventDimFieldLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the level of the inventDim field in the reservation hierarchy.
    /// </summary>
    /// <param name="_hierarchyList">
    /// A List containing the reservation hierarchy being searched for the matching dim field.
    /// </param>
    /// <param name="_inventDimFieldId">
    /// The inventDim field Id to be found in the reservation hierarchy.
    /// </param>
    /// <param name="_returnInvalidNegative">
    /// Determines if invalid hierarchy level should be returned as a negative number. This allows for external call to more easily user comparisons on the returned value.
    /// </param>
    /// <returns>
    /// The level in the reservation hierarchy that the inventDim field Id is found.
    /// </returns>
    /// <remarks>
    /// This method will return the invalid hierarchy level if the dim field is not found in the hierarchy.
    /// </remarks>
    public static WHSReservationHierarchyLevel getInventDimFieldLevel(
        List        _hierarchyList,
        FieldId     _inventDimFieldId,
        boolean     _returnInvalidNegative = false)
    {
        ListEnumerator                      le;
        WHSReservationHierarchyElementData  elementData;
        WHSReservationHierarchyLevel        level;
        #WHSReservationHierarchy

        // If no matching dimField is found in the hierarchy return invalid level.
        level = _returnInvalidNegative ? -#INVALIDHIERARCHYLEVEL : #INVALIDHIERARCHYLEVEL;

        le = _hierarchyList.getEnumerator();

        while (le.moveNext())
        {
            elementData = le.current();

            if (elementData.parmDimensionFieldId() == _inventDimFieldId)
            {
                level = elementData.parmLevel();
                break;
            }
        }

        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevelOfFirstBlankDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the first level of the hierarchy that is blank for the <c>InventDim</c> passed in.
    /// </summary>
    /// <param name="_itemId">
    /// The item Id which will determine the reservation hierarchy used.
    /// </param>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> that is being searched for blank dimensions.
    /// </param>
    /// <param name="_sortDirection">
    /// The direction we should traverse the reservation hierarchy.
    /// </param>
    /// <param name="_ignoreAllowedBlankDimensions">
    /// Determines if dimensions that we allow to be blank will be considered when finding the first blank dimension in the hierarchy.
    /// </param>
    /// <returns>
    /// Returns the level of the item's reservation hierarchy for the first blank dimension in the inventDim.
    /// </returns>
    /// <remarks>
    /// If no dimension in the hierarchy is blank then 0 is returned.
    /// </remarks>
    public static WHSReservationHierarchyLevel getLevelOfFirstBlankDim(
        ItemId                              _itemId,
        InventDim                           _inventDim,
        WHSReservationHierarchySortOrder    _sortDirection,
        boolean                             _ignoreAllowedBlankDimensions = true)
    {
        ListEnumerator                      le;
        WHSReservationHierarchyElementData  hierarchyElementData;
        WHSReservationHierarchyLevel        level = 0;

        le = WHSReservationHierarchyProvider::construct()
                                .getDimListAllFromInventTable(InventTable::find(_itemId), _sortDirection).getEnumerator();

        while (le.moveNext())
        {
            hierarchyElementData = le.current();

            if (!_inventDim.(hierarchyElementData.parmDimensionFieldId()))
            {
                // Skip over fields like LicensePlateId because it is a special case scenario.
                if (!_ignoreAllowedBlankDimensions
                ||  !WHSReservationHierarchyInventDimUtil::isFieldAllowedBlankInMiddleOfHierarchy(hierarchyElementData.parmDimensionFieldId()))
                {
                    level = hierarchyElementData.parmLevel();
                    break;
                }
            }
        }

        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLevelOfFirstNotAllowedBlankDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines reservation hierarchy level of the first dimension that is not allowed as blank issue or receipt when searching the list.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> that is being searched for blank dimensions.
    /// </param>
    /// <param name="_reservationHierarchyPartList">
    ///  A list of <c>WHSReservationHierarchyElementData</c> that should be used when searching the InventDim buffer.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    ///  An <c>InventDimGroupSetup</c> instance that will be used to determine if dimensions are allowed as blank issue or blank receipt.
    /// </param>
    /// <returns>
    /// The reservation hierarchy level of the first dimension that is not allowed as blank issue or receipt when searching the list.
    /// </returns>
    public static WHSReservationHierarchyLevel getLevelOfFirstNotAllowedBlankDimension(
        InventDim                           _inventDim,
        List                                _reservationHierarchyPartList,
        InventDimGroupSetup                 _inventDimGroupSetup)
    {
        ListEnumerator                      le;
        WHSReservationHierarchyElementData  whsReservationHierarchyElementData;
        FieldId                             dimFieldId;
        InventDimGroupFieldSetup            inventDimGroupFieldSetup;
        WHSReservationHierarchyLevel        level;

        le = _reservationHierarchyPartList.getEnumerator();
        level = 0;
        while (le.moveNext() && level == 0)
        {
            whsReservationHierarchyElementData = le.current();
            dimFieldId = whsReservationHierarchyElementData.parmDimensionFieldId();

            if (!_inventDim.(dimFieldId))
            {
                inventDimGroupFieldSetup = _inventDimGroupSetup.getFieldSetup(whsReservationHierarchyElementData.parmDimensionFieldId());
                //find first level where we do not allow blank
                if (WhsReservationHierarchyInventDimUtil::inventDimSetupNoAllowBlank(inventDimGroupFieldSetup))
                {
                    level = whsReservationHierarchyElementData.parmLevel();
                }
            }
        }

        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotAllowedBlankDimInHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    ///     gets a list of Dimension that are blank of the reservation hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    ///     <c>InventTable</c> to check against.
    /// </param>
    /// <param name="_inventDim">
    ///     <c>InventDim</c> containing dimensions to check.
    /// </param>
    /// <returns>
    ///     returns a list of <c>InventDim</c> field IDs that are illegally blank in the reservation hierarchy.
    ///     returns empty list if no illegal blank dimensions was found
    /// </returns>
    public static container getNotAllowedBlankDimInHierarchy(
        InventTable _inventTable,
        InventDim   _inventDim)
    {
        List                                hierarchyList;
        ListEnumerator                      le;
        WHSReservationHierarchyElementData  elementData;
        FieldId                             dimFieldId;
        FieldId                             dimSet;
        container                           fields;

        hierarchyList = WHSReservationHierarchyProvider::construct()
                            .getDimListAllFromInventTable(_inventTable, WHSReservationHierarchySortOrder::BottomUp);
        le = hierarchyList.getEnumerator();

        // Fields might not have been selected on the specified buffers, or might have been updated since selection
        _inventDim.checkInvalidFieldAccess(false);

        while (le.moveNext())
        {
            elementData = le.current();
            dimFieldId = elementData.parmDimensionFieldId();

            if (_inventDim.(dimFieldId))
            {
                dimSet = dimFieldId;
            }
            else
            {
                if (dimSet && !WHSReservationHierarchyInventDimUtil::isFieldAllowedBlankInMiddleOfHierarchy(dimFieldId))
                {
                    fields += [dimFieldId];
                }
            }
        }

        return fields ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hierarchyList2FieldIdList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Transforms a list of <c>WHSReservationHierarchyElementData</c> into a list of <c>FieldId</c>.
    /// </summary>
    /// <param name="_hierarchyList">
    ///     A list of <c>WHSReservationHierarchyElementData</c> to transform.
    /// </param>
    /// <returns>
    ///     A list of <c>FieldId</c> values.
    /// </returns>
    public static List hierarchyList2FieldIdList(List _hierarchyList)
    {
        List                                result = new List(Types::Integer);
        ListEnumerator                      le = _hierarchyList.getEnumerator();
        WHSReservationHierarchyElementData  elementData;

        while (le.moveNext())
        {
            elementData = le.current();
            result.addEnd(elementData.parmDimensionFieldId());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmAboveAndIncludingLevel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets information about which dimensions are above location in the reservation hierarchy up to a given level.
    /// </summary>
    /// <param name="_inventTable">
    ///    The item used to find the correct reservation hierarchy.
    /// </param>
    /// <param name="_level">
    ///    The last level to include.
    /// </param>
    /// <returns>
    ///     A <c>InventDimParm</c> table with the fields set to the <c>NoYes::Yes</c> enumeration value for
    ///    the dimensions above location.
    /// </returns>
    public static InventDimParm initInventDimParmAboveAndIncludingLevel(
        InventTable                     _inventTable,
        WHSReservationHierarchyLevel    _level)
    {
        InventDimParm                       inventDimParm;
        ListEnumerator                      hierarchyEnumerator;
        FieldId                             dimParmFieldId;
        WHSReservationHierarchyElementData  elementData;

        InventDimGroupSetup::newItemIdProductDimensionsOnly(_inventTable.ItemId)
            .inventDimParmActiveProductDimension(inventDimParm);

        hierarchyEnumerator = WHSReservationHierarchyProvider::construct()
                                .getDimListAllFromInventTable(_inventTable, WHSReservationHierarchySortOrder::TopDown)
                                .getEnumerator();
        elementData = WHSReservationHierarchyElementData::newFromItemLevel();

        while (hierarchyEnumerator.moveNext()
               && elementData.parmLevel() != _level)
        {
            elementData = hierarchyEnumerator.current();
            dimParmFieldId = InventDim::dim2dimParm(elementData.parmDimensionFieldId());
            inventDimParm.(dimParmFieldId) = NoYes::Yes;
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmAboveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets information about which dimensions are above location in the reservation hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    ///    The item used to find the correct reservation hierarchy.
    /// </param>
    /// <returns>
    ///     A <c>InventDimParm</c> table with the fields set to the <c>NoYes::Yes</c> enumeration value for
    ///    the dimensions above location.
    /// </returns>
    public static InventDimParm initInventDimParmAboveLocation(InventTable _inventTable)
    {
        WHSReservationHierarchyProvider reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        InventDimParm                   inventDimParmInitAboveLocation;
        List                            hierarchyElementDataList;

        hierarchyElementDataList = reservationHierarchyProvider.getDimListAboveLocationFromInventTable(
                                        _inventTable,
                                        WHSReservationHierarchySortOrder::BottomUp);

        InventDimGroupSetup::newItemIdProductDimensionsOnly(_inventTable.ItemId)
            .inventDimParmActiveProductDimension(inventDimParmInitAboveLocation);

        WHSReservationHierarchyInventDimUtil::initInventDimParmFromHierarchyList(hierarchyElementDataList,inventDimParmInitAboveLocation);

        return inventDimParmInitAboveLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmAboveStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets information about which dimensions are above inventory status in the reservation hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    ///     The item used to find the correct reservation hierarchy.
    /// </param>
    /// <returns>
    ///     A <c>InventDimParm</c> table with the fields set to the <c>NoYes::Yes</c> enumeration value for the dimensions above inventory status.
    /// </returns>
    public static InventDimParm initInventDimParmAboveStatus(InventTable _inventTable)
    {
        WHSReservationHierarchyProvider reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        InventDimParm                   inventDimParmInitAboveStatus;
        List                            hierarchyElementDataList;

        hierarchyElementDataList = reservationHierarchyProvider.getDimListStatusAndAboveFromInventTable(_inventTable, WHSReservationHierarchySortOrder::BottomUp);

        InventDimGroupSetup::newItemIdProductDimensionsOnly(_inventTable.ItemId).inventDimParmActiveProductDimension(inventDimParmInitAboveStatus);

        WHSReservationHierarchyInventDimUtil::initInventDimParmFromHierarchyList(hierarchyElementDataList, inventDimParmInitAboveStatus);

        inventDimParmInitAboveStatus.InventStatusFlag = NoYes::No;

        return inventDimParmInitAboveStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmAllDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Sets information about which dimensions are in the the reservation hierarchy on the inventDimParm buffer.
    /// </summary>
    /// <param name="_inventTable">
    /// The item used to find the correct reservation hierarchy.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventDimParm that should be initialized.
    /// </param>
    public static void initInventDimParmAllDim(
        InventTable     _inventTable,
        InventDimParm   _inventDimParm)
    {
        WHSReservationHierarchyProvider reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();

        WHSReservationHierarchyInventDimUtil::initInventDimParmFromHierarchyList(reservationHierarchyProvider.getDimListAllFromInventTable(_inventTable, WHSReservationHierarchySortOrder::BottomUp), _inventDimParm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmBatchAndAbove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets information about which dimensions are batch and above in the reservation hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    ///    The item used to find the correct reservation hierarchy.
    /// </param>
    /// <returns>
    ///     A <c>InventDimParm</c> table with the fields set to the <c>NoYes::Yes</c> enumeration value for
    ///    the dimensions above location.
    /// </returns>
    public static InventDimParm initInventDimParmBatchAndAbove(InventTable _inventTable)
    {
        WHSReservationHierarchyProvider reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        InventDimParm                   inventDimParmBatchAndAbove;
        List                            hierarchyElementDataList;

        hierarchyElementDataList = reservationHierarchyProvider.getDimListBatchAndAboveFromInventTable(
                                        _inventTable,
                                        WHSReservationHierarchySortOrder::BottomUp);

        InventDimGroupSetup::newItemIdProductDimensionsOnly(_inventTable.ItemId)
            .inventDimParmActiveProductDimension(inventDimParmBatchAndAbove);

        WHSReservationHierarchyInventDimUtil::initInventDimParmFromHierarchyList(hierarchyElementDataList,inventDimParmBatchAndAbove);

        return inventDimParmBatchAndAbove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmFromHierarchyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the fields that are included in the specified list to yes.
    /// </summary>
    /// <param name="_hierarchyList">
    /// The list of the reservation hierarchy.
    /// </param>
    /// <param name="_inventDimParm">
    /// The inventDimParm that should be initialized.
    /// </param>
    public static void initInventDimParmFromHierarchyList(
        List            _hierarchyList,
        InventDimParm   _inventDimParm)
    {
        ListEnumerator                      le;
        FieldId                             dimFieldId;
        FieldId                             dimParmFieldId;
        WHSReservationHierarchyElementData  elementData;

        le = _hierarchyList.getEnumerator();
        while (le.moveNext())
        {
            elementData = le.current();
            dimFieldId = elementData.parmDimensionFieldId();
            dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);
            _inventDimParm.(dimParmFieldId) = NoYes::Yes;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmLocationAndAbove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets information about which dimensions are location and above in the reservation hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    ///    The item used to find the correct reservation hierarchy.
    /// </param>
    /// <returns>
    ///     A <c>InventDimParm</c> table with the fields set to the <c>NoYes::Yes</c> enumeration value for
    ///    the dimensions above location.
    /// </returns>
    public static InventDimParm initInventDimParmLocationAndAbove(InventTable _inventTable)
    {
        WHSReservationHierarchyProvider reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        InventDimParm                   inventDimParmLocationAndAbove;
        List                            hierarchyElementDataList;

        hierarchyElementDataList = reservationHierarchyProvider.getDimListAboveLocationFromInventTable(
                                        _inventTable,
                                        WHSReservationHierarchySortOrder::BottomUp);

        InventDimGroupSetup::newItemIdProductDimensionsOnly(_inventTable.ItemId)
            .inventDimParmActiveProductDimension(inventDimParmLocationAndAbove);

        WHSReservationHierarchyInventDimUtil::initInventDimParmFromHierarchyList(hierarchyElementDataList,inventDimParmLocationAndAbove);

        inventDimParmLocationAndAbove.wmsLocationIdFlag = NoYes::Yes;

        return inventDimParmLocationAndAbove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmStatusAndAbove</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets information about which dimensions are at inventory status and above in the reservation hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    ///     The item used to find the correct reservation hierarchy.
    /// </param>
    /// <returns>
    ///     A <c>InventDimParm</c> table with the fields set to the <c>NoYes::Yes</c> enumeration value for the dimensions at inventory status and above.
    /// </returns>
    public static InventDimParm initInventDimParmStatusAndAbove(InventTable _inventTable)
    {
        WHSReservationHierarchyProvider reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        InventDimParm                   inventDimParmInitAboveStatus;
        List                            hierarchyElementDataList;

        hierarchyElementDataList = reservationHierarchyProvider.getDimListStatusAndAboveFromInventTable(_inventTable, WHSReservationHierarchySortOrder::BottomUp);

        InventDimGroupSetup::newItemIdProductDimensionsOnly(_inventTable.ItemId).inventDimParmActiveProductDimension(inventDimParmInitAboveStatus);

        WHSReservationHierarchyInventDimUtil::initInventDimParmFromHierarchyList(hierarchyElementDataList, inventDimParmInitAboveStatus);

        return inventDimParmInitAboveStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimParmBelowLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets information about which dimensions are below location in the reservation hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    ///    The item used to find the correct reservation hierarchy.
    /// </param>
    /// <returns>
    ///     A <c>InventDimParm</c> table with the fields set to the <c>NoYes::Yes</c> enumeration value for
    ///    the dimensions below location.
    /// </returns>
    [Hookable(false)]
    internal static InventDimParm initInventDimParmBelowLocation(InventTable _inventTable)
    {
        WHSReservationHierarchyProvider reservationHierarchyProvider = WHSReservationHierarchyProvider::construct();
        InventDimParm                   inventDimParmInitBelowLocation;
        List                            hierarchyElementDataList = reservationHierarchyProvider.getDimListBelowLocation(_inventTable, WHSReservationHierarchySortOrder::BottomUp);

        InventDimGroupSetup::newItemIdProductDimensionsOnly(_inventTable.ItemId).inventDimParmActiveProductDimension(inventDimParmInitBelowLocation);

        WHSReservationHierarchyInventDimUtil::initInventDimParmFromHierarchyList(hierarchyElementDataList, inventDimParmInitBelowLocation);

        return inventDimParmInitBelowLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimHasBlankValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the <c>InventDim</c> buffer has any blank dimensions for the dimension fields contained in the list.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> that is being searched for blank dimensions.
    /// </param>
    /// <param name="_reservationHierarchyPartList">
    /// A list with fields from a reservation hierarchy.
    /// </param>
    /// <returns>
    /// true if the <c>InventDim</c> buffer has any blank dimensions for the dimension fields contained in the list; Otherwise, false.
    /// </returns>
    public static boolean inventDimHasBlankValues(
        InventDim                           _inventDim,
        List                                _reservationHierarchyPartList)
    {
        ListEnumerator                      le;
        WHSReservationHierarchyElementData  hierarchyElementData;
        boolean                             result;

        result = false;
        le = _reservationHierarchyPartList.getEnumerator();

        while (le.moveNext())
        {
            hierarchyElementData = le.current();

            if (!_inventDim.(hierarchyElementData.parmDimensionFieldId()))
            {
                result = true;
                break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimHasGaps</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there are any gaps in the specified inventory dimensions.
    /// </summary>
    /// <param name="_inventTable">
    /// The item that defines the reservation hierarchy.
    /// </param>
    /// <param name="_inventDim">
    /// The inventory dimension values.
    /// </param>
    /// <param name="_inventDimParm">
    /// The subset of inventory dimensions that needs to be checked; optional.
    /// </param>
    /// <returns>
    /// true there are gaps; otherwise, false
    /// </returns>
    public static boolean inventDimHasGaps(
        InventTable     _inventTable,
        InventDim       _inventDim,
        InventDimParm   _inventDimParm = _inventDim.toDimParm())
    {
        List                                hierarchyList;
        ListEnumerator                      le;
        WHSReservationHierarchyElementData  elementData;
        FieldId                             dimFieldId;
        FieldId                             dimSet;
        boolean                             licensePlateBlankAboveBottomDimSet;

        hierarchyList = WHSReservationHierarchyProvider::construct()
                            .getDimListAllFromInventTable(_inventTable, WHSReservationHierarchySortOrder::BottomUp);
        le = hierarchyList.getEnumerator();

        while (le.moveNext())
        {
            elementData = le.current();
            dimFieldId = elementData.parmDimensionFieldId();

            //if we have a dimension set, e.g. for batch below and hit the licenseplate we need to consider that blank lp is not a gap if the location is not lp controlled.
            if (dimSet
                && !_inventDim.(dimFieldId)
                && dimFieldId == fieldNum(InventDim, LicensePlateId)
                && WHSReservationHierarchyInventDimUtil::isFieldAllowedBlankInMiddleOfHierarchy(dimFieldId)
                && !_inventDimParm.(InventDim::dim2dimParm(dimFieldId)))
            {
                licensePlateBlankAboveBottomDimSet = true;
            }
            else if (_inventDim.(dimFieldId) && _inventDimParm.(InventDim::dim2dimParm(dimFieldId)))
            {
                //special case when we have hit an blank licenseplate but we want to check if the locations profile actually allows us to have blank licenseplate.
                if (licensePlateBlankAboveBottomDimSet
                    && dimFieldId == fieldNum(InventDim, WMSLocationId)
                    && _inventDim.wmsLocation().whsLocationIsLPControlled())
                {
                    //blank licenseplate should be considered a gap when location is licenseplate controlled
                    return true;
                }
                
                dimSet = dimFieldId;
            }
            else if (dimSet)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimHasGapsForLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there are any gaps in the specified inventory dimensions with respect to the provided
    /// hierarchy level.
    /// </summary>
    /// <param name = "_itemId">The item id of the item that defines the reservation hierarchy.</param>
    /// <param name = "_inventDim">The inventory dimension values.</param>
    /// <param name = "_hierarchyLevel">The reservation hierarchy level.</param>
    /// <returns>true if gaps exist, false otherwise.</returns>
    [Hookable(false)]
    internal static boolean inventDimHasGapsForLevel(
        ItemId                       _itemId,
        InventDim                    _inventDim,
        WHSReservationHierarchyLevel _hierarchyLevel)
    {
        InventTable item = InventTable::find(_itemId);

        InventDimParm gapCheckDimParm = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveAndIncludingLevel(item, _hierarchyLevel);

        // first we check for gaps in the reservation hierarchy.
        FieldId emptyFieldId = _inventDim.getEmptyFieldFromInventDimParm(gapCheckDimParm, gapCheckDimParm.selectedDimFields());
        
        if (emptyFieldId)
        {
            str missingField = fieldId2Name(tableNum(InventDim), emptyFieldId);

            WHSInstrumentationLogger logger = WHSInstrumentationLogger::createLogger(classStr(WHSReservationHierarchyInventDimUtil));

            logger.logInformation(strFmt('inventDimHasGapsForLevel: missing InventDim field %1', missingField));
            logger.logRecordInformation(_inventDim);

            if (WhsReservationHierarchyInventDimUtil::fieldNeedsCallstackLog(emptyFieldId) && WHSReservationHierarchyInventDimUtilMissingDimLogToggle::instance().isEnabled())
            {
                logger.logError(strFmt('%1', WHSOperationInternalErrorType::MissingInventDim));
                logger.logCallStack();
            }
        }

        return emptyFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldNeedsCallstackLog</Name>
				<Source><![CDATA[
    private static boolean fieldNeedsCallstackLog(FieldId _fieldId)
    {
        switch (_fieldId)
        {
            case fieldNum(InventDim, InventSiteId):
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimHasNotAllowedBlankValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the <c>InventDim</c> buffer has any blank dimensions for the dimension fields contained in the list that are not allowed to be blank issue or blank receipt.
    /// </summary>
    /// <param name="_inventDim">
    /// The <c>InventDim</c> that is being searched for blank dimensions.
    /// </param>
    /// <param name="_reservationHierarchyPartList">
    /// A list with fields from a reservation hierarchy.
    /// </param>
    /// <param name="_inventDimGroupSetup">
    /// An <c>InventDimGroupSetup</c> instance.
    /// </param>
    /// <returns>
    /// true if the <c>InventDim</c> buffer has any blank dimensions for the dimension fields contained in the list that are not allowed blank; Otherwise, false.
    /// </returns>
    public static boolean inventDimHasNotAllowedBlankValues(
        InventDim                           _inventDim,
        List                                _reservationHierarchyPartList,
        InventDimGroupSetup                 _inventDimGroupSetup)
    {
        boolean foundNonAllowedBlank;

        foundNonAllowedBlank = false;

        if (WHSReservationHierarchyInventDimUtil::getLevelOfFirstNotAllowedBlankDimension(_inventDim, _reservationHierarchyPartList,_inventDimGroupSetup) != 0)
        {
            foundNonAllowedBlank = true;
        }

        return foundNonAllowedBlank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchAboveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if batch ID is above warehouse location ID in the reservation hierarchy of the item.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record used to determine the hierarchy.
    /// </param>
    /// <returns>
    /// true if batch is above location in the reservation hierarchy; otherwise, false.
    /// </returns>
    public static boolean isBatchAboveLocation(InventTable _inventTable)
    {
        return WHSReservationHierarchyInventDimUtil::isFieldIdAboveLocation(_inventTable,fieldNum(InventDim,InventBatchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchAboveOwner</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if batch ID is above owner ID in the reservation hierarchy of the item.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> record used to determine the hierarchy.
    /// </param>
    /// <returns>
    /// true if batch is above owner in the reservation hierarchy; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method will return false if the batch ID or owner ID are not found in the reservation hierarchy.
    /// </remarks>
    public static boolean isBatchAboveOwner(InventTable _inventTable)
    {
        return WHSReservationHierarchyCache::construct().isFieldAbove(_inventTable.whsReservationHierarchy(), fieldNum(InventDim,InventBatchId), fieldNum(InventDim, InventOwnerId_RU));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchBelowLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if inventBatchId is below wmsLocationId in the reservation hierarchy of the item.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <returns>
    ///    true if batch is below location in the reservation hierarchy; otherwise, false.
    /// </returns>
    public static boolean isBatchBelowLocation(InventTable _inventTable)
    {
        return WHSReservationHierarchyInventDimUtil::isFieldIdBelowLocation(_inventTable,fieldNum(InventDim,InventBatchId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldAllowedBlankInMiddleOfHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an <c>InventDim</c> field is allow to be blank in the middle of the hierarchy or not.
    /// </summary>
    /// <param name="_dimFieldId">
    /// The dimension field to be evaluated.
    /// </param>
    /// <returns>
    /// returns true if the field is allowed to be blank in the middle of the hierarchy; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Currently LicensePlateId is the only field we allow to be blank in the middle of the hierarchy. There is unique logic that must be upheld to allow this exception.
    /// </remarks>
    public static boolean isFieldAllowedBlankInMiddleOfHierarchy(FieldId _dimFieldId)
    {
        #InventDimDevelop
        boolean     ret;

        switch (_dimFieldId)
        {
            // License plate is allowed to be blank in the middle of the hierarchy but only for non-LP tracked locations.
            // Checks around this are in WHSInvent.checkLocationAndLP
            case fieldNum(InventDim, LicensePlateId):
                ret = true;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdAboveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given inventory dimension field is above wmsLocationId in the reservation hierarchy of the item.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_inventDimFieldId">
    ///    The field ID of the inventory dimension to check.
    /// </param>
    /// <returns>
    ///    true if the field is above location in the reservation hierarchy; otherwise, false.
    /// </returns>
    public static boolean isFieldIdAboveLocation(
        InventTable _inventTable,
        FieldId     _inventDimFieldId)
    {
        return WHSReservationHierarchyCache::construct().isFieldIdAboveLocation(_inventTable.whsReservationHierarchy(), _inventDimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdAboveLocationFromResHierRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a given inventory dimension field is above wmsLocationId in the reservation hierarchy of the item.
    /// </summary>
    /// <param name="_reservationHierarchyRecId">
    /// The <c>WHSReservationHierarchy</c> ID .
    /// </param>
    /// <param name="_inventDimFieldId">
    /// The field ID of the inventory dimension to check.
    /// </param>
    /// <returns>
    /// true if the field is above location in the reservation hierarchy; otherwise, false.
    /// </returns>
    internal static boolean isFieldIdAboveLocationFromResHierRecId(WHSReservationHierarchyRecId _reservationHierarchyRecId, FieldId _inventDimFieldId)
    {
        return WHSReservationHierarchyCache::construct().isFieldIdAboveLocation(_reservationHierarchyRecId, _inventDimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldIdBelowLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if a given inventory dimension field is below wmsLocationId in the reservation hierarchy of the item.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <param name="_inventDimFieldId">
    ///    The field ID of the inventory dimension to check.
    /// </param>
    /// <returns>
    ///    true if the field is below location in the reservation hierarchy; otherwise, false.
    /// </returns>
    public static boolean isFieldIdBelowLocation(
        InventTable _inventTable,
        FieldId     _inventDimFieldId)
    {
        return WHSReservationHierarchyCache::construct().isFieldIdBelowLocation(_inventTable.whsReservationHierarchy(), _inventDimFieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLocationOrBelowSpecified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventDim has any values specified location or below in the reservation hierarchy.
    /// </summary>
    /// <param name="_inventTable">
    /// The <c>InventTable</c> that is used to determine the reservation hierarchy.
    /// </param>
    /// <param name="_inventDim">
    /// The inventDim being evaluated.
    /// </param>
    /// <returns>
    /// true if the inventDim has values for dimensions location or below in the hierarchy; otherwise, false.
    /// </returns>
    public static boolean isLocationOrBelowSpecified(
        InventTable _inventTable,
        InventDim   _inventDim)
    {
        WHSReservationHierarchyElementData  elementData;
        List                                hierarchy;
        ListEnumerator                      le;
        boolean                             ret = false;

        hierarchy = WHSReservationHierarchyProvider::construct().getDimListLocationAndDownFromInventTable(_inventTable, WHSReservationHierarchySortOrder::TopDown);

        le = hierarchy.getEnumerator();

        while (!ret && le.moveNext())
        {
            elementData = le.current();

            // If we have a value in a dimension location or below we return true
            ret = _inventDim.(elementData.parmDimensionFieldId()) != '';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialAboveLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if inventSerialId is above wmsLocationId in the reservation hierarchy of the item.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <returns>
    ///    true if serial is above location in the reservation hierarchy; otherwise, false.
    /// </returns>
    public static boolean isSerialAboveLocation(InventTable _inventTable)
    {
        return WHSReservationHierarchyInventDimUtil::isFieldIdAboveLocation(_inventTable,fieldNum(InventDim,InventSerialId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSerialBelowLocation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if inventSerialId is below wmsLocationId in the reservation hierarchy of the item.
    /// </summary>
    /// <param name="_inventTable">
    ///    The <c>InventTable</c> used to determine the hierarchy.
    /// </param>
    /// <returns>
    ///    true if serial is below location in the reservation hierarchy; otherwise, false.
    /// </returns>
    public static boolean isSerialBelowLocation(InventTable _inventTable)
    {
        return WHSReservationHierarchyInventDimUtil::isFieldIdBelowLocation(_inventTable,fieldNum(InventDim,InventSerialId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>anyTrackingDimensionsAboveLocation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean anyTrackingDimensionsAboveLocation(InventTable _inventTable)
    {
        return WHSReservationHierarchyCache::construct().anyTrackingDimensionsAboveLocation(_inventTable.whsReservationHierarchy());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>