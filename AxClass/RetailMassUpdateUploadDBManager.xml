<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailMassUpdateUploadDBManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///  The <c>RetailMassUpdateUploadDBManager</c> class is used to traverse all the fast tab pages on
///  Released product form and stores the information for all the controls.
/// </summary>
class RetailMassUpdateUploadDBManager
{
    RetailMassUpdateProductFastTab  productFastTab;
    AOTTableFieldList   fieldList;

    TreeNode            tableNode;
    DictField           originField;
    str                 dataSourceName;
    str                 labelName;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertIntoProductProperty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the record into <c>RetailMassUpdateProductProperty</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The form control field name of Released product form.
    /// </param>
    /// <param name="_productTableId">
    /// The table id with which field is associated on the released product form.
    /// </param>
    /// <param name="_controlName">
    /// A string value which is used to add new column into <c>RetailMassUpdateWorkSheetLine</c> table.
    /// </param>
    private void insertIntoProductProperty(FieldName _fieldName, TableId _productTableId, str _controlName)
    {
        RetailMassUpdateProductProperty productProperty = this.setModuleInventPurchSales(_fieldName, _productTableId, _controlName);

        productProperty.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setModuleInventPurchSales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ModuleInventPurchSales field of <c>RetailMassUpdateProductProperty</c> table.
    /// </summary>
    /// <param name="_fieldName">
    /// The form control field name of Released product form.
    /// </param>
    /// <param name="_productTableId">
    /// The table id with which field is associated on the released product form.
    /// </param>
    /// <param name="_controlName">
    /// A string value which is used to add new column into <c>RetailMassUpdateWorkSheetLine</c> table.
    /// </param>
    /// <returns>
    /// The initialized <c>RetailMassUpdateProductProperty</c> table buffer.
    /// </returns>
    protected RetailMassUpdateProductProperty setModuleInventPurchSales(FieldName _fieldName, TableId _productTableId, str _controlName)
    {
        RetailMassUpdateProductProperty retailMassUpdateProductProperty;

        retailMassUpdateProductProperty.FastTabRecId        = productFastTab.RecId;
        retailMassUpdateProductProperty.DestinationFieldNum = fieldName2id(_productTableId, _fieldName);
        retailMassUpdateProductProperty.DestinationTableNum = _productTableId;
        retailMassUpdateProductProperty.PropertyDescription = labelName;
        retailMassUpdateProductProperty.SourceFieldNum      = fieldName2id(tableNum(RetailMassUpdateWorksheetLine), _controlName);

        if (dataSourceName == 'Sales')
        {
            retailMassUpdateProductProperty.ModuleInventPurchSales = RetailModuleInventPurchSales::Sales;
        }
        else if (dataSourceName == 'Purch')
        {
            retailMassUpdateProductProperty.ModuleInventPurchSales = RetailModuleInventPurchSales::Purch;
        }
        else if (dataSourceName == 'Invent')
        {
            retailMassUpdateProductProperty.ModuleInventPurchSales = RetailModuleInventPurchSales::Invent;
        }
        else
        {
            retailMassUpdateProductProperty.ModuleInventPurchSales = RetailModuleInventPurchSales::None;
        }

        return retailMassUpdateProductProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterateFastTabPage</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Inserts all the fast tab names into <c>RetailMassUpdateProductFastTab</c>.
    /// </summary>
    public void iterateFastTabPage()
    {
        #define.FormTabsEcoResProductDetailsExtendedPath("\\Forms\\EcoResProductDetailsExtended\\Designs\\Design\\[Tab:Tab]\\[TabPage:Details]\\[Group:GroupDetails]\\[Tab:TabHeader]")

        TreeNode                mainControl;
        TreeNode                control;
        int                     i;
        RetailMassUpdateProductProperty retailMassUpdateProductProperty;
        RetailMassUpdateProductFastTab  retailMassUpdateProductFastTab;

        str tabName;

        mainControl =  TreeNode::findNode(#FormTabsEcoResProductDetailsExtendedPath);

        delete_from retailMassUpdateProductProperty;
        delete_from retailMassUpdateProductFastTab;

        control = mainControl.AOTfirstChild();

        for (i=1; i<=mainControl.AOTchildNodeCount(); i++)
        {
            // Exclude the financial dimension tab too from the fast tab view.
            if (control.AOTgetProperty('Name') == 'TabFinancialDimensions')
            {
                control = control.AOTnextSibling();
                continue;
            }

            tabName = SysLabel::labelId2String(control.AOTgetProperty('Caption'));

            productFastTab = RetailMassUpdateProductFastTab::find(tabName);

            if (!productFastTab)
            {
                productFastTab.clear();
                productFastTab.Name = tabName;
                productFastTab.insert();
            }

            this.iterateFastTabPageControl(control);

            control = control.AOTnextSibling();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterateFastTabPageControl</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Traverse on the form control group, tab control and tab page control.
    /// </summary>
    /// <param name="root">
    ///  An AOT Treenode Root to traverse on particular tab.
    /// </param>
    private void iterateFastTabPageControl(TreeNode root)
    {
        TreeNode control;
        TreeNodeTraverser traverser = new TreeNodeTraverser(root);

        FieldName             fieldName;
        TableId               productTableId;
        int                   i, controlCount;
        SysDictField          dicField;
        str                   columnName;

        while (traverser.next())
        {
            control = traverser.currentNode();

            //re-set fieldName and productTableId for next control.
            fieldName = '';
            productTableId = 0;
            dataSourceName = '';
            labelName = '';
            // add column into RetailMassUpdateWorkSheetLine table.

            switch (control.AOTgetProperty('Type'))
            {
                case 'String':
                case 'Integer':
                case 'Int64':
                case 'Real':
                case 'Date':
                case 'Time':
                case 'Date Time':
                case 'Input':

                    fieldName = control.AOTgetProperty('DataField');

                    if (fieldName)
                    {
                        dataSourceName = control.AOTgetProperty('DataSource');
                        productTableId = tableName2Id(this.DataSource2Table(control.AOTgetProperty('DataSource')));
                    }
                    break;

                case 'CheckBox':
                case 'ComboBox':

                    if (control.AOTgetProperty('DataField'))
                    {
                        productTableId = tableName2Id(this.DataSource2Table(control.AOTgetProperty('DataSource')));
                        dataSourceName = control.AOTgetProperty('DataSource');
                        fieldName = control.AOTgetProperty('DataField');
                    }
                    break;

                case 'ReferenceGroup':
                    productTableId = tableName2Id(this.DataSource2Table(control.AOTgetProperty('DataSource')));
                    dataSourceName = control.AOTgetProperty('DataSource');
                    fieldName = control.AOTgetProperty('ReferenceField');
                    break;

                default:
                    break;
            }

            // replace the data source 'RetailInventTable' with 'RetailInvent' to
            // handle long field name property.
            if (dataSourceName == 'RetailInventTable')
            {
                dataSourceName  = 'RetailInvent';
            }

            // Extract TableName from DataSource
            dataSourceName = subStr(dataSourceName,0, strFind(dataSourceName, '_',0,strLen(dataSourceName)) == 0 ?
                                    strLen(dataSourceName) :
                                    strFind(dataSourceName, '_', 0,strLen(dataSourceName)) - 1);

            // building column name with form's control DS name and field name.

            if ( productTableId > 0 && fieldName != '')
            {
                columnName = strFmt(dataSourceName + '_' + fieldId2name(productTableId, fieldName2id(productTableId, fieldName)));

                dicField = new SysDictField(productTableId, fieldName2Id(productTableId, fieldName));

                if (dicField)
                {
                    labelName = dicField.label();
                }
                else
                {
                    labelName = control.AOTname();
                }

                if ((RetailMassUpdateWorksheetLine::findFieldName(columnName)) &&
                (!RetailMassUpdateProductProperty::find(fieldName2id(productTableId, fieldName),
                                                        productTableId,
                                                        productFastTab.RecId,
                                                        fieldName2id(tableNum(RetailMassUpdateWorksheetLine), columnName))))
                {
                    this.insertIntoProductProperty(fieldName, productTableId, columnName);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>DataSource2Table</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts datasources to table names
    /// </summary>
    /// <param name = "_data"></param>
    /// <returns></returns>
    private str DataSource2Table(str _data)
    {
        str ret = _data;

        switch (_data)
        {
            case 'Invent':
            case 'Purch':
            case 'Sales':
                ret = 'InventTableModule';
                break;
            case 'EcoResProduct':
                ret = 'EcoResProductMaster';
                break;
            default:
                break;
        }

        return (ret);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>