<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCopyPeriodic</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalCopyPeriodic</c> class creates a periodic journal.
/// </summary>
public class LedgerJournalCopyPeriodic extends RunBaseBatch implements BatchRetryable
{
    LedgerJournalNameId ledgerJournalName;
    LedgerJournalId ledgerJournalId;
    LedgerJournalNameId fromLedgerJournalName;
    LedgerJournalId fromLedgerJournalId;
    TransDate endDate;
    TransDate emptyDate;

    CopyMove copyMove;

    // variables that do not need to be packed/unpacked

    DialogField dialogCopy;
    DialogField dialogEndDate;
    DialogField dialogEmptyDate;
    DialogField dialogFromJournalNum;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        ledgerJournalName,
        ledgerJournalId,
        endDate,
        emptyDate,
        copyMove,
        fromLedgerJournalName,
        fromLedgerJournalId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns false.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method must be in this class because it is called from the <c>DialogRunbase</c> class.
    /// </remarks>
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    /// Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialogEndDate = dialog.addField(extendedTypeStr(TransDate), "@SYS14656");
        dialogEmptyDate = dialog.addField(extendedTypeStr(TransDate), "@GeneralLedger:FromDateForLinesWithoutDate");
        dialogFromJournalNum = dialog.addField(extendedTypeStr(LedgerJournalIdPeriodic));
        dialogCopy = dialog.addField(enumStr(CopyMove), "@SYS24853");
        dialogFromJournalNum.registerOverrideMethod(
            methodStr(FormStringControl, lookup),
            methodStr(LedgerJournalCopyPeriodic, lookupPeriodicJournalNumber),
            this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        endDate = dialogEndDate.value();
        emptyDate = dialogEmptyDate.value();
        copyMove = dialogCopy.value();
        fromLedgerJournalId =  dialogFromJournalNum.value();
        fromLedgerJournalName = LedgerJournalTable::find(fromLedgerJournalId).JournalName;

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalName</Name>
				<Source><![CDATA[
    LedgerJournalNameId parmJournalName(LedgerJournalNameId _ledgerJournalName = ledgerJournalName)
    {
        ledgerJournalName = _ledgerJournalName;

        return ledgerJournalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
    LedgerJournalId parmJournalNum(LedgerJournalId _ledgerJournalId = ledgerJournalId)
    {
        ledgerJournalId = _ledgerJournalId;

        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            LedgerJournalPeriodicCopy journalCopy = LedgerJournalPeriodicCopy::construct(
                ledgerJournalName,
                ledgerJournalId,
                copyMove,
                fromLedgerJournalName,
                fromLedgerJournalId,
                endDate,
                emptyDate);

            journalCopy.journalTableCopy();

            if (!(TaxIntegrationSkipTaxCalculationAfterRetrievalFromPeriodicJournalFlight::instance().isEnabled()
                    && Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Journal)))
            {
                LedgerJournalEngine_Server::calculateTaxForCompleteJournal(ledgerJournalId);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _p1 = null)
    {
        boolean isValid = this.validateEndDate()
            && this.validateJournalIdSelected();

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateEndDate</Name>
				<Source><![CDATA[
    private boolean validateEndDate()
    {
        boolean isValid = endDate ? true : checkFailed("@SYS24455");

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateJournalIdSelected</Name>
				<Source><![CDATA[
    private boolean validateJournalIdSelected()
    {
        boolean isValid = true;

        LedgerJournalTable fromLedgerJournal = LedgerJournalTable::find(fromLedgerJournalId);

        if (fromLedgerJournal.JournalType == LedgerJournalType::Periodic)
        {
            if (fromLedgerJournal.GroupBlockId
                && !this.isCurrentUserInBlockedUserGroupId(fromLedgerJournal.GroupBlockId))
            {
                isValid = checkFailed(strFmt("@GeneralLedger:InvalidJournalAfterSelection", fromLedgerJournalId));
            }
        }
        else
        {
            isValid = checkFailed(strfmt("@SYS79665", fromLedgerJournalId, LedgerJournalType::Periodic));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrentUserInBlockedUserGroupId</Name>
				<Source><![CDATA[
    private boolean isCurrentUserInBlockedUserGroupId(JournalBlockUserGroupId _blockedUserGroupId)
    {
        UserGroupList userGroupList;

        select firstonly RecId from userGroupList
            where userGroupList.groupId == _blockedUserGroupId
                && userGroupList.userId == curUserId();

        return userGroupList ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS3868";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args  args)
    {
        LedgerJournalCopyPeriodic ledgerJournalCopyPeriodic;

        switch (args.dataset())
        {
            case tablenum(LedgerJournalTable):
                ledgerJournalCopyPeriodic = LedgerJournalCopyPeriodic::newLedgerJournalTable(args.record());
                break;
            default:
                throw error("@SYS18626");
        }

        if (ledgerJournalCopyPeriodic.prompt())
        {
            ledgerJournalCopyPeriodic.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLedgerJournalTable</Name>
				<Source><![CDATA[
    static LedgerJournalCopyPeriodic newLedgerJournalTable(LedgerJournalTable _ledgerJournalTable)
    {
        LedgerJournalCopyPeriodic ledgerJournalCopyPeriodic;

        ledgerJournalCopyPeriodic = new LedgerJournalCopyPeriodic();
        ledgerJournalCopyPeriodic.getLast();
        ledgerJournalCopyPeriodic.parmJournalName(_ledgerJournalTable.JournalName);
        ledgerJournalCopyPeriodic.parmJournalNum(_ledgerJournalTable.JournalNum);

        return ledgerJournalCopyPeriodic;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupPeriodicJournalNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements a custom lookup for periodic journal number.
    /// </summary>
    /// <param name="_control">
    /// A <c>FormStringControl</c> that will be used for the lookup.
    /// </param>
    internal void lookupPeriodicJournalNumber(FormStringControl _control)
    {
        SysTableLookup sysTableLookup = this.addLookupFields(_control);
        Query query = this.createQueryForLookup();

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLookupFields</Name>
				<Source><![CDATA[
    private SysTableLookup addLookupFields(FormStringControl _control)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(LedgerJournalTable), _control);
        sysTableLookup.addLookupfield(fieldNum(LedgerJournalTable, JournalNum));
        sysTableLookup.addLookupfield(fieldNum(LedgerJournalTable, JournalName));
        sysTableLookup.addLookupfield(fieldNum(LedgerJournalTable, Name));

        return sysTableLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryForLookup</Name>
				<Source><![CDATA[
    private Query createQueryForLookup()
    {
        Query query = new Query();

        QueryBuildDataSource qbdsLedgerJournalTable = query.addDataSource(tableNum(LedgerJournalTable));
        qbdsLedgerJournalTable.addRange(fieldNum(LedgerJournalTable, JournalType)).value(queryValue(LedgerJournalType::Periodic));
        qbdsLedgerJournalTable.addRange(fieldnum(LedgerJournalTable, GroupBlockId)).value(UserGroupList::groupsForUser());

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>