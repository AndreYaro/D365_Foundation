<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomJournalTransCreateImport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustomJournalTransCreateImport_RU extends CustomJournalTransCreate_RU
{
    PurchTable          purchTable;
    PurchLine           purchLine;
    VendInvoiceTrans    vendInvoiceTrans;

    InventTransId       inventTransId;
    Set                 markupCodeSet;
    Map                 markupCodeNotAllocatedMap;
    UnitOfMeasureSymbol unitID;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmountCur</Name>
				<Source><![CDATA[
    void calcAmountCur(CustomJournalTrans_RU _customJournalTrans)
    {
        UnitOfMeasureSymbol unitIdInvent = InventTableModule::find(_customJournalTrans.ItemId, ModuleInventPurchSales::Invent).UnitId;
        Qty                 salesPurchQty;

        if (purchLine)
        {
            salesPurchQty = InventTable::unitConvertValue(_customJournalTrans.ItemId, 
                                                          _customJournalTrans.UnitId, 
                                                          purchLine.PurchUnit, 
                                                          unitIdInvent, 
                                                          _customJournalTrans.Qty,
                                                          _customJournalTrans.InventDimId);

            _customJournalTrans.AmountCur    = purchLine.calcLineAmount(salesPurchQty);
            _customJournalTrans.CurrencyCode = purchLine.CurrencyCode;
        }
        else
        if (vendInvoiceTrans)
        {
            salesPurchQty = InventTable::unitConvertValue(_customJournalTrans.ItemId, 
                                                          _customJournalTrans.UnitId, 
                                                          vendInvoiceTrans.PurchUnit, 
                                                          unitIdInvent, 
                                                          _customJournalTrans.Qty,
                                                          _customJournalTrans.InventDimId);

            _customJournalTrans.AmountCur    = CurrencyExchangeHelper::amount(vendInvoiceTrans.PurchPrice * salesPurchQty, vendInvoiceTrans.CurrencyCode);
            _customJournalTrans.CurrencyCode = vendInvoiceTrans.CurrencyCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCheckInventTransStatus</Name>
				<Source><![CDATA[
    protected boolean canCheckInventTransStatus(TmpFrmVirtual _tmpFrmVirtualLine)
    {
        boolean ret = true;

        switch (_tmpFrmVirtualLine.TableNum)
        {
            case tablenum(VendInvoiceTrans):
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMarkupAlloc</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkMarkupAlloc()
    {
        MarkupTrans    markupTrans;
        boolean        ret = true;
        container      con;

        if (! markupCodeSet || ! markupCodeSet.elements())
            return ret;

        if (! purchTable)
            return ret;

        while select MarkupCode from markupTrans
            where markupTrans.TransRecId   == purchTable.RecId &&
                  markupTrans.TransTableId == purchTable.TableId
        {
            if (markupCodeSet.in(markupTrans.MarkupCode))
            {
                if (markupCodeNotAllocatedMap.exists(purchTable.PurchId))
                {
                    con = markupCodeNotAllocatedMap.lookup(purchTable.PurchId);
                }
                else
                {
                    con = connull();
                }

                con += markupTrans.MarkupCode;

                markupCodeNotAllocatedMap.insert(purchTable.PurchId, con);

                ret = false;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>customJournalTransUpdate</Name>
				<Source><![CDATA[
    CustomJournalTrans_RU customJournalTransUpdate()
    {
        CustomJournalTrans_RU   customJournalTrans;

        if (purchLine)
        {
            select firstonly forupdate customJournalTrans
                where customJournalTrans.CustomJournalId            == customJournalTable.CustomJournalId   &&
                      customJournalTrans.ItemId                     == purchLine.ItemId                     &&
                      customJournalTrans.SalesPurchInventTransId    == purchLine.InventTransId              &&
                      customJournalTrans.SalesPurchId               == purchLine.PurchId                    &&
                      customJournalTrans.InventDimId                == purchLine.InventDimId                &&
                      customJournalTrans.DefaultDimension           == purchLine.DefaultDimension;
        }
        else if (vendInvoiceTrans)
        {
            select firstonly forupdate customJournalTrans
                where customJournalTrans.CustomJournalId            == customJournalTable.CustomJournalId   &&
                      customJournalTrans.ItemId                     == vendInvoiceTrans.ItemId              &&
                      customJournalTrans.SalesPurchInventTransId    == vendInvoiceTrans.InventTransId       &&
                      customJournalTrans.SalesPurchId               == vendInvoiceTrans.PurchID             &&
                      customJournalTrans.InventDimId                == vendInvoiceTrans.InventDimId         &&
                      customJournalTrans.DefaultDimension           == vendInvoiceTrans.DefaultDimension    &&
                      customJournalTrans.InvoiceId                  == vendInvoiceTrans.InvoiceId           &&
                      customJournalTrans.InvoiceDate                == vendInvoiceTrans.InvoiceDate;
        }

        return customJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransId</Name>
				<Source><![CDATA[
    protected InventTransId getInventTransId()
    {
        return inventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventStatusList</Name>
				<Source><![CDATA[
    protected void initInventStatusList(CustomJournalTable_RU _customJournalTable = customJournalTable)
    {
        super();

        switch (_customJournalTable.CustomInventTransStatus)
        {
            case CustomInventTransStatus_RU::Ordered:
                inventStatusReceiptCon += SysQuery::value(StatusReceipt::Ordered);
                break;
            case CustomInventTransStatus_RU::Purchased:
                inventStatusReceiptCon += SysQuery::value(StatusReceipt::Purchased);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initMarkupCodeList</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initMarkupCodeList()
    {
        AgreementHeaderDefault      agreementHeaderDefault;
        MarkupDlvTermConnection_RU  markupDlvTermConnection;

        markupCodeSet             = new Set(Types::String);
        markupCodeNotAllocatedMap = new Map(Types::String, Types::Container);

        agreementHeaderDefault = AgreementHeaderDefault::findAgreementHeader(customJournalTable.agreementHeaderExt().AgreementHeader);

        if (agreementHeaderDefault.DeliveryTerm)
        {
            while select * from markupDlvTermConnection
                where markupDlvTermConnection.DlvTermCode == agreementHeaderDefault.DeliveryTerm
            {
                markupCodeSet.add(markupDlvTermConnection.MarkupCode);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSource</Name>
				<Source><![CDATA[
    protected void initSource()
    {
        switch (tmpFrmVirtualLine.TableNum)
        {
            case tablenum(PurchLine):
                purchLine        = PurchLine::findRecId(tmpFrmVirtualLine.RecordNo);
                vendInvoiceTrans = null;
                purchTable       = purchLine.purchTable();
                inventTransId    = purchLine.InventTransId;
                unitID           = InventTableModule::find(purchLine.ItemId, ModuleInventPurchSales::Invent).UnitId;

                break;

            case tablenum(VendInvoiceTrans):
                purchLine        = null;
                vendInvoiceTrans = VendInvoiceTrans::findRecId(tmpFrmVirtualLine.RecordNo);
                purchTable       = vendInvoiceTrans.purchTable_RU();
                inventTransId    = vendInvoiceTrans.InventTransId;
                unitID           = InventTableModule::find(vendInvoiceTrans.ItemId, ModuleInventPurchSales::Invent).UnitId;
                break;

            default:
                purchLine        = null;
                vendInvoiceTrans = null;
                purchTable       = null;
                inventTransId    = '';
                unitID           = '';
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTransFromSource</Name>
				<Source><![CDATA[
    void initTransFromSource(CustomJournalTrans_RU _customJournalTrans)
    {
        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;

        super(_customJournalTrans);

        if (purchLine)
        {
            _customJournalTrans.ItemId                  = purchLine.ItemId;
            _customJournalTrans.SalesPurchInventTransId = purchLine.InventTransId;
            _customJournalTrans.SalesPurchId            = purchLine.PurchId;
            _customJournalTrans.InventDimId             = purchLine.InventDimId;
            _customJournalTrans.DefaultDimension        = purchLine.DefaultDimension;
            _customJournalTrans.UnitId                  = unitId;
        }
        else
        if (vendInvoiceTrans)
        {
            _customJournalTrans.ItemId                  = vendInvoiceTrans.ItemId;
            _customJournalTrans.SalesPurchInventTransId = vendInvoiceTrans.InventTransId;
            _customJournalTrans.SalesPurchId            = vendInvoiceTrans.PurchID;
            _customJournalTrans.InventDimId             = vendInvoiceTrans.InventDimId;
            _customJournalTrans.DefaultDimension        = vendInvoiceTrans.DefaultDimension;
            _customJournalTrans.UnitId                  = unitId;
            _customJournalTrans.InvoiceId               = vendInvoiceTrans.InvoiceId;
            _customJournalTrans.InvoiceDate             = vendInvoiceTrans.InvoiceDate;

            select firstOnly StatusIssue, StatusReceipt from inventTrans
                where inventTrans.ItemId == vendInvoiceTrans.ItemId
                   && inventTrans.inventDimId == vendInvoiceTrans.InventDimId
                exists join inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                   && inventTransOrigin.InventTransId == vendInvoiceTrans.InventTransId;

            _customJournalTrans.StatusIssue   = inventTrans.StatusIssue;
            _customJournalTrans.StatusReceipt = inventTrans.StatusReceipt;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean          ret;
        MapEnumerator    mapEnumerator;

        this.initMarkupCodeList();

        ret = super();

        if (markupCodeNotAllocatedMap && markupCodeNotAllocatedMap.elements())
        {
            setprefix("@GLS115409");

            mapEnumerator = markupCodeNotAllocatedMap.getEnumerator();

            while (mapEnumerator.moveNext())
            {
                checkFailed(strfmt("@GLS115410", mapEnumerator.currentKey(), con2Str(mapEnumerator.currentValue())));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLine</Name>
				<Source><![CDATA[
    public boolean validateLine(TmpFrmVirtual _tmpFrmVirtualLine)
    {
        boolean ret;

        ret = super(_tmpFrmVirtualLine);

        ret = ret && this.checkMarkupAlloc();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>