<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookUpdateDepConvention</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AssetBookUpdateDepConvention
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        Args args = new Args();

        args.caller(this);
        new MenuFunction(menuitemoutputstr(AssetBookMassUpdate), MenuItemType::Output).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        AssetBookUpdateDepConvention  assetMassUpdate;

        assetMassUpdate = new AssetBookUpdateDepConvention();
        assetMassUpdate.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDepreciationConvention</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will delete AssetTrans records if the depreciation convention is changed.
    /// </summary>
    /// <param name = "assetId">Asset Id</param>
    /// <param name = "bookId">Book id</param>
    /// <param name = "placedInServiceStart">Beginning date</param>
    /// <param name = "placedInServiceEnd">Ending date</param>
    /// <param name = "changeToDepConvention">Depreciation convention to be changed</param>
    /// <returns>True if the convention is changed; otherwise false</returns>
    public static boolean updateDepreciationConvention(
                    AssetId _assetId,
                    AssetBookId _bookId,
                    AssetUsedFromDate _placedInServiceStart,
                    AssetUsedFromDate _placedInServiceEnd,
                    AssetDepreciationConvention _changeToDepConvention)
    {
        AssetBook assetBook;
        AssetDepreciationProfile assetDepreciationProfile;
        #OCCRetryCount

        try
        {
            //Get the table buffer for update as we need to update this record at the end.
            //We might leave this method without editing but we need to ensure that the
            //values that we are validating against have not changed.
            assetBook = AssetBook::find(_assetId, _bookId, true);

            if (assetBook.UsedFromDate < _placedInServiceStart ||
                assetBook.UsedFromDate > _placedInServiceEnd)
            {
                return false;
            }

            if (assetBook.Status == AssetStatus::Closed ||
                assetBook.Status == AssetStatus::Scrapped ||
                assetBook.Status == AssetStatus::Sold ||
                assetBook.Status == AssetStatus::Suspended ||
                assetBook.Status == AssetStatus::TransferredToLowValuePool)
            {
                return false;
            }

            assetDepreciationProfile = AssetDepreciationProfile::find(assetBook.DepreciationProfile);

            if (!assetDepreciationProfile.isConventionAllowed())
            {
                return false;
            }

            ttsbegin;

            // delete transactions for this asset book.
            AssetBookDeleteTransProcess assetBookDeleteTransProcess = AssetBookDeleteTransProcess::construct(assetBook, AssetDeleteTransactionTransType::Depreciation);
            assetBookDeleteTransProcess.deleteTrans();

            //update the depreciation convention and Depreciation Run Date
            assetBook.DepreciationConvention = _changeToDepConvention;
            assetBook.calcDepreciationStartDate();
            assetBook.update();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>