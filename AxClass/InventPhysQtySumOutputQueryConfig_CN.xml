<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPhysQtySumOutputQueryConfig_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This <c>InventPhysQtySumOutputQueryConfig_CN</c> class is used to configure the InventPhysQtySumTmp_CN datasource according to caller.
/// </summary>
class InventPhysQtySumOutputQueryConfig_CN
{
    InventDimParm           inventDimParm;
    ItemId                  itemId;
    InventDim               inventDim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDimRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds dimension ranges.
    /// </summary>
    /// <param name="_dataSource">
    /// A InventPhysQtySumTmp_CN datasource.
    /// </param>

    protected void addDimRange(QueryBuildDataSource _dataSource)
    {
        container dimFields = InventPhysQtySumTmp_CN::dimFieldList();
        int h;
        str range;
        fieldId fieldId;

        for (h = 1; h <= conlen(dimFields); h++)
        {
            fieldId = InventPhysQtySumTmp_CN::tmpDim2Dim(conpeek(dimFields, h));
            if (inventDimParm.(InventDim::dim2dimParm(fieldId)))
            {
                range = queryValue(inventDim.(fieldId));
                _dataSource.addRange(conpeek(dimFields, h)).value(range);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addItemRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the item range.
    /// </summary>
    /// <param name="_dataSource">
    /// A InventPhysQtySumTmp_CN datasource.
    /// </param>
    protected void addItemRange(QueryBuildDataSource _dataSource)
    {
        str range = queryValue(itemId);
        _dataSource.addRange(fieldnum(InventPhysQtySumTmp_CN, ItemId)).value(range);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clear the ranges
    /// </summary>
    /// <param name="_dataSource">
    /// A InventPhysQtySumTmp_CN datasource.
    /// </param>
    protected void clearRange(QueryBuildDataSource _dataSource)
    {
        _dataSource.clearRanges();
    }

]]></Source>
			</Method>
			<Method>
				<Name>configDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the form datasource.
    /// </summary>
    /// <param name="_tmpInventSum">
    /// A form datasource.
    /// </param>
    public void configDatasource(FormDataSource _tmpInventSum)
    {
        this.configQuery(_tmpInventSum.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>configQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Configures the query.
    /// </summary>
    /// <param name="_query">
    /// A query with InventPhysQtySumTmp_CN datasource.
    /// </param>
    public void configQuery(Query _query)
    {
        QueryBuildDataSource dataSource = _query.dataSourceTable(tablenum(InventPhysQtySumTmp_CN));
        if (dataSource == null)
        {
            return;
        }

        this.clearRange(dataSource);

        this.addItemRange(dataSource);
        this.addDimRange(dataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the parameters from arguments.
    /// </summary>
    /// <param name="_callerArgs">
    /// An arguments
    /// </param>
    public void parmCallerArgs(Args _callerArgs)
    {
        boolean gotItemId = false;
        switch (_callerArgs.dataset())
        {
            case tablenum(InventSum):
                this.parmItemId(_callerArgs.record().(fieldname2id(_callerArgs.dataset(),fieldstr(InventSum,ItemId))));
                gotItemId = true;
                break;

            default:
                if (fieldname2id(_callerArgs.dataset(),fieldstr(InventTrans,ItemId)) > 0)
                {
                    this.parmItemId(_callerArgs.record().(fieldname2id(_callerArgs.dataset(),fieldstr(InventTrans,ItemId))));
                    gotItemId = true;
                }
                break;
        }

        if (gotItemId)
        {
            if (_callerArgs.record().joinChild())
            {
                InventDim inventDimLocal = _callerArgs.record().joinChild();
                if (inventDimLocal)
                {
                    this.parmInventDim(inventDimLocal);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDim</Name>
				<Source><![CDATA[
    public InventDim parmInventDim(InventDim _inventDim = inventDim)
    {
        if (!_inventDim.equal(inventDim))
        {
            inventDim.data(_inventDim);
        }
        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventDimParm</Name>
				<Source><![CDATA[
    public InventDimParm parmInventDimParm(InventDimParm _inventDimParm = inventDimParm)
    {
        if (!_inventDimParm.equal(inventDimParm))
        {
            inventDimParm = _inventDimParm;
        }

        return inventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId = itemId)
    {
        itemId = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the <c>InventPhysQtySumOutputQueryConfig_CN</c> class.
    /// </summary>
    /// <param name="_itemId">
    /// The item id.
    /// </param>
    /// <param name="_inventDim">
    /// The invent dim.
    /// </param>
    /// <param name="_inventDimParm">
    /// The invent dim parameters.
    /// </param>
    /// <returns>
    /// The instance of the <c>InventPhysQtySumOutputQueryConfig_CN</c> class.
    /// </returns>
    public static InventPhysQtySumOutputQueryConfig_CN construct(
        ItemId          _itemId,
        InventDim       _inventDim,
        InventDimParm   _inventDimParm)
    {
        InventPhysQtySumOutputQueryConfig_CN queryInit = new InventPhysQtySumOutputQueryConfig_CN();
        queryInit.parmItemId(_itemId);
        queryInit.parmInventDim(_inventDim);
        queryInit.parmInventDimParm(_inventDimParm);
        return queryInit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default from date.
    /// </summary>
    /// <param name="_item">
    /// A item id.
    /// </param>
    /// <returns>
    /// The default from date.
    /// </returns>
    public static TransDate defaultFromDate(ItemId _item = '')
    {
        TransDate   defaultDate = dateNull();

        return defaultDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets default to date.
    /// </summary>
    /// <param name="_item">
    /// A item id.
    /// </param>
    /// <returns>
    /// The default to date.
    /// </returns>
    public static TransDate defaultToDate(ItemId _item)
    {
        InventTrans inventTrans;
        TransDate   defaultDate = dateMax();

        if (_item)
        {
            select maxof(DatePhysical) from inventTrans
                where inventTrans.ItemId == _item;
            defaultDate = inventTrans.DatePhysical;
        }

        return defaultDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the sort order of the InventPhysQtySumTmp_CN datasource.
    /// </summary>
    /// <param name="_tmpInventSumQuery">
    /// A query with InventPhysQtySumTmp_CN datasource.
    /// </param>
    public static void setOrder(Query _tmpInventSumQuery)
    {
        container dimFields = InventPhysQtySumTmp_CN::dimFieldList();
        int h;

        QueryBuildDataSource qbs = _tmpInventSumQuery.dataSourceTable(tablenum(InventPhysQtySumTmp_CN));
        if (qbs == null)
        {
            return;
        }

        qbs.sortClear();

        qbs.addSortField(fieldnum(InventPhysQtySumTmp_CN, BeginDate));
        qbs.addSortField(fieldnum(InventPhysQtySumTmp_CN, ItemId));

        for (h = 1; h <= conlen(dimFields); h++)
        {
            qbs.addSortField(conpeek(dimFields, h));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
