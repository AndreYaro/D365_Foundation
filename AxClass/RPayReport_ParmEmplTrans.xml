<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayReport_ParmEmplTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The payroll employee transactions report.
/// </summary>
class RPayReport_ParmEmplTrans extends OXMLExcelReport_RPay implements BatchRetryable
{
    QueryRun        queryRun;
    Counter         pageNumber;

    #define.Prolog('PROLOG')
    #define.Header('HEADER')
    #define.Body('BODY')

    #define.pageWidth(9)

    #define.CurrentVersion(1)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        #define.minHeight(15)

        return #minHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        RHRMEmplId      prevEmplId = '';
        RHRMEmplTable   emplTable;

        this.initSectionMap();

        this.setCurrentWorksheetNum(1, #pageWidth);

        this.execute(#Prolog);

        this.updateQuery();

        queryRun.reset();
        while (queryRun.next())
        {
            emplTable = queryRun.get(tableNum(RHRMEmplTable));
            if (prevEmplId != emplTable.EmployeeId)
            {
                this.execute(#Header);
                prevEmplId = emplTable.EmployeeId;
            }
            this.execute(#Body);
        }

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'RPayReport_ParmEmplTrans';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    #define.Dash('_')
    protected Filename fileNamePostfix()
    {
        return #Dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    #define.fieldId('fieldid')
    #define.fieldName('fieldName')
    #define.fieldValue('fieldValue')
    private void fillBody()
    {
        RPayParmTable parmTable = queryRun.get(tableNum(RPayParmTable));
        RPayParmEmplTrans emplTrans = queryRun.get(tableNum(RPayParmEmplTrans));

        this.insertValueToSection(#fieldId, parmTable.PayField);
        this.insertValueToSection(#fieldName, parmTable.Name);
        this.insertValueToSection(#fieldValue, emplTrans.Contents);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case #Prolog:
                this.fillProlog();
                break;
            case #Header:
                this.fillHeader();
                break;
            case #Body:
                this.fillBody();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    #define.emplName('emplName')
    #define.emplId('emplId')
    private void fillHeader()
    {
        RHRMEmplTable   emplTable = queryRun.get(tableNum(RHRMEmplTable));

        this.insertValueToSection(#emplId, emplTable.EmployeeId);
        this.insertValueToSection(#emplName, RHRMEmplTable::emplId2Name(emplTable.EmployeeId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillProlog</Name>
				<Source><![CDATA[
    #define.Title('title')
    #define.date('date')
    #define.companyName('companyname')
    #define.pageNumber('pagenum')
    private void fillProlog()
    {
        utcdatetime dateTime = DateTimeUtil::applyTimeZoneOffset(
            DateTimeUtil::utcNow(),
            DateTimeUtil::getCompanyTimeZone());

        this.insertValueToSection(#Title,           "@GLS105328");
        this.insertValueToSection(#date,        dateTime);

        this.insertValueToSection(#companyName,     CompanyInfo::find().Name);
        this.insertValueToSection(#pageNumber,      strFmt("@SYS24160", pageNumber));
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report.
    /// </summary>
    /// <returns>
    /// True.
    /// </returns>
    public boolean init()
    {
        boolean ret = super();

        if (ret)
        {
            pageNumber = 1;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();
        queryRun = this.initQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRun</Name>
				<Source><![CDATA[
    private QueryRun initQueryRun()
    {
        Query                   query;

        QueryBuildDataSource    emplTableDS;
        QueryBuildDataSource    parmEmplTransDS;
        QueryBuildDataSource    parmTableDS;

        query = new Query();
        emplTableDS = query.addDataSource(tableNum(RHRMEmplTable));

        parmEmplTransDS = emplTableDS.addDataSource(tableNum(RPayParmEmplTrans));
        parmEmplTransDS.relations(true);
        parmEmplTransDS.fetchMode(QueryFetchMode::One2One);

        parmTableDS = parmEmplTransDS.addDataSource(tableNum(RPayParmTable));
        parmTableDS.addLink(fieldNum(RPayParmEmplTrans, PayField), fieldNum(RPayParmTable, PayField));
        parmTableDS.fetchMode(QueryFetchMode::One2One);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(#Prolog);
        this.addSection(#Header);
        this.addSection(#Body, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(RPayReport_ParmEmplTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        #define.prologCells(4)
        #define.headerCells(1)
        #define.bodyCells(3)
        RHRMEmplTable emplTable;
        RPayParmTable parmTable;

        select count(RecId) from emplTable;
        select count(RecId) from parmTable;
        return #prologCells + int642int(#headerCells*emplTable.RecId) + int642int(#bodyCells*parmTable.RecId*emplTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        container       packedQR;

        switch (version)
        {
            case #CurrentVersion :
                [version, packedQR] = packedClass;

                queryRun = SysQuery::isPackedOk(packedQR) ?
                                        new QueryRun(packedQR)
                                      : this.initQueryRun();

                break;
            default:
                QueryRun = this.initQueryRun();
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private void updateQuery()
    {
        queryRun.query().dataSourceTable(tableNum(RHRMEmplTable)).addSortField(fieldNum(RHRMEmplTable, EmployeeId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@GLS105328";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RPayReport_ParmEmplTrans               report = new RPayReport_ParmEmplTrans();

        report.parmArgs(_args);
        if (report.prompt())
        {
            if (report.init())
            {
                report.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>