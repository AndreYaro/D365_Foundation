<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportPostingExcisePLAPaymHandler_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes and updates the tax payment doc and PLA transaction.
/// </summary>
public class TaxReportPostingExcisePLAPaymHandler_IN extends TaxReportPostingHandler_IN
{
    Num                         PLANumberSequence;
    TaxReportHierarchyNode_IN   taxComponentNode;
    boolean                     hasSufficientBalance;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructExcisePLARegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create excisePLARegister object
    /// </summary>
    /// <param name="_creditAmount">
    /// The credit amount
    /// </param>
    /// <param name="_PLALedgerDimension">
    /// The PLA ledger dimension that the credit amount will be posted to
    /// </param>
    /// <param name="_isInterimPLA">
    /// Indicate whether this is Interim PLA account
    /// </param>
    private void constructExcisePLARegister(TaxAmount  _creditAmount,
                                            RefRecId   _PLALedgerDimension,
                                            boolean    _isInterimPLA)
    {
        ExcisePLARegisterObject_IN  pLARegisterObject;
        ExcisePLARegister_IN        excisePLARegister;

        excisePLARegister.TaxRegistrationNumberTable = this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmTaxRegistrationNumber().RecId;
        excisePLARegister.RGDate = this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmTransactionDate();
        excisePLARegister.TaxComponentTable = this.parmTaxComponentNode().RefTableRecId;
        excisePLARegister.CreditBalance = _creditAmount;
        excisePLARegister.NumberSequence = PLANumberSequence;
        excisePLARegister.PLALedgerDimension = _PLALedgerDimension;

        pLARegisterObject = new ExcisePLARegisterObject_IN();
        pLARegisterObject.parmExcisePLARegister(excisePLARegister);
        pLARegisterObject.parmIsInterimPLA(_isInterimPLA);

        this.parmTaxPaymentDoc().addExcisePLARegisterObject(pLARegisterObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxPostingLedgerDimAcct</Name>
				<Source><![CDATA[
    protected LedgerDimensionAccount getTaxPostingLedgerDimAcct(TaxSalesTaxPaymentHistoryDetails_IN _historyDetails)
    {
        LedgerDimensionAccount          taxPostingLedgerDimAcct;
        TaxLedgerAccounts_IN            taxLedgerAccounts;
        TaxLedgerAccountSetup_IN        taxLedgerAccountSetup;
        TaxAccountType_IN               taxAccountType;
        TaxType_IN                      taxType;

        if (this.parmTaxComponentNode())
        {
            taxType = TaxRegistrationNumbers_IN::find(_historyDetails.TaxRegistrationNumbers_IN).TaxType;

            if (!this.parmHasSufficientBalance())
            {
                taxAccountType = TaxAccountType_IN::ExciseInterimPLAAccount;
            }
            else
            {
                taxAccountType = TaxAccountType_IN::ExcisePLAAccount;
            }

            if (taxAccountType != taxAccountType_IN::None)
            {
                select firstOnly RecId, LedgerDimension from taxLedgerAccounts
                    exists join RecId, TaxRegistrationNumberTable from taxLedgerAccountSetup
                        where taxledgeraccounts.TaxLedgerAccountSetup == taxLedgerAccountSetup.RecId
                        &&    (taxLedgerAccountSetup.TaxRegistrationNumberTable == _historyDetails.TaxRegistrationNumbers_IN
                               || taxLedgerAccountSetup.TaxRegistrationNumberTable == 0 )
                        &&    taxLedgerAccounts.TaxComponentTable == taxComponentNode.RefTableRecId
                        &&    taxLedgerAccounts.AccountType == taxAccountType;

                if (taxLedgerAccounts.RecId)
                {
                    taxPostingLedgerDimAcct = taxLedgerAccounts.LedgerDimension;
                }
            }
        }
        return LedgerDimensionFacade::serviceCreateLedgerDimension(taxPostingLedgerDimAcct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasSufficientBalance</Name>
				<Source><![CDATA[
    public boolean parmHasSufficientBalance(boolean _hasSufficientBalance = hasSufficientBalance)
    {
        hasSufficientBalance = _hasSufficientBalance;
        return hasSufficientBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPLANumberSequence</Name>
				<Source><![CDATA[
    public Num parmPLANumberSequence(Num _PLANumberSequence = PLANumberSequence)
    {
        PLANumberSequence = _PLANumberSequence;
        return PLANumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxComponentNode</Name>
				<Source><![CDATA[
    public TaxReportHierarchyNode_IN parmTaxComponentNode(TaxReportHierarchyNode_IN _taxComponentNode = taxComponentNode)
    {
        taxComponentNode = _taxComponentNode;
        return taxComponentNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    TaxSalesTaxPaymentDoc_IN process(TaxSalesTaxPaymentDoc_IN _taxPaymentDoc, TaxSalesTaxPaymentHistoryDetails_IN _historyDetail = null)
    {
        ExcisePLARegister_IN                    excisePLARegister;
        LedgerDimensionAccount                  PLALedgerDimension;
        TaxAmount                               remainingPLAAmount, insufficientPLAAmount;
        LedgerPostingController                 ledgerPostingController;
        LedgerVoucherTransObject                ledgerVoucherTransObject;

        super(_taxPaymentDoc, _historyDetail);

        select sum(CreditBalance),
               sum(DebitBalance)
          from excisePLARegister
          where excisePLARegister.TaxComponentTable == this.parmTaxComponentNode().RefTableRecId
          &&    excisePLARegister.RGDate <= this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmTransactionDate()
          &&    excisePLARegister.TaxRegistrationNumberTable == this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmTaxRegistrationNumber().RecId;

        if (!this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmUsePLAInterimAccount() && excisePLARegister.DebitBalance - abs(excisePLARegister.CreditBalance) < this.parmBalance())
        {
            warning("@GLS6406");
            throw error("@SYS21533");
        }

        //Sufficient PLA balance
        if (excisePLARegister.DebitBalance - abs(excisePLARegister.CreditBalance) >= this.parmBalance())
        {
            this.parmHasSufficientBalance(true);
            PLALedgerDimension = this.getTaxPostingLedgerDimAcct(_historyDetail);

            //Update PLA Balance
            this.constructExcisePLARegister(this.parmBalance() * -1, PLALedgerDimension, false);

            //Add ledgerVoucherTransObject for taxTrans
            ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(this.parmTaxPaymentDoc().parmLedgerVoucher());
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerPostingController.getReference(),
                                        LedgerPostingType::Tax,
                                        PLALedgerDimension,
                                        CompanyInfoHelper::standardCurrency(),
                                        this.parmBalance() * -1,
                                        CurrencyExchangeHelper::newExchangeDate(
                                            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                            this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmTransactionDate())
                                        );
            ledgerVoucherTransObject.parmSkipDimensionValidation(true);
            ledgerPostingController.addTrans(ledgerVoucherTransObject);
        }
        else if (this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmUsePLAInterimAccount()
            && excisePLARegister.DebitBalance - abs(excisePLARegister.CreditBalance) < this.parmBalance())
        {
            //Insufficient PLA balance

            //Post balacne to PLA interim account first
            insufficientPLAAmount = this.parmBalance() - (excisePLARegister.DebitBalance - abs(excisePLARegister.CreditBalance));
            this.parmHasSufficientBalance(false);
            PLALedgerDimension = this.getTaxPostingLedgerDimAcct(_historyDetail);
            this.constructExcisePLARegister(insufficientPLAAmount * -1, PLALedgerDimension, true);

            //Add ledgerVoucherTransObject for taxTrans
            ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(this.parmTaxPaymentDoc().parmLedgerVoucher());
            ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                        ledgerPostingController.getReference(),
                                        LedgerPostingType::Tax,
                                        PLALedgerDimension,
                                        CompanyInfoHelper::standardCurrency(),
                                        insufficientPLAAmount * -1,
                                        CurrencyExchangeHelper::newExchangeDate(
                                            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                            this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmTransactionDate())
                                        );
            ledgerVoucherTransObject.parmSkipDimensionValidation(true);
            ledgerPostingController.addTrans(ledgerVoucherTransObject);

            //Post remaining balance to PLA account
            remainingPLAAmount = this.parmBalance() - insufficientPLAAmount;
            if (remainingPLAAmount > 0)
            {
                this.parmHasSufficientBalance(true);
                PLALedgerDimension = this.getTaxPostingLedgerDimAcct(_historyDetail);
                this.constructExcisePLARegister(remainingPLAAmount * -1, PLALedgerDimension, false);

                //Add ledgerVoucherTransObject for taxTrans
                ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(this.parmTaxPaymentDoc().parmLedgerVoucher());
                ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                            ledgerPostingController.getReference(),
                                            LedgerPostingType::Tax,
                                            PLALedgerDimension,
                                            CompanyInfoHelper::standardCurrency(),
                                            remainingPLAAmount * -1,
                                            CurrencyExchangeHelper::newExchangeDate(
                                            Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId),
                                            this.parmTaxPaymentDoc().parmTaxSalesTaxPaymentProfile().parmTransactionDate())
                                            );
                ledgerVoucherTransObject.parmSkipDimensionValidation(true);
                ledgerPostingController.addTrans(ledgerVoucherTransObject);
            }
        }

        return this.parmTaxPaymentDoc();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>