<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rhrmReport_T3</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rhrmReport_T3 extends RHRMReport implements BatchRetryable
{
    RHRMActualityDate   actualityDate;
    RHRMJournalNum      staffListJournalId;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        actualityDate,
        staffListJournalId
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actualityDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the actuality date.
    /// </summary>
    /// <param name="_actualityDate">
    /// The date, if not default then set.
    /// </param>
    /// <returns>
    /// The actuality date.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RHRMActualityDate actualityDate(RHRMActualityDate _actualityDate = actualityDate)
    {
        actualityDate = _actualityDate;
        return actualityDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    public str animationBoxCaption()
    {
        return "@RUP1717";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    public str animationBoxText()
    {
        return "@GLS106431";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formstr(RHRMReport_T3), this);

        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
public void run()
    {
        int                  currentRow = #Value4;
        real                 staffListNumberTotal;
        real                 wageTotal;
        real                 riseInWages1Total;
        real                 riseInWages2Total;
        real                 riseInWages3Total;
        str                  specCondClassStr;

        RHRMStaffList        staffList;
        HcmTitle             hcmTitle;
        RHRMStaffListHistory staffListHistory, staffListHistoryExists, staffListHistoryNotExists;
        RHRMOrderTable       rhrmOrderTable = RHRMOrderTable::findJournal(staffListJournalId);

        wordDocument.insertFieldValue(#CI_Name,           CompanyInfo::find().Name);
        wordDocument.insertFieldValue(#CI_CodeOKPO_RU,   CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), actualityDate));
        wordDocument.insertFieldValue(#Accountant,        OfficialsTable_RU::nameAccountant());

        wordDocument.insertFieldValue(#CI_AtDate,         this.dateInWord(actualityDate));

        wordDocument.insertFieldValue(#OrderNum,          rhrmOrderTable.OrderNum);

        if (rhrmOrderTable)
             wordDocument.insertFieldValue(#OrderDate,   this.dateInWord(rhrmOrderTable.TransDate));

        wordDocument.goToBookmark(#DocTotalNum);

        wordDocument.tableGoToCell(currentRow + 1, 1);
        wordDocument.selectionRowCopy();

        wordDocument.tableGoToCell(currentRow, 1);

        while select OrganizationId from staffList
            order by OrganizationId asc
            join hcmTitle
                order by TitleId asc
                where hcmTitle.RecId == staffList.HcmTitle
            exists join staffListHistoryExists
                where staffListHistoryExists.StaffListRefRecId == staffList.RecId &&
                      staffListHistoryExists.StaffListFactor &&
                      staffListHistoryExists.StartDate <= actualityDate
            notexists join staffListHistoryNotExists
                where staffListHistoryNotExists.StaffListRefRecId == staffList.RecId &&
                      !staffListHistoryNotExists.StaffListFactor &&
                      staffListHistoryNotExists.StartDate <= actualityDate &&
                      staffListHistoryNotExists.StartDate > staffListHistoryExists.StartDate

        {
            staffListHistory = RHRMStaffListHistory::findLast(staffList.RecId, actualityDate);

            if (staffListHistory.StaffListFactor)
            {
                if (staffListHistory.GradeScaleId)
                {
                    staffListHistory.MaxWage = RHRMGradeScaleLine::findLast(staffListHistory.GradeScaleId,
                                                                            actualityDate,
                                                                            staffListHistory.MaxGradeId).wage();
                }

                wordDocument.tableInsertRowsBelow();
                wordDocument.setUpPageBreakBefore(false);

                wordDocument.tableInsertValue(currentRow, 1, RPayHRMOrganization::find(staffList.OrganizationId).Description);
                wordDocument.tableInsertValue(currentRow, #Value2, staffList.OrganizationId);
                wordDocument.tableInsertValue(currentRow, #Value3, hcmTitle.TitleId);
                wordDocument.tableInsertValue(currentRow, #Value4, staffListHistory.StaffListFactor);
                wordDocument.tableInsertValue(currentRow, #Value5, staffListHistory.MaxWage);
                wordDocument.tableInsertValue(currentRow, #Value6, staffListHistory.RiseInWages1);
                wordDocument.tableInsertValue(currentRow, #Value7, staffListHistory.RiseInWages2);
                wordDocument.tableInsertValue(currentRow, #Value8, staffListHistory.RiseInWages3);
                wordDocument.tableInsertValue(currentRow, #Value9, staffListHistory.StaffListFactor * (staffListHistory.MaxWage +
                                                             staffListHistory.RiseInWages1 +
                                                             staffListHistory.RiseInWages2 +
                                                             staffListHistory.RiseInWages3));

                specCondClassStr = RHRMReport_StaffListOrder::getSpecCondClassTxt(
                    staffListHistory.SpecCond,
                    staffListHistory.Class,
                    staffListHistory.WorkCondClass,
                    '\n');

                if (specCondClassStr)
                    {
                    wordDocument.tableInsertValue(currentRow, #Value10, specCondClassStr);
                }

                staffListNumberTotal += staffListHistory.StaffListFactor;
                wageTotal            += staffListHistory.StaffListFactor * staffListHistory.MaxWage;
                riseInWages1Total    += staffListHistory.StaffListFactor * staffListHistory.RiseInWages1;
                riseInWages2Total    += staffListHistory.StaffListFactor * staffListHistory.RiseInWages2;
                riseInWages3Total    += staffListHistory.StaffListFactor * staffListHistory.RiseInWages3;

                currentRow++;

                wordDocument.tableGoToCell(currentRow, 1);
            }
        }

        wordDocument.tableDeleteRow();

        wordDocument.insertFieldValue(#DocTotalNum, staffListNumberTotal);
        wordDocument.insertFieldValue(#DocTotalWage, wageTotal);
        wordDocument.insertFieldValue(#DocTotalRise1, riseInWages1Total);
        wordDocument.insertFieldValue(#DocTotalRise2, riseInWages2Total);
        wordDocument.insertFieldValue(#DocTotalRise3, riseInWages3Total);
        wordDocument.insertFieldValue(#DocTotalFond, wageTotal + riseInWages1Total +
                                                      riseInWages2Total + riseInWages3Total);

        wordDocument.insertFieldValue(#SL_SUMstaffListNumbe, staffListNumberTotal);

        wordDocument.unlinkFields();
    }
]]></Source>
			</Method>
			<Method>
				<Name>staffListJournalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the staff list journal id.
    /// </summary>
    /// <param name="_staffListJournalId">
    /// The staff list journal id, if not default then set.
    /// </param>
    /// <returns>
    /// The staff list journal id.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RHRMJournalNum staffListJournalId(RHRMJournalNum _staffListJournalId = staffListJournalId)
    {
        staffListJournalId = _staffListJournalId;
        return staffListJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer          version = conPeek(_packedClass, 1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>