<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvWorkflowStatusReset</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles reseting the various expense workflow documents back to a draft state.
/// </summary>
public class TrvWorkflowStatusReset
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>resetStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the selected expense related records from the datasource back to draft.
    /// </summary>
    /// <param name = "_dataSource">FormDataSource that has records selected.</param>
    public static void resetStatus(FormDataSource _dataSource)
    {
        #OCCRetryCount

        Counter documentCount;
        MultiSelectionHelper multiSelectHelper = MultiSelectionHelper::construct();
        multiSelectHelper = MultiSelectionHelper::construct();
    
        multiSelectHelper.parmDatasource(_dataSource);
    
        Common record = multiSelectHelper.getFirst();
        
        ExpenseInstrumentationLogger resetLogger = ExpenseInstrumentationLogger::createLogger(classStr(TrvWorkflowStatusReset));
        ExpenseInstrumentationWorkflowActivities workflowActivities = ExpenseInstrumentationWorkflowActivities::construct(resetLogger);
        ExpenseInstrumentationLoggerProperties properties = resetLogger.properties();
        using (var resetToDraftContext = workflowActivities.resetToDraftContext())
        {
            while (record)
            {
            

                    if (!TrvWorkflowStatusReset::canRecordBeRevertedToDraft(record))
                    {
                        record = multiSelectHelper.getNext();
                        continue;
                    }

                    try
                    {
                        // For expense reports, we now allow resetting expense reports containing posted lines
                        // by detaching unposted expense lines from the report and changing the expense report status to processed for payment.
                        TrvExpTable trvExpTable;
                        if (record.tableId == tableNum(TrvExpTable))
                        {
                            trvExpTable = record as TrvExpTable;
                        }

                        if (trvExpTable && trvExpTable.anyPostedLines())
                        {
                            ttsbegin;
                            // Reset unposted expense lines to draft and detach them from the report.
                            TrvWorkflowUtilities::resetUnpostedExpenseLines(trvExpTable.RecId);
                            resetLogger.logInformation(strFmt('Expense Lines for report %1 has been reset and detached', trvExpTable.ExpNumber));
                            // Change document status to Processed for Payment.
                            TrvWorkflowUtilities::setDocumentToPostedForPostedLines(trvExpTable.RecId);
                            resetLogger.logInformation(strFmt('Status for Expense report %1 has been changed to %2', trvExpTable.ExpNumber, TrvAppStatus::Ledger));
                            ttscommit;
                            
                            Info(strFmt("@Expense:UnpostedExpensesResetInfoMessage", trvExpTable.ExpNumber));
                        }
                        else
                        {
                            TrvWorkflowStatusReset::resetRecordStatus(record);
                        }
                 
                        record = multiSelectHelper.getNext();
                        documentCount++;
                    }
                    catch (Exception::UpdateConflict)
                    {
                        if (appl.ttsLevel() == 0)
                        {
                            if (xSession::currentRetryCount() >= #RetryNum)
                            {
                                resetLogger.logErrorWithCallStack('Update Conflict exception while resetting expense document');
                                throw Exception::UpdateConflictNotRecovered;
                            }
                            else
                            {
                                retry;
                            }
                        }
                        else
                        {
                            resetLogger.logErrorWithCallStack('Update Conflict exception while resetting expense document');
                            throw Exception::UpdateConflict;
                        }
                    }
                    catch (Exception::Deadlock)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            resetLogger.logErrorWithCallStack('Deadlock exception while resetting expense document');
                            throw Exception::Deadlock;
                        }
                        retry;
                    }
            }

            workflowActivities.addCustomProperty(resetToDraftContext, properties.documentCount(int2Str(documentCount)));
        }

        _dataSource.reread();

        info(strFmt("@Expense:ExpenseDocumentsResetMessage", documentCount, tableId2PName(record.TableId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRecordStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the expense related record back to a draft status.
    /// </summary>
    /// <param name = "_record">Record to reset to draft status.</param>
    protected static void resetRecordStatus(Common _record)
    {
        WorkflowTrackingStatusTable workflowStatusTable;
        SysWorkflowTable sysWorkflowTable;

        select firstonly CorrelationId, RootCorrelationId from workflowStatusTable
                order by workflowStatusTable.CreatedDateTime desc
                where workflowStatusTable.ContextRecId == _record.RecId && workflowStatusTable.ContextTableId == _record.TableId
                    && workflowStatusTable.TrackingStatus != WorkflowTrackingStatus::Cancelled;

        if (TrvWorkflowStatusReset::isRecordInPendingStatus(_record) && SysWorkflowTable::exist(workflowStatusTable.CorrelationId))
        {
            List workflowsToCancel = new List(Types::Guid);
            workflowsToCancel.addEnd(workflowStatusTable.CorrelationId);
            WorkflowCancelManager::cancelWorkflows(workflowsToCancel, "");
            TrvWorkflowCancelManager manager = TrvWorkflowCancelManager::construct();
            manager.updateExpenseDocumentStatus(workflowsToCancel);
        }
        else
        {
            ttsbegin;
                    
            TrvWorkflowStatusReset::resetRecordFromApprovedStatus(_record, workflowStatusTable.CorrelationId);

            if (workflowStatusTable.CorrelationId || workflowStatusTable.RootCorrelationId)
            {
                SysWorkflowTable::delete(workflowStatusTable.RootCorrelationId, true);
                      
                WorkflowTrackingStatusTable workflowStatusTableAllRecords;
                update_recordset workflowStatusTableAllRecords setting TrackingStatus = WorkflowTrackingStatus::Cancelled
                            where workflowStatusTableAllRecords.RootCorrelationId == workflowStatusTable.RootCorrelationId;
            }
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRecordBeRevertedToDraft</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given record can be reverted to a draft state.
    /// Records that are posted or partially posted cannot be reverted.
    /// </summary>
    /// <param name = "_record">Record to check ability to revert to draft.</param>
    /// <returns>True if the record can be reverted, otherwise false.</returns>
    public static boolean canRecordBeRevertedToDraft(Common _record)
    {
        boolean canRevert;

        switch(_record.TableId)
        {
            case tableNum(TrvExpTable):
                TrvExpTable trvExpTableRecord = _record as TrvExpTable;
                canRevert = !TrvWorkflowStatusReset::verifyLinesPosted(trvExpTableRecord);

                if (!canRevert)
                {
                    Error(strFmt("@Expense:UnableToRevertExpenseReportWithPostedLines", trvExpTableRecord.ExpNumber));
                }

                break;

            case tableNum(TrvCashAdvance):
                TrvCashAdvance trvCashAdvanceRecord = _record as TrvCashAdvance;
                canRevert = trvCashAdvanceRecord.CashAdvanceStatus != TrvWorkflowCashAdvanceStatus::Paid;

                if (!canRevert)
                {
                    Error(strFmt("@Expense:UnableToRevertPostedCashAdvance", trvCashAdvanceRecord.CashAdvanceNumber));
                }
                break;

            case tableNum(TrvRequisitionTable):
                TrvRequisitionTable trvRequisitionTableRecord = _record as TrvRequisitionTable;
                TrvExpTableTrvRequisitionTable trvExpTableTrvRequisitionTable;
                select firstonly TrvExpTable from trvExpTableTrvRequisitionTable
                    where trvExpTableTrvRequisitionTable.TrvRequisitionTable == trvRequisitionTableRecord.RecId;

                canRevert = trvExpTableTrvRequisitionTable.TrvExpTable == 0;

                if (!canRevert)
                {
                    Error(strFmt("@Expense:UnableToRevertInUseTravelRequisition", trvRequisitionTableRecord.RequisitionNumber, TrvExpTable::findRecId(TrvExpTableTrvRequisitionTable.TrvExpTable).ExpNumber));
                }
                break;

            default:
                canRevert = false;
                break;
        }

        return canRevert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRecordInPendingStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the given expense related record is in a pending or returned state.
    /// </summary>
    /// <param name = "_record">The record to check to see if it is in a pending or returned status.</param>
    /// <returns>True if the record is in a pending or returned status, otherwise false.</returns>
    public static boolean isRecordInPendingStatus(Common _record)
    {
        switch(_record.TableId)
        {
            case tableNum(TrvExpTable):
                TrvExpTable trvExpTableRecord = _record as TrvExpTable;
                return trvExpTableRecord.ApprovalStatus == TrvAppStatus::Pending || trvExpTableRecord.ApprovalStatus == TrvAppStatus::Returned;

            case tableNum(TrvCashAdvance):
                TrvCashAdvance trvCashAdvanceRecord = _record as TrvCashAdvance;
                return trvCashAdvanceRecord.CashAdvanceStatus == TrvWorkflowCashAdvanceStatus::Pending || trvCashAdvanceRecord.CashAdvanceStatus == TrvWorkflowCashAdvanceStatus::Returned;

            case tableNum(TrvRequisitionTable):
                TrvRequisitionTable trvRequisitionTableRecord = _record as TrvRequisitionTable;
                return trvRequisitionTableRecord.ApprovalStatus == TrvRequisitionApprovalStatus::Pending || trvRequisitionTableRecord.ApprovalStatus == TrvRequisitionApprovalStatus::Returned;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetRecordFromApprovedStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs logic specific to each table to reset when the record had been approved.
    /// </summary>
    /// <param name = "_record">Record being reverted to draft.</param>
    /// <param name = "_correlationId">Workflow correlation ID for the record being reset.</param>
    protected static void resetRecordFromApprovedStatus(Common _record, WorkflowCorrelationId _correlationId)
    {
        WorkflowContext context;
        WorkflowEventArgs workflowEventArgs;

        // Logger for Instrumentation
        ExpenseInstrumentationLogger logger = ExpenseInstrumentationLogger::createLogger(classStr(TrvWorkflowStatusReset));
        ExpenseInstrumentationLoggerProperties properties = logger.properties();
        ExpenseInstrumentationWorkflowActivities workflowActivities = ExpenseInstrumentationWorkflowActivities::construct(logger);
        using (var activity = workflowActivities.ResetToDraftContext())
        {
            switch(_record.TableId)
            {
                case tableNum(TrvExpTable):
                    TrvExpTable trvExpTableRecord = _record as TrvExpTable;

                    if (trvExpTableRecord.ApprovalStatus != TrvAppStatus::Approved)
                    {
                        logger.LogError(strFmt("Expense report %1 is in %2 status with no workflow workitem", trvExpTableRecord.ExpNumber, trvExpTableRecord.ApprovalStatus));
                    }

                    trvExpTableRecord.ApprovalStatus = TrvAppStatus::Create;
                    trvExpTableRecord.doUpdate();

                    TrvExpTrans trvExpTrans;
                    update_recordset trvExpTrans setting ApprovalStatus = TrvAppStatus::Create
                        where trvExpTrans.TrvExpTable == trvExpTableRecord.RecId
                            && trvExpTrans.ApprovalStatus != TrvAppStatus::Ledger;

                    if (_correlationId)
                    {
                        context = WorkflowContext::newWorkflowContext(curExt(), trvExpTableRecord.TableId, trvExpTableRecord.RecId, _correlationId);
                        workflowEventArgs = WorkflowEventArgs::newWorkflowEventArgs(context);
                        TrvDocumentWorkflowlEventHandler reportEventHandler = new TrvDocumentWorkflowlEventHandler();
                        reportEventHandler.canceled(workflowEventArgs);
                    }
                    //reset project committed cost
                    trvExpTableRecord.resetProjCommittedCost();
                    break;
            
                case tableNum(TrvCashAdvance):
                    TrvCashAdvance trvCashAdvanceRecord = _record as TrvCashAdvance;

                    if (trvCashAdvanceRecord.CashAdvanceStatus != TrvWorkflowCashAdvanceStatus::Approved)
                    {
                        logger.LogError(strFmt("Expense report %1 is in %2 status with no workflow workitem", trvCashAdvanceRecord.CashAdvanceNumber, trvCashAdvanceRecord.CashAdvanceStatus));
                    }

                    trvCashAdvanceRecord.CashAdvanceStatus = TrvWorkflowCashAdvanceStatus::Created;
                    trvCashAdvanceRecord.doUpdate();
                    break;

                case tableNum(TrvRequisitionTable):
                    TrvRequisitionTable trvRequisitionTableRecord = _record as TrvRequisitionTable;

                    if (trvRequisitionTableRecord.ApprovalStatus != TrvRequisitionApprovalStatus::Approved)
                    {
                        logger.LogError(strFmt("Expense report %1 is in %2 status with no workflow workitem", trvRequisitionTableRecord.RequisitionNumber, trvRequisitionTableRecord.ApprovalStatus));
                    }

                    trvRequisitionTableRecord.ApprovalStatus = TrvRequisitionApprovalStatus::Create;
                    trvRequisitionTableRecord.doUpdate();

                    if (_correlationId)
                    {
                        context = WorkflowContext::newWorkflowContext(curExt(), trvRequisitionTableRecord.TableId, trvRequisitionTableRecord.RecId, _correlationId);
                        workflowEventArgs = WorkflowEventArgs::newWorkflowEventArgs(context);
                        TrvWorkflowEventHandler requisitionEventHandler = new TrvWorkflowEventHandler();
                        requisitionEventHandler.canceled(workflowEventArgs);
                    }
                    //reset project committed cost
                    trvRequisitionTableRecord.resetProjCommittedCost();
                    break;

                default:
                    break;
            }
        }       
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyLinesPosted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if all lines are posted in the report or some lines are posted based on a kill switch.
    /// </summary>
    /// <remarks>
    /// Kill switch is enabled by default.
    /// </remarks>
    /// <returns></returns>
    private static boolean verifyLinesPosted(TrvExpTable _trvExpTable)
    {
        boolean ret;
        if (TrvWorkFlowStatusResetFlight::instance().isEnabled())
        {
            ret = _trvExpTable.allLinesPosted();
        }
        else
        {
            ret = _trvExpTable.anyPostedLines();
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>