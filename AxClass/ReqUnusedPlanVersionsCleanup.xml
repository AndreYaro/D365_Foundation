<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqUnusedPlanVersionsCleanup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ReqUnusedPlanVersionsCleanup extends RunBaseBatch implements BatchRetryable
{
    private ReqBackgroundJobService backgroundJobService;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>backgroundJobService</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Exposes the instance of the <c>ReqBackgroundJobService</c> class.
    /// </summary>
    /// <returns>
    ///     The instance of the <c>ReqBackgroundJobService</c> class.
    /// </returns>
    public ReqBackgroundJobService backgroundJobService()
    {
        if (!backgroundJobService)
        {
            backgroundJobService = ReqBackgroundJobService::newBatchHeader();
        }
        return backgroundJobService;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    protected boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS333776";
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
        setPrefix(this.caption());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        if (appl.ttsLevel() > 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        try
        {
            this.cleanupPlans();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
            else
            {
                throw Exception::Deadlock;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() < #RetryNum)
            {
                retry;
            }
            
            throw Exception::UpdateConflictNotRecovered;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupPlans</Name>
				<Source><![CDATA[
    private void cleanupPlans()
    {
        if (this.isMasterPlanningRunning())
        {
            warning(strFmt("@SCM:ReqProcessStatusRunning", "@SYS25297"));
            return;
        }

        ReqPlan plan;
        while select plan 
            where plan.PlanType == ReqPlanType::SchedPlan
        {
            ReqPlanVersion reqPlanVersion = this.getFirstInactivePlanVersion(Plan);
            ReqPlanVersionCleanup cleanup = ReqPlanVersionCleanup::newPlanVersionId(reqPlanVersion.RecId);
            cleanup.parmTriggeredBy(classStr(ReqUnusedPlanVersionsCleanup));
            cleanup.runOperation();
        }

        ReqPlanVersionCleanup cleanup = ReqPlanVersionCleanup::newCleanupOfOrphanedVersions();
        cleanup.parmTriggeredBy(classStr(ReqUnusedPlanVersionsCleanup));
        cleanup.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstInactivePlanVersion</Name>
				<Source><![CDATA[
    private ReqPlanVersion getFirstInactivePlanVersion(ReqPlan plan)
    {
        ReqPlanVersion reqPlanVersion;
        select firstonly reqPlanVersion
            where reqPlanVersion.ReqPlanId == plan.ReqPlanId
                && reqPlanVersion.ReqPlanDataAreaId == plan.DataAreaId
                && ReqPlanVersion.Active == NoYes::No;

        return reqPlanVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMasterPlanningRunning</Name>
				<Source><![CDATA[
    private boolean isMasterPlanningRunning()
    {
        ReqPlan plan;
        while select plan
            where plan.PlanType == ReqPlanType::SchedPlan
        {
            if (ReqPlanManager::isLockedNoThrow(plan.ReqPlanId))
            {
                return true;
            }
        }
        
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqUnusedPlanVersionsCleanup construct()
    {
        return new ReqUnusedPlanVersionsCleanup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        ReqUnusedPlanVersionsCleanup ReqUnusedPlanVersionsCleanup = ReqUnusedPlanVersionsCleanup::construct();
        ReqUnusedPlanVersionsCleanup.getLast();

        if (!ReqUnusedPlanVersionsCleanup.prompt())
        {
            return;
        }

        ReqUnusedPlanVersionsCleanup.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>