<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsPackForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WhsPackForm</c> class contains the business logic of the <c>WhsPack</c> form.
/// </summary>
public class WhsPackForm
{
    NumberOfRecords numContainers;
    Qty             containerQty;
    Weight          containerWeight;
    int             itemCount;
    Object          packForm;

    private WHSTmpPackingLine   tmpPackingLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check that shipmentId is valid corresponding to the LPOrShipmentId.
    /// </summary>
    /// <param name="_LPOrShipmentId">
    /// Target License Plate Id to Shipment Id.
    /// </param>
    /// <param name="_shipmentId">
    /// Shipment Id.
    /// </param>
    /// <returns>
    /// true if valid; otherwise, false.
    /// </returns>
    public boolean checkShipmentId(WHSTargetLicensePlateId _LPOrShipmentId, WHSShipmentID _shipmentId)
    {
        WHSWorkTable            workTable;
        WHSWorkLine             workLine;
        boolean                 ret = true;

        if (!_LPOrShipmentId)
        {
            if (!WHSShipmentTable::exist(_shipmentId))
            {
                ret = checkFailed("@WAX1081");
            }
        }
        else if (_LPOrShipmentId && _shipmentId)
        {
            if (WHSShipmentTable::exist(_LPOrShipmentId) && WHSShipmentTable::exist(_shipmentId))
            {
                if (_LPOrShipmentId != _shipmentId)
                {
                    ret = checkFailed("@WAX1081");
                }
            }
            else
            {
                select firstonly workLine
                    where workLine.ShipmentId == _shipmentId
                        && workLine.WorkStatus != WHSWorkStatus::Cancelled
                    join workTable
                    where workTable.WorkId == workLine.WorkId;

                WHSLicensePlateId validTargetLPId;

                if (workLine)
                {
                    if (workTable.isOriginForConsolidatedWork())
                    {
                        validTargetLPId = WHSWorkTable::findLastConsolidatedWork(workLine).TargetLicensePlateId;
                    }
                    else
                    {
                        validTargetLPId = workTable.TargetLicensePlateId;
                    }
                }

                if (validTargetLPId !=  _LPOrShipmentId)
                {
                    ret = checkFailed("@WAX1081");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonAddContainer_clicked</Name>
				<Source><![CDATA[
    /// <summary>
	/// Creates a new container when Add Container button is clicked.
	/// </summary>
	/// <param name="_whsPackProfile">
	/// Packing profile of the container.
	/// </param>
	/// <param name="_element">
	/// Form object.
	/// </param>
	/// <param name="_shipmentId">
	/// Shipment id of the container.
	/// </param>
	/// <param name="_containerId">
	/// Form string control containing container id inputted by user.
	/// </param>
	/// <param name="_containerTypeCode">
	/// Form string control containing container type code inputted by user.
    /// </param>
    /// <param name="_closeContainerProfileId">
    /// The close container profile ID.
    /// </param>
    /// <param name="_containerGroupingLicensePlateId">
    /// Container grouping license plate id; optional.
    /// </param>
    /// <param name="_containerLocation">
    /// Container location; optional.
    /// </param>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when container id and container type code is not defined.
	/// </exception>
    public void buttonAddContainer_clicked(
        WHSPackProfile                      _whsPackProfile,
        Object                              _element,
        WHSShipmentId                       _shipmentId,
        FormStringControl                   _containerId,
        FormStringControl                   _containerTypeCode,
        WHSCloseContainerProfileId          _closeContainerProfileId,
        WHSContainerGroupingLicensePlateId  _containerGroupingLicensePlateId    = '',
        WMSLocation							_containerLocation					= null)
    {
        WHSContainerId          newContainerId;
        WHSContainerTypeCode    newContainerTypeCode;
        FormRun                 createContainerDlg;
        Object                  createContainerDlgObj;
        Args                    args = new Args();

        args.name(formStr(WHSContainerCreateDialog));
        args.record(_whsPackProfile);
        createContainerDlg = classfactory.formRunClass(args);
        createContainerDlg.init();
        createContainerDlg.run();
        createContainerDlg.wait();

        if (createContainerDlg.closedOk())
        {
            createContainerDlgObj = createContainerDlg;
            newContainerId = createContainerDlgObj.parmNewContainerId();
            newContainerTypeCode = createContainerDlgObj.parmNewContainerTypeCode();

            WHSWorker worker = WHSWorker::findByWorker();
            WHSCreateContainerParameters createContainerParameters = WHSCreateContainerParameters::createFromParameters(
                _shipmentId,
                newContainerId,
                newContainerTypeCode,
                _closeContainerProfileId,
                _containerGroupingLicensePlateId,
                _containerLocation,
                _whsPackProfile.PrintContainerLabel,
                '',
                worker.RecId);
            WHSContainerTable::createContainerWithParameters(createContainerParameters);

            _containerId.text(newContainerId);
            _containerTypeCode.text(newContainerTypeCode);

            _element.updateSummaryFields();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonCloseContainer_clicked</Name>
				<Source><![CDATA[
    /// <summary>
	/// Closes container when button is clicked.
	/// </summary>
	/// <param name="_shipmentId">
	/// Shipment id of the container.
	/// </param>
	/// <param name="_containerId">
	/// Container id.
	/// </param>	
    public void buttonCloseContainer_clicked(WHSShipmentId _shipmentId, WHSContainerId _containerId)
    {
        Args args = new Args();
        args.name(formStr(WHSContainerCloseDiag));
        args.record(WHSContainerTable::find(_shipmentId, _containerId));
        args.caller(packForm);

        FormRun closeContainer = classfactory.formRunClass(args);
        closeContainer.init();
        closeContainer.run();

        if (!closeContainer.closed())
        {
            closeContainer.wait();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCloseContainerButtonBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the close container button should be enabled.
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment id of the container.
    /// </param>
    /// <param name="_openContainerContainerPackingPolicyId">
    /// Container packing policy id for the opened container.
    /// </param>
    /// <param name="_isContainerManifestRequirementsChecked">
    /// Is container manifest requirements field checked?
    /// </param>
    /// <returns>
    /// True if the close container button should be enabled; otherwise false;
    /// </returns>
    public boolean shouldCloseContainerButtonBeEnabled(
        WHSShipmentId               _shipmentId,
        WHSCloseContainerProfileId  _openContainerContainerPackingPolicyId,
        boolean                     _isContainerManifestRequirementsChecked)
    {
        WHSCloseContainerProfile openContainerContainerPackingPolicy = WHSCloseContainerProfile::find(_openContainerContainerPackingPolicyId);

        boolean ret = _shipmentId
            && this.parmContainerQty() > 0
            && ((openContainerContainerPackingPolicy.ManifestAtContainerClose
            &&   (openContainerContainerPackingPolicy.ManifestRequirementsForContainer == WHSManifestRequirement::Manual
            ||    openContainerContainerPackingPolicy.ManifestRequirementsForContainer == WHSManifestRequirement::TransportationManagement))
            ||  _isContainerManifestRequirementsChecked);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldContainerGroupingLicensePlateIdFieldBeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the container grouping license plate id field should be enabled.
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment id of the container.
    /// </param>
    /// <param name="_packingStationContainerPackingPolicy">
    /// Container packing policy for the packing station.
    /// </param>
    /// <returns>
    /// true if the container grouping license plate id should be enabled; otherwise, false;
    /// </returns>
    public boolean shouldContainerGroupingLicensePlateIdFieldBeEnabled(
        WHSShipmentId               _shipmentId,
        WHSCloseContainerProfile    _packingStationContainerPackingPolicy)
    {
        boolean ret = true;

        if (_packingStationContainerPackingPolicy
            && (_packingStationContainerPackingPolicy.AutoReleaseContainerAtContainerClose == WHSAutoReleaseContainerAtContainerClose::Always
                || _packingStationContainerPackingPolicy.ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::None
                || _packingStationContainerPackingPolicy.ContainerClosingWorkCreationProcess == WHSWarehouseContainerClosingWorkCreationProcess::AssignContainerToSortPosition))
        {
            ret = false;
        }
        else if (!_shipmentId)
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonPack_clicked</Name>
				<Source><![CDATA[
    /// <summary>
	/// Packs an item with given quantity into a selected container.
	/// </summary>
	/// <param name="_containerId">
	/// Id of the container.
	/// </param>
	/// <param name="_itemId">
	/// Item id to be packed.
	/// </param>
	/// <param name="_qty">
	/// Quantity of the item to be packed.
	/// </param>
	/// <param name="_whsTmpPackingLine">
	/// Temporary packing line record to store packing status.
	/// </param>
    /// <param name="_inventDimId">
    /// The inventory dimension used for the criteria which must be met by the item being packed.
    /// </param>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when container is not selected.
	/// </exception>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when item is not selected.
	/// </exception>
	/// <exception cref="Exception::Error">
	/// Exception is thrown when quantity defined is less than or equal to zero.
	/// </exception>
    public void buttonPack_clicked(
        WHSContainerId      _containerId,
        ItemId              _itemId,
        Qty                 _qty,
        WHSTmpPackingLine   _whsTmpPackingLine,
        InventDimId         _inventDimId = '')
    {
        if (!_containerId)
        {
            throw error("@WAX1441");
        }

        if (!_itemId)
        {
            throw error("@WAX1436");
        }

        if (_qty <= 0)
        {
            throw error("@WAX2221");
        }

        tmpPackingLine = _whsTmpPackingLine;

        if (_inventDimId) 
        {
            InventDim inventDimCriteria = InventDim::find(_inventDimId);
            this.packItem(_containerId,
                          _itemId,
                          _qty,
                          inventDimCriteria);
        }
        else 
        {
            Qty itemTotalRemainingQuantity = this.calcRemainingQuantityForItemId(_itemId);

            if (_qty == itemTotalRemainingQuantity)
            {
                this.packAllItemLines(_itemId, _containerId);
            }
            else
            {
                this.packItemLines(_itemId, _qty, _containerId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs selected item with given quantity into selected container.
    /// </summary>
    /// <param name = "_containerId">The container id.</param>
    /// <param name = "_itemId">The item id.</param>
    /// <param name = "_qty">The quantity of the item to be packed.</param>
    /// <param name = "_inventDimCriteria">The inventory dimension criteria which must be met by the inventory being packed.</param>
    private void packItem(
        WHSContainerId      _containerId,
        ItemId              _itemId,
        Qty					_qty,
        InventDim           _inventDimCriteria)
    {
        InventHandlingUnitId	unitId = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);
        boolean                 packingLineByTag = WHSInventTable::isCatchWeightTagTracked(_itemId);

        if (this.validateWeight(_containerId, tmpPackingLine.ShipmentId, _itemId, unitId, _qty))
        {
            WHSCatchWeightTagNumber tagNumber;
            WHSTransWeight          capturedWeight;
            InventDim               inventDimCriteriaByTag;

            if (this.mustCaptureWeightAtPackingForCWItem(_itemId))
            {
                if (packingLineByTag)
                {
                    [capturedWeight, tagNumber, inventDimCriteriaByTag] = this.captureWeightForCWItem(_itemId, _inventDimCriteria, _qty, tmpPackingLine.ShipmentId);
                }
                else
                {
                    [capturedWeight, tagNumber] = this.captureWeightForCWItem(_itemId, _inventDimCriteria, _qty, tmpPackingLine.ShipmentId);
                }
            }

            if (packingLineByTag)
            {
                WHSContainerTable::packItemHandlingQty(_itemId, _qty, unitId, _containerId, tmpPackingLine, inventDimCriteriaByTag, capturedWeight, tagNumber);
            }
            else
            {
			    WHSContainerTable::packItemHandlingQty(_itemId, _qty, unitId, _containerId, tmpPackingLine, _inventDimCriteria, capturedWeight, tagNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCaptureWeightAtPackingForCWItem</Name>
				<Source><![CDATA[
    private boolean mustCaptureWeightAtPackingForCWItem(ItemId _itemId)
    {
        return PdsGlobal::pdsIsCWItem(_itemId) && 
            WHSContainerTable::mustCaptureWeightAtPacking(tmpPackingLine.ShipmentId, _itemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimForPacking</Name>
				<Source><![CDATA[
    private InventDim inventDimForPacking(ItemId _itemId, InventDimId _inventDimId)
    {
        InventDim inventDimForPacking = InventDim::find(_inventDimId);
        
        if (!this.mustCaptureWeightAtPackingForCWItem(_itemId))
		{
			inventDimForPacking.clearLocationAndBelowDim(_itemId);
		}

        this.captureAdditionalDimensions(_itemId, inventDimForPacking);

        return inventDimForPacking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>captureAdditionalDimensions</Name>
				<Source><![CDATA[
    private void captureAdditionalDimensions(ItemId _itemId, InventDim _inventDim)
    {
        ListEnumerator le = this.additionalDimensionsToCapture(_itemId, _inventDim).getEnumerator();

        while (le.moveNext())
        {
            FieldId dimField = le.current();

            WHSInventDimFieldCapture inventDimFieldCapture = WHSInventDimFieldCapture::newStandard(dimField, _itemId);
            _inventDim.(dimField) = inventDimFieldCapture.getInventDim().(dimField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalDimensionsToCapture</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list of additional dimensions to capture from the user.
    /// </summary>
    /// <param name = "_itemId">The item id.</param>
    /// <param name = "_inventDim">An <c>InventDim</c> record with the already known dimensions.</param>
    /// <returns>A list with <c>InventDim</c> field IDs.</returns>
    protected List additionalDimensionsToCapture(ItemId _itemId, InventDim _inventDim)
    {
        if (_inventDim.RecId == 0)
        {
            return EcoResProductDimensionGroupProduct::findByProduct(InventTable::find(_itemId).Product).activeProductDimensions();
        }

        return new List(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRemainingQuantityForItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates remaining (not packed) quantity for the specified item id.
    /// </summary>
    /// <param name = "_packingItemId">The item id.</param>
    /// <returns>The remaining quantity.</returns>
    private Qty calcRemainingQuantityForItemId(ItemId _packingItemId)
    {
        WHSTmpPackingLine localTmpPackingLine;
        localTmpPackingLine.setTmpData(tmpPackingLine);

        select firstonly sum(QtyRemaining) from localTmpPackingLine
            where localTmpPackingLine.ItemId == _packingItemId
                && localTmpPackingLine.QtyRemaining > 0;

        return localTmpPackingLine.QtyRemaining;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packAllItemLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs all <c>WHSTmpPackingLine</c> lines for the specified item into specified container.
    /// </summary>
    /// <param name = "_packingItemId">The item id.</param>
    /// <param name = "_containerId">The container id.</param>
    private void packAllItemLines(ItemId _packingItemId, WHSContainerId _containerId)
    {
        WHSTmpPackingLine localTmpPackingLine;
        localTmpPackingLine.setTmpData(tmpPackingLine);

        while select localTmpPackingLine
            where localTmpPackingLine.ItemId == _packingItemId
                && localTmpPackingLine.QtyRemaining > 0
        {

            InventDim inventDimCriteria = InventDim::find(localTmpPackingLine.InventDimId);

            this.packItem(_containerId,
                          localTmpPackingLine.ItemId,
                          localTmpPackingLine.QtyRemaining,
                          inventDimCriteria);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packItemLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs given quantity of item.
    /// </summary>
    /// <param name = "_itemId">The item id.</param>
    /// <param name = "_qty">The quantity of the item to be packed.</param>
    /// <param name = "_containerId">The container id.</param>
    private void packItemLines(
        ItemId          _itemId,
        Qty             _qty,
        WHSContainerId  _containerId)
    {
        InventDimId inventDimId         = this.getUniqueProductDimsInventDimIdOfPackingLinesForItem(_itemId);
        InventDim   inventDimCriteria   = this.inventDimForPacking(_itemId, inventDimId);

        this.packItem(_containerId,
                      _itemId,
                      _qty,
                      inventDimCriteria);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniqueProductDimsInventDimIdOfPackingLinesForItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the invent dimension id for the specified item among the temporary packing lines
	/// if the product inventory dimensions on the packing lines for the item id are all the same.
    /// </summary>
    /// <param name = "_itemId">The item id.</param>
    /// <returns>The invent dimension id if the product inventory dimensions are the same across packing lines for the item;otherwise, empty invent dimension id.</returns>
    private InventDimId getUniqueProductDimsInventDimIdOfPackingLinesForItem(ItemId _itemId)
    {
        WHSTmpPackingLine localTmpPackingLine;
        localTmpPackingLine.setTmpData(tmpPackingLine);
        
        InventDimParm productDims = InventDimParm::allProductDim();
        InventDimParm dimParmNoBlanksAllowed;
        inventDim inventDimFirst;
        inventDim inventDim;

        select firstonly localTmpPackingLine
            where localTmpPackingLine.ItemId == _itemId
                && localTmpPackingLine.QtyRemaining > 0
            join inventDimFirst
                where inventDimFirst.inventDimId == localTmpPackingLine.InventDimId;

        select firstonly RecId from localTmpPackingLine
            where localTmpPackingLine.ItemId == _itemId
                && localTmpPackingLine.QtyRemaining > 0
            exists join inventDim
                where inventDim.inventDimId == localTmpPackingLine.InventDimId
                    && !(#InventDimRanges(inventDimFirst, inventDim, productDims, dimParmNoBlanksAllowed));
        
        if (localTmpPackingLine)
        {
            return '';
        }

        return inventDimFirst.inventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventSerialId</Name>
				<Source><![CDATA[
    /// <summary>
	/// Asks user to enter serial id of the item.
	/// </summary>
	/// <param name="_itemId">
	/// Item id.
	/// </param>
	/// <returns>
	/// The serial id of the item.
	/// </returns>
	/// <remarks>
	/// Inserts the serial id to database if it does not exist.
	/// </remarks>
    public InventSerialId getInventSerialId(ItemId _itemId)
    {
        Dialog          dialog;
        DialogField     dfSerialId;
        WHSSerialId     serialId;
        InventSerial    inventSerial;

        dialog = new Dialog();
        dialog.caption("@WAX2115");
        dialog.windowType(FormWindowType::PopUp);

        dfSerialId = dialog.addField(extendedTypeStr(WHSSerialId));

        if (dialog.run())
        {
            serialId = dfSerialId.value();
        }

        if (!InventSerial::exist(serialId, _itemId))
        {
            ttsbegin;
            inventSerial.InventSerialId = serialId;
            inventSerial.ItemId         = _itemId;

            if (!inventSerial.validateWrite())
            {
                throw error(strFmt("@WAX:WHSCannotInsertRecordInTable", tablePName(InventSerial)));
            }
            else
            {
                inventSerial.insert();
            }

            ttscommit;
        }

        return serialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerQty</Name>
				<Source><![CDATA[
    public Qty parmContainerQty(Qty _containerQty = containerQty)
    {
        containerQty = _containerQty;

        return containerQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContainerWeight</Name>
				<Source><![CDATA[
    public Weight parmContainerWeight(Weight _containerWeight = containerWeight)
    {
        containerWeight = _containerWeight;

        return containerWeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemCount</Name>
				<Source><![CDATA[
    public int parmItemCount(int _itemCount = itemCount)
    {
        itemCount = _itemCount;

        return itemCount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNumContainers</Name>
				<Source><![CDATA[
    public NumberOfRecords parmNumContainers(NumberOfRecords _numContainers = numContainers)
    {
        numContainers = _numContainers;

        return numContainers;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackForm</Name>
				<Source><![CDATA[
    public Object parmPackForm(Object _packForm = packForm)
    {
        packForm = _packForm;

        return packForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetForm</Name>
				<Source><![CDATA[
    /// <summary>
	/// Resets shipment notes.
	/// </summary>
	/// <param name="_shipmentId">
	/// Shipment id.
	/// </param>
	/// <returns>
	/// The shipment notes.
	/// </returns>
    str resetForm(WHSShipmentId _shipmentId)
    {
        return WhsPackForm::generateShipmentNote(_shipmentId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateShipmentNote</Name>
				<Source><![CDATA[
    public static str generateShipmentNote(WHSShipmentId _shipmentId)
    {
        str                 shipmentNotes;

        //we expect this one to be in cache so we split the SQL in two so the docuref select is done based on the best index
        WHSShipmentTable shipmentTable = WHSShipmentTable::find(_shipmentId);

        if (shipmentTable.RecId)
        {
            DocuRef docuRef;
            while select Notes from docuRef
                where docuRef.TypeId == WHSParameters::find().PackingScreenNoteType
                    && docuRef.RefCompanyId == shipmentTable.DataAreaId
                    && docuRef.RefTableId == shipmentTable.TableId
                    && docuRef.RefRecId == shipmentTable.RecId
            {
                shipmentNotes += docuRef.Notes + '\n';
            }
        }

        return shipmentNotes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentIdsByTargetLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns shipment IDs related to works with the given target license plates IDs.
    /// </summary>
    /// <param name = "_targetLicensePlateId">Target license plate ID</param>
    /// <returns>
    /// A container of a packed set of shipment IDs and the most recent shipment ID.
    /// </returns>
    [Hookable(false)]
    internal container getShipmentIdsByTargetLicensePlate(WHSTargetLicensePlateId _targetLicensePlateId)
    {
        boolean       shipmentQueryEvaluated = false;
        WHSShipmentId mostRecentShipmentId;
        WhsShipmentid mostRecentNotShippedShipmentId;
        Set           shipmentIdSet = new Set(Types::String);
        WHSWorkTable  workTable;        

        while select workTable
            order by workTable.WorkClosedUTCDateTime desc
            where workTable.TargetLicensePlateId == _targetLicensePlateId
                && workTable.WorkStatus <= WHSWorkStatus::Closed
        {
            if (workTable.isOriginForConsolidatedWork())
            {
                continue;
            }
            else if (workTable.HasWorkLineLoadLineDetails)
            {
                WHSLoadLine loadLine;
                QueryRun queryRun = new QueryRun(WHSWorkLineLoadLineDetails::buildQueryFromWorkIdGroupByShipmentId(workTable.WorkId));
                
                while (queryRun.next())
                {
                    loadLine = queryRun.get(tableNum(WHSLoadLine));

                    if (!mostRecentNotShippedShipmentId && !shipmentIdSet.in(loadLine.ShipmentId) && this.isShipmentInProcess(loadLine.ShipmentId))
                    {
                        mostRecentNotShippedShipmentId = loadLine.ShipmentId;
                    }

                    shipmentIdSet.add(loadLine.ShipmentId);
                    
                    if (!mostRecentShipmentId)
                    {
                        mostRecentShipmentId = loadLine.ShipmentId;
                    }
                }
            }
            else if (!shipmentQueryEvaluated)
            {
                WHSWorkLine workLine;
                var shipmentQuery = this.buildQueryForShipmentFromTargetLicensePlate(workLine, _targetLicensePlateId);
                var shipmentSearchObject = new SysDaSearchObject(shipmentQuery);
                var shipmentSearch = new SysDaSearchStatement();
                while (shipmentSearch.next(shipmentSearchObject))
                {
                    shipmentIdSet.add(workLine.ShipmentId);
                    if (!mostRecentNotShippedShipmentId && this.isShipmentInProcess(workLine.ShipmentId))
                    {
                        mostRecentNotShippedShipmentId = workLine.ShipmentId;
                    }
                    
                    if (!mostRecentShipmentId)
                    {
                        mostRecentShipmentId = workLine.ShipmentId;
                    }
                }

                shipmentQueryEvaluated = true;
            }
        }

        return [shipmentIdSet.pack(), mostRecentNotShippedShipmentId != '' ? mostRecentNotShippedShipmentId : mostRecentShipmentId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShipmentInProcess</Name>
				<Source><![CDATA[
    private boolean isShipmentInProcess(WHSShipmentId _shipmentId)
    {
        boolean ret;
        if (_shipmentId)
        {
            WHSShipmentTable shipment = WHSShipmentTable::find(_shipmentId);
          
            if (shipment.ShipmentStatus != WHSShipmentStatus::Shipped && shipment.ShipmentStatus != WHSShipmentStatus::Loaded)
            {
                ret = true;
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShipmentId</Name>
				<Source><![CDATA[
    /// <summary>
	/// Finds shipment id from target license plate.
	/// </summary>
	/// <param name="_value">
	/// Target license plate id.
	/// </param>
	/// <returns>
	/// A container with shipment id and a flag indicating if multiple shipments exist.
	/// </returns>
    container getShipmentId(WHSTargetLicensePlateId  _value)
    {
        WHSShipmentId   shipmentId;
        boolean         multiShipments = false;

        if (WHSShipmentTable::exist(_value))
        {
            shipmentId = _value;
        }
        else
        {
            container packedShipmentIdSet;
            [packedShipmentIdSet, shipmentId] = this.getShipmentIdsByTargetLicensePlate(_value);
            multiShipments = Set::create(packedShipmentIdSet).elements() > 1;

            return [shipmentId, multiShipments];
        }

        return [shipmentId, multiShipments];
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForShipmentFromTargetLicensePlate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query for shipment based on target license plate. 
    /// </summary>
    /// <param name = "_workLine">The work line record.</param>
    /// <param name = "_targetLicensePlateId">The target license plate.</param>
    /// <returns>The <c>SysDaQueryObject</c> instantiated query object.</returns>
    protected SysDaQueryObject buildQueryForShipmentFromTargetLicensePlate(
        WHSWorkLine             _workLine,
        WHSTargetLicensePlateId _targetLicensePlateId)
    {
        WHSWorkTable     workTable;
        WHSShipmentTable shipmentTable;
        
        SysDaQueryObject workLineQueryObject = new SysDaQueryObject(_workLine);
        workLineQueryObject.projection().add(fieldStr(WHSWorkLine, ShipmentId));
        workLineQueryObject.whereClause(
            new SysDaNotEqualsExpression(
                new SysDaFieldExpression(_workLine, fieldStr(WHSWorkLine, WorkStatus)),
                new SysDaValueExpression(WHSWorkStatus::Cancelled)));

        SysDaQueryObject workTableQueryObject = new SysDaQueryObject(workTable);
        workTableQueryObject.orderByClause().addDescending(fieldStr(WHSWorkTable, WorkClosedUTCDateTime));
        workTableQueryObject.projection().add(fieldStr(WHSWorkTable, TableId));

        SysDaQueryExpression workTableWhereClause = new SysDaEqualsExpression(
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, WorkId)),
                new SysDaFieldExpression(_workLine, fieldStr(WHSWorkLine, WorkId)))
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, TargetLicensePlateId)),
                new SysDaValueExpression(_targetLicensePlateId)));

        WHSWorkTable outboundWork = WHSPackingWorkHelper::findOutboundWorkByTargetLicensePlate(_targetLicensePlateId);

        if (outboundWork
            && WHSPackingWorkHelper::connectedPackingWorkExists(outboundWork.WorkId))
        {
            workTableWhereClause = workTableWhereClause.and(new SysDaEqualsExpression(
                new SysDaFieldExpression(workTable, fieldStr(WHSWorkTable, WorkTransType)),
                new SysDaValueExpression(WHSWorkTransType::Packing)));
        }

        workTableQueryObject.whereClause(workTableWhereClause);
       
        workLineQueryObject
            .joinClause(SysDaJoinKind::InnerJoin, workTableQueryObject);

        SysDaQueryObject shipmentTableQueryObject = new SysDaQueryObject(shipmentTable);
        shipmentTableQueryObject.projection().add(fieldStr(WHSShipmentTable, TableId));
      
        shipmentTableQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(shipmentTable, fieldStr(WHSShipmentTable, ShipmentId)),
                new SysDaFieldExpression(_workLine, fieldStr(WHSWorkLine, ShipmentId)))
            .and(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(shipmentTable, fieldStr(WHSShipmentTable, LoadDirection)),
                new SysDaValueExpression(WHSLoadDirection::Outbound))));
        workTableQueryObject
            .joinClause(SysDaJoinKind::ExistsJoin, shipmentTableQueryObject);

        return workLineQueryObject;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSummaryFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates summary fields on Pack screen.
    /// </summary>
    /// <param name="_shipmentId">
    /// Shipment id.
    /// </param>
    /// <param name="_containerId">
    /// Container id.
    /// </param>
    public void updateSummaryFields(
        WHSShipmentId  _shipmentId,
        WHSContainerId _containerId)
    {
        WHSContainerTable   containerTable;
        WHSContainerLine    containerLine;
        int                 itemCountLocal = 0;

        select count(RecId) from containerTable
            where containerTable.ShipmentId == _shipmentId;

        select sum(Qty) from containerLine
            where containerLine.ShipmentId      == _shipmentId
                && containerLine.ContainerId    == _containerId;

        this.parmNumContainers(containerTable.RecId);
        this.parmContainerQty(containerLine.Qty);

        select firstonly Weight from containerTable
            where containerTable.ContainerId == _containerId;

        this.parmContainerWeight(containerTable.Weight);

        while select containerLine
            group by containerLine.ItemId
            where containerLine.ContainerId == _containerId
        {
            ++itemCountLocal;
        }

        this.parmItemCount(itemCountLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the additional item being packed doesn't exceed the container weight limit.
    /// </summary>
    /// <param name="_containerId">
    /// The container Id of the container being packed into.
    /// </param>
    /// <param name="_shipmentId">
    /// The shipment Id of the container being packed into.
    /// </param>
    /// <param name="_itemId">
    /// The item Id of the item being packed.
    /// </param>
    /// <param name="_unitId">
    /// The invent unit of measure of the item being packed.
    /// </param>
    /// <param name="_qty">
    /// The quantity being packed of the item.
    /// </param>
    /// <returns>
    /// true if the item can be packed without exceeding the weight limit; otherwise, false.
    /// </returns>
    [SysObsolete('This method is obsolete. Please use WHSContainerPackingValidator.validateWeight() as extention point instead.', false, 27\07\2022)]
    public boolean validateWeight(
        WHSContainerId      _containerId,
        WHSShipmentId       _shipmentId,
        ItemId              _itemId,
        UnitOfMeasureSymbol _unitId,
        InventQty           _qty)
    {
        WHSContainerPackingValidator validator = new WHSContainerPackingValidator();
        return validator.validateWeight(_containerId, _shipmentId, _itemId, _unitId, _qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>whsContainerTable_clicked</Name>
				<Source><![CDATA[
    /// <summary>
	/// Open <c>WHSContainerTable</c> form with the containers of a shipment.
	/// </summary>
	/// <param name="_whsShipmentTable">
	/// Shipment record that has containers.
	/// </param>
	/// <param name="_shipmentId">
	/// Shipment id.
	/// </param>
    void whsContainerTable_clicked(WHSShipmentTable  _whsShipmentTable,
                                   WHSShipmentId     _shipmentId)
    {
        FormRun     formRun;
        Args        args = new Args();

        args.name(formStr(WHSContainerTable));
        args.record(_whsShipmentTable);

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>captureWeightForCWItem</Name>
				<Source><![CDATA[
    private container captureWeightForCWItem(
        ItemId				_itemId,
        InventDim			_prodDim,
        InventHandlingQty	_inventHandlingQty,
        WHSShipmentId		_shipmentId)
    {
        boolean             isCWTagTracked = WHSInventTable::isCatchWeightTagTracked(_itemId);
        WHSCapturedWeight	capturedWeight;
        WHSCatchWeightTag	tag;
        RecId				refRecId ;
        InventDim           packingDim;
        boolean             packingLineByTag = isCWTagTracked;

        DictField dictField = isCWTagTracked
            ? new DictField(tableNum(WHSCatchWeightTag), fieldNum(WHSCatchWeightTag, TagNumber))
            : new DictField(tableNum(WHSContainerLine), fieldNum(WHSContainerLine, CapturedWeight));

        if (_inventHandlingQty > 1)
        {
            throw error(strFmt("@WAX:Error_WHSPackFormItemCaptureWeightForCWItem", _itemId));
        }

        Dialog dialog = new Dialog();
        dialog.caption(strFmt("@WAX5508", dictField.label()));
        dialog.windowType(FormWindowType::PopUp);

        DialogField dfWeight = dialog.addField(extendedTypeId2name(dictField.typeId()));

        if (dialog.run())
        {
            str cwValue = dfWeight.value();

            if (isCWTagTracked)
            {
                packingDim = InventDim::findOrCreate(_prodDim);
                
                tag = WHSCatchWeightTag::find(cwValue);

                if (tag && tag.ItemId == _itemId && packingLineByTag)
                {
                    InventDimId inventDimId = this.getUniqueProductDimsInventDimIdOfPackingLinesForTag(tag);
                    InventDim   prodDim     = this.inventDimForPacking(_itemId, inventDimId);

                    packingDim = InventDim::findOrCreate(prodDim);
                }

                if (!cwValue || !tag)
                {
                    throw error("@WAX:CatchWeightTagInvalidTagNumber");
                }
                else if (tag.ItemId != _itemId
                    || !this.isInventDimEqual(tag, packingDim))
                {
                    throw error("@WAX:CatchWeightTagDoesNotMatchItemOrProductDim");
                }
                else if (WHSCatchWeightTagRegistration::isCWTagTiedToContainer(tag.TagNumber))
                {
                    throw error(strFmt("@WAX:CatchWeightTagTiedToContainer", tag.TagNumber));
                }
                
                if (this.validateTagCanBePacked(cwValue, _shipmentId, _itemId))
                {
                    capturedWeight = tag.CapturedWeight;
                }
            }
            else
            {
                System.Decimal  enteredWeight;

                var isParsed = System.Decimal::TryParse(
                                        cwValue,
                                        System.Globalization.NumberStyles::Number,
                                        System.Globalization.CultureInfo::CreateSpecificCulture(infolog.language()),
                                        byRef enteredWeight);
                if (!isParsed)
                {
                    throw error("@WAX:Error_WHSPackFormItemCaptureInvalidWeightValue");
                }

                capturedWeight = enteredWeight;
            }
        }

        if (!capturedWeight)
        {
            throw error ("@WAX1080");
        }
        
        if (packingLineByTag)
        {
            return [capturedWeight, tag.TagNumber, packingDim];
        }
        else
        {
            return [capturedWeight, tag.TagNumber];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInventDimEqual</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the tag's inventory dimension with the dimensions of the item being packed.
    /// </summary>
    /// <param name = "_catchWeightTag">Tag to validate.</param>
    /// <param name = "_inventDim">Inventory dimension to compare.</param>
    /// <returns>True if the inventory dimensions are same; otherwise false.</returns>
    private boolean isInventDimEqual(WHSCatchWeightTag _catchWeightTag, InventDim _inventDim)
    {
        InventDim tagInventDim = InventDim::find(_catchWeightTag.InventDimId);
            
        InventDimId packItemInventDimId = WHSCatchWeightTag::inventDimWithTagSpecificDimensions(_inventDim, _catchWeightTag.ItemId);
        InventDim packItemInventDim = InventDim::find(packItemInventDimId);

        // Tags captured at packing are not updated during picking so location and license plate may not be valid
        if (WHSInventTable::catchWeightTagDimensionTrackingMethod(_catchWeightTag.ItemId) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            tagInventDim.WMSLocationId = packItemInventDim.WMSLocationId;
            tagInventDim.LicensePlateId = packItemInventDim.LicensePlateId;
        }

        return InventDim::isInventDimEqual(tagInventDim, packItemInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTagCanBePacked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the tag can be packed.
    /// </summary>
    /// <param name = "_tagNumber">Tag number to validate</param>
    /// <param name = "_shipmentId">Shipment ID</param>
    /// <param name = "_itemId">Item ID of the tag to be packed.</param>
    /// <returns>True, if the tag can be packed; otherwise, false.</returns>
    private boolean validateTagCanBePacked(WHSCatchWeightTagNumber _tagNumber, WHSShipmentId _shipmentId, ItemId _itemId)
    {
        WHSCatchWeightTagLastRegistration lastRegistration = WHSCatchWeightTagLastRegistration::find(_tagNumber);

        if (!WHSCatchWeightTagStatus::isActive(_tagNumber))
        {
            throw error("@WAX:CatchWeightTagIsNotActive");
        }        
                
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniqueProductDimsInventDimIdOfPackingLinesForTag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the invent dimension id for the specified catch weight tag among the temporary packing lines
    /// if the product inventory dimensions on the packing lines for the item id are all the same.
    /// </summary>
    /// <param name = "_tag">The catch weight tag record.</param>
    /// <returns>The invent dimension id if the product inventory dimensions are the same across packing lines for the item;otherwise, empty invent dimension id.</returns>
    private InventDimId getUniqueProductDimsInventDimIdOfPackingLinesForTag(WHSCatchWeightTag _tag)
    {
        WHSTmpPackingLine localTmpPackingLine;
        localTmpPackingLine.setTmpData(tmpPackingLine);
        
        InventDimParm productDims = InventDimParm::allProductDim();
        InventDimParm dimParmNoBlanksAllowed;
        InventDimParm dimParmTag;
        inventDim inventDimFirst;
        inventDim inventDim;
        inventDim inventDimCriteria;

        inventDimCriteria = InventDim::find(_tag.InventDimId);
        
        if (WHSInventTable::catchWeightTagDimensionTrackingMethod(_tag.ItemId) == WHSCatchWeightTagDimensionTrackingMethod::ProductTrackingAndAllStorageDimensions)
        {
            inventDimCriteria.WMSLocationId = '';
            inventDimCriteria.LicensePlateId = '';
        }

        dimParmTag.initFromInventDim(inventDimCriteria);

        select firstonly localTmpPackingLine
            where localTmpPackingLine.ItemId == _tag.ItemId
                && localTmpPackingLine.QtyRemaining > 0
            #InventDimInnerJoin(localTmpPackingLine.InventDimId, inventDimFirst, inventDimCriteria, dimParmTag);

        select firstonly RecId from localTmpPackingLine
            where localTmpPackingLine.ItemId == _tag.ItemId
                && localTmpPackingLine.QtyRemaining > 0
            exists join inventDim
                where inventDim.inventDimId == localTmpPackingLine.InventDimId
                    && !(#InventDimRanges(inventDimFirst, inventDim, productDims, dimParmNoBlanksAllowed));
        
        if (localTmpPackingLine)
        {
            return '';
        }

        return inventDimFirst.inventDimId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>