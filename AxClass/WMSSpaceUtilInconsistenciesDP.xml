<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>wmsSpaceUtilInconsistenciesDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSSpaceUtilInconsistencies</c> class is the Report Data Provider class for the
///    <c>WMSSpaceUtilInconsistencies</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(WMSSpaceUtilInconsistenciesContract))]
public class wmsSpaceUtilInconsistenciesDP extends SRSReportDataProviderBase
{
    WMSSpaceUtilInconsistenciesTmp      wmsSpaceUtilInconsistenciesTmp;
    WMSSpaceUtilInconsistenciesContract localContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addReportRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the query and adds a record to the report output table.
    /// </summary>
    /// <param name="cursor">
    /// The query run holding the current line data.
    /// </param>
    private void addReportRecord(QueryRun cursor)
    {
        WMSSpaceUtilInconsistencies wmsSpaceUtilInconsistencies = cursor.get(tableNum(WMSSpaceUtilInconsistencies));
        WMSStorageLoadUnit wmsStorageLoadUnit = cursor.get(tableNum(WMSStorageLoadUnit));
        InventSite inventSite = cursor.get(tableNum(InventSite));
        InventLocation inventLocation = cursor.get(tableNum(InventLocation));
        EcoResProductTranslations ecoResProductTranslation = cursor.get(tableNum(EcoResProductTranslations));

        wmsSpaceUtilInconsistenciesTmp.clear();

        switch (wmsSpaceUtilInconsistencies.InconsistencyType)
        {
            case WMSSpaceUtilInconsistencyType::Pallet:
            case WMSSpaceUtilInconsistencyType::Volume:
            case WMSSpaceUtilInconsistencyType::Weight:
                wmsSpaceUtilInconsistenciesTmp.InconsistencyGroup = WMSSpaceUtilInconsistencyGroup::MeasureSetup;
                break;

            case WMSSpaceUtilInconsistencyType::DefaultWarehouse:
            case WMSSpaceUtilInconsistencyType::WarehouseItemSetup:
                wmsSpaceUtilInconsistenciesTmp.InconsistencyGroup = WMSSpaceUtilInconsistencyGroup::WarehouseSetup;
                break;
        }

        wmsSpaceUtilInconsistenciesTmp.InconsistencyType = wmsSpaceUtilInconsistencies.InconsistencyType;
        wmsSpaceUtilInconsistenciesTmp.ItemId = wmsSpaceUtilInconsistencies.ItemId;

        wmsSpaceUtilInconsistenciesTmp.LoadUnitName = wmsStorageLoadUnit.Name;
        wmsSpaceUtilInconsistenciesTmp.SiteName = inventSite.Name;
        wmsSpaceUtilInconsistenciesTmp.WarehouseName = inventLocation.Name;
        wmsSpaceUtilInconsistenciesTmp.ProductName = ecoResProductTranslation.ProductName;

        wmsSpaceUtilInconsistenciesTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReportQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the main report query that is used for preparing the table with results for additional
    /// display.
    /// </summary>
    /// <returns>
    /// A query object.
    /// </returns>
    private Query buildReportQuery()
    {
        Query                   query = new Query(queryStr(WMSSpaceUtilizationIncosistencies));
        QueryBuildDataSource    qbds;
        WMSReportSetup          wmsReportSetup;
        Set                     warehouseIds;
        SetEnumerator           setEnumerator;
        str                     warehouseIdsStr;

        qbds = query.dataSourceTable(tableNum(WMSSpaceUtilInconsistencies));

        qbds.addRange(fieldNum(WMSSpaceUtilInconsistencies, wmsReportSetup)).value(queryValue(localContract.parmWMSReportSetup()));

        if (localContract.parmInventSiteId() != "")
        {
            qbds.addRange(fieldNum(WMSSpaceUtilInconsistencies, InventSiteId)).value(queryValue(localContract.parmInventSiteId()));
        }

        if (localContract.parmWMSStorageLoadUnit() > 0)
        {
            qbds.addRange(fieldNum(WMSSpaceUtilInconsistencies, wmsStorageLoadUnit)).value(queryValue(localContract.parmWMSStorageLoadUnit()));
        }

        if (localContract.parmWarehouseId() != "")
        {
            qbds.addRange(fieldNum(WMSSpaceUtilInconsistencies, InventLocationID)).value(queryValue(localContract.parmWarehouseId()));
        }
        else
        {
            // We need to filter the warehouses if we're using workload setup
            wmsReportSetup = WMSReportSetup::find(localContract.parmWMSReportSetup());
            if (wmsReportSetup
                && wmsReportSetup.Type == WMSReportSetupType::Workload)
            {
                warehouseIds = WMSWorkloadCapacityWarehouse::getWarehouseIdsForSetup(wmsReportSetup.RecId);
                setEnumerator = warehouseIds.getEnumerator();

                warehouseIdsStr = SysQuery::valueEmptyString();
                while (setEnumerator.moveNext())
                {
                    warehouseIdsStr += ',' + setEnumerator.current();
                }

                qbds.addRange(fieldNum(WMSSpaceUtilInconsistencies, InventLocationID)).value(warehouseIdsStr);
            }
        }

        if (FeatureStateProvider::isFeatureEnabled(EcoResProductTranslationFallbackFeature::instance()) && EcoResProductParameters::find().UseFallbackTranslation)
        {
            qbds.addRange(fieldNum(EcoResProductTranslations, LanguageId)).value(EcoResProductParametersFallbackLanguage::getSelectedFallbackLanguage());
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSSpaceUtilInconsistenciesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>WMSSpaceUtilInconsistenciesTmp</c> table
    /// </summary>
    /// <returns>
    /// The data fetched from the <c>WMSSpaceUtilInconsistenciesTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(WMSSpaceUtilInconsistenciesTmp))
    ]
    public WMSSpaceUtilInconsistenciesTmp getWMSSpaceUtilInconsistenciesTmp()
    {
        select wmsSpaceUtilInconsistenciesTmp;
        return wmsSpaceUtilInconsistenciesTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class prior processing.
    /// </summary>
    private void initialize()
    {
        localContract = this.parmDataContract() as WMSSpaceUtilInconsistenciesContract;

        if (!localContract)
            throw error(Error::missingParameter(this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun;

        this.initialize();
        queryRun = new QueryRun(this.buildReportQuery());

        while (queryRun.next())
        {
            this.addReportRecord(queryRun);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>