<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCDSSalesOrderLineDefaulter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesCDSSalesOrderLineDefaulter</c> class provides data defaulting logic for sales order lines which are integrated from
/// the Dynamics 365 Sales and originate from a quotation. Quotation line data is hence defaulted to sales order line.
/// </summary>
public class SalesCDSSalesOrderLineDefaulter
{
    private SalesTable salesTable;
    private SalesLine salesLine;
    
    private SalesInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    protected SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable = _salesTable;

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    protected SalesLine parmSalesLine(SalesLine _salesLine = salesLine)
    {
        salesLine = _salesLine;

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkup</Name>
				<Source><![CDATA[
    protected boolean copyMarkup()
    {
        return SalesCDSSalesOrderLineDefaultMarkupFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromQuotationLine</Name>
				<Source><![CDATA[
    internal void defaultFromQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        if (salesLine && _salesQuotationLine)
        {
            using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesCDSSalesOrderDefaultingActivities().defaultLine(salesLine, _salesQuotationLine))
            {
                ttsbegin;

                salesLine.reread();
                salesLine.selectForUpdate(true);
                this.initFromSalesTable(salesTable);
                this.initFromSalesQuotationLine(_salesQuotationLine);
                salesLine.update();

                if (TaxIntegrationUtils::isTaxInformationEnabled())
                {
                    TransTaxInformationHelper::copyTransTaxInformation(_salesQuotationLine, salesLine);
                }

                if (_salesQuotationLine.salesQuotationTable().retailSalesQuotationTable().RetailChannel)
                {
                    SalesQuotationEditLinesForm_Sales_Confir::updateRetailSalesLineFromQuotationLine(_salesQuotationLine, salesLine.RecId);
                    SalesQuotationEditLinesForm_Sales_Confir::createRetailSalesDiscountLineFromQuotationLine(_salesQuotationLine, salesLine);
                }

                if (this.copyMarkup())
                {
                    Markup::delete(salesLine);
                    Markup::copy(false, _salesQuotationLine, salesLine);
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesTable</Name>
				<Source><![CDATA[
    protected void initFromSalesTable(SalesTable _salesTable)
    {
        salesLine.CustomerRef          = _salesTable.CustomerRef;
        salesLine.PurchOrderFormNum    = _salesTable.PurchOrderFormNum;

        salesLine.DlvMode              = _salesTable.DlvMode;
        salesLine.DlvTerm              = _salesTable.DlvTerm;

        if (_salesTable.DeliveryPostalAddress)
        {
            salesLine.setAddressFromSalesTable(_salesTable);
        }

        salesLine.type(_salesTable).initMcrSalesLine(_salesTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationLine</Name>
				<Source><![CDATA[
    protected void initFromSalesQuotationLine(SalesQuotationLine _salesQuotationLine)
    {
        salesLine.DefaultDimension             = salesLine.copyDimension(_salesQuotationLine.DefaultDimension);

        salesLine.setInventDimId(_salesQuotationLine.InventDimId);

        salesLine.BarCode                      = _salesQuotationLine.BarCode;
        salesLine.BarCodeType                  = _salesQuotationLine.BarCodeType;
        salesLine.CustomerRef                  = _salesQuotationLine.CustomerRef;

        salesLine.ConfirmedDlv                 = _salesQuotationLine.ConfirmedDlv;

        salesLine.DeliveryName                 = _salesQuotationLine.DeliveryName;
        if (_salesQuotationLine.DeliveryPostalAddress)
        {
            salesLine.DeliveryPostalAddress    = _salesQuotationLine.DeliveryPostalAddress;
            salesLine.AddressRefRecId          = _salesQuotationLine.AddressRefRecId;
            salesLine.AddressRefTableId        = _salesQuotationLine.AddressRefTableId;
        }

        salesLine.ItemBOMId                    = _salesQuotationLine.ItemBOMId;
        salesLine.ItemRouteId                  = _salesQuotationLine.ItemRouteId;

        salesLine.LedgerDimension              = _salesQuotationLine.LedgerDimension;
        salesLine.LineHeader                   = _salesQuotationLine.LineHeader;
        salesLine.Name                         = _salesQuotationLine.Name;

        salesLine.SalesPrice                   = _salesQuotationLine.SalesPrice;
        salesLine.PriceUnit                    = _salesQuotationLine.PriceUnit;
        salesLine.SalesUnit                    = _salesQuotationLine.SalesUnit;
        salesLine.LinePercent                  = _salesQuotationLine.LinePercent;
        salesLine.LineDisc                     = _salesQuotationLine.LineDisc;
        salesLine.LineAmount                   = _salesQuotationLine.LineAmount;
        salesLine.MultiLnDisc                  = _salesQuotationLine.MultiLnDisc;
        salesLine.MultiLnPercent               = _salesQuotationLine.MultiLnPercent;

        salesLine.setPriceDiscChangePolicy(PriceDiscSystemSource::SalesQuotation);

        salesLine.PackingUnit                  = _salesQuotationLine.PackingUnit;
        salesLine.PackingUnitQty               = _salesQuotationLine.PackingUnitQty;

        salesLine.SalesGroup                   = _salesQuotationLine.SalesGroup;
        salesLine.SalesMarkup                  = _salesQuotationLine.SalesMarkup;

        salesLine.TaxAutogenerated             = _salesQuotationLine.TaxAutoGenerated;
        salesLine.TaxGroup                     = _salesQuotationLine.TaxGroup;
        salesLine.TaxItemGroup                 = _salesQuotationLine.TaxItemGroup;

        salesLine.Port                         = _salesQuotationLine.Port;
        salesLine.StatProcId                   = _salesQuotationLine.StatProcId;
        salesLine.TransactionCode              = _salesQuotationLine.TransactionCode;
        salesLine.Transport                    = _salesQuotationLine.Transport;
        salesLine.CountyOrigDest               = _salesQuotationLine.CountyOrigDest;
        salesLine.StatTriangularDeal           = _salesQuotationLine.StatTriangularDeal;
        salesLine.IntrastatCommodity           = _salesQuotationLine.IntrastatCommodity;
        salesLine.OrigCountryRegionId          = _salesQuotationLine.OrigCountryRegionId;
        salesLine.OrigStateId                  = _salesQuotationLine.OrigStateId;
        salesLine.OverrideSalesTax             = _salesQuotationLine.OverrideSalesTax;
        salesLine.ExternalItemId               = _salesQuotationLine.ExternalItemId;

        salesLine.copyRetailSalesQuotationAffiliation(_salesQuotationLine);

        salesLine.initFromMCRSalesQuotationLine(_salesQuotationLine);

        if (_salesQuotationLine.DlvMode != "")
        {
            salesLine.DlvMode                  = _salesQuotationLine.DlvMode;
        }
        salesLine.DlvTerm                      = _salesQuotationLine.DlvTerm;

        salesLine.ShippingDateRequested        = _salesQuotationLine.ShippingDateRequested;
        salesLine.ReceiptDateRequested         = _salesQuotationLine.ReceiptDateRequested;
        salesLine.DeliveryDateControlType      = _salesQuotationLine.DeliveryDateControlType;
        salesLine.RetailVariantId              = _salesQuotationLine.RetailVariantId;

        // <GIN>
        salesLine.initFromSalesQuotationLineTaxExtensionIN(_salesQuotationLine);
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            salesLine.initFromSalesQuotationLine_BR(_salesQuotationLine);
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    internal SalesInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = SalesInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesLine</Name>
				<Source><![CDATA[
    internal static SalesCDSSalesOrderLineDefaulter newFromSalesLine(SalesLine _salesLine, SalesTable _salesTable)
    {
        SalesCDSSalesOrderLineDefaulter salesOrderLineDefaulter = new SalesCDSSalesOrderLineDefaulter();
        
        salesOrderLineDefaulter.parmSalesLine(_salesLine);
        salesOrderLineDefaulter.parmSalesTable(_salesTable);

        return salesOrderLineDefaulter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>