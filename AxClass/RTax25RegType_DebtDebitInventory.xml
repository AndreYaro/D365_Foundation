<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegType_DebtDebitInventory</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rTax25RegType_DebtDebitInventory extends RTax25RegType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>badDebtModel</Name>
				<Source><![CDATA[
    public RefRecId badDebtModel()
    {
        return CustParameters::rTax25DebtModelTax(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>detachedTableId</Name>
				<Source><![CDATA[
    public TableId detachedTableId()
    {
        return tablenum(RTax25RegisterTrans_DebtDebitInventory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public NotesLine description()
    {
        return "@GLS104317";
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasNonConfirmedDebt</Name>
				<Source><![CDATA[
    protected boolean hasNonConfirmedDebt()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(boolean _useDetachedTable = true)
    {
        RTax25DebtPeriodType periodType;
        int                  i;
        int                  remainderPos = RTax25RegType_DebtDebitInventory::debtStartPos();

        periodType = RTax25DebtPeriodType::newModelParameters(RTax25DebtType::Debit, this.badDebtModel());
        periodType.prepareLabels();

        detachedTableId = this.detachedTableId();
        this.initFromDetachedTable();

        fieldId = conDel(fieldId, remainderPos + periodType.rowCount(), RTax25DebtModelPeriod::maxPeriodNum() - periodType.rowCount());

        fieldType        = [extendedtypenum(DocumentNum),
                            extendedtypenum(DocumentDate),
                            extendedtypenum(DueDate),
                            extendedtypenum(ExcludeReserveCalc_RU)] +
                            (this.hasNonConfirmedDebt() ? [extendedtypenum(RTax25NonApprovedDebtAmount)] : conNull());

        for (i = remainderPos; i < remainderPos + periodType.rowCount(); i++)
        {
            fieldType = conins(fieldType, i, extendedtypenum(RTax25BadDebtAmount));
        }

        fieldLabel       = ["@GLS103916",
                            "@SYS67",
                            "@GLS103918",
                            "@RTax25BadDebtReserve:ExcludeFromReserve"] +
                            (this.hasNonConfirmedDebt() ? ["@GLS112755"] : conNull());

        fieldDescription = ["@GLS103935",
                            "@GLS103936",
                            "@GLS103918",
                            "@RTax25BadDebtReserve:ExclFromReserveDesc"] +
                            (this.hasNonConfirmedDebt() ? ["@GLS112755"] : conNull());

        fieldLabel = periodType.insLabels(fieldLabel, remainderPos, "@GLS104318");
        fieldDescription = periodType.insDescriptions(fieldDescription, remainderPos, "@GLS104313");

        this.initRegType();

        headerFields = [0,0,0,1];

        for (i = 1; i <= periodType.rowCount(); i++)
        {
            headerFields += 1;
        }

        if (this.hasNonConfirmedDebt())
        {
            headerFields += 1;
        }

        calcParameters = [ "@SYP4860776" ];
        suspendRecIds  = true;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRegType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes register type and child registers.
    /// </summary>
    protected void initRegType()
    {
        registerType = RTax25RegisterType::DebtDebitInventory;

        childRegisters = [RTax25RegisterType::DebtDebitMovement];
    }

]]></Source>
			</Method>
			<Method>
				<Name>debtStartPos</Name>
				<Source><![CDATA[
    public static int debtStartPos()
    {
        const int DebtStartPos = 5;
        return DebtStartPos;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>