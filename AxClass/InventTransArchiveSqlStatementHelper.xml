<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchiveSqlStatementHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventTransArchiveSqlStatementHelper
{
    private str     inventTransRecId;
    private str     inventTransModifiedDateTime;
    private str     inventTransDataAreaId;
    private str     inventTransPartition;
    private Set     inventTransFieldsSet;
    private boolean configKeyEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>contruct</Name>
				<Source><![CDATA[
    public static InventTransArchiveSqlStatementHelper contruct(boolean _configKeyEnabled = true)
    {
        return new InventTransArchiveSqlStatementHelper(_configKeyEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(boolean _configKeyEnabled)
    {
        super();
        configKeyEnabled = _configKeyEnabled;
        this.initialize();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    protected void initialize()
    {
        inventTransRecId = this.sqlFieldName(tableNum(InventTrans), fieldNum(InventTrans, RecId));
        inventTransModifiedDateTime = this.sqlFieldName(tableNum(InventTrans), fieldNum(InventTrans, ModifiedDateTime));
        inventTransFieldsSet = this.getFieldGroupFieldsFromMetaData(tableNum(InventTrans), tableFieldGroupStr(InventTrans, InventoryArchiveFields));
        if (inventTransFieldsSet.empty())
        {
            throw error(strFmt("@SCM:NoFieldFromInventTransFieldArchiveGroup", tableFieldGroupStr(InventTrans, InventoryArchiveFields)));
        }

        inventTransDataAreaId = this.sqlFieldName(tableNum(InventTrans), fieldNum(InventTrans, DataAreaId));
        inventTransPartition = this.sqlFieldName(tableNum(InventTrans), fieldNum(InventTrans, Partition));
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildReverseArchivedInventTransactionsStatement</Name>
				<Source><![CDATA[
    public str buildReverseArchivedInventTransactionsStatement(SysGuidString _sessionId, ItemId _itemId, InventDimId _inventDimId)
    {
        /*
        -------------------------Build insert script from restoring InventTransArchive records to InventTrans table -------------------
        insert into dbo.InventTrans
        (
            Recid, MODIFIEDDATETIME, ACTIVITYNUMBER ,COSTAMOUNTADJUSTMENT, COSTAMOUNTOPERATIONS, COSTAMOUNTPHYSICAL, COSTAMOUNTPOSTED,
            COSTAMOUNTSECCURADJUSTMENT_RU, COSTAMOUNTSECCURPHYSICAL_RU, COSTAMOUNTSECCURPOSTED_RU, COSTAMOUNTSETTLED, COSTAMOUNTSETTLEDSECCUR_RU,
            COSTAMOUNTSTD, COSTAMOUNTSTDSECCUR_RU, CURRENCYCODE, DATECLOSED, DATECLOSEDSECCUR_RU, DATEEXPECTED, DATEFINANCIAL, DATEINVENT,
            DATEPHYSICAL, DATESTATUS, GROUPREFID_RU, GROUPREFTYPE_RU, INTERCOMPANYINVENTDIMTRANSFERRED, INVENTDIMFIXED, INVENTDIMID, INVENTDIMIDSALES_RU,
            INVENTTRANSORIGIN, INVENTTRANSORIGINDELIVERY_RU, INVENTTRANSORIGINSALES_RU, INVENTTRANSORIGINTRANSIT_RU, INVOICEID, INVOICERETURNED,
            ITEMID, MARKINGREFINVENTTRANSORIGIN, PACKINGSLIPID, PACKINGSLIPRETURNED, PDSCWQTY, PDSCWSETTLED,PICKINGROUTEID, PROJADJUSTREFID,
            PROJCATEGORYID, PROJID, QTY, QTYSETTLED, QTYSETTLEDSECCUR_RU, RETURNINVENTTRANSORIGIN, REVENUEAMOUNTPHYSICAL,SHIPPINGDATECONFIRMED,
            SHIPPINGDATEREQUESTED, STATUSISSUE, STATUSRECEIPT, STORNO_RU, STORNOPHYSICAL_RU, TAXAMOUNTPHYSICAL, TIMEEXPECTED, TRANSCHILDREFID,
            TRANSCHILDTYPE, VALUEOPEN, VALUEOPENSECCUR_RU, VOUCHER, VOUCHERPHYSICAL, NONFINANCIALTRANSFERINVENTCLOSING, LOADID, DATAAREAID, PARTITION
        )
        select
            InventTrans, InventTransModifiedDateTime, ACTIVITYNUMBER, COSTAMOUNTADJUSTMENT, COSTAMOUNTOPERATIONS, COSTAMOUNTPHYSICAL COSTAMOUNTPOSTED,
            COSTAMOUNTSECCURADJUSTMENT_RU, COSTAMOUNTSECCURPHYSICAL_RU, COSTAMOUNTSECCURPOSTED_RU, COSTAMOUNTSETTLED, COSTAMOUNTSETTLEDSECCUR_RU,
            COSTAMOUNTSTD, COSTAMOUNTSTDSECCUR_RU, CURRENCYCODE, DATECLOSED, DATECLOSEDSECCUR_RU, DATEEXPECTED, DATEFINANCIAL, DATEINVENT,
            DATEPHYSICAL, DATESTATUS, GROUPREFID_RU, GROUPREFTYPE_RU, INTERCOMPANYINVENTDIMTRANSFERRED, INVENTDIMFIXED, INVENTDIMID, INVENTDIMIDSALES_RU,
            INVENTTRANSORIGIN, INVENTTRANSORIGINDELIVERY_RU, INVENTTRANSORIGINSALES_RU, INVENTTRANSORIGINTRANSIT_RU, INVOICEID, INVOICERETURNED,
            ITEMID, MARKINGREFINVENTTRANSORIGIN, PACKINGSLIPID, PACKINGSLIPRETURNED, PDSCWQTY, PDSCWSETTLED, PICKINGROUTEID, PROJADJUSTREFID,
            PROJCATEGORYID, PROJID, QTY, QTYSETTLED, QTYSETTLEDSECCUR_RU, RETURNINVENTTRANSORIGIN, REVENUEAMOUNTPHYSICAL, SHIPPINGDATECONFIRMED,
            SHIPPINGDATEREQUESTED, STATUSISSUE, STATUSRECEIPT, STORNO_RU, STORNOPHYSICAL_RU, TAXAMOUNTPHYSICAL, TIMEEXPECTED, TRANSCHILDREFID,
            TRANSCHILDTYPE, VALUEOPEN, VALUEOPENSECCUR_RU, VOUCHER, VOUCHERPHYSICAL, NONFINANCIALTRANSFERINVENTCLOSING, LOADID, DATAAREAID, PARTITION 
        from InventTransarchive inventTransArchive
           where inventTransArchive.dataareaid = curext() and inventTransArchive.Partition = getCurrentPartitionRecId()
        and inventTransArchive.SessionId = _sessionId and inventTransArchive.ItemId = _itemId and inventTransArchive.InventDimId = _inventDimId;
        */

        str ret = strFmt('INSERT INTO %1', this.sqlTableName(tableNum(InventTrans)));
        ret += '(';
        ret += this.buildInventTransTargetFieldsStatement();
        ret += ')\n';

        ret += 'SELECT ';
        ret += this.buildInventTransArchiveSelectionFieldsStatement();
        ret += '\n';

        ret += strFmt(' FROM %1 %1 \n', this.sqlTableName(tableNum(InventTransArchive)));
        
        ret += 'WHERE ';
        ret += this.buildWhereConditionStatement(_sessionId, _itemId, _inventDimId);
        ret += ';\n';
  
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransArchiveSelectionFieldsStatement</Name>
				<Source><![CDATA[
    protected str buildInventTransArchiveSelectionFieldsStatement()
    {
        str ret = strFmt('%1,',  this.sqlFieldName(tableNum(InventTransArchive), fieldNum(InventTransArchive, inventTrans)));
        if (inventTransModifiedDateTime)
        {
            ret += strFmt('%1,',  this.sqlFieldName(tableNum(InventTransArchive), fieldNum(InventTransArchive, InventTransModifiedDateTime)));
        }

        SetEnumerator fieldsEnumerator = inventTransFieldsSet.getEnumerator();
        FieldId inventTransArchiveFieldId;
        FieldName fieldName;
        while (fieldsEnumerator.moveNext())
        {
            fieldName = fieldId2Name(tableNum(InventTrans), fieldsEnumerator.current());
            inventTransArchiveFieldId = fieldName2Id(tableNum(InventTransArchive), fieldName);
            if (!inventTransArchiveFieldId)
            {
                throw error(strFmt("@SCM:MissingFieldsFromInventTransArchiveTable", fieldName));
            }

            fieldName = this.sqlFieldName(tableNum(InventTransArchive), inventTransArchiveFieldId);
            if (fieldName)
            {
                ret += strFmt('%1,', fieldName);
            }
        }

        ret += strFmt('%1,', this.sqlFieldName(tableNum(InventTransArchive), fieldNum(InventTransArchive, DataAreaId)));
        ret += strFmt('%1', this.sqlFieldName(tableNum(InventTransArchive), fieldNum(InventTransArchive, Partition)));
        return ret; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWhereConditionStatement</Name>
				<Source><![CDATA[
    protected str buildWhereConditionStatement(SysGuidString _sessionId, ItemId _itemId, InventDimId _inventDimId)
    {
        SysSqlSystem sqlSystem = new SysSqlSystem();
        str ret = strFmt('(%1.%2 = %3)', this.sqlTableName(tableNum(InventTransArchive)),
             this.sqlFieldName(tableNum(InventTransArchive), fieldNum(InventTransArchive, DataAreaId)),
             sqlSystem.sqlLiteral(curext()));

        ret += ' AND ';
        ret += strFmt('(%1.%2 = %3)', this.sqlTableName(tableNum(InventTransArchive)),
             this.sqlFieldName(tableNum(InventTransArchive), fieldNum(InventTransArchive, Partition)),
             sqlSystem.sqlLiteral(getcurrentpartitionrecid()));

        ret += ' AND ';
        ret += strFmt('(%1.%2 = %3)', this.sqlTableName(tableNum(InventTransArchive)),
             this.sqlFieldName(tableNum(InventTransArchive), fieldNum(InventTransArchive, SessionId)),
             sqlSystem.sqlLiteral(_sessionId));

        if (_itemId)
        {
            ret += ' AND ';
            ret += strFmt('(%1.%2 = %3)', this.sqlTableName(tableNum(InventTransArchive)),
             this.sqlFieldName(tableNum(InventTransArchive), fieldNum(InventTransArchive, ItemId)),
             sqlSystem.sqlLiteral(_itemId));
        }

        if (_inventDimId)
        {
            ret += ' AND ';
            ret += strFmt('(%1.%2 = %3)', this.sqlTableName(tableNum(InventTransArchive)),
             this.sqlFieldName(tableNum(InventTransArchive), fieldNum(InventTransArchive, InventDimId)),
             sqlSystem.sqlLiteral(_inventDimId));
        }

        return ret; 
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildInventTransTargetFieldsStatement</Name>
				<Source><![CDATA[
    protected str buildInventTransTargetFieldsStatement()
    {   
        str ret = strFmt('%1,', inventTransRecId);
        if (inventTransModifiedDateTime)
        {
            ret += strFmt('%1,', inventTransModifiedDateTime);
        }
       
        SetEnumerator fieldsEnumerator = inventTransFieldsSet.getEnumerator();
        str fieldName;
        while (fieldsEnumerator.moveNext())
        {
            fieldName = this.sqlFieldName(tableNum(InventTrans), fieldsEnumerator.current());
            if (fieldName)
            {
                ret += strFmt('%1,', fieldName);
            }
        }
 
        ret += strFmt('%1,', inventTransDataAreaId);
        ret += strFmt('%1', inventTransPartition);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlFieldName</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    protected str sqlFieldName(TableId _tableId, FieldId _fieldId)
    {
        return new SysDictField(_tableId, _fieldId).name(DbBackend::Sql);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sqlTableName</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    protected str sqlTableName(TableId _tableId)
    {
        return new SysDictTable(_tableId).name(DbBackend::Sql);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldGroupFieldsFromMetaData</Name>
				<Source><![CDATA[
    private Set getFieldGroupFieldsFromMetaData(TableId _tableId, str _fieldGroupStr)
    {
        Set result = new Set(Types::Integer);
        DictFieldGroup dictFieldGroup = new DictFieldGroup(_tableId, _fieldGroupStr);
        if (dictFieldGroup)
        {
            int fieldCnt = dictFieldGroup.numberOfFields();
            for (int i = 1; i <= fieldCnt; i++)
            {
                DictField dictField = new DictField(_tableId, dictFieldGroup.field(i));
            
                DictConfigurationKey dictConfigurationKey;
                if (configKeyEnabled && dictField.configurationKeyId())
                {
                    dictConfigurationKey = new DictConfigurationKey(dictField.configurationKeyId());
                }

                if (!dictConfigurationKey || dictConfigurationKey.enabled())
                {
                    result.add(dictField.id());
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventTransFieldsSet</Name>
				<Source><![CDATA[
    public Set getInventTransFieldsSet()
    {
        return inventTransFieldsSet;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>