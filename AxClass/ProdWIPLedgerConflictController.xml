<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWIPLedgerConflictController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProdWIPLedgerConflictController</c> class handles the report initialization for the
///    <c>ProdWIPLedgerConflict</c> report.
/// </summary>
class ProdWIPLedgerConflictController extends InventLedgerConflictController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>disableRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disables report query ranges that are not used by the report.
    /// </summary>
    /// <param name="_dataSource">
    /// The query build data source where the ranges should be disabled.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void disableRanges(QueryBuildDataSource    _dataSource)
    {
        QueryBuildRange range = _dataSource.findRange(fieldNum(InventLedgerConflictTmpConflict, ReferenceCategory));
        // disabled ranges are not saved when a query is packed,
        // so it's possible that the range is not present after the query is loaded from SysLastValue
        if (range)
        {
            range.enabled(false);
        }

        range = _dataSource.findRange(fieldNum(InventLedgerConflictTmpConflict, ItemId));
        if (range)
        {
            range.enabled(false);
        }

        range = _dataSource.findRange(fieldNum(InventLedgerConflictTmpConflict, InventTransId));
        if (range)
        {
            range.enabled(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        Query query = this.getFirstQuery();

        this.disableRanges(query.dataSourceName(tableStr(InventLedgerConflictTmpConflict)));

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ProdWIPLedgerConflictController construct()
    {
        return new ProdWIPLedgerConflictController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProdWIPLedgerConflictController controller = ProdWIPLedgerConflictController::construct();

        CostSelectPeriodState costSelectPeriodState = _args.parmObject() as CostSelectPeriodState;
        controller.parmCostSelectPeriodState(costSelectPeriodState);

        controller.parmReportName(ssrsReportStr(ProdWIPLedgerConflict, Report));
        controller.parmDialogCaption("@GLS3800108");
        controller.parmDisableRefreshButton(true);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        boolean ret;

        ret = super();

        if (ret
            && InventLedgerConflictReportCleanUpFeature::isEnabled()
            && InventLedgerConflictReportCleanUp::cleanUpJobIsRunning())
        {
            ret = checkFailed("@SCM:InventLedgerConflictCleanUpRunning");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>