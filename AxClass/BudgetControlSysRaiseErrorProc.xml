<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlSysRaiseErrorProc</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetControlSysRaiseErrorProc</c> is a budget control stored procedure.
/// </summary>
[ExportMetadata(enumStr(BudgetControlSQLObjectType), BudgetControlSQLObjectType::StoredProcedure),
 ExportAttribute(identifierstr(Dynamics.AX.Application.BudgetControlISQLObject))]
internal final class BudgetControlSysRaiseErrorProc implements BudgetControlISQLObject
{
    private const str procName = 'SysRaiseErrorProc';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    public str getName()
    {
        return procName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefinition</Name>
				<Source><![CDATA[
    public str getDefinition()
    {
        str sqlStatementText;

        sqlStatementText = @"
    CREATE PROCEDURE [SysRaiseErrorProc]
    (        @callerProcedure       NVARCHAR(126)
            ,@Error_Number          INT
            ,@Error_Line            INT     = NULL
            ,@Error_State           INT     = 1
            ,@Error_Severity        INT     = 16
            ,@Error_Message         NVARCHAR(4000)  = ''
            ,@Error_Procedure       NVARCHAR(126)   = NULL
            ,@ErrorTrying           NVARCHAR(80)    = NULL
            ,@extendedErrorFl       CHAR(1) = 'N'
            ,@logErrorFl            CHAR(1) = 'N'
    )

    AS

    SET NOCOUNT ON;

    DECLARE @ErrorMsg              NVARCHAR(4000) -- string containing custom error message
    ;

    SELECT   @extendedErrorFl       = UPPER(@extendedErrorFL)
            ,@logErrorFl            = UPPER(@logErrorFl)
            ,@Error_Procedure       = ISNULL(@Error_Procedure,@callerProcedure)
    ;
    IF @Error_State = 0
      BEGIN
        SELECT @Error_State = 1;
      END;

    SELECT @ErrorMsg = @callerProcedure
           + CASE WHEN (@Error_Procedure IS NOT NULL AND @Error_Procedure != @callerProcedure)
                    THEN N' ( in ' + ISNULL(@Error_Procedure,@callerProcedure) + N')'
                  ELSE N''
             END
           + N':'
           + CASE WHEN @ErrorTrying IS NOT NULL
                    THEN N' Trying:' + @ErrorTrying + N':'
                  ELSE N''
             END
           + ISNULL (@Error_message,'')
           + CASE WHEN @Error_number IS NOT NULL AND @Error_number != 50000
                    THEN N'(' + CAST (@Error_number AS VARCHAR) + N')'
                  ELSE N''
             END
    ;

    IF @extendedErrorFl = 'Y'
    --AND @Error_Line IS NOT NULL
      BEGIN
        SELECT @ErrorMsg = @ErrorMsg
                          + N' at line ' +
                          CASE
                            WHEN @Error_Line IS NOT NULL
                              THEN  CAST(@Error_Line AS NVARCHAR)
                            ELSE N'unknown'
                          END;
      END;
    --select 'e=' + @errormsg

    IF @logErrorFl != 'Y'
      BEGIN
        RAISERROR (@ErrorMsg, @Error_Severity, @Error_State);
      END;
    ELSE
      BEGIN
        RAISERROR (@ErrorMsg, @Error_Severity, @Error_State);
      END;

    RETURN(0);
        ";

        return sqlStatementText;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>