<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HMIMMultimodalDGDataUtil</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to populate both <c>HMIMMultimodalDG</c> and <c>HMIMMultimodalDGItem</c> tables
/// </summary>
final class HMIMMultimodalDGDataUtil
{
    HMIMMultimodalDG        multimodalDG;
    HMIMMultimodalDGItem    multimodalDGItems;
    WHSLoadTable            loadTable;
    WHSShipmentTable        whsShipmentTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>HMIMMultimodalDGDataUtil</c> class.
    /// </summary>
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>HMIMMultimodalDGDataUtil</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>HMIMMultimodalDGDataUtil</c> class.
    /// </returns>
    public static HMIMMultimodalDGDataUtil construct()
    {
        return new HMIMMultimodalDGDataUtil();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShipmentCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the <c>whsShipmentTable</c> Parameter
    /// </summary>
    /// <param name="_shipmentTable">
    /// The values to Set.
    /// </param>
    /// <returns>
    /// The value of the <c>whsShipmentTable</c> parameter
    /// </returns>
    public WHSShipmentTable parmShipmentCriteria(WHSShipmentTable _shipmentTable = whsShipmentTable)
    {
        whsShipmentTable = _shipmentTable;
        loadTable = WHSLoadTable::find(whsShipmentTable.LoadId);
        return whsShipmentTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMMDGConsignmentTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates both <c>HMIMMultimodalDG</c> and <c>HMIMMultimodalDGItem</c>
    /// </summary>
    public void populateMMDGConsignmentTables()
    {
        this.deleteExistingData();
        this.populateMMDGHeader();
        this.populateItemInformation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateItemInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>HMIMMultimodalDGItem</c>
    /// </summary>
    private void populateItemInformation()
    {
        WHSParameters whsParameters = WHSParameters::find();

        if (!whsParameters.HMIMMultimodalDGRegCode)
        {
            throw error ("@SCM:MultimodalDGParameterCheck");
        }

        LanguageId multimodalDGDescriptionLanguage = HMIMShippingDocumentsLanguageProvider::determineExportLanguageFromShipment(whsShipmentTable);

        WHSLoadLine loadLine;
        RecordInsertList multimodalDGItemsList = new RecordInsertList(tableNum(HMIMMultimodalDGItem));

        // Loop through the load lines for the shipment and insert the MMDG data.
        while select loadLine
            where loadLine.ShipmentId == whsShipmentTable.ShipmentId
        {
            // Populate and insert the MMDG line details.
            multimodalDGItems.clear();
            multimodalDGItems.initValue();

            multimodalDGItems.ItemId          = loadLine.ItemId;
            multimodalDGItems.MMDGDocumentId  = whsShipmentTable.HMIMMultimodalDGId;
            multimodalDGItems.NetWeight       = loadLine.loadLineNetWeight();
            multimodalDGItems.GrossWeight     = loadLine.displayItemWeight();
            multimodalDGItems.ItemVolume      = loadLine.displayItemVolume();

            if (HMIMItemMaterial::findByItemRegCode(loadLine.ItemId, whsParameters.HMIMMultimodalDGRegCode))
            {
                multimodalDGItems.Description = strFmt("%1 %2 %3 ", 
                    loadLine.Qty,
                    HMIMPackDescription::find(HMIMItemMaterial::findByItemRegCode(loadLine.ItemId, whsParameters.HMIMMultimodalDGRegCode).PackCode).Description,
                    HMIMPackDescription::getPackQtyAndUOMStrForLoadLine(loadLine, whsParameters.HMIMMultimodalDGRegCode));

                multimodalDGItems.Description += HMIMItemMaterial::getItemShipPrintTextByRegCode(loadLine.ItemId, whsParameters.HMIMMultimodalDGRegCode, multimodalDGDescriptionLanguage);
            }
            else
            {
                multimodalDGItems.Description = loadLine.inventTable().defaultProductName();
            }

            multimodalDGItemsList.add(multimodalDGItems);

        }

        multimodalDGItemsList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateMMDGHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates <c>HMIMMultimodalDG</c> 
    /// </summary>
    private void populateMMDGHeader()
    {
        TMSCarrier carrier = TMSCarrier::find(loadTable.CarrierCode);

        multimodalDG.ShipmentId                = whsShipmentTable.ShipmentId;
        multimodalDG.ShippingPostalAddress     = loadTable.OriginPostalAddress;
        multimodalDG.MMDGDocumentId            = whsShipmentTable.HMIMMultimodalDGId;
        multimodalDG.DeliveryPostalAddress     = whsShipmentTable.DeliveryPostalAddress;
        multimodalDG.CarrierCode               = carrier.CarrierCode;
        multimodalDG.CarrierServiceCode        = loadTable.CarrierServiceCode;
        multimodalDG.SealNum                   = this.retrieveSealNums();
        multimodalDG.CompanyName               = CompanyInfo::find().name();
        multimodalDG.CustAccount               = whsShipmentTable.AccountNum;
        if (HMIMTransportNumberDateCertificateToggle::instance().isEnabled())
        {
            multimodalDG.TransportNumber       = loadTable.VoyageNum;
            multimodalDG.TransportDate         = DatetimeUtil::Date(DateTimeUtil::applyTimeZoneOffset(loadTable.SailUTCDateTime, DateTimeUtil::getUserPreferredTimeZone()));
        }

        multimodalDG.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteExistingData</Name>
				<Source><![CDATA[
    private void deleteExistingData()
    {
        ttsbegin;
        // Deleting MMDG header will clean up consignment item records automatically.
        multimodalDG = HMIMMultimodalDG::find(whsShipmentTable.HMIMMultimodalDGId, true);
        multimodalDG.delete();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveSealNums</Name>
				<Source><![CDATA[
    private WHSSealNums retrieveSealNums()
    {
        WHSSealNum sealNums = loadTable.InspectionSeal;
        
        TMSLoadSeal tmsLoadSeal;
        while select SealNum from tmsLoadSeal
            where tmsLoadSeal.LoadId == loadTable.LoadId
        {
            if (sealNums)
            {
                sealNums += ', ' + tmsLoadSeal.SealNum;
            }
            else
            {
                sealNums = tmsLoadSeal.sealNum;
            }
        }

        return sealNums;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>