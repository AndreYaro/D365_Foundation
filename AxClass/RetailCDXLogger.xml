<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// Represent the base CDX logger class.
/// </summary>
internal class RetailCDXLogger
{
    System.Reflection.Assembly instrumentationAssembly;
    System.Type applicationEventSourceType;

    Map eventDurationTimerMap = new Map(Types::String, Types::Class);

    str previousErrorEvent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the base logger class <c>RetailCDXLogger</c>.
    /// </summary>
    internal void new()
    {
        // Load the instrumentation assembly.
        instrumentationAssembly = System.Reflection.Assembly::Load('Microsoft.Dynamics.Application.Instrumentation');
        applicationEventSourceType = instrumentationAssembly.GetType('Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource');
    }

]]></Source>
			</Method>
			<Method>
				<Name>startTimer</Name>
				<Source><![CDATA[
    protected System.Diagnostics.Stopwatch startTimer()
    {
        System.Diagnostics.Stopwatch timer = new System.Diagnostics.Stopwatch();

        timer.Start();

        return timer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>duration</Name>
				<Source><![CDATA[
    protected int64 duration(str eventName)
    {
        int64 duration = 0;

        if (eventDurationTimerMap.exists(eventName))
        {
            System.Diagnostics.Stopwatch timer = eventDurationTimerMap.lookup(eventName);
            duration = timer.ElapsedMilliseconds;
        }

        return duration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logStartEvent</Name>
				<Source><![CDATA[
    protected void logStartEvent(str eventName, container eventData)
    {
        if (!eventDurationTimerMap.exists(eventName))
        {
            eventDurationTimerMap.insert(eventName, this.startTimer());
        }

        this.logEvent(strFmt('%1Start', eventName), eventData, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logStopEvent</Name>
				<Source><![CDATA[
    protected void logStopEvent(str eventName, container eventData)
    {
        if (eventDurationTimerMap.exists(eventName))
        {
            System.Diagnostics.Stopwatch timer = eventDurationTimerMap.lookup(eventName);
            timer.Stop();
        }

        this.logEvent(strFmt('%1Stop', eventName), eventData, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logEvent</Name>
				<Source><![CDATA[
    protected void logEvent(str eventName, container eventData, boolean isErrorEvent = false)
    {
        System.Exception ex;
        try
        {
            System.Reflection.MethodInfo eventWriteMethod = applicationEventSourceType.GetMethod(strFmt('EventWrite%1', eventName));
            eventWriteMethod.Invoke(applicationEventSourceType, eventData);
        }
        catch (ex)
        {
            ApplicationEventSource::EventWriteRetailCDXLoggerFailure(eventName, con2Str(eventData), ex.ToString());
        }

        previousErrorEvent = isErrorEvent ? eventName : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorMessage</Name>
				<Source><![CDATA[
    protected str getErrorMessage(System.Exception ex)
    {
        return ex != null ? ex.ToString() : '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultFromException</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the operation result from the specified exception
    /// </summary>
    /// <param name = "exceptions">the exception list.</param>
    /// <returns>A container containing a flag indicating success status and a string that contains the error message if any.</returns>
    protected container getResultFromException(container exceptions)
    {
        boolean success = true;
        container errorMessages;
        for (int i = 1; i <= conLen(exceptions); i++)
        {
            if (conPeek(exceptions, i) != null)
            {
                success = false;
                errorMessages += this.getErrorMessage(conPeek(exceptions, i));
            }
        }

        return [success, con2Str(errorMessages, System.Environment::NewLine)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXResourceCleanUpFailureWarning</Name>
				<Source><![CDATA[
    internal void logCDXResourceCleanUpFailureWarning(System.Exception exception)
    {
        this.logEvent('CDXResourceCleanUpFailureWarning', conPeek(this.getResultFromException([exception]), 2), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXUserFullAccessCheckWarning</Name>
				<Source><![CDATA[
    internal void logCDXUserFullAccessCheckWarning(System.Exception exception)
    {
        this.logEvent('CDXUserFullAccessCheckWarning', conPeek(this.getResultFromException([exception]), 2), true);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>