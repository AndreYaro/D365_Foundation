<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceCalcTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustInvoiceCalcTax
{
    Common source;
    MarkupTrans markupTrans;
    CustInvoiceLine custInvoiceLine;

    boolean update;
    AmountCur balance;

    TaxFreeInvoice tax;

    TaxPost taxPost;

    TaxWithholdCalcFreeInvoice_IN taxWithholdCalcFreeInvoice;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    TaxAmountCur calcTax(AmountCur _balance)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithholdTax_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates withholding tax.
    /// </summary>
    /// <param name="_balance">
    /// The instance of the <c>AmountCur</c> class.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxAmountCur</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Overloads failed.
    /// </exception>
    TaxAmountCur calcWithholdTax_IN(AmountCur _balance)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceMarkupRecId</Name>
				<Source><![CDATA[
    recId custInvoiceMarkupRecId()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceMarkupTableId</Name>
				<Source><![CDATA[
    tableId custInvoiceMarkupTableId()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTableRecID</Name>
				<Source><![CDATA[
    recId custInvoiceTableRecID()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>custInvoiceTableTableID</Name>
				<Source><![CDATA[
    tableId custInvoiceTableTableID()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a value that indicates if a tax group exists for on any line of the document.
    /// </summary>
    /// <returns>
    ///   true if a tax group exists for any line; otherwise, false.
    /// </returns>
    public boolean doTaxGroupExistsForDocument()
    {
        // Default is true to force the tax engine to calculate taxes.
        // Specific documents will override and return results as needed.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscAmount endDisc()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    CustExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscountPercent</Name>
				<Source><![CDATA[
    public DiscPct getCashDiscountPercent()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustInvoiceLine</Name>
				<Source><![CDATA[
    void getCustInvoiceLine()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void initCursor()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkup</Name>
				<Source><![CDATA[
    void initCursorMarkup(tableId tableId,
                           recId recId)
    {
        markupTrans.selectForUpdate(update);

        select nofetch markupTrans
        index hint TableRecIdIdx
        where markupTrans.TransTableId == tableId
           && markupTrans.TransRecId == recId
           && !markupTrans.IsDeleted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkupHeader</Name>
				<Source><![CDATA[
    void initCursorMarkupHeader(tableId tableId,
                                 recId recId)
    {
        this.initCursorMarkup(tableId, recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount markupAmount()
    {
        AmountCur value;

        if (custInvoiceLine)
        {
            value = custInvoiceLine.AmountCur;
        }
        else
        {
            value = balance;
        }

        return markupTrans.signedValue(Markup::calcTrans(markupTrans, this.transQty(), value, value, this.invoiceDate()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDimension()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup markupTaxGroup()
    {
        return markupTrans.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup markupTaxItemGroup()
    {
        return markupTrans.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common _source)
    {
        source = _source;
        update = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextMarkupLine</Name>
				<Source><![CDATA[
    MarkupTrans nextMarkupLine()
    {
        next markupTrans;

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts tax for a free text invoice.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The <c>LedgerPostingController</c> class.
    /// </param>
    /// <param name="post">
    /// true if tax should be posted; otherwise, false.
    /// </param>
    public void post(LedgerPostingController _ledgerPostingController,
               NoYes post = NoYes::Yes)
    {
        // <GIN>
        TaxWithholdPost_IN taxWithholdPost;
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled() && !this.validateTaxes_BR())
        {
            throw Exception::Error;
        }
        // </GBR>

        taxPost = TaxPost::newForSourceType(TaxSourceType::FreeTextInvoice, this, post);

        // <GEEU>
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            taxPost.parmVatRegData_W(this.tax().parmVatRegData_W());
        }
        // </GEEU>

        taxPost.updateAndPost(_ledgerPostingController);
        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            taxWithholdPost = TaxWithholdPost_IN::newForSourceType(TaxSourceType::FreeTextInvoice, this, post);
            taxWithholdPost.updateAndPost(_ledgerPostingController);
        }
        // </GIN>
    }

]]></Source>
			</Method>
			<Method>
				<Name>recID</Name>
				<Source><![CDATA[
    recId recID()
    {
        return source.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    void setTax(TaxCode taxCode,
                 TaxAmount taxAmount)
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxMarkup</Name>
				<Source><![CDATA[
    void setTaxMarkup(TaxWriteCode taxWriteCode,
                       AmountCur amountCur)
    {
        markupTrans.TaxWriteCode = taxWriteCode;
        markupTrans.TaxAmount = amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    tableId tableId()
    {
        return source.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    TaxFreeInvoice tax(TaxFreeInvoice _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdCalcFreeInvoice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax withhold of free invoice.
    /// </summary>
    /// <param name="_taxWithholdCalcFreeInvoice">
    /// The tax withhold value of free invoice.
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxWithholdCalcFreeInvoice_IN</c> class.
    /// </returns>
    public TaxWithholdCalcFreeInvoice_IN taxWithholdCalcFreeInvoice_IN(TaxWithholdCalcFreeInvoice_IN _taxWithholdCalcFreeInvoice = taxWithholdCalcFreeInvoice)
    {
        taxWithholdCalcFreeInvoice = _taxWithholdCalcFreeInvoice;
        return taxWithholdCalcFreeInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur transLineAmount()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    PriceCur transPcsPrice()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    SalesQty transQty()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRecId</Name>
				<Source><![CDATA[
    recId transRecId()
    {
        return custInvoiceLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    tableId transTableId()
    {
        return custInvoiceLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup transTaxGroup()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup transTaxItemGroup()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    InventTransId transTransId()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the operation is for a final user or not.
    /// </summary>
    /// <returns>True if is a final user use otherwise false</returns>
    public boolean useAndConsumption_BR()
    {
        return custInvoiceLine.custInvoiceTable().CustFinalUser_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxes_BR</Name>
				<Source><![CDATA[
    protected boolean validateTaxes_BR()
    {
        boolean ok = true;
        TmpTaxworkTrans taxWorkTrans = this.tax().tmpTaxWorkTrans();

        select firstonly taxWorkTrans
            where taxWorkTrans.TaxType_BR == TaxType_BR::ImportTax;

        if (taxWorkTrans)
        {
            ok = checkFailed("@SYS4081914");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static CustInvoiceCalcTax construct(Common _source)
    {
        switch (_source.TableId)
        {
            case tablenum(CustInvoiceTable) :
                return new CustInvoiceCalcTax_Table (_source);
            case tablenum(CustInvoiceLine) :
                return new CustInvoiceCalcTax_Line (_source);
            case tablenum(CustInvoiceJour) :
                return new CustInvoiceCalcTax_Invoice (_source);
        }

        throw error(strfmt("@SYS19306",funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRecalculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if tax can be recalculated.
    /// </summary>
    /// <returns>Returns true if tax can be recalculated; otherwise, returns false.</returns>
    public boolean canRecalculateTax()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>