<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceInterfacturaWCF</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Security.Cryptography.X509Certificates;
using System.Text;

public class EInvoiceInterfacturaWCF extends WcfClient
{
    internal static const int StampMaxStringLengthTolerance = 65534;
    internal static const int StampMaxReceivedMessageSizeTolerance = 65534;
    internal static const int StampMaxReceivedMessageSizeIncreasedTolerance = 2097152;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createBinding</Name>
				<Source><![CDATA[
    protected System.ServiceModel.Channels.Binding createBinding()
    {
        System.ServiceModel.Channels.Binding result;

        if (this.isHttps())
        {
            System.ServiceModel.BasicHttpsBinding binding = new System.ServiceModel.BasicHttpsBinding();
            if (this.certificate)
            {
                System.ServiceModel.BasicHttpsSecurity security = binding.get_Security();
                System.ServiceModel.HttpTransportSecurity transport = security.get_Transport();
                transport.set_ClientCredentialType(System.ServiceModel.HttpClientCredentialType::Certificate);
            }

            result = binding;
        }
        else
        {
            result = new System.ServiceModel.BasicHttpBinding();
        }

        return result;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getMethodArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rearrange arguments before invoke wcf method.
    /// </summary>
    /// <param name = "methodName">A method name.</param>
    /// <param name = "message">A message.</param>
    /// <param name = "otherArgs">Other args.</param>
    /// <returns>A container with message and other aruments for all methods.</returns>
    /// <remarks>
    /// This is extension point to rearrange or adjustment arguments.
    /// The <c>method</c> argument is not used in this implementation.
    /// </remarks>
    protected container getMethodArgs(System.Reflection.MethodInfo method, str message, container otherArgs)
    {
        container args;

        switch (otherArgs)
        {
            case [EInvoiceCFDIWebService_MX::Send]:
            case [EInvoiceCFDIWebService_MX::SendWithholding]:
                args = [false];
                break;
        }

        return super(method, message, args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        URL _url,
        X509Certificate2 _certificate = null)
    {
        super(
            'Microsoft.Dynamics.ApplicationSuite.CfdiServiceReferences',
            'Microsoft.Dynamics.ApplicationSuite.CfdiServiceReferences.Interfactura.WebService1SoapClient',
            _url,
            _certificate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contructs a new object of the <c>EInvoiceInterfacturaWCF</c> class.
    /// </summary>
    /// <param name = "_url">A PAC service url.</param>
    /// <param name = "_certificate">A certificate</param>
    /// <returns>An object of the <c>EInvoiceInterfacturaWCF</c> class.</returns>
    public static EInvoiceInterfacturaWCF construct(
        URL _url,
        X509Certificate2 _certificate = null)
    {
        EInvoiceInterfacturaWCF service = new EInvoiceInterfacturaWCF(_url, _certificate);

        return service;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a key used for cache.
    /// </summary>
    /// <param name = "_url">A PAC service url.</param>
    /// <param name = "_certificate">A certificate</param>
    /// <returns>A continer with unique key.</returns>
    public static container cacheKey(
        URL _url,
        X509Certificate2 _certificate = null)
    {
        return [_url, _certificate.Thumbprint];
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxExpectedContentStringLength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates maximunm request buffer size.
    /// </summary>
    /// <param name = "_messageSize">Request message size.</param>
    /// <returns>The size of output buffer.</returns>
    internal static int maxExpectedContentStringLength(int _messageSize)
    {
        int messageSizeWithTolerance;

        if (EInvoiceInterfacturaWCF::isIncreaseResponseToleranceEnabled())
        {
            messageSizeWithTolerance = _messageSize + EInvoiceInterfacturaWCF::responseToleranceLimit();
        }
        else
        {
            messageSizeWithTolerance = _messageSize + StampMaxStringLengthTolerance;
        }
        return messageSizeWithTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxExpectedResponseMessageSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates maximunm response buffer size.
    /// </summary>
    /// param name = "_messageSize">Request message size.</param>
    /// <returns>The size of input buffer.</returns>
    internal static int maxExpectedResponseMessageSize(str _message)
    {
        UTF8Encoding utf8Encoding = new UTF8Encoding();

        System.Byte[] bytes = utf8Encoding.GetBytes(_message);
        int maxReceivedMessageSize = bytes.get_Length();

        int messageSizeWithTolerance;

        if (EInvoiceInterfacturaWCF::isIncreaseResponseToleranceEnabled())
        {
            messageSizeWithTolerance = maxReceivedMessageSize + EInvoiceInterfacturaWCF::responseToleranceLimit();
        }
        else
        {
            messageSizeWithTolerance = maxReceivedMessageSize + StampMaxReceivedMessageSizeTolerance;
        }
        return messageSizeWithTolerance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>responseToleranceLimit</Name>
				<Source><![CDATA[
    internal static int responseToleranceLimit()
    {
        int responseLimit;

        EInvoiceCFDIParameters_MX eInvoiceParameters = EInvoiceCFDIParameters_MX::find();

        if (eInvoiceParameters && eInvoiceParameters.CFDIResponseTolerance_MX)
        {
            responseLimit = eInvoiceParameters.CFDIResponseTolerance_MX;
        }
        else
        {
            responseLimit = StampMaxReceivedMessageSizeIncreasedTolerance;
        }

        return responseLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isIncreaseResponseToleranceEnabled</Name>
				<Source><![CDATA[
    private static boolean isIncreaseResponseToleranceEnabled()
    {
        return EInvoiceCFDIIncreaseResponseToleranceFlight_MX::instance().isEnabled();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>