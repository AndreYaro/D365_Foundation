<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueReportPopulateItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventValueReportPopulateItem extends InventValueReportPopulateResource implements CostIAsyncRunnable
{
    private boolean isInventValueReportPopulateItemRefineQueryFlightEnabled = InventValueReportPopulateItemRefineQueryFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runAsync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and runs as an asynchronous task.
    /// </summary>
    /// <returns>The created asynchronous task.</returns>
    public System.Threading.Tasks.Task runAsync()
    {
        System.Threading.Tasks.Task threadTask = runAsync(classNum(InventValueReportPopulateItem),
                                                          staticMethodStr(InventValueReportPopulateItem, runOperationAsync),
                                                          [this.pack()]);

        return threadTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runOperationAsync</Name>
				<Source><![CDATA[
    private static void runOperationAsync(container params, System.Threading.CancellationToken cancellationToken)
    {
        #OCCRetryCount

        InventValueReportPopulateItem   dataCollectionTask = new InventValueReportPopulateItem();
        container                       packedDataCollectionTask;

        [packedDataCollectionTask] = params;
        dataCollectionTask.unpack(packedDataCollectionTask);
        CostManagementInstrumentationLogger logger = CostManagementInstrumentationLogger::createLogger(classStr(InventValueReportPopulateItem));
        using (var activityContext = logger.inventoryValueReportActivity().populateItem(dataCollectionTask.parmInventValueReportContract().parmTransactionId()))
        {
            try
            {
                dataCollectionTask.run();
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (SysTransientSqlConnectionErrorHandler::retryTransientSqlConnectionError())
                    {
                        retry;
                    }
                    else
                    {
                        if (InventValueReportStorageBundleFeature::isEnabled())
                        {
                            InventValueExecutionHistory executionHistory = InventValueExecutionHistory::find(dataCollectionTask.parmInventValueReportContract().parmTransactionId());
                            if (executionHistory && executionHistory.RunInBundle)
                            {
                                InventValueReportPopulateItem::handleError(dataCollectionTask.parmInventValueReportContract().parmTransactionId());
                            }
                        }

                        logger.logError(strFmt("@SCM:InventValueReportPopulateItemTaskFailLogInfo", dataCollectionTask.resourceId));
                    }
                }
                else
                {
                    throw Exception::TransientSqlConnectionError;
                }
            }
            catch
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    if (InventValueReportStorageBundleFeature::isEnabled())
                    {
                        InventValueExecutionHistory executionHistory = InventValueExecutionHistory::find(dataCollectionTask.parmInventValueReportContract().parmTransactionId());
                        if (executionHistory && executionHistory.RunInBundle)
                        {
                            InventValueReportPopulateItem::handleError(dataCollectionTask.parmInventValueReportContract().parmTransactionId());
                        }
                    }

                    logger.logError(strFmt("@SCM:InventValueReportPopulateItemTaskFailLogInfo", dataCollectionTask.resourceId));
                }
                else
                {
                    retry;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleError</Name>
				<Source><![CDATA[
    private static void handleError(CreatedTransactionId _transactionId)
    {
        ttsbegin;

        InventValueExecutionHistory inventValueExecutionHistory = InventValueExecutionHistory::find(_transactionId, true);
        inventValueExecutionHistory.setStopRunning(NoYes::Yes, NoYes::Yes);
        inventValueExecutionHistory.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextBundle</Name>
				<Source><![CDATA[
    private InventValueBundleList getNextBundle()
    {
        InventValueBundleList inventValueBundleList;

        select firstonly inventValueBundleList
            order by RecId asc
            where inventValueBundleList.TransactionId == inventValueReportContract.parmTransactionId()
                && inventValueBundleList.ProcessingState == InventValueBundleState::Waiting
                && inventValueBundleList.RecId <= inventValueReportContract.parmMaxBundleRecId()
                && inventValueBundleList.RecId >= inventValueReportContract.parmMinBundleRecId();

        return inventValueBundleList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransactionsWithDynamicQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Collects current balance and transaction data for a particular item.
    /// </summary>
    protected void buildTransactionsWithDynamicQuery()
    {
        InventItemGroupItem                 inventItemGroupItem;
        InventTable                         inventTable;
        InventValueReportView               inventView;
        InventDim                           inventDim, fetchedInventDim;
        InventValueReportTmpLine            tmpReportLine;
        InventDimParm                       inventDimParmProduct;
        InventDimParm                       inventDimParmStorage;
        InventDimParm                       inventDimParmTracking;
        InventDimParm                       financialInventDimParm;
        InventDimParm                       inventDimParmFilter;
        boolean                             updateFinancialInventDimParm;
        boolean                             isInventDimParmEqual = true;
        InventValueBundleList               inventValueBundleList;
        boolean                             processContinue;

        // Group by dimensions (view || total)
        InventDimParm populateInventDimParm = InventDimParm::orParms(inventValueReport.viewInventDimParm(), inventValueReport.totalInventDimParm());

        boolean joinInventDim = this.isRangeSetOnReportLine(this.MapReportLineToInventDim(), inventDimParmFilter) ||
                                populateInventDimParm.anyProductDimensionFlagSet() ||
                                populateInventDimParm.anyStorageDimensionFlagSet() ||
                                populateInventDimParm.anyTrackingDimensionFlagSet();

        boolean joinInventItemGroupItem = inventValueReport.ViewResourceGroup || inventValueReport.ViewResourceGroupTotal;
        boolean joinProductDimensionGroupProduct = populateInventDimParm.anyProductDimensionFlagSet();
        boolean joinStorageDimensionGroupProduct = populateInventDimParm.anyStorageDimensionFlagSet();
        boolean joinTrackingDimensionGroupProduct = populateInventDimParm.anyTrackingDimensionFlagSet();

        InventValueExecutionHistory inventValueExecutionHistory = InventValueExecutionHistory::find(inventValueReportContract.parmTransactionId());
        boolean runInBundle = inventValueExecutionHistory && inventValueExecutionHistory.RunInBundle && InventValueReportStorageBundleFeature::isEnabled();
        boolean isReleaseMemoryFlightEnabled = InventCostRemoveCursorCopyToReleaseMemoryFlight::instance().isEnabled();

        do
        {
            if (inventValueExecutionHistory)
            {
                inventValueExecutionHistory.reread();
            }

            processContinue = inventValueExecutionHistory && inventValueExecutionHistory.StopRunning == NoYes::No;

            if (!runInBundle || processContinue)
            {
                if (runInBundle)
                {
                    inventValueBundleList = this.getNextBundle();
                    if (inventValueBundleList)
                    {
                        ttsbegin;
                        if (!inventValueBundleList.selectForUpdate())
                        {
                            inventValueBundleList.selectForUpdate(true);
                        }
                        inventValueBundleList.ProcessingState = InventValueBundleState::Processing;
                        inventValueBundleList.StartTime = DateTimeUtil::utcNow();
                        inventValueBundleList.update();
                        ttscommit;
                    }
                }

                if (!runInBundle || inventValueBundleList)
                {
                    if (runInBundle)
                    {
                        this.initReportLines();
                    }

                    Query q = new Query();
                    if (!isInventValueReportPopulateItemRefineQueryFlightEnabled)
                    {
                        q.literals(true);
                    }

                    QueryBuildDataSource qbdsInventTable = q.addDataSource(tableNum(InventTable));
                    qbdsInventTable.orderMode(OrderMode::GroupBy);
                    qbdsInventTable.addGroupByField(fieldNum(InventTable, ItemType));

                    if (inventValueReport.ViewResourceId || inventValueReport.ViewResourceIdTotal)
                    {
                        qbdsInventTable.addGroupByField(fieldNum(InventTable, ItemId));
                    }

                    if (!runInBundle)
                    {
                        this.copyRangesFromContractQuery(this.MapReportLineToInventTable(), qbdsInventTable);
                    }

                    QueryBuildDataSource qbds = qbdsInventTable;

                    if (runInBundle)
                    {
                        QueryBuildDataSource qbdsInventValueItemList = qbds.addDataSource(tableNum(InventValueItemList));
                        qbdsInventValueItemList.addLink(fieldNum(InventTable, ItemId), fieldNum(InventValueItemList, ItemId), qbdsInventTable.name());
                        qbdsInventValueItemList.joinMode(JoinMode::InnerJoin);
                        qbdsInventValueItemList.fetchMode(QueryFetchMode::One2One);
                        qbdsInventValueItemList.addRange(fieldNum(InventValueItemList, TransactionID)).value(queryValue(this.parmInventValueReportContract().parmTransactionId()));
                        qbdsInventValueItemList.addRange(fieldNum(InventValueItemList, Bundle)).value(queryValue(inventValueBundleList.RecId));
                    }

                    if (joinInventItemGroupItem)
                    {
                        qbds = this.joinInventItemGroupItem(qbds, qbdsInventTable);
                    }

                    if (joinProductDimensionGroupProduct)
                    {
                        qbds = this.joinProductDimensionGroupProduct(qbds, qbdsInventTable);
                    }

                    if (joinStorageDimensionGroupProduct)
                    {
                        qbds = this.joinStorageDimensionGroupProduct(qbds, qbdsInventTable);
                    }

                    if (joinTrackingDimensionGroupProduct)
                    {
                        qbds = this.joinTrackingDimensionGroupProduct(qbds, qbdsInventTable);
                    }

                    QueryBuildDataSource qbdsInventView = qbds.addDataSource(tableNum(InventValueReportView));
                    qbdsInventView.addLink(fieldNum(InventTable, ItemId), fieldNum(InventValueReportView, ItemId), qbdsInventTable.name());
                    qbdsInventView.fetchMode(QueryFetchMode::One2One);

                    switch (inventValueReport.SelectDateRange)
                    {
                        case InventValueReportSelectDateRange::TransDate:
                            qbdsInventView.addRange(fieldNum(InventValueReportView, TransDate)).value(queryRange(this.getActualFromDate(), dateMax()));
                            break;
                        case InventValueReportSelectDateRange::TransBeginTime:
                            qbdsInventView.addRange(fieldNum(InventValueReportView, TransBeginTime)).value(queryRange(this.getActualFromDate(), DateTimeUtil::maxValue()));
                            break;
                    }

                    qbdsInventView.orderMode(OrderMode::GroupBy);

                    if (this.parmResourceId())
                    {
                        qbdsInventView.addRange(fieldNum(InventValueReportView, ItemId)).value(queryValue(this.parmResourceId()));
                    }

                    if (joinInventDim)
                    {
                        qbds = this.joinInventDim(qbdsInventView, populateInventDimParm);
                    }

                    // select sum(field)
                    qbdsInventView.addSelectionField(fieldNum(InventValueReportView, Qty), SelectionField::Sum);
                    qbdsInventView.addSelectionField(fieldNum(InventValueReportView, Amount), SelectionField::Sum);

                    // InventView
                    qbdsInventView.addGroupByField(fieldNum(InventValueReportView, TransDate));
                    if (inventValueReport.DetailLevel == TotalTrans::Trans)
                    {
                        qbdsInventView.addGroupByField(fieldNum(InventValueReportView, Voucher));
                        qbdsInventView.addGroupByField(fieldNum(InventValueReportView, Reference));
                    }

                    // Group by dates regardless of DetailLevel value, so that the records with TransDate > ToDate could be deleted later, in the run() method
                    if (inventValueReport.viewTransBeginTime() ||
                        inventValueReport.SelectDateRange == InventValueReportSelectDateRange::TransBeginTime)
                    {
                        qbdsInventView.addGroupByField(fieldNum(InventValueReportView, TransBeginTime));
                    }

                    qbdsInventView.addGroupByField(fieldNum(InventValueReportView, ReferenceCategory));
                    qbdsInventView.addGroupByField(fieldNum(InventValueReportView, InventTransPostingType));
                    qbdsInventView.addGroupByField(fieldNum(InventValueReportView, IsPosted));

                    if (inventValueReport.viewCOGSFinancial() || inventValueReport.viewCOGSTotal())
                    {
                        qbdsInventView.addGroupByField(fieldNum(InventValueReportView, PostingTypeOffset));
                    }

                    this.copyRangesFromContractQuery(this.mapReportLineToReportView(), qbdsInventView);

                    if (isInventValueReportPopulateItemRefineQueryFlightEnabled)
                    {
                        q.skipAutoOrderBy(true);
                    }

                    QueryRun qr = new QueryRun(q);

                    if (isInventValueReportPopulateItemRefineQueryFlightEnabled)
                    {
                        qr.setQuerytimeout(14400, true);
                    }

                    if (runInBundle)
                    {
                        ttsbegin;
                    }

                    while (qr.next())
                    {
                        if (qr.changed(tableNum(InventTable)))
                        {
                            inventTable  = qr.get(tableNum(InventTable));
                            this.insertReportLines();
                        }

                        if (joinInventItemGroupItem && qr.changed(tableNum(InventItemGroupItem)))
                        {
                            inventItemGroupItem  = qr.get(tableNum(InventItemGroupItem));
                            this.insertReportLines();
                        }

                        if (joinProductDimensionGroupProduct && qr.changed(tableNum(EcoResProductDimensionGroupProduct)))
                        {
                            EcoResProductDimensionGroupProduct productDimensionGroupProduct = qr.get(tableNum(EcoResProductDimensionGroupProduct));
                            if (isReleaseMemoryFlightEnabled)
                            {
                                inventDimParmProduct = null;
                            }
                            inventDimParmProduct.data(EcoResProductDimGroupSetupCache::financialInventoryEnabled(productDimensionGroupProduct.ProductDimensionGroup));
                            updateFinancialInventDimParm = true;
                        }

                        if (joinStorageDimensionGroupProduct && qr.changed(tableNum(EcoResStorageDimensionGroupItem)))
                        {
                            EcoResStorageDimensionGroupItem storageDimensionGroupItem = qr.get(tableNum(EcoResStorageDimensionGroupItem));
                            if (isReleaseMemoryFlightEnabled)
                            {
                                inventDimParmStorage = null;
                            }
                            inventDimParmStorage.data(EcoResStorageDimGroupSetupCache::financialInventoryEnabled(storageDimensionGroupItem.StorageDimensionGroup));
                            updateFinancialInventDimParm = true;
                        }

                        if (joinTrackingDimensionGroupProduct && qr.changed(tableNum(EcoResTrackingDimensionGroupItem)))
                        {
                            EcoResTrackingDimensionGroupItem trackingDimensionGroupItem = qr.get(tableNum(EcoResTrackingDimensionGroupItem));
                            if (isReleaseMemoryFlightEnabled)
                            {
                                inventDimParmTracking = null;
                            }
                            inventDimParmTracking.data(EcoResTrackingDimGroupSetupCache::financialInventoryEnabled(trackingDimensionGroupItem.TrackingDimensionGroup));
                            updateFinancialInventDimParm = true;
                        }

                        if (qr.changed(tableNum(InventValueReportView)))
                        {
                            inventView  = qr.get(tableNum(InventValueReportView));
                        }

                        if (updateFinancialInventDimParm)
                        {
                            if (isReleaseMemoryFlightEnabled)
                            {
                                financialInventDimParm = null;
                            }
                            financialInventDimParm.data(inventDimParmProduct);
                            financialInventDimParm = InventDimParm::orParms(financialInventDimParm, inventDimParmStorage);
                            financialInventDimParm = InventDimParm::orParms(financialInventDimParm, inventDimParmTracking);
                            isInventDimParmEqual = InventDimParm::isInventDimParmEqual(inventDimParmFilter, InventDimParm::andParms(inventDimParmFilter, financialInventDimParm));
                        }

                        if (isInventDimParmEqual && joinInventDim && (!fetchedInventDim || updateFinancialInventDimParm || qr.changed(tableNum(InventDim))))
                        {
                            fetchedInventDim = qr.get(tableNum(InventDim));
                            // Fields might not have been selected on the specified buffers, or might have been updated since selection
                            fetchedInventDim.checkInvalidFieldAccess(false);

                            // Clear non-financial dimensions (qr.next() is restoring the values)
                            if (isReleaseMemoryFlightEnabled)
                            {
                                inventDim = null;
                            }
                            inventDim.data(this.clearNonFinancialDimensionForInventDim(fetchedInventDim, financialInventDimParm));
                        }

                        updateFinancialInventDimParm = false;

                        if (isInventDimParmEqual && (inventView.Qty || inventView.Amount))
                        {
                            // Update transaction lines
                            if (inventValueReport.DetailLevel == TotalTrans::Trans)
                            {
                                if (this.selectedDate(inventView) <= this.getActualToDate())
                                {
                                    tmpReportLine = this.findReportLine(InventValueReportLineType::Transaction, inventTable, inventItemGroupItem, inventView, inventDim);
                                    this.updateReportLineBalance(tmpReportLine, 1, inventTable, inventView);
                                    this.updateReportLineProfitLoss(tmpReportLine, inventTable, inventView);
                                    this.updateReportLine(tmpReportLine);
                                }

                                // Update beginning balance
                                if (inventValueReport.IncludeBeginningBalance)
                                {
                                    tmpReportLine = this.findReportLine(InventValueReportLineType::BeginningBalance, inventTable, inventItemGroupItem, inventView, inventDim);
                                    this.updateReportLineBalance(tmpReportLine, -1, inventTable, inventView);
                                    this.updateReportLine(tmpReportLine);
                                }
                            }
                            else
                            {
                                // Update ending balance
                                tmpReportLine = this.findReportLine(InventValueReportLineType::EndingBalance, inventTable, inventItemGroupItem, inventView, inventDim);

                                if (this.selectedDate(inventView) > this.getActualToDate())
                                {
                                    this.updateReportLineBalance(tmpReportLine, -1, inventTable, inventView);
                                }
                                else
                                {
                                    this.updateReportLineProfitLoss(tmpReportLine, inventTable, inventView);
                                }

                                this.updateReportLine(tmpReportLine);
                            }
                        }
                    }

                    if (runInBundle)
                    {
                        if (reportLines.len() > 0)
                        {
                            reportLines.insertDatabase();
                        }

                        InventValueItemList inventValueItemListDelete;

                        inventValueItemListDelete.skipEvents(true);
                        inventValueItemListDelete.skipDatabaseLog(true);
                        inventValueItemListDelete.skipDataMethods(true);
                        delete_from inventValueItemListDelete
                            where inventValueItemListDelete.Bundle == inventValueBundleList.RecId;

                        inventValueBundleList.delete();
                        ttscommit;
                    }
                }
            }
        } while (runInBundle && inventValueBundleList && processContinue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyRangesFromContractQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds ranges from <c>InventValueReportTmpLine</c> in the contract query to a data source.
    /// </summary>
    /// <param name="_map">
    ///    A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in the data source.
    /// </param>
    /// <param name="_qbds">
    ///    A <c>QueryBuildDatasource</c> object.
    /// </param>
    protected void copyRangesFromContractQuery(
        Map                     _map,
        QueryBuildDataSource    _qbds /*in-out*/)
    {
        if (inventValueReportContract.parmQuery())
        {
            QueryBuildDataSource qbdsInventValueReportTmpLine = inventValueReportContract.parmQuery().dataSourceTable(tableNum(InventValueReportTmpLine));

            MapEnumerator me = _map.getEnumerator();

            while (me.moveNext())
            {
                QueryBuildRange queryBuildRange = qbdsInventValueReportTmpLine.findRange(me.currentKey());
                if (queryBuildRange != null)
                {
                    SysQuery::findOrCreateRange(_qbds, me.currentValue()).value(queryBuildRange.value());
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findReportLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a report line based on the specific criteria.
    /// </summary>
    /// <param name = "_lineType">Line type.</param>
    /// <param name = "_inventTable">An <c>InventTable</c> record containing the item number.</param>
    /// <param name = "_inventItemGroupItem">An instance of the <c>InventItemGroupItem</c> record, containing the item group Id.</param>
    /// <param name = "_inventView">An instance of the <c>InventValueReportView</c> containing transaction related information.</param>
    /// <param name = "_inventDim">An instance of <c>InventDim</c> record.</param>
    /// <returns>An <c>InventValueReportTmpLine</c> record created based on the given parameters.</returns>
    protected InventValueReportTmpLine findReportLine(
        InventValueReportLineType   _lineType,
        InventTable                 _inventTable,
        InventItemGroupItem         _inventItemGroupItem,
        InventValueReportView       _inventView,
        InventDim                   _inventDim)
    {
        InventValueReportTmpLine    tmpReportLine;

        tmpReportLine.clear();
        tmpReportLine.LineType          = _lineType;
        tmpReportLine.ResourceId        = _inventTable.ItemId;
        tmpReportLine.ResourceGroupId   = _inventItemGroupItem.ItemGroupId;
        tmpReportLine.ResourceType      = this.resourceType();
        tmpReportLine.InventDimFieldsMap::initAllDimensionsFrom(_inventDim);
        switch (_lineType)
        {
            case InventValueReportLineType::Transaction:
                tmpReportLine.TransDate         = _inventView.TransDate;
                tmpReportLine.Voucher           = _inventView.Voucher;
                tmpReportLine.Reference         = _inventView.Reference;
                tmpReportLine.ReferenceCategory = _inventView.ReferenceCategory;
                tmpReportLine.TransBeginTime    = _inventView.TransBeginTime;
                break;
            case InventValueReportLineType::BeginningBalance:
                tmpReportLine.ReferenceCategory = InventTransType::SummedUp;
                tmpReportLine.TransDate = this.getActualFromDate();
                tmpReportLine.TransBeginTime = DateTimeUtil::newDateTime(this.getActualFromDate(), 0, DateTimeUtil::getCompanyTimeZone());
                break;
            case InventValueReportLineType::EndingBalance:
                tmpReportLine.ReferenceCategory = InventTransType::SummedUp;
                tmpReportLine.TransDate = this.getActualToDate();
                tmpReportLine.TransBeginTime = DateTimeUtil::newDateTime(this.getActualToDate(), 0, DateTimeUtil::getCompanyTimeZone());
                break;
        }
        reportLines.find(tmpReportLine);

        return tmpReportLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRangeSetOnReportLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines if a range is set on the <c>InventValueReportTmpLine</c> in the contract query.
    /// </summary>
    /// <param name="_map">
    ///     A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in the data source.
    /// </param>
    /// <param name="_inventDimParmFilter">
    ///     A <c>InventDimParm</c> object that represents the filter fields.
    /// </param>
    /// <returns>
    ///     true, if a range is set; otherwise, false.
    /// </returns>
    protected boolean isRangeSetOnReportLine(Map _map, InventDimParm _inventDimParmFilter = null)
    {
        boolean         ret;

        if (inventValueReportContract.parmQuery())
        {
            MapEnumerator me = _map.getEnumerator();

            while (me.moveNext())
            {
                QueryBuildRange queryBuildRange = inventValueReportContract.parmQuery().dataSourceTable(tableNum(InventValueReportTmpLine)).findRange(me.currentKey());

                if (queryBuildRange != null &&  queryBuildRange.value() != '')
                {
                    ret = true;

                    FieldId inventDimParmFieldId = InventDim::dim2dimParm(me.currentValue());
                    _inventDimParmFilter.(inventDimParmFieldId) = NoYes::Yes;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Join the <c>InventItemGroupItem </c> to the query.
    /// </summary>
    /// <param name="_qbdsParent">
    ///     A <c>QueryBuildDataSource</c> object with the parent data source.
    /// </param>
    /// <param name="_inventDimParm">
    ///     A <c>InventDimParm</c> record with defining which fields to group by.
    /// </param>
    /// <returns>
    ///     A <c>QueryBuildDataSource</c> object with the data source for the joined table.
    /// </returns>
    protected QueryBuildDataSource joinInventDim(
        QueryBuildDataSource    _qbdsParent,
        InventDimParm           _inventDimParm)
    {
        QueryBuildDataSource qbdsInventDim = _qbdsParent.addDataSource(tableNum(InventDim));
        qbdsInventDim.addLink(fieldNum(InventValueReportView, InventDimId), fieldNum(InventDim, InventDimId));
        qbdsInventDim.fetchMode(QueryFetchMode::One2One);
        qbdsInventDim.orderMode(OrderMode::GroupBy);
        _inventDimParm.queryAddGroupByField(qbdsInventDim);
        this.copyRangesFromContractQuery(this.MapReportLineToInventDim(), qbdsInventDim);
        return qbdsInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinInventItemGroupItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Join the <c>InventItemGroupItem </c> to the query.
    /// </summary>
    /// <param name="_qbdsParent">
    ///     A <c>QueryBuildDataSource</c> object with the parent data source.
    /// </param>
    /// <param name="_qbdsInventTable">
    ///     A <c>QueryBuildDataSource</c> object with the data source for <c>InventTable</c>.
    /// </param>
    /// <returns>
    ///     A <c>QueryBuildDataSource</c> object with the data source for the joined table.
    /// </returns>
    protected QueryBuildDataSource joinInventItemGroupItem(
        QueryBuildDataSource    _qbdsParent,
        QueryBuildDataSource    _qbdsInventTable)
    {
        QueryBuildDataSource qbdsInventItemGroupItem = _qbdsParent.addDataSource(tableNum(InventItemGroupItem));
        qbdsInventItemGroupItem.addLink(fieldNum(InventTable, ItemId), fieldNum(InventItemGroupItem, ItemId), _qbdsInventTable.name());
        qbdsInventItemGroupItem.addLink(fieldNum(InventTable, DataAreaId), fieldNum(InventItemGroupItem, ItemDataAreaId), _qbdsInventTable.name());
        qbdsInventItemGroupItem.fetchMode(QueryFetchMode::One2One);
        qbdsInventItemGroupItem.orderMode(OrderMode::GroupBy);
        qbdsInventItemGroupItem.addGroupByField(fieldNum(InventItemGroupItem, ItemGroupId));
        this.copyRangesFromContractQuery(this.MapReportLineToInventItemGroupItem(), qbdsInventItemGroupItem);

        return qbdsInventItemGroupItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinProductDimensionGroupProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Join the <c>EcoResProductDimensionGroupProduct </c> to the query.
    /// </summary>
    /// <param name="_qbdsParent">
    ///     A <c>QueryBuildDataSource</c> object with the parent data source.
    /// </param>
    /// <param name="_qbdsInventTable">
    ///     A <c>QueryBuildDataSource</c> object with the data source for <c>InventTable</c>.
    /// </param>
    /// <returns>
    ///     A <c>QueryBuildDataSource</c> object with the data source for the joined table.
    /// </returns>
    protected QueryBuildDataSource joinProductDimensionGroupProduct(
        QueryBuildDataSource    _qbdsParent,
        QueryBuildDataSource    _qbdsInventTable)
    {
        QueryBuildDataSource qbdsProductDimensionGroupProduct = _qbdsParent.addDataSource(tableNum(EcoResProductDimensionGroupProduct));
        qbdsProductDimensionGroupProduct.addLink(fieldNum(InventTable, Product), fieldNum(EcoResProductDimensionGroupProduct, Product), _qbdsInventTable.name());
        qbdsProductDimensionGroupProduct.joinMode(JoinMode::OuterJoin);
        qbdsProductDimensionGroupProduct.fetchMode(QueryFetchMode::One2One);
        qbdsProductDimensionGroupProduct.orderMode(OrderMode::GroupBy);
        qbdsProductDimensionGroupProduct.addGroupByField(fieldNum(EcoResProductDimensionGroupProduct, ProductDimensionGroup));

        return qbdsProductDimensionGroupProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinStorageDimensionGroupProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Join the <c>EcoResStorageDimensionGroupItem </c> to the query.
    /// </summary>
    /// <param name="_qbdsParent">
    ///     A <c>QueryBuildDataSource</c> object with the parent data source.
    /// </param>
    /// <param name="_qbdsInventTable">
    ///     A <c>QueryBuildDataSource</c> object with the data source for <c>InventTable</c>.
    /// </param>
    /// <returns>
    ///     A <c>QueryBuildDataSource</c> object with the data source for the joined table.
    /// </returns>
    protected QueryBuildDataSource joinStorageDimensionGroupProduct(
        QueryBuildDataSource    _qbdsParent,
        QueryBuildDataSource    _qbdsInventTable)
    {
        QueryBuildDataSource qbdsStorageDimensionGroupItem = _qbdsParent.addDataSource(tableNum(EcoResStorageDimensionGroupItem));
        qbdsStorageDimensionGroupItem.addLink(fieldNum(InventTable, ItemId), fieldNum(EcoResStorageDimensionGroupItem, ItemId), _qbdsInventTable.name());
        qbdsStorageDimensionGroupItem.addLink(fieldNum(InventTable, DataAreaId), fieldNum(EcoResStorageDimensionGroupItem, ItemDataAreaId), _qbdsInventTable.name());
        qbdsStorageDimensionGroupItem.joinMode(JoinMode::OuterJoin);
        qbdsStorageDimensionGroupItem.fetchMode(QueryFetchMode::One2One);
        qbdsStorageDimensionGroupItem.orderMode(OrderMode::GroupBy);
        qbdsStorageDimensionGroupItem.addGroupByField(fieldNum(EcoResStorageDimensionGroupItem, StorageDimensionGroup));

        return qbdsStorageDimensionGroupItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>joinTrackingDimensionGroupProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Join the <c>EcoResTrackingDimensionGroupItem </c> to the query.
    /// </summary>
    /// <param name="_qbdsParent">
    ///     A <c>QueryBuildDataSource</c> object with the parent data source.
    /// </param>
    /// <param name="_qbdsInventTable">
    ///     A <c>QueryBuildDataSource</c> object with the data source for <c>InventTable</c>.
    /// </param>
    /// <returns>
    ///     A <c>QueryBuildDataSource</c> object with the data source for the joined table.
    /// </returns>
    protected QueryBuildDataSource joinTrackingDimensionGroupProduct(
        QueryBuildDataSource    _qbdsParent,
        QueryBuildDataSource    _qbdsInventTable)
    {
        QueryBuildDataSource qbdsTrackingDimensionGroupItem = _qbdsParent.addDataSource(tableNum(EcoResTrackingDimensionGroupItem));
        qbdsTrackingDimensionGroupItem.addLink(fieldNum(InventTable, ItemId), fieldNum(EcoResTrackingDimensionGroupItem, ItemId), _qbdsInventTable.name());
        qbdsTrackingDimensionGroupItem.addLink(fieldNum(InventTable, DataAreaId), fieldNum(EcoResTrackingDimensionGroupItem, ItemDataAreaId), _qbdsInventTable.name());
        qbdsTrackingDimensionGroupItem.joinMode(JoinMode::OuterJoin);
        qbdsTrackingDimensionGroupItem.fetchMode(QueryFetchMode::One2One);
        qbdsTrackingDimensionGroupItem.orderMode(OrderMode::GroupBy);
        qbdsTrackingDimensionGroupItem.addGroupByField(fieldNum(EcoResTrackingDimensionGroupItem, TrackingDimensionGroup));

        return qbdsTrackingDimensionGroupItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapReportLineToInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Map fields from <c>InventValueReportTmpLine</c> to fields in <c>InventDim</c>.
    /// </summary>
    /// <returns>
    ///     A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in <c>InventDim</c>.
    /// </returns>
    protected Map mapReportLineToInventDim()
    {
        Map map = new map(Types::Integer, Types::Integer);

        Enumerator enum = InventDim::dimFieldListEnumerator();
        while (enum.moveNext())
        {
            FieldId fieldIdOnInventDim = enum.current();
            FieldId fieldIdOnTmpTable = InventDimFieldsMap::mappedFieldId(fieldIdOnInventDim, tableStr(InventValueReportTmpLine));
            if (fieldIdOnTmpTable)
            {
                map.insert(fieldIdOnTmpTable, fieldIdOnInventDim);
            }
        }

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapReportLineToInventItemGroupItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Map fields from <c>InventValueReportTmpLine</c> to fields in <c>InventItemGroupItem</c>.
    /// </summary>
    /// <returns>
    ///     A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in <c>InventItemGroupItem</c>.
    /// </returns>
    protected Map mapReportLineToInventItemGroupItem()
    {
        Map map = new map(Types::Integer, Types::Integer);

        map.insert(fieldNum(InventValueReportTmpLine, ResourceGroupId), fieldNum(InventItemGroupItem, ItemGroupId));

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapReportLineToInventTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Map fields from <c>InventValueReportTmpLine</c> to fields in <c>InventTable</c>.
    /// </summary>
    /// <returns>
    ///     A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in <c>InventTable</c>.
    /// </returns>
    protected Map mapReportLineToInventTable()
    {
        Map map = new map(Types::Integer, Types::Integer);

        map.insert(fieldNum(InventValueReportTmpLine, ResourceId), fieldNum(InventTable, ItemId));
        map.insert(fieldNum(InventValueReportTmpLine, RecId), fieldNum(InventTable, RecId));

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapReportLineToReportView</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Map fields from <c>InventValueReportTmpLine</c> to fields in <c>InventValueReportView</c>.
    /// </summary>
    /// <returns>
    ///     A <c>Map</c> object that maps fields from <c>InventValueReportTmpLine</c> to fields in <c>InventValueReportView</c>.
    /// </returns>
    protected Map mapReportLineToReportView()
    {
        Map map = new map(Types::Integer, Types::Integer);

        map.insert(fieldNum(InventValueReportTmpLine, Reference), fieldNum(InventValueReportView, Reference));
        map.insert(fieldNum(InventValueReportTmpLine, ReferenceCategory), fieldNum(InventValueReportView, ReferenceCategory));

        return map;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceType</Name>
				<Source><![CDATA[
    protected InventValueReportResourceType resourceType()
    {
        return InventValueReportResourceType::Material;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns transaction date from the <c>InventValueReportView</c> view.
    /// </summary>
    /// <param name="_inventView">
    /// The <c>InventValueReportView</c> record.
    /// </param>
    /// <returns>
    /// The date of transaction.
    /// </returns>
    private date selectedDate(InventValueReportView _inventView)
    {
        switch (inventValueReport.SelectDateRange)
        {
            case InventValueReportSelectDateRange::TransBeginTime:
                return DateTimeUtil::date(_inventView.TransBeginTime);
            default:
                return _inventView.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportLineBalance</Name>
				<Source><![CDATA[
    protected void updateReportLineBalance(
        InventValueReportTmpLine    _tmpReportLine,
        int                         _sign,
        InventTable                 _inventTable,
        InventValueReportView       _inventView)
    {
        CostAmount  postedAmount;
        CostAmount  nonPostedAmount;
        Qty         postedQty;
        Qty         nonPostedQty;

        if (_inventView.InventTransPostingType == InventTransPostingType::Physical)
        {
            if (_inventView.IsPosted == NoYes::Yes)
            {
                postedQty       = _inventView.Qty * _sign;
                postedAmount    = _inventView.Amount * _sign;
            }
            else
            {
                nonPostedQty    = _inventView.Qty * _sign;
                nonPostedAmount = _inventView.Amount * _sign;
            }

            if (_inventTable.ItemType != ItemType::Service)
            {
                _tmpReportLine.InventoryPhysicalPostedQty        += postedQty;
                _tmpReportLine.InventoryPhysicalPostedAmount     += postedAmount;
                _tmpReportLine.InventoryPhysicalNonPostedQty     += nonPostedQty;
                _tmpReportLine.InventoryPhysicalNonPostedAmount  += nonPostedAmount;
            }

            switch (_inventView.ReferenceCategory)
            {
                case InventTransType::Production:
                case InventTransType::ProdLine:
                case InventTransType::KanbanJobProcess:
                case InventTransType::KanbanJobTransferReceipt:
                case InventTransType::KanbanJobTransferIssue:
                case InventTransType::KanbanJobPickingList:
                case InventTransType::KanbanEmptied:
                case InventTransType::KanbanJobWIP:
                case InventTransType::PmfProdCoBy:
                    _tmpReportLine.wipPhysicalPostedQty                  -= postedQty;
                    _tmpReportLine.wipPhysicalPostedAmount               -= postedAmount;
                    _tmpReportLine.wipPhysicalNonPostedQty               -= nonPostedQty;
                    _tmpReportLine.wipPhysicalNonPostedAmount            -= nonPostedAmount;
                    break;
                case InventTransType::Sales:
                    if (_inventTable.ItemType != ItemType::Service)
                    {
                        _tmpReportLine.DeferredCOGSPhysicalPostedQty         -= postedQty;
                        _tmpReportLine.DeferredCOGSPhysicalPostedAmount      -= postedAmount;
                        _tmpReportLine.DeferredCOGSPhysicalNonPostedQty      -= nonPostedQty;
                        _tmpReportLine.DeferredCOGSPhysicalNonPostedAmount   -= nonPostedAmount;
                    }
                    break;
            }
        }
        else if (_inventView.InventTransPostingType == InventTransPostingType::Financial)
        {
            if (_inventTable.ItemType != ItemType::Service)
            {
                _tmpReportLine.InventoryFinancialQty         += _inventView.Qty  * _sign;
                _tmpReportLine.InventoryFinancialAmount      += _inventView.Amount * _sign;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReportLineProfitLoss</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the profit loss on the report line.
    /// </summary>
    /// <param name = "_tmpReportLine">The report line to update.</param>
    /// <param name = "_inventTable">The item</param>
    /// <param name = "_inventView">The <c>InventValueReportView</c> record.</param>
    protected void updateReportLineProfitLoss(
        InventValueReportTmpLine    _tmpReportLine,
        InventTable                 _inventTable,
        InventValueReportView       _inventView)
    {
        if (_inventView.InventTransPostingType == InventTransPostingType::Financial)
        {
            if (_inventTable.ItemType != ItemType::Service)
            {
                switch (_inventView.ReferenceCategory)
                {
                    case InventTransType::Sales:
                        if (_inventView.PostingTypeOffset != LedgerPostingType::InventStdCostRoundingVariance)
                        {
                            _tmpReportLine.cogsFinancialQty      -= _inventView.Qty;
                            _tmpReportLine.cogsFinancialAmount   -= _inventView.Amount;
                        }
                        break;
                    case InventTransType::InventLossProfit:
                    case InventTransType::InventCounting:
                    case InventTransType::TransferOrderScrap:
                        _tmpReportLine.plFinancialQty        -= _inventView.Qty;
                        _tmpReportLine.plFinancialAmount     -= _inventView.Amount;
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearNonFinancialDimensionForInventDim</Name>
				<Source><![CDATA[
    protected InventDim clearNonFinancialDimensionForInventDim(InventDim _fetchedInventDim, InventDimParm _financialInventDimParm)
    {
        InventDim newInventDim;
        
        newInventDim.data(_fetchedInventDim);
        newInventDim.clearNotSelectedDim(_financialInventDimParm);

        return newInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventValueReportPopulateItem construct()
    {
        return new InventValueReportPopulateItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS323606";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemRangeQuery</Name>
				<Source><![CDATA[
    [SysObsolete('The method is deprecated use createItemRangeQueryRecId instead.', true, 31\1\2022)]
    public static Query createItemRangeQuery(InventValueReportContract inventValueReportContract)
    {
        InventValueReportPopulateItem inventValueReportPopulateItem = InventValueReportPopulateItem::construct();
        inventValueReportPopulateItem.parmInventValueReportContract(inventValueReportContract);
        Query query = new Query();
        QueryBuildDataSource qbdsInventTable = query.addDataSource(tableNum(InventTable));
        inventValueReportPopulateItem.copyRangesFromContractQuery(inventValueReportPopulateItem.MapReportLineToInventTable(), qbdsInventTable);
        qbdsInventTable.addSelectionField(fieldNum(InventTable, ItemId));
        qbdsInventTable.addSortField(fieldNum(InventTable, ItemId));
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemRangeQueryRecId</Name>
				<Source><![CDATA[
    public static Query createItemRangeQueryRecId(InventValueReportContract inventValueReportContract)
    {
        InventValueReportPopulateItem inventValueReportPopulateItem = InventValueReportPopulateItem::construct();
        inventValueReportPopulateItem.parmInventValueReportContract(inventValueReportContract);

        Query query = new Query();
        QueryBuildDataSource qbdsInventTable = query.addDataSource(tableNum(InventTable));
        inventValueReportPopulateItem.copyRangesFromContractQuery(inventValueReportPopulateItem.MapReportLineToInventTable(), qbdsInventTable);

        qbdsInventTable.addSelectionField(fieldNum(InventTable, RecId));
        qbdsInventTable.addSortField(fieldNum(InventTable, RecId));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>