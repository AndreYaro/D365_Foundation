<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymentEInvoiceJourMap_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustPaymentEInvoiceJourMap_MX</c> class provides customers payment information that is
/// required to create the XML document
/// </summary>
class CustPaymentEInvoiceJourMap_MX extends eInvoiceJourBaseMap_MX
{
    CustTrans custTrans;
    XmlNamespaceManager nameSpaceManager;
    XmlDocument xmlDoc;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the currency code, used in the current <c>CustTrans</c>
    /// </summary>
    /// <returns>Customer transaction currency code</returns>
    public CurrencyCode currencyCode()
    {
        return custTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rec id of the logistics postal address of the delivery address.
    /// </summary>
    /// <returns>Returns the rec id of the logistics postal address of the delivery address.</returns>
    protected LogisticsPostalAddressRecId deliveryPostalAddressRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum of the discount that is given in the posted document.
    /// </summary>
    /// <returns>The discount amount that is given in the posted document.</returns>
    public SalesEndDiscAmount endDiscMST()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange rate of the transaction currency code and the company currency code that are used
    /// in the posted document.
    /// </summary>
    /// <returns>The customer transaction exchange rate.</returns>
    public ExchRate exchangeRate()
    {
        return CustTrans.ExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>CustTrans</c> record.
    /// </summary>
    /// <param name="_common">The name of the record to use.</param>
    protected void initCustTrans(Common _common)
    {
        custTrans = _common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initXmlDocAndNsManager</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>XmlDocument</c> and <c>XmlNamespaceManager</c>.
    /// </summary>
    protected void initXmlDocAndNsManager()
    {
        xmlDoc = new XmlDocument();
        xmlDoc.loadXml(eInvoiceJour.xmlDoc);
        nameSpaceManager = new XmlNamespaceManager(xmlDoc.nameTable());
        nameSpaceManager.addNamespace('cfdi', xmlDoc.root().getNamespaceOfPrefix('cfdi'));
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the customer account that has been invoiced.
    /// </summary>
    /// <returns>The customer invoiced account.</returns>
    public CustVendAC invoiceAccount()
    {
        return custTrans.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the order account that has been invoiced.
    /// </summary>
    /// <returns>The order invoiced account.</returns>
    [Hookable(false)]
    public CustVendAC orderAccount()
    {
        return custTrans.OrderAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice ID of the posted document.
    /// </summary>
    /// <returns>The invoice ID of the posted document.</returns>
    public InvoiceId invoiceId()
    {
        return custTrans.Invoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoice date that is related to the posted document.
    /// </summary>
    /// <returns>The transaction date of the posted document.</returns>
    public date invoiceDate()
    {
        return custTrans.TransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicePostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the rec id of the logistics postal address of the invoice address.
    /// </summary>
    /// <returns>Returns the rec id of the logistics postal address of the invoice address.</returns>
    protected LogisticsPostalAddressRecId invoicePostalAddressRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the voucher number that is used for the posted document in the ledger post.
    /// </summary>
    /// <returns>The voucher number of the invoice.</returns>
    public Voucher voucher()
    {
        return custTrans.Voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the RefNum
    /// </summary>
    /// <returns>Returns the RefNum</returns>
    public RefNum refNum()
    {
        return RefNum::SalesOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record ID of the current <c>CustTrans</c> record.
    /// </summary>
    /// <returns>The record ID of the customer transaction.</returns>
    public RefRecId refRecId()
    {
        return custTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID of the <c>CustTrans</c> table.
    /// </summary>
    /// <returns>The table ID of the customer transaction.</returns>
    public TableId refTableId()
    {
        return custTrans.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sales type of the posted document.
    /// </summary>
    /// <returns>The sales type of the posted document.</returns>
    public SalesType salesType()
    {
        return SalesType::Journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>termOfPaymDesc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the terms of payment description used by the posted invoice.
    /// </summary>
    /// <returns>The terms of payment description used by the posted invoice.</returns>
    public Description termOfPaymDesc()
    {
        return PaymTerm::find(custTrans.paymentTerms(custTrans)).Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoicingName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the company name.
    /// </summary>
    /// <returns>The company name.</returns>
    public Name invoicingName()
    {
        return CompanyInfo::find().Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the list of original document lines to be mapped.
    /// </summary>
    /// <returns>A list of records.</returns>
    protected List journalLines()
    {
        List journalLines = new List(Types::Record);

        journalLines.addEnd(custTrans);

        return journalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total discont amount.
    /// </summary>
    /// <returns>
    /// The total discount amount.
    /// </returns>
    public DiscAmount totalDiscountAmountMST()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the sum.
    /// </summary>
    /// <returns>The sum.</returns>
    public AmountCur subTotal()
    {
        Amount subTotal = str2num(xmlDoc.selectSingleNode('cfdi:Comprobante/@SubTotal', nameSpaceManager).innerText());

        return this.isPrintInMST() ?
            CurrencyExchangeHelper::mstAmount(subTotal, custTrans.CurrencyCode, custTrans.TransDate) :
            subTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the total amount of the original transaction.
    /// </summary>
    /// <returns>Source transaction total amount, not including discounts.</returns>
    public AmountCur totalAmount()
    {
        Amount total = str2num(xmlDoc.selectSingleNode('cfdi:Comprobante/@Total', nameSpaceManager).innerText());

        return this.isPrintInMST() ?
            CurrencyExchangeHelper::mstAmount(total, custTrans.CurrencyCode, custTrans.TransDate) :
            total;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalDiscountAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the total discont amount.
    /// </summary>
    /// <returns>
    /// The total discount amount.
    /// </returns>
    public DiscAmount totalDiscountAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustPaymentEInvoiceJourMap_MX construct(Common _common)
    {
        CustPaymentEInvoiceJourMap_MX eInvoiceJourMap;

        switch (_common.TableId)
        {
            case tableNum(CustTrans) :
                eInvoiceJourMap = new CustPaymentEInvoiceJourMap_MX();
                break;

            case tableNum(CustSettlement) :
                eInvoiceJourMap = new CustSettlementEInvoiceJourMap_MX();
                break;

            default :
                throw(error(strFmt("@SYS19306", funcName())));
        }

        eInvoiceJourMap.initCustTrans(_common);
        eInvoiceJourMap.initEInvoice(EInvoiceJour_MX::findByRef(_common.TableId, _common.RecId));
        eInvoiceJourMap.initXmlDocAndNsManager();

        return eInvoiceJourMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>