<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransChangePaymMode</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LedgerJournalTransChangePaymMode extends RunBase
{
    NoYesId             updateAll;
    boolean             update;
    VendPaymMode        paymMode;
    PaymSpec            paymSpec;

    DialogField         dialogPaymMode;
    DialogField         dialogPaymSpec;
    DialogField         dialogAll;

    LedgerJournalId     ledgerJournalId;

    #define.CurrentVersion(2)
    #localmacro.CurrentList
        updateAll,
        ledgerJournalId,
        paymMode,
        paymSpec
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be built by using the <c>Dialog</c> class or by using a class that is created in the
    ///    Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase   dialog  = super();
        ;

        dialogPaymMode = dialog.addFieldValue(extendedtypestr(VendPaymMode), paymMode);
        dialogPaymSpec = dialog.addField(extendedtypestr(VendPaymSpecDlg));
        dialogAll      = dialog.addFieldValue(extendedtypestr(NoYesId), NoYes::Yes, "@SYS10460");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ;
        updateAll   = dialogAll.value();
        paymMode    = dialogPaymMode.value();
        paymSpec    = dialogPaymSpec.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerJournalId parmLedgerJournalId(LedgerJournalId  _ledgerJournalId = ledgerJournalId)
    {
        ;
        ledgerJournalId = _ledgerJournalId;

        return ledgerJournalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PaymMode parmPaymMode(PaymMode _paymMode = paymMode)
    {
        ;
        paymMode = _paymMode;

        return paymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        QueryRun                queryRun;
        LedgerJournalTrans      ledgerJournalTrans;

        queryRun = this.setupQueryRun();

        try
        {
            ttsbegin;

            queryRun.reset();
            while (queryRun.next())
            {
                ledgerJournalTrans = queryRun.get(tablenum(LedgerJournalTrans));

                if (paymMode != ledgerJournalTrans.PaymMode ||
                    paymSpec != ledgerJournalTrans.PaymSpec)
                {
                    if (paymMode != ledgerJournalTrans.PaymMode)
                    {
                        ledgerJournalTrans.PaymMode = paymMode;
                    }

                    if (paymSpec != ledgerJournalTrans.PaymSpec)
                    {
                        ledgerJournalTrans.PaymSpec = paymSpec;
                    }

                    ledgerJournalTrans.paymModeModified();
                    LedgerJournalTrans.paymSpecModified();
                    ledgerJournalTrans.update();
                }
            }
            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupQueryRun</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected QueryRun setupQueryRun()
    {
        Query                   query;
        QueryBuildDataSource    qbdsLedgerJournalTrans;
        QueryBuildRange         queryRangeJournalNum;
        QueryBuildRange         queryRangePaymMode;
        ;

        query = new Query(querystr(LedgerJournalTrans));

        qbdsLedgerJournalTrans = query.dataSourceTable(tablenum(LedgerJournalTrans));
        qbdsLedgerJournalTrans.update(true);

        queryRangeJournalNum = SysQuery::findOrCreateRange(qbdsLedgerJournalTrans, fieldnum(LedgerJournalTrans, JournalNum));
        queryRangeJournalNum.value(queryValue(ledgerJournalId));

        if (!updateAll)
        {
            queryRangePaymMode = SysQuery::findOrCreateRange(qbdsLedgerJournalTrans, fieldnum(LedgerJournalTrans, PaymMode));
            queryRangePaymMode.value(SysQuery::valueEmptyString());
        }

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret;
        Version     version = RunBase::getVersion(_packedClass);

        #localmacro.Version1List
            updateAll,
            paymMode,
            paymSpec
        #endmacro

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;

            case 1:
                [version, #Version1List] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (! VendPaymModeTable::exist(paymMode))
        {
            ret = checkFailed (strfmt("@SYS16654", paymMode));
        }
        if (! VendPaymModeSpec::checkExistForPaymMode(paymSpec, paymMode))
        {
            ret = checkFailed (strfmt("@SYS89166", paymSpec, paymMode));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerJournalTransChangePaymMode construct()
    {
        ;
        return new LedgerJournalTransChangePaymMode();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS79715";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LedgerJournalTransChangePaymMode    ledgerJournalTransChangePaymMode = LedgerJournalTransChangePaymMode::construct();
        LedgerJournalTrans                  ledgerJournalTrans;
        ;

        if (_args && _args.caller()
            && _args.caller().name() == formstr(LedgerJournalTransVendPaym)
            && _args.dataset() == tablenum(LedgerJournalTrans))
        {
            ledgerJournalTrans = _args.record();
            ledgerJournalTransChangePaymMode.getLast();

            ledgerJournalTransChangePaymMode.parmLedgerJournalId(ledgerJournalTrans.JournalNum);
            ledgerJournalTransChangePaymMode.parmPaymMode(ledgerJournalTrans.PaymMode);

            if (ledgerJournalTransChangePaymMode.prompt())
            {
                ledgerJournalTransChangePaymMode.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>