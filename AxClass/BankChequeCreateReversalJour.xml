<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankChequeCreateReversalJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankChequeCreateReversalJour</c> class defines the class variables.
/// </summary>
public class BankChequeCreateReversalJour
{
    BankAccount                 accountID;
    BankChequeNum               chequeNum;

    TransDate                   transDate;
    ReasonCode                  cancelReason;
    ReasonComment               cancelReasonComment;
    boolean                     reconcile;
    LedgerJournalNameId         journalName;

    ReasonRefRecID              reasonTableRefRecID;

    BankAccountTrans            bankAccountTrans;
    BankChequeTable             bankChequeTable;
    BankChequeRecipientType     recipientType;
    CustVendTrans               custVendPaymTrans;

    LedgerJournalTable          ledgerJournalTable;
    LedgerJournalTrans          ledgerJournalTrans;
    LedgerJournalName           ledgerJournalName;

    CustSettlement              custSettlement;
    VendSettlement              vendSettlement;
    SpecTransManager            specTransManager;

    Voucher                     paymVoucher;
    TransDate                   paymDate;
    NumberSeq                   numSeq;
    Voucher                     voucher;

    boolean                     isChequeInterCompany;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createChequeReversalJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Manages all the functions necessary to generate a bank check reversal journal.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    An error has occurred during the creation of the reason reference.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    An error has occurred during the validation and update process on the bank tables.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    An error has occurred during the validation of the related customer or vendor transaction.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    An error has occurred during the creation of the journal header.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    An error has occurred during the creation of the journal voucher.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    An error has occurred during the marking of the settlements.
    /// </exception>
    protected void createChequeReversalJournal()
    {
        ;

        try
        {
            ttsbegin;
            // Create the reason reference to be used for the check reversal
            if (!this.createReasonRefRecID())
            {
                throw error("@SYS107513");
            }

            // Validate and update the bank tables.
            if (!this.validateAndUpdateBankTables())
            {
                throw error("@SYS107513");
            }

            // Validate and set the CustVendTrans.
            if (!this.validateCustVendTrans())
            {
                throw error("@SYS107513");
            }

            this.setPaymDateAndVoucher();

            // Create the ledger journal to be used for the check reversal
            if (!this.createJournal())
            {
                throw error("@SYS107513");
            }

            // Validate and create the 'one-line' voucher for the journal.
            if (!this.createVoucher())
            {
                throw error("@SYS107513");
            }

            // Create the reservations on the settlements being reversed.
            if (!this.createReversalSpecTrans())
            {
                throw error("@SYS107513");
            }
            // <GIN>
            if (TaxParameters::checkTaxParametersExcludingCustoms_IN())
            {
                // Get the offset transaction (either CustTrans or VendTrans based on the recipient).
                custVendPaymTrans = BankChequeCancel::findCustVendTransForCheque(bankChequeTable);
                if (BankChequeCancel::isPartialTaxSettlementProcessRun_IN(custVendPaymTrans))
                {
                    throw error("@GLS62632");
                }
            }
            if (TaxWithholdParameters_IN::checkTaxParameters())
            {
                TaxwithholdTransReverse_IN::checkSettlementProcessRun(bankChequeTable.Voucher, bankChequeTable.TransDate);
            }
            // </GIN>

            ttscommit;
            info(strfmt("@SYS62960", ledgerJournalTable.JournalNum, enum2Value(LedgerJournalType::BankChequeReversal)));
        }

        catch (Exception::Error)
        {
            exceptionTextFallThrough();
            error(strfmt("@SYS117281", enum2Value(LedgerJournalType::BankChequeReversal)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the bank check reversal journal in the <c>LedgerJournalTable</c> table.
    /// </summary>
    /// <returns>
    ///    true if successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The journal created in this method results in an insert to the <c>LedgerJournalTable</c> table.
    ///    Therefore, code for handling optimistic concurrency (OCC) database exceptions is not required.
    /// </remarks>
    protected boolean createJournal()
    {
        NumberSequenceTable     journalNumberSequence = LedgerParameters::numRefJournalNum().numberSequenceTable();

        boolean journalOk = true;

        // Create the journal;
        try
        {
            if (journalNumberSequence.RecId == 0)
            {
                journalOk = checkFailed("@SYS122674");
            }

            if (journalOk &&
                journalNumberSequence.Blocked)
            {
                journalOk = checkFailed(strfmt("@SYS25068", journalNumberSequence.NumberSequence));
            }

            if (journalOk)
            {
                ledgerJournalName = LedgerJournalName::find(journalName);

                if (ledgerJournalName.RecId == 0)
                {
                    journalOk = checkFailed(strfmt("@SYS22462", journalName));
                }

                if (journalOk &&
                    ledgerJournalName.JournalType != LedgerJournalType::BankChequeReversal)
                {
                    journalOk = checkFailed(strfmt("@SYS74909", journalName));
                }

                if (journalOk)
                {
                    ledgerJournalTable.JournalName = ledgerJournalName.JournalName;
                    ledgerJournalTable.JournalNum = JournalTableData::newTable(ledgerJournalTable).nextJournalId();
                    ledgerJournalTable.initFromLedgerJournalName();

                    if (!ledgerJournalTable.validateWrite())
                    {
                        journalOk = false;
                    }
                    else
                    {
                        ledgerJournalTable.write();
                    }
                }
            }
        }
        catch
        {
             exceptionTextFallThrough();
             journalOk = false;
        }

        return journalOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReasonRefRecID</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the value of the <c>reasonTableRefRecID</c> class variable.
    /// </summary>
    /// <returns>
    ///    true if successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The value of the ID can be zero if the <c>cancelReason</c> and <c>cancelReasonComment</c> variables
    ///    are both blank.
    /// </remarks>
    protected boolean createReasonRefRecID()
    {
        boolean         reasonRefOk = true;
        ;

        try
        {
            reasonTableRefRecID = ReasonTableRef::createReasonTableRef(cancelReason, cancelReasonComment);
        }
        catch
        {
             exceptionTextFallThrough();
             reasonRefOk = false;
        }

        return reasonRefOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversalSpecTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the journal's related customer or vendor closed transaction for settlement.
    /// </summary>
    /// <returns>
    ///    true if successful; otherwise, false.
    /// </returns>
    protected boolean createReversalSpecTrans()
    {
        boolean         settlementsOk = true;
        CompanyId       recipientCompany;
        ;

        if (isChequeInterCompany)
        {
            recipientCompany = bankChequeTable.RecipientCompany;
        }
        else
        {
            recipientCompany = bankChequeTable.company();
        }

        try
        {
            switch (recipientType)
            {
                case BankChequeRecipientType::Vend :

                    changecompany(recipientCompany)
                    {
                        // Create SpecTransManager
                        specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);

                        // Mark settlements for reversal
                        while select vendSettlement
                            where vendSettlement.TransCompany == custVendPaymTrans.DataAreaId &&
                                vendSettlement.TransRecId == custVendPaymTrans.RecId &&
                                vendSettlement.CanBeReversed == NoYes::Yes
                        {
                            vendSettlement.CustVendSettlement::markThisAndRelatedOffsets(specTransManager, custVendPaymTrans.CurrencyCode);
                        }
                    }

                    if (specTransManager.getSpecTransCount() > 0)
                    {
                        ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
                        ledgerJournalTrans.update();
                    }

                    break;

                case BankChequeRecipientType::Cust :

                    changecompany(recipientCompany)
                    {
                        // Create SpecTransManager
                        specTransManager = SpecTransManager::newFromSpec(ledgerJournalTrans);

                        // Mark settlements for reversal
                        while select custSettlement
                            where custSettlement.TransCompany == custVendPaymTrans.DataAreaId &&
                                custSettlement.TransRecId == custVendPaymTrans.RecId &&
                                custSettlement.CanBeReversed == NoYes::Yes
                        {
                            custSettlement.CustVendSettlement::markThisAndRelatedOffsets(specTransManager, custVendPaymTrans.CurrencyCode);
                        }
                    }

                    if (specTransManager.getSpecTransCount() > 0)
                    {
                        ledgerJournalTrans.SettleVoucher = SettlementType::SelectedTransact;
                        ledgerJournalTrans.update();
                    }

                    break;
            }
        }
        catch
        {
             exceptionTextFallThrough();
             settlementsOk = false;
        }

        return settlementsOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the voucher in the <c>LedgerJournalTrans</c> table for the bank check reversal journal.
    /// </summary>
    /// <returns>
    ///    true if successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The journal transaction created in this method will result in an insert to the
    ///    <c>LedgerJournalTrans</c> table. Therefore, code for handling optimistic concurrency (OCC) database
    ///    exceptions is not required.
    /// </remarks>
    protected boolean createVoucher()
    {
        NumberSequenceTable     voucherNumberSequence = NumberSequenceTable::find(ledgerJournalName.NumberSequenceTable);
        boolean voucherOk = true;
        BankCheqPrepCancelJourLineType bankCheqPrepCancelJourLineType;

        try
        {
            // create the line.
            if (voucherNumberSequence.RecId == 0)
            {
                voucherOk = checkFailed(strfmt("@SYS102235", voucherNumberSequence.NumberSequence));
            }

            if (voucherOk &&
                voucherNumberSequence.Blocked)
            {
                voucherOk = checkFailed(strfmt("@SYS25068", voucherNumberSequence.NumberSequence));
            }

            if (voucherOk)
            {
                bankCheqPrepCancelJourLineType = BankCheqPrepCancelJourLineType::construct(custVendPaymTrans,
                    bankChequeTable,
                    bankAccountTrans,
                    ledgerJournalName.NumberSequenceTable,
                    ledgerJournalTable.JournalNum,
                    ledgerJournalTable.JournalType,
                    paymVoucher,
                    cancelReasonComment,
                    transDate,
                    reasonTableRefRecID,
                    reconcile);
                 ledgerJournalTrans = bankCheqPrepCancelJourLineType.createCancellingJournalLine();

                if (!ledgerJournalTrans.validateWrite())
                {
                    voucherOk = false;
                }
                else
                {
                    ledgerJournalTrans.write();
                    bankChequeTable.ReversalTableId = ledgerJournalTrans.TableId;
                    bankChequeTable.ReversalRecId   = ledgerJournalTrans.RecId;
                    bankChequeTable.update();
                }
            }
        }
        catch
        {
             exceptionTextFallThrough();
             voucherOk = false;
        }

        return voucherOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal class variables.
    /// </summary>
    /// <param name="_accountID">
    ///    The <c>BankAccount</c> variable for the class.
    /// </param>
    /// <param name="_chequeNum">
    ///    The <c>BankChequeNum</c> variable for the class.
    /// </param>
    /// <param name="_transDate">
    ///    The <c>TransDate</c> variable for the class.
    /// </param>
    /// <param name="_reconcile">
    ///    A Boolean variable used to indicate whether the check must be reconciled at posting.
    /// </param>
    /// <param name="_journalName">
    ///    A <c>LedgerJournalName</c> variable for the class.
    /// </param>
    /// <param name="_cancelReason">
    ///    The <c>ReasonCode</c> variable for the class.
    /// </param>
    /// <param name="_cancelReasonComment">
    ///    The <c>ReasonComment</c> variable for the class.
    /// </param>
    protected void initValues(
        BankAccount         _accountID,
        BankChequeNum       _chequeNum,
        TransDate           _transDate,
        boolean             _reconcile,
        LedgerJournalNameId _journalName,
        ReasonCode          _cancelReason,
        ReasonComment       _cancelReasonComment)

    {
        ;

        accountID           = _accountID;
        chequeNum           = _chequeNum;
        transDate           = _transDate;
        reconcile           = _reconcile;
        journalName         = _journalName;
        cancelReason        = _cancelReason;
        cancelReasonComment = _cancelReasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BankChequeCreateReversalJour</c> class.
    /// </summary>
    /// <remarks>
    ///    Use the <c>newChequeReversalJournal</c> method to create a new instance of this class, rather than
    ///    the <c>new</c> method.
    /// </remarks>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the correct customer or vendor related transaction.
    /// </summary>
    /// <param name="_voucher">
    ///    A voucher value used to find the related customer or vendor transaction.
    /// </param>
    /// <param name="_paymReference">
    ///    A <c>PaymReference</c> data type value used to find the related customer or vendor transaction.
    /// </param>
    /// <returns>
    ///    A <c>CustVendTrans</c> map that represents the related customer or vendor transaction.
    /// </returns>
    protected CustVendTrans paymTrans(Voucher                   _voucher,
                                      PaymReference             _paymReference)
    {
        VendTrans       vendTrans;
        CustTrans       custTrans;
        CustVendTrans   custVendTrans;
        ;

        switch (recipientType)
        {
            case BankChequeRecipientType::Vend :
                select firstonly vendTrans order by RecId asc
                    where vendTrans.Voucher         == _voucher &&
                          vendTrans.PaymReference   == _paymReference;

                custVendTrans = vendTrans;
                break;

            case BankChequeRecipientType::Cust :
                select firstonly custTrans order by RecId asc
                    where custTrans.Voucher         == _voucher &&
                          custTrans.PaymReference   == _paymReference;

                custVendTrans = custTrans;
                break;
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymDateAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the correct values for the <c>paymDate</c> and <c>paymVoucher</c> class variables.
    /// </summary>
    protected void setPaymDateAndVoucher()
    {
        ;

        if (bankAccountTrans.RecId !=0)
        {
             paymDate        = bankAccountTrans.TransDate;
             paymVoucher     = bankAccountTrans.Voucher;
        }
        else
        {
            paymDate        = custVendPaymTrans.TransDate;
            paymVoucher     = custVendPaymTrans.Voucher;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateBankAccountTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and updates the <c>BankAccountTrans</c> record related to the check reversal.
    /// </summary>
    /// <returns>
    ///    true if successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A <c>BankAccountTrans</c> record is not required in order to create the bank check reversal journal.
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict on the <c>BankAccountTrans</c> table could not be resolved.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict on the <c>BankAccountTrans</c> table could not be resolved.
    /// </exception>
    protected boolean validateAndUpdateBankAccountTrans()
    {
        #OCCRetryCount
        boolean validateOk = true;
        ;
        try
        {
            // Find the associated BankAccountTrans record.
            bankAccountTrans = BankAccountTrans::findByAccountIDAndChequeNum(accountID, chequeNum, true);

            if (bankAccountTrans.RecId !=0)
            {
                if (bankAccountTrans.Reconciled)
                {
                    validateOk = checkFailed(strfmt("@SYS23526", chequeNum));
                }

                if (validateOk && bankAccountTrans.Cancel)
                {
                    validateOk = checkFailed(strfmt("@SYS99596", chequeNum));
                }

                if (validateOk && bankAccountTrans.CancelPending)
                {
                   validateOk = checkFailed(strfmt("@SYS117282", chequeNum));
                }

                if (validateOk)
                {
                    // Update the BankAccountTrans for the 'Pending cancellation'
                    bankAccountTrans.CancelPending = NoYes::Yes;
                    bankAccountTrans.ReasonRefRecID = ReasonTableRef::checkCreateInCompany(reasonTableRefRecID, bankAccountTrans.DataAreaId);

                    if (!bankAccountTrans.validateWrite())
                    {
                        validateOk = false;
                    }
                    else
                    {
                        bankAccountTrans.write();
                    }
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
            validateOk = false;
        }

        return validateOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateBankChequeTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates and updates a <c>BankChequeTable</c> record related to the check reversal.
    /// </summary>
    /// <returns>
    ///    true if successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A <c>BankChequeTable</c> record is required in order to create the bank check reversal journal.
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict on the <c>BankChequeTable</c> table could not be resolved.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict on the <c>BankChequeTable</c> table could not be resolved.
    /// </exception>
    protected boolean validateAndUpdateBankChequeTable()
    {
        #OCCRetryCount
        boolean validateOk = true;
        ;

        try
        {
           // Find and validate the check number.
            bankChequeTable = BankChequeTable::find(accountID, chequeNum, true);

            if (bankChequeTable.RecId == 0)
            {
                validateOk = checkFailed(strfmt("@SYS28260", accountID, chequeNum));
            }

            if (validateOk && bankChequeTable.ChequeStatus == ChequeStatus::Cancelled)
            {
                validateOk = checkFailed(strfmt("@SYS99596", chequeNum));
            }

            if (validateOk && bankChequeTable.ChequeStatus == ChequeStatus::CancelPending)
            {
                validateOk = checkFailed(strfmt("@SYS117282", chequeNum));
            }

            if (validateOk)
            {
                if (bankChequeTable.RecipientCompany != '' && bankChequeTable.company() != bankChequeTable.RecipientCompany)
                {
                    isChequeInterCompany = true;
                }
                else
                {
                    isChequeInterCompany = false;
                }

                // Update the BankChequeTable for the 'Pending cancellation'
                bankChequeTable.ChequeStatus = ChequeStatus::CancelPending;
                bankChequeTable.ReasonRefRecID = ReasonTableRef::checkCreateInCompany(reasonTableRefRecID, bankChequeTable.DataAreaId);

                if (!bankChequeTable.validateWrite())
                {
                    validateOk = false;
                }
                else
                {
                    bankChequeTable.write();
                }
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
            validateOk = false;
        }

        return validateOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndUpdateBankTables</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Manages the validation and updating of the related bank tables.
    /// </summary>
    /// <returns>
    ///    true if successful; otherwise, false.
    /// </returns>
    protected boolean validateAndUpdateBankTables()
    {
        boolean validateOk = true;
        ;

        validateOk = this.validateAndUpdateBankAccountTrans();

        if (validateOk)
        {
            validateOk = this.validateAndUpdateBankChequeTable();
        }

        return validateOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustVendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the related customer or vendor transaction.
    /// </summary>
    /// <returns>
    ///    true if successful; otherwise, false.
    /// </returns>
    protected boolean validateCustVendTrans()
    {
        boolean validateOk = true;
        ;

        // Set the receipientType.
        recipientType = bankChequeTable.RecipientType;

        // Get the offset transaction (either CustTrans or VendTrans based on the recipient).
        custVendPaymTrans = BankChequeCancel::findCustVendTransForCheque(bankChequeTable);

        if (custVendPaymTrans.RecId == 0)
        {
            switch (recipientType)
            {
                case BankChequeRecipientType::Vend :
                    validateOk = checkFailed(strfmt("@SYS117284",
                                                    bankChequeTable.Voucher,  chequeNum));
                    break;

                case BankChequeRecipientType::Cust :
                    validateOk = checkFailed(strfmt("@SYS117285",
                                                    bankChequeTable.Voucher,  chequeNum));
                    break;
            }
        }
        // Is the transaction date selected for the reversal ok?
        else if (transDate < custVendPaymTrans.TransDate)
        {
            validateOk = checkFailed("@SYS91442");
        }

        return validateOk;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BankChequeCreateReversalJour</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>BankChequeCreateReversalJour</c> class.
    /// </returns>
    protected static BankChequeCreateReversalJour construct()
    {

        return new BankChequeCreateReversalJour();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newChequeReversalJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs all the functions necessary to generate a bank check reversal journal.
    /// </summary>
    /// <param name="_accountID">
    ///    The bank account of the check selected to be reversed.
    /// </param>
    /// <param name="_chequeNum">
    ///    The check number of the check selected to be reversed.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date of the check reversal.
    /// </param>
    /// <param name="_reconcile">
    ///    A Boolean variable used to indicate whether the check must be reconciled at posting.
    /// </param>
    /// <param name="_journalName">
    ///    The journal name selected for the journal.
    /// </param>
    /// <param name="_cancelReason">
    ///    The reason code for the check reversal; optional.
    /// </param>
    /// <param name="_cancelReasonComment">
    ///    The reason comment for the check reversal; optional.
    /// </param>
    public static void newChequeReversalJournal(
        BankAccount         _accountID,
        BankChequeNum       _chequeNum,
        TransDate           _transDate,
        boolean             _reconcile,
        LedgerJournalNameId _journalName,
        ReasonCode          _cancelReason = "",
        ReasonComment       _cancelReasonComment = "")
    {
        BankChequeCreateReversalJour bankChequeCreateReversalJour;
        ;

        Debug::assert(_accountID != "");
        Debug::assert(_chequeNum != "");
        Debug::assert(_transDate != dateNull());
        Debug::assert(_journalName != "");

        // <GBR>
        if (BrazilParameters::isEnabled() && BankChequeTable::find(_accountID, _chequeNum).RecipientType == BankChequeRecipientType::Vend)
        {
            bankCHequeCreateReversalJour = BankChequeCreateReversalJour_BR::construct();
        }
        else
        {
        // </GBR>

        bankChequeCreateReversalJour = BankChequeCreateReversalJour::construct();
        // <GBR>
        }
        // </GBR>

        bankChequeCreateReversalJour.initValues(_accountID,
                                                _chequeNum,
                                                _transDate,
                                                _reconcile,
                                                _journalName,
                                                _cancelReason,
                                                _cancelReasonComment);

        bankChequeCreateReversalJour.createChequeReversalJournal();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>