<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqRefTypeDescriptor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>ReqRefTypeDescriptor</c> describes the reference types.
/// </summary>
[ReqRefTypeDescriptorFactory(ReqRefType::None)]
class ReqRefTypeDescriptor
{
    private static Set transferTypes;

    #ReqSupplyDemandScheduleTypes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>derivedRefType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the derived reference type.
    /// </summary>
    /// <returns>A <c>ReqRefType</c> value if applicable; otherwise, returns none.</returns>
    public ReqRefType derivedRefType()
    {
        return ReqRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReqActionApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies whether <c>ReqActionApplyToOrder</c> implements an action applicable for the reference type.
    /// </summary>
    /// <returns></returns>
    public boolean isReqActionApplicable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentRefType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the parent reference type.
    /// </summary>
    /// <returns>A <c>ReqRefType</c> value if applicable; otherwise, returns none.</returns>
    public ReqRefType parentRefType(ReqTrans _reqTrans = null)
    {
        return ReqRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refTypeShort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the <c>ReqRefTypeShort</c>.
    /// </summary>
    /// <returns>A <c>ReqRefTypeShort</c> value if applicable; otherwise, returns invent on hand as the default.</returns>
    public ReqRefTypeShort refTypeShort()
    {
        return ReqRefTypeShort::InventOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReserveWorkCenterCapacity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a requirement type can reserve work center capacity.
    /// </summary>
    /// <returns>
    /// true if the requirement type can reserve work center capacity; otherwise, false.
    /// </returns>
    public boolean canReserveWorkCenterCapacity()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveRoute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified requirement type can have a route attached.
    /// </summary>
    /// <returns>
    /// true if the requirement type can have a route attached; otherwise, false.
    /// </returns>
    public boolean canHaveRoute()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the <c>InventTransType</c> for reference type.
    /// </summary>
    /// <returns>A <c>InventTransType</c> value.</returns>
    public InventTransType inventTransType()
    {
        return InventTransType::InventTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqExplodeType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the default <c>ReqExplodeType</c>.
    /// </summary>
    /// <returns>A <c>ReqExplodeType</c> object.</returns>
    public ReqExplodeType reqExplodeType()
    {
        return ReqExplodeType::Down;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveBOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the specified requirement type can have a bill of materials attached.
    /// </summary>
    /// <returns>
    /// true if the requirement type can have a bill of materials attached; otherwise, false.
    /// </returns>
    public boolean canHaveBOM()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveKanbanRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified requirement type can have a kanban rule attached.
    /// </summary>
    /// <returns>
    /// true if the requirement type can have a kanban rule attached; otherwise, false.
    /// </returns>
    public boolean canHaveKanbanRule()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified requirement type is a receipt.
    /// </summary>
    /// <returns>
    /// true if the requirement type is a receipt; otherwise, false.
    /// </returns>
    public boolean isReceipt()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPOType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the <c>ReqPOType</c>.
    /// </summary>
    /// <returns>A <c>ReqPOType</c> value.</returns>
    public ReqPOType reqPOType()
    {
        return ReqPOType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReqRefType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of <c>ReqRefTypeDescriptor</c> class for the given <c>ReqRefType</c>.
    /// </summary>
    /// <param name = "_reqRefType">The reference type.</param>
    /// <returns>A singleton instance.</returns>
    public static ReqRefTypeDescriptor newFromReqRefType(ReqRefType _reqRefType)
    {
        ReqRefTypeDescriptorFactoryAttribute attr = new ReqRefTypeDescriptorFactoryAttribute(_reqRefType);
        ReqRefTypeDescriptor reqRefTypeDescriptor = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(ReqRefTypeDescriptor), attr);

        return reqRefTypeDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransferTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the set of transfer reference types.
    /// </summary>
    /// <returns>The set of transfer reference types.</returns>
    /// <remarks>
    /// Remember to define the neutral group if you are adding a new transfer type (see the <c>neutralGroupForTransferType</c> method).
    /// </remarks>
    protected static Set buildTransferTypes()
    {
        Set transferTypesLocal = new Set(Types::Enum);

        transferTypesLocal.add(ReqRefType::InventJournal);
        transferTypesLocal.add(ReqRefType::InventTransfer);
        transferTypesLocal.add(ReqRefType::TransferOrderShip);
        transferTypesLocal.add(ReqRefType::TransferOrderReceive);
        transferTypesLocal.add(ReqRefType::Quarantine);
        transferTypesLocal.add(ReqRefType::Kanban);
        transferTypesLocal.add(ReqRefType::KanbanLine);

        return transferTypesLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferTypes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the set of reference types which correspond to inventory documents 
    /// which can transfer products from one set of inventory dimensions to another.
    /// </summary>
    /// <returns>
    /// The set of reference types corresponding to inventory documents
    /// which can transfer products from one set of inventory dimensions to another.
    /// </returns>
    public static Set transferTypes()
    {
        if (!ReqRefTypeDescriptor::transferTypes)
        {
            ReqRefTypeDescriptor::transferTypes = ReqRefTypeDescriptor::buildTransferTypes();
        }

        return ReqRefTypeDescriptor::transferTypes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>neutralGroupForTransferRefType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the group of neutral transactions for the specified transfer reference type.
    /// </summary>
    /// <param name = "_transferRefType">Transfer reference type.</param>
    /// <returns>The group of neutral transactions for the specified transfer reference type.</returns>
    /// <exception cref="Exception::Error">An error is thrown if the group for the specified type is not defined.</exception>
    public static ReqTransNeutralRefTypeGroup neutralGroupForTransferRefType(ReqRefType _transferRefType)
    {
        switch (_transferRefType)
        {
            case ReqRefType::InventJournal:
                return ReqTransNeutralRefTypeGroup::InventJournal;

            case ReqRefType::InventTransfer:
                return ReqTransNeutralRefTypeGroup::TransferJournal;

            case ReqRefType::TransferOrderShip:
            case ReqRefType::TransferOrderReceive:
                return ReqTransNeutralRefTypeGroup::TransferOrder;

            case ReqRefType::Quarantine:
                return ReqTransNeutralRefTypeGroup::Quarantine;

            case ReqRefType::Kanban:
            case ReqRefType::KanbanLine:
                return ReqTransNeutralRefTypeGroup::Kanban;

            default:
                return ReqTransNeutralRefTypeGroup::None;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>