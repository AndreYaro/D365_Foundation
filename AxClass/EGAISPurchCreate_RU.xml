<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EGAISPurchCreate_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EGAISPurchCreate_RU extends RunBase
{
    EGAISWaybillJour_RU     waybillJour;
    RefRecId                waybillJourRecId;

    protected const int CurrentVersion = 1;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice that is stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, <c>initParmDefault</c> method
    ///    will be called. Normally, this method should not be overridden. In this child class, this method
    ///    does nothing.
    /// </remarks>
    public void getLast()
    {
        // We do not want to call super here as we do not want to get the record from SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    private void initParameters()
    {
        waybillJour = EGAISWaybillJour_RU::findRecId(waybillJourRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, waybillJourRecId];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWaybillJourRecId</Name>
				<Source><![CDATA[
    public RefRecId parmWaybillJourRecId(RefRecId _waybillJourRecId = waybillJourRecId)
    {
        waybillJourRecId = _waybillJourRecId;

        return waybillJourRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        #OCCRetryCount
        PurchAutoCreate purchAutoCreate;

        setPrefix(EGAISPurchCreate_RU::description());

        if (!this.validate())
        {
            throw error("@SYS18447");
        }

        try
        {
            ttsBegin;

            this.initParameters();
            purchAutoCreate = PurchAutoCreate::construct(waybillJour);
            purchAutoCreate.create();

            ttsCommit;

        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves the last choice by using the <c>pack</c> method.
    /// </summary>
    /// <remarks>
    ///    This method should not normally be overridden. In this child class, this method does nothing.
    /// </remarks>
    public void saveLast()
    {
        //We do not want to call super here as we do not want to save a record in SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = conPeek(_packedClass, 1);

        switch (version)
        {
            case CurrentVersion:
                [version, waybillJourRecId] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;
        EGAISWaybillJour_RU waybillJourLoc = EGAISWaybillJour_RU::findRecId(waybillJourRecId);

        ret = super(_calledFrom);

        if (!waybillJourLoc.canPurchBeCreated())
        {
            ret = checkFailed(strFmt("@EGAIS:PurchaseOrderCannotBeCreatedForTheEgaisBolNumberDa", waybillJourLoc.WaybillNum, waybillJourLoc.WaybillDate));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static EGAISPurchCreate_RU construct()
    {
        return new EGAISPurchCreate_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@EGAIS:CreatePurchaseOrderBasedOnTheEgaisBol";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EGAISPurchCreate_RU     runClass;
        FormDataSource          formDataSource;

        if (!_args || _args.dataset() != tableNum(EGAISWaybillJour_RU))
        {
            throw error(strFmt("@SYS25516",EGAISPurchCreate_RU::description()));
        }

        runClass = EGAISPurchCreate_RU::newFromWaybillJour(_args.record());

        if (runClass.prompt())
        {
            runClass.runOperation();

            if (_args && _args.record() && _args.record().isFormDataSource())
            {
                formDataSource = _args.record().dataSource();

                if (formDataSource)
                {
                    formDataSource.research(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaybillJour</Name>
				<Source><![CDATA[
    public static EGAISPurchCreate_RU newFromWaybillJour(EGAISWaybillJour_RU  _waybillJour)
    {
        EGAISPurchCreate_RU  runClass;

        runClass = EGAISPurchCreate_RU::construct();
        runClass.parmWaybillJourRecId(_waybillJour.RecId);

        return runClass;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>