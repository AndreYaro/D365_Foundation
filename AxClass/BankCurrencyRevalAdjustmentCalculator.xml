<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalAdjustmentCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankCurrencyRevalAdjustmentCalculator</c> class is used for providing calculations for Bank - foreign currency revaluation process.
/// </summary>
internal final class BankCurrencyRevalAdjustmentCalculator
{
    private CurrencyExchangeHelper currencyExchangeHelper;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCompanyExchangeDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>BankCurrencyRevalAdjustmentCalculator</c> class given a company and exchange rate date.
    /// </summary>
    /// <param name = "_companyInfoRecId">The RecId of the company that is associated with the calculations.</param>
    /// <param name = "_exchangeDate">The exchange rate date used to do the calculations.</param>
    /// <returns>A new instance of the <c>BankCurrencyRevalAdjustmentCalculator</c> class.</returns>
    internal static BankCurrencyRevalAdjustmentCalculator newFromCompanyExchangeDate(CompanyInfoRecId _companyInfoRecId, TransDate _exchangeDate)
    {
        BankCurrencyRevalAdjustmentCalculator bankCurrencyRevalAdjustmentCalculator = new BankCurrencyRevalAdjustmentCalculator();

        bankCurrencyRevalAdjustmentCalculator.currencyExchangeHelper =
            CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(_companyInfoRecId), _exchangeDate);

        return bankCurrencyRevalAdjustmentCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAccountingCurrencyAdjustmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the adjustment amount for the accounting currency.
    /// </summary>
    /// <param name = "_bankCurrencyRevalTmp">The <c>BankCurrencyRevalTmp</c> table buffer used to calculate the adjustment values.</param>
    /// <returns>The value of the adjustment amount for the accounting currency.</returns>
    internal AmountMST calculateAccountingCurrencyAdjustmentAmount(BankCurrencyRevalTmp _bankCurrencyRevalTmp)
    {
        AmountMST accountingCurrencyNow;

        if (_bankCurrencyRevalTmp.BankCurrencyAmount != 0)
        {
            currencyExchangeHelper.parmExchangeRateTypeRecId(_bankCurrencyRevalTmp.ExchangeRateType);

            accountingCurrencyNow = currencyExchangeHelper.calculateTransactionToAccounting(
                _bankCurrencyRevalTmp.BankCurrencyCode,
                _bankCurrencyRevalTmp.BankCurrencyAmount,
                true);
        }

        return (accountingCurrencyNow - _bankCurrencyRevalTmp.AccountingCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReportingCurrencyAdjustmentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the adjustment amount for the reporting currency.
    /// </summary>
    /// <param name = "_bankCurrencyRevalTmp">The <c>BankCurrencyRevalTmp</c> table buffer used to calculate the adjustment values.</param>
    /// <returns>The value of the adjustment amount for the reporting currency.</returns>
    internal AmountMSTSecondary calculateReportingCurrencyAdjustmentAmount(BankCurrencyRevalTmp _bankCurrencyRevalTmp)
    {
        AmountMSTSecondary reportingCurrencyAdjustment;
        
        if (Ledger::reportingCurrency(CompanyInfo::current()))
        {
            AmountMSTSecondary reportingCurrencyNow;

            if (_bankCurrencyRevalTmp.BankCurrencyAmount != 0)
            {
                currencyExchangeHelper.parmReportingExchangeRateTypeRecId(_bankCurrencyRevalTmp.ReportingCurrencyExchangeRateType);

                reportingCurrencyNow = currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(
                    _bankCurrencyRevalTmp.BankCurrencyCode,
                    _bankCurrencyRevalTmp.BankCurrencyAmount);
            }

            reportingCurrencyAdjustment = reportingCurrencyNow - _bankCurrencyRevalTmp.ReportingCurrencyAmount;
        }

        return reportingCurrencyAdjustment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>