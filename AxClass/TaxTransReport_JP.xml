<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransReport_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
			
/// <summary>
///    The <c>TaxTransReport_JP</c> class is the child class derived from the <c>TaxTransReport</c> class.
///    It's used to customize filling temporary tables for japan and finnish functionality.
/// </summary>
class TaxTransReport_JP extends TaxTransReport
{
    private const TaxValue TaxValue0 = 0;
    const TaxValue TaxValue3 = 3;
    const TaxValue TaxValue5 = 5;
    const TaxValue TaxValue8 = 8;
    const TaxValue TaxValue10 = 10;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check whether it is credit note.
    /// </summary>
    /// <param name="_taxTrans">
    /// Tax transaction records.
    /// </param>
    /// <returns>
    /// Yes or no.
    /// </returns>
    NoYesId isCreditNote(TaxTrans _taxTrans)
    {
        TaxTrans            taxTransTotal;
        NoYes               creditNote;
        amount              totalvoucherAmount=0;
        NoYes               prevcreditNote=NoYes::No;
        NoYes               goThrough= NoYes::Yes;

        while select sum(TaxBaseAmount), sum(TaxAmount)
            from taxTransTotal
            group by TransDate, Voucher, TaxDirection
            where taxTransTotal.Voucher    == _taxTrans.Voucher
                && taxTransTotal.TransDate == _taxTrans.TransDate
        {
            totalvoucherAmount += taxTransTotal.TaxBaseAmount;
            if (goThrough     == NoYes::Yes
                || creditNote != prevcreditNote)
            {
                goThrough       = NoYes::No;
                prevcreditNote  = creditNote;

                if (taxTransTotal.TaxBaseAmount)
                {
                    if ((taxTransTotal.TaxDirection     == TaxDirection::IncomingTax
                        || taxTransTotal.TaxDirection   == TaxDirection::UseTax
                        || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptPurchase)
                        && taxTransTotal.TaxBaseAmount  > 0)
                    {
                        creditNote = NoYes::No;
                    }
                    else
                    {
                        if ((taxTransTotal.TaxDirection     == TaxDirection::IncomingTax
                            || taxTransTotal.TaxDirection   == TaxDirection::UseTax
                            || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptPurchase)
                            && taxTransTotal.TaxBaseAmount  < 0)
                        {
                            creditNote = NoYes::Yes;
                        }
                        else
                        {
                            if ((taxTransTotal.TaxDirection     == TaxDirection::OutgoingTax
                                || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptSales)
                                && taxTransTotal.TaxBaseAmount  > 0)
                            {
                                creditNote = NoYes::Yes;
                            }
                            else
                            {
                                if ((taxTransTotal.TaxDirection     == TaxDirection::OutgoingTax
                                    || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptSales)
                                    && taxTransTotal.TaxBaseAmount  < 0)
                                {
                                    creditNote = NoYes::No;
                                }
                            }
                        }
                    }

                    if (prevcreditNote != creditNote)
                    {
                        if ((taxTransTotal.TaxDirection     == TaxDirection::IncomingTax
                            || taxTransTotal.TaxDirection   == TaxDirection::UseTax
                            || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptPurchase)
                            && totalvoucherAmount           > 0)
                        {
                            creditNote = NoYes::No;
                        }
                        else
                        {
                            if ((taxTransTotal.TaxDirection     == TaxDirection::IncomingTax
                                || taxTransTotal.TaxDirection   == TaxDirection::UseTax
                                || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptPurchase)
                                && totalvoucherAmount           < 0)
                            {
                                creditNote = NoYes::Yes;
                            }
                            else
                            {
                                if ((taxTransTotal.TaxDirection     == TaxDirection::OutgoingTax
                                    || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptSales)
                                    && totalvoucherAmount           > 0)
                                {
                                    creditNote = NoYes::Yes;
                                }
                                else
                                {
                                    if ((taxTransTotal.TaxDirection     == TaxDirection::OutgoingTax
                                        || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptSales)
                                        && totalvoucherAmount           < 0)
                                    {
                                        creditNote = NoYes::No;
                                    }
                                }
                            }
                        }
                    }
                }
                else
                {
                    if ((taxTransTotal.TaxDirection     == TaxDirection::IncomingTax
                        || taxTransTotal.TaxDirection   == TaxDirection::UseTax
                        || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptPurchase)
                        && taxTransTotal.TaxBaseAmount  == 0
                        && taxTransTotal.TaxAmount      > 0)
                    {
                        creditNote = NoYes::No;
                    }
                    else
                    {
                        if ((taxTransTotal.TaxDirection     == TaxDirection::IncomingTax
                            || taxTransTotal.TaxDirection   == TaxDirection::UseTax
                            || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptPurchase)
                            && taxTransTotal.TaxBaseAmount  == 0
                            && taxTransTotal.TaxAmount      < 0)
                        {
                            creditNote = NoYes::Yes;
                        }
                        else
                        {
                            if ((taxTransTotal.TaxDirection     == TaxDirection::OutgoingTax
                                || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptSales)
                                && taxTransTotal.TaxBaseAmount  == 0
                                && taxTransTotal.TaxAmount      > 0)
                            {
                                creditNote = NoYes::Yes;
                            }
                            else
                            {
                                if ((taxTransTotal.TaxDirection     == TaxDirection::OutgoingTax
                                    || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptSales)
                                    && taxTransTotal.TaxBaseAmount  == 0
                                    && taxTransTotal.TaxAmount      < 0)
                                {
                                    creditNote = NoYes::No;
                                }
                            }
                        }
                    }

                    if (prevcreditNote != creditNote)
                    {
                        if ((taxTransTotal.TaxDirection     == TaxDirection::IncomingTax
                            || taxTransTotal.TaxDirection   == TaxDirection::UseTax
                            || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptPurchase)
                            && totalvoucherAmount           == 0
                            && taxTransTotal.TaxAmount      > 0)
                        {
                            creditNote = NoYes::No;
                        }
                        else
                        {
                            if ((taxTransTotal.TaxDirection     == TaxDirection::IncomingTax
                                || taxTransTotal.TaxDirection   == TaxDirection::UseTax
                                || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptPurchase)
                                && totalvoucherAmount           == 0
                                && taxTransTotal.TaxAmount      < 0)
                            {
                                creditNote = NoYes::Yes;
                            }
                            else
                            {
                                if ((taxTransTotal.TaxDirection     == TaxDirection::OutgoingTax
                                    || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptSales)
                                    && totalvoucherAmount           == 0
                                    && taxTransTotal.TaxAmount      > 0)
                                {
                                    creditNote = NoYes::Yes;
                                }
                                else
                                {
                                    if ((taxTransTotal.TaxDirection     == TaxDirection::OutgoingTax
                                        || taxTransTotal.TaxDirection   == TaxDirection::TaxExemptSales)
                                        && totalvoucherAmount           == 0
                                        && taxTransTotal.TaxAmount      < 0)
                                    {
                                        creditNote = NoYes::No;
                                    }
                                }
                            }
                        }
                    }
                }
            }
        }

        return creditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByReportId_Table</Name>
				<Source><![CDATA[
    /// <summary>
    /// Read TmpTaxReportById table.
    /// </summary>
    /// <param name="_fromDate">
    /// Start date.
    /// </param>
    /// <param name="_toDate">
    /// End date.
    /// </param>
    /// <param name="_taxPeriod">
    /// Tax period.
    /// </param>
    /// <param name="_taxRepVersion">
    /// Tax report version.
    /// </param>
    /// <param name="_taxRepCcounter">
    /// Tax report ... counter.
    /// </param>
    /// <param name="_reported">
    /// Whether it is reported.
    /// </param>
    /// <param name="_debitCredit">
    /// Debit or credit?
    /// </param>
    /// <param name="_versionMin">
    /// Minimum version.
    /// </param>
    /// <param name="_versionMax">
    /// Maximum version.
    /// </param>
    /// <returns>
    /// TmpTaxReportById record.
    /// </returns>
    TmpTaxReportById taxAmountByReportId_Table(
        TransDate           _fromDate,
        TransDate           _toDate,
        TaxPeriod           _taxPeriod,
        TaxRepVersion       _taxRepVersion,
        TaxVersion          _taxRepCcounter,
        NoYes               _reported,
        DebCredProposal     _debitCredit,
        Counter             _versionMin,
        Counter             _versionMax)
    {
        TaxTrans            taxTrans;
        TmpTaxReportById    tmpTaxReportById;
        TransDate           previousTransdate;
        Voucher             previousVoucher;
        NoYesId             isCreditNote;

        ttsbegin;

        while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST)
            from taxTrans
            group by TransDate, Voucher, TaxDirection, TaxCode, TaxValue
            where taxTrans.TransDate        >= _fromDate
               && taxTrans.TransDate        <= _toDate
               && taxTrans.TaxPeriod        == _taxPeriod
               && taxTrans.TaxOrigin        != TaxOrigin::TaxReporting
               && taxTrans.TaxRepCounter    >= _versionMin
               && taxTrans.TaxRepCounter    <= _versionMax
               && (taxTrans.TaxValue        == TaxValue3
               ||  taxTrans.TaxValue        == TaxValue5
               ||  taxTrans.TaxValue        == TaxValue8
               ||  taxTrans.TaxValue        == TaxValue10
               ||  taxTrans.TaxValue        == TaxValue0)
        {
            if (previousVoucher      != taxTrans.Voucher
                || previousTransdate != taxTrans.TransDate)
            {
                isCreditNote      = this.isCreditNote(taxTrans);
                previousVoucher   = taxTrans.Voucher;
                previousTransdate = taxTrans.TransDate;
            }

            if (_debitCredit == DebCredProposal::Credit)
            {
                if (isCreditNote)
                {
                    tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById,
                                                                                   isCreditNote,
                                                                                   null,
                                                                                   TaxReportLayout::Japan);
                }
            }
            else
            {
                if (_debitCredit == DebCredProposal::Debit)
                {
                    if (! isCreditNote)
                    {
                        tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById,
                                                                                       isCreditNote,
                                                                                       null,
                                                                                       TaxReportLayout::Japan);
                    }
                }
                else
                {
                    tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById,
                                                                                   isCreditNote,
                                                                                   null,
                                                                                   TaxReportLayout::Japan);
                }
            }
        }

        ttscommit;

        return tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxValueMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the Japan layout and existing tax value
    /// </summary>
    /// <param name = "_taxReportLayout">
    /// Report layout
    /// </param>
    /// <param name = "_taxValue">
    /// Tax value
    /// </param>
    /// <returns>True for caculating tax base amount or amount by tax value; otherwise, false</returns>
    public static boolean isTaxValueMatched(TaxReportLayout _taxReportLayout, TaxValue _taxValue)
    {
        return (_taxReportLayout == TaxReportLayout::Japan) && _taxValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>matchTaxValueSelect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds <c>TmpTaxReportById</c> record by sales tax reporting code and tax value
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    /// <c>TmpTaxReportById</c>
    /// </param>
    /// <param name = "_taxReportField">
    /// Sales tax reporting code
    /// </param>
    /// <param name = "_taxValue">
    /// Tax value
    /// </param>
    /// <returns><c>TmpTaxReportById</c></returns>
    public static TmpTaxReportById matchTaxValueSelect(TmpTaxReportById _tmpTaxReportById, TaxReportField _taxReportField, TaxValue _taxValue)
    {
        select firstonly forupdate _tmpTaxReportById
            where _tmpTaxReportById.TaxReportField == _taxReportField
            && _tmpTaxReportById.TaxValue_JP == _taxValue;

        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the tax value for the <c>TmpTaxReportById</c>
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    /// Sales tax reporting code
    /// </param>
    /// <param name = "_taxValue">
    /// Tax value
    /// </param>
    /// <returns><c>TmpTaxReportById</c></returns>
    public static TmpTaxReportById setTaxValue(TmpTaxReportById _tmpTaxReportById, TaxValue _taxValue)
    {
        _tmpTaxReportById.TaxValue_JP = _taxValue;
        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxType_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Init the TaxType_JP field of <c>TmpTaxReportById</c>.
    /// </summary>
    /// <param name = "_tmpTaxReportById">
    /// Sales tax reporting code.
    /// </param>
    /// <param name = "_taxTrans">
    /// Type of Japanese consumption tax.
    /// </param>
    /// <returns>A <c>TmpTaxReportById</c> record with field TaxType_JP filled.</returns>
    public static TmpTaxReportById setTaxType_JP (TmpTaxReportById _tmpTaxReportById, TaxTrans _taxTrans)
    {
        TaxTable taxTable = TaxTable::find(_taxTrans.TaxCode);
        _tmpTaxReportById.TaxType_JP = taxTable.TaxType_JP;
        return _tmpTaxReportById;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>