<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkCalendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WorkCalendar</c> class is used to search through work calendars.
/// </summary>
public class WorkCalendar
{
    CalendarId          calendar;
    TransDate           transDate;
    WorkCalendarDate    workCalendarDate;
    str                 errorText;
    Set                 checkSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowWorkTimeEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the calendar date can be edited.
    /// </summary>
    /// <returns>
    /// true if the calendar date can be edited; otherwise, false.
    /// </returns>
    public boolean allowWorkTimeEdit()
    {
        if (this.isValid()                                      &&
            workCalendarDate.CalendarId        == calendar      &&
            workCalendarDate.WorkTimeControl   != WorkTimeControl::Closed)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>closedForPickup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the calendar date is closed for pickup.
    /// </summary>
    /// <returns>
    /// true if the calendar date is closed for pickup; otherwise, false.
    /// </returns>
    public NoYesId closedForPickup()
    {
        return workCalendarDate.ClosedForPickup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>definedCalendar</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ID of the calendar date.
    /// </summary>
    /// <returns>
    /// The ID of the calendar date.
    /// </returns>
    public CalendarId definedCalendar()
    {
        return workCalendarDate.CalendarId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets an error text.
    /// </summary>
    /// <param name="_errorText">
    /// The error text to set; optional.
    /// </param>
    /// <returns>
    /// An error text.
    /// </returns>
    public str errorText(str _errorText = errorText)
    {
        errorText = _errorText;
        return errorText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the work calendar is valid.
    /// </summary>
    /// <returns>
    /// true if the work calendar is valid; otherwise, false.
    /// </returns>
    public boolean isValid()
    {
        return errorText ? false : true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPErrorClassNewNotProtected', 'The constructor is preserved public due to API compatibility.')]
    void new(CalendarId _calendar,TransDate _transDate)
    {
        calendar    = _calendar;
        transDate   = _transDate;
        checkSet    = new Set(Types::Int64);

        this.setWorkCalendarDate(calendar);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkCalendarDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the calendar for the transaction date.
    /// </summary>
    /// <param name="_calendar">
    /// The ID of the calendar.
    /// </param>
    /// <remarks>
    /// An error text is set when no calendar entry is found on the transaction date.
    /// </remarks>
    protected void setWorkCalendarDate(CalendarId _calendar)
    {
        WorkCalendarTable workCalendarTable;

        workCalendarDate    = WorkCalendarDate::find(_calendar,transDate);

        if (! workCalendarDate)
        {
            this.errorText(strfmt("@SYS25636", date2StrUsr(transDate, DateFlags::FormatAll), _calendar));
        }
        else
        {
            if (workCalendarDate.WorkTimeControl == WorkTimeControl::UseBasic)
            {
                workCalendarTable   = WorkCalendarTable::find(_calendar);

                if (! workCalendarTable)
                {
                    this.errorText(strfmt("@SYS12540",_calendar));
                }
                else
                {
                    if (checkSet.in(workCalendarTable.RecId))
                    {
                        this.errorText(strfmt("@SYS25637",_calendar));
                    }
                    else
                    {
                        checkSet.add(workCalendarTable.RecId);
                        this.setWorkCalendarDate(workCalendarTable.BasicCalendarId);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workTimeControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the time control setting for the calendar date.
    /// </summary>
    /// <returns>
    /// The time control setting for the calendar date.
    /// </returns>
    public WorkTimeControl workTimeControl()
    {
        return workCalendarDate.WorkTimeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static WorkCalendar construct(
        CalendarId  _calendar,
        TransDate   _transDate
        )
    {
        return new WorkCalendar(_calendar,_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defined</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the base calendar ID for a specific date.
    /// </summary>
    /// <param name="_calendar">
    /// The ID of the calendar for which to search.
    /// </param>
    /// <param name="_transDate">
    /// The search date.
    /// </param>
    /// <param name="_throwIfError">
    /// A Boolean value that indicates whether to throw an error when no calendar entry can be found;
    /// optional.
    /// </param>
    /// <returns>
    /// The base calendar ID for a specific date.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// No calendar entry was found on the date.
    /// </exception>
    static CalendarId defined(
        CalendarId  _calendar,
        TransDate   _transDate,
        boolean     _throwIfError = true
        )
    {
        WorkCalendar workCalendar = new WorkCalendar(_calendar,_transDate);

        if (!workCalendar.isValid())
        {
            if (_throwIfError)
            {
                throw error(workCalendar.errorText(),
                            '',
                            WorkCalendar::infoActionWorkCalendarTable(_calendar));
            }
            else
            {
                return '';
            }
        }

        return workCalendar.definedCalendar();
    }

]]></Source>
			</Method>
			<Method>
				<Name>endWorkTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the end time of the last <c>WorkCalendarDateLine</c> record for a given date.
    /// </summary>
    /// <param name="_calendarId">
    ///    The calendar to use.
    /// </param>
    /// <param name="_transDate">
    ///    The date to find the latest end time for.
    /// </param>
    /// <returns>
    ///    The end time if a <c>WorkCalendarDateLine</c> record is found and the calendar is open; otherwise,
    ///    zero.
    /// </returns>
    public static timeOfDay endWorkTime(CalendarId _calendarId,SchedDate _transDate)
    {
        WorkCalendarDateLine    workCalendarDateLine;
        
        #define.maxLoops(365)

        if (_calendarId &&
            WorkCalendarTable::exist(_calendarId) &&
            WorkCalendarDate::isDateOpen(_calendarId,_transDate))
        {
            select maxof(ToTime) from workCalendarDateLine
                where workCalendarDateLine.CalendarId       == WorkCalendar::defined(_calendarId,_transDate)   &&
                      workCalendarDateLine.TransDate        == _transDate;
        }

        return workCalendarDateLine.ToTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDateBackward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the previous calendar date.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_fromDate">
    /// The date from which to start the search.
    /// </param>
    /// <param name="_fromTime">
    /// The time from which to start the search.
    /// </param>
    /// <param name="_checkIfDateIsOpen">
    /// A Boolean value that indicates that only the open calendar dates will be included in the search.
    /// </param>
    /// <returns>
    /// The previous calendar date.
    /// </returns>
    static TransDate findOpenDateBackward(
        CalendarId  _calendarId,
        SchedDate   _fromDate,
        SchedTime   _fromTime,
        boolean     _checkIfDateIsOpen = false
        )
    {
        WorkCalendarDateLine    workCalendarDateLine;
        TransDate               transDate = _fromDate;
        
        #define.maxLoops(365)

        if (_calendarId && WorkCalendarTable::exist(_calendarId))
        {
            while (transDate > prevYr(_fromDate))
            {
                if (_checkIfDateIsOpen == false)
                {
                    while select CalendarId, TransDate, FromTime
                        from workCalendarDateLine
                        order by FromTime desc
                        where workCalendarDateLine.CalendarId       == WorkCalendar::defined(_calendarId,transDate)   &&
                              workCalendarDateLine.TransDate        == transDate
                    {
                        if (_fromTime > workCalendarDateLine.FromTime || transDate < _fromDate)
                        {
                            return transDate;
                        }
                    }
                }
                else
                {
                    if (WorkCalendarDate::isDateOpen(_calendarId,transDate))
                    {
                        while select CalendarId, TransDate, FromTime
                            from workCalendarDateLine
                            order by FromTime desc
                            where workCalendarDateLine.CalendarId       == WorkCalendar::defined(_calendarId,transDate)   &&
                                  workCalendarDateLine.TransDate        == transDate
                        {
                            if (_fromTime > workCalendarDateLine.FromTime || transDate < _fromDate)
                            {
                                return transDate;
                            }
                        }
                    }
                }

                transDate--;
            }
        }

        return _fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDateForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the next calendar date.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_fromDate">
    /// The date from which to start the search.
    /// </param>
    /// <param name="_fromTime">
    /// The time from which to start the search.
    /// </param>
    /// <param name="_checkIfDateIsOpen">
    /// A Boolean value that indicates that only the open calendar dates will be included in the search.
    /// </param>
    /// <returns>
    /// The next calendar date.
    /// </returns>
    static TransDate findOpenDateForward(
        CalendarId  _calendarId,
        SchedDate   _fromDate,
        SchedTime   _fromTime,
        boolean     _checkIfDateIsOpen = false
        )
    {
        WorkCalendarDateLine    workCalendarDateLine;
        TransDate               transDate = _fromDate;

        #define.maxLoops(365)

        if (_calendarId && WorkCalendarTable::exist(_calendarId))
        {
            while (transDate < nextYr(_fromDate))
            {
                if (!_checkIfDateIsOpen || WorkCalendarDate::isDateOpen(_calendarId,transDate))
                {
                    select firstonly CalendarId
                        from workCalendarDateLine
                        where workCalendarDateLine.CalendarId == WorkCalendar::defined(_calendarId,transDate)
                              && workCalendarDateLine.TransDate == transDate
                              && (_fromTime <  workCalendarDateLine.ToTime || transDate > _fromDate);

                    if (workCalendarDateLine)
                    {
                        return transDate;
                    }
                }

                transDate++;
            }
        }

        return _fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDateTimeBackward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the UTC date and time of the previous calendar entry.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_fromDateTime">
    /// The UTC date and time to search from.
    /// </param>
    /// <param name="_checkIfDateIsOpen">
    /// A Boolean value that indicates whether only the open dates should be included in the search;
    /// optional.
    /// </param>
    /// <returns>
    /// The UTC date and time of the previous calendar entry.
    /// </returns>
    static utcdatetime findOpenDateTimeBackward(
        CalendarId  _calendarId,
        utcdatetime _fromDateTime,              //UTC
        boolean     _checkIfDateIsOpen = false
        )
    {
        WorkCalendarDateLine    workCalendarDateLine;

        date                    fromDate  = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_fromDateTime,DateTimeUtil::getCompanyTimeZone()));
        timeOfDay               fromTime  = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(_fromDateTime,DateTimeUtil::getCompanyTimeZone()));
        date                    transDate = fromDate;

        #define.maxLoops(365)

        if (_calendarId)
        {
            if (((select RecId from  workCalendarDateLine
                               where workCalendarDateLine.CalendarId    == WorkCalendar::defined(_calendarId,transDate)
                                  && workCalendarDateLine.TransDate     == fromDate
                                  && workCalendarDateLine.FromTime      <= fromTime
                                  && workCalendarDateLine.ToTime        >= fromTime).RecId != 0)
               && ( (!_checkIfDateIsOpen) || (WorkCalendarDate::isDateOpen(_calendarId,transDate)) ))
            {
                return _fromDateTime;
            }

            if (_calendarId && WorkCalendarTable::exist(_calendarId))
            {
                while (transDate > prevYr(fromDate))
                {
                    if ((!_checkIfDateIsOpen) || (WorkCalendarDate::isDateOpen(_calendarId,transDate)))
                    {
                        while select   workCalendarDateLine
                              order by FromTime desc
                              where    workCalendarDateLine.CalendarId       == WorkCalendar::defined(_calendarId,transDate)
                                    && workCalendarDateLine.TransDate        == transDate

                        {
                            if ((transDate != fromDate) || (fromTime > workCalendarDateLine.ToTime))
                            {
                                return DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(transDate,
                                                                          workCalendarDateLine.ToTime),
                                                                          DateTimeUtil::getCompanyTimeZone());
                            }
                        }
                    }
                    transDate--;
                }
            }
        }

        return _fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDateTimeForward</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the UTC date and time of the next calendar entry.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_fromDateTime">
    /// The UTC date and time from which to search.
    /// </param>
    /// <param name="_checkIfDateIsOpen">
    /// A <c>Boolean</c> value that indicates whether only the open dates should be included in the search;
    /// optional.
    /// </param>
    /// <returns>
    /// The UTC date and time of the next calendar entry.
    /// </returns>
    static utcdatetime findOpenDateTimeForward(
        CalendarId  _calendarId,
        utcdatetime _fromDateTime,              //UTC
        boolean     _checkIfDateIsOpen = false
        )
    {
        WorkCalendarDateLine    workCalendarDateLine;

        date                    fromDate  = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_fromDateTime,DateTimeUtil::getCompanyTimeZone()));
        timeOfDay               fromTime  = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(_fromDateTime,DateTimeUtil::getCompanyTimeZone()));
        date                    transDate = fromDate;

        #define.maxLoops(365)

        if (_calendarId)
        {
            if (((select RecId from  workCalendarDateLine
                               where workCalendarDateLine.CalendarId    == WorkCalendar::defined(_calendarId,transDate)
                                  && workCalendarDateLine.TransDate     == fromDate
                                  && workCalendarDateLine.FromTime      <= fromTime
                                  && workCalendarDateLine.ToTime        >= fromTime).RecId != 0)
               && ( (!_checkIfDateIsOpen) || (WorkCalendarDate::isDateOpen(_calendarId,transDate)) ))
            {
                return _fromDateTime;
            }

            if (_calendarId && WorkCalendarTable::exist(_calendarId))
            {
                while (transDate < nextYr(fromDate))
                {
                    if ((!_checkIfDateIsOpen) || (WorkCalendarDate::isDateOpen(_calendarId,transDate)))
                    {
                        while select   workCalendarDateLine
                              order by FromTime
                              where    workCalendarDateLine.CalendarId       == WorkCalendar::defined(_calendarId,transDate)
                                    && workCalendarDateLine.TransDate        == transDate

                        {
                            if ((transDate != fromDate) || (fromTime < workCalendarDateLine.FromTime))
                            {
                                return DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(transDate,
                                                                          workCalendarDateLine.FromTime),
                                                                          DateTimeUtil::getCompanyTimeZone());
                            }
                        }
                    }
                    transDate++;
                }
            }
        }

        return _fromDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoActionWorkCalendarTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an action for the Infolog that will open the <c>WorkCalendarTable</c> form for a specific
    /// calendar.
    /// </summary>
    /// <param name="_calendarId">
    /// The ID of the calendar.
    /// </param>
    /// <param name="_workCalendarTable">
    /// The <c>WorkCalendarTable</c> record for the calendar ID; optional.
    /// </param>
    /// <returns>
    /// An action for the Infolog.
    /// </returns>
    static SysInfoAction_Formrun infoActionWorkCalendarTable(CalendarId         _calendarId,
                                                             WorkCalendarTable  _workCalendarTable = null) // set this parameter for better performance
    {
        SysInfoAction_Formrun   infoActionWorkCalendarTable;

        //Only create the SysInfoAction_Formrun if we have a client available
        if (xGlobal::hasClient())
        {
            infoActionWorkCalendarTable = SysInfoAction_Formrun::newFormnameControlname(formstr(WorkCalendarTable),
                                                                                        identifierstr(CalendarId));
            if (!_workCalendarTable)
            {
                _workCalendarTable = WorkCalendarTable::find(_calendarId);
            }

            infoActionWorkCalendarTable.parmCallerBuffer(_workCalendarTable);
        }

        return infoActionWorkCalendarTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startWorkTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the start time of the earliest <c>WorkCalendarDateLine</c> record for a given date.
    /// </summary>
    /// <param name="_calendarId">
    ///    The calendar to use.
    /// </param>
    /// <param name="_transDate">
    ///    The date to find the earliest start time for.
    /// </param>
    /// <returns>
    ///    The start time if a <c>WorkCalendarDateLine</c> record is found and the calendar is open;
    ///    otherwise, zero.
    /// </returns>
    public static timeOfDay startWorkTime(CalendarId  _calendarId,SchedDate   _transDate)
    {
        WorkCalendarDateLine    workCalendarDateLine;

        #define.maxLoops(365)

        if (_calendarId &&
            WorkCalendarTable::exist(_calendarId) &&
            WorkCalendarDate::isDateOpen(_calendarId,_transDate))
        {
            select minof(FromTime) from workCalendarDateLine
                where workCalendarDateLine.CalendarId       == WorkCalendar::defined(_calendarId,_transDate)   &&
                      workCalendarDateLine.TransDate        == _transDate;
        }

        return workCalendarDateLine.FromTime;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>