<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLocationMixingConstraintValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSLocationMixingConstraintValidator</c> class is responsible for verifying
/// that the allow mixed items, allow mixed batches and allow mixed statuses
/// constraints are respected.
/// </summary>
class WhsLocationMixingConstraintValidator
{
    ItemId              receiptItemId;
    InventDim           receiptInventDim;
    WMSLocation         receiptLocation;
    WHSLocationProfile  receiptLocationProfile;

    WHSWorkInventoryTransactionDescriptor receiptTransactionDescriptor;

    boolean             allowMixedStatuses;
    boolean             allowMixedItems;
    boolean             allowMixedBatches;

    boolean             checkInventory;
    boolean             checkWork;
    boolean             checkTmpWorkLine;

    boolean             useCache;

    boolean             canChangeBlankDimensions;
    InventDim           changedDimensions;

    private boolean       allowMixingAllProductDimensions;
    private InventDimParm allowedProductDimensionMixingParm;

    WHSLocationMixingConstraintCheckSkip locationMixingConstraintCheckSkip;

    private WHSInstrumentationLogger instrumentationLogger;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyChangedDimensionField</Name>
				<Source><![CDATA[
    private void applyChangedDimensionField(
        FieldId     _dimFieldId,
        InventDim   _applyToDims)
    {
        if (changedDimensions.(_dimFieldId) != '')
        {
            _applyToDims.(_dimFieldId) = changedDimensions.(_dimFieldId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyChangedDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the changed dimensions to the supplied InventDim record.
    /// </summary>
    /// <param name = "_applyToDims">InventDim record to apply changes to.</param>
    /// <returns>InventDim record with changes applied.</returns>
    public InventDim applyChangedDimensions(InventDim _applyToDims)
    {
        this.applyChangedDimensionField(fieldNum(InventDim, inventBatchId), _applyToDims);

        return _applyToDims;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs initialization of the object based on the specified parameters.
    /// </summary>
    /// <remarks>
    /// Must be called after all the parameters of the check have been specified.
    /// </remarks>
    protected void init()
    {
        useCache = false;

        if (!receiptLocation)
        {
            receiptLocation = receiptInventDim.wmsLocation();
        }

        if (receiptLocation && !receiptLocationProfile)
        {
            receiptLocationProfile = receiptLocation.whsLocationProfile();
        }

        if (receiptLocationProfile.EnableLocationProductDimensionSpecificMixing)
        {
            allowedProductDimensionMixingParm.initFromInventDimFixed(receiptLocationProfile.ProductDimFixed);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatchCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object for performing the batch mix check.
    /// </summary>
    protected void initBatchCheck()
    {
        this.init();

        allowMixedStatuses = true;
        allowMixedItems = receiptLocationProfile.AllowMixedBatches; // if we do not allow mixed batches then we do not allow mixed items
        allowMixedBatches = receiptLocationProfile.AllowMixedBatches;

        if (this.skipMixedBatchCheck())
        {
            allowMixedBatches = true;
        }
  
        allowMixingAllProductDimensions = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItemCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object for performing the item mix check.
    /// </summary>
    protected void initItemCheck()
    {
        this.init();

        allowMixedStatuses = true;
        allowMixedItems = receiptLocationProfile.AllowMixedItems;
        allowMixingAllProductDimensions = true;

        allowMixedBatches = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPhysicalReceiptCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object for performing the full location mix check of a physical receipt.
    /// </summary>
    protected void initPhysicalReceiptCheck()
    {
        this.init();

        allowMixedStatuses = receiptLocationProfile.AllowMixedStatus;

        if (this.skipMixedStatusCheck())
        {
            allowMixedStatuses = true;
        }

        allowMixedBatches = receiptLocationProfile.AllowMixedBatches;

        if (this.skipMixedBatchCheck())
        {
            allowMixedBatches = true;
        }

        allowMixedItems = receiptLocationProfile.AllowMixedItems;
        allowMixingAllProductDimensions = !receiptLocationProfile.EnableLocationProductDimensionSpecificMixing;

        useCache = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReplenishmentCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object for performing replenishment check.
    /// </summary>
    protected void initReplenishmentCheck()
    {
        this.init();

        allowMixedItems = receiptLocationProfile.AllowMixedItems;
        allowMixedBatches = receiptLocationProfile.AllowMixedBatches;
        allowMixedStatuses = true;
        allowMixingAllProductDimensions = !receiptLocationProfile.EnableLocationProductDimensionSpecificMixing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStatusCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object for performing the full status mix check.
    /// </summary>
    protected void initStatusCheck()
    {
        this.init();
        allowMixedStatuses = receiptLocationProfile.AllowMixedStatus;

        if (this.skipMixedStatusCheck())
        {
            allowMixedStatuses = true;
        }

        allowMixedBatches = true;
        allowMixedItems = true;
        allowMixingAllProductDimensions = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchMixValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the allow mixed batches requirements are
    /// respected.
    /// </summary>
    /// <returns>
    /// true if the allow mixed batches requirements are respected; otherwise, false.
    /// </returns>
    public boolean isBatchMixValid()
    {
        this.initBatchCheck();
        return this.isMixValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductDimensionsMixValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the allow mixed product dimensions requirements are
    /// respected.
    /// </summary>
    /// <returns>
    /// true if the allow mixed product dimensions requirements are respected; otherwise, false.
    /// </returns>
    private boolean isProductDimensionsMixValid()
    {
        this.initProductDimensionsCheck();
        return this.isMixValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProductDimensionsCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the object for performing the product dimensions mix check.
    /// </summary>
    private void initProductDimensionsCheck()
    {
        this.init();

        allowMixedStatuses = true;
        allowMixedBatches = true;
        allowMixedItems = true;

        allowMixingAllProductDimensions = !receiptLocationProfile.EnableLocationProductDimensionSpecificMixing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchMixValidTmpWorkLine</Name>
				<Source><![CDATA[
    private boolean isBatchMixValidTmpWorkLine()
    {
        WHSTmpWorkLine  tmpWorkLine;

        select firstonly RecId, InventBatchId from tmpWorkLine
            where tmpWorkLine.InventLocationId  == receiptLocation.InventLocationId
            &&    tmpWorkLine.wmsLocationId     == receiptLocation.wmsLocationId
            &&    tmpWorkLine.InventBatchId     != receiptInventDim.InventBatchId
            &&    tmpWorkLine.WorkType          == WHSWorkType::Put;

        boolean result = tmpWorkLine.RecId == 0                             ?
                            true                                            :
                            this.tryChangeBatch(tmpWorkLine.InventBatchId);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchMixValidWork</Name>
				<Source><![CDATA[
    protected boolean isBatchMixValidWork()
    {
        WHSWorkTable    workTable;
        WHSWorkLine     workLine;
        
        while select TargetLicensePlateId from workTable
            where workTable.InventLocationId == receiptInventDim.InventLocationId
                && (!receiptLocationProfile.LPControlled || workTable.TargetLicensePlateId != '')
            exists join workLine
                where workLine.WorkId        == workTable.WorkId
                    && workLine.WorkType      == WHSWorkType::Put
                    && workLine.WorkStatus    == WHSWorkStatus::Open
                    && workLine.wmsLocationId == receiptLocation.wmsLocationId
        {
            InventSum       inventSum;

            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select firstonly RecId, InventBatchId from inventSum
                where inventSum.ClosedQty       == NoYes::No
                    && inventSum.PhysicalInvent > 0
                    && inventSum.InventLocationId == receiptInventDim.InventLocationId
                    && inventSum.wmsLocationId    != ''
                    && inventSum.LicensePlateId   == workTable.TargetLicensePlateId
                    && inventSum.InventBatchId    != ''
                    && inventSum.InventBatchId    != receiptInventDim.InventBatchId;

                boolean isValid = inventSum.RecId == 0 ? true : this.tryChangeBatch(inventSum.inventBatchId);
                if (!isValid)
                {
                    return false;
                }
            }
            else
            {
                InventDim       inventDim;

                select firstonly RecId from inventSum
                where inventSum.ClosedQty       == NoYes::No
                    && inventSum.PhysicalInvent > 0
                join inventBatchId from inventDim
                    where inventDim.InventDimId      == inventSum.InventDimId
                        && inventDim.InventLocationId == receiptInventDim.InventLocationId
                        && inventDim.wmsLocationId    != ''
                        && inventDim.LicensePlateId   == workTable.TargetLicensePlateId
                        && inventDim.InventBatchId    != ''
                        && inventDim.InventBatchId    != receiptInventDim.InventBatchId;

                boolean isValid = inventSum.RecId == 0 ? true : this.tryChangeBatch(inventDim.inventBatchId);
                if (!isValid)
                {
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemMixValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether allow mixed items requirements are respected.
    /// </summary>
    /// <returns>
    /// true if the allow mixed items requirements are respected; otherwise, false.
    /// </returns>
    public boolean isItemMixValid()
    {
        this.initItemCheck();
        return this.isMixValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemMixValidTmpWorkLine</Name>
				<Source><![CDATA[
    private boolean isItemMixValidTmpWorkLine()
    {
        WHSTmpWorkLine  tmpWorkLine;
        WHSTmpWorkLine  tmpWorkLineVariant;
        InventDim       productDimOfWorkLine;

        select firstonly RecId from tmpWorkLine
            where tmpWorkLine.InventLocationId  == receiptLocation.InventLocationId
            &&    tmpWorkLine.wmsLocationId     == receiptLocation.wmsLocationId
            &&    tmpWorkLine.ItemId            != receiptItemId
            &&    tmpWorkLine.WorkType          == WHSWorkType::Put;

        if (tmpWorkLine.RecId == 0)
        {
            //If the product dimension of this item is activated, then try to find if in the receipt put location
            //there exists the same item but with the different variant id(means different product dimension).
            if (EcoResProductDimensionGroupProduct::findByProduct(InventTable::find(receiptItemId).Product).RecId)
            {
                InventDimParm inventDimParm;
                inventDimParm.setAllProductDimensions();

                #InventDimDevelop
                select firstonly RecId from tmpWorkLineVariant
                    where  tmpWorkLineVariant.InventLocationId == receiptLocation.InventLocationId
                        && tmpWorkLineVariant.wmsLocationId    == receiptLocation.wmsLocationId
                        && tmpWorkLineVariant.ItemId           == receiptItemId
                        && tmpWorkLineVariant.WorkType         == WHSWorkType::Put
                    exists join productDimOfWorkLine
                        where productDimOfWorkLine.InventDimId     == tmpWorkLineVariant.InventDimId
                            && (productDimOfWorkLine.configId        != receiptInventDim.configId
                            ||  productDimOfWorkLine.InventColorId   != receiptInventDim.InventColorId
                            ||  productDimOfWorkLine.InventSizeId    != receiptInventDim.InventSizeId
                            ||  productDimOfWorkLine.InventStyleId   != receiptInventDim.InventStyleId
                            ||  productDimOfWorkLine.InventVersionId   != receiptInventDim.InventVersionId
                            || (inventDimParm.InventDimension1Flag   && productDimOfWorkLine.InventDimension1  != receiptInventDim.InventDimension1)
                            || (inventDimParm.InventDimension2Flag   && productDimOfWorkLine.InventDimension2  != receiptInventDim.InventDimension2)
                            || (inventDimParm.InventDimension3Flag   && productDimOfWorkLine.InventDimension3  != receiptInventDim.InventDimension3)
                            || (inventDimParm.InventDimension4Flag   && productDimOfWorkLine.InventDimension4  != receiptInventDim.InventDimension4)
                            || (inventDimParm.InventDimension5Flag   && productDimOfWorkLine.InventDimension5  != receiptInventDim.InventDimension5)
                            || (inventDimParm.InventDimension6Flag   && productDimOfWorkLine.InventDimension6  != receiptInventDim.InventDimension6)
                            || (inventDimParm.InventDimension7Flag   && productDimOfWorkLine.InventDimension7  != receiptInventDim.InventDimension7)
                            || (inventDimParm.InventDimension8Flag   && productDimOfWorkLine.InventDimension8  != receiptInventDim.InventDimension8)
                            || (inventDimParm.InventDimension9Flag   && productDimOfWorkLine.InventDimension9  != receiptInventDim.InventDimension9)
                            || (inventDimParm.InventDimension10Flag  && productDimOfWorkLine.InventDimension10 != receiptInventDim.InventDimension10)                                  
                            || (inventDimParm.InventDimension11Flag  && productDimOfWorkLine.InventDimension11 != receiptInventDim.InventDimension11)
			                || (inventDimParm.InventDimension12Flag  && productDimOfWorkLine.InventDimension12 != receiptInventDim.InventDimension12));

                if (tmpWorkLineVariant.RecId != 0)
                {
                    return false;
                }
            }
        }

        return tmpWorkLine.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemMixValidWork</Name>
				<Source><![CDATA[
    private boolean isItemMixValidWork()
    {
        WHSWorkTable    workTable;
        WHSWorkLine     workLine;

        select firstonly RecId from workTable
            where workTable.InventLocationId == receiptInventDim.InventLocationId
                && workTable.WorkStatus <= WHSWorkStatus::InProcess
            exists join workLine
                where workLine.WorkId == workTable.WorkId
                    && workLine.WorkStatus <= WHSWorkStatus::InProcess
                    && workLine.WorkType == WHSWorkType::Put
                    && workLine.wmsLocationId == receiptLocation.wmsLocationId
                    && workLine.ItemId != receiptItemId;

        return workTable.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMixValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the mix check based on the specified parameters.
    /// </summary>
    /// <returns>
    /// True if the mix check is valid; otherwise, false.
    /// </returns>
    protected boolean isMixValid()
    {
        boolean result = true;

        if (this.isValidationNeeded())
        {
            using (var activityContext = this.instrumentationLogger().locationProductMixingActivities().validateLocationProductMixing(allowMixedItems, allowMixingAllProductDimensions, allowMixedStatuses, allowMixedBatches))
            {
                this.validateParameters();

                if (checkInventory)
                {
                    result = this.isMixValidInventory();
                }

                if (result && checkWork)
                {
                    result = this.isMixValidWork();
                }

                if (result && checkTmpWorkLine)
                {
                    result = this.isMixValidTmpWorkLine();
                }

                this.instrumentationLogger().locationProductMixingActivities().validatedLocationProductMixing(activityContext, result);
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMixValidInventory</Name>
				<Source><![CDATA[
    private boolean isMixValidInventory()
    {
        using (var activityContext = this.instrumentationLogger().locationProductMixingActivities().validateInventoryMix())
        {
            boolean                                     result = true;
            boolean                                     skipCheck = false;
        
            WHSLocationMixingConstrReceiptCache         lastReceiptCache;
            WHSLocationMixingConstrReceiptCacheValue    lastReceipt, newReceipt;

            if (useCache)
            {
                lastReceiptCache = WHSLocationMixingConstrReceiptCache::instance();
                lastReceipt = lastReceiptCache.getLastReceipt(receiptLocation);
                newReceipt = WHSLocationMixingConstrReceiptCacheValue::newStandard(receiptItemId, receiptInventDim);
                skipCheck = lastReceipt && this.newReceiptMatchesLastReceipt(newReceipt, lastReceipt);
            }

            if (!skipCheck)
            {
                changedDimensions.clear();

                WHSLocationOnHandConstraintQueryType queryType = WHSLocationOnHandConstraintQueryType::newWithSingleRecordSelect();
                //for performance reasons only include deltas if any have been inserted.
                queryType.parmIncludeDelta(InventUpdateOnhandGlobal::instance().inventUpdateOnhand().mustAddAnyInventSumDeltaOnhand());

                WHSLocationOnHandConstraintQryEnumerator onHandEnumerator = WHSLocationOnHandConstraintQuery::getEnumerator(queryType, receiptLocation);

                if (onHandEnumerator.moveNext())
                {
                    if (this.newReceiptMatchesOnHand(onHandEnumerator))
                    {
                        result = true; // we already have the same mix on hand so it is fine to add some more
                    }
                    else
                    {
                        result = false; // we have something else on hand
                    }
                }
                else
                {
                    result = true; // there's nothing on hand so mixing constraint violations are not possible
                }
            }

            this.instrumentationLogger().locationProductMixingActivities().validatedInventoryMix(activityContext, result);
            return result;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMixValidTmpWorkLine</Name>
				<Source><![CDATA[
    private boolean isMixValidTmpWorkLine()
    {
        using (var activityContext = this.instrumentationLogger().locationProductMixingActivities().validateTmpWorkMix())
        {
            boolean result = (allowMixedItems || this.isItemMixValidTmpWorkLine())
                          && (allowMixedBatches || this.isBatchMixValidTmpWorkLine())
                          && (allowMixingAllProductDimensions || this.isProductDimensionMixingValidTmpWorkLine());

            this.instrumentationLogger().locationProductMixingActivities().validatedTmpWorkMix(activityContext, result);

            return result;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMixValidWork</Name>
				<Source><![CDATA[
    private boolean isMixValidWork()
    {
        using (var activityContext = this.instrumentationLogger().locationProductMixingActivities().validateWorkMix())
        {
            boolean result = (allowMixedItems || this.isItemMixValidWork())
                          && (allowMixedBatches || this.isBatchMixValidWork())
                          && (allowMixingAllProductDimensions || this.isProductDimensionMixingValidWork());

            this.instrumentationLogger().locationProductMixingActivities().validatedWorkMix(activityContext, result);

            return result;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPhysicalReceiptValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the mixing requirements are respected for a physical receipt.
    /// </summary>
    /// <returns>
    /// true if the allow mixing requirements are respected; otherwise, false.
    /// </returns>
    public boolean isPhysicalReceiptValid()
    {
        this.initPhysicalReceiptCheck();
        return this.isMixValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReplenishmentValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the mixing requirements are respected for replenishment.
    /// </summary>
    /// <returns>true if mixing requirements are respected; otherwise, false.</returns>
    public boolean isReplenishmentValid()
    {
        this.initReplenishmentCheck();
        return this.isMixValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStatusMixValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the allow mixed statuses requirements are
    /// respected.
    /// </summary>
    /// <returns>
    /// true if the allow mixed statuses requirements are respected; otherwise, false.
    /// </returns>
    public boolean isStatusMixValid()
    {
        this.initStatusCheck();
        return this.isMixValid();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidationNeeded</Name>
				<Source><![CDATA[
    private boolean isValidationNeeded()
    {
        return receiptLocationProfile && !(allowMixedStatuses && allowMixedItems && allowMixedBatches && allowMixingAllProductDimensions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        checkWork = true;
        checkInventory = true;
        canChangeBlankDimensions = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReceiptMatchesLastReceipt</Name>
				<Source><![CDATA[
    private boolean newReceiptMatchesLastReceipt(
        WHSLocationMixingConstrReceiptCacheValue _newReceipt,
        WHSLocationMixingConstrReceiptCacheValue _lastReceipt)
    {
        boolean result = (allowMixedItems || _lastReceipt.parmItemId() == _newReceipt.parmItemId())
                          && (allowMixedStatuses || _lastReceipt.parmStatusId() == _newReceipt.parmStatusId());

        if (result)
        {
            result = allowMixedBatches || _lastReceipt.parmBatchId() == _newReceipt.parmBatchId()   ?
                        true                                                                        :
                        this.tryChangeBatch(_lastReceipt.parmBatchId());
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReceiptMatchesOnHand</Name>
				<Source><![CDATA[
    private boolean newReceiptMatchesOnHand(
        WHSLocationOnHandConstraintQryEnumerator _onHandEnumerator)
    {
        ItemId onHandItemId = _onHandEnumerator.currentItemId();
        InventDim onHandInventDim = _onHandEnumerator.currentInventDim();

        boolean result = (allowMixedItems || onHandItemId == receiptItemId)
                         && (allowMixedStatuses || onHandInventDim.InventStatusId == receiptInventDim.InventStatusId)
                         && (allowMixingAllProductDimensions || allowedProductDimensionMixingParm.areUnsetProductDimensionsEqual(onHandInventDim, receiptInventDim));

        if (result)
        {
            result = allowMixedBatches || onHandInventDim.InventBatchId == receiptInventDim.InventBatchId   ?
                        true                                                                                :
                        this.tryChangeBatch(onHandInventDim.inventBatchId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCanChangeBlankDimensions</Name>
				<Source><![CDATA[
    public boolean parmCanChangeBlankDimensions(boolean _canChangeBlankDimensions = canChangeBlankDimensions)
    {
        canChangeBlankDimensions = _canChangeBlankDimensions;

        return canChangeBlankDimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckInventory</Name>
				<Source><![CDATA[
    public boolean parmCheckInventory(boolean _checkInventory = checkInventory)
    {
        checkInventory = _checkInventory;

        return checkInventory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckTmpWorkLine</Name>
				<Source><![CDATA[
    public boolean parmCheckTmpWorkLine(boolean _checkTmpWorkLine = checkTmpWorkLine)
    {
        checkTmpWorkLine = _checkTmpWorkLine;

        return checkTmpWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckWork</Name>
				<Source><![CDATA[
    public boolean parmCheckWork(boolean _checkWork = checkWork)
    {
        checkWork = _checkWork;

        return checkWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMixedStatusCheck</Name>
				<Source><![CDATA[
    private boolean skipMixedStatusCheck()
    {
        if (allowMixedStatuses
            || (locationMixingConstraintCheckSkip && locationMixingConstraintCheckSkip.parmSkipAllowMixedStatusCheck()))
        {
            return true;
        }

        return WHSInventStatusCache::construct().skipMixedStatusCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipMixedBatchCheck</Name>
				<Source><![CDATA[
    private boolean skipMixedBatchCheck()
    {
        if (allowMixedBatches)
        {
            return true;
        }

        boolean ret = false;

        if (receiptItemId && receiptInventDim.inventBatchId)
        {
            InventBatch batch;

            select count(RecId) from batch where batch.itemId == receiptItemId;
            
            ret = batch.RecId == 1;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocationMixingConstraintCheckSkip</Name>
				<Source><![CDATA[
    public WHSLocationMixingConstraintCheckSkip parmLocationMixingConstraintCheckSkip(WHSLocationMixingConstraintCheckSkip _locationMixingConstraintCheckSkip = locationMixingConstraintCheckSkip)
    {
        locationMixingConstraintCheckSkip = _locationMixingConstraintCheckSkip;

        return locationMixingConstraintCheckSkip;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptInventDim</Name>
				<Source><![CDATA[
    public InventDim parmReceiptInventDim(InventDim _receiptInventDim = receiptInventDim)
    {
        receiptInventDim = _receiptInventDim;

        return receiptInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptItemId</Name>
				<Source><![CDATA[
    public ItemId parmReceiptItemId(ItemId _receiptItemId = receiptItemId)
    {
        receiptItemId = _receiptItemId;

        return receiptItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiptTransactionDescriptor</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkInventoryTransactionDescriptor parmReceiptTransactionDescriptor(WHSWorkInventoryTransactionDescriptor _receiptTransactionDescriptor = receiptTransactionDescriptor)
    {
        receiptTransactionDescriptor = _receiptTransactionDescriptor;

        return receiptTransactionDescriptor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryChangeBatch</Name>
				<Source><![CDATA[
    private boolean tryChangeBatch(InventBatchId _batch)
    {
        return this.tryChangeBlankReceiptDimension(fieldNum(InventDim, inventBatchId), _batch);
    }

]]></Source>
			</Method>
			<Method>
				<Name>tryChangeBlankReceiptDimension</Name>
				<Source><![CDATA[
    private boolean tryChangeBlankReceiptDimension(
        FieldId _dimFieldId,
        anytype _fieldValue)
    {
        if (!canChangeBlankDimensions)
        {
            return false;
        }

        boolean result = false;

        // Only apply changed dimension if it was not set on receiptInventDim
        // and has not been already changed to a different value.
        if (_fieldValue != ''
            && receiptInventDim.(_dimFieldId)       == ''
            && (changedDimensions.(_dimFieldId)     == ''
                || changedDimensions.(_dimFieldId)  == _fieldValue))
        {
            changedDimensions.(_dimFieldId) = _fieldValue;
            result = true;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    private void validateParameters()
    {
        if (!receiptLocation
            || receiptLocation.wmsLocationId != receiptInventDim.wmsLocationId
            || receiptLocation.InventLocationId != receiptInventDim.InventLocationId
            || receiptLocation.LocProfileId != receiptLocationProfile.LocProfileId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePhysicalReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the mixing requirements are respected for a physical receipt
    /// and shows an warning if the validation failed.
    /// </summary>
    /// <returns>
    /// true if the allow mixing requirements are respected; otherwise, false.
    /// </returns>
    public boolean validatePhysicalReceipt()
    {
        // First verify all checks in one go (cheaper performance-wise)
        if (!this.isPhysicalReceiptValid())
        {
            // If the check failed then we need to figure out which condition exactly was violated

            if (!this.isItemMixValid())
            {
                checkFailed(strFmt("@WAX2239", receiptInventDim.wmsLocationId));
            }
            else if (!this.isStatusMixValid())
            {
                checkFailed("@WAX3389");
            }
            else if (!this.isBatchMixValid())
            {
                checkFailed(strFmt("@WAX1678", receiptInventDim.wmsLocationId));
            }
            else if (!this.isProductDimensionsMixValid())
            {
                checkFailed(strFmt("@WAX:Error_LocationDoesNotAllowForMixedDimension", receiptInventDim.wmsLocationId, "@SYS133228"));
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemSetPhysicalReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the mixing requirements are respected in an item set to be received
    /// and shows a warning if the validation failed.
    /// </summary>
    /// <returns>
    /// true if the allow mixing requirements are respected; otherwise, false.
    /// </returns>
    public boolean validateItemSetPhysicalReceipt()
    {
        boolean isValid = true;

        this.initPhysicalReceiptCheck();

        Set itemIdSet = new Set(Types::String);
        Set inventStatusSet = new Set(Types::String);
        Set inventBatchSet = new Set(Types::String);
        Set inventProductDimSet = new Set(Types::String);

        WHSWorkInventoryTransactionDescriptorEnumerator enumerator = this.parmReceiptTransactionDescriptor().getEnumerator();
        while (enumerator.moveNext())
        {
            WHSWorkInventoryTransactionDescriptorElement descriptorElement = enumerator.current();

            WHSInventoryProductTrackingDimensions productTrackingDimensions =
                descriptorElement.parmInventoryDimensionsDescriptor().parmProductTrackingDimensions();

            if (!allowMixedItems)
            {
                itemIdSet.add(descriptorElement.parmItemId());
            }

            if (!allowMixedStatuses)
            {
                inventStatusSet.add(productTrackingDimensions.parmInventStatusId());
            }

            if (!allowMixedBatches)
            {
                inventBatchSet.add(productTrackingDimensions.parmInventBatchId());
            }

            if (!allowMixingAllProductDimensions)
            {
                inventProductDimSet.add(this.getNotAllowedMixingProductDims(productTrackingDimensions));
            }

            if (   itemIdSet.elements() > 1
                || inventStatusSet.elements() > 1
                || inventBatchSet.elements() > 1
                || inventProductDimSet.elements() > 1)
            {
                break;
            }
        }

        if (isValid && !allowMixedItems && itemIdSet.elements() > 1)
        {
            isValid = checkFailed(strFmt("@WAX2239", receiptInventDim.wmsLocationId));
        }

        if (isValid && !allowMixedStatuses && inventStatusSet.elements() > 1)
        {
            isValid = checkFailed("@WAX3389");
        }

        if (isValid && !allowMixedBatches && inventBatchSet.elements() > 1)
        {
            isValid = checkFailed(strFmt("@WAX1678", receiptInventDim.wmsLocationId));
        }

        if (isValid && !allowMixingAllProductDimensions && inventProductDimSet.elements() > 1)
        {
            isValid = checkFailed(strFmt("@WAX:Error_LocationDoesNotAllowForMixedDimension", receiptInventDim.wmsLocationId, "@SYS133228"));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNotAllowedMixingProductDims</Name>
				<Source><![CDATA[
    private str getNotAllowedMixingProductDims(WHSInventoryProductTrackingDimensions _productTrackingDimensions)
    {
        var dimensionsBuilder = new System.Text.StringBuilder();

        InventDim productInventDim;
        _productTrackingDimensions.copyInventoryDimensionsTo(productInventDim);

        ListEnumerator enumerator  = InventDim::dimProductDimensionEnabledFieldList().getEnumerator();
        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId  = InventDim::dim2dimParm(dimFieldId);

            if (!allowedProductDimensionMixingParm.(dimParmFieldId))
            {
                dimensionsBuilder
                    .Append(productInventDim.(dimFieldId))
                    .Append(';');
            }
        }

        return dimensionsBuilder.ToString();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSLocationMixingConstraintValidator construct()
    {
        return new WHSLocationMixingConstraintValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReceiptItemDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the validator based on the item and the dimensions of a physical receipt.
    /// </summary>
    /// <param name="_receiptItemId">
    /// The ID of the item.
    /// </param>
    /// <param name="_receiptInventDim">
    /// The inventory dimensions of the physical receipt.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSLocationMixingConstraintValidator</c> class.
    /// </returns>
    public static WHSLocationMixingConstraintValidator newFromReceiptItemDim(ItemId _receiptItemId, InventDim _receiptInventDim)
    {
        WHSLocationMixingConstraintValidator check = WHSLocationMixingConstraintValidator::construct();

        check.parmReceiptItemId(_receiptItemId);
        check.parmReceiptInventDim(_receiptInventDim);

        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromReceiptItemSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the validator based on the item set of the physical receipt.
    /// </summary>
    /// <param name="_receiptTransactionDescriptor">
    /// The description of the transaction item set.
    /// </param>
    /// <param name="_receiptInventDim">
    /// The inventory dimensions (storage dimensions) of the physical receipt.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSLocationMixingConstraintValidator</c> class.
    /// </returns>
    public static WHSLocationMixingConstraintValidator newFromReceiptItemSet(WHSWorkInventoryTransactionDescriptor _receiptTransactionDescriptor, InventDim _receiptInventDim)
    {
        WHSLocationMixingConstraintValidator check = WHSLocationMixingConstraintValidator::construct();

        check.parmReceiptTransactionDescriptor(_receiptTransactionDescriptor);
        check.parmReceiptInventDim(_receiptInventDim);

        return check;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLocationProductDimensionMixingValidator</Name>
				<Source><![CDATA[
    private WHSLocationProductDimensionMixingValidator createLocationProductDimensionMixingValidator()
    {
        return WHSLocationProductDimensionMixingValidator::newFromProductAndLocation(receiptLocation, receiptItemId, receiptInventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductDimensionMixingValidTmpWorkLine</Name>
				<Source><![CDATA[
    private boolean isProductDimensionMixingValidTmpWorkLine()
    {
        return this.createLocationProductDimensionMixingValidator().validateTmpWorkLinesWithMixingRules();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProductDimensionMixingValidWork</Name>
				<Source><![CDATA[
    private boolean isProductDimensionMixingValidWork()
    {
        return this.createLocationProductDimensionMixingValidator().validateExistingWorkWithMixingRules();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>