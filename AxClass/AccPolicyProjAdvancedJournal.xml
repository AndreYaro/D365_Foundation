<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AccPolicyProjAdvancedJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    A project advanced journal accounting policy comprises rules that mandate accounting internal controls governing the
///    classification of the financial consequences of business events.
/// </summary>
[SourceDocumentEnumExtensionAttribute(enumStr(BusinessEvent_ProjAdvancedJournal), BusinessEvent_ProjAdvancedJournal::RecordProjectActivity)]
class AccPolicyProjAdvancedJournal extends AccountingPolicy
{
    ProjAdvancedJournalLine projAdvancedJournalLine;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineDocumentRecordsActual</Name>
				<Source><![CDATA[
    protected boolean determineDocumentRecordsActual()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsAccountingRequired</Name>
				<Source><![CDATA[
    protected boolean determineIsAccountingRequired()
    {
        ProjTable           projTable;
        ProjGroup           projGroup;

        if (ProjAdvancedJournalLine.RecId)
        {
            if (projAdvancedJournalLine.ProjDataAreaId != curext())
            {
                //
                // Intercompany scenario is always accounted for because the cost is incurred
                // in the legal entity that employs the resouce.
                //
                return true;
            }

            // We need to skip creation of SJL Entries if the transaction is either No/Never Ledger
            return !projAdvancedJournalLine.isNeverNoLedger();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the accounting policy.
    /// </summary>
    /// <param name="_sourceDocumentLineItem">
    /// A source document line item.
    /// </param>
    public void initialize(SourceDocumentLineItem _sourceDocumentLineItem)
    {
        SourceDocumentLineRecId sourceDocumentLineRecId = _sourceDocumentLineItem.parmSourceDocumentLine().RecId;
        
        projAdvancedJournalLine = ProjAdvancedJournalLine::findBySourceDocumentLine(sourceDocumentLineRecId);

        super(_sourceDocumentLineItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIsDistributionRequired</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it requires the accounting distribution.
    /// </summary>
    /// <returns>true if it requires; otherwise, false.</returns>
    protected boolean determineIsDistributionRequired()
    {
        boolean ret = super();

        if (sourceDocumentLineItem
            && sourceDocumentLineItem.parmSourceDocumentLine().SourceRelationType == tableNum(TaxDocCompLineSourceDocLine))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>