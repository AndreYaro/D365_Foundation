<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostMovement</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventCostMovement
{
    // The variables in this class have different scopes
    // 1.) Variables, that will stay the same
    //     during the whole usage of this class
    // 2.) Variables, that will change for each inventTrans
    //     record that is processed

    // 1.) The following variables that will be initialized when the class is
    //     instantiated and the initCostMovement method was called

    // Classes, that will store the costTrans and costTransVariance
    // records belonging to the transaction that triggered this process
    InventCostTransList             inventCostTransList;
    InventCostTransVarianceMap      inventCostTransVarianceMap;

    // Belonging to the transaction that triggered the processing
    InventCostTransState  costTransState;
    boolean               isReturn;
    Voucher                         voucher;
    TransDate                       transDate;

    // Set from the inventMovement (are set once in the new method)
    InventDim           inventDim;
    InventTransId       inventTransId;
    DimensionDefault    dimension;
    InventTable         inventTable;

    // Based on the variables from InventMovement the following
    // variables will be initialized
    InventItemPrice                inventItemPrice;
    InventCostTransCostList        stdCostList;

    // 2.) The following variables that will be initialized when a
    //     inventTrans record is processed and the addInventTrans method was called

    // Set from the inventTransOrigin record
    InventTransOrigin              inventTransOrigin;

    // Set from the inventTrans(/orig) record
    InventTrans                    inventTrans;
    InventTrans                    inventTransOrig;

    // Use two inventCostTransCostList to store the actual and estimated cost
    InventCostTransCostList        actCostList;
    InventCostTransCostList        estCostList;

    // Variables that will be filled by processing on inventTrans record and
    // creating the corresponding inventCostTrans record
    InventCostTrans     costTrans;

    // Sum Variables
    Qty                 totalQty;

    PdsCWInventQty      pdsCWTotalQty;
    CostAmount          totalCostAmountPhysical;
    CostAmount          totalCostAmountPosted;
    CostAmount          totalCostAmountAdjustment;

    // <GEERU>
    CostAmount          totalCostAmountPhysicalSec;
    CostAmount          totalCostAmountPostedSec;
    CostAmount          totalCostAmountAdjustmentSec;
    // </GEERU>
    // Counter
    int64               roundingContribution;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDefaultToActCostList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the default cost to the actual cost list.
    /// </summary>
    protected void addDefaultToActCostList()
    {
        InventCostTransVariance     costTransVariance;

        actCostList = InventCostTransCostList::construct();

        // Currently only one possibility for adding records to this list exists
        // Put new code in here to add values from a different source
        costTransVariance.initInventCostTransVariance(inventTable.costGroup(),
                                                      this.varianceType(),
                                                      dimension,
                                                      // <GEERU>
                                                      this.calcActCost(),
                                                      this.calcActCostSecCur_RU());
                                                      // </GEERU>

        actCostList.insert(costTransVariance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInventTrans</Name>
				<Source><![CDATA[
    public void addInventTrans(
        InventTrans           _inventTrans,
        InventMovement        _inventMovement,
        Voucher               _voucher,
        TransDate             _transDate,
        InventCostTransState  _costTransState,
        boolean               _isReturn = false,
        InventTrans           _inventTransOrig = null)
    {
        // First of all, check the parameters
        // This is done for safety reasons
        if (!this.checkParm(_inventMovement, _voucher, _transDate, _costTransState, _isReturn))
        {
            throw error("@SYS18447");
        }

        // Reset the CostTrans record if there has been something left from the previous run
        costTrans = null;

        // Set the current inventTransRecord
        this.initFromInventTrans(_inventTrans, _inventTransOrig);

        // CHeck for unsupported scenarios
        this.checkEvent();

        // Two things need to be done
        // 1.) Add the inventTrans record to the record sorted list of the inventCostMovement
        this.addToCostTransList();

        // 2.) Use the inventTrans record to calculate the inventCostTrans Variance
        this.addToCostTransVarianceMap();

        // Add to the total variables
        this.addToTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDimensionWhenEnableDimensionDefaultingSourceFeature</Name>
				<Source><![CDATA[
    protected DimensionDefault getDefaultDimensionWhenEnableDimensionDefaultingSourceFeature()
    {
        DimensionDefault    defaultDimension;
        CostParameters costParameters = CostParameters::find();
        switch (costParameters.DimensionDefaultingSource)
        {
            case DimensionDefaultingSource::None:
                defaultDimension = 0;
                break;
            case DimensionDefaultingSource::Posting:
                defaultDimension = dimension;
                break;
            case DimensionDefaultingSource::Table:
            default:
                defaultDimension = inventTable.inventDimLinkedDefaultDimension(InventDim::find(inventTrans.inventDim().InventDimId));
        }
        return defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCostTransList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the <c>InventTrans</c> record that is currently being processed to <c>RecordSortedList</c>
    ///    object.
    /// </summary>
    /// <remarks>
    ///    Add the record to the <c>RecordSortedList</c> object. Before doing this, check whether the record
    ///    already exists. To add the right quantities, a table method is used.
    /// </remarks>

    protected void addToCostTransList()
    {
        InventCostTrans     inventCostTrans;
        DimensionDefault    defaultDimension = dimension;
        // Use the inventDim from the inventTrans record, not the inventDim of the movement
        // which is set as a parameter
        if (InventCostDimensionDefaultingSourceFeature::instance().isEnabled())
        {
            defaultDimension = this.getDefaultDimensionWhenEnableDimensionDefaultingSourceFeature();
        }
        inventCostTrans = InventCostTrans::initInventCostTrans(costTransState,
                                                               inventItemPrice,
                                                               inventTable,
                                                               voucher,
                                                               transDate,
                                                               defaultDimension,
                                                               inventTrans,
                                                               inventTrans.inventDim(),
                                                               inventTransOrigin);

        inventCostTransList.add(inventCostTrans);

        // Now store the record in the global class variable, because it has
        // to be reused for the assigning of the variances to the map
        costTrans = inventCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToCostTransVarianceMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the variance to the <c>keyCostTransVarianceMap</c> map.
    /// </summary>
    /// <remarks>
    ///    Variance calculation is done in the <c>inventCostVariance</c> class.
    /// </remarks>

    protected void addToCostTransVarianceMap()
    {
        InventCostTransVarianceList     inventCostTransVarianceList;
        str                             parmKey;

        // Check if I have a inventCostTrans record to which the variance has to be assigned
        // The voucher has to be specified always, so it is one of the criteria to check
        if (!costTrans.Voucher)
        {
            // Assert: should not occur
            throw error("@SYS111327");
        }
        else
        {
            parmKey = InventCostTransVarianceMap::buildKey(costTrans);
        }

        // Calculate the variance using the helper class
        inventCostTransVarianceList = InventCostCreateVarianceList::createVarianceListFromCostListDelta(actCostList, estCostList);

        // This variance list belongs to the currently processed inventTrans, which itself belongs
        // to a inventCostTrans record
        if (inventCostTransVarianceList && inventCostTransVarianceList.length() != 0)
        {
            // Now add for this inventCostTrans record the variance to the keyCostTransVarianceMap
            inventCostTransVarianceMap.add(parmKey, inventCostTransVarianceList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addToTotal</Name>
				<Source><![CDATA[
    protected void addToTotal()
    {
        totalQty                  += inventTrans.Qty;
        pdsCWTotalQty             += inventTrans.PdsCWQty;
        totalCostAmountPhysical   += inventTrans.CostAmountPhysical;
        totalCostAmountPosted     += inventTrans.CostAmountPosted;
        totalCostAmountAdjustment += inventTrans.CostAmountAdjustment;
        // <GEERU>
        totalCostAmountPhysicalSec   += inventTrans.CostAmountSecCurPhysical_RU;
        totalCostAmountPostedSec     += inventTrans.CostAmountSecCurPosted_RU;
        totalCostAmountAdjustmentSec += inventTrans.CostAmountSecCurAdjustment_RU;
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcActCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the actual cost amount for the transaction.
    /// </summary>
    /// <returns>
    ///    The actual cost amount for the transaction.
    /// </returns>
    protected CostAmount calcActCost()
    {
        if (costTransState == InventCostTransState::Physical)
        {
            return inventTrans.CostAmountPhysical;
        }
        else
        {
            return inventTrans.CostAmountPosted;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcActCostSecCur_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the actual cost amount for the transaction.
    /// </summary>
    /// <returns>
    /// The actual cost amount for the transaction.
    /// </returns>
    protected CostAmount calcActCostSecCur_RU()
    {
        if (costTransState == InventCostTransState::Physical)
        {
            return inventTrans.CostAmountSecCurPhysical_RU;
        }

        return inventTrans.CostAmountSecCurPosted_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBackDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a revaluation for this transaction is necessary.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The ledgerVoucher that should be used to add the ledger transactions.
    /// </param>
    /// <param name="_inventTransCurrency">
    /// The transaction currency: primary (default) or secondary - used for Dual Warehousing
    /// </param>
    /// <remarks>
    /// If inventItemPrice records in the future from the currently
    /// trans date exist, for each new price, a revaluation has to be done
    /// This is done by calling the inventCostRevaluate::revaluateCostTransList
    /// method.
    /// </remarks>
    protected void checkBackDate(LedgerVoucher          _ledgerVoucher,
                                 InventTransCurrency_RU _inventTransCurrency)
    {
        InventItemPrice     newItemPrice;
        InventItemPrice     currentItemPrice;
        InventItemPrice     previousItemPrice;
        TransDate           priceDate;

        // Local void to trigger the revaluation
        void revaluate()
        {
            if (previousItemPrice && currentItemPrice)
            {
                // OK, for each price now create a revaluation entry
                // <GEERU>
                InventCostRevaluate::revaluateFromBackdate(currentItemPrice, previousItemPrice, inventCostTransList, _ledgerVoucher, _inventTransCurrency);
                // </GEERU>

                // Now set this record as the previous record
                previousItemPrice.data(currentItemPrice);
            }
        }

        // Set the itmPrice that was used for this posting as the previous item price
        previousItemPrice.data(inventItemPrice);

        // First of all, I need to find all the prices that are in the future
        while select * from newItemPrice
            order by ActivationDate asc, CreatedDateTime asc
            where newItemPrice.ItemId          == inventTable.ItemId
               && newItemPrice.ActivationDate  >  inventItemPrice.ActivationDate
               && newItemPrice.PriceType       == this.priceType()
               && newItemPrice.InventDimId     == inventItemPrice.InventDimId
        {
            if (priceDate != newItemPrice.ActivationDate)
            {
                // OK, date has changed, assign current one
                priceDate = newItemPrice.ActivationDate;
                // The futureItemPricePrev instance holds the last price record of the previous day
                revaluate();
            }

            currentItemPrice.data(newItemPrice);
        }

        // Now revaluate the last record that has been selected
        revaluate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the current event is supported.
    /// </summary>
    protected void checkEvent()
    {
        this.checkNoProdEndBeforeConsumption();

        this.checkNoReturnBeforeDelivery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoProdEndBeforeConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the consumption for a production order occurred before the financial update.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// A critical error occurred in the <c>checkNoProdEndBeforeConsumption</c> method.
    /// </exception>
    protected void checkNoProdEndBeforeConsumption()
    {
        if (costTransState == InventCostTransState::Financial       &&
            inventTrans.DateFinancial < inventTrans.DatePhysical    &&
            ( inventTransOrigin.ReferenceCategory == InventTransType::Production ||
              inventTransOrigin.ReferenceCategory == InventTransType::ProdLine
              || inventTransOrigin.ReferenceCategory == InventTransType::PmfProdCoBy
              ))
        {
            throw error(strfmt("@SYS127720", inventTransOrigin.ReferenceId, inventTrans.DatePhysical));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNoReturnBeforeDelivery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the physical return occurred before the original transaction was updated.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    A critical error occurred in the <c>checkNoReturnBeforeDelivery</c> method.
    /// </exception>
    protected void checkNoReturnBeforeDelivery()
    {
        if (isReturn == true                                 &&
            inventTransOrig.RecId                            &&
            costTransState == InventCostTransState::Physical &&
            inventTrans.DatePhysical < inventTransOrig.DatePhysical)
        {
            throw error(strFmt("@SYS127721", inventTrans.ItemId, inventTransOrig.DatePhysical));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParm</Name>
				<Source><![CDATA[
    protected boolean checkParm(
        InventMovement       _inventMovement,
        Voucher              _voucher,
        TransDate            _transDate,
        InventCostTransState _costTransState,
        boolean              _isReturn)
    {
        boolean     ok = true;

        // All these check are asserts and should never occur.
        // Check if state has changed
        if (costTransState != _costTransState)
        {
            ok = checkFailed("@SYS111329");
        }

        // Check if return type has changed
        if (isReturn != _isReturn)
        {
            ok = checkFailed("@SYS111330");
        }

        // Check voucher
        if (voucher   != _voucher ||
            transDate != _transDate)
        {
            ok = checkFailed("@SYS111331");
        }

        // Check if some of the variables that have been set
        // from the inventMovement has changed
        if (inventTable.ItemId    != _inventMovement.itemId()      ||
            inventDim.InventDimId != _inventMovement.inventDimId() ||
            dimension             != _inventMovement.defaultDimension()   ||
            inventTransId         != _inventMovement.transId())
        {
            ok = checkFailed("@SYS111332");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Throws an error if the broken down variance differs from the variance on <c>InventTrans</c>.
    /// </summary>
    /// <param name="_inventCostTransVarianceMap">
    ///    The broken down variance.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    There is a difference between the broken down variance and the variance on InventTrans.
    /// </exception>
    protected void checkVariance(InventCostTransVarianceMap _inventCostTransVarianceMap)
    {
        CostAmount  variance = CurrencyExchangeHelper::amount(_inventCostTransVarianceMap.costAmountPosted());
        CostAmount  varianceOnInventTrans;

        if (costTransState == InventCostTransState::Physical)
        {
            varianceOnInventTrans = CurrencyExchangeHelper::amount(this.totalCostAmount()) - totalCostAmountPhysical;
        }
        else
        {
            varianceOnInventTrans = totalCostAmountPhysical - totalCostAmountPosted - totalCostAmountAdjustment;
        }

        CostAmount delta = variance + varianceOnInventTrans;
        var totalAllowedRoundingPrecision = Currency::roundingPrecisionAdjusted(Ledger::accountingCurrency()) * roundingContribution;

        // Due to the fact, that the rounding can be entered negative, put the abs on both side.
        if (abs(delta) > abs(totalAllowedRoundingPrecision))
        {
            warning(strFmt("@SCM:InventCostMovementCheckVarianceWarningNew", abs(delta)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeCostMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finalizes an inventory cost movement.
    /// </summary>
    /// <param name="_inventMovement">
    ///    The inventory cost movement.
    /// </param>
    /// <param name="_ledgerVoucher">
    ///    The ledger voucher.
    /// </param>
    /// <param name="_costTransState">
    ///    The cost transaction state.
    /// </param>
    /// <param name="_isReturn">
    ///    A Boolean value that determines whether the cost transaction is a return; optional.
    /// </param>
    /// <param name="_inventTransCurrency">
    /// The transaction currency: primary (default) or secondary - used for Dual Warehousing
    /// </param>
    /// <param name="_zeroQty">
    /// Used for Dual Warehousing to calculate primary and secondary costs independently without doubling quantities.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The parameters have changed.
    /// </exception>
    public void finalizeCostMovement(InventMovement         _inventMovement,
                                     LedgerVoucher          _ledgerVoucher,
                                     InventCostTransState   _costTransState,
                                     boolean                _isReturn            = false,
                                     InventTransCurrency_RU _inventTransCurrency = InventTransCurrency_RU::PrimaryCur,
                                     boolean                _zeroQty             = false)
    {
        // First of all, check the parameters
        // This is done for safety reasons
        if (!this.checkParm(_inventMovement, _ledgerVoucher.lastVoucher(), _ledgerVoucher.lastTransDate(), _costTransState, _isReturn))
        {
            throw error("@SYS18447");
        }

        // Check if a backdating has occurred
        // <GEERU>
        this.checkBackDate(_ledgerVoucher, _inventTransCurrency);
        // </GEERU>

        // Post to ledger
        // <GEERU>
        InventCostPost::post(_ledgerVoucher, inventTable, inventCostTransList, inventCostTransVarianceMap, InventAdjustmentSpec::Total, _inventTransCurrency);
        // </GEERU>

        // Check the calculated variance
        // <GEERU>
        // for secondary cost this check has no sense, since difference between
        // "fixed secondary cost" and "fixed cost * exchange rate" can be large intentionally
        if (_inventTransCurrency == InventTransCurrency_RU::PrimaryCur)
        {
        // </GEERU>
            this.checkVariance(inventCostTransVarianceMap);
        // <GEERU>
        }
        // </GEERU>

        // Now put the variances to the global record sorted list
        // <GEERU>
        InventCostUpdateGlobal::Instance().inventCostUpdate().finalizeCostTransVariance(_zeroQty ? inventCostTransList.zeroQtyList_RU() : inventCostTransList, inventCostTransVarianceMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActCostList</Name>
				<Source><![CDATA[
    protected void initActCostList()
    {
        actCostList = null;

        // Initialize the list
        if (isReturn == false)
        {
            if (costTransState == InventCostTransState::Physical)
            {
                this.initActCostListPhysical();
            }
            else
            {
                this.initActCostListFinancial();
            }
        }
        else
        {
            if (costTransState == InventCostTransState::Physical)
            {
                this.initActCostListPhysicalReturn();
            }
            else
            {
                this.initActCostListFinancialReturn();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActCostListFinancial</Name>
				<Source><![CDATA[
    protected void initActCostListFinancial()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActCostListFinancialReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the actual cost list for a financial return.
    /// </summary>
    protected void initActCostListFinancialReturn()
    {
        if (inventTrans.useReturnTransToSyncCostPrice(inventTransOrigin.ReferenceCategory))
        {
            actCostList = InventCostTransCostList::newReturnCostList(
                                inventTable,
                                inventTrans.ReturnInventTransOrigin,
                                inventTrans.InventTransOrigin,
                                this.varianceType(),
                                dimension,
                                inventItemPrice,
                                inventTrans.Qty);
        }
        else
        {
            this.addDefaultToActCostList();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActCostListPhysical</Name>
				<Source><![CDATA[
    protected void initActCostListPhysical()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initActCostListPhysicalReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the actual cost list for a physical return.
    /// </summary>
    protected void initActCostListPhysicalReturn()
    {
        // Is this a physical return?
        if (inventTransOrig.RecId)
        {
            // The actual cost is the standard cost + the variance from the physical transaction we are returning
            actCostList = InventCostTransCostList::newPlannedCostList(inventTable, inventTransOrig, this.varianceType(), dimension, inventTrans.Qty, stdCostList);
        }
        else
        {
            // The transaction we are returning is financially updated - use the financial value
            this.initActCostListFinancialReturn();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostMovement</Name>
				<Source><![CDATA[
    public void initCostMovement(
        InventCostTransState _costTransState,
        Voucher              _voucher,
        TransDate            _transDate,
        boolean              _isReturn)
    {
        // Check if voucher and trans date has been specified
        if (!_voucher ||
            !_transDate)
        {
            throw error("@SYS111328");
        }

        // Set parameters
        costTransState   = _costTransState;
        voucher          = _voucher;
        transDate        = _transDate;
        isReturn         = _isReturn;

        // reset the sum variables

        totalQty                  = 0;
        pdsCWTotalQty             = 0;
        totalCostAmountPhysical   = 0;
        totalCostAmountPosted     = 0;
        totalCostAmountAdjustment = 0;
        // <GEERU>
        totalCostAmountPhysicalSec   = 0;
        totalCostAmountPostedSec     = 0;
        totalCostAmountAdjustmentSec = 0;
        // </GEERU>

        // Find item price for this movement (=Item, InventDimId)
        this.initInventItemPrice();

        // Now initialize the stdCostList
        this.initStdCostList();

        // Reset counter
        roundingContribution = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEstCostList</Name>
				<Source><![CDATA[
    protected void initEstCostList()
    {
        estCostList = null;

        // Initialize the list
        if (isReturn == false)
        {
            if (costTransState == InventCostTransState::Physical)
            {
                this.initEstCostListPhysical();
            }
            else
            {
                this.initEstCostListFinancial();
            }
        }
        else
        {
            if (costTransState == InventCostTransState::Physical)
            {
                this.initEstCostListPhysicalReturn();
            }
            else
            {
                this.initEstCostListFinancialReturn();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEstCostListFinancial</Name>
				<Source><![CDATA[
    protected void initEstCostListFinancial()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEstCostListFinancialReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the estimated cost list for a financial return.
    /// </summary>
    protected void initEstCostListFinancialReturn()
    {
        // Estimated = Planned Cost
        estCostList = InventCostTransCostList::newPlannedCostList(inventTable, inventTrans, this.varianceType(), dimension, inventTrans.Qty, stdCostList, inventItemPrice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEstCostListPhysical</Name>
				<Source><![CDATA[
    protected void initEstCostListPhysical()
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEstCostListPhysicalReturn</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the estimated cost list for physical returns.
    /// </summary>
    protected void initEstCostListPhysicalReturn()
    {
        // Estimated = Standard Cost
        estCostList = InventCostTransCostList::newFromList(stdCostList, inventTrans.Qty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventMovement</Name>
				<Source><![CDATA[
    protected void initFromInventMovement(InventMovement _inventMovement)
    {
        inventDim     = _inventMovement.inventdim();
        dimension     = _inventMovement.defaultDimension();
        inventTransId = _inventMovement.transId();
        inventTable   = _inventMovement.inventTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTrans</Name>
				<Source><![CDATA[
    protected void initFromInventTrans(
        InventTrans _inventTrans,
        InventTrans _inventTransOrig = null)
    {
        // Check if record has been specified
        if (!_inventTrans)
        {
            throw error("@SYS111333");
        }

        // Set the inventTrans record
        inventTrans = _inventTrans;

        // Set the inventTransOrigin record
        if (!inventTransOrigin || inventTransOrigin.RecId != inventTrans.InventTransOrigin)
        {
            inventTransOrigin = _inventTrans.inventTransOrigin();
        }

        // In case of a return, set the orig inventTrans record
        if (isReturn == true)
        {
            // Set the return inventTrans
            inventTransOrig = _inventTransOrig;
        }

        // Initialize the estimated cost list
        this.initEstCostList();

        // Initialize the actual cost list
        this.initActCostList();

        // Two things can contribute to the rounding:
        // 1.) On each inventTrans record we can have a delta of 0.01
        // 2.) For each settlement, we can have a delta of 0.01
        // ==> The number of transactions needs to be counted and if there are settlements,
        // they need to be added as well.
        roundingContribution += max(1, inventTrans.countOfSettlements());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventItemPrice</Name>
				<Source><![CDATA[
    protected void initInventItemPrice()
    {
        inventItemPrice = InventItemPrice::stdCostFindDate(inventTable,
                                                           transDate,
                                                           '',
                                                           inventDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initStdCostList</Name>
				<Source><![CDATA[
    protected void initStdCostList()
    {
        // Initialize the standard cost list
        stdCostList = InventCostTransCostList::newStdCostList(inventItemPrice.RecId,
                                                                   this.varianceType(),
                                                                   dimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(InventMovement _inventMovement)
    {
        // Initialize the local trans and variance lists
        inventCostTransVarianceMap = InventCostTransVarianceMap::construct();
        inventCostTransList      = InventCostTransList::construct();

        // Initialize variables from inventMovement
        this.initFromInventMovement(_inventMovement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventItemPrice</Name>
				<Source><![CDATA[
    public InventItemPrice parmInventItemPrice(InventItemPrice _inventItemPrice = inventItemPrice)
    {
        inventItemPrice = _inventItemPrice;

        return inventItemPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTotalQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight total quantity for the class.
    /// </summary>
    /// <returns>
    /// The catch weight total quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTotalQty()
    {
        return pdsCWTotalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceType</Name>
				<Source><![CDATA[
    protected CostingVersionPriceType priceType()
    {
        return CostingVersionPriceType::Cost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCostAmount</Name>
				<Source><![CDATA[
    public CostAmount totalCostAmount()
    {
        // Be careful using this method,
        // check scope of inventCostMovement class
        return totalQty * inventItemPrice.pcsPrice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCostAmountSecCur_RU</Name>
				<Source><![CDATA[
    public CostAmount totalCostAmountSecCur_RU()
    {
        return totalQty * inventItemPrice.pcsPriceSecCur_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQty</Name>
				<Source><![CDATA[
    public Qty totalQty()
    {
        // Be careful using this method,
        // check scope of inventCostMovement class
        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>varianceType</Name>
				<Source><![CDATA[
    protected InventCostVarianceType varianceType()
    {
        return InventCostVarianceType::CostChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostMovement construct(InventMovement _inventMovement)
    {
        return new InventCostMovement(_inventMovement);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventMovement</Name>
				<Source><![CDATA[
    public static InventCostMovement newFromInventMovement(InventMovement _inventMovement)
    {
        switch (_inventMovement.buffer().TableId)
        {
            case tablenum(PurchLine):
                return InventCostMovement_Purch::construct(_inventMovement);
            case tablenum(ProdTable):
            case tablenum(PmfProdCoBy):
                return InventCostMovement_Prod::construct(_inventMovement);
            case tablenum(InventJournalTrans):
            case tablenum(InventTransferLine):
                return InventCostMovement_Invent::construct(_inventMovement);
            case tablenum(KanbanJob):
                return InventCostMovement_KanbanJob::construct(_inventMovement);
            // <GJP>
            case tableNum(AssetComponent_JP):
                return InventCostMovement_Component_JP::construct(_inventMovement);
            // </GJP>
            default:
            {
                if (_inventMovement is InventMov_Virtuel && ProdPostScrapStdCostModelFeature::instance().isEnabled())
                {
                    InventMov_Virtuel movement = _inventMovement as InventMov_Virtuel;
                    if (movement.parmTransType() == InventTransType::Production)
                    {
                        return InventCostMovement_Prod::construct(_inventMovement);
                    }
                }
                return InventCostMovement::construct(_inventMovement);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>