<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetDetailsInquiryRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetDetailsInquiryRequest</c> class is used to collect the information that is required
///    to inquire details on the budget transactions.
/// </summary>
public class BudgetDetailsInquiryRequest
{
    DimensionFocusNameTmp dimensionFocusNameValueTmp;
    DimensionFocusNameTmp dimensionFocusNameDescriptionTmp;
    Name                  dimensionFocusName;
    Name                  selectedDimensionFocusName;

    BudgetModelId         budgetModelId;
    boolean               includeSubModels;

    AllDraftCompleted     transactionStatus;
    BudgetTransactionType transactionType;

    TransDate             startDate;
    TransDate             endDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmDimensionFocusName</Name>
				<Source><![CDATA[
    public Name parmDimensionFocusName(Name _dimensionFocusName = dimensionFocusName)
    {
        dimensionFocusName = _dimensionFocusName;

        return dimensionFocusName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetModelId</Name>
				<Source><![CDATA[
    public BudgetModelId parmBudgetModelId(BudgetModelId _budgetModelId = budgetModelId)
    {
        budgetModelId = _budgetModelId;

        return budgetModelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeSubModels</Name>
				<Source><![CDATA[
    public boolean parmIncludeSubModels(boolean _includeSubModels = includeSubModels)
    {
        includeSubModels = _includeSubModels;

        return includeSubModels;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionStatus</Name>
				<Source><![CDATA[
    public AllDraftCompleted parmTransactionStatus(AllDraftCompleted _transactionStatus = transactionStatus)
    {
        transactionStatus = _transactionStatus;

        return transactionStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionType</Name>
				<Source><![CDATA[
    public BudgetTransactionType parmTransactionType(BudgetTransactionType _transactionType = transactionType)
    {
        transactionType = _transactionType;

        return transactionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public TransDate parmStartDate(TransDate _startDate = startDate)
    {
        startDate = _startDate;

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDate</Name>
				<Source><![CDATA[
    public TransDate parmEndDate(TransDate _endDate = endDate)
    {
        endDate = _endDate;

        return endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the parameters are valid.
    /// </summary>
    /// <returns>
    ///    true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validateParameters()
    {
        boolean isValid = true;

        if (!this.parmDimensionFocusName())
        {
            // Dimension focus was not entered.
            isValid = checkFailed(strfmt("@SYS110217", "@SYS83218"));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHeaderRangesToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the <c>BudgetTransactionHeader</c> record query ranges to the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The query for which to add the ranges.
    /// </param>
    public void addHeaderRangesToQuery(Query _query)
    {
        QueryBuildDataSource budgetTransactionHeaderDS;

        budgetTransactionHeaderDS = _query.dataSourceTable(tableNum(BudgetTransactionHeader));

        if (budgetTransactionHeaderDS)
        {
            // Restrict the headers to the requested values.

            budgetTransactionHeaderDS.clearRange(fieldNum(BudgetTransactionHeader, BudgetModelId));
            QueryBuildRange budgetModelIdQBR = budgetTransactionHeaderDS.addRange(fieldNum(BudgetTransactionHeader, BudgetModelId));
            budgetModelIdQBR.status(RangeStatus::Locked);

            if (this.parmBudgetModelId())
            {
                if (this.parmIncludeSubModels())
                {
                    str budgetModelValue = BudgetTransactionManager::getAllSubModelsForQueryRange(this.parmBudgetModelId());
                    budgetModelIdQBR.value(budgetModelValue);
                }
                else
                {
                    budgetModelIdQBR.value(SysQuery::value(this.parmBudgetModelId()));
                }
            }

            budgetTransactionHeaderDS.clearRange(fieldNum(BudgetTransactionHeader, BudgetTransactionType));
            QueryBuildRange budgetTransactionTypeQBR = budgetTransactionHeaderDS.addRange(fieldNum(BudgetTransactionHeader, BudgetTransactionType));
            budgetTransactionTypeQBR.status(RangeStatus::Locked);

            if (this.parmTransactionType())
            {
                budgetTransactionTypeQBR.value(SysQuery::value(enum2int(this.parmTransactionType())));
            }

            budgetTransactionHeaderDS.clearRange(fieldNum(BudgetTransactionHeader, TransactionStatus));
            QueryBuildRange transactionStatusQBR = budgetTransactionHeaderDS.addRange(fieldNum(BudgetTransactionHeader, TransactionStatus));
            transactionStatusQBR.status(RangeStatus::Locked);

            // If allDraftCompleted.selection() == All, clearing the range is enough.
            switch (this.parmTransactionStatus())
            {
                case AllDraftCompleted::Completed:
                    transactionStatusQBR.value(int2str(enum2int(BudgetTransactionStatus::Completed)));
                    break;

                case AllDraftCompleted::Draft:
                    transactionStatusQBR.value(int2str(enum2int(BudgetTransactionStatus::Draft)));
                    break;
            }

            // Filter the budget transactions based on the current legal entity.
            budgetTransactionHeaderDS.clearRange(fieldnum(BudgetTransactionHeader, PrimaryLedger));
            BudgetTransactionManager::addPrimaryLedgerRangeToQuery(_query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineDateRangeToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds the <c>BudgetTransactionLineView</c> record date query range to the specified query.
    /// </summary>
    /// <param name="_query">
    ///    The query for which to add the range.
    /// </param>
    public void addLineDateRangeToQuery(Query _query)
    {
        QueryBuildDataSource    budgetTransactionLineViewDS;

        budgetTransactionLineViewDS = _query.dataSourceTable(tableNum(BudgetTransactionLineView));

        if (budgetTransactionLineViewDS)
        {
            budgetTransactionLineViewDS.clearRange(fieldNum(BudgetTransactionLineView, TransactionDate));
            QueryBuildRange dateQBR = budgetTransactionLineViewDS.addRange(fieldNum(BudgetTransactionLineView, TransactionDate));
            dateQBR.status(RangeStatus::Locked);

            if (this.parmStartDate() || this.parmEndDate())
            {
                dateQBR.value(SysQuery::range(this.parmStartDate(), this.parmEndDate()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensionFocusNameTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>DimensionFocusNameTmp</c> table with ledger dimension values from budget transaction line entries.
    /// </summary>
    /// <returns>
    /// An instance of <c>DimensionFocusNameTmp</c> table.
    /// </returns>
    public DimensionFocusNameTmp populateDimensionFocusNameTmp()
    {
        boolean                 isBudgetModelIdSet;
        boolean                 isIncludeSubModelsSet;
        boolean                 isTransactionTypeSet;
        boolean                 isTransactionStatusSet;
        boolean                 isStartDateSet;
        boolean                 isEndDateSet;
        boolean                 isFocusTempTableEmpty;

        BudgetTransactionStatus budgetTransactionStatus;

        isBudgetModelIdSet    = this.parmBudgetModelId() != '';
        isIncludeSubModelsSet = this.parmIncludeSubModels() == NoYes::Yes;
        isTransactionTypeSet  = enum2int(this.parmTransactionType()) != 0;
        isStartDateSet        = this.parmStartDate() != dateNull();
        isEndDateSet          = this.parmEndDate() != dateNull();

        if (this.parmTransactionStatus())
        {
            switch (this.parmTransactionStatus())
            {
                case AllDraftCompleted::Completed:
                    isTransactionStatusSet = true;
                    budgetTransactionStatus = BudgetTransactionStatus::Completed;
                    break;

                case AllDraftCompleted::Draft:
                    isTransactionStatusSet = true;
                    budgetTransactionStatus = BudgetTransactionStatus::Draft;
                    break;
            }
        }

        if (selectedDimensionFocusName != this.parmDimensionFocusName())
        {
            // Clear the dimensionFocusNameTmp tables when dimension focus value is changed.
            delete_from dimensionFocusNameValueTmp;
            delete_from dimensionFocusNameDescriptionTmp;

            // Reset the selectedDimensionFocusName value.
            selectedDimensionFocusName = this.parmDimensionFocusName();
            isFocusTempTableEmpty = true;
        }

        Query budgetQuery = new Query();

        QueryBuildDataSource budgetModelDS = SysQuery::findOrCreateDataSource(budgetQuery, tableNum(BudgetModel));

        if (isBudgetModelIdSet)
        {
            SysQuery::findOrCreateRange(budgetModelDS, fieldNum(BudgetModel, ModelId)).value(SysQuery::value(budgetModelId));
        }

        if (!isIncludeSubModelsSet)
        {
            SysQuery::findOrCreateRange(budgetModelDS, fieldNum(BudgetModel, Type)).value(SysQuery::value(enum2int(HeadingSub::Heading)));
        }

        QueryBuildDataSource budgetHeaderDS = SysQuery::findOrCreateDataSource(budgetQuery, tableNum(BudgetTransactionHeader), tableNum(BudgetModel));
        budgetHeaderDS.addLink(fieldNum(BudgetModel, SubModelId), fieldNum(BudgetTransactionHeader, BudgetModelId));

        Ledger::addSecureRangeForLedger(budgetHeaderDS, fieldNum(BudgetTransactionHeader, PrimaryLedger));

        if (isTransactionTypeSet)
        {
            SysQuery::findOrCreateRange(budgetHeaderDS, fieldNum(BudgetTransactionHeader, BudgetTransactionType)).value(SysQuery::value(transactionType));
        }

        if (isTransactionStatusSet)
        {
            SysQuery::findOrCreateRange(budgetHeaderDS, fieldNum(BudgetTransactionHeader, TransactionStatus)).value(SysQuery::value(budgetTransactionStatus));
        }

        QueryBuildDataSource budgetLineDS = SysQuery::findOrCreateDataSource(budgetQuery, tableNum(BudgetTransactionLine), tableNum(BudgetTransactionHeader));
        budgetLineDS.addLink(fieldNum(BudgetTransactionHeader, RecId), fieldNum(BudgetTransactionLine, BudgetTransactionHeader));

        if (isStartDateSet || isEndDateSet)
        {
            SysQuery::findOrCreateRange(budgetLineDS, fieldNum(BudgetTransactionLine, Date)).value(SysQuery::range(startDate, endDate));
        }

        QueryBuildDataSource davcDS = SysQuery::findOrCreateDataSource(budgetQuery, tableNum(DimensionAttributeValueCombination), tableNum(BudgetTransactionLine));
        davcDS.addLink(fieldNum(BudgetTransactionLine, LedgerDimension), fieldNum(DimensionAttributeValueCombination, RecId));
        davcDS.fetchMode(QueryFetchMode::One2One);

        if (!isFocusTempTableEmpty)
        {
            QueryBuildDataSource focusNameTmpDS = SysQuery::findOrCreateDataSource(budgetQuery, tableNum(DimensionFocusNameTmp), tableNum(BudgetTransactionLine));
            focusNameTmpDS.joinMode(JoinMode::NoExistsJoin);
            focusNameTmpDS.fetchMode(QueryFetchMode::One2One);
            focusNameTmpDS.addLink(fieldNum(BudgetTransactionLine, LedgerDimension), fieldNum(DimensionFocusNameTmp, LedgerDimension));

            // Associate the dimensionFocusNameValueTmp data source with the DimensionFocusNameTmp data source in budgetQuery.
            // Note that this association is stored in the query, and not the QueryRun, so this impacts the
            // Query::insert_recordset call inside DimensionFocusNameTmp::generateFocusNames.
            QueryRun budgetQueryRun = new QueryRun(budgetQuery);
            budgetQueryRun.setRecord(dimensionFocusNameValueTmp);
            budgetQuery = budgetQueryRun.query();
        }

        // Generate the FocusValues for the new LedgerDimensions into a new temp table instance.
        DimensionFocusNameTmp dimensionFocusNameTmpLocal;
        DimensionFocusNameTmp::generateFocusNames(dimensionFocusNameTmpLocal, budgetQuery, this.parmDimensionFocusName());

        // Merge the new values into the original list of focus display values.
        // Insert the values using a new linked instance of the DimensionFocusNameTmp table
        // to prevent the data source association that would otherwise revert the operation to row-by-row.
        DimensionFocusNameTmp dimensionFocusNameValueTmpLocal;
        dimensionFocusNameValueTmpLocal.linkPhysicalTableInstance(dimensionFocusNameValueTmp);
        insert_recordset dimensionFocusNameValueTmpLocal
                  (LedgerDimension, FocusValue, DimValue1, DimValue2, DimValue3, DimValue4, DimValue5, DimValue6, DimValue7, DimValue8, DimValue9, DimValue10, DimValue11)
            select LedgerDimension, FocusValue, DimValue1, DimValue2, DimValue3, DimValue4, DimValue5, DimValue6, DimValue7, DimValue8, DimValue9, DimValue10, DimValue11
            from dimensionFocusNameTmpLocal;

        // Generate the description FocusValues for the new LedgerDimensions.
        DimensionFocusNameTmp::generateFocusDescriptions(
            dimensionFocusNameTmpLocal, this.parmDimensionFocusName(), new Connection());

        // Merge the new values into the original list of description focus display values.
        // Insert the values using a new linked instance of the DimensionFocusNameTmp table
        // to prevent the data source association that would otherwise revert the operation to row-by-row.
        DimensionFocusNameTmp dimensionFocusNameDescriptionTmpLocal;
        dimensionFocusNameDescriptionTmpLocal.linkPhysicalTableInstance(dimensionFocusNameDescriptionTmp);
        insert_recordset dimensionFocusNameDescriptionTmpLocal (LedgerDimension, FocusValue)
            select LedgerDimension, FocusValue
            from dimensionFocusNameTmpLocal;

        return dimensionFocusNameValueTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFocusNameDescriptionTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the populated <c>DimensionFocusNameTmp</c> table with ledger dimension names from budget transaction line entries.
    /// </summary>
    /// <returns>
    /// An instance of <c>DimensionFocusNameTmp</c> table.
    /// </returns>
    public DimensionFocusNameTmp getDimensionFocusNameDescriptionTmp()
    {
        return dimensionFocusNameDescriptionTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>