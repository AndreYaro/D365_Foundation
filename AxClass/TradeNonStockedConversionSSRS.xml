<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionSSRS</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TradeNonStockedConversionSSRS extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addConversionRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a range for the <c>TradeNonStockedConversion</c> record for which to print the conversion
    ///    report.
    /// </summary>
    protected void addConversionRange()
    {
        Query                     query;
        QueryBuildDataSource      qbds;
        QueryBuildRange           qbr;
        TradeNonStockedConversion tradeNonStockedConversion = this.parmArgs().record() as TradeNonStockedConversion;

        if (tradeNonStockedConversion.RecId)
        {
            query = this.getQuery();
            qbds  = query.dataSourceTable(tableNum(TradeNonStockedConversion));
            qbr   = SysQuery::findOrCreateRange(qbds,(fieldNum(TradeNonStockedConversion,RecId)));
            qbr.value(queryValue(tradeNonStockedConversion.RecId));
            qbr.status(RangeStatus::Hidden);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a query that is used by the report.
    /// </summary>
    /// <returns>
    ///    The query that is used by the report.
    /// </returns>
    protected Query getQuery()
    {
        return this.getFirstQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares a query that will be used by the report.
    /// </summary>
    protected void prePromptModifyContract()
    {
        super();

        this.addConversionRange();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>TradeNonStockedConversionSSRS</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TradeNonStockedConversionSSRS</c> class.
    /// </returns>
    public static TradeNonStockedConversionSSRS construct()
    {
        return new TradeNonStockedConversionSSRS();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        if (_args && _args.record() && _args.record().TableId == tableNum(TradeNonStockedConversion))
        {
            TradeNonStockedConversionSSRS::newTradeNonStockedConversionSSRS(_args).startOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTradeNonStockedConversionSSRS</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>TradeNonStockedConversionController</c> class.
    /// </summary>
    /// <param name="_args">
    ///    The arguments to pass.
    /// </param>
    /// <returns>
    ///    An instance of the <c>TradeNonStockedConversionController</c> class.
    /// </returns>
    public static TradeNonStockedConversionSSRS newTradeNonStockedConversionSSRS(Args _args)
    {
        TradeNonStockedConversionSSRS tradeNonStockedConversionSSRS = TradeNonStockedConversionSSRS::construct();

        switch (_args.menuItemName())
        {
            case menuitemOutputStr(TradeNonStockedConversionChangeLogReport):
                tradeNonStockedConversionSSRS.parmReportName(ssrsReportStr(TradeNonStockedConversionChangeLog, Report));
                break;
            case menuitemOutputStr(TradeNonStockedConversionCheckLogReport):
                tradeNonStockedConversionSSRS.parmReportName(ssrsReportStr(TradeNonStockedConversionCheckLog, Report));
                break;
        }
        tradeNonStockedConversionSSRS.parmArgs(_args);

        return tradeNonStockedConversionSSRS;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>