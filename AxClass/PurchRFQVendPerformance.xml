<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQVendPerformance</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQVendPerformance
{
    FromDate                        fromDate;
    ToDate                          toDate;
    VendAccount                     fromVendor;
    VendAccount                     toVendor;
    NoYes                           successRate;
    NoYes                           vendorImportance;
    PurchRFQVendPerformanceTMP          performance;
    PurchRFQVendPerformanceReasonCodeTMP purchRFQVendPerformanceReasonCodeTMP;

    List                            performanceList;
    List                            performanceReasonCodeList;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountAllAcceptedReplies</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates total amount of accepted replies from all vendors.
    /// </summary>
    /// <param name="_perfVendImportance">
    ///    The <c>PurchRFQVendPerformanceTMP</c> table to fill with data.
    /// </param>
    protected void amountAllAcceptedReplies(PurchRFQVendPerformanceTMP _perfVendImportance)
    {
        VendRFQJour    vendRFQJour;
        AmountMST      rfqAmount;
        MapEnumerator  perfEnumerator;
        AmountMST      amountRepliesAllVendors;
        Map            vendorAmountMap;

        if (vendorImportance)
        {
            vendorAmountMap = new Map(Types::String,Types::Real);
            while select Amount, CurrencyCode, rfqDate, VendAccount
            from  vendRFQJour
                where vendRFQJour.Status  == PurchRFQStatus::Accepted
                   && (!fromVendor || vendRFQJour.VendAccount >= fromVendor)
                   && (!toVendor   || vendRFQJour.VendAccount <= toVendor)
                   && (!fromDate   || vendRFQJour.rfqDate     >= fromDate)
                   && (!toDate     || vendRFQJour.rfqDate     <= toDate)
            {
                rfqAmount = CurrencyExchangeHelper::mstAmount(vendRFQJour.Amount, vendRFQJour.CurrencyCode, vendRFQJour.rfqDate);
                amountRepliesAllVendors += rfqAmount;
                if (vendorAmountMap.exists(vendRFQJour.VendAccount))
                {
                    rfqAmount += vendorAmountMap.lookup(vendRFQJour.VendAccount);
                }

                vendorAmountMap.insert(vendRFQJour.VendAccount,rfqAmount);
            }

            perfEnumerator = vendorAmountMap.getEnumerator();
            while (perfEnumerator.moveNext())
            {
                _perfVendImportance.VendAccount              = perfEnumerator.currentKey();
                _perfVendImportance.AmountAcceptedVendor     = perfEnumerator.currentValue();
                _perfVendImportance.AmountAcceptedAllVendors = amountRepliesAllVendors;
                _perfVendImportance.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildData</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prepares data for the <c>PurchRFQVendPerformance</c> report.
    /// </summary>
    public void buildData()
    {
        PurchRFQVendPerformanceTMP          perfVendImportance;
        PurchRFQVendPerformanceTMP          perfNoRFQsHelper;
        PurchRFQVendPerformanceTMP          perfNoRFQsSend;
        PurchRFQVendPerformanceTMP          perfNoRFQLinesSend;
        PurchRFQVendPerformanceTMP          perfNoRepliesAccepted;
        PurchRFQVendPerformanceTMP          perfNoReplyLinesAccepted;
        VendRFQJour                         vendRFQJour;
        VendRFQTrans                        vendRFQTrans;
        VendRFQJour                         vendRFQJourAccepted;
        VendRFQTrans                        vendRFQTransAccepted;

        this.amountAllAcceptedReplies(perfVendImportance);

        /*

        It could be that one RFQ was sent several times.
        To exclude duplicates group the records by vendor and rfq id first
        and then calculate the real numbers
        calculate the number of sent RFQs for each vendor

        */

        insert_recordset perfNoRFQsHelper(VendAccount, RFQId)
        select VendAccount, rfqId from vendRFQJour
        group by VendAccount, rfqId
        where vendRFQJour.Status      == PurchRFQStatus::Sent
           && (!fromDate   || vendRFQJour.rfqDate     >= fromDate)
           && (!toDate     || vendRFQJour.rfqDate     <= toDate)
           && (!fromVendor ||vendRFQJour.VendAccount  >= fromVendor)
           && (!toVendor   || vendRFQJour.VendAccount <= toVendor);

        insert_recordset perfNoRFQsSend (NoRFQsSend,  VendAccount)
        select count (RecId), VendAccount from perfNoRFQsHelper
        group by VendAccount;

        delete_from perfNoRFQsHelper;

        //calculate the number of sent RFQ lines for each vendor
        insert_recordset perfNoRFQsHelper(RFQId, LineNum, VendAccount)
        select rfqId, LineNum from vendRFQTrans
        group by rfqId, LineNum
        where vendRFQTrans.Status      == PurchRFQStatus::Sent
        join VendAccount from vendRFQJour
        group by VendAccount
        where vendRFQJour.rfqId         == vendRFQTrans.rfqId
           && vendRFQJour.InternalRFQId == vendRFQTrans.InternalRFQId
           && vendRFQJour.Status        == PurchRFQStatus::Sent
           && (!fromDate   || vendRFQJour.rfqDate     >= fromDate)
           && (!toDate     || vendRFQJour.rfqDate     <= toDate)
           && (!fromVendor ||vendRFQJour.VendAccount  >= fromVendor)
           && (!toVendor   || vendRFQJour.VendAccount <= toVendor);

        insert_recordset perfNoRFQLinesSend (NoRFQLinesSend, VendAccount)
        select count (RecId), VendAccount from perfNoRFQsHelper
        group by VendAccount;

        delete_from perfNoRFQsHelper;

        if (successRate)
        {
            /*
            It could be that one RFQ was accepted several times (each line was accepted separately).
            To exclude duplicates group the records by vendor and rfq id first
            and then calculate the real numbers
            calculate the number of accepted RFQs for each vendor
            */

            insert_recordset perfNoRFQsHelper (VendAccount, RFQId)
            select VendAccount, rfqId from vendRFQJour
            group by VendAccount, rfqId
            where vendRFQJour.Status      == PurchRFQStatus::Accepted
               && (!fromDate   || vendRFQJour.rfqDate     >= fromDate)
               && (!toDate     || vendRFQJour.rfqDate     <= toDate)
               && (!fromVendor ||vendRFQJour.VendAccount  >= fromVendor)
               && (!toVendor   || vendRFQJour.VendAccount <= toVendor);

            insert_recordset perfNoRepliesAccepted (NoRepliesAccepted,  VendAccount)
            select count (RecId), VendAccount from perfNoRFQsHelper
            group by VendAccount;

            perfNoRFQsHelper = null;

            //calculate the number of accepted RFQ lines for each vendor.
            //each line can be only accepted once.
            insert_recordset perfNoReplyLinesAccepted (VendAccount, NoReplyLinesAccepted)
            select VendAccount from perfNoRFQsSend
                join count (RecId) from vendRFQTransAccepted
                    where vendRFQTransAccepted.Status  == PurchRFQStatus::Accepted
                       && (!fromDate || vendRFQTransAccepted.rfqDate >= fromDate)
                       && (!toDate   || vendRFQTransAccepted.rfqDate <= toDate)
                join vendRFQJourAccepted group by VendAccount
                    where vendRFQJourAccepted.rfqId         == vendRFQTransAccepted.rfqId
                       && vendRFQJourAccepted.InternalRFQId == vendRFQTransAccepted.InternalRFQId
                       && vendRFQJourAccepted.VendAccount   == perfNoRFQsSend.VendAccount;
        }

        //Join all statistics in one table
        if (successRate)
        {
            insert_recordset performance (VendAccount, NoRFQsSend, NoRFQLinesSend,
                                          NoRepliesAccepted, NoReplyLinesAccepted,
                                          AmountAcceptedVendor, AmountAcceptedAllVendors)
            select VendAccount, NoRFQsSend from perfNoRFQsSend
            outer join NoRFQLinesSend from perfNoRFQLinesSend
                    where perfNoRFQsSend.VendAccount == perfNoRFQLinesSend.VendAccount

            outer join NoRepliesAccepted from perfNoRepliesAccepted
                    where perfNoRFQsSend.VendAccount == perfNoRepliesAccepted.VendAccount
            outer join NoReplyLinesAccepted from perfNoReplyLinesAccepted
                    where perfNoRFQsSend.VendAccount == perfNoReplyLinesAccepted.VendAccount

            outer join AmountAcceptedVendor, AmountAcceptedAllVendors from perfVendImportance
                    where perfNoRFQsSend.VendAccount == perfVendImportance.VendAccount;
        }
        else
        {
            insert_recordset performance (VendAccount, NoRFQsSend, NoRFQLinesSend,
                                          AmountAcceptedVendor, AmountAcceptedAllVendors)
            select VendAccount, NoRFQsSend from perfNoRFQsSend
            outer join NoRFQLinesSend from perfNoRFQLinesSend where perfNoRFQsSend.VendAccount == perfNoRFQLinesSend.VendAccount

            outer join AmountAcceptedVendor, AmountAcceptedAllVendors from perfVendImportance
                    where perfNoRFQsSend.VendAccount == perfVendImportance.VendAccount;
        }

        perfVendImportance          = null;
        perfNoRFQsSend              = null;
        perfNoRFQLinesSend          = null;
        perfNoRepliesAccepted       = null;
        perfNoReplyLinesAccepted    = null;

        while select performance
        {
            performanceList.addEnd(performance);
        }

        this.buildPerformanceReason(performance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPerformanceReason</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates and inserts data into the <c>performanceReasonCodeList</c> list.
    /// </summary>
    /// <param name="_performance">
    ///    The temporary table that contains the number of accepted lines for each vendor. It is prepared by
    ///    the <c>buildData</c> method.
    /// </param>
    protected void buildPerformanceReason(PurchRFQVendPerformanceTMP _performance)
    {
        PurchRFQVendPerformanceReasonCodeTMP reasonCodeAccepted;
        PurchRFQVendPerformanceReasonCodeTMP reasonVendRejected;
        PurchRFQVendPerformanceReasonCodeTMP reasonCodeRejected;
        VendRFQJour                          vendRFQJour;
        VendRFQTrans                         vendRFQTrans;
        ReasonTableRef                       reasonTableRef;

        if (successRate)
        {
         //prepare line acceptance statistics.
          insert_recordset reasonCodeAccepted (VendAccount, NoReplyLinesAcceptedVendor, RecId, ReasonId, NoReplyLinesAcceptedReason)
          select VendAccount, NoReplyLinesAccepted from _performance   //use _performance as it already contains number of accepted lines for each vendor
             join minof(RecId) from vendRFQTrans
            outer join Reason, count (RecId) from reasonTableRef group by Reason
            join vendRFQJour group by VendAccount
                where vendRFQJour.rfqId         == vendRFQTrans.rfqId
                   && vendRFQJour.InternalRFQId == vendRFQTrans.InternalRFQId
                   && vendRFQTrans.Status       == PurchRFQStatus::Accepted
                   && (!fromDate || vendRFQTrans.rfqDate >= fromDate)
                   && (!toDate   || vendRFQTrans.rfqDate <= toDate)
                   && reasonTableRef.RecId      == vendRFQTrans.ReasonRef
                   && reasonTableRef.Reason     != ''
                   && _performance.VendAccount == vendRFQJour.VendAccount;

            insert_recordset reasonCodeAccepted (VendAccount, NoReplyLinesAcceptedVendor, NoReplyLinesAcceptedReason)
            select VendAccount, NoReplyLinesAccepted from _performance   //use _performance as it already contains number of accepted lines for each vendor
            join count(RecId) from vendRFQTrans
            join vendRFQJour group by VendAccount
                where vendRFQJour.rfqId         == vendRFQTrans.rfqId
                   && vendRFQJour.InternalRFQId == vendRFQTrans.InternalRFQId
                   && vendRFQTrans.Status       == PurchRFQStatus::Accepted
                   && (!fromDate || vendRFQTrans.rfqDate >= fromDate)
                   && (!toDate   || vendRFQTrans.rfqDate <= toDate)
                   && vendRFQTrans.ReasonRef == 0
                   && _performance.VendAccount == vendRFQJour.VendAccount;

            //prepare the number of rejected lines for each vendor

            insert_recordset reasonVendRejected (NoReplyLinesRejectedVendor, VendAccount)
            select count (RecId) from vendRFQTrans
            join VendAccount from vendRFQJour group by VendAccount
                where vendRFQJour.rfqId         == vendRFQTrans.rfqId
                   && vendRFQJour.InternalRFQId == vendRFQTrans.InternalRFQId
                   && vendRFQTrans.Status       == PurchRFQStatus::Rejected
                   && (!fromDate   || vendRFQTrans.rfqDate    >= fromDate)
                   && (!toDate     || vendRFQTrans.rfqDate    <= toDate)
                   && (!fromVendor || vendRFQJour.VendAccount >= fromVendor)
                   && (!toVendor   || vendRFQJour.VendAccount <= toVendor);

            insert_recordset reasonCodeRejected (VendAccount, NoReplyLinesRejectedVendor, RecId, ReasonId, NoReplyLinesRejectedReason)
            select VendAccount, NoReplyLinesRejectedVendor from reasonVendRejected
            join minof (RecId) from vendRFQTrans
            join Reason, count (RecId) from reasonTableRef group by Reason
            join vendRFQJour group by VendAccount
                where vendRFQJour.rfqId         == vendRFQTrans.rfqId
                   && vendRFQJour.InternalRFQId == vendRFQTrans.InternalRFQId
                   && vendRFQTrans.Status       == PurchRFQStatus::Rejected
                   && (!fromDate || vendRFQTrans.rfqDate >= fromDate)
                   && (!toDate   || vendRFQTrans.rfqDate <= toDate)
                   && reasonTableRef.RecId      == vendRFQTrans.ReasonRef
                   && reasonTableRef.Reason     != ''
                   && reasonVendRejected.VendAccount == vendRFQJour.VendAccount;

            insert_recordset reasonCodeRejected (VendAccount, NoReplyLinesRejectedVendor, NoReplyLinesRejectedReason)
              select VendAccount, NoReplyLinesRejectedVendor from reasonVendRejected
            join count (RecId) from vendRFQTrans
            join vendRFQJour group by VendAccount
                where vendRFQJour.rfqId         == vendRFQTrans.rfqId
                   && vendRFQJour.InternalRFQId == vendRFQTrans.InternalRFQId
                   && vendRFQTrans.Status       == PurchRFQStatus::Rejected
                   && (!fromDate || vendRFQTrans.rfqDate >= fromDate)
                   && (!toDate   || vendRFQTrans.rfqDate <= toDate)
                   && vendRFQTrans.ReasonRef    == 0
                   && reasonVendRejected.VendAccount == vendRFQJour.VendAccount;

            //join data from 2 tables and put it into performanceReasonCodeList
            //join accepted and rejected lines having the same reason
            while select reasonCodeAccepted
            join reasonCodeRejected
            where reasonCodeAccepted.ReasonId    == reasonCodeRejected.ReasonId
               && reasonCodeAccepted.VendAccount == reasonCodeRejected.VendAccount
            {
                reasonCodeAccepted.NoReplyLinesRejectedReason = reasonCodeRejected.NoReplyLinesRejectedReason;
                reasonCodeAccepted.NoReplyLinesRejectedVendor = reasonCodeRejected.NoReplyLinesRejectedVendor;
                performanceReasonCodeList.addEnd(reasonCodeAccepted);
            }

            //add lines accepted by reason that was not used for rejection
            while select reasonCodeAccepted
            notexists join reasonCodeRejected
            where reasonCodeAccepted.ReasonId    == reasonCodeRejected.ReasonId
               && reasonCodeAccepted.VendAccount == reasonCodeRejected.VendAccount
            {
                performanceReasonCodeList.addEnd(reasonCodeAccepted);
            }

            //add lines rejected by reason that was not used for acceptance
            while select reasonCodeRejected
            notexists join reasonCodeAccepted
            where reasonCodeAccepted.ReasonId    == reasonCodeRejected.ReasonId
               && reasonCodeAccepted.VendAccount == reasonCodeRejected.VendAccount
            {
                performanceReasonCodeList.addEnd(reasonCodeRejected);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPerformanceList</Name>
				<Source><![CDATA[
    public container getPerformanceList()
    {
        return performanceList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getperformanceReasonCodeList</Name>
				<Source><![CDATA[
    public container getperformanceReasonCodeList()
    {
        return performanceReasonCodeList.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        performanceList             = new List(Types::Record);
        performanceReasonCodeList   = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromVendor</Name>
				<Source><![CDATA[
    public VendAccount parmFromVendor(VendAccount _fromVendor = fromVendor)
    {
        fromVendor = _fromVendor;

        return fromVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSuccessRate</Name>
				<Source><![CDATA[
    public NoYes parmSuccessRate(NoYes _successRate = successRate)
    {
        successRate = _successRate;

        return successRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToVendor</Name>
				<Source><![CDATA[
    public VendAccount parmToVendor(VendAccount _toVendor = toVendor)
    {
        toVendor = _toVendor;

        return toVendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVendorImportance</Name>
				<Source><![CDATA[
    public NoYes parmVendorImportance(NoYes _vendorImportance = vendorImportance)
    {
        vendorImportance = _vendorImportance;

        return vendorImportance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQVendPerformanceReasonCodeTMP</Name>
				<Source><![CDATA[
    Common purchRFQVendPerformanceReasonCodeTMP()
    {
        ListEnumerator          performanceReasonCodeEnumerator;
        if (successRate)
        {
            performanceReasonCodeList = List::create(this.getperformanceReasonCodeList());
            performanceReasonCodeEnumerator = performanceReasonCodeList.getEnumerator();
            while (performanceReasonCodeEnumerator.moveNext())
            {
                purchRFQVendPerformanceReasonCodeTMP.data(performanceReasonCodeEnumerator.current());
                purchRFQVendPerformanceReasonCodeTMP.insert();
            }
        }
        return purchRFQVendPerformanceReasonCodeTMP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQVendPerformanceTMP</Name>
				<Source><![CDATA[
    Common purchRFQVendPerformanceTMP()
    {
        return    performance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
