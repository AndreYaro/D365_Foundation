<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResCancelEntireDay</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Cancel processor class that cancel entire date range of the resource.
/// </summary>
public class ResCancelEntireDay extends ResCancelProcessor implements ResICancelProcessor
{
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>byResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel the entire day booking and/or assignment by resource while the resource recid and
    /// legal entity are mandatory. Commitment, start date and end date are optional.
    /// </summary>
    /// <returns>TRUE when the reservation cancelation operation succeeds.</returns>
    protected boolean byResource()
    {
        ResourceRecId   resource = schedule.Resource();
        ResCommitType   commitment = schedule.Commitment();
        utcdatetime     start = schedule.Start();
        utcdatetime     end = schedule.End();
        boolean         result = false;

        if (schedule.ReservationType() == ResReservationType::None)
        {
            schedule.ReservationType(type);
        }

        switch (schedule.ReservationType())
        {
            case ResReservationType::Assignment:
                result = this.deleteAssignmentByResource(resource, commitment, start, end);
                break;
            default:
                boolean deleteAssignmentResult = this.deleteAssignmentByResource(resource, commitment, start, end);
                boolean deleteBookingResult = this.deleteBookingByResource(resource, commitment, start, end);
                result = deleteAssignmentResult || deleteBookingResult;
                break;
        }
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>byConditions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancel the entire day booking and/or assignment by various conditions including activity resource,
    /// activity, commit type, start date and end date while all of the above are optional.
    /// </summary>
    /// <returns>TRUE when the reservation cancelation operation succeeds.</returns>
    protected boolean byConditions()
    {
        ActivityResourceRecId   activityResource = schedule.ActivityResource();
        ActivityRecId           activity = schedule.Activity();
        ResCommitType           commitment = schedule.Commitment();
        utcdatetime             start = schedule.Start();
        utcdatetime             end = schedule.End();
        boolean                 result = false;

        if (schedule.ReservationType() == ResReservationType::None)
        {
            schedule.ReservationType(type);
        }

        switch (schedule.ReservationType())
        {
            case ResReservationType::Assignment:
                result = this.deleteAssignment(activityResource, activity, commitment, start, end);
                break;
            default:
                boolean deleteAssignmentResult = this.deleteAssignment(activityResource, 0, commitment, start, end); 
                boolean deleteBookingResult = this.deleteBooking(activityResource, activity, commitment, start, end);
                result = deleteAssignmentResult || deleteBookingResult;
                break;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookingByResource</Name>
				<Source><![CDATA[
    private boolean deleteBookingByResource(ResourceRecId _resource,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        Set activitySet = new Set (Types::Int64);
               
        if (_resource)
        {
            ResBooking resBookingAct;
            PSAProjSchedRole projectTeam;

            while select Activity from resBookingAct
                group by resBookingAct.Activity, resBookingAct.Day, resBookingAct.CommitType
                where (_commitment  == ResCommitType::AnyType   || resBookingAct.CommitType == _commitment)
                    && resBookingAct.Day                        >= _start
                    && resBookingAct.Day                        <= _end
                exists join RecId from projectTeam
                    where projectTeam.Resource                  == _resource
                        && projectTeam.RecId                    == resBookingAct.ActivityResource
            {
                activitySet.add(resBookingAct.Activity);   
            }

            if (_commitment == ResCommitType::AnyType)
            {
                this.deleteBookingByResourceExecution(_resource, ResCommitType::HardBook, _start, _end);
                this.deleteBookingByResourceExecution(_resource, ResCommitType::SoftBook, _start, _end);
            }
            else
            {
                this.deleteBookingByResourceExecution(_resource, _commitment, _start, _end);
            }
            
            // Update team info and scheduling status
            SetEnumerator activitySetEnumerator = activitySet.getEnumerator();
            while (activitySetEnumerator.moveNext())
            {
                ResUtil::updateTeamInfo(activitySetEnumerator.current());
                ProjActivityCapacity::updateScheduleStatusByActivity(activitySetEnumerator.current());
            }

            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssignmentByResource</Name>
				<Source><![CDATA[
    private boolean deleteAssignmentByResource(ResourceRecId _resource,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        Set activitySet = new Set (Types::Int64);
        
        if (_resource)
        {
            ResAssignment resAssignmentAct;
            PSAProjSchedRole projectTeam;

            while select Activity from resAssignmentAct
                group by resAssignmentAct.Activity, resAssignmentAct.Day, resAssignmentAct.CommitType
                where (_commitment  == ResCommitType::AnyType   || resAssignmentAct.CommitType == _commitment)
                    && resAssignmentAct.Day                     >= _start
                    && resAssignmentAct.Day                     <= _end
                exists join RecId from projectTeam
                    where projectTeam.Resource                  == _resource
                        && projectTeam.RecId                    == resAssignmentAct.ActivityResource
            {
                activitySet.add(resAssignmentAct.Activity);   
            }

            if (_commitment == ResCommitType::AnyType)
            {
                this.deleteAssignmentByResourceExecution(_resource, ResCommitType::HardBook, _start, _end);
                this.deleteAssignmentByResourceExecution(_resource, ResCommitType::SoftBook, _start, _end);
            }
            else
            {
                this.deleteAssignmentByResourceExecution(_resource, _commitment, _start, _end);
            }

            // Remove the assoicated booking records for quotation if it has no more assignment reference.
            if (isConfigurationkeyEnabled(configurationKeyNum(ProjQuotation)))
            {
                this.deleteBookingRecordsForAssignmentQuotatoinByResourceOperation(_resource, _commitment, _start, _end);
            }

            // Update team info and scheduling status
            SetEnumerator activitySetEnumerator = activitySet.getEnumerator();
            while (activitySetEnumerator.moveNext())
            {
                ResUtil::updateTeamInfo(activitySetEnumerator.current());
                ProjActivityCapacity::updateScheduleStatusByActivity(activitySetEnumerator.current());
            }

            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBooking</Name>
				<Source><![CDATA[
    private boolean deleteBooking(ActivityResourceRecId _activityResource, ActivityRecId _activity,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        Set  activitySet = new Set (Types::Int64);
        
        if (_activity)
        {
            activitySet.add(_activity);
        }
        else
        {
            ResBooking resBookingAct;

            while select Activity from resBookingAct
            group by resBookingAct.Activity, resBookingAct.Day, resBookingAct.CommitType, resBookingAct.ActivityResource
                where (_commitment          == ResCommitType::AnyType   || resBookingAct.CommitType        == _commitment)
                    && (_activityResource   == 0                        || resBookingAct.ActivityResource  == _activityResource)
                    && resBookingAct.Day    >= _start
                    && resBookingAct.Day    <= _end
                {
                    activitySet.add(resBookingAct.Activity);   
                }
        }

        if (_commitment == ResCommitType::AnyType)
        {
            this.deleteBookingExecution(_activityResource, _activity, ResCommitType::HardBook, _start, _end);
            this.deleteBookingExecution(_activityResource, _activity, ResCommitType::SoftBook, _start, _end);
        }
        else
        {
            this.deleteBookingExecution(_activityResource, _activity, _commitment, _start, _end);
        }

        // Update team info and scheduling status
        SetEnumerator activitySetEnumerator = activitySet.getEnumerator();
        while (activitySetEnumerator.moveNext())
        {
            ResUtil::updateTeamInfo(activitySetEnumerator.current());
            ProjActivityCapacity::updateScheduleStatusByActivity(activitySetEnumerator.current());
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssignment</Name>
				<Source><![CDATA[
    private boolean deleteAssignment(ActivityResourceRecId _activityResource, ActivityRecId _activity,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        Set activitySet = new Set(Types::Int64);
        
        if (_activity && ActivityResourceFacade::hasAssignmentByActivityAndDateTime(_activityResource, _activity, _start, _end))
        {
            activitySet.add(_activity);
        }
        else
        {
            ResAssignment resAssignmentAct;
            while select Activity from resAssignmentAct
            group by resAssignmentAct.Activity, resAssignmentAct.Day, resAssignmentAct.CommitType, resAssignmentAct.ActivityResource
                where (_commitment          == ResCommitType::AnyType   || resAssignmentAct.CommitType        == _commitment)
                    && (_activityResource   == 0                        || resAssignmentAct.ActivityResource  == _activityResource)
                    && resAssignmentAct.Day    >= _start
                    && resAssignmentAct.Day    <= _end
            {
                activitySet.add(resAssignmentAct.Activity);
            }
        }

        // Only execute assignment cancellation if the activity resource has assignment records.
        boolean execute = (!activitySet.empty());

        if (execute)
        {
            this.deleteAssignmentRecordsForAssignmentOperation(_activityResource, _activity, _commitment, _start, _end);

            // Remove the assoicated booking records for quotation if it has no more assignment reference.
            if (isConfigurationkeyEnabled(configurationKeyNum(ProjQuotation)))
            {
                this.deleteBookingRecordsForAssignmentQuotationOperation(_activityResource, _activity, _commitment, _start, _end);
            }

            // Update team info and scheduling status
            SetEnumerator activitySetEnumerator = activitySet.getEnumerator();
            while (activitySetEnumerator.moveNext())
            {
                ResUtil::updateTeamInfo(activitySetEnumerator.current());
                ProjActivityCapacity::updateScheduleStatusByActivity(activitySetEnumerator.current());
            }
            
        }
            
        return execute;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of the <c>ResCancelEntireDateRange</c> processor.
    /// </summary>
    /// <returns>Instance of <c>ResCancelEntireDateRange</c>.</returns>
    public static ResICancelProcessor construct()
    {
        ResICancelProcessor processor = new ResCancelEntireDay();
        return processor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookingByResourceExecution</Name>
				<Source><![CDATA[
    private void deleteBookingByResourceExecution(ResourceRecId _resource,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        ResBooking resBooking;
        PSAProjSchedRole projectTeam;
        this.skipDatabaseLogAndEvent(resBooking);

        delete_from resBooking
            where resBooking.CommitType == _commitment
                    && resBooking.Hour >= _start
                    && resBooking.Hour <= _end
            exists join projectTeam
                where projectTeam.Resource == _resource
                    && projectTeam.RecId == resBooking.ActivityResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssignmentByResourceExecution</Name>
				<Source><![CDATA[
    private void deleteAssignmentByResourceExecution(ResourceRecId _resource,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        ResAssignment resAssignment;
        PSAProjSchedRole projectTeam;
        this.skipDatabaseLogAndEvent(resAssignment);

        delete_from resAssignment
            where resAssignment.CommitType == _commitment
                && resAssignment.Hour >= _start
                && resAssignment.Hour <= _end
            exists join projectTeam
                where projectTeam.Resource == _resource
                    && projectTeam.RecId   == resAssignment.ActivityResource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookingExecution</Name>
				<Source><![CDATA[
    private void deleteBookingExecution(ActivityResourceRecId _activityResource, ActivityRecId _activity,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        ResBooking resBooking;
        this.skipDatabaseLogAndEvent(resBooking);

        delete_from resBooking
            where resBooking.CommitType == _commitment
                && (_activityResource == 0 || resBooking.ActivityResource  == _activityResource)
                && (_activity == 0  || resBooking.Activity == _activity)
                && resBooking.Hour >= _start
                && resBooking.Hour <= _end;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookingRecordsForAssignmentQuotatoinByResourceOperation</Name>
				<Source><![CDATA[
    private void deleteBookingRecordsForAssignmentQuotatoinByResourceOperation(ResourceRecId _resource,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        if (_resource) 
        {
            if (ResUtil::isPerformanceEnhancementFeatureEnabled(true))
            {
                if (_commitment == ResCommitType::AnyType)
                {
                    this.deleteBookingRecordsForAssignmentQuotatoinByResourceExecutionV2(_resource, ResCommitType::HardBook, _start, _end);
                    this.deleteBookingRecordsForAssignmentQuotatoinByResourceExecutionV2(_resource, ResCommitType::SoftBook, _start, _end);
                }
                else
                {
                    this.deleteBookingRecordsForAssignmentQuotatoinByResourceExecutionV2(_resource, _commitment, _start, _end);
                }
            }
            else
            {
                if (_commitment == ResCommitType::AnyType)
                {
                    this.deleteBookingRecordsForAssignmentQuotatoinByResourceExecutionV1(_resource, ResCommitType::HardBook, _start, _end);
                    this.deleteBookingRecordsForAssignmentQuotatoinByResourceExecutionV1(_resource, ResCommitType::SoftBook, _start, _end);
                }
                else
                {
                    this.deleteBookingRecordsForAssignmentQuotatoinByResourceExecutionV1(_resource, _commitment, _start, _end);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookingRecordsForAssignmentQuotatoinByResourceExecutionV1</Name>
				<Source><![CDATA[
    private void deleteBookingRecordsForAssignmentQuotatoinByResourceExecutionV1(ResourceRecId _resource,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        ResBooking resBooking;
        ResAssignment resAssignment;
        PSAProjSchedRole teamTable;
        ResActivityTaskView activityTasks;
        HierarchyTreeTable hierarchyTreeTable;
        HierarchyLinkTable hierarchyLinkTable;
        SalesQuotationTable quotationTable;
        this.skipDatabaseLogAndEvent(resBooking);

        delete_from resBooking
            where resBooking.CommitType == _commitment
                && resBooking.Hour >= _start
                && resBooking.Hour <= _end
            exists join teamTable
                where teamTable.Resource == _resource
                    && teamTable.RecId   == resBooking.ActivityResource
            exists join activityTasks
                where activityTasks.Activity == resBooking.Activity
            exists join hierarchyTreeTable
                where hierarchyTreeTable.RefRecId == activityTasks.Activity
                    && hierarchyTreeTable.ParentElementNumber == ''
            exists join hierarchyLinkTable
                where hierarchyLinkTable.HierarchyId == hierarchyTreeTable.HierarchyId
                    && hierarchyLinkTable.RefTableId == quotationTable.TableId
            notexists join resAssignment
                where resAssignment.ActivityResource == resBooking.ActivityResource
                    && resAssignment.Hour == resBooking.Hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookingRecordsForAssignmentQuotatoinByResourceExecutionV2</Name>
				<Source><![CDATA[
    private void deleteBookingRecordsForAssignmentQuotatoinByResourceExecutionV2(ResourceRecId _resource,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        ResBooking resBooking;
        ResAssignment resAssignment;
        PSAProjSchedRole teamTable;
        this.skipDatabaseLogAndEvent(resBooking);

        delete_from resBooking
            where resBooking.CommitType == _commitment
                && resBooking.Hour >= _start
                && resBooking.Hour <= _end
            exists join teamTable
                where teamTable.RootActivity == resBooking.Activity
                    && teamTable.RecId == resBooking.ActivityResource
                    && teamTable.Resource == _resource
                    && teamTable.QuotationId != ''
            notexists join resAssignment
                where resAssignment.ActivityResource == resBooking.ActivityResource
                    && resAssignment.Hour == resBooking.Hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssignmentRecordsForAssignmentOperation</Name>
				<Source><![CDATA[
    private void deleteAssignmentRecordsForAssignmentOperation(ActivityResourceRecId _activityResource, ActivityRecId _activity,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        boolean isRootActivity = _activity && _activity == ActivityFacade::isRootActivity(_activity);

        if (isRootActivity)
        {
            ResActivityTaskView activityTasks;

            while select TaskActivity from activityTasks
                where activityTasks.Activity == _activity
            {
                if (_commitment == ResCommitType::AnyType)
                {
                    this.deleteAssignmentRecordsForAssignmentExecution(_activityResource, activityTasks.TaskActivity, ResCommitType::HardBook, _start, _end);
                    this.deleteAssignmentRecordsForAssignmentExecution(_activityResource, activityTasks.TaskActivity, ResCommitType::SoftBook, _start, _end);
                }
                else
                {
                    this.deleteAssignmentRecordsForAssignmentExecution(_activityResource, activityTasks.TaskActivity, _commitment, _start, _end);
                }
            }
        }
        else
        {
            if (_commitment == ResCommitType::AnyType)
            {
                this.deleteAssignmentRecordsForAssignmentExecution(_activityResource, _activity, ResCommitType::HardBook, _start, _end);
                this.deleteAssignmentRecordsForAssignmentExecution(_activityResource, _activity, ResCommitType::SoftBook, _start, _end);
            }
            else
            {
                this.deleteAssignmentRecordsForAssignmentExecution(_activityResource, _activity, _commitment, _start, _end);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAssignmentRecordsForAssignmentExecution</Name>
				<Source><![CDATA[
    private void deleteAssignmentRecordsForAssignmentExecution(ActivityResourceRecId _activityResource, ActivityRecId _activity,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        ResAssignment resAssignment;
        this.skipDatabaseLogAndEvent(resAssignment);

        delete_from resAssignment
            where resAssignment.CommitType == _commitment
                && (_activityResource == 0 || resAssignment.ActivityResource == _activityResource)
                && (_activity == 0 || resAssignment.Activity == _activity)
                && resAssignment.Hour >= _start
                && resAssignment.Hour <= _end;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookingRecordsForAssignmentQuotationOperation</Name>
				<Source><![CDATA[
    private void deleteBookingRecordsForAssignmentQuotationOperation(activityresourcerecid _activityResource, ActivityRecId _activity,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        boolean isQuotation = _activity && ActivityFacade::isQuotation(_activity);

        if (isQuotation)
        {
            ActivityRecId rootActivity = ActivityFacade::getRootActivity(_activity);
            
            if (_commitment == ResCommitType::AnyType)
            {
                this.deleteBookingRecordsForAssignmentQuotationExecution(_activityResource, rootActivity, ResCommitType::HardBook, _start, _end);
                this.deleteBookingRecordsForAssignmentQuotationExecution(_activityResource, rootActivity, ResCommitType::SoftBook, _start, _end);
            }
            else
            {
                this.deleteBookingRecordsForAssignmentQuotationExecution(_activityResource, rootActivity, _commitment, _start, _end);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookingRecordsForAssignmentQuotationExecution</Name>
				<Source><![CDATA[
    private void deleteBookingRecordsForAssignmentQuotationExecution(activityresourcerecid _activityResource, ActivityRecId _rootActivity,
        ResCommitType _commitment, utcdatetime _start, utcdatetime _end)
    {
        ResBooking resBooking;
        ResAssignment resAssignment;
        SalesQuotationTable quotationTable;
        this.skipDatabaseLogAndEvent(resBooking);

        delete_from resBooking
            where resBooking.CommitType == _commitment
                && (_activityResource == 0 || resBooking.ActivityResource == _activityResource)
                && resBooking.Activity == _rootActivity
                && resBooking.Hour >= _start
                && resBooking.Hour <= _end
            notexists join resAssignment
                where resAssignment.ActivityResource == resBooking.ActivityResource
                    && resAssignment.Hour == resBooking.Hour;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>