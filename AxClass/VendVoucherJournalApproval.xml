<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendVoucherJournalApproval</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class VendVoucherJournalApproval extends VendVoucherJournal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerVoucher _ledgerPostingJournal,
              CustVendTrans _vendTrans,
              NoYes _approved = NoYes::No,
              UnknownNoYes _euroTriangulation = Currency::noYes2UnknownNoYes(triangulation),
              boolean _withHoldTaxType = false,
              boolean _useSubLedger = false)
    {
        LedgerDimensionAccount ledgerDimensionMerged;
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
        LedgerVoucherObject ledgerVoucherObject;
        LedgerVoucherTransObject ledgerVoucherTransObject;
        CurrencyExchangeHelper currencyExchangeHelper;

        super(_ledgerPostingJournal, _vendTrans, _approved, _euroTriangulation, _withHoldTaxType, _useSubLedger);

        ledgerVoucherObject = _ledgerPostingJournal.findLedgerVoucherObject();

        ledgerDimensionDefaultAccount = VendLedgerAccounts::purchasingOffsetLedgerDimension(accountNum, postingProfile);

        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionDefaultAccount, defaultDimension);

        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), ledgerVoucherObject.parmAccountingDate());

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                    ledgerVoucherObject,
                                    ledgerPostingType,
                                    ledgerDimensionMerged,
                                    currencyCode,
                                    amountCur,
                                    currencyExchangeHelper);

        ledgerVoucherTransObject.parmSourceTableId(_vendTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(_vendTrans.RecId);
        _ledgerPostingJournal.addTrans(ledgerVoucherTransObject);

        ledgerDimensionDefaultAccount = VendLedgerAccounts::summaryLedgerDimension(accountNum, postingProfile);

        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionDefaultAccount, defaultDimension);

        ledgerVoucherTransObject = LedgerVoucherTransObject::newTransactionAmountDefault(
                                    ledgerVoucherObject,
                                    ledgerPostingType,
                                    ledgerDimensionMerged,
                                    currencyCode,
                                    -amountCur,
                                    currencyExchangeHelper);
        ledgerVoucherTransObject.parmSourceTableId(_vendTrans.TableId);
        ledgerVoucherTransObject.parmSourceRecId(_vendTrans.RecId);
        _ledgerPostingJournal.addTrans(ledgerVoucherTransObject);
        // <GEERU>
        _ledgerPostingJournal.bondLast2_RU();
        // </GEERU>
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>