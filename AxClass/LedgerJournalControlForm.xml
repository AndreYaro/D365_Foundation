<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalControlForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalControlForm</c> class provides business logic for the <c>LedgerJournalControl</c> form.
/// </summary>
class LedgerJournalControlForm
{
    recId                           journalControlId;               // the RecId of the LedgerJournalControl record associated with this instance
    TmpLedgerJournalControlDetail   localTmpJournalControlDetail;   // reference to the temp table instance used by the form
    Map                             modifiedDetailRecords;          // collection of id's referencing modified LedgerJournalControlDetail
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCriteria</Name>
				<Source><![CDATA[
    private boolean addCriteria(DimensionTreeNode _treeNode, str _rangeFrom, str _rangeTo)
    {
        #DimensionWildCards

        int         criteriaValid;
        boolean     isWildcard;

        // Add the criteria based on whether the From and/or To values are specified
        isWildcard = false;
        if (_rangeFrom == '' && _rangeTo == '')
        {
            criteriaValid = _treeNode.addWildcard(#DisplayWildcardChar);
            isWildcard = true;
        }
        else if (_rangeFrom == '')
        {
            criteriaValid = _treeNode.addLessThan(_rangeTo, true);
        }
        else if (_rangeTo == '')
        {
            criteriaValid = _treeNode.addGreaterThan(_rangeFrom, true);
        }
        else
        {
            criteriaValid = _treeNode.addRange(_rangeFrom, _rangeTo, false, false);
        }

        // Adjust IsOptional flag
        if (criteriaValid != 0)
        {
            _treeNode.parmIsOptional(isWildcard);
        }

        return (criteriaValid != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDetailRecord</Name>
				<Source><![CDATA[
    private LedgerJournalControlDetail addDetailRecord(TmpLedgerJournalControlDetail _tmpJournalControlDetail)
    {
        LedgerJournalControlDetail  journalControlDetail;
        recId                       draftConstraintTreeId;

        Debug::assert(_tmpJournalControlDetail.LedgerLegalEntity != 0);

        ttsbegin;

        draftConstraintTreeId = this.createNewDraftConstraintTree(_tmpJournalControlDetail.DimensionHierarchy);

        // create the new detail record that will be associated with the current line
        journalControlDetail.clear();
        journalControlDetail.LedgerJournalControl = journalControlId;
        journalControlDetail.LedgerLegalEntity = _tmpJournalControlDetail.LedgerLegalEntity;
        journalControlDetail.DimensionHierarchy = _tmpJournalControlDetail.DimensionHierarchy;
        journalControlDetail.DimensionConstraintTree = draftConstraintTreeId;

        journalControlDetail.insert();

        ttscommit;

        return journalControlDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupResources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cleans up the resources previously created by this instance so they are not orphaned.
    /// </summary>
    public void cleanupResources()
    {
        // clear the temp table records
        ttsbegin;
        delete_from localTmpJournalControlDetail;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitCurrentChanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Commits the changes for the <c>LedgerJournalControlForm</c> record associated with this instance.
    /// </summary>
    public void commitCurrentChanges()
    {
        MapEnumerator   enumerator;

        // the collection contains the RecId of each LedgerJournalControlDetail record that was added or modified
        // the value associated with each entry points at the draft constraint tree associated with the detail record

        // activate each draft tree that was created
        enumerator = modifiedDetailRecords.getEnumerator();
        while (enumerator.moveNext())
        {
            DimensionTree::activateDraft(enumerator.currentValue(), true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewDraftConstraintTree</Name>
				<Source><![CDATA[
    private recId createNewDraftConstraintTree(recId _hierarchyId)
    {
        DimensionHierarchyLevel hierarchyLevelFields;
        DimensionConstraintNode dimConstraintNode;
        recId                   draftConstraintTreeId;
        recId                   parentConstraintNode;
        DimensionTree           dimensionTree;

        draftConstraintTreeId = DimensionTree::createSystemTree('', DimensionHierarchyType::JournalControlStructure, true);
        dimensionTree = DimensionTree::construct(draftConstraintTreeId);

        // Populate the tree with the existing levels from the template hierarchy
        parentConstraintNode = 0;
        while select DimensionHierarchy, Level, DimensionAttribute from hierarchyLevelFields
            order by hierarchyLevelFields.Level
            where hierarchyLevelFields.DimensionHierarchy == _hierarchyId
        {
            dimensionTree.addLevel(hierarchyLevelFields.DimensionAttribute, hierarchyLevelFields.Level);

            // Set IsOptional flag
            dimConstraintNode = DimensionConstraintNode::findByConstraintOrdinal(draftConstraintTreeId, parentConstraintNode, 1, true);
            dimConstraintNode.IsOptional = true;
            dimConstraintNode.update();

            parentConstraintNode = dimConstraintNode.RecId;
        }

        return draftConstraintTreeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEditableConstraintTreeForDetailRecord</Name>
				<Source><![CDATA[
    private recId getEditableConstraintTreeForDetailRecord(recId _journalControlDetailId, recId _dimensionConstraintTreeId)
    {
        recId   draftConstraintTreeId;

        if (modifiedDetailRecords.exists(_journalControlDetailId))
        {
            // a draft hierarchy already exists for this detail, use it
            draftConstraintTreeId = modifiedDetailRecords.lookup(_journalControlDetailId);
        }
        else
        {
            if (DimensionHierarchy::findByTree(_dimensionConstraintTreeId).IsDraft)
            {
                draftConstraintTreeId = _dimensionConstraintTreeId;
            }
            else
            {
                // create a draft version of the tree
                draftConstraintTreeId = DimensionTree::createDraft(_dimensionConstraintTreeId);
            }

            this.markDetailRecordAsEdited(_journalControlDetailId, draftConstraintTreeId);
        }

        return draftConstraintTreeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTempRecords</Name>
				<Source><![CDATA[
    private void loadTempRecords()
    {
        LedgerJournalControlDetail      journalControlDetailFields;
        DimensionConstraintNode         constraintNode;
        DimensionHierarchyLevel         hierarchyLevel;
        DimensionAttribute              dimensionAttribute;
        DimensionTreeNode               dimensionTreeNode;
        int                             idx;

        ttsbegin;

        while select LedgerJournalControl, LedgerLegalEntity, DimensionHierarchy, DimensionConstraintTree, RecId from journalControlDetailFields
            where journalControlDetailFields.LedgerJournalControl == journalControlId
        {
            localTmpJournalControlDetail.clear();

            localTmpJournalControlDetail.LedgerJournalControlDetail = journalControlDetailFields.RecId;
            localTmpJournalControlDetail.LedgerLegalEntity = journalControlDetailFields.LedgerLegalEntity;
            localTmpJournalControlDetail.DimensionConstraintTree = journalControlDetailFields.DimensionConstraintTree;
            localTmpJournalControlDetail.DimensionHierarchy = journalControlDetailFields.DimensionHierarchy;

            // process all constraint nodes associated with the current detail record's constraint tree
            while select constraintNode
                where constraintNode.DimensionConstraintTree == journalControlDetailFields.DimensionConstraintTree
            {
                // identify the dimension attribute referenced by the constraint node
                select firstonly RecId from
                    dimensionAttribute
                join DimensionAttribute from
                    hierarchyLevel
                where
                    hierarchyLevel.RecId == constraintNode.DimensionHierarchyLevel &&
                    hierarchyLevel.DimensionAttribute == dimensionAttribute.RecId;

                localTmpJournalControlDetail.DimensionAttribute = dimensionAttribute.RecId;

                // spin up a DimensionTreeNode instance for the current constraint node
                dimensionTreeNode = DimensionTreeNode::construct(constraintNode);

                // loop through all criteria
                for (idx = 1; idx <= dimensionTreeNode.parmCriteriaCount(); idx++)
                {
                    // only display range criteria
                    // user entered wildcard critiera is not supported, system generated wildcard criteria are not displayed
                    if (dimensionTreeNode.isRangeCriteria(idx))
                    {
                        localTmpJournalControlDetail.RangeFrom = dimensionTreeNode.getRangeFrom(idx);
                        localTmpJournalControlDetail.RangeTo = dimensionTreeNode.getRangeTo(idx);

                        localTmpJournalControlDetail.insert();
                    }
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markDetailRecordAsEdited</Name>
				<Source><![CDATA[
    private void markDetailRecordAsEdited(recId _journalControlDetailId, recId _draftConstraintTreeId)
    {
        Debug::assert(_journalControlDetailId != 0);
        Debug::assert(_draftConstraintTreeId != 0);

        if (! modifiedDetailRecords.exists(_journalControlDetailId))
        {
            modifiedDetailRecords.insert(_journalControlDetailId, _draftConstraintTreeId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an instance of the <c>LedgerJournalControlForm</c> class.
    /// </summary>
    /// <param name="_journalControlRecId">
    /// The ID of the <c>LedgerJournalControl</c> record to associate with this instance.
    /// </param>
    /// <param name="_tmpJournalControlDetail">
    /// The <c>TmpLedgerJournalControlDetail</c> table buffer to associate with this instance.
    /// </param>
    protected void new(recId _journalControlRecId, TmpLedgerJournalControlDetail _tmpJournalControlDetail)
    {
        // this map will contain an entry for each Detail record that has been added or modified
        modifiedDetailRecords = new Map(Types::Int64, Types::Int64);  // LedgerJournalControlDetail.RecId, DimensionHierarchyTree.RecId

        journalControlId = _journalControlRecId;
        localTmpJournalControlDetail.setTmpData(_tmpJournalControlDetail);    // link the local table buffer instance to the form's table buffer data

        // populate the temp table with detail records for the identified journal control record
        this.loadTempRecords();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDeletedTempDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes or modifies the constraint tree associated with a deleted
    ///    <c>TmpLedgerJournalControlDetail</c> record.
    /// </summary>
    /// <param name="_tmpJournalControlDetail">
    ///    The <c>TmpLedgerJournalControlDetail</c> record that has been deleted.
    /// </param>
    /// <remarks>
    ///    Invoked after a <c>TmpLedgerJournalControlDetail</c> record has been deleted.The referenced
    ///    constraint tree will be placed into draft mode.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The specified <c>TmpLedgerJournalControlDetail</c> record contains an invalid value for the
    ///    <c>LedgerLegalEntity</c>, <c>DimensionHierarchy</c>, <c>DimensionAttribute</c>,
    ///    <c>LedgerJournalControlDetail</c>, or <c>DimensionConstraintTree</c> fields.
    /// </exception>
    public void processDeletedTempDetail(TmpLedgerJournalControlDetail _tmpJournalControlDetail)
    {
        LedgerJournalControlDetail  journalControlDetail;
        DimensionConstraintNode     constraintNode;
        DimensionTree               dimensionTree;
        DimensionTreeNode           dimensionTreeNode;
        int                         criteriaCount, idx;
        DimensionFromValue          rangeFromStrings[];
        DimensionToValue            rangeToStrings[];
        #DimensionWildCards

        if (_tmpJournalControlDetail.DimensionHierarchy == 0 ||
            _tmpJournalControlDetail.DimensionAttribute == 0 ||
            _tmpJournalControlDetail.LedgerJournalControlDetail == 0 ||
            _tmpJournalControlDetail.DimensionConstraintTree == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        journalControlDetail = this.resolveLedgerJournalControlDetail(_tmpJournalControlDetail);

        // identify or create an editable contraint tree and re-point the temp record to it
        _tmpJournalControlDetail.DimensionConstraintTree = this.getEditableConstraintTreeForDetailRecord(journalControlDetail.RecId,
                                                                                                         journalControlDetail.DimensionConstraintTree);

        // determine if there are any other temp records asociated with the identified LedgerJournalControlDetail record
        select firstonly
            localTmpJournalControlDetail
        where
            localTmpJournalControlDetail.LedgerJournalControlDetail == _tmpJournalControlDetail.LedgerJournalControlDetail;

        if (! localTmpJournalControlDetail)
        {
            // delete the identified LedgerJournalControlDetail record since there are no other temp records associated with it
            // the delete invocation will ensure the associated constraint tree is also removed
            journalControlDetail = LedgerJournalControlDetail::find(_tmpJournalControlDetail.LedgerJournalControlDetail, true);
            journalControlDetail.delete();
            this.unmarkDetailRecordAsEdited(_tmpJournalControlDetail.LedgerJournalControlDetail);
        }
        else
        {
            // update the criteria for the remaining temp records, if any

            criteriaCount = 0;
            while select localTmpJournalControlDetail
                where localTmpJournalControlDetail.DimensionAttribute == _tmpJournalControlDetail.DimensionAttribute &&
                      (localTmpJournalControlDetail.DimensionConstraintTree == _tmpJournalControlDetail.DimensionConstraintTree ||
                       localTmpJournalControlDetail.DimensionConstraintTree == journalControlDetail.DimensionConstraintTree)
            {
                // temporarily hold range values in collection so they can be added under a single companychange invocation
                criteriaCount++;
                rangeFromStrings[criteriaCount] = localTmpJournalControlDetail.RangeFrom;
                rangeToStrings[criteriaCount] = localTmpJournalControlDetail.RangeTo;
            }

            // identify the draft constraint node associated with the temp record
            constraintNode = this.resolveConstraintNode(_tmpJournalControlDetail.DimensionConstraintTree, _tmpJournalControlDetail.DimensionAttribute);

            // create a DimensionTreeNode instance to manilpulate the criteria
            dimensionTreeNode = DimensionTreeNode::construct(constraintNode);
            dimensionTreeNode.clearCriteria();

            if (criteriaCount > 0)
            {
                // add each range from the collection to the node
                for (idx = 1; idx <= criteriaCount; idx++)
                {
                    this.addCriteria(dimensionTreeNode, rangeFromStrings[idx], rangeToStrings[idx]);
                }
            }
            else
            {
                // there is no criteria, add a single wildcard criteria
                this.addCriteria(dimensionTreeNode, '', '');
            }

            // persist the updated criteria to the constraint tree
            dimensionTree = DimensionTree::construct(_tmpJournalControlDetail.DimensionConstraintTree);
            dimensionTree.updateNode(constraintNode.RecId, dimensionTreeNode);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTempDetail</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates or modifies the constraint tree that is associated with a
    ///    <c>TmpLedgerJournalControlDetail</c> record.
    /// </summary>
    /// <param name="_tmpJournalControlDetail">
    ///    The <c>TmpLedgerJournalControlDetail</c> record to insert or modify.
    /// </param>
    /// <returns>
    ///    true if the constraint tree was successfully updated; otherwise false.
    /// </returns>
    /// <remarks>
    ///    This method is invoked before a <c>TmpLedgerJournalControlDetail</c> record has been inserted or
    ///    updated.The referenced constraint tree will be placed into draft mode.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The specified <c>TmpLedgerJournalControlDetail</c> record contains an invalid value for the
    ///    <c>LedgerLegalEntity</c> , <c>DimensionHierarchy</c>, or <c>DimensionAttribute</c> field or the
    ///    <c>RangeFrom</c> and <c>RangeTo</c> fields are empty.
    /// </exception>
    public boolean processTempDetail(TmpLedgerJournalControlDetail _tmpJournalControlDetail)
    {
        LedgerJournalControlDetail  journalControlDetail;
        DimensionConstraintNode     constraintNode;
        boolean                     isCriteriaValid;
        DimensionTree               dimensionTree;
        DimensionTreeNode           dimensionTreeNode;
        int                         criteriaCount, idx;
        DimensionFromValue          rangeFromStrings[];
        DimensionToValue            rangeToStrings[];

        if (_tmpJournalControlDetail.DimensionHierarchy == 0 ||
            _tmpJournalControlDetail.DimensionAttribute == 0 ||
            (_tmpJournalControlDetail.RangeFrom == '' && _tmpJournalControlDetail.RangeTo == ''))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        // the resolveLedgerJournalControlDetail invocation will ensure the temp record is associated with a detail record
        journalControlDetail = this.resolveLedgerJournalControlDetail(_tmpJournalControlDetail);

        // identify or create an editable contraint tree and re-point the temp record to it
        _tmpJournalControlDetail.DimensionConstraintTree = this.getEditableConstraintTreeForDetailRecord(journalControlDetail.RecId,
                                                                                                         journalControlDetail.DimensionConstraintTree);

        // identify the draft constraint node associated with the temp record
        constraintNode = this.resolveConstraintNode(_tmpJournalControlDetail.DimensionConstraintTree, _tmpJournalControlDetail.DimensionAttribute);

        // create a DimensionTreeNode instance to manilpulate the criteria
        dimensionTreeNode = DimensionTreeNode::construct(constraintNode);

        // to validate, the criteria is recreated from the temp records less the record being added/modified
        // the new/modified record is then added as a separate step, this process ensures the existing wildcard or range criteria
        // associated with the added/modified range does not interfere
        dimensionTreeNode.clearCriteria();

        changecompany(journalControlDetail.company())
        {
            criteriaCount = 0;

            // process the temp records associated with the identified constraint node except for the record being added/modified
            // these temp records may be associated with a draft hierarchy or its associated active hierarchy
            while select localTmpJournalControlDetail
                where localTmpJournalControlDetail.RecId != _tmpJournalControlDetail.RecId &&   // do not include the record being modified
                      localTmpJournalControlDetail.DimensionAttribute == _tmpJournalControlDetail.DimensionAttribute &&
                      (localTmpJournalControlDetail.DimensionConstraintTree == _tmpJournalControlDetail.DimensionConstraintTree ||
                       localTmpJournalControlDetail.DimensionConstraintTree == journalControlDetail.DimensionConstraintTree)
            {
                // temporarily hold range values in collection so they can be added under a single companychange invocation
                criteriaCount++;
                rangeFromStrings[criteriaCount] = localTmpJournalControlDetail.RangeFrom;
                rangeToStrings[criteriaCount] = localTmpJournalControlDetail.RangeTo;
            }

            // add each of the unaffected ranges from the collection to the node
            for (idx = 1; idx <= criteriaCount; idx++)
            {
                this.addCriteria(dimensionTreeNode, rangeFromStrings[idx], rangeToStrings[idx]);
            }

            // add the new/modified range to the node
            isCriteriaValid = this.addCriteria(dimensionTreeNode, _tmpJournalControlDetail.RangeFrom, _tmpJournalControlDetail.RangeTo);
        }

        if (isCriteriaValid)
        {
            // persist the updated criteria to the constraint tree
            dimensionTree = DimensionTree::construct(_tmpJournalControlDetail.DimensionConstraintTree);
            dimensionTree.updateNode(constraintNode.RecId, dimensionTreeNode);
        }

        return isCriteriaValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveConstraintNode</Name>
				<Source><![CDATA[
    private DimensionConstraintNode resolveConstraintNode(recId _constraintTreeId, recId _attributeId)
    {
        DimensionConstraintNode constraintNode;
        DimensionHierarchyLevel hierarchyLevelFields;

        Debug::assert(_constraintTreeId != 0);
        Debug::assert(_attributeId != 0);

        // Note: the supplied attributeId comes from the UI and references the original DimensionHierarchyLevel record associated with the
        // DimensionHierarchy selected on the UI. We are looking for the constraint node in the draft tree so this join needs to resolve to
        // the duplicated DimensionHierarchyLevel in the draft tree.

        select firstonly
            constraintNode
        join DimensionAttribute, RecId from
            hierarchyLevelFields
        where
            hierarchyLevelFields.DimensionAttribute == _attributeId &&
            constraintNode.DimensionConstraintTree == _constraintTreeId &&
            constraintNode.DimensionHierarchyLevel == hierarchyLevelFields.RecId;

        return constraintNode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveLedgerJournalControlDetail</Name>
				<Source><![CDATA[
    // Retrieve the detail record that the current temp record is or will be associated with
    // Creates detail record if needed
    private LedgerJournalControlDetail resolveLedgerJournalControlDetail(TmpLedgerJournalControlDetail _tmpJournalControlDetail)
    {
        LedgerJournalControlDetail journalControlDetail;

        if (_tmpJournalControlDetail.LedgerJournalControlDetail != 0)
        {
            // retrieve the referenced detail record
            journalControlDetail = LedgerJournalControlDetail::find(_tmpJournalControlDetail.LedgerJournalControlDetail);
        }
        else
        {
            // determine if there is a detail record that the temp record would be associated with
            journalControlDetail = LedgerJournalControlDetail::findByJrnlControlCompHierarchyTree(
                                        journalControlId,
                                        _tmpJournalControlDetail.LedgerLegalEntity,
                                        _tmpJournalControlDetail.DimensionHierarchy);

            if (! journalControlDetail)
            {
                // we need to spin up new detail record for this temp record
                journalControlDetail = this.addDetailRecord(_tmpJournalControlDetail);
            }

            // associate the temp record to the detail record
            _tmpJournalControlDetail.LedgerJournalControlDetail = journalControlDetail.RecId;
        }

        // verify post-condition
        Debug::assert(journalControlDetail.RecId != 0);
        Debug::assert(_tmpJournalControlDetail.LedgerJournalControlDetail != 0);

        return journalControlDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unmarkDetailRecordAsEdited</Name>
				<Source><![CDATA[
    private void unmarkDetailRecordAsEdited(recId _journalControlDetailId)
    {
        Debug::assert(_journalControlDetailId != 0);

        if (modifiedDetailRecords.exists(_journalControlDetailId))
        {
            modifiedDetailRecords.remove(_journalControlDetailId);
        }
        else
        {
            // detect invalid mark/unmark invocation logic
            Debug::assert(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>LedgerJournalControlForm</c> class.
    /// </summary>
    /// <param name="_journalControlRecId">
    /// The record ID of the <c>LedgerJournalControl</c> record for which this instance is being created.
    /// </param>
    /// <param name="_tmpJournalControlDetail">
    /// The <c>TmpLedgerJournalControlDetail</c> table buffer to associate with this instance.
    /// </param>
    /// <returns>
    /// An instance of the <c>LedgerJournalControlForm</c> class.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The _journalControlRecId parameter was 0.
    /// </exception>
    public static LedgerJournalControlForm construct(recId _journalControlRecId, TmpLedgerJournalControlDetail _tmpJournalControlDetail)
    {
        LedgerJournalControlForm    formHelper;

        // Validate input parameter
        if (_journalControlRecId == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        formHelper = new LedgerJournalControlForm(_journalControlRecId, _tmpJournalControlDetail);

        return formHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>