<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankPaymAdviceVendDPTransferQueryGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BankPaymAdviceVendDPTransferQueryGenerator</c> class generates the query used to transfer
/// report data for the batchable vendor bank payment advice report. This query will copy data
/// from the <c>BankPaymAdviceVendTmp</c> table used in report generation to the <c>BankPaymAdviceVendV2Tmp</c> table
/// used for report processing.
/// </summary>
public final class BankPaymAdviceVendDPTransferQueryGenerator
{
    BankPaymAdviceVendTmp bankPaymAdviceVendTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    internal SysDaInsertObject createQuery(BankPaymAdviceVendV2Tmp _bankPaymAdviceVendV2Tmp, guid _reportExecutionContext)
    {
        SysDaInsertObject insertObject = this.createInsertObject(_bankPaymAdviceVendV2Tmp);

        SysDaQueryObject queryObject = this.createQueryObject(_reportExecutionContext);
        this.addSelectionCriteria(queryObject, _reportExecutionContext);

        insertObject.query(queryObject);

        return insertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInsertObject</Name>
				<Source><![CDATA[
    private SysDaInsertObject createInsertObject(BankPaymAdviceVendV2Tmp _bankPaymAdviceVendV2Tmp)
    {
        SysDaInsertObject bankPaymAdviceVendV2TmpInsertObject = new SysDaInsertObject(_bankPaymAdviceVendV2Tmp);
        this.addInsertionFields(bankPaymAdviceVendV2TmpInsertObject);

        return bankPaymAdviceVendV2TmpInsertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addInsertionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>BankPaymAdviceVendV2Tmp</c> table fields to an insert object.
    /// </summary>
    /// <param name = "_insertObject">
    /// The insert object to add the fields.
    /// </param>
    protected void addInsertionFields(SysDaInsertObject _insertObject)
    {
        _insertObject.fields()
            .add(fieldStr(BankPaymAdviceVendV2Tmp, AmountCur))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, Balance01))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, CashDisc))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, CompanyAddress))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, CompanyCoRegNum))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, CompanyGiro))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, CompanyPhone))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, CompanyTelefax))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, CurrencyCode))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, Grouping))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, Invoice))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, InvoiceDate))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, PaymAdviceDate))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, PaymentReference))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, PaymRefLabel))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, SettledCurrencyCode))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, TransDate))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, VendAddress))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, VendName))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, IsWithholdingTaxCalculated))
            .add(fieldStr(BankPaymAdviceVendV2Tmp, InvoiceTaxWithholdAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQueryObject</Name>
				<Source><![CDATA[
    private SysDaQueryObject createQueryObject(guid _reportExecutionContext)
    {
        SysDaQueryObject bankPaymAdviceVendTmpQueryObject = new SysDaQueryObject(bankPaymAdviceVendTmp);

        this.addProjectionFields(bankPaymAdviceVendTmpQueryObject);

        return bankPaymAdviceVendTmpQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProjectionFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>BankPaymAdviceVendTmp</c> fields to the projection of a query object.
    /// </summary>
    /// <param name = "_queryObject">
    /// The query object to add the fields.
    /// </param>
    protected void addProjectionFields(SysDaQueryObject _queryObject)
    {
        _queryObject.projection()
            .add(fieldStr(BankPaymAdviceVendTmp, AmountCur))
            .add(fieldStr(BankPaymAdviceVendTmp, Balance01))
            .add(fieldStr(BankPaymAdviceVendTmp, CashDisc))
            .add(fieldStr(BankPaymAdviceVendTmp, CompanyAddress))
            .add(fieldStr(BankPaymAdviceVendTmp, CompanyCoRegNum))
            .add(fieldStr(BankPaymAdviceVendTmp, CompanyGiro))
            .add(fieldStr(BankPaymAdviceVendTmp, CompanyPhone))
            .add(fieldStr(BankPaymAdviceVendTmp, CompanyTelefax))
            .add(fieldStr(BankPaymAdviceVendTmp, CurrencyCode))
            .add(fieldStr(BankPaymAdviceVendTmp, Grouping))
            .add(fieldStr(BankPaymAdviceVendTmp, Invoice))
            .add(fieldStr(BankPaymAdviceVendTmp, InvoiceDate))
            .add(fieldStr(BankPaymAdviceVendTmp, PaymAdviceDate))
            .add(fieldStr(BankPaymAdviceVendTmp, PaymentReference))
            .add(fieldStr(BankPaymAdviceVendTmp, PaymRefLabel))
            .add(fieldStr(BankPaymAdviceVendTmp, SettledCurrencyCode))
            .add(fieldStr(BankPaymAdviceVendTmp, TransDate))
            .add(fieldStr(BankPaymAdviceVendTmp, VendAddress))
            .add(fieldStr(BankPaymAdviceVendTmp, VendName))
            .add(fieldStr(BankPaymAdviceVendTmp, IsWithholdingTaxCalculated))
            .add(fieldStr(BankPaymAdviceVendTmp, InvoiceTaxWithholdAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSelectionCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds <c>BankPaymAdviceVendTmp</c> fields to the query object where clause.
    /// </summary>
    /// <param name = "_queryObject">
    /// The query object to add the fields
    /// </param>
    /// <param name = "_reportExecutionContext">
    /// A unique execution guid used to distinguish between report executions.
    /// </param>
    protected void addSelectionCriteria(SysDaQueryObject _queryObject, guid _reportExecutionContext)
    {
        _queryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(bankPaymAdviceVendTmp, fieldStr(BankPaymAdviceVendTmp, ExecutionContext)),
                new SysDaValueExpression(_reportExecutionContext)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a SysDA query for the transfer of data between the <c>BankPaymAdviceVendTmp</c> physical table used by payment advice
    /// report generation and the <c>BankPaymAdviceVendV2Tmp</c> temporary table used by the batchable report processing.
    /// </summary>
    /// <param name = "_bankPaymAdviceVendV2Tmp">
    /// The <c>BankPaymAdviceVendV2Tmp</c> temporary table for insert.
    /// </param>
    /// <param name = "_reportExecutionContext">
    /// A unique execution guid used to distinguish between report executions.
    /// </param>
    /// <returns>
    /// A <c>SysDaInsertObject</c> object for transfer of data.
    /// </returns>
    internal static SysDaInsertObject newQuery(BankPaymAdviceVendV2Tmp _bankPaymAdviceVendV2Tmp, guid _reportExecutionContext)
    {
        BankPaymAdviceVendDPTransferQueryGenerator copyData = new BankPaymAdviceVendDPTransferQueryGenerator();

        return copyData.createQuery(_bankPaymAdviceVendV2Tmp, _reportExecutionContext);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>