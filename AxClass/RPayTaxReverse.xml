<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTaxReverse</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayTaxReverse
{
    SpecTrans               specTrans;
    RPayTaxSettlement       taxSettlement;
    RPayTaxTransSettlement  taxTransSettlement;

    LedgerVoucher           ledgerVoucher;
    LedgerBondClient_RU     ledgerBondClient;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>endLedgerVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void endLedgerVoucher()
    {
        if (! ledgerVoucher)
        {
            return;
        }

        ledgerVoucher.end();

        TransactionLog::create(TransactionLogType::RPayTaxRefundOffset, "@RUP3224");
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initLedgerVoucher()
    {
        TransactionTxt  transactionTxt;

        transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::RPayTaxRefundOffset);
        transactionTxt.setVoucher(taxTransSettlement.SettleVoucher);

        ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                     SysModule::Payroll,
                                                     RPayParameters::numRefTaxRefundOffsetVoucher().numberSequenceTable().NumberSequence);

        ledgerVoucher.parmCheckBlockedDimensions(false);

        ledgerVoucher.addVoucher(
            LedgerVoucherObject::newVoucher(taxTransSettlement.SettleVoucher,
                                            taxTransSettlement.SettleDate,
                                            SysModule::Payroll,
                                            LedgerTransType::Payroll));

        ledgerVoucher.findLedgerVoucherObject().lastTransTxt(transactionTxt.txt());
        ledgerVoucher.findLedgerVoucherObject().parmCorrection(true);
        ledgerVoucher.findLedgerVoucherObject().parmVoucherCheck(false);

        ledgerBondClient = ledgerVoucher.findLedgerVoucherObject().ledgerBondClient_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(RPayTaxSettlement _taxSettlement)
    {
        taxSettlement = _taxSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseTaxRefundOffset</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void reverseTaxRefundOffset()
    {
        RPayTaxTransOpen taxTransOpen = RPayTaxTransOpen::find(taxTransSettlement.TransRecId);
        RPayTrans        payTrans     = RPayTrans::find(taxTransOpen.RefRecId);

        ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newBasicDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                LedgerPostingType::RPayTaxRefundOffset,
                LedgerDimensionFacade::serviceCreateLedgerDimension(taxTransOpen.taxAccountOutgoing(), payTrans.getDefaultDimension()),
                CompanyInfoHelper::standardCurrency(),
                taxTransSettlement.SettleAmount,
                0,
                0));

        ledgerVoucher.addTrans(
            LedgerVoucherTransObject::newBasicDefault(
                ledgerVoucher.findLedgerVoucherObject(),
                LedgerPostingType::RPayTaxRefundOffset,
                LedgerDimensionFacade::serviceCreateLedgerDimension(taxTransOpen.taxAccountDeffered(), payTrans.getDefaultDimension()),
                CompanyInfoHelper::standardCurrency(),
                -taxTransSettlement.SettleAmount,
                0,
                0));

        if (ledgerBondClient)
        {
            ledgerBondClient.bondVRef2VRef(ledgerBondClient.lastVrefId(),
                                           ledgerBondClient.lastVrefId(-1));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateNow()
    {
        Voucher     currentVoucher;
        TransDate   currentTransDate;

        ttsbegin;

        while select forupdate taxTransSettlement
            order by SettleVoucher, SettleDate
        exists join specTrans
            where specTrans.RefTableId  == taxTransSettlement.TableId
               && specTrans.RefRecId    == taxTransSettlement.RecId
               && specTrans.RefCompany  == taxTransSettlement.dataAreaId
               && specTrans.SpecTableId == taxSettlement.TableId
               && specTrans.SpecRecId   == taxSettlement.RecId
               && specTrans.SpecCompany == taxSettlement.dataAreaId
        {
            if (taxTransSettlement.SettleVoucher && taxTransSettlement.SettleAmount < 0)
            {
                if (currentVoucher   != taxTransSettlement.SettleVoucher ||
                    currentTransDate != taxTransSettlement.SettleDate)
                {
                    this.endLedgerVoucher();
                    this.initLedgerVoucher();

                    currentVoucher   = taxTransSettlement.SettleVoucher;
                    currentTransDate = taxTransSettlement.SettleDate;
                }

                this.reverseTaxRefundOffset();
            }

            taxTransSettlement.reverseTransact();
        }

        this.endLedgerVoucher();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPayTaxReverse construct(RPayTaxSettlement _taxSettlement)
    {
        return new RPayTaxReverse(_taxSettlement);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>