<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHRMReport_T2</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RHRMReport_T2 extends RHRMReport implements BatchRetryable
{
     RHRMVirtualNetworkLanguageSkill        rHRMVirtualNetworkLanguageSkill;
     RHRMVirtualNetworkEducation            rHRMVirtualNetworkEducation;
     RHRMVirtualNetworkFamily               rhrmEmployeeContact;
     RPayHistory                            rPayHistory;
     RHRMVirtualNetworkEvaluation           rHRMVirtualNetworkEvaluation;
     RHRMVirtualNetworkRaisingSkill         rHRMVirtualNetworkRaisingSkill;
     RHRMVirtualNetworkVocationalRetraining rHRMVirtualNetworkVocationalRetraining;
     RHRMOrderTrans                         rHRMOrderTrans;
     RHRMVirtualNetworkBenefit              rHRMVirtualNetworkBenefit;
     RHRMEmplTable                              emplTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>animationBoxCaption</Name>
				<Source><![CDATA[
    public str animationBoxCaption()
    {
        return "@RUP1716";
    }

]]></Source>
			</Method>
			<Method>
				<Name>animationBoxText</Name>
				<Source><![CDATA[
    public str animationBoxText()
    {
        return "@RUP1807";
    }

]]></Source>
			</Method>
			<Method>
				<Name>initData</Name>
				<Source><![CDATA[
    public void initData(Args _args)
    {
        super(_args);
        emplTable               = _args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    public boolean prompt()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    #define.Value123(123)
    public void run()
    {
        int            countPass;
        RHRMDateDiff   dateDiff;
        date           workDate;
        date           reportDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        RHRMOrderTable rHRMOrderTable;
        RPayHistory    rPayHistoryOld;

        RHRMPersonTable personTable   = emplTable.personTable();
        DirPersonName   dirPersonName = personTable.dirPersonName();
        HcmWorker       hcmWorker     = personTable.hcmWorker();
        date            birthDate     = personTable.hcmPersonPrivateDetails().BirthDate;

        LogisticsAddressing address     = DirParty::primaryPostalAddress(hcmWorker.Person).getAddressAsLine_RU();
        LogisticsAddressing factAddress = RHRMReport_T2::findPostalAddressByRole(hcmWorker.Person, LogisticsLocationRoleType::RealAddress_RU).getAddressAsLine_RU();

        wordDocument.insertFieldValue(#CI_Name, CompanyInfo::find().Name);

        wordDocument.insertFieldValue(#CI_CodeOKPO_RU, CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find(), reportDate));

        wordDocument.insertFieldValue(#ET_CreateDate_RU, this.dateInNumber(emplTable.CreateDate));

        wordDocument.insertFieldValue(#ET_EmplId, emplTable.EmployeeId);

        wordDocument.insertFieldValue(#ET_PayInn_Ru, emplTable.payINN(reportDate));

        wordDocument.insertFieldValue(#ET_PayInnPf_Ru, emplTable.payPFRINN(reportDate));

        wordDocument.insertFieldValue(#Alfavit,substr(dirPersonName.LastName,1,1));

        wordDocument.insertFieldValue(#ET_KindOfWork_RU, enum2str(emplTable.KindOfWork));

        wordDocument.insertFieldValue(#ET_SortOfWork_RU, enum2str(emplTable.SortOfWork));

        wordDocument.insertFieldValue(#VNT_gender,substr(enum2str(personTable.Gender),1,1));

        wordDocument.insertFieldValue(#ET_labourContract_RU, emplTable.LabourContract);

        wordDocument.insertFieldValue(#ET_LCD_RU, this.dateInNumber(emplTable.LabourContractDate));

        wordDocument.insertFieldValue(#ET_lastName, dirPersonName.LastName);

        wordDocument.insertFieldValue(#ET_firstName, dirPersonName.FirstName);

        wordDocument.insertFieldValue(#ET_middleName, dirPersonName.MiddleName);

        if (birthDate)
            wordDocument.insertFieldValue(#ET_BirthDate, this.dateInWord(birthDate));

        wordDocument.insertFieldValue(#ET_BirthPlace, this.delimiterN([LogisticsAddressCountryRegion::name(personTable.CountryRegionBirthId),
                                                                        personTable.StateBirth,
                                                                        personTable.CountyBirth,
                                                                        personTable.TownBirth]));

        wordDocument.insertFieldValue(#VNT_citizenship,LogisticsAddressCountryRegion::name(personTable.citizenshipCountryRegionId(reportDate)));

        countPass = 1;
        while select rHRMVirtualNetworkLanguageSkill
            order by CommonLanguageLevel desc
            where rHRMVirtualNetworkLanguageSkill.PersonnelNumber == personTable.PersonnelNumber &&
                  rHRMVirtualNetworkLanguageSkill.MotherTongue == NoYes::No
        {
            wordDocument.insertFieldValue(#LC_description_ + int2str(countPass),
                RHRMLanguageCode::find(rHRMVirtualNetworkLanguageSkill.LanguageCode).Description);

            wordDocument.insertFieldValue(#VNLS_LLevel_+int2str(countPass),
                enum2str(rHRMVirtualNetworkLanguageSkill.CommonLanguageLevel));

            if (countPass == #Value2)
                break;
            else
                countPass++;
        }

        wordDocument.insertFieldValue(#ET_Education, this.codeDescription(personTable.EducationTypeId,
                                                                           RHRMeducationType::find(personTable.EducationTypeId).Description));

        while select firstonly rHRMVirtualNetworkEducation
            order by EndDate desc, AfterCollege desc
            where rHRMVirtualNetworkEducation.AfterCollege     != RHRMAfterCollegeName::None &&
                  rHRMVirtualNetworkEducation.PersonnelNumber == personTable.PersonnelNumber
        {
            wordDocument.insertFieldValue(#VNEdu_afterCollege, enum2str(rHRMVirtualNetworkEducation.AfterCollege));

            wordDocument.insertFieldValue(#VNEdu_description_a, rHRMVirtualNetworkEducation.Description);

            wordDocument.insertFieldValue(#VNEdu_Diploma_a, rHRMVirtualNetworkEducation.EducationDiploma);
            if (rHRMVirtualNetworkEducation.EndDate)
                wordDocument.insertFieldValue(#VNEdu_endDate_a,year(rHRMVirtualNetworkEducation.EndDate));

            wordDocument.insertFieldValue(#VNEdu_Special_a,rHRMVirtualNetworkEducation.EducationSpecialization);

            wordDocument.insertFieldValue(#VNEdu_CodeOKCO_a,rHRMVirtualNetworkEducation.EducationCodeOKCO);
        }

        countPass = 1;
        while select rHRMVirtualNetworkEducation
            order by EndDate desc
            where rHRMVirtualNetworkEducation.AfterCollege     == RHRMAfterCollegeName::None &&
                  rHRMVirtualNetworkEducation.PersonnelNumber == personTable.PersonnelNumber
        {
            if (countPass > #Value2)
                break;
            if (RHRMeducationType::find(rHRMVirtualNetworkEducation.EducationTypeId).EducationKind !=
                RHRMEducationKind::Higher)
                continue;

            wordDocument.insertFieldValue(#VNEdu_description_+int2str(countPass),
                rHRMVirtualNetworkEducation.Description);

            wordDocument.insertFieldValue(#VNEdu_Diploma_+int2str(countPass),
                                          rHRMVirtualNetworkEducation.EducationDiploma);

            wordDocument.insertFieldValue(#VNEdu_DiplomaType_+int2str(countPass),
                                          enum2str(rHRMVirtualNetworkEducation.DiplomaCertificate));

            if (rHRMVirtualNetworkEducation.EndDate)
                wordDocument.insertFieldValue(#VNEdu_endDate_+int2str(countPass), year(rHRMVirtualNetworkEducation.EndDate));

            wordDocument.insertFieldValue(#VNEdu_Qualif_+int2str(countPass),
                rHRMVirtualNetworkEducation.EducationQualification);

            wordDocument.insertFieldValue(#VNEdu_Special_+int2str(countPass),
                rHRMVirtualNetworkEducation.EducationSpecialization);

            wordDocument.insertFieldValue(#VNEdu_CodeOKCO_+int2str(countPass),
                rHRMVirtualNetworkEducation.EducationCodeOKCO);

            countPass++;
        }

        if (countPass <= #Value2)
        {
            while select rHRMVirtualNetworkEducation
                order by EndDate desc
                where rHRMVirtualNetworkEducation.AfterCollege     == RHRMAfterCollegeName::None &&
                      rHRMVirtualNetworkEducation.PersonnelNumber == personTable.PersonnelNumber
            {
                if (countPass > #Value2)
                    break;
                if (RHRMeducationType::find(rHRMVirtualNetworkEducation.EducationTypeId).EducationKind !=
                    RHRMEducationKind::Vocational)
                    continue;

                wordDocument.insertFieldValue(#VNEdu_description_+int2str(countPass),
                    rHRMVirtualNetworkEducation.Description);

                wordDocument.insertFieldValue(#VNEdu_Diploma_+int2str(countPass),
                                              rHRMVirtualNetworkEducation.EducationDiploma);

                wordDocument.insertFieldValue(#VNEdu_DiplomaType_+int2str(countPass),
                                              enum2str(rHRMVirtualNetworkEducation.DiplomaCertificate));

                if (rHRMVirtualNetworkEducation.EndDate)
                    wordDocument.insertFieldValue(#VNEdu_endDate_+int2str(countPass), year(rHRMVirtualNetworkEducation.EndDate));

                wordDocument.insertFieldValue(#VNEdu_Qualif_+int2str(countPass),
                    rHRMVirtualNetworkEducation.EducationQualification);

                wordDocument.insertFieldValue(#VNEdu_Special_+int2str(countPass),
                    rHRMVirtualNetworkEducation.EducationSpecialization);

                wordDocument.insertFieldValue(#VNEdu_CodeOKCO_+int2str(countPass),
                    rHRMVirtualNetworkEducation.EducationCodeOKCO);

                countPass++;
            }
        }

        wordDocument.insertFieldValue(#ET_Title,emplTable.titleId());

        wordDocument.insertFieldValue(#Today, this.dateInWord(reportDate));

        workDate = str2date(emplTable.seniorityDate(false, ""), #Value123);

        if (workDate)
        {
            dateDiff = new RHRMDateDiff(workDate, reportDate);
            if (dateDiff.getValidate())
            {
                if (dateDiff.getDays() > 0)
                {
                    wordDocument.insertFieldValue(#ET_SenDay, dateDiff.getDays());
                }
                if (dateDiff.getMonths() > 0)
                {
                    wordDocument.insertFieldValue(#ET_SenMth, dateDiff.getMonths());
                }
                if (dateDiff.getYears() > 0)
                {
                    wordDocument.insertFieldValue(#ET_SenYr, dateDiff.getYears());
                }
            }
        }

        workDate = str2date(emplTable.continuityDate(false, ""), #Value123);
        if (workDate)
        {
            dateDiff = new RHRMDateDiff(workDate, reportDate);
            if (dateDiff.getValidate())
            {
                if (dateDiff.getDays() > 0)
                {
                    wordDocument.insertFieldValue(#ET_ContDay, dateDiff.getDays());
                }
                if (dateDiff.getMonths() > 0)
                {
                    wordDocument.insertFieldValue(#ET_ContMth, dateDiff.getMonths());
                }
                if (dateDiff.getYears() > 0)
                {
                    wordDocument.insertFieldValue(#ET_ContYr, dateDiff.getYears());
                }
            }
        }

        wordDocument.insertFieldValue(#VNT_maritalStatus, this.codeDescription(personTable.MaritalStatusId,
                                                                                RHRMMaritalStatusTable::find(personTable.MaritalStatusId).Description));

        countPass = 1;
        wordDocument.goToBookmark(#EmplContacts);
        while select rhrmEmployeeContact
            where rhrmEmployeeContact.PersonnelNumber == personTable.PersonnelNumber
        {
            if (countPass > 1)
            {
                wordDocument.tableAddRow();
            }

            wordDocument.tableInsertValue(countPass+#Value2,1,enum2str(rhrmEmployeeContact.Relatives));

            wordDocument.tableInsertValue(countPass+#Value2,#Value2,rhrmEmployeeContact.KinName);

            wordDocument.tableInsertValue(countPass+2,#Value3,this.dateInNumber(rhrmEmployeeContact.BirthDate));
            countPass++;
        }

        wordDocument.insertFieldValue(#ET_IsSeries_RU, personTable.IdentityCardSeries);
        wordDocument.insertFieldValue(#ET_IsNumber_RU, personTable.IdentityCardNumber);

        if (personTable.IdentityCardIssueDate)
            wordDocument.insertFieldValue(#ET_IssueDate_RU, this.dateInWord(personTable.IdentityCardIssueDate));

        wordDocument.insertFieldValue(#ET_IssueBy_RU, personTable.IdentityCardIssueBy);

        if (address)
            wordDocument.insertFieldValue(#IssueAddres, "@RUP2078" + "@GLS111192" + address);

        if (factAddress)
            wordDocument.insertFieldValue(#ET_AddrFact, "@RUP1615" + "@GLS111192" + factAddress);

        wordDocument.insertFieldValue(#ET_Phone, hcmWorker.phone());

        wordDocument.insertFieldValue(#MCat_description, rhrmMilitaryCategory::find(personTable.MilitaryCategoryId).Description);

        wordDocument.insertFieldValue(#MRank_description, RHRMMilitaryRank::find(personTable.MilitaryRankId).Description);

        wordDocument.insertFieldValue(#MForm_description, enum2str(RHRMMilitaryRank::find(personTable.MilitaryRankId).MilitaryStructure));

        wordDocument.insertFieldValue(#ET_MSpeciality, personTable.MilitarySpeciality);

        wordDocument.insertFieldValue(#ET_MService, enum2str(personTable.MilitaryServiceAbleBodied));

        wordDocument.insertFieldValue(#MregOffice_desc, RHRMMilitaryRegistrationOffice::find(personTable.MilitaryRegistrationOfficeId).Description);

        wordDocument.insertFieldValue(#MGroup_desc, RHRMMilitaryGroup::find(personTable.MilitaryGroupId).Description);

        wordDocument.insertFieldValue(#ET_MSReg, personTable.MilitarySpecialRegistration);

        wordDocument.insertFieldValue(#ET_MTakeOff, enum2str(personTable.MilitaryTakeOffRegister));

        countPass = 1;
        wordDocument.goToBookmark(#VNHistory);
        while select rPayHistory
            order by StartDate, TransTime
            where rPayHistory.Number == emplTable.EmployeeId
        {
            rPayHistoryOld.data(rPayHistory);

            if (rPayHistory.OperationType == RHRMJournalType::Dismiss)
                continue;

            if (countPass > 1)
                wordDocument.tableAddRow();

            wordDocument.tableInsertValue(countPass+#Value2,1, this.dateInNumber(rPayHistory.StartDate));

            wordDocument.tableInsertValue(countPass+2,#Value2, rPayHistory.organizationDescription());

           wordDocument.tableInsertValue(countPass+2,#Value3, this.positionAndCategory(rPayHistory.titleId(), rPayHistory.TradeCategory));

            wordDocument.tableInsertValue(countPass+2,#Value4, strfmt("@GLS107148",
                                                                CurrencyNameDeclension_RU::numeralsToCurrencyShort(rPayHistory.wage()),
                                                                CurrencyNameDeclension_RU::numeralsToCurrencyShort(rPayHistory.riseInWages()  +
                                                                                                                   rPayHistory.riseInWages2() +
                                                                                                                   rPayHistory.riseInWages3())));
            wordDocument.tableInsertValue(countPass+2,#Value5,rPayHistory.Reason);

            countPass++;
        }

        countPass = 1;
        wordDocument.goToBookmark(#VNEvaluation);
        while select rHRMVirtualNetworkEvaluation
            where rHRMVirtualNetworkEvaluation.EmplId == emplTable.EmployeeId
        {
            if (countPass > 1)
            {
                wordDocument.tableAddRow();
            }
            wordDocument.tableInsertValue(countPass+#Value3,1, this.dateInNumber(rHRMVirtualNetworkEvaluation.EvaluationDate));

            wordDocument.tableInsertValue(countPass+3,#Value2,RHRMEvaluationCode::find(rHRMVirtualNetworkEvaluation.EvaluationCodeId).Description);

            wordDocument.tableInsertValue(countPass+3,#Value3,rHRMVirtualNetworkEvaluation.EvaluationOrder);

            wordDocument.tableInsertValue(countPass+3,#Value4,this.dateInNumber(rHRMVirtualNetworkEvaluation.OrderDate));

            wordDocument.tableInsertValue(countPass+3,#Value5,rHRMVirtualNetworkEvaluation.Reason);
            countPass++;
        }

        countPass = 1;
        wordDocument.goToBookmark(#VNRaisingSkill);
        while select rHRMVirtualNetworkRaisingSkill
            where rHRMVirtualNetworkRaisingSkill.PersonnelNumber == personTable.PersonnelNumber
        {
            if (countPass > 1)
            {
                wordDocument.tableAddRow();
            }

            wordDocument.tableInsertValue(countPass+#Value4,1, this.dateInNumber(rHRMVirtualNetworkRaisingSkill.StartDate));

            wordDocument.tableInsertValue(countPass+4,#Value2, this.dateInNumber(rHRMVirtualNetworkRaisingSkill.EndDate));

            wordDocument.tableInsertValue(countPass+4,#Value3, rHRMVirtualNetworkRaisingSkill.RaisingSkillType);

            wordDocument.tableInsertValue(countPass+4,#Value4, rHRMVirtualNetworkRaisingSkill.EducationalInstitution);

            wordDocument.tableInsertValue(countPass+4,#Value5, rHRMVirtualNetworkRaisingSkill.OrderName);

            wordDocument.tableInsertValue(countPass+4,#Value6, rHRMVirtualNetworkRaisingSkill.RaisingOrder);

            wordDocument.tableInsertValue(countPass+4,#Value7, this.dateInNumber(rHRMVirtualNetworkRaisingSkill.OrderDate));

            wordDocument.tableInsertValue(countPass+4,#Value8, rHRMVirtualNetworkRaisingSkill.Reason);
            countPass++;
        }

        countPass = 1;
        wordDocument.goToBookmark(#VNVRet);
        while select rHRMVirtualNetworkVocationalRetraining
            where rHRMVirtualNetworkVocationalRetraining.PersonnelNumber == personTable.PersonnelNumber
        {
            if (countPass > 1)
            {
                wordDocument.tableAddRow();
            }

            wordDocument.tableInsertValue(countPass+#Value3,1, this.dateInNumber(rHRMVirtualNetworkVocationalRetraining.StartDate));

            wordDocument.tableInsertValue(countPass+3,#Value2, this.dateInNumber(rHRMVirtualNetworkVocationalRetraining.EndDate));

            wordDocument.tableInsertValue(countPass+3,#Value3, rHRMVirtualNetworkVocationalRetraining.EducationSpecialization);

            wordDocument.tableInsertValue(countPass+3,#Value4, rHRMVirtualNetworkVocationalRetraining.OrderName);

            wordDocument.tableInsertValue(countPass+3,#Value5, rHRMVirtualNetworkVocationalRetraining.RetrainingOrder);

            wordDocument.tableInsertValue(countPass+3,#Value6, this.dateInNumber(rHRMVirtualNetworkVocationalRetraining.OrderDate));

            wordDocument.tableInsertValue(countPass+3,#Value7, rHRMVirtualNetworkVocationalRetraining.Reason);
            countPass++;
        }

        countPass = 1;
        wordDocument.goToBookmark(#VNBonus);
        while select TableId from rHRMOrderTrans
            where rHRMOrderTrans.EmplId == emplTable.EmployeeId
        join BonusCode, OrderNum, TransDate from rHRMOrderTable
            where rHRMOrderTrans.OrderTableRecId == rHRMOrderTable.RecId     &&
                  rHRMOrderTable.JournalType     == RHRMJournalType::Bonus   &&
                  rHRMOrderTable.Posted          == NoYes::Yes
        {
            if (countPass > 1)
            {
                wordDocument.tableAddRow();
            }

            wordDocument.tableInsertValue(countPass+#Value3,1, RHRMBonusCode::find(rHRMOrderTable.BonusCode).Description);

            wordDocument.tableInsertValue(countPass+#Value3,3, rHRMOrderTable.OrderNum);

            wordDocument.tableInsertValue(countPass+#Value3,#Value4, this.dateInNumber(rHRMOrderTable.TransDate));
            countPass++;
        }

        countPass = 1;
        wordDocument.goToBookmark(#Vacations);
        while select rHRMOrderTrans
            where rHRMOrderTrans.EmplId == emplTable.EmployeeId
        exists join rHRMOrderTable
            where rHRMOrderTrans.OrderTableRecId == rHRMOrderTable.RecId      &&
                  rHRMOrderTable.JournalType     == RHRMJournalType::Vacation &&
                  rHRMOrderTable.Posted          == NoYes::Yes
        {
            if (countPass > 1)
            {
                wordDocument.tableAddRow();
            }

            wordDocument.tableInsertValue(countPass+#Value3,1, this.codeDescription(rHRMOrderTrans.VacationTypeId, RHRMVacationType::find(rHRMOrderTrans.VacationTypeId).Description));

            wordDocument.tableInsertValue(countPass+3,#Value2, this.dateInNumber(rHRMOrderTrans.StartPeriodDate));

            wordDocument.tableInsertValue(countPass+3,#Value3, this.dateInNumber(rHRMOrderTrans.EndPeriodDate));

            wordDocument.tableInsertValue(countPass+3,#Value4, int2str(rHRMOrderTrans.calendarDayNumber()));

            wordDocument.tableInsertValue(countPass+3,#Value5, this.dateInNumber(rHRMOrderTrans.StartDate));

            wordDocument.tableInsertValue(countPass+3,#Value6, this.dateInNumber(rHRMOrderTrans.EndDate));

            wordDocument.tableInsertValue(countPass+3,#Value7, strfmt("@SYS76498",
                                                                rHRMOrderTrans.AttachDocNum,
                                                                this.dateInNumber(rHRMOrderTrans.AttachDocDate)));
            countPass++;
        }

        countPass = 1;
        wordDocument.goToBookmark(#VNBenefit);
        while select rHRMVirtualNetworkBenefit
            where rHRMVirtualNetworkBenefit.EmplId == emplTable.EmployeeId
        {
            if (countPass > 1)
            {
                wordDocument.tableAddRow();
            }

            wordDocument.tableInsertValue(countPass+#Value3,1, RHRMSocialBenefit::find(rHRMVirtualNetworkBenefit.SocialBenefitd).Description);

            wordDocument.tableInsertValue(countPass+#Value3,2, rHRMVirtualNetworkBenefit.BenefitOrder);

            wordDocument.tableInsertValue(countPass+#Value3,#Value3, this.dateInNumber(rHRMVirtualNetworkBenefit.OrderDate));

            wordDocument.tableInsertValue(countPass+#Value3,#Value4, rHRMVirtualNetworkBenefit.Reason);
            countPass++;
        }

        wordDocument.insertFieldValue(#VNT_NInternal, emplTable.NotesInternal);

        if (emplTable.PayResignedDate)
        {
            rPayHistory = RPayHistory::findLastOperation(emplTable.EmployeeId,
                                                         RHRMJournalType::Dismiss);

            wordDocument.insertFieldValue(#DissVNH_reason,  RHRMReasonCode::find(rPayHistory.HrmReasonCodeId, RHRMReasonType::Resign).Description);
            wordDocument.insertFieldValue(#ET_PRDate, this.dateInWord(emplTable.PayResignedDate));
            wordDocument.insertFieldValue(#Diss_VNH_OrderNum, rPayHistory.HrmOrderNum);

            if (rPayHistory.HrmOrderDate)
                wordDocument.insertFieldValue(#Diss_VNH_Date, this.dateInWord(rPayHistory.HrmOrderDate));
        }

        wordDocument.unlinkFields();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostalAddressByRole</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a postal address for a party of a certain purpose.
    /// </summary>
    /// <param name="_partyRecId">
    /// The <c>DirPartyRecId</c> value of the party to which the address is related.
    /// </param>
    /// <param name="_role">
    /// The <c>LogisticsLocationRoleType</c> value of the purpose of the address for which to search;
    /// optional.
    /// </param>
    /// <returns>
    /// A <c>LogisticsElectronicAddress</c> table buffer that is based on the search criteria.
    /// </returns>
    /// <remarks>
    /// If no primary address is found, this method returns the first record.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static LogisticsPostalAddress findPostalAddressByRole(DirPartyRecId _partyRecId, LogisticsLocationRoleType _role = LogisticsLocationRoleType::Business)
    {
        LogisticsPostalAddress  address = null;
        DirPartyLocation partyLocation;
        DirPartyLocationRole partyLocationRole;
        LogisticsLocationRole locationRole;
        boolean roleIsDenormalized = DirPartyLocation::isDenormalizedRole(_role);
        //<SYS>
        /*
        FieldId denormalizedFieldId = DirPartyLocation::denormalizedRoleFieldId(_role);
        */
        //</SYS>
        //<RUP>
        FieldId denormalizedFieldId;
        //</RUP>

        // Check if primary contact info exist for a type and role combination
        if (roleIsDenormalized)
        {
            //<RUP>
            denormalizedFieldId = DirPartyLocation::denormalizedRoleFieldId(_role);
            //</RUP>
            select address
                exists join partyLocation
                    where partyLocation.Location == address.Location
                        && partyLocation.Party == _partyRecId
                        && partyLocation.IsPrimary == NoYes::Yes
                        && partyLocation.IsPostalAddress == NoYes::Yes
                        && partyLocation.(denormalizedFieldId) == true;
        }
        else
        {
            select address
                exists join partyLocation
                    where partyLocation.Location == address.Location
                        && partyLocation.Party == _partyRecId
                        && partyLocation.IsPrimary == NoYes::Yes
                        && partyLocation.IsPostalAddress == NoYes::Yes
                exists join partyLocationRole
                    where partyLocationRole.PartyLocation == partyLocation.RecId
                exists join locationRole
                    where locationRole.RecId == partyLocationRole.LocationRole
                        && locationRole.Type == _role;
        }

        if (address.RecId == 0)
        {
            // If not found get the first instance
            if (roleIsDenormalized)
            {
                select firstonly address
                    exists join partyLocation
                        where partyLocation.Location == address.Location
                            && partyLocation.Party == _partyRecId
                            && partyLocation.IsPostalAddress == NoYes::Yes
                            && partyLocation.(denormalizedFieldId) == true;
            }
            else
            {
                select firstonly address
                    exists join partyLocation
                        where partyLocation.Location == address.Location
                            && partyLocation.Party == _partyRecId
                            && partyLocation.IsPostalAddress == NoYes::Yes
                    exists join partyLocationRole
                        where partyLocationRole.PartyLocation == partyLocation.RecId
                    exists join locationRole
                        where locationRole.RecId == partyLocationRole.LocationRole
                            && locationRole.Type == _role;
            }
        }

        return address;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>