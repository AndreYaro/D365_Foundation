<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetPost
{
    CustInvoiceTrans    custInvoiceTrans;
    LedgerJournalTrans  ledgerJournalTrans;
    LedgerJournalTrans_RAsset  ledgerJournalTrans_RAsset;
    Common              common;
    LedgerVoucher       ledgerVoucher;
    TransDate           transDate;
    RAssetTable         rAssetTable;
    RAssetStandards     rAssetStandards;
    RAssetStandardId    rAssetStandardId;
    RAssetTrans         rAssetTrans;
    boolean             correct;
    TransDate           accountingDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateAssetTrans</Name>
				<Source><![CDATA[
    public boolean canCreateAssetTrans()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDeferrals</Name>
				<Source><![CDATA[
    protected void createDeferrals(RassetDeferralsType _operationType)
    {
        RAssetDeferralsAccounts     rAssetDeferralsAccounts;
        RAssetAmount                lossAmount;
        RDeferralsTable             deferralsTable;
        RDeferralsBook              deferralsBook, deferralsBookVoucher;
        LedgerJournalTrans          ledgerJournalTransVoucher;
        LedgerJournalTrans_RAsset   journalTransVoucher_RAsset;
        NumberSeq                   num;
        TransDate                   startDate;
        RAssetParameters            rAssetParameters    = RAssetParameters::find();
        RDeferralsBookId            deferralsBookId,
                                    deferralsTaxBookId  = RTax25Parameters::find().DeferralsBookId,
                                    deferralsBaseBookId = RDeferralsParameters::find().DeferralsBookIdDefault;
        real                        lifeTimeReal;
    
        if (rAssetParameters.StandardIdDefault    != rAssetStandards.AssetStandardId &&
            rAssetParameters.StandardTaxIdDefault != rAssetStandards.AssetStandardId)
            return;
    
        rAssetDeferralsAccounts = RAssetDeferralsAccounts::find(RAssetTableGroupAllStandard::Table,
                                                                rAssetStandards.AssetId,
                                                                rAssetStandards.AssetStandardId,
                                                                _operationType);
        if (! rAssetDeferralsAccounts.rDeferralsGroupId)
            return;
    
        lossAmount = this.lossAmount();
        if (lossAmount >= 0)
            return;
    
        lossAmount = abs(CurrencyExchangeHelper::mstAmount(lossAmount, rAssetStandards.CurrencyCode, transDate));
    
        select firstonly deferralsTable
            where deferralsTable.RefTableId == tableNum(RAssetStandards) &&
                  deferralsTable.RefRecId   == rAssetStandards.RecId;
        if (deferralsTable.RecId)
            return;
    
        if (common.TableId == tableNum(LedgerJournalTrans) &&
            (select firstonly RecId from rDeferralsBook
                 where rDeferralsBook.Voucher   == ledgerJournalTrans.Voucher &&
                       rDeferralsBook.TransDate == ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans)).RecId)
            return;
    
        deferralsBookId = RDeferralsGroup::find(rAssetDeferralsAccounts.rDeferralsGroupId).DeferralsBookId;
        if (common.TableId == tableNum(LedgerJournalTrans))
        {
            select firstonly forupdate deferralsTable index SourceProfitIdx
                where deferralsTable.rTax25ProfitTable == rAssetDeferralsAccounts.rTax25ProfitTable
                   && deferralsTable.RefTableId        == tableNum(RAssetTable)
                   && deferralsTable.RefRecId          == rAssetTable.RecId
                   && deferralsTable.AcquisitionDate   == transDate
            notexists join deferralsBook
                where deferralsBook.DeferralsId      == deferralsTable.DeferralsId
                   && deferralsBook.DeferralsBookId  == deferralsBookId
            exists join deferralsBookVoucher
                where deferralsBookVoucher.Voucher   && deferralsBookVoucher.TransDate
            exists join ledgerJournalTransVoucher
                where ledgerJournalTransVoucher.Voucher   == deferralsBookVoucher.Voucher
                   && ledgerJournalTransVoucher.TransDate == deferralsBookVoucher.TransDate
            exists join journalTransVoucher_RAsset
                where journalTransVoucher_RAsset.RefRecId  == ledgerJournalTransVoucher.RecId
                   && journalTransVoucher_RAsset.TransType == ledgerJournalTrans_RAsset.TransType;
        }
        else
        {
            select firstonly forupdate deferralsTable index SourceProfitIdx
                where deferralsTable.rTax25ProfitTable == rAssetDeferralsAccounts.rTax25ProfitTable
                   && deferralsTable.RefTableId        == tableNum(RAssetTable)
                   && deferralsTable.RefRecId          == rAssetTable.RecId
                   && deferralsTable.AcquisitionDate   == transDate
            notexists join deferralsBook
                where deferralsBook.DeferralsId      == deferralsTable.DeferralsId
                   && deferralsBook.DeferralsBookId  == deferralsBookId;
        }
    
        startDate = RDeferralsGroup::initWriteStartDate(rAssetDeferralsAccounts.rDeferralsGroupId,
                                                        transDate);
        if (RDeferralsWritingOffFactor::existCalculatedFactor(rAssetDeferralsAccounts.rTax25ProfitTable,
                                                              rAssetDeferralsAccounts.rDeferralsGroupId,
                                                              startDate))
        {
            throw error(strFmt("@GLS107253", startDate));
        }
    
        ttsbegin;
    
        num = RDeferralsTable::initDeferralsNumberSeq();
    
        if (! num)
            throw error("@SYS27388");
    
        if (! deferralsTable.RecId)
        {
            deferralsTable.DeferralsId = num.num();
            deferralsTable.initValue();
            deferralsTable.AcquisitionDate   = transDate;
            deferralsTable.Name              = strFmt(this.deferralsName(), rAssetStandards.AssetId, transDate);
            deferralsTable.Notes             = strFmt("@GLS116642",
                                                      rAssetTable.AccountNum,
                                                      rAssetTable.Name);
            deferralsTable.RefTableId        = tableNum(RAssetTable);
            deferralsTable.RefRecId          = rAssetTable.RecId;
            deferralsTable.rTax25ProfitTable = rAssetDeferralsAccounts.rTax25ProfitTable;
            deferralsTable.insert();
        }
    
        deferralsBook.clear();
        deferralsBook.DeferralsId        = deferralsTable.DeferralsId;
        deferralsBook.DeferralsAmount    = lossAmount;
        deferralsBook.DeferralsGroupId   = rAssetDeferralsAccounts.rDeferralsGroupId;
        deferralsBook.initFromDeferralsGroup(RDeferralsGroup::find(deferralsBook.DeferralsGroupId), deferralsTable);
    
        if (deferralsBook.DeferralsBookId == deferralsTaxBookId)
        {
            if (rAssetStandards.factor(transDate) != 0)
            {
                lifeTimeReal = rAssetStandards.lifetime(transDate) / rAssetStandards.factor(transDate) - rAssetStandards.lifeTimePass(transDate);
            }
    
            if (lifeTimeReal <= 0)
            {
                lifeTimeReal = 1;
            }
    
            if ((lifeTimeReal - real2int(lifeTimeReal)) != 0)
            {
                lifeTimeReal += 1;
            }
    
            deferralsBook.LifeTime = real2int(lifeTimeReal);
    
            if (deferralsBook.LifeTime && deferralsBook.StartDeferralsDate)
                deferralsBook.EndDeferralsDate = dateStartMth(dateMthFwd(deferralsBook.StartDeferralsDate,
                                                                         deferralsBook.LifeTime)) - 1;
        }
        if (common.TableId == tableNum(LedgerJournalTrans))
        {
            deferralsBook.Voucher   = ledgerJournalTrans.Voucher;
            deferralsBook.TransDate = ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans);
        }
    
        deferralsBook.Status = RDeferralsStatus::Scheduled;
        deferralsBook.insert();
        RDeferralsTrans::createTrans(deferralsBook, ledgerVoucher, correct);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    protected void createTrans()
    {
        ;
    
        switch (common.TableId)
        {
            case tableNum(LedgerJournalTrans):
                rAssetTrans = this.initFromLedgerJournalTrans();
                break;
            case tableNum(CustInvoiceTrans):
                rAssetTrans = this.initFromCustInvoiceTrans();
                break;
            default:
                throw error(strFmt("@SYS23396", funcName()));
        }
        rAssetTrans.Open      = NoYes::Yes;
        rAssetTrans.Voucher   = ledgerVoucher.lastVoucher();
        rAssetTrans.insert();
    
        this.createTransLink(rAssetTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deferralsName</Name>
				<Source><![CDATA[
    protected RDeferralsName deferralsName()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    protected RAssetTrans initFromCustInvoiceTrans()
    {
        RAssetSumCalc rassetSumTrans;
        ;

        rAssetTrans.clear();
        rAssetTrans.TransDate        = transDate;
        rAssetTrans.AssetTransType   = RAssetTransType::DisposalSale;
        rAssetTrans.AccountNum       = custInvoiceTrans.custInvoiceTrans_RU().AssetId_RU;
        rAssetTrans.AssetStandardId  = rAssetStandardId;
        rAssetStandards              = rAssetTrans.assetStandards();
        rAssetTrans.PostingProfile   = rAssetStandards.postingProfile(transDate);
        rAssetTrans.CurrencyCode     = rAssetStandards.CurrencyCode;
        rAssetTrans.DefaultDimension = rAssetTrans.defaultDimension(custInvoiceTrans.DefaultDimension);
        rassetSumTrans               = RAssetSumCalc_Trans::newAssetPeriod(custInvoiceTrans.custInvoiceTrans_RU().AssetId_RU,
                                                                          rAssetStandardId,
                                                                          transDate);
        rAssetTrans.AmountCur        = -rassetSumTrans.netBookValue();
        rAssetTrans.AmountMST        = CurrencyExchangeHelper::mstAmount(rAssetTrans.AmountCur, rAssetTrans.CurrencyCode, rAssetTrans.TransDate, UnknownNoYes::Unknown, custInvoiceTrans.exchRate());

        rAssetTrans.ReasonRefRecID   = ReasonTableRef::checkCreateInCompany(custInvoiceTrans.ReasonRefRecId, rAssetTrans.DataAreaId);

        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected RAssetTrans initFromLedgerJournalTrans()
    {
        rAssetTrans.clear();
        rAssetTrans.TransDate        = transDate;
        rAssetTrans.AssetTransType   = ledgerJournalTrans_RAsset.TransType;
        rAssetTrans.AccountNum       = ledgerJournalTrans_RAsset.AssetId;
        rAssetTrans.AssetStandardId  = ledgerJournalTrans_RAsset.StandardId;
        rAssetStandards              = rAssetTrans.assetStandards(true);
        rAssetTrans.PostingProfile   = ledgerJournalTrans.PostingProfile;
        rAssetTrans.CurrencyCode     =  rAssetStandards.CurrencyCode;
        rAssetTrans.DefaultDimension = rAssetTrans.defaultDimension(ledgerJournalTrans.DefaultDimension);
        rAssetTrans.Approver         = ledgerJournalTrans.Approver;
        rAssetTrans.Txt              = ledgerJournalTrans.Txt;

        rAssetTrans.LedgerDimension       = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerJournalTrans_RAsset.DebLedgerDimension, rAssetTrans.DefaultDimension);
        rAssetTrans.OffsetLedgerDimension = ledgerJournalTrans.OffsetLedgerDimension;

        rAssetTrans.ReasonRefRecID        = ReasonTableRef::checkCreateInCompany(ledgerJournalTrans.ReasonRefRecID, rAssetTrans.DataAreaId);

        if (rAssetTrans.CurrencyCode == ledgerJournalTrans.CurrencyCode)
        {
            rAssetTrans.AmountCur = ledgerJournalTrans.amount();
        }
        else
        {
            rAssetTrans.AmountCur = this.transAmountCur(ledgerJournalTrans.CurrencyCode,
                                                        rAssetTrans.CurrencyCode,
                                                        ledgerJournalTrans.amount(),
                                                        ledgerJournalTrans.ExchRate);
        }
        rAssetTrans.AmountMST     = ledgerJournalTrans.calcAmountMST();

        if ((ledgerJournalTrans_RAsset.TransType == RAssetTransType::AcquisitionAdj   ||
             ledgerJournalTrans_RAsset.TransType == RAssetTransType::DepreciationAdj) &&
            ledgerJournalTrans_RAsset.ToFromRecId &&
            LedgerJournalTrans_RAsset::find(LedgerJournalTrans::findRecId(ledgerJournalTrans_RAsset.ToFromRecId, false).RecId).TransType == RAssetTransType::PartialTakeDown)
        {
            rAssetTrans.PostingType = RAssetPostingType::PartialTakeDown;
        }

        if (rAssetTrans.AssetTransType == RAssetTransType::Acquisition  ||
            rAssetTrans.AssetTransType == RAssetTransType::Revaluation  ||
            rAssetTrans.AssetTransType == RAssetTransType::Depreciation)
        {
            rAssetTrans.DeprBonusId = ledgerJournalTrans_RAsset.DepreciationBonusId;
            rAssetTrans.DepreciationBonusCost = RAssetBonus::bonusAmountCur(rAssetTrans.DeprBonusId,
                                                                            rAssetTrans.AssetStandardId,
                                                                            RAssetTable::find(rAssetTrans.AccountNum),
                                                                            rAssetTrans.TransDate,
                                                                            rAssetTrans.AmountCur,
                                                                            rAssetTrans.CurrencyCode);
        }

        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    protected void initValue(Common _common, LedgerVoucher _ledgerVoucher, RAssetStandardId   _assetStandardId)
    {
        ;
    
        common = _common;
        switch (_common.TableId)
        {
            case tableNum(CustInvoiceTrans):
                custInvoiceTrans   = _common;
                break;
            case tableNum(LedgerJournalTrans):
                ledgerJournalTrans = _common;
                ledgerJournalTrans_RAsset = LedgerJournalTrans_RAsset::find(ledgerJournalTrans.RecId);
                correct                     = ledgerJournalTrans_RAsset.CorrectedPeriod != dateNull();
                accountingDate              = _ledgerVoucher.lastTransDate();
                if (correct)
                {
                    transDate = ledgerJournalTrans_RAsset.CorrectedPeriod;
                }
                break;
        }
        ledgerVoucher    = _ledgerVoucher;
        transDate        = correct ? transDate : ledgerVoucher.lastTransDate();
        rAssetStandardId = _assetStandardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lossAmount</Name>
				<Source><![CDATA[
    protected RAssetAmount lossAmount()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        RAssetStatusType assetStatusType;
        ;

        if (this.canCreateAssetTrans())
        {
            this.createTrans();
        }

        assetStatusType = RAssetStatusType::construct(common);

        if (assetStatusType.updateLedger())
        {
            this.post();
            this.updateStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transAmountCur</Name>
				<Source><![CDATA[
    protected AmountCur transAmountCur(CurrencyCode _currencyCode,
                             CurrencyCode _assetCurrencyCode,
                             AmountCur    _amountCur,
                             ExchRate     _exchRate)
    {
        AmountCur amountCur;
        ;

        amountCur = CurrencyExchangeHelper::curAmount(CurrencyExchangeHelper::mstAmount(_amountCur, _currencyCode, transDate, UnknownNoYes::Unknown, _exchRate, 0, false), _assetCurrencyCode, transDate, UnknownNoYes::Unknown, 0, 0, false);

        amountCur = CurrencyExchangeHelper::amount(amountCur, _assetCurrencyCode);

        return amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        RAssetSumCalc               assetSumTrans;
        RAssetStandards             assetStandardsLocal;
        RAssetTrans                 rassetTransLend,
                                    rassetTransLendRet;
        RAssetSumCalc_Trans         sumCalc;
        LedgerJournalTrans_RAsset   ledgerJournalTransRassetBonus;

        if (! rAssetTable)
        {
            rAssetTable = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId, true);
        }

        assetSumTrans   = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum,
                                                              ledgerJournalTrans_RAsset.StandardId);

        while select assetStandardsLocal
            where assetStandardsLocal.AssetId == rAssetTable.AccountNum
        {
            assetSumTrans.parmRangeAssetStandard(assetStandardsLocal.AssetStandardId);

            if (assetSumTrans.netBookValue() > assetStandardsLocal.ScrapValue)
                break;
        }

        if (assetStandardsLocal)
        {
            if (rAssetTable.Status == RAssetStatus::Closed ||
                rAssetTable.Status == RAssetStatus::Lended)
            {
                select firstonly TransDate from rassetTransLend
                    order by TransDate desc
                    where rassetTransLend.AccountNum     == rAssetTable.AccountNum   &&
                          rassetTransLend.AssetTransType == RAssetTransType::Lending &&
                          ! rassetTransLend.StornoRecId;

                select firstonly TransDate from rassetTransLendRet
                    order by TransDate desc
                    where rassetTransLendRet.AccountNum     == rAssetTable.AccountNum      &&
                          rassetTransLendRet.AssetTransType == RAssetTransType::LendingRet &&
                          ! rassetTransLendRet.StornoRecId;

                if (rassetTransLendRet.TransDate >= rassetTransLend.TransDate)
                {
                    rAssetTable.Status = RAssetStatus::Open;
                }
                else
                {
                    rAssetTable.Status = RAssetStatus::Lended;
                }
            }
        }
        else
        {
            rAssetTable.Status = RAssetStatus::Closed;
        }

        if (rAssetTrans.AssetTransType == RAssetTransType::Revaluation
         && rAssetStandardId           == RAssetParameters::standardTaxIdDefault()
         && rAssetStandards.deprProfile().DeprMethod  == RAssetDeprMethod::StraightLine
         && rAssetStandards.deprProfile().DeprSumBase == RAssetDeprSumBase::ReplacementCost)
        {
            sumCalc = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum, rAssetStandardId, rAssetTrans.TransDate);

            if (rAssetStandards.lifeTimePass(rAssetTrans.TransDate) *
                rAssetTrans.AmountMST / sumCalc.acquisitionTotalMST() >
                RAssetGroup::find(rAssetStandards.AssetGroup).Lifetime - rAssetStandards.lifetime(transDate))
            {
                warning("@GLS117075");
            }
        }
        if (rAssetTrans.AssetTransType  == RAssetTransType::Revaluation &&
            common.TableId              == tableNum(LedgerJournalTrans) &&
            rAssetTrans.DeprBonusId)
        {
            update_recordset ledgerJournalTransRassetBonus
                setting ToFromRecId = rAssetTrans.RecId
                where ledgerJournalTransRassetBonus.ToFromRecId == common.RecId &&
                      ledgerJournalTransRassetBonus.TransType   == RAssetTransType::Depreciation;
        }

        rAssetTable.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RAssetPost construct(Common             _common,
                                       LedgerVoucher      _ledgerVoucher,
                                       RAssetStandardId   _assetStandardId)
    {
        RAssetPost assetPost;
        ;

        switch (RAssetTrans::getAssetTransType(_common))
        {
            case RAssetTransType::Acquisition:
                assetPost = new RAssetPost_Acquisition();
                break;

            case RAssetTransType::Disposal:
                assetPost = new RAssetPost_Disposal();
                break;

            case RAssetTransType::DisposalScrap:
                assetPost = new RAssetPost_DisposalScrap();
                break;

            case RAssetTransType::DisposalSale:
                assetPost = new RAssetPost_DisposalSale();
                break;

            case RAssetTransType::PartialTakeDown:
                assetPost = new RAssetPost_PartialTakeDown();
                break;

            case RAssetTransType::Depreciation:
                assetPost = new RAssetPost_Depreciation();
                break;

            case RAssetTransType::Lending:
                assetPost = new RAssetPost_Lending();
                break;

            case RAssetTransType::LendingRet:
                assetPost = new RAssetPost_LendingRet();
                break;

            case RAssetTransType::CompanyReceipt:
                assetPost = new RAssetPost_CompanyReceipt();
                break;

            case RAssetTransType::CompanyIssue:
                assetPost = new RAssetPost_CompanyIssue();
                break;

            default:
                assetPost = new RAssetPost();
        }
        assetPost.initValue(_common, _ledgerVoucher, _assetStandardId);

        return assetPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates link between original asset operation and correction.
    /// </summary>
    /// <param name="_rAssetTrans">
    /// The current asset operation; optional.
    /// </param>
    protected void createTransLink(RAssetTrans _rAssetTrans)
    {
        TransLinkCorrection_RU transLinkCorrection;
        ;
    
        if (correct)
        {
            transLinkCorrection = TransLinkCorrection_RU::construct(_rAssetTrans);
            transLinkCorrection.createTransLink(accountingDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
