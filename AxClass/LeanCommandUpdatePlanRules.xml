<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCommandUpdatePlanRules</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LeanCommandUpdatePlanRules extends LeanCommandBase
{
    Plan    oldPlan;
    Plan    newPlan;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assignmentDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>utcDateTime</c> enumeration value for assignment.
    /// </summary>
    /// <param name="_dateTime">
    ///    A <c>utcDateTime</c> enumeration value for comparison.
    /// </param>
    /// <returns>
    ///    A value to be stored in a buffer.
    /// </returns>
    private utcdatetime assignmentDateTime(utcdatetime _dateTime)
    {
        utcdatetime result = _dateTime;

        if (_dateTime == DateTimeUtil::maxValue())
        {
            result = utcDateTimeNull();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>comparisonDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>utcDateTime</c> enumerated value for comparison.
    /// </summary>
    /// <param name="_dateTime">
    ///    A <c>utcDateTime</c> value.
    /// </param>
    /// <returns>
    ///    A value that can be compared with the <c>min</c> method.
    /// </returns>
    /// <remarks>
    ///    For missing dates, it returns the maximum value.
    /// </remarks>
    private utcdatetime comparisonDateTime(utcdatetime _dateTime)
    {
        utcdatetime result = _dateTime;

        if (_dateTime == utcDateTimeNull())
        {
            result = DateTimeUtil::maxValue();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Update all kanban rules that are related to a lean production flow version that is being started.
    /// </summary>
    /// <returns>
    ///    true if the update was successful.
    /// </returns>
    /// <remarks>
    ///    The method is executed in a transaction scope that is provided by the <c>LeanRulesEngine</c> class.
    /// </remarks>
    protected boolean execute()
    {
        boolean                     result = true;
        LeanCoverageKanbanRule      leanCoverageKanbanRuleNew;
        LeanCoverageKanbanRule      leanCoverageKanbanRuleOld;
        KanbanFlow                  kanbanFlow;
        KanbanRule                  kanbanRule;
        KanbanRule                  kanbanRuleOld;
        Plan                        firstPlan, lastPlan, plan;
        PlanPlanActivity            firstPlanPlanActivity;
        PlanPlanActivity            lastPlanPlanActivity;
        PlanPlanActivity            planPlanActivity;

        // process all rules belonging to the new version
        while select forupdate leanCoverageKanbanRuleNew
            join RecId, RuleId from kanbanRule
                where kanbanRule.RecId              == leanCoverageKanbanRuleNew.KanbanRule
            join TableId from kanbanFlow
                where kanbanFlow.RecId              == kanbanRule.KanbanFlow
            join TableId from firstPlanPlanActivity
                where firstPlanPlanActivity.RecId   == kanbanFlow.FirstPlanPlanActivity
            join RecId, ValidFrom, ValidTo from firstPlan
                where firstPlan.RecId               == firstPlanPlanActivity.Plan
            join TableId from lastPlanPlanActivity
                where lastPlanPlanActivity.RecId    == kanbanFlow.LastPlanPlanActivity
            join RecId, ValidFrom, ValidTo from lastPlan
                where lastPlan.RecId                == lastPlanPlanActivity.Plan
            exists join RecId from plan
                where plan.RecId                    == newPlan.RecId
                      && (plan.RecId                == lastPlan.RecId
                          || plan.RecId             == firstPlan.RecId)
        {
            leanCoverageKanbanRuleNew.ValidFrom = this.maxDateTime(leanCoverageKanbanRuleNew.ValidFrom, this.maxDateTime(firstPlan.ValidFrom, lastPlan.ValidFrom));
            leanCoverageKanbanRuleNew.ValidTo   = this.minDateTime(this.comparisonDateTime(leanCoverageKanbanRuleNew.ValidTo),
                                                                    this.minDateTime(this.comparisonDateTime(firstPlan.ValidTo),
                                                                                     this.comparisonDateTime(lastPlan.ValidTo)));
            leanCoverageKanbanRuleNew.ValidTo = this.assignmentDateTime(leanCoverageKanbanRuleNew.ValidTo);

            if (leanCoverageKanbanRuleNew.validateData(LeanRuleData::newKanbanRuleRecId(kanbanRule.RecId), true))
            {
                leanCoverageKanbanRuleNew.update();
            }
            else
            {
                warning(strFmt("@SYS85685", kanbanRule.RuleId));
            }
        }

        // now update all rules in the old Plan that have invalid dates
        if (oldPlan.RecId != newPlan.RecId)
        {
            while select forupdate leanCoverageKanbanRuleOld
                    where leanCoverageKanbanRuleOld.ValidTo     == utcDateTimeNull()
                          || leanCoverageKanbanRuleOld.ValidTo  >= newPlan.ValidFrom
                join RuleId, ReplacingKanbanRule from kanbanRuleOld
                    where kanbanRuleOld.RecId                   == leanCoverageKanbanRuleOld.KanbanRule
                outer join kanbanRule
                    where kanbanRule.RecId                      == kanbanRuleOld.ReplacingKanbanRule
                outer join leanCoverageKanbanRuleNew
                    where leanCoverageKanbanRuleNew.KanbanRule  == kanbanRule.RecId
                exists join kanbanFlow
                    where kanbanFlow.RecId                      == kanbanRuleOld.KanbanFlow
                exists join planPlanActivity
                    where planPlanActivity.Plan                 == oldPlan.RecId
                          && (planPlanActivity.RecId            == kanbanFlow.FirstPlanPlanActivity
                              || planPlanActivity.RecId         == kanbanFlow.LastPlanPlanActivity)
            {
                if (!leanCoverageKanbanRuleNew.RecId)
                {
                    // for invalid old rules, we reset the ValidTo to 1 second before the new Plan's validFrom
                    leanCoverageKanbanRuleNew.ValidFrom = newPlan.ValidFrom;
                    leanCoverageKanbanRuleOld.ValidTo = LeanCommandReplaceRule::getReplacedRuleValidTo(leanCoverageKanbanRuleNew);
                    leanCoverageKanbanRuleOld.update();
                }
                else
                {
                    // for replaced rules - we only update them if they pass the replacing rule's validFrom
                    if (leanCoverageKanbanRuleOld.ValidTo >= leanCoverageKanbanRuleNew.ValidFrom)
                    {
                        leanCoverageKanbanRuleOld.ValidTo = LeanCommandReplaceRule::getReplacedRuleValidTo(leanCoverageKanbanRuleNew);
                        leanCoverageKanbanRuleOld.update();
                    }
                }
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maxDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the maximum of two date and time values.
    /// </summary>
    /// <param name="_dateTime1">
    ///    The first date; optional.
    /// </param>
    /// <param name="_dateTime2">
    ///    The second date; optional.
    /// </param>
    /// <returns>
    ///    The maximum of the two date and time values.
    /// </returns>
    /// <remarks>
    ///    An empty date is considered infinite.
    /// </remarks>
    private utcdatetime maxDateTime(utcdatetime _dateTime1, utcdatetime _dateTime2)
    {
        if (!_dateTime1 ||
            !_dateTime2)
        {
            return DateTimeUtil::minValue();
        }

        return (max(_dateTime1,_dateTime2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>minDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the minimum of two date and time values.
    /// </summary>
    /// <param name="_dateTime1">
    ///    The first date; optional.
    /// </param>
    /// <param name="_dateTime2">
    ///    The second date; optional.
    /// </param>
    /// <returns>
    ///    The minimum of the two date and time values.
    /// </returns>
    /// <remarks>
    ///    An empty date is considered infinite.
    /// </remarks>
    private utcdatetime minDateTime(utcdatetime _dateTime1, utcdatetime _dateTime2)
    {
        return min(_dateTime1,_dateTime2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanNew</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Plan parmPlanNew(Plan _newPlan = newPlan)
    {
        newPlan = _newPlan;
        return newPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanOld</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public Plan parmPlanOld(Plan _oldPlan = oldPlan)
    {
        oldPlan = _oldPlan;
        return oldPlan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected static LeanCommandUpdatePlanRules construct()
    {
        return new LeanCommandUpdatePlanRules();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>LeanCommandUpdateRules</c> class.
    /// </summary>
    /// <param name="_oldPlan">
    ///    An old plan of the lean production flow type.
    /// </param>
    /// <param name="_newPlan">
    ///    A new plan of the lean production flow type.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>LeanCommandUpdateRules</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanCommandUpdatePlanRules newStandard(
        Plan _oldPlan,
        Plan _newPlan)
    {
        LeanCommandUpdatePlanRules leanCommandUpdatePlanRules = LeanCommandUpdatePlanRules::construct();

        if (_oldPlan.PlanReference != _newPlan.PlanReference)
        {
            throw error("@SYS136480"); //TOOD: change labels
        }

        if (   _oldPlan.RecId != _newPlan.RecId
            && !LeanCommandUpdatePlanRules::validateRules(_oldPlan, _newPlan))
        {
            throw error("@SYS136481");
        }

        if (_oldPlan.legalEntity() != CompanyInfo::current())
        {
            throw error(strFmt("@SYS332728",_oldPlan.VersionNum));
        }

        leanCommandUpdatePlanRules.parmPlanOld(_oldPlan);
        leanCommandUpdatePlanRules.parmPlanNew(_newPlan);

        return leanCommandUpdatePlanRules;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRules</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether an old version has rules that start after the start of the new version.
    /// </summary>
    /// <param name="_oldPlan">
    ///    An old plan of the production flow type.
    /// </param>
    /// <param name="_newPlan">
    ///    A new plan of the type production flow type.
    /// </param>
    /// <returns>
    ///    true if there are no rules; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static boolean validateRules(
        Plan _oldPlan,
        Plan _newPlan)
    {
        LeanCoverageKanbanRule      leanCoverageKanbanRule;
        KanbanFlow                  kanbanFlow;
        KanbanRule                  kanbanRule;
        PlanPlanActivity            planPlanActivity;

        if (   _newPlan.RecId  != _oldPlan.RecId
            && _oldPlan.RecId  != 0
            && _newPlan.Status == PlanStatus::Active
            && _oldPlan.Status == PlanStatus::Active)
        {
            select firstonly RecId from leanCoverageKanbanRule
                where leanCoverageKanbanRule.ValidFrom >= _newPlan.ValidFrom
                exists join kanbanRule
                    where kanbanRule.RecId == leanCoverageKanbanRule.KanbanRule
                exists join kanbanFlow
                    where kanbanFlow.RecId == kanbanRule.KanbanFlow
                exists join planPlanActivity
                    where planPlanActivity.Plan   == _oldPlan.RecId
                       && (planPlanActivity.RecId == kanbanFlow.FirstPlanPlanActivity
                       ||  planPlanActivity.RecId == kanbanFlow.LastPlanPlanActivity);
        }

        return !leanCoverageKanbanRule.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>