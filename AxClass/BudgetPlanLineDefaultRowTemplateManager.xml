<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanLineDefaultRowTemplateManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Contains methods to manage data construction and refreshing for the <c>BudgetPlanLineDefaultRowTemplate</c> cache.
/// </summary>
public class BudgetPlanLineDefaultRowTemplateManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateAllDefaultRowTemplatesForProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate <c>BudgetPlanLineDefaultRowTemplate</c> records for a given process and all layouts.
    /// </summary>
    /// <param name = "_process"> The <c>BudgetPlanningProcess</c> record ID. </param>
    public static void generateAllDefaultRowTemplatesForProcess(BudgetPlanningProcess _process)
    {
        if (!_process)
        {
            throw error(strFmt("@Budget:BudgetPlanning_Validation_GenerationMissingParameter", tableStr(BudgetPlanningProcess)));
        }

        BudgetPlanLayout layout;

        while select RecId from layout
        {
            BudgetPlanLineDefaultRowTemplateManager::createDefaultRowTemplateRecords(layout.RecId, _process);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDefaultRowTemplateRecordsForAlternateLayouts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate <c>BudgetPlanLineDefaultRowTemplate</c> records for given stage rule and its' alternate layouts.
    /// </summary>
    /// <param name = "_stageRule"> The <c>BudgetPlanningStageRule</c> record. </param>
    public static void generateDefaultRowTemplateRecordsForAlternateLayouts(BudgetPlanningStageRule _stageRule)
    {
        if (!_stageRule)
        {
            throw error(strFmt("@Budget:BudgetPlanning_Validation_GenerationMissingParameter", tableStr(BudgetPlanningStageRule)));
        }

        BudgetPlanAlternateLayout alternateLayout;

        while select BudgetPlanLayout from alternateLayout
            where alternateLayout.BudgetPlanningStageRule == _stageRule.RecId
        {
            BudgetPlanLineDefaultRowTemplateManager::createDefaultRowTemplateRecords(
                alternateLayout.BudgetPlanLayout,
                BudgetPlanningProcess::find(_stageRule.BudgetPlanningProcess));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDefaultRowTemplateRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates <c>BudgetPlanLineDefaultRowTemplate</c> records for a given <c>BudgetPlanLayout</c> record ID and <c>BudgetPlanningProcess</c> record.
    /// </summary>
    /// <param name = "_layoutRecId"> The <c>BudgetPlanLayout</c> record ID. </param>
    /// <param name = "_process"> The <c>BudgetPlanningProcess</c> record. </param>
    public static void createDefaultRowTemplateRecords(BudgetPlanLayoutRecId _layoutRecId, BudgetPlanningProcess _process)
    {
        if (!_layoutRecId)
        {
            throw error(strFmt("@Budget:BudgetPlanning_Validation_GenerationMissingParameter", tableStr(BudgetPlanLayout)));
        }

        if (!_process)
        {
            throw error(strFmt("@Budget:BudgetPlanning_Validation_GenerationMissingParameter", tableStr(BudgetPlanningProcess)));
        }

        if (BudgetPlanLineDefaultRowTemplate::findFirstByLayoutProcess(_layoutRecId, _process.RecId))
        {
            return;
        }

        BudgetPlanLineDefaultRowTemplate    defaultRowTemplate;
        BudgetPlanLayoutElement             layoutElement;
        BudgetPlanColumn                    column;
        BudgetPlanLineEffectiveDate         startDate;
        BudgetPlanLineEffectiveDate         endDate;
        BudgetPlanLine                      budgetPlanLine;
        BudgetPlanLayoutManager             layoutManager           = BudgetPlanLayoutManager::construct();
        BudgetPlanLineItemLine              lineItemLine            = BudgetPlanLineItemLine::construct();
        BudgetPlanLineEffectiveDate         effectiveStartDate      = BudgetPlanningProcessHelper::getProcessCycleStartDate(_process.RecId);
        BudgetPlanLineEffectiveDate         effectiveEndDate        = BudgetPlanningProcessHelper::getProcessCycleEndDate(_process.RecId);
        const TableName                     BudgetPlanLineTableStr  = tableStr(BudgetPlanLine);

        lineItemLine.parmBudgetPlanLayoutRecId(_layoutRecId);

        ttsbegin;

        while select ElementDefinition, Ordinal from layoutElement
            where layoutElement.Layout == _layoutRecId
            exists join column
                where column.RecId == layoutElement.ElementDefinition
        {
            budgetPlanLine.clear();
            defaultRowTemplate.clear();

            column                  = BudgetPlanColumn::find(layoutElement.ElementDefinition);
            [startDate, endDate]    = layoutManager.getEffectiveDates(column, effectiveStartDate, effectiveEndDate, _process.BudgetCycle);

            budgetPlanLine.BudgetPlanScenario = column.Scenario;
            lineItemLine.parmBudgetPlanLine(budgetPlanLine);
            lineItemLine.parmBudgetPlanColumnRecId(column.RecId);
            lineItemLine.defaultRow();

            defaultRowTemplate.Layout                   = _layoutRecId;
            defaultRowTemplate.Process                  = _process.RecId;
            defaultRowTemplate.Ordinal                  = layoutElement.Ordinal;
            defaultRowTemplate.Scenario                 = column.Scenario;
            defaultRowTemplate.StartDate                = startDate;
            defaultRowTemplate.EndDate                  = endDate;
            defaultRowTemplate.BudgetClassDefaulted     = lineItemLine.defaultBudgetClass();
            defaultRowTemplate.IsNewRequestDefaulted    = lineItemLine.defaultIsNewRequest();
            defaultRowTemplate.IsRecurringDefaulted     = lineItemLine.defaultIsRecurring();
            defaultRowTemplate.BudgetClass              = budgetPlanLine.BudgetClass;
            defaultRowTemplate.IsNewRequest             = budgetPlanLine.IsNewRequest;
            defaultRowTemplate.IsRecurring              = budgetPlanLine.IsRecurring;
            defaultRowTemplate.EstimateType             = budgetPlanLine.EstimateType;
            defaultRowTemplate.UnitOfMeasure            = budgetPlanLine.UnitOfMeasure;
            defaultRowTemplate.Comment                  = budgetPlanLine.Comment;
            defaultRowTemplate.ProposedAsset            = budgetPlanLine.ProposedAsset;
            defaultRowTemplate.ProposedProject          = budgetPlanLine.ProposedProject;
            defaultRowTemplate.Position                 = budgetPlanLine.Position;
            defaultRowTemplate.AssetId                  = budgetPlanLine.AssetId;
            defaultRowTemplate.ProjectId                = budgetPlanLine.ProjectId;

            if (defaultRowTemplate.AssetId || defaultRowTemplate.ProjectId)
            {
                defaultRowTemplate.SourceDataAreaId = CompanyInfo::getDataArea(Ledger::primaryForLegalEntity(_process.Ledger));
            }

            if (defaultRowTemplate.Position)
            {
                defaultRowTemplate.PositionScenario = HcmPositionForecastScenario::findByPositionForecastBudgetPlanScenario(
                                                            defaultRowTemplate.Position,
                                                            HcmForecastScenario::findByPlanningProcessAndScenario(
                                                                    _process.RecId,
                                                                    defaultRowTemplate.Scenario).RecId).RecId;
            }

            BudgetPlanColumnRule budgetPlanColumnRule = BudgetPlanColumnRule::findFirstColumnRuleForColumnTableField(
                                                            column.RecId,
                                                            BudgetPlanLineTableStr,
                                                            BudgetPlanLineItem::TransactionCurrencyCode);
            if (budgetPlanColumnRule)
            {
                defaultRowTemplate.TransactionCurrencyCode = budgetPlanColumnRule.RightSideValueOne;
            }

            defaultRowTemplate.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteByBudgetPlanningProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>BudgetPlanLineDefaultRowTemplate</c> records for a given <c>BudgetPlanningProcess</c> record ID.
    /// </summary>
    /// <param name = "_processRecId"> The <c>BudgetPlanningProcess</c> record ID. </param>
    public static void deleteByBudgetPlanningProcess(BudgetPlanningProcessRecId _processRecId)
    {
        BudgetPlanLineDefaultRowTemplate defaultRowTemplate;

        if (_processRecId)
        {
            delete_from defaultRowTemplate
                where defaultRowTemplate.Process == _processRecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshTemplateRecordsForLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Regenerates <c>BudgetPlanLineDefaultRowTemplate</c> records for a specific layout across all processes.
    /// </summary>
    /// <param name = "_layoutRecId"> The <c>BudgetPlanLayout</c> record ID to regenerate records for. </param>
    public static void refreshTemplateRecordsForLayout(BudgetPlanLayoutRecId _layoutRecId)
    {
        BudgetPlanLineDefaultRowTemplate    defaultRowTemplate;
        BudgetPlanLineDefaultRowTemplate    deleteRowTemplate;
        BudgetPlanningProcess               budgetPlanningProcess;

        while select budgetPlanningProcess
            exists join defaultRowTemplate
                where defaultRowTemplate.Process == budgetPlanningProcess.RecId
        {
            delete_from deleteRowTemplate
                where deleteRowTemplate.Layout == _layoutRecId
                    && deleteRowTemplate.Process == budgetPlanningProcess.RecId;

            BudgetPlanLineDefaultRowTemplateManager::createDefaultRowTemplateRecords(_layoutRecId, budgetPlanningProcess);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshTemplateRecordsForScenario</Name>
				<Source><![CDATA[
    /// <summary>
    /// Regenerates <c>BudgetPlanLineDefaultRowTemplate</c> records for all layout-process combinations with a given scenario.
    /// </summary>
    /// <param name = "_scenarioRecId"> The <c>BudgetPlanScenario</c> record ID. </param>
    public static void refreshTemplateRecordsForScenario(BudgetPlanScenarioRecId _scenarioRecId)
    {
        BudgetPlanLayout        layout;
        BudgetPlanLayoutElement layoutElement;
        BudgetPlanColumn        column;

        while select RecId from layout
            group by layout.RecId
            exists join layoutElement
                where layoutElement.Layout == layout.RecId
                exists join column
                    where column.RecId == layoutElement.ElementDefinition
                        && column.Scenario == _scenarioRecId
        {
            BudgetPlanLineDefaultRowTemplateManager::refreshTemplateRecordsForLayout(layout.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshTemplateRecordsForColumn</Name>
				<Source><![CDATA[
    /// <summary>
    /// Regenerates <c>BudgetPlanLineDefaultRowTemplate</c> records for all layout-process combinations with a given column.
    /// </summary>
    /// <param name = "_columnRecId"> The <c>BudgetPlanColumn</c> record ID. </param>
    public static void refreshTemplateRecordsForColumn(BudgetPlanColumnRecId _columnRecId)
    {
        BudgetPlanLayout        layout;
        BudgetPlanLayoutElement layoutElement;

        while select RecId from layout
            group by layout.RecId
            exists join layoutElement
                where layoutElement.Layout == layout.RecId
                    && layoutElement.ElementDefinition == _columnRecId
        {
            BudgetPlanLineDefaultRowTemplateManager::refreshTemplateRecordsForLayout(layout.RecId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>