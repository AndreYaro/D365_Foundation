<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventInventoryDataServiceDisableOnhandChangeSchedule</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class InventInventoryDataServiceDisableOnhandChangeSchedule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main (Args _args)
    {
        if (Box::yesNo("@SCM:InventoryServiceDeleteDialog", DialogButton::No) == DialogButton::Yes)
        {
            InventInventoryDataServiceDisableOnhandChangeSchedule inventoryDataServiceDisable = InventInventoryDataServiceDisableOnhandChangeSchedule::construct();

            InventoryServiceStatus atpStatus = InventInventoryDataServiceParameters::findWithPessimisticLock().InventoryServiceAtpStatus;

            if (atpStatus == InventoryServiceStatus::Enabling)
            {
                error("@SCM:InventoryServiceDisableEnablingErrorMessage");
            }
            else if (atpStatus == InventoryServiceStatus::Enabled ||
                     atpStatus == InventoryServiceStatus::InitialSync)
            {
                inventoryDataServiceDisable.resetAtpDataOnInventoryVisibility();
                inventoryDataServiceDisable.deleteBatchTaskAndQueue();
            }
            else if (atpStatus == InventoryServiceStatus::Disabling)
            {
                error("@SCM:InventoryServiceDisablingErrorMessage");
            }

            InventInventoryDataServiceBatchJobHelper::researchDataSources(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static InventInventoryDataServiceDisableOnhandChangeSchedule construct()
    {
        InventInventoryDataServiceDisableOnhandChangeSchedule inventoryDataServiceDisable = new InventInventoryDataServiceDisableOnhandChangeSchedule();
        return inventoryDataServiceDisable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBatchTaskAndQueue</Name>
				<Source><![CDATA[
    internal void deleteBatchTaskAndQueue()
    {
        ttsbegin;
        InventInventoryDataServiceParameters::updateAtpStatus(InventoryServiceStatus::Disabled);
        ttscommit;

        ttsbegin;
        this.deleteOhcsQueue();
        InventInventoryDataServiceBatchJobHelper::deleteBatchTask(classNum(InventInventoryDataServiceOnhandChangeScheduleBatchJob));
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOhcsQueue</Name>
				<Source><![CDATA[
    internal void deleteOhcsQueue()
    {
        InventInventoryDataServiceOnhandChangeScheduleQueue::truncate();
        InventInventoryDataServiceOnhandChangeScheduleQueueTemp::truncate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetAtpDataOnInventoryVisibility</Name>
				<Source><![CDATA[
    internal void resetAtpDataOnInventoryVisibility()
    {
        var inventoryServiceClient = new InventoryServiceClient(false);
        InventInventoryDataServiceJobInitiateResponse jobInitiateResponse = inventoryServiceClient.postResetAtpDataJob();

        if (!jobInitiateResponse.isOk() && !jobInitiateResponse.isConflict())
        {
            Error("@SCM:ResetAtpDataFailedErrorMessage");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>