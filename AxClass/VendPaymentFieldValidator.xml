<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPaymentFieldValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// The <c>VendPaymentFieldValidator</c> class provides vendor payment validation for ledger journal transactions.
/// </summary>
[ExportInterfaceAttribute()]
public abstract class VendPaymentFieldValidator
{
    private LedgerJournalType journalType;
    private Map tmpVoucherMap;

    protected LedgerJournalTrans ledgerJournalTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>VendPaymentFieldValidator</c> instance.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The ledger journal transaction table buffer.</param>
    /// <param name = "_journalType">The ledger journal type.</param>
    /// <param name = "_tmpVoucherMap">A map of vouchers.</param>
    internal void init(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalType _journalType, Map _tmpVoucherMap)
    {
        this.ledgerJournalTrans = _ledgerJournalTrans;
        this.journalType = _journalType;
        this.tmpVoucherMap = _tmpVoucherMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes validation logic for a given ledger journal transaction.
    /// </summary>
    /// <returns>true if the transaction is valid; otherwise, false.</returns>
    internal boolean validate()
    {
        boolean isFieldValid = this.isValid();

        if (!isFieldValid)
        {
            checkFailed(this.getCheckFailedMessage());
        }

        return isFieldValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    protected abstract boolean isValid()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCheckFailedMessage</Name>
				<Source><![CDATA[
    protected abstract str getCheckFailedMessage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerJournalType</Name>
				<Source><![CDATA[
    protected LedgerJournalType getLedgerJournalType()
    {
        return journalType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpVoucherMap</Name>
				<Source><![CDATA[
    protected Map getTmpVoucherMap()
    {
        return tmpVoucherMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the voucher associated with the transaction.
    /// </summary>
    /// <returns>The voucher.</returns>
    protected Voucher getVoucher()
    {
        return LedgerJournalTrans::findTmpVoucher(ledgerJournalTrans.Voucher, tmpVoucherMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucherTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the associated transaction date in the user's date format.
    /// </summary>
    /// <returns>The transaction date as a string.</returns>
    protected TempStr getVoucherTransDate()
    {
        return date2StrUsr(ledgerJournalTrans.TransDate, DateFlags::FormatAll);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>