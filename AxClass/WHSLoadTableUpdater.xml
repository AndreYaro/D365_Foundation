<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLoadTableUpdater</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class modifies the load table when a load line is inserted or updated.
/// </summary>
public final class WHSLoadTableUpdater
{
    protected WHSLoadTable loadTable;

    private boolean assignTransTemplate;
    private boolean assignOriginInfo;
    private boolean shouldInitStatusFromShipments;
    private boolean shouldValidateWrite;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of this class.
    /// </summary>
    /// <returns>A new instance of this class.</returns>
    protected static WHSLoadTableUpdater construct()
    {
        return new WHSLoadTableUpdater();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLoadTable</Name>
				<Source><![CDATA[
    private void setLoadTable(WHSLoadTable _loadTable)
    {
        if (!_loadTable.selectForUpdate())
        {
            throw error(strFmt("@WAX:Error_RecordNotSelectedForUpdate", tableStr(WHSLoadTable)));
        }

        loadTable = _loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSLoadTable loadTable()
    {
        return loadTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromAddLoadLinesToLoad</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates a new instance of the class for the given load. 
    /// </summary>
    /// <param name = "_loadTable">The load to create a new instance for.</param>
    /// <returns>A new instance of the class for the given load.</returns>
    public static WHSLoadTableUpdater newFromAddLoadLinesToLoad(WHSLoadTable _loadTable)
    {
        WHSLoadTableUpdater loadTableUpdater = WHSLoadTableUpdater::construct();
        loadTableUpdater.setLoadTable(_loadTable);

        return loadTableUpdater;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShouldInitStatusFromShipments</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmShouldInitStatusFromShipments(boolean _shouldInitStatusFromShipments = shouldInitStatusFromShipments)
    {
        shouldInitStatusFromShipments = _shouldInitStatusFromShipments;

        return shouldInitStatusFromShipments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShouldValidateWrite</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmShouldValidateWrite(boolean _shouldValidateWrite = shouldValidateWrite)
    {
        shouldValidateWrite = _shouldValidateWrite;

        return shouldValidateWrite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignOriginInfo</Name>
				<Source><![CDATA[
    private void assignOriginInfo()
    {
        if (assignOriginInfo)
        {
            WHSLoadTableAssignOriginInfo::newFromLoadTableAssignAfterAddingLines(loadTable).assign(AddRemove::Add);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assignTransTemplate</Name>
				<Source><![CDATA[
    private void assignTransTemplate()
    {
        if (assignTransTemplate)
        {
            loadTable.assignTransTemplate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAfterAddingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the load after all the lines are added. 
    /// </summary>
    public void updateAfterAddingLines()
    {
        this.assignOriginInfo();
        this.assignTransTemplate();
        
        if (shouldInitStatusFromShipments)
        {
            this.initLoadStatusFromRelatedShipments();
        }
        else
        {
            loadTable.assignStatusOnLoadLineUpdated();
        }
        
        if (shouldValidateWrite
            && !loadTable.validateWrite())
        {
            throw error(strFmt("@WAX:ErrorLoadBuildLoadStatus", loadTable.LoadId));
        }

        loadTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyOnLoadLineUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the load for the changes made to load details.
    /// </summary>
    /// <param name = "_loadLine">The load details used to modify the load.</param>
    /// <param name = "_origLoadLine">The orignal load details.</param>
    public void modifyOnLoadLineUpdate(
        WHSLoadLine _loadLine,
        WHSLoadLine _origLoadLine)
    {
        boolean changedQty = _origLoadLine.Qty            != _loadLine.Qty
                          || _origLoadLine.UOM            != _loadLine.UOM
                          || _origLoadLine.WorkCreatedQty != _loadLine.WorkCreatedQty;
        
        if (changedQty)
        {
            loadTable.assignStatusOnLoadLineUpdated();
        }

		// If the load line is being added to a new load then reassign origin information,
		// adjust the load weight for the new line, and make sure the earliest scheduled ship 
		// date and time is set.
        if (_loadLine.LoadId != _origLoadLine.LoadId)
        {
            assignOriginInfo = true; 
            loadTable.assignLoadWeightsForLoadLine(_loadLine, _loadLine.InventQty);
            loadTable.assignEarliestSchedShipDateTime(_loadLine.LoadReadyToShipUTCDateTime);
        }
		// If the load line is not being added to a new load and the quantity has been 
		// changed then adjust the load weight for the change in quantity.
        else if (changedQty)
        {
            loadTable.assignLoadWeightsForLoadLine(_loadLine, _loadLine.InventQty - _origLoadLine.InventQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyOnLoadLineInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modifies the load for the added load details.
    /// </summary>
    /// <param name = "_loadLine">The load details used to modify the load.</param>
    /// <param name = "_assignSchedShipDateTime">The earliest ship date and time.</param>
    public void modifyOnLoadLineInsert(
        WHSLoadLine _loadLine,
        boolean     _assignSchedShipDateTime)
    {
        loadTable.assignLoadWeightsForLoadLine(_loadLine, _loadLine.InventQty);

        // Update load status if currently loaded.
        if (loadTable.LoadStatus == WHSLoadStatus::Loaded)
        {
            loadTable.LoadStatus = WHSLoadStatus::InProcess;
        }

        if (!loadTable.InventLocationId 
            && !loadTable.InventSiteId)
        {
            // Update site and warehouse dimensions on load based on current load details, if not set.
            loadTable.assignSiteAndWarehouse(_loadLine.inventDim());
        }

        _loadLine.tmsSetCarrierOnOrigin(loadTable, false);

        if (_assignSchedShipDateTime)
        {
            loadTable.assignEarliestSchedShipDateTime(_loadLine.LoadReadyToShipUTCDateTime);
        }

        assignOriginInfo    = true;
        assignTransTemplate = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyAfterRemovingShipment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculate load attributes/fields after removal of the specified shipment from this load.
    /// </summary>
    /// <param name="_shipmentId">
    /// ShipmentId which was removed.
    /// </param>
    [Hookable(false)]
    internal void modifyAfterRemovingShipment(WHSShipmentId _shipmentId)
    {
        this.adjustLoadWeightsWhenRemovingShipment(_shipmentId);

        loadTable.assignOriginInfo(AddRemove::Remove);

        this.initLoadStatusFromRelatedShipments();

        loadTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLoadStatusFromRelatedShipments</Name>
				<Source><![CDATA[
    private void initLoadStatusFromRelatedShipments()
    {
        loadTable.LoadStatus = loadTable.findStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLoadWeightsWhenRemovingShipment</Name>
				<Source><![CDATA[
    private void adjustLoadWeightsWhenRemovingShipment(WHSShipmentId _shipmentId)
    {
        WHSLoadLine loadLine;

        while select loadLine
            where loadLine.ShipmentId == _shipmentId
        {
            loadTable.assignLoadWeightsForLoadLine(loadLine, -loadLine.InventQty);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>