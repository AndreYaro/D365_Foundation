<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSSourceOrderFullfillmentPolicyCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSSourceOrderFullfillmentPolicyCache</c> caches the data for the <c>WHSSourceOrderFullfillmentPolicy</c> table.
/// </summary>
internal final class WHSSourceOrderFullfillmentPolicyCache
{
    protected SysGlobalObjectCache sysGlobalObjectCache;
    private static str caller = strFmt('%1.%2', classStr(WHSSourceOrderFullfillmentPolicyCache), methodStr(WHSSourceOrderFullfillmentPolicyCache, isFulfillmentPolicyUsedForSalesOrders));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        sysGlobalObjectCache = classFactory.globalObjectCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSSourceOrderFullfillmentPolicyCache construct()
    {
        return new WHSSourceOrderFullfillmentPolicyCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFulfillmentPolicyUsedForSalesOrders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the fulfillment policy is used for sales orders.
    /// </summary>
    /// <returns>
    /// true if the fulfillment policy is used for sales orders; otherwise false
    /// </returns>
    public boolean isFulfillmentPolicyUsedForSalesOrders()
    {
        container cacheKey = this.makeCacheKey();
        container result   = sysGlobalObjectCache.find(this.cacheScope(), cacheKey);

        if (result == conNull())
        {
            result = this.isFulfillmentPolicyUsedForSourceOrderDocumentTypeNoCache(WHSSourceOrderDocumentType::SalesOrder);
            sysGlobalObjectCache.insert(this.cacheScope(), cacheKey, result);
        }
        
        if (conPeek(result, 1))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFulfillmentPolicyUsedForSourceOrderDocumentTypeNoCache</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected container isFulfillmentPolicyUsedForSourceOrderDocumentTypeNoCache(WHSSourceOrderDocumentType _sourceOrderDocumentType)
    {
        WHSSourceOrderFullfillmentPolicy whsSourceOrderFullfillmentPolicy;

        select firstonly RecId from whsSourceOrderFullfillmentPolicy
            where whsSourceOrderFullfillmentPolicy.SourceOrderDocumentType == _sourceOrderDocumentType;

        container result;

        if (whsSourceOrderFullfillmentPolicy.RecId)
        {
            result = [NoYes::Yes];
        }
        else
        {
            result = [NoYes::No];
        }
                    
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the entire cache.
    /// </summary>
    public void clearCache()
    {
        sysGlobalObjectCache.clear(this.cacheScope());
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheScope</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected GlobalObjectCacheScope cacheScope()
    {
        return classStr(WHSSourceOrderFullfillmentPolicyCache);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeCacheKey</Name>
				<Source><![CDATA[
    private container makeCacheKey()
    {
        return [WHSSourceOrderFullfillmentPolicyCache::caller, curExt()];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>