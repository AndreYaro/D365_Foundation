<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcConfigurationProductVariantDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PCConfigurationProductVariantDelete</c> class is the utility class responsible for deleting
/// unnecessary product variants created as part of a configuration session.
/// </summary>
class PcConfigurationProductVariantDelete
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes a product variant.
    /// </summary>
    /// <param name="_productMaster">
    /// The record ID of a product master.
    /// </param>
    /// <param name="_productVariant">
    /// The record ID of a product variant.
    /// </param>
    public void delete(RefRecId _productMaster, RefRecId _productVariant)
    {
        RefRecId                            productDimensionAttributeRecId;
        RefRecId                            dimensionTableRecId;
        RefRecId                            congfiguration;
        EcoResDistinctProductVariant        productVariantOrigin;
        EcoResProductMasterConfiguration    productMasterConfiguration;
        InventDimCombination                inventDimCombination;
        boolean                             firstCompany = true;

        ttsbegin;

        // delete released product variant for all companies
        while select forupdate crossCompany inventDimCombination
            where inventDimCombination.DistinctProductVariant == _productVariant
        {
            if (firstCompany)
            {
                dimensionTableRecId = EcoResConfiguration::findByName(inventDimCombination.inventDim().ConfigId).RecId;
                firstCompany = false;
            }

            changecompany(
                          inventDimCombination.company()
                          )
            {
                inventDimCombination.delete();
            }
        }

        //delete product variant
        productVariantOrigin = EcoResDistinctProductVariant::find(_productVariant, true);

        if (productVariantOrigin.validateDelete())
        {
            productVariantOrigin.delete();
        }

        // delete product master configuration value
        productDimensionAttributeRecId = EcoResProductDimensionAttribute::inventDimFieldId2DimensionAttributeRecId(fieldNum(InventDim, ConfigId));

        if (EcoResProductMasterConfiguration::existByProductConfiguration(_productMaster, productDimensionAttributeRecId, congfiguration))
        {
            delete_from productMasterConfiguration
                where productMasterConfiguration.ConfigProductMaster == _productMaster
                && productMasterConfiguration.ConfigProductDimensionAttribute == productDimensionAttributeRecId
                && productMasterConfiguration.Configuration == congfiguration;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCConfigurationProductVariantDelete construct()
    {
        return new PCConfigurationProductVariantDelete();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>