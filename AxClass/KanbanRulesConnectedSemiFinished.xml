<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanRulesConnectedSemiFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>KanbanRulesConnectedSemiFinished</c> class explores connected kanban rules until a rule is
/// encountered that does not receive or detect partially finished items.
/// </summary>
public class KanbanRulesConnectedSemiFinished extends KanbanRulesConnected
{
    KanbanRulesConnectedUpStreamSemi    kanbanRulesConnectedUpStreamSemi;
    KanbanRulesConnectedDownStreamSemi  kanbanRulesConnectedDownStreamSemi;
    boolean                             completedEnumerationUpStream;
    boolean                             completedEnumerationDownStream;
    boolean                             isUpStreamCurrent;
    boolean                             isDownStreamCurrent;
    int                                 levelCurrentUpStream;
    int                                 levelCurrentDownStream;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes class variables.
    /// </summary>
    public void init()
    {
        kanbanRulesConnectedUpStreamSemi   = KanbanRulesConnectedUpStreamSemi::newStandard(kanbanRuleRoot,itemId,inventDimId,dateTimeFrom,dateTimeTo,inventQty);
        kanbanRulesConnectedDownStreamSemi = KanbanRulesConnectedDownStreamSemi::newStandard(kanbanRuleRoot,itemId,inventDimId,dateTimeFrom,dateTimeTo,inventQty);

        kanbanRulesConnectedUpStreamSemi.init();
        kanbanRulesConnectedDownStreamSemi.init();

        levelTotal           = 0;
        completedCalculation = false;
        initialized          = true;

        this.initEnumeration();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEnumeration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes class variables that are used to enumerate connected kanban rules.
    /// </summary>
    public void initEnumeration()
    {
        kanbanRulesConnectedUpStreamSemi.initEnumeration();
        kanbanRulesConnectedDownStreamSemi.initEnumeration();

        levelCurrent                   = 0;
        levelTotal                     = 0;
        levelCurrentUpStream           = 0;
        levelCurrentDownStream         = 0;
        completedEnumeration           = false;
        completedEnumerationUpStream   = false;
        completedEnumerationDownStream = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDownStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current enumeration result is downstream of the root.
    /// </summary>
    /// <returns>
    /// true if the current enumeration is downstream of the root; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isDownStream()
    {
        return isDownStreamCurrent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the current enumeration result is upstream of the root.
    /// </summary>
    /// <returns>
    /// true if the current enumeration is upstream of the root; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isUpStream()
    {
        return isUpStreamCurrent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves to the next kanban rule in the result collection.
    /// </summary>
    /// <returns>
    ///    true if the next result exists; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Results are computed lazily by level. Upstream results are enumerated first, downstream results follow.
    ///    Results closer to the root come first. The root itself is not included in the result.
    /// </remarks>
    public boolean moveNext()
    {
        int     level;

        // reset current rule
        kanbanRuleCurrent   = null;
        isUpStreamCurrent   = false;
        isDownStreamCurrent = false;

        if (kanbanRuleRoot)
        {
            if (!initialized)
            {
                this.init();
            }

            while (   !completedEnumeration
                   && !kanbanRuleCurrent)
            {
                // upstream
                while (   !kanbanRuleCurrent
                       && !completedEnumerationUpStream)
                {
                    completedEnumerationUpStream = !kanbanRulesConnectedUpStreamSemi.moveNext();
                    if (!completedEnumerationUpStream)
                    {
                        kanbanRuleCurrent = kanbanRulesConnectedUpStreamSemi.kanbanRule();
                        if (kanbanRuleCurrent)
                        {
                            level             = kanbanRulesConnectedUpStreamSemi.level();
                            isUpStreamCurrent = true;
                            if (level != levelCurrentUpStream)
                            {
                                levelTotal++;
                                levelCurrentUpStream = level;
                                levelCurrent         = levelTotal;
                            }
                        }
                    }
                }

                // downstream
                while (   !kanbanRuleCurrent
                       && !completedEnumerationDownStream)
                {
                    completedEnumerationDownStream = !kanbanRulesConnectedDownStreamSemi.moveNext();
                    if (!completedEnumerationDownStream)
                    {
                        kanbanRuleCurrent = kanbanRulesConnectedDownStreamSemi.kanbanRule();
                        if (kanbanRuleCurrent)
                        {
                            level               = kanbanRulesConnectedDownStreamSemi.level();
                            isDownStreamCurrent = true;
                            if (level != levelCurrentDownStream)
                            {
                                levelTotal++;
                                levelCurrentDownStream = level;
                                levelCurrent           = levelTotal;
                            }
                        }
                    }
                }

                // enumeration
                completedEnumeration =    completedEnumerationUpStream
                                       && completedEnumerationDownStream;
            }
        }

        // calculation
        completedCalculation =    completedCalculation
                               || completedEnumeration;

        return kanbanRuleCurrent != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relativeLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the current relative level value.
    /// </summary>
    /// <returns>
    /// The current relative level; otherwise,<c>0</c>.
    /// </returns>
    /// <remarks>
    /// Use the method to retrieve the current level when enumerating the collection. The level indicates
    /// the distance between the root kanban rule and the current kanban rule.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int relativeLevel()
    {
        int result = 0;

        if (isUpStreamCurrent)
        {
            result = levelCurrentUpStream;
        }

        if (isDownStreamCurrent)
        {
            result = levelCurrentDownStream;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setConnectionParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the connection parameters.
    /// </summary>
    /// <param name="_kanbanRule">
    ///    The <c>KanbanRule</c> record that is used to set the connection parameters.
    /// </param>
    protected void setConnectionParameters(KanbanRule _kanbanRule)
    {
        // do nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static KanbanRulesConnectedSemiFinished construct()
    {
        return new KanbanRulesConnectedSemiFinished();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>KanbanRulesConnectedUpStreamSemi</c> object.
    /// </summary>
    /// <param name="_kanbanRuleRoot">
    /// The <c>KanbanRule</c> record that serves as a root to find connected rules.
    /// </param>
    /// <param name="_itemId">
    /// The item ID to find connected rules for.
    /// </param>
    /// <param name="_inventDimId">
    /// The product dimensions to find connected rules for.
    /// </param>
    /// <param name="_dateTimeFrom">
    /// The start date and time at which the connected rules are active.
    /// </param>
    /// <param name="_dateTimeTo">
    /// The end date and time at which the connected rules are active; optional.
    /// </param>
    /// <param name="_inventQty">
    /// The inventory quantity to find connected rules for; optional.
    /// </param>
    /// <returns>
    /// An instance of the <c>KanbanRulesConnectedSemiFinished</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static KanbanRulesConnectedSemiFinished newStandard(
        KanbanRule    _kanbanRuleRoot,
        ItemId        _itemId,
        InventDimId   _inventDimId,
        TransDateTime _dateTimeFrom,
        TransDateTime _dateTimeTo = _dateTimeFrom,
        InventQty     _inventQty  = 0)
    {
        KanbanRulesConnectedSemiFinished  kanbanRulesConnectedSemiFinished = KanbanRulesConnectedSemiFinished::construct();

        kanbanRulesConnectedSemiFinished.parmKanbanRuleRoot(_kanbanRuleRoot);
        kanbanRulesConnectedSemiFinished.parmItemId(_itemId);
        kanbanRulesConnectedSemiFinished.parmInventDimId(_inventDimId);
        kanbanRulesConnectedSemiFinished.parmDateTimeFrom(_dateTimeFrom);
        kanbanRulesConnectedSemiFinished.parmDateTimeTo(_dateTimeTo);
        kanbanRulesConnectedSemiFinished.parmInventQty(_inventQty);

        return kanbanRulesConnectedSemiFinished;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>