<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DeliverySlipTotals_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class intialize DeliverySlipTotals_BR for calculating the delivery slip totals extends TradeTotals class.
/// </summary>
abstract class  DeliverySlipTotals_BR extends TradeTotals
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total discount amount from the custparameters table.
    /// </summary>
    /// <returns>
    /// Returns the total discount amount from the custparameters table.
    /// </returns>
    public DiscAmount cashDiscAmount()
    {
        totalCashDisc = CustParameters::cashDiscAmount(this.cashDiscCode(), this.currencyCode(), this.totalAmount(),
                                                           this.totalAmount() - this.totalTaxAmount(),
                                                           this.cashDiscPercent());

        return totalCashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashDiscDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the date  from the custparameters table.
    /// </summary>
    /// <returns>
    /// Returns the date from the custparameters table.
    /// </returns>
    public DiscDate  cashDiscDate()
    {
        return CustParameters::cashDiscDate(this.cashDiscCode(), this.documentDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLineQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for current order line.
    /// </summary>
    /// <returns>
    /// The query for current order line.
    /// </returns>
    protected TradeTotalsIQueryRun createLineQueryRun()
    {
        return TradeTotalsCommonEnumerator::newFromCommonEnumerator(
                this.parmEnumerableFactory().createLineEnumerableProvider().lineEnumerable(this.parmContract()).getEnumerator());
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the maximum credit for the customer.
    /// </summary>
    /// <returns>
    /// Returns the maximum credit for the customer.
    /// </returns>
    public AmountMST  creditMax()
    {
        return CustTable::creditMax(this.invoiceAccount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the item module type.
    /// </summary>
    /// <returns>
    /// The item module type for the order.
    /// </returns>
    protected ModuleInventPurchSales itemModuleType()
    {
        return ModuleInventPurchSales::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunGet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the query for current order line.
    /// </summary>
    /// <param name="_lineQueryRun">
    /// TradeTotalsIQueryRun is set.
    /// </param>
    /// <returns>
    /// The query for current order line.
    /// </returns>
    protected Common lineQueryRunGet(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsCommonEnumerator lineQueryRun = _lineQueryRun as TradeTotalsCommonEnumerator;
        return lineQueryRun.parmCommonEnumerator().current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the query for next order line.
    /// </summary>
    /// <param name="_lineQueryRun">
    /// TradeTotalsIQueryRun is set.
    /// </param>
    /// <returns>
    /// The query for next order line.
    /// </returns>
    protected boolean lineQueryRunNext(
        TradeTotalsIQueryRun    _lineQueryRun)
    {
        TradeTotalsCommonEnumerator lineQueryRun = _lineQueryRun as TradeTotalsCommonEnumerator;
        return lineQueryRun.parmCommonEnumerator().moveNext();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContract</Name>
				<Source><![CDATA[
        abstract protected TradeTotalsIContract parmContract()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyRemain</Name>
				<Source><![CDATA[
        protected PdsCWInventQty pdsCWQtyRemain()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Total CW inventory qty.
    /// </summary>
    /// <returns>CW quantity.</returns>
    protected PdsCWInventQty pdsCWQtyUnit()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOff</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the round-off amount for sales.
    /// </summary>
    /// <param name="_currencyCode">
    /// The <c>CurrencyCode</c> field for the current order line.
    /// </param>
    /// <returns>
    /// The <c>RoundOff</c> field that is defined for sales on the <c>Currency</c> table.
    /// </returns>
    protected RoundOff roundOff(CurrencyCode _currencyCode)
    {
        return Currency::roundOffSales(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the rounding form for sales.
    /// </summary>
    /// <param name="_currencyCode">
    /// The <c>CurrencyCode</c> field for the current order line.
    /// </param>
    /// <returns>
    /// The <c>RoundOffType</c> field that is defined for sales on the <c>Currency</c> table.
    /// </returns>
    protected RoundOffType roundOffType(CurrencyCode _currencyCode)
    {
        return Currency::roundOffTypeSales(_currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLineRecId</Name>
				<Source><![CDATA[
    protected recId sourceLineRecId()
    {
        SalesParmLine   salesParmLine;
        if (orderline.TableId == tablenum(SalesParmLine))
        {
            salesParmLine = orderline;
            return salesParmLine.SalesLineRecId;
        }

        return orderLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayFieldsServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates totals and sets the fields values to be shown on the totals form.
    /// </summary>
    /// <param name="_salesParmTable">
    /// The order table to calculate totals for.
    /// </param>
    /// <param name="_specQty">
    /// Quantity to calculate totals for.
    /// </param>
    /// <param name="_currencyCode">
    /// Currency code to calculate totals for.
    /// </param>
    /// <returns>
    /// Container of the field values to be shown on the totals form.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public container displayFieldsServer(SalesParmTable _salesParmTable, SalesUpdate _specQty, CurrencyCode _currencyCode)
    {
        container               resultContainer;
        DeliverySlipTotals_BR   totals;
        CurrencyCode            currencyCodeForCalculation;

        totals = DeliverySlipTotals_BR::construct(_salesParmTable, _specQty, AccountOrder::None, _salesParmTable.ParmId, '', _salesParmTable.Ordering);

        currencyCodeForCalculation = _currencyCode ? _currencyCode : totals.currencyCode();

        totals.calc();

        resultContainer = totals.displayFieldsCurrency(currencyCodeForCalculation);

        return resultContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>DeliverySlipTotals_DeliverySlip_BR</c> class.
    /// </summary>
    /// <param name="_orderTable">
    /// Common is set.
    /// </param>
    /// <param name="_specQty">
    /// Quantity value is set.
    /// </param>
    /// <param name="_sumBy">
    /// AccountOrder value is set.
    /// </param>
    /// <param name="_parmId">
    /// ParmId value is set.
    /// </param>
    /// <param name="_sumSalesId">
    /// SalesId value is set.
    /// </param>
    /// <param name="_documentStatus">
    /// DocumentStatus value is set.
    /// </param>
    /// <returns>
    /// An instance of the <c>DeliverySlipTotals_DeliverySlip_BR</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static DeliverySlipTotals_BR construct(Common           _orderTable,
                                           SalesUpdate      _specQty       = SalesUpdate::All,
                                           AccountOrder     _sumBy         = AccountOrder::None,
                                           ParmId           _parmId        = '',
                                           SalesId          _sumSalesId    = '',
                                           DocumentStatus   _documentStatus= DocumentStatus::None)
    {
        switch (_orderTable.TableId)
        {
            case tableNum(SalesTable)       :   return DeliverySlipTotals_DeliverySlip_BR::construct(_orderTable, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
            case tableNum(SalesParmTable)   :   return DeliverySlipTotals_DeliverySlip_BR::construct(_orderTable, _specQty, _sumBy, _parmId, _sumSalesId, _documentStatus);
        }
        throw(error(strFmt("@SYS19306", funcName())));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>