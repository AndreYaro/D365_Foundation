<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxFiscalDocumentPostJob_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Performs the posting of a tax fiscal document.
/// </summary>
class TaxFiscalDocumentPostJob_BR extends RunBaseBatch implements BatchRetryable
{
    QueryRun                        queryRun;
    NoYes                           printOut;
    Printout                        printOutWhen;
    NoYes                           proforma;
    NumberSeq                       numberSeq;
    Tax                             tax;
    TaxFiscalDocument_BR            taxFiscalDocument;
    TaxFiscalDocumentLine_BR        taxFiscalDocumentLine;
    NoYes                           creditNote;
    Num                             number;
    Voucher                         voucher;
    TaxFiscalDocument_BR            fiscalDocumentTax;
    LedgerVoucher                   ledgerVoucher;
    boolean                         storno;
    RecordSortedList                journalList;
    TaxFiscalDocumentCalcTax_BR     fiscalDocumentCalcTax;
    TaxFiscalDocumentTotals_BR      fiscalDocumentTotals;


    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
        printOut,
        printOutWhen,
        proforma
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Allocates invoice and voucher numbers according to the type of document being posted (outgoing/incoming)
    ///     and to the regular/cancel condition
    /// </summary>
    /// <remarks>
    ///     Number sequence references are retrieved from the number sequence group references associated with the fiscal document type
    /// </remarks>
    /// <returns>
    ///     NumberSeq instance that will be used to retrieve the invoice and voucher number for the fiscal document being posted
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected NumberSeq allocateNumAndVoucher()
    {
        boolean                 voucherEqualsNumber;
        RefRecId                numNumberSeqCode;
        RefRecId                voucherNumberSeqCode;

        if (this.isDocumentBeingIssued())
        {
            if (creditNote)
            {
                numNumberSeqCode = this.getNumSeqCodeForReference(CustParameters::numRefCustCreditNoteId());

                if (CustParameters::numRefCustCreditNoteVoucher().AllowSameAs)
                {
                    voucherEqualsNumber  = true;
                    voucherNumberSeqCode = numNumberSeqCode;
                }
                else
                {
                    voucherNumberSeqCode = this.getNumSeqCodeForReference(CustParameters::numRefCustCreditNoteVoucher());
                }
            }
            else
            {
                numNumberSeqCode = FiscalDocumentType_BR::getFiscalDocumentNumberSequence(taxFiscalDocument.FiscalDocumentType).RecId;

                if (CustParameters::numRefCustInvoiceVoucher().AllowSameAs)
                {
                    voucherEqualsNumber  = true;
                    voucherNumberSeqCode = numNumberSeqCode;
                }
                else
                {
                    voucherNumberSeqCode = this.getNumSeqCodeForReference(CustParameters::numRefCustInvoiceVoucher());
                }
            }
        }
        else
        {
            if (creditNote)
            {
                voucherNumberSeqCode = this.getNumSeqCodeForReference(PurchParameters::numRefPurchCreditNoteVoucher());
            }
            else
            {
                voucherNumberSeqCode = this.getNumSeqCodeForReference(PurchParameters::numRefPurchInvoiceVoucher());
            }
        }

        if (voucherNumberSeqCode)
        {
            if (numNumberSeqCode)
            {
                numberSeq = NumberSeq::newGetNumAndVoucherFromId(numNumberSeqCode,
                                                                 voucherNumberSeqCode,
                                                                 voucherEqualsNumber);
            }
            else
            {
                numberSeq = NumberSeq::newGetVoucherFromId(voucherNumberSeqCode);
            }
        }

        if (!numberSeq)
        {
            numberSeq = new NumberSeq();
        }

        return numberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeCreditnote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the document being posted be a credit note.
    /// </summary>
    /// <returns>
    /// true if the document can be a credit note; false otherwise.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean canBeCreditnote()
    {
        return taxFiscalDocument.Status == TaxFiscalDocumentStatus_BR::Open;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether a <c>TaxFiscalDocument_BR</c> can be posted.
    /// </summary>
    /// <param name="_taxFiscalDocument">
    /// Tax fiscal document to be validated.
    /// </param>
    /// <returns>
    /// true if document can be posted; false otherwise.
    /// </returns>
    /// <remarks>
    /// Error messages are generated with CheckFailed when appropriate.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canPost(TaxFiscalDocument_BR _taxFiscalDocument)
    {
        boolean ret = true;
        LogisticsPostalAddress feAddr, thirdPartyAddr;

        if (!BrazilParameters::find().FiscalDocumentItemId)
        {
            ret = checkFailed("@GLS220449");
        }

        if (_taxFiscalDocument.TaxFiscalDocumentType == TaxFiscalDocumentType_BR::ICMSTaxTransfer)
        {
            feAddr = FiscalEstablishment_BR::findById(_taxFiscalDocument.FiscalEstablishmentId).postalAddress();
            thirdPartyAddr = LogisticsPostalAddress::findRecId(_taxFiscalDocument.LogisticsPostalAddress);

            if (thirdPartyAddr.State != feAddr.State)
            {
                ret = checkFailed("@GLS220408");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalDocumentCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new <c>TaxFiscalDocumentCalcTax_BR</c> for a given tax fiscal document.
    /// </summary>
    /// <param name="_taxFiscalDocument">
    /// <c>TaxFiscalDocument_BR</c> to instantiate a <c>TaxFiscalDocumentCalcTax_BR</c> from.
    /// </param>
    /// <returns>
    /// A new <c>TaxFiscalDocumentCalcTax_BR</c> for the given document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxFiscalDocumentCalcTax_BR createFiscalDocumentCalcTax(TaxFiscalDocument_BR _taxFiscalDocument)
    {
        return TaxFiscalDocumentCalcTax_BR::construct(_taxFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFiscalDocumentTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new <c>TaxFiscalDocumentTotals_BR</c> for the current document.
    /// </summary>
    /// <returns>
    /// A new <c>TaxFiscalDocumentTotals_BR</c> for this document.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxFiscalDocumentTotals_BR createFiscalDocumentTotals()
    {
        return TaxFiscalDocumentTotals_BR::construct(taxFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the fiscal document order into valid journals (FiscalDocJour/Trans entries).
    ///     Here is the place where the TradeTotals instance is created.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createJournal()
    {
        ttsbegin;

        fiscalDocumentTotals = this.createFiscalDocumentTotals();
        this.initFromFiscalDocumentTotals();

        if (proforma)
            this.insertProforma();
        else
            this.insertJournal();

        if (printOutWhen == Printout::Current)
            this.printJournal();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = Dialog::newFormnameRunbase(formStr(TaxFiscaldocumentPost_BR), this);

        dialog.caption("@GLS63548");
        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatInvoiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Formats the brazilian invoice number.
    /// </summary>
    /// <remarks>
    ///     When the sequence number is defined with a prefix being equals to the fiscal document serires number,
    ///     the prefix is taken off from the final invoice number
    /// </remarks>
    /// <returns>
    ///     The invoice number formatted without the series information
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Num formatInvoiceNumber()
    {
        if (this.hasSeriesAsPrefix()
            && strStartsWith(number, taxFiscalDocument.Series))
        {
            return strDel(number, 0, strLen(taxFiscalDocument.Series));
        }

        return number;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>SysLastValue</c> record for this user and object.
    /// </summary>
    /// <remarks>
    /// This is a customization of the standard SysLastValues functionality and is required to support the split
    /// implementation of serializing (via pack and unpack) and persisting user input (SysLastValue).
    /// </remarks>
    public void getLast()
    {
        container packedValues;

        // Don't make the call to super as the #CurrentList and #SysLastValues lists are different,
        // requiring that we have specialized logic for the SysLastValues implementation.
        // super();

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        getLastCalled   = true;
        inGetSaveLast   = true;

        // Restore the pertinent values from the SysLastValue table.
        packedValues = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                               this.lastValueUserId(),
                                               this.lastValueType(),
                                               this.lastValueElementName(),
                                               this.lastValueDesignName());

        // This is a RunBaseBatch class. Manually restore the user's settings on the batch tab since
        // super() is not being called.
        xSysLastValue::getLast(this.batchInfo());

        // The following fields must be maintained to mimic the functionality of the overriden
        // method.
        inGetSaveLast = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number and voucher IDs for this document.
    /// </summary>
    /// <returns>
    /// A container with the number in the first position and the voucher in the second.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getNumAndVoucher()
    {
        if (this.isDocumentBeingIssued())
        {
            return numberSeq.numAndVoucher();
        }
        else
        {
            return ["", numberSeq.voucher()];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumSeqCodeForReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the number sequence code from a given reference and group.
    /// </summary>
    /// <param name="_numberSequenceReference">
    /// Number sequence reference to retrieve the code from.
    /// </param>
    /// <param name="_numberSequenceGroupId">
    /// The group ID to retrieve the code from; optional.
    /// </param>
    /// <returns>
    /// <c>RefRecId</c> of the number sequence code.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RefRecId getNumSeqCodeForReference(NumberSequenceReference _numberSequenceReference, NumberSequenceGroupId _numberSequenceGroupId = "")
    {
        RefRecId numberSequenceCode;
        RefRecId           scopeId = NumberSeqScopeFactory::createDefaultScope().getId();

        numberSequenceCode = NumberSequenceGroupRef::findNaturalKey(_numberSequenceReference.NumberSequenceDatatype, scopeId, _numberSequenceGroupId).NumberSequenceId;

        if (!numberSequenceCode)
        {
            numberSequenceCode = NumberSequenceReference::findNaturalKey(_numberSequenceReference.NumberSequenceDatatype, scopeId).NumberSequenceId;
        }

        return numberSequenceCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReversedFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>TaxFiscalDocument_BR</c> record, if it exists, that was reversed by
    /// the document being posted.
    /// </summary>
    /// <returns>
    /// If this is a cancel scenario, returns the original <c>TaxFiscalDocument_BR</c> record; otherwise it returns an empty buffer.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxFiscalDocument_BR getReversedFiscalDocument()
    {
        TaxFiscalDocument_BR           fiscalDocTableToBeReversed;

        if (taxFiscalDocument.TaxFiscalDocToCancelRecID)
        {
            fiscalDocTableToBeReversed = TaxFiscalDocument_BR::findRecId(taxFiscalDocument.TaxFiscalDocToCancelRecID);
        }

        return fiscalDocTableToBeReversed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasSeriesAsPrefix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the series is a prefix of the document number.
    /// </summary>
    /// <returns>
    /// true if the series is a prefix of the number; false otherwise.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean hasSeriesAsPrefix()
    {
        str numberSequenceFormat;

        numberSequenceFormat = NumberSequenceTable::findByNaturalKey(numberSeq.parmNumberSequenceCode()).Format;
        return strScan(numberSequenceFormat, taxFiscalDocument.Series, 0, strLen(taxFiscalDocument.Series));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromFiscalDocumentTotals</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs initialization based on the class variable FiscalDocumentTotals_BR
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromFiscalDocumentTotals()
    {
        fiscalDocumentTotals.prepareTotalAmountCalculation();
        fiscalDocumentTotals.prepareQuantitiesCalculation();
        this.tax(fiscalDocumentTotals.tax());

        if (this.canBeCreditnote() && fiscalDocumentTotals.totalAmount() < 0)
        {
            creditNote = true;
        }
        else
        {
            creditNote = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///     initializes the LedgerVoucher instance passing the necessary information into the classe's constructor
    /// </summary>
    /// <remarks>
    ///     Adds a instance of <c>LedgerVoucherObject</c> into the just created LedgerVoucher instance to represent the tax transaction to be posted
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initLedgerVoucher()
    {
        LedgerVoucherObject ledgerVoucherObject;

        ledgerVoucher       = LedgerVoucher::newLedgerPost(DetailSummary::Summary, SysModule::Tax, numberSeq.parmVoucherSequenceCode());
        ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher, taxFiscalDocument.InvoiceDate, SysModule::Tax, LedgerTransType::Tax, (creditNote ? storno : NoYes::No));
        ledgerVoucher.addVoucher(ledgerVoucherObject);

        ledgerVoucherObject.lastTransTxt(this.getLedgerTransactionTxt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the posting parameters.
    /// </summary>
    /// <param name="_printOutWhen">
    /// Printout setting for the posting.
    /// </param>
    /// <param name="_proforma">
    /// Whether this posting is a proforma.
    /// </param>
    /// <param name="_printNoYes">
    /// Whether to print the fiscal document.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initParameters(Printout             _printOutWhen       = Printout::Current,
                               NoYes                _proforma           = NoYes::Yes,
                               NoYes                _printNoYes         = NoYes::Yes)
    {
        this.parmPrintOutWhen(_printOutWhen);
        this.parmProforma(_proforma);
        this.parmPrintOut(_printNoYes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the number sequence object that will be used to determine invoice and voucher numbers for the posted document
    ///     and calls the updateNow method, which will perform the actual posting into the fiscal document related tables
    /// </summary>
    /// <remarks>
    ///     Aquisition of numbers from number sequence object requires the presence of a transaction level major than 1. This is why we
    ///     have a transaction surrounding this operation
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertJournal()
    {
        ttsbegin;

        numberSeq = this.allocateNumAndVoucher();

        [number, voucher] = this.getNumAndVoucher();

        if (!this.updateNow())
        {
            throw error("@SYS21533");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProforma</Name>
				<Source><![CDATA[
    /// <summary>
    ///     inserts lines into the fiscal document tables in preparation to the issue of proforma document
    /// </summary>
    /// <remarks>
    ///     the taxes are calculated but not posted into the transaction/ledger tables. This is why the postTax method
    ///     is called by passing false as a parameter
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertProforma()
    {
        ttsbegin;

        // This line updates the invoice lines with the tax code and tax amount but does not post the tax since it is only a proforma invoice.
        this.postTax(false);

        this.postFiscalDocument();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDocumentBeingIssued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this tax document is being issued by the fiscal establishment.
    /// </summary>
    /// <returns>
    /// True if the tax fiscal document is being issued by the fiscal establishment, false otherwise.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isDocumentBeingIssued()
    {
        return TaxFiscalDocument_BR::isDocumentBeingIssued(taxFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a record sorted list of fiscal documents being posted by this batch process.
    /// </summary>
    /// <returns>
    ///     The constructed record sorted list.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RecordSortedList  newJournalList()
    {
        RecordSortedList  recordSortedList;

        recordSortedList = new RecordSortedList(tableNum(TaxFiscalDocument_BR));
        recordSortedList.sortOrder(fieldNum(TaxFiscalDocument_BR, RecId));

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintOut</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes parmPrintOut(NoYes _printOut = printOut)
    {
        printOut = _printOut;
        return printOut;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintOutWhen</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Printout parmPrintOutWhen(Printout _printOutWhen = printOutWhen)
    {
        printOutWhen = _printOutWhen;

        return printOutWhen;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProforma</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NoYes parmProforma(NoYes _proforma = proforma)
    {
        proforma = _proforma;

        return proforma;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxFiscalDocument_BR parmSourceTable(TaxFiscalDocument_BR _fiscalDocTable = taxFiscalDocument)
    {
        taxFiscalDocument = _fiscalDocTable;

        return taxFiscalDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post a fiscal document journal based on the taxFiscalDocumentJour.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postFiscalDocument()
    {
        FiscalDocumentPost_BR fiscalDocumentPost;
        TaxFiscalDocument_BR taxDocumentToCancel;

        if (!taxFiscalDocument.TaxFiscalDocToCancelRecID)
        {
            fiscalDocumentPost = new FiscalDocumentPost_BR(FiscalDocumentParmDataCreator_BR::fromTaxTransferDocument(taxFiscalDocument));
            fiscalDocumentPost.run();
        }
        else
        {
            taxDocumentToCancel = TaxFiscalDocument_BR::findRecId(taxFiscalDocument.TaxFiscalDocToCancelRecID);
            FiscalDocumentPost_BR::cancelFiscalDocument(FiscalDocument_BR::findByRef(taxDocumentToCancel.TableId, taxDocumentToCancel.RecId),
                                                        taxFiscalDocument.Voucher,
                                                        taxFiscalDocument.InvoiceDate,
                                                        '',
                                                        ReasonTableRef::find(taxFiscalDocument.CancelReason).ReasonComment);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the offset account of the tax transfer transaction. This is the transaction
    ///     that represents the liability or asset accoung that was configured at the customer or vendor posting profile
    ///      in order to get the tax transfer offset ledger transactions
    /// </summary>
    /// <remarks>
    ///     Uses the account defined at TaxFiscalDocument_BR.LedgerAccountOffset field.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postOffsetAccount()
    {
        CurrencyExchangeHelper currencyExchangeHelper;
        LedgerVoucherTransObject voucherTransObjectOffset;
        int sign;

        if (taxFiscalDocument.Direction == FiscalDocDirection_BR::Outgoing)
        {
            sign = 1;
        }
        else
        {
            sign = -1;
        }

        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), taxFiscalDocument.InvoiceDate);

        voucherTransObjectOffset = LedgerVoucherTransObject::newBasicDefault(ledgerVoucher.findLedgerVoucherObject(),
                                                                             LedgerPostingType::Tax,
                                                                             LedgerDimensionFacade::serviceCreateLedgerDimension(taxFiscalDocumentLine.getLedgerDimensionOffset(), taxFiscalDocument.DefaultDimension),
                                                                             taxFiscalDocument.CurrencyCode,
                                                                             sign * fiscalDocumentTotals.totalAmount(),
                                                                             sign * currencyExchangeHelper.calculateTransactionToAccounting(taxFiscalDocument.CurrencyCode, fiscalDocumentTotals.totalAmount(), true),
                                                                             sign * currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(taxFiscalDocument.CurrencyCode, fiscalDocumentTotals.totalAmount()));
        voucherTransObjectOffset.parmTransferLevel(LedgerDetailLevel::Detail);

        ledgerVoucher.addTrans(voucherTransObjectOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Posts the taxes transactions and corresponding general ledger entries
    /// </summary>
    /// <param name="post">
    ///     boolean value indicating whether the actual tax and ledger voucher transactions should be generated.
    ///     false is passed in cases when the proforma document is being used
    /// </param>
    /// <remarks>
    ///     The ledger transaction for the ledger account associated with the tax is done by the FiscalDocumentCalcTax instance.
    ///     The ledger transaction for the liability/asset account configured in the customer/vendor posting profile is done by the postOffsetAccount() method
    ///     which is called at the end of this method
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postTax(boolean post = true)
    {
        fiscalDocumentCalcTax = this.createFiscalDocumentCalcTax(taxFiscalDocument);
        fiscalDocumentCalcTax.tax(this.tax());
        fiscalDocumentCalcTax.post(ledgerVoucher, post);

        if (post)
        {
            this.postOffsetAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printerSettingsFormletter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a container with the data related to the printer settings usually present in the FormLetter forms
    /// </summary>
    /// <param name="_originalCopy">
    /// <c>PrintSetupOriginalCopy</c> enum indicating whether the settings are for original or copy printings
    /// </param>
    /// <returns>
    /// Container with the printer settings
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    container printerSettingsFormletter(PrintSetupOriginalCopy _originalCopy = PrintSetupOriginalCopy::Original)
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the journal.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void printJournal()
    {
        if (proforma)
        {
            this.removeProforma();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeJournalFromList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the document from the journal list.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void removeJournalFromList()
    {
        journalList.del(taxFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeProforma</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Removes the information written to the FiscalDocJour table and its children tables during the proforma process
    /// </summary>
    /// <remarks>
    ///     Tables that are children from FiscalDocJour are also deleted. This deletion is controlled by the
    ///     delete actions defined for the FiscalDocJour table.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void removeProforma()
    {
        ttsbegin;

        if (numberSeq)
        {
            numberSeq.abort();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Starts the posting process for each fiscal document returned by the query held in the queryRun object
    /// </summary>
    /// <remarks>
    ///     Controls whether the documents will be printed during (Printout::Current) or after (Printout::After) the posting
    /// </remarks>
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00071, funcName());

        #OCCRetryCount
        Counter    infoLogCounter = infolog.num();
        Counter    progressCounter;
        Counter    progressTotal;

        void progressUpdate(str text)
        {
            progressCounter++;
            progress.setCount(progressCounter);
            progress.setText(text);
        }

        if (printOutWhen == Printout::After)
        {
            journalList = this.newJournalList();
        }

        progressTotal = SysQuery::countLoops(queryRun);
        this.progressInit("@SYS25781", progressTotal, #AviFormLetter);
        progress.setText("@SYS26577");
        setPrefix("@SYS25781");

        while (queryRun.next())
        {
            taxFiscalDocument = queryRun.get(tableNum(TaxFiscalDocument_BR));

            setPrefix(#PreFixField(taxFiscalDocument, RecId));

            if (this.canPost(taxFiscalDocument))
            {
                if (printOutWhen == Printout::Current)
                {
                    journalList = this.newJournalList();
                }

                this.createJournal();
            }

            progressUpdate(strFmt("@SYS26938",
                                  taxFiscalDocument.AccountNum,
                                  taxFiscalDocument.InvoiceDate));
        }

        if (printOutWhen == Printout::After)
        {
            this.printJournal();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves or sets the <c>Tax</c> instance.
    /// </summary>
    /// <param name="_tax">
    /// The <c>Tax</c> instance to be set; optional.
    /// </param>
    /// <returns>
    /// The current <c>Tax</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Tax tax(Tax _tax = tax)
    {
        tax = _tax;
        return tax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer                 version = RunBase::getVersion(packedClass);
        container               packedQueryRun;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQueryRun] = packedClass;
                break;
            default:
                return false;
        }

        if (packedQueryRun)
        {
            //Re-initialize the queryRun object from the packed queryRun.
            queryRun = new QueryRun(packedQueryRun);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Orchestrates the posting process. Acts as a template method describing all the actions
    ///     that must be performed during a fiscal document posting
    /// </summary>
    /// <returns>
    ///     true indicating that something was actually posted. False otherwise (no lines found to be posted, for example)
    /// </returns>
    /// <remarks>
    ///     This method also updates the originating order records (taxFiscalDocument/taxFiscalDocumentLine entries)
    ///     making them with status posted
    /// </remarks>
    /// <exception cref="Exception::Error">
    ///     throws when there is a validation error in the fiscal document trying to be posted
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean updateNow()
    {
        this.initLedgerVoucher();

        while select forupdate taxFiscalDocumentLine
            where taxFiscalDocumentLine.TaxFiscalDocument == taxFiscalDocument.RecId
        {
            this.postTax();
        }

        if (!this.isResolutionEnabled())
        {
            ledgerVoucher.end();
        }

        taxFiscalDocument.selectForUpdate(true);

        if (this.isDocumentBeingIssued())
        {
            taxFiscalDocument.Series          = FiscalDocumentType_BR::getFiscalDocumentSeries(taxFiscalDocument.FiscalDocumentType);
            taxFiscalDocument.InvoiceNumber   = this.formatInvoiceNumber();
        }

        taxFiscalDocument.Voucher         = voucher;
        taxFiscalDocument.TotalAmount     = fiscalDocumentTotals.totalAmount();
        taxFiscalDocument.Status          = TaxFiscalDocumentStatus_BR::Posted;
        taxFiscalDocument.update();

        this.postFiscalDocument();

        this.updateReversalFiscalDocTable(taxFiscalDocument);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the query for a given tax fiscal document.
    /// </summary>
    /// <param name="_fiscalDocTable">
    /// <c>TaxFiscalDocument_BR</c> to be included in the query.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateQueryBuild(TaxFiscalDocument_BR _fiscalDocTable)
    {
        Query                   query;
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;

        query = new Query();
        queryBuildDataSource = query.addDataSource(tableNum(TaxFiscalDocument_BR));

        queryBuildRange = queryBuildDataSource.addRange(fieldNum(TaxFiscalDocument_BR, RecId));
        queryBuildRange.value(queryValue(_fiscalDocTable.RecId));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReversalFiscalDocTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the reversed tax fiscal document record.
    /// </summary>
    /// <param name="_fiscalDocTable">
    /// The document reversing the original tax fiscal document.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateReversalFiscalDocTable(TaxFiscalDocument_BR _fiscalDocTable)
    {
        TaxFiscalDocument_BR   originalFiscalDocTable;

        if (_fiscalDocTable.TaxFiscalDocToCancelRecID)
        {
            ttsbegin;
            originalFiscalDocTable = TaxFiscalDocument_BR::findRecId(_fiscalDocTable.TaxFiscalDocToCancelRecID, true);
            originalFiscalDocTable.Status = TaxFiscalDocumentStatus_BR::Canceled;
            originalFiscalDocTable.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePrintManagement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or gets whether print management should be used.
    /// </summary>
    /// <param name="_usePrintManagement">
    /// Specifies whether print management should be used; optional.
    /// </param>
    /// <returns>
    /// true if print management will be used; false otherwise.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    boolean  usePrintManagement(boolean _usePrintManagement = false)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static TaxFiscalDocumentPostJob_BR construct()
    {
        return new TaxFiscalDocumentPostJob_BR();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        TaxFiscalDocumentPostJob_BR fiscalDocPostJob;
        TaxFiscalDocument_BR        taxFiscalDocument;

        if (args && args.caller())
        {
            taxFiscalDocument = args.record();
        }

        fiscalDocPostJob = TaxFiscalDocumentPostJob_BR::construct();

        if (taxFiscalDocument)
        {
            fiscalDocPostJob.updateQueryBuild(taxFiscalDocument);
        }

        if (fiscalDocPostJob.prompt())
        {
            fiscalDocPostJob.runOperation();
        }

        TaxFiscalDocumentPostJob_BR::refreshFormData(taxFiscalDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshFormData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh the form data.
    /// </summary>
    /// <param name="_fiscalDocTable">
    /// <c>TaxFiscalDocument_BR</c> from a form's data source.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void refreshFormData(TaxFiscalDocument_BR _fiscalDocTable)
    {
        TaxFiscalDocument_BR   fiscalDocTableLocal;
        Object              fiscalDocTable_ds = FormDataUtil::isFormDataSource(_fiscalDocTable) ? FormDataUtil::getFormDataSource(_fiscalDocTable) : null;

        fiscalDocTableLocal.data(_fiscalDocTable);

        if (_fiscalDocTable && fiscalDocTable_ds)
        {
            fiscalDocTable_ds.executeQuery();
            fiscalDocTable_ds.findRecord(fiscalDocTableLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isResolutionEnabled</Name>
				<Source><![CDATA[
    private boolean isResolutionEnabled()
    {
        boolean ret;

        if (taxFiscalDocument.TaxFiscalDocumentType == TaxFiscalDocumentType_BR::ICMSTaxTransfer)
        {
            LogisticsPostalAddress establishmentPostalAddress = FiscalEstablishment_BR::findById(taxFiscalDocument.FiscalEstablishmentId).postalAddress();
            ret = FBParametersPerState_BR::find(establishmentPostalAddress).EnableDocumentAdjustment;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransactionTxt</Name>
				<Source><![CDATA[
    private TransactionTextLarge getLedgerTransactionTxt()
    {
        TransactionTxt transactionTxt = TransactionTxt::construct();
        transactionTxt.setType(LedgerTransTxt::TaxFiscalDocument);
        transactionTxt.setVoucher(voucher);
        transactionTxt.setDate(taxFiscalDocument.InvoiceDate);
        transactionTxt.setFormLetter(this.formatInvoiceNumber());

        return transactionTxt.txt();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>