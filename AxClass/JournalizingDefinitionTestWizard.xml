<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalizingDefinitionTestWizard</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalizingDefinitionTestWizard</c> class is used as a helper class for the
///    JournalizingDefinitionTestWizard form.
/// </summary>
public class JournalizingDefinitionTestWizard extends SysWizard
{
    JournalizingDefinitionId        journalizingDefinitionId;
    JournalizingDefinitionEngine    journalizingDefinitionEngine;
    TransDate                       transDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableNext</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the Next button is enabled.
    /// </summary>
    /// <param name="_ledgerDimensionAccount">
    ///    The ledger dimension account entered by the user on the wizard form.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date entered by the user on the wizard form.
    /// </param>
    /// <param name="_amount">
    ///    The amount entered by the user on the wizard form.
    /// </param>
    /// <param name="_debitCredit">
    ///    The debit or credit sign entered by the user on the wizard form.
    /// </param>
    public void enableNext(LedgerDimensionAccount               _ledgerDimensionAccount,
                           TransDate                            _transDate,
                           Amount                               _amount,
                           JournalizingDefinitionDebitCredit    _debitCredit)
    {
        this.nextEnabled(_ledgerDimensionAccount && _amount, this.curTab(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the form name of the helper class.
    /// </summary>
    /// <returns>
    /// The form name of the helper class.
    /// </returns>
    formName formName()
    {
        return formstr(JournalizingDefinitionTestWizard);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Passes data as input into the posting engine and retrieves the generated result.
    /// </summary>
    /// <param name="_ledgerDimensionAccount">
    ///    The ledger dimension account selected by the user on the wizard form.
    /// </param>
    /// <param name="_transDate">
    ///    The transaction date entered by the user on the wizard form.
    /// </param>
    /// <param name="_amount">
    ///    The amount entered by the user on the wizard form.
    /// </param>
    /// <param name="_debitCredit">
    ///    The debit or credit sign selected by the user on the wizard form.
    /// </param>
    /// <param name="_outputDatasource">
    ///    The reference of the result table on the <c>JournalizingDefinitionTestWizard</c> form.
    /// </param>
    /// <param name="_originatingEntryDataSource">
    ///    The reference of the originating entry table on the <c>JournalizingDefinitionTestWizard</c> form.
    /// </param>
    public void generateResult(LedgerDimensionAccount               _ledgerDimensionAccount,
                               TransDate                            _transDate,
                               Amount                               _amount,
                               JournalizingDefinitionDebitCredit    _debitCredit,
                               TmpJournalizingDefinitionTestResult  _outputDatasource,
                               TmpJournalizingDefinitionTestResult  _originatingEntryDataSource)
    {
        ttsbegin;

        delete_from _outputDatasource;
        delete_from _originatingEntryDataSource;

        List list = journalizingDefinitionEngine.getSystemGeneratedEntries(_ledgerDimensionAccount,
                        _debitCredit,
                        this.parmJournalizingDefinitionId(),
                        _transDate);

        // Insert originating entry
        _originatingEntryDataSource.LedgerDimension = _ledgerDimensionAccount;
        _originatingEntryDataSource.Amount = _amount;
        _originatingEntryDataSource.DebitCredit = _debitCredit;
        _originatingEntryDataSource.insert();

        ListEnumerator listEnumerator = list.getEnumerator();
        while (listEnumerator.moveNext())
        {
            JournalizingDefinitionEntry generatedOutput = listEnumerator.current();
            _outputDatasource.LedgerDimension = generatedOutput.parmLedgerDimension();
            _outputDatasource.Amount = _amount;
            _outputDatasource.DebitCredit = generatedOutput.parmJournalizingDefinitionDebitCredit();
            _outputDatasource.JournalizingDefinitionCode = generatedOutput.parmJournalizingDefinitionCode();
            _outputDatasource.insert();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        journalizingDefinitionEngine = JournalizingDefinitionEngine::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalizingDefinitionId</Name>
				<Source><![CDATA[
    public JournalizingDefinitionId parmJournalizingDefinitionId(JournalizingDefinitionId _journalizingDefinitionId = journalizingDefinitionId)
    {
        journalizingDefinitionId = _journalizingDefinitionId;

        return journalizingDefinitionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    public TransDate parmTransDate(transDate _transDate = transDate)
    {
        transDate = _transDate;

        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupNavigation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Disables the Next button when the user moves to any tab.
    /// </summary>
    public void setupNavigation()
    {
        this.nextEnabled(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static JournalizingDefinitionTestWizard construct()
    {
        return new JournalizingDefinitionTestWizard();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        JournalizingDefinitionTestWizard wizard = new JournalizingDefinitionTestWizard();
        JournalizingDefinitionVersion journalizingDefinitionVersion = args.record();
        wizard.parmJournalizingDefinitionId(journalizingDefinitionVersion.JournalizingDefinition);
        wizard.parmTransDate(journalizingDefinitionVersion.ValidFrom);
        if (wizard.prompt())
        {
            wizard.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWelcomePage</Name>
				<Source><![CDATA[
    public boolean hasWelcomePage()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFinishPage</Name>
				<Source><![CDATA[
    public boolean hasFinishPage()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>