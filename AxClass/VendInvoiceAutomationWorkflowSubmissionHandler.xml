<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationWorkflowSubmissionHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Concrete implementation of <c>VendInvoiceAutomationIWorkflowSubmissionHandler</c> for handling the automatic submission of vendor invoices ot workflow.
/// </summary>
internal final class VendInvoiceAutomationWorkflowSubmissionHandler implements VendInvoiceAutomationIWorkflowSubmissionHandler
{
    private VendInvoiceInfoTable vendorInvoice;
    private VendInvoiceAutomationIWorkflowSubmissionLogger workflowSubmissionLogger;
    private ProcessScheduleWorkItem processWorkItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInvoiceWorkflowSubmission</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationWorkflowSubmissionHandler newFromInvoiceWorkflowSubmission(
        VendInvoiceInfoTable _vendorInvoice, 
        VendInvoiceAutomationIWorkflowSubmissionLogger _submissionLogger,
        ProcessScheduleWorkItem _processWorkItem)
    {
        VendInvoiceAutomationWorkflowSubmissionHandler workflowSubmissionHandler = new VendInvoiceAutomationWorkflowSubmissionHandler();
        workflowSubmissionHandler.vendorInvoice = _vendorInvoice;
        workflowSubmissionHandler.workflowSubmissionLogger = _submissionLogger;
        workflowSubmissionHandler.processWorkItem = _processWorkItem;

        return workflowSubmissionHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performWorkflowSubmission</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void performWorkflowSubmission()
    {
        WorkflowVersionTable workflowVersionTable = VendInvoiceHeaderWorkflow::findWorkflowConfigurationToActivate(vendorInvoice);

        // The workflow will be submitted by the user who owns the auto-submission series
        UserGroupId processOwnerId = processWorkItem.parmOwnerId();
        WorkflowComment workflowSubmissionComment = strFmt("@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionMessage", processOwnerId);

        Workflow::activateFromWorkflowConfigurationId(workflowVersionTable.ConfigurationId, vendorInvoice.RecId, workflowSubmissionComment, NoYes::No, processOwnerId);
        VendInvoiceInfoTable::setRequestStatus(vendorInvoice.RecId, VendInvoiceRequestStatus::InReview);

        vendorInvoice.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleSuccessfulWorkflowSubmission</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void handleSuccessfulWorkflowSubmission()
    {
        VendInvoiceAutomationStateManagement::setInvoiceAutomationStatusToInWorkflow(vendorInvoice.RecId);

        // Log the successful submission to Process Automation
        workflowSubmissionLogger.writeSuccessfulSubmissionToProcessAutomationResults();

        // Log the successful submission to the invoice's document history
        workflowSubmissionLogger.writeSuccessfulSubmissionToInvoiceDocumentHistory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleFailedWorkflowSubmission</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void handleFailedWorkflowSubmission()
    {
        // Remove the invoice from automation
        VendInvoiceAutomationStateManagement::pauseInvoiceAutomation(vendorInvoice.RecId);

        // Log the failed submission to the invoice's document history
        workflowSubmissionLogger.writeFailedSubmissionToInvoiceDocumentHistory();

        // Log the failed automation step and resulting pause to the invoice's document history
        workflowSubmissionLogger.writeAutomationPausedDueToFailedStepToDocumentHistory();

        // Log the failed submission to Process Automation
        workflowSubmissionLogger.writeFailedSubmissionToProcessAutomationResults();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleExceptionOnWorkflowSubmission</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void handleExceptionOnWorkflowSubmission()
    {
        VendInvoiceAutomationStateManagement::pauseInvoiceAutomation(vendorInvoice.RecId);
        workflowSubmissionLogger.writeAutomationPausedDueToFailedStepToDocumentHistory();

        // Update Process Automation logs to reflect the exception
        workflowSubmissionLogger.writeFailedSubmissionToProcessAutomationResults();
        workflowSubmissionLogger.updateProcessAutomationSourceLinkMessage("@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionException");
        workflowSubmissionLogger.writeMessageLogEntryToProcessAutomationResults(literalStr("@AccountsPayable:VendInvoiceAutomationWorkflowSubmissionException"), Exception::Error);

        // Update the invoice's document history to reflect the failed submission
        workflowSubmissionLogger.writeFailedSubmissionToInvoiceDocumentHistory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCompletionOfWorkflowSubmission</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void handleCompletionOfWorkflowSubmission()
    {
        workflowSubmissionLogger.writeProcessAutomationResultsToDatabase();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>