<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollStatementGeneration</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PayrollStatementGeneration</c> class is a abstract class which
/// provides UI and basic function for earning and pay statement processing.
/// </summary>
abstract class PayrollStatementGeneration extends RunBaseBatch
{
    DialogRunbase           dialog;
    QueryRun                queryRun;
    QueryRun                queryRunPositionDetails;
    Common                  callingRecord;
    boolean                 skipCompletionMsgDisplay;

    container               payPeriodList;
    PayrollPayCycleRecId    payCycleRecId;
    PayrollPayPeriodRecId   payPeriodRecId;
    BatchHeader             batchHeader;
    PayrollParameters       parameters;
    Counter                 statementsCounter;
    RunBaseBatch            task;

    FormBuildComboBoxControl    payPeriodBuildComboBox;
    FormComboBoxControl         payPeriodComboBox;
    FormReferenceGroupControl           payCycleReferenceControl;
    FormBuildReferenceGroupControl      payCycleBuildReferenceControl;

    private const str payPeriodListControl = 'PayPeriodListControl';
    private const str payCycleControl = 'PayCycleControl';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowSaveLast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Save the last user selection on the query if the process is not called from a worker or position form.
    /// </summary>
    /// <returns>
    /// Return true if the process is called to process a group of records.
    /// </returns>
    public boolean allowSaveLast()
    {
        return (!callingRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return (!callingRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyEndOfPayPeriodAdjusted</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the period end date and time, removing the company's time zone offset.
    /// </summary>
    /// <param name="_periodEndDate">
    ///     The period end date.
    /// </param>
    /// <returns>
    ///     A <c>utcdatetime</c> object representing the company's end of period.
    /// </returns>
    protected utcdatetime companyEndOfPayPeriodAdjusted(TransDate _periodEndDate)
    {
        utcdatetime             companyEndOfPayPeriod;
        companyEndOfPayPeriod = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(_periodEndDate, timeMax()), DateTimeUtil::getCompanyTimeZone());
        return companyEndOfPayPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPeriodList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the list of period start and end dates and populates the combo box in dialog with these values for the process.
    /// </summary>
    protected void createPeriodList()
    {
        PayrollPayPeriod    selectedPayPeriod;

        payPeriodList = conNull();
        payPeriodComboBox.clear();

        while select PeriodStartDate, PeriodEndDate from selectedPayPeriod
            order by PeriodEndDate
            where selectedPayPeriod.PayCycle == payCycleRecId
            &&    selectedPayPeriod.PeriodStatus == PayrollPeriodStatus::Open
        {
            payPeriodComboBox.add(date2StrUsr(selectedPayPeriod.PeriodStartDate, DateFlags::FormatAll) + ' - ' + date2StrUsr(selectedPayPeriod.PeriodEndDate, DateFlags::FormatAll));

            payPeriodList += selectedPayPeriod.RecId;
        }

        payPeriodComboBox.selection(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the pay cycle and pay period controls in the dialog.
    /// </summary>
    /// <returns>
    /// The instance of a DialogRunbase class with the customized controls.
    /// </returns>
    public Object dialog()
    {
        dialog = super();

        dialog.caption(this.dialogCaption());

        payCycleBuildReferenceControl = dialog.curFormBuildGroup().addControl(FormControlType::ReferenceGroup, payCycleControl);
        payCycleBuildReferenceControl.extendedDataType(extendedTypeNum(PayrollPayCycleRecId));
        payCycleBuildReferenceControl.mandatory(NoYes::Yes);
        payCycleBuildReferenceControl.helpText(this.payCycleHelpText());

        payPeriodBuildComboBox = dialog.curFormBuildGroup().addControl(FormControlType::ComboBox, payPeriodListControl);
        payPeriodBuildComboBox.label("@Payroll:PayPeriod");
        payPeriodBuildComboBox.helpText(this.payPeriodHelpText());
        payPeriodBuildComboBox.comboType(1);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the caption for the dialog.
    /// Earning process and payment process set different captions for the dialog.
    /// </summary>
    /// <returns>
    /// Return the caption of the dialog.
    /// </returns>
    abstract protected str dialogCaption()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the input from the dialog which contains user selection for the process.
    /// </summary>
    /// <param name="_dialog">
    /// The instance of the dialog which contains user input for the process.
    /// </param>
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        payPeriodComboBox = _dialog.dialogForm().formRun().control(payPeriodBuildComboBox.id());
        payCycleReferenceControl = _dialog.dialogForm().formRun().control(payCycleBuildReferenceControl.id());
        payCycleReferenceControl.registerOverrideMethod(methodStr(FormStringControl, modified),
            methodStr(PayrollStatementGeneration, payCycleControl_modified), this);

        info("@PayrollProcessing:PayrollDeprecationWarningMessage");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the pay cycle and pay period from the dialog and modify the query according to the user selections.
    /// </summary>
    /// <returns>
    /// Return true if the operation succeeds.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        payCycleRecId   = payCycleReferenceControl.value();
        payPeriodRecId  = conPeek(payPeriodList, payPeriodComboBox.selection() + 1);
        this.setRange();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct the task class for earning or payment processing. Need to be implemented in the derived classes.
    /// </summary>
    /// <param name="_batchTaskGroupList">
    /// The list of workers and related positions for the RunBaseBatch class to process.
    /// </param>
    /// <returns>
    /// The instance of a RunBaseBatch class with the derived class type.
    /// </returns>
    abstract  RunBaseBatch initializeTask(container _batchTaskGroupList)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the QueryRun object using PayrollStatementGenerationQuery Query.
    /// </summary>
    void initQuery()
    {
        queryRun = new QueryRun(queryStr(PayrollStatementGenerationQuery));
        queryRun.query().title(this.dialogCaption());
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycleControl_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rebuild the list of period end dates whenever the pay cycle changes.
    /// </summary>
    /// <param name = "_formControl">The pay cycle control.</param>
    /// <returns>
    /// Return true if the pay cycle is modified.
    /// </returns>
    protected boolean payCycleControl_modified(FormControl _formControl)
    {
        boolean ret;

        ret = payCycleReferenceControl.modified();
        if (ret)
        {
            payCycleRecId = payCycleReferenceControl.value();
            this.createPeriodList();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>payCycleHelpText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the help text for pay cycle control.
    /// Earning process and payment process set different help texts.
    /// </summary>
    /// <returns>
    /// Return the help text of the pay cycle control.
    /// </returns>
    abstract protected str payCycleHelpText()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>payPeriodHelpText</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the help text for pay period control.
    /// Earning process and payment process set different help texts.
    /// </summary>
    /// <returns>
    /// Return the help text of the pay period control.
    /// </returns>
    abstract protected str payPeriodHelpText()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the actual document generation process for the workers
    /// who hold valid positions paid by the current legal entity and for the selected pay cycle.
    /// Other conditions in the query selection also apply to the selection of the worker and position.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        #PayrollConstants
        container                               batchTaskGroupList;
        List                                    batchTaskPositionList;
        int                                     taskGroupingCount,
                                                workerTaskCount;
        PayrollStatementGenerationView          statementGenerationView;
        HcmWorkerRecId                          lastWorkerRecId, positionRecId;
        str                                     statementCountMessage;

        parameters = PayrollParameters::find();

        // If process-level validation fails then abort the process
        if (!this.validateProcess())
        {
            return;
        }

        // Determine how many statements to process within a single task/batch
        if (parameters.PaymentTaskGroupingCount)
        {
            taskGroupingCount = parameters.PaymentTaskGroupingCount;
        }
        else
        {
            // Default to a single payment per batch job task
            taskGroupingCount = 1;
        }

        //this query added the PayrollPositionDetail ranges to the query
        queryRunPositionDetails = new QueryRun(queryRun.query());
        this.setRangeFromDialog();

        lastWorkerRecId = 0;
        workerTaskCount = 0;
        batchTaskGroupList = conNull();
        batchTaskPositionList = new List(Types::Int64);
        while (queryRunPositionDetails.next())
        {
            statementGenerationView = queryRunPositionDetails.get(tableNum(PayrollStatementGenerationView));
            positionRecId = statementGenerationView.Position;

            if (lastWorkerRecId != statementGenerationView.Worker)
            {
                //if the worker is different than the last one
                workerTaskCount++;
                if (workerTaskCount == 1)
                {
                    //For the first record, add Worker to the group container and the position to the position container
                    batchTaskPositionList.addEnd(positionRecId);
                }
                else
                {
                    //if the worker is different, add the last worker to the container and the position container to the group container.
                    batchTaskGroupList += [[lastWorkerRecId, batchTaskPositionList.pack()]];

                    if (this.isInBatch() && (conLen(batchTaskGroupList) == taskGroupingCount))
                    {
                        // If the threshold for grouping payments into a task has been reached, schedule the task.
                        this.runScheduleJob(batchTaskGroupList);

                        // Reinitialize the container for the next group of payments to schedule
                        batchTaskGroupList = conNull();
                    }

                    //Start a new batchTaskPositionList
                    batchTaskPositionList = new List(Types::Int64);
                    batchTaskPositionList.addEnd(positionRecId);
                }
                lastWorkerRecId = statementGenerationView.Worker;
            }
            else
            {
                //the worker is the same as the last one, add the position to the position container
                batchTaskPositionList.addEnd(positionRecId);
            }
        }

        if (workerTaskCount != 0 && conLen(batchTaskGroupList) >= 0)
        {
            // Schedule a batch for any remaining tasks if running in batch mode
            // Or run all the tasks if not running in batch mode
            // the length of batchTaskGroupList can be 0 at this point if there is only one worker/position to process, the workerTaskCount is 1 in that case

            batchTaskGroupList += [[lastWorkerRecId, batchTaskPositionList.pack()]];
            this.runScheduleJob(batchTaskGroupList);
        }

        //show this message when not calling from Worker/Position form and there is no worker in the query list
        if (workerTaskCount == 0)
        {
            // "The selection criteria that you entered did not result in the %1"
            info("@Payroll:TheSelectionCriteriaDidNotReturnAnyResults");
        }

        if (!this.isInBatch() && workerTaskCount != 0 && !skipCompletionMsgDisplay)
        {
            //Show the number of statements that were updated or created by the process
            statementCountMessage = this.showStatementCountMessage();

            if (statementCountMessage != '')
            {
                info (statementCountMessage);
            }
            // Only give the process is complete message if the process isn't running as a batch and there are workers in the list that have been processed
            info("@Payroll:TheProcessIsComplete");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runScheduleJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Schedules the document process for running in the context of a batch job or running without a batch.
    /// </summary>
    /// <param name="_batchTaskGroupList">
    /// A container listing the workers and positions for the document process.
    /// </param>
    /// <remarks>
    /// If not running under a batch job the process runs immediately.
    /// </remarks>
    public void runScheduleJob(container _batchTaskGroupList)
    {
        HcmWorkerRecId  firstWorkerRecId,
                        lastWorkerRecId;
        str             taskWorkerRange;
        container       pairedContainer;

        task = this.initializeTask(_batchTaskGroupList);

        if (this.isInBatch())
        {
            // Get the first (and possibly only) worker from the container
            pairedContainer = conPeek(_batchTaskGroupList, 1);
            firstWorkerRecId = conPeek(pairedContainer, 1);
            taskWorkerRange = HcmWorker::find(firstWorkerRecId).PersonnelNumber;

            // Determine the proper task description > 1 pay statement per task
            if (conLen(_batchTaskGroupList) > 1)
            {
                // Get the last worker in the _batchTaskGroupList
                pairedContainer = conPeek(_batchTaskGroupList, conLen(_batchTaskGroupList));
                lastWorkerRecId = conPeek(pairedContainer, 1);
                taskWorkerRange = strFmt("@Payroll:Num_1To2", taskWorkerRange, HcmWorker::find(lastWorkerRecId).PersonnelNumber);
            }

            // Assign the description for the task
            task.batchInfo().parmCaption(strFmt("@Payroll:Worker1", taskWorkerRange));

            // Schedule for later run
            if (!batchHeader)
            {
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            // Add the subtask to the batch job
            batchHeader.addRuntimeTask(task, this.parmCurrentBatch().RecId);
            batchHeader.save();
        }
        else
        {
            task.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Modify the JoinType in the query on the <c>HcmPositionUnionAgreement</c> table to OuterJoin when no union agreement is specified since it is not mandatory
    /// Add specific worker or posiiton range if called from the Worker or Position detail form.
    /// </summary>
    void setRange()
    {
        QueryBuildDataSource    qbdsHcmPosition, qbdsHcmWorker, qbdsPositionUnionAgreement;
        HcmWorker               hcmWorkerCalled;
        HcmPosition             hcmPositionCalled;

        if (callingRecord)
        {
            switch (callingRecord.TableId)
            {
                case tableNum(HcmWorker):
                    hcmWorkerCalled.data(callingRecord);
                    qbdsHcmWorker = queryRun.query().dataSourceTable(tableNum(HcmWorker));
                    qbdsHcmWorker.addRange(fieldNum(HcmWorker, PersonnelNumber)).value(hcmWorkerCalled.PersonnelNumber);
                    break;
                case tableNum(HcmPosition):
                    hcmPositionCalled.data(callingRecord);
                    qbdsHcmPosition = queryRun.query().dataSourceTable(tableNum(HcmPosition));
                    qbdsHcmPosition.addRange(fieldNum(HcmPosition, PositionId)).value(hcmPositionCalled.PositionId);
                    break;
            }
        }

        qbdsPositionUnionAgreement = queryRun.query().dataSourceTable(tableNum(HcmPositionUnionAgreement));
        if (qbdsPositionUnionAgreement.findRange(fieldNum(HcmPositionUnionAgreement, UnionAgreement)).value() == '')
        {
            qbdsPositionUnionAgreement.joinMode(JoinMode::OuterJoin);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangeFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the pay cycle and paid by legal entity restriction to the <c>PayrollPositionDetail</c> table in the query.
    /// </summary>
    protected void setRangeFromDialog()
    {
        QueryBuildDataSource    qbdsStatementGenerationView, qbdsPositionDetail;
        TransDate               toDate;
        utcdatetime             companyEndOfPayperiod;
        LegalEntityRecId        legalEntityRecId;

        if (legalEntityRecId == 0)
        {
            legalEntityRecId = CompanyInfo::current();
        }

        if (payPeriodRecId != 0)
        {
            toDate = PayrollPayPeriod::find(payPeriodRecId).PeriodEndDate;
            payCycleRecId = PayrollPayPeriod::find(payPeriodRecId).PayCycle;
            companyEndOfPayperiod = this.companyEndOfPayPeriodAdjusted(toDate);
            qbdsStatementGenerationView = queryRunPositionDetails.query().dataSourceTable(tableNum(PayrollStatementGenerationView));
            qbdsStatementGenerationView.addOrderByField(fieldNum(PayrollStatementGenerationView, Worker));

            queryRunPositionDetails.query().validTimeStateAsOfDateTime(companyEndOfPayperiod);

            qbdsPositionDetail = qbdsStatementGenerationView.addDataSource(tableNum(PayrollPositionDetails));
            qbdsPositionDetail.addLink(fieldNum(PayrollStatementGenerationView, Position), fieldNum(PayrollPositionDetails, Position));
            qbdsPositionDetail.joinMode(JoinMode::ExistsJoin);
            qbdsPositionDetail.addRange(fieldNum(PayrollPositionDetails, PayCycle)).value(queryValue(payCycleRecId));
            qbdsPositionDetail.addRange(fieldNum(PayrollPositionDetails, PaidByLegalEntity)).value(queryValue(legalEntityRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return (!callingRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showStatementCountMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the information related to the number of statements that were created or updated by the process.
    /// </summary>
    /// <returns>
    /// The message that contains the information related to the number of statements that were created or updated by the process.
    /// </returns>
    protected Description showStatementCountMessage()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate both the pay cycle and pay period controls in the dialog has value before the processing starts.
    /// </summary>
    /// <param name="calledFrom">
    /// The object called the validate method.
    /// </param>
    /// <returns>
    /// Return true if the required parameters of dialog are set.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean                     ret;
        HcmWorker                   hcmWorkerCalled;
        HcmPosition                 hcmPositionCalled;

        ret = super(calledFrom);

        if (!payCycleRecId)
        {
            ret = ret && checkFailed("@Payroll:YouMustSelectAPayCycle");
        }

        if (!payPeriodRecId)
        {
            ret = ret && checkFailed("@Payroll:YouMustSelectAPayPeriod");
        }

        if (callingRecord)
        {
            switch (callingRecord.TableId)
            {
                case tableNum(HcmWorker):
                    hcmWorkerCalled.data(callingRecord);
                    ret = ret && this.validateCallingWorker(hcmWorkerCalled.RecId);
                    break;

                case tableNum(HcmPosition):
                    hcmPositionCalled.data(callingRecord);
                    ret = ret && this.validateCallingPosition(hcmPositionCalled.RecId);
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCallingPosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the calling position.  Always returns true.
    /// </summary>
    /// <param name="_positionRecId">
    ///     A position record id.
    /// </param>
    /// <returns>
    ///     True.
    /// </returns>
    protected boolean validateCallingPosition(HcmPositionRecId _positionRecId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCallingWorker</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the calling worker.  Always returns true.
    /// </summary>
    /// <param name="_workerRecId">
    ///     A worker record id.
    /// </param>
    /// <returns>
    ///     True.
    /// </returns>

    protected boolean validateCallingWorker(HcmWorkerRecId _workerRecId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs validations specific to the overall generation process.
    /// </summary>
    /// <returns>
    /// True indicates validation was successful; else false.
    /// </returns>
    protected boolean validateProcess()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>