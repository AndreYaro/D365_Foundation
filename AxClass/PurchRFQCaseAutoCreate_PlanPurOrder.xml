<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQCaseAutoCreate_PlanPurOrder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchRFQCaseAutoCreate_PlanPurOrder</c> class is for auto-generating requests for quote from
///    planned purchase orders.
/// </summary>
/// <remarks>
///    This class extends the abstract class <c>PurchRFQCaseAutoCreate</c>.
/// </remarks>
class PurchRFQCaseAutoCreate_PlanPurOrder extends PurchRFQCaseAutoCreate
{
    ReqPO           reqPO;
    VendTable       vendTable;
    Map             mapLine;
    MapEnumerator   meLine;
    Map             mapVendor;
    MapEnumerator   meVendor;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>moveNextLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves to the next line of planned purchase orders.
    /// </summary>
    /// <returns>
    ///    true if there are more lines; otherwise, false.
    /// </returns>
    protected boolean moveNextLine()
    {
        boolean ret;

        ret = meLine.moveNext();
        if (ret)
            reqPO = meLine.currentValue();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNextVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Moves to the next vendor.
    /// </summary>
    /// <returns>
    ///    true if there are more lines; otherwise, false.
    /// </returns>
    protected boolean moveNextVendor()
    {
        boolean ret;

        ret = meVendor.moveNext();
        if (ret)
            vendTable = meVendor.currentValue();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        mapVendor   = new Map(Types::String, Types::Record);
        mapLine     = new Map(Types::Int64,  Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = buffer)
    {
        buffer = _buffer;

        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchRFQType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the purchase RFQ type.
    /// </summary>
    /// <returns>
    ///    The purchase RFQ type
    /// </returns>
    /// <remarks>
    ///    The purchase RFQ type can only be of type Purchase in this case.
    /// </remarks>
    protected PurchRFQType purchRFQType()
    {
        return PurchRFQType::Purch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchRFQCaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets a purchase RFQ line based on the current planned purchase order.
    /// </summary>
    protected void setPurchRFQCaseLine()
    {
        super();

        purchRFQCaseLine.initFromReqPO(reqPO);

        if (ProjParameters::find().CreateItemReqForPO == NoYes::Yes)
        {
            purchRFQCaseLine.initFromReqTrans(reqPO);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchRFQCaseTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the purchase RFQ case.
    /// </summary>
    /// <remarks>
    ///    This method also loops through the buffer to make line and vendor data ready.
    /// </remarks>
    protected void setPurchRFQCaseTable()
    {
        ReqDateDlv          earliestReqDateDlv;
        ItemBuyerGroupId    sameItemBuyerGroupId;
        int                 counter;
        PurchRFQParameters  params = PurchRFQParameters::find();
        ProjId              projId;

        super();

        while select buffer
        {
            reqPO.data(buffer);
            mapLine.insert(reqPO.RecId, reqPO);

            if (reqPO.VendId)
            {
                vendTable = VendTable::find(reqPO.VendId);

                if (vendTable)
                    mapVendor.insert(reqPO.VendId, vendTable);
            }

            if (!earliestReqDateDlv || reqPO.ReqDateDlv < earliestReqDateDlv)
                earliestReqDateDlv = reqPO.ReqDateDlv;

            if (!counter)
                sameItemBuyerGroupId = reqPO.ItemBuyerGroupId;

            if (reqPO.ItemBuyerGroupId != sameItemBuyerGroupId)
                sameItemBuyerGroupId = '';

            if (!projId && isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                projId = this.getProjectFromReqTrans(reqPO);
            }

            counter++;
        }

        meVendor = mapVendor.getEnumerator();
        meLine   = mapLine.getEnumerator();

        purchRFQCaseTable.rfqType           = this.purchRFQType();
        purchRFQCaseTable.DeliveryDate      = earliestReqDateDlv;
        purchRFQCaseTable.CurrencyCode      = CompanyInfoHelper::standardCurrency();
        purchRFQCaseTable.ItemBuyerGroup    = sameItemBuyerGroupId;

        if (projId && isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            purchRFQCaseTable.ProjId            = projId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchRFQVendLink</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the vendor based on the current vendor account
    /// </summary>
    protected void setPurchRFQVendLink()
    {
        purchRFQVendLink.clear();
        purchRFQVendLink.initValue();
        purchRFQVendLink.rfqCaseId = purchRFQCaseTable.rfqCaseId;
        purchRFQVendLink.initFromVendTable(vendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showInfo</Name>
				<Source><![CDATA[
    protected boolean showInfo()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the vendor account from the current vendor.
    /// </summary>
    /// <returns>
    ///    A vendor account.
    /// </returns>
    protected VendAccount vendAccount()
    {
        return vendTable.AccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQCaseAutoCreate_PlanPurOrder construct()
    {
        return new PurchRFQCaseAutoCreate_PlanPurOrder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjectFromReqTrans</Name>
				<Source><![CDATA[
    protected ProjId getProjectFromReqTrans(ReqPO _reqPO)
    {
        ReqTrans          reqTransSettled;
        ReqTransCov       reqTransCov;
        ReqTrans          reqTrans;
        InventTransOrigin inventTransOrigin;
        InventTrans       inventTrans;
        
        select ProjId from inventTrans
            exists join inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
            join RecId from reqTransSettled
                where reqTransSettled.InventTransOrigin == inventTransOrigin.RecId &&
                      reqTransSettled.RefType           == ReqRefType::InventJournal
            join RecId from reqTransCov
                where reqTransSettled.RecId == reqTransCov.IssueRecId
            join reqTrans
                where reqTrans.RefType     == _reqPO.RefType     &&
                      reqTrans.RefId       == _reqPO.RefId       &&
                      reqTrans.PlanVersion == _reqPO.PlanVersion &&
                      reqTrans.RecId       == reqTransCov.ReceiptRecId;

        return inventTrans.ProjId;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>