<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The InventCostUpdate class controls the global storage and final saving of the
/// inventCostTrans and inventCostTransVariance records per dataareaid.
/// </summary>
/// <remarks>
/// The InventCostUpdate class will be initialized for each dataareaid
/// through the <c>InventCostUpdateGlobal</c> class. This class will be used,
/// to store the inventCostTrans Records and the inventCostTransVariance records
/// in memory and write them to the database when the final commit is called.
/// This class will be reseted for each company, when the first ttsbegin is called.
/// This class interacts with the <c>inventCostMovement</c>, the <c>inventCostRevaluate</c> and the
/// <c>inventCostAdjust</c> classes.
/// Whenever all the costTrans records and the costTransVariances records in one of this two classes has been
/// calculated completetly, this class is called, to push the variances to the structures to memory or to the
/// database. This class is the comunicates with the database to write the inventCostTrans and inventCostTransVariance records.
/// This class uses a composit key to identify, which entries in the record sorted lists belongs together:
/// The key is a composit key consisting of:
/// InventTransId#Voucher#TransDate#CostTransType
/// For this key one things is stored:
/// - a map with a recordSortedList of costTransVariance records (summarized for each keys)
/// Based on this information, at the final TTSCommit, this information will be used
/// to assign the variances to each costTrans record after it was written to the database.
/// IMPORTANT:
/// This class currently supports only two modes:
/// 1.) Use from InventCostMovement / InvenCostRevaluate
///     Single call of inventCostUpdate.finanlizeCostTransVariance for all the
///     inventCostTrans records that belong togeher.
///     This means, that only new records are processed and no ones updated.
///     Here are MULTIPLE inventCostTrans records processed at the same time.
///     Example InventCostMovement:
///     - init InventCostMovement
///     - add multipe InventTrans records to inventCostMovement
///     - finalize inventCostMovement
///       ==> The finalize will call the invenCostUpdate.finalzeCostTransVariance method ONCE for all
///     the inventCostTrans records that belong together.
/// 2.) Use from InventCostAdjust
///     Multile calls of invenCostUpdate.finalzeCostTransVariance for ONE inventCostTrans record
///     Here is only ONE inventCostTrans record processed at the same time.
///     Example:
///     - Process one inventTrans record belonging to one inventCostTrans record
///     - call invenCostUpdate.finalzeCostTransVariance
///     - Process one inventTrans record that belongs to the same inventCostTrans record
///     - call invenCostUpdate.finalzeCostTransVariance again
/// What this class does not support:
/// Situations where multiple inventCostTrans records are processed at the same time with multiple
/// calls of theinvenCostUpdate.finalzeCostTransVariance method.
/// Situations where records in the inventCostTrans table needs to be updated.
/// </remarks>

class InventCostUpdate
{
    // This recordSortedList holds all the inventCostTrans records
    InventCostTransList         inventCostTransList;

    // This map stores for each composit key a record sorted list
    // with holds all the inventCostTransVariance record belonging to this composit key
    InventCostTransVarianceMap  inventCostTransVarianceMap;

    // Each instance of the InventCostUpdate class applies to a specific company - this is kept in this variable
    DataAreaId          dataAreaId;

    // Flag to indicate whether current database tranaction has updated the Inventory
    boolean             activated;

    // Flag to indicate that final commit block (ttsNotifyPreCommit) is under execution
    boolean             isFinalCommit;
    /// <summary>
    ///    Adds the <c>InventCostTrans</c> records for a specified <c>RecordSortedList</c> object to the
    ///    <c>RecordSortedList</c> object for this class.
    /// </summary>
    /// <param name="_inventCostTransList">
    ///    The <c>RecordSortedList</c> object containing the <c>InventCostTrans</c> records that need to be
    ///    added to the global <c>RecordSortedList</c> object.
    /// </param>
    /// <param name="_inventCostTransVarianceMap">
    ///    The map with the <c>InventCostTransVariance</c> records that need to be added to the global
    ///    <c>InventCostTransVarianceMap</c> map.
    /// </param>
    /// <remarks>
    ///    The specified <c>RecordSortedList</c> object, for which all the records belong to one key, will be
    ///    added to the <c>RecordSortedList</c> object for <c>InventCostTransList</c>. If the records already
    ///    exist, they will be merged. If no record is found, the <c>InventCostUpdate.checkPreviousRecord</c>
    ///    method will be called to check whether there is a record at a different state that might belong to
    ///    the record that is currently being processed. The <c>initialize</c> key is then used to add the
    ///    variances to the <c>KeyCostTransVarianceMap</c> map.This method is called from the
    ///    <c>inventCostUpdate.finalizeCostMovement</c> method.The <c>RecordSortedList</c> object is then, at
    ///    the final commit, processed and written to the database.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToMemory</Name>
				<Source><![CDATA[
    protected void addToMemory(InventCostTransList        _inventCostTransList,
                               InventCostTransVarianceMap   _inventCostTransVarianceMap)
    {
        // Records
        InventCostTrans  costTransSource;
        InventCostTrans  costTransCheck;

        // Control variables
        boolean          found;

        // Key values
        str              parmKey;

        found = _inventCostTransList.first(costTransSource);
        while (found)
        {
            // Get the key for this record
            parmKey = InventCostTransVarianceMap::buildKey(costTransSource);

            costTransCheck.initFromInventCostTrans(costTransSource);

            if (!inventCostTransList.find(costTransCheck))
            {
                // Check for records that might have been added to the lists before
                // This will be the case, if we are processing a physcial and financial update
                // in one transaction
                this.checkForPhysicalRecord(costTransSource, parmKey);
            }
            else
            {
                // The record I need to update was found, add the quantity
                inventCostTransList.add(costTransSource, false);
            }

            found = _inventCostTransList.next(costTransSource);
        }

        // Now I need to summarize the map
        if (_inventCostTransVarianceMap)
        {
            // Important: Use the source record to calc the factor, NOT the merged record (with the summed up quantities)
            // because otherwise, the proportional factor would be wrong, because totalQty is just for the given recordSortedList
            inventCostTransVarianceMap.summarize(_inventCostTransVarianceMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkForPhysicalRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Check to see whether a record in a different state exists for a given record.
    /// </summary>
    /// <param name="_costTrans">
    ///    The <c>InventCostTrans</c> record that is to be checked.
    /// </param>
    /// <param name="_parmKey">
    ///    The parm key that belongs to the given record.
    /// </param>
    /// <remarks>
    ///    This method manipulates the state of the <c>CostTrans</c> record, and then checks it with the
    ///    manipulated state in memory. If a record is found, it will be merged to the new parm key. Also, the
    ///    variances will be merged to the new key.
    /// </remarks>

    protected void checkForPhysicalRecord(InventCostTrans _costTrans,
                                          str             _parmKey)
    {
        // Instance for previous record
        InventCostTrans               costTransEst, costTransSum;

        // Key values
        str                           parmKeyPrev;

        // Variance list
        InventCostTransVarianceList   varianceList;

        // I have not found the record in the list
        // ==> May be the record exists fro a previous
        // update ==> change costTransType and look again
        costTransEst.initFromInventCostTrans(_costTrans);
        costTransEst.switchCostTransState();

        if (inventCostTransList.find(costTransEst) && (costTransSum.CostTransType == InventCostTransType::Adjustment || costTransEst.VarianceQty == _costTrans.VarianceQty))
        {
            // Ok, I have found the previous record
            // remove it from the list
            parmKeyPrev = InventCostTransVarianceMap::buildKey(costTransEst);

            // switch the costTransType back (==> now we are at the cost trans type where we have started
            // .data method is used, because all fields have to be assigned.
            costTransSum.data(costTransEst);

            // Change state back the financial
            costTransSum.switchCostTransState();

            // Add the quantity from the source
            costTransSum.addQtyFromInventCostTrans(_costTrans);

            if (costTransSum.CostTransType != InventCostTransType::Adjustment)
            {
                // For Adjustments the variance qty has to be summed up,
                // because from Adjustment the records are passed on by one
                // In all other cases, the variance qty is the qty that has been
                // summed up for the financial record.
                costTransSum.VarianceQty = _costTrans.VarianceQty;
            }

            // Remove the physical record from the list
            inventCostTransList.delete(costTransEst);

            // Insert the summed up record to the list
            if (!costTransSum.allQtyFieldsZero())
            {
                inventCostTransList.insert(costTransSum);
            }

            // Now switch the variance (No merge is necessary here
            // because the the inventCostTrans record has not been found in the
            // costTransList, so also no variance can exist for it.
            if (inventCostTransVarianceMap.exists(parmKeyPrev))
            {
                varianceList = inventCostTransVarianceMap.lookup(parmKeyPrev);
                inventCostTransVarianceMap.remove(parmKeyPrev);
                inventCostTransVarianceMap.insert(_parmKey, varianceList);
            }
        }
        else
        {
            // I have no physical record, so just add a new one
            // The insert method can be used in this case, due to the
            // fact, that the check if the record exists has been performed
            // earlier in this method.
            if (!_costTrans.allQtyFieldsZero())
            {
                inventCostTransList.insert(_costTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeCostTransVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the <c>RecordSortedList</c> object and <c>InventCostTransVariance</c> map that are handed
    ///    over.
    /// </summary>
    /// <param name="_inventCostTransList">
    ///    The <c>RecordSortedList</c> object that is to be processed.
    /// </param>
    /// <param name="_inventCostTransVarianceMap">
    ///    The <c>InventCostTransVarianceMap</c> that is to be processed.
    /// </param>
    /// <remarks>
    ///    Before processing the <c>RecordSortedList</c> object that is handed over, a check is performed to
    ///    ensure that records that have zero quantity and zero cost amount are not inserted. Then, the list
    ///    and the map are processed by calling the <c>InventCostUpdate.addToMemory</c> method.
    /// </remarks>

    public void finalizeCostTransVariance(InventCostTransList       _inventCostTransList,
                                          InventCostTransVarianceMap  _inventCostTransVarianceMap)
    {
        // First of all, activate the instance in
        // the inventCostUpdateGlobal class
        if (!activated)
        {
            activated = true;
            InventCostUpdateGlobal::Instance().activateDataAreaId(dataAreaId);

            // Initialize all the maps
            this.init();
        }

        // Process records
        if (_inventCostTransList && _inventCostTransList.length() != 0)
        {
            // Always add he costTransList and the keyVarianceMap to memory
            this.addToMemory(_inventCostTransList, _inventCostTransVarianceMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the record from the <c>KeyCostTransMap</c> map if found.
    /// </summary>
    /// <param name="_inventCostTrans">
    ///    The <c>InventCostTrans</c> record that is to be initialized with key fields that build the sort
    ///    order of the <c>RecordSortedList</c> object.
    /// </param>
    /// <returns>
    ///    An <c>InventCostTrans</c> record.
    /// </returns>
    /// <remarks>
    ///    This method is used by the <c>InventCostMovement</c> class because under certain circumstances
    ///    records that are not yet written to the database are needed to calculate the variance for some
    ///    transactions.
    /// </remarks>

    public InventCostTrans getCostTrans(InventCostTrans _inventCostTrans)
    {
        // Record that has to be looked up
        InventCostTrans     inventCostTrans;

        // Set the values to local instance
        inventCostTrans.data(_inventCostTrans);

        // If some quantity has been specified, reset it
        // so that the right quantity is looked up and passed back
        // especially for the interaction with the inventCostTrans::findCostTrans method
        inventCostTrans.resetQtyFields();

        if (activated && inventCostTransList)
        {
            // Ok, there exists a recordSortedLst
            inventCostTransList.find(inventCostTrans);
        }

        return inventCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory cost transaction exists in memory.
    /// </summary>
    /// <param name = "_inventCostTrans">The inventory cost transaction.</param>
    /// <returns>true, if the inventory cost transaction exists in memory; otherwise false.</returns>
    public boolean existsCostTrans(InventCostTrans _inventCostTrans)
    {
        boolean found;

        if (activated && inventCostTransList)
        {
            found = inventCostTransList.find(_inventCostTrans.data());
        }

        return found;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCostTransVarianceList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a <c>RecordSortedList</c> object with all the <c>InventCostTransVariance</c> records for a
    ///    given <c>InventCostTrans</c> object.
    /// </summary>
    /// <param name="_inventCostTrans">
    ///    The <c>InventCostTrans</c> record for which the <c>RecordSortedList</c> object with the variances
    ///    is to be retrieved.
    /// </param>
    /// <returns>
    ///    A <c>recordSortedList</c> object.
    /// </returns>
    /// <remarks>
    ///    Since the variance might not yet be been written to the database, first a check in the
    ///    <c>InventCostTransVarianceMap</c> is executed. If the variance is found, the
    ///    <c>RecordSortedList</c> object will be returned. Otherwise, a new <c>RecordSortedList</c> object is
    ///    initialized from the static method <c>InventCostTransVarianceList::initListWithoutTrans</c> and
    ///    returned. This method is used by the <c>inventCostMovement</c> class.
    /// </remarks>

    public InventCostTransVarianceList getCostTransVarianceList(InventCostTrans _inventCostTrans)
    {
        // Composit key for looking up the values
        str                 lookupKey;

        // Check if the record is in oe of the keyCostTransMaps
        lookupKey = InventCostTransVarianceMap::buildKey(_inventCostTrans);

        if (activated && inventCostTransVarianceMap.exists(lookupKey))
        {
            // Ok, there exists a recordSortedLst for this key.
            return inventCostTransVarianceMap.lookup(lookupKey);
        }

        return InventCostTransVarianceList::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initialize the memory structures used in this class.
    /// </summary>
    /// <remarks>
    ///    The <c>RecordSortedList</c> object and the <c>InventCostTransVarianceMap</c> map are initialized.
    /// </remarks>

    protected void init()
    {
        // Initialize helper classes
        inventCostTransList = InventCostTransList::construct();
        inventCostTransVarianceMap = InventCostTransVarianceMap::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lockPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Handles the locking of the <c>InventItemPrice</c> records to ensure that a new price is not entered.
    /// </summary>
    /// <remarks>
    ///    This method locks the used <c>InventItemPrice</c> records and then checks whether a new price has
    ///    been entered. If a new price has been entered, it throws an exception so that the transaction is
    ///    restarted.
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    A new <c>InventItemPrice</c> record is found and this record needs to be taken into consideration.
    ///    The transaction must be restarted.
    /// </exception>
    protected void lockPrice()
    {
        InventItemPrice                     newInventItemPrice;
        InventItemPrice                     usedInventItemPrice;
        InventCostTrans                     inventCostTrans;
        int64                               curTransactionId = appl.curTransactionId();
        utcdatetime                         maxUsedDateTime, maxNewDateTime;
        ItemId                              curItemId;
        InventDimId                         curInventDimId;

        // Obtain a share lock on all the prices that has been used
        // This will block updated to this price, but allow other readers to continue
        // The aggregate function is used to ensure all rows get locked
        select repeatableRead count(RecId) from usedInventItemPrice
            exists join inventCostTrans
            where inventCostTrans.ItemPriceRefRecId == usedInventItemPrice.RecId
               && inventCostTrans.CreatedTransactionId == curTransactionId;

        // Determine whether a new price has been added.
        // It is Important to select records where a check for future prices makes sense.
        // No revaluation will be created for only accrued quantity (Purch Invoice)
        // Therefore, no check needs to be done if there are future prices.
        // Inventory and work in progress revaluation should always be included.
        while select ItemId, InventDimId, CreatedDateTime from usedInventItemPrice
            group by ItemId, InventDimId, CreatedDateTime
            outer join ItemId, InventDimId, CreatedDateTime from newInventItemPrice
            group by ItemId, InventDimId, CreatedDateTime
            where newInventItemPrice.CreatedDateTime              > usedInventItemPrice.CreatedDateTime
               && newInventItemPrice.ItemId                      == usedInventItemPrice.ItemId
               && newInventItemPrice.InventDimId                 == usedInventItemPrice.InventDimId
               && newInventItemPrice.PriceType                   == CostingVersionPriceType::Cost
            join TableId from inventCostTrans
            group by ItemPriceRefRecId
            where usedInventItemPrice.RecId            == inventCostTrans.ItemPriceRefRecId
               && inventCostTrans.CreatedTransactionId == curTransactionId
               && (inventCostTrans.OnHandQty           != 0 ||
                   inventCostTrans.wipInQty            != 0 ||
                   inventCostTrans.wipOutQty           != 0 ||
                   inventCostTrans.DeferredCOGSQty     != 0 ||
                   inventCostTrans.CostTransRefType    == InventCostTransRefType::InventoryRevaluation ||
                   inventCostTrans.CostTransRefType    == InventCostTransRefType::WIPRevaluation)

        {
            if (curItemId != usedInventItemPrice.ItemId || curInventDimId != usedInventItemPrice.InventDimId)
            {
                // One of the two has changed
                curItemId = usedInventItemPrice.ItemId;
                curInventDimId = usedInventItemPrice.InventDimId;

                // Now check the dates from the previous combination
                if (maxNewDateTime > maxUsedDateTime)
                {
                    throw Exception::UpdateConflict;
                }

                maxUsedDateTime = DateTimeUtil::minValue();
                maxNewDateTime  = DateTimeUtil::minValue();
            }

            // Set the usedDateTime
            if (usedInventItemPrice.CreatedDateTime > maxUsedDateTime)
            {
                maxUsedDateTime = usedInventItemPrice.CreatedDateTime;
            }

            // Set the new date
            if (newInventItemPrice.CreatedDateTime > maxNewDateTime)
            {
                maxNewDateTime     = newInventItemPrice.CreatedDateTime;
            }
        }

        // Now check the dates from the previous combination
        if (maxNewDateTime > maxUsedDateTime)
        {
            throw Exception::UpdateConflict;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventCostUpdate</c> class.
    /// </summary>
    /// <param name="_dataAreaId">
    ///    The <c>dataAreaId</c> value for which this instance is valid.
    /// </param>
    /// <remarks>
    ///    This method is protected to ensure that the <c>construct</c> method is used.
    /// </remarks>

    protected void new(DataAreaId _dataAreaId)
    {
        dataAreaId = _dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the class variables.
    /// </summary>
    /// <remarks>
    ///    This method is called from the <c>InventCostUpdate.ttsNotifyAbort</c> method or from the
    ///    <c>InventCostUpdate.ttsNotifyPostBegin</c> method.
    /// </remarks>

    protected void reset()
    {
        activated                  = false;
        isFinalCommit              = false;
        inventCostTransList        = null;
        inventCostTransVarianceMap   = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyAbort</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>InventCostUpdate.reset</c> method to reset all the variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when a transaction is aborted. The information that is stored in the global
    ///    variables is reset and not written to the database.
    /// </remarks>

    public void ttsNotifyAbort()
    {
        // reset the variables to ensure, that
        // noting is left, that migth be written to DB later
        this.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyPostBegin</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calls the <c>inventCostUpdate.reset</c> method to reset all the variables.
    /// </summary>
    /// <remarks>
    ///    This method will be called when the first <c>ttsbegin</c> is called. The information that is stored
    ///    in the global variables will be reset to ensure that they do not contain data.
    /// </remarks>

    public void ttsNotifyPostBegin()
    {
        // reset the variables to ensure, that
        // noting is left, that migth be written to DB later
        this.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyPreCommit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the database by using the information that has been stored in memory.
    /// </summary>
    /// <remarks>
    ///    This method will be called when the last <c>ttsbegin</c> is called. The information that is stored
    ///    in the global variables will be processed and written to the database by calling the
    ///    <c>inventCostUpdate.writeInventCostTrans</c> and
    ///    <c>inventCostUpdate.writeInventCostTransVariance</c> methods. Finally the
    ///    <c>inventCostUpdate.reset</c> method is called, to clean up.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    If the <c>ttsLevel</c> is not one, the call of this function is invalid.
    /// </exception>

    public void ttsNotifyPreCommit()
    {
        #OCCRetryCount

        // Only write to DB when this is the final commit ==> check tts level
        if (appl.ttsLevel() != 1)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!activated)
        {
            return;
        }

        isFinalCommit = true;

        try
        {
            // process inventCostTrans records
            // (Either insert or update them)
            this.writeInventCostTrans();

            // insert variances to Db
            // No update for variances
            this.writeInventCostTransVariance();

            // reset all internal variables to clean up
            this.reset();

            // lock the prices
            this.lockPrice();

            isFinalCommit = false;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    error("@SYS112768");
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                error("@SYS112768");
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeInventCostTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the <c>costTransList recordSortedList</c> to the database
    /// </summary>
    /// <remarks>
    ///    This method will be called from the <c>inventCostUpdate.ttsNotifyPreCommit</c> method.
    /// </remarks>

    protected void writeInventCostTrans()
    {
        // Ok, write everything to the database and retrieve the recId
        inventCostTransList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeInventCostTransVariance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes all <c>inventCostTransVariance</c> records to the database
    /// </summary>
    /// <remarks>
    ///    This method builds one big record sorted list from the small <c>recordSortedLists</c> that are
    ///    stored in the <c>costTransVarianceMap</c> map. It is then inserted into the database.
    /// </remarks>

    protected void writeInventCostTransVariance()
    {
        InventCostTransVarianceList        costTransVarianceList;
        InventCostTransVarianceList        costTransVarianceListFinal;
        InventCostTransVariance inventCostTransVariance;
        InventCostTrans         inventCostTrans;
        boolean                 found, foundVariance;
        str                     lookupKey;

        // A new record sorted list has to be created to write to the DB in one go
        costTransVarianceListFinal = InventCostTransVarianceList::construct(true);

        // Now iterate over all the costTrans records that have been written to the database
        found = inventCostTransList.first(inventCostTrans);
        while (found)
        {
            // Now get the variances for this record
            costTransVarianceList = null;
            lookupKey = InventCostTransVarianceMap::buildKey(inventCostTrans);

            if (inventCostTransVarianceMap.exists(lookupKey))
            {
                costTransVarianceList = inventCostTransVarianceMap.lookup(lookupKey);
            }

            if (costTransVarianceList && costTransVarianceList.length() != 0)
            {
                // I have a variance to assign
                foundVariance = costTransVarianceList.first(inventCostTransVariance);
                while (foundVariance)
                {
                    // Now I need to add this variance to the final variance list
                    inventCostTransVariance.InventCostTransRefRecId = inventCostTrans.RecId;

                    // Ensure that no empty records will be added
                    if (inventCostTransVariance.CostAmount != 0)
                    {
                        // Add it to the final list
                        costTransVarianceListFinal.insert(inventCostTransVariance);
                    }

                    foundVariance = costTransVarianceList.next(inventCostTransVariance);
                }
            }

            found = inventCostTransList.next(inventCostTrans);
        }

        // Write everything to the database
        costTransVarianceListFinal.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostUpdate construct(DataAreaId _dataAreaId)
    {
        return new InventCostUpdate(_dataAreaId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>