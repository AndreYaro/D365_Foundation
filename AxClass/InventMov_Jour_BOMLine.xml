<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Jour_BOMLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventMov_Jour_BOMLine</c> class reports BOM lines as finished, whereas the <see
///    cref="T:InventMov_Jour_BOM" /> class reports finished items as finished.
/// </summary>
class InventMov_Jour_BOMLine extends InventMov_Journal
{

    UnknownNoYes inventoryBatchJournalRelated;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>LedgerAccount</c> extended data type that is needed for the account balance sheet.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerAccount</c> extended data type that is needed for the account balance sheet.
    /// </returns>
    /// <remarks>
    ///    When a fixed asset is assigned to the record and there is a ledger account for the
    ///    <c>InventAccountType::InventIssueFixedAsset</c> enumeration value, use that instead of the account
    ///    defined for the <c>InventAccountType::InventIssue</c> enumeration value.
    /// </remarks>
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (!cacheAccountBalanceSheet)
        {
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                    InventAccountType::ProdIssue,
                    InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                    inventJournalTrans.ItemId,
                    this.inventTable().itemGroupId());
            }
            else
            {
                cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::ProdIssue));
            }
        }
        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
        public LedgerDimensionDefaultAccount accountOperations()
    {
        if (!cacheAccountOperations)
        {
            if (this.projId())
            {
                cacheAccountOperations = ProjPosting::getInventLedgerDimension(ProjAccountType::CostAccount,
                                                                      this.projId(),
                                                                      inventJournalTrans.ProjCategoryId);
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventLoss));
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventPostingItemLedgerDimensionParameters</Name>
				<Source><![CDATA[
    public InventPostingItemLedgerDimensionParameters createInventPostingItemLedgerDimensionParameters(
        InventAccountType   _inventAccountType,
        ItemGroupId         _itemGroupId = this.inventTable().itemGroupId())
    {
        InventPostingItemLedgerDimensionParameters searchParameters = super(_inventAccountType, _itemGroupId);

        searchParameters.ItemId = inventJournalTrans.ItemId;

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assemblyInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the assembly inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <returns>
    ///    The ID of the assembly inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId assemblyInventTransOriginId()
    {
        return InventTransOrigin::findByInventTransId(inventJournalTrans.InventTransIdFather).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturned</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to return the movement.
    /// </summary>
    /// <param name="_qty">
    ///    The inventory quantity of the movement; optional.
    /// </param>
    /// <returns>
    ///    true if the movement should be returned; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    An inventory journal transaction is considered returned if the related inventory transaction is a
    ///    receipt and the <c>inventTransIdReturn</c> value is specified.
    /// </remarks>
    public boolean isReturned(InventQty _qty = 0)
    {
        return this.transSign() > 0 && inventJournalTrans.InventTransIdReturn != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalCheckTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>InventJournalTrans</c> transaction is valid.
    /// </summary>
    /// <returns>
    /// false if there is an error in the transaction object; otherwise, true.
    /// </returns>
    public boolean  journalCheckTrans()
    {
        boolean ok = inventJournalTrans.checkAssemblyBOMJournalLine();

        if (! super())
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalPostTrans</Name>
				<Source><![CDATA[
        public void journalPostTrans(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _financial = null,
        CostAmount              _costAmount = 0)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetQty</Name>
				<Source><![CDATA[
        public void journalSetQty(
        NoYes   _transQtySignChangedToNegative = NoYes::No,
        boolean _showUserDialog                = true,
        boolean _doMinQtyCheck                 = true,
        boolean _doMaxQtyCheck                 = true)
    {
        InventMovement::setMinMaxQty(inventJournalTrans, _showUserDialog, false, _doMinQtyCheck, _doMaxQtyCheck);

        super(_transQtySignChangedToNegative, _showUserDialog, _doMinQtyCheck, _doMaxQtyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalSetQtyWithQtyCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// A wrapper method for journalSetQty and introduce a new parameter _doMultipleQtyCheck as multiple quantity check indicator.
    /// Overriding this method from InventMov_Journal.
    /// </summary>
    /// <param name="_transQtySignChangedToNegative">
    /// The indicator of sign of transactional quantity is negative or not, false by default.
    /// </param>
    /// <param name = "_showUsrDialog">
    /// A Boolean parameter that controls how to resolve constraint conflicts. 
    /// When set to false it will force the system to automatically accept the correction quantity suggested by the system without notifying the user; optional.
    /// </param>
    /// <param name = "_doMinQtyCheck">A Boolean parameter that indicates whether the lower limit quantity check must be performed; optional.</param>
    /// <param name = "_doMaxQtyCheck">A Boolean parameter that indicates whether the upper limit quantity check must be performed; optional.</param>
    /// <param name = "_doMultipleQtyCheck">A Boolean parameter that indicates whether the multiple limit quantity check must be performed; optional.</param>
    /// <remarks>
    /// The missing parameter _doMultipleQtyCheck leads to auto correct user input according to default order setting.
    /// This will cause batch merge cannot be posted because the it will not pass error correction method validation.
    /// And this method should be used afterward instead of calling method 'journalSetQty'.
    /// </remarks>
    public void journalSetQtyWithQtyCheck(
        NoYes   _transQtySignChangedToNegative = NoYes::No,
        boolean _showUserDialog                = true,
        boolean _doMinQtyCheck                 = true,
        boolean _doMaxQtyCheck                 = true,
        boolean _doMultipleQtyCheck            = true)
    {
        InventMovement::setMinMaxMultipleQty(inventJournalTrans, _showUserDialog, false, _doMinQtyCheck, _doMaxQtyCheck, _doMultipleQtyCheck);

        super(_transQtySignChangedToNegative, _showUserDialog, _doMinQtyCheck, _doMaxQtyCheck, _doMultipleQtyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
        public InventMovement newMovement_Orig()
    {
        if (!inventJournalTrans.RecId)
        {
            return null;
        }

        return new InventMov_Jour_BOMLine(inventJournalTrans.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMustConsiderBatchAttrib</Name>
				<Source><![CDATA[
        public PdsBatchAttribAutoRes pdsMustConsiderBatchAttrib()
    {
        boolean ret = false;

        if (inventoryBatchJournalRelated == UnknownNoYes::Unknown)
        {
            inventoryBatchJournalRelated = inventJournalTrans.inventJournalTable().isInventBatchJournalRelated() ? UnknownNoYes::Yes : UnknownNoYes::No;
        }

        if (inventoryBatchJournalRelated == UnknownNoYes::No)
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>LedgerPostingType</c> enumeration value that contains the account for transaction
    ///    type.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerPostingType</c> enumeration value that contains the account for transaction type.
    /// </returns>
    public LedgerPostingType postingBalanceSheet()
    {
        return LedgerPostingType::ProdIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
        public LedgerPostingType postingOperations()
    {
        return LedgerPostingType::InventLoss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnInventTransOrigin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the original transactions of which this is a return.
    /// </summary>
    /// <returns>
    /// The ID of the original transaction originator if any; otherwise, <c>0</c>.
    /// </returns>
    public InventTransOriginId returnInventTransOrigin()
    {
        #ISOCountryRegionCodes

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
            {
                if (!inventJournalTrans.InventTransIdReturn)
                {
                    return 0;
                }

                if (!this.isReturned(this.transSign() * inventJournalTrans.Qty))
                {
                    return 0;
                }

                return InventTransOrigin::findByInventTransId(inventJournalTrans.InventTransIdReturn).RecId;
            }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
        public InventTransType transType()
    {
        return InventTransType::BOMLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventMov_Jour_BOMLine</c> class based on the specified record.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    The <c>InventJournalTrans</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Jour_BOMLine</c> class.
    /// </returns>
    public static InventMov_Jour_BOMLine newFromInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        return new InventMov_Jour_BOMLine(_inventJournalTrans);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>