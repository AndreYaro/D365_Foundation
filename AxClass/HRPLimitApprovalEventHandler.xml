<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HRPLimitApprovalEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>HRPLimitApprovalEventHandler</c> class is started when the approval process of a limit
///    request starts.
/// </summary>
public class HRPLimitApprovalEventHandler implements WorkflowElementCompletedEventHandler,
                                                   WorkflowElementCanceledEventHandler,
                                                   WorkflowElementDeniedEventHandler,
                                                   WorkflowElementStartedEventHandler

{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Cancels a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that fired the event.
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        HRPLimitRequest::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), HRPLimitWorkflowState::PendingCancellation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the workflow context of the workflow item that fired the event and sets the approval status to
    ///    approved.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The value that is used to get the workflow context of the workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when an approve action is applied to a workflow item.
    /// </remarks>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        HRPLimitRequest::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), HRPLimitWorkflowState::Approved);
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Rejects the request for the approval workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that fired the event.
    /// </param>
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        HRPLimitRequest::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(), HRPLimitWorkflowState::Returned);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the workflow context of the workflow item that fired the event and sets the status to pending.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The value that is used to get the workflow context of the workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when a start event occurs for a workflow item.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        HRPLimitRequest::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),HRPLimitWorkflowState::PendingApproval);
    }

]]></Source>
			</Method>
			<Method>
				<Name>Main</Name>
				<Source><![CDATA[
    static void Main()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>