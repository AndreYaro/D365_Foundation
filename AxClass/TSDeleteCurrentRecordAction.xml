<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSDeleteCurrentRecordAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class TsDeleteCurrentRecordAction
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLog</Name>
				<Source><![CDATA[
    private static void createLog(Common _recordToDelete)
    {
        if (!ProjParameters::find().TimesheetAuditTrail)
        {
            return;
        }

        // TimesheetTable log is directly created in the delete method of the TSTimesheetTable. Only the timesheet line log is created here
        if (_recordToDelete.tableId == tableNum(TSTimesheetLine))
        {
            TSTimesheetLineLog::CreateTableAndLineLog(_recordToDelete, TSTimesheetLineWeek::findByTimesheetLine(_recordToDelete.RecId), '', TsTimesheetChangeType::Delete);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteRecord</Name>
				<Source><![CDATA[
    protected static void deleteRecord(Common _common)
    {
        Common common;

        ttsbegin;

        // Select the record from database for update
        switch (_common.TableId)
        {
            case tableNum(tsTimesheetTable):
                common = TSTimesheetTable::findRecId(_common.RecId, true);
                break;
            case tableNum(TSTimesheetLine):
                common = TSTimesheetLine::findRecId(_common.RecId, true);
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        TSDeleteCurrentRecordAction::createLog(common);

        common.delete();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Common                      common;

        if (_args)
        {
            if (_args.multiSelectionContext() != null && _args.multiSelectionContext().getFirst() != null)
            {
                for (common = _args.multiSelectionContext().getFirst(); common; common = _args.multiSelectionContext().getNext())
                {
                    if (common.validateDelete())
                    {
                       TSDeleteCurrentRecordAction::deleteRecord(common);
                    }
                }
            }
            else
            {
                common = _args.record();

                if (common)
                {
                    if (common.validateDelete())
                    {
                       TSDeleteCurrentRecordAction::deleteRecord(common);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>