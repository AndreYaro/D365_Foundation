<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollPayStatementReversal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PayrollPayStatementReversal</c> class is responsible for reversing a
///     <c>PayrollPayStatement</c> record and its associated records.
/// </summary>
/// <remarks>
///     Reversing a pay statement involves the creation of an identical pay statement
///     but with the negative for all amounts.
/// </remarks>
class PayrollPayStatementReversal extends RunBase
{
    PayrollPayStatement             payStatement,
                                    reversingPayStatement;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isAccountingDisabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the pay statement has accounting disabled.
    /// </summary>
    /// <returns>
    ///    true if pay statement has accounting disabled; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method's logic is based on method setDisableAccountingForRecalculation of class PayrollPayStatementGenerationTask
    /// </remarks>
    protected boolean isAccountingDisabled()
    {
        return (payStatement.SourceDocumentHeader == 0 && payStatement.PaymentType == PayrollPaymentType::Manual);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayStatement</Name>
				<Source><![CDATA[
    public PayrollPayStatement parmPayStatement(PayrollPayStatement _payStatement = payStatement)
    {
        payStatement = _payStatement;

        return payStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayStatementReversal</Name>
				<Source><![CDATA[
    public PayrollPayStatement parmPayStatementReversal(PayrollPayStatement _reversingPayStatement = reversingPayStatement)
    {
        reversingPayStatement = _reversingPayStatement;

        return reversingPayStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePayStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the <c>PayrollPayStatement</c> record by creating a duplicate record
    /// with negated amounts.
    /// </summary>
    private void reversePayStatement()
    {
        NumberSeq                       numberSeq;
        boolean                         doAccounting = (payStatement.SourceDocumentHeader != 0);

        // Copy the common fields from the original pay statement to the new one
        buf2Buf(payStatement, reversingPayStatement);

        // Allow a new source document to be created for this new pay statement rather than use the old which causes duplicate violation
        reversingPayStatement.SourceDocumentHeader = 0;

        // The Payment journal and Payment invoice fields should not be set automatically upon creation of the reversed pay statement
        reversingPayStatement.PaymentJournalBatchNum = '';
        reversingPayStatement.VendTrans = 0;

        // The new pay statement should default to Not Posted
        reversingPayStatement.PostedStatus = PayrollPayStatementPostedStatus::None;

        // Assign a new document number via the number sequence
        numberSeq = NumberSeq::newGetNum(NumberSeqReference::findReference(extendedTypeNum(PayrollPayStatementId)));
        reversingPayStatement.DocumentNumber = numberSeq.num();

        switch (payStatement.PaymentStatus)
        {
            // this will never happen, because if paymentStaus is Calculated, the reverse payment button will be disabled
            case PayrollPaymentStatus::Calculated:
                payStatement.PaymentStatus          = PayrollPaymentStatus::PaymentIssued;
                reversingPayStatement.PaymentStatus = PayrollPaymentStatus::PaymentIssued;
                break;

            case PayrollPaymentStatus::PaymentIssued: // payment status: finalized
            case PayrollPaymentStatus::SentToPaymentJournal:
                if (this.isAccountingDisabled())
                {
                    // if accounting is disabled, newly created reversing pay statement should be finalized and marked as posted.
                    reversingPayStatement.PaymentStatus = PayrollPaymentStatus::PaymentIssued;
                    reversingPayStatement.PostedStatus = PayrollPayStatementPostedStatus::Posted;
                }
                else if (reversingPayStatement.CreationType == PayrollPayStatementCreationType::Generated
                            && reversingPayStatement.PaymentType == PayrollPaymentType::Manual)
                {
                    // if CreationType is Generated and PaymentType is Manual, newly created reversing pay statement should be marked as finalized.
                    reversingPayStatement.PaymentStatus = PayrollPaymentStatus::PaymentIssued;
                }
                else
                {
                    // if not, let regular process take the course.
                    reversingPayStatement.PaymentStatus = PayrollPaymentStatus::Calculated;
                }
                break;
        }

        reversingPayStatement.GrossAccountingCurrencyAmount = -payStatement.GrossAccountingCurrencyAmount;
        reversingPayStatement.NetAccountingCurrencyAmount   = -payStatement.NetAccountingCurrencyAmount;
        reversingPayStatement.IsReversed                    = NoYes::Yes;
        reversingPayStatement.ReversedPayStatement          = payStatement.RecId;
        reversingPayStatement.BatchNumber                   = PayrollPayStatementGeneration::getBatchNumber();
        reversingPayStatement.insert(doAccounting);

        payStatement.IsReversed = true;
        payStatement.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePayStatementAccrualBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the <c>PayrollPayStatementAccrualBalance</c> records for the pay statement
    /// being reversed.
    /// </summary>
    private void reversePayStatementAccrualBalance()
    {
        PayrollPayStatementAccrualBalance   originalPayStatementAccrualBalance, reversingPayStatementAccrualBalance;

        // Loop through all accrual balance lines for the pay statement to reverse them
        while select originalPayStatementAccrualBalance
            where originalPayStatementAccrualBalance.PayStatement == payStatement.RecId
        {
            buf2Buf(originalPayStatementAccrualBalance, reversingPayStatementAccrualBalance);

            reversingPayStatementAccrualBalance.PayStatement        = reversingPayStatement.RecId;
            reversingPayStatementAccrualBalance.AccruedHours        = -originalPayStatementAccrualBalance.AccruedHours;
            reversingPayStatementAccrualBalance.UsedHours           = -originalPayStatementAccrualBalance.UsedHours;
            reversingPayStatementAccrualBalance.TotalAccruedHours   -= originalPayStatementAccrualBalance.AccruedHours;
            reversingPayStatementAccrualBalance.TotalUsedHours      -= originalPayStatementAccrualBalance.UsedHours;
            reversingPayStatementAccrualBalance.TotalAvailableHours -= (originalPayStatementAccrualBalance.AccruedHours - originalPayStatementAccrualBalance.UsedHours);
            reversingPayStatementAccrualBalance.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePayStatementBenefitLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the <c>PayrollPayStatementBenefitLine</c> records for the pay statement
    /// being reversed.
    /// </summary>
    private void reversePayStatementBenefitLines()
    {
        PayrollPayStatementBenefitLine      originalBenefitLine,
                                            reversingBenefitLine;
        boolean                             doAccounting = (reversingPayStatement.SourceDocumentHeader != 0);

        // Loop through all benefit lines for the pay statement to reverse them
        while select originalBenefitLine
            where originalBenefitLine.PayStatement == payStatement.RecId
            &&    originalBenefitLine.IsMarkedForRemoval == NoYes::No
        {
            // Copy the common fields from the original pay statement benefit line to the new one
            reversingBenefitLine.data(originalBenefitLine);

            // Allow a new source document line to be created for this new pay statement line rather than use the old which causes duplicate violation
            reversingBenefitLine.SourceDocumentLine = 0;

            // We don't want to VendTrans field populated as part of the reversal
            reversingBenefitLine.VendTrans = 0;

            reversingBenefitLine.PayStatement               = reversingPayStatement.RecId;
            reversingBenefitLine.AccountingCurrencyAmount   = -originalBenefitLine.AccountingCurrencyAmount;
            reversingBenefitLine.ReversedPayStatementLine   = originalBenefitLine.RecId;
            reversingBenefitLine.insert(null, doAccounting);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePayStatementEarningLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the <c>PayrollPayStatementEarningLine</c> records for the pay statement
    /// being reversed.
    /// </summary>
    private void reversePayStatementEarningLines()
    {
        PayrollPayStatementEarningLine      originalEarningLine,
                                            reversingEarningLine;
        boolean                             doAccounting = (reversingPayStatement.SourceDocumentHeader != 0);

        // Loop through all earning lines for the pay statement to reverse them
        while select originalEarningLine
            where originalEarningLine.PayStatement == payStatement.RecId
            &&    originalEarningLine.IsMarkedForRemoval == NoYes::No
        {
            // Copy the common fields from the original pay statement earning line to the new one
            reversingEarningLine.data(originalEarningLine);

            // Allow a new source document line to be created for this new pay statement line rather than use the old which causes duplicate violation
            reversingEarningLine.SourceDocumentLine = 0;

            // We don't want to VendTrans field populated as part of the reversal
            reversingEarningLine.VendTrans = 0;

            reversingEarningLine.PayStatement               = reversingPayStatement.RecId;
            reversingEarningLine.AccountingCurrencyAmount   = -originalEarningLine.AccountingCurrencyAmount;
            reversingEarningLine.Quantity                   = -originalEarningLine.Quantity;
            reversingEarningLine.ReversedPayStatementLine   = originalEarningLine.RecId;
            reversingEarningLine.insert(null, doAccounting);

			// The insert call updates the record so we need to grab the latest to ensure the source document line field is populated in this buffer
			reversingEarningLine.reread();
			reversingEarningLine.createProjAccountDistForEarnings();

            // Break the link for any earning statement lines that are used by the reversed pay statement earning line & make it available again
            PayrollPayStatementEarningLine::removePayStatementLineLinks(originalEarningLine.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePayStatementTaxLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the <c>PayrollPayStatementTaxLine</c> records for the pay statement
    /// being reversed.
    /// </summary>
    /// <remarks>
    /// <c>PrlUSTaxTransactionHistory</c> records for each tax statement line
    /// are also reversed.
    /// </remarks>
    private void reversePayStatementTaxLines()
    {
        PayrollPayStatementTaxLine      originalTaxLine,
                                        reversingTaxLine;
        PayrollUSTaxTransactionHistory  originalTaxHistory,
                                        reversingTaxHistory;
        boolean                         doAccounting = (reversingPayStatement.SourceDocumentHeader != 0);

        // Loop through all tax lines for the pay statement to reverse them
        while select originalTaxLine
            where originalTaxLine.PayStatement == payStatement.RecId
            &&    originalTaxLine.IsMarkedForRemoval == NoYes::No
        {
            // Copy the common fields from the original pay statement tax line to the new one
            reversingTaxLine.data(originalTaxLine);

            // Allow a new source document line to be created for this new pay statement line rather than use the old which causes duplicate violation
            reversingTaxLine.SourceDocumentLine = 0;

            // We don't want to VendTrans field populated as part of the reversal
            reversingTaxLine.VendTrans = 0;

            reversingTaxLine.PayStatement               = reversingPayStatement.RecId;
            reversingTaxLine.AccountingCurrencyAmount   = -originalTaxLine.AccountingCurrencyAmount;
            reversingTaxLine.ReversedPayStatementLine   = originalTaxLine.RecId;
            reversingTaxLine.insert(null, doAccounting);
        }

        // Reverse each of the tax history records for the current pay statement being reversed
        while select originalTaxHistory
            where originalTaxHistory.PayStatement == payStatement.RecId
        {
            // Copy the common fields from the original tax history line to the new one
            buf2Buf(originalTaxHistory, reversingTaxHistory);

            reversingTaxHistory.PayStatement        = reversingPayStatement.RecId;
            reversingTaxHistory.CalculatedTaxAmount = -originalTaxHistory.CalculatedTaxAmount;
            reversingTaxHistory.ExcessWages         = -originalTaxHistory.ExcessWages;
            reversingTaxHistory.GrossSubjectWages   = -originalTaxHistory.GrossSubjectWages;
            reversingTaxHistory.GrossWages          = -originalTaxHistory.GrossWages;
            reversingTaxHistory.Hours               = -originalTaxHistory.Hours;
            reversingTaxHistory.SubjectWages        = -originalTaxHistory.SubjectWages;
            reversingTaxHistory.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (!payStatement.IsReversed)
        {
            ttsbegin;

            // Create the reversed pay statement header record
            this.reversePayStatement();

            // Reverse the pay statement earning lines for the original pay statement
            this.reversePayStatementEarningLines();

            // Reverse the pay statement benefit lines for the original pay statement
            this.reversePayStatementBenefitLines();

            // Reverse the pay statement tax lines for the original pay statement
            this.reversePayStatementTaxLines();

            // Reverse the pay statement benefit accrual balance lines for the original pay statement.
            this.reversePayStatementAccrualBalance();

            // Reverse the PrlDeductionArrear record for the original pay statement
            this.reversePrlDeductionArrearRecovery();

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Launches the <c>PayrollPayStatementReversal</c> class and sets all necessary parameters.
    /// </summary>
    /// <param name="_args">
    ///     The <c>Args</c> used during the reversal process.
    /// </param>
    /// <param name="_showDialog">
    ///     Whether or not a confirmation dialog should be displayed before the reversal process begins.
    /// </param>
    /// <exception cref="Exception::Error">
    ///     If the <c>Args</c> does not contain a <c>PayrollPayStatement</c> table buffer, then an exception is thrown.
    /// </exception>
    static void main(Args _args, boolean _showDialog = true)
    {
        PayrollPayStatementReversal payStatementReversal;

        payStatementReversal = new PayrollPayStatementReversal();

        if (!_args || _args.dataset() != tableNum(PayrollPayStatement))
        {
            throw error(strFmt("@SYS25516",funcName()));
        }

        // Retrieve and store the passed-in table buffer from the caller
        payStatementReversal.parmPayStatement(_args.record());

        if (PayrollPayStatementReversal::promptForReversalConfirmation(_showDialog))
        {
            payStatementReversal.runOperation();

            if (payStatementReversal.parmPayStatementReversal().RecId != 0)
            {
                info(strFmt("@Payroll:TheSelectedPayStatementWasSuccessfullyReversedTheFollowingRe", payStatementReversal.parmPayStatementReversal().DocumentNumber));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptForReversalConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks wheter the reversal is allowed or not. Also, shows confirmation dialog.
    /// </summary>
    /// <param name="_showDialog">
    /// A boolean value that indicates whether to show confirmation dialog or not; optional.
    /// </param>
    /// <returns>
    /// True if the reversal is allowed; otherwise false.
    /// </returns>
    static boolean promptForReversalConfirmation(boolean _showDialog = true)
    {
        boolean allowProceed;

        if (_showDialog)
        {
            if (Box::yesNo("@Payroll:WhenYouReverseThisPayStatementAReversingPayStatementWillBeCr", DialogButton::No) == DialogButton::Yes)
            {
                allowProceed = true;
            }
            else
            {
                allowProceed = false;
            }
        }
        else
        {
            allowProceed = true;
        }

        return allowProceed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reversePrlDeductionArrearRecovery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverses the <c>PRLDeductionArrear</c> record by creating an offsetting
    /// <c>PRLDeductionArrearRecovery</c>record.
    /// </summary>
    private void reversePrlDeductionArrearRecovery()
    {
        PRLDeductionArrear              originalPRLDeductionArrear;
        PRLDeductionArrearRecovery      reversePRLDeductionArrearRecovery;

        while select originalPRLDeductionArrear
            where originalPRLDeductionArrear.PayStatement == this.parmPayStatement().RecId
        {
            // Negate the amount and assign RecId of reversed pay statement for the reversed record
            reversePRLDeductionArrearRecovery.AccountingCurrencyAmount = -originalPRLDeductionArrear.AccountingCurrencyAmount;
            reversePRLDeductionArrearRecovery.DeductionArrear = originalPRLDeductionArrear.RecId;
            reversePRLDeductionArrearRecovery.OffsetType = PRLArrearOffsetType::Recovery;
            reversePRLDeductionArrearRecovery.PayStatement = this.parmPayStatementReversal().RecId;
            reversePRLDeductionArrearRecovery.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>