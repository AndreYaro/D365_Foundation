<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentSubmissionPresenter</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Newtonsoft.Json.Linq;

/// <summary>
/// A presenter for <c>BusinessDocumentSubmission</c> form.
/// </summary>
internal class BusinessDocumentSubmissionPresenter
{
    private FormDataSource submissionDataSource;
    private FormControl downloadDocumentButton;
    private FormControl generateReportButton;
    private FormComboBoxControl documentTypeComboBox;
    private Map documentTypes;
    private BusinessDocumentChorusProReportingService_FR reportingService;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>BusinessDocumentSubmissionPresenter</c> class.
    /// </summary>
    /// <param name = "_submissionDataSource">A <c>BusinessDocumentSubmission</c> table data source.</param>
    /// <param name = "_documentTypes">A map of document types by integer ids.</param>
    /// <param name = "_downloadDocumentButton">An update status button.</param>
    /// <param name = "_generateReportButton">A generate report button.</param>
    /// <param name = "_documentTypeComboBox">A document types combobox.</param>
    /// <returns>A new instance of the <c>BusinessDocumentSubmissionPresenter</c> class.</returns>
    public static BusinessDocumentSubmissionPresenter construct(
        FormDataSource _submissionDataSource,
        Map _documentTypes,
        FormControl _downloadDocumentButton,
        FormControl _generateReportButton,
        FormComboBoxControl _documentTypeComboBox)
    {
        var ret = new BusinessDocumentSubmissionPresenter();
        ret.submissionDataSource = _submissionDataSource;
        ret.downloadDocumentButton = _downloadDocumentButton;
        if (!FeatureStateProvider::IsFeatureEnabled(BusinessDocChorusProInvoicingIntegrationFeature_FR::instance()))
        {
            _generateReportButton.enabled(false);
            _generateReportButton.visible(false);
        }
        ret.generateReportButton = _generateReportButton;
        ret.documentTypeComboBox = _documentTypeComboBox;
        ret.documentTypes = _documentTypes;
        ret.reportingService = BusinessDocumentChorusProReportingService_FR::construct();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateControlsVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates controls visibility.
    /// </summary>
    public void updateControlsVisibility()
    {
        boolean batchSubmission = this.isBatchSubmission();
        downloadDocumentButton.enabled(!batchSubmission);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchSubmission</Name>
				<Source><![CDATA[
    private boolean isBatchSubmission()
    {
        boolean ret = false;
        if (documentTypes.exists(documentTypeComboBox.selection()))
        {
            RefTableId refTableId = documentTypes.lookup(documentTypeComboBox.selection());
            ret = refTableId == tableNum(BusinessDocumentBatchSubmission);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>downloadDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Downloads documents for selected <c>BusinessDocumentSubmission</c> records.
    /// </summary>
    public void downloadDocument()
    {
        const str fileName = 'output.zip';
        boolean markedRecordsFound;
        boolean invalidDocumentsFound;
        JArray executions = new JArray();

        if (ERForInvoicingRouteSwitch::shouldUseV2())
        {
            invalidDocumentsFound = this.fillExecutionIdsV2(executions);
        }
        else
        {
            invalidDocumentsFound = this.fillExecutionIds(executions);
        }

        if (executions.Count > 0)
        {
            if (invalidDocumentsFound)
            {
                warning("@BusinessDocumentSubmissionService:DocumentDownloadInvalidStatus");
            }

            var fileContentStream = BusinessDocumentServiceController::getOutputFileByExecutionId(executions);
            if (fileContentStream)
            {
                File::SendFileToUser(fileContentStream, fileName);
            }
        }
        else
        {
            warning("@BusinessDocumentSubmissionService:DocumentToDowloadNotSelected");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>generateReport</Name>
				<Source><![CDATA[
    public void generateReport()
    {
        BusinessDocumentSubmission submission = submissionDataSource.getFirst(1);
        
        if (!submission)
        {
            submission = submissionDataSource.cursor();
        }

        while (submission)
        {

            if (submission.State == BusinessDocumentState::Completed ||
                submission.State == BusinessDocumentState::Failed)
            {
                CustInvoiceJour custInvoice;
                RefRecId invoiceRecId = submission.RefRecId;
                RefTableId invoiceTableId = submission.RefTableId;
                InvoiceId invoiceId = this.getInvoiceId(invoiceRecId, invoiceTableId);
                BusinessDocumentChorusProInvoiceTypes_FR invoiceType = this.getInvoiceType(invoiceTableId);

                reportingService.createAndExportReport(invoiceTableId, invoiceId, invoiceRecId, invoiceType);
            }
            submission = submissionDataSource.getNext();
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>fillExecutionIds</Name>
				<Source><![CDATA[
    private boolean fillExecutionIds(JArray executions)
    {        
        boolean markedRecordsFound;
        boolean invalidDocumentsFound;

        BusinessDocumentSubmission submission = submissionDataSource.getFirst(1);
        while (submission)
        {
            markedRecordsFound = true;
            if (submission.ExecutionId
                && (submission.State == BusinessDocumentState::Completed
                    || submission.State == BusinessDocumentState::Pending
                    || submission.state == BusinessDocumentState::Scheduled))
            {
                executions.Add(submission.ExecutionId);
            }
            else
            {
                invalidDocumentsFound = true;
            }
            submission = submissionDataSource.getNext();
        }

        if (!markedRecordsFound)
        {
            submission = submissionDataSource.cursor();
            if (submission.RecId != 0
                && submission.ExecutionId
                && (submission.State == BusinessDocumentState::Completed
                    || submission.State == BusinessDocumentState::Pending
                    || submission.state == BusinessDocumentState::Scheduled))
            {
                executions.Add(submission.ExecutionId);
            }
        }

        return invalidDocumentsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillExecutionIdsV2</Name>
				<Source><![CDATA[
    private boolean fillExecutionIdsV2(JArray executions)
    {
        boolean markedRecordsFound;
        boolean invalidDocumentsFound;

        BusinessDocumentSubmission submission = submissionDataSource.getFirst(1);
        while (submission)
        {
            markedRecordsFound = true;
            if (submission.State == BusinessDocumentState::Completed
                    || submission.State == BusinessDocumentState::Pending
                    || submission.state == BusinessDocumentState::Scheduled)
            {
                var execution = BusinessDocumentExecutionRequest::findLatestExecutionByUID(submission.UID);
                executions.Add(execution.RecId);
            }
            else
            {
                invalidDocumentsFound = true;
            }
            submission = submissionDataSource.getNext();
        }

        if (!markedRecordsFound)
        {
            submission = submissionDataSource.cursor();
            if (submission.RecId != 0
                && (submission.State == BusinessDocumentState::Completed
                    || submission.State == BusinessDocumentState::Pending
                    || submission.state == BusinessDocumentState::Scheduled))
            {
                var execution = BusinessDocumentExecutionRequest::findLatestExecutionByUID(submission.UID);
                executions.Add(execution.RecId);
            }
        }

        return invalidDocumentsFound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceId</Name>
				<Source><![CDATA[
    private InvoiceId getInvoiceId(RecId _invoiceRecId, TableId _invoiceTableId)
    {
        InvoiceId ret;

        switch(_invoiceTableId)
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceJour custInvoice;
                select firstonly InvoiceId from custInvoice 
                    where custInvoice.RecId == _invoiceRecId;

                ret = custInvoice.InvoiceId;
                break;

            case tableNum(ProjInvoiceJour):
                ProjInvoiceJour projInvoice;
                select firstonly ProjInvoiceId from projInvoice 
                    where projInvoice.RecId == _invoiceRecId;

                ret = projInvoice.ProjInvoiceId;
                break;

            default:
                error("@BusinessDocumentSubmissionService:ChorusProReportInvalidDocument");
                break;

        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceType</Name>
				<Source><![CDATA[
    private BusinessDocumentChorusProInvoiceTypes_FR getInvoiceType(TableId _invoiceTableId)
    {
        BusinessDocumentChorusProInvoiceTypes_FR ret = BusinessDocumentChorusProInvoiceTypes_FR::None;
        switch(_invoiceTableId)
        {
            case tableNum(CustInvoiceJour):
                ret = BusinessDocumentChorusProInvoiceTypes_FR::CustomerInvoice;
                break;

            case tableNum(ProjInvoiceJour):
                ret = BusinessDocumentChorusProInvoiceTypes_FR::ProjectInvoice;
                break;

            default:
                break;
        }

        return ret;

    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>