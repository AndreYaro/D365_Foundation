<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventQualityReferenceTypeSales</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventQualityReferenceTypeSales</c> class typifies a sales reference document.
/// </summary>
[InventQualityReferenceTableName(tableStr(SalesLine)), InventQualityReferenceTableName(tableStr(SalesParmLine))]
[InventNonConformanceTypeFactoryAttribute(InventNonConformanceType::Cust), InventNonConformanceTypeFactoryAttribute(InventNonConformanceType::Service)]
[InventTestReferenceTypeFactoryAttribute(InventTestReferenceType::Sales)]
class InventQualityReferenceTypeSales extends InventQualityReferenceTypePurchSales
{
    SalesLine       salesLine;
    InventSiteId    inventSiteId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountRelation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTestAccountRelation</c> value for this reference document.
    /// </summary>
    /// <param name="_group">
    ///    A Boolean value that indicates whether to get the relation for account code group or table.
    /// </param>
    /// <returns>
    ///    The appropriate <c>InventTestAccountRelation</c> value.
    /// </returns>
    public InventTestAccountRelation accountRelation(boolean _group = false)
    {
        return _group ? salesLine.CustGroup : salesLine.CustAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditQuarantineOnFailure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the quarantine upon validation failure field can be edited.
    /// </summary>
    /// <returns>
    /// true if the field can be edited; otherwise, false
    /// </returns>
    public boolean allowEditQuarantineOnFailure()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventNonConformanceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on an <c>InventNonConformanceTable</c> buffer.
    /// </summary>
    /// <param name="_inventNonConformanceTable">
    ///    An <c>InventNonConformanceTable</c> buffer.
    /// </param>
    protected void initFromInventNonConformanceTable(InventNonConformanceTable _inventNonConformanceTable)
    {
        this.parmBuffer(SalesLine::findInventTransId(_inventNonConformanceTable.InventTransIdRef));
        super(_inventNonConformanceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the instance based on an <c>InventQualityOrderTable</c> buffer.
    /// </summary>
    /// <param name="_orderTable">
    ///    An <c>InventQualityOrderTable</c> buffer.
    /// </param>
    protected void initFromQualityOrder(InventQualityOrderTable _orderTable)
    {
        this.parmBuffer(SalesLine::findInventTransId(_orderTable.InventRefTransId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDirection</Name>
				<Source><![CDATA[
    public InventDirection inventDirection()
    {
        return InventDirection::Issue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventItemOrderSetupType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventItemOrderSetupType</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventItemOrderSetupType</c> value.
    /// </returns>
    public InventItemOrderSetupType inventItemOrderSetupType()
    {
        return InventItemOrderSetupType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventRefId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventRefId</c> value.
    /// </returns>
    public InventRefId inventRefId()
    {
        return salesLine.SalesId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventSiteId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventSiteId</c> value.
    /// </returns>
    public InventSiteId inventSiteId()
    {
        if (inventSiteId == '')
        {
            inventSiteId = salesLine.inventDim().InventSiteId;
        }

        return inventSiteId ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTransId</c> value for this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTransId</c> value.
    /// </returns>
    public InventTransId inventTransId()
    {
        return salesLine.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEligibleForQualityManagement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the reference document is eligible for quality management.
    /// </summary>
    /// <returns>
    ///    true if the reference document is eligible; otherwise, false.
    /// </returns>
    public boolean isEligibleForQualityManagement()
    {
        if (salesLine.QtyOrdered <= 0 && !this.isReturnOrderAllowedForQualityOrder())
        {
            return false;
        }

        // do not create quality orders for sales lines with direct delivery
        if (salesLine.DeliveryType == TradeLineDlvType::DropShip)
        {
            return false;
        }

        // do not create quality orders for canceled sales lines
        if (salesLine.SalesStatus == SalesStatus::Canceled)
        {
            return false;
        }

        // do not create quality orders for invoiced sales lines
        if (salesLine.SalesStatus == SalesStatus::Invoiced)
        {
            return checkFailed(strFmt("@SYS113823", salesLine.LineNum, salesLine.SalesId));
        }

        // do not create quality orders for non-inventoried lines
        if (!salesLine.isStocked())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnOrderAllowedForQualityOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is allowed to create quality orders for return sales orders.
    /// </summary>
    /// <returns>
    /// true, if it is allowed to create quality orders for return sales orders; otherwise, false.
    /// </returns>
    protected boolean isReturnOrderAllowedForQualityOrder()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    public Common parmBuffer(Common _buffer = salesLine)
    {
        if (_buffer is SalesParmLine)
        {
            SalesParmLine salesParmLine = _buffer as SalesParmLine;
            salesLine = salesParmLine.salesLine();
        }
        else
        {
            salesLine = _buffer;
        }

        defaultDimension  = salesLine.DefaultDimension ? salesLine.DefaultDimension : defaultDimension;
        inventDimId       = salesLine.InventDimId      ? salesLine.InventDimId      : inventDimId;
        itemId            = salesLine.ItemId           ? salesLine.ItemId           : itemId;
        inventSiteId      = '';

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTestReferenceType</c> value of this reference document.
    /// </summary>
    /// <returns>
    ///    The appropriate <c>InventTestReferenceType</c> value.
    /// </returns>
    public InventTestReferenceType referenceType()
    {
        return InventTestReferenceType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStatusIssueRangeValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets a range value for the <c>StatusIssue</c> field on the data source of the <c>InventTrans</c>
    ///    table that is based on the document status and test execution values.
    /// </summary>
    /// <param name="_qbrStatusIssue">
    ///    A query build range object.
    /// </param>
    /// <param name="_inventTestDocumentStatus">
    ///    A document status value.
    /// </param>
    /// <param name="_inventTestExecution">
    ///    A test execution value.
    /// </param>
    protected void setStatusIssueRangeValue(
        QueryBuildRange             _qbrStatusIssue,
        InventTestDocumentStatus    _inventTestDocumentStatus,
        InventTestExecution         _inventTestExecution)
    {
        if (        _inventTestDocumentStatus   == InventTestDocumentStatus::PackingSlip
            &&      _inventTestExecution        == InventTestExecution::Before)
        {
            _qbrStatusIssue.value(SysQuery::range(StatusIssue::Picked, StatusIssue::OnOrder));
        }
        else
        {
            _qbrStatusIssue.value(SysQuery::range(StatusIssue::ReservPhysical, StatusIssue::OnOrder));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>supportsInventoryBlocking</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the quality orders for sales orders support blocking for receipts.
    /// </summary>
    /// <returns>
    /// true if blocking for receipts is supported; otherwise, false.
    /// </returns>
    public boolean supportsInventoryBlocking()
    {
        if (salesLine.QtyOrdered >= 0 && !this.isReturnOrderAllowedForQualityOrder())
        {
            // Shipping items
            return false;
        }
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventQualityReferenceTypeSales construct()
    {
        return new InventQualityReferenceTypeSales();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>