<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceReportBatchJobCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class handles the price calculation logic for price report.
/// </summary>
internal class RetailPriceReportBatchJobCalculator
{
    const str RetailInstrumentationSegmentArea = 'PriceReport';

    private TmpRetailPriceListDisplayValues tmpRetailPriceListDisplayValues;
    // This is used for telemetry to tell how many items are involved in price calculation.
    private int64 numberOfRecords;

    private OMOperatingUnitRefRecId operatingUnitRecId;
    private date priceCalculationStartDate;
    private date priceCalculationEndDate;
    private boolean calculateVariantPrice;
    private boolean checkInventoryAvailability;
    private boolean displayPriceChangesOnly;

    private Query itemPriceQuery;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmOMOperatingUnitRecId</Name>
				<Source><![CDATA[
    public OMOperatingUnitRefRecId parmOMOperatingUnitRecId(OMOperatingUnitRefRecId _recId = operatingUnitRecId)
    {
        operatingUnitRecId = _recId;
        return _recId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculationStartDate</Name>
				<Source><![CDATA[
    public date parmCalculationStartDate(date _priceCalculationStartDate = priceCalculationStartDate)
    {
        priceCalculationStartDate = _priceCalculationStartDate;
        return _priceCalculationStartDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculationEndDate</Name>
				<Source><![CDATA[
    public date parmCalculationEndDate(date _priceCalculationEndDate = priceCalculationEndDate)
    {
        priceCalculationEndDate = _priceCalculationEndDate;
        return _priceCalculationEndDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalculateVariantPrice</Name>
				<Source><![CDATA[
    public boolean parmCalculateVariantPrice(boolean _calculateVariantPrice = calculateVariantPrice)
    {
        calculateVariantPrice = _calculateVariantPrice;
        return _calculateVariantPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckInventoryAvailability</Name>
				<Source><![CDATA[
    public boolean parmCheckInventoryAvailability(boolean _checkInventoryAvailability = checkInventoryAvailability)
    {
        checkInventoryAvailability = _checkInventoryAvailability;
        return _checkInventoryAvailability;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDisplayPriceChangesOnly</Name>
				<Source><![CDATA[
    public boolean parmDisplayPriceChangesOnly(boolean _displayPriceChangesOnly = displayPriceChangesOnly)
    {
        displayPriceChangesOnly = _displayPriceChangesOnly;
        return _displayPriceChangesOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// The constructor.
    /// </summary>
    /// <param name = "_contract">The price report contract.</param>
    void new(RetailPriceReportRDPContract _contract)
    {
        this.init(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the class.
    /// </summary>
    /// <param name = "_contract">The price report contract.</param>
    private void init(RetailPriceReportRDPContract _contract)
    {
        // Update in case user changes value in the dialog.
        RetailStoreTable store = RetailStoreTable::find(_contract.parmStoreNumber());
        OMOperatingUnit ou = RetailStoreTable::findOperatingUnit(store.RecId);

        this.operatingUnitRecId = ou.RecId;
        this.priceCalculationStartDate = _contract.parmCalculationStartDate();
        this.priceCalculationEndDate = _contract.parmCalculationEndDate();
        this.checkInventoryAvailability = _contract.parmCheckInventoryAvailability();
        this.calculateVariantPrice = _contract.parmCalculateVariantPrice();
        this.displayPriceChangesOnly = _contract.parmDisplayPriceChangesOnly();

        // The price report supports up to 7 days' price report.
        if (this.priceCalculationEndDate - this.priceCalculationStartDate > 6)
        {
            throw error("@RET_PRICECHANGES:PriceReportOnlyFor7Days");
        }

        if (_contract.parmCalculateVariantPrice())
        {
            itemPriceQuery = new Query(queryStr(RetailStoreItemPriceListWithVariants));
        }
        else
        {
            itemPriceQuery = new Query(queryStr(RetailStoreItemPriceListWithoutVariants));
        }

        // Initialize query.
        itemPriceQuery.dataSourceTable(tableNum(RetailAssortmentLookupChannelGroup))
            .addRange(fieldNum(RetailAssortmentLookupChannelGroup, OMOperatingUnitId))
            .value(queryValue(this.operatingUnitRecId));

        if (this.checkInventoryAvailability)
        {
            // Join invent sum table to check availability.
            QueryBuildDataSource qbds = itemPriceQuery.dataSourceTable(tableNum(InventTable)).addDataSource(tablenum(InventSum));
            qbds.addRange(fieldnum(InventSum, AvailPhysical)).value(strFmt('(%1.%2 > 0)', qbds.name(), fieldStr(InventSum, AvailPhysical)));
            qbds.relations(false);
            qbds.joinMode(joinMode::ExistsJoin);
            qbds.addLink(fieldNum(InventTable, ItemId), fieldNum(InventSum, ItemId));
        }

        // Use default language id.
        LanguageId languageId = LanguageTable::defaultLanguage();
        itemPriceQuery.dataSourceTable(tableNum(EcoResProductTranslation))
            .addRange(fieldNum(EcoResProductTranslation, LanguageId))
            .value(SysQuery::value(languageId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTmpDBInstanceToStoreValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the tmp table to store the price report values.
    /// </summary>
    /// <param name = "_priceListValues">The tmp table instance.</param>
    public void setTmpDBInstanceToStoreValues(TmpRetailPriceListDisplayValues _priceListValues)
    {
        this.tmpRetailPriceListDisplayValues = _priceListValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceReportDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the price report db.
    /// </summary>
    /// <returns>A tmp db which has the price report records.</returns>
    public TmpRetailPriceListDisplayValues getPriceReportDataSource()
    {
        using(var instrumentation = RetailPricingInstrumentationSegment::construct(RetailInstrumentationSegmentArea, methodStr(RetailPriceReportBatchJobCalculator, getPriceReportDataSource)))
        {
            TmpRetailPriceListDisplayValues tmpRetailPriceListDisplayValuesLocal = this.getPriceListForCallerOperatingUnit();
            instrumentation.addExtendedData(varStr(numberOfRecords), int642Str(numberOfRecords));
            return tmpRetailPriceListDisplayValuesLocal;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPriceListForCallerOperatingUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate and populate price to tmp db.
    /// </summary>
    /// <returns>A tmp db which stored the price list.</returns>
    private TmpRetailPriceListDisplayValues getPriceListForCallerOperatingUnit()
    {
        RetailChannelTable localChannelTable = RetailChannelTable::findByOperatingUnitId(this.operatingUnitRecId);
        RefRecId channelRecId = localChannelTable.RecId;
        List priceDiscountLines = new List(Types::Class);
        boolean calculatePrice = true;
        SalesUnit salesUnit;
        QueryRun queryRun = new QueryRun(this.itemPriceQuery);

        RecordInsertList listOfDisplayDetails;
        TmpRetailPriceListDisplayValues tmpRetailPriceListDisplayValuesLocal = this.tmpRetailPriceListDisplayValues;

        listOfDisplayDetails = new RecordInsertList(tableNum(TmpRetailPriceListDisplayValues),
                                                    false, // skip insert
                                                    false, // skip database log
                                                    false, // skip events
                                                    false, // skip aos validation
                                                    false, // skip RLS validation
                                                    tmpRetailPriceListDisplayValuesLocal);

        while (queryRun.next())
        {
            calculatePrice = true;

            RetailAssortmentLookup localAssortmentLookup = queryRun.get(tableNum(RetailAssortmentLookup));
            InventTable localInventTable = queryRun.get(tableNum(InventTable));
            InventDimCombination localInventDimCombination = queryRun.get(tableNum(InventDimCombination));
            InventDim localInventDim = queryRun.get(tableNum(InventDim));
            EcoResProductTranslation productTranslation = queryRun.get(tableNum(EcoResProductTranslation));

            if (!localInventDim.RecId && localInventDimCombination.RetailVariantId)
            {
                localInventDimCombination = InventDimCombination::findVariantId(localInventDimCombination.RetailVariantId);
                localInventDim = InventDim::find(localInventDimCombination.InventDimId);
            }

            // If check availability is required and product has no physical availability, the calculation should skip this product.
            if (this.checkInventoryAvailability
                    && !RetailPriceListParameters::checkInventoryAvailabilityForProduct(localChannelTable, localInventTable, localInventDim))
            {
                calculatePrice = false;
            }

            if (calculatePrice)
            {
                salesUnit = InventTableModule::find(localInventTable.ItemId, ModuleInventPurchSales::Sales).UnitId;

                RetailPriceDiscountLine priceDiscountLine = new RetailPriceDiscountLine();
                priceDiscountLine.parmChannelRefRecId(channelRecId);
                priceDiscountLine.parmInventDimId(localInventDimCombination.InventDimId);
                priceDiscountLine.parmRetailVariantId(localInventDimCombination.RetailVariantId);
                priceDiscountLine.parmItemId(localInventTable.ItemId);
                // The price report only calculates price for a single product. Set quantity to 1.
                priceDiscountLine.parmQty(1);
                priceDiscountLine.parmReferenceRecId(localAssortmentLookup.RecId);
                priceDiscountLine.parmSalesUnit(salesUnit);

                priceDiscountLines.addEnd(priceDiscountLine);

                tmpRetailPriceListDisplayValuesLocal.clear();
                tmpRetailPriceListDisplayValuesLocal.AssortmentRecId = localAssortmentLookup.RecId;
                tmpRetailPriceListDisplayValuesLocal.ChannelRecId = channelRecId;
                tmpRetailPriceListDisplayValuesLocal.ItemId = localInventTable.ItemId;
                tmpRetailPriceListDisplayValuesLocal.VariantId = localInventDimCombination.RetailVariantId;
                tmpRetailPriceListDisplayValuesLocal.ProductName = productTranslation.Name;
                tmpRetailPriceListDisplayValuesLocal.Currency = localChannelTable.Currency;

                if (localInventDim)
                {
                    tmpRetailPriceListDisplayValuesLocal.VariantName = localInventDim.preFixValue();
                    tmpRetailPriceListDisplayValuesLocal.Style = localInventDim.InventStyleId;
                    tmpRetailPriceListDisplayValuesLocal.Color = localInventDim.InventColorId;
                    tmpRetailPriceListDisplayValuesLocal.Size = localInventDim.InventSizeId;
                    tmpRetailPriceListDisplayValuesLocal.Config = localInventDim.configId;
                }

                listOfDisplayDetails.add(tmpRetailPriceListDisplayValuesLocal);
                ++numberOfRecords;
            }
        }

        listOfDisplayDetails.insertDatabase();

        // Empty price list means no price calculation is needed.
        if (!priceDiscountLines.elements())
        {
            return tmpRetailPriceListDisplayValuesLocal;
        }

        date tempDate = this.priceCalculationStartDate;
        int numberOfDays = 1;

        while(tempDate <= this.priceCalculationEndDate)
        {
            utcdatetime transactionUTCTime = DateTimeUtil::newDateTime(tempDate, 0, DateTimeUtil::getUserPreferredTimeZone());

            // Calculate the price with the right time with the respect of the channel timezone.
            RetailPricingCalculatorCreator::getInstance().createPriceCheck().calculateIndependentPriceDiscountsWithDateTime(
                channelRecId, priceDiscountLines,
                RetailPricingEngineHelper::getSessionDateTimeInChannelTimeZone(channelRecId, transactionUTCTime));

            this.updatePriceReportRecords(priceDiscountLines, numberOfDays);

            numberOfDays++;
            tempDate++;
        }

        return this.tmpRetailPriceListDisplayValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceReportRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update price for price report db.
    /// </summary>
    /// <param name = "_priceDiscountLines">The price discount lines.</param>
    /// <param name = "_numberOfDays">The day number.</param>
    private void updatePriceReportRecords(
        List _priceDiscountLines, int _numberOfDays)
    {
        RetailPriceDiscountLine priceDiscountLine;

        ListEnumerator priceDiscountLinesEnumerator = _priceDiscountLines.getEnumerator();

        ttsbegin;
        while (priceDiscountLinesEnumerator.moveNext())
        {
            priceDiscountLine = priceDiscountLinesEnumerator.current();
            TmpRetailPriceListDisplayValues priceListLine = this.selectPriceListRecordForUpdate(priceDiscountLine);
            Price activePrice = priceDiscountLine.parmPrice() - priceDiscountLine.parmDiscount();

            boolean dashOutPrice = false;
            if (_numberOfDays > 1)
            {
                dashOutPrice = this.displayPriceChangesOnly && activePrice == priceListLine.ActivePrice;
            }
            // Active price of tmp db is not used for price report.
            // Use this to store latest active price.
            priceListLine.ActivePrice = activePrice;
            
            str activePriceString = dashOutPrice ? '-' : strFmt("%1", activePrice);
            
            switch(_numberOfDays)
            {
                case 1:
                    priceListLine.PriceDay1 = activePriceString;
                    break;
                case 2:
                    priceListLine.PriceDay2 = activePriceString;
                    break;
                case 3:
                    priceListLine.PriceDay3 = activePriceString;
                    break;
                case 4:
                    priceListLine.PriceDay4 = activePriceString;
                    break;
                case 5:
                    priceListLine.PriceDay5 = activePriceString;
                    break;
                case 6:
                    priceListLine.PriceDay6 = activePriceString;
                    break;
                case 7:
                    priceListLine.PriceDay7 = activePriceString;
                    break;
            }

            priceListLine.update();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectPriceListRecordForUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Select price report record  for update by price discount line.
    /// </summary>
    /// <param name = "_line">The price discount line.</param>
    /// <returns>A record.</returns>
    private TmpRetailPriceListDisplayValues selectPriceListRecordForUpdate(RetailPriceDiscountLine _line)
    {
        TmpRetailPriceListDisplayValues tmpRetailPriceListDisplayValuesLocal = this.tmpRetailPriceListDisplayValues;

        select forupdate tmpRetailPriceListDisplayValuesLocal
            where tmpRetailPriceListDisplayValuesLocal.AssortmentRecId == _line.parmReferenceRecId()
            && tmpRetailPriceListDisplayValuesLocal.ChannelRecId == _line.parmChannelRefRecId()
            && tmpRetailPriceListDisplayValuesLocal.ItemId == _line.parmItemId()
            && tmpRetailPriceListDisplayValuesLocal.VariantId == _line.parmRetailVariantId();

        return tmpRetailPriceListDisplayValuesLocal;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>