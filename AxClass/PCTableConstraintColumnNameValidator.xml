<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PcTableConstraintColumnNameValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Validates that a given table constraint column name uses the supported syntax.
/// </summary>
class PcTableConstraintColumnNameValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a given columns uses the supported syntax.
    /// </summary>
    /// <param name="_columnName">
    /// A table constraint column name.
    /// </param>
    /// <returns>
    /// true if the column name is valid; otherwise, false.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    /// Can throw a CLR exception.
    /// </exception>
    public boolean validate(str _columnName)
    {
        System.Exception    exception;
        System.Exception    innerException;

        boolean ret = false;

        // interop permission to allow clr code execution
        InteropPermission interopPermission = new InteropPermission(InteropKind::ClrInterop);

        // the regular expression definition
        str regex = '^([a-z]|[A-Z])([a-z]|[A-Z]|[0-9]|_)*'; // starts with a-z or A-Z followed by zero or more (a-z or A-Z or 0-9 or _)

        // the regular expression object
        System.Text.RegularExpressions.Regex reg;

        // the matching object
        System.Text.RegularExpressions.Match mat;

        // asserts the clr interop permission
        interopPermission.assert();

        try
        {
            reg = new System.Text.RegularExpressions.Regex(regex);

            // tests the string against the regular expression
            mat = reg.Match(_columnName);

            // tests if there was a match
            if (mat.get_Success())
            {
                ret = true;
            }
            else
            {
                ret = false;
            }
        }
        catch (Exception::CLRError)
        {
            exception = CLRInterop::getLastException();      // Ignore this.
            innerException = exception.get_InnerException(); // This is the real exception.

            ApplicationUnhandledExceptionLogger::logCLRException(exception);
            throw error(innerException.get_Message());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PCTableConstraintColumnNameValidator construct()
    {
        return new PCTableConstraintColumnNameValidator();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>