<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceTransAggregator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Define the aggregation rules to be used when posting project invoices.
/// </summary>
class ProjInvoiceTransAggregator_BR
{
    #define.Credit("credit")
    #define.Normal("normal")

    ProjParameters projParameters;

    ProjInvoiceEmpl     projInvoiceEmpl;
    ProjInvoiceCost     projInvoiceCost;
    ProjInvoiceRevenue  projInvoiceRevenue;
    ProjInvoiceOnAcc    projInvoiceOnAcc;
    ProjInvoiceItem     projInvoiceItem;

    ProjInvoiceTable    projInvoiceTable;
    ProjInvoiceJour     projInvoiceJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>aggregate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Aggregate <c>ProjInvoiceTransMap</c> into <c>FiscalDocumentLineParmData_BR</c>
    /// </summary>
    /// <param name="_firstProjInvoiceTrans">
    /// The <c>ProjInvoiceTransMap</c> record to aggregate
    /// </param>
    /// <param name="_toBeAggregated">
    /// The <c>FiscalDocumentLineParmData_BR</c> object to be aggregated
    /// </param>
    public void aggregate(ProjInvoiceTransMap_MX _firstProjInvoiceTrans, FiscalDocumentLineParmData_BR _toBeAggregated)
    {
        LineAmount lineAmount = CurrencyExchangeHelper::amountCur2MST(_firstProjInvoiceTrans.LineAmountCur, projInvoiceJour.CurrencyId, projInvoiceJour.ExchRate);

        Amount amount = lineAmount + _toBeAggregated.parmLineAmount();
        Qty    qty    = _firstProjInvoiceTrans.Qty + _toBeAggregated.parmQuantity();

        _toBeAggregated.parmLineAmount(amount);
        _toBeAggregated.parmQuantity(qty);

        if (qty)
        {
            _toBeAggregated.parmUnitPrice(amount / qty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>beginNewAggregation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called every time a new aggregation is created, which is whenever a new key is identified.
    /// </summary>
    /// <param name="_firstProjInvoiceTrans">
    /// The <c>ProjInvoiceTransMap</c> record to aggregate
    /// </param>
    /// <param name="_tobeAggregated">
    /// The <c>FiscalDocumentLineParmData_BR</c> object to be aggregated
    /// </param>
    public void beginNewAggregation(ProjInvoiceTransMap_MX _firstProjInvoiceTrans, FiscalDocumentLineParmData_BR _tobeAggregated)
    {
        ItemName itemName;

        if (projParameters.GroupInvoiceByLineSpecific_BR)
        {
            itemName = _firstProjInvoiceTrans.LineDescription;

            _tobeAggregated.parmRefRecId        (_firstProjInvoiceTrans.RecId);
            _tobeAggregated.parmRefTableId      (_firstProjInvoiceTrans.TableId);
            _tobeAggregated.parmInventTransId   (_firstProjInvoiceTrans.InventTransId);
        }
        else
        {
            itemName = '';

            if (projParameters.GroupInvoiceByCategoryId_BR)
            {
                itemName += ProjCategory::find(this.projCategoryId(_firstProjInvoiceTrans)).Name;
            }

            if (projParameters.GroupInvoiceByTransTxt_BR || _firstProjInvoiceTrans.TableId == tableNum(ProjInvoiceOnAcc))
            {
                itemName += _firstProjInvoiceTrans.LineDescription;
            }

            if (projParameters.GroupInvoiceByEmplId_BR)
            {
                itemName += this.emplId(_firstProjInvoiceTrans);
            }

            if (projParameters.GroupInvoiceByTransStatus_BR)
            {
                if (_firstProjInvoiceTrans.LineAmountCur < 0)
                {
                    itemName += #Credit;
                }
                else
                {
                    itemName += #Normal;
                }
            }
        }
        _tobeAggregated.parmItemId      (this.serviceCode(_firstProjInvoiceTrans));
        _tobeAggregated.parmDescription (itemName);
        _tobeAggregated.parmUnit        (BrazilParameters::find().ProjectInvoiceTransUnit);
        _tobeAggregated.parmItemType    (FiscalDocumentLineItemType_BR::Service);
        _tobeAggregated.parmServiceCode (this.serviceCode(_firstProjInvoiceTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>emplId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the employee ralated to a fiscalDocTrans
    /// </summary>
    /// <param name="_fiscalDocTrans">
    /// Fiscal document trans.
    /// </param>
    /// <returns>
    /// Employee.
    /// </returns>
    private EmplItemId emplId(ProjInvoiceTransMap_MX _fiscalDocTrans)
    {
        ResourceRecId resource;

        switch (_fiscalDocTrans.TableId)
        {
            case (tableNum(ProjInvoiceEmpl)) :
                resource = this.findProjInvoiceEmpl(_fiscalDocTrans.RecId).Resource;
                break;

            case (tableNum(ProjInvoiceCost)) :
                resource = this.findProjInvoiceCost(_fiscalDocTrans.RecId).Resource;
                break;

            case (tableNum(ProjInvoiceRevenue)) :
                resource = this.findProjInvoiceRevenue(_fiscalDocTrans.RecId).Resource;
                break;

            case (tableNum(ProjInvoiceItem)) :
            case (tableNum(ProjInvoiceOnAcc)) :
                resource = 0;
                break;

            default : resource = 0;
        }

        return ResourceFacade::getID(resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjInvoiceCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find projInvoiceCost by RecId.
    /// </summary>
    /// <param name="_recId">
    /// RecId of the transaction
    /// </param>
    /// <returns>
    /// ProjInvoiceCost;
    /// </returns>
    private ProjInvoiceCost findProjInvoiceCost(RecId _recId)
    {
        if (_recId != projInvoiceCost.RecId)
        {
            select projInvoiceCost
                where projInvoiceCost.RecId == _recId;
        }

        return projInvoiceCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjInvoiceEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find projInvoiceEmpl by RecId.
    /// </summary>
    /// <param name="_recId">
    /// RecId of the transaction
    /// </param>
    /// <returns>
    /// ProjInvoiceEmpl;
    /// </returns>
    private ProjInvoiceEmpl findProjInvoiceEmpl(RecId _recId)
    {
        if (_recId != projInvoiceEmpl.RecId)
        {
            select projInvoiceEmpl
                where projInvoiceEmpl.RecId == _recId;
        }

        return projInvoiceEmpl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProjInvoiceRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find projInvoiceRevenue by RecId.
    /// </summary>
    /// <param name="_recId">
    /// RecId of the transaction
    /// </param>
    /// <returns>
    /// projInvoiceRevenue;
    /// </returns>
    private ProjInvoiceRevenue findProjInvoiceRevenue(RecId _recId)
    {
        if (_recId != projInvoiceRevenue.RecId)
        {
            select projInvoiceRevenue
                where projInvoiceRevenue.RecId == _recId;
        }

        return projInvoiceRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceJour</Name>
				<Source><![CDATA[
    private ProjInvoiceJour getProjInvoiceJour(ProjInvoiceTransMap_MX _projInvoiceTransMap)
    {
        if (!projInvoiceJour)
        {
            select projInvoiceJour
                where projInvoiceJour.ProjInvoiceId     == _projInvoiceTransMap.ProjInvoiceId
                    && projInvoiceJour.ProjInvoiceId    == _projInvoiceTransMap.ProjInvoiceId
                    && projInvoiceJour.InvoiceDate      == _projInvoiceTransMap.InvoiceDate;
        }

        return projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceTable</Name>
				<Source><![CDATA[
    private ProjInvoiceTable getProjInvoiceTable(ProjInvoiceTransMap_MX _projInvoiceTransMap)
    {
        if (!projInvoiceTable)
        {
            projInvoiceTable = ProjInvoiceTable::find(this.getProjInvoiceJour(_projInvoiceTransMap).ProjInvoiceProjId);
        }

        return projInvoiceTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the key that will be used in the aggregation
    /// </summary>
    /// <param name="_projInvoiceTransMap">
    /// The source to create the key
    /// </param>
    /// <returns>
    /// A string containing the key of the aggregation
    /// </returns>
    /// <remarks>
    /// ItemId have to be part of the key otherwise sales order items will be grouped.
    /// </remarks>
    public str key(ProjInvoiceTransMap_MX _projInvoiceTransMap)
    {
        str key;

        key += this.serviceCode(_projInvoiceTransMap);

        key += _projInvoiceTransMap.TaxGroupId;
        key += _projInvoiceTransMap.TaxItemGroupId;

        if (projParameters.GroupInvoiceByCategoryId_BR)
        {
            key += this.projCategoryId(_projInvoiceTransMap);
        }

        if (projParameters.GroupInvoiceByEmplId_BR)
        {
            key += this.emplId(_projInvoiceTransMap);
        }

        if (projParameters.GroupInvoiceByTransTxt_BR)
        {
            key += _projInvoiceTransMap.LineDescription;
        }

        if (projParameters.GroupInvoiceByLineSpecific_BR)
        {
            key += _projInvoiceTransMap.InventTransId;
        }

        if (projParameters.GroupInvoiceByTransStatus_BR)
        {
            if (_projInvoiceTransMap.LineAmountCur < 0)
            {
                key += #Credit;
            }
            else
            {
                key += #Normal;
            }
        }

        return key;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        projParameters = ProjParameters::find();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projCategoryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the category ralated to a fiscalDocTrans
    /// </summary>
    /// <param name="_projInvoiceTransMap">
    /// Fiscal document trans.
    /// </param>
    /// <returns>
    /// Category.
    /// </returns>
    private ProjCategoryId projCategoryId(ProjInvoiceTransMap_MX _projInvoiceTransMap)
    {
        if (_projInvoiceTransMap.TableId == tableNum(ProjInvoiceOnAcc))
        {
            return '';
        }

        return _projInvoiceTransMap.CategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax service code associated to the current project line
    /// </summary>
    /// <param name="_projInvoiceTransMap">
    /// Project invoice lines mapping
    /// </param>
    /// <returns>
    /// The tax service code
    /// </returns>
    protected TaxServiceCodeId_BR serviceCode(ProjInvoiceTransMap_MX _projInvoiceTransMap)
    {
        LogisticsPostalAddress  logisticsPostalAddress;
        TaxServiceCodeId_BR     taxServiceCodeId;

        if (_projInvoiceTransMap.TableId == tableNum(ProjInvoiceOnAcc))
        {
            taxServiceCodeId = ProjOnAccTrans::find(_projInvoiceTransMap.InventTransId).TaxServiceCodeId_BR;
        }
        else
        {
            taxServiceCodeId = ProjCategory::find(_projInvoiceTransMap.CategoryId).TaxServiceCodeId_BR;
        }

        if (this.getProjInvoiceTable(_projInvoiceTransMap).TaxServiceCodeOnDlvAddress_BR)
        {
            logisticsPostalAddress = LogisticsPostalAddress::findRecId(this.getProjInvoiceJour(_projInvoiceTransMap).DeliveryPostalAddress);

            taxServiceCodeId = TaxServiceCode_BR::findDlvServiceCode(taxServiceCodeId, logisticsPostalAddress.CountryRegionId, logisticsPostalAddress.State, logisticsPostalAddress.City).ServiceCodeId;
        }

        return taxServiceCodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjInvoiceTransAggregator_BR construct()
    {
        return new ProjInvoiceTransAggregator_BR();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>