<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerFiscalCalendarPeriodCloseUntransferredSelfHeal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the self-healing, where possible, of untransferred transactions preventing the successful completion of 
/// period close events in <c>LedgerFiscalCalendarPeriod</c>, if such untransferred state is caused by having status inconsistent 
/// with transferred data, for example when the transferred data is missing, but the line is marked as transferred.
/// </summary>
public class LedgerFiscalCalendarPeriodCloseUntransferredSelfHeal
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>periodQualifiesForSelfHealing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for contraindications to applying the self-healing routine. This assumes the data is already in a state that requires healing.
    /// </summary>
    /// <param name = "_ledgerFiscalCalendarPeriod">The <c>LedgerFiscalCalendarPeriod</c> record.</param>
    /// <returns>Returns false if a data configuration is detected that is known to make the self-healing not applicable; otherwise true.</returns>
    public static boolean periodQualifiesForSelfHealing(LedgerFiscalCalendarPeriod _ledgerFiscalCalendarPeriod)
    {
        SubledgerJournalEntryNotTransferred sljNotTransferred;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        SubledgerJournalEntry subledgerJournalEntry;
        AccountingEvent accountingEvent;

        FiscalCalendarPeriod currentPeriod = FiscalCalendarPeriod::find(_ledgerFiscalCalendarPeriod.FiscalCalendarPeriod);

        LedgerFiscalCalendarPeriod originalLedgerFiscalCalendarPeriod = _ledgerFiscalCalendarPeriod.orig();

        // if period is already closed or on hold, automatic healing is not possible, since the transfer would not work in those states
        if (originalLedgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::Closed || originalLedgerFiscalCalendarPeriod.Status == FiscalPeriodStatus::OnHold)
        {
            return false;
        }

        // normally eligible SubledgerJournalEntry, but there is a GeneralJournalEntry by the same voucher, data area and date,
        // indicating that a transfer happened in the past, even though a linking record is missing.

        GeneralJournalEntry generalJournalEntry;
        select firstonly RecId from subledgerJournalEntry
            where subledgerJournalEntry.FiscalCalendarPeriod == currentPeriod.RecId
                && subledgerJournalEntry.Ledger == _ledgerFiscalCalendarPeriod.Ledger
                && subledgerJournalEntry.TransferId != 0
                exists join accountingEvent
                    where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                exists join generalJournalEntry 
                    where generalJournalEntry.SubledgerVoucher == subledgerJournalEntry.Voucher
                        && generalJournalEntry.SubledgerVoucherDataAreaId == subledgerJournalEntry.VoucherDataAreaId
                        && generalJournalEntry.AccountingDate == accountingEvent.AccountingDate
                notexists join subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId;

        if (subledgerJournalEntry)
        {
            return false; //has contraindications
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyHealing</Name>
				<Source><![CDATA[
    public static void applyHealing(LedgerFiscalCalendarPeriod _ledgerFiscalCalendarPeriod)
    {
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        SubledgerJournalEntry subledgerJournalEntry;
        AccountingEvent accountingEvent;

        FiscalCalendarPeriod currentPeriod = FiscalCalendarPeriod::find(_ledgerFiscalCalendarPeriod.FiscalCalendarPeriod);

        // update accounting event state to pre-transfer
        update_recordset accountingEvent
            setting State = AccountingEventState::Journalized
            exists join subledgerJournalEntry
                where  subledgerJournalEntry.AccountingEvent == accountingEvent.RecId
                    && subledgerJournalEntry.Ledger == _ledgerFiscalCalendarPeriod.Ledger
                    && subledgerJournalEntry.FiscalCalendarPeriod == currentPeriod.RecId
                    && subledgerJournalEntry.TransferId != 0
            notexists join subledgerVoucherGeneralJournalEntry
                where subledgerVoucherGeneralJournalEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId;

        // update subledgerJournalEntry state and transfer id to pre-transfer state
        update_recordset subledgerJournalEntry
            setting Status = SubledgerJournalEntryStatus::NotTransferred, 
                    TransferId = 0
            where subledgerJournalEntry.FiscalCalendarPeriod == currentPeriod.RecId
                && subledgerJournalEntry.Ledger == _ledgerFiscalCalendarPeriod.Ledger
                && subledgerJournalEntry.TransferId != 0
                exists join accountingEvent
                    where accountingEvent.RecId == subledgerJournalEntry.AccountingEvent
                notexists join subledgerVoucherGeneralJournalEntry
                    where subledgerVoucherGeneralJournalEntry.SubledgerJournalEntry == subledgerJournalEntry.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>