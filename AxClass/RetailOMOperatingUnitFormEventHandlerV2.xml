<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOMOperatingUnitFormEventHandlerV2</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailOMOperatingUnitFormEventHandlerV2</c> class subscribes to events involving the <c>OMOperatingUnit</c> form.
/// </summary>
public class RetailOMOperatingUnitFormEventHandlerV2
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>OMOperatingUnit_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of retail channel-specific form controls when the <c>OMOperatingUnit</c> form data source is activated.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    [FormDataSourceEventHandler(formDataSourceStr(OMOperatingUnit, OMOperatingUnit), FormDataSourceEventType::Activated)]
    public static void OMOperatingUnit_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        boolean isRetailChannelDataSource = RetailOMOperatingUnitFormEventHandler::isRetailChannelDataSource(sender);

        FormRun formRun = sender.formRun();
        
        // Hide/Show Retail channel details button.
        FormControl retailChannelDetailsButton = RetailOMOperatingUnitFormEventHandler::getFormControl(formRun, formControlStr(OMOperatingUnit, RetailChannelDetails));
        retailChannelDetailsButton.visible(isRetailChannelDataSource);

        FormControl retailStoreGroup = RetailOMOperatingUnitFormEventHandler::getFormControl(formRun, formControlStr(OMOperatingUnit, RetailStoreGroup));
        FormControl retailOnlineChannelGroup = RetailOMOperatingUnitFormEventHandler::getFormControl(formRun, formControlStr(OMOperatingUnit, RetailOnlineChannelGroup));
        FormControl retailMCRChannelGroup = RetailOMOperatingUnitFormEventHandler::getFormControl(formRun, formControlStr(OMOperatingUnit, RetailMCRChannelGroup));

        if (isRetailChannelDataSource)
        {
            OMOperatingUnit omOperatingUnit = sender.cursor() as OMOperatingUnit;
            RetailChannelType channelType = RetailOMOperatingUnitFormEventHandler::currentRetailChannelType(omOperatingUnit);

            switch (channelType)
            {
                case RetailChannelType::RetailStore:
                    FormDataSource retailStoreTableDS = formRun.dataSource(formDataSourceStr(OMOperatingUnit, RetailStoreTable)) as FormDataSource;
                    RetailStoreTable storeRecord;
                    select firstonly RecId from storeRecord where storeRecord.OMOperatingUnitID == omOperatingUnit.RecId;
                    if (storeRecord.RecId != 0)
                    {
                        retailStoreTableDS.positionToRecordByValue(fieldNum(RetailStoreTable, omOperatingUnitID), int642str(omOperatingUnit.RecId));
                    }
                    else
                    {
                        retailStoreTableDS.create();
                    }
                    retailStoreGroup.visible(true);
                    retailOnlineChannelGroup.visible(false);
                    retailMCRChannelGroup.visible(false);
                    break;
                case RetailChannelType::SharePointOnlineStore:
                    FormDataSource retailOnlineChannelTableDS = formRun.dataSource(formDataSourceStr(OMOperatingUnit, RetailOnlineChannelTable)) as FormDataSource;
                    RetailOnlineChannelTable channelRecord;
                    select firstonly RecId from channelRecord where channelRecord.OMOperatingUnitID == omOperatingUnit.RecId;
                    if (channelRecord.RecId != 0)
                    {
                        retailOnlineChannelTableDS.positionToRecordByValue(fieldNum(RetailOnlineChannelTable, omOperatingUnitID), int642str(omOperatingUnit.RecId));
                    }
                    else
                    {
                        retailOnlineChannelTableDS.create();
                    }
                    retailStoreGroup.visible(false);
                    retailOnlineChannelGroup.visible(true);
                    retailMCRChannelGroup.visible(false);
                    break;
                case RetailChannelType::MCRCallCenter:
                    FormDataSource retailMCRChannelTableDS = formRun.dataSource(formDataSourceStr(OMOperatingUnit, RetailMCRChannelTable)) as FormDataSource;
                    RetailMCRChannelTable callcenterRecord;
                    select firstonly RecId from callcenterRecord where callcenterRecord.OMOperatingUnitID == omOperatingUnit.RecId;
                    if (callcenterRecord.RecId != 0)
                    {
                        retailMCRChannelTableDS.positionToRecordByValue(fieldNum(RetailMCRChannelTable, omOperatingUnitID), int642str(omOperatingUnit.RecId));
                    }
                    else
                    {
                        retailMCRChannelTableDS.create();
                    }
                    retailStoreGroup.visible(false);
                    retailOnlineChannelGroup.visible(false);
                    retailMCRChannelGroup.visible(true);
                    break;
                default:
                    // Extension point for the scenario where a partner has added new channel type and wants to add
                    // UI logic specific to the new channel type.
                    // ex: hiding and showing the tab group that is added to show data related to the new channel type
                    // or enabling and disabling datasources.
                    EventHandlerResult result = new EventHandlerResult();
                    RetailOMOperatingUnitFormEventHandlerV2::OMOperatingUnit_OnActivatedDelegate(sender, e, result);
            }
        }
        else
        {
            retailStoreGroup.visible(false);
            retailOnlineChannelGroup.visible(false);
            retailMCRChannelGroup.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>OMOperatingUnit_OnActivatedDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for setting the visibility of retail channel-specific form controls when the <c>OMOperatingUnit</c> form data source is activated.
    /// For new channel types, channel type specific UI changes can be made to the form by subscribing to this method.
    /// </summary>
    /// <param name="sender">
    /// The form data source that triggered the event.
    /// </param>
    /// <param name="e">
    /// The event args relating to the data source event.
    /// </param>
    /// <param name="_result">
    /// Subscribers should use this object to return the result.
    /// </param>
    static delegate void OMOperatingUnit_OnActivatedDelegate(FormDataSource sender, FormDataSourceEventArgs e, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>