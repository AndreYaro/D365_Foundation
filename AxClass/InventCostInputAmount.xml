<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostInputAmount</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventCostInputAmount</c> class contains the cost input amount to distribute to inventory
/// transactions.
/// </summary>
class InventCostInputAmount
{
    InventQty       remainQty;
    CostAmount      remainAmount;
    #ISOCountryRegionCodes

    private static CostManagementInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal static CostManagementInstrumentationLogger instrumentationLogger()
    {
        if (!logger)
        {
            logger = CostManagementInstrumentationLogger::createLogger(classStr(InventCostInputAmount));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the amount to distribute to the quantity.
    /// </summary>
    /// <param name="_qty">
    ///    The quantity.
    /// </param>
    /// <returns>
    ///    The amount to distribute to the quantity.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The quantity is larger than the remaining quantity.
    /// </exception>
    public CostAmount getAmount(InventQty _qty)
    {
        CostAmount      amount;

        if (Debug::debugMode())
        {
            Debug::assert(sign(remainQty) == sign(_qty));
        }

        if (_qty == remainQty)
        {
            amount = remainAmount;
        }
        else if (abs(_qty) < abs(remainQty))
        {
            amount = CurrencyExchangeHelper::amount(remainAmount / remainQty * _qty);
        }
        else
        {
            throw error(strFmt("@SCM:CurrentQtyLargerThanRemainingQty", _qty, remainQty));
        }

        remainQty -= _qty;
        remainAmount -= amount;

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the remaining amount.
    /// </summary>
    /// <returns>
    ///    The remaining amount.
    /// </returns>
    public CostAmount getRemainingAmount()
    {
        return remainAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainAmount</Name>
				<Source><![CDATA[
    protected CostAmount parmRemainAmount(CostAmount _remainAmount = remainAmount)
    {
        remainAmount = _remainAmount;

        return remainAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRemainQty</Name>
				<Source><![CDATA[
    protected InventQty parmRemainQty(InventQty _remainQty = remainQty)
    {
        remainQty = _remainQty;

        return remainQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCWLastTransBoxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the remaining amount for catch weight cost calculations.
    /// </summary>
    /// <param name="_lastCWTrans">
    /// A Boolean value that indicates whether the current transaction empties the catch weight transaction
    /// queue.
    /// </param>
    /// <param name="_lastTransBoxQty">
    /// The inventory quantity expected to flush together with the current cost calculation.
    /// </param>
    public void setCWLastTransBoxAmount(boolean _lastCWTrans, InventQty _lastTransBoxQty )
    {
        real transSign       = sign(remainQty);
        real absRemainQty    = abs(remainQty);
        real absLastTransQty = abs(_lastTransBoxQty);

        if (    (absRemainQty < absLastTransQty)                     // the quantity is not enough
            ||  (_lastCWTrans && (absRemainQty != absLastTransQty))) // the quantity is too much for the "last" transaction processed
        {
            remainQty   = absLastTransQty * transSign;
            if (remainAmount)
            {
                remainAmount = CurrencyExchangeHelper::amount(remainQty);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>InventCostInputAmount</c> class.
    /// </summary>
    /// <param name="_qty">
    ///    The quantity to which to distribute the cost input amount.
    /// </param>
    /// <param name="_amount">
    ///    The cost input amount to distribute.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>InventCostInputAmount</c> class.
    /// </returns>
    public static InventCostInputAmount construct(InventQty _qty, CostAmount _amount)
    {
        InventCostInputAmount   inputAmount = new InventCostInputAmount();

        if (Debug::debugMode())
        {
            if (_qty != 0.0)
            {
                Debug::assert(sign(_qty) == sign(_amount) || _amount == 0.0);
            }
        }

        inputAmount.parmRemainQty(_qty);
        inputAmount.parmRemainAmount(_amount);
        return inputAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInputAmountFromDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the cost input amount from accounting distributions in the accounting currency.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///    A source document line for which to get the amount.
    /// </param>
    /// <param name="_inventMovement">
    ///    An instance of the <c>inventMov_Puch</c> class.
    /// </param>
    /// <param name="_accountingDistributionReferenceRole">
    ///    An account role for which to get the amount
    /// </param>
    /// <returns>
    ///    The cost input amount in the accounting currency.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The source relation type of the source document line is not a <c>VendPackingSlipTrans</c> or
    ///    <c>VendInvoiceInfoLine</c> table.
    /// </exception>
    public static Amount getInputAmountFromDistribution(
        SourceDocumentLineRecId             _sourceDocumentLine,
        InventMov_Purch                     _inventMovement,
        AccountingDistributionReferenceRole _accountingDistributionReferenceRole)
    {
        if (Debug::debugMode())
        {
            Debug::assert(_sourceDocumentLine != 0);
        }

        LedgerDimensionAccount ledgerDimension = InventCostInputAmount::getLedgerDimensionFromDistribution(_sourceDocumentLine);

        Amount amount = InventCostInputAmount::getInputAmountFromDistributionForAccount(_sourceDocumentLine, ledgerDimension, _accountingDistributionReferenceRole);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInputAmountFromDistribution_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost input amount from accounting distributions in currency
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// SourceDocumentLine to get the amount for.
    /// </param>
    /// <param name="_inventMovement">
    /// An instance of the <c>inventMov_Puch</c> class.
    /// </param>
    /// <param name="_accountingDistributionReferenceRole">
    /// AccountRole to get the amount for
    /// </param>
    /// <param name="_currencyCode">
    /// Currency to receive result in
    /// </param>
    /// <returns>
    /// The cost input amount in currency
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The SourceRelationType of the SourceDocumentLine is not a <c>VendPackingSlipTrans</c> or a <c>VendInvoiceInfoLine</c>.
    /// </exception>
    public static Amount getInputAmountFromDistribution_RU(
        SourceDocumentLineRecId             _sourceDocumentLine,
        InventMov_Purch                     _inventMovement,
        AccountingDistributionReferenceRole _accountingDistributionReferenceRole,
        CurrencyCode                        _currencyCode)
    {
        if (Debug::debugMode())
        {
            Debug::assert(_sourceDocumentLine != 0);
        }

        LedgerDimensionAccount ledgerDimension = InventCostInputAmount::getLedgerDimensionFromDistribution(_sourceDocumentLine);

        Amount amount = InventCostInputAmount::getInputAmountFromDistributionForAcc_RU(_sourceDocumentLine,
            ledgerDimension,
            _accountingDistributionReferenceRole,
            _currencyCode);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionFromDistribution</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the financial dimensions from associated accounting distribution.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///     The source document line for which to get the financial dimensions.
    /// </param>
    /// <returns>
    ///     The financial dimensions.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     The source document line has more than one accounting distribution for extended price monetary amount
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     The financial dimensions are not found
    /// </exception>
    protected static LedgerDimensionAccount getLedgerDimensionFromDistribution(SourceDocumentLineRecId _sourceDocumentLine)
    {
        MonetaryAmountList monetaryAmountList = MonetaryAmountList::construct();
        monetaryAmountList.addEnd(MonetaryAmount::ExtendedPrice);

        SourceDocumentLineItem sourceDocumentLineItem = SourceDocumentLineItem::newFromSourceDocumentLine(SourceDocumentLine::find(_sourceDocumentLine));
        AccountingDistributionList accountingDistributionList = sourceDocumentLineItem.getAccDistListForMonetaryAmount(monetaryAmountList);
        
		if (accountingDistributionList.elements() > 1)
        {
            using (var activityContext = 
                   InventCostInputAmount::instrumentationLogger()
                   .checkAccountingDistributionListActivities()
                   .checkAccountingDistributionList(CostManagementInstrumentationInventCostInputAmountCheckBuilder::construct()
                                                    .setMethodName(funcName())
                                                    .setSourceDocumentLineRecId(_sourceDocumentLine)))
            {
                throw error("@SCM:InventCostInputAmountAccountingDistributionListCheckErrorMessage");
            }
        }

        LedgerDimensionAccount ledgerDimension;
        AccountingDistributionListEnumerator accountingDistributionListEnumerator = accountingDistributionList.getEnumerator();

        if (!accountingDistributionListEnumerator.moveNext())
        {
            // product receipt cancellation
            AccountingEvent accountingEvent = AccountingDistribution::getLastSourceDocumentLineEvent(_sourceDocumentLine);
            List distributionList = AccountingDistribution::getDistributionList(accountingEvent.RecId, _sourceDocumentLine);
            Enumerator distributionListEnumerator = distributionList.getEnumerator();
            while (distributionListEnumerator.moveNext() && !ledgerDimension)
            {
                AccountingDistribution accountingDistribution = distributionListEnumerator.current();
                if (accountingDistribution.MonetaryAmount == MonetaryAmount::ExtendedPrice &&
				   (accountingDistribution.ReferenceRole  == AccountingDistributionReferenceRole::None ||
                    accountingDistribution.ReferenceRole  == AccountingDistributionReferenceRole::Reversing))
                {
                    ledgerDimension = accountingDistribution.ledgerDimension;
                }
            }
        }
        else
        {
            ledgerDimension = accountingDistributionListEnumerator.current().LedgerDimension;
        }

        return ledgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInputAmountFromDistributionForAcc_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the cost input amount from accounting distributions in currency
    /// </summary>
    /// <param name="_sourceDocumentLine">
    /// SourceDocumentLine to get the amount for.
    /// </param>
    /// <param name="_ledgerDimension">
    /// Account to get the amount for
    /// </param>
    /// <param name="_accountingDistributionReferenceRole">
    /// AccountRole to get the amount for
    /// </param>
    /// <param name="_currencyCode">
    /// Currency to receive result in
    /// </param>
    /// <returns>
    /// The cost input amount in currency
    /// </returns>
    public static Amount getInputAmountFromDistributionForAcc_RU(
        SourceDocumentLineRecId             _sourceDocumentLine,
        LedgerDimensionAccount              _ledgerDimension,
        AccountingDistributionReferenceRole _accountingDistributionReferenceRole,
        CurrencyCode                        _currencyCode)
    {
        Amount amount = SourceDocumentLineProvider::getDistributedAmountInCurrency(
            _sourceDocumentLine,
            _ledgerDimension,
            _accountingDistributionReferenceRole,
            true,
            _currencyCode);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInputAmountFromDistributionForAccount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the cost input amount from accounting distributions in the accounting currency.
    /// </summary>
    /// <param name="_sourceDocumentLine">
    ///    The source document line for which to get the amount.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The account for which to get the amount.
    /// </param>
    /// <param name="_accountingDistributionReferenceRole">
    ///    The account role for which to get the amount.
    /// </param>
    /// <returns>
    ///    The cost input amount in the accounting currency.
    /// </returns>
    public static Amount getInputAmountFromDistributionForAccount(
        SourceDocumentLineRecId             _sourceDocumentLine,
        LedgerDimensionAccount              _ledgerDimension,
        AccountingDistributionReferenceRole _accountingDistributionReferenceRole)
    {
        Amount amount = SourceDocumentLineProvider::getDistributedAmountInAccountingCurrency(
            _sourceDocumentLine,
            _ledgerDimension,
            _accountingDistributionReferenceRole,
            true);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionAccountForInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerDimensionAccount</c> for the invoice.
    /// </summary>
    /// <param name="_inventMovement">
    /// An instance of the <c>inventMov_Puch</c> class.
    /// </param>
    /// <returns>
    /// The <c>LedgerDimensionAccount</c> for the invoice.
    /// </returns>
    protected static LedgerDimensionAccount getLedgerDimensionAccountForInvoice(InventMov_Purch _inventMovement)
    {
        LedgerDimensionDefaultAccount   invoiceAccount = _inventMovement.accountOperations();

        DimensionDefault mainAccountDefaultDimension = MainAccountLegalEntity::findByMainAccountLegalEntity(
            LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(invoiceAccount),
            CompanyInfo::current()).DefaultDimension;

        return LedgerDimensionFacade::serviceCreateLedgerDimension(invoiceAccount, _inventMovement.defaultDimension(), mainAccountDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionAccountForInvoice_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerDimensionAccount</c> for the invoice.
    /// </summary>
    /// <param name="_inventMovement">
    /// An instance of the <c>inventMov_Puch</c> class.
    /// </param>
    /// <returns>
    /// The <c>LedgerDimensionAccount</c> for the invoice.
    /// </returns>
    protected static LedgerDimensionAccount getLedgerDimensionAccountForInvoice_RU(InventMov_Purch _inventMovement)
    {
        LedgerDimensionDefaultAccount   invoiceAccount = _inventMovement.accountBalanceSheet();

        DimensionDefault mainAccountDefaultDimension = MainAccountLegalEntity::findByMainAccountLegalEntity(
            LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(invoiceAccount),
            CompanyInfo::current()).DefaultDimension;

        return LedgerDimensionFacade::serviceCreateLedgerDimension(invoiceAccount, _inventMovement.defaultDimension(), mainAccountDefaultDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerDimensionAccountForPackingslip</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerDimensionAccount</c> for the packing slip.
    /// </summary>
    /// <param name="_inventMovement">
    /// An instance of the <c>inventMov_Puch</c> class.
    /// </param>
    /// <returns>
    /// The <c>LedgerDimensionAccount</c> for the packing slip.
    /// </returns>
    protected static LedgerDimensionAccount getLedgerDimensionAccountForPackingslip(InventMov_Purch _inventMovement)
    {
        DimensionDefault mainAccountDefaultDimension = MainAccountLegalEntity::findByMainAccountLegalEntity(
            LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_inventMovement.accountOperations()),
            CompanyInfo::current()).DefaultDimension;

        // No default dimension from main account, fetch it from current account
        if (!mainAccountDefaultDimension)
        {
            mainAccountDefaultDimension = MainAccountLegalEntity::findByMainAccountLegalEntity(
                LedgerDimensionFacade::getMainAccountRecIdFromLedgerDimension(_inventMovement.offsetAccountPhysical()),
                CompanyInfo::current()).DefaultDimension;
        }

        // ledger dimension that has default dimensions from the Purchase Line and the main account default dimensions
        return LedgerDimensionFacade::serviceCreateLedgerDimension(_inventMovement.offsetAccountPhysical(), _inventMovement.defaultDimension(), mainAccountDefaultDimension);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>