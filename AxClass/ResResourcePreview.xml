<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResResourcePreview</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Implements retrieval of Resource details for preview.
/// </summary>
public class ResResourcePreview implements IResourcePreview
{
    private AvailabilityView control;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>control</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets/sets a reference to the AvailabilityView control.
    /// </summary>
    /// <param name = "_control">Instance of the AvailabilityView run-time class.</param>
    /// <returns>Instance of <c>AvailabilityView</c>.</returns>
    AvailabilityView control(AvailabilityView _control)
    {
        control = _control;
        return control;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPreviewContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves Named resource preview content.
    /// </summary>
    /// <param name = "_resourceId">Resource identifier.</param>
    /// <param name = "_controlDate">Control date time.</param>
    /// <returns>Resource preview content in JSON format</returns>
    public str getPreviewContent(RecId _resourceId, utcdatetime _controlDateTime = DateTimeUtil::getSystemDateTime())
    {
        str previewContent;

        if (_resourceId)
        {
            ResResourcesListView resources;
            ResourceResourceCategorySetup resourceCategory;
            ResourceCategoryView resourceCategories;
            ResResourceAvailableWorkDaysView availableDateTime;
            CompanyView companies;
            HcmWorker workers;
            DirPartyPrimaryContactInfoView contactInfo;
            ResWorkerTitleView workerTitleView;
            date controlDate = DateTimeUtil::date(_controlDateTime);
            SelectableDataArea currentDataArea = curExt();

            select crosscompany ResourceName, ResourceId, SourceCompany, EmploymentType
            from resources
                where resources.Resource == _resourceId
                && resources.RecipientCompany == currentDataArea
            join Name from companies
                where companies.ID == resources.SourceCompany
            join Person, PersonnelNumber from workers
                where workers.RecId == resources.Worker
            join Phone, Extension, Email from contactInfo
                where contactInfo.Party == workers.Person
            outer join resourceCategory
                where resourceCategory.Resource == _resourceId
                && resourceCategory.ValidFrom <= controlDate
                && resourceCategory.ValidTo >= controlDate
            outer join CategoryId from resourceCategories
                where resourceCategories.RecId == resourceCategory.ResourceCategory
                && resourceCategories.DataAreaId == currentDataArea
            outer join firstonly Day from availableDateTime
                order by availableDateTime.Day
                where availableDateTime.Resource == resources.Resource
                && availableDateTime.Day > _controlDateTime
            outer join firstonly HcmTitleId from workerTitleView
                where workerTitleView.Resource == resources.Resource
                    && workerTitleView.ValidFrom <= _controlDateTime
                    && workerTitleView.ValidTo >= _controlDateTime;

            ResResource resource = ResResource::construct();

            resource.Id(_resourceId);
            resource.ResourceId(resources.ResourceId);
            resource.Name(resources.ResourceName);
            resource.SourceCompany(resources.SourceCompany);
            resource.SourceCompanyName(companies.name);
            resource.AvailableDateTime(availableDateTime.Day);

            resource.Title(resourceCategories.CategoryId ? resourceCategories.CategoryId : workerTitleView.HcmTitleId);
            resource.PersonnelNumber(workers.PersonnelNumber);
            resource.EmploymentType(resources.EmploymentType);
            resource.PhoneNumber(contactInfo.Phone);
            resource.EmailAddress(contactInfo.Email);

            DirParty party = new DirParty(workers, _controlDateTime);
            LogisticsLocationEntity location = party.getPrimaryPostalAddressLocation();
            LogisticsPostalAddress postal;
            if (location)
            {
                postal = location.getPostalAddress(false);
            }

            if (postal)
            {
                resource.OfficeAddress(postal.Address);
            }

            // compute for resource price
            IAvailabilityViewContext context = control.controlContext();
            ActivityRecId activity;

            if (context)
            {
                activity = context.activity();
            }

            if (activity)
            {
                // compute for resource cost price
                resource.costPrice(ResourceFacade::getCostPrice(_resourceId, controlDate, activity));
            }
            else
            {
                // compute for resource sales price
                resource.salesPrice(ResourceFacade::getSalesPrice(_resourceId, controlDate));
            }

            // serialize preview content
            previewContent = AVUtil::serializeObject(resource.GetType(), resource);
        }

        return previewContent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <c>ResourcePreview</c>.
    /// </summary>
    /// <returns>Instance of <c>ResourcePreview</c>.</returns>
    public static IResourcePreview construct()
    {
        IResourcePreview provider = new ResResourcePreview();
        return provider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>