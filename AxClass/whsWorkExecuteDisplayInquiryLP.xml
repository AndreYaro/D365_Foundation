<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayInquiryLP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to handle LP inquiry.
/// </summary>
[SysObsolete('This class has been refactored. Refer class <c>InventProcessGuideInquiryLicensePlateController</c> instead.', false, 30\06\2020),
WHSWorkExecuteMode(WHSWorkExecuteMode::InquiryLicensePlate)]
class whsWorkExecuteDisplayInquiryLP extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildLicensePlateInquiry</Name>
				<Source><![CDATA[
	/// <summary>
	/// Adds controls to form state for LP Inquiry screen.
	/// </summary>
	/// <param name="_con">
	/// Container containing the form state before the controls are added.
	/// </param>
	/// <param name="_licensePlateId">
	/// License plate id to be inquired.
	/// </param>
	/// <param name="_inventLocationId">
	/// Warehouse id of the LP.
	/// </param>
	/// <returns>
	/// Container containing the form state after the controls are added.
	/// </returns>
    container buildLicensePlateInquiry(container             _con,
                                       WHSLicensePlateId     _licensePlateId,
                                       InventLocationId      _inventLocationId)
    {
        InventSiteId    inventSiteId = InventLocation::find(_inventLocationId).InventSiteId;
        InventDim       inventDim;
        InventSum       inventSum;
        container       ret = _con;
        str             itemInfo;
        int             i;
        WHSLicensePlate licensePlate = WHSLicensePlate::find(_licensePlateId);

        ret += [this.buildControl(#RFLabel, int2str(i), strFmt("@WAX730", _licensePlateId), 1, '', #WHSRFUndefinedDataType, '', 0)];

        if (licensePlate.LicensePlateParent)
        {
            ret += [this.buildControl(#RFLabel, int2str(i), strFmt("@WAX3895", licensePlate.LicensePlateParent), 1, '', #WHSRFUndefinedDataType, '', 0)];
        }

        if (WHSLicensePlate::isParentLicensePlate(_licensePlateId))
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select inventSum
                order by licensePlate.LicensePlateId
                where inventSum.ClosedQty == NoYes::No                          &&
                        inventSum.PhysicalInvent != 0                           &&
                        inventSum.InventLocationId == _inventLocationId
                join LicensePlateId from licensePlate
                    where licensePlate.LicensePlateId == inventSum.LicensePlateId   &&
                            licensePlate.LicensePlateParent == _licensePlateId
                {
                    if (i == #MaxInquiry)
                    {
                        ret = this.addErrorLabel(ret, "@WAX4151", WHSRFColorText::Error);
                        break;
                    }

                    if (!i)
                    {
                        ret += [this.buildControl(#RFLabel, int2str(i), '\n', 1, '', #WHSRFUndefinedDataType, '', 0)];
                    }

                    ret += [this.buildControl(#RFLabel, int2str(i), strFmt("@WAX730", licensePlate.LicensePlateId), 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSLicensePlateId))];

                    this.buildPositionIfEnabled(ret, _inventLocationId, inventSum.wMSLocationId, _licensePlateId);

                    itemInfo = this.generateItemInfoForLicensePlate(inventSum, inventSum.wmsLocationId);
                    ret += [this.buildControl(#RFLabel, int2str(i), itemInfo, 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSRFItemInformation))];
                    ++i;

                    ret += [this.buildControl(#RFLabel, int2str(i), '\n', 1, '', #WHSRFUndefinedDataType, '', 0)];
                }
            }
            else
            {
                while select inventSum
                order by licensePlate.LicensePlateId
                where inventSum.ClosedQty == NoYes::No                          &&
                        inventSum.PhysicalInvent != 0
                join wmsLocationId from inventDim
                    where inventDim.InventDimId == inventSum.InventDimId            &&
                            inventDim.InventLocationId == _inventLocationId
                join LicensePlateId from licensePlate
                    where licensePlate.LicensePlateId == inventDim.LicensePlateId   &&
                            licensePlate.LicensePlateParent == _licensePlateId
                {
                    if (i == #MaxInquiry)
                    {
                        ret = this.addErrorLabel(ret, "@WAX4151", WHSRFColorText::Error);
                        break;
                    }

                    if (!i)
                    {
                        ret += [this.buildControl(#RFLabel, int2str(i), '\n', 1, '', #WHSRFUndefinedDataType, '', 0)];
                    }

                    ret += [this.buildControl(#RFLabel, int2str(i), strFmt("@WAX730", licensePlate.LicensePlateId), 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSLicensePlateId))];

                    this.buildPositionIfEnabled(ret, _inventLocationId, inventDim.wMSLocationId, _licensePlateId);

                    itemInfo = this.generateItemInfoForLicensePlate(inventSum, inventDim.wmsLocationId);
                    ret += [this.buildControl(#RFLabel, int2str(i), itemInfo, 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSRFItemInformation))];
                    ++i;

                    ret += [this.buildControl(#RFLabel, int2str(i), '\n', 1, '', #WHSRFUndefinedDataType, '', 0)];
                }
            }
        }
        else
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select inventSum
                where inventSum.LicensePlateId      == _licensePlateId          &&
                      inventSum.InventSiteId        == inventSiteId             &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      inventSum.PhysicalInvent      != 0
                {
                    if (i == #MaxInquiry)
                    {
                        ret = this.addErrorLabel(ret, "@WAX4151", WHSRFColorText::Error);
                        break;
                    }

                    this.buildPositionIfEnabled(ret, _inventLocationId, inventSum.wMSLocationId, _licensePlateId);

                    itemInfo = '';
                    itemInfo = this.generateItemInfoForLicensePlate(inventSum, inventSum.wmsLocationId);
                    ret += [this.buildControl(#RFLabel, int2str(i), itemInfo, 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSRFItemInformation))];
                    ++i;
                }
            }
            else
            {
                while select inventSum
                join wmsLocationId from inventDim
                where inventSum.InventDimId         == inventDim.InventDimId    &&
                      inventDim.LicensePlateId      == _licensePlateId          &&
                      inventDim.InventSiteId        == inventSiteId             &&
                      inventSum.ClosedQty           == NoYes::No                &&
                      inventSum.PhysicalInvent      != 0
                {
                    if (i == #MaxInquiry)
                    {
                        ret = this.addErrorLabel(ret, "@WAX4151", WHSRFColorText::Error);
                        break;
                    }

                    this.buildPositionIfEnabled(ret, _inventLocationId, inventDim.wMSLocationId, _licensePlateId);

                    itemInfo = '';
                    itemInfo = this.generateItemInfoForLicensePlate(inventSum, inventDim.wmsLocationId);
                    ret += [this.buildControl(#RFLabel, int2str(i), itemInfo, 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, extendedTypeNum(WHSRFItemInformation))];
                    ++i;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildPositionIfEnabled</Name>
				<Source><![CDATA[
    private container buildPositionIfEnabled(
        container           _ret, 
        WHSInventLocationId _inventLocationId,
        WMSLocationId       _wmsLocationId,
        WHSLicensePlateId   _licensePlateId)
    {
        WMSLocation wmsLocation = WMSLocation::find(_wmsLocationId, _inventLocationId);

        if (wmsLocation.whsLocationProfile().DisplayMobileDeviceLocationLicensePlatePositioning)
        {
            _ret += [this.buildControl(#RFLabel,
                                       WHSWorkExecuteDisplayLocationLicensePlatePositionControls::LocationLicensePlatePosition,
                                       strfmt("@WAX:LPPositionFormat", WHSLocationLicensePlatePositioning::find(_licensePlateId).LicensePlatePosition),
                                       1,
                                       '',
                                       extendedTypeNum(WHSLocationLicensePlatePosition),
                                       '',
                                       0)];
        }

        return _ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        WhsWorkExecute          workExecute = WhsWorkExecute::construct();
        container               ret = conNull();
        container               con = _con;
        int                     hasError = 0;

        mode = WHSWorkExecuteMode::InquiryLicensePlate;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        hasError = this.hasError(_con);

        if (pass.exists(#UserId))
        {
            userId = pass.lookup(#UserId);
        }

        switch (step)
        {
            case 0:
                ret = this.buildGetLicensePlate(ret);
                step = 1;
                break;

            case 1:
                pass.insert(#LicensePlateId, conPeek(conPeek(con, 4 + hasError), #data));
                if (!workExecute.validateLicensePlateInSystem(pass.lookup(#LicensePlateId)))
                {
                    throw error("@WAX691");
                }
                ret = this.buildLicensePlateInquiry(ret, pass.lookup(#LicensePlateId), WHSWorkUserSession::find(userId).InventLocationId);
                step = 2;
                break;

            case 2:
                pass = this.resetPassthrough(ret, false);
                ret = this.buildGetLicensePlate(ret);
                step = 1;
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);
        ret = this.addCancelButton(ret, 1, true);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>