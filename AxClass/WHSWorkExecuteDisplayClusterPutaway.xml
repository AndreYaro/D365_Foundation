<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayClusterPutaway</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic for the Cluster Putaway RF flow.
/// </summary>
[WHSWorkExecuteMode(WHSWorkExecuteMode::ClusterPutaway)]
internal final class WHSWorkExecuteDisplayClusterPutaway extends WHSWorkExecuteDisplayCluster
{
    private container       ret;
    private container       con;
    private WHSWorkExecute  workExecute;
    private boolean         addButtons;
    private boolean         putReadyForOverrideLoc;
    private static boolean  isWHSWorkExecuteDisplayClusterPutawayClusterPutAddButtonsFlightEnabled = WHSWorkExecuteDisplayClusterPutawayClusterPutAddButtonsFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildGetWorkIdLPUserDirect</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the RF screen for capturing a work unit to putaway.
    /// </summary>
    /// <param name="_con">
    /// The current RF container we are building on.
    /// </param>
    /// <returns>
    /// An updated RF container with controls for capturing a work unit.
    /// </returns>
    private void buildGetWorkIdLPUserDirect()
    {
        ret += [this.buildControl(#RFLabel, #Scan, "@WAX1056", 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFLabel, #ClusterId, strFmt("@WAX3618", pass.lookupStr(#ClusterId)), 1, '', #WHSRFUndefinedDataType, '', 0)];
        ret += [this.buildControl(#RFText, #WHSWorkLicensePlateId, "@WAX33", 1, '', extendedTypeNum(WHSLicensePlateId), '', 0)];
        ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
        ret += [this.buildControl(#RFButton, #RFPass, "@SYS113811", 1, '', #WHSRFUndefinedDataType, '', 0)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleSuggestLocation</Name>
				<Source><![CDATA[
    private void handleSuggestLocation()
    {
        Set excludeLocationId = new Set(Types::String);

        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
        if (pass.exists(#ExcludedLocations))
        {
            excludeLocationId = this.buildLocationListFromStr(pass.lookup(#ExcludedLocations));
        }
        else
        {
            excludeLocationId = this.buildLocationListFromStr(workLine.wmsLocationId);
        }
            
        container tmpCon;

        [newLocationId, tmpCon] = WhsWorkExecute::construct().findNewLocation(workLine, excludeLocationId);
        excludeLocationId = Set::create(tmpCon);
        pass.insert(#SuggestLocation, 1);
        pass.insert(#ExcludedLocations, this.buildLocationListFromSet(excludeLocationId));
        if (pass.exists(#PrevStep))
        {
            step = pass.lookup(#PrevStep);
        }
        else
        {
            pass.insert(#NoValidation, '1');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the RF form used to putaway inventory as a cluster.
    /// </summary>
    /// <param name="_con">
    /// The RF container variable.
    /// </param>
    /// <param name="_buttonClicked">
    /// The previously clicked button.
    /// </param>
    /// <returns>
    /// Returns the updated RF form container.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Must scan open or in process work unit tied to cluster %1.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The work class is not valid.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// User is not in this warerhouse.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// The is no valid work line to process.
    /// </exception>
    [Hookable(false)]
    internal container displayForm(container _con, str _buttonClicked = '')
    {
        container           tmpPass;
        int                 hasError;
        boolean             complete;
        boolean             recall;
        WHSWorkClusterTable workClusterTable;
        WHSClusterProfile   clusterProfile;
        WMSLocationId       locationId;
        WHSWorkId           noLocWorkId;
        WHSWorkExecuteMode  workExecuteMode;
        WHSClusterId        clusterId;
        boolean             workStop;
        int                 prevStep;
        
        ret         = conNull();
        workExecute = new WHSWorkExecute();
        con         = _con;
        
        hasError = this.hasError(_con);
    
        if (_buttonClicked == #RFPass)
        {
            this.invokePassFunctionality();
        }
    
        if (_buttonClicked == #RFOverride)
        {
            this.handleRFOverride();
        }

        if (suggestLocationFlightEnabled && _buttonClicked == #RFNoLocation)
        {
            this.handleSuggestLocation();
        }

        if (suggestLocationFlightEnabled && _buttonClicked == #RFOK)
        {
            if (pass.exists(#ExcludedLocations))
            {
                //Once user clicks OK button, the excluded locations will be expired.
                pass.remove(#ExcludedLocations);
            }
        }
    
        switch (step)
        {
            case 0:
                this.scanClusterId();
                break;

            case 1:
                if (hasError)
                {
                    con = this.removeErrorMessages(con);
                }

                complete = this.handleFieldValues();
    
                if (complete)
                {
                    workClusterTable = WHSWorkClusterTable::findClusterReadyForPutaway(pass.lookupStr(#ClusterId), true);
                    workClusterTable.updateStatus(WHSWorkClusterStatus::InProcess);
    
                    WHSWorkClusterTable::lockUnlockWorkCluster(workClusterTable.ClusterId, pass.lookup(#UserId));

                    clusterProfile = WHSClusterProfile::find(workClusterTable.ClusterProfileId);
    
                    pass.insert(#ClusterProfile, clusterProfile.ClusterProfileId);
    
                    if (clusterProfile.PutawayClusterLocate == WHSPutawayClusterLocate::UserDirected)
                    {
                        ret = conNull();
                        this.buildGetWorkIdLPUserDirect();
                        step = 4;
                        break;
                    }
                    else
                    {
                        if (WHSClusterProcessingCustomWorkStepFlight::instance().isEnabled())
                        {
                            if (this.executeBatchCustomWorkForCluster(pass.lookup(#ClusterId)))
                            {
                                // Need to recall to cover the case when several custom steps are present
                                this.recall(_buttonClicked);
                            }
                        }

                        // Look for clustered pick to execute
                        [locationId, workStop] = this.getNextGroupPickLocation(workClusterTable.ClusterId);
    
                        if (locationId)
                        {
                            pass.insert(#WMSLocationId, locationId);
                            step = 2;
    
                            // Build clustered pick screen
                            ret = conNull();
                            ret = this.buildGroupPickWithoutPosition(ret, locationId);
                            break;
                        }
                        else
                        {
                            // Otherwise, look for clustered put to execute
                            locationId = this.getNextGroupPutLocation(workClusterTable.ClusterId);
    
                            if (locationId)
                            {
                                this.buildClusterPutScreen(locationId);
                                break;
                            }
                            else
                            {
                                // Look for any work tied to cluster without a location
                                noLocWorkId = this.findWorkWithNoPutLocation(workClusterTable.ClusterId);
    
                                if (noLocWorkId)
                                {
                                    this.updatePassFromWorkLine(noLocWorkId);
                                    this.handleNoLocationWork();

                                    break;
                                }
                            }
                        }
                    }
                }
                break;
    
            case 2:
                if (hasError)
                {
                    con = this.removeErrorMessages(con);
                }

                complete = this.handleFieldValues();
    
                if (complete)
                {
                    workExecute.executeClusterPick(pass.lookup(#ClusterId), pass.lookup(#WMSLocationId), pass.lookup(#UserId));

                    // Look for remaining grouped picks
                    [locationId, workStop] = this.getNextGroupPickLocation(pass.lookup(#ClusterId));
    
                    if (locationId)
                    {
                        pass.insert(#WMSLocationId, locationId);
                        step = 2;
    
                        // Build clustered pick screen
                        ret = conNull();
                        ret = this.buildGroupPick(ret, locationId);
                        break;
                    }
                    else
                    {
                        this.executeBatchPrintForCluster(pass.lookup(#ClusterId), con);

                        if (WHSClusterProcessingCustomWorkStepFlight::instance().isEnabled())
                        {
                            if (this.executeBatchCustomWorkForCluster(pass.lookup(#ClusterId)))
                            {
                                // Need to recall to cover the case when print line is setup after custom line / several custom steps are present
                                this.recall(_buttonClicked);
                            }
                        }

                        // Otherwise, look for clustered put to execute
                        locationId = this.getNextGroupPutLocation(pass.lookup(#ClusterId));
    
                        if (locationId)
                        {
                            putReadyForOverrideLoc = true;
                            addButtons = true;
                            this.buildClusterPutScreen(locationId);
                            break;
                        }
                        else
                        {
                            // Look for any work tied to cluster without a location
                            noLocWorkId = this.findWorkWithNoPutLocation(pass.lookup(#ClusterId));
    
                            if (noLocWorkId)
                            {
                                this.updatePassFromWorkLine(noLocWorkId);
                                this.handleNoLocationWork();
                                break;
                            }
                        }
                    }
                }
                break;
    
            case 3:
                if (hasError)
                {
                    con = this.removeErrorMessages(con);
                }
                
                complete = this.handleFieldValues();
    
                if (complete)
                {
                    workExecute.executeClusterPut(pass.lookup(#ClusterId), pass.lookup(#WMSLocationId), pass.lookup(#UserId));
    
                    // Look for remaining grouped puts
                    locationId = this.getNextGroupPutLocation(pass.lookup(#ClusterId));
    
                    if (locationId)
                    {
                        if (isWHSWorkExecuteDisplayClusterPutawayClusterPutAddButtonsFlightEnabled)
                        {
                            putReadyForOverrideLoc = true;
                            addButtons = true;
                        }                        

                        if (pass.exists(#LocVerification)
                            && pass.lookupStr(#LocVerification) != locationId)
                        {
                            this.clearVerificationFields();
                        }
                    
                        this.buildClusterPutScreen(locationId);
                        break;
                    }
                    else
                    {
                        // Look for any work tied to cluster without a location
                        noLocWorkId = this.findWorkWithNoPutLocation(pass.lookup(#ClusterId));
    
                        if (noLocWorkId)
                        {
                            this.updatePassFromWorkLine(noLocWorkId);
                            this.handleNoLocationWork();
                            break;
                        }
                        else
                        {
                            this.completeCluster();
                        }
                    }
                }
                break;
    
            case 4:
                if (hasError)
                {
                    con = this.removeErrorMessages(con);
                }

                pass.insert(#Id, conpeek(conpeek(con, 5), #data));
    
                this.findWork();

                this.validateWorkUnit();
    
                clusterId = pass.lookup(#ClusterId);
    
                this.locateWork();

                this.autoExecuteInitialPicks();
    
                // Go into standard user directed flow
                pass.insert(#WorkId, workLine.WorkId);
                pass.insert(#DetermineStep, 1);
                con = conpoke(con, 2, pass.pack());
                workExecuteMode = this.getWorkExecuteModeFromWorkTransType(workTable.WorkTransType, workTable.TargetLicensePlateId);
                [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, workExecuteMode, step, userId, '', _buttonClicked, false);
                pass = new WHSRFPassthrough(Types::String, Types::String);
                pass = WHSRFPassthrough::create(tmpPass);
                pass.insert(#ClusterId, clusterId);
                addButtons = true;
    
                if (step == #Restart)
                {
                    step = 0;
                }
                else if (step == #StepOne)
                {
                    step = 1;
                    pass.insert(#DetermineStep, 1);
                }
    
                if (recall)
                {
                    con = this.updateModeStepPass(con, WHSWorkExecuteMode::ClusterPutaway, step, pass);
                    con = conpoke(con, 1, [WHSWorkExecuteMode::ClusterPutaway, step]);
                    this.recall(_buttonClicked);
                }
                break;
            default:
                if (pass.exists(#WorkId) || step == #WorkAuditTemplate || pass.exists(WHSWorkExecuteDisplayPutawayClusterControls::ClusterOverride))
                {
                    if (pass.exists(#LineNum))
                    {
                        workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
                    }
                    else if (pass.exists(#AuditWorkId))
                    {
                        workLine = WHSWorkTable::getLastWorkLine(pass.lookup(#AuditWorkId));
                        pass.insert(#InventLocationId, workLine.whsWorkTable().InventLocationId);
                    }
                    else
                    {
                        workLine = workExecute.getFirstOpenLine(pass.lookup(#WorkId), userId);
                    }
    
                    if (step != #Restart && workLine && !WHSRFMenuItemLine::validateMenuItemWorkClass(pass.lookupStr(#MenuItem), workLine.WorkClassId))
                    {
                        throw error("@WAX1459");
                    }
    
                    if (workLine)
                    {
                        if (pass.lookup(#InventLocationId) != workLine.whsWorkTable().InventLocationId)
                        {
                            throw(error("@WAX1207"));
                        }

                        prevStep = step;
                        clusterId = pass.lookup(#ClusterId);
                        con = conpoke(con, 2, pass.pack());
                        workTable = workLine.whsWorkTable();
                        workExecuteMode = this.getWorkExecuteModeFromWorkTransType(workTable.WorkTransType, workTable.TargetLicensePlateId);

                        if (suggestLocationFlightEnabled)
                        {
                            [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, workExecuteMode, step, userId, newLocationId, _buttonClicked, false);
                        }
                        else
                        {
                            [ret, step , recall, tmpPass] = this.processWorkLine(workLine, con, workExecuteMode, step, userId, '', _buttonClicked, false);
                        }

                        pass = new WHSRFPassthrough(Types::String, Types::String);
                        pass = WHSRFPassthrough::create(tmpPass);
                        pass.insert(#ClusterId, clusterId);
                        addButtons = true;
    
                        if (step == #Restart)
                        {
                            addButtons  = false;
                            recall      = false;
    
                            // Evaluate if any more work units need to be completed on cluster
                            if (WHSWorkClusterTable::ValidateOpenClusterWorkExists(pass.lookup(#ClusterId)))
                            {
                                workClusterTable = WHSWorkClusterTable::find(pass.lookup(#ClusterId));
    
                                if (WHSClusterProfile::find(workClusterTable.ClusterProfileId).PutawayClusterLocate == WHSPutawayClusterLocate::UserDirected)
                                {
                                    pass.remove(#WorkComplete);
    
                                    ret = conNull();
                                    ret = this.addErrorLabel(ret, "@WAX866", WHSRFColorText::Success);
                                    this.buildGetWorkIdLPUserDirect();
                                    step = 4;
                                }
                                else
                                {
                                    noLocWorkId = this.findWorkWithNoPutLocation(pass.lookup(#ClusterId));
    
                                    if (!noLocWorkId)
                                    {
                                        pass.insert(#InventLocationId, workLine.whsWorkTable().InventLocationId);
                                        pass.insert(#ClusterProfile, workClusterTable.ClusterProfileId);

                                        locationId = this.getNextGroupPutLocation(pass.lookup(#ClusterId));
    
                                        if (locationId)
                                        {
                                            this.buildClusterPutScreen(locationId);
                                            break;
                                        }
                                    }
                                    else
                                    {
                                        workTable   = WHSWorkTable::find(noLocWorkId);
                                        workLine    = workExecute.getFirstOpenLine(noLocWorkId, pass.lookup(#UserId));
    
                                        pass.insert(#NoOverrideButton, 1);
                                        ret = conNull();
                                        ret = this.buildWorkExceptions(ret);
                                        step = #OverrideStep2;
                                        break;
                                    }
                                }
                            }
                            else
                            {                               
                                wHSWorkClusterTable::lockUnlockWorkCluster(pass.lookup(#ClusterId), '');                              
                                // If not, prompt for cluster Id
                                WHSWorkClusterTable::updateClusterStatus(pass.lookup(#ClusterId), WHSWorkClusterStatus::Closed);
                                pass.remove(#ClusterId);
                                ret = conNull();
                                ret = this.addErrorLabel(ret, "@WAX3749", WHSRFColorText::Success);
                                ret = this.buildGetClusterId(ret);
                                step = 1;
                            }
                        }
                        else if (step == #StepOne)
                        {
                            // If we just overrode cluster put location. Display new put screen.
                            if (pass.exists(WHSWorkExecuteDisplayPutawayClusterControls::ClusterOverride))
                            {
                                ret = conNull();
                                ret = this.buildGroupPut(ret, pass.lookup(#WMSLocationId));
    
                                pass.remove(WHSWorkExecuteDisplayPutawayClusterControls::ClusterOverride);
                                pass.remove(#WorkId);
                                pass.remove(#LineNum);
                                step = 3;
                                break;
                            }
                            else if (prevStep == #NoLocation)
                            {
                                workLine = WHSWorkLine::findByRecId(workLine.RecId);
                                ret = conNull();

                                if (workLine.WMSLocationId)
                                {
                                    this.buildClusterPutScreen(workLine.WMSLocationId);
                                    addButtons = false;
                                }
                                else
                                {
                                    ret = this.buildPut(ret);
                                    step = #Put;
                                }

                                break;
                            }                            
    
                            step = 1;
                            pass.insert(#DetermineStep, 1);
                        }
                        else if (step == #NoLocation)
                        {
                            if (suggestLocationFlightEnabled && pass.exists(WHSWorkExecuteDisplayPutawayClusterControls::ClusterPutEmptyLocation))
                            {
                                ret = conNull();
                                ret = this.buildGroupPut(ret, '');
                                addButtons = false;
                            }
                            else
                            {
                                ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
                                ret += [this.buildControl(#RFButton, #RFPass, "@SYS113811", 1, '', #WHSRFUndefinedDataType, '', 0)];

                                if (suggestLocationFlightEnabled)
                                {
                                    ret = this.addSuggestLocationButton(ret);
                                }
                            }

                            addButtons = false;
                        }
    
                        if (recall)
                        {
                            clusterId = pass.lookup(#ClusterId);
                            con = this.updateModeStepPass(con, WHSWorkExecuteMode::UserDirected, step, pass);
                            con = conpoke(con, 1, [WHSWorkExecuteMode::UserDirected, step]);
                            this.recall(_buttonClicked);
                            pass.insert(#ClusterId, clusterId);
                        }
                    }
                    else
                    {
                        throw error("@WAX859");
                    }
                }
                else
                {
                    throw error("@WAX859");
                }
                break;
        }
        
        if (addButtons)
        {
            if (ret == conNull())
            {
                ret = _con;
            }

            ret = this.addButtons(ret);
        }
    
        ret = this.updateModeStepPass(ret, mode, step, pass);
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addOverrideButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds Override button to the form state.
    /// </summary>
    /// <param name="_con">
    /// Container containing the state of the form before button is added.
    /// </param>
    /// <param name="_newLine">
    /// 1 if the button is placed in a new line in the form, 0 otherwise.
    /// </param>
    /// <returns>
    /// Container containing the state of the form after button is added.
    /// </returns>
    container addOverrideButton(
            container _con,
            int       _newLine = 1)
    {
        container retCon = _con;
        if (putReadyForOverrideLoc)
        {
            if (this.hasOverrideBtnAccess(WHSWorkType::Put))
            {
                retCon += [this.buildControl(#RFButton, #RFOverride, "@WAX:OverrideLoc", _newLine, '', #WHSRFUndefinedDataType, '', 0)];
            }
        }
        else
        {
            retCon = super(_con, _newLine);
        }
        return retCon;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invokePassFunctionality</Name>
				<Source><![CDATA[
    private void invokePassFunctionality()
    {
        WHSWorkClusterTable::updateClusterStatus(pass.lookup(#ClusterId), WHSWorkClusterStatus::Passed);
        WHSWorkClusterTable::lockUnlockWorkCluster(pass.lookup(#ClusterId), '');
        pass.remove(#ClusterId);
        step = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleRFOverride</Name>
				<Source><![CDATA[
    private void handleRFOverride()
    {
        step = #OverrideStep1;
    
        if (suggestLocationFlightEnabled && pass.exists(WHSWorkExecuteDisplayPutawayClusterControls::ClusterPutEmptyLocation))
        {
            pass.remove(WHSWorkExecuteDisplayPutawayClusterControls::ClusterPutEmptyLocation);
        }

        // Clustered override
        if (workLine.RecId == 0)
        {
            workLine = this.findClusterWorkLineForOverride(pass.lookup(#ClusterId), pass.lookup(#WMSLocationId));
            pass.insert(WHSWorkExecuteDisplayPutawayClusterControls::ClusterOverride, 1);
            pass.insert(#WorkId, workLine.WorkId);
            pass.parmLineNum(workLine.LineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkUnit</Name>
				<Source><![CDATA[
    private void validateWorkUnit()
    {
        if (workTable.RecId == 0
            || workTable.WorkStatus > WHSWorkStatus::InProcess
            || !WHSWorkClusterLine::find(pass.lookup(#ClusterId), workTable.WorkId))
        {
            throw error(strFmt("@WAX:MustScanOpenOrInProcessWorkUnitTiedToCluster", pass.lookup(#ClusterId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDimForAutoPick</Name>
				<Source><![CDATA[
    private InventDim initInventDimForAutoPick()
    {
        InventDim inventDim;

        inventDim.LicensePlateId = workTable.TargetLicensePlateId;

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>autoExecuteInitialPicks</Name>
				<Source><![CDATA[
    private void autoExecuteInitialPicks()
    {
        workLine = workExecute.getFirstOpenLine(workTable.WorkId, pass.lookup(#UserId));
            
        // Auto-Execute initial picks off of default receipt location
        if (workLine.isFirstWorkLine())
        {
            workLine = workExecute.pickFromLicensePlate(workTable.TargetLicensePlateId,
                                                                workLine.WorkId,
                                                                workLine.LineNum,
                                                                pass.lookup(#UserId),
                                                                WHSWorkClusterPutawayCreateInventDimForAutoPickFlight::instance().isEnabled() ? this.initInventDimForAutoPick() : null,
                                                                workTable.TargetLicensePlateId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanClusterId</Name>
				<Source><![CDATA[
    private void scanClusterId()
    {
        ret = this.buildGetClusterId(ret);
        step = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleFieldValues</Name>
				<Source><![CDATA[
    private boolean handleFieldValues()
    {
        container           tmpFieldValues;
        WHSRFPassthrough    fieldValues;
        boolean             complete;

        [con, tmpFieldValues] = WHSRFControlData::processData(con, pass);

        fieldValues = WHSRFPassthrough::create(tmpFieldValues);

        pass = this.combineMaps(pass, fieldValues);

        [ret, complete] = this.processFieldValues(con, fieldValues);

        return complete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleNoLocationWork</Name>
				<Source><![CDATA[
    private void handleNoLocationWork()
    {
        if (!suggestLocationFlightEnabled)
        {
            pass.insert(#NoOverrideButton, 1);

            ret = conNull();
            ret = this.buildWorkExceptions(ret);
            step = #OverrideStep2;
        
            ret += [this.buildControl(#RFButton, #RFOK, "@SYS5473", 1, '', #WHSRFUndefinedDataType, '', 1)];
            ret += [this.buildControl(#RFButton, #RFPass, "@SYS113811", 1, '', #WHSRFUndefinedDataType, '', 0)];
            addButtons = false;
        }
        else
        {
            step = #NoLocation;
            pass.insert(WHSWorkExecuteDisplayPutawayClusterControls::ClusterPutEmptyLocation, 1);
            ret = conNull();
            ret = this.buildGroupPut(ret, '');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePassFromWorkLine</Name>
				<Source><![CDATA[
    private void updatePassFromWorkLine(WHSWorkId _noLocWorkId)
    {
        workTable = WHSWorkTable::find(_noLocWorkId);
        workLine  = workExecute.getFirstOpenLine(_noLocWorkId, pass.lookup(#UserId));

        pass.insert(#WorkId, workLine.WorkId);
        pass.parmLineNum(workLine.LineNum);
        pass.insert(#WMSLocationId, workLine.WMSLocationId);
        pass.insert(#ItemId, workLine.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildClusterPutScreen</Name>
				<Source><![CDATA[
    private void buildClusterPutScreen(WMSLocationId _locationId)
    {
        pass.insert(#WMSLocationId, _locationId);
        step = 3;

        // Build clustered put screen
        ret = conNull();
        ret = this.buildGroupPut(ret, _locationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeCluster</Name>
				<Source><![CDATA[
    private void completeCluster()
    {
        // Create parent LP structure if enabled on putaway cluster
        if (WHSClusterProfile::find(pass.lookup(#ClusterProfile)).ClusterPersistParentLP
                                    &&  this.validateNestedLPCreation())
        {
            WHSWorkClusterTable::CreateNestedLPFromCluster(pass.lookup(#ClusterId));
        }
    
        // Cluster completed
        // If staging steps remain we do not want to break the cluster
        if (this.validateClusterWorkClosed())
        {          
            wHSWorkClusterTable::lockUnlockWorkCluster(pass.lookup(#ClusterId), '');
            
            // Cluster completed
            WHSWorkClusterTable::updateClusterStatus(pass.lookup(#ClusterId), WHSWorkClusterStatus::Closed);
        }
        else
        {
            // Unlock Work
            wHSWorkClusterTable::lockUnlockWorkCluster(pass.lookup(#ClusterId), '');
            WHSWorkClusterTable::lockUnlockClusteredWork(pass.lookup(#ClusterId), '');
            WHSWorkClusterTable::updateClusterStatus(pass.lookup(#ClusterId), WHSWorkClusterStatus::Passed);
        }

        pass.remove(#ClusterId);
    
        ret = conNull();
        ret = this.addErrorLabel(ret, "@WAX3749", WHSRFColorText::Success);
        ret = this.buildGetClusterId(ret);
    
        step = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recall</Name>
				<Source><![CDATA[
    private void recall(str _buttonClicked)
    {
        pass.insert(#Recall, 1);
        this.setGlobals(mode, step, userId, pass, null);
        ret = this.displayForm(con, _buttonClicked);
        addButtons = true;
        pass = new WHSRFPassthrough(Types::String, Types::String);
        pass = WHSRFPassthrough::create(conpeek(ret, 2));

        if (pass.exists(#WorkId) && pass.exists(#LineNum))
        {
            workLine = WHSWorkLine::find(pass.lookup(#WorkId), pass.parmLineNum());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWorkWithNoPutLocation</Name>
				<Source><![CDATA[
    private WHSWorkId findWorkWithNoPutLocation(WHSClusterId _clusterId)
    {
        WHSWorkLine         noLocWorkLine;
        WHSWorkClusterLine  workClusterLine;
        WHSWorkClusterTable workClusterTable;
    
        select firstOnly WorkId from workClusterLine
            where workClusterLine.ClusterId  == _clusterId
            exists join workClusterTable
                where workClusterTable.ClusterId    == workClusterLine.ClusterId
                &&    workClusterTable.ClusterType  == WHSClusterType::Putaway
                exists join noLocWorkLine
                    where noLocWorkLine.WorkId          == workClusterLine.WorkId
                    &&    noLocWorkLine.WorkStatus      <= WHSWorkStatus::InProcess
                    &&    noLocWorkLine.WorkType        == WHSWorkType::Put
                    &&    noLocWorkLine.WMSLocationId   == '';
    
        return workClusterLine.WorkId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNestedLPCreation</Name>
				<Source><![CDATA[
    private boolean validateNestedLPCreation()
    {
        WHSWorkTable        clusterWorkTable;
        WHSWorkClusterLine  workClusterLine;
        WMSLocationId       locationId;
        WMSLocationId       prevLocationId;
        boolean             isValid = true;
    
        while select WorkId from clusterWorkTable
            exists join workClusterLine
                where workClusterLine.WorkId     == clusterWorkTable.WorkId
                &&    workClusterLine.ClusterId  == pass.lookup(#ClusterId)
        {
            locationId = WHSWorkTable::findFinalPutawayLocation(clusterWorkTable.WorkId);
    
            // If method returned blank location, work unit already pointed to multiple locations.
            if (!locationId)
            {
                isValid = false;
                break;
            }
    
            // Set previous location
            if (!prevLocationId)
            {
                prevLocationId = locationId;
            }
            else if (locationId != prevLocationId)
            {
                // Work pointed to different locations. Cannot created nested LP structure
                isValid = false;
                break;
            }
        }
    
        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateClusterWorkClosed</Name>
				<Source><![CDATA[
    private boolean validateClusterWorkClosed()
    {
        WHSWorkClusterLine  workClusterLine;
        WHSWorkTable        clusterWorkTable;
    
        select firstOnly RecId from clusterWorkTable
            where clusterWorkTable.WorkStatus < WHSWorkStatus::Closed
            exists join workClusterLine
                where workClusterLine.WorkId     == clusterWorkTable.WorkId
                &&    workClusterLine.ClusterId  == pass.lookup(#ClusterId);
    
        return clusterWorkTable.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>locateWork</Name>
				<Source><![CDATA[
    private void locateWork()
    {
        WHSLocatePutawayCluster locatePutawayCluster = WHSLocatePutawayCluster::construct();

        locatePutawayCluster.locateWorkHeader(workTable);
    
        workTable = WHSWorkTable::find(workTable.WorkId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddProductConfirmationControl</Name>
				<Source><![CDATA[
    internal boolean mustAddProductConfirmationControl()
    {
        return WHSClusterPutawaySupportProductConfirmationPutSingleItemFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustAddQtyConfirmationControl</Name>
				<Source><![CDATA[
    internal boolean mustAddQtyConfirmationControl(ItemId _itemId)
    {
        return _itemId
            && WHSClusterPutawaySupportQtyConfirmationPutSingleItemFlight::instance().isEnabled()
            && WHSRFAutoConfirm::isVerifyQtyConfirmationEnabled(pass.lookup(#MenuItem), WHSWorkType::Put);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>