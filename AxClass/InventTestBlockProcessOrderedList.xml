<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTestBlockProcessOrderedList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the ordered list of enumeration values for <c>InventTestBlockProcess</c> enum.
/// Allows to add values to the list to support extension.
/// </summary>
public class InventTestBlockProcessOrderedList implements Enumerable
{
    List blockProcessOrderedList;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the enumerator of the ordered list.
    /// </summary>
    /// <returns>An instance of <c>ListEnumerator</c> class.</returns>
    public Enumerator getEnumerator()
    {
        return blockProcessOrderedList.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addAfter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new value of <c>InventTestBlockProcess</c> enum to the ordered list after the specified value.
    /// </summary>
    /// <param name = "_newBlockProcessValue">Value to be added.</param>
    /// <param name = "_addAfterValue">Value to add after.</param>
    /// <exception>Could not find _addAfterValue in the ordered list.</exception>
    public void addAfter(InventTestBlockProcess _newBlockProcessValue, InventTestBlockProcess _addAfterValue)
    {
        ListIterator listIterator = new ListIterator(blockProcessOrderedList);
        while (listIterator.more())
        {
            if (listIterator.value() == _addAfterValue)
            {
                listIterator.next();
                listIterator.insert(_newBlockProcessValue);
                return;
            }
            listIterator.next();
        }
        throw error(strFmt("@SCM:CouldNotAddValueXAfterValueY_YnotFound", _newBlockProcessValue, _addAfterValue));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStart</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new value of <c>InventTestBlockProcess</c> enum to the start of the ordered list.
    /// </summary>
    /// <param name = "_blockProcess">Value to be added.</param>
    public void addStart(InventTestBlockProcess _blockProcess)
    {
        blockProcessOrderedList.addStart(_blockProcess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addEnd</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add a new value of <c>InventTestBlockProcess</c> enum to the end of the ordered list.
    /// </summary>
    /// <param name = "_blockProcess">Value to be added.</param>
    public void addEnd(InventTestBlockProcess _blockProcess)
    {
        blockProcessOrderedList.addEnd(_blockProcess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        this.initializeBlockProcessOrderedList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>InventTestBlockProcessOrderedList</c> class.
    /// </summary>
    /// <returns>An instance of <c>InventTestBlockProcessOrderedList</c> class.</returns>
    public static InventTestBlockProcessOrderedList construct()
    {
        return new InventTestBlockProcessOrderedList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBlockProcessOrderedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the list with all the applicable values of <c>InventTestBlockProcess</c> enumeration.
    /// </summary>
    private void initializeBlockProcessOrderedList()
    {
        blockProcessOrderedList = new List(Types::Enum);
        blockProcessOrderedList.addEnd(InventTestBlockProcess::None);
        blockProcessOrderedList.addEnd(InventTestBlockProcess::End);
        blockProcessOrderedList.addEnd(InventTestBlockProcess::ReportFinished);
        blockProcessOrderedList.addEnd(InventTestBlockProcess::Invoice);
        blockProcessOrderedList.addEnd(InventTestBlockProcess::PackingSlip);
        blockProcessOrderedList.addEnd(InventTestBlockProcess::PickingList);
        blockProcessOrderedList.addEnd(InventTestBlockProcess::ProductReceipt);
        blockProcessOrderedList.addEnd(InventTestBlockProcess::ReceiptsList);

        this.initializeBlockProcessOrderedListDelegate(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBlockProcessOrderedListDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Use this delegate to add new enumeration values to the list in the appropriate sort order, when extending the <c>InventTestBlockProcess</c> enum.
    /// </summary>
    /// <param name = "_orderedList">The reference to the ordered list.</param>
    delegate void initializeBlockProcessOrderedListDelegate(InventTestBlockProcessOrderedList _orderedList)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>