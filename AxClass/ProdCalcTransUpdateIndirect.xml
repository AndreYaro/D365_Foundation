<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCalcTransUpdateIndirect</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdCalcTransUpdateIndirect</c> class performs indirect cost recalculations for estimated costs for material and the time consumption records.
/// </summary>
public class ProdCalcTransUpdateIndirect
{
    protected ProdTable prodTable;
    protected NoYes updateProdIndirectTrans;
    protected CostCalcTransData costCalcTransData;
    protected CostTmpCalcCode2ProdCalcTrans costTmpCalcCode2ProdCalcTrans;
    protected TransDate transDate;
    protected Voucher voucher;
    private NoYes calculatingWIP_RU;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculates the cost sheet for a specified production order and updates records in <c>ProdCalcTrans</c> table and optionally in <c>ProdIndirectTrans</c> accordingly.
    /// </summary>
    /// <returns>An instance of the <c>CostCalcTransData</c> class that holds the details of the cost sheet calculations.</returns>
    public CostCalcTransData update()
    {
        this.initCostCalcTransData();

        if (prodTable.ProdType == ProdType::Process)
        {
            PmfCoByProdCalcTrans::updateRealCalcIndirect(prodTable, transDate, voucher);
        }

        this.fillCostCalcTransData(this.buildProdCalcTransQuery());

        CostSheet costSheet = CostSheetFactory::construct().createCostSheet(CostSheetModeStrategyCalculate::newParameter(CostPriceType::COGM, costCalcTransData));
        boolean costSheetCalculated = costSheet.calc(costCalcTransData);

        if (updateProdIndirectTrans)
        {
            this.financiallyUpdateProdIndirectTrans(costSheet);
        }

        if (costSheetCalculated)
        {
            this.calculateUpdateRealizedIndirectCosts(costSheet);
        }

        return costCalcTransData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostCalcTransData</Name>
				<Source><![CDATA[
    protected void initCostCalcTransData()
    {
        // Important: Specify site that should be used
        costCalcTransData = CostCalcTransData::construct(
            prodTable.ItemId,
            prodTable.reportedFinishedGood(),
            prodTable.RealDate,
            prodTable.CollectRefLevel + 1,
            prodTable.inventDim().InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildProdCalcTransQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to retrieve estimated costs for material and the time consumption records.
    /// </summary>
    /// <returns>The built query instance.</returns>
    protected Query buildProdCalcTransQuery()
    {
        Query query = new Query();

        QueryBuildDataSource qbds = query.addDataSource(tableNum(ProdCalcTrans));
        qbds.addRange(fieldNum(ProdCalcTrans, TransRefId)).value(queryValue(prodTable.ProdId));
        qbds.addRange(fieldNum(ProdCalcTrans, TransRefType)).value(queryValue(ProdTransRefType::Production));
        qbds.addRange(fieldNum(ProdCalcTrans, CalcType)).value(SysQuery::valueNot(ItemCalcType::Production));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCostCalcTransData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a costing sheet calculation input object with estimated cost data.
    /// </summary>
    /// <param name = "_prodCalcTransQuery">A query to retrieve instances of the <c>ProdCalcTrans</c>.</param>
    protected void fillCostCalcTransData(Query _prodCalcTransQuery)
    {
        QueryRun queryRun = new QueryRun(_prodCalcTransQuery);

        while (queryRun.next())
        {
            ProdCalcTrans prodCalcTrans = queryRun.get(tableNum(ProdCalcTrans));
            switch (prodCalcTrans.CalcType)
            {
                case ItemCalcType::IndirectSurcharge:
                case ItemCalcType::IndirectRate:
                case ItemCalcType::IndirectInUnitBased:
                case ItemCalcType::IndirectOutUnitBased:
                    // remember which ProdCalcTrans records correspond to Calculation nodes in the sheet
                    // don't add Calculations to CostCalcTransData at this stage
                    costTmpCalcCode2ProdCalcTrans.clear();
                    
                    costTmpCalcCode2ProdCalcTrans.initFromPmfProdCalcTransMap(prodCalcTrans);
                    
                    costTmpCalcCode2ProdCalcTrans.insert();
                    break;

                default:
                    this.fillCostCalcTransDataWithNonCalculatedCalcTypeRecord(prodCalcTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCostCalcTransDataWithNonCalculatedCalcTypeRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills a product calculation data object with estimated non calculated cost data.
    /// </summary>
    /// <param name = "_prodCalcTrans">An estimated material and time cost record.</param>
    [Replaceable]
    protected void fillCostCalcTransDataWithNonCalculatedCalcTypeRecord(ProdCalcTrans _prodCalcTrans)
    {
        if (_prodCalcTrans.CalcType == ItemCalcType::BOM
            && _prodCalcTrans.DerivedReference == InventRefType::Production
            && _prodCalcTrans.DerivedRefNum
            && !InventTable::find(_prodCalcTrans.Resource).modelGroup().inventModelType().stdCostBased()
            && InventParameters::isCostBreakdownActivated())
        {
            // consider derived Production as a multi-level structure (recursive call)
            costCalcTransData.addCostCalcTransData(ProdCalcTrans::updateRealCalcIndirect(ProdTable::find(_prodCalcTrans.DerivedRefNum), false, transDate, voucher));   
        }
        else
        {
            PmfRecycledBpConsumptionCalc_ProdReal::construct().updateCalcTransForCostSheetCalc(_prodCalcTrans, 0);

            if (!(_prodCalcTrans.bom == NoYes::Yes && InventParameters::isCostBreakdownActivated()))
            {
                costCalcTransData.addProdCalcTrans(_prodCalcTrans, CostSheetProdCalcMode::Costing);
            }
            else
            {
                ProdCalcTrans breakdownProdCalcTrans;
                breakdownProdCalcTrans.data(_prodCalcTrans);
                
                costCalcTransData.addCostingBreakdownProdCalcTrans(breakdownProdCalcTrans, CostSheetProdCalcMode::Costing);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateUpdateRealizedIndirectCosts</Name>
				<Source><![CDATA[
    protected void calculateUpdateRealizedIndirectCosts(CostSheet _costSheet)
    {
        ListEnumerator calculationNodeEnumerator = _costSheet.getNodeEnumerator(CostSheetNodeListType::IndirectCalculation);

        while (calculationNodeEnumerator.moveNext())
        {
            CostSheetNodeCalculation calculationNode = calculationNodeEnumerator.current();

            if (this.mustCalculateForCostSheetNode(calculationNode))
            {
                this.calculateUpdateRealizedCosts(calculationNode);

                if (updateProdIndirectTrans)
                {
                    this.insertIndirectCosts(calculationNode);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateUpdateRealizedCosts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates or updates realized costs for an estimated cost calculation instance.
    /// </summary>
    /// <param name = "_calculationNode">A cost sheet calculation node.</param>
    private void calculateUpdateRealizedCosts(CostSheetNodeCalculation _calculationNode)
    {
        ProdCalcTrans indirectProdCalcTrans;
        AmountMST realAmount = _calculationNode.getCostCalcTransData().getCostTotal();
        indirectProdCalcTrans.Qty = prodTable.QtyCalc;

        if (CostTmpCalcCode2ProdCalcTrans::exist(costTmpCalcCode2ProdCalcTrans, _calculationNode.getCode()))
        {
            CostTmpCalcCode2ProdCalcTrans costTmpCalcCode2ProdCalcTransRecord = CostTmpCalcCode2ProdCalcTrans::find(costTmpCalcCode2ProdCalcTrans, _calculationNode.getCode());
            ProdCollectRefProdId collectRefProdId = costTmpCalcCode2ProdCalcTransRecord.RefCollectRefProdId;
            ProdCollectRefLevel collectRefLevel = costTmpCalcCode2ProdCalcTransRecord.RefCollectRefLevel;
            LineNum lineNum = costTmpCalcCode2ProdCalcTransRecord.RefLineNum;
            RecId recId = costTmpCalcCode2ProdCalcTransRecord.RefRecId;

            select forupdate firstonly indirectProdCalcTrans
                where indirectProdCalcTrans.CollectRefProdId == collectRefProdId
                    && indirectProdCalcTrans.CollectRefLevel == collectRefLevel
                    && indirectProdCalcTrans.LineNum == lineNum
                    && indirectProdCalcTrans.RecId == recId;

            // Instead of the estimated values, use the qty that has been reported as finished.
            // if this is not availiable, use the calcQty
            indirectProdCalcTrans.RealConsump = _calculationNode.getCostCalcTransData().getConsumptionConstant() + _calculationNode.getCostCalcTransData().getConsumptionVariable();
            indirectProdCalcTrans.RealCostAmount = realAmount;
            indirectProdCalcTrans.update();
        }
        else
        {
            // Also negative indirect costs are possible
            if (realAmount != 0.00)
            {
                indirectProdCalcTrans = _calculationNode.toProdCalcTrans(CostSheetProdCalcMode::Costing);
                indirectProdCalcTrans.CollectRefProdId = prodTable.CollectRefProdId;
                indirectProdCalcTrans.TransRefId = prodTable.ProdId;
                indirectProdCalcTrans.TransRefType = ProdTransRefType::Production;
                indirectProdCalcTrans.LineNum = ProdCalcTrans::lastLineNum(prodTable.ProdId, ProdTransRefType::Production) + 0.0001;
                indirectProdCalcTrans.RealConsump = _calculationNode.getCostCalcTransData().getConsumptionConstant() + _calculationNode.getCostCalcTransData().getConsumptionVariable();
                indirectProdCalcTrans.RealCostAmount = realAmount;
                indirectProdCalcTrans.insert();
            }
        }

        // add Calculations to CostCalcTransData
        costCalcTransData.addProdCalcTrans(indirectProdCalcTrans, CostSheetProdCalcMode::Costing);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIndirectCosts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts indirect cost calculation data.
    /// </summary>
    /// <param name = "_calculationNode">A cost sheet calculation node.</param>
    protected void insertIndirectCosts(CostSheetNodeCalculation _calculationNode)
    {
        // insert records into ProdIndirectTrans for the amounts calculated at financial update
        ProdIndirectTrans prodIndirectTrans = _calculationNode.toProdIndirectTrans();
        if (prodTable.ProdType == ProdType::Process)
        {
            // add indirect from co-products
            prodIndirectTrans.Amount += CurrencyExchangeHelper::amount(PmfCoByProdCalcTrans::calcRealCostAmountByResourceType(prodTable.ProdId, prodIndirectTrans.Code, prodIndirectTrans.type2ItemCalcType()));
        }
        if (prodIndirectTrans.Amount != 0.0)
        {
            prodIndirectTrans.TransRefId = prodTable.ProdId;
            prodIndirectTrans.TransRefType = ProdTransRefType::Production;
            prodIndirectTrans.DefaultDimension = prodIndirectTrans.mergeDimension(_calculationNode.getDefaultDimension(), prodTable.DefaultDimension);
            prodIndirectTrans.EstimatedIndirectAbsorpLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_calculationNode.getAcctEstimatedIndirectAbsorption(), prodIndirectTrans.DefaultDimension);
            prodIndirectTrans.PostingEstimatedIndirectAbsorption = LedgerPostingType::IndirectEstimatedAbsorption;
            prodIndirectTrans.EstimIndirectAbsorpOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_calculationNode.getAcctEstimatedIndirectAbsorptionOffset(), prodIndirectTrans.DefaultDimension);
            prodIndirectTrans.PostingEstimatedIndirectAbsorptionOffset = LedgerPostingType::IndirectEstimatedAbsorptionOffset;

            prodIndirectTrans.IndirectAbsorptionLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_calculationNode.getAcctIndirectAbsorption(), prodIndirectTrans.DefaultDimension);
            prodIndirectTrans.PostingIndirectAbsorption = LedgerPostingType::IndirectAbsorption;
            prodIndirectTrans.IndirectAbsorptionOffsetLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(_calculationNode.getAcctIndirectAbsorptionOffset(), prodIndirectTrans.DefaultDimension);
            prodIndirectTrans.PostingIndirectAbsorptionOffset = LedgerPostingType::IndirectAbsorptionOffset;

            prodIndirectTrans.Calculated        = NoYes::Yes;
            prodIndirectTrans.DateEstimation    = transDate;
            prodIndirectTrans.VoucherEstimation = voucher;
            prodIndirectTrans.DateCalc          = transDate;
            prodIndirectTrans.VoucherCalc       = voucher;
            prodIndirectTrans.Posted            = NoYes::Yes;
            prodIndirectTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>financiallyUpdateProdIndirectTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Financially updates the <c>ProdIndirectTrans</c> records created at estimation.
    /// </summary>
    /// <param name = "_costSheet">A cost sheet.</param>
    /// <remarks>The Calculated flag will be flipped after the reversal records were created.</remarks>
    private void financiallyUpdateProdIndirectTrans(CostSheet _costSheet)
    {
        ProdIndirectTrans prodIndirectTrans;

        while select forupdate
                Code,
                DefaultDimension,
                IndirectAbsorptionLedgerDimension,
                IndirectAbsorptionOffsetLedgerDimension
            from prodIndirectTrans
            where prodIndirectTrans.TransRefId    == prodTable.ProdId
                && prodIndirectTrans.TransRefType == ProdTransRefType::Production
                && prodIndirectTrans.Calculated   == NoYes::No
                && prodIndirectTrans.Posted       == NoYes::Yes
        {
            CostSheetNodeCalculation calculationNode = _costSheet.findNodeByCode(prodIndirectTrans.Code);

            if (this.mustCalculateForCostSheetNode(calculationNode))
            {
                prodIndirectTrans.DateCalc                          = transDate;
                prodIndirectTrans.VoucherCalc                       = voucher;
                prodIndirectTrans.PostingIndirectAbsorption         = LedgerPostingType::IndirectAbsorption;
                prodIndirectTrans.PostingIndirectAbsorptionOffset   = LedgerPostingType::IndirectAbsorptionOffset;

                if (calculationNode != null)
                {
                    prodIndirectTrans.IndirectAbsorptionLedgerDimension         =
                        LedgerDimensionFacade::serviceCreateLedgerDimension(calculationNode.getAcctIndirectAbsorption(), prodIndirectTrans.DefaultDimension);
                    prodIndirectTrans.IndirectAbsorptionOffsetLedgerDimension   =
                        LedgerDimensionFacade::serviceCreateLedgerDimension(calculationNode.getAcctIndirectAbsorptionOffset(), prodIndirectTrans.DefaultDimension);
                }

                prodIndirectTrans.update();
            }
        }

        ProdIndirectTrans prodIndirectTransReversal;

        // Create reversal records

        while select
                sum(Amount),
                Code,
                CostGroupId,
                DefaultDimension,
                EstimatedIndirectAbsorpLedgerDimension,
                EstimIndirectAbsorpOffsetLedgerDimension,
                RateSubtype,
                SurchargeSubtype,
                UnitBasedSubtype,
                Type
            from prodIndirectTrans
                group by
                    TransRefId,
                    TransRefType,
                    Calculated,
                    Posted,
                    Code,
                    CostGroupId,
                    DefaultDimension,
                    EstimatedIndirectAbsorpLedgerDimension,
                    EstimIndirectAbsorpOffsetLedgerDimension,
                    RateSubtype,
                    SurchargeSubtype,
                    UnitBasedSubtype,
                    Type
            where prodIndirectTrans.TransRefId  == prodTable.ProdId
                && prodIndirectTrans.TransRefType == ProdTransRefType::Production
                // <GEERU>
                && (calculatingWIP_RU || prodIndirectTrans.Calculated == NoYes::No)
                // </GEERU>
                && prodIndirectTrans.Posted == NoYes::Yes
        {
            CostSheetNodeCalculation calculationNode = _costSheet.findNodeByCode(prodIndirectTrans.Code);

            if (this.mustCalculateForCostSheetNode(calculationNode))
            {
                prodIndirectTransReversal.clear();
                prodIndirectTransReversal.TransRefId                                    = prodTable.ProdId;
                prodIndirectTransReversal.TransRefType                                  = ProdTransRefType::Production;
                prodIndirectTransReversal.Posted                                        = NoYes::Yes;
                prodIndirectTransReversal.Amount                                        = -prodIndirectTrans.Amount;
                prodIndirectTransReversal.Code                                          = prodIndirectTrans.Code;
                prodIndirectTransReversal.CostGroupId                                   = prodIndirectTrans.CostGroupId;
                prodIndirectTransReversal.DateEstimation                                = transDate;
                prodIndirectTransReversal.VoucherEstimation                             = voucher;
                prodIndirectTransReversal.DateCalc                                      = transDate;
                prodIndirectTransReversal.VoucherCalc                                   = voucher;
                prodIndirectTransReversal.Calculated                                    = NoYes::Yes;

                prodIndirectTransReversal.DefaultDimension                              = prodIndirectTrans.DefaultDimension;

                prodIndirectTransReversal.EstimatedIndirectAbsorpLedgerDimension        = prodIndirectTrans.EstimatedIndirectAbsorpLedgerDimension;
                prodIndirectTransReversal.EstimIndirectAbsorpOffsetLedgerDimension      = prodIndirectTrans.EstimIndirectAbsorpOffsetLedgerDimension;
                prodIndirectTransReversal.PostingEstimatedIndirectAbsorption            = LedgerPostingType::IndirectEstimatedAbsorption;
                prodIndirectTransReversal.PostingEstimatedIndirectAbsorptionOffset      = LedgerPostingType::IndirectEstimatedAbsorptionOffset;

                if (calculationNode != null)
                {
                    prodIndirectTransReversal.IndirectAbsorptionLedgerDimension         =
                        LedgerDimensionFacade::serviceCreateLedgerDimension(calculationNode.getAcctIndirectAbsorption(), prodIndirectTrans.DefaultDimension);
                    prodIndirectTransReversal.IndirectAbsorptionOffsetLedgerDimension   =
                        LedgerDimensionFacade::serviceCreateLedgerDimension(calculationNode.getAcctIndirectAbsorptionOffset(), prodIndirectTrans.DefaultDimension);
                }

                prodIndirectTransReversal.PostingIndirectAbsorption                     = LedgerPostingType::IndirectAbsorption;
                prodIndirectTransReversal.PostingIndirectAbsorptionOffset               = LedgerPostingType::IndirectAbsorptionOffset;

                prodIndirectTransReversal.RateSubtype                                   = prodIndirectTrans.RateSubtype;
                prodIndirectTransReversal.SurchargeSubtype                              = prodIndirectTrans.SurchargeSubtype;
                prodIndirectTransReversal.UnitBasedSubtype                              = prodIndirectTrans.UnitBasedSubtype;
                prodIndirectTransReversal.Type                                          = prodIndirectTrans.Type;
                prodIndirectTransReversal.insert();
            }
        }

        // <GEERU>
        if (!calculatingWIP_RU)
        {
            // </GEERU>
            // Mark the original records as financially updated
            update_recordset prodIndirectTrans
                setting Calculated = NoYes::Yes
                where prodIndirectTrans.TransRefId    == prodTable.ProdId
                    && prodIndirectTrans.TransRefType == ProdTransRefType::Production
                    && prodIndirectTrans.Calculated   == NoYes::No
                    && prodIndirectTrans.Posted       == NoYes::Yes;
            // <GEERU>
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalculateForCostSheetNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether we need to perform any calculations for records that correspond to the passed cost sheet calculation node.
    /// </summary>
    /// <param name = "_calculationNode">A cost sheet calculation node.</param>
    /// <returns>true if we need to do calculations; otherwise, false.</returns>
    protected boolean mustCalculateForCostSheetNode(CostSheetNodeCalculation _calculationNode)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>ProdCalcTransUpdateIndirect</c> class using passed calculation parameters.
    /// </summary>
    /// <param name="_prodTable">A record in <c>ProdTable</c> table that represents the production order.</param>
    /// <param name="_updateProdIndirectTrans">true if records in <c>ProdIndirectTrans</c> have to be updated; optional, default value is false.</param>
    /// <param name="_transDate">The date of the financial update; optional. Must be specified if <c>_updateProdIndirectTrans</c> is true.</param>
    /// <param name="_voucher">The financial voucher; optional. Must be specified if <c>_updateProdIndirectTrans</c> is true.</param>
    /// <param name="_calculatingWIP_RU">true in case of WIP cost calculation; optional, default value is <c>NoYes::No</c>.</param>
    /// <returns>A new instance of the update indirect calculations class.</returns>
    public static ProdCalcTransUpdateIndirect newFromParameters(
        ProdTable   _prodTable,
        NoYes       _updateProdIndirectTrans = false,
        TransDate   _transDate = dateNull(),
        Voucher     _voucher = '',
        NoYes     _calculatingWIP_RU = NoYes::No)
    {
        ProdCalcTransUpdateIndirect prodCalcTransUpdateIndirect = new ProdCalcTransUpdateIndirect();

        prodCalcTransUpdateIndirect.prodTable = _prodTable;
        prodCalcTransUpdateIndirect.updateProdIndirectTrans = _updateProdIndirectTrans;
        prodCalcTransUpdateIndirect.transDate = _transDate;
        prodCalcTransUpdateIndirect.voucher = _voucher;
        prodCalcTransUpdateIndirect.calculatingWIP_RU = _calculatingWIP_RU;

        return prodCalcTransUpdateIndirect;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>