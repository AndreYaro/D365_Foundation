<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTurnoverReportPrint_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Class prints Invent turnover report
/// </summary>
public class InventTurnoverReportPrint_RU extends RunBaseBatch implements BatchRetryable
{
    boolean printRanges;
    DialogField fieldPrintRanges;
    InventTurnoverReportArgs_RU reportArgs;
    
    private const Version currentVersion = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.addGroup("@SYS28007");

        fieldPrintRanges = dialog.addFieldValue(extendedTypeStr(NoYesId), printRanges, "@SYS56502");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            printRanges = fieldPrintRanges.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@GLS102102";
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, printRanges, reportArgs ? reportArgs.pack(): conNull(), super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportArgs</Name>
				<Source><![CDATA[
    public InventTurnoverReportArgs_RU parmReportArgs(InventTurnoverReportArgs_RU _reportArgs = reportArgs)
    {
        reportArgs = _reportArgs;

        return reportArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new instance of Excel report and executes it
    /// </summary>
    public void run()
    {
        OXMLExcelReport_InventTurnoverReport_RU excelReport = OXMLExcelReport_InventTurnoverReport_RU::construct();

        excelReport.parmReportArgs(reportArgs);
        excelReport.parmPrintRanges(printRanges);

        excelReport.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container base;
        Version version = RunBase::getVersion(_packedClass);
        boolean ret = false;

        switch (version)
        {
            case 1:
                [version, printRanges, base] = _packedClass;
                ret = super(base);
                break;

            case CurrentVersion:
                container reportArgsPack;
                [version, printRanges, reportArgsPack, base] = _packedClass;

                if (reportArgsPack)
                {
                    reportArgs =  InventTurnoverReportArgs_RU::initFromPackedValues(reportArgsPack);
                }

                ret = super(base);
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventTurnoverReportPrint_RU construct()
    {
        return new InventTurnoverReportPrint_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventTurnoverReportPrint_RU report = InventTurnoverReportPrint_RU::newFromArgs(_args);

        if (report.prompt())
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00121, funcName());

            report.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates new <c>InvnetTurnoverReportPrint_RU</c> instance and sets args.
    /// </summary>
    /// <param name="_args">
    ///     <c>Args</c> for initializing class.
    /// </param>
    /// <returns>
    ///     Created <c>InventTurnoverReportPrint_RU</c> instance.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///     Throws if args is missing or incorrect.
    /// </exception>
    static InventTurnoverReportPrint_RU newFromArgs(Args _args)
    {
        if (!_args || !_args.caller() || classIdGet(_args.caller()) != classNum(InventTurnoverReportArgs_RU))
        {
            throw error("@SYS30498");
        }

        InventTurnoverReportPrint_RU report = InventTurnoverReportPrint_RU::construct();

        report.parmReportArgs(_args.caller());
        report.saveLast();

        return report;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>