<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceProposalCreateLinesInit</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for initializing invoice lines from various types of project transactions.
/// </summary>
class ProjInvoiceProposalCreateLinesInit
{
    PSATmpProjProposalTrans proposalTransDisplay;
    PSATmpProjProposalTrans proposalTransCreate;
    private Map invoiceableCache;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProposalTransCreate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a buffer of type <c>PSATmpProjProposalTrans</c>.
    /// </summary>
    /// <returns>
    /// A buffer of type <c>PSATmpProjProposalTrans</c>.
    /// </returns>
    public PSATmpProjProposalTrans getProposalTransCreate()
    {
        return proposalTransCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProposalTransDisplay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a buffer of type <c>PSATmpProjProposalTrans</c>.
    /// </summary>
    /// <returns>
    /// A buffer of type <c>PSATmpProjProposalTrans</c>.
    /// </returns>
    public PSATmpProjProposalTrans getProposalTransDisplay()
    {
        return proposalTransDisplay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type cost.
    /// </summary>
    /// <param name="_projCostTrans">
    /// Record ID of a record in <c>ProjCostTrans</c> table.
    /// </param>
    /// <param name="_projFundingSourceRefId">
    /// Record ID of a record in <c>ProjFundingSource</c> table.
    /// </param>
    public void initCost(ProjCostTrans _projCostTrans, ProjFundingSourceRefId _projFundingSourceRefId)
    {
        ProjCostTransSale           projCostTransSale;
        boolean                     isTransInserted;

        proposalTransDisplay.clear();
        proposalTransDisplay.initFromProjCostTrans(_projCostTrans);

        proposalTransDisplay.LineAmount = 0;
        proposalTransDisplay.SalesPrice = 0;

        while select projCostTransSale where
            projCostTransSale.TransId == _projCostTrans.TransId &&
            (!_projFundingSourceRefId || (_projFundingSourceRefId && projCostTransSale.FundingSource == _projFundingSourceRefId))
        {
            proposalTransCreate.clear();
            proposalTransCreate.data(proposalTransDisplay);

            proposalTransCreate.FundingSourceRefId = projCostTransSale.FundingSource;
            proposalTransCreate.RefTableId         = projCostTransSale.TableId;
            proposalTransCreate.RefRecId           = projCostTransSale.RecId;

            ProjTrans projTrans = ProjTrans::newProjCostTransSale(_projCostTrans, projCostTransSale);

            if (this.canBeInvoicedFromCache(projTrans))
            {
                if (projCostTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransCreate.LineAmount      =  projCostTransSale.LineAmount * -1;
                    proposalTransDisplay.LineAmount     += projCostTransSale.LineAmount * -1;

                    proposalTransCreate.Qty             =  proposalTransCreate.Qty  * -1;
                    proposalTransDisplay.Qty            =  proposalTransDisplay.Qty * -1;

                    proposalTransCreate.SalesPrice      =  projCostTransSale.SalesPrice;
                    proposalTransDisplay.SalesPrice     += projCostTransSale.SalesPrice;

                    if (ProjUseOriginalInvoiceDateCalcTotalsFlight::instance().isEnabled())
                    {
                        InvoiceDate origInvoiceDate = new ProjTransCostTransSale(_projCostTrans, projCostTransSale).getCreditNoteOrigTransInvoiceDate();
                        if (origInvoiceDate)
                        {
                            proposalTransCreate.FixedExchRate = ExchangeRateHelper::exchRate(proposalTransCreate.CurrencyCode, origInvoiceDate);
                            proposalTransDisplay.FixedExchRate = proposalTransCreate.FixedExchRate;
                        }
                    }
                }
                else
                {
                    proposalTransCreate.LineAmount      =  projCostTransSale.LineAmount;
                    proposalTransDisplay.LineAmount     += projCostTransSale.LineAmount;

                    proposalTransCreate.SalesPrice      =  projCostTransSale.SalesPrice;
                    proposalTransDisplay.SalesPrice     += projCostTransSale.SalesPrice;
                }

                proposalTransCreate.insert();

                isTransInserted = true;
            }
        }

        if (isTransInserted)
        {
            proposalTransDisplay.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type empl.
    /// </summary>
    /// <param name="_projEmplTrans">
    /// Record ID of a record in <c>ProjEmplTrans</c> table.
    /// </param>
    /// <param name="_projFundingSourceRefId">
    /// Record ID of a record in <c>ProjFundingSource</c> table.
    /// </param>
    public void initEmpl(ProjEmplTrans _projEmplTrans, ProjFundingSourceRefId _projFundingSourceRefId)
    {
        ProjEmplTransSale           projEmplTransSale;
        boolean                     isTransInserted;

        proposalTransDisplay.clear();
        proposalTransDisplay.initFromProjEmplTrans(_projEmplTrans);

        proposalTransDisplay.LineAmount = 0;
        proposalTransDisplay.SalesPrice = 0;
        proposalTransDisplay.IndirectAmount = 0;

        while select projEmplTransSale where
            projEmplTransSale.TransId == _projEmplTrans.TransId &&
            (!_projFundingSourceRefId || (_projFundingSourceRefId && projEmplTransSale.FundingSource == _projFundingSourceRefId))
        {
            proposalTransCreate.clear();
            proposalTransCreate.data(proposalTransDisplay);

            proposalTransCreate.FundingSourceRefId = projEmplTransSale.FundingSource;
            proposalTransCreate.RefTableId         = projEmplTransSale.TableId;
            proposalTransCreate.RefRecId           = projEmplTransSale.RecId;

            ProjTrans projTrans = ProjTrans::newProjEmplTransSale(_projEmplTrans, projEmplTransSale);

            if (this.canBeInvoicedFromCache(projTrans))
            {
                if (projEmplTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransCreate.LineAmount      =  projEmplTransSale.LineAmount * -1;
                    proposalTransDisplay.LineAmount     += projEmplTransSale.LineAmount * -1;

                    proposalTransCreate.Qty             =  proposalTransCreate.Qty  * -1;
                    proposalTransDisplay.Qty            =  proposalTransDisplay.Qty * -1;

                    proposalTransCreate.SalesPrice      =  projEmplTransSale.SalesPrice;
                    proposalTransDisplay.SalesPrice     += projEmplTransSale.SalesPrice;

                    proposalTransCreate.IndirectAmount  = projEmplTransSale.PSAIndirectInvoice  * -1;
                    proposalTransDisplay.IndirectAmount += projEmplTransSale.PSAIndirectInvoice * -1;
                    
                    if (ProjUseOriginalInvoiceDateCalcTotalsFlight::instance().isEnabled())
                    {
                        InvoiceDate origInvoiceDate = new ProjTransEmplTransSale(_projEmplTrans, projEmplTransSale).getCreditNoteOrigTransInvoiceDate();
                        if (origInvoiceDate)
                        {
                            proposalTransCreate.FixedExchRate = ExchangeRateHelper::exchRate(proposalTransCreate.CurrencyCode, origInvoiceDate);
                            proposalTransDisplay.FixedExchRate = proposalTransCreate.FixedExchRate;
                        }
                    }
                }
                else
                {
                    proposalTransCreate.LineAmount      =  projEmplTransSale.LineAmount;
                    proposalTransDisplay.LineAmount     += projEmplTransSale.LineAmount;

                    proposalTransCreate.SalesPrice      =  projEmplTransSale.SalesPrice;
                    proposalTransDisplay.SalesPrice     += projEmplTransSale.SalesPrice;

                    proposalTransCreate.IndirectAmount  = projEmplTransSale.PSAIndirectInvoice;
                    proposalTransDisplay.IndirectAmount += projEmplTransSale.PSAIndirectInvoice;
                }

                proposalTransCreate.insert();

                isTransInserted = true;
            }
        }

        if (isTransInserted)
        {
            proposalTransDisplay.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type item.
    /// </summary>
    /// <param name="_projItemTrans">
    /// Record ID of a record in <c>ProjItemTrans</c> table.
    /// </param>
    /// <param name="_projFundingSourceRefId">
    /// Record ID of a record in <c>ProjFundingSource</c> table.
    /// </param>
    public void initItem(ProjItemTrans _projItemTrans, ProjFundingSourceRefId _projFundingSourceRefId)
    {
        ProjItemTransSale           projItemTransSale;
        boolean                     isTransInserted;

        proposalTransDisplay.clear();
        proposalTransDisplay.initFromProjItemTrans(_projItemTrans);

        proposalTransDisplay.LineAmount = 0;
        proposalTransDisplay.SalesPrice = 0;

        while select projItemTransSale where
            projItemTransSale.ProjTransId == _projItemTrans.ProjTransId &&
            (!_projFundingSourceRefId || (_projFundingSourceRefId && projItemTransSale.FundingSource == _projFundingSourceRefId))
        {
            proposalTransCreate.clear();
            proposalTransCreate.data(proposalTransDisplay);

            proposalTransCreate.FundingSourceRefId = projItemTransSale.FundingSource;
            proposalTransCreate.RefTableId         = projItemTransSale.TableId;
            proposalTransCreate.RefRecId           = projItemTransSale.RecId;

            ProjTrans projTrans = ProjTrans::newProjItemTransSale(_projItemTrans, projItemTransSale);
            
            if (this.canBeInvoicedFromCache(projTrans))
            {
                if (projItemTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransCreate.LineAmount      =  projItemTransSale.LineAmount * -1;
                    proposalTransDisplay.LineAmount     += projItemTransSale.LineAmount * -1;

                    proposalTransCreate.Qty             =  proposalTransCreate.Qty  * -1;
                    proposalTransDisplay.Qty            =  proposalTransDisplay.Qty * -1;

                    proposalTransCreate.SalesPrice      =  projItemTransSale.SalesPrice;
                    proposalTransDisplay.SalesPrice     += projItemTransSale.SalesPrice;

                    if (ProjUseOriginalInvoiceDateCalcTotalsFlight::instance().isEnabled())
                    {
                        InvoiceDate origInvoiceDate = new ProjTransItemTransSale(_projItemTrans, projItemTransSale).getCreditNoteOrigTransInvoiceDate();
                        if (origInvoiceDate)
                        {
                            proposalTransCreate.FixedExchRate = ExchangeRateHelper::exchRate(proposalTransCreate.CurrencyCode, origInvoiceDate);
                            proposalTransDisplay.FixedExchRate = proposalTransCreate.FixedExchRate;
                        }
                    }
                }
                else
                {
                    proposalTransCreate.LineAmount      =  projItemTransSale.LineAmount;
                    proposalTransDisplay.LineAmount     += projItemTransSale.LineAmount;

                    proposalTransCreate.SalesPrice      =  projItemTransSale.SalesPrice;
                    proposalTransDisplay.SalesPrice     += projItemTransSale.SalesPrice;
                }

                proposalTransCreate.insert();

                isTransInserted = true;
            }
        }

        if (isTransInserted)
        {
            if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
            {
                this.kittingSetInventTransId_delegate(proposalTransDisplay);
            }
            proposalTransDisplay.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits invoice lines for transactions of type revenue.
    /// </summary>
    /// <param name="_projRevenueTrans">
    /// Record ID of a record in <c>ProjRevenueTrans</c> table.
    /// </param>
    /// <param name="_projFundingSourceRefId">
    /// Record ID of a record in <c>ProjFundingSource</c> table.
    /// </param>
    public void initRevenue(ProjRevenueTrans _projRevenueTrans, ProjFundingSourceRefId _projFundingSourceRefId)
    {
        ProjRevenueTransSale        projRevenueTransSale;
        boolean                     isTransInserted;

        proposalTransDisplay.clear();
        proposalTransDisplay.initFromProjRevenueTrans(_projRevenueTrans);

        proposalTransDisplay.LineAmount = 0;
        proposalTransDisplay.SalesPrice = 0;

        while select projRevenueTransSale where
            projRevenueTransSale.TransId == _projRevenueTrans.TransId &&
            (!_projFundingSourceRefId || (_projFundingSourceRefId && projRevenueTransSale.FundingSource == _projFundingSourceRefId))
        {
            proposalTransCreate.clear();
            proposalTransCreate.data(proposalTransDisplay);

            proposalTransCreate.FundingSourceRefId = projRevenueTransSale.FundingSource;
            proposalTransCreate.RefTableId         = projRevenueTransSale.TableId;
            proposalTransCreate.RefRecId           = projRevenueTransSale.RecId;

            ProjTrans projTrans = ProjTrans::newProjRevenueTransSale(_projRevenueTrans, projRevenueTransSale);
            
            if (this.canBeInvoicedFromCache(projTrans))
            {
                if (projRevenueTransSale.TransStatus == ProjTransStatus::MarkedCreditnote)
                {
                    proposalTransCreate.LineAmount      =  projRevenueTransSale.LineAmount * -1;
                    proposalTransDisplay.LineAmount     += projRevenueTransSale.LineAmount * -1;

                    proposalTransCreate.Qty             =  proposalTransCreate.Qty  * -1;
                    proposalTransDisplay.Qty            =  proposalTransDisplay.Qty * -1;

                    proposalTransCreate.SalesPrice      =  projRevenueTransSale.SalesPrice;
                    proposalTransDisplay.SalesPrice     += projRevenueTransSale.SalesPrice;

                    if (ProjUseOriginalInvoiceDateCalcTotalsFlight::instance().isEnabled())
                    {
                        InvoiceDate origInvoiceDate = new ProjTransRevenueTransSale(_projRevenueTrans, projRevenueTransSale).getCreditNoteOrigTransInvoiceDate();
                        if (origInvoiceDate)
                        {
                            proposalTransCreate.FixedExchRate = ExchangeRateHelper::exchRate(proposalTransCreate.CurrencyCode, origInvoiceDate);
                            proposalTransDisplay.FixedExchRate = proposalTransCreate.FixedExchRate;
                        }
                    }
                }
                else
                {
                    proposalTransCreate.LineAmount      =  projRevenueTransSale.LineAmount;
                    proposalTransDisplay.LineAmount     += projRevenueTransSale.LineAmount;

                    proposalTransCreate.SalesPrice      =  projRevenueTransSale.SalesPrice;
                    proposalTransDisplay.SalesPrice     += projRevenueTransSale.SalesPrice;
                }

                proposalTransCreate.insert();

                isTransInserted = true;
            }
        }

        if (isTransInserted)
        {
            proposalTransDisplay.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCache</Name>
				<Source><![CDATA[
    public void setCache(Map _invoiceableCache)
    {
        invoiceableCache = _invoiceableCache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeInvoicedFromCache</Name>
				<Source><![CDATA[
    protected boolean canBeInvoicedFromCache(ProjTrans _projTrans)
    {
        boolean canBeInvoiced;
        
        if (!invoiceableCache || !ProjInvoiceProposalInvoiceableCacheFlight::instance().isEnabled())
        {
            canBeInvoiced = _projTrans.canBeInvoiced();
        }
        else
        {
            str key = this.cacheKey(_projTrans);
        
            if (invoiceableCache.exists(key))
            {
                canBeInvoiced = invoiceableCache.lookup(key);
            }
            else
            {
                canBeInvoiced = _projTrans.canBeInvoiced();
                invoiceableCache.insert(key, canBeInvoiced);
            }
        }

        return canBeInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cacheKey</Name>
				<Source><![CDATA[
    protected str cacheKey(ProjTrans _projTrans)
    {
        #define.keyDelimiter('-')

        return strFmt("%1%6%2%6%3%6%4%6%5%6", _projTrans.fundingSource(), _projTrans.projId(), _projTrans.categoryId(), _projTrans.psaContractLineNum(), _projTrans.transType(), #keyDelimiter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingSetInventTransId_delegate</Name>
				<Source><![CDATA[
    delegate void kittingSetInventTransId_delegate(PSATmpProjProposalTrans _proposalTrans)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>