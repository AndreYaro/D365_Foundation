<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceJournalCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjInvoiceJournalCreate</c> class is used to post a project invoice.
/// </summary>
public class ProjInvoiceJournalCreate extends FormletterJournalCreate
{
    #ISOCountryRegionCodes
    ProjProposalJour            projProposalJour;
    ProjInvoiceTable            projInvoiceTable;
    ProjInvoiceParmTable        projInvoiceParmTable;
    ProjInvoiceJour             projInvoiceJour;

    NoYes                       creditNote;
    ProjProposalTotals          projProposalTotals;

    CreditLineError             creditWarning;
    TypeOfCreditmaxCheck        checkCreditMax;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates a journal and voucher number from the corresponding number sequences.
    /// </summary>
    /// <returns>
    /// A <c>NumberSeq</c> object.
    /// </returns>
    protected NumberSeq allocateNumAndVoucher()
    {
        NumberSeq allocateNumAndVoucher;
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            return ProjInvoiceJour::getNumSeqAndVoucher(projProposalJour, creditNote, ltDocNumberingCode);
        }
        else
        {
            allocateNumAndVoucher = ProjInvoiceJour::getNumSeqAndVoucher(projProposalJour, creditNote);
        }

        if (BrazilParameters::isEnabled())
        {
            allocateNumAndVoucher = this.postAllocateNumAndVoucherBR(allocateNumAndVoucher);
        }

        return allocateNumAndVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjProposalJour</Name>
				<Source><![CDATA[
    public ProjProposalJour parmProjProposalJour(ProjProposalJour _projProposalJour = projProposalJour)
    {
        projProposalJour = _projProposalJour;
        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a journal can be created.
    /// </summary>
    /// <returns>
    /// true if the journal can be created; otherwise, false.
    /// </returns>
    protected boolean check()
    {
        boolean ret;

        ret = super();

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            ret = this.checkDocumentData_PL();

            ret = ret & ProjInvoiceJournalCreate::validateServiceNumber(parmId);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#IsoHU]))
        {
            ret = SalesInvoiceJournalCreate::checkDocumentDate_W(projProposalJour.DeliveryPostalAddress,
                                                                 projInvoiceParmTable.DocumentDate_W,
                                                                 projInvoiceParmTable.InvoiceDate,
                                                                 creditNote,
                                                                 fieldPName(ProjInvoiceParmTable, DocumentDate_W),
                                                                 "@SYS57610") && ret;
        }

        if (ret && TradeBLWIParameters::isBLWIFeatureEnabled())
        {
            ret = TradeBLWIParameters::checkBLWI(projProposalJour.projInvoiceTable().RecId,
                                                TradeBLWITypeOfForm::InvoiceProject,
                                                CustTable::find(projProposalJour.InvoiceAccount));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBeforePostingEinvoice</Name>
				<Source><![CDATA[
    protected void checkBeforePostingEinvoice()
    {
        LogisticsPostalAddress  postalAddress;
        ProjFundingSource       projFundingSource;

        if (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && CustTable::isCustDKPublic(projProposalJour.InvoiceAccount) == NoYes::Yes)
        {
            if (projProposalJour.FundingSource != 0)
            {
                projFundingSource = ProjFundingSource::find(projProposalJour.FundingSource);
            }

            if ((CustTable::isCustPublic_NO(projProposalJour.InvoiceAccount) && !projProposalJour.contactPersonName_NO())
                || (!SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]) && !ContactPerson::find(projFundingSource.ContactPersonId).personName()))
            {
                warning(strFmt("@SYS26332", "@SYS100792"));
            }

            postalAddress = LogisticsLocationEntity::location2PostalAddress(projFundingSource.InvoiceLocation);
            if (!postalAddress.Street)
            {
                warning(strFmt("@SYS26332", "@SYS23438"));
            }

            if (!postalAddress.ZipCode)
            {
                warning(strFmt("@SYS26332", "@SYS12463"));
            }

            if (!postalAddress.City)
            {
                warning(strFmt("@SYS26332", "@SYS22249"));
            }

            if (!postalAddress.CountryRegionId)
            {
                warning(strFmt("@SYS26332", "@SYS7437"));
            }

            if (!CompanyInfo::find().CoRegNum)
            {
                warning(strFmt("@SYS26332", "@SYS969"));
            }

            if (LogisticsAddressCountryRegion::find(postalAddress.CountryRegionId).isOcode)
            {
                if (strLen(LogisticsAddressCountryRegion::find(postalAddress.CountryRegionId).isOcode) != 2)
                {
                    warning(strFmt("@SYS101033", postalAddress.CountryRegionId));
                }
            }
            else
            {
                warning(strFmt("@SYS101034", postalAddress.CountryRegionId));
            }

            if (Currency::find(projProposalJour.CurrencyId).CurrencyCodeISO)
            {
                if (strLen(Currency::find(projProposalJour.CurrencyId).CurrencyCodeISO) != 3)
                {
                    warning(strFmt("@SYS344733", projProposalJour.CurrencyId));
                }
            }
            else
            {
                warning(strFmt("@SYS101036", projProposalJour.CurrencyId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDocumentData_PL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks various attributes of a project invoice during posting.
    /// </summary>
    /// <returns>
    /// True if document is postable.
    /// </returns>
    protected boolean checkDocumentData_PL()
    {
        boolean ret = true;
        ProjProposalItem        projProposalItem;
        ProjInvoiceParmTable    projInvoiceParmTableLocal = this.parmParmTable();
        ParmId                  localParmId = projInvoiceParmTableLocal.ParmId;

        projInvoiceParmTableLocal = null;

        while select projInvoiceParmTableLocal
            where projInvoiceParmTableLocal.ParmId == localParmId
        {
            if (ProjInvoiceJournalCreate::checkVatDueDate_W_ShouldBeMandatoryDueToCustTableMandatoryVatDate_PL(projInvoiceParmTableLocal, this.proforma()))
            {
                ret = checkFailed("@GLS220905");
            }

            if (!this.proforma()
                && !projInvoiceParmTableLocal.SalesDate_CZ
                && isConfigurationkeyEnabled(configurationKeyNum(TradeDates_W))
                && TaxGroupHeading::find(projInvoiceParmTableLocal.projProposalJour_CZ().TaxGroupId).MandatorySalesDate_W)
            {
                ret = checkFailed(strFmt("@GLS110211",
                                   projInvoiceParmTableLocal.ProposalId,
                                   fieldId2pname(tableNum(ProjInvoiceParmTable), fieldNum(ProjInvoiceParmTable, SalesDate_CZ))));
            }

            if (ProjInvoiceJournalCreate::checkVatDueDate_W_ShouldBeMandatoryDueToCurrencyDifference_PL(projInvoiceParmTableLocal, this.proforma()))
            {
                ret = checkFailed("@GLS114474");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal header during the update of the sales order, the purchase order, or the request
    /// for a quote.
    /// </summary>
    protected void createJournalHeader()
    {
        this.initializeJournalHeader();

        projInvoiceJour.insert();

        Docu::copy(projProposalJour, projInvoiceJour);

        if (!this.proforma())
        {
            EInvoice_IT::newProjInvoice(projInvoiceJour);
        }

        TradeBLWIJournalPurposeCodes::createRecordFromJournal(projInvoiceTable.RecId,
            TradeBLWITypeOfForm::InvoiceProject,
            projInvoiceJour.RecId,
            TradeBLWITypeOfForm::ProjInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a journal line.
    /// </summary>
    /// <param name="_common">
    /// The record to base the journal line upon.
    /// </param>
    protected void createJournalLine(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the journal lines during the update of the sales order, the purchase order, or the request
    /// for a quote.
    /// </summary>
    protected void createJournalLines()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLink</Name>
				<Source><![CDATA[
    protected void createJournalLink(Common _common)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditMaxOk</Name>
				<Source><![CDATA[
    protected boolean creditMaxOk(Amount _amount)
    {
        boolean bRet = true;

        //  prepayments can not be greater than the external Forecast
        if (projInvoiceJour.ProjInvoiceType == ProjInvoiceType::OnAccount)
        {
            bRet = this.psAcheckOnAccountLimit(_amount);
        }

        if (PaymTerm::cashLedgerDimension(projProposalJour.Payment))
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                return bRet;
            }
            else
            {
                return true;
            }
        }

        if (projInvoiceJour.creditCardBypassCreditLimit())
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                return bRet;
            }
            else
            {
                return true;
            }
        }

        if (_amount > 0)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                return bRet && CustTable::checkCreditLimit(projProposalJour.InvoiceAccount, checkCreditMax, _amount);
            }
            else
            {
                return CustTable::checkCreditLimit(projProposalJour.InvoiceAccount, checkCreditMax, _amount);
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///     setting exchange rates.
    /// </summary>
    protected void exchRateSet()
    {
        boolean     exchRateSet;
        ExchRate    exchRate;
        ExchRate exchRateSecond;
        boolean isExchRateConvertFlightEnabled = ProjInvoiceJourSetExchangeRateDecimalFlight::instance().isEnabled();

        void setExchRate(ExchRate _exchRate, ExchRate _exchRateSecond)
        {
            if (isExchRateConvertFlightEnabled)
            {
                // Field ProjProposalJour.exchRate only stores 12 decimal value such as 2514.499999969964, but following each method setXXExchRate calculated exchange rate's value may have more than
                // 12 decimal value such as 2514.4999999699642975003587765, then comparing these 2 values will be always failed and get error.
                // Use table buffer projProposalJourLocal to convert the value to the correct decimal and then assigning and comparing
                ProjProposalJour projProposalJourLocal;
                projProposalJourLocal.ExchRate = _exchRate;
                _exchRate = projProposalJourLocal.ExchRate;

                projProposalJourLocal.ExchrateSecondary = _exchRateSecond;
                _exchRateSecond = projProposalJourLocal.ExchrateSecondary;
            }

            if (!exchRateSet)
            {
                exchRateSet = true;
                exchRate = _exchRate;
                exchRateSecond = _exchRateSecond;
            }
            else
            {
                if ((exchRate != _exchRate) ||
                    (exchRateSecond != _exchRateSecond))
                {
                    throw error("@SYS50057");
                }
            }
        }

        void setEmplExchRate()
        {
            ProjProposalEmpl        projProposalEmpl;
            ProjProposalEmplDetail  projProposalEmplDetail;
            ProjEmplTransSale       projEmplTransSale;
            ProjInvoiceEmplDetail   projInvoiceEmplDetailOriginal;
            ProjInvoiceJour         projInvoiceJourOriginal;
            ProjTrans               projTrans;

            while select projProposalEmpl
                where projProposalEmpl.ProposalId == projProposalJour.ProposalId
            join projProposalEmplDetail
                where projProposalEmplDetail.ProposalRefRecId == projProposalEmpl.RecId
            join projEmplTransSale
                where projEmplTransSale.RecId == projProposalEmplDetail.SaleRefRecId
            {
                projTrans = ProjTrans::newProjProposalEmplSale(projProposalEmpl, projProposalEmplDetail, projEmplTransSale);
                if (projEmplTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
                {
                    select firstOnly projInvoiceEmplDetailOriginal
                        where  projInvoiceEmplDetailOriginal.SaleRefRecId == projEmplTransSale.RecId
                            && !projInvoiceEmplDetailOriginal.RefRecId;
                    if (!projInvoiceEmplDetailOriginal)
                    {
                        throw error("@SYS6144");
                    }
                    projInvoiceJourOriginal = projInvoiceEmplDetailOriginal.projInvoiceEmpl().projInvoiceJour();
                    if (!projInvoiceJourOriginal)
                    {
                        throw error("@SYS6144");
                    }
                    setExchRate(projTrans.exchRateSales(projInvoiceJourOriginal.InvoiceDate),
                        projTrans.exchRateSecondarySales(projInvoiceJourOriginal.InvoiceDate));
                }
                else
                {
                    setExchRate(projTrans.exchRateSales(projInvoiceJour.InvoiceDate),
                        projTrans.exchRateSecondarySales(projInvoiceJour.InvoiceDate));
                }
            }
        }

        void setCostExchRate()
        {
            ProjProposalCost        projProposalCost;
            ProjProposalCostDetail  projProposalCostDetail;
            ProjCostTransSale       projCostTransSale;
            ProjInvoiceCostDetail   projInvoiceCostDetailOriginal;
            ProjInvoiceJour         projInvoiceJourOriginal;
            ProjTrans               projTrans;

            while select projProposalCost
                where projProposalCost.ProposalId == projProposalJour.ProposalId
            join projProposalCostDetail
                where projProposalCostDetail.ProposalRefRecId == projProposalCost.RecId
            join projCostTransSale
                where projCostTransSale.RecId == projProposalCostDetail.SaleRefRecId
            {
                projTrans = ProjTrans::newProjProposalCostSale(projProposalCost, projProposalCostDetail, projCostTransSale);
                if (projCostTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
                {
                    select firstOnly projInvoiceCostDetailOriginal
                        where  projInvoiceCostDetailOriginal.SaleRefRecId == projCostTransSale.RecId
                            && !projInvoiceCostDetailOriginal.RefRecId;
                    if (!projInvoiceCostDetailOriginal)
                    {
                        throw error("@SYS6144");
                    }
                    projInvoiceJourOriginal = projInvoiceCostDetailOriginal.projInvoiceCost().projInvoiceJour();
                    if (!projInvoiceJourOriginal)
                    {
                        throw error("@SYS6144");
                    }
                    setExchRate(projTrans.exchRateSales(projInvoiceJourOriginal.InvoiceDate),
                        projTrans.exchRateSecondarySales(projInvoiceJourOriginal.InvoiceDate));
                }
                else
                {
                    setExchRate(projTrans.exchRateSales(projInvoiceJour.InvoiceDate),
                        projTrans.exchRateSecondarySales(projInvoiceJour.InvoiceDate));
                }
            }
        }

        void setItemExchRate()
        {
        ProjProposalItem        projProposalItem;
        ProjProposalItemDetail  projProposalItemDetail;
        ProjItemTransSale       projItemTransSale;
        ProjInvoiceItemDetail   projInvoiceItemDetailOriginal;
        ProjInvoiceJour         projInvoiceJourOriginal;
        ProjTrans               projTrans;

            while select projProposalItem
                where projProposalItem.ProposalId == projProposalJour.ProposalId
            join projProposalItemDetail
                where projProposalItemDetail.ProposalRefRecId == projProposalItem.RecId
            join projItemTransSale
                where projItemTransSale.RecId == projProposalItemDetail.SaleRefRecId
            {
                projTrans = ProjTrans::newProjProposalItemSale(projProposalItem, projProposalItemDetail, projItemTransSale);
                if (projItemTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
                {
                    select firstOnly projInvoiceItemDetailOriginal
                        where  projInvoiceItemDetailOriginal.SaleRefRecId == projItemTransSale.RecId
                            && !projInvoiceItemDetailOriginal.RefRecId;
                    if (!projInvoiceItemDetailOriginal)
                    {
                        throw error("@SYS6144");
                    }
                    projInvoiceJourOriginal = projInvoiceItemDetailOriginal.projInvoiceItem().projInvoiceJour();
                    if (!projInvoiceJourOriginal)
                    {
                        throw error("@SYS6144");
                    }
                    setExchRate(projTrans.exchRateSales(projInvoiceJourOriginal.InvoiceDate),
                        projTrans.exchRateSecondarySales(projInvoiceJourOriginal.InvoiceDate));
                }
                else
                {
                    setExchRate(projTrans.exchRateSales(projInvoiceJour.InvoiceDate),
                        projTrans.exchRateSecondarySales(projInvoiceJour.InvoiceDate));
                }
            }
        }
        
        void setRevenueExchRate()
        {
            ProjProposalRevenue         projProposalRevenue;
            ProjProposalRevenueDetail   projProposalRevenueDetail;
            ProjRevenueTransSale        projRevenueTransSale;
            ProjInvoiceRevenueDetail    projInvoiceRevenueDetailOriginal;
            ProjInvoiceJour             projInvoiceJourOriginal;
            ProjTrans                   projTrans;

            while select projProposalRevenue
                where projProposalRevenue.ProposalId == projProposalJour.ProposalId
            join projProposalRevenueDetail
                where projProposalRevenueDetail.ProposalRefRecId == projProposalRevenue.RecId
            join projRevenueTransSale
                where projRevenueTransSale.RecId == projProposalRevenueDetail.SaleRefRecId
            {
                projTrans = ProjTrans::newProjProposalRevenueSale(projProposalRevenue, projProposalRevenueDetail, projRevenueTransSale);
                if (projRevenueTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
                {
                    select firstOnly projInvoiceRevenueDetailOriginal
                        where  projInvoiceRevenueDetailOriginal.SaleRefRecId == projRevenueTransSale.RecId
                            && !projInvoiceRevenueDetailOriginal.RefRecId;
                    if (!projInvoiceRevenueDetailOriginal)
                    {
                        throw error("@SYS6144");
                    }
                    projInvoiceJourOriginal = projInvoiceRevenueDetailOriginal.projInvoiceRevenue().projInvoiceJour();
                    if (!projInvoiceJourOriginal)
                    {
                        throw error("@SYS6144");
                    }
                    setExchRate(projTrans.exchRateSales(projInvoiceJourOriginal.InvoiceDate),
                        projTrans.exchRateSecondarySales(projInvoiceJourOriginal.InvoiceDate));
                }
                else
                {
                    setExchRate(projTrans.exchRateSales(projInvoiceJour.InvoiceDate),
                        projTrans.exchRateSecondarySales(projInvoiceJour.InvoiceDate));
                }
            }
        }

        void setOnAccExchRate()
        {
            ProjProposalOnAcc       projProposalOnAcc;
            ProjProposalOnAccDetail projProposalOnAccDetail;
            ProjOnAccTransSale      projOnAccTransSale;
            ProjInvoiceOnAccDetail  projInvoiceOnAccDetailOriginal;
            ProjInvoiceJour         projInvoiceJourOriginal;
            ProjTrans               projTrans;

            while select projProposalOnAcc
                where projProposalOnAcc.ProposalId == projProposalJour.ProposalId
            join projProposalOnAccDetail
                where projProposalOnAccDetail.ProposalRefRecId == projProposalOnAcc.RecId
            join projOnAccTransSale
                where projOnAccTransSale.RecId == projProposalOnAccDetail.SaleRefRecId
            {
                projTrans = ProjTrans::newProjProposalOnAccSale(projProposalOnAcc, projProposalOnAccDetail, projOnAccTransSale);
                if (projOnAccTransSale.TransStatus == ProjTransStatus::CreditnoteProposal)
                {
                    select firstOnly projInvoiceOnAccDetailOriginal
                        where  projInvoiceOnAccDetailOriginal.SaleRefRecId == projOnAccTransSale.RecId
                            && !projInvoiceOnAccDetailOriginal.RefRecId;
                    if (!projInvoiceOnAccDetailOriginal)
                    {
                        throw error("@SYS6144");
                    }
                    projInvoiceJourOriginal = projInvoiceOnAccDetailOriginal.projInvoiceOnAcc().projInvoiceJour();
                    if (!projInvoiceJourOriginal)
                    {
                        throw error("@SYS6144");
                    }
                    setExchRate(projTrans.exchRateSales(projInvoiceJourOriginal.InvoiceDate),
                        projTrans.exchRateSecondarySales(projInvoiceJourOriginal.InvoiceDate));
                }
                else
                {
                    setExchRate(projTrans.exchRateSales(projInvoiceJour.InvoiceDate),
                        projTrans.exchRateSecondarySales(projInvoiceJour.InvoiceDate));
                }
            }
        }

        if (ProjInvoiceCurrency::exist(projInvoiceJour.ProjInvoiceProjId,projInvoiceJour.CurrencyId) && !projProposalJour.exchRate)
        {
            projInvoiceJour.ExchRate            = ProjInvoiceCurrency::find(projInvoiceJour.ProjInvoiceProjId,projInvoiceJour.CurrencyId).ExchRate;
            projInvoiceJour.ExchrateSecondary   = 0;
            projInvoiceJour.Triangulation       = NoYes::No;
        }
        else
        {
            if (projProposalJour.exchRate)
            {
                setExchRate(projProposalJour.exchRate, 0);
            }
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))

            {
                setEmplExchRate();
                setCostExchRate();
                setItemExchRate();
                setRevenueExchRate();
                setOnAccExchRate();
            }

            if (!exchRateSet)
            {
                exchRate = ExchangeRateHelper::exchRate(projInvoiceJour.CurrencyId, projInvoiceJour.InvoiceDate);
                exchRateSecond = ExchangeRateHelper::exchRateSecond(projInvoiceJour.CurrencyId, projInvoiceJour.InvoiceDate);
            }

            projInvoiceJour.ExchRate            = exchRate;
            projInvoiceJour.ExchrateSecondary   = exchRateSecond;
            projInvoiceJour.Triangulation       = Currency::triangulation(projInvoiceJour.CurrencyId,projInvoiceJour.InvoiceDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    protected FormletterType formletterType()
    {
        return FormletterType::Project;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the current journal header.
    /// </summary>
    /// <returns>
    /// A journal header record.
    /// </returns>
    public Common getJournal()
    {
        return projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumAndVoucher</Name>
				<Source><![CDATA[
    public container getNumAndVoucher()
    {
        container ret;

        if (BrazilParameters::isEnabled() && this.proforma())
        {
            ret = ['', '0'];
            return ret;
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]) && projInvoiceParmTable.ProjInvoiceId_LT)
        {
            if (!this.proforma() && journalNumber == '')
            {
                numberSeq     = this.allocateNumAndVoucher();
                if (numberSeq)
                {
                    numberSeq.parmNumberSequenceCode("");  // to avoid exception in numberSeq.voucher()
                    numberSeq.parmNumberSequenceId(0);
                    ret = [projInvoiceParmTable.ProjInvoiceId_LT, numberSeq.voucher()];
                }
            }
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjProposalJour</Name>
				<Source><![CDATA[
    protected ProjProposalJour getProjProposalJour(ProjInvoiceParmTable _projInvoiceParmTable,
                                                   boolean              _forUpdate = false)
    {
        ProjProposalJour    newProjProposalJour;

        newProjProposalJour.selectForUpdate(_forUpdate);

        select firstonly newProjProposalJour
            where newProjProposalJour.ProposalId == _projInvoiceParmTable.ProposalId;

        return newProjProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>gettaxCustomsDuty_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates total CustomsDuty base on the tableId of <c>ProjProposalItem</c>, <c>ProjProposalOnAcc</c> and <c>ProjProposalCost</c> table.
    /// </summary>
    /// <returns>
    /// Returns CustomsDuty amount.
    /// </returns>
    protected AmountCur gettaxCustomsDuty_IN()
    {
        ProjProposalItem    projProposalItemLoc;
        ProjProposalOnAcc   projProposalOnAccLoc;
        ProjProposalCost    projProposalCostLoc;
        AmountCur           taxCustomsDuty;

        // This is done to subtract customs duty from customer
        // Customs duty does not hit the customer

        select ProjTransId from projProposalItemLoc
            where projProposalItemLoc.ProposalId ==  projProposalJour.ProposalId;
        if (projProposalItemLoc)
        {
            taxCustomsDuty += this.parmTax().getCustomsDutyProjects_IN(projProposalItemLoc.TableId);
        }

        select TransId from projProposalOnAccLoc
            where projProposalOnAccLoc.ProposalId ==  projProposalJour.ProposalId;
        if (projProposalOnAccLoc)
        {
            taxCustomsDuty += this.parmTax().getCustomsDutyProjects_IN(projProposalOnAccLoc.TableId);
        }

        select TransId from projProposalCostLoc
            where projProposalCostLoc.ProposalId ==  projProposalJour.ProposalId;
        if (projProposalCostLoc)
        {
            taxCustomsDuty += this.parmTax().getCustomsDutyProjects_IN(projProposalCostLoc.TableId);
        }

        return taxCustomsDuty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasCustomerRetention</Name>
				<Source><![CDATA[
    private boolean hasCustomerRetention()
    {
        boolean retValue = false;

        PSAProjFundingSourceRetain psaProjFundingSourceRetain;
        select firstonly RecId from psaProjFundingSourceRetain
            where psaProjFundingSourceRetain.ProjFundingSource == projProposalJour.FundingSource &&
                (psaProjFundingSourceRetain.RetainPercent != 0 ||
                 psaProjFundingSourceRetain.CustRetentionTermId != 0);

        PSAProjProposalProj psaProjProposalProj;
        select firstonly RecId from psaProjProposalProj
            where psaProjProposalProj.ProjProposalId == projProposalJour.ProposalId
               && psaProjProposalProj.RetainedNow != 0;

        if (psaProjFundingSourceRetain || psaProjProposalProj)
        {
            retValue = true;
        }

        return retValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal header record.
    /// </summary>
    protected void initJournalHeader()
    {
        if (projProposalJour.LineProperty == ProjLinePropertyCode::Invoiced)
        {
            throw error("@SYS23025");
        }

        // Check if customer is blocked for invoice proposal; throw warning if true.
        CustVendorBlocked blocked = CustTable::blocked(projProposalJour.InvoiceAccount);
        if (blocked == CustVendorBlocked::All || blocked == CustVendorBlocked::Invoice)
        {
            throw warning(strFmt("@SYS18389", projProposalJour.InvoiceAccount, enum2Str(blocked)));
        }

        projInvoiceTable = projProposalJour.projInvoiceTable();

        this.checkBeforePostingEinvoice();

        creditWarning = ProjParameters::find().CreditLineError;

        projInvoiceJour.clear();

        projInvoiceJour.initFromProjProposal(projProposalJour);

        if (projInvoiceJour.DeliveryPostalAddress &&
            !LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress,
                                                    false,
                                                    DateTimeUtil::minValue(),
                                                    DateTimeUtil::newDateTime(projProposalJour.InvoiceDate, timeMax())).Address)
        {
            projInvoiceJour.DeliveryPostalAddress  = LogisticsLocationEntity::location2PostalAddress(
                                                      ProjFundingSource::find(projProposalJour.FundingSource).InvoiceLocation).RecId;
        }

        projInvoiceJour.ProjInvoiceId        = this.getJournalNumber();
        projInvoiceJour.LedgerVoucher        = this.getVoucher();
        projInvoiceJour.ParmId               = projInvoiceParmTable.ParmId;
        projInvoiceJour.InvoiceDate          = projInvoiceParmTable.InvoiceDate;

        if (projInvoiceJour.isProforma() && !BrazilParameters::isEnabled())
        {
            projInvoiceJour.ProjInvoiceId = this.generateProformaInvoiceId();
            projInvoiceJour.IsProforma = NoYes::Yes;
        }
        else
        {
            if (EInvoiceCFDIParameters_MX::isElectronicInvoiceEnabled())
            {
                EInvoicePost_MX::validateInvoiceDateForCFDI_MX(projInvoiceJour.InvoiceDate);
            }
        }

        projInvoiceJour.DocumentDate_W = projInvoiceParmTable.DocumentDate_W;
        projInvoiceJour.SalesDate_CZ = projInvoiceParmTable.SalesDate_CZ;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoLV]))
        {
            if (projInvoiceParmTable.AutoNumbering_LT)
            {
                if (! LtInvoiceAutoNumberingTable::checkLastDate(ltDocNumberingCode, projInvoiceParmTable.DocumentDate_W, true))
                {
                    throw error("@SYS18447");
                }

                projInvoiceJour.InvoiceNumberingCode_LT   = LtInvoiceAutoNumberingTable::find(ltDocNumberingCode).NumberSequenceCode;

                LtInvoiceAutoNumberingTable::updateLastDate(ltDocNumberingCode, projInvoiceParmTable.DocumentDate_W);
            }
        }

        this.exchRateSet();

        // <GTH>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH])
            && projInvoiceJour.ProjInvoiceId && numberSeq)
        {
            // saving the number sequence id to use it later for generating substitution invoice id
            ProjInvoiceJour_TH projInvoiceJour_TH = projInvoiceJour.projInvoiceJourExtension_TH();
            projInvoiceJour_TH.NumberSequenceId = numberSeq.parmNumberSequenceId();
            projInvoiceJour.SysExtensionSerializerMap::packExtensionTable(projInvoiceJour_TH);
        }
        // </GTH>
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateProformaInvoiceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a unique ProjInvoiceId to be temporarily assigned to Proforma invoices.
    /// </summary>
    /// <returns>A unique ProjInvoiceId containing the prefix "Proforma-" followed by a random number.</returns>
    private ProjInvoiceId generateProformaInvoiceId()
    {
		const int     maxRetries = 1000;
        ProjInvoiceId tempProjInvoiceId;
        int           retryCount = 0;

        tempProjInvoiceId = this.getTempInvoiceId();
        while (ProjInvoiceJour::find(tempProjInvoiceId, projInvoiceJour.InvoiceDate))
        {
            if (retryCount > maxRetries)
            {
                throw error(strfmt("@Proj:ProformaWarningMessage", projProposalJour.ProposalId));
            }

            tempProjInvoiceId = this.getTempInvoiceId();
            retryCount++;
        }

        return tempProjInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrefixForInvoiceId</Name>
				<Source><![CDATA[
	public str getPrefixForInvoiceId()
    {
        const str labelBasePrefix = "@Proj:ProformaLabel";

        str invoicePrefix;
        if (ProjProformaInvoiceIdFlight::instance().isEnabled())
        {
            invoicePrefix = ProjConstants::ProformaInvoicePrefix;
        }
        else
        {
            invoicePrefix = labelBasePrefix;
        }

        return invoicePrefix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTempInvoiceId</Name>
				<Source><![CDATA[
    private ProjInvoiceId getTempInvoiceId()
    {
        Random random = new Random();

        ProjInvoiceId invoiceId = this.getPrefixForInvoiceId() + int2Str(random.nextInt());

        return invoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the total calculation.
    /// </summary>
    protected void initTotals()
    {
        ProjProposalJour proposalJour = ProjProposalJour::find(projInvoiceParmTable.ProposalId, true);

        if (proposalJour && proposalJour.checkRecalculatesTotalsStatusIsRequired())
        {
            ProjProposalTranSummariesRefresh proposalTranSummariesRefresh = new ProjProposalTranSummariesRefresh();
            proposalTranSummariesRefresh.refreshProposalSummariesExecution(proposalJour);
        }

        projProposalJour = this.getProjProposalJour(projInvoiceParmTable, true);
        
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) &&
            this.hasCustomerRetention() &&
            !this.proforma())
        {
            PSACustomerRetention psaCustomerRetention = new PSACustomerRetention();
            psaCustomerRetention.parmProjProposalJour(projProposalJour);
            PSACustomerRetention.parmProjInvoiceTable(projProposalJour.projInvoiceTable());
            psaCustomerRetention.initParmDefault();
            psaCustomerRetention.parmQueryRevenueTrans(true);
            psaCustomerRetention.runOperation();
        }

        projProposalJour.InvoiceDate = projInvoiceParmTable.InvoiceDate;
        if (projProposalJour)
        {
            projProposalJour.update();
        }
        projProposalTotals = this.createProjProposalTotals();
        projProposalTotals.projInvoiceParmTable(projInvoiceParmTable);
        projProposalTotals.calc();

        this.parmTax(projProposalTotals.tax());

        this.creditNote();

        // update projproposaljour while posting project invoice proposal
        if (projProposalJour)
        {
            projProposalJour.selectForUpdate(true);
            projProposalJour.DueDate = dateNull();
            projProposalJour.calcDue();

            //Update cash discount date based on updated invoice date
            if (projProposalJour.CashDiscCode && projProposalJour.InvoiceDate)
            {
                projProposalJour.CashDiscDate = CashDisc::cashDiscDate(projProposalJour.CashDiscCode, projProposalJour.InvoiceDate);
            }

            projProposalJour.InvoiceAmount = projProposalTotals.projInvoiceTotalAmount();
            
            if (!projProposalJour.skipProjInvoiceIdPrePopulation())
            {
                projProposalJour.ProjInvoiceId = this.getJournalNumber();
            }

            projProposalJour.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNote</Name>
				<Source><![CDATA[
    protected NoYes creditNote()
    {
        creditNote = projProposalTotals.isCreditNote();

        return creditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjProposalTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ProjProposalTotals</c> instance.
    /// </summary>
    /// <returns>
    /// A <c>ProjProposalTotals</c> instance.
    /// </returns>
    protected ProjProposalTotals createProjProposalTotals()
    {
        return new ProjProposalTotals(projProposalJour, parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalCreated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the journal is created.
    /// </summary>
    /// <returns>
    ///    true if a journal is created; otherwise, false.
    /// </returns>
    protected boolean isJournalCreated()
    {
        return projInvoiceJour.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal line table.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linksTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal link table.
    /// </summary>
    /// <returns>
    /// The table ID for the journal link table.
    /// </returns>
    protected TableId linksTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSequenceReference</c> object for the journal number.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> object.
    /// </returns>
    [Replaceable]
    protected NumberSequenceReference numberSequenceReferenceNum()
    {
        return ProjParameters::numRefProjNormalInvoiceId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceReferenceVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>NumberSequenceReference</c> object for the voucher number.
    /// </summary>
    /// <returns>
    /// A <c>NumberSequenceReference</c> object.
    /// </returns>
    [Replaceable]
    protected NumberSequenceReference numberSequenceReferenceVoucher()
    {
        return ProjParameters::numRefProjNormalInvoiceVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = projInvoiceParmTable)
    {
        projInvoiceParmTable = _parmTable as ProjInvoiceParmTable;
        return projInvoiceParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAllocateNumAndVoucherBR</Name>
				<Source><![CDATA[
    private NumberSeq postAllocateNumAndVoucherBR(NumberSeq _returnValue)
    {
        NumberSequenceTable     numberSequenceTableNum;
        NumberSeq               tmpNumberSeq;

        if (creditNote || projProposalJour.InvoiceType == ProjInvoiceType::DebitNote_BR)
        {
            return _returnValue;
        }

        if (!projProposalJour.FiscalDocumentType_BR)
        {
            throw error("@GLS62");
        }

        numberSequenceTableNum = FiscalDocumentType_BR::getFiscalDocumentNumberSequence(projProposalJour.FiscalDocumentType_BR);

        if (!numberSequenceTableNum.NumberSequence)
        {
            throw error(strFmt("@GLS1025", "@SYS50149"));
        }
        if (!numberSequenceTableNum.Continuous)
        {
            throw error(strFmt("@GLS1024", numberSequenceTableNum.NumberSequence));
        }

        switch (projProposalJour.InvoiceType)
        {
            case ProjInvoiceType::Invoice :
                tmpNumberSeq = NumberSeq::newGetNumAndVoucherFromId(numberSequenceTableNum.RecId,
                                                ProjParameters::numRefProjNormalInvoiceVoucher().NumberSequenceId);
                break;

            case ProjInvoiceType::OnAccount:
                tmpNumberSeq = NumberSeq::newGetNumAndVoucherFromId(numberSequenceTableNum.RecId,
                                                ProjParameters::numRefProjOnAccInvoiceVoucher().NumberSequenceId);
                break;
        }

        return tmpNumberSeq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>proforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal is a pro forma journal.
    /// </summary>
    /// <returns>
    /// true if the journal is a pro forma journal; otherwise, false
    /// </returns>
    protected boolean proforma()
    {
        return this.parmProforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>psAcheckOnAccountLimit</Name>
				<Source><![CDATA[
    boolean psAcheckOnAccountLimit(Amount _amount)
    {
        Amount              rTotalForecastAmount, rPrevOnaccountAmount;
        ProjOnAccTrans      tProjOnAccTrans;
        ProjOnAccTransSale  tProjOnAccTransSale;
        ProjInvoiceOnAcc    tProjInvoiceOnAcc;
        ProjId              sProjIdRoot, sLastRoot;
        boolean             bret = true;
        #define.star('*')

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
        while select ProjId from tProjInvoiceOnAcc
            order by ProjInvoiceId, InvoiceDate, ProjId
            where tProjInvoiceOnAcc.ProjInvoiceId == projProposalJour.ProjInvoiceId
            &&    tProjInvoiceOnAcc.InvoiceDate   == projProposalJour.InvoiceDate
        {
            sProjIdRoot = ProjTable::find(tProjInvoiceOnAcc.ProjId).psaFindRootProjId(tProjInvoiceOnAcc.ProjId);
            if (sProjIdRoot != sLastRoot)
            {
                // check if external forecast is present, else the check can be skipped
                if (!ProjTable::find(sProjIdRoot).psaForecastModelIdExternal)
                {
                    continue;
                }

                select sum(Amount) from tProjOnAccTransSale
                    join ProjID from tProjOnAccTrans
                        index ProjDateIdx
                        where tProjOnAccTransSale.TransStatus != ProjTransStatus::Adjusted &&
                              tProjOnAccTrans.ProjID like sProjIdRoot + #star;
                rPrevOnaccountAmount = tProjOnAccTransSale.Amount;
                rTotalForecastAmount = -ProjTransBudget::psaTurnoveramount(sProjIdRoot, ProjTable::find(sProjIdRoot).psaForecastModelIdExternal);
                if ((rPrevOnaccountAmount+_amount)>rTotalForecastAmount)
                {
                    bret = false;
                    if (creditWarning)
                    {
                        warning("@PSA2094");
                    }
                    else
                    {
                        error("@PSA2094");
                    }
                }
            }
            sLastRoot = sProjIdRoot;
        }
        }

        return bret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordListParmLine</Name>
				<Source><![CDATA[
    protected RecordSortedList recordListParmLine()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source table for the journal.
    /// </summary>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common sourceTable()
    {
        return projProposalJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total object.
    /// </summary>
    /// <returns>
    /// A total object.
    /// </returns>
    protected Object totals()
    {
        return projProposalTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>typeParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of the posting parameter line table.
    /// </summary>
    /// <returns>
    /// A record.
    /// </returns>
    protected Common typeParmLine()
    {
        Common ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ProjInvoiceJournalCreate construct()
    {
        return new ProjInvoiceJournalCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateServiceNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the service number
    /// </summary>
    /// <param name="_parmId">
    /// the service number to validate
    /// </param>
    /// <returns>
    /// true if the service number is valid
    /// </returns>
    protected static boolean validateServiceNumber(ParmId _parmId)
    {
        boolean ret = true;
        ProjProposalItem     projProposalItem;
        ProjProposalEmpl     projProposalEmpl;
        ProjProposalOnAcc    projProposalOnAcc;
        ProjInvoiceParmTable projInvoiceParmTableLocal;

        while select ProposalId from projInvoiceParmTableLocal
                where projInvoiceParmTableLocal.ParmId == _parmId
            outer join firstonly TaxGroupId, RecId, ProjTransId from projProposalItem
                where projProposalItem.ProposalId == projInvoiceParmTableLocal.ProposalId
            outer join firstonly TaxGroupId, RecId, TransId from projProposalEmpl
                where projProposalEmpl.ProposalId == projInvoiceParmTableLocal.ProposalId
            outer join firstonly TaxGroupId, RecId, TransId from projProposalOnAcc
                where projProposalOnAcc.ProposalId == projInvoiceParmTableLocal.ProposalId
        {
            if (projProposalItem)
            {
                if (TaxGroupHeading::find(projProposalItem.TaxGroupId).IsMandatoryServiceTariff_PL &&
                    !TaxServiceTariff::findByParent(projProposalItem.TableId, projProposalItem.RecId).ServiceTariffNumber)
                {
                    ret = ret & checkFailed(strFmt("@GLS115883", projInvoiceParmTableLocal.ProposalId, "@SYS7407", projProposalItem.ProjTransId));
                }
            }

            if (projProposalEmpl)
            {
                if (TaxGroupHeading::find(projProposalEmpl.TaxGroupId).IsMandatoryServiceTariff_PL &&
                    !TaxServiceTariff::findByParent(projProposalEmpl.TableId, projProposalEmpl.RecId).ServiceTariffNumber)
                {
                    ret = ret & checkFailed(strFmt("@GLS115883", projInvoiceParmTableLocal.ProposalId, "@SYS5269", projProposalEmpl.TransId));
                }
            }

            if (projProposalOnAcc)
            {
                if (TaxGroupHeading::find(projProposalOnAcc.TaxGroupId).IsMandatoryServiceTariff_PL &&
                    !TaxServiceTariff::findByParent(projProposalOnAcc.TableId, projProposalOnAcc.RecId).ServiceTariffNumber)
                {
                    ret = ret & checkFailed(strFmt("@GLS115883", projInvoiceParmTableLocal.ProposalId, "@SYS106432", projProposalOnAcc.TransId));
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeJournalHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the journal header during the update of the sales order, the purchase order, or the request.
    /// </summary>
    protected void initializeJournalHeader()
    {
        PaymId                  paymId;
        PaymentStub             giroType = CustTable::find(projInvoiceJour.InvoiceAccount).GiroType;

        #ISOCountryRegionCodes

        projInvoiceJour.Qty                 = projProposalTotals.projInvoiceItemQty();
        projInvoiceJour.Weight              = projProposalTotals.projInvoiceItemWeight();
        projInvoiceJour.Volume              = projProposalTotals.projInvoiceItemVolume();
        projInvoiceJour.SumMarkup           = projProposalTotals.projInvoiceMarkup();
        projInvoiceJour.SumTax              = projProposalTotals.projInvoiceTaxTotal();
        projInvoiceJour.SalesOrderbalance   = projProposalTotals.projInvoiceBalance();
        projInvoiceJour.CostValue           = projProposalTotals.projInvoiceCostValue();
        projInvoiceJour.CashDisc            = projProposalTotals.projInvoiceCashDisc();
        projInvoiceJour.InvoiceRoundOff     = projProposalTotals.projInvoiceRoundOff();

        if (ProjProposalJour::isTotalDiscountIncludedInSalesOrder(projProposalJour))
        {
            projInvoiceJour.EndDisc = projProposalJour.DiscAmount;
            projInvoiceJour.InvoiceAmount = projProposalTotals.projInvoiceTotalAmount() + projProposalTotals.projInvoiceEndDisc();
        }
        else
        {
            projInvoiceJour.EndDisc = projProposalTotals.projInvoiceEndDisc();
            projInvoiceJour.InvoiceAmount = projProposalTotals.projInvoiceTotalAmount();
        }

        projInvoiceJour.calcDue();
        projInvoiceJour.calcCashDiscDate();

        if (CustConfigurablePaymentIdFeature_CH::isEnabled() || (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO, #isoDK]) && numberSeq))
        {
            projInvoiceJour.setPaymId(numberSeq);
        }
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCH]))
        {
            PaymMoneyTransferSlip moneyTransferSlip = PaymMoneyTransferSlip::construct(giroType);

            if (moneyTransferSlip is PaymMoneyTransferSlip_CH)
            {
                PaymMoneyTransferSlip_CH moneyTransferSlip_CH = moneyTransferSlip;
                moneyTransferSlip_CH.init(giroType);
                CustTable custTable = CustTable::find(projInvoiceJour.InvoiceAccount);
                CustPaymModeTable custPaymModeTable = CustPaymModeTable::find(custTable.PaymMode);

                if (custPaymModeTable.AccountType == LedgerJournalACType::Bank)
                {
                    CompanyBankAccountId bankAccountId = custPaymModeTable.parmPaymAccount();
                    moneyTransferSlip_CH.initOCRLineProj_CH(projInvoiceJour, bankAccountId);
                }
                else
                {
                    moneyTransferSlip_CH.initOCRLineProj_CH(projInvoiceJour);
                }

                paymId = moneyTransferSlip_CH.ocrLinePaymId();
                projInvoiceJour.PaymId = strLRTrim(paymId);
            }
        }

        projInvoiceJour.smaSpecIndexCalc    = ProjFormletterParameters::find().smaSpecIndexCalc;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) &&
            TaxParameters::find().Customs_IN)
        {
            projInvoiceJour.InvoiceAmount       = projInvoiceJour.InvoiceAmount + this.gettaxCustomsDuty_IN();
        }

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            TransportationDocument::copy(projProposalJour, projInvoiceJour);
        }

        if (Tax::isTaxIntegrationEnabledForBusinessProcess(TaxIntegrationBusinessProcess::Project))
        {
            TaxTransactionTaxIDHelper::saveTaxIdToCustVendJour(this.parmTax(), projInvoiceJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVatDueDate_W_ShouldBeMandatoryDueToCustTableMandatoryVatDate_PL</Name>
				<Source><![CDATA[
    internal static boolean checkVatDueDate_W_ShouldBeMandatoryDueToCustTableMandatoryVatDate_PL(ProjInvoiceParmTable _projInvoiceParmTable, boolean _isProForma)
    {
        boolean ret;
        ProjProposalItem projProposalItem;

        if (ProjInvPropVatDueDate_W_EnableProformaWhenCustomerVATDateRequired_PLFlight::instance().isEnabled())
        {
            if (!_isProForma && !_projInvoiceParmTable.VatDueDate_W)
            {
                ProjProposalJour projProposalJourLocal = ProjProposalJour::find(_projInvoiceParmTable.ProposalId);
                ProjFundingSource projFundingSource = ProjFundingSource::find(projProposalJourLocal.FundingSource);
                CustTable custTable = projFundingSource.getCustomer_IN();
                if (custTable && custTable.MandatoryVatDate_PL && !_projInvoiceParmTable.checkCreditNote(projProposalJourLocal.ProposalId))
                {
                    ret = true;
                }
            }
        }
        else
        {
            select firstonly projProposalItem where projProposalItem.ProposalId == _projInvoiceParmTable.ProposalId && projProposalItem.ItemType == ProjItemType::SalesOrder;

            if (projProposalItem)
            {
                if (! _projInvoiceParmTable.VatDueDate_W &&
                        ! projProposalItem.salesTable().isCreditNote_PL() &&
                            CustTable::find(_projInvoiceParmTable.InvoiceAccount).MandatoryVatDate_PL)
                {
                    ret = true;
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkVatDueDate_W_ShouldBeMandatoryDueToCurrencyDifference_PL</Name>
				<Source><![CDATA[
    internal static boolean checkVatDueDate_W_ShouldBeMandatoryDueToCurrencyDifference_PL(ProjInvoiceParmTable _projInvoiceParmTable, boolean _isProForma)
    {
        boolean ret;
       
        if (ProjInvPropVatDueDate_W_EnableProformaWhenCurrencyIsDifferent_PLFlight::instance().isEnabled())
        {
            // This removes the requirement to specify VatDueDate_W when the invoice proposal and ledger accounting currencies are different.  This matches AR (non-project) functionality.
            ret = false;
        }
        else
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(TradeDates_W)) &&
                ! _projInvoiceParmTable.VatDueDate_W &&
                _projInvoiceParmTable.projProposalJour_CZ().CurrencyId != Ledger::accountingCurrency())
            {
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>