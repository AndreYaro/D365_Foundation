<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesCDSSalesOrderHeaderDefaulter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesCDSSalesOrderHeaderDefaulter</c> class provides data defaulting logic for sales order headers which are integrated from
/// the Dynamics 365 Sales and originate from a quotation. Quotation header data is hence defaulted to sales order header.
/// </summary>
public class SalesCDSSalesOrderHeaderDefaulter
{
    private SalesTable salesTable;

    private SalesInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    protected SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable = _salesTable;

        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyMarkup</Name>
				<Source><![CDATA[
    protected boolean copyMarkup()
    {
        return SalesCDSSalesOrderHeaderDefaultMarkupFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTaxAdjustments</Name>
				<Source><![CDATA[
    protected boolean copyTaxAdjustments()
    {
        return SalesCDSSalesOrderHeaderDefaultTaxAdjustmentFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultFromQuotation</Name>
				<Source><![CDATA[
    internal void defaultFromQuotation(SalesQuotationTable _salesQuotationTable)
    {
        if (salesTable && _salesQuotationTable)
        {
            using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().salesCDSSalesOrderDefaultingActivities().defaultHeader(salesTable, _salesQuotationTable))
            {
                ttsbegin;

                salesTable.reread();
                salesTable.selectForUpdate(true);
                this.initFromSalesQuotationTable(_salesQuotationTable);
                salesTable.update();

                if (this.copyTaxAdjustments())
                {
                    TaxWorkRegulation::copy(_salesQuotationTable, salesTable);
                }

                if (this.copyMarkup())
                {
                    Markup::delete(salesTable);
                    Markup::copy(false, _salesQuotationTable, salesTable);
                }

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesQuotationTable</Name>
				<Source><![CDATA[
    protected void initFromSalesQuotationTable(SalesQuotationTable _salesQuotationTable)
    {
        if (_salesQuotationTable.PaymMode)
        {
            salesTable.PaymMode                = _salesQuotationTable.PaymMode;
        }

        salesTable.SmmCampaignId               = _salesQuotationTable.CampaignId;

        salesTable.DeliveryDate                = _salesQuotationTable.ShippingDateRequested;
        salesTable.Deadline                    = _salesQuotationTable.QuotationExpiryDate;

        salesTable.ContactPersonId             = _salesQuotationTable.ContactPersonId;
        if (_salesQuotationTable.ContactPersonId)
        {
            salesTable.initFromContactInfo();
        }

        salesTable.CustomerRef                 = _salesQuotationTable.CustomerRef;
        salesTable.PurchOrderFormNum           = _salesQuotationTable.CustPurchaseOrder;
        
        if (_salesQuotationTable.DefaultDimension)
        {
            salesTable.DefaultDimension        = salesTable.copyDimension(_salesQuotationTable.DefaultDimension);
        }
        
        salesTable.TransactionCode             = _salesQuotationTable.TransactionCode;
        salesTable.Transport                   = _salesQuotationTable.Transport;
        salesTable.Port                        = _salesQuotationTable.Port;
        salesTable.StatProcId                  = _salesQuotationTable.StatProcId;
        salesTable.Listcode                    = _salesQuotationTable.Listcode;
        salesTable.CountyOrigDest              = _salesQuotationTable.CountyOrigDest;

        salesTable.DeliveryName                = _salesQuotationTable.DeliveryName;
        if (_salesQuotationTable.DeliveryPostalAddress)
        {
            salesTable.DeliveryPostalAddress   = _salesQuotationTable.DeliveryPostalAddress;
            salesTable.AddressRefRecId         = _salesQuotationTable.AddressRefRecId;
            salesTable.AddressRefTableId       = _salesQuotationTable.AddressRefTableId;
        }

        salesTable.VATNum                      = _salesQuotationTable.VATNum;
        salesTable.VATNumTableType             = _salesQuotationTable.VATNumTableType;
        salesTable.VATNumRecId                 = _salesQuotationTable.VATNumRecId;
        salesTable.TaxGroup                    = _salesQuotationTable.TaxGroup;
        salesTable.InclTax                     = _salesQuotationTable.InclTax;

        salesTable.CashDisc                    = _salesQuotationTable.CashDisc;
        salesTable.CashDiscPercent             = _salesQuotationTable.CashDiscPercent;

        salesTable.DiscPercent                 = _salesQuotationTable.DiscPercent;
        salesTable.EndDisc                     = _salesQuotationTable.EndDisc;
        salesTable.LineDisc                    = _salesQuotationTable.LineDisc;
        salesTable.MultiLineDisc               = _salesQuotationTable.MultiLineDisc;
        salesTable.CommissionGroup             = _salesQuotationTable.CommissionGroup;

        salesTable.DlvMode                     = _salesQuotationTable.DlvMode;
        salesTable.DlvTerm                     = _salesQuotationTable.DlvTerm;
        salesTable.DlvReason                   = _salesQuotationTable.DlvReason;

        if (_salesQuotationTable.SalesGroup)
        {
            salesTable.SalesGroup              = _salesQuotationTable.SalesGroup;
        }
        
        if (_salesQuotationTable.PriceGroupId)
        {
            salesTable.PriceGroupId            = _salesQuotationTable.PriceGroupId;
        }
        
        salesTable.LanguageId                  = _salesQuotationTable.LanguageId;
        
        if (_salesQuotationTable.MarkupGroup)
        {
            salesTable.MarkupGroup             = _salesQuotationTable.MarkupGroup;
        }

        salesTable.Payment                     = _salesQuotationTable.Payment;
        if (_salesQuotationTable.Payment)
        {
            salesTable.PaymentSched            = _salesQuotationTable.payment().PaymSched;
        }

        salesTable.PostingProfile              = _salesQuotationTable.PostingProfile;
        salesTable.WorkerSalesResponsible      = _salesQuotationTable.WorkerSalesResponsible;
        salesTable.WorkerSalesTaker            = _salesQuotationTable.WorkerSalesTaker;
        salesTable.SalesUnitId                 = _salesQuotationTable.SalesUnitId;
        salesTable.SalesOriginId               = _salesQuotationTable.SalesOriginId;

        salesTable.ShippingDateRequested       = _salesQuotationTable.ShippingDateRequested;
        salesTable.ReceiptDateRequested        = _salesQuotationTable.ReceiptDateRequested;
        salesTable.InventLocationId            = _salesQuotationTable.InventLocationId;

        salesTable.setInventSiteId(_salesQuotationTable.InventSiteId);

        salesTable.initFromSalesQuotationTable_BR(_salesQuotationTable);
        salesTable.initFromMCRSalesQuotationTable(_salesQuotationTable);
        salesTable.initFromRetailSalesQuotationTable(_salesQuotationTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    internal SalesInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = SalesInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesTable</Name>
				<Source><![CDATA[
    internal static SalesCDSSalesOrderHeaderDefaulter newFromSalesTable(SalesTable _salesTable)
    {
        SalesCDSSalesOrderHeaderDefaulter salesOrderHeaderDefaulter = new SalesCDSSalesOrderHeaderDefaulter();
        
        salesOrderHeaderDefaulter.parmSalesTable(_salesTable);

        return salesOrderHeaderDefaulter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>