<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsRebateTableType_Rebate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that holds the information used for handling 'Rebate' rebate type.
/// </summary>
public class PdsRebateTableType_Rebate extends PdsRebateTableType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
/// <summary>
    /// Gets or sets the <c>LedgerJournalTrans</c> table record used for the rebate process posting.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The <c>LedgerJournalTrans</c> table record.
    /// </param>
    /// <returns>
    /// The ledger journal transactions.
    /// </returns>
    protected LedgerJournalTrans initLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans)
    {
        return super(_ledgerJournalTrans);
    }
]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalNameProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ledgerJournalName</c> record used for rebate process posting.
    /// </summary>
    /// <returns>
    /// The <c>LedgerJournalName</c> table record.
    /// </returns>
    public LedgerJournalName ledgerJournalNameProcess()
    {
        return LedgerJournalName::find(PdsRebateParameters::find().PdsLedgerAccrualJournalNameId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsRebateProgramType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the rebate program type as 'Rebate'.
    /// </summary>
    /// <returns>
    /// The rebate program type.
    /// </returns>
    public PdsRebateProgramType pdsRebateProgramType()
    {
        return PdsRebateProgramType::Rebate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runProcessed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the rebate processing.
    /// </summary>
    /// <param name="_forAdjustment">
    /// A boolean value that determines if the rebate is an adjustment.
    /// </param>
    public void runProcessed(
        boolean _forAdjustment  = false)
    {
        super(_forAdjustment);

        pdsRebateTable.setNextStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the class.
    /// </summary>
    /// <returns>
    /// A new class instance.
    /// </returns>
    public static PdsRebateTableType_Rebate construct()
    {
        return new PdsRebateTableType_Rebate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDimensions</Name>
				<Source><![CDATA[
    protected void initDimensions(LedgerJournalTrans _ledgerJournalTrans)
    {
        Map              ledgerDimensionSpecifiers = LedgerDimensionDefaultingEngine::getLedgerDimensionSpecifiers(pdsRebateTable.LedgerDimension, true);

        super(_ledgerJournalTrans);

        if (ledgerDimensionSpecifiers.empty())
        {
            _ledgerJournalTrans.DefaultDimension       = pdsRebateTable.DefaultDimension;
            _ledgerJournalTrans.OffsetDefaultDimension = pdsRebateTable.OffsetDefaultDimension;
        }
        else
        {
            _ledgerJournalTrans.DefaultDimension       = pdsRebateTable.custInvoiceTrans().DefaultDimension;
            _ledgerJournalTrans.OffsetDefaultDimension = pdsRebateTable.custInvoiceTrans().DefaultDimension;
        }
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>