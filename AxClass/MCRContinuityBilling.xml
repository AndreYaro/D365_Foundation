<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRContinuityBilling</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRContinuityBilling</c> creates letters
/// and credit card charges for continuity schedules.
/// </summary>
class MCRContinuityBilling extends MCRBilling
{
    // Dialog variables.
    TransDate           processDate;
    ItemId              continuityItem;

    // Dialog fields
    DialogField     dlgContinuityItem;
    DialogField     dlgProcessDate;

    boolean         itemNotEntered;
    int             paymentsProcessed;
    TransDate       useDate;

    FormStringControl   tempItemIDQueryCtrl;

    // Macro for the pack / unpack
    #define.CurrentVersion(1)
    #localmacro.CurrentList
        processDate,
        continuityItem
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if this job could be executed as batch.
    /// </summary>
    /// <returns>True to indicate this could be a batch job.</returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gathers inpur parameters to run the proces.
    /// </summary>
    /// <returns>
    /// An <c>Object</c> with the parameters that are to be set.
    /// </returns>
    /// <remarks>
    /// Processing date - used to select payments based on due date.
    /// Continuity item ID - used to further select items to process.
    /// </remarks>
    public Object dialog()
    {
        DialogGroup                 dialogGrp1;
        DialogGroup                 dialogGrp2;
        DialogRunbase               dialog;
        str                         fieldName;

        // Setup the dialog
        dialog = new DialogRunbase("@MCR12785", this);
        dialogGrp1 = dialog.addGroup('');
        dialogGrp1.frameType(FormFrameType::None);
        dialogGrp1.columns(1);
        // Add the group for the Criteria
        dialogGrp2 = dialog.addGroup("@SYS13128", dialogGrp1);
        dialogGrp2.frameType(FormFrameType::Auto);
        // Prompt for "Process date"
        dlgProcessDate = dialog.addField(extendedTypeStr(TransDate), "@SYS22917");
        dlgProcessDate.value(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        // Prompt for "Continuity item"
        // note: we were not able to setup drop down prompt only continuity items.
        //      method lookupContinuityItem is available if needed later.
        dlgContinuityItem = dialog.addField(extendedTypeStr(ItemId), "@MCR12800" );
        dlgContinuityItem.value('');
        dlgContinuityItem.lookupButton(FormLookupButton::Always);

        // check for item id lookup
        fieldName = dlgContinuityItem.fieldname();
        fieldName = fieldName + '_lookup';
        if (!MCRCreateContinuityChildrenOrders::classHasMethod(this.name(), fieldName))
        {
            throw error(strFmt("@MCR32922", fieldName, this.name()));
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs dialog after the continuity post.
    /// </summary>
    /// <param name="dialog">
    /// The <c>DialogRunbase</c> object to be run.
    /// </param>
    public void dialogPostRun(DialogRunbase dialog)
    {
        FormRun fr = dialog.formRun();
        super(dialog);

        fr.controlMethodOverload(true);
        fr.controlMethodOverloadObject(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fld2_1_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Looks up an item ID.
    /// </summary>
    /// <remarks>
    ///  Note: If dialog field is moved on form, this method name needs to be changed.
    /// </remarks>
    private void fld2_1_lookup()
    {
        SysTableLookup          sysTableLookup;
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource = query.addDataSource(tableNum(InventTable));
        QueryBuildDataSource    mcrInventTableQueryBuildDataSource;

        tempItemIDQueryCtrl = dlgContinuityItem.control();
        sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), tempItemIDQueryCtrl);

        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemName));
        sysTableLookup.addLookupMethod(tableMethodStr(InventTable, itemGroupId));
        mcrInventTableQueryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(MCRInventTable));
        mcrInventTableQueryBuildDataSource.joinMode(JoinMode::InnerJoin);
        mcrInventTableQueryBuildDataSource.relations(true);
        mcrInventTableQueryBuildDataSource.addRange(fieldNum(MCRInventTable, ContinuityScheduleID)).value(SysQuery::valueNotEmptyString());

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateConfirmation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a confirmation notice to the customer letting them know a
    /// payment has been posted or that payment is due.
    /// </summary>
    /// <param name="_common">
    /// A continutiy payment record.
    /// </param>
    /// <param name="_mcrCustPaymType">
    /// The payment type associated with the continuity.
    /// </param>
    /// <param name="_retailEventNotificationType">
    /// The type of event to post.
    /// </param>
    /// <param name="_processDate">
    /// The process date entered by the user.
    /// </param>
    /// <returns>
    /// A <c>boolean</c> value that indicated that the confirmation has been generated.
    /// </returns>
    public boolean generateConfirmation(Common _common,
                                 MCRCustPaymType _mcrCustPaymType,
                                 RetailEventNotificationType _retailEventNotificationType,
                                 date _processDate = dateNull())
    {
        MCRContinuityPayment mcrContinuityPayment_upd;
        MCRContinuityPayment mcrContinuityPayment = _common;

        // Raise the event depending on the type of payment.
        switch (_mcrCustPaymType)
        {
            case MCRCustPaymType::CreditCard:
                RetailEventNotificationAction::InsertRetailOENAction(RetailEventNotificationType::MCRContinuityCharge,
                    mcrContinuityPayment.RecId,
                    SalesTable::find(mcrContinuityPayment.SalesID));
                break;
            case MCRCustPaymType::OnAccount:
                RetailEventNotificationAction::InsertRetailOENAction(RetailEventNotificationType::MCRContinuityBill,
                    mcrContinuityPayment.RecId,
                    SalesTable::find(mcrContinuityPayment.SalesID));
                break;
            default:
                this.generateConfirmationDefault(_common, _mcrCustPaymType, _retailEventNotificationType, _processDate);
                break;
        }

        // Update the printed date.
        ttsBegin;
        select forupdate mcrContinuityPayment_upd
          where mcrContinuityPayment_upd.RecId == mcrContinuityPayment.RecId;

        if (mcrContinuityPayment_upd)
        {
            mcrContinuityPayment_upd.PrintDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
            mcrContinuityPayment_upd.update();
            // Write detailed information to the log.
            if (detailInfolog)
            {
                info(strFmt("@MCR12880", mcrContinuityPayment.SalesID, mcrContinuityPayment.CustAccount,
                         enum2str(_mcrCustPaymType)));
            }
            ttsCommit;
            return true;
        }
        ttsCommit;

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateConfirmationDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Raise the event depending on the type of extended payment.
    /// </summary>
    /// <param name="_common">
    /// A continutiy payment record.
    /// </param>
    /// <param name="_mcrCustPaymType">
    /// The payment type associated with the continuity.
    /// </param>
    /// <param name="_retailEventNotificationType">
    /// The type of event to post.
    /// </param>
    /// <param name="_processDate">
    /// The process date entered by the user.
    /// </param>
    [Replaceable]
    protected void generateConfirmationDefault(Common _common,
                                 MCRCustPaymType _mcrCustPaymType,
                                 RetailEventNotificationType _retailEventNotificationType,
                                 date _processDate = dateNull())
    {
        //do nothing.
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        processDate         = dlgProcessDate.value();
        continuityItem      = dlgContinuityItem.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postContinuityPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Posts the payment as a pre-payment when it is a credit card.
    /// </summary>
    /// <param name="_mcrContinuityPayment">
    /// The continuity payment record to be posted.
    /// </param>
    /// <returns>
    /// A <c>boolean</c> if the payment is posted.
    /// </returns>
    /// <remarks>
    /// If the payment schedule is passed it, we will be formatting the amount differently.
    /// </remarks>
    private boolean postContinuityPayment(MCRContinuityPayment _mcrContinuityPayment)
    {
        MCRCustPaymTable     mcrCustPaymTable;
        MCRCustPaymTable     mcrCustPaymTable_upd;
        MCRCustPaymStatus    custPaymStatus;
        MCRCustPaymTotals    custPaymTotals;

        // Read the payment record from the Continuity Payment reference.
        mcrCustPaymTable = MCRCustPaymTable::findByRecID(_mcrContinuityPayment.MCRCustPaymTableRecID);

        custPaymTotals = MCRCustPaymTotals::construct(mcrCustPaymTable.RefTableId, mcrCustPaymTable.RefRecId);
        custPaymTotals.processPayments(MCRProcessPaymAction::PostOnlyPrepays);
        // Submit the payment for authorization.  (Cannot be in commit block)
        custPaymStatus = custPaymTotals.getOverallPaymStatus();

        // If the parent is paid on account, do not
        // post anything, it will be done when the parent order is invoiced.
        if (mcrCustPaymTable.CustPaymType == MCRCustPaymType::OnAccount)
        {
            custPaymStatus = MCRCustPaymStatus::Authorized;

            ttsBegin;
            mcrCustPaymTable_upd = MCRCustPaymTable::findByRecID(mcrCustPaymTable.RecId, true);
            mcrCustPaymTable_upd.Status = custPaymStatus;
            mcrCustPaymTable_upd.update();
            ttsCommit;
        }
        else
        {
            custPaymTotals = MCRCustPaymTotals::construct(mcrCustPaymTable.RefTableId, mcrCustPaymTable.RefRecId);
            // Submit the payment for authorization.  (Cannot be in commit block)
            custPaymTotals.processPayments(MCRProcessPaymAction::PostOnlyPrepays);
            custPaymStatus = custPaymTotals.getOverallPaymStatus();
        }

        // Update the posted date on the continuity payment
        if (custPaymStatus == MCRCustPaymStatus::Authorized
            // Need to consider posted as authorized
            || custPaymStatus == MCRCustPaymStatus::Posted)
        {
            // Posting the payment message.
            if (detailInfolog)
            {
                info(strFmt("@MCR12877",
                  _mcrContinuityPayment.SalesID, num2str(mcrCustPaymTable.Amount, 0, 2, 0, 0)));
            }
        }
        else
        {
            // Posting payment but not authorized.
            if (detailInfolog)
            {
                info(strFmt("@MCR12878",
                    _mcrContinuityPayment.SalesID, num2str(mcrCustPaymTable.Amount, 0, 3, 0, 0)));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processHeaderPaymentSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the bill up front continuity headers that have a payment schedule.
    /// </summary>
    /// <remarks>
    /// Process bill up front continuity headers that have a payment schedule.
    /// Payment schedule on Pay as you go orders is only for defaulting to the lines.
    /// </remarks>
    private void processHeaderPaymentSchedule()
    {
        MCRContinuityCustHeader mcrContinuityCustHeader;
        SalesTable              salesTable;
        SalesLine               salesLine;
        MCRCustPaymTable        mcrCustPaymTable;
        CustPaymSched           custPaymSched;
        CustPaymSchedLine       custPaymSchedLine;

        // Process continuity headers with payment schedules.  It will select the
        // payment schedules that are in our date range.
        // Through the salesline it also limits to the item selected on the prompt if
        // one was entered.
        while select custPaymSchedLine
            where custPaymSchedLine.DueDate <= useDate
               && custPaymSchedLine.MCRContinuityPaymRecID == 0
        join ExtTableId, RecId, ExtRecId from  custPaymSched
            where custPaymSched.ExtTableId     == tableNum(MCRContinuityCustHeader)
               && custPaymSched.RecId          == custPaymSchedLine.ParentRecID
        join firstOnly mcrContinuityCustHeader
            where mcrContinuityCustHeader.RecId == custPaymSched.ExtRecId
                // Only process bill up front for the header
                && mcrContinuityCustHeader.BillUpFront
        join InventTransId, ItemId, SalesId from  salesLine
            where salesLine.InventTransId      == mcrContinuityCustHeader.InventTransId
               && ((salesLine.ItemId           == continuityItem)
               || itemNotEntered)
        join salesTable
            where salesTable.SalesId           == salesLine.SalesId
                // Bill up front can now be Picked/Packed/Invoiced
                // Filter out open and held orders for any continuity parent.
                && (salesTable.SalesStatus     != SalesStatus::Backorder
                || salesTable.MCROrderStopped  == NoYes::No)
        {
            try
            {
                // Read in the payment information from the continuity customer header.
                mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(mcrContinuityCustHeader.RecId, mcrContinuityCustHeader.TableId);

                // Check the payment method and route the bill accordingly.
                if (this.processPayment(salesTable, mcrContinuityCustHeader, custPaymSchedLine))
                {
                    // Send information message to the log that payment was processed.
                    info(strFmt("@MCR12804", salesLine.SalesId, custPaymSchedLine.DueDate));
                    paymentsProcessed++;
                }
            }
            catch
            {
                // continue to next order to process.
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLinePaymentSchedule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the pay as you go continuity lines that have a payment schedule.
    /// </summary>
    /// <remarks>
    ///  Bill up front continuity lines cannot have a payment schedule.
    /// </remarks>
    private void processLinePaymentSchedule()
    {
        MCRContinuityCustLine   mcrContinuityCustLine;
        MCRContinuityCustHeader mcrContinuityCustHeader;
        MCRCustPaymTable        mcrCustPaymTable;
        SalesTable              salesTable_child;
        SalesTable              salesTable_parent;
        SalesLine               salesLine_parent;
        CustPaymSchedLine       custPaymSchedLine;
        CustPaymSched           custPaymSched;
        MCRSalesLine            mcrSalesLine;
        MCRSalesTable           mcrSalesTable;

        // Process continuity lines with payment schedules.  It will select the
        // payment schedules that are in our date range and are not invoiced.
        // The payment schedules are tied to the continuity line which will have
        // an associated child sales order.
        // Through the parent salesline it also limits to the continuity item
        // selected on the prompt if one was entered.
        // The continuity cust line must have a sales ID or else the payment schedules will
        // not have been updated with the correct amounts.
        // Process the payments on the orders that have not been billed.
        // Note: There may be multiple continuity children items on the same order.
        // If the order is processed again, the payment will have already been updated.
        while select RecId from salesLine_parent
            where ((salesLine_parent.ItemId  == continuityItem) || itemNotEntered)
            join mcrContinuityCustHeader
                where mcrContinuityCustHeader.InventTransId == salesLine_parent.InventTransId
            outer join RecId from mcrCustPaymTable
                where mcrCustPaymTable.RefRecId == mcrContinuityCustHeader.RecId
                   && mcrCustPaymTable.RefTableId == mcrContinuityCustHeader.TableId
                   && mcrCustPaymTable.CustPaymType ==  MCRCustPaymType::CreditCard
            join RecId from mcrContinuityCustLine
                where mcrContinuityCustLine.InventTransId == mcrContinuityCustHeader.InventTransId
            join RecId from salesTable_child
                where salesTable_child.SalesId == mcrContinuityCustLine.SalesId
                   && salesTable_child.PaymentSched != ""
            join RecId from custPaymSched
                where custPaymSched.ExtTableId == tableNum(SalesTable)
                   && custPaymSched.ExtRecId == salesTable_child.RecId
            join custPaymSchedLine
                where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                        && custPaymSchedLine.DueDate <= useDate
                        && custPaymSchedLine.MCRContinuityPaymRecID == 0
                        && custPaymSchedLine.DueDate <= processDate
            exists join mcrSalesLine
                where mcrSalesLine.SalesLine == salesLine_parent.RecId
                    && mcrSalesLine.ContinuityScheduleId != ""
            exists join salesTable_parent
                 where salesTable_parent.SalesId == salesLine_parent.SalesId
                       && salesTable_parent.SalesStatus == SalesStatus::Backorder
                       && salesTable_parent.MCROrderStopped == NoYes::No
            exists join mcrSalesTable
                where mcrSalesTable.SalesTable == salesTable_parent.RecId
                       && mcrSalesTable.ContinuityOrder == NoYes::Yes

        {
            try
            {
                // Process the payment from the payment schedule on the line.
                if (this.processPayment(salesTable_child, mcrContinuityCustHeader, custPaymSchedLine))
                {
                    // Send information message to the log that payment was processed.
                    info(strFmt("@MCR12804", salesTable_child.SalesId, custPaymSchedLine.DueDate));
                    paymentsProcessed++;
                }
            }
            catch
            {
                // continue to next order to process.
                continue;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the billing transactio based on payment type.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales table buffer that corresponds to the continuity payment.
    /// </param>
    /// <param name="_mcrContinuityCustHeader">
    /// The continuity header.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The payment schedule line tied to the schedule on the continuity.
    /// </param>
    /// <returns>
    /// A <c>boolean</c> value to indiate that the payment was processed.
    /// </returns>
    /// <remarks>
    /// Route the billing transaction based on the payment type.
    /// On Account  - this will generate a request for the customer to send payment.
    /// Credit Card - this type will charge the card and generate a notification.
    /// </remarks>
    private boolean processPayment(
        SalesTable _salesTable,
        MCRContinuityCustHeader _mcrContinuityCustHeader,
        CustPaymSchedLine _custPaymSchedLine)
    {
        MCRCustPaymTable     mcrCustPaymTable;
        MCRContinuityPayment mcrContinuityPayment;

        // Read in the payment information from the continuity customer header.
        mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(_mcrContinuityCustHeader.RecId, _mcrContinuityCustHeader.TableId);

        if (!mcrCustPaymTable)
        {
            // No payment record, so display error and stop processing.  Should not occur.
            throw error(strFmt("@MCR12881", _mcrContinuityCustHeader.SalesId));
        }

        // Cannot use TTS block because of credit card authorization not allowing it so commit
        //  block handled in the functions.

        // Write the continuity payment to the table that is used for reporting.
        mcrContinuityPayment = this.writeContinuityPayment(_salesTable, _mcrContinuityCustHeader, mcrCustPaymTable, _custPaymSchedLine);
        if (!mcrContinuityPayment)
        {
            // Could not write continuity payment.  Stop processing and return.  Should not occur.
            throw error(strFmt("@MCR12882", _salesTable.SalesId));
        }

        // Post the payments.
        this.postContinuityPayment(mcrContinuityPayment);

        // Read the final payment record from the Continuity Payment reference.
        mcrCustPaymTable = MCRCustPaymTable::findByRecID(mcrContinuityPayment.MCRCustPaymTableRecID);

        // Write the report for on account & credit card.
        switch(mcrCustPaymTable.CustPaymType)
        {
            case MCRCustPaymType::OnAccount:

                if(mcrCustPaymTable.Amount != 0)
                {
                    this.generateConfirmation(mcrContinuityPayment,
                         mcrCustPaymTable.CustPaymType,
                         RetailEventNotificationType::MCRContinuityBill);
                }
                break;
            case MCRCustPaymType::CreditCard:
                if(mcrCustPaymTable.Amount != 0)
                {                    
                    this.generateConfirmation(mcrContinuityPayment,
                            mcrCustPaymTable.CustPaymType,
                            RetailEventNotificationType::MCRContinuityCharge);
                }
                break;
            default:
                this.generateConfirmationBasedOnMCRCustPaymType(_salesTable, _mcrContinuityCustHeader, _custPaymSchedLine, mcrContinuityPayment);
                break;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateConfirmationBasedOnMCRCustPaymType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates confirmation based on extends payment type.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales table buffer that corresponds to the continuity payment.
    /// </param>
    /// <param name="_mcrContinuityCustHeader">
    /// The continuity header.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The payment schedule line tied to the schedule on the continuity.
    /// </param>
    /// <param name="_mcrContinuityPayment">
    /// The final payment record from the Continuity Payment reference.
    /// </param>
    [Replaceable]
    protected void generateConfirmationBasedOnMCRCustPaymType(
        SalesTable _salesTable,
        MCRContinuityCustHeader _mcrContinuityCustHeader,
        CustPaymSchedLine _custPaymSchedLine,
        MCRContinuityPayment _mcrContinuityPayment)
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Takes continuity payments from payment schedules (parent or child order) and
    /// generates a confirmation as well as posts any credit cards.
    /// </summary>
    public void run()
    {
        super();

        setPrefix(MCRContinuityBilling::description());

        // Set the item entered - used to get data from tables.
        itemNotEntered =  (!continuityItem);
        paymentsProcessed = 0;

        // Flag can be set to get detailed messages in the InfoLog.
        //  - setting to false for shipping.
        detailInfolog = true;   // false;

        // A billing lead days is used to generate on-account notifications in
        // advance of their due date.
        useDate = processDate + MCROrderParameters::find().MCRContinuityBillLead;

        // Process Header schedule continuity orders.
        this.processHeaderPaymentSchedule();

        // Process Line schedule continuity orders.
        this.processLinePaymentSchedule();

        // Display message that process has completed.
        info(strFmt("@MCR12802", int2str(paymentsProcessed)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateContinuityCustHeader</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates the continuity cust header with the payment record.
    /// </summary>
    /// <param name="_recId">
    /// The <c>recId</c>of the continuity header.
    /// </param>
    /// <param name="_paymentRecID">
    /// The recordID of the payment record.
    /// </param>
    /// <returns>
    /// true if the continuity cust header is updated; otherwise, false.
    /// </returns>
    private boolean updateContinuityCustHeader(RecId _recId, RecId _paymentRecID)
    {
        MCRContinuityCustHeader mcrContinuityCustHeader_upd;

        select forupdate PaymentRecID from mcrContinuityCustHeader_upd
           where  mcrContinuityCustHeader_upd.RecId  == _recId;

        if (mcrContinuityCustHeader_upd)
        {
            mcrContinuityCustHeader_upd.PaymentRecID = _paymentRecID;
            mcrContinuityCustHeader_upd.update();
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePaymentScheduleLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Updates the payment schedule with the payment record.
    /// </summary>
    /// <param name="_recId">
    ///  The <c>recId</c> of the payment schedule record.
    /// </param>
    /// <param name="_paymentRecID">
    /// The payment record.
    /// </param>
    /// <param name="_tableId">
    /// The table ID passed in.
    /// </param>
    /// <returns>
    /// true if the schedule line was updated; otherwise, false.
    /// </returns>
    public boolean updatePaymentScheduleLine(RecId      _recId,
                                             RecId      _paymentRecID,
                                             TableId    _tableId)
    {
        CustPaymSchedLine custPaymSchedLine_upd;

        select firstOnly forupdate MCRContinuityPaymRecID from custPaymSchedLine_upd
            where custPaymSchedLine_upd.RecId  == _recId;

        if (custPaymSchedLine_upd)
        {
            custPaymSchedLine_upd.MCRContinuityPaymRecID = _paymentRecID;
            custPaymSchedLine_upd.update();

            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeContinuityPayment</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Writes the record to the continuity payment table.
    /// </summary>
    /// <param name="_salesTable">
    /// The sales table transaction tied to the continuity header.
    /// </param>
    /// <param name="_mcrContinuityCustHeader">
    /// The continuity header that is tied to the continuity payment.
    /// </param>
    /// <param name="_mcrCustPaymTable">
    /// The payment record that has the continuity information.
    /// </param>
    /// <param name="_custPaymSchedLine">
    /// The payment schedule line.
    /// </param>
    /// <returns>
    /// The continuity payment after the payment has been inserted.
    /// </returns>
    /// <remarks>
    /// The table is used mark the payments as processed as well as to generate the report.
    /// </remarks>
    private MCRContinuityPayment writeContinuityPayment(
        SalesTable _salesTable,
        MCRContinuityCustHeader _mcrContinuityCustHeader,
        MCRCustPaymTable _mcrCustPaymTable,
        CustPaymSchedLine _custPaymSchedLine)
    {
        MCRContinuityPayment  mcrContinuityPayment;
        MCRCustPaymTable      mcrCustPaymTable_curr;
        MCRCustPaymTable      mcrCustPaymTable_upd;

        ttsBegin;
        // Insert a new payment record attached to the payment schedule line.
        if  (_custPaymSchedLine)
        {
            // Insert a new payment record.
            MCRCustPaymTable::copyCustPayment(_mcrCustPaymTable.RefTableId, _mcrCustPaymTable.RefRecId,
                   _custPaymSchedLine.TableId, _custPaymSchedLine.RecId, _salesTable.SalesId, _custPaymSchedLine.DueAmount);
            // Load the new payment record for processing.
            mcrCustPaymTable_curr =  MCRCustPaymTable::findByRefRecIDRefTableID( _custPaymSchedLine.RecId, _custPaymSchedLine.TableId);
        }
        else
        {
            // Use the continuity cust header payment record if bill up front without schedule.
            mcrCustPaymTable_curr =  _mcrCustPaymTable;
        }

        // Update the payment record to be pre-pay if it is credit card.  We are processing
        // all continuity bill up fronts and schedules as pre-payments.
        if (mcrCustPaymTable_curr.CustPaymType == MCRCustPaymType::CreditCard
            && (mcrCustPaymTable_curr.IsPrepay == NoYes::No
              || mcrCustPaymTable_curr.Status != MCRCustPaymStatus::NotSubmitted))
        {
            update_recordSet mcrCustPaymTable_upd
                setting
                    IsPrepay = NoYes::Yes,
                    Status = MCRCustPaymStatus::NotSubmitted
                where mcrCustPaymTable_upd.RecId == mcrCustPaymTable_curr.RecId;
        }

        // Write the continuity payment record.
        mcrContinuityPayment.SalesID              = _salesTable.SalesId;
        mcrContinuityPayment.CustAccount          = _salesTable.CustAccount;
        mcrContinuityPayment.ContinuitySalesID    = _mcrContinuityCustHeader.SalesId;
        mcrContinuityPayment.MCRCustPaymTableRecID = mcrCustPaymTable_curr.RecId;
        mcrContinuityPayment.PrintDate            = dateNull();

        // Insert the continuity payment record
        mcrContinuityPayment.insert();

        // Update the payment schedule line or the continiuty cust header with the
        // record ID of the payment.
        if (_custPaymSchedLine)
        {
            if (!this.updatePaymentScheduleLine(_custPaymSchedLine.RecId, mcrContinuityPayment.RecId, tableNum(MCRContinuityCustHeader)))
            {
                mcrContinuityPayment = null;
            }
        }
        else
        {
            if (!this.updateContinuityCustHeader(_mcrContinuityCustHeader.RecId, mcrContinuityPayment.RecId))
            {
                mcrContinuityPayment = null;
            }
        }

        ttsCommit;

        return mcrContinuityPayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static MCRContinuityBilling construct()
    {
        return new MCRContinuityBilling();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@MCR12785";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Processes the generation of the Billing and Confirmation for the continuity orders.
    /// </summary>
    /// <param name="args">
    /// Arguments passed in for billing.
    /// </param>
    public static void main(Args args)
    {
        // No longer calling directly into the process.  It has been extended.
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>