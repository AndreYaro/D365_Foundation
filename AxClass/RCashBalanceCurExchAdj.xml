<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RCashBalanceCurExchAdj</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RCashBalanceCurExchAdj extends RCashBalanceCur
{
    AmountMSTSecondary      reportingAmount;
    AmountMSTSecondary      reportingExchAdjustment;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected void buildQuery()
    {
        Query                   query;
        QueryBuildDataSource    qbds;
        ;

        super();

        query = qrCashTrans.query();

        qbds = query.dataSourceTable(tableNum(DimensionAttributeLevelValueView));

        if (qbds)
        {
            qbds.enabled(false);
        }

        qbds  = query.dataSourceTable(tableNum(RCashTrans));
        qbds.addSortField(fieldNum(RCashTrans, LedgerDimension));
        qbds.addSelectionField(fieldNum(RCashTrans, ReportingCurrencyAmount), SelectionField::Sum);
        qbds.findRange(fieldNum(RCashTrans, TransDate)).value(queryRange(dateNull(),toDate));

        qrCashTrans.query(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc(RCashAccount _accountNum, CurrencyCode _currencyCode = "")
    {
        RCashTrans                        cashTrans;
        DimensionDefault                  defaultDimension;
        DimensionAttributeValueSetStorage dimAttrValueSetStorage;
        RTax25ExchAdjDimension            rTax25ExchAdjDimension = new RTax25ExchAdjDimension();

        this.clear();

        qrCashTrans.query().dataSourceNo(1).findRange(fieldNum(RCashTrans, AccountNum)).value(_accountNum);
        qrCashTrans.query().dataSourceNo(1).findRange(fieldNum(RCashTrans, CurrencyCode)).value(_currencyCode);
        while (qrCashTrans.next())
        {
            cashTrans = qrCashTrans.getNo(1);
            if (cashTrans.TransStatus == RCashTransStatus::Canceled)
                continue;

            defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(cashTrans.LedgerDimension);
            if (rTax25ExchAdjDimension.getDimAttr())
            {
                dimAttrValueSetStorage = DimensionAttributeValueSetStorage::find(defaultDimension);
                dimAttrValueSetStorage.removeDimensionAttribute(rTax25ExchAdjDimension.getDimAttr().RecId);
                defaultDimension = dimAttrValueSetStorage.save();
            }

            this.updateAmounts(cashTrans, defaultDimension);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Recalculate amount values based on Document type of <c>RCashTrans</c>.
    /// </summary>
    /// <param name = "_cashTrans">
    ///    <c>RCashTrans</c> used to distinguish values to update.
    /// </param>
    /// <param name = "_defaultDimension">
    ///    <c>DimensionDefault</c> value used to update values.
    /// </param>
    protected void updateAmounts(RCashTrans _cashTrans, DimensionDefault _defaultDimension)
    {
        switch (_cashTrans.DocType)
        {
            case RCashDocType::Correction,
                RCashDocType::DisbursementSlip,
                     RCashDocType::ReimbursementSlip :
                    amountMST       += _cashTrans.AmountMST;
                amountCur       += _cashTrans.AmountCur;
                reportingAmount += _cashTrans.ReportingCurrencyAmount;
                ledgerKeySum.updateNow([LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_cashTrans.LedgerDimension),
                                            _defaultDimension],
                                           [_cashTrans.AmountMST,
                                            _cashTrans.AmountCur,
                                            0,
                                            _cashTrans.ReportingCurrencyAmount,
                                            0]);
                break;
            case RCashDocType::ExchRateDifference:
                exchAdjustment          += _cashTrans.AmountMST;
                ledgerKeySum.updateNow([LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_cashTrans.LedgerDimension),
                                            _defaultDimension],
                                           [0,
                                            0,
                                            _cashTrans.AmountMST,
                                            0,
                                            0]);
                break;

            case RCashDocType::ReportingExchRateDifference:
                reportingExchAdjustment += _cashTrans.ReportingCurrencyAmount;
                ledgerKeySum.updateNow([LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(_cashTrans.LedgerDimension),
                                            _defaultDimension],
                                           [0,
                                            0,
                                            0,
                                            0,
                                            _cashTrans.ReportingCurrencyAmount]);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Clears internal variables.
    /// </summary>
    protected void clear()
    {
        super();

        reportingAmount         = 0;
        reportingExchAdjustment = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAccountContainer</Name>
				<Source><![CDATA[
    public container ledgerAccountContainer(int _idx)
    {
        return ledgerKeySum.index2Key(_idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerReportingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns ledger reporting amount for specified index value.
    /// </summary>
    /// <param name="_idx">
    /// An instance of int data type.
    /// </param>
    /// <returns>
    /// An <c>AmountMSTSecondary</c> value.
    /// </returns>
    #define.ConPos(4)
    public AmountMSTSecondary ledgerReportingAmount(int _idx)
    {
        return conPeek(ledgerKeySum.index2Data(_idx), #ConPos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerReportingExchAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns ledger reporting amount exchange adjustment for specified index value.
    /// </summary>
    /// <param name="_idx">
    /// An instance of int data type.
    /// </param>
    /// <returns>
    /// An <c>AmountMSTSecondary</c> value.
    /// </returns>
    #define.ConPos(5)
    public AmountMSTSecondary ledgerReportingExchAdjustment(int _idx)
    {
        return conPeek(ledgerKeySum.index2Data(_idx), #ConPos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    #define.NumOfKeys(2)
    #define.NumData(5)
    public void new(ToDate _toDate)
    {
        super(_toDate);
        ledgerKeySum = KeySum::construct(#NumOfKeys, #NumData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns reporting amount.
    /// </summary>
    /// <returns>
    /// An <c>AmountMSTSecondary</c> value.
    /// </returns>
    public AmountMSTSecondary reportingAmount()
    {
        return reportingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingAmountExchAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns reporting amount exchange adjustment.
    /// </summary>
    /// <returns>
    /// An <c>AmountMSTSecondary</c> value.
    /// </returns>
    public AmountMSTSecondary reportingAmountExchAdjustment()
    {
        return reportingExchAdjustment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>