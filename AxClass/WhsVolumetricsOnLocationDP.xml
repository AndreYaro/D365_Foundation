<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsVolumetricsOnLocationDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSVolumetricsOnLocationDP</c> class declares the variables and tables required for the
///    <c>WHSVolumetricsOnLocation</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(WHSVolumetricsOnLocationQuery))
]
public class WhsVolumetricsOnLocationDP extends SRSReportDataProviderPreProcessTempDB
{
    WHSVolumetricsOnLocationTmp onLocationTmp;
    InventLocation              inventLocation;
    WMSLocation                 wmsLocation;
    InventSum                   inventSum;
    InventDim                   inventDim;
    WHSLocationProfile          locProfile;
    WHSUsedVolume               usedVolume;
    private Map                 isWHSEnabledItem;
    private Map                 isUOMSeqGroupIdConfigured;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWHSVolumetricsOnLocationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the <c>WHSVolumetricsOnLocationTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(WHSVolumetricsOnLocationTmp))
    ]
    public WHSVolumetricsOnLocationTmp getWHSVolumetricsOnLocationTmp()
    {
        select  onLocationTmp;

        return  onLocationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertWHSVolumetricsOnLocationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the details of the <c>WHSVolumetricsOnLocationTmp</c> report into the temporary table.
    /// </summary>
    private void insertWHSVolumetricsOnLocationTmp()
    {
        onLocationTmp.InventLocationId  = wmsLocation.InventLocationId;
        onLocationTmp.LocProfileId      = wmsLocation.LocProfileId;
        onLocationTmp.LocType           = locProfile.LocType;
        onLocationTmp.ZoneId            = wmsLocation.ZoneId;
        onLocationTmp.wmsLocationId     = wmsLocation.wmsLocationId;
        onLocationTmp.TotalVolume       = locProfile.TotalVolume;
        onLocationTmp.UsedVolume        = usedVolume;

        onLocationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the required data for the <c>WHSVolumetricsOnLocation</c> report and
    ///    inserts it into the <c>WHSVolumetricsOnLocationTmp</c> temporary table.
    /// </summary>
    public void processReport()
    {
        QueryRun queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            locProfile  = queryRun.get(tableNum(WHSLocationProfile));
            wmsLocation = queryRun.get(tableNum(WMSLocation));
            usedVolume  = 0;

            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                while select inventSum
                    where inventSum.InventLocationId    == wmsLocation.InventLocationId &&
                          inventSum.wmsLocationId       == wmsLocation.wmsLocationId &&
                          inventSum.ClosedQty           == NoYes::No &&
                          inventSum.PhysicalInvent      > 0
                {
                    this.retrieveVolume();
                }
            }
            else
            {
                while select inventSum
                    join inventDim
                    where inventSum.InventDimId         == inventDim.InventDimId &&
                          inventDim.InventLocationId    == wmsLocation.InventLocationId &&
                          inventDim.wmsLocationId       == wmsLocation.wmsLocationId &&
                          inventSum.ClosedQty           == NoYes::No &&
                          inventSum.PhysicalInvent      > 0
                {
                    this.retrieveVolume();
                }
            }

            this.insertWHSVolumetricsOnLocationTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveVolume</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves volume on location.
    /// </summary>
    public void retrieveVolume()
    {
        #WHSBuildQty

        WHSStorageUnit storageUnit = locProfile.StorageUnit;

        UnitOfMeasureSymbol inLocationUnitId = WHSCatchWeightHelper::inventHandlingUnitId(inventSum.ItemId);
        UnitOfMeasureRecId inLocationUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(inLocationUnitId);
        Qty inlocationQty = PdsGlobal::pdsIsCWItem(inventSum.ItemId) ? inventSum.PdsCWPhysicalInvent : inventSum.PhysicalInvent;
        UnitOfMeasureRecId  storageUnitOfMeasure;

        if (storageUnit)
        {
            storageUnitOfMeasure = UnitOfMeasure::unitOfMeasureIdBySymbol(storageUnit);
        }

        EcoResProductUnitConverter unitConverter = EcoResProductUnitConverter::newForReleasedProduct(inventSum.ItemId,
                                                                                                 inventSum.InventDimId,
                                                                                                 inLocationUnitOfMeasure,
                                                                                                 storageUnitOfMeasure,
                                                                                                 NoYes::No,
                                                                                                 NoYes::No);

        if (this.isWHSEnabledItem() && this.isUOMSeqGroupIdConfigured())
        {
            UnitOfMeasureSymbol highestUOM;

            if (storageUnitOfMeasure
            && unitConverter.canValueBeConverted())
            {
                inlocationQty    = roundUp(unitConverter.convertValue(inlocationQty), 1);
                inLocationUnitId = storageUnit;
            }
            else
            {
                container           con;
                int                 i;
                InventUnitId unitId = WHSCatchWeightHelper::inventHandlingUnitId(inventSum.ItemId);

                if (PdsGlobal::pdsIsCWItem(inventSum.ItemId))
                {
                    con = WHSInventTable::buildQty(inventSum.ItemId, inventSum.PdsCWPhysicalInvent, unitId, inventSum.InventDimId);
                }
                else
                {
                    con = WHSInventTable::buildQty(inventSum.ItemId, inventSum.PhysicalInvent, unitId, inventSum.InventDimId);
                }

                for (i = 0; i < conLen(con); i++)
                {
                    Qty cvtQty = conPeek(conPeek(con, conLen(con) - i), #BuildQtyQty);

                    if (cvtQty >= 1)
                    {
                        highestUOM = conPeek(conPeek(con, conLen(con) - i), #BuildQtyUOM);
                        break;
                    }
                }

                unitConverter.parmToUnitOfMeasureSymbol(highestUOM);

                inlocationQty    = roundUp(unitConverter.convertValue(inlocationQty), 1);
                inLocationUnitId = highestUOM;
            }

            WHSPhysDimUOM physDimUOM = WHSPhysDimUOM::getPhysDimUOMByItem(inventSum.ItemId, inLocationUnitId);
            usedVolume += physDimUOM.displayVolume() * inlocationQty;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWHSEnabledItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if item is warehouse enabled.
    /// </summary>
    /// <returns>
    /// true if item is warehouse enabled; otherwise, false.
    /// </returns>
    private boolean isWHSEnabledItem()
    {
        if (!isWHSEnabledItem)
        {
            isWHSEnabledItem = new Map(Types::String, Types::Enum);
        }
        
        if (!isWHSEnabledItem.exists(inventSum.ItemId))
        {
            isWHSEnabledItem.insert(inventSum.ItemId, inventSum.isItemWHSEnabled());
        }

        return isWHSEnabledItem.lookup(inventSum.ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUOMSeqGroupIdConfigured</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if UOM sequence group is configured for warehouse enabled item.
    /// </summary>
    /// <returns>
    /// true if unit sequence group is defined on item; otherwise, false.
    /// </returns>
    private boolean isUOMSeqGroupIdConfigured()
    {
        if (!isUOMSeqGroupIdConfigured)
        {
            isUOMSeqGroupIdConfigured = new Map(Types::String, Types::Enum);
        }
        
        if (!isUOMSeqGroupIdConfigured.exists(inventSum.ItemId))
        {
            isUOMSeqGroupIdConfigured.insert(inventSum.ItemId, WHSInventTable::find(inventSum.ItemId).UOMSeqGroupId != '');
        }

        return isUOMSeqGroupIdConfigured.lookup(inventSum.ItemId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>