<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionServiceAdvanceInvoice_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Runtime.Services.CustomerOrder;
/// <summary>
/// The <c>RetailTransactionServiceAdvanceInvoice_W</c> class handles the advance invoice logic for EE countries in RetailTransactionService.
/// </summary>
public class RetailTransactionServiceAdvanceInvoice_W
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cancelCustAdvanceInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates credit-note advance invoice.
    /// </summary>
    /// <param name = "_salesTable">The sales table record to create advance invoice.</param>
    /// <param name = "_storeId">The storeId related to the advance invoice.</param>
    /// <param name = "_terminalId">The terminalId related to the advance invoice.</param>
    /// <param name = "_orderReferenceId">The retailOrderReferenceId related to the advance invoice.</param>
    public static server void cancelCustAdvanceInvoices(SalesTable                    _salesTable,
                                                        RetailStoreId                 _storeId,
                                                        RetailTerminalId              _terminalId,
                                                        RetailOrderChannelReferenceId _orderReferenceId)
    {
        AdvanceInvoiceContract_W advanceInvoiceContract = new AdvanceInvoiceContract_W();
        advanceInvoiceContract.parmSalesTable(_salesTable);
        advanceInvoiceContract.parmRetailStoreId(_storeId);
        advanceInvoiceContract.parmRetailTerminalId(_terminalId);
        advanceInvoiceContract.parmRetailOrderChannelReferenceId(_orderReferenceId);

        RetailTransactionServiceAdvanceInvoice_W::cancelCustAdvanceInvoicesByContract(advanceInvoiceContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelCustAdvanceInvoicesByContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates credit-note advance invoice by contract.
    /// </summary>
    /// <param name = "_advanceInvoiceContract">Advance invoice contract.</param>
    public static void cancelCustAdvanceInvoicesByContract(AdvanceInvoiceContract_W _advanceInvoiceContract)
    {
        AdvanceInvoiceCopying_CreditNote_W  custAICreditNoter;
        CzCustPostAdvanceInvoice            custAIPoster;
        
        CzCustAdvanceInvoiceTable           custAdvInvoiceTable;
        CzCustAdvanceInvoiceTable           custAdvInvoiceCreditNote;
        CzCustAdvanceInvoiceLine            custAdvInvoiceLine;
        
        select firstonly custAdvInvoiceTable
            where custAdvInvoiceTable.SalesId == _advanceInvoiceContract.parmSalesTable().SalesId &&
                  custAdvInvoiceTable.Status  != CzAdvanceInvoiceStatus::Closed &&
                  custAdvInvoiceTable.Type    == AdvanceInvoiceType_W::Common;
        
        if (!custAdvInvoiceTable.RecId)
        {
            return;
        }
        
        ttsBegin;
        
        // Creating advance invoice credit note
        DocumentDate documentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        custAdvInvoiceCreditNote.initValue();
        custAdvInvoiceCreditNote.initFromAdvanceInvoiceContract(_advanceInvoiceContract);
        custAdvInvoiceCreditNote.OrderAccount           = _advanceInvoiceContract.parmSalesTable().CustAccount;
        custAdvInvoiceCreditNote.InvoiceAccount         = _advanceInvoiceContract.parmSalesTable().InvoiceAccount;
        custAdvInvoiceCreditNote.DocumentDate           = documentDate;
        custAdvInvoiceCreditNote.VatDueDate_W           = documentDate;
        custAdvInvoiceCreditNote.initRecord();
        custAdvInvoiceCreditNote.insert();
        
        // Filling credit note with lines from original AIs with open balance
        boolean createCorrectiveLines = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL, #isoHU]);
        custAICreditNoter = AdvanceInvoiceCopying_CreditNote_W::construct();
        custAICreditNoter.parmCallerTable(custAdvInvoiceCreditNote);
        custAICreditNoter.parmCreateCorrectiveLines(createCorrectiveLines);
        
        while select TableId, RecId from custAdvInvoiceTable
            where custAdvInvoiceTable.SalesId == _advanceInvoiceContract.parmSalesTable().SalesId &&
                  custAdvInvoiceTable.Status  != CzAdvanceInvoiceStatus::Closed &&
                  custAdvInvoiceTable.Type    == AdvanceInvoiceType_W::Common
        {
            custAICreditNoter.selectTable(custAdvInvoiceTable.TableId, custAdvInvoiceTable.RecId, true, true);
        }

        custAICreditNoter.run();

        // Updating corrective lines with zero amount
        if (createCorrectiveLines)
        {
            update_recordset custAdvInvoiceLine
                setting AmountCur = 0
                where custAdvInvoiceLine.ParentRecId == custAdvInvoiceCreditNote.RecId &&
                      custAdvInvoiceLine.AdvanceInvoiceLineInternalRef != 0            &&
                      custAdvInvoiceLine.OrigAdvanceInvoiceLineRecId   == 0;
        }
        
        // Posting advance invoice credit note
        custAIPoster = CzCustPostAdvanceInvoice::construct();
        custAIPoster.parmInvoiceTable(custAdvInvoiceCreditNote);
        custAIPoster.runOperation();
        
        // Closing original advance invoices and credit note
        update_recordset custAdvInvoiceTable
            setting Status = CzAdvanceInvoiceStatus::Closed
            where custAdvInvoiceTable.SalesId == _advanceInvoiceContract.parmSalesTable().SalesId &&
                  custAdvInvoiceTable.Status  != CzAdvanceInvoiceStatus::Closed &&
                  (custAdvInvoiceTable.Type   == AdvanceInvoiceType_W::Common   ||
                   custAdvInvoiceTable.Type   == AdvanceInvoiceType_W::CreditNote);
        
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustAdvanceInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates original advance invoice.
    /// </summary>
    /// <param name = "_salesTable">The sales table record to create advance invoice.</param>
    /// <param name = "_advanceInvoiceContract">Advance Invoice contract.</param>
    /// <param name = "_storeId">The storeId related to the advance invoice.</param>
    /// <param name = "_terminalId">The terminalId related to the advance invoice.</param>
    /// <param name = "_orderReferenceId">The retailOrderReferenceId related to the advance invoice.</param>
    public static server void createCustAdvanceInvoice(SalesTable                    _salesTable,
                                                       AdvanceInvoiceContract_W      _advanceInvoiceContract,
                                                       RetailStoreId                 _storeId,
                                                       RetailTerminalId              _terminalId,
                                                       RetailOrderChannelReferenceId _orderReferenceId)
    {
        _advanceInvoiceContract.parmSalesTable(_salesTable);
        _advanceInvoiceContract.parmRetailStoreId(_storeId);
        _advanceInvoiceContract.parmRetailTerminalId(_terminalId);
        _advanceInvoiceContract.parmRetailOrderChannelReferenceId(_orderReferenceId);

        RetailTransactionServiceAdvanceInvoice_W::createCustAdvanceInvoiceByContract(_advanceInvoiceContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCustAdvanceInvoiceByContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates original advance invoice by contract.
    /// </summary>
    /// <param name = "_advanceInvoiceContract">Advance Invoice contract.</param>
    public static void createCustAdvanceInvoiceByContract(AdvanceInvoiceContract_W _advanceInvoiceContract)
    {
        CzAdvanceInvoiceCreate_Cust custAICreator;
        CzCustPostAdvanceInvoice    custAIPoster;
        CzAdvanceInvoiceLink        custAILinker;
        SalesTotals                 salesTotals;
        SetEnumerator               se;
        
        CzCustAdvanceInvoiceTable   custAdvInvoiceTable;
        CzCustAdvanceInvoiceLine    custAdvInvoiceLine;
        
        AmountMST                   salesTotalMST;
        AmountMST                   prepaymentTotalMST;
        Voucher                     prepVoucher;
        TransDate                   prepDate;
        AmountMST                   prepAmount;
        
        // Calculating sales and prepayment totals
        salesTotals   = SalesTotals::construct(_advanceInvoiceContract.parmSalesTable());

        salesTotalMST = CurrencyExchangeHelper::amountCur2MST(
            salesTotals.totalAmount(), 
            _advanceInvoiceContract.parmSalesTable().CurrencyCode, 
            _advanceInvoiceContract.parmSalesTable().fixedExchRate());
        
        if (salesTotalMST <= 0)
        {
            return;
        }

        se = _advanceInvoiceContract.parmPrepaymentsSet().getEnumerator();
        while (se.moveNext())
        {
            prepAmount = conPeek(se.current(),3);
            prepaymentTotalMST += prepAmount;
        }

        if (prepaymentTotalMST <= 0)
        {
            return;
        }
        
        ttsBegin;
        
        // Creating advance invoice
        DocumentDate documentDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        custAdvInvoiceTable.initFromAdvanceInvoiceContract(_advanceInvoiceContract);
        custAdvInvoiceTable.DocumentDate = documentDate;
        custAdvInvoiceTable.VatDueDate_W = documentDate;

        custAICreator  = new CzAdvanceInvoiceCreate_Cust(_advanceInvoiceContract.parmSalesTable(), custAdvInvoiceTable, custAdvInvoiceLine);
        custAICreator.parmPercent(100.00 * (prepaymentTotalMST - _advanceInvoiceContract.parmCarryOutInvoiceAmount()) / salesTotalMST);
        custAICreator.runOperation();
        
        // Posting advance invoice
        custAIPoster = CzCustPostAdvanceInvoice::construct();
        custAIPoster.parmInvoiceTable(custAdvInvoiceTable);
        custAIPoster.runOperation();
        
        // Linking advance invoice with prepayments
        custAILinker = CzAdvanceInvoiceLink::newFromAdvance(custAdvInvoiceTable);
        
        se = _advanceInvoiceContract.parmPrepaymentsSet().getEnumerator();
        while (se.moveNext())
        {
            [prepVoucher, prepDate, prepAmount] = se.current();
            custAILinker.includePayment(curext(), prepVoucher, prepDate, true);
        }
        
        custAILinker.status(custAdvInvoiceTable, CzAdvanceInvoiceStatus::PartPaid);
        custAILinker.updateLink();
        
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustAdvanceInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates advance invoice by create credit-note advance invoice and advance invoice for new deposit.
    /// </summary>
    /// <param name = "_salesTable">The sales table record to create advance invoice.</param>
    /// <param name = "_advanceInvoiceContract">Advance invoice contract.</param>
    /// <param name = "_storeId">The storeId related to the advance invoice.</param>
    /// <param name = "_terminalId">The terminalId related to the advance invoice.</param>
    /// <param name = "_orderRefrenceId">The retailOrderReferenceId related to the advance invoice.</param>
    public server static void updateCustAdvanceInvoice(SalesTable                    _salesTable,
                                                       AdvanceInvoiceContract_W      _advanceInvoiceContract,
                                                       RetailStoreId                 _storeId,
                                                       RetailTerminalId              _terminalId,
                                                       RetailOrderChannelReferenceId _orderRefrenceId)
    {
        _advanceInvoiceContract.parmSalesTable(_salesTable);
        _advanceInvoiceContract.parmRetailStoreId(_storeId);
        _advanceInvoiceContract.parmRetailTerminalId(_terminalId);
        _advanceInvoiceContract.parmRetailOrderChannelReferenceId(_orderRefrenceId);

        RetailTransactionServiceAdvanceInvoice_W::updateCustAdvanceInvoiceByContract(_advanceInvoiceContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustAdvanceInvoiceByContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates advance invoice by contract.
    /// </summary>
    /// <param name = "_advanceInvoiceContract">Advance invoice contract.</param>
    public static void updateCustAdvanceInvoiceByContract(AdvanceInvoiceContract_W _advanceInvoiceContract)
    {
        CzCustAdvanceInvoiceTable   custAdvInvoiceTable;
        CzCustAdvanceInvoiceLink    custAdvInvoiceLink;
        SalesLine                   salesLine;
        SalesLine                   salesLineExist;
        AmountMST                   openAmountTotalMST;
        AmountMST                   prepAmount;
        AmountMST                   prepaymentTotalMST;
        SetEnumerator               se;

        // Calculating current operation payment totals
        se = _advanceInvoiceContract.parmPrepaymentsSet().getEnumerator();
        while (se.moveNext())
        {
            prepAmount = conPeek(se.current(),3);
            prepaymentTotalMST += prepAmount;
        }

        if (_advanceInvoiceContract.parmHasCarryOutLine())
        {
            prepaymentTotalMST -= SalesTotals::construct(_advanceInvoiceContract.parmSalesTable(), SalesUpdate::DeliverNow).totalAmount();
        }

        // If both deposit amount and customer order content are not changed - no further processing is required
        if (prepaymentTotalMST == 0 && !_advanceInvoiceContract.parmCancelOpenedAdvanceInvoices())
        {
            _advanceInvoiceContract.parmNoFurtherProcessing(true);
            return;
        }

        ttsBegin;
        
        if (!_advanceInvoiceContract.parmCancelOpenedAdvanceInvoices())
        {
            DlvModeId carryOutDeliveryModeCode = RetailParameters::find().CarryOutDeliveryModeCode;
            // Checking for different tax groups in the Sales order and for negative prepayments total amount
            select firstonly RecId from salesLine
                where salesLine.SalesId == _advanceInvoiceContract.parmSalesTable().SalesId &&
                    (carryOutDeliveryModeCode == '' ||
                     salesLine.DlvMode != carryOutDeliveryModeCode)
                    exists join salesLineExist
                        where salesLineExist.SalesId        == salesLine.SalesId &&
                              (carryOutDeliveryModeCode     == '' ||
                               salesLineExist.DlvMode       != carryOutDeliveryModeCode) &&
                              (salesLineExist.TaxGroup      != salesLine.TaxGroup ||
                               salesLineExist.TaxItemGroup  != salesLine.TaxItemGroup);
            
            _advanceInvoiceContract.parmCancelOpenedAdvanceInvoices(salesLine.RecId != 0 || prepaymentTotalMST < 0);
        }
        
        if (_advanceInvoiceContract.parmCancelOpenedAdvanceInvoices())
        {
            // Calculating total opened amount of the existing advance invoices
            while select custAdvInvoiceTable
                where custAdvInvoiceTable.SalesId == _advanceInvoiceContract.parmSalesTable().SalesId &&
                      custAdvInvoiceTable.Status  != CzAdvanceInvoiceStatus::Closed &&
                      custAdvInvoiceTable.Type    == AdvanceInvoiceType_W::Common
            {
                openAmountTotalMST += custAdvInvoiceTable.amountMSTOpen();
            }
            
            // Adding existing prepayments into the _prepayments set, so they will be linked to the new andvance invoice
            while select TransDate, Voucher, PaymentCompany from custAdvInvoiceLink
                exists join custAdvInvoiceTable
                where custAdvInvoiceTable.RecId   == custAdvInvoiceLink.AdvanceInvoiceRecId &&
                      custAdvInvoiceTable.SalesId == _advanceInvoiceContract.parmSalesTable().SalesId &&
                      custAdvInvoiceTable.Status  != CzAdvanceInvoiceStatus::Closed &&
                      custAdvInvoiceTable.Type    == AdvanceInvoiceType_W::Common
            {
                _advanceInvoiceContract.parmPrepaymentsSet().add([custAdvInvoiceLink.Voucher, custAdvInvoiceLink.TransDate, openAmountTotalMST]);
                // placing total opened amount only into the first element
                openAmountTotalMST = 0.00;
            }
            
            RetailTransactionServiceAdvanceInvoice_W::cancelCustAdvanceInvoicesByContract(_advanceInvoiceContract);
        }
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleCustAdvanceInvoices</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates reversal advance invoice.
    /// </summary>
    /// <param name = "_salesTable">The sales table record related to the advance invoice.</param>
    /// <param name = "_custInvoiceJour">The cust invoice journal record to settle original advance invoice.</param>
    /// <param name = "_settleAmount">Settle amount.</param>
    public static server void settleCustAdvanceInvoices(SalesTable _salesTable, CustInvoiceJour _custInvoiceJour, AmountCur _settleAmount)
    {
        AdvanceInvoiceSettlement_W custAISettler;
        
        CzCustAdvanceInvoiceTable  custAdvInvoiceTable;
        
        if (_settleAmount <= 0 || !_custInvoiceJour)
        {
            return;
        }
        
        ttsBegin;
        
        custAISettler = AdvanceInvoiceSettlement_W::newFromParent(_salesTable.TableId);
        
        AmountCur amountToSettle = _settleAmount;

        while select custAdvInvoiceTable
            order by InvoiceDate, InvoiceId
            where custAdvInvoiceTable.SalesId      == _salesTable.SalesId &&
                  custAdvInvoiceTable.Status       != CzAdvanceInvoiceStatus::Closed &&
                  custAdvInvoiceTable.Type         == AdvanceInvoiceType_W::Common
        {
            amountToSettle -= custAISettler.markTransAmount(custAdvInvoiceTable, true, amountToSettle);
            
            if (amountToSettle <= 0) break;
        }

        custAISettler.settleNow(_custInvoiceJour);

        while select forUpdate custAdvInvoiceTable
           where custAdvInvoiceTable.SalesId == _salesTable.SalesId &&
                 custAdvInvoiceTable.Status  != CzAdvanceInvoiceStatus::Closed
        {
            if (!custAdvInvoiceTable.amountCurOpen())
            {
                custAdvInvoiceTable.Status = CzAdvanceInvoiceStatus::Closed;
                custAdvInvoiceTable.update();
            }
        }
        
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSalesLineChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the sales line record changed.
    /// </summary>
    /// <param name = "_salesLine">The sales line record.</param>
    /// <returns>If the sales line changed return true otherwise return false</returns>
    public static boolean isSalesLineChanged(SalesLine _salesLine)
    {
        return _salesLine.ItemId        != _salesLine.orig().ItemId     ||
               _salesLine.SalesQty      != _salesLine.orig().SalesQty   ||
               _salesLine.LineAmount    != _salesLine.orig().LineAmount ||
               _salesLine.TaxGroup      != _salesLine.orig().TaxGroup   ||
               _salesLine.TaxItemGroup  != _salesLine.orig().TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomerOrderTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is a customer order transaction.
    /// </summary>
    /// <param name = "_custOrderInfo">DataContract of customer order info.</param>
    /// <returns>
    /// If it is a customer order transaction return true else false.
    /// </returns>
    public static boolean isCustomerOrderTransaction(CustomerOrderInfo _custOrderInfo)
    {
        ItemInfoCollection items = _custOrderInfo.Items;
        for(int i = 0; i < items.get_Count(); i++)
        {
            ItemInfo itemInfo = items.get_Item(i) as ItemInfo;
            if(ItemInfo.DeliveryMode != '')
            {
                return true;
            }
        }
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>