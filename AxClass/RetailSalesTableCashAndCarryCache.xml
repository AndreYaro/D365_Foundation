<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesTableCashAndCarryCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailSalesTableCashAndCarryCache</c> class caches if a sales order is a Retail Cash and Carry transaction or not.
/// </summary>
[Wrappable(false)]
internal class RetailSalesTableCashAndCarryCache
{
    private const str CacheKeyFormat = 'SalesTable.isRetailRetailCashAndCarry[%1]';
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetailCashAndCarrySales</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SalesTable</c> record is a Retail Cash and Carry sales record
    /// </summary>
    /// <param name = "_salesTable">The sales table record.</param>
    /// <returns>
    /// true if the <c>SalesTable</c> record is a Retail sales record created from Default customer sales
    /// in POS, with or without aggregation; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public static NoYes isRetailCashAndCarrySales(SalesTable _salesTable)
    {
        boolean isRetailCashAndCarrySales = false;

        if (_salesTable.RecId != 0)
        {
            SysGlobalCache globalCache = classFactory.globalCache();
            str globalcacheKey = RetailSalesTableCashAndCarryCache::getCacheKey(_salesTable);

            if (globalCache.isSet(curUserId(), globalcacheKey))
            {
                return globalCache.get(curUserId(), globalcacheKey);
            }
            else if (RetailSalesTableCashAndCarryCache::isRetailCashAndCarrySalesNoCache(_salesTable))
            {
                globalCache.set(curUserId(), globalcacheKey, NoYes::Yes);

                return NoYes::Yes;
            }
            else
            {
                globalCache.set(curUserId(), globalcacheKey, NoYes::No);

                return NoYes::No;
            }
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetailCashAndCarrySalesNoCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the <c>SalesTable</c> record is a Retail Cash and Carry sales record without using the cached value.
    /// </summary>
    /// <param name = "_salesTable">The sales table record.</param>
    /// <returns>
    /// true if the <c>SalesTable</c> record is a Retail sales record created from Default customer sales
    /// in POS, with or without aggregation; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public static boolean isRetailCashAndCarrySalesNoCache(SalesTable _salesTable)
    {
        RetailTransactionTable retailTransactionTable;
        boolean isRetailCashAndCarrySales = false;

        if (_salesTable.RecId != 0)
        {
            // If statementId is set then we know the SalesTable came from statement posting, note that this is
            // updated at the beginning of the sales order creation.
            if (_salesTable.retailSalesTable().StatementId)
            {
                isRetailCashAndCarrySales = true;
            }
            // For backward compatibility where custOrderInfo object doesn't have statementId or we did not populate
            // statementId in RetailTransactionServiceOrders, fall back to checking the transaction, note that
            // the transaction is only updated after sales order creation.
            else
            {
                RefRecId transactionRecId = SalesTable::findCashAndCarryAssociatedWithSalesId(_salesTable.SalesId);
                isRetailCashAndCarrySales = transactionRecId != 0;
            }

            return isRetailCashAndCarrySales;
        }
        else
        {
            return NoYes::No;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invalidateCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invalidates the cash and carry cache for the given SalesTable record.
    /// </summary>
    /// <param name = "_salesTable">The sales table record.</param>
    [Hookable(false)]
    public static void invalidateCache(SalesTable _salesTable)
    {
        SysGlobalCache globalCache = classFactory.globalCache();

        str globalcacheKey = RetailSalesTableCashAndCarryCache::getCacheKey(_salesTable);

        globalCache.remove(curUserId(), globalcacheKey);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCacheKey</Name>
				<Source><![CDATA[
    internal static str getCacheKey(SalesTable _salesTable)
    {
        return strFmt(CacheKeyFormat, _salesTable.SalesId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>