<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalFormController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JournalFormController</c> class is controlling the interaction between merged header and lines journal forms and the <c>JournalFormTable</c> class and the <c>JournalFormTrans</c> class.
/// </summary>
class JournalFormController
{
    JournalFormTable journalFormTable;
    JournalFormTrans journalFormTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmJournalFormTable</Name>
				<Source><![CDATA[
    public JournalFormTable parmJournalFormTable()
    {
        return journalFormTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalFormTrans</Name>
				<Source><![CDATA[
    public JournalFormTrans parmJournalFormTrans()
    {
        return journalFormTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlVoucherTab</Name>
				<Source><![CDATA[
    public void parmCtrlVoucherTab(FormStringControl _voucherTab)
    {
        journalFormTrans.parmCtrlVoucherTab(_voucherTab);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlVoucherGrid</Name>
				<Source><![CDATA[
    public void parmCtrlVoucherGrid(FormStringControl _voucherGrid)
    {
        journalFormTrans.parmCtrlVoucherGrid(_voucherGrid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlLineLogImage</Name>
				<Source><![CDATA[
    public void parmCtrlLineLogImage(FormWindowControl _lineLogImage)
    {
        journalFormTrans.parmCtrlLineLogImage(_lineLogImage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlMarkUserBlock</Name>
				<Source><![CDATA[
    public void parmCtrlMarkUserBlock(FormCheckBoxControl _markUserBlock)
    {
        journalFormTable.parmCtrlMarkUserBlock(_markUserBlock);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlMarkInUseBlock</Name>
				<Source><![CDATA[
    public void parmCtrlMarkInUseBlock(FormCheckBoxControl _markInUseBlock)
    {
        journalFormTable.parmCtrlMarkInUseBlock(_markInUseBlock);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlSystemBlocked</Name>
				<Source><![CDATA[
    public void parmCtrlSystemBlocked(FormCheckBoxControl _systemBlocked)
    {
        journalFormTable.parmCtrlSystemBlocked(_systemBlocked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlBlockImage</Name>
				<Source><![CDATA[
    public void parmCtrlBlockImage(FormWindowControl _blockImage)
    {
        journalFormTable.parmCtrlBlockImage(_blockImage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlInitTotals</Name>
				<Source><![CDATA[
    public void parmCtrlInitTotals(FormButtonControl _initTotals)
    {
        journalFormTable.parmCtrlInitTotals(_initTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlJournalTypeGrid</Name>
				<Source><![CDATA[
    public void parmCtrlJournalTypeGrid(FormComboBoxControl _journalTypeGrid)
    {
        journalFormTable.parmCtrlJournalTypeGrid(_journalTypeGrid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlJournalIdGrid</Name>
				<Source><![CDATA[
    public void parmCtrlJournalIdGrid(FormStringControl _journalIdGrid)
    {
        journalFormTable.parmCtrlJournalIdGrid(_journalIdGrid);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlInfologTrans</Name>
				<Source><![CDATA[
    public void parmCtrlInfologTrans(FormButtonControl _infolog)
    {
        journalFormTrans.parmCtrlInfolog(_infolog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlInfologTable</Name>
				<Source><![CDATA[
    public void parmCtrlInfologTable(FormButtonControl _infolog)
    {
        journalFormTable.parmCtrlInfolog(_infolog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmctrlPrintJournal</Name>
				<Source><![CDATA[
    public void parmctrlPrintJournal(FormFunctionButtonControl _ctrlPrintJournal)
    {
        journalFormTable.parmctrlPrintJournal(_ctrlPrintJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlCheckJournal</Name>
				<Source><![CDATA[
    public void parmCtrlCheckJournal(FormFunctionButtonControl _checkJournal)
    {
        journalFormTable.parmCtrlCheckJournal(_checkJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlPostJournal</Name>
				<Source><![CDATA[
    public void parmCtrlPostJournal(FormFunctionButtonControl _postJournal)
    {
        journalFormTable.parmCtrlPostJournal(_postJournal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>designLookupJournalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup on journal name.
    /// </summary>
    /// <param name = "_ctrl">The journal name control.</param>
    public void designLookupJournalName(FormStringControl _ctrl)
    {
        journalFormTable.designLookupJournalName(_ctrl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalFree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the journal is not blocked by user or system.
    /// </summary>
    /// <returns>
    /// true, if the journal is not blocked; otherwise, false.
    /// </returns>
    public boolean isJournalFree()
    {
        return journalFormTable.isJournalFree();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowLineActions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is allowed to perform actions on the lines.
    /// </summary>
    /// <returns>
    /// true, if it is allowed; otherwise, false.
    /// </returns>
    public boolean allowLineActions()
    {
        return journalFormTrans.allowLineActions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceMethodInUseBlock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Edit method implementation for <c>JournalMarkInUseBlock</c> for journal header data sources.
    /// </summary>
    /// <param name = "_set">A Boolean value indicating if the <c>_value</c> is being set.</param>
    /// <param name = "_journalTable">The <c>JournalTableMap</c> map for the form datasource binding the method.</param>
    /// <param name = "_value">The value to set.</param>
    /// <returns>The current value.</returns>
    public JournalMarkInUseBlock datasourceMethodInUseBlock(
        boolean                 _set,
        JournalTableMap         _journalTable,
        JournalMarkInUseBlock   _value)
    {
        return journalFormTable.datasourceMethodInUseBlock(_set, _journalTable, _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceMethodLockImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method implementation for <c>LockImage</c> for journal header data sources.
    /// </summary>
    /// <param name = "_journalTable">The <c>JournalTableMap</c> map for the form datasource binding the method.</param>
    /// <returns>The current value.</returns>
    public container datasourceMethodLockImage(JournalTableMap _journalTable)
    {
        return journalFormTable.datasourceMethodLockImage(_journalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceMethodInUseUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method implementation for <c>JournalBlockInUseUserId</c> for journal header data sources.
    /// </summary>
    /// <param name = "_journalTable">The <c>JournalTableMap</c> map for the form datasource binding the method.</param>
    /// <returns>The current value.</returns>
    public JournalBlockInUseUserId datasourceMethodInUseUserId(JournalTableMap _journalTable)
    {
        return journalFormTable.datasourceMethodInUseUserId(_journalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceMethodLineLogImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display method implementation for <c>LineLogImage</c> for journal line data sources.
    /// </summary>
    /// <param name = "_journalTrans">The <c>JournalTransMap</c> map for the form datasource binding the method.</param>
    /// <returns>The current value.</returns>
    public container datasourceMethodLineLogImage(JournalTransMap _journalTrans)
    {
        return journalFormTrans.datasourceMethodLineLogImage(_journalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowEditAndCreateLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if it is allowed to edit and create journal lines.
    /// </summary>
    /// <returns>
    /// true, if it is allowed to edit and create journal lines; otherwise, false.
    /// </returns>
    public boolean allowEditAndCreateLines()
    {
        return journalFormTrans.allowEditAndCreateLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonClickedShowInfologTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the infolog for a journal line.
    /// </summary>
    public void buttonClickedShowInfologTrans()
    {
        journalFormTrans.buttonClickedShowInfolog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonClickedShowInfologTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the infolog for a journal header.
    /// </summary>
    public void buttonClickedShowInfologTable()
    {
        journalFormTable.buttonClickedShowInfolog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization of the class invoked after super in the form's init method.
    /// </summary>
    public void formInitPost()
    {
        journalFormTrans.parmJournalFormTable(journalFormTable);
        journalFormTable.formInitPost();
        this.registerEventHandlers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Register event handlers for the controller.
    /// </summary>
    protected void registerEventHandlers()
    {
        this.registerEventHandlersOnFormRun();
        this.registerEventHandlersOnTransDataSource();
        this.registerEventHandlersOnTableDataSource();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization of the class invoked after super in the header datasource's init method.
    /// </summary>
    /// <param name = "_journalTable">The header datasource.</param>
    public void tableDataSourceInitPost(JournalTableMap _journalTable)
    {
        journalFormTable.datasourceInitPost(_journalTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDataSourceInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialization of the class invoked after super in the lines datasource's init method.
    /// </summary>
    /// <param name = "_journalTrans">The lines datasource.</param>
    public void transDataSourceInitPost(JournalTransMap _journalTrans)
    {
        journalFormTrans.datasourceInitPost(_journalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the journal type id.
    /// </summary>
    /// <returns>The journal type id.</returns>
    public Integer journalTypeId()
    {
        return journalFormTable.journalTypeId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formEvent_OnClosing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised when the journal form is closing.
    /// </summary>
    /// <param name = "sender">The form.</param>
    /// <param name = "e">The event arguments.</param>
    public void formEvent_OnClosing(xFormRun sender, FormEventArgs e)
    {
        journalFormTrans.formClosePre();
        journalFormTable.formClosePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formEvent_OnTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised when a task is executed on the form.
    /// </summary>
    /// <param name = "hostForm">The form.</param>
    /// <param name = "_taskId">The task id.</param>
    public void formEvent_OnTask(FormRun hostForm, int _taskId)
    {
        #task;

        if (_taskId == #TaskEditRecord || _taskId == #taskDoneEditRecord)
        {
            journalFormTrans.editViewModeChanged();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceEvent_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised on initValue() from the header datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void tableDataSourceEvent_OnInitValue(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTable.datasourceInitValuePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceEvent_OnDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised on delete() from the header datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void tableDataSourceEvent_OnDeleted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTable.datasourceDeletePost();
        journalFormTrans.recordDeleted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceEvent_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised after write() from the header datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void tableDataSourceEvent_OnWritten(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTable.datasourceWritePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceEvent_OnReread</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised on reread() from the header datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void tableDataSourceEvent_OnReread(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTable.datasourceReReadPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceEvent_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised when the query is executed on the header datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void tableDataSourceEvent_OnQueryExecuting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTable.datasourceExecuteQueryPre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceEvent_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised after the query is executed on the header datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void tableDataSourceEvent_OnQueryExecuted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTable.datasourceExecuteQueryPost();
        journalFormTrans.datasourceLinkActivePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceEvent_OnValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised after validateWrite() on the header datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void tableDataSourceEvent_OnValidatedWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (!journalFormTable.datasourceValidateWritePost(true))
        {
            //Message is added by above method
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceEvent_OnValidatedDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised after validateDelete() on the header datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void tableDataSourceEvent_OnValidatedDelete(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (!journalFormTable.datasourceValidateDeletePost(true))
        {
            //Message is added by above method
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceCreatePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invoked before super() in the header datasource's create() method.
    /// </summary>
    /// <returns>true if the creation of the record can continue.</returns>
    public boolean tableDataSourceCreatePre()
    {
        return journalFormTable.datasourceCreatePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceCreatePost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invoked after super() in the header datasource's create() method.
    /// </summary>
    public void tableDataSourceCreatePost()
    {
        journalFormTable.datasourceCreatePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableDataSourceEvent_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised on activate() on the header datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void tableDataSourceEvent_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTable.datasourceActivePre();

        journalFormTrans.formInitPost();
        journalFormTrans.datasourceLinkActivePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>blockUserGroupId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invoked instead of the <c>BlockUserGroupId</c> field's modified() method.
    /// </summary>
    /// <param name = "_formDataObject">The field's <c>FormDataObject</c> object.</param>
    public void blockUserGroupId_OnModified(FormDataObject _formDataObject)
    {
        _formDataObject.modified();
        journalFormTable.fieldModifiedBlockUserGroupId();
        this.fieldModified(_formDataObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNameId_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invoked instead of the <c>JournalNameId</c> field's modified() method.
    /// </summary>
    /// <param name = "_formDataObject">The field's <c>FormDataObject</c> object.</param>
    public void journalNameId_OnModified(FormDataObject _formDataObject)
    {
        _formDataObject.modified();
        journalFormTable.fieldModifiedJournalNameIdPost();
        this.fieldModified(_formDataObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalNameId_OnValidated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invoked instead of the <c>JournalNameId</c> field's validate() method.
    /// </summary>
    /// <param name = "_formDataObject">The field's <c>FormDataObject</c> object.</param>
    public boolean journalNameId_OnValidated(FormDataObject _formDataObject)
    {
        boolean ret = _formDataObject.validate();
        ret = ret && journalFormTable.fieldValidateJournalNameIdPost(ret);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>systemBlocked_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method invoked instead of the <c>SystemBlocked</c> field's modified() method.
    /// </summary>
    /// <param name = "_formDataObject">The field's <c>FormDataObject</c> object.</param>
    public void systemBlocked_OnModified(FormDataObject _formDataObject)
    {
        _formDataObject.modified();
        journalFormTable.fieldModifiedSystemBlockedPost();
        this.fieldModified(_formDataObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Notifies event handlers when a field has been modified.
    /// </summary>
    /// <param name = "_formDataObject">The modified field's <c>FormDataObject</c> object.</param>
    delegate void fieldModified(FormDataObject _formDataObject)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDataSourceEvent_OnValidatedWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised after validateWrite() on the lines datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void transDataSourceEvent_OnValidatedWrite(FormDataSource sender, FormDataSourceEventArgs e)
    {
        if (!journalFormTrans.datasourceValidateWritePost(true))
        {
            //Message is added by above method
            throw Exception::Error;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDataSourceEvent_OnWriting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised on write() from the lines datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void transDataSourceEvent_OnWriting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTrans.datasourceWritePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDataSourceEvent_OnWritten</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised after write() from the lines datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void transDataSourceEvent_OnWritten(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTrans.datasourceWritePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDataSourceEvent_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised after the query is executed on the lines datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void transDataSourceEvent_OnQueryExecuted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTrans.datasourceExecuteQueryPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDataSourceEvent_OnInitValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised on initValue() from the lines datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void transDataSourceEvent_OnInitValue(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTrans.datasourceInitValuePre();
        journalFormTrans.datasourceInitValuePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDataSourceEvent_OnDeleting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised on delete() from the lines datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void transDataSourceEvent_OnDeleting(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTrans.datasourceDeletePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDataSourceEvent_OnDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised after delete() from the lines datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void transDataSourceEvent_OnDeleted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTrans.datasourceDeletePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDataSourceEvent_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised on activate() on the lines datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void transDataSourceEvent_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTrans.datasourceActivePost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDataSourceEvent_OnCreating</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form event raised on create() on the lines datasource.
    /// </summary>
    /// <param name = "sender">The datasource.</param>
    /// <param name = "e">The event arguments.</param>
    public void transDataSourceEvent_OnCreating(FormDataSource sender, FormDataSourceEventArgs e)
    {
        journalFormTrans.datasourceCreatePre();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlersOnFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers event handlers on the <c>FormRun</c> object.
    /// </summary>
    protected void registerEventHandlersOnFormRun()
    {
        FormRun formRun = journalFormTable.formRun();

        formRun.onClosing += eventhandler(this.formEvent_OnClosing);
        formRun.onTask += eventhandler(this.formEvent_OnTask);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlersOnTransDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers event handlers on the lines datasource.
    /// </summary>
    protected void registerEventHandlersOnTransDataSource()
    {
        FormDataSource dataSource = journalFormTrans.journalTrans_DS();

        dataSource.OnValidatedWrite += eventhandler(this.transDataSourceEvent_OnValidatedWrite);
        dataSource.OnWriting += eventhandler(this.transDataSourceEvent_OnWriting);
        dataSource.OnWritten += eventhandler(this.transDataSourceEvent_OnWritten);
        dataSource.OnQueryExecuted += eventhandler(this.transDataSourceEvent_OnQueryExecuted);
        dataSource.OnInitValue += eventhandler(this.transDataSourceEvent_OnInitValue);
        dataSource.OnDeleting += eventhandler(this.transDataSourceEvent_OnDeleting);
        dataSource.OnDeleted += eventhandler(this.transDataSourceEvent_OnDeleted);
        dataSource.OnActivated += eventhandler(this.transDataSourceEvent_OnActivated);
        dataSource.OnCreating += eventhandler(this.transDataSourceEvent_OnCreating);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandlersOnTableDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers event handlers on the header datasource.
    /// </summary>
    protected void registerEventHandlersOnTableDataSource()
    {
        FormDataSource dataSource = journalFormTable.journalTable_DS();

        dataSource.OnInitValue += eventhandler(this.tableDataSourceEvent_OnInitValue);
        dataSource.OnDeleted += eventhandler(this.tableDataSourceEvent_OnDeleted);
        dataSource.OnWritten += eventhandler(this.tableDataSourceEvent_OnWritten);
        dataSource.OnReread += eventhandler(this.tableDataSourceEvent_OnReread);
        dataSource.OnQueryExecuted += eventhandler(this.tableDataSourceEvent_OnQueryExecuted);
        dataSource.OnQueryExecuting += eventhandler(this.tableDataSourceEvent_OnQueryExecuting);
        dataSource.OnValidatedWrite += eventhandler(this.tableDataSourceEvent_OnValidatedWrite);
        dataSource.OnValidatedDelete += eventhandler(this.tableDataSourceEvent_OnValidatedDelete);
        dataSource.OnActivated += eventhandler(this.tableDataSourceEvent_OnActivated);

        // These two cannot be wired up, as super() is not invoked on the forms
        //dataSource.OnCreating += eventhandler(this.tableDataSourceEvent_OnCreating);
        //dataSource.OnCreated += eventhandler(this.tableDataSourceEvent_OnCreated);

        JournalStatic journalStatic = journalFormTable.journalTableData().journalStatic();

        dataSource.object(journalStatic.tableFieldIdSystemBlocked()).registerOverrideMethod(methodStr(FormDataObject, Modified), methodStr(JournalFormController, systemBlocked_OnModified), this);
        dataSource.object(journalStatic.tableFieldIdBlockUserGroupId()).registerOverrideMethod(methodStr(FormDataObject, Modified), methodStr(JournalFormController, blockUserGroupId_OnModified), this);
        dataSource.object(journalStatic.tableFieldIdJournalNameId()).registerOverrideMethod(methodStr(FormDataObject, Modified), methodStr(JournalFormController, journalNameId_OnModified), this);
        dataSource.object(journalStatic.tableFieldIdJournalNameId()).registerOverrideMethod(methodStr(FormDataObject, Validate), methodStr(JournalFormController, journalNameId_OnValidated), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromJournalForms</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>JournalFormController</c> class.
    /// </summary>
    /// <param name = "_journalFormTable">The <c>JournalFormTable</c> instance used by this merged journal form.</param>
    /// <param name = "_journalFormTrans">The <c>JournalFormTrans</c> instance used by this merged journal form.</param>
    /// <returns>A new instance of the <c>JournalFormController</c> class.</returns>
    public static JournalFormController newFromJournalForms(
        JournalFormTable _journalFormTable,
        JournalFormTrans _journalFormTrans)
    {
        JournalFormController controller = new JournalFormController();

        controller.journalFormTable = _journalFormTable;
        controller.journalFormTrans = _journalFormTrans;

        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>