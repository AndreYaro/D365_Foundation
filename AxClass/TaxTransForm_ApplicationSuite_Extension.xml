<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransForm_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(formStr(TaxTrans))]
public final class TaxTransForm_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        next init();

        if (this.args().record())
        {
            if (this.args().record().TableId == tableNum(CustIntentLetter_IT)
                && FeatureStateProvider::isFeatureEnabled(IntentLettersFeature::instance()))
            {
                CustIntentLetter_IT intentLetter = this.args().record();
                query = taxTrans_DS.query();
                QueryBuildDataSource qbds = query.dataSourceTable(tableNum(TaxTrans));
                qbds = qbds.addDataSource(tableNum(TaxTrans_IT));
                qbds.joinMode(JoinMode::InnerJoin);
                qbds.fetchMode(QueryFetchMode::One2One);
                qbds.relations(true);
                qbds.addRange(fieldNum(TaxTrans_IT, IntentLetterId)).value(SysQuery::value(intentLetter.InternalLetterId));
                qbds.addRange(fieldNum(TaxTrans_IT, IntentLetterOrigin)).value(SysQuery::value(IntentLetterOrigin_IT::Cust));
            }

            if (this.args().record().TableId == tableNum(IntentLetter_IT)
                && FeatureStateProvider::isFeatureEnabled(PlafondFeature::instance()))
            {
                IntentLetter_IT intentLetter = this.args().record();
                query = taxTrans_DS.query();
                QueryBuildDataSource qbds = query.dataSourceTable(tableNum(TaxTrans));
                qbds = qbds.addDataSource(tableNum(TaxTrans_IT));
                qbds.joinMode(JoinMode::InnerJoin);
                qbds.fetchMode(QueryFetchMode::One2One);
                qbds.relations(true);
                qbds.addRange(fieldNum(TaxTrans_IT, IntentLetterId)).value(SysQuery::value(intentLetter.IntentLetterId));
                qbds.addRange(fieldNum(TaxTrans_IT, IntentLetterOrigin)).value(SysQuery::value(IntentLetterOrigin_IT::Vend));
            }
        }

        FormCheckBoxControl reverseCharge = this.design().controlName(formControlStr(TaxTrans, TaxTrans_ReverseCharge)) as FormCheckBoxControl;

        if (reverseCharge)
        {
            reverseCharge.visible(ReverseChargeTaxSetupToggle::isReverseChargeUIEnabled());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>TaxTrans_OnQueryExecuting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Filter query object by plafond ID and plafond dates.
    /// </summary>
    /// <param name="sender"><c>FormRun</c> caller object.</param>
    /// <param name="e">Event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(TaxTrans, TaxTrans), FormDataSourceEventType::QueryExecuting)]
    public static void TaxTrans_OnQueryExecuting(FormDataSource _sender, FormDataSourceEventArgs _args)
    {
        FormRun formRun = _sender.formRun();

        if (formRun.args().caller()
            && formRun.args().caller().name() == formstr(PlafondPeriodTrans_IT)
            && formRun.args().dataset() == tablenum(PlafondPeriodTrans_IT))
        {
            PlafondPeriodTrans_IT plafondPeriodTrans = formRun.args().record();
            Query q = _sender.query();
            QueryBuildDataSource qbds = q.dataSourceTable(tableNum(TaxTrans));
            qbds = qbds.addDataSource(tableNum(TaxTrans_IT));
            qbds.joinMode(JoinMode::InnerJoin);
            qbds.fetchMode(QueryFetchMode::One2One);
            qbds.relations(true);
            QueryBuildRange qbr;

            if (plafondPeriodTrans.PlafondId)
            {
                qbr = SysQuery::findOrCreateRange(qbds, fieldNum(TaxTrans_IT, PlafondId));
                qbr.value(plafondPeriodTrans.PlafondId);
            }

            if (plafondPeriodTrans)
            {
                qbr = SysQuery::findOrCreateRange(qbds, fieldNum(TaxTrans_IT, PlafondDate));
                qbr.value(SysQuery::range(plafondPeriodTrans.FromDate, plafondPeriodTrans.ToDate));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>