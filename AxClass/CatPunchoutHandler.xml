<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatPunchoutHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
///    The <c>CatPunchoutHandler</c> class handles the punch-out protocol.
/// </summary>
[ExportInterfaceAttribute()]
public abstract class CatPunchoutHandler
{
    protected List errorMessage = new List(Types::String);
    protected CatPunchoutRequestAttributes punchoutRequestAttributes;
    protected boolean isValidationPunchout;
    private CatCXMLInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Constructs a new instance of the <c>CatPunchoutHandler</c> class.
    /// </summary>
    /// <param name = "_catalog">
    ///   The <c>CatExternalCatalogName</c> data type which links the child classes to this one.
    /// </param>
    /// <returns>
    ///   An instance of the <c>CatPunchoutHandler</c> class.
    /// </returns>
    public static CatPunchoutHandler construct(CatExternalCatalogName _catalog)
    {
        if(_catalog == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CatExternalMessageFormat externalMessageFormat = CatExternalMessageFormat::findByExternalCatalog(CatExternalCatalog::find(_catalog).RecId);
        if (!externalMessageFormat.RecId)
        {
            throw error(Error::missingRecord(tableStr(CatExternalMessageFormat)));
        }
        
        return CatPunchoutHandler::createInstance(externalMessageFormat.PunchoutEntityType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForValidation</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Constructs a new instance of the <c>CatPunchoutHandler</c> class.
    /// </summary>
    /// <param name = "_catalog">
    ///   The <c>CatExternalCatalogName</c> data type which links the child classes to this one.
    /// </param>
    /// <returns>
    ///   An instance of the <c>CatPunchoutHandler</c> class.
    /// </returns>
    /// <remarks>
    ///  The  isValidationPunchout</c/> property value is set to true.
    /// </remarks>
    public static CatPunchoutHandler constructForValidation(CatExternalCatalogName _catalog)
    {
        CatPunchoutHandler punchoutHandler = CatPunchoutHandler::construct(_catalog);
        punchoutHandler.isValidationPunchout = true;

        return punchoutHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromPunchoutRequest</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Constructs a new instance of the <c>CatPunchoutHandler</c> class.
    /// </summary>
    /// <param name = "_recId">
    ///   The <c>CatPunchoutRequestRecId</c> data of the punchout request.
    /// </param>
    /// <returns>
    ///   An instance of the <c>CatPunchoutHandler</c> class.
    /// </returns>
    public static CatPunchoutHandler constructFromPunchoutRequest(CatPunchoutRequestRecId _recId)
    {
        if(!_recId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        CatPunchoutRequest punchoutRequest = CatPunchoutRequest::find(_recId);
        if (!punchoutRequest.RecId)
        {
            throw error(Error::missingRecord(tableStr(CatPunchoutRequest)));
        }

        return CatPunchoutHandler::createInstance(punchoutRequest.requestType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Constructs a new instance of the <c>CatPunchoutHandler</c> class.
    /// </summary>
    /// <param name = "_entityType">
    ///   The <c>CatPunchoutEntityType</c> data of the punchout request.
    /// </param>
    /// <returns>
    ///   An instance of the <c>CatPunchoutHandler</c> class.
    /// </returns>
    protected static CatPunchoutHandler createInstance(CatPunchoutEntityType _entityType)
    {
        CatPunchoutHandler punchoutHandler;

        if (_entityType)
        {
            SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
            metadataCollection.SetManagedValue(enumstr(CatPunchoutEntityType), enum2Symbol(enumNum(CatPunchoutEntityType), enum2int(_entityType)));
            punchoutHandler = SysPluginFactory::Instance(identifierstr(Dynamics.AX.Application), classstr(CatPunchoutHandler), metadataCollection);
        }

        if (!punchoutHandler)
        {
            throw error(strfmt("@SYS19384", classstr(CatPunchoutHandler)));
        }

        return punchoutHandler;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPunchoutRequestAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Set the punchout request attributes.
    /// </summary>
    /// <param name = "_punchoutRequestAttributes">
    ///   The <c>CatPunchoutRequestAttributes</c> data type which links the child classes to this one.
    /// </param>
    public void setPunchoutRequestAttributes(CatPunchoutRequestAttributes _punchoutRequestAttributes)
    {
        this.punchoutRequestAttributes = _punchoutRequestAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getErrorMessage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get error messages logged by the <c>CatPunchoutHandler</c> instance.
    /// </summary>
    /// <returns>
    /// The List containing error messages.
    /// </returns>
    /// <remarks>
    /// Sub types of the <c>CatPunchoutHandler</c> class can override this method.
    /// </remarks>
    public List getErrorMessage()
    {
        return errorMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logErrorAndThrow</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Log error and throw exception.
    /// </summary>
    /// <param name = "_exceptionMessage">
    ///  The error message.
    /// </param>
    protected void logErrorAndThrow(str _exceptionMessage)
    {
        errorMessage.addEnd(_exceptionMessage);
        throw Exception::Error;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printErrorMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Print the logged error messages.
    /// </summary>
    public void printErrorMessages()
    {
        List errorMessages = this.getErrorMessage();

        if (!errorMessages.empty())
        {
            setprefix("@SCM:PunchOutValidationResult");

            ListEnumerator errorMessagesEnumerator = errorMessages.getEnumerator();
            while (errorMessagesEnumerator.moveNext())
            {
                error(errorMessagesEnumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>startPunchout</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Initiates punchout to the external catalog site.
    /// </summary>
    /// <param name = "_catalog">
    /// An instance of the <c>CatExternalCatalogName</c> data type.
    /// </param>
    /// <param name = "_isValidatingSettings">
    /// Indicates whether punchout is for validating catalog settings.
    /// </param>
    /// <returns>
    /// true if punchout succeeded; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Expired punchout requests are discarded prior to the current punchout.
    /// </remarks>
    public boolean startPunchout(CatExternalCatalogName _catalog, boolean _isValidatingSettings = false)
    {
        CatPunchoutRequest::discardExpiredPunchoutRequests();

        boolean punchoutSucceeded = false;

        CatExternalCatalog externalCatalog = CatExternalCatalog::find(_catalog);

        if (_isValidatingSettings)
        {
            if(Box::okCancel(this.getUserMessage(externalCatalog.RecId, _isValidatingSettings), DialogButton::Cancel, "@SYS12529") == DialogButton::Ok)
            {
                System.Exception exception;
                
                using (var activityContext = this.instrumentationLogger().calculateActivities().startPunchoutValidation())
                {
                    try
                    {
                        if (!externalCatalog || (!isValidationPunchout && externalCatalog.State == CatExternalCatalogState::InActive))
                        {
                            this.logErrorAndThrow(Error::missingRecord(tableStr(CatExternalCatalog)));
                        }
            
                        if (!isValidationPunchout)
                        {
                            this.checkPunchoutRequestAttributes();
                        }
            
                        this.punchout(externalCatalog);
                        punchoutSucceeded = true;
                    }
                    catch(exception)
                    {
                        this.logErrorAndThrow("@SCM:CanNotNavigateToTheExternalCatalogSite");
                    }
                }
            }
        }
        else
        {
            if (CatEnableContinueDialogHandle::continueCancel(this.getUserMessage(externalCatalog.RecId, _isValidatingSettings), DialogButton::Cancel, "@SYS12529") == DialogButton::Yes)
            {
                System.Exception exception;

                using (var activityContext = this.instrumentationLogger().calculateActivities().startPunchoutNoValidation())
                {
                    try
                    {
                        if (!externalCatalog || (!isValidationPunchout && externalCatalog.State == CatExternalCatalogState::InActive))
                        {
                            this.logErrorAndThrow(Error::missingRecord(tableStr(CatExternalCatalog)));
                        }

                        if (!isValidationPunchout)
                        {
                            this.checkPunchoutRequestAttributes();
                        }

                        this.punchout(externalCatalog);
                        punchoutSucceeded = true;
                    }
                    catch(exception)
                    {
                        this.logErrorAndThrow("@SCM:CanNotNavigateToTheExternalCatalogSite");
                    }
                }
            }
        }

        return punchoutSucceeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserMessage</Name>
				<Source><![CDATA[
    private str getUserMessage(CatExternalCatalogRecId _catalogRecId, boolean _isValidatingSettings)
    {
        str msg = '';

        if (!_isValidatingSettings)
        {
            msg = "@SCM:SelectContinueBeRedirectedToExternalSite";

            boolean userEmailIsShared = this.checkIfUserEmailOrNameIsShared(_catalogRecId, CatCXMLExtrinsicValue::UserEmail);
            boolean userNameIsShared = this.checkIfUserEmailOrNameIsShared(_catalogRecId, CatCXMLExtrinsicValue::UserName);

            if (userEmailIsShared && userNameIsShared)
            {
                msg = strFmt("@SCM:SelectContinueYourEmailAndUserNameWillBeSharedToExternalSite", strLwr(enum2Str(CatCXMLExtrinsicValue::UserEmail)), strLwr(enum2Str(CatCXMLExtrinsicValue::UserName)));
            }
            else if (userEmailIsShared)
            {
                msg = strFmt("@SCM:SelectContinueYourEmailOrUserNameWillBeSharedToExternalSite", strLwr(enum2Str(CatCXMLExtrinsicValue::UserEmail)));
            }
            else if (userNameIsShared)
            {
                msg = strFmt("@SCM:SelectContinueYourEmailOrUserNameWillBeSharedToExternalSite", strLwr(enum2Str(CatCXMLExtrinsicValue::UserName)));
            }
        }
        else
        {
            msg = "@SCM:ValidatingPunchoutSettings";
        }

        return msg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfUserEmailOrNameIsShared</Name>
				<Source><![CDATA[
    private boolean checkIfUserEmailOrNameIsShared(CatExternalCatalogRecId _catalogRecId, CatCXMLExtrinsicValue _catCXMLExtrinsicValue)
    {
        CatCXMLExtrinsic catCXMLExtrinsic;
        CatExternalMessageFormat catExternalMessageFormat;

        unchecked(Uncheck::TableSecurityPermission)
        {
            select firstonly catCXMLExtrinsic
                where catCXMLExtrinsic.Value == _catCXMLExtrinsicValue
                exists join catExternalMessageFormat
                    where catExternalMessageFormat.RecId == catCXMLExtrinsic.MessageFormat
                        && catExternalMessageFormat.ExternalCatalog == _catalogRecId;
        }
        return catCXMLExtrinsic.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>punchout</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Execute punchout to the external catalog site.
    /// </summary>
    /// <param name = "_catalog">
    ///   An instance of the <c>CatExternalCatalog</c> data type.
    /// </param>
    protected abstract void punchout(CatExternalCatalog _catalog)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>discardPunchoutRequest</Name>
				<Source><![CDATA[
    /// <summary>
    /// Discards punchout request and related punchout session data.
    /// </summary>
    /// <param name = "_recId">
    /// A <c>CatPunchoutRequestRecId</c> of the <c>CatPunchoutRequest</c> table.
    /// </param>
    public abstract void discardPunchoutRequest(CatPunchoutRequestRecId _recId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPunchoutRequestAttributes</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Validates if the punchout request attributes has values for all required fields.
    /// </summary>
    public void checkPunchoutRequestAttributes()
    {
        if (!this.punchoutRequestAttributes)
        {
            using (var activityContext = this.instrumentationLogger().calculateActivities().writeMissingPunchoutRequestAttribute(classStr(CatPunchoutRequestAttributes)))
            {
                this.logErrorAndThrow(Error::missingRecord(classStr(CatPunchoutRequestAttributes)));
            }
        }

        if (!this.punchoutRequestAttributes.getPurchReqTable())
        {
            using (var activityContext = this.instrumentationLogger().calculateActivities().writeMissingPunchoutRequestAttribute(tableStr(PurchReqTable)))
            {
                this.logErrorAndThrow(Error::missingRecord(tableStr(PurchReqTable)));
            }
        }

        if (!this.punchoutRequestAttributes.getExternalCatalog())
        {
            using (var activityContext = this.instrumentationLogger().calculateActivities().writeMissingPunchoutRequestAttribute(tableStr(CatExternalCatalog)))
            {
                this.logErrorAndThrow(Error::missingRecord(tableStr(CatExternalCatalog)));
            }
        }

        CatExternalCatalogPolicyBasedFields externalCatalogPolicyBasedFields = this.punchoutRequestAttributes.getExternalCatalogPolicyBasedFields();

        if (!externalCatalogPolicyBasedFields.Originator)
        {
            using (var activityContext = this.instrumentationLogger().calculateActivities().writeMissingPunchoutRequestAttribute(fieldStr(CatExternalCatalogPolicyBasedFields, Originator)))
            {
                this.logErrorAndThrow(Error::missingRecord(fieldStr(CatExternalCatalogPolicyBasedFields, Originator)));
            }
        }

        if (!externalCatalogPolicyBasedFields.Requisitioner)
        {
            using (var activityContext = this.instrumentationLogger().calculateActivities().writeMissingPunchoutRequestAttribute(fieldStr(CatExternalCatalogPolicyBasedFields, Requisitioner)))
            {
                this.logErrorAndThrow(Error::missingRecord(fieldStr(CatExternalCatalogPolicyBasedFields, Requisitioner)));
            }
        }

        if (!externalCatalogPolicyBasedFields.BuyingLegalEntity)
        {
            using (var activityContext = this.instrumentationLogger().calculateActivities().writeMissingPunchoutRequestAttribute(fieldStr(CatExternalCatalogPolicyBasedFields, BuyingLegalEntity)))
            {
                this.logErrorAndThrow(Error::missingRecord(fieldStr(CatExternalCatalogPolicyBasedFields, BuyingLegalEntity)));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSecureURL</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get secure absolute URI of the URL, and throw error if not Https.
    /// </summary>
    /// <param name = "_url">The URL path as a string.</param>
    /// <returns>The absolute Url string; otherwise throw error if URL is not Https.</returns>
    protected URL getSecureURL(str _url)
    {
        var uri = new System.Uri(_url);
        if (!uri.Scheme.Equals(strLwr(System.Uri::UriSchemeHttps)))
        {
            this.logErrorAndThrow(strFmt("@SCM:OnlyHttpsSupported", uri.AbsoluteUri));
        }
        return uri.AbsoluteUri;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private CatCXMLInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = CatCXMLInstrumentationLogger::createLogger(this.GetType().Name);
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>