<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInvoiceJourExportSalesVATOut</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustInvoiceJourExportSalesVATOut</c> class calculates domestic VAT-Out values for export
/// sales.
/// </summary>
/// <remarks>
/// The <c>CustInvoiceJourExportSalesVATOut</c> class extends the <c>CustInvoiceJourExportSalesVAT</c>
/// class.
/// </remarks>
public class CustInvoiceJourExportSalesVATOut extends CustInvoiceJourExportSalesVAT
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createExportSalesDomesticTaxVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ExportSalesInvoiceDomesticTaxVoucher</c> record with the specified journal number and
    /// voucher.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher that will be used.
    /// </param>
    /// <returns>
    /// A <c>ExportSalesInvoiceDomesticTaxVoucher</c> record with the specified journal number and voucher.
    /// </returns>
    protected ExportSalesInvoiceDomesticTaxVoucher createExportSalesDomesticTaxVoucher(LedgerJournalId _journalNum, Voucher _voucher)
    {
        ExportSalesInvoiceDomesticTaxVoucher exportSalesInvoiceDomesticTaxVoucher;

        exportSalesInvoiceDomesticTaxVoucher = super(_journalNum, _voucher);
        exportSalesInvoiceDomesticTaxVoucher.ReferenceDomesticSalesTaxVoucher = ExportSalesInvoiceDomesticTaxVoucher::findDomesticSalesTaxVoucher(exportSalesInvoice.RecId, true).RecId;
        exportSalesInvoiceDomesticTaxVoucher.insert();

        return exportSalesInvoiceDomesticTaxVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLinesForExportSalesVAT</Name>
				<Source><![CDATA[
    protected boolean createJournalLinesForExportSalesVAT(LedgerJournalTable _ledgerJournalTable, Voucher _voucher)
    {
        LedgerJournalTrans                      ledgerJournalTrans;
        TaxTrans                                taxTrans;
        ExportSalesInvoiceDomesticTaxVoucher    exportSalesInvoiceDomesticSalesTaxVoucher;
        LineNum                                 lineNum;
        boolean                                 areLinesCreated;
        TaxTrans_W                              taxTrans_W;

        lineNum = LedgerJournalTrans::lastLineNum(_ledgerJournalTable.JournalNum);

        while select RecId from exportSalesInvoiceDomesticSalesTaxVoucher
                where exportSalesInvoiceDomesticSalesTaxVoucher.ExportSalesInvoice == exportSalesInvoice.RecId
                    && exportSalesInvoiceDomesticSalesTaxVoucher.ReferenceDomesticSalesTaxVoucher == 0
                    && exportSalesInvoiceDomesticSalesTaxVoucher.IsPosted == NoYes::Yes
            join TaxCode, SourceBaseAmountCur, SourceTaxAmountCur from taxTrans
                where taxTrans.Voucher == exportSalesInvoiceDomesticSalesTaxVoucher.Voucher
                    && taxTrans.TransDate == exportSalesInvoiceDomesticSalesTaxVoucher.PostingDate
                    && (!TaxExportSalesVATOutSkipTaxTransGeneratedByBankExchangeRateFlight::instance().isEnabled() || taxTrans.SourceTaxAmountCur != 0)
            outer join CustVendName_PL, VATNum_PL, Addressing_PL from taxTrans_W
                where taxTrans_W.TaxTrans == taxTrans.RecId
        {
            ledgerJournalTrans = this.initializeLedgerJournalTrans(_ledgerJournalTable.JournalNum, _voucher, taxTrans.TaxCode);

            ledgerJournalTrans.CustVendName_PL = taxTrans_W.CustVendName_PL;
            ledgerJournalTrans.Addressing_PL   = taxTrans_W.Addressing_PL;

            ledgerJournalTrans.VATNumJournal   = taxTrans_W.VATNum_PL;
            LedgerJournalTransTaxExtension taxExtension = ledgerJournalTrans.ledgerJournalTransTaxExtension();
            taxExtension.VATNumRecId           = taxTrans.PartyTaxId;
            taxExtension.VATNumTableType       = TaxExemptNumberSourceType::TaxRegistration;
            ledgerJournalTrans.packExtensionTable(taxExtension);

            ledgerJournalTrans.TaxCode         = taxTrans.TaxCode;
            ledgerJournalTrans.TaxBase_W       = taxTrans.SourceBaseAmountCur;

            if (taxTrans.SourceTaxAmountCur < 0)
            {
                ledgerJournalTrans.AmountCurCredit = 0;
                ledgerJournalTrans.AmountCurDebit  = abs(taxTrans.SourceTaxAmountCur);
            }
            else
            {
                ledgerJournalTrans.AmountCurCredit = abs(taxTrans.SourceTaxAmountCur);
                ledgerJournalTrans.AmountCurDebit  = 0;
            }

            ledgerJournalTrans.AmountCurCredit = CurrencyExchangeHelper::amount(ledgerJournalTrans.AmountCurCredit, ledgerJournalTrans.CurrencyCode);
            ledgerJournalTrans.AmountCurDebit  = CurrencyExchangeHelper::amount(ledgerJournalTrans.AmountCurDebit, ledgerJournalTrans.CurrencyCode);

            if (ledgerJournalTrans.AmountCurCredit || ledgerJournalTrans.AmountCurDebit)
            {
                lineNum ++;
                ledgerJournalTrans.LineNum = lineNum;
                ledgerJournalTrans.insert();
                areLinesCreated = true;
            }
            else
            {
                throw error("@GLS110445");
            }
        }

        if (areLinesCreated)
        {
            info(strfmt("@GLS110219", _ledgerJournalTable.JournalNum));
        }

        return areLinesCreated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>LedgerJournalTrans</c> record with the specified journal number, voucher, and tax
    /// code.
    /// </summary>
    /// <param name="_journalNum">
    /// The journal number.
    /// </param>
    /// <param name="_voucher">
    /// The voucher value.
    /// </param>
    /// <param name="_taxCode">
    /// The tax code value.
    /// </param>
    /// <returns>
    /// A <c>LedgerJournalTrans</c> record with the specified journal number, voucher, and tax code.
    /// </returns>
    /// <remarks>
    /// This method initializes a <c>LedgerJournalTrans</c> record. It does not insert the record to the
    /// <c>LedgerJournalTrans</c> table.
    /// </remarks>
    protected LedgerJournalTrans initializeLedgerJournalTrans(LedgerJournalId _journalNum, Voucher _voucher, TaxCode _taxCode)
    {
        LedgerJournalTrans ledgerJournalTrans;

        ledgerJournalTrans = super(_journalNum, _voucher, _taxCode);

        ledgerJournalTrans.VatDueDate_W = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>CustInvoiceJourExportSalesVATOut</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>CustInvoiceJourExportSalesVATOut</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustInvoiceJourExportSalesVATOut construct()
    {
        CustInvoiceJourExportSalesVATOut custInvoiceJourExportSalesVATOut;

        custInvoiceJourExportSalesVATOut = new CustInvoiceJourExportSalesVATOut();

        return custInvoiceJourExportSalesVATOut;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>