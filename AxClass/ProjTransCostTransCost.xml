<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTransCostTransCost</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjTransCostTransCost extends ProjTransCostTrans
{
    ProjCostTransCost   projCostTransCost;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>costPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the cost price for this transaction.
    /// </summary>
    /// <returns>
    /// The cost price for this transaction.
    /// </returns>
    public CostPrice costPrice()
    {
        return projCostTransCost.CostPriceCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return  projCostTransCost.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fundingSource</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId fundingSource()
    {
        return projCostTransCost.FundingSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerCostAmountMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the cost amount to be posted to the general ledger.
    /// </summary>
    /// <returns>
    /// The cost amount to post to the general ledger.
    /// </returns>
    public AmountMST ledgerCostAmountMST()
    {
        return projCostTransCost.CostAmountLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerStatusCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ledger status for this transaction.
    /// </summary>
    /// <returns>
    /// A <c>ProjLedgerStatus</c> enumeration value.
    /// </returns>
    public ProjLedgerStatus ledgerStatusCost()
    {
        return projCostTransCost.LedgerStatusCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether budgetary control is enabled.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean mustHandleBudget()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustHandleForecast</Name>
				<Source><![CDATA[
    public boolean mustHandleForecast()
    {
        if (this.qty()<0)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(ProjCostTrans _projCostTrans, ProjCostTransCost _projCostTransCost)
    {
        projCostTransCost = _projCostTransCost;

        super(_projCostTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID for this transaction.
    /// </summary>
    /// <returns>
    /// The record ID for this transaction.
    /// </returns>
    public recId recId()
    {
        return projCostTransCost.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for this transaction.
    /// </summary>
    /// <returns>
    /// The table ID for this transaction.
    /// </returns>
    public tableId tableId()
    {
        return tablename2id(tablestr(ProjCostTransCost));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in the transaction currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public  Amount transCost()
    {
        return projCostTransCost.LineAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transCostMST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the total cost of this transaction in company currency.
    /// </summary>
    /// <returns>
    /// The total cost of this transaction.
    /// </returns>
    public AmountMST transCostMST()
    {
        return CurrencyExchangeHelper::amount(this.qty() * projCostTransCost.CostPrice, this.currencyIdCost());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transStatus</Name>
				<Source><![CDATA[
    public ProjTransStatus transStatus()
    {
        return projCostTransCost.TransStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTurnover</Name>
				<Source><![CDATA[
    public AmountCur transTurnover()
    {
        return 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wipPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the start date of the estimate period for this transaction.
    /// </summary>
    /// <returns>
    /// The start date of the estimate period for this transaction.
    /// </returns>
    public ProjPeriodFromWIP wipPeriod()
    {
        return projCostTransCost.wipPeriod;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>