<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementAccountingViewBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementAccountingViewBuilder</c> class builds the settlement accounting view snapshot.
/// </summary>
public class SettlementAccountingViewBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAccountingView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an accounting view for the given settlement snapshot.
    /// </summary>
    /// <param name = "_voucherTmp">The distinct group of vouchers to build accounting for.</param>
    /// <returns>The new <c>SettlementAccountingView</c> reference.</returns>
    public SettlementAccountingView createAccountingView(SettlementViewVoucherTmp _voucherTmp)
    {
        SettlementAccountingView settlementAccountingView;

        this.findRelatedVouchers(_voucherTmp);
        this.populateAccountingViewFromVoucher(settlementAccountingView, _voucherTmp);

        return settlementAccountingView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedVouchers</Name>
				<Source><![CDATA[
    private void findRelatedVouchers(SettlementViewVoucherTmp _voucherTmp)
    {
        LedgerTransVoucherLink voucherLinkByGroup;
        LedgerTransVoucherLink voucherLinkByVoucher;
        SettlementViewVoucherTmp voucherTmpExclusion;

        voucherTmpExclusion.linkPhysicalTableInstance(_voucherTmp);

        // For the given set of vouchers, find any related vouchers by voucher group id
        // excluding the given voucher itself.
        // This query cannot be set-based since crosscompany is not supported for set-based inserts.
        while select crosscompany voucherLinkByGroup
            exists join voucherLinkByVoucher
                where voucherLinkByGroup.VoucherGroupId == voucherLinkByVoucher.VoucherGroupId
            join voucherTmpExclusion
                where voucherLinkByVoucher.Voucher == voucherTmpExclusion.Voucher
                    && voucherLinkByVoucher.DataAreaId == voucherTmpExclusion.VoucherDataAreaId
                    && voucherLinkByVoucher.TransDate == voucherTmpExclusion.TransDate
            notexists join _voucherTmp
                where _voucherTmp.Voucher == voucherLinkByGroup.Voucher
                    && _voucherTmp.VoucherDataAreaId == voucherLinkByGroup.DataAreaId
                    && _voucherTmp.TransDate == voucherLinkByGroup.TransDate
        {
            _voucherTmp.Voucher = voucherLinkByGroup.Voucher;
            _voucherTmp.VoucherDataAreaId = voucherLinkByGroup.DataAreaId;
            _voucherTmp.TransDate = voucherLinkByGroup.TransDate;

            _voucherTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateAccountingViewFromVoucher</Name>
				<Source><![CDATA[
    private void populateAccountingViewFromVoucher(SettlementAccountingView _settlementAccountingView, SettlementViewVoucherTmp _voucherTmp)
    {
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;

        insert_recordset _settlementAccountingView
            (Voucher,
            VoucherDataAreaId,
            TransDate,
            JournalNum,
            AccountingCurrencyAmount,
            ReportingCurrencyAmount,
            TransactionCurrencyAmount,
            TransactionCurrencyCode,
            LedgerAccount,
            PostingType,
            Description,
            LedgerDimension)
        select voucher, VoucherDataAreaId, TransDate from _voucherTmp
            join subledgerVoucherGeneralJournalEntry
                where _voucherTmp.Voucher == subledgerVoucherGeneralJournalEntry.Voucher
                    && _voucherTmp.VoucherDataAreaId == subledgerVoucherGeneralJournalEntry.VoucherDataAreaId
                    && _voucherTmp.TransDate == subledgerVoucherGeneralJournalEntry.AccountingDate
            join JournalNumber from generalJournalEntry
                where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId
            join AccountingCurrencyAmount, ReportingCurrencyAmount, TransactionCurrencyAmount, TransactionCurrencyCode,
                LedgerAccount, PostingType, Text, LedgerDimension from generalJournalAccountEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new accounting view builder.
    /// </summary>
    /// <returns>The new accounting view builder.</returns>
    public static SettlementAccountingViewBuilder construct()
    {
        SettlementAccountingViewBuilder settlementAccountingViewBuilder = new SettlementAccountingViewBuilder();

        return settlementAccountingViewBuilder;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>