<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPeriodCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjPeriodCreate extends RunBase
{
    ProjPeriodTable projPeriodTable;
    ProjPeriodLine  projPeriodLine;
    ProjPeriodEmpl  projPeriodEmpl;

    ProjPeriodTimesheetWeek projPeriodTimesheetWeek;

    DialogField     dialogCreateTimesheetPeriod;
    NoYes           createTimesheetPeriod;

    DialogField     dialogStartOfWeek;
    WeekDays        startOfWeek;

    NoYes           updateTimesheetPeriods;

    date            loopDate;

    NoYes           createEmplPeriod;       // Used in Bm
    ProjPeriodFrom  startDate;
    ProjPeriodTo    stopDate;

    NoYes           autoSplitWeek;
    ProjPeriodId    projPeriodId;
    Periods         periodQty;
    ResourceRecId   resourceRecId;

    DialogField     dialogPeriodStartDate;
    DialogField     dialogPeriodToDate;
    DialogField     dialogCreateResource;
    DialogField     dialogPeriodQty;
    DialogField     dialogPeriodUnit;
    DialogGroup     dialogPeriodLengthGroup;

    DialogGroup     dialogPeriodFreqGroup;

    DialogField     dialogTimesheetPeriodUnit;

    DialogField     dialogNormBillable;
    DialogField     dialogNormEfficiency;
    DialogGroup     dialogUtilNormsGroup;

    RealBase        normBillable;
    RealBase        normEfficiency;

    Integer         progressTotal;
    Integer         progressCounter;
 
	boolean CEIntegrationEnabled = ProjProjectOperationsIntegrationFeatureHelper::isFeatureEnabled();

    #define.CurrentVersion(6)
    #localmacro.CurrentList
        createEmplPeriod,
        projPeriodId,
        periodQty,
        resourceRecId,
        normBillable,
        normEfficiency,
        startDate,
        stopDate,
        progressTotal,
        progressCounter,
        createTimesheetPeriod,
        updateTimesheetPeriods,
        autoSplitWeek,
        startOfWeek
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcStopDate</Name>
				<Source><![CDATA[
    protected void calcStopDate()
    {
        #define.7(7)

        int counter;

        switch (this.timeFrequency())
        {
            case PerDayWeekMthQtYr::Day :
                stopDate = startDate+periodQty-1;
                break;

            case PerDayWeekMthQtYr::Week :
                stopDate = startDate + (#7 * (periodQty-1));
                break;

            case PerDayWeekMthQtYr::Month :
                counter  = 1;
                while (counter < periodQty)
                {
                    stopDate = nextMth(stopDate);
                    counter++;
                }
                stopDate = endmth(stopDate);
                break;

            case PerDayWeekMthQtYr::Quarter :
                for (counter=1;counter < periodQty; counter++)
                {
                    stopDate = nextQtr(stopDate);
                }
                break;

            case PerDayWeekMthQtYr::Year :
                for (counter=1;counter <= periodQty-1; counter++)
                {
                    stopDate = nextYr(stopDate);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeClass</Name>
				<Source><![CDATA[
    protected void executeClass()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTimesheetPeriod</Name>
				<Source><![CDATA[
    protected boolean isTimesheetPeriod()
    {
        return ProjPeriodTable::find(projPeriodId).isTimesheetPeriod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastDateInPeriod</Name>
				<Source><![CDATA[
    protected ProjPeriodTo lastDateInPeriod(Common _common)
    {
        ProjPeriodFrom     periodFrom;
        ProjPeriodTo       lastDateInPeriod;
        ProjPeriodId       resourceProjPeriodId;

        lastDateInPeriod = dateNull();

        switch (_common.TableId)
        {
            case tableNum(ProjPeriodEmpl) :
                if (resourceRecId)
                {
                    periodFrom = (select firstonly projPeriodLine where projPeriodLine.PeriodId == projPeriodId
                                                                     && projPeriodLine.PeriodFrom >= startDate
                                                                     && projPeriodLine.PeriodTo <= stopDate).PeriodFrom;
                    resourceProjPeriodId = ResourceFacade::getPeriodId(this.parmResource());
                    lastDateInPeriod   = ProjPeriodLine::find(resourceProjPeriodId, periodFrom).PeriodTo+1;
                }
                else
                {
                    lastDateInPeriod     = (select firstonly projPeriodLine where projPeriodLine.PeriodId == projPeriodId
                                                                               && projPeriodLine.PeriodTo  > dateNull()).PeriodFrom;
                }
                break;

            case tableNum(ProjPeriodLine) :
                lastDateInPeriod     = (select reverse projPeriodLine where projPeriodLine.PeriodId   == projPeriodId
                                                                         && projPeriodLine.PeriodFrom <= maxDate()).PeriodTo;
                break;

            case tableNum(ProjPeriodTimesheetWeek) :
                lastDateInPeriod     = (select reverse projPeriodTimesheetWeek where projPeriodTimesheetWeek.PeriodId   == projPeriodId
                                                                                && projPeriodTimesheetWeek.PeriodFrom <= maxDate()).PeriodTo;

                if (!lastDateInPeriod)
                {
                    lastDateInPeriod     = (select firstonly projPeriodLine where projPeriodLine.PeriodId == projPeriodId).PeriodFrom;
                }
                break;
        }

        if (!lastDateInPeriod)
        {
            lastDateInPeriod = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        return lastDateInPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAutoSplitWeek</Name>
				<Source><![CDATA[
    public NoYes parmAutoSplitWeek(NoYes _autoSplitWeek = autoSplitWeek)
    {
        autoSplitWeek = _autoSplitWeek;

        return autoSplitWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateEmplPeriod</Name>
				<Source><![CDATA[
    public NoYes parmCreateEmplPeriod(NoYes _createEmplPeriod = createEmplPeriod)
    {
        createEmplPeriod   = _createEmplPeriod;

        return createEmplPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateTimesheetPeriod</Name>
				<Source><![CDATA[
    public NoYes parmCreateTimesheetPeriod(NoYes _createTimesheetPeriod = createTimesheetPeriod)
    {
        createTimesheetPeriod   = _createTimesheetPeriod;

        return createTimesheetPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNormBillable</Name>
				<Source><![CDATA[
    public RealBase parmNormBillable(RealBase _normBillable = normBillable)
    {
        normBillable = _normBillable;

        return normBillable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNormEfficiency</Name>
				<Source><![CDATA[
    public RealBase parmNormEfficiency(RealBase _normEfficiency = normEfficiency)
    {
        normEfficiency = _normEfficiency;

        return normEfficiency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPeriodQty</Name>
				<Source><![CDATA[
    public Periods parmPeriodQty(Periods _periodQty = periodQty)
    {
        periodQty   = _periodQty;

        return periodQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjPeriodId</Name>
				<Source><![CDATA[
    public ProjPeriodId parmProjPeriodId(ProjPeriodId _projPeriodId = projPeriodId)
    {
        projPeriodId     = _projPeriodId;

        return projPeriodId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>resourceRecId</c> variable.
    /// </summary>
    /// <param name="_resourceRecId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>resourceRecId</c> variable.
    /// </returns>
    public ResourceRecId parmResource(ResourceRecId _resourceRecId = resourceRecId)
    {
        resourceRecId = _resourceRecId;

        return resourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDate</Name>
				<Source><![CDATA[
    public ProjPeriodFrom  parmStartDate(ProjPeriodFrom _startDate = startDate)
    {
        startDate   = _startDate;

        return startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartOfWeek</Name>
				<Source><![CDATA[
    public WeekDays parmStartOfWeek(WeekDays _startOfWeek = startOfWeek)
    {
        startOfWeek = _startOfWeek;

        return startOfWeek;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStopDate</Name>
				<Source><![CDATA[
    public ProjPeriodTo parmStopDate(ProjPeriodTo _stopDate = stopDate)
    {
        stopDate   = _stopDate;

        return stopDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateTimesheetPeriods</Name>
				<Source><![CDATA[
    public NoYes parmUpdateTimesheetPeriods(NoYes _updateTimesheetPeriods = updateTimesheetPeriods)
    {
        updateTimesheetPeriods   = _updateTimesheetPeriods;

        return updateTimesheetPeriods;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodsExist</Name>
				<Source><![CDATA[
    protected boolean periodsExist()
    {
        return ProjPeriodTable::find(projPeriodId).periodsExist();
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTotal</Name>
				<Source><![CDATA[
    protected Integer progressTotal(PerDayWeekMthQtYr _timeFrequency)
    {
        Integer retval;
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        FiscalCalendarYear      fiscalCalendarYear;
        RecId                   calendarRecId;

        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        switch (_timeFrequency)
        {
            case PerDayWeekMthQtYr::Period :
            while select RecId from fiscalCalendarYear where fiscalCalendarYear.FiscalCalendar == calendarRecId
                {
                    while select count(RecId) from fiscalCalendarPeriod
                    where fiscalCalendarPeriod.StartDate      >= startDate &&
                          fiscalCalendarPeriod.EndDate        <= stopDate  &&
                          fiscalCalendarPeriod.Type           == FiscalPeriodType::Operating &&
                          fiscalCalendarPeriod.FiscalCalendarYear == fiscalCalendarYear.RecId
                    {
                        retval += any2int(fiscalCalendarPeriod.RecId);
                    }
                }
                break;

            case PerDayWeekMthQtYr::Day    :
                retval = (stopDate-startDate);
                break;

            case PerDayWeekMthQtYr::Week   :
                retval = real2int(((stopDate-startDate) / 7));
                break;

            case PerDayWeekMthQtYr::Month  :
                retval = real2int(((stopDate-startDate) / 30));
                break;

            case PerDayWeekMthQtYr::Quarter:
                retval = real2int(((stopDate-startDate) / 90));
                break;

            case PerDayWeekMthQtYr::Year   :
                retval = real2int(((stopDate-startDate) / 365));
                break;

            default:
                retval = 1;
        }

        return retval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTransText</Name>
				<Source><![CDATA[
    protected str progressTransText(TransDate _transDate)
    {
        return strFmt("@SYS50726", date2StrUsr(_transDate, DateFlags::FormatAll));
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdateTrans</Name>
				<Source><![CDATA[
    protected void progressUpdateTrans(TransDate _transDate)
    {
        progressCounter++;
        progress.setCount(progressCounter);
        progress.setText(this.progressTransText(_transDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPeriodDay</Name>
				<Source><![CDATA[
    protected void projPeriodDay()
    {
        loopDate = startDate;

        while (loopDate <= stopDate)
        {
            projPeriodLine.clear();
            projPeriodLine.PeriodId = projPeriodId;

            projPeriodLine.PeriodFrom = loopDate;
            projPeriodLine.PeriodTo   = loopDate;
            projPeriodLine.PeriodName = dayName(dayOfWk(loopDate));
            loopDate += 1;

            this.progressUpdateTrans(projPeriodLine.PeriodFrom);

            projPeriodLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPeriodMonth</Name>
				<Source><![CDATA[
    protected void projPeriodMonth()
    {
        loopDate = startDate - dayOfMth(startDate) + 1;

        while (loopDate <= stopDate)
        {
            projPeriodLine.clear();
            projPeriodLine.PeriodId   = projPeriodId;

            projPeriodLine.PeriodFrom = loopDate;
            projPeriodLine.PeriodTo   = endmth(loopDate);
            projPeriodLine.PeriodName = mthName(mthOfYr(loopDate));

            this.progressUpdateTrans(projPeriodLine.PeriodFrom);

            projPeriodLine.insert();

            loopDate = endmth(loopDate)  + 1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPeriodPeriod</Name>
				<Source><![CDATA[
    protected void projPeriodPeriod()
    {
        FiscalCalendarPeriod    fiscalCalendarPeriod;
        int                     loops;
        RecId                   calendarRecId;

        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        projPeriodLine  = projPeriodLine;

        while select StartDate, EndDate, Name from fiscalCalendarPeriod
        order by fiscalCalendarPeriod.StartDate
        where fiscalCalendarPeriod.FiscalCalendar == calendarRecId &&
              fiscalCalendarPeriod.StartDate      >= startDate &&
              fiscalCalendarPeriod.Type           == FiscalPeriodType::Operating
        {
            projPeriodLine.clear();
            projPeriodLine.PeriodId   = projPeriodId;

            projPeriodLine.PeriodFrom = fiscalCalendarPeriod.StartDate;
            projPeriodLine.PeriodTo   = fiscalCalendarPeriod.EndDate;
            projPeriodLine.PeriodName = fiscalCalendarPeriod.periodName();

            this.parmStopDate(fiscalCalendarPeriod.EndDate);

            this.progressUpdateTrans(projPeriodLine.PeriodFrom);

            projPeriodLine.insert();

            loopDate += 1;
            loops += 1;
            if (loops == periodQty)
            {
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPeriodQuarter</Name>
				<Source><![CDATA[
    protected void projPeriodQuarter()
    {
        loopDate = startDate - dayOfMth(startDate) + 1;

        while (mthOfYr(loopDate) mod 3 != 1)
        {
            loopDate = prevMth(loopDate);
        }

        while (loopDate <= stopDate)
        {
            projPeriodLine.clear();
            projPeriodLine.PeriodId   = projPeriodId;

            projPeriodLine.PeriodFrom = loopDate;
            projPeriodLine.PeriodTo   = nextQtr(loopDate) -1 ;
            projPeriodLine.PeriodName = strFmt("@SYS50119",date2Qtr(loopDate));
            loopDate = nextQtr(loopDate);

            this.progressUpdateTrans(projPeriodLine.PeriodFrom);

            projPeriodLine.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPeriodWeek</Name>
				<Source><![CDATA[
    protected void projPeriodWeek()
    {
        TransDate               nextPeriodStartDate,tmpNextPeriodStartDate;
        RecId                   calendarRecId;
        int                     calendarInterval, loopCount;
        container               weekParts;
        FiscalCalendarPeriod    fiscalCalendarPeriod;

        #define.7(7)
        #define.6(6)
        #define.5(5)
        #define.4(4)
        #define.3(3)
        #define.2(2)
        #define.1(1)

        void getNextPeriodStartDate(date _loopDate) // to assign the next period start date based on the loopdate
        {
            nextPeriodStartDate = FiscalCalendars::nextPeriodStartDateByDate(calendarRecId, _loopDate);

            if (!nextPeriodStartDate) // if the next period startdate does not exists assign stopDate+1, required when autosplitweek is enabled and calendarInterval is 1 month
            {
                nextPeriodStartDate = stopDate + #1;
            }
        }

        void insertRecord() // to insert the record to projPeriodLine table
        {
            if (!ProjPeriodLine::exist(projPeriodId, projPeriodLine.PeriodFrom)) //check whether the period is already exists in projPeriodLine table
            {
                if (LedgerFiscalCalendar::existDate(calendarRecId, projPeriodLine.PeriodFrom) && LedgerFiscalCalendar::existDate(calendarRecId, projPeriodLine.PeriodTo)) //check whether the start date and date exists in the fiscal calendar
                {
                    if ((projPeriodLine.PeriodTo >= projPeriodLine.PeriodFrom)) //check whether the periodTo is greater than or equal to periodFrom
                    {
                        projPeriodLine.insert();
                    }
                }
            }
        }

        calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        if ((isConfigurationkeyEnabled(configurationKeyNum(Project)))  &&
        (this.parmCreateTimesheetPeriod()==NoYes::Yes               ||
        this.isTimesheetPeriod()))
        {
            loopDate = TSPeriods::getStartOfWeekOffset(startOfWeek, startDate);
        }
        else
        {
            loopDate = startDate - dayOfWk(startDate) + #1;
        }

        nextPeriodStartDate = FiscalCalendars::nextPeriodStartDateByDate(calendarRecId, loopDate);
        tmpNextPeriodStartDate = FiscalCalendars::nextPeriodStartDateByDate(calendarRecId, nextPeriodStartDate);
        calendarInterval = (tmpNextPeriodStartDate - nextPeriodStartDate);

        if (!LedgerFiscalCalendar::existDate(calendarRecId, stopDate) || calendarInterval < 0) // if the stopdate does not exist in fiscal calendar then choose the closing period end date for the stopDate
        {
            select firstonly EndDate from fiscalCalendarPeriod
                order by StartDate desc
                where fiscalCalendarPeriod.FiscalCalendar == calendarRecId
                    && fiscalCalendarPeriod.StartDate >= startDate
                    && fiscalCalendarPeriod.Type == FiscalPeriodType::Closing;

            stopDate = fiscalCalendarPeriod.EndDate;
        }

        while (loopDate <= stopDate)
        {
            projPeriodLine.clear();
            projPeriodLine.PeriodId   = projPeriodId;
            getNextPeriodStartDate(loopDate);

            projPeriodLine.PeriodFrom = loopDate;
            projPeriodLine.PeriodTo   = loopDate + #6;
            projPeriodLine.PeriodName = strFmt("@SYS24734", wkOfYr(DateTimeUtil::getEndOfWeekDate(new xSession().preferredLocale(), loopDate)));

            if ((loopDate + #6) >=nextPeriodStartDate && autoSplitWeek)
            {
                projPeriodLine.PeriodTo = nextPeriodStartDate - #1;
                if(dayOfWk(loopDate) == #7)
                {
                    projPeriodLine.PeriodName = strFmt("@SYS190513",wkOfYr(loopDate + #1),#1);
                }
                else
                {
                    projPeriodLine.PeriodName = strFmt("@SYS190513",wkOfYr(loopDate),#1);
                }
                this.progressUpdateTrans(projPeriodLine.PeriodFrom);
                insertRecord();

                if(dayOfWk(loopDate) == #7)
                {
                    projPeriodLine.PeriodName = strFmt("@SYS190513",wkOfYr(loopDate + #1),#2);
                }
                else
                {
                    projPeriodLine.PeriodName = strFmt("@SYS190513",wkOfYr(loopDate),#2);
                }
                projPeriodLine.PeriodFrom = nextPeriodStartDate;
                getNextPeriodStartDate(nextPeriodStartDate);

                if (calendarInterval <= #3)
                {
                    switch (calendarInterval)
                    {
                        case #1:
                            weekParts = [#3, #4, #5, #6];
                            break;
                        case #2:
                            weekParts = [#3, #4];
                            break;
                        case #3:
                            weekParts = [#3];
                            break;
                    }

                    for (loopCount = #1; loopCount <= conLen(weekParts); loopCount++)
                    {
                        if (nextPeriodStartDate > (loopDate + #6)) //if the nextPeriodDate is greater than loopDate+6 then assign the PeridTo with loopDate+6
                        {
                            projPeriodLine.PeriodTo = loopDate + #6;
                        }
                        else
                        {
                            projPeriodLine.PeriodTo = nextPeriodStartDate - #1;
                        }
                        this.progressUpdateTrans(projPeriodLine.PeriodFrom);
                        insertRecord();

                        projPeriodLine.PeriodName = strFmt("@SYS190513",wkOfYr(loopDate),conPeek(weekParts,loopCount));
                        projPeriodLine.PeriodFrom = nextPeriodStartDate;
                        getNextPeriodStartDate(nextPeriodStartDate);
                    }
                }
            }
            projPeriodLine.PeriodTo = loopDate + #6;
            loopDate += #7;
            this.progressUpdateTrans(projPeriodLine.PeriodFrom);
            insertRecord();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projPeriodYear</Name>
				<Source><![CDATA[
    protected void projPeriodYear()
    {
        loopDate = startDate;

        while (loopDate <= stopDate)
        {
            projPeriodLine.clear();
            projPeriodLine.PeriodId    = projPeriodId;
            projPeriodLine.PeriodFrom  = loopDate;
            projPeriodLine.PeriodTo    = nextYr(loopDate) - 1;
            projPeriodLine.PeriodName  = strFmt("@SYS50120",year(loopDate));

            this.progressUpdateTrans(projPeriodLine.PeriodFrom);

            projPeriodLine.insert();

            loopDate = nextYr(loopDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>projUnlimited</Name>
				<Source><![CDATA[
    protected void projUnlimited()
    {
        projPeriodLine.PeriodId = projPeriodId;

        projPeriodLine.PeriodFrom = startDate;
        projPeriodLine.PeriodTo   = stopDate;
        projPeriodLine.PeriodName = "@SYS163";

        this.progressUpdateTrans(projPeriodLine.PeriodFrom);

        projPeriodLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourcePeriod</Name>
				<Source><![CDATA[
    protected void resourcePeriod()
    {
        RecId                       totalRec;
        ResourceLegalEntityView     resourceLegalEntity;
        ResourceSetup               resourceSetup;
        CompanyInfo currLE = CompanyInfo::findDataArea(curext());
        ProjPeriodTable             projPeriodTableLoc;

        select count(RecId)
            from resourceLegalEntity join resourceSetup
            where resourceLegalEntity.LegalEntity == currLE.RecId
                && resourceLegalEntity.Resource == resourceSetup.Resource
                && resourceSetup.Period == projPeriodTableLoc.RecId;

        totalRec = resourceLegalEntity.RecId;

        progress.setCaption("@Res:UpdatingResourcePeriods");
        progress.setTotal(totalRec);

        projPeriodTableLoc = ProjPeriodTable::find(projPeriodId);

        while select Resource/*, ValidFrom, ValidTo*/
            from resourceLegalEntity join resourceSetup
                where resourceLegalEntity.LegalEntity == currLE.RecId
                    && resourceLegalEntity.Resource == resourceSetup.Resource
                    && resourceSetup.Period == projPeriodTableLoc.RecId
        {
            progressCounter++;
            progress.setCount(progressCounter);
            progress.setText(strFmt("@Res:UpdatingResource", ResourceFacade::getID(resourceLegalEntity.Resource)));

            this.parmResource(resourceLegalEntity.Resource);

            startDate = min(this.lastDateInPeriod(projPeriodEmpl),this.parmStartDate());

            ProjPeriodEmpl::generatePeriods(projPeriodId,
                                        resourceLegalEntity.Resource,
                                        startDate,
                                        stopDate,
                                        normBillable,
                                        normEfficiency);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        progressCounter = 0;

        if (! this.validate())
        {
            throw error("@SYS21628");
        }

        try
        {
            ttsbegin;
            this.progressTotal(100);

            this.progressInit(strFmt("@SYS50725",projPeriodId),progressTotal,#AviUpdate);

            this.executeClass();

            ttscommit;
        }

        catch (Exception::Error)
        {
            throw error("@SYS21628");
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>timeFrequency</Name>
				<Source><![CDATA[
    protected PerDayWeekMthQtYr timeFrequency()
    {
        return ProjPeriodTable::find(projPeriodId).TimeFrequency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>timesheetFrequency</Name>
				<Source><![CDATA[
    protected TSPeriodFrequency timesheetFrequency()
    {
        return ProjPeriodTable::find(projPeriodId).TimesheetFrequency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        if (!this.parmProjPeriodId())
        {
            return checkFailed("@SYS53302");
        }

        if (!startDate)
        {
            return checkFailed("@SYS53303");
        }

        if (!stopDate)
        {
            return checkFailed("@SYS53304");
        }

        if (normBillable < 0 || normEfficiency < 0)
        {
            return checkFailed("@SYS102407");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static ProjPeriodCreate construct(Args _args)
    {
        ProjPeriodTable         projPeriod;
        ResourceRecId           resourceRecId;
        ProjPeriodCreate        projPeriodCreate;
        ProjPeriodId            projPeriodId;

        ProjPeriodTimesheetWeek projPeriodTimesheetWeek;

        if ( _args.parmEnumType()  && _args.parmEnumType() == enumNum(NoYes) )
        {
            switch (_args.parmEnum())
            {
                case NoYes::No :
                    projPeriod          = _args.record();
                    if (!projPeriod.isTimesheetPeriod())
                    {
                        projPeriodCreate    = ProjPeriodCreate::newProjPeriod();
                    }
                    else
                    {
                        projPeriodCreate    = ProjPeriodCreate::newProjPeriodTimesheet();
                        projPeriodCreate.parmUpdateTimesheetPeriods(NoYes::No);
                    }
                    projPeriodCreate.parmProjPeriodId(projPeriod.PeriodId);
                    break;

                case NoYes::Yes :
                    if (_args.dataset() == tableNum(ProjPeriodEmpl))
                    {
                        resourceRecId       = _args.caller().resource();
                        projPeriodCreate    = ProjPeriodCreate::newEmpl();
                        projPeriodCreate.parmResource(resourceRecId);

                        projPeriodId = ResourceFacade::getPeriodId(resourceRecId);

                        projPeriodCreate.parmProjPeriodId(projPeriodId);
                    }
                    else if (_args.dataset() == tableNum(ProjPeriodTimesheetWeek))
                    {
                        projPeriodTimesheetWeek = _args.record();
                        projPeriodCreate        = ProjPeriodCreate::newProjPeriodTimesheet();
                        projPeriodCreate.parmProjPeriodId(projPeriodTimesheetWeek.PeriodId);
                        projPeriodCreate.parmUpdateTimesheetPeriods(NoYes::Yes);
                    }
                    else
                    {
                        projPeriod          = _args.record();
                        projPeriodCreate    = ProjPeriodCreate::newEmpl();
                        projPeriodCreate.parmResource(resourceRecId);
                        projPeriodCreate.parmProjPeriodId(projPeriod.PeriodId);
                    }
                    break;
                default:
                    throw error(strFmt("@SYS22828","@SYS50118"));
            }
        }
        else
        {
            throw error(strFmt("@SYS22828","@SYS50118"));
        }

        return projPeriodCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription description()
    {
        return "@SYS50765";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    private static void main(Args _args)
    {
        ProjPeriodCreate    projPeriodCreate    = ProjPeriodCreate::construct(_args);

        if (projPeriodCreate.prompt())
        {
            projPeriodCreate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newEmpl</Name>
				<Source><![CDATA[
    private static ProjPeriodCreate newEmpl()
    {
        ProjPeriodCreate        projPeriodCreate;

        projPeriodCreate    = new ProjPeriodCreateEmpl();

        projPeriodCreate.getLast();

        return projPeriodCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjPeriod</Name>
				<Source><![CDATA[
    private static ProjPeriodCreate newProjPeriod()
    {
        ProjPeriodCreate        projPeriodCreate;

        projPeriodCreate    = new ProjPeriodCreatePeriod();

        projPeriodCreate.getLast();

        return projPeriodCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProjPeriodTimesheet</Name>
				<Source><![CDATA[
    private static ProjPeriodCreate newProjPeriodTimesheet()
    {
        ProjPeriodCreate        projPeriodCreate;

        projPeriodCreate    = new ProjPeriodCreateTimesheet();

        projPeriodCreate.getLast();

        return projPeriodCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUtilizationNormGroupInDialog</Name>
				<Source><![CDATA[
	/// <summary>
    /// Creates utilization norm control group in the provided dialog form.
    /// </summary>
    /// <param name = "_dialog">Dialog form object.</param>
    protected internal void createUtilizationNormGroupInDialog(DialogRunbase _dialog)
    {
        if (!CEIntegrationEnabled)
        {
            dialogUtilNormsGroup = _dialog.addGroup("@SYS102367"); //Utilization norm hours

            dialogNormBillable = _dialog.addFieldValue(extendedTypeStr(RealBase), normBillable, "@SYS102368"); //billable hours
            dialogNormBillable.helpText("@SYS102670");//Norm hours for billable calculation.
            dialogNormBillable.configurationKey(configurationKeyNum(Project));

            dialogNormEfficiency = _dialog.addFieldValue(extendedTypeStr(RealBase), normEfficiency, "@SYS102369"); //efficiency hours
            dialogNormEfficiency.helpText("@SYS102671");//Norm hours for efficiency calculation.
            dialogNormEfficiency.configurationKey(configurationKeyNum(Project));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNumberOfPeriodsControlInDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates number of periods control in the provided dialog form.
    /// </summary>
    /// <param name = "_dialog">Dialog form object.</param>
    protected internal void createNumberOfPeriodsControlInDialog(DialogRunbase _dialog)
    {
		 if (CEIntegrationEnabled)
		 {
             dialogPeriodQty = _dialog.addFieldValue(extendedTypeStr(Periods),periodQty,"@Proj:PeriodCreateDialogNumberOfPeriods","@SYS62103");
		 }
		 else
		 {
             dialogPeriodQty = _dialog.addFieldValue(extendedTypeStr(Periods),periodQty,"@SYS24393","@SYS62103");
		 }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createUpdateWorkerPeriodControlInDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates update worker period in the provided dialog form.
    /// </summary>
    /// <param name = "_dialog">Dialog form object.</param>
    protected internal void createUpdateWorkerPeriodControlInDialog(DialogRunbase _dialog)
    {
        if (!CEIntegrationEnabled)
        {
            dialogCreateResource = _dialog.addFieldValue(extendedTypeStr(ProjOptionEmployee),createEmplPeriod,"@SYS50721");
        }
	}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>