<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCheckVoucherDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerCheckVoucherDP</c> class is the report data provider class for the associated
///    <c>LedgerCheckVoucher</c> class.
/// </summary>
/// <remarks>
///    Provides the methods that are used by the <c>LedgerCheckVoucher</c> report.
/// </remarks>
[
    SRSReportParameterAttribute(classStr(LedgerCheckVoucherContract))
]
public class LedgerCheckVoucherDP extends SRSReportDataProviderBase
{
    Integer prevVoucher;
    Integer prevError;

    Name mask;
    Integer maskLength;
    Integer maskStart;
    Voucher fromVoucher;
    Voucher toVoucher;
    Voucher nextVoucher;

    Integer fromVoucherInt;
    Integer toVoucherInt;
    Integer nextVoucherInt;

    NumberSequenceCode   numberSequenceCode;
    NumberSequenceFormat maskSuffix;
    Counter numOfHoles;
    Counter numOfVoucher;
    Counter qty;

    Voucher fromVoucherLine;
    Voucher toVoucherLine;
    Name    numberSequenceTxt;

    str 10 tmpMark;
    str 30 tmpStatus;
    str 30 statusOk;
    str 30 statusError;
    str 10 markError;
    str 10 markOk;

    RecordSortedList numberSequenceList;

    TransDate fromDate;
    TransDate toDate;
    NumberSequenceCode numberSequence;
    LedgerCheckVoucherTmp ledgerCheckVoucherTmp;
    RecId recId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCustInvJour</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Searches the customer invoice journal for holes in the voucher series.
    /// </summary>
    /// <returns>
    ///    true if transactions are found; otherwise, false.
    /// </returns>
    private boolean checkCustInvJour()
    {
        Integer voucher;
        CustInvoiceJour custInvoiceJour;
        NumberSequenceTable numberSequenceTable;

        if (numberSequenceList.first(numberSequenceTable))
        {
            while (numberSequenceTable)
            {
                 /* Check the numbersequences for holes */
                if (!numberSequence || numberSequence == numberSequenceTable.NumberSequence)
                {
                    numberSequenceCode = numberSequenceTable.NumberSequence;
                    numberSequenceTxt = numberSequenceTable.Txt;

                    mask = numberSequenceTable.Format;
                    maskLength = strLen(numberSequenceTable.Format)-strLen(strRem(numberSequenceTable.Format,'#'));
                    maskSuffix = this.getMaskSuffix(mask);
                    fromVoucherInt = numberSequenceTable.Lowest;
                    toVoucherInt = numberSequenceTable.NextRec-1;
                    nextVoucherInt = numberSequenceTable.NextRec;

                    fromVoucher = NumberSeq::numInsertFormat(fromVoucherInt, numberSequenceTable.Format);
                    toVoucher = NumberSeq::numInsertFormat(toVoucherInt, numberSequenceTable.Format);
                    nextVoucher = NumberSeq::numInsertFormat(nextVoucherInt, numberSequenceTable.Format);

                    prevError = fromVoucherInt;
                    prevVoucher = fromVoucherInt -1;

                    numOfHoles = 0;
                    numOfVoucher = 0;

                    if (fromDate || toDate)
                    {
                        select minof(InvoiceId) from custInvoiceJour
                            where (!fromDate || custInvoiceJour.InvoiceDate >= fromDate)    &&
                                    (!toDate || custInvoiceJour.InvoiceDate <= toDate)      &&
                                    custInvoiceJour.InvoiceId >= NumberSeq::numInsertFormat(numberSequenceTable.Lowest,numberSequenceTable.Format) &&
                                    custInvoiceJour.InvoiceId < NumberSeq::numInsertFormat(numberSequenceTable.NextRec,numberSequenceTable.Format) &&
                                    custInvoiceJour.InvoiceId like maskSuffix;

                        fromVoucher = custInvoiceJour.InvoiceId;
                        if (!fromVoucher)
                        {
                            fromVoucherInt = 0;
                        }
                        else
                        {
                            if (fromDate)
                            {
                                fromVoucherInt = str2int(subStr(fromVoucher, maskStart,maskLength));
                            }
                            else
                            {
                                fromVoucher = NumberSeq::numInsertFormat(fromVoucherInt, numberSequenceTable.Format);
                            }
                        }

                        prevError = fromVoucherInt;
                        prevVoucher = fromVoucherInt -1;

                        select maxof(InvoiceId) from custInvoiceJour
                            where (!fromDate || custInvoiceJour.InvoiceDate >= fromDate)    &&
                                    (!toDate || custInvoiceJour.InvoiceDate <= toDate)      &&
                                    custInvoiceJour.InvoiceId >= NumberSeq::numInsertFormat(numberSequenceTable.Lowest, numberSequenceTable.Format) &&
                                    custInvoiceJour.InvoiceId < NumberSeq::numInsertFormat(numberSequenceTable.NextRec, numberSequenceTable.Format) &&
                                    custInvoiceJour.InvoiceId like maskSuffix;

                        toVoucher = custInvoiceJour.InvoiceId;
                        if (!toVoucher)
                        {
                            toVoucherInt = 0;
                        }
                        else
                        {
                            if (toDate)
                            {
                                toVoucherInt = str2int(subStr(toVoucher, maskStart, maskLength));
                            }
                            else
                            {
                                toVoucher = NumberSeq::numInsertFormat(toVoucherInt, numberSequenceTable.Format);
                            }
                        }
                        if (!toVoucher || toDate)
                        {
                            nextVoucherInt = toVoucherInt + 1;
                            nextVoucher = NumberSeq::numInsertFormat(nextVoucherInt, numberSequenceTable.Format);
                        }
                    }
                    this.insertLedgerCheckVouchersTmp(numberSequenceTable);

                    //search the CustInvoiceJournal for holes in the voucherseries
                    while select custInvoiceJour
                        group by InvoiceId
                        where (!fromDate || custInvoiceJour.InvoiceDate >= fromDate) &&
                            (!toDate || custInvoiceJour.InvoiceDate <= toDate) &&
                            custInvoiceJour.InvoiceId >= fromVoucher &&
                            custInvoiceJour.InvoiceId <= toVoucher &&
                            custInvoiceJour.InvoiceId like maskSuffix
                    {
                        voucher = str2int(subStr(custInvoiceJour.InvoiceId, maskStart, maskLength));

                        if (voucher > (prevVoucher+ 1))
                        {
                            if (prevError < (prevVoucher+ 1))
                            {
                                fromVoucherLine = NumberSeq::numInsertFormat(prevError, mask);
                                toVoucherLine = NumberSeq::numInsertFormat(prevVoucher, mask);
                                tmpStatus       = statusOk;
                                tmpMark         = markOk;
                                qty             = prevVoucher-prevError+1;
                                numOfVoucher    += (qty);
                                this.insertLedgerCheckVouchersTmp(numberSequenceTable);
                            }

                            fromVoucherLine = NumberSeq::numInsertFormat((prevVoucher+ 1), mask);
                            toVoucherLine   = NumberSeq::numInsertFormat((voucher  - 1), mask);
                            tmpStatus       = statusError;
                            tmpMark         = markError;
                            qty             = voucher-prevVoucher-1;
                            numOfHoles      += (qty);
                            this.insertLedgerCheckVouchersTmp(numberSequenceTable);

                            prevError       = voucher;
                        }
                        prevVoucher= voucher;
                    }

                    if (fromVoucher && prevVoucher >= str2num(subStr(fromVoucher,maskStart, maskLength)))
                    {
                        fromVoucherLine = NumberSeq::numInsertFormat(prevError, mask);
                        toVoucherLine   = NumberSeq::numInsertFormat(prevVoucher, mask);
                        tmpStatus       = statusOk;
                        tmpMark         = markOk;
                        qty             = prevVoucher-prevError+1;
                        numOfVoucher    += (qty);
                        this.insertLedgerCheckVouchersTmp(numberSequenceTable);
                    }

                    if (toVoucher && prevVoucher < str2num(subStr(toVoucher,maskStart, maskLength)))
                    {
                        fromVoucherLine = NumberSeq::numInsertFormat((prevVoucher+ 1), mask);
                        toVoucherLine = toVoucher;
                        tmpStatus = statusError;
                        tmpMark = markError;
                        qty = toVoucherInt-prevVoucher;
                        numOfHoles += (qty);
                        this.insertLedgerCheckVouchersTmp(numberSequenceTable);
                    }

                    if (!numberSequenceList.next(numberSequenceTable))
                    {
                        break;
                    }
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLedgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Searches the ledger journal transactions for holes in the voucher series.
    /// </summary>
    /// <returns>
    ///    true if transactions are found; otherwise, false.
    /// </returns>
    private boolean checkLedgerJournal()
    {
        Integer voucher;
        LedgerJournalTable  ledgerJournalTable;
        NumberSequenceTable numberSequenceTable;

        /* Check the numbersequences for holes */
        numberSequenceCode = LedgerParameters::numRefJournalNum().numberSequenceTable().NumberSequence;

        if (!numberSequence ||
           (numberSequence == numberSequenceCode))
        {
            numberSequenceTable = NumberSequenceTable::findByNaturalKey(numberSequenceCode);
            numberSequenceTxt = numberSequenceTable.Txt;
            mask = numberSequenceTable.Format;
            maskLength = strLen(numberSequenceTable.Format)-strLen(strRem(numberSequenceTable.Format, '#'));
            maskSuffix = this.getMaskSuffix(mask);
            fromVoucherInt = numberSequenceTable.Lowest;
            toVoucherInt = numberSequenceTable.NextRec-1;
            nextVoucherInt = numberSequenceTable.NextRec;

            fromVoucher = NumberSeq::numInsertFormat(fromVoucherInt, numberSequenceTable.Format);
            toVoucher = NumberSeq::numInsertFormat(toVoucherInt, numberSequenceTable.Format);
            nextVoucher = NumberSeq::numInsertFormat(nextVoucherInt, numberSequenceTable.Format);

            prevError = fromVoucherInt;
            prevVoucher = fromVoucherInt -1;

            numOfHoles = 0;
            numOfVoucher = 0;

            this.insertLedgerCheckVouchersTmp(numberSequenceTable);

           /*  search the Ledgerjournaltransactions for holes in the voucherseries  */
            while select ledgerJournalTable
                group by JournalNum
                where ledgerJournalTable.JournalNum  >= fromVoucher    &&
                      ledgerJournalTable.JournalNum  <= toVoucher       &&
                      ledgerJournalTable.JournalNum like maskSuffix
            {
                voucher = str2int(subStr(ledgerJournalTable.JournalNum, maskStart, maskLength));

                if (voucher > (prevVoucher+ 1))
                {
                    if ((prevError < (prevVoucher+ 1)))
                    {
                        fromVoucherLine = NumberSeq::numInsertFormat(prevError, mask);
                        toVoucherLine = NumberSeq::numInsertFormat(prevVoucher, mask);
                        tmpStatus = statusOk;
                        tmpMark = markOk;
                        qty = prevVoucher-prevError+1;
                        numOfVoucher += (qty);
                        this.insertLedgerCheckVouchersTmp(numberSequenceTable);
                    }

                    fromVoucherLine = NumberSeq::numInsertFormat((prevVoucher+ 1), mask);
                    toVoucherLine = NumberSeq::numInsertFormat((voucher  - 1), mask);
                    tmpStatus = statusError;
                    tmpMark = markError;
                    qty = voucher-prevVoucher-1;
                    numOfHoles += (qty);
                    this.insertLedgerCheckVouchersTmp(numberSequenceTable);
                    prevError       = voucher;
                }
                prevVoucher= voucher;
            }

            if (prevVoucher >= str2num(subStr(fromVoucher,maskStart, maskLength)))
            {
                fromVoucherLine = NumberSeq::numInsertFormat(prevError, mask);
                toVoucherLine = NumberSeq::numInsertFormat(prevVoucher, mask);
                tmpStatus = statusOk;
                tmpMark = markOk;
                qty = prevVoucher-prevError+1;
                numOfVoucher += (qty);
                this.insertLedgerCheckVouchersTmp(numberSequenceTable);
            }

            if (prevVoucher < str2num(subStr(toVoucher,maskStart, maskLength)))
            {
                fromVoucherLine = NumberSeq::numInsertFormat((prevVoucher+ 1), mask);
                toVoucherLine = toVoucher;
                tmpStatus = statusError;
                tmpMark = markError;
                qty = toVoucherInt-prevVoucher;
                numOfHoles += (qty);
                this.insertLedgerCheckVouchersTmp(numberSequenceTable);
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Searches the <c>GeneralJournalEntry</c> table for holes in the voucher series.
    /// </summary>
    /// <returns>
    ///    true if transactions are found; otherwise, false.
    /// </returns>
    private boolean checkLedgerVoucher()
    {
        Integer voucher;
        NumberSequenceTable numberSequenceTable;
        GeneralJournalEntry generalJournalEntry;
        SubledgerVoucherGeneralJournalEntry subledgerVoucherGeneralJournalEntry;

        if (numberSequenceList.first(numberSequenceTable))
        {
            while (numberSequenceTable)
            {
                /* Check the numbersequences for holes */
                if (!numberSequence || numberSequence == numberSequenceTable.NumberSequence)
                {
                    numberSequenceCode = numberSequenceTable.NumberSequence;
                    numberSequenceTxt = numberSequenceTable.Txt;
                    mask = numberSequenceTable.Format;
                    maskLength = strLen(numberSequenceTable.Format)-strLen(strRem(numberSequenceTable.Format,'#'));
                    maskSuffix = this.getMaskSuffix(mask);
                    fromVoucherInt = numberSequenceTable.Lowest;
                    toVoucherInt = numberSequenceTable.NextRec-1;
                    nextVoucherInt = numberSequenceTable.NextRec;

                    fromVoucher = NumberSeq::numInsertFormat(fromVoucherInt,numberSequenceTable.Format);
                    toVoucher = NumberSeq::numInsertFormat(toVoucherInt,numberSequenceTable.Format);
                    nextVoucher = NumberSeq::numInsertFormat(nextVoucherInt,numberSequenceTable.Format);

                    prevError = fromVoucherInt;
                    prevVoucher = fromVoucherInt -1;

                    numOfHoles = 0;
                    numOfVoucher = 0;

                    if (fromDate || toDate)
                    {
                        select minof(Voucher) from subledgerVoucherGeneralJournalEntry
                            where (!fromDate || subledgerVoucherGeneralJournalEntry.AccountingDate >= fromDate)  &&
                                (!toDate || subledgerVoucherGeneralJournalEntry.AccountingDate <= toDate)        &&
                                subledgerVoucherGeneralJournalEntry.Voucher >= NumberSeq::numInsertFormat(numberSequenceTable.Lowest,numberSequenceTable.Format) &&
                                subledgerVoucherGeneralJournalEntry.Voucher < NumberSeq::numInsertFormat(numberSequenceTable.NextRec,numberSequenceTable.Format) &&
                                subledgerVoucherGeneralJournalEntry.Voucher like maskSuffix
                        exists join generalJournalEntry
                            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                                generalJournalEntry.Ledger == Ledger::current();

                        if (subledgerVoucherGeneralJournalEntry.Voucher)
                        {
                            fromVoucher = subledgerVoucherGeneralJournalEntry.Voucher;
                            if (!fromVoucher)
                            {
                                fromVoucherInt = 0;
                            }
                            else
                            {
                                if (fromDate)
                                {
                                    fromVoucherInt = str2int(subStr(fromVoucher, maskStart, maskLength));
                                }
                                else
                                {
                                    fromVoucher = NumberSeq::numInsertFormat(fromVoucherInt, numberSequenceTable.Format);
                                }
                            }
                            prevError = fromVoucherInt;
                            prevVoucher = fromVoucherInt - 1;
                        }

                        select maxof(Voucher) from subledgerVoucherGeneralJournalEntry
                            where (!fromDate || subledgerVoucherGeneralJournalEntry.AccountingDate >= fromDate)  &&
                                (!toDate || subledgerVoucherGeneralJournalEntry.AccountingDate <= toDate)        &&
                                subledgerVoucherGeneralJournalEntry.Voucher >= NumberSeq::numInsertFormat(numberSequenceTable.Lowest,numberSequenceTable.Format) &&
                                subledgerVoucherGeneralJournalEntry.Voucher < NumberSeq::numInsertFormat(numberSequenceTable.NextRec,numberSequenceTable.Format) &&
                                subledgerVoucherGeneralJournalEntry.Voucher like maskSuffix
                        exists join generalJournalEntry
                            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                                generalJournalEntry.Ledger == Ledger::current();

                        if (subledgerVoucherGeneralJournalEntry.Voucher)
                        {
                            toVoucher = subledgerVoucherGeneralJournalEntry.Voucher;

                            if (!toVoucher)
                            {
                                toVoucherInt = 0;
                            }
                            else
                            {
                                if (toDate)
                                {
                                    toVoucherInt = str2int(subStr(toVoucher, maskStart, maskLength));
                                }
                                else
                                {
                                    toVoucher = NumberSeq::numInsertFormat(toVoucherInt, numberSequenceTable.Format);
                                }
                            }
                            if (!toVoucher || toDate)
                            {
                                nextVoucherInt = toVoucherInt + 1;
                                nextVoucher = NumberSeq::numInsertFormat(nextVoucherInt, numberSequenceTable.Format);
                            }
                        }
                    }
                    this.insertLedgerCheckVouchersTmp(numberSequenceTable);

                /*  search the GeneralJournalEntry for holes in the voucherseries  */
                    while select subledgerVoucherGeneralJournalEntry
                        group by Voucher
                        where (!fromDate || subledgerVoucherGeneralJournalEntry.AccountingDate >= fromDate)  &&
                              (!toDate || subledgerVoucherGeneralJournalEntry.AccountingDate <= toDate)      &&
                              subledgerVoucherGeneralJournalEntry.Voucher >= fromVoucher                &&
                              subledgerVoucherGeneralJournalEntry.Voucher <= toVoucher                  &&
                              subledgerVoucherGeneralJournalEntry.Voucher like maskSuffix
                        exists join generalJournalEntry
                            where subledgerVoucherGeneralJournalEntry.GeneralJournalEntry == generalJournalEntry.RecId &&
                                generalJournalEntry.Ledger == Ledger::current()
                    {
                        voucher = str2int(subStr(subledgerVoucherGeneralJournalEntry.Voucher, maskStart, maskLength));

                        if (voucher > (prevVoucher+ 1))
                        {
                            if (prevError < (prevVoucher+ 1))
                            {
                                fromVoucherLine = NumberSeq::numInsertFormat(prevError, mask);
                                toVoucherLine   = NumberSeq::numInsertFormat(prevVoucher, mask);
                                tmpStatus       = statusOk;
                                tmpMark         = markOk;
                                qty             = prevVoucher-prevError+1;
                                numOfVoucher    += (qty);
                                this.insertLedgerCheckVouchersTmp(numberSequenceTable);
                            }

                            fromVoucherLine = NumberSeq::numInsertFormat((prevVoucher+ 1), mask);
                            toVoucherLine = NumberSeq::numInsertFormat((voucher - 1), mask);
                            tmpStatus = statusError;
                            tmpMark = markError;
                            qty = voucher-prevVoucher-1;
                            numOfHoles += (qty);
                            this.insertLedgerCheckVouchersTmp(numberSequenceTable);

                            prevError = voucher;
                        }
                        prevVoucher = voucher;
                    }

                    if (fromVoucher && prevVoucher >= str2num(subStr(fromVoucher,maskStart, maskLength)))
                    {
                        fromVoucherLine = NumberSeq::numInsertFormat(prevError, mask);
                        toVoucherLine = NumberSeq::numInsertFormat(prevVoucher, mask);
                        tmpStatus = statusOk;
                        tmpMark = markOk;
                        qty = prevVoucher-prevError+1;
                        numOfVoucher += (qty);
                        this.insertLedgerCheckVouchersTmp(numberSequenceTable);
                    }

                    if (toVoucher && prevVoucher < str2num(subStr(toVoucher,maskStart, maskLength)))
                    {
                        fromVoucherLine = NumberSeq::numInsertFormat((prevVoucher+ 1), mask);
                        toVoucherLine = toVoucher;
                        tmpStatus = statusError;
                        tmpMark = markError;
                        qty = toVoucherInt-prevVoucher;
                        numOfHoles += (qty);
                        this.insertLedgerCheckVouchersTmp(numberSequenceTable);
                    }
                    if (!numberSequenceList.next(numberSequenceTable))
                    {
                        break;
                    }
                }
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNumberSequenceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the balance for customer account from <c>CustTrans</c> table.
    /// </summary>
    /// <param name="_numberSequence">
    ///    A value to use to determine whether the transaction date of the <c>CustTrans</c> table is greater
    ///    than or equal to the from date.
    /// </param>
    private void findNumberSequenceTable(NumberSequenceCode _numberSequence)
    {
        NumberSequenceTable numberSequenceTable;

        if (_numberSequence)
        {
            if (!numberSequence || (numberSequence == _numberSequence))
            {
                numberSequenceTable.NumberSequence = _numberSequence;
                if (!  numberSequenceList.find(numberSequenceTable))
                {
                    numberSequenceTable = NumberSequenceTable::findByNaturalKey(_numberSequence);
                    numberSequenceList.ins(numberSequenceTable);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerCheckVoucherTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the <c>LedgerCheckVoucherTmp</c> table.
    /// </summary>
    /// <returns>
    /// The required report data table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(LedgerCheckVoucherTmp))
    ]
    public LedgerCheckVoucherTmp getLedgerCheckVoucherTmp()
    {
        select ledgerCheckVoucherTmp;
        return ledgerCheckVoucherTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaskSuffix</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the number sequence format string.
    /// </summary>
    /// <param name="_formatStr">
    ///    The number sequence from a <c>NumberSequenceTable</c> record.
    /// </param>
    /// <returns>
    ///    The number sequence format string.
    /// </returns>
    private NumberSequenceFormat getMaskSuffix(str _formatStr)
    {
        Integer masklen, formStrlen;
        NumberSequenceFormat  maskStr, markMatchStr;

        masklen = strLen(_formatStr)-strLen(strRem(_formatStr,'#'));
        if (!masklen)
        {
            return '';
        }

        markMatchStr = strRep('?',masklen);
        formStrlen = strLen(_formatStr);
        maskStart = strFind(_formatStr,'#',1,formStrlen);

        if (maskStart == 1)
        {
            maskStr = markMatchStr + subStr(_formatStr, masklen+1,formStrlen -masklen);
        }
        else
        {
            maskStr = subStr(_formatStr, 1, maskStart -1) + markMatchStr;
            if ((maskStart + masklen) <= formStrlen)
            {
                maskStr = maskStr + subStr(_formatStr, maskStart + masklen, formStrlen - (maskStart + masklen) + 1);
            }
        }
        return maskStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerCheckVouchersTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the ledger voucher series in the temporary table.
    /// </summary>
    /// <param name="_numberSequenceTable">
    /// A <c>NumberSequenceTable</c> record.
    /// </param>
    private void insertLedgerCheckVouchersTmp(NumberSequenceTable _numberSequenceTable)
    {
        ledgerCheckVoucherTmp.clear();
        ledgerCheckVoucherTmp.FromVoucher = fromVoucher;
        ledgerCheckVoucherTmp.NextVoucher = nextVoucher;
        ledgerCheckVoucherTmp.NumberSequenceTxt = numberSequenceTxt;
        ledgerCheckVoucherTmp.NumOfHoles = numOfHoles;
        ledgerCheckVoucherTmp.NumOfVoucher = numOfVoucher;
        ledgerCheckVoucherTmp.Qty = qty;
        ledgerCheckVoucherTmp.FromVoucherLine = fromVoucherLine;
        ledgerCheckVoucherTmp.ToVoucherLine = toVoucherLine;
        ledgerCheckVoucherTmp.Marking = tmpMark;
        ledgerCheckVoucherTmp.Status = tmpStatus;
        ledgerCheckVoucherTmp.Txt = _numberSequenceTable.Txt;
        ledgerCheckVoucherTmp.NumberSequence = _numberSequenceTable.NumberSequence;
        ledgerCheckVoucherTmp.Lowest = _numberSequenceTable.Lowest;
        ledgerCheckVoucherTmp.NextRec = _numberSequenceTable.NextRec;
        ledgerCheckVoucherTmp.insert();

        nextVoucher = '';
        numberSequenceTxt = '';
        numOfHoles = 0;
        numOfVoucher = 0;
        qty = 0;
        fromVoucherLine = '';
        toVoucherLine = '';
        tmpMark = '';
        tmpStatus = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeNumberSequenceListCustInvJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of number sequences to examine.
    /// </summary>
    /// <returns>
    /// An instance of the <c>RecordSortedList</c> class.
    /// </returns>
    /// <remarks>
    /// The list is made from specified number sequence references the references listed below all creates
    /// transactions in the customer invoice journal.
    /// </remarks>
    private RecordSortedList makeNumberSequenceListCustInvJour()
    {
        this.findNumberSequenceTable(CustParameters::numRefCustInvoiceId().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(CustParameters::numRefCustCreditNoteId().numberSequenceTable().NumberSequence);

        return numberSequenceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeNumberSequenceListLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a list of number sequences to examine.
    /// </summary>
    /// <returns>
    /// A <c>RecordSortedList</c> object.
    /// </returns>
    /// <remarks>
    /// The list is made from a number sequence references that are listed below all the created
    /// transactions in the ledger entry reference.
    /// </remarks>
    private RecordSortedList makeNumberSequenceListLedger()
    {
        LedgerJournalName ledgerJournalName;

        this.findNumberSequenceTable(LedgerParameters::numRefClosingSheet().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(LedgerParameters::numRefLedgerExchAdjVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(BankParameters::numRefBankDepositNum().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(BankParameters::numRefBankReconcileVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(TaxParameters::numRefTaxReportingVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(CustParameters::numRefCustExchAdjVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(CustParameters::numRefCustInvoiceVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(CustParameters::numRefCustCreditNoteVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(CustParameters::numRefCollectionLetterVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(CustParameters::numRefInterestNoteVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(VendParameters::numRefVendExchAdjVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(SalesParameters::numRefSalesPackingSlipVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(SalesParameters::numRefSalesInvoiceVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(SalesParameters::numRefSalesCreditNoteVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(PurchParameters::numRefPurchInvoiceVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(PurchParameters::numRefPurchCreditNoteVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(PurchParameters::numRefPurchPackingSlipVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(InventParameters::numRefInventJournalVoucherId().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(InventParameters::numRefInventAdjustmentVoucherId().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(InventParameters::numRefInventClosingVoucherId().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(ProdParameters::numRefProdJournalVoucherId().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(ProjParameters::numRefProjPeriodVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(ProjParameters::numRefProjNormalInvoiceVoucher().numberSequenceTable().NumberSequence);

        // tests added to cover more entry points for GeneralJournalEntry records
        this.findNumberSequenceTable(CustParameters::numRefCustPaymVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(CustParameters::numRefCustCloseVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(LedgerParameters::numRefLedgerReversalVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(VendParameters::numRefVendPaymentVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(VendParameters::numRefVendCloseVoucher().numberSequenceTable().NumberSequence);
        this.findNumberSequenceTable(PurchParameters::numRefPurchMarkupVoucher().numberSequenceTable().NumberSequence);

        while select * from ledgerJournalName
        {
            this.findNumberSequenceTable(NumberSequenceTable::find(ledgerJournalName.NumberSequenceTable).NumberSequence);
        }

        return numberSequenceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic by calculating the balance for the customer account from the
    ///    <c>CustTrans</c> table.
    /// </summary>
    /// <remarks>
    ///    Processes the logic which is used by the <c>LedgerCheckVoucher</c> report.
    /// </remarks>
    public void processReport()
    {
        LedgerCheckVoucherContract ledgerCheckVoucherContract = this.parmDataContract() as  LedgerCheckVoucherContract;
        statusOk    = "@SYS5469";
        statusError = "@SYS4907";
        markError   = '*';
        markOk      = '';

        numberSequenceList  = new RecordSortedList(tableNum(NumberSequenceTable));
        numberSequenceList.sortOrder(fieldNum(NumberSequenceTable, RecId));

        fromDate = ledgerCheckVoucherContract.parmFromDate();
        toDate = ledgerCheckVoucherContract.parmToDate();
        numberSequence = ledgerCheckVoucherContract.parmNumSeqCode();

        if (! fromDate)
        {
            fromDate = dateNull();
        }

        if (! toDate)
        {
            toDate = dateNull();
        }

        /* Make a list of the numbersequences, depending on where transactions from the numbersequence are placed */
        /* (GeneralJournalEntry, CustInvoiceJour...). Afterwards check the numbersequences in the lists for holes */

        numberSequenceList = this.makeNumberSequenceListLedger();
        this.checkLedgerVoucher();

        numberSequenceList = null;
        numberSequenceList = new RecordSortedList(tableNum(NumberSequenceTable));
        numberSequenceList.sortOrder(fieldNum(NumberSequenceTable, RecId));

        numberSequenceList = this.makeNumberSequenceListCustInvJour();
        this.checkCustInvJour();

        /* No need to make a number sequencelist, as there is only one journal batch number */
        this.checkLedgerJournal();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
