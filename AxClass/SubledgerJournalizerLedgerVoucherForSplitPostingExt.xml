<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalizerLedgerVoucherForSplitPostingExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
SourceDocumentEnumExtensionAttribute(enumStr(SourceDocument_VendorInvoice), SourceDocument_VendorInvoice::VendorInvoice)
]
public class SubledgerJournalizerLedgerVoucherForSplitPostingExt extends SubledgerJournalizerExtension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canSubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a value that indicates whether to subscribe to the journalizer event.
    /// </summary>
    /// <returns>
    /// True if we can subscribe the journalizer event; otherwise, false.
    /// </returns>
    protected boolean canSubscribe()
    {
        boolean canSubscribe = false;

        FormLetterJournalPostCaller journalPostCaller = subledgerJournalizer.parmCaller() as FormLetterJournalPostCaller;
        str sourceDocumentTypeEnumName = subledgerJournalizer.parmSourceDocument().parmSourceDocumentHeader().TypeEnumName;

        if (EnableEnhancedDelaySDAFJournalizerForSourceDocuments::isEnabled()
                && VendInvoiceSplitPostingFeature::isEnabled()
                && journalPostCaller == null 
                && SubledgerDocumentPostingSplitHelper::isDocumentSupported(sourceDocumentTypeEnumName)
                && SourceDocumentCompletionRule::recognizeVoucherInSubledger())
        {
            canSubscribe = true;
        }

        return canSubscribe;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the subledger journalizer extension's recordedSubledgerJournalAccountEntries event.
    /// </summary>
    protected void subscribe()
    {
        if (this.canSubscribe())
        {
            subledgerJournalizer.recordedSubledgerJournalAccountEntries += eventhandler(this.recordedSubledgerEntriesEventHandler);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordedSubledgerEntriesEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds and moves the Subledger Journal Account Entries that have been pre-posted in the first stage of 
    /// document post to SubledgerJournalAccountEntry and marks the entries which balance to 0 for Accounting
    /// and Reporting currencies as 'DoNotTransfer'.
    /// </summary>
    /// <param name="_eventArgs">
    /// Event handler arguments.
    /// </param>
    /// <remarks>
    /// This event handler is only invoked during split-posted document journalization.
    /// </remarks>
    public void recordedSubledgerEntriesEventHandler(SubledgerJournalizerExtensionArgs _eventArgs)
    {
        LedgerVoucher                           ledgerVoucher;
        LedgerVoucherObject                     ledgerVoucherObject;
        AccountingDate                          accountingDate;
        SubledgerJournalEntry                   subledgerJournalEntry;
        Voucher                                 voucher;
        SubledgerJournalEntryType               subledgerJournalEntryType;
        CurrentOperationsTax                    postingLayer;
        Map                                     subledgerJournalEntries;
        MapEnumerator                           subledgerJournalEntriesEnumerator;
        Set                                     subledgerJournalEntryRecIdCollection;
        SetEnumerator                           subledgerJournalEntryRecIdEnumerator;

        if (EnableEnhancedDelaySDAFJournalizerForSourceDocuments::isEnabled() && VendInvoiceSplitPostingFeature::isEnabled())
        {
            subledgerJournalEntries = _eventArgs.parmSubledgerJournalEntries();

            if (subledgerJournalEntries != null && subledgerJournalEntries.elements() > 0)
            {
                subledgerJournalEntriesEnumerator = new MapEnumerator(subledgerJournalEntries);

                while (subledgerJournalEntriesEnumerator.moveNext())
                {
                    subledgerJournalEntry.clear();

                    subledgerJournalEntry = subledgerJournalEntriesEnumerator.currentValue();

                    SubledgerJournalAccountEntry subledgerJournalAccountEntry;
                    Query query = new Query();
                    Map targetToSourceMap = new Map(Types::String, Types::Container);

                    AccountingEventRecId accountingEventRecId = subledgerJournalEntry.AccountingEvent;

                    this.setupDataSourceForJournalizationQuery(targetToSourceMap, query, accountingEventRecId);

                    Query::insert_recordset(subledgerJournalAccountEntry, targetToSourceMap, query);

                    SubledgerJournalizer::markDoNotTransferEntries(subledgerJournalEntry.RecId);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupDataSourceForJournalizationQuery</Name>
				<Source><![CDATA[
    protected void setupDataSourceForJournalizationQuery(Map _targetToSourceMap, Query query, AccountingEventRecId _accountingEventRecId)
    {
        QueryBuildDataSource subledgerIntermediateEntryQbds = query.addDataSource(tableNum(SubledgerIntermediateEntry));
        
        subledgerIntermediateEntryQbds.addRange(fieldNum(SubledgerIntermediateEntry, AccountingEvent))
            .value(SysQuery::value(_accountingEventRecId));

        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, ACCOUNTENTRYEVENTROLE));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, ACCOUNTINGCURRENCYAMOUNT));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, EXCHANGERATE1));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, EXCHANGERATE2));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, EXCHANGERATEDATE));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, HISTORICALEXCHANGERATEDATE));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, ISCORRECTION));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, ISTRANSFERREDINDETAIL));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, LEDGERDIMENSION));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, ORIGINALTRANSFERPOLICY));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, POSTINGTYPE));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, REPORTINGCURRENCYAMOUNT));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, REPORTINGEXCHANGERATE1));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, REPORTINGEXCHANGERATE2));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, SIDE));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, TRANSACTIONCURRENCY));
        subledgerIntermediateEntryQbds.addSelectionField(fieldNum(SubledgerIntermediateEntry, TRANSACTIONCURRENCYAMOUNT));

        QueryBuildDataSource subledgerJournalEntryQbds = subledgerIntermediateEntryQbds.addDataSource(tableNum(SubledgerJournalEntry));
        subledgerJournalEntryQbds.addLink(fieldNum(SubledgerIntermediateEntry, AccountingEvent), fieldNum(SubledgerJournalEntry, AccountingEvent));
        subledgerJournalEntryQbds.joinMode(JoinMode::InnerJoin);
        subledgerJournalEntryQbds.addSelectionField(fieldNum(SubledgerJournalEntry, RecId));
        
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, ACCOUNTENTRYEVENTROLE),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, ACCOUNTENTRYEVENTROLE)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, ACCOUNTINGCURRENCYAMOUNT),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, ACCOUNTINGCURRENCYAMOUNT)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, EXCHANGERATE1),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, EXCHANGERATE1)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, EXCHANGERATE2),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, EXCHANGERATE2)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, EXCHANGERATEDATE),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, EXCHANGERATEDATE)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, HISTORICALEXCHANGERATEDATE),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, HISTORICALEXCHANGERATEDATE)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, ISCORRECTION),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, ISCORRECTION)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, ISTRANSFERREDINDETAIL),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, ISTRANSFERREDINDETAIL)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, LEDGERDIMENSION),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, LEDGERDIMENSION)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, ORIGINALTRANSFERPOLICY),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, ORIGINALTRANSFERPOLICY)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, POSTINGTYPE),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, POSTINGTYPE)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, REPORTINGCURRENCYAMOUNT),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, REPORTINGCURRENCYAMOUNT)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, REPORTINGEXCHANGERATE1),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, REPORTINGEXCHANGERATE1)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, REPORTINGEXCHANGERATE2),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, REPORTINGEXCHANGERATE2)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, SIDE),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, SIDE)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, TRANSACTIONCURRENCY),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, TRANSACTIONCURRENCY)]);
        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, TRANSACTIONCURRENCYAMOUNT),
            [subledgerIntermediateEntryQbds.uniqueId(), fieldStr(SubledgerIntermediateEntry, TRANSACTIONCURRENCYAMOUNT)]);

        _targetToSourceMap.insert(fieldStr(SubledgerJournalAccountEntry, SubledgerJournalEntry),
            [subledgerJournalEntryQbds.uniqueId(), fieldStr(SubledgerJournalEntry, RecId)]);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>