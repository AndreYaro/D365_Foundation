<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VATDeclarationController_NO</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VATDeclarationController_NO extends VATDeclarationController_W implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        VATDeclarationController_NO controller = VATDeclarationController_NO::construct();

        controller.parmArgs(_args);
        controller.preRun();
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VATDeclarationController_NO construct()
    {
        const str FeatureReference = 'NO-00015';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        return new VATDeclarationController_NO(classStr(VATDeclarationService_W),
            methodStr(VATDeclarationService_W, generateXml), SysOperationExecutionMode::Synchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRun</Name>
				<Source><![CDATA[
    public void preRun()
    {
        TaxReport taxReport = args.parmObject() as TaxReport;

        if (taxReport
            && args
            && args.dataset() == tableNum(TaxReportPeriod))
        {
            VATDeclaraitonContract_W contract = this.getDataContractObject() as VATDeclaraitonContract_W;

            TaxReportPeriod taxReportPeriod = args.record();
            contract.parmTaxPeriod(taxReportPeriod.TaxPeriod);
            contract.parmFromDate(taxReport.fromDate());
            contract.parmToDate(taxReport.toDate());
            contract.parmTransDate(taxReport.transDate());
            contract.parmMonth(int2str(mthOfYr(taxReport.fromDate())));
            contract.parmYear(int2str(year(taxReport.fromDate())));
            contract.parmTaxRepVersion(TaxRepVersion::Correct);
            contract.parmTaxReportPeriodCode(TaxReportPeriod::findByPeriodFromDateAndEndDate(
                taxReportPeriod.TaxPeriod,
                taxReport.fromDate(),
                taxReport.toDate()).TaxReportPeriodCode_NO);

            TmpTaxReportById tmpTaxReportById = TaxTrans::taxAmountByReportId_Table(taxReport.fromDate(), taxReport.toDate(), taxReport.taxPeriod(), taxReport.taxRepVersion(), 0, taxReport.update());
            contract.parmTmpTaxReportById(tmpTaxReportById);
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>