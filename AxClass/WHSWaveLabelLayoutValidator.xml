<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveLabelLayoutValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class that validates the layout sections of labels printed during the wave.
/// </summary>
internal final class WHSWaveLabelLayoutValidator
{
    private WHSWaveLabelLayout  labelLayout;
    private QueryRun        queryRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new instance of label layout validator class.
    /// </summary>
    /// <param name="_labelLayout">
    /// The label layout record to validate.
    /// </param>
    protected void new(WHSWaveLabelLayout _labelLayout)
    {
        labelLayout = _labelLayout;
        queryRun    = new queryRun(labelLayout.PackedQueryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromLabelLayout</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes new instance of label layout validator class.
    /// </summary>
    /// <param name="_labelLayout">
    /// The label layout record to validate.
    /// </param>
    /// <returns>An instance of the <c>WHSWaveLabelLayoutValidator</c> class.</returns>
    [Hookable(false)]
    internal static WHSWaveLabelLayoutValidator newFromLabelLayout(WHSWaveLabelLayout _labelLayout)
    {
        return new WHSWaveLabelLayoutValidator(_labelLayout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates label layout records.
    /// </summary>
    /// <returns>
    /// True if label layout record is valid; otherwise False.
    /// </returns>
    [Hookable(false)]
    internal boolean validate()
    {
        boolean ret = this.validateRowPositions();
    
        ret = ret && this.validateRepeatableSection();
    
        ret = ret && this.validateHeaderQueryPlaceHolders();
    
        ret = ret && this.validateBodyQueryPlaceHolders();
    
        ret = ret && this.validateFooterQueryPlaceHolders();
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLayoutQueryPlaceholders</Name>
				<Source><![CDATA[
    private boolean validateLayoutQueryPlaceholders(str _placeholder)
    {
        int placeholderLength = strLen(_placeholder);
        int separatorPos      = strFind(_placeholder, WHSLabelConstants::SeparatorChar, 1, placeholderLength);
    
        // Retrieve table name information from placeholder
        TableName tableName = subStr(_placeholder, 1, separatorPos - 1);
    
        boolean ret = true;

        // Validate table exists in query
        if (queryRun.query().dataSourceTable(tableName2Id(tableName)) == null)
        {
            ret = checkFailed(strFmt("@WAX:LabelLayoutValidatorInvalidTable", tableName));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBodyQueryPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates label body placeholder values exist in query.
    /// </summary>
    /// <returns>
    /// True if label body placeholders are valid; otherwise False.
    /// </returns>
    private boolean validateBodyQueryPlaceholders()
    {
        boolean ret = true;
        int     startPos = 1;
        int     length = strLen(labelLayout.LabelBody);
    
        while (strFind(labelLayout.LabelBody, WHSLabelConstants::PlaceholderChar, startPos, length))
        {
            // Determine positions of query value placeholder
            startPos    = strFind(labelLayout.LabelBody, WHSLabelConstants::PlaceholderChar, startPos, length);
            int endPos  = strFind(labelLayout.LabelBody, WHSLabelConstants::PlaceholderChar, startPos + 1, length);
    
            // Store off placeholder string to retrieve query data
            str placeholder = subStr(labelLayout.LabelBody, startPos + 1, (endPos - startPos) - 1);
            
            // Validate table exists in query
            ret = this.validateLayoutQueryPlaceholders(placeholder);
    
            startPos = endPos + 1;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFooterQueryPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates label footer placeholder values exist in query.
    /// </summary>
    /// <returns>
    /// True if label footer placeholders are valid; otherwise False.
    /// </returns>
    private boolean validateFooterQueryPlaceholders()
    {
        boolean ret = true;
        int     startPos = 1;
        int     length = strLen(labelLayout.LabelFooter);
    
        while (strFind(labelLayout.LabelFooter, WHSLabelConstants::PlaceholderChar, startPos, length))
        {
            // Determine positions of query value placeholder
            startPos    = strFind(labelLayout.LabelFooter, WHSLabelConstants::PlaceholderChar, startPos, length);
            int endPos  = strFind(labelLayout.LabelFooter, WHSLabelConstants::PlaceholderChar, startPos + 1, length);
    
            // Store off placeholder string to retrieve query data
            str placeholder = subStr(labelLayout.LabelFooter, startPos + 1, (endPos - startPos) - 1);

            // Validate table exists in query
            ret = this.validateLayoutQueryPlaceholders(placeholder);
    
            startPos = endPos + 1;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHeaderQueryPlaceholders</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates label header placeholder values exist in query.
    /// </summary>
    /// <returns>
    /// True if label header placeholders are valid; otherwise False.
    /// </returns>
    private boolean validateHeaderQueryPlaceholders()
    {
        boolean ret = true;
        int     startPos = 1;
        int     length = strLen(labelLayout.LabelHeader);
    
        while (strFind(labelLayout.LabelHeader, WHSLabelConstants::PlaceholderChar, startPos, length)
            && ret)
        {
            // Determine positions of query value placeholder
            startPos    = strFind(labelLayout.LabelHeader, WHSLabelConstants::PlaceholderChar, startPos, length);
            int endPos  = strFind(labelLayout.LabelHeader, WHSLabelConstants::PlaceholderChar, startPos + 1, length);
    
            // Store off placeholder string to retrieve query data
            str placeholder = subStr(labelLayout.LabelHeader, startPos + 1, (endPos - startPos) - 1);

            // Validate table exists in query
            ret = this.validateLayoutQueryPlaceholders(placeholder);
    
            startPos = endPos + 1;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRepeatableSection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the repeatable row section is formatted correctly.
    /// </summary>
    /// <returns>
    /// True if formatted correctly; otherwise False.
    /// </returns>
    private boolean validateRepeatableSection()
    {
        boolean ret = true;
        str     body = labelLayout.LabelBody;
        int     length = strLen(body);
    
        if (strScan(body, WHSLabelConstants::RowStart, 0, length)
        &&  !strScan(body, WHSLabelConstants::RowEnd, 0, length))
        {
            ret = checkFailed("@WAX:LabelLayoutValidatorInvalidLayout");
        }
    
        int labelRowStartPos    = strFind(body, WHSLabelConstants::QuoteChar, 1, length);
        int labelRowEndPos      = strFind(body, WHSLabelConstants::QuoteChar, length, -length);
        WHSWaveLabelRowId labelRow  = subStr(body, labelRowStartPos + 1, (labelRowEndPos - labelRowStartPos) - 1);
        
        WHSWaveLabelLayoutRow   labelLayoutRow;
    
        select firstOnly RecId from labelLayoutRow
            where labelLayoutRow.LabelLayout == labelLayout.RecId
            &&    labelLayoutRow.LabelRowId  == labelRow;
    
        if (labelRowStartPos && labelRowEndPos && labelRow && labelLayoutRow.RecId == 0)
        {
            ret = checkFailed("@WAX:LabelLayoutValidatorInvalidLayout");
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRowPositions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the text layout of repeatable row sections in label body;
    /// </summary>
    /// <returns>
    /// True if valid; otherwise False.
    /// </returns>
    private boolean validateRowPositions()
    {
        boolean     ret = true;
        container   con = str2con(labelLayout.LabelBody, WHSLabelConstants::NewLine);
        int         length = conLen(con);
    
        for (int i = 1; i <= length; ++i)
        {
            str s = conPeek(con, i);
    
            if (strScan(s, WHSLabelConstants::RowStart, 0, strLen(s)) > 1   ||
                strScan(s, WHSLabelConstants::RowEnd, 0, strLen(s)) > 1)
            {
                ret = checkFailed("@WAX:LabelLayoutValidatorInvalidLayout");
                break;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>