<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Prlw2File</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>PRLW2File</c> class generates a text file to be used for filing Forms W-2 electronically.
/// </summary>
class Prlw2File extends RunBase
{
    #TaxIntervatBE
    #PayrollConstants

    SysQueryRun     queryRun;

    DialogField     dlfBenefitId;
    DialogField     dlgPIN;
    DialogField     dlgfileName;
    DialogField     dlgtaxyear;
    DialogField     dlgResubmit;
    DialogField     dlgKindOfEmployer;
    DialogField     dlgContactName;
    DialogField     dlgContactStreetAddress;
    DialogField     dlgContactCity;
    DialogField     dlgContactState;
    DialogField     dlgContactZipCode;
    DialogField     dlgContactPhone;
    DialogField     dlgContactFax;
    DialogField     dlgContactEmail;
    DialogField     dlgEmploymentCode;

    boolean                         hasSocialSecurityNumberAccess;
    Yr                              taxyear;
    PRLPIN                          pin;
    NoYes                           resubmit;
    NoYes                           latestName;
    PayrollW2KindOfEmployer         kindOfEmployer;
    PayrollW2EmploymentCode         employmentCode;
    Name                            contactName;
    LogisticsAddressStreet          contactStreet;
    LogisticsAddressCityName        contactCity;
    LogisticsAddressStateId         contactState;
    LogisticsAddressZipCodeId       contactZipCode;
    Phone                           contactPhone;
    Phone                           contactFax;
    Email                           contactEmail;
    str                             companyZipCodeExtension;
    str                             workerZipCodeExtension;
    PayrollWageFileIdentifier       wageFileIdentifier;

    boolean                         roRecordCreated, rsRecordCreated;
    DirPartyName                    companyName;
    Tax1099RegNum                   employerIdentificationNumber;
    utcdatetime                     pointInTime;
    PRLW2File                       prlw2File;
    TransDate                       todate;
    TransDate                       fromDate;
    PayrollUSState                  stateId;
    HcmWorker                       worker;
    Amount                          grossTaxable, wagesTips_state, stateAmount, stateWithholding, wagesTips;
    Amount                          federal;
    Amount                          medicareWages;
    Amount                          medicareTax;
    Amount                          socialSecWages;
    Amount                          socialSecurityTax ;
    Amount                          employeeBox12A, employeeBox12B, employeeBox12C, employeeBox12D, employeeBox12E, employeeBox12F, employeeBox12G, employeeBox12H, employeeBox12M;
    Amount                          employeeBox12N, employeeBox12Q, employeeBox12R, employeeBox12S, employeeBox12T, employeeBox12V, employeeBox12W, employeeBox12Y, employeeBox12Z;
    Amount                          employeeBox12AA, employeeBox12BB, employeeBox12CC, employeeBox12DD, employeeBox12EE, employeeBox12FF, employeeBox10;
    Amount                          totalBox12A, totalBox12B, totalBox12C, totalBox12D, totalBox12E, totalBox12F, totalBox12G, totalBox12H, totalBox12M;
    Amount                          totalBox12N, totalBox12Q, totalBox12R, totalBox12S, totalBox12T, totalBox12V, totalBox12W, totalBox12Y, totalBox12Z;
    Amount                          totalBox12AA, totalBox12BB, totalBox12CC, totalBox12DD, totalBox12EE, totalBox12FF, totalBox10;

    Amount                          wagesTipsTotal, federalTotal, medicareTaxTotal, medicareWagesTotal, socialSecurityWagesTotal, socialSecurityTaxTotal;
    TextStreamIo                    file;
    Counter                         numberOfRecordsRW;
    Counter                         numberOfRecordsRO;
    LogisticsPostalAddress          postalAddressCompany;
    LogisticsPostalAddress          postalAddressWorker;
    DirPerson                       person;
    DirPersonName                   personName;
    HcmPersonIdentificationNumber   personIdentification;
    HcmIdentificationTypeRecId      socialSecurityIdentificationType;
    HcmEmployment                   employment;
    PayrollTaxCodeRecId             fitTaxCodeRecId, ficaTaxCodeRecId, mediTaxCodeRecId, medi2TaxCodeRecId;
    str                             stateEmployerAccountNumber;
    CompanyInfoRecId                legalEntity;
    LogisticsAddressCountryRegionId countryRegionUnitedStates;

    LogisticsAddressStateId         workerState;
    LogisticsAddressCityName        workerCity;
    LogisticsAddressZipCodeId       workerZipCode;
    LogisticsAddressStateId         workerForeignStateProvince;
    LogisticsAddressZipCodeId       workerForeignPostalCode;
    str                             workerCountryFIPSCode;
    LogisticsAddressCountryRegionISOCode   workerForeignCountryRegionISOCode;

    LogisticsAddressStateId         companyState;
    LogisticsAddressCityName        companyCity;
    LogisticsAddressZipCodeId       companyZipCode;
    LogisticsAddressStateId         companyForeignStateProvince;
    LogisticsAddressZipCodeId       companyForeignPostalCode;
    str                             companyCountryFIPSCode;
    LogisticsAddressCountryRegionISOCode   companyForeignCountryRegionISOCode;

    Name                            employerContactName;
    Phone                           employerContactPhoneNumber;
    PhoneLocal                      employerContactExtension;
    Phone                           employerContactFaxNumber;
    Email                           employerContactEmail;

    PayrollTaxTransactionHistoryUnion       taxTransactionHistory;
    PayrollPayStatementTotals       payStatementTotals;

    Query                           queryStateTaxTransactions;
    QueryBuildDataSource            qbdTaxCode;
    QueryBuildRange                 qbrWorker;
    QueryBuildDataSource            qbdTaxTransactionHistory;

    private const PayrollPayStatementRecId noPayStatement = 0;
    private const int currentVersion = 3;
    private const int versionOne = 1;
    #LOCALMACRO.CurrentList
        PIN,
        resubmit,
        wageFileIdentifier,
        taxYear,
        kindOfEmployer,
        employmentCode,
        contactName,
        contactStreet,
        contactCity,
        contactState,
        contactZipCode,
        contactPhone,
        contactFax,
        contactEmail,
        employerIdentificationNumber,
        employerContactName,
        employerContactPhoneNumber,
        employerContactExtension,
        employerContactFaxNumber,
        employerContactEmail
    #ENDMACRO

    #LOCALMACRO.CurrentList1
        PIN,
        resubmit,
        wageFileIdentifier,
        taxYear,
        kindOfEmployer,
        employmentCode,
        contactName,
        contactStreet,
        contactCity,
        contactState,
        contactZipCode,
        contactPhone,
        contactFax,
        contactEmail
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateAmounts</Name>
				<Source><![CDATA[
    ///    /// <summary>
    ///     Calculates the employee wage and tax totals for Form W-2 reporting.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calculateAmounts()
    {
        #PayrollConstants
        PayrollTaxTransactionHistoryUnion   usTaxTransactionHistory;
        PayrollTaxCode                      taxCode;

        // Total wages and tips
        select sum(SubjectWages) from usTaxTransactionHistory
        where usTaxTransactionHistory.TransDate <= todate
            && usTaxTransactionHistory.TransDate >= fromDate
            && usTaxTransactionHistory.Worker == worker.RecId
            && usTaxTransactionHistory.PaymentStatus == PayrollPaymentStatus::PaymentIssued
            && usTaxTransactionHistory.IsReversed == NoYes::No
        exists join taxCode
            where taxCode.RecId == usTaxTransactionHistory.TaxCode
                && taxCode.Type  == PayrollTaxCodeType::FIT;

        wagesTips = usTaxTransactionHistory.SubjectWages;

        // Total Federal income tax
        federal = payStatementTotals.calcTaxCodeTotalForDateRangeStatus(noPayStatement,
                                                                fitTaxCodeRecId,
                                                                worker.RecId,
                                                                fromDate,
                                                                todate,
                                                                PayrollPaymentStatus::PaymentIssued,
                                                                NoYes::No);

        // Total Social Security wages
        switch (employmentCode)
        {
            case PayrollW2EmploymentCode::Q :
            case PayrollW2EmploymentCode::X :
                socialSecWages = 0;
                break;

            default :
                select sum(SubjectWages) from usTaxTransactionHistory
                    where usTaxTransactionHistory.TransDate <= todate
                        && usTaxTransactionHistory.TransDate >= fromDate
                        && usTaxTransactionHistory.Worker == worker.RecId
                        && usTaxTransactionHistory.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                        && usTaxTransactionHistory.IsReversed == NoYes::No
                        exists join taxCode
                        where taxCode.RecId == usTaxTransactionHistory.TaxCode
                            && taxCode.Type  == PayrollTaxCodeType::FICA;

                socialSecWages = usTaxTransactionHistory.SubjectWages;
                break;
        }

        // Total Social Secruity taxes
        switch (employmentCode)
        {
            //
            // Zero fill if the Employment Code reported in position 219 of the preceding RE Employer Record is
            // Q (Medicare Qualified Government Employment) or X (Railroad).
            //
            case PayrollW2EmploymentCode::Q :
            case PayrollW2EmploymentCode::X :
                socialSecurityTax = 0;
                break;

            default :
                socialSecurityTax = payStatementTotals.calcTaxCodeTotalForDateRangeStatus(noPayStatement,
                                                                        ficaTaxCodeRecId,
                                                                        worker.RecId,
                                                                        fromDate,
                                                                        todate,
                                                                        PayrollPaymentStatus::PaymentIssued,
                                                                        NoYes::No);
                break;
        }

        // Medicare
        if (employmentCode == PayrollW2EmploymentCode::X)
        {
            // Zero fill if the Employment Code reported in position 219 of the preceding RE Employer Record is X (Railroad).
            medicareWages = 0;
        }
        else
        {
            select sum(SubjectWages) from usTaxTransactionHistory
            where usTaxTransactionHistory.TransDate <= todate
                && usTaxTransactionHistory.TransDate >= fromDate
                && usTaxTransactionHistory.Worker == worker.RecId
                && usTaxTransactionHistory.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                && usTaxTransactionHistory.IsReversed == NoYes::No
            exists join taxCode
                where taxCode.RecId == usTaxTransactionHistory.TaxCode
                    && taxCode.Type  == PayrollTaxCodeType::MEDI;

            medicareWages = usTaxTransactionHistory.SubjectWages;
        }

        if (employmentCode == PayrollW2EmploymentCode::X)
        {
            // Zero fill if the Employment Code reported in position 219 of the preceding RE Employer Record is X (Railroad).
            medicareTax = 0;
        }
        else
        {
            // MEDI
            medicareTax = payStatementTotals.calcTaxCodeTotalForDateRangeStatus(0,
                                                                     mediTaxCodeRecId,
                                                                     worker.RecId,
                                                                     fromDate,
                                                                     todate,
                                                                     PayrollPaymentStatus::PaymentIssued,
                                                                     NoYes::No);

            // MEDI2
            medicareTax += payStatementTotals.calcTaxCodeTotalForDateRangeStatus(0,
                                                                     medi2TaxCodeRecId,
                                                                     worker.RecId,
                                                                     fromDate,
                                                                     todate,
                                                                     PayrollPaymentStatus::PaymentIssued,
                                                                     NoYes::No);
        }

        // Dependent care benefits
        employeeBox10 = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                        fromDate,
                                                                        todate,
                                                                        PayrollW2BoxNumber::OneZero);

        // Increment running employer totals
        wagesTipsTotal += wagesTips;
        federalTotal += federal;
        socialSecurityWagesTotal += socialSecWages;
        socialSecurityTaxTotal += socialSecurityTax;
        medicareWagesTotal += medicareWages;
        medicareTaxTotal += medicareTax;
        totalBox10 += employeeBox10;

        this.calculateBox12Amounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBox12Amounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the Box12 amount totals for a worker and keeps a running total of each of these amounts to be reported by the employer.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calculateBox12Amounts()
    {
        employeeBox12A = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'A');

        employeeBox12B = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'B');

        employeeBox12C = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'C');

        employeeBox12D = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'D');

        employeeBox12E = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'E');

        employeeBox12F = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                            fromDate,
                                                                            todate,
                                                                            PayrollW2BoxNumber::OneTwo,
                                                                            'F');

        employeeBox12G = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'G');

        employeeBox12H = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'H');

        employeeBox12M = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'M');

        employeeBox12N = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'N');

        employeeBox12Q = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'Q');

        employeeBox12R = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'R');

        employeeBox12S = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'S');

        employeeBox12T = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'T');

        employeeBox12V = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'V');

        employeeBox12W = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'W');

        employeeBox12Y = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'Y');

        employeeBox12Z = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'Z');

        employeeBox12AA = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'AA');

        employeeBox12BB = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'BB');

        employeeBox12CC = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'CC');

        employeeBox12DD = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'DD');

        employeeBox12EE = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'EE');

        employeeBox12FF = PayrollPayStatementTotals::calcExternalReportingTotals(worker.RecId,
                                                                             fromDate,
                                                                             todate,
                                                                             PayrollW2BoxNumber::OneTwo,
                                                                             'FF');

        // Keep a running total for the employer amounts for each box
        totalBox12A  += employeeBox12A;
        totalBox12B  += employeeBox12B;
        totalBox12C  += employeeBox12C;
        totalBox12D  += employeeBox12D;
        totalBox12E  += employeeBox12E;
        totalBox12F  += employeeBox12F;
        totalBox12G  += employeeBox12G;
        totalBox12H  += employeeBox12H;
        totalBox12M  += employeeBox12M;
        totalBox12N  += employeeBox12N;
        totalBox12Q  += employeeBox12Q;
        totalBox12R  += employeeBox12R;
        totalBox12S  += employeeBox12S;
        totalBox12T  += employeeBox12T;
        totalBox12V  += employeeBox12V;
        totalBox12W  += employeeBox12W;
        totalBox12Y  += employeeBox12Y;
        totalBox12Z  += employeeBox12Z;
        totalBox12AA += employeeBox12AA;
        totalBox12BB += employeeBox12BB;
        totalBox12CC += employeeBox12CC;
        totalBox12DD += employeeBox12DD;
        totalBox12EE += employeeBox12EE;
        totalBox12FF += employeeBox12FF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStateAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the state tax amounts withheld for the specified tax code for the worker
    ///     for the specified period.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void calculateStateAmounts()
    {
        PayrollTaxCode                      taxCode;
        PayrollTaxTransactionHistoryUnion   usTaxTransactionHistory;

        select sum(SubjectWages) from usTaxTransactionHistory
        where  usTaxTransactionHistory.TransDate <= todate
            && usTaxTransactionHistory.TransDate >= fromDate
            && usTaxTransactionHistory.Worker        == worker.RecId
            && usTaxTransactionHistory.TaxationState == taxTransactionHistory.TaxationState
            && usTaxTransactionHistory.PaymentStatus == PayrollPaymentStatus::PaymentIssued
            && usTaxTransactionHistory.IsReversed    == NoYes::No
        join RecId from taxCode
            where taxCode.RecId == usTaxTransactionHistory.TaxCode
                && taxCode.Type  == PayrollTaxCodeType::SIT;

        wagesTips_state = usTaxTransactionHistory.SubjectWages;

        select firstonly RecId from taxCode
            where taxCode.RecId == taxTransactionHistory.TaxCode
                && taxCode.Type  == PayrollTaxCodeType::SIT;

        stateWithholding = payStatementTotals.calcTaxCodeTotalForDateRangeStatus(noPayStatement,
                                                                taxCode.RecId,
                                                                worker.RecId,
                                                                fromDate,
                                                                todate,
                                                                PayrollPaymentStatus::PaymentIssued,
                                                                NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertAmountFormat</Name>
				<Source><![CDATA[
    private str 11 convertAmountFormat(Amount _amount, Counter _length )
    {
        str stramount = strRep('0', _length);

        stramount =  strPoke(stramount, num2str(_amount * 100, 1 ,0, 0, 0), (_length + 1) - strLen(num2str(_amount * 100, 1, 0, 0, 0)));

        return stramount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertDateTimeToStr</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a <c>utcDateTime</c> value to a string.
    /// </summary>
    /// <param name="_dateTime">
    /// The <c>utcDateTime</c> value to be converted
    /// </param>
    /// <returns>
    /// A string representation of a <c>utcDateTime</c> value in MMDDYYYY format.
    /// </returns>
    /// <remarks>
    /// If the <c>utcDateTime</c> to be converted is the minimum value then an 8 character blank string will be returned.
    /// </remarks>
    private str convertDateTimeToStr(utcdatetime _dateTime)
    {
        str         dateStr = strRep(' ', 8);
        utcdatetime companyDateTime;
        int         intMonth, intDay, intYear;
        str         strMonth, strDay, strYear;

        if (_dateTime)
        {
            companyDateTime = DateTimeUtil::applyTimeZoneOffset(_dateTime, DateTimeUtil::getCompanyTimeZone());

            intMonth = DateTimeUtil::month(companyDateTime);
            intDay = DateTimeUtil::day(companyDateTime);
            intYear = DateTimeUtil::year(companyDateTime);

            strMonth = this.convertNumFormat(intMonth, 2);
            strDay = this.convertNumFormat(intDay, 2);
            strYear = int2str(intYear);

            dateStr = strMonth + strDay + strYear;
        }

        return dateStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertNumFormat</Name>
				<Source><![CDATA[
    private str 11 convertNumFormat(Counter _number, Counter _length)
    {
        str stramount = strRep('0',_length);

        stramount = strPoke(stramount,int2str(_number), (_length+1) - strLen(int2str(_number)));
        return stramount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRA</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the RA line, submitter record, of the electronic W-2 file.
    /// </summary>
    /// <returns>
    /// String representing the RA line of the electronic W-2 file.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str createRA()
    {
        const str recordIdentifier = 'RA';
        const str softwareCode = '98';
        const str preparerCode = 'L';                   // L = Self-prepared
        const str preferredNotificationMethod = '1';    // 1 = email

        str raRecord        = strRep(' ', 512);
        str blank           = strRep(' ', 40);
        str reservedForSSA  = strRep(' ', 80);
        str contactZipCodeExtension;

        contactZipCodeExtension = this.getZipCodeExtension(contactZipCode);

        raRecord = strPoke(raRecord, recordIdentifier, 1);
        raRecord = strPoke(raRecord, subStr(employerIdentificationNumber, 1, 9), 3);
        raRecord = strPoke(raRecord, subStr(pin, 1, 8), 12);

        //
        // Not currently supported:
        //   Software vendor code
        //
        raRecord = strPoke(raRecord, subStr(blank, 1, 4), 20);

        raRecord = strPoke(raRecord, subStr(reservedForSSA, 1, 5), 24);

        // Resubmittal information
        raRecord = strPoke(raRecord, subStr(int2str(resubmit), 1, 1), 29);
        raRecord = strPoke(raRecord, subStr(wageFileIdentifier, 1, 6), 30);

        raRecord = strPoke(raRecord, softwareCode, 36);

        // Employer address information
        raRecord = strPoke(raRecord, subStr(companyName,1,57), 38);
        raRecord = strPoke(raRecord, subStr(blank, 1, 22), 95);
        raRecord = strPoke(raRecord, subStr(strReplace(postalAddressCompany.Street,'\n',' '), 1, 22), 117);
        raRecord = strPoke(raRecord, subStr(postalAddressCompany.City, 1, 22), 139);
        raRecord = strPoke(raRecord, subStr(companyState, 1, 2), 161);
        raRecord = strPoke(raRecord, subStr(companyZipCode, 1, 5), 163);
        raRecord = strPoke(raRecord, companyZipCodeExtension, 168);

        raRecord = strPoke(raRecord, subStr(reservedForSSA, 1, 5), 172);

        raRecord = strPoke(raRecord, subStr(companyForeignStateProvince, 1, 23), 177);
        raRecord = strPoke(raRecord, subStr(companyForeignPostalCode, 1, 15), 200);
        raRecord = strPoke(raRecord, subStr(companyCountryFIPSCode, 1, 2), 215);

        // Submitter contact information
        raRecord = strPoke(raRecord, subStr(companyName, 1, 57), 217);
        raRecord = strPoke(raRecord, subStr(contactStreet, 1, 22), 274);
        raRecord = strPoke(raRecord, subStr(contactStreet, 1, 22), 296);
        raRecord = strPoke(raRecord, subStr(contactCity, 1, 22), 318);
        raRecord = strPoke(raRecord, subStr(contactState, 1, 2), 340);
        raRecord = strPoke(raRecord, subStr(contactZipCode, 1, 5), 342);
        raRecord = strPoke(raRecord, contactZipCodeExtension, 347);
        raRecord = strPoke(raRecord, subStr(reservedForSSA, 1, 5), 351);

        //
        // Not currently supported:
        //  Foreign state/province
        //  Foreign postal code
        //  Country code
        //
        raRecord = strPoke(raRecord, subStr(blank, 1, 23), 356);
        raRecord = strPoke(raRecord, subStr(blank, 1, 15), 379);
        raRecord = strPoke(raRecord, subStr(blank, 1, 2), 394);

        raRecord = strPoke(raRecord, subStr(contactName, 1, 27), 396);

        // Submitter's phone, email, and fax information
        raRecord = strPoke(raRecord, subStr(strKeep(contactPhone, #Digits), 1, 15), 423);
        raRecord = strPoke(raRecord, subStr(blank, 1, 5), 438);
        raRecord = strPoke(raRecord, subStr(reservedForSSA, 1, 3), 443);
        raRecord = strPoke(raRecord, subStr(contactEmail, 1, 40), 446);
        raRecord = strPoke(raRecord, subStr(reservedForSSA, 1, 3), 486);
        raRecord = strPoke(raRecord, subStr(strKeep(contactFax, #Digits), 1, 10), 489);

        raRecord = strPoke(raRecord, preferredNotificationMethod, 499);
        raRecord = strPoke(raRecord, preparerCode, 500);
        raRecord = strPoke(raRecord, subStr(reservedForSSA, 1, 12), 501);

        return raRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the RE line, employer record, of the electronic W-2 file.
    /// </summary>
    /// <returns>
    /// String representing the RE line of the electronic W-2 file.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str createRE()
    {
        const str recordIdentifier = 'RE';
        const str thirdPartySickPayIndicator = '0';

        str reRecord = strRep(' ', 512);
        str blank    = strRep(' ', 300);
        str reservedForSSA  = blank;

        reRecord = strPoke(reRecord, recordIdentifier, 1);
        reRecord = strPoke(reRecord, subStr(int2str(taxyear),1,4), 3);

        //
        // Not currently supported:
        //   Agent indicator code
        //
        reRecord = strPoke(reRecord, subStr(blank,1,1), 7);

        reRecord = strPoke(reRecord, subStr(employerIdentificationNumber,1,9), 8);

        //
        // Not currently supported:
        //   Agent for EIN
        //   Terminating business indicator
        //   Establishment number
        //   Other EIN
        //
        reRecord = strPoke(reRecord, subStr(blank, 1, 9), 17);
        reRecord = strPoke(reRecord, subStr('0', 1, 1), 26);
        reRecord = strPoke(reRecord, subStr(blank, 1, 4), 27);
        reRecord = strPoke(reRecord, subStr(blank, 1, 9), 31);

        reRecord = strPoke(reRecord, subStr(companyName, 1, 57), 40);

        //
        // Not currently supported:
        //   Location address (Attention, Suite, Room Number, etc.)
        //
        reRecord = strPoke(reRecord, subStr(blank, 1, 22), 97);

        reRecord = strPoke(reRecord, subStr(strReplace(postalAddressCompany.Street,'\n',' '), 1, 22), 119);
        reRecord = strPoke(reRecord, subStr(postalAddressCompany.City, 1, 22), 141);
        reRecord = strPoke(reRecord, subStr(companyState, 1, 2), 163);
        reRecord = strPoke(reRecord, subStr(companyZipCode, 1, 5), 165);
        reRecord = strPoke(reRecord, companyZipCodeExtension, 170);

        reRecord = strPoke(reRecord, subStr(enum2Symbol(enumNum(PayrollW2KindOfEmployer), kindOfEmployer), 1, 1), 174);
        reRecord = strPoke(reRecord, subStr(reservedForSSA,1,4), 175);

        reRecord = strPoke(reRecord, subStr(companyForeignStateProvince, 1, 23),179);
        reRecord = strPoke(reRecord, subStr(companyForeignPostalCode, 1, 15), 202);
        reRecord = strPoke(reRecord, subStr(companyCountryFIPSCode, 1, 2), 217);

        reRecord = strPoke(reRecord, subStr(enum2Symbol(enumNum(PayrollW2EmploymentCode), employmentCode), 1, 1), 219);

        //
        // Not currently supported:
        //   Tax jurisdiction code
        //
        reRecord = strPoke(reRecord, subStr(blank, 1, 1), 220);

        reRecord = strPoke(reRecord, thirdPartySickPayIndicator, 221);

        reRecord = strPoke(reRecord, subStr(employerContactName, 1, 27), 222);
        reRecord = strPoke(reRecord, subStr(strKeep(employerContactPhoneNumber, #Digits), 1, 15), 249);
        reRecord = strPoke(reRecord, subStr(strKeep(employerContactExtension, #Digits), 1, 5), 264);
        reRecord = strPoke(reRecord, subStr(strKeep(employerContactFaxNumber, #Digits), 1, 10), 269);
        reRecord = strPoke(reRecord, subStr(employerContactEmail, 1, 40), 279);

        reRecord = strPoke(reRecord, subStr(reservedForSSA, 1, 194), 319);

        return reRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the RF line, final record, of the electronic W-2 file.
    /// </summary>
    /// <returns>
    /// String representing the RF line of the electronic W-2 file.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str createRF()
    {
        const str recordIdentifier = 'RF';

        str rfRecord = strRep(' ', 512);
        str blank    = strRep(' ', 500);
        str reservedForSSA  = blank;

        rfRecord = strPoke(rfRecord, recordIdentifier, 1);
        rfRecord = strPoke(rfRecord, subStr(reservedForSSA, 1, 5), 3);

        // Total number of RW records reported in the entire file
        rfRecord = strPoke(rfRecord, subStr(this.convertNumFormat(numberOfRecordsRW, 9), 1, 9), 8);

        rfRecord = strPoke(rfRecord, subStr(reservedForSSA, 1, 496), 17);

        return rfRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the RO line, employee wage record, of the electronic W-2 file.
    /// </summary>
    /// <returns>
    /// String representing the RO line of the electronic W-2 file.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str createRO()
    {
        const str recordIdentifier = 'RO';

        str     roRecord        = strRep(' ', 512);
        str     blank           = strRep(' ', 200);
        str     fillzero        = strRep('0', 40);
        str     reservedForSSA  = blank;
        Amount  uncollectedEmployeeTipTaxes;

        // Indicate that an RO record was created to trigger the printing of the RU record
        roRecordCreated = true;

        uncollectedEmployeeTipTaxes = (employeeBox12A + employeeBox12B);

        roRecord = strPoke(roRecord, recordIdentifier, 1);
        roRecord = strPoke(roRecord, subStr(reservedForSSA, 1, 9), 3);

        //
        // Not currently supported:
        //   Allocated tips
        //
        roRecord = strPoke(roRecord, subStr(fillzero, 1, 11), 12);

        roRecord = strPoke(roRecord, subStr(this.convertAmountFormat(uncollectedEmployeeTipTaxes, 11), 1, 11), 23);
        roRecord = strPoke(roRecord, subStr(this.convertAmountFormat(employeeBox12R, 11), 1, 11), 34);
        roRecord = strPoke(roRecord, subStr(this.convertAmountFormat(employeeBox12S, 11), 1, 11), 45);
        roRecord = strPoke(roRecord, subStr(this.convertAmountFormat(employeeBox12T, 11), 1, 11), 56);
        roRecord = strPoke(roRecord, subStr(this.convertAmountFormat(employeeBox12M, 11), 1, 11), 67);
        roRecord = strPoke(roRecord, subStr(this.convertAmountFormat(employeeBox12N, 11), 1, 11), 78);
        roRecord = strPoke(roRecord, subStr(this.convertAmountFormat(employeeBox12Z, 11), 1, 11), 89);
        roRecord = strPoke(roRecord, subStr(this.convertAmountFormat(employeeBox12CC, 11), 1, 11), 100);
        roRecord = strPoke(roRecord, subStr(this.convertAmountFormat(employeeBox12EE, 11), 1, 11), 111);
        roRecord = strPoke(roRecord, subStr(reservedForSSA, 1, 153), 122);

        //
        // Not currently supported:
        //   Wages subject to Puerto Rico tax
        //   Commissions subject to Puerto Rico tax
        //   Allowances subject to Puerto Rico tax
        //   Tips subject to Puerto Rico tax
        //   Total wages, commissions, tips and allowances subject to Puerto Rico tax
        //   Puerto Rico tax withheld
        //   Retirement fund annual contributions
        //
        roRecord = strPoke(roRecord, subStr(fillzero, 1, 11), 275);
        roRecord = strPoke(roRecord, subStr(fillzero, 1, 11), 286);
        roRecord = strPoke(roRecord, subStr(fillzero, 1, 11), 297);
        roRecord = strPoke(roRecord, subStr(fillzero, 1, 11), 308);
        roRecord = strPoke(roRecord, subStr(fillzero, 1, 11), 319);
        roRecord = strPoke(roRecord, subStr(fillzero, 1, 11), 330);
        roRecord = strPoke(roRecord, subStr(fillzero, 1, 11), 341);

        roRecord = strPoke(roRecord, subStr(reservedForSSA, 1, 11), 352);

        //
        // Not currently supported:
        //   Total wages, tips and other compensation subject to U.S. Virgin Islands, Guam, American Samoa or Northern Mariana Islands income tax
        //   U.S. Virgin Islands, Guam, American Samoa or Northern Mariana Islands income tax withheld
        //
        roRecord = strPoke(roRecord, subStr(fillzero, 1, 11), 363);
        roRecord = strPoke(roRecord, subStr(fillzero, 1, 11), 374);

        roRecord = strPoke(roRecord, subStr(reservedForSSA, 1, 128), 385);

        return roRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the RS line, state wage record, of the electronic W-2 file.
    /// </summary>
    /// <returns>
    /// String representing the RS line of the electronic W-2 file.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str createRS()
    {
        #PayrollConstants
        const str recordIdentifier = 'RS';

        str rsRecord        = strRep(' ', 512);
        str blank           = strRep(' ', 80);
        str fillzero        = strRep('0', 40);
        str reservedForSSA  = strRep(' ', 80);

        rsRecord = strPoke(rsRecord, recordIdentifier, 1);
        rsRecord = strPoke(rsRecord, subStr(this.convertNumFormat(stateId, 2), 1, 2), 3);

        //
        // Not currently supported:
        //   Taxing entity code
        //
        rsRecord = strPoke(rsRecord, subStr(blank, 1, 5), 5);

        rsRecord = strPoke(rsRecord, subStr(this.socialSecurityNumber(), 1, 9), 10);
        rsRecord = strPoke(rsRecord, subStr(personName.FirstName, 1, 15), 19);
        rsRecord = strPoke(rsRecord, subStr(personName.MiddleName, 1, 15), 34);
        rsRecord = strPoke(rsRecord, subStr(personName.LastName, 1, 20), 49);
        rsRecord = strPoke(rsRecord, subStr(this.personalSuffix(),1,4),69);

        //
        // Not currently supported:
        //   Location address
        //
        rsRecord = strPoke(rsRecord, subStr(blank, 1, 22), 73);

        rsRecord = strPoke(rsRecord, subStr(strReplace(postalAddressWorker.Street,'\n',' '),1,22),95);
        rsRecord = strPoke(rsRecord, subStr(workerCity,1,22),117);
        rsRecord = strPoke(rsRecord, subStr(workerState,1,2),139);
        rsRecord = strPoke(rsRecord, subStr(workerZipCode,1,5),141);
        rsRecord = strPoke(rsRecord, subStr(workerZipCodeExtension,1,4),146);

        rsRecord = strPoke(rsRecord, subStr(reservedForSSA, 1 , 5), 150);
        rsRecord = strPoke(rsRecord, subStr(workerForeignStateProvince, 1, 23), 155);
        rsRecord = strPoke(rsRecord, subStr(workerForeignPostalCode, 1, 15), 178);
        rsRecord = strPoke(rsRecord, subStr(workerCountryFIPSCode, 1, 2), 193);

        //
        // Not currently supported:
        //   Optional code
        //   Reporting period
        //   State quarterly unemployment insurance total wages
        //   State quarterly unemployment insurance total taxable wages
        //   Number of weeks worked,
        //   Date first employed
        //   Date of separation
        //
        rsRecord = strPoke(rsRecord, subStr(blank, 1, 2), 195);
        rsRecord = strPoke(rsRecord, subStr(blank, 1, 6), 197);
        rsRecord = strPoke(rsRecord, subStr(fillzero, 1, 11), 203);
        rsRecord = strPoke(rsRecord, subStr(fillzero, 1, 11), 214);
        rsRecord = strPoke(rsRecord, subStr(blank, 1, 2), 225);
        rsRecord = strPoke(rsRecord, subStr(blank, 1, 8), 227);
        rsRecord = strPoke(rsRecord, subStr(blank, 1, 8), 235);

        rsRecord = strPoke(rsRecord, subStr(reservedForSSA,1,5),243);
        rsRecord = strPoke(rsRecord, subStr(stateEmployerAccountNumber, 1, 20), 248);
        rsRecord = strPoke(rsRecord, subStr(reservedForSSA, 1, 6), 268);
        rsRecord = strPoke(rsRecord, subStr(this.convertNumFormat(stateId, 2), 1, 2), 274);
        rsRecord = strPoke(rsRecord, subStr(this.convertAmountFormat(wagesTips_state, 11), 1, 11), 276);
        rsRecord = strPoke(rsRecord, subStr(this.convertAmountFormat(stateWithholding,11), 1, 11), 287);

        //
        // Not currently supported:
        //   Other state data
        //   Tax type code
        //   Local taxable wages
        //   local income tax withheld
        //   State control number
        //
        rsRecord = strPoke(rsRecord, subStr(blank, 1, 10),298);
        rsRecord  = strPoke(rsRecord, subStr(blank, 1, 1),308);
        rsRecord = strPoke(rsRecord, subStr(fillzero, 1, 11),309);
        rsRecord = strPoke(rsRecord, subStr(fillzero, 1, 11),320);
        rsRecord = strPoke(rsRecord, subStr(fillzero, 1, 7),331);

        // Supplemental data to be defined by the user
        rsRecord = strPoke(rsRecord, subStr(blank, 1, 75), 338);
        rsRecord = strPoke(rsRecord, subStr(blank, 1, 75), 413);

        rsRecord = strPoke(rsRecord, subStr(reservedForSSA, 1, 25), 488);

        return rsRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the RT line, totals record, of the electronic W-2 file.
    /// </summary>
    /// <returns>
    /// String representing the RT line of the electronic W-2 file.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str createRT()
    {
        const str recordIdentifier = 'RT';

        str rtRecord    = strRep(' ', 512);
        str blank       = strRep(' ', 120);
        str fillzero    = strRep('0', 40);
        str reservedForSSA = blank;

        rtRecord = strPoke(rtRecord, recordIdentifier, 1);
        rtRecord = strPoke(rtRecord, subStr(this.convertNumFormat(numberOfRecordsRW, 7), 1, 7), 3);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(wagesTipsTotal, 15), 1, 15), 10);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(federalTotal, 15), 1, 15), 25);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(socialSecurityWagesTotal, 15), 1, 15), 40);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(socialSecurityTaxTotal, 15), 1, 15), 55);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(medicareWagesTotal, 15), 1, 15), 70);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(medicareTaxTotal, 15), 1, 15), 85);

        //
        // Not currently supported:
        //   Social Security tips
        //   Advanced earned income credit
        //
        rtRecord = strPoke(rtRecord, subStr(fillzero, 1, 15), 100);
        rtRecord = strPoke(rtRecord, subStr(fillzero, 1, 15), 115);

        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox10, 15), 1, 15), 130);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12D, 15), 1, 15), 145);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12E, 15), 1, 15), 160);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12F, 15), 1, 15), 175);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12G, 15), 1, 15), 190);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12H, 15), 1, 15), 205);

        //
        // Not currently supported:
        //   Military Employee Basic Quarters, Subsistence and Combat Pay;
        //   Non-qualified Plan Section 457 Distributions or Contributions
        //
        rtRecord = strPoke(rtRecord, subStr(fillzero, 1, 15), 220);
        rtRecord = strPoke(rtRecord, subStr(fillzero, 1, 15), 235);

        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12W, 15) ,1, 15), 250);

        //
        // Not currently supported:
        //   Non-qualified Plan Not Section 457 Distributions or Contributions
        //
        rtRecord = strPoke(rtRecord, subStr(fillzero, 1, 15), 265);

        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12Q, 15), 1, 15), 280);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12DD, 15), 1, 15), 295);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12C, 15), 1, 15), 310);

        //
        // Not currently supported:
        //   Income Tax Withheld by Payer of Third-Party Sick Pay
        //
        rtRecord = strPoke(rtRecord, subStr(fillzero, 1, 15), 325);

        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12V, 15), 1, 15), 340);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12Y, 15), 1, 15), 355);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12AA, 15), 1, 15), 370);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12BB, 15), 1, 15), 385);
        rtRecord = strPoke(rtRecord, subStr(this.convertAmountFormat(totalBox12FF, 15), 1, 15), 400);

        rtRecord = strPoke(rtRecord, subStr(reservedForSSA, 1, 98), 415);

        return rtRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the RU line, totals record, of the electronic W-2 file.
    /// </summary>
    /// <returns>
    /// String representing the RU line of the electronic W-2 file.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str createRU()
    {
        str         ruRecord        = strRep(' ', 512);
        str         blank           = strRep(' ', 200);
        str         fillzero        = strRep('0', 40);
        str         reservedForSSA  = blank;
        Amount      uncollectedEmployeeTipTaxes;

        uncollectedEmployeeTipTaxes = (totalBox12A + totalBox12B);

        ruRecord = strPoke(ruRecord,'RU', 1);
        ruRecord = strPoke(ruRecord, subStr(this.convertNumFormat(numberOfRecordsRO,7),1,7),3);

        //
        // Not currently supported:
        //   Allocated tips
        //
        ruRecord = strPoke(ruRecord, subStr(fillzero, 1, 15), 10);

        ruRecord = strPoke(ruRecord, subStr(this.convertAmountFormat(uncollectedEmployeeTipTaxes, 15), 1, 15), 25);
        ruRecord = strPoke(ruRecord, subStr(this.convertAmountFormat(totalBox12R, 15), 1, 15), 40);
        ruRecord = strPoke(ruRecord, subStr(this.convertAmountFormat(totalBox12S, 15), 1, 15), 55);
        ruRecord = strPoke(ruRecord, subStr(this.convertAmountFormat(totalBox12T, 15), 1, 15), 70);
        ruRecord = strPoke(ruRecord, subStr(this.convertAmountFormat(totalBox12M, 15), 1, 15), 85);
        ruRecord = strPoke(ruRecord, subStr(this.convertAmountFormat(totalBox12N, 15), 1, 15), 100);
        ruRecord = strPoke(ruRecord, subStr(this.convertAmountFormat(totalBox12Z, 15), 1, 15), 115);
        ruRecord = strPoke(ruRecord, subStr(this.convertAmountFormat(totalBox12CC, 15), 1, 15), 130);
        ruRecord = strPoke(ruRecord, subStr(this.convertAmountFormat(totalBox12EE, 15), 1, 15), 145);

        ruRecord = strPoke(ruRecord, subStr(reservedForSSA, 1, 195), 160);

        //
        // Not currently supported:
        //   Wages subject to Puerto Rico tax
        //   Commissions subject to Puerto Rico tax
        //   Allowances subject to Puerto Rico tax
        //   Tips subject to Puerto Rico tax
        //   Total wages, commissions, tips and allowances subject to Puerto Rico tax;
        //   Puerto Rico tax withheld
        //   Retirement fund annual contributions
        //   Total wages, tips and other compensation subject to U.S. Virgin Islands, Guam, American Samoa or Northern Mariana Islands income tax
        //   U.S. Virgin Islands, Guam, American Samoa or Northern Mariana Islands income tax withheld
        //
        ruRecord = strPoke(ruRecord, subStr(fillzero, 1, 15), 355);
        ruRecord = strPoke(ruRecord, subStr(fillzero, 1, 15), 370);
        ruRecord = strPoke(ruRecord, subStr(fillzero, 1, 15), 385);
        ruRecord = strPoke(ruRecord, subStr(fillzero, 1, 15), 400);
        ruRecord = strPoke(ruRecord, subStr(fillzero, 1, 15), 415);
        ruRecord = strPoke(ruRecord, subStr(fillzero, 1, 15), 430);
        ruRecord = strPoke(ruRecord, subStr(fillzero, 1, 15), 445);
        ruRecord = strPoke(ruRecord, subStr(fillzero, 1, 15), 460);
        ruRecord = strPoke(ruRecord, subStr(fillzero, 1, 15), 475);

        ruRecord = strPoke(ruRecord, subStr(reservedForSSA, 1, 23), 490);

        return ruRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRV</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the RV line, state totals record, of the electronic W-2 file.
    /// </summary>
    /// <returns>
    /// String representing the RV line of the electronic W-2 file.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str createRV()
    {
        const str rv = 'RV';
        str rvRecord = strRep(' ', 512);
        str blank = strRep(' ', 510);

        rvRecord = strPoke(rvRecord, rv, 1);

        // Supplemental data to be defined by the user
        rvRecord = strPoke(rvRecord, subStr(blank, 1, 510), 3);

        return rvRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRW</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the RW line, employee wage record, of the electronic W-2 file.
    /// </summary>
    /// <returns>
    /// String representing the RW line of the electronic W-2 file.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected str createRW()
    {
        const str recordIdentifier = 'RW';
        str rwRecord                    = strRep(' ', 512);
        str blank                       = strRep(' ', 40);
        str fillzero                    = strRep('0', 40);
        str reservedForSSA              = blank;
        str statutoryEmployeeIndicator  = int2str(PRLW2File::box13Indicator(worker.RecId, #STATUTORYEMPLOYEE, todate, legalEntity));
        str retirementPlanIndicator     = int2str(PRLW2File::box13Indicator(worker.RecId, #RETIREMENTPLAN, todate, legalEntity));
        str thirdPartySickPayIndicator  = int2str(PRLW2File::box13Indicator(worker.RecId, #THIRDPARTYSICKPAY, todate, legalEntity));

        rwRecord = strPoke(rwRecord, recordIdentifier, 1);
        rwRecord = strPoke(rwRecord, subStr(this.socialSecurityNumber(), 1, 9), 3);
        rwRecord = strPoke(rwRecord, subStr(personName.FirstName, 1, 15), 12);
        rwRecord = strPoke(rwRecord, subStr(personName.MiddleName, 1,15 ), 27);
        rwRecord = strPoke(rwRecord, subStr(personName.LastName,1,20),42);
        rwRecord = strPoke(rwRecord, subStr(this.personalSuffix(),1,4),62);

        //
        // Not currently supported:
        //   Location address (Attention, Suite, Room Number, etc.)
        //
        rwRecord = strPoke(rwRecord, subStr(blank, 1, 22), 66);

        rwRecord = strPoke(rwRecord, subStr(strReplace(postalAddressWorker.Street,'\n',' '), 1, 22), 88);
        rwRecord = strPoke(rwRecord, subStr(workerCity, 1, 22), 110);
        rwRecord = strPoke(rwRecord, subStr(workerState, 1, 2), 132);
        rwRecord = strPoke(rwRecord, subStr(workerZipCode, 1, 5), 134);
        rwRecord = strPoke(rwRecord, subStr(workerZipCodeExtension, 1, 4), 139);

        rwRecord = strPoke(rwRecord, subStr(reservedForSSA,1, 5), 143);
        rwRecord = strPoke(rwRecord, subStr(workerForeignStateProvince,1, 23), 148);
        rwRecord = strPoke(rwRecord, subStr(workerForeignPostalCode, 1, 15), 171);
        rwRecord = strPoke(rwRecord, subStr(workerCountryFIPSCode, 1, 2), 186);

        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(wagesTips, 11), 1, 11), 188);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(federal, 11), 1, 11), 199);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(socialSecWages, 11), 1, 11), 210);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(socialSecurityTax, 11), 1, 11), 221);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(medicareWages, 11), 1, 11), 232);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(medicareTax, 11), 1, 11), 243);

        //
        // Not currently supported:
        //   Social Security tips
        //   Advanced earned income credit
        //
        rwRecord = strPoke(rwRecord, subStr(fillzero, 1, 11), 254);
        rwRecord = strPoke(rwRecord, subStr(fillzero, 1, 11), 265);

        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox10,  11), 1, 11), 276);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12D, 11), 1, 11), 287);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12E, 11), 1, 11), 298);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12F, 11), 1, 11), 309);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12G, 11), 1, 11), 320);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12H, 11), 1, 11), 331);

        //
        // Not currently supported:
        // Military employee basic quarters, substinence, and combat pay
        // Non-qualified Plan Section 457 Distributions or Contributions
        //
        rwRecord = strPoke(rwRecord, subStr(fillzero,1,11),342);
        rwRecord = strPoke(rwRecord, subStr(fillzero,1,11),353);

        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12W, 11), 1, 11), 364);

        //
        // Not currently supported:
        //   Non-qualified Plan Not Section 457 Distributions or Contributions
        //
        rwRecord = strPoke(rwRecord, subStr(fillzero,1,11),375);

        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12Q, 11), 1, 11), 386);
        rwRecord = strPoke(rwRecord, subStr(reservedForSSA, 1, 11), 397);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12C, 11), 1, 11), 408);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12V, 11), 1, 11), 419);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12Y, 11), 1, 11), 430);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12AA, 11), 1, 11), 441);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12BB, 11), 1, 11), 452);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12DD, 11), 1, 11), 463);
        rwRecord = strPoke(rwRecord, subStr(this.convertAmountFormat(employeeBox12FF, 11), 1, 11), 474);

        rwRecord = strPoke(rwRecord, subStr(reservedForSSA, 1, 1), 485);
        rwRecord = strPoke(rwRecord, statutoryEmployeeIndicator,  486);
        rwRecord = strPoke(rwRecord, subStr(reservedForSSA, 1 , 1), 487);
        rwRecord = strPoke(rwRecord, retirementPlanIndicator, 488);
        rwRecord = strPoke(rwRecord, thirdPartySickPayIndicator, 489);
        rwRecord = strPoke(rwRecord, subStr(reservedForSSA, 1, 23), 490);

        return rwRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase    dialog = Dialog::newFormnameRunbase(formStr(PayrollW2ElectronicDialog), this);
        dialog = this.dialogInternal(dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyPrimaryAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the company's primary address.
    /// </summary>
    /// <param name="_companyRecId">
    ///     The company record id to be used to find the primary address.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void getCompanyPrimaryAddress(CompanyInfoRecId _companyRecId)
    {
        if (!postalAddressCompany)
        {
            postalAddressCompany = DirParty::primaryPostalAddress(CompanyInfo::current(), pointInTime);
        }

        if (!countryRegionUnitedStates)
        {
            countryRegionUnitedStates = this.getUnitedStatesCountryRegionId();
        }

        // Only allow city, state, zip code values within the United States
        if (postalAddressCompany.CountryRegionId == countryRegionUnitedStates)
        {
            companyState = postalAddressCompany.State;
            companyZipCode = postalAddressCompany.ZipCode;
            companyZipCodeExtension = this.getZipCodeExtension(postalAddressCompany.ZipCode);
            companyForeignPostalCode = '';
            companyForeignStateProvince = '';
        }
        else
        {
            companyState = '';
            companyZipCode = '';
            workerZipCodeExtension = '';
            companyForeignPostalCode = postalAddressCompany.ZipCode;
            companyForeignStateProvince = LogisticsAddressState::find(postalAddressCompany.CountryRegionId, postalAddressCompany.State).Name;
        }

        companyForeignCountryRegionISOCode = LogisticsAddressCountryRegion::find(postalAddressCompany.CountryRegionId).isOcode;
        companyCountryFIPSCode = this.getFIPSCode(companyForeignCountryRegionISOCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFIPSCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the FIPS code assigned for a country.
    /// </summary>
    /// <param name="_isoCode">
    /// The ISO Code for a country.
    /// </param>
    /// <returns>
    /// The FIPS code for a country.
    /// </returns>
    /// <remarks>
    /// Uses the National Geospatial-Intelligence Agency's (NGA) FIPS 10-4 Publication's assignment of country codes.
    /// </remarks>
    private str 2 getFIPSCode(LogisticsAddressCountryRegionISOCode _isoCode)
    {
        const str blank = '  ';
        str 2 fipsCode;

        switch (_isoCode)
        {
            case'AF':
                // Afghanistan
                fipsCode = 'AF';
                break;
            case'AX':
                // Other Countries
                fipsCode = 'OC';
                break;
            case'AL':
                // Albania
                fipsCode = 'AL';
                break;
            case'DZ':
                // Algeria
                fipsCode = 'AG';
                break;
            case'AS':
                // American Samoa
                fipsCode = blank;
                break;
            case'AD':
                // Andorra
                fipsCode = 'AN';
                break;
            case'AO':
                // Angola
                fipsCode = 'AO';
                break;
            case'AI':
                // Anguilla
                fipsCode = 'AV';
                break;
            case'AQ':
                // Antarctica
                fipsCode = 'AY';
                break;
            case'AG':
                // Antigua and Barbuda
                fipsCode = 'AC';
                break;
            case'AR':
                // Argentina
                fipsCode = 'AR';
                break;
            case'AM':
                // Armenia
                fipsCode = 'AM';
                break;
            case'AW':
                // Aruba
                fipsCode = 'AA';
                break;
            case'AU':
                // Australia
                fipsCode = 'AS';
                break;
            case'AT':
                // Austria
                fipsCode = 'AU';
                break;
            case'AZ':
                // Azerbaijan
                fipsCode = 'AJ';
                break;
            case'BS':
                // Bahamas, The
                fipsCode = 'BF';
                break;
            case'BH':
                // Bahrain
                fipsCode = 'BA';
                break;
            case'BD':
                // Bangladesh
                fipsCode = 'BG';
                break;
            case'BB':
                // Barbados
                fipsCode = 'BB';
                break;
            case'BY':
                // Belarus
                fipsCode = 'BO';
                break;
            case'BE':
                // Belgium
                fipsCode = 'BE';
                break;
            case'BZ':
                // Belize
                fipsCode = 'BH';
                break;
            case'BJ':
                // Benin
                fipsCode = 'BN';
                break;
            case'BM':
                // Bermuda
                fipsCode = 'BD';
                break;
            case'BT':
                // Bhutan
                fipsCode = 'BT';
                break;
            case'BO':
                // Bolivia
                fipsCode = 'BL';
                break;
            case'BA':
                // Bosnia-Herzegovina
                fipsCode = 'BK';
                break;
            case'BW':
                // Botswana
                fipsCode = 'BC';
                break;
            case'BV':
                // Bouvet Island
                fipsCode = 'BV';
                break;
            case'BR':
                // Brazil
                fipsCode = 'BR';
                break;
            case'IO':
                // British Indian Ocean Territory
                fipsCode = 'IO';
                break;
            case'VG':
                // British Virgin Islands
                fipsCode = 'VI';
                break;
            case'BN':
                // Brunei
                fipsCode = 'BX';
                break;
            case'BG':
                // Bulgaria
                fipsCode = 'BU';
                break;
            case'BF':
                // Burkina Faso
                fipsCode = 'UV';
                break;
            case'BU':
                // Myanmar
                fipsCode = 'BM';
                break;
            case'BI':
                // Burundi
                fipsCode = 'BY';
                break;
            case'KH':
                // Cambodia
                fipsCode = 'CB';
                break;
            case'CM':
                // Cameroon
                fipsCode = 'CM';
                break;
            case'CA':
                // Canada
                fipsCode = 'CA';
                break;
            case'CV':
                // Cabo Verde
                fipsCode = 'CV';
                break;
            case'KY':
                // Cayman Islands
                fipsCode = 'CJ';
                break;
            case'CF':
                // Central African Republic
                fipsCode = 'CT';
                break;
            case'TD':
                // Chad
                fipsCode = 'CD';
                break;
            case'CL':
                // Chile
                fipsCode = 'CI';
                break;
            case'CN':
                // China, People's Republic of
                fipsCode = 'CH';
                break;
            case'CX':
                // Christmas Island (Indian Ocean)
                fipsCode = 'KT';
                break;
            case'CP':
                // Cocos (Keeling) Islands
                fipsCode = 'CK';
                break;
            case'CC':
                // Clipperton Island
                fipsCode = 'IP';
                break;
            case'CO':
                // Colombia
                fipsCode = 'CO';
                break;
            case'KM':
                // Comoros
                fipsCode = 'CN';
                break;
            case'CG':
                // Congo (Republic of)
                fipsCode = 'CF';
                break;
            case'CD':
                // Congo (Democratic Republic of)
                fipsCode = 'CG';
                break;
            case'CK':
                // Cook Islands
                fipsCode = 'CW';
                break;
            case'CR':
                // Costa Rica
                fipsCode = 'CS';
                break;
            case'CI':
                // Cote d'ivoire (Ivory Coast)
                fipsCode = 'IV';
                break;
            case'HR':
                // Croatia
                fipsCode = 'HR';
                break;
            case'CU':
                // Cuba
                fipsCode = 'CU';
                break;
            case'CW':
                // Curaco
                fipsCode = 'UC';
                break;
            case'CY':
                // Cyprus
                fipsCode = 'CY';
                break;
            case'CZ':
                // Czech Republic
                fipsCode = 'EZ';
                break;
            case'DK':
                // Denmark
                fipsCode = 'DA';
                break;
            case'DJ':
                // Djibouti
                fipsCode = 'DJ';
                break;
            case'DM':
                // Dominica
                fipsCode = 'DO';
                break;
            case'DO':
                // Dominican Republic
                fipsCode = 'DR';
                break;
            case'EC':
                // Ecuador
                fipsCode = 'EC';
                break;
            case'EG':
                // Egypt
                fipsCode = 'EG';
                break;
            case'SV':
                // El Salvador
                fipsCode = 'ES';
                break;
            case'GQ':
                // Equatorial Guinea
                fipsCode = 'EK';
                break;
            case'ER':
                // Eritrea
                fipsCode = 'ER';
                break;
            case'EE':
                // Estonia
                fipsCode = 'EN';
                break;
            case'ET':
                // Ethiopia
                fipsCode = 'ET';
                break;
            case'FK':
                // Falkland Islands
                fipsCode = 'FK';
                break;
            case'FO':
                // Faroe Islands
                fipsCode = 'FO';
                break;
            case'FJ':
                // Fiji
                fipsCode = 'FJ';
                break;
            case'FI':
                // Finland
                fipsCode = 'FI';
                break;
            case'FR':
                // France
                fipsCode = 'FR';
                break;
            case'GF':
                // French Guiana
                fipsCode = 'FG';
                break;
            case'PF':
                // French Polynesia
                fipsCode = 'FP';
                break;
            case'TF':
                // French Southern and Antarctic Lands
                fipsCode = 'FS';
                break;
            case'GA':
                // Gabon
                fipsCode = 'GB';
                break;
            case'GM':
                // Gambia, The
                fipsCode = 'GA';
                break;
            case'GE':
                // Georgia
                fipsCode = 'GG';
                break;
            case'DE':
                // Germany
                fipsCode = 'GM';
                break;
            case'GH':
                // Ghana
                fipsCode = 'GH';
                break;
            case'GI':
                // Gibraltar
                fipsCode = 'GI';
                break;
            case'GR':
                // Greece
                fipsCode = 'GR';
                break;
            case'GL':
                // Greenland
                fipsCode = 'GL';
                break;
            case'GD':
                // Grenada
                fipsCode = 'GJ';
                break;
            case'GP':
                // Guadeloupe
                fipsCode = 'GP';
                break;
            case'GU':
                // Guam
                fipsCode = blank;
                break;
            case'GT':
                // Guatemala
                fipsCode = 'GT';
                break;
            case'GG':
                // Guernsey
                fipsCode = 'GK';
                break;
            case'GN':
                // Guinea
                fipsCode = 'GV';
                break;
            case'GW':
                // Guinea-Bissau
                fipsCode = 'PU';
                break;
            case'GY':
                // Guyana
                fipsCode = 'GY';
                break;
            case'HT':
                // Haiti
                fipsCode = 'HA';
                break;
            case'HM':
                // Heard Island and McDonald Island
                fipsCode = 'HM';
                break;
            case'HN':
                // Honduras
                fipsCode = 'HO';
                break;
            case'HK':
                // Hong Kong SAR
                fipsCode = 'HK';
                break;
            case'HU':
                // Hungary
                fipsCode = 'HU';
                break;
            case'IS':
                // Iceland
                fipsCode = 'IC';
                break;
            case'IN':
                // India
                fipsCode = 'IN';
                break;
            case'ID':
                // Indonesia
                fipsCode = 'ID';
                break;
            case'IR':
                // Iran
                fipsCode = 'IR';
                break;
            case'IQ':
                // Iraq
                fipsCode = 'IZ';
                break;
            case'IE':
                // Ireland
                fipsCode = 'EI';
                break;
            case'IL':
                // Israel
                fipsCode = 'IS';
                break;
            case'IT':
                // Italy
                fipsCode = 'IT';
                break;
            case'JM':
                // Jamaica
                fipsCode = 'JM';
                break;
            case'JP':
                // Japan
                fipsCode = 'JA';
                break;
            case'JE':
                // Jersey
                fipsCode = 'JE';
                break;
            case'JO':
                // Jordan
                fipsCode = 'JO';
                break;
            case'KZ':
                // Kazakhstan
                fipsCode = 'KZ';
                break;
            case'KE':
                // Kenya
                fipsCode = 'KE';
                break;
            case'KI':
                // Kiribati
                fipsCode = 'KR';
                break;
            case'KR':
                // Korea, Republic of (South)
                fipsCode = 'KS';
                break;
            case'KW':
                // Kuwait
                fipsCode = 'KU';
                break;
            case'KG':
                // Kyrgyzstan
                fipsCode = 'KG';
                break;
            case'LA':
                // Laos
                fipsCode = 'LA';
                break;
            case'LV':
                // Latvia
                fipsCode = 'LG';
                break;
            case'LB':
                // Lebanon
                fipsCode = 'LE';
                break;
            case'LS':
                // Lesotho
                fipsCode = 'LT';
                break;
            case'LR':
                // Liberia
                fipsCode = 'LI';
                break;
            case'LY':
                // Libya
                fipsCode = 'LY';
                break;
            case'LI':
                // Liechtenstein
                fipsCode = 'LS';
                break;
            case'LT':
                // Lithuania
                fipsCode = 'LH';
                break;
            case'LU':
                // Luxembourg
                fipsCode = 'LU';
                break;
            case'MO':
                // Macao SAR
                fipsCode = 'MC';
                break;
            case'MK':
                // North Macedonia
                fipsCode = 'MK';
                break;
            case'MG':
                // Madagascar
                fipsCode = 'MA';
                break;
            case'MW':
                // Malawi
                fipsCode = 'MI';
                break;
            case'MY':
                // Malaysia
                fipsCode = 'MY';
                break;
            case'MV':
                // Maldives
                fipsCode = 'MV';
                break;
            case'ML':
                // Mali
                fipsCode = 'ML';
                break;
            case'MT':
                // Malta
                fipsCode = 'MT';
                break;
            case'IM':
                // Isle of Man
                fipsCode = 'IM';
                break;
            case'MH':
                // Marshall Islands
                fipsCode = 'RM';
                break;
            case'MQ':
                // Martinique
                fipsCode = 'MB';
                break;
            case'MR':
                // Mauritania
                fipsCode = 'MR';
                break;
            case'MU':
                // Mauritius
                fipsCode = 'MP';
                break;
            case'YT':
                // Mayotte
                fipsCode = 'MF';
                break;
            case'MX':
                // Mexico
                fipsCode = 'MX';
                break;
            case'FM':
                // Micronesia, Federated States of
                fipsCode = 'FM';
                break;
            case'MD':
                // Moldova
                fipsCode = 'MD';
                break;
            case'MC':
                // Monaco
                fipsCode = 'MN';
                break;
            case'MN':
                // Mongolia
                fipsCode = 'MG';
                break;
            case'ME':
                // Montenegro
                fipsCode = 'MJ';
                break;
            case'MS':
                // Montserrat
                fipsCode = 'MH';
                break;
            case'MA':
                // Morocco
                fipsCode = 'MO';
                break;
            case'MZ':
                // Mozambique
                fipsCode = 'MZ';
                break;
            case'MM':
                // Other Countries
                fipsCode = 'OC';
                break;
            case'NA':
                // Nambia
                fipsCode = 'WA';
                break;
            case'NR':
                // Nauru
                fipsCode = 'NR';
                break;
            case'NP':
                // Nepal
                fipsCode = 'NP';
                break;
            case'NL':
                // Netherlands
                fipsCode = 'NL';
                break;
            case'AN':
                // Other Countries
                fipsCode = 'OC';
                break;
            case'NC':
                // New Caledonia
                fipsCode = 'NC';
                break;
            case'NZ':
                // New Zealand
                fipsCode = 'NZ';
                break;
            case'NI':
                // Nicaragua
                fipsCode = 'NU';
                break;
            case'NE':
                // Niger
                fipsCode = 'NG';
                break;
            case'NG':
                // Nigeria
                fipsCode = 'NI';
                break;
            case'NU':
                // Niue
                fipsCode = 'NE';
                break;
            case'NF':
                // Norfolk Island
                fipsCode = 'NF';
                break;
            case'KP':
                // Korea, Democratic People's Republic of (North)
                fipsCode = 'KN';
                break;
            case'MP':
                // Northern Mariana Islands
                fipsCode = blank;
                break;
            case'NO':
                // Norway
                fipsCode = 'NO';
                break;
            case'OM':
                // Oman
                fipsCode = 'MU';
                break;
            case'PK':
                // Pakistan
                fipsCode = 'PK';
                break;
            case'PW':
                // Palau
                fipsCode = 'PS';
                break;
            case'PS':
                // Other Countries
                fipsCode = 'OC';
                break;
            case'PA':
                // Panama
                fipsCode = 'PM';
                break;
            case'PG':
                // Papua New Guinea
                fipsCode = 'PP';
                break;
            case'PY':
                // Paraguay
                fipsCode = 'PA';
                break;
            case'PE':
                // Peru
                fipsCode = 'PE';
                break;
            case'PH':
                // Philippines
                fipsCode = 'RP';
                break;
            case'PN':
                // Pitcairn Island
                fipsCode = 'PC';
                break;
            case'PL':
                // Poland
                fipsCode = 'PL';
                break;
            case'PT':
                // Portugal
                fipsCode = 'PO';
                break;
            case'PR':
                // Puerto Rico
                fipsCode = blank;
                break;
            case'QA':
                // Qatar
                fipsCode = 'QA';
                break;
            case'RE':
                // Reunion
                fipsCode = 'RE';
                break;
            case'RO':
                // Romania
                fipsCode = 'RO';
                break;
            case'RU':
                // Russia
                fipsCode = 'RS';
                break;
            case'RW':
                // Rwanda
                fipsCode = 'RW';
                break;
            case'BL':
                // St Barthelemy
                fipsCode = 'TB';
                break;
            case'SH':
                // St Helena
                fipsCode = 'SH';
                break;
            case'KN':
                // St Kitts and Nevis
                fipsCode = 'SC';
                break;
            case'LC':
                // St Lucia
                fipsCode = 'ST';
                break;
            case'MF':
                // St Martin
                fipsCode = 'RN';
                break;
            case'PM':
                // St Pierre and Miquelon
                fipsCode = 'SB';
                break;
            case'VC':
                // St Vincent and the Grenadines
                fipsCode = 'VC';
                break;
            case'WS':
                // Samoa
                fipsCode = 'WS';
                break;
            case'SM':
                // San Marino
                fipsCode = 'SM';
                break;
            case'ST':
                // Sao Tome and Principe
                fipsCode = 'TP';
                break;
            case'SA':
                // Saudi Arabia
                fipsCode = 'SA';
                break;
            case'SN':
                // Senegal
                fipsCode = 'SG';
                break;
            case'RS':
                // Serbia
                fipsCode = 'RI';
                break;
            case'SC':
                // Seychelles
                fipsCode = 'SE';
                break;
            case'SL':
                // Sierra Leone
                fipsCode = 'SL';
                break;
            case'SG':
                // Singapore
                fipsCode = 'SN';
                break;
            case'SX':
                // Sint Maarten
                fipsCode = 'NN';
                break;
            case'SK':
                // Slovakia
                fipsCode = 'LO';
                break;
            case'SI':
                // Slovenia
                fipsCode = 'SI';
                break;
            case'SB':
                // Solomon Islands
                fipsCode = 'BP';
                break;
            case'SO':
                // Somalia
                fipsCode = 'SO';
                break;
            case'ZA':
                // South Africa
                fipsCode = 'SF';
                break;
            case'GS':
                // South Georgia and South Sandwich Islands
                fipsCode = 'SX';
                break;
            case'ES':
                // Spain
                fipsCode = 'SP';
                break;
            case'LK':
                // Sri Lanka
                fipsCode = 'CE';
                break;
            case'SD':
                // Sudan
                fipsCode = 'SU';
                break;
            case'SR':
                // Suriname
                fipsCode = 'NS';
                break;
            case'SJ':
                // Svalbard
                fipsCode = 'SV';
                break;
            case'SZ':
                // Swaziland
                fipsCode = 'WZ';
                break;
            case'SE':
                // Sweden
                fipsCode = 'SW';
                break;
            case'CH':
                // Switzerland
                fipsCode = 'SZ';
                break;
            case'SY':
                // Syria
                fipsCode = 'SY';
                break;
            case'TW':
                // Taiwan
                fipsCode = 'TW';
                break;
            case'TJ':
                // Tajikistan
                fipsCode = 'TI';
                break;
            case'TZ':
                // Tanzania, United Republic of
                fipsCode = 'TZ';
                break;
            case'TH':
                // Thailand
                fipsCode = 'TH';
                break;
            case'TL':
                // Timore-Leste
                fipsCode = 'TT';
                break;
            case'TG':
                // Togo
                fipsCode = 'TO';
                break;
            case'TK':
                // Tokelau
                fipsCode = 'TL';
                break;
            case'TO':
                // Tonga
                fipsCode = 'TN';
                break;
            case'TT':
                // Trinidad and Tobago
                fipsCode = 'TD';
                break;
            case'TN':
                // Tunisia
                fipsCode = 'TS';
                break;
            case'TR':
                // Turkey
                fipsCode = 'TU';
                break;
            case'TM':
                // Turkmenistan
                fipsCode = 'TX';
                break;
            case'TC':
                // Turks and Caicos Islands
                fipsCode = 'TK';
                break;
            case'TV':
                // Tuvalu
                fipsCode = 'TV';
                break;
            case'UM':
                // U.S. Minor Outlying Islands
                fipsCode = blank;
                break;
            case'UG':
                // Uganda
                fipsCode = 'UG';
                break;
            case'UA':
                // Ukraine
                fipsCode = 'UP';
                break;
            case'AE':
                // United Arab Emirates
                fipsCode = 'AE';
                break;
            case'US':
                // United States
                fipsCode = blank;
                break;
            case'UY':
                // Uruguay
                fipsCode = 'UY';
                break;
            case'UZ':
                // Uzbekistan
                fipsCode = 'UZ';
                break;
            case'VU':
                // Vanuatu
                fipsCode = 'NH';
                break;
            case'VA':
                // Vatican City
                fipsCode = 'VT';
                break;
            case'VE':
                // Venezuela
                fipsCode = 'VE';
                break;
            case'VN':
                // Vietnam
                fipsCode = 'VM';
                break;
            case'VI':
                // U.S. Virgin Islands
                fipsCode = blank;
                break;
            case'WF':
                // Wallis and Futuna
                fipsCode = 'WF';
                break;
            case'EH':
                fipsCode = 'WI';
                break;
            case'YE':
                // Yemen
                fipsCode = 'YM';
                break;
            case'ZM':
                // Zambia
                fipsCode = 'ZA';
                break;
            case'ZW':
                // Zimbabwe
                fipsCode = 'ZI';
                break;
            default:
                // Other Countries
                fipsCode = 'OC';
                break;
        }

        return fipsCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxCodeRecId</Name>
				<Source><![CDATA[
    private PayrollTaxCodeRecId getTaxCodeRecId(PayrollTaxCodeType _payrollTaxCodeType)
    {
        PayrollTaxCode  taxCode;

        select firstonly RecId from taxCode
            where taxCode.Type == _payrollTaxCodeType;

        return taxCode.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitedStatesCountryRegionId</Name>
				<Source><![CDATA[
    private LogisticsAddressCountryRegionId getUnitedStatesCountryRegionId()
    {
        LogisticsAddressCountryRegion   countryRegion;

        // Retrieve the CountryRegionID corresponding to the United States
        select firstonly CountryRegionId from countryRegion
            where countryRegion.isOcode == 'US';

        return countryRegion.CountryRegionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getZipCodeExtension</Name>
				<Source><![CDATA[
    private LogisticsAddressZipCodeId getZipCodeExtension(LogisticsAddressZipCodeId _zipCode)
    {
        str blank    = strRep(' ', 4);
        int zipExtensionStart;
        str zipExtension;

        if (strLen(_zipCode) >= 9)
        {
            zipExtensionStart = (strLen(_zipCode) - 3);
            zipExtension = subStr(_zipCode, zipExtensionStart, 4);
        }
        else
        {
            zipExtension = blank;
        }

        return zipExtension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParms</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the parm values for the class.
    /// </summary>
    /// <param name="_pin">
    ///     The PIN assigned to the employee who attests to the accuracy of the electronic Form W-2.
    /// </param>
    /// <param name="_resubmit">
    ///     true if the electronic Form W-2 is being resubmitted; otherwise, false.
    /// </param>
    /// <param name="_taxYear">
    ///     The tax year for the electronic Form W-2.
    /// </param>
    /// <param name="_kindOfEmployer">
    ///     The kind of employer that describes the organization that is submitting the electronic Form W-2.
    /// </param>
    /// <param name="_employmentCode">
    ///     The employment code that applies to the organization that is submitting the electronic Form W-2.
    /// </param>
    /// <param name="_submitterName">
    ///     The name of the employee who can be contacted about the electronic Form W-2.
    /// </param>
    /// <param name="_street">
    ///     The street address or post office box where the contact receives mail.
    /// </param>
    /// <param name="_city">
    ///     The name of the city in which the contact resides.
    /// </param>
    /// <param name="_state">
    ///     The two-letter abbreviation for the state in which the contact resides.
    /// </param>
    /// <param name="_zipCode">
    ///     The ZIP/postal code for the street address or post office box of the contact.
    /// </param>
    /// <param name="_phone">
    ///     The telephone number where the contact can be reached.
    /// </param>
    /// <param name="_fax">
    ///     The fax number where the contact can receive documents.
    /// </param>
    /// <param name="_email">
    ///     The email address where the contact can be reached.
    /// </param>
    /// <param name="_employerName">
    ///     The employer contact name.
    /// </param>
    /// <param name="_employerPhone">
    ///     The employer contact phone.
    /// </param>
    /// <param name="_employerExtension">
    ///     The employer contact phone extension.
    /// </param>
    /// <param name="_employerFax">
    ///     The employer contact fax.
    /// </param>
    /// <param name="_employerEmail">
    ///     The employer contact email.
    /// </param>
    /// <param name="_wageFileIdentifier">
    ///     The wage file identifier (WFID) on the notice from the SSA
    /// </param>
    /// <param name="_employerIdentificationNumber">
    ///     The employer's federal identification, or tax registration, number.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initParms(
        PRLPIN                      _pin,
        boolean                     _resubmit,
        boolean                     _latestName,
        PRLYear                     _taxYear,
        PayrollW2KindOfEmployer     _kindOfEmployer,
        PayrollW2EmploymentCode     _employmentCode,
        Name                        _submitterName,
        LogisticsAddressStreet      _street,
        LogisticsAddressCityName    _city,
        LogisticsAddressStateId     _state,
        LogisticsAddressZipCodeId   _zipCode,
        Phone                       _phone,
        Phone                       _fax,
        Email                       _email,
        Name                        _employerName,
        Phone                       _employerPhone,
        PhoneLocal                  _employerExtension,
        Phone                       _employerFax,
        Email                       _employerEmail,
        PayrollWageFileIdentifier   _wageFileIdentifier,
        Tax1099RegNum               _employerIdentificationNumber
    )
    {
        pin                 = _pin;
        resubmit            = _resubmit;
        latestName          = _latestName;
        wageFileIdentifier  = _wageFileIdentifier;
        taxyear             = _taxYear;
        kindOfEmployer      = _kindOfEmployer;
        employmentCode      = _employmentCode;

        contactName         = _submitterName;
        contactStreet       = _street;
        contactCity         = _city;
        contactState        = _state;
        contactZipCode      = _zipCode;
        contactPhone        = _phone;
        contactFax          = _fax;
        contactEmail        = _email;

        employerContactName         = _employerName;
        employerContactPhoneNumber  = _employerPhone;
        employerContactExtension    = _employerExtension;
        employerContactFaxNumber    = _employerFax;
        employerContactEmail        = _employerEmail;

        employerIdentificationNumber = _employerIdentificationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the query to be used within the class.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void initQuery()
    {
        queryRun = new SysQueryRun(queryStr(PayrollW2Report));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorker</Name>
				<Source><![CDATA[
    private void initWorker()
    {
        postalAddressWorker = DirParty::primaryPostalAddress(worker.Person, pointInTime);
        person = DirPerson::find(worker.Person);

        // Only allow city, state, zip code values within the United States
        if (postalAddressWorker.CountryRegionId == countryRegionUnitedStates)
        {
            workerCity = postalAddressWorker.City;
            workerState = postalAddressWorker.State;
            workerZipCode = postalAddressWorker.ZipCode;
            workerZipCodeExtension = this.getZipCodeExtension(postalAddressWorker.ZipCode);
            workerForeignPostalCode = '';
            workerForeignStateProvince = '';
        }
        else
        {
            workerCity = '';
            workerState = '';
            workerZipCode = '';
            workerZipCodeExtension = '';
            workerForeignPostalCode = postalAddressWorker.ZipCode;
            workerForeignStateProvince = LogisticsAddressState::find(postalAddressWorker.CountryRegionId, postalAddressWorker.State).Name;
        }

        workerForeignCountryRegionISOCode = LogisticsAddressCountryRegion::find(postalAddressWorker.CountryRegionId).isOcode;
        workerCountryFIPSCode = this.getFIPSCode(workerForeignCountryRegionISOCode);

        personName = HcmWorker::getDirPersonNameByTimeState(worker.Person, pointInTime);

        select IdentificationNumber from personIdentification
            where personIdentification.Person == worker.Person
                && personIdentification.IdentificationType == socialSecurityIdentificationType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        // If the query has yet to be initialized at this point, we need to do so
        // so that the pack won't fail.
        if (queryRun == null)
        {
            this.initQuery();
        }

        return [currentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactCity</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressCityName parmContactCity(LogisticsAddressCityName _contactCity = contactCity)
    {
        contactCity = _contactCity;

        return contactCity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactEmail</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Email parmContactEmail(Email _contactEmail = contactEmail)
    {
        contactEmail = _contactEmail;

        return contactEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactFax</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Phone parmContactFax(Phone _contactFax = contactFax)
    {
        contactFax = _contactFax;

        return contactFax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Name parmContactName(Name _contactName = contactName)
    {
        contactName = _contactName;

        return contactName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactPhone</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Phone parmContactPhone(Phone _contactPhone = contactPhone)
    {
        contactPhone = _contactPhone;

        return contactPhone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactState</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressStateId parmContactState(LogisticsAddressStateId _contactState = contactState)
    {
        contactState = _contactState;

        return contactState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactStreet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressStreet parmContactStreet(LogisticsAddressStreet _contactStreet = contactStreet)
    {
        contactStreet = _contactStreet;

        return contactStreet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContactZipCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LogisticsAddressZipCodeId parmContactZipCode(LogisticsAddressZipCodeId _contactZipCode = contactZipCode)
    {
        contactZipCode = _contactZipCode;

        return contactZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmployerContactEmail</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Email parmEmployerContactEmail(Email _employerContactEmail = employerContactEmail)
    {
        employerContactEmail = _employerContactEmail;

        return employerContactEmail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmployerContactExtension</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PhoneLocal parmEmployerContactExtension(PhoneLocal _employerContactExtension = employerContactExtension)
    {
        employerContactExtension = _employerContactExtension;

        return employerContactExtension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmployerContactFaxNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Phone parmEmployerContactFaxNumber(Phone _employerContactFaxNumber = employerContactFaxNumber)
    {
        employerContactFaxNumber = _employerContactFaxNumber;

        return employerContactFaxNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmployerContactName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Name parmEmployerContactName(Name _employerContactName = employerContactName)
    {
        employerContactName = _employerContactName;

        return employerContactName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmployerContactPhoneNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Phone parmEmployerContactPhoneNumber(Phone _employerContactPhoneNumber = employerContactPhoneNumber)
    {
        employerContactPhoneNumber = _employerContactPhoneNumber;

        return employerContactPhoneNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmployerIdentificationNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Tax1099RegNum parmEmployerIdentificationNumber(Tax1099RegNum _employerIdentificationNumber = employerIdentificationNumber)
    {
        employerIdentificationNumber = _employerIdentificationNumber;

        return employerIdentificationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEmploymentCode</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollW2EmploymentCode parmEmploymentCode(PayrollW2EmploymentCode _employmentCode = employmentCode)
    {
        employmentCode = _employmentCode;

        return employmentCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKindOfEmployer</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollW2KindOfEmployer parmKindOfEmployer(PayrollW2KindOfEmployer _kindOfEmployer = kindOfEmployer)
    {
        kindOfEmployer = _kindOfEmployer;

        return kindOfEmployer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPIN</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PRLPIN parmPIN(PRLPIN _pin = pin)
    {
        pin = _pin;

        return pin ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResubmit</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmResubmit(boolean _resubmit = resubmit)
    {
        resubmit = _resubmit;

        return resubmit ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxYear</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Yr parmTaxYear(Yr _taxYear = taxYear)
    {
        taxYear = _taxYear;

        return taxYear;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWageFileIdentifier</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollWageFileIdentifier parmWageFileIdentifier(PayrollWageFileIdentifier _wageFileIdentifier = wageFileIdentifier)
    {
        wageFileIdentifier = _wageFileIdentifier;

        return wageFileIdentifier;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLatestNmae</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmLatestNmae(boolean _latestName = latestName)
    {
        latestName = _latestName;

        return latestName ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>personalSuffix</Name>
				<Source><![CDATA[
    private DirNameAffixValue personalSuffix()
    {
        DirNameAffix    dirNameAffix;

        select firstonly Affix from dirNameAffix
            where dirNameAffix.RecId == person.PersonalSuffix;

        return strAlpha(dirNameAffix.Affix);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processWorkerStateRecords</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the individual state tax amount totals for a worker.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processWorkerStateRecords()
    {
        QueryRun                qrStateTaxTransactions;
        str                     lineRecord;

        // Set the range on the query to limit to the worker currently being processed
        qbrWorker.value(queryValue(worker.RecId));

        qrStateTaxTransactions = new QueryRun(queryStateTaxTransactions);

        // Iterate throught the applicable states taxes for the worker
        while (qrStateTaxTransactions.next())
        {
            taxTransactionHistory = qrStateTaxTransactions.get(tableNum(PayrollTaxTransactionHistoryUnion));

            // Special filing is required for AS, GU, MP, PR and VI.
            if (taxTransactionHistory.TaxationState == PayrollUSState::AS ||
                    taxTransactionHistory.TaxationState == PayrollUSState::GU ||
                    taxTransactionHistory.TaxationState == PayrollUSState::MP ||
                    taxTransactionHistory.TaxationState == PayrollUSState::PR ||
                    taxTransactionHistory.TaxationState == PayrollUSState::VI )
            {
                continue;
            }

            stateId = taxTransactionHistory.TaxationState;
            stateEmployerAccountNumber = PayrollTaxCodeDetail::findByPayrollTaxCodeLegalEntity(taxTransactionHistory.TaxCode, legalEntity, todate).AccountNumber;

            this.calculateStateAmounts();

            // Create and write the state wage record
            lineRecord = this.createRS();
            file.write(lineRecord);

            rsRecordCreated = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roValuesExist</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether a RO line should be created for the worker based upon whether the worker
    ///     has a total in specific box 12/label combinations.
    /// </summary>
    /// <returns>
    ///     true if a RO line should be created for the worker; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean roValuesExist()
    {
        boolean valueExists = false;

        if    (employeeBox12A
            || employeeBox12B
            || employeeBox12R
            || employeeBox12S
            || employeeBox12T
            || employeeBox12M
            || employeeBox12N
            || employeeBox12Z
            || employeeBox12CC
            || employeeBox12EE)
        {
            valueExists = true;
        }

        return valueExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        QueryBuildDataSource    qbd;
        str                     lineRecord;
        #FILE
        #LocalCodePage

        fromDate = mkDate(01,01,taxYear);
        todate = mkDate(31,12,taxYear);

        if (latestName == NoYes::Yes)
        {
            pointInTime = DateTimeUtil::utcNow();
        }
        else
        {
            pointInTime = Global::datetoendUtcDateTime(todate, DateTimeUtil::getCompanyTimeZone());
        }

        companyName = PayrollW2ReportDP::getCompanyNameByTimeState(CompanyInfo::current(), pointInTime);
        legalEntity = CompanyInfo::current();
        this.getCompanyPrimaryAddress(legalEntity);

        // Initialize the CountryRegionID corresponding to the United States
        countryRegionUnitedStates = this.getUnitedStatesCountryRegionId();

        // Initialize the FIT, FICA, annd MEDI tax code RecId values
        fitTaxCodeRecId  = this.getTaxCodeRecId(PayrollTaxCodeType::FIT);
        ficaTaxCodeRecId = this.getTaxCodeRecId(PayrollTaxCodeType::FICA);
        mediTaxCodeRecId = this.getTaxCodeRecId(PayrollTaxCodeType::MEDI);
        medi2TaxCodeRecId = this.getTaxCodeRecId(PayrollTaxCodeType::MEDI2);

        // Retrieve the Social Security identification type
        socialSecurityIdentificationType = HcmSharedParameters::find().ssnIdentificationType;

        // Initialize the PRLW2 query so that it contains only the state income taxes for the worker
        queryStateTaxTransactions = new Query(queryStr(PRLW2));
        qbdTaxCode = queryStateTaxTransactions.dataSourceTable(tableNum(PayrollTaxCode));
        qbdTaxCode.addRange(fieldNum(PayrollTaxCode, Type)).value(queryValue(PayrollTaxCodeType::SIT));
        qbdTaxTransactionHistory = queryStateTaxTransactions.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion));
        qbrWorker = qbdTaxTransactionHistory.findRange(fieldNum(PayrollTaxTransactionHistoryUnion, Worker));

        file = TextStreamIo::constructForWrite(437);

        qbd = queryRun.query().dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion));
        qbd.addRange(fieldNum(PayrollTaxTransactionHistoryUnion, TransDate)).value(queryRange(fromDate, todate));

        payStatementTotals = new PayrollPayStatementTotals();

        // Create and write the sumbitter record
        lineRecord = this.createRA();
        file.write(lineRecord);

        // Create and write the employer record
        lineRecord = this.createRE();
        file.write(lineRecord);

        while (queryRun.next())
        {
            worker = queryRun.get(tableNum(HcmWorker));

            if (!this.workerHasIssuedPaystatement())
            {
                continue;
            }

            this.initWorker();
            this.calculateAmounts();

            // Create and write the employee wage record
            lineRecord = this.createRW();
            file.write(lineRecord);

            // Increment RW row counter which keeps running sum of the number of RW records created
            numberOfRecordsRW++;

            // Only create an RO record if values exist for the employee
            if (this.roValuesExist())
            {
                // Create and write the additional employee wage record
                lineRecord = this.createRO();
                file.write(lineRecord);

                // Increment RO row counter which keeps running sum of the number of RO records created
                numberOfRecordsRO++;
            }

            // Create and write the RS, state wage records, for the employee
            this.processWorkerStateRecords();
        }

        // Create and write the employer totals record
        lineRecord = this.createRT();
        file.write(lineRecord);

        // Only print the RU record if an RO record was created
        if (roRecordCreated)
        {
            // Create and write the employer totals record
            lineRecord = this.createRU();
            file.write(lineRecord);
        }

        // Create and write the final record
        lineRecord = this.createRF();
        file.write(lineRecord);

        str filename = this.getDefaultFile(taxYear);
        File::SendFileToUser(file.getStream(), filename);
        info(strFmt("@SYS55751", filename, fromDate, todate));

        file = null;
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultFile</Name>
				<Source><![CDATA[
    private str getDefaultFile(int _taxYear)
    {
        System.DateTime exportDate = System.DateTime::UtcNow;

        str exportFileName = strfmt('%1_W2Electronic_%2.txt', _taxYear, exportDate.ToString('yyyyMMddHmmss'));

        return exportFileName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>socialSecurityNumber</Name>
				<Source><![CDATA[
    private HcmIdentificationNumber socialSecurityNumber()
    {
        str socialSecurityNumber = strRep('0', 9);
        str tmpSocialSecurityNumber;

        if (personIdentification)
        {
            // Only keep the digits 0-9 that exist in the identifiction number
            tmpSocialSecurityNumber = strKeep(personIdentification.IdentificationNumber, #Digits);

            if (strLen(tmpSocialSecurityNumber) == 9)
            {
                socialSecurityNumber = tmpSocialSecurityNumber;
            }
        }

        return socialSecurityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;

        #LOCALMACRO.SaveLastList
            PIN,
            resubmit,
            wageFileIdentifier,
            taxYear,
            kindOfEmployer,
            employmentCode,
            contactName,
            contactStreet,
            contactCity,
            contactState,
            contactZipCode,
            contactPhone,
            contactFax,
            contactEmail
        #ENDMACRO

        switch (version)
        {
            case currentVersion:
                [version, #CurrentList, queryCon] = packedClass;

                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new SysQueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }
                break;

            case versionOne:
                [version, #CurrentList1, queryCon] = packedClass;

                if (SysQuery::isPackedOk(queryCon))
                {
                    queryRun = new SysQueryRun(queryCon);
                }
                else
                {
                    this.initQuery();
                }
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerHasIssuedPayStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the worker has issued pay statements
    /// </summary>
    /// <returns>
    /// True if the worker has issued pay statements; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean workerHasIssuedPayStatement()
    {      
        Query queryWorkerTaxTransactions = new Query(queryStr(PRLW2));
        QueryBuildDataSource qbdTaxTransactionHistoryUnion = queryWorkerTaxTransactions.dataSourceTable(tableNum(PayrollTaxTransactionHistoryUnion));
        qbdTaxTransactionHistoryUnion.addRange(fieldNum(PayrollTaxTransactionHistoryUnion, TransDate)).value(queryRange(fromDate, todate));
        QueryBuildRange qbrWorkerTaxTransactionHistory = qbdTaxTransactionHistoryUnion.findRange(fieldNum(PayrollTaxTransactionHistoryUnion, Worker));

        // Set the range on the query to limit to the worker currently being processed
        qbrWorkerTaxTransactionHistory.value(queryValue(worker.RecId));

        QueryRun qrRun = new QueryRun(queryWorkerTaxTransactions);
        return qrRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>box13Indicator</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the box 13 value for the worker.
    /// </summary>
    /// <param name="_workerRecId">
    ///     The <c>RecId</c> for the <c>HcmWorker</c> record.
    /// </param>
    /// <param name="_parameterName">
    ///     The <c>Name</c> of the <c>PayrollTaxCodeParameter</c>.
    /// </param>
    /// <param name="_asOfDate">
    ///     The date to be used as the point in time when obtaining the parameter value.
    /// </param>
    /// <param name="_legalEntity">
    ///     The legal entity to be used when retrieving the <c>PayrollWorkerTaxCodeParameterValue</c> records
    /// </param>
    /// <returns>
    ///     The value of the parameter for the worker.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean box13Indicator(HcmWorkerRecId _workerRecId,
                                         Str60 _parameterName,
                                         TransDate _asOfDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()),
                                         CompanyInfoRecId _legalEntity = CompanyInfo::current()
                                         )
    {
        PayrollWorkerTaxCode                    workerTaxCode;
        PayrollTaxCodeParameter                 taxCodeParameter;
        PayrollWorkerTaxCodeParameterValue      workerTaxCodeParameterValue;
        PayrollTaxEngineTaxCode                 taxEngineTaxCode;
        PayrollTaxCode                          taxCode;
        #PayrollConstants

        select firstonly validTimeState(_asOfDate) RecId from taxCode
            where taxCode.Type  == PayrollTaxCodeType::FIT
            join RecId from taxEngineTaxCode
                where taxEngineTaxCode.PayrollTaxCode == taxCode.RecId
            join RecId from taxCodeParameter
                where taxCodeParameter.Name == _parameterName
                    && taxCodeParameter.TaxEngineTaxCode == taxEngineTaxCode.RecId
            join RecId from workerTaxCode
                where workerTaxCode.Worker == _workerRecId
                    && workerTaxCode.PayrollTaxCode == taxCode.RecId
            join Value from workerTaxCodeParameterValue
                where workerTaxCodeParameterValue.WorkerTaxCode == workerTaxCode.RecId
                    && workerTaxCodeParameterValue.TaxCodeParameter == taxCodeParameter.RecId
                    && workerTaxCodeParameterValue.LegalEntity == _legalEntity;

        return (workerTaxCodeParameterValue.Value == #TRUE);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the caption of the dialog.
    /// </summary>
    /// <returns>
    ///     The string to be used as the dialog's caption.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static str description()
    {
        return "@Payroll:PayrollElectronicW2Export";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmployerIdentificationNumber</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Retrieves the employer identification number from the <c>CompanyInfo</c> table.
    /// </summary>
    /// <returns>
    ///   The <c>Tax1099RegNum</c> value from the <c>CompanyInfo</c> table.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Tax1099RegNum getEmployerIdentificationNumber()
    {
        Tax1099RegNum   employerIdentificationNumber;
        CompanyInfo     companyInfo;

        select firstonly Tax1099RegNum from companyInfo
            where companyInfo.DataArea == curext();

        employerIdentificationNumber = strKeep(companyInfo.Tax1099RegNum, #Digits);

        return employerIdentificationNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        PRLW2File       w2File = new PRLW2File();
        Tax1099RegNum   employerIdentificationNumber;
        #TaxIntervatBE

        employerIdentificationNumber = strKeep(CompanyInfo::find().Tax1099RegNum, #Digits);

        w2File.parmEmployerIdentificationNumber(employerIdentificationNumber);

        w2File.initQuery();

        if (w2File.prompt())
        {
            w2File.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>