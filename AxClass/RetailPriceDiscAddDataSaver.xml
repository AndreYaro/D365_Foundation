<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceDiscAddDataSaver</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailPriceDiscAddDataSaver</c> class saves price data to <c>RetailPriceDiscAdmTrans</c> table.
/// </summary>
class RetailPriceDiscAddDataSaver
{
    RetailCategoryPriceRuleGroup categoryPriceRuleGroup;
    RetailCategoryPriceRule categoryPriceRule;
    PriceDiscAdmTrans priceDiscAdmTrans;
    RetailPriceBasisCalc basisPriceCalc;
    TransDate priceBasisDate;
    Price currentPrice;
    Boolean isCurPriceCalculated;

    RetailPriceDiscAdmTrans retailPriceDiscAdmTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCategoryPriceRule</Name>
				<Source><![CDATA[
    public RetailCategoryPriceRule getCategoryPriceRule()
    {
        return categoryPriceRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailPriceDiscAdmTrans</Name>
				<Source><![CDATA[
    private void initRetailPriceDiscAdmTrans()
    {
        retailPriceDiscAdmTrans = retailPriceDiscAdmTrans::findByPriceDiscAdmTrans(priceDiscAdmTrans.RecId);

        if (retailPriceDiscAdmTrans)
        {
            retailPriceDiscAdmTrans.selectForUpdate(true);
        }
        else
        {
            retailPriceDiscAdmTrans.clear();
            retailPriceDiscAdmTrans.PriceDiscAdmTrans = priceDiscAdmTrans.RecId;
        }

        retailPriceDiscAdmTrans.RetailCategoryPriceRuleRecId = categoryPriceRule.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>RetailPriceDiscResearchCalc</c> class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBasisPriceCalc</Name>
				<Source><![CDATA[
    public RetailPriceBasisCalc parmBasisPriceCalc(RetailPriceBasisCalc _basisPriceCalc = basisPriceCalc)
    {
        basisPriceCalc = _basisPriceCalc;

        return basisPriceCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryPriceRule</Name>
				<Source><![CDATA[
    public RetailCategoryPriceRule parmCategoryPriceRule(RetailCategoryPriceRule _categoryPriceRule = categoryPriceRule)
    {
        categoryPriceRule = _categoryPriceRule;

        return categoryPriceRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryPriceRuleGroup</Name>
				<Source><![CDATA[
    public RetailCategoryPriceRuleGroup parmCategoryPriceRuleGroup(RetailCategoryPriceRuleGroup _categoryPriceRuleGroup = categoryPriceRuleGroup)
    {
        categoryPriceRuleGroup = _categoryPriceRuleGroup;

        return categoryPriceRuleGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentPrice</Name>
				<Source><![CDATA[
    public Price parmCurrentPrice(Price _currentPrice = currentPrice)
    {
        currentPrice = _currentPrice;

        return currentPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCurPriceCalculated</Name>
				<Source><![CDATA[
    public boolean parmIsCurPriceCalculated(boolean _isCurPriceCalculated = isCurPriceCalculated)
    {
        isCurPriceCalculated = _isCurPriceCalculated;

        return isCurPriceCalculated;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceBasisDate</Name>
				<Source><![CDATA[
    public TransDate parmPriceBasisDate(TransDate _priceBasisDate = priceBasisDate)
    {
        priceBasisDate = _priceBasisDate;

        return priceBasisDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscAdmTrans</Name>
				<Source><![CDATA[
    public PriceDiscAdmTrans parmPriceDiscAdmTrans(PriceDiscAdmTrans _priceDiscAdmTrans = priceDiscAdmTrans)
    {
        priceDiscAdmTrans = _priceDiscAdmTrans;

        return priceDiscAdmTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceBasisCalc</Name>
				<Source><![CDATA[
    private RetailPriceBasisCalc priceBasisCalc(RetailPriceBasisType _priceBasisType, PriceGroupId _otherPriceGroup = '')
    {
        RetailPriceBasisCalc basisCalc;

        basisCalc = RetailPriceBasisCalcFactory::getCalculatorFromPriceDiscAdmTrans(priceDiscAdmTrans, _priceBasisType, priceBasisDate, categoryPriceRule.ExchangeRateTypeRecId, _otherPriceGroup);
        basisCalc.calculate();

        return basisCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    private void process()
    {
        this.initRetailPriceDiscAdmTrans();

        if (categoryPriceRuleGroup.SaveBasePrice)
        {
            switch (categoryPriceRule.PriceSetupType)			
            {
                case RetailCategoryPriceSetupType::FixedAmount:
					retailPriceDiscAdmTrans.BasePrice = categoryPriceRule.AmountPercent;
                    break;

                case RetailCategoryPriceSetupType::Margin:
                case RetailCategoryPriceSetupType::Markup:
                    retailPriceDiscAdmTrans.BasePrice = basisPriceCalc.getPriceCurrencyTo();
                    retailPriceDiscAdmTrans.BasePriceOrigCurrencyCode = basisPriceCalc.getCurrencyOrig();
                    retailPriceDiscAdmTrans.OrigCurBasePrice = basisPriceCalc.getPriceCurrencyOrig();

                    break;

                default:
                    EventHandlerResult result = new EventHandlerResult();

                    // Set base prices by calling the method that subscribes to this delegate, if available.
                    this.processDelegate(retailPriceDiscAdmTrans, categoryPriceRule.PriceSetupType, result);
                
                    // If there is no result from the processDelegate, then a warning is displayed
                    if (!result.hasResult())
					{
                        warning(strFmt("@Retail:RetailAXExtensibilityDelegateMethodExtensibleEnumNotImplemented", enum2Str(categoryPriceRule.PriceSetupType)));
					}

                    break;
            }
        }

        if (categoryPriceRuleGroup.SaveInventCost)
        {
            retailPriceDiscAdmTrans.InventCost = this.priceBasisCalc(RetailPriceBasisType::InventCost).getPriceCurrencyTo();
        }

        if (categoryPriceRuleGroup.SaveOtherGroupPrice)
        {
            retailPriceDiscAdmTrans.OtherGroupPrice = this.priceBasisCalc(RetailPriceBasisType::OtherPriceGroup, categoryPriceRuleGroup.PriceGroupId).getPriceCurrencyTo();
        }

        if (categoryPriceRuleGroup.SaveSalesPrice)
        {
            if (this.parmIsCurPriceCalculated())
            {
                retailPriceDiscAdmTrans.SalesPrice = this.parmCurrentPrice();
            }
            else
            {
                retailPriceDiscAdmTrans.SalesPrice = this.priceBasisCalc(RetailPriceBasisType::CurrentPrice).getPriceCurrencyTo();
            }
        }

        retailPriceDiscAdmTrans.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processDelegate</Name>
				<Source><![CDATA[
	/// <summary>
    /// Delegate to set base prices of trade agreement journal line based on the specified price setup type.
    /// </summary>
    /// <param name = "_retailPriceDiscAdmTrans">Trade agreement journal line.</param>
    /// <param name = "_priceSetupType">Price rule type.</param>
    /// <param name = "_result">Subscribers can use this to provide the result.</param>
    delegate void processDelegate(RetailPriceDiscAdmTrans _retailPriceDiscAdmTrans,
		RetailCategoryPriceSetupType _priceSetupType,
		EventHandlerResult _result)
    {
        // Subscriber will provide proper implementation to this method
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCategoryPriceRule</Name>
				<Source><![CDATA[
    public void setCategoryPriceRule(RetailCategoryPriceRule _categoryPriceRule)
    {
        categoryPriceRule.data(_categoryPriceRule);
    }

]]></Source>
			</Method>
			<Method>
				<Name>basePriceFieldIdContainer</Name>
				<Source><![CDATA[
    static private container basePriceFieldIdContainer()
    {
        #define.BasePriceGroup('BasePriceGroup')
        SysDictTable dictTable = new SysDictTable(tableNum(RetailPriceDiscAdmTrans));
        DictFieldGroup          fieldGroup;
        container con = conNull();
        int                     fieldGroupNo, fieldNo;

        for (fieldGroupNo = 1; fieldGroupNo <= dictTable.fieldGroupCnt(); fieldGroupNo++)
        {
            if (dictTable.fieldGroup(fieldGroupNo) == #BasePriceGroup)
            {
                fieldGroup = new SysDictFieldGroup(dictTable.id(), #BasePriceGroup);
                for (fieldNo = 1; fieldNo <= fieldGroup.numberOfFields(); fieldNo++)
                {
                    con += fieldGroup.field(fieldNo);
                }
            }
        }

        return con;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAndSave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates additional price data and saves it to <c>RetailPriceDiscAdmTrans</c> record.
    /// </summary>
    /// <param name="_categoryPriceRule">
    /// Retail category price rule table record.
    /// </param>
    /// <param name="_priceDiscAdmTrans">
    /// Price/discount agreement journal lines record.
    /// </param>
    /// <param name="_basisPriceCalc">
    /// Retail prices basis calculator.
    /// </param>
    /// <param name="_priceBasisDate">
    /// Date for price basis calulation.
    /// </param>
    /// <param name="_currentPrice">
    /// Current sales price from trade agreemnets.
    /// </param>
    /// <param name="_isCurPriceCalculated">
    /// Flag whether current sales price p.
    /// </param>
    public static void calcAndSave(
        RetailCategoryPriceRule _categoryPriceRule,
        PriceDiscAdmTrans _priceDiscAdmTrans,
        RetailPriceBasisCalc _basisPriceCalc,
        TransDate _priceBasisDate,
        Price _currentPrice = 0,
        Boolean _isCurPriceCalculated = false)
    {
        RetailCategoryPriceRuleGroup retailCategoryPriceRuleGroup;
        RetailPriceDiscAddDataSaver retailPriceDiscAddDataSaver = RetailPriceDiscAddDataSaver::construct();

        if (_categoryPriceRule)
        {
            retailCategoryPriceRuleGroup = RetailCategoryPriceRuleGroup::find(_categoryPriceRule.CategoryPriceRuleGroupCode);

            retailPriceDiscAddDataSaver = RetailPriceDiscAddDataSaver::construct();

            retailPriceDiscAddDataSaver.parmCategoryPriceRuleGroup(retailCategoryPriceRuleGroup);
            retailPriceDiscAddDataSaver.setCategoryPriceRule(_categoryPriceRule);
            retailPriceDiscAddDataSaver.parmPriceDiscAdmTrans(_priceDiscAdmTrans);
            retailPriceDiscAddDataSaver.parmBasisPriceCalc(_basisPriceCalc);
            retailPriceDiscAddDataSaver.parmPriceBasisDate(_priceBasisDate);
            retailPriceDiscAddDataSaver.parmCurrentPrice(_currentPrice);
            retailPriceDiscAddDataSaver.parmIsCurPriceCalculated(_isCurPriceCalculated);

            retailPriceDiscAddDataSaver.process();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailPriceDiscAddDataSaver construct()
    {
        RetailPriceDiscAddDataSaver retailPriceDiscAddDataSaver = new RetailPriceDiscAddDataSaver();

        return retailPriceDiscAddDataSaver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts comparasion price value in case of changes currency, prciUnit or unit of measure on the related price/discount line
    /// </summary>
    /// <param name="_orig">
    /// Cursor with origin record version of  price/discount line.
    /// </param>
    /// <param name="_new">
    /// Cursor with changed record version of  price/discount line.
    /// </param>
    static void convertPrice(PriceDiscAdmTrans _orig, PriceDiscAdmTrans _new)
    {
        PriceConvertFactory priceConvertFactory;
        AmountCur price, newPrice;
        RetailPriceDiscAdmTrans retailPriceDiscAdmTrans;
        FieldId fieldId;
        CurrencyCode newCurrency;
        int i;
        container priceCon;
        container con = RetailPriceDiscAddDataSaver::basePriceFieldIdContainer();

        void calc()
        {
            price = retailPriceDiscAdmTrans.(fieldId);
            newPrice = 0;

            if (price)
            {
                priceConvertFactory = PriceConvertFactory::newItemPrice(_orig.itemId(),
                                                                        _orig.UnitId,
                                                                        price,
                                                                        _orig.PriceUnit,
                                                                        0,
                                                                        1,
                                                                        _orig.Currency);
                priceConvertFactory.parmNewUnitId(_new.UnitId);
                priceConvertFactory.parmNewPriceUnit(_new.PriceUnit);
                priceConvertFactory.parmNewCurrencyCode(newCurrency);
                priceConvertFactory.parmInventDimId(_orig.InventDimId);

                newPrice = priceConvertFactory.priceConvert().parmPrice();

                if (price != newPrice)
                {
                    priceCon += [[fieldId, newPrice]];
                }
            }
        }

        retailPriceDiscAdmTrans = RetailPriceDiscAdmTrans::findByPriceDiscAdmTrans(_new.RecId);

        if (retailPriceDiscAdmTrans)
        {
            fieldId = fieldNum(RetailPriceDiscAdmTrans, OrigCurBasePrice);
            newCurrency = _orig.Currency;
            calc();

            newCurrency =  _new.Currency;
            for (i = 1; i <= conLen(con); i++)
            {
                fieldId = conPeek(con, i);
                calc();
            }

            if (conLen(priceCon))
            {
                retailPriceDiscAdmTrans = RetailPriceDiscAdmTrans::findByPriceDiscAdmTrans(_new.RecId, true);
                for (i = 1; i <= conLen(priceCon); i++)
                {
                    [fieldId, newPrice] = conPeek(priceCon, i);
                    retailPriceDiscAdmTrans.(fieldId) = newPrice;
                }
                retailPriceDiscAdmTrans.update();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>