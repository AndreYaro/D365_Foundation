<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvReceiptOcrProcessAsync</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TrvReceiptOcrProcessAsync extends RunBaseBatch implements BatchRetryable
{
    CreatedDateTime startDateTime;
    CreatedDateTime endDateTime;
    DialogField dialogStartDate;

    private static SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(TrvReceiptOcrProcessAsync));

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        startDateTime
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides placeholder for user input.
    /// </summary>
    /// <returns>An object containing the fields in the dialog.</returns>
    public Object dialog()
    {
        Dialog dialog = super();

        dialog.addGroup("@SYS22526");
        dialogStartDate = dialog.addFieldValue(extendedtypestr(CreatedDateTime), startDateTime, "@SYS2168", "@Expense:StartDateForReceiptProcess");
    
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Read data from the dialog.
    /// </summary>
    /// <returns>True, if able to read data successfully; otherwise false.</returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            startDateTime = dialogStartDate.value();

        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>TrvReceiptOcrProcessAsync</c> class and calls the run operation.
    /// </summary>
    /// <param name = "_args">
    /// Caller details.
    /// </param>
    public static void main(Args _args)
    {
        TrvReceiptOcrProcessAsync trvReceiptOcrProcessAsync = new TrvReceiptOcrProcessAsync();

        if (trvReceiptOcrProcessAsync.prompt())
        {
            trvReceiptOcrProcessAsync.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines if the operation can be batch enabled.
    /// </summary>
    /// <returns>True, as this operation should be batch enabled.</returns>
    public boolean canGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process the receipts.
    /// </summary>
    public void run()
    {
       //Receipts uploaded after the process start should be ignored.
       endDateTime = DateTimeUtil::utcNow();
       this.processUnreconciledReceipts();
       this.processReceiptsAttachedToExpenseReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the batch job will be run with the account of the user who created the job.
    /// </summary>
    /// <returns>
    /// True if the batch job is run on the AOS server as the submitting user account; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes the activity.
    /// </summary>
    /// <returns>Caption for the dialog.</returns>
    public ClassDescription caption()
    {
        return "@Expense:ReadReceiptContent";
    }

]]></Source>
			</Method>
			<Method>
				<Name>processUnreconciledReceipts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process unreconciled receipts.
    /// </summary>
    public void processUnreconciledReceipts()
    {

        instrumentationLogger.logInformation(strFmt('Unreconciled receipts batch job processing started from startDate {%1}, to endDate {%2}', startDateTime, endDateTime));
        DocuRef docuRef;
        TrvUnreconciledExpenseTransaction trvUnreconciledExpenseTransaction;

        // Consider the receipts that are not attached to any expense report or expense line.
        while select docuRef
            join trvUnreconciledExpenseTransaction
            where docuRef.RefRecId == trvUnreconciledExpenseTransaction.RecId
            &&    docuRef.RefTableId == trvUnreconciledExpenseTransaction.TableId
            &&    docuRef.CreatedDateTime > startDateTime
            &&    docuRef.CreatedDateTime < endDateTime
            &&    trvUnreconciledExpenseTransaction.Worker
            &&    !trvUnreconciledExpenseTransaction.ExpenseLine
        {
            try
            {
                if (TrvReceiptOcrProcessAsync::validateIfReceiptNeedsProcessing(docuRef.RecId))
                {
                    instrumentationLogger.logInformation(strFmt('DocuRef %1, is getting processed for OCR details', docuRef.RecId));

                    TrvReceiptOcrHelper::populateReceiptDetails(docuRef, trvUnreconciledExpenseTransaction.Worker);
                    
                    if (!TrvReceiptOcrInfo::exist(docuRef.RecId)) 
                    {
                        instrumentationLogger.logWarning(strFmt('Failed to process OCR details for docuRef %1', docuRef.RecId));
                        TrvReceiptsFailedAttempts::logExceptionRecord(docuRef.RecId);
                    }
                }
            }
            catch
            {
                TrvReceiptsFailedAttempts::logExceptionRecord(docuRef.RecId);
                continue;
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>validateIfReceiptNeedsProcessing</Name>
				<Source><![CDATA[
    /// <summary>
    /// If the receipt needs to be processed.
    /// </summary>
    /// <param name = "_docuRefRecId">Record identifier for the receipt.</param>
    /// <returns>If needs to be processed, true; otherwise false.</returns>
    public static boolean validateIfReceiptNeedsProcessing(RefRecId _docuRefRecId)
    {
        boolean needToProcess = !TrvReceiptOcrInfo::exist(_docuRefRecId);

        if (needToProcess)
        {
            const int MaxNumberOfRetries = 2;
            int attempts = TrvReceiptsFailedAttempts::find(_docuRefRecId).NoOfAttempts;
            instrumentationLogger.logWarning(strFmt('Validated %1 time to process ocr for %2', attempts, _docuRefRecId));

            needToProcess = TrvReceiptsFailedAttempts::find(_docuRefRecId).NoOfAttempts < MaxNumberOfRetries? needToProcess: false;
        }

        return needToProcess;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReceiptsAttachedToExpenseReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process receipts already attached to an expense report.
    /// </summary>
    public void processReceiptsAttachedToExpenseReport()
    {
        instrumentationLogger.logInformation(strFmt('Attached receipts batch job processing started from startDate {%1}, to endDate {%2}', startDateTime, endDateTime));
        
        DocuRef docuRef;
        TrvExpTable trvExpTable;
    
        while select docuRef
            join trvExpTable
            where docuRef.RefRecId == trvExpTable.RecId
            &&    docuRef.RefTableId == trvExpTable.TableId
            &&    trvExpTable.CreatedDateTime >= startDateTime
            &&    trvExpTable.ApprovalStatus != TrvAppStatus::Approved
            &&    trvExpTable.ApprovalStatus != TrvAppStatus::Ledger
            &&    trvExpTable.CreatingWorker
        {
            try
            {
                if (TrvReceiptOcrProcessAsync::validateIfReceiptNeedsProcessing(docuRef.RecId))
                {
                    instrumentationLogger.logInformation(strFmt('DocuRef %1, is getting processed for OCR details', docuRef.RecId));

                    TrvReceiptOcrHelper::populateReceiptDetails(docuRef, trvExpTable.CreatingWorker);
                    if (!TrvReceiptOcrInfo::exist(docuRef.RecId))
                    {
                        instrumentationLogger.logWarning(strFmt('Failed to process OCR details for docuRef %1', docuRef.RecId));
                        TrvReceiptsFailedAttempts::logExceptionRecord(docuRef.RecId);
                    }
                }
            }
            catch
            {
                TrvReceiptsFailedAttempts::logExceptionRecord(docuRef.RecId);
                continue;
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the job can run in a new session.
    /// </summary>
    /// <returns>Always returns true.</returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStartDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set/ Get start date value.
    /// </summary>
    public CreatedDateTime parmStartDateTime(CreatedDateTime _startDateTime = startDateTime)
    {
        if(!prmIsDefault(_startDateTime))
        {
            startDateTime = _startDateTime;
        }

        return startDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>