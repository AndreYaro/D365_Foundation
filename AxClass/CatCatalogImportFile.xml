<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatCatalogImportFile</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CatCatalogImportFile
{
    #File
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ensureFileSizeOk</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ensures that the uploading catalog file size is in limits.
    /// </summary>
    /// <param name="_catalogFileSize">
    /// The file size of the catalog maintenance request in MB.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// The file could not be uploaded because of upload restrictions.
    /// </exception>
    public static void ensureFileSizeOk(CatVendorCatalogCMRFileSize _catalogFileSize)
    {
        int fileSizeLimit = CatParameters::find().MaxUploadFileSize;
        if ( _catalogFileSize > fileSizeLimit )
        {
            throw error(strfmt("@SYS328448",fileSizeLimit));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ensureFileUploadable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the total number of files that are being uploaded is under the limit.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    /// The file could not be uploaded because of upload restrictions.
    /// </exception>
    public static void ensureFileUploadable()
    {
        if ( CatCatalogImportFile::totalNumberOfFilesInProcess() >= CatParameters::find().MaxFilesInProcess )
        {
            throw error("@SYS313572");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified file exists.
    /// </summary>
    /// <param name="_fileName">
    /// The absolute path of the file.
    /// </param>
    /// <returns>
    /// true if the file exists; otherwise, false.
    /// </returns>
    public static boolean fileExists(str _fileName)
    {
        boolean ret;

        int         length;
        int         i;

        length = strlen(_filename);

        if ((length > 0) && (substr(_filename, length, 1) == '\\'))
        {
            _filename = substr(_filename, 1, length - 1);
            length -= 1;
        }

        // See KB Q115827
        // See @http://support.microsoft.com/kb/115827
        i = strfind(_filename, ' .', length, -1);
        if ((length > 0) && (i == length))
        {
            return false;
        }

        ret = System.IO.File::Exists(_filename);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the size of the file.
    /// </summary>
    /// <param name="_filename">
    /// The absolute path of the file.
    /// </param>
    /// <returns>
    /// The size of the file in bytes.
    /// </returns>
    public static int fileSize(str _filename)
    {
        int size;
        System.IO.FileInfo fileInfo;

        fileInfo = new System.IO.FileInfo(_filename);

        size = int642int(fileInfo.get_Length());

        return size;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalNumberOfFilesInProcess</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the total number of files that are in process.
    /// </summary>
    /// <returns>
    ///    The total number of files that are in process
    /// </returns>
    private static int64 totalNumberOfFilesInProcess()
    {
        CatVendorCatalogMaintenanceRequest catVendorCatalogMaintenanceRequest;

        select count(RecId) from catVendorCatalogMaintenanceRequest
            where catVendorCatalogMaintenanceRequest.LastImportStatus == CatVendorImportStatus::New;

        return catVendorCatalogMaintenanceRequest.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>