<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalCheckPostBank</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides helper methods related to banks for journal validation.
/// </summary>
public class LedgerJournalCheckPostBank
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bankFeeJournal2List</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the bank fees in a journal to a list.
    /// </summary>
    /// <param name = "_caller">The <c>LedgerJournalCheckPost</c> caller.</param>
    public static void bankFeeJournal2List(LedgerJournalCheckPost _caller)
    {
        LedgerJournalTrans ledgerJournalTransLocal;
        CustVendPaymJournalFee custVendPaymJournalFee;
        LedgerJournalFeePosting ledgerJournalFeePosting;

        ledgerJournalFeePosting = _caller.parmLedgerJournalName().LedgerJournalFeePosting;
        LedgerJournalTable ledgerJournalTable = _caller.parmLedgerJournalTable();
        int bankFeeCount = _caller.parmBankFeeCount();
        RecordSortedList bankFeeList = _caller.parmBankFeeList();

        if (ledgerJournalFeePosting == LedgerJournalFeePosting::Keep)
        {
            return;
        }

        ttsbegin;

        while select forupdate custVendPaymJournalFee
            where custVendPaymJournalFee.RefRecId == 0
            join forupdate ledgerJournalTransLocal
                where ledgerJournalTransLocal.RecId == custVendPaymJournalFee.FeeTransRecId
                    && ledgerJournalTransLocal.JournalNum == ledgerJournalTable.JournalNum
        {
            LedgerJournalCheckPostBank::bankFeeListInit(_caller);
            bankFeeCount++;
            ledgerJournalTransLocal.LineNum = LedgerJournalTrans::lastLineNum(ledgerJournalTable.JournalNum) + 1;;
            bankFeeList.ins(ledgerJournalTransLocal);
            custVendPaymJournalFee.delete(true);
            ledgerJournalTransLocal.delete();
        }

        ttscommit;

        _caller.parmBankFeeCount(bankFeeCount);
        _caller.parmBankFeeList(bankFeeList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankFeeListInit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes bank fees.
    /// </summary>
    /// <param name = "_caller">The <c>LedgerJournalCheckPost</c> caller.</param>
    public static void bankFeeListInit(LedgerJournalCheckPost _caller)
    {
        if (!_caller.parmBankFeeCount())
        {
            RecordSortedList bankFeeList = new RecordSortedList(tableNum(LedgerJournalTrans));

            bankFeeList.sortOrder(
                fieldNum(LedgerJournalTrans, OffsetLedgerDimension),
                fieldNum(LedgerJournalTrans, LineNum));

            _caller.parmBankFeeList(bankFeeList);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankFeeListTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfer bank fees.
    /// </summary>
    /// <param name = "_caller">The <c>LedgerJournalCheckPost</c> caller.</param>
    /// <returns>true if successful; otherwise, false.</returns>
    public static boolean bankFeeListTransfer(LedgerJournalCheckPost _caller)
    {
        LedgerJournalTable ledgerJournalTableLocal;
        LedgerJournalTrans ledgerJournalTransLocal;
        boolean more;
        LedgerJournalAC oldOffsetAccount = '';
        boolean ok = true;
        LedgerJournalNameId ledgerJournalNameId;
        Voucher newVoucher;
        str journalType;

        RecordSortedList bankFeeList = _caller.parmBankFeeList();

        if (!bankFeeList || _caller.parmLedgerJournalName().LedgerJournalFeePosting == LedgerJournalFeePosting::Keep)
        {
            return ok;
        }

        ttsbegin;

        for (more = bankFeeList.first(ledgerJournalTransLocal); more; more = bankFeeList.next(ledgerJournalTransLocal))
        {
            if (oldOffsetAccount != ledgerJournalTransLocal.parmOffsetAccount())
            {
                ledgerJournalNameId = BankAccountTable::findByLedgerDimension(ledgerJournalTransLocal.OffsetLedgerDimension).LedgerJournalNameId;

                if (ledgerJournalNameId)
                {
                    ledgerJournalTableLocal.initFromLedgerJournalName(ledgerJournalNameId);

                    if (ledgerJournalTableLocal.JournalType == LedgerJournalType::Daily)
                    {
                        ledgerJournalTableLocal.JournalNum =  JournalTableData::newTable(ledgerJournalTableLocal).nextJournalId();
                        ledgerJournalTableLocal.JournalName = ledgerJournalNameId;
                        ledgerJournalTableLocal.OriginalJournalNum = ledgerJournalTransLocal.JournalNum;

                        switch (_caller.parmLedgerJournalTable().JournalType)
                        {
                            case LedgerJournalType::CustBillOfExchangeProtest:
                                journalType = "@SYS71693";
                                break;

                            case LedgerJournalType::CustBillOfExchangeSettle:
                            case LedgerJournalType::VendPromissoryNoteSettle:
                                journalType = "@SYS10163";
                                break;

                            case LedgerJournalType::VendPaymRemittance:
                            case LedgerJournalType::CustPaymRemittance:
                                journalType = "@SYS57964";
                                break;

                            default:
                                journalType = "@SYS21247";
                        }

                        ledgerJournalTableLocal.Name = strFmt(
                            "@SYS73766",
                            ledgerJournalTransLocal.parmOffsetAccount(),
                            journalType,
                            ledgerJournalTransLocal.BankRemittanceFileId);

                        ledgerJournalTableLocal.insert();

                        if (_caller.parmLedgerJournalTable().ledgerJournalName().LedgerJournalFeePosting == LedgerJournalFeePosting::TransferNew)
                        {
                            newVoucher = new JournalVoucherNum(JournalTableData::newTable(ledgerJournalTableLocal)).getNew(false);
                        }
                    }
                    else
                    {
                        ok = checkFailed(strFmt("@SYS73767", ledgerJournalTransLocal.parmOffsetAccount()));
                    }
                }
                else
                {
                    ok = checkFailed(strFmt("@SYS73767", ledgerJournalTransLocal.parmOffsetAccount()));
                }

                oldOffsetAccount = ledgerJournalTransLocal.parmOffsetAccount();
            }

            if (ok)
            {
                ledgerJournalTransLocal.LineNum = LedgerJournalTrans::lastLineNum(ledgerJournalTableLocal.JournalNum) + 1;
                ledgerJournalTransLocal.JournalNum = ledgerJournalTableLocal.JournalNum;

                if (newVoucher)
                {
                    ledgerJournalTransLocal.Voucher = newVoucher;
                }

                ledgerJournalTransLocal.insert();
            }
        }

        ttscommit;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankFeeListWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes bank fees for the given journal line.
    /// </summary>
    /// <param name = "_caller">The <c>LedgerJournalCheckPost</c> caller.</param>
    /// <param name = "_refLedgerJournalTransRecId">The journal line.</param>
    public static void bankFeeListWrite(LedgerJournalCheckPost _caller, RefRecId _refLedgerJournalTransRecId)
    {
        CustVendPaymJournalFee custVendPaymJournalFee;
        LedgerJournalTrans ledgerJournalTransLocal;
        int bankFeeCount = 0;

        while select custVendPaymJournalFee
            where custVendPaymJournalFee.RefRecId == _refLedgerJournalTransRecId
        {
            LedgerJournalCheckPostBank::bankFeeListInit(_caller);
            bankFeeCount++;
            ledgerJournalTransLocal = custVendPaymJournalFee.initLedgerJournalTrans();
            ledgerJournalTransLocal.LineNum = LedgerJournalTrans::lastLineNum(ledgerJournalTransLocal.JournalNum) + 1;
            _caller.parmBankFeeList().ins(ledgerJournalTransLocal);
        }

        _caller.parmBankFeeCount(bankFeeCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOverDraftLimit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the pre-defined Over Draft limits for BankAccounts tied to the ledger journal.
    /// </summary>
    /// <param name = "_bankAccountBalances">The balances for the bank accounts tied to the ledger journal.</param>
    /// <returns>true if the balances are within credit limit tolerance; otherwise, false.</returns>
    public static boolean checkOverDraftLimit(Map _bankAccountBalances)
    {
        boolean isValid = true;
        MapEnumerator mapEnumerator;
        container bankAccountData;
        Amount balance;
        Amount overDraftLimit;
        CreditLimitTolerance creditLimitTolerance;

        // find the credit limit tolerance
        creditLimitTolerance = BankParameters::find().CreditLimitTolerance;

        // allow the balance to go negative
        if (creditLimitTolerance == CreditLimitTolerance::None)
        {
            return true;
        }

        // iterate through the collection of TmpAccountSum maps
        mapEnumerator = new MapEnumerator(_bankAccountBalances);
        while (mapEnumerator.moveNext())
        {
            // access the container located at the current map position
            bankAccountData = mapEnumerator.currentValue();

            // retrieve balance information for the current account
            balance = conPeek(bankAccountData, 2);
            overDraftLimit = conPeek(bankAccountData, 3);

            // check to see if the resulting balance falls below pre-defined Over Draft limits
            if ((overDraftLimit < 0) && (balance < overDraftLimit))
            {
                // handle cases where Over Drafts are not allowed
                // note: in the Warning case we are raising the error and allowing it to process
                if (creditLimitTolerance == CreditLimitTolerance::Error)
                {
                    isValid = false;
                }

                // notify the user that pre-determined Over Draft limits have been exceeded
                checkFailed(isValid ? "@SYS317551" : "@SYS327905");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInterCompanyBankCheque</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BankChequePaymTrans</c> with the recipient company and voucher number based on the
    /// foreign voucher and the Transaction Date and Account number from the <c>LedgerJournalTrans</c>.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The table that contains information to find the correct <c>BankChequePaymTrans</c> record and the
    /// values to assign.
    /// </param>
    public static void updateInterCompanyBankCheque(LedgerJournalTrans _ledgerJournalTrans)
    {
        BankChequeTable bankChequeTable;

        // The company must be set or we will error when attempting to change company
        if ((_ledgerJournalTrans.BankChequeNum) && (_ledgerJournalTrans.ForeignCompany))
        {
            // The bankChequeTable record we want is in the other company since we are
            // posting the intercompany portion of the transaction
            changecompany(_ledgerJournalTrans.ForeignCompany)
            {
                select firstonly forupdate bankChequeTable
                    where bankChequeTable.Voucher == _ledgerJournalTrans.ForeignVoucher
                        && bankChequeTable.TransDate == _ledgerJournalTrans.TransDate
                        && bankChequeTable.RecipientAccountNum == _ledgerJournalTrans.parmAccount()
                        && bankChequeTable.ChequeNum == _ledgerJournalTrans.BankChequeNum;

                if (bankChequeTable)
                {
                    bankChequeTable.RecipientCompany = _ledgerJournalTrans.Company;
                    bankChequeTable.RecipientTransVoucher = _ledgerJournalTrans.Voucher;
                    bankChequeTable.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankCheque</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>BankChequePaymTrans</c> record with the correct voucher based on the old voucher and
    /// the transaction date and account number from the <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// A table that contains information to find the correct <c>BankChequePaymTrans</c> record
    /// </param>
    /// <param name="_oldVoucher">
    /// A string that contains the old voucher number.
    /// </param>
    public static void updateBankCheque(
        LedgerJournalTrans _ledgerJournalTrans,
        Voucher _oldVoucher)
    {
        BankChequeTable bankChequeTable;
        BankChequePaymTrans bankChequePaymTrans;

        if (_ledgerJournalTrans.BankChequeNum)
        {
            select firstonly forupdate bankChequeTable
                where bankChequeTable.Voucher == _oldVoucher
                    && bankChequeTable.TransDate == _ledgerJournalTrans.TransDate
                    && bankChequeTable.RecipientAccountNum == _ledgerJournalTrans.parmAccount()
                    && bankChequeTable.ChequeNum == _ledgerJournalTrans.BankChequeNum;

            if (bankChequeTable)
            {
                bankChequeTable.Voucher = _ledgerJournalTrans.Voucher;
                bankChequeTable.update();

                while select forupdate bankChequePaymTrans
                    where bankChequePaymTrans.Voucher == _oldVoucher
                        && bankChequePaymTrans.AccountId == bankChequeTable.AccountID
                        && bankChequePaymTrans.ChequeNum == bankChequeTable.ChequeNum
                {
                    bankChequePaymTrans.Voucher = _ledgerJournalTrans.Voucher;
                    bankChequePaymTrans.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBankLC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the Letter of Credit records after the payment has been posted.
    /// </summary>
    /// <param name="_isLetterOfCreditEnabled">
    /// True if letter of credit is enabled, otherwise; false.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The payment record.
    /// </param>
    public static void updateBankLC(boolean _isLetterOfCreditEnabled, LedgerJournalTrans _ledgerJournalTrans)
    {
        BankLCType bankLCType;
        LedgerJournalTransBankLC ledgerJournalTransBankLC;
        BankLCImportTransType bankLCTransactionType;
        LedgerJournalTable ledgerJournalTable;
        boolean isPromissoryNoteSettle = true;

        ledgerJournalTable = LedgerJournalTable::find(_ledgerJournalTrans.JournalNum);

        if (ledgerJournalTable.JournalType == LedgerJournalType::VendPromissoryNoteDraw ||
            ledgerJournalTable.JournalType == LedgerJournalType::VendPaymRemittance ||
            ledgerJournalTable.JournalType == LedgerJournalType::CustBillOfExchangeDraw ||
            ledgerJournalTable.JournalType == LedgerJournalType::CustPaymRemittance)
        {
            isPromissoryNoteSettle = false;
        }

        if (_isLetterOfCreditEnabled)
        {
            ledgerJournalTransBankLC = _ledgerJournalTrans.getLedgerJournalTransBankLC();
            if (ledgerJournalTransBankLC.RecId)
            {
                switch (ledgerJournalTransBankLC.TransType)
                {
                    case BankLCLedgerJournalTransType::Margin:
                    case BankLCLedgerJournalTransType::MiscCharge_SA:
                        bankLCTransactionType = BankLCImportTransType::construct(_ledgerJournalTrans);
                        bankLCTransactionType.postedActions();
                        break;

                    case BankLCLedgerJournalTransType::Settlement:
                        if (ledgerJournalTransBankLC.BankLCLine && isPromissoryNoteSettle)
                        {
                            bankLCType = BankLCType::constructByLedgerJournalTrans(_ledgerJournalTrans, true, true);
                            bankLCType.updatePaymentPosted(ledgerJournalTransBankLC.BankLCLine);
                        }
                        break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOffsetBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the offset bank balances.
    /// </summary>
    /// <param name = "_bankAccount">The bank account.</param>
    /// <param name = "_ledgerJournalTrans">The journal line.</param>
    /// <param name = "bankAccountBalances">The bank account balances.</param>
    public static void calculateOffsetBalances(BankAccountTable _bankAccount, LedgerJournalTrans _ledgerJournalTrans, Map bankAccountBalances)
    {
        if (BankParameters::find().CreditLimitTolerance == CreditLimitTolerance::None
            && !LedgerJournalCheckPostBank::shouldCalculateOffsetBalances(_bankAccount, _ledgerJournalTrans))
        {
            return;
        }

        container bankAccountData;
        Amount balance;

        // initialize a CurrencyExchHelper to assist in currency conversion
        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), _ledgerJournalTrans.TransDate);
        exchangeRateHelper.parmExchangeRate1(_ledgerJournalTrans.ExchRate);
        exchangeRateHelper.parmExchangeRate2(_ledgerJournalTrans.ExchRateSecond);

        // search for BankAccount record in internal map
        if (bankAccountBalances.exists(_bankAccount.RecId))
        {
            // access the existing Bank Account container
            bankAccountData = bankAccountBalances.lookup(_bankAccount.RecId);

            // retrieve the running balance offset information
            balance = conPeek(bankAccountData, 2);
        }
        else
        {
            // calculate resulting balance offset
            balance = _bankAccount.balanceMST();
        }

        // calculate resulting balance offset
        balance -= exchangeRateHelper.calculateTransactionToAccounting(_ledgerJournalTrans.CurrencyCode,_ledgerJournalTrans.amount(), true);

        // fill container with Bank Account details
        bankAccountData = [_bankAccount.AccountID, balance, _bankAccount.OverDraftLimit];

        // add the map entry to the collection
        bankAccountBalances.insert(_bankAccount.RecId, bankAccountData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculateOffsetBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether offset bank balances should be calculated.
    /// </summary>
    /// <param name = "_bankAccountTable">The <c>BankAccountTable</c> record.</param>
    /// <param name = "_ledgerJournalTrans">The <c>LedgerJournalTrans</c> record.</param>
    /// <returns>
    /// true if offset bank balances should be calculated; otherwise, false.
    /// </returns>
    public static boolean shouldCalculateOffsetBalances(BankAccountTable _bankAccountTable, LedgerJournalTrans _ledgerJournalTrans)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankLC</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the payment marked with Letter of Credit can be posted.
    /// </summary>
    /// <param name="_isLetterOfCreditEnabled">
    /// True if letter of credit is enabled, otherwise; false.
    /// </param>
    /// <returns>
    /// true if validation is successful, otherwise; false.
    /// </returns>
    public static boolean validateBankLC(boolean _isLetterOfCreditEnabled, LedgerJournalTrans _ledgerJournalTrans)
    {
        boolean ok = true;
        BankLCType bankLCType;

        LedgerJournalTransBankLC ledgerJournalTransBankLC;
        BankLCImportTransType bankLCImportTransType;

        if (_isLetterOfCreditEnabled)
        {
            ledgerJournalTransBankLC = _ledgerJournalTrans.getLedgerJournalTransBankLC();
            if (ledgerJournalTransBankLC.RecId)
            {
                switch (ledgerJournalTransBankLC.TransType)
                {
                    case BankLCLedgerJournalTransType::Margin:
                    case BankLCLedgerJournalTransType::MiscCharge_SA:
                        bankLCImportTransType = BankLCImportTransType::construct(_ledgerJournalTrans);
                        ok = bankLCImportTransType.validateLedgerPosting();
                        break;

                    case BankLCLedgerJournalTransType::Settlement:
                        if (ledgerJournalTransBankLC.BankLCLine)
                        {
                            bankLCType = BankLCType::constructByLedgerJournalTrans(_ledgerJournalTrans);
                            ok = bankLCType.validateUpdatePayment(_ledgerJournalTrans.RecId);
                        }
                        break;
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>