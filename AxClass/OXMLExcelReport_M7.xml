<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_M7</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints Receipts list (M-7) report to excel.
/// </summary>
[PackingSlipReportAttribute(PrintoutTypeTable_RU::PurchReceiptM7)]
class OxmlExcelReport_M7 extends OXMLExcelReport_PackingSlip implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    protected const str ReportHeader = 'REPORTHEADER';
    protected const str PageHeader = 'PAGEHEADER';
    protected const str Body = 'BODY';
    protected const str PageFooter = 'PAGEFOOTER';
    protected const str Page1 = 'PAGE1';
    protected const str Page2 = 'PAGE2';
    protected const str Page4 = 'PAGE4';

    protected const int WidthPage1 = 37;
    protected const int WidthPage2 = 82;
    protected const int WidthPage3 = 82;
    protected const int WidthPage4 = 82;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const real MinHeight = 13.50;

        return max(document.getNamedRangeHeightWrapped('ItemName', line.ItemName),
                   document.getNamedRangeHeightWrapped('ItemId', line.ItemId),
                   document.getNamedRangeHeightWrapped('Unit', line.ItemId),
                   MinHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00122, funcName());

        this.initSectionMap();

        //page1
        this.setCurrentWorksheetNum(1, WidthPage1);
        this.execute(Page1);
        this.setPrintArea();

        //page2
        this.setCurrentWorksheetNum(2, WidthPage2);
        this.execute(Page2);
        this.setPrintArea();

        //page3
        this.setCurrentWorksheetNum(3, WidthPage3);

        this.execute(ReportHeader);

        pageHeight = document.getPageHeight(curWorksheetNum);

        this.execute(PageHeader);

        while select line
            where line.InternalId       == subHeader.InternalId &&
                  line.InventLocationId == subHeader.InventLocationId
        {
            if (this.mustCreateNewPage())
            {
                this.execute(PageFooter);
                document.insertPageBreak(currentRow, curWorksheetNum);

                currentHeight = 0;
                this.execute(PageHeader);
            }

            this.execute(Body);
        }

        this.execute(PageFooter);

        this.setPrintArea();

        //page4
        this.setCurrentWorksheetNum(4, WidthPage4);
        this.execute(Page4);
        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
        protected Filename fileName()
    {
        return 'Receipt_M7';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
        protected Filename fileNamePostfix()
    {
        return '_' + subHeader.DocumentId + '_' + header.DocumentName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'M7';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section of excel report.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBody()
    {
        this.insertValueToSection('ItemName'    ,   line.ItemName);
        this.insertValueToSection('ItemId'      ,   line.ItemId);
        this.insertValueToSection('Unit'        ,   line.CodeOKEI);
        this.insertValueToSection('UnitName'    ,   line.Unit);
        // By document data
        this.insertValueToSection('DocQty'      ,   line.Qty - line.DeviationQty);
        this.insertValueToSection('DocPrice'    ,   line.Price);
        this.insertValueToSection('DocAmount'   ,   line.LineAmount - line.DeviationAmount);

        // Fact amount (posted in packing slip)
        this.insertValueToSection('FactQty'     ,   line.Qty);
        this.insertValueToSection('FactPrice'   ,   line.Price);
        this.insertValueToSection('FactAmount'  ,   line.LineAmount);

        if (line.DeviationQty < 0) // shortage
        {
            this.insertValueToSection('LossQty'     ,     abs(line.DeviationQty));
            this.insertValueToSection('LossAmount'  ,     abs(line.DeviationAmount));
        }
        else
        {
            this.insertValueToSection('LossQty'     ,     #blank);
            this.insertValueToSection('LossAmount'  ,     #blank);
        }

        if (line.DeviationQty > 0) // overhead
        {
            this.insertValueToSection('ExcessQty'   ,     line.DeviationQty);
            this.insertValueToSection('ExcessAmount',     line.DeviationAmount);
        }
        else
        {
            this.insertValueToSection('ExcessQty'   ,     #blank);
            this.insertValueToSection('ExcessAmount',     #blank);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case Page1:
                this.fillPage1();
                break;
            case Page4:
                this.fillPage4();
                break;
            case ReportHeader:
                this.fillReportHeader();
                break;
            case PageHeader:
                this.fillPageHeader();
                break;
            case Body:
                this.fillBody();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills first page section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPage1()
    {
        this.insertValueToSection('DirectorPosition',      header.DirectorTitle);
        this.insertValueToSection('DirectorName',          header.DirectorName);

        this.insertValueToSection('SignificationDate',     header.InvoiceDate);
        this.insertValueToSection('DocumentDate',          header.InvoiceDate);
        this.insertValueToSection('DocumentNumber',        subHeader.DocumentId);

        this.insertValueToSection('OKPO',                  header.CustOKPO);
        this.insertValueToSection('CompanyName',           header.CustName);
        this.insertValueToSection('CompanyAddress',        header.CustBankAddress);

        this.insertValueToSection('InvoiceAccountName',    header.VendName + #Space + header.VendBankAddress);
        this.insertValueToSection('VendAccountName',       header.ConsignorBankAddress);
        this.insertValueToSection('AcceptorAccount',       header.CustName + header.CustBankAddress);
        this.insertValueToSection('ContractNumber',        header.AgreementDocumentTitle);
        this.insertValueToSection('ContractDate',          header.AgreementDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPage4</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills fourth page section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPage4()
    {
        OfficialsTrans_RU officialsTrans;
        Counter           i;
        str               stri;
        RecordSortedList  list = OfficialsTrans_RU::findMulti(header.OffSessionId,
                                                              OffReportType_RU::PurchM4M7,
                                                              OffPosition_RU::Member,
                                                              header.VendAccount,
                                                              subHeader.InventLocationId,
                                                              InventParameters::inventReceiptsListMembersNumber_RU());
        ;
        list.first(officialsTrans);

        while (officialsTrans)
        {
            i++;
            stri = int2str(i);

            this.insertValueToSection('CommissionMember' + stri + 'Name',  officialsTrans.Name);
            this.insertValueToSection('CommissionMember' + stri + 'Title', officialsTrans.Title);

            if (! list.next(officialsTrans))
                break;
        }

        this.insertValueToSection('AcceptanceDate',  header.InvoiceDate);
        this.insertValueToSection('Stockkeeper',     subHeader.AcceptorName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillPageHeader()
    {
        const str TwoWithSep = ",    \%1, \%2";
        const str OneWithSep = ",    \%1";
        str     currencyLong, priceStr, amountStr;

        if (header.CurrencyShortName && header.CurrencyShortNamePenny)
        {
            currencyLong    = strFmt(TwoWithSep, header.CurrencyShortName, header.CurrencyShortNamePenny);
        }
        else if (header.CurrencyShortName || header.CurrencyShortNamePenny)
        {
            currencyLong    = strFmt(OneWithSep, header.CurrencyShortName + header.CurrencyShortNamePenny);
        }
        priceStr     = new Label(header.LanguageId).extractString("@GLS100865");
        amountStr    = new Label(header.LanguageId).extractString("@GLS101909");

        this.insertValueToSection('PriceCurrency_1',       priceStr  + currencyLong);
        this.insertValueToSection('PriceCurrency_2',       priceStr  + currencyLong);
        this.insertValueToSection('AmountCurrency_1',      amountStr + currencyLong);
        this.insertValueToSection('AmountCurrency_2',      amountStr + currencyLong);
        this.insertValueToSection('AmountCurrency_3',      amountStr + currencyLong);
        this.insertValueToSection('AmountCurrency_4',      amountStr + currencyLong);
        this.insertValueToSection('AmountCurrency_5',      amountStr + currencyLong);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportHeader()
    {
        this.insertValueToSection('StockName',             subHeader.InventLocationName);
        this.insertValueToSection('VendAccount',           header.VendAccount);
        this.insertValueToSection('LedgerAccount',         this.getMainAccountNum());
        this.insertValueToSection('AnalysisCode',          this.getAnalysisCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
        protected void initSectionMap()
    {
        this.addSection(Page1);
        this.addSection(Page2);
        this.addSection(Page4);
        this.addSection(ReportHeader);
        this.addSection(PageHeader);
        this.addSection(Body, true);
        this.addSection(PageFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks whether report should create new page
    /// </summary>
    /// <returns>
    /// Whether last fetched record should be printed on current page
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(Body);

        requiredHeight += conPeek(mapSections.lookup(PageFooter), #posSectionHeight);

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
        protected Filename templateName()
    {
        return resourceStr(M7_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        const int CellsBody = 14;
        const int CellsOther = 30;
        TmpSalesPurchReportLine_RU      lineLocal;

        lineLocal.setTmpData(line);
        select count(RecId) from lineLocal;

        return CellsOther + (int642int(lineLocal.RecId) * CellsBody);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static OXMLExcelReport_M7 construct()
    {
        return new OXMLExcelReport_M7();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>