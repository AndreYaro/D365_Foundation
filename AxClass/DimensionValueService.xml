<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimensionValueService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimensionValueService</c> class is a framework class.
/// </summary>
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
class DimensionValueService
{
    private DimensionAttributeRecId mainAccountDimAttributeRecId = DimensionAttributeDelegates::callGetWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
    private boolean isMainAccountChecking = DimensionValueServiceMainAccountCheckOnMainAccountDimensionsFlight::instance().isEnabled();

    #DimensionServiceFaults
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDimensionValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes an incoming dimension value contract and creates a financial dimension value for a
    /// specific financial dimension.
    /// </summary>
    /// <param name="_dimensionValueContract">
    /// The incoming dimension value contract.
    /// </param>
    /// <returns>
    /// true if a new value is successfully assigned to an existing dimension; false if the value is
    /// already associated with the dimension.
    /// </returns>
    /// <remarks>
    /// An exception is thrown if the dimension does not exist or is not a user-defined dimension.
    /// </remarks>
    public boolean createDimensionValue(DimensionValueContract _dimensionValueContract)
    {
        DimensionAttribute              dimensionAttribute;
        DimensionAttributeValue         dimensionAttributeValue;
        DimensionFinancialTag           dimensionFinancialTag;
        DimensionValueMask              dimensionValueMask;
        boolean ret = false;

        if (!_dimensionValueContract)
        {
            throw AifFault::faultList("@SYS323942", #DimensionValueContractIsNotInitialized);
        }

        if (!_dimensionValueContract.parmDimensionAttribute())
        {
            throw AifFault::faultList("@SYS323943", #DimensionAttributeIsNotInitialized);
        }

        if (!_dimensionValueContract.parmValue())
        {
            throw AifFault::faultList("@SYS323944", #DimensionAttributeValueIsNotSpecified);
        }

        if (_dimensionValueContract.parmPersonnelNumber())
        {
            if (!HcmWorker::findByPersonnelNumber(_dimensionValueContract.parmPersonnelNumber()))
            {
                throw AifFault::faultList("@SYS183537", #InvalidPersonnelNumber);
            }
        }

        select firstonly dimensionAttribute where dimensionAttribute.Name == _dimensionValueContract.parmDimensionAttribute();

        if (dimensionAttribute && dimensionAttribute.Type == DimensionAttributeType::CustomList)
        {
            dimensionValueMask = FinancialTagCategory::find(dimensionAttribute.financialTagCategory()).Mask;
            if (dimensionValueMask && !FinancialTagCategory::doesValueMatchMask(_dimensionValueContract.parmValue(), dimensionValueMask))
            {
                throw AifFault::faultList(strFmt("@SYS135845", _dimensionValueContract.parmValue(), dimensionValueMask), #DimensionAttributeValueMaskDoesNotMatch);
            }

            if ((_dimensionValueContract.parmActiveTo() != dateNull()) && (_dimensionValueContract.parmActiveTo() < _dimensionValueContract.parmActiveFrom()))
            {
                throw AifFault::faultList("@SYS135850", #DimensionAttributeValueActiveDateError);
            }

            select firstonly DimensionAttribute, EntityInstance from dimensionAttributeValue
            join RecId, Value from dimensionFinancialTag where
                (dimensionAttributeValue.DimensionAttribute == dimensionAttribute.RecId) &&
                (dimensionFinancialTag.RecId == dimensionAttributeValue.EntityInstance) &&
                (dimensionFinancialTag.Value == _dimensionValueContract.parmValue());

            if (!dimensionFinancialTag)
            {
                dimensionAttributeValue.clear();
                ttsbegin;
                dimensionFinancialTag.Value = _dimensionValueContract.parmValue();
                dimensionFinancialTag.Description = _dimensionValueContract.parmDescription();
                dimensionFinancialTag.FinancialTagCategory = dimensionAttribute.financialTagCategory();
                dimensionFinancialTag.insert();

                dimensionAttributeValue.EntityInstance = dimensionFinancialTag.RecId;
                dimensionAttributeValue.DimensionAttribute = dimensionAttribute.RecId;
                dimensionAttributeValue.ActiveFrom = _dimensionValueContract.parmActiveFrom();
                dimensionAttributeValue.ActiveTo = _dimensionValueContract.parmActiveTo();
                dimensionAttributeValue.IsBlockedForManualEntry = _dimensionValueContract.parmIsBlockedForManualEntry();
                dimensionAttributeValue.IsSuspended = _dimensionValueContract.parmIsSuspended();
                dimensionAttributeValue.Owner = HcmWorker::findByPersonnelNumber(_dimensionValueContract.parmPersonnelNumber()).RecId;
                dimensionAttributeValue.insert();
                ttscommit;
                ret = true;
            }
        }
        else if (!dimensionAttribute)
        {
            throw AifFault::faultList("@SYS323856", #DimensionAttributeDoesNotExist);
        }
        else if (dimensionAttribute.Type != DimensionAttributeType::CustomList)
        {
            throw AifFault::faultList("@SYS323857", #DimensionAttributeIsNotUserDefined);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValueList</Name>
				<Source><![CDATA[
    // This method returns a list of dimensionValuecontract
    private List getDimensionValueList(DimensionAttribute _dimensionAttribute)
    {
        List                                dimensionValueList;
        DimensionAttributeValue             dimensionAttributeValue;
        FinancialTagCategory                financialTagCategory;
        DimensionAttributeDirCategory       dimensionAttributeDirCategory;
        int                                 categoryFieldNum;

        Common                  common;
        DictTable               dictTable;

        dimensionValueList = new List(Types::Class);

        dictTable = new DictTable(_dimensionAttribute.BackingEntityType);

        if (dictTable && dictTable.fieldObject(_dimensionAttribute.NameAttribute) && dictTable.fieldObject(_dimensionAttribute.ValueAttribute))
        {
            common = dictTable.makeRecord();

            if (_dimensionAttribute.Type == DimensionAttributeType::CustomList)
            {
                categoryFieldNum = fieldNum(DimensionFinancialTag, FinancialTagCategory);

                while select common
                    outer join ActiveFrom, ActiveTo, Owner, GroupDimension, IsBlockedForManualEntry, IsSuspended from dimensionAttributeValue
                        where dimensionAttributeValue.EntityInstance == common.RecId &&
                              dimensionAttributeValue.DimensionAttribute == _dimensionAttribute.RecId
                    exists join financialTagCategory
                        where  financialTagCategory.RecId == common.(categoryFieldNum)
                    exists join dimensionAttributeDirCategory
                        where (financialTagCategory.RecId == dimensionAttributeDirCategory.DirCategory)
                        && (_dimensionAttribute.RecId == dimensionAttributeDirCategory.DimensionAttribute)
                {
                    this.insertDimensionValueList(dimensionValueList, _dimensionAttribute, dimensionAttributeValue, common);
                }
            }
            else
            {
                while select common
                    outer join ActiveFrom, ActiveTo, Owner, GroupDimension, IsBlockedForManualEntry, IsSuspended from dimensionAttributeValue
                        where dimensionAttributeValue.EntityInstance        == common.(_dimensionAttribute.KeyAttribute)
                           && dimensionAttributeValue.DimensionAttribute    == _dimensionAttribute.RecId
                {
                    this.insertDimensionValueList(dimensionValueList, _dimensionAttribute, dimensionAttributeValue, common);
                }
            }
        }
        return dimensionValueList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes an incoming dimension contract and returns a list of financial dimension values for a
    /// specific financial dimension.
    /// </summary>
    /// <param name="_dimensionContract">
    /// The incoming dimension contract.
    /// </param>
    /// <returns>
    /// A list of <c>DimensionValueContract</c> objects.
    /// </returns>
    /// <remarks>
    /// Exceptions are thrown if the dimension does not exist.
    /// </remarks>
    [AifCollectionTypeAttribute('return', Types::Class, classStr(DimensionValueContract))]
    public List getDimensionValues(DimensionContract _dimensionContract)
    {
        DimensionAttribute  dimensionAttribute;
        List                dimensionValueContractList;

        if (!_dimensionContract)
        {
            throw AifFault::faultList("@SYS323958", #DimensionContractIsNotInitialized);
        }

        if (!_dimensionContract.parmDimensionName())
        {
            throw  AifFault::faultList("@SYS323957", #DimensionContractIsNotInitialized);
        }

        changecompany(curext())
        {
            select firstonly dimensionAttribute where dimensionAttribute.Name == _dimensionContract.parmDimensionName();
            if (dimensionAttribute)
            {
                dimensionValueContractList =  this.getDimensionValueList(dimensionAttribute);
            }
            else
            {
                throw AifFault::faultList("@SYS323856", #DimensionAttributeDoesNotExist);
            }
        }
        return dimensionValueContractList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDimensionValueList</Name>
				<Source><![CDATA[
    private void insertDimensionValueList(List _dimensionValueList,
                        DimensionAttribute _dimensionAttribute,
                        DimensionAttributeValue _dimensionAttributeValue,
                        Common _common)
    {
        NoYes isBlockedForManualEntry;

        if (isMainAccountChecking && _dimensionAttribute.RecId == mainAccountDimAttributeRecId)
        {
            isBlockedForManualEntry = MainAccount::isBlockedForManualEntryByDimensionAttributeValue(_dimensionAttributeValue.RecId, curExt());
        }
        else
        {
            isBlockedForManualEntry = _dimensionAttributeValue.IsBlockedForManualEntry;
        }

        DimensionValueContract dimensionValueContract;

        dimensionValueContract = new DimensionValueContract();
        dimensionValueContract.parmDimensionAttribute(_dimensionAttribute.Name);
        dimensionValueContract.parmBackingEntityType(_dimensionAttribute.BackingEntityType);
        dimensionValueContract.parmValue(_common.(_dimensionAttribute.ValueAttribute));
        dimensionValueContract.parmDescription(_common.(_dimensionAttribute.NameAttribute));
        dimensionValueContract.parmActiveFrom(_dimensionAttributeValue.ActiveFrom);
        dimensionValueContract.parmActiveTo(_dimensionAttributeValue.ActiveTo);
        dimensionValueContract.parmPersonnelNumber(HcmWorker::find(_dimensionAttributeValue.Owner).PersonnelNumber);
        dimensionValueContract.parmGroupDimension(_dimensionAttributeValue.GroupDimension);
        dimensionValueContract.parmIsBlockedForManualEntry(isBlockedForManualEntry);
        dimensionValueContract.parmIsSuspended(_dimensionAttributeValue.IsSuspended);
        _dimensionValueList.addEnd(dimensionValueContract);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>