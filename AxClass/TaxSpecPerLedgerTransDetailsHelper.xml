<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxSpecPerLedgerTransDetailsHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class containing helper method to process details version of the report.
/// </summary>
public class TaxSpecPerLedgerTransDetailsHelper extends TaxSpecPerLedgerTransBaseHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillReportTable</Name>
				<Source><![CDATA[
    private void fillReportTable()
    {
        // <GEEW>
        #EECountryRegionCodes
        // </GEEW>

        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        TaxTransGeneralJournalAccountEntry taxTransGeneralJournalAccountEntry;
        TaxTransGeneralJournalAccountEntry taxTransLinkBaseVariance;
        TaxTrans taxTrans;
        TaxAccountingDistParentLineView acctDistView;
        TransactionReversalTrans reversalTrans;
        TaxTable taxtable;
        TaxTrans_W taxTransW;

        #LOCALMACRO.DefaultWhereClause
                    generalJournalEntry.AccountingDate >= fromDate
                    && generalJournalEntry.AccountingDate <= toDate
                    && generalJournalEntry.Ledger == ledgerRecId
                    && generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                    && mainAccountLedgerDimensionView.LedgerDimensionId == generalJournalAccountEntry.LedgerDimension
                    && mainAccountLedgerDimensionView.MainAccount >= fromMainAccount
                    && mainAccountLedgerDimensionView.MainAccount <= toMainAccount
                    && taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount ||
                        taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::Tax ||
                        taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::UseTaxPayable ||
                        taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount ||
                        taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TaxInCostPrice)
                    && taxTrans.RecId == taxTransGeneralJournalAccountEntry.TaxTrans
                    && taxTrans.TaxCode >= fromTaxCode
                    && taxTrans.TaxCode <= toTaxCode
                    && taxTrans.TaxOrigin != TaxOrigin::TaxReporting
                    && taxTrans.TransDate >= fromDate
                    && taxTrans.TransDate <= ToDate
                    && taxtable.TaxCode == taxTrans.TaxCode
        #ENDMACRO

        #LOCALMACRO.AccountDistributionWhereClause
            acctDistView.SourceDocumentLine == taxTrans.SourceDocumentLine
            && acctDistView.ParentDistributionLedgerDimension == mainAccountLedgerDimensionView.LedgerDimensionId
            && acctDistView.IgnoreRecord == NoYes::No
        #ENDMACRO
        
        #LOCALMACRO.PriceVarianceWhereClause
            && (( (taxTransGeneralJournalAccountEntry.MonetaryAmountType  == MonetaryAmount::ExtendedPrice
                    || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::Charge)
                && acctDistView.MonetaryAmount == MonetaryAmount::Tax)
            || ((taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::PriceVariance
                    || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::ChargeVariance
                    || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::QuantityVariance)
                && acctDistView.MonetaryAmount == MonetaryAmount::TaxVariance))
        #ENDMACRO
        
        #LOCALMACRO.TaxVarianceWhereClause
            && ((taxTransGeneralJournalAccountEntry.MonetaryAmountType  == MonetaryAmount::ExtendedPrice
                    || taxTransGeneralJournalAccountEntry.MonetaryAmountType == MonetaryAmount::Charge)
                && acctDistView.MonetaryAmount == MonetaryAmount::TaxVariance)
        #ENDMACRO
    
        #LOCALMACRO.TaxBaseVarianceWhereClause
            taxTransLinkBaseVariance.taxtrans == taxTransGeneralJournalAccountEntry.TaxTrans
                && (taxTransLinkBaseVariance.MonetaryAmountType == MonetaryAmount::PriceVariance
                    || taxTransLinkBaseVariance.MonetaryAmountType == MonetaryAmount::ChargeVariance
                    || taxTransLinkBaseVariance.MonetaryAmountType == MonetaryAmount::QuantityVariance)
        #ENDMACRO

        // Process Legacy documents for tax referred accounts
        insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                TaxTrans, TaxCode, TaxDirection, TaxInCostPriceMST, TaxAmount, TaxBaseAmount,
                                TaxCodeName)
            select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
                join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
                join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
                join taxTransGeneralJournalAccountEntry
                join RecId, TaxCode, TaxDirection, TaxInCostPriceMST, TaxAmount, TaxBaseAmount from taxTrans
                join TaxName from taxtable
                where #DefaultWhereClause
                    && (taxTrans.SourceDocumentLine == 0
                        || taxTrans.TaxOrigin == TaxOrigin::CashDisc
                        || taxTrans.TaxOrigin == TaxOrigin::Payment
                        || taxTrans.TaxOrigin == TaxOrigin::TaxReversed)
                    && (taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::TransactionLineAccount
                        || taxTransGeneralJournalAccountEntry.TaxTransRelationship == TaxTransRelationshipType::CashDiscount);

        if (FeatureStateProvider::isFeatureEnabled(TaxSpecLedgerTransReportShowTxAmtForTxAcctFlighting::instance()))
        {
            // Process Legacy documents for tax accounts generated by tax journal
            insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                TaxTrans, TaxCode, TaxDirection, TaxInCostPriceMST, TaxAmount, TaxBaseAmount,
                                TaxCodeName)
            select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
                join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
                join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
                join taxTransGeneralJournalAccountEntry
                join RecId, TaxCode, TaxDirection, TaxInCostPriceMST, TaxAmount, TaxBaseAmount from taxTrans
                join TaxName from taxtable
                where #DefaultWhereClause
                    && (taxTrans.SourceDocumentLine == 0
                        || taxTrans.TaxOrigin == TaxOrigin::CashDisc
                        || taxTrans.TaxOrigin == TaxOrigin::Payment
                        || taxTrans.TaxOrigin == TaxOrigin::TaxReversed)
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed
                    && (taxTrans.SourceBaseAmountCur == 0 && taxTrans.SourceTaxAmountCur != 0); // means generated by tax journal

            // Process Legacy documents for tax accounts not generated by tax journal
            insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                TaxTrans, TaxCode, TaxDirection,
                                TaxCodeName)
            select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
                join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
                join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
                join taxTransGeneralJournalAccountEntry
                join RecId, TaxCode, TaxDirection from taxTrans
                join TaxName from taxtable
                where #DefaultWhereClause
                    && (taxTrans.SourceDocumentLine == 0
                        || taxTrans.TaxOrigin == TaxOrigin::CashDisc
                        || taxTrans.TaxOrigin == TaxOrigin::Payment
                        || taxTrans.TaxOrigin == TaxOrigin::TaxReversed)
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed
                    && (taxTrans.SourceBaseAmountCur != 0 || taxTrans.SourceTaxAmountCur == 0);
        }
        else
        {
            // Process Legacy documents for tax accounts
            insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                TaxTrans, TaxCode, TaxDirection,
                                TaxCodeName)
            select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
                join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
                join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
                join taxTransGeneralJournalAccountEntry
                join RecId, TaxCode, TaxDirection from taxTrans
                join TaxName from taxtable
                where #DefaultWhereClause
                    && (taxTrans.SourceDocumentLine == 0
                        || taxTrans.TaxOrigin == TaxOrigin::CashDisc
                        || taxTrans.TaxOrigin == TaxOrigin::Payment
                        || taxTrans.TaxOrigin == TaxOrigin::TaxReversed)
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TransactionLineAccount
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::CashDiscount
                    && taxTransGeneralJournalAccountEntry.TaxTransRelationship != TaxTransRelationshipType::TaxReversed;
        }

        // Process source documents for tax referred accounts
        if (TaxSpecPerLedgerTransReportExcludInterunitFlight::instance().isEnabled())
        {
            SubledgerJournalAccountEntry subledgerJournalAccountEntry;

            insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                    GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                    FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                    TaxBaseAmount, MonetaryAmountType,
                                    TaxTrans, TaxCode, TaxDirection, TaxTransSourceTableId, TaxTransSourceRecId, TaxCodeName, TaxAmount)
            select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
                join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
                join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
                join AccountingCurrencyAmount, MonetaryAmountType from taxTransGeneralJournalAccountEntry
                join RecId, TaxCode, TaxDirection, SourceTableId, SourceRecId from taxTrans
                join TaxName from taxtable
                    where #DefaultWhereClause
                        && taxTrans.SourceDocumentLine != 0
                        && taxTrans.TaxOrigin != TaxOrigin::Payment
                        && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                        && taxTrans.TaxOrigin != TaxOrigin::CashDisc
                join AccountingCurrencyAmount from acctDistView
                    where #AccountDistributionWhereClause
                        #PriceVarianceWhereClause
                exists join subledgerJournalAccountEntry
                    where subledgerJournalAccountEntry.RecId == acctDistView.SubledgerJournalAccountEntry
                        && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitCredit
                        && subledgerJournalAccountEntry.PostingType != LedgerPostingType::InterunitDebit;
        }
        else
        {
            insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                    GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                    FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                    TaxBaseAmount, MonetaryAmountType,
                                    TaxTrans, TaxCode, TaxDirection, TaxTransSourceTableId, TaxTransSourceRecId, TaxCodeName, TaxAmount)
            select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
                join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
                join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
                join AccountingCurrencyAmount, MonetaryAmountType from taxTransGeneralJournalAccountEntry
                join RecId, TaxCode, TaxDirection, SourceTableId, SourceRecId from taxTrans
                join TaxName from taxtable
                    where #DefaultWhereClause
                        && taxTrans.SourceDocumentLine != 0
                        && taxTrans.TaxOrigin != TaxOrigin::Payment
                        && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                        && taxTrans.TaxOrigin != TaxOrigin::CashDisc
                join AccountingCurrencyAmount from acctDistView
                    where #AccountDistributionWhereClause
                        #PriceVarianceWhereClause;
        }


        // Below 2 flights are mutually exclusive. In one environment, only 1 flight should be enabled.
        // Option 1: TaxTransReportVarianceTotalFixFlight
        //      Fixing the total amount by clearing quantity variance amount.
        // Option 2: TaxTransReportVarianceDetailFixFlight
        //      Fixing the detail amount of amount type price variance and quantity variance
        //      This fix would allocate the tax variance amounts to related variance types.
        //      Currently, we only support 2 kinds of variances: QuantityVariance & PriceVariance.
        //      The allocation factor is calculated base on tax's parent variance amount.
        // If the total amount fix applied, the amount of quantity variance is cleared which would not be able to allocate the detail amount anymore
        if (TaxTransReportVarianceTotalFixFlight::instance().isEnabled())
        {
            update_recordSet reportTable
            setting TaxAmount = 0
                where reportTable.MonetaryAmountType == MonetaryAmount::QuantityVariance;
        }
        else if (TaxTransReportVarianceDetailFixFlight::instance().isEnabled() && !TaxTransReportVarianceTotalFixFlight::instance().isEnabled())
        {
            Amount quantityVarianceAmount = 0;
            RecId generalJournalEntryRecId;
            TaxCode taxCode;
            RefRecId sourceRecId;
            RefTableId sourceTableId;
            CurrencyCode accountingCurrencyCode = Ledger::accountingCurrency(CompanyInfo::find().RecId);
            TaxSpecPerLedgerTransTmp taxSpecPerLedgerTransTmp;

            taxSpecPerLedgerTransTmp.setConnection(userConnection);
            taxSpecPerLedgerTransTmp.linkPhysicalTableInstance(reportTable);
            userConnection.ttsbegin();

            while select forupdate reportTable
                order by reportTable.GeneralJournalEntry, reportTable.TaxTransSourceTableId, reportTable.TaxTransSourceRecId, reportTable.TaxCode, reportTable.MonetaryAmountType
                where reportTable.MonetaryAmountType == MonetaryAmount::QuantityVariance || reportTable.MonetaryAmountType == MonetaryAmount::PriceVariance
            {
                if (reportTable.GeneralJournalEntry != generalJournalEntryRecId
                            || (reportTable.TaxTransSourceTableId != sourceTableId && reportTable.TaxTransSourceRecId != sourceRecId)
                            || reportTable.TaxCode != taxCode)
                {
                    select firstonly sum(TaxBaseAmount), GeneralJournalEntry from taxSpecPerLedgerTransTmp
                        group by GeneralJournalEntry
                        where (taxSpecPerLedgerTransTmp.MonetaryAmountType == MonetaryAmount::QuantityVariance
                            || taxSpecPerLedgerTransTmp.MonetaryAmountType == MonetaryAmount::PriceVariance)
                            && taxSpecPerLedgerTransTmp.GeneralJournalEntry == reportTable.GeneralJournalEntry
                            && taxSpecPerLedgerTransTmp.TaxTransSourceTableId == reportTable.TaxTransSourceTableId
                            && taxSpecPerLedgerTransTmp.TaxTransSourceRecId == reportTable.TaxTransSourceRecId
                            && taxSpecPerLedgerTransTmp.TaxCode == reportTable.TaxCode
                            && taxSpecPerLedgerTransTmp.TaxBaseAmount != 0;
                
                    generalJournalEntryRecId = taxSpecPerLedgerTransTmp.GeneralJournalEntry;
                    sourceTableId = reportTable.TaxTransSourceTableId;
                    sourceRecId = reportTable.TaxTransSourceRecId;
                    taxCode = reportTable.TaxCode;
                    quantityVarianceAmount = 0;
                }

                switch (reportTable.MonetaryAmountType) // in case more MonetaryAmount type needed to be supported, add case here.
                {
                    case MonetaryAmount::QuantityVariance:
                        quantityVarianceAmount = CurrencyExchangeHelper::amount((reportTable.TaxBaseAmount/taxSpecPerLedgerTransTmp.TaxBaseAmount)*reportTable.TaxAmount, accountingCurrencyCode);
                        reportTable.TaxAmount = quantityVarianceAmount;
                        reportTable.doUpdate();
                        break;
                    case MonetaryAmount::PriceVariance:
                        if (quantityVarianceAmount)
                        {
                            reportTable.TaxAmount = reportTable.TaxAmount - quantityVarianceAmount;
                            reportTable.doUpdate();
                        }
                        break;
                    default:
                        break;
                }
            }
            // end while

            userConnection.ttscommit();
        }

        // Process source documents for tax referred accounts - for some case, there is tax variance but no variance base
        insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                TaxBaseAmount,
                                TaxTrans, TaxCode, TaxDirection, TaxCodeName, TaxAmount)
        select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
            join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
            join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
            join AccountingCurrencyAmount from taxTransGeneralJournalAccountEntry
            join RecId, TaxCode, TaxDirection from taxTrans
            join TaxName from taxtable
                where #DefaultWhereClause
                    && taxTrans.SourceDocumentLine != 0
                    && taxTrans.TaxOrigin != TaxOrigin::Payment
                    && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                    && taxTrans.TaxOrigin != TaxOrigin::CashDisc
            join AccountingCurrencyAmount from acctDistView
                where #AccountDistributionWhereClause
                    #TaxVarianceWhereClause
            notExists join taxTransLinkBaseVariance
                where #TaxBaseVarianceWhereClause;

        // Process source documents for tax referred accounts - for some case, the tax rate is zero
        insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                TaxBaseAmount,
                                TaxTrans, TaxCode, TaxDirection, TaxCodeName)
        select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
            join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
            join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
            join AccountingCurrencyAmount from taxTransGeneralJournalAccountEntry
            join RecId, TaxCode, TaxDirection from taxTrans
            join TaxName from taxtable
                where #DefaultWhereClause
                    && taxTrans.SourceDocumentLine != 0
                    && taxTrans.TaxOrigin != TaxOrigin::Payment
                    && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                    && taxTrans.TaxOrigin != TaxOrigin::CashDisc
                    && taxTrans.TaxAmount == 0;

        // Process source documents for tax accounts
        insert_recordset reportTable (GeneralJournalEntry, AccountingDate, JournalNumber, Voucher,
                                GeneralJournalAccountEntry, Text, AmountDebit, IsCredit,
                                FullyQualifiedAccount, MainAccount, Name, MainAccountRecId,
                                TaxTrans, TaxCode, TaxDirection, TaxCodeName)
        select RecId, AccountingDate, JournalNumber, SubLedgerVoucher from generalJournalEntry
            join RecId, Text, AccountingCurrencyAmount, IsCredit from generalJournalAccountEntry
            join FullyQualifiedAccount, MainAccount, Name, MainAccountRecId from mainAccountLedgerDimensionView
            join taxTransGeneralJournalAccountEntry
            join RecId, TaxCode, TaxDirection from taxTrans
            join TaxName from taxtable
                where #DefaultWhereClause
                    && taxTrans.SourceDocumentLine != 0
                    && taxTrans.TaxOrigin != TaxOrigin::Payment
                    && taxTrans.TaxOrigin != TaxOrigin::TaxReversed
                    && taxTrans.TaxOrigin != TaxOrigin::CashDisc
                    && taxTrans.TaxAmount != 0
            notExists join acctDistView
                where acctDistView.SourceDocumentLine == taxTrans.SourceDocumentLine
                && acctDistView.ParentDistributionLedgerDimension == mainAccountLedgerDimensionView.LedgerDimensionId
                && acctDistView.IgnoreRecord == NoYes::No;

        // <GEEW>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion(#easternEuropeAll))
        {
            update_recordSet reportTable
            setting VatDueDate_W = taxTransW.VatDueDate_W
                join taxTransW
                    where taxTransW.TaxTrans == reportTable.TaxTrans;
        }
        // </GEEW>

        if (isReportByAccTypeExpenditureFeatureEnabled)
        {
            GeneralJournalAccountEntry generalJournalAccountEntryInvoice;
            InventTransOrigin inventTransOrigin;
            InventTransPosting inventTransPosting;

            update_recordSet reportTable
            setting AmountDebit = generalJournalAccountEntryInvoice.AccountingCurrencyAmount
                where reportTable.AmountCredit == 0
            join generalJournalAccountEntry
                where reportTable.GeneralJournalAccountEntry == generalJournalAccountEntry.RecId
                    && generalJournalAccountEntry.PostingType == LedgerPostingType::PurchConsump
            join generalJournalEntry
                where reportTable.GeneralJournalEntry == generalJournalEntry.RecId
            join inventTransPosting
                where generalJournalEntry.SubledgerVoucher == inventTransPosting.Voucher
                    && generalJournalAccountEntry.LedgerDimension == inventTransPosting.OffsetLedgerDimension
                    && inventTransPosting.PostingTypeOffset == generalJournalAccountEntry.PostingType
                    && inventTransPosting.InventTransPostingType == InventTransPostingType::Financial
            join taxTrans
                where reportTable.TaxTrans == taxTrans.RecId
                    && taxTrans.SourceDocumentLine != 0
            join AccountingCurrencyAmount from generalJournalAccountEntryInvoice
                where generalJournalEntry.RecId == generalJournalAccountEntryInvoice.GeneralJournalEntry
                    && generalJournalAccountEntryInvoice.LedgerDimension == inventTransPosting.LedgerDimension
                    && generalJournalAccountEntryInvoice.PostingType == inventTransPosting.PostingType
            exists join inventTransOrigin
                where inventTransOrigin.InventTransId == taxTrans.InventTransId
                    && inventTransOrigin.RecId == inventTransPosting.InventTransOrigin;
        }
        // Update voucher values for summurized vouchers
        update_recordSet reportTable
        setting Voucher = literalStr("@SYS110428")
            where reportTable.Voucher == '';

        // Fix amount credit and amount debit.
        update_recordSet reportTable
        setting AmountCredit = -1 * reportTable.AmountDebit,
                AmountDebit = 0
            where reportTable.IsCredit == true;

        update_recordSet reportTable
        setting TaxReceivable = reportTable.TaxAmount - reportTable.TaxInCostPriceMST
            where reportTable.TaxDirection == TaxDirection::IncomingTax;

        update_recordSet reportTable
        setting TaxPayable = -1 * reportTable.TaxAmount
            where reportTable.TaxDirection == TaxDirection::OutgoingTax;

        update_recordSet reportTable
        setting TraceNum = reversalTrans.TraceNum
        join firstOnly TraceNum from reversalTrans
            where reversalTrans.RefTableId == tableNum(GeneralJournalAccountEntry)
                && reversalTrans.RefRecId == reportTable.GeneralJournalAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes report data for detailed version of the report when only default query ranges are present.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Should not be called for processing totals only version.
    /// </exception>
    public void process()
    {
        if (contract.parmTotalOnly())
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        reportTable.setConnection(userConnection);

        this.initializeRanges();
        this.fillReportTable();

        select firstOnly RecId from reportTable;
        this.updateRecordNumbers(reportTable.getPhysicalTableName());
        this.updateMainAccountName();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>