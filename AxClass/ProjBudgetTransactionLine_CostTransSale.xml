<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetTransactionLine_CostTransSale</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjBudgetTransactionLine_CostTransSale</c> class is used to hold the budget transaction
///    information that is associated with the reversal invoice proposal of expense transactions.
/// </summary>
class ProjBudgetTransactionLine_CostTransSale extends ProjBudgetTransactionLine
{
    ProjCostTrans             projCostTrans;
    ProjCostTransSale         projCostTransSale;
    ProjTrans                 projTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the project activity number of a transaction.
    /// </summary>
    /// <returns>
    /// The project activity number of the transaction.
    /// </returns>
    public ProjActivityNumber activityNumber()
    {
        return projTrans.activityNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project category ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project category ID of the transaction.
    /// </returns>
    public ProjCategoryId categoryId()
    {
        return projTrans.categoryId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the cost amount of the transaction after the currency conversion.
    /// </summary>
    /// <returns>
    ///    The total cost amount.
    /// </returns>
    public CostAmount costAmount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of cost amount.
    /// </summary>
    /// <returns>
    ///    The currency code.
    /// </returns>
    public CurrencyCode costAmountCurrencyCode()
    {
        return projTrans.currencyIdCost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project Line Property ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project Line Property ID of the transaction.
    /// </returns>
    public ProjLinePropertyId linePropertyId()
    {
        return projTrans.linePropertyId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an object of the <c>ProjBudgetTransactionLine_CostTransSale</c> class.
    /// </summary>
    /// <param name="_projCostTransSale">
    ///    A <c>ProjCostTransSale</c> table buffer.
    /// </param>
    void new(ProjCostTransSale _projCostTransSale)
    {
        super();
        projCostTransSale   = _projCostTransSale;
        projCostTrans       = ProjCostTrans::find(projCostTransSale.TransId);
        projTrans           = ProjTrans::newProjCostTransSale(projCostTrans, projCostTransSale);
        quantity            = -1 * projTrans.qty();
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the project ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The project ID.
    /// </returns>
    public ProjId projId()
    {
        return projTrans.projId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the sales amount of the transaction after a currency conversion.
    /// </summary>
    /// <returns>
    ///    The sales amount.
    /// </returns>
    public SalesAmount salesAmount()
    {
        return  -1 * projTrans.transTurnover();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the currency code of sales amount.
    /// </summary>
    /// <returns>
    ///    The currency code.
    /// </returns>
    public CurrencyCode salesAmountCurrencyCode()
    {
        return projTrans.currencyIdSales();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction date of the transaction.
    /// </summary>
    /// <returns>
    ///    The transaction date.
    /// </returns>
    public TransDate transDate()
    {
        return projTrans.transDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction ID of the transaction.
    /// </summary>
    /// <returns>
    ///    The transaction ID.
    /// </returns>
    public ProjTransIdBase transId()
    {
        if (! this.parmTransIdRef())
        {
            projTransIdBase = projTrans.transId();
        }
        return this.parmTransIdRef();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction type of the transaction line.
    /// </summary>
    /// <returns>
    ///    The <c>Cost</c> type enumeration value.
    /// </returns>
    public ProjTransType transType()
    {
        return projTrans.transType();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>