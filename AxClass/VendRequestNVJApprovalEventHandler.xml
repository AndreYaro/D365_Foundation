<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestNVJApprovalEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    This <c>VendRequestNVJApprovalEventHandler</c> class implements the started, completed, canceled,
///    and denied workflow approval element event interfaces that are used for the approval process.
/// </summary>
class VendRequestNVJApprovalEventHandler implements WorkflowElementCompletedEventHandler,
                                                   WorkflowElementCanceledEventHandler,
                                                   WorkflowElementDeniedEventHandler,
                                                   WorkflowElementStartedEventHandler

{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels a workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// The workflow context of the workflow item that fired the event
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendRequestCompany::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
            VendRequestCompanyStatus::RequestCancelled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>completed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the workflow context of the workflow item that started the event.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// The <c>WorkflowElementEventArgs</c> parameter that is used to get the workflow context of the
    /// workflow item that fired the event.
    /// </param>
    /// <remarks>
    /// This method is called when an approve action is applied to a workflow item.
    /// </remarks>
    public void completed(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendRequestCompanyStatus  nextStatus;
        VendRequestCompany        vendRequestCompany;

        vendRequestCompany = vendRequestCompany::findRecId(_workflowElementEventArgs.parmWorkflowContext().parmRecId());

        if (vendRequestCompany.NoOnlineAccess == NoYes::Yes)
        {
            // If the vendor does not have online access then we do not need a user request.
            nextStatus = VendRequestCompanyStatus::VendorInvited;

            // update type for the next NVA template
            VendRequestCompany::updateRequestCompanyType(
                _workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                VendRequestCompanyType::NewVendorCompanyProfile);
        }
        else
        {
            // Set the status to be pending user request complated.
            // After the user request has been completed then the vendor request will be in the vendor invited status.
            nextStatus = VendRequestCompanyStatus::RequestPendingComplete;
        }

        // update the document status and the workflow status next
        VendRequestCompany::setWorkflowState(vendRequestCompany.RecId, nextStatus);
    }

]]></Source>
			</Method>
			<Method>
				<Name>denied</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fires this event when the requestor rejects the approval workflow item.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The workflow context of the workflow item that fired the event
    /// </param>
    public void denied(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendRequestCompany::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
            VendRequestCompanyStatus::RequestRejected);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the workflow context of the workflow item that fired the event and sets the status to pending.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    ///    The <paramref name="_workflowElementEventArgs" /> parameter that is used to get the workflow
    ///    context of the workflow item that fired the event.
    /// </param>
    /// <remarks>
    ///    This method is called when a start event occurs for a workflow item.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        VendRequestCompany::setWorkflowState(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
            VendRequestCompanyStatus::RequestPendingApproval);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>