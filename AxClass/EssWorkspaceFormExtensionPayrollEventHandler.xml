<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EssWorkspaceFormExtensionPayrollEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the Payroll module form extension events for the EssWorkspace form.
/// </summary>
class EssWorkspaceFormExtensionPayrollEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>EssWorkspace_Post_init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form OnInitialized event handler for EssWorkspace form extension.
    /// </summary>
    /// <param name="_args">The args for the event.</param>
    [PostHandlerFor(formStr(EssWorkspace), formMethodStr(EssWorkspace, init))]
    public static void EssWorkspace_Post_init(XppPrePostArgs _args)
    {
        FormRun formRun = _args.getThis();
        HcmWorker currentWorker = formRun.parmHcmWorker();

        if (!PayrollPaystatement::workerHasIssuedPayStatement(currentWorker.RecId))
        {
            FormStaticTextControl NoPayStatement = formRun.design().controlName(formControlStr(EssWorkspace, NoPayStatement)) as FormStaticTextControl;
            FormButtonControl ShowPayStatementInformation = formRun.design().controlName(formControlStr(EssWorkspace, ShowPayStatementInformation)) as FormButtonControl;
            FormButtonControl HidePayStatementInformation = formRun.design().controlName(formControlStr(EssWorkspace, HidePayStatementInformation)) as FormButtonControl;
            FormButtonControl ViewAllPayStatements = formRun.design().controlName(formControlStr(EssWorkspace, ViewAllPayStatements)) as FormButtonControl;
            FormButtonControl PrintPayStatement = formRun.design().controlName(formControlStr(EssWorkspace, PrintPayStatement)) as FormButtonControl;

            NoPayStatement.visible(true);
            ShowPayStatementInformation.visible(false);
            HidePayStatementInformation.visible(false);
            ViewAllPayStatements.visible(false);
            PrintPayStatement.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewAllPayStatements_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// EssWorkspace ViewAllPayStatements control OnClicked event handler.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(EssWorkspace, ViewAllPayStatements), FormControlEventType::Clicked)]
    public static void viewAllPayStatements_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        EssWorkspaceFormExtensionPayrollEventHandler::viewAllPayStatements(_sender.formRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPayStatement_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// EssWorkspace PrintPayStatement form control OnClicked event handler.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(EssWorkspace, PrintPayStatement), FormControlEventType::Clicked)]
    public static void printPayStatement_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        EssWorkspaceFormExtensionPayrollEventHandler::printPayStatement(_sender.formRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>HidePaystatementInformation_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// EssWorkspace HidePaystatementInformation form control OnClicked event handler.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(EssWorkspace, HidePaystatementInformation), FormControlEventType::Clicked)]
    public static void HidePaystatementInformation_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        EssWorkspaceFormExtensionPayrollEventHandler::showPayStatement(_sender.formRun(), false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ShowPaystatementInformation_OnClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// EssWorkspace ShowPaystatementInformation form control OnClicked event handler.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(EssWorkspace, ShowPaystatementInformation), FormControlEventType::Clicked)]
    public static void ShowPaystatementInformation_OnClicked(FormControl _sender, FormControlEventArgs _e)
    {
        EssWorkspaceFormExtensionPayrollEventHandler::showPayStatement(_sender.formRun(), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPayStatement</Name>
				<Source><![CDATA[
    private static void showPayStatement(FormRun _formRun, boolean _isVisible)
    {
        FormButtonControl ShowPayStatementInformation = _formRun.design().controlName(formControlStr(EssWorkspace, ShowPayStatementInformation)) as FormButtonControl;
        FormButtonControl HidePayStatementInformation = _formRun.design().controlName(formControlStr(EssWorkspace, HidePayStatementInformation)) as FormButtonControl;
        FormGroupControl PaymentDate = _formRun.design().controlName(formControlStr(EssWorkspace, PaymentDate)) as FormGroupControl;
        FormGroupControl PayPeriod = _formRun.design().controlName(formControlStr(EssWorkspace, PayPeriod)) as FormGroupControl;
        FormGroupControl GrossPay = _formRun.design().controlName(formControlStr(EssWorkspace, GrossPay)) as FormGroupControl;
        FormGroupControl NetPay = _formRun.design().controlName(formControlStr(EssWorkspace, NetPay)) as FormGroupControl;
        FormStaticTextControl NoPayStatement = _formRun.design().controlName(formControlStr(EssWorkspace, NoPayStatement)) as FormStaticTextControl;
        FormButtonControl PrintPayStatement = _formRun.design().controlName(formControlStr(EssWorkspace, PrintPayStatement)) as FormButtonControl;

        PaymentDate.visible(_isVisible);
        PayPeriod.visible(_isVisible);
        GrossPay.visible(_isVisible);
        NetPay.visible(_isVisible);
        NoPayStatement.visible(false);
        ShowPayStatementInformation.visible(!_isVisible);
        HidePayStatementInformation.visible(_isVisible);
        PrintPayStatement.visible(_isVisible);
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewAllPayStatements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method for opening <c>ESSPersonPaystatements</c>
    /// </summary>
    /// <param name = "_sender">The control initiating the print function.</param>
    private static void viewAllPayStatements(FormRun _formRun)
    {
        Args args = new Args();
        args.menuItemName(menuitemDisplayStr(EssPersonPaystatements));
        args.caller(_formRun);
        args.parm(ESSCommonHelper::EssWorkspace);
        args.menuItemType(MenuItemType::Display);
        args.openMode(OpenMode::Auto);

        new MenuFunction(menuitemDisplayStr(EssPersonPaystatements), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPayStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method for handling print a payStatement.
    /// Get a record and generate a report for the record.
    /// </summary>
    /// <param name = "_sender">The control initiating the print function.</param>
    private static void printPayStatement(FormRun _formRun)
    {
        PayrollPayStatement payStatement;
        PayrollPaymDate paymentDate;

        Args args = new Args();
        HcmWorker currentWorker= HcmWorker::find(HcmWorkerLookup::currentWorker());
        FormDateControl paymentDateControl = _formRun.design().controlName(formControlStr(EssWorkspace, PayrollPaystatement_PaymentDate)) as FormDateControl;

        paymentDate = paymentDateControl.dateValue();

        select firstonly payStatement
            order by PaymentType asc, RecId desc
            where payStatement.Worker == currentWorker.RecId
                  && payStatement.DataAreaId == CompanyInfo::find().DataArea
                  && payStatement.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                  && payStatement.PaymentDate == paymentDate
                  && payStatement.IsReversed == NoYes::No;

        args.menuItemName(menuitemOutputStr(PayrollSinglePayStatementReport));
        args.menuItemType(MenuItemType::Output);
        args.record(payStatement);
        args.openMode(OpenMode::Auto);
        args.caller(_formRun);

        PayrollPayStatementReportController controller = new PayrollPayStatementReportController();
        controller.parmReportName(ssrsReportStr(PayrollPayStatementReport, Report));
        controller.parmArgs(args);
        controller.parmDialogCaption("@Payroll:PayStatement");
        controller.showBatchTab(false);
        controller.parmLoadFromSysLastValue(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollPaystatement_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// EssWorkspace PayrollPaystatement form dataSource OnInitialized event handler.
    /// </summary>
    /// <param name="_sender">The form dataSource raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormDataSourceEventHandler(formDataSourceStr(EssWorkspace, PayrollPaystatement), FormDataSourceEventType::Initialized)]
    public static void PayrollPaystatement_OnInitialized(FormDataSource _sender, FormDataSourceEventArgs _e)
    {
        _sender.queryBuildDataSource().firstOnly(true);
        _sender.queryBuildDataSource().addSortField(fieldNum(PayrollPaystatement, PaymentDate), SortOrder::Descending);
        _sender.queryBuildDataSource().addSortField(FieldNum(PayrollPayStatement, PaymentType));
        _sender.queryBuildDataSource().addSortField(FieldNum(PayrollPayStatement, RecId), SortOrder::Descending);

        QueryBuildRange payStatementRange = _sender.queryBuildDataSource().addRange(fieldNum(PayrollPayStatement, IsReversed));
        payStatementRange.value(enum2Str(NoYes::No));
        payStatementRange.status(RangeStatus::Hidden);

        payStatementRange = _sender.queryBuildDataSource().addRange(fieldNum(PayrollPaystatement, PaymentStatus));
        payStatementRange.value(enum2Str(PayrollPaymentStatus::PaymentIssued));
        payStatementRange.status(RangeStatus::Hidden);

        payStatementRange = _sender.queryBuildDataSource().addRange(fieldNum(PayrollPayStatement, PaymentDate));
        payStatementRange.value(SysQuery::range(dateNull(), HcmDateTimeUtil::convertToCompanyDate(DateTimeUtil::utcNow())));

        payStatementRange = _sender.queryBuildDataSource().addRange(fieldNum(PayrollPayStatement, DataAreaId));
        payStatementRange.value(queryValue(CompanyInfo::find().DataArea));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>