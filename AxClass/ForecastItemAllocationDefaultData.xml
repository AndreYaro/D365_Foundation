<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ForecastItemAllocationDefaultData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ForecastItemAllocationDefaultData extends SysDefaultDataFormat2
{
    static private readonly Decimals percentDecimals = new DictType(new SysDictField(tableNum(ForecastItemAllocationLine), fieldNum(ForecastItemAllocationLine, Percent)).typeId()).effectivePrecision();
    
    ForecastItemAllocation                  buffer;
    ForecastItemAllocationLine              bufferLine;

    // Packed
    ForecastItemAllocationDefaultDataTypes  createMethod;
    SysGroup                                groupId;

    #localmacro.currentList
        createMethod,
        groupId
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table buffer that is declared in the <c>classDeclaration</c> method.
    /// </summary>
    /// <returns>
    ///    The table buffer that is used for the default data.
    /// </returns>
    public Common buffer()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buffer2</Name>
				<Source><![CDATA[
    public Common buffer2()
    {
        return bufferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdNumDB</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of records that already are in the current table.
    /// </summary>
    /// <returns>
    ///    An integer that contains the number of records.
    /// </returns>
    int64 createdNumDB()
    {
        switch (curTableNo)
        {
            case 1:
                return (select count(RecId) from forecastItemAllocation).RecId;
            case 2:
                return (select count(RecId) from forecastItemAllocationLine).RecId;
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTable</Name>
				<Source><![CDATA[
    protected void doTable(boolean useCurBuffer = false)
    {
        InventTable                 inventTable;
        InventItemGroupItem         inventItemGroupItem;
        Counter                     noOfLines;
        Set                         set;
        SetEnumerator               setEnumerator;
        InventDimParm               inventDimParm;
        container                   dimIdContainer;
        Set                         dimIdSet;
        SetEnumerator               dimIdSetEnum;
        Percent                     perItem;

        void add()
        {
            if (! inventTable.inventItemType().isServiceItem())
                set.add(inventTable);
        }

        void insert(InventDimId inventDimId, Percent perLine)
        {
            InventDim           inventDim = InventDim::find(inventDimId);

            bufferLine.clear();
            bufferLine.initValue();
            bufferLine.AllocationId     = buffer.AllocateId;
            bufferLine.LineNum          = noOfLines;
            bufferLine.ItemId           = inventTable.ItemId;
            bufferLine.Percent          = decround(perLine, ForecastItemAllocationDefaultData::percentDecimals);
            bufferLine.InventDimId      = InventDim::findOrCreate(inventDim).InventDimId;
            bufferLine.doInsert();
        }

        super(useCurBuffer);

        this.deleteTablePrim(this.buffer2(),false);

        set = new Set(Types::Record);

        switch (createMethod)
        {
            case ForecastItemAllocationDefaultDataTypes::ItemGroup:
                while select ItemType, Product, ItemId from inventTable
                    order by ItemId
                    exists join inventItemGroupItem
                    where   inventItemGroupItem.ItemId              == inventTable.ItemId
                        &&  inventItemGroupItem.ItemDataAreaId      == inventTable.dataAreaId
                        &&  inventItemGroupItem.ItemGroupId         == groupId
                {
                    add();
                }
                break;
        }

        if (set.empty())
        {
            return;
        }

        perItem = 100 / set.elements();

        setEnumerator   = set.getEnumerator();
        while (setEnumerator.moveNext())
        {
            noOfLines++;

            inventTable.data(setEnumerator.current());
            inventDimParm = EcoResProductDimGroupSetup::newInventTable(inventTable).inventDimParmActiveDimensions();

            dimIdContainer = InventDimParm::findAllDimIdCombinations(inventTable.ItemId,inventDimParm);
            if (dimIdContainer)
            {
                dimIdSet = Set::create(dimIdContainer);
            }

            if (dimIdContainer && dimIdSet.elements())
            {
                dimIdSetEnum = dimIdSet.getEnumerator();
                while (dimIdSetEnum.moveNext())
                {
                    insert(dimIdSetEnum.current(),perItem / dimIdSet.elements());
                }
            }
            else
            {
                insert('',perItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTmp</Name>
				<Source><![CDATA[
    protected boolean existTmp(Common _cursor = null)
    {
        ForecastItemAllocation cursor = _cursor as ForecastItemAllocation;
        ForecastItemAllocation  bufferExist;
        bufferExist.setTmp();
        bufferExist.setTmpData(cursor);

        select firstonly bufferExist
            index hint AllocationIdx
            where bufferExist.AllocateId == cursor.AllocateId;

        return bufferExist.RecId
            ? (bufferExist.RecId == cursor.RecId ? false : true)
            : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    void initRecord()
    {
        if (buffer.AllocateId)
            return;

        buffer.AllocateId         = this.getKey();
        buffer.Name               = buffer.Name
            ? buffer.Name
            : buffer.AllocateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyFieldId</Name>
				<Source><![CDATA[
    protected fieldId keyFieldId()
    {
        return fieldnum(ForecastItemAllocation,AllocateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#currentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGroupId</Name>
				<Source><![CDATA[
    public SysGroup parmGroupId(SysGroup _groupId = groupId)
    {
        groupId = _groupId;

        return groupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateMethod</Name>
				<Source><![CDATA[
    public ForecastItemAllocationDefaultDataTypes parmCreateMethod(ForecastItemAllocationDefaultDataTypes _createMethod = createMethod)
    {
        createMethod = _createMethod;

        return createMethod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordCreated</Name>
				<Source><![CDATA[
    void recordCreated(Common forecastItemAllocation)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    void setBuffer()
    {
        if (form_DS)
            buffer = form_DS.cursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer2</Name>
				<Source><![CDATA[
    void setBuffer2()
    {
        if (form_DS2)
            bufferLine = form_DS2.cursor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sorting</Name>
				<Source><![CDATA[
    Sorting sorting()
    {
        return 12;
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestFormat</Name>
				<Source><![CDATA[
    NumberSequenceFormat suggestFormat()
    {
        if (groupId)
            return groupId;
        else
            return "@SYS12895";
    }

]]></Source>
			</Method>
			<Method>
				<Name>suggestNum</Name>
				<Source><![CDATA[
    Integer suggestNum()
    {
        return (select firstonly forecastItemAllocation).RecId ? super() : 5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container c)
    {
        container base;

        [#currentList,base] = c;

        return super(base);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParm</Name>
				<Source><![CDATA[
    void updateParm(recId fileRecId = 0)
    {
        ForecastItemAllocation       forecastItemAllocationFile;
        ReqParameters                reqParameters;

        super();

        if (! defaultRecId)
            return;
        forecastItemAllocationFile.setTmp();
        forecastItemAllocationFile.setTmpData(buffer);

        select forecastItemAllocationFile where forecastItemAllocationFile.RecId == fileRecId;

        if (forecastItemAllocationFile)
        {
            ttsbegin;
            reqParameters = ReqParameters::find(true);
            reqParameters.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>