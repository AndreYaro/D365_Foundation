<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplSettleReverse_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplSettleReverse_RU
{
    LedgerVoucher       ledgerVoucher;
    LedgerVoucherObject ledgerVoucherObject;
    Voucher             voucher;

    TransDate           fromDate;
    QueryRun            settlementQueryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    protected void buildQuery(EmplAccount_RU _emplAccount)
    {
        Query                   query;
        QueryBuildDataSource    qbds;

        query = new Query();
        qbds  = query.addDataSource(tableNum(EmplSettlement_RU));
        qbds.update(true);

        if (fromDate)
        {
            qbds.addRange(fieldNum(EmplSettlement_RU, TransDate)).value(SysQuery::range(fromDate, SysQuery::valueUnlimited()));
        }

        qbds.addSortField(fieldNum(EmplSettlement_RU, TransDate), SortOrder::Descending);
        qbds.orderMode(OrderMode::OrderBy);

        qbds  = qbds.addDataSource(tableNum(EmplTrans_RU));
        qbds.addRange(fieldNum(EmplTrans_RU, EmplAccount)).value(_emplAccount);
        qbds.addLink(fieldNum(EmplSettlement_RU,CreditRecId), fieldNum(EmplTrans_RU, RecId));
        qbds.joinMode(JoinMode::ExistsJoin);

        settlementQueryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check(EmplAccount_RU _emplAccount, TransDate _transDate, EmplAdvanceId_RU _advanceId)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVoucherTrans</Name>
				<Source><![CDATA[
    protected void createVoucherTrans(TransDate _transDate)
    {
        if (ledgerVoucherObject && ledgerVoucherObject.parmVoucher() == voucher)
            return;

        if (! ledgerVoucher)
        {
            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                         SysModule::Employee_RU,
                                                         EmplParameters_RU::numRefEmplPaymentVoucher().numberSequenceTable().NumberSequence);
        }

        if (! voucher)
        {
            voucher = NumberSeq::newGetVoucher(EmplParameters_RU::numRefEmplPaymentVoucher()).voucher();
        }

        ledgerVoucherObject = ledgerVoucher.findLedgerVoucherObject(voucher, _transDate);

        if (! ledgerVoucherObject)
        {
            ledgerVoucherObject = LedgerVoucherObject::newVoucher(voucher, _transDate);

            ledgerVoucher.addVoucher(ledgerVoucherObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>endVoucherTrans</Name>
				<Source><![CDATA[
    protected void endVoucherTrans()
    {
        voucher = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(TransDate _fromDate)
    {
        fromDate = _fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseCrossAccount</Name>
				<Source><![CDATA[
    private void reverseCrossAccount(EmplSettlement_RU _emplSettlement)
    {
        EmplTrans_RU crossAccountTrans;

        while select forupdate crossAccountTrans
            where crossAccountTrans.RefRecId   == _emplSettlement.RecId     &&
                  crossAccountTrans.RefTableId == _emplSettlement.TableId   &&
                  crossAccountTrans.TransDate  == _emplSettlement.TransDate &&
                  crossAccountTrans.TransType  == EmplTransSourceType_RU::CrossAccountSettle
        {
            crossAccountTrans.RefRecId   = 0;
            crossAccountTrans.RefTableId = 0;
            crossAccountTrans.Reversed   = NoYes::Yes;
            crossAccountTrans.update();

            crossAccountTrans.Voucher                   = ledgerVoucher.lastVoucher();
            crossAccountTrans.AmountCur                 = - crossAccountTrans.AmountCur;
            crossAccountTrans.AmountMST                 = - crossAccountTrans.AmountMST;
            crossAccountTrans.ReportingCurrencyAmount   = - crossAccountTrans.ReportingCurrencyAmount;
            crossAccountTrans.SettleAmountCur           = - crossAccountTrans.SettleAmountCur;
            crossAccountTrans.SettleAmountMST           = - crossAccountTrans.SettleAmountMST;
            crossAccountTrans.ReportingSettleAmount     = - crossAccountTrans.ReportingSettleAmount;
            crossAccountTrans.Correct                   = ! crossAccountTrans.Correct;
            crossAccountTrans.ReportingCurrencyCorrect  = ! crossAccountTrans.ReportingCurrencyCorrect;
            crossAccountTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseExchAdjTrans</Name>
				<Source><![CDATA[
    private void reverseExchAdjTrans(EmplSettlement_RU _emplSettlement)
    {
        EmplTrans_RU    exchAdjTrans;

        exchAdjTrans = _emplSettlement.findEmplTransByRefRecId(EmplTransSourceType_RU::ExchAdj, true);

        if (exchAdjTrans)
        {
            exchAdjTrans.RefRecId   = 0;
            exchAdjTrans.RefTableId = 0;
            exchAdjTrans.Reversed   = NoYes::Yes;
            exchAdjTrans.update();

            exchAdjTrans.Voucher                    = ledgerVoucher.lastVoucher();
            exchAdjTrans.AmountCur                  = - exchAdjTrans.AmountCur;
            exchAdjTrans.AmountMST                  = - exchAdjTrans.AmountMST;
            exchAdjTrans.ReportingCurrencyAmount    = - exchAdjTrans.ReportingCurrencyAmount;
            exchAdjTrans.SettleAmountCur            = - exchAdjTrans.SettleAmountCur;
            exchAdjTrans.SettleAmountMST            = - exchAdjTrans.SettleAmountMST;
            exchAdjTrans.ReportingSettleAmount      = - exchAdjTrans.ReportingSettleAmount;
            exchAdjTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseLedgerVoucher</Name>
				<Source><![CDATA[
    protected container reverseLedgerVoucher(EmplSettlement_RU       _emplSettlement,
                                             EmplTransSourceType_RU  _transType = EmplTransSourceType_RU::Unknown,
                                             container               _alreadyReversed=conNull())
    {
        EmplTrans_RU    emplTrans   = _emplSettlement.findEmplTransByRefRecId(_transType);
        container       ret         = [emplTrans.TransDate, emplTrans.Voucher];

        if (ret != _alreadyReversed)
        {
            this.createVoucherTrans(_emplSettlement.TransDate);
            LedgerUtils_RU::createLedgerTransStorno_RU(ledgerVoucherObject, emplTrans.TransDate, emplTrans.Voucher);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseNow</Name>
				<Source><![CDATA[
    public void reverseNow(EmplAccount_RU _onlyEmplAccount = "")
    {
        EmplSettlement_RU         emplSettlement;
        EmplTrans_RU              debitTrans, creditTrans;
        EmplExchAdjustmentCalc_RU emplExchAdjustment;
        MainAccountNum            debitMainAccountNum, creditMainAccountNum;
        container                 alreadyReversed;
        container contTransLinks;

        this.buildQuery(_onlyEmplAccount);

        ttsbegin;

        while (settlementQueryRun.next())
        {
            emplSettlement = settlementQueryRun.get(tableNum(EmplSettlement_RU));

            debitTrans  = EmplTrans_RU::findRecId(emplSettlement.DebitRecId, true);
            creditTrans = EmplTrans_RU::findRecId(emplSettlement.CreditRecId, true);

            if (! debitTrans || ! creditTrans ||
                ! this.check(debitTrans.EmplAccount,
                             emplSettlement.TransDate,
                             EmplTrans_RU::findRecId(emplSettlement.CreditRecId).AdvanceId))
            {
                throw error("@SYS18447");
            }

            if (debitTrans.TransType  == EmplTransSourceType_RU::ExchAdj ||
                creditTrans.TransType == EmplTransSourceType_RU::ExchAdj)
            {
                emplSettlement.delete();
                continue;
            }
            else
            {
                debitTrans.updateSettleAmount(- emplSettlement.SettleAmountCurDebit,
                                              emplSettlement.SettleAmountMSTDebit       ?
                                                - emplSettlement.SettleAmountMSTDebit   :
                                                (- emplSettlement.SettleAmountMST + (emplSettlement.ExchAdjustment < 0 ? emplSettlement.ExchAdjustment : 0)),
                                              emplSettlement.ReportingSettleAmountDebit     ?
                                                - emplSettlement.ReportingSettleAmountDebit :
                                                (- emplSettlement.ReportingSettleAmount + (emplSettlement.ReportingExchAdjustment < 0 ? emplSettlement.ReportingExchAdjustment : 0)),
                                              emplSettlement.TransDate);

                creditTrans.updateSettleAmount(- emplSettlement.SettleAmountCurCredit,
                                               emplSettlement.SettleAmountMSTCredit     ?
                                                - emplSettlement.SettleAmountMSTCredit  :
                                                (emplSettlement.SettleAmountMST + (emplSettlement.ExchAdjustment > 0 ?  emplSettlement.ExchAdjustment : 0)),
                                               emplSettlement.ReportingSettleAmountCredit     ?
                                                - emplSettlement.ReportingSettleAmountCredit  :
                                                (emplSettlement.ReportingSettleAmount + (emplSettlement.ReportingExchAdjustment > 0 ?  emplSettlement.ReportingExchAdjustment : 0)),
                                               emplSettlement.TransDate);

                this.createVoucherTrans(emplSettlement.TransDate);
                emplExchAdjustment   = EmplExchAdjustmentCalc_RU::newFromSettlement(ledgerVoucher);

                [debitMainAccountNum, creditMainAccountNum] = [LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(debitTrans.LedgerDimension),
                                                               LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(creditTrans.LedgerDimension)];

                if (emplSettlement.ExchAdjustment          ||
                    emplSettlement.ReportingExchAdjustment ||
                    debitMainAccountNum != creditMainAccountNum)
                {
                    alreadyReversed = this.reverseLedgerVoucher(emplSettlement);

                    if (emplSettlement.ExchAdjustment || emplSettlement.ReportingExchAdjustment)
                    {
                        if (emplExchAdjustment.isAdvanceAdjustment(debitTrans, creditTrans))
                        {
                            emplExchAdjustment.reverseAdvanceAdjTrans(emplSettlement, creditTrans);
                            this.endVoucherTrans();
                        }
                        else
                        {
                            emplExchAdjustment.reverseRealizedExchAdj(emplSettlement, debitTrans, creditTrans);
                        }
                    }

                    if (debitMainAccountNum != creditMainAccountNum)
                    {
                        this.reverseLedgerVoucher(emplSettlement, EmplTransSourceType_RU::CrossAccountSettle, alreadyReversed);
                        this.reverseCrossAccount(emplSettlement);
                    }

                    contTransLinks += [[emplSettlement.Voucher, emplSettlement.TransDate, voucher, emplSettlement.TransDate]];
                }

                emplSettlement.delete();

                emplExchAdjustment.recalcFutureUnrealizedExchAdj(debitTrans,  false, emplSettlement.TransDate);
                emplExchAdjustment.recalcFutureUnrealizedExchAdj(creditTrans, false, emplSettlement.TransDate);
            }

            voucher = '';
        }

        if (ledgerVoucher)
        {
            ledgerVoucher.end();
        }

        this.createTransLinks(contTransLinks);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransLinks</Name>
				<Source><![CDATA[
    private void createTransLinks(container _contTransLinks)
    {
        for (int i = 1; i <= conLen(_contTransLinks); i++)
        {
            Voucher voucherOrig;
            Voucher voucherCorr;
            TransDate transDateOrig;
            TransDate transDateCorr;

            [voucherOrig, transDateOrig, voucherCorr, transDateCorr] = conPeek(_contTransLinks, i);

            TransLink_RU::createGeneralJourTransLink(voucherOrig, transDateOrig, voucherCorr, transDateCorr);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>