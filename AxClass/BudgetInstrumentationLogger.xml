<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetInstrumentationLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetInstrumentationLogger</c> class provides activity contexts for budget area instrumentation.
/// </summary>
internal final class BudgetInstrumentationLogger
{
    private SysInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogger</Name>
				<Source><![CDATA[
    internal static BudgetInstrumentationLogger createLogger(str _name)
    {
        BudgetInstrumentationLogger logger = new BudgetInstrumentationLogger();
        logger.instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(_name);

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInstrumentationNameSpace</Name>
				<Source><![CDATA[
    internal static BudgetInstrumentationLogger newFromInstrumentationNameSpace(str _instrumentationNameSpace = BudgetInstrumentationConstants::InstrumentationNamespace)
    {
        BudgetInstrumentationLogger budgetInstrumentationLogger = new BudgetInstrumentationLogger();
        budgetInstrumentationLogger.instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(_instrumentationNameSpace);

        return budgetInstrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>activity</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivity activity(str _activityName, str _instrumentationNameSpace = BudgetInstrumentationConstants::InstrumentationNamespace)
    {
        return SysInstrumentationActivity::construct(_activityName, _instrumentationNameSpace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>activityContext</Name>
				<Source><![CDATA[
    internal SysInstrumentationActivityContext activityContext(SysInstrumentationActivity _activity)
    {
        return instrumentationLogger.activityContextWithCustomProperties(_activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWarning</Name>
				<Source><![CDATA[
    internal void logWarning(str _message)
    {
        instrumentationLogger.logWarning(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logError</Name>
				<Source><![CDATA[
    internal void logError(str _message)
    {
        instrumentationLogger.logError(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logInformation</Name>
				<Source><![CDATA[
    internal void logInformation(str _message)
    {
        instrumentationLogger.logInformation(_message);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logBucketizedCount</Name>
				<Source><![CDATA[
    internal void logBucketizedCount(SysInstrumentationActivityContext _activityContext, int _count)
    {
        _activityContext.addCustomProperty(BudgetInstrumentationConstants::BudgetPlanLinesOrderOfMagnitude, ApplicationCommonInstrumentationMagnitude::log10magnitude(_count));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTimeDuration</Name>
				<Source><![CDATA[
    internal void logTimeDuration(SysInstrumentationActivityContext _activityContext, int _startTimeReference, str _propertyName = BudgetInstrumentationConstants::TimeDuration)
    {
        _activityContext.addCustomProperty(_propertyName, int2Str(_activityContext.getElapsedMilliseconds() - _startTimeReference));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCount</Name>
				<Source><![CDATA[
    internal void logCount(SysInstrumentationActivityContext _activityContext, int _count)
    {
        _activityContext.addCustomProperty(BudgetControlInstrumentationConstants::BucketizedCount, int2str(_count));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logAvgTimePerRow</Name>
				<Source><![CDATA[
    // Logs Average time taken by the activity for creating a single row.
    internal void logAvgTimePerRow(SysInstrumentationActivityContext _activityContext, int _startTimeReference, int _count)
    {
        if (_count > 0)
        {
            _activityContext.addCustomProperty(BudgetControlInstrumentationConstants::AverageTimePerRow, int2Str((_activityContext.getElapsedMilliseconds() - _startTimeReference) / _count));
        }
        else
        {
            _activityContext.addCustomProperty(BudgetControlInstrumentationConstants::AverageTimePerRow, int2Str(-1));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>