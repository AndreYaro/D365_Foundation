<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvTaxExpense</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TrvTaxExpense</c> class calculates tax for an expense line.
/// </summary>
class TrvTaxExpense extends TaxCalculation
{
    TrvExpTrans trvExpTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowAdjustBaseAmountForTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the adjusting the calculated base amount is enabled in a transaction when tax is
    /// included in the item price and when the user adjusts the tax amount.
    /// </summary>
    /// <returns>
    /// true if adjusting the calculated base amount is enabled; otherwise, false.
    /// </returns>
    public boolean allowAdjustBaseAmountForTaxAdjustment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction currency amount.
    /// </summary>
    /// <param name = "_isCreditCardTransaction">
    /// Boolean value indicating if the transaction has any payments using credit card.
    /// </param>
    /// <returns>
    /// <c>AmountCur</c> value of the transaction record.
    /// </returns>
    protected AmountCur getTransactionCurrencyAmount(boolean _isCreditCardTransaction)
    {
        return trvExpTrans.getTransactionCurrencyAmount(_isCreditCardTransaction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchangeCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the exchange currency code.
    /// </summary>
    /// <param name = "_isCreditCardTransaction">
    /// Boolean value indicating if the transaction has any payments using credit card.
    /// </param>
    /// <returns>
    /// Exchange currency code of the transaction.
    /// </returns>
    protected TrvCurrencyCode getExchangeCurrencyCode(boolean _isCreditCardTransaction)
    {
        return trvExpTrans.getExchangeCurrencyCode(_isCreditCardTransaction);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBaseAmountExcludingTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and gets the base transaction amount without the tax.
    /// </summary>
    /// <param name = "_isCreditCardTransaction">
    /// Boolean value indicating if the transaction has any payments using credit card.
    /// </param>
    /// <param name = "_transactionCurrencyAmount">
    /// Amount with tax in transaction currency.
    /// </param>
    /// <returns>
    /// Base amount without tax.
    /// </returns>
    protected TaxBase getBaseAmountExcludingTax(boolean _isCreditCardTransaction, AmountCur _transactionCurrencyAmount)
    {
        TaxBase baseAmountExcludingTax;
        TrvCurrencyCode exchangeCode = this.getExchangeCurrencyCode(_isCreditCardTransaction);

        if (trvExpTrans.TaxIncluded)
        {
            baseAmountExcludingTax = Tax::baseAmountExclTax(trvExpTrans.TaxGroup, trvExpTrans.TaxItemGroup, trvExpTrans.TransDate, exchangeCode, _transactionCurrencyAmount, TaxModuleType::Sales, 0, '', '', TaxDirection::OutgoingTax , 0, false);
        }
        else
        {
            baseAmountExcludingTax = _transactionCurrencyAmount;
        }

        return baseAmountExcludingTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldCalculateTaxBasedOnTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the transaction has valid tax group and tax item group.
    /// </summary>
    /// <returns>
    /// true, if <c>TrvExpTrans</c> table buffer has valid tax group and tax item group; otherwise, false.
    /// </returns>
    protected boolean shouldCalculateTaxBasedOnTaxGroup()
    {        
        return trvExpTrans.shouldCalculateTaxBasedOnTaxGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax for an expense line.
    /// </summary>
    /// <returns>
    /// The calculated tax amount.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        TaxAmount taxAmount;

        if (!headingRecId)
            return 0;

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        TrvLegalEntity taxCompany = TrvExpTrans::getLegalEntityForTax(trvExpTrans);
        CompanyInfo foundDataArea = CompanyInfo::findDataArea(taxCompany);

        if (foundDataArea)
        {
            changeCompany(taxCompany)

            {
                this.initializeCalculation();
                this.initExpenseVatDueDate_W();

                if (trvExpTrans.RecId)
                {
                    boolean isCreditCardTransaction = trvExpTrans.isCreditCardTransaction();

                    this.insertIntersection(trvExpTrans.TaxGroup,
                                trvExpTrans.TaxItemGroup,
                                '',
                                trvExpTrans.Description,
                                trvExpTrans.TransDate);

                    if (this.shouldCalculateTaxBasedOnTaxGroup())
                    {
                        TaxAmountCur baseAmount;
                        AmountCur transactionCurrencyAmount = this.getTransactionCurrencyAmount(isCreditCardTransaction);

                        baseAmount = this.initializeTaxForLine(trvExpTrans.TaxIncluded,
                                        this.getBaseAmountExcludingTax(isCreditCardTransaction, transactionCurrencyAmount),
                                        transactionCurrencyAmount,
                                        trvExpTrans.DefaultDimension,
                                        0,
                                        LedgerPostingType::None);

                        taxAmount = this.calculateLineSpecificTaxCodes();
                    }
                }

                taxAmount = this.calculateTotalTaxCodes();

                taxAmount = this.finalizeCalculation();
            }
        }
        else
        {
            throw error("@Expense:InvalidExpenseInterCompanyLE");
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates an uncommitted tax record to use actual tax instead of calculated tax.
    /// </summary>
    public void correctTaxAmount()
    {
        TaxRegulation   taxRegulation;

        if (!trvExpTrans.RecId)
            return;

        ttsbegin;

        // similiar to LedgerJournalEngine_server.correctTaxAmount
        taxRegulation    = new TaxRegulation();

        TaxUncommitted::deleteForDocumentLine(tableNum(TrvExpTrans),trvExpTrans.RecId);
        taxRegulation.setTax(this);
        taxRegulation.createSumsFromTmp();
        taxRegulation.allocateAmount(trvExpTrans.CorrectedTaxAmount);
        taxRegulation.saveTaxRegulation();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads the <c>TaxUncommitted</c> records into the <c>TmpTaxWorkTrans</c> buffer.
    /// </summary>
    /// <param name="_initializationClass">
    /// The initialization class. The initialization class is a different class for each transaction that
    /// calculates tax.
    /// </param>
    public void init(Object _initializationClass = null)
    {
        TrvTaxDocumentExpense  trvTaxDocumentExpense = _initializationClass as TrvTaxDocumentExpense;

        if (trvTaxDocumentExpense == null)
        {
            throw error("@SYS95118");
        }

        trvExpTrans = trvTaxDocumentExpense.parmTrvExpTrans();

        taxModuleType               = TaxModuleType::Purch;

        taxDate = trvExpTrans.TransDate;

        headingTableId              = trvExpTrans.TableId;
        headingRecId                = trvExpTrans.RecId;

        this.setExchRates(trvExpTrans.isCreditCardTransaction() ? trvExpTrans.CreditCardTransactionCurrency : trvExpTrans.ExchangeCode,
            trvExpTrans.ExchangeRate,
            0,
            UnknownNoYes::No,
            trvExpTrans.TransDate);

        super(_initializationClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the record ID of the transaction line to calculate.
    /// </summary>
    /// <returns>
    ///    The record ID of the transaction line to calculate.
    /// </returns>
    public recId sourceRecId()
    {
        return trvExpTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    ///    The table ID of the transaction to tax.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return tableNum(TrvExpTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the current transaction to calculate supports the <c>SubLedgerDistributions</c>
    ///    or <c>SubLedgerJournalLines</c> records.
    /// </summary>
    /// <returns>
    ///    true if the current transaction to calculate supports the <c>SubLedgerDistributions</c> or
    ///    <c>SubLedgerJournalLines</c> records; otherwise, false.
    /// </returns>
    public boolean useSubLedgerJournalLines()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///   True if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExpenseVatDueDate_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets VAT registration data to the <c>Tax</c> class.
    /// </summary>
    public void initExpenseVatDueDate_W()
    {
        if (TaxParameters::isEasternEuropeOrVatDueDateFeatureEnabled())
        {
            this.parmVatRegData_W([trvExpTrans.VatDueDate_W, trvExpTrans.TransDate,'','','','',NoYes::No,'']);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>