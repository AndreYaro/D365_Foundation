<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessKanbanJobIssue</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqEventProcessKanbanKanbanJobIssue</c> class processes kanban job issue events.
/// </summary>
public abstract class ReqEventProcessKanbanJobIssue extends ReqEventProcessKanban
{
    Kanban          kanbanIssue;
    KanbanJob       kanbanJob;
    KanbanJobIssue  kanbanJobIssue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the table buffer on which the class operates.
    /// </summary>
    /// <returns>
    ///    A <c>Common</c> table buffer.
    /// </returns>
    protected Common buffer()
    {
        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a description for the class.
    /// </summary>
    /// <returns>
    ///    A description of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Description description()
    {
        return "@SYS4000037";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dueDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the due date and time of the event
    /// </summary>
    /// <returns>
    /// A <c>TransDateTime</c> temporal value.
    /// </returns>
    protected TransDateTime dueDateTime()
    {
        return kanbanJob.DueDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventExists</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the event origin exists.
    /// </summary>
    /// <returns>
    ///    true if the event origin exists; otherwise, false.
    /// </returns>
    protected boolean eventExists()
    {
        return    kanbanJob
               && KanbanJob::exist(kanbanJob.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a string identification for the buffer.
    /// </summary>
    /// <returns>
    ///    A string value that identifies the buffer.
    /// </returns>
    protected str id()
    {
        return strFmt("@SYS319607",kanbanJob.kanban().KanbanId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class variables.
    /// </summary>
    /// <returns>
    /// true if the initialization was successful; otherwise, false.
    /// </returns>
    public boolean init()
    {
        boolean result;

        kanbanJobIssue = kanbanJob.kanbanJobIssue();
        kanbanIssue    = kanbanJob.kanban();

        result         =    super()
                         && kanbanJobIssue
                         && kanbanIssue
                         && kanbanIssue.KanbanRule != kanbanRule.RecId;

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceRequirementParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the source requirement parameters.
    /// </summary>
    /// <returns>
    ///    true if the initialization was successful; otherwise, false.
    /// </returns>
    protected boolean initSourceRequirementParm()
    {
        Kanban                      kanban;
        KanbanSourceRequirement     kanbanSourceRequirement;
        RefTableId                  rootTableId;
        RefRecId                    rootRecId;

        if (!kanbanSourceRequirementParm)
        {
            kanban = kanbanJob.kanban();
            if (kanban)
            {
                kanbanSourceRequirement = KanbanSourceRequirement::findKanban(kanban.RecId);
                rootTableId             = kanbanSourceRequirement ? kanbanSourceRequirement.RootSourceRequirementTableId : tableNum(Kanban);
                rootRecId               = kanbanSourceRequirement ? kanbanSourceRequirement.RootSourceRequirementRecId : kanban.RecId;

                kanbanSourceRequirementParm = KanbanSourceRequirementParm::newStandard(
                                                                            kanbanJob,
                                                                            tableNum(Kanban),
                                                                            kanban.RecId,
                                                                            rootTableId,
                                                                            rootRecId);
            }
        }

        return    kanbanSourceRequirementParm
               && kanbanSourceRequirementParm.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the item for which an event is processed.
    /// </summary>
    /// <returns>
    ///    A <c>ItemId</c> string value.
    /// </returns>
    protected ItemId itemId()
    {
        return kanbanJob.itemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanEventType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the kanban event type that is processed by the class.
    /// </summary>
    /// <returns>
    ///    A <c>KanbanEventType</c> enumeration value.
    /// </returns>
    protected KanbanEventType kanbanEventType()
    {
        return KanbanEventType::KanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustProcessSynchronously</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies whether the event must be processed synchronously.
    /// </summary>
    /// <returns>
    ///    true if the event must be processed synchronously; otherwise, false.
    /// </returns>
    protected boolean mustProcessSynchronously()
    {
        return    super()
               || !kanbanRuleEvent
               || kanbanRuleEvent.KanbanLineEvent  == KanbanLineEventType::Automatic
               || (kanbanRuleEvent.KanbanLineEvent == KanbanLineEventType::Manual
                   && this.mustIncludeManualEvents());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanJob</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public KanbanJob parmKanbanJob(KanbanJob _kanbanJob = kanbanJob)
    {
        kanbanJob = _kanbanJob;
        return kanbanJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the source document line that is causing the event.
    /// </summary>
    /// <returns>
    /// A record ID of the <c>SourceDocumentLine</c> table.
    /// </returns>
    protected SourceDocumentLineRefRecId sourceDocumentLineRefRecId()
    {
        return kanbanJobIssue.SourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of a <c>ReqEventProcessKanbanJobIssue</c> object.
    /// </summary>
    /// <param name="_kanbanJob">
    ///    A <c>KanbanJob</c> table buffer to use to create the object.
    /// </param>
    /// <param name="_interactive">
    ///    A Boolean value that specifies whether the processing is performed interactively.
    /// </param>
    /// <returns>
    ///    A <c>ReqEventProcessKanbanJobIssue</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessKanbanJobIssue newStandard(
        KanbanJob _kanbanJob,
        boolean   _interactive = false)
    {
        ReqEventProcessKanbanJobIssue   reqEventProcess;
        LeanProductionFlowActivity      leanProductionFlowActivity = _kanbanJob.leanProductionFlowActivity();

        if (   leanProductionFlowActivity
            && leanProductionFlowActivity.PickUpSemiFinished)
        {
            reqEventProcess = ReqEventProcessKanbanJobIssuePickupSemi::newStandard(_kanbanJob,
                                                                                   _interactive,
                                                                                   leanProductionFlowActivity);
        }
        else
        {
            reqEventProcess = ReqEventProcessKanbanJobIssueTransfer::newStandard(_kanbanJob,
                                                                                 _interactive,
                                                                                 leanProductionFlowActivity);
        }

        return reqEventProcess;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>