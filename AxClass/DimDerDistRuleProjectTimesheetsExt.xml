<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DimDerDistRuleProjectTimesheetsExt</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DimDerDistRuleProjectTimesheetsExt</c> class is the dimension derivation distribution rule
///    extension for Project timesheets.
/// </summary>
[SourceDocumentClassExtensionAttribute(classStr(AccDistRuleProjectTimesheets))]
public class DimDerDistRuleProjectTimesheetsExt  extends DimensionDerivationRuleExtension
{
    ProjectDimDerivationDistRule   projectDimDerivationDistRule;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates an allocation list that is based on project/resource setup.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///    The allocation list that is to be populated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        //populate ledger dimension allocation list from project setup
        projectDimDerivationDistRule.populateDimAllocList(_ledgerDimensionAllocationList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocListIntercompany</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates an allocation list that is based on intercompany cost..
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    ///    The allocation list that is to be populated.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void populateDimAllocListIntercompany(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        LedgerDimensionDefaultAccount   ledgerDimensionDefaultAccount;
        LedgerDimensionAccount          ledgerDimension;
        LedgerDimensionAllocation       ledgerDimensionAllocation;
        DebitCredit                     side;

        side = dimensionDerivationRule.parmAccountingRule().parmSide();

        ledgerDimensionDefaultAccount = ProjPosting::getLedgerDimension(ProjAccountType::CostAccount,'','',0);

        ledgerDimension  = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionDefaultAccount, dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem().parmDefaultDimension());

        ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(ledgerDimension,
                                                                                    1,
                                                                                    side,
                                                                                    false);

        _ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Subscribes to events of the dimension derivation rule.
    /// </summary>
    protected void subscribe()
    {
        TSTimesheetTransSourceDocLineItem tsTransLine;
        if (ProjectDimDerivationDistRule::canProcessProject(dimensionDerivationRule))
        {
            projectDimDerivationDistRule = ProjectDimDerivationDistRule::newFromDimensionDerivationRule(dimensionDerivationRule);
            dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocList);
        }
        else
        {
            tsTransLine = dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem();
            if (tsTransLine.parmProjectLegalEntity() != tsTransLine.parmLegalEntityRecId())
            {
                dimensionDerivationRule.populatingDimAllocListEventHandler += eventhandler(this.populateDimAllocListIntercompany);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>