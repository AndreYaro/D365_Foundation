<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEventNotificationParallelTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

internal class RetailEventNotificationParallelTask extends RunBaseBatch implements BatchRetryable
{
    private container packedNotificationRecIdList;
    private const str emailNotificationProcessorTaskName = 'ProcessEventNotifications';
    private const str emailConstructionErrorLog = 'EmailNotificationConstructionError';
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    private RetailEventNotificationService eventNotificationService;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        packedNotificationRecIdList
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedNotificationRecIdList</Name>
				<Source><![CDATA[
    public container parmPackedNotificationRecIdList(container _packedNotificationRecIdList = packedNotificationRecIdList)
    {
        packedNotificationRecIdList = _packedNotificationRecIdList;
        return packedNotificationRecIdList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the event notifications in parallel mode.
    /// </summary>
    public void run()
    {
        eventSource.EventWriteEmailNotificationTaskStarted(this.parmCurrentBatch().BatchJobId, this.parmCurrentBatch().RecId);
        RetailEventNotificationAction retailEventNotificationAction;

        eventNotificationService = new RetailEventNotificationService();
        Array notificationRecIdList = Array::create(this.parmPackedNotificationRecIdList(#CurrentList));
        var notificationCount = notificationRecIdList.lastIndex();

        eventSource.EventWriteEmailNotificationTotalNotificationsCountInTask(this.parmCurrentBatch().BatchJobId, this.parmCurrentBatch().RecId, notificationCount);

        System.Diagnostics.Stopwatch sw = new System.Diagnostics.Stopwatch();
        sw.Start();

        for (var i = 1; i <= notificationCount; i++)
        {
            RefRecId notificationRecId = notificationRecIdList.value(i);

            select firstonly retailEventNotificationAction
                    where retailEventNotificationAction.RecId == notificationRecId;

            if (retailEventNotificationAction.RecId != 0)
            {
                System.Exception handleNotificationException;

                try
                {
                    // adding a try...catch... here to catch possible errors thrown in handleUnprocessedNotification COC.
                    eventNotificationService.handleUnprocessedNotification(retailEventNotificationAction, this.parmCurrentBatch().BatchJobId, this.parmCurrentBatch().RecId);
                }
                catch (handleNotificationException)
                {
                    var errorString = handleNotificationException.ToString();
                    error(errorString);
                    eventSource.EventWriteEmailNotificationEmailWasHandledWithErrors(
                        this.parmCurrentBatch().BatchJobId,
                        this.parmCurrentBatch().RecId,
                        retailEventNotificationAction.RefRecId,
                        enum2Str(retailEventnotificationAction.EventNotificationType),
                        errorString);

                    // The error is thrown from COC, we don't know if it's thrown before or after calling. Insert a log and set construction error as true and success as false, so that this email can be re-constructed in future.
                    RetailENInfo notificationInfo;
                    eventNotificationService.insertNotificationLog(
                        retailEventNotificationAction,
                        notificationInfo,
                        true,               // indicates there's error in constructing email.
                        false,              // indicates email's not sent successfully.
                        '', '', '', '',     // from address, to address, subject, message
                        handleNotificationException.Message);
                }

                eventNotificationService.removeProcessedNotification(retailEventNotificationAction);
            }
        }

        sw.Stop();
        eventSource.EventWriteEmailNotificationTaskFinished(this.parmCurrentBatch().BatchJobId, this.parmCurrentBatch().RecId, sw.ElapsedMilliseconds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container _packedClass)
    {
        Integer     version     = conPeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// The class description 
    /// </summary>
    /// <returns></returns>
    public static ClassDescription description()
    {
        return "@Retail:RetailEvenNotificationProcessorParallelTaskDescription";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>