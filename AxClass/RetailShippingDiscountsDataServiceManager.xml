<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailShippingDiscountsDataServiceManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
using CrtPriceContext = Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.PriceContext;

/// <summary>
/// The <c>ShippingDiscountsDataServiceManager</c> class implements the actual queries for <c>IPricingDataAccessor</c>.
/// These queries search for pricing rules for shipments discounts from the AX database. They are mostly executed in
/// the context of a particular retail channel in order to mimic the records it would find in its database.
/// </summary>
internal class RetailShippingDiscountsDataServiceManager extends RetailPricingDataManager
{
    private DlvModeId dlvModeId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ReadRetailDiscounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets retail discounts for shipments.
    /// </summary>
    /// <param name = "items">An object of item number.</param>
    /// <param name = "priceGroups">An object of price group.</param>
    /// <param name = "minActiveDate">A minimum active date to read retail discount.</param>
    /// <param name = "maxActiveDate">A maximum active date to read retail discount.</param>
    /// <param name = "currencyCode">A currency code to read retail discount.</param>
    /// <param name = "settings">Settings.</param>
    /// <returns>Retail discounts.</returns>
    public System.Object ReadRetailDiscounts(
            System.Object items,
            System.Object priceGroups,
            System.DateTimeOffset minActiveDate,
            System.DateTimeOffset maxActiveDate,
            System.String currencyCode,
            Microsoft.Dynamics.Commerce.Runtime.DataModel.QueryResultSettings settings)
    {
        using(var ReadRetailDiscountsTelemetry = RetailInstrumentationSegment::construct('PriceEngine', funcName()))
        {
            const str InventDimAllBlank = 'AllBlank';

            ValidFromDate minFromDate =  this.GetDateInChannelTimeZone(minActiveDate);
            ValidFromDate maxToDate =  this.GetDateInChannelTimeZone(maxActiveDate);

            RetailPeriodicDiscountLine periodicDiscountLine;

            RetailGroupMemberLine retailGroupMemberLine;
            EcoResProductCategory productCategory;
            RetailSpecialCategoryMember variantCategory;
            RetailCategoryContainmentLookup categoryLookup;
            RetailGroupMemberLine groupMemberLineForCategoryVariant;
            UnitOfMeasure unitOfMeasure;

            Map validationPeriodLookup = new Map(Types::String, Types::AnyType);
            Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount crtDiscount;

            int discountType;

            // convert price group record ids into temp table for join
            TmpRecIdFilter priceDiscGroupTmp = this.getTmpPriceGroupTableFromGroupIds(priceGroups);

            #localmacro.BuildPeriodicDiscountContainer
            crtDiscount = this.ConvertToCrtPeriodicDiscountV2(
                periodicDiscount,
                periodicDiscountLine,
                unitOfMeasure,
                discountType,
                mTmpOrderItem.itemId,
                mTmpOrderItem.inventDimId);

            discountList.Add(crtDiscount);
            #endmacro

            delete_from mTmpOrderData;

            CLRObject discountList = this.createCLRList(new Microsoft.Dynamics.Commerce.Runtime.DataModel.PeriodicDiscount());

            Set offerIds = RetailPricingCacheManager::getValidShippingDiscounts(minFromDate, maxToDate, priceDiscGroupTmp, dlvModeId);

            SetEnumerator enumerator = offerIds.getEnumerator();

            while (enumerator.moveNext())
            {
                RecId offerId = enumerator.current();

                RetailPeriodicDiscount periodicDiscount = RetailPeriodicDiscount::find(offerId);

                while select periodicDiscountLine
                    where periodicDiscountLine.OfferId == periodicDiscount.OfferId
                        join RecId, Product, Variant, Category, InventDimId from retailGroupMemberLine
                            where retailGroupMemberLine.RecId == periodicDiscountLine.RetailGroupMemberLine
                {
                    // get lines matching the product
                    if (retailGroupMemberLine.Product != 0
                            && (retailGroupMemberLine.InventDimId == '' || retailGroupMemberLine.InventDimId == InventDimAllBlank))
                    {
                        select mTmpOrderItem
                            where mTmpOrderItem.Product == retailGroupMemberLine.Product
                            outer join RecId, Symbol from unitOfMeasure
                                where unitOfMeasure.RecId == periodicDiscountLine.UnitOfMeasure;

                        if (mTmpOrderItem)
                        {
                            crtDiscount = this.ConvertToCrtPeriodicDiscountV2(
                                periodicDiscount,
                                periodicDiscountLine,
                                unitOfMeasure,
                                discountType,
                                mTmpOrderItem.itemId,
                                mTmpOrderItem.inventDimId);

                            discountList.Add(crtDiscount);

                            crtDiscount.ValidationPeriod = this.setValidationPeriod(periodicDiscount.ValidationPeriodId, validationPeriodLookup);

                            this.addOfferIdToTmpOrderDataList(periodicDiscount.OfferId, offerIdSet);
                        }
                    }

                    // get lines matching the variant
                    if (retailGroupMemberLine.Variant != 0
                            && (retailGroupMemberLine.InventDimId == '' || retailGroupMemberLine.InventDimId == InventDimAllBlank))
                    {
                        select mTmpOrderItem
                            where mTmpOrderItem.Variant == retailGroupMemberLine.Variant
                            outer join RecId, Symbol from unitOfMeasure
                                where unitOfMeasure.RecId == periodicDiscountLine.UnitOfMeasure;

                        if (mTmpOrderItem)
                        {
                            #BuildPeriodicDiscountContainer
                            crtDiscount.ValidationPeriod = this.setValidationPeriod(periodicDiscount.ValidationPeriodId, validationPeriodLookup);
                            this.addOfferIdToTmpOrderDataList(periodicDiscount.OfferId, offerIdSet);
                        }
                    }

                    // get lines matching the dimension
                    if (retailGroupMemberLine.Variant == 0 && retailGroupMemberLine.Product != 0 
                            && retailGroupMemberLine.InventDimId != '' && retailGroupMemberLine.InventDimId != InventDimAllBlank)
                    {
                        select mTmpOrderItem
                            where mTmpOrderItem.Product == retailGroupMemberLine.Product
                                    && mTmpOrderItem.Variant != 0
                            outer join RecId, Symbol from unitOfMeasure
                                where unitOfMeasure.RecId == periodicDiscountLine.UnitOfMeasure;

                        if (mTmpOrderItem)
                        {
                            if (this.isVariantMatch(mTmpOrderItem.Variant, retailGroupMemberLine.InventDimId))
                            {
                                #BuildPeriodicDiscountContainer
                                crtDiscount.ValidationPeriod = this.setValidationPeriod(periodicDiscount.ValidationPeriodId, validationPeriodLookup);
                                this.addOfferIdToTmpOrderDataList(periodicDiscount.OfferId, offerIdSet);
                            }
                        }
                    }
                }

                while select mTmpOrderItem
                    where mTmpOrderItem.Product != 0 || mTmpOrderItem.Variant != 0
                {
                    container categoriesRecId = conNull();

                    if (mTmpOrderItem.Variant != 0)
                    {
                        categoriesRecId = RetailPricingCacheManager::getVariantCategories(mTmpOrderItem.Variant);
                        this.buildCrtPeriodicDiscount(periodicDiscount, mTmpOrderItem.itemId, mTmpOrderItem.inventDimId, categoriesRecId, discountList, validationPeriodLookup);
                    }
                    
                    if (mTmpOrderItem.Product != 0)
                    {
                        EcoResProductRecId productId = mTmpOrderItem.Product;
                        if (RetailPricingFeatureToggle::shouldUseRetailPricingDataManagerV3())
                        {
                            // When flatten discount is enabled, mTmpOrderItem.Product is the variant product id.
                            productId = InventTable::find(mTmpOrderItem.itemId).Product;
                        }

                        categoriesRecId = RetailPricingCacheManager::getProductCategories(productId);
                        this.buildCrtPeriodicDiscount(periodicDiscount, mTmpOrderItem.itemId, mTmpOrderItem.inventDimId, categoriesRecId, discountList, validationPeriodLookup);
                    }
                }
            }

            tmpOrderDataInsertList.insertDatabase();

            return discountList.AsReadOnly();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadDiscountTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does not gets discounts trade agreements for shipping discounts.
    /// </summary>
    /// <param name = "itemIds">An object of item number.</param>
    /// <param name = "customerAccount">A customer account number.</param>
    /// <param name = "minActiveDate">A minimum active date to find out trade agreement for.</param>
    /// <param name = "maxActiveDate">A maximum active date to find out trade agreement for.</param>
    /// <param name = "currencyCode">A Currency code to find out trade agreement for.</param>
    /// <param name = "settings">The query result settings.</param>
    /// <returns>Trade agreement value.</returns>
    public System.Object ReadDiscountTradeAgreements(
                System.Object itemIds,
                System.String customerAccount,
                System.DateTimeOffset minActiveDate,
                System.DateTimeOffset maxActiveDate,
                System.String currencyCode,
                Microsoft.Dynamics.Commerce.Runtime.DataModel.QueryResultSettings settings)
    {
        return this.createCLRList(new Microsoft.Dynamics.Commerce.Runtime.DataModel.TradeAgreement());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadPriceAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does not gets price adjustments for shipping discounts.
    /// </summary>
    /// <param name = "items">An object of item number.</param>
    /// <param name = "priceGroups">An object of price group.</param>
    /// <param name = "minActiveDate">A minimum active date.</param>
    /// <param name = "maxActiveDate">A maximum active date.</param>
    /// <param name = "settings">The query result settings.</param>
    /// <returns>The adjusted price.</returns>
    public System.Object ReadPriceAdjustments(
            System.Object items,
            System.Object priceGroups,
            System.DateTimeOffset minActiveDate,
            System.DateTimeOffset maxActiveDate,
            Microsoft.Dynamics.Commerce.Runtime.DataModel.QueryResultSettings settings)
    {
        return this.createCLRList(new Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustment());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadPriceTradeAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Does not gets trade agreements list for shipping discounts.
    /// </summary>
    /// <param name = "itemIds">Items id's for trade agreement search.</param>
    /// <param name = "priceGroups">Price groups for trade agreement search.</param>
    /// <param name = "customerAccount">Customer account number.</param>
    /// <param name = "minActiveDate">Minimum active date for trade agreement search.</param>
    /// <param name = "maxActiveDate">Maximum active date for trade agreement search.</param>
    /// <param name = "currencyCode">Currency code value for trade agreement search.</param>
    /// <param name = "settings">Query result settings value.</param>
    /// <returns>CLR object containing trade agreements.</returns>
    public System.Object ReadPriceTradeAgreements(
                System.Object itemIds,
                System.Object priceGroups,
                System.String customerAccount,
                System.DateTimeOffset minActiveDate,
                System.DateTimeOffset maxActiveDate,
                System.String currencyCode,
                Microsoft.Dynamics.Commerce.Runtime.DataModel.QueryResultSettings settings)
    {
        return this.createCLRList(new Microsoft.Dynamics.Commerce.Runtime.DataModel.TradeAgreement());
    }

]]></Source>
			</Method>
			<Method>
				<Name>ReadDiscountsByProperties</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all applicable discounts by the runtime properties.
    /// </summary>
    /// <param name = "priceContext">The price context.</param>
    /// <returns>An IEnumrable of Crt PeriodicDiscount entity.</returns>
    [Hookable(false), Wrappable(false)]
    public System.Object ReadDiscountsByProperties(CrtPriceContext priceContext)
    {
        container discountOfferTypes = [
            RetailDiscountOfferTypeBase::Shipping
        ];

        return this.readDiscountByPropertiesInternal(priceContext, discountOfferTypes).AsReadOnly();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///
    /// </summary>
    /// <param name = "_channelRecordId"></param>
    /// <param name = "_transactionId"></param>
    /// <param name = "_tempOrderItem"></param>
    /// <param name = "_isTempOrderItemFilled"></param>
    public void new(RecId _channelRecordId, RetailTransactionId _transactionId, RetailTempOrderItem _tempOrderItem = null, boolean _isTempOrderItemFilled = false, DlvModeId _dlvModeId = '')
    {
        dlvModeId = _dlvModeId;
        super(_channelRecordId, _transactionId, _tempOrderItem, _isTempOrderItemFilled);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>