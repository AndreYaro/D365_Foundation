<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductReleaseManagerBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>EcoResProductReleaseManagerBase</c> class is responsible for releasing products to the valid
///    entities.
/// </summary>
abstract class EcoResProductReleaseManagerBase
{
    RefRecId                        legalEntity;
    EcoResProduct                   ecoResProduct;
    EcoResProductLifecycleStateId   defaultProductLifecycleState;
    boolean                         isDefaultProductLifecycleStateSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>EcoResProductReleaseManagerBase</c> class.
    /// </summary>
    public void init()
    {
        if (legalEntity == 0)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEcoResProduct</Name>
				<Source><![CDATA[
    public EcoResProduct parmEcoResProduct(EcoResProduct _ecoResProduct = ecoResProduct)
    {
        ecoResProduct = _ecoResProduct;

        return ecoResProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLegalEntity</Name>
				<Source><![CDATA[
    public RefRecId parmLegalEntity(RefRecId _legalEntity = legalEntity)
    {
        legalEntity = _legalEntity;

        return legalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultProductLifecycleState</Name>
				<Source><![CDATA[
    public EcoResProductLifecycleStateId parmDefaultProductLifecycleState(EcoResProductLifecycleStateId _defaultProductLifecycleState = defaultProductLifecycleState)
    {
        if (!prmIsDefault(_defaultProductLifecycleState))
        {
            defaultProductLifecycleState = _defaultProductLifecycleState;
            isDefaultProductLifecycleStateSet = true;
        }
        return defaultProductLifecycleState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>release</Name>
				<Source><![CDATA[
    /// <summary>
    /// Releases the product to the legal entity.
    /// </summary>
    abstract public void release()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReleaseManager</Name>
				<Source><![CDATA[
    private static EcoResProductReleaseManagerBase createReleaseManager(EcoResProduct _product)
    {
        EcoResProductReleaseManagerBase productReleaseManager;

        if (_product.isDistinctProductVariant())
        {
            productReleaseManager = EcoResProductVariantReleaseManager::construct();
        }
        else if (_product.isProductMaster())
        {
            EcoResProductMaster productMaster = _product as EcoResProductMaster;
            if (productMaster.isConstraintBased())
            {
                productReleaseManager = EcoResProductReleaseManagerDefaultConfig::construct();
            }
        }

        if (!productReleaseManager)
        {
            productReleaseManager = EcoResProductReleaseManager::construct();
        }

        return productReleaseManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>EcoResProductReleaseManagerBase</c> class.
    /// </summary>
    /// <param name="_product">
    ///    The product that is released by the release manager.
    /// </param>
    /// <returns>
    ///    An instance of the <c>EcoResProductReleaseManager</c> or <c>EcoResProductVariantReleaseManager</c>
    ///    class.
    /// </returns>
    /// <remarks>
    ///    The instance that is returned depends on the subtype of the <paramref name="_product" /> parameter.
    /// </remarks>
    static public EcoResProductReleaseManagerBase newFromProduct(EcoResProduct _product)
    {
        EcoResProductReleaseManagerBase productReleaseManager = EcoResProductReleaseManagerBase::createReleaseManager(_product);

        productReleaseManager.parmEcoResProduct(_product);
        return productReleaseManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromProductRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates and initializes a new instance of the <c>EcoResProductReleaseManagerBase</c> class.
    /// </summary>
    /// <param name="_productRecId">
    ///    The ID of the product that is released by the release manager.
    /// </param>
    /// <returns>
    ///    An instance of the <c>EcoResProductReleaseManager</c> or <c>EcoResProductVariantReleaseManager</c>
    ///    class.
    /// </returns>
    /// <remarks>
    ///    The instance that is returned depends on the subtype of the <paramref name="_product" /> parameter.
    /// </remarks>
    static public EcoResProductReleaseManagerBase newFromProductRecId(EcoResProductRecId _productRecId)
    {
        return EcoResProductReleaseManagerBase::newFromProduct(EcoResProduct::find(_productRecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseProduct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Releases a product to a legal entity.
    /// </summary>
    /// <param name="_productRecId">
    ///    The ID of the product that is released.
    /// </param>
    /// <param name="_legalEntityId">
    ///    The legal entity for which to release the specified product.
    /// </param>
    public static void releaseProduct(
        EcoResProductRecId  _productRecId,
        RefRecId            _legalEntityId)
    {
        EcoResProductReleaseManagerBase productReleaseManager = EcoResProductReleaseManagerBase::newFromProductRecId(_productRecId);

        productReleaseManager.parmLegalEntity(_legalEntityId);
        productReleaseManager.init();
        productReleaseManager.release();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>