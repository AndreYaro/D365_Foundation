<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustFreeInvoiceCreditNote_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Creates credit note for posted <c>CustInvoiceTable</c> record
/// </summary>
public class CustFreeInvoiceCreditNote_RU
{
    CustInvoiceTable    invoiceTable;
    RecordSortedList    custInvoiceTransList;
    RecId               reasonCodeRecId;
    boolean             copyExchRate;
    boolean             createCorrectiveLines;

    boolean isFinTagConfigurationSetForCurrent = FinTagConfiguration::isFinTagConfigurationSet(curExt());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates credit note
    /// </summary>
    /// <returns>
    /// True, if creation succeed
    /// </returns>
    /// <exception cref="Exception::Deadlock">
    /// If deadlock happen
    /// </exception>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    /// If update conflict not recovered
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    /// If udpate conflict
    /// </exception>
    public boolean createCreditNote()
    {
        #OCCRetryCount

        if (! this.validate())
            return false;

        try
        {
            ttsbegin;
            this.updateInvoiceTable();
            this.createInvoiceLines();
            this.createMiscCharges();
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
                throw Exception::Deadlock;
            else
                retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
                    if (xSession::currentRetryCount() >= #RetryNum)
                        throw Exception::UpdateConflictNotRecovered;
                    else
                        retry;
            else
                 throw Exception::UpdateConflict;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInvoiceLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates customer free text invoice lines.
    /// </summary>
    protected void createInvoiceLines()
    {
        CustInvoiceLine             custInvoiceLine;
        CustInvoiceTrans            custInvoiceTrans;
        boolean                     nextRec;
        LineNum                     lineNum;
        // <GEEU>
        RecId                       negativeLineRecId;
        ReasonTableRef              reasonTableRef;
        #ISOCountryRegionCodes
        // </GEEU>
        // <GEEPL>
        CustInvoiceLineAsset        custInvoiceLineAsset;
        PlAssetSaleFactor           assetSaleFactor;
        boolean                     isPolishContext = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]);
        // </GEEPL>

        lineNum = CustInvoiceLine::lastLineNum_W(invoiceTable.RecId);

        nextRec = custInvoiceTransList.first(custInvoiceTrans);
        while (nextRec)
        {
            custInvoiceLine.clear();
            custInvoiceLine.initFromCustInvoiceTrans_W(custInvoiceTrans, invoiceTable);
            custInvoiceLine.CorrectedCustInvoiceLine = CustInvoiceLine::findBySourceDocumentLine(custInvoiceTrans.SourceDocumentLine).RecId;
            lineNum ++;
            custInvoiceLine.LineNum   = lineNum;
            custInvoiceLine.AmountCur = -custInvoiceLine.AmountCur;
            custInvoiceLine.TaxAmount = -custInvoiceLine.TaxAmount;
            custInvoiceLine.Quantity  = -custInvoiceLine.Quantity;
            custInvoiceLine.insert();

            // <GEEPL>
            if (isPolishContext)
            {
                TaxServiceTariff::insertTaxServiceTariffForNewParent(custInvoiceTrans.TableId, custInvoiceTrans.RecId, custInvoiceLine.TableId, custInvoiceLine.RecId);

                custInvoiceLineAsset = CustInvoiceLineAsset::findByCustInvoiceLineId(custInvoiceLine.CorrectedCustInvoiceLine);
                if (custInvoiceLineAsset)
                {
                    assetSaleFactor = custInvoiceLineAsset.AssetSaleFactor;
                }
                else
                {
                    assetSaleFactor = 100;
                }

                custInvoiceLineAsset.AssetSaleFactor = assetSaleFactor;
                custInvoiceLineAsset.CustInvoiceLine = custInvoiceLine.RecId;
                custInvoiceLineAsset.insert();
            }
            // </GEEPL>

            // <GEEU>
            negativeLineRecId = custInvoiceLine.RecId;

            if (createCorrectiveLines)
            {
                // CreditNoteInternalRef_PL is filled with reference to reversal line;
                // For reversal line CreditNoteInternalRef_PL is a self-relation
                custInvoiceLine.CreditNoteInternalRef_PL = negativeLineRecId;
                custInvoiceLine.doUpdate();

                custInvoiceLine.clear();
                custInvoiceLine.initFromCustInvoiceTrans_W(custInvoiceTrans, invoiceTable);
                custInvoiceLine.CorrectedCustInvoiceLine = CustInvoiceLine::findBySourceDocumentLine(custInvoiceTrans.SourceDocumentLine).RecId;
                lineNum ++;
                custInvoiceLine.LineNum                  = lineNum;
                custInvoiceLine.RefReturnInvoiceTrans_W  = 0;
                custInvoiceLine.CreditNoteInternalRef_PL = negativeLineRecId;

                if (CustAdvanceInvoiceSettlement_W::existsCustInvoiceJour(custInvoiceTrans.custInvoiceJour()))
                {
                    custInvoiceLine.AmountCur = 0;
                    custInvoiceLine.UnitPrice = 0;
                    custInvoiceLine.Quantity  = 0;
                }

                custInvoiceLine.TaxAmount = 0;

                if (reasonCodeRecId)
                {
                    reasonTableRef = ReasonTableRef::find(reasonCodeRecId);
                    reasonTableRef.insert();
                }
                custInvoiceLine.ReasonRefRecId = reasonTableRef.RecId;
                custInvoiceLine.insert();

            // </GEEU>
            // <GEEPL>
                if (isPolishContext)
                {
                    custInvoiceLineAsset.AssetSaleFactor = assetSaleFactor;
                    custInvoiceLineAsset.CustInvoiceLine = custInvoiceLine.RecId;
                    custInvoiceLineAsset.insert();
                }

                TaxServiceTariff::insertTaxServiceTariffForNewParent(custInvoiceTrans.TableId, custInvoiceTrans.RecId, custInvoiceLine.TableId, custInvoiceLine.RecId);
            // </GEEPL>
            // <GEEU>
            }
            else
            {
                if (reasonCodeRecId)
                {
                    reasonTableRef = ReasonTableRef::find(reasonCodeRecId);
                    reasonTableRef.insert();
                    custInvoiceLine.ReasonRefRecId  = reasonTableRef.RecId;
                    custInvoiceLine.doUpdate();
                }
            }
            // </GEEU>

            CustFreeInvoiceCorrection_Partial_RU::createLineMiscCharges(custInvoiceTrans, custInvoiceLine);

            nextRec = custInvoiceTransList.next(custInvoiceTrans);
        }

        // Delete taxes so that they can be recreated to include the credit note lines.
        TaxUncommitted::deleteForDocumentHeader(tableNum(CustInvoiceTable), invoiceTable.RecId);
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            TaxWithholdUncommitted_IN::deleteForDocumentHeader(tableNum(CustInvoiceTable), invoiceTable.RecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMiscCharges</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates misc charges.
    /// </summary>
    protected void createMiscCharges()
    {
        boolean                              nextRec;
        CustInvoiceJour                      custInvoiceJour;
        CustInvoiceTrans                     custInvoiceTrans;
        Set                                  custInvoiceJourSet = new Set(Types::Int64);
        CustFreeInvoiceCorrection_Partial_RU correction;

        nextRec = custInvoiceTransList.first(custInvoiceTrans);
        while (nextRec)
        {
            custInvoiceJour = custInvoiceTrans.custInvoiceJour();
            if (custInvoiceJourSet.add(custInvoiceJour.RecId))
            {
                correction = CustFreeInvoiceCorrection_Partial_RU::newCustInvoiceJour(custInvoiceJour, invoiceTable);
                correction.createMiscCharges();
            }

            nextRec = custInvoiceTransList.next(custInvoiceTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes internal variables.
    /// </summary>
    /// <param name="_refRecId">
    ///     Record ID of the customer free invoice.
    /// </param>
    /// <param name="_reasonCodeRecId">
    ///     Record ID of the reason table record.
    /// </param>
    protected void init(RefRecId _refRecId, RefRecId _reasonCodeRecId)
    {
        invoiceTable    = CustInvoiceTable::findRecId(_refRecId, true);
        reasonCodeRecId = _reasonCodeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyExchRate</Name>
				<Source><![CDATA[
    public boolean parmCopyExchRate(boolean _copyExchRate = copyExchRate)
    {
        copyExchRate = _copyExchRate;
        return copyExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateCorrectiveLines</Name>
				<Source><![CDATA[
    public boolean parmCreateCorrectiveLines(boolean _createCorrectiveLines = createCorrectiveLines)
    {
        createCorrectiveLines = _createCorrectiveLines;
        return createCorrectiveLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInvoiceTransList</Name>
				<Source><![CDATA[
    public RecordSortedList parmCustInvoiceTransList(RecordSortedList _rsl = custInvoiceTransList)
    {
        custInvoiceTransList = _rsl;
        return custInvoiceTransList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInclTax</Name>
				<Source><![CDATA[
    private void setInclTax(CustInvoiceTable _creditNote)
    {
        CustInvoiceTrans    trans;
        NoYes               currentValue;
        if (custInvoiceTransList.first(trans))
        {
            currentValue = trans.custInvoiceJour().InclTax;
            while (custInvoiceTransList.next(trans))
            {
                if (trans.custInvoiceJour().InclTax != currentValue)
                {
                    return;
                }
            }
            _creditNote.InclTax = currentValue;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInvoiceTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates customer free text invoice.
    /// </summary>
    protected void updateInvoiceTable()
    {
        CustInvoiceJour  custInvoiceJour;
        CustInvoiceTrans custInvoiceTrans;
        // <GEEU>
        SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate;
        VatDueDate_W                    localDateOfVatRegister;
        // </GEECU>

        // <GEEU>
        this.setInclTax(invoiceTable);
        // </GEEU>

        custInvoiceTransList.first(custInvoiceTrans);
        custInvoiceJour = custInvoiceTrans.custInvoiceJour();

        // <GEEU>
        if (!invoiceTable.CorrectionReasonCode)
        {
        // </GEEU>
        invoiceTable.CorrectionReasonCode = reasonCodeRecId;
        // <GEEU>
        }
        // </GEEU>

        invoiceTable.AgreementHeaderExt_RU = AgreementHeaderExt_RU::findByDefaultDimension(custInvoiceJour.DefaultDimension).RecId;
        invoiceTable.DefaultDimension      = AgreementHeaderExt_RU::createAgreementDimension(invoiceTable.AgreementHeaderExt_RU, invoiceTable.DefaultDimension);
        
        if (isFinTagConfigurationSetForCurrent
            && AccountsReceivableFinTagFlight::instance().isEnabled())
        {
            invoiceTable.FinTag = custInvoiceJour.FinTag;
        }

        if (copyExchRate)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00011, funcName());

            invoiceTable.ExchRate_W = custInvoiceJour.ExchRate;

            if (TaxSpecificExchangeRateHelper::isTaxSpecificExchRateEnabledByTable(custInvoiceJour.TableId, custInvoiceJour.RecId))
            {
                TaxSpecificExchangeRateHelper::copyFromTaxSpecificExchangeRateType(
                    custInvoiceJour.TableId,
                    custInvoiceJour.RecId,
                    invoiceTable.TableId,
                    invoiceTable.RecId,
                    invoiceTable.VatDueDate_W,
                    NoYes::Yes);
            }
            // <GEEU>
            else
            {
                salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(custInvoiceJour.TableId, custInvoiceJour.RecId);
                if (salesTaxTransactionExchangeRate)
                {
                    localDateOfVatRegister = invoiceTable.VatDueDate_W ? invoiceTable.VatDueDate_W : salesTaxTransactionExchangeRate.DateOfVATRegister;
                    SalesTaxExchangeRateHelper::saveSalesTaxTransactionExchangeRate(invoiceTable.TableId, invoiceTable.RecId,
                        custInvoiceJour.CurrencyCode, salesTaxTransactionExchangeRate.SalesTaxExchangeRate, localDateOfVatRegister, NoYes::Yes);
                }
            }
            // </GEEU>
        }

        invoiceTable.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate()
    {
        boolean isValid = true;

        if (CustParameters::find().CreditNoteReasonReq &&
            (!reasonCodeRecId || !ReasonTableRef::find(reasonCodeRecId).ReasonComment))
        {
            error("@AccountsReceivable:CreditNoteReasonEmptyError");
            isValid = false;
        }

        if (!LedgerFiscalCalendar::isDateInOpenPeriod(CompanyInfoHelper::fiscalCalendarRecId(), invoiceTable.InvoiceDate))
        {
            error("@SYS300084");
            isValid = false;
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInvoiceCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes new instance of <c>CustFreeInvoiceCreditNote_RU</c> class
    /// </summary>
    /// <param name="_childCustInvoiceTableRecId">
    /// RecId of source <c>CustInvoiceTable</c>
    /// </param>
    /// <param name="_reasonCodeRecId">
    /// RecId of reason code
    /// </param>
    /// <returns>
    /// New instance of <c>CustFreeInvoiceCreditNote_RU</c> class
    /// </returns>
    public static CustFreeInvoiceCreditNote_RU newInvoiceCreditNote(CustInvoiceTableRefRecId _childCustInvoiceTableRecId,
                                                                    RefRecId                 _reasonCodeRecId)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00032, funcName());

        CustFreeInvoiceCreditNote_RU custFreeInvoice;

        custFreeInvoice = new CustFreeInvoiceCreditNote_RU();
        custFreeInvoice.init(_childCustInvoiceTableRecId, _reasonCodeRecId);
        return custFreeInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>