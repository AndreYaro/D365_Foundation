<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesInvoiceJournalPrint</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesInvoiceJournalPrint</c> class handles the printing of the Sales order invoice.
/// </summary>
class SalesInvoiceJournalPrint
extends FormletterJournalPrint
{
    CustInvoiceJour custInvoiceJour;
    RecordSortedList recordListShippingLine;
    NoYes printShippingLabel;
    container printerSettingsShippingLabel;
    NoYes printCODLabel;
    container printerSettingsCODLabel;
    NoYes printEntryCertificate_W;
    container printerSettingsEntryCertificate_W;
    NoYes printCODCashReceipt_W;
    boolean useUserDefinedDestinations;
    SalesTable salesTable;

    MCRMiscChargePrintOption mcrMiscChargePrintOption;
    // <GTH>
    TaxUnrealizedDocuId docuSetCode;
    TaxUnrealizedDocuPrintHeader printHeader;
    TaxUnrealizedDocuProdType prodType;
    TaxUnrealizedDocuPrintLocation location;
    TaxUnrealizedDocuText miscText;
    InvoiceId substitutionInvoiceId;
    // </GTH>

    //<GMX>
    boolean sendByMail_MX;
    //</GMX>

    private const Version currentVersion = 5;

    #define.Version4(4)
    #LOCALMACRO.CurrentListV4
        printShippingLabel,
        printerSettingsShippingLabel,
        printCODLabel,
        printerSettingsCODLabel,
        useUserDefinedDestinations,
        salesTable
        //<GMX>
        ,sendByMail_MX
        //</GMX>
        // <GTH>
        ,docuSetCode
        // </GTH>
        ,printEntryCertificate_W
        ,printerSettingsEntryCertificate_W
    #ENDMACRO

    // <GEERU>
    #define.Version3(3)
    // </GEERU>
    #LOCALMACRO.CurrentListV3
        printShippingLabel,
        printerSettingsShippingLabel,
        printCODLabel,
        printerSettingsCODLabel,
        useUserDefinedDestinations,
        salesTable
        //<GMX>
        ,sendByMail_MX
        //</GMX>
        // <GTH>
        ,docuSetCode
        // </GTH>
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doPrint</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints the document.
    /// </summary>
    protected void doPrint()
    {
        // <GEERU>
        custInvoiceJour.printJournal(
            this,
            journalList,
            NoYes::No,
            printFormletter,
            printAcceptanceReport,
            printBillOfLading,
            printInventBaileeReport,
            printTransportInvoice
            // <GIN>
            ,printExciseFormLetter
            // </GIN>
            );
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>initShippingStat</Name>
				<Source><![CDATA[
    void initShippingStat(Common _custInvoiceJour)
    {
        CustInvoiceJour localCustInvoiceJour = _custInvoiceJour as CustInvoiceJour;
        SalesShippingStat salesShippingStatLocal;

        recordListShippingLine = new RecordSortedList(tableNum(SalesShippingStat));
        recordListShippingLine.sortOrder(fieldNum(SalesShippingStat, RecId));

        while select salesShippingStatLocal
                where salesShippingStatLocal.SalesId == localCustInvoiceJour.SalesId &&
                      salesShippingStatLocal.InvoiceId == localCustInvoiceJour.InvoiceId &&
                      salesShippingStatLocal.InvoiceDate == localCustInvoiceJour.InvoiceDate
        {
            recordListShippingLine.ins(salesShippingStatLocal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a record sorted list.
    /// </summary>
    /// <returns>
    /// The constructed record sorted list.
    /// </returns>
    public RecordSortedList newJournalList()
    {
        RecordSortedList recordSortedList = new RecordSortedList(tableNum(CustInvoiceJour));
        recordSortedList.sortOrderFromContainer(this.formLetterSorting(tableNum(CustInvoiceJour), fieldNum(CustInvoiceJour, RecId)));

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, printShippingLabel, printerSettingsShippingLabel, printCODLabel, useUserDefinedDestinations,
            salesTable, sendByMail_MX, docuSetCode, printEntryCertificate_W, printerSettingsEntryCertificate_W, printCODCashReceipt_W] 
            + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocuSetCode</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuId parmDocuSetCode(TaxUnrealizedDocuId _docuSetCode = docuSetCode)
    {
        docuSetCode = _docuSetCode;
        return docuSetCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocation</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuPrintLocation parmLocation(TaxUnrealizedDocuPrintLocation _location = location)
    {
        location = _location;
        return location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRMiscChargePrintOption</Name>
				<Source><![CDATA[
    public MCRMiscChargePrintOption parmMCRMiscChargePrintOption(MCRMiscChargePrintOption _mcrMiscChargePrintOption = mcrMiscChargePrintOption)
    {
        mcrMiscChargePrintOption = _mcrMiscChargePrintOption;
        return mcrMiscChargePrintOption;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMiscText</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuText parmMiscText(TaxUnrealizedDocuText _miscText = miscText)
    {
        miscText = _miscText;
        return miscText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCODCashReceipt</Name>
				<Source><![CDATA[
    public NoYes parmPrintCODCashReceipt(NoYes _printCODCashReceipt_W = printCODCashReceipt_W)
    {
        printCODCashReceipt_W = _printCODCashReceipt_W;
        return printCODCashReceipt_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCODLabel</Name>
				<Source><![CDATA[
    public NoYes parmPrintCODLabel(NoYes _printCODLabel = printCODLabel)
    {
        printCODLabel = _printCODLabel;
        return printCODLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintEntryCertificate_W</Name>
				<Source><![CDATA[
    public NoYes parmPrintEntryCertificate_W(NoYes _printEntryCertificate_W = printEntryCertificate_W)
    {
        printEntryCertificate_W = _printEntryCertificate_W;
        return printEntryCertificate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsCODLabel</Name>
				<Source><![CDATA[
    public container parmPrinterSettingsCODLabel(container _printerSettingsCODLabel = printerSettingsCODLabel)
    {
        printerSettingsCODLabel = _printerSettingsCODLabel;
        return printerSettingsCODLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsEntryCertificate_W</Name>
				<Source><![CDATA[
    public container parmPrinterSettingsEntryCertificate_W(container _printerSettingsEntryCertificate_W = printerSettingsEntryCertificate_W)
    {
        printerSettingsEntryCertificate_W = _printerSettingsEntryCertificate_W;
        return printerSettingsEntryCertificate_W;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrinterSettingsShippingLabel</Name>
				<Source><![CDATA[
    public container parmPrinterSettingsShippingLabel(container _printerSettingsShippingLabel = printerSettingsShippingLabel)
    {
        printerSettingsShippingLabel = _printerSettingsShippingLabel;
        return printerSettingsShippingLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintHeader</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuPrintHeader parmPrintHeader(TaxUnrealizedDocuPrintHeader _printHeader = printHeader)
    {
        printHeader = _printHeader;
        return printHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintShippingLabel</Name>
				<Source><![CDATA[
    public NoYes parmPrintShippingLabel(NoYes _printShippingLabel = printShippingLabel)
    {
        printShippingLabel = _printShippingLabel;
        return printShippingLabel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProdType</Name>
				<Source><![CDATA[
    public TaxUnrealizedDocuProdType parmProdType(TaxUnrealizedDocuProdType _prodType = prodType)
    {
        prodType = _prodType;
        return prodType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesTable</Name>
				<Source><![CDATA[
    public SalesTable parmSalesTable(SalesTable _salesTable = salesTable)
    {
        salesTable = _salesTable;
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSendByMail_MX</Name>
				<Source><![CDATA[
    public boolean parmSendByMail_MX(boolean _sendByMail = sendByMail_MX)
    {
        sendByMail_MX = _sendByMail;
        return sendByMail_MX;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseUserDefinedDestinations</Name>
				<Source><![CDATA[
    public boolean parmUseUserDefinedDestinations(boolean _useUserDefinedDestinations = useUserDefinedDestinations)
    {
        useUserDefinedDestinations = _useUserDefinedDestinations;
        return useUserDefinedDestinations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubstitutionInvoiceId</Name>
				<Source><![CDATA[
    public InvoiceId parmSubstitutionInvoiceId(InvoiceId _substitutionInvoiceId = substitutionInvoiceId)
    {
        substitutionInvoiceId = _substitutionInvoiceId;
        return substitutionInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printEntryCertificateJour_W</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method prints the entry certificate journal which was created during posting.
    /// </summary>
    protected void printEntryCertificateJour_W()
    {
        Args parameters = new Args();
        CustEntryCertificateJour_W entryCertificateJour;

        select firstonly entryCertificateJour
            where entryCertificateJour.SourceRefTableId == custInvoiceJour.TableId
                && entryCertificateJour.SourceRefRecId == custInvoiceJour.RecId
                && entryCertificateJour.Status != EntryCertificateStatus_W::Cancelled;

        if (entryCertificateJour)
        {
            parameters.caller(this);
            parameters.record(entryCertificateJour);
            new MenuFunction(menuitemOutputStr(CustEntryCertificateReport_DE), MenuItemType::Output).run(parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints and sends XML documents for each journal.
    /// </summary>
    /// <param name="_journalList">
    /// A set that contains the journals to be processed.
    /// </param>
    public void printJournal(Set _journalList)
    {
        SalesShippingStat salesShippingStat;
        SetEnumerator se = _journalList.getEnumerator();

        super(_journalList);

        if (journalList.len() > 0)
        {
            if (this.parmPrintCODLabel())
            {
                se.reset();
                while (se.moveNext())
                {
                    custInvoiceJour = se.current();
                    this.printSalesCODLabel();
                }
            }

            if ( CustParameters::find().EntryCertificateIssuingEnabled_W
                && this.parmPrintEntryCertificate_W()
                && ! this.parmProforma())
            {
                se.reset();
                while (se.moveNext())
                {
                    custInvoiceJour = se.current();
                    this.printEntryCertificateJour_W();
                }
            }

            if (this.parmPrintShippingLabel() && SalesParameters::find().ShippingStat != SalesShipping::PackingSlip && ! this.parmProforma())
            {
                boolean newline = journalList.first(custInvoiceJour);
                while (newline)
                {
                    this.initShippingStat(custInvoiceJour);

                    if (recordListShippingLine && recordListShippingLine.len() != 0)
                        salesShippingStat.printJournal(this, recordListShippingLine);

                    newline = journalList.next(custInvoiceJour);
                }
            }

            this.prepareSalesCODCashReceiptsForPrint_W(se);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSalesCODCashReceiptsForPrint_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares documents (if it is needed) for printing.
    /// </summary>
    /// <param name = "_docs">Documents.</param>
    private void prepareSalesCODCashReceiptsForPrint_W(SetEnumerator _docs)
    {
        if (this.parmPrintCODCashReceipt())
        {
            _docs.reset();
            while (_docs.moveNext())
            {
                custInvoiceJour = _docs.current();
                this.printSalesCODCashReceipt_W();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSalesCODCashReceipt_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prints Cash Receipt.
    /// </summary>
    protected void printSalesCODCashReceipt_W()
    {
        Args            parameters = new Args();
        CustTrans       custTrans, custTransPayment;
        CustSettlement  custSettlement;

        if (PaymTerm::isCashAccount(custInvoiceJour.Payment))
        {
            custTrans = custInvoiceJour.custTrans();

            select firstonly custTransPayment
            exists join custSettlement
                where custSettlement.OffsetRecid == custTransPayment.RecId
                    && custSettlement.TransRecId == custTrans.RecId
                    && custSettlement.TransCompany == custTrans.dataAreaId
                    && custSettlement.AccountNum == custTrans.AccountNum;

            if (CashRegisterFiscalTrans_W::findCustTrans(custTransPayment))
            {
                parameters.caller(this);
                parameters.record(custTransPayment);

                new MenuFunction(menuitemactionstr(CashRegisterReceiptPrint_W), MenuItemType::Action).run(parameters);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSalesCODLabel</Name>
				<Source><![CDATA[
    protected void printSalesCODLabel()
    {
        Args parameters = new Args();

        if (this.parmSalesTable().payment().PaymMethod == NetCurrent::COD)
        {
            CustTrans custTrans = custInvoiceJour.custTrans();

            parameters.caller(this);
            parameters.record(custTrans);

            new MenuFunction(menuitemOutputStr(salesCODLabel), MenuItemType::Output).run(parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendAsXML</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the document in XML format.
    /// </summary>
    /// <remarks>
    /// This method must be overridden in child classes if sending XML is supported by the document.
    /// </remarks>
    protected void sendAsXML()
    {
        boolean skipSendElectronically =
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]);

        if (!skipSendElectronically
            && !this.parmProforma()
            && (new SRSPrintDestinationSettings(printerSettingsFormletter).printMediumType() != SRSPrintMediumType::Screen
                || FeatureStateProvider::isFeatureEnabled(ForcedElectronicInvoicesGenerationFeature_W::instance())))
        {
            boolean newLine = journalList.first(custInvoiceJour);
            while (newLine)
            {
                custInvoiceJour.sendElectronically(PrintCopyOriginal::Original, false);
                newLine = journalList.next(custInvoiceJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container packedSuper;
        switch (version)
        {
            case currentVersion:
                [version, printShippingLabel, printerSettingsShippingLabel, printCODLabel, useUserDefinedDestinations,
                    salesTable, sendByMail_MX, docuSetCode, printEntryCertificate_W, printerSettingsEntryCertificate_W,
                    printCODCashReceipt_W, packedSuper] = _packedClass;
                super(packedSuper);
                break;

            case #Version4:
                [version,#CurrentListV4, packedSuper] = _packedClass;
                super(packedSuper);
                break;

            case #Version3:
                [version,#CurrentListV3, packedSuper] = _packedClass;
                super(packedSuper);
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesInvoiceJournalPrint construct()
    {
        return new SalesInvoiceJournalPrint();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFormletterContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Initializes an instance of the <c>SalesInvoiceJournalPrint</c> class.
    /// </summary>
    /// <param name="_salesFormLetterInvoiceContract">
    ///   An instance of the <c>SalesFormletterInvoiceContract</c> class.
    /// </param>
    /// <returns>
    ///   An instance of the <c>SalesInvoiceJournalPrint</c> class.
    /// </returns>
    public static SalesInvoiceJournalPrint newFromFormletterContract(SalesFormLetterInvoiceContract _salesFormLetterInvoiceContract)
    {
        SalesInvoiceJournalPrint salesInvoiceJournalPrint = SalesInvoiceJournalPrint::construct();

        salesInvoiceJournalPrint.parmPrintCODLabel(_salesFormLetterInvoiceContract.parmPrintCODLabel());
        salesInvoiceJournalPrint.parmPrinterSettingsCODLabel(SysOperationHelper::base64Decode(_salesFormLetterInvoiceContract.parmPrinterSettingsCODLabel()));
        salesInvoiceJournalPrint.parmPrinterSettingsShippingLabel(SysOperationHelper::base64Decode(_salesFormLetterInvoiceContract.parmPrinterSettingsShippingLabel()));
        salesInvoiceJournalPrint.parmPrintShippingLabel(_salesFormLetterInvoiceContract.parmPrintShippingLabel());
        salesInvoiceJournalPrint.parmSalesTable(_salesFormLetterInvoiceContract.parmSalesTable());
        salesInvoiceJournalPrint.parmUseUserDefinedDestinations(_salesFormLetterInvoiceContract.parmUseUserDefinedDestinations());
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            salesInvoiceJournalPrint.parmMCRMiscChargePrintOption(_salesFormLetterInvoiceContract.parmMCRMiscChargePrintOption());
        }
        // <GEERU>
        salesInvoiceJournalPrint.parmPrintBillOfLading_RU(_salesFormLetterInvoiceContract.parmPrintBillOfLading_RU());
        salesInvoiceJournalPrint.parmPrintTransportInvoice_RU(_salesFormLetterInvoiceContract.parmPrintTransportInvoice_RU());
        // </GEERU>

        // <GTH>
        if (TaxThaiGovCertificationFeatureChecker::isUnrealizedVATEnabled())
        {
            salesInvoiceJournalPrint.parmDocuSetCode(_salesFormLetterInvoiceContract.parmDocuSetCode());
        }
        // </GTH>

        salesInvoiceJournalPrint.parmPrintEntryCertificate_W(_salesFormLetterInvoiceContract.parmPrintEntryCertificate_W());
        salesInvoiceJournalPrint.parmPrinterSettingsEntryCertificate_W(SysOperationHelper::base64Decode(_salesFormLetterInvoiceContract.parmPrinterSettingsEntryCertificate_W()));

        return salesInvoiceJournalPrint;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>