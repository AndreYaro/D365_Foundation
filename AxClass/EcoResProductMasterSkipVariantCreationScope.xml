<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductMasterSkipVariantCreationScope</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Manages the scope in which variant creation is called. If we are applying color, size or style groups, we want to generate the variants after we store the translations in the db.
/// </summary>
internal final class EcoResProductMasterSkipVariantCreationScope implements System.IDisposable
{
    private static boolean skipVariantCreation = false;
    
    boolean isTopLevelScope;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts a new scope for skipping variant creation.
    /// </summary>
    public void new()
    {
        isTopLevelScope = !EcoResProductMasterSkipVariantCreationScope::shouldSkipVariantCreation();

        if (isTopLevelScope)
        {
            EcoResProductMasterSkipVariantCreationScope::setSkipVariantCreation(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends the scope for skipping variant creation.
    /// </summary>
    public void Dispose()
    {
        if (isTopLevelScope)
        {
            EcoResProductMasterSkipVariantCreationScope::setSkipVariantCreation(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTopLevelScope</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the current scope is top level or nested within another scope.
    /// </summary>
    /// <returns>True, if it is a top level scope; False otherwise.</returns>
    public boolean isTopLevelScope()
    {
        return isTopLevelScope;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSkipVariantCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether variant creation should be skipped in the current session.
    /// </summary>
    /// <param name = "_skipPlanning">True if variant creation should be skipped; False otherwise.</param>
    public static void setSkipVariantCreation(boolean _skipVariantCreation)
    {
        skipVariantCreation = _skipVariantCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipVariantCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether variant creation should be skipped in the current session.
    /// </summary>
    /// <returns>True if variant creation should be skipped; False otherwise.</returns>
    public static boolean shouldSkipVariantCreation()
    {
        return skipVariantCreation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>