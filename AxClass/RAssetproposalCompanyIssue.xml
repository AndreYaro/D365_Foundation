<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetproposalCompanyIssue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetproposalCompanyIssue extends RAssetProposal implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetTransType</Name>
				<Source><![CDATA[
        public RAssetTransType assetTransType()
    {
        return RAssetTransType::CompanyIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDisposalTrans</Name>
				<Source><![CDATA[
        public void createDisposalTrans(RAssetDisposalType _assetSoldScrap,
                                    RAssetStandardId   _assetStandardId,
                                    LedgerJournalTrans _disposalLine     = null)
    {
        LedgerJournalTrans_RAsset ledgerJournalTrans_RAsset;

        super(_assetSoldScrap, _assetStandardId);
        ledgerJournalTrans_RAsset = rAssetJournal.ledgerJournalTrans_RAsset();

        if (ledgerJournalTrans_RAsset)
        {
            ledgerJournalTrans_RAsset.selectForUpdate(true);
            ledgerJournalTrans_RAsset.ToFromRecId = 0;
            ledgerJournalTrans_RAsset.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournalLines</Name>
				<Source><![CDATA[
        public void createJournalLines(RAssetStandardId _assetStandardId,
                                   boolean          _runFromBatch = true,
                                   RAssetAmount     _assetAmount  = 0)
    {
        runDate = RAssetMoveHist::findLastOperation(rAssetTable.AccountNum,RAssetMoveType::CompanyIssue,NoYes::No,runDate).ChangeDate;

        if (runDate)
        {
            if (rAssetStandards.Depreciation)
            {
                rAssetJournal.createVoucher();
                this.createDisposalTrans(RAssetDisposalType::CompanyIssue, _assetStandardId);
            }
        }
        else if (singleOperation)
            throw error(strFmt("@GLS220506",
                                rAssetTable.AccountNum,
                                RAssetMoveHist::findLastOperation(rAssetTable.AccountNum,RAssetMoveType::CompanyIssue,NoYes::No).ChangeDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        DialogRunbase dialog = super();
        ;

        dialog.caption("@GLS116684");
        dialogRunDate.label("@GLS116688");
        dialogAssetStandardId.visible(false);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run(QueryRun _queryRun = queryRun)
    {
        ;
        _queryRun.query().dataSourceName(tableStr(RAssetTable)).addRange(fieldNum(RAssetTable, AssetType)).value(queryRange(RAssetType::Tangible, RAssetType::Other));
        super(_queryRun);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>