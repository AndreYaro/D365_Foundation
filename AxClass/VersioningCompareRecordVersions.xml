<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningCompareRecordVersions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>V ersioningCompareRecordVersions</c> class is used to identify changes between two records from the same table.
/// </summary>
/// <remarks>
/// The class is used by the <c>VersioningCompare</c> class which will compare two versions of a document supporting the history pattern.
/// </remarks>
public class VersioningCompareRecordVersions
{
    tableId  tableId;

    Map      includeField;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>add2ChangeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a change to the list of changes.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table that contains the field that is changed.
    /// </param>
    /// <param name="_fieldId">
    /// The ID of the field that contains the change.
    /// </param>
    /// <param name="_arrayIdx">
    /// The array index of the field specified in the <paramref name="_fieldId" /> value.
    /// </param>
    /// <param name="_oldValue">
    /// The old value.
    /// </param>
    /// <param name="_newValue">
    /// The new value.
    /// </param>
    /// <param name="_fieldLabel">
    /// A label text that will override the field label in the compare UI.
    /// </param>
    /// <returns>
    /// A container that contains information about the field that changed.
    /// </returns>
    protected container add2ChangeList( tableId     _tableId,
                                        fieldId     _fieldId,
                                        Counter     _arrayIdx,
                                        anytype     _oldValue,
                                        anytype     _newValue,
                                        fieldLabel  _fieldLabel = '')
    {
        return [[_tableId, _fieldId, _arrayIdx, _oldValue, _newValue, _fieldLabel]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>addChangedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds changes for a record to the list of combined changes.
    /// </summary>
    /// <param name="_changeType">
    /// A <c>VersionChangeType</c> enumeration value that specifies the <c>Modified</c>, <c>Added</c>,
    /// <c>Removed</c>, or <c>NoChange</c> value.
    /// </param>
    /// <param name="_origCommon">
    /// The original version of the record.
    /// </param>
    /// <param name="_newCommon">
    /// The modified version of the record.
    /// </param>
    /// <param name="_tableName">
    /// The name of the table where record has changed.
    /// </param>
    /// <param name="_sysDictField">
    /// A <c>SysDictField</c> field that should be checked if changes exists.
    /// </param>
    /// <param name="_arrayIdx">
    /// The array index of the field specified in the <paramref name="_fieldName" /> value.
    /// </param>
    /// <param name="_changeList">
    /// The list of changes for a given table.
    /// </param>
    /// <param name="_dictFieldGroup">
    /// A <c>DictFieldGroup</c> instance for the auto report field group.
    /// </param>
    /// <returns>
    /// The list of changes for a given table.
    /// </returns>
    protected container addChangedField(VersioningChangeType    _changeType,
                                        Common                  _origCommon,
                                        Common                  _newCommon,
                                        TableName               _tableName,
                                        SysDictField            _sysDictField,
                                        Counter                 _arrayIdx,
                                        container               _changeList,
                                        DictFieldGroup          _dictFieldGroup)
    {
        FieldName   fieldName = _sysDictField.name();
        Types       fieldBaseType = _sysDictField.baseType();

        switch (_changeType)
        {
            case VersioningChangeType::Updated:
                if (_origCommon.getFieldValue(fieldName, _arrayIdx) != _newCommon.getFieldValue(fieldName, _arrayIdx))
                {
                    if (_sysDictField.isDimensionField())
                    {
                        _changeList += this.getDimensionFieldValue(_changeType, _origCommon, _newCommon, _tableName, _sysDictField, _arrayIdx);
                    }
                    else
                    {
                        _changeList += this.add2ChangeList( _origCommon.TableId,
                                                            SysDictField::newName(_tableName, fieldName, _arrayIdx).id(),
                                                            _arrayIdx,
                                                            this.getFieldValue(_origCommon, _sysDictField, _arrayIdx),
                                                            this.getFieldValue(_newCommon , _sysDictField, _arrayIdx));
                    }
                }
                break;

            case VersioningChangeType::Inserted:
                if ((fieldBaseType == Types::Enum || _newCommon.getFieldValue(fieldName, _arrayIdx)) && this.isFieldInAutoReportFieldGroup(tableName2id(_tableName), fieldName, _dictFieldGroup))
                {
                    if (_sysDictField.isDimensionField())
                    {
                        _changeList += this.getDimensionFieldValue(_changeType, _origCommon, _newCommon, _tableName, _sysDictField, _arrayIdx);
                    }
                    else
                    {
                        _changeList += this.add2ChangeList( _origCommon.TableId,
                                                            SysDictField::newName(_tableName, fieldName, _arrayIdx).id(),
                                                            _arrayIdx,
                                                            0,
                                                            this.getFieldValue(_newCommon , _sysDictField, _arrayIdx));
                    }
                }
                break;

            case VersioningChangeType::Deleted:
                if ((fieldBaseType == Types::Enum || _origCommon.getFieldValue(fieldName, _arrayIdx)) && this.isFieldInAutoReportFieldGroup(tableName2id(_tableName), fieldName, _dictFieldGroup))
                {
                    if (_sysDictField.isDimensionField())
                    {
                        _changeList += this.getDimensionFieldValue(_changeType, _origCommon, _newCommon, _tableName, _sysDictField, _arrayIdx);
                    }
                    else
                    {
                        _changeList += this.add2ChangeList( _origCommon.TableId,
                                                            SysDictField::newName(_tableName, fieldName, _arrayIdx).id(),
                                                            _arrayIdx,
                                                            this.getFieldValue(_origCommon, _sysDictField, _arrayIdx),
                                                            0);
                    }
                }
                break;
        }

        return _changeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addField2includeList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a field to the list of fields that should be included in the comparison.
    /// </summary>
    /// <param name="_sysDictField">
    ///    The <c>SysDictField</c> object which specifies the field.
    /// </param>
    /// <returns>
    ///    true if the field should be included in the comparison; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Only fields which are visible, editable, and stored in the database are included. The
    ///    <c>DateTime</c> fields that are used for date effectiveness are excluded.
    /// </remarks>
    protected boolean addField2includeList(SysDictField _sysDictField)
    {
        if (!(this.isFieldVisibleAndAllowEdit(_sysDictField) && _sysDictField.isSql()))
        {
            return false;
        }
        else
        {
            if (_sysDictField.baseType() == Types::UtcDateTime)
            {
                if (_sysDictField.typeId() == SysDictType::newName(extendedTypeStr(ValidFromDateTime)).id())
                {
                    return false;
                }
                else
                if (_sysDictField.typeId() == SysDictType::newName(extendedTypeStr(ValidToDateTime)).id())
                {
                    return false;
                }
                else
                {
                    // Test if the current user has access to the field
                    return this.userHasViewAccess(_sysDictField);
                }
            }
            else
            {
                // Test if the current user has access to the field
                return this.userHasViewAccess(_sysDictField);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDimensionFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if a dimension field should be added to the change list.
    /// </summary>
    /// <param name="_changeType">
    /// A <c>VersionChangeType</c> enumeration value which specifies the <c>Modified</c>, <c>Added</c>,
    /// <c>Removed</c>, or <c>NoChange</c> value.
    /// </param>
    /// <param name="_origCommon">
    /// The original version of the record.
    /// </param>
    /// <param name="_newCommon">
    /// The modified version of the record.
    /// </param>
    /// <param name="_tableName">
    /// The name of the table where the record has changed.
    /// </param>
    /// <param name="_sysDictField">
    /// A <c>SysDictField</c> field which should be checked if changes exists.
    /// </param>
    /// <param name="_arrayIdx">
    /// The array index of the field which should be checked if changes exists.
    /// </param>
    /// <returns>
    /// The list of changes for a given dimension.
    /// </returns>
    protected container getDimensionFieldValue( VersioningChangeType    _changeType,
                                                Common                  _origCommon,
                                                Common                  _newCommon,
                                                TableName               _tableName,
                                                SysDictField            _sysDictField,
                                                Counter                 _arrayIdx)
    {
        #DimensionsEDT
        DimensionAttributeValueSetItemView  dimensionAttribute;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        Map                                 oldDimensions = new Map(Types::String, Types::String);
        Map                                 newDimensions = new Map(Types::String, Types::String);
        anytype                             oldValue;
        anytype                             newValue;
        MapEnumerator                       me;
        FieldName                           fieldName = _sysDictField.name();
        Name                                dimensionName;
        container                           changeList;
        SysDictType                         sysDictType;
        str                                 typeName;

        sysDictType = new SysDictType(_sysDictField.typeId());
        if (sysDictType)
        {
            typeName = sysDictType.name();

            if (typeName == #DimensionDefaultEDT
                || sysDictType.isExtendedFrom(#DimensionDefaultEDT))
            {
                // Default dimensions

                while select dimensionAttribute
                        where dimensionAttribute.DimensionAttributeValueSet == _origCommon.getFieldValue(fieldName)
                {
                    oldDimensions.insert(DimensionAttribute::find(dimensionAttribute.DimensionAttribute).localizedName(), dimensionAttribute.DisplayValue);
                }

                while select dimensionAttribute
                        where dimensionAttribute.DimensionAttributeValueSet == _newCommon.getFieldValue(fieldName)
                {
                    dimensionName = DimensionAttribute::find(dimensionAttribute.DimensionAttribute).localizedName();
                    if (oldDimensions.exists(dimensionName)
                        && dimensionAttribute.DisplayValue == oldDimensions.lookup(dimensionName))
                    {
                        if (_changeType == VersioningChangeType::Deleted)
                        {
                            // record is deleted
                            newDimensions.insert(DimensionAttribute::find(dimensionAttribute.DimensionAttribute).localizedName(), '');
                        }
                        else
                        {
                            // Remove dimension from map the old and new values are the same.
                            oldDimensions.remove(dimensionName);
                        }
                    }
                    else
                    {
                        newDimensions.insert(DimensionAttribute::find(dimensionAttribute.DimensionAttribute).localizedName(), dimensionAttribute.DisplayValue);
                    }
                }
            }
            else if (typeName == #LedgerDimensionBaseEDT
                    || sysDictType.isExtendedFrom(#LedgerDimensionBaseEDT))
            {
                switch (_changeType)
                {
                    case VersioningChangeType::Updated:
                        dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(_origCommon.getFieldValue(fieldName));
                        oldDimensions.insert('', dimensionAttributeValueCombination.DisplayValue);
                        dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(_newCommon.getFieldValue(fieldName));
                        newDimensions.insert('', dimensionAttributeValueCombination.DisplayValue);
                        break;
                    case VersioningChangeType::Inserted:
                        dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(_origCommon.getFieldValue(fieldName));
                        newDimensions.insert('', dimensionAttributeValueCombination.DisplayValue);
                        break;
                    case VersioningChangeType::Deleted:
                        dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(_origCommon.getFieldValue(fieldName));
                        oldDimensions.insert('', dimensionAttributeValueCombination.DisplayValue);
                        break;
                }
            }
        }

        me = oldDimensions.getEnumerator();
        while (me.moveNext())
        {
            oldValue = me.currentValue();

            if (newDimensions.exists(me.currentKey()))
            {
                // existing dimension has changed value
                newValue = newDimensions.lookup(me.currentKey());
            }
            else
            {
                // dimension is removed
                newValue = '';
            }

            changeList += this.add2ChangeList( _origCommon.TableId,
                                                SysDictField::newName(_tableName, fieldName, _arrayIdx).id(),
                                                _arrayIdx,
                                                oldValue,
                                                newValue,
                                                me.currentKey());
        }

        me = newDimensions.getEnumerator();
        while (me.moveNext())
        {
            if (!oldDimensions.exists(me.currentKey()))
            {
                // dimension is added
                newValue = me.currentValue();

                changeList += this.add2ChangeList( _origCommon.TableId,
                                                    SysDictField::newName(_tableName, fieldName, _arrayIdx).id(),
                                                    _arrayIdx,
                                                    '',
                                                    newValue,
                                                    me.currentKey());
            }
        }

        return changeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the field value for a given field.
    /// </summary>
    /// <param name="_common">
    /// A version of the record.
    /// </param>
    /// <param name="_sysDictField">
    /// A <c>SysDictField</c> field which should be checked if changes exists.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field specified in <paramref name="_fieldName" /> .
    /// </param>
    /// <returns>
    /// The value of a field.
    /// </returns>
    protected anytype getFieldValue(Common          _common,
                                    SysDictField    _sysDictField,
                                    Counter         _arrayIndex)
    {
        SysDictTable    sysDictTable;
        SysDictRelation sysDictRelation;
        Common          common;
        FieldName       fieldName = _sysDictField.name();
        Types           fieldBaseType = _sysDictField.baseType();
        anytype         fieldValue;

        if (fieldBaseType == Types::Enum)
        {
            return enum2Str(_common.getFieldValue(fieldName, _arrayIndex));
        }
		
        if (fieldBaseType != Types::Int64)
        {
            return _common.getFieldValue(fieldName, _arrayIndex);
        }

        sysDictTable = SysDictTable::newTableId(_common.TableId);
        if (sysDictTable)
        {
            sysDictRelation = new SysDictRelation(sysDictTable.id());
            if (sysDictRelation)
            {
                sysDictRelation.loadFieldRelation(fieldName2id(sysDictTable.id(), fieldName));
                if (sysDictRelation.lines() == 1)
                {
                    if (sysDictRelation.lineExternTableValue(1) == fieldNum(PurchTable,RecId))
                    {
                        common = SysDictTable::newTableId(sysDictRelation.externTable()).makeRecord();
                        select firstonly common
                            where common.RecId == _common.getFieldValue(fieldName, _arrayIndex);

                        if (!common.RecId)
                        {
                            return '';
                        }

                        fieldValue = common.toolTipRecord();
                        if (fieldValue)
                        {
                            return fieldValue;
                        }

                        // Return the FK
                        return _common.getFieldValue(fieldName, _arrayIndex);
                    }
                }
            }
        }

        return _common.getFieldValue(fieldName, _arrayIndex);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoryDictTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>DictTable</c> class instance for a history table.
    /// </summary>
    /// <param name="_origCommon">
    /// The original version of the record.
    /// </param>
    /// <param name="_newCommon">
    /// The modified version of the record.
    /// </param>
    /// <returns>
    /// An instance of the <c>DictTable</c> class.
    /// </returns>
    protected DictTable getHistoryDictTable(Common _origCommon, Common _newCommon)
    {
        // Check if original buffer is a history table
        if (tableId != _origCommon.TableId)
        {
            return new DictTable(_origCommon.TableId);
        }
        // Check if new buffer is a history table
        else if (tableId != _newCommon.TableId)
        {
            return new DictTable(_newCommon.TableId);
        }

        return new DictTable(tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeFieldKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a unique key that identifies the field.
    /// </summary>
    /// <param name="_dictField">
    /// The <c>DictField</c> object for the field.
    /// </param>
    /// <returns>
    /// A unique key that identifies the field.
    /// </returns>
    protected str includeFieldKey(DictField _dictField)
    {
        return strFmt("%1#%2#%3",_dictField.tableid(), _dictField.id(), _dictField.arrayIndex());
    }

]]></Source>
			</Method>
			<Method>
				<Name>includeInComparison</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the specified field will be included in the comparison.
    /// </summary>
    /// <param name="_sysDictField">
    /// The <c>SysDictField</c> object that specifies the field.
    /// </param>
    /// <returns>
    /// true if the field will be included in the comparison; otherwise, false.
    /// </returns>
    /// <remarks>
    /// Only fields which are visible, editable, and stored in the database are included. The
    /// <c>DateTime</c> fields that are used for date effectiveness are excluded.
    /// </remarks>
    protected boolean includeInComparison(SysDictField _sysDictField)
    {
        if (!includeField.exists(this.includeFieldKey(_sysDictField)))
        {
            includeField.insert(this.includeFieldKey(_sysDictField), this.addField2includeList(_sysDictField));
        }
        return includeField.lookup(this.includeFieldKey(_sysDictField));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldInAutoReportFieldGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a field is included in the auto report field group.
    /// </summary>
    /// <param name="_tableId">
    /// The ID of the table that contains the field to check.
    /// </param>
    /// <param name="_fieldName">
    /// The name of the field which should be checked if is part of the auto report field group.
    /// </param>
    /// <param name="_dictFieldGroup">
    /// A <c>DictFieldGroup</c> instance for the auto report field group.
    /// </param>
    /// <returns>
    /// true if the field is included in the auto report field group; otherwise, false.
    /// </returns>
    protected boolean isFieldInAutoReportFieldGroup(TableId _tableId, FieldName _fieldName, DictFieldGroup _dictFieldGroup)
    {
        Counter idx;
        Counter idxMax;

        if (!_dictFieldGroup)
        {
            _dictFieldGroup = new DictFieldGroup(_tableId, identifierStr(AutoReport));
        }

        if (_dictFieldGroup)
        {
            idxMax = _dictFieldGroup.numberOfFields();

            for (idx = 1; idx <= idxMax; idx++)
            {
                if (fieldId2name(_dictFieldGroup.tableid(),_dictFieldGroup.field(idx)) == _fieldName)
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldVisibleAndAllowEdit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a field is visible and editable.
    /// </summary>
    /// <param name="_sysDictField">
    /// An instance of the field.
    /// </param>
    /// <returns>
    /// true if the field is visible and editable; otherwise, false .
    /// </returns>
    protected boolean isFieldVisibleAndAllowEdit(SysDictField _sysDictField)
    {
        return _sysDictField.aotVisible() && _sysDictField.aotAllowEdit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        if (appl.globalCache().isSet(classstr(VersioningCompareRecordVersions),curuserid()))
        {
            includeField = appl.globalCache().get(classstr(VersioningCompareRecordVersions),curuserid());
        }
        else
        {
            includeField = new Map(Types::String, Types::Enum);
            appl.globalCache().set(classstr(VersioningCompareRecordVersions),curuserid(), includeField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>packChangedFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs a container with the fields which are different in the two versions of the record.
    /// </summary>
    /// <param name="_changeType">
    /// A <c>VersionChangeType</c> enumeration value which specifies the <c>Modified</c>, <c>Added</c>,
    /// <c>Removed</c>, or <c>NoChange</c> value.
    /// </param>
    /// <param name="_origCommon">
    /// The original version of the record.
    /// </param>
    /// <param name="_newCommon">
    /// The modified version of the record.
    /// </param>
    /// <returns>
    /// A container that specifies the fields that have changed.
    /// </returns>
    /// <remarks>
    /// The container has a nested container for each field. This nested container holds the attribute, the
    /// old value and the new value. The nested container has a length of 3.
    /// </remarks>
    public container packChangedFields(VersioningChangeType _changeType, Common _origCommon, Common _newCommon)
    {
        container               changeList;

        Counter                 arrayIdx;
        Counter                 arraySize;
        Counter                 fieldIdx;
        Counter                 fieldCnt;

        DictFieldGroup          dictFieldGroup;
        DictTable               dictTable;
        DictTable               dictTableHistory;
        SysDictField            sysDictField;

        dictTable = new DictTable(tableId);
        if (dictTable)
        {
            dictTableHistory = this.getHistoryDictTable(_origCommon, _newCommon);
            fieldCnt = dictTable.fieldCnt();
            for (fieldIdx = 1 ; fieldIdx < fieldCnt ; fieldIdx++)
            {
                sysDictField = new SysDictField(tableId, dictTable.fieldCnt2Id(fieldIdx));
                arraySize = sysDictField.arraySize();
                for (arrayIdx = 1 ; arrayIdx <= arraySize ; arrayIdx++)
                {
                    // Reuse already instantiated SysDictField for arrayIdx 1.
                    sysDictField = arrayIdx == 1 ? sysDictField : new SysDictField(tableId, dictTable.fieldCnt2Id(fieldIdx), arrayIdx);

                    // Is include in the comparison and the field exists on the history table
                    if (this.includeInComparison(sysDictField)
                        && dictTableHistory.fieldName2Id(sysDictField.name()) != 0
                        && _changeType != VersioningChangeType::None)
                    {
                        changeList = this.addChangedField(_changeType, _origCommon, _newCommon, dictTable.name(), sysDictField, arrayIdx, changeList, dictFieldGroup);
                    }
                }
            }
        }

        return changeList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableId</Name>
				<Source><![CDATA[
    protected tableId parmTableId(tableId _tableId = tableId)
    {
        tableId = _tableId;

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>userHasViewAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the user has view access to the specified field.
    /// </summary>
    /// <param name="_sysDictField">
    /// The <c>SysDictField</c> object which specifies the field.
    /// </param>
    /// <returns>
    /// true if the user has view access to the field; otherwise, false.
    /// </returns>
    protected boolean userHasViewAccess(SysDictField _sysDictField)
    {
        return _sysDictField.isUserEnabled(AccessType::View);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static VersioningCompareRecordVersions construct()
    {
        return new VersioningCompareRecordVersions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>VersioningCompareRecordVersions</c> class based on the table.
    /// </summary>
    /// <param name="_tableId">
    /// The <c>TableId</c> of the table.
    /// </param>
    /// <returns>
    /// An instance of the <c>VersioningCompareRecordVersions</c> class.
    /// </returns>
    public static VersioningCompareRecordVersions newTableId(tableId _tableId)
    {
        VersioningCompareRecordVersions versioningCompareRecordVersions;

        versioningCompareRecordVersions = VersioningCompareRecordVersions::construct();
        versioningCompareRecordVersions.parmTableId(_tableId);

        return versioningCompareRecordVersions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posNewValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the position of the new value in the secondary container.
    /// </summary>
    /// <returns>The position of the new value in the secondary container.</returns>
    public static int posNewValue()
    {
        return 5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posOrigValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the position of the orig value in the secondary container.
    /// </summary>
    /// <returns>The position of the orig value in the secondary container.</returns>
    public static int posOrigValue()
    {
        return 4;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posRelatedArrayIdx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the position of the related field array index in the secondary container.
    /// </summary>
    /// <returns>The position of the related field array index in the secondary container.</returns>
    public static int posRelatedArrayIdx()
    {
        return 3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posRelatedFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the position of the related field ID in the secondary container.
    /// </summary>
    /// <returns>The position of the related field ID in the secondary container.</returns>
    public static int posRelatedFieldId()
    {
        return 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posRelatedFieldLabelValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the position of the related field label value in the secondary container.
    /// </summary>
    /// <returns>
    /// The position of the related field label value in the secondary container.
    /// </returns>
    public static int posRelatedFieldLabelValue()
    {
        return 6;
    }

]]></Source>
			</Method>
			<Method>
				<Name>posRelatedTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the position of the related table ID in the secondary container.
    /// </summary>
    /// <returns>The position of the related table ID in the secondary container.</returns>
    public static int posRelatedTableId()
    {
        return 1;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>