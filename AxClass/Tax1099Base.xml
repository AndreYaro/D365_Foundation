<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099Base</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class Tax1099Base
{
    const str One = '1';
    const str Two = '2';
    const str Three = '3';
    const str Four = '4';
    const str Five = '5';
    const str Six = '6';
    const str Seven = '7';
    const str Eight = '8';
    const str Nine = '9';
    const str A = 'A';
    const str B = 'B';
    const str C = 'C';
    const str D = 'D';
    const str E = 'E';
    const str F = 'F';
    const str G = 'G';
    const str H = 'H';
    const str J = 'J';

    protected str outputRecord;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formatIRSAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Produces a string from a real number formatted according to IRS reporting guidelines.
    /// </summary>
    /// <param name = "_amount">The real number to be formatted.</param>
    /// <param name = "amountLength">The length of the field.</param>
    /// <returns>A string from a real number formatted according to IRS reporting guidelines.</returns>
    protected str formatIRSAmount(real _amount, int amountLength)
    {
        return strRem(num2Str0(_amount, amountLength + 1, 2, 0, 0), '.');
    }

]]></Source>
			</Method>
			<Method>
				<Name>strInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Internal method to allow insertion into the output record at a given position.
    /// </summary>
    /// <param name = "_field">The field to be inserted</param>
    /// <param name = "_position">The position to insert the information at</param>
    protected void strInsert(anytype _field, int _position)
    {
        outPutRecord = strPoke(outputRecord, _field, _position);
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verifies that the specified Tax1099Field record exists and creates or updates it as needed.
    /// </summary>
    /// <param name="_tax1099Fields">
    /// An in Memory version of Tax1099Fields table that contains records to check against
    /// </param>
    /// <param name="_recordInsertList">
    /// The record insert list to add records to to be inserted outside of function
    /// </param>
    /// <param name="_tax1099Box">
    /// The Tax1099Box field of the record in question
    /// </param>
    /// <param name="_tax1099FormDescription">
    /// The Description field of the record in question
    /// </param>
    /// <param name="_tax1099Amount">
    /// The Tax1099Amount field of the record in question
    /// </param>
    /// <param name="_tax1099Type">
    /// The Tax1099Type field of the record in question
    /// </param>
    /// <param name="_forceupdate">
    /// Defaults false. If true, ignores user changes to a record and forces it to the given values
    /// </param>
    /// <returns>
    /// True if any records were updated or inserted, otherwise false
    /// </returns>
    /// <remarks>
    /// Function is meant to be called inside a transaction scope and with the first two arguments
    /// set up appropriatly. See <c>createTax1099Fields</c> function for example.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Exception thrown if _tax1099Fields is not an inMemory table or _recordInsertList is not initilized.
    /// </exception>
    protected boolean verifyRecord(Tax1099Fields _tax1099Fields,
        RecordInsertList _recordInsertList,
        Tax1099Box _tax1099Box,
        Tax1099FormDescription _tax1099FormDescription,
        Tax1099Amount _tax1099Amount,
        Tax1099Type _tax1099Type,
        boolean _forceupdate = false)
    {
        Tax1099Fields tax1099Fields;
        Tax1099Fields tax1099FieldsRIL;

        if (_tax1099Fields.getTableType() != TableType::InMemory || _recordInsertList == null)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        select firstonly _tax1099Fields
            where _tax1099Fields.Tax1099Box == _tax1099Box &&
                  _tax1099Fields.Tax1099Type == _tax1099Type;

        if (!_tax1099Fields)
        {
            tax1099FieldsRIL.Tax1099Box = _tax1099Box;
            tax1099FieldsRIL.Description = _tax1099FormDescription;
            tax1099FieldsRIL.Tax1099Amount = _tax1099Amount;
            tax1099FieldsRIL.Tax1099Type = _tax1099Type;

            _recordInsertList.add(tax1099FieldsRIL);
            return true;
        }
        // Preserve user changes to a record even if different than given unless we are forcing the update
        else if (_tax1099Fields.RecVersion == 1 || _forceupdate)
        {
            if (_tax1099Fields.Description != _tax1099FormDescription || _tax1099Fields.Tax1099Amount != _tax1099Amount)
            {
                tax1099Fields.skipDataMethods(true);

                update_recordset tax1099Fields
                setting
                    Description = _tax1099FormDescription,
                    Tax1099Amount = _tax1099Amount
                 where tax1099Fields.Tax1099Box == _tax1099Box &&
                       tax1099Fields.Tax1099Type == _tax1099Type;

                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTax1099IForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Factory to create the appropriate 1099 form object based on the given type.
    /// </summary>
    /// <param name = "_tax1099Type">The type of 1099 form to create.</param>
    /// <returns>An instantiated 1099 form object, or null if the type does not have an associated form.</returns>
    public static Tax1099IForm createTax1099IForm(Tax1099Type _tax1099Type)
    {
        switch (_tax1099Type)
        {
            case Tax1099Type::F1099DIV:
                return new Tax1099DIV();
            case Tax1099Type::F1099INT:
                return new Tax1099INT();
            case Tax1099Type::F1099MISC:
                return new Tax1099MISC();
            case Tax1099Type::F1099OID:
                return new Tax1099OID();
            case Tax1099Type::F1099G:
                return new Tax1099G();
            case Tax1099Type::F1099S:
                return new Tax1099S();
            case Tax1099Type::F1099NEC:
                return new Tax1099NEC();
            default:
                return null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTax1099Fields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified Tax1099Fields record.
    /// </summary>
    /// <param name = "_field">The field identifier object representing a 1099 field and form.</param>
    /// <param name = "_forUpdate">A boolean indicating selecting the record for update or not. Default is false.</param>
    /// <param name = "_concurrencyModel">The concurrency model to use. Default is Auto.</param>
    /// <returns>A Tax1099Fields record matching the given field identifier.</returns>
    public static Tax1099Fields findTax1099Fields(Tax1099FieldIdentifier _field, boolean _forUpdate = false, ConcurrencyModel _concurrencyModel = ConcurrencyModel::Auto)
    {
        Tax1099Fields tax1099Fields;

        tax1099Fields.selectForUpdate(_forUpdate);

        if (_forupdate && _concurrencyModel != ConcurrencyModel::Auto)
        {
            tax1099Fields.concurrencyModel(_concurrencyModel);
        }

        select firstonly * from tax1099Fields
            where tax1099Fields.Tax1099Box == _field.tax1099Box
               && tax1099Fields.Tax1099Type == _field.tax1099Type;

        return tax1099Fields;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findTax1099FieldsRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds a specified Tax1099Fields record's RecId.
    /// </summary>
    /// <param name = "_field">The field identifier object representing a 1099 field and form.</param>
    /// <returns>The recId of a table record matching the given field identifier.</returns>
    public static RecId findTax1099FieldsRecId(Tax1099FieldIdentifier _field)
    {
        Tax1099Fields tax1099Fields;

        select firstonly RecId from tax1099Fields
            where tax1099Fields.Tax1099Box == _field.tax1099Box
               && tax1099Fields.Tax1099Type == _field.tax1099Type;

        return tax1099Fields.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnTypeFromTax1099Type</Name>
				<Source><![CDATA[
    /// <summary>
    /// Find the IRS Return Type string for a given type of 1099 form.
    /// </summary>
    /// <param name = "_tax1099Type">The type of form to find the return type of.</param>
    /// <returns>The string value of the IRS return type for the form, or an empty string if the 1099 form type did not exist.</returns>
    public static str getReturnTypeFromTax1099Type(Tax1099Type _tax1099Type)
    {
        Tax1099IForm tax1099Form = Tax1099Base::createTax1099IForm(_tax1099Type);
        if (tax1099Form)
        {
            return tax1099Form.getReturnType();
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTax1099IRSPayerRec</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void initTax1099IRSPayerRec(Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, Tax1099IRSPayerRec _tax1099IRSPayerRec, CompanyInfo _companyInfo, BankRegNum _payersRTN)
    {
        _tax1099IRSPayerRecTmp.clear();
        _tax1099IRSPayerRecTmp.CompanyName = _companyInfo.name();
        _tax1099IRSPayerRecTmp.CompanyAddress = _companyInfo.postalAddress().Address;
        _tax1099IRSPayerRecTmp.CompanyPhone = _companyInfo.phone();
        _tax1099IRSPayerRecTmp.CompanyTax1099RegNum = _companyInfo.Tax1099RegNum;

        _tax1099IRSPayerRecTmp.Tax1099RegNum = _tax1099IRSPayerRec.Tax1099RegNum;
        _tax1099IRSPayerRecTmp.PayeeNameLine = _tax1099IRSPayerRec.PayeeNameLine;
        _tax1099IRSPayerRecTmp.Addressing = _tax1099IRSPayerRec.address_on_one_Line();
        _tax1099IRSPayerRecTmp.AddressLine1 = _tax1099IRSPayerRec.address_Line1();
        _tax1099IRSPayerRecTmp.AddressLine2 = _tax1099IRSPayerRec.address_Line2();
        _tax1099IRSPayerRecTmp.CityStateZip = _tax1099IRSPayerRec.city_State_Zip();
        _tax1099IRSPayerRecTmp.DirectSalesInd = _tax1099IRSPayerRec.DirectSalesInd;
        _tax1099IRSPayerRecTmp.AcctNumForPayee = _tax1099IRSPayerRec.AcctNumForPayee;
        _tax1099IRSPayerRecTmp.SecondTIN = _tax1099IRSPayerRec.SecondTIN;
        _tax1099IRSPayerRecTmp.ForeignCountryRegionName = _tax1099IRSPayerRec.ForeignCountryRegionName;
        _tax1099IRSPayerRecTmp.FATCAFilingRequirementInd = _tax1099IRSPayerRec.FATCAFilingRequirementInd;
        _tax1099IRSPayerRecTmp.Tax1099TaxYear = _tax1099IRSPayerRec.Tax1099TaxYear;

        _tax1099IRSPayerRecTmp.PayersRTN = _payersRTN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showFederal</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void showFederal(Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, Tax1099IRSPayerRec _tax1099IRSPayerRec)
    {
        _tax1099IRSPayerRecTmp.Amount1 = _tax1099IRSPayerRec.Amount1;
        _tax1099IRSPayerRecTmp.Amount2 = _tax1099IRSPayerRec.Amount2;
        _tax1099IRSPayerRecTmp.Amount3 = _tax1099IRSPayerRec.Amount3;
        _tax1099IRSPayerRecTmp.Amount4 = _tax1099IRSPayerRec.Amount4;
        _tax1099IRSPayerRecTmp.Amount5 = _tax1099IRSPayerRec.Amount5;
        _tax1099IRSPayerRecTmp.Amount6 = _tax1099IRSPayerRec.Amount6;
        _tax1099IRSPayerRecTmp.Amount7 = _tax1099IRSPayerRec.Amount7;
        _tax1099IRSPayerRecTmp.Amount8 = _tax1099IRSPayerRec.Amount8;
        _tax1099IRSPayerRecTmp.Amount9 = _tax1099IRSPayerRec.Amount9;
        _tax1099IRSPayerRecTmp.AmountA = _tax1099IRSPayerRec.AmountA;
        _tax1099IRSPayerRecTmp.AmountB = _tax1099IRSPayerRec.AmountB;
        _tax1099IRSPayerRecTmp.AmountC = _tax1099IRSPayerRec.AmountC;
        _tax1099IRSPayerRecTmp.AmountD = _tax1099IRSPayerRec.AmountD;
        _tax1099IRSPayerRecTmp.AmountE = _tax1099IRSPayerRec.AmountE;
        _tax1099IRSPayerRecTmp.AmountF = _tax1099IRSPayerRec.AmountF;
        _tax1099IRSPayerRecTmp.AmountG = _tax1099IRSPayerRec.AmountG;
        _tax1099IRSPayerRecTmp.Section897CapitalGain = _tax1099IRSPayerRec.Section897CapitalGain;
        _tax1099IRSPayerRecTmp.Section897OrdinaryDividends = _tax1099IRSPayerRec.Section897OrdinaryDividends;
        _tax1099IRSPayerRecTmp.DirectSales = _tax1099IRSPayerRec.DirectSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStateTaxFirstLine</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void setStateTaxFirstLine(Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, Tax1099StateSummary _tax1099StateSummary)
    {
        _tax1099IRSPayerRecTmp.StateTaxWithheld1 = _tax1099StateSummary.StateIncomeTax;
        _tax1099IRSPayerRecTmp.StateTaxId1 = _tax1099StateSummary.StateId;
        _tax1099IRSPayerRecTmp.StateIncome1 = _tax1099StateSummary.StateIncome;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStateTaxSecondLine</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void setStateTaxSecondLine(Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, Tax1099StateSummary _tax1099StateSummary)
    {
        _tax1099IRSPayerRecTmp.StateTaxWithheld2 = _tax1099StateSummary.StateIncomeTax;
        _tax1099IRSPayerRecTmp.StateTaxId2 = _tax1099StateSummary.StateId;
        _tax1099IRSPayerRecTmp.StateIncome2 = _tax1099StateSummary.StateIncome;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>