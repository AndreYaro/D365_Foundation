<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTrans_ReportingConsistencyCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTrans_ReportingConsistencyCheck</c> performs consistency check for <c>TaxTrans_Reporting</c> table.
/// </summary>
internal class TaxTrans_ReportingConsistencyCheck extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the process of checking and fixing records in TaxTrans_Reporting table.
    /// </summary>
    public void run()
    {
        FromDate fromDate = this.consistencyCheckJob.parmFromDate();
        CheckFix checkFix = this.checkFix();
        Counter numRecords = this.processMissingRecords(checkFix, fromDate);
        Counter fixedVendInvoiceApprovalRecords = this.processFixRecordsFromVendInvoiceApproval(checkFix, fromDate);
        Counter fixedProjInvoiceJourRecords = this.processFixRecordsFromProjInvoiceJournal(checkFix, fromDate);
        if (checkFix == CheckFix::Fix)
        {
            this.updateCorrected(numRecords + fixedVendInvoiceApprovalRecords + fixedProjInvoiceJourRecords);
            info(strFmt("@TaxTrans_ReportingConsistencyCheck:ResultFixMessage", numRecords));
            if (fixedVendInvoiceApprovalRecords > 0)
            {
                info(strFmt("@TaxTrans_ReportingConsistencyCheck:ResultFixMessageForApproval", fixedVendInvoiceApprovalRecords));
            }
            if (fixedProjInvoiceJourRecords > 0)
            {
                info(strFmt("@TaxTrans_ReportingConsistencyCheck:ResultFixMessageForProjInvoice", fixedProjInvoiceJourRecords));
            }

        }
        else
        {
            this.updateNotCorrected();
            if (numRecords > 0)
            {
                info(strFmt("@TaxTrans_ReportingConsistencyCheck:ResultCheckMessage", numRecords));
            }
            if (fixedVendInvoiceApprovalRecords > 0)
            {
                info(strFmt("@TaxTrans_ReportingConsistencyCheck:ResultCheckMessageForApproval", fixedVendInvoiceApprovalRecords));
            }
            if (fixedProjInvoiceJourRecords > 0)
            {
                info(strFmt("@TaxTrans_ReportingConsistencyCheck:ResultCheckMessageForProjInvoice", fixedProjInvoiceJourRecords));
            }
            if (numRecords + fixedVendInvoiceApprovalRecords + fixedProjInvoiceJourRecords > 0)
            {
                info("@TaxTrans_ReportingConsistencyCheck:RunAgainToFixErrors");
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>processMissingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies missing records or records with undefined "Credit-note" attribute
    /// in TaxTrans_Reporting table and fixes the identified issues.
    /// </summary>
    /// <param name = "_checkFix">The type of processing: either Check or Fix.</param>
    /// <param name = "_fromDate">The date from which the lines from TaxTrans table should be processed.</param>
    /// <returns>The number of identified / fixed issues in TaxTrans_Reporting table.</returns>
    private Counter processMissingRecords(CheckFix _checkFix, FromDate _fromDate)
    {
        Counter numOfRecords;

        LedgerJournalTrans ledgerJournalTrans_SourceRecId;
        LedgerJournalTrans ledgerJournalTrans_Voucher;
        VendTrans vendTrans;
        TaxTrans taxTrans;
        TaxTrans_Reporting taxTrans_Reporting;
        int tryCount = 0;
        boolean isTransactionReversalFlightEnabled = TaxTransGlobalInitializerTransactionReversalFlight::instance().isEnabled();
        boolean isTransactionReverseOnSameDateFlightEnabled = TaxTransGlobalInitializerTransactionReverseOnSameDateFlight::instance().isEnabled();

        if (_checkFix == CheckFix::Fix)
        {
            try
            {
                RecordInsertList insertList = new RecordInsertList(taxTrans_Reporting.TableId);
                RecId previousTaxTransRecId;

                ttsBegin;

                while select taxTrans
                    where taxTrans.TransDate >= _fromDate
                outer join JournalNum, VendTransId from ledgerJournalTrans_SourceRecId
                    where ledgerJournalTrans_SourceRecId.TableId == taxTrans.SourceTableId
                        && ledgerJournalTrans_SourceRecId.RecId == taxTrans.SourceRecId
                outer join RecId from vendTrans
                    where vendTrans.Voucher == taxTrans.Voucher
                        && vendTrans.TransDate == taxTrans.TransDate
                notexists join taxTrans_Reporting
                    where taxTrans.RecId == taxTrans_Reporting.TaxTrans
                {
                    if (previousTaxTransRecId == taxTrans.RecId)
                    {
                        continue;
                    }

                    previousTaxTransRecId = taxTrans.RecId;

                    TaxTrans_Reporting taxTrans_Reporting_Loc = taxTrans.taxTrans_Reporting();

                    if (ledgerJournalTrans_SourceRecId.JournalNum)
                    {
                        taxTrans_Reporting_Loc.LedgerJournalType = LedgerJournalTable::find(ledgerJournalTrans_SourceRecId.JournalNum).JournalType;
                    }
                    else if (taxTrans.SourceTableId == tableNum(LedgerJournalTrans))
                    {
                        //this will catch situations where the tax trans has a broken SourceRecId link to LedgerJournalTrans
                        //if some LedgerJournalTrans was found - we determine that it's the reversal transaction posted during
                        //the final vendor invoice posting from the invoice pool
                        ledgerJournalTrans_Voucher = LedgerJournalTrans::findJournalForVoucher(taxTrans.Voucher, taxTrans.TransDate);
                        if (ledgerJournalTrans_Voucher)
                        {
                            taxTrans_Reporting_Loc.LedgerJournalType = LedgerJournalType::PurchaseLedger;
                        }
                    }

                    if (taxTrans.SourceTableId == tableNum(VendTrans))
                    {
                        taxTrans_Reporting_Loc.VendTrans = taxTrans.SourceRecId;
                    }
                    else if ( taxTrans.SourceTableId == tableNum(LedgerJournalTrans))
                    {
                        taxTrans_Reporting_Loc.VendTrans = ledgerJournalTrans_SourceRecId.VendTransId;
                    }
                    else
                    {
                        taxTrans_Reporting_Loc.VendTrans = vendTrans.RecId;
                    }

                    TaxTransGlobalInitializer initializer = TaxTransGlobalInitializer::construct(taxTrans);
                    initializer.initTaxTrans_ReportingIsCreditNote(taxTrans_Reporting_Loc);

                    if (isTransactionReversalFlightEnabled)
                    {
                        initializer.initTaxTrans_ReportingIsTransactionReversal(taxTrans_Reporting_Loc);
                    }

                    insertList.add(taxTrans_Reporting_Loc);
                    numOfRecords++;
                }
                insertList.insertDatabase();

                Set linkedAlreadyUpdatedReversedOnSameDate = new Set(Types::Int64);

                while select taxTrans
                        where taxTrans.TransDate >= _fromDate
                    join forupdate taxTrans_Reporting
                        where taxTrans.RecId == taxTrans_Reporting.TaxTrans
                            && ((taxTrans_Reporting.IsOriginalDocumentCreditNote == UnknownNoYes::Unknown
                                || taxTrans_Reporting.IsTaxTransCreditNote == UnknownNoYes::Unknown)
                            || (isTransactionReversalFlightEnabled
                                && taxTrans_Reporting.IsTransactionReversal == UnknownNoYes::Unknown)
                            || (isTransactionReverseOnSameDateFlightEnabled
                                && taxTrans_Reporting.IsReversedOnSameDate == UnknownNoYes::Unknown))
                {
                    TaxTransGlobalInitializer initializer = TaxTransGlobalInitializer::construct(taxTrans);

                    if (taxTrans_Reporting.IsOriginalDocumentCreditNote == UnknownNoYes::Unknown
                            || taxTrans_Reporting.IsTaxTransCreditNote == UnknownNoYes::Unknown)
                    {
                        initializer.initTaxTrans_ReportingIsCreditNote(taxTrans_Reporting);
                    }

                    if (isTransactionReversalFlightEnabled && taxTrans_Reporting.IsTransactionReversal == UnknownNoYes::Unknown)
                    {
                        initializer.initTaxTrans_ReportingIsTransactionReversal(taxTrans_Reporting);
                    }
                    if (isTransactionReverseOnSameDateFlightEnabled
                        && !linkedAlreadyUpdatedReversedOnSameDate.in(taxTrans_Reporting.RecId))
                    {
                        linkedAlreadyUpdatedReversedOnSameDate.add(
                            initializer.initTaxTrans_ReportingIsReversedOnSameDate(taxTrans_Reporting));
                    }

                    taxTrans_Reporting.update();

                    numOfRecords++;
                }

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (tryCount < 3)
                {
                    tryCount++;
                    retry;
                }
                else
                {
                    throw Exception::Deadlock;
                }
            }
        }
        else
        {
            select count(SourceRecId) from taxTrans
                where taxTrans.TransDate >= _fromDate
            notexists join taxTrans_Reporting
                where taxTrans.RecId == taxTrans_Reporting.TaxTrans;

            numOfRecords = int642int(taxTrans.SourceRecId);

            select count(SourceRecId) from taxTrans
                    where taxTrans.TransDate >= _fromDate
                exists join taxTrans_Reporting
                    where taxTrans.RecId == taxTrans_Reporting.TaxTrans
                        && ((taxTrans_Reporting.IsOriginalDocumentCreditNote == UnknownNoYes::Unknown
                                || taxTrans_Reporting.IsTaxTransCreditNote == UnknownNoYes::Unknown)
                        || (isTransactionReversalFlightEnabled
                            && taxTrans_Reporting.IsTransactionReversal == UnknownNoYes::Unknown)
                        || (isTransactionReverseOnSameDateFlightEnabled
                            && taxTrans_Reporting.IsReversedOnSameDate == UnknownNoYes::Unknown));

                numOfRecords += int642int(taxTrans.SourceRecId);
            }

            return numOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFixRecordsFromVendInvoiceApproval</Name>
				<Source><![CDATA[
    private Counter processFixRecordsFromVendInvoiceApproval(CheckFix _checkFix, FromDate _fromDate)
    {
        Counter numOfRecords;
        TaxTrans taxTrans;
        TaxTrans_Reporting taxTrans_Reporting;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;
        VendInvoiceJour vendInvoiceJour;

        if (_checkFix == CheckFix::Fix)
        {
            int tryCount = 0;
            try
            {
                ttsbegin;
                while select taxTrans
                    where taxTrans.TransDate >= _fromDate
                        && taxTrans.SourceTableId == tableNum(LedgerJournalTrans)
                join forupdate taxTrans_Reporting
                    where taxTrans.RecId == taxTrans_Reporting.TaxTrans
                        && taxTrans_Reporting.IsOriginalDocumentCreditNote == UnknownNoYes::Yes
                exists join ledgerJournalTrans
                    where ledgerJournalTrans.RecId == taxTrans.SourceRecId
                exists join ledgerJournalTable
                    where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                        && ledgerJournalTable.JournalType == LedgerJournalType::Approval
                exists join vendInvoiceJour
                    where vendInvoiceJour.InvoiceAmount >= 0
                        && vendInvoiceJour.LedgerVoucher == ledgerJournalTrans.Voucher
                        && vendInvoiceJour.InvoiceDate == ledgerJournalTrans.TransDate
                {
                    TaxTransGlobalInitializer::construct(taxTrans).initTaxTrans_ReportingIsCreditNote(taxTrans_Reporting);
                    taxTrans_Reporting.update();

                    numOfRecords++;
                }
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (tryCount < 3)
                {
                    tryCount++;
                    retry;
                }
                else
                {
                    throw Exception::Deadlock;
                }
            }
        }
        else
        {
            select count(SourceRecId) from taxTrans
                where taxTrans.TransDate >= _fromDate
                    && taxTrans.SourceTableId == tableNum(LedgerJournalTrans)
            exists join taxTrans_Reporting
                where taxTrans_Reporting.TaxTrans == taxTrans.RecId
                    && taxTrans_Reporting.IsOriginalDocumentCreditNote == UnknownNoYes::Yes
            exists join ledgerJournalTrans
                where ledgerJournalTrans.RecId == taxTrans.SourceRecId
            exists join ledgerJournalTable
                where ledgerJournalTable.JournalNum == ledgerJournalTrans.JournalNum
                    && ledgerJournalTable.JournalType == LedgerJournalType::Approval
            exists join vendInvoiceJour
                where vendInvoiceJour.InvoiceAmount >= 0
                    && vendInvoiceJour.LedgerVoucher == ledgerJournalTrans.Voucher
                    && vendInvoiceJour.InvoiceDate == ledgerJournalTrans.TransDate;

            numOfRecords = int642int(taxTrans.SourceRecId);
        }

        return numOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFixRecordsFromProjInvoiceJournal</Name>
				<Source><![CDATA[
    private Counter processFixRecordsFromProjInvoiceJournal(CheckFix _checkFix, FromDate _fromDate)
    {
        Counter numOfRecords;
        TaxTrans taxTrans;
        TaxTrans_Reporting taxTrans_Reporting;
        ProjInvoiceJour projInvoiceJour;

        if (_checkFix == CheckFix::Fix)
        {
            int tryCount = 0;
            try
            {
                ttsbegin;
                while select taxTrans
                    where taxTrans.TransDate >= _fromDate
                        && taxTrans.HeadingTableId == tableNum(ProjInvoiceJour)
                        && (taxTrans.SourceTableId == tableNum(ProjInvoiceItem)
                        ||  taxTrans.SourceTableId == tableNum(ProjInvoiceEmpl)
                        ||  taxTrans.SourceTableId == tableNum(ProjInvoiceCost)
                        ||  taxTrans.SourceTableId == tableNum(ProjInvoiceRevenue)
                        ||  taxTrans.SourceTableId == tableNum(ProjInvoiceOnAcc))
                join forupdate taxTrans_Reporting
                    where taxTrans.RecId == taxTrans_Reporting.TaxTrans
                exists join projInvoiceJour
                    where projInvoiceJour.LedgerVoucher == taxTrans.Voucher
                        && projInvoiceJour.InvoiceDate == taxTrans.TransDate
                        && ((projInvoiceJour.InvoiceAmount >= 0 && taxTrans_Reporting.IsOriginalDocumentCreditNote == UnknownNoYes::Yes)
                         || (projInvoiceJour.InvoiceAmount < 0  && taxTrans_Reporting.IsOriginalDocumentCreditNote == UnknownNoYes::No))
                {
                    TaxTransGlobalInitializer::construct(taxTrans).initTaxTrans_ReportingIsCreditNote(taxTrans_Reporting);
                    taxTrans_Reporting.update();

                    numOfRecords++;
                }
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (tryCount < 3)
                {
                    tryCount++;
                    retry;
                }
                else
                {
                    throw Exception::Deadlock;
                }
            }
        }
        else
        {
            select count(SourceRecId) from taxTrans
                where taxTrans.TransDate >= _fromDate
                    && taxTrans.HeadingTableId == tableNum(ProjInvoiceJour)
                    && (taxTrans.SourceTableId == tableNum(ProjInvoiceItem)
                    ||  taxTrans.SourceTableId == tableNum(ProjInvoiceEmpl)
                    ||  taxTrans.SourceTableId == tableNum(ProjInvoiceCost)
                    ||  taxTrans.SourceTableId == tableNum(ProjInvoiceRevenue)
                    ||  taxTrans.SourceTableId == tableNum(ProjInvoiceOnAcc))
            join RecId from taxTrans_Reporting
                where taxTrans_Reporting.TaxTrans == taxTrans.RecId
            exists join projInvoiceJour
                where projInvoiceJour.LedgerVoucher == taxTrans.Voucher
                    && projInvoiceJour.InvoiceDate == taxTrans.TransDate
                    && ((projInvoiceJour.InvoiceAmount >= 0 && taxTrans_Reporting.IsOriginalDocumentCreditNote == UnknownNoYes::Yes)
                      || (projInvoiceJour.InvoiceAmount < 0  && taxTrans_Reporting.IsOriginalDocumentCreditNote == UnknownNoYes::No));

            numOfRecords = int642int(taxTrans.SourceRecId);
        }

        return numOfRecords;
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the id of the parent class.
    /// </summary>
    /// <returns>The class id of the parent class.</returns>
    public ClassId treeParentClassId()
    {
        return classNum(TaxConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TaxTrans_ReportingConsistencyCheck construct()
    {
        return new TaxTrans_ReportingConsistencyCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@TaxTrans_ReportingConsistencyCheck:Name";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return "@TaxTrans_ReportingConsistencyCheck:Description";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>