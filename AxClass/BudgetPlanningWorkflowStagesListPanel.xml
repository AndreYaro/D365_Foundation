<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanningWorkflowStagesListPanel</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanningWorkflowStagesListPanel</c> class manages a list panel control to select the budget planning stage.
/// </summary>
class BudgetPlanningWorkflowStagesListPanel extends SysListPanel
{
    BudgetPlanningWorkflow budgetPlanningWorkflow;
    AccessRight            accessRight;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>BudgetPlanningWorkflowStage</c> record for the current budget planning stage.
    /// </summary>
    /// <param name="_data">
    /// The item that was added to the list of budget plan stage.
    /// </param>
    public void addData(container _data)
    {
        if (budgetPlanningWorkflow)
        {
            BudgetPlanningWorkflowStage budgetPlanningWorkflowStage;
            BudgetPlanningWorkflowStage budgetPlanningWorkflowStageLocal;
            BudgetPlanningWorkflowStageRecId lastRecId;
            Counter i;

            ttsbegin;

            select RecId from budgetPlanningWorkflowStage
                where budgetPlanningWorkflowStage.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId
                notexists join budgetPlanningWorkflowStageLocal
                    where budgetPlanningWorkflowStageLocal.PriorBudgetPlanningWorkflowStage == budgetPlanningWorkflowStage.RecId;

            lastRecId = budgetPlanningWorkflowStage.RecId;

            for (i = 1; i <= conLen(_data); i++)
            {
                budgetPlanningWorkflowStage.clear();
                budgetPlanningWorkflowStage.BudgetPlanningStage = conPeek(_data, i);
                budgetPlanningWorkflowStage.BudgetPlanningWorkflow = budgetPlanningWorkflow.RecId;
                budgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage = lastRecId;
                budgetPlanningWorkflowStage.insert();

                lastRecId = budgetPlanningWorkflowStage.RecId;
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>ListPanel</c> design.
    /// </summary>
    public void build()
    {
        // Enable the move up and move down buttons for other events.
        this.parmHasUpDownButton(true);

        super();

        if (accessRight == AccessRight::View)
        {
            // Set the access right for the button controls.
            separatorBuildGroupControl.neededPermission(accessRight2NeededPermission(accessRight));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the items for the Selected and Remaining lists of the list panel.
    /// </summary>
    /// <returns>
    /// A container that contains the items to add to both the Selected and Remaining lists of the list panel.
    /// </returns>
    public container getData()
    {
        container selectedData, remainingData;

        // Populate the list of priorities that are currently selected for the stage.
        selectedData = BudgetPlanningWorkflowStagesListPanel::getSelectedBudgetPlanningStageList(budgetPlanningWorkflow.RecId);

        // Populate the list of priorities that are available to be selected for the stage.
        remainingData = BudgetPlanningWorkflowStagesListPanel::getRemainingBudgetPlanningStageList(budgetPlanningWorkflow.RecId);

        return [remainingData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Selected budget planning workflow stages.
    /// </summary>
    /// <returns>
    /// A container that contains the selected workflow stages on the Selected list of the list panel.
    /// </returns>
    private container getSelected()
    {
        FormListItem    formListItem;
        container       budgetPlanningWorkflowStages;
        int             idx;

        idx = viewSelected.getNextItem(FormListNext::Selected);

        while (idx != -1)
        {
            formListItem = viewSelected.getItem(idx);
            budgetPlanningWorkflowStages += formListItem.data();
            idx = viewSelected.getNextItem(FormListNext::Selected, idx);
        }
        return budgetPlanningWorkflowStages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveDown_Selected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves down the selected budget planning stage in the selected planning stages in the Selected list
    /// panel.
    /// </summary>
    protected void moveDown_Selected()
    {
        container   budgetPlanningWorkflowStages;
        Counter     counter;

        if (this.validateBudgetPlanningStage())
        {
            super();

            budgetPlanningWorkflowStages = this.getSelected();
            for (counter = conLen(budgetPlanningWorkflowStages); counter >= 1; counter--)
            {
                this.moveToNextStage(conPeek(budgetPlanningWorkflowStages, counter));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToNextStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the selected <c>BudgetPlanningWorkflowStage</c> record to the next stage of budget planning workflow.
    /// </summary>
    /// <param name="_budgetPlanningStageRecId">
    /// The record ID of the budget planning stage record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void moveToNextStage(BudgetPlanningStageRecId _budgetPlanningStageRecId)
    {
        BudgetPlanningWorkflowStage         currentBudgetPlanningWorkflowStage;
        BudgetPlanningWorkflowStage         afterBudgetPlanningWorkflowStage;
        BudgetPlanningWorkflowStage         afterBudgetPlanningWorkflowStage2;

        ttsbegin;
        select firstonly forupdate currentBudgetPlanningWorkflowStage
            where currentBudgetPlanningWorkflowStage.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId
                && currentBudgetPlanningWorkflowStage.BudgetPlanningStage == _budgetPlanningStageRecId;

        select firstonly forupdate afterBudgetPlanningWorkflowStage
            where afterBudgetPlanningWorkflowStage.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId
                && afterBudgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage == currentBudgetPlanningWorkflowStage.RecId;

        select firstonly forupdate afterBudgetPlanningWorkflowStage2
            where afterBudgetPlanningWorkflowStage2.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId
                && afterBudgetPlanningWorkflowStage2.PriorBudgetPlanningWorkflowStage == afterBudgetPlanningWorkflowStage.RecId;

        if (afterBudgetPlanningWorkflowStage2)
        {
            afterBudgetPlanningWorkflowStage2.PriorBudgetPlanningWorkflowStage = afterBudgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage;
            afterBudgetPlanningWorkflowStage2.update();
        }

        if (afterBudgetPlanningWorkflowStage && currentBudgetPlanningWorkflowStage)
        {
            afterBudgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage = currentBudgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage;
            currentBudgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage = afterBudgetPlanningWorkflowStage.RecId;
            afterBudgetPlanningWorkflowStage.update();
            currentBudgetPlanningWorkflowStage.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveToPreviousStage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the selected <c>BudgetPlanningWorkflowStage</c> record to the previous stage of budget planning workflow.
    /// </summary>
    /// <param name="_budgetPlanningStageRecId">
    /// The record ID of the budget planning stage record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void moveToPreviousStage(BudgetPlanningStageRecId _budgetPlanningStageRecId)
    {
        BudgetPlanningWorkflowStage         currentBudgetPlanningWorkflowStage;
        BudgetPlanningWorkflowStage         afterBudgetPlanningWorkflowStage;
        BudgetPlanningWorkflowStage         previousBudgetPlanningWorkflowStage;

        ttsbegin;
        select firstonly forupdate currentBudgetPlanningWorkflowStage
            where currentBudgetPlanningWorkflowStage.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId
                && currentBudgetPlanningWorkflowStage.BudgetPlanningStage == _budgetPlanningStageRecId;

        select firstonly forupdate previousBudgetPlanningWorkflowStage
            where previousBudgetPlanningWorkflowStage.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId
                && previousBudgetPlanningWorkflowStage.RecId == currentBudgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage;

        select firstonly forupdate afterBudgetPlanningWorkflowStage
            where afterBudgetPlanningWorkflowStage.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId
                && afterBudgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage == currentBudgetPlanningWorkflowStage.RecId;

        if (afterBudgetPlanningWorkflowStage)
        {
            afterBudgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage = previousBudgetPlanningWorkflowStage.RecId;
            afterBudgetPlanningWorkflowStage.update();
        }

        if (previousBudgetPlanningWorkflowStage && currentBudgetPlanningWorkflowStage)
        {
            currentBudgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage = previousBudgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage;
            previousBudgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage = currentBudgetPlanningWorkflowStage.RecId;
            previousBudgetPlanningWorkflowStage.update();
            currentBudgetPlanningWorkflowStage.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveUp_Selected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves up the selected budget planning stage in the selected planning stages in the Selected list panel.
    /// </summary>
    protected void moveUp_Selected()
    {
        container   budgetPlanningWorkflowStages;
        Counter     counter;

        if (this.validateBudgetPlanningStage())
        {
            super();

            budgetPlanningWorkflowStages = this.getSelected();
            for (counter = 1; counter <= conLen(budgetPlanningWorkflowStages); counter++)
            {
                this.moveToPreviousStage(conPeek(budgetPlanningWorkflowStages, counter));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(AccessRight _accessRight)
    {
        super();

        accessRight = _accessRight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the <c>BudgetPlanningWorkflowStage</c> record of the current budget plan stage.
    /// </summary>
    /// <param name="_data">
    /// The item that was removed from the list of budget plan stage.
    /// </param>
    public void removeData(container _data)
    {
        Counter i;
        BudgetPlanningStageRecId budgetPlanningStageRecId;
        BudgetPlanningWorkflowStage budgetPlanningWorkflowStage;
        BudgetPlanningWorkflowStage budgetPlanningWorkflowStageChild;

        if (budgetPlanningWorkflow)
        {
            for (i = 1; i <= conLen(_data); i++)
            {
                budgetPlanningStageRecId = conPeek(_data, i);

                ttsbegin;

                select firstonly forupdate PriorBudgetPlanningWorkflowStage from budgetPlanningWorkflowStage
                    where budgetPlanningWorkflowStage.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId
                        && budgetPlanningWorkflowStage.BudgetPlanningStage == budgetPlanningStageRecId;

                select firstonly forupdate budgetPlanningWorkflowStageChild
                    where budgetPlanningWorkflowStageChild.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId
                        && budgetPlanningWorkflowStageChild.PriorBudgetPlanningWorkflowStage == budgetPlanningWorkflowStage.RecId;

                if (budgetPlanningWorkflowStageChild.RecId)
                {
                    budgetPlanningWorkflowStageChild.PriorBudgetPlanningWorkflowStage = budgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage;
                    budgetPlanningWorkflowStageChild.update();
                }

                budgetPlanningWorkflowStage.delete();

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanningWorkflow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the budget planning workflow reference for the list panel.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The record ID of the budget planning workflow record.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setBudgetPlanningWorkflow(BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId)
    {
        budgetPlanningWorkflow = BudgetPlanningWorkflow::find(_budgetPlanningWorkflowRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to sort the records in the list panel or not.
    /// </summary>
    /// <returns>
    /// The sorted list panel.
    /// </returns>
    protected FormListSort sortMethod()
    {
        return FormListSort::NoSort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the selected item can be removed from or added to the list.
    /// </summary>
    /// <param name="_data">
    /// The selected item in the panel list.
    /// </param>
    /// <param name="_addRemove">
    /// Specifies whether the selected item is being removed or added.
    /// </param>
    /// <returns>
    /// true if the selected item can be removed or added; otherwise, false.
    /// </returns>
    public boolean validate(anytype _data, AddRemove _addRemove)
    {
        boolean isValid;

        isValid = super(_data, _addRemove);

        if (isValid)
        {
            isValid = isValid && this.validateBudgetPlanningStage();
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBudgetPlanningStage</Name>
				<Source><![CDATA[
    private boolean validateBudgetPlanningStage()
    {
        boolean                             isValid = true;
        BudgetPlanningProcess               budgetPlanningProcess;
        BudgetPlanningProcessAdministration budgetPlanningProcessAdministration;

        select firstonly RecId, ApprovalProcessState from budgetPlanningProcess
                where budgetPlanningProcess.ApprovalProcessState == BudgetPlanningApprovalProcessState::InProcess
                    join BudgetPlanningProcess, BudgetPlanningWorkflow from budgetPlanningProcessAdministration
                            where budgetPlanningProcessAdministration.BudgetPlanningProcess == budgetPlanningProcess.RecId
                            && budgetPlanningProcessAdministration.BudgetPlanningWorkflow == budgetPlanningWorkflow.RecId;

        if (budgetPlanningProcess.RecId)
        {
            isValid = checkFailed(
                strFmt("@GLS70641",
                BudgetPlanningWorkflowTranslation::getLocalizedName(
                    budgetPlanningWorkflow.RecId
                    )));
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>BudgetPlanningWorkflowStagesListPanel</c> class.
    /// </summary>
    /// <param name="_accessRight">
    /// The button controls to be set to.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetPlanningWorkflowStagesListPanel</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BudgetPlanningWorkflowStagesListPanel construct(AccessRight _accessRight = AccessRight::View)
    {
        return new BudgetPlanningWorkflowStagesListPanel(_accessRight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRemainingBudgetPlanningStageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the items for the Remaining list of the list panel.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The ID of the <c>BudgetPlanningWorkflow</c> record.
    /// </param>
    /// <returns>
    /// A container that contains the items to add to Remaining list of the list panel.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getRemainingBudgetPlanningStageList(BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId)
    {
        BudgetPlanningStage         budgetPlanningStage;
        BudgetPlanningWorkflowStage budgetPlanningWorkflowStage;
        container                   priorityContainer;

        while select RecId, Name from budgetPlanningStage
            order by Name
            notexists join budgetPlanningWorkflowStage
                where budgetPlanningWorkflowStage.BudgetPlanningStage == budgetPlanningStage.RecId
                && budgetPlanningWorkflowStage.BudgetPlanningWorkflow == _budgetPlanningWorkflowRecId
        {
            priorityContainer += [[budgetPlanningStage.RecId, budgetPlanningStage.Name]];
        }

        return priorityContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedBudgetPlanningStageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the items of the Selected list of the list panel.
    /// </summary>
    /// <param name="_budgetPlanningWorkflowRecId">
    /// The ID of the <c>BudgetPlanningWorkflow</c> record.
    /// </param>
    /// <returns>
    /// A container that contains the items to add to the Selected list of the list panel.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container getSelectedBudgetPlanningStageList(BudgetPlanningWorkflowRecId _budgetPlanningWorkflowRecId)
    {
        BudgetPlanningStage                 budgetPlanningStage;
        BudgetPlanningWorkflowStage         budgetPlanningWorkflowStage;
        container                           priorityContainer;
        BudgetPlanningWorkflowStageRecId    budgetPlanningWorkflowStageRecId;

        do
        {
            select firstonly BudgetPlanningStage, BudgetPlanningWorkflow from budgetPlanningWorkflowStage
                exists join budgetPlanningStage
                    where budgetPlanningWorkflowStage.BudgetPlanningStage == budgetPlanningStage.RecId
                        && budgetPlanningWorkflowStage.BudgetPlanningWorkflow == _budgetPlanningWorkflowRecId
                        && budgetPlanningWorkflowStage.PriorBudgetPlanningWorkflowStage == budgetPlanningWorkflowStageRecId;

            budgetPlanningWorkflowStageRecId = budgetPlanningWorkflowStage.RecId;
            if (budgetPlanningWorkflowStageRecId)
            {
                priorityContainer += [[
                    budgetPlanningWorkflowStage.BudgetPlanningStage,
                    BudgetPlanningStage::find(budgetPlanningWorkflowStage.BudgetPlanningStage).Name
                    ]];
            }
        }
        while (budgetPlanningWorkflowStageRecId);

        return priorityContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes a new instance of the <c>BudgetPlanningWorkflowStagesListPanel</c> class.
    /// </summary>
    /// <param name="_formRun">
    /// The form that contains the list panel controls.
    /// </param>
    /// <param name="_parentId">
    /// The form control that contains the list panel controls.
    /// </param>
    /// <param name="_accessRight">
    /// The button controls to be set to.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetPlanningWorkflowStagesListPanel</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static BudgetPlanningWorkflowStagesListPanel newForm(FormRun _formRun, int _parentId, AccessRight _accessRight)
    {
        BudgetPlanningWorkflowStagesListPanel listPanel = BudgetPlanningWorkflowStagesListPanel::construct(_accessRight);

        listPanel.parmFormRun(_formRun);
        listPanel.parmParentId(_parentId);
        listPanel.parmCaptionSelected("@GLS70642");
        listPanel.parmCaptionAvailable("@GLS70643");
        listPanel.build();

        return listPanel;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>