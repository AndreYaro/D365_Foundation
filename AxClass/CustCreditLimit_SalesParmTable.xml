<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCreditLimit_SalesParmTable</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustCreditLimit_SalesParmTable</c> class calculates the value of the current order against
///    the credit limit, using <c>SalesParmTable</c> as a parameter.
/// </summary>
/// <remarks>
///    This class takes <c>SalesParmTable</c> as a parameter and uses this to calculate the value of the
///    current order against the credit limit. This is necessary because packing slips and invoices can be
///    part of a sales order, that is partial delivery, or can contain lines from other sales orders, that
///    is summary updates.This instance is used when checking credit limit excess when posting packing
///    slips and invoices.
/// </remarks>
class CustCreditLimit_SalesParmTable extends CustCreditLimit_SalesTable
{
    SalesParmTable  salesParmTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>balanceDelivered</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the amount of an outstanding packing slip that has not yet been invoiced.
    /// </summary>
    /// <param name="_balanceDelivered">
    ///    An open sales order amount; optional.
    /// </param>
    /// <returns>
    ///    The amount of an outstanding packing slip that has not yet been invoiced.
    /// </returns>
    /// <remarks>
    ///    If possible, the method will use the stored sales totals in the <c>SalesTable.Estimate</c> field.
    ///    If that field does not store the correct amount, that is specified by the
    ///    <c>CustParameters.CreditMaxCheck</c> field, the total will be calculated by calculating all the
    ///    applicable sales orders individually. This takes a much longer time than by using the
    ///    <c>SalesTable.Estimate</c> field.
    /// </remarks>
    AmountMST balanceDelivered(AmountMST _balanceDelivered = 0)
    {
        AmountMST       localBalanceDelivered;
        SalesLine       localSalesLine;
        QueryRun        queryRun;
        
        boolean addCurrentOrder = !balanceDeliveredCalculated;

        if (prmisdefault(_balanceDelivered))
        {
            localBalanceDelivered = super();
        }
        else
        {
            localBalanceDelivered = super(_balanceDelivered);
        }        

        if (addCurrentOrder)
        {
            //We need to add the already delivered amounts from the current sales order.
            //Otherwise, the credit limit is exceeded when sales order posting is split on site/delivery adr.

            queryRun = this.queryRunOrigOrder();
            while (queryRun.next())
            {
                if (queryRun.changed(tablenum(SalesLine)))
                {
                    localSalesLine = queryRun.get(tablenum(SalesLine));
                    localSalesLine.SalesQty = localSalesLine.RemainSalesFinancial;
                    localBalanceDelivered += CurrencyExchangeHelper::mstAmount(localSalesLine.calcLineAmount(), localSalesLine.CurrencyCode);
                }
            }
        }

        return localBalanceDelivered;
    }

]]></Source>
			</Method>
			<Method>
				<Name>balanceNotInvoiced</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the amount of open sales orders, including the delivered, that is packing slip updated,
    ///    amounts.
    /// </summary>
    /// <param name="_balanceNotInvoiced">
    ///    An open sales order amount; optional.
    /// </param>
    /// <returns>
    ///    The amount of open sales orders including delivered amounts.
    /// </returns>
    /// <remarks>
    ///    If possible, the method will use the stored sales totals in the <c>SalesTable.Estimate</c> field.
    ///    If that field does not store the correct amount, as specified by the
    ///    <c>CustParameters.CreditMaxCheck</c> field, the total will be calculated by calculating all the
    ///    applicable sales orders individually. This takes a much longer time than using the
    ///    <c>SalesTable.Estimate</c> field.
    /// </remarks>
    public AmountMST balanceNotInvoiced(AmountMST _balanceNotInvoiced = 0)
    {
        AmountMST       localBalanceNotInvoiced;
        AmountMST       localBalaceBeforeEndDisc;
        SalesLine       localSalesLine;
        QueryRun        queryRun;
        Qty             pickedQty;

        boolean         addCurrentOrder = !balanceNotInvoicedCalculated;

        if (prmisdefault(_balanceNotInvoiced))
        {
            localBalanceNotInvoiced = super();
        }
        else
        {
            localBalanceNotInvoiced = super(_balanceNotInvoiced);
        }

        if (addCurrentOrder)
        {
            //We need to add the already picked and delivered amounts from the current sales order.
            //Otherwise, the credit limit is exceeded when sales order posting is split on site/delivery adr.

            queryRun = this.queryRunOrigOrder();
            while (queryRun.next())
            {
                if (queryRun.changed(tablenum(SalesLine)))
                {
                    localSalesLine = queryRun.get(tablenum(SalesLine));
                    if (salesParmTable.Ordering == DocumentStatus::PickingList)
                    {
                        pickedQty = localSalesLine.pickedInTotalSalesUnit();
                    }
                    else
                    {
                        pickedQty = 0;
                    }
                    localSalesLine.SalesQty = pickedQty + localSalesLine.RemainSalesFinancial;
                    localBalaceBeforeEndDisc = localSalesLine.calcLineAmount();

                    if (localSalesLine.salesTable().DiscPercent && localSalesLine.endDisc())
                    {
                        localBalaceBeforeEndDisc -= localBalaceBeforeEndDisc * localSalesLine.salesTable().DiscPercent / 100;
                    }

                    localBalanceNotInvoiced += CurrencyExchangeHelper::mstAmount(localBalaceBeforeEndDisc, localSalesLine.CurrencyCode);
                }
            }
        }

        return localBalanceNotInvoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the variables of the class.
    /// </summary>
    /// <remarks>
    ///    When the class is instantiated, the <c>new</c> method will automatically be run all the way from
    ///    the instantiated class up to the parent class. This may not be convenient, as the child class may
    ///    not want to have the parent class initialization run. The <c>init</c> method is only called one
    ///    time.
    /// </remarks>
    void init()
    {
        super();

        SalesParmUpdate         salesParmUpdate = salesParmTable.salesParmUpdate();

        if (!salesTotals)
        {
            this.salesTotals(SalesTotals::construct(salesParmTable, SalesUpdate::All, AccountOrder::None, salesParmTable.ParmId, '', salesParmUpdate.DocumentStatus));
        }

        this.typeOfCreditMaxCheck(salesParmUpdate.CheckCreditMax);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected Query initQuery(SalesId _excludeSalesId = '')
    {
        SalesParmSubTable       salesParmSubTable;
        QueryBuildDataSource    qbdsSalesTable;
        QueryBuildDataSource    qbdsSalesLine;
        QueryBuildDataSource    qbdsSalesParmTable;
        QueryBuildDataSource    qbdsSalesParmSubTable;
        Query                   query;

        query          = new Query();
        qbdsSalesTable = query.addDataSource(tableNum(SalesTable));
        qbdsSalesTable.addRange(fieldNum(SalesTable,InvoiceAccount)).value(queryValue(custTable.AccountNum));
        qbdsSalesTable.addRange(fieldNum(SalesTable,SalesStatus)).value(queryValue(SalesStatus::None));
        qbdsSalesTable.addRange(fieldNum(SalesTable,SalesStatus)).value(queryValue(SalesStatus::Backorder));
        qbdsSalesTable.addRange(fieldNum(SalesTable,SalesStatus)).value(queryValue(SalesStatus::Delivered));
        qbdsSalesTable.addRange(fieldNum(SalesTable,SalesType)).value(queryRangeConcat(queryRangeConcat(queryValue(SalesType::Subscription), SalesType::Sales), SalesType::ReturnItem));

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            this.addAgreementCondition_RU(qbdsSalesTable);
        }
        // </GEERU>

        if (this.useEstimated())
        {
            qbdsSalesTable.fields().addField(fieldNum(SalesTable,Estimate),SelectionField::Sum);
        }

        if (RetailMCRChannelTable::mcrEnableOrderCompletionFindByUser())
        {
            qbdsSalesTable.addRange(fieldNum(SalesTable,MCROrderStopped )).value(queryValue(NoYes::No));
        }

        switch (typeOfCreditmaxCheck)
        {
            case TypeOfCreditmaxCheck::BalanceAll:
                //For BalanceAll/BalanceDelivered current order or summarized orders must be excluded as their totalAmount/s is already a part of orderBalance
            case TypeOfCreditmaxCheck::BalanceDelivered:
                //For BalanceDelivered additionally consider only orders that have delivered quantity

                select firstonly salesParmSubTable
                    where salesParmSubTable.ParmId     == salesParmTable.ParmId &&
                          salesParmSubTable.TableRefId == salesParmTable.TableRefId;

                if (salesParmSubTable.RecId)
                {
                    qbdsSalesParmSubTable = qbdsSalesTable.addDataSource(tableNum(SalesParmSubTable));
                    qbdsSalesParmSubTable.addRange(fieldNum(SalesParmSubTable,ParmId)).value(queryValue(salesParmTable.ParmId));
                    qbdsSalesParmSubTable.addRange(fieldNum(SalesParmSubTable,TableRefId)).value(queryValue(salesParmTable.TableRefId));
                    qbdsSalesParmSubTable.relations(true);
                    qbdsSalesParmSubTable.joinMode(JoinMode::NoExistsJoin);
                }
                else
                {
                    qbdsSalesParmTable = qbdsSalesTable.addDataSource(tableNum(SalesParmTable));
                    qbdsSalesParmTable.addRange(fieldNum(SalesParmTable,ParmId)).value(queryValue(salesParmTable.ParmId));
                    qbdsSalesParmTable.addRange(fieldNum(SalesParmTable,TableRefId)).value(queryValue(salesParmTable.TableRefId));
                    qbdsSalesParmTable.joinMode(JoinMode::NoExistsJoin);
                    qbdsSalesParmTable.addLink(fieldNum(SalesTable,SalesId),fieldNum(SalesParmTable,SalesId));
                }

                if (typeOfCreditmaxCheck == TypeOfCreditmaxCheck::BalanceDelivered)
                {
                    qbdsSalesLine = qbdsSalesTable.addDataSource(tableNum(SalesLine));
                    qbdsSalesLine.relations(true);
                    qbdsSalesLine.joinMode(JoinMode::ExistsJoin);
                    qbdsSalesLine.addRange(fieldNum(SalesLine,RemainSalesFinancial)).value(SysQuery::valueNot(0));
                }
            break;
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryOrigOrder</Name>
				<Source><![CDATA[
    protected Query initQueryOrigOrder()
    {
        Query                   query;
        QueryBuildDataSource    qbdsSalesLine;
        QueryBuildDataSource    qbdsSalesParmLine;
        QueryBuildDataSource    qbdsSalesParmSubTable;

        query                 = new Query();
        qbdsSalesParmSubTable = query.addDataSource(tablenum(SalesParmSubTable));
        qbdsSalesParmSubTable.addRange(fieldnum(SalesParmSubTable,ParmId)).value(queryValue(SalesParmTable.ParmId));
        qbdsSalesParmSubTable.addRange(fieldnum(SalesParmSubTable,TableRefId)).value(queryValue(SalesParmTable.TableRefId));

        qbdsSalesLine  = qbdsSalesParmSubTable.addDataSource(tablenum(SalesLine));
        qbdsSalesLine.addRange(fieldnum(SalesLine,SalesStatus)).value(queryValue(SalesStatus::None));
        qbdsSalesLine.addRange(fieldnum(SalesLine,SalesStatus)).value(queryValue(SalesStatus::Backorder));
        qbdsSalesLine.addRange(fieldnum(SalesLine,SalesStatus)).value(queryValue(SalesStatus::Delivered));
        qbdsSalesLine.joinMode(JoinMode::InnerJoin);
        qbdsSalesLine.addLink(fieldnum(SalesParmSubTable,OrigSalesId),fieldnum(SalesLine,SalesId));
        qbdsSalesLine.addOrderByField(fieldNum(SalesLine, RecId));

        if (typeOfCreditmaxCheck == TypeOfCreditmaxCheck::BalanceDelivered)
        {
            qbdsSalesLine.addRange(fieldnum(SalesLine,RemainSalesFinancial)).value(SysQuery::valueNot(0));
        }

        switch (salesParmTable.Ordering)
        {
            case DocumentStatus::PackingSlip,
                 DocumentStatus::PickingList,
                 DocumentStatus::Confirmation:
                break;

            default:
                qbdsSalesParmLine = qbdsSalesLine.addDataSource(tablenum(SalesParmLine));
                qbdsSalesParmLine.joinMode(JoinMode::NoExistsJoin);
                qbdsSalesParmLine.addLink(fieldNum(SalesParmSubTable,ParmId),fieldNum(SalesParmLine,ParmId),qbdsSalesParmSubTable.name());
                qbdsSalesParmLine.addLink(fieldnum(SalesParmSubTable,TableRefId),fieldNum(SalesParmLine,TableRefId),qbdsSalesParmSubTable.name());
                qbdsSalesParmLine.addLink(fieldnum(SalesLine,RecId),fieldNum(SalesParmLine,SalesLineRecId));
                break;
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(SalesParmTable _salesParmTable, SalesTotals _salesTotals)
    {
        salesParmTable  = _salesParmTable;
        super(salesParmTable.salesTable(),_salesTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRunOrigOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>QueryRun</c> object based on original order query.
    /// </summary>
    /// <returns>
    /// A <c>QueryRun</c> object.
    /// </returns>
    protected QueryRun queryRunOrigOrder()
    {
        return new QueryRun(this.initQueryOrigOrder());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>