<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>smmEwsFolder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>smmEwsFolder</c> represents an exchange folder.
/// Translates the folder information from exchange server to Ax.
/// </summary>
class SmmEwsFolder implements smmIFolder
{
    #smmMSOutlook2002ObjectModelConstants

    Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder     folder;
    smmEwsConnection                                                connection;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createAppointment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>smmAppointment</c> instance for a new appointment.
    /// </summary>
    /// <returns>
    /// The <c>smmAppointment</c> created.
    /// </returns>
    public smmIAppointment createAppointment()
    {
        smmEwsAppointment appointment;

        appointment = connection.createAppointment();
        appointment.parmFolder(folder);

        return appointment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContact</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>smmEwsContact</c>.
    /// </summary>
    /// <returns>
    /// The contact created.
    /// </returns>
    /// <remarks>
    /// The contact is created locally and will not exist in exchange until saved.
    /// </remarks>
    public smmIContact createContact()
    {
        smmEwsContact contact;

        contact = connection.createContact();
        contact.parmFolder(folder);

        return contact;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>smmOutlookTask</c> instance for a new task.
    /// </summary>
    /// <returns>
    /// The <c>smmOutlookTask</c> created.
    /// </returns>
    /// <remarks>
    /// The task is created locally and will not exist in exchange until saved.
    /// </remarks>
    public smmITask createTask()
    {
        smmEwsTask task;

        task = connection.createTask();
        task.parmFolder(folder);

        return task;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the default item type for the folder.
    /// </summary>
    /// <returns>
    /// Returns a constant from the OlItemType enumeration indicating the default Outlook item type contained in the folder.
    /// </returns>
    public int defaultItemType()
    {
        str folderType = folder.defaultItemType();
        int ret;

        switch (folderType)
        {
            case #ewsContactType :
                ret = #olContactItem;
                break;

            case #ewsTaskType :
                ret = #olTaskItem;
                break;

            case #ewsAppointmentType :
                ret = #olAppointmentItem;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Display name of the folder.
    /// </summary>
    /// <returns>
    /// Display name of the folder.
    /// </returns>
    public str displayName()
    {
        return folder.displayName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>entryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the folder's outlook entry id.
    /// </summary>
    /// <returns>
    /// The outlook entry id for the folder or empty string if it couldn't be retrieved.
    /// </returns>
    /// <remarks>
    /// Results in a call to the exchange server.
    /// </remarks>
    public str entryId()
    {
        str ret;

        ret = connection.translateExchangeId(this.exchangeEntryId());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchangeEntryId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the folder's exchange id.
    /// </summary>
    /// <returns>
    /// A string containing the folder's exchange id.
    /// </returns>
    /// <remarks>
    /// Only for use between exchange classes, the syncronization uses outlook ids.
    /// Used in contact.save() to avoid translating id to outlook and back
    /// (would result in two unnecessary http calls).
    /// </remarks>
    public str exchangeEntryId()
    {
        str ret;

        ret = folder.entryId();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllAppointments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the appointments between the start and end dates provided.
    /// </summary>
    /// <param name="_start">
    /// The start date and time.
    /// </param>
    /// <param name="_end">
    /// The end date and time.
    /// </param>
    /// <param name="_outlookTimeZone">
    /// The outlook timezone.
    /// </param>
    /// <param name="_includeRecurrences">
    /// True if it should include occurrences of recurring appointments; otherwise, false.
    /// </param>
    /// <returns>
    /// A list of <c>smmEwsAppointment</c>.
    /// </returns>
    public List getAllAppointments(TransDateTime _start, TransDateTime _end, Timezone _outlookTimeZone, boolean _includeRecurrences)
    {
        return connection.getAllAppointments(this.folder, _start, _end, _includeRecurrences);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllContacts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the contacts with the name properties loaded.
    /// </summary>
    /// <returns>
    /// A list of all the <c>smmEwsContact</c> in this folder.
    /// </returns>
    /// <remarks>
    /// It may make several calls to the exchange server in order to get all the contacts.
    /// All the contacts in the list have the firstName, lastName and entryId properties loaded,
    /// but should use load() before checking on other fields!
    /// </remarks>
    public List getAllContacts()
    {
        return connection.getAllContacts(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllTasks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the tasks from the folder.
    /// </summary>
    /// <returns>
    /// A list of <c>smmEwsTask</c> containing all the tasks in the folder.
    /// </returns>
    /// <remarks>
    /// May make several calls to the exchange server in order to get all the tasks.
    /// </remarks>
    public List getAllTasks()
    {
        return connection.getAllTasks(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllTasksSinceLastSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the tasks updated or completed since the last synchronization.
    /// </summary>
    /// <param name="lastSyncDateTime">
    /// The datetime of the last synchronization.
    /// </param>
    /// <param name="outlookTimeZone">
    /// The timezone the exchange server is on.
    /// </param>
    /// <returns>
    /// A list of <c>smmIOutlookTask</c>.
    /// </returns>
    public List getAllTasksSinceLastSync(TransDateTime lastSyncDateTime, Timezone outlookTimeZone)
    {
        return connection.getAllTasksSinceLastSync(this, lastSyncDateTime, outlookTimeZone);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeletedFolder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if this folder is a subfolder of the delete folder.
    /// </summary>
    /// <returns>
    /// True if this folder is a subfolder of the delete folder (or the delete folder itself);
    /// otherwise, false.
    /// </returns>
    public boolean isDeletedFolder()
    {
        return folder.isDeleteFolder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of smmEWSFolder.
    /// </summary>
    /// <param name="_folder">
    /// The IntegrationFolder from the exchange dll that this class will wrap.
    /// </param>
    /// <param name="_connection">
    /// The <c>smmEwsConnection</c>, used to translate ids and create contacts.
    /// </param>
    public void new(Microsoft.Dynamics.AX.ExchangeIntegration.IntegrationFolder _folder, smmEwsConnection _connection)
    {
        folder = _folder;
        connection = _connection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>storeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parent folder id of the folder.
    /// </summary>
    /// <returns>
    /// Parent folder id of the folder.
    /// </returns>
    public str storeId()
    {
        return folder.parentFolderId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>