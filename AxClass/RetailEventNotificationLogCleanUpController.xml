<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEventNotificationLogCleanUpController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A controller class for the service RetailEventNotificationCleanUpService
/// </summary>
internal final class RetailEventNotificationLogCleanUpController extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initContract</Name>
				<Source><![CDATA[
    private void initContract()
    {
        DictMethod dictMethod = new SysDictMethod(UtilElementType::ClassInstanceMethod, className2Id(this.parmClassName()), this.parmMethodName());
        str dataContractKey = dictMethod.parameterName(1);
    
        RetailEventNotificationLogCleanUpContract contract = this.getDataContractObject(dataContractKey) as RetailEventNotificationLogCleanUpContract;

        contract.parmRetentionDays(90);
        contract.parmAlsoDeleteUnsent(NoYes::Yes);   // by default deleting all logs out of retention days.
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super(classStr(RetailEventNotificationLogCleanUpService), methodStr(RetailEventNotificationLogCleanUpService, run), SysOperationExecutionMode::Synchronous);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static void main(Args _args)
    {
        RetailEventNotificationLogCleanUpController controller = new RetailEventNotificationLogCleanUpController();
        controller.initContract();
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean validate()
    {
        boolean isValid = super();

        if (isValid)
        {
            RetailEventNotificationLogCleanUpContract contract = this.getDataContractObject();

            int retentionDays = contract.parmRetentionDays();
            if (retentionDays < 1)
            {
                isValid = false;
                warning("@Retail:RetailEventNotificationLogCleanUp_ErrorRetentionPolicyDaysBelowLimit");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDialogCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override method to set the class name inside the lookup to batch description.
    /// </summary>
    /// <param name = "_dialogCaption">Dialog caption label.</param>
    /// <returns>The dialog description.</returns>
    public LabelType parmDialogCaption(LabelType _dialogCaption = dialogCaption)
    {
        return "@Retail:RetailEventNotificationLogCleanUpJob_Caption";
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the process must run in a batch job in background or not.
    /// </summary>
    /// <returns>If true is returned, the process must run in a batch job in background, otherwise it is not.</returns>
    [Hookable(false)]
    public boolean mustGoBatch()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>