<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransChildReference</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventTransChildReference</c> class hierarchy is delegating logic dependent on the inventory reference from an <c>InventTrans</c> table record.
/// </summary>
abstract class InventTransChildReference
{
    private InventTrans inventTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeInventTrans</Name>
				<Source><![CDATA[
    private void initializeInventTrans(InventTrans _inventTrans)
    {
        inventTrans = _inventTrans.data();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTrans</Name>
				<Source><![CDATA[
    public InventTrans parmInventTrans()
    {
        return inventTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInstantiateReceiptChildMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a receipt inventory reference <c>InventMovement</c> object can be instantiated.
    /// </summary>
    /// <returns>
    /// true if an <c>InventMovement</c> object can be instantiated; otherwise, false.
    /// </returns>
    public boolean canInstantiateReceiptChildMovement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateReceiptChildMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a receipt inventory reference child <c>InventMovement</c> object.
    /// </summary>
    /// <returns>
    /// An <c>InventMovement</c> object.
    /// </returns>
    public InventMovement instantiateReceiptChildMovement()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInstantiateIssueChildMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether an issue inventory reference <c>InventMovement</c> object can be instantiated.
    /// </summary>
    /// <returns>
    /// true if an <c>InventMovement</c> object can be instantiated; otherwise, false.
    /// </returns>
    public boolean canInstantiateIssueChildMovement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateIssueChildMovement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates an issue inventory reference child <c>InventMovement</c> object.
    /// </summary>
    /// <returns>
    /// An <c>InventMovement</c> object.
    /// </returns>
    public InventMovement instantiateIssueChildMovement()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasReferenceSpecificJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the inventory reference implements specific jump ref logic.
    /// </summary>
    /// <returns>
    /// true if the inventory reference implements specific jump ref logic; otherwise, false.
    /// </returns>
    public boolean hasReferenceSpecificJumpRef()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>performJumpRef</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs jump ref for the inventory reference.
    /// </summary>
    public void performJumpRef()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferenceExpectedDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory reference based on an change in expected date.
    /// </summary>
    public void updateReferenceExpectedDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateReferenceQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the inventory reference quantity can be updated.
    /// </summary>
    /// <param name = "_fromInventDimId">
    /// The inventory dimension id specifying the inventory references to update.
    /// </param>
    /// <param name = "_toInventDimId">
    /// The inventory dimension id the updated quantities must be associated with.
    /// </param>
    /// <param name = "_inventQty">
    /// The inventory quantity to update.
    /// </param>
    /// <param name = "_cwQty">
    /// The CW quantity to update.
    /// </param>
    /// <returns>
    /// true if the quantity can be updated; otherwise, false.
    /// </returns>
    public boolean canUpdateReferenceQuantity(InventDimId _fromInventDimId, InventDimId _toInventDimId, InventQty _inventQty, PdsCWInventQty _cwQty)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReferenceQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates inventory reference quantities.
    /// </summary>
    /// <param name = "_fromInventDimId">
    /// The inventory dimension id specifying the inventory references to update.
    /// </param>
    /// <param name = "_toInventDimId">
    /// The inventory dimension id the updated quantities must be associated with.
    /// </param>
    /// <param name = "_isPhysicalReservation">
    /// Boolean specifying whether the quantities are physically reserved.
    /// </param>
    /// <param name = "_inventQty">
    /// The inventory quantity to update.
    /// </param>
    /// <param name = "_cwQty">
    /// The CW quantity to update.
    /// </param>
    public void updateReferenceQuantity(InventDimId _fromInventDimId, InventDimId _toInventDimId, boolean _isPhysicalReservation, InventQty _inventQty, PdsCWInventQty _cwQty)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an <c>InventTransChildReference</c> object based on the inventory reference from an <c>InventTrans</c> table record.
    /// </summary>
    /// <param name = "_inventTrans">
    /// The <c>InventTrans</c> table record to construct from.
    /// </param>
    /// <returns>
    /// An <c>InventTransChildReference</c> object.
    /// </returns>
    public static InventTransChildReference newFromInventTrans(InventTrans _inventTrans)
    {
        var attribute = new InventTransChildTypeFactoryAttribute(_inventTrans.TransChildType);
        var childReference = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(InventTransChildReference), attribute) as InventTransChildReference;

        if (!childReference)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        childReference.initializeInventTrans(_inventTrans);

        return childReference;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>