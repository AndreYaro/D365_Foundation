<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InfAdjReportsDP_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
[
    SRSReportParameterAttribute(classStr(InfAdjReportsContract_MX))
]
class InfAdjReportsDP_MX extends SRSReportDataProviderBase
{
    FromDate                    fromDate;
    ToDate                      toDate;
    AdjustmentMethod_MX         adjustmentMethod;
    RepomoReportTmp_MX          repomoReportTmp;
    InpcRateTmp_MX              inpcRateTmp;
    container                   conRepomoMonthlyAdjustment;
    container                   conDifference;
    InvAdjustmentReportTmp_MX   invAdjustmentReportTmp;
    CapitalAdjReportTmp_MX      capitalAdjReportTmp;
    InfAdjMethod_OpenBalance_MX infAdjMethod_OpenBalance;

    #InfAdj_SSRSParameters_MX
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the inflation adjustment for accounts that have the <c>Balance</c> adjustment method and
    ///    fills in the temporary table.
    /// </summary>
    /// <remarks>
    ///    This method fills the <c>InvAdjustmentReportTmp_MX</c> temporary table with adjustment values for
    ///    accounts that have the <c>Balance</c> adjustment method that are marked for inflation adjustment.
    /// </remarks>
    private void calculateBalance()
    {
        InfAdjMethod_Balance_MX infAdjMethod_Balance = InfAdjMethod_MX::construct(AdjustmentMethod_MX::Balance);

        invAdjustmentReportTmp = infAdjMethod_Balance.populateTmpTable(fromDate, toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateMonthBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates inflation adjustment for profit and loss accounts and fills in the temporary table.
    /// </summary>
    /// <remarks>
    ///    This method fills the <c>RepomoReportTmp_MX</c> temporary table with the monthly balances of profit
    ///    and loss accounts that are marked for inflation adjustment and inflation adjustment is calculated
    ///    on the monthly balances.
    /// </remarks>
    private void calculateMonthBalance()
    {
        InfAdjMethod_MonthBalance_MX    infAdjMethod_Monthbalance;

        infAdjMethod_Monthbalance = InfAdjMethod_MX::construct(AdjustmentMethod_MX::MonthlyBalance);

        //P&L calculation
        infAdjMethod_Monthbalance.parmConRepomoMonthlyAdjustment(conRepomoMonthlyAdjustment);

        repomoReportTmp = infAdjMethod_Monthbalance.populateTmpTable(fromDate, toDate);
        repomoReportTmp = infAdjMethod_Monthbalance.calculate(repomoReportTmp);
        inpcRateTmp     = this.populateInpcRateTmp(fromDate, endmth(fromDate), infAdjMethod_Monthbalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOpenBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates inflation adjustment for monthly report accounts and fills in the temporary table.
    /// </summary>
    /// <remarks>
    ///    This method fills the <c>RepomoReportTmp_MX</c> temporary table with the opening balances of asset
    ///    and liability assets that are marked for inflation adjustment and inflation adjustment is
    ///    calculated by using the inflation ratio.
    /// </remarks>
    private void calculateOpenBalance()
    {
        ToDate                      endDate;

        this.populateRepomoTmpForOpenBalance();

        //Fill InpcRateTmp_MX table for monthly INPC rates.
        endDate = fromDate - 1;
        inpcRateTmp = this.populateInpcRateTmp(mkdate(1, mthofyr(endDate), year(endDate)), endDate, infAdjMethod_OpenBalance);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates inflation adjustment for accounts that have the transaction date adjustment method and
    ///    fills in the temporary table.
    /// </summary>
    /// <remarks>
    ///    This method fills the <c>CapitalAdjReportTmp_MX</c> temporary table with adjustment values for
    ///    accounts that have transaction date adjustment method that are marked for inflation adjustment.
    /// </remarks>
    private void calculateTransDate()
    {
        InfAdjMethod_TransDate_MX   infAdjMethod_TransDate =  InfAdjMethod_MX::construct(AdjustmentMethod_MX::TransactionDate);

        capitalAdjReportTmp = infAdjMethod_TransDate.populateTmpTable(fromDate, toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCapitalAdjReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>CapitalAdjReportTmp_MX</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>CapitalAdjReportTmp_MX</c> report.
    /// </returns>
    [
        #InfAdj_SSRSParameters_MX
        SRSReportDataSetAttribute(#SimulationReportDataSet)
    ]
    public CapitalAdjReportTmp_MX getCapitalAdjReportTmp()
    {
        select * from capitalAdjReportTmp order by DisplayValue;

        return capitalAdjReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInpcRateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from <c>InpcRateTmp_MX</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>InpcRateTmp_MX</c> report.
    /// </returns>
    [
        #InfAdj_SSRSParameters_MX
        SRSReportDataSetAttribute(#InpcRateDataSet)
    ]
    public InpcRateTmp_MX getInpcRateTmp()
    {
        select firstonly inpcRateTmp;

        return inpcRateTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvAdjustmentReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>InvAdjustmentReportTmp_MX</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>InvAdjustmentReportTmp_MX</c> report.
    /// </returns>
    [
        #InfAdj_SSRSParameters_MX
        SRSReportDataSetAttribute(#InventoryReportDataSet)
    ]
    public InvAdjustmentReportTmp_MX getInvAdjustmentReportTmp()
    {
        select * from invAdjustmentReportTmp order by DisplayValue;

        return invAdjustmentReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the parameter values and assigns them to the variables.
    /// </summary>
    private void getParameterValues()
    {
        InfAdjReportsContract_MX infAdjReportsContract = this.parmDataContract() as InfAdjReportsContract_MX;

        fromDate         = infAdjReportsContract.parmFromDate();
        toDate           = infAdjReportsContract.parmToDate();
        adjustmentMethod = infAdjReportsContract.parmAdjustmentMethod();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRepomoReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>RepomoReportTmp_MX</c> temporary table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>RepomoReportTmp_MX</c> record.
    /// </returns>
    [
        #InfAdj_SSRSParameters_MX
        SRSReportDataSetAttribute(#RepomoPLReportDataSet)
    ]
    public RepomoReportTmp_MX getRepomoReportTmp()
    {
        select * from repomoReportTmp order by DisplayValue;

        return repomoReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateInpcRateTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>InpcRateTmp_MX</c> table with the monthly INPC rates and returns the table buffer.
    /// </summary>
    /// <param name="_fromDate">
    ///    The starting date to consider the INPC rates.
    /// </param>
    /// <param name="_toDate">
    ///    The ending date to consider the INPC rates.
    /// </param>
    /// <param name="_infAdjMethod">
    ///    An instance of the <c>InfAdjMethod_MX</c> class.
    /// </param>
    /// <returns>
    ///    The <c>InpcRateTmp_MX</c> table with the monthly INPC rates.
    /// </returns>
    /// <remarks>
    ///    This method determines whether INPC rates exists for the date range and inserts them into the
    ///    <c>InpcRateTmp_MX</c> table.
    /// </remarks>
    private InpcRateTmp_MX populateInpcRateTmp(
        FromDate        _fromDate,
        ToDate          _toDate,
        InfAdjMethod_MX _infAdjMethod)
    {
        InpcRateTmp_MX  inpcRateTmpLoc;
        int             diffInMonths;
        int             noOfMonths = 1;
        FromDate        startDate;
        ToDate          endDate;
        InpcRate_MX     inpcRate;

        diffInMonths    = InfAdjValidation_MX::monthDifference(fromDate, toDate) + 1;
        startDate       = _fromDate;
        endDate         = _toDate;

        inpcRateTmpLoc.clear();
        inpcRateTmpLoc.Description = "@SYS313300";

        if (adjustmentMethod == AdjustmentMethod_MX::MonthlyBalance)
        {
            noOfMonths ++;
        }
        while (noOfMonths <= diffInMonths)
        {
            inpcRate = _infAdjMethod.getInflationRate(mthofyr(startDate), year(startDate));
            switch (noOfMonths)
            {
                case 1:
                    inpcRateTmpLoc.InpcPrevMonth1 = inpcRate;
                    break;

                case 2:
                    inpcRateTmpLoc.InpcMonth1 = inpcRate;
                    break;

                case 3:
                    inpcRateTmpLoc.InpcMonth2 = inpcRate;
                    break;

                case 4:
                    inpcRateTmpLoc.InpcMonth3 = inpcRate;
                    break;

                case 5:
                    inpcRateTmpLoc.InpcMonth4 = inpcRate;
                    break;

                case 6:
                    inpcRateTmpLoc.InpcMonth5 = inpcRate;
                    break;

                case 7:
                    inpcRateTmpLoc.InpcMonth6 = inpcRate;
                    break;

                case 8:
                    inpcRateTmpLoc.InpcMonth7 = inpcRate;
                    break;

                case 9:
                    inpcRateTmpLoc.InpcMonth8 = inpcRate;
                    break;

                case 10:
                    inpcRateTmpLoc.InpcMonth9 = inpcRate;
                    break;

                case 11:
                    inpcRateTmpLoc.InpcMonth10 = inpcRate;
                    break;

                case 12:
                    inpcRateTmpLoc.InpcMonth11 = inpcRate;
                    break;

                case 13:
                    inpcRateTmpLoc.InpcMonth12 = inpcRate;
                    break;
            }
            startDate = endDate + 1;
            endDate   = endmth(startDate);
            noOfMonths++;
        }
        inpcRateTmpLoc.InpcToDate   = _infAdjMethod.getInflationRate(mthofyr(toDate), year(toDate));
        inpcRateTmpLoc.CurrencyCode = Ledger::accountingCurrency();
        inpcRateTmpLoc.insert();
        return inpcRateTmpLoc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateRepomoTmpForOpenBalance</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Populates the <c>RepomoReportTmp_MX</c> temporary table for the assets and liability accounts and
    ///    calculates the inflation adjustment for the opening balance adjustment method.
    /// </summary>
    /// <remarks>
    ///    This method is used in both the opening balance and monthly balance adjustment methods.
    /// </remarks>
    private void populateRepomoTmpForOpenBalance()
    {
        infAdjMethod_OpenBalance = InfAdjMethod_MX::construct(AdjustmentMethod_MX::OpenBalance);

        repomoReportTmp             = infAdjMethod_OpenBalance.populateTmpTable(fromDate, toDate);
        repomoReportTmp             = infAdjMethod_OpenBalance.calculate(repomoReportTmp);
        conDifference               = infAdjMethod_OpenBalance.getConDifference();
        conRepomoMonthlyAdjustment  = infAdjMethod_OpenBalance.parmConRepomoMonthlyAdjustment();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic of the SSRS report.
    /// </summary>
    /// <remarks>
    ///    This method will be called by the SSRS reports at runtime. The method computes data and populates
    ///    the data tables that will be returned to the SSRS report.
    /// </remarks>
    public void processReport()
    {
        this.getParameterValues();

        switch (adjustmentMethod)
        {
            case AdjustmentMethod_MX::OpenBalance:
                this.calculateOpenBalance();
                break;

            case AdjustmentMethod_MX::MonthlyBalance:
                this.populateRepomoTmpForOpenBalance();
                this.calculateMonthBalance();
                break;

            case AdjustmentMethod_MX::Balance:
                this.calculateBalance();
                break;

            case AdjustmentMethod_MX::TransactionDate:
                this.calculateTransDate();
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
