<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceInfoLineCleanUp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceInfoLineCleanUp</c> class contains logic
/// to clean up orphaned vendor invoice line records without a linked vendor invoice
/// </summary>
internal final class VendInvoiceInfoLineCleanUp
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanUpVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clean up orphaned vendor invoice line records.
    /// </summary>
    internal static void cleanUpVendInvoiceInfoLine()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchLine purchLine;

        while select crosscompany DataAreaId, count(RecId) from vendInvoiceInfoLine
            group by vendInvoiceInfoLine.DataAreaId
            exists join purchLine
                where vendInvoiceInfoLine.SourceDocumentLine == purchLine.SourceDocumentLine
            notexists join vendInvoiceInfoTable
                where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId
        {
            VendInvoiceInfoLineCleanUp::cleanUpVendInvoiceInfoLineForCompany(vendInvoiceInfoLine.DataAreaId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpVendInvoiceInfoLineForCompany</Name>
				<Source><![CDATA[
    private static void cleanUpVendInvoiceInfoLineForCompany(DataAreaId dataAreaId)
    {
        ttsbegin;
        changecompany(dataAreaId)
        {
            VendInvoiceInfoLine vendInvoiceInfoLine;
            VendInvoiceInfoTable vendInvoiceInfoTable;
            PurchLine purchLine;

            vendInvoiceInfoLine.skipDatabaseLog(true);
            vendInvoiceInfoLine.skipDeleteActions(true);
            vendInvoiceInfoLine.skipDataMethods(true);

            delete_from vendInvoiceInfoLine
                exists join purchLine
                    where vendInvoiceInfoLine.SourceDocumentLine == purchLine.SourceDocumentLine
                notexists join vendInvoiceInfoTable
                    where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                        && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countOrphanedVendInvoiceInfoLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of orphaned vendor invoice line records by company
    /// </summary>
    internal static int64 countOrphanedVendInvoiceInfoLine()
    {
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        PurchLine purchLine;

        select crosscompany count(RecId) from vendInvoiceInfoLine
            exists join purchLine
                where vendInvoiceInfoLine.SourceDocumentLine == purchLine.SourceDocumentLine
            notexists join vendInvoiceInfoTable
                where vendInvoiceInfoLine.ParmId == vendInvoiceInfoTable.ParmId
                    && vendInvoiceInfoLine.TableRefId == vendInvoiceInfoTable.TableRefId;

        return vendInvoiceInfoLine.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>