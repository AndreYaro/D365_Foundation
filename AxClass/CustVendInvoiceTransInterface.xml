<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendInvoiceTransInterface</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;

/// <summary>
/// Base class providing an interface to common functionality applicable for tables mapped to the <c>CustVendInvoiceTrans</c> table map.
/// </summary>
[ExportInterfaceAttribute()]
public abstract class CustVendInvoiceTransInterface
{
    protected CustVendInvoiceTrans custVendInvoiceTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeCustVendInvoiceTrans</Name>
				<Source><![CDATA[
    private void initializeCustVendInvoiceTrans(CustVendInvoiceTrans _custVendInvoiceTrans = custVendInvoiceTrans)
    {
        custVendInvoiceTrans = _custVendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the local instance of the <c>CustVendInvoiceTrans</c> map.
    /// </summary>
    /// <returns>The local instance of the <c>CustVendInvoiceTrans</c> map.</returns>
    public final CustVendInvoiceTrans parmCustVendInvoiceTrans()
    {
        return custVendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInstance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CustVendInvoiceTransInterface</c> object based on the provided <c>CustVendInvoiceTrans</c> record.
    /// </summary>
    /// <param name = "_custVendInvoiceTrans">A <c>CustVendInvoiceTrans</c> record to create a <c>CustVendInvoiceTransInterface</c> object.</param>
    /// <returns>The instantiated <c>CustVendInvoiceTransInterface</c> object.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustVendInvoiceTransInterface createInstance(CustVendInvoiceTrans _custVendInvoiceTrans)
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();

        metadataCollection.SetManagedValue(classStr(CustVendInvoiceTransInterface), tableId2Name(_custVendInvoiceTrans.tableId));
        CustVendInvoiceTransInterface instance = SysPluginFactory::Instance(identifierStr(Dynamics.AX.Application), classStr(CustVendInvoiceTransInterface), metadataCollection);

        if (!instance)
        {
            throw error(strFmt("@SYS19306", funcName()));
        }

        instance.initializeCustVendInvoiceTrans(_custVendInvoiceTrans);

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsCorrLink_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is link between this record and corrected record, e.g. this record is corrected record.
    /// </summary>
    /// <returns>
    /// True if link exists; Otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean existsCorrLink_RU()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseAmount_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAmount getExciseAmount_RU()
    {
        return custVendInvoiceTrans.ExciseAmount_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseAmountMST_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAmountExciseMST_RU getExciseAmountMST_RU()
    {
        return custVendInvoiceTrans.ExciseAmountMST_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseValue_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxValue getExciseValue_RU()
    {
        return custVendInvoiceTrans.ExciseValue_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFacturedFully_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Correct_RU getFacturedFully_RU()
    {
        return custVendInvoiceTrans.FacturedFully_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFacturedQty_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FacturedQty_RU getFacturedQty_RU()
    {
        return custVendInvoiceTrans.FacturedQty_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATAmount_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAmount getVATAmount_RU()
    {
        return custVendInvoiceTrans.VATAmount_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATAmountMST_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxAmountVATMST_RU getVATAmountMST_RU()
    {
        return custVendInvoiceTrans.VATAmountMST_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATValue_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxValue getVATValue_RU()
    {
        return custVendInvoiceTrans.VATValue_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchLine_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PurchLine purchLine_RU()
    {
        PurchLine purchLine;

        select purchLine
            where purchLine.PurchId == custVendInvoiceTrans.SalesPurchId_RU &&
                  purchLine.InventTransId == custVendInvoiceTrans.InventTransId;

        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refAdjustedTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the original invoice record RecId.
    /// </summary>
    /// <returns>
    /// <c>RecId</c> of the original invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefAdjustedInvoiceTrans_RU refAdjustedTrans_RU()
    {
        RefAdjustedInvoiceTrans_RU refRecId = custVendInvoiceTrans.RecId;
        CustVendInvoiceTrans custVendInvoiceTransLocal = custVendInvoiceTrans.data();

        while (custVendInvoiceTransLocal.existsCorrLink_RU())
        {
            refRecId = custVendInvoiceTransLocal.refAdjustedTransRecId_RU();

            select firstonly RecId from custVendInvoiceTransLocal
                where custVendInvoiceTransLocal.RecId == refRecId;
        }

        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refAdjustedTransRecId_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns record id of corrected invoice trans.
    /// </summary>
    /// <returns>
    /// Record id of corrected invoice trans.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If not overriden.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId refAdjustedTransRecId_RU()
    {
        throw error(Error::missingOverride(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExciseAmount_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setExciseAmount_RU(TaxAmount _exciseAmount_RU)
    {
        custVendInvoiceTrans.ExciseAmount_RU = _exciseAmount_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExciseAmountMST_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setExciseAmountMST_RU(TaxAmountExciseMST_RU _exciseAmountMST_RU)
    {
        custVendInvoiceTrans.ExciseAmountMST_RU = _exciseAmountMST_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExciseValue_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setExciseValue_RU(TaxValue _exciseValue_RU)
    {
        custVendInvoiceTrans.ExciseValue_RU = _exciseValue_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFacturedFully_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setFacturedFully_RU(Correct_RU _facturedFully_RU)
    {
        custVendInvoiceTrans.FacturedFully_RU = _facturedFully_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFacturedQty_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setFacturedQty_RU(FacturedQty_RU _facturedQty_RU)
    {
        custVendInvoiceTrans.FacturedQty_RU = _facturedQty_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVATAmount_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setVATAmount_RU(TaxAmount _vatAmount_RU)
    {
        custVendInvoiceTrans.VATAmount_RU = _vatAmount_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVATAmountMST_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setVATAmountMST_RU(TaxAmountVATMST_RU _vatAmountMST_RU)
    {
        custVendInvoiceTrans.VATAmountMST_RU = _vatAmountMST_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVATValue_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setVATValue_RU(TaxValue _vatValue_RU)
    {
        custVendInvoiceTrans.VATValue_RU = _vatValue_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendInvoiceJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustVendInvoiceJour custVendInvoiceJour()
    {
        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxTrans_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromTaxTrans_RU(TaxTrans _taxTrans)
    {
        TaxTrans taxTrans = _taxTrans;

        Sign sign;
        if (taxTrans.TaxDirection == TaxDirection::IncomingTax ||
            taxTrans.TaxDirection == TaxDirection::TaxExemptPurchase)
        {
            sign = 1; // Purchase orders
        }
        else
        {
            sign = -1; // Sales orders etc.
        }

        CalcTaxes_RU calcTaxes = CalcTaxes_RU::construct(taxTrans);
        calcTaxes.calc();

        custVendInvoiceTrans.TaxAmount_RU = calcTaxes.totalTaxAmountCur() * sign;
        custVendInvoiceTrans.TaxAmountMST_W = calcTaxes.totalTaxAmount() * sign;

        this.setVATAmount_RU(
            (calcTaxes.taxAmountCur_VAT() +
            calcTaxes.taxAmountCur_VATReduced() +
            calcTaxes.taxAmountCur_VATZero()) * sign);

        this.setVATAmountMST_RU(
            (calcTaxes.taxAmount_VAT() +
            calcTaxes.taxAmount_VATReduced() +
            calcTaxes.taxAmount_VATZero()) * sign);

        this.setVATValue_RU(calcTaxes.taxValue_VAT());
        this.setExciseAmount_RU(calcTaxes.taxAmountCur_Excise() * sign);
        this.setExciseAmountMST_RU(calcTaxes.taxAmount_Excise() * sign);
        this.setExciseValue_RU(calcTaxes.taxValue_Excise());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromTaxWorkTrans_RU</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromTaxWorkTrans_RU(TmpTaxWorkTrans _taxWorkTrans,
                                        RefTableId _sourceTableId,
                                        RefRecId _sourceRecId = 0,
                                        InventTransId _inventTransId = "")
    {
        TmpTaxWorkTrans taxWorkTrans = _taxWorkTrans;

        #ISOCountryRegionCodes;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            select taxWorkTrans
                where taxWorkTrans.SourceTableId == _sourceTableId &&
                      ((_sourceRecId &&
                        taxWorkTrans.SourceRecId == _sourceRecId) ||
                       (! _sourceRecId &&
                        taxWorkTrans.InventTransId == _inventTransId)) &&
                      taxWorkTrans.TaxDirection != TaxDirection::UseTax &&
                      taxWorkTrans.TaxOrigin != TaxOrigin::TaxReversed;

            Sign sign;
            if (taxWorkTrans.TaxDirection == TaxDirection::IncomingTax ||
                taxWorkTrans.TaxDirection == TaxDirection::TaxExemptPurchase)
            {
                sign = 1; // Purchase orders
            }
            else
            {
                sign = -1; // Sales orders etc.
            }

            CalcTaxes_RU calcTaxes = CalcTaxes_RU::construct(taxWorkTrans);
            calcTaxes.calc();

            custVendInvoiceTrans.TaxAmount_RU = calcTaxes.totalTaxAmountCur() * sign;

            this.setVATAmount_RU(
                (calcTaxes.taxAmountCur_VAT() +
                calcTaxes.taxAmountCur_VATReduced() +
                calcTaxes.taxAmountCur_VATZero()) * sign);

            this.setVATValue_RU(calcTaxes.taxValue_VAT());
            this.setExciseAmount_RU(calcTaxes.taxAmountCur_Excise() * sign);
            this.setExciseValue_RU(calcTaxes.taxValue_Excise());

            // VendPackingSlipTrans has no mapping for MST fields;
            if (mappingExists(tableNum(CustVendInvoiceTrans),
                              custVendInvoiceTrans.TableId,
                              fieldNum(CustVendInvoiceTrans, TaxAmountMST_W)))
            {
                custVendInvoiceTrans.TaxAmountMST_W = calcTaxes.totalTaxAmount() * sign;

                this.setVATAmountMST_RU(
                    (calcTaxes.taxAmount_VAT() +
                    calcTaxes.taxAmount_VATReduced() +
                    calcTaxes.taxAmount_VATZero()) * sign);

                this.setExciseAmountMST_RU(calcTaxes.taxAmount_Excise() * sign);
            }

        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fullyFactured_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transaction is fully fractured.
    /// </summary>
    /// <returns>
    /// Yes if fully fractured; otherwise, no.
    /// </returns>
    public FacturedFully_RU fullyFactured_RU()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCorrectedTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays lookup for corrected invoice transactions.
    /// </summary>
    /// <param name="_ctrl">
    /// Control at which lookup should be displayed.
    /// </param>
    /// <param name="_invoiceId">
    /// Id of invoice.
    /// </param>
    /// <param name="_invoiceDate">
    /// Date of invoice.
    /// </param>
    /// <param name="_invoiceAccount">
    /// Customer or vendor account.
    /// </param>
    /// <param name="_currencyCode">
    /// Code of currency.
    /// </param>
    /// <param name="_salesPurchLine">
    /// <c>SalesPurchLine</c> record.
    /// </param>
    /// <returns>
    /// <c>CustVendInvoiceTrans</c> record selected by the user.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static CustVendInvoiceTrans lookupCorrectedTrans_RU(FormStringControl _ctrl,
                                                               InvoiceId _invoiceId,
                                                               TransDate _invoiceDate,
                                                               CustVendAC _invoiceAccount,
                                                               CurrencyCode _currencyCode,
                                                               SalesPurchLine _salesPurchLine)
    {
        Query query;
        CustVendInvoiceTrans custVendInvoiceTrans;
        tableId tableId;
        fieldId fieldInvoiceId;
        fieldId fieldInvoiceDate;
        fieldId fieldLineNum;
        fieldId fieldInventTransId;
        fieldId fieldName;
        fieldId fieldQty;
        fieldId fieldPrice;
        NoYes controlItemDim;
        TableLookup_RU sysTableLookup;

        if (! _invoiceId || ! _invoiceDate)
        {
            return custVendInvoiceTrans;
        }

        switch (_salesPurchLine.TableId)
        {
            case tablenum(SalesLine) :
            case tablenum(CustInvoiceLine) :
                tableId = tablenum(CustInvoiceTrans);
                fieldInvoiceId = fieldnum(CustInvoiceTrans, InvoiceId);
                fieldInvoiceDate = fieldnum(CustInvoiceTrans, InvoiceDate);
                fieldLineNum = fieldnum(CustInvoiceTrans, LineNum);
                fieldInventTransId = fieldnum(CustInvoiceTrans, InventTransId);
                fieldName = fieldnum(CustInvoiceTrans, Name);
                fieldQty = fieldnum(CustInvoiceTrans, Qty);
                fieldPrice = fieldnum(CustInvoiceTrans, SalesPrice);
                controlItemDim = CustParameters::find().ItemDimAdjustLineControl_RU;
                break;
            case tablenum(PurchLine) :
                tableId = tablenum(VendInvoiceTrans);
                fieldInvoiceId = fieldnum(VendInvoiceTrans, InvoiceId);
                fieldInvoiceDate = fieldnum(VendInvoiceTrans, InvoiceDate);
                fieldLineNum = fieldnum(VendInvoiceTrans, LineNum);
                fieldInventTransId = fieldnum(VendInvoiceTrans, InventTransId);
                fieldName = fieldnum(VendInvoiceTrans, Name);
                fieldQty = fieldnum(VendInvoiceTrans, Qty);
                fieldPrice = fieldnum(VendInvoiceTrans, PurchPrice);
                controlItemDim = VendParameters::find().ItemDimAdjustLineControl_RU;
                break;
        }

        query = CustVendInvoiceTransInterface::queryCorrectedTrans_RU(_invoiceId,
                                                             _invoiceDate,
                                                             _invoiceAccount,
                                                             _currencyCode,
                                                             _salesPurchLine,
                                                             controlItemDim);

        sysTableLookup = TableLookup_RU::newParameters(tableId, _ctrl);

        sysTableLookup.addLookupfield(fieldName, true);
        sysTableLookup.addLookupfield(fieldInvoiceId);
        sysTableLookup.addLookupfield(fieldInvoiceDate);
        sysTableLookup.addLookupfield(fieldLineNum);
        sysTableLookup.addLookupfield(fieldInventTransId);
        sysTableLookup.addLookupfield(fieldQty);
        sysTableLookup.addLookupfield(fieldPrice);
        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
        if (sysTableLookup.getFoundCursor())
        {
            custVendInvoiceTrans = sysTableLookup.getFoundCursor();
        }

        return custVendInvoiceTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCorrectedTrans_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates query for lookup for corrected invoice trans.
    /// </summary>
    /// <param name="_invoiceId">
    /// Id of invoice.
    /// </param>
    /// <param name="_invoiceDate">
    /// Date of invoice.
    /// </param>
    /// <param name="_invoiceAccount">
    /// Customer or vendor account.
    /// </param>
    /// <param name="_currencyCode">
    /// Currency code.
    /// </param>
    /// <param name="_salesPurchLine">
    /// <c>SalesPurchLine</c> record.
    /// </param>
    /// <param name="_controlItemDim">
    /// A boolean value, indicating that product dimension should match.
    /// </param>
    /// <returns>
    /// <c>Query</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static Query queryCorrectedTrans_RU(InvoiceId _invoiceId,
                                               TransDate _invoiceDate,
                                               CustVendAC _invoiceAccount,
                                               CurrencyCode _currencyCode,
                                               SalesPurchLine _salesPurchLine,
                                               boolean _controlItemDim = false)
    {
        tableId tableIdJour;
        tableId tableIdTrans;
        tableId tableIdCorrTransLink;
        tableId tableIdCorrTableLink;
        fieldId fieldItem;
        fieldId fieldUnit;
        fieldId fieldTaxGroup;
        fieldId fieldTaxItemGroup;
        fieldId fieldCurrencyCode;
        fieldId fieldTransRecId;
        fieldId fieldJourRecId;
        fieldId fieldOriginalInvoice;
        RecId refOrigInvoice;
        InventDim inventDim;

        QueryBuildDataSource qbds, dsTrans, dsTransCorr, dsJourCorr;
        Query query = new Query();

        switch (_salesPurchLine.TableId)
        {
            case tablenum(SalesLine) :
            case tablenum(CustInvoiceLine) :
                tableIdJour = tablenum(CustInvoiceJour);
                tableIdTrans = tablenum(CustInvoiceTrans);
                tableIdCorrTransLink = tableNum(CustInvoiceTransCorrLink_RU);
                tableIdCorrTableLink = tableNum(CustInvoiceJourCorrLink_RU);
                fieldItem = _salesPurchLine.TableId == tablenum(SalesLine) ?
                                       fieldnum(CustInvoiceTrans, ItemId) :
                                       fieldnum(CustInvoiceTrans, Name);
                fieldUnit = fieldnum(CustInvoiceTrans, SalesUnit);
                fieldTaxGroup = fieldnum(CustInvoiceTrans, TaxGroup);
                fieldTaxItemGroup = fieldnum(CustInvoiceTrans, TaxItemGroup);
                fieldCurrencyCode = fieldnum(CustInvoiceJour, CurrencyCode);

                refOrigInvoice = CustInvoiceJour::findFromCustTrans(_invoiceId,
                                                                          _invoiceDate,
                                                                          _invoiceAccount).refOriginalInvoiceRecId_RU();

                fieldTransRecId = fieldNum(CustInvoiceTransCorrLink_RU, TransRecId);
                fieldJourRecId = fieldNum(CustInvoiceJourCorrLink_RU, JourRecId);
                fieldOriginalInvoice = fieldNum(CustInvoiceJourCorrLink_RU, CorrJourRecId);
                break;
            case tablenum(PurchLine) :
                tableIdJour = tablenum(VendInvoiceJour);
                tableIdTrans = tablenum(VendInvoiceTrans);
                tableIdCorrTransLink = tableNum(VendInvoiceTransCorrLink_RU);
                tableIdCorrTableLink = tableNum(VendInvoiceJourCorrLink_RU);
                fieldItem = fieldnum(VendInvoiceTrans, ItemId);
                fieldUnit = fieldnum(VendInvoiceTrans, PurchUnit);
                fieldTaxGroup = fieldnum(VendInvoiceTrans, TaxGroup);
                fieldTaxItemGroup = fieldnum(VendInvoiceTrans, TaxItemGroup);
                fieldCurrencyCode = fieldnum(VendInvoiceJour, CurrencyCode);

                refOrigInvoice = VendInvoiceJour::findFromVendTrans(_invoiceId,
                                                                          _invoiceDate,
                                                                          _invoiceAccount).refOriginalInvoiceRecId_RU();

                fieldTransRecId = fieldNum(VendInvoiceTransCorrLink_RU, TransRecId);
                fieldJourRecId = fieldNum(VendInvoiceJourCorrLink_RU, JourRecId);
                fieldOriginalInvoice = fieldNum(VendInvoiceJourCorrLink_RU, CorrJourRecId);
                break;
        }

        SalesPurchLineInterface salesPurchLineInterface = _salesPurchLine.salesPurchLineInterface();

        dsTrans = query.addDataSource(tableIdTrans);

        findOrCreateRange_W(dsTrans, fieldItem, queryValue(salesPurchLineInterface.parmItemId()));
        findOrCreateRange_W(dsTrans, fieldUnit, queryValue(salesPurchLineInterface.parmUnitId()));
        findOrCreateRange_W(dsTrans, fieldTaxGroup, queryValue(salesPurchLineInterface.parmTaxGroup()));
        findOrCreateRange_W(dsTrans, fieldTaxItemGroup, queryValue(salesPurchLineInterface.parmTaxItemGroup()));

        dsTransCorr = dsTrans.addDataSource(tableIdCorrTransLink);
        dsTransCorr.addLink(fieldNum(Common, RecId), fieldTransRecId);
        dsTransCorr.joinMode(JoinMode::NoExistsJoin);

        qbds = dsTrans.addDataSource(tableIdJour);
        qbds.relations(true);
        qbds.joinMode(JoinMode::ExistsJoin);

        findOrCreateRange_W(qbds, fieldCurrencyCode, queryValue(_currencyCode));

        dsJourCorr = qbds.addDataSource(tableIdCorrTableLink);
        dsJourCorr.addLink(fieldNum(Common, RecId), fieldJourRecId);
        dsJourCorr.joinMode(JoinMode::ExistsJoin);
        findOrCreateRange_W(dsJourCorr, fieldOriginalInvoice, queryValue(refOrigInvoice));

        if (_salesPurchLine.TableId != tablenum(CustInvoiceLine) && _controlItemDim)
        {
            qbds = dsTrans.addDataSource(tablenum(InventDim));
            qbds.relations(true);
            qbds.joinMode(JoinMode::ExistsJoin);

            inventDim = _salesPurchLine.salesPurchLineInterface().inventDim();
            InventDim::queryAddRangeForProductDimensions(qbds, inventDim);
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>