<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeNonStockedConversionReadinessCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   The <c>TradeNonStockedConversionReadinessCheck</c> class manages the readiness check.
/// </summary>
class TradeNonStockedConversionReadinessCheck
extends RunBaseBatch implements BatchRetryable
{
    TradeNonStockedConversion   tradeNonStockedConversion;
    container                   packedItemList;
    boolean                     resetStatus;
    boolean                     resetStatusOrig;

    DialogField                 fieldResetStatus;
    List                        itemList;

    #Define.CurrentVersion(1)
    #Localmacro.CurrentList
        tradeNonStockedConversion,
        packedItemList,
        resetStatus,
        resetStatusOrig
    #Endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCheckTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a record in the <c>TradeNonStockedConversionCheckTaskLog</c> table.
    /// </summary>
    private void createCheckTask()
    {
        TradeNonStockedConversionCheckTaskLog tradeNonStockedConversionCheckTaskLog;

        if (!TradeNonStockedConversionCheckTaskLog::existsTradeNonStockedConversion(this.parmTradeNonStockedConversion().RecId))
        {
            ttsbegin;
            tradeNonStockedConversionCheckTaskLog.ReadinessRunDateTimeStart = DateTimeUtil::utcNow();
            tradeNonStockedConversionCheckTaskLog.ReadinessRunDateTimeEnd   = DateTimeUtil::minValue();
            tradeNonStockedConversionCheckTaskLog.initFromTradeNonStockedConversion(this.parmTradeNonStockedConversion());
            tradeNonStockedConversionCheckTaskLog.insert();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        fieldResetStatus = dialog.addFieldValue(extendedtypestr(TradeNonStockedConversionResetStatus), resetStatusOrig);
        if (this.itemsSelected())
        {
            fieldResetStatus.enabled(false);
            fieldResetStatus.value(true);
        }
        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        resetStatus = fieldResetStatus.value();
        if (!this.itemsSelected())
        {
            resetStatusOrig = resetStatus;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemsSelected</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks whether an item selection is passed to the class.
    /// </summary>
    /// <returns>
    ///   true if an item selection is passed to the class; otherwise, false.
    /// </returns>
    private boolean itemsSelected()
    {
        if (!itemList && this.parmPackedItemList())
        {
            itemList = List::create(this.parmPackedItemList());
        }
        return (itemList && itemList.elements() > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedItemList</Name>
				<Source><![CDATA[
    public container parmPackedItemList(container _packedItemList = packedItemList)
    {
        packedItemList = _packedItemList;
        return packedItemList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTradeNonStockedConversion</Name>
				<Source><![CDATA[
    public TradeNonStockedConversion parmTradeNonStockedConversion(TradeNonStockedConversion _tradeNonStockedConversion = tradeNonStockedConversion)
    {
        tradeNonStockedConversion = _tradeNonStockedConversion;
        return tradeNonStockedConversion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Resets the status on the items being part of the readiness check.
    /// </summary>
    private void resetStatus()
    {
        TradeNonStockedConversionItem       tradeNonStockedConversionItem;
        TradeNonStockedConversionLog        tradeNonStockedConversionLog;
        TradeNonStockedConversionCheckLog   tradeNonStockedConversionCheckLog;
        TradeNonStockedConversionLogParent  tradeNonStockedConversionLogParent;
        TradeNonStockedConversionItem       selectedItem;
        ListEnumerator                      listEnumerator;
        List                                list;

        if (resetStatus)
        {
            ttsbegin;
            list = List::create(this.parmPackedItemList());
            if (list && list.elements())
            {
                listEnumerator = list.getEnumerator();
                while (listEnumerator.moveNext())
                {
                    selectedItem = listEnumerator.current();
                    update_recordset tradeNonStockedConversionItem
                        setting Status = TradeNonStockedConversionStatus::Draft
                        where tradeNonStockedConversionItem.RecId == selectedItem.RecId;

                    delete_from tradeNonStockedConversionCheckLog
                        where tradeNonStockedConversionCheckLog.NonStockedConversionItem == selectedItem.RecId;
                }
            }
            else
            {
                update_recordset tradeNonStockedConversionItem
                    setting Status = TradeNonStockedConversionStatus::Draft
                    where tradeNonStockedConversionItem.NonStockedConversion == this.parmTradeNonStockedConversion().RecId
                    &&    tradeNonStockedConversionItem.Status != TradeNonStockedConversionStatus::Converted;

                delete_from tradeNonStockedConversionCheckLog
                    exists join tradeNonStockedConversionItem
                    where tradeNonStockedConversionItem.RecId == tradeNonStockedConversionCheckLog.NonStockedConversionItem
                    &&    tradeNonStockedConversionItem.Status == TradeNonStockedConversionStatus::Draft;
            }

            delete_from tradeNonStockedConversionLogParent
                notexists join tradeNonStockedConversionLog
                where tradeNonStockedConversionLog.NonStockedConversionLogParent == tradeNonStockedConversionLogParent.RecId;
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Executes the readiness check.
    /// </summary>
    public void run()
    {
        TradeNonStockedConversionTaskManager tradeNonStockedConversionTaskManager;
        tradeNonStockedConversionTaskManager = TradeNonStockedConversionTaskManager::newManager(TradeNonStockedConversionTaskType::Check,
                                                                                                this.parmTradeNonStockedConversion(),
                                                                                                this.parmCurrentBatch(),
                                                                                                this.parmPackedItemList());

        super();

        this.resetStatus();
        this.createCheckTask();
        tradeNonStockedConversionTaskManager.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer version = conpeek(_packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = _packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionReadinessCheck construct()
    {
        return new TradeNonStockedConversionReadinessCheck();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS323658";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static public void main(Args _args)
    {
        TradeNonStockedConversion       tradeNonStockedConversion;
        TradeNonStockedConversionItem   tradeNonStockedConversionItem;
        MultiSelectionContext           multiSelectionContext;
        FormDataSource                  callerFormDataSource;
        boolean                         reSearch = true;
        boolean                         executed;
        List                            list = new List(Types::Record);

        switch (_args.dataset())
        {
            case tablenum(TradeNonStockedConversion) :
                tradeNonStockedConversion = _args.record() as TradeNonStockedConversion;
                break;

            case tablenum(TradeNonStockedConversionItem) :
                multiSelectionContext = _args.multiSelectionContext();
                tradeNonStockedConversionItem = multiSelectionContext.getFirst() as TradeNonStockedConversionItem;
                if (tradeNonStockedConversionItem)
                {
                    tradeNonStockedConversion =  tradeNonStockedConversionItem.tradeNonStockedConversion();
                    while (tradeNonStockedConversionItem)
                    {
                        list.addEnd(tradeNonStockedConversionItem);
                        tradeNonStockedConversionItem = multiSelectionContext.getNext();
                    }
                }
                else
                {
                    reSearch = false;
                    tradeNonStockedConversionItem = _args.record() as TradeNonStockedConversionItem;
                    list.addEnd(tradeNonStockedConversionItem);
                    tradeNonStockedConversion =  tradeNonStockedConversionItem.tradeNonStockedConversion();
                }
                break;
        }

        if (_args.record())
        {
            callerFormDataSource = FormDataUtil::getFormDataSource(_args.record());
        }

        executed = TradeNonStockedConversionReadinessCheck::mainOnServer(tradeNonStockedConversion,
                                                                         list.pack());
        if (executed && callerFormDataSource)
        {
            if (reSearch)
            {
                callerFormDataSource.research();
            }
            else
            {
                callerFormDataSource.reread();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainOnServer</Name>
				<Source><![CDATA[
    protected static boolean mainOnServer(
        TradeNonStockedConversion _tradeNonStockedConversion,
        container                 _packedItemList)
    {
        boolean executed;
        TradeNonStockedConversionReadinessCheck tradeNonStockedConversionReadinessCheck;

        tradeNonStockedConversionReadinessCheck = TradeNonStockedConversionReadinessCheck::newReadinessCheck(_tradeNonStockedConversion,
                                                                                                             _packedItemList);
        if (tradeNonStockedConversionReadinessCheck.prompt())
        {
            executed = true;
            tradeNonStockedConversionReadinessCheck.runOperation();
        }
        return executed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReadinessCheck</Name>
				<Source><![CDATA[
    static public TradeNonStockedConversionReadinessCheck newReadinessCheck(
        TradeNonStockedConversion   _tradeNonStockedConversion,
        container                   _packedItemList = connull())
    {
        TradeNonStockedConversionReadinessCheck readinessCheck = TradeNonStockedConversionReadinessCheck::construct();

        readinessCheck.getLast();
        readinessCheck.parmTradeNonStockedConversion(_tradeNonStockedConversion);
        readinessCheck.parmPackedItemList(_packedItemList);
        return readinessCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>