<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgTransaction_Proj</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgTransaction_Proj</c> class allows for time and attendance to read and post changes to the
///    project registrations.
/// </summary>
public class JmgTransaction_Proj extends JmgTransaction
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>postChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the changes made in time and attendance back to the project transactions.
    /// </summary>
    /// <param name="_jmgChangeLog">
    /// A <c>JmgChangeLog</c> record that contains the changes to post.
    /// </param>
    /// <param name="_jmgPostStandardSystem">
    /// A reference to a <c>JmgPostStandardSystem</c> object to use in the posting of changed transactions.
    /// </param>
    /// <remarks>
    /// Changes to project registrations are posted using the <c>JmgPostStandardSystem</c> class.
    /// </remarks>
    public void postChange(JmgChangeLog _jmgChangeLog, JmgPostStandardSystem _jmgPostStandardSystem)
    {
        JmgStampJournalTrans    changedTrans;
        JmgStampJournalTrans    originalTrans;

        con2Buf(_jmgChangeLog.ChangedTransaction, changedTrans);
        con2Buf(changedTrans.OriginalTransaction, originalTrans);
        switch (_jmgChangeLog.ChangeLogType)
        {
            case JmgChangeLogType::Insert:
                _jmgPostStandardSystem.addJob(
                    JmgTermJob::construct(changedTrans.JobId),
                    JmgRegistrationParameters::constructJmgStampTransMap(changedTrans),
                    changedTrans);
                break;
            case JmgChangeLogType::Update:
                if (this.validateOriginalTransJourRegType(changedTrans, originalTrans))
                {
                    originalTrans.Seconds   = originalTrans.Seconds * -1;
                    _jmgPostStandardSystem.addJob(
                    JmgTermJob::construct(originalTrans.JobId),
                    JmgRegistrationParameters::constructJmgStampTransMap(originalTrans),
                    originalTrans);
                }

                if (this.validateChangedTransJourRegType(changedTrans, originalTrans))
                {
                    _jmgPostStandardSystem.addJob(
                    JmgTermJob::construct(changedTrans.JobId),
                    JmgRegistrationParameters::constructJmgStampTransMap(changedTrans),
                    changedTrans);
                }
                break;
            case JmgChangeLogType::Delete:
                if (this.mustContinuePostChangeDelete())
                {
                    originalTrans.Seconds   = originalTrans.Seconds * -1;
                    _jmgPostStandardSystem.addJob(
                    JmgTermJob::construct(originalTrans.JobId),
                    JmgRegistrationParameters::constructJmgStampTransMap(originalTrans),
                    originalTrans);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustContinuePostChangeDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to continue change posting if change log type is delete.
    /// </summary>
    /// <returns>
    /// true if must continue change posting; otherwise, false.
    /// </returns>
    protected boolean mustContinuePostChangeDelete()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOriginalTransJourRegType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the journal registration type for the original journal transfer.
    /// </summary>
    /// <param name="_changedTrans">
    /// The journal transfer record which carries information about the changed record.
    /// </param>
    /// <param name="_originalTrans">
    /// The journal transfer record which carries information about the original record.
    /// </param>
    /// <returns>
    /// true if the journal registration type is activity or project; otherwise, false.
    /// </returns>
    protected boolean validateOriginalTransJourRegType(JmgStampJournalTrans _changedTrans, JmgStampJournalTrans _originalTrans)
    {
        return (_originalTrans.JourRegType == JmgJourRegTypeEnum::PrjActivity
                || _originalTrans.JourRegType == JmgJourRegTypeEnum::PrjProject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateChangedTransJourRegType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the journal registration type for the changed journal transfer.
    /// </summary>
    /// <param name="_changedTrans">
    /// The journal transfer record which carries information about the changed record.
    /// </param>
    /// <param name="_originalTrans">
    /// The journal transfer record which carries information about the original record.
    /// </param>
    /// <returns>
    /// true if the journal registration type is activity or project; otherwise, false.
    /// </returns>
    protected boolean validateChangedTransJourRegType(JmgStampJournalTrans _changedTrans, JmgStampJournalTrans _originalTrans)
    {
        return (_changedTrans.JourRegType == JmgJourRegTypeEnum::PrjActivity
                || _changedTrans.JourRegType == JmgJourRegTypeEnum::PrjProject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static JmgTransaction_Proj construct()
    {
        return new JmgTransaction_Proj();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>