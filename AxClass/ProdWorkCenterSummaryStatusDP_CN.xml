<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdWorkCenterSummaryStatusDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdWorkCenterSummaryStatusDP_CN</c> class provides data for the <c>ProdWorkCenterSummaryStatus_CN</c> SSRS report.
/// </summary>
/// <remarks>
/// This is the Report Data Provider class for the <c>ProdWorkCenterSummaryStatus_CN</c> SSRS report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(ProdWorkCenterSummaryStatus_CN)),
    SRSReportParameterAttribute(classStr(ProdWorkCenterSummaryStatusContract_CN))
]
public class ProdWorkCenterSummaryStatusDP_CN extends SRSReportDataProviderBase
{
    //Tmp Table
    ProdWorkCenterSummaryStatusTmp_CN       workCenterSummaryStatusTmp_CN;

    //Report parameters
    ProdId              prodId;
    WrkCtrIdBase        wrkCtrId;
    TransDate           fromDate;
    TransDate           toDate;

    //Report business logic
    ProdRouteTrans              prodRouteTrans;
    ProdTable                   prodTable;
    WrkCtrTable                 wrkCtrTable;
    InventTable                 inventTable;
    ProdRoute                   prodRoute;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getWorkCenterSummaryStatusTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>ProdWorkCenterSummaryStatusTmp_CN</c> temporary table.
    /// </summary>
    /// <returns>
    /// An instance of the <c>ProdWorkCenterSummaryStatusTmp_CN</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(ProdWorkCenterSummaryStatusTmp_CN))
    ]
    public ProdWorkCenterSummaryStatusTmp_CN getWorkCenterSummaryStatusTmp_CN()
    {
        select WorkCenterSummaryStatusTmp_CN;
        return WorkCenterSummaryStatusTmp_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initWorkCenterSummaryStatusTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data from the <c>ProdWorkCenterSummaryStatusTmp_CN</c> temporary table.
    /// </summary>
    private void initWorkCenterSummaryStatusTmp()
    {
        Query       query = new Query();

        query       = this.parmQuery();

        //Initializes query by parameters - From date/To date
        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, transRefId)).value(prodId);
        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, wrkCtrId)).value(wrkCtrId);
        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, DateWIP)).value(queryRange(fromDate, toDate));

        QueryRun qr = new QueryRun(query);
        while (qr.next())
        {
            prodRouteTrans  = qr.get(tableNum(ProdRouteTrans));
            prodTable       = qr.get(tableNum(ProdTable));
            inventTable     = qr.get(tableNum(InventTable));
            wrkCtrTable     = qr.get(tableNum(WrkCtrTable));
            prodRoute       = qr.get(tableNum(prodRoute));

            workCenterSummaryStatusTmp_CN.clear();
            workCenterSummaryStatusTmp_CN.WrkCtrId            = prodRouteTrans.WrkCtrId;
            workCenterSummaryStatusTmp_CN.WrkCtrName          = wrkCtrTable.Name;
            workCenterSummaryStatusTmp_CN.ProdId              = prodRouteTrans.TransRefId;
            workCenterSummaryStatusTmp_CN.ItemId              = prodTable.ItemId;
            workCenterSummaryStatusTmp_CN.ItemName            = inventTable.itemName();
            workCenterSummaryStatusTmp_CN.Qty                 = prodTable.QtySched;
            workCenterSummaryStatusTmp_CN.Unit                = inventTable.BOMUnitId;
            workCenterSummaryStatusTmp_CN.OprNum              = prodRouteTrans.OprNum;
            workCenterSummaryStatusTmp_CN.OprId               = prodRouteTrans.OprId;
            workCenterSummaryStatusTmp_CN.FinishedQty         = prodRouteTrans.QtyGood;
            workCenterSummaryStatusTmp_CN.ScrapQty            = prodRouteTrans.QtyError;
            workCenterSummaryStatusTmp_CN.OprNumNext          = prodRoute.OprNumNext;
            workCenterSummaryStatusTmp_CN.PreOprFinishedQty   = 0;
            workCenterSummaryStatusTmp_CN.OprEndingQty        = 0;
            workCenterSummaryStatusTmp_CN.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic of the SSRS report.
    /// </summary>
    /// <remarks>
    /// This method will be called by SSRS at run time.The method will compute the data and populate the
    /// data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceCN00136, funcName());

        ProdWorkCenterSummaryStatusContract_CN  contract = this.parmDataContract();

        //Gets report parameters by datacontract class
        wrkCtrId  = contract.parmWrkCtrId();
        prodId    = contract.parmProdId();
        fromDate  = contract.parmFromDate();
        toDate    = contract.parmToDate();

        if (fromDate == dateNull())
        {
            fromDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (toDate == dateNull())
        {
            toDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        //Initializes temporary table
        this.initWorkCenterSummaryStatusTmp();

        select firstOnly recId from workCenterSummaryStatusTmp_CN;
        if (!workCenterSummaryStatusTmp_CN.RecId)
        {
            workCenterSummaryStatusTmp_CN.clear();
            workCenterSummaryStatusTmp_CN.initValue();
            workCenterSummaryStatusTmp_CN.insert();
        }
        else
        {
            //updates previous operation quantity and ending quantity
            this.updateWorkCenterSummaryStatusTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkCenterSummaryStatusTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity and updates it into the temporary table.
    /// </summary>
    private void updateWorkCenterSummaryStatusTmp()
    {
        prodRoute           tmpProdRoute;
        //Previous operation current period finished quantity [From date, To date]
        //Previous operation finished quantity till To date (include To date)
        //Current operation finished quantity till To data (include To date)

        Query query = new Query(queryStr(ProdWorkCenterSummaryStatusDetails_CN));
        while select workCenterSummaryStatusTmp_CN
        {
            Qty preOprCurPeriodFinishedQty  = 0;
            Qty preOprTillToDateFinishedQty = 0;
            Qty curOprTillToDateFinishedQty = 0;

            //calculates current operation finished quantity till To date (include To date)
            query.dataSourceTable(tableNum(ProdRoute)).clearRange(fieldNum(ProdRoute, OprNumNext));
            Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, transRefId)).value(workCenterSummaryStatusTmp_CN.ProdId);
            Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, DateWIP)).value(queryRange(dateNull(), toDate));
            Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRoute)), fieldNum(ProdRoute, OprNum)).value(queryValue(workCenterSummaryStatusTmp_CN.OprNum));

            QueryRun qr = new QueryRun(query);
            qr.next();

            ProdRouteTrans prodRouteTransLocal = qr.get(tableNum(ProdRouteTrans));
            curOprTillToDateFinishedQty = prodRouteTransLocal.QtyGood;

            //Check whether this is the first operation
            select firstOnly recId from tmpProdRoute
                where tmpProdRoute.ProdId == workCenterSummaryStatusTmp_CN.ProdId
                    && tmpProdRoute.OprNumNext ==  workCenterSummaryStatusTmp_CN.OprNum;

            if (tmpProdRoute.RecId)
            {
                //If current operation is not the first operation
                //calculates previous operation current period finished quantity [From date, To date]
                query.dataSourceTable(tableNum(ProdRoute)).clearRange(fieldNum(ProdRoute, OprNum));
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, transRefId)).value(workCenterSummaryStatusTmp_CN.ProdId);
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, DateWIP)).value(queryRange(fromDate, toDate));
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRoute)), fieldNum(ProdRoute, OprNumNext)).value(queryValue(workCenterSummaryStatusTmp_CN.OprNum));

                qr = new QueryRun(query);
                qr.next();

                prodRouteTransLocal         = qr.get(tableNum(ProdRouteTrans));
                preOprCurPeriodFinishedQty  = prodRouteTransLocal.QtyGood;

                //calculates previous operation finished quantity till To date (include To date)
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, transRefId)).value(workCenterSummaryStatusTmp_CN.ProdId);
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRouteTrans)), fieldNum(ProdRouteTrans, DateWIP)).value(queryRange(dateNull(), toDate));
                Sysquery::findOrCreateRange(query.dataSourceTable(tableNum(ProdRoute)), fieldNum(ProdRoute, OprNumNext)).value(queryValue(workCenterSummaryStatusTmp_CN.OprNum));

                qr = new QueryRun(query);
                qr.next();

                prodRouteTransLocal         = qr.get(tableNum(ProdRouteTrans));
                preOprTillToDateFinishedQty = prodRouteTransLocal.QtyGood;

                //updates previous operation current period finished quantity
                workCenterSummaryStatusTmp_CN.PreOprFinishedQty = preOprCurPeriodFinishedQty;

                //update ending quantity that equals previous operation till To date finished quantity - current operation till To date finished quantity
                workCenterSummaryStatusTmp_CN.OprEndingQty = preOprTillToDateFinishedQty - curOprTillToDateFinishedQty;
            }
            else
            {
                //If current operation is the first operation
                //updates previous operation current period finished quantity
                workCenterSummaryStatusTmp_CN.PreOprFinishedQty = 0;

                //update ending quantity that equals scheduled quantity - current operation till To date finished quantity
                workCenterSummaryStatusTmp_CN.OprEndingQty = workCenterSummaryStatusTmp_CN.Qty - curOprTillToDateFinishedQty;
            }

            workCenterSummaryStatusTmp_CN.update();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>