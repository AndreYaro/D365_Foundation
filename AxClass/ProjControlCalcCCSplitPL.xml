<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjControlCalcCCSplitPL</Name>
	<SourceCode>
		<Declaration><![CDATA[
class   ProjControlCalcCCSplitPL extends ProjControlCalc
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>eliminationAmountTurnover</Name>
				<Source><![CDATA[
        protected AmountMST eliminationAmountTurnover(ProjControlPeriodTable _projControlPeriod)
    {
        AmountMST ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodUpdateColumnAccEstimateSecond</Name>
				<Source><![CDATA[
        void periodUpdateColumnAccEstimateSecond(
        ProjControlPeriodTable  _projControlPeriodTable)
    {
        if (this.parmCalledFromCode())
        {
            projControlPeriodTableColumnAccEstimate.PLCostAccCost           = projControlColumnAccEstimatePrev.PLCostAccCost+this.parmAccruedCost();
        }
        else if (this.provisionForseeablesLosses(_projControlPeriodTable))
        {
            projControlPeriodTableColumnAccEstimate.PLCostAccCost           = projControlColumnAccEstimatePrev.PLCostAccCost+accGrossMarginTemp;
        }
        projControlPeriodTableColumnAccEstimate.WIPCostpriceAccruedCost = this.WIPCostpriceAccruedCost(projControlPeriodTableColumnAccEstimate,ProjEstimateColumn::Accumulated);

        this.calcTotals(projControlPeriodTableColumnAccEstimate,ProjEstimateColumn::Accumulated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodUpdateColumnEstimateSecond</Name>
				<Source><![CDATA[
        void periodUpdateColumnEstimateSecond(
        ProjControlPeriodTable  _projControlPeriodTable)
    {
        if (this.parmCalledFromCode())
        {
            projControlPeriodTableColumnEstimate.PLCostAccCost   = this.parmAccruedCost();
        }
        else if (this.provisionForseeablesLosses(_projControlPeriodTable))
        {
            projControlPeriodTableColumnEstimate.PLCostAccCost   = accGrossMarginTemp;
        }

        projControlPeriodTableColumnEstimate.WIPCostpriceAccruedCost = this.WIPCostpriceAccruedCost(projControlPeriodTableColumnEstimate,ProjEstimateColumn::Estimate);
        this.calcTotals(projControlPeriodTableColumnEstimate,ProjEstimateColumn::Estimate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PLAccRevSalesValue</Name>
				<Source><![CDATA[
        AmountMST PLAccRevSalesValue(
        ProjControlPeriodTable          _projControlPeriodTable,
        ProjEstimateColumn              _estimateColumn,
        ProjControlPeriodTableColumn    _projControlPeriodTableColumnAccEstimate = _projControlPeriodTableColumnAccEstimate)
    {
        if (_estimateColumn == ProjEstimateColumn::Total)
        {
            return super(_projControlPeriodTable,_estimateColumn);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PLCostAccCost</Name>
				<Source><![CDATA[
        // this method is only called in the second round
    AmountMST PLCostAccCost(
        ProjControlPeriodTable          _projControlPeriodTable,
        ProjEstimateColumn              _estimateColumn,
        ProjControlPeriodTableColumn    _projControlPeriodTableColumnAccEstimate = _projControlPeriodTableColumnAccEstimate)
    {
        switch (_estimateColumn)
        {
            case ProjEstimateColumn::Estimate:
                return 0;
            case ProjEstimateColumn::Accumulated:
                return  projControlColumnAccEstimatePrev.PLCostAccCost-0;
            case ProjEstimateColumn::Total:
                break;
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPAccruedTurnover</Name>
				<Source><![CDATA[
        protected AmountMST WIPAccruedTurnover(ProjControlPeriodTable _projControlPeriod)
    {
        return -(_projControlPeriod.ActualContract + this.WIPAccruedTurnoverAcc(_projControlPeriod));
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPAccruedTurnoverCredit</Name>
				<Source><![CDATA[
        public boolean WIPAccruedTurnoverCredit(ProjControlPeriodTable _projControlPeriod)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPAccruedTurnoverDebit</Name>
				<Source><![CDATA[
        public boolean WIPAccruedTurnoverDebit(ProjControlPeriodTable _projControlPeriod)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPAccruedTurnoverProd</Name>
				<Source><![CDATA[
        protected AmountMST WIPAccruedTurnoverProd(ProjControlPeriodTable _projControlPeriod)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPAccruedTurnoverProdCredit</Name>
				<Source><![CDATA[
        public boolean WIPAccruedTurnoverProdCredit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPAccruedTurnoverProdDebit</Name>
				<Source><![CDATA[
        public boolean WIPAccruedTurnoverProdDebit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPAccruedTurnoverProfit</Name>
				<Source><![CDATA[
        protected AmountMST WIPAccruedTurnoverProfit(ProjControlPeriodTable _projControlPeriod)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPAccruedTurnoverProfitCredit</Name>
				<Source><![CDATA[
        public boolean WIPAccruedTurnoverProfitCredit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPAccruedTurnoverProfitDebit</Name>
				<Source><![CDATA[
        public boolean WIPAccruedTurnoverProfitDebit()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>WIPCost</Name>
				<Source><![CDATA[
        protected AmountMST WIPCost(ProjControlPeriodTable _projControlPeriod)
    {
        return _projControlPeriod.ActualCostAmount - this.WIPCostAcc();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>