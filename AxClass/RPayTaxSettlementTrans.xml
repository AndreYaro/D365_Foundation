<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RPayTaxSettlementTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RPayTaxSettlementTrans extends RPayTaxSettlementUpdate
{
    TransDate startDate, endDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        QueryRun                queryRun;
        RPayTaxTransSettlement  settlement, settlementOffset;

        queryRun = this.qrPaymentSettlements();
        while (queryRun.next())
        {
            settlement = queryRun.get(tablenum(RPayTaxTransSettlement));

            delete_from settlementOffset
                where settlementOffset.TransRecId  == settlement.OffsetRecId &&
                      settlementOffset.OffsetRecId == settlement.TransRecId;

            settlement.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>markTransactons</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void markTransactons()
    {
        QueryRun                queryRun;
        RPayTaxTransOpen        rPayTaxTransOpen;

        specTransManager = SpecTransManager::newRefTableId(
            rPayTaxSettlement,
            tablenum(RPayTaxTransOpen),
            false);
        specTransManager.deleteAll();

        queryRun = this.qrOpenTrans();
        while (queryRun.next())
        {
            rPayTaxTransOpen = queryRun.get(tablenum(RPayTaxTransOpen));

            if (rPayTaxTransOpen.TaxSourceType != RPayTaxSourceType::TaxPayment &&
                (rPayTaxTransOpen.TransDate    <  taxFromDate                   ||
                 rPayTaxTransOpen.TransDate    >  taxToDate))
            {
                continue;
            }

            specTransManager.insert(rPayTaxTransOpen.DataAreaId,
                                    rPayTaxTransOpen.TableId,
                                    rPayTaxTransOpen.RecId,
                                    rPayTaxTransOpen.Amount - rPayTaxTransOpen.SettleAmount,
                                    CompanyInfoHelper::standardCurrency());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(RPayTaxPeriodicSettlement _settlement)
    {
        super(_settlement);

        startDate   = min(fromDate, taxFromDate);
        endDate     = max(toDate, taxToDate);

        rPayTaxSettlement = RPayTaxSettlement::find(_settlement.taxSettlement().RecId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrOpenTrans</Name>
				<Source><![CDATA[
    private QueryRun qrOpenTrans()
    {
        Query                   query;
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;

        query = new Query();
        dataSource = query.addDataSource(tablenum(RPayTaxTransOpen));

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, TransDate));
        range.value(queryRange(startDate, endDate));

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, BudgetReceiptClassCode));
        range.value(budgetClassCode);

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, BranchId));
        range.value(RPayTaxSettlementTrans::branchIdOrTaxAuthorityRange(rPayTaxSettlement));

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, Closed));
        range.value(queryValue(NoYes::No));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qrPaymentSettlements</Name>
				<Source><![CDATA[
    private QueryRun qrPaymentSettlements()
    {
        QueryBuildDataSource    dataSource;
        QueryBuildRange         range;
        Query                   query = new Query();

        dataSource = query.addDataSource(tablenum(RPayTaxTransSettlement));
        dataSource.update(true);

        range = dataSource.addRange(fieldnum(RPayTaxTransSettlement, TransDate));
        range.value(queryRange(startDate, endDate));

        range = dataSource.addRange(fieldnum(RPayTaxTransSettlement, Manual));
        range.value(queryValue(NoYes::No));
        range = dataSource.addRange(fieldnum(RPayTaxTransSettlement, CanBeReversed));
        range.value(queryValue(NoYes::Yes));

        dataSource = dataSource.addDataSource(tablenum(RPayTaxTransOpen));
        dataSource.joinMode(JoinMode::ExistsJoin);
        dataSource.relations(false);
        dataSource.addLink(fieldnum(RPayTaxTransSettlement, OffsetRecId), fieldnum(RPayTaxTransOpen, RecId));

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, TransDate));
        range.value(queryRange(fromDate, toDate));

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, BudgetReceiptClassCode));
        range.value(budgetClassCode);

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, TaxVendor));
        range.value(taxAuthorityVendor);

        range = dataSource.addRange(fieldnum(RPayTaxTransOpen, TaxSourceType));
        range.value(queryValue(RPayTaxSourceType::TaxPayment));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    public void update()
    {
        RPayTaxSettle taxSettle;

        this.init();
        this.markTransactons();

        taxSettle = RPayTaxSettle::construct(rPayTaxSettlement);
        taxSettle.settleNow();

        specTransManager.deleteAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>branchIdOrTaxAuthorityRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str branchIdOrTaxAuthorityRange(RPayTaxSettlement _taxSettlement)
    {
        str branchRange, taxVendorRange;
        container branchRangeCon;
        str range;
        int i;

        QueryRun                queryRun;
        Query                   query;
        QueryBuildDatasource    qbds;
        VendTable               vendTable;
        boolean                 vendorExists;

        str getBranchFilterStr()
        {
            str rangeLoc;
            switch (_taxSettlement.BranchFilterType)
            {
                case RPayBranchFilterType::All:
                    rangeLoc = SysQuery::valueUnlimited();
                    break;

                case RPayBranchFilterType::OnlyHeader:
                    rangeLoc = SysQuery::valueEmptyString();
                    break;

                case RPayBranchFilterType::Query:
                    rangeLoc = _taxSettlement.Branches;
                    break;
            }
            return rangeLoc;
        }

        if (_taxSettlement.TaxVendor)
        {
            taxVendorRange = ' && ';
            query = new Query();
            qbds = query.addDataSource(tablenum(VendTable));
            qbds.addRange(fieldnum(VendTable, AccountNum)).value(_taxSettlement.TaxVendor);

            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                vendorExists = true;
                vendTable = queryRun.get(tablenum(VendTable));
                taxVendorRange += strfmt('(%1 == \"%2\") || ',
                    fieldstr(RPayTaxTransOpen, TaxVendor),
                    queryvalue(vendTable.AccountNum));
            }

            if (vendorExists)
            {
                taxVendorRange = strdel(taxVendorRange, strlen(taxVendorRange), -4);
            }
            else
            {
                taxVendorRange = '';
            }
        }

        if (getBranchFilterStr() != SysQuery::valueUnlimited())
        {
            branchRangeCon = str2con(getBranchFilterStr());
            branchRange = ' && ';

            for (i = 1; i <= conlen(branchRangeCon); i++)
            {
                branchRange += strfmt('(%1 == \"%2\") || ',
                    fieldstr(RPayTaxTransOpen, BranchId),
                    conpeek(branchRangeCon, i) != SysQuery::valueEmptyString() ? any2str(conpeek(branchRangeCon, i)) : '');
            }

            branchRange = strdel(branchRange, strlen(branchRange), -4);
        }

        range = strfmt('(((%1 == %2)%3) || ((%1 != %2)%4))',
            fieldstr(RPayTaxTransOpen, TaxSourceType),
            enum2int(RPayTaxSourceType::TaxPayment),
            taxVendorRange,
            branchRange);

        return range;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>