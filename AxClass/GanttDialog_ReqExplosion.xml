<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttDialog_ReqExplosion</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttDialog_ReqExplosion extends GanttDialog
{
    #define.CancelButtonName('CancelButton')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>ganttClient</Name>
				<Source><![CDATA[
    public GanttClient ganttClient()
    {
        return this.parmGanttVisualization().parmGanttClient();
    }

]]></Source>
			</Method>
			<Method>
				<Name>info</Name>
				<Source><![CDATA[
    public void info(RecId _recId)
    {
        const int               DialogColumns1 = 1;
        const int               DialogColumns2 = 2;
        GanttData_ReqExplosion  localGanttData = this.parmGanttVisualization().parmGanttClient().parmGanttData();
        GanttTmpReqExplosion    localTableGanttReqExplosion;
        Dialog                  dialog;
        DialogGroup             dialogGroup;

        GanttTable_ReqExplosion ganttTable;

        ReqTrans                reqTrans;
        InventTable             inventTable;
        str                     strRefType;

        boolean isProdGanttApplyUserTimezoneOffsetFlightEnabled = ProdGanttApplyUserTimezoneOffsetFlight::instance().isEnabled() &&
            ProdApplyUserTimezoneOffsetFlight::instance().isEnabled() &&
            ProdParameters::find().ShowSchedDateTimeWithUserTimeZone == ProdShowDateTimeTimeZone::UserTimeZone;

        if (!_recId)
        {
            throw error(strfmt("@SYS27147", classId2Name(classidget(this))));
        }

        ganttTable = localGanttData.parmGanttTableReqExplosion();

        ganttTable.findRecId(_recId, true);

        reqTrans = ReqTrans::findRecId(ganttTable.origRecId());

        if (!reqTrans.RecId)
        {
            throw error(strfmt("@SYS102169", reqTrans.RecId));
        }

        inventTable = InventTable::find(reqTrans.ItemId);

        dialog = this.createDialog(strfmt("@SYS12836" + ': %1, %2', inventTable.ItemId, inventTable.defaultProductName()));
        dialog.form().design().control(#CancelButtonName).visible(0);
        dialog.form().design().dialogSize(1);

        FormBuildTabPageControl detailsTabPage = dialog.addTabPage("@SYS8811").control();
        detailsTabPage.fastTabExpanded(true);

        // Identification
        this.addFieldGroup(dialog, "@SYS5711", DialogColumns2);

        strRefType = enum2str(reqTrans.RefType);

        if (reqTrans.IsDerivedDirectly)
        {
            strRefType += ' (' + "@SYS53674" + ')';
        }

        this.addField(dialog, extendedTypeStr(GanttUndoString),      fieldpname(ReqTrans, RefType),  strRefType, false);

        if (reqTrans.RefId)
        {
            this.addField(dialog, extendedTypeStr(InventTransRefId), fieldpname(ReqTrans, RefId),            reqTrans.RefId);
        }

        this.addFieldGroup(dialog, '', DialogColumns2);
        this.addField(dialog, extendedTypeStr(ItemId),           fieldpname(ReqTrans, ItemId),               reqTrans.ItemId);
        this.addField(dialog, extendedTypeStr(ItemName),         fieldpname(EcoResProductTranslation, Name), InventTable::find(reqTrans.ItemId).defaultProductName());

        // Quantity
        this.addFieldGroup(dialog, "@SYS3065", DialogColumns2);
        this.addField(dialog, extendedTypeStr(ReqQty),           fieldpname(ReqTrans, Qty),                  reqTrans.Qty);
        this.addField(dialog, extendedTypeStr(ReqQtyCoverage),   fieldpname(ReqTrans, CovQty),               reqTrans.CovQty);

        // Scheduling
        dialogGroup = dialog.addGroup("@SYS334139");
        
        if (isProdGanttApplyUserTimezoneOffsetFlightEnabled)
        {
            utcdatetime utcValue = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::newDateTime(reqTrans.ReqDate, reqTrans.ReqTime), DateTimeUtil::getUserPreferredTimeZone());
            this.addField(dialog, extendedTypeStr(TransDateTime), fieldpname(ReqTrans, ReqDate),            utcValue);
            
            this.addFieldGroup(dialog, '');
            utcValue = DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::newDateTime(reqTrans.reqDateOrder(), reqTrans.reqTimeOrder()), DateTimeUtil::getUserPreferredTimeZone());
            this.addField(dialog, extendedTypeStr(TransDateTime), fieldpname(ReqPO,    ReqDateOrder),       utcValue);
        }
        else
        {
            dialogGroup.columns(DialogColumns2);

            this.addField(dialog, extendedTypeStr(ReqDate),      fieldpname(ReqTrans, ReqDate),              reqTrans.ReqDate);
            this.addField(dialog, extendedTypeStr(ReqTime),      fieldpname(ReqTrans, ReqTime),              reqTrans.ReqTime);

            this.addFieldGroup(dialog, '', DialogColumns2);
        
            this.addField(dialog, extendedTypeStr(ReqDateOrder), fieldpname(ReqPO,    ReqDateOrder),         reqTrans.reqDateOrder());
            this.addField(dialog, extendedTypeStr(ReqTimeOrder), fieldpname(ReqPO,    ReqTimeOrder),         reqTrans.reqTimeOrder());
        }

        this.addFieldGroup(dialog, '', DialogColumns1);
        this.addField(dialog, extendedTypeStr(FuturesDate),      fieldpname(ReqTrans, FuturesDate),          reqTrans.FuturesDate);
        this.addField(dialog, extendedTypeStr(ActionDate),       fieldpname(ReqTrans, ActionDate),           reqTrans.ActionDate);

        localTableGanttReqExplosion = ganttTable.parmTableBuffer();
        this.addField(dialog, extendedTypeStr(CalendarId),       fieldpname(WorkCalendarTable, CalendarId),  localTableGanttReqExplosion.CalendarId);

        dialog.run(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGanttVisualization</Name>
				<Source><![CDATA[
    public GanttVisualization parmGanttVisualization(GanttVisualization _ganttVisualization = ganttVisualization)
    {
        return super(_ganttVisualization);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttDialog_ReqExplosion construct()
    {
        return new GanttDialog_ReqExplosion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDialogFromVisualization</Name>
				<Source><![CDATA[
    public static GanttDialog_ReqExplosion newDialogFromVisualization(GanttVisualization _ganttVisualization)
    {
        GanttDialog_ReqExplosion ganttDialog = GanttDialog_ReqExplosion::construct();
        ganttDialog.parmGanttVisualization(_ganttVisualization);
        return ganttDialog;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>