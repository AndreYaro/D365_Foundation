<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkDeferredPutProcessingService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is used to process deferred put operations.
/// </summary>
public class WHSWorkDeferredPutProcessingService extends SysOperationServiceBase
{
    private WHSWorkDeferredPutProcessingTask    workDeferredPutProcessingTask;
    private WHSInstrumentationLogger            logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmWorkDeferredPutProcessingTask</Name>
				<Source><![CDATA[
    protected WHSWorkDeferredPutProcessingTask parmWorkDeferredPutProcessingTask()
    {
        return workDeferredPutProcessingTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPutWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the put work operation.
    /// </summary>
    /// <param name = "_contract">The contract used for processing.</param>
    [Hookable(false)]
    public void processPutWork(WHSWorkDeferredPutProcessingServiceContract _contract)
    {
        this.checkTtsLevel();

        this.process(_contract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTtsLevel</Name>
				<Source><![CDATA[
    private void checkTtsLevel()
    {
        // we want to ensure we are the outermost tts so we can deal with errors correctly
        if (!appl.ttsLevel() == 0)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    private boolean validate()
    {
        if (!this.validateWorkDeferredPutProcessingTask())
        {
            return false;
        }

        this.validateWorkHeaderAllowsProcessing();

        this.validateWorkLineAllowsProcessing();

        return true;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkDeferredPutProcessingTask</Name>
				<Source><![CDATA[
    private boolean validateWorkDeferredPutProcessingTask()
    {
        if (!workDeferredPutProcessingTask.RecId)
        {
            return false;
        }

        return workDeferredPutProcessingTask.checkStatusAllowsProcessing(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkHeaderAllowsProcessing</Name>
				<Source><![CDATA[
    private void validateWorkHeaderAllowsProcessing()
    {
        WHSWorkStatus workTableStatus = WHSWorkTable::find(workDeferredPutProcessingTask.WorkId).WorkStatus;
        if (!this.workStatusAllowsProcessing(workTableStatus))
        {
            throw error(strFmt("@WAX:WHSWorkDeferredPutProcessingTask_WorkHeaderStatusError", workDeferredPutProcessingTask.WorkId, workDeferredPutProcessingTask.WorkLineNumber, workTableStatus));
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkLineAllowsProcessing</Name>
				<Source><![CDATA[
    private void validateWorkLineAllowsProcessing()
    {
        // We don't expect the work line to be updated by others but to be safe we lock the workline so if another transaction is updating it we need to wait, and if we update it others will have to wait
        WHSWorkLine workLine = this.findPutWorkLineWithPessimisticLock();

        if (!workLine.RecId)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        if (!this.workStatusAllowsProcessing(workLine.WorkStatus))
        {
            throw error(strFmt("@WAX:WHSWorkDeferredPutProcessingTask_WorkLineStatusError", workDeferredPutProcessingTask.WorkId, workDeferredPutProcessingTask.WorkLineNumber, workLine.WorkStatus));
        }

        this.logWorkLineChange(workLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logWorkLineChange</Name>
				<Source><![CDATA[
    private void logWorkLineChange(WHSWorkLine _workLine)
    {
        if (_workLine.RecVersion != workDeferredPutProcessingTask.WorkLineRecVersion)
        {
            using (var activityContext = this.logger().workDeferredPut().putWorkLineRecVersionChangedAfterTaskCreation())
            {
                this.logger().logInformation(strFmt('Recversion of the put work line with recId %1 has changed after the deferred put processing task was created. Task WorkLineRecversion %2, WorkLine Recversion %3', _workLine.RecId, workDeferredPutProcessingTask.WorkLineRecVersion, _workLine.RecVersion));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>workStatusAllowsProcessing</Name>
				<Source><![CDATA[
    private boolean workStatusAllowsProcessing(WHSWorkStatus _workStatus)
    {
        switch (_workStatus)
        {
            case WHSWorkStatus::Closed:
            case WHSWorkStatus::Combined:
            case WHSWorkStatus::Cancelled:
                return false;
        }

        return true;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPutOperationParameters</Name>
				<Source><![CDATA[
    private WHSWorkPutOperationParameters createPutOperationParameters()
    {
        WHSWorkPutOperationParameters parameters = WHSWorkPutOperationParameters::construct();

        parameters.parmWorkId(workDeferredPutProcessingTask.WorkId);
        parameters.parmLineNum(workDeferredPutProcessingTask.WorkLineNumber);
        parameters.parmPutWMSLocationId(workDeferredPutProcessingTask.PutWMSLocationId);
        parameters.parmSourceLicensePlateId(workDeferredPutProcessingTask.SourceLicensePlateId);
        parameters.parmTargetLicensePlateId(workDeferredPutProcessingTask.TargetLicensePlateId);
        parameters.parmUserId(workDeferredPutProcessingTask.WorkUserId);
        parameters.parmWorkPutFlow(workDeferredPutProcessingTask.WorkPutFlow);
        parameters.parmHandleByLP(workDeferredPutProcessingTask.HandleByLicensePlate);
        
        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePutOperationCompletion</Name>
				<Source><![CDATA[
    private void prePutOperationCompletion()
    {
        workDeferredPutProcessingTask.changeStatusAndSetRelatedTime(WHSWorkDeferredOperationStatus::Started);

        this.unBlockWorkReason();
        this.closeWorkContainerTable();

        this.logger().logInformation('prePutOperationCompleted');
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPutOperation</Name>
				<Source><![CDATA[
    private void runPutOperation()
    {
        WHSWorkPutOperationParameters putOperationParamters = this.createPutOperationParameters();
            
        WhsWorkExecutePutAwayToLocation::newDeferredPut().runFromParameters(putOperationParamters); 
   
        this.logger().logInformation('runPutOperationCompleted');
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWorkDeferredPutProcessingTask</Name>
				<Source><![CDATA[
    private void setWorkDeferredPutProcessingTask(WHSWorkDeferredPutProcessingServiceContract _contract)
    {
        // we select with pessimistic lock to deal with scenarios where two users try to process the task in parallel
        workDeferredPutProcessingTask = WHSWorkDeferredPutProcessingTask::find(_contract.parmWorkId(), _contract.parmWorkLineNumber(), true, true);            
    }

]]></Source>
			</Method>
			<Method>
				<Name>logTaskDetails</Name>
				<Source><![CDATA[
    private void logTaskDetails()
    {
        this.logger().logRecordInformation(workDeferredPutProcessingTask);
          
        switch (workDeferredPutProcessingTask.Status)
        {
            case WHSWorkDeferredOperationStatus::Failed: 
                this.logger().logInformation('Processing a failed task');
                break;   
        }
     }

]]></Source>
			</Method>
			<Method>
				<Name>logger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger logger()
    {
        if (!logger)
        {
            logger = WHSInstrumentationLogger::createLogger(classStr(WHSWorkDeferredPutProcessingService));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    private void process(WHSWorkDeferredPutProcessingServiceContract _contract)
    {
        #OCCRetryCount
        setPrefix(strFmt("@WAX:WHSWorkDeferredPutProcessingServiceCaption", _contract.parmWorkId(), _contract.parmWorkLineNumber()));
        
        using (var activityContext = this.logger().workDeferredPut().processTask())
        {
            try
            {
                ttsbegin;
        
                this.setWorkDeferredPutProcessingTask(_contract);
                this.logTaskDetails();
                
                if (this.validate())
                {
                    this.prePutOperationCompletion();

                    using (WHSWorkDeferredPutInventTransSplitWithPessimisticLockContext context = WHSWorkDeferredPutInventTransSplitWithPessimisticLockContext::construct())
                    {
                        this.runPutOperation();
                    }    
         
                    this.postPutOperationCompletion();
                }
                ttscommit;
            }
            catch (Exception::DuplicateKeyException)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.updateStatusAndTrowError(_contract);
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.updateStatusAndTrowError(_contract);
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.updateStatusAndTrowError(_contract);
                }
                else
                {
                    retry;
                }
            }
            catch (Exception::Deadlock)
            {
                
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.logger().logError(strFmt('Deadlock - Unrecoverable exception when processing deferred put for work line with recId %1', WHSWorkLine::find(_contract.parmWorkId(), _contract.parmWorkLineNumber()).RecId));
                    this.updateStatusAndTrowError(_contract);
                }
                else
                {
                    WHSRandomDelay::delay(xSession::currentRetryCount());
                    retry;
                }
            
            }
            catch
            {
                this.logger().logError(strFmt('Unrecoverable exception when processing deferred put for work line with recId %1', WHSWorkLine::find(_contract.parmWorkId(), _contract.parmWorkLineNumber()).RecId));
                this.updateStatusAndTrowError(_contract);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unBlockWorkReason</Name>
				<Source><![CDATA[
    private void unBlockWorkReason()
    {
        WHSWorkUnBlockingValidationResult unblockingResult = WHSWorkBlocking::newFromWorkIdSkipInProgressWorkLineWithNoPreviousPutCheck(workDeferredPutProcessingTask.WorkId).tryUnBlockWorkWithReasonType(WHSWorkBlockingReasonType::DeferredPutOperation);

        if (!unblockingResult.parmCanUnBlockResult())
        {
            throw error(unblockingResult.errorMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPutOperationCompletion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes put operation.
    /// </summary>
    protected void postPutOperationCompletion()
    {
        workDeferredPutProcessingTask.changeStatusAndSetRelatedTime(WHSWorkDeferredOperationStatus::Completed);

        this.updateWorkClusterStatus();
        this.unlockWorkHeader();

        this.logger().logInformation('postPutOperationCompleted');
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlockWorkHeader</Name>
				<Source><![CDATA[
    private void unlockWorkHeader()
    {
        WHSWorkTable::lockUnlockWork(workDeferredPutProcessingTask.WorkId, '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInProcess</Name>
				<Source><![CDATA[
    private WHSWorkClusterTable findInProcess()
    {
        WHSWorkClusterLine workClusterLine;
        WHSWorkClusterTable workClusterTable;

        select firstonly workClusterTable
             where workClusterTable.WorkClusterStatus == WHSWorkClusterStatus::InProcess
        exists join workClusterLine
            where workClusterLine.WorkId == workDeferredPutProcessingTask.WorkId
            && workClusterLine.ClusterId == workClusterTable.ClusterId;

        return workClusterTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPutWorkLineWithPessimisticLock</Name>
				<Source><![CDATA[
    private WHSWorkLine findPutWorkLineWithPessimisticLock()
    {
        WHSWorkLine putWorkLine;
        
        using (var lockPutWorkLine = this.logger().workDeferredPut().lockPutWorkLine())
        {
            select pessimisticlock putWorkLine
                where putWorkLine.WorkId == workDeferredPutProcessingTask.WorkId
                    && putWorkLine.LineNum == workDeferredPutProcessingTask.WorkLineNumber;
        }

        return putWorkLine;    
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkClusterStatus</Name>
				<Source><![CDATA[
    private void updateWorkClusterStatus()
    {
        WHSClusterId clusterId;
        RefRecId     clusterTableRecId;
        
        clusterTableRecId = this.findInProcess().RecId;

        if (clusterId || clusterTableRecId)
        {
            WHSWorkClusterTable workClusterTable;

            using (var lockClusterTable = this.logger().workDeferredPut().lockClusterTable())
            {
                
                // We take a pessimistic lock to ensure we get the correct state updated when we have parallel processing of two puts for a cluster. 
                // The idea is that last update ensures the cluster is closed.
                workClusterTable = WHSWorkClusterTable::findByRecIdWithPessimisticLock(clusterTableRecId);             

                this.logger().logInformation(strFmt('Locked workClusterTable with RecId %1', workClusterTable.RecId));

                if (!workClusterTable.hasUnProcessedDeferredPuts())
                {
                    workClusterTable.updateStatus(WHSWorkClusterStatus::Closed);
                    this.logger().logInformation(strFmt('Updated workClusterTable with RecId %1 to Closed', workClusterTable.RecId));
                }            
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeWorkContainerTable</Name>
				<Source><![CDATA[
    private void closeWorkContainerTable()
    {
        // Close work's container
        if (!WHSWorkLine::isPutBefore(workDeferredPutProcessingTask.WorkId, workDeferredPutProcessingTask.WorkLineNumber))
        {
            using (var closeContainerTable = this.logger().workDeferredPut().closeContainerTable())
            {
                WHSContainerTable::determineContainerCloseConsiderLockType(workDeferredPutProcessingTask.WorkId, true);

                this.logger().logInformation('closeWorkContainerTableCompleted');
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatusAndTrowError</Name>
				<Source><![CDATA[
    private void updateStatusAndTrowError(WhsWorkDeferredPutProcessingServiceContract _contract)
    {
        ttsbegin;

        WHSWorkDeferredPutProcessingTask workDeferredPutProcessingTaskForError = WHSWorkDeferredPutProcessingTask::find(_contract.parmWorkId(), _contract.parmWorkLineNumber(), true);
            
        if (workDeferredPutProcessingTaskForError.Status != WHSWorkDeferredOperationStatus::Completed)
        {
            workDeferredPutProcessingTaskForError.changeStatusAndSetRelatedTime(WHSWorkDeferredOperationStatus::Failed);
        }

        ttscommit;
        
        //we need to throw here in case we run in batch since we want the batch job to appear with Error.
        throw error(strFmt("@WAX:WHSWorkDeferredPutProcessingService_ErrorTasksProcessingFailed", _contract.parmWorkId(), _contract.parmWorkLineNumber()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSWorkDeferredPutProcessingService construct()
    {
        return new WHSWorkDeferredPutProcessingService();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>