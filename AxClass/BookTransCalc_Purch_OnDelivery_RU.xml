<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookTransCalc_Purch_OnDelivery_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class BookTransCalc_Purch_OnDelivery_RU extends BookTransCalc_Purch_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmountAdjFactor</Name>
				<Source><![CDATA[
    protected Factor calcAmountAdjFactor(
        TaxCode          _taxCode,
        DimensionDefault _defaultDimension,
        container        _settledAmountsKey)
    {
        Factor                              factor;
        container                           key;
        FactureCalcBalances_OnDelivery_RU   factureCalcBalances;
        Map                                 mapFactureAmountsDetails;

        PurchBookVATProcessLogTransOper_RU  processLogTransOper;
        PurchBookVATProcessLogTrans_RU      processLogTrans;

        BookStructSmallVATAmounts_RU        baseAmounts, usedAmounts;

        recId                               transRecId;
        CompanyId                           transCompany;

        if (!mapFactureAdjBaseAmounts)
        {
            mapFactureAdjBaseAmounts = new Map(Types::Container, Types::Container);

            factureCalcBalances = new FactureCalcBalances_OnDelivery_RU(factureJour);
            factureCalcBalances.calc();

            mapFactureAdjBaseAmounts = factureCalcBalances.mapMapFactureAmounts();
        }

        transRecId   = conPeek(_settledAmountsKey, 3);
        transCompany = conPeek(_settledAmountsKey, 8);

        if (! mapFactureAdjBaseAmounts.exists(transRecId))
        {
            return 0;
        }

        mapFactureAmountsDetails = Map::create(mapFactureAdjBaseAmounts.lookup(transRecId));
        mapFactureAmountsDetails = this.groupByMapFactureAmounts(mapFactureAmountsDetails);

        key = [_taxCode, _defaultDimension, '', '', '', ''];

        if (mapFactureAmountsDetails.exists(key))
        {
            baseAmounts = BookStructSmallVATAmounts_RU::create(mapFactureAmountsDetails.lookup(key));

            if (! baseAmounts.amountLiableToVAT())
            {
                return 0;
            }

            usedAmounts = new BookStructSmallVATAmounts_RU();

            select sum(AmountLiableToVAT), sum(TaxAmount) from processLogTransOper
                where processLogTransOper.DefaultDimension    == _defaultDimension &&
                      processLogTransOper.TaxCode             == _taxCode          &&
                      processLogTransOper.Blocked             == NoYes::No         &&
                      processLogTransOper.BlockedAuto         == NoYes::No         &&
                      processLogTransOper.CanceledRefRecId    == 0                 &&
                      processLogTransOper.TransDate           >= fromDate          &&
                      processLogTransOper.TransDate           <= toDate
            exists join processLogTrans
                where processLogTrans.RecId           == processLogTransOper.RefRecId         &&
                      processLogTrans.FactureId       == factureJour.FactureId                &&
                      processLogTrans.InvoiceRecIdRef == transRecId                           &&
                      processLogTrans.InvoiceCompany  == transCompany                         &&
                      processLogTrans.ProcessingType  == PurchBookProcessingType_RU::Standard &&
                     !processLogTrans.PaymentRecIdRef;

            usedAmounts.addAmounts(processLogTransOper.AmountLiableToVAT + processLogTransOper.TaxAmount,
                                   processLogTransOper.AmountLiableToVAT,
                                   processLogTransOper.TaxAmount);

            factor = usedAmounts.amountLiableToVAT() / baseAmounts.amountLiableToVAT();
        }

        return factor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLogTrans</Name>
				<Source><![CDATA[
    protected container createLogTrans(TransDate                  _settlementDate,
                                       RefRecId                   _transRecid,
                                       RefRecId                   _offsetRecId,
                                       CompanyId                  _transCompany,
                                       CompanyId                  _offsetCompany,
                                       RefRecId                   _settlementRecId,
                                       RefRecId                   _processLogTransRecId,
                                       SalesPurchBookTransType_RU _transType,
                                       Map                        _settledAmounts,
                                       Map                        _mapFactureAmountsDetails,
                                       Map                        _mapAssetOpenAmounts = null,
                                       boolean                    _superCall           = false,
                                       PurchBookProcessingType_RU _processingType      = PurchBookProcessingType_RU::Standard,
                                       TransDate                  _correctedPeriod     = dateNull(),
                                       FactureId_RU               _correctedFactureId  = '')
    {
        MapEnumerator                mapEnumerator;
        TaxCode                      taxCode, prevTaxCode;
        DimensionDefault             defaultDimension, prevDefaultDimension;
        BookStructSmallVATAmounts_RU usedAmounts,
                                     blockedAmounts,
                                     settledAmounts,
                                     factureAmounts,
                                     assetBlockedAmounts,
                                     remainAssetBlockedAmounts;
        BookStructVATAmounts_RU      totalUsedAmounts, totalSettledAmounts;
        InventTransId                inventTransId, prevInventTransId;
        PurchInternalInvoiceId       internalInvoiceId;
        InvoiceId                    invoiceId;
        FactureId_RU                 exportFactureId;
        NumberSequenceGroupId        numberSequenceGroupId;
        container                    key;
        RAssetPaymentAllocation      assetPaymentAllocation = VendParameters::find().AssetPaymentAllocation_RU;
        container                    rDeferralsOpenAmounts;

        mapEnumerator        = _settledAmounts.getEnumerator();
        totalSettledAmounts  = new BookStructVATAmounts_RU();
        totalUsedAmounts     = new BookStructVATAmounts_RU();

        while (mapEnumerator.moveNext())
        {
            [taxCode, defaultDimension, inventTransId, internalInvoiceId, invoiceId, numberSequenceGroupId] = mapEnumerator.currentKey();

            if (conLen(mapEnumerator.currentKey()) > 6 && typeOf(conPeek(mapEnumerator.currentKey(), 7)) == Types::String)
            {
                exportFactureId = conPeek(mapEnumerator.currentKey(), 7);

                if (_correctedFactureId != exportFactureId)
                {
                    continue;
                }
            }

            if (prevTaxCode != taxCode || prevDefaultDimension != defaultDimension || prevInventTransId != inventTransId)
            {
                if (assetPaymentAllocation == RAssetPaymentAllocation::operationEqual)
                {
                    remainAssetBlockedAmounts = new BookStructSmallVATAmounts_RU();
                }
            }

            settledAmounts = BookStructSmallVATAmounts_RU::create(mapEnumerator.currentValue());

            switch (_transType)
            {
                case SalesPurchBookTransType_RU::PrepaymentStorno:
                    settledAmounts.reverseAmounts();
                    key = [taxCode, defaultDimension, ''];
                    break;

                case SalesPurchBookTransType_RU::SumDiff           :
                case SalesPurchBookTransType_RU::ExchAdj           :
                case SalesPurchBookTransType_RU::AdvanceAdjustment :
                case SalesPurchBookTransType_RU::GTD                :
                case SalesPurchBookTransType_RU::CustomCorrection   :
                    key = [taxCode, defaultDimension, ''];
                    break;

                case SalesPurchBookTransType_RU::VATStandardCancellation :
                    settledAmounts.reverseAmountsAndQty();
                    key = [taxCode, defaultDimension, inventTransId, internalInvoiceId, invoiceId, numberSequenceGroupId];
                    break;

                default:
                    key = [taxCode, defaultDimension, inventTransId, internalInvoiceId, invoiceId, numberSequenceGroupId];
                    break;
            }

            factureAmounts = BookStructSmallVATAmounts_RU::create(_mapFactureAmountsDetails.lookup(key));
            if (_transType == SalesPurchBookTransType_RU::VATStandardCancellation)
            {
                factureAmounts.reverseAmountsAndQty();
            }

            usedAmounts    = PurchBookVATProcessLogTransOper_RU::usedAmounts_OnDelivery(factureJour.FactureId,
                                                                                        taxCode,
                                                                                        defaultDimension,
                                                                                        inventTransId,
                                                                                        _transRecid,
                                                                                        _transCompany,
                                                                                        false,
                                                                                        PurchBookVATDocumentType_RU::Unknown,
                                                                                        NoYes::No,
                                                                                        isGroupBy,
                                                                                        dateNull(),
                                                                                        false,
                                                                                        dateNull(),
                                                                                        _processingType,
                                                                                        exportFactureId);

            blockedAmounts = PurchBookVATProcessLogTransOper_RU::usedAmounts_OnDelivery(factureJour.FactureId,
                                                                                        taxCode,
                                                                                        defaultDimension,
                                                                                        inventTransId,
                                                                                        _transRecid,
                                                                                        _transCompany,
                                                                                        true,
                                                                                        PurchBookVATDocumentType_RU::Unknown,
                                                                                        NoYes::No,
                                                                                        isGroupBy,
                                                                                        #TransitionStartDate,
            false,
                                                                                        dateNull(),
                                                                                        _processingType,
                                                                                        exportFactureId);

            if (_mapAssetOpenAmounts)
            {
                assetBlockedAmounts = this.calcAssetBlockedAmounts(settledAmounts, blockedAmounts, usedAmounts, _mapAssetOpenAmounts.lookup(key), remainAssetBlockedAmounts);
            }

            rDeferralsOpenAmounts = this.calcRDeferralOpenAmounts(_processLogTransRecId, settledAmounts, usedAmounts, _settlementRecId, inventTransId, taxCode, defaultDimension);

            TmpPurchBookVATProcessLogTransOper_RU::createLines(tmpProcessLogTransOper,
                                                               factureJour.FactureId,
                                                               max(_settlementDate, factureJour.FactureReportDate),
                                                               prmisDefault(_processingType) ? operationRecId : 0,
                                                               defaultDimension,
                                                               taxCode,
                                                               inventTransId,
                                                               _transType,
                                                               factureAmounts,
                                                               settledAmounts,
                                                               usedAmounts,
                                                               blockedAmounts,
                                                               assetBlockedAmounts,
                                                               _transRecid,
                                                               _offsetRecId,
                                                               _transCompany,
                                                               _offsetCompany,
                                                               _settlementRecId,
                                                               _processLogTransRecId,
                                                               closingDate,
                                                               _settlementDate,
                                                               isGroupBy,
                                                               PurchBookVATDocumentType_RU::Unknown,
                                                               false,
                                                               blockedAmounts.amountInclVAT() ? #TransitionStartDate : dateNull(),
                                                               _processingType,
                                                               conPeek(rDeferralsOpenAmounts, 1));

            this.processRDeferralsCorrectedAmounts(conPeek(rDeferralsOpenAmounts, 2), _processLogTransRecId, inventTransId, taxCode, defaultDimension);

            totalSettledAmounts.addSmallAmounts2(taxCode, settledAmounts);
            totalUsedAmounts.addSmallAmounts2(taxCode, usedAmounts);

            prevTaxCode          = taxCode;
            prevDefaultDimension = defaultDimension;
            prevInventTransId    = inventTransId;
        }

        return [totalSettledAmounts.pack(), totalUsedAmounts.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFacture</Name>
				<Source><![CDATA[
    protected void processFacture()
    {
        this.processInvoice();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoice</Name>
				<Source><![CDATA[
    protected void processInvoice()
    {
        FactureCalcBalances_OnDelivery_RU    factureCalcBalances = new FactureCalcBalances_OnDelivery_RU(factureJour);
        Str1260                              countryGTD;
        container                            totalAmounts;
        BookStructVATAmounts_RU              totalFactureAmounts, totalUsedAmounts, totalSettledAmounts;
        SalesPurchBookTransType_RU           transType;
        Map                                  mapMapFactureAmounts, mapFactureAmountsDetails;
        MapEnumerator                        mapEnumerator;
        recId                                transRecId;
        Map                                  mapAssetOpenAmounts;
        CompanyId                            curCompany = curext();

        factureCalcBalances.calc();

        mapMapFactureAmounts = factureCalcBalances.mapMapFactureAmounts();
        mapEnumerator        = mapMapFactureAmounts.getEnumerator();

        while (mapEnumerator.moveNext())
        {
            totalFactureAmounts      = BookStructVATAmounts_RU::create(factureCalcBalances.mapFactureAmounts().lookup(mapEnumerator.currentKey()));
            mapFactureAmountsDetails = Map::create(mapEnumerator.currentValue());

            transRecId = mapEnumerator.currentKey();
            countryGTD = this.appendGtd(VendTrans::find(mapEnumerator.currentKey()));

            if (factureJour.ProcessingType == SalesBookFactureProcessingType_RU::VATStandardCancellation)
            {
                transType = SalesPurchBookTransType_RU::VATStandardCancellation;
                totalFactureAmounts.reverseAmounts();
            }
            else
            {
                transType = totalFactureAmounts.amountInclVAT() > 0 ? SalesPurchBookTransType_RU::Invoice   :
                                                                      SalesPurchBookTransType_RU::CreditNote;
            }

            mapAssetOpenAmounts = this.groupByMapFactureAmounts(this.initMapAssetOpenAmounts(mapFactureAmountsDetails, transRecId, maxDate()), true);
            if (! isGroupBy)
            {
                mapAssetOpenAmounts = this.groupByAssetUsedAmounts(mapAssetOpenAmounts, transRecId);
            }

            TmpPurchBookVATProcessLogTrans_RU::createLine(salesPurchBookDataMap,
                                                          factureJour.FactureId,
                                                          factureJour.FactureExternalId,
                                                          factureJour.FactureDate,
                                                          dateNull(),
                                                          transType == SalesPurchBookTransType_RU::VATStandardCancellation ?
                                                          CustTrans::find(mapEnumerator.currentKey()).TransDate            :
                                                          VendTrans::find(mapEnumerator.currentKey()).TransDate,
                                                          dateNull(),
                                                          factureJour.CustVendInvoiceAccount,
                                                          this.findCustVendName(factureJour.Module, factureJour.CustVendInvoiceAccount),
                                                          countryGTD,
                                                          transType,
                                                          mapEnumerator.currentKey(),
                                                          0,
                                                          transType == SalesPurchBookTransType_RU::VATStandardCancellation ?
                                                          tableNum(CustTrans)                                              :
                                                          tableNum(VendTrans),
                                                          curCompany,
                                                          curCompany,
                                                          0,
                                                          0,
                                                          dateNull(),
                                                          dateNull(),
                                                          PurchBookProcessingType_RU::Standard,
                                                          dateNull(),
                                                          '',
                                                          false,
                                                          factureJour.FactureReportDate);

            totalAmounts = this.createLogTrans(dateNull(),
                                               mapEnumerator.currentKey(),
                                               0,
                                               curCompany,
                                               curCompany,
                                               0,
                                               salesPurchBookDataMap.RecId,
                                               transType,
                                               this.groupByMapFactureAmounts(mapFactureAmountsDetails, isGroupBy),
                                               this.groupByMapFactureAmounts(mapFactureAmountsDetails, isGroupBy),
                                               mapAssetOpenAmounts);

            totalSettledAmounts  = BookStructVATAmounts_RU::create(conPeek(totalAmounts, 1));
            totalUsedAmounts     = BookStructVATAmounts_RU::create(conPeek(totalAmounts, 2));
            totalFactureAmounts.isGroupBy(isGroupBy);

            TmpPurchBookVATProcessLogTrans_RU::updateLine(salesPurchBookDataMap,
                                                          totalFactureAmounts,
                                                          totalSettledAmounts,
                                                          totalUsedAmounts,
                                                          fromDate);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxCorrection</Name>
				<Source><![CDATA[
    protected void processTaxCorrection()
    {
        MapEnumerator                   mapEnumerator;
        BookStructVATAmounts_RU         totalSettledAmounts, totalUsedAmounts, totalFactureAmounts;
        BookStructSmallVATAmounts_RU    settledAmounts, usedAmounts, blockedAmounts, factureAmounts;
        TaxCode                         taxCode;
        DimensionDefault                defaultDimension;
        Map                             mapSettledAmounts, mapFactureAmounts;
        CompanyId                       curCompany = curext();
        container                       rDeferralsOpenAmounts;

        totalSettledAmounts  = new BookStructVATAmounts_RU();
        totalFactureAmounts  = new BookStructVATAmounts_RU();
        totalUsedAmounts     = new BookStructVATAmounts_RU();

        mapSettledAmounts = FactureJour_RU::factureAmounts(factureJour);
        mapFactureAmounts = Map::create(mapSettledAmounts.pack());

        mapEnumerator     = mapFactureAmounts.getEnumerator();

        TmpPurchBookVATProcessLogTrans_RU::createLine(salesPurchBookDataMap,
                                                      factureJour.FactureId,
                                                      factureJour.FactureExternalId,
                                                      factureJour.FactureDate,
                                                      factureJour.FactureDate,
                                                      factureJour.PrepaymTaxCorrection == NoYes::Yes ? factureJour.CorrectedFactureDate : factureJour.FactureDate_External,
                                                      factureJour.FactureDate,
                                                      factureJour.CustVendInvoiceAccount,
                                                      this.findCustVendName(factureJour.Module, factureJour.CustVendInvoiceAccount),
                                                      '',
                                                      SalesPurchBookTransType_RU::TaxCorrection,
                                                      0,
                                                      0,
                                                      0,
                                                      curCompany,
                                                      curCompany,
                                                      0);

        while (mapEnumerator.moveNext())
        {
            [taxCode, defaultDimension] = mapEnumerator.currentKey();

            factureAmounts = BookStructSmallVATAmounts_RU::create(mapEnumerator.currentValue());
            totalFactureAmounts.addSmallAmounts2(taxCode, factureAmounts);

            settledAmounts = BookStructSmallVATAmounts_RU::create(mapSettledAmounts.lookup(mapEnumerator.currentKey()));
            totalSettledAmounts.addSmallAmounts2(taxCode, settledAmounts);

            usedAmounts     = PurchBookVATProcessLogTransOper_RU::usedAmounts_OnDelivery(factureJour.FactureId,
                                                                                         taxCode,
                                                                                         defaultDimension,
                                                                                         '',
                                                                                         0,
                                                                                         curCompany,
                                                                                         false,
                                                                                         PurchBookVATDocumentType_RU::Unknown,
                                                                                         NoYes::No,
                                                                                         true,
                                                                                         dateNull(),
                                                                                         false);

            blockedAmounts  = PurchBookVATProcessLogTransOper_RU::usedAmounts_OnDelivery(factureJour.FactureId,
                                                                                         taxCode,
                                                                                         defaultDimension,
                                                                                         '',
                                                                                         0,
                                                                                         curCompany,
                                                                                         true,
                                                                                         PurchBookVATDocumentType_RU::Unknown,
                                                                                         NoYes::No,
                                                                                         true,
                                                                                         #TransitionStartDate,
            false);

            totalUsedAmounts.addSmallAmounts2(taxCode, usedAmounts);

            rDeferralsOpenAmounts = this.calcRDeferralOpenAmounts(salesPurchBookDataMap.RecId, settledAmounts, usedAmounts, 0, '', taxCode, defaultDimension);

            TmpPurchBookVATProcessLogTransOper_RU::createLines(tmpProcessLogTransOper,
                                                               factureJour.FactureId,
                                                               factureJour.FactureDate,
                                                               operationRecId,
                                                               defaultDimension,
                                                               taxCode,
                                                               '',
                                                               SalesPurchBookTransType_RU::TaxCorrection,
                                                               factureAmounts,
                                                               settledAmounts,
                                                               usedAmounts,
                                                               blockedAmounts,
                                                               null,
                                                               0,
                                                               0,
                                                               curCompany,
                                                               curCompany,
                                                               0,
                                                               salesPurchBookDataMap.RecId,
                                                               closingDate,
                                                               factureJour.FactureDate,
                                                               false,
                                                               PurchBookVATDocumentType_RU::Unknown,
                                                               false,
                                                               blockedAmounts.amountInclVAT() ? #TransitionStartDate : dateNull(),
                                                               PurchBookProcessingType_RU::Standard,
                                                               conPeek(rDeferralsOpenAmounts, 1),
                                                               factureJour.VATTaxAgent);

            this.processRDeferralsCorrectedAmounts(conPeek(rDeferralsOpenAmounts, 2), salesPurchBookDataMap.RecId, '', taxCode, defaultDimension);
        }

        TmpPurchBookVATProcessLogTrans_RU::updateLine(salesPurchBookDataMap,
                                                      totalFactureAmounts,
                                                      totalSettledAmounts,
                                                      totalUsedAmounts,
                                                      fromDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>