<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RLedgerSheetServer_TurnoverBond</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RLedgerSheetServer_TurnoverBond extends RLedgerSheetServer
{
    Map                 accountBalances, rowTotals, colTotals;

    DimensionAttributeValueTotallingCriteria lastDimAttrValueTotCrit;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSumAccount</Name>
				<Source><![CDATA[
    private void addSumAccount(Map _map, AccountNum _accountNum)
    {
        DimensionAttributeValue dimensionAttributeValue;
        MainAccount             mainAccount;

        if (!lastDimAttrValueTotCrit || _accountNum < lastDimAttrValueTotCrit.FromValue || _accountNum > lastDimAttrValueTotCrit.ToValue)
        {
            select firstOnly lastDimAttrValueTotCrit
                where lastDimAttrValueTotCrit.FromValue <= _accountNum
                    && lastDimAttrValueTotCrit.ToValue  >= _accountNum
            join tableId from dimensionAttributeValue
                where dimensionAttributeValue.RecId               == lastDimAttrValueTotCrit.DimensionAttributeValue
                    && dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
            join MainAccountId from mainAccount
                where mainAccount.RecId                 == dimensionAttributeValue.EntityInstance
                   && mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current();

            if (mainAccount.MainAccountId)
            {
                _map.insert(mainAccount.MainAccountId, 0);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSumAccount</Name>
				<Source><![CDATA[
    public void calcSumAccount()
    {
        MainAccount             heading;
        MainAccount             mainAccount;
        DimensionAttributeValue dimensionAttributeValue;
        DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;

        void updateSum(boolean _rows)
        {
            Map             mapTotals = _rows ? rowTotals : colTotals;
            MapEnumerator   mapIterator = accountBalances.getEnumerator();
            container       cont;
            MainAccountNum  account;
            Amount          amount, totalAmount;
            Counter         i = _rows ? 1 : value2,
                            j = _rows ? value2 : 1;
            Map             accountBalancesLoc = new Map(Types::Container, Types::Real);

            while (mapIterator.moveNext())
            {
                account = conpeek(mapIterator.currentKey(), i);
                if (account && account == mainAccount.MainAccountId)
                {
                    cont = _rows? [heading.MainAccountId, conpeek(mapIterator.currentKey(), j)] :
                                     [conpeek(mapIterator.currentKey(), j),  heading.MainAccountId];

                    amount = mapIterator.currentValue();
                    amount = dimAttrValueTotCrit.InvertTotalSign ? - amount : amount;
                    totalAmount = this.getTotalAmount(totalAmount, mapIterator, j, amount);

                    if (accountBalancesLoc.exists(cont))
                    {
                        amount += accountBalancesLoc.lookup(cont);
                    }
                    else if (accountBalances.exists(cont))
                    {
                        amount += accountBalances.lookup(cont);
                    }

                    accountBalancesLoc.insert(cont, amount);
                }
            }

            MapEnumerator accountBalancesLocEnumerator = accountBalancesLoc.getEnumerator();
            while (accountBalancesLocEnumerator.moveNext())
            {
                accountBalances.insert(accountBalancesLocEnumerator.currentKey(), accountBalancesLocEnumerator.currentValue());
            }

            if (mapTotals.exists(heading.MainAccountId))
            {
                totalAmount += mapTotals.lookup(heading.MainAccountId);
            }
            mapTotals.insert(heading.MainAccountId, totalAmount);
        }

        while select MainAccountId, RecId from heading
            where heading.Type == DimensionLedgerAccountType::Total
               && heading.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
        {
            while select TableId from dimensionAttributeValue
                where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                   && dimensionAttributeValue.EntityInstance == heading.RecId
                join InvertTotalSign, FromValue, ToValue from dimAttrValueTotCrit
                    where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
            {
                SysDaSearchObject searchObject = RLedgerSheetCalcSumAccountQuery::createSearchObject(dimAttrValueTotCrit, LedgerChartOfAccounts::current(), heading);

                SysDaSearchStatement searchStatement = new SysDaSearchStatement();

                while (searchStatement.next(searchObject))
                {
                    if (rowTotals.exists(heading.MainAccountId))
                    {
                       updateSum(true);
                    }
                    if (colTotals.exists(heading.MainAccountId))
                    {
                       updateSum(false);
                    }
                }
            }
        }

        if (deleteZero)
        {
            this.deleteZeroSumAccount();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total amount.
    /// </summary>
    /// <param name = "_totalAmount">
    /// The total aount.
    /// </param>
    /// <param name = "_mapIterator">
    /// The iterator.
    /// </param>
    /// <param name = "_j">
    /// The counter.
    /// </param>
    /// <param name = "_amount">
    /// The total amount.
    /// </param>
    /// <returns>
    /// The updated total amount.
    /// </returns>
    [Wrappable(true)]
    protected final Amount getTotalAmount(Amount _totalAmount, MapEnumerator _mapIterator, counter _j, Amount _amount)
    {
        Amount totalAmount = _totalAmount;
        totalAmount += MainAccount::findByMainAccountId(conpeek(_mapIterator.currentKey(), _j)).Type != DimensionLedgerAccountType::Total ? _amount : 0;

        return totalAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOrDeleteZero</Name>
				<Source><![CDATA[
    private boolean checkOrDeleteZero(MainAccountNum _account,
                                      Counter       _i,
                                      boolean       _checkOnly = true)
    {
        MainAccountNum ledAccount;
        Set           mapSet = accountBalances.keySet();
        SetEnumerator   si     = mapSet.getEnumerator();
        container     cont;

        si.reset();
        while (si.moveNext())
        {
            cont       = si.current();
            ledAccount = conpeek(cont, _i);

            if (ledAccount == _account)
            {
                if (accountBalances.exists(cont))
                {
                    if (_checkOnly)
                    {
                        if (accountBalances.lookup(cont) != 0)
                            return false;
                    }
                    else
                    {
                        accountBalances.remove(cont);
                    }
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteZeroLine</Name>
				<Source><![CDATA[
    public void deleteZeroLine()
    {
        void checkTotals(Map     _map,
                         boolean _rows)
        {
            MainAccount     mainAccount;
            int             i = _rows ? 1 : value2;

            while select Type, MainAccountId from mainAccount
                where mainAccount.Type                  != DimensionLedgerAccountType::Total &&
                      mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
            {
                if (_map.exists(mainAccount.MainAccountId))
                {
                    if (! _map.lookup(mainAccount.MainAccountId))
                    {
                        if (this.checkOrDeleteZero(mainAccount.MainAccountId, i))
                        {
                            this.checkOrDeleteZero(mainAccount.MainAccountId, i, false);
                            _map.remove(mainAccount.MainAccountId);
                        }
                    }
                }
            }
        }

        checkTotals(rowTotals, true);
        checkTotals(colTotals, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteZeroSumAccount</Name>
				<Source><![CDATA[
    private void deleteZeroSumAccount()
    {
        MainAccount heading;
        MainAccount mainAccount;
        DimensionAttributeValue dimensionAttributeValue;
        DimensionAttributeValueTotallingCriteria dimAttrValueTotCrit;
        boolean delRow,delCol;

        while select MainAccountId, RecId from heading
            where heading.Type == DimensionLedgerAccountType::Total
               && heading.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
        {
            delRow = true;
            delCol = true;

            while select TableId from dimensionAttributeValue
                 where dimensionAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                   && dimensionAttributeValue.EntityInstance == heading.RecId
                join InvertTotalSign, FromValue, ToValue from dimAttrValueTotCrit
                    where dimAttrValueTotCrit.DimensionAttributeValue == dimensionAttributeValue.RecId
            {
                SysDaSearchObject searchObject = RLedgerSheetCalcSumAccountQuery::createSearchObject(dimAttrValueTotCrit, LedgerChartOfAccounts::current(), mainAccount);

                SysDaSearchStatement searchStatement = new SysDaSearchStatement();

                while (searchStatement.next(searchObject))
                {
                    delRow = delRow && ! rowTotals.exists(mainAccount.MainAccountId);
                    delCol = delCol && ! colTotals.exists(mainAccount.MainAccountId);
                    if (! delRow && ! delCol)
                    {
                        break;
                    }
                }
            }
            if (delRow)
            {
                this.checkOrDeleteZero(heading.MainAccountId, 1, false);
                rowTotals.remove(heading.MainAccountId);
            }
            if (delCol)
            {
                this.checkOrDeleteZero(heading.MainAccountId, value2, false);
                colTotals.remove(heading.MainAccountId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountBalance</Name>
				<Source><![CDATA[
    public Map getAccountBalance()
    {
        return accountBalances;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getColTotals</Name>
				<Source><![CDATA[
    public Map getColTotals()
    {
        return colTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGlobalMap</Name>
				<Source><![CDATA[
    public Map getGlobalMap()
    {
        Map mapGlobal = new Map(Types::Integer, Types::Container);

        mapGlobal.insert(1, accountBalances.pack());
        mapGlobal.insert(value2, rowTotals.pack());
        mapGlobal.insert(value3, colTotals.pack());

        return mapGlobal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRowTotals</Name>
				<Source><![CDATA[
    public Map getRowTotals()
    {
        return rowTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAccounts</Name>
				<Source><![CDATA[
    protected void initAccounts()
    {
        Query                   q;
        QueryRun                qr;
        QueryBuildDataSource    ds;
        QueryBuildRange         range;

        void createQRunLedgerTable(int _dataSourceNo)
        {
            Map         map = _dataSourceNo == 1 ? rowTotals : colTotals;
            MainAccount mainAccount;
            int         i;

            q   = new Query();
            ds  = q.addDataSource(tablenum(MainAccount));

            range = ds.addRange(fieldnum(MainAccount, Type));

            range.value(SysQuery::range(SysQuery::valueUnlimited(), queryValue(DimensionLedgerAccountType::Equity)));

            range = ds.addRange(fieldnum(MainAccount, LedgerChartOfAccounts));
            range.value(queryValue(LedgerChartOfAccounts::current()));

            i = 1;

            range = queryRun.query().dataSourceTable(tablenum(MainAccount), _dataSourceNo).findRange(fieldId2Ext(fieldnum(MainAccount, MainAccountId), 1), i);

            while (range)
            {
                ds.addRange(fieldnum(MainAccount, MainAccountId)).value(range.value());
                i++;
                range = queryRun.query().dataSourceTable(tablenum(MainAccount), _dataSourceNo).findRange(fieldId2Ext(fieldnum(MainAccount, MainAccountId), 1), i);
            }

            qr = new QueryRun(q);

            while (qr.next())
            {
                mainAccount = qr.get(tablenum(MainAccount));

                map.insert(mainAccount.MainAccountId, 0);

                if (showSumAccount)
                {
                    this.addSumAccount(map, mainAccount.MainAccountId);
                }
            }
        }

        super();

        accountBalances = new Map(Types::Container, Types::Real);
        rowTotals       = new Map(Types::String,    Types::Real);
        colTotals       = new Map(Types::String,    Types::Real);

        createQRunLedgerTable(1);
        createQRunLedgerTable(value2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAccounts</Name>
				<Source><![CDATA[
    public void updateAccounts(GeneralJournalAccountEntry _parentEntry,
                               GeneralJournalAccountEntry _childEntry)
    {
        MainAccountNum parentMainAccountNum = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_parentEntry.LedgerDimension);
        MainAccountNum childMainAccountNum  = LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(_childEntry.LedgerDimension);
        container cont        = [parentMainAccountNum, childMainAccountNum];
        Amount    transAmount = this.getTransAmount(_childEntry),
                  curAmount;

        if (accountBalances.exists(cont))
        {
            curAmount = accountBalances.lookup(cont);
        }
        accountBalances.insert(cont, curAmount + transAmount);

        curAmount = 0;
        if (colTotals.exists(childMainAccountNum))
        {
            curAmount = colTotals.lookup(childMainAccountNum);
        }
        colTotals.insert(childMainAccountNum, curAmount + transAmount);

        curAmount = 0;
        if (rowTotals.exists(parentMainAccountNum))
        {
            curAmount = rowTotals.lookup(parentMainAccountNum);
        }
        rowTotals.insert(parentMainAccountNum, curAmount + transAmount);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>