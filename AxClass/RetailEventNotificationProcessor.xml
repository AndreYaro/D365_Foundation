<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailEventNotificationProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Generates the statement for all the transactions for a particular store and also for all the staffs and terminals involved in the specified store.
/// </summary>
/// <remarks>
/// Runs the class in batch.
/// </remarks>
[SysObsolete('This class is obsolete. Use RetailEventNotificationParallelProcessor instead. Use RetailEventNotificationService to send mail.',
    true, 06\08\2020)]
class RetailEventNotificationProcessor extends RunBaseBatch implements BatchRetryable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    private RetailEventNotificationService eventNotificationService;
    
    SysIMailerNonInteractive mailer;
    
    Map   notificationTypeEnabledStateCache = new Map(Types::Enum, Types::AnyType);
    const str SendEmailTaskName = 'SendEmail';
    const str DeleteNotificationsEventName = 'DeleteNotifications';
    const str SendEmailErrorLog = 'SendEmailError';
    const str emailNotificationProcessorTaskName = 'ProcessEventNotifications';
    const str emailConstructionErrorLog = 'EmailNotificationConstructionError';

    #define.CurrentVersion(2)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the statement for all the transactions for a particular store and also for all the staffs involved in the specified store.
    /// </summary>
    /// <remarks>
    /// Create the statement based on the particular Store for all staffs and all terminals.
    /// </remarks>
    [Replaceable]
    public void run()
    {
        var eventNotificationParallelProcessor = new RetailEventNotificationParallelProcessor();
        eventNotificationParallelProcessor.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendMail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends an email message without having to set any properties or collections.
    /// </summary>
    /// <param name="fromAddr">
    /// The sender of the email message, which is typically the email address of the person who sends the
    /// message.
    /// </param>
    /// <param name="toAddr">
    /// The destination address of the email.
    /// </param>
    /// <param name="subject">
    /// The subject of the message.
    /// </param>
    /// <param name="body">
    /// The body of the message.
    /// </param>
    [Replaceable]
    public void sendMail(str fromAddr, str toAddr, str subject, str body)
    {
        if (eventNotificationService == null)
        {
            eventNotificationService = new RetailEventNotificationService();
        }
        
        eventNotificationService.trySendEmail(RetailEventNotificationSendEmailParameters::construct(fromAddr, toAddr, subject, body));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@RET4160051";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailEventNotificationProcessor eventNotificationProcessor = new RetailEventNotificationProcessor();
        if (eventNotificationProcessor.prompt())
        {
            RetailEventNotificationProcessor::runServer(eventNotificationProcessor.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is executed in the server which calls the method <c>run</c> to execute the actual process of creating statement for a particular store.
    /// </summary>
    /// <param name="_packedRetailEventNotificationProcessor">
    /// A container which holds the values entered in the prompt.
    /// </param>
    static void runServer(container _packedRetailEventNotificationProcessor)
    {
        RetailEventNotificationProcessor  retailEventNotificationProcessor = new RetailEventNotificationProcessor();

        retailEventNotificationProcessor.unpack(_packedRetailEventNotificationProcessor);
        retailEventNotificationProcessor.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>