<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustExchAdjTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CustExchAdjTrans extends CustVendExchAdjTrans
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOpenTransQuery</Name>
				<Source><![CDATA[
    protected Query createOpenTransQuery(Query _baseQuery)
    {
        container originalQuery;
        Query openTransQuery;
        QueryBuildDataSource custTransDs;
        QueryBuildDataSource custTransOpenDs;

        // Pack/unpack query to get a fresh instance
        originalQuery = _baseQuery.pack();
        openTransQuery = new Query(originalQuery);

        // Create a query to get open transactions based on the user-defined query

        custTransDs = openTransQuery.dataSourceTable(tablenum(CustTrans));
        custTransDs.addRange(fieldnum(CustTrans, TransDate)).value(queryRange(dateNull(), exchangeAdjustmentController.postingDate()));

        custTransOpenDs = openTransQuery.dataSourceTable(tableNum(CustTrans_W)).addDataSource(tableNum(CustTransOpen));
        custTransOpenDs.update(true);
        custTransOpenDs.addLink(fieldnum(CustTrans, RecId), fieldnum(CustTransOpen, RefRecId), custTransDs.name());
        custTransOpenDs.joinMode(JoinMode::InnerJoin);
        custTransOpenDs.relations(false);

        return openTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSettledTransQuery</Name>
				<Source><![CDATA[
    protected Query createSettledTransQuery(Query _baseQuery)
    {
        // Pack/unpack query to get a fresh instance
        container originalQuery = _baseQuery.pack();
        Query settledTransQuery = new Query(originalQuery);

        this.setupQueryForSettledTransaction(settledTransQuery);

        return settledTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReversedTransQuery</Name>
				<Source><![CDATA[
    protected Query createReversedTransQuery(Query _baseQuery)
    {
        // Pack/unpack query to get a fresh instance
        container originalQuery = _baseQuery.pack();
        Query settledTransQuery = new Query(originalQuery);

        // Create a query to get settled transactions based on the user-defined query
        QueryBuildDataSource custTransDs = this.setupQueryForSettledTransaction(settledTransQuery, NoYes::No);

        QueryBuildDataSource subledgerVoucherGeneralJournalEntryDs = custTransDs.addDataSource(tableNum(SubledgerVoucherGeneralJournalEntry));
        subledgerVoucherGeneralJournalEntryDs.addLink(fieldnum(CustTrans, DataAreaId), fieldnum(SubledgerVoucherGeneralJournalEntry, VoucherDataAreaId));
        subledgerVoucherGeneralJournalEntryDs.addLink(fieldnum(CustTrans, Voucher), fieldnum(SubledgerVoucherGeneralJournalEntry, Voucher));
        subledgerVoucherGeneralJournalEntryDs.joinMode(JoinMode::ExistsJoin);
        subledgerVoucherGeneralJournalEntryDs.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource generalJournalAccountEntryDs = subledgerVoucherGeneralJournalEntryDs.addDataSource(tablenum(GeneralJournalAccountEntry));
        generalJournalAccountEntryDs.addLink(fieldnum(SubledgerVoucherGeneralJournalEntry, GeneralJournalEntry), fieldNum(GeneralJournalAccountEntry, GeneralJournalEntry));
        generalJournalAccountEntryDs.joinMode(JoinMode::ExistsJoin);
        generalJournalAccountEntryDs.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource transactionReversalDs = generalJournalAccountEntryDs.addDataSource(tableNum(TransactionReversalTrans));
        transactionReversalDs.addLink(fieldnum(GeneralJournalAccountEntry, TableId), fieldNum(TransactionReversalTrans, RefTableId));
        transactionReversalDs.addLink(fieldnum(GeneralJournalAccountEntry, RecId), fieldNum(TransactionReversalTrans, RefRecId));
        transactionReversalDs.joinMode(JoinMode::ExistsJoin);
        transactionReversalDs.fetchMode(QueryFetchMode::One2One);

        return settledTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankChequeCancelTransQuery</Name>
				<Source><![CDATA[
    protected Query createBankChequeCancelTransQuery(Query _baseQuery)
    {
        // Pack/unpack query to get a fresh instance
        container originalQuery = _baseQuery.pack();
        Query settledTransQuery = new Query(originalQuery);

        // Create a query to get settled transactions based on the user-defined query
        QueryBuildDataSource custTransDs = this.setupQueryForSettledTransaction(settledTransQuery, NoYes::No);

        QueryBuildDataSource ledgerJournalTransDs = custTransDs.addDataSource(tablenum(LedgerJournalTrans));
        LedgerJournalTransDs.addSelectionField(fieldNum(LedgerJournalTrans, RecId));
        ledgerJournalTransDs.addLink(fieldNum(CustTrans, RecId), fieldNum(LedgerJournalTrans, CustTransId));
        ledgerJournalTransDs.joinMode(JoinMode::InnerJoin);
        ledgerJournalTransDs.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource chequeDs = ledgerJournalTransDs.addDataSource(tableNum(BankChequeTable));
        chequeDs.addLink(fieldNum(LedgerJournalTrans, TableId), fieldNum(BankChequeTable, SourceTableId));
        chequeDs.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(BankChequeTable, SourceRecId));
        chequeDs.joinMode(JoinMode::ExistsJoin);
        chequeDs.fetchMode(QueryFetchMode::One2One);
        chequeDs.addRange(fieldNum(BankChequeTable, ChequeStatus)).value(queryValue(ChequeStatus::Cancelled));

        return settledTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBankDepositCancelTransQuery</Name>
				<Source><![CDATA[
    protected Query createBankDepositCancelTransQuery(Query _baseQuery)
    {
        // Pack/unpack query to get a fresh instance
        container originalQuery = _baseQuery.pack();
        Query settledTransQuery = new Query(originalQuery);

        // Create a query to get settled transactions based on the user-defined query
        QueryBuildDataSource custTransDs = this.setupQueryForSettledTransaction(settledTransQuery, NoYes::No);

        QueryBuildDataSource ledgerJournalTransDs = custTransDs.addDataSource(tablenum(LedgerJournalTrans));
        LedgerJournalTransDs.addSelectionField(fieldNum(LedgerJournalTrans, RecId));
        ledgerJournalTransDs.addLink(fieldNum(CustTrans, RecId), fieldNum(LedgerJournalTrans, CustTransId));
        ledgerJournalTransDs.joinMode(JoinMode::InnerJoin);
        ledgerJournalTransDs.fetchMode(QueryFetchMode::One2One);

        QueryBuildDataSource depositDs = ledgerJournalTransDs.addDataSource(tableNum(BankDeposit));
        depositDs.addLink(fieldNum(LedgerJournalTrans, TableId), fieldNum(BankDeposit, SourceTableId));
        depositDs.addLink(fieldNum(LedgerJournalTrans, RecId), fieldNum(BankDeposit, SourceRecId));
        depositDs.joinMode(JoinMode::ExistsJoin);
        depositDs.fetchMode(QueryFetchMode::One2One);
        depositDs.addRange(fieldNum(BankDeposit, Canceled)).value(queryValue(NoYes::Yes));

        return settledTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupQueryForSettledTransaction</Name>
				<Source><![CDATA[
    private QueryBuildDataSource setupQueryForSettledTransaction(Query _baseQuery, NoYes _canBeReverse = NoYes::Yes)
    {
        // <GEERU>
        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        // Create a query to get settled transactions based on the user-defined query
        QueryBuildDataSource custTransDs = _baseQuery.dataSourceTable(tablenum(CustTrans));
        custTransDs.addRange(fieldnum(CustTrans, TransDate)).value(queryRange(dateNull(), exchangeAdjustmentController.postingDate()));
        // <GEERU>
        if (countryRegion_RU)
        {
            custTransDs.addRange(fieldnum(CustTrans, TransType)).value(queryNotValueCon_W([LedgerTransType::ExchAdjustment, LedgerTransType::AdvanceAdjustment_RU]));
        }
        // </GEERU>

        QueryBuildDataSource custSettlementDs = _baseQuery.dataSourceTable(tablenum(CustTrans_W)).addDataSource(tablenum(CustSettlement));
        custSettlementDs.update(true);
        custSettlementDs.addLink(fieldnum(CustTrans, RecId), fieldnum(CustSettlement, TransRecId), custTransDs.name());
        custSettlementDs.joinMode(JoinMode::InnerJoin);

        // <GEERU>
        if (countryRegion_RU)
        {
            custSettlementDs.addRange(fieldnum(CustSettlement, TransDate)).value(SysQuery::range(exchangeAdjustmentController.postingDate(), null));
        }
        else
        {
            // </GEERU>
            custSettlementDs.addRange(fieldnum(CustSettlement, TransDate)).value(strFmt('> %1', queryValue(exchangeAdjustmentController.postingDate())));
            // <GEERU>
        }
        // </GEERU>
        custSettlementDs.addRange(fieldnum(CustSettlement, SettleAmountCur)).value(SysQuery::valueNot(0));
        custSettlementDs.addRange(fieldnum(CustSettlement, CanBeReversed)).value(queryValue(_canBeReverse));
        custSettlementDs.addSortField(fieldnum(CustSettlement, TransDate), SortOrder::Ascending);
        custSettlementDs.relations(false);

        return custTransDs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendExchRateAdjustment</Name>
				<Source><![CDATA[
    void custVendExchRateAdjustment()
    {
        CustExchRateAdjustment  custExchRateAdjustment;

        custExchRateAdjustment.ExecutedDate     = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        custExchRateAdjustment.ExchPrinciple    = exchangeAdjustmentController.exchPrinciples();
        custExchRateAdjustment.ConsideredDate   = exchangeAdjustmentController.postingDate();
        custExchRateAdjustment.DateOfRate       = exchangeAdjustmentController.exchRateDate();
        custExchRateAdjustment.UseProfile       = exchangeAdjustmentController.postingSpec();
        custExchRateAdjustment.PostingProfile   = exchangeAdjustmentController.postingProfile();
        custExchRateAdjustment.Dimensions       = exchangeAdjustmentController.dimSpec();
        custExchRateAdjustment.Notes            = exchangeAdjustmentController.notes();

        if (FeatureStateProvider::isFeatureEnabled(CustVendExchAdjTopPickingFeature::instance()))
        {
            custExchRateAdjustment.Hidden = exchangeAdjustmentController.parmHidden();
            custExchRateAdjustment.ExecutionId = exchangeAdjustmentController.parmExecutionId();
        }

        custExchRateAdjustment.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendTable_W</Name>
				<Source><![CDATA[
    protected CustVendTable custVendTable_W()
    {
        CustTable   custTable;

        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransactionText</Name>
				<Source><![CDATA[
    protected LedgerTransTxt getLedgerTransactionText()
    {
        return LedgerTransTxt::CustExchAdjLedger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected ModuleCustVend getModule()
    {
        return ModuleCustVend::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule_W</Name>
				<Source><![CDATA[
    protected SysModule getModule_W()
    {
        return SysModule::Cust;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumberSequence</Name>
				<Source><![CDATA[
    protected NumberSequenceReference getNumberSequence()
    {
        return CustParameters::numRefCustExchAdjVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    public TransTxt transactionLogTxt()
    {
        return "@SYS26733";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    public TransactionLogType transactionLogType()
    {
        return TransactionLogType::CustExchAdj;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryRun_W</Name>
				<Source><![CDATA[
    protected QueryRun updateQueryRun_W(QueryRun _queryRun)
    {
        QueryRun             queryRun;
        QueryBuildDataSource qbds;
        QueryBuildRange      qbr;

        #localmacro.TransTypeValue
            '((\%1.'     + fieldstr(CustTrans, TransType)                 +
            '!='         + queryValue(enum2int(LedgerTransType::Settlement))           +
            ') && (\%1.' + fieldstr(CustTrans, TransType)                 +
            '!='         + queryValue(enum2int(LedgerTransType::AdvanceAdjustment_RU)) +
            ') && (\%1.' + fieldstr(CustTrans, TransType)                 +
            '!='         + queryValue(enum2int(LedgerTransType::ExchAdjustment))       + '))'
        #endmacro

        queryRun = super(_queryRun);

        qbds = queryRun.query().dataSourceTable(tablenum(CustTrans));
        qbr  = findOrCreateRange_W(qbds, fieldnum(CustTrans, TransType), strfmt(#TransTypeValue, qbds.name()));
        qbr.status(RangeStatus::Hidden);

        qbds = queryRun.query().dataSourceTable(tablenum(CustTrans));
        qbr  = findOrCreateRange_W(qbds, fieldnum(CustTrans, TransDate), queryRange(dateNull(), exchangeAdjustmentController.postingDate()));
        qbr.status(RangeStatus::Hidden);

        return queryRun;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>