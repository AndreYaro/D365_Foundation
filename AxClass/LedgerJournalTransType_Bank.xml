<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTransType_Bank</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerJournalTransType_Bank extends LedgerJournalTransType
{
    BankAccountTable    bankAccountTableAccountNum;
    BankAccountTable    bankAccountTableOffsetAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultDefaultDimension</Name>
				<Source><![CDATA[
    protected void defaultDefaultDimension()
    {
        // don't default for Bank
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultOffsetDefaultDimension</Name>
				<Source><![CDATA[
    protected void defaultOffsetDefaultDimension()
    {
        // don't default for Bank
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxGroup()
    {
        // don't default for Bank
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTaxItemGroup</Name>
				<Source><![CDATA[
    protected void defaultTaxItemGroup()
    {
        // don't default for Bank
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDefaultCurrencyCode</Name>
				<Source><![CDATA[
    protected CurrencyCode determineDefaultCurrencyCode()
    {
        CurrencyCode currencyCode;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Bank && ledgerJournalTrans.parmLedgerDimension())
        {
            this.initializeBankAccountTableAccountNum();
            // get CurrencyCode from the account first
            currencyCode = bankAccountTableAccountNum.CurrencyCode;
        }

        // if still not defaulted, use fallback
        if (currencyCode == '')
        {
            currencyCode = super();
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBankAccountTableAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the bank account for a ledger journal transaction.
    /// </summary>
    protected void initializeBankAccountTableAccountNum()
    {
        if (ledgerJournalTrans.parmLedgerDimension())
        {
            if (ledgerJournalTrans.AccountType == LedgerJournalACType::Bank)
            {
                if (bankAccountTableAccountNum.DataAreaId != ledgerJournalTrans.Company ||
                    bankAccountTableAccountNum.AccountID  != ledgerJournalTrans.parmAccount())
                {
                    this.defaultCompany();
                    this.validateCompany();
                    bankAccountTableAccountNum = ledgerJournalTrans.findBankAccountTable();
                }
            }
            else
            {
                bankAccountTableAccountNum.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBankAccountTableOffsetAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the offset bank account for a ledger journal transaction.
    /// </summary>
    protected void initializeBankAccountTableOffsetAccount()
    {
        if (ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank)
            {
                if (bankAccountTableOffsetAccount.DataAreaId != ledgerJournalTrans.OffsetCompany ||
                    bankAccountTableOffsetAccount.AccountID  != ledgerJournalTrans.parmOffsetAccount())
                {
                    if (!isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
                    {
                        this.defaultCompany();
                        this.validateCompany();
                    }
                    bankAccountTableOffsetAccount = ledgerJournalTrans.findBankAccountTableForOffset();
                }
            }
            else
            {
                bankAccountTableOffsetAccount.clear();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes an instance of the <c>LedgerJournalTransType_Bank</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    An instance of the <c>LedgerJournalTrans</c> table that is defaulted and validated.
    /// </param>
    /// <param name="_operation">
    ///    A <c>LedgerJournalOperation</c> enumeration value that indicates the operation of the caller.
    /// </param>
    /// <param name="_isInteractiveContext">
    ///    A Boolean value that indicates the caller context.
    /// </param>
    protected void new(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalOperation _operation, boolean _isInteractiveContext)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        operation = _operation;
        isInteractiveContext = _isInteractiveContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLedgerDimension</Name>
				<Source><![CDATA[
    protected boolean validateLedgerDimension(boolean _logFault = true)
    {
        boolean isValid = true;

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Bank && ledgerJournalTrans.parmLedgerDimension())
        {
            this.initializeBankAccountTableAccountNum();

            if (!bankAccountTableAccountNum)
            {
                isValid = false;
                if (_logFault)
                {
                    checkFailed(strfmt("@SYS27061", ledgerJournalTrans.parmAccount()));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateOffsetLedgerDimension</Name>
				<Source><![CDATA[
    protected boolean validateOffsetLedgerDimension(boolean _logFault = true)
    {
        boolean isValid = super();

        if (isValid)
        {
            if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank && ledgerJournalTrans.parmOffsetLedgerDimension())
            {
                this.initializeBankAccountTableOffsetAccount();

                if (!bankAccountTableOffsetAccount)
                {
                    isValid = false;

                    if (_logFault)
                    {
                        checkFailed(strfmt("@SYS27061", ledgerJournalTrans.parmOffsetAccount()));
                    }
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an initialized instance of the <c>LedgerJournalTransType_Bank</c> class.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///    An instance of the <c>LedgerJournalTrans</c> table that is applied and validated.
    /// </param>
    /// <param name="_operation">
    ///    A <c>LedgerJournalOperation</c> enumeration value that indicates the operation of the caller.
    /// </param>
    /// <param name="_isInteractiveContext">
    ///    A Boolean value that indicates the caller context.
    /// </param>
    /// <returns>
    ///    An instance of the <c>LedgerJournalTableType_Bank</c> class.
    /// </returns>
    public static LedgerJournalTransType_Bank construct(LedgerJournalTrans _ledgerJournalTrans, LedgerJournalOperation _operation, boolean _isInteractiveContext)
    {
        return new LedgerJournalTransType_Bank(_ledgerJournalTrans, _operation, _isInteractiveContext);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>