<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_TORG13_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified form TORG-13 to excel
/// </summary>
class OxmlExcelReport_TORG13_RU extends XMLExcelReport_Standard_RU implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    XmlNodeList         xmlNodeListProlog,
                        xmlNodeListItem,
                        xmlNodeListTotals,
                        xmlNodeListTxtTotals;

    XMLNodeListIterator xmlNodeListPrologIterator,
                        xmlNodeListTotalsIterator,
                        xmlNodeListTxtTotalsIterator,
                        xmlNodeListItemIterator;

    XmlDocument         xmlDocument;

    InventQty           qty;
    GrossWeight         grossWeight;
    Weight              netWeight;
    AmountMST           amount;

    InventQty           pageQty;
    GrossWeight         pageGrossWeight;
    Weight              pageNetWeight;
    AmountMST           pageAmount;

    protected const int Width = 25;
    protected const str ItemName = "ItemName";
    protected const str ItemId = "ItemId";
    protected const str ConfigId = "ConfigId";
    protected const str DocumentNum ="DocumentNum";
    protected const str DocumentDate = "DocumentDate";
    protected const str QtyField = "Qty";
    protected const str GrossWeightField = "GrossWeight";
    protected const str NetWeightField = "NetWeight";
    protected const str Price = "Price";
    protected const str CostAmount = "CostAmount";
    protected const str QtyPage = "QtyPage";
    protected const str GrossWeightPage = "GrossWeightPage";
    protected const str NetWeightPage = "NetWeightPage";
    protected const str CostAmountPage = "CostAmountPage";
    protected const str PrologSection = "PrologSection";
    protected const str PageSection = "PageSection";
    protected const str InventTableSection = "InventTableSection";
    protected const str PageTotalsSection = "PageTotalsSection";
    protected const str TotalsSection = "TotalsSection";
    protected const str TotalsTxtSection = "TotalsTxtSection";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void addTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals on page
    /// </summary>
    protected void addTotalsOnPage()
    {
        pageQty         += qty;
        pageGrossWeight += grossWeight;
        pageNetWeight   += netWeight;
        pageAmount      += amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// height of body section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        XmlElement          eltItem = xmlNodeListItemIterator.value();

        return max(document.getNamedRangeHeightWrapped(ItemName, eltItem.getAttribute(ItemName)),
                   document.getNamedRangeHeightWrapped(ItemId  , eltItem.getAttribute(ItemId)),
                   document.getNamedRangeHeightWrapped(ConfigId, eltItem.getAttribute(ConfigId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if report data correct
    /// </summary>
    /// <returns>
    /// true if report data correct
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean check()
    {
        if (xmlNodeListItem.length() == 0)
        {
            return checkFailed("@GLS101555");
        }

        if ((xmlNodeListProlog.length() != 1) ||
            (xmlNodeListTotals.length() != 1) ||
            (xmlNodeListTxtTotals.length()  != 1))
        {
            return checkFailed(Error::wrongUseOfFunction(funcName()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void clearTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals on page
    /// </summary>
    protected void clearTotalsOnPage()
    {
        pageQty         = 0;
        pageGrossWeight = 0;
        pageNetWeight   = 0;
        pageAmount      = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00122, funcName());

        widthCols = Width;

        curWorkSheetNum = 1;
        this.createStandardReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through iterator which corresponds to report header
    /// </summary>
    /// <returns>
    /// if data still exists, true, otherwise false
    /// </returns>
    protected boolean fetchHeader()
    {
        if (reportNum)
        {
            xmlNodeListPrologIterator.next();
        }

        numOfLines = xmlNodeListItem.length();

        return xmlNodeListPrologIterator.more();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through iterator which corresponds to report lines
    /// </summary>
    /// <returns>
    /// if data still exists, true, otherwise false
    /// </returns>
    protected boolean fetchLines()
    {
        if (lineNo)
        {
            xmlNodeListItemIterator.next();
        }

        return xmlNodeListItemIterator.more();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return 'TORG_13';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// number of document and and document date
    /// </returns>
    protected Filename fileNamePostfix()
    {
        XmlElement  elt = xmlNodeListProlog.item(0);

        return elt.getAttribute(DocumentNum) + '_' + strRem(elt.getAttribute(DocumentDate), '/');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'TORG13';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data
    /// </summary>
    protected void fillBody()
    {
        XmlNamedNodeMap     nodeMap;
        XmlElement          eltItem;
        XmlAttribute        attr;
        int                 idx;

        eltItem = xmlNodeListItemIterator.value();
        nodeMap = eltItem.attributes();

        for (idx = 0; idx < nodeMap.length(); idx++)
        {
            attr = nodeMap.item(idx);
            switch (attr.name())
            {
            case QtyField:
                qty = str2num_RU(attr.value());
                break;
            case GrossWeightField:
                grossWeight = str2num_RU(attr.value());
                break;
            case NetWeightField:
                netWeight = str2num_RU(attr.value());
                break;
            case CostAmount:
                amount = str2num_RU(attr.value());
                break;
            }
            this.insertValueToSection(attr.name(), attr.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page footer section with data
    /// </summary>
    protected void fillPageFooter()
    {
        this.insertValueToSection(QtyPage         , strFmt("@GLS106745", pageQty));
        this.insertValueToSection(GrossWeightPage , strFmt("@GLS106745", pageGrossWeight));
        this.insertValueToSection(NetWeightPage   , strFmt("@GLS106745", pageNetWeight));
        this.insertValueToSection(CostAmountPage  , strFmt("@GLS106745", pageAmount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data
    /// </summary>
    protected void fillPageHeader()
    {
        this.insertValueToSection('PageNum', this.pageNum());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data
    /// </summary>
    protected void fillReportFooter()
    {
        XmlNamedNodeMap     nodeMap;
        XmlElement          elt;
        XmlAttribute        attr;
        int                 idx;

        if ((xmlNodeListTotals.length() == 1) && xmlNodeListTotalsIterator.more())
        {
            elt     = xmlNodeListTotalsIterator.value();
            nodeMap = elt.attributes();
            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }

        if ((xmlNodeListTxtTotals.length() == 1) && xmlNodeListTxtTotalsIterator.more())
        {
            elt     = xmlNodeListTxtTotalsIterator.value();
            nodeMap = elt.attributes();
            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
        XmlNamedNodeMap     nodeMap;
        XmlElement          elt;
        XmlAttribute        attr;
        int                 idx;
        ;

        if ((xmlNodeListProlog.length() == 1))
        {
            elt     = xmlNodeListPrologIterator.value();
            nodeMap = elt.attributes();
            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report
    /// </summary>
    /// <returns>
    /// true, if report has correct structure
    /// </returns>
    public boolean init()
    {
        xmlDocument = XmlDocument::newXml(args.parm(), false);

        xmlNodeListProlog      = xmlDocument.getElementsByTagName(PrologSection);
        xmlNodeListItem        = xmlDocument.getElementsByTagName(InventTableSection);
        xmlNodeListTotals      = xmlDocument.getElementsByTagName(TotalsSection);
        xmlNodeListTxtTotals   = xmlDocument.getElementsByTagName(TotalsTxtSection);

        return this.check();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query run which fetches lines for header, but in this report XMLNodeListIterator used instead
    /// </summary>
    protected void initQueryRunHeader()
    {
        xmlNodeListPrologIterator    = new XMLNodeListIterator(xmlNodeListProlog);
        xmlNodeListTotalsIterator    = new XMLNodeListIterator(xmlNodeListTotals);
        xmlNodeListTxtTotalsIterator = new XMLNodeListIterator(xmlNodeListTxtTotals);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query run which fetches data for lines, but in this report XMLNodeListIterator used instead
    /// </summary>
    protected void initQueryRunLines()
    {
        xmlNodeListItemIterator = new XMLNodeListIterator(xmlNodeListItem);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pageNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// returns string which contains data about page number
    /// </summary>
    /// <returns>
    /// String which contains data about page number
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected PageNum_RU pageNum()
    {
        return pageNum > 1 ? strFmt("@SYS24160", pageNum) : #blank;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of template for report
    /// </summary>
    /// <returns>
    /// name of template for report
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(TORG13_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of cells to be filled with data
    /// </summary>
    /// <returns>
    /// Number of cells to be filled with data
    /// </returns>
    protected Counter totalCells()
    {
        const int CellsBody = 11;
        const int CellsOther = 26;

        return CellsBody * xmlNodeListItem.length() + CellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static OXMLExcelReport_TORG13_RU construct()
    {
        return new OXMLExcelReport_TORG13_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>