<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesNonStockedRegistrationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesNonStockedRegistrationHelper</c> class is the helper class for the non-stocked sales
/// order lines.
/// </summary>
class SalesNonStockedRegistrationHelper  extends TradeNonStockedRegistrationHelper
{
    SalesLine salesLine;
    WMSArrivalDetailTmp wmsArrivalDetailTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventRegistrationHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>InventRegistrationHandler</c> for the sales line.
    /// </summary>
    /// <returns>
    /// An instance of the <c>InventRegistrationHandler</c> for the sales line.
    /// </returns>
    protected InventRegistrationHandler getInventRegistrationHandler()
    {
        return InventRegistrationSalesLine::newFromSalesLine(salesLine, wmsArrivalDetailTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPendingRegistrationsApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether <c>InventPendingQuantity</c> update is relevant for the line.
    /// </summary>
    /// <param name="_isPendingRegistrationsToBeCreated">
    /// Specifies whether to create new <c>InventPendingQuantity</c> records for the line.
    /// </param>
    /// <returns>
    /// true if line changes require <c>InventPendingQuantity</c> updates; otherwise, false.
    /// </returns>
    public boolean isPendingRegistrationsApplicable(boolean _isPendingRegistrationsToBeCreated)
    {
        SalesTable salesTable = salesLine.salesTable();

        //Pending registrations should only be updated for non-stocked sales or return lines:
        //      - during line creation,if item is tangible
        //      - during line updates, if InventPendingQuantity records already exist.
        //      (The above is to enable pseudo data effectivity on the isTangible attribute).
        //      - Intercompany original sales order in direct delivery should not be able to receive,
        //        but otherwise all return sales orders in the intercompany chain should have pending registration records.

        return  !salesLine.isStocked()
                && (salesLine.SalesType == SalesType::ReturnItem || salesLine.SalesType == SalesType::Sales || salesLine.orig().SalesType == SalesType::Sales)
                && ((_isPendingRegistrationsToBeCreated && salesLine.isTangible())
                    || (!_isPendingRegistrationsToBeCreated && (InventPendingQuantity::existsSourceDocumentLine(salesLine.SourceDocumentLine))))
                && (salesLine.isCategoryBased() // description based lines cannot be in an intercompany chain
                    || (!salesLine.isInterCompanyOrder() && !salesTable.existInterCompanySales() && !salesTable.InterCompanyDirectDelivery)) //Original sales order in a 3-legged intercompany direct delivery chain should not have pending registration records to receive.
                    || (salesLine.isInterCompanyOrder()); //Intercompany sales order always needs to have pending registration records to receive.
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the line quantity.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    public UnitQty lineQty()
    {
        return abs(salesLine.SalesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
        public SalesLine parmSalesLine(SalesLine _salesLine = salesLine)
    {
        salesLine = _salesLine;

        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWMSArrivalDetailTmp</Name>
				<Source><![CDATA[
        public WMSArrivalDetailTmp parmWMSArrivalDetailTmp(WMSArrivalDetailTmp _wmsArrivalDetailTmp = wmsArrivalDetailTmp)
    {
        wmsArrivalDetailTmp = _wmsArrivalDetailTmp;

        return wmsArrivalDetailTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPendingRegistrationsBeDeleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to delete <c>InventPendingQuantity</c> records for the current update of the line.
    /// </summary>
    /// <returns>
    /// true if the current line update requires <c>InventPendingQuantity</c> records to be deleted;
    /// otherwise, false.
    /// </returns>
    public boolean shouldPendingRegistrationsBeDeleted()
    {
        SalesLine salesLineOrig = salesLine.orig();

        //If the sales line quantity has been switched from negative to positive,
        //or if the sales order type has been changed from sales to another type
        //then pending registrations have to be deleted.
        return (salesLineOrig.SalesQty < 0 && salesLine.SalesQty > 0)
            || salesLine.SalesStatus  == SalesStatus::Canceled
            || (salesLine.SalesType != SalesType::Sales && salesLineOrig.SalesType == SalesType::Sales);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPendingRegistrationsBeSynced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether to synchronize <c>InventPendingQuantity</c> records for the current update of the
    /// line.
    /// </summary>
    /// <param name="_isPendingRegistrationsToBeCreated">
    /// Specifies whether to create <c>InventPendingQuantity</c> records for the line.
    /// </param>
    /// <returns>
    /// true if the current line update requires <c>InventPendingQuantity</c> record updates; otherwise,
    /// false.
    /// </returns>
    public boolean shouldPendingRegistrationsBeSynced(boolean _isPendingRegistrationsToBeCreated)
    {
        SalesLine salesLineOrig = salesLine.orig();

        // Sync if line quantity is negative
        // and if the line is not yet fully registered,
        // and if it is a new line OR if the line Quantity/Site/Warehouse/ReceiptDate has changed.
        return (salesLine.SalesQty < 0)
                && (salesLine.registeredInSalesUnit() < abs(salesLine.SalesQty))
                && (_isPendingRegistrationsToBeCreated
                    || (!salesLine.ItemId //For category based lines pending registration details is always updated because values like weight come from order line related changes.
                        || salesLineOrig.SalesQty               != salesLine.SalesQty
                        || salesLineOrig.RemainSalesPhysical    != salesLine.RemainSalesPhysical
                        || salesLineOrig.InventDimId            != salesLine.InventDimId
                        || salesLineOrig.ReceiptDateConfirmed   != salesLine.ReceiptDateConfirmed
                        || salesLineOrig.ReceiptDateRequested   != salesLine.ReceiptDateRequested
                        || salesLineOrig.Name                   != salesLine.Name));
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizePendingRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the pending registration records from the sales line.
    /// </summary>
    /// <param name="_adjustedQty">
    /// The quantity to add onto the pending registration records.
    /// </param>
    /// <param name="_isNewLine">
    /// A Boolean value that indicates whether the line is a new line.
    /// </param>
    /// <remarks>
    /// This method would typically be used when a sales return line is created or updated.
    /// </remarks>
    public void synchronizePendingRegistration(UnitQty _adjustedQty, boolean _isNewLine)
    {
        InventRegistrationSalesLine inventRegistrationSalesLine = InventRegistrationSalesLine::newFromSalesLine(salesLine);

        if (salesLine.registeredInSalesUnit() < this.lineQty())
        {
            InventPendingQuantity::synchronizePendingRegistration(inventRegistrationSalesLine, _adjustedQty, !_isNewLine);
        }
        else if (salesLine.SalesQty == 0
            || (salesLine.registeredInSalesUnit() == abs(salesLine.SalesQty) && salesLine.SalesQty != salesLine.orig().SalesQty))
        {
            //If the sales line is cancelled and hence salesQty is set to 0
            //Or if sales quantity is now reduced to the registered quantity for the line, then delete the pending registration records.
            InventPendingQuantity::deletePendingRegistration(salesLine.SourceDocumentLine, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static SalesNonStockedRegistrationHelper construct()
    {
        return new SalesNonStockedRegistrationHelper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>TradeNonStockedRegistrationHelper</c> class by using the given
    /// <c>SalesLine</c> object.
    /// </summary>
    /// <param name="_salesLine">
    /// A <c>SalesLine</c> object based on which the <c>TradeNonStockedRegistrationHelper</c> is to be
    /// instantiated.
    /// </param>
    /// <param name="_wmsArrivalDetailTmp">
    /// A <c>WMSArrivalDetailTmp</c> record based on which the validations and updates for the registration
    /// are to be performed.
    /// </param>
    /// <returns>
    /// A <c>TradeNonStockedRegistrationHelper</c> object.
    /// </returns>
    public static SalesNonStockedRegistrationHelper newFromSalesLine(SalesLine _salesLine, WMSArrivalDetailTmp _wmsArrivalDetailTmp)
    {
        SalesNonStockedRegistrationHelper salesNonStockedRegistrationHelper;

        switch (_salesLine.SalesType)
        {
            case SalesType::ReturnItem:
                salesNonStockedRegistrationHelper = SalesReturnNonStockedRegistrationHelper::construct();
                break;
            default:
                salesNonStockedRegistrationHelper = SalesNonStockedRegistrationHelper::construct();
                break;
        }

        salesNonStockedRegistrationHelper.parmSalesLine(_salesLine);
        salesNonStockedRegistrationHelper.parmSalesPurchLine(_salesLine);
        salesNonStockedRegistrationHelper.parmWMSArrivalDetailTmp(_wmsArrivalDetailTmp);

        return salesNonStockedRegistrationHelper;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
