<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchComplInvoicePost</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for posting the purchase complementary invoice.
/// </summary>
class PurchComplInvoicePost
{
    PurchComplementaryInvoiceHeader complInvoice;
    FiscalDocumentType_BR           fiscalDocumentType;

    // Following atributes are used by updateInventPostedValue and hold values from previous calls
    LedgerVoucherObject             costAdjustmentVoucherObject;
    InventTransAdjust               inventTransAdjust;
    InventAdjustPost                inventAdjustPost;
    TransTxt                        costAdjTransTxt;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNumAndVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allocates a valid invoice and voucher reference number.
    /// </summary>
    /// <returns>
    /// A container with fiscal document number and voucher number references.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container allocateNumAndVoucher()
    {
        RefRecId  numNumberSeqCode;
        RefRecId  voucherNumberSeqCode;
        RefRecId  scopeId = NumberSeqScopeFactory::createDefaultScope().getId();

        // Credit note
        if (complInvoice.CanceledInvoice)
        {
            numNumberSeqCode = NumberSequenceReference::findNaturalKey(PurchParameters::numRefPurchCreditNoteId().NumberSequenceDatatype, scopeId).NumberSequenceId;

            if (PurchParameters::numRefPurchCreditNoteVoucher().AllowSameAs)
            {
                voucherNumberSeqCode = numNumberSeqCode;
            }
            else
            {
                voucherNumberSeqCode = NumberSequenceReference::findNaturalKey(PurchParameters::numRefPurchCreditNoteVoucher().NumberSequenceDatatype, scopeId).NumberSequenceId;
            }
        }
        else
        {
            // fiscal document issuing
            numNumberSeqCode = FiscalDocumentType_BR::getFiscalDocumentNumberSequence(fiscalDocumentType.RecId).RecId;

            if (PurchParameters::numRefPurchInvoiceVoucher().AllowSameAs)
            {
                voucherNumberSeqCode = numNumberSeqCode;
            }
            else
            {
                voucherNumberSeqCode = NumberSequenceReference::findNaturalKey(PurchParameters::numRefPurchInvoiceVoucher().NumberSequenceDatatype, scopeId).NumberSequenceId;
            }
        }

        return [numNumberSeqCode ,voucherNumberSeqCode];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the complementary invoice can be posted.
    /// </summary>
    /// <returns>
    /// true if posting is valid; false otherwise.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canPost()
    {
        PurchComplementaryInvoiceLine complementaryLine;
        boolean ok = true;

        if (complInvoice.Issuer == FiscalDocumentIssuer_BR::ThirdParty &&
            (!complInvoice.Number || !complInvoice.Series))
        {
            if (FiscalDocModel_BR::find(complInvoice.Model).IsForNFeFederal)
            {
                ok = checkFailed("@Brazil:ComplementaryFiscalDocument_ProvideAValidAcessKey");
            }
            else
            {
                ok = checkFailed("@GLS221874");
            }
        }

        if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Tax)
        {
            // For tax complementary invoices there must be at least one line with non-zero
            // additinal tax amount
            select firstOnly RecId from complementaryLine
                where complementaryLine.PurchComplementaryInvoiceHeader == complInvoice.RecId
                   && (complementaryLine.AdditionalICMSAmount != 0
                       || complementaryLine.AdditionalIPIAmount != 0);

            if (!complementaryLine.RecId)
            {
                ok = checkFailed("@GLS221022");
            }
        }
        else if (complInvoice.ComplementaryType == InvoiceComplementaryType_BR::Price)
        {
            //For price complementary invoices there must be at least one line with non-zero amount
            select firstOnly RecId from complementaryLine
                where complementaryLine.PurchComplementaryInvoiceHeader == complInvoice.RecId
                   && complementaryLine.Amount != 0;

            if (!complementaryLine.RecId)
            {
                ok = checkFailed("@GLS221023");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>LedgerVoucher</c> object to be used to post the complementary invoice.
    /// </summary>
    /// <param name="_voucherNumberSeq">
    /// <c>NumberSeq</c> object to retrieve the voucher ID.
    /// </param>
    /// <returns>
    /// <c>LedgerVoucher</c> object to be used to post the complementary invoice.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected LedgerVoucher createLedgerVoucher(NumberSeq _voucherNumberSeq)
    {
        PaymTerm paymTerm;
        LedgerVoucherObject ledgerVoucherObject;
        LedgerVoucher ledgerVoucher;

        paymTerm = PaymTerm::find(complInvoice.Payment);

        // Ledger voucher handling
        if (paymTerm.PostOffsettingAR == NoYes::Yes)
        {
            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                         SysModule::Vend,
                                                         _voucherNumberSeq.parmVoucherSequenceCode());
        }
        else
        {
            ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary,
                                                         SysModule::Vend,
                                                         _voucherNumberSeq.parmVoucherSequenceCode());
        }

        ledgerVoucherObject = LedgerVoucherObject::newVoucher(complInvoice.LedgerVoucher,
                                                              complInvoice.TransDate,
                                                              SysModule::Vend,
                                                              LedgerTransType::Vend);
        ledgerVoucherObject.parmDocumentDate(complInvoice.DocumentDate);

        ledgerVoucher.addVoucher(ledgerVoucherObject);

        return ledgerVoucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>VendVoucher</c> object to be used to post the complementary invoice.
    /// </summary>
    /// <param name="_ledgerTransTxt">
    /// <c>LedgerTransTxt</c> enum value to be associated with the <c>VendVoucher</c>.
    /// </param>
    /// <param name="_totalAmount">
    /// Total amount of the invoice.
    /// </param>
    /// <returns>
    /// New <c>VendVoucher</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected VendVoucher createVendVoucher(LedgerTransTxt  _ledgerTransTxt, AmountMST _totalAmount)
    {
        return VendVoucher::newVendVoucherPurchComplInvoice(
                complInvoice,
                _ledgerTransTxt,
                _totalAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventoryAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount that a complementary invoice line is adding or
    /// removing from a given asset or inventory item.
    /// </summary>
    /// <param name="_complementaryLine">
    /// <c>PurchComplementaryInvoiceLine</c> that is complementing an asset value.
    /// </param>
    /// <param name="_tax">
    /// <c>TaxCalculation</c> object associated with the complementary invoice.
    /// </param>
    /// <returns>
    /// The amount delta that the given line produces to the item cost.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected AmountMST getInventoryAmount(PurchComplementaryInvoiceLine _complementaryLine, TaxCalculation _tax)
    {
        AmountMST           amount;
        TaxTable            taxTable;
        TmpTaxWorkTrans     taxWorkTrans = _tax.tmpTaxWorkTrans();

        // Retrieves the tax amount not included in price and non-recoverable
        select sum (SourceOtherBaseTaxAmount_BR)
            from taxWorkTrans
            where taxWorkTrans.SourceTableId   == _complementaryLine.TableId &&
                  taxWorkTrans.SourceRecId     == _complementaryLine.RecId &&
                  taxWorkTrans.TaxDirection != TaxDirection::UseTax &&
                  !taxWorkTrans.IncludedInPrice_BR
            exists join taxTable
            where taxTable.TaxCode == taxWorkTrans.TaxCode      &&
                  taxTable.RetainedTax_BR == false;

        amount = _complementaryLine.Amount
                + taxWorkTrans.SourceOtherBaseTaxAmount_BR
                - _tax.taxInCostPrice_BR(_complementaryLine.TableId, _complementaryLine.RecId);

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the class.
    /// </summary>
    /// <param name="_complementaryInvoiceHeader">
    /// <c>PurchComplementaryInvoiceHeader</c> that will be posted.
    /// </param>
    /// <exception cref="Exception::Error">
    /// If the fiscal document is issued by the company, a fiscal document type must be present.
    /// </exception>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new(PurchComplementaryInvoiceHeader _complementaryInvoiceHeader)
    {
        complInvoice = _complementaryInvoiceHeader;

        if (complInvoice.Issuer == FiscalDocumentIssuer_BR::OwnEstablishment)
        {
            if (!complInvoice.FiscalDocumentType)
            {
                throw error("@GLS62");
            }
            fiscalDocumentType = FiscalDocumentType_BR::findRecId(complInvoice.FiscalDocumentType);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the purchase complementary invoice.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void post()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00026, funcName());

        PurchComplInvCalcTotals             calcTotals;
        VendTrans                           vendTrans;
        PurchComplementaryInvoiceLine       complementaryLine;
        AssetPost                           assetPost;
        AmountMST                           amountToAdd;
        VendInvoiceTrans                    vendInvoiceTrans;
        FiscalDocumentLine_BR               fiscalDocLine;
        LedgerVoucher                       ledgerVoucher;
        NumberSeq                           numNumberSeq;
        NumberSeq                           voucherNumberSeq;
        RefRecId                            voucherNumberSeqCode;
        RefRecId                            numNumberSeqCode;

        ttsBegin;

        if (!this.canPost())
        {
            throw error("@SYS21533");
        }

        calcTotals = new PurchComplInvCalcTotals(complInvoice);
        calcTotals.calc();

        [numNumberSeqCode, voucherNumberSeqCode] = this.allocateNumAndVoucher();
        if (numNumberSeqCode)
        {
            numNumberSeq = NumberSeq::newGetNumFromId(numNumberSeqCode);
        }
        voucherNumberSeq = NumberSeq::newGetVoucherFromId(voucherNumberSeqCode);

        this.updateComplementaryInvoiceStatus(numNumberSeq, voucherNumberSeq);

        ledgerVoucher = this.createLedgerVoucher(voucherNumberSeq);

        if (complInvoice.PaymSched && !VendPaymSched::exist(complInvoice.TableId, complInvoice.RecId))
        {
            complInvoice.createPaymentSched();
        }

        this.postTaxes(ledgerVoucher);
        this.processSourceDocument();
        this.postVend(calcTotals, vendTrans, ledgerVoucher);

        // Updates the inventory with the added cost
        while select vendInvoiceTrans
            join complementaryLine
            exists join fiscalDocLine
            where vendInvoiceTrans.RecId == fiscalDocLine.RefRecId
               && vendInvoiceTrans.TableId == fiscalDocLine.RefTableId
               && fiscalDocLine.RecId == complementaryLine.ComplementedFiscalDocumentLine
               && complementaryLine.PurchComplementaryInvoiceHeader == complInvoice.RecId
               && !complementaryLine.AssetId
        {
            amountToAdd = this.getInventoryAmount(complementaryLine, calcTotals.tax());
            this.updateInventPostedValue(vendInvoiceTrans, amountToAdd, ledgerVoucher);
        }

        // Updates the fixed asset value
        while select complementaryLine
            where complementaryLine.PurchComplementaryInvoiceHeader == complInvoice.RecId
               && complementaryLine.AssetId != ''
        {
            assetPost = new AssetPost(ledgerVoucher);
            amountToAdd = this.getInventoryAmount(complementaryLine, calcTotals.tax()) / complementaryLine.Quantity;
            this.updateAssetValue(assetPost, complementaryLine, amountToAdd);
        }

        ledgerVoucher.end();
        this.updateFiscalDocument(calcTotals, vendTrans);

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the invoice taxes.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// <c>LedgerVoucher</c> associated with the posting process.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postTaxes(LedgerVoucher _ledgerVoucher)
    {
        ComplementaryInvoiceCalcTax calcTax;

        calcTax = new PurchComplInvoiceCalcTax(complInvoice);
        calcTax.post(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the posting related to the vendor.
    /// </summary>
    /// <param name="_calcTotals">
    /// <c>PurchComplInvCalcTotals</c> object with the totals of the complementary invoice.
    /// </param>
    /// <param name="_vendTrans">
    /// <c>VendTrans</c> record that will hold the vendor transactions for the posting.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// <c>LedgerVoucher</c> object associated with the posting.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postVend(PurchComplInvCalcTotals _calcTotals, VendTrans _vendTrans, LedgerVoucher _ledgerVoucher)
    {
        VendVoucher     vendVoucher;
        LedgerTransTxt  ledgerTransTxt;
        AccountingEvent accountingEvent;
		AmountMST       retainedTaxAmount;

        ledgerTransTxt = complInvoice.CanceledInvoice ? LedgerTransTxt::PurchCreditNoteVend : LedgerTransTxt::PurchInvoiceVend;

        if (_calcTotals.tax())
        {
            retainedTaxAmount = _calcTotals.tax().totalTaxAmountRetained_BR();
        }

        vendVoucher = this.createVendVoucher(
                ledgerTransTxt,
                _calcTotals.totalAmount() - retainedTaxAmount);

        vendVoucher.parmTypeOfCreditmaxCheck(VendParameters::find().CreditMaxCheck);
        vendVoucher.parmExchRate(complInvoice.exchRate());
        vendVoucher.parmExchRateSecondary(complInvoice.exchRateSecondary());
        accountingEvent = AccountingEvent::getLastEvent(complInvoice.SourceDocumentHeader);
        vendVoucher.parmAccountingEventReference(accountingEvent.RecId);
        vendVoucher.post(_ledgerVoucher, _vendTrans, NoYes::No, UnknownNoYes::No, false, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the posting within source document framework.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Posting process failed inside the source document framework.
    /// </exception>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void processSourceDocument()
    {
        SourceDocument sourceDocument;

        SourceDocumentProcessor::submitSourceDocumentImplementation(complInvoice, false, SourceDocumentAccountingStatus::Completed);
        sourceDocument = SourceDocument::newFromSourceDocumentImplementation(complInvoice);
        if (sourceDocument.parmSourceDocumentHeader().AccountingStatus != SourceDocumentAccountingStatus::Completed)
        {
            throw error("@SYS25904");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAssetValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the fixed asset value.
    /// </summary>
    /// <param name="_assetPost">
    /// <c>AssetPost</c> object to be used to post the adjustment.
    /// </param>
    /// <param name="_complementaryLine">
    /// <c>PurchComplementaryInvoiceLine</c> that is changing the asset value.
    /// </param>
    /// <param name="_amountToAdd">
    /// The amount to add to the asset.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The asset cannot have its amount changed.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateAssetValue(AssetPost _assetPost, PurchComplementaryInvoiceLine _complementaryLine, AmountMST _amountToAdd)
    {
        _assetPost.initFromPurchComplementaryInvoice(_complementaryLine, complInvoice, _amountToAdd);
        if (!_assetPost.check())
        {
            throw error("@SYS25904");
        }
        _assetPost.post();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateComplementaryInvoiceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the complementary invoice to posted state.
    /// </summary>
    /// <param name="_numNumberSeq">
    /// <c>NumberSeq</c> object to request the invoice number.
    /// </param>
    /// <param name="_voucherNumberSeq">
    /// <c>NumberSeq</c> object to request the voucher number.
    /// </param>
    /// <exception cref="Exception::Error">
    /// The state could not be changed.
    /// </exception>

    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateComplementaryInvoiceStatus(NumberSeq  _numNumberSeq, NumberSeq _voucherNumberSeq)
    {
        RecId       complInvRecID;
        Voucher     voucher;

        complInvRecId = complInvoice.RecId;
        select forUpdate complInvoice where complInvoice.RecId == complInvRecId;

        if (complInvoice.CanceledInvoice)
        {
            complInvoice.Number = _numNumberSeq.num();
        }
        else if (complInvoice.Issuer == FiscalDocumentIssuer_BR::OwnEstablishment)
        {
            complInvoice.Number = _numNumberSeq.num();
            complInvoice.Model  = fiscalDocumentType.FiscalDocumentModel;
            complInvoice.Series = FiscalDocumentType_BR::getFiscalDocumentSeries(fiscalDocumentType.RecId);
            complInvoice.Specie = fiscalDocumentType.FiscalDocumentSpecie;
        }

        voucher = _voucherNumberSeq.voucher();
        if (!voucher)
        {
            throw error("@SYS71652");
        }

        complInvoice.LedgerVoucher = voucher;
        complInvoice.Status = ComplementaryInvoiceStatus::Posted;
        complInvoice.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFiscalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates or creates the related fiscal document.
    /// </summary>
    /// <param name="_calcTotals">
    /// <c>PurchComplInvCalcTotals</c> related to the invoice being posted.
    /// </param>
    /// <param name="_vendTrans">
    /// <c>VendTrans</c> record related to the invoice being posted.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateFiscalDocument(PurchComplInvCalcTotals _calcTotals, VendTrans _vendTrans)
    {
        PurchComplementaryInvoiceHeader     canceledInvoice;
        FiscalDocumentParmDataCreator_BR    fiscalDocParmCreator;
        FiscalDocumentPost_BR               fiscalDocumentPost;
        FiscalDocument_BR                   fiscalDocumentToCancel;

        if (complInvoice.CanceledInvoice)
        {
            select forUpdate canceledInvoice
                where canceledInvoice.RecId == complInvoice.CanceledInvoice;

            canceledInvoice.Status = ComplementaryInvoiceStatus::Canceled;
            canceledInvoice.update();

            fiscalDocumentToCancel = FiscalDocument_BR::findByRef(canceledInvoice.TableId, canceledInvoice.RecId);
            FiscalDocumentPost_BR::cancelFiscalDocument(fiscalDocumentToCancel,
                                                        complInvoice.LedgerVoucher,
                                                        complInvoice.DocumentDate,
                                                        complInvoice.CostLedgerVoucher,
                                                        ReasonTableRef::find(complInvoice.ReasonTableRef_BR).ReasonComment);
        }
        else
        {
            fiscalDocParmCreator = new FiscalDocParmDataCreatorPurchComplInv(complInvoice, _calcTotals.totalAmount(), _vendTrans);
            fiscalDocumentPost = new FiscalDocumentPost_BR(fiscalDocParmCreator.createParmData());
            fiscalDocumentPost.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventPostedValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the values of the inventoried items in the complementary invoice being posted.
    /// </summary>
    /// <param name="_vendInvoiceTrans">
    /// <c>VendInvoiceTrans</c> record from the invoice that is being complemented.
    /// </param>
    /// <param name="_amountToAdd">
    /// Amount that is being added to the inventory.
    /// </param>
    /// <param name="_ledgerVoucher">
    /// <c>LedgerVoucher</c> used to post the inventory amount.
    /// </param>
    /// <param name="_invoiceQty">
    /// Quantity posted at invoice level.
    /// </param>
    /// <exception cref="Exception::Error">
    /// Inventory is closed for the original invoice.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateInventPostedValue(VendInvoiceTrans _vendInvoiceTrans, Amount _amountToAdd, LedgerVoucher _ledgerVoucher, Qty _invoiceQty = 0)
    {
        InventTrans                 inventTrans;
        InventTransOriginId         inventTransOriginId;
        InventAdjustAllocate        inventAdjustAllocate;
        CostAmount                  adjustCostAmountMST;
        CostAmount                  adjustCostAmountCur, localAdjustCostAmountCur;
        boolean                     postOnhandFinancial;       
        boolean                     isPostOnhandFinancialCached;
        InventAdjustmentSpec        inventAdjustmentSpec = InventAdjustmentSpec::ItemNum;
        Map                         transactionAmountsByCurrency;
        MapEnumerator               enumerator;
        Amount                      currencyAmount;
        LedgerVoucherTransObject    ledgerPostingTransaction;
        CurrencyExchangeHelper      currencyExchangeHelper;
        Voucher                     costVoucher;
        NumberSeq                   numberSeq;
        Qty                         localQty;
        Amount                      allocatedAmount;

        if (_amountToAdd == 0)
            return;

        if (!costAdjustmentVoucherObject)
        {
            // Check inventClosing the first time only since all the invoice dates are the same
            if (!InventClosing::checkOpen(_vendInvoiceTrans.InvoiceDate))
            {
                throw error("@SYS18447");
            }

            if (complInvoice.CanceledInvoice)
            {
                numberSeq = NumberSeq::newGetVoucher(NumberSeqReference::findReference(extendedTypeNum(InventPurchCreditVoucher)));
            }
            else
            {
                numberSeq = NumberSeq::newGetVoucher(NumberSeqReference::findReference(extendedTypeNum(InventPurchInvoiceVoucher)));
            }

            costVoucher = numberSeq.voucher();

            complInvoice.CostLedgerVoucher = costVoucher;
            complInvoice.update();

            costAdjustmentVoucherObject = LedgerVoucherObject::newVoucher(costVoucher,
                                                                          complInvoice.TransDate,
                                                                          SysModule::Vend,
                                                                          LedgerTransType::Vend);
            costAdjustmentVoucherObject.parmDocumentDate(complInvoice.DocumentDate);

            costAdjTransTxt = strFmt("@GLS221866", complInvoice.getFiscalDocumentNumber(), complInvoice.Model, complInvoice.Series);

            _ledgerVoucher.addVoucher(costAdjustmentVoucherObject);
            costAdjustmentVoucherObject.parmTrackTransactionAmountsByCurrency(true);

            inventTransAdjust = new InventTransAdjust(costAdjustmentVoucherObject.parmTransDate(),
                                                      costAdjustmentVoucherObject.parmVoucher());

            inventAdjustPost   = new InventAdjustPost(costAdjustmentVoucherObject.parmVoucher(),
                                                      costAdjustmentVoucherObject.parmTransDate(),
                                                      inventAdjustmentSpec,
                                                      LedgerTransTxt::InventClosingAdjustment);

            inventAdjustPost.parmCurrencyCode(Ledger::accountingCurrency());
            inventAdjustPost.parmAdjustPurch(true);
        }

        inventTransOriginId = InventTransOrigin::findByInventTransId(_vendInvoiceTrans.InventTransId).RecId;
        
        isPostOnhandFinancialCached = false;

        while select forupdate inventTrans
            where inventTrans.InventTransOrigin     == inventTransOriginId
                &&  inventTrans.DateFinancial       == _vendInvoiceTrans.InventDate
                &&  inventTrans.InvoiceId           == _vendInvoiceTrans.InvoiceId
                &&  inventTrans.StatusReceipt       == StatusReceipt::Purchased
                &&  inventTrans.StatusIssue         == StatusIssue::None
                &&  inventTrans.PackingSlipReturned == 0               
        {
            if (_vendInvoiceTrans.InventQty == inventTrans.qty)
            {
                allocatedAmount = _amountToAdd;
            }
            else
            {
                allocatedAmount = _amountToAdd/_vendInvoiceTrans.InventQty;
                allocatedAmount = CurrencyExchangeHelper::amount(allocatedAmount * inventTrans.Qty, _vendInvoiceTrans.CurrencyCode);
                localQty += inventTrans.Qty;
            }
            inventAdjustAllocate = new InventAdjustAllocate(inventTrans.Qty, allocatedAmount);

            if (!inventAdjustAllocate.isAllocated())
            {
                if (!isPostOnhandFinancialCached)
                {
                    postOnhandFinancial     = inventTrans.inventTable().modelGroup().PostOnhandFinancial;
                    isPostOnhandFinancialCached = true;
                }
                
                adjustCostAmountCur = inventAdjustAllocate.calcAdjustment(inventTrans, _vendInvoiceTrans.CurrencyCode);

                localAdjustCostAmountCur += adjustCostAmountCur;

                // After subtracting _amountToAdd and localAdjustCostAmountCur, if penny difference exists adjusting to adjustCostAmountCur.
                if (_vendInvoiceTrans.InventQty == localQty)
                {
                    if (_amountToAdd != localAdjustCostAmountCur)
                    {
                        adjustCostAmountCur += _amountToAdd - localAdjustCostAmountCur;
                    }
                }
                
                adjustCostAmountMST = CurrencyExchangeHelper::mstAmount(adjustCostAmountCur, inventTrans.CurrencyCode, costAdjustmentVoucherObject.parmTransDate());
                inventTransAdjust.updateNow(inventTrans,
                            NoYes::No,
                            NoYes::No,
                            adjustCostAmountMST,
                            postOnhandFinancial, 0, 0,
                            !postOnhandFinancial, 0, 0,
                            false,
                            _ledgerVoucher,
                            inventAdjustmentSpec);

                if (! inventAdjustAllocate.isAllocated())
                    throw error("@SYS15814");
            }
        }
        costAdjustmentVoucherObject.lastTransTxt(costAdjTransTxt);
        inventAdjustPost.updateNow(_ledgerVoucher);

        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(curext()).RecId), costAdjustmentVoucherObject.parmAccountingDate());
        transactionAmountsByCurrency = costAdjustmentVoucherObject.getTransactionAmountsByCurrency();
        enumerator = transactionAmountsByCurrency.getEnumerator();

        while (enumerator.moveNext())
        {
            currencyAmount = enumerator.currentValue();

            ledgerPostingTransaction = LedgerVoucherTransObject::newTransactionAmountDefault(
                costAdjustmentVoucherObject,
                LedgerPostingType::PurchConsump,
                LedgerDimensionFacade::serviceCreateLedgerDimension(_vendInvoiceTrans.purchLine().ledgerDimensionConsumption(), _vendInvoiceTrans.DefaultDimension),
                enumerator.currentKey(), // currencyCode
                -currencyAmount,
                currencyExchangeHelper);
            ledgerPostingTransaction.parmTransTxt(costAdjTransTxt);
            costAdjustmentVoucherObject.addTrans(ledgerPostingTransaction);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        PurchComplementaryInvoiceHeader complementaryInvoiceHeader;
        PurchComplInvoicePost purchComplInvPost;

        complementaryInvoiceHeader = _args.record() as PurchComplementaryInvoiceHeader;
        purchComplInvPost = new PurchComplInvoicePost(complementaryInvoiceHeader);
        purchComplInvPost.post();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>