<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPaySheetEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class rPaySheetEngine
{
    RPaySheetTable        paySheetTable;
    FormRun               formRun;
    FormDataSource        sheetTableDs,sheetTransDs;
    FormButtonControl     ctrlPay,ctrlPrint,ctrlSetSumm,ctrlQuery,ctrlCreate,ctrlDeleteAll,ctrlRound,ctrlCalcReport,ctrlCalcPayReport;
    FormComboBoxControl   ctrlPaySheetType;
    FormDateControl       ctrlPayPeriod;
    FormGroupControl      ctrlTax;
    FormDateControl       ctrlTransDate;
    RpaySheetTypeCreate   rpaySheetTypeCreate;
    QueryRun              queryRun;
    TransDate             sheetTransDate;
    Map                   taxCodeCheck;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTaxAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TaxAmount calcTaxAmount(RPayTrans _payTrans)
    {
        RPayTaxIncomeGroupTable incomeGroupTable;
        RPayTaxEmplSum          taxEmplSum;
        RPayTaxReportValue      rPayTaxReportValue;
        RPayFundMember          fundMember;

        Amount   taxAmount, addTaxAmount,
                 assessedAmount, incomeAmountTotal;
        if (paySheetTable.Pn && !_payTrans.TaxIncomeGroupCode)
        {
            select firstonly RpayTaxIncomeGroupCode from incomeGroupTable
                exists join fundMember
                where fundMember.CounterUnit == incomeGroupTable.Fund &&
                      fundMember.PayCostType == _payTrans.PayCtype
                exists join taxEmplSum
                where taxEmplSum.RpayTaxIncomeGroupCode == incomeGroupTable.RpayTaxIncomeGroupCode &&
                     (taxEmplSum.TaxRateCode            == incomeGroupTable.RateCode               ||
                      taxEmplSum.TaxRateCode            == incomeGroupTable.RateCodeGroup)         &&
                      taxEmplSum.PayPeriod              == _payTrans.PayPeriod                     &&
                      taxEmplSum.EmplId                 == _payTrans.Emplid;

            if (!this.checkTaxIntersection(_payTrans.Emplid, incomeGroupTable.RpayTaxIncomeGroupCode))
                throw error("@GLS113154");

            incomeAmountTotal = RPayTaxEmplSum::getIncome_Source(_payTrans.Emplid, incomeGroupTable.RpayTaxIncomeGroupCode, _payTrans.PayPeriod, _payTrans.PayPeriod, true);

            rPayTaxReportValue = new RPayTaxReportValue(_payTrans.Emplid, _payTrans.PayPeriod);
            assessedAmount = rPayTaxReportValue.getAssessedDeductionAmount(incomeGroupTable.RpayTaxIncomeGroupCode);

            incomeAmountTotal += assessedAmount;

            if (incomeAmountTotal)
            {
                addTaxAmount = RPayTaxEmplSum::getAddTaxAmount(_payTrans.Emplid, incomeGroupTable.RpayTaxIncomeGroupCode, _payTrans.PayPeriod, _payTrans.PayPeriod);
                taxAmount    = round(_payTrans.Amount * addTaxAmount / incomeAmountTotal, RPayTaxParameters::find().TaxRound);
            }
        }
        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSheetChange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canSheetChange(boolean needMessage = true)
    {
        if (endmth(ctrlPayPeriod.dateValue()) < RPayParameters::payPeriod())
        {
            return false;
        }

        if ((select firstonly rpaySheetTable
                where rpaySheetTable.PayPeriod    == RPayParameters::payPeriod() &&
                      rpaySheetTable.PaySheetType == RPaySheetType::Payment).RecId != 0)
        {
            if (needMessage)
            {
               info("@RUP676");
            }
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSheetDialogParms</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkSheetDialogParms()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxIntersection</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkTaxIntersection(RHRMEmplId _emplId, RpayTaxIncomeGroupCode _taxGroupCode)
    {
        RpayTaxIncomeGroupCode taxGroupCode;
        boolean ret = true;

        if (taxCodeCheck.exists(_emplId))
        {
            taxGroupCode = taxCodeCheck.lookup(_emplId);
            if (_taxGroupCode && taxGroupCode != _taxGroupCode)
                ret = checkFailed(strFmt("@RUP3123", _emplId));
        }
        else
        {
            taxCodeCheck.insert(_emplId, _taxGroupCode);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSheet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createSheet()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSheetTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createSheetTrans()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPayFromDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDate defaultPayFromDate()
    {
        return paySheetTable.PayPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultPayToDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDate defaultPayToDate()
    {
        return paySheetTable.PayPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSheet</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteSheet()
    {
        RPaySheetTrans paySheetTrans;
        RPayTrans      rPayTrans;

        if (paySheetTable.PaySheetSost == RPaySheetSost::NoPaid)
        {
            return;
        }

        if (! this.canSheetChange(false))
        {
            throw info("@RUP676");
        }

        rPayTrans.skipDeleteMethod(true);

        delete_from rPayTrans
            where rPayTrans.SourceTableId == tableNum(RPaySheetTrans)
            exists join paySheetTrans
                where paySheetTrans.SheetTableRecId == paySheetTable.RecId
                   && rPayTrans.SourceRecId   == paySheetTrans.RecId;

        rPayTrans.skipDeleteMethod(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTrans</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void deleteTrans()
    {
        RPaySheetTrans paySheetTrans;
        ttsbegin;

        paySheetTrans = sheetTransDs.cursor();

        if (paySheetTrans.RecId != 0)
        {
            paySheetTable.SumSheet = paySheetTable.SumSheet - paySheetTrans.Amount;
            sheetTableDs.write();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TempStr description()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPaySheetTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initPaySheetTable()
    {
        NumberSeq numberSeq;

        numberSeq = NumberSeq::newGetNum(RPayParameters::numRefSheetNum(),true);
        paySheetTable.PaySheetNum  = numberSeq.num();
        paySheetTable.PayPeriod    = endmth(ctrlPayPeriod.dateValue());
        paySheetTable.TransDate    = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        paySheetTable.Name         = this.description();
        paySheetTable.PaySheetType = this.paySheetType();
        numberSeq.used();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    #define.sheetTableDs('PaySheetTable')
    #define.sheetTransDs('PaySheetTrans')
    #define.ctrlPay('PSTF_Button_Pay')
    #define.ctrlPrint('PSTF_MenuItemButton_Print')
    #define.ctrlCalcReport('SheetCalcReport')
    #define.ctrlCalcPayReport('SheetCalcPayReport')
    #define.ctrlSetSumm('PSTF_Button_SetSumm')
    #define.ctrlQuery('PSTF_Button_Query')
    #define.ctrlCreate('PSFT_Button_Create')
    #define.ctrlDeleteAll('PSFT_Button_Delete_All')
    #define.ctrlPayPeriod('PeriodDateControl')
    #define.ctrlPaySheetType('PaySheetTable_PaySheetType')
    #define.ctrlTax('Tax')
    #define.ctrlRound('Round')
    #define.ctrlTransDate('PaySheetTable_TransDate')
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new(FormRun _formRun)
    {
        formRun = _formRun;
        sheetTableDs      = formRun.dataSource(#sheetTableDs);
        sheetTransDs      = formRun.dataSource(#sheetTransDs);
        ctrlPay           = formRun.design().controlName(#ctrlPay);
        ctrlPrint         = formRun.design().controlName(#ctrlPrint);
        ctrlCalcReport    = formRun.design().controlName(#ctrlCalcReport);
        ctrlCalcPayReport = formRun.design().controlName(#ctrlCalcPayReport);
        ctrlSetSumm       = formRun.design().controlName(#ctrlSetSumm);
        ctrlQuery         = formRun.design().controlName(#ctrlQuery);
        ctrlCreate        = formRun.design().controlName(#ctrlCreate);
        ctrlDeleteAll     = formRun.design().controlName(#ctrlDeleteAll);
        ctrlPayPeriod     = formRun.design().controlName(#ctrlPayPeriod);
        ctrlPaySheetType  = formRun.design().controlName(#ctrlPaySheetType);
        ctrlTax           = formRun.design().controlName(#ctrlTax);
        ctrlRound         = formRun.design().controlName(#ctrlRound);
        ctrlTransDate     = formRun.design().controlName(#ctrlTransDate);
        queryRun          = new QueryRun(queryStr(RPaySheetQuery));
        paySheetTable     = sheetTableDs.cursor();
        taxCodeCheck      = new Map(Types::String, Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaySheetTypeCreate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RpaySheetTypeCreate parmPaySheetTypeCreate(RpaySheetTypeCreate _rpaySheetTypeCreate = rpaySheetTypeCreate)
    {
        rpaySheetTypeCreate = _rpaySheetTypeCreate;
        return rpaySheetTypeCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSheetTransDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TransDate parmSheetTransDate(TransDate _transDate = sheetTransDate)
    {
        sheetTransDate = _transDate;
        return sheetTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>passToCash</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean passToCash()
    {
        Dialog               dlg = new Dialog("@RUP490");
        DialogField          dlgf_DateFrom, dlgf_DateTo;

        dlgf_DateFrom = dlg.addField(extendedTypeStr(TransDate));
        dlgf_DateFrom.value(paySheetTable.PaySheetDateFrom ? paySheetTable.PaySheetDateFrom : this.defaultPayFromDate());
        dlgf_DateFrom.label("@SYS81006");
        dlgf_DateTo = dlg.addField(extendedTypeStr(TransDate));
        dlgf_DateTo.value(paySheetTable.PaySheetDateTo ? paySheetTable.PaySheetDateTo : this.defaultPayToDate());
        dlgf_DateTo.label("@RUP502");
        dlg.run();

        if (! dlg.closedOk())
        {
            return false;
        }

        if (dlgf_DateFrom.value() > dlgf_DateTo.value())
        {
            return checkFailed("@SYS16982");
        }

        sheetTableDs.reread();
        if (paySheetTable.RecId && paySheetTable.PaySheetSost == RPaySheetSost::NoPaid && this.canSheetChange())
        {
            paySheetTable.PaySheetSost     = RPaySheetSost::ForPaid;
            paySheetTable.PaySheetDateFrom = dlgf_DateFrom.value();
            paySheetTable.PaySheetDateTo   = dlgf_DateTo.value();

            sheetTableDs.write();
            sheetTableDs.active();
            return true;
        }
        else
            return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetCreateDialog</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean paySheetCreateDialog()
    {
        Dialog         createdialog = new Dialog("@RUP550");
        DialogField    dialogFieldCreateType, dialogFieldSheetTransDate;
        boolean        ret = false;

        dialogFieldSheetTransDate = createdialog.addField(extendedTypeStr(TransDate), "@RUP2045");
        dialogFieldCreateType     = createdialog.addField(enumStr(RpaySheetTypeCreate));

        dialogFieldSheetTransDate.value(endmth(ctrlPayPeriod.dateValue()) == RPayParameters::payPeriod() ?
                                        RPayParameters::calcDate() :
                                        endmth(ctrlPayPeriod.dateValue()));

        this.setAllowEdit(dialogFieldSheetTransDate);

        createdialog.run();

        if (createdialog.closedOk())
        {
            this.parmPaySheetTypeCreate(dialogFieldCreateType.value());
            this.parmSheetTransDate(dialogFieldSheetTransDate.value());
            ret = this.checkSheetDialogParms();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetCreateQueryDialog</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean paySheetCreateQueryDialog()
    {
        FormRun queryForm;
        Args    args = new Args();
        boolean ret = false;
        QueryBuildRange queryBuildRange;

        args.name(formStr(SysQueryForm));

        queryBuildRange = queryRun.query().dataSourceTable(tableNum(RPayTrans)).findRange(fieldNum(RPayTrans, PayPeriod));
        if (queryBuildRange && ! queryBuildRange.value())
        {
            queryBuildRange.value(strFmt("@SYS82282",RPayParameters::payPeriod()));
        }

        args.caller(queryRun);
        queryForm = classfactory.formRunClass(args);
        queryForm.init();
        queryForm.run();
        queryForm.wait();
        if (queryForm.closedOk()) ret = true;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paySheetType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract protected RPaySheetType paySheetType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAllowEdit</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void setAllowEdit(DialogField _dialogField)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormDesign</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateFormDesign()
    {
        if (endmth(ctrlPayPeriod.dateValue()) >= RPayParameters::payPeriod())
        {
            if (paySheetTable.RecId && paySheetTable.PaySheetSost == RPaySheetSost::NoPaid && this.canSheetChange(false))
            {
                ctrlPay.enabled(true);
                ctrlSetSumm.enabled(true);
                ctrlQuery.enabled(true);
                sheetTableDs.allowEdit(true);
                sheetTableDs.allowCreate(true);
                sheetTableDs.allowDelete(true);
                sheetTransDs.allowCreate(true);
                sheetTransDs.allowDelete(true);
                sheetTransDs.allowEdit(true);
            }
            else
            {
                ctrlPay.enabled(false);
                ctrlSetSumm.enabled(false);
                ctrlQuery.enabled(false);
                sheetTableDs.allowEdit(false);
                sheetTableDs.allowCreate(true);
                sheetTableDs.allowDelete(true);
                sheetTransDs.allowCreate(false);
                sheetTransDs.allowDelete(false);
                sheetTransDs.allowEdit(false);
            }
        }
        else
        {
            ctrlPay.enabled(false);
            ctrlSetSumm.enabled(false);
            ctrlQuery.enabled(false);
            sheetTableDs.allowEdit(false);
            sheetTableDs.allowCreate(false);
            sheetTableDs.allowDelete(false);
            sheetTransDs.allowCreate(false);
            sheetTransDs.allowDelete(false);
            sheetTransDs.allowEdit(false);
        }
        ctrlRound.allowEdit(! paySheetTable.SumSheet);
        ctrlCalcReport.visible(false);
        ctrlCalcPayReport.visible(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePeriodicity</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updatePeriodicity(NoYes _isPaid)
    {
        RPayCalcSalaryPeriodicity rPayCalcSalaryPeriodicity;

        ttsbegin;

        rPayCalcSalaryPeriodicity = RPayCalcSalaryPeriodicity::find(paySheetTable.TransDate, true);

        if (rPayCalcSalaryPeriodicity)
        {
            rPayCalcSalaryPeriodicity.IsPaid = _isPaid;
            rPayCalcSalaryPeriodicity.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateQuery()
    {
        QueryBuildRange         queryBuildRange;
        QueryBuildDataSource    qbds;
        TransDate               dateLocal;

        qbds = queryRun.query().dataSourceTable(tableNum(RPayTrans));
        queryBuildRange = qbds.findRange(fieldNum(RPayTrans, PayPeriod));
        if (queryBuildRange && queryBuildRange.value())
        {
            dateLocal = str2DateDMY(strRem(queryBuildRange.value(), '\"'));
            if (dateLocal != dateNull())
            {
                queryBuildRange.value(queryValue(endmth(dateLocal)));
            }
        }

        qbds.sortClear();
        qbds.addOrderByField(fieldNum(RPayTrans, Emplid));
        qbds.addOrderByField(fieldNum(RPayTrans, PayPeriod), SortOrder::Descending);

        queryRun.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSheetAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the payroll sheet amount.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateSheetAmount()
    {
        RPaySheetTrans paySheetTrans;

        select sum(Amount) from paySheetTrans
            where paySheetTrans.SheetTableRecId == paySheetTable.RecId;

        ttsbegin;
        paySheetTable.SumSheet = paySheetTrans.Amount;
        sheetTableDs.write();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDelete</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean validateDelete()
    {
        if (paySheetTable.PayPeriod < RPayParameters::payPeriod())
        {
            return checkFailed("@RUP434");
        }

        if (paySheetTable.PaySheetSost == RPaySheetSost::Paid)
        {
            return checkFailed("@RUP653");
        }

        if (paySheetTable.PaySheetSost == RPaySheetSost::ForPaid)
        {
            if (paySheetTable.BankPayment == NoYes::Yes)
            {
                return checkFailed("@RUP654");
            }
            if (RPayDepositTable::exist(paySheetTable.RecId))
            {
                return checkFailed("@RUP1263");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RPaySheetEngine construct(FormRun formRun)
    {
        Object          caller;
        RPaySheetEngine rPaySheetEngine;

        caller = formRun;
        switch (caller.paySheetType())
        {
            case RPaySheetType::Payment:
                rPaySheetEngine = new RPaySheetEngine_Payment(formRun);
                break;
            case RPaySheetType::Vacation:
                rPaySheetEngine = new RPaySheetEngine_Vacation(formRun);
                break;
            case RPaySheetType::Prepayment:
                rPaySheetEngine =  new RPaySheetEngine_PrepayMent(formRun);
                break;
            case RPaySheetType::Interim:
                rPaySheetEngine =  new RPaySheetEngine_Interim(formRun);
                break;
            case RPaySheetType::Tax:
                rPaySheetEngine = new RPaySheetEngine_TaxReturn(formRun);
                break;

            default:
                rPaySheetEngine = new RPaySheetEngine_Common(formRun);
        }
        return rPaySheetEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBranchId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static BranchId_RU getBranchId(RHRMEmplId _emplId, ReportPeriod_RU _payPeriod)
    {
        RPayTaxEmplSum    rPayTaxEmplSum;
        select firstonly BranchId from rPayTaxEmplSum
            where rPayTaxEmplSum.EmplId             == _emplId &&
                  rPayTaxEmplSum.PayPeriod          == _payPeriod &&
                  rPayTaxEmplSum.CorrectedPeriod    == rPayTaxEmplSum.PayPeriod;
        return rPayTaxEmplSum.BranchId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>