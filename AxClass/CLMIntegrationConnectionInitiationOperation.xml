<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CLMIntegrationConnectionInitiationOperation</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Net.Http;

/// <summary>
/// The <c>CLMIntegrationConnectionInitiationOperation</c> class is implementation for the InitiateConnection service operation.
/// </summary>
[CLMIntegrationServiceOperation(CLMIntegrationBusinessOperation::InitiateConnection, CLMIntegrationOperationMethod::RESTService)]
internal class CLMIntegrationConnectionInitiationOperation extends CLMIntegrationServiceClient
{
    private static const str JSONContentType = 'application/json';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>deserializeResponse</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected CLMIntegrationIResponseContract deserializeResponse(HttpResponseMessage _responseMessage)
    {
        str responseMessageContentStr;
        CLMIntegrationConnectionInitiationResponseContract responseContract;

        try
        {
            if (_responseMessage)
            {
                responseContract = this.isJsonContentType(_responseMessage) ?
                    this.createContractFromJsonResponse(_responseMessage) :
                    this.createContractFromResponse(_responseMessage);
            }
            else
            {
                responseContract = this.createErrorContract("@CLMIntegration:ConnectionEstablishmentNoResponseError");
            }
        }
        catch (Exception::CLRError)
        {
            System.Exception clrException = CLRInterop::getLastException();
            responseContract = this.createErrorContract(clrException ? clrException.ToString() : '');
        }
        catch
        {
            responseContract = this.createErrorContract("@CLMIntegration:ConnectionEstablishmentDeserializationError");
        }

        return responseContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJsonContentType</Name>
				<Source><![CDATA[
    private boolean isJsonContentType(HttpResponseMessage _responseMessage)
    {
        return _responseMessage.Content &&
            _responseMessage.Content.Headers &&
            _responseMessage.Content.Headers.ContentType &&
            _responseMessage.Content.Headers.ContentType.MediaType &&
            _responseMessage.Content.Headers.ContentType.MediaType.ToString().ToLower() == JSONContentType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContractFromJsonResponse</Name>
				<Source><![CDATA[
    private CLMIntegrationConnectionInitiationResponseContract createContractFromJsonResponse(HttpResponseMessage _responseMessage)
    {
        str responseMessageContent = _responseMessage.Content.ReadAsStringAsync().Result;

        CLMIntegrationConnectionInitiationResponseContract responseContract =
            FormJsonSerializer::deserializeObject(classNum(CLMIntegrationConnectionInitiationResponseContract), responseMessageContent);
        responseContract.initStatus(_responseMessage);

        if (responseContract.parmStatus() == CLMIntegrationConnectionEstablishmentStatus::Error && !responseContract.parmErrorMessage())
        {
            responseContract.initErrorMessage(_responseMessage, responseMessageContent);
        }

        return responseContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContractFromResponse</Name>
				<Source><![CDATA[
    private CLMIntegrationConnectionInitiationResponseContract createContractFromResponse(HttpResponseMessage _responseMessage)
    {
        str responseMessageContent = _responseMessage.Content ? _responseMessage.Content.ReadAsStringAsync().Result : 'N/A';

        CLMIntegrationConnectionInitiationResponseContract responseContract = CLMIntegrationConnectionInitiationResponseContract::construct();
        responseContract.initStatus(_responseMessage);

        if (responseContract.parmStatus() == CLMIntegrationConnectionEstablishmentStatus::Error)
        {
            responseContract.initErrorMessage(_responseMessage, responseMessageContent);
        }

        return responseContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createErrorContract</Name>
				<Source><![CDATA[
    private CLMIntegrationConnectionInitiationResponseContract createErrorContract(str _errorMessage)
    {
        CLMIntegrationConnectionInitiationResponseContract responseContract = CLMIntegrationConnectionInitiationResponseContract::construct();
        responseContract.parmStatus(CLMIntegrationConnectionEstablishmentStatus::Error);
        responseContract.parmErrorMessage(_errorMessage);

        return responseContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>