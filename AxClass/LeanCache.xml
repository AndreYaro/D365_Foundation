<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LeanCache</c> class is an abstract base class that provides caching functionality based on the <c>SysGlobalObjectCache</c> class.
/// </summary>
public abstract class LeanCache
{
    #define.nullValue('__NullValue__')
    SysGlobalObjectCache sysGlobalObjectCache;

    container   lastFindValue;
    boolean     lastFindIsNullValue;
    boolean     lastFindIsCacheHit;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>any2container</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Encloses the given value in a <c>container</c> object.
    /// </summary>
    /// <param name="_anytype">
    ///    The value.
    /// </param>
    /// <returns>
    ///    A <c>container</c> object that holds the given value.
    /// </returns>
    /// <remarks>
    ///    If the given value already is a container, it is returned as is.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container any2container(anytype _anytype)
    {
        container   c;
        if (typeof(_anytype) != Types::Container)
        {
            c = [_anytype];
        }
        else
        {
            c = _anytype;
        }

        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the entire cache.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void clearCache()
    {
        sysGlobalObjectCache.clear(this.scopeName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds values in the cache that is stored under the provided key.
    /// </summary>
    /// <param name="_key">
    ///    The cache key.
    /// </param>
    /// <returns>
    ///    The value that is stored under the given key; otherwise, a null value.
    /// </returns>
    /// <remarks>
    ///    The base class always returns a value of type <c>container</c> . The return type is <c>anytype</c>
    ///    so that derived classes can overwrite this method to return data in more specific types.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public anytype find(anytype _key)
    {
        [lastFindIsNullValue,lastFindValue] = this.findInternal(_key);

        lastFindIsCacheHit = lastFindValue != connull();

        if (lastFindIsNullValue)
        {
            lastFindValue = connull();
        }

        return lastFindValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInternal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds values in the cache that is stored under the provided key.
    /// </summary>
    /// <param name="_key">
    ///    The cache key.
    /// </param>
    /// <returns>
    ///    A <c>container</c> object with two elements.
    /// </returns>
    /// <remarks>
    ///    The returned container has two elements. The first is a Boolean value that indicates whether the
    ///    result is a null value.The second element is the value as a <c>container</c> object.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container findInternal(anytype _key)
    {
        container   key   = this.any2container(_key);
        container   value = sysGlobalObjectCache.find(this.scopeName(),key);

        if (   value
            && !this.isValid(_key,value))
        {
            value = connull();
            this.remove(_key);
        }

        return [this.isNullValue(value),value];
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIsCacheHit</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the last call to the <c>find</c> method hits the cache.
    /// </summary>
    /// <returns>
    ///    true if the last find operation found a valid value; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Call the <c>find</c> method first in order to obtain a valid result.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean findIsCacheHit()
    {
        return lastFindIsCacheHit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findIsNullValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the last call to the <c>find</c> method returns a null value.
    /// </summary>
    /// <returns>
    ///    true if the last found value was a null value; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Call <c>find</c> first in order to obtain a valid result.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean findIsNullValue()
    {
        return lastFindIsNullValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the key value pair into the cache.
    /// </summary>
    /// <param name="_key">
    ///    The cache key.
    /// </param>
    /// <param name="_value">
    ///    The cache value.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void insert(
        anytype _key,
        anytype _value)
    {
        container   key   = this.any2container(_key);
        container   value = this.any2container(_value);

        sysGlobalObjectCache.insert(this.scopeName(),key,value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNullValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified value is a null value.
    /// </summary>
    /// <param name="_value">
    ///    A cached value.
    /// </param>
    /// <returns>
    ///    true if the given value is equivalent to a null value; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isNullValue(anytype _value)
    {
        return this.any2container(_value) == this.nullValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the specified key and value are valid.
    /// </summary>
    /// <param name="_key">
    ///    The cache key.
    /// </param>
    /// <param name="_value">
    ///    The cache value for the key.
    /// </param>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    Derived classes can override this method. If the method returns false, the corresponding entry will
    ///    be removed from the cache immediately after finding it and it will appear to the user as if no
    ///    value was found.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isValid(
        anytype _key,
        anytype _value)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected void new()
    {
        sysGlobalObjectCache = new SysGlobalObjectCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nullValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the value that is considered a null value in the cache.
    /// </summary>
    /// <returns>
    ///    A <c>container</c> object that represents the null value.
    /// </returns>
    /// <remarks>
    ///    The null value that should be used to declare the fact that, for a specific key, a related value
    ///    does not exist.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container nullValue()
    {
        return [#NullValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>remove</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes an entry from the cache that is stored under the given key.
    /// </summary>
    /// <param name="_key">
    ///    The key to remove.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void remove(anytype _key)
    {
        container   key = this.any2container(_key);

        sysGlobalObjectCache.remove(this.scopeName(),key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scopeName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the cache scope name.
    /// </summary>
    /// <returns>
    ///    The scope name.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected globalObjectCacheScope scopeName()
    {
        return strfmt('%1#%2',classId2Name(classidget(this)),curext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCacheServer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Clears the entire cache on the server.
    /// </summary>
    /// <param name="_scopeName">
    ///    The scope name to clear.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected static void clearCacheServer(globalObjectCacheScope _scopeName)
    {
        SysGlobalObjectCache cache = new SysGlobalObjectCache();
        cache.clear(_scopeName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>