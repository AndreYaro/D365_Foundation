<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjCashFlowReportsCalcEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This class will be used as an engine for the cash flow reports
class ProjCashFlowReportsCalcEngine extends ProjCashFlowCalcEngine
{
    ProjCashFlowReportType      type;
    Query                       tmpactualQuery;
    Query                       tmpbudgetQuery;
    QueryBuildDataSource        inflowActual1, inflowActual2,
                                outflowActual1, outflowActual2,

                                inflowBudget1, inflowBudget2,
                                outflowBudget1, outflowBudget2;

    QueryRun                    tmpactualQueryRun, tmpbudgetQueryRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>formatPeriodLabel</Name>
				<Source><![CDATA[
    // Get the period lable to be displayed on the report
    public str formatPeriodLabel(str _prefixLabel = '')
    {
        if (_prefixLabel)
        {
            return strFmt('%1: %2', _prefixLabel, strFmt("@SYS91013", date2StrUsr(projectFromDate, DateFlags::FormatAll),
                                                                date2StrUsr(projectToDate == dateMax() ? dateNull() : projectToDate, DateFlags::FormatAll)));
        }
        else
        {
            return strFmt("@SYS91013", date2StrUsr(projectFromDate, DateFlags::FormatAll),
                                date2StrUsr(projectToDate == dateMax() ? dateNull() : projectToDate, DateFlags::FormatAll));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatSelection</Name>
				<Source><![CDATA[
    // Display the selection crieteria
    public ProjListSelection formatSelection()
    {
        str s;

        if (actualBudgetDeviationSum == ProjActualBudget::Actual)
        {
            s = strFmt('%1', actualBudgetDeviationSum);
        }
        else
        {
            s = strFmt('%1 %2', actualBudgetDeviationSum, forecastModelId);
        }

        if (showAmount == ProjShowAmount::Amount1000 || showAmount == ProjShowAmount::Amount1000000)
        {
            s += strFmt(', %1',showAmount);
        }

        return s;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountDecimals</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of decimals with which to display the amounts on the report.
    /// </summary>
    /// <param name="_showAmount">
    ///    The <c>ProjShowAmount</c> value that specified the format in which to display the amount.
    /// </param>
    /// <returns>
    ///    The number of decimals with which the amounts on the reports should be displayed.
    /// </returns>
    public int getAmountDecimals(ProjShowAmount _showAmount)
    {
        System.Globalization.NumberFormatInfo fi;
        int amountDecimals;

        switch (_showAmount)
        {
            case ProjShowAmount::WithDec:
                fi = new System.Globalization.NumberFormatInfo();
                amountDecimals = fi.get_CurrencyDecimalDigits();
                break;

            case ProjShowAmount::WithoutDec:
                amountDecimals = 0;
                break;

            case ProjShowAmount::Amount1000:
                amountDecimals = ProjParameters::find().Amount1000Decimals;
                break;

            case ProjShowAmount::Amount1000000:
                amountDecimals = ProjParameters::find().Amount1000000Decimals;
                break;
        }
        return amountDecimals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashInflowBudgetResults</Name>
				<Source><![CDATA[
    // Return the temp table buffer containing the inflow budger results
    private Map getCashInflowBudgetResults()
    {
        // Get the query from the parent class
        this.buildQueryForBudgetV2(true);

        // Add the cash in flow specific ranges and conditions
        // Add the cash in flow specific ranges and conditions
        budgetQuerySource.addRange(fieldNum(ProjTransBudget, PostingType)).value(queryValue(LedgerPostingType::ProjTurnover));
        budgetQuerySource.addRange(fieldNum(ProjTransBudget, PostingType)).value(queryValue(LedgerPostingType::ProjOnAccount));
        budgetQuerySource.addRange(fieldNum(ProjTransBudget, PostingType)).value(queryValue(LedgerPostingType::ProjWIPCost));
        budgetQuerySource.addRange(fieldNum(ProjTransBudget, PostingType)).value(queryValue(LedgerPostingType::ProjWIPInvoicedOnAccount));

        // Get the query values
        return (this.runReportQueryInflow(false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashInflowResults</Name>
				<Source><![CDATA[
    // Get the inflow results for actuals
    private Map getCashInflowResults()
    {
        // Get the query from the parent class
        this.buildQueryForActuals(true);

        // Add the cash in flow specific ranges and conditions
        actualQuerySource.addRange(fieldNum(ProjTransPosting, PostingType)).value(queryValue(LedgerPostingType::ProjTurnover));
        actualQuerySource.addRange(fieldNum(ProjTransPosting, PostingType)).value(queryValue(LedgerPostingType::ProjOnAccount));
        actualQuerySource.addRange(fieldNum(ProjTransPosting, PostingType)).value(queryValue(LedgerPostingType::ProjWIPInvoicedOnAccount));

        // Get the query values
        return (this.runReportQueryInflow(true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashOutflowBudgetResults</Name>
				<Source><![CDATA[
    // Get the outflow results for budget
    private Map getCashOutflowBudgetResults()
    {
        // Get the query from the parent class
        this.buildQueryForBudgetV2(true);

        // Add the cash in flow specific ranges and conditions
        budgetQuerySource.addRange(fieldNum(ProjTransBudget, PostingType)).value(queryValue(LedgerPostingType::ProjCost));
        budgetQuerySource.addRange(fieldNum(ProjTransBudget, PostingType)).value(queryValue(LedgerPostingType::ProjWIPCostvalue));
        budgetQuerySource.addRange(fieldNum(ProjTransBudget, PostingType)).value(queryValue(LedgerPostingType::ProjOffsetAccountItem));
        budgetQuerySource.addRange(fieldNum(ProjTransBudget, PostingType)).value(queryValue(LedgerPostingType::ProjStatusAccountItem));

        // Get the query values
        return (this.runReportQueryOutflow(false));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashOutflowResults</Name>
				<Source><![CDATA[
    // Get the outflow results for actuals
    private Map getCashOutflowResults()
    {
        // Get the query from the parent class
        this.buildQueryForActuals(true);

        // Add the cash in flow specific ranges and conditions
        actualQuerySource.addRange(fieldNum(ProjTransPosting, PostingType)).value(queryValue(LedgerPostingType::ProjCost));
        actualQuerySource.addRange(fieldNum(ProjTransPosting, PostingType)).value(queryValue(LedgerPostingType::ProjWIPCostvalue));
        actualQuerySource.addRange(fieldNum(ProjTransPosting, PostingType)).value(queryValue(LedgerPostingType::ProjNoLedger));
        actualQuerySource.addRange(fieldNum(ProjTransPosting, PostingType)).value(queryValue(LedgerPostingType::ProjNeverLedger));

        // Get the query values
        return(this.runReportQueryOutflow(true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalResultActual</Name>
				<Source><![CDATA[
    // This method will get the actuals (inflow, outflow) results
    public TmpProjCashFlowReport getFinalResultActual()
    {
        Map inflowBuffer, outflowBuffer;
        MapEnumerator oMapEnum;
        TmpProjCashFlowReport        actualResults;

        // Get the inflow and the outflow results
        inflowBuffer = this.getCashInflowResults();
        outflowBuffer = this.getCashOutflowResults();

        ttsbegin;

        // Insert the inflow results into the final table
        oMapEnum =  inflowBuffer.getEnumerator();
        while (oMapEnum.moveNext())
        {
            actualResults.Id = oMapEnum.currentKey();
            actualResults.AmountInflow = oMapEnum.currentValue();
            actualResults.AmountOutflow = 0.00;
            actualResults.AmountNet = oMapEnum.currentValue();
            actualResults.insert();
        }

        // Update the final table and set the outflow and net values
        oMapEnum =  outflowBuffer.getEnumerator();
        while (oMapEnum.moveNext())
        {
            if (inflowBuffer.exists(oMapEnum.currentKey()))
            {
                select forupdate actualResults where actualResults.Id == oMapEnum.currentKey();
                if (actualResults)
                {
                    actualResults.Id = oMapEnum.currentKey();
                    actualResults.AmountOutflow = oMapEnum.currentValue();
                    actualResults.AmountNet = actualResults.AmountInflow - oMapEnum.currentValue();
                    actualResults.update();
                }
            }
            else
            {
                actualResults.Id = oMapEnum.currentKey();
                actualResults.AmountInflow = 0.00;
                actualResults.AmountOutflow = oMapEnum.currentValue();
                actualResults.AmountNet = oMapEnum.currentValue()*-1;
                actualResults.insert();
            }
        }

        ttscommit;

        return actualResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalResultBudget</Name>
				<Source><![CDATA[
    // This method will get the budget (inflow, outflow) results
    public TmpProjCashFlowReport getFinalResultBudget()
    {
        Map inflowBuffer, outflowBuffer;
        MapEnumerator oMapEnum;
        TmpProjCashFlowReport        budgetResults;

        // Get the inflow and the outflow results for budgets
        inflowBuffer = this.getCashInflowBudgetResults();
        outflowBuffer = this.getCashOutflowBudgetResults();

        ttsbegin;

        // Insert the inflow results into the final table
        oMapEnum =  inflowBuffer.getEnumerator();
        while (oMapEnum.moveNext())
        {
            budgetResults.Id = oMapEnum.currentKey();
            budgetResults.AmountInflow = oMapEnum.currentValue();
            budgetResults.AmountOutflow = 0.00;
            budgetResults.AmountNet = oMapEnum.currentValue();
            budgetResults.insert();
        }

        // Update the final table and set the outflow and net values
        oMapEnum =  outflowBuffer.getEnumerator();
        while (oMapEnum.moveNext())
        {
            if (inflowBuffer.exists(oMapEnum.currentKey()))
            {
                select forupdate budgetResults where budgetResults.Id == oMapEnum.currentKey();
                if (budgetResults)
                {
                    budgetResults.Id = oMapEnum.currentKey();
                    budgetResults.AmountOutflow = oMapEnum.currentValue();
                    budgetResults.AmountNet = budgetResults.AmountInflow - oMapEnum.currentValue();
                    budgetResults.update();
                }
            }
            else
            {
                budgetResults.Id = oMapEnum.currentKey();
                budgetResults.AmountInflow = 0.00;
                budgetResults.AmountOutflow = oMapEnum.currentValue();
                budgetResults.AmountNet = oMapEnum.currentValue()*-1;
                budgetResults.insert();
            }
        }

        ttscommit;

        return budgetResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalResultDeviation</Name>
				<Source><![CDATA[
    // This method will merge the actuals and the budget (inflow, outflow) results to get deviation
    public TmpProjCashFlowReport getFinalResultDeviation ()
    {
        TmpProjCashFlowReport        budgetResults, actualResults, mergedResults;

        ttsbegin;

        // Fill in the new buffer with the difference of the results
        actualResults = this.getFinalResultActual();
        budgetResults = this.getFinalResultBudget();

        // Get the difference
        // Update the actualResults with the deviation for the records existing in both tables
        while
    select forupdate actualResults
    join budgetResults
    where actualResults.Id == budgetResults.Id
        {
            actualResults.AmountInflow = actualResults.AmountInflow - budgetResults.AmountInflow;
            actualResults.AmountOutflow = actualResults.AmountOutflow - budgetResults.AmountOutflow;
            actualResults.AmountNet = actualResults.AmountNet - budgetResults.AmountNet;
            actualResults.update();
        }

        insert_recordset mergedResults (Name, Id, AmountInflow, AmountOutflow, AmountNet)
    select Name, Id, AmountInflow, AmountOutflow, AmountNet
    from actualResults;

        // Insert the deviation for records only existing in budgetresults and not in actualResults
        insert_recordset mergedResults (Name, Id, AmountInflow, AmountOutflow, AmountNet)
    select Name, Id, AmountInflow, AmountOutflow, AmountNet
    from budgetResults notexists join actualResults
    where budgetResults.Id == actualResults.Id;

        ttscommit;

        return mergedResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFinalResultSum</Name>
				<Source><![CDATA[
    // This method will merge the actuals and the budget (inflow, outflow) results to get the sum
    public TmpProjCashFlowReport getFinalResultSum()
    {
        TmpProjCashFlowReport        budgetResults, actualResults, mergedResults;

        ttsbegin;

        // Fill in the new buffer with the difference of the results
        actualResults = this.getFinalResultActual();
        budgetResults = this.getFinalResultBudget();

        // Get the sum
        // Update the actualResults with the deviation for the records existing in both tables
        while
    select forupdate actualResults
    join budgetResults
    where actualResults.Id == budgetResults.Id
        {
            actualResults.AmountInflow = actualResults.AmountInflow + budgetResults.AmountInflow;
            actualResults.AmountOutflow = actualResults.AmountOutflow + budgetResults.AmountOutflow;
            actualResults.AmountNet = actualResults.AmountNet + budgetResults.AmountNet;
            actualResults.update();
        }

        insert_recordset mergedResults (Name, Id, AmountInflow, AmountOutflow, AmountNet)
    select Name, Id, AmountInflow, AmountOutflow, AmountNet
    from actualResults;

        // Insert the sum for records only existing in budgetresults and not in actualResults
        insert_recordset mergedResults (Name, Id, AmountInflow, AmountOutflow, AmountNet)
    select Name, Id, AmountInflow, AmountOutflow, AmountNet
    from budgetResults notexists join actualResults
    where budgetResults.Id == actualResults.Id;

        ttscommit;

        return mergedResults;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(ProjCashFlow tmpProjCashFlow, ProjCashFlowReportType _type, Level _projLevel = 0)
    {
        super(tmpProjCashFlow, _type);

        type = _type;
        projLevel = _projLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReportQueryInflow</Name>
				<Source><![CDATA[
    // This method will execute the query and get the results for inflow
    private Map runReportQueryInflow(boolean _isActual)
    {
        ProjTransPosting        locProjTransPosting;
        ProjTransBudget         locProjTransBudget;
        Map                     projMap, catMap, itemMap, resourceMap, resourceCategoryMap, subscriptionMap;
        real                    rNum, tmpNum;
        ResResourceID           resourceID;
        ResourceCategoryID      resourceCategoryID;

        projMap = new Map(Types::String, Types::Real);
        catMap = new Map(Types::String, Types::Real);
        itemMap = new Map(Types::String, Types::Real);
        resourceMap = new Map(Types::String, Types::Real);
        resourceCategoryMap = new Map(Types::String, Types::Real);
        subscriptionMap = new Map(Types::String, Types::Real);

        // Execute the query
        if (_isActual)
        {
            actualQueryRun    = new QueryRun(actualQuery);

            // Iterate through the records of the query
            while (actualQueryRun.next())
            {
                locProjTransPosting  = actualQueryRun.get(tableNum(ProjTransPosting));
                switch (type)
                {
                    // Project
                    case ProjCashFlowReportType::Project:
                        tmpNum = locProjTransPosting.AmountMst * -1;
                        if (projMap.exists(locProjTransPosting.ProjId))
                        {
                            rNum = projMap.lookup(locProjTransPosting.ProjId);
                            rNum = rNum + tmpNum;
                            projMap.insert(locProjTransPosting.ProjId, rNum);
                        }
                        else
                        {
                            projMap.insert(locProjTransPosting.ProjId, tmpNum);
                        }
                        break;

                    // Category
                    case ProjCashFlowReportType::Category:
                        tmpNum = locProjTransPosting.AmountMst * -1;
                        if (catMap.exists(locProjTransPosting.CategoryId))
                        {
                            rNum = catMap.lookup(locProjTransPosting.CategoryId);
                            rNum = rNum + tmpNum;
                            catMap.insert(locProjTransPosting.CategoryId, rNum);
                        }
                        else
                        {
                            catMap.insert(locProjTransPosting.CategoryId, tmpNum);
                        }
                        break;

                    // Item
                    case ProjCashFlowReportType::Item:
                        tmpNum = locProjTransPosting.AmountMst * -1;
                        if (itemMap.exists(locProjTransPosting.EmplItemId))
                        {
                            rNum = itemMap.lookup(locProjTransPosting.EmplItemId);
                            rNum = rNum + tmpNum;
                            itemMap.insert(locProjTransPosting.EmplItemId, rNum);
                        }
                        else
                        {
                            itemMap.insert(locProjTransPosting.EmplItemId, tmpNum);
                        }
                        break;

                    // Resource
                    case ProjCashFlowReportType::Worker:
                        tmpNum = locProjTransPosting.AmountMst * -1;
                        resourceID = ResourceFacade::getID(locProjTransPosting.Resource);
                        if (resourceMap.exists(resourceID))
                        {
                            rNum = resourceMap.lookup(resourceID);
                            rNum = rNum + tmpNum;
                            resourceMap.insert(resourceID, rNum);
                        }
                        else
                        {
                            resourceMap.insert(resourceID, tmpNum);
                        }
                        break;

                    // ResourceCategory
                    case ProjCashFlowReportType::ResourceCategory:
                        tmpNum = locProjTransPosting.AmountMst * -1;
                        resourceCategoryID = ResourceCategoryFacade::getID(locProjTransPosting.ResourceCategory);
                        if (resourceCategoryMap.exists(resourceCategoryID))
                        {
                            rNum = resourceCategoryMap.lookup(resourceCategoryID);
                            rNum = rNum + tmpNum;
                            resourceCategoryMap.insert(resourceCategoryID, rNum);
                        }
                        else
                        {
                            resourceCategoryMap.insert(resourceCategoryID, tmpNum);
                        }
                        break;

                    // Subscription
                    case ProjCashFlowReportType::Subscription:
                        tmpNum = locProjTransPosting.AmountMst * -1;
                        if (subscriptionMap.exists(locProjTransPosting.SubscriptionId))
                        {
                            rNum = subscriptionMap.lookup(locProjTransPosting.SubscriptionId);
                            rNum = rNum + tmpNum;
                            subscriptionMap.insert(locProjTransPosting.SubscriptionId, rNum);
                        }
                        else
                        {
                            subscriptionMap.insert(locProjTransPosting.SubscriptionId, tmpNum);
                        }
                        break;
                }
            }
        }

        // Budget
        else
        {
            budgetQueryRun    = new QueryRun(budgetQuery);

            // Iterate through the records of the query
            while (budgetQueryRun.next())
            {
                locProjTransBudget = budgetQueryRun.getNo(1);
                switch (type)
                {
                    // Project
                    case ProjCashFlowReportType::Project:
                        tmpNum = locProjTransBudget.AmountMst * -1;
                        if (projMap.exists(locProjTransBudget.ProjId))
                        {
                            rNum = projMap.lookup(locProjTransBudget.ProjId);
                            rNum = rNum + tmpNum;
                            projMap.insert(locProjTransBudget.ProjId, rNum);
                        }
                        else
                        {
                            projMap.insert(locProjTransBudget.ProjId, tmpNum);
                        }
                        break;
                    case ProjCashFlowReportType::Category:
                        tmpNum = locProjTransBudget.AmountMst * -1;
                        if (catMap.exists(locProjTransBudget.CategoryId))
                        {
                            rNum = catMap.lookup(locProjTransBudget.CategoryId);
                            rNum = rNum + tmpNum;
                            catMap.insert(locProjTransBudget.CategoryId, rNum);
                        }
                        else
                        {
                            catMap.insert(locProjTransBudget.CategoryId, tmpNum);
                        }
                        break;
                    case ProjCashFlowReportType::Item:
                        tmpNum = locProjTransBudget.AmountMst * -1;
                        if (itemMap.exists(locProjTransBudget.EmplItemId))
                        {
                            rNum = itemMap.lookup(locProjTransBudget.EmplItemId);
                            rNum = rNum + tmpNum;
                            itemMap.insert(locProjTransBudget.EmplItemId, rNum);
                        }
                        else
                        {
                            itemMap.insert(locProjTransBudget.EmplItemId, tmpNum);
                        }
                        break;

                    case ProjCashFlowReportType::Worker:
                        tmpNum = locProjTransBudget.AmountMst * -1;
                        resourceID = ResourceFacade::getID(locProjTransBudget.Resource);
                        if (resourceMap.exists(resourceID))
                        {
                            rNum = resourceMap.lookup(resourceID);
                            rNum = rNum + tmpNum;
                            resourceMap.insert(resourceID, rNum);
                        }
                        else
                        {
                            resourceMap.insert(resourceID, tmpNum);
                        }
                        break;

                    case ProjCashFlowReportType::ResourceCategory:
                        tmpNum = locProjTransBudget.AmountMst * -1;
                        resourceCategoryID = ResourceCategoryFacade::getID(locProjTransBudget.ResourceCategory);
                        if (resourceCategoryMap.exists(resourceCategoryID))
                        {
                            rNum = resourceCategoryMap.lookup(resourceCategoryID);
                            rNum = rNum + tmpNum;
                            resourceCategoryMap.insert(resourceCategoryID, rNum);
                        }
                        else
                        {
                            resourceCategoryMap.insert(resourceCategoryID, tmpNum);
                        }
                        break;

                    case ProjCashFlowReportType::Subscription:
                        tmpNum = locProjTransPosting.AmountMst * -1;
                        if (subscriptionMap.exists(locProjTransBudget.SubscriptionId))
                        {
                            rNum = subscriptionMap.lookup(locProjTransBudget.SubscriptionId);
                            rNum = rNum + tmpNum;
                            subscriptionMap.insert(locProjTransBudget.SubscriptionId, rNum);
                        }
                        else
                        {
                            subscriptionMap.insert(locProjTransBudget.SubscriptionId, tmpNum);
                        }
                        break;
                }
            }
        }

        // Return the correct buffer
        if (type == ProjCashFlowReportType::Project)
        {
            return projMap;
        }
        else if (type == ProjCashFlowReportType::Category)
        {
            return catMap;
        }
        else if (type == ProjCashFlowReportType::Item)
        {
            return itemMap;
        }
        else if (type == ProjCashFlowReportType::Worker)
        {
            return resourceMap;
        }
        else if (type == ProjCashFlowReportType::ResourceCategory)
        {
            return resourceCategoryMap;
        }
        else
        {
            return subscriptionMap;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReportQueryOutflow</Name>
				<Source><![CDATA[
    // This method will execute the query and get the results
    private Map runReportQueryOutflow(boolean _isActual)
    {
        ProjTransPosting    locProjTransPosting;
        ProjTransBudget     locProjTransBudget;
        Map                 projMap, catMap, itemMap, resourceMap, resourceCategoryMap, subscriptionMap;
        real                rNum;
        ResResourceID       resourceID;
        ResourceCategoryID  resourceCategoryID;

        projMap = new Map(Types::String, Types::Real);
        catMap = new Map(Types::String, Types::Real);
        itemMap = new Map(Types::String, Types::Real);
        resourceMap = new Map(Types::String, Types::Real);
        resourceCategoryMap = new Map(Types::String, Types::Real);
        subscriptionMap = new Map(Types::String, Types::Real);

        // Execute the query
        if (_isActual)
        {
            actualQueryRun    = new QueryRun(actualQuery);
            while (actualQueryRun.next())
            {
                locProjTransPosting = actualQueryRun.get(tableNum(ProjTransPosting));
                switch (type)
                {
                    case ProjCashFlowReportType::Project:
                        // Project
                        if (projMap.exists(locProjTransPosting.ProjId))
                        {
                            rNum = projMap.lookup(locProjTransPosting.ProjId);
                            rNum = rNum + locProjTransPosting.AmountMst;
                            projMap.insert(locProjTransPosting.ProjId, rNum);
                        }
                        else
                        {
                            projMap.insert(locProjTransPosting.ProjId, locProjTransPosting.AmountMst);
                        }
                        break;
                    case ProjCashFlowReportType::Category:
                        // Category
                        if (catMap.exists(locProjTransPosting.CategoryId))
                        {
                            rNum = catMap.lookup(locProjTransPosting.CategoryId);
                            rNum = rNum + locProjTransPosting.AmountMst;
                            catMap.insert(locProjTransPosting.CategoryId, rNum);
                        }
                        else
                        {
                            catMap.insert(locProjTransPosting.CategoryId, locProjTransPosting.AmountMst);
                        }
                        break;
                    case ProjCashFlowReportType::Item:
                        // Item
                        if (itemMap.exists(locProjTransPosting.EmplItemId))
                        {
                            rNum = itemMap.lookup(locProjTransPosting.EmplItemId);
                            rNum = rNum + locProjTransPosting.AmountMst;
                            itemMap.insert(locProjTransPosting.EmplItemId, rNum);
                        }
                        else
                        {
                            itemMap.insert(locProjTransPosting.EmplItemId, locProjTransPosting.AmountMst);
                        }
                        break;

                    case ProjCashFlowReportType::Worker:
                        // Resource
                        resourceID = ResourceFacade::getID(locProjTransPosting.Resource);
                        if (resourceMap.exists(resourceID))
                        {
                            rNum = resourceMap.lookup(resourceID);
                            rNum = rNum + locProjTransPosting.AmountMst;
                            resourceMap.insert(resourceID, rNum);
                        }
                        else
                        {
                            resourceMap.insert(resourceID, locProjTransPosting.AmountMst);
                        }
                        break;

                    case ProjCashFlowReportType::ResourceCategory:
                        // Resource category
                        resourceCategoryID = ResourceCategoryFacade::getID(locProjTransPosting.ResourceCategory);
                        if (resourceCategoryMap.exists(resourceCategoryID))
                        {
                            rNum = resourceCategoryMap.lookup(resourceCategoryID);
                            rNum = rNum + locProjTransPosting.AmountMst;
                            resourceCategoryMap.insert(resourceCategoryID, rNum);
                        }
                        else
                        {
                            resourceCategoryMap.insert(resourceCategoryID, locProjTransPosting.AmountMst);
                        }
                        break;

                    // Subscription
                    case ProjCashFlowReportType::Subscription:
                    if (subscriptionMap.exists(locProjTransPosting.SubscriptionId))
                        {
                            rNum = subscriptionMap.lookup(locProjTransPosting.SubscriptionId);
                            rNum = rNum + locProjTransPosting.AmountMst;
                            subscriptionMap.insert(locProjTransPosting.SubscriptionId, rNum);
                        }
                        else
                        {
                            subscriptionMap.insert(locProjTransPosting.SubscriptionId, locProjTransPosting.AmountMst);
                        }
                        break;
                }
            }
        }

        // Budget
        else
        {
            budgetQueryRun    = new QueryRun(budgetQuery);

            // Iterate through the records of the query
            while (budgetQueryRun.next())
            {
                // Table 1
                locProjTransBudget                  = budgetQueryRun.getNo(1);
                switch (type)
                {
                    case ProjCashFlowReportType::Project:
                        // Project
                        if (projMap.exists(locProjTransBudget.ProjId))
                        {
                            rNum = projMap.lookup(locProjTransBudget.ProjId);
                            rNum = rNum + locProjTransBudget.AmountMst;
                            projMap.insert(locProjTransBudget.ProjId, rNum);
                        }
                        else
                        {
                            projMap.insert(locProjTransBudget.ProjId, locProjTransBudget.AmountMst);
                        }
                        break;
                    case ProjCashFlowReportType::Category:
                    if (catMap.exists(locProjTransBudget.CategoryId))
                        {
                            rNum = catMap.lookup(locProjTransBudget.CategoryId);
                            rNum = rNum + locProjTransBudget.AmountMst;
                            catMap.insert(locProjTransBudget.CategoryId, rNum);
                        }
                        else
                        {
                            catMap.insert(locProjTransBudget.CategoryId, locProjTransBudget.AmountMst);
                        }
                        break;
                    case ProjCashFlowReportType::Item:
                    if (itemMap.exists(locProjTransBudget.EmplItemId))
                        {
                            rNum = itemMap.lookup(locProjTransBudget.EmplItemId);
                            rNum = rNum + locProjTransBudget.AmountMst;
                            itemMap.insert(locProjTransBudget.EmplItemId, rNum);
                        }
                        else
                        {
                            itemMap.insert(locProjTransBudget.EmplItemId, locProjTransBudget.AmountMst);
                        }
                        break;
                    case ProjCashFlowReportType::Worker:
                        resourceID = ResourceFacade::getID(locProjTransBudget.Resource);
                        if (resourceMap.exists(resourceID))
                        {
                            rNum = resourceMap.lookup(resourceID);
                            rNum = rNum + locProjTransBudget.AmountMst;
                            resourceMap.insert(resourceID, rNum);
                        }
                        else
                        {
                            resourceMap.insert(resourceID, locProjTransBudget.AmountMst);
                        }
                        break;
                    case ProjCashFlowReportType::ResourceCategory:
                        resourceCategoryID = ResourceCategoryFacade::getID(locProjTransBudget.ResourceCategory);
                        if (resourceCategoryMap.exists(resourceCategoryID))
                        {
                            rNum = resourceCategoryMap.lookup(resourceCategoryID);
                            rNum = rNum + locProjTransBudget.AmountMst;
                            resourceCategoryMap.insert(resourceCategoryID, rNum);
                        }
                        else
                        {
                            resourceCategoryMap.insert(resourceCategoryID, locProjTransBudget.AmountMst);
                        }
                        break;
                    case ProjCashFlowReportType::Subscription:
                    if (subscriptionMap.exists(locProjTransBudget.SubscriptionId))
                        {
                            rNum = subscriptionMap.lookup(locProjTransBudget.SubscriptionId);
                            rNum = rNum + locProjTransBudget.AmountMst;
                            subscriptionMap.insert(locProjTransBudget.SubscriptionId, rNum);
                        }
                        else
                        {
                            subscriptionMap.insert(locProjTransBudget.SubscriptionId, locProjTransBudget.AmountMst);
                        }
                        break;
                }
            }
        }

        // Return the correct map
        if (type == ProjCashFlowReportType::Project)
        {
            return projMap;
        }
        else if (type == ProjCashFlowReportType::Category)
        {
            return catMap;
        }
        else if (type == ProjCashFlowReportType::Item)
        {
            return itemMap;
        }
        else if (type == ProjCashFlowReportType::Worker)
        {
            return resourceMap;
        }
        else if (type == ProjCashFlowReportType::ResourceCategory)
        {
            return resourceCategoryMap;
        }
        else
        {
            return subscriptionMap;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showAmountReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the amount in the form that was chosen by the user
    /// </summary>
    /// <param name="_amountMST">
    ///    An <c>AmountMST</c> value to retrieve.
    /// </param>
    /// <param name="_parmShowAmount">
    ///    The <c>ProjShowAmount</c> value that specified the format in which to display the amount.
    /// </param>
    /// <returns>
    ///    The project amount report value to use in the report.
    /// </returns>
    public AmountMST showAmountReport(AmountMST _amountMST,ProjShowAmount  _parmShowAmount)
    {
        AmountMST   projAmountReport   = _amountMST;

        if (_parmShowAmount == ProjShowAmount::Amount1000)
        {
            projAmountReport    =  (_amountMST / 1000);
        }
        else if (_parmShowAmount == ProjShowAmount::Amount1000000)
        {
            projAmountReport    =  (_amountMST / 1000000);
        }
        return projAmountReport;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>