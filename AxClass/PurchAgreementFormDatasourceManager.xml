<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementFormDatasourceManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>PurchAgreementFormDatasourceManager</c> contains shared code between the form datasources <see cref="PurchAgreement Form"/> and <see cref="PurchAgreementCreate Form"/>
/// </summary>
public class PurchAgreementFormDatasourceManager extends AgreementFormDatasourceManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doTransferVendData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transferring data from Vendor to Purchase Agreement Header, Purchase Agreement Header Default and
    /// Agreement Header default, without prompting the user.
    /// </summary>
    /// <param name = "_transferVendTable">The vendor to transfer.</param>
    protected void doTransferVendData(VendTable _transferVendTable)
    {
        PurchAgreementHeader        purchAgreementHeader = agreementHeader as PurchAgreementHeader;
        PurchAgreementHeaderExt_RU  purchAgreementHeaderExt_RU = agreementHeaderExt_RU as PurchAgreementHeaderExt_RU;

        purchAgreementHeader.initFromVendTable(_transferVendTable);

        purchSalesagreementHeaderDefault.initFromVendTable(_transferVendTable, purchAgreementHeader.VendAccount);

        agreementHeaderDefault.initFromVendTable(_transferVendTable);

        FormDataSource agreementHeaderDefault_ds = SysFormDataSource::findDataSource(formRun, tableNum(AgreementHeaderDefault));
        agreementHeaderDefault_ds.refresh();

        if (isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            FormDataSource purchAgreementHeaderDefault_ds = SysFormDataSource::findDataSource(formRun, tableNum(PurchAgreementHeaderDefault));
            purchAgreementHeaderDefault_ds.refresh();
        }

        FormDataSource purchAgreementHeader_ds = SysFormDataSource::findDataSource(formRun, tableNum(PurchAgreementHeader));
        purchAgreementHeader_ds.refresh();

        // <GEERU>
        if (countryRegion_RU)
        {
            purchAgreementHeaderExt_RU.initFromVendTable(_transferVendTable);
            purchAgreementHeaderExt_RU.initFromDeliveryTerm(DlvTerm::find(agreementHeaderDefault.DeliveryTerm));

            FormDataSource purchAgreementHeaderExt_RU_ds = SysFormDataSource::findDataSource(formRun, tableNum(PurchAgreementHeaderExt_RU));
            purchAgreementHeaderExt_RU_ds.refresh();
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferVendAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transferring data from Vendor to Purchase Agreement Header, Purchase Agreement Header Default and
    /// Agreement Header default, optionally prompting the user before proceeding.
    /// </summary>
    /// <param name="_doPromptUser">
    /// If true, user will be asked about transfer vendor data.
    /// </param>
    /// <remarks>
    /// When user requested to be prompted transferring only if user selects Yes in the prompt box.
    /// </remarks>
    public void transferVendAccount(boolean _doPromptUser = true)
    {
        VendTable                   transferVendTable;
        PurchAgreementHeader        purchAgreementHeader = agreementHeader as PurchAgreementHeader;

        if (purchAgreementHeader.VendAccount &&
           !(_doPromptUser
             && PurchParameters::find().PromptTransfer
             && Box::yesNo("@SYS22099" + '\n\n' + VendTable::promptAddress(purchAgreementHeader.VendAccount), DialogButton::Yes)
                == DialogButton::No))
        {
            transferVendTable = VendTable::find(purchAgreementHeader.VendAccount);

            this.doTransferVendData(transferVendTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmsSetCarrierFieldsFromDlvMode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets all the fields that depend on carrier.
    /// </summary>
    /// <param name="_dlvModeId">The delivery mode Id</param>
    public void tmsSetCarrierFieldsFromDlvMode(DlvModeId _dlvModeId)
    {
        TMSPurchAgreementHeader tmsPurchAgreementHeader = tmsAgreementHeader as TMSPurchAgreementHeader;

        tmsPurchAgreementHeader.setCarrierFieldsFromDlvMode(_dlvModeId);

        FormDataSource tmsPurchAgreementHeader_ds = SysFormDataSource::findDataSource(formRun, tableNum(TMSPurchAgreementHeader));
        tmsPurchAgreementHeader_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findContactPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds contact person based on name and current vendor.
    /// </summary>
    /// <param name = "_name">Name of the contact person</param>
    /// <returns><c>ContactPerson</c> if one found</returns>
    protected ContactPerson findContactPerson(ContactPersonName _name)
    {
        VendTable       vendTable;
        DirPartyTable   partyTable;
        ContactPerson   contactPerson;
        CustVendAC      custVendAccount = this.getCustVendAccount();

        select firstonly contactPerson
            join AccountNum, Party from vendTable
            where vendTable.AccountNum == custVendAccount
               && vendTable.Party      == contactPerson.ContactForParty
                join partyTable
                where partyTable.RecId == contactPerson.Party
                   && partyTable.Name like _name;

        return contactPerson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkContactPersonFailedMessage</Name>
				<Source><![CDATA[
    protected str checkContactPersonFailedMessage()
    {
        return "@SYS114308";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendAccount</Name>
				<Source><![CDATA[
    protected VendAccount getCustVendAccount()
    {
        PurchAgreementHeader purchAgreementHeader = agreementHeader as PurchAgreementHeader;
        return purchAgreementHeader.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendAccountFromContactPerson</Name>
				<Source><![CDATA[
    protected CustVendAC getCustVendAccountFromContactPerson(ContactPerson _contactPerson)
    {
        return _contactPerson.getVendAccount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAgreementHeaderExt_RUTableNum</Name>
				<Source><![CDATA[
    protected int getAgreementHeaderExt_RUTableNum()
    {
        return tableNum(PurchAgreementHeaderExt_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateProjectWrite</Name>
				<Source><![CDATA[
    protected boolean validateProjectWrite()
    {
        return ProjTable::find(agreementHeaderDefault.Project).status().validateWritePurchTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchAgreementFormDatasourceManager construct()
    {
        PurchAgreementFormDatasourceManager result = new PurchAgreementFormDatasourceManager();

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>