<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransCleanupOrphanedRecordsTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class SpecTransCleanupOrphanedRecordsTask implements IDataMaintenanceTask
{
    private SpecTrans specTrans;
    private SpecTrans specTransToDel;
    private DataMaintenanceTaskResult taskResult;
    private CashManagementDataMaintainLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@CashManagement:SpecTransCleanupTaskOrphanedRecordsCaption");
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceTaskResult run()
    {
        taskResult = DataMaintenanceTaskResult::construct();
        logger = CashManagementDataMaintainLogger::createLogger(classStr(SpecTransCleanupDataAction));
        taskResult.parmCount(this.deleteSpecTrans());
        return taskResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTrans</Name>
				<Source><![CDATA[
    private int deleteSpecTrans()
    {
        CashManagementDataMaintainHelper::skipDeleteLogic(specTransToDel);

        return this.deleteSpecTransOrphanForRefEqualsZero()
            + this.deleteSpecTransOrphanForSpecEqualsZero()
            + this.deleteSpecTransOrphanForLedgerJournalTransPosted()
            + this.deleteSpecTransOrphanForPurchaseOrderFinalized()
            + this.deleteCustTransMarkedOpenLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTransOrphanForRefEqualsZero</Name>
				<Source><![CDATA[
    private int deleteSpecTransOrphanForRefEqualsZero()
    {
        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(
            CashManagementDataMaintainInstrumentationConstants::DeleteSpecTransForRefEqualsZero))
        {
            SysDaQueryObject queryObject = this.buildQuerySpecTransForRefEqualsZero();
            CashManagementDataMaintainHelper::statementDelete(queryObject);

            int fixCount = int642int(specTransToDel.RowCount());
            this.addMessage(fixCount, activityContext, "@CashManagement:SpecTransCleanupResultForRefEqualsZero");
            return fixCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTransOrphanForSpecEqualsZero</Name>
				<Source><![CDATA[
    private int deleteSpecTransOrphanForSpecEqualsZero()
    {
        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(
            CashManagementDataMaintainInstrumentationConstants::DeleteSpecTransForSpecEqualsZero))
        {
            SysDaQueryObject queryObject = this.buildQuerySpecTransForSpecEqualsZero();
            CashManagementDataMaintainHelper::statementDelete(queryObject);
            
            int fixCount = int642int(specTransToDel.RowCount());
            this.addMessage(fixCount, activityContext, "@CashManagement:SpecTransCleanupResultForSpecEqualsZero");
            return fixCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTransOrphanForLedgerJournalTransPosted</Name>
				<Source><![CDATA[
    private int deleteSpecTransOrphanForLedgerJournalTransPosted()
    {
        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(
            CashManagementDataMaintainInstrumentationConstants::DeleteSpecTransForLedgerJournalTransPosted))
        {
            int fixCount;

            while select crosscompany SpecCompany from specTrans
                group by specTrans.SpecCompany
                where specTrans.SpecTableId == tableNum(LedgerJournalTrans)
                    && specTrans.SpecCompany
            {
                changecompany(specTrans.SpecCompany)
                {
                    SysDaQueryObject queryObject = this.buildQuerySpecTransForLedgerJournalTransPosted();
                    CashManagementDataMaintainHelper::statementDelete(queryObject);
                    fixCount += int642int(specTransToDel.RowCount());
                }
            }

            this.addMessage(fixCount, activityContext, "@CashManagement:SpecTransCleanupResultForLedgerJournalTransPosted");
            return fixCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTransOrphanForPurchaseOrderFinalized</Name>
				<Source><![CDATA[
    private int deleteSpecTransOrphanForPurchaseOrderFinalized()
    {
        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(
            CashManagementDataMaintainInstrumentationConstants::DeleteSpecTransForPurchaseOrderFinalized))
        {
            int fixCount;

            while select crosscompany SpecCompany from specTrans
                group by specTrans.SpecCompany
                where specTrans.SpecTableId == tableNum(PurchTable)
                    && specTrans.SpecCompany
            {
                changecompany(specTrans.SpecCompany)
                {
                    SysDaQueryObject queryObject = this.buildQuerySpecTransForPurchaseOrderFinalized();
                    CashManagementDataMaintainHelper::statementDelete(queryObject);
                    fixCount += int642int(specTransToDel.RowCount());
                }
            }

            this.addMessage(fixCount, activityContext, "@CashManagement:SpecTransCleanupResultForPurchaseOrderFinalized");
            return fixCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCustTransMarkedOpenLine</Name>
				<Source><![CDATA[
    private int deleteCustTransMarkedOpenLine()
    {
        using (SysInstrumentationActivityContext activityContext = logger.activityContextWithCustomProperties(
            CashManagementDataMaintainInstrumentationConstants::DeleteCustTransMarkedOpenLine))
        {
            int fixCount;

            CustTransMarkedOpenLine custTransMarkedOpenLine;
            while select crosscompany DataAreaId from custTransMarkedOpenLine
                group by custTransMarkedOpenLine.DataAreaId
            {
                changecompany(custTransMarkedOpenLine.DataAreaId)
                {
                    CustTransMarkedOpenLine custTransMarkedOpenLineToDel;
                    CashManagementDataMaintainHelper::skipDeleteLogic(custTransMarkedOpenLineToDel);
        
                    SysDaQueryObject queryObject = this.buildQueryCustTransMarkedOpenLine(custTransMarkedOpenLineToDel);
                    CashManagementDataMaintainHelper::statementDelete(queryObject);
                    fixCount += int642int(custTransMarkedOpenLineToDel.RowCount());
                }
            }
            
            this.addMessage(fixCount, activityContext, "@CashManagement:SpecTransCleanupResultForCustTransMarkedOpenLine");
            return fixCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySpecTransForRefEqualsZero</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQuerySpecTransForRefEqualsZero()
    {
        SysDaQueryObject specTransQuery = new SysDaQueryObject(specTransToDel);
        specTransQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDel, fieldStr(specTrans, RefRecId)),
                new SysDaValueExpression(0))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDel, fieldStr(specTrans, RefTableId)),
                new SysDaValueExpression(0))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDel, fieldStr(specTrans, RefCompany)),
                new SysDaValueExpression('')))));

        return specTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySpecTransForSpecEqualsZero</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQuerySpecTransForSpecEqualsZero()
    {
        SysDaQueryObject specTransQuery = new SysDaQueryObject(specTransToDel);
        specTransQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDel, fieldStr(SpecTrans, SpecRecId)),
                new SysDaValueExpression(0))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDel, fieldStr(SpecTrans, SpecTableId)),
                new SysDaValueExpression(0))
            .or(new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDel, fieldStr(SpecTrans, SpecCompany)),
                new SysDaValueExpression('')))));

        return specTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySpecTransForLedgerJournalTransPosted</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQuerySpecTransForLedgerJournalTransPosted()
    {
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTable ledgerJournalTable;

        SysDaQueryObject specTransQuery = new SysDaQueryObject(specTransToDel);
        specTransQuery.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(specTransToDel, fieldStr(SpecTrans, SpecTableId)),
                    new SysDaValueExpression(tableNum(LedgerJournalTrans))),
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(specTransToDel, fieldStr(SpecTrans, SpecCompany)),
                    new SysDaValueExpression(curExt()))));

        SysDaQueryObject ledgerJournalTransQuery = new SysDaQueryObject(ledgerJournalTrans);
        ledgerJournalTransQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDel, fieldStr(SpecTrans, SpecRecId)),
                new SysDaFieldExpression(ledgerJournalTrans, fieldStr(LedgerJournalTrans, RecId))));

        specTransQuery.joinClause(SysDaJoinKind::ExistsJoin, ledgerJournalTransQuery);

        SysDaQueryObject ledgerJournalTableQuery = new SysDaQueryObject(ledgerJournalTable);
        ledgerJournalTableQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(ledgerJournalTable, fieldStr(LedgerJournalTable, JournalNum)),
                new SysDaFieldExpression(ledgerJournalTrans, fieldStr(LedgerJournalTrans, JournalNum)))
            .and(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(ledgerJournalTable, fieldStr(LedgerJournalTable, Posted)),
                    new SysDaValueExpression(NoYes::Yes))));

        ledgerJournalTransQuery.joinClause(SysDaJoinKind::ExistsJoin, ledgerJournalTableQuery);

        return specTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuerySpecTransForPurchaseOrderFinalized</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQuerySpecTransForPurchaseOrderFinalized()
    {
        PurchTable purchTable;
        SysDaQueryObject specTransQuery = new SysDaQueryObject(specTransToDel);
        specTransQuery.whereClause(
            new SysDaAndExpression(
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(specTransToDel, fieldStr(SpecTrans, SpecTableId)),
                    new SysDaValueExpression(tableNum(PurchTable))),
                new SysDaEqualsExpression(
                    new SysDaFieldExpression(specTransToDel, fieldStr(SpecTrans, SpecCompany)),
                    new SysDaValueExpression(curExt()))));

        SysDaQueryObject purchTableQuery = new SysDaQueryObject(purchTable);
        purchTableQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDel, fieldStr(SpecTrans, SpecRecId)),
                new SysDaFieldExpression(purchTable, fieldStr(PurchTable, RecId)))
            .and(
                new SysDaEqualsExpression(
                        new SysDaFieldExpression(purchTable, fieldStr(PurchTable, DocumentState)),
                        new SysDaValueExpression(VersioningDocumentState::Finalized))));

        specTransQuery.joinClause(SysDaJoinKind::ExistsJoin, purchTableQuery);

        return specTransQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryCustTransMarkedOpenLine</Name>
				<Source><![CDATA[
    private SysDaQueryObject buildQueryCustTransMarkedOpenLine(CustTransMarkedOpenLine _custTransMarkedOpenLine)
    {
        SysDaQueryObject markedOpenLineQuery = new SysDaQueryObject(_custTransMarkedOpenLine);
        SysDaQueryObject specTransQuery = new SysDaQueryObject(specTransToDel);
        specTransQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(specTransToDel, fieldStr(SpecTrans, RecId)),
                new SysDaFieldExpression(_custTransMarkedOpenLine, fieldStr(CustTransMarkedOpenLine, SpecTrans))));
        markedOpenLineQuery.joinClause(SysDaJoinKind::NotExistsJoin, specTransQuery);

        return markedOpenLineQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addMessage</Name>
				<Source><![CDATA[
    private void addMessage(int _fixRows, SysInstrumentationActivityContext _activityContext, str _message)
    {
        if (_fixRows)
        {
            taskResult.addMessage(
                DataMaintenanceMessageContract::constructForMessage(
                    Exception::Info,
                    strFmt(_message, int642Str(_fixRows))));
        }

        _activityContext.addCustomProperty(CashManagementDataMaintainInstrumentationConstants::CountOfChangesMade, int642Str(_fixRows));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>