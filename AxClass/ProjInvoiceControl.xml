<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjInvoiceControl extends RunBase
{
    ProjTransDate           projTransDateFrom;
    ProjTransDate           projTransDateTo;
    ProjEmplTransSale       projEmplTransSale;

    boolean                 hour;
    boolean                 revenue;
    boolean                 expenses;
    boolean                 item;
    boolean                 onAccount;
    boolean                 sales;
    boolean                 subscription;

    boolean                 fixedPrice;
    boolean                 timeMaterial;
    boolean                 internalCost;
    boolean                 investment;
    boolean                 time;

    boolean                 calledFromFormPart;
    boolean                 projTree;

    Counter                 progressTotal;
    Counter                 progressCounter;
    AmountCur               invoiced;
    AmountCur               toBeInvoiced;
    AmountCur               totalInvoicing;
    AmountCur               noChargeable;
    AmountCur               all;
    AmountCur               invoicedQty;
    AmountCur               toBeInvoicedQty;
    AmountCur               totalInvoicingQty;
    AmountCur               noChargeableQty;
    AmountCur               allQty;
    AmountCur               quotationAmount;
    AmountCur               quotationQty;

    TmpProjInvoiceControl           tmpProjInvoiceControlGeneral;
    TmpProjInvoiceControl           tmpProjInvoiceControlQuotation;

    CurrencyCode            currencyCode;
    CurrencyCode            salesCurrency;
    Counter                 noOfCurrencies;
    ProjTransType           transType;
    boolean                 subscriptionType;

    boolean                 recordsFound;
    boolean                 parmSalesLine;

    Map                     noOfRec;

    ProjId                  projId;
    ProjGroupId             projGroupId;
    ProjCategoryId          projCategoryId;
    ProjCategoryGroupId     categoryGroupId;
    ProjInvoiceProjId       projInvoiceProjId;
    ProjWipId               projWipId;
    ResourceRecId           resource;
    ResourceCategoryRecId   resourceCategory;
    ProjSort                projSorting1;
    ProjSort                projSorting2;
    ProjSort                projSorting3;
    CustAccount             custAccount;
    ItemId                  itemId;
    SMASubscriptionId       subscriptionId;
    boolean                 createEmpty;

    // Cap amount
    AmountCur               m_rCapAmount;
    AmountCur               m_rProposalAmount;
    boolean                 retain;

    // Indirect amounts
    AmountCur               m_rIndirectInvoiced, m_rIndirectChargeable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    public void calculate(
    Query           query,
    Common          table,
    TableId         tableNo,
    Map             _noOfRec = new Map(Types::String, Types::Integer))
    {
        QueryRun                queryRun  = new QueryRun(query);
        ProjTrans               projTrans;
        ProjTrans               projTransSale;
        int                     numberOfRec;
        ProjEmplTrans           projEmplTrans;
        ProjCostTrans           projCostTrans;
        ProjCostTransSale       projCostTransSale;
        ProjItemTrans           projItemTrans;
        ProjItemTransSale       projItemTransSale;
        ProjRevenueTrans        projRevenueTrans;
        ProjRevenueTransSale    projRevenueTransSale;
        ProjOnAccTrans          projOnAccTrans;
        ProjOnAccTransSale      projOnAccTransSale;

        #localMacro.updateTransTurnover
            %1 = table;
            while select %2
                where %2.%3 == %1.%3
            {
                projTransSale = ProjTrans::%4(%1, %2);
                this.updateTransTurnover(projTransSale);
            }
        #endMacro

        noOfRec         = _noOfRec;

        while (queryRun.next())
        {
            recordsFound    = true;
            table           =  queryRun.get(tableNo);

            this.clearAmount();

            switch (tableNo)
            {
                case tableNum(ProjCostTrans)    :
                    projTrans       = ProjTrans::newProjCostTrans(table);
                    break;

                case tableNum(ProjEmplTrans)    :
                    projTrans       = ProjTrans::newProjEmplTrans(table);
                    break;

                case tableNum(ProjItemTrans)    :
                    projTrans       = ProjTrans::newProjItemTrans(table);
                    break;

                case tableNum(ProjRevenueTrans) :
                    projTrans       = ProjTrans::newProjRevenueTrans(table);
                    break;

                case tableNum(ProjOnAccTrans) :
                    projTrans       = ProjTrans::newProjOnAccTrans(table);
                    break;

                case tableNum(SalesLine) :
                    projTrans       = ProjTrans::newSalesLine(table);
                    break;
            }

            if (!isConfigurationkeyEnabled(configurationKeyNum(Project)) || projTrans)
            {
                this.currencyCode(projTrans.currencyIdSales());

                if (this.checkTrans(projTrans))
                {
                    if (noOfRec.exists(projTrans.currencyIdSales()))
                    {
                        numberOfRec = noOfRec.lookup(projTrans.currencyIdSales());
                        noOfRec.insert(projTrans.currencyIdSales(), numberOfRec + 1);
                    }
                    else
                    {
                        noOfRec.insert(projTrans.currencyIdSales(), 1);
                    }

                    this.updateQty(projTrans);
                    switch (tableNo)
                    {
                        case tableNum(ProjEmplTrans):
                            #updateTransTurnover(projEmplTrans, projEmplTransSale, TransId, newProjEmplTransSale)
                            break;

                        case tableNum(ProjCostTrans):
                            #updateTransTurnover(projCostTrans, projCostTransSale, TransId, newProjCostTransSale)
                            break;

                        case tableNum(ProjItemTrans):
                            #updateTransTurnover(projItemTrans, projItemTransSale, ProjTransId, newProjItemTransSale)
                            break;

                        case tableNum(ProjRevenueTrans):
                            #updateTransTurnover(projRevenueTrans, projRevenueTransSale, TransId, newProjRevenueTransSale)
                            break;

                        case tableNum(ProjOnAccTrans):
                            #updateTransTurnover(projOnAccTrans, projOnAccTransSale, TransId, newProjOnAccTransSale)
                            break;

                        case tableNum(SalesLine):
                            this.updateTransTurnover(projTrans);
                            break;
                    }
                    this.updateTmp();
                }

                if (tableNo == tableNum(ProjEmplTrans))
                {
                    this.updateTmp(true);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRetainageLine</Name>
				<Source><![CDATA[
    boolean checkRetainageLine()
    {
        TmpProjInvoiceControl   tmpProjInvoiceControlCheck;

        tmpProjInvoiceControlCheck.setTmpData(tmpProjInvoiceControlGeneral);

        select firstonly tmpProjInvoiceControlCheck
        where tmpProjInvoiceControlCheck.CurrencyCode == this.currencyCode()
           && tmpProjInvoiceControlCheck.psaRetainLine;

        if (tmpProjInvoiceControlCheck)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesLine</Name>
				<Source><![CDATA[
    boolean checkSalesLine()
    {
        TmpProjInvoiceControl   tmpProjInvoiceControlCheck;

        tmpProjInvoiceControlCheck.setTmpData(tmpProjInvoiceControlGeneral);

        select firstonly tmpProjInvoiceControlCheck
        where tmpProjInvoiceControlCheck.CurrencyCode == this.currencyCode()
           && tmpProjInvoiceControlCheck.SalesLine;

        if (tmpProjInvoiceControlCheck)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    boolean checkTrans(ProjTrans    projTrans)
    {
        if (projTrans.transType()   == ProjTransType::Cost)
        {
            if (projTrans.originCost() == ProjOrigin::EstimateAccruedLoss)
            {
                return false;
            }
        }

        if (projTrans.transType()   == ProjTransType::Revenue)
        {
            if (projTrans.originRevenue() == ProjOrigin::EstimateFee)
            {
                return false;
            }
        }

        if (projTrans.tableId()     == tableNum(InventTrans))
        {
            if (!projTrans.qty())
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkType</Name>
				<Source><![CDATA[
    boolean checkType(
    ProjTransType   _transType,
    boolean         _subscription   = NoYes::No)
    {
        TmpProjInvoiceControl   tmpProjInvoiceControlCheck;

        tmpProjInvoiceControlCheck.setTmpData(tmpProjInvoiceControlGeneral);

        select firstonly tmpProjInvoiceControlCheck
        where tmpProjInvoiceControlCheck.CurrencyCode       == this.currencyCode()
           && tmpProjInvoiceControlCheck.Type               == _transType
           && tmpProjInvoiceControlCheck.smaSubscription    == _subscription;

        if (tmpProjInvoiceControlCheck)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearAmount</Name>
				<Source><![CDATA[
    void clearAmount()
    {
        invoiced        = 0;
        toBeInvoiced    = 0;
        noChargeable    = 0;
        totalInvoicing  = 0;
        all             = 0;

        invoicedQty        = 0;
        toBeInvoicedQty    = 0;
        noChargeableQty    = 0;
        totalInvoicingQty  = 0;
        allQty             = 0;

        // Cap exempt
        m_rCapAmount        = 0;
        m_rProposalAmount   = 0;

        // Indirect amounts
        m_rIndirectInvoiced     = 0;
        m_rIndirectChargeable   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAverage</Name>
				<Source><![CDATA[
    private void createAverage()
    {
        TmpProjInvoiceControl   tmpProjInvoiceControlTotal,
                            tmpProjInvoiceControlQty,
                            tmpProjInvoiceControlAmount;
        progressCounter++;

        // Price average
        this.progressUpdate("@SYS86457");

        tmpProjInvoiceControlTotal.setTmpData(tmpProjInvoiceControlGeneral);
        tmpProjInvoiceControlQty.setTmpData(tmpProjInvoiceControlGeneral);
        tmpProjInvoiceControlAmount.setTmpData(tmpProjInvoiceControlGeneral);

        while select tmpProjInvoiceControlTotal
        group by CurrencyCode
        {
            select sum(Invoiced),
               sum(ToBeInvoiced),
               sum(NotChargeable),
               sum(TotalInvoicing),
               //  Indirect amounts
               sum(psaTotalInvoiced),
               sum(psaTotalChargeable),
               sum(All),
               sum(NoOfRec) from tmpProjInvoiceControlQty
            where !tmpProjInvoiceControlQty.Quotation
               && tmpProjInvoiceControlQty.CurrencyCode == tmpProjInvoiceControlTotal.CurrencyCode
               && tmpProjInvoiceControlQty.LineNum      == 1;   // qty

            select sum(Invoiced),
               sum(ToBeInvoiced),
               sum(NotChargeable),
               sum(TotalInvoicing),
               // Indirect amounts
               sum(psaIndirectInvoiced),
               sum(psaIndirectChargeable),
               sum(psaTotalInvoiced),
               sum(psaTotalChargeable),
               sum(All) from tmpProjInvoiceControlAmount
                where !tmpProjInvoiceControlQty.Quotation
                   && tmpProjInvoiceControlAmount.CurrencyCode == tmpProjInvoiceControlTotal.CurrencyCode
                   && tmpProjInvoiceControlAmount.LineNum      == 3;   // Hour

            tmpProjInvoiceControlGeneral.clear();
            tmpProjInvoiceControlGeneral.CurrencyCode   = tmpProjInvoiceControlTotal.CurrencyCode;
            tmpProjInvoiceControlGeneral.Type           = ProjTransType::Hour;

            if (tmpProjInvoiceControlQty.Invoiced)
            {
                tmpProjInvoiceControlGeneral.Invoiced       = tmpProjInvoiceControlAmount.Invoiced         / tmpProjInvoiceControlQty.Invoiced;
            }

            if (tmpProjInvoiceControlQty.ToBeInvoiced)
            {
                tmpProjInvoiceControlGeneral.ToBeInvoiced   = tmpProjInvoiceControlAmount.ToBeInvoiced     / tmpProjInvoiceControlQty.ToBeInvoiced;
            }

            if (tmpProjInvoiceControlQty.NotChargeable)
            {
                tmpProjInvoiceControlGeneral.NotChargeable  = tmpProjInvoiceControlAmount.NotChargeable    / tmpProjInvoiceControlQty.NotChargeable;
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                // Indirect amounts
                if (tmpProjInvoiceControlQty.Invoiced)
                {
                    tmpProjInvoiceControlGeneral.psaIndirectInvoiced = tmpProjInvoiceControlAmount.psaIndirectInvoiced   / tmpProjInvoiceControlQty.Invoiced;
                }
                if (tmpProjInvoiceControlQty.ToBeInvoiced)
                {
                    tmpProjInvoiceControlGeneral.psaIndirectChargeable = tmpProjInvoiceControlAmount.psaIndirectChargeable   / tmpProjInvoiceControlQty.ToBeInvoiced;
                }
                if (tmpProjInvoiceControlQty.psaTotalInvoiced)
                {
                    tmpProjInvoiceControlGeneral.psaTotalInvoiced = tmpProjInvoiceControlAmount.psaTotalInvoiced   / tmpProjInvoiceControlQty.psaTotalInvoiced;
                }
                if (tmpProjInvoiceControlQty.psaTotalChargeable)
                {
                    tmpProjInvoiceControlGeneral.psaTotalChargeable = tmpProjInvoiceControlAmount.psaTotalChargeable   / tmpProjInvoiceControlQty.psaTotalChargeable;
                }
            }

            if (tmpProjInvoiceControlQty.TotalInvoicing)
            {
                tmpProjInvoiceControlGeneral.TotalInvoicing = tmpProjInvoiceControlAmount.TotalInvoicing   / tmpProjInvoiceControlQty.TotalInvoicing;
            }

            if (tmpProjInvoiceControlQty.All)
            {
                tmpProjInvoiceControlGeneral.All            = tmpProjInvoiceControlAmount.All              / tmpProjInvoiceControlQty.All;
            }

            tmpProjInvoiceControlGeneral.LineNum       = this.lineNum(false,false,false,true);
            tmpProjInvoiceControlGeneral.Quotation     = NoYes::No;
            tmpProjInvoiceControlGeneral.NoOfRec        = tmpProjInvoiceControlQty.NoOfRec;

            tmpProjInvoiceControlGeneral.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAverageQuotation</Name>
				<Source><![CDATA[
    private void createAverageQuotation()
    {
        TmpProjInvoiceControl   tmpProjInvoiceControlQty,
                            tmpProjInvoiceControlAmount;
        progressCounter++;

        // Price average
        this.progressUpdate("@SYS86457");

        tmpProjInvoiceControlQty.setTmpData(tmpProjInvoiceControlQuotation);
        tmpProjInvoiceControlAmount.setTmpData(tmpProjInvoiceControlQuotation);

        while select forupdate tmpProjInvoiceControlQuotation
        where tmpProjInvoiceControlQuotation.Quotation
           && tmpProjInvoiceControlQuotation.LineNum    == 2
        {
            select sum(QuotationAmount),
            sum(QuotationInvoiceRemain),
            sum(QuotationRemain) from tmpProjInvoiceControlQty
            where tmpProjInvoiceControlQty.Quotation
               && tmpProjInvoiceControlQty.CurrencyCode == tmpProjInvoiceControlQuotation.CurrencyCode
               && tmpProjInvoiceControlQty.LineNum      == 1;   // qty

            select sum(QuotationAmount),
                sum(QuotationInvoiceRemain),
                sum(QuotationRemain) from tmpProjInvoiceControlAmount
                where tmpProjInvoiceControlAmount.Quotation
                   && tmpProjInvoiceControlAmount.CurrencyCode == tmpProjInvoiceControlQuotation.CurrencyCode
                   && tmpProjInvoiceControlAmount.LineNum      == 3;   // Hour

            if (tmpProjInvoiceControlQty.QuotationAmount)
            {
                tmpProjInvoiceControlQuotation.QuotationAmount       = tmpProjInvoiceControlAmount.QuotationAmount /
                                                                   tmpProjInvoiceControlQty.QuotationAmount;
            }

            if (tmpProjInvoiceControlQty.QuotationInvoiceRemain)
            {
                tmpProjInvoiceControlQuotation.QuotationInvoiceRemain       = tmpProjInvoiceControlAmount.QuotationInvoiceRemain /
                                                                   tmpProjInvoiceControlQty.QuotationInvoiceRemain;
            }

            if (tmpProjInvoiceControlQty.QuotationRemain)
            {
                tmpProjInvoiceControlQuotation.QuotationRemain       = tmpProjInvoiceControlAmount.QuotationRemain /
                                                                   tmpProjInvoiceControlQty.QuotationRemain;
            }

            tmpProjInvoiceControlQuotation.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCost</Name>
				<Source><![CDATA[
    private void createCost(
    boolean     _calculate  = true)
    {
        ProjCostTrans       projCostTrans;

        progressCounter++;
        this.progressUpdate("@SYS4249");

        this.transType(ProjTransType::Cost);
        this.subscriptionType(NoYes::No);

        if (_calculate)
        {
            this.calculate(this.queryCostTrans(),projCostTrans,tableNum(ProjCostTrans));
        }
        else
        {
            this.updateTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmpl</Name>
				<Source><![CDATA[
    private void createEmpl(
    boolean _calculate  = true)
    {
        ProjEmplTrans       projEmplTrans;

        progressCounter++;
        this.progressUpdate("@SYS4705");

        this.transType(ProjTransType::Hour);
        this.subscriptionType(NoYes::No);

        if (_calculate)
        {
            this.calculate(this.queryEmplTrans(),projEmplTrans,tableNum(ProjEmplTrans));
        }
        else
        {
            this.updateTmp();
            this.updateTmp(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmpty</Name>
				<Source><![CDATA[
    void createEmpty()
    {
        TmpProjInvoiceControl   tmpProjInvoiceControlAll;
        boolean                 createDummy    = false;
        progressCounter++;

        this.progressUpdate("@SYS14107");

        tmpProjInvoiceControlAll.setTmpData(tmpProjInvoiceControlGeneral);

        this.clearAmount();

        createEmpty = true;

        select count(RecId) from tmpProjInvoiceControlAll;

        if (!tmpProjInvoiceControlAll.RecId)
        {
            createDummy = true;
        }

        if (createDummy)
        {
            tmpProjInvoiceControlAll.LineNum        = 99;
            tmpProjInvoiceControlAll.Type           = ProjTransType::None;
            tmpProjInvoiceControlAll.CurrencyCode   = Ledger::accountingCurrency(CompanyInfo::current());
            tmpProjInvoiceControlAll.insert();
            recordsFound                            = true;
        }

        while select tmpProjInvoiceControlAll
        group by CurrencyCode
        {
            this.currencyCode(tmpProjInvoiceControlAll.CurrencyCode);

            if (this.parmHour()      && !this.checkType(ProjTransType::Hour) && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
            {
                this.createEmpl(false);
            }

            if (this.parmExpenses()  && !this.checkType(ProjTransType::Cost) && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
            {
                this.createCost(false);
            }

            if (this.parmItem()      && !this.checkType(ProjTransType::Item) && (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic))))
            {
                this.createItem(false);
            }

            if (this.parmRevenue()   && !this.checkType(ProjTransType::Revenue) && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
            {
                this.createRevenue(false);
            }

            if (this.parmSubscription()   && !this.checkType(ProjTransType::Revenue,true) && (isConfigurationkeyEnabled(configurationKeyNum(SMASubscription))))
            {
                this.createSubscription(false);
            }

            if (this.parmOnAccount() && !this.checkType(ProjTransType::OnAccount) && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
            {
                this.createOnAccount(false);
            }

            if (this.parmSalesLine() && !this.checkSalesLine() && (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic))))
            {
                this.createSalesLine(false);
            }
        }

        if (createDummy)
        {
            delete_from tmpProjInvoiceControlAll
            where tmpProjInvoiceControlAll.LineNum  == 99;
        }

        createEmpty = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmptyAll</Name>
				<Source><![CDATA[
    void createEmptyAll()
    {
        Counter         i;
        Counter         noOfTrans   = enumCnt(ProjTransType);
        Line            lineNum;
        ProjTransType   transTypeOrig   = this.transType();
        DictEnum        de = new DictEnum(enumNum(ProjTransType));

        for (i = 0; i < noOfTrans; i++)
        {
            lineNum = 0;
            this.transType(any2Enum(de.index2Value(i)));

            switch (this.transType())
            {
                case ProjTransType::Revenue:
                if (this.parmRevenue())
                    {
                        lineNum = 6;
                    }
                    break;

                case ProjTransType::Hour:
                if (this.parmHour())
                    {
                        lineNum = 3;
                    }
                    break;

                case ProjTransType::Cost:
                if (this.parmExpenses())
                    {
                        lineNum = 4;
                    }
                    break;
                case ProjTransType::Item:
                if (this.parmItem())
                    {
                        lineNum = 5;
                    }
                    break;

                case ProjTransType::OnAccount:
                if (this.parmOnAccount())
                    {
                        lineNum = 8;
                    }
                    break;
            }

            if (lineNum)
            {
                tmpProjInvoiceControlGeneral.Quotation          = false;
                tmpProjInvoiceControlGeneral.CurrencyCode       = this.currencyCode();
                tmpProjInvoiceControlGeneral.Type               = this.transType();
                tmpProjInvoiceControlGeneral.smaSubscription    = this.subscriptionType();
                tmpProjInvoiceControlGeneral.LineNum            = lineNum;
                tmpProjInvoiceControlGeneral.insert();

                tmpProjInvoiceControlQuotation.Quotation          = true;
                tmpProjInvoiceControlQuotation.CurrencyCode       = this.currencyCode();
                tmpProjInvoiceControlQuotation.Type               = this.transType();
                tmpProjInvoiceControlQuotation.smaSubscription    = this.subscriptionType();
                tmpProjInvoiceControlQuotation.LineNum            = lineNum;
                tmpProjInvoiceControlQuotation.insert();
            }
        }

        if (this.parmSubscription())
        {
            tmpProjInvoiceControlGeneral.Quotation          = false;
            tmpProjInvoiceControlGeneral.CurrencyCode       = this.currencyCode();
            tmpProjInvoiceControlGeneral.Type               = this.transType();
            tmpProjInvoiceControlGeneral.smaSubscription    = this.subscriptionType();
            tmpProjInvoiceControlGeneral.LineNum            = 7;
            tmpProjInvoiceControlGeneral.Total              = false;
            tmpProjInvoiceControlGeneral.insert();
        }

        if (this.parmSalesLine())
        {
            tmpProjInvoiceControlGeneral.Quotation          = false;
            tmpProjInvoiceControlGeneral.CurrencyCode       = this.currencyCode();
            tmpProjInvoiceControlGeneral.Type               = this.transType();
            tmpProjInvoiceControlGeneral.smaSubscription    = this.subscriptionType();
            tmpProjInvoiceControlGeneral.LineNum            = 9;
            tmpProjInvoiceControlGeneral.Total              = false;
            tmpProjInvoiceControlGeneral.insert();
        }

        tmpProjInvoiceControlGeneral.Quotation          = false;
        tmpProjInvoiceControlGeneral.CurrencyCode       = this.currencyCode();
        tmpProjInvoiceControlGeneral.Type               = this.transType();
        tmpProjInvoiceControlGeneral.smaSubscription    = this.subscriptionType();
        tmpProjInvoiceControlGeneral.LineNum            = 1;
        tmpProjInvoiceControlGeneral.Total              = false;
        tmpProjInvoiceControlGeneral.insert();

        tmpProjInvoiceControlGeneral.Quotation          = false;
        tmpProjInvoiceControlGeneral.CurrencyCode       = this.currencyCode();
        tmpProjInvoiceControlGeneral.Type               = this.transType();
        tmpProjInvoiceControlGeneral.smaSubscription    = this.subscriptionType();
        tmpProjInvoiceControlGeneral.LineNum            = 10;
        tmpProjInvoiceControlGeneral.Total              = true;
        tmpProjInvoiceControlGeneral.insert();

        tmpProjInvoiceControlGeneral.Quotation          = false;
        tmpProjInvoiceControlGeneral.CurrencyCode       = this.currencyCode();
        tmpProjInvoiceControlGeneral.Type               = this.transType();
        tmpProjInvoiceControlGeneral.smaSubscription    = this.subscriptionType();
        tmpProjInvoiceControlGeneral.LineNum            = 2;
        tmpProjInvoiceControlGeneral.Total              = false;
        tmpProjInvoiceControlGeneral.insert();

        if (this.parmSubscription())
        {
            tmpProjInvoiceControlQuotation.Quotation          = true;
            tmpProjInvoiceControlQuotation.CurrencyCode       = this.currencyCode();
            tmpProjInvoiceControlQuotation.Type               = this.transType();
            tmpProjInvoiceControlQuotation.smaSubscription    = this.subscriptionType();
            tmpProjInvoiceControlQuotation.LineNum            = 7;
            tmpProjInvoiceControlQuotation.Total              = false;
            tmpProjInvoiceControlQuotation.insert();
        }

        if (this.parmSalesLine())
        {
            tmpProjInvoiceControlQuotation.Quotation          = true;
            tmpProjInvoiceControlQuotation.CurrencyCode       = this.currencyCode();
            tmpProjInvoiceControlQuotation.Type               = this.transType();
            tmpProjInvoiceControlQuotation.smaSubscription    = this.subscriptionType();
            tmpProjInvoiceControlQuotation.LineNum            = 9;
            tmpProjInvoiceControlQuotation.Total              = false;
            tmpProjInvoiceControlQuotation.insert();
        }

        tmpProjInvoiceControlQuotation.Quotation          = true;
        tmpProjInvoiceControlQuotation.CurrencyCode       = this.currencyCode();
        tmpProjInvoiceControlQuotation.Type               = this.transType();
        tmpProjInvoiceControlQuotation.smaSubscription    = this.subscriptionType();
        tmpProjInvoiceControlQuotation.LineNum            = 1;
        tmpProjInvoiceControlQuotation.Total              = false;
        tmpProjInvoiceControlQuotation.insert();

        tmpProjInvoiceControlQuotation.Quotation          = true;
        tmpProjInvoiceControlQuotation.CurrencyCode       = this.currencyCode();
        tmpProjInvoiceControlQuotation.Type               = this.transType();
        tmpProjInvoiceControlQuotation.smaSubscription    = this.subscriptionType();
        tmpProjInvoiceControlQuotation.LineNum            = 2;
        tmpProjInvoiceControlQuotation.Total              = false;
        tmpProjInvoiceControlQuotation.insert();

        tmpProjInvoiceControlQuotation.Quotation          = true;
        tmpProjInvoiceControlQuotation.CurrencyCode       = this.currencyCode();
        tmpProjInvoiceControlQuotation.Type               = this.transType();
        tmpProjInvoiceControlQuotation.smaSubscription    = this.subscriptionType();
        tmpProjInvoiceControlQuotation.LineNum            = 10;
        tmpProjInvoiceControlQuotation.Total              = true;
        tmpProjInvoiceControlQuotation.insert();

        this.transType(transTypeOrig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItem</Name>
				<Source><![CDATA[
    private void createItem(
    boolean     _calculate   = true)
    {
        ProjItemTrans         projItemTrans;

        progressCounter++;
        this.progressUpdate("@SYS50258");

        this.transType(ProjTransType::Item);
        this.subscriptionType(NoYes::No);

        if (_calculate)
        {
            this.calculate(this.queryItemTrans(),projItemTrans,tableNum(ProjItemTrans));
        }
        else
        {
            this.updateTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOnAccount</Name>
				<Source><![CDATA[
    private void createOnAccount(
    boolean     _calculate   = true)
    {
        ProjOnAccTrans       projOnAccTrans;

        progressCounter++;
        this.progressUpdate("@SYS4705");

        this.transType(ProjTransType::OnAccount);
        this.subscriptionType(NoYes::No);

        if (_calculate)
        {
            this.calculate(this.queryOnAccTrans(),projOnAccTrans,tableNum(ProjOnAccTrans));
        }
        else
        {
            this.updateTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuotation</Name>
				<Source><![CDATA[
    void createQuotation()
    {
        SalesQuotationLine  salesQuotationLine;
        QueryRun            queryRun;
        int                 numberOfRec;

        progressCounter++;
        queryRun  = new QueryRun(this.queryQuotation());

        while (queryRun.next())
        {
            recordsFound        = true;

            salesQuotationLine  =  queryRun.get(tableNum(SalesQuotationLine));

            if (salesQuotationLine)
            {
                if (noOfRec.exists(salesQuotationLine.CurrencyCode))
                {
                    numberOfRec = noOfRec.lookup(salesQuotationLine.CurrencyCode);
                    noOfRec.insert(salesQuotationLine.CurrencyCode, numberOfRec + 1);
                }
                else
                {
                    noOfRec.insert(salesQuotationLine.CurrencyCode, 1);
                }

                this.currencyCode(salesQuotationLine.CurrencyCode);
                this.transType(ProjInvoiceControl::quotationTransType2ProjTransType(salesQuotationLine.ProjTransType));
                this.subscriptionType(ProjCategory::find(salesQuotationLine.ProjCategoryId).SetupSubscription);

                quotationAmount += salesQuotationLine.LineAmount;

                if (salesQuotationLine.ProjTransType    == QuotationProjTransType::Hour)
                {
                    quotationQty    += salesQuotationLine.SalesQty;
                }

                this.updateTmp(false,true);

                if (salesQuotationLine.ProjTransType    == QuotationProjTransType::Hour)
                {
                    this.updateTmp(true,true);
                }

                quotationAmount = 0;
                quotationQty    = 0;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRetainage</Name>
				<Source><![CDATA[
    private void createRetainage(
    boolean     _calculate   = true)
    {
        ProjRevenueTrans        projRevenueTrans;

        progressCounter++;
        this.progressUpdate("@PSA2704");

        this.transType(ProjTransType::Retainage);
        this.subscriptionType(NoYes::No);

        if (_calculate)
        {
            this.calculate(this.queryRetainTrans(), projRevenueTrans,tableNum(ProjRevenueTrans));
        }
        else
        {
            this.updateTmpForRetainage();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRevenue</Name>
				<Source><![CDATA[
    private void createRevenue(
    boolean     _calculate   = true)

    {
        ProjRevenueTrans    projRevenueTrans;

        progressCounter++;
        this.progressUpdate("@SYS3583");

        this.transType(ProjTransType::Revenue);
        this.subscriptionType(NoYes::No);

        if (_calculate)
        {
            this.calculate(this.queryRevenueTrans(),projRevenueTrans,tableNum(ProjRevenueTrans));
        }
        else
        {
            this.updateTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSalesLine</Name>
				<Source><![CDATA[
    private void createSalesLine(
    boolean     _calculate   = true)
    {
        SalesLine           salesLine;
        ProjItemTrans       projItemTrans;

        progressCounter++;
        this.progressUpdate("@SYS50258");

        this.salesLine(true);

        this.transType(ProjTransType::None);
        this.subscriptionType(NoYes::No);

        if (_calculate)
        {
            this.calculate(this.querySalesLine(),salesLine,tableNum(SalesLine));
            this.calculate(this.queryItemTransSalesLine(),projItemTrans,tableNum(ProjItemTrans),noOfRec);
        }
        else
        {
            this.updateTmp();
        }

        this.salesLine(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubscription</Name>
				<Source><![CDATA[
    private void createSubscription(
    boolean     _calculate   = true)

    {
        ProjRevenueTrans    projRevenueTrans;

        progressCounter++;
        this.progressUpdate("@SYS3583");

        this.transType(ProjTransType::Revenue);
        this.subscriptionType(NoYes::Yes);

        if (_calculate)
        {
            this.calculate(this.querySubscription(),projRevenueTrans,tableNum(ProjRevenueTrans));
        }
        else
        {
            this.updateTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotal</Name>
				<Source><![CDATA[
    private void createTotal(
    boolean _quotation   = false)
    {
        TmpProjInvoiceControl   tmpProjInvoiceControlTotal, tmpProjInvoiceControlSum;

        progressCounter++;
        this.progressUpdate("@SYS14107");

        tmpProjInvoiceControlTotal.setTmpData(tmpProjInvoiceControlGeneral);
        tmpProjInvoiceControlSum.setTmpData(tmpProjInvoiceControlGeneral);

        while select tmpProjInvoiceControlTotal
        group by CurrencyCode
        {
            select sum(Invoiced),
               sum(ToBeInvoiced),
               sum(NotChargeable),
               sum(TotalInvoicing),
               sum(All),
               sum(psaCapExempt),
               sum(psaProposalAmount),

               sum(psaIndirectInvoiced),
               sum(psaIndirectChargeable),
               sum(psaTotalInvoiced),
               sum(psaTotalChargeable),
               sum(NoOfRec) from tmpProjInvoiceControlSum
                where tmpProjInvoiceControlSum.Quotation    == _quotation
                   && tmpProjInvoiceControlSum.CurrencyCode == tmpProjInvoiceControlTotal.CurrencyCode
                   && tmpProjInvoiceControlSum.LineNum      > 2;   // qty line

            tmpProjInvoiceControlGeneral.clear();
            tmpProjInvoiceControlGeneral.CurrencyCode   = tmpProjInvoiceControlTotal.CurrencyCode;
            tmpProjInvoiceControlGeneral.Type           = ProjTransType::None;
            tmpProjInvoiceControlGeneral.Invoiced       = tmpProjInvoiceControlSum.Invoiced;
            tmpProjInvoiceControlGeneral.ToBeInvoiced   = tmpProjInvoiceControlSum.ToBeInvoiced;
            tmpProjInvoiceControlGeneral.NotChargeable  = tmpProjInvoiceControlSum.NotChargeable;
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                tmpProjInvoiceControlGeneral.psaIndirectInvoiced    = tmpProjInvoiceControlSum.psaIndirectInvoiced;
                tmpProjInvoiceControlGeneral.psaIndirectChargeable  = tmpProjInvoiceControlSum.psaIndirectChargeable;
                tmpProjInvoiceControlGeneral.psaTotalInvoiced       = tmpProjInvoiceControlSum.psaTotalInvoiced;
                tmpProjInvoiceControlGeneral.psaTotalChargeable     = tmpProjInvoiceControlSum.psaTotalChargeable;
            }

            tmpProjInvoiceControlGeneral.TotalInvoicing = tmpProjInvoiceControlSum.TotalInvoicing;
            tmpProjInvoiceControlGeneral.All            = tmpProjInvoiceControlSum.All;
            tmpProjInvoiceControlGeneral.LineNum        = this.lineNum(true);
            tmpProjInvoiceControlGeneral.Quotation      = _quotation;

            tmpProjInvoiceControlGeneral.Total          = true;
            tmpProjInvoiceControlGeneral.NoOfRec        = tmpProjInvoiceControlSum.NoOfRec;

            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                tmpProjInvoiceControlGeneral.psaCapExempt   = tmpProjInvoiceControlSum.psaCapExempt;
                tmpProjInvoiceControlGeneral.psaProposalAmount = tmpProjInvoiceControlSum.psaProposalAmount;
            }
            tmpProjInvoiceControlGeneral.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTotalQuotation</Name>
				<Source><![CDATA[
    private void createTotalQuotation()
    {
        TmpProjInvoiceControl   tmpProjInvoiceControlSum;

        progressCounter++;
        this.progressUpdate("@SYS14107");

        tmpProjInvoiceControlSum.setTmpData(tmpProjInvoiceControlQuotation);

        while select forupdate tmpProjInvoiceControlQuotation
        where tmpProjInvoiceControlQuotation.Quotation
           && tmpProjInvoiceControlQuotation.Total
        {
            select sum(QuotationAmount),
               sum(Invoiced),
               sum(QuotationInvoiceRemain),
               sum(ToBeInvoiced) from tmpProjInvoiceControlSum
                where tmpProjInvoiceControlSum.Quotation
                   && tmpProjInvoiceControlSum.CurrencyCode == tmpProjInvoiceControlQuotation.CurrencyCode
                   && tmpProjInvoiceControlSum.LineNum      > 2; // qty line

            tmpProjInvoiceControlQuotation.QuotationAmount        = tmpProjInvoiceControlSum.QuotationAmount;

            tmpProjInvoiceControlQuotation.QuotationInvoiceRemain = tmpProjInvoiceControlQuotation.QuotationAmount -
                                                                tmpProjInvoiceControlQuotation.Invoiced;
            tmpProjInvoiceControlQuotation.QuotationRemain        = tmpProjInvoiceControlQuotation.QuotationInvoiceRemain -
                                                                tmpProjInvoiceControlQuotation.ToBeInvoiced;

            tmpProjInvoiceControlQuotation.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode(CurrencyCode _currencyCode  = currencyCode)
    {
        currencyCode    = _currencyCode;

        return     currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromForm</Name>
				<Source><![CDATA[
    public void initFromForm(container _parms)
    {
        #localmacro.ParmList
        expenses,
        hour,
        revenue,
        subscription,
        item,
        onAccount,
        sales,
        projTransDateFrom,
        projTransDateTo,
        projId,
        projCategoryId,
        projInvoiceProjId,
        projWIPId,
        resource,
        resourceCategory,
        fixedPrice,
        timeMaterial,
        internalCost,
        investment,
        time,
        salesCurrency,
        projGroupId,
        projSorting1,
        projSorting2,
        projSorting3,
        custAccount,
        itemId,
        subscriptionId,
        categoryGroupId,
        retain,
        projTree
    #endmacro

        [#parmList] = _parms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProgress</Name>
				<Source><![CDATA[
    void initProgress()
    {
        progress = RunbaseProgress::construct(1,null);
        progress.setCaption("@SYS58374");
        progress.setTotal(any2int(this.parmProgresstotal()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineNum</Name>
				<Source><![CDATA[
    Line lineNum(boolean _total      = false,
                boolean _salesLine  = false,
                boolean _qty        = false,
                boolean _average    = false)
    {
        if (_total)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                return 11;
            }
            else
            {
                return 10;
            }
        }

        if (_salesLine)
        {
            return 9;
        }

        if (_qty)
        {
            return 1;
        }

        if (_average)
        {
            return 2;
        }

        switch (this.transType())
        {
            case ProjTransType::Revenue:
            if (this.subscriptionType())
                {
                    return 7;
                }
                else
                {
                    return 6;
                }
            case ProjTransType::Hour:
                return 3;

            case ProjTransType::Cost:
                return 4;

            case ProjTransType::Item:
                return 5;

            case ProjTransType::OnAccount:
                return 8;
            case ProjTransType::Retainage:
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    return 10;
                }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        recordsFound    = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalledFromFormPart</Name>
				<Source><![CDATA[
    public boolean parmCalledFromFormPart(boolean _calledFromFormPart = calledFromFormPart)
    {
        calledFromFormPart = _calledFromFormPart;

        return calledFromFormPart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryGroupId</Name>
				<Source><![CDATA[
    public ProjCategoryGroupId parmCategoryGroupId(ProjCategoryGroupId _projCategoryGrouplId  = categoryGroupId)
    {
        categoryGroupId    = _projCategoryGrouplId;

        return categoryGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustomerAccount</Name>
				<Source><![CDATA[
    public CustAccount parmCustomerAccount(CustAccount _custAccount  = custAccount)
    {
        custAccount    = _custAccount;

        return custAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExpenses</Name>
				<Source><![CDATA[
    public boolean parmExpenses(boolean _expenses  = expenses)
    {
        expenses    = _expenses;

        return expenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFixedPrice</Name>
				<Source><![CDATA[
    public boolean parmFixedPrice(boolean _fixedPrice = fixedPrice)
    {
        fixedPrice = _fixedPrice;

        return fixedPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHour</Name>
				<Source><![CDATA[
    boolean parmHour(boolean _hour  = hour)
    {
        hour    = _hour;

        return hour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInternalCost</Name>
				<Source><![CDATA[
    public boolean parmInternalCost(boolean _internalCost = internalCost)
    {
        internalCost = _internalCost;

        return internalCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvestment</Name>
				<Source><![CDATA[
    public boolean parmInvestment(boolean _investment = investment)
    {
        investment = _investment;

        return investment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItem</Name>
				<Source><![CDATA[
    public boolean parmItem(boolean _item  = item)
    {
        item    = _item;

        return item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId(ItemId _itemId  = itemId)
    {
        itemId    = _itemId;

        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnAccount</Name>
				<Source><![CDATA[
    public boolean parmOnAccount(boolean _onAccount  = onAccount)
    {
        onAccount    = _onAccount;

        return onAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProgresstotal</Name>
				<Source><![CDATA[
    public Total parmProgresstotal(Total _progresstotal = progressTotal)
    {
        progressTotal  = any2int(_progresstotal);

        return progressTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjCategoryId(ProjCategoryId _projCategoryId  = projCategoryId)
    {
        projCategoryId    = _projCategoryId;

        return projCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjGroupId</Name>
				<Source><![CDATA[
    public ProjGroupId parmProjGroupId(ProjGroupId _projGroupId  = projGroupId)
    {
        projGroupId    = _projGroupId;

        return projGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId  = projId)
    {
        projId    = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTree</Name>
				<Source><![CDATA[
    public boolean parmProjTree(boolean _projTree = projTree)
    {
        projTree    = _projTree;

        return projTree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjInvoiceProjId</Name>
				<Source><![CDATA[
    public ProjInvoiceProjId parmProjInvoiceProjId(ProjInvoiceProjId _projInvoiceProjId  = projInvoiceProjId)
    {
        projInvoiceProjId    = _projInvoiceProjId;

        return projInvoiceProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjSorting1</Name>
				<Source><![CDATA[
    public ProjSort parmProjSorting1(ProjSort _projSorting1  = projSorting1)
    {
        projSorting1 = _projSorting1;

        return projSorting1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjSorting2</Name>
				<Source><![CDATA[
    public ProjSort parmProjSorting2(ProjSort _projSorting2  = projSorting2)
    {
        projSorting2 = _projSorting2;

        return projSorting2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjSorting3</Name>
				<Source><![CDATA[
    public ProjSort parmProjSorting3(ProjSort _projSorting3  = projSorting3)
    {
        projSorting3 = _projSorting3;

        return projSorting3;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransDateFrom</Name>
				<Source><![CDATA[
    public ProjTransDate parmProjTransDateFrom(ProjTransDate _projTransDateFrom  = projTransDateFrom)
    {
        projTransDateFrom = _projTransDateFrom;

        return projTransDateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTransDateTo</Name>
				<Source><![CDATA[
    public ProjTransDate parmProjTransDateTo(ProjTransDate _projTransDateTo = projTransDateTo)
    {
        projTransDateTo  = _projTransDateTo;

        return projTransDateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjWIPId</Name>
				<Source><![CDATA[
    public ProjWipId parmProjWIPId(ProjWipId _projWipId  = projWipId)
    {
        projWipId    = _projWipId;

        return projWipId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>resource</c> variable.
    /// </summary>
    /// <param name="_resourceRecId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>resource</c> variable.
    /// </returns>
    ResourceRecId parmResource(ResourceRecId _resourceRecId  = resource)
    {
        resource    = _resourceRecId;

        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmResourceCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the value of the <c>resourceCategory</c> variable.
    /// </summary>
    /// <param name="_resourceCategoryRecId">
    ///    The value to set; optional.
    /// </param>
    /// <returns>
    ///    The value of the <c>resourceCategory</c> variable.
    /// </returns>
    ResourceCategoryRecId parmResourceCategory(ResourceCategoryRecId _resourceCategoryRecId  = resourceCategory)
    {
        resourceCategory    = _resourceCategoryRecId;

        return resourceCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetain</Name>
				<Source><![CDATA[
    public boolean parmRetain(
    boolean _retain  = retain)
    {
        retain    = _retain;
        return retain;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRevenue</Name>
				<Source><![CDATA[
    public boolean parmRevenue(boolean _revenue  = revenue)
    {
        revenue    = _revenue;

        return revenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode parmSalesCurrency(CurrencyCode _salesCurrency  = salesCurrency)
    {
        salesCurrency    = _salesCurrency;

        return salesCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesLine</Name>
				<Source><![CDATA[
    public boolean parmSalesLine(boolean _sales  = sales)
    {
        sales    = _sales;

        return sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubscription</Name>
				<Source><![CDATA[
    public boolean parmSubscription(boolean _subscription  = subscription)
    {
        subscription    = _subscription;

        return subscription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubscriptionId</Name>
				<Source><![CDATA[
    public SMASubscriptionId parmSubscriptionId(SMASubscriptionId _subscriptionId = subscriptionId)
    {
        subscriptionId  = _subscriptionId;

        return subscriptionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTime</Name>
				<Source><![CDATA[
    public boolean parmTime(boolean _time = time)
    {
        time = _time;

        return time;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeMaterial</Name>
				<Source><![CDATA[
    public boolean parmTimeMaterial(boolean _timeMaterial = timeMaterial)
    {
        timeMaterial = _timeMaterial;

        return timeMaterial;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressUpdate</Name>
				<Source><![CDATA[
    private void progressUpdate(str text)
    {
        // Don't show progress when called from a form part
        if (!calledFromFormPart)
        {
            progressCounter++;
            progress.setCount(progressCounter);
            progress.setText(text);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCategoryGroupTable</Name>
				<Source><![CDATA[
    public QueryBuildDataSource queryCategoryGroupTable(
    QueryBuildDataSource  _buildDataSource,
    FieldId               _categoryFieldId)
    {
        QueryBuildDataSource queryCategoryGroup;

        queryCategoryGroup = _buildDataSource.addDataSource(tableNum(ProjCategory));
        queryCategoryGroup.addLink(_categoryFieldId, fieldNum(ProjCategory, CategoryId));
        queryCategoryGroup.fetchMode(0);
        queryCategoryGroup.joinMode(JoinMode::ExistsJoin);
        queryCategoryGroup.addRange(fieldNum(ProjCategory, CategoryGroupId)).value(this.parmCategoryGroupId());

        return _buildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryCostTrans</Name>
				<Source><![CDATA[
    private Query queryCostTrans()
    {
        QueryBuildDataSource projCostTrans;
        Query                queryCostTrans = new Query();
        RecId                legalEntity;

        projCostTrans  = queryCostTrans.addDataSource(tableNum(ProjCostTrans));

        if (this.parmProjId())
        {
            projCostTrans.addRange(fieldNum(ProjCostTrans,ProjId)).value(queryValue(this.parmProjId()));
        }

        if (this.parmProjCategoryId())
        {
            projCostTrans.addRange(fieldNum(ProjCostTrans,CategoryId)).value(this.parmProjCategoryId());
        }

        if (this.parmResource())
        {
            legalEntity = CompanyInfo::findDataArea(curext()).RecId;
            projCostTrans.addRange(fieldNum(ProjCostTrans, Resource)).value(queryValue(this.parmResource()));
        }

        if (this.parmResourceCategory())
        {
            projCostTrans.addRange(fieldNum(ProjCostTrans, ResourceCategory)).value(queryValue(this.parmResourceCategory()));
        }

        if (this.parmProjTree())
        {
            projCostTrans.addRange(fieldNum(ProjCostTrans, ProjId)).value(this.parmProjId()+'*');
        }

        projCostTrans.addRange(fieldNum(ProjCostTrans,TransDate)).value(this.queryFromDate()+'..'+this.queryToDate());

        projCostTrans = this.queryProjTable(projCostTrans, fieldNum(ProjCostTrans, ProjId));

        if (this.parmCategoryGroupId())
        {
            projCostTrans = this.queryCategoryGroupTable(projCostTrans, fieldNum(ProjCostTrans, CategoryId));
        }

        return queryCostTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryEmplTrans</Name>
				<Source><![CDATA[
    private Query queryEmplTrans()
    {
        QueryBuildDataSource projEmplTrans;
        Query                queryEmplTrans = new Query();

        projEmplTrans  = queryEmplTrans.addDataSource(tableNum(ProjEmplTrans));

        if (this.parmProjId())
        {
            projEmplTrans.addRange(fieldNum(ProjEmplTrans,ProjId)).value(queryValue(this.parmProjId()));
        }

        if (this.parmProjCategoryId())
        {
            projEmplTrans.addRange(fieldNum(ProjEmplTrans,CategoryId)).value(this.parmProjCategoryId());
        }

        if (this.parmResource())
        {
            projEmplTrans.addRange(fieldNum(ProjEmplTrans, Resource)).value(queryValue(this.parmResource()));
        }

        if (this.parmResourceCategory())
        {
            projEmplTrans.addRange(fieldNum(ProjEmplTrans, ResourceCategory)).value(queryValue(this.parmResourceCategory()));
        }

        if (this.parmProjTree())
        {
            projEmplTrans.addRange(fieldNum(ProjEmplTrans, ProjId)).value(this.parmProjId()+'*');
        }

        projEmplTrans.addRange(fieldNum(ProjEmplTrans,TransDate)).value(this.queryFromDate()+'..'+this.queryToDate());

        projEmplTrans = this.queryProjTable(projEmplTrans, fieldNum(ProjEmplTrans, ProjId));

        if (this.parmCategoryGroupId())
        {
            projEmplTrans = this.queryCategoryGroupTable(projEmplTrans, fieldNum(ProjEmplTrans, CategoryId));
        }

        return queryEmplTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryFromDate</Name>
				<Source><![CDATA[
    public str queryFromDate()
    {
        return queryValue(this.parmProjTransDateFrom() ? this.parmProjTransDateFrom() : dateNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryItemTrans</Name>
				<Source><![CDATA[
    private Query queryItemTrans()
    {
        QueryBuildDataSource projItemTrans;
        Query                queryItemTrans = new Query();

        projItemTrans  = queryItemTrans.addDataSource(tableNum(ProjItemTrans));

        if (this.parmProjId())
        {
            projItemTrans.addRange(fieldNum(ProjItemTrans,ProjId)).value(queryValue(this.parmProjId()));
        }

        if (this.parmProjCategoryId())
        {
            projItemTrans.addRange(fieldNum(ProjItemTrans,CategoryId)).value(this.parmProjCategoryId());
        }

        if (this.parmItemId())
        {
            projItemTrans.addRange(fieldNum(ProjItemTrans,ItemId)).value(this.parmItemId());
        }

        if (this.parmProjTree())
        {
            projItemTrans.addRange(fieldNum(ProjItemTrans, ProjId)).value(this.parmProjId()+'*');
        }

        projItemTrans.addRange(fieldNum(ProjItemTrans,TransDate)).value(this.queryFromDate()+'..'+this.queryToDate());
        projItemTrans.addRange(fieldNum(ProjItemTrans,TransactionOrigin)).value(strFmt('!%1',ProjOrigin::SalesOrder));

        projItemTrans = this.queryProjTable(projItemTrans, fieldNum(ProjItemTrans, ProjId));

        if (this.parmCategoryGroupId())
        {
            projItemTrans = this.queryCategoryGroupTable(projItemTrans, fieldNum(ProjItemTrans, CategoryId));
        }

        return queryItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryItemTransSalesLine</Name>
				<Source><![CDATA[
    private Query queryItemTransSalesLine()
    {
        QueryBuildDataSource projItemTrans;
        Query                queryItemTrans = new Query();

        projItemTrans  = queryItemTrans.addDataSource(tableNum(ProjItemTrans));

        if (this.parmProjId())
        {
            projItemTrans.addRange(fieldNum(ProjItemTrans,ProjId)).value(queryValue(this.parmProjId()));
        }

        if (this.parmProjCategoryId())
        {
            projItemTrans.addRange(fieldNum(ProjItemTrans,CategoryId)).value(this.parmProjCategoryId());
        }

        if (this.parmItemId())
        {
            projItemTrans.addRange(fieldNum(ProjItemTrans,ItemId)).value(this.parmItemId());
        }

        if (this.parmProjTree())
        {
            projItemTrans.addRange(fieldNum(ProjItemTrans, ProjId)).value(this.parmProjId()+'*');
        }

        projItemTrans.addRange(fieldNum(ProjItemTrans,TransDate)).value(this.queryFromDate()+'..'+this.queryToDate());
        projItemTrans.addRange(fieldNum(ProjItemTrans,TransactionOrigin)).value(queryValue(ProjOrigin::SalesOrder));

        projItemTrans = this.queryProjTable(projItemTrans, fieldNum(ProjItemTrans, ProjId));

        if (this.parmCategoryGroupId())
        {
            projItemTrans = this.queryCategoryGroupTable(projItemTrans, fieldNum(ProjItemTrans, CategoryId));
        }

        return queryItemTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryOnAccTrans</Name>
				<Source><![CDATA[
    private Query queryOnAccTrans()
    {
        QueryBuildDataSource projOnAccTrans;
        Query                queryOnAccTrans = new Query();

        projOnAccTrans  = queryOnAccTrans.addDataSource(tableNum(ProjOnAccTrans));

        if (this.parmProjId())
        {
            projOnAccTrans.addRange(fieldNum(ProjOnAccTrans,ProjID)).value(queryValue(this.parmProjId()));
        }

        if (this.parmProjTree())
        {
            projOnAccTrans.addRange(fieldNum(ProjOnAccTrans, ProjId)).value(this.parmProjId()+'*');
        }
        projOnAccTrans.addRange(fieldNum(ProjOnAccTrans,TransDate)).value(this.queryFromDate()+'..'+this.queryToDate());

        projOnAccTrans   = this.queryProjTable(projOnAccTrans, fieldNum(ProjOnAccTrans,ProjID));

        return queryOnAccTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryProjTable</Name>
				<Source><![CDATA[
    public QueryBuildDataSource queryProjTable(QueryBuildDataSource buildDataSource, FieldId   _projFieldId)
    {
        QueryBuildDataSource queryProjTable;

        queryProjTable  = buildDataSource.addDataSource(tableNum(ProjTable));
        queryProjTable.addLink(_projFieldId, fieldNum(ProjTable, ProjId));
        queryProjTable.fetchMode(0);
        queryProjTable.joinMode(JoinMode::ExistsJoin);

        if (this.parmProjInvoiceProjId())
        {
            queryProjTable.addRange(fieldNum(ProjTable,ProjInvoiceProjId)).value(queryValue(this.parmProjInvoiceProjId()));
        }

        if (this.parmProjWIPId())
        {
            queryProjTable.addRange(fieldNum(ProjTable,wipProject)).value(queryValue(this.parmProjWIPId()));
        }

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            queryProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::None));
        }
        else
        {
            if (this.parmTimeMaterial())
            {
                queryProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (this.parmFixedPrice())
            {
                queryProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (this.parmTime())
            {
                queryProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Time));
            }

            if (this.parmInvestment())
            {
                queryProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Investment));
            }

            if (this.parmInternalCost())
            {
                queryProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Cost));
                queryProjTable.addRange(fieldNum(ProjTable,Type)).value(queryValue(ProjType::Internal));
            }

            // If no project type is choosen no records is shown
            if (!this.parmTimeMaterial() && !this.parmInternalCost() && !this.parmInvestment() && !this.parmTime() && !this.parmFixedPrice())
            {
                queryProjTable.addRange(fieldNum(ProjTable,ProjId)).value(queryValue(SysQuery::valueEmptyString()));
            }
        }

        if (this.parmProjSorting1())
        {
            queryProjTable.addRange(fieldNum(ProjTable, SortingId), 1).value(this.parmProjSorting1());
        }

        if (this.parmProjSorting2())
        {
            queryProjTable.addRange(fieldNum(ProjTable, SortingId), 2).value(this.parmProjSorting2());
        }

        if (this.parmProjSorting3())
        {
            queryProjTable.addRange(fieldNum(ProjTable, SortingId), 3).value(this.parmProjSorting3());
        }

        if (this.parmProjGroupId())
        {
            queryProjTable.addRange(fieldNum(ProjTable, ProjGroupId)).value(this.parmProjGroupId());
        }

        if (this.parmCustomerAccount())
        {
            queryProjTable.addRange(fieldNum(ProjTable, CustAccount)).value(this.parmCustomerAccount());
        }

        return buildDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryQuotation</Name>
				<Source><![CDATA[
    protected Query queryQuotation()
    {
        QueryBuildDataSource salesQuotationLine;
        QueryBuildDataSource salesQuotationTable;

        Query                queryQuotation = new Query();

        salesQuotationLine  = queryQuotation.addDataSource(tableNum(SalesQuotationLine));

        if (this.parmProjCategoryId())
        {
            salesQuotationLine.addRange(fieldNum(SalesQuotationLine,ProjCategoryId)).value(this.parmProjCategoryId());
        }

        if (this.parmResource())
        {
            salesQuotationLine.addRange(fieldNum(SalesQuotationLine, ProjectResource)).value(queryValue(this.parmResource()));
        }

        salesQuotationLine.addRange(fieldNum(SalesQuotationLine,TransDate)).value(this.queryFromDate()+'..'+this.queryToDate());

        if (this.parmHour() && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
        {
            salesQuotationLine.addRange(fieldNum(SalesQuotationLine,ProjTransType)).value(queryValue(QuotationProjTransType::Hour));
        }

        if (this.parmExpenses() && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
        {
            salesQuotationLine.addRange(fieldNum(SalesQuotationLine,ProjTransType)).value(queryValue(QuotationProjTransType::Expense));
        }

        if (this.parmItem() && (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic))))
        {
            salesQuotationLine.addRange(fieldNum(SalesQuotationLine,ProjTransType)).value(queryValue(QuotationProjTransType::Item));
        }

        if (this.parmRevenue() && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
        {
            salesQuotationLine.addRange(fieldNum(SalesQuotationLine,ProjTransType)).value(queryValue(QuotationProjTransType::Fee));
        }

        if (this.parmCategoryGroupId())
        {
            salesQuotationLine = this.queryCategoryGroupTable(salesQuotationLine, fieldNum(SalesQuotationLine, ProjCategoryId));
        }

        salesQuotationTable = salesQuotationLine.addDataSource(tableNum(SalesQuotationTable));
        salesQuotationTable.addLink(fieldNum(SalesQuotationLine, QuotationId), fieldNum(SalesQuotationTable, QuotationId));
        salesQuotationTable.fetchMode(0);
        salesQuotationTable.joinMode(JoinMode::ExistsJoin);

        if (this.parmProjId())
        {
            salesQuotationTable.addRange(fieldNum(SalesQuotationTable,ProjIdRef)).value(queryValue(this.parmProjId()));
        }

        salesQuotationTable = this.queryProjTable(salesQuotationTable, fieldNum(SalesQuotationTable,ProjIdRef));

        return queryQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRetainTrans</Name>
				<Source><![CDATA[
    private Query queryRetainTrans()
    {
        QueryBuildDataSource projRevenueTrans;
        Query                queryRevenueTrans = new Query();
        QueryBuildRange      qbr;

        projRevenueTrans  = queryRevenueTrans.addDataSource(tableNum(ProjRevenueTrans));

        projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,TransactionOrigin)).value(queryValue(strFmt('!%1',ProjOrigin::Subscription)));

        if (this.parmProjId())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,ProjId)).value(queryValue(this.parmProjId()));
        }

        if (this.parmProjCategoryId())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,CategoryId)).value(this.parmProjCategoryId());
        }

        if (this.parmResource())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, Resource)).value(queryValue(this.parmResource()));
        }

        if (this.parmResourceCategory())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, ResourceCategory)).value(queryValue(this.parmResourceCategory()));
        }

        if (this.parmProjTree())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, ProjId)).value(this.parmProjId()+'*');
        }

        projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,TransDate)).value(this.queryFromDate()+'..'+this.queryToDate());

        projRevenueTrans    = this.queryProjTable(projRevenueTrans, fieldNum(ProjRevenueTrans,ProjId));

        if (this.parmCategoryGroupId())
        {
            projRevenueTrans = this.queryCategoryGroupTable(projRevenueTrans, fieldNum(ProjRevenueTrans,CategoryId));
        }

        qbr = projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, IsRetained));
        qbr = projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, IsReleased));
        qbr.value(strFmt('(isRetained == %1) || (isReleased == %2)', 1, 1));

        return queryRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRevenueTrans</Name>
				<Source><![CDATA[
    private Query queryRevenueTrans()
    {
        QueryBuildDataSource projRevenueTrans;
        Query                queryRevenueTrans = new Query();

        projRevenueTrans  = queryRevenueTrans.addDataSource(tableNum(ProjRevenueTrans));

        projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,TransactionOrigin)).value(queryValue(strFmt('!%1',ProjOrigin::Subscription)));

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, IsRetained)).value(queryValue(NoYes::No));
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, IsReleased)).value(queryValue(NoYes::No));
        }

        if (this.parmProjId())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,ProjId)).value(queryValue(this.parmProjId()));
        }

        if (this.parmProjCategoryId())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,CategoryId)).value(this.parmProjCategoryId());
        }

        if (this.parmResource())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, Resource)).value(queryValue(this.parmResource()));
        }

        if (this.parmResourceCategory())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, ResourceCategory)).value(queryValue(this.parmResourceCategory()));
        }

        if (this.parmProjTree())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, ProjId)).value(this.parmProjId()+'*');
        }

        projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,TransDate)).value(this.queryFromDate()+'..'+this.queryToDate());

        projRevenueTrans    = this.queryProjTable(projRevenueTrans, fieldNum(ProjRevenueTrans,ProjId));

        if (this.parmCategoryGroupId())
        {
            projRevenueTrans = this.queryCategoryGroupTable(projRevenueTrans, fieldNum(ProjRevenueTrans,CategoryId));
        }

        return queryRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySalesLine</Name>
				<Source><![CDATA[
    private Query querySalesLine()
    {
        QueryBuildDataSource salesLine;
        Query                querySalesLine = new Query();

        salesLine  = querySalesLine.addDataSource(tableNum(SalesLine));

        if (this.parmProjId())
        {
            salesLine.addRange(fieldNum(SalesLine,ProjId)).value(queryValue(this.parmProjId()));
        }

        if (this.parmProjCategoryId())
        {
            salesLine.addRange(fieldNum(SalesLine,ProjCategoryId)).value(this.parmProjCategoryId());
        }

        if (this.parmProjTree())
        {
            salesLine.addRange(fieldNum(SalesLine, ProjId)).value(this.parmProjId()+'*');
        }

        salesLine.addRange(fieldNum(SalesLine,ConfirmedDlv)).value(this.queryFromDate()+'..'+this.queryToDate());
        salesLine.addRange(fieldNum(SalesLine,SalesType)).value(SalesQueryRangeUtil::salesTypeCustomerDemand());

        salesLine  = this.queryProjTable(salesLine, fieldNum(SalesLine, ProjId));

        if (this.parmCategoryGroupId())
        {
            salesLine = this.queryCategoryGroupTable(salesLine, fieldNum(SalesLine, ProjCategoryId));
        }

        return querySalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>querySubscription</Name>
				<Source><![CDATA[
    private Query querySubscription()
    {
        QueryBuildDataSource projRevenueTrans;
        Query                queryRevenueTrans = new Query();

        projRevenueTrans  = queryRevenueTrans.addDataSource(tableNum(ProjRevenueTrans));

        projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,TransactionOrigin)).value(queryValue(ProjOrigin::Subscription));

        if (this.parmProjId())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,ProjId)).value(queryValue(this.parmProjId()));
        }

        if (this.parmProjCategoryId())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,CategoryId)).value(this.parmProjCategoryId());
        }

        if (this.parmResource())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, Resource)).value(queryValue(this.parmResource()));
        }

        if (this.parmResourceCategory())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans, ResourceCategory)).value(queryValue(this.parmResourceCategory()));
        }

        if (this.parmSubscriptionId())
        {
            projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,smaSubscriptionId)).value(this.parmSubscriptionId());
        }

        if (this.parmProjTree())
        {
            projRevenueTrans.addRange(fieldNum(projRevenueTrans, ProjId)).value(this.parmProjId()+'*');
        }

        projRevenueTrans.addRange(fieldNum(ProjRevenueTrans,TransDate)).value(this.queryFromDate()+'..'+this.queryToDate());

        projRevenueTrans    = this.queryProjTable(projRevenueTrans, fieldNum(ProjRevenueTrans,ProjId));

        if (this.parmCategoryGroupId())
        {
            projRevenueTrans = this.queryCategoryGroupTable(projRevenueTrans, fieldNum(ProjRevenueTrans,CategoryId));
        }

        return queryRevenueTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryToDate</Name>
				<Source><![CDATA[
    public str queryToDate()
    {
        return queryValue(this.parmProjTransDateTo() ? this.parmProjTransDateTo() : dateMax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (!this.validate())
        {
            throw error("@SYS18738");
        }

        // Don't show progress when called from a form part
        if (!calledFromFormPart)
        {
            this.initProgress();
        }

        delete_from tmpProjInvoiceControlGeneral;
        delete_from tmpProjInvoiceControlQuotation;

        this.run_realized();

        // Quotation is not needed when called from a form part
        if (!calledFromFormPart)
        {
            this.run_quotation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run_quotation</Name>
				<Source><![CDATA[
    public void run_quotation()
    {
        while select tmpProjInvoiceControlGeneral
        where !tmpProjInvoiceControlGeneral.Quotation
        {
            tmpProjInvoiceControlQuotation.data(tmpProjInvoiceControlGeneral);
            tmpProjInvoiceControlQuotation.RecId         = 0;
            tmpProjInvoiceControlQuotation.Quotation     = NoYes::Yes;
            tmpProjInvoiceControlQuotation.QuotationInvoiceRemain = tmpProjInvoiceControlQuotation.QuotationAmount -
                                                                tmpProjInvoiceControlQuotation.Invoiced;
            tmpProjInvoiceControlQuotation.QuotationRemain        = tmpProjInvoiceControlQuotation.QuotationInvoiceRemain -
                                                                tmpProjInvoiceControlQuotation.ToBeInvoiced;

            tmpProjInvoiceControlQuotation.insert();
        }

        if ((this.parmHour()) || (this.parmExpenses()) || (this.parmItem()) || (this.parmRevenue()))
        {
            this.createQuotation();
        }

        if (this.parmHour())
        {
            this.createAverageQuotation();
        }

        this.createTotalQuotation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run_realized</Name>
				<Source><![CDATA[
    public void run_realized()
    {
        if (this.parmHour() && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
        {
            this.createEmpl();
        }

        if (this.parmExpenses() && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
        {
            this.createCost();
        }

        if (this.parmItem() && (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic))))
        {
            this.createItem();
        }

        if (this.parmRevenue() && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
        {
            this.createRevenue();
        }

        if (this.parmSubscription() && (isConfigurationkeyEnabled(configurationKeyNum(SMASubscription))))
        {
            this.createSubscription();
        }

        if (this.parmProjId() || this.parmProjInvoiceProjId() || this.parmProjWIPId() || this.parmCustomerAccount())
        {
            if (this.parmOnAccount() && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
            {
                this.createOnAccount();
            }
        }

        if (this.parmProjId() || this.parmProjInvoiceProjId() || this.parmProjWIPId() || this.parmProjCategoryId() ||
        this.parmCategoryGroupId() || this.parmCustomerAccount())
        {
            if (this.parmSalesLine() && (isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic))))
            {
                this.salesLine(true);
                this.createSalesLine();
                this.salesLine(false);
            }
        }

        this.createEmpty();

        if (this.parmRetain() && isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            this.createRetainage();
        }

        // Create average is not needed when called from a form part
        if (!calledFromFormPart && this.parmHour() && (isConfigurationkeyEnabled(configurationKeyNum(Project))))
        {
            this.createAverage();
        }

        this.createTotal();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLine</Name>
				<Source><![CDATA[
    boolean salesLine(boolean _parmSalesLine    = parmSalesLine)
    {
        parmSalesLine   = _parmSalesLine;

        return parmSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscriptionType</Name>
				<Source><![CDATA[
    boolean subscriptionType(boolean _subscriptionType  = subscriptionType)
    {
        subscriptionType    = _subscriptionType;

        return     subscriptionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjInvoiceControlGeneral</Name>
				<Source><![CDATA[
    public TmpProjInvoiceControl tmpProjInvoiceControlGeneral()
    {
        return tmpProjInvoiceControlGeneral;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpProjInvoiceControlQuotation</Name>
				<Source><![CDATA[
    public TmpProjInvoiceControl tmpProjInvoiceControlQuotation()
    {
        return tmpProjInvoiceControlQuotation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    public ProjTransType transType(ProjTransType _transType  = transType)
    {
        transType    = _transType;

        return     transType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    private void update(ProjTrans _projTrans)
    {
        if (_projTrans.invoiced())
        {
            invoiced        += _projTrans.transTurnover();
            invoicedQty     += _projTrans.qty();

            // Indirect amounts
            m_rIndirectInvoiced += _projTrans.psaIndirectAmount();
        }
        else if (_projTrans.canBeInvoiced(true))
        {
            toBeInvoiced    += _projTrans.transTurnover();
            toBeInvoicedQty += _projTrans.qty();

            if (_projTrans.transStatus() == ProjTransStatus::InvoiceProposal)
            {
                m_rProposalAmount += _projTrans.transTurnover();
            }

            // Indirect amounts
            m_rIndirectChargeable += _projTrans.psaIndirectAmount();
        }
        else
        {
            noChargeable        += _projTrans.transTurnover();

            // Indirect amounts
            noChargeable        += _projTrans.psaIndirectAmount();
            noChargeableQty     += _projTrans.qty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQty</Name>
				<Source><![CDATA[
    private void updateQty(ProjTrans _projTrans)
    {
        if (_projTrans.invoiced())
        {
            invoicedQty     += _projTrans.qty();
        }
        else if (_projTrans.canBeInvoiced(true))
        {
            toBeInvoicedQty += _projTrans.qty();
        }
        else
        {
            noChargeableQty     += _projTrans.qty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTmp</Name>
				<Source><![CDATA[
    private void updateTmp(
    boolean     qty         = false,
    boolean     quotation   = false)
    {
        TmpProjInvoiceControl   tmpProjInvoiceControlCheck;

        tmpProjInvoiceControlCheck.setTmpData(tmpProjInvoiceControlGeneral);

        tmpProjInvoiceControlGeneral.clear();

        if (recordsFound)
        {
            if (quotation)
            {
                select firstonly forupdate tmpProjInvoiceControlQuotation
               where tmpProjInvoiceControlQuotation.Quotation      == quotation
                   && tmpProjInvoiceControlQuotation.CurrencyCode   == this.currencyCode()
                   && tmpProjInvoiceControlQuotation.LineNum        == this.lineNum(false,this.salesLine(),qty);

                if (!tmpProjInvoiceControlQuotation)
                {
                    this.createEmptyAll();

                    if (qty)
                    {
                        select firstonly tmpProjInvoiceControlQuotation
                        where tmpProjInvoiceControlQuotation.Quotation == quotation
                           && tmpProjInvoiceControlQuotation.CurrencyCode   == this.currencyCode()
                           && tmpProjInvoiceControlQuotation.LineNum        == this.lineNum(false,this.salesLine(),qty);
                    }
                    else
                    {
                        select firstonly tmpProjInvoiceControlQuotation
                        where tmpProjInvoiceControlQuotation.Quotation        == quotation
                           && tmpProjInvoiceControlQuotation.CurrencyCode     == this.currencyCode()
                           && tmpProjInvoiceControlQuotation.Type             == this.transType()
                           && tmpProjInvoiceControlQuotation.smaSubscription  == this.subscriptionType();
                    }
                }

                if (qty)
                {
                    tmpProjInvoiceControlQuotation.QuotationAmount    += quotationQty;
                }
                else
                {
                    tmpProjInvoiceControlQuotation.QuotationAmount    += quotationAmount;
                }

                tmpProjInvoiceControlQuotation.QuotationInvoiceRemain = tmpProjInvoiceControlQuotation.QuotationAmount -
                                                                    tmpProjInvoiceControlQuotation.Invoiced;
                tmpProjInvoiceControlQuotation.QuotationRemain        = tmpProjInvoiceControlQuotation.QuotationInvoiceRemain -
                                                                   tmpProjInvoiceControlQuotation.ToBeInvoiced;

                tmpProjInvoiceControlQuotation.update();
            }
            else
            {
                if (qty)
                {
                    select firstonly tmpProjInvoiceControlCheck
                    where tmpProjInvoiceControlCheck.Quotation      == quotation
                       && tmpProjInvoiceControlCheck.CurrencyCode   == this.currencyCode()
                       && tmpProjInvoiceControlCheck.LineNum        == this.lineNum(false,this.salesLine(),qty);
                }
                else
                {
                    select firstonly tmpProjInvoiceControlCheck
                    where tmpProjInvoiceControlCheck.Quotation          == quotation
                       && tmpProjInvoiceControlCheck.CurrencyCode       == this.currencyCode()
                       && tmpProjInvoiceControlCheck.Type               == this.transType()
                       && tmpProjInvoiceControlCheck.smaSubscription    == this.subscriptionType();
                }

                if (!tmpProjInvoiceControlCheck)
                {
                    tmpProjInvoiceControlGeneral.Quotation          = quotation;
                    tmpProjInvoiceControlGeneral.CurrencyCode       = this.currencyCode();
                    tmpProjInvoiceControlGeneral.Type               = this.transType();
                    tmpProjInvoiceControlGeneral.smaSubscription    = this.subscriptionType();
                    tmpProjInvoiceControlGeneral.insert();
                }
                else
                {
                    if (qty)
                    {
                        select firstonly tmpProjInvoiceControlGeneral
                        where tmpProjInvoiceControlGeneral.Quotation == quotation
                           && tmpProjInvoiceControlGeneral.CurrencyCode   == this.currencyCode()
                           && tmpProjInvoiceControlGeneral.LineNum        == this.lineNum(false,this.salesLine(),qty);
                    }
                    else
                    {
                        select firstonly tmpProjInvoiceControlGeneral
                        where tmpProjInvoiceControlGeneral.Quotation        == quotation
                           && tmpProjInvoiceControlGeneral.CurrencyCode     == this.currencyCode()
                           && tmpProjInvoiceControlGeneral.Type             == this.transType()
                           && tmpProjInvoiceControlGeneral.smaSubscription  == this.subscriptionType();
                    }
                }
                if (qty)
                {
                    tmpProjInvoiceControlGeneral.Invoiced          += invoicedQty;
                    tmpProjInvoiceControlGeneral.ToBeInvoiced      += toBeInvoicedQty;
                    tmpProjInvoiceControlGeneral.NotChargeable     += noChargeableQty;
                }
                else
                {
                    tmpProjInvoiceControlGeneral.Invoiced        += invoiced;
                    tmpProjInvoiceControlGeneral.ToBeInvoiced    += toBeInvoiced;
                    tmpProjInvoiceControlGeneral.NotChargeable   += noChargeable;
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        tmpProjInvoiceControlGeneral.psaCapExempt    += m_rCapAmount;
                        tmpProjInvoiceControlGeneral.psaProposalAmount += m_rProposalAmount;
                        tmpProjInvoiceControlGeneral.psaIndirectInvoiced += m_rIndirectInvoiced;
                        tmpProjInvoiceControlGeneral.psaIndirectChargeable += m_rIndirectChargeable;
                    }
                }

                tmpProjInvoiceControlGeneral.TotalInvoicing  = tmpProjInvoiceControlGeneral.Invoiced       + tmpProjInvoiceControlGeneral.ToBeInvoiced;

                if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                {
                    tmpProjInvoiceControlGeneral.All             = tmpProjInvoiceControlGeneral.TotalInvoicing + tmpProjInvoiceControlGeneral.NotChargeable
                                                         + tmpProjInvoiceControlGeneral.psaIndirectInvoiced + tmpProjInvoiceControlGeneral.psaIndirectChargeable;

                    tmpProjInvoiceControlGeneral.psaTotalInvoiced = tmpProjInvoiceControlGeneral.Invoiced + tmpProjInvoiceControlGeneral.psaIndirectInvoiced;
                    tmpProjInvoiceControlGeneral.psaTotalChargeable = tmpProjInvoiceControlGeneral.ToBeInvoiced + tmpProjInvoiceControlGeneral.psaIndirectChargeable;
                }
                else
                {
                    tmpProjInvoiceControlGeneral.All         = tmpProjInvoiceControlGeneral.TotalInvoicing + tmpProjInvoiceControlGeneral.NotChargeable;
                }

                tmpProjInvoiceControlGeneral.LineNum         = this.lineNum(false,this.salesLine(),qty);
                tmpProjInvoiceControlGeneral.SalesLine       = this.salesLine();

                if (createEmpty)
                {
                    tmpProjInvoiceControlGeneral.NoOfRec         = 0;
                }
                else if (noOfRec.exists(tmpProjInvoiceControlGeneral.CurrencyCode))
                {
                    tmpProjInvoiceControlGeneral.NoOfRec         = noOfRec.lookup(tmpProjInvoiceControlGeneral.CurrencyCode);
                }

                tmpProjInvoiceControlGeneral.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTmpForRetainage</Name>
				<Source><![CDATA[
    private void updateTmpForRetainage(
    boolean     qty         = false,
    boolean     quotation   = false)
    {
        TmpProjInvoiceControl   tmpProjInvoiceControlCheck;

        tmpProjInvoiceControlCheck.setTmpData(tmpProjInvoiceControlGeneral);

        tmpProjInvoiceControlGeneral.clear();

        if (recordsFound)
        {
            select firstonly tmpProjInvoiceControlCheck
            where tmpProjInvoiceControlCheck.Quotation          == quotation
               && tmpProjInvoiceControlCheck.CurrencyCode       == this.currencyCode()
               && tmpProjInvoiceControlCheck.Type               == this.transType()
               && tmpProjInvoiceControlCheck.smaSubscription    == this.subscriptionType()
               && tmpProjInvoiceControlCheck.psaRetainLine;

            if (!tmpProjInvoiceControlCheck)
            {
                tmpProjInvoiceControlGeneral.Quotation          = quotation;
                tmpProjInvoiceControlGeneral.CurrencyCode       = this.currencyCode();
                tmpProjInvoiceControlGeneral.Type               = this.transType();
                tmpProjInvoiceControlGeneral.smaSubscription    = this.subscriptionType();
                tmpProjInvoiceControlGeneral.psaRetainLine      = NoYes::Yes;
                tmpProjInvoiceControlGeneral.SalesLine          = this.salesLine();
                tmpProjInvoiceControlGeneral.LineNum            = 10;
                tmpProjInvoiceControlGeneral.ToBeInvoiced       = 0;
                tmpProjInvoiceControlGeneral.NotChargeable      = 0;
                tmpProjInvoiceControlGeneral.insert();
            }
            else
            {
                select firstonly tmpProjInvoiceControlGeneral
                where tmpProjInvoiceControlGeneral.Quotation        == quotation
                   && tmpProjInvoiceControlGeneral.CurrencyCode     == this.currencyCode()
                   && tmpProjInvoiceControlGeneral.Type             == this.transType()
                   && tmpProjInvoiceControlGeneral.smaSubscription  == this.subscriptionType()
                   && tmpProjInvoiceControlGeneral.psaRetainLine;
            }

            tmpProjInvoiceControlGeneral.Invoiced        += invoiced;
            tmpProjInvoiceControlGeneral.TotalInvoicing  = tmpProjInvoiceControlGeneral.Invoiced       + tmpProjInvoiceControlGeneral.ToBeInvoiced;
            tmpProjInvoiceControlGeneral.All             = tmpProjInvoiceControlGeneral.TotalInvoicing + tmpProjInvoiceControlGeneral.NotChargeable;

            if (createEmpty)
            {
                tmpProjInvoiceControlGeneral.NoOfRec         = 0;
            }
            else if (noOfRec.exists(tmpProjInvoiceControlGeneral.CurrencyCode))
            {
                tmpProjInvoiceControlGeneral.NoOfRec         = noOfRec.lookup(tmpProjInvoiceControlGeneral.CurrencyCode);
            }
            tmpProjInvoiceControlGeneral.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTransTurnover</Name>
				<Source><![CDATA[
    private void updateTransTurnover(ProjTrans _projTrans)
    {
        if (_projTrans.invoiced())
        {
            invoiced    += _projTrans.transTurnover();

            if (_projTrans.TransType() == ProjTransType::Hour)
            {
                invoiced = invoiced + projEmplTransSale.psaIndirectInvoice;
            }
        }
        else if (_projTrans.canBeInvoiced(true))
        {
            toBeInvoiced	+= _projTrans.transTurnover();

            if (_projTrans.TransType() == ProjTransType::Hour)
            {
                toBeInvoiced = toBeInvoiced + projEmplTransSale.psaIndirectInvoice;
            }	
        }
        else
        {
            noChargeable    += _projTrans.transTurnover();

            if (_projTrans.TransType() == ProjTransType::Hour)
            {
                noChargeable = noChargeable + projEmplTransSale.psaIndirectInvoice;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                if (!(this.parmHour()         ||
                   this.parmExpenses()     ||
                   this.parmRevenue()      ||
                   this.parmSubscription() ||
                   this.parmOnAccount()    ||
                   this.parmSalesLine()    ||
                   this.parmItem()         ||
                   this.parmRetain()))
                {
                    ret = checkFailed("@SYS91027");
                }
            }
            else
            {
                if (!(this.parmHour()         ||
               this.parmExpenses()     ||
               this.parmRevenue()      ||
               this.parmSubscription() ||
               this.parmOnAccount()    ||
               this.parmSalesLine()    ||
               this.parmItem()))
                {
                    ret = checkFailed("@SYS91027");
                }
            }

            if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled() &&
                !(this.parmTimeMaterial() ||
                  this.parmFixedPrice()    ||
                  this.parmInternalCost()  ||
                  this.parmInvestment()    ||
                  this.parmTime()))
            {
                ret = checkFailed("@SYS91026");
            }

            if (this.parmProjTransDateFrom() && this.parmProjTransDateTo())
            {
                if (this.parmProjTransDateFrom() > this.parmProjTransDateTo())
                {
                    ret = checkFailed("@SYS91020");
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    protected static ClassDescription description()
    {
        return "@SYS86447";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        ProjInvoiceControl   projInvoiceControl = new ProjInvoiceControl();

        if (projInvoiceControl.prompt())
        {
            projInvoiceControl.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>quotationTransType2ProjTransType</Name>
				<Source><![CDATA[
    public static ProjTransType quotationTransType2ProjTransType(QuotationProjTransType _qoutationTransType)
    {
        ProjTransType   projTransType;

        switch (_qoutationTransType)
        {
            case QuotationProjTransType::None       :
                projTransType = ProjTransType::None;
                break;

            case QuotationProjTransType::Fee        :
                projTransType = ProjTransType::Revenue;
                break;

            case QuotationProjTransType::Hour       :
                projTransType = ProjTransType::Hour;
                break;

            case QuotationProjTransType::Expense    :
                projTransType = ProjTransType::Cost;
                break;

            case QuotationProjTransType::Item       :
                projTransType = ProjTransType::Item;
                break;
        }

        return projTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>