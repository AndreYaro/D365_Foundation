<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RcSalesListTransfer_UK</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RcSalesListTransfer_UK  extends RunBase
{
    CustInvoiceJour custInvoiceJour;
    ProjInvoiceJour projInvoiceJour;
    CustSettlement  custSettlement;

    RCSalesList_UK  rcSalesList;

    QueryRun qrcSalesList;

    #DEFINE.CurrentVersion(2)
    #LOCALMACRO.CurrentList
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>date2Quarter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    Quarter date2Quarter(date _date)
    {
        int     intQuarter = date2Qtr(_date);
        Quarter quarter;

        switch (intQuarter)
        {
            case 1:
                quarter = Quarter::Q1;
                break;
            case 2:
                quarter = Quarter::Q2;
                break;
            case 3:
                quarter = Quarter::Q3;
                break;
            case 4:
                quarter = Quarter::Q4;
                break;
        }

        return quarter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        FormRun formRun = classfactory.createQueryForm(this);
        formRun.init();
        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromCustInvoiceJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void loadFromCustInvoiceJour()
    {
        LogisticsPostalAddress postalAddress;
        postalAddress          = LogisticsPostalAddress::findRecId(custInvoiceJour.DeliveryPostalAddress);

        if (!custInvoiceJour.rcSalesList_UK && custInvoiceJour.invoiceIdDisplay()
            && IntrastatCountryRegionParameters::isDomestic((postalAddress.CountryRegionId)))
        {
            rcSalesList.SeqNum++;
            rcSalesList.TransDate         = custInvoiceJour.InvoiceDate;
            rcSalesList.AccountNum        = custInvoiceJour.OrderAccount;
            rcSalesList.CountryRegion    = postalAddress.CountryRegionId;
            rcSalesList.vatNum            = custInvoiceJour.vatNum;
            rcSalesList.AmountMST         = CurrencyExchangeHelper::mstAmount(custInvoiceJour.InvoiceAmount - custInvoiceJour.SumTax, custInvoiceJour.CurrencyCode, custInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(custInvoiceJour.Triangulation), custInvoiceJour.ExchRate, custInvoiceJour.ExchRateSecondary);
            rcSalesList.Status            = ListStatus::Include;
            rcSalesList.Invoice           = custInvoiceJour.InvoiceId;
            rcSalesList.Listcode          = custInvoiceJour.Listcode;
            rcSalesList.TransQuarter      = this.quarter();
            rcSalesList.TransYear         = this.year();
            rcSalesList.insert();

            custInvoiceJour.rcSalesList_UK = rcSalesList.DispatchId;
            custInvoiceJour.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromProjInvoiceJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void loadFromProjInvoiceJour()
    {
        if (projInvoiceJour.ProjInvoiceId && !projInvoiceJour.euSalesList)
        {
            rcSalesList.SeqNum++;
            rcSalesList.TransDate         = projInvoiceJour.InvoiceDate;
            rcSalesList.AccountNum        = projInvoiceJour.InvoiceAccount;
            rcSalesList.CountryRegion     = LogisticsPostalAddress::findRecId(projInvoiceJour.DeliveryPostalAddress).CountryRegionId;
            rcSalesList.vatNum            = projInvoiceJour.vatNum;
            rcSalesList.AmountMST         = CurrencyExchangeHelper::mstAmount(projInvoiceJour.InvoiceAmount - projInvoiceJour.SumTax, projInvoiceJour.CurrencyId, projInvoiceJour.InvoiceDate, Currency::noYes2UnknownNoYes(projInvoiceJour.Triangulation), projInvoiceJour.ExchRate, projInvoiceJour.ExchrateSecondary);
            rcSalesList.Status            = ListStatus::Include;
            rcSalesList.Invoice           = projInvoiceJour.ProjInvoiceId;
            rcSalesList.Listcode          = projInvoiceJour.ListCodeId;
            rcSalesList.TransQuarter      = this.quarter();
            rcSalesList.TransYear         = this.year();
            rcSalesList.insert();

            projInvoiceJour.euSalesList = rcSalesList.DispatchId;
            projInvoiceJour.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void modifyQuery()
    {
        if (IntrastatParameters::find().euSalesListReportDisc)
        {
            if (qrcSalesList.query().dataSourceCount() == 2)
            {
               xSysLastValue::deleteLast(this);
            }

            qrcSalesList.query().addDataSource(tablenum(CustSettlement)).addRange(fieldnum(CustSettlement, TransDate));
        }
        else
        {
            if (qrcSalesList.query().dataSourceCount() == 3)
            {
                xSysLastValue::deleteLast(this);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        super();

        qrcSalesList   = new QueryRun(querystr(RCSalesListTransfer_UK));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,qrcSalesList.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>quarter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    EUSalesListQuarter quarter()
    {
        return this.date2Quarter(rcSalesList.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>QueryRun</c> object, which is used by the <c>QueryPrompt</c> object.
    /// </summary>
    /// <returns>
    /// The <c>QueryRun</c> object.
    /// </returns>
    /// <remarks>
    /// This method is used if a query prompt is the dialog, and if a Select menu item is added to a dialog
    /// box. Do not initialize the <c>queryRun</c> object whenever the method is called. This should be
    /// done in the <c>unpack</c> method and the <c>initParmDefault</c> method, in the <c>init</c> method,
    /// or in the method only when it is not instantiated.
    /// </remarks>
    QueryRun queryRun()
    {
        Query newQuery;

        if (IntrastatParameters::find().euSalesListReportDisc)
        {
            if (qrcSalesList.query().dataSourceCount() == 2)
            {
                qrcSalesList.query().addDataSource(tablenum(CustSettlement)).addRange(fieldnum(CustSettlement, TransDate));
            }
        }
        else
        {
            if (qrcSalesList.query().dataSourceCount() == 3)
            {
                newQuery = new Query();
                SysQuery::mergeRanges(newQuery, qrcSalesList.query(), 1, true);
                SysQuery::mergeRanges(newQuery, qrcSalesList.query(), 2, true);
                qrcSalesList = new QueryRun(newQuery);
            }
        }

        return  qrcSalesList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that performs the actual job of the class.
    /// </summary>
    void run()
    {
        NumberSeq       num;

        this.progressInit("@SYS8801", 0, #Avifilemove, 0);
        progress.updateInterval(0);
        progress.setCount(0);

        ttsbegin;
        num = NumberSeq::newGetNum(IntrastatParameters::numRefRCListDispatchId_UK(),true);

        rcSalesList.DispatchId  = num.num();
        rcSalesList.SeqNum      = RCSalesList_UK::maxNum(rcSalesList.DispatchId) ;

        qrcSalesList.query().dataSourceTable(tablenum(CustInvoiceJour)).update(true);
        qrcSalesList.query().dataSourceTable(tablenum(ProjInvoiceJour)).update(true);

        while (qrcSalesList.next())
        {
            if (qrcSalesList.changed(tablenum(CustInvoiceJour)))
            {
                custInvoiceJour = qrcSalesList.get(tablenum(CustInvoiceJour));
                this.loadFromCustInvoiceJour();
            }
            if (qrcSalesList.changed(tablenum(ProjInvoiceJour)))
            {
                projInvoiceJour = qrcSalesList.get(tablenum(ProjInvoiceJour));
                this.loadFromProjInvoiceJour();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustInvoiceJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void setCustInvoiceJour(CustInvoiceJour _custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProjInvoiceJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void setProjInvoiceJour(ProjInvoiceJour _projInvoiceJour)
    {
        projInvoiceJour = _projInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer          version         = conpeek(packedClass,1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version,packedQuery]      = packedClass;
                if (packedQuery)
                    qrcSalesList   = new QueryRun(packedQuery);
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>year</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    EUSalesListYear year()
    {
        return year(rcSalesList.TransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static RCSalesListTransfer_UK construct()
    {
        return new RCSalesListTransfer_UK();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        RCSalesListTransfer_UK  listTransfer;
        FormDataSource          rcSalesList_ds;

        listTransfer    = RCSalesListTransfer_UK::construct();

        rcSalesList_ds  = FormDataUtil::getFormDataSource(args.record());

        listTransfer.getLast();

        if (listTransfer.prompt())
            listTransfer.runOperation();

        rcSalesList_ds.executeQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>