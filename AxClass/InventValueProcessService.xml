<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventValueProcessService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventValueProcessService</c> class provides the service operation for generating Inventory Value Report data.
/// </summary>
public class InventValueProcessService
{
    Query query;
    createdTransactionId transactionId;
    private CostManagementInstrumentationLogger logger;
    private boolean isInventValueReportStorageBundleFeatureEnabled = InventValueReportStorageBundleFeature::isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    final internal CostManagementInstrumentationLogger instrumentationLogger()
    {
        if (!logger)
        {
            logger = CostManagementInstrumentationLogger::createLogger(classStr(InventValueProcessService));
        }

        return logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreatedTransactionId</Name>
				<Source><![CDATA[
    public createdTransactionId parmCreatedTransactionId(createdTransactionId _transactionId = transactionId)
    {
        transactionId = _transactionId;
        return transactionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuery</Name>
				<Source><![CDATA[
    public Query parmQuery(Query _query = query)
    {
        query = _query;
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>GetInventValueReportContract</Name>
				<Source><![CDATA[
    private InventValueReportContract GetInventValueReportContract(InventValueProcessContract _dataContract)
    {
        InventValueReportContract reportContract = InventValueReportContract::construct();

        reportContract.parmReportId(_dataContract.parmReportId());
        reportContract.setReportLayoutParameters();

        reportContract.parmDateInterval(_dataContract.parmDateInterval());
        reportContract.parmFromDate(_dataContract.parmFromDate());
        reportContract.parmToDate(_dataContract.parmToDate());
        reportContract.parmQuery(this.parmQuery(new Query(SysOperationHelper::base64Decode(_dataContract.parmQuery()))));

        if (isInventValueReportStorageBundleFeatureEnabled)
        {
            if (_dataContract.parmTransactionId())
            {
                reportContract.parmTransactionId(_dataContract.parmTransactionId());
            }
        }

        return reportContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeExecutionHistory</Name>
				<Source><![CDATA[
    protected void initializeExecutionHistory(InventValueExecutionHistory _executionHistory, InventValueProcessContract _dataContract)
    {
        _executionHistory.ExecutionName = _dataContract.parmExecutionName();
        _executionHistory.ExecutionTime = DateTimeUtil::getSystemDateTime();
        _executionHistory.TransactionId = this.parmCreatedTransactionId();
        _executionHistory.FromDate = _dataContract.parmFromDate();
        _executionHistory.ToDate = _dataContract.parmToDate();
        _executionHistory.Filters = SysOperationHelper::base64Decode(_dataContract.parmQuery());

        if (isInventValueReportStorageBundleFeatureEnabled && _dataContract.parmRunInBundle())
        {
            _executionHistory.ReportId = _dataContract.parmReportId();
            _executionHistory.DateInterval = _dataContract.parmDateInterval();
            _executionHistory.StopRunning = NoYes::No;
            _executionHistory.RunInBundle = NoYes::Yes;
            _executionHistory.ExecutionStatus = InventValueExecutionStatus::Started;
        }

        InventValueReport inventValueReport = InventValueReport::findByReportId(_dataContract.parmReportId());
        _executionHistory.CalcAvgUnitCost = inventValueReport.CalcAvgUnitCost;
        _executionHistory.DetailLevel = inventValueReport.DetailLevel;
        _executionHistory.DimensionFocus = inventValueReport.DimensionFocus;
        _executionHistory.IncludeBeginningBalance = inventValueReport.IncludeBeginningBalance;
        _executionHistory.IncludeNotPostedValue = inventValueReport.IncludeNotPostedValue;
        _executionHistory.PrintTotalQtyValue = inventValueReport.PrintTotalQtyValue;
        _executionHistory.SummarizePhysFinValues = inventValueReport.SummarizePhysFinValues;
        _executionHistory.ViewCOGS = inventValueReport.ViewCOGS;
        _executionHistory.ViewDeferredCOGS = inventValueReport.ViewDeferredCOGS;
        _executionHistory.ViewDirectOutsourcing = inventValueReport.ViewDirectOutsourcing;
        _executionHistory.ViewIndirect = inventValueReport.ViewIndirect;
        _executionHistory.ViewInventory = inventValueReport.ViewInventory;
        _executionHistory.ViewLabor = inventValueReport.ViewLabor;
        _executionHistory.ViewMaterial = inventValueReport.ViewMaterial;
        _executionHistory.ViewProfitLoss = inventValueReport.ViewProfitLoss;
        _executionHistory.ViewResourceGroup = inventValueReport.ViewResourceGroup;
        _executionHistory.ViewResourceGroupTotal = inventValueReport.ViewResourceGroupTotal;
        _executionHistory.ViewResourceId = inventValueReport.ViewResourceId;
        _executionHistory.ViewResourceIdTotal = inventValueReport.ViewResourceIdTotal;
        _executionHistory.ViewWIP = inventValueReport.ViewWIP;

        InventDimParm inventDimParm = inventValueReport.viewInventDimParm();
        _executionHistory.ViewConfigId = inventDimParm.ConfigIdFlag;
        _executionHistory.ViewInventBatchId = inventDimParm.InventBatchIdFlag;
        _executionHistory.ViewInventColorId = inventDimParm.InventColorIdFlag;
        _executionHistory.ViewInventGTDId_RU = inventDimParm.InventGTDIdFlag_RU;
        _executionHistory.ViewInventLocationId = inventDimParm.InventLocationIdFlag;
        _executionHistory.ViewInventOwnerId_RU = inventDimParm.InventOwnerIdFlag_RU;
        _executionHistory.ViewInventProfileId_RU = inventDimParm.InventProfileIdFlag_RU;
        _executionHistory.ViewInventSerialId = inventDimParm.InventSerialIdFlag;
        _executionHistory.ViewInventSiteId = inventDimParm.InventSiteIdFlag;
        _executionHistory.ViewInventSizeId = inventDimParm.InventSizeIdFlag;
        _executionHistory.ViewInventStatus = inventDimParm.InventStatusFlag;
        _executionHistory.ViewInventStyleId = inventDimParm.InventStyleIdFlag;
        _executionHistory.ViewInventVersionId = inventDimParm.InventVersionIdFlag;
        _executionHistory.ViewLicensePlate = inventDimParm.LicensePlateFlag;
        _executionHistory.ViewWMSLocationId = inventDimParm.WMSLocationIdFlag;
        _executionHistory.ViewInventDimension1 = inventDimParm.InventDimension1Flag;
        _executionHistory.ViewInventDimension2 = inventDimParm.InventDimension2Flag;
        _executionHistory.ViewInventDimension3 = inventDimParm.InventDimension3Flag;
        _executionHistory.ViewInventDimension4 = inventDimParm.InventDimension4Flag;
        _executionHistory.ViewInventDimension5 = inventDimParm.InventDimension5Flag;
        _executionHistory.ViewInventDimension6 = inventDimParm.InventDimension6Flag;
        _executionHistory.ViewInventDimension7 = inventDimParm.InventDimension7Flag;
        _executionHistory.ViewInventDimension8 = inventDimParm.InventDimension8Flag;
        _executionHistory.ViewInventDimension9 = inventDimParm.InventDimension9Flag;
        _executionHistory.ViewInventDimension10 = inventDimParm.InventDimension10Flag;
        _executionHistory.ViewInventDimension11 = inventDimParm.InventDimension11Flag;
        _executionHistory.ViewInventDimension12 = inventDimParm.InventDimension12Flag;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertExecutionHistory</Name>
				<Source><![CDATA[
    private void insertExecutionHistory(InventValueProcessContract _dataContract)
    {
        InventValueExecutionHistory executionHistory;

        this.initializeExecutionHistory(executionHistory, _dataContract);

        executionHistory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setExecutionHistoryCompleted</Name>
				<Source><![CDATA[
    private void setExecutionHistoryCompleted(InventValueExecutionHistory _inventValueExecutionHistory)
    {
        ttsbegin;
        _inventValueExecutionHistory.ExecutionStatus = InventValueExecutionStatus::Completed;
        _inventValueExecutionHistory.update();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bundleIsCompleted</Name>
				<Source><![CDATA[
    private boolean bundleIsCompleted(InventValueExecutionHistory _inventValueExecutionHistory)
    {
        InventValueBundleList inventValueBundleList;

        select firstonly RecId from inventValueBundleList
            where inventValueBundleList.TransactionId == _inventValueExecutionHistory.TransactionId
            && inventValueBundleList.ProcessingState != InventValueBundleState::Ended;

        return inventValueBundleList.RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate Inventory Value Report data.
    /// </summary>
    /// <param name="_dataContract">
    /// A <c>InventValueProcessContract</c> object specifying the parameter for generating Invent Value Report data.
    /// </param>
    public void process(InventValueProcessContract _dataContract)
    {
        boolean isInventValueReportStorageSumUpFlightEnabled = InventValueReportStorageSumUpFlight::instance().isEnabled();

        if (InventValueReportStorageFeature::isEnabled())
        {
            if (isInventValueReportStorageBundleFeatureEnabled && _dataContract.parmRunInBundle())
            {
                if (_dataContract.parmTransactionId())
                {
                    this.parmCreatedTransactionId(_dataContract.parmTransactionId());
                }
                else
                {
                    this.parmCreatedTransactionId(appl.curTransactionId(true));
                    this.insertExecutionHistory(_dataContract);
                }
            }
            else
            {
                this.parmCreatedTransactionId(appl.curTransactionId(true));
            }

            using (var activityContext = this.instrumentationLogger().inventValueProcessActivities().process(transactionId))
            {
                InventValueReportInit inventValueReportInit = InventValueReportInit::construct();
                inventValueReportInit.parmInventValueReportContract(this.GetInventValueReportContract(_dataContract));
                inventValueReportInit.parmQuery(this.parmQuery());
                inventValueReportInit.parmCreatedTransactionId(this.parmCreatedTransactionId());
                inventValueReportInit.parmSkipPrintLedgerValue(true);
                inventValueReportInit.run();

                if (isInventValueReportStorageBundleFeatureEnabled && _dataContract.parmRunInBundle())
                {
                    InventValueExecutionHistory executionHistory = InventValueExecutionHistory::find(this.parmCreatedTransactionId(), true);
                    
                    if (executionHistory && this.bundleIsCompleted(executionHistory))
                    {
                        if (isInventValueReportStorageSumUpFlightEnabled)
                        {
                            this.sumUpInventValueReportTmpLineBundle();
                        }

                        this.afterSumUpValueReportTmpLine();
                        this.setExecutionHistoryCompleted(executionHistory);
                    }
                }
                else
                {
                    if (isInventValueReportStorageSumUpFlightEnabled)
                    {
                        this.sumUpInventValueReportTmpLine();
                    }

                    this.afterSumUpValueReportTmpLine();
                    this.insertExecutionHistory(_dataContract);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>afterSumUpValueReportTmpLine</Name>
				<Source><![CDATA[
    protected void afterSumUpValueReportTmpLine()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpCreateSysDaInsert</Name>
				<Source><![CDATA[
    protected SysDaInsertObject sumUpCreateSysDaInsert(InventValueReportTmpLine _inventValueReportTmpLineTarget)
    {
        SysDaInsertObject insertObject = new SysDaInsertObject(_inventValueReportTmpLineTarget);
        insertObject.fields()
            .add(fieldStr(InventValueReportTmpLine, TransactionId))
            .add(fieldStr(InventValueReportTmpLine, ResourceType))
            .add(fieldStr(InventValueReportTmpLine, ResourceGroupId))
            .add(fieldStr(InventValueReportTmpLine, ResourceId))
            .add(fieldStr(InventValueReportTmpLine, configId))
            .add(fieldStr(InventValueReportTmpLine, InventSizeId))
            .add(fieldStr(InventValueReportTmpLine, InventColorId))
            .add(fieldStr(InventValueReportTmpLine, InventStyleId))
            .add(fieldStr(InventValueReportTmpLine, InventVersionId))
            .add(fieldStr(InventValueReportTmpLine, InventSiteId))
            .add(fieldStr(InventValueReportTmpLine, InventLocationId))
            .add(fieldStr(InventValueReportTmpLine, WMSLocationId))
            .add(fieldStr(InventValueReportTmpLine, InventBatchId))
            .add(fieldStr(InventValueReportTmpLine, InventSerialId))
            .add(fieldStr(InventValueReportTmpLine, InventGTDId_RU))
            .add(fieldStr(InventValueReportTmpLine, InventProfileId_RU))
            .add(fieldStr(InventValueReportTmpLine, InventOwnerId_RU))
            .add(fieldStr(InventValueReportTmpLine, InventDimension1))
            .add(fieldStr(InventValueReportTmpLine, InventDimension2))
            .add(fieldStr(InventValueReportTmpLine, InventDimension3))
            .add(fieldStr(InventValueReportTmpLine, InventDimension4))
            .add(fieldStr(InventValueReportTmpLine, InventDimension5))
            .add(fieldStr(InventValueReportTmpLine, InventDimension6))
            .add(fieldStr(InventValueReportTmpLine, InventDimension7))
            .add(fieldStr(InventValueReportTmpLine, InventDimension8))
            .add(fieldStr(InventValueReportTmpLine, InventDimension9))
            .add(fieldStr(InventValueReportTmpLine, InventDimension10))
            .add(fieldStr(InventValueReportTmpLine, InventDimension11))
            .add(fieldStr(InventValueReportTmpLine, InventDimension12))
            .add(fieldStr(InventValueReportTmpLine, LineType))
            .add(fieldStr(InventValueReportTmpLine, TransBeginTime))
            .add(fieldStr(InventValueReportTmpLine, Voucher))
            .add(fieldStr(InventValueReportTmpLine, TransDate))
            .add(fieldStr(InventValueReportTmpLine, InventTransId))
            .add(fieldStr(InventValueReportTmpLine, ReferenceCategory))
            .add(fieldStr(InventValueReportTmpLine, Reference))
            .add(fieldStr(InventValueReportTmpLine, InventoryFinancialQty))
            .add(fieldStr(InventValueReportTmpLine, InventoryFinancialAmount))
            .add(fieldStr(InventValueReportTmpLine, InventoryPhysicalPostedQty))
            .add(fieldStr(InventValueReportTmpLine, InventoryPhysicalPostedAmount))
            .add(fieldStr(InventValueReportTmpLine, InventoryPhysicalNonPostedQty))
            .add(fieldStr(InventValueReportTmpLine, InventoryPhysicalNonPostedAmount))
            .add(fieldStr(InventValueReportTmpLine, WIPPhysicalPostedQty))
            .add(fieldStr(InventValueReportTmpLine, WIPPhysicalPostedAmount))
            .add(fieldStr(InventValueReportTmpLine, WIPPhysicalNonPostedQty))
            .add(fieldStr(InventValueReportTmpLine, WIPPhysicalNonPostedAmount))
            .add(fieldStr(InventValueReportTmpLine, DeferredCOGSPhysicalPostedQty))
            .add(fieldStr(InventValueReportTmpLine, DeferredCOGSPhysicalPostedAmount))
            .add(fieldStr(InventValueReportTmpLine, DeferredCOGSPhysicalNonPostedQty))
            .add(fieldStr(InventValueReportTmpLine, DeferredCOGSPhysicalNonPostedAmount))
            .add(fieldStr(InventValueReportTmpLine, COGSFinancialQty))
            .add(fieldStr(InventValueReportTmpLine, COGSFinancialAmount))
            .add(fieldStr(InventValueReportTmpLine, PLFinancialQty))
            .add(fieldStr(InventValueReportTmpLine, PLFinancialAmount));

        return insertObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpCreateSysDaQuery</Name>
				<Source><![CDATA[
    protected SysDaQueryObject sumUpCreateSysDaQuery()
    {
        InventValueReportTmpLine inventValueReportTmpLineSource;
        #InventDimDevelop
        SysDaQueryObject sourceDataQuery = new SysDaQueryObject(inventValueReportTmpLineSource);
        sourceDataQuery.projection()
            .add(fieldStr(InventValueReportTmpLine, TransactionId))
            .add(fieldStr(InventValueReportTmpLine, ResourceType))
            .add(fieldStr(InventValueReportTmpLine, ResourceGroupId))
            .add(fieldStr(InventValueReportTmpLine, ResourceId))
            .add(fieldStr(InventValueReportTmpLine, configId))
            .add(fieldStr(InventValueReportTmpLine, InventSizeId))
            .add(fieldStr(InventValueReportTmpLine, InventColorId))
            .add(fieldStr(InventValueReportTmpLine, InventStyleId))
            .add(fieldStr(InventValueReportTmpLine, InventVersionId))
            .add(fieldStr(InventValueReportTmpLine, InventSiteId))
            .add(fieldStr(InventValueReportTmpLine, InventLocationId))
            .add(fieldStr(InventValueReportTmpLine, WMSLocationId))
            .add(fieldStr(InventValueReportTmpLine, InventBatchId))
            .add(fieldStr(InventValueReportTmpLine, InventSerialId))
            .add(fieldStr(InventValueReportTmpLine, InventGTDId_RU))
            .add(fieldStr(InventValueReportTmpLine, InventProfileId_RU))
            .add(fieldStr(InventValueReportTmpLine, InventOwnerId_RU))
            .add(fieldStr(InventValueReportTmpLine, InventDimension1))
            .add(fieldStr(InventValueReportTmpLine, InventDimension2))
            .add(fieldStr(InventValueReportTmpLine, InventDimension3))
            .add(fieldStr(InventValueReportTmpLine, InventDimension4))
            .add(fieldStr(InventValueReportTmpLine, InventDimension5))
            .add(fieldStr(InventValueReportTmpLine, InventDimension6))
            .add(fieldStr(InventValueReportTmpLine, InventDimension7))
            .add(fieldStr(InventValueReportTmpLine, InventDimension8))
            .add(fieldStr(InventValueReportTmpLine, InventDimension9))
            .add(fieldStr(InventValueReportTmpLine, InventDimension10))
            .add(fieldStr(InventValueReportTmpLine, InventDimension11))
            .add(fieldStr(InventValueReportTmpLine, InventDimension12))
            .add(fieldStr(InventValueReportTmpLine, LineType))
            .add(fieldStr(InventValueReportTmpLine, TransBeginTime))
            .add(fieldStr(InventValueReportTmpLine, Voucher))
            .add(fieldStr(InventValueReportTmpLine, TransDate))
            .add(fieldStr(InventValueReportTmpLine, InventTransId))
            .add(fieldStr(InventValueReportTmpLine, ReferenceCategory))
            .add(fieldStr(InventValueReportTmpLine, Reference))
            .addSum(fieldStr(InventValueReportTmpLine, InventoryFinancialQty))
            .addSum(fieldStr(InventValueReportTmpLine, InventoryFinancialAmount))
            .addSum(fieldStr(InventValueReportTmpLine, InventoryPhysicalPostedQty))
            .addSum(fieldStr(InventValueReportTmpLine, InventoryPhysicalPostedAmount))
            .addSum(fieldStr(InventValueReportTmpLine, InventoryPhysicalNonPostedQty))
            .addSum(fieldStr(InventValueReportTmpLine, InventoryPhysicalNonPostedAmount))
            .addSum(fieldStr(InventValueReportTmpLine, WIPPhysicalPostedQty))
            .addSum(fieldStr(InventValueReportTmpLine, WIPPhysicalPostedAmount))
            .addSum(fieldStr(InventValueReportTmpLine, WIPPhysicalNonPostedQty))
            .addSum(fieldStr(InventValueReportTmpLine, WIPPhysicalNonPostedAmount))
            .addSum(fieldStr(InventValueReportTmpLine, DeferredCOGSPhysicalPostedQty))
            .addSum(fieldStr(InventValueReportTmpLine, DeferredCOGSPhysicalPostedAmount))
            .addSum(fieldStr(InventValueReportTmpLine, DeferredCOGSPhysicalNonPostedQty))
            .addSum(fieldStr(InventValueReportTmpLine, DeferredCOGSPhysicalNonPostedAmount))
            .addSum(fieldStr(InventValueReportTmpLine, COGSFinancialQty))
            .addSum(fieldStr(InventValueReportTmpLine, COGSFinancialAmount))
            .addSum(fieldStr(InventValueReportTmpLine, PLFinancialQty))
            .addSum(fieldStr(InventValueReportTmpLine, PLFinancialAmount));

        sourceDataQuery.groupByClause(new SysDaGroupBys()
            .add(fieldStr(InventValueReportTmpLine, TransactionId))
            .add(fieldStr(InventValueReportTmpLine, ResourceType))
            .add(fieldStr(InventValueReportTmpLine, ResourceGroupId))
            .add(fieldStr(InventValueReportTmpLine, ResourceId))
            .add(fieldStr(InventValueReportTmpLine, configId))
            .add(fieldStr(InventValueReportTmpLine, InventSizeId))
            .add(fieldStr(InventValueReportTmpLine, InventColorId))
            .add(fieldStr(InventValueReportTmpLine, InventStyleId))
            .add(fieldStr(InventValueReportTmpLine, InventVersionId))
            .add(fieldStr(InventValueReportTmpLine, InventSiteId))
            .add(fieldStr(InventValueReportTmpLine, InventLocationId))
            .add(fieldStr(InventValueReportTmpLine, WMSLocationId))
            .add(fieldStr(InventValueReportTmpLine, InventBatchId))
            .add(fieldStr(InventValueReportTmpLine, InventSerialId))
            .add(fieldStr(InventValueReportTmpLine, InventGTDId_RU))
            .add(fieldStr(InventValueReportTmpLine, InventProfileId_RU))
            .add(fieldStr(InventValueReportTmpLine, InventOwnerId_RU))
            .add(fieldStr(InventValueReportTmpLine, InventDimension1))
            .add(fieldStr(InventValueReportTmpLine, InventDimension2))
            .add(fieldStr(InventValueReportTmpLine, InventDimension3))
            .add(fieldStr(InventValueReportTmpLine, InventDimension4))
            .add(fieldStr(InventValueReportTmpLine, InventDimension5))
            .add(fieldStr(InventValueReportTmpLine, InventDimension6))
            .add(fieldStr(InventValueReportTmpLine, InventDimension7))
            .add(fieldStr(InventValueReportTmpLine, InventDimension8))
            .add(fieldStr(InventValueReportTmpLine, InventDimension9))
            .add(fieldStr(InventValueReportTmpLine, InventDimension10))
            .add(fieldStr(InventValueReportTmpLine, InventDimension11))
            .add(fieldStr(InventValueReportTmpLine, InventDimension12))
            .add(fieldStr(InventValueReportTmpLine, LineType))
            .add(fieldStr(InventValueReportTmpLine, TransBeginTime))
            .add(fieldStr(InventValueReportTmpLine, Voucher))
            .add(fieldStr(InventValueReportTmpLine, TransDate))
            .add(fieldStr(InventValueReportTmpLine, InventTransId))
            .add(fieldStr(InventValueReportTmpLine, ReferenceCategory))
            .add(fieldStr(InventValueReportTmpLine, Reference)));

        sourceDataQuery.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(inventValueReportTmpLineSource, fieldStr(InventValueReportTmpLine, TransactionId)),
                new SysDaValueExpression(this.parmCreatedTransactionId())));

        return sourceDataQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpCleanUpData</Name>
				<Source><![CDATA[
    private void sumUpCleanUpData()
    {
        int recordsToDeleteBatchSize = this.getRecordsToDeleteBatchSize();
        int deletedRows = recordsToDeleteBatchSize;

        str sqlStatement = this.buildSQLDeleteStr(recordsToDeleteBatchSize, this.parmCreatedTransactionId());
        while (deletedRows == recordsToDeleteBatchSize)
        {
            deletedRows = this.runSQLStatement(sqlStatement);
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpInventValueReportTmpLine</Name>
				<Source><![CDATA[
    private void sumUpInventValueReportTmpLine()
    {
        InventValueReportTmpLine inventValueReportTmpLineTarget;

        SysDaInsertObject insertObject = this.sumUpCreateSysDaInsert(inventValueReportTmpLineTarget);

        SysDaQueryObject sourceDataQuery = this.sumUpCreateSysDaQuery();

        insertObject.query(sourceDataQuery);

        ttsbegin;

        new SysDaInsertStatement().insert(insertObject);

        this.sumUpCleanUpData();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpCleanUpDataBundle</Name>
				<Source><![CDATA[
    private void sumUpCleanUpDataBundle()
    {
        int recordsToDeleteBatchSize = this.getRecordsToDeleteBatchSize();
        int deletedRows = recordsToDeleteBatchSize;

        str sqlStatement = this.buildSQLDeleteStrBundle(recordsToDeleteBatchSize, this.parmCreatedTransactionId(), appl.curTransactionId());
        while (deletedRows == recordsToDeleteBatchSize)
        {
            deletedRows = this.runSQLStatement(sqlStatement);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumUpInventValueReportTmpLineBundle</Name>
				<Source><![CDATA[
    private void sumUpInventValueReportTmpLineBundle()
    {
        InventValueReportTmpLine inventValueReportTmpLineTarget;

        SysDaInsertObject insertObject = this.sumUpCreateSysDaInsert(inventValueReportTmpLineTarget);

        SysDaQueryObject sourceDataQuery = this.sumUpCreateSysDaQuery();

        insertObject.query(sourceDataQuery);

        ttsbegin;

        new SysDaInsertStatement().insert(insertObject);

        this.sumUpCleanUpDataBundle();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordsToDeleteBatchSize</Name>
				<Source><![CDATA[
    protected int getRecordsToDeleteBatchSize()
    {
        return 500000;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLDeleteStrBundle</Name>
				<Source><![CDATA[
    protected str buildSQLDeleteStrBundle(int _recordsToDeleteBatchSize, CreatedTransactionId _transactionId, CreatedTransactionId _createdTransactionId)
    {
        /* Build up the following SQL statement
        DELETE TOP(%1) FROM INVENTVALUEREPORTTMPLINE
            WHERE PARTITION = 5637144576
                AND DATAAREAID = N'USMF'
                AND TRANSACTIONID = 11045
                AND CREATEDTRANSACTIONID <> 11048
        */
        SqlSystem sqlSystem = new SqlSystem();

        str directSQL = strFmt('DELETE TOP(%1) FROM INVENTVALUEREPORTTMPLINE', sqlSystem.sqlLiteral(_recordsToDeleteBatchSize, true));
        directSQL += strFmt(
            ' WHERE PARTITION = %1' +
            ' AND DATAAREAID = %2' +
            ' AND TRANSACTIONID = %3' +
            ' AND CREATEDTRANSACTIONID <> %4',
            sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true),
            sqlSystem.sqlLiteral(curext()),
            sqlSystem.sqlLiteral(_transactionId, true),
            sqlSystem.sqlLiteral(_createdTransactionId, true));

        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSQLDeleteStr</Name>
				<Source><![CDATA[
    protected str buildSQLDeleteStr(int _recordsToDeleteBatchSize, CreatedTransactionId _transactionId)
    {
        /* Build up the following SQL statement
        DELETE TOP(%1) FROM INVENTVALUEREPORTTMPLINE
            WHERE PARTITION = 5637144576
                AND DATAAREAID = N'USMF'
                AND TRANSACTIONID = 6053
                AND TRANSACTIONID <> CREATEDTRANSACTIONID
        */
        SqlSystem sqlSystem = new SqlSystem();

        str directSQL = strFmt('DELETE TOP(%1) FROM INVENTVALUEREPORTTMPLINE', sqlSystem.sqlLiteral(_recordsToDeleteBatchSize, true));
        directSQL += strFmt(
            ' WHERE PARTITION = %1' +
            ' AND DATAAREAID = %2' +
            ' AND TRANSACTIONID = %3' +
            ' AND TRANSACTIONID <> CREATEDTRANSACTIONID',
            sqlSystem.sqlLiteral(getCurrentPartitionRecId(), true),
            sqlSystem.sqlLiteral(curext()),
            sqlSystem.sqlLiteral(_transactionId, true));

        return directSQL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSQLStatement</Name>
				<Source><![CDATA[
    private int runSQLStatement(str _sqlStatement)
    {
        int deletedRows;
        Connection connection = new Connection();
        Statement statement = connection.createStatement();

        try
        {
            connection.ttsbegin();
            deletedRows = statement.executeUpdateWithParameters(_sqlStatement, SqlParams::create());
            connection.ttscommit();
        }
        catch
        {
            if (connection != null)
            {
                connection.ttsabort();
            }

            throw;
        }
        finally
        {
            statement.close();
            connection.finalize();
        }
        return deletedRows;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>