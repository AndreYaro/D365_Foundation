<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustInterestCancel</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustInterestCancel extends RunBaseBatch implements BatchRetryable
{
    CustInterestJour parmCustInterestJour;
    QueryRun queryRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    ///    A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    ///    in the Application Object Tree (AOT).
    /// </remarks>
    Object dialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the internal variables.
    /// </summary>
    /// <remarks>
    ///    This method is called when no <c>SysLastValue</c> record can be found when calling the
    ///    <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        this.queryBuild();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>CustInterestCancel</c> class.
    /// </summary>
    /// <returns>A new instance of the <c>CustInterestCancel</c> class.</returns>
    public static CustInterestCancel construct()
    {
        return new CustInterestCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        queryRun = new QueryRun(querystr(CustInterestJob));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustInterestJour</Name>
				<Source><![CDATA[
    CustInterestJour parmCustInterestJour(CustInterestJour _custInterestJour = parmCustInterestJour)
    {
        parmCustInterestJour = _custInterestJour;
        return parmCustInterestJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    void queryBuild()
    {
        QueryBuildRange rangeStatus;

        rangeStatus = queryRun.query().dataSourceTable(tablenum(CustInterestJour)).findRange(fieldnum(CustInterestJour, Status));
        rangeStatus.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>QueryRun</c> class, which is used by the <c>queryPrompt</c> method.
    /// </returns>
    /// <remarks>
    ///    This method is used if a query prompt is the dialog, and if a Select menu item is added to a
    ///    dialog. Do not create the instance of the <c>QueryRun</c> class when this method is called. Do it
    ///    in the <c>unpack</c> method and the <c>initParmDefault</c> method, or in the <c>init</c> method.
    /// </remarks>
    QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustInterestJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>CustInterestJour</c> table buffer.
    /// </summary>
    /// <param name = "_custInterestJour">The <c>CustInterestJour</c> table buffer.</param>
    protected void updateCustInterestJour(CustInterestJour _custInterestJour)
    {
        _custInterestJour.setCancelling();
        _custInterestJour.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustInterestCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the processing of the <c>CustInterestJour</c> record for cancellation.
    /// </summary>
    protected void processCustInterestCancel()
    {
        // <GEEPL>
        #ISOCountryRegionCodes
        // </GEEPL>
        
        CustInterestJour custInterestJour = queryRun.get(tablenum(CustInterestJour));

        if (custInterestJour.mayBeCancelled())
        {
            this.updateCustInterestJour(custInterestJour);
            info(strfmt("@SYS67002", custInterestJour.InterestNote, custInterestJour.AccountNum));
        }
        else
        {
            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]) && custInterestJour.Status == PrintPostCancel::Posted)
            {
                info(strfmt("@GLS113033", custInterestJour.InterestNoteDocument_PL, custInterestJour.InterestNote, custInterestJour.AccountNum));
            }
            else
            {
                // </GEEPL>
                info(strfmt("@SYS67003", custInterestJour.InterestNote, custInterestJour.AccountNum));
                // <GEEPL>
            }
            // </GEEPL>
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        #OCCRetryCount
   
        try
        {
            ttsbegin;

            while (queryRun.next())
            {
                this.processCustInterestCancel();
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS18447");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    true if the task is run on the server; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Your classes that extend <c>RunBaseBatch</c> class must override the <c>runsImpersonated</c> method
    ///    and return false if you want those tasks to run on a client.
    /// </remarks>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether to add a select button to the dialog.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    /// <remarks>
    ///    If you click this button, it will show the query form. Therefore, the <c>queryRun</c> method has to
    ///    return a valid <c>queryRun</c> .If you change the return value to false the button will no longer
    ///    be added.
    /// </remarks>
    boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container packedQuery;

        [packedQuery] = _packedClass;

        if (packedQuery)
            queryRun = new QueryRun(packedQuery);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>QueryRun</c> instance with additional query ranges.
    /// </summary>
    protected void updateQuery()
    {
        queryRun.query().dataSourceTable(tablenum(CustInterestJour)).rangeField(fieldnum(CustInterestJour, InterestNote)).value(this.parmCustInterestJour().InterestNote);
        queryRun.query().dataSourceTable(tablenum(CustInterestJour)).rangeField(fieldnum(CustInterestJour, AccountNum)).value(this.parmCustInterestJour().AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS21517";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        CustInterestCancel custInterestCancel;
        CustInterestJour custInterestJour;

        if (args.record().TableId == tablenum(CustInterestJour))
        {
            custInterestJour = args.record();
        }

        custInterestCancel = CustInterestCancel::construct();

        if (custInterestJour)
        {
            custInterestCancel.parmCustInterestJour(custInterestJour);
        }

        custInterestCancel.getLast();
        custInterestCancel.updateQuery();

        if (custInterestCancel.prompt())
        {
            custInterestCancel.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>