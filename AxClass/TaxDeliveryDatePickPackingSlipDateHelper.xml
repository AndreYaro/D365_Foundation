<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxDeliveryDatePickPackingSlipDateHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxDeliveryDatePickPackingSlipDateHelper</c> class defines the helper of the feature <c>TaxDeliveryDatePickPackingSlipDateFeature</c>.
/// </summary>
public final class TaxDeliveryDatePickPackingSlipDateHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isFeatureEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the feature should enabled.
    /// </summary>
    /// <returns>true if feature enabled; otherwise, false.</returns>
    public static boolean isFeatureEnabled()
    {
        return TaxParameters::find().TaxCalculationDateType == TaxCalculationDateType::DeliveryDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPackingSlipDateFromSalesParmLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets packing slip date from SalesParmLine. Generally, a SalesParmLine has a SalesParmSubLine,
    /// if there are multiple SalesParmSubLine, pick the first packing slip date.
    /// </summary>
    /// <param name = "_salesParmLine">The <c>SalesParmLine</c> object.</param>
    /// <returns>Packing slip date of the <c>SalesParmLine</c>.</returns>
    public static DlvDate getPackingSlipDateFromSalesParmLine(SalesParmLine _salesParmLine)
    {
        DlvDate packingSlipDate;
        SalesParmSubLine salesParmSubLine;
        while select JournalRefTableId, JournalRefRecId from salesParmSubLine
            where salesParmSubLine.LineRefRecId == _salesParmLine.RecId
                && salesParmSubLine.JournalRefTableId == tableNum(CustPackingSlipTrans)
        {
            DlvDate deliveryDate = CustPackingSlipTrans::findRecId(salesParmSubLine.JournalRefRecId).custPackingslipJour().DeliveryDate;
            if (deliveryDate)
            {
                packingSlipDate = deliveryDate;
                break;
            }
        }
        return packingSlipDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasDifferentPackingSlipDatesOnSalesParmTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines it has different packing slip dates on a SalesParmTable.
    /// </summary>
    /// <param name = "_salesParmTable">The <c>SalesParmTable</c> object.</param>
    /// <returns>true if it has different packing slip dates; otherwise, false.</returns>
    internal static boolean hasDifferentPackingSlipDatesOnSalesParmTable(SalesParmTable _salesParmTable)
    {
        Set packingSlipDateSet = new Set(Types::Date);
        SalesParmLine salesParmLine;
        SalesParmSubLine salesParmSubLine;
        while select JournalRefRecId from salesParmSubLine
            where salesParmSubLine.JournalRefTableId == tableNum(CustPackingSlipTrans)
            join salesParmLine
                where salesParmLine.RecId == salesParmSubLine.LineRefRecId
                    && salesParmLine.TableRefId == _salesParmTable.TableRefId
                    && salesParmLine.ParmId == _salesParmTable.ParmId
        {
            DlvDate deliveryDate = CustPackingSlipTrans::findRecId(salesParmSubLine.JournalRefRecId).custPackingslipJour().DeliveryDate;
            if (deliveryDate)
            {
                packingSlipDateSet.add(deliveryDate);
                if (packingSlipDateSet.elements() > 1)
                {
                    return true;
                }
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notifyUsersWhenInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Notifies users when invoice.
    /// </summary>
    /// <param name = "_salesParmUpdate">The <c>SalesParmUpdate</c> object.</param>
    /// <param name = "_salesParmTable">The <c>SalesParmTable</c> object.</param>
    internal static void notifyUsersWhenInvoice(SalesParmUpdate _salesParmUpdate, SalesParmTable _salesParmTable)
    {
        // When users invoice and don't select 'Packing slip', notify users.
        if (_salesParmUpdate.SpecQty != SalesUpdate::PackingSlip)
        {
            warning("@TaxCoreTax:QuantityShouldSelectPackingSlip");
        }
        // When users invoice and there are multiple packing slip dates, notify users.
        else if (TaxDeliveryDatePickPackingSlipDateHelper::hasDifferentPackingSlipDatesOnSalesParmTable(_salesParmTable))
        {
            warning("@TaxCoreTax:DifferentPackingSlipDates");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>