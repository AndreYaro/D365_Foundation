<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastBudgetDelete</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjForecastBudgetDelete extends ProjForecastBudget implements BatchRetryable
{
    ForecastModelId fromForecastModel;

    DialogField dialogFromForecastModel;

    #define.CurrentVersion(3)

    #localmacro.CurrentList
        includeHour,
        includeExpenses,
        includeItem,
        includeFee,
        includeOnAccount,
        projectFromDate,
        projectToDate,
        fromForecastModel
     #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog box can be either built by using the <c>Dialog</c> class or by using a class that is
    /// created in the AOT.
    /// </remarks>
    public Object dialog()
    {
        Dialog      dialogRunBase;

        dialogRunBase = super();

        dialogRunBase.addGroup("@SYS86824");
        dialogFromForecastModel = dialogRunBase.addFieldValue(extendedTypeStr(ForecastModelId), fromForecastModel, "@SYS82923","@SYS90662");

        return dialogRunBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_Cost</Name>
				<Source><![CDATA[
    Num do_Cost(Num transId)
    {
        ProjForecastCost        projForecastCost;

        if (includeExpenses)
        {
            delete_from projForecastCost
            where projForecastCost.TransId == transId;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_empl</Name>
				<Source><![CDATA[
    Num do_empl(Num transId)
    {
        ProjForecastEmpl        projForecastEmpl;

        if (includeHour)
        {
            delete_from projForecastEmpl
            where projForecastEmpl.TransId == transId;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_onAcc</Name>
				<Source><![CDATA[
    Num do_onAcc(Num transId)
    {
        ProjForecastOnAcc       projForecastOnAcc;

        if (includeOnAccount)
        {
            delete_from projForecastOnAcc
            where projForecastOnAcc.TransId == transId;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_Revenue</Name>
				<Source><![CDATA[
    Num do_Revenue(Num transId)
    {
        ProjForecastRevenue     projForecastRevenue;

        if (includeFee)
        {
            delete_from projForecastRevenue
            where projForecastRevenue.TransId == transId;
        }
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>do_sales</Name>
				<Source><![CDATA[
    Num do_sales(Num transId)
    {
        ForecastSales           forecastSales;

        if (includeItem)
        {
            delete_from forecastSales
            where forecastSales.ProjTransId == transId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdCategoryId</Name>
				<Source><![CDATA[
    public FieldId fieldIdCategoryId()
    {
        return fieldNum(ProjForecastUnion, CategoryId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdItemId</Name>
				<Source><![CDATA[
    protected FieldId fieldIdItemId()
    {
        return fieldNum(ProjForecastUnion, ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdProjId</Name>
				<Source><![CDATA[
    public FieldId fieldIdProjId()
    {
        return fieldNum(ProjForecastUnion, ProjId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdProjTransType</Name>
				<Source><![CDATA[
    public FieldId fieldIdProjTransType()
    {
        return fieldNum(ProjForecastUnion, ProjTransType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdResource</Name>
				<Source><![CDATA[
    protected FieldId fieldIdResource()
    {
        return fieldNum(ProjForecastUnion, Resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdResourceCategory</Name>
				<Source><![CDATA[
    protected FieldId fieldIdResourceCategory()
    {
        return fieldNum(ProjForecastUnion, ResourceCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldIdTransId</Name>
				<Source><![CDATA[
    public FieldId fieldIdTransId()
    {
        return fieldNum(ProjForecastUnion, TransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        this.parmFromForecastModel(dialogFromForecastModel.value());
        //    ToForecastModel   = dialogToForecastModel.value();

        this.parmIncludeHour(dialogIncludeHour.value());
        this.parmIncludeExpenses(dialogIncludeExpenses.value());
        this.parmIncludeItem(dialogIncludeItem.value());
        this.parmIncludeFee(dialogIncludeFee.value());
        this.parmIncludeOnAccount(dialogIncludeOnAccount.value());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    void initQuery()
    {
        str transTypeRange;

        if (projectFromDate || projectToDate)
        {
            this.setRange(tableNum(ProjForecastUnion)  ,fieldNum(ProjForecastUnion, SchedFromDate)  , queryRange(projectFromDate, projectToDate), RangeStatus::Locked);
        }

        transTypeRange = this.setTransTypeRange();

        this.setRange(tableNum(ProjForecastUnion)  ,fieldNum(ProjForecastUnion,ProjTransType)   , transTypeRange, RangeStatus::Locked);
        this.setRange(tableNum(ProjForecastUnion)  ,fieldNum(ProjForecastUnion,ModelId)         , fromForecastModel, RangeStatus::Locked);

        QueryBuildDataSource qbdsDimensions = this.queryRun().query().dataSourceTable(tableNum(DimensionAttributeValueSet));

        if (qbdsDimensions)
        {
            // By default, outer join is being considered from <c>SysQueryForm</c> object but to apply specified filters it must be inner join.
            qbdsDimensions.joinMode(JoinMode::InnerJoin);
        }

        this.checkAndDisableDatasource(queryRun.query(),queryRun.query().dataSourceNo(1));

        this.queryRun().query().dataSourceTable(tableNum(ProjForecastUnion)).sortClear();
        this.queryRun().query().dataSourceTable(tableNum(ProjForecastUnion)).addSortField(fieldNum(ProjForecastUnion,ProjId));
        this.queryRun().query().dataSourceTable(tableNum(ProjForecastUnion)).addSortField(fieldNum(ProjForecastUnion,ProjTransType));
        this.queryRun().query().dataSourceTable(tableNum(ProjForecastUnion)).addSortField(fieldNum(ProjForecastUnion,TransId));
        this.queryRun().query().dataSourceTable(tableNum(ProjForecastUnion)).orderMode(OrderMode::GroupBy);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container pack = conNull();
        container ret;

        if (queryRun)
        {
            pack = queryRun.pack();
        }

        ret =  [#CurrentVersion, #CurrentList] + [pack];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromForecastModel</Name>
				<Source><![CDATA[
    public ForecastModelId parmFromForecastModel(ForecastModelId _fromForecastModel = fromForecastModel)
    {
        fromForecastModel  = _fromForecastModel;

        return fromForecastModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>progressTitle</Name>
				<Source><![CDATA[
    str progressTitle()
    {
        return "@SYS86825";
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected QueryRun queryBuild()
    {
        queryRun = new QueryRun(queryStr(ProjForecastPeriodic));

        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    public TableId tableId()
    {
        return tableNum(ProjForecastUnion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>title</Name>
				<Source><![CDATA[
    str title()
    {
        return "@SYS342505";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer         version         = RunBase::getVersion(packedClass);
        container       packedQuery;
        boolean         ret = true;

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList,packedQuery] = packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new QueryRun(packedQuery);
                }
                else
                {
                    queryRun = this.queryBuild();
                }

                break;
            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret;

        ret = super(_calledFrom);

        if (!this.checkIsTransactionTypeSelected())
        {
            // No transactions selected
            ret = checkFailed("@SYS91027");
        }

        if (! fromForecastModel)
        {
            ret = checkFailed("@SYS87707");
        }

        if (ret)
        {
            ret = ForecastModel::checkModel(fromForecastModel);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIsTransactionTypeSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if a transaction type is selected.
    /// </summary>
    /// <returns>
    /// true if a transaction type is selected; otherwise, false.
    /// </returns>
    protected boolean checkIsTransactionTypeSelected()
    {
        return (includeHour || includeExpenses || includeItem || includeFee || includeOnAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    protected static ClassDescription description()
    {
        return "@SYS342505";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        ProjForecastBudgetDelete  pfcb;

        pfcb = new ProjForecastBudgetDelete();

        if (pfcb.prompt())
        {
            pfcb.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>