<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PayrollWorkerEnrolledBenefitDetailEntityEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles events for the <c>PayrollWorkerEnrolledBenefitDetailEntityEventHandler</c> table.
/// </summary>
public final class PayrollWorkerEnrolledBenefitDetailEntityEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>PayrollWorkerEnrolledBenefitDetailEntity_DefaultedRow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>DefaultedRow</c> event and sets the fields on the table.
    /// </summary>
    /// <param name="_sender">PayrollWorkerEnrolledBenefitDetailEntity instance</param>
    /// <param name="_e">DataEventArgs from the event</param>
    [DataEventHandler(tableStr(PayrollWorkerEnrolledBenefitDetailEntity), DataEventType::DefaultedRow)]
    public static void PayrollWorkerEnrolledBenefitDetailEntity_DefaultedRow(Common _sender, DataEventArgs _e)
    {
        PayrollWorkerEnrolledBenefitDetailEntity workerEnrolledBenefitDetailEntity = _sender as PayrollWorkerEnrolledBenefitDetailEntity;

        if (workerEnrolledBenefitDetailEntity.VendAccountNum)
        {
            workerEnrolledBenefitDetailEntity.VendDataAreaId = workerEnrolledBenefitDetailEntity.DataArea;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>PayrollWorkerEnrolledBenefitDetailEntity_validateField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the <c>ValidateField</c> event and validates fields on the table.
    /// </summary>
    /// <param name="_sender">PayrollWorkerEnrolledBenefitDetailEntity instance</param>
    /// <param name="_e">DataEventArgs from the event</param>
    [DataEventHandler(tableStr(PayrollWorkerEnrolledBenefitDetailEntity), DataEventType::ValidatingField)]
    public static void PayrollWorkerEnrolledBenefitDetailEntity_validateField(Common _sender, DataEventArgs _e)
    {
        PayrollWorkerEnrolledBenefitDetailEntity workerEnrolledBenefitDetailEntity = _sender as PayrollWorkerEnrolledBenefitDetailEntity;

        ValidateFieldEventArgs validateFieldEventArguments = _e as ValidateFieldEventArgs;

        if (validateFieldEventArguments != null)
        {
            switch (validateFieldEventArguments.parmFieldId())
            {
                case fieldNum(PayrollWorkerEnrolledBenefitDetailEntity, PositionId):
                    
                    if (workerEnrolledBenefitDetailEntity.PositionId && workerEnrolledBenefitDetailEntity.DataArea)
                    {
                        HcmPosition position = HcmPosition::findByPosition(workerEnrolledBenefitDetailEntity.PositionId);
                        CompanyInfoRecId legalEntity = CompanyInfo::findDataArea(workerEnrolledBenefitDetailEntity.DataArea).RecId;
                        HcmBenefit benefit = HcmBenefit::findByBenefitId(workerEnrolledBenefitDetailEntity.BenefitId);
                        HcmWorker worker = HcmWorker::findByPersonnelNumber(workerEnrolledBenefitDetailEntity.PersonnelNumber);

                        boolean isValidPosition = PayrollWorkerEnrolledBenefitDetail_Extension::validatePosition(
                            position.RecId,
                            legalEntity,
                            worker.RecId,
                            benefit.RecId,
                            workerEnrolledBenefitDetailEntity.BenefitDetailValidFrom,
                            workerEnrolledBenefitDetailEntity.BenefitDetailValidFrom
                        );

                        if (!isValidPosition)
                        {
                            validateFieldEventArguments.parmValidateResult(false);
                        }
                    }

                    break;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>