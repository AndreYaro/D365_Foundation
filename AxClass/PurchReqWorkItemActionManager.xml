<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqWorkItemActionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqWorkItemActionManager</c> class is used as the event handler for the purchase
/// requisition workflow.
/// </summary>
class PurchReqWorkItemActionManager extends WorkflowWorkItemActionManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performBudgetCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the budget check for the purchase requisition.
    /// </summary>
    private void performBudgetCheck()
    {
        if (this.parmArgs().dataset() == tableNum(PurchReqTable))
        {
            PurchReqTable purchReqTable = PurchReqTable::find(this.parmArgs().record().RecId);
            purchReqTable.performBudgetCheck();
        }
        else
        {
            PurchReqLine purchReqLine = PurchReqLine::find(this.parmArgs().record().RecId);
            purchReqLine.performBudgetCheck(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBudget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether budget funds are available for the purchase requisition.
    /// </summary>
    protected void checkBudget()
    {
        // Validate if the budget control configuration is ON, active and purchase requisition is budget controlled.
        if (BudgetControlConfigurationManager::isPurchaseRequisitionBudgetControlEnabled(Ledger::current()))
        {
            this.performBudgetCheck();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>preActionDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the budget funds are available when the action dialog run event occurs for workflow work item actions.
    /// </summary>
    protected void preActionDialogRun()
    {
        super();

        // Perform budget check before confirming the action dialog.
        // This gives the reviewer a chance to cancel the action if there are any budget check errors or warnings.
        this.checkBudget();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WorkflowWorkItemTable         workItem;
        Common                        common;
        boolean                       ret = true;
        PurchReqWorkItemActionManager purchReqWorkItemActionManager = new PurchReqWorkItemActionManager();

        workItem = _args.caller().getActiveWorkflowWorkItem();

        common = workItem.getRecord();

        ret = PurchReqWorkItemActionManager::validate(common, _args);

        if (ret)
        {
            purchReqWorkItemActionManager.parmArgs(_args);
            purchReqWorkItemActionManager.parmCaller(_args.caller());
            purchReqWorkItemActionManager.run();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public static boolean validate(Common _common, Args _args)
    {
        boolean ret = true;

        boolean isApprovalOrCompletionTask()
        {
            switch (_args.menuItemName())
            {
                case menuitemActionStr(PurchReqApprovalApprove)   :
                case menuitemActionStr(PurchReqTaskComplete)      :
                    return true;
                default :
                    return false;
            }
        }

        switch (_common.TableId)
        {
            case tableNum(PurchReqTable):
                PurchReqTable purchReqTable = PurchReqTable::find(_common.RecId);

                if (!purchReqTable.RecId)
                {
                    throw error (error::missingRecord(tableStr(PurchReqTable)));
                }
                
                ret = ret
                    && PurchReqWorkflow::validatePurchReqOnHold(_args, purchReqTable)
                    && PurchReqWorkflow::validateAccountingDistributions(purchReqTable.RecId);

                if (ret && isApprovalOrCompletionTask())
                {
                    purchReqTable.validateAccountingDate();
                    ret = purchReqTable.isLinesFullyDistributed();
                }

                if (ret)
                {
                    PurchReqTable::throwIfRFQPending(true, purchReqTable.RecId);
                }
                
                break;

            case tableNum(PurchReqLine):
                PurchReqLine purchReqLine = PurchReqLine::find(_common.RecId);

                if (!purchReqLine.RecId)
                {
                    throw error (error::missingRecord(tableStr(PurchReqLine)));
                }
               
                SourceDocumentLineProcessor::submitSourceDocumentLineImplementation(purchReqLine, false, SourceDocumentLineAccountingStatus::FullyDistributed);

                if (ret && isApprovalOrCompletionTask())
                {
                    purchReqLine.validateAccountingDate();
                    ret = purchReqLine.isFullyDistributed();
                }

                if (ret)
                {
                    PurchReqTable::throwIfRFQPending(false, purchReqLine.RecId);
                }

                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>