<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GeneralLedgerAdjustmentDisplayAdjustmentDataSourceManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Manages data source interactions for elements that display adjustments and implement <c>GeneralLedgerAdjustmentIDisplayProposedAdjustments</c>.
/// </summary>
internal final class GeneralLedgerAdjustmentDisplayAdjustmentDataSourceManager
{
    private GeneralLedgerAdjustmentIDisplayProposedAdjustments adjustmentDisplay;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>newForAdjustmentDisplay</Name>
				<Source><![CDATA[
    internal static GeneralLedgerAdjustmentDisplayAdjustmentDataSourceManager newForAdjustmentDisplay(
        GeneralLedgerAdjustmentIDisplayProposedAdjustments _adjustmentDisplay)
    {
        GeneralLedgerAdjustmentDisplayAdjustmentDataSourceManager adjustmentDataSourceManager = new GeneralLedgerAdjustmentDisplayAdjustmentDataSourceManager();
        adjustmentDataSourceManager.adjustmentDisplay = _adjustmentDisplay;

        return adjustmentDataSourceManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeAdjustmentDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the adjustment display's adjustment data source on load.
    /// </summary>
    internal void initializeAdjustmentDataSource()
    {
        QueryBuildDataSource adjustmentDataSource = this.getAdjustmentDataSourceFromAdjustmentDisplay();
        this.applyDefaultSortingOnAdjustmentDataSource(adjustmentDataSource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshAdjustmentDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the adjustment display's adjustment data source.
    /// </summary>
    internal void refreshAdjustmentDataSource()
    {
        // Get the current company from the adjustment display form context
        GeneralLedgerAdjustmentDisplayFormContext formContext = adjustmentDisplay.getAdjustmentDisplayFormContext();
        DataAreaId currentCompanyContext = formContext.parmCompany();

        // Whenever the adjustment data source is refreshed, all journal references on adjustment records within the
        // currently selected company should be updated to ensure any deleted journals are accounted for
        GeneralLedgerAdjustmentProposedAdjustment::clearAdjustmentJournalNumbersForDataArea(currentCompanyContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAdjustmentWrittenToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles adjustments written to the adjustment display's adjustment data source.
    /// </summary>
    internal void handleAdjustmentWrittenToDataSource()
    {
        GeneralLedgerAdjustmentProposedAdjustment writtenAdjustment = this.getCurrentlySelectedAdjustment();

        // Any time an adjustment records is written to an adjustment display, it should be marked as having been modified
        this.markAdjustmentAsModified(writtenAdjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAdjustmentWrittenToDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates adjustments written to the adjustment display's adjustment data source.
    /// </summary>
    /// <returns>True if the adjustment is valid; else, false.</returns>
    internal boolean validateAdjustmentWrittenToDataSource()
    {
        boolean isValidAdjustment = true;

        GeneralLedgerAdjustmentProposedAdjustment writtenAdjustment = this.getCurrentlySelectedAdjustment();

        // Cannot write adjustments that have been exported to a journal
        if (writtenAdjustment.AdjustmentJournalNumber)
        {
            isValidAdjustment = checkFailed("@GeneralLedgerAdjustment:AdjustmentListPageCannotUpdateAdjustment");
        }

        return isValidAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyDefaultSortingOnAdjustmentDataSource</Name>
				<Source><![CDATA[
    private void applyDefaultSortingOnAdjustmentDataSource(QueryBuildDataSource _adjustmentDataSource)
    {
        // Default sorting on the adjustment records is designed to ensure that like records are properly grouped
        _adjustmentDataSource.addSortField(fieldNum(GeneralLedgerAdjustmentProposedAdjustment, Voucher), SortOrder::Ascending);
        _adjustmentDataSource.addSortField(fieldNum(GeneralLedgerAdjustmentProposedAdjustment, PostingType), SortOrder::Ascending);
        _adjustmentDataSource.addSortField(fieldNum(GeneralLedgerAdjustmentProposedAdjustment, RecId), SortOrder::Ascending);
    }

]]></Source>
			</Method>
			<Method>
				<Name>markAdjustmentAsModified</Name>
				<Source><![CDATA[
    private void markAdjustmentAsModified(GeneralLedgerAdjustmentProposedAdjustment _adjustment)
    {
        ttsbegin;

        _adjustment.selectForUpdate(true);
        _adjustment.IsModified = NoYes::Yes;
        _adjustment.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentlySelectedAdjustment</Name>
				<Source><![CDATA[
    private GeneralLedgerAdjustmentProposedAdjustment getCurrentlySelectedAdjustment()
    {
        FormDataSource adjustmentDataSource = adjustmentDisplay.getAdjustmentsDataSource();
        return adjustmentDataSource.cursor() as GeneralLedgerAdjustmentProposedAdjustment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAdjustmentDataSourceFromAdjustmentDisplay</Name>
				<Source><![CDATA[
    private QueryBuildDataSource getAdjustmentDataSourceFromAdjustmentDisplay()
    {
        FormDataSource adjustmentDataSource = adjustmentDisplay.getAdjustmentsDataSource();
        return adjustmentDataSource.queryBuildDataSource();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>