<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSNumberSeqExtSegmentTypeHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSNumberSeqExtSegmentTypeHandler</c> class is the base class for type specific handling of a number sequence extension segment.
/// </summary>
public abstract class WHSNumberSeqExtSegmentTypeHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>WHSNumberSeqExtSegmentTypeHandler</c> class.
    /// </summary>
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatSegment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats a number sequence extension segment.
    /// </summary>
    /// <param name = "_segmentTypeHandlerParameters">The parameters.</param>
    /// <returns>A formatted number sequence extension segment.</returns>
    abstract public str formatSegment(WHSNumberSeqExtSegmentTypeHandlerParameters _segmentTypeHandlerParameters)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultDisplayValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a segment default display value.
    /// </summary>
    /// <returns>A segment default display value.</returns>
    abstract public str getDefaultDisplayValue()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSegmentData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a display value to segment data used in the <c>WHSNumberSequenceExt</c> class.
    /// </summary>
    /// <returns>A segment data.</returns>
    abstract public str getSegmentData(str _displayValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>usePostFormatting</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a number sequence extension segment should be formatted afterwards.
    /// </summary>
    /// <param name = "_segmentTypeHandlerParameters">The parameters.</param>
    /// <returns>True if a number sequence extension segment should be formatted afterwards; otherwise, false.</returns>
    abstract public boolean usePostFormatting(WHSNumberSeqExtSegmentTypeHandlerParameters _segmentTypeHandlerParameters)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDisplayValueReadOnly</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a display value is read only.
    /// </summary>
    /// <returns>True if a display value is read only; otherwise, false.</returns>
    abstract public boolean isDisplayValueReadOnly()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDisplayValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the display value is valid.
    /// </summary>
    /// <param name = "_displayValue">The display value.</param>
    /// <returns>True if the display value is valid; otherwise, false.</returns>
    abstract public boolean checkDisplayValue(str _displayValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDisplayValueFormat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the display value has a correct format.
    /// </summary>
    /// <param name = "_displayValue">The display value.</param>
    /// <param name = "_isNuberSequence">Determines if the display value is a number sequence.</param>
    /// <returns>True if the display has a correct format; otherwise, false.</returns>
    protected boolean checkDisplayValueFormat(str _displayValue, boolean _isNuberSequence)
    {
        if (strFind(_displayValue, WHSNumberSeqExt::forbiddenChars(), 1, strLen(_displayValue)))
        {
            return checkFailed(strFmt("@WAX:TheNumberSequenceExtensionValueIsInvalid", _displayValue));
        }

        if (_isNuberSequence)
        {
            if (strNFind(_displayValue, WHSNumberSeqExt::formattingChars(), 1, strLen(_displayValue)))
            {
                return checkFailed(strFmt("@WAX:TheNumberSequenceExtensionValueIsInvalid", _displayValue));
            }
        }
        else
        {
            if (strFind(_displayValue, WHSNumberSeqExt::formattingChars(), 1, strLen(_displayValue)))
            {
                return checkFailed(strFmt("@WAX:TheNumberSequenceExtensionValueIsInvalid", _displayValue));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>singletonFromType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a singleton instance of <c>WHSNumberSequenceExtSegmentTypeHandler</c> class from a segment type.
    /// </summary>
    /// <param name = "_segmentType">The segment type.</param>
    /// <returns>A singleton instance.</returns>
    static public WHSNumberSeqExtSegmentTypeHandler singletonFromType(WHSNumberSequenceExtSegmentType _segmentType)
    {
        WHSNumberSeqExtSegmentTypeFactoryAttribute attr = new WHSNumberSeqExtSegmentTypeFactoryAttribute(_segmentType);
        WHSNumberSeqExtSegmentTypeHandler handler = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSNumberSeqExtSegmentTypeHandler), attr);

        return handler;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>