<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailConfirmItemBarcode</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Confirms the presence of barcode on the item.
/// </summary>
class RetailConfirmItemBarcode extends RunBase
{
    RetailTransactionSalesTrans    transactionSalesTrans;

    ItemBarCode newBarcode;
    ItemId      itemId;

    int dummy;

    SysOperationProgress    operationProgress;
/*
Barcodes    Record    Barcodes

Name    ConstValue
Text000    Do you want the system to check for each %1 with %2,\
Text001    whether it contains an item that is now on file?
Text002    The Barcode to confirm with is not on file. Confirming is not possible.\
Text003    However, do you want the system to check for each %1 with %2,\
Text004    %1 %2 does not exist on file. Confirming is not possible.\
Text005    However, do you want the system to check for each %3 with %4,\
Text006    %4 %5 was confirmed with %1 %2 %3.
Text007    There are %1 other transaction sales entries with Barcode %2 not on file.\
Text008    Do you want to confirm them with %3 %4 %5?
Text009    Confirming transaction sales entries with selected item/barcode on file\\
Text010    Checking transaction sales entries for items now on file\\
Text011    %1 entries were found with items on file.
*/

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        dummy
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>confirmAllTransItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Confirms that all the transactions have items on file.
    /// </summary>
    /// <param name="_suppressMessageDialog">
    /// Boolean value to skip the user interference while running test class
    /// </param>
    void confirmAllTransItems(boolean _suppressMessageDialog = false)
    {
        InventTable inventTable;
        RetailTransactionSalesTrans salesTrans;
        int numberOfTransactions;
        int numberOfItemsFound;

        select count(recId) from salesTrans
            where salesTrans.statementId == transactionSalesTrans.statementId
               && salesTrans.transactionCode == RetailItemTransactionCode::ItemBarcodeNotOnFile;

        operationProgress.setTotal(salesTrans.recId);
        operationProgress.setText("@RET4115");

        ttsbegin;

        while select forupdate salesTrans
            where salesTrans.statementId == transactionSalesTrans.statementId
               && salesTrans.transactionCode == RetailItemTransactionCode::ItemBarcodeNotOnFile
        {
            numberOfTransactions++;
            operationProgress.setCount(numberOfTransactions);

            inventTable = InventTable::find(salesTrans.itemId);

            if (inventTable)
            {
                salesTrans.transactionCode = RetailItemTransactionCode::ItemOnFile;
                if (!salesTrans.inventDimId)
                {
                    salesTrans.initInventDimId();
                }

                // Update inventory reservation, when reservation during calculation flag is enabled or when flighting logic is disabled.
                if (this.isReserveInventoryDuringStatementCalculation(transactionSalesTrans.statementId) || !RetailSkipInventoryReservationDuringItemConfirmationToggle::instance().isEnabled())
                {
                    salesTrans.updateEstimate();
                }
                salesTrans.doUpdate();
                numberOfItemsFound++;
            }
        }

        operationProgress.kill();

        ttscommit;

        if (!_suppressMessageDialog)
        {
            box::info(strfmt("@RET4116", numberOfItemsFound));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        #AVIFiles
        ;

        super();

        operationProgress = SysOperationProgress::newGeneral(#AviTransfer, "@RET4057", 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the item in the <c>InventTable</c> table and updates the <c>RetailTransactionSalesTrans</c> table with the transaction code.
    /// </summary>
    /// <param name="_suppressMessageDialog">
    /// Boolean value to skip the user interference while running test class
    /// </param>
    void run(boolean _suppressMessageDialog = false)
    {
        InventItemBarcode   inventItemBarcode;
        InventTable         inventTable;

        if (!newBarcode && !itemId)
        {
            if (_suppressMessageDialog || Box::yesNo("@RET4117", DialogButton::Yes) == DialogButton::Yes)
            {
                this.confirmAllTransItems(_suppressMessageDialog);
            }

            return;
        }

        if (!itemId)
        {
            select firstonly inventItemBarcode
                where inventItemBarcode.itemBarCode == newBarcode;

            if (!inventItemBarcode)
            {
                if (_suppressMessageDialog || Box::yesNo("@RET4118", DialogButton::Yes) == DialogButton::Yes)
                {
                    this.confirmAllTransItems(_suppressMessageDialog);
                }

                return;
            }

            inventTable = InventTable::find(inventItemBarcode.itemId);

            if (!inventTable)
            {
                if (_suppressMessageDialog || Box::yesNo(strfmt("@RET4119", inventItemBarcode.itemId), DialogButton::Yes) == DialogButton::Yes)
                {
                    this.confirmAllTransItems(_suppressMessageDialog);
                }

                return;
            }
        }
        else
        {
            inventTable = InventTable::find(itemId);

            if (!inventTable)
            {
                if (_suppressMessageDialog || Box::yesNo(strfmt("@RET4119", itemId), DialogButton::Yes) == DialogButton::Yes)
                {
                    this.confirmAllTransItems(_suppressMessageDialog);
                }

                return;
            }
        }

        ttsbegin;

        transactionSalesTrans = RetailTransactionSalesTrans::find(transactionSalesTrans.transactionId,
                                                               transactionSalesTrans.store,
                                                               transactionSalesTrans.terminalId,
                                                               transactionSalesTrans.lineNum, true);
        transactionSalesTrans.transactionCode = RetailItemTransactionCode::ItemOnFile;

        // Update inventory reservation, when reservation during calculation flag is enabled or flighting logic is disabled.
        if (this.isReserveInventoryDuringStatementCalculation(transactionSalesTrans.statementId) || !RetailSkipInventoryReservationDuringItemConfirmationToggle::instance().isEnabled())
        {
            transactionSalesTrans.updateEstimate();
        }
        transactionSalesTrans.doUpdate();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionSalesTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the itemID and barcode values from the <c>RetailTransactionSalesTrans</c> table.
    /// </summary>
    /// <param name="_transactionSalesTrans">
    /// The current instance of <c>RetailTransactionSalesTrans</c> table.
    /// </param>
    public void transactionSalesTrans(RetailTransactionSalesTrans _transactionSalesTrans)
    {
        transactionSalesTrans = _transactionSalesTrans;

        newBarcode = transactionSalesTrans.barcode;
        itemId = transactionSalesTrans.itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailConfirmItemBarcode   confirmBarcode = new RetailConfirmItemBarcode();

        if (confirmBarcode.prompt())
        {
            confirmBarcode.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReserveInventoryDuringStatementCalculation</Name>
				<Source><![CDATA[
    private boolean isReserveInventoryDuringStatementCalculation(RetailStatementId _statementId)
    {
        RetailStatementTable statementTable = RetailStatementTable::find(_statementId);
        boolean TrickleFeedTransactionalStatement = (statementTable.StatementType == RetailStatementType::Transactional && 
            FeatureStateProvider::isFeatureEnabled(RetailEodTrickleFeedFeature::instance()));

        RetailEodStatementConfigurationAccessor statementTableAccessor = RetailEodStatementConfigurationAccessor::constructFromStatementId(_statementId);
        return statementTableAccessor.isReserveInventoryDuringStatementCalculation() && !TrickleFeedTransactionalStatement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>