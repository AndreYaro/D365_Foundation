<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ChequeDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ChequeDP</c> class is the report data provider class for the <c>Cheque_UK</c>,
///    <c>Cheque_US</c>, <c>Cheque_DE</c>, <c>Cheque_DK</c>, <c>Cheque_ES</c>, and <c>Cheque_CA</c>
///    reports.
/// </summary>
[SRSReportParameterAttribute(classStr(SrsTmpTblMarshallerContract))]
public class ChequeDP extends SrsReportDataProviderPreProcessTempDB
{
    TmpChequePrintout       tmpChequePrintout;
    BankChequeLayout        bankChequeLayout;
    str                     numerals2Letter, dateStr;
    int                     startNumerals2LetterPart2, numeralCnt;
    ChequeFormType          chequeReportType;
    CompanyInfo             companyInfoOrg;
    boolean                 isPreprinted;
    Addressing              bankAddr, companyAddr;
    CurrencyCodeISO         currency;
    Name                    bankName;
    ChequeTmp               chequeTmp;
    TransDate               chequeDate;
    boolean                 isTest;
    boolean                 areImagesAddedToFirstRow;
    Amount                  paymentAmountInEuro;
    Amount                  amountInvoiceCur;
    Amount                  totalDebit;
    Amount                  totalCredit;
    LanguageId              languageId;
    #DEFINE.emptyString     ('')
    #DEFINE.Month           ('M')
    #DEFINE.newLine         ('\n\n')
    #DEFINE.void            ('@SYS53120')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addImagesToFirstRow</Name>
				<Source><![CDATA[
    private void addImagesToFirstRow()
    {
        Debug::assert(!areImagesAddedToFirstRow);

        chequeTmp.Companylogo = bankChequeLayout.companyLogoImage();

        if (bankChequeLayout.Signature1)
        {
            chequeTmp.CheckSignature1 = bankChequeLayout.Signature1Bmp;
        }

        if (bankChequeLayout.Signature2)
        {
            chequeTmp.CheckSignature2 = bankChequeLayout.Signature2Bmp;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>bankCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the currency code value.
    /// </summary>
    /// <returns>
    ///    A currency code value.
    /// </returns>
    private CurrencyCode bankCurrencyCode()
    {
        CurrencyCode      currencyCode;
        BankAccountTable  bankAccountTable;

        bankAccountTable = BankAccountTable::find(tmpChequePrintout.AccountId);

        if (bankChequeLayout && bankChequeLayout.AmountPrefix)
        {
            currencyCode = bankChequeLayout.AmountPrefix;
        }
        else if (bankAccountTable && bankChequeLayout.BankName)
        {
            currencyCode =  bankAccountTable.CurrencyCode;
        }

        return  currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyAddr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the company address.
    /// </summary>
    /// <returns>
    ///    An address as a string.
    /// </returns>
    protected Addressing  companyAddr()
    {
        Addressing  ret;
        int         pos;

        if (bankChequeLayout.CompanyName)
        {
            ret = companyInfoOrg.postalAddress().Address;

            pos = strScan(ret, #newLine, 1, 999);

            while (pos)
            {
                ret = strDel(ret, pos, 1);
                pos = strScan(ret, #newLine, 1, 999);
            }

            return ret;
        }
        else
        {
            return #emptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>companyCity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the city address of the company.
    /// </summary>
    /// <returns>
    ///    An address string.
    /// </returns>
    private AddressCity companyCity()
    {
        str countyCode, countryCode, stateCode;

        countryCode = BankAccountTable::find(tmpChequePrintout.AccountId).postalAddress().CountryRegionId;
        stateCode   = BankAccountTable::find(tmpChequePrintout.AccountId).postalAddress().State;
        countyCode  = BankAccountTable::find(tmpChequePrintout.AccountId).postalAddress().County;

        return LogisticsAddressCounty::find(countryCode, stateCode, countyCode).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIndicator1</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date format as a string.
    /// </summary>
    /// <returns>
    ///    A date indicator as a string.
    /// </returns>
    private str dateIndicator1()
    {
        str ret;

        switch (bankChequeLayout.ChequeDateFormat_CA)
        {
            case ChequeDateFormat_CA::DMY:
                ret = this.getDay();
                break;
            case ChequeDateFormat_CA::MDY:
                ret = #Month;
                break;
            case ChequeDateFormat_CA::YMD:
                ret = this.getYear();
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIndicator10</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date format as a string.
    /// </summary>
    /// <returns>
    ///    A date indicator as a string.
    /// </returns>
    private str dateIndicator10()
    {
        str ret;

        switch (bankChequeLayout.ChequeDateFormat_CA)
        {
            case ChequeDateFormat_CA::DMY:
                ret = this.getYear();
                break;
            case ChequeDateFormat_CA::MDY:
                ret = this.getYear();
                break;
            case ChequeDateFormat_CA::YMD:
                ret = this.getDay();
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIndicator2</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date format as a string.
    /// </summary>
    /// <returns>
    ///    A date indicator as a string.
    /// </returns>
    private str dateIndicator2()
    {
        str ret;

        switch (bankChequeLayout.ChequeDateFormat_CA)
        {
            case ChequeDateFormat_CA::DMY:
                ret = this.getDay();
                break;
            case ChequeDateFormat_CA::MDY:
                ret = #Month;
                break;
            case ChequeDateFormat_CA::YMD:
                ret = this.getYear();
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIndicator3</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date format as a string.
    /// </summary>
    /// <returns>
    ///    A date indicator as a string.
    /// </returns>
    private str dateIndicator3()
    {
        str ret;

        switch (bankChequeLayout.ChequeDateFormat_CA)
        {
            case ChequeDateFormat_CA::DMY:
                ret = this.getSeparator(true);
                break;
            case ChequeDateFormat_CA::MDY:
                ret = this.getSeparator(true);
                break;
            case ChequeDateFormat_CA::YMD:
                ret = this.getYear();
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIndicator4</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date format as a string.
    /// </summary>
    /// <returns>
    ///    A date indicator as a string.
    /// </returns>
    private str dateIndicator4()
    {
        str ret;

        switch (bankChequeLayout.ChequeDateFormat_CA)
        {
            case ChequeDateFormat_CA::DMY:
                ret = #Month;
                break;
            case ChequeDateFormat_CA::MDY:
                ret = this.getDay();
                break;
            case ChequeDateFormat_CA::YMD:
                ret = this.getYear();
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIndicator5</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date format as a string.
    /// </summary>
    /// <returns>
    ///    A date indicator as a string.
    /// </returns>
    private str dateIndicator5()
    {
        str ret;

        switch (bankChequeLayout.ChequeDateFormat_CA)
        {
            case ChequeDateFormat_CA::DMY:
                ret = #Month;
                break;
            case ChequeDateFormat_CA::MDY:
                ret = this.getDay();
                break;
            case ChequeDateFormat_CA::YMD:
                ret = this.getSeparator(true);
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIndicator6</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date format as a string.
    /// </summary>
    /// <returns>
    ///    A date indicator as a string.
    /// </returns>
    private str dateIndicator6()
    {
        str ret;

        switch (bankChequeLayout.ChequeDateFormat_CA)
        {
            case ChequeDateFormat_CA::DMY:
                ret = this.getSeparator(true);
                break;
            case ChequeDateFormat_CA::MDY:
                ret = this.getSeparator(true);
                break;
            case ChequeDateFormat_CA::YMD:
                ret = #Month;
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIndicator7</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the date format as a string.
    /// </summary>
    /// <returns>
    ///    A date indicator as a string.
    /// </returns>
    private str dateIndicator7()
    {
        str ret;

        switch (bankChequeLayout.ChequeDateFormat_CA)
        {
            case ChequeDateFormat_CA::DMY:
                ret = this.getYear();
                break;
            case ChequeDateFormat_CA::MDY:
                ret = this.getYear();
                break;
            case ChequeDateFormat_CA::YMD:
                ret = #Month;
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIndicator8</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a string that represents the date format.
    /// </summary>
    /// <returns>
    ///    A date indicator as a string.
    /// </returns>
    private str dateIndicator8()
    {
        str ret;

        switch (bankChequeLayout.ChequeDateFormat_CA)
        {
            case ChequeDateFormat_CA::DMY:
                ret = this.getYear();
                break;
            case ChequeDateFormat_CA::MDY:
                ret = this.getYear();
                break;
            case ChequeDateFormat_CA::YMD:
                ret = this.getSeparator(true);
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIndicator9</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the string that represents a date format.
    /// </summary>
    /// <returns>
    ///    A date indicator as a string.
    /// </returns>
    private str dateIndicator9()
    {
        str ret;

        switch (bankChequeLayout.ChequeDateFormat_CA)
        {
            case ChequeDateFormat_CA::DMY:
                ret = this.getYear();
                break;
            case ChequeDateFormat_CA::MDY:
                ret = this.getYear();
                break;
            case ChequeDateFormat_CA::YMD:
                ret = this.getDay();
                break;
            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. It should compute data and populate the data tables that will be returned to SSRS.
    /// </remarks>
    public void fetch()
    {
        companyInfoOrg  = CompanyInfo::find();
       
        while select tmpChequePrintout
        {
            this.populateTmpChequePrintout();
            this.formatDate();
            this.setValues();
            this.insertChequeTmp();
            chequeTmp.clear();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpChequePrintout</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates values on the current <c>TmpChequePrintout</c> table buffer.
    /// </summary>
    protected void populateTmpChequePrintout()
    {
        DirPartyTable   partyTable;
        CustTable       custTable;
        VendTable       vendTable;
        boolean         isBrazilEnabled = BrazilParameters::isEnabled();

        bankChequeLayout    = BankChequeLayout::find(tmpChequePrintout.AccountId);
        bankAddr            = BankAccountTable::find(tmpChequePrintout.AccountId).postalAddress().Address;

        if (isBrazilEnabled && tmpChequePrintout.ChequeFormType == ChequeFormType::BRStyle)
        {
            chequeDate = tmpChequePrintout.TransDate;
        }
        else
        {
            chequeDate = tmpChequePrintout.MaturityDate;
        }

        chequeReportType = tmpChequePrintout.ChequeFormType;

        if (bankChequeLayout.BankName)
        {
            bankName = BankAccountTable::find(tmpChequePrintout.AccountId).Name;
        }

        isPreprinted = bankChequeLayout.ChequeNumMethod == ChequeNumMethod::Fixed ? true : false;

        if (chequeReportType == ChequeFormType::CAStyle)
        {
            select firstonly LanguageId from partyTable
                    where partyTable.Name == tmpChequePrintout.RecipientName
                    exists join vendTable
                        where vendTable.Party == partyTable.RecId;

            if (partyTable.LanguageId)
            {
                languageId = partyTable.LanguageId;

                if (subStr(languageId, 1, 2) != 'fr' && subStr(languageId, 1, 2) != 'en')
                {
                    languageId = xUserInfo::find().Language;
                }
            }
            else
            {
                select firstonly LanguageId from partyTable
                        where partyTable.Name == tmpChequePrintout.RecipientName
                        exists join custTable
                            where custTable.Party == partyTable.RecId;

                if (partyTable.LanguageId)
                {
                    languageId = partyTable.LanguageId;

                    if (subStr(languageId, 1, 2) != 'fr' && subStr(languageId, 1, 2) != 'en')
                    {
                        languageId = xUserInfo::find().Language;
                    }
                }
                else
                {
                    languageId = xUserInfo::find().Language;
                }
            }
        }

        if (chequeReportType == ChequeFormType::DEStyle)
        {
            numerals2Letter = tmpChequePrintout.AmountCur != 0 ? numeralsToTxt(tmpChequePrintout.AmountCur) : '';
            if (strLen(numerals2Letter) > 4)
            {
                numerals2Letter = subStr(numerals2Letter,5, strLen(numerals2Letter)-4);
            }
            startNumerals2LetterPart2 = 46;

            // for printing the Amount
            tmpChequePrintout.AmountTxt = strFmt('***%1***',  tmpChequePrintout.AmountCur);
        }

        if (chequeReportType == ChequeFormType::UKStyle)
        {
            // for dividing the field Numerals2Letter in two parts
            numerals2Letter = tmpChequePrintout.Numerals2Letter;
            startNumerals2LetterPart2 = 81;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the formatted date value.
    /// </summary>
    protected void formatDate()
    {
        switch (bankChequeLayout.ChequeDateFormat_CA)
        {
            case ChequeDateFormat_CA::DMY:
                dateStr = date2str(tmpChequePrintout.MaturityDate, 123, 2, 0, 2, 0, 4,DateFlags::None);
                dateStr = strIns(dateStr, this.getSeparator(), 3);
                dateStr = strIns(dateStr, this.getSeparator(), 6);
                break;
            case ChequeDateFormat_CA::MDY:
                dateStr = date2str(tmpChequePrintout.MaturityDate, 213, 2, 0, 2, 0, 4,DateFlags::None);
                dateStr = strIns(dateStr, this.getSeparator(), 3);
                dateStr = strIns(dateStr, this.getSeparator(), 6);
                break;
            case ChequeDateFormat_CA::YMD:
                dateStr = date2str(tmpChequePrintout.MaturityDate, 321, 2, 0, 2, 0, 4,DateFlags::None);
                dateStr = strIns(dateStr, this.getSeparator(), 5);
                dateStr = strIns(dateStr, this.getSeparator(), 8);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChequeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>ChequeTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ChequeTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ChequeTmp))]
    public ChequeTmp getChequeTmp()
    {
        select * from chequeTmp;
        return chequeTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the day type value.
    /// </summary>
    /// <returns>
    ///    A day type value as a string.
    /// </returns>
    protected str getDay()
    {
        str ret;

        if (subStr(languageId, 1, 2) == 'fr')
        {
            // French jour
            ret = 'J';
        }
        else
        {
            // English day
            ret = 'D';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateMonthName</Name>
				<Source><![CDATA[
    private str generateMonthName(MonthsOfYear _month, str _language)
    {
        SysDictEnum dictEnum = new SysDictEnum(enumNum(MonthsOfYear));
        str labelId = dictEnum.index2LabelID(_month);
        return SysLabel::labelId2String2(labelId, _language);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSeparator</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets a separator type value.
    /// </summary>
    /// <param name="isIndicator">
    ///    An <c>isIndicator</c> Boolean value.
    /// </param>
    /// <returns>
    ///    A separator string value.
    /// </returns>
    protected str getSeparator(boolean isIndicator = false)
    {
        str ret;

        if (!isIndicator)
        {
            switch (bankChequeLayout.ChequeDateSeparator_CA)
            {
                case ChequeDateSeparator_CA::Dash:
                    ret = '-';
                    break;
                case ChequeDateSeparator_CA::Period:
                    ret = '.';
                    break;
                case ChequeDateSeparator_CA::Space:
                    ret = ' ';
                    break;
                default:
                    ret = ' ';
                    break;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the year type value.
    /// </summary>
    /// <returns>
    ///    The year string value.
    /// </returns>
    protected str getYear()
    {
        str ret;

        if (subStr(languageId, 1, 2) == 'fr')
        {
            // French an
            ret = 'A';
        }
        else
        {
            // English year
            ret = 'Y';
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpChequePrintout</Name>
				<Source><![CDATA[
    private void initTmpChequePrintout()
    {
        SrsTmpTblMarshallerContract contract = this.parmDataContract() as SrsTmpTblMarshallerContract;

        //Temp Table Object that was returned from SRSDataCarrier
        new SRSReportRunPermission().assert();
        tmpChequePrintout = SRSTmpTblMarshaller::getTmpTbl(contract.parmTmpTableDataRecId());

        SRSTmpTblMarshaller::deleteTmpTblData(contract.parmTmpTableDataRecId());
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateChequeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>ChequeTmp</c> buffer in preparation for insert.
    /// </summary>
    protected void populateChequeTmp()
    {
        chequeTmp.Amount                    = tmpChequePrintout.AmountTxt;
        chequeTmp.AmountCur                 = tmpChequePrintout.AmountCur;
        chequeTmp.AccountNum                = tmpChequePrintout.AccountNum;
        chequeTmp.Address                   = tmpChequePrintout.Address;
        chequeTmp.AmountInWords             = tmpChequePrintout.Numerals2Letter;
        chequeTmp.BankCopyCustomWatermark   = tmpChequePrintout.BankCopyCustomWatermark;
        chequeTmp.IsTestCheque              = tmpChequePrintout.IsTestCheque;
        chequeTmp.PrintSignature1           = NoYes::No;
        chequeTmp.PrintSignature2           = NoYes::No;

        if (tmpChequePrintout.Copy || tmpChequePrintout.Void)
        {
            if (tmpChequePrintout.BankCopySignatureText)
            {
                chequeTmp.BankCopySignatureText     = tmpChequePrintout.BankCopySignatureText;
            }
            else
            {
                chequeTmp.BankCopySignatureText     = #void;
            }
        }
        else
        {
            chequeTmp.BankCopySignatureText     = #emptyString;
        }

        chequeTmp.BankName                  = bankName;
        chequeTmp.ChequeNum                 = tmpChequePrintout.ChequeNum;
        chequeTmp.ChequeDate                = tmpChequePrintout.MaturityDate;

        if (chequeReportType == ChequeFormType::CAStyle)
        {
            chequeTmp.CompanyAddress        = companyAddr;
            chequeTmp.DateIndicator1        = this.dateIndicator1();
            chequeTmp.DateIndicator10       = this.dateIndicator10();
            chequeTmp.DateIndicator2        = this.dateIndicator2();
            chequeTmp.DateIndicator3        = this.dateIndicator3();
            chequeTmp.DateIndicator4        = this.dateIndicator4();
            chequeTmp.DateIndicator5        = this.dateIndicator5();
            chequeTmp.DateIndicator6        = this.dateIndicator6();
            chequeTmp.DateIndicator7        = this.dateIndicator7();
            chequeTmp.DateIndicator8        = this.dateIndicator8();
            chequeTmp.DateIndicator9        = this.dateIndicator9();
            chequeTmp.DateStr               = dateStr;
        }
        else if (chequeReportType == ChequeFormType::DKStyle)
        {
            chequeTmp.DateStr               = strFmt('%1, %2',dayName(dayOfWk(tmpChequePrintout.MaturityDate)), date2str(tmpChequePrintout.MaturityDate,-1,2,1,4,1,4,DateFlags::None));
        }
        else if (chequeReportType == ChequeFormType::ESStyle)
        {
            chequeTmp.DateStr               = date2str(chequeDate,123,0,0,0,0,2,DateFlags::None);
        }
        else if (chequeReportType == ChequeFormType::BRStyle) 
        {
            chequeTmp.DateStr               = date2str(chequeDate,-1,2,1,4,1,4,DateFlags::None);
        }
        else
        {
            chequeTmp.DateStr               = strFmt('%1', date2str(tmpChequePrintout.MaturityDate,-1,2,1,4,1,4,DateFlags::None));
        }

        if (chequeReportType == ChequeFormType::USStyle || chequeReportType == ChequeFormType::UKStyle || chequeReportType == ChequeFormType::ESStyle || chequeReportType == ChequeFormType::DKStyle)
        {
            chequeTmp.CompanyAddress        = this.companyAddr();
        }

        if (bankChequeLayout.CompanyName)
        {
            chequeTmp.CompanyName           = companyInfoOrg.name();
        }

        if (!areImagesAddedToFirstRow)
        {
            this.addImagesToFirstRow();
            areImagesAddedToFirstRow = true;
        }

        if (tmpChequePrintout.Signature1)
        {
            BankChequePrint::checkLayoutFieldRights(bankChequeLayout, fieldNum(BankChequeLayout, Signature1Bmp));
            chequeTmp.PrintSignature1 = NoYes::Yes;
        }

        if (tmpChequePrintout.Signature2)
        {
            BankChequePrint::checkLayoutFieldRights(bankChequeLayout, fieldNum(BankChequeLayout, Signature2Bmp));
            chequeTmp.PrintSignature2 = NoYes::Yes;
        }

        if (chequeReportType == ChequeFormType::DEStyle)
        {
            chequeTmp.CurrencyIndicator     = this.bankCurrencyCode();
        }
        else
        {
            chequeTmp.CurrencyIndicator     = currency;
        }

        if (bankChequeLayout.BankName)
        {
            chequeTmp.BankAddress           = bankAddr;
        }

        if (bankChequeLayout.UseAcode || bankChequeLayout.UseBcode || bankChequeLayout.UseCCode)
        {
            chequeTmp.abcCode               = bankChequeLayout.abcCode();
        }

        const str LANGUAGE_ES = 'es';
        if (chequeReportType == ChequeFormType::ESStyle)
        {
            chequeTmp.CompanyCity           = this.companyCity();
            chequeTmp.MonthName             = this.generateMonthName(mthOfYr(chequeDate), LANGUAGE_ES);
            chequeTmp.DayName               = this.numeralsToStr(dayOfMth(chequeDate));
        }

        if (chequeReportType == ChequeFormType::DEStyle)
        {
            if (bankChequeLayout.CompanyName)
            {
                chequeTmp.CompanyCity       = strLine(companyInfoOrg.postalAddress().Address,1);
            }
        }

        // <GBR>
		const str LANGUAGE_BR = 'pt-br';
        if (BrazilParameters::isEnabled() && chequeReportType == ChequeFormType::BRStyle)
        {
            chequeTmp.ChequeDate        = tmpChequePrintout.TransDate;
            chequeTmp.CompanyCity       = CompanyInfo::find().postalAddress().City;
            chequeTmp.MonthName         = this.generateMonthName(mthOfYr(chequeDate), LANGUAGE_BR);
        }
        // </GBR>

        chequeTmp.CurrencyTxt               = tmpChequePrintout.CurrencyTxt;
        chequeTmp.micrLine                  = tmpChequePrintout.displayMICRLine();
        chequeTmp.RecipientName             = tmpChequePrintout.RecipientName;
        chequeTmp.RegistrationNum           = tmpChequePrintout.RegistrationNum;
        chequeTmp.SlipTxt                   = tmpChequePrintout.SlipTxt;
        chequeTmp.SlipTop1                  = tmpChequePrintout.SlipTop1;
        chequeTmp.SlipTop2                  = tmpChequePrintout.SlipTop2;
        chequeTmp.NumOfSlips                = tmpChequePrintout.NumOfSlips;
        chequeTmp.ChequeTopDrop             = tmpChequePrintout.ChequeTopDrop;

        if (tmpChequePrintout.NumOfSlips > 0 && chequeReportType != ChequeFormType::DKStyle)
        {
            chequeTmp.ChequeTop             = tmpChequePrintout.ChequeTop;
        }
        else
        {
            chequeTmp.ChequeTop             = tmpChequePrintout.ChequeTop + 1;
        }

        chequeTmp.Numerals2LetterPart1      = this.numerals2LetterPart1();
        chequeTmp.Numerals2LetterPart2      = this.numerals2LetterPart2();
        chequeTmp.ChequeNumMethod           = isPreprinted;
        chequeTmp.AccountId                 = tmpChequePrintout.AccountId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertChequeTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Insert the data into the <c>chequeTmp</c> temporary table instance.
    /// </summary>
    protected void insertChequeTmp()
    {
        this.populateChequeTmp();

        chequeTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>numerals2LetterPart1</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts a numeral to a string.
    /// </summary>
    /// <returns>
    /// A converted string.
    /// </returns>
    protected TempStr numerals2LetterPart1()
    {
        TempStr tempStr;

        if (chequeReportType == ChequeFormType::UKStyle)
        {
            numeralCnt = 80;
        }
        else if (chequeReportType == ChequeFormType::DEStyle)
        {
            numeralCnt = 45;
        }

        if (strLen(numerals2Letter) > numeralCnt)
        {
            if (strCmp(subStr(numerals2Letter, numeralCnt + 1, 1),' '))
            {
                startNumerals2LetterPart2 = strFind(numerals2Letter, ' ', numeralCnt, -numeralCnt) + 1;
                tempStr = subStr(numerals2Letter, 1, startNumerals2LetterPart2 - 1);
            }
            else
            {
                tempStr = subStr(numerals2Letter, 1, numeralCnt);
            }
        }
        else
        {
            tempStr = numerals2Letter;
        }

        return tempStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numerals2LetterPart2</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a numeral to a string.
    /// </summary>
    /// <returns>
    ///    A converted string.
    /// </returns>
    protected TempStr numerals2LetterPart2()
    {
        TempStr tempStr;

        if (chequeReportType == ChequeFormType::CAStyle)
        {
            numeralCnt = 80;
        }
        else if (chequeReportType == ChequeFormType::DEStyle)
        {
            numeralCnt = 45;
        }

        if (strLen(numerals2Letter) > numeralCnt)
        {
            tempStr = subStr(numerals2Letter, startNumerals2LetterPart2, numeralCnt);
        }

        return tempStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numeralsToStr</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a numeral value to a string.
    /// </summary>
    /// <param name="_num">
    ///    A <c>num</c> value to use to convert from a numeral value into a string.
    /// </param>
    /// <returns>
    ///    converted numeral value.
    /// </returns>
    private TempStr numeralsToStr(int _num)
    {
        str   text;
        #Define.text_1('Uno')
        #Define.text_21('Ventiuno')
        #Define.text_31('Treinta y uno')

        switch (_num)
        {
            case 1:
                text = #text_1;
                break;
            case 21:
                text = #text_21;
                break;
            case 31:
                text = #text_31;
                break;
            default:
                text = strDel(numeralsToTxt_ES(_num,GenderMaleFemale::Male),1,3);
                text = strDel(text,strLen(text)-2,3);
                text = subStr(text,1,1) + strLwr(subStr(text,2,strLen(text)-1));
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Provides the ability to write the report business logic. This method will be called by SSRS at
    ///    runtime. This method should compute data and populate the data tables that will be returned to
    ///    SSRS. Note that this is a framework class. Customizing this class may cause problems with future
    ///    upgrades to the software.
    /// </remarks>
    public void processReport()
    {
        this.initTmpChequePrintout();
        this.fetch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets up values for the temporary table.
    /// </summary>
    protected void setValues()
    {
        if (bankChequeLayout.CompanyName)
        {
            companyAddr = companyInfoOrg.postalAddress().Address;
        }
        else
        {
            companyAddr = #emptyString;
        }

        if (bankChequeLayout.BankName)
        {
            bankName = BankAccountTable::find(tmpChequePrintout.AccountId).Name;
        }
        else
        {
            bankName = #emptyString;
        }

        currency = Currency::find(tmpChequePrintout.CurrencyCode).CurrencyCodeISO;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>