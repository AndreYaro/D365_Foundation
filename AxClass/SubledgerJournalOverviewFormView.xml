<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJournalOverviewFormView</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SubledgerJournalOverviewFormView</c> class is the subledger journal overview form view class.
/// </summary>
class SubledgerJournalOverviewFormView
{
    #SubledgerJournal

    FormRun                                 subledgerOverviewFormRun;

    // Datasources
    FormDataSource                          subledgerJournalAccountEntryDataSource;
    FormDataSource                          generalJournalAccountEntryDataSource;
    FormDataSource                          subledgerJournalEntryDataSource;

    // View model
    SubledgerJournalOverviewViewModel       subledgerJournalOverviewViewModel;

    FormStringControl                       voucherNumberControl;
    FormStringControl                       accountingCurrencyControl;
    FormStringControl                       reportingCurrencyControl;

    SegmentedEntryControl                   ledgerDimensionControl;

    FormRealControl                         transactionCurrencyTotalDebitControl;
    FormRealControl                         transactionCurrencyTotalCreditControl;

    FormRealControl                         accountingCurrencyDebitControl;
    FormRealControl                         accountingCurrencyCreditControl;
    FormRealControl                         reportingCurrencyDebitControl;
    FormRealControl                         reportingCurrencyCreditControl;

    FormGroupControl                        accountingCurrencyTotalGroupControl;
    FormGroupControl                        reportingCurrencyTotalGroupControl;

    FormFunctionButtonControl               viewOriginalDocumentControl;
    FormFunctionButtonControl               transactionLogControl;
    FormFunctionButtonControl               postedSalesTaxControl;

    FormComboBoxControl                     transactionTotalCurrencyControl;

    SubledgerOverviewFormViewExtensionMap   subledgerOverviewFormViewExtensionMap;

    // <GEERU>
    #ISOCountryRegionCodes
    UnknownNoYes                            correspondenceEnabled_RU;
    FormComboBoxControl                     showTransModeControl_RU;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changedGeneralAccountEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the changed general journal account entry event handler.
    /// </summary>
    delegate void changedGeneralAccountEntryEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changedSubledgerAccEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the changed subledger journal account entry event handler.
    /// </summary>
    delegate void changedSubledgerAccEntryEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changedSubledgerJourEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the changed subledger journal entry event handler.
    /// </summary>
    delegate void changedSubledgerJourEntryEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changedTotalCurrencyEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the changed total currency code event handler.
    /// </summary>
    delegate void changedTotalCurrencyEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the active <c>GeneralJournalAccountEntry</c> record.
    /// </summary>
    /// <param name="_generalJournalAccountEntry">
    /// The <c>GeneralJournalAccountEntry</c> record to which to change.
    /// </param>
    public void changeGeneralJournalAccountEntry(GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        this.changingGeneralAccountEntryEventHandler();
        subledgerJournalOverviewViewModel.generalJournalAccountEntryActivated(_generalJournalAccountEntry);
        this.changedGeneralAccountEntryEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSubledgerJournalAccountEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the active <c>SubledgerJournalAccountEntry</c> record.
    /// </summary>
    /// <param name="_subledgerJournalAccountEntry">
    /// The <c>SubledgerJournalAccountEntry</c> record to which to change.
    /// </param>
    public void changeSubledgerJournalAccountEntry(SubledgerJournalAccountEntry _subledgerJournalAccountEntry)
    {
        this.changingSubledgerAccEntryEventHandler();
        subledgerJournalOverviewViewModel.subledgerJournalAccountEntryActivated(_subledgerJournalAccountEntry);
        this.changedSubledgerAccEntryEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeSubledgerJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the active <c>SubledgerJournalEntry</c> record.
    /// </summary>
    /// <param name="_subledgerJournalEntry">
    /// The <c>SubledgerJournalEntry</c> record to which to change.
    /// </param>
    public void changeSubledgerJournalEntry(SubledgerJournalEntry _subledgerJournalEntry)
    {
        this.changingSubledgerJourEntryEventHandler();
        subledgerJournalOverviewViewModel.subledgerJournalEntryActivated(_subledgerJournalEntry);
        this.changedSubledgerJourEntryEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeTotalCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Changes the total currency code.
    /// </summary>
    /// <param name="_transactionTotalCurrencyControl">
    /// The form combobox control that raised the event.
    /// </param>
    /// <returns>
    /// The selection index of the total currency combobox.
    /// </returns>
    public int changeTotalCurrency(FormComboBoxControl  _transactionTotalCurrencyControl)
    {
        int             selection;
        CurrencyCode    selectedCurrency;

        this.changingTotalCurrencyEventHandler();

        selectedCurrency = _transactionTotalCurrencyControl.valueStr();

        subledgerJournalOverviewViewModel.totalCurrencyCodeChanged(selectedCurrency);

        this.showZeroTransactionTotals();

        selection = _transactionTotalCurrencyControl.selection();

        this.changedTotalCurrencyEventHandler();

        return selection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>changingGeneralAccountEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the changed general journal account entry event handler.
    /// </summary>
    delegate void changingGeneralAccountEntryEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changingSubledgerAccEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the changing subledger journal account entry event handler.
    /// </summary>
    delegate void changingSubledgerAccEntryEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changingSubledgerJourEntryEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the changed subledger journal entry event handler.
    /// </summary>
    delegate void changingSubledgerJourEntryEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>changingTotalCurrencyEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the changing total currency code event handler.
    /// </summary>
    delegate void changingTotalCurrencyEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>correspondenceEnabled_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns whether the correspondence enabled or not.
    /// </summary>
    /// <returns>
    ///   True if enabled; otherwize - false.
    /// </returns>
    public boolean correspondenceEnabled_RU()
    {
        if (correspondenceEnabled_RU == UnknownNoYes::Unknown)
        {
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && LedgerParameters::find().Correspondence_RU)
            {
                correspondenceEnabled_RU = UnknownNoYes::Yes;
            }
            else
            {
                correspondenceEnabled_RU = UnknownNoYes::No;
            }
        }

        return correspondenceEnabled_RU == UnknownNoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasource_beforeExecuteQuery_RU</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Actions performed before executeQuery
    /// </summary>
    public void datasource_beforeExecuteQuery_RU()
    {
        str filterByEnum(LedgerBondShowTransMode_RU _enum)
        {
            switch (_enum)
            {
                case LedgerBondShowTransMode_RU::ShowDebitOnly:
                    return queryValue(DebitCredit::Debit);

                case LedgerBondShowTransMode_RU::ShowCreditOnly:
                    return queryValue(DebitCredit::Credit);
            }

            return SysQuery::valueUnlimited();
        }

        if (this.correspondenceEnabled_RU() && showTransModeControl_RU)
        {
            findOrCreateRange_W(subledgerJournalAccountEntryDataSource.query().dataSourceTable(tableNum(SubledgerJournalAccountEntry)),
                fieldNum(SubledgerJournalAccountEntry, Side), filterByEnum(showTransModeControl_RU.selection()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>SubledgerJournalOverviewFormView</c> class.
    /// </summary>
    public void init()
    {
        // Initialize form data source
        this.initDataSource();

        // Initialize view model
        this.initSubledgerJournalOverviewViewModel();

        // Initialize controls
        this.initControls();

        // Init extension map
        this.initExtensionMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the ledger dimension account controller.
    /// </summary>
    protected void initControls()
    {
        this.registerOverloadMethods();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the form data sources.
    /// </summary>
    protected void initDataSource()
    {
        subledgerJournalAccountEntryDataSource = subledgerOverviewFormRun.dataSource(#SubledgerJournalAccountEntry);
        generalJournalAccountEntryDataSource = subledgerOverviewFormRun.dataSource(#GeneralJournalAccountEntry);
        subledgerJournalEntryDataSource = subledgerOverviewFormRun.dataSource(#SubledgerJournalEntry);

        subledgerJournalEntryDataSource.query().dataSourceTable(tableNum(SubledgerJournalEntry)).addOrderByField(fieldNum(SubledgerJournalEntry, Voucher));
        subledgerJournalEntryDataSource.query().dataSourceTable(tableNum(SubledgerJournalEntry)).addOrderByField(fieldNum(SubledgerJournalEntry, JournalNumber));
        subledgerJournalEntryDataSource.query().dataSourceTable(tableNum(SubledgerJournalEntry)).addOrderByField(fieldNum(SubledgerJournalEntry, Type));
        subledgerJournalAccountEntryDataSource.query().dataSourceTable(tableNum(SubledgerJournalAccountEntry)).addOrderByField(fieldNum(SubledgerJournalAccountEntry, PostingType));
        subledgerJournalAccountEntryDataSource.query().dataSourceTable(tableNum(SubledgerJournalAccountEntry)).addOrderByField(fieldNum(SubledgerJournalAccountEntry, TransactionCurrency));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initExtensionMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the extension map of the subledger journal overview form view.
    /// </summary>
    protected void initExtensionMap()
    {
        SubledgerOverviewFormViewExtMapEnum extensionMapEnumerator;
        SubledgerOverviewFormViewExtension  subledgerOverviewFormViewExtension;
        SourceDocumentExtensionKey          extensionKey;
        SubledgerOverviewViewModelExtension subledgerOverviewViewModelExtension;

        subledgerOverviewFormViewExtensionMap = SubledgerOverviewFormViewExtensionMap::newFromSublegerJournalOverviewFormView(this);

        if (subledgerOverviewFormViewExtensionMap)
        {
            extensionMapEnumerator = subledgerOverviewFormViewExtensionMap.getEnumerator();

            while (extensionMapEnumerator.moveNext())
            {
                extensionKey = extensionMapEnumerator.currentKey();
                subledgerOverviewFormViewExtension = extensionMapEnumerator.currentValue();

                subledgerOverviewViewModelExtension = SourceDocumentExtensionFactory::newObject(classNum(SubledgerOverviewViewModelExtension), extensionKey, false);
                subledgerOverviewViewModelExtension.parmSubledgerOverviewFormViewExtension(subledgerOverviewFormViewExtension);
                subledgerOverviewViewModelExtension.parmSubledgerJournalOverviewViewModel(subledgerJournalOverviewViewModel);
                subledgerOverviewViewModelExtension.initialize();

                subledgerOverviewFormViewExtension.parmSubledgerOverviewViewModelExtension(subledgerOverviewViewModelExtension);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializedViewEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the initialized view event handler delegate.
    /// </summary>
    delegate void initializedViewEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the initialize view event.
    /// </summary>
    public void initializeView()
    {
        this.initializingViewEventHandler();

        this.initView();

        this.initializedViewEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializingViewEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Represents the initializing view event handler.
    /// </summary>
    delegate void initializingViewEventHandler()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSubledgerJournalOverviewViewModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the subledger journal overview view model.
    /// </summary>
    protected void initSubledgerJournalOverviewViewModel()
    {
        subledgerJournalOverviewViewModel = SubledgerJournalOverviewViewModel::newFromSubledgerJournalOverviewFormView(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the initialize view event.
    /// </summary>
    protected void initView()
    {
        if (subledgerOverviewFormRun.args().dataset() == tableNum(GeneralJournalEntry))
        {
            subledgerJournalOverviewViewModel.generalJournalEntryActivated();
        }
        else
        {
            throw error("@SYS132237");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initViewForGeneralJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the view for the general journal entry.
    /// </summary>
    public void initViewForGeneralJournalEntry()
    {
        this.setTotalCurrencies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initViewForShowAllTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the view for the show all transactions combobox.
    /// </summary>
    private void initViewForShowAllTransactions()
    {
        voucherNumberControl.visible(true);
        this.setTotalCurrencies();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initViewForSubledgerJournalEntry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the view for the subledger journal entry.
    /// </summary>
    public void initViewForSubledgerJournalEntry()
    {
        SourceDocumentHeader    sourceDocumentHeader;

        sourceDocumentHeader = subledgerJournalOverviewViewModel.parmActiveSourceDocumentHeader();

        if (sourceDocumentHeader.SourceRelationType == tableNum(VendPackingSlipJour) ||
            sourceDocumentHeader.SourceRelationType == tableNum(PurchTable) ||
            sourceDocumentHeader.SourceRelationType == tableNum(PurchReqTable))
        {
            postedSalesTaxControl.enabled(false);
        }
        else
        {
            postedSalesTaxControl.enabled(true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set accounting currency control.
    /// </summary>
    /// <param name="_accountingCurrencyControl">
    /// The string control that raised the event.
    /// </param>
    /// <returns>
    /// The form string control.
    /// </returns>
    public FormStringControl parmAccountingCurrencyControl(
        FormStringControl _accountingCurrencyControl = accountingCurrencyControl)
    {
        accountingCurrencyControl = _accountingCurrencyControl;

        return accountingCurrencyControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyCreditControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set accounting currency credit total control.
    /// </summary>
    /// <param name="_accountingCurrencyCreditControl">
    /// The real control that raised the event.
    /// </param>
    /// <returns>
    /// The form real control.
    /// </returns>
    public FormRealControl parmAccountingCurrencyCreditControl(
        FormRealControl _accountingCurrencyCreditControl = accountingCurrencyCreditControl)
    {
        accountingCurrencyCreditControl = _accountingCurrencyCreditControl;

        return accountingCurrencyCreditControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyDebitControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set accounting currency debit total control.
    /// </summary>
    /// <param name="_accountingCurrencyDebitControl">
    /// The real control that raised the event.
    /// </param>
    /// <returns>
    /// The form real control.
    /// </returns>
    public FormRealControl parmAccountingCurrencyDebitControl(
        FormRealControl _accountingCurrencyDebitControl = accountingCurrencyDebitControl)
    {
        accountingCurrencyDebitControl = _accountingCurrencyDebitControl;

        return accountingCurrencyDebitControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingCurrencyTotalGroupControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set accounting currency group control.
    /// </summary>
    /// <param name="_accountingCurrencyTotalGroupControl">
    /// The group control that raised the event.
    /// </param>
    /// <returns>
    /// The form group control.
    /// </returns>
    public FormGroupControl parmAccountingCurrencyTotalGroupControl(
        FormGroupControl _accountingCurrencyTotalGroupControl = accountingCurrencyTotalGroupControl)
    {
        accountingCurrencyTotalGroupControl = _accountingCurrencyTotalGroupControl;

        return accountingCurrencyTotalGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the form run object.
    /// </summary>
    /// <param name="_subledgerOverviewFormRun">
    /// The subledger journal overview formRun instance.
    /// </param>
    /// <returns>
    /// The form run object.
    /// </returns>
    public FormRun parmFormRun(FormRun _subledgerOverviewFormRun = subledgerOverviewFormRun)
    {
        subledgerOverviewFormRun = _subledgerOverviewFormRun;

        return subledgerOverviewFormRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmGeneralJournalDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set general journal account entry data source.
    /// </summary>
    /// <param name="_generalJournalAccountEntryDataSource">
    /// The data source.
    /// </param>
    /// <returns>
    /// The general journal account entry form data source.
    /// </returns>
    public FormDataSource parmGeneralJournalDatasource(
        FormDataSource _generalJournalAccountEntryDataSource = generalJournalAccountEntryDataSource)
    {
        generalJournalAccountEntryDataSource = _generalJournalAccountEntryDataSource;

        return generalJournalAccountEntryDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set ledger dimension segmented entry control.
    /// </summary>
    /// <param name="_ledgerDimensionControl">
    /// The segmented entry control that raised the event.
    /// </param>
    /// <returns>
    /// The segmented entry control.
    /// </returns>
    public SegmentedEntryControl parmLedgerDimensionControl(
        SegmentedEntryControl _ledgerDimensionControl = ledgerDimensionControl)
    {
        ledgerDimensionControl = _ledgerDimensionControl;

        return ledgerDimensionControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostedSalesTaxControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set posted sales tax button control.
    /// </summary>
    /// <param name="_postedSalesTaxControl">
    /// The button control that raised the event.
    /// </param>
    /// <returns>
    /// The form button control.
    /// </returns>
    public FormFunctionButtonControl parmPostedSalesTaxControl(
        FormFunctionButtonControl _postedSalesTaxControl = postedSalesTaxControl)
    {
        postedSalesTaxControl = _postedSalesTaxControl;

        return postedSalesTaxControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the reporting currency code control.
    /// </summary>
    /// <param name="_reportingCurrencyControl">
    /// The string control that raised the event.
    /// </param>
    /// <returns>
    /// The form string control.
    /// </returns>
    public FormStringControl parmReportingCurrencyControl(
        FormStringControl _reportingCurrencyControl = reportingCurrencyControl)
    {
        reportingCurrencyControl = _reportingCurrencyControl;

        return reportingCurrencyControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyCreditControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set reporting currency credit total control.
    /// </summary>
    /// <param name="_reportingCurrencyCreditControl">
    /// The real control that raised the event.
    /// </param>
    /// <returns>
    /// The form real control.
    /// </returns>
    public FormRealControl parmReportingCurrencyCreditControl(
        FormRealControl _reportingCurrencyCreditControl = reportingCurrencyCreditControl)
    {
        reportingCurrencyCreditControl = _reportingCurrencyCreditControl;

        return reportingCurrencyCreditControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyDebitControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set reporting currency debit total control.
    /// </summary>
    /// <param name="_reportingCurrencyDebitControl">
    /// The real control that raised the event.
    /// </param>
    /// <returns>
    /// The form real control.
    /// </returns>
    public FormRealControl parmReportingCurrencyDebitControl(
        FormRealControl _reportingCurrencyDebitControl = reportingCurrencyDebitControl)
    {
        reportingCurrencyDebitControl = _reportingCurrencyDebitControl;

        return reportingCurrencyDebitControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportingCurrencyTotalGroupControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set reporting currency group control.
    /// </summary>
    /// <param name="_reportingCurrencyTotalGroupControl">
    /// The group control that raised the event.
    /// </param>
    /// <returns>
    /// The form group control.
    /// </returns>
    public FormGroupControl parmReportingCurrencyTotalGroupControl(
        FormGroupControl _reportingCurrencyTotalGroupControl = reportingCurrencyTotalGroupControl)
    {
        reportingCurrencyTotalGroupControl = _reportingCurrencyTotalGroupControl;

        return reportingCurrencyTotalGroupControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowTransModeControl_RU</Name>
				<Source><![CDATA[
    public FormComboBoxControl parmShowTransModeControl_RU(
        FormComboBoxControl _showTransModeControl_RU = showTransModeControl_RU)
    {
        showTransModeControl_RU = _showTransModeControl_RU;

        return showTransModeControl_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubledgerDatasource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set subledger journal account entry data source.
    /// </summary>
    /// <param name="_subledgerJournalAccountEntryDataSource">
    /// The button control that raised the event.
    /// </param>
    /// <returns>
    /// The subledger journal account entry form data source.
    /// </returns>
    public FormDataSource parmSubledgerDatasource(
        FormDataSource _subledgerJournalAccountEntryDataSource = subledgerJournalAccountEntryDataSource)
    {
        subledgerJournalAccountEntryDataSource = _subledgerJournalAccountEntryDataSource;

        return subledgerJournalAccountEntryDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubledgerJournalEntryDataSource</Name>
				<Source><![CDATA[
    public FormDataSource parmSubledgerJournalEntryDataSource(FormDataSource _subledgerJournalEntryDataSource = subledgerJournalEntryDataSource)
    {
        subledgerJournalEntryDataSource = _subledgerJournalEntryDataSource;

        return subledgerJournalEntryDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSubledgerJournalOverviewViewModel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the instance of the <c>SubledgerJournalOverviewViewModel</c> class.
    /// </summary>
    /// <returns>
    /// The instance of the <c>SubledgerJournalOverviewViewModel</c> class.
    /// </returns>
    public SubledgerJournalOverviewViewModel parmSubledgerJournalOverviewViewModel()
    {
        return subledgerJournalOverviewViewModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionLogControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set transaction log control
    /// </summary>
    /// <param name="_transactionLogControl">
    /// The button control that raised the event.
    /// </param>
    /// <returns>
    /// The form transaction log control.
    /// </returns>
    public FormFunctionButtonControl parmTransactionLogControl(
        FormFunctionButtonControl _transactionLogControl = transactionLogControl)
    {
        transactionLogControl = _transactionLogControl;

        return transactionLogControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionTotalCurrencyControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the transaction total currency code control.
    /// </summary>
    /// <param name="_transactionTotalCurrencyControl">
    /// The combobox control that raised the event.
    /// </param>
    /// <returns>
    /// The form combobox control.
    /// </returns>
    public FormComboBoxControl parmTransactionTotalCurrencyControl(
        FormComboBoxControl _transactionTotalCurrencyControl = transactionTotalCurrencyControl)
    {
        transactionTotalCurrencyControl = _transactionTotalCurrencyControl;

        return transactionTotalCurrencyControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyTotalCreditControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set transaction currency credit total control.
    /// </summary>
    /// <param name="__transactionCurrencyCreditTotalControl">
    /// The real control that raised the event.
    /// </param>
    /// <returns>
    /// The form real control.
    /// </returns>
    public FormRealControl parmTransactionCurrencyTotalCreditControl(
        FormRealControl _transactionCurrencyTotalCreditControl = transactionCurrencyTotalCreditControl)
    {
        transactionCurrencyTotalCreditControl = _transactionCurrencyTotalCreditControl;

        return transactionCurrencyTotalCreditControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyTotalDebitControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set transaction currency debit total control.
    /// </summary>
    /// <param name="__transactionCurrencyDebitTotalControl">
    /// The real control that raised the event.
    /// </param>
    /// <returns>
    /// The form real control.
    /// </returns>
    public FormRealControl parmTransactionCurrencyTotalDebitControl(
        FormRealControl _transactionCurrencyTotalDebitControl = transactionCurrencyTotalDebitControl)
    {
        transactionCurrencyTotalDebitControl = _transactionCurrencyTotalDebitControl;

        return transactionCurrencyTotalDebitControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmViewOriginalDocumentControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the view original document button control.
    /// </summary>
    /// <param name="_viewOriginalDocumentControl">
    /// The button control that raised the event.
    /// </param>
    /// <returns>
    /// The form button control.
    /// </returns>
    public FormFunctionButtonControl parmViewOriginalDocumentControl(
        FormFunctionButtonControl _viewOriginalDocumentControl = viewOriginalDocumentControl)
    {
        viewOriginalDocumentControl = _viewOriginalDocumentControl;

        return viewOriginalDocumentControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVoucherNumberControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the voucher number control.
    /// </summary>
    /// <param name="_voucherNumberControl">
    /// The string control that raised the event.
    /// </param>
    /// <returns>
    /// The form string control.
    /// </returns>
    public FormStringControl parmVoucherNumberControl(
        FormStringControl _voucherNumberControl = voucherNumberControl)
    {
        voucherNumberControl = _voucherNumberControl;

        return voucherNumberControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postedSalesTaxButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Displays the posted sales tax form.
    /// </summary>
    /// <param name="_postedSalesTaxControl">
    /// The button control that raised the event.
    /// </param>
    private void postedSalesTaxButtonClicked(FormFunctionButtonControl _postedSalesTaxControl)
    {
        Args                    args;
        SourceDocumentHeader    sourceDocumentHeader;

        sourceDocumentHeader = subledgerJournalOverviewViewModel.parmActiveSourceDocumentHeader();

        args = new Args();

        switch (sourceDocumentHeader.SourceRelationType)
        {
            case tableNum(CustInvoiceJour),tableNum(CustInvoiceTable) :
                args.record(CustInvoiceTable::findSourceDocumentHeader(sourceDocumentHeader.RecId).custInvoiceJour());
                break;
            case tableNum(VendInvoiceJour), tableNum(VendInvoiceInfoTable):
                args.record(VendInvoiceJour::findSourceDocumentHeader(sourceDocumentHeader.RecId));
                break;
            case tableNum(TrvExpTable) :
                args.record(TrvExpTable::findBySourceDocumentHeader(sourceDocumentHeader.RecId));
                break;
            // <GEERU>
            case tableNum(EmplAdvLine_RU), tableNum(EmplAdvTable_RU):
                args.record(generalJournalAccountEntryDataSource.cursor());
                break;
            // </GEERU>

            case tableNum(TSTimesheetTable) :
                args.record(TSTimesheetTable::findBySourceDocument(sourceDocumentHeader.RecId));
                break;
            case tableNum(TSIntercompanyCost) :
                args.record(TSTimesheetTable::findRecId(TSIntercompanyCost::findBySourceDocumentHeader(sourceDocumentHeader.RecId).tsTimesheetTable));
                break;

            default :
                throw error("@SYS139175");
        }

        if (args.record())
        {
            //we need to pass caller here otherwise it will not work.
            args.caller(subledgerOverviewFormRun);

            new MenuFunction(menuitemDisplayStr(TaxTrans), MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOverloadMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the form control override methods.
    /// </summary>
    private void registerOverloadMethods()
    {
        transactionTotalCurrencyControl.registerOverrideMethod(methodStr(FormComboBoxControl, selectionChange),
                                                      methodStr(SubledgerJournalOverviewFormView, changeTotalCurrency),
                                                      this);

        viewOriginalDocumentControl.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked),
                                                      methodStr(SubledgerJournalOverviewFormView, viewOriginalDocumentButtonClicked),
                                                      this);

        transactionLogControl.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked),
                                                      methodStr(SubledgerJournalOverviewFormView, transactionLogButtonClicked),
                                                      this);

        postedSalesTaxControl.registerOverrideMethod(methodStr(FormFunctionButtonControl, clicked),
                                                      methodStr(SubledgerJournalOverviewFormView, postedSalesTaxButtonClicked),
                                                      this);
        // <GEERU>
        if (this.correspondenceEnabled_RU() && showTransModeControl_RU)
        {
            showTransModeControl_RU.registerOverrideMethod(methodStr(FormComboBoxControl, selectionChange),
                                                           methodStr(SubledgerJournalOverviewFormView, showTransModeControl_selectionChange_RU),
                                                           this);
        }
        // </GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTotalCurrencies</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the currencies for the transaction total amounts.
    /// </summary>
    public void setTotalCurrencies()
    {
        List            totalCurrencyList;
        ListEnumerator  totalCurrencyListEnumerator;

        this.updateCurrencyTotalGroupCaptions();

        totalCurrencyList = subledgerJournalOverviewViewModel.parmTotalCurrencyList();
        totalCurrencyListEnumerator = totalCurrencyList.getEnumerator();

        transactionTotalCurrencyControl.clear();

        //Add a blank value so users can show all currencies totaled together
        transactionTotalCurrencyControl.add("");

        while (totalCurrencyListEnumerator.moveNext())
        {
            transactionTotalCurrencyControl.add(totalCurrencyListEnumerator.current());
        }

        this.showZeroTransactionTotals();

        if (totalCurrencyList.elements() > 1)
        {
            transactionTotalCurrencyControl.selection(0);
            transactionTotalCurrencyControl.enabled(true);
        }
        else
        {
            transactionTotalCurrencyControl.selection(1);
            transactionTotalCurrencyControl.enabled(false);
        }

        subledgerJournalOverviewViewModel.parmActiveCurrencyCode(transactionTotalCurrencyControl.valueStr());
    }

]]></Source>
			</Method>
			<Method>
				<Name>showZeroTransactionTotals</Name>
				<Source><![CDATA[
    private void showZeroTransactionTotals()
    {
        boolean showZero;

        showZero = SubledgerJournalOverviewViewModel.parmActiveCurrencyCode() ? true : false;

        transactionCurrencyTotalDebitControl.showZero(showZero);
        transactionCurrencyTotalCreditControl.showZero(showZero);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showTransModeControl_selectionChange_RU</Name>
				<Source><![CDATA[
    private int showTransModeControl_selectionChange_RU(FormComboBoxControl  _control)
    {
        subledgerJournalEntryDataSource.executeQuery();
        return _control.selection();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCurrencyTotalGroupCaptions</Name>
				<Source><![CDATA[
    private void updateCurrencyTotalGroupCaptions()
    {
        Ledger  ledger;

        select firstonly accountingCurrency, reportingCurrency from ledger
            where ledger.name == subledgerJournalOverviewViewModel.parmActiveLedger().name;

        accountingCurrencyTotalGroupControl.caption(strfmt("@AccountingFramework:AccountingCurrencyWithCode", ledger.accountingCurrency));
        reportingCurrencyTotalGroupControl.caption(strfmt("@AccountingFramework:ReportingCurrencyWithCode", ledger.reportingCurrency));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the transaction log form.
    /// </summary>
    /// <param name="_transactionLogControl">
    /// The button control that raised the event.
    /// </param>
    private void transactionLogButtonClicked(FormFunctionButtonControl _transactionLogControl)
    {
        Args            args;

        args = new Args();
        args.record(subledgerJournalOverviewViewModel.parmActiveGeneralJournalAccountEntry());

        new MenuFunction(menuitemDisplayStr(TransactionLog), MenuItemType::Display).run(args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewOriginalDocumentButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the original document transaction form.
    /// </summary>
    /// <param name="_viewOriginalDocumentControl">
    /// The button control that raised the event.
    /// </param>
    private void viewOriginalDocumentButtonClicked(FormFunctionButtonControl _viewOriginalDocumentControl)
    {
        MenuFunction         menuFunction;
        SourceDocumentHeader sourceDocumentHeader;
        Args                 args = new Args();
        TSTimesheetTable    tsTimesheetTable;

        sourceDocumentHeader = subledgerJournalOverviewViewModel.parmActiveSourceDocumentHeader();

        switch (sourceDocumentHeader.SourceRelationType)
        {
            case tableNum(TSTimesheetTable):
            case tableNum(TSIntercompanyCost):
                // Opens the TSTimesheetEntry form
                menuFunction = new MenuFunction(menuitemDisplayStr(TSTimesheetTableForView), MenuItemType::Display);
                // do a crossCompany lookup. The generated SourceDocID will be unique across companies so doing a crossCompany
                // select will return the unique TSTimesheetTable record
                if (sourceDocumentHeader.SourceRelationType == tableNum(TSTimesheetTable))
                {
                    tsTimesheetTable = TSTimesheetTable::findBySourceDocument(sourceDocumentHeader.RecId);
                }
                else
                {
                    tsTimesheetTable = TSTimesheetTable::findRecId(TSIntercompanyCost::findBySourceDocumentHeader(sourceDocumentHeader.RecId).tsTimesheetTable);
                }

                changecompany(tsTimesheetTable.company())
                {
                    args.record(tsTimesheetTable);
                    menuFunction.run(args);
                }
                // exit now
                return;
            case tableNum(CustInvoiceJour), tableNum(CustInvoiceTable):
                // Opens the CustFreeInvoice form
                menuFunction = new MenuFunction(menuitemDisplayStr(CustInvoiceJournal), MenuItemType::Display);
                args.record(CustInvoiceJour::findFromSourceDocumentHeader(sourceDocumentHeader.RecId));
                break;
            case tableNum(PurchTable) :
                // Opens the PurchTable form
                menuFunction = new MenuFunction(menuitemDisplayStr(PurchTable), MenuItemType::Display);
                //parmEnumType and parmEnum is required here otherwise; it will open the form in add mode.
                args.parmEnumType(enumNum(FormOpenMode));
                args.parmEnum(FormOpenMode::ForEdit);
                args.record(PurchTable::findSourceDocumentHeader(sourceDocumentHeader.RecId));
                break;
            case tableNum(PurchReqTable):
                // Opens the PurchReqTable form
                menuFunction = new MenuFunction(menuitemDisplayStr(PurchReqTable), MenuItemType::Display);
                //parmEnumType and parmEnum is required here otherwise; it will open the form in add mode.
                args.parmEnumType(enumNum(PurchReqFormMode));
                args.parmEnum(PurchReqFormMode::Normal);
                args.record(PurchReqTable::findBySourceDocumentHeader(sourceDocumentHeader.RecId));
                break;
            case tableNum(VendInvoiceJour), tableNum(VendInvoiceInfoTable):
                // Opens the VendInvoiceJournal form
                menuFunction = new MenuFunction(menuitemDisplayStr(VendInvoiceJournal), MenuItemType::Display);
                args.record(VendInvoiceJour::findSourceDocumentHeader(sourceDocumentHeader.RecId));
                break;
            case tableNum(TrvExpTable) :
                // Opens the TrvExpenses form.
                menuFunction = new MenuFunction(menuitemDisplayStr(TrvExpenses), MenuItemType::Display);
                args.record(TrvExpTable::findBySourceDocumentHeader(sourceDocumentHeader.RecId));
                break;
            case tableNum(VendPackingSlipJour):
                // Opens the VendPackingSlipJournal form
                menuFunction = new MenuFunction(menuitemDisplayStr(VendPackingSlipJournal), MenuItemType::Display);
                args.record(VendPackingSlipJour::findBySourceDocumentHeader(sourceDocumentHeader.RecId));
                break;
            // <GEERU>
            case tableNum(EmplAdvLine_RU) :
                menuFunction = new MenuFunction(menuitemDisplayStr(EmplAdvTable_RU), MenuItemType::Display);
                args.record(EmplAdvLine_RU::findSourceDocumentHeader(sourceDocumentHeader.RecId));
                break;
            // </GEERU>
            case tableNum(PayrollPayStatement):
                // Opens the PayrollPayStatement form
                menuFunction = new MenuFunction(menuitemDisplayStr(PayrollPayStatement), MenuItemType::Display);
                args.record(PayrollPayStatement::findBySourceDocumentHeader(sourceDocumentHeader.RecId));
                args.copyCallerQuery(CopyCallerQuery::Yes);
                break;

            default :
                throw error("@SYS139175");
        }

        if (menuFunction)
        {
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create an instance of <c>SubledgerJournalOverviewFormView</c> class.
    /// </summary>
    /// <returns>
    /// An instance of <c>SubledgerJournalOverviewFormView</c> class.
    /// </returns>
    protected static SubledgerJournalOverviewFormView construct()
    {
        return new SubledgerJournalOverviewFormView();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of the <c>SubledgerJournalOverviewFormView</c> class from a <c>FormRun</c>
    /// object.
    /// </summary>
    /// <param name="_formRun">
    /// The form run object.
    /// </param>
    /// <returns>
    /// An instance of <c>SubledgerJournalOverviewFormView</c> class.
    /// </returns>
    public static SubledgerJournalOverviewFormView newFromParameters(
        FormRun _formRun
        )
    {
        SubledgerJournalOverviewFormView    subledgerJournalOverviewFormView;

        Debug::assert(_formRun != null);
        Debug::assert(_formRun.name() == formStr(SubledgerJournalOverview));
        Debug::assert(_formRun.args().record().RecId != 0);

        subledgerJournalOverviewFormView = SubledgerJournalOverviewFormView::construct();
        subledgerJournalOverviewFormView.parmFormRun(_formRun);

        Debug::assert(subledgerJournalOverviewFormView != null);

        return subledgerJournalOverviewFormView;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>