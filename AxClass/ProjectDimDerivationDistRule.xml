<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectDimDerivationDistRule</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjectDimDerivationDistRule</c> class is a delegate class that is used in the
/// <c>DimensionDerivationRule</c> subclasses to handle project related source document line items.
/// </summary>
public class ProjectDimDerivationDistRule
{
    DimensionDerivationRule dimensionDerivationRule;
    AccountingRule          accountingRule;
    SourceDocumentLineItem  sourceDocumentLineItem;
    DebitCredit             side;
    boolean                 oppositeAccount;
    MonetaryAmount          monetaryAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(DimensionDerivationRule _dimensionDerivationRule)
    {
        dimensionDerivationRule = _dimensionDerivationRule;
        accountingRule = _dimensionDerivationRule.parmAccountingRule();
        sourceDocumentLineItem = _dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem();
        side = _dimensionDerivationRule.parmAccountingRule().parmSide();
        oppositeAccount = false;
        monetaryAmount = accountingRule.parmMonetaryAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the source document line item is project related.
    /// </summary>
    /// <returns>
    /// True if source document line item is project related.
    /// </returns>
    public boolean parmIsProject()
    {
        boolean isProject;

        isProject = ProjectSourceDocumentLineItemHelper::canProcessProject(sourceDocumentLineItem) &&
            ProjectSourceDocumentLineItemHelper::isLedgerPostingTypeProject(accountingRule.parmLedgerPostingType());

        return isProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the ledger dimension allocation list by using the project setup.
    /// </summary>
    /// <param name="_ledgerDimensionAllocationList">
    /// The ledger dimension allocation list to populate.
    /// </param>
    /// <remarks>
    /// Use the <c>parmIsProject</c> method before you call the <c>populateDimAllocList</c> method to
    /// determine whether the ledger dimension allocation list can be populated from the project setup.
    /// </remarks>
    public void populateDimAllocList(LedgerDimensionAllocationList _ledgerDimensionAllocationList)
    {
        List                                    list;
        ListEnumerator                          listEnumerator;
        LedgerDimensionAllocation               ledgerDimensionAllocation;
        LedgerDimensionAccount                  ledgerDimension;
        AllocationFactor                        allocationFactor;
        ProjFundingSourceRefId                  projFundingSourceRefId;
        SourceDocumentLineRecId                 sourceDocumentLineRecId;
        RecVersion                              sourceDocumentLineRecVersion;
        SourceDocumentLine                      sourceDocumentLine;

        boolean useAllocation()
        {
            boolean canUseAllocation;

            canUseAllocation = !sourceDocumentLineItem.parmSourceDocumentLineItemConstraint().atMostOneDistribution();

            return canUseAllocation;
        }

        boolean useSourceDocumentAmountMatchDist()
        {
            boolean     useSourceDocumentAmountMatch;

            if (sourceDocumentLineItem.parmSourceDocumentLineMatchingList() &&
                sourceDocumentLineItem.parmSourceDocumentLineMatchingList().elements() != 0)
            {
                useSourceDocumentAmountMatch = true;
            }

            return useSourceDocumentAmountMatch;
        }

        if (!this.parmIsProject())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (ProjectSourceDocumentLineItemHelper::useTemplate(sourceDocumentLineItem, monetaryAmount))
        {
            return;
        }

        list = AccDistProcessorProjectExtension::ledgerDimensionAllocationList(sourceDocumentLineItem, accountingRule.parmAccountingPolicy());

        if (list)
        {
            sourceDocumentLine           = sourceDocumentLineItem.parmSourceDocumentLine();
            sourceDocumentLineRecId      = sourceDocumentLine.RecId;
            sourceDocumentLineRecVersion = sourceDocumentLine.RecVersion;

			SysTransactionScopeCache::set(classStr(AccDistProcessorProjectExtension), [sourceDocumentLineRecId, sourceDocumentLineRecVersion], list);

            listEnumerator = list.getEnumerator();
            while (listEnumerator.moveNext())
            {
                [ledgerDimension, allocationFactor, projFundingSourceRefId] = listEnumerator.current();

                ledgerDimensionAllocation = this.createAndInitializeLedgerDimensionAllocation(ledgerDimension, allocationFactor, projFundingSourceRefId);

                _ledgerDimensionAllocationList.addEnd(ledgerDimensionAllocation);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndInitializeLedgerDimensionAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates and initializes the new instance of <c>LedgerDimensionAllocation</c> for given parameters.
    /// </summary>
    /// <param name = "_ledgerDimension">The ledger dimension.</param>
    /// <param name = "_allocationFactor">The allocation factor.</param>
    /// <param name = "_projFundingSourceRefId">The funding source.</param>
    /// <returns>The new instance of <c>LedgerDimensionAllocation</c>.</returns>
    protected LedgerDimensionAllocation createAndInitializeLedgerDimensionAllocation(LedgerDimensionAccount _ledgerDimension, AllocationFactor _allocationFactor, ProjFundingSourceRefId _projFundingSourceRefId)
    {
        SourceDocumentLineItemIExpenseReport    sourceDocumentLineItemIExpenseReport;
        TrvExpTrans                             trvExpTrans;

        LedgerDimensionAllocation ledgerDimensionAllocation = LedgerDimensionAllocation::newFromParameters(_ledgerDimension, _allocationFactor, side, oppositeAccount);

        if (sourceDocumentLineItem is SourceDocumentLineItemIExpenseReport)
        {
            sourceDocumentLineItemIExpenseReport = sourceDocumentLineItem as SourceDocumentLineItemIExpenseReport;
            trvExpTrans = sourceDocumentLineItemIExpenseReport.parmExpenseLine() as TrvExpTrans;
            ledgerDimensionAllocation.parmLegalEntityRecId(CompanyInfo::findByCompany_IN(trvExpTrans.InterCompanyLE).RecId);
        }

        return ledgerDimensionAllocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimAllocListFromAllocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the ledger dimension allocation list by using the project setup.
    /// </summary>
    /// <param name="_list">
    /// The ledger dimension allocation list to populate.
    /// </param>
    /// <remarks>
    /// Use this method to determine whether the ledger dimension allocation
    /// list can be populated from the project setup.
    /// </remarks>
    /// <returns>
    /// The value of <c>allocatedList</c>.
    /// </returns>
    protected List populateDimAllocListFromAllocation(List _list)
    {
        SourceDocumentAmountMap                     sourceDocumentAmountMap;
        SourceDocumentAmount                        sourceDocumentAmount;
        LedgerAllocationController                  controller;
        LedgerAllocationItem                        baseItem;
        LedgerAllocationItem                        allocationItem;

        LedgerDimensionAccount                      projLedgerDimension;
        AllocationFactor                            projAllocationFactor;
        ProjFundingSourceRefId                      projFundingSourceRefId;

        List                                        allocatedList;
        List                                        tempAllocatedList;
        listEnumerator                              listEnumerator;
        List                                        allocationItemList;
        ListEnumerator                              allocationEnumerator;
        LedgerDimensionAccount                      ledgerDimension;
        LedgerDimensionDefaultAccount               ledgerDimensionDefaultAccount;
        DimensionDefault                            defaultDimension;
        MainAccount                                 mainAccount;
        MainAccountLegalEntity                      mainAccountLegalEntity;
        RecId                                       companyInfoRecId;
        boolean                                     allocated;
        RecId                                       mainAccountRecId;

        List                                        listAllocationFactor;
        List                                        listPercent;

        AllocationFactor                            allocationFactor;
        AllocationFactor                            totalAllocationFactor;
        AllocationFactor                            maxAllocationFactor;
        boolean                                     maxAllocationFactorFound;

        #SubledgerJournal

        void processCache(str _type)
        {
            monetaryAmount              currentMonetaryAmount;

            List                        newProjectDistributionList;
            List                        copyNewProjectDistributionList;
            List                        projectDistributionList;
            ListEnumerator              projectDistributionListEnumerator;
            AllocationFactor            projectAllocationFactor;
            AmountCur                   projectTransactionCurrencyAmount;

            List                        tempListAllocationFactor;
            List                        newTempListAllocationFactor;
            ListEnumerator              tempListAllocationFactorEnumerator;
            AllocationFactor            tempProjAllocationFactor;
            boolean                     tempProjAllocationFactorFound;
            container                   tempListPercentContainer;
            List                        tempListPercent;
            ListEnumerator              tempListPercentEnumerator;
            Percent                     tempPercent;
            SysDictEnum                 dictEnum = new SysDictEnum(enumnum(MonetaryAmount));

            AllocationFactor            cacheAllocationFactor;
            AllocationFactor            cacheTotalAllocationFactor;
            AllocationFactor            cacheMaxAllocationFactor;
            boolean                     cacheMaxAllocationFactorFound;

            currentMonetaryAmount = dictEnum.firstValue();
            do
            {
                if (SysTransactionScopeCache::get(_type, [sourceDocumentLineItem.parmSourceDocumentLine().RecId, currentMonetaryAmount]))
                {
                    tempListAllocationFactor = List::create(ListAllocationFactor.pack());

                    cacheTotalAllocationFactor = 0;
                    cacheMaxAllocationFactor = 0;

                    newProjectDistributionList = new List(Types::Container);
                    projectDistributionList = SysTransactionScopeCache::get(_type, [sourceDocumentLineItem.parmSourceDocumentLine().RecId, currentMonetaryAmount]);
                    projectDistributionListEnumerator = projectDistributionList.getEnumerator();
                    while (projectDistributionListEnumerator.moveNext())
                    {
                        [projectAllocationFactor, projectTransactionCurrencyAmount] = projectDistributionListEnumerator.current();

                        newTempListAllocationFactor = new List(Types::Container);
                        tempProjAllocationFactorFound = false;
                        tempListAllocationFactorEnumerator = tempListAllocationFactor.getEnumerator();
                        while (tempListAllocationFactorEnumerator.moveNext())
                        {
                            [tempProjAllocationFactor, tempListPercentContainer] = tempListAllocationFactorEnumerator.current();
                            if (!tempProjAllocationFactorFound && tempProjAllocationFactor == projectAllocationFactor)
                            {
                                tempProjAllocationFactorFound = true;
                                tempListPercent = List::create(tempListPercentContainer);
                                tempListPercentEnumerator = tempListPercent.getEnumerator();
                                while (tempListPercentEnumerator.moveNext())
                                {
                                    tempPercent = tempListPercentEnumerator.current();

                                    cacheAllocationFactor = round(projectAllocationFactor * tempPercent, AccountingDistributionConstants::AllocationFactorRoundingPrecision);
                                    cacheTotalAllocationFactor += cacheAllocationFactor;
                                    if (cacheMaxAllocationFactor == 0 || cacheAllocationFactor > cacheMaxAllocationFactor)
                                    {
                                        cacheMaxAllocationFactor = cacheAllocationFactor;
                                    }

                                    newProjectDistributionList.addEnd([cacheAllocationFactor, projectTransactionCurrencyAmount * tempPercent]);
                                }
                            }
                            else
                            {
                                newTempListAllocationFactor.addEnd([tempProjAllocationFactor, tempListPercentContainer]);
                            }
                        }
                        tempListAllocationFactor = List::create(newTempListAllocationFactor.pack());

                        if (!tempProjAllocationFactorFound)
                        {
                            cacheAllocationFactor = round(projectAllocationFactor, AccountingDistributionConstants::AllocationFactorRoundingPrecision);
                            cacheTotalAllocationFactor += cacheAllocationFactor;
                            if (cacheMaxAllocationFactor == 0 || cacheAllocationFactor > cacheMaxAllocationFactor)
                            {
                                cacheMaxAllocationFactor = cacheAllocationFactor;
                            }

                            newProjectDistributionList.addEnd([cacheAllocationFactor, projectTransactionCurrencyAmount]);
                        }
                    }

                    if (cacheTotalAllocationFactor != 1)
                    {
                        copyNewProjectDistributionList = new List(Types::Container);
                        projectDistributionListEnumerator = newProjectDistributionList.getEnumerator();
                        while (projectDistributionListEnumerator.moveNext())
                        {
                            [projectAllocationFactor, projectTransactionCurrencyAmount] = projectDistributionListEnumerator.current();
                            if (!cacheMaxAllocationFactorFound && cacheMaxAllocationFactor == projectAllocationFactor)
                            {
                                cacheMaxAllocationFactorFound = true;
                                copyNewProjectDistributionList.addEnd([projectAllocationFactor + 1 - cacheTotalAllocationFactor, projectTransactionCurrencyAmount]);
                            }
                            else
                            {
                                copyNewProjectDistributionList.addEnd([projectAllocationFactor, projectTransactionCurrencyAmount]);
                            }
                        }
                        newProjectDistributionList = List::create(copyNewProjectDistributionList.pack());
                    }

                    SysTransactionScopeCache::remove(_type, [sourceDocumentLineItem.parmSourceDocumentLine().RecId, currentMonetaryAmount]);
                    if (newProjectDistributionList.elements())
                    {
                        SysTransactionScopeCache::set(_type, [sourceDocumentLineItem.parmSourceDocumentLine().RecId, currentMonetaryAmount], newProjectDistributionList);
                    }
                }

                currentMonetaryAmount = dictEnum.nextValue(currentMonetaryAmount);
            }
            while (currentMonetaryAmount!= dictEnum.firstValue());
        }

        sourceDocumentAmountMap = sourceDocumentLineItem.parmSourceDocumentAmountMap();
        sourceDocumentAmount = sourceDocumentAmountMap.getSourceDocumentAmount(accountingRule.parmMonetaryAmount());

        // Initialize the allocated list
        allocatedList = new List(Types::Container);

        listAllocationFactor = new List(Types::Container);

        listEnumerator = _list.getEnumerator();

        companyInfoRecId = CompanyInfo::current();

        // Loop over unallocated entries
        while (listEnumerator.moveNext())
        {
            allocated = false;
            listPercent = new List(Types::Real);
            [projLedgerDimension, projAllocationFactor, projFundingSourceRefId] = listEnumerator.current();

            ledgerDimensionDefaultAccount = LedgerDefaultAccountHelper::getDefaultAccountFromLedgerDimension(projLedgerDimension);
            defaultDimension = LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(projLedgerDimension);
            mainAccount = LedgerDimensionFacade::getMainAccountFromLedgerDimension(ledgerDimensionDefaultAccount);

            // For a given main account, try to allocate
            if (mainAccount)
            {
                mainAccountLegalEntity = MainAccountLegalEntity::findByMainAccountLegalEntity(mainAccount.RecId, companyInfoRecId);
                if (mainAccountLegalEntity.AutoAllocate)
                {
                    baseItem = LedgerAllocationItem::constructFromLedgerDimension(ledgerDimensionDefaultAccount, defaultDimension);
                    baseItem.setAmounts(sourceDocumentAmount.parmAmount(), 0, 0, 0, 1);
                    controller = LedgerAllocationController::newNetDifference(sourceDocumentLineItem.parmTransactionCurrencyCode());
                    allocationItemList = controller.allocate(baseItem);

                    if (!allocationItemList.empty())
                    {
                        allocationEnumerator = allocationItemList.getEnumerator();

                        while (allocationEnumerator.moveNext())
                        {
                            allocationItem = allocationEnumerator.current();
                            mainAccountRecId = allocationItem.parmMainAccountId();
                            ledgerDimension = LedgerDimensionDefaultingEngine::getLedgerDimensionFromAccountAndDim(mainAccountRecId, DimensionHierarchy::getAccountStructure(mainAccountRecId), allocationItem.parmDefaultDimension());

                            allocationFactor = round(projAllocationFactor * allocationItem.getPercent(), AccountingDistributionConstants::AllocationFactorRoundingPrecision);
                            totalAllocationFactor += allocationFactor;
                            if (maxAllocationFactor == 0 || allocationFactor > maxAllocationFactor)
                            {
                                maxAllocationFactor = allocationFactor;
                            }

                            allocatedList.addEnd([ledgerDimension, allocationFactor, projFundingSourceRefId]);
                            allocated = true;
                            listPercent.addEnd(allocationItem.getPercent());
                        }
                    }
                }
            }

            if (!allocated)
            {
                allocationFactor = round(projAllocationFactor, AccountingDistributionConstants::AllocationFactorRoundingPrecision);
                totalAllocationFactor += allocationFactor;
                if (maxAllocationFactor == 0 || allocationFactor > maxAllocationFactor)
                {
                    maxAllocationFactor = allocationFactor;
                }

                allocatedList.addEnd([projLedgerDimension, allocationFactor, projFundingSourceRefId]);
            }
            else
            {
                listAllocationFactor.addEnd([projAllocationFactor, listPercent.pack()]);
            }
        }

        if (totalAllocationFactor != 1)
        {
            tempAllocatedList = new List(Types::Container);
            listEnumerator = allocatedList.getEnumerator();
            while (listEnumerator.moveNext())
            {
                [projLedgerDimension, projAllocationFactor, projFundingSourceRefId] = listEnumerator.current();
                if (!maxAllocationFactorFound && maxAllocationFactor == projAllocationFactor)
                {
                    maxAllocationFactorFound = true;
                    tempAllocatedList.addEnd([projLedgerDimension, projAllocationFactor + 1 - totalAllocationFactor, projFundingSourceRefId]);
                }
                else
                {
                    tempAllocatedList.addEnd([projLedgerDimension, projAllocationFactor, projFundingSourceRefId]);
                }
            }
            allocatedList = List::create(tempAllocatedList.pack());
        }

        processCache(identifierStr(ProjFundingEngineDistList));
        processCache(identifierStr(ProjFundingEngineRevenueList));

        return allocatedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useDimAllocList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the usage of dimension allocation from extension.
    /// </summary>
    public void useDimAllocList()
    {
        if (!this.parmIsProject())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (sourceDocumentLineItem.hasMainAccDerivationInputChanged())
        {
            dimensionDerivationRule.parmUseDimAllocListFromExtension(NoYesUnchanged::Yes);
        }
        else
        {
            dimensionDerivationRule.parmUseDimAllocListFromExtension(NoYesUnchanged::No);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canProcessProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the source document line item is project related.
    /// </summary>
    /// <param name="_dimensionDerivationRule">
    /// The <c>DimensionDerivationRule</c> object where we will get the reference to the source document line.
    /// </param>
    /// <returns>
    /// True if source document line item is project related.
    /// </returns>
    public static boolean canProcessProject(DimensionDerivationRule _dimensionDerivationRule)
    {
        boolean isProject;

        isProject = ProjectSourceDocumentLineItemHelper::canProcessProject(_dimensionDerivationRule.parmAccountingRule().parmSourceDocumentLineItem()) &&
            ProjectSourceDocumentLineItemHelper::isLedgerPostingTypeProject(_dimensionDerivationRule.parmAccountingRule().parmLedgerPostingType());

        return isProject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromDimensionDerivationRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>ProjectDimDerivationDistRule</c> class.
    /// </summary>
    /// <param name="_dimensionDerivationRule">
    /// An instance of the <c>ProjectDimDerivationDistRule</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>ProjectDimDerivationDistRule</c> class.
    /// </returns>
    public static ProjectDimDerivationDistRule newFromDimensionDerivationRule(DimensionDerivationRule _dimensionDerivationRule)
    {
        return new ProjectDimDerivationDistRule(_dimensionDerivationRule);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>