<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailGrandTotalJournalArchive_MultiController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Archives grand total journals.
/// </summary>
public class RetailGrandTotalJournalArchive_MultiController extends SysOperationServiceController implements RetailIOperatingUnitPickerCaller, BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailGrandTotalJournalArchive_MultiController controller;

        controller = new RetailGrandTotalJournalArchive_MultiController(
                classStr(RetailGrandTotalJournalArchive_MultiService),
                methodStr(RetailGrandTotalJournalArchive_MultiService, run),
                SysOperationExecutionMode::Synchronous);

        controller.parmDialogCaption("@RetailGrandTotalJournal:ExportArchive");
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogInit</Name>
				<Source><![CDATA[
    protected IDialogable dialogInit()
    {
        return SysOperationDialog::newForm(this.parmDialogCaption(), this, new Form(formStr(RetailOperatingUnitPicker)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPickerInitParameters</Name>
				<Source><![CDATA[
    public RetailOperatingUnitPickerData getPickerInitParameters()
    {
        RetailOperatingUnitPickerData pickerInitParameter = new RetailOperatingUnitPickerData();
        pickerInitParameter.hierarchyPurpose = HierarchyPurpose::RetailPOSPosting;

        pickerInitParameter.omInternalOrganizationRecIds = this.getDataContract().parmSelectedOMInternalOrgRecIds();

        return pickerInitParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOperatingUnitPickerData</Name>
				<Source><![CDATA[
    public void processOperatingUnitPickerData(RetailOperatingUnitPickerData _operatingUnitPickerData)
    {
        this.getDataContract().parmSelectedOMInternalOrgRecIds(_operatingUnitPickerData.omInternalOrganizationRecIds);
        this.getDataContract().parmOMHierarchyRecId(_operatingUnitPickerData.omHierarchyTypeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataContract</Name>
				<Source><![CDATA[
    private RetailGrandTotalJournalArchive_MultiContract getDataContract()
    {
        return this.getDataContractObject() as RetailGrandTotalJournalArchive_MultiContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>