<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdReportController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxWithholdReportController_BR</c> class handles the business logic for the <c>TaxWithholdReport_BR</c> report.
/// </summary>
public class TaxWithholdReportController_BR extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
        protected void prePromptModifyContract()
    {
        TaxWithholdReportContract_BR    contract;

        contract = this.parmReportContract().parmRdpContract();
        this.setParameters(contract, this.parmArgs());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setParameters</Name>
				<Source><![CDATA[
        private void setParameters(TaxWithholdReportContract_BR _contract, Args _args)
    {
        TaxWithHoldReport               taxWithholdReport;
        TaxWithholdReportVoucher        taxWithholdReportVoucher;
        TransDate                       fromDate;
        TransDate                       toDate;
        TransDate                       transDate;
        TaxWithholdPeriod               taxWithholdPeriod;
        TaxRepVersion                   taxRepVersion;
        TaxVersion                      taxRepCounter;
        Voucher                         voucher;
        NoYes                           taxReported;

        if (_args && _args.dataset() == tablenum(TaxWithholdReportVoucher))
        {
            taxWithholdReportVoucher = _args.record();

            taxRepVersion       = taxWithholdReportVoucher.TaxWithholdRepVersion;
            taxWithholdPeriod   = taxWithholdReportVoucher.TaxWithholdPeriod;
            fromDate            = taxWithholdReportVoucher.FromDate;
            toDate              = taxWithholdReportVoucher.ToDate;
            taxRepCounter       = taxWithholdReportVoucher.TaxRepCounter;
            transDate           = taxWithholdReportVoucher.TransDate;
            voucher             = taxWithholdReportVoucher.Voucher;
        }
        else
        {
            taxWithHoldReport   = _args.parmObject();

            taxRepVersion       = taxWithHoldReport.taxWithholdRepVersion();
            taxWithholdPeriod   = taxWithHoldReport.taxWithholdPeriod();
            fromDate            = taxWithHoldReport.fromDate();
            toDate              = taxWithHoldReport.toDate();
            taxReported         = taxWithHoldReport.taxWithholdReported();
        }

        _contract.parmTaxRepVersion(taxRepVersion);
        _contract.parmTaxWithholdPeriod(taxWithholdPeriod);
        _contract.parmFromDate(fromDate);
        _contract.parmToDate(toDate);
        _contract.parmTaxRepCounter(taxRepCounter);
        _contract.parmTransDate(transDate);
        _contract.parmVoucher(voucher);
        _contract.parmTaxReported(taxReported);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the controller, assigns parameter values and run <c>TaxWithholdReport_BR</c> SSRS Report
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object
    /// </param>
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceBR00062, funcName());

        TaxWithholdReportController_BR      controller;

        controller = new TaxWithholdReportController_BR();

        controller.parmReportName(ssrsReportStr(TaxWithholdReport_BR, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>