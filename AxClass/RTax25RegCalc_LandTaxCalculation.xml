<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25RegCalc_LandTaxCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class rTax25RegCalc_LandTaxCalculation extends RTax25RegCalc implements BatchRetryable
{
    protected RAssetStandardId standardId;
    protected int periodMth, periodDivider;
    protected TransDate dateFromPeriod;

    //these maps are filled for each asset or distribution
    //that is about to be output in the register transaction
    protected Map registerPeriodsMap;
    protected Map cadastCostChangePeriodsMap;
    protected Map build3yrLandPeriodsMap;
  
    /// <summary>
    /// Adds the land tax data in the new register transaction record.
    /// </summary>
    /// <param name="_rAssetTable">
    /// An asset table record.
    /// </param>
    /// <param name="_taxCode">
    /// A tax code.
    /// </param>
    /// <param name="_okato">
    /// An OKATO code.
    /// </param>
    /// <param name="_periodStart">
    /// A starting period date.
    /// </param>
    /// <param name="_periodEnd">
    /// An ending period date.
    /// </param>
    /// <param name="_refLineNumber">
    /// A header line number.
    /// </param>
    /// <remarks>
    /// Period dates represent the dates for which a newly added register transaction line will be applicable.
    /// The default period (register journal line period) can be divided based on some factors.
    /// If the period wasn't divided, the start and ending date parameters are equal to those of register journal line.
    /// </remarks>
    #define.RoundFactor(0.0001)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addAssets</Name>
				<Source><![CDATA[
    private void addAssets(RAssetTable _rAssetTable,
		TaxCode _taxCode,
		OKATO_RU _okato,
		TransDate _periodStart = dateFromPeriod,
		TransDate _periodEnd = dateTo,
        RTax25RegisterLineNum64 _refLineNumber = 0)
    {
        RTax25TaxTable rTax25TaxTable;
        RAssetTaxAccountingFactor allowanceFactor = 1;
        RAssetTaxAccountingFactor allowanceFactor387 = 1;
        RAssetTaxAccountingFactor allowanceFactor395 = 1;
        RAssetTaxAccountingFactor ownershipFactor, costChangeFactor;
        RAssetAssessedAmount taxExemption387, taxExemption395, taxBase;
        int lifePeriodMth, exceptMonths, costPeriodMonths;
        RAssetTaxAllowanceHistory history, historyLast;
        Percent taxRate;
        RAssetAssessedAmount calculatedTax, advanceTaxAmount;
        RAssetAssessedAmount rateReductionAllowanceValue, taxReductionAllowanceValue;
        RAssetLandTaxBuildingPeriod buildingPeriod;
        RAssetLocation location = RAssetLocation::findOKATO(_okato);
        TaxBase cadastrialCost;
        RefRecId allowance387, allowance395, untaxedAllowance;
        container ownedShare = RAssetDistribution::taxCodePercentByPeriod(_rAssetTable.AccountNum, _taxCode, _okato, _periodEnd);
        container untaxedShare = [1, 1];
        RAssetAssessedAmount untaxedShareAllowanceAmount;
        TransDate startLifeDate, endLifeDate;
        TaxAuthority taxAuthorityId;
        RAssetLocationId locationId;
        BranchId_RU branchId;

        RAssetTaxInfoValue assetTaxInfoValue = RAssetTaxInfoValue::newParameters(
			_rAssetTable.AccountNum, RAssetDistribution::findLocationTaxCode(_rAssetTable.AccountNum, location.Location, _taxCode).RecId, _periodEnd);

        RAssetAssessedAmount taxRateReductionAllowanceValue()
        {
            if (rTax25TaxTable.AllowanceReductionRateRecId)
            {
                if (taxRate < rTax25TaxTable.AllowanceReductionRateValue)
                {
                    return calculatedTax;
                }

                return calculatedTax - this.round(taxBase * (taxRate - rTax25TaxTable.AllowanceReductionRateValue) * ownershipFactor * costChangeFactor * buildingPeriod / 100 / periodDivider);
            }

            return 0;
        }

        RAssetAssessedAmount taxAmountReductionAllowanceValue()
        {
            if (rTax25TaxTable.AllowanceDecreaseSumRecId)
            {
                if (rTax25TaxTable.AllowanceDecreaseSumValue > 100)
                {
                    return calculatedTax;
                }

                return this.round(calculatedTax * rTax25TaxTable.AllowanceDecreaseSumValue / 100);
            }

            return 0;
        }

        Months calculateCostPeriodMonths()
        {
            TransDate cadrCostPeriodFrom = this.getDateFromForCadastrCostChangePeriod(_periodStart);
            TransDate cadrCostPeriodTo = this.getDateToForCadastrCostChangePeriod(_periodStart);

            TransDate startDate = startLifeDate > cadrCostPeriodFrom
                ? startLifeDate
                : cadrCostPeriodFrom;
            TransDate endDate = endLifeDate < cadrCostPeriodTo
                ? endLifeDate
                : cadrCostPeriodTo;

            return mthofyr(endDate) - mthofyr(startDate) + 1;
        }

        //calculates the ownership factor and the period of asset life within the register period
        RAssetTaxAccountingFactor calculateOwnershipFactor()
        {
            RAssetStandards rAssetStandards = RAssetStandards::find(_rAssetTable.AccountNum, standardId);
            TransDate periodStart = this.getDateFromForBuildPeriod(_periodStart);
            TransDate periodEnd = this.getDateToForBuildPeriod(_periodStart);

            RAssetTrans rAssetTrans = this.getAssetAcquisitionTrans(rAssetStandards, periodStart, periodEnd, false);

            startLifeDate = rAssetTrans.TransDate > periodStart
                ? rAssetTrans.TransDate
                : periodStart;
            TransDate startDate = dayofmth(startLifeDate) > 15
                ? nextmth(startLifeDate)
                : startLifeDate;
            endLifeDate = (rAssetStandards.DisposalDate && rAssetStandards.DisposalDate < periodEnd)
                ? rAssetStandards.DisposalDate
                : periodEnd;
            TransDate endDate = dayofmth(endLifeDate) > 15
                ? endLifeDate
                : prevmth(endLifeDate);

            return (mthofyr(endDate) - mthofyr(startDate) + 1) / periodMth;
        }

        RAssetLandTaxBuildingPeriod buildingPeriod()
        {
            if (_rAssetTable.BuildingStartDate)
            {
                if (mkdate(dayofmth(_rAssetTable.BuildingStartDate),
                           mthofyr(_rAssetTable.BuildingStartDate),
                           year(_rAssetTable.BuildingStartDate) + 3) < _periodEnd)
                {
                    return RAssetLandTaxBuildingPeriod::More3years;
                }
                else
                {
                    return RAssetLandTaxBuildingPeriod::ThreeYears;
                }
            }

            return RAssetLandTaxBuildingPeriod::NotForBuilding;
        }

        void calculateFactors(RAssetTaxAllowanceHistory _last,
                              RAssetTaxAllowanceHistory _current)
        {
            RAssetTaxPrivilege share = _last.DenominatorShare ? _last.NumeratorShare / _last.DenominatorShare : 0;
            Months periodMonths = mthofyr(_current.StartDate) - mthofyr(_last.StartDate) + (_current.StartDate == dateTo ? 1 : 0);

            if (_last.TaxAllowanceRecId || _last.TaxAllowance395RecId)
            {
                allowance387 = _last.TaxAllowanceRecId ? _last.TaxAllowanceRecId : allowance387;
                allowance395 = _last.TaxAllowance395RecId ? _last.TaxAllowance395RecId : allowance395;
                if (lifePeriodMth)
                {
                    untaxedShareAllowanceAmount += cadastrialCost * conpeek(ownedShare, 1) / conpeek(ownedShare, 2)
                        * (_last.UntaxedAreaPartAllowanceRecId ? share : 0) * periodMonths / lifePeriodMth;

                    allowanceFactor387 -= _last.TaxAllowanceRecId ? periodMonths / lifePeriodMth : 0;
                    allowanceFactor395 -= _last.TaxAllowance395RecId ? periodMonths / lifePeriodMth : 0;
                    allowanceFactor -= periodMonths / lifePeriodMth;
                }
            }

            untaxedAllowance = _last.UntaxedAreaPartAllowanceRecId ? _last.UntaxedAreaPartAllowanceRecId : untaxedAllowance;
            untaxedShare     = _last.NumeratorShare 
                ? [_last.NumeratorShare, _last.DenominatorShare] 
                : untaxedShare;
        }

        //calculate the allowance factor and untaxed share allowance
        void calculateAllowanceFactorAndUntaxedShare()
        {
            historyLast = RAssetTaxAllowanceHistory::findLast(dateFromPeriod, _rAssetTable.AccountNum);
            historyLast.StartDate = historyLast.StartDate < dateFromPeriod ? dateFromPeriod : historyLast.StartDate;

            while select history
                order by StartDate asc
                where history.AssetId    == _rAssetTable.AccountNum &&
                      history.StartDate  >  historyLast.StartDate   &&
                      history.StartDate  <= dateTo
            {
                calculateFactors(historyLast, history);
                historyLast = history.data();
            }
            if (mthofyr(dateTo) != mthofyr(historyLast.StartDate))
            {
                history           = null;
                history.StartDate = dateTo;
                calculateFactors(historyLast, history);
            }
        }

        void calculateTaxBase()
        {
            taxBase = cadastrialCost * conpeek(ownedShare, 1) / conpeek(ownedShare, 2) - this.round(untaxedShareAllowanceAmount) - this.round(rTax25TaxTable.AllowanceDecreaseBaseValue387);
            taxBase = taxBase < 0 ? 0 : this.round(taxBase);
        }

        container createContainer()
        {

            return ["", "", "",
                    _rAssetTable.AccountNum, assetTaxInfoValue.getLandType(), assetTaxInfoValue.getlandCadastralNum(),
                    enum2str(buildingPeriod), cadastrialCost,
                    (conpeek(ownedShare, 1) - conpeek(ownedShare, 2)) ?
                    int2str(conpeek(ownedShare, 1)) + "@SYS35673" + int2str(conpeek(ownedShare, 2)) : "",
                    RAssetTaxAllowance::find(rTax25TaxTable.AllowanceDecreaseBase387RecId).TaxAllowanceId, this.round(rTax25TaxTable.AllowanceDecreaseBaseValue387),
                    RAssetTaxAllowance::find(untaxedAllowance).TaxAllowanceId,
                    (conpeek(untaxedShare, 1) - conpeek(untaxedShare, 2)) ?
                    int2str(conpeek(untaxedShare, 1)) + "@SYS35673" + int2str(conpeek(untaxedShare, 2)) : "",
                    RAssetTaxAllowance::find(allowance387).TaxAllowanceId, taxExemption387,
                    RAssetTaxAllowance::find(allowance395).TaxAllowanceId, taxExemption395,
                    exceptMonths, round(allowanceFactor, #RoundFactor), taxBase, taxRate,
                    lifePeriodMth, ownershipFactor, costPeriodMonths, costChangeFactor, calculatedTax,
                    RAssetTaxAllowance::find(rTax25TaxTable.AllowanceDecreaseSumRecId).TaxAllowanceId,
                    taxReductionAllowanceValue,
                    RAssetTaxAllowance::find(rTax25TaxTable.AllowanceReductionRateRecId).TaxAllowanceId,
                    rateReductionAllowanceValue,
                    advanceTaxAmount,
					locationId,
                    branchId,
                    taxAuthorityId,
                    _refLineNumber];
        }
        
        cadastrialCost = this.round(assetTaxInfoValue.getTaxBase());
        rTax25TaxTable = RTax25TaxTable::find(RTax25TaxModule::Asset_RU, _taxCode);
        buildingPeriod = buildingPeriod();
        ownershipFactor = round(calculateOwnershipFactor(), #RoundFactor);
        lifePeriodMth = mthofyr(endLifeDate) - mthofyr(startLifeDate) + 1;
        costPeriodMonths = calculateCostPeriodMonths();
        costChangeFactor = round(costPeriodMonths / lifePeriodMth, #RoundFactor);

        calculateAllowanceFactorAndUntaxedShare();
        exceptMonths = real2int(this.round((1 - round(allowanceFactor, #RoundFactor)) * lifePeriodMth));

        calculateTaxBase();
        taxRate = round(TaxData::percent(_taxCode, dateFrom, taxBase), #RoundFactor);
        calculatedTax = this.round(taxBase * taxRate * ownershipFactor * costChangeFactor * buildingPeriod() / 100 / periodDivider);
        taxReductionAllowanceValue = taxAmountReductionAllowanceValue();
        rateReductionAllowanceValue = taxRateReductionAllowanceValue();
        taxExemption387 = this.round(calculatedTax * (1 - allowanceFactor387));
        taxExemption395 = this.round(calculatedTax * (1 - allowanceFactor395));
        advanceTaxAmount = calculatedTax - (taxReductionAllowanceValue + rateReductionAllowanceValue) - (taxExemption387 + taxExemption395);

        RAssetLocation rAssetLocation = RAssetLocation::find(_rAssetTable.location(dateTo));
		locationId = rAssetLocation.Location;
        branchId = rAssetLocation.BranchId;

        if (branchId)
        {
            taxAuthorityId = TaxAuthorityAddress::findByOKATO_RU(
                Branches_RU::find(branchId)
					.vendTable()
					.partyOKATOasOfDate_RU(dateTo)).TaxAuthority;
        }

        if (!taxAuthorityId)
        {
            taxAuthorityId = TaxAuthorityAddress::findByOKATO_RU(
				CompanyInfoHelper::partyOKATOasOfDate_RU(CompanyInfo::find(), dateTo)).TaxAuthority;
        }
        
        regQuery.addBodyRecord(0,
			createContainer(),
			_rAssetTable.TableId,
			_rAssetTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gathers asset information and inserts it into the register.
    /// </summary>
    /// <remarks>
    /// For the task of gathering the asset info and inserting it into the register, the Map object is used.
    /// First, the data is aggregated and calculated and put in the Map object, then the data from the map
    /// gets inserted in the register.
    ///
    /// The 'key' for the Map is: [OKATO, POBRCC, TaxCode]
    /// The 'value' is the set of assets to be output. An asset under a certain OKATO code can mean the asset distribution.
    ///
    /// Each asset or asset distribution record can be divided into several, if conditions apply.
    /// </remarks>
    public void calc()
    {
        RAssetTable rAssetTable;
        RAssetStandards rAssetStandards;
        RTax25TaxTable rTax25TaxTable;
        RAssetTrans rAssetTrans;
        RAssetDistribution rAssetDistribution;
        RAssetLocation rAssetLocation;

        TransDate fromDate = registerJournalTrans.fromDate();
        TransDate toDate = registerJournalTrans.toDate();

        Map sectionOrderMap = new Map(Types::Container, Types::Class);
        MapEnumerator sectOrderMapEnum;

        boolean first = true;
        OKATO_RU lastOkato;
        PaymentOrderBudgetReceiptClassCode_RU lastPobrcc;
        TaxCode lastTaxCode;

        //checks if the provided header data is different
        boolean headerHasChanged(OKATO_RU _okato, PaymentOrderBudgetReceiptClassCode_RU _pobrcc, TaxCode _taxCode)
        {
            boolean ret;

            if (first || lastOkato != _okato || lastPobrcc != _pobrcc || lastTaxCode != _taxCode)
            {
                lastOkato = _okato;
                lastPobrcc = _pobrcc;
                lastTaxCode = _taxCode;
                first = false;

                ret = true;
            }

            return ret;
        }

        //creates an aggregated data for assets and puts it in the Map object
        void insertMap(TaxCode _taxCode, OKATO_RU _okato)
        {
            container   key;
            Set         rAssetTableSet;

            if (_taxCode)
            {
                key = [_okato,
                       RTax25TaxTable::find(RTax25TaxModule::Asset_RU, _taxCode).PaymentOrderBudgetReceiptClassCode,
                       _taxCode];

                if (sectionOrderMap.exists(key))
                {
                    rAssetTableSet = sectionOrderMap.lookup(key);
                }
                else
                {
                    rAssetTableSet = new Set(Types::Record);
                }

                rAssetTableSet.add(rAssetTable);
                sectionOrderMap.insert(key, rAssetTableSet);
            }
        }

        //queries the Map object for the aggregated asset data and creates the register transaction lines accordingly
        void fillSections()
        {
            MapEnumerator   periodMapEnum;
            Set             rAssetTableSet;
            SetEnumerator   assetSetEnum;
            TaxCode         taxCode;
            OKATO_RU        okato;
            TransDate       periodStart;
            TransDate       periodEnd;

            PaymentOrderBudgetReceiptClassCode_RU pobrcc;

            [okato, pobrcc, taxCode] = sectOrderMapEnum.currentKey();
            rAssetTableSet = sectOrderMapEnum.currentValue();

            if (!rAssetTableSet)
            {
                return;
            }
   
            RTax25RegisterLineNum64 refLineNumber;

            assetSetEnum = rAssetTableSet.getEnumerator();
            while (assetSetEnum.moveNext())
            {
                rAssetTable = assetSetEnum.current();

                if (headerHasChanged(okato, pobrcc, taxCode))
                {
                    RTax25RegisterTrans_LandTaxCalc landTaxCalcHeader = regQuery.addBodyRecord(0, this.createHeader(okato, pobrcc, taxCode));
                    refLineNumber = landTaxCalcHeader.LineNumber;
                }

                //Map objects with periods are populated for each asset or distribution
                this.createMapsWithPeriodDates(
                    rAssetTable,
                    RAssetDistribution::findLocationTaxCode(rAssetTable.AccountNum, RAssetLocation::findOKATO(okato).Location, taxCode));
                periodMapEnum = registerPeriodsMap.getEnumerator();

                while (periodMapEnum.moveNext())
                {
                    this.addAssets(rAssetTable, taxCode, okato, periodMapEnum.currentKey(), periodMapEnum.currentValue(), refLineNumber);
                }
            }
        }

        while select rAssetTable
            where rAssetTable.AssetBelonged == RAssetBelonged::assetprivate
        exists join firstonly rAssetStandards
            where rAssetStandards.AssetId == rAssetTable.AccountNum
               && rAssetStandards.AssetStandardId == standardId
               && (rAssetStandards.DisposalDate >= fromDate
				|| !rAssetStandards.DisposalDate)
        {
            rAssetTrans = this.getAssetAcquisitionTrans(rAssetStandards, fromDate, toDate);

            if (!rAssetTrans.RecId
				&& !RAssetTrans::findLastType(rAssetTable.AccountNum, standardId, RAssetTransType::Acquisition, false, toDate).RecId)
            {
                continue;
            }

            if (rAssetTable.isDistribution())
            {
                while select rAssetDistribution
                join TableId from rTax25TaxTable
                join okato from rAssetLocation
                    where rAssetDistribution.AssetId == rAssetTable.AccountNum
						&& !rAssetDistribution.Owner
						&& rTax25TaxTable.TaxCode == rAssetDistribution.TaxCode
						&& rTax25TaxTable.SalesTaxType == TaxType_W::LandTax
						&& rAssetLocation.Location == rAssetDistribution.Location
                {
                    insertMap(rAssetDistribution.TaxCode, rAssetDistribution.okato());
                }
            }
            else
            {
                insertMap(rAssetTable.LandTaxCode, rAssetTable.findOKATO(rAssetTable.LandTaxCode, dateTo));
            }
        }

        try
        {
            ttsbegin;

            super();

            sectOrderMapEnum = sectionOrderMap.getEnumerator();
            while (sectOrderMapEnum.moveNext())
            {
                fillSections();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected container createHeader(OKATO_RU _okato, PaymentOrderBudgetReceiptClassCode_RU _pobrcC = "", TaxCode _taxCode = "")
    {
        return [_okato, _pobrcC, _taxCode, "", "", "", "", 0., "",
                "", 0., "", "", "", 0., "", 0.,
                0, 0., 0., 0., 0, 0., 0, 0., 0., "", 0., "", 0., 0.];
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMapsWithPeriodDates</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates maps which contain periods which are necessary to calculate certain tax data and divide register transaction records.
    /// </summary>
    /// <param name="_assetTable">
    /// An asset table record.
    /// </param>
    /// <param name="_assetDistribution">
    /// An asset distribution table record.
    /// </param>
    /// <remarks>
    /// Map objects contain periods which are useable for dividing register transaction based on a certain conditions
    /// and also for calculating a certain data for the register.
    ///
    /// Each map is structured like this:
    /// [KEY:periodStartDate, VALUE:periodEndDate]
    ///
    /// <c>registerPeriodsMap</c> is used to divide register transaction record using a nececcary conditions.
    /// <c>cadastCostChangePeriodsMap</c> contains periods divided by changes in cadastial cost for an asset or asset distribution.
    /// <c>build3yrLandPeriodsMap</c> contains periods which are divided by the building date + 3 years, if that date is inside the tax period.
    /// </remarks>
    protected void createMapsWithPeriodDates(RAssetTable _assetTable, RAssetDistribution _assetDistribution)
    {
        SysQueryRun historyQuery = this.getHistoryQuery(_assetTable.AccountNum, _assetDistribution.RecId, dateFromPeriod, dateTo);
        RAssetTaxAllowanceHistory historyRecord;
        TransDate threeYearsAfterBuildDate;
        TaxBase taxBaseBuf;

        Map fillMapEndingDates(Map _periodsMap)
        {
            MapEnumerator me = _periodsMap.getEnumerator();
            TransDate periodStart, periodEnd;
            boolean first = true;
            Map newMap = new Map(Types::Date, Types::Date);

            while(me.moveNext())
            {
                if (first)
                {
                    first = false;
                    periodStart = me.currentKey();
                }
                else
                {
                    periodEnd = me.currentKey();
                    newMap.insert(periodStart, periodEnd - 1);

                    periodStart = periodEnd;
                }
            }

            periodEnd = dateTo;
            newMap.insert(periodStart, periodEnd);

            return newMap;
        }

        registerPeriodsMap = new Map(Types::Date, Types::Date);
        cadastCostChangePeriodsMap = new Map(Types::Date, Types::Date);
        build3yrLandPeriodsMap = new Map(Types::Date, Types::Date);

        //add register period starting date
        registerPeriodsMap.insert(dateStartMth(dateFromPeriod), dateNull());
        cadastCostChangePeriodsMap.insert(dateStartMth(dateFromPeriod), dateNull());
        build3yrLandPeriodsMap.insert(dateStartMth(dateFromPeriod), dateNull());

        //add an after3yr building date
        threeYearsAfterBuildDate = Mkdate(1, mthOfYr(_assetTable.BuildingStartDate), year(_assetTable.BuildingStartDate)+3);
        if (threeYearsAfterBuildDate >= dateFromPeriod
            && threeYearsAfterBuildDate <= dateTo)
        {
            registerPeriodsMap.insert(dateStartMth(threeYearsAfterBuildDate), dateNull());
            build3yrLandPeriodsMap.insert(dateStartMth(threeYearsAfterBuildDate), dateNull());
        }

        //add dates from history
        if (RAssetTaxAllowanceHistory::nonZeroTaxBaseExists(_assetTable.AccountNum, _assetDistribution.RecId))
        {
            //first history record - earlier or equal the dateFrom date
            historyQuery.next();
            historyRecord = historyQuery.get(tableNum(RAssetTaxAllowanceHistory));
            taxBaseBuf = historyRecord.TaxBase;

            //history records inside the register period
            while(historyQuery.next())
            {
                historyRecord = historyQuery.get(tableNum(RAssetTaxAllowanceHistory));
                if (historyRecord.TaxBase != taxBaseBuf)
                {
                    registerPeriodsMap.insert(dateStartMth(historyRecord.StartDate), dateNull());
                    cadastCostChangePeriodsMap.insert(dateStartMth(historyRecord.StartDate), dateNull());
                }
                taxBaseBuf = historyRecord.TaxBase;
            }
        }

        //for all maps add period ending dates as map values
        registerPeriodsMap = fillMapEndingDates(registerPeriodsMap);
        cadastCostChangePeriodsMap = fillMapEndingDates(cadastCostChangePeriodsMap);
        build3yrLandPeriodsMap = fillMapEndingDates(build3yrLandPeriodsMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetAcquisitionTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the asset acquisition transaction.
    /// </summary>
    /// <param name="_rAssetStandards">
    /// A value model table record.
    /// </param>
    /// <param name="_dateFrom">
    /// A starting date of a period.
    /// </param>
    /// <param name="_dateTo">
    /// An ending date of a period.
    /// </param>
    /// <param name="searchTransInPeriod">
    /// If true, searches the acquisition transaction in the period;
    /// otherwise, searches the last one before the ending date.
    /// </param>
    /// <returns>
    /// An acquisition asset transaction.
    /// </returns>
    /// <remarks>
    /// The method searches for transactions which doesn't have a storno transaction in the provided period.
    /// </remarks>
    protected RAssetTrans getAssetAcquisitionTrans(
        RAssetStandards _rAssetStandards,
        TransDate _dateFrom,
        TransDate _dateTo,
        boolean searchTransInPeriod = true)
    {
        RAssetTrans rAssetTrans, rAssetTransStorno;

        select firstonly rAssetTrans
            order TransDate asc
                where rAssetTrans.AccountNum == _rAssetStandards.AssetId
                    && rAssetTrans.AssetStandardId == _rAssetStandards.AssetStandardId
                    && rAssetTrans.AssetTransType == RAssetTransType::Acquisition
                    && rAssetTrans.TransDate >= (searchTransInPeriod ? _dateFrom : dateNull())
                    && rAssetTrans.TransDate <= _dateTo
            notexists join rAssetTransStorno
                where rAssetTransStorno.AccountNum == _rAssetStandards.AssetId
                    && rAssetTransStorno.AssetStandardId == _rAssetStandards.AssetStandardId
                    && rAssetTransStorno.AssetTransType == RAssetTransType::Acquisition
                    && rAssetTransStorno.RecId == rAssetTrans.StornoRecId
                    && rAssetTransStorno.TransDate >= _dateFrom
                    && rAssetTransStorno.TransDate <= _dateTo;

        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFromForBuildPeriod</Name>
				<Source><![CDATA[
    protected TransDate getDateFromForBuildPeriod(TransDate _date)
    {
        return this.getDateFromMap(build3yrLandPeriodsMap, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFromForCadastrCostChangePeriod</Name>
				<Source><![CDATA[
    protected TransDate getDateFromForCadastrCostChangePeriod(TransDate _date)
    {
        return this.getDateFromMap(cadastCostChangePeriodsMap, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateFromMap</Name>
				<Source><![CDATA[
    protected TransDate getDateFromMap(Map _map, TransDate _date)
    {
        MapEnumerator me = _map.getEnumerator();
        TransDate periodStart, periodEnd;

        while(me.moveNext())
        {
            periodStart = me.currentKey();
            periodEnd = me.currentValue();

            if (_date >= periodStart && _date <= periodEnd)
            {
                break;
            }
        }

        return periodStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateToForBuildPeriod</Name>
				<Source><![CDATA[
    protected TransDate getDateToForBuildPeriod(TransDate _date)
    {
        return this.getDateToForMap(build3yrLandPeriodsMap, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateToForCadastrCostChangePeriod</Name>
				<Source><![CDATA[
    protected TransDate getDateToForCadastrCostChangePeriod(TransDate _date)
    {
        return this.getDateToForMap(cadastCostChangePeriodsMap, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateToForMap</Name>
				<Source><![CDATA[
    protected TransDate getDateToForMap(Map _map, TransDate _date)
    {
        MapEnumerator me = _map.getEnumerator();
        TransDate periodStart, periodEnd;

        while(me.moveNext())
        {
            periodStart = me.currentKey();
            periodEnd = me.currentValue();

            if (_date >= periodStart && _date <= periodEnd)
            {
                break;
            }
        }

        return periodEnd;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHistoryQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query which iterates over the asset history records.
    /// </summary>
    /// <param name="_assetId">
    /// An asset id.
    /// </param>
    /// <param name="_assetDistribution">
    /// A distribution recId.
    /// </param>
    /// <param name="_dateFrom">
    /// A starting date of the period.
    /// </param>
    /// <param name="_dateTo">
    /// An ending date of the period.
    /// </param>
    /// <returns>
    /// A <c>QueryRun</c> object for a history records query.
    /// </returns>
    /// <remarks>
    /// The query gathers the history records for the given period
    /// plus the last record from the dateFrom perspertive.
    /// </remarks>
    protected QueryRun getHistoryQuery(RAssetId _assetId, RefRecId _assetDistribution, TransDate _dateFrom, TransDate _dateTo)
    {
        Query query = new query();
        QueryBuildDataSource qbdsRAssetHistory;
        TransDate firstHistoryRecDate = RAssetTaxAllowanceHistory::findLastWithDistribution(_dateFrom, _assetId, false, _assetDistribution).StartDate;

        qbdsRAssetHistory = query.addDataSource(tablenum(RAssetTaxAllowanceHistory));
        qbdsRAssetHistory.addSortField(fieldNum(RAssetTaxAllowanceHistory, StartDate), SortOrder::Ascending);
        findOrCreateRange_W(qbdsRAssetHistory, fieldNum(RAssetTaxAllowanceHistory, AssetId), queryValue(_assetId));
        findOrCreateRange_W(qbdsRAssetHistory, fieldNum(RAssetTaxAllowanceHistory, RAssetDistribution), queryValue(_assetDistribution));
        findOrCreateRange_W(qbdsRAssetHistory, fieldNum(RAssetTaxAllowanceHistory, StartDate), queryRange(firstHistoryRecDate, _dateTo));

        return new SysQueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthsForBuildPeriod</Name>
				<Source><![CDATA[
    protected Months getMonthsForBuildPeriod(TransDate _date)
    {
        return this.getMonthsForMap(build3yrLandPeriodsMap, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthsForCadastrCostChangePeriod</Name>
				<Source><![CDATA[
    protected Months getMonthsForCadastrCostChangePeriod(TransDate _date)
    {
        return this.getMonthsForMap(cadastCostChangePeriodsMap, _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMonthsForMap</Name>
				<Source><![CDATA[
    protected Months getMonthsForMap(Map _map, TransDate _date)
    {
        MapEnumerator me = _map.getEnumerator();
        TransDate periodStart, periodEnd;
        Months periodMonths;

        while(me.moveNext())
        {
            periodStart = me.currentKey();
            periodEnd = me.currentValue();

            if (_date >= periodStart && _date <= periodEnd)
            {
                periodMonths = mthofyr(periodEnd) - mthofyr(periodStart) + 1;
                break;
            }
        }

        return periodMonths;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init(RTax25RegisterJournalTrans  _registerJournalTrans = null, Batch _batch = null)
    {
        boolean ret = super(_registerJournalTrans, _batch);

        standardId = RAssetParameters::standardIdDefault();
        this.initPeriodVariables();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPeriodVariables</Name>
				<Source><![CDATA[
    private void initPeriodVariables()
    {
        dateFromPeriod = dateFrom;

        if (dateTo == DateTimeUtil::getEndOfYearDate(preferredLocale, dateTo))
        {
            periodMth      = 12;
            dateFromPeriod = DateTimeUtil::getStartOfYearDate(preferredLocale, dateFrom);
        }
        else if (registerJournalTrans.PeriodType == RTax25PeriodType::HalfYear) // only first half year
        {
            periodMth = 6;
        }
        else if (dateTo == dateEndQtr(dateTo))
        {
            periodMth = 3;
        }
        else
        {
            periodMth = 1;
        }
        periodDivider = any2Int(12 / periodMth);
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodDivider</Name>
				<Source><![CDATA[
    private int periodDivider()
    {
        if (dateTo == DateTimeUtil::getEndOfYearDate(preferredLocale, dateTo))
            return 1;

        if (registerJournalTrans.PeriodType == RTax25PeriodType::HalfYear)
            return 2;

        if (dateTo == dateEndQtr(dateTo))
            return 4;

        return 12;
    }

]]></Source>
			</Method>
			<Method>
				<Name>round</Name>
				<Source><![CDATA[
    private RAssetAmount round(RAssetAmount _amount)
    {
        return round(_amount, 1);
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>