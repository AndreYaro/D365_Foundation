<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalDocumentTaxPovertyFundCalc_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     Calculates the tax poverty fund (FCP) information on fiscal document.
/// </summary>
class FiscalDocumentTaxPovertyFundCalc_BR
{
    FiscalDocumentParmData_BR       fiscalDocumentParmData;
    TaxPovertyFundSetupHeading_BR   taxPovertyFundSetupHeading;
    CustVendType_BR                 fiscalDocumentAccountType;
    CustVendAC                      fiscalDocumentAccountNum;
    TransDate                       fiscalDocumentAccountingDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>adjustIcmsStTaxPovertyFundAmounts</Name>
				<Source><![CDATA[
    private void adjustIcmsStTaxPovertyFundAmounts(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, List _icmsTaxTransWithTaxPovertyFund)
    {
        ListEnumerator                      icmsStEnumerator, icmsEnumerator;
        FiscalDocumentTaxTransParmData_BR   icmsStTaxTransParmData, icmsTaxTransParmData;
        TaxAmount                           icmsStTaxPovertyFundAmount, icmsTaxPovertyFundAmount;
        TaxPovertyFundBaseAmount_BR         icmsStTaxPovertyFundBaseAmount, icmsTaxPovertyFundBaseAmount;
    
        if (_icmsTaxTransWithTaxPovertyFund.empty())
        {
            return;
        }

        icmsStEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();
        while (icmsStEnumerator.moveNext())
        {
            icmsStTaxTransParmData = icmsStEnumerator.current();

            if (icmsStTaxTransParmData.parmType() == TaxType_BR::ICMSST)
            {
                icmsStTaxPovertyFundAmount      = icmsStTaxTransParmData.parmTaxPovertyFundAmount();
                icmsStTaxPovertyFundBaseAmount  = icmsStTaxTransParmData.parmTaxPovertyFundBaseAmount();
    
                icmsEnumerator = _icmsTaxTransWithTaxPovertyFund.getEnumerator();
                while (icmsEnumerator.moveNext())
                {
                    icmsTaxTransParmData = icmsEnumerator.current();

                    if (icmsStTaxTransParmData.parmTaxTransSourceTableId() == icmsTaxTransParmData.parmTaxTransSourceTableId()
                        && icmsStTaxTransParmData.parmTaxTransSourceRecId() == icmsTaxTransParmData.parmTaxTransSourceRecId())
                    {
                        icmsTaxPovertyFundAmount        = icmsTaxTransParmData.parmTaxPovertyFundAmount();
                        icmsTaxPovertyFundBaseAmount    = icmsTaxTransParmData.parmTaxPovertyFundBaseAmount();
                        
                        icmsStTaxTransParmData.parmTaxPovertyFundAmount     (icmsStTaxPovertyFundAmount - icmsTaxPovertyFundAmount);
                        icmsStTaxTransParmData.parmTaxPovertyFundBaseAmount (icmsStTaxPovertyFundBaseAmount - icmsTaxPovertyFundBaseAmount);

                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxPovertyFundForLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the tax poverty fund (FCP) values on a given fiscal document line.
    /// </summary>
    /// <param name="_fiscalDocumentLineParmData">
    ///     The fiscal document line to set the tax poverty fund (FCP) values on.
    /// </param>
    public void initTaxPovertyFundForLine(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData)
    {
        TaxPovertyFundSetupData_BR          taxPovertyFundSetupData;
        TaxBase                             totalLineTaxPovertyFundBaseAmount, taxBaseAmount;
        TaxAmount                           totalLineTaxPovertyFundAmount, taxPovertyFundAmount;
        CfopDirectionCheck_BR               cfopDirectionCheck;
        ListEnumerator                      taxEnumerator;
        FiscalDocumentTaxTransParmData_BR   fiscalDocumentTaxTransParmData;
        boolean                             isApplicableOnICMS, lineHasICMSST, lineHasICMSDiff;
        List                                icmsTaxTransWithTaxPovertyFund;

        taxPovertyFundSetupData = TaxPovertyFundSetupData_BR::find(
            taxPovertyFundSetupHeading.RecId,
            _fiscalDocumentLineParmData.parmItemId(),
            fiscalDocumentAccountType,
            fiscalDocumentAccountNum,
            fiscalDocumentAccountingDate);

        if (!taxPovertyFundSetupData || taxPovertyFundSetupData.TaxPercentage == 0)
        {
            return;
        }

        cfopDirectionCheck = CfopDirectionCheck_BR::construct(_fiscalDocumentLineParmData.parmCFOP());
        icmsTaxTransWithTaxPovertyFund = new List(Types::Class);

        lineHasICMSST = _fiscalDocumentLineParmData.hasICMSST();
        lineHasICMSDiff = _fiscalDocumentLineParmData.hasICMSDIF();
        isApplicableOnICMS = !cfopDirectionCheck.isOtherState() && (!taxPovertyFundSetupHeading.OnlyFinalUserTrans || fiscalDocumentParmData.parmFinalUser());

        if (isApplicableOnICMS)
        {
            totalLineTaxPovertyFundBaseAmount += this.totalLineTaxBaseAmount(_fiscalDocumentLineParmData, TaxType_BR::ICMS);
        }
        if (lineHasICMSST)
        {
            totalLineTaxPovertyFundBaseAmount += this.totalLineTaxBaseAmount(_fiscalDocumentLineParmData, TaxType_BR::ICMSST);
        }
        if (lineHasICMSDiff)
        {
            totalLineTaxPovertyFundBaseAmount += this.totalLineTaxBaseAmount(_fiscalDocumentLineParmData, TaxType_BR::ICMSDiff);
        }

        totalLineTaxPovertyFundAmount = decRound(totalLineTaxPovertyFundBaseAmount * taxPovertyFundSetupData.TaxPercentage / 100, 2);

        taxEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();
        while (taxEnumerator.moveNext())
        {
            fiscalDocumentTaxTransParmData = taxEnumerator.current();

            if ((isApplicableOnICMS && fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMS)
                || fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMSST
                || fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMSDiff)
            {
                fiscalDocumentTaxTransParmData.parmTaxPovertyFundPercentage(taxPovertyFundSetupData.TaxPercentage);

                taxBaseAmount = this.taxBaseAmount(fiscalDocumentTaxTransParmData);
                if (totalLineTaxPovertyFundBaseAmount)
                {
                    taxPovertyFundAmount = decRound((taxBaseAmount / totalLineTaxPovertyFundBaseAmount) * totalLineTaxPovertyFundAmount, 2);
                }
                else
                {
                    taxPovertyFundAmount = 0;
                }
                fiscalDocumentTaxTransParmData.parmTaxPovertyFundAmount(taxPovertyFundAmount);
                fiscalDocumentTaxTransParmData.parmTaxPovertyFundBaseAmount(taxBaseAmount);
    
                totalLineTaxPovertyFundBaseAmount -= taxBaseAmount;
                totalLineTaxPovertyFundAmount -= taxPovertyFundAmount;

                if (lineHasICMSST
                    && isApplicableOnICMS
                    && fiscalDocumentTaxTransParmData.parmType() == TaxType_BR::ICMS)
                {
                    icmsTaxTransWithTaxPovertyFund.addEnd(fiscalDocumentTaxTransParmData);
                }
            }
        }

        this.adjustIcmsStTaxPovertyFundAmounts(_fiscalDocumentLineParmData, icmsTaxTransWithTaxPovertyFund);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a new instance of the <c>FiscalDocumentParmDataTaxPovertyFund_BR</c> class for a given <c>FiscalDocumentParmData_BR</c>.
    /// </summary>
    /// <param name="_fiscalDocumentParmData">
    ///     An instance of the <c>FiscalDocumentParmData_BR</c> class of the fiscal document to set the tax poverty fund (FCP) information on.
    /// </param>
    /// <param name="_isRetailFiscalDocument">
    ///     Defines if the fiscal document is created based on a retail transaction.
    /// </param>
    public void new(FiscalDocumentParmData_BR _fiscalDocumentParmData, boolean _isRetailFiscalDocument = false)
    {
        FiscalDocDirection_BR       originalDocumentDirection;
        LogisticsPostalAddress      povertyFundStatePostalAddress;

        fiscalDocumentParmData = _fiscalDocumentParmData;

        if (fiscalDocumentParmData.parmPurpose() == FiscalDocumentPurpose_BR::Return)
        {
            originalDocumentDirection = fiscalDocumentParmData.parmDirection() == FiscalDocDirection_BR::Incoming ? FiscalDocDirection_BR::Outgoing : FiscalDocDirection_BR::Incoming;
        }
        else
        {
            originalDocumentDirection = fiscalDocumentParmData.parmDirection();
        }

        if (_isRetailFiscalDocument)
        {
            povertyFundStatePostalAddress = LogisticsPostalAddress::findRecId(fiscalDocumentParmData.parmFiscalEstablishmentPostalAddress());
        }
        else if (originalDocumentDirection == FiscalDocDirection_BR::Incoming)
        {
            povertyFundStatePostalAddress = LogisticsPostalAddress::findRecId(fiscalDocumentParmData.parmFiscalEstablishmentPostalAddress());
        }
        else
        {
            povertyFundStatePostalAddress = LogisticsPostalAddress::findRecId(fiscalDocumentParmData.parmThirdPartyPostalAddress());
        }

        taxPovertyFundSetupHeading = TaxPovertyFundSetupHeading_BR::findByCountryRegionIdAndStateId(povertyFundStatePostalAddress.CountryRegionId, povertyFundStatePostalAddress.State);

        fiscalDocumentAccountType = fiscalDocumentParmData.parmFiscalDocumentAccountType();
        fiscalDocumentAccountNum = fiscalDocumentParmData.parmFiscalDocumentAccountNum();
        fiscalDocumentAccountingDate = fiscalDocumentParmData.parmAccountingDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxBaseAmount</Name>
				<Source><![CDATA[
    private TaxBase taxBaseAmount(FiscalDocumentTaxTransParmData_BR _fiscalDocumentTaxTransParmData)
    {
        return _fiscalDocumentTaxTransParmData.parmTaxBaseAmount() + _fiscalDocumentTaxTransParmData.parmTaxBaseAmountOther();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalLineTaxBaseAmount</Name>
				<Source><![CDATA[
    private TaxBase totalLineTaxBaseAmount(FiscalDocumentLineParmData_BR _fiscalDocumentLineParmData, TaxType_BR _taxType)
    {
        ListEnumerator                      taxesEnumerator;
        FiscalDocumentTaxTransParmData_BR   fiscalDocumentTaxTransParmData;
        TaxBase                             lineTaxBaseAmount;

        taxesEnumerator = _fiscalDocumentLineParmData.parmListOfTaxes().getEnumerator();
        while (taxesEnumerator.moveNext())
        {
            fiscalDocumentTaxTransParmData = taxesEnumerator.current();
            if (fiscalDocumentTaxTransParmData.parmType() == _taxType)
            {
                lineTaxBaseAmount += this.taxBaseAmount(fiscalDocumentTaxTransParmData);
            }
        }

        return lineTaxBaseAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>