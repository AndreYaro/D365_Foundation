<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureCalcBalances_OnPayment_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureCalcBalances_OnPayment_RU extends FactureCalcBalances_RU
{
    Map             mapMapSettledAmounts, mapSettledAmounts;
    boolean         throwOnError;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
public void calc()
    {
        int                             transSign = factureJour.Module == FactureModule_RU::Cust ? 1 : -1;
        CustVendCalcSettledAmounts_RU   custVendCalcSettledAmounts;
        Map                             mapFactureAmountsDetail,
                                        mapMapInvoiceSettledAmounts,
                                        mapSmallSettledAmounts,
                                        mapOldFactureAmounts,
                                        mapOldFactureRemain,
                                        mapMainSettledAmounts;
        MapIterator                     mapIt, mapIt2, mapOldFacturesIt, mapFactureIt;
        BookStructVATAmounts_RU         settledAmounts, totalFactureRemain;
        BookStructSmallVATAmounts_RU    factureAmounts, smallSettledAmounts, remainOldFactures, mainSettledAmount;
        RecordSortedList                invoiceSortedList = factureJour.invoiceJourSortedList(),
                                        factureSortedList;
        CustVendInvoiceJour             custVendInvoiceJour = this.initInvoiceBuffer();
        FactureJour_RU                  oldFactureJour;
        container                       key;
        TaxCode                         taxCode;
        boolean                         existsOldFactureJour;
        TransDate                       settlementDate,reverseDate;
        RecId                           settlemntRecId, transRecId,reverseTransRecId,paymentTransRecId;
        NoYes                           reverseTrans;
        PurchInternalInvoiceId          purchInternalInvoiceId;
        CompanyId                       transCompany;
        CompanyId                       paymentTransCompany;

        #localmacro.keyInvoice2facture
            [conpeek(mapIt2.key(), 1),
             conpeek(mapIt2.key(), 2),
             conpeek(mapIt2.key(), 3),
             purchInternalInvoiceId,
             custVendInvoiceJour.InvoiceId,
             custVendInvoiceJour.NumberSequenceGroupId]
        #endmacro

        while (invoiceSortedList.next(custVendInvoiceJour))
        {
            purchInternalInvoiceId      = factureJour.Module == FactureModule_RU::Vend  ?
                                          custVendInvoiceJour.PurchInternalInvoiceId_RU :
                                          '';

            custVendCalcSettledAmounts  = CustVendCalcSettledAmounts_RU::construct(custVendInvoiceJour, NoYes::No, throwOnError);
            custVendCalcSettledAmounts.calcSettledAmounts();
            custVendCalcSettledAmounts.calcAdvAdjustments();
            mapMapInvoiceSettledAmounts = custVendCalcSettledAmounts.mapMapSettledAmountsMST();

            factureSortedList    = this.findOldFactureJournals(factureJour, custVendInvoiceJour);
            existsOldFactureJour = factureSortedList.first(oldFactureJour);
            mapOldFactureRemain  = new Map(Types::Container, Types::Container);
            // Calc old factures -->
            while (existsOldFactureJour)
            {
                mapOldFactureAmounts = this.calcFactureAmounts(oldFactureJour, custVendInvoiceJour);

                mapOldFacturesIt = new MapIterator(mapOldFactureAmounts);

                while (mapOldFacturesIt.more())
                {
                    remainOldFactures = mapOldFactureRemain.exists(mapOldFacturesIt.key()) ?
                                                                   BookStructSmallVATAmounts_RU::create(mapOldFactureRemain.lookup(mapOldFacturesIt.key())) :
                                                                   new BookStructSmallVATAmounts_RU();
                    remainOldFactures.addAmounts2(BookStructSmallVATAmounts_RU::create(mapOldFacturesIt.value()));
                    mapOldFactureRemain.insert(mapOldFacturesIt.key(), remainOldFactures.pack());
                    mapOldFacturesIt.next();
                }
                existsOldFactureJour = factureSortedList.next(oldFactureJour);
            }
            // Calc old factures <--

            mapFactureAmountsDetail = this.calcFactureAmounts(factureJour, custVendInvoiceJour);

            mapFactureIt = new MapIterator(mapFactureAmountsDetail);

            while (mapFactureIt.more())
            {
                taxCode = conpeek(mapFactureIt.key(), 1);

                totalFactureRemain = mapFactureAmounts.exists(custVendCalcSettledAmounts.mainTrans().RecId) ?
                                     BookStructVATAmounts_RU::create(mapFactureAmounts.lookup(custVendCalcSettledAmounts.mainTrans().RecId)) :
                                     new BookStructVATAmounts_RU();
                totalFactureRemain.addSmallAmounts2(taxCode, BookStructSmallVATAmounts_RU::create(mapFactureIt.value()));
                mapFactureAmounts.insert(custVendCalcSettledAmounts.mainTrans().RecId, totalFactureRemain.pack());
                mapFactureIt.next();
            }

            mapMapFactureAmounts.insert(custVendCalcSettledAmounts.mainTrans().RecId, mapFactureAmountsDetail.pack());

            mapIt = new MapIterator(mapMapInvoiceSettledAmounts);

            while (mapIt.more())
            {
                mapIt2 = new MapIterator(mapIt.value());

                mapSmallSettledAmounts = new Map(Types::Container, Types::Container);
                key = mapIt.key();
                [ settlementDate, settlemntRecId, transRecId, paymentTransRecId, reverseTransRecId, reverseTrans, reverseDate, transCompany, paymentTransCompany ] = key;
                totalFactureRemain = new BookStructVATAmounts_RU();

                while (mapIt2.more())
                {
                    smallSettledAmounts = BookStructSmallVATAmounts_RU::create(mapIt2.value());
                    smallSettledAmounts.amountInclVAT(transSign * smallSettledAmounts.amountInclVAT());
                    smallSettledAmounts.amountLiableToVAT(transSign * smallSettledAmounts.amountLiableToVAT());
                    smallSettledAmounts.taxAmountVAT(transSign * smallSettledAmounts.taxAmountVAT());

                    if (mapOldFactureRemain.exists(#keyInvoice2facture))
                    {
                        remainOldFactures = BookStructSmallVATAmounts_RU::create(mapOldFactureRemain.lookup(#keyInvoice2facture));

                        if (reverseTrans)
                        {
                            if (mapMapSettledAmounts.exists([ reverseDate,
                                                              reverseTransRecId,
                                                              transRecId,
                                                              paymentTransRecId,
                                                              settlemntRecId,
                                                              !reverseTrans,
                                                              reverseDate,
                                                              transCompany,
                                                              paymentTransCompany ]))
                            {
                                mapMainSettledAmounts = Map::create(mapMapSettledAmounts.lookup([ reverseDate,
                                                                                                  reverseTransRecId,
                                                                                                  transRecId,
                                                                                                  paymentTransRecId,
                                                                                                  settlemntRecId,
                                                                                                  !reverseTrans,
                                                                                                  reverseDate,
                                                                                                  transCompany,
                                                                                                  paymentTransCompany ]));
                                if (mapMainSettledAmounts.exists(#keyInvoice2facture))
                                {
                                    mainSettledAmount = BookStructSmallVATAmounts_RU::create(mapMainSettledAmounts.lookup(#keyInvoice2facture));
                                    if (abs(smallSettledAmounts.amountInclVAT()) > abs(mainSettledAmount.amountInclVAT()))
                                    {
                                        mainSettledAmount.addAmounts2(smallSettledAmounts);
                                        remainOldFactures.subAmounts2(mainSettledAmount);
                                        smallSettledAmounts.subAmounts2(mainSettledAmount);
                                    }
                                }
                                else
                                {
                                    remainOldFactures.subAmounts2(smallSettledAmounts);
                                    smallSettledAmounts.clear();
                                }
                            }
                            else
                            {
                                throw error("@GLS107073");
                            }
                        }
                        else
                        {
                            if (abs(remainOldFactures.amountInclVAT()) >= abs(smallSettledAmounts.amountInclVAT()))
                            {
                                remainOldFactures.subAmounts2(smallSettledAmounts);
                                smallSettledAmounts.clear();
                            }
                            else
                            {
                                smallSettledAmounts.subAmounts2(remainOldFactures);
                                remainOldFactures.clear();
                            }
                        }

                        mapOldFactureRemain.insert(#keyInvoice2facture, remainOldFactures.pack());
                    }

                    if (smallSettledAmounts.amountInclVAT())
                    {
                        factureAmounts = BookStructSmallVATAmounts_RU::getAmountsByReducedKey(#keyInvoice2facture, mapFactureAmountsDetail);

                        if (reverseTrans)
                        {
                            if (mapMapSettledAmounts.exists([ reverseDate,
                                                              reverseTransRecId,
                                                              transRecId,
                                                              paymentTransRecId,
                                                              settlemntRecId,
                                                              !reverseTrans,
                                                              reverseDate,
                                                              transCompany,
                                                              paymentTransCompany ]))
                            {
                                mapMainSettledAmounts = Map::create(mapMapSettledAmounts.lookup([ reverseDate,
                                                                                                  reverseTransRecId,
                                                                                                  transRecId,
                                                                                                  paymentTransRecId,
                                                                                                  settlemntRecId,
                                                                                                  !reverseTrans,
                                                                                                  reverseDate,
                                                                                                  transCompany,
                                                                                                  paymentTransCompany ]));

                                if (mapMainSettledAmounts.exists(#keyInvoice2facture))
                                {
                                    mainSettledAmount = BookStructSmallVATAmounts_RU::create(mapMainSettledAmounts.lookup(#keyInvoice2facture));

                                    if (abs(smallSettledAmounts.amountInclVAT()) > abs(mainSettledAmount.amountInclVAT()))
                                    {
                                        factureAmounts.addAmounts2(mainSettledAmount);
                                        mainSettledAmount.addAmounts2(smallSettledAmounts);
                                        smallSettledAmounts.subAmounts2(mainSettledAmount);
                                    }
                                    else
                                    {
                                        factureAmounts.subAmounts2(smallSettledAmounts);
                                    }
                                }
                                else
                                {
                                    throw error("@GLS107073");
                                }
                            }
                            else
                            {
                                throw error("@GLS107073");
                            }
                        }
                        else
                        {
                            if (abs(smallSettledAmounts.amountInclVAT()) >= abs(factureAmounts.amountInclVAT()))
                            {
                                smallSettledAmounts.clear();
                                smallSettledAmounts.addAmounts2(factureAmounts);
                                factureAmounts.clear();
                            }
                            else
                            {
                                factureAmounts.subAmounts2(smallSettledAmounts);
                            }
                        }

                        totalFactureRemain.addSmallAmounts2(conpeek(mapIt2.key(), 1), factureAmounts);

                        mapFactureAmountsDetail.insert(#keyInvoice2facture, factureAmounts.pack());

                        settledAmounts = mapSettledAmounts.exists(key) ? BookStructVATAmounts_RU::create(mapSettledAmounts.lookup(key)) :
                                                                         new BookStructVATAmounts_RU();

                        settledAmounts.addSmallAmounts2(conpeek(mapIt2.key(), 1), smallSettledAmounts);
                        mapSettledAmounts.insert(key, settledAmounts.pack());

                        mapSmallSettledAmounts.insert(#keyInvoice2facture, smallSettledAmounts.pack());
                    }

                    mapIt2.next();
                }

                if (mapSmallSettledAmounts.elements())
                {
                    mapMapSettledAmounts.insert(key, mapSmallSettledAmounts.pack());
                }

                mapIt.next();
            }
        }
    }
]]></Source>
			</Method>
			<Method>
				<Name>findOldFactureJournals</Name>
				<Source><![CDATA[
        protected RecordSortedList findOldFactureJournals(FactureJour_RU        _factureJour,
                                                      CustVendInvoiceJour   _custVendInvoiceJour)
    {
        FactureJour_RU      oldFactureJour;
        RecordSortedList    sortedList = _custVendInvoiceJour.factureJourSortedList_RU();
        boolean             loop = true;

        loop = sortedList.first(oldFactureJour);

        // Delete elder factures from the list
        while (loop)
        {
            if (oldFactureJour.FactureDate  >   _factureJour.FactureDate    ||
                oldFactureJour.FactureId    ==  _factureJour.FactureId      ||
                (oldFactureJour.FactureDate       == _factureJour.FactureDate &&
                 (oldFactureJour.FactureExternalId >  _factureJour.FactureExternalId ||
                  (oldFactureJour.FactureExternalId ==  _factureJour.FactureExternalId &&
                   oldFactureJour.ModifiedDateTime  >   _factureJour.ModifiedDateTime))))
            {
                sortedList.del(oldFactureJour);
                loop = sortedList.first(oldFactureJour);
            }
            else
            {
                loop = sortedList.next(oldFactureJour);
            }
        }
        return sortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapMapSettledAmounts</Name>
				<Source><![CDATA[
        public Map mapMapSettledAmounts()
    {
        return mapMapSettledAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapSettledAmounts</Name>
				<Source><![CDATA[
        public Map mapSettledAmounts()
    {
        return mapSettledAmounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(FactureJour_RU _factureJour, boolean _throwOnError = true)
    {
        super(_factureJour);

        mapSettledAmounts       = new Map(Types::Container, Types::Container);
        mapMapSettledAmounts    = new Map(Types::Container, Types::Container);
        mapFactureAmounts       = new Map(typeName2Type(extendedTypeStr(recId)), Types::Container);
        mapMapFactureAmounts    = new Map(typeName2Type(extendedTypeStr(recId)), Types::Container);
        throwOnError            = _throwOnError;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>