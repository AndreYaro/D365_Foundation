<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WorkTimeCopy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WorkTimeCopy extends RunBase
{
    WorkTimeId      fromWorkTimeId;
    WorkTimeId      toWorkTimeId;
    boolean         copyPropertyId;
    boolean         copyClosedForPickup;

    // Dialog fields
    DialogField     fieldFromWorkTimeId;
    DialogField     fieldToWorkTimeId;
    DialogField     fieldcopyPropertyId;
    DialogField     fieldcopyClosedForPickup;

    private const int currentVersion = 2;

    #LOCALMACRO.CurrentList
        fromWorkTimeId,
        toWorkTimeId,
        copyPropertyId,
        copyClosedForPickup
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy work time template.
    /// </summary>
    void copy()
    {
        WorkTimeTable   workTimeTable;
        WorkTimeLine    workTimeLine;
        WeekDay         lastWeekDay;

        setprefix(WorkTimeCopy::description());

        if (!WorkTimeTable::exist(toWorkTimeId))
        {
            workTimeTable               = WorkTimeTable::find(fromWorkTimeId);
            workTimeTable.WorkTimeId    = toWorkTimeId;
            workTimeTable.Name          = strfmt("@SYS54296",workTimeTable.Name);

            if (!copyClosedForPickup)
            {
                this.setClosedForPickup(workTimeTable, null);
            }

            if (! workTimeTable.validateWrite())
            {
                throw error("@SYS18722");
            }

            workTimeTable.insert();
        }
        else
        {
            if (copyClosedForPickup)
            {
                workTimeTable = WorkTimeTable::find(toWorkTimeId, true);
                this.setClosedForPickup(workTimeTable, WorkTimeTable::find(fromWorkTimeId));
                workTimeTable.update();
            }
        }

        setprefix(fieldLabelValue(tablenum(WorkTimeLine), fieldnum(WorkTimeLine, WorkTimeId), toWorkTimeId));

        while select forupdate workTimeLine
            index TimeDayIdx
            where workTimeLine.WorkTimeId   == fromWorkTimeId
        {
            if (workTimeLine.WeekDay != lastWeekDay)
            {
                setprefix(fieldLabelValue(tablenum(WorkTimeLine), fieldnum(WorkTimeLine, WeekDay), dayname(workTimeLine.WeekDay)));
            }

            setprefix(strfmt("@SYS54524",time2str(workTimeLine.FromTime, -1, -1),time2str(workTimeLine.ToTime, -1, -1)));
            workTimeLine.WorkTimeId = toWorkTimeId;

            if (!copyPropertyId)
            {
                workTimeLine.PropertyId = '';
            }

            if (!workTimeLine.validateWrite())
            {
                throw error("@SYS18722");
            }

            workTimeLine.insert();

            lastWeekDay = workTimeLine.WeekDay;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the dialog object.
    /// </summary>
    /// <returns>The dialog object.</returns>
    public Object dialog()
    {
        DialogRunbase   dialog = super();

        // Init fields
        fieldFromWorkTimeId      = dialog.addField(extendedTypeStr(WorkTimeId),"@SYS54292");
        fieldToWorkTimeId        = dialog.addField(extendedTypeStr(WorkTimeId),"@SYS54293");
        fieldcopyPropertyId      = dialog.addField(enumStr(NoYes),"@SYS54288","@SYS54289");
        fieldcopyClosedForPickup = dialog.addField(enumStr(NoYes),"@SYS88267","@SYS88268");

        // Init values
        fieldFromWorkTimeId.value(fromWorkTimeId);
        fieldToWorkTimeId.value(toWorkTimeId);
        fieldcopyPropertyId.value(copyPropertyId);
        fieldcopyClosedForPickup.value(copyClosedForPickup);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the from dialog values.
    /// </summary>
    /// <returns>True is succedded; otherwise, false.</returns>
    boolean getFromDialog()
    {
        fromWorkTimeId      = fieldFromWorkTimeId.value();
        toWorkTimeId        = fieldToWorkTimeId.value();
        copyPropertyId      = fieldcopyPropertyId.value();
        copyClosedForPickup = fieldcopyClosedForPickup.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack workTimeId, fromWeekDay, toWeekDay, copyPropertyId
    /// </summary>
    /// <returns>The container containing the values.</returns>
    container pack()
    {
        return [currentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromWorkTimeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// The from work time id parameter,
    /// </summary>
    /// <param name = "_id"></param>
    /// <returns>The work time id.</returns>
    WorkTimeId parmFromWorkTimeId(WorkTimeId _id = fromWorkTimeId)
    {
        fromWorkTimeId = _id;
        return fromWorkTimeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        if (!this.validate())
        {
            throw error("@SYS18722");
        }

        try
        {
            ttsbegin;

            this.copy();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setClosedForPickup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the closed for picked on to work time record.
    /// </summary>
    /// <param name = "_toWorkTimeTable">The to work time table record.</param>
    /// <param name = "_fromWorkTimeTable">The from work time table record.</param>
    void setClosedForPickup(WorkTimeTable   _toWorkTimeTable,
                            WorkTimeTable   _fromWorkTimeTable)
    {
        _toWorkTimeTable.ClosedForPickupMonday    = _fromWorkTimeTable.ClosedForPickupMonday;
        _toWorkTimeTable.ClosedForPickupTuesday   = _fromWorkTimeTable.ClosedForPickupTuesday;
        _toWorkTimeTable.ClosedForPickupWednesday = _fromWorkTimeTable.ClosedForPickupWednesday;
        _toWorkTimeTable.ClosedForPickupThursday  = _fromWorkTimeTable.ClosedForPickupThursday;
        _toWorkTimeTable.ClosedForPickupFriday    = _fromWorkTimeTable.ClosedForPickupFriday;
        _toWorkTimeTable.ClosedForPickupSaturday  = _fromWorkTimeTable.ClosedForPickupSaturday;
        _toWorkTimeTable.ClosedForPickupSunday    = _fromWorkTimeTable.ClosedForPickupSunday;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack workTimeId, fromWeekDay, toWeekDay, copyPropertyId
    /// </summary>
    /// <param name = "_packedClass">The container with the packed information.</param>
    /// <returns>True if pack version matches; otherwise, false.</returns>
    boolean unpack(container _packedClass)
    {
        Integer         version         = conpeek(_packedClass,1);

        switch (version)
        {
            case currentVersion:
                [version,#CurrentList] = _packedClass;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate if from and to work time is the same,a nd from time exist.
    /// </summary>
    /// <param name = "_calledFrom">The called ffrom object.</param>
    /// <returns>True if from and to week time is not the same and work time exist, otherwise, false.</returns>
    boolean validate(Object _calledFrom = null)
    {
        if (!fromWorkTimeId)
        {
            return checkFailed("@SYS54295");
        }

        if (!WorkTimeTable::checkExist(fromWorkTimeId))
        {
            return false;
        }

        if (fromWorkTimeId == toWorkTimeId)
        {
            return checkFailed("@SYS54294");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return class description.
    /// </summary>
    /// <returns>The description of the class.</returns>
    public static ClassDescription description()
    {
        return "@SYS54290";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// The main class method.
    /// </summary>
    /// <param name = "args">The argumenets for the class.</param>
    static void main(Args args)
    {
        WorkTimeTable    workTimeTable = args.record();
        WorkTimeCopy     copy = WorkTimeCopy::newWorkTimeForm(workTimeTable);

        if (copy.prompt())
        {
            copy.runOperation();
        }

        Object fr = args.caller();
        if (fr != null)
        {
            fr.doResearch(null);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWorkTimeForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of the <c>WorkTimeCopy</c> class.
    /// </summary>
    /// <param name = "_args">The arguments for the <c>WorkTimeCopy</c> class.</param>
    /// <returns>The <c>WorkTimeCopy</c> instance.</returns>
    static WorkTimeCopy newWorkTimeForm(WorkTimeTable _workTimeTable)
    {
        WorkTimeCopy     copy           = new WorkTimeCopy();

        copy.getLast();
        copy.parmFromWorkTimeId(_workTimeTable.WorkTimeId);

        return copy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>