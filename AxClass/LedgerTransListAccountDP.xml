<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransListAccountDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerTransListAccountDP</c> class is the data provider for the <c>LedgerTransListAccount</c> report.
/// </summary>
/// <remarks>
///    The base class of this class changed in Microsoft Dynamics AX 2012 R3. Please review the new
///    base class for more information.
/// </remarks>
[SRSReportQuery(queryStr(LedgerTransListReport))]
[SRSReportParameterAttribute(classStr(LedgerTransListAccountContract))]
public class LedgerTransListAccountDP extends SrsReportDataProviderPreProcessTempDB
{
    LedgerTransactionListTmp ledgerTransListAccountTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerTransListAccountTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the temporary table.
    /// </summary>
    /// <returns>
    /// The <c>LedgerTransListAccountTmp</c> temporary table.
    /// </returns>
    [SRSReportDataSet(tableStr(LedgerTransactionListTmp))]
    public LedgerTransactionListTmp getLedgerTransListAccountTmp()
    {
        select ledgerTransListAccountTmp;
        return ledgerTransListAccountTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipReportTransaction</Name>
				<Source><![CDATA[
    public boolean parmSkipReportTransaction(boolean _skipReportTransaction = skipReportTransaction)
    {
        if (FeatureStateProvider::isFeatureEnabled(LedgerSSRSReportSkipReportTransactionParmFlight::instance()))
        {
            skipReportTransaction = true;
        }

        return skipReportTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// This method is used to process the report business logic that is used by the
    /// <c>LedgerTransListAccount</c> report.
    /// </remarks>
    public void processReport()
    {
        LedgerTransListAccountContract contract;
        LedgerTransListReportHelper helper = new LedgerTransListReportHelper();

        // Set the user connection to use on tables.
        // This is needed because the createdTransactionId is different for the report than the default connection.
        ledgerTransListAccountTmp.setConnection(this.parmUserConnection());
        helper.parmUserConnection(this.parmUserConnection());

        contract = this.parmDataContract() as LedgerTransListAccountContract;

        using (SysInstrumentationActivityContext activityContext = this.logProcessReport())
        {
            helper.createReportData(ledgerTransListAccountTmp,
                this.parmQuery(),
                contract.parmFromDate(),
                contract.parmToDate(),
                contract.parmIncludeReversed(),
                contract.parmTaxSpecification(),
                true, // Sort by account
                contract.parmDisplayCompanyForLedgerAccount(),
                contract.parmSummaryOnly());
        
            // Log the customer activity properties after the report data has been generated
            // because the query is adjusted in the helper class
            this.addActivityContextForReport(
                activityContext,
                contract,
                this.parmQuery());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logProcessReport</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext logProcessReport()
    {
        const str InstrumentationNamespace = 'LedgerTransListAccount';

        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(InstrumentationNamespace);

        const str MetricName = methodStr(LedgerTransListAccountDP, processReport);

        SysInstrumentationActivity activityContext = SysInstrumentationActivity::construct(
            MetricName,
            InstrumentationNamespace);

        return instrumentationLogger.activityContextWithCustomProperties(activityContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addActivityContextForReport</Name>
				<Source><![CDATA[
    private void addActivityContextForReport(
        SysInstrumentationActivityContext _activityContext,
        LedgerTransListAccountContract _reportContract,
        Query _query)
    {
        int rowCount = QueryRun::getQueryRowCount(_query, maxInt());
        _activityContext.addCustomProperty('RowCountForReport', int2Str(rowCount));

        _activityContext.addCustomProperty('IncludeReversed', _reportContract.parmIncludeReversed() ? 'Yes' : 'No');
        _activityContext.addCustomProperty('SummaryOnly', _reportContract.parmSummaryOnly() ? 'Yes' : 'No');
        _activityContext.addCustomProperty('TaxSpecification', _reportContract.parmTaxSpecification() ? 'Yes' : 'No');
        _activityContext.addCustomProperty('FromDate', date2StrXpp(_reportContract.parmFromDate()));
        _activityContext.addCustomProperty('ToDate', date2StrXpp(_reportContract.parmToDate()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>