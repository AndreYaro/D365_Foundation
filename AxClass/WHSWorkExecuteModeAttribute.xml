<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteModeAttribute</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkExecuteModeAttribute</c> class allows decorating classes with a <c>WHSWorkExecuteMode</c> enum. This enables construction of classes using the extension framework.
/// </summary>
class WHSWorkExecuteModeAttribute extends SysAttribute implements SysExtensionIAttribute
{
    WHSWorkExecuteMode mode;
    boolean            useSingleton;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        WHSWorkExecuteMode _mode,
        boolean            _useSingleton = false)
    {
        super();
        mode         = _mode;
        useSingleton = _useSingleton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkExecuteMode</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal WHSWorkExecuteMode parmWorkExecuteMode()
    {
        return mode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCacheKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the key used for storing cached data for this attribute.
    /// </summary>
    /// <returns>
    /// A string representing the cache key.
    /// </returns>
    public str parmCacheKey()
    {
        return classStr(WHSWorkExecuteModeAttribute)+';'+int2str(enum2int(mode))+';'+int2Str(useSingleton);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSingleton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the same instance should be returned by the extension framework for a given extension.
    /// </summary>
    /// <returns>
    /// true, if the same instance should be used; otherwise, false.
    /// </returns>
    public boolean useSingleton()
    {
        return useSingleton;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>