<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>UpdateBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class UpdateBase implements RunbaseRecsMapable
{
    Map     updatedRecs;
    Map     createdRecs;
    Map     deletedRecs;

    #if.never
    parmBuffer  parmBuffer;
    #endif
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCreatedRec</Name>
				<Source><![CDATA[
    void addCreatedRec(Common buffer)
    {
        if (! createdRecs)
            createdRecs = new Map(typeName2Type(extendedTypeStr(recId)),Types::Record);

        createdRecs.insert(buffer.RecId,buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDeletedRec</Name>
				<Source><![CDATA[
    void addDeletedRec(Common buffer)
    {
        if (! deletedRecs)
            deletedRecs = new Map(typeName2Type(extendedTypeStr(recId)),Types::Record);

        deletedRecs.insert(buffer.RecId,buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addUpdateRec</Name>
				<Source><![CDATA[
    void addUpdateRec(Common buffer)
    {
        if (! updatedRecs)
            updatedRecs = new Map(typeName2Type(extendedTypeStr(recId)),Types::Record);

        updatedRecs.insert(buffer.RecId,buffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdRecs</Name>
				<Source><![CDATA[
    Map createdRecs()
    {
        return createdRecs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletedRecs</Name>
				<Source><![CDATA[
    Map deletedRecs()
    {
        return deletedRecs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeCreatedRecs</Name>
				<Source><![CDATA[
    void mergeCreatedRecs(Map _from)
    {
        if (! _from)
            return;

        if (! _from.elements())
            return;

        if (! createdRecs)
        {
            createdRecs = new Map(typeName2Type(extendedTypeStr(recId)),Types::Record);
        }

        RunBaseMultiParm::mergeRecsPrim(_from,createdRecs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeDeletedRecs</Name>
				<Source><![CDATA[
    void mergeDeletedRecs(Map _from)
    {
        if (! _from)
            return;

        if (! _from.elements())
            return;

        if (! deletedRecs)
        {
            deletedRecs = new Map(typeName2Type(extendedTypeStr(recId)),Types::Record);
        }

        RunBaseMultiParm::mergeRecsPrim(_from,deletedRecs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeRecs</Name>
				<Source><![CDATA[
    void mergeRecs(UpdateBase _upd)
    {
        if (_upd.createdRecs())
            this.mergeCreatedRecs(_upd.createdRecs());

        if (_upd.updatedRecs())
            this.mergeUpdateRecs(_upd.updatedRecs());

        if (_upd.deletedRecs())
            this.mergeDeletedRecs(_upd.deletedRecs());
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeUpdateRecs</Name>
				<Source><![CDATA[
    void mergeUpdateRecs(Map _from)
    {
        if (! _from)
            return;

        if (! _from.elements())
            return;

        if (! updatedRecs)
        {
            updatedRecs = new Map(typeName2Type(extendedTypeStr(recId)),Types::Record);
        }

        RunBaseMultiParm::mergeRecsPrim(_from,updatedRecs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>packCreatedRecs</Name>
				<Source><![CDATA[
    container packCreatedRecs()
    {
        return createdRecs ? createdRecs.pack() : connull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmBuffer</Name>
				<Source><![CDATA[
    abstract ParmBuffer parmParmBuffer(ParmBuffer _parmBuffer = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatedRecs</Name>
				<Source><![CDATA[
    Map updatedRecs()
    {
        return updatedRecs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJobJournal</Name>
				<Source><![CDATA[
    void updateJobJournal(ParmJobStatus status = ParmJobStatus::Executed)
    {
        ParmBuffer  parmBuffer      = this.parmParmBuffer().data();
        ParmBuffer  parmBufferThis  = this.parmParmBuffer();

        ttsbegin;

        select forupdate parmBuffer
            where parmBuffer.ParmId == parmBufferThis.ParmId
            &&    parmBuffer.RecId  == parmBufferThis.RecId;

        if (parmBuffer)
        {
            parmBuffer.JobStatus          = status;
            parmBuffer.ExecutedDateTime   = DateTimeUtil::getSystemDateTime();
            parmBuffer.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        if (! this.parmParmBuffer())
            return checkFailed("@SYS26204");

        return this.parmParmBuffer().validateWrite();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>