<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdPicklistDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdPicklistDP</c> class is the report data provider class for the
/// <c>ProdPicklist</c>Microsoft SQL Server Reporting Services report.
/// </summary>
/// <remarks>
/// This is the report data provider class for the <c>ProdPicklist</c>Reporting Services report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(ProdPicklist)),
    SRSReportParameterAttribute(classStr(ProdPicklistContract))
]
class ProdPicklistDP extends SrsReportDataProviderPreProcess
{
    InventReportDimHistory      inventReportDimHistory;
    boolean                     showQuery;
    boolean                     firstPage;
    ProdTable                   prodTable;
    ProdJournalIdBOM            prodJournalId;
    ProdId                      prodId;
    boolean                     showTransactions;
    ProdPicklistDeliveryLayout  useDeliveryLayout;
    ProdBOMJournalQty           useQuantity;
    CompanyInfo                 companyInfo;
    boolean                     isReferencesSent;
    boolean                     hasAccessInventTransferLine;
    boolean                     hasAccessInventReportDimHistory;
    ProdJournalBOM              prodJournalBOM;
    ProdBOM                     prodBOM;
    InventDim                   inventDim;
    str                         designName;
    ProdPickListTmp             prodPickListTmp;
    str                         vendorDeliveryNoteCaption;
    str                         productionCaption;
    InventDimParm               inventDimParm;
    List                        printDimHistoryList;

    #define.VendorDeliveryNote('VendorDeliveryNote')
    #define.Production('Production')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dimFieldsActive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the inventory dimension fields details that was selected by the user and stores it in a
    /// container.
    /// </summary>
    /// <param name="_inventDimParm">
    /// The <c>InventDimParm</c> table buffer.
    /// </param>
    /// <returns>
    /// The container object that consists of inventory dimension details.
    /// </returns>
    private container dimFieldsActive(InventDimParm _inventDimParm)
    {
        ListEnumerator  enumerator  = InventDim::dimFieldsList().getEnumerator();
        container       visibleGrid;

        while (enumerator.moveNext())
        {
            FieldId dimFieldId = enumerator.current();
            FieldId dimParmFieldId = InventDim::dim2dimParm(dimFieldId);
            if (_inventDimParm.(dimParmFieldId))
            {
                visibleGrid += dimFieldId;
            }
        }
        return visibleGrid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProdPicklistTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the temporary table and returns the data table to the calling method.
    /// </summary>
    /// <returns>
    ///    The required report data from temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr('ProdPickListTmp'))
    ]
    public ProdPickListTmp getProdPicklistTmp()
    {
        select prodPickListTmp;
        return prodPickListTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAccessInventReportDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the <c>InventReportDimHistory</c> table has permissions.
    /// </summary>
    /// <returns>
    ///    true if the <c>InventReportDimHistory</c> table has permissions; otherwise, false.
    /// </returns>
    private boolean hasAccessInventReportDimHistory()
    {
        DictTable dictTable = new DictTable(tableNum(InventReportDimHistory));

        if (!isConfigurationkeyEnabled(configurationKeyNum(LogisticsBasic))  ||
           dictTable.rights() == AccessType::NoAccess)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAccessInventTransferLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the <c>InventTransferLine</c> table has permissions.
    /// </summary>
    /// <returns>
    ///    true if the <c>InventTransferLine</c> table has permissions; otherwise, false.
    /// </returns>
    private boolean hasAccessInventTransferLine()
    {
        DictTable dictTable = new DictTable(tableNum(InventTransferLine));

        if (!isConfigurationkeyEnabled(configurationKeyNum(InventTransferOrders))  ||
           dictTable.rights() == AccessType::NoAccess)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the permissions of the tables.
    /// </summary>
    private void init()
    {
        hasAccessInventTransferLine     = this.hasAccessInventTransferLine();
        hasAccessInventReportDimHistory = this.hasAccessInventReportDimHistory();

        companyInfo = CompanyInfo::find();
        firstPage   = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCompanyInfo</Name>
				<Source><![CDATA[
    private void initFromCompanyInfo()
    {
        prodPickListTmp.CompanyName                 = CompanyInfo::find().name();
        prodPickListTmp.CompanyAddress              = companyInfo.postalAddress().Address;
        prodPickListTmp.Phone                       = companyInfo.phone();
        prodPickListTmp.TeleFax                     = companyInfo.teleFax();
        prodPickListTmp.GiroNum                     = companyInfo.Giro;
        prodPickListTmp.CompanyCoRegNum             = companyInfo.CoRegNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdJournalBOM</Name>
				<Source><![CDATA[
    private void initFromProdJournalBOM()
    {
        prodPickListTmp.bomConsump                  = prodJournalBOM.bomConsump;
        prodPickListTmp.bomProposal                 = prodJournalBOM.bomProposal;
        prodPickListTmp.bomUnit                     = prodJournalBOM.bomUnitId;
        prodPickListTmp.PdsCWConsumption            = prodJournalBOM.PdsCWInventConsump;
        prodPickListTmp.PdsCWProposal               = prodJournalBOM.PdsCWInventProposal;
        prodPickListTmp.PdsCWUnitId                 = prodJournalBOM.pdsCWUnitId();
        prodPickListTmp.OprNum                      = prodJournalBOM.OprNum;
        prodPickListTmp.RemainBOMFinancial          = prodJournalBOM.prodBOM(false).RemainBOMFinancial;
        prodPickListTmp.PdsCWRemainFinancial        = prodJournalBOM.prodBOM(false).PdsCWRemainFinancial;
        prodPickListTmp.BomItemId                   = prodJournalBOM.ItemId;
        prodPickListTmp.BomItemName                 = prodJournalBOM.itemName();

        if (useQuantity == ProdBOMJournalQty::Proposal)
        {
            prodPickListTmp.Quantity                = prodJournalBOM.bomProposal;
            prodPickListTmp.PdsCWQuantity           = prodJournalBOM.PdsCWInventProposal;
        }
        else
        {
            prodPickListTmp.Quantity                = prodJournalBOM.bomConsump;
            prodPickListTmp.PdsCWQuantity           = prodJournalBOM.PdsCWInventConsump;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTransferLine</Name>
				<Source><![CDATA[
    private void initFromInventTransferLine(InventTransferLine _inventTransferLine)
    {
        prodPickListTmp.TransferId                  = _inventTransferLine.TransferId;
        prodPickListTmp.TransItemId                 = _inventTransferLine.ItemId;
        prodPickListTmp.TransItemName               = _inventTransferLine.itemName();
        prodPickListTmp.ReceiveDate                 = _inventTransferLine.ReceiveDate;
        prodPickListTmp.QtyTransfer                 = _inventTransferLine.QtyTransfer;
        prodPickListTmp.ShowHeader                  = 1;
        prodPickListTmp.TransferlineVisibility      = 1;
        inventDim                                   = _inventTransferLine.inventDim();
        prodPickListTmp.ReceiptDate                 = _inventTransferLine.ReceiveDate;
        prodPickListTmp.PdsCWQtyTransfer            = _inventTransferLine.PdsCWQtyTransfer;
        _inventTransferLine.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProdTable</Name>
				<Source><![CDATA[
    private void initFromProdTable()
    {
        prodPickListTmp.DlvDate                     = prodTable.DlvDate;
        prodPickListTmp.InventRefId                 = prodTable.InventRefId;
        prodPickListTmp.InventRefType               = prodTable.InventRefType;
        prodPickListTmp.ItemId                      = prodTable.ItemId;
        prodPickListTmp.ItemName                    = prodTable.inventTable().itemName(prodTable.inventDim());
        prodPickListTmp.Name                        = prodTable.Name;
        prodPickListTmp.ProdId                      = prodTable.ProdId;
        prodPickListTmp.ProdOrderId                 = prodTable.ProdId;
        prodPickListTmp.QtyStUp                     = prodTable.QtyStUp;
        prodPickListTmp.PdsCWQtyStarted             = prodTable.PdsCWBatchStup;
        prodPickListTmp.ReportedFinishedGood        = prodTable.reportedFinishedGood();
        prodPickListTmp.PdsCWReportedFinishedGood   = prodTable.pdsCWReportedFinishedGood();
        prodPickListTmp.SchedEnd                    = prodTable.SchedEnd;
        prodPickListTmp.SchedStart                  = prodTable.SchedStart;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuantities</Name>
				<Source><![CDATA[
    private void initQuantities()
    {
        InventOnHandQty inventOnHandQty             = InventOnHandQty::newParameters(prodJournalBOM.ItemId, inventDim, inventDimParm);
        
        //since we are looking for physical invent only we do not need to go to the WHSInventReserve tables so for performance reasons we set the delay flag
        inventOnHandQty.parmDelayAvailabilityCalculation(true);

        prodPickListTmp.InventOnHand                = inventOnHandQty.physicalInvent();
        prodPickListTmp.PdsCWQtyTransfer            = inventOnHandQty.pdsCWPhysicalInvent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventDim</Name>
				<Source><![CDATA[
    private void initInventDim()
    {
        prodPickListTmp.InventDimFieldsMap::initAllDimensionsFrom(inventDim);
        prodPickListTmp.InventDimId                 = inventDim.InventDimId;
        prodPickListTmp.InventDimPrint              = this.printDimHistory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProdPickListTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record in the <c>ProdPickListTmp</c> table.
    /// </summary>
    /// <param name = "_inventTransferLine">
    /// Table buffer of <c>InventTransferLine></c> table.
    /// </param>
    protected void initializeProdPickListTmp(InventTransferLine _inventTransferLine)
    {
        this.initFromCompanyInfo();
        this.initFromProdJournalBOM();

        if (_inventTransferLine && showTransactions)
        {
            this.initFromInventTransferLine(_inventTransferLine);
        }
        this.initInventDim();

        this.initQuantities();
        this.initFromProdTable();

        prodPickListTmp.TodayDateTxt                = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        prodPickListTmp.VendorAddress               = this.vendorAddress();
        prodPickListTmp.VendorName                  = this.vendorName();
        prodPickListTmp.DesignName                  = designName;
        prodPickListTmp.PickListJournalId           = prodJournalId;
        prodPickListTmp.ProdJournalId               = prodJournalId;
        prodPickListTmp.PurchOrderId                = this.purchOrderId();
        prodPickListTmp.PdsEnabled                  =  (#PdsEnabled? NoYes::Yes : NoYes::No);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method inserts selected records in temporary table.
    /// </summary>
    /// <param name="_inventTransferLine">
    /// Table buffer of <c>InventTransferLine></c> table.
    /// </param>
    private void insertValues(InventTransferLine _inventTransferLine = null)
    {
        this.initializeProdPickListTmp(_inventTransferLine);
        prodPickListTmp.insert();
        prodPickListTmp.clear();
        inventReportDimHistory.clear();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDimHistory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Picks the production order quantity and inventory and storage dimensions.
    /// </summary>
    /// <returns>
    ///    The production order quantity, inventory, and storage dimensions.
    /// </returns>
    public str printDimHistory()
    {
        if (!hasAccessInventReportDimHistory)
        {
            return '';
        }

        ProdPicklistDPDimHistoryBuilder builder = ProdPicklistDPDimHistoryBuilder::construct();
        builder.parmInventDimSetup(this.dimFieldsActive(inventDimParm));
        builder.parmProdJournalBOM(prodJournalBOM);

        return builder.build();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Calls the sub methods to insert data into the temporary table.
    /// </remarks>
    public void processReport()
    {
        InventTransferLine      inventTransferLine;
        ProdPicklistContract contract       = this.parmDataContract() as ProdPicklistContract;

        // Set the userconnection to use on table.
        // This is required to ensure that createdTransactionId of inserted record is different than default transaction.
        prodPickListTmp.setConnection(this.parmUserConnection());

        showTransactions = contract.parmShowTransactions();
        useDeliveryLayout = contract.parmUseDeliveryLayout();
        useQuantity = contract.parmUseQuantity();
        InventDimViewContract inventDimViewContract = contract.parmInventDimViewContract();

        inventDimParm.data(inventDimViewContract.parmInventDimParm());

        this.init();
        isReferencesSent                = false;

        QueryRun queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            prodJournalBOM  = queryRun.get(tableNum(ProdJournalBOM));
            prodBOM         = queryRun.get(tableNum(ProdBOM));
            inventDim       = queryRun.get(tableNum(InventDim));
            prodTable       = queryRun.get(tableNum(ProdTable));

            prodId              = prodJournalBOM.ProdId;
            prodJournalId       = prodJournalBOM.JournalId;

            if (hasAccessInventTransferLine)
            {
                select firstonly inventTransferLine
                    where   inventTransferLine.TransferId           == prodBOM.InventRefId &&
                            inventTransferLine.InventTransIdReceive == prodBOM.InventRefTransId;
            }

            boolean isDeliveryNoteDesign = useDeliveryLayout && this.purchOrderId(prodJournalBOM.JournalId);

            if (isDeliveryNoteDesign)
            {
                designName =  #VendorDeliveryNote;
            }
            else
            {
                designName = #Production;
            }

            this.insertValues(inventTransferLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchOrderId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the reference purchase order for a specified picking list journal ID.
    /// </summary>
    /// <param name="_prodJournalId">
    ///    The picking list journal ID that is passed as an argument.
    /// </param>
    /// <returns>
    ///    The reference purchase order if the picking list journal is connected to a purchase order.
    /// </returns>
    private ProdRefPurchId purchOrderId(ProdJournalIdBOM _prodJournalId = '')
    {
        if (_prodJournalId)
        {
            return ProdJournalTable::find(_prodJournalId).RefPurchId;
        }
        
        if (prodJournalId)
        {
            return ProdJournalTable::find(prodJournalId).RefPurchId;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the vendor address.
    /// </summary>
    /// <returns>
    ///    The vendor address for a particular purchase order.
    /// </returns>
    private Addressing vendorAddress()
    {
        Addressing      vendorAddress;

        if (prodJournalId)
        {
            ProdRefPurchId purchId = this.purchOrderId();
            vendorAddress = PurchTable::find(purchId).vendorAddress();
        }

        return  vendorAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the vendor name.
    /// </summary>
    /// <returns>
    ///    The vendor name for a particular purchase order.
    /// </returns>
    private VendName vendorName()
    {
        VendName        vendName;

        if (prodJournalId)
        {
            ProdRefPurchId purchId = this.purchOrderId();
            vendName = PurchTable::find(purchId).vendorName();
        }

        return vendName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>