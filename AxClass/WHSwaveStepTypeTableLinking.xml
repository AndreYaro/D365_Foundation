<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSwaveStepTypeTableLinking</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Links tables that implement wave step codes to the expected type.
/// </summary>
internal abstract class WHSWaveStepTypeTableLinking
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newFromTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>WHSWaveStepTypeTableLinking</c> class from a tableId.
    /// </summary>
    /// <param name = "_tableId">Table identifier that will be used to lookup the linking.</param>
    /// <returns>An instance of the <c>WHSWaveStepTypeTableLinking</c> class.</returns>
    [Hookable(false)]
    internal static WHSWaveStepTypeTableLinking newFromTableId(TableId _tableId)
    {
        SysTableNameFactoryAttribute attribute = new SysTableNameFactoryAttribute(tableId2Name(_tableId));
        WHSWaveStepTypeTableLinking instance = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWaveStepTypeTableLinking), attribute) as WHSWaveStepTypeTableLinking;

        if (!instance)
        {
            instance = new WHSWaveStepTypeTableLinkingNone();
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWaveStepType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the <c>WHSWaveStepTypeTableLinking</c> class from a wave step type.
    /// </summary>
    /// <param name = "_waveStepType">Wave step type that will be used to lookup the linking.</param>
    /// <returns>An instance of the <c>WHSWaveStepTypeTableLinking</c> class.</returns>
    [Hookable(false)]
    internal static WHSWaveStepTypeTableLinking newFromWaveStepType(WHSWaveStepType _waveStepType)
    {
        WHSWaveStepTypeFactoryAttribute waveStepTypeFactoryAttribute = new WHSWaveStepTypeFactoryAttribute(_waveStepType);
        WHSwaveStepTypeTableLinking waveStepTypeTableLinking = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(WHSWaveStepTypeTableLinking), waveStepTypeFactoryAttribute) as WHSWaveStepTypeTableLinking;

        if (!waveStepTypeTableLinking)
        {
            waveStepTypeTableLinking = new WHSWaveStepTypeTableLinkingNone();
        }

        return waveStepTypeTableLinking;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWaveStepCodeEligbleByWaveStepType</Name>
				<Source><![CDATA[
	/// <summary>
    /// Validates the wave step code entered on the templates is eligible for assignment.
    /// </summary>
    /// <param name = "_waveStepCode">The wave step code to be validated.</param>
    /// <returns>true if wave step code is valid; otherwise, false.</returns>
	[Hookable(false)]
	internal boolean validateWaveStepCodeEligbleByWaveStepType(WHSWaveStepCode _waveStepCode)
    {
        boolean ret =true;

        if (!this.hasWaveStepCode())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (WHSWaveStepCodeTable::find(_waveStepCode).WaveStepType != this.waveStepType())
        {
            ret = checkFailed(strFmt("@WAX:Error_WaveStepCodeNotEligibleOnTemplate", _waveStepCode, this.waveStepType()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveStepCodeExistsOnWaveStepTypeTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the wave step code exists on either the wave step type associated template.
    /// </summary>
    /// <param name = "_waveStepCode">The wave step code to be verified.</param>
    /// <returns>true if the wave step code exists on a template; otherwise false</returns>
    internal final boolean waveStepCodeExistsOnWaveStepTypeTemplate(WHSWaveStepCode _waveStepCode)
    {
        QueryRun waveStepTypeTemplateQueryRun = new QueryRun(this.buildWaveStepTypeTemplateQuery(_waveStepCode));
        return waveStepTypeTemplateQueryRun.next();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWaveStepTypeTemplateQuery</Name>
				<Source><![CDATA[
    private Query buildWaveStepTypeTemplateQuery(WHSWaveStepCode _waveStepCode)
    {
        if (!this.hasWaveStepCode())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        Query query = new Query();
        TableId tableId = this.waveStepTemplateTableId();
        FieldId waveStepCodeFieldId = this.findWaveStepCodeOrWaveStepCodeExtensionOnTable(tableId);

        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableId);
        queryBuildDataSource.firstOnly(true);
        queryBuildDataSource.addRange(waveStepCodeFieldId).value(queryValue(_waveStepCode));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findWaveStepCodeOrWaveStepCodeExtensionOnTable</Name>
				<Source><![CDATA[
    private FieldId findWaveStepCodeOrWaveStepCodeExtensionOnTable(TableId _tableId)
    {
        FieldId retFieldId;
        SysDictTable dictTable = new SysDictTable(_tableId);
        int i;

        for (i = 1; i<=dictTable.fieldCnt(); i++)
        {
            FieldId fieldId = dictTable.fieldCnt2Id(i);

            SysDictField dictField = new SysDictField(dictTable.id(), fieldId);

            if (dictField.typeId() == extendedTypeNum(WHSWaveStepCode))
            {
                retFieldId = dictField.id();
                break;
            }
            
            SysDictType dictType = new SysDictType(dictField.typeId());
            /*
            Wave step codes can be extended into other extended data types and added to either base or custom tables,
            this should be supported and validated through this framework.
            */
            if (dictType && dictType.isExtending(extendedTypeNum(WHSWaveStepCode)))
            {
                retFieldId = dictField.id();
                break;
            }
        }

        return retFieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWaveStepCodeByWaveStepType</Name>
				<Source><![CDATA[
	/// <summary>
    /// Performs form lookups to ensure the correct wave step code type is utilized.
    /// </summary>
    /// <param name = "_waveStepControl">Wave step form control where the lookup should be applied.</param>
    [Hookable(false)]
	internal void lookupWaveStepCodeByWaveStepType(FormStringControl _waveStepControl)
    {
		if (!this.hasWaveStepCode())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(WHSWaveStepCodeTable), _waveStepControl);
        sysTableLookup.addLookupfield(fieldNum(WHSWaveStepCodeTable, WaveStepCode));
        sysTableLookup.addLookupfield(fieldNum(WHSWaveStepCodeTable, WaveStepDescription));
        
        sysTableLookup.parmQuery(this.buildWaveStepCodeQuery());
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildWaveStepCodeQuery</Name>
				<Source><![CDATA[
	private Query buildWaveStepCodeQuery()
    {
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource = query.addDataSource(tableNum(WHSWaveStepCodeTable));

        queryBuildDataSource.addRange(fieldNum(WHSWaveStepCodeTable, WaveStepType)).value(SysQuery::value(this.waveStepType()));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasWaveStepCode</Name>
				<Source><![CDATA[
	/// <summary>
    /// Determines if the wave step type should have a wave step code.
    /// </summary>
    /// <returns>true if the wave step type has a wave step code; otherwise false.</returns>
	[Hookable(false)]
	internal boolean hasWaveStepCode()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveStepType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the wave step type required for the table.
    /// </summary>
    /// <returns>A specific <c>WHSWaveStepType</c> value.</returns>
    abstract internal WHSWaveStepType waveStepType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveStepTemplateTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the template table id associated to this wave step type.
    /// </summary>
    /// <returns>A specific <c>TableId</c> for the associated template.</returns>
    abstract internal TableId waveStepTemplateTableId()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>