<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FiscalReferenceControllerParm_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is a controller for what is viewed by the user when
/// setting up fiscal references for an specific document, and
/// handles database updates accordingly.
/// </summary>
class FiscalReferenceControllerParm_BR extends FiscalReferenceController_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canDeleteRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether a record can be deleted.
    /// </summary>
    /// <param name="_tmpFiscalReference">The record to be checked.</param>
    /// <returns><c>true</c> if record can be deleted; <c>false</c> otherwise.</returns>
    public boolean canDeleteRecord(TmpFiscalReference_BR _tmpFiscalReference)
    {
        FiscalReferenceParm_BR fiscalReference;

        if (_tmpFiscalReference.FiscalReferenceRecId)
        {
            fiscalReference = FiscalReferenceParm_BR::find(_tmpFiscalReference.FiscalReferenceRecId);
            if (fiscalReference.isAutomatic)
            {
                return false;
            }
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canManageRecords</Name>
				<Source><![CDATA[
    public boolean canManageRecords()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnOrder</Name>
				<Source><![CDATA[
    private boolean isReturnOrder()
    {
        boolean isReturnOrder;

        switch (source.TableId)
        {
            case tableNum(CustInvoiceJour):
                CustInvoiceTable custInvoiceTable = CustInvoiceTable::findRecId(source.RecId);
                isReturnOrder = custInvoiceTable.custInvoiceJour().SalesType == SalesType::ReturnItem;
                break;

            case tableNum(SalesParmTable):
                SalesParmTable salesParmTable;
                select salesParmTable where salesParmTable.RecId == source.RecId;
                isReturnOrder = salesParmTable.ReturnItemNum != '';
                break;

            case tableNum(VendInvoiceInfoTable):
                VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(source.RecId);
                isReturnOrder = vendInvoiceInfoTable.purchTable().PurchaseType == PurchaseType::ReturnItem;
                break;

            default:
                isReturnOrder = false;
                break;
        }

        return isReturnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTempTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the delete process for a specific tmpTable record.
    /// </summary>
    /// <param name="_tmpFiscalReference">Row to be deleted</param>
    public void deleteTempTableRecord(TmpFiscalReference_BR _tmpFiscalReference)
    {
        FiscalReferenceParm_BR fiscalReference;
        ExternalFiscalDocument_BR externalFiscalDocument;

        ttsbegin;
        if (_tmpFiscalReference.RefTableId == tableNum(ExternalFiscalDocument_BR))
        {
            externalFiscalDocument = ExternalFiscalDocument_BR::find(_tmpFiscalReference.RefRecId, true);
            if (externalFiscalDocument)
            {
                externalFiscalDocument.delete();
            }
        }
        fiscalReference = FiscalReferenceParm_BR::find(_tmpFiscalReference.FiscalReferenceRecId, true);
        if (fiscalReference)
        {
            fiscalReference.delete();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inits the temporary table with the rows that must be presented to the user
    /// prior to the fiscal reference setup.
    /// </summary>
    /// <returns>tmpTable pointer to be presented to the user</returns>
    public TmpFiscalReference_BR initTempTable()
    {
        TmpFiscalReference_BR tmpFiscalReference;
        FiscalReferenceParm_BR fiscalReference;
        InvoicesReferencedByMap_BR invoicesReferencedByMap;

        ttsbegin;
        while select fiscalReference
              where  fiscalReference.SourceTableId == source.TableId &&
                     fiscalReference.SourceRecId   == source.RecId
        {
            tmpFiscalReference.clear();
            tmpFiscalReference.LegalTextId          = fiscalReference.LegalTextID;
            tmpFiscalReference.FiscalReferenceRecId = fiscalReference.RecId;
            tmpFiscalReference.IsReturnOrder        = this.isReturnOrder() ? NoYes::Yes : NoYes::No;
            switch (fiscalReference.RefTableId)
            {
                case tableNum(FiscalDocument_BR):
                    invoicesReferencedByMap = FiscalDocument_BR::find(fiscalReference.RefRecID);
                    break;

                case tableNum(ExternalFiscalDocument_BR):
                    invoicesReferencedByMap = ExternalFiscalDocument_BR::find(fiscalReference.RefRecID);
                    break;
            }
            tmpFiscalReference.initFromReferenceMap(invoicesReferencedByMap);
            tmpFiscalReference.insert();
        }
        ttscommit;
        return tmpFiscalReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveLegalTextsToSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolve all legal text IDs with the corresponding texts and
    /// associate them with the source document.
    /// All previously resolved legal texts are deleted and the current
    /// ones are resolved.
    /// </summary>
    public void resolveLegalTextsToSourceTable()
    {
        FiscalDocumentTextTagReplacer_BR        tagReplacer        = FiscalDocumentTextTagReplacer_BR::construct();
        FiscalDocumentTextParmDataCreator_BR    parmDataCreator    = FiscalDocumentTextParmDataCreator_BR::create();
        FiscalReferenceParm_BR                  fiscalReferenceParm;
        ExternalFiscalDocument_BR               externalFiscalDocument;
        FiscalDocument_BR                       fiscalDocument;

        CustVendTable                           custVend;
        FiscalEstablishment_BR                  fiscalEstablishment;
        CNPJCPFNum_BR                           accountCNPJCPFNum;
        NAme                                    accountName;
        IENum_BR                                accountIENum;
        LogisticsAddressing                     accountAddress;

        // The only way to do it is deleting all legal texts and resolving them again
        FiscalDocumentTextUpdate_BR::newFromRecord(source)
            .delete(FiscalDocumentTextType_BR::FiscalReference);

        //To reduce inner selects, do it one time for each fiscal document table
        while select LegalTextID from fiscalReferenceParm
            where fiscalReferenceParm.RefTableId    == tableNum(ExternalFiscalDocument_BR)
               && fiscalReferenceParm.SourceRecId   == source.RecId
               && fiscalReferenceParm.SourceTableId == source.TableId
            join FiscalDocumentAccountType, FiscalDocumentAccountNum, IssueDate, FiscalDocumentNumber,
                FiscalDocumentSeries, RetailFiscalPrinterSerialNumber, RetailTerminalNumber from externalFiscalDocument
                where externalFiscalDocument.RecId  == fiscalReferenceParm.RefRecID
        {
            switch (externalFiscalDocument.FiscalDocumentAccountType)
            {
                case CustVendType_BR::Customer  :
                    custVend = CustTable::find(externalFiscalDocument.FiscalDocumentAccountNum);

                    accountName         = custVend.name();
                    accountCNPJCPFNum   = custVend.CustVendCNPJCPF_BR;
                    accountIENum        = custVend.CustVendIE_BR;
                    accountAddress      = DirParty::primaryPostalAddress(custVend.Party).Address;
                    break;

                case CustVendType_BR::Vendor    :
                    custVend = VendTable::find(externalFiscalDocument.FiscalDocumentAccountNum);

                    accountName         = custVend.name();
                    accountCNPJCPFNum   = custVend.CustVendCNPJCPF_BR;
                    accountIENum        = custVend.CustVendIE_BR;
                    accountAddress      = DirParty::primaryPostalAddress(custVend.Party).Address;
                    break;

                case CustVendType_BR::FiscalEstablishment :
                    select fiscalEstablishment
                        where fiscalEstablishment.FiscalEstablishmentId ==  externalFiscalDocument.FiscalDocumentAccountNum;

                    accountName         = fiscalEstablishment.name;
                    accountCNPJCPFNum   = fiscalEstablishment.CNPJCPFNum_BR;
                    accountIENum        = fiscalEstablishment.IENum_BR;
                    accountAddress      = fiscalEstablishment.postalAddress().Address;
                    break;
            }

            tagReplacer.parmFiscalRef_InvAccAddressRef          (accountAddress);
            tagReplacer.parmFiscalRef_InvAccCNPJCPFNumRef       (accountCNPJCPFNum);
            tagReplacer.parmFiscalRef_InvAccIENumberRef         (accountIENum);
            tagReplacer.parmFiscalRef_InvAccNameRef             (accountName);
            tagReplacer.parmFiscalRef_InvDateRef                (externalFiscalDocument.IssueDate);
            tagReplacer.parmFiscalRef_InvNoRef                  (externalFiscalDocument.FiscalDocumentNumber);
            tagReplacer.parmFiscalRef_InvSeriesRef              (externalFiscalDocument.FiscalDocumentSeries);
            tagReplacer.parmFiscalRef_FiscalPrinterSerialNumber (externalFiscalDocument.RetailFiscalPrinterSerialNumber);
            tagReplacer.parmFiscalRef_ECFNumber                 (externalFiscalDocument.RetailTerminalNumber);

            parmDataCreator.parmTextList().addText(fiscalReferenceParm.LegalTextID, FiscalDocumentTextType_BR::FiscalReference, tagReplacer);
        }

        while select LegalTextID from  fiscalReferenceParm
            where fiscalReferenceParm.RefTableId    == tableNum(FiscalDocument_BR)
               && fiscalReferenceParm.SourceRecId   == source.RecId
               && fiscalReferenceParm.SourceTableId == source.TableId
            join FiscalDocumentAccountType, FiscalDocumentAccountNum, FiscalDocumentDate,
                 FiscalDocumentNumber, FiscalDocumentSeries, ThirdPartyPostalAddress,
                 ThirdPartyCNPJCPF, ThirdPartyIE, ThirdPartyName
            from fiscalDocument
                 where fiscalDocument.RecId == fiscalReferenceParm.RefRecID
        {
            tagReplacer.parmFiscalRef_InvAccAddressRef          (LogisticsPostalAddress::addressFromRecId(fiscalDocument.ThirdPartyPostalAddress));
            tagReplacer.parmFiscalRef_InvAccCNPJCPFNumRef       (fiscalDocument.ThirdPartyCNPJCPF);
            tagReplacer.parmFiscalRef_InvAccIENumberRef         (fiscalDocument.ThirdPartyIE);
            tagReplacer.parmFiscalRef_InvAccNameRef             (fiscalDocument.ThirdPartyName);
            tagReplacer.parmFiscalRef_InvDateRef                (fiscalDocument.FiscalDocumentDate);
            tagReplacer.parmFiscalRef_InvNoRef                  (fiscalDocument.FiscalDocumentNumber);
            tagReplacer.parmFiscalRef_InvSeriesRef              (fiscalDocument.FiscalDocumentSeries);

            parmDataCreator.parmTextList().addText(fiscalReferenceParm.LegalTextID, FiscalDocumentTextType_BR::FiscalReference, tagReplacer);
        }

        FiscalDocumentTextPost_BR::copy(parmDataCreator.parmTextList(), source);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeTempTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the tmpTable record update accordingly.
    /// It persists the changes in tmpTable record in the proper
    /// tables on the database.
    /// </summary>
    /// <param name="_tmpFiscalReference">
    /// Updated or new temporary record to be persisted
    /// </param>
    public void writeTempTableRecord(TmpFiscalReference_BR _tmpFiscalReference)
    {
        ExternalFiscalDocument_BR  externalFiscalDocument;
        FiscalReferenceParm_BR     fiscalReference;
        TmpFiscalReference_BR      tmpFiscalReference = _tmpFiscalReference;

        ttsbegin;
        //Every new record in tmpTable structure which is not
        // a reference to an existing fiscal document should be
        // persisted as an ExternalInvoiceInfo record.
        if (!tmpFiscalReference.RefTableId ||
            tmpFiscalReference.RefTableId == tableNum(ExternalFiscalDocument_BR))
        {
            if (tmpFiscalReference.RefRecId)
            {
                externalFiscalDocument = ExternalFiscalDocument_BR::find(tmpFiscalReference.RefRecId, true);
            }
            tmpFiscalReference.fillExternalFiscalDocumentRecord(externalFiscalDocument);
            if (externalFiscalDocument.RecId)
            {
                externalFiscalDocument.update();
            }
            else
            {
                externalFiscalDocument.insert();
                tmpFiscalReference.RefTableId = tableNum(ExternalFiscalDocument_BR);
                tmpFiscalReference.RefRecId   = externalFiscalDocument.RecId;
            }
        }
        // Update or insert fiscal reference parm table accordingly.
        if (tmpFiscalReference.FiscalReferenceRecId)
        {
            fiscalReference = FiscalReferenceParm_BR::find(tmpFiscalReference.FiscalReferenceRecId, true);
        }
        tmpFiscalReference.fillFiscalReferenceRecord(fiscalReference);
        if (fiscalReference.RecId)
        {
            fiscalReference.update();
        }
        else
        {
            fiscalReference.SourceTableId = source.TableId;
            fiscalReference.SourceRecId = source.RecId;
            fiscalReference.insert();
            tmpFiscalReference.FiscalReferenceRecId = fiscalReference.RecId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>