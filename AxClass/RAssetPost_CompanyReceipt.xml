<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetPost_CompanyReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetPost_CompanyReceipt extends RAssetPost
{
    RAssetMoveHist rAssetMoveHist;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    public void createTrans()
    {
        ;
    
        ttsbegin;
    
        this.updateMoveHistoryStandard();
        rAssetTrans = this.initAcquisitionTrans();
        rAssetTrans.Open      = NoYes::Yes;
        rAssetTrans.Voucher   = ledgerVoucher.lastVoucher();
        rAssetTrans.insert();
        this.createTransLink(rAssetTrans);
        rAssetTrans = this.initDepreciationTrans();
        rAssetTrans.Open      = NoYes::Yes;
        rAssetTrans.Voucher   = ledgerVoucher.lastVoucher();
        rAssetTrans.insert();
        this.createTransLink(rAssetTrans);
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAcquisitionTrans</Name>
				<Source><![CDATA[
    private RAssetTrans initAcquisitionTrans()
    {
        ;

        rAssetTrans                = this.initFromLedgerJournalTrans();
        rAssetTrans.Txt            = "@GLS116683";
        rAssetTrans.AssetTransType = RAssetTransType::Acquisition;
        rAssetTrans.PostingType    = RAssetPostingType::CompanyReceipt;
        rAssetTrans.AmountCur      = rAssetMoveHist.rAssetMoveStandard(rAssetStandardId).BalanceAcquisition;
        rAssetTrans.AmountMST      = CurrencyExchangeHelper::mstAmount(rAssetTrans.AmountCur, rAssetTrans.CurrencyCode, transDate);
        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDepreciationTrans</Name>
				<Source><![CDATA[
    private RAssetTrans initDepreciationTrans()
    {
        ;

        rAssetTrans                = this.initFromLedgerJournalTrans();
        rAssetTrans.Txt            = "@GLS116683";
        rAssetTrans.AssetTransType = RAssetTransType::Depreciation;
        rAssetTrans.PostingType    = RAssetPostingType::CompanyReceipt;
        rAssetTrans.AmountCur      = - rAssetMoveHist.rAssetMoveStandard(rAssetStandardId).BalanceDepreciation;
        rAssetTrans.AmountMST      = CurrencyExchangeHelper::mstAmount(rAssetTrans.AmountCur, rAssetTrans.CurrencyCode, transDate);
        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMoveHistoryStandard</Name>
				<Source><![CDATA[
    private void updateMoveHistoryStandard()
    {
        RAssetMoveStandard rAssetMoveStandard;
        ;
        rAssetMoveHist = RAssetMoveHist::findLastOperation(ledgerJournalTrans_RAsset.AssetId,
                                                           RAssetMoveType::CompanyReceipt,
                                                           NoYes::No,
                                                           transDate,
                                                           true);
        if (! rAssetStandards)
        {
            rAssetStandards = RAssetStandards::find(ledgerJournalTrans_RAsset.AssetId, ledgerJournalTrans_RAsset.StandardId, true);
        }
        rAssetMoveStandard = rAssetMoveHist.rAssetMoveStandard(rAssetStandardId, true);
        rAssetMoveStandard.Posted = NoYes::Yes;
        rAssetMoveStandard.update();
        rAssetStandards.DisposalDate = dateNull();
        rAssetStandards.LastDepDate  = endmth(transDate);
        rAssetStandards.DepStartDate = dateStartMth(dateMthFwd(rAssetStandards.LastDepDate, 1 - rAssetMoveStandard.rAssetLifeTimePass));
        rAssetStandards.doUpdate();

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        RAssetMoveStandard rAssetMoveStandard;
        RAssetMoveHist     rAssetMoveHistIssued;
        ;

        if (! rAssetTable)
            rAssetTable = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId, true);

        select firstonly RecId from rAssetMoveStandard
            where rAssetMoveStandard.RefRecId   == rAssetMoveHist.RecId   &&
                  rAssetMoveStandard.RefTableId == rAssetMoveHist.TableId &&
                  rAssetMoveStandard.Posted     == NoYes::No;

        if (! rAssetMoveStandard.RecId)
        {
            rAssetTable.Status =  RAssetStatus::Open;
            rAssetTable.doUpdate();
            rAssetMoveHist.Posted = NoYes::Yes;
            rAssetMoveHist.update();
            if (rAssetMoveHist.AssetId && rAssetMoveHist.Company)
            {
                rAssetMoveHistIssued = rAssetMoveHist.findConcerned(false, true);
                if (rAssetMoveHistIssued.RecId)
                {
                    changecompany(rAssetMoveHist.Company)
                    {
                        rAssetMoveHistIssued.Receipted = NoYes::Yes;
                        rAssetMoveHistIssued.update();
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
