<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetPost_Acquisition</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetPost_Acquisition extends RAssetPost
{
    InventUpd_Financial                     financial;
    InventUpd_Estimated                     estimated;
    LedgerVoucherObject                     ledgerVoucherObjectSecCur;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected RAssetTrans initFromLedgerJournalTrans()
    {
        ;

        rAssetTrans = super();
        if (rAssetStandardId == RAssetParameters::standardIdDefault())
        {
            if (! rAssetTable)
            {
                rAssetTable = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId, true);
            }

            if (rAssetTable.needAssembling())
            {
                rAssetTrans.PostingType = RAssetPostingType::Componentry;
            }
        }
        return rAssetTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post()
    {
        ;

        if (rAssetStandardId == RAssetParameters::standardIdDefault())
        {
            rAssetTable = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId, true);
            if (rAssetTable.needAssembling())
            {
                this.postAssembling();
            }
            else
            {
                this.postPurch();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAssembling</Name>
				<Source><![CDATA[
    private void postAssembling()
    {
        InventMov_Scrap_RU movement;
        RAssetScrap        assetScrap;
        container          costValue;
        TransDate          scrapTransDate = ledgerJournalTrans_RAsset.getTransDate(ledgerJournalTrans);
    
        ttsbegin;
    
        while select forupdate assetScrap
            where assetScrap.AssetId     == ledgerJournalTrans_RAsset.AssetId &&
                  assetScrap.Assembling  == NoYes::Yes                    &&
                  ! assetScrap.TransDate
        {
            assetScrap.TransDate  = scrapTransDate;
            costValue             = InventTrans::calcCostValue(InventTrans::findTransId(assetScrap.InventTransId).InventTransOrigin);
            assetScrap.CostPrice  = CurrencyExchangeHelper::price(conPeek(costValue, 1) ? conPeek(costValue, 2) / conPeek(costValue, 1) : 0);
            assetScrap.CostAmount = assetScrap.calcCostAmount();
            assetScrap.Voucher    = ledgerJournalTrans.Voucher;
            assetScrap.update();
    
            movement  = InventMovement::construct(assetScrap);
            if (ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::Ledger)
                throw error("@GLS116490");
    
            movement.cacheAccountOperations(ledgerJournalTrans.parmOffsetLedgerDimension());
            financial = InventUpd_Financial::newPostAsset_RU(movement, ledgerVoucher, 0);
    
            financial.updateNow();
    
            movement = null;
            financial = null;
        }
    
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postPurch</Name>
				<Source><![CDATA[
    private void postPurch()
    {
        InventMov_Asset_ru  movement;
        RAssetPurchTrans    assetPurchTrans;

        select forupdate firstonly assetPurchTrans                      // only select Purchase line, the VendInvoiceInfoLine aren't stocked
            where assetPurchTrans.AssetId        == ledgerJournalTrans_RAsset.AssetId  &&
                  assetPurchTrans.PurchTransType == RAssetPurchTransType::PurchaseLine &&
                  assetPurchTrans.TableTableId   == tableNum(PurchLine)                &&
                  assetPurchTrans.Acquisition    == NoYes::No                          &&
                  assetPurchTrans.Posted         == NoYes::Yes;

        if (assetPurchTrans.RecId)
        {
            if (assetPurchTrans.purchLine().isStocked())
            {
                movement  = InventMovement::construct(assetPurchTrans);
                movement.cacheAccountOperations(ledgerJournalTrans_RAsset.DebLedgerDimension);
                if (ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger)
                {
                    movement.cacheAccountBalanceSheet(ledgerJournalTrans.parmOffsetLedgerDimension());
                }
                estimated = InventUpd_Estimated::newInventMovement(movement);
                estimated.updateNow();

                financial = InventUpd_Financial::newPostAsset_RU(movement, ledgerVoucher, 0);

                financial.updateNow();
            }

            assetPurchTrans.Acquisition = NoYes::Yes;
            assetPurchTrans.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
    public void updateStatus()
    {
        ;

        if (! rAssetTable)
        {
            rAssetTable = RAssetTable::find(ledgerJournalTrans_RAsset.AssetId, true);
        }

        if (! rAssetStandards)
        {
            rAssetStandards = RAssetStandards::find(ledgerJournalTrans_RAsset.AssetId, ledgerJournalTrans_RAsset.StandardId, true);
        }

        rAssetTable.Status =  RAssetStatus::Open;

        if (! rAssetStandards.LastDepDate)
        {
            rAssetStandards.DepStartDate = RAssetGroup::initDepStartDate(rAssetStandards.AssetGroup, transDate, ledgerJournalTrans_RAsset.AssetId);
        }

        rAssetTable.doUpdate();
        rAssetStandards.doUpdate();

        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
