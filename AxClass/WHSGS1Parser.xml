<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSGS1Parser</Name>
	<SourceCode>
		<Declaration><![CDATA[
public final class WHSGS1Parser implements WHSIBarcodeDataParser
{
    private str inputString;
    private int inputStringPosition;
    private int inputStringLength;

    private LanguageId dateFormattingCulture;

    private UnknownNoYes isGS1BarcodeData = UnknownNoYes::Unknown;
    private UnknownNoYes isGS1DigitalLink = UnknownNoYes::Unknown;
    private Map gs1EncodedData;

    // GS1 supported symbologies and their ISO/IEC identifiers to use if no specific configuration
    private static const int NumberOfSymbologies = 5;
    private static const int Code128Symbology = 1;
    private static const int DataMatrixSymbology = 2;
    private static const int QRCodeSymbology = 3;
    private static const int GS1DataBarSymbology = 4;        
    private static const int GS1DotCodeSymbology = 5;
    public static const str Code128DefaultIdentifier = ']C1';
    public static const str DataMatrixDefaultIdentifier = ']d2';
    public static const str QRCodeDefaultIdentifier = ']Q3';
    public static const str GS1DataBarDefaultIdentifier = ']e0';
    public static const str GS1DotCodeDefaultIdentifier = ']J1';

    // GS1 Digital Link does not use any specific symbology, but can be identified by the URL prefix
    public static const str GS1DigitalLinkReferenceHost = 'id.gs1.org';
    public static const str GS1DigitalLinkDefaultPrefix = 'https://' + GS1DigitalLinkReferenceHost;
    
    private str groupSeparator;
    private int groupSeparatorLen;

    // Special AIs with predefined lengths according to GS1 General Specifications
    private static const int MinimumLengthOfAI = 2;    
    private static const str GS1GeneralSpecsAITableJSON = '{"00":20, "01":16, "02":16, "03":16, "04":18, "11":8, "12":8, "13":8, "14":8, "15":8, "16":8, "17":8, "18":8, "19":8, "20":4, "31":10, "32":10, "33":10, "34":10, "35":10, "36":10, "41":16}';
    private static readonly Map GS1GeneralSpecsAITable = RetailCommonWebAPI::getMapFromJsonString(GS1GeneralSpecsAITableJSON);

    // AI lenghts according to GS1 General Specifications
    private static const str GS1GeneralSpecAILengthTableJSON = '{"00":2, "01":2, "02":2, "10":2, "11":2, "12":2, "13":2, "15":2, "16":2, "17":2, "20":2, "21":2, "22":2, "23":3, "24":3, "25":3, "30":2, "31":4, "32":4, "33":4, "34":4, "35":4, "36":4, "37":2, "39":4, "40":3, "41":3, "42":3, "43":4, "70":4, "71":3, "72":4, "80":4, "81":4, "82":4, "90":2, "91":2, "92":2, "93":2, "94":2, "95":2, "96":2, "97":2, "98":2, "99":2}';
    private static readonly Map GS1GeneralSpecAILengthTable = RetailCommonWebAPI::getMapFromJsonString(GS1GeneralSpecAILengthTableJSON);

    // AIs that mark the start of the GS1 Digital Link 
    private static const container GS1DigitalLinkPrimaryIdentifierKeys = ['00', '01', '8006', '8013', '8010', '414', '415', '417', '8017', '8018', '255', '253', '401', '402', '8003', '8004'];

    private WHSParameters whsParameters = WHSParameters::find();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(str _inputString)
    {
        inputString = _inputString;
        inputStringPosition = 1;
        inputStringLength = strLen(_inputString);

        groupSeparator = whsParameters.GS1GroupSeparator ? whsParameters.GS1GroupSeparator : num2Char(0x1d);
        groupSeparatorLen = strLen(groupSeparator);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newWithInputString</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSGS1Parser newWithInputString(str _inputString)
    {
        return new WHSGS1Parser(_inputString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGS1EncodedData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isGS1EncodedData()
    {
        return this.isGS1BarcodeData() || this.isGS1DigitalLink();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canParseBarcodeData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canParseBarcodeData()
    {
        return this.isGS1EncodedData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGS1BarcodeData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isGS1BarcodeData()
    {
        if (isGS1BarcodeData == UnknownNoYes::Unknown)
        {
            isGS1BarcodeData = (this.determineIfGS1EncodedData() == true ? UnknownNoYes::Yes : UnknownNoYes::No);
        }

        return (isGS1BarcodeData == UnknownNoYes::Yes ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGS1DigitalLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isGS1DigitalLink()
    {
        if (isGS1DigitalLink == UnknownNoYes::Unknown)
        {
            isGS1DigitalLink = (this.determineIfGS1DigitalLink() == true ? UnknownNoYes::Yes : UnknownNoYes::No);
        }

        return (isGS1DigitalLink == UnknownNoYes::Yes ? true : false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIfGS1EncodedData</Name>
				<Source><![CDATA[
    private boolean determineIfGS1EncodedData()
    {
        str symbologyIdentifier;

        for (int symbology = 1; symbology <= NumberOfSymbologies; symbology++)
        {
            switch (symbology)
            {
                case Code128Symbology: symbologyIdentifier = this.whsParameters.GS1FNC1Character ? this.whsParameters.GS1FNC1Character : Code128DefaultIdentifier; break;
                case DataMatrixSymbology: symbologyIdentifier = this.whsParameters.GS1DataMatrixCharacter ? this.whsParameters.GS1DataMatrixCharacter : DataMatrixDefaultIdentifier; break;
                case QRCodeSymbology: symbologyIdentifier = this.whsParameters.GS1QRCodeCharacter ? this.whsParameters.GS1QRCodeCharacter : QRCodeDefaultIdentifier; break;
                case GS1DataBarSymbology: symbologyIdentifier = GS1DataBarDefaultIdentifier; break;
                case GS1DotCodeSymbology: symbologyIdentifier = GS1DotCodeDefaultIdentifier; break;
            }

            if (strStartsWith(inputString, symbologyIdentifier))
            {
                inputStringPosition += strLen(symbologyIdentifier);
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineIfGS1DigitalLink</Name>
				<Source><![CDATA[
    private boolean determineIfGS1DigitalLink()
    {
        return strStartsWith(inputString, this.whsParameters.GS1DigitalLinkPrefix ? this.whsParameters.GS1DigitalLinkPrefix : GS1DigitalLinkDefaultPrefix);        
    }

]]></Source>
			</Method>
			<Method>
				<Name>gs1EncodedData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Map gs1EncodedData()
    {
        if (!gs1EncodedData)
        {
            this.parseGS1EncodedData();
        }

        return gs1EncodedData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBarcodeData</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Map getBarcodeData()
    {
        return this.gs1EncodedData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseGS1EncodedData</Name>
				<Source><![CDATA[
    private void parseGS1EncodedData()
    {
        gs1EncodedData = new Map(Types::String, Types::AnyType);

        if (!this.isGS1EncodedData())
        {
            return;
        }

        if (this.isGS1DigitalLink())
        {
            this.parseGS1DigitalLink();
            return;
        }

        if (!this.hasMoreData())
        {
            throw error("@WAX:NoDataInGS1Symbol");
        }

        while (this.hasMoreData())
        {
            str startOfAI = subStr(inputString, inputStringPosition, MinimumLengthOfAI);

            int dataElementLength = this.determineDataElementLength(startOfAI);           
            str dataElement = subStr(inputString, inputStringPosition, dataElementLength);

            this.parseDataElement(dataElement, startOfAI);

            inputStringPosition += dataElementLength;

            this.skipGroupSeparatorIfPresent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMoreData</Name>
				<Source><![CDATA[
    private boolean hasMoreData()
    {
        return this.hasAtLeastData(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasAtLeastData</Name>
				<Source><![CDATA[
    private boolean hasAtLeastData(int _dataLength)
    {
        return (inputStringPosition - 1 + _dataLength) <= inputStringLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineDataElementLength</Name>
				<Source><![CDATA[
    private int determineDataElementLength(str _startOfAI)
    {
        if (GS1GeneralSpecsAITable.exists(_startOfAI))
        {
            int fixedDataElementLength = GS1GeneralSpecsAITable.lookup(_startOfAI);

            if (!this.hasAtLeastData(fixedDataElementLength))
            {
                throw error("@WAX:InvalidDataInGS1Symbol");
            }

            return fixedDataElementLength;
        }
        
        int groupSeparatorPosition = strScan(inputString, groupSeparator, inputStringPosition, inputStringLength);
        return (groupSeparatorPosition > 0 ? groupSeparatorPosition : inputStringLength + 1) - inputStringPosition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipGroupSeparatorIfPresent</Name>
				<Source><![CDATA[
    private void skipGroupSeparatorIfPresent()
    {
        if (this.hasAtLeastData(groupSeparatorLen))
        {
            if (subStr(inputString, inputStringPosition, groupSeparatorLen) == groupSeparator)
            {
                inputStringPosition += groupSeparatorLen;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseDataElement</Name>
				<Source><![CDATA[
    private void parseDataElement(str _dataElement, str _startOfAI)
    {
        WHSGS1ParsingSetup matchedParsingSetup = this.findParsingSetup(_dataElement, _startOfAI);
        
        if (!matchedParsingSetup)
        {
            this.handleUnknownDataElementAI(_dataElement);
            return;
        }

        int identifierLen = strLen(matchedParsingSetup.Identifier);
        str aiString = subStr(_dataElement, 0, identifierLen);
        str valueString = strDel(_dataElement, 0, identifierLen);

        this.parseValueStringUsingParsingSetup(valueString, matchedParsingSetup, aiString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseValueStringUsingParsingSetup</Name>
				<Source><![CDATA[
    private void parseValueStringUsingParsingSetup(str _valueString, WHSGS1ParsingSetup _matchedParsingSetup, str _aiString)
    {
        if (_matchedParsingSetup.Length > 0)
        {
            boolean lengthValid = false;
            
            if (_matchedParsingSetup.IsFixedLength)
            {
                lengthValid = (strLen(_valueString) == _matchedParsingSetup.Length);
            }
            else
            {
                lengthValid = (strLen(_valueString) <= _matchedParsingSetup.Length);
            }

            if (!lengthValid)
            {
                error(strFmt("@WAX:LengthValidationFailedForAI", _valueString, _matchedParsingSetup.Identifier));
                throw error("@WAX:InvalidDataInGS1Symbol");
            }
        }

        switch (true)
        {
            case _matchedParsingSetup.Type == WHSGS1Type::Alfanumeric:
            case _matchedParsingSetup.Type == WHSGS1Type::Numeric && !_matchedParsingSetup.IsDecimal:
                if (_matchedParsingSetup.AddIdentifier)
                {
                    _valueString = _matchedParsingSetup.Identifier + _valueString;
                }

                gs1EncodedData.insert(_matchedParsingSetup.Identifier, _valueString);
                break;

            case _matchedParsingSetup.Type == WHSGS1Type::Numeric && _matchedParsingSetup.IsDecimal:
                int64 valueInt = str2Int64(_valueString);
                int decimalNum = str2Int(subStr(_aiString, strLen(_aiString), -1));

                real valueReal = valueInt / power(10, decimalNum);

                gs1EncodedData.insert(_matchedParsingSetup.Identifier, valueReal);
                break;

            case _matchedParsingSetup.Type == WHSGS1Type::Date:
                int yearPart = str2Int(subStr(_valueString, 1, 2));
                int monthPart = str2Int(subStr(_valueString, 3, 2));
                int dayPart = str2Int(subStr(_valueString, 5, 2));

                int currentCentury = year(today()) div 100;
                int currentYearInCentury = year(today()) mod 100;

                int centuryDetermination = yearPart - currentYearInCentury;
                if (51 <= centuryDetermination && centuryDetermination <= 99)
                {
                    yearPart += (currentCentury - 1) * 100;
                }
                else if (-99 <= centuryDetermination && centuryDetermination <= -50)
                {
                    yearPart += (currentCentury + 1) * 100;
                }
                else
                {
                    yearPart += currentCentury * 100;
                }

                if (dayPart == 0 && WHSGS1ParserZeroDayIsEndOfMonthFlight::instance().isEnabled())
                {
                    dayPart = 31;
                }

                date valueDate = mkDate(dayPart, monthPart, yearPart);
                
                gs1EncodedData.insert(_matchedParsingSetup.Identifier, valueDate);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseGS1DigitalLink</Name>
				<Source><![CDATA[
    private void parseGS1DigitalLink()
    {
        System.Uri gs1DigitalLinkURI;

        if (!System.Uri::TryCreate(inputString, System.UriKind::Absolute, byref gs1DigitalLinkURI))
        {
            throw error(strFmt("@WAX:UnableToParseGS1DigitalLinkURI", inputString));
        }
                
        this.parseGS1DigitalLinkPathSegments(gs1DigitalLinkURI);
        this.parseGS1DigitalLinkQueryString(gs1DigitalLinkURI);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseGS1DigitalLinkPathSegments</Name>
				<Source><![CDATA[
    private void parseGS1DigitalLinkPathSegments(System.Uri _gs1DigitalLinkURI)
    {
        System.String[] pathSegments = _gs1DigitalLinkURI.Segments;

        boolean inGS1DigitalLinkPath;
        str currentAI;
        
        for (int i = 1; i < pathSegments.Length; i++)
        {
            str pathSegment = pathSegments.get_Item(i).TrimEnd('/');

            if (!inGS1DigitalLinkPath && conFind(GS1DigitalLinkPrimaryIdentifierKeys, pathSegment) > 0)
            {
                inGS1DigitalLinkPath = true;        
            }
            else if (!inGS1DigitalLinkPath)
            {
                continue;
            }

            if (!currentAI)
            {
                // AIs
                currentAI = pathSegment;
            }
            else
            {
                // Value
                this.parseGS1DigitalLinkAIValuePair(currentAI, pathSegment);
                currentAI = '';
            }
        }

        if (currentAI || !inGS1DigitalLinkPath)
        {
            throw error(strFmt("@WAX:UnableToParseGS1DigitalLinkURI", inputString));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseGS1DigitalLinkQueryString</Name>
				<Source><![CDATA[
    private void parseGS1DigitalLinkQueryString(System.Uri _gs1DigitalLinkURI)
    {
        var queryStringCollection = System.Web.HttpUtility::ParseQueryString(_gs1DigitalLinkURI.Query);
        var queryStringEnumerator = queryStringCollection.GetEnumerator();

        while (queryStringEnumerator.MoveNext())
        {
            str currentAI = queryStringEnumerator.Current;
            str value = queryStringCollection.get_Item(currentAI);

            this.parseGS1DigitalLinkAIValuePair(currentAI, value);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseGS1DigitalLinkAIValuePair</Name>
				<Source><![CDATA[
    private void parseGS1DigitalLinkAIValuePair(str _aiString, str _valueString)
    {
        WHSGS1ParsingSetup matchedParsingString = this.findParsingSetupFromAI(_aiString);
        if (!matchedParsingString)
        {
            this.handleUnknownDataElementAI(_aiString);
            return;
        }

        this.parseValueStringUsingParsingSetup(_valueString, matchedParsingString, _aiString);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParsingSetup</Name>
				<Source><![CDATA[
    private WHSGS1ParsingSetup findParsingSetup(str _dataElement, str _startOfAI)
    {        
        if (GS1GeneralSpecAILengthTable.exists(_startOfAI))
        {
            return this.findParsingSetupUsingLengthTable(_dataElement, _startOfAI);
        }
        
        return this.findParsingSetupUsingLongestPrefixMatch(_dataElement, _startOfAI);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParsingSetupUsingLengthTable</Name>
				<Source><![CDATA[
    private WHSGS1ParsingSetup findParsingSetupUsingLengthTable(str _dataElement, str _startOfAI)
    {        
        int aILength = GS1GeneralSpecAILengthTable.lookup(_startOfAI);

        str fullAI = subStr(_dataElement, 1, aILength);
        return this.findParsingSetupFromAI(fullAI);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParsingSetupFromAI</Name>
				<Source><![CDATA[
    private WHSGS1ParsingSetup findParsingSetupFromAI(str _fullAI)
    {
        int aILength = strLen(_fullAI);

        str decimalAI = '';

        if (aILength > MinimumLengthOfAI)
        {
            decimalAI = subStr(_fullAI, 1, aILength - 1) + 'n';
        }

        WHSGS1ParsingSetup parsingSetup;
        select parsingSetup
            where parsingSetup.Identifier == _fullAI
               || (decimalAI != '' && parsingSetup.Identifier == decimalAI);

        return parsingSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParsingSetupUsingLongestPrefixMatch</Name>
				<Source><![CDATA[
    private WHSGS1ParsingSetup findParsingSetupUsingLongestPrefixMatch(str _dataElement, str _startOfAI)
    {
        WHSGS1ParsingSetup parsingSetup, matchedParsingSetup;
        int longestPrefixMatch = 0;

        while select parsingSetup
            where parsingSetup.Identifier like _startOfAI + '*'
        {
            str matchingStringFromIdentifier = '^' + strReplace(parsingSetup.Identifier, 'n', ':n');

            if (strLen(parsingSetup.Identifier) > longestPrefixMatch && match(matchingStringFromIdentifier, _dataElement))
            {
                longestPrefixMatch = strLen(parsingSetup.Identifier);
                matchedParsingSetup.data(parsingSetup);
            }
        }

        return matchedParsingSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleUnknownDataElementAI</Name>
				<Source><![CDATA[
    private void handleUnknownDataElementAI(str _dataElement)
    {
        switch (WHSParameters::find().GS1UnknownDataElementAIPolicy)
        {
            case WhsGS1UnknownDataElementAIPolicy::Error:
                error(strfmt("@WAX:UnableToDetermineAIForGS1Data", _dataElement));
                throw error("@WAX:InvalidDataInGS1Symbol");

            case WhsGS1UnknownDataElementAIPolicy::Ignore:
                return;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>