<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocumentDescriptorInventTransferOrderParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the tax document bundler for invent transfer.
/// </summary>
[TaxableDocumentDescriptorAttribute('Invent transfer order shipment and receive', 'InvTransOrderParm')]
class TaxableDocumentDescriptorInventTransferOrderParm extends TaxableDocumentDescriptorBase
    implements  TaxableDocumentTypeDefinitionInventTransferOrderShipment,
                TaxableDocumentTypeDefinitionInventTransferOrderReceive

{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data provider.
    /// </summary>
    /// <returns>
    /// The data provider instance.
    /// </returns>
    public ITaxableDocumentDataProvider getDataProvider()
    {
        return new TaxableDocInventTransferOrderParmDP(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSide</Name>
				<Source><![CDATA[
    public TaxAccountingPostingProfileDistributionSide getDistributionSide()
    {
        InventTransferParmTable                     inventTransferParmTable = rootTable as InventTransferParmTable;
        TaxAccountingPostingProfileDistributionSide ret;

        switch (InventTransferParmTable.UpdateType)
        {
            case InventTransferUpdateType::Shipment:
                ret = TaxAccountingPostingProfileDistributionSide::Credit;
                break;
            case InventTransferUpdateType::Receive:
                ret = TaxAccountingPostingProfileDistributionSide::Debit;
                break;
            default:
                ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTaxableDocumentType</Name>
				<Source><![CDATA[
    public ClassName getSourceTaxableDocumentType()
    {
        InventTransferParmTable inventTransferParmTable = rootTable as InventTransferParmTable;
        ClassName               ret;

        switch (InventTransferParmTable.UpdateType)
        {
            case InventTransferUpdateType::Shipment:
                ret = classStr(TaxableDocumentTypeDefinitionInventTransferOrderShipment);
                break;
            case InventTransferUpdateType::Receive:
                ret = classStr(TaxableDocumentTypeDefinitionInventTransferOrderReceive);
                break;
            default:
                ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableDocumentRootTableId</Name>
				<Source><![CDATA[
    public TableId getTaxableDocumentRootTableId()
    {
        return tableNum(InventTransferParmTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxAdjustable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is tax adjustable for this transaction
    /// </summary>
    /// <returns>
    /// True if tax is adjustable; otherwise, false.
    /// </returns>
    public boolean isTaxAdjustable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPersistTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if tax document should be persisted in database.
    /// </summary>
    /// <returns>True if the tax document should be persisted; otherwise, false.</returns>
    public boolean shouldPersistTaxDocument()
    {
        InventTransferParmTable inventTransferParmTable = rootTable as InventTransferParmTable;

        if (InventTransferParmTable.UpdateType == InventTransferUpdateType::Shipment
            || InventTransferParmTable.UpdateType == InventTransferUpdateType::Receive)
        {
            return true;
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTaxAdjustment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Has tax adjustment or apply same tax rate on shipment and receipt.
    /// </summary>
    /// <returns>
    /// true if has tax adjustment; otherwise, false.
    /// 
    /// </returns>
    public boolean hasTaxAdjustment()
    {
        boolean isTaxAdjustment = super();

        if (isTaxAdjustment)
        {
            return true;
        }
        else
        {
            InventTransferParmTable inventTransferParmTable = rootTable as InventTransferParmTable;

            return inventTransferParmTable.isReceiving() || inventTransferParmTable.isShipmentCancellation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>