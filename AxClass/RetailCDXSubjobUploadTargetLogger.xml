<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXSubjobUploadTargetLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the logger class.
/// </summary>
internal class RetailCDXSubjobUploadTargetLogger extends RetailCDXLogger
{
    private RetailCDXSubjobUploadTargetContext context;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new instance of <c>RetailCDXSubjobUploadTargetContext</c> class.
    /// </summary>
    /// <param name = "_subjobContext">The upload target context object.</param>
    internal void new(RetailCDXSubjobUploadTargetContext _subjobContext)
    {
        super();
        this.context = _subjobContext;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetProcessingStart</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetProcessingStart()
    {
        this.logStartEvent('CDXSubjobUploadTargetProcessing', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetProcessingFailure</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetProcessingFailure(System.Exception exception)
    {
        this.logEvent('CDXSubjobUploadTargetProcessingFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetProcessingStop</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetProcessingStop(System.Exception exception)
    {
        this.logStopEvent('CDXSubjobUploadTargetProcessing', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetCtxInitializationStart</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetCtxInitializationStart()
    {
        this.logStartEvent('CDXSubjobUploadTargetCtxInitialization', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetCtxInitializationFailure</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetCtxInitializationFailure(System.Exception exception)
    {
        this.logEvent('CDXSubjobUploadTargetCtxInitializationFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetCtxInitializationStop</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetCtxInitializationStop(System.Exception exception)
    {
        this.logStopEvent('CDXSubjobUploadTargetCtxInitialization', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetStagePacketToTempTableStart</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetStagePacketToTempTableStart()
    {
        this.logStartEvent('CDXSubjobUploadTargetStagePacketToTempTable', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetStagePacketToTempTableFailure</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetStagePacketToTempTableFailure(System.Exception exception)
    {
        this.logEvent('CDXSubjobUploadTargetStagePacketToTempTableFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetStagePacketToTempTableStop</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetStagePacketToTempTableStop(System.Exception exception)
    {
        this.logStopEvent('CDXSubjobUploadTargetStagePacketToTempTable', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetMergeStagedRecordToAXStart</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetMergeStagedRecordToAXStart()
    {
        this.logStartEvent('CDXSubjobUploadTargetMergeStagedRecordToAX', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetMergeStagedRecordToAXFailure</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetMergeStagedRecordToAXFailure(System.Exception exception)
    {
        this.logEvent('CDXSubjobUploadTargetMergeStagedRecordToAXFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetMergeStagedRecordToAXStop</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetMergeStagedRecordToAXStop(System.Exception exception)
    {
        this.logStopEvent('CDXSubjobUploadTargetMergeStagedRecordToAX', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetBulkInsertPacketToAxTableStart</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetBulkInsertPacketToAxTableStart()
    {
        this.logStartEvent('CDXSubjobUploadTargetBulkInsertPacketToAxTable', this.getEventDataFromContext());
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetBulkInsertPacketToAxTableWarning</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetBulkInsertPacketToAxTableWarning(System.Exception exception)
    {
        this.logEvent('CDXSubjobUploadTargetBulkInsertPacketToAxTableWarning', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetBulkInsertPacketToAxTableFailure</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetBulkInsertPacketToAxTableFailure(System.Exception exception)
    {
        this.logEvent('CDXSubjobUploadTargetBulkInsertPacketToAxTableFailure', this.getEventDataFromContext(exception), true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logCDXSubjobUploadTargetBulkInsertPacketToAxTableStop</Name>
				<Source><![CDATA[
    internal void logCDXSubjobUploadTargetBulkInsertPacketToAxTableStop(System.Exception exception)
    {
        this.logStopEvent('CDXSubjobUploadTargetBulkInsertPacketToAxTable', this.getEventDataFromContext(exception));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEventDataFromContext</Name>
				<Source><![CDATA[
    private container getEventDataFromContext(System.Exception exception = null)
    {
        boolean success; str errorMessage;
        [success, errorMessage] = this.getResultFromException([exception]);

        if (context)
        {
            return  [context.paramJobContext().paramSession(),
                int642Str(context.paramJobContext().paramDataGroupRecID()),
                context.paramJobContext().paramScheduleRecID(),
                context.paramJobContext().paramDataStoreName(),
                context.paramJobContext().paramJobID(),
                context.paramSubjobId(),
                context.paramTargetTableName(),
                context.paramRowsAffected(),
                context.paramJobContext().paramPackageId(),
                context.paramJobContext().paramCorrelationId(),
                this.duration('CDXSubjobUploadTargetCtxInitialization'),
                this.duration('CDXSubjobUploadTargetStagePacketToTempTable'),
                this.duration('CDXSubjobUploadTargetMergeStagedRecordToAX'),
                this.duration('CDXSubjobUploadTargetProcessing'),
                success,
                errorMessage,
                this.previousErrorEvent
            ];
        }
        else
        {
            return [0,
                '',
                0,
                '',
                '',
                '',
                '',
                0,
                nullValueFromType(Types::Guid),
                nullValueFromType(Types::Guid),
                0,
                0,
                0,
                0,
                false,
                errorMessage,
                this.previousErrorEvent
                ];
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>