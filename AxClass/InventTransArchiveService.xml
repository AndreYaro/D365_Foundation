<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransArchiveService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventTransArchiveService</c> class provides the service operation for archiving <c>InventTrans</c> records
///    in closed period when they are already financial updated one year ago.
/// </summary>
public class InventTransArchiveService
{ 
    SysGuidString           sessionId;
    FromDate                fromDate;
    ToDate                  toDate;
    ItemId                  lastItemId;
    InventModelTypeCache    inventModelTypeCache;
    boolean                 isSetttled;
    Batch                   batch;
    BatchHeader             batchHeader;
    int                     taskBundleSize;
    int64                   numberOfTasksToProcess;

    private InventInstrumentationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmSessionId</Name>
				<Source><![CDATA[
    public SysGuidString parmSessionId(SysGuidString _sessionId = sessionId)
    {
        sessionId = _sessionId;

        return sessionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBundleSize</Name>
				<Source><![CDATA[
    public int parmBundleSize(int _taskBundleSize = taskBundleSize)
    {
        taskBundleSize = _taskBundleSize;
        return taskBundleSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>archiveInventTrans</Name>
				<Source><![CDATA[
    public void archiveInventTrans(InventTransArchiveContract _dataContract)
    {
        #OCCRetryCount

        if (appl.ttsLevel() > 0)
        {
            throw error(strFmt("@SYS118114", funcName()));
        }

        this.checkSystem();
      
        this.parmFromDate(_dataContract.parmFromDate());
        this.parmToDate(_dataContract.parmToDate());
        this.parmBundleSize(_dataContract.parmBundleSize());

        sessionId = guid2Str(newGuid());

        try
        {
            logger = InventInstrumentationLogger::createLogger(classStr(InventTransArchiveService));
            using (var activityContext = logger.inventTransArchiveService().logMeasure(funcName()))
            {
                logger.inventTransArchiveService().logSessionId(activityContext, sessionId);
                logger.inventTransArchiveService().logBundleSize(activityContext, int2str(taskBundleSize));

                numberOfTasksToProcess = InventTransArchiveService::prepareInventTransArchivingTasks(sessionId, fromDate, toDate);
            }           
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::DuplicateKeyException)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::DuplicateKeyExceptionNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::DuplicateKeyException;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        if (!numberOfTasksToProcess)
        {
            info(strFmt("@SCM:NoFinancialUpdatedTrans", fromDate, toDate));
            return;
        }

        this.createInventTransArchiveProcessHistoryTable();

        InventTransArchiveTaskBundleHelper::createAndAssignBundle(sessionId, taskBundleSize);

        this.createBatchTasks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchTasks</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    protected void createBatchTasks()
    {
        using (var activityContext = logger.inventTransArchiveService().logMeasure(funcName()))
        {
            InventTransArchiveTaskBatchManager inventTransArchiveTaskBatchManager = InventTransArchiveTaskBatchManager::newFromBatchParameters(batchHeader, batch);
            inventTransArchiveTaskBatchManager.createArchiveBatchTasks(this.parmSessionId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSystem</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    protected void checkSystem()
    {
        batch = BatchHeader::getCurrentBatchTask();

        if (!batch)
        {
            throw error("@DataExpTool:ErrMsg_BatchJobSelect_1");
        }

        batchHeader = BatchHeader::construct(batch.BatchJobId);

        if (!batchHeader)
        {
            throw error("@DataExpTool:ErrMsg_BatchHeaderSelect_1");
        }

        if (InventTransArchiveService::existsNotFinishedInventTransArchiving()
            || InventTransArchiveService::existsAnotherInventTransArchivingJobRunning(batch.RecId))
        {
            throw error("@SCM:AnotherTransArchivingNotFinished");
        }

        boolean isSeparateJobFlightEnabled = InventDimLPCleanupSeparateUpdateRefTableFlight::instance().isEnabled();
        if (InventDimWithLicensePlateIdCleanupFeature::isEnabled()
            && (((InventDimLPCleanupJob::existsNotFinishedInventDimLPCleanupJob() && !isSeparateJobFlightEnabled)
              || (InventDimLPCleanupJob::existsInventTransNotUpdatedCleanupJob() && isSeparateJobFlightEnabled))
             || InventDimLPCleanupService::existsAnotherInventDimLPCleanupJobRunning()))
        {
            throw error("@SCM:InventDimLPCleanupAnotherJobNotFinished");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareInventTransArchivingTasks</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public static int64 prepareInventTransArchivingTasks(SysGuidString _sessionId, FromDate _fromDate, ToDate _toDate)
    {
        InventTransArchiveTask inventTransArchiveTask;
        InventTrans            inventTrans;
        int64                  recordsCount;

        int64 deleteInventTransArchiveTaskWithSingleTrans()
        {
            // Clean up tasks that only contains single inventory transaction record
            delete_from inventTransArchiveTask
                where inventTransArchiveTask.ArchivedTransCounts == 1
                   && inventTransArchiveTask.SessionId == _sessionId;

            return inventTransArchiveTask.RowCount();
        }

        InventTransArchiveState state = InventTransArchiveState::Waiting;

        InventInstrumentationLogger logger = InventInstrumentationLogger::createLogger(classStr(InventTransArchiveService));
        using (var activityContext = logger.inventTransArchiveService().logMeasure(funcName()))
        {
            InventModelGroupItem inventModelGroupItem;
            InventModelGroup     inventModelGroup;
            WHSInventEnabled     whsInventEnabled;
            InventTransOrigin    inventTransOrigin;
            boolean              mustBeClosed = NoYes::Yes;

            if (!_fromDate)
            {
                throw Error("@SYS91557");
            }

            // bundleCategory inits valus from 0
            int bundleCategory = 0;
            int64 insertedArchiveTaskRowCount = 0;

            boolean isWareHouseItem = NoYes::No;
            boolean isOnlyAffectsLocationAndBelow = NoYes::No;
            container transTypeOnlyAffectsLocationAndBelowContainer = InventTransOrigin::buildTransTypeOnlyAffectsLocationAndBelowContainer();
            container transTypesExcludedContainer = conIns(transTypeOnlyAffectsLocationAndBelowContainer,
                1, 
                InventTransType::SummedUp, InventTransType::InventTransArchive, InventTransType::WHSInventTransArchiveOnlyAffectsLocationAndBelow);

            ttsbegin;

            // Generate archiving tasks for settled item not on transaction only affects location and below
            insert_recordset inventTransArchiveTask(ArchivedTransCounts, SessionId, InventTransArchiveState, MustBeClosed,
                ItemId, InventDimId, IsTransTypeOnlyAffectsLocationAndBelow, IsWHSItem, BundleCategory)
                select count(RecId), _sessionId, state, mustBeClosed, ItemId, InventDimId, isOnlyAffectsLocationAndBelow, isWareHouseItem, bundleCategory from inventTrans
                    group by inventTrans.ItemId, inventTrans.InventDimId
                where inventTrans.ValueOpen       == InventTransOpen::No
                   && inventTrans.ProjId          == ''
                   && inventTrans.DateFinancial   >= _fromDate // Treats already financial updated when transacton has financial date
                   && inventTrans.DateFinancial   <= _toDate
                exists join inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                   && !(inventTransOrigin.ReferenceCategory in transTypesExcludedContainer)
                exists join inventModelGroupItem
                where inventModelGroupItem.ItemDataAreaId == inventTrans.DataAreaId
                   && inventModelGroupItem.ItemId         == inventTrans.ItemId
                exists join inventModelGroup
                where inventModelGroup.DataAreaId   == inventModelGroupItem.ModelGroupDataAreaId
                   && inventModelGroup.ModelGroupId == inventModelGroupItem.ModelGroupId
                   && inventModelGroup.InventModel  >= InventModel::FIFO
                   && inventModelGroup.InventModel  <= InventModel::AverageCostDate;

            recordsCount = inventTransArchiveTask.RowCount();
            if (recordsCount > 0)
            {
                recordsCount = recordsCount - deleteInventTransArchiveTaskWithSingleTrans();
                if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
                {
                    int originBundleCategory = bundleCategory;
                    bundleCategory++;

                    update_recordset inventTransArchiveTask
                    setting IsWHSItem = NoYes::Yes, BundleCategory = bundleCategory
                    where inventTransArchiveTask.SessionId == _sessionId
                       && inventTransArchiveTask.IsWHSItem == NoYes::No
                       && inventTransArchiveTask.BundleCategory == originBundleCategory
                    exists join whsInventEnabled
                    where whsInventEnabled.ItemId == inventTransArchiveTask.ItemId;

                    if (inventTransArchiveTask.RowCount() == 0)
                    {
                        bundleCategory = originBundleCategory;
                    }
                }
            }

            // Generate archiving tasks for none-settled item not on transaction only affects location and below
            mustBeClosed = NoYes::No;
            bundleCategory++;

            insert_recordset inventTransArchiveTask(ArchivedTransCounts, SessionId, InventTransArchiveState,MustBeClosed,
                ItemId, InventDimId, IsTransTypeOnlyAffectsLocationAndBelow, IsWHSItem, BundleCategory)
                select count(RecId), _sessionId, state, mustBeClosed, ItemId, InventDimId, isOnlyAffectsLocationAndBelow, isWareHouseItem, bundleCategory from inventTrans
                    group by inventTrans.ItemId, inventTrans.InventDimId
                where inventTrans.ProjId          == ''
                   && inventTrans.DateFinancial   >= _fromDate // Treats already financial updated when transacton has financial date
                   && inventTrans.DateFinancial   <= _toDate
                exists join inventTransOrigin
                where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                   && !(inventTransOrigin.ReferenceCategory in transTypesExcludedContainer)
                exists join inventModelGroupItem
                where inventModelGroupItem.ItemDataAreaId == inventTrans.DataAreaId
                   && inventModelGroupItem.ItemId         == inventTrans.ItemId
                exists join inventModelGroup
                where inventModelGroup.DataAreaId   == inventModelGroupItem.ModelGroupDataAreaId
                   && inventModelGroup.ModelGroupId == inventModelGroupItem.ModelGroupId
                   && inventModelGroup.InventModel  >= InventModel::StdCost
                   && inventModelGroup.InventModel  <= InventModel::MovingAverage;

            insertedArchiveTaskRowCount = inventTransArchiveTask.RowCount();
            recordsCount += insertedArchiveTaskRowCount;

            if (insertedArchiveTaskRowCount > 0)
            {
                recordsCount = recordsCount - deleteInventTransArchiveTaskWithSingleTrans();
                if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
                {
                    int originBundleCategory = bundleCategory;
                    bundleCategory++;

                    update_recordset inventTransArchiveTask
                    setting IsWHSItem = NoYes::Yes, BundleCategory = bundleCategory
                    where inventTransArchiveTask.SessionId      == _sessionId
                       && inventTransArchiveTask.IsWHSItem      == NoYes::No
                       && inventTransArchiveTask.BundleCategory == originBundleCategory
                    exists join whsInventEnabled
                    where whsInventEnabled.ItemId == inventTransArchiveTask.ItemId;

                    if (inventTransArchiveTask.RowCount() == 0)
                    {
                        bundleCategory = originBundleCategory;
                    }
                }
            }

            if (isConfigurationkeyEnabled(configurationKeyNum(WHSandTMS)))
            {
                mustBeClosed = NoYes::Yes;
                isWareHouseItem = NoYes::Yes;
                isOnlyAffectsLocationAndBelow = NoYes::Yes;

                bundleCategory++;

                // Generate archiving tasks for settled warehouse item on transaction only affects location and below
                insert_recordset inventTransArchiveTask(ArchivedTransCounts, SessionId, InventTransArchiveState, MustBeClosed,
                    ItemId, InventDimId, IsTransTypeOnlyAffectsLocationAndBelow, IsWHSItem, BundleCategory)
                    select count(RecId), _sessionId, state, mustBeClosed, ItemId, InventDimId, isOnlyAffectsLocationAndBelow, isWareHouseItem, bundleCategory from inventTrans
                        group by inventTrans.ItemId, inventTrans.InventDimId
                    where inventTrans.ValueOpen       == InventTransOpen::No
                       && inventTrans.ProjId          == ''
                       && inventTrans.DateFinancial   >= _fromDate // Treats already financial updated when transacton has financial date
                       && inventTrans.DateFinancial   <= _toDate
                    exists join whsInventEnabled
                    where whsInventEnabled.ItemId == inventTrans.ItemId
                    exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                       && inventTransOrigin.ReferenceCategory in transTypeOnlyAffectsLocationAndBelowContainer
                    exists join inventModelGroupItem
                    where inventModelGroupItem.ItemDataAreaId == inventTrans.DataAreaId
                       && inventModelGroupItem.ItemId         == inventTrans.ItemId
                    exists join inventModelGroup
                    where inventModelGroup.DataAreaId   == inventModelGroupItem.ModelGroupDataAreaId
                       && inventModelGroup.ModelGroupId == inventModelGroupItem.ModelGroupId
                       && inventModelGroup.InventModel  >= InventModel::FIFO
                       && inventModelGroup.InventModel  <= InventModel::AverageCostDate;

                insertedArchiveTaskRowCount = inventTransArchiveTask.RowCount();
                recordsCount += insertedArchiveTaskRowCount;

                if (insertedArchiveTaskRowCount > 0)
                {
                    bundleCategory++;
                    recordsCount = recordsCount - deleteInventTransArchiveTaskWithSingleTrans();
                }

                mustBeClosed = NoYes::No;
                // Generate archiving tasks for none-settled warehouse item on transaction only affects location and below
                insert_recordset inventTransArchiveTask(ArchivedTransCounts, SessionId, InventTransArchiveState, MustBeClosed,
                    ItemId, InventDimId, IsTransTypeOnlyAffectsLocationAndBelow, IsWHSItem, BundleCategory)
                    select count(RecId), _sessionId, state, mustBeClosed, ItemId, InventDimId, isOnlyAffectsLocationAndBelow, isWareHouseItem, bundleCategory from inventTrans
                        group by inventTrans.ItemId, inventTrans.InventDimId
                    where inventTrans.ProjId          == ''
                       && inventTrans.DateFinancial   >= _fromDate // Treats already financial updated when transacton has financial date
                       && inventTrans.DateFinancial   <= _toDate
                    exists join whsInventEnabled
                    where whsInventEnabled.ItemId == inventTrans.ItemId
                    exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.InventTransOrigin
                        && (inventTransOrigin.ReferenceCategory in transTypeOnlyAffectsLocationAndBelowContainer)
                    exists join inventModelGroupItem
                    where inventModelGroupItem.ItemDataAreaId == inventTrans.DataAreaId
                       && inventModelGroupItem.ItemId         == inventTrans.ItemId
                    exists join inventModelGroup
                    where inventModelGroup.DataAreaId   == inventModelGroupItem.ModelGroupDataAreaId
                       && inventModelGroup.ModelGroupId == inventModelGroupItem.ModelGroupId
                       && inventModelGroup.InventModel  >= InventModel::StdCost
                       && inventModelGroup.InventModel  <= InventModel::MovingAverage;

                insertedArchiveTaskRowCount = inventTransArchiveTask.RowCount();
                recordsCount += insertedArchiveTaskRowCount;

                if (insertedArchiveTaskRowCount > 0)
                {
                    recordsCount = recordsCount - deleteInventTransArchiveTaskWithSingleTrans();
                }
            }

            ttscommit;
            return recordsCount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventTransArchiveProcessHistoryTable</Name>
				<Source><![CDATA[
    public void createInventTransArchiveProcessHistoryTable()
    {
        ttsbegin;
        InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTable = InventTransArchiveProcessHistoryTable::create(fromDate, todate);
        inventTransArchiveProcessHistoryTable.SessionId = sessionId;
        inventTransArchiveProcessHistoryTable.TaskCount = numberOfTasksToProcess;
        inventTransArchiveProcessHistoryTable.BundleSize = taskBundleSize;
        inventTransArchiveProcessHistoryTable.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsAnotherInventTransArchivingJobRunning</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existsAnotherInventTransArchivingJobRunning(RecId _batchRecId = 0)
    {
        Batch    batch;
        BatchJob batchJob;

        select firstOnly RecId from batchJob
            exists join batch
            where batch.BatchJobId   == batchJob.RecId
               && (batch.Status      == BatchStatus::Executing || batch.Status == BatchStatus::Waiting)
               && batch.Company      == curext()
               && (!_batchRecId      || batch.RecId != _batchRecId)
               && (batch.ClassNumber == classNum(InventTransArchiveController)
               ||  batch.ClassNumber == classNum(InventTransArchiveResume)
               ||  batch.ClassNumber == classNum(InventTransArchiveProcessTask)
               ||  batch.ClassNumber == classNum(InventTransArchiveUpdateProcessHistoryTableTask));

        if (batchJob.RecId)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsNotFinishedInventTransArchiving</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static boolean existsNotFinishedInventTransArchiving()
    {
        ttsbegin;
        InventTransArchiveProcessHistoryTable inventTransArchiveProcessHistoryTableCheck;
        inventTransArchiveProcessHistoryTableCheck.selectLocked(false);

        select firstonly RecId from inventTransArchiveProcessHistoryTableCheck
            where inventTransArchiveProcessHistoryTableCheck.InventTransArchiveState < InventTransArchiveState::Ended
               && inventTransArchiveProcessHistoryTableCheck.Active == NoYes::Yes;
        ttscommit;

        return inventTransArchiveProcessHistoryTableCheck.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>