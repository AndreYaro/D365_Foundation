<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchPurchaseOrderController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchPurchaseOrderController</c> class starts the purchase order report.
/// </summary>
class PurchPurchaseOrderController extends TradeDocumentReportController implements BatchRetryable
{
    VendPurchOrderJour          vendPurchOrderJour;
    PurchPurchOrderJournalPrint purchPurchOrderJournalPrint;
    boolean                     isFromPurchTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>documentTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the title for the <c>PurchPurchaseOrder</c> report.
    /// </summary>
    /// <returns>
    /// The <c>PurchPurchaseOrder</c> title.
    /// </returns>
    protected str  documentTitle()
    {
        str                     documentTitle;
        boolean                 useUpdateInTitle;
        PurchTableAllVersions   purchTableAllVersions;
        PurchConfirmationRequestJour purchConfirmationRequestJour;

        PurchaseType purchaseType = PurchTable::find(vendPurchOrderJour.PurchId).PurchaseType;
        boolean isReturnType = (purchaseType == PurchaseType::ReturnItem);

        if (VendFormletterParameters::find().HighlightUpdatedLines == NoYes::Yes)
        {
            select firstonly purchTableAllVersions
                where purchTableAllVersions.PurchTableVersionRecId == vendPurchOrderJour.PurchTableVersion;

            select firstonly RecId from purchConfirmationRequestJour
                where purchConfirmationRequestJour.PurchTableVersion == vendPurchOrderJour.PurchTableVersion;

            useUpdateInTitle = !purchTableAllVersions.isFirstVersion() && !purchConfirmationRequestJour.RecId;
        }

        if (printCopyOriginal ==  PrintCopyOriginal::Copy)
        {
            if (vendPurchOrderJour.isProforma())
            {
                if (isReturnType)
                {
                    documentTitle = literalStr("@SYS4004612");
                }
                else
                {
                    documentTitle = useUpdateInTitle ? literalStr("@GLS180102") : literalStr("@SYS70795");
                }
            }
            else
            {
                if (isReturnType)
                {
                    documentTitle = literalStr("@SYS4004613");
                }
                else
                {
                    documentTitle = useUpdateInTitle ? literalStr("@GLS180101") : literalStr("@SYS25551");
                }
            }
        }
        else
        {
            if (vendPurchOrderJour.isProforma())
            {
                if (isReturnType)
                {
                    documentTitle = literalStr("@SYS4004604");
                }
                else
                {
                    documentTitle = useUpdateInTitle ? literalStr("@GLS180100") : literalStr("@SYS25550");
                }
            }
            else
            {
                if (isReturnType)
                {
                    documentTitle = literalStr("@SYS105841");
                }
                else
                {
                    documentTitle = useUpdateInTitle ? literalStr("@GLS180099") : literalStr("@SYS25545");
                }
            }
        }

        return documentTitle;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentIdentifier</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected str documentIdentifier()
    {
        return vendPurchOrderJour.PurchOrderDocNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleReportExceptions</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean handleReportExceptions()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextTableId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected TableId reportExceptionContextTableId()
    {
        return vendPurchOrderJour.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportExceptionContextRecordId</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected RecId reportExceptionContextRecordId()
    {
        return vendPurchOrderJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFirstJournal</Name>
				<Source><![CDATA[
    protected boolean getFirstJournal()
    {
        PurchTable purchTable;
        boolean    found;

        if (isFromPurchTable)
        {
            found = journalList.first(purchTable);
            vendPurchOrderJour = VendPurchOrderJour::findByPurchId(purchTable.PurchId);
            return found;
        }

        return journalList.first(vendPurchOrderJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextJournal</Name>
				<Source><![CDATA[
    protected boolean getNextJournal()
    {
        PurchTable purchTable;
        boolean    found;

        if (isFromPurchTable)
        {
            found = journalList.next(purchTable);
            vendPurchOrderJour = VendPurchOrderJour::findByPurchId(purchTable.PurchId);
            return found;
        }

        return journalList.next(vendPurchOrderJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAPwpTxt</Name>
				<Source><![CDATA[
    protected Notes getPSAPwpTxt(PurchId _purchId)
    {
        PSAVendPWPTxt psaVendPWPTxt;
        PurchLine     purchLine;

        select firstonly psaPwpTxt, RecId from psaVendPWPTxt
            exists join purchLine
                where purchLine.VendAccount     == psaVendPWPTxt.AccountNum
                   && purchLine.PurchId         == _purchId
                   && purchLine.IsPwp           == true
                   && psaVendPWPTxt.AccountCode == TableGroupAll::Table;

        if (!psaVendPWPTxt)
        {
            select firstonly psaPwpTxt, RecId from psaVendPWPTxt
                exists join purchLine
                    where purchLine.VendGroup       == psaVendPWPTxt.VendGroup
                       && purchLine.PurchId         == _purchId
                       && purchLine.IsPwp           == true
                       && psaVendPWPTxt.AccountCode == TableGroupAll::GroupId;

            if (!psaVendPWPTxt)
            {
                select firstonly RecId from purchLine
                    where purchLine.PurchId == _purchId
                       && purchLine.IsPwp   == true;
                if (purchLine)
                {
                    select firstonly psaPwpTxt,RecId from psaVendPWPTxt
                        where psaVendPWPTxt.AccountCode == TableGroupAll::All;
                }
            }
        }

        return psaVendPWPTxt.psaPwpTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPSAVendorTxt</Name>
				<Source><![CDATA[
    protected Notes getPSAVendorTxt(PurchId _purchId)
    {
        PSAVendPWPTxt psaVendPWPTxt;
        PurchLine     purchLine;

        select firstonly psaVendorTxt, RecId from psaVendPWPTxt
            exists join purchLine
                where purchLine.VendAccount          == psaVendPWPTxt.AccountNum
                   && purchLine.PurchId              == _purchId
                   && purchLine.psaRetainScheduleId  != ''
                   && psaVendPWPTxt.AccountCode      == TableGroupAll::Table;
        if (!psaVendPWPTxt)
        {
            select firstonly psaVendorTxt, RecId from psaVendPWPTxt
                exists join purchLine
                    where  purchLine.VendGroup           == psaVendPWPTxt.VendGroup
                        && purchLine.PurchId             == _purchId
                        && purchLine.psaRetainScheduleId != ''
                        && psaVendPWPTxt.AccountCode     == TableGroupAll::GroupId;
            if (!psaVendPWPTxt)
            {
                select firstonly RecId from purchLine
                    where  purchLine.PurchId             == _purchId
                        && purchLine.psaRetainScheduleId != '';
                if (purchLine)
                {
                    select firstonly psaVendorTxt from psaVendPWPTxt
                        where psaVendPWPTxt.AccountCode == TableGroupAll::All;
                }
            }
        }

        return psaVendPWPTxt.psaVendorTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the journal record that should be passed to the contract.
    /// </summary>
    /// <returns>
    /// The record ID of the journal record.
    /// </returns>
    protected RecId getRecordId()
    {
        return vendPurchOrderJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchPurchOrderJournalPrint))
        {
            purchPurchOrderJournalPrint = this.parmArgs().caller();
        }

        journalList = this.splitToRecordList();

        if (this.parmArgs().record() && this.parmArgs().record().TableId == tableNum(PurchTable))
        {
            isFromPurchTable = true;
        }

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::PurchaseOrderRequisition);
        formLetterReport.parmPrintType(printCopyOriginal);

        if (purchPurchOrderJournalPrint)
        {
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(purchPurchOrderJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(purchPurchOrderJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(purchPurchOrderJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepares the contract before the report is run.
    /// </summary>
    protected void modifyContract()
    {
        SRSTmpDataStore             srsTmpDataStore;
        PurchPurchaseOrderContract  purchPurchaseOrderContract = contract as PurchPurchaseOrderContract;
        Notes                       psaVendorTxt               = '';
        Notes                       psaPWPTxt                  = '';

        if (purchPurchOrderJournalPrint)
        {
            srsTmpDataStore.Value   = purchPurchOrderJournalPrint.pack();
            srsTmpDataStore.insert();
            purchPurchaseOrderContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
        }

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            psaVendorTxt = this.getPSAVendorTxt(vendPurchOrderJour.PurchId);
            psaPWPTxt    = this.getPSAPwpTxt(vendPurchOrderJour.PurchId);
        }

        purchPurchaseOrderContract.parmPSAVendorTxt(psaVendorTxt);
        purchPurchaseOrderContract.parmPSAPwpTxt(psaPWPTxt);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    protected void output()
    {
        PurchTable purchTable = PurchTable::find(vendPurchOrderJour.PurchId);

        using (SysInstrumentationActivityContext activityContext = this.instrumentationLogger().documentReport().output(this.reportExceptionContextTableId(), this.reportExceptionContextRecordId()))
        {
            formLetterReport.loadPrintSettings(vendPurchOrderJour, purchTable, purchTable.LanguageId);

            if (PurchOrderControllerSendPrintReportEmailToggle::instance().isEnabled()
                || this.validateReportPrintJobSettingsEmailTo(activityContext.getActivity()))
            {
                this.parmReportContract().parmRdlContract().parmLanguageId(purchTable.LanguageId);
                this.parmReportContract().parmRdlContract().parmLabelLanguageId(purchTable.LanguageId);

                super();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateReportPrintJobSettingsEmailTo</Name>
				<Source><![CDATA[
    protected internal boolean validateReportPrintJobSettingsEmailTo(SysInstrumentationActivity _activity)
    {
        PrintMgmtReportRun printMgmtReportRunLocal = formLetterReport.parmReportRun();
        boolean ret = true;

        _activity.addCustomProperty(classstr(PrintMgmtReportRun), int2Str(printMgmtReportRunLocal.getPrintSettingsCount()));

        if (printMgmtReportRunLocal.next())
        {
            SRSPrintDestinationSettings printSettings = printMgmtReportRunLocal.settingDetail().parmPrintJobSettings();
            if (printSettings.printMediumType() == SRSPrintMediumType::Email)
            {
                str emailTo = printSettings.emailTo();

                if (!emailTo)
                {
                    ret = checkFailed(strFmt("@SCM:PurchOrderEmailWasNotSent", vendPurchOrderJour.PurchId));
                }
                else if (!SysEmailDistributor::validateEmail(emailTo))
                {
                    ret = checkFailed(strFmt("@SCM:PurchOrderEmailWasNotSentInvalidEmail", vendPurchOrderJour.PurchId, emailTo));
                }
            }

            _activity.addCustomProperty(enumStr(SRSPrintMediumType), enum2Symbol(enumNum(SRSPrintMediumType), printSettings.printMediumType()));

            printMgmtReportRunLocal.reset();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDataContractRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>VendPurchOrderJour</c> record.
    /// </summary>
    /// <param name="_common">
    /// The <c>VendPurchOrderJour</c> record.
    /// </param>
    protected void setDataContractRecord(Common _common)
    {
        vendPurchOrderJour = args.record();
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitToRecordList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyses the <c>args</c> object and converts the content to a <c>RecordSortedList</c> object.
    /// </summary>
    /// <returns>
    /// A <c>RecordSortedList</c> with the relevant records from the <c>args</c> object of the class.
    /// </returns>
    protected RecordSortedList splitToRecordList()
    {
        RecordSortedList            recordList;

        if (this.parmArgs().record())
        {
            recordList             = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            recordList             = this.parmArgs().object();
        }
        return recordList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchPurchaseOrderController construct()
    {
        return new PurchPurchaseOrderController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController          formLetterController = PurchPurchaseOrderController::construct();
        PurchPurchaseOrderController    controller;

        if (TradeFormHelper::isCalledFromForm(_args, formStr(VendPurchOrderJournalListPage)))
        {
            _args.record(VendPurchOrderJour::findRecId(_args.record().RecId));
        }

        controller = formLetterController;
        controller.initArgs(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderConfirmationRequest).getDefaultReportFormat());

        if (classIdGet(_args.caller()) == classNum(PurchPurchOrderJournalPrint))
        {
            PurchPurchaseOrderController::subscribeToRenderingCompleted(formLetterController);
        }

        formLetterController.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribeToRenderingCompleted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes a method to handle the <c> SrsReportRunController </c> renderingCompleted.
    /// </summary>
    /// <param name = "_formLetterController">The <c>SrsReportRunController </c> instance.</param>
    protected static void subscribeToRenderingCompleted(SrsReportRunController _formLetterController)
    {
        _formLetterController.renderingCompleted += eventhandler(PurchPurchOrderJournalPrint::renderingCompleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newDataContract</Name>
				<Source><![CDATA[
    public static SrsReportDataContract newDataContract(Args _args)
    {
        PurchPurchaseOrderController formLetterController = PurchPurchaseOrderController::construct();

        if (_args.dataset() != tableNum(VendPurchOrderJour))
        {
            throw error(strFmt("@SYS19306",funcName()));
        }

        formLetterController.initDataContract(_args, PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchaseOrderConfirmationRequest).getDefaultReportFormat());

        return formLetterController.parmReportContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>