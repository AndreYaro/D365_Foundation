<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOperationProcessorUpdateProductWarehouseAvailabilityService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using DM = Microsoft.Dynamics.Commerce.Runtime.DataModel;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

internal final class RetailOperationProcessorUpdateProductWarehouseAvailabilityService extends RetailDocumentOperationProcessorBase
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    private const str OnHandChangeEventIdPrefix = "ohce~";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RetailOperationProcessorUpdateProductWarehouseAvailabilityService construct(RetailDocumentOperationProcessorParameters _parameters)
    {
        return new RetailOperationProcessorUpdateProductWarehouseAvailabilityService(_parameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    protected container processInternal()
    {
        str productWarehouseAvailabilityCountCommitDocumentStr = conPeek(this.requestContainer, 1);

        DM.ProductWarehouseAvailabilityCountCommitDocument productWarehouseAvailabilityCountCommitDocument = RetailTransactionServiceJsonHelper::DeserializeProductWarehouseAvailabilityCountCommitDocumentFromJSON(productWarehouseAvailabilityCountCommitDocumentStr);

        // Init wmsOnlineCountingServer
        WMSOnlineCountingServer wmsOnlineCountingServer = WMSOnlineCountingServer::construct();
        TmpWMSOnlineCounting tmpWMSOnlineCounting = wmsOnlineCountingServer.tmpWMSOnlineCounting();

        List offsetItems = new List(Types::AnyType);
        System.Exception ex;
        IEnumerator productWarehouseAvailabilityAdjustmentEnumerator = productWarehouseAvailabilityCountCommitDocument.ProductWarehouseAvailabilityAdjustments.GetEnumerator();
        while (productWarehouseAvailabilityAdjustmentEnumerator.MoveNext())
        {
            DM.ProductWarehouseAvailabilityAdjustment productWarehouseAvailabilityAdjustment = productWarehouseAvailabilityAdjustmentEnumerator.Current as DM.ProductWarehouseAvailabilityAdjustment;

            InventDim inventDim;
            inventDim.InventColorId     = productWarehouseAvailabilityAdjustment.ColorId;
            inventDim.InventSizeId      = productWarehouseAvailabilityAdjustment.SizeId;
            inventDim.InventStyleId     = productWarehouseAvailabilityAdjustment.StyleId;
            inventDim.configId          = productWarehouseAvailabilityAdjustment.ConfigurationId;
            inventDim.InventLocationId  = productWarehouseAvailabilityAdjustment.InventoryLocationId;
            inventDim.InventSiteId      = productWarehouseAvailabilityAdjustment.InventorySiteId;
            inventDim = InventDim::FindOrCreate(inventDim);

            IEnumerator measureQuantityEmulator = productWarehouseAvailabilityAdjustment.MeasureQuantities.GetEnumerator();
            while (measureQuantityEmulator.MoveNext())
            {
                ttsbegin;

                DM.InventoryAdjustmentMeasureQuantity measureQuantity = measureQuantityEmulator.Current as DM.InventoryAdjustmentMeasureQuantity;
                real adjustQuantity = measureQuantity.Quantity;

                tmpWMSOnlineCounting.clear();
                tmpWMSOnlineCounting.itemId         = productWarehouseAvailabilityAdjustment.ItemId;
                tmpWMSOnlineCounting.inventDimId    = inventDim.inventDimId;
                tmpWMSOnlineCounting.QtyOnHand      = productWarehouseAvailabilityAdjustment.PhysicalInventory;
                tmpWMSOnlineCounting.PdsCWQtyOnHand = 0;
                tmpWMSOnlineCounting.QtyCounted     = InventTable::applyRoundingToInventQty(tmpWMSOnlineCounting.QtyOnHand + adjustQuantity, productWarehouseAvailabilityAdjustment.ItemId);
                tmpWMSOnlineCounting.insert();

                container offsetItemData = [productWarehouseAvailabilityAdjustment.ItemId, inventDim.inventDimId, inventDim.DataAreaId, adjustQuantity];
                offsetItems.addEnd(offsetItemData);

                ttscommit;
            }
        }
        try
        {
            // Make adjustment by wmsOnlineCountingServer
            wmsOnlineCountingServer.run();
        }
        catch(ex)
        {
            str dateTimeStr = DateTimeUtil::toStr(DateTimeUtil::utcNow());
            eventSource.EventWriteUpdateProductWarehouseAvailabilityFailed(dateTimeStr, ex.ToString());
            throw error(strFmt("@Retail:UpdateProductWarehouseAvailabilityFailed", dateTimeStr, ex.ToString()));
        }

        // Do offset in IV
        ListEnumerator offsetItemsEnumerator = offsetItems.GetEnumerator();
        while (offsetItemsEnumerator.MoveNext())
        {
            container offsetItemData = offsetItemsEnumerator.Current();

            ttsbegin;

            // offset delta quantity
            InventInventoryDataServiceAdjustmentOffsetQueue adjustmentOffsetQueue;

            // Only for backward compatibility, remove it after 10.0.39
            adjustmentOffsetQueue.InventTransType   = InventTransType::Sales;
            adjustmentOffsetQueue.StatusReceipt     = StatusReceipt::None;
            adjustmentOffsetQueue.StatusIssue       = StatusIssue::Sold;

            adjustmentOffsetQueue.Datasource        = InventInventoryDataServiceCommerceIntegrationHelper::Datasource;;
            adjustmentOffsetQueue.PhysicalMeasure   = InventInventoryDataServiceCommerceIntegrationHelper::SoldOffset;
            adjustmentOffsetQueue.ItemId            = conPeek(offsetItemData, 1);
            adjustmentOffsetQueue.OffsetInventDimId = conPeek(offsetItemData, 2);
            adjustmentOffsetQueue.Company           = conPeek(offsetItemData, 3);
            adjustmentOffsetQueue.OffsetQty         = conPeek(offsetItemData, 4);
            adjustmentOffsetQueue.InventDimId       = conPeek(offsetItemData, 2);

            adjustmentOffsetQueue.insert();

            ttscommit;
        }

        return ['success'];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>