<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099S</Name>
	<SourceCode>
		<Declaration><![CDATA[
class Tax1099S extends Tax1099Base implements Tax1099IForm
{
    const Tax1099Box S2 = 'S-2';
    const Tax1099Box S5 = 'S-5';
    const str ReturnType = 'S';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillAmountCodes</Name>
				<Source><![CDATA[
    public str fillAmountCodes(Tax1099IRSPayerRec _localIRSPayerRec)
    {
        str tmpAmountCodes = '';

        select sum(Amount2), sum(Amount5)
        from _localIRSPayerRec
            where _localIRSPayerRec.Tax1099Type == Tax1099Type::F1099S;

        if (_localIRSPayerRec.Amount2 > 0)
        {
            tmpAmountCodes += Two; // S-2
        }

        if (_localIRSPayerRec.Amount5 > 0)
        {
            tmpAmountCodes += Five; // S-5
        }

        return tmpAmountCodes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReturnType</Name>
				<Source><![CDATA[
    public str getReturnType()
    {
        return ReturnType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099Type</Name>
				<Source><![CDATA[
    public Tax1099Type getTax1099Type()
    {
        return Tax1099Type::F1099S;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasFederalIncomeTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasFederalIncomeTaxWithheldField()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasStateTaxWithheldField</Name>
				<Source><![CDATA[
    public boolean hasStateTaxWithheldField()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>outputPartialBRecord</Name>
				<Source><![CDATA[
    public str outputPartialBRecord(str _outputRecord, Tax1099IRSPayerRec _localIRSPayerRec)
    {
        str tempTax1099PropertyOrServicesStr = '1';
        int tempDay;
        int tempMonth;
        int tempYear;
        str tempDayStr;
        str tempMonthStr;
        str tempDate;

        outputRecord = _outputRecord;

        // Blank. Field Position: 544-546

        //Property or Service Indicator. Field Position: 547
        if (_localIRSPayerRec.Tax1099PropertyOrServices == NoYes::Yes)
        {
            this.strInsert(tempTax1099PropertyOrServicesStr, 547);
        }

        // Date of Closing. Field Position: 548-555
        //This needs to be specially formated for the file, hence the extra logic.
        tempDay = dayOfMth(_localIRSPayerRec.Tax1099DateOfClosing);
        tempMonth = mthOfYr(_localIRSPayerRec.Tax1099DateOfClosing);
        tempYear = year(_localIRSPayerRec.Tax1099DateOfClosing);

        //tag on a 0 if the month is less than 10.
        if (tempMonth < 10)
        {
            tempMonthStr = '0' + int2str(tempMonth);
        }
        else
        {
            tempMonthStr = int2str(tempMonth);
        }

        //tag on a 0 if the day is less than 10.
        if (tempDay < 10)
        {
            tempDayStr = '0' + int2str(tempDay);
        }
        else
        {
            tempDayStr = int2str(tempDay);
        }

        tempDate = int2str(tempYear) + tempMonthStr + tempDayStr;
        this.strInsert(tempDate, 548);

        // Address or Legal Description: 556-594
        this.strInsert(strRemoveCr(_localIRSPayerRec.Tax1099AddressOrLegalDesc), 556);

        // Foreign Transferor: 595
        this.strInsert(strRemoveCr(int2str(_localIRSPayerRec.Tax1099ForeignIndicator)), 595);

        // Blank. Field Position: 596-662

        // Special Data Enties (Blank). Field Position: 663-772

        // State Income Tax Withheld. Field Position: 723-734
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.StateTaxWitheld, 12), 723);

        // Local Income Tax Withheld. Field Position: 735-746
        this.strInsert(this.formatIRSAmount(_localIRSPayerRec.LocalTaxWithheld, 12), 735);

        // Blank. Field Position: 747-748

        // Blank. Field Position: 749-750

        return outputRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendTax1099ToOutputTable</Name>
				<Source><![CDATA[
    public void sendTax1099ToOutputTable(Tax1099IRSPayerRec _tax1099IRSPayerRec, Tax1099IRSPayerRec _tax1099IRSPayerRecTmp, BankRegNum _payersRTN, Tax1099State _onlyStateToPrint, TransDate _fromDate, TransDate _toDate)
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        while select _tax1099IRSPayerRec
        {
            if (_tax1099IRSPayerRec.Amount2 + _tax1099IRSPayerRec.Amount5 > 0)
            {
                _tax1099IRSPayerRecTmp.CompanyName = companyInfo.name();
                _tax1099IRSPayerRecTmp.CompanyAddress = companyInfo.postalAddress().Address;
                _tax1099IRSPayerRecTmp.CompanyPhone = companyInfo.phone();
                _tax1099IRSPayerRecTmp.CompanyTax1099RegNum = companyInfo.Tax1099RegNum;
                _tax1099IRSPayerRecTmp.Tax1099RegNum = _tax1099IRSPayerRec.Tax1099RegNum;
                _tax1099IRSPayerRecTmp.Amount1 = _tax1099IRSPayerRec.Amount1;
                _tax1099IRSPayerRecTmp.Amount2 = _tax1099IRSPayerRec.Amount2;
                _tax1099IRSPayerRecTmp.Amount3 = _tax1099IRSPayerRec.Amount3 + _tax1099IRSPayerRec.Amount6
                    + _tax1099IRSPayerRec.Amount7 + _tax1099IRSPayerRec.Amount8;
                _tax1099IRSPayerRecTmp.Amount4 = _tax1099IRSPayerRec.Amount4;
                _tax1099IRSPayerRecTmp.Amount5 = _tax1099IRSPayerRec.Amount5;
                _tax1099IRSPayerRecTmp.Amount6 = _tax1099IRSPayerRec.Amount6;
                _tax1099IRSPayerRecTmp.Amount7 = _tax1099IRSPayerRec.Amount7;
                _tax1099IRSPayerRecTmp.Amount9 = _tax1099IRSPayerRec.Amount9;
                _tax1099IRSPayerRecTmp.Amount8 = _tax1099IRSPayerRec.Amount8;
                _tax1099IRSPayerRecTmp.PayeeNameLine = _tax1099IRSPayerRec.PayeeNameLine;
                _tax1099IRSPayerRecTmp.Addressing = _tax1099IRSPayerRec.address_on_one_Line();
                _tax1099IRSPayerRecTmp.CityStateZip = _tax1099IRSPayerRec.city_State_Zip();
                _tax1099IRSPayerRecTmp.AcctNumForPayee = _tax1099IRSPayerRec.AcctNumForPayee;
                _tax1099IRSPayerRecTmp.SecondTIN = _tax1099IRSPayerRec.SecondTIN;
                _tax1099IRSPayerRecTmp.ForeignCountryRegionName = _tax1099IRSPayerRec.ForeignCountryRegionName;
                _tax1099IRSPayerRecTmp.PayersRTN = _payersRTN;
                _tax1099IRSPayerRecTmp.Tax1099AddressOrLegalDesc = _tax1099IRSPayerRec.Tax1099AddressOrLegalDesc;
                _tax1099IRSPayerRecTmp.Tax1099DateOfClosing = _tax1099IRSPayerRec.Tax1099DateOfClosing;
                _tax1099IRSPayerRecTmp.Tax1099PropertyOrServices = _tax1099IRSPayerRec.Tax1099PropertyOrServices;
                _tax1099IRSPayerRecTmp.Tax1099ForeignIndicator = _tax1099IRSPayerRec.Tax1099ForeignIndicator;

                _tax1099IRSPayerRecTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>set1099OnPayerRec</Name>
				<Source><![CDATA[
    public void set1099OnPayerRec(Tax1099Summary _localTax1099Summary, Tax1099IRSPayerRec _tax1099IRSPayerRec)
    {
        switch (Tax1099Fields::find(_localTax1099Summary.Tax1099Fields).Tax1099Box)
        {
            case S2:
                _tax1099IRSPayerRec.Amount2 = _localTax1099Summary.SettleTax1099Amount;
                _tax1099IRSPayerRec.Amount5 = _localTax1099Summary.Tax1099BuyersTax;
                break;
        }

        _tax1099IRSPayerRec.Tax1099AddressOrLegalDesc = _localTax1099Summary.Tax1099AddressOrLegalDesc;
        _tax1099IRSPayerRec.Tax1099DateOfClosing = _localTax1099Summary.Tax1099DateOfClosing;
        _tax1099IRSPayerRec.Tax1099PropertyOrServices = _localTax1099Summary.Tax1099PropertyOrServices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099Fields</Name>
				<Source><![CDATA[
    public boolean updateTax1099Fields(Tax1099Fields _tax1099FieldsIM, RecordInsertList _ril, boolean _forceUpdate)
    {
        boolean fieldsModified = false;

        fieldsModified += this.verifyRecord(_tax1099FieldsIM, _ril, S2, "@SPS1109", 0, Tax1099Type::F1099S, _forceUpdate);

        return fieldsModified;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTotals</Name>
				<Source><![CDATA[
    public void updateTotals(Tax1099Fields _tax1099Fields, Tax1099IRSPayerRec _localIRSPayerRec, Tax1099Summary _tax1099Summary)
    {
        switch (_tax1099Fields.Tax1099Box)
        {
            case S2:
                _localIRSPayerRec.Amount2 += _tax1099Summary.SettleTax1099Amount;
                break;

            case S5:
                _localIRSPayerRec.Amount5 += _tax1099Summary.SettleTax1099Amount;
                break;
        }

        _localIRSPayerRec.Tax1099AddressOrLegalDesc = _tax1099Summary.Tax1099AddressOrLegalDesc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>grossProceeds</Name>
				<Source><![CDATA[
    // Static box methods ordered by form position
    public static Tax1099FieldIdentifier grossProceeds()
    {
        return Tax1099FieldIdentifier::construct(S2, Tax1099Type::F1099S);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buyersPartRealEstateTax</Name>
				<Source><![CDATA[
    public static Tax1099FieldIdentifier buyersPartRealEstateTax()
    {
        return Tax1099FieldIdentifier::construct(S5, Tax1099Type::F1099S);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>