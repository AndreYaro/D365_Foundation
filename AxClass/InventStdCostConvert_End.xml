<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdCostConvert_End</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventStdCostConvert_End</c> class finalizes the standard cost conversion process.
/// </summary>
class InventStdCostConvert_End extends InventStdCostConvert implements BatchRetryable
{
    CostingVersion  costingVersion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activateCostingVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Triggers the <c>InventItemPriceTransferJob</c> class to transfer the remaining prices of the
    ///    conversion costing version.
    /// </summary>
    protected void activateCostingVersion()
    {
        this.initCostingVersion();

        if (costingVersion.BlockActivation == NoYesCombo::Yes)
        {
            costingVersion.BlockActivation = NoYesCombo::No;
            costingVersion.update();
        }

        // Transfer the costing version
        InventItemPriceActivationJob::activateCostingVersionCost(costingVersion);

        // Reread the costingVersion here, because the record get updated during inventItemPriceActiavationJob
        costingVersion.reread();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStatus</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks, in addition to the parent class, if all items have been converted.
    /// </summary>
    /// <returns>
    ///    false if the all the items have not been converted; otherwise, true.
    /// </returns>
    protected boolean checkStatus()
    {
        InventStdCostConvItem   inventStdCostConvItem;

        boolean ret = super();

        if (ret)
        {
            // Now check if all the items have been converted
            select firstonly inventStdCostConvItem
                where inventStdCostConvItem.StdCostConvRecId == this.inventStdCostConv().RecId
                   && inventStdCostConvItem.Status           != InventStdCostConvItemStatus::Converted;

            if (inventStdCostConvItem)
            {
                ret = checkFailed("@SYS121567");
            }

            // Check if a valid ledger account for the revaluation does exist
            if (this.inventStdCostConv().Status != InventStdCostConvStatus::InProgress)
            {
                ret = checkFailed("@SYS121568");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finalizes the conversion process.
    /// </summary>
    /// <remarks>
    ///    The following sequence will be executed:
    ///    <list type="bullet">
    ///       <item>
    ///          <description>Start remaining prices of the costing version.</description>
    ///       </item>
    ///       <item>
    ///          <description>Change the costing version to standard cost.</description>
    ///       </item>
    ///       <item>
    ///          <description>Change the status to completed.</description>
    ///       </item>
    ///    </list>
    /// </remarks>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An OCC conflict cannot be recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An OCC conflict cannot be recovered.
    /// </exception>
    protected void execute()
    {
        #OCCRetryCount

        setPrefix(InventStdCostConvert_End::description());

        try
        {
            if (this.inventStdCostConv())
            {
                ttsbegin;
                // If necessary, transfer all the remaining prices
                if (activateCostingVersion == NoYes::Yes)
                {
                    this.activateCostingVersion();
                }

                // Switch the costing version to std
                this.switchCostingVersionToStd();

                // Set the status of the conversion to completed
                this.setInventStdCostConvStatus(InventStdCostConvStatus::Completed);

                ttscommit;

                info("@SYS121566");
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the caption for a batch record.
    /// </summary>
    /// <param name="batch">
    ///    The batch record where the caption should be set.
    /// </param>
    public void initBatch(Batch batch)
    {
        super(batch);

        batch.Caption = InventStdCostConvert_End::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCostingVersion</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the costing version record.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    No valid costing version could be found, the conversion will exit.
    /// </exception>
    protected void initCostingVersion()
    {
        if (!costingVersion)
        {
            costingVersion = CostingVersion::find(this.inventStdCostConv().CostingVersionId, true);

            if (!costingVersion)
            {
                throw error("@SYS121569");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>switchCostingVersionToStd</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the costing version record to standard cost.
    /// </summary>
    protected void switchCostingVersionToStd()
    {
        this.initCostingVersion();

        // Switch to standard
        costingVersion.switchToStandard();
        costingVersion.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>InventStdCostConvert_End</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>InventStdCostConvert_End</c> class based on the inventory standard cost
    ///    convert work type.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The function is called by using an invalid conversion work type.
    /// </exception>
    public static InventStdCostConvert_End construct()
    {
        return new InventStdCostConvert_End();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS121565";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>
