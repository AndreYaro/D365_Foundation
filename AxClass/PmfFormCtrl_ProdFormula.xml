<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_ProdFormula</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PmfFormCtrl_ProdFormula extends PmfFormCtrl
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event method to call when executing the the form data source event <c>modified</c> on a field.
    /// </summary>
    /// <param name="_fieldId">Id of field that was modified.</param>
    public void fieldModified(fieldId _fieldId)
    {
        ProdBOM prodBOM = buffer;

        super(_fieldId);

        switch (_fieldId)
        {
            // the itemid can only be changed on new records. As the BOMQty might have
            // already been initialized, we need to eventually reset this quantity.
            case fieldnum(ProdBOM,ItemId):
                if (PdsGlobal::pdsIsCWItem(prodBOM.ItemId))
                {
                    prodBOM.bomQty = 0;
                    if (!prodBOM.PdsCWQty)
                    {
                        prodBOM.PdsCWQty = 1;
                        this.fieldModified(fieldnum(ProdBOM,PdsCWQty));
                    }
                }
                else if (this.isCatchWeightEnabled())
                {
                    prodBOM.PdsCWQty = 0;
                }
                this.updateDesign();
                break;

            case fieldnum(ProdBOM, bomConsump),
                 fieldnum(ProdBOM, PmfPctEnable):
                this.updateDesign();
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        PdsCWFormCtrl   cwFormCtrl;

        super();

        if (this.isCatchWeightEnabled())
        {
            cwFormCtrl = PdsCWFormCtrl_Std::construct();
            cwFormCtrl.parmFieldIds(PdsCWValidation::fieldMapFromContainers(
                [[fieldnum(ProdBOM,PmfQtyWithoutYield),
                    fieldnum(ProdBOM,PdsCWQty),
                    false,
                    fieldnum(ProdBOM,UnitId)]]
                ));
            cwFormCtrl.parmItemFieldId(fieldnum(ProdBOM,ItemId));
            cwFormCtrl.parmUnitMethodStr(tablemethodstr(ProdBOM,pdsCWUnitId));

            this.addSubFormCtrl(cwFormCtrl);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the controls on the form.
    /// </summary>
    public void updateDesign()
    {
        ProdBOM prodBOM         = buffer;
        boolean isCatchWeight   = PdsGlobal::pdsIsCWItem(prodBOM.ItemId);
        boolean allowEdit       = ProdTable::find(prodBOM.ProdId).status().isBefore(ProdStatus::StartedUp);

        super();

        this.enableDSField(fieldnum(ProdBOM, PmfPctEnable),
                (prodBOM.bomConsump == BOMConsumpType::Variable
                    && !isCatchWeight
                    && allowEdit));

        this.enableDSField(fieldnum(ProdBOM, PmfScalable),
                (prodBOM.bomConsump == BOMConsumpType::Variable
                    && !prodBOM.PmfPctEnable
                    && !isCatchWeight
                    && allowEdit));

        this.enableDSField(fieldnum(ProdBOM, PmfFormulaPct),
                (prodBOM.bomConsump == BOMConsumpType::Variable
                    && prodBOM.PmfPctEnable
                    && !isCatchWeight
                    && allowEdit));

        this.enableDSField(fieldnum(ProdBOM, PmfQtyWithoutYield),
                (!prodBOM.PmfPctEnable
                    && !isCatchWeight
                    && allowEdit));

        this.enableDSField(fieldnum(ProdBOM,ScrapVar),!isCatchWeight && allowEdit);
        this.enableDSField(fieldnum(ProdBOM,ScrapConst),!isCatchWeight && allowEdit);
        this.enableDSField(fieldnum(ProdBOM,RoundUp),!isCatchWeight && allowEdit);
        this.enableDSField(fieldnum(ProdBOM,RoundUpQty),!isCatchWeight && allowEdit);

        if (this.isCatchWeightEnabled())
        {
            this.enableDSField(fieldnum(ProdBOM,PdsCWQty),isCatchWeight && allowEdit);
            this.enableDSField(fieldnum(ProdBOM,PdsCWInventCalc),isCatchWeight && allowEdit);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PmfFormCtrl_ProdFormula</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>PmfFormCtrl_ProdFormula</c> class.
    /// </returns>
    public static PmfFormCtrl_ProdFormula construct()
    {
        return new PmfFormCtrl_ProdFormula();
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new form control handler from the form element.
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for.
    /// </param>
    /// <returns>
    /// The created form control handler.
    /// </returns>
    public static PmfFormCtrl_ProdFormula constructFromForm(FormRun _fr)
    {
        PmfFormCtrl frmCtrl;

        frmCtrl = PmfFormCtrl_ProdFormula::construct();
        frmCtrl.parmFormRun(_fr);
        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>