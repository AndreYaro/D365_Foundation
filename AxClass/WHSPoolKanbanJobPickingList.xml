<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSPoolKanbanJobPickingList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSPoolKanbanJobPickingList</c> class holds business logic for the <c>WHSKanbanJobPickingListPool</c> table.
/// </summary>
public class WHSPoolKanbanJobPickingList extends WHSPool
{
    WHSKanbanJobPickingListPool kanbanJobPickingListPool;
    KanbanJobPickingListAll     kanbanJobPickingListAll;
    InventTransOriginId         inventTransOriginId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addWavedQty</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Method is replaced by the addWavedHandlingQty method. Please file an extensibility request if access is required.', true, 30\9\2019)]
    protected void addWavedQty(InventQty _qtyToAdd)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.itemId());

        this.addWavedHandlingQuantities(_qtyToAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWavedHandlingQuantities</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected void addWavedHandlingQuantities(InventHandlingQty _qtyToAdd)
    {
        ttsBegin;
        kanbanJobPickingListPool = WHSKanbanJobPickingListPool::find(kanbanJobPickingListPool.InventTransId,true);

        kanbanJobPickingListPool.WavedQty += _qtyToAdd;
        kanbanJobPickingListPool.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLastBatchConsumed</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the last consumed batch ID.
    /// </summary>
    /// <param name="_inventDim">
    ///    The inventory dimension that holds the warehouse location where the batch was consumed.
    /// </param>
    /// <returns>
    ///    The batch ID.
    /// </returns>
    /// <remarks>
    ///    This method assumes that the order in which kanbans are created somewhat correlates to when they
    ///    are executed and consume raw materials.
    /// </remarks>
    public InventBatchId determineLastBatchConsumed(InventDim  _inventDim)
    {
        kanbanJobPickingList    kanbanJobPickingListLocal;
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        InventDim               inventDim;

        select firstOnly RecId from kanbanJobPickingListLocal
            order by inventTrans.DateInvent desc, kanbanJobPickingListLocal.RecId desc
            where kanbanJobPickingListLocal.ItemId        == this.itemId()
               && kanbanJobPickingListLocal.InventTransId != ''
            join inventTransId from inventTransOrigin
            where inventTransOrigin.InventTransId == kanbanJobPickingListLocal.InventTransId
                join TableId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    join inventBatchId from inventDim
                    where inventDim.inventDimId   == inventTrans.inventDimId
                       && inventDim.wMSLocationId == _inventDim.wMSLocationId;

        return inventDim.inventBatchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLastSerialConsumed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the last consumed serial ID.
    /// </summary>
    /// <param name="_inventDim">
    /// The inventory dimension that holds the warehouse location where the serial was consumed.
    /// </param>
    /// <returns>
    /// The serial ID.
    /// </returns>
    /// <remarks>
    /// This method assumes that the order in which kanbans are created somewhat correlates to when they
    /// are executed and consume raw materials.
    /// </remarks>
    protected InventSerialId determineLastSerialConsumed(InventDim _inventDim)
    {
        kanbanJobPickingList    kanbanJobPickingListLocal;
        InventTrans             inventTrans;
        InventTransOrigin       inventTransOrigin;
        InventDim               inventDim;

        select firstOnly RecId from kanbanJobPickingListLocal
            order by inventTrans.DateInvent desc, kanbanJobPickingListLocal.RecId desc
            where kanbanJobPickingListLocal.ItemId        == this.itemId()
               && kanbanJobPickingListLocal.InventTransId != ''
            join inventTransId from inventTransOrigin
            where inventTransOrigin.InventTransId == kanbanJobPickingListLocal.InventTransId
                join TableId from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                    join inventSerialId from inventDim
                    where inventDim.inventDimId   == inventTrans.inventDimId
                       && inventDim.wMSLocationId == _inventDim.wMSLocationId;

        return inventDim.inventSerialId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>id</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the pool.
    /// </summary>
    /// <returns>
    ///    The ID.
    /// </returns>
    public Num id()
    {
        return kanbanJobPickingListPool.KanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the pool record from a table buffer.
    /// </summary>
    /// <param name="_common">
    ///    The table buffer to initialize from.
    /// </param>
    public void initFromBuffer(Common _common)
    {
        KanbanJobPickingListAll    kanbanJobPickingListAllLocal = _common as KanbanJobPickingListAll;

        kanbanJobPickingListPool.Kanban         = kanbanJobPickingListAllLocal.Kanban;
        kanbanJobPickingListPool.KanbanId       = kanbanJobPickingListAllLocal.kanban().KanbanId;
        kanbanJobPickingListPool.InventTransId  = kanbanJobPickingListAllLocal.InventTransId;
        kanbanJobPickingListPool.ItemId         = kanbanJobPickingListAllLocal.ItemId;
        kanbanJobPickingListPool.InventDimId    = kanbanJobPickingListAllLocal.InventDimId;
        kanbanJobPickingListPool.WavedQty       = -inventTransIdSum::newTransOriginId(this.inventTransOriginId()).picked();

        if (this.parmIsCWItem())
        {
            throw error("@WAX:Error_WHSPoolKanbanPickingFeatureDoesNotSupportCW");
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory dimension of the pool.
    /// </summary>
    /// <returns>
    ///    The inventory dimension.
    /// </returns>
    public InventDim inventDim()
    {
        return InventDim::find(kanbanJobPickingListPool.InventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction ID of the pool.
    /// </summary>
    /// <returns>
    ///    The inventory transaction ID.
    /// </returns>
    public InventTransId inventTransId()
    {
        return kanbanJobPickingListPool.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory transaction origin of the pool.
    /// </summary>
    /// <returns>
    ///    The inventory transaction origin.
    /// </returns>
    public InventTransOriginId inventTransOriginId()
    {
        if (!inventTransOriginId)
        {
            inventTransOriginId = this.kanbanJobPickingListAll().inventTransOriginId();
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOnOpenWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the pool is on an open wave.
    /// </summary>
    /// <returns>
    ///    true if the current pool is on an open wave; otherwise, false.
    /// </returns>
    public boolean isOnOpenWave()
    {
        WHSKanbanWaveLine   kanbanWaveLine;
        WHSWaveTable        waveTable;

        select firstOnly RecId from kanbanWaveLine
            where kanbanWaveLine.InventTransId == kanbanJobPickingListPool.InventTransId
            exists join WaveStatus from waveTable
                where waveTable.WaveId     == kanbanWaveLine.WaveId
                   && waveTable.WaveStatus <  WHSWaveStatus::Held;

        return kanbanWaveLine.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the item ID of the pool.
    /// </summary>
    /// <returns>
    ///    The item ID.
    /// </returns>
    public ItemId itemId()
    {
        return kanbanJobPickingListPool.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>kanbanJobPickingListAll</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>KanbanJobPickingListAll </c> record.
    /// </summary>
    /// <returns>
    ///    The kanban job picking list All view record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected KanbanJobPickingListAll kanbanJobPickingListAll()
    {
        InventTrans inventTrans;

        if (kanbanJobPickingListAll.RecId == 0)
        {
            kanbanJobPickingListAll = KanbanJobPickingListAll::findInventTransId(kanbanJobPickingListPool.InventTransId, inventTrans.dataAreaId) as KanbanJobPickingListAll;
        }

        return kanbanJobPickingListAll;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the inventory movement buffer of the pool.
    /// </summary>
    /// <param name="_forUpdate">
    ///    A Boolean value indicating if the buffer should be selected for update; optional.
    /// </param>
    /// <returns>
    ///    The inventory movement buffer.
    /// </returns>
    protected Common movementBuffer(boolean _forUpdate = false)
    {
        InventTrans inventTrans;

        return KanbanJobPickingList::findInventTransId(kanbanJobPickingListPool.InventTransId,inventTrans.dataAreaId, _forUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWHSKanbanJobPickingListPool</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected WHSKanbanJobPickingListPool parmWHSKanbanJobPickingListPool(WHSKanbanJobPickingListPool _kanbanJobPickingListPool)
    {
        kanbanJobPickingListPool = _kanbanJobPickingListPool;
        return kanbanJobPickingListPool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pool</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the current pool record.
    /// </summary>
    /// <returns>
    ///    The pool record.
    /// </returns>
    public Common pool()
    {
        return kanbanJobPickingListPool;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyLeftToWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the quantity that is left to wave.
    /// </summary>
    /// <returns>
    ///    The quantity left to wave.
    /// </returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the handlingQtyLeftToWave method. Extenders should move their logic to wrap or override the handlingQuantityLeftToWave method.', false, 30\9\2019)]
    public InventQty qtyLeftToWave()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.itemId());

        return this.handlingQuantityLeftToWave();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handlingQuantityLeftToWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the handling quantity that is left to wave.
    /// </summary>
    /// <returns>
    /// The handling quantity left to wave.
    /// </returns>
    /// <remarks>
    /// The method is an extension point and is not meant to be called directly. Callers should call the handlingQtyLeftToWave method.
    /// </remarks>
    [Wrappable(true)]
    protected internal InventHandlingQty handlingQuantityLeftToWave()
    {
        return this.kanbanJobPickingListAll().Quantity - kanbanJobPickingListPool.WavedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>waveTemplateType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the wave template type for the pool.
    /// </summary>
    /// <returns>
    ///    The wave template type.
    /// </returns>
    public WHSWaveTemplateType waveTemplateType()
    {
        return WHSWaveTemplateType::Kanban;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSPoolKanbanJobPickingList construct()
    {
        return new WHSPoolKanbanJobPickingList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPool</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a pool for a given kanban.
    /// </summary>
    /// <param name="_kanbanRefRecId">
    ///    The record ID of the kanban to create the pool for.
    /// </param>
    private static void createPool(KanbanRefRecId _kanbanRefRecId)
    {
        KanbanJobPickingListAll         kanbanJobPickingListAll;
        InventTrans                     inventTrans;
        InventTransOrigin               inventTransOrigin;
        WHSKanbanJobPickingListPool     kanbanJobPickingListPool;
        WHSKanbanJobPickingListPool     newkanbanJobPickingListPool;
        Set                             waveSet = new Set(Types::String);
        WHSInventEnabled                whsInventEnabled;

        ttsbegin;
        RecordInsertList recordInsertList = new recordInsertList(tableNum(WHSKanbanJobPickingListPool));

        while select kanbanJobPickingListAll
            where kanbanJobPickingListAll.Kanban        == _kanbanRefRecId
               && kanbanJobPickingListAll.InventTransId != ''
            join TableId from whsInventEnabled
                where kanbanJobPickingListAll.ItemId == whsInventEnabled.ItemId
            notexists join kanbanJobPickingListPool
                where kanbanJobPickingListPool.InventTransId == kanbanJobPickingListAll.InventTransId
        {
            newkanbanJobPickingListPool.clear();

            // Reserve inventory for items that allow negative
            if (kanbanJobPickingListAll.inventTable().whsAllowPhysNeg())
            {
                WHSReservation reservation = WHSReservation::construct();
                // Loop over non-reserved invent trans records for this sales line and call to reserve them.
                while select inventTrans
                    join RecId, InventTransId from inventTransOrigin
                    where inventTransOrigin.RecId           == inventTrans.InventTransOrigin
                       && inventTransOrigin.InventTransId   == kanbanJobPickingListAll.InventTransId
                       && inventTrans.StatusIssue           >  StatusIssue::ReservPhysical
                {
                    // Pass in negative qty
                    reservation.reserveInventory(inventTrans, inventTrans.Qty);
                }
            }
            // Only create pool lines records for picking list lines  that are WHS enabled and are being used in a WHS enabled warehouse.
            if (   WHSInventEnabled::exist(kanbanJobPickingListAll.ItemId)
                && InventLocation::find(kanbanJobPickingListAll.inventDim().InventLocationId).WHSEnabled)
            {
                newkanbanJobPickingListPool.whsPoolKanbanJobPickingList().initFromBuffer(kanbanJobPickingListAll);
                recordInsertList.add(newkanbanJobPickingListPool);
            }
        }

        recordInsertList.insertDatabase();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPoolAndWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a pool and wave(s) for a given kanban.
    /// </summary>
    /// <param name="_kanbanRefRecId">
    ///    The record ID of the kanban to create the pool and wave for.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void createPoolAndWave(KanbanRefRecId _kanbanRefRecId)
    {
        ttsBegin;
        WHSPoolKanbanJobPickingList::createPool(_kanbanRefRecId);
        WHSPoolKanbanJobPickingList::createWave(_kanbanRefRecId);
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates wave(s) for a given kanban.
    /// </summary>
    /// <param name="_kanbanRefRecId">
    ///    The record ID of the kanban to create the wave for.
    /// </param>
    private static void createWave(KanbanRefRecId _kanbanRefRecId)
    {
        KanbanJobPickingListAll         kanbanJobPickingListAll;
        WHSKanbanJobPickingListPool     kanbanJobPickingListPool;
        Set                             waveSet = new Set(Types::String);

        ttsBegin;

        while select kanbanJobPickingListPool
            join Quantity, InventTransId, ItemId from kanbanJobPickingListAll
            where kanbanJobPickingListPool.Kanban        == _kanbanRefRecId
               && kanbanJobPickingListPool.WavedQty      <  kanbanJobPickingListAll.Quantity
               && kanbanJobPickingListPool.InventTransId == kanbanJobPickingListAll.InventTransId
        {
            WHSPoolKanbanJobPickingList whsPoolKanbanJobPickingList = kanbanJobPickingListPool.whsPoolKanbanJobPickingList();
            if (whsPoolKanbanJobPickingList.isOnOpenWave())
            {
                warning (strfmt("@WAX4766", kanbanJobPickingListPool.InventTransId));
                continue;
            }

            // Assign or Create Wave
            WHSWaveTable waveTable = WHSWaveTable::assignOrCreateWave(null,whsPoolKanbanJobPickingList,waveSet);

            if (!waveTable.RecId)
            {
                continue;
            }

            // Create kanban wave line
            WHSKanbanWaveLine::createFromWaveIdAndPool(waveTable.WaveId, kanbanJobPickingListPool);

            // Add to WaveSet
            if (!waveSet.in(waveTable.WaveId))
            {
                waveSet.add(waveTable.WaveId);
            }
        }

        ttscommit;

        // Execute waves that should be autoExecuted.
        WHSWaveTable::autoExecuteWaves(waveSet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>WHSPoolKanbanJobPickingList</c> class.
    /// </summary>
    /// <param name="_kanbanJobPickingListPool">
    ///    The <c>KanbanJobPickingListPool</c> table record of the class.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>WHSPoolKanbanJobPickingList</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static WHSPoolKanbanJobPickingList newStandard(WHSKanbanJobPickingListPool _kanbanJobPickingListPool)
    {
        WHSPoolKanbanJobPickingList  whsPoolKanbanJobPickingList = WHSPoolKanbanJobPickingList::construct();

        whsPoolKanbanJobPickingList.parmWHSKanbanJobPickingListPool(_kanbanJobPickingListPool);

        return whsPoolKanbanJobPickingList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>