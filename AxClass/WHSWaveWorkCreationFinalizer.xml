<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveWorkCreationFinalizer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveWorkCreationFinalizer</c> class is responsible for finalizing the work creation wave step.
/// </summary>
internal class WHSWaveWorkCreationFinalizer
{
    protected WHSWaveTable            waveTable;
    protected WHSWaveTemplateTable    waveTemplate;
    protected WHSWorkBuildId          workBuildId;
    protected boolean                 releaseWave = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSWaveWorkCreationFinalizer construct()
    {
        return new WHSWaveWorkCreationFinalizer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSWaveWorkCreationFinalizer</c> instance, based on a specific wave ID and work build ID.
    /// </summary>
    /// <param name = "_waveId">The wave ID of the wave related to the work created.</param>
    /// <param name = "_workBuildId">The work build ID of the related created work.</param>
    /// <returns>A new instance of the <c>WHSWaveWorkCreationFinalizer</c> class.</returns>
    [Hookable(false)]
    internal static WHSWaveWorkCreationFinalizer newFromParameters(WHSWaveId _waveId, WHSWorkBuildId _workBuildId)
    {
        if (!_waveId || !_workBuildId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        WHSWaveWorkCreationFinalizer workCreationCompletionFinalizer = WHSWaveWorkCreationFinalizer::construct();

        workCreationCompletionFinalizer.initFromParameters(_waveId, _workBuildId);

        return workCreationCompletionFinalizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParameters</Name>
				<Source><![CDATA[
    protected final void initFromParameters(WHSWaveId _waveId, WHSWorkBuildId _workBuildId)
    {
        waveTable       = WHSWaveTable::find(_waveId, true);
        workBuildId     = _workBuildId;
        waveTemplate    = WHSWaveTemplateTable::find(waveTable.WaveTemplateName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeWorkCreation</Name>
				<Source><![CDATA[
    /// <summary>
    /// This methods executes the steps that are needed in order to finalize the work creation.
    /// </summary>
    [Hookable(false)]
    internal void finalizeWorkCreation()
    {
        ttsbegin;

        this.doFinalizeWorkCreation();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doFinalizeWorkCreation</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected void doFinalizeWorkCreation()
    {
        this.updateLoadsInWave(waveTable.WaveId);

        this.updateShipmentStatusToWaved(waveTable.WaveId);

        this.releaseWave();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadsInWave</Name>
				<Source><![CDATA[
    private void updateLoadsInWave(WHSWaveId _waveId)
    {
        WHSWaveLine waveLine;

        while select LoadId from waveLine
            group by LoadId
            where waveLine.WaveId == _waveId
                && waveLine.LoadId != ''
        {
            WHSLoadStatusUpdater::newFromLoadId(waveLine.LoadId).updateWhenWorkCreated();

            WHSLoadLine loadLine;

            while select forupdate loadLine
                where loadLine.LoadId == waveLine.LoadId
                    && loadLine.WorkCreatedQty  != loadLine.InventQty
            {
                if (loadLine.salesLine().whsQtyInWorkSalesUnit())
                {
                    loadLine.LoadOpenUTCDateTime = DateTimeUtil::getSystemDateTime();
                    loadLine.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateShipmentStatusToWaved</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the shipment status to waved for all open shipment on the wave when the work created.
    /// </summary>
    /// <param name = "_waveId">The wave id of the wave for which to update the shipments.</param>
    private void updateShipmentStatusToWaved(WHSWaveId _waveId)
    {
        WHSWaveLine      waveLine;
        WHSShipmentTable shipment;

        while select ShipmentId from waveLine
            join ShipmentId, ShipmentStatus from shipment
            where waveLine.ShipmentId == shipment.ShipmentId
                && waveLine.WaveId == _waveId  
                && shipment.ShipmentStatus < WHSShipmentStatus::Waved
        {
            WHSShipmentStatusUpdater::newFromShipmentId(shipment.ShipmentId).updateWhenWorkCreated();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>releaseWave</Name>
				<Source><![CDATA[
    private void releaseWave()
    {
        if (this.shouldReleaseWave() && waveTemplate.AutoReleaseWave && waveTable.numWorkCreated() > 0)
        {
            WHSWaveTable::releaseWave(waveTable.WaveId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReleaseWave</Name>
				<Source><![CDATA[
    internal boolean parmReleaseWave(boolean _releaseWave = releaseWave)
    {
        releaseWave = _releaseWave;

        return releaseWave;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldReleaseWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the wave table can be released during the finalization of work creation for wave processing.
    /// </summary>
    /// <returns>True if the wave can be released; false otherwise.</returns>
    /// <remarks>
    /// This method does not return whether the wave should be released, but whether the wave can be released.
    /// That means an extra check will be necessary to see if the wave should be released.
    /// </remarks>
    [Wrappable(false)]
    protected boolean shouldReleaseWave()
    {
        return releaseWave;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>