<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanEventQuantityMap</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanEventQuantityMap</c> class provides a <c>Map</c> object that holds event kanbans that
///    are related to a specific event.
/// </summary>
public abstract class KanbanEventQuantityMap
{
    Map                     mapKanbanQuantities;    //kanban record ID -> quantity
    InventQty               totalQty;
    InventQty               totalMarkedQty;
    InventQty               peggedQty;
    InventQty               availReservePhysicalPegged;
    InventQty               availReservePhysicalUnPegged;
    boolean                 istotalMarkedQtyCalculated;
    boolean                 isAvailQuantitiesCalculated;
    InventTransOriginId     inventTransOriginId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availReservePhysicalPegged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the quantity of pegged event kanbans that are available for physical reservation.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID that is used to calculate the quantity.
    /// </param>
    /// <param name="_inventDim">
    ///    The inventory dimension that is used to calculate the quantity.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The inventory dimension parameters used to calculate the quantity.
    /// </param>
    /// <param name="_clearCache">
    ///    A Boolean value that indicates if currently cached results must be discarded.
    /// </param>
    /// <returns>
    ///    The quantity of pegged event kanbans that are available for physical reservation.
    /// </returns>
    public InventQty availReservePhysicalPegged(
        ItemId        _itemId,
        InventDim     _inventDim,
        InventDimParm _inventDimParm,
        boolean       _clearCache = false)
    {
        this.calcInventTransIdSum(_itemId,_inventDim,_inventDimParm,_clearCache);

        return availReservePhysicalPegged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>availReservePhysicalUnPegged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the quantity of unpegged event kanbans that are available for physical reservation.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID that is used to calculate the quantity.
    /// </param>
    /// <param name="_inventDim">
    ///    The inventory dimension that is used to calculate the quantity.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The inventory dimension parameters used to calculate the quantity.
    /// </param>
    /// <param name="_clearCache">
    ///    A Boolean value that indicates if currently cached results must be discarded.
    /// </param>
    /// <returns>
    ///    The quantity of pegged event kanbans that are available for physical reservation.
    /// </returns>
    public InventQty availReservePhysicalUnPegged(
        ItemId        _itemId,
        InventDim     _inventDim,
        InventDimParm _inventDimParm,
        boolean       _clearCache = false)
    {
        this.calcInventTransIdSum(_itemId,_inventDim,_inventDimParm,_clearCache);

        return availReservePhysicalUnPegged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMapKanbanQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds a map of kanban record IDs that are related to quantities.
    /// </summary>
    protected void buildMapKanbanQuantities()
    {
        ReqPegging                  reqPegging;
        ReqPeggingAssignment        reqPeggingAssignmentRequirement;
        ReqPeggingAssignment        reqPeggingAssignmentSupply;
        KanbanJob                   kanbanJob;
        KanbanJobReceipt            kanbanJobReceipt;
        InventTrans                 inventTrans;
        InventTransOrigin           inventTransOrigin;
        SourceDocumentLineRefRecId  sourceDocumentLineRefRecId = this.sourceDocumentLineRefRecId();

        //get pegged quantities from ReqPegging if possible
        if (sourceDocumentLineRefRecId)
        {
            while select Quantity from reqPegging
                join TableId from reqPeggingAssignmentRequirement
                    where reqPeggingAssignmentRequirement.SourceDocumentLine       == sourceDocumentLineRefRecId
                       && reqPeggingAssignmentRequirement.RecId                    == reqPegging.PeggingAssignedRequirement
                       && reqPeggingAssignmentRequirement.ReqPeggingAssignmentType == ReqPeggingAssignmentType::Requirement
                join TableId from reqPeggingAssignmentSupply
                    where reqPeggingAssignmentSupply.RecId                    == reqPegging.PeggingAssignedSupply
                       && reqPeggingAssignmentSupply.ReqPeggingAssignmentType == ReqPeggingAssignmentType::Supply
                join TableId from kanbanJobReceipt
                    where kanbanJobReceipt.SourceDocumentLine == reqPeggingAssignmentSupply.SourceDocumentLine
                join Kanban from kanbanJob
                    where kanbanJob.RecId == kanbanJobReceipt.KanbanJob
            {
                mapKanbanQuantities.insert(kanbanJob.Kanban,reqPegging.Quantity);
                totalQty += reqPegging.Quantity;
            }
        }
        else
        {
            //alternatively get pegged quantities from marked inventory transactions
            InventTransOriginId inventTransOriginIdLocal = this.inventTransOriginId();

            if (inventTransOriginId)
            {
                while select sum(Qty) from inventTrans
                    where inventTrans.InventTransOrigin           == inventTransOriginIdLocal
                       && inventTrans.MarkingRefInventTransOrigin != 0
                    join RecId, ReferenceCategory from inventTransOrigin
                        group by RecId, ReferenceCategory
                        where inventTransOrigin.RecId == inventTrans.MarkingRefInventTransOrigin
                           && (inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobProcess
                           ||  inventTransOrigin.ReferenceCategory == InventTransType::KanbanJobTransferReceipt)
                {
                    switch (inventTransOrigin.ReferenceCategory)
                    {
                        case InventTransType::KanbanJobProcess:
                            kanbanJob = InventTransOriginKanbanJobProcess::kanbanJob(inventTransOrigin.RecId);
                            break;
                        case InventTransType::KanbanJobTransferReceipt:
                            kanbanJob = InventTransOriginKanbanJobTrsReceipt::kanbanJob(inventTransOrigin.RecId);
                            break;
                    }
                    if (kanbanJob)
                    {
                        InventQty inventQty = 0;
                        if (mapKanbanQuantities.exists(kanbanJob.Kanban))
                        {
                            inventQty = mapKanbanQuantities.lookup(kanbanJob.Kanban);
                        }
                        mapKanbanQuantities.insert(kanbanJob.Kanban,inventQty-inventTrans.Qty);
                        totalQty += inventQty - inventTrans.Qty;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInventTransIdSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates quantities based on the given parameters.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID that is used to calculate the quantities.
    /// </param>
    /// <param name="_inventDim">
    ///    The inventory dimension that is used to calculate the quantities.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The inventory dimension parameters used to calculate the quantities.
    /// </param>
    /// <param name="_clearCache">
    ///    A Boolean value that indicates if currently cached results must be discarded.
    /// </param>
    protected void calcInventTransIdSum(
        ItemId        _itemId,
        InventDim     _inventDim,
        InventDimParm _inventDimParm,
        boolean       _clearCache)
    {
        InventTransOriginId     issueInventTransOriginId = this.inventTransOriginId();

        if (issueInventTransOriginId)
        {
            if (   _clearCache
                || !mapKanbanQuantities)
            {
                this.init();
                this.buildMapKanbanQuantities();
            }

            if (   _clearCache
                || !isAvailQuantitiesCalculated)
            {
                isAvailQuantitiesCalculated = true;

                if (   mapKanbanQuantities
                    && mapKanbanQuantities.elements())
                {
                    MapEnumerator me = mapKanbanQuantities.getEnumerator();
                    while (me.moveNext())
                    {
                        Kanban kanban = Kanban::find(me.currentKey());
                        if (   kanban
                            && kanban.ItemId == _itemId)
                        {
                            InventTransOriginId receiptInventTransOriginId = kanban.lastKanbanJob().receiptInventTransOriginId();
                            if (receiptInventTransOriginId)
                            {
                                InventTransIdSum inventTransIdSum = InventTransIdSum::newTransOriginIdDimension(receiptInventTransOriginId,_inventDim,_inventDimParm);
                                InventQty peggedQtyKanban = min(me.currentValue(),max(0,inventTransIdSum.issue() + inventTransIdSum.receipt()));

                                availReservePhysicalPegged   += min(peggedQtyKanban,inventTransIdSum.physicalInvent());
                                availReservePhysicalUnPegged += max(0,inventTransIdSum.physicalInvent() - peggedQtyKanban);
                                peggedQty                    += peggedQtyKanban;
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes class variables.
    /// </summary>
    protected void init()
    {
        mapKanbanQuantities          = new Map(Types::Int64,Types::Real);
        totalQty                     = 0;
        totalMarkedQty               = 0;
        istotalMarkedQtyCalculated   = false;
        peggedQty                    = 0;
        availReservePhysicalPegged   = 0;
        availReservePhysicalUnPegged = 0;
        isAvailQuantitiesCalculated  = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the inventory transaction originator for which to determine the pegging.
    /// </summary>
    /// <returns>
    ///    A record ID of the <c>InventTransOrigin</c> table.
    /// </returns>
    protected abstract InventTransOriginId inventTransOriginId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapKanbanQuantities</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a map of kanbans that are related to the event.
    /// </summary>
    /// <param name="_clearCache">
    ///    Specifies whether pre-calculated quantities can be used or whether the calculation must be
    ///    refreshed.
    /// </param>
    /// <returns>
    ///    A <c>Map</c> object that has related kanbans or an empty map if no kanbans are related.
    /// </returns>
    public Map mapKanbanQuantities(boolean _clearCache = false)
    {
        if (   _clearCache
            || !mapKanbanQuantities)
        {
            this.init();
            this.buildMapKanbanQuantities();
        }

        return mapKanbanQuantities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mappedKanbansAsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of kanban objects that are related to the event.
    /// </summary>
    /// <param name="_clearCache">
    /// A Boolean value that indicates whether pre-calculated quantities can be used; optional.
    /// </param>
    /// <returns>
    /// A <c>List</c> object that has related kanban objects; otherwise, an empty list.
    /// </returns>
    /// <remarks>
    /// If the mapped quantity is required, use the <c>KanbanEventQuantityMap.mapKanbanQuantities</c>
    /// method instead.
    /// </remarks>
    public List mappedKanbansAsList(boolean _clearCache = false)
    {
        List            list = new List(Types::Record);

        if (   _clearCache
            || !mapKanbanQuantities)
        {
            this.mapKanbanQuantities(_clearCache);
        }

        if (   mapKanbanQuantities
            && mapKanbanQuantities.elements())
        {
            MapEnumerator me = mapKanbanQuantities.getEnumerator();
            while (me.moveNext())
            {
                Kanban kanban = Kanban::find(me.currentKey());
                list.addEnd(kanban);
            }
        }

        return list;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>peggedQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the pegged quantity.
    /// </summary>
    /// <param name="_itemId">
    ///    The item ID that is used to calculate the quantity.
    /// </param>
    /// <param name="_inventDim">
    ///    The inventory dimension that is used to calculate the quantity.
    /// </param>
    /// <param name="_inventDimParm">
    ///    The inventory dimension parameters used to calculate the quantity.
    /// </param>
    /// <param name="_clearCache">
    ///    A Boolean value that indicates if currently cached results must be discarded.
    /// </param>
    /// <returns>
    ///    The pegged quantity.
    /// </returns>
    public InventQty peggedQuantity(
        ItemId        _itemId,
        InventDim     _inventDim,
        InventDimParm _inventDimParm,
        boolean       _clearCache = false)
    {
        this.calcInventTransIdSum(_itemId,_inventDim,_inventDimParm,_clearCache);

        return peggedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocumentLineRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Defines the source document line for which to determine the pegged quantities.
    /// </summary>
    /// <returns>
    ///    A record ID of the <c>SourceDocumentLine</c> table.
    /// </returns>
    /// <remarks>
    ///    Derived classes that do not use pegging events may return zero.
    /// </remarks>
    protected abstract SourceDocumentLineRefRecId sourceDocumentLineRefRecId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalMarkedQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total marked quantity that is fulfilled by kanbans that are related to the event.
    /// </summary>
    /// <param name="_clearCache">
    ///    Specifies whether pre-calculated quantities can be used or whether the calculation must be
    ///    refreshed.
    /// </param>
    /// <returns>
    ///    The total marked quantity that is fulfilled by kanbans that are related to the event.
    /// </returns>
    public InventQty totalMarkedQuantity(boolean _clearCache = false)
    {
        InventTransOriginId     issueInventTransOriginId = this.inventTransOriginId();

        if (issueInventTransOriginId)
        {
            if (   _clearCache
                || !mapKanbanQuantities)
            {
                this.init();
                this.buildMapKanbanQuantities();
            }

            if (   _clearCache
                || !istotalMarkedQtyCalculated)
            {
                istotalMarkedQtyCalculated = true;

                if (   mapKanbanQuantities
                    && mapKanbanQuantities.elements())
                {
                    MapEnumerator me = mapKanbanQuantities.getEnumerator();
                    while (me.moveNext())
                    {
                        InventTransOriginId receiptInventTransOriginId = Kanban::find(me.currentKey()).lastKanbanJob().receiptInventTransOriginId();
                        if (receiptInventTransOriginId)
                        {
                            totalMarkedQty += InventTransOrigin::qtyMarked(receiptInventTransOriginId,issueInventTransOriginId);
                        }
                    }
                }
            }
        }

        return totalMarkedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the total quantity that is fulfilled by kanbans that are related to the event.
    /// </summary>
    /// <param name="_clearCache">
    ///    Specifies whether the pre- calculated quantities can be used or whether the calculation must be
    ///    refreshed.
    /// </param>
    /// <returns>
    ///    The total quantity that is fulfilled by kanbans that are related to the event.
    /// </returns>
    public InventQty totalQuantity(boolean _clearCache = false)
    {
        if (   _clearCache
            || !mapKanbanQuantities)
        {
            this.init();
            this.buildMapKanbanQuantities();
        }

        return totalQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of a <c>KanbanEventQuantityMap</c> object.
    /// </summary>
    /// <param name="_common">
    ///    A <c>Common</c> table buffer to use for the instantiation.
    /// </param>
    /// <returns>
    ///    A <c>KanbanEventQuantityMap</c> object.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The table buffer is not valid for instantiation of this class.
    /// </exception>
    public static KanbanEventQuantityMap newStandard(Common _common)
    {
        KanbanEventQuantityMap kanbanEventQuantityMap;

        kanbanEventQuantityMap = KanbanEventQuantityMap::newKanbanEventQuantityMap(_common);

        if (!kanbanEventQuantityMap)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return kanbanEventQuantityMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanEventQuantityMap</Name>
				<Source><![CDATA[
	/// <summary>
    ///		Creates a new instance of a <c>KanbanEventQuantityMap</c> object.
    /// </summary>
    /// <param name = "_common">
    ///		A <c>Common</c> table buffer to use for the instantiation.
	/// </param>
    /// <returns>
    ///		A <c>KanbanEventQuantityMap</c> object.
	/// </returns>
    protected static KanbanEventQuantityMap newKanbanEventQuantityMap(Common _common)
    {
        KanbanEventQuantityMap kanbanEventQuantityMap;

        switch (_common.TableId)
        {
            case tableNum(SalesLine):
                kanbanEventQuantityMap = KanbanEventQuantityMapSalesLine::newStandard(_common);
                break;
            case tableNum(ProdBOM):
                kanbanEventQuantityMap = KanbanEventQuantityMapProdBOM::newStandard(_common);
                break;
            case tableNum(KanbanJob):
                kanbanEventQuantityMap = KanbanEventQuantityMapKanbanJob::newStandard(_common);
                break;
            case tableNum(KanbanJobPickingList):
                kanbanEventQuantityMap = KanbanEventQuantityMapKanbanJobPick::newStandard(_common);
                break;
        }
        return kanbanEventQuantityMap;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>