<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTaxCategoryDepreciationController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetTaxCategoryDepreciationController</c> class is the controller for the <c>AssetTaxCategoryDepreciationReport</c> report.
/// </summary>
public class AssetTaxCategoryDepreciationController extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        AssetTaxDepr_LV assetTaxDepreciationPeriod;
        AssetTaxDeprCategory_LV assetTaxDepreciationCategory;
        AssetTaxDepreciationCategoryDetail assetTaxDepreciationDetail;

        Query query;
        QueryBuildDataSource qbds;
        QueryBuildRange range;

        AssetTaxCategoryDepreciationContract contract;
        Map recIdMap;
        MapEnumerator enumerator;

        FreeTxt recIdRangeValue;
        boolean showAssetInformation;
        str sourceTable;
        TransDate minimumDate = dateNull(), maximumDate = maxDate();

        super();

        if (!this.parmArgs())
        {
            throw error(Error::missingParameter(this));
        }

        // Since the same report can be used for category/asset information, determine the source tables from the args
        sourceTable = this.parmArgs().parm();

        if (sourceTable == tableStr(AssetTaxDepreciationCategoryDetail))
        {
            showAssetInformation = true;
        }
        else if (sourceTable == tableStr(AssetTaxDeprCategory_LV))
        {
            showAssetInformation = false;
        }
        else
        {
            throw error("@GLS223850");
        }

        contract = this.parmReportContract().parmRdpContract() as AssetTaxCategoryDepreciationContract;
        contract.parmShowAssetInformation(showAssetInformation);

        query = this.getFirstQuery();

        if (showAssetInformation)
        {
            qbds = query.addDataSource(tableNum(AssetTaxDepreciationCategoryDetail));
            range = SysQuery::findOrCreateRange(qbds, fieldNum(AssetTaxDepreciationCategoryDetail, RecId));
        }
        else
        {
            qbds = query.addDataSource(tableNum(AssetTaxDeprCategory_LV));
            range = SysQuery::findOrCreateRange(qbds, fieldNum(AssetTaxDeprCategory_LV, RecId));
        }

        if (this.parmArgs().parmObject())
        {
            recIdMap = this.parmArgs().parmObject() as Map;
            enumerator = recIdMap.getEnumerator();
            while (enumerator.moveNext())
            {
                if (recIdRangeValue)
                {
                    recIdRangeValue += ',';
                }
                else
                {
                    // Use the first RecId to set the period information because all assets and categories will belong to the same period
                    if (showAssetInformation)
                    {
                        select firstonly validTimeState(minimumDate, maximumDate) Name, ValidFrom, ValidTo from assetTaxDepreciationPeriod
                            join RecId from assetTaxDepreciationCategory
                                where assetTaxDepreciationCategory.AssetTaxDeprRecId == assetTaxDepreciationPeriod.RecId
                            join RecId from assetTaxDepreciationDetail
                                where assetTaxDepreciationDetail.AssetTaxDeprCategoryRecId == assetTaxDepreciationCategory.RecId
                                    && assetTaxDepreciationDetail.RecId == any2int64(enumerator.currentKey());
                    }
                    else
                    {
                        select firstonly validTimeState(minimumDate, maximumDate) Name, ValidFrom, ValidTo from assetTaxDepreciationPeriod
                            join RecId from assetTaxDepreciationCategory
                                where assetTaxDepreciationCategory.AssetTaxDeprRecId == assetTaxDepreciationPeriod.RecId
                                    && assetTaxDepreciationCategory.RecId == any2int64(enumerator.currentKey());
                    }

                    contract.parmPeriodName(assetTaxDepreciationPeriod.Name);
                    contract.parmValidFromDate(assetTaxDepreciationPeriod.ValidFrom);
                    contract.parmValidToDate(assetTaxDepreciationPeriod.ValidTo);
                }

                recIdRangeValue += queryValue(enumerator.currentKey());
            }

            range.value(recIdRangeValue);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    public boolean showQuerySelectButton(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues(str parameterName)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00018, funcName());

        AssetTaxCategoryDepreciationController controller = new AssetTaxCategoryDepreciationController();
        controller.parmArgs(_args);
        controller.parmReportName(ssrsReportStr(AssetTaxCategoryDepreciation, Report));
        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>