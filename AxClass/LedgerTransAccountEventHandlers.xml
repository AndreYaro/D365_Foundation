<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTransAccountEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Event handlers for <c>LedgerTransAccount</c> events.
/// </summary>
public class LedgerTransAccountEventHandlers
{
    private const str SubsidiaryFlag_BR = 'Subsidiary';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>GeneralJournalAccountEntry_OnActivated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the GeneralJournalAccountEntry data source OnActvivated event.
    /// </summary>
    /// <param name="sender">The <c>GeneralJournalAccountEntry</c> data source.</param>
    /// <param name="e">The event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerTransAccount, GeneralJournalAccountEntry), FormDataSourceEventType::Activated)]
    public static void GeneralJournalAccountEntry_OnActivated(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();

        FormFunctionButtonControl subledgerJournalButton = formRun.control(formRun.controlId(identifierStr(SubledgerJournal)));
        FormDataSource generalJournalAccountEntry_ds = formRun.dataSource(formdatasourcestr(LedgerTransAccount, GeneralJournalAccountEntry)) as FormDataSource;
        GeneralJournalAccountEntry generalJournalAccountEntry = generalJournalAccountEntry_ds.cursor();

        subledgerJournalButton.enabled(GeneralJournalAccountEntry::existForSubledgerJournalAccountEntry(generalJournalAccountEntry.RecId));

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            FormDataSource generalJournalAccountEntry_W_ds = formRun.dataSource(formdatasourcestr(LedgerTransAccount, GeneralJournalAccountEntry_W)) as FormDataSource;
            GeneralJournalAccountEntry_W generalJournalAccountEntry_W = generalJournalAccountEntry_W_ds.cursor();
            FormButtonControl subsidiaryAccounts_BR = formRun.control(formRun.controlId(identifierStr(SubsidiaryAccountTransactions_BR)));

            if (generalJournalAccountEntry_W.ConsolidatedRefRecId_BR)
            {
                subsidiaryAccounts_BR.visible(true);
            }
            else
            {
                subsidiaryAccounts_BR.visible(false);
            }
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>LedgerTransAccount_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the form OnInitialized event.
    /// </summary>
    /// <param name="sender">The LedgerTransAccount form.</param>
    /// <param name="e">The event arguments.</param>
    [FormEventHandler(formStr(LedgerTransAccount), FormEventType::Initialized)]
    public static void LedgerTransAccount_OnInitialized(xFormRun sender, FormEventArgs e)
    {
        BudgetTmpControlStatistics budgetTmpControlStatistics;
        QueryBuildDataSource ds;
        FormDataSource generalJournalAccountEntry_ds = sender.dataSource(formdatasourcestr(LedgerTransAccount, GeneralJournalAccountEntry)) as FormDataSource;
        Query query = generalJournalAccountEntry_ds.query();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            FormGroupControl consolidation_BR = sender.control(sender.controlId(identifierStr(Consolidation_BR)));
            consolidation_BR.visible(CompanyInfo::isConsolidationCompany());
            DictClass dictClass = new DictClass(classIdGet(sender));
            dictClass.callObject('parmFirstExecution_BR', sender, true);
        }
        // </GBR>

        Object caller = sender.args().caller();
        TableId callingTable = sender.args().dataset();

        if (callingTable == tablenum(BudgetTmpControlStatistics))
        {
            budgetTmpControlStatistics = sender.args().record() as BudgetTmpControlStatistics;

            if (budgetTmpControlStatistics != null)
            {
                // Add the range on transaction date based on the <c>BudgetTmpControlStatistics</c> record.
                ds = query.dataSourceTable(tablenum(GeneralJournalEntry));
                QueryBuildRange range = ds.addRange(fieldnum(GeneralJournalEntry, AccountingDate));
                range.value(SysQuery::range(budgetTmpControlStatistics.PeriodStartDate, budgetTmpControlStatistics.PeriodEndDate));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>GeneralJournalAccountEntry_OnQueryExecuted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the GeneralJournalAccountEntry data source OnQueryExecuted event.
    /// </summary>
    /// <param name="sender">The <c>GeneralJournalAccountEntry</c> data source.</param>
    /// <param name="e">The event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerTransAccount, GeneralJournalAccountEntry), FormDataSourceEventType::QueryExecuted)]
    public static void GeneralJournalAccountEntry_OnQueryExecuted(FormDataSource sender, FormDataSourceEventArgs e)
    {
        FormRun formRun = sender.formRun();

        // <GBR>
        if (BrazilParameters::isEnabled() && formRun.args().parm() == SubsidiaryFlag_BR)
        {
            DictClass dictClass = new DictClass(classIdGet(formRun));
            boolean firstExecution_BR = dictClass.callObject('parmFirstExecution_BR', formRun);

            if (firstExecution_BR && formRun.args().dataset() == tableNum(GeneralJournalAccountEntry))
            {
                dictClass.callObject('parmFirstExecution_BR', formRun, false);
                formRun.args().lookupRecord(formRun.args().record());

                FormDataSource generalJournalAccountEntry_ds = formRun.dataSource(formdatasourcestr(LedgerTransAccount, GeneralJournalAccountEntry)) as FormDataSource;
                generalJournalAccountEntry_ds.research(false);
                generalJournalAccountEntry_ds.mark(1);
            }
        }
        // </GBR>
    }

]]></Source>
			</Method>
			<Method>
				<Name>GeneralJournalAccountEntry_W_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the GeneralJournalAccountEntry_W data source OnInitialized event.
    /// </summary>
    /// <param name="sender">The <c>GeneralJournalAccountEntry_W</c> data source.</param>
    /// <param name="e">The event arguments.</param>
    [FormDataSourceEventHandler(formDataSourceStr(LedgerTransAccount, GeneralJournalAccountEntry_W), FormDataSourceEventType::Initialized)]
    public static void GeneralJournalAccountEntry_W_OnInitialized(FormDataSource sender, FormDataSourceEventArgs e)
    {
        // calling super at this point to replicate what the code moved from LedgerTransAccount was doing
        DictClass dictClass = new DictClass(classIdGet(sender));
        dictClass.callObject('super', sender);

        if (GeneralJournalAccountEntry_W::isLegalEntityInCountryRegion())
        {
            DictRelation dictRelation;
            QueryBuildDataSource ds;

            // change the relation because there are 2 GJAE relations and the wrong one is the default
            dictRelation = new DictRelation(tableNum(GeneralJournalAccountEntry_W));
            dictRelation.loadFieldRelation(fieldNum(GeneralJournalAccountEntry_W, GeneralJournalAccountEntry));

            ds = sender.queryBuildDataSource();
            ds.clearLinks();
            ds.addRelation(dictRelation);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SubsidiaryAccountTransactions_BR_Clicked</Name>
				<Source><![CDATA[
    [FormControlEventHandlerAttribute(formControlStr(LedgerTransAccount, SubsidiaryAccountTransactions_BR), FormControlEventType::Clicked)]
    public static void SubsidiaryAccountTransactions_BR_Clicked(FormControl _sender, FormControlEventArgs _args)
    {
        Args                        args;
        GeneralJournalAccountEntry  consolidatedAccountEntry;
        GeneralJournalEntry         consolidatedEntry;
        CompanyInfo                 companyInfo;

        FormDataSource generalJournalAccountEntry_W_ds = _sender.formRun().dataSource(formdatasourcestr(LedgerTransAccount, GeneralJournalAccountEntry_W)) as FormDataSource;
        GeneralJournalAccountEntry_W generalJournalAccountEntry_W = generalJournalAccountEntry_W_ds.cursor();

        consolidatedAccountEntry = GeneralJournalAccountEntry::find(generalJournalAccountEntry_W.ConsolidatedRefRecId_BR);

        if (consolidatedAccountEntry)
        {
            select firstOnly Ledger from consolidatedEntry
                    where consolidatedEntry.RecId == consolidatedAccountEntry.GeneralJournalEntry;

            companyInfo = CompanyInfo::findRecId(ledger::primaryForLegalEntity(consolidatedEntry.Ledger));

            changeCompany(companyInfo.DataArea)
            {
                args = new Args(_sender.formRun());
                args.record(consolidatedAccountEntry);
                args.parm(SubsidiaryFlag_BR);
                new MenuFunction(menuitemDisplayStr(LedgerTransAccount1), MenuItemType::Display).run(args);
            }

            appl.setDefaultCompany(companyInfo.DataArea);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>