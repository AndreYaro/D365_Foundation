<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjectAccountingDistributionDimensionStructureSynchronizationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjectAccountingDistributionDimensionStructureSynchronizationProvider</c> is the dimension structure synchronization provider for project accounting distribution data.
/// </summary>
public class ProjectAccountingDistributionDimensionStructureSynchronizationProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkIfStuctureRemovalFromLedgerIsPrevented</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the account structure is prevented from being removed from the ledger.
    /// </summary>
    /// <param name="_dimensionHierarchy">
    /// The account structure being removed.
    /// </param>
    /// <param name="_ledger">
    /// The <c>Ledger</c> record from which the structure is being removed.
    /// </param>
    /// <param name = "_ret">
    /// The event handler result.
    /// </param>
    /// <returns>
    /// true if the account structure cannot be removed; otherwise, false.
    /// </returns>
    [SubscribesTo(classStr(LedgerStructureDelegates), delegateStr(LedgerStructureDelegates, checkIfStuctureRemovalFromLedgerIsPrevented))]
    public static void checkIfStuctureRemovalFromLedgerIsPrevented(DimensionHierarchy _dimensionHierarchy, Ledger _ledger, EventHandlerResult _ret)
    {
        // This method does not need to check anything additional as the primary accounting distributions
        // check will respond appropriately including project accounting distributions.
    }

]]></Source>
			</Method>
			<Method>
				<Name>preUpdateProviderReferences</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the project accounting distribution data prior to updating all accounting distribution dimension combination reference data.
    /// </summary>
    /// <param name="_args">
    /// The <c>XppPrePostArgs</c> object.
    /// </param>
    [PreHandlerFor(classStr(AccountingDistributionDimensionStructureSynchronizationProvider), methodStr(AccountingDistributionDimensionStructureSynchronizationProvider, updateProviderReferences))]
    public static void preUpdateProviderReferences(XppPrePostArgs _args)
    {
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(classStr(ProjectAccountingDistributionDimensionStructureSynchronizationProvider), staticMethodStr(ProjectAccountingDistributionDimensionStructureSynchronizationProvider, preUpdateProviderReferences));
        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(classStr(ProjectAccountingDistributionDimensionStructureSynchronizationProvider));
    
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.activityContextWithCustomProperties(activity))
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                // Synchronize the project accounting distributions with events enabled to execute all dependent logic.
                // The base accounting distribution logic skips all events to avoid row-by-row processing.
                DimensionStructureSynchronizationRequest synchronizationRequest = _args.getArg(identifierStr(_synchronizationRequest)) as DimensionStructureSynchronizationRequest;

                if (synchronizationRequest)
                {
                    unchecked(Uncheck::XDS)
                    {
                        DimensionSynchronize            dimSynchronize;
                        DimensionSynchronizeLedger      dimSynchronizeLedger;

                        dimSynchronize.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronize());
                        dimSynchronizeLedger.linkPhysicalTableInstance(synchronizationRequest.getDimensionSynchronizeLedger());

                        AccountingDistribution          accountingDistribution;
                        AccountingEvent                 accountingEvent;
                        ProjectAccountingDistribution   projectAccountingDistribution;

                        if (ProjAccDistDimStructureSynchSkipFundingLimitFlight::instance().isEnabled())
                        {
                            accountingDistribution.skipEvents(true);
                        }

                        unchecked(Uncheck::XDS)
                        {
                            // Update unposted distributions with the new ledger dimension values where projectAccountingDistribution is present
                            update_recordset accountingDistribution
                            setting LedgerDimension = dimSynchronize.UpdatedLedgerDimension
                                where accountingDistribution.ReferenceRole != AccountingDistributionReferenceRole::Reversing
                            join dimSynchronizeLedger
                                where dimSynchronizeLedger.LegalEntity == accountingDistribution.AccountingLegalEntity
                            join dimSynchronize
                                where dimSynchronize.OriginalLedgerDimension == accountingDistribution.LedgerDimension &&
                                      dimSynchronize.OriginalLedgerDimension != dimSynchronize.UpdatedLedgerDimension
                            exists join projectAccountingDistribution
                                where projectAccountingDistribution.AccountingDistribution == accountingDistribution.RecId
                            notexists join accountingEvent
                                where accountingEvent.RecId == accountingDistribution.AccountingEvent &&
                                      accountingEvent.State != AccountingEventState::Started;

                            activityContext.addCustomProperty('MethodName', staticMethodStr(ProjectAccountingDistributionDimensionStructureSynchronizationProvider, preUpdateProviderReferences));
                            activityContext.addCustomProperty('WereRecordsUpdated', int2str(accountingDistribution.rowCount() > 0));
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>