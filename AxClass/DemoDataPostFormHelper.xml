<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostFormHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides helper functionality for the <c>DemoDataPost</c> form.
/// </summary>
public class DemoDataPostFormHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>linkToDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Link to a given document from the document status record.
    /// </summary>
    /// <param name = "_documentStatus">The document status record.</param>
    /// <param name = "_caller">The calling form for this process.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void linkToDocument(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        boolean isLinkFound;

        switch (_documentStatus.DocumentTableId)
        {
            case tableNum(BudgetTransactionHeader):
                isLinkFound = DemoDataPostFormHelper::referenceBudgetTransaction(_documentStatus, _caller);
                break;

            case tableNum(CostingVersion):
                isLinkFound = DemoDataPostFormHelper::referenceCostingVersion(_documentStatus, _caller);
                break;

            case tableNum(CustInvoiceTable):
                isLinkFound = DemoDataPostFormHelper::referenceFreeTextInvoice(_documentStatus, _caller);
                break;

            case tableNum(InventItemPriceSim):
                isLinkFound = DemoDataPostFormHelper::referenceItemPriceSim(_documentStatus, _caller);
                break;

            case tableNum(InventJournalTable):
                isLinkFound = DemoDataPostFormHelper::referenceInventoryJournal(_documentStatus, _caller);
                break;

            case tableNum(LedgerJournalTable):
                isLinkFound = DemoDataPostFormHelper::referenceLedgerJournalTable(_documentStatus, _caller);
                break;

            case tableNum(SalesTable):
                isLinkFound = DemoDataPostFormHelper::referenceSalesOrder(_documentStatus, _caller);
                break;

            case tableNum(PriceDiscAdmTable):
                isLinkFound = DemoDataPostFormHelper::referenceTradeAgreement(_documentStatus, _caller);
                break;

            case tableNum(PurchTable):
                isLinkFound = DemoDataPostFormHelper::referencePurchaseOrder(_documentStatus, _caller);
                break;

            case tableNum(VendInvoiceInfoTable):
                isLinkFound = DemoDataPostFormHelper::referenceVendorInvoice(_documentStatus, _caller);
                break;

            default:
                isLinkFound = DemoDataPostFormHelper::linkToDocument_Extension(_documentStatus, _caller);
                break;
        }

        if (!isLinkFound)
        {
            throw error(strFmt("@DemoDataPost:DocumentLinkError", _documentStatus.DocumentName, _documentStatus.RunId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkToDocument_Extension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allow chain of command extension of the document link functionality on the <c>DemoDataPost</c> form.
    /// </summary>
    /// <param name = "_documentStatus">The document status record.</param>
    /// <param name = "_caller">The calling form for this process.</param>
    /// <returns>True if the document link was found; otherwise, false.</returns>
    public static boolean linkToDocument_Extension(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceBudgetTransaction</Name>
				<Source><![CDATA[
    private static boolean referenceBudgetTransaction(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        BudgetTransactionHeader budgetTransactionHeader = BudgetTransactionHeader::find(_documentStatus.DocumentRecId);

        if (budgetTransactionHeader)
        {
            DemoDataPostFormHelper::executeLink(budgetTransactionHeader, _caller, menuItemDisplayStr(BudgetTransactions));
        }

        return budgetTransactionHeader.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceCostingVersion</Name>
				<Source><![CDATA[
    private static boolean referenceCostingVersion(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        CostingVersion costingVersion;

        select firstonly costingVersion
            where costingVersion.RecId == _documentStatus.DocumentRecId;

        if (costingVersion)
        {
            // The costing version form has not been configured to open specific records
            Args args = new Args();
            args.caller(_caller);

            new MenuFunction(menuItemDisplayStr(CostingVersion), MenuItemType::Display).run(args);
        }

        return costingVersion.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceFreeTextInvoice</Name>
				<Source><![CDATA[
    private static boolean referenceFreeTextInvoice(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        CustInvoiceTable custInvoiceTable = CustInvoiceTable::findRecId(_documentStatus.DocumentRecId);

        if (custInvoiceTable)
        {
            DemoDataPostFormHelper::executeLink(custInvoiceTable, _caller, menuItemDisplayStr(CustFreeInvoiceDetails));
        }

        return custInvoiceTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceInventoryJournal</Name>
				<Source><![CDATA[
    private static boolean referenceInventoryJournal(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        InventJournalTable inventJournalTable;

        select firstonly inventJournalTable
            where inventJournalTable.RecId == _documentStatus.DocumentRecId;

        if (inventJournalTable)
        {
            DemoDataPostFormHelper::executeLink(inventJournalTable, _caller, menuItemDisplayStr(InventJournalTableLossProfit));
        }

        return inventJournalTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceItemPriceSim</Name>
				<Source><![CDATA[
    private static boolean referenceItemPriceSim(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        InventItemPriceSim inventItemPriceSim = InventItemPriceSim::findRecId(_documentStatus.DocumentRecId);

        if (inventItemPriceSim)
        {
            // Default to the costing version form
            Args args = new Args();
            args.caller(_caller);

            new MenuFunction(menuItemDisplayStr(CostingVersion), MenuItemType::Display).run(args);
        }

        return inventItemPriceSim.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceLedgerJournalTable</Name>
				<Source><![CDATA[
    private static boolean referenceLedgerJournalTable(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::findByRecId(_documentStatus.DocumentRecId);

        if (ledgerJournalTable)
        {
            str menuItemDisplayName = LedgerJournalStatic::menuItemNameForJournalType(ledgerJournalTable);
            DemoDataPostFormHelper::executeLink(ledgerJournalTable, _caller, menuItemDisplayName);
        }

        return ledgerJournalTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceSalesOrder</Name>
				<Source><![CDATA[
    private static boolean referenceSalesOrder(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        SalesTable salesTable = SalesTable::findRecId(_documentStatus.DocumentRecId);

        if (salesTable)
        {
            DemoDataPostFormHelper::executeLink(salesTable, _caller, menuItemDisplayStr(SalesTableListPage));
        }

        return salesTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceTradeAgreement</Name>
				<Source><![CDATA[
    private static boolean referenceTradeAgreement(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        PriceDiscAdmTable agreementTable;

        select firstonly agreementTable
            where agreementTable.RecId == _documentStatus.DocumentRecId;

        if (agreementTable)
        {
            DemoDataPostFormHelper::executeLink(agreementTable, _caller, menuItemDisplayStr(PriceDiscAdmTable));
        }

        return agreementTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referencePurchaseOrder</Name>
				<Source><![CDATA[
    private static boolean referencePurchaseOrder(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        PurchTable purchTable = PurchTable::findRecId(_documentStatus.DocumentRecId);

        if (purchTable)
        {
            DemoDataPostFormHelper::executeLink(purchTable, _caller, menuItemDisplayStr(PurchTableListPage));
        }

        return purchTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>referenceVendorInvoice</Name>
				<Source><![CDATA[
    private static boolean referenceVendorInvoice(DemoDataPostRunDocumentStatus _documentStatus, FormRun _caller)
    {
        VendInvoiceInfoTable vendInvoiceInfoTable = VendInvoiceInfoTable::findRecId(_documentStatus.DocumentRecId);

        if (vendInvoiceInfoTable)
        {
            DemoDataPostFormHelper::executeLink(vendInvoiceInfoTable, _caller, menuItemDisplayStr(VendOpenInvoicesListPage));
        }

        return vendInvoiceInfoTable.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeLink</Name>
				<Source><![CDATA[
    private static void executeLink(Common _recordTable, FormRun _caller, str _menuItemName)
    {
        if (_recordTable.RecId && _caller && _menuItemName)
        {
            Args args = new Args();
            args.caller(_caller);
            args.record(_recordTable);

            MenuFunction menuFunction = new MenuFunction(_menuItemName, MenuItemType::Display);

            if (menuFunction)
            {
                menuFunction.run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>swapLineNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Swap the order of two document lines in a demo data job run.
    /// </summary>
    /// <param name = "_runId">The run context for both lines.</param>
    /// <param name = "_firstLine">The first line number.</param>
    /// <param name = "_secondLine">The second line number.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void swapLineNum(DemoDataPostRunId _runId, LineNum _firstLine, LineNum _secondLine)
    {
        DemoDataPostRunDocument firstDocument = DemoDataPostRunDocument::find(_runId, _firstLine, true);
        DemoDataPostRunDocument secondDocument = DemoDataPostRunDocument::find(_runId, _secondLine, true);

        if (firstDocument && secondDocument)
        {
            ttsbegin;
            // Temporary line num to avoid key index conflict
            firstDocument.LineNum = maxInt();
            firstDocument.update();

            secondDocument.LineNum = _firstLine;
            secondDocument.update();

            firstDocument.LineNum = _secondLine;
            firstDocument.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>