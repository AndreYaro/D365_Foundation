<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rTax25LedgerRange</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rTax25LedgerRange
{
    TmpRTax25LedgerAccountList tmpRTax25LedgerAccountList;
    RTax25RegisterId           rTax25RegisterId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountIntervalToAccountNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void accountIntervalToAccountNum(TmpRTax25LedgerAccountList _tmpLedgerAccountList,
                                           boolean                    _exception     = false,
                                           boolean                    _allowEmptyDim = false)
{
    DimensionAttributeValueTotallingCriteria   acc_ledgerTableInterval, off_ledgerTableInterval;
    MainAccount                                acc_mainAccount, off_mainAccount;
    DimensionAttributeValue                    acc_dimAttributeValue, off_dimAttributeValue;

    #LocalMacro.OffsetToNum
        if (MainAccount::findTotalCriteria(_tmpLedgerAccountList.OffsetMainAccountId))
        {
            while select off_ledgerTableInterval
                exists join off_dimAttributeValue
                    where off_dimAttributeValue.RecId              == off_ledgerTableInterval.DimensionAttributeValue
                       && off_dimAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                       && off_dimAttributeValue.EntityInstance     == _tmpLedgerAccountList.OffsetMainAccountId
            {
                while select off_mainAccount
                    where off_mainAccount.MainAccountId         >= off_ledgerTableInterval.FromValue
                       && off_mainAccount.MainAccountId         <= off_ledgerTableInterval.ToValue
                       && off_mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
                {
                    tmpRTax25LedgerAccountList.addRecord(_tmpLedgerAccountList.RTax25ProfitTable,
                                                         ((acc_ledgerTableInterval) ? acc_mainAccount.RecId : _tmpLedgerAccountList.MainAccountId),
                                                         off_mainAccount.RecId,
                                                         _tmpLedgerAccountList.DefaultDimension,
                                                         _tmpLedgerAccountList.OffsetDefaultDimension,
                                                         rTax25RegisterId,
                                                         false,
                                                         false,
                                                         _exception,
                                                         _allowEmptyDim);
                }
            }
        }
        else if (acc_ledgerTableInterval)
        {
            tmpRTax25LedgerAccountList.addRecord(_tmpLedgerAccountList.RTax25ProfitTable,
                                                 ((acc_ledgerTableInterval) ? acc_mainAccount.RecId : _tmpLedgerAccountList.MainAccountId),
                                                 _tmpLedgerAccountList.OffsetMainAccountId,
                                                 _tmpLedgerAccountList.DefaultDimension,
                                                 _tmpLedgerAccountList.OffsetDefaultDimension,
                                                 rTax25RegisterId,
                                                 false,
                                                 false,
                                                 _exception,
                                                 _allowEmptyDim);
        }
    #EndMacro

    //Parameters checking
    if (! _tmpLedgerAccountList.MainAccountId || ! _tmpLedgerAccountList.OffsetMainAccountId)
        return;

    if (MainAccount::findTotalCriteria(_tmpLedgerAccountList.MainAccountId))
    {
        while select acc_ledgerTableInterval
            exists join acc_dimAttributeValue
                where acc_dimAttributeValue.RecId              == acc_ledgerTableInterval.DimensionAttributeValue
                   && acc_dimAttributeValue.DimensionAttribute == DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount)
                   && acc_dimAttributeValue.EntityInstance     == _tmpLedgerAccountList.MainAccountId
        {
            while select acc_mainAccount
                where acc_mainAccount.MainAccountId         >= acc_ledgerTableInterval.FromValue
                   && acc_mainAccount.MainAccountId         <= acc_ledgerTableInterval.ToValue
                   && acc_mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
            {
                #OffsetToNum
            }
        }
    }
    else
    {
        #OffsetToNum
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>checkChildProfit</Name>
				<Source><![CDATA[
    private void checkChildProfit(
    RefRecId  _parentProfitTableRecId,
    RefRecId  _mainProfitTableRecId)
{
    RTax25ProfitTable  prTax25ProfitTable;

    while select ProfitId from prTax25ProfitTable
        where prTax25ProfitTable.ParentProfitRecId  == _parentProfitTableRecId
           && prTax25ProfitTable.RecId              != _mainProfitTableRecId
    {
        this.createTmpAccountListTable(prTax25ProfitTable.RecId);
        this.checkChildProfit(prTax25ProfitTable.RecId, _mainProfitTableRecId);
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>createTmpAccountListTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TmpRTax25LedgerAccountList createTmpAccountListTable(RefRecId _rTax25ProfitTableRecId)
{
    RTax25ProfitLedgerSetup     rTax25LedgerAdjustment;
    boolean                     anyFound    = false;
    DimensionDefault            defaultDimension;

    if (! _rTax25ProfitTableRecId)
    {
        return tmpRTax25LedgerAccountList;
    }
    while select rTax25LedgerAdjustment
          where  rTax25LedgerAdjustment.rTax25ProfitTable == _rTax25ProfitTableRecId
    {
        anyFound = true;
        if (rTax25LedgerAdjustment.AccountIntervalType       != TableGroupAll::GroupId &&
            rTax25LedgerAdjustment.OffsetAccountIntervalType != TableGroupAll::GroupId)
        {
            tmpRTax25LedgerAccountList.addRecord(rTax25LedgerAdjustment.rTax25ProfitTable,
                                                 MainAccount::findByMainAccountId(rTax25LedgerAdjustment.AccountNumGroup).RecId,
                                                 MainAccount::findByMainAccountId(rTax25LedgerAdjustment.OffsetAccountNumGroup).RecId,
                                                 rTax25LedgerAdjustment.DefaultDimension,
                                                 rTax25LedgerAdjustment.OffsetDefaultDimension,
                                                 rTax25RegisterId,
                                                 (rTax25LedgerAdjustment.AccountIntervalType       == TableGroupAll::All),
                                                 (rTax25LedgerAdjustment.OffsetAccountIntervalType == TableGroupAll::All),
                                                 false,
                                                 rTax25LedgerAdjustment.AllowEmptyTaxDim);

            if (rTax25LedgerAdjustment.AccountNumGroup && rTax25LedgerAdjustment.OffsetAccountNumGroup)
            {
                this.accountIntervalToAccountNum(tmpRTax25LedgerAccountList, false, rTax25LedgerAdjustment.AllowEmptyTaxDim);
            }
        }
        else
        {
            if (rTax25LedgerAdjustment.AccountIntervalType       == TableGroupAll::GroupId &&
                rTax25LedgerAdjustment.OffsetAccountIntervalType != TableGroupAll::GroupId)
            {
                this.insertFromIntervalOneSide(rTax25LedgerAdjustment, false);
            }
            else
            {
                if (rTax25LedgerAdjustment.AccountIntervalType       != TableGroupAll::GroupId &&
                    rTax25LedgerAdjustment.OffsetAccountIntervalType == TableGroupAll::GroupId)
                {
                    this.insertFromIntervalOneSide(rTax25LedgerAdjustment, true);
                }
                else
                {
                    this.insertFromIntervalBothSide(rTax25LedgerAdjustment);
                }
            }
        }
    }

    if (! anyFound)
    {
        defaultDimension = RTax25ProfitTable::profitRecId2DefaultDimension(_rTax25ProfitTableRecId);
        if (defaultDimension)
        {
            tmpRTax25LedgerAccountList.addRecord(_rTax25ProfitTableRecId,
                                                 0,
                                                 0,
                                                 defaultDimension,
                                                 defaultDimension,
                                                 rTax25RegisterId,
                                                 true,
                                                 true);
        }
    }

    return tmpRTax25LedgerAccountList;
}

]]></Source>
			</Method>
			<Method>
				<Name>createTmpExceptionTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected TmpRTax25LedgerAccountList createTmpExceptionTable()
{
    RTax25ProfitLedgerSetup     rTax25LedgerAdjustment;

    while select rTax25LedgerAdjustment
          where  rTax25LedgerAdjustment.RegisterId == rTax25RegisterId
    {
        if (rTax25LedgerAdjustment.AccountIntervalType       != TableGroupAll::GroupId &&
            rTax25LedgerAdjustment.OffsetAccountIntervalType != TableGroupAll::GroupId)
        {
            tmpRTax25LedgerAccountList.addRecord(rTax25LedgerAdjustment.rTax25ProfitTable,
                                                 MainAccount::findByMainAccountId(rTax25LedgerAdjustment.AccountNumGroup).RecId,
                                                 MainAccount::findByMainAccountId(rTax25LedgerAdjustment.OffsetAccountNumGroup).RecId,
                                                 rTax25LedgerAdjustment.DefaultDimension,
                                                 rTax25LedgerAdjustment.OffsetDefaultDimension,
                                                 rTax25RegisterId,
                                                 (rTax25LedgerAdjustment.AccountIntervalType       == TableGroupAll::All),
                                                 (rTax25LedgerAdjustment.OffsetAccountIntervalType == TableGroupAll::All),
                                                 true);

            if (rTax25LedgerAdjustment.AccountNumGroup && rTax25LedgerAdjustment.OffsetAccountNumGroup)
            {
                this.accountIntervalToAccountNum(tmpRTax25LedgerAccountList, true);
            }
        }
        else
        {
            if (rTax25LedgerAdjustment.AccountIntervalType       == TableGroupAll::GroupId &&
                rTax25LedgerAdjustment.OffsetAccountIntervalType != TableGroupAll::GroupId)
            {
                this.insertFromIntervalOneSide(rTax25LedgerAdjustment, false, true);
            }
            else
            {
                if (rTax25LedgerAdjustment.AccountIntervalType     != TableGroupAll::GroupId &&
                    rTax25LedgerAdjustment.OffsetAccountIntervalType == TableGroupAll::GroupId)
                {
                    this.insertFromIntervalOneSide(rTax25LedgerAdjustment, true, true);
                }
                else
                {
                    this.insertFromIntervalBothSide(rTax25LedgerAdjustment, true);
                }
            }
        }
    }

    return tmpRTax25LedgerAccountList;
}

]]></Source>
			</Method>
			<Method>
				<Name>initFromProfitId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromProfitId(RefRecId _profitTableRecId)
{
    rTax25RegisterId = "";

    if (RTax25ProfitTable::checkProfitRecursion(RTax25ProfitTable::find(_profitTableRecId).ParentProfitRecId,
                                                _profitTableRecId))
    {
        this.createTmpAccountListTable(_profitTableRecId);
        this.checkChildProfit(_profitTableRecId, _profitTableRecId);
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>initFromRegisterId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromRegisterId(RTax25RegisterId _rTax25RegisterId)
{
    RTax25RegisterProfit   rTax25RegisterProfit;

    rTax25RegisterId = _rTax25RegisterId;

    while select rTax25ProfitTable from rTax25RegisterProfit
        where  rTax25RegisterProfit.RegisterId == rTax25RegisterId
    {
        if (RTax25ProfitTable::checkProfitRecursion(RTax25ProfitTable::find(rTax25RegisterProfit.rTax25ProfitTable).ParentProfitRecId,
                                                                            rTax25RegisterProfit.rTax25ProfitTable))
        {
            this.createTmpAccountListTable(rTax25RegisterProfit.rTax25ProfitTable);
            this.checkChildProfit(rTax25RegisterProfit.rTax25ProfitTable, rTax25RegisterProfit.rTax25ProfitTable);
        }
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>initFromRegisterIdException</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromRegisterIdException(RTax25RegisterId _rTax25RegisterId)
{
    ;
    rTax25RegisterId = _rTax25RegisterId;
    this.createTmpExceptionTable();
}

]]></Source>
			</Method>
			<Method>
				<Name>insertFromIntervalBothSide</Name>
				<Source><![CDATA[
    private void insertFromIntervalBothSide(RTax25ProfitLedgerSetup  _rTax25LedgerAdjustment,
                                        boolean                  _exception = false)
{
    RTax25LedgerInterval       rTax25LedgerInterval;
    MainAccount                mainAccount;
    RTax25LedgerInterval       prTax25LedgerInterval;
    MainAccount                pMainAccount;

    while select FromMainAccountId, ToMainAccountId from rTax25LedgerInterval
        where rTax25LedgerInterval.rTax25LedgerIntervalGroup == RTax25LedgerIntervalGroup::findByIntervalGroup(_rTax25LedgerAdjustment.AccountNumGroup).RecId
        join FromMainAccountId, ToMainAccountId from prTax25LedgerInterval
            where prTax25LedgerInterval.rTax25LedgerIntervalGroup == RTax25LedgerIntervalGroup::findByIntervalGroup(_rTax25LedgerAdjustment.OffsetAccountNumGroup).RecId
    {
        while select RecId from mainAccount
            where mainAccount.MainAccountId >= MainAccount::find(rTax25LedgerInterval.FromMainAccountId).MainAccountId   &&
                  mainAccount.MainAccountId <= MainAccount::find(rTax25LedgerInterval.ToMainAccountId).MainAccountId     &&
                  mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
        join RecId from pMainAccount
            where pMainAccount.MainAccountId >= MainAccount::find(prTax25LedgerInterval.FromMainAccountId).MainAccountId &&
                  pMainAccount.MainAccountId <= MainAccount::find(prTax25LedgerInterval.ToMainAccountId).MainAccountId   &&
                  pMainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
        {
            tmpRTax25LedgerAccountList.addRecord(_rTax25LedgerAdjustment.rTax25ProfitTable,
                                                 mainAccount.RecId,
                                                 pMainAccount.RecId,
                                                 _rTax25LedgerAdjustment.DefaultDimension,
                                                 _rTax25LedgerAdjustment.OffsetDefaultDimension,
                                                 rTax25RegisterId,
                                                 false,
                                                 false,
                                                 _exception,
                                                 _rTax25LedgerAdjustment.AllowEmptyTaxDim);

            this.accountIntervalToAccountNum(tmpRTax25LedgerAccountList, _exception, _rTax25LedgerAdjustment.AllowEmptyTaxDim);
        }
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>insertFromIntervalOneSide</Name>
				<Source><![CDATA[
    private void insertFromIntervalOneSide(RTax25ProfitLedgerSetup    _rTax25LedgerAdjustment,
                                       boolean                    _offsetSet,
                                       boolean                    _exception = false)
{
    RTax25LedgerInterval       rTax25LedgerInterval;
    MainAccount                mainAccount;

    while select FromMainAccountId, ToMainAccountId from rTax25LedgerInterval
        where rTax25LedgerInterval.rTax25LedgerIntervalGroup == (_offsetSet ? RTax25LedgerIntervalGroup::findByIntervalGroup(_rTax25LedgerAdjustment.OffsetAccountNumGroup).RecId :
                                                                    RTax25LedgerIntervalGroup::findByIntervalGroup(_rTax25LedgerAdjustment.AccountNumGroup).RecId)
    {
        while select RecId from mainAccount
            where mainAccount.MainAccountId >= MainAccount::find(rTax25LedgerInterval.FromMainAccountId).MainAccountId &&
                  mainAccount.MainAccountId <= MainAccount::find(rTax25LedgerInterval.ToMainAccountId).MainAccountId   &&
                  mainAccount.LedgerChartOfAccounts == LedgerChartOfAccounts::current()
        {
            tmpRTax25LedgerAccountList.addRecord(_rTax25LedgerAdjustment.rTax25ProfitTable,
                                               (_offsetSet ? MainAccount::findByMainAccountId(_rTax25LedgerAdjustment.AccountNumGroup).RecId : mainAccount.RecId),
                                               (_offsetSet ? mainAccount.RecId : MainAccount::findByMainAccountId(_rTax25LedgerAdjustment.OffsetAccountNumGroup).RecId),
                                               _rTax25LedgerAdjustment.DefaultDimension,
                                               _rTax25LedgerAdjustment.OffsetDefaultDimension,
                                               rTax25RegisterId,
                                               (_offsetSet ? (_rTax25LedgerAdjustment.AccountIntervalType == TableGroupAll::All) : false),
                                               (_offsetSet ? false : (_rTax25LedgerAdjustment.OffsetAccountIntervalType == TableGroupAll::All)),
                                               _exception,
                                               _rTax25LedgerAdjustment.AllowEmptyTaxDim);

            this.accountIntervalToAccountNum(tmpRTax25LedgerAccountList, _exception, _rTax25LedgerAdjustment.AllowEmptyTaxDim);
        }
    }
}

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountRangeTable</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets a temporary account range list.
/// </summary>
/// <returns>
/// The container holding the list of the account records.
/// </returns>
 [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public TmpRTax25LedgerAccountList mainAccountRangeTable()
{
    return tmpRTax25LedgerAccountList;
}

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new()
{
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>