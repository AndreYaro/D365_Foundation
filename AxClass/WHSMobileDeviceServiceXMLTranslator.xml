<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceServiceXMLTranslator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class for translating the xml received from <c>WHSMobileDeviceServiceFacade</c> class.
/// </summary>
[SysObsolete('Warehouse mobile devices portal is no longer supported. Use the warehouse mobile app instead.', false, 15\04\2021)]
public class WHSMobileDeviceServiceXMLTranslator extends WHSServiceXMLTranslator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSMobileDeviceServiceXMLTranslator construct()
    {
        return new WHSMobileDeviceServiceXMLTranslator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXML</Name>
				<Source><![CDATA[
    public XML createXML(container _con)
    {
        container					con = _con;
        container					subCon;
        XML                         result;
        int							i;

        int length = conLen(con);

        using (System.IO.StringWriter stringWriter = new System.IO.StringWriter())
        {
            using(System.Xml.XmlTextWriter xmlTextWriter = WHSWorkExecuteSerializationHelper::createXMLTextWriter(stringWriter))
            {
                // Initialize a blank XML document
                xmlTextWriter.WriteProcessingInstruction(#XmlXml, #XmlVersion);

                // Check if container has any authentication data and controls. If not the return blank XML
                if (length >= #PassThroughInfo)
                {
                    xmlTextWriter.WriteStartElement(#XMLParentNode);

                    xmlTextWriter.WriteStartElement(#XMLControlsNode);
                    // Controls
                    for (i = #ControlsStart; i <= length; ++i)
                    {
                        xmlTextWriter.WriteStartElement(#XMLControlNode, '');
                        subCon = conPeek(con, i);
                        xmlTextWriter.WriteAttributeString(#XMLControlCtrlType, conPeek(subCon, #controlType));
                        xmlTextWriter.WriteAttributeString(#XMLControlName, conPeek(subCon, #name));
                        xmlTextWriter.WriteAttributeString(#XMLControlLabel, conPeek(subCon, #label));
                        xmlTextWriter.WriteAttributeString(#XMLControlNewLine, int2str(conPeek(subCon, #newLine)));
                        xmlTextWriter.WriteAttributeString(#XMLControlData, WHSWorkExecuteDisplay::prepareControlData(conPeek(subCon, #data)));
                        xmlTextWriter.WriteAttributeString(#XMLControlType, conPeek(subCon, #type));
                        xmlTextWriter.WriteAttributeString(#XMLControlLength, int2str(conPeek(subCon, #length)));
                        xmlTextWriter.WriteAttributeString(#XMLControlError, conPeek(subCon, #error));
                        xmlTextWriter.WriteAttributeString(#XMLControlDefaultButton, int2str(conPeek(subCon, #defaultButton)));
                        xmlTextWriter.WriteAttributeString(#XMLControlEnabled, int2str(conPeek(subCon, #enabled)));
                        xmlTextWriter.WriteAttributeString(#XMLControlSelected, conPeek(subCon, #selected));
                        xmlTextWriter.WriteAttributeString(#XMLControlColor, conPeek(subCon, #color));
                        xmlTextWriter.WriteEndElement();
                    }
                    xmlTextWriter.WriteEndElement();

                    // Pass through
                    subCon = conPeek(con, #PassthroughInfo);
                    if (conLen(subCon) > 0)
                    {
                        WHSRFPassthrough pass = WHSRFPassthrough::create(subCon);

                        this.addAuthenticationNode(xmlTextWriter, pass);
                    }

                    xmlTextWriter.WriteEndElement();
                }

                System.Text.StringBuilder stringBuilder = stringWriter.GetStringBuilder();
                result = stringBuilder.ToString();
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readXMLDoThrow</Name>
				<Source><![CDATA[
    public container readXMLDoThrow(XML _xmlString)
    {
        Map                         elementMap = new Map(Types::String, Types::String);
        int                         noOfControls = 0;
        str                         elementName;
        int							i = 0;
        container					con;
        WHSRFPassthrough			pass = new WHSRFPassthrough(Types::String, Types::String);

        #define.EmptyXML('<?xml version=\"1.0\" encoding=\"utf-8\"?>')

        // Local method for generating a key for the element map
        str makeKey(str _key1, str _key2)
        {
            return _key1 + '#' + _key2;
        }

        // Local method to map elements attributes
        void mapAttributes(str _elementName, System.Xml.XmlTextReader _reader)
        {
            boolean moreAttr;
            str     attrName;
            str     attrValue;

            // Map the element itself
            elementMap.insert(_elementName, '');

            // Map attributes if any
            moreAttr = _reader.MoveToFirstAttribute();
            while (moreAttr)
            {
                attrName = _reader.get_Name();
                attrValue = _reader.get_Value();
                elementMap.insert(makeKey(_elementName, attrName), attrValue);
                moreAttr = _reader.MoveToNextAttribute();
            }
        }

        // Local method to get the attribute value.
        str getAttributeValue(str _elementName, str _attrName)
        {
            return elementMap.lookup(makeKey(_elementName, _attrName));
        }

        // Start reading XML
        using (System.IO.StringReader stringReader = new System.IO.StringReader(_xmlString))
        {
            using (System.Xml.XmlTextReader reader = WHSWorkExecuteSerializationHelper::createXMLTextReader(stringReader))
            {
                if (!_xmlString || _xmlString == #EmptyXML)
                {
                    return con;
                }

                // Read through the XML and get all the elements and associated attributes
                while (reader.Read())
                {
                    if (reader.get_NodeType() == System.Xml.XmlNodeType::Element)
                    {
                        elementName = reader.get_Name();
                        switch (elementName)
                        {
                            case #XMLParentNode:
                            case #XMLAuthenticationNode:
                                mapAttributes(elementName, reader);
                                break;
                            case #XMLControlNode:
                                mapAttributes(makeKey(elementName, int2str(noOfControls)), reader);
                                noOfControls++;
                                break;
                        }
                    }
                }

                // Add the Mode/Step to the container
                con = conIns(con, #StateInfo, [WHSWorkExecuteMode::WebRequestDefault, 0]);

                // Add the Pass Through data to the container
                if (elementMap.exists(#XMLAuthenticationNode))
                {
                    pass.insert(#UserId, getAttributeValue(#XMLAuthenticationNode, #XMLAuthNodeUserId));
                    pass.insert(#UserSessionId, getAttributeValue(#XMLAuthenticationNode, #XMLAuthNodeSessionId));
                }
                
                pass.parmRequestXml(_xmlString);
                con = conIns(con, #PassthroughInfo, pass.pack());

                // Add the Controls to the container
                for (i = 0; i < noOfControls; i++)
                {
                    elementName = makeKey(#XMLControlNode, int2str(i));
                    container controlCon = conNull();
                    controlCon           = conIns(controlCon, 1, getAttributeValue(elementName, #XMLControlCtrlType),
                                                                 getAttributeValue(elementName, #XMLControlName),
                                                                 getAttributeValue(elementName, #XMLControlLabel),
                                                                 getAttributeValue(elementName, #XMLControlNewLine),
                                                                 getAttributeValue(elementName, #XMLControlData),
                                                                 getAttributeValue(elementName, #XMLControlType),
                                                                 getAttributeValue(elementName, #XMLControlLength),
                                                                 getAttributeValue(elementName, #XMLControlError),
                                                                 getAttributeValue(elementName, #XMLControlDefaultButton),
                                                                 getAttributeValue(elementName, #XMLControlEnabled),
                                                                 getAttributeValue(elementName, #XMLControlSelected),
                                                                 getAttributeValue(elementName, #XMLControlColor));
                    con = conIns(con, i + #ControlsStart, controlCon);
                }
            }
        }

        return con;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>