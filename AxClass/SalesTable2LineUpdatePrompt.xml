<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTable2LineUpdatePrompt</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesTable2LineUpdatePrompt extends RunBase
{
    DialogRunbase               dialog;
    SalesTable                  salesTable;
    List                        salesTable2LineUpdateFields;
    Map                         fieldList;
    container                   packedPreviousAnswers;
    container                   packedFieldList;
    PriceDiscUpdatePriceDisc    updatePriceDiscMode;
    DialogField                 updatePriceDiscDialogField;
    NoYes                       updatePricedisc;
    Set                         priceDiscUpdateTriggers;
    container                   packedPriceDiskFieldList;
    boolean                     priceDiscChangePolicyExistOnLine;
    NoYes                       alwaysPromtPriceDiscUpdate;
    DialogButton                copyTaxGroupToMarkupTrans;
    boolean                     extendedPromptReturnValue;
    DeliveryDateUpdateInLines   deliveryDateUpdateInLines;
    DialogField                 deliveryDateUpdateInLinesField;
    CopyDeliveryAddressFromHeaderToLine                copyDeliveryAddressToLines;
    DialogField                 copyDeliveryAddressToLinesField;
    Set                         deliveryDateSectionEnablerControls;
    container                   salesTableContainer;

    #define.CurrentVersion(6)
    #localmacro.CurrentList
        packedFieldList,
        salesTableContainer,
        updatePriceDiscMode,
        packedPriceDiskFieldList,
        priceDiscChangePolicyExistOnLine,
        updatePricedisc,
        copyTaxGroupToMarkupTrans,
        deliveryDateUpdateInLines,
        copyDeliveryAddressToLines
    #endmacro
    #define.UnknownEnumValue(255)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>closeCancel</Name>
				<Source><![CDATA[
    void closeCancel()
    {
        FormRun formRun = dialog.formRun();
        formRun.closeCancel();
        formRun.notify();
        //    dialog.closeCancel();
    }

]]></Source>
			</Method>
			<Method>
				<Name>custAccount_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Monitors the customer account field for changes that may trigger a price discount and/or delivery date
    /// recalculation.
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    public boolean custAccount_modified()
    {
        return this.salesTableFieldModifiedHandler(fieldStr(SalesTable, CustAccount));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Monitors the delivery date field for changes that may trigger a price discount and/or delivery date
    /// recalculation.
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    public boolean deliveryDate_modified()
    {
        return this.salesTableFieldModifiedHandler(fieldStr(SalesTable, DeliveryDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddress_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Monitors the delivery address field for changes that may trigger a price discount and/or delivery date
    /// recalculation.
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    public boolean deliveryPostalAddress_modified()
    {
        return this.salesTableFieldModifiedHandler(fieldStr(SalesTable, DeliveryPostalAddress));
    }

]]></Source>
			</Method>
			<Method>
				<Name>addressChanged</Name>
				<Source><![CDATA[
    private boolean addressChanged()
    {
        return copyDeliveryAddressToLines != CopyDeliveryAddressFromHeaderToLine::DontTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rebuildDialog</Name>
				<Source><![CDATA[
    protected boolean rebuildDialog()
    {
        updatePricedisc = this.priceDiscFieldsToUpdate();

        return (this.addressChanged() ||
               (updatePricedisc && priceDiscChangePolicyExistOnLine) ||
               this.fieldsToPromptFor());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addLineFieldToDialogGroup</Name>
				<Source><![CDATA[
    protected DialogField addLineFieldToDialogGroup(SalesTable2LineField _lineField, DialogGroup _dialogGroup)
    {
        dialog.addGroup(_lineField.fieldGroupLabel(), _dialogGroup);

        dialog.customFieldName_RU(fieldId2name(_lineField.tableId(), _lineField.fieldId()));
        var dialogField = dialog.addField(enumStr(NoYes),
                                                _lineField.questionLabel(),
                                                _lineField.questionHelp());
        dialogField.value(_lineField.updateSalesLines());
        fieldList.insert(_lineField.fieldId(), dialogField);
        
        return dialogField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildTransferSettingsDialogGroup</Name>
				<Source><![CDATA[
    protected void buildTransferSettingsDialogGroup()
    {
        DialogGroup dialogGroup = dialog.addGroup('1.1');
        dialogGroup.columns(1);
        dialogGroup.frameType(FormFrameType::Auto);
        dialogGroup.formBuildGroup().widthMode(FormWidth::ColumnWidth);

        dialogGroup.caption("@SYS4004374");
        
        var salesTable2LineUpdateFieldsEnumerator = salesTable2LineUpdateFields.getEnumerator();
        while (salesTable2LineUpdateFieldsEnumerator.moveNext())
        {
            var salesTable2LineField = salesTable2LineUpdateFieldsEnumerator.current();

            if (salesTable2LineField.table2LineUpdate() == TradeTable2LineUpdate::Prompt)
            {
                var dialogField = this.addLineFieldToDialogGroup(salesTable2LineField, dialogGroup);
                fieldList.insert(salesTable2LineField.fieldId(), dialogField);
            }
        }

        if (this.addressChanged())
        {
            // Create Address Prompt
            dialog.customFieldName_RU(fieldStr(SalesTable, DeliveryPostalAddress));
            dialog.addGroup("@SYS4004375", dialogGroup);
            copyDeliveryAddressToLinesField = dialog.addField(enumStr(CopyDeliveryAddressFromHeaderToLine));
            copyDeliveryAddressToLinesField.value(CopyDeliveryAddressFromHeaderToLine::DontTransfer);
            fieldList.insert(fieldNum(SalesTable, DeliveryPostalAddress), copyDeliveryAddressToLinesField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildUpdateSettingsDialogGroup</Name>
				<Source><![CDATA[
    protected void buildUpdateSettingsDialogGroup()
    {
        DialogGroup dialogGroup = dialog.addGroup('1.2');
        dialogGroup.columns(1);
        dialogGroup.frameType(FormFrameType::Auto);
        dialogGroup.caption("@SYS4004376");

        if ((this.addressChanged() || SalesLineDeliveryDateControlRecalculate::deliveryDateInLinesUpdateNeeded(salesTable2LineUpdateFields,
                                                                                                            TradeTable2LineUpdate::Prompt))
                && (salesTable.SalesType != SalesType::ReturnItem))
        {
            // Create Prompt for DeliveryDate Update
            deliveryDateUpdateInLinesField = SalesLineDeliveryDateControlRecalculate::
                    addToPromptDeliveryDateUpdateInLines(dialogGroup, dialog);
            deliveryDateUpdateInLinesField.enabled(false);
            deliveryDateUpdateInLinesField.value(deliveryDateUpdateInLines);
        }

        //The always-update-fields is kept separate from the prompt-update-fields only for UI reasons.
        if (priceDiscChangePolicyExistOnLine)
        {
            var salesTable2LineUpdateFieldsEnumerator = salesTable2LineUpdateFields.getEnumerator();
            while (salesTable2LineUpdateFieldsEnumerator.moveNext())
            {
                var salesTable2LineField = salesTable2LineUpdateFieldsEnumerator.current();
                if (salesTable2LineField.table2LineUpdate() == TradeTable2LineUpdate::Always
                        && priceDiscUpdateTriggers.in(salesTable2LineField.fieldId()))
                {
                    alwaysPromtPriceDiscUpdate = NoYes::Yes;
                    dialog.addGroup(salesTable2LineField.fieldGroupLabel(), dialogGroup);
                    dialog.addText(salesTable2LineField.lineUpdateDescription());
                }
            }

            // If the prevent unintentional price recalculation feature is enabled, then for retail sales orders,
            // the dialog should not show price and discount section.
            boolean shouldSkipPriceAndDiscountSection =
                RetailPricingCustomizableFeatureToggle::isPreventUnintendedRecalculationEnabled()
                && salesTable.isRetailSale();

            if (priceDiscChangePolicyExistOnLine && !shouldSkipPriceAndDiscountSection)
            {
                updatePriceDiscDialogField = PriceDiscResultFields::promptPriceDiscPolicyUpdate(dialogGroup,
                                                                                                dialog,
                                                                                                updatePriceDiscMode,
                                                                                                false);
                updatePriceDiscDialogField.enabled(alwaysPromtPriceDiscUpdate);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    public Object dialog()
    {
        if (this.rebuildDialog())
        {
            dialog = super();

            dialog.formBuildDesign().windowType(FormWindowType::PopUp);
            fieldList = new Map(Types::Integer, Types::Class);

            this.buildTransferSettingsDialogGroup();
            this.buildUpdateSettingsDialogGroup();      

            dialog.form().design().alwaysOnTop(true);
        }
        return dialog;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogColumns</Name>
				<Source><![CDATA[
    int dialogColumns()
    {
        return real2int(trunc(power(this.fieldsToPromptFor(), 0.5)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes additional logic after dialog runs.
    /// </summary>
    /// <param name="dialogRunbase">
    /// An instance of the <c>DialogRunbase</c> class.
    /// </param>
    public void dialogPostRun(DialogRunbase dialogRunbase)
    {
        dialogRunbase.dialogForm().formRun().controlMethodOverload(true);
        dialogRunbase.dialogForm().formRun().controlMethodOverloadObject(this);
        dialogRunbase.formRun().controlMethodOverload(true);
        dialogRunbase.formRun().controlMethodOverloadObject(this);
        super(dialogRunbase);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogSelectCtrl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables or disables the section of the dialog box that is about the price discount policy.
    /// </summary>
    public void dialogSelectCtrl()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvMode_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Monitors the delivery mode field for changes that may trigger a price discount and/or delivery date
    /// recalculation.
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    public boolean dlvMode_modified()
    {
        return this.salesTableFieldModifiedHandler(fieldStr(SalesTable, DlvMode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendedPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Launches the main dialog box and opens the price discount policy dialog box if the main dialog box
    ///    is not canceled.
    /// </summary>
    /// <returns>
    ///    true if neither of the dialog boxes are canceled; otherwise, false.
    /// </returns>
    public boolean extendedPrompt()
    {
        boolean ret = true;

        if (salesTable.existSalesLine())
        {
            ret = this.prompt();

            if (ret
                && updatePricedisc == NoYes::Yes
                && (priceDiscChangePolicyExistOnLine
                &&  updatePriceDiscMode == PriceDiscUpdatePriceDisc::UpdateIndividual))
            {
                ret = salesTable.PriceDiscResultFields::updateLinePolicies();
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsToPromptFor</Name>
				<Source><![CDATA[
    Counter fieldsToPromptFor()
    {
        Counter                 fieldsToPromptFor = 0;

        ListEnumerator salesTable2LineUpdateFieldsEnumerator = salesTable2LineUpdateFields.getEnumerator();

        while (salesTable2LineUpdateFieldsEnumerator.moveNext())
        {
            SalesTable2LineField salesTable2LineField = salesTable2LineUpdateFieldsEnumerator.current();

            if (salesTable2LineField.table2LineUpdate() == TradeTable2LineUpdate::Prompt)
            {
                fieldsToPromptFor++;
            }
        }

        return fieldsToPromptFor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsToUpdAffectingDelvDatesSetToAlways</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if delivery date update propagation of changes from order header to order lines contains
    /// fields set to always update per parameters.
    /// </summary>
    /// <returns>
    /// true if update affects fields set to always update; false otherwise.
    /// </returns>
    public boolean fieldsToUpdAffectingDelvDatesSetToAlways()
    {
        return SalesLineDeliveryDateControlRecalculate::deliveryDateInLinesUpdateNeeded(salesTable2LineUpdateFields,
                                                                                        TradeTable2LineUpdate::Always);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldsToUpdate</Name>
				<Source><![CDATA[
    boolean fieldsToUpdate()
    {
        boolean                 fieldsToUpdate = false;

        ListEnumerator salesTable2LineUpdateFieldsEnumerator = salesTable2LineUpdateFields.getEnumerator();

        while (salesTable2LineUpdateFieldsEnumerator.moveNext())
        {
            SalesTable2LineField salesTable2LineField = salesTable2LineUpdateFieldsEnumerator.current();

            if (salesTable2LineField.updateSalesLines())
            {
                fieldsToUpdate = true;
                break;
            }
        }

        return fieldsToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        ListEnumerator salesTable2LineUpdateFieldsEnumerator = salesTable2LineUpdateFields.getEnumerator();

        while (salesTable2LineUpdateFieldsEnumerator.moveNext())
        {
            SalesTable2LineField salesTable2LineField = salesTable2LineUpdateFieldsEnumerator.current();

            if (fieldList.exists(salesTable2LineField.fieldId()))
            {
                DialogField dialogField = fieldList.lookup(salesTable2LineField.fieldId());

                salesTable2LineField.updateSalesLines(dialogField.value());
            }
        }

        if (priceDiscChangePolicyExistOnLine
            && updatePriceDiscDialogField != null)
        {
            updatePriceDiscMode = updatePriceDiscDialogField.value();
        }

        if (deliveryDateUpdateInLinesField)
        {
            deliveryDateUpdateInLines = deliveryDateUpdateInLinesField.value();
        }

        if (copyDeliveryAddressToLinesField)
        {
            copyDeliveryAddressToLines = copyDeliveryAddressToLinesField.value();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initpriceDiscUpdateTriggers</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a list of header fields that trigger update of price and discount on the related body
    ///    lines.
    /// </summary>
    protected void initpriceDiscUpdateTriggers()
    {
        priceDiscUpdateTriggers = new Set(Types::Integer);

        priceDiscUpdateTriggers.add(fieldNum (SalesTable, CustAccount));
        priceDiscUpdateTriggers.add(fieldNum (SalesTable, DeliveryDate));
        priceDiscUpdateTriggers.add(fieldNum (SalesTable, InventSiteId));
        priceDiscUpdateTriggers.add(fieldNum (SalesTable, InventLocationId));
        priceDiscUpdateTriggers.add(fieldNum (SalesTable, PriceGroupId));
        priceDiscUpdateTriggers.add(fieldNum (SalesTable, LineDisc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesTable2LineUpdateFields</Name>
				<Source><![CDATA[
    void initSalesTable2LineUpdateFields()
    {
        SysDictField                sysDictFieldArray;
        FieldId                     fieldId;
        // <GEERU>
        TableId                     tableId;

        #ISOCountryRegionCodes
        // </GEERU>
        // <GEECZ>
        // </GEECZ>
        int                         pos = 1;
        int                         array;

        salesTable2LineUpdateFields = new List(Types::Class);

        if (!this.lines2Update())
            return;

        container header2LineFieldIds = SalesTable2LineParameters::header2LineFieldIdList();

        while (pos <= conLen(header2LineFieldIds))
        {
            // <GEERU>
            [tableId, fieldId] = conPeek(header2LineFieldIds, pos);
            // </GEERU>

            if (SalesTable2LineParameters::fieldEnabled(
                // <GEERU>
                tableId,
                // </GEERU>
                fieldId))
            {
                SalesTable2LineField salesTable2LineField = this.salesTable2LineFieldConstruct(
                    // <GEERU>
                    tableId,
                    // </GEERU>
                    fieldId);

                if (salesTable2LineField.table2LineUpdate())
                {
                    boolean fieldChanged = false;

                    // <GEERU>
                    SysDictField sysDictField = new SysDictField(tableId, fieldId);

                    if (tableId == tableNum(SalesTable))
                    {
                        // </GEERU>
                        for (array = 1; array <= sysDictField.arraySize(); array++)
                        {
                            sysDictFieldArray = new SysDictField(sysDictField.tableid(), sysDictField.id(), array);
                            if (salesTable.(sysDictFieldArray.id()) != salesTable.orig().(sysDictFieldArray.id()))
                            {
                                fieldChanged = true;
                            }
                        }

                        if (fieldId == fieldNum(SalesTable,DeliveryDate))
                        {
                            if (this.areDeliveryDatesChanged(salesTable))
                            {
                                fieldChanged = true;
                            }
                        }
                        if (fieldId == fieldNum(SalesTable,InventLocationId))
                        {
                            if (salesTable.InventSiteId != salesTable.orig().InventSiteId)
                            {
                                fieldChanged = true;
                            }
                        }
                        // <GEERU>
                    }
                    else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && tableId == tableNum(SalesTable_RU))
                    {
                        SalesTable_RU salesTableRU = salesTable.salesTable_RU();

                        for (array = 1; array <= sysDictField.arraySize(); array++)
                        {
                            sysDictFieldArray = new SysDictField(sysDictField.tableid(), sysDictField.id(), array);
                            if (salesTableRU.(sysDictFieldArray.id()) != salesTableRU.orig().(sysDictFieldArray.id()))
                            {
                                fieldChanged = true;
                            }
                        }
                    }
                    // </GEERU>
                    // <GEECZ>
                    else if (tableId == tableNum(SalesTable_Intrastat) && SysExtensionSerializerExtensionMap::isExtensionEnabled(tableNum(SalesTable_Intrastat)))
                    {
                        SalesTable_Intrastat salesTableIntrastat = salesTable.salesTable_Intrastat();

                        for (array = 1; array <= sysDictField.arraySize(); array++)
                        {
                            sysDictFieldArray = new SysDictField(sysDictField.tableid(), sysDictField.id(), array);
                            if (salesTableIntrastat.(sysDictFieldArray.id()) != salesTableIntrastat.orig().(sysDictFieldArray.id()))
                            {
                                fieldChanged = true;
                            }
                        }
                    }
                    // </GEECZ>

                    if (fieldChanged)
                    {
                        if (this.updateField(salesTable2LineField))
                        {
                            salesTable2LineField.updateSalesLines(NoYes::Yes);
                        }

                        salesTable2LineUpdateFields.addEnd(salesTable2LineField);
                    }
                }
            }

            pos++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>areDeliveryDatesChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether delivery date dependent fields have changed on a sales order.
    /// </summary>
    /// <param name = "_salesTable">A sales order record.</param>
    /// <returns>true if fields have changed; otherwise, false.</returns>
    protected boolean areDeliveryDatesChanged(SalesTable _salesTable) 
    {
        return (_salesTable.ReceiptDateRequested  != _salesTable.orig().ReceiptDateRequested ||
                _salesTable.ShippingDateRequested != _salesTable.orig().ShippingDateRequested ||
                _salesTable.ShippingDateConfirmed != _salesTable.orig().ShippingDateConfirmed ||
                _salesTable.ReceiptDateConfirmed  != _salesTable.orig().ReceiptDateConfirmed);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventLocationId_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Monitors the warehouse field for changes that may trigger a price discount and/or delivery date
    /// recalculation.
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    public boolean inventLocationId_modified()
    {
        return this.salesTableFieldModifiedHandler(fieldStr(SalesTable, InventLocationId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventSiteId_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Monitors the site field for changes that may trigger a price discount and/or delivery date
    /// recalculation.
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    public boolean inventSiteId_modified()
    {
        return this.salesTableFieldModifiedHandler(fieldStr(SalesTable, InventSiteId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDisc_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Monitors the line discount field for changes that may trigger a price discount and/or delivery date
    /// recalculation.
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    public boolean lineDisc_modified()
    {
        return this.salesTableFieldModifiedHandler(fieldStr(SalesTable, LineDisc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lines2Update</Name>
				<Source><![CDATA[
    boolean lines2Update()
    {
        return salesTable.existSalesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        packedFieldList          = salesTable2LineUpdateFields.pack();
        packedPriceDiskFieldList = priceDiscUpdateTriggers.pack();
        salesTableContainer = buf2Con(salesTable, true);
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packedSalesTable2LineUpdateFields</Name>
				<Source><![CDATA[
    container packedSalesTable2LineUpdateFields()
    {
        return salesTable2LineUpdateFields.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>packPreviousAnswers</Name>
				<Source><![CDATA[
    private void packPreviousAnswers()
    {
        Map                     previousAnswers = new Map(Types::Integer, Types::Enum);

        if (!salesTable2LineUpdateFields)
            return;

        ListEnumerator salesTable2LineUpdateFieldsEnumerator = salesTable2LineUpdateFields.getEnumerator();

        while (salesTable2LineUpdateFieldsEnumerator.moveNext())
        {
            SalesTable2LineField salesTable2LineField = salesTable2LineUpdateFieldsEnumerator.current();

            if (previousAnswers.exists(salesTable2LineField.fieldId()))
            {
                previousAnswers.remove(salesTable2LineField.fieldId());
            }
            previousAnswers.insert(salesTable2LineField.fieldId(), salesTable2LineField.updateSalesLines());
        }

        packedPreviousAnswers = previousAnswers.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyDeliveryAddressToLines</Name>
				<Source><![CDATA[
    public DialogButton parmCopyDeliveryAddressToLines(CopyDeliveryAddressFromHeaderToLine _copyDeliveryAddressToLines = copyDeliveryAddressToLines)
    {
        DialogButton returnResult;

        copyDeliveryAddressToLines = _copyDeliveryAddressToLines;

        switch (copyDeliveryAddressToLines)
        {
            case CopyDeliveryAddressFromHeaderToLine::TransferToAllLines:
                returnResult = DialogButton::YesToAll;
                break;
            case CopyDeliveryAddressFromHeaderToLine::TransferToMatchedLines:
                returnResult = DialogButton::Yes;
                break;
            case CopyDeliveryAddressFromHeaderToLine::DontTransfer:
                returnResult = DialogButton::No;
                break;
            default:
                returnResult = DialogButton::Cancel;
                break;
        }

        return returnResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCopyTaxGroupToMarkupTrans</Name>
				<Source><![CDATA[
    public DialogButton parmCopyTaxGroupToMarkupTrans(DialogButton _copyTaxGroupToMarkupTrans = copyTaxGroupToMarkupTrans)
    {
        copyTaxGroupToMarkupTrans = _copyTaxGroupToMarkupTrans;

        return copyTaxGroupToMarkupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeliveryDateUpdateInLines</Name>
				<Source><![CDATA[
    public DeliveryDateUpdateInLines parmDeliveryDateUpdateInLines(DeliveryDateUpdateInLines _deliveryDateUpdateInLines = deliveryDateUpdateInLines)
    {
        deliveryDateUpdateInLines = _deliveryDateUpdateInLines;
        return deliveryDateUpdateInLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExtendedPromptReturnValue</Name>
				<Source><![CDATA[
    public boolean parmExtendedPromptReturnValue(boolean _extendedPromptReturnValue = extendedPromptReturnValue)
    {
        extendedPromptReturnValue = _extendedPromptReturnValue;
        return extendedPromptReturnValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceDiscFieldsToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether any header field configured to always update the lines are of the type
    ///    triggering recalculation of prices or discounts.
    /// </summary>
    /// <returns>
    ///    true if any always-update lines fields are changed and subject to trigger price or discount
    ///    recalculation; otherwise, false.
    /// </returns>
    protected boolean priceDiscFieldsToUpdate()
    {
        boolean                 priceDiscFieldsToUpdate;

        ListEnumerator salesTable2LineUpdateFieldsEnumerator = salesTable2LineUpdateFields.getEnumerator();
        while (salesTable2LineUpdateFieldsEnumerator.moveNext() && !priceDiscFieldsToUpdate)
        {
            SalesTable2LineField salesTable2LineField = salesTable2LineUpdateFieldsEnumerator.current();
            if (priceDiscUpdateTriggers.in(salesTable2LineField.fieldId())
            && salesTable2LineField.updateSalesLines())
            {
                priceDiscFieldsToUpdate = true;
                break;
            }
        }

        return priceDiscFieldsToUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>priceGroupId_modified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Monitors the price group field for changes that may trigger a price discount and/or delivery date
    /// recalculation.
    /// </summary>
    /// <returns>
    /// true
    /// </returns>
    public boolean priceGroupId_modified()
    {
        return this.salesTableFieldModifiedHandler(fieldStr(SalesTable, PriceGroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        if (!this.fieldsToUpdate())
            return;

        SalesTable2LineUpdate salesTable2LineUpdate = new SalesTable2LineUpdate(this);
        salesTable2LineUpdate.parmUpdatePricedisc(updatePricedisc);
        salesTable2LineUpdate.parmUpdatePriceDiscMode(updatePriceDiscMode);
        salesTable2LineUpdate.parmCopyTaxGroupToMarkupTrans(copyTaxGroupToMarkupTrans);
        salesTable2LineUpdate.parmDeliveryDateUpdateInLines(deliveryDateUpdateInLines);
        salesTable2LineUpdate.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable</Name>
				<Source><![CDATA[
    SalesTable salesTable(SalesTable _salesTable = null)
    {
        if (_salesTable)
        {
            salesTable = _salesTable;
            this.initSalesTable2LineUpdateFields();
            this.initpriceDiscUpdateTriggers();
            priceDiscChangePolicyExistOnLine = salesTable.priceDiscChangePolicyExistOnLine();
        }
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTable2LineFieldConstruct</Name>
				<Source><![CDATA[
    protected SalesTable2LineField salesTable2LineFieldConstruct(
        TableId _tableId,
        FieldId _fieldId)
    {
        return SalesTable2LineField::construct(
            // <GEERU>
            _tableId,
            // </GEERU>
            _fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesTableFieldModifiedHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Monitors the passed field for changes that may trigger a price discount and/or delivery date
    /// recalculation.
    /// </summary>
    /// <param name = "_fieldName">
    /// The <c>FieldName</c> to be monitored.
    /// </param>
    /// <returns>
    /// true.
    /// </returns>
    protected boolean salesTableFieldModifiedHandler(FieldName _fieldName)
    {
        RefFieldId fieldId = fieldName2id(tableNum(SalesTable), _fieldName);

        // Price Discount section enable/disable
        if (priceDiscUpdateTriggers.in(fieldId))
        {
            this.updatePriceDiscDialogControl(fieldId);
        }

        // Delivery Date section
        if (SalesLineDeliveryDateControlRecalculate::checkFieldForDeliveryDateUpdate(tableNum(SalesTable), fieldId))
        {
            this.updateDeliveryDateDialogControl(fieldId, _fieldName);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                salesTable2LineUpdateFields = List::create(packedFieldList);
                priceDiscUpdateTriggers     = Set::create(packedPriceDiskFieldList);
                salesTable                  = con2Buf(salesTableContainer);
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeliveryDateAndCopyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Decides whether to update delivery dates and copy addresses from header to lines for
    /// a given SalesId.
    /// </summary>
    /// <param name="_salesId">
    /// SalesId value to validate before executing the method. Value will be
    /// compared to this.salesTable().SalesId.
    /// </param>
    public void updateDeliveryDateAndCopyAddress(SalesId _salesId)
    {
        DeliveryDateUpdateInLines   updateDeliveryDateDuringCopyAddress;

        if (this.salesTable().SalesId != _salesId)
        {
            return;
        }

        if (this.parmCopyDeliveryAddressToLines() == DialogButton::Yes || this.parmCopyDeliveryAddressToLines() == DialogButton::YesToAll)
        {
            if (this.fieldsToUpdate())
            {
                //delay the delivery date update
                updateDeliveryDateDuringCopyAddress = #UnknownEnumValue;
            }
            else
            {
                updateDeliveryDateDuringCopyAddress = this.parmDeliveryDateUpdateInLines();
            }

            salesTable.copyAddressToLine(this.parmCopyDeliveryAddressToLines(), salesTable, updateDeliveryDateDuringCopyAddress);
        }
        else
        {
            //fields marked Always update need to be updated
            if ((this.fieldsToUpdate() || this.parmCopyDeliveryAddressToLines() != DialogButton::Cancel)
                && this.fieldsToUpdAffectingDelvDatesSetToAlways()
                && this.parmDeliveryDateUpdateInLines() == #UnknownEnumValue)
            {
                this.parmDeliveryDateUpdateInLines(SalesParameters::find().DeliveryDateUpdateInLines);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDeliveryDateDialogControl</Name>
				<Source><![CDATA[
    private void updateDeliveryDateDialogControl(RefFieldId _fieldId, FieldName _fieldName)
    {
        boolean                 dialogFieldValue;

        if (!deliveryDateUpdateInLinesField)
        {
            return;
        }

        DialogField dialogField = fieldList.lookup(_fieldId);

        if (!dialogField)
        {
            return;
        }

        if (_fieldName == fieldStr(SalesTable, DeliveryPostalAddress))
        {
            CopyDeliveryAddressFromHeaderToLine tempCopyDeliveryAddressFromHeaderToLine = dialogField.value();
            dialogFieldValue = tempCopyDeliveryAddressFromHeaderToLine !=
                                CopyDeliveryAddressFromHeaderToLine::DontTransfer;
        }
        else
        {
            dialogFieldValue = dialogField.value();
        }

        boolean deliveryDateSectionEnabled = this.updateEnabledStatusValue(_fieldId, dialogFieldValue);

        if (deliveryDateSectionEnabled)
        {
            deliveryDateUpdateInLinesField.enabled(true);
            deliveryDateUpdateInLinesField.value(SalesParameters::find().DeliveryDateUpdateInLines);
        }
        else
        {
            deliveryDateUpdateInLinesField.value(#UnknownEnumValue);
            deliveryDateUpdateInLinesField.enabled(false);
        }

        this.salesAgreementLinkValid(_fieldName, dialogFieldValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEnabledStatusValue</Name>
				<Source><![CDATA[
    private boolean updateEnabledStatusValue(RefFieldId _fieldId, boolean _fieldValue)
    {
        if (deliveryDateSectionEnablerControls == null)
        {
            deliveryDateSectionEnablerControls =  new Set(Types::Integer);
        }

        if (!_fieldValue && (!deliveryDateSectionEnablerControls.elements()))
        {
            return false;
        }

        if (_fieldValue)
        {
            deliveryDateSectionEnablerControls.add(_fieldId);
        }
        else
        {
            deliveryDateSectionEnablerControls.remove(_fieldId);
        }

        return deliveryDateSectionEnablerControls.elements() != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateField</Name>
				<Source><![CDATA[
    protected boolean updateField(SalesTable2LineField _salesTable2LineField)
    {
        return _salesTable2LineField.table2LineUpdate() == TradeTable2LineUpdate::Always;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceDiscDialogControl</Name>
				<Source><![CDATA[
    private void updatePriceDiscDialogControl(RefFieldId _fieldId)
    {
        if (priceDiscChangePolicyExistOnLine && updatePriceDiscDialogField != null)
        {
            if (alwaysPromtPriceDiscUpdate == NoYes::Yes)
            {
                updatePricedisc = alwaysPromtPriceDiscUpdate;
            }
            else
            {
                if (fieldList.exists(_fieldId))
                {
                    DialogField dialogField = fieldList.lookup(_fieldId);
                    updatePricedisc = dialogField.value();
                    boolean priceDiscountEnabled = this.updateEnabledStatusValue(_fieldId, updatePricedisc);
                    updatePriceDiscDialogField.enabled(priceDiscountEnabled);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesTable2LineUpdatePrompt construct()
    {
        return new SalesTable2LineUpdatePrompt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS62838";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExecuteExtendedPrompt</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>SalesTable2LineUpdatePrompt</c> class and executes the <c>extendedPrompt</c> instance method.
    /// </summary>
    /// <param name="_salesTable">
    ///    A buffer of the <c>SalesTable</c> table.
    /// </param>
    /// <param name="_copyTaxGroupToMarkupTrans">
    ///    A DialogButton type.
    /// </param>
    /// <returns>
    ///    An initiated instance the <c>SalesTable2LineUpdatePrompt</c> class if any fields are to be updated; otherwise,
    ///    a nulled object of the <c>SalesTable2LineUpdatePrompt</c> class.
    /// </returns>
    public static SalesTable2LineUpdatePrompt newExecuteExtendedPrompt(
        SalesTable _salesTable,
        DialogButton _copyTaxGroupToMarkupTrans)
    {
        SalesTable2LineUpdatePrompt salesTable2LineUpdatePrompt = SalesTable2LineUpdatePrompt::newFromSalesTable(_salesTable);

        salesTable2LineUpdatePrompt.parmCopyTaxGroupToMarkupTrans(_copyTaxGroupToMarkupTrans);

        salesTable2LineUpdatePrompt.parmExtendedPromptReturnValue(salesTable2LineUpdatePrompt.extendedPrompt());

        if (!salesTable2LineUpdatePrompt.fieldsToUpdate())
        {
            salesTable2LineUpdatePrompt = null;
        }

        return salesTable2LineUpdatePrompt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and initiates a new instance of the <c>SalesTable2LineUpdatePrompt</c> class.
    /// </summary>
    /// <param name="_salesTable">
    /// A buffer of the <c>SalesTable</c> table.
    /// </param>
    /// <returns>
    ///  An instance of the <c>SalesTable2LineUpdatePrompt</c> class.
    /// </returns>
    public static SalesTable2LineUpdatePrompt newFromSalesTable(SalesTable _salesTable)
    {
        CopyDeliveryAddressFromHeaderToLine copyDeliveryAddressToLine = CopyDeliveryAddressFromHeaderToLine::DontTransfer;
        if (_salesTable.DeliveryPostalAddress != _salesTable.orig().DeliveryPostalAddress)
        {
            copyDeliveryAddressToLine = CopyDeliveryAddressFromHeaderToLine::TransferToAllLines;
        }

        SalesTable2LineUpdatePrompt salesTable2LineUpdatePrompt = SalesTable2LineUpdatePrompt::construct();

        //Call getLast to prevent it from being called during prompt, thus rewriting the field list with saved values
        salesTable2LineUpdatePrompt.getLast();

        //Get previous answers from saved field list and store them

        salesTable2LineUpdatePrompt.salesTable(_salesTable);

        salesTable2LineUpdatePrompt.parmCopyDeliveryAddressToLines(copyDeliveryAddressToLine);
        salesTable2LineUpdatePrompt.parmDeliveryDateUpdateInLines(#UnknownEnumValue);

        return salesTable2LineUpdatePrompt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesTableWithMarkupParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs and initiates a new instance of the <c>SalesTable2LineUpdatePrompt</c> class.
    /// </summary>
    /// <param name="_salesTable">
    /// A buffer of the <c>SalesTable</c> table.
    /// </param>
    /// <param name="_copyTaxGroupToMarkupTrans">
    /// A dialog button value to use as a <c>copyTaxGroupToMarkupTrans</c> parameter.
    /// </param>
    /// <returns>
    ///  An instance of the <c>SalesTable2LineUpdatePrompt</c> class.
    /// </returns>
    public static SalesTable2LineUpdatePrompt newFromSalesTableWithMarkupParams(SalesTable _salesTable, DialogButton _copyTaxGroupToMarkupTrans)
    {
        SalesTable2LineUpdatePrompt ret = SalesTable2LineUpdatePrompt::newFromSalesTable(_salesTable);

        ret.parmCopyTaxGroupToMarkupTrans(_copyTaxGroupToMarkupTrans);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAgreementLinkValid</Name>
				<Source><![CDATA[
    private void salesAgreementLinkValid(FieldName _fieldName, boolean _fieldValue)
    {
        if (_fieldName == fieldStr(SalesTable, DeliveryDate) && _fieldValue)
        {
            SalesLine salesLine;
            while select salesLine
              where salesLine.SalesId == salesTable.SalesId
            {
                if (salesLine.MatchingAgreementLine)
                {
                    salesLine.ReceiptDateRequested = salesTable.ReceiptDateRequested;
                    salesLine.ShippingDateRequested = salesTable.ShippingDateRequested;
                    if (!AgreementLine::find(salesLine.MatchingAgreementLine).isLinkValid(salesLine, false))
                    {
                        warning(strFmt("@SCM:SalesLineUnlinkedToAgreementLine", salesLine.LineNum, "@SYS88258"));
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>