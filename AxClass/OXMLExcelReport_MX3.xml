<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_MX3</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints Return report from storage report to excel.
/// </summary>
class OxmlExcelReport_MX3 extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    CustInvoiceJour             custInvoiceJour;

    CustTable                   custTable;
    SalesAgreementHeader        salesAgreementHeader;
    SalesAgreementHeaderExt_RU  salesAgreementHeaderExt;
    CustInvoiceTrans            custInvoiceTrans;
    InventTransOrigin           inventTransOrigin;
    InventTrans                 inventTrans;
    InventDim                   inventDim;
    OfficialsTrans_RU           officialsTrans;

    PriceCur                    price;

    Counter                     lineNumValue;
    Qty                         pageTotalQtyValue, totalQty;
    LineAmount                  pageTotalAmountValue, totalAmount, lineQtyValue;

    PrintCopyOriginal           printCopyOriginal;
    Counter                     totalLines;

    protected const str ReportHeader = 'REPORTHEADER';
    protected const str PageHeader = 'PAGEHEADER';
    protected const str Body = 'BODY';
    protected const str PageFooter = 'PAGEFOOTER';
    protected const str ReportFooter = 'REPORTFOOTER';

    protected const str CompanyName = 'CompanyName';
    protected const str CompanyCodeOKPO = 'CompanyCodeOKPO';
    protected const str DepositorName = 'DepositorName';
    protected const str DepositorCodeOKDP = 'DepositorCodeOKDP';
    protected const str DepositorCodeOKPO = 'DepositorCodeOKPO';
    protected const str RContractDate = 'RContractDate';
    protected const str RContractNum = 'RContractNum';
    protected const str ReportId = 'ReportId';
    protected const str ReportDate = 'ReportDate';
    protected const str SupplierTitle = 'SupplierTitle';
    protected const str SupplierName = 'SupplierName';

    protected const str TakerName = "TakerName";

    protected const str PageTotalQty = 'PageTotalQty';
    protected const str PageTotalAmount = 'PageTotalAmount';
    protected const str GrandTotalQty = 'GrandTotalQty';
    protected const str GrandTotalAmount = 'GrandTotalAmount';

    protected const str LineNum = 'LineNum';
    protected const str Name = 'Name';
    protected const str ItemId = 'ItemId';
    protected const str InventBatchId = 'InventBatchId';
    protected const str UnitTxt = 'UnitTxt';
    protected const str OkeiCode = 'OKEICode';
    protected const str LineQty = 'LineQty';
    protected const str LinePrice = 'LinePrice';
    protected const str LineAmount = 'LineAmount';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const real MinHeight = 12.00;

        return max(document.getNamedRangeHeightWrapped(Name, custInvoiceTrans.Name),
                   document.getNamedRangeHeightWrapped(ItemId, custInvoiceTrans.ItemId),
                   MinHeight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        CurrencyCode accountingCurrency = Ledger::accountingCurrency();

        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00049, funcName());

        this.initReportData();
        this.initSectionMap();

        this.setCurrentWorksheetNum(1, 30);
        this.execute(ReportHeader);
        this.execute(PageHeader);

        while select custInvoiceTrans
            where custInvoiceTrans.SalesId              == custInvoiceJour.SalesId
               && custInvoiceTrans.InvoiceDate          == custInvoiceJour.InvoiceDate
               && custInvoiceTrans.InvoiceId            == custInvoiceJour.InvoiceId
               && custInvoiceTrans.NumberSequenceGroup  == custInvoiceJour.NumberSequenceGroup
               && custInvoiceTrans.Qty                  >  0
        {
            price = custInvoiceTrans.Qty ?
                      (custInvoiceTrans.LineAmount / custInvoiceTrans.Qty) / (custInvoiceTrans.PriceUnit ? custInvoiceTrans.PriceUnit : 1)
                      : 0;

            while select TableId from  inventTransOrigin
                where inventTransOrigin.InventTransId == custInvoiceTrans.InventTransId
            join sum(Qty) from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                   && (custInvoiceJour.Proforma ||
                       inventTrans.DateFinancial    == custInvoiceTrans.InvoiceDate)
                   && (custInvoiceJour.Proforma ||
                       inventTrans.InvoiceId        == custInvoiceTrans.InvoiceId)
            join InventBatchId from inventDim
                group by InventBatchId
                where inventDim.InventDimId                 == inventTrans.InventDimId
            {
                if (this.mustCreateNewPage())
                {
                    this.execute(PageFooter);
                    document.insertPageBreak(currentRow, curWorksheetNum);

                    pageTotalQtyValue   = 0.0;
                    pageTotalAmountValue= 0.0;

                    currentHeight = 0;
                    this.execute(PageHeader);
                }

                lineNumValue ++;

                lineQtyValue = InventTable::unitConvert(custInvoiceTrans.ItemId,
                                                   custInvoiceTrans.inventTable().inventUnitId(),
                                                   custInvoiceTrans.SalesUnit,
                                                   custInvoiceTrans.inventTable().inventUnitId(),
                                                   inventTrans.Qty,
                                                   custInvoiceTrans.InventDimId);

                if (custInvoiceTrans.CurrencyCode != accountingCurrency)
                {
                    price = ExchangeRateHelper::mstPrice(price, custInvoiceTrans.CurrencyCode, custInvoiceTrans.InvoiceDate);
                }

                this.execute(Body);

                pageTotalQtyValue   += -lineQtyValue;
                totalQty        += -lineQtyValue;
                pageTotalAmountValue += -lineQtyValue * price;
                totalAmount     += -lineQtyValue * price;
            }
        }

        this.execute(PageFooter);
        this.execute(ReportFooter);

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'MX_3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + custInvoiceJour.InvoiceId + '_' + enum2str(printCopyOriginal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'MX3';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case ReportHeader:
                this.fillReportHeader();
                break;
            case Body:
                this.fillPageBody();
                break;
            case PageFooter:
                this.fillPageFooter();
                break;
            case ReportFooter:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageBody</Name>
				<Source><![CDATA[
    private void fillPageBody()
    {
        this.insertValueToSection(LineNum, lineNum);
        this.insertValueToSection(Name, custInvoiceTrans.Name);
        this.insertValueToSection(ItemId, custInvoiceTrans.ItemId);
        this.insertValueToSection(InventBatchId, inventDim.InventBatchId);
        this.insertValueToSection(UnitTxt, custInvoiceTrans.salesUnitTxt());
        this.insertValueToSection(OkeiCode, UnitOfMeasure_RU::codeOKEI_RU(UnitOfMeasure::findBySymbol(custInvoiceTrans.SalesUnit)));
        this.insertValueToSection(LineQty, -lineQtyValue);
        this.insertValueToSection(LinePrice, price);
        this.insertValueToSection(LineAmount, -lineQtyValue * price);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    private void fillPageFooter()
    {
        this.insertValueToSection(PageTotalQty, pageTotalQty);
        this.insertValueToSection(PageTotalAmount, pageTotalAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    private void fillReportFooter()
    {
        CustInvoiceJour_Officials custInvoiceJour_Officials;

        this.insertValueToSection(GrandTotalQty, totalQty);
        this.insertValueToSection(GrandTotalAmount, totalAmount);

        custInvoiceJour_Officials = custInvoiceJour.custInvoiceJour_Officials();

        officialsTrans = OfficialsTrans_RU::findSessionId(custInvoiceJour_Officials.OffSessionId, OffPosition_RU::Supplier);
        this.insertValueToSection(SupplierTitle, officialsTrans.Title);
        this.insertValueToSection(SupplierName, officialsTrans.Name);

        officialsTrans = OfficialsTrans_RU::findSessionId(custInvoiceJour_Officials.OffSessionId, OffPosition_RU::Taker);
        this.insertValueToSection(TakerName, officialsTrans.Name);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    private void fillReportHeader()
    {
        salesAgreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(custInvoiceJour.DefaultDimension) as SalesAgreementHeaderExt_RU;
        salesAgreementHeader = SalesAgreementHeader::find(salesAgreementHeaderExt.AgreementHeader);

        custTable = custInvoiceJour.custTable_OrderAccount();

        this.insertValueToSection(CompanyName, strFmt("@GLS106745", CompanyInfo::find().name()));
        this.insertValueToSection(CompanyCodeOKPO, CompanyInfoHelper::partyOKPOasOfDate_RU(CompanyInfo::find()));
        this.insertValueToSection(DepositorName, custTable.name());
        this.insertValueToSection(DepositorCodeOKDP, custTable.partyOKDPasOfDate_RU());
        this.insertValueToSection(DepositorCodeOKPO, custTable.partyOKPOasOfDate_RU());
        this.insertValueToSection(RContractNum,  salesAgreementHeader.DocumentTitle);
        this.insertValueToSection(RContractDate, salesAgreementHeaderExt.AgreementDate);
        this.insertValueToSection(ReportId,      custInvoiceJour.InvoiceId);
        this.insertValueToSection(ReportDate,    custInvoiceJour.InvoiceDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReportData</Name>
				<Source><![CDATA[
    private void initReportData()
    {
        while select custInvoiceTrans
            where custInvoiceTrans.SalesId              == custInvoiceJour.SalesId
               && custInvoiceTrans.InvoiceDate          == custInvoiceJour.InvoiceDate
               && custInvoiceTrans.InvoiceId            == custInvoiceJour.InvoiceId
               && custInvoiceTrans.NumberSequenceGroup  == custInvoiceJour.NumberSequenceGroup
               && custInvoiceTrans.Qty                  >  0
        {
            while select TableId from inventTransOrigin
                where inventTransOrigin.InventTransId == custInvoiceTrans.InventTransId
            join sum(Qty) from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                   && (custInvoiceJour.Proforma ||
                       inventTrans.DateFinancial    == custInvoiceTrans.InvoiceDate)
                   && (custInvoiceJour.Proforma ||
                       inventTrans.InvoiceId        == custInvoiceTrans.InvoiceId)
            join InventBatchId from inventDim
                group by InventBatchId
                where inventDim.InventDimId                 == inventTrans.InventDimId
            {
                totalLines ++;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(ReportHeader);
        this.addSection(PageHeader);
        this.addSection(Body, true);
        this.addSection(PageFooter);
        this.addSection(ReportFooter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    private boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(Body);

        requiredHeight += conPeek(mapSections.lookup(PageFooter), #posSectionHeight);

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInvoiceJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public CustInvoiceJour parmInvoiceJour(CustInvoiceJour _custInvoiceJour = custInvoiceJour)
    {
        custInvoiceJour = _custInvoiceJour;
        return custInvoiceJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCopyOriginal</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PrintCopyOriginal parmPrintCopyOriginal(PrintCopyOriginal _printCopyOriginal = printCopyOriginal)
    {
        printCopyOriginal = _printCopyOriginal;
        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(MX3_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        const Counter CellsBody = 10;
        const Counter CellsOther = 14;

        return CellsOther + totalLines * CellsBody;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_MX3 construct()
    {
        return new OXMLExcelReport_MX3();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static ClassDescription description()
    {
        return "@GLS115553";
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWithPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Execute report with Print Management print settings.
    /// </summary>
    /// <param name="_args">
    /// The object of <c>Args</c> class.
    /// </param>
    /// <param name="_settingDetail">
    /// The object of <c>PrintMgmtPrintSettingDetail</c> class.
    /// </param>
    /// <param name="_recordId">
    /// Record Id of the record of <c>CustInvoiceJour</c> table.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static void executeWithPrintMgmt(Args _args, PrintMgmtPrintSettingDetail _settingDetail, RecId _recordId)
    {
        OXMLExcelReport_MX3        reportMX3 = OXMLExcelReport_MX3::construct();
        PrintCopyOriginal          printCopyOriginal;
        CustInvoiceJour            custInvoiceJour = CustInvoiceJour::findRecId(_recordId);

        if (custInvoiceJour.custInvoiceJour_RU().InventProfileType_RU == InventProfileType_RU::Bailee)
        {
            if (_settingDetail.parmType() == PrintMgmtDocInstanceType::Copy)
            {
                printCopyOriginal = PrintCopyOriginal::Copy;
            }
            else
            {
                printCopyOriginal = PrintCopyOriginal::Original;
            }

            reportMX3.parmArgs(_args);
            reportMX3.parmInvoiceJour(custInvoiceJour);

            reportMX3.parmPrintCopyOriginal(printCopyOriginal);

            SRSPrintDestinationSettings printSettings = _settingDetail.parmPrintJobSettings();

            if (reportMX3.isPdfConversionEnabled(printSettings))
            {
                reportMX3.parmPrintDestinationSettings(printSettings);
            }

            reportMX3.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        OXMLExcelReport_MX3 report = OXMLExcelReport_MX3::construct();
        ;
        if (_args && _args.record())
        {
            report.parmInvoiceJour(_args.record());
            report.runOperation();
        }
        else
            throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>