<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPlanVersionCleanup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqPlanVersionCleanup</c> class serves as the batch task for deleting inactive and orphaned master plan versions.
/// </summary>
class ReqPlanVersionCleanup extends RunBaseBatch implements BatchRetryable
{
    RefRecId planVersionId;
    ReqPlanDelete reqPlanDelete;
    SysInstrumentationLogger logger;
    private str triggeredBy;
    private utcdatetime triggeredAt;

    #DEFINE.CurrentVersion(1)

    #LOCALMACRO.CurrentList
        planVersionId
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the description from the current class by calling the static description method on the
    ///    class if there is one.
    /// </summary>
    /// <returns>
    ///    The description from the current class.
    /// </returns>
    /// <remarks>
    ///    This method can be overridden to give a more precise description, for example, when you need some
    ///    internal variables to build the description text.The <c>description</c> method is generally used to
    ///    obtain the description of a class because you do not have to instantiate the class to call it. The
    ///    method speeds up displaying the description in a grid, for example.
    /// </remarks>
    public ClassDescription caption()
    {
        ReqPlanVersion version = ReqPlanVersion::find(planVersionId);

        return strFmt('%1 (%2)',"@SYS333776", version.ReqPlanId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        logger = SysInstrumentationLoggerFactory::createLogger(classStr(ReqPlanDelete));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    container pack()
    {
        container basePacked = [#CurrentVersion,#CurrentList];
        container extensionPacked = [this.triggeredAt, this.triggeredBy];
        return SysPackExtensions::appendExtension(basePacked, classStr(ReqPlanVersionCleanup), extensionPacked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanVersionId</Name>
				<Source><![CDATA[
    public RefRecId parmPlanVersionId(RefRecId _planVersionId = planVersionId)
    {
        planVersionId = _planVersionId;
        return planVersionId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTriggeredBy</Name>
				<Source><![CDATA[
    internal str parmTriggeredBy(str _triggeredBy = triggeredBy)
    {
        if (!prmIsDefault(_triggeredBy))
        {
            triggeredBy = _triggeredBy;
            triggeredAt = DateTimeUtil::utcNow();
        }

        return triggeredBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPlanDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Exposes an instance of the <c>ReqPlanDelete</c> class.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>ReqPlanDelete</c> class.
    /// </returns>
    protected ReqPlanDelete reqPlanDelete()
    {
        if (!reqPlanDelete)
        {
            reqPlanDelete = ReqPlanDelete::construct();
        }
        return reqPlanDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        ReqPlanVersion planVersion = ReqPlanVersion::find(planVersionId);

        if (planVersion.RecId == 0)
        {
            this.cleanupOrphanedPlanVersions();
            this.cleanupReqReaderWriterLockOwnerTable();
            return;
        }

        ReqPlanId planId = planVersion.ReqPlanId;
        ReqPlan plan = ReqPlan::findReqPlanId(planId);

        if (this.shouldStartCleanup(plan))
        {
            this.cleanupInactivePlanVersionsForPlan(plan, planVersion.ReqPlanDataAreaId);
        }        

        this.cleanupReqReaderWriterLockOwnerTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldStartCleanup</Name>
				<Source><![CDATA[
    private boolean shouldStartCleanup(ReqPlan _reqPlan)
    {
        boolean reqPlanExists = _reqPlan.RecId != 0;
        if (!reqPlanExists)
        {
            logger.logInformation('ReqPlan cannot be cleaned up. It does not exist');
            return false;
        }

        if (ReqPlanManager::isLockedNoThrow(_reqPlan.ReqPlanId))
        {
            logger.logInformation(strFmt('ReqPlan: %1 cannot be cleaned up. It is locked', _reqPlan.RecId));
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupInactivePlanVersionsForPlan</Name>
				<Source><![CDATA[
    private void cleanupInactivePlanVersionsForPlan(ReqPlan _plan, DataAreaId _planDataAreaId)
    {
        using (var instrumentation = ReqInstrumentationSegmentFactory::create(ReqInstrumentationActivities::PlanVersionCleanup))
        {
            List planVersionsToCleanup = this.collectPlanVersionCandidatesForDeletion(_plan, _planDataAreaId);

            if (!this.shouldContinueWithCleanup(_plan))
            {
                return;
            }

            ListEnumerator enumerator = planVersionsToCleanup.getEnumerator();            
            while (enumerator.moveNext())
            {
                ReqPlanVersion planVersion = enumerator.current();
                this.reqPlanDelete().cleanupPlanVersion(planVersion);
            }

            int remainingInactivePlanVersions = this.countRemainingInactivePlanVersions(_plan, _planDataAreaId);
            int cleanedUpPlanVersions = planVersionsToCleanup.elements() - remainingInactivePlanVersions;

            instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmNumberOfCleanedUpInactivePlanVersions,
                                                              int2Str(cleanedUpPlanVersions));
            instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmNumberOfCleanupInactivePlanVersionAttempts,
                                                              int2Str(planVersionsToCleanup.elements()));
            instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmReqPlanRecId, int2Str(_plan.RecId));
            instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmReqPlanCleanupTriggeredBy, this.parmTriggeredBy());
            instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmReqPlanCleanupTriggeredAt, DateTimeUtil::toStr(this.triggeredAt));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupReqReaderWriterLockOwnerTable</Name>
				<Source><![CDATA[
    private void cleanupReqReaderWriterLockOwnerTable()
    {
        if (!ReqMRPReaderWriterLockOwnerTrackingToggle::instance().isEnabled() || !ReqMRPReaderWriterLockOwnerCleanupToggle::instance().isEnabled())
        {
            return;
        }

        ReqReaderWriterLockOwner readerWriterLockOwner;
        new SkipAOSValidationPermission().assert();

        readerWriterLockOwner.skipAosValidation(true);
        readerWriterLockOwner.skipDataMethods(true);
        readerWriterLockOwner.skipDeleteActions(true);
        
        var oneMonthAgoDate = DateTimeUtil::addMonths(DateTimeUtil::getSystemDateTime(), -1);

        delete_from readerWriterLockOwner
            where readerWriterLockOwner.ModifiedDateTime < oneMonthAgoDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collectPlanVersionCandidatesForDeletion</Name>
				<Source><![CDATA[
    private List collectPlanVersionCandidatesForDeletion(ReqPlan _plan, DataAreaId _planDataAreaId)
    {
        List planVersionsToCleanup = new List(Types::Record);

        ReqPlanVersion planVersion;
        while select planVersion
            where planVersion.Active == NoYes::No
               && planVersion.ReqPlanId == _plan.ReqPlanId
               && planVersion.ReqPlanDataAreaId == _planDataAreaId
        {
            planVersionsToCleanup.addEnd(planVersion);
        }

        return planVersionsToCleanup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldContinueWithCleanup</Name>
				<Source><![CDATA[
    private boolean shouldContinueWithCleanup(ReqPlan _reqPlan)
    {
        return this.shouldStartCleanup(_reqPlan);
    }

]]></Source>
			</Method>
			<Method>
				<Name>countRemainingInactivePlanVersions</Name>
				<Source><![CDATA[
    private int countRemainingInactivePlanVersions(ReqPlan _plan, DataAreaId _planDataAreaId)
    {
        ReqPlanVersion counter;
        select count(RecId) from counter
            where counter.Active == NoYes::No
               && counter.ReqPlanId == _plan.ReqPlanId
               && counter.ReqPlanDataAreaId == _planDataAreaId;

        return counter.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupOrphanedPlanVersions</Name>
				<Source><![CDATA[
    private void cleanupOrphanedPlanVersions()
    {
        using (var instrumentation = ReqInstrumentationSegmentFactory::create(ReqInstrumentationActivities::OrphanedPlanVersionCleanup))
        {
            ReqPlanVersion planVersion;
            ReqPlan plan;
            int cleanupPlanVersionAttempts = 0;

            while select planVersion
                where planVersion.ReqPlanDataAreaId == curExt()
                notexists join plan
                    where planVersion.ReqPlanId == plan.ReqPlanId
            {
                this.reqPlanDelete().cleanupPlanVersion(planVersion);
                ++cleanupPlanVersionAttempts;
            }

            int remainingOrphanedVersions = this.countRemainingOrphanedPlanVersions(plan);
            int cleanedUpPlanVersions = cleanupPlanVersionAttempts - remainingOrphanedVersions;

            instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmNumberOfCleanedUpOrphanedPlanVersions,
                                                              int2Str(cleanedUpPlanVersions));
            instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmNumberOfCleanupOrphanedPlanVersionAttempts,
                                                              int2Str(cleanupPlanVersionAttempts));
            instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmReqPlanCleanupTriggeredBy, this.parmTriggeredBy());
            instrumentation.addAdditionalParameterToStopEvent(ReqInstrumentationActivities::ParmReqPlanCleanupTriggeredAt, DateTimeUtil::toStr(this.triggeredAt));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>countRemainingOrphanedPlanVersions</Name>
				<Source><![CDATA[
    private int countRemainingOrphanedPlanVersions(ReqPlan _plan)
    {
        ReqPlanVersion counter;
        ReqPlan plan;
        select count(RecId) from counter
            where counter.ReqPlanDataAreaId == curExt()
                notexists join plan
                    where counter.ReqPlanId == _plan.ReqPlanId;

        return counter.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReqPlanDelete</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets an instance of the <c>ReqPlanDelete</c> class.
    /// </summary>
    /// <param name="_reqPlanDelete">
    ///    The instance of the <c>ReqPlanDelete</c> class to set.
    /// </param>
    protected void setReqPlanDelete(ReqPlanDelete _reqPlanDelete)
    {
        reqPlanDelete = _reqPlanDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                container extensionPacked = SysPackExtensions::findExtension(packedClass, classStr(ReqPlanVersionCleanup));
                if (extensionPacked != conNull())
                {
                    [triggeredAt, triggeredBy] = extensionPacked;
                }
                break;

            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ReqPlanVersionCleanup construct()
    {
        return new ReqPlanVersionCleanup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPlanVersionId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>ReqPlanVersionCleanup</c> class.
    /// </summary>
    /// <param name="_planVersionId">
    ///    The ID the plan version to delete.
    /// </param>
    /// <param name="_reqPlanDelete">
    ///    The instance of the <c>ReqPlanDelete</c> class; optional.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>ReqPlanVersionCleanup</c> class.
    /// </returns>
    public static ReqPlanVersionCleanup newPlanVersionId(RefRecId _planVersionId, ReqPlanDelete _reqPlanDelete = ReqPlanDelete::construct())
    {
        ReqPlanVersionCleanup cleanup = ReqPlanVersionCleanup::construct();

        cleanup.setReqPlanDelete(_reqPlanDelete);
        cleanup.parmPlanVersionId(_planVersionId);

        ReqPlanVersion planVersion = ReqPlanVersion::find(_planVersionId);
        cleanup.BatchInfo().parmDataareaId(planVersion.ReqPlanDataAreaId);

        return cleanup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCleanupOfOrphanedVersions</Name>
				<Source><![CDATA[
    public static ReqPlanVersionCleanup newCleanupOfOrphanedVersions(ReqPlanDelete _reqPlanDelete = ReqPlanDelete::construct())
    {
        ReqPlanVersionCleanup cleanup = ReqPlanVersionCleanup::construct();

        cleanup.setReqPlanDelete(_reqPlanDelete);
        cleanup.parmPlanVersionId(0);

        return cleanup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>