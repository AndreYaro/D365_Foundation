<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjOpsSubcontractPurchaseOrderFeature</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure;
using Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation;

/// <summary>
/// Feature class used to enable subcontract purchase orders on Project Operations for resource based/non-stocked scenarios when project operations integration is enabled
/// </summary>
[Export(identifierStr(Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.IFeatureMetadata))]
[FeatureMetadataConfigurationKey(configurationKeyStr(Project))]
final internal class ProjOpsSubcontractPurchaseOrderFeature implements IFeatureMetadata, IFeatureLifecycle, IFeatureDependencies
{
    private static ProjOpsSubcontractPurchaseOrderFeature instance;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAllFeatures</Name>
				<Source><![CDATA[
    public IFeature[] dependsOnAllFeatures()
    {
        var featureDependency = new IFeature[3]();
        featureDependency.SetValue(ProjAdvancedJournalPostingEnhancementFeature::instance(), 0);
        featureDependency.SetValue(ProjEnableSubcontractActualsPostingFeature::instance(), 1);
        featureDependency.SetValue(ProjOpsProjectPurchaseOrderFeature::instance(), 2);
        return featureDependency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dependsOnAnyFeature</Name>
				<Source><![CDATA[
    public IFeature[] dependsOnAnyFeature()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>TypeNew</Name>
				<Source><![CDATA[
    private static void TypeNew()
    {
        instance = new ProjOpsSubcontractPurchaseOrderFeature();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instance</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static ProjOpsSubcontractPurchaseOrderFeature instance()
    {
        if (!instance)
        {
            instance = new ProjOpsSubcontractPurchaseOrderFeature();
        }
        
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>label</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId label()
    {
        return literalStr("@Proj:ProjOpsSubcontractPurchaseOrderFeatureName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public int module()
    {
        return FeatureModuleV0::ProjectManagementAndAccounting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>summary</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FeatureLabelId summary()
    {
        return literalStr("@Proj:ProjOpsSubcontractPurchaseOrderFeatureDesc");
    }

]]></Source>
			</Method>
			<Method>
				<Name>learnMoreUrl</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public WebSiteURL learnMoreUrl()
    {
        return "https://aka.ms/ProjOpsSubcontractPurchaseOrderFeature";
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledByDefault</Name>
				<Source><![CDATA[
        [Hookable(false)]
        public boolean isEnabledByDefault()
        {
            return false;
        }

]]></Source>
			</Method>
			<Method>
				<Name>FeatureStage</Name>
				<Source><![CDATA[
        /// <summary>
        /// Feature state defines the state of the feature's code. This is used by the runtime to derive when and how the
        /// feature is released to customers and/or enabled.
        /// Incomplete implies the feature should never be enabled for customers, but can be enabled on internal dev/test deployments
        /// PrivatePreview implies the feature can be released to customers
        /// PublicPreview implies the feature is released to all customers and has a kill switch
        /// Released implies the feature is released to all customers
        /// </summary>
        /// <returns>Current state of the feature's code</returns>
        public FeatureLifecycleStage FeatureStage()
        {
            return FeatureLifecycleStage::Released;
        }

]]></Source>
			</Method>
			<Method>
				<Name>canDisable</Name>
				<Source><![CDATA[
        [Hookable(false)]
        public boolean canDisable()
        {
            return false;
        }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>