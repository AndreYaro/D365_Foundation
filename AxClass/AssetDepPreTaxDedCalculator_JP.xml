<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepPreTaxDedCalculator_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The calculator class of pre-tax deduction logic.
/// </summary>
/// <remarks>
///  This calculator does not need to know the <C>AssetDepPreTaxDedProcessContext_JP</C>.
/// </remarks>
abstract class AssetDepPreTaxDedCalculator_JP
{
    // Basic info
    AssetBook                   assetBookTax;          // Asset value model for tax layer
    AssetBook                   assetBookCurrent;      // Asset value model for accounting layer
    AssetDepType_JP             assetDepType;

    AssetTableInterval          assetTableInterval;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcInclusionByOverUnderDep</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates inclusion by over under depreciation amount.
    /// </summary>
    /// <param name="_broughtForwardAmount">
    /// The brought forward amount
    /// </param>
    /// <param name="_currentTermOverUnderDep">
    /// The current term over under depreciation amount
    /// </param>
    /// <returns>
    /// Returns the calculated amount
    /// </returns>
    public AssetAmount calcInclusionByOverUnderDep(AssetAmount _broughtForwardAmount, AssetAmount _currentTermOverUnderDep)
    {
        AssetAmount     ret;

        if (_broughtForwardAmount           != 0
            && _currentTermOverUnderDep     != 0
            && sign(_broughtForwardAmount)  != sign(_currentTermOverUnderDep))
        {
            ret = sign(_broughtForwardAmount) * min(abs(_broughtForwardAmount), abs(_currentTermOverUnderDep));
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcOverUnderDepAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates over under depreciation amount.
    /// </summary>
    /// <param name="_allowableLimit">
    /// The allowable limit amount
    /// </param>
    /// <param name="_currentLayetPosted">
    /// The current layer posted amount
    /// </param>
    /// <returns>
    /// Returns the calculated amount
    /// </returns>
    public AssetAmount calcOverUnderDepAmount(AssetAmount _allowableLimit, AssetAmount _currentLayetPosted)
    {
        AssetAmount     ret;

        ret = _currentLayetPosted - _allowableLimit;

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>calcPreTaxDeductionAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates pre-tax deduction amount.
    /// </summary>
    /// <param name="_allowableLimit">
    /// The allowable limit amount
    /// </param>
    /// <param name="_currentLayetPosted">
    /// The current layer posted amount
    /// </param>
    /// <returns>
    /// Returns the calculated amount
    /// </returns>
    public AssetAmount calcPreTaxDeductionAmount(AssetAmount _allowableLimit, AssetAmount _currentLayetPosted)
    {
        AssetAmount     ret;

        ret = max(min(_currentLayetPosted, _allowableLimit), 0);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getAssetBookForLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets asset book layer.
    /// </summary>
    /// <param name="_layer">
    /// The layer
    /// </param>
    /// <returns>
    /// Returns current operation tax layer
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Throws exception when parmed wrong layer
    /// </exception>
    protected AssetBook getAssetBookForLayer(CurrentOperationsTax _layer)
    {
        AssetBook   ret;

        switch (_layer)
        {
            case CurrentOperationsTax::Current:
                ret = assetBookCurrent;
                break;

            case CurrentOperationsTax::Tax:
                ret = assetBookTax;
                break;

            default:
                throw error(error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getBroughtForwardOverUnderAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets brought forward over under amount.
    /// </summary>
    /// <param name="_depType">
    /// The AssetDepType
    /// </param>
    /// <param name="_dateInCurrentTerm">
    /// The trans date
    /// </param>
    /// <returns>
    /// Returns the calculated amount
    /// </returns>
    public AssetAmount getBroughtForwardOverUnderAmount(AssetDepType_JP _depType, AssetTransDate _dateInCurrentTerm)
    {
        AssetAmount                                 ret;
        AssetDepEntityInquiry_PreTaxDeduction_JP    entityInquiry;

        entityInquiry = AssetDepEntityInquiry_PreTaxDeduction_JP::construct(assetBookTax.AssetId, assetBookTax.BookId, assetTableInterval);

        ret = entityInquiry.calcOverUnderBalanceCarryForward(
            [AssetDepPreTaxDeductionHelper_JP::depTypeToDepEntityType(_depType)],
            assetTableInterval.findFirstDayOfYear(_dateInCurrentTerm) - 1);

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getPostedAmountForValueModelYTD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posted amount for value model.
    /// </summary>
    /// <param name="_toPeriodDate">
    /// The to period date
    /// </param>
    /// <param name="_assetBook">
    /// The asset book instance
    /// </param>
    /// <returns>
    /// Returns the posted amount
    /// </returns>
    abstract protected AssetAmount getPostedAmountForValueModelYTD(AssetTransDate _toPeriodDate, AssetBook _assetBook)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>getPostedAmountYTD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posted amount
    /// </summary>
    /// <param name="_toDate">
    /// The to date
    /// </param>
    /// <param name="_layer">
    /// The layer
    /// </param>
    /// <returns>
    /// Returns the amount based on to date and layer
    /// </returns>
    public AssetAmount getPostedAmountYTD(AssetTransDate _toDate, CurrentOperationsTax _layer)
    {
        AssetAmount                     ret;
        AssetBook                       assetBookLoc    = this.getAssetBookForLayer(_layer);
        AssetDepType_JP                 assetDepTypeLoc = assetBookLoc.determinSpecialDepType_JP();
        AssetDepPreTaxDedCalculator_JP  assetDepPreTaxDedCalculatorLoc;

        if (assetDepType    != AssetDepType_JP::OrdinaryDepreciation
            && assetDepType != assetDepTypeLoc)
        {
            // For special depreciation types, if the type is different between accounting layer and tax layer,
            // Follow the value model's own special depreciation type.
            assetDepPreTaxDedCalculatorLoc = AssetDepPreTaxDedCalculator_JP::construct(assetBookTax, assetDepTypeLoc, assetTableInterval);
            if (assetDepPreTaxDedCalculatorLoc)
            {
                ret = assetDepPreTaxDedCalculatorLoc.getPostedAmountForValueModelYTD(_toDate, assetBookLoc);
            }
        }
        else
        {
            ret = this.getPostedAmountForValueModelYTD(
                _toDate,
                assetBookLoc);
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getReserveAllocationAmountYTD</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the posted allocation amount for reserve.
    /// </summary>
    /// <param name="_toDate">
    /// The to date
    /// </param>
    /// <param name="_layer">
    /// The layer
    /// </param>
    /// <returns>
    /// Returns the amount based on to date and layer
    /// </returns>
    abstract public AssetAmount getReserveAllocationAmountYTD(AssetTransDate _toDate, CurrentOperationsTax _layer)
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>initForConstruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes variebles for construct.
    /// </summary>
    /// <param name="_assetBookTax">
    /// The asset book instance
    /// </param>
    /// <param name="_assetDepType">
    /// The AssetDepType
    /// </param>
    /// <param name="_assetTableInterval">
    /// The AssetTableInterval instance
    /// </param>
    protected void initForConstruct(
        AssetBook                   _assetBookTax,
        AssetDepType_JP             _assetDepType,
        AssetTableInterval          _assetTableInterval)
    {
        assetBookTax                = _assetBookTax;
        assetBookCurrent            = AssetBook::find(
            assetBookTax.AssetId,
            AssetBookTable::find(assetBookTax.BookId).LinkedCurrentLayerAssetBookTable_JP);

        assetDepType                = _assetDepType;
        assetTableInterval          = _assetTableInterval;
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of a sub class of <C>AssetDepLimitCalculation_JP</C> based on specified type of depreciation method.
    /// </summary>
    /// <param name="_assetBookTax">
    /// A record of <C>AssetBook</C> on tax layer.
    /// </param>
    /// <param name="_assetDepType">
    /// The asset depreciation type.
    /// </param>
    /// <param name="_assetTableInterval">
    /// An instance of <C>AssetTableInterval</C> or its sub-class.
    /// </param>
    /// <returns>
    /// A new instance of a sub class of <C>AssetDepPreTaxDedCalculator_JP</C>.
    /// </returns>
    public static AssetDepPreTaxDedCalculator_JP construct(
        AssetBook           _assetBookTax,
        AssetDepType_JP     _assetDepType,
        AssetTableInterval  _assetTableInterval)
    {
        AssetDepPreTaxDedCalculator_JP  ret;

        if (_assetBookTax && _assetTableInterval)
        {
            ret = SysExtensionAppClassFactory::getClassFromSysAttribute(
                classStr(AssetDepPreTaxDedCalculator_JP),
                new AssetDepTypeAttribute_JP(_assetDepType));
        }

        if (ret)
        {
            ret.initForConstruct(_assetBookTax, _assetDepType, _assetTableInterval);
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>