<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkExecuteDisplayInquiryItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the logic behind the RF flow used to handle item inquiry.
/// </summary>
[SysObsolete('This class has been refactored. Refer class <c>InventProcessGuideInquiryItemController</c> instead.', false, 30\06\2020),
WHSWorkExecuteMode(WHSWorkExecuteMode::InquiryItem)]
class WhsWorkExecuteDisplayInquiryItem extends WHSWorkExecuteDisplay
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildItemInquiry</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Builds the RF screen displaying item qty information across dimensions
    /// </summary>
    /// <param name="_con">
    ///    The container that holds information to be displayed to the user
    /// </param>
    /// <param name="_itemId">
    ///    Item Id passed in to determine qtys for
    /// </param>
    /// <param name="_inventDim">
    ///    Dimension combination holding product dimensions for the item.
    /// </param>
    /// <returns>
    ///    Container that will be used for display information in RF
    /// </returns>
    public container buildItemInquiry(container _con,
                                      ItemId    _itemId,
                                      InventDim _inventDim = null)
    {
        container  ret = _con;
        str itemInformation = this.generateItemInformation(_itemId, _inventDim);
       
        ret += [this.buildItemInquiryControl(itemInformation, #WHSRFUndefinedDataType)];

        ttsbegin;

        InventDim inventDimCriteria = InventDim::find(_inventDim.InventDimId);
        inventDimCriteria.InventLocationId = pass.lookup(#InventLocationid);
        inventDimCriteria = InventDim::findOrCreate(inventDimCriteria);

        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(inventDimCriteria);

        InventDim tmpInventDim;
        tmpInventDim.data(inventDimCriteria);

        // inventDimId is not going to be valid once we populate more dimensions.
        // By clearing it, we are signaling anyone who needs the inventDimId, to use
        // the inventDim::findOrCreate() method.
        tmpInventDim.inventDimId = '';

        InventDimParm inventDimParmReserve;
        inventDimParmReserve.data(inventDimParm);
        inventDimParmReserve.InventStatusFlag  = NoYes::Yes;
        inventDimParmReserve.WMSLocationIdFlag = NoYes::Yes;

        WMSLocationId                prevWMSLocationId;
        WHSInventStatusId            prevStatus;
        InventDim                    inventDim;
        InventSum                    inventSum;
        Qty                          availQty;
        Qty                          pickedQty;
        Qty                          physInventQty;
        Qty                          reserveQty;
        int                          i;
        InventDim                    inventDimReserve;
        InventTable                  inventTable = InventTable::find(_itemId);
        List                         dimList = WHSReservationHierarchyProvider::construct().getDimListAllFromInventTable(inventTable, WHSReservationHierarchySortOrder::BottomUp);
        WHSReservationHierarchyLevel wmsLocationLevel = WHSReservationHierarchyInventDimUtil::getInventDimFieldLevel(dimList, fieldNum(InventDim, WMSLocationId));

        if (InventUseDimOfInventSumToggle::instance().isEnabled())
        {
            while select InventDimId, ItemId, PhysicalInvent, Picked, #InventDimGroupAllFields from inventSum
            order by inventSum.wmsLocationId, inventSum.InventStatusId
            where inventSum.ItemId == _itemId
                && inventSum.ClosedQty == NoYes::No
                && (inventSum.PhysicalInvent > 0 || inventSum.Picked > 0)
                && #InventDimFieldsFilter(inventSum, inventDimCriteria, inventDimParm)
            {
                if (i == #MaxInquiry)
                {
                    ret = this.addErrorLabel(ret, "@WAX4151", WHSRFColorText::Error);
                    break;
                }

                // Compare location and status dimensions, since they are the dimensions we are grouping by on the RF screen.
                if (inventSum.wmsLocationId != prevWMSLocationId || inventSum.InventStatusId != prevStatus)
                {
                    if (prevWMSLocationId)
                    {
                        if (availQty != 0 || pickedQty != 0 || physInventQty != 0)
                        {
                            reserveQty = physInventQty - availQty;
                            str qtyInformation = this.generateQtyInformation(availQty, pickedQty, physInventQty, reserveQty, prevStatus);

                            ret += [this.buildItemInquiryControl(qtyInformation, extendedTypeNum(WHSRFQuantityInformation))];

                            // clear all totals
                            availQty        = 0;
                            pickedQty       = 0;
                            physInventQty   = 0;
                            reserveQty      = 0;
                        }

                        ++i;
                    }
            
                    // calculate quantities
                    tmpInventDim.InventSiteId   = inventSum.InventSiteId; // avoiding gaps leads to more performant queries on whsInventReserve.
                    tmpInventDim.InventStatusId = inventSum.InventStatusId;
                    tmpInventDim.wMSLocationId  = inventSum.wMSLocationId;

                    availQty = this.totalAvailPhysical(_itemId, wmsLocationLevel, inventDimReserve, tmpInventDim, inventDimParmReserve);
                }

                pickedQty      += inventSum.Picked;
                physInventQty  += inventSum.PhysicalInvent;

                if (inventSum.wmsLocationId != prevWMSLocationId)
                {
                    str locationLabel = strFmt(strFmtLB("@WAX3193"), inventSum.wmsLocationId);

                    ret+= [this.buildItemInquiryControl(locationLabel, extendedTypeNum(WMSLocationId))];
                }

                prevWMSLocationId   = inventSum.wmsLocationId;
                prevStatus          = inventSum.InventStatusId;
            }
        }
        else
        {
            while select InventDimId, ItemId, PhysicalInvent, Picked from inventSum
            order by inventDim.wmsLocationId, inventDim.InventStatusId
            where inventSum.ItemId == _itemId
                && inventSum.ClosedQty == NoYes::No
                && (inventSum.PhysicalInvent > 0 || inventSum.Picked > 0)
            #InventDimInnerJoin(inventSum.InventDimId, inventDim, inventDimCriteria, inventDimParm)
            {
                if (i == #MaxInquiry)
                {
                    ret = this.addErrorLabel(ret, "@WAX4151", WHSRFColorText::Error);
                    break;
                }

                // Compare location and status dimensions, since they are the dimensions we are grouping by on the RF screen.
                if (inventDim.wmsLocationId != prevWMSLocationId || inventDim.InventStatusId != prevStatus)
                {
                    if (prevWMSLocationId)
                    {
                        if (availQty != 0 || pickedQty != 0 || physInventQty != 0)
                        {
                            reserveQty = physInventQty - availQty;
                            str qtyInformation = this.generateQtyInformation(availQty, pickedQty, physInventQty, reserveQty, prevStatus);

                            ret += [this.buildItemInquiryControl(qtyInformation, extendedTypeNum(WHSRFQuantityInformation))];

                            // clear all totals
                            availQty        = 0;
                            pickedQty       = 0;
                            physInventQty   = 0;
                            reserveQty      = 0;
                        }

                        ++i;
                    }
            
                    // calculate quantities
                    tmpInventDim.InventSiteId   = inventDim.InventSiteId; // avoiding gaps leads to more performant queries on whsInventReserve.
                    tmpInventDim.InventStatusId = inventDim.InventStatusId;
                    tmpInventDim.wMSLocationId  = inventDim.wMSLocationId;

                    availQty = this.totalAvailPhysical(_itemId, wmsLocationLevel, inventDimReserve, tmpInventDim, inventDimParmReserve);
                }

                pickedQty      += inventSum.Picked;
                physInventQty  += inventSum.PhysicalInvent;

                if (inventDim.wmsLocationId != prevWMSLocationId)
                {
                    str locationLabel = strFmt(strFmtLB("@WAX3193"), inventDim.wmsLocationId);

                    ret+= [this.buildItemInquiryControl(locationLabel, extendedTypeNum(WMSLocationId))];
                }

                prevWMSLocationId   = inventDim.wmsLocationId;
                prevStatus          = inventDim.InventStatusId;
            }
        }

        reserveQty = physInventQty - availQty;

        str qtyInformation = this.generateQtyInformation(availQty, pickedQty, physInventQty, reserveQty, prevStatus);

        ret += [this.buildItemInquiryControl(qtyInformation, extendedTypeNum(WHSRFQuantityInformation))];

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAvailPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Calculates the available physical quantity for the item.
    /// </summary>
    /// <param name = "_itemId"> 
    /// Item Id passed in to determine qtys for
    /// </param>
    /// <param name = "_wmsLocationLevel">
    /// The level of the inventDim field in the reservation hierarchy
    /// </param>
    /// <param name = "_inventDimReserve">
    /// InventDim from whsInventReserve table holding product and hierarchy dimensions for the item.
    /// </param>
    /// <param name = "_tmpInventDim">
    /// InventDim holding product and hierarchy dimensions for the item, with which we search whsInventReserve table.
    /// </param>
    /// <param name = "_inventDimParmReserve">
    /// InventDimParm holding the dimensions used in _tmpInventDim.
    /// </param>
    /// <returns>
    /// The total available physical quantity.
    /// </returns>
    Qty totalAvailPhysical(
        ItemId                       _itemId,
        WHSReservationHierarchyLevel _wmsLocationLevel,
        InventDim                    _inventDimReserve,
        InventDim                    _tmpInventDim,
        InventDimParm                _inventDimParmReserve)
    {
        return whsInventOnHand::getAvailPhysicalForLevel(_itemId, _tmpInventDim, _wmsLocationLevel, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemInquiryControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds Item Inquirycontrol to be displayed on form.
    /// </summary>
    /// <param name = "_label">
    /// Label of the control.
    /// </param>
    /// <param name = "_dataType">
    /// Type of the label and combobox controls.
    /// </param>
    /// <returns>
    /// A container containing the state of the control.
    /// </returns>
    container buildItemInquiryControl(str _label, ExtendedTypeId _dataType )
    {
        return this.buildControl(#RFLabel, "@WAX2999", _label, 1, '', #WHSRFUndefinedDataType, '', 0, true, '', WHSRFColorText::Default, _dataType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>displayForm</Name>
				<Source><![CDATA[
    container displayForm(container _con, str _buttonClicked = '')
    {
        container               ret = conNull();
        container               con = _con;
        int                     hasError = 0;
        int                     dimCounter = 5;
        ItemId                  itemId;
        InventTable             inventTable;
        boolean                 invalidDimension = false;
        boolean                 existDimension   = false;
        List                    productDimList;
        ListEnumerator          le;
        FieldName               dimFieldName;
        InventDim               inventDim;
        InventInventItemSearch          localInventItemSearch;
        InventInventItemSearchResult    localInventItemSearchResult;
        inventDim                       itemInventDim;

        mode = WHSWorkExecuteMode::InquiryItem;
        pass = WHSRFPassthrough::create(conPeek(_con, 2));

        if (!pass.exists(#InventLocationId))
        {
            pass.insert(#InventLocationId, WHSWorkUserSession::find(pass.lookup(#UserId)).InventLocationId);
        }

        hasError = this.hasError(_con);

        switch (step)
        {
            case 0:
                ret = this.buildGetItemId(ret);
                ret = this.addOkButton(ret);
                step = 1;
                break;

            case 1:
                pass.insert(#ItemId, conPeek(conPeek(con, 4 + hasError), #data));

                // save off the itemId
                localInventItemSearch = InventInventItemSearch::construct();
                localInventItemSearchResult = localInventItemSearch.search(pass.lookup(#ItemId));

                if (localInventItemSearchResult)
                {
                    itemId = localInventItemSearchResult.parmItemId();
                    pass.insert(#ItemId, itemId);
                    inventTable = InventTable::find(itemId);
                    itemInventDim = InventDim::find(localInventItemSearchResult.parmInventDimId());
                }

                if (!localInventItemSearchResult || !WHSInventEnabled::exist(itemId))
                {
                    throw error("@WAX774");
                }

                productDimList = InventDimGroupSetup::newItemIdProductDimensionsOnly(itemId).activeFields();

                if (!productDimList.empty())
                {
                    le = productDimList.getEnumerator();

                    while (le.moveNext())
                    {
                        dimFieldName = fieldId2name(tableNum(InventDim), le.current());

                        if (itemInventDim.(le.current()))
                        {
                            pass.insert(dimFieldName, itemInventDim.(le.current()));
                        }

                        if (pass.exists(dimFieldName))
                        {
                            if (!itemInventDim.(le.current()))
                            {
                                pass.insert(dimFieldName, conPeek(conPeek(con, dimCounter + hasError), #data));
                                invalidDimension = (!pass.lookup(dimFieldName)) ? true : false;
                            }

                            dimCounter++;

                            existDimension = true;

                            InventProductDimension productDimension = InventDimension::singletonFromInventDimFieldId(le.current()) as InventProductDimension;

                            if (productDimension)
                            {
                                if (!productDimension.checkValueForItem(InventTable::find(itemId), pass.lookup(dimFieldName)))
                                {
                                    invalidDimension = true;
                                    throw error(strFmt("@WAX1165", productDimension.label()));
                                }
                            }
                        }
                    }

                    ret = this.buildGetItemId(ret);
                    ret = this.addOkButton(ret);
                    step = 1;
                }
                else
                {
                    ret = conNull();
                    ret = this.buildItemInquiry(ret, itemId);
                    step = 2;
                }

                if (!invalidDimension && existDimension)
                {
                    inventDim = pass.createInventDimFromPass();
                    ret = conNull();
                    ret = this.buildItemInquiry(ret, itemId, inventDim);
                    step = 2;
                }
                break;

            case 2:
                pass = this.resetPassthrough(ret, false);
                ret = this.buildGetItemId(ret);
                step = 1;
                break;
        }

        ret = this.updateModeStepPass(ret, mode, step, pass);
        ret = this.addCancelButton(ret, 1, true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateItemInformation</Name>
				<Source><![CDATA[
	/// <summary>
	/// Generates item information string by product dimensions of the item.
	/// </summary>
	/// <param name="_itemId">
	/// Item id.
	/// </param>
	/// <param name="_inventDim">
	/// Dimensions of the item.
	/// </param>
	/// <returns>
	/// String representation of the product dimensions of the item.
	/// </returns>
    str generateItemInformation(ItemId      _itemId,
                                InventDim   _inventDim)
    {
        str             itemInformation;
        ListEnumerator  le;
        FieldId         dimFieldId;

        itemInformation = strFmt("@WAX3002", InventTable::find(_itemId).productNameWhsWorkExecute());

        le = InventDimGroupSetup::newItemIdProductDimensionsOnly(_itemId).activeFields().getEnumerator();

        while (le.moveNext())
        {
            dimFieldId = le.current();

            if (_inventDim.(dimFieldId))
            {
                itemInformation += strFmt("\n %1: %2", new DictField(tableNum(InventDim), dimFieldId).label(), _inventDim.(dimFieldId));
            }
        }

        return itemInformation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateQtyInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Generates quantity information for the item inquiry RF menu item.
    /// </summary>
    /// <param name="_availQty">
    ///     The total available quantity for the item.
    /// </param>
    /// <param name="_pickedQty">
    ///     The total picked quantity for the item.
    /// </param>
    /// <param name="_physInventQty">
    ///     The total physical inventory quantity for the item.
    /// </param>
    /// <param name="_reserveQty">
    ///     The total reserved quantity for the item.
    /// </param>
    /// <param name="_prevStatus">
    ///     The previous inventory status identifier.
    /// </param>
    /// <returns>
    ///     Returns a string containing item quantity information.
    /// </returns>
    str generateQtyInformation(
        Qty                 _availQty,
        Qty                 _pickedQty,
        Qty                 _physInventQty,
        Qty                 _reserveQty,
        WHSInventStatusId   _prevStatus)
    {
        str     qtyInformation;
        boolean statusIsUsable;

        statusIsUsable = !WHSInventStatus::isBlockingStatus(_prevStatus);

        qtyInformation = _prevStatus + '\n';
        if (statusIsUsable)
        {
            qtyInformation += strFmt(
                strFmtLB("@WAX3194"),
                WHSWorkExecuteDisplay::num2StrDisplay(_physInventQty),
                WHSWorkExecuteDisplay::num2StrDisplay(_availQty));
        }
        else
        {
            qtyInformation += strFmt(
                strFmtLB("@WAX5536"),
                WHSWorkExecuteDisplay::num2StrDisplay(_physInventQty));
        }

        if (_pickedQty != 0)
        {
            qtyInformation += '\n' + strFmt(strFmtLB("@WAX3010"), WHSWorkExecuteDisplay::num2StrDisplay(_pickedQty));
        }

        if (_availQty != _physInventQty && statusIsUsable)
        {
            qtyInformation += '\n' +strFmt(strFmtLB("@WAX3011"), WHSWorkExecuteDisplay::num2StrDisplay(_reserveQty));
        }

        return qtyInformation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>