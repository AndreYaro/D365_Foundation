<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VersioningCompareTimesheet</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>VersioningCompareTimesheet</c> class extends the generic functionality of the
///    <c>VersioningCompare</c> class and implements the analysis for a Timesheet.
/// </summary>
/// <remarks>
///    The main contribution of this class is to define the specific data structure to use to save a
///    Timesheet.
/// </remarks>
class VersioningCompareTimesheet extends VersioningCompare
{
    TSTimesheetNbr timesheetNBR;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCaption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return a catpion string for the comparison form.
    /// </summary>
    /// <returns>
    /// A caption for the Timesheet Versions form
    /// </returns>
    public str getCaption()
    {
        return "@SYS4005391";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getChangeList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a list of changed fields by comparing two records.
    /// </summary>
    /// <param name="_oldRecord">
    /// The old record buffer.
    /// </param>
    /// <param name="_newRecord">
    /// The new record buffer.
    /// </param>
    /// <returns>
    /// A container that contains the changed fields including old and new values.
    /// </returns>
    protected container getChangeList(Common _oldRecord, Common _newRecord)
    {
        return VersioningCompareRecordVersionsTS::newTableId(_oldRecord.TableId).packChangedFields(versioningTmpTrans.Action,_oldRecord,_newRecord);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCallerRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Extracts the <c>TSTimesheetTableLog</c> value from the calling record and initializes the comparison
    ///    based on the records.
    /// </summary>
    /// <param name="_changeVersion">
    ///    A record from a table that is mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <param name="_alternateNewVersion">
    ///    A second record from a table that is mapped by the <c>VersioningVersionMap</c> database map.
    /// </param>
    /// <remarks>
    ///    If the record originates from a <c>FormDataSource</c> object, the current selection will be used.If
    ///    the first argument does not contain a multi-selection and the second optional parameter is not
    ///    specified, the comparison will be against the current version.
    /// </remarks>

    protected void initCallerRecord(VersioningVersionMap _changeVersion, VersioningVersionMap _alternateNewVersion = null)
    {
        TSTimesheetTableLog versionOld;

        super(_changeVersion, _alternateNewVersion);

        versionOld      = changeVersionOld;

        timesheetNBR    = versionOld.TimesheetNbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVersioningTmpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a record in the <c>VersioningTmpTrans</c> temporary table with the comparison of a single
    ///    record.
    /// </summary>
    /// <param name="_currentRecord">
    ///    The record in the table that holds the current version. For example, a <c>PurchLine</c> record.
    /// </param>
    /// <param name="_foundOld">
    ///    A Boolean value that specifies whether the current record occurs in the old version.
    /// </param>
    /// <param name="_foundNew">
    ///    A Boolean value that specifies whether the current record occurs in the new version.
    /// </param>
    /// <param name="_oldRecord">
    ///    The record from the history table that represents the old version of the current record.
    /// </param>
    /// <param name="_newRecord">
    ///    The record from the history table that represents the new version of the current record.
    /// </param>
    /// <param name="_parentRecId">
    ///    The record ID of the parent record in the <c>VersioningTmpTrans</c> temporary table. This parameter
    ///    is used to reflect the tree structure in the temporary table.
    /// </param>
    /// <returns>
    ///    The value of the <c>RecId</c> field of the record inserted in the <c>VersioningTmpTrans</c>
    ///    temporary table.
    /// </returns>
    /// <remarks>
    ///    The method compares the two versions of the current record and saves the fields which differs as a
    ///    record in the <c>VersioningTmpTrans</c> temporary table.The returned <c>RecId</c> field can be used
    ///    as argument on a following call to this method.
    /// </remarks>
    protected RecId insertVersioningTmpTrans(
        Common  _currentRecord,
        boolean _foundOld,
        boolean _foundNew,
        Common  _oldRecord,
        Common  _newRecord,
        RecId   _parentRecId)
    {
        versioningTmpTrans.clear();

        if (_foundOld || _foundNew)
        {
            versioningTmpTrans.initValue();
            versioningTmpTrans.ParentVersioningTmpTrans = _parentRecId;
            versioningTmpTrans.CurrentTableId           = _currentRecord.TableId;
            versioningTmpTrans.CurrentRecId             = _currentRecord.RecId;
            versioningTmpTrans.ToolTipRecord            = this.treeNodeName(_currentRecord);
            versioningTmpTrans.HistoryTableId           = _oldRecord.TableId;

            if (!_foundNew)
            {
                versioningTmpTrans.Action       = VersioningChangeType::Deleted;
            }
            else
            if ((_oldRecord.RecId != _newRecord.RecId) &&
                (_newRecord.getFieldValue('ChangeType') == TsTimesheetChangeType::Delete))
            {
                versioningTmpTrans.Action       = VersioningChangeType::Deleted;
            }
            else
            if (!_foundOld)
            {
                versioningTmpTrans.Action       = VersioningChangeType::Inserted;
            }
            else
            {
                versioningTmpTrans.Action       = VersioningChangeType::Updated;
            }

            versioningTmpTrans.ChangeList = this.getChangeList(_oldRecord,_newRecord);

            if (versioningTmpTrans.Action == VersioningChangeType::Updated && !versioningTmpTrans.ChangeList)
            {
                versioningTmpTrans.Action = VersioningChangeType::None;
            }
            versioningTmpTrans.insert();
        }

        return versioningTmpTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Loads data for compare purposes.
    /// </summary>
    protected void loadData()
    {
        this.loadTimesheetTableLog();
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTimesheetTableLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the <c>TimesheetTableLog</c> record and saves the result in the <c>VersioningTmpTrans</c>
    /// temporary table.
    /// </summary>
    /// <remarks>
    ///  This method also analyzes the differences in the following tables:
    ///  <list type="bullet">
    ///   <item>
    ///    <description>
    ///    The <c>TimesheetLineLog</c> table.
    ///    </description>
    ///   </item>
    ///  </list>
    /// </remarks>
    protected void loadTimesheetTableLog()
    {
        TSTimesheetTableLog                     tsTimesheetTableLogLatest;
        TSTimesheetTableLog                     tsTimesheetTableLogOld;
        TSTimesheetTableLog                     tsTimesheetTableLogNew;
        recId                                   tsTimesheetTableLogNodeRecId;

        boolean                                 foundOld;
        boolean                                 foundNew;

        tsTimesheetTableLogLatest  = TSTimesheetTableLog::findTSTimesheetTableLogLatestVersion(timesheetNBR);
        tsTimesheetTableLogOld     = TSTimesheetTableLog::findTSTimeshetTableLogVersion(timesheetNBR, oldDateTime);
        foundOld                   = (tsTimesheetTableLogOld.RecId != 0);

        if (newDateTime)
        {
            tsTimesheetTableLogNew   = TSTimesheetTableLog::findTSTimeshetTableLogVersion(timesheetNBR, newDateTime);
            foundNew                 = (tsTimesheetTableLogNew.RecId != 0);
        }
        else
        {
            tsTimesheetTableLogNew = tsTimesheetTableLogLatest;
            foundNew               = (tsTimesheetTableLogLatest.RecId != 0);
        }
        tsTimesheetTableLogNodeRecId = this.insertVersioningTmpTrans(tsTimesheetTableLogLatest, foundOld, foundNew, tsTimesheetTableLogOld, tsTimesheetTableLogNew, 0);

        this.loadTSTimesheetLineLog(tsTimesheetTableLogOld, tsTimesheetTableLogLatest, tsTimesheetTableLogNodeRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadTSTimesheetLineLog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Analyzes the <c>TSTimesheetLineLog</c> record that is related to the specified <c>TSTimesheetTableLog</c>
    ///    record and then saves the result in the <c>VersioningTmpTrans</c> temporary table.
    /// </summary>
    /// <param name="_tsOldTimesheetTableLogRecId">
    ///    The selected old timesheet version.
    /// </param>
    /// <param name="_tsLatestTimesheetTableLogRecId">
    ///    The latest timesheet version
    /// </param>
    /// <param name="_tsTimesheetTableLogNodeRecId">
    ///    The recid of the record.
    /// </param>
    protected void loadTSTimesheetLineLog(
        TSTimesheetTableLog _tsOldTimesheetTableLogRecId,
        TSTimesheetTableLog _tsLatestTimesheetTableLogRecId,
        RecId               _tsTimesheetTableLogNodeRecId)
    {
        TSTimesheetLineLog                      tsTimesheetlineLog;
        TSTimesheetLineLog                      tsTimesheetlineLogOld;
        TSTimesheetLineLog                      tsTimesheetlineLogNew;
        recId                                   tsTimesheetLineLogNodeRecId;
        boolean                                 foundOld;
        boolean                                 foundNew;

        while select tsTimesheetlineLog
            order by RecId
            where tsTimesheetlineLog.TimesheetTableLog == _tsLatestTimesheetTableLogRecId.RecId
        {
            tsTimesheetlineLogOld       = tsTimesheetlineLog::findByTSTimesheetLineLogVersion(tsTimesheetlineLog.TimesheetLine, _tsOldTimesheetTableLogRecId.RecId);
            foundOld                    = (tsTimesheetlineLogOld.RecId != 0);
            tsTimesheetlineLogNew       = tsTimesheetlineLog;
            foundNew                    = true;
            tsTimesheetLineLogNodeRecId = this.insertVersioningTmpTrans(tsTimesheetlineLog, foundOld, foundNew, tsTimesheetlineLogOld, tsTimesheetlineLogNew, _tsTimesheetTableLogNodeRecId);
        }

        tsTimesheetLineLog    = null;
        tsTimesheetlineLogNew = null;
        tsTimesheetlineLogOld = null;

        while select tsTimesheetlineLog
            order by RecId
            where tsTimesheetlineLog.TimesheetTableLog == _tsOldTimesheetTableLogRecId.RecId
        {
            select firstOnly tsTimesheetLineLogNew
                where tsTimesheetLineLogNew.TimesheetTableLog == _tsLatestTimesheetTableLogRecId.RecId
                     && tsTimesheetLineLogNew.TimesheetLine   == tsTimesheetlineLog.TimesheetLine;

            if (tsTimesheetLineLogNew.RecId == 0)
            {
                tsTimesheetlineLogOld = tsTimesheetlineLog;
                foundOld = true;
                foundNew = false;
                tsTimesheetLineLogNodeRecId = this.insertVersioningTmpTrans(tsTimesheetlineLog, foundOld, foundNew, tsTimesheetlineLogOld, tsTimesheetlineLogNew, _tsTimesheetTableLogNodeRecId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeNodeName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the name of the tree node that represents the specified record.
    /// </summary>
    /// <param name="_common">
    ///    The record to use to name the node in the tree.
    /// </param>
    /// <returns>
    ///    The name of the tree node.
    /// </returns>
    /// <remarks>
    ///    This method is used to generate the name to display in the tree structure. If it is not specified,
    ///    the user interface name of the records that have no key information is used.
    /// </remarks>
    protected VersioningRecordTooltip treeNodeName(Common _common)
    {
        TSTimesheetTableLog         tsTimesheetTableLog;
        TSTimesheetLineLog          tsTimesheetLineLog;

        str name = tableid2pname(_common.TableId);

        switch (_common.TableId)
        {
            case tablenum(TSTimesheetTableLog):
                tsTimesheetTableLog = _common;
                name += ': '+ tsTimesheetTableLog.TimesheetNbr;
                break;

            case tablenum(TSTimesheetLineLog):
                tsTimesheetLineLog = _common;
                name = "@SYS133035" + ': ' + "@PSA2040" + ' = ' + tsTimesheetLineLog.ProjId + ', ' + "@SYS4008660" + ' = ' + tsTimesheetLineLog.CategoryId + ', ' + "@SYS166255" + ' = ' + tstimesheetLineLog.LinePropertyId;
                if (tsTimesheetLineLog.ActivityNumber != '')
                    name += ', ' + "@SYS81290" + ' = ' + tsTimesheetLineLog.ActivityNumber;
                break;

            default:
                break;
        }
        return name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>VersioningCompareTimesheet</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>VersioningCompareTimesheet</c> class.
    /// </returns>
    public static VersioningCompareTimesheet construct()
    {
        return new VersioningCompareTimesheet();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>