<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SpecTransViewerDeleteTransactions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SpecTransViewerDeleteTransactions</c> deletes a set of marked transactions with logging for the <c>SpecTransViewer</c> form.
/// </summary>
internal final class SpecTransViewerDeleteTransactions
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    internal void delete(SpecTransRecIdFilter _specTransRecIdFilter)
    {
        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::createLogger(CustVendInstrumentationConstants::SourceNameSpecTransViewerDelete);

        using (SysInstrumentationActivityContext context = logger.activityContext(CustVendInstrumentationConstants::ActivityNameSpecTransSetBasedDelete, CustVendInstrumentationConstants::SettlementNamespace))
        {
            select firstonly count(RecId)
                from _specTransRecIdFilter;

            context.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyRecordCount, int642Str(_specTransRecIdFilter.RecId));

            if (_specTransRecIdFilter.RecId > 0)
            {
                this.logDeleteTransactionsTelemetry(context, _specTransRecIdFilter);

                ttsbegin;

                SpecTransViewerLog::logForSpecTransSet(_specTransRecIdFilter);
                this.deleteAllPaymentProposalLines(_specTransRecIdFilter);
                this.deleteSpecTransRecords(_specTransRecIdFilter);

                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>logDeleteTransactionsTelemetry</Name>
				<Source><![CDATA[
    private void logDeleteTransactionsTelemetry(SysInstrumentationActivityContext _context, SpecTransRecIdFilter _specTransRecIdFilter)
    {
        SpecTrans specTransBySpecTable;
        SysTableIdView sysTableIdView;

        while select specTableId
            from specTransBySpecTable
            group by specTableId
            exists join _specTransRecIdFilter
                where specTransBySpecTable.RecId == _specTransRecIdFilter.SpecTransRecId
        {
            SpecTrans specTransCountBySpec;

            select count(RecId)
                from specTransCountBySpec
                    where specTransCountBySpec.SpecTableId == specTransBySpecTable.SpecTableId
                exists join _specTransRecIdFilter
                    where specTransCountBySpec.RecId == _specTransRecIdFilter.SpecTransRecId;

            DictTable specTable = new DictTable(specTransBySpecTable.SpecTableId);

            if (specTable)
            {
                _context.addCustomProperty(specTable.name(), int642Str(specTransCountBySpec.RecId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllPaymentProposalLines</Name>
				<Source><![CDATA[
    private void deleteAllPaymentProposalLines(SpecTransRecIdFilter _specTransRecIdFilter)
    {
        SpecTrans specTransSpecCompanies;

        while select specTransSpecCompanies
            group by specTransSpecCompanies.SpecCompany
            exists join _specTransRecIdFilter
                where specTransSpecCompanies.RecId == _specTransRecIdFilter.SpecTransRecId
        {
            if (SpecTrans::isCompanyValid(specTransSpecCompanies.SpecCompany))
            {
                changecompany(specTransSpecCompanies.SpecCompany)
                {
                    this.deletePaymentProposalLinesPerCompany(_specTransRecIdFilter);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePaymentProposalLinesPerCompany</Name>
				<Source><![CDATA[
    private void deletePaymentProposalLinesPerCompany(SpecTransRecIdFilter _specTransRecIdFilter)
    {
        CustVendPaymProposalLine custVendPaymProposalLine;
        SpecTrans specTrans;

        custVendPaymProposalLine.skipDeleteActions(true);
        custVendPaymProposalLine.skipDeleteMethod(true);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            CustVendPaymProposalLine custVendPaymProposalLine_RU;

            custVendPaymProposalLine_RU.skipDeleteActions(true);
            custVendPaymProposalLine_RU.skipDeleteMethod(true);

            delete_from custVendPaymProposalLine_RU
                exists join custVendPaymProposalLine
                    where custVendPaymProposalLine_RU.VATPaymRefRecId_RU == custVendPaymProposalLine.RecId
                exists join specTrans
                    where custVendPaymProposalLine.TableId == specTrans.SpecTableId
                        && custVendPaymProposalLine.RecId == specTrans.SpecRecId
                exists join _specTransRecIdFilter
                    where specTrans.RecId == _specTransRecIdFilter.SpecTransRecId;
        }

        delete_from custVendPaymProposalLine
            exists join specTrans
                where custVendPaymProposalLine.DataAreaId == specTrans.SpecCompany
                    && custVendPaymProposalLine.TableId == specTrans.SpecTableId
                    && custVendPaymProposalLine.RecId == specTrans.SpecRecId
            exists join _specTransRecIdFilter
                where specTrans.RecId == _specTransRecIdFilter.SpecTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSpecTransRecords</Name>
				<Source><![CDATA[
    private void deleteSpecTransRecords(SpecTransRecIdFilter _specTransRecIdFilter)
    {
        SpecTransSetBasedDeleteProcessorParams params = SpecTransSetBasedDeleteProcessorParams::newParams(SpecTransSetBasedDeleteScenario::DeleteByRecId);
        params.setRecIdFilter(_specTransRecIdFilter);

        SpecTransSetBasedDeleteProcessor::construct().delete(params);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        SpecTransViewerDeleteContract contract;

        if (_args)
        {
            contract = _args.object() as SpecTransViewerDeleteContract;
        }

        if (contract)
        {
            TableName tmpTableName = contract.getSpecTransFilter().getPhysicalTableName();

            SysOperationSandbox::callStaticMethod(
                classNum(SpecTransViewerDeleteTransactions),
                staticMethodStr(SpecTransViewerDeleteTransactions, deleteForTmpTable),
                [tmpTableName],
                "@CashManagement:SpecTransViewerClearSelectedTransactions");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteForTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>SpecTrans</c> records based on a given temp table instance.
    /// This temp table instance must be <c>SpecTransRecIdFilter</c>.
    /// </summary>
    /// <param name = "_params">Parameters for delete.</param>
    internal static void deleteForTmpTable(container _params)
    {
        SpecTransRecIdFilter recIdFilter;
        recIdFilter.useExistingTempDBTable(conPeek(_params, 1));

        new SpecTransViewerDeleteTransactions().delete(recIdFilter);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>