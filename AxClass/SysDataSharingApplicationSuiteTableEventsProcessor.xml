<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysDataSharingApplicationSuiteTableEventsProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SysDataSharingApplicationSuiteTableEventsProcessor</c> is the base class for processing data sharing table event operations cross company.
/// </summary>
internal class SysDataSharingApplicationSuiteTableEventsProcessor
{
    private SysDataSharingApplicationSuiteITableEventsProcessor tableEventProcessor;
    
    internal SysDataSharingApplicationSuiteTableEventsProcessorParameters DataSharingParameters;
    internal DataAreaId DataSharingCompany;
   
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCrossCompany</Name>
				<Source><![CDATA[
    internal void insertCrossCompany(boolean _changeCompany = true, boolean _skipCurrentCompany = true)
    {
        this.iterateCompanies(DataEventType::Inserted, _changeCompany, _skipCurrentCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCrossCompany</Name>
				<Source><![CDATA[
    internal void deleteCrossCompany(boolean _changeCompany = true, boolean _skipCurrentCompany = true)
    {
        this.iterateCompanies(DataEventType::Deleted, _changeCompany, _skipCurrentCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCrossCompany</Name>
				<Source><![CDATA[
    internal void updateCrossCompany(boolean _changeCompany = true, boolean _skipCurrentCompany = true)
    {
        this.iterateCompanies(DataEventType::Updated, _changeCompany, _skipCurrentCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>iterateCompanies</Name>
				<Source><![CDATA[
    private void iterateCompanies(DataEventType _dataEventType, boolean _changeCompany = true, boolean _skipCurrentCompany = true)
    {
        SetEnumerator crossCompanySet;

        crossCompanySet = SysDataSharingPolicy::crossCompaniesByCompanyAndTables(
            this.DataSharingParameters.CurrentCompany,
            this.DataSharingParameters.DataSharingPolicyTableNames,
            _skipCurrentCompany);

        while (crossCompanySet.moveNext())
        {
            DataAreaId company = crossCompanySet.current();
            {
                this.DataSharingCompany = company;


                switch (_dataEventType)
                {
                    case DataEventType::Inserted:
                        if (_changeCompany)
                        {
                            changecompany(company)
                            {
                                tableEventProcessor.insertDataSharingCompany(company);
                            }
                        }
                        else
                        {
                            tableEventProcessor.insertDataSharingCompany(company);
                        }
                        break;
                    case DataEventType::Deleted:
                        if (_changeCompany)
                        {
                            changecompany(company)
                            {
                                tableEventProcessor.deleteDataSharingCompany(company);
                            }
                        }
                        else
                        {
                            tableEventProcessor.deleteDataSharingCompany(company);
                        }
                        break;
                    case DataEventType::Updated:
                        if (_changeCompany)
                        {
                            changecompany(company)
                            {
                                tableEventProcessor.updateDataSharingCompany(company);
                            }
                        }
                        else
                        {
                            tableEventProcessor.updateDataSharingCompany(company);
                        }
                        break;
                }
            }
        }

        this.DataSharingCompany = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>contructor</Name>
				<Source><![CDATA[
    internal static SysDataSharingApplicationSuiteTableEventsProcessor contructor()
    {
        return new SysDataSharingApplicationSuiteTableEventsProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTableEventProcessor</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static SysDataSharingApplicationSuiteTableEventsProcessor newTableEventProcessor(
        SysDataSharingApplicationSuiteITableEventsProcessor _tableEventProcessor)
    {
        var processor = SysDataSharingApplicationSuiteTableEventsProcessor::contructor();

        processor.tableEventProcessor = _tableEventProcessor;
        processor.DataSharingParameters = _tableEventProcessor.dataSharingParameters();

        return processor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>