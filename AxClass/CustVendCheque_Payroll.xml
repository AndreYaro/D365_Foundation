<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCheque_Payroll</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CustVendCheque_Payroll</c> collects all the data used on the payroll pay stub.
/// </summary>
class CustVendCheque_Payroll extends CustVendCheque
{
    PayrollPayStatement             payrollPayStatement;
    PayrollTmpChequePrintout        payrollTmpChequePrintout;
    LedgerJournalTrans              ledgerJournalTrans;
    PayrollPayPeriod                payrollPayPeriod;
    Counter                         counter;
    Counter                         reportDataRowCounter;
    HcmWorker                       hcmWorker;
    int linesLimit;
    int combinedLineLimit;
    int columnWidthLimit;
    int firstPageLimit;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRemainingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to determine the number of lines left to print in an overflow check
    /// </summary>
    /// <param name="topLines">
    /// Number of lines printing in the top grid.
    /// </param>
    /// <param name="bottomLines">
    /// Number of lines printing in the bottom grid.
    /// </param>
    /// <returns>
    /// Returns number of lines left to print on a successive page.
    /// </returns>
    private container calcRemainingLines(int topLines, int bottomLines)
    {
        if (topLines > linesLimit)
        {
            // First reduce all the top lines
            topLines = topLines - linesLimit;
        }
        else
        {
            // If top lines are less than the limit then reduce bottom lines
            if (bottomLines > linesLimit)
            {
                bottomLines = bottomLines - linesLimit;
            }
            else
            {
                // if both top lines and bottom lines are lesser then individual limit but together they are overflowing a page reduce them to zeroes
                if (topLines + bottomLines > combinedLineLimit)
                {
                    topLines = 0;
                    bottomLines = 0;
                }
            }
        }

        return [topLines, bottomLines];
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkNumPages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method to determine the total number of pages required for check printing. This is required to set blank checks if any check overflows.
    /// </summary>
    private void checkNumPages()
    {
        int deductionLines;
        int earningLines;
        int contributionLines;
        int benefitAccrualLines;
        boolean printsBlankCheck = false;
        int headerLines;
        int footerLines;
        int checkTopLimit = 15000;

        // Setting the number of lines in the header. These are the identifying info which includes worker name, date and cheque number
        if (payrollTmpChequePrintout.ChequeTop <= checkTopLimit)
        {
            // For check at top
            headerLines = 7;
        }
        else
        {
            // For check at bottom
            headerLines = 8;
        }

        footerLines = 1; // This is the identifying info which prints at the last of the cheque
        firstPageLimit = 31;
        linesLimit = firstPageLimit;
        combinedLineLimit = 26;
        columnWidthLimit = 28;

        if (BankChequeLayout::find(accountId).ChequeNumMethod == ChequeNumMethod::Fixed)
        {
            while select PayrollCode from payrollTmpChequePrintout
                where payrollTmpChequePrintout.ChequeNum == tmpChequePrintout.ChequeNum
                    && payrollTmpChequePrintout.PayrollReportSection == PayrollPayStatementReportSection::Earning
            {
                if (strLen(payrollTmpChequePrintout.PayrollCode) <= columnWidthLimit)
                {
                    // Code is short and it doesn't wrap while printing on paper
                    earningLines++;
                }
                else
                {
                    if (strLen(payrollTmpChequePrintout.PayrollCode) <= (2*columnWidthLimit))
                    {
                        // Code is long enough to wrap once on printing
                        earningLines = earningLines + 2;
                    }
                    else
                    {
                        // Code is 57 characters or longer but no longer than 60 as thats the limit of EDT, its wrapping twice
                        earningLines = earningLines + 3;
                    }
                }
            }

            while select PayrollCode from payrollTmpChequePrintout
                where payrollTmpChequePrintout.ChequeNum == tmpChequePrintout.ChequeNum
                    && payrollTmpChequePrintout.PayrollReportSection == PayrollPayStatementReportSection::Deduction
            {
                if (strLen(payrollTmpChequePrintout.PayrollCode) <= columnWidthLimit)
                {
                    // Code is short and it doesn't wrap while printing on paper
                    deductionLines++;
                }
                else
                {
                    if (strLen(payrollTmpChequePrintout.PayrollCode) <= (2*columnWidthLimit))
                    {
                        // Code is long enough to wrap once on printing
                        deductionLines = deductionLines + 2;
                    }
                    else
                    {
                        // Code is 57 characters or longer but no longer than 60 as thats the limit of EDT, its wrapping twice
                        deductionLines = deductionLines + 3;
                    }
                }
            }

            while select PayrollCode from payrollTmpChequePrintout
                where payrollTmpChequePrintout.ChequeNum == tmpChequePrintout.ChequeNum
                    && payrollTmpChequePrintout.PayrollReportSection == PayrollPayStatementReportSection::Contribution
            {
                if (strLen(payrollTmpChequePrintout.PayrollCode) <= columnWidthLimit)
                {
                    // Code is short and it doesn't wrap while printing on paper
                    contributionLines++;
                }
                else
                {
                    if (strLen(payrollTmpChequePrintout.PayrollCode) <= (2*columnWidthLimit))
                    {
                        // Code is long enough to wrap once on printing
                        contributionLines = contributionLines + 2;
                    }
                    else
                    {
                        // Code is 57 characters or longer but no longer than 60 as thats the limit of EDT, its wrapping twice
                        contributionLines = contributionLines + 3;
                    }
                }
            }

            // Include the footer lines in the contribution count
            contributionLines = contributionLines + footerLines;

            while select PayrollCode from payrollTmpChequePrintout
                where payrollTmpChequePrintout.ChequeNum == tmpChequePrintout.ChequeNum
                    && payrollTmpChequePrintout.PayrollReportSection == PayrollPayStatementReportSection::Benefit
            {
                if (strLen(payrollTmpChequePrintout.PayrollCode) <= columnWidthLimit)
                {
                    // Code is short and it doesn't wrap while printing on paper
                    benefitAccrualLines++;
                }
                else
                {
                    if (strLen(payrollTmpChequePrintout.PayrollCode) <= (2*columnWidthLimit))
                    {
                        // Code is long enough to wrap once on printing
                        benefitAccrualLines = benefitAccrualLines + 2;
                    }
                    else
                    {
                        // Code is 57 characters or longer but no longer than 60 as thats the limit of EDT, its wrapping twice
                        benefitAccrualLines = benefitAccrualLines + 3;
                    }
                }
            }

            do
            {
                printsBlankCheck = false;

                if (earningLines > linesLimit  || benefitAccrualLines > linesLimit)
                {
                    // If either earning lines or benefit accrual lines are more than that will fit on one sheet of paper
                    this.setBlankCheque(ledgerJournalTrans);
                    printsBlankCheck = true;
                    [earningLines, benefitAccrualLines] = this.calcRemainingLines(earningLines, benefitAccrualLines);
                }
                else
                {
                    if (earningLines + benefitAccrualLines > combinedLineLimit)
                    {
                        // if the sum of earning lines and benefit accrual are more than that can fit on one sheet of paper.
                        // A different limit is needed to account for section headers and totals
                        this.setBlankCheque(ledgerJournalTrans);
                        printsBlankCheck = true;
                        [earningLines, benefitAccrualLines] = this.calcRemainingLines(earningLines, benefitAccrualLines);
                    }
                }

                if (deductionLines > linesLimit  || contributionLines > linesLimit)
                {
                    // If either deduction lines or contribution accrual lines are more than that will fit on one sheet of paper
                    this.setBlankCheque(ledgerJournalTrans);
                    printsBlankCheck = true;
                    [deductionLines, contributionLines] = this.calcRemainingLines(deductionLines, contributionLines);
                }
                else
                {
                    if (deductionLines + contributionLines > combinedLineLimit)
                    {
                        // if the sum of deduction lines and contributions are more than that can fit on one sheet of paper.
                        // A different limit is needed to account for section headers and totals
                        this.setBlankCheque(ledgerJournalTrans);
                        printsBlankCheck = true;
                        [deductionLines, contributionLines] = this.calcRemainingLines(deductionLines, contributionLines);
                    }
                }

                // First page prints header information under the check which doesn't repeat on successive pages.
                // This extra space is available for printing on successive pages
                if (printsBlankCheck && linesLimit == firstPageLimit)
                {
                    linesLimit = linesLimit + headerLines;
                    combinedLineLimit = combinedLineLimit + headerLines;
                }
            }
            while (printsBlankCheck);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearPayrollTmpChequePrintout</Name>
				<Source><![CDATA[
    private void clearPayrollTmpChequePrintout()
    {
        payrollTmpChequePrintout.PayrollCode = "";
        payrollTmpChequePrintout.PayrollQuantityUnit = 0;
        payrollTmpChequePrintout.PayrollQuantity = 0;
        payrollTmpChequePrintout.PayrollRate     = 0;
        payrollTmpChequePrintout.PayrollCurrentAmount = 0;
        payrollTmpChequePrintout.PayrollNetAvailable = 0;
        payrollTmpChequePrintout.PayrollYTDAmount = 0;
        payrollTmpChequePrintout.PayrollYTDAccrued = 0;
        payrollTmpChequePrintout.PayrollYTDUsed = 0;
        payrollTmpChequePrintout.AmountTxt = "";
        payrollTmpChequePrintout.AmountCur = 0.0;
        payrollTmpChequePrintout.AmountMST = 0.0;
        payrollTmpChequePrintout.BankName = "";
        payrollTmpChequePrintout.City = "";
        payrollTmpChequePrintout.County = "";
        payrollTmpChequePrintout.CountryRegionId = "";
        payrollTmpChequePrintout.CurrencyTxt = "";
        payrollTmpChequePrintout.micrLine = "";
        payrollTmpChequePrintout.Numerals2Letter = "";
        payrollTmpChequePrintout.State = "";
        payrollTmpChequePrintout.Street     = "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyToPayrollTmpTable</Name>
				<Source><![CDATA[
    private void copyToPayrollTmpTable()
    {
        payrollTmpChequePrintout.AccountId      = tmpChequePrintout.AccountId;
        payrollTmpChequePrintout.AccountNum     = tmpChequePrintout.AccountNum;
        payrollTmpChequePrintout.Address        = tmpChequePrintout.Address;
        payrollTmpChequePrintout.AmountCur      = tmpChequePrintout.AmountCur;
        payrollTmpChequePrintout.AmountMST      = tmpChequePrintout.AmountMST;
        payrollTmpChequePrintout.AmountTxt      = tmpChequePrintout.AmountTxt;
        payrollTmpChequePrintout.BankCopyCustomWatermark = tmpChequePrintout.BankCopyCustomWatermark;
        payrollTmpChequePrintout.BankCopySignatureText = tmpChequePrintout.BankCopySignatureText;
        payrollTmpChequePrintout.BankName       = tmpChequePrintout.BankName;
        payrollTmpChequePrintout.ChequeFormType = tmpChequePrintout.ChequeFormType;
        payrollTmpChequePrintout.ChequeNum      = tmpChequePrintout.ChequeNum;
        payrollTmpChequePrintout.ChequeTop      = tmpChequePrintout.ChequeTop;
        payrollTmpChequePrintout.ChequeTopDrop  = tmpChequePrintout.ChequeTopDrop;
        payrollTmpChequePrintout.City           = tmpChequePrintout.City;
        payrollTmpChequePrintout.CompanyCity    = tmpChequePrintout.CompanyCity;
        payrollTmpChequePrintout.Copy           = tmpChequePrintout.Copy;
        payrollTmpChequePrintout.CountryRegionId= tmpChequePrintout.CountryRegionId;
        payrollTmpChequePrintout.County         = tmpChequePrintout.County;
        payrollTmpChequePrintout.CurrencyCode   = tmpChequePrintout.CurrencyCode;
        payrollTmpChequePrintout.CurrencyTxt    = tmpChequePrintout.CurrencyTxt;
        payrollTmpChequePrintout.IsNonNegotiableCheque = tmpChequePrintout.IsNonNegotiableCheque;
        payrollTmpChequePrintout.MaturityDate   = tmpChequePrintout.MaturityDate;
        payrollTmpChequePrintout.micrLine       = tmpChequePrintout.micrLine;
        payrollTmpChequePrintout.Numerals2Letter = tmpChequePrintout.Numerals2Letter;
        payrollTmpChequePrintout.PersonnelNumber= this.parmHcmWorker().PersonnelNumber;
        payrollTmpChequePrintout.RecipientName  = tmpChequePrintout.RecipientName;
        payrollTmpChequePrintout.RegistrationNum= tmpChequePrintout.RegistrationNum;
        payrollTmpChequePrintout.Signature1     = tmpChequePrintout.Signature1;
        payrollTmpChequePrintout.Signature2     = tmpChequePrintout.Signature2;
        payrollTmpChequePrintout.State          = tmpChequePrintout.State;
        payrollTmpChequePrintout.Street         = tmpChequePrintout.Street;
        payrollTmpChequePrintout.TransactionRecId= tmpChequePrintout.TransactionRecId;
        payrollTmpChequePrintout.TransDate      = tmpChequePrintout.TransDate;
        payrollTmpChequePrintout.Void           = tmpChequePrintout.Void;

        payrollTmpChequePrintout.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPayStub</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the data on the payroll pay stub.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void fillPayStub()
    {
        this.parmPayrollPayPeriod(PayrollPayPeriod::find(this.parmPayrollPayStatement().PayPeriod));

        // Insert pay statement header
        this.populatePayHeader();

        // Remove fields that are not required for pay stub lines
        this.clearPayrollTmpChequePrintout();

        // Insert Earnings lines
        this.populateEarningsLine();

        // Insert deduction lines where isEmployer = No
        this.populateBenefitLines(NoYes::No);

        // Insert tax lines
        this.populateTaxLines();

        // Insert benefit accrual lines
        this.populateBenefitAccrualLines();

        // Populate this data only if the parameters are set to print pay slip contributions
        if (PayrollParameters::find().PaySlipContributions == NoYes::Yes)
        {
            // Insert deduction lines where isEmployer = No
            this.populateBenefitLines(NoYes::Yes);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPayrollTmpChequePrintout</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the temporary check printout.
    /// </summary>
    /// <returns>
    ///     A <c>PayrollTmpChequePrintout</c> object.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollTmpChequePrintout getPayrollTmpChequePrintout()
    {
        return payrollTmpChequePrintout;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpChequePrintoutForPayroll</Name>
				<Source><![CDATA[
    private void initTmpChequePrintoutForPayroll(LedgerJournalTrans _ledgerJrnlTrans, ChequeFormType _chequeFormType)
    {
        LogisticsPostalAddress  address;
        LedgerJournalTransPayrollDisbursement   payrollDisbursement;

        payrollDisbursement = LedgerJournalTransPayrollDisbursement::find(_ledgerJrnlTrans.RecId);

        tmpChequePrintout.RecipientName             = this.parmHcmWorker().name();

        address = DirParty::primaryPostalAddress(this.parmHcmWorker().Person);
        if (address)
        {
            tmpChequePrintout.Address               = address.Address;
            tmpChequePrintout.CountryRegionId       = address.CountryRegionId;
            tmpChequePrintout.State                 = address.State;
            tmpChequePrintout.County                = address.County;
            tmpChequePrintout.Street                = address.Street;
            tmpChequePrintout.City                  = address.City;
        }

        tmpChequePrintout.CompanyCity       = this.parmCompanyCity();
        tmpChequePrintout.TransactionRecId  = payrollDisbursement.RefRecId;
        tmpChequePrintout.NumOfSlips        = numOfSlips;
        tmpChequePrintout.ChequeTop         = chequeTop;
        tmpChequePrintout.ChequeFormType    = _chequeFormType;
        tmpChequePrintout.ChequeTop         = chequeTop;
        tmpChequePrintout.Signature1        = NoYes::No;
        tmpChequePrintout.Signature2        = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFringeBenefitRecover</Name>
				<Source><![CDATA[
    private void insertFringeBenefitRecover(PayrollPayStatementRecId _payrollPayStatementRecId,
                                    HcmWorkerRecId  _worker,
                                    PayrollEarningCodeRecId _earningCode)
    {
        PayrollEarningCode                  payrollEarningCode;
        PayrollPayStatement                 payrollPayStatementYTD;
        PayrollPayStatementEarningLine      payrollPayStatementEarningLine;
        PayrollPayStatementEarningLine      payrollPayStatementEarningLineYTD;

        //
        // Populate the temporary table for earnings
        // The query fetches all the EarningCodes grouped by their EarningRates and their YTD amounts that have been earned
        // by the employee through this pay period.
        //
        while select EarningCode, EarningRate, sum(AccountingCurrencyAmount) from payrollPayStatementEarningLineYTD
            where payrollPayStatementEarningLineYTD.IsMarkedForRemoval == NoYes::No
                && payrollPayStatementEarningLineYTD.EarningCode == _earningCode
                && payrollPayStatementEarningLineYTD.Source == PayrollPayStatementLineSource::FringeBenefitRecover
            join payrollPayStatementYTD where payrollPayStatementYTD.RecId == payrollPayStatementEarningLineYTD.PayStatement
                && payrollPayStatementYTD.Worker == _worker
                && payrollPayStatementYTD.IsReversed == NoYes::No
                && (payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                || (payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::SentToPaymentJournal
                &&  payrollPayStatementYTD.RecId         == this.parmPayrollPayStatement().RecId))
                && payrollPayStatementYTD.PaymentDate >= mkDate(01, 01, year(this.parmPayrollPayStatement().PaymentDate))
                && payrollPayStatementYTD.PaymentDate <= this.parmPayrollPayStatement().PaymentDate
            join Description, QuantityUnit from payrollEarningCode
                group by payrollPayStatementEarningLineYTD.EarningCode,
                    payrollPayStatementEarningLineYTD.EarningRate,
                    payrollEarningCode.Description,
                    payrollEarningCode.QuantityUnit
                order by payrollEarningCode.Description,
                    payrollPayStatementEarningLineYTD.EarningRate asc
                where payrollPayStatementEarningLineYTD.EarningCode == payrollEarningCode.RecId
        {
            payrollTmpChequePrintout.PayrollCode = payrollEarningCode.Description;
            payrollTmpChequePrintout.PayrollQuantityUnit = payrollEarningCode.QuantityUnit;

            //
            // The query fetches the current amount for the earnings on the pay statement
            // grouped by the EarningCode and EarningRate combination.
            //
            select sum(Quantity), sum(AccountingCurrencyAmount) from payrollPayStatementEarningLine
                group by payrollPayStatementEarningLine.PayStatement
                where payrollPayStatementEarningLine.PayStatement == _payrollPayStatementRecId
                && payrollPayStatementEarningLine.EarningCode == payrollPayStatementEarningLineYTD.EarningCode
                && payrollPayStatementEarningLine.EarningRate == payrollPayStatementEarningLineYTD.EarningRate
                && payrollPayStatementEarningLine.IsMarkedForRemoval == NoYes::No
                && payrollPayStatementEarningLine.Source == PayrollPayStatementLineSource::FringeBenefitRecover;

            if (payrollPayStatementEarningLine)
            {
                payrollTmpChequePrintout.PayrollQuantity = payrollPayStatementEarningLine.Quantity;
                payrollTmpChequePrintout.PayrollCurrentAmount = payrollPayStatementEarningLine.AccountingCurrencyAmount;
            }
            else
            {
                payrollTmpChequePrintout.PayrollQuantity = 0;
                payrollTmpChequePrintout.PayrollCurrentAmount = 0;
            }

            payrollTmpChequePrintout.PayrollRate = payrollPayStatementEarningLineYTD.EarningRate;
            payrollTmpChequePrintout.PayrollYTDAmount = payrollPayStatementEarningLineYTD.AccountingCurrencyAmount;

            payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::Earning;

            // Insert earning line
            payrollTmpChequePrintout.insert();
            this.clearPayrollTmpChequePrintout();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the <c>TmpChequePrintout</c> table buffer that contains the information that is required to
    ///    create the physical check.
    /// </summary>
    /// <param name="_custVendPaym">
    ///    A class that contains the transaction information that is needed for the check.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The <c>LedgerJournalACType</c> enumeration value cannot have checks.
    /// </exception>
    public void output(CustVendPaym _custVendPaym)
    {
        BankNegInstRecipientName recipientName;
        VendTable               vendTable;
        CustTable               custTable;
        BankAccountTable        bankAccountTable;
        BankChequeLayout        bankChequeLayout;
        Currency                currency;
        AmountCur               amountCur;
        LogisticsLocationEntity location;
        LogisticsPostalAddress  address;
        ChequeLength            chequeStartPosition;
        int                     chequeTopLengthMultiplier = 100;

        this.parmLedgerJournalTrans(_custVendPaym.ledgerJournalTrans());

        changecompany(ledgerJournalTrans.Company)
        {
            switch (ledgerJournalTrans.AccountType)
            {
                case LedgerJournalACType::Vend :
                    vendTable           = VendTable::findByLedgerDimension(ledgerJournalTrans.parmLedgerDimension());

                    //Verify if the remittancelocation on the table is still active; if no remittancelocation exists or is invalid then default
                    ledgerJournalTrans.RemittanceLocation = LogisticsLocation::isLocationActive(ledgerJournalTrans.RemittanceLocation)?
                                                                    ledgerJournalTrans.RemittanceLocation : VendTable::getDefaultRemittanceLocation(vendTable.AccountNum);
                    //get the vendors remit to address
                    location    = LogisticsLocationEntity::constructFromLocationRecId(ledgerJournalTrans.RemittanceLocation);
                    address     = location ? LogisticsLocationEntity::location2PostalAddress(location.parmLocationRecId(), DateTimeUtil::getSystemDateTime(), true) : address;
                    ledgerJournalTrans.RemittanceAddress = address.RecId;

                    recipientName       = DirPartyTable::findRec(vendTable.Party).Name;
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }

        bankAccountTable    = BankAccountTable::find(accountId);
        bankChequeLayout    = BankChequeLayout::find(accountId);

        chequeStartPosition = this.convertToMm(bankChequeLayout.ChequeStartPosition, bankChequeLayout.ChequePositionUnit);
        chequeTop = real2int(chequeStartPosition * chequeTopLengthMultiplier);

        if (bankChequeLayout.OtherCurrencies)
        {
            currency            = Currency::find(ledgerJournalTrans.CurrencyCode);
        }
        else
        {
            currency            = Currency::find(bankAccountTable.CurrencyCode);
        }
        amountCur           = ledgerJournalTrans.AmountCurDebit - ledgerJournalTrans.AmountCurCredit;

        if (ledgerJournalTrans.BankNegInstRecipientName)
        {
            recipientName = ledgerJournalTrans.BankNegInstRecipientName;
        }

        BankChequeTable::setChequeStatus(
            accountId,
            chequeNum,
            ChequeStatus::Payment,
            ledgerJournalTrans.TransDate,
            ledgerJournalTrans.Voucher,
            CustVendCheque::ledgerJournalACType2RecipientType(ledgerJournalTrans.AccountType),
            ledgerJournalTrans.Company,
            ledgerJournalTrans.parmAccount(),
            ledgerJournalTrans.CurrencyCode,
            ledgerJournalTrans.AmountCurDebit,
            recipientName,
            ledgerJournalTrans.RemittanceAddress,
            ledgerJournalTrans.TableId,
            ledgerJournalTrans.RecId);

        if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend &&
                ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank &&
                ledgerJournalTrans.ledgerJournalTable().JournalType == LedgerJournalType::PayrollDisbursement)
        {
            this.initTmpChequePrintoutForPayroll(ledgerJournalTrans, bankChequeLayout.ChequeFormType);
        }

        tmpChequePrintout.ChequeNum = chequeNum;

        this.initBankDetails(accountId, bankChequeLayout, bankAccountTable);

        this.setChequeAmount(amountCur,
                                    currency,
                                    bankChequeLayout,
                                    vendTable,
                                    custTable);

        this.setSignatures(bankChequeLayout, amountCur);
        tmpChequePrintout.TransDate = ledgerJournalTrans.TransDate;
        this.insertBankPaymentTrans(ledgerJournalTrans, _custVendPaym);
        tmpChequePrintout.insert();
        this.copyToPayrollTmpTable();
        this.fillPayStub();
        this.checkNumPages();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHcmWorker</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public HcmWorker parmHcmWorker(HcmWorker _hcmWorker = hcmWorker)
    {
        hcmWorker = _hcmWorker;
        return hcmWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    private LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        return ledgerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayrollPayPeriod</Name>
				<Source><![CDATA[
    private PayrollPayPeriod parmPayrollPayPeriod(PayrollPayPeriod _payrollPayPeriod = payrollPayPeriod)
    {
        payrollPayPeriod = _payrollPayPeriod;
        return payrollPayPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPayrollPayStatement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PayrollPayStatement parmPayrollPayStatement(PayrollPayStatement _payrollPayStatement = payrollPayStatement)
    {
        payrollPayStatement = _payrollPayStatement;
        return payrollPayStatement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReportDataRowCounter</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Counter parmReportDataRowCounter(Counter _reportDataRowCounter = reportDataRowCounter)
    {
        reportDataRowCounter = _reportDataRowCounter;
        return reportDataRowCounter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBenefitAccrualLines</Name>
				<Source><![CDATA[
    private void populateBenefitAccrualLines()
    {
        PayrollPayStatementAccrualBalance   payrollPayStatementAccrualBalance;
        PayrollAccrual                      payrollAccrual;

        //Populate the temporary table for benefit accruals
        while select AccruedHours, UsedHours, TotalAvailableHours from payrollPayStatementAccrualBalance
            where payrollPayStatementAccrualBalance.PayStatement == this.parmPayrollPayStatement().RecId
            join Description from  payrollAccrual
                where payrollAccrual.RecId == payrollPayStatementAccrualBalance.Accrual
        {
            payrollTmpChequePrintout.PayrollCode = payrollAccrual.Description;
            payrollTmpChequePrintout.PayrollYTDAccrued = payrollPayStatementAccrualBalance.AccruedHours;
            payrollTmpChequePrintout.PayrollYTDUsed = payrollPayStatementAccrualBalance.UsedHours;
            payrollTmpChequePrintout.PayrollYTDAmount = payrollPayStatementAccrualBalance.TotalAvailableHours;

            payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::Benefit;
            payrollTmpChequePrintout.PayrollReportDataRowCounter = this.parmReportDataRowCounter();

            //Insert benefit line
            payrollTmpChequePrintout.insert();
            this.clearPayrollTmpChequePrintout();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBenefitLines</Name>
				<Source><![CDATA[
    private void populateBenefitLines(NoYes _isEmployer)
    {
        AmountCur                           total = 0;
        AmountCur                           totalYTD = 0;
        HcmBenefitPlan                      hcmBenefitPlan;
        HcmBenefit                          hcmBenefit;
        PayrollPayStatement                 payrollPayStatementYTD;
        PayrollPayStatementBenefitLine      payrollPayStatementBenefitLine;
        PayrollPayStatementBenefitLine      payrollPayStatementBenefitLineYTD;

        //Populate the temporary table for benefit deduction lines
        while select Benefit, sum(AccountingCurrencyAmount) from payrollPayStatementBenefitLineYTD
        where payrollPayStatementBenefitLineYTD.IsEmployer == _isEmployer
            && payrollPayStatementBenefitLineYTD.IsMarkedForRemoval == NoYes::No
        join payrollPayStatementYTD where payrollPayStatementYTD.RecId == payrollPayStatementBenefitLineYTD.PayStatement
            && payrollPayStatementYTD.Worker == this.parmHcmWorker().RecId
            && payrollPayStatementYTD.IsReversed == NoYes::No
            && payrollPayStatementYTD.PaymentDate >= mkDate(01, 01, year(this.parmPayrollPayStatement().PaymentDate))
            && payrollPayStatementYTD.PaymentDate <= this.parmPayrollPayStatement().PaymentDate
            && (payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::PaymentIssued
            || (payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::SentToPaymentJournal
            &&  payrollPayStatementYTD.RecId         == this.parmPayrollPayStatement().RecId))
        join  hcmBenefit
            where payrollPayStatementBenefitLineYTD.Benefit == hcmBenefit.RecId
        join Description from hcmBenefitPlan
            group by payrollPayStatementBenefitLineYTD.Benefit, hcmBenefitPlan.Description
            order by hcmBenefitPlan.Description asc
            where hcmBenefitPlan.RecId == hcmBenefit.BenefitPlan
        {
            payrollTmpChequePrintout.PayrollCode = hcmBenefitPlan.Description;

            select sum(AccountingCurrencyAmount), RecId from payrollPayStatementBenefitLine
                    group by payrollPayStatementBenefitLine.PayStatement
                    where payrollPayStatementBenefitLine.PayStatement == this.parmPayrollPayStatement().RecId
                    && payrollPayStatementBenefitLine.Benefit == payrollPayStatementBenefitLineYTD.Benefit
                    && payrollPayStatementBenefitLine.IsMarkedForRemoval == NoYes::No
                    && payrollPayStatementBenefitLine.IsEmployer == _isEmployer;

            if (payrollPayStatementBenefitLine)
            {
                payrollTmpChequePrintout.PayrollCurrentAmount = payrollPayStatementBenefitLine.AccountingCurrencyAmount;
                total += payrollPayStatementBenefitLine.AccountingCurrencyAmount;
            }
            else
            {
                payrollTmpChequePrintout.PayrollCurrentAmount = 0;
            }

            payrollTmpChequePrintout.PayrollYTDAmount = payrollPayStatementBenefitLineYTD.AccountingCurrencyAmount;
            totalYTD += payrollPayStatementBenefitLineYTD.AccountingCurrencyAmount;

            if (_isEmployer)
            {
                payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::Contribution;
            }
            else
            {
                payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::Deduction;
            }

            payrollTmpChequePrintout.PayrollReportDataRowCounter = this.parmReportDataRowCounter();

            //Insert deduction line
            payrollTmpChequePrintout.insert();
            this.clearPayrollTmpChequePrintout();
        }

        // Insert total deductions
        if (_isEmployer)
        {
            payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::TotalContributions;
        }
        else
        {
            payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::TotalDeductions;
        }

        payrollTmpChequePrintout.PayrollCurrentAmount = total;
        payrollTmpChequePrintout.PayrollYTDAmount = totalYTD;
        payrollTmpChequePrintout.insert();
        this.clearPayrollTmpChequePrintout();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateEarningsLine</Name>
				<Source><![CDATA[
    private void populateEarningsLine()
    {
        PayrollTmpChequePrintout            tmpChequePrintoutForEachUoM;
        PayrollTmpChequePrintout            tmpChequePrintoutForSwap;
        AmountCur                           grossTotalYTD;
        AmountCur                           netTotalYTD;
        PayrollPayStatement                 payrollPayStatementYTD;
        PayrollPayStatementEarningLine      payrollPayStatementEarningLine;
        PayrollPayStatementEarningLine      payrollPayStatementEarningLineYTD;
        PayrollEarningCode                  payrollEarningCode;
        AmountCur                           totalYTD = 0;

        //Populate the temporary table for earning lines
        while select EarningCode, EarningRate, sum(AccountingCurrencyAmount) from payrollPayStatementEarningLineYTD
            where payrollPayStatementEarningLineYTD.IsMarkedForRemoval == NoYes::No
            && payrollPayStatementEarningLineYTD.Source != PayrollPayStatementLineSource::FringeBenefitRecover
            join payrollPayStatementYTD where payrollPayStatementYTD.RecId == payrollPayStatementEarningLineYTD.PayStatement
                && payrollPayStatementYTD.Worker == this.parmHcmWorker().RecId
                && payrollPayStatementYTD.IsReversed == NoYes::No
                && payrollPayStatementYTD.PaymentDate >= mkDate(01, 01, year(this.parmPayrollPayStatement().PaymentDate))
                && payrollPayStatementYTD.PaymentDate <= this.parmPayrollPayStatement().PaymentDate
                && (payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                || (payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::SentToPaymentJournal
                &&  payrollPayStatementYTD.RecId         == this.parmPayrollPayStatement().RecId))
            join Description, QuantityUnit from payrollEarningCode
                group by payrollPayStatementEarningLineYTD.EarningCode, payrollPayStatementEarningLineYTD.EarningRate,
                 payrollEarningCode.Description, payrollEarningCode.QuantityUnit
                order by payrollEarningCode.Description, payrollPayStatementEarningLineYTD.EarningRate asc
                    where payrollPayStatementEarningLineYTD.EarningCode == payrollEarningCode.RecId
        {
            payrollTmpChequePrintout.PayrollCode = payrollEarningCode.Description;
            payrollTmpChequePrintout.PayrollQuantityUnit = payrollEarningCode.QuantityUnit;

            //Gets the current amount for the earnings on the pay statement
            //grouped by the EarningCode and EarningRate combination.
            select sum(AccountingCurrencyAmount), sum(Quantity) from payrollPayStatementEarningLine
                group by payrollPayStatementEarningLine.PayStatement
                where payrollPayStatementEarningLine.PayStatement == this.parmPayrollPayStatement().RecId
                && payrollPayStatementEarningLine.EarningCode == payrollPayStatementEarningLineYTD.EarningCode
                && payrollPayStatementEarningLine.EarningRate == payrollPayStatementEarningLineYTD.EarningRate
                && payrollPayStatementEarningLine.IsMarkedForRemoval == NoYes::No
                && payrollPayStatementEarningLine.Source != PayrollPayStatementLineSource::FringeBenefitRecover;

            if (payrollPayStatementEarningLine)
            {
                payrollTmpChequePrintout.PayrollQuantity = payrollPayStatementEarningLine.Quantity;
                payrollTmpChequePrintout.PayrollCurrentAmount = payrollPayStatementEarningLine.AccountingCurrencyAmount;
            }
            else
            {
                payrollTmpChequePrintout.PayrollQuantity = 0;
                payrollTmpChequePrintout.PayrollCurrentAmount = 0;
            }

            payrollTmpChequePrintout.PayrollRate = payrollPayStatementEarningLineYTD.EarningRate;
            totalYTD += payrollPayStatementEarningLineYTD.AccountingCurrencyAmount;
            payrollTmpChequePrintout.PayrollYTDAmount = payrollPayStatementEarningLineYTD.AccountingCurrencyAmount;
            payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::Earning;
            payrollTmpChequePrintout.PayrollReportDataRowCounter = this.parmReportDataRowCounter();

            //Insert earning line
            if (payrollEarningCode.QuantityUnit != PayrollQuantityUnit::Each)
            {
                payrollTmpChequePrintout.insert();
            }
            else
            {
                if (payrollTmpChequePrintout.PayrollCode == tmpChequePrintoutForEachUoM.PayrollCode
                   || tmpChequePrintoutForEachUoM.AccountId == "")
                {
                    payrollTmpChequePrintout.PayrollCurrentAmount += tmpChequePrintoutForEachUoM.PayrollCurrentAmount;
                    payrollTmpChequePrintout.PayrollYTDAmount += tmpChequePrintoutForEachUoM.PayrollYTDAmount;
                    buf2Buf(payrollTmpChequePrintout, tmpChequePrintoutForEachUoM);
                }
                else
                {
                    if (tmpChequePrintoutForEachUoM.AccountId != "")
                    {
                        buf2Buf(payrollTmpChequePrintout, tmpChequePrintoutForSwap);
                        buf2Buf(tmpChequePrintoutForEachUoM, payrollTmpChequePrintout);
                        payrollTmpChequePrintout.insert();
                        buf2Buf(tmpChequePrintoutForSwap, payrollTmpChequePrintout);
                        buf2Buf(tmpChequePrintoutForSwap, tmpChequePrintoutForEachUoM);
                        tmpChequePrintoutForSwap.clear();
                    }
                }
            }
            this.clearPayrollTmpChequePrintout();

            // Insert fringe benefit recover lines
            this.insertFringeBenefitRecover(this.parmPayrollPayStatement().RecId, this.parmHcmWorker().RecId, payrollPayStatementEarningLineYTD.EarningCode);
        }

        if (tmpChequePrintoutForEachUoM.AccountId != "")
        {
            buf2Buf(tmpChequePrintoutForEachUoM, payrollTmpChequePrintout);
            payrollTmpChequePrintout.insert();
        }

        select Worker, sum(GrossAccountingCurrencyAmount), sum(NetAccountingCurrencyAmount)
            from payrollPayStatementYTD
            where payrollPayStatementYTD.PaymentDate >= mkDate(01, 01, year(this.parmPayrollPayStatement().PaymentDate))
            && payrollPayStatementYTD.PaymentDate    <= this.parmPayrollPayStatement().PaymentDate
            && payrollPayStatementYTD.IsReversed     == NoYes::No
            && (payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::PaymentIssued
            || (payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::SentToPaymentJournal
            &&  payrollPayStatementYTD.RecId         == this.parmPayrollPayStatement().RecId))
            && payrollPayStatementYTD.Worker         == this.parmHcmWorker().RecId;

        grossTotalYTD = payrollPayStatementYTD.GrossAccountingCurrencyAmount;
        netTotalYTD = payrollPayStatementYTD.NetAccountingCurrencyAmount;

        // Insert gross earning totals
        payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::TotalGrossEarnings;
        payrollTmpChequePrintout.PayrollCurrentAmount = this.parmPayrollPayStatement().GrossAccountingCurrencyAmount;
        payrollTmpChequePrintout.PayrollYTDAmount = grossTotalYTD;
        payrollTmpChequePrintout.insert();

        //Insert net earning totals
        payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::TotalNetEarnings;
        payrollTmpChequePrintout.PayrollCurrentAmount = this.parmPayrollPayStatement().NetAccountingCurrencyAmount;
        payrollTmpChequePrintout.PayrollYTDAmount = netTotalYTD;
        payrollTmpChequePrintout.insert();
        this.clearPayrollTmpChequePrintout();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populatePayHeader</Name>
				<Source><![CDATA[
    private void populatePayHeader()
    {
        Str60 payPeriodStr;

        payPeriodStr = strFmt("@Payroll:Num_1To2", this.parmPayrollPayPeriod().PeriodStartDate, this.parmPayrollPayPeriod().PeriodEndDate);

        payrollTmpChequePrintout.PayrollPaymentDate = this.parmPayrollPayStatement().PaymentDate;
        payrollTmpChequePrintout.PayrollPaymentNumber = this.parmPayrollPayStatement().DocumentNumber;
        payrollTmpChequePrintout.PayrollPayPeriodStr = payPeriodStr;
        payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::Header;
        payrollTmpChequePrintout.PayrollReportDataRowCounter = this.parmReportDataRowCounter();
        payrollTmpChequePrintout.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTaxLines</Name>
				<Source><![CDATA[
    private void populateTaxLines()
    {
        AmountCur                           total = 0;
        AmountCur                           totalYTD = 0;
        PayrollTaxCode                      payrollTaxCode;
        PayrollTaxCodeDetail                payrollTaxCodeDetail;
        PayrollPayStatement                 payrollPayStatementYTD;
        PayrollPayStatementTaxLine          payrollPayStatementTaxLine;
        PayrollPayStatementTaxLine          payrollPayStatementTaxLineYTD;
        CompanyInfo                         companyInfo;

        companyInfo = CompanyInfo::findDataArea(ledgerJournalTrans.Company);

        //Populate the temporary table for taxe lines
        while select TaxCode, sum(AccountingCurrencyAmount) from payrollPayStatementTaxLineYTD
            where payrollPayStatementTaxLineYTD.IsEmployer == NoYes::No
                && payrollPayStatementTaxLineYTD.IsMarkedForRemoval == NoYes::No
            join payrollPayStatementYTD where payrollPayStatementYTD.RecId == payrollPayStatementTaxLineYTD.PayStatement
                && payrollPayStatementYTD.Worker == this.parmHcmWorker().RecId
                && payrollPayStatementYTD.IsReversed == NoYes::No
                && payrollPayStatementYTD.PaymentDate >= mkDate(01, 01, year(this.parmPayrollPayStatement().PaymentDate))
                && payrollPayStatementYTD.PaymentDate <= this.parmPayrollPayStatement().PaymentDate
                && (payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::PaymentIssued
                || (payrollPayStatementYTD.PaymentStatus == PayrollPaymentStatus::SentToPaymentJournal
                &&  payrollPayStatementYTD.RecId         == this.parmPayrollPayStatement().RecId))
            join Description from payrollTaxCode
                where payrollPayStatementTaxLineYTD.TaxCode == payrollTaxCode.RecId
            outer join ReportDescription from payrollTaxCodeDetail
                group by payrollPayStatementTaxLineYTD.TaxCode, payrollTaxCode.Description, payrollTaxCodeDetail.ReportDescription
                order by payrollTaxCode.Description asc
                where payrollTaxCodeDetail.PayrollTaxCode == payrollTaxCode.RecId
                && payrollTaxCodeDetail.LegalEntity == companyInfo.RecId
        {
            if (payrollTaxCodeDetail.ReportDescription != "")
            {
                payrollTmpChequePrintout.PayrollCode = payrollTaxCodeDetail.ReportDescription;
            }
            else
            {
                payrollTmpChequePrintout.PayrollCode = payrollTaxCode.Description;
            }

            //The query fetches the current amounts of all the taxes for the pay statement.
            select sum(AccountingCurrencyAmount), RecId from payrollPayStatementTaxLine
                    group by payrollPayStatementTaxLine.PayStatement
                    where payrollPayStatementTaxLine.PayStatement == this.parmPayrollPayStatement().RecId
                    && payrollPayStatementTaxLine.TaxCode == payrollPayStatementTaxLineYTD.TaxCode
                    && payrollPayStatementTaxLine.IsMarkedForRemoval == NoYes::No
                    && payrollPayStatementTaxLine.IsEmployer == NoYes::No;

            if (payrollPayStatementTaxLine)
            {
                total += payrollPayStatementTaxLine.AccountingCurrencyAmount;
                payrollTmpChequePrintout.PayrollCurrentAmount = payrollPayStatementTaxLine.AccountingCurrencyAmount;
            }
            else
            {
                payrollTmpChequePrintout.PayrollCurrentAmount = 0;
            }

            totalYTD += payrollPayStatementTaxLineYTD.AccountingCurrencyAmount;
            payrollTmpChequePrintout.PayrollYTDAmount = payrollPayStatementTaxLineYTD.AccountingCurrencyAmount;

            payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::Deduction;
            payrollTmpChequePrintout.PayrollReportDataRowCounter = this.parmReportDataRowCounter();

            //Insert tax line
            payrollTmpChequePrintout.insert();
            this.clearPayrollTmpChequePrintout();
        }

        payrollTmpChequePrintout.PayrollReportSection = PayrollPayStatementReportSection::TotalTaxes;
        payrollTmpChequePrintout.PayrollCurrentAmount = total;
        payrollTmpChequePrintout.PayrollYTDAmount = totalYTD;
        payrollTmpChequePrintout.insert();
        this.clearPayrollTmpChequePrintout();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>