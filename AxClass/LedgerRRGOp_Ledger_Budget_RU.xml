<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGOp_Ledger_Budget_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGOp_Ledger_Budget_RU extends LedgerRRGOp_Ledger_RU
{
    CurrencyCode            currencyCodeStd;
    CurrencyCode            currencyCodeStdSecond;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addStartDateRange</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void addStartDateRange(str _value)
    {
        this.addRange(fieldNum(BudgetTransactionLine, Date), _value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionFieldId</Name>
				<Source><![CDATA[
    protected FieldId dimensionFieldId()
    {
        return fieldNum(BudgetTransactionLine, LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(LedgerRRGEBufferEval_W _bufferEval)
    {
        CompanyInfo companyInfo = CompanyInfo::find();

        super(_bufferEval);

        switch (parms.operation().LedgerOperation)
        {
            case LedgerRRGOperationType_RU::BalanceCredit:
            case LedgerRRGOperationType_RU::TurnoverCredit:
            case LedgerRRGOperationType_RU::TurnoverInCorrCredit:
                crediting = UnknownNoYes::Yes;
                break;

            case LedgerRRGOperationType_RU::BalanceDebit:
            case LedgerRRGOperationType_RU::TurnoverDebit:
            case LedgerRRGOperationType_RU::TurnoverInCorrDebit:
                crediting = UnknownNoYes::No;
                break;
        }

        currencyCodeStd         = Ledger::accountingCurrency();
        currencyCodeStdSecond   = Ledger::reportingCurrency();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    protected void initQuery()
    {
        QueryBuildDataSource    qbdS;
    
        this.addRange(fieldNum(BudgetTransactionLine, TransactionCurrency), SysQuery::valueNotEmptyString());
    
        this.addDimensionRange();
    
        queryBuildDataSource.addSelectionField(fieldNum(BudgetTransactionLine, TransactionCurrencyAmount), SelectionField::Sum);
        queryBuildDataSource.orderMode(OrderMode::GroupBy);
    
        queryBuildDataSource.addSortField(fieldNum(BudgetTransactionLine, TransactionCurrency));
        queryBuildDataSource.addSortField(fieldNum(BudgetTransactionLine, Date));
    
        if (crediting != UnknownNoYes::Unknown)
        {
            if (crediting == UnknownNoYes::Yes)
            {
                this.addRange(fieldNum(BudgetTransactionLine, BudgetType), queryValue(BudgetType::Revenue));
                invertResult = true;
            }
            else
            {
                this.addRange(fieldNum(BudgetTransactionLine, BudgetType), queryValue(BudgetType::Expense));
            }
        }
    
        if (parms.operation().ModelNum)
        {
            qbdS = this.query().dataSourceNo(1).addDataSource(tableNum(BudgetTransactionHeader));
            qbdS.joinMode(JoinMode::ExistsJoin);
            qbdS.relations(true);
            qbdS.addRange(fieldNum(BudgetTransactionHeader, BudgetModelId)).value(queryValue(parms.operation().ModelNum));
        }
    
        switch(parms.operation().LedgerOperation)
        {
            case LedgerRRGOperationType_RU::Balance:
            case LedgerRRGOperationType_RU::BalanceCredit:
            case LedgerRRGOperationType_RU::BalanceDebit:
                this.addStartDateRange(parms.transDateFilter(parms.baseDate(), null, null, '@' + fieldStr(BudgetTransactionLine, Date)));
                break;
    
            case LedgerRRGOperationType_RU::Turnover:
            case LedgerRRGOperationType_RU::TurnoverCredit:
            case LedgerRRGOperationType_RU::TurnoverDebit:
                this.addStartDateRange(parms.transDatePeriodFilter(parms.baseDate(), null, null, '@' + fieldStr(BudgetTransactionLine, Date)));
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerAmount</Name>
				<Source><![CDATA[
    public AmountMST ledgerAmount(Common _record)
    {
        BudgetTransactionLine budgetTransactionLine = _record;
        AmountMST             ret                   = budgetTransactionLine.TransactionCurrencyAmount;

        if (parms.currencyForCalc() == LedgerRRGCurrencyForCalc_RU::AmountMST)
        {
            ret = budgetTransactionLine.TransactionCurrency == currencyCodeStd ?
                    budgetTransactionLine.TransactionCurrencyAmount :
                    CurrencyExchangeHelper::amountCur2MST(budgetTransactionLine.TransactionCurrencyAmount, budgetTransactionLine.TransactionCurrency, 0, budgetTransactionLine.Date);
        }
        else
        {
            ret = budgetTransactionLine.TransactionCurrency == currencyCodeStdSecond ?
                    budgetTransactionLine.TransactionCurrencyAmount :
                    CurrencyExchangeHelper::curAmount2CurAmount(budgetTransactionLine.TransactionCurrencyAmount, budgetTransactionLine.TransactionCurrency, Ledger::reportingCurrency(), budgetTransactionLine.Date);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerTableId</Name>
				<Source><![CDATA[
    protected TableId ledgerTableId()
    {
        return tableNum(BudgetTransactionLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountFieldId</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Defines main account field ID for the current ancessor of <c>LedgerRRGOp_Ledger_RU</c> class.
    /// </summary>
    /// <returns>
    ///     Main account field ID.
    /// </returns>
    protected FieldId mainAccountFieldId()
    {
        return fieldNum(BudgetTransactionLine, LedgerDimension);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGOp_Ledger_Budget_RU construct()
    {
        return new LedgerRRGOp_Ledger_Budget_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromOperationType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LedgerRRGOp_Ledger_Budget_RU newFromOperationType(LedgerRRGOperationType_RU _operationType)
    {
        if (_operationType == LedgerRRGOperationType_RU::Balance         ||
            _operationType == LedgerRRGOperationType_RU::BalanceCredit   ||
            _operationType == LedgerRRGOperationType_RU::BalanceDebit    ||
            _operationType == LedgerRRGOperationType_RU::Turnover        ||
            _operationType == LedgerRRGOperationType_RU::TurnoverCredit  ||
            _operationType == LedgerRRGOperationType_RU::TurnoverDebit)
        {
            return LedgerRRGOp_Ledger_Budget_RU::construct();
        }

        return null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>