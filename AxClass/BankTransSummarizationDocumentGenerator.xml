<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankTransSummarizationDocumentGenerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankTransSummarizationDocumentGenerator
{
    private BankTransSummarizationDocumentGroupFilter documentGroupFilter;

    private BankTransSummarizationCriteria summarizationCriteria;

    // The actual type of this field should be List<Container<BankTransSummarizationDocument, List<Container<LedgerJournalTrans, BankAccountTrans>>>>
    private List documentTransPairsList;

    private NumberSeq summarizationIdSeq;

    private BankTransSummarizationLogger logger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(BankTransSummarizationDocumentGroupFilter _documentGroupFilter, BankTransSummarizationCriteria _summarizationCriteria)
    {
        if (_summarizationCriteria == BankTransSummarizationCriteria::NoSummarization)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
        documentGroupFilter = _documentGroupFilter;
        summarizationCriteria = _summarizationCriteria;
        summarizationIdSeq = NumberSeq::newGetNum(BankParameters::numRefSummarizationID());
        if (!summarizationIdSeq)
        {
            throw error(strfmt("@SYS26165", "@CashManagement:BankTransSummarizationID"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankTransSummarizationDocumentGenerator construct(BankTransSummarizationDocumentGroupFilter _documentGroupFilter, BankTransSummarizationCriteria _summarizationCriteria)
    {
        return new BankTransSummarizationDocumentGenerator(_documentGroupFilter, _summarizationCriteria);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentTransPairsList</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public List getDocumentTransPairsList()
    {
        if (!this.resultGenerated())
        {
            ttsbegin;
            this.generateDocuments();
            ttscommit;
        }

        return documentTransPairsList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLogger</Name>
				<Source><![CDATA[
    internal void setLogger(BankTransSummarizationLogger _logger)
    {
        logger = _logger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSummarizationIdSourceFieldId</Name>
				<Source><![CDATA[
    protected FieldId getSummarizationIdSourceFieldId()
    {
        FieldId sourceField = 0;
        if (this.summarizationCriteria == BankTransSummarizationCriteria::DefaultAndDocNum)
        {
            sourceField = fieldNum(LedgerJournalTrans, DocumentNum);
        }

        if (logger)
        {
            logger.logSummarizationIdSourceField(sourceField);
        }
        return sourceField;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocuments</Name>
				<Source><![CDATA[
    private void generateDocuments()
    {
        documentTransPairsList = new List(Types::Container);
        ListEnumerator transactionGroupEnumerator = this.documentGroupFilter.getFilteredPaymBankTransactionGroups().getEnumerator();
        while (transactionGroupEnumerator.moveNext())
        {
            List transactionGroup = transactionGroupEnumerator.current();
            BankTransSummarizationDocument generatedDocument = this.generateDocumentForGroup(transactionGroup);
            documentTransPairsList.addEnd([generatedDocument, list2Con(transactionGroup)]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocumentForGroup</Name>
				<Source><![CDATA[
    // The actual type of the parameter should be List<Container<LedgerJournalTrans, BankAccountTrans>>.
    private BankTransSummarizationDocument generateDocumentForGroup(List _transactionGroup)
    {
        BankTransSummarizationDocument documentHeader = this.generateDocumentHeader(_transactionGroup);
        this.generateBankDocument(documentHeader);
        this.generateDocumentLines(documentHeader, _transactionGroup);
        return documentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocumentHeader</Name>
				<Source><![CDATA[
    // The actual type of the parameter should be List<Container<LedgerJournalTrans, BankAccountTrans>>.
    private BankTransSummarizationDocument generateDocumentHeader(List _transactionGroup)
    {
        ListEnumerator transactionEnumerator = _transactionGroup.getEnumerator();
        transactionEnumerator.moveNext();
        container transactionPair = transactionEnumerator.current();
        LedgerJournalTrans paymentTransaction;
        BankAccountTrans bankTransaction;
        [paymentTransaction, bankTransaction] = transactionPair;
        boolean advancedBankReconciliationEnabled = BankAccountTable::isAdvancedBankReconciliationEnabled(bankTransaction.AccountId);
        boolean removeCustVendPaymDocument = BankTransSummarizationRemoveDocWithTypeElecPaymFlight::instance().isEnabled();

        BankTransSummarizationDocument documentHeader;
        documentHeader.SummarizationId = this.generateSummarizationId(paymentTransaction, bankTransaction);
        documentHeader.AccountId = bankTransaction.AccountId;
        documentHeader.BankCurrencyCode = bankTransaction.CurrencyCode;
        documentHeader.TransCurrencyCode = bankTransaction.BankTransCurrencyCode;
        documentHeader.BankTransType = bankTransaction.BankTransType;
        documentHeader.PaymReference = bankTransaction.PaymReference;
        documentHeader.TransDate = bankTransaction.TransDate;
        documentHeader.PaymMode = bankTransaction.PaymentMode;
        if (paymentTransaction.AccountType != LedgerJournalACType::Bank)
        {
            documentHeader.RelatedPartyType = this.convertPaymAccountTypeToPartyType(paymentTransaction.AccountType);
        }
        else
        {
            documentHeader.RelatedPartyType = this.convertPaymAccountTypeToPartyType(paymentTransaction.OffsetAccountType);
        }

        List bankDocumentsToRemove = new List(Types::Record);
        transactionEnumerator.reset();
        while (transactionEnumerator.moveNext())
        {
            transactionPair = transactionEnumerator.current();
            bankTransaction = conPeek(transactionPair, 2);

            if (advancedBankReconciliationEnabled && removeCustVendPaymDocument)
            {
                BankDocumentTable bankDocumentTable = bankTransaction.getBankDocumentTable();
                if (bankdocumentTable
                    && (bankDocumentTable.BankDocumentBookType == BankDocumentBookType::CustPayment
                        || bankDocumentTable.BankDocumentBookType == BankDocumentBookType::VendPayment))
                {
                    bankDocumentsToRemove.addEnd(bankDocumentTable);
                }
            }

            documentHeader.AccountingCurrencyAmount += bankTransaction.AmountMST;
            documentHeader.BankAmountCur += bankTransaction.AmountCur;
            documentHeader.ReportingCurrencyAmount += bankTransaction.AmountReportingCurrency;
            documentHeader.TransAmountCur += bankTransaction.BankTransAmountCur;
        }

        ttsbegin;
        documentHeader.insert();
        if (removeCustVendPaymDocument)
        {
            this.removeExistingBankDocuments(bankDocumentsToRemove.getEnumerator());
        }
        ttscommit;

        summarizationIdSeq.used();

        return documentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeExistingBankDocuments</Name>
				<Source><![CDATA[
    private void removeExistingBankDocuments(ListEnumerator _bankDocumentsToRemove)
    {
        while (_bankDocumentsToRemove.moveNext())
        {
            BankDocumentTable bankDocumentTable = _bankDocumentsToRemove.current();
            bankDocumentTable.selectForUpdate(true);
            bankDocumentTable.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateBankDocument</Name>
				<Source><![CDATA[
    private void generateBankDocument(BankTransSummarizationDocument _summarizationDocument)
    {
        BankDocumentProcessor::submitBankDocumentTable(_summarizationDocument);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocumentLines</Name>
				<Source><![CDATA[
    // The actual type of the second parameter should be List<Container<LedgerJournalTrans, BankAccountTrans>>.
    private void generateDocumentLines(BankTransSummarizationDocument _summarizationDocument, List _transactionGroup)
    {
        RecordInsertList documentLines = new RecordInsertList(tableNum(BankTransSummarizationLine));
        ListEnumerator transactionEnumerator = _transactionGroup.getEnumerator();
        while (transactionEnumerator.moveNext())
        {
            LedgerJournalTrans paymentTransaction;
            BankAccountTrans bankTransaction;
            [paymentTransaction, bankTransaction] = transactionEnumerator.current();
            documentLines.add(this.generateDocumentLine(_summarizationDocument.RecId, _summarizationDocument.SummarizationId, paymentTransaction, bankTransaction));
        }
        ttsbegin;
        documentLines.insertDatabase();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDocumentLine</Name>
				<Source><![CDATA[
    private BankTransSummarizationLine generateDocumentLine(RecId _documentRecId, BankTransSummarizationID _summarizationId, LedgerJournalTrans _paymentTransaction, BankAccountTrans _bankTransaction)
    {
        BankTransSummarizationLine documentLine;
        documentLine.BankTransSummarizationDocument = _documentRecId;
        documentLine.SummarizationId = _summarizationId;
        documentLine.AccountId = _bankTransaction.AccountId;
        documentLine.AccountingCurrencyAmount = _bankTransaction.AmountMST;
        documentLine.BankAmountCur = _bankTransaction.AmountCur;
        documentLine.BankCurrencyCode = _bankTransaction.CurrencyCode;
        documentLine.BankTransType = _bankTransaction.BankTransType;
        documentLine.PaymReference = _bankTransaction.PaymReference;
        documentLine.TransCurrencyCode = _bankTransaction.BankTransCurrencyCode;
        documentLine.TransAmountCur = _bankTransaction.BankTransAmountCur;
        documentLine.TransDate = _bankTransaction.TransDate;
        documentLine.ReportingCurrencyAmount = _bankTransaction.AmountReportingCurrency;
        documentLine.PaymMode = _bankTransaction.PaymentMode;
        documentLine.PaymRecId = _paymentTransaction.RecId;
        documentLine.DefaultDimension = _bankTransaction.DefaultDimension;
        documentLine.Voucher = _bankTransaction.Voucher;
        documentLine.Txt = _bankTransaction.Txt;

        if (_paymentTransaction.AccountType != LedgerJournalACType::Bank)
        {
            documentLine.CustVendAccountType = this.convertPaymAccountTypeToCustVend(_paymentTransaction.AccountType);
            documentLine.CustVendAccount = _paymentTransaction.parmAccount();
            documentLine.PaymCompany = _paymentTransaction.Company;
        }
        else
        {
            documentLine.CustVendAccountType = this.convertPaymAccountTypeToCustVend(_paymentTransaction.OffsetAccountType);
            documentLine.CustVendAccount = _paymentTransaction.parmOffsetAccount();
            documentLine.PaymCompany = _paymentTransaction.OffsetCompany;
        }

        if (documentLine.CustVendAccountType == CustVendACType::Cust)
        {
            documentLine.CustVendTransTableId = tableNum(CustTrans);
            documentLine.CustVendTransRecId = _paymentTransaction.CustTransId;
        }
        else
        {
            documentLine.CustVendTransTableId = tableNum(VendTrans);
            documentLine.CustVendTransRecId = _paymentTransaction.VendTransId;
        }

        return documentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPaymAccountTypeToCustVend</Name>
				<Source><![CDATA[
    private CustVendACType convertPaymAccountTypeToCustVend(LedgerJournalACType _paymentType)
    {
        CustVendACType custVendACType;
        switch (_paymentType)
        {
            case LedgerJournalACType::Cust:
                custVendACType = CustVendACType::Cust;
                break;
            case LedgerJournalACType::Vend:
                custVendACType = CustVendACType::Vend;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return custVendACType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertPaymAccountTypeToPartyType</Name>
				<Source><![CDATA[
    private DirPartyRoleType convertPaymAccountTypeToPartyType(LedgerJournalACType _paymentType)
    {
        DirPartyRoleType partyType;
        switch (_paymentType)
        {
            case LedgerJournalACType::Cust:
                partyType = DirPartyRoleType::Customer;
                break;
            case LedgerJournalACType::Vend:
                partyType = DirPartyRoleType::Vendor;
                break;
            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }
        return partyType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateSummarizationId</Name>
				<Source><![CDATA[
    private BankTransSummarizationID generateSummarizationId(LedgerJournalTrans _paymentTransaction, BankAccountTrans _bankTransaction)
    {
        BankTransSummarizationID summarizationId = '';
        FieldId sourceFieldId = this.getSummarizationIdSourceFieldId();

        if (sourceFieldId != 0)
        {
            summarizationId = _paymentTransaction.(sourceFieldId);
            if (BankTransSummarizationDocument::findById(_bankTransaction.AccountId, summarizationId))
            {
                summarizationId = '';
            }
        }
        if (summarizationId == '')
        {
            summarizationId = summarizationIdSeq.num();
            while (BankTransSummarizationDocument::findById(_bankTransaction.AccountId, summarizationId))
            {
                summarizationIdSeq.used();
                summarizationId = summarizationIdSeq.num();
            }
        }
        return summarizationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resultGenerated</Name>
				<Source><![CDATA[
    private boolean resultGenerated()
    {
        return this.documentTransPairsList != null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>