<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerTrialBalanceDetailReportProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes the report parameters and the query to get the report data.
/// </summary>
internal final class LedgerTrialBalanceDetailReportProcessor
{
    private LedgerTransactionReportDataParameters ledgerTransactionReportDataParameters;
    private LedgerTransactionReportDataGenerator ledgerTransactionReportDataGenerator;
    private str mainAccountFilterValues;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newByLedgerTrialBalanceParameters</Name>
				<Source><![CDATA[
    internal static LedgerTrialBalanceDetailReportProcessor newByLedgerTrialBalanceParameters(LedgerTrialBalanceDetailERContract _contract)
    {
        LedgerTrialBalanceDetailReportProcessor ledgerTrialBalanceProcessor = new LedgerTrialBalanceDetailReportProcessor();

        ledgerTrialBalanceProcessor.initializeParameters(_contract);

        return ledgerTrialBalanceProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParameters</Name>
				<Source><![CDATA[
    internal void initializeParameters(LedgerTrialBalanceDetailERContract _contract)
    {
        ledgerTransactionReportDataParameters = LedgerTransactionReportDataParameters::construct();

        ledgerTransactionReportDataParameters.parmFromDate(_contract.parmFromDate());
        ledgerTransactionReportDataParameters.parmToDate(_contract.parmToDate());
        ledgerTransactionReportDataParameters.parmPrimaryDimensionFocus(_contract.parmPrimaryDimensionFocus());
        ledgerTransactionReportDataParameters.parmShowTransactions(_contract.parmShowTransactions());
        ledgerTransactionReportDataParameters.parmIncludeOpening(_contract.parmIncludeOpening());
        ledgerTransactionReportDataParameters.parmIncludeClosing(_contract.parmIncludeClosing());
        ledgerTransactionReportDataParameters.parmPostingLayer(_contract.parmPostingLayer());
        ledgerTransactionReportDataParameters.parmIncludePendingAdvancedLedgerEntry(_contract.parmIncludePendingAdvancedLedgerEntry());
        ledgerTransactionReportDataParameters.parmIncludePendingAllocation(_contract.parmIncludePendingAllocation());
        ledgerTransactionReportDataParameters.parmIncludePendingBudgetRegisterEntry(_contract.parmIncludePendingBudgetRegisterEntry());
        ledgerTransactionReportDataParameters.parmIncludePendingBudget(_contract.parmIncludePendingBudget());
        ledgerTransactionReportDataParameters.parmIncludePendingCustPay(_contract.parmIncludePendingCustPay());
        ledgerTransactionReportDataParameters.parmIncludePendingDaily(_contract.parmIncludePendingDaily());
        ledgerTransactionReportDataParameters.parmIncludePendingFreeTextInvoice(_contract.parmIncludePendingFreeTextInvoice());
        ledgerTransactionReportDataParameters.parmIncludePendingPayment(_contract.parmIncludePendingPayment());
        ledgerTransactionReportDataParameters.parmIncludePendingPurchaseOrder(_contract.parmIncludePendingPurchaseOrder());
        ledgerTransactionReportDataParameters.parmIncludePendingPurchReq(_contract.parmIncludePendingPurchReq());
        ledgerTransactionReportDataParameters.parmIncludePendingProjInvoice(_contract.parmIncludePendingProjInvoice());
        ledgerTransactionReportDataParameters.parmIncludePendingVendorInvoiceJournal(_contract.parmIncludePendingVendorInvoiceJournal());
        ledgerTransactionReportDataParameters.parmIncludePendingVendorInvoiceRegister(_contract.parmIncludePendingVendorInvoiceRegister());
        ledgerTransactionReportDataParameters.parmIncludePendingVendorInvoice(_contract.parmIncludePendingVendorInvoice());

        // Initial other sub process instance
        ledgerTransactionReportDataGenerator = LedgerTransactionReportDataGenerator::newFromReportParameters(ledgerTransactionReportDataParameters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateTrialBalanceTransactionData</Name>
				<Source><![CDATA[
    internal void generateTrialBalanceTransactionData(Query _query)
    {
        this.retrieveTrialBalanceDetail(_query);

        ledgerTransactionReportDataGenerator.updateTransactionDataAndSummarizeDetailWithNameDescription(mainAccountFilterValues);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransactionsDetailData</Name>
				<Source><![CDATA[
    internal LedgerTrialBalanceDetailTmp getLedgerTransactionsDetailData()
    {
        return ledgerTransactionReportDataGenerator.getTrialBalanceDetailData();
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveTrialBalanceDetail</Name>
				<Source><![CDATA[
    private void retrieveTrialBalanceDetail(Query _query)
    {
        if (ledgerTransactionReportDataParameters.parmShowTransactions() == LedgerTrialBalanceShowTransactionStates::All
            || ledgerTransactionReportDataParameters.parmShowTransactions() == LedgerTrialBalanceShowTransactionStates::Posted)
        {
            this.generateDetailFromGeneralJournal(_query);
        }

        if (ledgerTransactionReportDataParameters.parmShowTransactions() == LedgerTrialBalanceShowTransactionStates::All
            || ledgerTransactionReportDataParameters.parmShowTransactions() == LedgerTrialBalanceShowTransactionStates::Unposted)
        {
            ledgerTransactionReportDataGenerator.prepareDetailFromUnpostedDocumentTransaction();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateDetailFromGeneralJournal</Name>
				<Source><![CDATA[
    private void generateDetailFromGeneralJournal(Query _query)
    {
        QueryBuildDataSource queryDataSourceGeneralJournalEntry = _query.dataSourceTable(tableNum(GeneralJournalEntry));
        queryDataSourceGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(
            SysQuery::range(ledgerTransactionReportDataParameters.parmFromDate(), ledgerTransactionReportDataParameters.parmToDate(), true));
        queryDataSourceGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));
        queryDataSourceGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, PostingLayer)).value(enum2Str(ledgerTransactionReportDataParameters.parmPostingLayer()));

        queryDataSourceGeneralJournalEntry.addOrderByField(fieldNum(GeneralJournalEntry, AccountingDate),SortOrder::Ascending);

        QueryBuildDataSource queryDataSourceFiscalCalendarPeriod = queryDataSourceGeneralJournalEntry.addDataSource(tableNum(FiscalCalendarPeriod));
        queryDataSourceFiscalCalendarPeriod.fetchMode(QueryFetchMode::One2One);
        queryDataSourceFiscalCalendarPeriod.joinMode(JoinMode::InnerJoin);
        queryDataSourceFiscalCalendarPeriod.addLink(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod), fieldnum(FiscalCalendarPeriod, RecId));
        queryDataSourceFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Operating));

        QueryBuildDataSource queryDataSourceMainAccount = _query.dataSourceTable(tableNum(MainAccount));
        QueryFilter queryFilter = SysQuery::findOrCreateQueryFilter(_query, queryDataSourceMainAccount, fieldStr(MainAccount, MainAccountId));
        mainAccountFilterValues = queryFilter.value();

        if (ledgerTransactionReportDataParameters.parmIncludeOpening())
        {
            queryDataSourceFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Opening));
        }

        if (ledgerTransactionReportDataParameters.parmIncludeClosing())
        {
            queryDataSourceFiscalCalendarPeriod.addRange(fieldNum(FiscalCalendarPeriod, Type)).value(SysQuery::value(FiscalPeriodType::Closing));
        }

        QueryRun queryRun = new queryRun(_query);

        while (queryRun.next())
        {
            ledgerTransactionReportDataGenerator.addGeneralLedgerDataToInsertList(
                queryRun.get(tableNum(GeneralJournalEntry)),
                queryRun.get(tableNum(GeneralJournalAccountEntry)));
        }

        ledgerTransactionReportDataGenerator.insertTransactionDetailData();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>