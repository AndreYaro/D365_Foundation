<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailUpdateLoyaltyCardTiersJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class <c>RetailEvaluateCardTiersJob</c> is used to update loyalty card tiers.
/// </summary>
class RetailUpdateLoyaltyCardTiersJob extends RunBaseBatch implements BatchRetryable
{
    public static str RetailUpdateLoyaltyCardTiersJobBatchBlockSizeKey = "RetailUpdateLoyaltyCardTiersJobBatchBlockSize";

    #define.RetryNum(3)
    BatchHeader                         batchHeader;
    RetailUpdateLoyaltyCardTiersTask    updateTask;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        try
        {
            ttsBegin;

            // Update card tiers based on card number and trans entry date in trans table
            this.updateLoyaltyCardTiers();

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSharedParameterByKey</Name>
				<Source><![CDATA[
    private int getSharedParameterByKey(str _key, int _defaultValue)
    {
        RetailSharedConfigurationParameters parameter = RetailSharedConfigurationParameters::findByName(_key);
        if (!parameter.RecId || !isInteger(parameter.Value))
        {
            return _defaultValue;
        }

        var blockSize = str2Int(parameter.Value);

        if (blockSize <= 0)
        {
            return _defaultValue;
        }

        return blockSize;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ScheduleTask</Name>
				<Source><![CDATA[
    private void ScheduleTask(RecId _fromCardRecId, RecId _toCardRecId, date _today)
    {
        /* Each task is created to process a bundle of work items (in this case a range of loyalty Cards)*/
        updateTask = RetailUpdateLoyaltyCardTiersTask::construct(_fromCardRecId, _toCardRecId, _today);
        if (this.isInBatch())
        {
            if (!batchHeader)
            {
                batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);
            }

            // When recurrence executing this batch job, every sub task must compound to the batch job by its RecId.
            batchHeader.addRuntimeTask(updateTask, this.parmCurrentBatch().RecId);
        }
        else
        {
            updateTask.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoyaltyCardTiers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update loyalty card tiers for all loyalty cards based on the current loyalty configuraiton.
    /// </summary>
    private void updateLoyaltyCardTiers()
    {
        RetailLoyaltyCard                   loyaltyCard;
        RecId                               fromCardRecId, toCardRecId, lastCardRecId;
        int                                 counter = 0;
        int                                 blockSize = 100;
        date                                todayDate = DateTimeUtil::date(DateTimeUtil::utcNow());
        select count(RecId) from loyaltyCard;

        blockSize = this.getSharedParameterByKey(RetailUpdateLoyaltyCardTiersJobBatchBlockSizeKey, blockSize);

        if (loyaltyCard.RecId)
        {
            while select RecId from loyaltyCard order by loyaltyCard.RecId asc
            {
                counter += 1;
                if (counter == 1)
                {
                    fromCardRecId = loyaltyCard.RecId;
                }
                if (counter == blockSize)
                {
                    toCardRecId = loyaltyCard.RecId;
                    this.ScheduleTask(fromCardRecId, toCardRecId, todayDate);
                    counter = 0;
                }
                lastCardRecId = loyaltyCard.RecId;
            }

            if (counter > 0)
            {
                this.ScheduleTask(fromCardRecId, lastCardRecId, todayDate);
                counter = 0;
            }

            if (batchHeader)
            {
                batchHeader.save();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@REX4160885";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailUpdateLoyaltyCardTiersJob scheduler = new RetailUpdateLoyaltyCardTiersJob();

        if (scheduler.prompt())
        {
            scheduler.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns a value indicating if the <c>RetailUpdateLoyaltyCardTiersJob</c>
    /// class can be run in a new session.
    /// </summary>
    /// <returns>true if the the class <c>RetailUpdateLoyaltyCardTiersJob</c> can
    /// be run in a new session; otherwise, false.</returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>