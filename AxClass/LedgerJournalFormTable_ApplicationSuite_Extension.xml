<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalFormTable_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class complements the standard logic of ledger journal form by adding range to journals query to filter simulation journals from other daily journals.
/// </summary>
[ExtensionOf(classStr(LedgerJournalFormTable))]
public final class LedgerJournalFormTable_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>queryAddRange</Name>
				<Source><![CDATA[
    public void queryAddRange()
    {
        next queryAddRange();

        if (FeatureStateProvider::isFeatureEnabled(GeneralLedgerSimulationsFeature::instance()))
        {
            FormDataSource ds = this.journalTable_ds();
            FormDataSource mds = ds.MasterInheritanceDataSource();
            Query query = mds.query();

            if (query.name() != queryStr(SimulationJournals_IT))
            {
                if (GeneralLedgerSimulationsJournalNameRelationshipFlight::instance().isEnabled())
                {
                    QueryBuildDataSource qbdsLedgerJournalTable = journalTable_ds.query().dataSourceTable(tableNum(LedgerJournalTable));

                    if (qbdsLedgerJournalTable)
                    {
                        QueryBuildDataSource qbdsLedgerjournalname = qbdsLedgerJournalTable.addDataSource(tableNum(LedgerJournalName));
                        qbdsLedgerjournalname.relations(true);
                        qbdsLedgerjournalname.joinMode(JoinMode::InnerJoin);
                
                        QueryBuildRange qbrIsSimulation = qbdsLedgerjournalname.addRange(fieldNum(LedgerJournalName, IsSimulation_IT));
                        qbrIsSimulation.value(enum2str(NoYes::No));
                        qbrIsSimulation.status(RangeStatus::Locked);
                    }
                    else
                    {
                        throw error(Error::wrongUseOfFunction(funcname()));
                    }
                }
                else
                {
                    QueryBuildDataSource qbdsLedgerjournalname = journalTable_ds.query().dataSourceNo(1).addDataSource(tableNum(LedgerJournalName));
                    qbdsLedgerjournalname.relations(true);
                    qbdsLedgerjournalname.joinMode(JoinMode::InnerJoin);
                
                    QueryBuildRange qbrIsSimulation = qbdsLedgerjournalname.addRange(fieldNum(LedgerJournalName, IsSimulation_IT));
                    qbrIsSimulation.value(enum2str(NoYes::No));
                    qbrIsSimulation.status(RangeStatus::Locked);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>verifyCanDelete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add validation journal type before deleting journal header.
    /// </summary>
    /// <param name = "_suppressPrompt">A flag to show or hide the delete journal prompt.</param>
    /// <returns>Return the result of validation.</returns>
    public boolean verifyCanDelete(boolean _suppressPrompt)
    {
        boolean ret = next verifyCanDelete(_suppressPrompt);

        if (ret)
        {
            LedgerJournalTable ledgerJournalTable = journalTable;
            
            if(ledgerJournalTable.JournalType == LedgerJournalType::RCash
                && !ledgerJournalTable.canDeleteJournal())
            {
                ret = checkFailed(strFmt("@LedgerTranslation:ApprovedJournalDeleteValidation", ledgerJournalTable.JournalNum));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>