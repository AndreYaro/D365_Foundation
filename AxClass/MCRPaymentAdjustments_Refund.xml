<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRPaymentAdjustments_Refund</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRPaymentAdjustments_Refund</c> adjusts payments
/// when an orders total sales amount changes and a refund is required.
/// </summary>
public class MCRPaymentAdjustments_Refund extends MCRPaymentAdjustments
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAmtToRefund</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the amount to be refunded.
    /// </summary>
    /// <param name="_amtChanged">
    /// The amount that has been changed.
    /// </param>
    /// <param name="_mcrCustPaymTable">
    /// The <c>MCRCustPaymTable</c> record used to determine the amount to be refunded.
    /// </param>
    /// <param name="_adjust">
    /// A <c>boolean</c> that determines whether the amount to be refunded should be
    /// retrieved from the <c>MCRCustPaymTable</c> table; optional.
    /// </param>
    /// <returns>
    /// The amount to be refunded.
    /// </returns>
    public AmountCur getAmtToRefund(AmountCur _amtChanged,
                            MCRCustPaymTable _mcrCustPaymTable,
                            boolean _adjust = true)
    {
        AmountCur amtToRefund = 0;

        if (_adjust)
        {
            if (MCRPaymentAdjustmentsCalculateRelatedRefundPaymentsFlight::instance().isEnabled())
            {
                if (_mcrCustPaymTable.Status == MCRCustPaymStatus::NotSubmitted ||
                    _mcrCustPaymTable.Status == MCRCustPaymStatus::Authorized)
                {
                    amtToRefund = _mcrCustPaymTable.getAvailableAmountForRefund();
                }
                else
                {
                    amtToRefund = _mcrCustPaymTable.getUnpostedAmount();
                }
            }
            else
            {
                amtToRefund = _mcrCustPaymTable.getUnpostedAmount();
            }
        }
        else
        {
            if (MCRPaymentAdjustmentsCalculateRelatedRefundPaymentsFlight::instance().isEnabled())
            {
                amtToRefund = _mcrCustPaymTable.getAvailableAmountForRefund();
            }
            else
            {
                amtToRefund = _mcrCustPaymTable.PostedAmount;
            }
        }
        
        if (abs(amtToRefund) > _amtChanged)
        {
            amtToRefund = _amtChanged;
        }

        return amtToRefund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class variable with the passed in information.
    /// </summary>
    /// <param name="_beforePaymAmount">
    /// The payment amount before adjustments.
    /// </param>
    /// <param name="_salesTable">
    /// The sales table transaction.
    /// </param>
    /// <param name="_mcrSalesOrderTotals">
    /// The order totals of the transaction.
    /// </param>
    /// <param name="_currentOrderAmt">
    /// The amount that is on the current order.
    /// </param>
    /// <param name="_amtChanged">
    /// The amount that has changed.
    /// </param>
    void new(AmountCur _beforePaymAmount,
            SalesTable _salesTable,
            MCRSalesOrderTotals  _mcrSalesOrderTotals,
            AmountCur           _currentOrderAmt,
            AmountCur           _amtChanged)
    {
        super(_beforePaymAmount, _salesTable, _mcrSalesOrderTotals, _currentOrderAmt, _amtChanged);
        paymAdjustmentType = MCRPaymAdjustmentType::Refund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCCAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the adjusted credit card amount.
    /// </summary>
    /// <param name="_amtChanged">
    /// The amount that has been changed.
    /// </param>
    /// <param name="_adjust">
    /// A <c>boolean</c> that determines whether the <c>MCRCustPaymTable</c> should be updated.
    /// </param>
    /// <returns>
    /// The adjusted, processed credit card amount.
    /// </returns>
    public AmountCur processCCAdjustments(AmountCur _amtChanged,
                                    boolean _adjust)
    {
        MCRCustPaymTable         mcrCustPaymTable;
        AmountCur                amtToRefund = 0;

        boolean refundFlight = RetailCreateProperRefundOnSalesLineCancellationFlight::instance().isEnabled();

        // We should only, loop for positive posted amounts.
        // Because we cannot process/create a refund record based on transaction with negative posted amount.
        while select forupdate mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == salesTable.TableId
                && mcrCustPaymTable.RefRecId == salesTable.RecId
                && mcrCustPaymTable.CustPaymType == MCRCustPaymType::CreditCard
                && (!refundFlight || (refundFlight && mcrCustPaymTable.PostedAmount >= 0))
        {
            if (_amtChanged)
            {
                amtToRefund = abs(this.getAmtToRefund(_amtChanged, mcrCustPaymTable, _adjust));

                if (amtToRefund)
                {
                    _amtChanged -= amtToRefund;
                    if (_adjust)
                    {
                        ttsBegin;
                        mcrCustPaymTable.Amount -= amtToRefund;
                        mcrCustPaymTable.update();
                        ttsCommit;
                    }
                    else
                    {
                        MCRCustPaymTable mcrCustPaymTableLoc;

                        //This validation is added to check whether customer payment has original/approved credit card authorization
                        //We will fetch original customer payment, if validation fails.
                        if (!CreditCardAuthTrans::mcrFindCharge(mcrCustPaymTable.RecId))
                        {
                            mcrCustPaymTableLoc = MCRCustPaymTable::findOriginalAuthorization(salesTable);
                        }

                        if(!mcrCustPaymTableLoc)
                        {
                            mcrCustPaymTableLoc = mcrCustPaymTable;
                        }

                        MCRCustPaymTable::writePaymentAdjustmentSales(mcrCustPaymTableLoc, -amtToRefund, paymAdjustmentType);
                    }
                }
            }
            else
            {
                return 0;
            }
        }

        return _amtChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCheckCashAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the adjusted check or cash amount.
    /// </summary>
    /// <param name="_amtChanged">
    /// The amount that has changed.
    /// </param>
    /// <param name="_adjust">
    /// A <c>boolean</c> that determines whether the amount should be updated to the
    /// <c>MCRCustPaymTable</c> record.
    /// </param>
    /// <returns>
    /// The adjusted check or cash amount.
    /// </returns>
    public AmountCur processCheckCashAdjustments(AmountCur _amtChanged,
                                            boolean _adjust)
    {
        MCRCustPaymTable        mcrCustPaymTable;
        AmountCur               amtToRefund = 0;
        AmountCur               retAmount = 0;

        ttsBegin;

        while select forupdate mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == salesTable.TableId
                && mcrCustPaymTable.RefRecId == salesTable.RecId
                && (mcrCustPaymTable.CustPaymType == MCRCustPaymType::Cash
                    || mcrCustPaymTable.CustPaymType == MCRCustPaymType::Check)
        {
            if (_amtChanged)
            {
                retAmount = this.getAmtToRefund(_amtChanged, mcrCustPaymTable, _adjust);

                if (_adjust)
                {
                    mcrCustPaymTable.Amount -= retAmount;
                    mcrCustPaymTable.update();
                }

                amtToRefund += retAmount;
                _amtChanged -= retAmount;
            }
        }
        ttsCommit;

        if (!_adjust)
        {
            MCRCustPaymTable::createPrepayAdjustments(salesTable, -amtToRefund, paymAdjustmentType);
        }

        return _amtChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processGiftCardPaymAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes adjusted gift card payments.
    /// </summary>
    /// <param name="_amtChanged">
    /// The amount that has been changed.
    /// </param>
    /// <param name="_adjust">
    /// A <c>boolean</c> that determines whether the
    /// <c>MCRCustPaymTable</c> should be updated.
    /// </param>
    /// <returns>
    /// The adjusted gift card amount.
    /// </returns>
    public AmountCur processGiftCardPaymAdjustments(AmountCur _amtChanged,
                                            boolean _adjust)
    {
        MCRCustPaymTable         mcrCustPaymTable;
        AmountCur                amtToRefund = 0;

        while select forupdate mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == salesTable.TableId
                && mcrCustPaymTable.RefRecId == salesTable.RecId
                && mcrCustPaymTable.CustPaymType == MCRCustPaymType::GiftCard
        {
            if (_amtChanged)
            {
                amtToRefund = this.getAmtToRefund(_amtChanged, mcrCustPaymTable, _adjust);

                if (amtToRefund)
                {
                    _amtChanged -= amtToRefund;
                    if (_adjust)
                    {
                        ttsBegin;
                        mcrCustPaymTable.Amount -= amtToRefund;
                        mcrCustPaymTable.update();
                        ttsCommit;
                    }
                    else
                    {
                        if (mcrCustPaymTable.isExternalGiftCardPayment())
                        {
                            warning(strFmt('@Retail:RefundCannotBeAppliedExternalGiftCard', mcrCustPaymTable.CurrencyCode, amtToRefund));
                            MCRSalesLine::addExternalGiftCardItemWithAmount(mcrCustPaymTable, amtToRefund);
                        }
                        else
                        {
                            MCRCustPaymTable::writePaymentAdjustmentSales(mcrCustPaymTable, -amtToRefund, paymAdjustmentType);
                        }
                    }
                }
            }
            else
            {
                return 0;
            }
        }

        return _amtChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLoyaltyCardPaymAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes adjusted loyalty card payments.
    /// </summary>
    /// <param name="_amtChanged">
    /// The amount that has been changed.
    /// </param>
    /// <param name="_adjust">
    /// A <c>boolean</c> that determines whether the
    /// <c>MCRCustPaymTable</c> should be updated.
    /// </param>
    /// <returns>
    /// The adjusted Loyalty card amount.
    /// </returns>
    public AmountCur processLoyaltyCardPaymAdjustments(AmountCur _amtChanged, boolean _adjust)
    {
        MCRCustPaymTable         mcrCustPaymTable;
        AmountCur                amtToRefund = 0;

        // Find if there is already an authorized payment record - created by Cancel line or reduced line quantity scenario(update delivery remainder)
        select firstonly mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == salesTable.TableId
                && mcrCustPaymTable.RefRecId == salesTable.RecId
            && mcrCustPaymTable.CustPaymType == MCRCustPaymType::LoyaltyCard
            && MCRCustPaymTable.Status == MCRCustPaymStatus::Authorized;

        if (mcrCustPaymTable)
        {
            if (abs(mcrCustPaymTable.Amount) >= _amtChanged)
            {
                amtToRefund = _amtChanged;
            }
            else
            {
                amtToRefund = abs(MCRCustPaymTable.Amount);
            }
            return _amtChanged - amtToRefund;
        }
        else
        {
            while select forupdate mcrCustPaymTable
                where mcrCustPaymTable.RefTableId == salesTable.TableId
                    && mcrCustPaymTable.RefRecId == salesTable.RecId
                    && mcrCustPaymTable.CustPaymType == MCRCustPaymType::LoyaltyCard
            {
                if (_amtChanged)
                {
                    amtToRefund = this.getAmtToRefund(_amtChanged, mcrCustPaymTable, _adjust);

                    if (amtToRefund)
                    {
                        _amtChanged -= amtToRefund;
                        if (_adjust)
                        {
                            ttsBegin;
                            mcrCustPaymTable.Amount -= amtToRefund;
                            mcrCustPaymTable.update();
                            ttsCommit;
                        }
                        else
                        {
                            MCRCustPaymTable::writePaymentAdjustmentSales(mcrCustPaymTable, -amtToRefund, paymAdjustmentType);
                        }
                    }
                }
                else
                {
                    return 0;
                }
            }

            return _amtChanged;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processMultipleAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes two or more adjustments to the payment amount.
    /// </summary>
    public void processMultipleAdjustments()
    {
        AmountCur               amountToRefund;

        amountToRefund = amtChanged;

        if (amountToRefund)
        {
            amountToRefund = this.processOnAcctAdjustments(amountToRefund);
        }
        if (amountToRefund)
        {
            amountToRefund = this.processCCAdjustments(amountToRefund, true);
        }
        if (amountToRefund)
        {
            amountToRefund = this.processCheckCashAdjustments(amountToRefund, true);
        }
        if (amountToRefund)
        {
            amountToRefund = this.processGiftCardPaymAdjustments(amountToRefund, true);
        }
        if (amountToRefund)
        {
            amountToRefund = this.processLoyaltyCardPaymAdjustments(amountToRefund, true);
        }
        if (amountToRefund)
        {
            amountToRefund = this.processCCAdjustments(amountToRefund, false);
        }
        if (amountToRefund)
        {
            amountToRefund = this.processCheckCashAdjustments(AmountToRefund, false);
        }
        if (amountToRefund)
        {
            amountToRefund = this.processGiftCardPaymAdjustments(AmountToRefund, false);
        }
        if (amountToRefund)
        {
            amountToRefund = this.processLoyaltyCardPaymAdjustments(amountToRefund, false);
        }

        // If the system cannot refund the full amount inform the user
        if (amountToRefund)
        {
            error("@MCR39950");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processOnAcctAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects an on account payment if one exists and adjusts the amount.
    /// </summary>
    /// <param name="_amtChanged">
    /// The amount to be adjusted by.
    /// </param>
    /// <returns>
    /// The changed amount.
    /// </returns>
    public AmountCur processOnAcctAdjustments(AmountCur _amtChanged)
    {
        AmountCur           amtToRefund = 0;
        MCRCustPaymTable    mcrCustPaymTable;

        select firstonly forupdate mcrCustPaymTable
            where mcrCustPaymTable.RefTableId == salesTable.TableId
                && mcrCustPaymTable.RefRecId == salesTable.RecId
                && mcrCustPaymTable.CustPaymType == MCRCustPaymType::OnAccount;

        if (mcrCustPaymTable)
        {
            ttsBegin;

            if (mcrCustPaymTable.Amount >= _amtChanged)
            {
                amtToRefund = _amtChanged;
            }
            else
            {
                amtToRefund = MCRCustPaymTable.Amount;
            }

            mcrCustPaymTable.Amount -= amtToRefund;
            mcrCustPaymTable.update();

            ttsCommit;
        }

        return _amtChanged - amtToRefund;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPaymentAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if there is more than one payment and processes the adjustments to be made.
    /// </summary>
    public void processPaymentAdjustments()
    {
        MCRCustPaymTable    mcrCustPaymTable;
        MCRCustPaymTotals   mcrCustPaymTotals;
        boolean             callSetTransStatus = true;

        super();

        mcrCustPaymTable = MCRCustPaymTable::findByRefRecIDRefTableID(salesTable.RecId, salesTable.TableId, true);

        // Only call payment adjustments if payments exist.
        // [BUG] if there are multiple payments, a payment that has already been canceled may be selected. 
        // in this case, for another payments, the refund must be made.
        if ((mcrCustPaymTable && mcrCustPaymTable.Amount != 0)
            || (MCRPaymentAdjustmentsCalculateRelatedRefundPaymentsFlight::instance().isEnabled() &&
                MCRCustPaymTable::exists(salesTable.TableId, salesTable.RecId)))
        {
        // [END BUG]
            // check if the change in amount is under the max, if it is skip this all together
            // Only if the difference is below the penny limit we should not adjust the payments otherwise we should.
            if (abs(amtChanged) > CustParameters::find().MaxMSTDiff)
            {
                // Check here to make sure that the custPaymRecord has not been adjusted and is
                // equal to the previous payment amount.
                if (this.hasMultiplePayments())
                {
                    this.processMultipleAdjustments();
                }
                else
                {
                    if (mcrCustPaymTable.Amount != currentOrderAmt && mcrCustPaymTable.Amount == beforePaymAmt)
                    {
                        // Call appropriate method to process single payments.
                        this.processSinglePaymAdjustments(mcrCustPaymTable);
                    }
                }

                mcrCustPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId, salesTable.RecId);
                
                // Refund payments should get processed.
                // When partially invoiced sales orders, gets completely invoiced.
                // Or when partially delivered sales orders, gets completely delivered.
                // On cancelling the remaining sales order.
                if (paymAdjustmentType != MCRPaymAdjustmentType::Refund ||
                    salesTable.SalesStatus == SalesStatus::Canceled ||
                    (paymAdjustmentType == MCRPaymAdjustmentType::Refund &&
                    (salesTable.SalesStatus == SalesStatus::Invoiced ||
                    (RetailProcessRefundPaymentGeneratedOnCancellingRemaingQuantityFlight::instance().isEnabled() && 
                    salesTable.SalesStatus == SalesStatus::Delivered))))
                {
                    mcrCustPaymTotals.processPayments(MCRProcessPaymAction::PostOnlyPrepays);
                }

                callSetTransStatus = false;
            }
        }

        // If no payments exist still set the status of the related order
        if (callSetTransStatus)
        {
            mcrCustPaymTotals = MCRCustPaymTotals::construct(salesTable.TableId, salesTable.RecId);
            mcrCustPaymTotals.setTransStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSinglePaymAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes single payment adjustments.
    /// </summary>
    /// <param name="_mcrCustPaymTable">
    /// The payment record associated with the transaction.
    /// </param>
    /// <remarks>
    ///  There is only one payment associated with the order
    ///     So to save time created a split in the functionality, despite
    ///     the fact that it could be done with one method.
    ///     The reasoning for this is that most orders are paid with
    ///     one payment, so it's must faster this way.
    /// </remarks>
    void processSinglePaymAdjustments(MCRCustPaymTable _mcrCustPaymTable)
    {
        switch (_mcrCustPaymTable.CustPaymType)
        {
            case MCRCustPaymType::OnAccount:

                this.processOnAcctAdjustments(amtChanged);
            break;

            case MCRCustPaymType::CreditCard:

                amtChanged = this.processCCAdjustments(amtChanged, true);
                if (amtChanged)
                {
                    this.processCCAdjustments(amtChanged, false);
                }
            break;

            case MCRCustPaymType::GiftCard:

                amtChanged = this.processGiftCardPaymAdjustments(amtChanged, true);
                if (amtChanged)
                    this.processGiftCardPaymAdjustments(amtChanged, false);
                break;
            case MCRCustPaymType::Cash:
            case MCRCustPaymType::Check:

                amtChanged = this.processCheckCashAdjustments(amtChanged, true);
                if (amtChanged)
                    this.processCheckCashAdjustments(amtChanged, false);
                break;
            case MCRCustPaymType::LoyaltyCard:

                amtChanged = this.processLoyaltyCardPaymAdjustments(amtChanged, true);
                if (amtChanged)
                    this.processLoyaltyCardPaymAdjustments(amtChanged, false);
                break;

            default:

                this.processSinglePaymAdjustmentsDefault(_mcrCustPaymTable);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSinglePaymAdjustmentsDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes single payment adjustments if additional element value specified for <c>MCRCustPaymType</c> enum.
    /// </summary>
    /// <param name = "_mcrCustPaymTable">
    /// The payment record associated with the transaction.
    /// </param>
    [Replaceable]
    protected  void processSinglePaymAdjustmentsDefault(MCRCustPaymTable _mcrCustPaymTable)
    {
        error("@MCR28859");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>