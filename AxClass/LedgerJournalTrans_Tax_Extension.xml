<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalTrans_Tax_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension methods for the <c>LedgerJournalTrans</c> class.
/// </summary>
public static class LedgerJournalTrans_Tax_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTaxOnVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the tax on voucher.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The tax amount.</returns>
    public static TaxAmountCur calcTaxOnVoucher(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTrans;
        TaxAmount           taxAmount;
        Sign                taxSign;

        while select ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == _ledgerJournalTrans.JournalNum
               && ledgerJournalTrans.Voucher    == _ledgerJournalTrans.Voucher
        {
            if (ledgerJournalTrans.isTaxable())
            {
                taxSign    = ledgerJournalTrans.amount() > 0 ? 1 : -1;
                taxAmount += taxSign * abs(ledgerJournalTrans.totalTaxAmountSingleLine(true, false, true));
            }
        }
        return abs(taxAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTaxCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the internal caches for tax amounts and corrected tax amounts of all ledger journal
    /// transactions with specified journal number.
    /// </summary>
    /// <param name="_journalNum">
    /// The ledger journal number
    /// </param>
    /// <param name="_ledgerJournalEngine">
    /// An instance of the ledger journal engine.
    /// </param>
    public static void clearTaxCache(
        LedgerJournalId     _journalNum,
        LedgerJournalEngine _ledgerJournalEngine)
    {
        LedgerJournalTrans  ledgerJournalTrans;

        while select ledgerJournalTrans
            where ledgerJournalTrans.JournalNum == _journalNum
        {
            _ledgerJournalEngine.clearTaxAmountCache(ledgerJournalTrans);
            _ledgerJournalEngine.clearCorrectedTaxAmount(ledgerJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomerInvoice</Name>
				<Source><![CDATA[
    // <GTE>
    /// <summary>
    /// Check whether this transaction is a customer invoice.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>True if this transaction is a customer invoice.</returns>
    public static boolean isCustomerInvoice(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans ledgerJournalTransDiff;
        LedgerJournalTrans ledgerJournalTransReread;

        if (_ledgerJournalTrans.RecId)
        {
            select firstOnly ledgerJournalTransReread
                where ledgerJournalTransReread.RecId == _ledgerJournalTrans.RecId;
        }
        else
        {
            ledgerJournalTransReread = _ledgerJournalTrans;
        }

        // Same row
        if ((ledgerJournalTransReread.AccountType == LedgerJournalACType::Cust
            && (ledgerJournalTransReread.OffsetAccountType == LedgerJournalACType::Ledger || ledgerJournalTransReread.OffsetAccountType == LedgerJournalACType::Project)
            && ledgerJournalTransReread.parmLedgerDimension())
            || ((ledgerJournalTransReread.AccountType == LedgerJournalACType::Ledger || ledgerJournalTransReread.AccountType == LedgerJournalACType::Project)
            && ledgerJournalTransReread.OffsetAccountType == LedgerJournalACType::Cust
            && ledgerJournalTransReread.parmLedgerDimension()))
        {
            return true;
        }

        // Different rows
        if ((ledgerJournalTransReread.AccountType == LedgerJournalACType::Ledger || ledgerJournalTransReread.AccountType == LedgerJournalACType::Project)
            && ledgerJournalTransReread.parmLedgerDimension()
            && !ledgerJournalTransReread.parmOffsetLedgerDimension())
        {
            select firstonly ledgerJournalTransDiff
                where ledgerJournalTransDiff.Voucher == ledgerJournalTransReread.Voucher
                    &&  ledgerJournalTransDiff.JournalNum == ledgerJournalTransReread.JournalNum
                    &&  ledgerJournalTransDiff.RecId != ledgerJournalTransReread.RecId
                    &&  ledgerJournalTransDiff.AccountType == LedgerJournalACType::Cust
                    &&  ledgerJournalTransDiff.OffsetLedgerDimension == 0;

            if (ledgerJournalTransDiff)
            {
                return true;
            }
        }
        else if (ledgerJournalTransReread.AccountType == LedgerJournalACType::Cust
            && ledgerJournalTransReread.parmLedgerDimension()
            && !ledgerJournalTransReread.parmOffsetLedgerDimension())
        {
            select firstonly ledgerJournalTransDiff
                where ledgerJournalTransDiff.Voucher == ledgerJournalTransReread.Voucher
                    &&  ledgerJournalTransDiff.JournalNum == ledgerJournalTransReread.JournalNum
                    &&  ledgerJournalTransDiff.RecId != ledgerJournalTransReread.RecId
                    &&  (ledgerJournalTransDiff.AccountType == LedgerJournalACType::Ledger || ledgerJournalTransDiff.AccountType == LedgerJournalACType::Project)
                    &&  ledgerJournalTransDiff.OffsetLedgerDimension == 0;

            if (ledgerJournalTransDiff)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGeneralInvoice</Name>
				<Source><![CDATA[
    // <GTE>
    /// <summary>
    /// Check whether this transaction is a general invoice
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>True if this transaction is a general invoice</returns>
    public static boolean isGeneralInvoice(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTransDiff;

        // Same row
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
            && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger
            && _ledgerJournalTrans.parmLedgerDimension()
            && _ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            return true;
        }

        // Different rows
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
            && _ledgerJournalTrans.parmLedgerDimension()
            && !_ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            select firstonly ledgerJournalTransDiff
                where ledgerJournalTransDiff.Voucher == _ledgerJournalTrans.Voucher
                    &&  ledgerJournalTransDiff.JournalNum == _ledgerJournalTrans.JournalNum
                    &&  ledgerJournalTransDiff.RecId != _ledgerJournalTrans.RecId
                    &&  ledgerJournalTransDiff.AccountType == LedgerJournalACType::Ledger
                    &&  ledgerJournalTransDiff.OffsetLedgerDimension == 0;

            if (ledgerJournalTransDiff)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorInvoice</Name>
				<Source><![CDATA[
    // <GTE>
    /// <summary>
    /// Check whether this transaction is a vendor invoice
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>True if this transaction is a vendor invoice</returns>
    public static boolean isVendorInvoice(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTransDiff;

        // Same row
        if ((_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            && (_ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger || _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Project)
            && _ledgerJournalTrans.parmLedgerDimension())
            || ((_ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger || _ledgerJournalTrans.AccountType == LedgerJournalACType::Project)
            && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend
            && _ledgerJournalTrans.parmLedgerDimension()))
        {
            return true;
        }

        // Different rows
        if ((_ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger || _ledgerJournalTrans.AccountType == LedgerJournalACType::Project)
            && _ledgerJournalTrans.parmLedgerDimension()
            && !_ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            select firstonly ledgerJournalTransDiff
                where ledgerJournalTransDiff.Voucher == _ledgerJournalTrans.Voucher
                    &&  ledgerJournalTransDiff.JournalNum == _ledgerJournalTrans.JournalNum
                    &&  ledgerJournalTransDiff.RecId != _ledgerJournalTrans.RecId
                    &&  ledgerJournalTransDiff.AccountType == LedgerJournalACType::Vend
                    &&  ledgerJournalTransDiff.OffsetLedgerDimension == 0;

            if (ledgerJournalTransDiff)
            {
                return true;
            }
        }
        else if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            && _ledgerJournalTrans.parmLedgerDimension()
            && !_ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            select firstonly ledgerJournalTransDiff
                where ledgerJournalTransDiff.Voucher == _ledgerJournalTrans.Voucher
                    &&  ledgerJournalTransDiff.JournalNum == _ledgerJournalTrans.JournalNum
                    &&  ledgerJournalTransDiff.RecId != _ledgerJournalTrans.RecId
                    &&  (ledgerJournalTransDiff.AccountType == LedgerJournalACType::Ledger || ledgerJournalTransDiff.AccountType == LedgerJournalACType::Project)
                    &&  ledgerJournalTransDiff.OffsetLedgerDimension == 0;

            if (ledgerJournalTransDiff)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectInvoice</Name>
				<Source><![CDATA[
    // <GTE>
    /// <summary>
    /// Check whether this transaction is a project invoice
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>True if this transaction is a project invoice</returns>
    public static boolean isProjectInvoice(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTransDiff;
        LedgerJournalTrans  ledgerJournalTransReread;

        select firstOnly ledgerJournalTransReread
            where ledgerJournalTransReread.RecId == _ledgerJournalTrans.RecId;

        // Same row, Tax is only applied on Project-Vend and Project-Cust combination
        if ((ledgerJournalTransReread.AccountType == LedgerJournalACType::Project
            && (ledgerJournalTransReread.OffsetAccountType == LedgerJournalACType::Cust || ledgerJournalTransReread.OffsetAccountType == LedgerJournalACType::Vend)
            && ledgerJournalTransReread.parmLedgerDimension()
            && ledgerJournalTransReread.parmOffsetLedgerDimension())
            || ((ledgerJournalTransReread.AccountType == LedgerJournalACType::Cust|| ledgerJournalTransReread.AccountType == LedgerJournalACType::Vend)
            && ledgerJournalTransReread.OffsetAccountType == LedgerJournalACType::Project
            && ledgerJournalTransReread.parmLedgerDimension()
            && ledgerJournalTransReread.parmOffsetLedgerDimension()))
        {
            return true;
        }

        // Different rows, , Tax is only applied on Project-Vend and Project-Cust combination
        if ((ledgerJournalTransReread.AccountType == LedgerJournalACType::Cust || ledgerJournalTransReread.AccountType == LedgerJournalACType::Vend)
            && ledgerJournalTransReread.parmLedgerDimension()
            && !ledgerJournalTransReread.parmOffsetLedgerDimension())
        {
            select firstonly ledgerJournalTransDiff
                where ledgerJournalTransDiff.Voucher == ledgerJournalTransReread.Voucher
                    &&  ledgerJournalTransDiff.JournalNum == ledgerJournalTransReread.JournalNum
                    &&  ledgerJournalTransDiff.RecId != ledgerJournalTransReread.RecId
                    &&  ledgerJournalTransDiff.AccountType == LedgerJournalACType::Project
                    &&  ledgerJournalTransDiff.OffsetLedgerDimension == 0;

            if (ledgerJournalTransDiff)
            {
                return true;
            }
        }
        else if (ledgerJournalTransReread.AccountType == LedgerJournalACType::Project
            && ledgerJournalTransReread.parmLedgerDimension()
            && !ledgerJournalTransReread.parmOffsetLedgerDimension())
        {
            select firstonly ledgerJournalTransDiff
                where ledgerJournalTransDiff.Voucher == ledgerJournalTransReread.Voucher
                    &&  ledgerJournalTransDiff.JournalNum == ledgerJournalTransReread.JournalNum
                    &&  ledgerJournalTransDiff.RecId != ledgerJournalTransReread.RecId
                    &&  (ledgerJournalTransDiff.AccountType == LedgerJournalACType::Cust || ledgerJournalTransDiff.AccountType == LedgerJournalACType::Vend)
                    &&  ledgerJournalTransDiff.OffsetLedgerDimension == 0;

            if (ledgerJournalTransDiff)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxModelDocLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize tax model doc line by this ledger journal transaction record.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>The <c>TaxModelDocLineJournalImpl</c> object. </returns>
    public static TaxModelDocLineJournalImpl initTaxModelDocLine(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxModelDocLineJournalImpl taxModelDocLine;

        taxModelDocLine = TaxModelDocLineFactory::newTaxModelDocLine(_ledgerJournalTrans) as TaxModelDocLineJournalImpl;

        return taxModelDocLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomerPayment</Name>
				<Source><![CDATA[
    // <GTE>
    /// <summary>
    /// Check whether this transaction is a customer payment.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>True if this transaction is a customer payment.</returns>
    public static boolean isCustomerPayment(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTransDiff;

        // Same row
        if ((_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
            && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank
            && _ledgerJournalTrans.parmLedgerDimension())
            || (_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank
            && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust
            && _ledgerJournalTrans.parmLedgerDimension()))
        {
            return true;
        }

        // Different rows
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank
            && _ledgerJournalTrans.parmLedgerDimension()
            && !_ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            select firstonly ledgerJournalTransDiff
                where ledgerJournalTransDiff.Voucher == _ledgerJournalTrans.Voucher
                    &&  ledgerJournalTransDiff.JournalNum == _ledgerJournalTrans.JournalNum
                    &&  ledgerJournalTransDiff.RecId != _ledgerJournalTrans.RecId
                    &&  ledgerJournalTransDiff.AccountType == LedgerJournalACType::Cust
                    &&  ledgerJournalTransDiff.OffsetLedgerDimension == 0;

            if (ledgerJournalTransDiff)
            {
                return true;
            }
        }
        else if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Cust
            && _ledgerJournalTrans.parmLedgerDimension()
            && !_ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            select firstonly ledgerJournalTransDiff
                where ledgerJournalTransDiff.Voucher == _ledgerJournalTrans.Voucher
                    &&  ledgerJournalTransDiff.JournalNum == _ledgerJournalTrans.JournalNum
                    &&  ledgerJournalTransDiff.RecId != _ledgerJournalTrans.RecId
                    &&  ledgerJournalTransDiff.AccountType == LedgerJournalACType::Bank
                    &&  ledgerJournalTransDiff.OffsetLedgerDimension == 0;

            if (ledgerJournalTransDiff)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorPayment</Name>
				<Source><![CDATA[
    // <GTE>
    /// <summary>
    /// Check whether this transaction is a vendor payment
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>True if this transaction is a vendor payment</returns>
    public static boolean isVendorPayment(LedgerJournalTrans _ledgerJournalTrans)
    {
        LedgerJournalTrans  ledgerJournalTransDiff;

        // Same row
        if ((_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Bank
            && _ledgerJournalTrans.parmLedgerDimension())
            || (_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank
            && _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend
            && _ledgerJournalTrans.parmLedgerDimension()))
        {
            return true;
        }

        // Different rows
        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Bank
            && _ledgerJournalTrans.parmLedgerDimension()
            && !_ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            select firstonly ledgerJournalTransDiff
                where ledgerJournalTransDiff.Voucher == _ledgerJournalTrans.Voucher
                    &&  ledgerJournalTransDiff.JournalNum == _ledgerJournalTrans.JournalNum
                    &&  ledgerJournalTransDiff.RecId != _ledgerJournalTrans.RecId
                    &&  ledgerJournalTransDiff.AccountType == LedgerJournalACType::Vend
                    &&  ledgerJournalTransDiff.OffsetLedgerDimension == 0;

            if (ledgerJournalTransDiff)
            {
                return true;
            }
        }
        else if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Vend
            && _ledgerJournalTrans.parmLedgerDimension()
            && !_ledgerJournalTrans.parmOffsetLedgerDimension())
        {
            select firstonly ledgerJournalTransDiff
                where ledgerJournalTransDiff.Voucher == _ledgerJournalTrans.Voucher
                    &&  ledgerJournalTransDiff.JournalNum == _ledgerJournalTrans.JournalNum
                    &&  ledgerJournalTransDiff.RecId != _ledgerJournalTrans.RecId
                    &&  ledgerJournalTransDiff.AccountType == LedgerJournalACType::Bank
                    &&  ledgerJournalTransDiff.OffsetLedgerDimension == 0;

            if (ledgerJournalTransDiff)
            {
                return true;
            }
        }

        return false;
    }// </GTE>

]]></Source>
			</Method>
			<Method>
				<Name>calcUserTaxBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the User tax base.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    public static void calcUserTaxBase(LedgerJournalTrans _ledgerJournalTrans)
    {
        if (_ledgerJournalTrans.isWriteOffBaseAmountEnabledForCountriesWithoutTaxType())
        {
            if (CustParameters::isWriteOffBaseAmountSalesTaxEnabled())
            {
                _ledgerJournalTrans.setUserTaxBase();
            }
            else
            {
                _ledgerJournalTrans.TaxBase_W = 0;
            }
        }
        else
        {
            _ledgerJournalTrans.calcUserTaxBase_PL();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setUserTaxBase</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets and calculates the user tax base.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    internal static void setUserTaxBase(LedgerJournalTrans _ledgerJournalTrans)
    {
        TaxBase_W userTaxBase;
        AmountCur vatAmount = _ledgerJournalTrans.AmountCurCredit ? _ledgerJournalTrans.AmountCurCredit : _ledgerJournalTrans.AmountCurDebit;

        if (vatAmount
            && _ledgerJournalTrans.TaxCode
            && (_ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger
                || _ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Ledger))
        {
            TaxValue taxValue = TaxData::find(_ledgerJournalTrans.TaxCode, _ledgerJournalTrans.TransDate, 0).TaxValue;

            if (taxValue)
            {
                userTaxBase = CurrencyExchangeHelper::amount(vatAmount * 100 / taxValue);

                if ((_ledgerJournalTrans.TaxBase_W
                    && Box::yesNo(strFmt("@GLS109587", _ledgerJournalTrans.TaxBase_W, userTaxBase), DialogButton::Yes) == DialogButton::Yes)
                    || !_ledgerJournalTrans.TaxBase_W)
                {
                    _ledgerJournalTrans.TaxBase_W = userTaxBase;
                }
            }
        }
        else
        {
            _ledgerJournalTrans.TaxBase_W = 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWriteOffBaseAmountEnabledForCountriesWithoutTaxType</Name>
				<Source><![CDATA[
    internal static boolean isWriteOffBaseAmountEnabledForCountriesWithoutTaxType(LedgerJournalTrans _ledgerJournalTrans)
    {
        return _ledgerJournalTrans.TransactionType == LedgerTransType::WriteOff
            && !TaxTable::isCountryWithTaxType_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTransTaxExtension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>LedgerJournalTransTaxExtension</c> table.
    /// </summary>
    /// <param name = "_ledgerJournalTrans">The journal line record.</param>
    /// <returns>
    /// The table <c>LedgerJournalTransTaxExtension</c> associated with the current record.
    /// </returns>
    public static LedgerJournalTransTaxExtension ledgerJournalTransTaxExtension(LedgerJournalTrans _ledgerJournalTrans)
    {
        return _ledgerJournalTrans.SysExtensionSerializerMap::getExtensionTable(tableNum(LedgerJournalTransTaxExtension));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>