<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetReport</Name>
	<SourceCode>
		<Declaration><![CDATA[
public abstract class RAssetReport
{
    protected TemplateProvider_RU templateProvider;
    protected XMLExcelDocument_RU excelDocument;
    protected int curWorkSheetNum;

    protected EmployeeTable_RU newEmployee;
    protected EmployeeTable_RU oldEmployee;

    protected RAssetParameters rAssetParameters;
    protected CompanyInfo companyInfo;
    protected RAssetTable rAssetTable;
    protected RAssetStandards rAssetStandards;
    protected RAssetTrans acquisitionFirstTrans;
    protected RAssetReport rAssetReport;
    protected real rAssetNamor;
    protected str templateName;
    protected FormRun parentForm;
    protected FormAnimateControl animateControl;
    protected RAssetReportType rAssetReportType;
    protected RAssetSumCalc_Trans rAssetSumTrans;

    protected DialogField dateField;
    protected DialogField numberField;
    protected RAssetDocumentDate documentDate;
    protected RAssetDocumentNum documentNumber;
    protected RAssetDocument selectedDocument;
    
    // stores isProforma() value at the first usage time
    protected boolean isProforma;
    
    // skip updating Number and Date in referring record
    protected boolean skipUpdateDocuments;

    protected str documentPath;

    protected System.IO.Stream stream;

    protected const int MonthsInYear = 12;
    protected const int Round = 2;

    protected const str ConstChiefAccountantName = 'ChiefAccountantName';
    protected const str ConstCompanyName = 'CompanyName';
    protected const str ConstOKPO = 'OKPO';
    protected const str ConstDepartamentName = 'DepartamentName';
    protected const str ConstFromBusinessAccount = 'FromBusinessAccount';
    protected const str ConstEmplName = 'EmplName';
    protected const str ConstEmplID = 'EmplID';
    protected const str ConstChiefPost = 'ChiefPost';
    protected const str ConstChiefName = 'ChiefName';
    protected const str ConstDateChiefSignature = 'DateChiefSignature';
    protected const str ConstActNumber = 'ActNumber';
    protected const str ConstActDate = 'ActDate';
    protected const str ConstAssetName = 'AssetName';
    protected const str ConstAssetAccountNum = 'AssetAccountNum';
    protected const str ConstAssetSerialNum = 'AssetSerialNum';
    protected const str ConstAssetGuaranteeDate = 'AssetGuaranteeDate';
    protected const str ConstToBusinessAccount = 'ToBusinessAccount';
    protected const str ConstAcquisitionPrice = 'AcquisitionPrice';
    protected const str ConstAmountDepreciation = 'AmountDepreciation';
    protected const str ConstDeprCost = 'DeprCost';
    protected const str ConstEmplTitle = 'EmplTitle';
    protected const str ConstAcquisitionDate = 'AcquisitionDate';
    protected const str ConstDateRevaluationLast = 'DateRevaluationLast';
    protected const str ConstUseValue = 'UseValue';
    protected const str ConstUseValueFromLastRepairs = 'UseValueFromLastRepairs';
    protected const str ConstObservedLife = 'ObservedLife';
    protected const str ConstControlAccount = 'ControlAccount';
    protected const str ConstDepartmentName = 'DepartmentName';
    protected const str ConstDocumentNumber = 'DocumentNumber';
    protected const str ConstOKUD = 'OKUD';
    protected const str ConstDocumentDate = 'DocumentDate';
    protected const str ConstDeprGroupName = 'DeprGroupName';
    protected const str ConstPassportNum = 'PassportNum';
    protected const str ConstFactoryNumber = 'FactoryNumber';
    protected const str ConstInventoryNumber = 'InventoryNumber';
    protected const str ConstDisposalDate = 'DisposalDate';
    protected const str ConstAccount = 'Account';
    protected const str ConstAssetLocation = 'AssetLocation';
    protected const str ConstAssetMade = 'AssetMade';
    protected const str ConstAssetModel = 'AssetModel';
    protected const str ConstPosition = 'Position';
    protected const str ConstResponsible = 'Responsible';
    protected const str ConstCodeOKPO = 'CodeOKPO';
    protected const str ConstDeliver = 'deliver';
    protected const str ConstAcquire = 'acquire';
    protected const str ConstDateToBusinessAccounting = 'DateToBusinessAccounting';
    protected const str ConstAssetGroup = 'AssetGroup';
    protected const str ConstMake = 'Make';
    protected const str ConstConsignorName = 'ConsignorName';
    protected const str ConstConsignorOKPO = 'ConsignorOKPO';
    protected const str ConstReeceivingEnd = 'ReeceivingEnd';
    protected const str ConstConsignorProperties = 'ConsignorProperties';
    protected const str ConstBank = 'Bank';
    protected const str ConstLeftShift = '«';
    protected const str ConstRightShift = '»';
    protected const str ConstAssetWorksNumber = 'AssetWorksNumber';
    protected const str ConstAmountCost = 'AmountCost';
    protected const str ConstAmountPrice = 'AmountPrice';
    protected const str ConstNewEmplName = 'NewEmplName';
    protected const str ConstNewEmplID = 'NewEmplID';
    protected const str ConstNewEmplTitle = 'NewEmplTitle';
    protected const str ConstNewEmplDateSignature = 'NewEmplDateSignature';
    protected const str ConstNewInvKartNumber = 'NewInvKartNumber';
    protected const str ConstNewInvKartDate = 'NewInvKartDate';
    protected const str ConstRepairCostActual = 'RepairCostActual';
    protected const str ConstRepairCostProject = 'RepairCostProject';
    protected const str ConstTotalRepairCostActual = 'TotalRepairCostActual';
    protected const str ConstTotalRepairCostProject = 'TotalRepairCostProject';
    protected const str ConstModernizationCostActual = 'ModernizationCostActual';
    protected const str ConstModernizationCostProject = 'ModernizationCostProject';
    protected const str ConstTotalModernizationCostActual = 'TotalModernizationCostActual';
    protected const str ConstTotalModernizationCostProject = 'TotalModernizationCostProject';
    protected const str ConstCustCompanyName = 'CustCompanyName';
    protected const str ConstCustOKPO = 'CustOKPO';
    protected const str ConstCustDepartment = 'CustDepartment';
    protected const str ConstDateApproval = 'DateApproval';
    protected const str ConstAssetNameBefore = 'AssetNameBefore';
    protected const str ConstAssetID = 'AssetID';
    protected const str ConstAssetNameAfter = 'AssetNameAfter';
    protected const str ConstCostAfterRepair = 'CostAfterRepair';
    protected const str ConstNewEmplSignDate = 'NewEmplSignDate';
    protected const str ConstNewLocation = 'NewLocation';
    protected const str ConstOldLocation = 'OldLocation';
    protected const str ConstDocumentNum = 'DocumentNum';
    protected const str ConstOldTitle = 'OldTitle';
    protected const str ConstNewTitle = 'NewTitle';
    protected const str ConstOldName = 'OldName';
    protected const str ConstNewName = 'NewName';
    protected const str ConstOldId = 'OldId';
    protected const str ConstNewId = 'NewId';
    protected const str ConstSum = 'Sum';
    protected const str ConstAccountNum = 'AccountNum';
    protected const str ConstSerialNum = 'SerialNum';
    protected const str ConstNewChiefAccountantName = 'NewChiefAccountantName';
    protected const str ConstDateFromBusinessAccounting = 'DateFromBusinessAccounting';
    protected const str ConstOldObservedLife = 'OldObservedLife';
    protected const str ConstNewAcquisitionPrice = 'NewAcquisitionPrice';
    protected const str ConstNewUsefulLife = 'NewUsefulLife';
    protected const str ConstNewDeprProfileName = 'NewDeprProfileName';
    protected const str ConstNewDepreciationRate = 'NewDepreciationRate';
    protected const str ConstOldEmplName = 'OldEmplName';
    protected const str ConstOldEmplID = 'OldEmplID';
    protected const str ConstOldEmplTitle = 'OldEmplTitle';
    protected const str ConstOldEmplDateSignature = 'OldEmplDateSignature';
    protected const str ConstAssetPrim = 'AssetPrim';
    protected const str ConstScrapTotal = 'ScrapTotal';
    protected const str ConstSalesProceeds = 'SalesProceeds';
    protected const str ConstOldChiefAccountantName = 'OldChiefAccountantName';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>acquisition</Name>
				<Source><![CDATA[
    protected AmountMST acquisition(TransDate _curDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        rAssetSumTrans.parmDateTo(_curDate);
        return rAssetSumTrans.acquisitionTotalMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>additionalFields</Name>
				<Source><![CDATA[
    // FieldIDs of additional (besides date and number) fields of RAssetTable that should be visible in dialog
    public container additionalFields()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowMultiple</Name>
				<Source><![CDATA[
    // Allow adding multiple documents, related to current record
    public boolean allowMultiple()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountRound</Name>
				<Source><![CDATA[
    protected Amount amountRound(Amount _amount)
    {
        return decRound(_amount, Round);
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertCanInsert</Name>
				<Source><![CDATA[
    protected void assertCanInsert(RAssetDocument _document)
    {
        if (!this.canInsert(_document))
        {
            throw error(strFmt("@GLS117068", this.reportType()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assertNoOtherDocumentWithSameStandardID</Name>
				<Source><![CDATA[
    protected void assertNoOtherDocumentWithSameStandardID(RAssetDocument _document)
    {
        if ((select firstonly RecId from rAssetDocument
            where rAssetDocument.AssetId == _document.AssetId
                && rAssetDocument.Type == _document.Type
                && rAssetDocument.StandardId == _document.StandardId
                && rAssetDocument.RecId != _document.RecId).RecId)
        {
            throw error(strFmt("@GLS117069", _document.StandardId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetNamor</Name>
				<Source><![CDATA[
    protected void assetNamor(TransDate _curDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        rassetNamor = (select firstonly reverse RAssetSayvalue
            where RAssetSayvalue.Say == rAssetStandards.Say
                && RAssetSayvalue.BeginDate <= _curDate).DepreciationRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforeDocumentWrite</Name>
				<Source><![CDATA[
    // Process document saving in dialog
    public void beforeDocumentWrite(RAssetDocument _document)
    {
        if (!_document.RecId)
        {
            this.assertCanInsert(_document);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>beforePrompt</Name>
				<Source><![CDATA[
    // returns false if execution should be stopped
    protected boolean beforePrompt()
    {
        return !(this.doPrintIfSingle() && this.printIfSingle());
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateRecord</Name>
				<Source><![CDATA[
    // Is it allowed to create a new document record
    public boolean canCreateRecord()
    {
        return this.allowMultiple() || !this.relatedRecordHasDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canInsert</Name>
				<Source><![CDATA[
    // Is it allowed to insert particular document
    public boolean canInsert(RAssetDocument _document)
    {
        return this.canCreateRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    protected boolean check()
    {
        boolean ret = true;

        if (!documentDate)
        {
            ret = checkFailed("@SYS59325");
        }

        if (!this.isProforma() && !documentNumber)
        {
            ret = checkFailed("@SYS57812");
        }

        if (!rAssetStandards)
        {
            ret = checkFailed("@GLS116623");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>comment</Name>
				<Source><![CDATA[
    protected abstract str comment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>completeDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Completes excel document.
    /// </summary>
    protected void completeDocument()
    {
        const str fileExtension = '.xlsx';

        excelDocument.closeDocument(true);

        stream = excelDocument.parmStream();

        if (this.isERPostProcessingSupported())
        {
            ERBinaryContentService binaryContentService = new ERBinaryContentService();
            binaryContentService.parmERFormatMappingId(DocuParameters::find().AccountingDocumentsERFormatMapping);
            binaryContentService.initBinaryDataFromStream(stream);
            binaryContentService.processReportInER(this as ERIReportPostProcessingSupported);
        }
        else
        {
            var destination = ERObjectsFactory::createFileDestinationBrowser();
            destination.saveFile(stream, System.IO.Path::ChangeExtension(documentPath, fileExtension));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isERPostProcessingSupported</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks possibility to use ER post-processing for report.
    /// </summary>
    /// <returns>
    /// true if ER post-processing supported; otherwise, false.
    /// </returns>
    private boolean isERPostProcessingSupported()
    {
        return AccountingDocumentsERPostProcessingToggle::isEnabled()
            && this as ERIReportPostProcessingSupported;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constantDateAndNumber</Name>
				<Source><![CDATA[
    // Date and number of document can not be changed by user
    // For override by descendants
    public boolean constantDateAndNumber()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateAsStr</Name>
				<Source><![CDATA[
    protected TempStr dateAsStr(date _dt)
    {
        const str EmptyDate = 'Â«__Â» ______________________ 20__ Ð³.';

        return _dt ? RNumDateInWordConverter::construct().date2strExt(_dt) : EmptyDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateIntervalAsStr</Name>
				<Source><![CDATA[
    protected TempStr dateIntervalAsStr(Months _months)
    {
        Yr yr;
        Months m;
        str resultStr;

        if(_months > 0) 
        { 
            yr = _months div MonthsInYear; 
            m = _months mod MonthsInYear; 
        }

        int i = yr;
        if (i > 19)
        {
            i = real2int(frac(i / 10) * 10);
        }

        if (i >= 5 || i == 0)
        {
            resultStr = strFmt("@GLS102574", yr, m);
        }
        else if (i == 1)
        {
            resultStr += strFmt("@GLS102578", yr, m);
        }
        else
        {
            resultStr += strFmt("@GLS102577", yr, m);
        }

        return resultStr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateRevaluationLast</Name>
				<Source><![CDATA[
    protected TransDate dateRevaluationLast(TransDate _dt)
    {
        TransDate ret = dateNull();

        RAssetTrans localRAssetTrans = RAssetTrans::findLastType(rAssetTable.AccountNum, rAssetStandards.AssetStandardId, RAssetTransType::Revaluation, false, _dt);
        
        if (localRAssetTrans)
        {
            ret = localRAssetTrans.TransDate;
        }
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToBusinessAccounting</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets a transaction date of the first acquisition
    /// </summary>
    /// <returns>
    /// a transaction date of the first acquisition
    /// </returns>
    public TransDate dateToBusinessAccounting()
    {
        return acquisitionFirstTrans.RecId ? acquisitionFirstTrans.TransDate : dateNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>depreciation</Name>
				<Source><![CDATA[
    protected AmountMST depreciation(TransDate _curDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        rAssetSumTrans.parmDateTo(_curDate);
        return rAssetSumTrans.depreciationTotalMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    protected Dialog dialog()
    {
        Dialog dlg = (this.constantDateAndNumber() || isProforma)
            ? new Dialog(this.comment(), this)
            : new Dialog(this.comment(), this, '', new Form(formStr(RAssetReport)));

        DialogGroup dlgGroup = dlg.addGroup("@SYS21873");
        dlgGroup.frameType(FormFrameType::None);

        dateField = dlg.addField(extendedTypeStr(RAssetDocumentDate));
        numberField = dlg.addField(extendedTypeStr(RAssetDocumentNum));

        dateField.allowEdit(isProforma);
        dateField.skip(!isProforma);
        numberField.allowEdit(isProforma);
        numberField.skip(!isProforma);

        boolean dateAndNumberVisible = this.constantDateAndNumber() || isProforma || ! this.skipUpdateDocuments();
        dateField.visible(dateAndNumberVisible);
        numberField.visible(dateAndNumberVisible);

        dlgGroup = dlg.addGroup("@SYS54716");
        FormBuildGroupControl grCtrl = dlgGroup.formBuildGroup();
        grCtrl.top(1);

        return dlg;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public RAssetDocumentDate documentDate(RAssetDocumentDate _value = documentDate)
    {
        documentDate = _value;
        return documentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentNumber</Name>
				<Source><![CDATA[
    public RAssetDocumentNum documentNumber(RAssetDocumentNum _value = documentNumber)
    {
        documentNumber = _value;
        return documentNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doPrintIfSingle</Name>
				<Source><![CDATA[
    // If there is a single document saved for the
    // kind and fixed asset, that document should be printed
    // without prompt
    public boolean doPrintIfSingle()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>employee</Name>
				<Source><![CDATA[
    protected void employee(TransDate _curDate)
    {
        RAssetMoveHist rAssetMoveHist = RAssetMoveHist::findLastOperation(rAssetTable.AccountNum, RAssetMoveType::Transfer, NoYes::No, _curDate);
        newEmployee = EmployeeTable_RU::findByEmployeeId(rAssetMoveHist.NewEmployee);

        rAssetMoveHist = RAssetMoveHist::findLastOperation(rAssetTable.AccountNum, RAssetMoveType::Transfer, NoYes::No, rAssetMoveHist.ChangeDate - 1);
        oldEmployee = EmployeeTable_RU::findByEmployeeId(rAssetMoveHist.NewEmployee);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFields</Name>
				<Source><![CDATA[
    // Sets access to fields when active record in dialog changed
    public void enableFields(FormDataSource _ds)
    {
        RAssetDocument doc = _ds.cursor();

        // Asset transacrion already have fixed standardId
        _ds.object(fieldNum(RAssetDocument, StandardId))
            .allowEdit(doc.RefTableId != tableNum(RAssetTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeReport</Name>
				<Source><![CDATA[
    // Execute all actionsa after prompting parameters
    public void executeReport(Args _args)
    {
        boolean bErr;

        if (this.check())
        {
            if (this.initReport())
            {
                if (this.makeDocument())
                {
                    try
                    {
                        this.run();
                        this.completeDocument();
                        if (_args && _args.record() && FormDataUtil::getFormDataSource(_args.record()))
                        {
                            FormDataSource ds = FormDataUtil::getFormDataSource(_args.record());
                            ds.reread();
                            ds.refresh();
                        }
                    }
                    catch (Exception::Error)
                    {
                        this.completeDocument();
                        bErr = true;
                    }
                }
            }
            else
            {
                bErr = true;
            }
        }
        if(bErr)
        {
            error("@GLS101886");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAnalysisCodeFromDefaultDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns analysis dimension value from default dimension specified
    /// </summary>
    /// <param name="_defaultDimension">
    /// Source default dimension
    /// </param>
    /// <returns>
    /// Analysis dimension value
    /// </returns>
    /// <remarks>
    /// Analysis dimension taken from dimension specified at rAssetParameters as analysis dimension
    /// </remarks>
    protected DimensionValue getAnalysisCodeFromDefaultDimension(DimensionDefault _defaultDimension)
    {
        DimensionAttributeValueSetItemView dimensionAttributeValueSetItemView;

        if (rAssetParameters.AnalysisDimensionAttribute)
        {
            select firstonly DisplayValue from dimensionAttributeValueSetItemView
                where dimensionAttributeValueSetItemView.DimensionAttributeValueSet == _defaultDimension
                    && dimensionAttributeValueSetItemView.DimensionAttribute == rAssetParameters.AnalysisDimensionAttribute;
        }

        return dimensionAttributeValueSetItemView.DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAnalysisCodeFromLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns analysis dimension value from ledger dimension specified
    /// </summary>
    /// <param name="_ledgerDimension">
    /// Source default dimension
    /// </param>
    /// <returns>
    /// Analysis dimension value
    /// </returns>
    /// <remarks>
    /// Analysis dimension taken from dimension specified at rAssetParameters as analysis dimension
    /// </remarks>
    protected DimensionValue getAnalysisCodeFromLedgerDimension(LedgerDimensionAccount _ledgerDimension)
    {
        DimensionAttributeLevelValueView dimAttrLevelValueView;

        if (rAssetParameters.AnalysisDimensionAttribute)
        {
            select firstonly DisplayValue from dimAttrLevelValueView
                where dimAttrLevelValueView.ValueCombinationRecId == _ledgerDimension
                    && dimAttrLevelValueView.DimensionAttribute == rAssetParameters.AnalysisDimensionAttribute;
        }

        return dimAttrLevelValueView.DisplayValue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    protected boolean getFromDialog()
    {
        if (isProforma)
        {
            documentDate    = dateField.value();
            documentNumber  = numberField.value();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentValue</Name>
				<Source><![CDATA[
    // Init new record of RAssetDocument
    public void initDocumentValue(RAssetDocument _document)
    {
        _document.AssetId = this.rAssetTable().AccountNum;
        _document.Type = this.reportType();
        _document.Date = this.documentDate();

        if (this.relatedRecord())
        {
            _document.RefTableId = this.relatedRecord().TableId;
            _document.RefRecId = this.relatedRecord().RecId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromRAssetDocument</Name>
				<Source><![CDATA[
    // Initialize object from stored document
    public void initFromRAssetDocument(RAssetDocument _document)
    {
        this.documentNumber(_document.Num);
        this.documentDate(_document.Date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReport</Name>
				<Source><![CDATA[
    protected boolean initReport()
    {
        rAssetSumTrans = RAssetSumCalc_Trans::newAssetPeriod(rAssetTable.AccountNum, rAssetStandards.AssetStandardId, this.transDate());
        acquisitionFirstTrans = RAssetTrans::findFirstType(rAssetTable.AccountNum, rAssetStandards.AssetStandardId, RAssetTransType::Acquisition, false);
        
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDateIntoDoc</Name>
				<Source><![CDATA[
    protected void insertDateIntoDoc(Bookmark _bookmark, date _dt)
    {
        if (_dt != dateNull())
        {
            this.insertValueIntoDoc(_bookmark, _dt);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValueIntoDoc</Name>
				<Source><![CDATA[
    protected void insertValueIntoDoc(Bookmark _bookmark, anytype _anyVal)
    {
        excelDocument.insertValue(_bookmark, _anyVal, curWorkSheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProforma</Name>
				<Source><![CDATA[
    // Returns true if the document being print is preliminary version of document
    public boolean isProforma()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>location</Name>
				<Source><![CDATA[
    protected RAssetLocationId location(TransDate _curDate)
    {
        RAssetMoveHist rAssetMoveHist = RAssetMoveHist::findLastOperation(rAssetTable.AccountNum, RAssetMoveType::Transfer, NoYes::No, _curDate);
        return rAssetMoveHist.NewLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mainAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the main account for the selected asset transaction type.
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date to select the asset posting profile.
    /// </param>
    /// <param name="_transType">
    /// The operation type of the asset.
    /// </param>
    /// <returns>
    /// The main account num for the asset.
    /// </returns>
    protected MainAccountNum mainAccountNum(TransDate _transDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
        RAssetTransType _transType = RAssetTransType::Acquisition)
    {
        return LedgerDimensionFacade::getMainAccountIdFromLedgerDimension(rAssetStandards.assetLedgerDimension(rAssetStandards.AssetStandardId, rAssetStandards.postingProfile(_transDate), _transType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    protected boolean makeDocument()
    {
        documentPath = this.comment() + "@SYS34952" + rAssetTable.AccountNum + "@SYS34953";

        excelDocument = XMLExcelDocument_RU::newFromResource(this.templateName(), false);
        if (!excelDocument)
        {
            return false;
        }

        if (!this.skipUpdateDocuments())
        {
            ttsbegin;
            this.updateDocuments();
            ttscommit;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeStr</Name>
				<Source><![CDATA[
    protected str mergeStr(str _sz1, str _sz2, str _pref = '', str _post = '')
    {
        str szRet;

        if (_sz2)
        {
            if (_sz1)
            {
                szRet = strFmt("@GLS116881", _sz1, _pref, _sz2, _post);
            }
            else
            {
                szRet = _pref + _sz2 + _post;
            }

            return szRet;
        }
        else
        {
            return _sz1;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>netBookValue</Name>
				<Source><![CDATA[
    protected AmountMST netBookValue(TransDate _curDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        rAssetSumTrans.parmDateTo(_curDate);
        return rAssetSumTrans.netBookValueMST();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Args args)
    {
        parentForm = args.caller();
        rAssetReportType = args.parmEnum();
        companyInfo = CompanyInfo::find();
        rAssetParameters = RAssetParameters::find();

        curWorkSheetNum = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTemplateProvider</Name>
				<Source><![CDATA[
    public TemplateProvider_RU parmTemplateProvider(TemplateProvider_RU _templateProvider = templateProvider)
    {
        templateProvider = _templateProvider;
        return templateProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printIfSingle</Name>
				<Source><![CDATA[
    // Prints document in there is only one such a document of
    // current type related to the current fixed asset
    // returns true in such case, otherwise - false
    protected boolean printIfSingle()
    {
        boolean ret;

        if ((select count(RecId) from rAssetDocument
            where rAssetDocument.AssetId == rAssetTable.AccountNum
                && rAssetDocument.Type == this.reportType()).RecId == 1)
        {
            RAssetDocument document;
            select firstonly document
                where document.AssetId == rAssetTable.AccountNum
                    && document.Type == this.reportType();

            if (document)
            {
                new RAssetDocumentPrinter(document, null, true).run();
                ret = true;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prompt</Name>
				<Source><![CDATA[
    protected boolean prompt()
    {
        isProforma = this.isProforma();

        if (this.beforePrompt())
        {
            Dialog dlg = this.dialog();

            if (this.documentDate())
            {
                dateField.value(this.documentDate());
            }

            if (this.documentNumber())
            {
                numberField.value(this.documentNumber());
            }

            dlg.run();

            if (dlg.closedOk())
            {
                return this.getFromDialog();
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rAssetTable</Name>
				<Source><![CDATA[
    public RAssetTable rAssetTable()
    {
        return rAssetTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedRecord</Name>
				<Source><![CDATA[
    // Returns record which this report should be linked with
    public Common relatedRecord()
    {
        Common ret;
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>relatedRecordHasDocument</Name>
				<Source><![CDATA[
    // Record, referenced by relatedRecord() has attached document of the current type
    public boolean relatedRecordHasDocument()
    {
        return this.relatedRecord()
            ? RAssetDocument::existByRef(this.rAssetTable().AccountNum, this.reportType(), this.relatedRecord())
            : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportType</Name>
				<Source><![CDATA[
    public RAssetReportType reportType()
    {
        return rAssetReportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    protected abstract void run()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectedDocument</Name>
				<Source><![CDATA[
    // Document, selected in dialog form
    public RAssetDocument selectedDocument(RAssetDocument _value = selectedDocument)
    {
        selectedDocument = _value;
        return selectedDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipUpdateDocuments</Name>
				<Source><![CDATA[
    // Skip writing document number and date to operation table
    public boolean skipUpdateDocuments(boolean _value = skipUpdateDocuments)
    {
        skipUpdateDocuments = _value;
        return skipUpdateDocuments;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected abstract str templateName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    protected abstract TransDate transDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocuments</Name>
				<Source><![CDATA[
    protected void updateDocuments()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static RAssetReport construct(Args _args)
    {
        RAssetReport rAssetReport = RAssetReport::newFromArgs(_args);

        if (!rAssetReport)
        {
            throw error("@GLS116402");
        }

        return rAssetReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a <c>RAssetReport</c> object.
    /// </summary>
    /// <param name = "_args">An instance of <c>Args</c> class.</param>
    /// <returns>The proper instance of <c>RAssetReport</c> class.</returns>
    protected static RAssetReport newFromArgs(Args _args)
    {
        RAssetReport rAssetReport;
        RAssetTrans rAssetTrans;

        RAssetReportType assetReportType = _args.parmEnum();
        switch (assetReportType)
        {
            case RAssetReportType::OC1_Trans:
            case RAssetReportType::OC1_DeedOfConveyance:
                if (_args.dataset() == tableNum(RAssetTrans))
                {
                    rAssetReport = new RAssetReport_OC1_Trans(_args);
                }
                else
                {
                    rAssetReport = new RAssetReport_OC1_Table(_args);
                }
                break;

            case RAssetReportType::OC1_MoveHistory:
                if (_args.dataset() == tableNum(RAssetMoveHist))
                {
                    rAssetReport = new RAssetReport_OC1_MoveHist(_args);
                }
                else
                {
                    rAssetReport = new RAssetReport_OC1_Table(_args);
                }
                break;

            case RAssetReportType::OC1a_MoveHistory:
                if (_args.dataset() == tableNum(RAssetMoveHist))
                {
                    rAssetReport = new RAssetReport_OC1A_MoveHist(_args);
                }
                else
                {
                    rAssetReport = new RAssetReport_OC1A_Table(_args);
                }
                break;

            case RAssetReportType::OC1a_Trans:
            case RAssetReportType::OC1a_DeedOfConveyance:
                if (_args.dataset() == tableNum(RAssetTrans))
                {
                    rAssetReport = new RAssetReport_OC1A_Trans(_args);
                }
                else
                {
                    rAssetReport = new RAssetReport_OC1A_Table(_args);
                }
                break;

            case RAssetReportType::OC6:
                rAssetReport = new RAssetReport_OC6(_args);
                break;

            case RAssetReportType::OC4:
                if (_args.dataset() == tableNum(RAssetTrans))
                {
                    rAssetTrans = _args.record();
                    if (rAssetTrans.PostingType == RAssetPostingType::PartialTakeDown)
                    {
                        rAssetReport = new RAssetReport_OC4_Trans_TakeDown(_args);
                    }
                    else
                    {
                        rAssetReport = new RAssetReport_OC4_Trans(_args);
                    }
                }
                else
                {
                    rAssetReport = new RAssetReport_OC4_Table(_args);
                }
                break;

            case RAssetReportType::OC14:
                rAssetReport = new RAssetReport_OC14(_args);
                break;

            case RAssetReportType::OC3:
                if (_args.dataset() == tableNum(RAssetTrans))
                {
                    rAssetReport = new RAssetReport_OC3_Trans(_args);
                }
                else
                {
                    rAssetReport = new RAssetReport_OC3_Table(_args);
                }
                break;

            case RAssetReportType::OC4a:
                if (_args.dataset() == tableNum(RAssetTrans))
                {
                    rAssetTrans = _args.record();
                    if (rAssetTrans.PostingType == RAssetPostingType::PartialTakeDown)
                    {
                        rAssetReport = new RAssetReport_OC4a_Trans_TakeDown(_args);
                    }
                    else
                    {
                        rAssetReport = new RAssetReport_OC4a_Trans(_args);
                    }
                }
                else
                {
                    rAssetReport = new RAssetReport_OC4a_Table(_args);
                }
                break;

            case RAssetReportType::OC2:
                switch (_args.dataset())
                {
                    case tableNum(RAssetMoveHist):
                        rAssetReport = new RAssetReport_OC2_MoveHist(_args);
                        break;

                    case tableNum(RAssetTable):
                        rAssetReport = new RAssetReport_OC2_Table(_args);
                        break;

                    default:
                        rAssetReport = new RAssetReport_OC2_Transfer(_args);
                        break;
                }
                break;

            case RAssetReportType::MB2:
                rAssetReport = new RAssetReport_MB2(_args);
                break;

            case RAssetReportType::MB4:
                rAssetReport = new RAssetReport_MB4(_args);
                break;

            case RAssetReportType::MB8:
                rAssetReport = new RAssetReport_MB8(_args);
                break;
        }

        return rAssetReport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetReport report = RAssetReport::construct(_args);

        if (report.prompt())
        {
            if (report.selectedDocument())
            {
                new RAssetDocumentPrinter(report.selectedDocument(), _args, report.skipUpdateDocuments()).run();
            }
            else
            {
                report.executeReport(_args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newByRAssetDocument</Name>
				<Source><![CDATA[
    // Returns a new RAssetReport initialized with the given record's data
    public static RAssetReport newByRAssetDocument(RAssetDocument _doc, boolean _skipUpdateDocuments = false)
    {
        Args args = new Args();
        args.record(_doc.relatedRecord());
        args.parmEnumType(enumNum(RAssetReportType));
        args.parmEnum(_doc.Type);

        RAssetReport ret = RAssetReport::construct(args);
        ret.initFromRAssetDocument(_doc);
        ret.skipUpdateDocuments(_skipUpdateDocuments);

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>