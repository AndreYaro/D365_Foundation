<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>HierarchyTemplateCopyingDialog_Proj</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>HierarchyTemplateCopyingDialog_Proj</c> class is responsible for displaying
/// the work breakdown structure import/export dialog and running the hierarchy copy process.
/// </summary>
class HierarchyTemplateCopyingDialog_Proj extends HierarchyTemplateCopyingDialog implements BatchRetryable
{
    ProjHierarchyTaskId         selectedTaskId;
    boolean						completedSuccesfully;

    #localmacro.CurrentList
        hierarchyId,
        hierarchyName,
        description,
        isActive,
        showOnlyTemplates,
        selectedTaskId,
        isImport,
        selectedHierarchyId
    #endmacro

}
]]></Declaration>
    <Methods>
      <Method>
        <Name>dialog</Name>
        <Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();

        if (isImport)
        {
            dialog.caption("@Proj:CopyFromWBSTemplate");

            // Replace standard hierarchy name field with field that uses a specialiazed lookup for project that includes both projects and project quotations.
            const int lookupAlways  = 0;

            dialogHierarchyName.fieldControl().visible(false);
            dialogHierarchyName = dialog.addField(extendedTypeStr(ProjHierarchyName));
            dialogHierarchyName.fieldControl().mandatory(true);
            dialogHierarchyName.fieldControl().lookupButton(lookupAlways);
        }
        else
        {
            dialog.caption("@Proj:SaveAsWBSTemplate");
        }

        return dialog;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmSelectedTaskId</Name>
        <Source><![CDATA[
    public ProjHierarchyTaskId parmSelectedTaskId(ProjHierarchyTaskId _selectedTaskId = selectedTaskId)
    {
        selectedTaskId = _selectedTaskId;
        return selectedTaskId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmCompletedSuccessfully</Name>
        <Source><![CDATA[
	public boolean parmCompletedSuccessfully()
    {
        return completedSuccesfully;
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    public void run()
    {
        if (isImport)
        {
            if (ProjPlanVersionsManager::preImportHierarchy(this.selectedHierarchyId, this.hierarchyId, this.selectedTaskId))
            {
				boolean useRateCards = Box::yesNo("@ProjPlan:UseRateCards", DialogButton::Ok) == DialogButton::Yes;
				ProjPlanVersionsManager::importTemplateHierarchy(this.selectedHierarchyId, this.hierarchyId, this.selectedTaskId, useRateCards);
                completedSuccesfully = true;
            }
            else
            {
                completedSuccesfully = false;
            }
        }
        else
        {
            // Add hierarchy table record for the export destination.
            HierarchyTemplateCopying_Proj hierarchyTemplateCopying = 
                this.setHierarchyTemplateCopyingProjParameters(this.hierarchyId, hierarchyName, description, isActive);
                HierarchyTemplateCopying_Proj::construct();
            Hierarchy hierarchy = hierarchyTemplateCopying.createFromSourceHierarchy();

            // Set the source hierarchy ID in the planVersionsManagerContract object.
            ProjPlanVersionsManagerDataContract planVersionsManagerContract = this.setPlanVersionsManagerCopyHierarchyParameters();

            // Copy plan versions record from source hierarchy ID to destination hierarchy ID.
            ProjPlanVersionsManagerInstance planVersionsManagerInstance = ProjPlanVersionsManagerInstance::construct();
            this.copyHierarchy(planVersionsManagerInstance, planVersionsManagerContract, hierarchy.HierarchyId);
            
			// If the root of the imported hierarchy is no longer an end-node (ie, exported more than just estimates), make it an end-node
            ProjPlanVersion hierarchyRoot = ProjPlanVersion::getRootTask(hierarchy.HierarchyId, true);
            if (ProjPlanVersion::isSummaryTask(hierarchyRoot.HierarchyId, hierarchyRoot.HierarchyTaskId))
            {
                ttsbegin;
                hierarchyRoot.EndNode = FalseTrue::False;
                hierarchyRoot.update();
                ttscommit;
            }

            completedSuccesfully = true;
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>copyHierarchy</Name>
        <Source><![CDATA[
    /// <summary>
    /// Copies tasks from hierarchy to hierarchy.
    /// </summary>
    /// <param name = "_planVersionsManagerInstance"><c>ProjPlanVersionsManagerInstance</c> object.</param>
    /// <param name = "_planVersionsManagerContract"><c>ProjPlanVersionsManagerDataContract</c> object to specify the source hierarchy ID and customized parameters.</param>
    /// <param name = "_destHierarchyId">Destination hierarchy ID.</param>
    /// <remarks>
    /// To support customized parameters in <c>ProjPlanVersionsManagerDataContract</c> object, please 
    /// override this code to use copyHierarchyByDataContract() method instead of copyHierarchy() method.
    /// </remarks>
    [Replaceable]
    protected void copyHierarchy(ProjPlanVersionsManagerInstance _planVersionsManagerInstance, ProjPlanVersionsManagerDataContract _planVersionsManagerContract, HierarchyIdBase _destHierarchy)
    {
        _planVersionsManagerInstance.copyHierarchy(_planVersionsManagerContract, _destHierarchy, false, false);
    }

]]></Source>
      </Method>
      <Method>
        <Name>setPlanVersionsManagerCopyHierarchyParameters</Name>
        <Source><![CDATA[
    /// <summary>
    /// Set <c>ProjPlanVersionsManagerDataContract</c> parameters to pass it to <c>ProjPlanVersionsManagerInstance</c> copyHierarchy method.
    /// </summary>
    public ProjPlanVersionsManagerDataContract setPlanVersionsManagerCopyHierarchyParameters()
    {
        ProjPlanVersionsManagerDataContract planVersionsManagerContract = new ProjPlanVersionsManagerDataContract();
        planVersionsManagerContract.parmHierarchyId(this.hierarchyId);
        return planVersionsManagerContract;
    }

]]></Source>
      </Method>
      <Method>
        <Name>setHierarchyTemplateCopyingProjParameters</Name>
        <Source><![CDATA[
    /// <summary>
    /// Set <c>HierarchyTemplateCopying_Proj</c> object parameters.
    /// </summary>
    /// <param name = "_sourceHierarchyId">Source hierarchy ID.</param>
    /// <param name = "_hierarchyName">Hierarchy name.</param>
    /// <param name = "_description">Hierarchy description.</param>
    /// <param name = "_isActive">Whether the hierarchy is active.</param>
    /// <returns><c>HierarchyTemplateCopying_Proj</c> object.</c></returns>
    public HierarchyTemplateCopying_Proj setHierarchyTemplateCopyingProjParameters(HierarchyIdBase _sourceHierarchyId,
        HierarchyName _hierarchyName, Description _description, NoYesId _isActive)
    {
        HierarchyTemplateCopying_Proj hierarchyTemplateCopying = HierarchyTemplateCopying_Proj::construct();

        HierarchyIdBase sourceHierarchyId = _sourceHierarchyId;

        // If this is a project, then get the first version Hierarchy ID.
        ProjId projectId = ProjPlanVersionDetail::findByHierarchyId(_sourceHierarchyId).ProjId;
        if (projectId)
        {
            sourceHierarchyId = ProjPlanVersionDetail::findOldestByProjId(projectId).HierarchyId;
        }

        hierarchyTemplateCopying.parmHierarchy(Hierarchy::find(sourceHierarchyId));
        hierarchyTemplateCopying.parmHierarchyName(hierarchyName);
        hierarchyTemplateCopying.parmDescription(description);
        hierarchyTemplateCopying.parmIsActive(isActive);
        return hierarchyTemplateCopying;
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static boolean main(Args _args)
    {
        if (!_args || !_args.record() || _args.dataset() != tableNum(ProjPlanVersion))
        {
            throw error(strFmt("@SYS25516", funcName()));
        }

        boolean success = false;
        if (HierarchyTreeTable::checkNumberSeq() && Hierarchy::checkNumberSeq() && smmActivities::checkNumberSeq())
        {
            HierarchyTemplateCopyingDialog_Proj hierarchyTemplateCopyingDialog = HierarchyTemplateCopyingDialog_Proj::initDialog(_args);
            if (hierarchyTemplateCopyingDialog.prompt())
            {
                // If batch processing is enabled, the run method would be executed instead of this block.
                hierarchyTemplateCopyingDialog.runOperation();
            }

            success = HierarchyTemplateCopyingDialog.parmCompletedSuccessfully();
        }

        return success;
    }

]]></Source>
      </Method>
      <Method>
        <Name>initDialog</Name>
        <Source><![CDATA[
    /// <summary>
    /// Instantiates and initializes an instance of this dialog.
    /// </summary>
    /// <param name = "_args">An instance of the <c>Args</c> class.</param>
    /// <returns></returns>
    public static HierarchyTemplateCopyingDialog initDialog(Args _args)
    {
        ProjPlanVersion                         selectedProjPlanVersion;
        Object                                  caller;
        boolean                                 isImport;
        HierarchyTemplateCopyingDialog_Proj     hierarchyTemplateCopyingDialog;

        if (_args.parmEnumType() == enumNum(NoYes))
        {
            isImport = _args.parmEnum();
        }

        caller = _args.caller();
        selectedProjPlanVersion         = _args.record();
        hierarchyTemplateCopyingDialog  = new HierarchyTemplateCopyingDialog_Proj();
        hierarchyTemplateCopyingDialog.parmHierarchyType(HierarchyType::Project);
        hierarchyTemplateCopyingDialog.parmHierarchyId(selectedProjPlanVersion.HierarchyId);
        hierarchyTemplateCopyingDialog.parmSelectedTaskId(selectedProjPlanVersion.HierarchyTaskId);
        hierarchyTemplateCopyingDialog.parmIsImport(isImport);
        hierarchyTemplateCopyingDialog.parmCaller(caller);

        return hierarchyTemplateCopyingDialog;
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>