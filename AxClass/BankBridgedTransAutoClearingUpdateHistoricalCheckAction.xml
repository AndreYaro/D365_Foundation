<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankBridgedTransAutoClearingUpdateHistoricalCheckAction</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

[Export(identifierStr(Dynamics.AX.Application.IDataMaintenanceAction))]
[DataMaintenanceFeatureClass(classStr(BankBridgedTransAutoClearingFeature))]
internal class BankBridgedTransAutoClearingUpdateHistoricalCheckAction implements IDataMaintenanceAction, IDataMaintenanceOpportunity
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceCaption caption()
    {
        return literalStr("@CashManagement:BankBridgedTransAutoClearingUpdateHistoricalCheckActionName");
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceDescription description()
    {
        return literalStr("@CashManagement:BankBridgedTransAutoClearingUpdateHistoricalCheckActionDescription");
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isEnabled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>category</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceActionCategory category()
    {
        return DataMaintenanceActionCategory::Misc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public ModuleAxapta module()
    {
        return ModuleAxapta::CashManagement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tasks</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public Array tasks()
    {
        Array tasks = new Array(Types::String);
        tasks.value(1, classStr(BankBridgedTransAutoClearingUpdateHistoricalCheckTask));
        return tasks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>opportunityResult</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public DataMaintenanceOpportunityResult opportunityResult()
    {
        DataMaintenanceOpportunityResult scanResult = DataMaintenanceOpportunityResult::construct();
        scanResult.parmOpportunityFound(this.existsOppotunityForDataMaintenanceInBankBridgedTransAutoClearing());

        return scanResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>automaticallySchedule</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean automaticallySchedule()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existsOppotunityForDataMaintenanceInBankBridgedTransAutoClearing</Name>
				<Source><![CDATA[
    private boolean existsOppotunityForDataMaintenanceInBankBridgedTransAutoClearing()
    {
        BankAccountTable bankAccountTable;
        DimensionAttributeValueCombination davc;
        BankBridgingInquiry bankBridgingInquiry;
        LedgerEntry ledgerEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        LedgerEntryJournal ledgerEntryJournal;
        LedgerJournalTrans ledgerJournalTrans;
        BankChequeTable bankChequeTable;
        LedgerTransFurtherPosting ledgerTransFurtherPosting;

        select firstonly crosscompany RecId from ledgerTransFurtherPosting
            join RecId from ledgerEntry
                where ledgerEntry.RecId == ledgerTransFurtherPosting.RefRecId
                    && ledgerEntry.IsBridgingPosting == NoYes::Yes
            join RecId from generalJournalAccountEntry
                where generalJournalAccountEntry.RecId == ledgerEntry.GeneralJournalAccountEntry
            join RecId from generalJournalEntry
                where generalJournalEntry.RecId == generalJournalAccountEntry.GeneralJournalEntry
            join RecId from ledgerEntryJournal
                where ledgerEntryJournal.RecId == generalJournalEntry.LedgerEntryJournal
            join RecId from ledgerJournalTrans
                where ledgerJournalTrans.Voucher == generalJournalEntry.SubledgerVoucher
                    && ledgerJournalTrans.TransDate == generalJournalEntry.AccountingDate
                    && ledgerJournalTrans.JournalNum == ledgerEntryJournal.JournalNumber
                    && ledgerJournalTrans.BridgingBankAccount == ''
            join RecId from bankBridgingInquiry
                where bankBridgingInquiry.PaymMode == ledgerJournalTrans.PaymMode
                    && bankBridgingInquiry.AccountType == ledgerJournalTrans.AccountType
            join RecId from davc
                where davc.RecId == bankBridgingInquiry.PaymentLedgerDimension
            join RecId from bankAccountTable
                where bankAccountTable.AccountID == davc.DisplayValue
            join RecId from bankChequeTable
                where bankChequeTable.SourceTableId == tableNum(LedgerJournalTrans)
                    && bankChequeTable.SourceRecId == ledgerJournalTrans.RecId
                    && bankChequeTable.AccountId == bankAccountTable.AccountID;

        return ledgerEntry.RecId != 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>