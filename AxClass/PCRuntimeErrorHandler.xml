<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PCRuntimeErrorHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is responsible for handling errors thrown by the product configuration runtime.
/// </summary>
class PCRuntimeErrorHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PCRuntimeErrorHandler construct()
    {
        return new PCRuntimeErrorHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleConditionExpressionParseError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles an expression parse error for a condition.
    /// </summary>
    /// <param name="_conditionType">
    /// The condition type.
    /// </param>
    /// <param name="_expressionConstraintRecIdAsString">
    /// The expression constraint record ID for a component modifier expression.
    /// </param>
    /// <param name="_defaultMessage">
    /// The default error message.
    /// </param>
    /// <returns>
    /// The label to be used for creating the error message.
    /// </returns>
    private str handleConditionExpressionParseError(Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.ConditionType _conditionType, str _expressionConstraintRecIdAsString, str _defaultMessage)
    {
        PCSubComponent                  subComponent;
        PCSubComponentControl           subComponentControl;
        PCSubComponentControlConstraint subComponentControlConstraint;
        PCExpressionConstraintRecId     expressionConstraintRecId;

        switch (_conditionType)
        {
            case Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.ConditionType::HiddenAttribute:
                return "@SYS4001844";
            case Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.ConditionType::MandatoryAttribute:
                return "@SYS4001845";
            case Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.ConditionType::ReadOnlyAttribute:
                return "@SYS4001846";
            case Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.ConditionType::HiddenComponent:
                expressionConstraintRecId = str2int64(_expressionConstraintRecIdAsString);
                select firstOnly TableId from subComponentControlConstraint
                where subComponentControlConstraint.ExpressionConstraint == expressionConstraintRecId
                join TableId from subComponentControl
                where subComponentControl.RecId == subComponentControlConstraint.SubComponentControl
                join Type from subComponent
                where subComponent.RecId == subComponentControl.SubComponent;

                switch (subComponent.Type)
                {
                    case PCSubComponentType::SubComponent:
                        return "@SYS4001847";
                    case PCSubComponentType::UserRequirement:
                        return "@SYS4001848";
                }
                break;
            case Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.ConditionType::Operation:
                return "@SYS4001849";
            case Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.ConditionType::SubPart:
                return "@SYS4001850";
        }

        return _defaultMessage;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserialize</Name>
				<Source><![CDATA[
    private Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.Error deserialize(str _json)
    {
        return new System.Web.Script.Serialization.JavaScriptSerializer(new System.Web.Script.Serialization.SimpleTypeResolver()).DeserializeObject(_json);
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a configuration error.
    /// </summary>
    /// <param name = "_error">A configuration error.</param>
    /// <returns>A string representation of the error.</returns>
    public str handleError(Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.Error _error)
    {
        var error = this.deserialize(_error.get_JSONObject().get_JSON());

        var expressionParseError = error as Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.ExpressionParseError;

        if (expressionParseError != null)
        {
            return this.handleExpressionParseError(expressionParseError);
        }

        var valueNotInDomainError = error as Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.ValueNotInDomainError;

        if (valueNotInDomainError != null)
        {
            return this.handleValueNotInDomainError(valueNotInDomainError);
        }

        var circularityError = error as Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.CircularityError;

        if (circularityError != null)
        {
            return this.handleCircularityError(circularityError);
        }

        var invalidCalculationTargetAttribute = error as Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.InvalidCalculationTargetAttributeError;

        if (invalidCalculationTargetAttribute != null)
        {
            return this.handleInvalidCalculationTargetAttribute(invalidCalculationTargetAttribute);
        }

        var aggregateError = error as Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.AggregateError;

        if (aggregateError != null)
        {
            return this.handleAggregateError(aggregateError);
        }

        var multipleCalculationsWithSameTargetAttributeError = error as Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.MultipleCalculationsWithSameTargetAttributeError;

        if (multipleCalculationsWithSameTargetAttributeError != null)
        {
            return this.handleMultipCalculationWithSameTarget(multipleCalculationsWithSameTargetAttributeError);
        }

        if (error is Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.UnsolvableModelError)
        {
            return "@SYS4000305";
        }

        
        var invalidAttributeNameError = error as Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.InvalidAttributeNameError;

        if (invalidAttributeNameError != null)
        {
            return strFmt("@SCM:PCAttributeNameInvalidError", invalidAttributeNameError.get_AttributeName());
        }

        throw error(error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleCircularityError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the circularity error.
    /// </summary>
    /// <param name = "_error">The error.</param>
    /// <returns>
    /// An error message.
    /// </returns>
    protected str handleCircularityError(Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.CircularityError _error)
    {
        return "@SCM:PCCircularityErrorMessage";
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleInvalidCalculationTargetAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the invalid calculation target attribute error.
    /// </summary>
    /// <param name = "_error">The error.</param>
    /// <returns>
    /// An error message.
    /// </returns>
    protected str handleInvalidCalculationTargetAttribute(Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.InvalidCalculationTargetAttributeError _error)
    {
        return strFmt("@SCM:PCInvalidTargetAttributeErrorMessage", _error.get_AttributeOmlName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleExpressionParseError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles an expression parse error.
    /// </summary>
    /// <param name="_error">
    /// The error.
    /// </param>
    /// <returns>
    /// An error message.
    /// </returns>
    protected str handleExpressionParseError(Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.ExpressionParseError _error)
    {
        str label;

        switch (_error.ExpressionType)
        {
            case Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.ExpressionType::Constraint:
                label = "@SYS4001851";
                break;
            case Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.ExpressionType::Calculation:
                label = "@SYS4001852";
                break;
            case Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.ExpressionType::Condition:
                label = this.handleConditionExpressionParseError(_error.get_ConditionType(), _error.get_id(), '');
                break;
            default:
                // Default if no case matches
                return '';
        }

        return strFmt(label, _error.get_owningElementName(), PCClass::find(str2int64(_error.get_componentId())).Name, _error.get_expression(), _error.get_ErrorLineStart(), _error.get_ErrorColumnStart(), '');
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleValueNotInDomainError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles a value not in domain error.
    /// </summary>
    /// <param name = "_valueNotInDomainError">A value not in domain error.</param>
    /// <returns>A string representation of the error.</returns>
    protected str handleValueNotInDomainError(Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.ValueNotInDomainError _valueNotInDomainError)
    {
        return strFmt("@SYS4000281", _valueNotInDomainError.get_Value(), _valueNotInDomainError.get_AttributeDisplayName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleMultipCalculationWithSameTarget</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the error for when multiple calculations have the same target attribute.
    /// </summary>
    /// <param name = "_multipleTargetError">The error.</param>
    /// <returns>A string representation of the error.</returns>
    protected str handleMultipCalculationWithSameTarget(Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.MultipleCalculationsWithSameTargetAttributeError _multipleTargetError)
    {
        return strFmt("@SYS4004651", _multipleTargetError.get_TargetAttributeOmlName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleAggregateError</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles an aggregate error.
    /// </summary>
    /// <param name="_aggregateError">
    /// The aggregate error.
    /// </param>
    /// <returns>A string representation of the error.</returns>
    protected str handleAggregateError(Microsoft.Dynamics.Ax.Frameworks.Controls.ProductConfiguration.Events.Errors.AggregateError _aggregateError)
    {
        str       errorMessage;
        CLRObject innerErrors   = _aggregateError.get_Errors();
        CLRObject enumerator    = innerErrors.GetEnumerator();

        while (enumerator.MoveNext())
        {
            errorMessage += this.handleError(enumerator.get_Current()) + '\n';
        }

        return errorMessage;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>