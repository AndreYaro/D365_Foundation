<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqDemPlanImportForecastController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>ReqDemPlanImportForecastController</c> class is a controller for launching the forecast import process.
/// </summary>
class ReqDemPlanImportForecastController extends ReqDemPlanSysOperationServiceController implements BatchRetryable
{
    #Admin
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        return "@DMP:ImportForecast";
    }

]]></Source>
			</Method>
			<Method>
				<Name>confirmImportBeforeSystemDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the actual import start date is in the past,
    ///     and if so, asks the user to confirm importing forecast in the past.
    /// </summary>
    /// <returns>
    ///     <c>true</c> if forecast is not being imported in the past,
    ///     or if it is, the user has allowed it; otherwise, <c>false</c>.
    /// </returns>
    public boolean confirmImportBeforeSystemDate()
    {
        boolean         allowImport = true;
        date            forecastImportStartDate;
        DialogButton    userChoice;

        forecastImportStartDate = this.dataContract().parmForecastStart();

        if (forecastImportStartDate < DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone()))
        {
            userChoice = Box::yesNo(strfmt("@DMP1056", forecastImportStartDate), DialogButton::No, this.caption());
            allowImport = DialogButton::Yes == userChoice;
        }

        return allowImport;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForecastImportRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates records in the given ReqDemPlanImportForecastTmp buffer according to the
    /// settings in the data contract.
    /// </summary>
    /// <param name="_forecastModelPerCompany">
    /// The table buffer to create records in.
    /// </param>
    public void createForecastImportRecords(ReqDemPlanImportForecastTmp _forecastModelPerCompany)
    {
        container   companyForecastModelMapping;
        container   current;
        int         conSize;
        int         i;

        companyForecastModelMapping = this.dataContract().parmCompanyForecastModelMapping();
        conSize = conLen(companyForecastModelMapping);

        for (i = 1; i <= conSize; i++)
        {
            current = conPeek(companyForecastModelMapping, i);

            _forecastModelPerCompany.clear();
            [_forecastModelPerCompany.ForecastDataAreaID, _forecastModelPerCompany.ForecastModelId] = current;
            _forecastModelPerCompany.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the instance of the data contract for this controller.
    /// </summary>
    /// <returns>
    ///     An instance of the <c>ReqDemPlanImportForecastDataContract</c> class.
    /// </returns>
    public ReqDemPlanImportForecastDataContract dataContract()
    {
        // cast from Object to ReqDemPlanImportForecastDataContract
        return this.getDataContractObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBatchParametersFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the batch execution parameters from the dialog.
    /// </summary>
    public void getBatchParametersFromDialog()
    {
        if (this.batchInfo())
        {
            this.batchInfo().getFromDialog();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initChangeTracking</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the change tracking checkbox from the data contract.
    /// </summary>
    /// <param name="_checkBoxControl">
    ///     The checkbox control.
    /// </param>
    public void initChangeTracking(FormCheckBoxControl _checkBoxControl)
    {
        if (!_checkBoxControl)
        {
            throw error(Error::missingParameter(this));
        }

        _checkBoxControl.value(this.dataContract().parmEnableChangeTracking());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataContractFromAvailableForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the data contract from the available forecast.
    /// </summary>
    public void initDataContractFromAvailableForecast()
    {
        ReqDemPlanForecast          forecast;
        ReqDemPlanImportForecastTmp modelMapping;
        ReqPlanId                   planId;
        ForecastModelId             forecastModelId;

        while select crossCompany DataAreaId
            from forecast
            group by DataAreaId
        {
            changecompany(forecast.company())
            {
                planId = ReqParameters::find().CurrentReqPlanIdSchedStatic;
                forecastModelId = ReqPlan::findReqPlanId(planId).ForecastModelId;

                modelMapping.ForecastDataAreaID = forecast.DataAreaId;
                modelMapping.ForecastModelId = forecastModelId;
                modelMapping.insert();
            }
        }

        this.dataContract().initFromBuffer(modelMapping);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>DataAreaId</c> for the usage of SysLastValue framework.
    /// </summary>
    /// <returns>
    /// A <c>dataAreaId</c> value.
    /// </returns>
    /// <remarks>
    /// Returning constant <c>DataAreaId</c> makes <c>xSysLastValue</c> class persist data cross-company.
    /// </remarks>
    protected DataAreaId lastValueDataAreaId()
    {
        return #DATCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super(classStr(ReqDemPlanImportForecastService),
            methodStr(ReqDemPlanImportForecastService, run),
            SysOperationExecutionMode::Synchronous);

        this.parmDialogCaption(this.caption());
        this.parmShowProgressForm(true);

        this.validateRequiredForecastParameters(ReqDemPlanForecastVersion::Forecasted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onChangeTrackingModified</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Handles checkbox changes in the dialog.
    /// </summary>
    /// <param name="_checkBoxControl">
    ///     The checkbox control.
    /// </param>
    public void onChangeTrackingModified(FormCheckBoxControl _checkBoxControl)
    {
        this.dataContract().parmEnableChangeTracking(_checkBoxControl.value());
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the name of the form to use as template for the dialog.
    /// </summary>
    /// <returns>
    /// The name of the form to use as template for the dialog.
    /// </returns>
    protected FormName templateForm()
    {
        return formStr(ReqDemPlanImportForecastDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static ReqDemPlanImportForecastController construct()
    {
        return new ReqDemPlanImportForecastController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ReqDemPlanImportForecastController controller = ReqDemPlanImportForecastController::construct();

        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>