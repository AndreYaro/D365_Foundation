<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>Tax1099Update2018</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>Tax1099Update2018</c> class extends <c>Tax1099Update</c> and performs 1099 updates for tax year 2018.
/// </summary>
[ExportMetadata(classStr(Tax1099Update), 2018)]
[Export("Dynamics.AX.Application.Tax1099Update")]
internal final class Tax1099Update2018 extends Tax1099Update
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the performUpdate method of <c>Tax1099Update</c> class.
    /// </summary>
    /// <returns>true if either a 1099-DIV property in <c>Tax1099Fields</c> or the 1099-DIV vendor transactions were updated, otherwise, false.</returns>
    internal boolean performUpdate()
    {
        ttsbegin;
        this.updateTax1099DivFields();
        this.updateVendorTransactionsFor1099Div();
        this.removeNonComputedTax1099DivFields();
        ttscommit;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099UpdateInstanceClassName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ClassName</c> of the instance of <c>Tax1099Update</c> class.
    /// </summary>
    /// <returns><c>ClassName</c> of the instance of <c>Tax1099Update</c> class.</returns>
    internal ClassName getTax1099UpdateInstanceClassName()
    {
        return classStr(Tax1099Update2018);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099UpdateMethodName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>MethodName</c> that performs 1099 updates in the instance of <c>Tax1099Update</c> class.
    /// </summary>
    /// <returns><c>MethodName</c> of the method that implements 1099 updates.</returns>
    internal MethodName getTax1099UpdateMethodName()
    {
        return methodStr(Tax1099Update2018, performUpdate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTax1099TaxYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the tax year that performs 1099 updates in the instance of <c>Tax1099Update</c> class.
    /// </summary>
    /// <returns>The tax year that implements 1099 updates.</returns>
    internal year getTax1099TaxYear()
    {
        return 2018;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099DivFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs 2018 changes in <c>Tax1099Fields</c> for form 1099-DIV.
    /// </summary>
    private void updateTax1099DivFields()
    {
        Tax1099Fields tax1099Fields;
        this.setSkipMethods(tax1099Fields);

        ttsbegin;

        // 2017 Boxes 5-14 are now 2018 Boxes 6-15.
        // Notes: The following are non-computed fields:
        // a) 2017 DIV-7 or 2018 DIV-8.
        // b) 2017 DIV-12 and 13 or 2018 DIV-13 and 14.
        this.copyField(tax1099Fields, Tax1099DivConstants::D14, Tax1099DivConstants::D15);
        this.copyField(tax1099Fields, Tax1099DivConstants::D11, Tax1099DivConstants::D12);
        this.copyField(tax1099Fields, Tax1099DivConstants::D10, Tax1099DivConstants::D11);
        this.copyField(tax1099Fields, Tax1099DivConstants::D9, Tax1099DivConstants::D10);
        this.copyField(tax1099Fields, Tax1099DivConstants::D8, Tax1099DivConstants::D9);
        this.copyField(tax1099Fields, Tax1099DivConstants::D6, Tax1099DivConstants::D7);
        this.copyField(tax1099Fields, Tax1099DivConstants::D5, Tax1099DivConstants::D6);

        ttscommit;

        // Rename DIV-5.
        update_recordset tax1099Fields
            setting
                Description = "@Tax:Section199ADividends",
                Tax1099Amount = Tax1099DivConstants::D5MinimumAmount
            where
                tax1099Fields.Tax1099Box == Tax1099DivConstants::D5;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateVendorTransactionsFor1099Div</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>Tax1099Fields</c> in vendor transactions for 1099-DIV form changes in 2018.
    /// </summary>
    private void updateVendorTransactionsFor1099Div()
    {
        this.updateTax1099FieldsForVendorTransactions(Tax1099DivConstants::D14, Tax1099DivConstants::D15);
        this.updateTax1099FieldsForVendorTransactions(Tax1099DivConstants::D11, Tax1099DivConstants::D12);
        this.updateTax1099FieldsForVendorTransactions(Tax1099DivConstants::D10, Tax1099DivConstants::D11);
        this.updateTax1099FieldsForVendorTransactions(Tax1099DivConstants::D9, Tax1099DivConstants::D10);
        this.updateTax1099FieldsForVendorTransactions(Tax1099DivConstants::D8, Tax1099DivConstants::D9);
        this.updateTax1099FieldsForVendorTransactions(Tax1099DivConstants::D6, Tax1099DivConstants::D7);
        this.updateTax1099FieldsForVendorTransactions(Tax1099DivConstants::D5, Tax1099DivConstants::D6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeNonComputedTax1099DivFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the non-computed DIV fields in <c>Tax1099Fields</c> for tax year 2018.
    /// </summary>
    private void removeNonComputedTax1099DivFields()
    {
        Tax1099Fields tax1099Fields;
        this.setSkipMethods(tax1099Fields);

        delete_from tax1099Fields where tax1099Fields.Tax1099Box == Tax1099DivConstants::D8 
            || tax1099Fields.Tax1099Box == Tax1099DivConstants::D13
            || tax1099Fields.Tax1099Box == Tax1099DivConstants::D14;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSkipMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the necessary skip methods on the given buffer.
    /// </summary>
    /// <param name = "_common"> Buffer on which the skip methods should be set.</param>
    private void setSkipMethods(Common _common)
    {
        _common.skipAosValidation(true);
        _common.skipDatabaseLog(true);
        _common.skipDataMethods(true);
        _common.skipEvents(true);
        _common.skipPostLoad(true);
        _common.skipNumberSequenceCheck(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTax1099FieldsForVendorTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates <c>Tax1099Fields</c> for vendor transactions that occurred in 2018.
    /// </summary>
    /// <param name = "sourceTax1099Box">Source <c>Tax1099Box</c>.</param>
    /// <param name = "destinationTax1099Box">Destination <c>Tax1099Box</c>.</param>
    private void updateTax1099FieldsForVendorTransactions(Tax1099Box sourceTax1099Box, Tax1099Box destinationTax1099Box)
    {
        const TransDate FirstDayOf2018 = 1\1\2018;
        const TransDate LastDayOf2018 = 31\12\2018;

        Tax1099FieldsRecId sourceTax1099FieldsRecId = Tax1099Fields::findByTax1099Box(sourceTax1099Box, Tax1099Type::F1099DIV).RecId;
        Tax1099FieldsRecId destinationTax1099FieldsRecId = Tax1099Fields::findByTax1099Box(destinationTax1099Box, Tax1099Type::F1099DIV).RecId;

        if (!sourceTax1099FieldsRecId || !destinationTax1099FieldsRecId)
        {
            return;
        }

        // Update 1099 fields for vendor and vendor transactions.
        VendTable vendTable;
        VendTrans vendTrans;

        // Vendor
        this.setSkipMethods(vendTable);

        update_recordset vendTable
            setting
                Tax1099Fields = destinationTax1099FieldsRecId
            join vendTrans
            where vendTable.Tax1099Fields != destinationTax1099FieldsRecId
                && vendTable.AccountNum == vendTrans.AccountNum
                && vendTable.Tax1099Fields == sourceTax1099FieldsRecId
                && vendTrans.TransDate >= FirstDayOf2018
                && vendTrans.TransDate <= LastDayOf2018;

        // Transactions
        this.setSkipMethods(vendTrans);

        update_recordset vendTrans
            setting
                Tax1099Fields = destinationTax1099FieldsRecId
            join vendTable
            where vendTrans.Tax1099Fields != destinationTax1099FieldsRecId
                && vendTrans.AccountNum == vendTable.AccountNum
                && vendTrans.Tax1099Fields == sourceTax1099FieldsRecId
                && vendTrans.TransDate >= FirstDayOf2018
                && vendTrans.TransDate <= LastDayOf2018;

        // Tax1099Summary
        Tax1099Summary tax1099Summary;
        this.setSkipMethods(tax1099Summary);

        update_recordset tax1099Summary
            setting
                Tax1099Fields = destinationTax1099FieldsRecId
            join vendTable
            where tax1099Summary.Tax1099Fields != destinationTax1099FieldsRecId
                && tax1099Summary.VendAccount == vendTable.AccountNum
                && tax1099Summary.Tax1099Fields == sourceTax1099FieldsRecId
                && tax1099Summary.TransDate >= FirstDayOf2018
                && tax1099Summary.TransDate <= LastDayOf2018;

        // VendSettlementTax1099
        VendSettlementTax1099 vendSettlementTax1099;
        this.setSkipMethods(vendSettlementTax1099);

        update_recordset vendSettlementTax1099
            setting
                Tax1099Fields = destinationTax1099FieldsRecId
            join vendTable
            where vendSettlementTax1099.Tax1099Fields != destinationTax1099FieldsRecId
                && vendSettlementTax1099.VendAccount == vendTable.AccountNum
                && vendSettlementTax1099.Tax1099Fields == sourceTax1099FieldsRecId
                && vendSettlementTax1099.TransDate >= FirstDayOf2018
                && vendSettlementTax1099.TransDate <= LastDayOf2018;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>