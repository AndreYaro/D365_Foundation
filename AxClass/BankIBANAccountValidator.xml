<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankIBANAccountValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class BankIBANAccountValidator
{
    private BankIBAN bankIBAN;
    private BankIBANCountryAccountStructure countryAccountStructure;
    private BankIBANCountryCode countryCode;
    private BankAccount bankIBANAccountNumber;
    private BankRegNum bankIBANRoutingNumber;
    private BankRegNum registrationNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static BankIBANAccountValidator construct(BankIBAN _bankIBAN)
    {
        return new BankIBANAccountValidator(_bankIBAN);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankIBANAccountNumber</Name>
				<Source><![CDATA[
    public str getBankIBANAccountNumber()
    {
        return bankIBANAccountNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(BankIBAN _bankIBAN)
    {
        bankIBAN = this.getCleanIBAN(_bankIBAN);

        countryCode = this.getCountryCode(bankIBAN);
        countryAccountStructure = BankIBANCountryAccountStructure::findByCountryCode(countryCode);

        if (countryAccountStructure)
        {
            bankIBANAccountNumber = this.getBankAccountNumber(bankIBAN, countryAccountStructure);
            bankIBANRoutingNumber = this.getBankRoutingNumber(bankIBAN, countryAccountStructure);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCleanIBAN</Name>
				<Source><![CDATA[
    protected BankIBAN getCleanIBAN(BankIBAN _bankIBAN)
    {
        BankIBAN cleanIBAN = SysCompareText::suppressWhiteSpace(_bankIBAN);
        return cleanIBAN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the country/region code specified in the underlying IBAN.
    /// </summary>
    /// <returns>The two-character country/region code stored within the underlying IBAN.</returns>
    protected BankIBANCountryCode getCountryCode(BankIBAN _bankIBAN)
    {
        int lengthOfCountryCode = new SysDictType(extendedtypenum(BankIBANCountryCode)).stringLen();
        return subStr(_bankIBAN, 0, lengthOfCountryCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank account number stored within the underlying IBAN based on account start and length
    /// specified in the corresponding country/region specific account structure.
    /// </summary>
    /// <returns>The bank account number stored within the underlying IBAN.</returns>
    protected str getBankAccountNumber(BankIBAN _bankIBAN, BankIBANCountryAccountStructure _accountStructure)
    {
        str accountNumber = subStr(_bankIBAN, _accountStructure.AccountStart, _accountStructure.AccountLength);
        return accountNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBankRoutingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the bank routing number stored within the underlying IBAN based on routing start and length
    /// specified in the corresponding country/region specific account structure.
    /// </summary>
    /// <returns>The bank account number stored within the underlying IBAN.</returns>
    protected str getBankRoutingNumber(BankIBAN _bankIBAN, BankIBANCountryAccountStructure _accountStructure)
    {
        return subStr(_bankIBAN, _accountStructure.RoutingStart, _accountStructure.RoutingLength);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankIBANFollowsMod97Format</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the integrity of a given IBAN through use of Mod97 format validation.
    /// </summary>
    /// <returns>true if the IBAN format passes Mod97 validation; otherwise, false.</returns>
    public boolean validateBankIBANFollowsMod97Format()
    {
        boolean ret = ISO7064::verifyMOD1271_36(bankIBAN);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRegistrationNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the Routing number
    /// </summary>
    /// <param name = "_registrationNum">Routing number</param>
    public void parmRegistrationNum(BankRegNum _registrationNum = registrationNum)
    {
        registrationNum = _registrationNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankIBANFollowsCountryStructure</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the following three aspects of a given IBAN:
    /// 1. The IBAN contains a valid country/region code
    /// 2. The IBAN is the correct length for the specified country
    /// 3. The IBAN bank account number matches that of the bank account with which it is associated.
    /// </summary>
    /// <param name = "_accountNum">The account number for the related bank account.</param>
    /// <returns>True if the given IBAN is valid; otherwise, false.</returns>
    public boolean validateBankIBANFollowsCountryStructure(BankAccount _accountNum)
    {
        boolean ret = false;

        if (!bankIBAN || (this.validateBankIBANHasValidCountryCode()
            && this.validateBankIBANIsCorrectLength()
            && (this.validateBankAccountContainsRoutingAndAccountNumber(_accountNum) ||
                (this.validateBankIBANMatchesAccountNumber(_accountNum) && this.validateBankIBANMatchesRoutingNumber(registrationNum)))))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccountContainsRoutingAndAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// The validates Routing number and Account number present in Bank account number at their positions correspondingly.
    /// </summary>
    /// <param name = "_accountNumber">The Bank account number to be compared</param>
    /// <returns>True, if Bank account number start with Routing number and ends with Account number; otherwise, false.</returns>
    private boolean validateBankAccountContainsRoutingAndAccountNumber(BankAccount _accountNum)
    {
        boolean isValidBankAccountNum = false;

        //When the _accountNum does not contain a check digit.
        if (strLen(bankIBANRoutingNumber) + strLen(bankIBANAccountNumber) == strLen(_accountNum))
        {
            isValidBankAccountNum = strStartsWith(_accountNum, bankIBANRoutingNumber) && strEndsWith(_accountNum, bankIBANAccountNumber);
        }

        //When the _accountNum contain a check digit and the check digit is between routing number and account number.
        else if (strLen(bankIBANRoutingNumber) + strLen(bankIBANAccountNumber) != strLen(_accountNum)
                && countryAccountStructure.RoutingStart + countryAccountStructure.RoutingLength != countryAccountStructure.AccountStart)
        {
            isValidBankAccountNum = strStartsWith(_accountNum, bankIBANRoutingNumber) && strEndsWith(_accountNum, bankIBANAccountNumber);
        }

        //When the _accountNum contain a check digit and the check digit is after the account number.
        else if (strLen(bankIBANRoutingNumber) + strLen(bankIBANAccountNumber) != strLen(_accountNum)
                && countryAccountStructure.RoutingStart + countryAccountStructure.RoutingLength == countryAccountStructure.AccountStart)
        {
            BankAccount bankAccountNum = subStr(_accountNum, 0, (strLen(bankIBANRoutingNumber) + strLen(bankIBANAccountNumber)));

            isValidBankAccountNum = strStartsWith(bankAccountNum, bankIBANRoutingNumber) && strEndsWith(bankAccountNum, bankIBANAccountNumber);
        }

        return isValidBankAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankIBANHasValidCountryCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the country/region code within a given IBAN corresponds to an existing
    /// country/region specific account structure.
    /// </summary>
    /// <returns>True if a corresponding country/region specific account structure was found; otherwise, false.</returns>
    public boolean validateBankIBANHasValidCountryCode()
    {
        boolean isValidCountryCode = countryAccountStructure.RecId != 0;

        if (!isValidCountryCode)
        {
            warning(strFmt("@CashManagement:BankIBANValidationCountryCodeNoExist", countryCode));
        }

        return isValidCountryCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankIBANIsCorrectLength</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the length of a given IBAN is equal to the length specified
    /// in the country/region specific account structure for that IBAN.
    /// </summary>
    /// <returns>
    /// True if the IBAN length matches what was specified in the country/region specific account structure; otherwise, false.
    /// </returns>
    public boolean validateBankIBANIsCorrectLength()
    {
        int lengthOfIBAN = strLen(bankIBAN);
        int lenghtOfAccountStructure = countryAccountStructure.Length;

        boolean isCorrectLength = lengthOfIBAN == lenghtOfAccountStructure;

        if (!isCorrectLength)
        {
            warning(strFmt("@CashManagement:BankIBANValidationIncorrectAccountLength",
                countryAccountStructure.CountryCode,
                lenghtOfAccountStructure,
                lengthOfIBAN));
        }

        return isCorrectLength;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankIBANMatchesAccountNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the bank account number within a given IBAN matches a given bank account number.
    /// </summary>
    /// <param name = "_accountId">The bank account number to be compared.</param>
    /// <returns>True if the bank account number matches; otherwise, false.</returns>
    public boolean validateBankIBANMatchesAccountNumber(BankAccount _accountId)
    {
        // Check that an account number was found. This is necessary because some country/region account structures
        // do not yet have account number start and length specified, making parsing impossible. An empty account
        // number will be found in these instances so validation should succeed.
        boolean areAccountNumbersEqual = false;

        if (bankIBANAccountNumber)
        {
            int lengthOfIBANAccountNumber = strLen(bankIBANAccountNumber);
            int lengthOfBankAccountNumber = strLen(_accountId);

            if (lengthOfBankAccountNumber >= lengthOfIBANAccountNumber)
            {
                BankAccount accountIdWithoutCheckDigits = subStr(_accountId, 0, lengthOfIBANAccountNumber);
                areAccountNumbersEqual = accountIdWithoutCheckDigits == bankIBANAccountNumber;
            }
        }
        else
        {
            areAccountNumbersEqual = true;
        }

        if (!areAccountNumbersEqual)
        {
            warning(strFmt(this.getMessageBankIBANValidationAccountNumbersDoNotMatch(), bankIBANAccountNumber, _accountId));
        }

        return areAccountNumbersEqual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankIBANMatchesRoutingNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the bank routing number within a given IBAN matches a given bank routing number.
    /// </summary>
    /// <param name = "_routingNumber">The routing number to be compared.</param>
    /// <returns>True if the bank routing number matches; otherwise, false.</returns>
    [Hookable(false)]
    final public boolean validateBankIBANMatchesRoutingNumber(BankRegNum _routingNumber)
    {
        // Check that a routing number was found. This is necessary because some country/region account structures
        // do not yet have routing number start and length specified, making parsing impossible. An empty routing
        // number will be found in these instances so validation should succeed.
        boolean areRoutingNumbersEqual = false;

        if (bankIBANRoutingNumber)
        {
            int lengthOfIBANRoutingNumber = strLen(bankIBANRoutingNumber);
            int lengthOfBankRoutingNumber = strLen(_routingNumber);

            if (lengthOfBankRoutingNumber >= lengthOfIBANRoutingNumber)
            {
                BankAccount accountIdWithoutCheckDigits = subStr(_routingNumber, 0, lengthOfIBANRoutingNumber);
                areRoutingNumbersEqual = accountIdWithoutCheckDigits == bankIBANRoutingNumber;
            }

            if (!areRoutingNumbersEqual)
            {
                warning(strFmt("@CashManagement:BankIBANValidationRoutingNumbersDoNotMatch", bankIBANRoutingNumber, _routingNumber));
            }
        }
        else
        {
            areRoutingNumbersEqual = true;
        }

        return areRoutingNumbersEqual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMessageBankIBANValidationAccountNumbersDoNotMatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the message to be show to the user when IBAN and account number do not match.
    /// </summary>
    /// <returns>The message to be show to the user when IBAN and account number do not match.</returns>
    protected str getMessageBankIBANValidationAccountNumbersDoNotMatch()
    {
        return "@CashManagement:BankIBANValidationAccountNumbersDoNotMatch";
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>