<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerPostingSubledgerJournalController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerPostingSubledgerJournalController</c> class manages the records that are created at the
/// time of a transfer to the subledger journal.
/// </summary>
/// <remarks>
/// This class manages the <c>SubledgerJournalAccountEntry</c> table.
/// </remarks>
public class LedgerPostingSubledgerJournalController
{
    RecId               nextTempRecId;

    // This collection contains a mapping from the sorting fields for a general
    // journal account entry record to its temporary record ID. Each unique combination of
    // sorting fields requires a unique temporary record ID.
    Map                 summaryGeneralJournalAccountEntryToTempLineId;

    Map                 generalJournalAccountEntryTransferLevel;
    Map                 generalJournalAccountEntryCountByHeader;
    Map                 generalJournalToSubledgerJournalAccountEntryTempIdMapping;

    Set                 detailGeneralJournalAccountEntryRecIdCollection;
    Set                 summaryGeneralJournalAccountEntryRecIdCollection;

    // Collections containing the list of GLJAEs to be converted into SLJAEs
    RecordSortedList    detailGeneralJournalAccountEntryCollection;
    RecordSortedList    summaryGeneralJournalAccountEntryCollection;
    RecordSortedList    taxTransGeneralJournalAccountEntryCollection;
    private AccountingEventRecId accountingEventRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmAccountingEventRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get and set the accounting event for the ledger voucher object
    /// </summary>
    /// <param name = "_accountingEventRecId">The accounting event that this LedgerPostingSubledgerJournalController belongs</param>
    /// <returns>Accounting event that this ledger voucher object belongs</returns>
    public AccountingEventRecId parmAccountingEventRecId(AccountingEventRecId _accountingEventRecId = accountingEventRecid)
    {
        accountingEventRecid = _accountingEventRecId;

        return accountingEventRecid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified information to the collection.
    /// </summary>
    /// <param name="_transferLevel">
    /// The transfer level of the information.
    /// </param>
    /// <param name="_generalJournalEntry">
    /// The general journal entry information.
    /// </param>
    /// <param name="_generalJournalAccountEntry">
    /// The general journal account entry information.
    /// </param>
    /// <param name="_taxTransactionRelationshipCollection">
    /// A collection of the tax transaction relationship information.
    /// </param>
    public void add(
        DetailSummary _transferLevel,
        GeneralJournalEntry _generalJournalEntry,
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        LedgerPostingOneToManyCollection _taxTransactionRelationshipCollection)
    {
        GeneralJournalAccountEntry generalJournalAccountEntryAdded;

        if (_transferLevel == DetailSummary::Detail)
        {
            generalJournalAccountEntryAdded = this.addGeneralJournalAccountEntry(
                _transferLevel,
                detailGeneralJournalAccountEntryCollection,
                detailGeneralJournalAccountEntryRecIdCollection,
                _generalJournalEntry,
                _generalJournalAccountEntry);
        }
        else
        {
            generalJournalAccountEntryAdded = this.addGeneralJournalAccountEntry(
                _transferLevel,
                summaryGeneralJournalAccountEntryCollection,
                summaryGeneralJournalAccountEntryRecIdCollection,
                _generalJournalEntry,
                _generalJournalAccountEntry);
        }

        this.addTaxTransGeneralJournalAccountEntry(
            generalJournalAccountEntryAdded,
            _taxTransactionRelationshipCollection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    private GeneralJournalAccountEntry addGeneralJournalAccountEntry(
        DetailSummary _transferLevel,
        RecordSortedList _generalJournalAccountEntryCollection,
        Set _generalJournalAccountEntryRecIdCollection,
        GeneralJournalEntry _generalJournalEntry,
        GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        GeneralJournalAccountEntry generalJournalAccountEntry;
        boolean success;
        RecId tempLineId;
        container lineValues;

        if ((_transferLevel == DetailSummary::Summary) && (_generalJournalAccountEntry.RecId != 0))
        {
            // specifying the RecId when in summary is not allowed because it would have to be ignored
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        generalJournalAccountEntry.data(_generalJournalAccountEntry);
        generalJournalAccountEntry.SubledgerJournalEntry = _generalJournalEntry.SubledgerJournalEntry;

        if (_transferLevel == DetailSummary::Detail && (generalJournalAccountEntry.RecId == 0))
        {
            // no summarization

            // assign a temporary record ID even if it has a
            // record ID to make sure we don't get a duplicate
            generalJournalAccountEntry.RecId = this.getNextTemporaryRecId();

            success = _generalJournalAccountEntryCollection.ins(generalJournalAccountEntry);
            Debug::assert(success);

            generalJournalAccountEntryTransferLevel.insert(generalJournalAccountEntry.RecId, _transferLevel);

            Debug::assert(!_generalJournalAccountEntryRecIdCollection.in(generalJournalAccountEntry.RecId));

            _generalJournalAccountEntryRecIdCollection.add(generalJournalAccountEntry.RecId);

            this.incrementCountForRecId(generalJournalAccountEntryCountByHeader, generalJournalAccountEntry.SubledgerJournalEntry);
        }
        else
        {
            // summarization

            lineValues = this.getGeneralJournalAccountEntryValues(_transferLevel, generalJournalAccountEntry);

            if (summaryGeneralJournalAccountEntryToTempLineId.exists(lineValues))
            {
                generalJournalAccountEntry.RecId = summaryGeneralJournalAccountEntryToTempLineId.lookup(lineValues);
            }
            else
            {
                tempLineId = this.getNextTemporaryRecId();

                summaryGeneralJournalAccountEntryToTempLineId.insert(lineValues, tempLineId);

                generalJournalAccountEntry.RecId = tempLineId;
            }

            if (_generalJournalAccountEntryCollection.find(generalJournalAccountEntry))
            {
                generalJournalAccountEntry.TransactionCurrencyAmount += _generalJournalAccountEntry.TransactionCurrencyAmount;
                generalJournalAccountEntry.AccountingCurrencyAmount += _generalJournalAccountEntry.AccountingCurrencyAmount;
                generalJournalAccountEntry.ReportingCurrencyAmount += _generalJournalAccountEntry.ReportingCurrencyAmount;
                generalJournalAccountEntry.Quantity += _generalJournalAccountEntry.Quantity;

                success = _generalJournalAccountEntryCollection.ins(generalJournalAccountEntry, true);

                // RecordSortedList.Ins always returns false after a find so assert it is false
                Debug::assert(!success);
            }
            else
            {
                Debug::assert(!_generalJournalAccountEntryRecIdCollection.in(generalJournalAccountEntry.RecId));

                _generalJournalAccountEntryRecIdCollection.add(generalJournalAccountEntry.RecId);

                success = _generalJournalAccountEntryCollection.ins(generalJournalAccountEntry);
                Debug::assert(success);

                generalJournalAccountEntryTransferLevel.insert(generalJournalAccountEntry.RecId, _transferLevel);

                this.incrementCountForRecId(generalJournalAccountEntryCountByHeader, generalJournalAccountEntry.SubledgerJournalEntry);
            }
        }

        return generalJournalAccountEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxTransGeneralJournalAccountEntry</Name>
				<Source><![CDATA[
    private void addTaxTransGeneralJournalAccountEntry(
        GeneralJournalAccountEntry _generalJournalAccountEntry,
        LedgerPostingOneToManyCollection _taxTransactionRelationshipCollection)
    {
        Set                                 taxTransRelationshipTypeCollection;
        SetEnumerator                       taxTransRelationshipTypeCollectionEnumerator;
        TaxTransRelationshipType            taxTransRelationshipType;
        TaxTransGeneralJournalAccountEntry  taxTransGeneralJournalAccountEntry;
        boolean                             haveMore;
        boolean                             success;
        TaxTransRecId                       taxTransRecId;
        AmountMST                           accountingCurrencyAmount;
        AmountCur                           transactionCurrencyAmount;

        if (_taxTransactionRelationshipCollection)
        {
            haveMore = _taxTransactionRelationshipCollection.first();
            while (haveMore)
            {
                taxTransRecId = _taxTransactionRelationshipCollection.currentOne();
                taxTransRelationshipTypeCollection = _taxTransactionRelationshipCollection.currentMany();
                taxTransRelationshipTypeCollectionEnumerator = taxTransRelationshipTypeCollection.getEnumerator();

                while (taxTransRelationshipTypeCollectionEnumerator.moveNext())
                {
                    [taxTransRelationshipType, accountingCurrencyAmount, transactionCurrencyAmount] = taxTransRelationshipTypeCollectionEnumerator.current();

                    taxTransGeneralJournalAccountEntry = TaxTransGeneralJournalAccountEntry::initFromGeneralJournalAccountEntry(_generalJournalAccountEntry);
                    taxTransGeneralJournalAccountEntry.TaxTrans = taxTransRecId;
                    taxTransGeneralJournalAccountEntry.TaxTransRelationship = taxTransRelationshipType;
                    taxTransGeneralJournalAccountEntry.AccountingCurrencyAmount = accountingCurrencyAmount;
                    taxTransGeneralJournalAccountEntry.TransactionCurrencyAmount = transactionCurrencyAmount;
                    taxTransGeneralJournalAccountEntry.TransactionCurrency = _generalJournalAccountEntry.TransactionCurrencyCode;
                    // In legacy posting allocation factor is always 1.
                    taxTransGeneralJournalAccountEntry.AllocationFactor = 1;

                    if (!taxTransGeneralJournalAccountEntryCollection.find(taxTransGeneralJournalAccountEntry))
                    {
                        // duplicates occur naturally during summarization, ignore the duplicates and keep the first one added
                        success = taxTransGeneralJournalAccountEntryCollection.ins(taxTransGeneralJournalAccountEntry);
                        Debug::assert(success);
                    }
                }

                haveMore = _taxTransactionRelationshipCollection.next();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubledgerJourAccEntryCollection</Name>
				<Source><![CDATA[
    private RecordSortedList createSubledgerJourAccEntryCollection()
    {
        RecordSortedList newList;

        newList = new RecordSortedList(tableNum(SubledgerJournalAccountEntry));
        newList.sortOrder(fieldNum(SubledgerJournalAccountEntry, RecId));

        return newList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubledgerJournalAccountEntries</Name>
				<Source><![CDATA[
    private void createSubledgerJournalAccountEntries(RecordSortedList _generaJournalAccountEntryCollection, RecordSortedList _subledgerJournalAccountEntryCollection)
    {
        boolean haveRecord;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        int64 currentLine;
        Map currentLineCountByHeader;
        int64 lineCount;
        Set detailCreatedForSubledgerJournalEntry;

        if (_generaJournalAccountEntryCollection.len() == 0)
        {
            return;
        }

        currentLineCountByHeader = new Map(Types::Int64, Types::Int64);
        detailCreatedForSubledgerJournalEntry = new Set(Types::Int64);

        haveRecord = _generaJournalAccountEntryCollection.first(generalJournalAccountEntry);
        while (haveRecord)
        {
            currentLine = this.incrementCountForRecId(currentLineCountByHeader, generalJournalAccountEntry.SubledgerJournalEntry);
            lineCount = generalJournalAccountEntryCountByHeader.lookup(generalJournalAccountEntry.SubledgerJournalEntry);

            if (generalJournalAccountEntry.TransactionCurrencyAmount != 0 ||
                generalJournalAccountEntry.AccountingCurrencyAmount != 0 ||
                generalJournalAccountEntry.ReportingCurrencyAmount != 0 ||
                generalJournalAccountEntry.Quantity != 0 ||
                (currentLine == lineCount &&
                !detailCreatedForSubledgerJournalEntry.in(generalJournalAccountEntry.SubledgerJournalEntry)))
            {
                // the line will be created because at least one amount field has a value or it is the only line for the header
                detailCreatedForSubledgerJournalEntry.add(generalJournalAccountEntry.SubledgerJournalEntry);

                this.createSubledgerJournalAccountEntry(generalJournalAccountEntry, _subledgerJournalAccountEntryCollection);
            }

            haveRecord = _generaJournalAccountEntryCollection.next(generalJournalAccountEntry);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSubledgerJournalAccountEntry</Name>
				<Source><![CDATA[
    private void createSubledgerJournalAccountEntry(GeneralJournalAccountEntry _generalJournalAccountEntry, RecordSortedList _subledgerJournalAccountEntryCollection)
    {
        SubledgerJournalAccountEntry    subledgerJournalAccountEntry;
        boolean                         success;

        _generalJournalAccountEntry.initToSubledgerJournalAccountEntry(generalJournalAccountEntryTransferLevel.lookup(_generalJournalAccountEntry.RecId), subledgerJournalAccountEntry);
        subledgerJournalAccountEntry.SubledgerJournalEntry = _generalJournalAccountEntry.SubledgerJournalEntry;
        subledgerJournalAccountEntry.RecId = this.getNextTemporaryRecId();

        // The tax transactions are already summarized within the ledger voucher at this point. They should not be further summarized with tax transactions
        // recognized through the source document framework to ensure that sales tax amounts can be available for reporting and reconciliation.
        // Scenario: When posting an invoice approval journal that is matched to a purchase order, the invoice register reversal and the invoice journal transactions
        // share the same original invoice register voucher and the same new journal number. The invoice register reversal sales tax transactions are recognized
        // through ledger voucher framework while the sales tax actuals from the invoice is recognized through the source document framework.
        if (subledgerJournalAccountEntry.PostingType == LedgerPostingType::Tax)
        {
            subledgerJournalAccountEntry.IsTransferredInDetail = TransferPolicy::TransferIndividual;
            // OriginalTransferPolicy is not used by costing entries, however the original IsTransferredInDetail value is maintained in this field for correctness.
            subledgerJournalAccountEntry.OriginalTransferPolicy =  subledgerJournalAccountEntry.IsTransferredInDetail;
        }

        success = _subledgerJournalAccountEntryCollection.ins(subledgerJournalAccountEntry);
        Debug::assert(success);

        generalJournalToSubledgerJournalAccountEntryTempIdMapping.insert(_generalJournalAccountEntry.RecId, subledgerJournalAccountEntry.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxTransGeneralJourAccCollection</Name>
				<Source><![CDATA[
    private RecordSortedList createTaxTransGeneralJourAccCollection()
    {
        RecordSortedList newTaxTransGeneralJournalAccountEntryCollection;

        newTaxTransGeneralJournalAccountEntryCollection = new RecordSortedList(tableNum(TaxTransGeneralJournalAccountEntry));
        newTaxTransGeneralJournalAccountEntryCollection.sortOrderFromContainer(this.getTaxTransGeneralJournalAccEntrySorting());

        return newTaxTransGeneralJournalAccountEntryCollection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalAccountEntryValues</Name>
				<Source><![CDATA[
    private container getGeneralJournalAccountEntryValues(DetailSummary _transferLevel, GeneralJournalAccountEntry _generalJournalAccountEntry)
    {
        container lineValues;

        if (_transferLevel == DetailSummary::Detail)
        {
            // The detail option supports summarization using the RecId and
            // requires the same initial sorting as the summary option.
            lineValues =
                [_generalJournalAccountEntry.LedgerDimension,
                _generalJournalAccountEntry.TransactionCurrencyCode,
                _generalJournalAccountEntry.AllocationLevel,
                _generalJournalAccountEntry.HistoricalExchangeRateDate,
                _generalJournalAccountEntry.IsCorrection,
                _generalJournalAccountEntry.PostingType,
                _generalJournalAccountEntry.PaymentReference,
                _generalJournalAccountEntry.SubledgerJournalEntry,
                _generalJournalAccountEntry.RecId];
        }
        else
        {
            lineValues =
                [_generalJournalAccountEntry.LedgerDimension,
                _generalJournalAccountEntry.TransactionCurrencyCode,
                _generalJournalAccountEntry.AllocationLevel,
                _generalJournalAccountEntry.HistoricalExchangeRateDate,
                _generalJournalAccountEntry.IsCorrection,
                _generalJournalAccountEntry.PostingType,
                _generalJournalAccountEntry.PaymentReference,
                _generalJournalAccountEntry.SubledgerJournalEntry];
        }

        return lineValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextTemporaryRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a temporary record ID.
    /// </summary>
    /// <returns>
    /// A temporary record ID.
    /// </returns>
    protected RecId getNextTemporaryRecId()
    {
        nextTempRecId++;

        return nextTempRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxTransGeneralJournalAccEntrySorting</Name>
				<Source><![CDATA[
    private container getTaxTransGeneralJournalAccEntrySorting()
    {
        return
            [fieldNum(TaxTransGeneralJournalAccountEntry, GeneralJournalAccountEntry),
            // both the TaxTrans and TaxUncommitted fields are included but the
            // value of one of them is always zero because the table contains two
            // different kinds of records
            fieldNum(TaxTransGeneralJournalAccountEntry, TaxTrans),
            fieldNum(TaxTransGeneralJournalAccountEntry, TaxUncommitted),
            fieldNum(TaxTransGeneralJournalAccountEntry, TaxTransRelationship)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>incrementCountForRecId</Name>
				<Source><![CDATA[
    private int64 incrementCountForRecId(Map _countMap, RecId _recIdKey)
    {
        int64 value;

        if (_countMap.exists(_recIdKey))
        {
            value = _countMap.lookup(_recIdKey) + 1;
        }
        else
        {
            value = 1;
        }

        _countMap.insert(_recIdKey, value);

        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        Types recIdType;
        Types subledgerJournalAccountEntryRecIdType;
        Types generalJournalAccountEntryRecIdType;

        summaryGeneralJournalAccountEntryCollection = new RecordSortedList(tableNum(GeneralJournalAccountEntry));
        summaryGeneralJournalAccountEntryCollection.sortOrder(fieldNum(GeneralJournalAccountEntry, RecId));

        detailGeneralJournalAccountEntryCollection = new RecordSortedList(tableNum(GeneralJournalAccountEntry));
        detailGeneralJournalAccountEntryCollection.sortOrder(fieldNum(GeneralJournalAccountEntry, RecId));

        taxTransGeneralJournalAccountEntryCollection = this.createTaxTransGeneralJourAccCollection();

        summaryGeneralJournalAccountEntryRecIdCollection = new Set(typeName2Type(extendedTypeStr(RecId)));
        detailGeneralJournalAccountEntryRecIdCollection = new Set(typeName2Type(extendedTypeStr(RecId)));

        recIdType = typeName2Type(extendedTypeStr(RecId));
        subledgerJournalAccountEntryRecIdType = typeName2Type(extendedTypeStr(SubledgerJournalAccountEntryRecId));
        generalJournalAccountEntryRecIdType = typeName2Type(extendedTypeStr(GeneralJournalAccountEntryRecId));

        generalJournalAccountEntryCountByHeader = new Map(recIdType, recIdType);
        summaryGeneralJournalAccountEntryToTempLineId = new Map(Types::Container, recIdType);
        generalJournalAccountEntryTransferLevel = new Map(recIdType, Types::Enum);
        generalJournalToSubledgerJournalAccountEntryTempIdMapping = new Map(generalJournalAccountEntryRecIdType, subledgerJournalAccountEntryRecIdType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the information to the general journal.
    /// </summary>
    public void transfer()
    {
        RecordSortedList subledgerJournalAccountEntryCollection;
        Map subledgerJournalAccountEntryTempIdToIdMapping;

        subledgerJournalAccountEntryCollection = this.createSubledgerJourAccEntryCollection();
        this.createSubledgerJournalAccountEntries(summaryGeneralJournalAccountEntryCollection, subledgerJournalAccountEntryCollection);
        this.createSubledgerJournalAccountEntries(detailGeneralJournalAccountEntryCollection, subledgerJournalAccountEntryCollection);
        
        if (EnableEnhancedDelaySDAFJournalizerForSourceDocuments::isEnabled()
                && VendInvoiceSplitPostingFeature::isEnabled()
                && this.canSplitPosting())
        {
            subledgerJournalAccountEntryTempIdToIdMapping = this.recordSubledgerJournalAccountEntries(subledgerJournalAccountEntryCollection);
        }
        else 
        {
            subledgerJournalAccountEntryTempIdToIdMapping = this.transferSubledgerJournalAccountEntries(subledgerJournalAccountEntryCollection);
        }

        this.transferTaxTransSubledgerJourAccEntries(taxTransGeneralJournalAccountEntryCollection, subledgerJournalAccountEntryTempIdToIdMapping);
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordSubledgerJournalAccountEntries</Name>
				<Source><![CDATA[
    private Map recordSubledgerJournalAccountEntries(RecordSortedList _subledgerJournalAccountEntryCollection)
    {
        RecordInsertList subledgerIntermediateEntryCollection;
        Map subledgerJournalAccountEntryTempIdToIdMapping;
        Types subledgerJournalAccountEntryRecIdType;
        SubledgerIntermediateEntry subledgerIntermediateEntry;
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        boolean haveMore;

        subledgerJournalAccountEntryRecIdType = typeName2Type(extendedTypeStr(SubledgerJournalAccountEntryRecId));
        subledgerJournalAccountEntryTempIdToIdMapping = new Map(subledgerJournalAccountEntryRecIdType, subledgerJournalAccountEntryRecIdType);

        subledgerIntermediateEntryCollection = new RecordInsertList(tableNum(SubledgerIntermediateEntry));

        subledgerIntermediateEntry.skipDataMethods(true);

        haveMore = _subledgerJournalAccountEntryCollection.first(subledgerJournalAccountEntry);
        while (haveMore)
        {
            subledgerJournalAccountEntry.calculateInternalValues();

            subledgerIntermediateEntry.clear();
            subledgerIntermediateEntry = this.subledgerJournalAccountEntry2SubledgerIntermediateEntry(subledgerJournalAccountEntry);
            
            subledgerIntermediateEntryCollection.add(subledgerIntermediateEntry);

            haveMore = _subledgerJournalAccountEntryCollection.next(subledgerJournalAccountEntry);
        }

        subledgerIntermediateEntryCollection.insertDatabase();

        return subledgerJournalAccountEntryTempIdToIdMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subledgerJournalAccountEntry2SubledgerIntermediateEntry</Name>
				<Source><![CDATA[
    private SubledgerIntermediateEntry subledgerJournalAccountEntry2SubledgerIntermediateEntry(SubledgerJournalAccountEntry _subledgerJournalAccountEntry)
    {
        SubledgerIntermediateEntry subledgerIntermediateEntry;

        subledgerIntermediateEntry.ACCOUNTENTRYEVENTROLE        = _subledgerJournalAccountEntry.ACCOUNTENTRYEVENTROLE;
        subledgerIntermediateEntry.ACCOUNTINGCURRENCYAMOUNT     = _subledgerJournalAccountEntry.ACCOUNTINGCURRENCYAMOUNT;
        subledgerIntermediateEntry.EXCHANGERATE1                = _subledgerJournalAccountEntry.EXCHANGERATE1;
        subledgerIntermediateEntry.EXCHANGERATE2                = _subledgerJournalAccountEntry.EXCHANGERATE2;
        subledgerIntermediateEntry.EXCHANGERATEDATE             = _subledgerJournalAccountEntry.EXCHANGERATEDATE;
        subledgerIntermediateEntry.HISTORICALEXCHANGERATEDATE   = _subledgerJournalAccountEntry.HISTORICALEXCHANGERATEDATE;
        subledgerIntermediateEntry.ISCORRECTION                 = _subledgerJournalAccountEntry.ISCORRECTION;
        subledgerIntermediateEntry.ISTRANSFERREDINDETAIL        = _subledgerJournalAccountEntry.ISTRANSFERREDINDETAIL;
        subledgerIntermediateEntry.LEDGERDIMENSION              = _subledgerJournalAccountEntry.LEDGERDIMENSION;
        subledgerIntermediateEntry.ORIGINALTRANSFERPOLICY       = _subledgerJournalAccountEntry.ORIGINALTRANSFERPOLICY;
        subledgerIntermediateEntry.POSTINGTYPE                  = _subledgerJournalAccountEntry.POSTINGTYPE;
        subledgerIntermediateEntry.REPORTINGCURRENCYAMOUNT      = _subledgerJournalAccountEntry.REPORTINGCURRENCYAMOUNT;
        subledgerIntermediateEntry.REPORTINGEXCHANGERATE1       = _subledgerJournalAccountEntry.REPORTINGEXCHANGERATE1;
        subledgerIntermediateEntry.REPORTINGEXCHANGERATE2       = _subledgerJournalAccountEntry.REPORTINGEXCHANGERATE2;
        subledgerIntermediateEntry.SIDE                         = _subledgerJournalAccountEntry.SIDE;
        subledgerIntermediateEntry.TRANSACTIONCURRENCY          = _subledgerJournalAccountEntry.TRANSACTIONCURRENCY;
        subledgerIntermediateEntry.TRANSACTIONCURRENCYAMOUNT    = _subledgerJournalAccountEntry.TRANSACTIONCURRENCYAMOUNT;

        subledgerIntermediateEntry.ACCOUNTINGEVENT = this.parmAccountingEventRecId();

        
        return subledgerIntermediateEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferSubledgerJournalAccountEntries</Name>
				<Source><![CDATA[
    private Map transferSubledgerJournalAccountEntries(RecordSortedList _subledgerJournalAccountEntryCollection)
    {
        SubledgerJournalAccountEntry subledgerJournalAccountEntry;
        RecordSortedList newSubledgerJournalAccountEntryCollection;
        systemSequence subledgerJournalAccountEntrySysSeq;
        Map subledgerJournalAccountEntryTempIdToIdMapping;
        boolean haveMore;
        boolean success;
        TableId suspendedTableId;
        SubledgerJournalAccountEntryRecId subledgerJournalAccountEntryTempId;
        Types subledgerJournalAccountEntryRecIdType;

        subledgerJournalAccountEntryRecIdType = typeName2Type(extendedTypeStr(SubledgerJournalAccountEntryRecId));
        subledgerJournalAccountEntryTempIdToIdMapping = new Map(subledgerJournalAccountEntryRecIdType, subledgerJournalAccountEntryRecIdType);

        suspendedTableId = tableNum(SubledgerJournalAccountEntry);

        subledgerJournalAccountEntrySysSeq = new systemSequence();
        subledgerJournalAccountEntrySysSeq.suspendRecIds(suspendedTableId);

        subledgerJournalAccountEntry.skipDataMethods(true);

        newSubledgerJournalAccountEntryCollection = this.createSubledgerJourAccEntryCollection();

        haveMore = _subledgerJournalAccountEntryCollection.first(subledgerJournalAccountEntry);
        while (haveMore)
        {
            subledgerJournalAccountEntryTempId = subledgerJournalAccountEntry.RecId;

            subledgerJournalAccountEntry.RecId = subledgerJournalAccountEntrySysSeq.reserveValues(1, suspendedTableId);

            subledgerJournalAccountEntryTempIdToIdMapping.insert(subledgerJournalAccountEntryTempId, subledgerJournalAccountEntry.RecId);

            subledgerJournalAccountEntry.calculateInternalValues();

            success = newSubledgerJournalAccountEntryCollection.ins(subledgerJournalAccountEntry);
            Debug::assert(success);

            haveMore = _subledgerJournalAccountEntryCollection.next(subledgerJournalAccountEntry);
        }

        newSubledgerJournalAccountEntryCollection.insertDatabase();

        subledgerJournalAccountEntrySysSeq.removeRecIdSuspension(suspendedTableId);

        return subledgerJournalAccountEntryTempIdToIdMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferTaxTransSubledgerJourAccEntries</Name>
				<Source><![CDATA[
    private void transferTaxTransSubledgerJourAccEntries(
        RecordSortedList _taxTransGeneralJournalAccountEntries,
        Map _subledgerJournalAccountEntryTempIdToIdMapping)
    {
        RecordInsertList                        taxTransSubledgerJournalAccountEntries;
        TaxTransGeneralJournalAccountEntry      taxTransGeneralJournalAccountEntry;
        TaxTransSubledgerJournalAccountEntry    taxTransSubledgerJournalAccountEntry;
        GeneralJournalAccountEntryRecId         generalJournalAccountEntryTempId;
        SubledgerJournalAccountEntryRecId       subledgerJournalAccountEntryTempId;
        SubledgerJournalAccountEntryRecId       subledgerJournalAccountEntryId;
        systemSequence                          taxTransSubledgerJournalAccountEntrySysSeq;
        TableId                                 suspendedTableId;
        boolean                                 haveMore;

        taxTransSubledgerJournalAccountEntries = new RecordInsertList(tableNum(TaxTransSubledgerJournalAccountEntry));

        suspendedTableId = tableNum(TaxTransSubledgerJournalAccountEntry);
        taxTransSubledgerJournalAccountEntrySysSeq = new systemSequence();
        taxTransSubledgerJournalAccountEntrySysSeq.suspendRecIds(suspendedTableId);

        generalJournalAccountEntryTempId = -1;

        haveMore = _taxTransGeneralJournalAccountEntries.first(taxTransGeneralJournalAccountEntry);

        while (haveMore)
        {
            if (generalJournalAccountEntryTempId != taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry)
            {
                subledgerJournalAccountEntryId = 0;

                generalJournalAccountEntryTempId = taxTransGeneralJournalAccountEntry.GeneralJournalAccountEntry;

                if (generalJournalToSubledgerJournalAccountEntryTempIdMapping.exists(generalJournalAccountEntryTempId))
                {
                    subledgerJournalAccountEntryTempId = generalJournalToSubledgerJournalAccountEntryTempIdMapping.lookup(generalJournalAccountEntryTempId);

                    if (_subledgerJournalAccountEntryTempIdToIdMapping && _subledgerJournalAccountEntryTempIdToIdMapping.exists(subledgerJournalAccountEntryTempId))
                    {
                        subledgerJournalAccountEntryId = _subledgerJournalAccountEntryTempIdToIdMapping.lookup(subledgerJournalAccountEntryTempId);
                    }
                }
            }

            if (subledgerJournalAccountEntryId != 0)
            {
                taxTransGeneralJournalAccountEntry.initToTaxTransSubledgerJournalAccEntry(subledgerJournalAccountEntryId, taxTransSubledgerJournalAccountEntry);
                taxTransSubledgerJournalAccountEntry.RecId = taxTransSubledgerJournalAccountEntrySysSeq.reserveValues(1, suspendedTableId);

                taxTransSubledgerJournalAccountEntries.add(taxTransSubledgerJournalAccountEntry);
            }

            haveMore = _taxTransGeneralJournalAccountEntries.next(taxTransGeneralJournalAccountEntry);
        }

        taxTransSubledgerJournalAccountEntries.insertDatabase();

        taxTransSubledgerJournalAccountEntrySysSeq.removeRecIdSuspension(suspendedTableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canSplitPosting</Name>
				<Source><![CDATA[
    private boolean canSplitPosting() 
    {
        SourceDocumentHeader sourceDocumentHeader;
        AccountingEvent accountingEvent;

        select TypeEnumName from sourceDocumentHeader
            join accountingEvent
            where accountingEvent.SourceDocumentHeader == sourceDocumentHeader.RecId &&
                accountingEvent.RecId == accountingEventRecId;

        return SubledgerDocumentPostingSplitHelper::isDocumentSupported(sourceDocumentHeader.TypeEnumName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LedgerPostingSubledgerJournalController construct()
    {
        LedgerPostingSubledgerJournalController ledgerPostingSubledgerJournalController = new LedgerPostingSubledgerJournalController();

        return ledgerPostingSubledgerJournalController;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>