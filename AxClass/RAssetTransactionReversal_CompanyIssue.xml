<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetTransactionReversal_CompanyIssue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rAssetTransactionReversal_CompanyIssue extends RAssetTransactionReversal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        protected boolean check()
    {
        boolean         ret;

        ret = super();

        if (RAssetMoveHist::findLastOperation(rAssetTrans.AccountNum,
                                              RAssetMoveType::CompanyIssue,
                                              NoYes::Yes,
                                              rAssetTrans.TransDate).Receipted)
        {
            ret = checkFailed("@GLS116993");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseRAssetTrans</Name>
				<Source><![CDATA[
protected void reverseRAssetTrans()
    {
        RAssetTrans     stornoTrans, rassetTransLink;
    
        void createStorno(RAssetTrans _original)
        {
            stornoTrans.data(_original);
            stornoTrans.TransDate            = reversalDate;
            stornoTrans.AmountCur            = -_original.AmountCur;
            stornoTrans.AmountMST            = -_original.AmountMST;
            stornoTrans.AttachDocumentDate   = dateNull();
            stornoTrans.AttachDocumentNumber = "";
            stornoTrans.Txt                  = "@GLS105217" + "@SYS35675" + _original.Txt;
            stornoTrans.StornoRecId          = _original.RecId;
            stornoTrans.insert();
            _original.StornoRecId            = stornoTrans.RecId;
            _original.doUpdate();
        }
        ;
    
        select firstonly forupdate rassetTransLink
            where rassetTransLink.AccountNum  == rAssetTrans.AccountNum &&
                  rassetTransLink.Voucher     == rAssetTrans.Voucher    &&
                  rassetTransLink.TransDate   == rAssetTrans.TransDate  &&
                  rassetTransLink.RecId       != rAssetTrans.RecId;
    
        createStorno(rAssetTrans);
        transLinkReversal.createTransLink(stornoTrans);
    
        createStorno(rassetTransLink);
        this.initTransLinkReversal(rassetTransLink);
        transLinkReversal.createTransLink(stornoTrans);
    }
]]></Source>
			</Method>
			<Method>
				<Name>updateStatus</Name>
				<Source><![CDATA[
        public void updateStatus()
    {
        RAssetMoveStandard   rAssetMoveStandard;
        RAssetMoveHist       rAssetMoveHist;
        RAssetStandards      rassetStandardsLocal;
        ;

        rAssetMoveHist = RAssetMoveHist::findLastOperation(rAssetTrans.AccountNum,
                                                           RAssetMoveType::CompanyIssue,
                                                           NoYes::Yes,
                                                           rAssetTrans.TransDate,
                                                           true);

        rAssetMoveStandard        = rAssetMoveHist.rAssetMoveStandard(rAssetStandards.AssetStandardId, true);
        rAssetMoveStandard.Posted = NoYes::No;
        rAssetMoveStandard.update();

        select firstonly rAssetMoveStandard
            where rAssetMoveStandard.RefRecId   == rAssetMoveHist.RecId   &&
                  rAssetMoveStandard.RefTableId == rAssetMoveHist.TableId &&
                  rAssetMoveStandard.Posted     == NoYes::Yes;

        if (! rAssetMoveStandard.RecId)
        {
            rAssetMoveHist.Posted = NoYes::No;
            rAssetMoveHist.update();
        }
        rAssetStandards.DisposalDate = dateNull();
        rAssetStandards.doUpdate();

        select firstonly RecId from rassetStandardsLocal
            where rassetStandardsLocal.AssetId == rAssetTable.AccountNum &&
                  rassetStandardsLocal.DisposalDate;

        if (! rassetStandardsLocal.RecId)
        {
            super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>