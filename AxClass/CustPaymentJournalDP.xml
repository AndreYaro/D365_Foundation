<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustPaymentJournalDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustPaymentJournalDP</c> class is the Report Data Provider class for the
/// <c>CustPaymentJournal</c> report.
/// </summary>
[SRSReportQueryAttribute(queryStr(CustPaymentJournal))]
[SRSReportParameterAttribute(classStr(CustPaymentJournalContract))]
public class CustPaymentJournalDP extends SrsReportDataProviderPreProcessTempDB
{
    private LedgerJournalTable ledgerJournalTable;
    private LedgerJournalTable tmpLedgerJournalTable;
    private LedgerJournalTrans ledgerJournalTrans;
    private LedgerJournalTrans tmpLedgerJournalTrans;
    private CustTrans tmpCustTrans;
    private CustTrans custTrans;
    private CustTransOpen custTransOpen;
    private CustSettlement custSettlement;
    private SpecTrans specTrans;
    private LedgerJournalId lastJournalNum;
    private AccountNum lastAccountNum;
    private Amount sumPaymSettleAmountCur;
    private CustPaymentJournalTmp custPaymentJournalTmp;
    private RecId ledgerJournalTransRecId;
    private Query query;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custTransPaymSettleAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the payment settlement amount.
    /// </summary>
    /// <returns>
    /// The payment settlement amount.
    /// </returns>
    private Amount custTransPaymSettleAmountCur()
    {
        CustSettlement tmpCustSettlement;
        Amount paymSettleAmountCur;

        select firstonly crosscompany SettleAmountCur from tmpCustSettlement
            where tmpCustSettlement.OffsetRecid == custSettlement.TransRecId
                && tmpCustSettlement.TransRecId == custSettlement.OffsetRecid
                && tmpCustSettlement.SettlementGroup == custSettlement.SettlementGroup
                && tmpCustSettlement.OffsetCompany == tmpCustTrans.company();

        paymSettleAmountCur = tmpCustSettlement.SettleAmountCur;

        if (this.custTransSettleAmountCur() > 0)
        {
            if (!(paymSettleAmountCur > 0))
            {
                paymSettleAmountCur = -paymSettleAmountCur;
            }
        }
        else
        {
            if (paymSettleAmountCur > 0)
            {
                paymSettleAmountCur = -paymSettleAmountCur;
            }
        }

        return paymSettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custTransSettleAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the settlement amount.
    /// </summary>
    /// <returns>
    /// The settlement amount.
    /// </returns>
    private Amount custTransSettleAmountCur()
    {
        return -1 * ((custSettlement.SettleAmountCur - custSettlement.UtilizedCashDisc) + custSettlement.PennyDiff);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the report data.
    /// </summary>
    private void fetch()
    {
        QueryRun qr;
        boolean detailsinserted = false;
        Set custTransRecIdMap = new Set(Types::Int64);

        qr = new QueryRun(query);

        while (qr.next())
        {
            tmpLedgerJournalTable = qr.get(tmpLedgerJournalTable.TableId);
            this.insertDataFromLedgerJournalTable();

            tmpLedgerJournalTrans = qr.get(tmpLedgerJournalTrans.TableId);
            this.insertDataFromLedgerJournalTrans();

            if (tmpLedgerJournalTable.Posted)
            {
                LedgerJournalTrans ledgerJournalTransPayment;

                if (tmpLedgerJournalTrans.isCompanyIntercompany())
                {
                    ledgerJournalTransPayment = LedgerJournalTrans::findIntercompanyPayment(tmpLedgerJournalTrans);
                }
                else
                {
                    ledgerJournalTransPayment = tmpLedgerJournalTrans;
                }

                changecompany(ledgerJournalTransPayment.Company)
                {
                    CustTrans orgCustTrans;
                    DimensionAttributeValueCombination dimAttrValueCombo;

                    while select orgCustTrans
                        order by orgCustTrans.RecId
                        where orgCustTrans.Voucher == ledgerJournalTransPayment.Voucher
                            && orgCustTrans.TransDate == ledgerJournalTransPayment.TransDate
                            && orgCustTrans.TransType == LedgerTransType::Payment
                    join RecId from dimAttrValueCombo
                        where dimAttrValueCombo.RecId == ledgerJournalTransPayment.LedgerDimension
                            && dimAttrValueCombo.DisplayValue == orgCustTrans.AccountNum
                    {
                        // Added check if the CustTrans.RecId exists in the set because of
                        // scenarios where multiple customer transaction exist with the same voucher number.
                        if (custTransRecIdMap.in(orgCustTrans.RecId))
                        {
                            // Already inserted this customer transactions settle, continue
                            // to see if there are additional customer transaction with same voucher.
                            continue;
                        }
                        else
                        {
                            custTransRecIdMap.add(orgCustTrans.RecId);

                            while select crosscompany custSettlement order by TransDate
                                where custSettlement.OffsetRecid == orgCustTrans.RecId
                                    && custSettlement.OffsetAccountNum == orgCustTrans.AccountNum
                                    && custSettlement.OffsetCompany == orgCustTrans.company()
                            {
                                tmpCustTrans = CustTrans::findByCompany(custSettlement.company(), custSettlement.TransRecId);
                                this.insertDataFromCustTrans();

                                custPaymentJournalTmp.insert();
                                detailsinserted = true;
                            }
                            break;
                        }
                    }
                }
            }
            else // Else, if unposted, get data from SpecTrans.
            {
                while select crosscompany specTrans
                    where specTrans.SpecRecId == tmpLedgerJournalTrans.RecId
                        && specTrans.SpecTableId == tmpLedgerJournalTrans.TableId
                        && specTrans.SpecCompany == tmpLedgerJournalTrans.company()
                {
                    changecompany(tmpLedgerJournalTrans.Company)
                    {
                        custTransOpen = specTrans.custTransOpen();
                        custTrans = specTrans.custTrans();
                    }
                    this.insertDataFromSpecTrans();
                    custPaymentJournalTmp.insert();
                    detailsinserted = true;
                }
            }

            if (!detailsinserted)
            {
                custPaymentJournalTmp.insert();
            }

            custPaymentJournalTmp.clear();
            detailsinserted = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustPaymentJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets records in the <c>CustPaymentJournalTmp</c> table.
    /// </summary>
    /// <returns>
    /// The records in the <c>CustPaymentJournalTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(CustPaymentJournalTmp))]
    public CustPaymentJournalTmp getCustPaymentJournal()
    {
        select custPaymentJournalTmp;
        return custPaymentJournalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataFromLedgerJournalTable</Name>
				<Source><![CDATA[
    private void insertDataFromLedgerJournalTable()
    {
        custPaymentJournalTmp.JournalNum = tmpLedgerJournalTable.JournalNum;
        custPaymentJournalTmp.Name = tmpLedgerJournalTable.Name;
        custPaymentJournalTmp.Posted = tmpLedgerJournalTable.Posted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    private void insertDataFromLedgerJournalTrans()
    {
        custPaymentJournalTmp.LedgerDimension = tmpLedgerJournalTrans.parmLedgerDimension();
        custPaymentJournalTmp.AccountNum = tmpLedgerJournalTrans.parmAccount();
        custPaymentJournalTmp.AccountName = tmpLedgerJournalTrans.accountName();
        custPaymentJournalTmp.Txt = tmpLedgerJournalTrans.Txt;
        custPaymentJournalTmp.TransDate = tmpLedgerJournalTrans.TransDate;
        custPaymentJournalTmp.Voucher = tmpLedgerJournalTrans.Voucher;
        custPaymentJournalTmp.PaymReference = tmpLedgerJournalTrans.PaymReference;
        custPaymentJournalTmp.AmountCurDebit = tmpLedgerJournalTrans.AmountCurDebit;
        custPaymentJournalTmp.AmountCurCredit = tmpLedgerJournalTrans.AmountCurCredit;
        custPaymentJournalTmp.CurrencyCode = tmpLedgerJournalTrans.CurrencyCode;
        custPaymentJournalTmp.AccountRecId = tmpLedgerJournalTrans.RecId;
        custPaymentJournalTmp.DetailsPrinted = NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataFromCustTrans</Name>
				<Source><![CDATA[
    private void insertDataFromCustTrans()
    {
        custPaymentJournalTmp.Invoice = tmpCustTrans.Invoice;
        custPaymentJournalTmp.CustTransTransDate = tmpCustTrans.TransDate;
        custPaymentJournalTmp.CustTransCurrencyCode = tmpCustTrans.CurrencyCode;
        custPaymentJournalTmp.AmountCur = tmpCustTrans.AmountCur;
        custPaymentJournalTmp.SettleAmountCur = this.custTransSettleAmountCur();
        custPaymentJournalTmp.UtilizedCashDisc = -1*custSettlement.UtilizedCashDisc;
        custPaymentJournalTmp.PennyDiff = custSettlement.PennyDiff;
        custPaymentJournalTmp.RemainAmount = tmpCustTrans.remainAmountCur();
        custPaymentJournalTmp.PaymSettleAmountCur = this.custTransPaymSettleAmountCur();
        custPaymentJournalTmp.IsFromCustTrans = NoYes::Yes;
        custPaymentJournalTmp.DetailsPrinted = NoYes::Yes;
        custPaymentJournalTmp.AccountRecId = tmpLedgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDataFromSpecTrans</Name>
				<Source><![CDATA[
    private void insertDataFromSpecTrans()
    {
        custPaymentJournalTmp.Invoice = custTrans.Invoice;
        custPaymentJournalTmp.CustTransTransDate = custTrans.TransDate;
        custPaymentJournalTmp.CustTransCurrencyCode = custTrans.CurrencyCode;
        custPaymentJournalTmp.AmountCur = custTrans.AmountCur;
        custPaymentJournalTmp.OpeningBalance = this.specTransOpeningBalance();
        custPaymentJournalTmp.SettleAmountCur = this.specTransSettleAmountCur();
        custPaymentJournalTmp.DiscountTaken = this.specTransDiscountTaken();
        custPaymentJournalTmp.RemainAmount = custPaymentJournalTmp.OpeningBalance + custPaymentJournalTmp.SettleAmountCur + custPaymentJournalTmp.DiscountTaken;
        custPaymentJournalTmp.PaymSettleAmountCur = this.specTransPaymSettleAmountCur();
        custPaymentJournalTmp.IsFromCustTrans = NoYes::No;
        custPaymentJournalTmp.DetailsPrinted = NoYes::Yes;
        custPaymentJournalTmp.AccountRecId = tmpLedgerJournalTrans.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        CustPaymentJournalContract contract = this.parmDataContract() as CustPaymentJournalContract;
        query = new Query(this.parmQuery());

        ledgerJournalTransRecId = contract.parmLedgerJournalTransRecId();

        if (ledgerJournalTransRecId != 0)
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(ledgerJournalTransRecId, false);
            ledgerJournalTable = LedgerJournalTable::find(ledgerJournalTrans.JournalNum);

            this.setRange();
            this.fetch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the range on the <c>CustPaymentJournal</c> report query.
    /// </summary>
    private void setRange()
    {
        QueryBuildDataSource queryBuildDataSource;
        QueryBuildRange queryBuildRangeJournalNum;
        QueryBuildRange queryBuildRangePosted;

        if (ledgerJournalTable)
        {
            queryBuildDataSource = query.dataSourceTable(tablenum(LedgerJournalTable));

            // If the LedgerJournalTable datasource does not exist on the report, create it
            if (!queryBuildDataSource)
            {
                queryBuildDataSource = query.addDataSource(tablenum(LedgerJournalTable));
            }

            queryBuildDataSource.addSortField(fieldnum(LedgerJournalTable, JournalNum), SortOrder::Ascending);

            // Create the JournalNum range
            queryBuildRangeJournalNum = queryBuildDataSource.findRange(fieldnum(LedgerJournalTable, JournalNum));
            if (!queryBuildRangeJournalNum)
            {
                queryBuildRangeJournalNum = queryBuildDataSource.addRange(fieldnum(LedgerJournalTable, JournalNum));
            }

            // Create the Posted range
            queryBuildRangePosted = queryBuildDataSource.findRange(fieldnum(LedgerJournalTable, Posted));
            if (!queryBuildRangePosted)
            {
                queryBuildRangePosted = queryBuildDataSource.addRange(fieldnum(LedgerJournalTable, Posted));
            }

            // Set the range values
            queryBuildRangeJournalNum.value(queryValue(ledgerJournalTable.JournalNum));
            queryBuildRangePosted.value(enum2str(ledgerJournalTable.Posted));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransDiscountTaken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the discount.
    /// </summary>
    /// <returns>
    /// The discount that is taken.
    /// </returns>
    private Amount specTransDiscountTaken()
    {
        CustTransCashDisc custTransCashDisc;
        Amount cashDiscAmount;

        custTransCashDisc = CustTransCashDisc::findCashDiscCrossCompany(tablenum(CustTransOpen), custTransOpen.RecId);

        // If there is at least one Cash Discount Amount
        if (custTransCashDisc)
        {
            // Find the appropriate cash discount.
            switch (custTransOpen.UseCashDisc)
            {
                case UseCashDisc::Normal:
                    // Find the first cash discount record by date (logically, should usually have the highest discount).
                    cashDiscAmount = CustTransCashDisc::findCashDiscCrossCompany(
                        tablenum(CustTransOpen),
                        custTransOpen.RecId,
                        tmpLedgerJournalTrans.TransDate,
                        CustPaymModeTable::discGraceDays(custTrans.PaymMode)).CashDiscAmount;
                    break;

                case UseCashDisc::Always:
                    // Find the first record not taking TransDate into consideration. This should be the first Cash Discount by date.
                    cashDiscAmount = CustTransCashDisc::findCashDiscCrossCompany(
                        tablenum(CustTransOpen),
                        custTransOpen.RecId).CashDiscAmount;
                    break;

                case UseCashDisc::Never:
                    return 0;

                default:
                    return 0;
            }
        }
        else // No Cash Discount Amount records, so return 0.
        {
            return 0;
        }

        Amount overUnderDiscountAllowed;
        // If the invoice is being paid off in full
        if (tmpCustTrans)
        {
            overUnderDiscountAllowed = CurrencyExchangeHelper::curAmount(CustParameters::find().MaxMSTOverUnder, tmpCustTrans.CurrencyCode, tmpCustTrans.TransDate);
        }

        if ((this.specTransOpeningBalance() + this.specTransSettleAmountCur() - cashDiscAmount) >= overUnderDiscountAllowed)
        {
            return -cashDiscAmount;
        }
        else
        {
            return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the opening balance.
    /// </summary>
    /// <returns>
    /// The opening balance.
    /// </returns>
    private AmountCur specTransOpeningBalance()
    {
        return custTrans.AmountCur - custTrans.SettleAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransPaymSettleAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the payment settlement amount.
    /// </summary>
    /// <returns>
    /// The payment settlement amount.
    /// </returns>
    private AmountCur specTransPaymSettleAmountCur()
    {
        Amount paymSettleAmount;

        if (tmpLedgerJournalTrans.CurrencyCode == custTrans.CurrencyCode)
        {
            // Currency code are the same so just round the amount for invoice currency.
            paymSettleAmount = CurrencyExchangeHelper::amount(this.specTransSettleAmountCur(), ledgerJournalTrans.CurrencyCode);
        }
        else if (specTrans.CrossRate != 0)
        {
            // Use the cross rate to calculate the payment currency. Round the result.
            paymSettleAmount = CurrencyExchangeHelper::amount(this.specTransSettleAmountCur() * specTrans.CrossRate / 100, ledgerJournalTrans.CurrencyCode);
        }
        else
        {
            // First convert the invoice currency to the MST currency and then convert MST to payment currency. Round the result.
            paymSettleAmount = CurrencyExchangeHelper::mstAmount(this.specTransSettleAmountCur(), custTrans.CurrencyCode, ledgerJournalTrans.TransDate, UnknownNoYes::Unknown, 0, 0, false);
            paymSettleAmount = CurrencyExchangeHelper::curAmount(paymSettleAmount, ledgerJournalTrans.CurrencyCode, tmpLedgerJournalTrans.TransDate, UnknownNoYes::Unknown, tmpLedgerJournalTrans.ExchRate);
        }

        return paymSettleAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>specTransSettleAmountCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the settlement amount.
    /// </summary>
    /// <returns>
    /// The settlement amount.
    /// </returns>
    private TempReal specTransSettleAmountCur()
    {
        return -specTrans.Balance01;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>