<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAutoDialog_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class CustVendAutoDialog_RU extends RunBaseBatch
{
    CustVendAC        custVendAC;
    TransDate         dateFrom, dateTo;
    SysQueryRun       queryRun;
    Object            dialogFormRun;

    #DEFINE.CurrentVersion(2)

    #LOCALMACRO.CurrentList
        dateFrom, dateTo,
        custVendAC
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datePrinciple</Name>
				<Source><![CDATA[
    public SettleDatePrinc datePrinciple()
    {
        ;
        return CustVendSettle::construct(this.moduleCustVend() == ModuleCustVend::Cust ?
                                         SysModule::Cust                               :
                                         SysModule::Vend).datePrinciple();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        return this.dialogInternal(Dialog::newFormnameRunbase(formStr(CustVendAutoSettlementDialog_RU), this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdateQuery</Name>
				<Source><![CDATA[
    public void dialogUpdateQuery(Dialog _dialog)
    {
        this.updateQuery();
        dialogFormRun.unpack([#CurrentList]);

        super(_dialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogUpdateRange</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the dialog's ranges.
    /// </summary>
    /// <param name="_dialog">
    ///     Instance of the <c>Dialog</c> class.
    /// </param>
    public void dialogUpdateRange(Dialog _dialog)
    {
        [#CurrentList] = dialogFormRun.pack();
        this.updateRanges();

        if (dialogModify)
        {
            dialogModify.updateQuery(_dialog);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateRange</Name>
				<Source><![CDATA[
    protected QueryBuildRange findOrCreateRange(TableId _tableId, FieldId _fieldId, str _value, int _occurrence = 1)
    {
        Query           query = queryRun.query();
        QueryBuildRange qbr;

        qbr = findOrCreateRange_W(query.dataSourceTable(_tableId, _occurrence), _fieldId);
        qbr.value(_value);
        return qbr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentValues</Name>
				<Source><![CDATA[
    public container getCurrentValues(FormRun _formRun)
    {
        dialogFormRun = _formRun;
        return [#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        ;
        dateTo   = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        queryRun = new SysQueryRun(this.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReverseMode</Name>
				<Source><![CDATA[
    abstract public boolean isReverseMode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleCustVend</Name>
				<Source><![CDATA[
    abstract public ModuleCustVend moduleCustVend()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCustVendAC</Name>
				<Source><![CDATA[
    public CustVendAC parmCustVendAC(CustVendAC  _custVendAC = custVendAC)
    {
        custVendAC = _custVendAC;

        return custVendAC;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateFrom</Name>
				<Source><![CDATA[
    public TransDate parmDateFrom(TransDate _dateFrom = dateFrom)
    {
        dateFrom = _dateFrom;

        return dateFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDateTo</Name>
				<Source><![CDATA[
    public TransDate parmDateTo(TransDate _dateTo = dateTo)
    {
        dateTo = _dateTo;

        return dateTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    abstract protected Query query()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        ;
        queryRun.promptAllowAddSorting(QueryAllowAdd::NoFields);
        queryRun.promptShowSorting(false);
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>stringValueFromRange</Name>
				<Source><![CDATA[
    protected str stringValueFromRange(str _range)
    {
        int len = strLen(_range);

        if ( ! strScan(_range, '..', 1, len) &&
             ! strFind(_range, ',',  1, len) &&
             ! strFind(_range, '!',  1, len) &&
             ! strFind(_range, '*',  1, len))
        {
            return _range;
        }

        return "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer   version = conPeek(_packedClass,1);
        boolean   ret = true;
        container packedQuery;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList, packedQuery] = _packedClass;

                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
            break;
            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePeriodInterval</Name>
				<Source><![CDATA[
    #define.DateFormat_DMY(123)
    #define.RangeSeparator("..")
    #define.Shift(2)
    protected void updatePeriodInterval(str _range)
    {
        int pos   = strScan(_range, #RangeSeparator, 1, strLen(_range));

        dateFrom = str2Date(strLRTrim(strReplaceChars(subStr(_range, 1, pos-1),
                                            '\"',
                                            0)),
                            #DateFormat_DMY);

        dateTo   = str2Date(strLRTrim(strReplaceChars(subStr(_range, pos + #Shift, strLen(_range) - (pos-1 + #Shift)),
                                            '\"',
                                            0)),
                            #DateFormat_DMY);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    abstract protected void updateQuery()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRanges</Name>
				<Source><![CDATA[
    abstract protected void updateRanges()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if ( ! dateTo)
        {
            error("@GLS101163");
            ret = false;
        }

        if (dateTo < dateFrom)
        {
            error("@GLS101164");
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSpecification</Name>
				<Source><![CDATA[
    public static SpecTransManager initSpecification(Common _specReference, boolean _inBatch = false)
    {
        SpecTransManager ret = SpecTransManager::newFromSpec(_specReference);

        if (ret.getSpecTransCount())
        {
            if (_inBatch)
            {
                ret.deleteAll();
            }
            else
            {
                if (SpecTrans::promptRemoveMarkedTransactions())
                {
                    ret.deleteAll();
                }
                else
                    throw error("@GLS101992");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendAutoDialog_RU   custVendAutoDialod;
        ;

        #DEFINE.SettlementMode("Settle")
        #DEFINE.ReverseMode("Reverse")

        if ( ! _args || _args.parmEnumType() != enumNum(ModuleCustVend))
            throw error(Error::wrongUseOfFunction(funcName()));

        switch (_args.parm())
        {
            case #SettlementMode :
                custVendAutoDialod = CustVendAutoSettlement_RU::construct(_args.parmEnum());
            break;
            case #ReverseMode    :
                custVendAutoDialod = CustVendAutoReverse_RU::construct(_args.parmEnum());
            break;
            default              :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (custVendAutoDialod && custVendAutoDialod.prompt())
        {
            custVendAutoDialod.runOperation();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>