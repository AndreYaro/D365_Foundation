<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastTransferFromQuotation</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjForecastTransferFromQuotation
{
    SalesQuotationLine          salesQuotationLine;

    QuotationProjTransType      quotationProjTransType;

    boolean                     itemReq;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void initParameters(SalesQuotationLine          _salesQuotationLine,
                        QuotationProjTransType      _quotationProjTransType = QuotationProjTransType::None,
                        boolean _itemReq = false)
    {
        salesQuotationLine      = _salesQuotationLine;
        quotationProjTransType  = _quotationProjTransType;
        itemReq                 = _itemReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transfer</Name>
				<Source><![CDATA[
    void transfer()
    {
        ProjForecastEmpl        projForecastEmpl;
        ProjForecastCost        projForecastCost;
        ProjForecastRevenue     projForecastRevenue;
        ForecastSales           forecastSales;
        HierarchyTreeTable      hierarchyTreeTable, hierarchyTreeTable1, hierarchyTreeTable2, hierarchyTreeTable3;
        smmActivityNumber       activityNumber;

        RecId                   lastRecId           = 0;
        ProjQuotationId         lastQuotationId     = "";
        QuotationProjTransType  lastProjTransType;
        SalesLine               salesLine;
        int                     i;

        boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

        ttsbegin;

        while select salesQuotationLine
        {
            select HierarchyId from hierarchyTreeTable3 where hierarchyTreeTable3.Name == SalesQuotationTable::find(salesQuotationLine.QuotationId).ProjIdRef;
            select HierarchyId from hierarchyTreeTable
                where hierarchyTreeTable.Name == salesQuotationLine.salesQuotationTable().QuotationId
                    join  HierarchyId, Name from hierarchyTreeTable1
                            where hierarchyTreeTable1.Name == smmActivities::find(salesQuotationLine.ProjActivity).Purpose
                                && hierarchyTreeTable1.HierarchyId == hierarchyTreeTable.HierarchyId
                            join Name, ParentElementNumber, HierarchyId, RefRecId from hierarchyTreeTable2
                                where hierarchyTreeTable2.Name == hierarchyTreeTable1.Name
                                    && hierarchyTreeTable2.ParentElementNumber != ""
                                    && hierarchyTreeTable2.HierarchyId != hierarchyTreeTable1.HierarchyId
                                    && hierarchyTreeTable2.HierarchyId == hierarchyTreeTable3.HierarchyId;

            activityNumber = smmActivities::findWithRecId(hierarchyTreeTable2.RefRecId).ActivityNumber;

            if (lastRecId)
            {
                if (lastQuotationId != salesQuotationLine.QuotationId)
                {
                    if (lastProjTransType==QuotationProjTransType::Item && itemReq)
                    {
                        SalesQuotationLine::updateTransfered2ItemReq(lastRecId, true);
                    }
                    else
                    {
                        SalesQuotationLine::updateTransfered2Forecast(lastRecId, true);
                    }
                }
                else
                {
                    if (lastProjTransType==QuotationProjTransType::Item && itemReq)
                    {
                        SalesQuotationLine::updateTransfered2ItemReq(lastRecId);
                    }
                    else
                    {
                        SalesQuotationLine::updateTransfered2Forecast(lastRecId);
                    }
                }
            }

            switch (salesQuotationLine.ProjTransType)
            {
                case QuotationProjTransType::Expense:
                    projForecastCost.clear();
                    projForecastCost.ActivityNumber = activityNumber;
                    projForecastCost.initFromSalesQuotationLine(salesQuotationLine);
                    projForecastCost.insert();
                    break;

                case QuotationProjTransType::Fee:
                    i = 0;
                    while (i < abs(salesQuotationLine.SalesQty))
                    {
                        projForecastRevenue.clear();
                        projForecastRevenue.ActivityNumber = activityNumber;
                        projForecastRevenue.initFromSalesQuotationLine(salesQuotationLine);
                        projForecastRevenue.insert();
                        i++;
                    }
                    break;

                case QuotationProjTransType::Hour:
                    projForecastEmpl.clear();
                    projForecastEmpl.ProjId = salesQuotationLine.salesQuotationTable().ProjIdRef;
                    projForecastEmpl.initValue();
                    projForecastEmpl.ActivityNumber = activityNumber;
                    projForecastEmpl.initFromSalesQuotationLine(salesQuotationLine);
                    projForecastEmpl.insert();
                    break;

                case QuotationProjTransType::Item:
                    if (isKittingEnabled && !KittingClassDelegateHelper::ProjForecastTransferFromQuotation_canTransferToProject(salesQuotationLine))
                    {
                        continue;
                    }

                    if (!salesQuotationLine.checkInventDim())
                    {
                        throw error("@SYS319221");
                    }
                    if (itemReq)
                    {
                        salesLine.createFromSalesQuotationLine(salesQuotationLine, activityNumber);
                    }
                    else
                    {
                        if (salesQuotationLine.SalesQty > 0)
                        {
                            forecastSales.clear();
                            forecastSales.ActivityNumber = activityNumber;
                            forecastSales.initFromSalesQuotationLine(salesQuotationLine);
                            forecastSales.insert();
                        }
                    }
                    break;
            }

            lastRecId           = SalesQuotationLine::find(salesQuotationLine.QuotationId,salesQuotationLine.LineNum).RecId;
            lastQuotationId     = salesQuotationLine.QuotationId;
            lastProjTransType   =   salesQuotationLine.ProjTransType;
        }

        if (lastRecId)
        {
            if (lastProjTransType==QuotationProjTransType::Item && itemReq)
            {
                SalesQuotationLine::updateTransfered2ItemReq(lastRecId, true);
            }
            else
            {
                SalesQuotationLine::updateTransfered2Forecast(lastRecId, true);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>