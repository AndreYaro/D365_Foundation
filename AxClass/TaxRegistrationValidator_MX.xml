<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxRegistrationValidator_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxRegistrationValidator_MX </c> class handles the logic for validating the formats of the
///    Federal Registration for Taxpayers (RFC) and Unique Fiscal Card Identification (CURP) that was
///    entered by the user in the <c>Companyinfo</c>, <c>CustTable</c>, <c>VendTable</c> and
///    <c>BankAccountTable</c> tables.
/// </summary>
/// <remarks>
///    The <c>TaxRegistrationValidator_MX </c> class is used to validate the format of the Federal
///    Registration for Taxpayers (RFC) and Unique Fiscal Card Identification (CURP).
/// </remarks>
class TaxRegistrationValidator_MX
{
    tableId                     entityId;
    recId                       currentRecord;
    CompanyType_MX              entityType;
    Rfc_MX                      entityRFC;
    Curp_MX                     entityCURP;
    LegalRepresentativeName_MX  legalRepName;
    Rfc_MX                      legalRepRFC;
    Curp_MX                     legalRepCURP;
    StateInscription_MX         stateInscription;

    VendorOperationType_MX      vendOperationType;
    VendorType_MX               vendType;
    ForeignTaxRegistration_MX   vendForeignTaxRegistration;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fillInternalFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the common variables that are passed from individual table buffers, such as the
    ///    <c>CompanyInfo</c>, <c>CustTable</c>, <c>VendTable</c>, and <c>BankAccountTable</c> tables.
    /// </summary>
    /// <param name="_id">
    ///    The table ID of the table to use to construct the object.
    /// </param>
    /// <param name="_currentRecord">
    ///    The <c>RecId</c> value of the table buffer to use to construct the object.
    /// </param>
    /// <param name="_type">
    ///    The <c>CompanyType</c> that is passed in to use in the validation.
    /// </param>
    /// <param name="_rfc">
    ///    The <c>Rfc_MX</c> field of the table buffer to use to construct the object.
    /// </param>
    /// <param name="_curp">
    ///    The <c>Curp_MX</c> field of the table buffer to use to construct the object.
    /// </param>
    /// <param name="_stateInscript">
    ///    The <c>StateInscription_MX</c> field of the table buffer to use to construct the object.
    /// </param>
    /// <param name="_legalRepName">
    ///    The <c>LegalRepresentativeName_MX</c> field of the table buffer to use to construct the object.
    /// </param>
    /// <param name="_legalRepRFC">
    ///    The <c>LegalRepresentativeRFC_MX</c> field of the table buffer to use to construct the object.
    /// </param>
    /// <param name="_legalRepCURP">
    ///    The <c>LegalRepresentativeCURP_MX</c> field of the table buffer to use to construct the object.
    /// </param>
    /// <param name="_vendOperationType">
    ///    The <c>OperationType_MX</c> field of the <c>VendTable</c> table buffer.
    /// </param>
    /// <param name="_vendType">
    ///    The <c>VendorType_MX</c> field of the <c>VendTable</c> table buffer.
    /// </param>
    /// <param name="_vendForeignTaxRegistration">
    ///    The <c>ForeignTaxRegistration_MX</c> field of the <c>VendTable</c> table buffer.
    /// </param>
    /// <remarks>
    ///    This method is called from the <c>Construct</c> method to initialize the class variables
    /// </remarks>
    private void fillInternalFields(
        tableId                     _id,
        recId                       _currentRecord,
        CompanyType_MX              _type,
        Rfc_MX                      _rfc,
        Curp_MX                     _curp,
        StateInscription_MX         _stateInscript              = '',
        LegalRepresentativeName_MX  _legalRepName               = '',
        Rfc_MX                      _legalRepRFC                = '',
        Curp_MX                     _legalRepCURP               = '',
        VendorOperationType_MX      _vendOperationType          = VendorOperationType_MX::Blank,
        VendorType_MX               _vendType                   = VendorType_MX::Blank,
        ForeignTaxRegistration_MX   _vendForeignTaxRegistration = '')
    {
        entityId                    = _id;
        currentRecord               = _currentRecord;
        entityType                  = _type;
        entityRFC                   = _rfc;
        entityCURP                  = _curp;
        legalRepName                = _legalRepName;
        legalRepRFC                 = _legalRepRFC;
        legalRepCURP                = _legalRepCURP;
        vendOperationType           = _vendOperationType;
        vendType                    = _vendType;
        vendForeignTaxRegistration  = _vendForeignTaxRegistration;
        stateInscription            = _stateInscript;
    }

]]></Source>
			</Method>
			<Method>
				<Name>containsOnlyValidChars</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether the text contais only valid characters.
    /// </summary>
    /// <param name = "_inStr">The value for which the format is to be validated.</param>
    /// <param name = "_allowBlankSpaces">Whether allow blank spaces as valid characters</param>
    /// <returns>True if valid; otherwise, false.</returns>
    private boolean containsOnlyValidChars(str _inStr = '', boolean _allowBlankSpaces = false)
    {
        str input = _allowBlankSpaces ? strRem(_inStr, ' ') : _inStr;
        return (strLen(input) == strLen(strAlpha(_instr)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidDateFormat</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the date format is YYDDMM and that it is a valid date in the month for the year.
    /// </summary>
    /// <param name="_userDate">
    ///    The value for which to validate the format.
    /// </param>
    /// <returns>
    ///    true if the format for the specified <paramref name="_userDate" /> parameter is valid; otherwise,
    ///    false.
    /// </returns>
    /// <remarks>
    ///    This method is called from the <c>validateRfc</c> and <c>validateCurp</c> methods of this class.
    /// </remarks>
    protected boolean isValidDateFormat(str _userDate)
    {
        return (_userDate == date2str(str2Date(_userDate,321), 321, 2, 0, 2, 0, 2, DateFlags::None));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidStateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the state ID is from the list of states present for a region of Mexico.
    /// </summary>
    /// <param name="_curp">
    /// The state ID to validate.
    /// </param>
    /// <returns>
    /// true if the state ID is from the list of states present for a region of Mexico; otherwise, false.
    /// </returns>
    protected boolean isValidStateId(Curp_MX _curp)
    {
        #isoCountryRegionCodes
        LogisticsAddressCountryRegion countryRegion;

        // the 12th and 13th letter of a curp are the state ISO code of where the person was born
        str stateId = subStr(_curp, 12, 2);

        if (stateId == 'NE')
            return true;

        select firstonly CountryRegionId from countryRegion where countryRegion.isOcode == #isoMX;

        return LogisticsAddressState::exist(countryRegion.CountryRegionId, stateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBankAccountTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates all the fiscal information that is required by the <c>BankAccountTable</c> table.
    /// </summary>
    /// <returns>
    ///    true if the fiscal information is correct.
    /// </returns>
    public boolean validateBankAccountTaxRegistration()
    {
        BankAccountTable localBankAccount;
        boolean          ret = true;

        if (entityId != tableNum(BankAccountTable))
        {
            return false;
        }

        if (entityRFC == '')
        {
            ret = checkFailed("@SYS312470");
        }
        if (ret)
        {
            ret = this.validateRFC(entityRFC, entityType) && ret;
            select firstonly Rfc_MX from localBankAccount
                where localBankAccount.RecId  != currentRecord
                   && localBankAccount.Rfc_MX == entityRFC ;

            if (localBankAccount.Rfc_MX)
            {
                warning(strFmt("@SYS312475", entityRFC));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCompanyTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates all the fiscal information that is required by the <c>CompanyInfo</c> table.
    /// </summary>
    /// <returns>
    ///    true if the fiscal information is correct.
    /// </returns>
    public boolean validateCompanyTaxRegistration()
    {
        CompanyInfo localCompanyInfo;
        boolean     ret = true;

        if (entityId != tableNum(CompanyInfo))
        {
            return false;
        }

        if (entityType    == CompanyType_MX::LegalEntity
            || entityType == CompanyType_MX::LegalPerson)
        {
            if (!entityRFC && !entityCURP)
            {
                ret = checkFailed("@SYS315863");
            }

            if (entityRFC)
            {
                ret = this.validateRFC(entityRFC, entityType) && ret;
                select firstonly Rfc_MX from localCompanyInfo
                    where localCompanyInfo.RecId   != currentRecord
                       && (localCompanyInfo.Rfc_MX == entityRFC);

                if (localCompanyInfo.Rfc_MX)
                {
                    warning(strFmt("@SYS312475", entityRFC));
                }
            }

            if (entityCURP)
            {
                ret = this.validateCurp(entityCURP, entityType) && ret;
            }

            if (legalRepName)
            {
                ret = this.validateRepresentativeInformation() && ret;
            }

            if (stateInscription)
            {
                ret = this.validateStateInscription(stateInscription) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCurp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the CURP from the specified <paramref name="_localCURP" /> parameter follows the
    ///    defined format.
    /// </summary>
    /// <param name="_localCURP">
    ///    The value for which to validate the format.
    /// </param>
    /// <param name="_localcompanyType">
    ///    The value that is based on which format is defined and validated.
    /// </param>
    /// <returns>
    ///    true if the format for the <paramref name="_localCURP" /> parameter is valid; otherwise, false.
    /// </returns>
    public boolean validateCurp(
        Curp_MX         _localCURP,
        CompanyType_MX  _localcompanyType    = CompanyType_MX::Blank)
    {
        TaxRegistrationValidator_MX taxRegistrationValidator    = new TaxRegistrationValidator_MX();
        boolean                     ok                          = true;
        #Characters

        if (!_localCURP)
        {
            return ok;
        }
        switch (_localcompanyType)
        {
            case CompanyType_MX::LegalEntity:
            case CompanyType_MX::LegalPerson:
                if (strLen(_localCURP) != 18)
                {
                    ok = checkFailed("@SYS312477");
                }
                else
                {
                    if (strLen(strAlpha(subStr(_localCURP, 1, 4)))!= 4)
                    {
                        ok = checkFailed("@SYS312479");
                    }
                    if (ok)
                    {
                        if (!this.isValidDateFormat(subStr(_localCURP, 5, 6)))
                        {
                            ok = checkFailed("@SYS312480");
                        }
                    }
                    if (ok && subStr(_localCURP, 11, 1) != #capitalM && subStr(_localCURP, 11, 1)!= #capitalH)
                    {
                        ok = checkFailed(strFmt("@SYS312481", subStr(_localCURP, 11, 1)));
                    }

                    if (ok && !this.isValidStateId(_localCURP))
                    {
                        ok = checkFailed(strFmt("@SYS312483", subStr(_localCURP, 12, 2)));
                    }

                    if (ok && strLen(subStr(_localCURP, 14, 5)) != strLen(strAlpha(subStr(_localCURP, 14, 5))))
                    {
                        ok = checkFailed("@SYS312484");
                    }
                }
                break;

            case CompanyType_MX::ForeignCompany:
                ok = checkFailed("@Mexico:CustVendTable_NoCurpNumberForForeignCompanies");
                break;

            default:
                ok = false;
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCustomerTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates all the fiscal information that is required by the customer.
    /// </summary>
    /// <returns>
    ///    true if everything is correct.
    /// </returns>
    public boolean validateCustomerTaxRegistration()
    {
        boolean ret = true;

        if (entityId != tableNum(CustTable))
        {
            return false;
        }

        switch (entityType)
        {
            case CompanyType_MX::LegalEntity:
            case CompanyType_MX::LegalPerson:
                if (!entityRFC && !entityCURP)
                {
                    ret = checkFailed("@SYS315863");
                }

                if (entityRFC)
                {
                    ret = this.validateRFC(entityRFC, entityType) && ret;
                    this.validateDuplicateCustomerRfc();
                }

                if (entityCURP)
                {
                    ret = this.validateCurp(entityCURP, entityType) && ret;
                }

                if (stateInscription)
                {
                    ret = this.validateStateInscription(stateInscription) && ret;
                }
            break;

            case CompanyType_MX::ForeignCompany:
                if (entityRFC)
                {
                    ret = this.validateRFC(entityRFC, entityType) && ret;
                    this.validateDuplicateCustomerRfc();
                }
            break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicateCustomerRfc</Name>
				<Source><![CDATA[
    private void validateDuplicateCustomerRfc()
    {
        CustTable localCustTable;

        select firstonly Rfc_MX from localCustTable
            where localCustTable.RecId   != currentRecord
                && (localCustTable.Rfc_MX == entityRFC);

        if (localCustTable.Rfc_MX)
        {
            warning(strFmt("@SYS312475", entityRFC));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDIOTAdditionInfoTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates all the fiscal information that is required by the
    ///    <c>DIOTAdditionalInfoForNoVendor_MX</c> table.
    /// </summary>
    /// <param name="_validateBothRfcFormats">
    ///     Validate rfc field for legal Person and Legal Entity
    /// </param>
    /// <returns>
    ///    true if everything is correct.
    /// </returns>
    /// <remarks>
    ///    The name of this method is truncated from the
    ///    <c>validateDIOTAdditionalInfoForNoVendorTaxRegistration</c> method to the
    ///    <c>validateDIOTAdditionInfoTaxRegistration</c> method.
    /// </remarks>
    public boolean validateDIOTAdditionInfoTaxRegistration(boolean _validateBothRfcFormats = false)
    {
        boolean ret = true;
        boolean rfcValidationRet = false;

        switch (entityId)
        {
            case tableNum(DIOTAdditionalInfoForNoVendor_MX):
            case tableNum(DIOTAddlInfoForNoVendorLedger_MX):
                break;

            default:
                return false;
        }

        if (vendType    == VendorType_MX::DomesticGlobal
            || vendType == VendorType_MX::DomesticVendor)
        {
            if (entityRFC)
            {
                if (_validateBothRfcFormats)
                {
                    rfcValidationRet = this.validateRfcForLegalPersonOrLegalEntity(entityRFC);

                    ret = rfcValidationRet & ret;
                }
                else
                {
                    ret = this.validateRFC(entityRFC, entityType) && ret;
                }
            }
            if (entityCURP)
            {
                ret = this.validateCurp(entityCURP, entityType) && ret;
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateForeignTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <paramref name="_registraionId" /> parameter that does not contain special
    ///    characters passed as an argument.
    /// </summary>
    /// <param name="_registraionId">
    ///    The value for which the format is to be validated.
    /// </param>
    /// <returns>
    ///    true if the format for the <paramref name="_registraionId" /> parameter is valid; otherwise, false.
    /// </returns>
    public boolean validateForeignTaxRegistration(ForeignTaxRegistration_MX _registraionId = '')
    {
        return this.containsOnlyValidChars(_registraionId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLegalRepresentativeName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <paramref name="_name" /> parameter that does not contain special characters
    ///    passed as an argument.
    /// </summary>
    /// <param name="_name">
    ///    The value for which the format is to be validated.
    /// </param>
    /// <returns>
    ///    true if the format for the <paramref name="_name" /> parameter is valid; otherwise, false.
    /// </returns>
    public boolean validateLegalRepresentativeName(LegalRepresentativeName_MX _name = '')
    {
        return this.containsOnlyValidChars(_name, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateNationality</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <paramref name="_nationality" /> parameter that does not contain special
    ///    characters passed as an argument.
    /// </summary>
    /// <param name="_nationality">
    ///    The value for which the format is to be validated.
    /// </param>
    /// <returns>
    ///    true if the format for the <paramref name="_nationality" /> parameter is valid; otherwise, false.
    /// </returns>
    public boolean validateNationality(VendorNationality_MX _nationality = '')
    {
        return this.containsOnlyValidChars(_nationality);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRepresentativeInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the legal representative name is entered and that the legal representative RFC and
    ///    legal representative CURP are entered.
    /// </summary>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method is called only when the entity type is Legal entity or Legal person.If the legal
    ///    representative name, the legal representative RFC, and the legal representative CURP are not
    ///    available, the method returns false.
    /// </remarks>
    public boolean validateRepresentativeInformation()
    {
        boolean ret = true;
        CompanyType_MX representativeType = entityType;

        if (!legalRepRFC && !legalRepCURP)
        {
            if (entityId != tableNum(VendTable))
            {
                ret = checkFailed("@SYS315863");
            }
        }

        if (entityId == tableNum(VendTable))
        {
            representativeType = (strLen(legalRepRFC) == 12) ? CompanyType_MX::LegalEntity : CompanyType_MX::LegalPerson;
        }

	if (legalRepRFC)
        {
            if(representativeType == CompanyType_MX::LegalEntity)
            {            
                ret = this.validateRfcForForeignCompany(legalRepRFC) && ret;
            }
            else
            {
                ret = this.validateRfcForLegalPerson(legalRepRFC) && ret;
            }

            if (entityRFC && entityRFC == legalRepRFC)
            {
                ret = checkFailed("@SYS312467");
            }
        }

        if (legalRepCURP)
        {
            ret = this.validateCurp(legalRepCURP, representativeType) && ret;

            if (entityCURP && entityCURP == legalRepCURP)
            {
                ret = checkFailed("@SYS312468");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRFC</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the RFC from the <paramref name="_rfc" /> buffer is valid.
    /// </summary>
    /// <param name="_localRFC">
    ///    The value for which the format is to be validated.
    /// </param>
    /// <param name="_localCompanyType">
    ///    The value, depending on which the format is defined.
    /// </param>
    /// <returns>
    ///    true if the format for <paramref name="_rfc" /> pass is valid; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The error messages are the same, but the conditions are different depending on the company type.
    /// </remarks>
    public boolean validateRFC(Rfc_MX _localRFC, CompanyType_MX _localCompanyType)
    {
        boolean ok = true;

        if (!_localRFC)
        {
            return ok;
        }

        switch (_localCompanyType)
        {
            case CompanyType_MX::LegalEntity:
                ok = this.validateRfcForLegalEntity(_localRFC);
                break;

            case CompanyType_MX::LegalPerson:
                ok = this.validateRfcForLegalPerson(_localRFC);
                break;

            case CompanyType_MX::ForeignCompany:
                ok = this.validateRfcForForeignCompany(_localRFC);
                break;

            default:
                ok = false;
                break;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRfcForForeignCompany</Name>
				<Source><![CDATA[
    private boolean validateRfcForForeignCompany(Rfc_MX _localRFC)
    {
        boolean ok = true;

        if ((strLen(_localRFC) == 12))
        {
            ok = this.validateRfcForLegalEntity(_localRFC);
        }
        else
        {
            ok = this.validateRfcForLegalPerson(_localRFC);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRfcForLegalEntity</Name>
				<Source><![CDATA[
    private boolean validateRfcForLegalEntity(
        Rfc_MX _localRFC,
        boolean supressMessages = false)
    {
        boolean ok           = true;
        str     errorMessage = '';

        const str ForeignRFC = 'XEXX010101000';

        if (_localRFC != ForeignRFC)
        {
            if (strLen(_localRFC) != 12)
            {
                ok = false;
                errorMessage = "@SYS312485";
            }
            else
            {
                if (!(this.isValidDateFormat(subStr(_localRFC,4, 6))))
                {
                    ok = false;
                    errorMessage = "@SYS312485";
                }

                if (strLen(subStr(_localRFC,10, 3)) != strLen(strAlpha(subStr(_localRFC, 10, 3))))
                {
                    ok = false;
                    errorMessage = "@SYS312489";
                }
            }
        }

        if (!supressMessages && !ok)
        {
            checkFailed(errorMessage);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRfcForLegalPerson</Name>
				<Source><![CDATA[
    private boolean validateRfcForLegalPerson(
        Rfc_MX _localRFC,
        boolean supressMessages = false)
    {
        boolean ok           = true;
        str     errorMessage = '';

        if ((strLen(_localRFC) == 12))
        {
            ok = false;
            errorMessage = "@SYS312485";
        }
        else
        {
            if (!(this.isValidDateFormat(subStr(_localRFC, 5, 6))))
            {
                ok = false;
                errorMessage = "@SYS312488";
            }

            if (strLen(subStr(_localRFC,11, 3)) != strLen(strAlpha(subStr(_localRFC, 11, 3))))
            {
                ok = false;
                errorMessage = "@SYS312489";
            }
        }

        if (!supressMessages && !ok)
        {
            checkFailed(errorMessage);
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRfcForLegalPersonOrLegalEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates RFC number whether it is a Legal Person or Legal entity.
    /// </summary>
    /// <param name="_localRFC">
    ///    The value to be validated.
    /// </param>
    /// <returns>
    ///    true if <paramref name="_rfc" /> matches with any rfc format
    /// </returns>
    /// <remarks>
    ///    The error messages are the same, but the conditions are different depending on the rfc format.
    /// </remarks>
    public boolean validateRfcForLegalPersonOrLegalEntity(Rfc_MX _localRFC)
    {
        boolean ret = false;

        ret = this.validateRfcForLegalEntity(_localRFC,true)
            || this.validateRfcForLegalPerson(_localRFC,true);

        if (!ret)
        {
            return this.validateRfcForLegalEntity(_localRFC)
                || this.validateRfcForLegalPerson(_localRFC);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateStateInscription</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates that the state inscription from the <paramref name="_stateInscript" /> parameter does not
    ///    contain special characters.
    /// </summary>
    /// <param name="_stateInscript">
    ///    The value for which to validate the format.
    /// </param>
    /// <returns>
    ///    true if the format for the <paramref name="_stateInscript" /> parameter is valid; otherwise, false.
    /// </returns>
    public boolean validateStateInscription(StateInscription_MX _stateInscript = '')
    {
        return this.containsOnlyValidChars(_stateInscript, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendor</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the vendor based on the vendor type, vendor operation type, and the company type.
    /// </summary>
    /// <param name="_localRFC">
    ///    The values to check the availability of value for a local vendor type.
    /// </param>
    /// <param name="_localOperationType">
    ///    The values to validate based on the operation type.
    /// </param>
    /// <param name="_localVendorType">
    ///    The values to validate based on the vendor type.
    /// </param>
    /// <param name="_localForeignTaxRegistration">
    ///    The values to validate the field value, depending on the vendor type.
    /// </param>
    /// <param name="_localCompanyType">
    ///    The values based in which validation of the RFC for the local vendor type is made.
    /// </param>
    /// <returns>
    ///    true if the validation is successful; otherwise, false.
    /// </returns>
    public boolean validateVendor(
        Rfc_MX                      _localRFC,
        VendorOperationType_MX      _localOperationType             = VendorOperationType_MX::Blank,
        VendorType_MX               _localVendorType                = VendorType_MX::Blank ,
        ForeignTaxRegistration_MX   _localForeignTaxRegistration    = '',
        CompanyType_MX              _localCompanyType               = CompanyType_MX::Blank)
    {
        boolean ret = true;

        if (_localVendorType == VendorType_MX::Blank)
        {
            ret =  checkFailed("@SYS312597");
        }

        if (ret && _localOperationType == VendorOperationType_MX::Blank)
        {
            ret = checkFailed("@SYS312596");
        }

        if (ret
            && _localOperationType == VendorOperationType_MX::RentLease
            && _localVendorType    == VendorType_MX::ForeignVendor)
        {
            ret = checkFailed(strFmt("@SYS312599", _localOperationType));
        }

        if (ret
            && _localVendorType               == VendorType_MX::ForeignVendor
            && _localForeignTaxRegistration   == '')
        {
            ret = checkFailed("@SYS312598");
        }

        if (ret
            && _localVendorType   == VendorType_MX::DomesticVendor
            &&(_localCompanyType  == CompanyType_MX::LegalPerson || _localCompanyType  == CompanyType_MX::LegalEntity)
            && _localRFC == '')
        {
            ret = checkFailed("@SYS312486");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVendorTaxRegistration</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates all the fiscal information that is required by the vendor
    /// </summary>
    /// <returns>
    ///    true if everything is correct.
    /// </returns>
    public boolean validateVendorTaxRegistration()
    {
        boolean ret = true;

        if (entityId != tableNum(VendTable))
        {
            return false;
        }

        switch (entityType)
        {
            case CompanyType_MX::LegalEntity:
            case CompanyType_MX::LegalPerson:
                if (!entityRFC && !entityCURP)
                {
                    ret = checkFailed("@SYS315863");
                }

                if (entityRFC)
                {
                    ret = this.validateRFC(entityRFC, entityType) && ret;
                    this.validateDuplicateVendorRfc();
                }

                if (entityCURP)
                {
                    ret = this.validateCurp(entityCURP, entityType) && ret;
                }

                if (stateInscription)
                {
                    ret = this.validateStateInscription(stateInscription) && ret;
                }
            break;

            case CompanyType_MX::ForeignCompany:
                if (entityRFC)
                {
                    ret = this.validateRFC(entityRFC, entityType) && ret;
                    this.validateDuplicateVendorRfc();
                }
            break;

            default:
                ret = checkFailed("@Mexico:VendTable_CompanyTypeMissing");
            break;
        }

        ret = this.validateVendor(entityRFC, vendOperationType, vendType, vendForeignTaxRegistration, entityType) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateDuplicateVendorRfc</Name>
				<Source><![CDATA[
    private void validateDuplicateVendorRfc()
    {
        VendTable localVendTable;

        select firstonly Rfc_MX from localVendTable
            where localVendTable.RecId   != currentRecord
                && (localVendTable.Rfc_MX == entityRFC);

        if (localVendTable.Rfc_MX)
        {
            warning(strFmt("@SYS312475", entityRFC));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>TaxRegistrationValidator_MX</c> class.
    /// </summary>
    /// <param name="_source">
    ///    The source of the data, such as <c>CompanyInfo</c>, <c>CustTable</c>, <c>VendTable</c> or
    ///    <c>BankAccountTable</c>.
    /// </param>
    /// <returns>
    ///    An instance of this class to use to perform the validations.
    /// </returns>
    public static TaxRegistrationValidator_MX construct(Common _source)
    {
        TaxRegistrationValidator_MX     taxRegistrationValidator = new TaxRegistrationValidator_MX();
        CompanyInfo                         companyInfo;
        CustTable                           custTable;
        VendTable                           vendTable;
        BankAccountTable                    bankAccount;
        DIOTAdditionalInfoForNoVendor_MX    additionalInfo;

        switch (_source.TableId)
        {
            case tableNum(CompanyInfo)      :
                companyInfo = _source;
                taxRegistrationValidator.fillInternalFields(companyInfo.TableId,
                                                            companyInfo.RecId,
                                                            companyInfo.CompanyType_MX,
                                                            companyInfo.Rfc_MX,
                                                            companyInfo.Curp_MX,
                                                            companyInfo.StateInscription_MX,
                                                            companyInfo.LegalRepresentativeName_MX,
                                                            companyInfo.LegalRepresentativeRfc_MX,
                                                            companyInfo.LegalRepresentativeCurp_MX);
                break;

            case tableNum(CustTable)        :
                custTable = _source;
                taxRegistrationValidator.fillInternalFields(custTable.TableId,
                                                            custTable.RecId,
                                                            custTable.CompanyType_MX,
                                                            custTable.Rfc_MX,
                                                            custTable.Curp_MX,
                                                            custTable.StateInscription_MX);
                break;

            case tableNum(VendTable)        :
                vendTable = _source;
                taxRegistrationValidator.fillInternalFields(vendTable.TableId,
                                                            vendTable.RecId,
                                                            vendTable.CompanyType_MX,
                                                            vendTable.Rfc_MX,
                                                            vendTable.Curp_MX,
                                                            vendTable.StateInscription_MX,
                                                            vendTable.LegalRepresentativeName_MX,
                                                            vendTable.LegalRepresentativeRfc_MX,
                                                            vendTable.LegalRepresentativeCurp_MX,
                                                            vendTable.OperationType_MX,
                                                            vendTable.VendorType_MX,
                                                            vendTable.ForeignTaxRegistration_MX);
                break;

            case tableNum(BankAccountTable) :
                bankAccount = _source;
                taxRegistrationValidator.fillInternalFields(bankAccount.TableId,
                                                            bankAccount.RecId,
                                                            CompanyType_MX::LegalEntity,
                                                            bankAccount.Rfc_MX,
                                                            '');
                break;

            case tableNum(DIOTAdditionalInfoForNoVendor_MX):
            case tableNum(DIOTAddlInfoForNoVendorLedger_MX):

                additionalInfo = _source;
                taxRegistrationValidator.fillInternalFields(additionalInfo.TableId,
                                                            additionalInfo.RecId,
                                                            CompanyType_MX::LegalEntity,
                                                            additionalInfo.Rfc,
                                                            additionalInfo.Curp,
                                                            '',
                                                            '',
                                                            '',
                                                            '',
                                                            VendorOperationType_MX::Blank,
                                                            additionalInfo.VendorType,
                                                            additionalInfo.ForeignTaxRegistration);
                break;
        }

        return taxRegistrationValidator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>