<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OverdueVATJournalCancel_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>OverdueVATJournalCancel_W</c> used for canceling posting of posted overdue debt VAT journal.
/// </summary>
class OverdueVATJournalCancel_W extends RunBaseBatch implements BatchRetryable
{
    OverdueJournalTable_W overdueJournalTable;

    NoYes   correction;

    DialogField dfCorrection;

    private const Version currentVersion = 1;
    #localMacro.currentList
    correction
    #endMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunBase dialog = super();
        
        dfCorrection = dialog.addFieldValue(extendedTypeStr(Correct), correction);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        correction = dfCorrection.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numberSequenceCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>NumberSequenceCode</c> which used for retriving voucher numbers used for posting.
    /// </summary>
    /// <returns>
    /// <c>NumberSequenceCode</c> value.
    /// </returns>
    protected NumberSequenceCode numberSequenceCode()
    {
        NumberSequenceReference numberSequenceReference;
        switch (overdueJournalTable.TableId)
        {
            case tableNum(CustOverdueVATJournalTable_W):
                numberSequenceReference = CustParameters::numRefOverdueVATVoucher_W();
                break;
            case tableNum(VendOverdueVATJournalTable_W):
                numberSequenceReference = VendParameters::numRefOverdueVATVoucher_W();
                break;
        }
        return numberSequenceReference.numberSequenceTable().NumberSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, #currentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOverdueJournalTable</Name>
				<Source><![CDATA[
    public OverdueJournalTable_W parmOverdueJournalTable(OverdueJournalTable_W _overdueJournalTable = overdueJournalTable)
    {
        overdueJournalTable = _overdueJournalTable;
        return overdueJournalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    #OCCRetryCount
    public void run()
    {
         try
        {
            ttsBegin;

            overdueJournalTable = OverdueJournalTable_W::find(overdueJournalTable.TableId, overdueJournalTable.JournalId, true);

            LedgerVoucher ledgerVoucher = LedgerVoucher::newLedgerPost(DetailSummary::Summary, this.sysModule(), this.numberSequenceCode());

            Voucher voucher = this.getSubLedgerVoucher();

            ledgerVoucher.addVoucher(
                LedgerVoucherObject::newVoucher(
                    voucher,
                    overdueJournalTable.TransDate,
                    this.sysModule(),
                    LedgerTransType::Tax,
                    correction
                    ));

            TaxOverdueVATCancel_W tax = new TaxOverdueVATCancel_W();

            tax.calcAndPost(LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher), overdueJournalTable);

            ledgerVoucher.end();

            overdueJournalTable.Cancelled = NoYes::Yes;
            overdueJournalTable.update();

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
        catch (Exception::Error)
        {
            throw error("@SYS21533");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSubLedgerVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the voucher based on Reuse voucher type.
    /// </summary>
    /// <returns>
    /// The voucher.
    /// </returns>
    [Wrappable(true)]
    protected final Voucher getSubLedgerVoucher()
    {
        Voucher voucher;

        switch (LedgerParameters::find().CheckVoucher)
        {
            case ReuseVoucher::AcceptDuplicate:
                voucher = overdueJournalTable.LedgerVoucher;
                break;
            default:
                voucher = NumberSeq::newGetVoucherFromCode(this.numberSequenceCode()).voucher();
        }

        return voucher;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sysModule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>SysModule</c> value used for posting.
    /// </summary>
    /// <returns>
    /// <c>SysModule</c> value.
    /// </returns>
    protected SysModule sysModule()
    {
        SysModule ret;
        switch (overdueJournalTable.TableId)
        {
            case tableNum(CustOverdueVATJournalTable_W):
                ret = SysModule::Cust;
                break;
            case tableNum(VendOverdueVATJournalTable_W):
                ret = SysModule::Vend;
                break;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean ret = true;
        Version version = RunBase::getVersion(packedClass);
        
        switch (version)
        {
            case currentVersion:
                [version, #currentList] = packedClass;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static OverdueVATJournalCancel_W construct()
    {
        return new OverdueVATJournalCancel_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns description of class used as caption in dialog.
    /// </summary>
    /// <returns>
    /// String containing description.
    /// </returns>
    public static Description description()
    {
        return "@SYS4003530";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        OverdueVATJournalCancel_W overdueVATJournalCancel = OverdueVATJournalCancel_W::construct();
        FormDataSource            formDataSource;
        
        if (! _args ||
            ! _args.record() ||
            (_args.dataset() != tableNum(VendOverdueVATJournalTable_W) &&
            _args.dataset() != tableNum(CustOverdueVATJournalTable_W))
            )
        {
            throw error(Error::missingRecord(funcName()));
        }

        overdueVATJournalCancel.parmOverdueJournalTable(_args.record());
        formDataSource = FormDataUtil::getFormDataSource(_args.record());

        if (overdueVATJournalCancel.prompt())
        {
            overdueVATJournalCancel.runOperation();

            if (formDataSource)
            {
                formDataSource.reread();
                formDataSource.refresh();
                formDataSource.active();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>