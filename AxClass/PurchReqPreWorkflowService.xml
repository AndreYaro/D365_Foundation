<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqPreWorkflowService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqPreWorkflowService</c> class provides the service operation for running the purchase requisition workflow checks.
/// </summary>
public class PurchReqPreWorkflowService
{
    private PurchReqPreWorkflowContract dataContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>performBudgetCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Entry point method of the service.
    /// </summary>
    /// <param name = "_dataContract">Parameters for the service.</param>
    public void performBudgetCheck(PurchReqPreWorkflowContract _dataContract)
    {
        if (BudgetControlConfiguration::isControlConfigured())
        {
            dataContract = _dataContract;

            if (!dataContract.parmPurchReqId())
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            PurchReqTable purchReqTable = PurchReqTable::findPurchReqId(dataContract.parmPurchReqId());

            if (this.isLedgerBudgetControlEnabledForAnyBuyingLegalEntity(purchReqTable))
            {
                // Check budget prior to confirming the workflow dialog to allow users to cancel the action.
                purchReqTable.performBudgetCheck();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLedgerBudgetControlEnabledForAnyBuyingLegalEntity</Name>
				<Source><![CDATA[
    private boolean isLedgerBudgetControlEnabledForAnyBuyingLegalEntity(PurchReqTable _purchReqTable)
    {
        boolean isLedgerBudgetControlEnabled;

        PurchReqLine purchReqLine;

        while select BuyingLegalEntity from purchReqLine
            group by BuyingLegalEntity
            where purchReqLine.PurchReqTable == _purchReqTable.RecId
        {
            isLedgerBudgetControlEnabled = Ledger::isLedgerBudgetControlEnabled(Ledger::primaryLedger(purchReqLine.BuyingLegalEntity));

            if (isLedgerBudgetControlEnabled)
            {
                break;
            }
        }

        return isLedgerBudgetControlEnabled;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>