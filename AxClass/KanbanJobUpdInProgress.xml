<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanJobUpdInProgress</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanJobUpdInProgress</c> class performs status updates for kanban jobs with target status
///    in progress.
/// </summary>
public class KanbanJobUpdInProgress extends KanbanJobUpd
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>runStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs actions for the 'in progress' status update.
    /// </summary>
    protected void runStatus()
    {
        this.setStartDateTime();
        this.setStatus(LeanKanbanJobStatus::InProgress);
        this.updateKanbanJob();
        this.updateInventoryKanbanJob();
        this.startKanban();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStartDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the start time of the kanban job.
    /// </summary>
    protected void setStartDateTime()
    {
        kanbanJob.ActualStartDateTime = kanbanJobStatusUpdate.TransactionDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startKanban</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the parent kanban.
    /// </summary>
    protected void startKanban()
    {
        KanbanJobStatus     kanbanJobStatusLocal = kanbanJob.status(updateKanban);

        if (kanbanJobStatusLocal.mustSynchronizeKanbanStatus())
        {
            KanbanStatus kanbanStatus = KanbanStatus::newKanbanKanbanJobStatusUpdate(kanbanJob.kanban(),kanbanJobStatusUpdate);
            kanbanStatus.run(kanbanJobStatusLocal.correspondingKanbanStatus(kanbanJob.Status));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInventoryKanbanJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the inventory transactions for the kanban job, if it is required.
    /// </summary>
    protected void updateInventoryKanbanJob()
    {
        KanbanJobType kanbanJobType = kanbanJob.type();

        if (!kanbanJobType.mustBeInventoryControlled())
        {
            return;
        }

        InventMovement inventMovement = kanbanjob.inventMovement(InventMovSubType::TransferOrderTo);
        InventUpd_Reservation inventUpd_Reservation = InventUpd_Reservation::newKanbanJob(inventMovement);

        inventUpd_Reservation.updateNow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanJobUpd construct()
    {
        return new KanbanJobUpdInProgress();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
