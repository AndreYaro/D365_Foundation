<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PriceDiscAdmCheckPostInputContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PriceDiscAdmCheckPostInputContract</c> class is used as a parameter for the <c>PriceDiscAdmCheckPost.runIL</c> method.
/// </summary>
class PriceDiscAdmCheckPostInputContract implements SysPackable
{
    PriceDiscJournalNum         journalNum;
    PriceDiscAdmCheckActionType checkActionType;
    Set                         priceDiscAdmTransSetSelected;
    container                   packedPriceDiscAdmTransSetSelected;
    boolean                     checkOnly;
    boolean                     acceptWarnings;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        journalNum,
        checkActionType,
        packedPriceDiscAdmTransSetSelected,
        checkOnly,
        acceptWarnings
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        if (priceDiscAdmTransSetSelected == null)
        {
            priceDiscAdmTransSetSelected = new Set(typeName2Type(extendedTypeStr(RecId)));
        }
        packedPriceDiscAdmTransSetSelected = priceDiscAdmTransSetSelected.pack();
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAcceptWarnings</Name>
				<Source><![CDATA[
        public boolean parmAcceptWarnings(boolean _acceptWarnings = acceptWarnings)
    {
        acceptWarnings = _acceptWarnings;
        return acceptWarnings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckActionType</Name>
				<Source><![CDATA[
        public PriceDiscAdmCheckActionType parmCheckActionType(PriceDiscAdmCheckActionType _checkActionType = checkActionType)
    {
        checkActionType = _checkActionType;
        return checkActionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckOnly</Name>
				<Source><![CDATA[
        public boolean parmCheckOnly(boolean _checkOnly = checkOnly)
    {
        checkOnly = _checkOnly;
        return checkOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalNum</Name>
				<Source><![CDATA[
        public PriceDiscJournalNum  parmJournalNum(PriceDiscJournalNum _journalNum = journalNum)
    {
        journalNum = _journalNum;
        return journalNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPriceDiscAdmTransSetSelected</Name>
				<Source><![CDATA[
        public Set parmPriceDiscAdmTransSetSelected(Set _priceDiscAdmTransSetSelected = priceDiscAdmTransSetSelected)
    {
        priceDiscAdmTransSetSelected = _priceDiscAdmTransSetSelected;
        return priceDiscAdmTransSetSelected;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedClass)
    {
        int version     = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                if (packedPriceDiscAdmTransSetSelected == conNull())
                {
                    priceDiscAdmTransSetSelected = new Set(typeName2Type(extendedTypeStr(RecId)));
                }
                else
                {
                    priceDiscAdmTransSetSelected = Set::create(packedPriceDiscAdmTransSetSelected);
                }
                return true;
            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static PriceDiscAdmCheckPostInputContract construct()
    {
        return new PriceDiscAdmCheckPostInputContract();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PriceDiscAdmCheckPostInputContract</c> class based on a container
    /// from a prior call to the <c>PriceDiscAdmCheckPostInputContract.pack</c> method.
    /// </summary>
    /// <param name="_packedClass">
    /// A container that contains the packed class.
    /// </param>
    /// <returns>
    /// An instance of the <c>PriceDiscAdmCheckPostInputContract</c> class identical to the one that was
    /// packed into the <c>container</c> .
    /// </returns>
    static public PriceDiscAdmCheckPostInputContract create(container _packedClass)
    {
        PriceDiscAdmCheckPostInputContract priceDiscAdmCheckPostInputContract = PriceDiscAdmCheckPostInputContract::construct();
        priceDiscAdmCheckPostInputContract.unpack(_packedClass);
        return priceDiscAdmCheckPostInputContract;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>