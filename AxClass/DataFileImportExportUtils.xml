<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DataFileImportExportUtils</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class contains utility methods for importing and exporting data files.
/// </summary>
class DataFileImportExportUtils
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reuploadFileAsXmlFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reuploads the given import file as an XML file.
    /// </summary>
    /// <param name = "_fileID">The shared service unit file ID.</param>
    /// <param name = "_uploadFileName">The name of file uploaded.</param>
    /// <param name="_fileUploadStrategyClassName">The name of the class strategy to upload the file to storage.</param>
    /// <returns>The shared service unit file ID of the new file.</returns>
    public static SharedServiceUnitFileID reuploadFileAsXmlFile(
        SharedServiceUnitFileID _fileID,
        Filename _uploadFileName,
        classname _fileUploadStrategyClassName = classStr(FileUploadTemporaryStorageStrategy))
    {
        const str HeaderLine= '<Batch><![CDATA[';
        const str Footer= ']]]]><![CDATA[></Batch>';
        SharedServiceUnitURL localFilePathOut;
        ExecutePermission permission;

        // Download the file from the blob storage to the user-specified path and filename.
        SharedServiceUnitURL localFilePath = DMFStagingWriter::getSharedFilePath(_fileID);

        permission = new ExecutePermission();
        permission.assert();

        using (System.IO.StreamReader reader = new System.IO.StreamReader(localFilePath))
        {
            localFilePathOut = DataFileImportExportUtils::generateXMLFileNameWithPath();
            using (System.IO.StreamWriter writer = new System.IO.StreamWriter(localFilePathOut, false))
            {
                writer.Write(HeaderLine);
                DataFileImportExportUtils::readStreamWriterAndWriteToStreamWriter(reader, writer);
                writer.Write(Footer);
                writer.Flush();
            }
        }

        // Upload file to blob storage service.
        SharedServiceUnitFileID updatedFileURL = DataFileImportExportUtils::reuploadFileFromStream(
            localFilePathOut,
            _uploadFileName,
            _fileUploadStrategyClassName);

        DMFStagingWriter::deleteFileOnServer(localFilePath);
        DMFStagingWriter::deleteFileOnServer(localFilePathOut);

        CodeAccessPermission::revertAssert();

        return updatedFileURL;
    }

]]></Source>
			</Method>
			<Method>
				<Name>readStreamWriterAndWriteToStreamWriter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Reads and writes to stream writer.
    /// </summary>
    /// <param name = "_streamReader">
    ///     A <c>System.IO.StreamReader</c> object.
    /// </param>
    /// <param name = "_streamWriter">
    ///     A <c>System.IO.StreamWriter</c> object.
    /// </param>
    private static void readStreamWriterAndWriteToStreamWriter(System.IO.StreamReader _streamReader, System.IO.StreamWriter _streamWriter)
    {
        const int readChar = 1000;
        System.Char[] buffer = new System.Char[readChar]();

        while (_streamReader.Peek() >= 0)
        {
            int readLength = _streamReader.Read(buffer, 0, readChar);
            System.String s = new System.String(buffer);
            EventHandlerResult result = new EventHandlerResult();
            DataFileImportExportUtils::adjustBufferToWrite(s, result);

            if (readLength == readChar)
            {
                _streamWriter.Write(result.hasResult() ? result.result() : s);
            }
            else
            {
                str bufferString = result.hasResult() ? result.result() : s;
                str bufferSubString = subStr(bufferString, 0, readLength);
                _streamWriter.Write(bufferSubString);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustBufferToWrite</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Delegate for adjusting buffer to write.
    /// </summary>
    /// <param name = "_bufferString">
    ///     The buffer string.
    /// </param>
    /// <param name = "_result">
    ///     A <c>EventHandlerResult</c> object.
    /// </param>
    static delegate void adjustBufferToWrite(str _bufferString, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateXMLFileNameWithPath</Name>
				<Source><![CDATA[
    private static str generateXMLFileNameWithPath()
    {
        const str XMLFileExtension = '.xml';

        str statementFilePath;
        
        if (!isFlightEnabled('DMFEnableSharePathReplacementV2'))
        {
            statementFilePath = DMFParameters::find().SharedFolderPath;
        }
        else
        {
            // the path used to be withing the dixf file share
            // but dixf file share will soon no longer be usable with file io
            // Azure file share does not support mounting the share with a bearer token
            // Security is making use remove the mount which will break any file io calls to the dixf file share
            // Putting this file in the temp folder instead.
            statementFilePath = System.IO.Path::GetTempPath();
        }

        if (!strEndsWith(statementFilePath, @'\'))
        {
            statementFilePath = statementFilePath + @'\';
        }

        str statementFileNameOnly = guid2Str(newGuid()) + XMLFileExtension;

        return statementFilePath + statementFileNameOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reuploadFileFromStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reuploads the given import file.
    /// </summary>
    /// <param name = "_localFilePath">The local file path.</param>
    /// <param name = "_uploadFileName">Name of file uploaded.</param>
    /// <param name="_fileUploadStrategyClassName">The name of the class strategy to upload the file to storage.</param>
    /// <returns>The shared service unit file ID of the new file.</returns>
    public static SharedServiceUnitFileID reuploadFileFromStream(
        SharedServiceUnitURL _localFilePath,
        Filename _uploadFileName,
        ClassName _fileUploadStrategyClassName = classStr(FileUploadTemporaryStorageStrategy))
    {
        FileUploadTemporaryStorageResult result;

        using (System.IO.FileStream fs = new System.IO.FileStream(_localFilePath, System.IO.FileMode::Open, System.IO.FileAccess::Read))
        {
            SysDictClass uploadStrategyDictClass = new SysDictClass(className2Id(_fileUploadStrategyClassName));
            FileUploadTemporaryStorageStrategy fileUploadStrategy = uploadStrategyDictClass.makeObject() as FileUploadTemporaryStorageStrategy;

            Debug::assert(fileUploadStrategy != null);

            result = fileUploadStrategy.uploadFile(fs, _uploadFileName);
        }

        return result.getFileId();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>