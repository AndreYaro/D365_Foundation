<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BomCalcJobCleanUpTask</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BOMCalcJobCleanUpTask</c> class is used to run the BOM calculation in batch by using
///    multiple batch tasks.
/// </summary>
class BomCalcJobCleanUpTask extends RunBaseBatch implements BatchRetryable
{
    ItemBOMLevel      bomLevelFilter;
    container         packedBomCalcJobClass;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        bomLevelFilter,
        packedBomCalcJobClass
    #Endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the batch task can be seen in the batch journal.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBOMCalcJob_All</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BOMCalcJob_All</c> class by using the packed class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>BOMCalcJob_All</c> class
    /// </returns>
    protected BOMCalcJob_All createBOMCalcJob_All()
    {
        BOMCalcJob_All bomCalcJob;

        bomCalcJob = BOMCalcJob_All::construct();
        bomCalcJob.unpack(this.parmPackedBomCalcJobClass());

        return bomCalcJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>container</c> with a packed version of the class.
    /// </summary>
    /// <returns>
    /// A packed version of the class.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPackedBomCalcJobClass</Name>
				<Source><![CDATA[
    public container parmPackedBomCalcJobClass(container _packedBomCalcJobClass = packedBomCalcJobClass)
    {
        packedBomCalcJobClass = _packedBomCalcJobClass;

        return packedBomCalcJobClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        BOMCalcJob_All  bomCalcJob_All;

        bomCalcJob_All = this.createBOMCalcJob_All();
        bomCalcJob_All.unpack(this.parmPackedBomCalcJobClass());
        bomCalcJob_All.deleteTasks();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    ///    Always returns true.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks the values in the <c>Container</c> parameter.
    /// </summary>
    /// <param name="_packedClass">
    /// A <c>container</c> with a packed version of the class.
    /// </param>
    /// <returns>
    /// true if the class was unpacked using the container; otherwise, false.
    /// </returns>
    public boolean unpack(container _packedClass)
    {
        Integer version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static BOMCalcJobCleanUpTask construct()
    {
        return new BOMCalcJobCleanUpTask();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a description of what the class does.
    /// </summary>
    /// <returns>
    /// A description of what the class does.
    /// </returns>
    public static ClassDescription description()
    {
        return "@SYS335569";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromClass</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>BOMCalcJobCleanUpTask</c> class.
    /// </summary>
    /// <param name="_bomCalcJob_All">
    ///    An instance of the <c>BOMCalcJob_All</c> class which will be used for the clean up operations.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>BOMCalcJobCleanUpTask</c> class.
    /// </returns>
    public static BOMCalcJobCleanUpTask newFromClass(BOMCalcJob_All _bomCalcJob_All)
    {
        BOMCalcJobCleanUpTask bomCalcJobCleanUpTask;

        if (!_bomCalcJob_All)
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        bomCalcJobCleanUpTask = BOMCalcJobCleanUpTask::construct();

        bomCalcJobCleanUpTask.parmPackedBomCalcJobClass(_bomCalcJob_All.pack());

        return bomCalcJobCleanUpTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>