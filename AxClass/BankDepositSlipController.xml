<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankDepositSlipController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BankDepositSlipController</c> class is the controller class for the <c>BankDepositSlip</c>
///    report.
/// </summary>
class BankDepositSlipController extends SrsReportRunController implements BatchRetryable
{
    #define.ReportName('BankDepositSlip.Report')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    protected void prePromptModifyContract()
    {
        this.setRanges(this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRanges</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Modifies the report query and parameters based on caller settings.
    /// </summary>
    /// <param name="_query">
    ///    The query object.
    /// </param>
    /// <remarks>
    ///    Assigns values to the <c>BankDepositSlipController</c> range.
    /// </remarks>
    public void setRanges(Query _query)
    {
        BankAccountTrans bankAccountTransLocal;
        BankDeposit bankDepositLocal;
        Range depositNumRange;
        Range voucherRange;

        if (this.parmArgs())
        {
            switch (this.parmArgs().dataset())
            {
                case tableNum(BankDeposit) :
                    bankDepositLocal = this.parmArgs().record();
                    depositNumRange = bankDepositLocal.DepositNum;
                    voucherRange = bankDepositLocal.Voucher;
                    break;

                case tableNum(BankAccountTrans) :
                    bankAccountTransLocal = this.parmArgs().record();
                    depositNumRange = bankAccountTransLocal.DepositNum;
                    voucherRange = bankAccountTransLocal.Voucher;
                    break;
            }
        }

        if (!depositNumRange &&
             this.parmArgs() &&
             this.parmArgs().parmObject() &&
             formHasMethod(this.parmArgs().parmObject(), identifierStr(depositNum)))
        {
            depositNumRange  = this.parmArgs().parmObject().depositNum();
        }

        if (depositNumRange)
        {
            SysQuery::findOrCreateRange(
                _query.dataSourceTable(tableNum(BankAccountTrans)),
                fieldNum(BankAccountTrans, DepositNum)).value(depositNumRange);
        }

        if (voucherRange)
        {
            SysQuery::findOrCreateRange(
                _query.dataSourceTable(tableNum(BankAccountTrans)),
                fieldNum(BankAccountTrans, Voucher)).value(voucherRange);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the report name.
    /// </summary>
    /// <returns>
    ///     The report name and the design name as <c>SRSCatalogItemName</c>.
    /// </returns>
    protected SRSCatalogItemName getReportName()
    {
        return #ReportName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doNotUseWaitPattern</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether wait pattern is applied to sys operation template forms.
    /// </summary>
    /// <returns>true, if the wait pattern is not applied; otherwise, false.</returns>
    public boolean doNotUseWaitPattern()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides an entry point for the <c>BankDepositSlipController</c> when it is called from a menu item.
    /// </summary>
    /// <param name = "_args">
    ///     An <c>Args</c> instance with the <c>BankDepositSlipController</c> parameters.
    /// </param>
    public static void main(Args _args)
    {
        boolean useArgsDatasetToGenerateCriteria = _args.dataset() != 0;
        BankDepositSlipController controller = new BankDepositSlipController();

        controller.parmReportName(controller.getReportName());
        controller.parmArgs(_args);
        controller.parmLoadFromSysLastValue(!useArgsDatasetToGenerateCriteria);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>