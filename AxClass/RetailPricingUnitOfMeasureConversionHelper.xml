<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingUnitOfMeasureConversionHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailPricingUnitOfMeasureConversionHelper</c> class is used to setup unit of measure conversions 
/// so that the PricingEngine can consume it later.
/// </summary>
class RetailPricingUnitOfMeasureConversionHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateCrtUnitOfMeasureConversion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update Crt SalesLine.UnitOfMeasureConversion.
    /// </summary>
    /// <param name="_crtSalesLine">Commerce Runtime SalesLine object.</param>
    /// <param name="_itemId">Item Id to convert to a Commerce Runtime UnitOfMeasureConversion object.</param>
    /// <param name="_salesUnitOfMeasure">Sales Unit Of Measure Symbol.</param>
    /// <param name="_defaultUnitOfMeasure">Default sales unit of measure symbol.</param>
    public static void updateCrtUnitOfMeasureConversion(
        Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine _crtSalesLine,
        ItemId _itemId,
        UnitOfMeasureSymbol _salesUnitOfMeasure,
        UnitOfMeasureSymbol _defaultUnitOfMeasure)
    {
        if (_defaultUnitOfMeasure && _defaultUnitOfMeasure != _salesUnitOfMeasure)
        {
            RetailPricingUnitOfMeasureConversionHelper::setCrtConversionUsingXppUnitOfMeasureConverter(_crtSalesLine, _itemId, _salesUnitOfMeasure, _defaultUnitOfMeasure);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCrtConversionUsingXppUnitOfMeasureConverter</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method sets the CRT SalesLine UnitOfMeasureConversion object with a C# <c>AxUnitOfMeasureConversion</c> object that matches more closely how
    /// the X++ <c>UnitOfMeasureConverter</c> works.
    /// 
    /// Using the X++ <c>UnitOfMeasureConverter</c> we can leverage the built-in X++ mechanism of searching for an available Unit Of Measure conversion.
    /// </summary>
    /// <param name="_crtSalesLine">Commerce Runtime SalesLine object.</param>
    /// <param name="_itemId">Item Id to convert to a Commerce Runtime UnitOfMeasureConversion object.</param>
    /// <param name="_salesUnitOfMeasure">Sales Unit Of Measure Symbol.</param>
    /// <param name="_defaultUnitOfMeasure">Default sales unit of measure symbol.</param>
    private static void setCrtConversionUsingXppUnitOfMeasureConverter(
        Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine _crtSalesLine,
        ItemId _itemId,
        UnitOfMeasureSymbol _salesUnitOfMeasure,
        UnitOfMeasureSymbol _defaultUnitOfMeasure)
    {
        UnitOfMeasure fromUnit = UnitOfMeasure::findBySymbol(_salesUnitOfMeasure);
        UnitOfMeasure toUnit = UnitOfMeasure::findBySymbol(_defaultUnitOfMeasure);
        RefRecId productId = _crtSalesLine.ProductId;

        if (!productId)
        {
            productId = InventTable::find(_itemId).Product;
        }

        UnitOfMeasureConverter converter = UnitOfMeasureConverter::newFromConversionParameters(fromUnit.RecId, toUnit.RecId, NoYes::No, productId, NoYes::No);

        // If it is a variant and conversion is not available for variant then find the conversion for it's master product.
        if ( !converter.canValueBeConverted() && _crtSalesLine.MasterProductId)
        {
            productId = _crtSalesLine.MasterProductId;
            converter = UnitOfMeasureConverter::newFromConversionParameters(fromUnit.RecId, toUnit.RecId, NoYes::No, productId, NoYes::No);
        }

        if (converter.canValueBeConverted())
        {
            UnitOfMeasureConversionCache conversionCache = converter.cachedConversion();

            Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.AxUnitOfMeasureConversion unitOfMeasureConversion = new Microsoft.Dynamics.Commerce.Runtime.Services.PricingEngine.AxUnitOfMeasureConversion();

            unitOfMeasureConversion.ItemId = _itemId;
            unitOfMeasureConversion.FromUnitOfMeasureSymbol = _salesUnitOfMeasure;
            unitOfMeasureConversion.ToUnitOfMeasureSymbol = _defaultUnitOfMeasure;
            unitOfMeasureConversion.ProductRecordId = productId;

            unitOfMeasureConversion.Factor = conversionCache.Factor;
            unitOfMeasureConversion.FactorDenominator = conversionCache.FactorDenominator;
            unitOfMeasureConversion.Numerator = conversionCache.Numerator;
            unitOfMeasureConversion.Denominator = conversionCache.Denominator;
            unitOfMeasureConversion.InnerOffset = conversionCache.InnerOffset;
            unitOfMeasureConversion.OuterOffset = conversionCache.OuterOffset;

            switch (conversionCache.Rounding)
            {
                case UnitOfMeasureConversionRounding::Down:
                    unitOfMeasureConversion.RoundingMethod = Microsoft.Dynamics.Commerce.Runtime.DataModel.RoundingMethod::Down;
                    break;
                case UnitOfMeasureConversionRounding::Nearest:
                    unitOfMeasureConversion.RoundingMethod = Microsoft.Dynamics.Commerce.Runtime.DataModel.RoundingMethod::Nearest;
                    break;
                case UnitOfMeasureConversionRounding::Up:
                    unitOfMeasureConversion.RoundingMethod = Microsoft.Dynamics.Commerce.Runtime.DataModel.RoundingMethod::Up;
                    break;
                default:
                    unitOfMeasureConversion.RoundingMethod = Microsoft.Dynamics.Commerce.Runtime.DataModel.RoundingMethod::None;
                    break;
            }

            _crtSalesLine.set_UnitOfMeasureConversion(unitOfMeasureConversion);
        }
        else
        {
            throw error(strFmt("@SYS50546", fromUnit.Symbol, toUnit.Symbol));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>