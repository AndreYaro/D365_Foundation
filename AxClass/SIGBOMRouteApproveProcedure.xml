<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SigbomRouteApproveProcedure</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SIGBOMRouteApproveProcedure</c> class is the abstract base class for the BOM and Route approval procedures.
/// </summary>
/// <remarks>
/// This class must be extended by the specific classes.
/// </remarks>
abstract class SigbomRouteApproveProcedure extends SIGProcedureProvider
{
    FormRun     formRun;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>extendProcedureGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Adds the default controls for the employee ID and the remove approval flag to this group.
    /// </summary>
    /// <param name="_fr">
    ///   The form run object of the signature form.
    /// </param>
    /// <param name="_ctrl">
    ///   The procedure group control.
    /// </param>
    /// <returns>
    ///   Always returns true.
    /// </returns>
    /// <remarks>
    ///   The named controls are added by using predefined names so that some of the event methods can be overridden.
    /// </remarks>
    public boolean extendProcedureGroup(FormRun _fr, FormGroupControl _ctrl)
    {
        #define.EmplIdControlName("RTCtrlEmplId")
        #define.RemoveControlName("RTCtrlRemove")

        FormStringControl   ctrlEmplId;
        FormCheckBoxControl ctrlRemove;

        formRun = _fr;

        _ctrl.visible(true);

        ctrlEmplId = _ctrl.addControl(FormControlType::String,#EmplIdControlName);
        ctrlEmplId.extendedDataType(extendedtypenum(HcmPersonnelNumberId));
        ctrlEmplId.lookupButton(2);
        ctrlEmplId.label("@SYS3492");
        ctrlEmplId.text(HcmWorker::find(HcmWorker::userId2Worker(curuserid())).PersonnelNumber);
        ctrlEmplId.markAsUserAdd(true);

        if (this.isAlreadyApproved())
        {
            ctrlEmplId.enabled(false);

            ctrlRemove = _ctrl.addControl(FormControlType::CheckBox,#RemoveControlName);
            ctrlRemove.label("@SYS72947");
            ctrlRemove.value(NoYes::Yes);
            ctrlRemove.enabled(false);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAlreadyApproved</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Determines whether the bill of materials (BOM) or route is approved.
    /// </summary>
    /// <returns>
    ///   True if the BOM or route is currently approved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///   Override this method by using the actual functionality.
    /// </remarks>
    public abstract boolean isAlreadyApproved()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>rtCtrlEmplId_lookup</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Overrides the <c>lookup</c> method of the employee id control.
    /// </summary>
    /// <param name="_callerControl">
    ///   The calling form control.
    /// </param>
    public void rtCtrlEmplId_lookup(FormStringControl _callerControl)
    {
        HcmWorkerLookup workerLookup = HcmWorkerLookup::newOnlyActiveEmployeesWithinCompany();
        SysTableLookup  employeeIdLookup;

        employeeIdLookup = SysTableLookup::newParameters(tablenum(HcmWorker), _callerControl);
        employeeIdLookup.parmQuery(workerLookup.updateQuery());
        employeeIdLookup.addLookupfield(fieldnum(HcmWorker, PersonnelNumber));
        employeeIdLookup.addLookupfield(fieldnum(HcmWorker, Person));

        employeeIdLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>rtCtrlEmplId_modified</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Overrides the modified event on the employee ID control.
    /// </summary>
    /// <param name="_callerControl">
    ///   The calling form control.
    /// </param>
    /// <returns>
    ///   The result of the super call.
    /// </returns>
    public boolean rtCtrlEmplId_modified(FormStringControl _callerControl)
    {
        boolean ret = _callerControl.modified();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sign</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Starts the signature dialog box with the implementing provider.
    /// </summary>
    /// <returns>
    ///   True if the signing succeeds; otherwise, false.
    /// </returns>
    /// <remarks>
    ///   Override of the sign method for the bill of materials (BOM) or route approval procedure.
    /// </remarks>
    public boolean sign()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIfRemoveOfApprovalIsBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Checks for the compliance of the parameter to block the removal of an approval.
    /// </summary>
    /// <param name="_blockRemoveApproval">
    ///   Block removal of approval parameter.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///   Throws if removal of approval is blocked.
    /// </exception>
    public static void checkIfRemoveOfApprovalIsBlocked(NoYesId _blockRemoveApproval)
    {
        if (_blockRemoveApproval)
        {
            throw error("@SYS138119");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>