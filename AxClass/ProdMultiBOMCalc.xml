<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdMultiBOMCalc</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdMultiBOMCalc</c> class shows the user dialog box for the calculation of the production
/// price.
/// </summary>
/// <remarks>
/// Several production orders can be selected in the user dialog box. Each production order will be
/// calculated by using the <c>ProdUpdBOMCalc</c> class.
/// </remarks>
class ProdMultiBOMCalc extends ProdMulti implements BatchRetryable
{
    // Packed
    ProdParmBOMCalc standardParmBOMCalc;

    #DEFINE.CurrentVersion(6)
    #LOCALMACRO.CurrentList
        standardParmBOMCalc
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Decides whether the class is shown in the list of batch journal types.
    /// </summary>
    /// <returns>
    ///    true if the class is shown in the list of batch journal types; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A class that can be used in a batch journal is a class for which the same parameters can repeatedly
    ///    be used. Of course, the dialog box can be shown and the parameters can be changed, but parameters
    ///    of some classes might build on data that is only valid for a short time. Running a class two times
    ///    with the same parameters is not always possible. If <see cref="M:RunBaseBatch.canGoBatch" />
    ///    returns false, this method will have no effect.
    /// </remarks>
    boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBuffer</Name>
				<Source><![CDATA[
    boolean checkBuffer(Common _prodTable)
    {
        ProdTable prodTable = _prodTable as ProdTable;
        Common anyBuffer;
        return prodTable.status().runBOMCalc(anyBuffer,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Enables you to perform any cleanup that is required after a dialog box has been canceled.
    /// </summary>
    /// <remarks>
    ///    Override this method if any cleanup is necessary after a dialog box has been canceled.
    /// </remarks>
    void cleanupDialog()
    {
        super();
        ProdParmBOMCalc::deleteParameters(this.parmId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultParmBuffer</Name>
				<Source><![CDATA[
    ParmBuffer defaultParmBuffer()
    {
        ProdParmBOMCalc prodParmBOMCalc;
        return prodParmBOMCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the form, provided with a user interface, for specifying parameters for update
    ///    of production.
    /// </summary>
    /// <returns>
    ///    The name of the form.
    /// </returns>
    formName formName()
    {
        return formstr(ProdParmBOMCalc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the last choice stored in the last value table.
    /// </summary>
    /// <remarks>
    ///    If no record can be found or the <c>unpack</c> method returns false, the <c>initParmDefault</c>
    ///    method will be called.This method should not typically be overridden.
    /// </remarks>
    void getLast()
    {
        super();
        standardParmBOMCalc.CalcDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmBuffer</Name>
				<Source><![CDATA[
    void initParmBuffer(ParmBuffer  _prodParmBOMCalc)
    {
        ProdParmBOMCalc prodParmBOMCalc = _prodParmBOMCalc;
        ProdParmBOMCalc saveProdParmBOMCalc;
        saveProdParmBOMCalc.data(prodParmBOMCalc);
        prodParmBOMCalc.data(standardParmBOMCalc);

        prodParmBOMCalc.ParmId             = saveProdParmBOMCalc.ParmId;
        prodParmBOMCalc.RecId              = saveProdParmBOMCalc.RecId;
        prodParmBOMCalc.LineNum            = saveProdParmBOMCalc.LineNum;
        prodParmBOMCalc.ProdId             = saveProdParmBOMCalc.ProdId;
        prodParmBOMCalc.JobStatus          = saveProdParmBOMCalc.JobStatus;
        prodParmBOMCalc.ExecutedDateTime   = saveProdParmBOMCalc.ExecutedDateTime;
        prodParmBOMCalc.Level              = 0;
        prodParmBOMCalc.AutoUpdate         = autoUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insert</Name>
				<Source><![CDATA[
    void insert(Common       _prodTable,
                ParmBuffer   _prodParmBOMCalc
               )
    {
        ProdTable prodTable = _prodTable as ProdTable;
        ProdParmBOMCalc prodParmBOMCalc = _prodParmBOMCalc;

        super(_prodTable,_prodParmBOMCalc);
        prodParmBOMCalc.initFromProdTable(prodTable);
        prodParmBOMCalc.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastLineNum</Name>
				<Source><![CDATA[
    LineNum lastLineNum()
    {
        return ProdParmBOMCalc::lastLineNum(parmId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Serializes the current instance of the <c>ProdMultiBOMCalc</c> class.
    /// </summary>
    /// <returns>
    ///    A container that contains the current instance of the <c>ProdMultiBOMCalc</c> class.
    /// </returns>
    /// <remarks>
    ///    All variables that are required to re-initialize the class after constructing it must be packed.
    ///    Normally, a macro in the class declaration lists the variables to pack. Another macro holds a
    ///    version number. This number refers to the version of the variable list. When a new variable is
    ///    introduced, follow these steps:
    ///    <list type="number">
    ///       <item>
    ///          <description>Increment the version number in the version macro.</description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Copy the current list to the <c>unpack</c> method.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>Add the new variable to the bottom of the list.</description>
    ///       </item>
    ///       <item>
    ///          <description>Recompile the class.</description>
    ///       </item>
    ///    </list>
    ///     When the
    ///    <c>
    ///       isSwappingPrompt
    ///    </c>
    ///     method returns a value of true, you may have to pack some prompt-related variables.
    /// </remarks>
    container pack()
    {
        return [#CurrentVersion,#CurrentList,super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStandardParm</Name>
				<Source><![CDATA[
    ParmBuffer parmStandardParm(ParmBuffer _standardProdParmBOMCalc = standardParmBOMCalc)
    {
        standardParmBOMCalc = _standardProdParmBOMCalc;
        return standardParmBOMCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    Query query()
    {
        return new QueryRun(querystr(ProdMultiSelectBOMCalc)).query();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        using (var m = ProdInstrumentationSegmentFactory::create(ProdInstrumentationActivities::MultiBOMCalculation))
        {
            #OCCRetryCount

            super();

            // Current parm record
            ProdParmBOMCalc curParmBOMCalc = this.setProduction();

            while (curParmBOMCalc)
            {
                try
                {
                    this.calculateProductionOrderPrice(curParmBOMCalc);
                }
                catch (Exception::Deadlock)
                {
                    retry;
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= #RetryNum)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
                catch (Exception::Error)
                {
                    exceptionTextFallThrough();
                }
                next curParmBOMCalc;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateProductionOrderPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs BOM calculation on a single production order.
    /// </summary>
    /// <param name = "_prodParmBOMCalc">BOM calculation parameters.</param>
    [Replaceable]
    protected void calculateProductionOrderPrice(ProdParmBOMCalc _prodParmBOMCalc)
    {
        ProdTable prodTable = this.initProdTable(_prodParmBOMCalc.ProdId);
        prodTable.status().runBOMCalc(_prodParmBOMCalc, false, this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setProduction</Name>
				<Source><![CDATA[
    ParmBuffer  setProduction()
    {
        ProdParmBOMCalc  prodParmBOMCalc;
        if (this.parmId())
        {
            select prodParmBOMCalc
                order by Level       desc,
                         LineNum     asc
                where prodParmBOMCalc.ParmId == this.parmId();
        }
        return prodParmBOMCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deserializes the <paramref name="_packedClass" /> parameter value to an instance of the
    ///    <c>ProdMultiBOMCalc</c> class.
    /// </summary>
    /// <param name="_packedClass">
    ///    The container from which to deserialize the instance.
    /// </param>
    /// <returns>
    ///    true if deserialization was successful; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, you may need to unpack some
    ///    prompt-related variables.
    /// </remarks>
    boolean unpack(container _packedClass)
    {
        boolean     ret;
        Integer     version = conpeek(_packedClass,1);
        container   base;
        boolean     dummy;

        switch (version)
        {
            case #CurrentVersion :
                [version,#CurrentList,base] = _packedClass;
                ret = super(base);
                break;
            case 5:
                [version,
                 parmId,
                 dummy,
                 standardParmBOMCalc.References,
                 standardParmBOMCalc.ProfitSet
                ] = _packedClass;
                ret = true;
                break;
            default :
                this.initParmDefault();
                ret = true;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdMultiBOMCalc construct(Args _args)
    {
        return new ProdMultiBOMCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS4398" + ' - ' + "@SYS5681";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        ProdMultiBOMCalc    prodMultiBOMCalc = ProdMultiBOMCalc::construct(_args);

        if (_args.parmEnum() == RunChoose::Run)
        {
            RunBaseMultiParm::initFromForm(prodMultiBOMCalc,_args);

            if (! prodMultiBOMCalc.prompt())
            {
                return;
            }

            prodMultiBOMCalc.runOnServer();
            prodMultiBOMCalc.refreshCaller(_args);
        }
        else
        {
            RunBaseMultiParm::runSpecial(_args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>