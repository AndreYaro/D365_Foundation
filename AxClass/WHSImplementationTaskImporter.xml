<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSImplementationTaskImporter</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSImplementationTaskImporter
{
    private const DMFDefinitionGroupName WarehouseImplementationTaskDefintionGroup = 'WHSImplTaskDefGrp_';
    private const DMFSourceName DefaultImportTypeSourceName = 'XML-Element';
    private const DMFEntityName WarehouseImplementationTaskEntityV2 = 'WHSImplementationProjectTasksEntityV2';

    private str warehouseImplementationTaskFileId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>importDefaultTasks</Name>
				<Source><![CDATA[
    internal void importDefaultTasks(WHSImplementationProject _projectName)
    {
        this.uploadFileFromResources(_projectName);

        if (!DMFEntity::find(WarehouseImplementationTaskEntityV2))
        {
            throw error(strFmt("@WAX:ImplementationTaskRefreshEntity", WarehouseImplementationTaskEntityV2, "@DMF726"));
        }

        DMFDefinitionGroupName definitionGroupName = WarehouseImplementationTaskDefintionGroup + this.warehouseImplementationTaskFileId();

        DMFDefinitionGroup definitionGroup = DMFDefinitionGroup::find(definitionGroupName);

        if (!definitionGroup)
        {
            this.insertDefinitionGroup(definitionGroup, definitionGroupName);
        }

        DMFDefinitionGroupEntity definitionGroupEntity = DMFDefinitionGroupEntity::find(definitionGroupName, WarehouseImplementationTaskEntityV2);

        if (!definitionGroupEntity)
        {
            this.insertDefinitionGroupEntity(definitionGroupName);
        }

        Args args = new Args();
        args.record(definitionGroup);
        args.parm('DMFTestManager');

        // Pass exportImportDataContract data contract object
        var exportImportDataContract = new DMFExportImportDataContract();
        exportImportDataContract.parmIsAsyncExecution(NoYes::No);
        args.parmObject(exportImportDataContract);

        MenuFunction menuFunction = new MenuFunction(menuItemActionStr(DMFExportImportData), MenuItemType::Action);
        if (menuFunction && menuFunction.checkAccessRights())
        {
            menuFunction.run(args);
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefinitionGroup</Name>
				<Source><![CDATA[
    private void insertDefinitionGroup(DMFDefinitionGroup _definitionGroup, DMFDefinitionGroupName _definitionGroupName)
    {
        _definitionGroup.initValue();
        _definitionGroup.DefinitionGroupName = _definitionGroupName;
        _definitionGroup.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertDefinitionGroupEntity</Name>
				<Source><![CDATA[
    private void insertDefinitionGroupEntity(DMFDefinitionGroupName _definitionGroupName)
    {
        #DMF
        DMFDefinitionGroupEntity definitionGroupEntity;

        // Create data project entity
        definitionGroupEntity.initValue();
        definitionGroupEntity.DefinitionGroup       = _definitionGroupName;
        definitionGroupEntity.Entity                = WarehouseImplementationTaskEntityV2;
        definitionGroupEntity.Source                = DefaultImportTypeSourceName;
        definitionGroupEntity.SkipStaging           = true;
        definitionGroupEntity.SampleFilePath        = this.warehouseImplementationTaskFileId();
        definitionGroupEntity.SampleFilePathOriginal = this.warehouseImplementationTaskFileId();
        definitionGroupEntity.SampleFileExpiry      = DateTimeUtil::addDays(DateTimeUtil::getSystemDateTime(), 7);
        definitionGroupEntity.QueryData             = DMFUtil::getDefaultQueryForEntityV3(WarehouseImplementationTaskEntityV2,
                                                                                _definitionGroupName);
        
        definitionGroupEntity.insert(true);

        // Generate FieldAccess mapping. if no field group is specified - map all fields.
        DMFXmlGeneration::generateMappingV2(definitionGroupEntity, #FieldGroupName_AllFields, false, false, true);
        definitionGroupEntity.updateMappingStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>warehouseImplementationTaskFileId</Name>
				<Source><![CDATA[
    private str warehouseImplementationTaskFileId()
    {
        return warehouseImplementationTaskFileId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>uploadFileFromResources</Name>
				<Source><![CDATA[
    private void uploadFileFromResources(WHSImplementationProject _projectName)
    {
        ResourceNode resourceNode = SysResource::getResourceNode(resourceStr(WHSImplementationTasks));
        
        XmlDocument xmlFile = this.updateProjectNameElementInXmlFile(resourceNode, _projectName);

        if (resourceNode)
        {
            using (System.IO.MemoryStream stream = new System.IO.MemoryStream())
            {
                using (System.IO.StreamWriter writer = new System.IO.StreamWriter(stream))
                {
                    writer.Write(xmlFile);
                    writer.Flush();
                    stream.Position = 0;
                    FileUploadTemporaryStorageStrategy paymentFileTemporaryStorageStrategy = new FileUploadTemporaryStorageStrategy();
                    FileUploadTemporaryStorageResult result = paymentFileTemporaryStorageStrategy.uploadFile(stream, resourceNode.filename());

                    warehouseImplementationTaskFileId = result.getFileId();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateProjectNameElementInXmlFile</Name>
				<Source><![CDATA[
    private XmlDocument updateProjectNameElementInXmlFile(ResourceNode _resourceNode, WHSImplementationProject _projectName)
    {
        str loadXml;
        [loadXml] = SysResource::getResourceNodeData(_resourceNode);

        XmlDocument xmlFile = XmlDocument::newXml(loadXml, true);
        XmlNode documentNode = xmlFile.firstChild().nextSibling();

        XmlNodeList childNodes = documentNode.childNodes();
        XmlNode nextChildNode = childNodes.nextNode();

        while(nextChildNode)
        {
            nextChildNode.getNamedElement('PROJECTNAME').innerText(_projectName);
            nextChildNode = childNodes.nextNode();
        }
     
        return xmlFile;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>