<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzTaxCreditMemoCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is used to create tax credit memos for customer and vendor
/// transactions.
/// </summary>
abstract class CzTaxCreditMemoCreate extends RunBase
{
    CzTaxCreditMemo         memo;
    CzTaxCreditMemoTrans    memoTrans;
    CzTaxCreditMemoDate     memoDate;
    DialogField             memoDateField;
    CzTaxDocumentTable      document;
    CzTaxDocumentFormEngine engine;
    CustVendSettlement      settlement;
    CustVendTrans           nonInvoiceTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDocumentNumField</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is overloaded in an extended class.
    /// </summary>
    /// <param name="_dialog">
    /// The dialog to add the field to.
    /// </param>
    protected void addDocumentNumField(DialogRunbase _dialog)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>allocateTaxCreditMemoNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns a number to the tax credit memo using the number sequence.
    /// </summary>
    abstract protected void allocateTaxCreditMemoNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of <c>CzCalcTaxes</c> to be used for the tax credit memo.
    /// </summary>
    /// <returns>
    /// An instance of <c>CzCalcTaxes</c> for tax calculation.
    /// </returns>
    final CzCalcTaxes calcTaxes()
    {
        select memoTrans
            where memoTrans.HeaderRecId == memo.RecId;

        return CzCalcTaxes::construct(memoTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCreditMemo</Name>
				<Source><![CDATA[
    private CzCalcTaxes createCreditMemo(Amount _amountMST = engine.settledMST(document),
                                         Amount _amountCUR = engine.settledCur(document))
    {
        CzTaxDocumentTrans  docTrans;

        if (! _amountCUR && ! _amountMST)
            return null;

        this.createHeader();

        while select docTrans
            where docTrans.HeaderRecId == document.RecId
        {
			this.createTrans(docTrans.vatType,
                             docTrans.vatValue,
                             - docTrans.AmountCur    * _amountCUR / document.AmountCur,
                             - docTrans.AmountMST    * _amountMST / document.AmountMST,
                             - docTrans.vatAmountCur * _amountCUR / document.AmountCur,
                             - docTrans.vatAmountMST * _amountMST / document.AmountMST,
							 docTrans.CurrencyCode);
        }

        return this.calcTaxes();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the <c>CzTaxCreditMemo</c> record that serves as the header for the
    /// tax credit memo.
    /// </summary>
    /// <returns>
    /// <c>CzTaxCreditMemo</c> record that serves as the header for the tax credit memo.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The date or number has not been set on the <c>CzTaxCreditMemo</c> record.
    /// </exception>
    final protected CzTaxCreditMemo createHeader()
    {
        this.allocateTaxCreditMemoNum();

        memo.TaxCreditMemoDate = memoDate;

        memo.TaxDocumentRecId = document.RecId;

        if (! memo.TaxCreditMemoDate)
            throw error("@GLS111685");

        if (! memo.TaxCreditMemoNum)
            throw error("@GLS111694");

        memo.insert();

        memoTrans.HeaderRecId  = memo.RecId;

        return memo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>CzTaxCreditMemoTrans</c> record using the provided values.
    /// </summary>
    /// <param name="_vatType">
    /// The VAT tax type of the transaction.
    /// </param>
    /// <param name="_vatValue">
    /// The VAT value of the transaction.
    /// </param>
    /// <param name="_amountCur">
    /// The amount in transaction currency of the transaction.
    /// </param>
    /// <param name="_amountMST">
    /// The amount in accounting currency of the transaction.
    /// </param>
    /// <param name="_vatAmountCur">
    /// The tax amount in transaction currency of the transaction.
    /// </param>
    /// <param name="_vatAmountMST">
    /// The tax amount in accounting currency of the transaction.
    /// </param>
    final protected void createTrans(TaxType_W _vatType,
                                     TaxValue  _vatValue,
                                     Amount    _amountCur,
                                     Amount    _amountMST,
                                     Amount    _vatAmountCur,
                                     Amount    _vatAmountMST,
									 CurrencyCode _currencyCode)
    {
        memoTrans.vatType      = _vatType;
        memoTrans.vatValue     = _vatValue;
        memoTrans.AmountCur    = _amountCur;
        memoTrans.AmountMST    = _amountMST;
        memoTrans.vatAmountCur = _vatAmountCur;
        memoTrans.vatAmountMST = _vatAmountMST;
        memoTrans.CurrencyCode = _currencyCode;

        memoTrans.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase ret = super();

        this.addDocumentNumField(ret);
        memoDateField = ret.addFieldValue(extendedTypeStr(CzTaxCreditMemoDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the values from the dialog and sets them to local variables.
    /// </summary>
    /// <returns>
    /// true if the operation was successful; otherwise, false.
    /// </returns>
    public boolean getFromDialog()
    {
        memoDate = memoDateField.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CzTaxDocumentTable      _document,
                    CzTaxDocumentFormEngine _engine)
    {
        super();

        document = _document;
        engine   = _engine;

        nonInvoiceTrans = new DictTable(_document.TransTableId).makeRecord();
        switch (_document.TransTableId)
        {
            case tablenum(CustTrans) :
                settlement = new DictTable(tablenum(CustSettlement)).makeRecord();
                break;
            case tablenum(VendTrans) :
                settlement = new DictTable(tablenum(VendSettlement)).makeRecord();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMemoDate</Name>
				<Source><![CDATA[
    final public CzTaxCreditMemoDate parmMemoDate(CzTaxCreditMemoDate _memoDate = memoDate)
    {
        memoDate = _memoDate;

        return memoDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMemoNum</Name>
				<Source><![CDATA[
    public CzTaxCreditMemoNum parmMemoNum(CzTaxCreditMemoNum _memoNum = "")
    {
        return _memoNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>refreshDatasource</Name>
				<Source><![CDATA[
    private void refreshDatasource()
    {
        FormObjectSet   dataSource;

        if (FormDataUtil::isFormDataSource(document))
        {
            dataSource = FormDataUtil::getFormDataSource(document);
            dataSource.findRecord(document);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks parameters and then calls the CzTaxCreditMemoCreate::constructFromEngine
    /// method to create a new instance of <c>CzTaxCreditMemoCreate</c>.
    /// </summary>
    /// <param name="_document">
    /// The tax document to create the tax credit memo for.
    /// </param>
    /// <param name="_callerForm">
    /// The calling form.
    /// </param>
    /// <returns>
    /// An instance of <c>CzTaxCreditMemoCreate</c>.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The calling object is not using <c>CzTaxDocumentFormEngine</c>.
    /// </exception>
    static CzTaxCreditMemoCreate construct(CzTaxDocumentTable _document,
                                           Object             _callerForm)
    {
        if (classidget(_callerForm.engine()) != classnum(CzTaxDocumentFormEngine))
            throw error(Error::wrongUseOfFunction(funcname()));

        return CzTaxCreditMemoCreate::constructFromEngine(_document, _callerForm.engine());
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of one of the extended classes of
    /// <c>CzTaxCreditMemoCreate</c>.
    /// </summary>
    /// <param name="_document">
    /// The tax document to create the tax credit memo for.
    /// </param>
    /// <param name="_engine">
    /// The <c>CzTaxDocumentFormEngine</c> from the calling form.
    /// </param>
    /// <returns>
    /// A new instance of one of the extended classes of <c>CzTaxCreditMemoCreate</c>.
    /// </returns>
    static CzTaxCreditMemoCreate constructFromEngine(CzTaxDocumentTable      _document,
                                                     CzTaxDocumentFormEngine _engine)
    {
        CzTaxCreditMemoCreate create;

        switch (_document.TransTableId)
        {
            case tablenum(CustTrans) :
                create = new CzTaxCreditMemoCreate_Cust(_document, _engine);
                break;
            case tablenum(VendTrans) :
                create = new CzTaxCreditMemoCreate_Vend(_document, _engine);
                break;
        }

        return create;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDiffMemo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new tax credit memo for a different tax amount than the original tax
    /// document or tax credit memo.
    /// </summary>
    /// <param name="_custVendTrans">
    /// The Customer or Vendor transaction to create the tax credit memo for.
    /// </param>
    /// <param name="_newCustVendTrans">
    /// The new Customer or Vendor transaction to assign the tax creedit memo to.
    /// </param>
    /// <param name="_memoNum">
    /// Unique number for the tax credit memo.
    /// </param>
    /// <param name="_memoDate">
    /// Date for the tax credit memo.
    /// </param>
    public static void createDiffMemo(CustVendTrans       _custVendTrans,
                                      CustVendTrans       _newCustVendTrans,
                                      CzTaxCreditMemoNum  _memoNum,
                                      CzTaxCreditMemoDate _memoDate)
    {
        #ISOCountryRegionCodes

        CustVendTrans        custVendTrans = _custVendTrans.data();

        CzTaxDocumentTable   taxDocument;
        CzTaxDocumentTrans   taxDocumentTrans;
        CzTaxCreditMemo      creditMemo;
        CzTaxCreditMemoTrans creditMemoTrans;

        CzCalcTaxes          calcTaxDocuments;
        CzCalcTaxesIterator  calcTaxesIterator;
        CzTaxStructValue     calcTaxStruct;

        CzTaxCreditMemoCreate creditMemoCreate = null;
        int                   sign;

        taxDocument = CzTaxDocumentTable::find(_custVendTrans.Voucher, _custVendTrans.TransDate);
        if (! taxDocument)
            return;

        if (_custVendTrans.Voucher   != _newCustVendTrans.Voucher ||
            _custVendTrans.TransDate != _newCustVendTrans.TransDate)
        {
            CzTaxDocumentLink::newLink(_newCustVendTrans.Voucher, _newCustVendTrans.TransDate, _newCustVendTrans.TableId, taxDocument.RecId);
        }

        // calculate how would Tax Document look if it was calculated now
        calcTaxDocuments = CzTaxDocumentCreate::calcTaxesServer(taxDocument);

        calcTaxDocuments.parmReverseAmounts(_custVendTrans.TableId == tablenum(VendTrans));

        while select taxDocumentTrans
            where taxDocumentTrans.HeaderRecId == taxDocument.RecId
        {
            calcTaxDocuments.add(taxDocumentTrans.vatType,
                                 taxDocumentTrans.vatAmountMST,
                                 taxDocumentTrans.vatBaseMST(),
                                 taxDocumentTrans.vatAmountCur,
                                 taxDocumentTrans.vatBaseCur(),
                                 taxDocumentTrans.vatValue);
        }

        while select creditMemoTrans
        exists join creditMemo
            where creditMemo.RecId            == creditMemoTrans.HeaderRecId &&
                  creditMemo.TaxDocumentRecId == taxDocument.RecId
        {
            calcTaxDocuments.add(creditMemoTrans.vatType,
                                 creditMemoTrans.vatAmountMST,
                                 creditMemoTrans.vatBaseMST(),
                                 creditMemoTrans.vatAmountCur,
                                 creditMemoTrans.vatBaseCur(),
                                 creditMemoTrans.vatValue);
        }

        if (! calcTaxDocuments.taxAmountMST_VAT_Full() &&
            ! calcTaxDocuments.taxAmountMST_VAT_Reduced())
        {
            info("@GLS111692");
            return;
        }

        sign = _custVendTrans.TableId == tablenum(VendTrans) ? 1 : -1;
        calcTaxesIterator = calcTaxDocuments.getIterator();
        while (calcTaxesIterator.more())
        {
            calcTaxStruct = calcTaxesIterator.value();
            if (((calcTaxStruct.taxType() == TaxType_W::VAT ||
                  calcTaxStruct.taxType() == TaxType_W::VATReduced) &&
                 (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]) && TaxTrans::find(_custVendTrans.Voucher, _custVendTrans.TransDate)
                  && calcTaxStruct.taxBaseAmountMST() != 0 || calcTaxStruct.taxAmountMST())) ||
                (calcTaxStruct.taxType() == TaxType_W::Other &&
                 calcTaxStruct.taxBaseAmountMST()))
            {
                if (! creditMemoCreate)
                {
                    creditMemoCreate = CzTaxCreditMemoCreate::constructFromEngine(taxDocument, null);
                    creditMemoCreate.parmMemoNum(_memoNum);
                    creditMemoCreate.parmMemoDate(_memoDate);
                    creditMemo = creditMemoCreate.createHeader();
                }

                creditMemoCreate.createTrans(calcTaxStruct.taxType(),
                                             calcTaxStruct.taxValue(),
                                             sign * (calcTaxStruct.taxBaseAmountCur() + calcTaxStruct.taxAmountCur()),
                                             sign * (calcTaxStruct.taxBaseAmountMST() + calcTaxStruct.taxAmountMST()),
                                             sign * (calcTaxStruct.taxAmountCur()),
                                             sign * (calcTaxStruct.taxAmountMST()),
											 _custVendTrans.CurrencyCode);
            }

            calcTaxesIterator.next();
        }

        info(strfmt("@GLS111691", creditMemo.TaxCreditMemoNum));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>