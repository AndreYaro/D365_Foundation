<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OXMLExcelReport_CommAgentReport_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Prints report for principal excel report.
/// </summary>
public class OXMLExcelReport_CommAgentReport_RU extends XMLExcelReport_RU implements BatchRetryable
{
    CommReportJour_RU            commReportJour;

    CommReportTransItem_RU       reportTransItem;
    CommReportTransPrepayment_RU reportTransPrepay;
    CustInvoiceTrans             custInvoiceTrans;

    protected const int agreementTypeLine1 = 11;
    protected const int agreementTypeLine2 = 16;
    protected const int currentVersion = 1;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        const int minHeight = 21;
        real    ret = minHeight;
        boolean isPurch = (commReportJour.PartnerType == ModuleCustVend::Cust);

        switch (_bookmark)
        {
            case 'BODYITEM' :
            ret = max(document.getNamedRangeHeightWrapped('ItemName', custInvoiceTrans.Name),
                      document.getNamedRangeHeightWrapped('PartnerName', isPurch ? reportTransItem.vendInvoiceName() : reportTransItem.custInvoiceName()),
                      minHeight);
                break;
            case 'BODYADVANCE' :
            ret = max(document.getNamedRangeHeightWrapped('PaymentPartnerName', isPurch ? reportTransPrepay.vendName() : reportTransPrepay.custName()),
                      minHeight);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    protected void createReport()
    {
        this.initSectionMap();

        this.setCurrentWorksheetNum(1, 14);

        this.execute('REPORTHEADER');

        while select reportTransItem
        where reportTransItem.ReportId == commReportJour.ReportId
    join ItemId, Name from custInvoiceTrans
        where custInvoiceTrans.RecId == reportTransItem.RefInvoiceTrans
        {
            this.execute('BODYITEM');
        }

        this.execute('TOTALITEM');
        this.execute('HEADERADVANCE');

        while select reportTransPrepay
        where reportTransPrepay.ReportId == commReportJour.ReportId
        {
            this.execute('BODYADVANCE');
        }

        this.execute('REPORTFOOTER');

        this.setPrintArea();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    protected Filename fileName()
    {
        return 'CommAgentReport';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    protected Filename fileNamePostfix()
    {
        return '_' + commReportJour.ReportId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBodyAdvance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report line with data
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBodyAdvance()
    {
        this.insertValueToSection('PaymentDate',        strFmt('%1', reportTransPrepay.DocumentDate ?
                                                                 reportTransPrepay.DocumentDate :
                                                                 reportTransPrepay.TransDate));
        this.insertValueToSection('PaymentDocNum',      reportTransPrepay.DocumentNum ?
                                                    reportTransPrepay.DocumentNum :
                                                    reportTransPrepay.Voucher);
        this.insertValueToSection('PaymentAmount',      reportTransPrepay.LineAmountMST);
        this.insertValueToSection('PaymentTaxValue',    reportTransPrepay.VATValue);
        this.insertValueToSection('PaymentTaxAmount',   reportTransPrepay.VATAmountMST);

        this.insertValueToSection('PaymentPartnerName', commReportJour.PartnerType == ModuleCustVend::Cust ?
                                                    reportTransPrepay.vendName() :
                                                    reportTransPrepay.custName());
        this.insertValueToSection('PaymentFactureID',   reportTransPrepay.FactureExternalId);
        this.insertValueToSection('PaymentFactureDate', strFmt('%1', reportTransPrepay.FactureDateExternal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBodyItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report line with data
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillBodyItem()
    {
        this.insertValueToSection('ItemId',         custInvoiceTrans.ItemId);
        this.insertValueToSection('ItemName',       custInvoiceTrans.Name);
        this.insertValueToSection('InventUnit',     reportTransItem.Unit);
        this.insertValueToSection('Quantity',       reportTransItem.Qty);
        this.insertValueToSection('Price',          reportTransItem.Price);
        this.insertValueToSection('Amount',         reportTransItem.LineAmountMST);
        this.insertValueToSection('TaxValue',       reportTransItem.VATValue);
        this.insertValueToSection('TaxAmount',      reportTransItem.VATAmountMST);
        this.insertValueToSection('AmountInclVAT',  reportTransItem.LineAmountMST + reportTransItem.VATAmountMST);
        this.insertValueToSection('Margin',         reportTransItem.Margin);
        this.insertValueToSection('MarginVAT',      reportTransItem.MarginVAT);

        this.insertValueToSection('PartnerName',    commReportJour.PartnerType == ModuleCustVend::Cust ?
                                                reportTransItem.vendInvoiceName() :
                                                reportTransItem.custInvoiceName());
        this.insertValueToSection('FactureID',      reportTransItem.FactureExternalId);
        this.insertValueToSection('FactureDate',    strFmt('%1', reportTransItem.FactureDateExternal));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case 'REPORTHEADER':
                this.fillReportHeader();
                break;
            case 'BODYITEM':
                this.fillBodyItem();
                break;
            case 'TOTALITEM':
                this.fillTotalItem();
                break;
            case 'BODYADVANCE':
                this.fillBodyAdvance();
                break;
            case 'REPORTFOOTER':
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method fills report footer with data
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportFooter()
    {
        select sum(LineAmountMST),
           sum(VATAmountMST) from reportTransPrepay
        where reportTransPrepay.ReportId == commReportJour.ReportId;

        this.insertValueToSection('TotalPaymentAmount',     reportTransPrepay.LineAmountMST);
        this.insertValueToSection('TotalPaymentTaxAmount',  reportTransPrepay.VATAmountMST);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header with data
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillReportHeader()
    {
        CompanyInfo         companyInfo;
        CurrencyShortName_W currencyShortName;

        companyInfo = CompanyInfo::findDataArea(curext());

        currencyShortName = CurrencyNameDeclension_RU::find(Ledger::accountingCurrency(), companyInfo.LanguageId).ShortName;

        this.insertValueToSection('CompanyName',      companyInfo.Name);
        this.insertValueToSection('CompanyName1',     companyInfo.Name);
        this.insertValueToSection('AgreementTypeTxt', commReportJour.PartnerType == ModuleCustVend::Vend ?
                                                  'о реализации товара за период c'                  :
                                                  'о закупке товара за период c');

        this.insertValueToSection('StartDate',   strFmt('%1', commReportJour.StartDate));
        this.insertValueToSection('EndDate',     strFmt('%1', commReportJour.EndDate));
        this.insertValueToSection('ReportDate',  strFmt('%1', DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));

        this.insertValueToSection('Agreement',      commReportJour.agreementDocumentTitle());
        this.insertValueToSection('AgreementDate',  strFmt('%1', AgreementHeaderExt_RU::findByAgreementId(commReportJour.AgreementId).AgreementDate));

        if (commReportJour.PartnerType == ModuleCustVend::Vend)
        {
            this.insertValueToSection('PrincipalName', VendTable::find(commReportJour.PartnerCode).name());
            this.insertValueToSection('SUBTITLE1', 'Комиссионер за указанный период реализовал товар Принципала на общую сумму:');
            this.insertValueToSection('SUBTITLE2', 'Всего за указанный период третьим лицам был реализован по договору розничной купли-продажи следующий товар:');
        }
        else
        {
            this.insertValueToSection('PrincipalName', CustTable::find(commReportJour.PartnerCode).name());
            this.insertValueToSection('SUBTITLE1', 'Комиссионер за указанный период закупил товар для Принципала на общую сумму:');
            this.insertValueToSection('SUBTITLE2', 'Всего за указанный период от третьих лиц был закуплен по договору розничной купли-продажи следующий товар:');
        }

        select sum(LineAmountMST), sum(VATAmountMST) from reportTransItem
        where reportTransItem.ReportId == commReportJour.ReportId;

        this.insertValueToSection('TotalSum',       strFmt("@SYS76498", reportTransItem.LineAmountMST + reportTransItem.VATAmountMST, currencyShortName));
        this.insertValueToSection('TotalVATSum',    strFmt("@SYS76498", reportTransItem.VATAmountMST, currencyShortName));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills total report line with data
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void fillTotalItem()
    {
        select sum(LineAmountMST),
           sum(VATAmountMST),
           sum(Margin),
           sum(MarginVAT) from reportTransItem
        where reportTransItem.ReportId == commReportJour.ReportId;

        this.insertValueToSection('TotalAmount',        reportTransItem.LineAmountMST);
        this.insertValueToSection('TotalTaxAmount',     reportTransItem.VATAmountMST);
        this.insertValueToSection('TotalAmountInclVAT', reportTransItem.LineAmountMST + reportTransItem.VATAmountMST);
        this.insertValueToSection('TotalMargin',        reportTransItem.Margin);
        this.insertValueToSection('TotalMarginVAT',     reportTransItem.MarginVAT);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection('REPORTHEADER');
        this.addSection('BODYITEM', true);
        this.addSection('TOTALITEM');
        this.addSection('HEADERADVANCE');
        this.addSection('BODYADVANCE', true);
        this.addSection('REPORTFOOTER');
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [currentVersion, commReportJour];
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReportJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report for principal journal to be printed in report.
    /// </summary>
    /// <param name="_packedReportJour">
    /// Report for principal journal.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void setReportJour(container _packedReportJour)
    {
        [commReportJour] = _packedReportJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDefaultButton</Name>
				<Source><![CDATA[
    public boolean showDefaultButton()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected Filename templateName()
    {
        return resourceStr(CommAgentReport_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    protected Counter totalCells()
    {
        select count(RecId) from reportTransItem
        where reportTransItem.ReportId == commReportJour.ReportId;

        select count(RecId) from reportTransPrepay
        where reportTransPrepay.ReportId == commReportJour.ReportId;

        return any2int(reportTransItem.RecId) + any2int(reportTransPrepay.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case currentVersion :
                [version, commReportJour] = _packedClass;
                break;

            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static OXMLExcelReport_CommAgentReport_RU construct()
    {
        return new OXMLExcelReport_CommAgentReport_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    client server static public ClassDescription description()
    {
        return "@SalesPurchBook:ReportForPrincipalExcel";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args _args)
    {
        CommReportJour_RU                   commReportJour;
        OXMLExcelReport_CommAgentReport_RU  commReportToExcel;

        if (! _args          ||
        ! _args.record() ||
        _args.dataset() != tableNum(CommReportJour_RU))
        {
            throw error(Error::missingRecord(funcname()));
        }

        commReportJour = _args.record();

        commReportToExcel = OXMLExcelReport_CommAgentReport_RU::construct();
        commReportToExcel.setReportJour([commReportJour]);
        commReportToExcel.saveLast();

        if (commReportToExcel.prompt())
        {
            commReportToExcel.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>