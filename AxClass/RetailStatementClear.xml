<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailStatementClear</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Clears the existing statement and deletes the lines related to it to recalculate the statement with correct parameters.
/// </summary>
/// <remarks>
/// This class would be called if the existing statement is not calculated correctly.
/// </remarks>
class RetailStatementClear extends RunBaseBatch implements BatchRetryable
{
    RetailStatementTable   statementTable;
    NoYes                  _suppressMessageDialog;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>RetailStatementTable</c> with the caller record.
    /// </summary>
    /// <param name="_args">
    /// Details of the caller datasource.
    /// </param>
    /// <remarks>
    /// Calls the <c>StatementTable</c> method to initialize the table.
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// The caller dataset is not <c>RetailStatementTable</c> table.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Must be called with statement
    /// </exception>
    void initFromArgs(Args _args)
    {
        if (_args && _args.dataset())
        {
            switch (_args.dataset())
            {
                case tablenum(RetailStatementTable) :
                    this.statementTable(_args.record());
                    if (_args.parmEnumType() == EnumNum(NoYes))
                    {
                        _suppressMessageDialog = _args.parmEnum();
                    }
                    break;
                default :
                    throw error ("@RET4137");
            }
        }
        else
        {
            throw error ("@RET4137");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the existing statement and deletes the lines related to it to recalculate the statement with correct parameters.
    /// </summary>
    public void run()
    {
        container emptyInfoLog;

        // Validate the version
        RetailEodStatementVersionValidator::validateVersion(statementTable, RetailEodCodeVersion::V1);

        if (_suppressMessageDialog || Box::yesNo("@RET4138", DialogButton::No) == DialogButton::Yes)
        {
            statementTable.unmarkTransactions();
            statementTable.unmarkPosBatches();

            ttsBegin;
            statementTable.recalculate = NoYes::No;
            statementTable.calculatedDate = dateNull();
            statementTable.CalculatedLines = 0;
            statementTable.calculatedTime = 0;
            statementTable.postingDate  = dateNull();
            statementTable.stmtCalcInfoLog = emptyInfoLog;
            statementTable.stmtPostInfoLog = emptyInfoLog;

            statementTable.doUpdate();
            ttsCommit;

            if (!_suppressMessageDialog)
            {
                box::info("@RET4139" +
                      "@RET4140" +
                      "@RET4141");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>statementTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the table instance passed as the parameter to the class variable.
    /// </summary>
    /// <param name="_statementTable">
    /// The table instance of <c>RetailStatementTable</c> table.
    /// </param>
    /// <returns>
    /// The table instance of <c>RetailStatementTable</c> table after assigning from the parameter.
    /// </returns>
    public RetailStatementTable statementTable(RetailStatementTable _statementTable = statementTable)
    {
        statementTable = _statementTable;

        return statementTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RetailStatementClear statementClear = new RetailStatementClear();

        if (RetailEodStatementFeatureHelper::isNewEodEnabled())
        {
            str dictMenuLabel = "@Retail:RetailEodRetailStatementsLabel";

            // Your system is configured to use the new statement posting process. Please use the form "Open statement" to execute using the new process.
            throw error (strFmt("@Retail:RetailEodKeyEnabledFormError", dictMenuLabel));
        }

        statementClear.initFromArgs(_args);
        statementClear.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>