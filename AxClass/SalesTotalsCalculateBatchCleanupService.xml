<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesTotalsCalculateBatchCleanupService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>SalesTotalsCalculateBatchCleanupService</c> class is a service class for launching sales totals bundle cleaning.
/// </summary>
internal class SalesTotalsCalculateBatchCleanupService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Launches the sales totals bundle cleaning process.
    /// </summary>
    /// <param name="_dataContract">
    ///     The data contract with runtime parameters.
    /// </param>
    public void run(SalesTotalsCalculateBatchCleanupDataContract _dataContract)
    {
        using (var activityContext = SalesTotalsCalculateInstrumentationLogger::createLogger(classStr(SalesTotalsCalculateBatchCleanupService)).salesTotalsCalculateActivities().cleanup())
        {
            SalesOrderTotalsExecutionItem salesOrderTotalsExecutionItem;
            SalesQuotationTotalsExecutionItem salesQuotationTotalsExecutionItem;

            for (int i = 1; i <= conLen(_dataContract.parmBundleIds()); i++)
            {
                ttsbegin;
                delete_from salesOrderTotalsExecutionItem
                where salesOrderTotalsExecutionItem.ProcessingBundleId == conPeek(_dataContract.parmBundleIds(), i);
                ttscommit;

                ttsbegin;
                delete_from salesQuotationTotalsExecutionItem
                where salesQuotationTotalsExecutionItem.ProcessingBundleId == conPeek(_dataContract.parmBundleIds(), i);
                ttscommit;
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>