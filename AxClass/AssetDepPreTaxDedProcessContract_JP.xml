<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepPreTaxDedProcessContract_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The contract of asset depreciation pre-tax deduction process.
/// </summary>
[
    DataContractAttribute,
    SysOperationContractProcessingAttribute(classStr(AssetDepPreTaxDedProcessUIBuilder_JP))
]
class AssetDepPreTaxDedProcessContract_JP implements SysOperationValidatable
{
    //
    // Parameters that will be used to init the process
    //
    ToDate                                      toDate;
    AssetDepPreTaxDedSettleJournalNameTax_JP    journalName;
    AssetDepPreTaxDedSettleAutoPost_JP          autoPost;

    //
    // Parameters that only used for user info.
    //
    AssetDepPreTaxDedFullSettlePeriod_JP        period;

    //
    // Parameters that will be used when running the process
    //
    str                                         encodedQuery;
    RefRecId                                    assetDepPreTaxProcessRecId;     // Invisible parameters
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query.
    /// </summary>
    /// <returns>
    /// Returns the query.
    /// </returns>
    public Query getQuery()
    {
        Query   ret;

        if (encodedQuery)
        {
            ret = new Query(SysOperationHelper::base64Decode(encodedQuery));
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmAutoPost</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        SysOperationDisplayOrderAttribute('4')
    ]
    public AssetDepPreTaxDedSettleAutoPost_JP parmAutoPost(AssetDepPreTaxDedSettleAutoPost_JP _autoPost = autoPost)
    {
        autoPost = _autoPost;
        return autoPost;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmEncodedQuery</Name>
				<Source><![CDATA[
    [DataMemberAttribute, AifQueryTypeAttribute('_encodedQuery', queryStr(AssetDepPreTaxDedProcess_JP))]
    public str parmEncodedQuery(str _encodedQuery = encodedQuery)
    {
        encodedQuery = _encodedQuery;
        return encodedQuery;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmJournalName</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        SysOperationDisplayOrderAttribute('3')
    ]
    public AssetDepPreTaxDedSettleJournalNameTax_JP parmJournalName(AssetDepPreTaxDedSettleJournalNameTax_JP _journalName = journalName)
    {
        journalName = _journalName;
        return journalName;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmPeriod</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        SysOperationDisplayOrderAttribute('2')
    ]
    public AssetDepPreTaxDedFullSettlePeriod_JP parmPeriod(AssetDepPreTaxDedFullSettlePeriod_JP _period = period)
    {
        period = _period;
        return period;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmProcessRecId</Name>
				<Source><![CDATA[
    [DataMemberAttribute]
    public RefRecId parmProcessRecId(RefRecId _assetDepPreTaxProcessRecId = assetDepPreTaxProcessRecId)
    {
        assetDepPreTaxProcessRecId = _assetDepPreTaxProcessRecId;
        return assetDepPreTaxProcessRecId;
    }
]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    [
        DataMemberAttribute,
        SysOperationDisplayOrderAttribute('1'),
        SysOperationHelpTextAttribute(literalstr("@SYP4881435"))
    ]
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }
]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the parameters are valid.
    /// </summary>
    /// <returns>
    /// true when the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        boolean                     ret;
        LedgerFiscalCalendarYear    ledgerFiscalCalendarYear;

        if (toDate)
        {
            ret = true;

            ledgerFiscalCalendarYear = LedgerFiscalCalendar::findLedgerYearByCalendarLedgerDate(Ledger::fiscalCalendar(), Ledger::current(), toDate);
            if (ledgerFiscalCalendarYear.RecId == 0 || ledgerFiscalCalendarYear.Status != FiscalYearStatus::Open)
            {
                // The settlement period is valid only for the open fiscal year
                ret = checkFailed("@SYP4881522");
            }
        }

        return ret;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
