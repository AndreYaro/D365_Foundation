<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TrvBarcodeHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class TrvBarcodeHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>barcode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an encoded bar code string for an expense header.
    /// </summary>
    /// <param name="_trvExpTable"><c>TrvExpTable</c> buffer</param>
    /// <returns>
    /// A bar code string for the expense header.
    /// </returns>
    public static BarCodeString barcode(TrvExpTable _trvExpTable)
    {
        BarcodeCoverPage    barcodeCoverPage = BarcodeCoverPage::construct(_trvExpTable);

        changecompany(CompanyInfo::findRecId(_trvExpTable.LegalEntity).DataArea)
        {
            return TrvBarcodeHelper::encodeBarcodeString(barcodeCoverPage.barcodeString(), barcodeCoverPage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeAdditionalStrings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets additional bar code strings of the user who created the expense header.
    /// </summary>
    /// <param name="_trvExpTable"><c>TrvExpTable</c> buffer</param>
    /// <returns>
    /// A bar code concatenated string of the additional bar code strings.
    /// </returns>
    public static BarCodeString barcodeAdditionalStrings(TrvExpTable _trvExpTable)
    {
        BarcodeCoverPage    barcodeCoverPage = BarcodeCoverPage::construct(_trvExpTable);
        Array               addlBarcodes = new Array(Types::String);
        int                 counter;
        BarCodeString       addlBarcodeStringsTemp;
        #TrvReceiptsBarcodeCoverPage

        changecompany(CompanyInfo::findRecId(_trvExpTable.LegalEntity).DataArea)
        {
            addlBarcodes = barcodeCoverPage.additionalBarcodeStrings();
            for (counter = 1; counter <= addlBarcodes.lastIndex(); counter++)
            {
                addlBarcodeStringsTemp+= addlBarcodes.value(counter);
                if (counter != addlBarcodes.lastIndex())
                {
                    addlBarcodeStringsTemp += #BarcodeStringSeparator;
                }
            }
            return TrvBarcodeHelper::encodeBarcodeString(addlBarcodeStringsTemp, barcodeCoverPage);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeCoverPageInstructions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instructions that are set by the user in the expense parameters.
    /// </summary>
    /// <param name="_trvExpTable"><c>TrvExpTable</c> buffer</param>
    /// <returns>
    /// The instructions that are set in the expense parameters.
    /// </returns>
    public static BarcodeCoverPageInstructions barcodeCoverPageInstructions(TrvExpTable _trvExpTable)
    {
        BarcodeCoverPage    barcodeCoverPage = BarcodeCoverPage::construct(_trvExpTable);

        changecompany(CompanyInfo::findRecId(_trvExpTable.LegalEntity).DataArea)
        {
            return barcodeCoverPage.instructions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeCoverPageTitle</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the title of the bar code cover page.
    /// </summary>
    /// <param name="_trvExpTable"><c>TrvExpTable</c> buffer</param>
    /// <returns>
    /// The title of the bar code cover page.
    /// </returns>
    public static BarcodeCoverPageTitle barcodeCoverPageTitle(TrvExpTable _trvExpTable)
    {
        BarcodeCoverPage    barcodeCoverPage = BarcodeCoverPage::construct(_trvExpTable);

        changecompany(CompanyInfo::findRecId(_trvExpTable.LegalEntity).DataArea)
        {
            return barcodeCoverPage.title();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeFontName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the font name of the bar code type that is set in the expense parameters.
    /// </summary>
    /// <param name="_trvExpTable"><c>TrvExpTable</c> buffer</param>
    /// <returns>
    /// The name of the font that corresponds to the bar code type.
    /// </returns>
    public static FontName barcodeFontName(TrvExpTable _trvExpTable)
    {
        BarcodeCoverPage	barcodeCoverPage = BarcodeCoverPage::construct(_trvExpTable);
        BarcodeSetup		barcodeSetup;

        changecompany(CompanyInfo::findRecId(_trvExpTable.LegalEntity).DataArea)
        {
            barcodeSetup = barcodeCoverPage.barcodeSetup();

            return barcodeSetup.FontName;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeFontSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the font size of the bar code type that is set in expense parameters.
    /// </summary>
    /// <param name="_trvExpTable"><c>TrvExpTable</c> buffer</param>
    /// <returns>
    /// The size of the font that corresponds to the bar code type.
    /// </returns>
    public static FontSize barcodeFontSize(TrvExpTable _trvExpTable)
    {
        BarcodeCoverPage    barcodeCoverPage = BarcodeCoverPage::construct(_trvExpTable);
        BarcodeSetup		barcodeSetup;

        changecompany(CompanyInfo::findRecId(_trvExpTable.LegalEntity).DataArea)
        {
            barcodeSetup = barcodeCoverPage.barcodeSetup();

            return barcodeSetup.FontSize;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>barcodeIncludeUserId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user setting to display the user ID in the bar code.
    /// </summary>
    /// <param name="_trvExpTable"><c>TrvExpTable</c> buffer</param>
    /// <returns>
    /// true if the user setting in the expense parameters is set to display the user ID in the bar code
    /// cover page; otherwise, false.
    /// </returns>
    public static boolean barcodeIncludeUserId(TrvExpTable _trvExpTable)
    {
        changecompany(CompanyInfo::findRecId(_trvExpTable.LegalEntity).DataArea)
        {
            return TrvParameters::find().IncludeUserIDInBarcode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>encodeBarcodeString</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the encoded barcode string based on the barcode type set in expense parameters
    /// </summary>
    /// <param name="_barCodeString">
    /// un-encoded barcode string
    /// </param>
    /// <param name="_barcodeCoverPage">
    /// instance of barcode cover page class
    /// </param>
    /// <returns>
    /// Encoded barcode string for the expense reports barcode cover page
    /// </returns>
    private static BarCodeString encodeBarcodeString(BarCodeString _barCodeString, BarcodeCoverPage _barcodeCoverPage)
    {
        BarcodeSetup    barcodeSetup;
        Barcode			barcode;

        barcodeSetup = _barcodeCoverPage.barcodeSetup();
        barcode = Barcode::construct(barcodeSetup.BarcodeType);
        barcode.clear();
        barcode.string(true, _barCodeString);
        barcode.encode();

        return barcode.barcodeStr();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>