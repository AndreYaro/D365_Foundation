<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailInventoryAvailabilityPropertyBatchUIBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// This is a UIBuilder class to override the default
/// SysOperation Framework functionality
/// </summary>
internal class RetailInventoryAvailabilityPropertyBatchUIBuilder extends SysOperationAutomaticUIBuilder
{
    private const str OkButtonName = 'CommandButton';
    private const str BatchTabName = 'TabPg_1';
    private const str GeneralTabName = 'General';
    private const str MessageTextControlName = 'MessageTextControl';
    private const str DefaultSearchSettings = '<ProductProperty IsSearchable="false" IsRetrievable="true" IsQueryable="true" IsRefinable="true" IsSortable="false" IsMultiValue="false" IsTokenNormalization="false" IsCompleteMatch="false" IsMandatory="false" IsHidden="false" />';
    private static const str SortableAvailabilitySuffix = "_Sort";
    private const str AvailabilitySortableAttributeDefaultSearchSettings = '<ProductProperty IsSearchable="false" IsRetrievable="true" IsQueryable="true" IsRefinable="true" IsSortable="true" IsMultiValue="false" IsTokenNormalization="false" IsCompleteMatch="false" IsMandatory="false" IsHidden="false" />';

    DialogField dialogFieldAttributeName;
    DialogField dialogFieldCalculationMode;

    RetailInventoryAvailabilityPropertyBatchDataContract dataContract;

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>build</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the UI for related controller class.
    /// </summary>
    public void build()
    {
        FormBuildTabPageControl general = this.dialog().form().design().control(GeneralTabName);
        general.columns(1);
        general.addControl(FormControlType::StaticText, MessageTextControlName);
        FormBuildStaticTextControl messageTextControl = this.dialog().form().design().control(MessageTextControlName);
        messageTextControl.displayLength(80);
        messageTextControl.displayHeight(3);
        messageTextControl.text("@Retail:RetailInitializeInventoryProductAttributeDialogHelpText");

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>postBuild</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs before the dialog is created
    /// </summary>
    public void postBuild()
    {
        super();

        // Retrieve the data contract
        dataContract = this.dataContractObject();

        // Retrieve the dialog fields
        dialogFieldAttributeName = this.bindInfo().getDialogField(dataContract, methodstr(RetailInventoryAvailabilityPropertyBatchDataContract, parmAttributeName));
        dialogFieldCalculationMode = this.bindInfo().getDialogField(dataContract, methodstr(RetailInventoryAvailabilityPropertyBatchDataContract, parmCalculationMode));
    }

]]></Source>
			</Method>
			<Method>
				<Name>postRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method runs after the dialog is created
    /// </summary>
    public void postRun()
    {
        Dialog myDialog = this.dialog();

        dialogFieldAttributeName.registerOverrideMethod(methodStr(FormStringControl, modified), methodStr(RetailInventoryAvailabilityPropertyBatchUIBuilder, updateAttributeName), this);
        dialogFieldCalculationMode.registerOverrideMethod(methodStr(FormComboBoxControl, modified), methodStr(RetailInventoryAvailabilityPropertyBatchUIBuilder, updateCalculationMode), this);

        // Expand tab always.
        FormTabPageControl tabPageControl = myDialog.dialogForm().formRun().design().controlName(BatchTabName);
        if (tabPageControl)
        {
            tabPageControl.expand();
        }

        var design = myDialog.dialogForm().formRun().design();
        FormCommandButtonControl okButton = myDialog.dialogForm().formRun().design().controlName(OkButtonName);
        okButton.registerOverrideMethod(methodStr(FormCommandButtonControl, clicked), methodStr(RetailInventoryAvailabilityPropertyBatchUIBuilder, okButtonClicked), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAttributeName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update attribute and type name.
    /// </summary>
    public boolean updateAttributeName(FormStringControl _control)
    {
        boolean ret = _control.modified();
        dataContract.parmAttributeName(_control.valueStr());

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCalculationMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update calculation mode.
    /// </summary>
    public boolean updateCalculationMode(FormComboBoxControl _control)
    {
        boolean ret = _control.modified();
        dataContract.parmCalculationMode(any2Enum(_control.selection()));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>okButtonClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method overrides the ok button.
    /// </summary>
    public void okButtonClicked(FormCommandButtonControl _okButton)
    {
        try
        {
            ttsbegin;
            eventSource.EventWriteInventoryProductAttributeInitializing(enum2int(dataContract.parmCalculationMode()));
            RefRecId recid = this.initializeInventoryAttribute(dataContract.parmAttributeName(), dataContract.parmCalculationMode());
            eventSource.EventWriteInventoryProductAttributeInitialized(recid);

            eventSource.EventWriteInventoryProductSortableAttributeInitializing(enum2int(dataContract.parmCalculationMode()));
            RefRecId srotableAttributeRecid = this.initializeInventoryAvailabilitySortableAttribute(dataContract.parmAttributeName(), dataContract.parmCalculationMode());
            eventSource.EventWriteInventoryProductSortableAttributeInitialized(srotableAttributeRecid);

            // Once a new attribute has been created, existing result table should be purged.
            RetailLevelAwareOutOfStockItems retailLevelAwareOutOfStockItems;
            delete_from retailLevelAwareOutOfStockItems;
            ttscommit;
        }
        catch
        {
            ttsabort;
            throw Exception::Error;
        }

        // Call base class.
        _okButton.clicked();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventoryAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the inventory attribute when submit the form.
    /// </summary>
    /// <param name = "_attributeName">The attribute name.</param>
    /// <param name = "_calculationMode">The calculation mode.</param>
    /// <returns>The record id of the product attribute.</returns>
    private RefRecId initializeInventoryAttribute(str _attributeName, RetailInventoryLevelCalculationMode _calculationMode)
    {
        EcoResAttributeType attributeType;

        attributeType = EcoResAttributeType::findByName(_attributeName);

        // Use existing attribute type if available.
        if (!attributeType)
        {
            attributeType.DataType = AttributeDataType::Text;
            attributeType.IsEnumeration = NoYes::Yes;
            attributeType.Name = _attributeName;
            attributeType.insert();
        }

        RetailInventoryLevelProfileRange outOfStockRange;
        RetailInventoryLevelProfileRange availableRange;

        select firstonly outOfStockRange where outOfStockRange.Code == RetailInventoryLevelProfileHelper::OutOfStockLevelCode;
        select firstonly availableRange where availableRange.Code == RetailInventoryLevelProfileHelper::AvailableLevelCode;

        str outOfStockLabel = outOfStockRange.Label;
        if (!outOfStockRange)
        {
            outOfStockLabel = RetailInventoryLevelProfileHelper::OutOfStockLevelInitialLabel;
        }

        str availableLabel = availableRange.Label;
        if (!availableRange)
        {
            availableLabel =  RetailInventoryLevelProfileHelper::AvailableLevelInitialLabel;
        }

        EcoResEnumerationAttributeTypeValue newEcoResEnumerationAttributeTypeValue;

        // Init out of stock.
        EcoResTextValue outOfStockTextValue;

        select newEcoResEnumerationAttributeTypeValue
            where newEcoResEnumerationAttributeTypeValue.AttributeType == attributeType.RecId
            join outOfStockTextValue
            where outOfStockTextValue.RecId == newEcoResEnumerationAttributeTypeValue.Value
            &&    outOfStockTextValue.TextValue == outOfStockLabel;

        // Don't create duplicate record if Enumeration domain value is available for the given attribute type.
        if (!newEcoResEnumerationAttributeTypeValue)
        {
            outOfStockTextValue.clear();
            outOfStockTextValue.TextValue = outOfStockLabel;
            outOfStockTextValue.insert();

            newEcoResEnumerationAttributeTypeValue.clear();
            newEcoResEnumerationAttributeTypeValue.Value = outOfStockTextValue.RecId;
            newEcoResEnumerationAttributeTypeValue.AttributeType = attributeType.RecId;
            newEcoResEnumerationAttributeTypeValue.insert();

            this.copyTranslations(outOfStockRange.RecId, outOfStockTextValue.RecId);
        }

        // Init available.
        EcoResTextValue availableTextValue;

        select newEcoResEnumerationAttributeTypeValue
            where newEcoResEnumerationAttributeTypeValue.AttributeType == attributeType.RecId
            join availableTextValue
            where availableTextValue.RecId == newEcoResEnumerationAttributeTypeValue.Value
            &&    availableTextValue.TextValue == availableLabel;

        // Don't create duplicate record if Enumeration domain value is available for the given attribute type.
        if (!newEcoResEnumerationAttributeTypeValue)
        {
            newEcoResEnumerationAttributeTypeValue.clear();
            newEcoResEnumerationAttributeTypeValue.AttributeType = attributeType.RecId;
            newEcoResEnumerationAttributeTypeValue.setNextOrdinalNumber();

            availableTextValue.clear();
            availableTextValue.TextValue = availableLabel;
            availableTextValue.insert();
            newEcoResEnumerationAttributeTypeValue.Value = availableTextValue.RecId;
            newEcoResEnumerationAttributeTypeValue.insert();

            this.copyTranslations(availableRange.RecId, availableTextValue.RecId);
        }

        EcoResAttribute attribute;
        attribute.Name = _attributeName;
        attribute.AttributeType = attributeType.RecId;
        attribute.insert();

        EcoResAttributeTranslation translation;
        translation.Language = SystemParameters::getSystemLanguageId();
        translation.Attribute = attribute.RecId;
        translation.FriendlyName = _attributeName;
        translation.insert();

        RetailAttributeFilter::createAttributeFilter(attribute.RecId);

        RetailAttributeMetadata metadata = RetailAttributeMetadata::findByAttribute(attribute.RecId, true);
        RetailSPChannelProdAttrMetadataHandler metadataHandler = new RetailSPChannelProdAttrMetadataHandler();
        metadataHandler.parmCallerObject(this);
        metadataHandler.parmRetailAttributeMetadata(metadata);
        metadataHandler.deserialize(DefaultSearchSettings, metadataHandler.currentMetadataVersion());
        metadataHandler.save();


        // Set default as available.
        EcoResAttributeDefaultValue::createEcoResValueAndDefaultValue(availableTextValue, attribute);

        RetailParameters parameters = RetailParameters::find(true);
        parameters.InventoryProductAttribute = attribute.RecId;
        parameters.InventoryLevelCalculationMode = _calculationMode;
        parameters.InventoryProductOutOfStockAttributeValue = outOfStockTextValue.RecId;
        parameters.InventoryProductAvailableAttributeValue = availableTextValue.RecId;
        parameters.update();

        return attribute.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInventoryAvailabilitySortableAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the inventory availability sortable attribute when submit the form.
    /// </summary>
    /// <param name = "_attributeName">The attribute name.</param>
    /// <param name = "_calculationMode">The calculation mode.</param>
    /// <returns>The record id of the product attribute.</returns>
    private RefRecId initializeInventoryAvailabilitySortableAttribute(str _attributeName, RetailInventoryLevelCalculationMode _calculationMode)
    {
        Name attributeName = _attributeName + SortableAvailabilitySuffix;
        EcoResAttributeType attributeType;

        attributeType = EcoResAttributeType::findByName(attributeName);

        // Use existing attribute type if available.
        if (!attributeType)
        {
            attributeType.DataType = AttributeDataType::TrueFalse;
            attributeType.Name = attributeName;
            attributeType.insert();
        }

        EcoResBooleanValue availableBooleanValue;
        availableBooleanValue.clear();
        availableBooleanValue.BooleanValue = true;
        availableBooleanValue.insert();

        EcoResAttribute attribute;
        attribute.Name = _attributeName + SortableAvailabilitySuffix;
        attribute.AttributeType = attributeType.RecId;
        attribute.insert();

        RetailAttributeMetadata metadata = RetailAttributeMetadata::findByAttribute(attribute.RecId, true);
        RetailSPChannelProdAttrMetadataHandler metadataHandler = new RetailSPChannelProdAttrMetadataHandler();
        metadataHandler.parmCallerObject(this);
        metadataHandler.parmRetailAttributeMetadata(metadata);
        metadataHandler.deserialize(AvailabilitySortableAttributeDefaultSearchSettings, metadataHandler.currentMetadataVersion());
        metadataHandler.save();

        // Set default as available.
        EcoResAttributeDefaultValue::createEcoResValueAndDefaultValue(availableBooleanValue, attribute);

        RetailParameters parameters = RetailParameters::find(true);
        parameters.InventoryProductAvailabilitySortableAttribute = attribute.RecId;
        parameters.update();

        return attribute.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTranslations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy existing level profile translations to attribute values.
    /// </summary>
    /// <param name = "_levelProfileRange">The record id of level profile.</param>
    /// <param name = "_attributeValueText">The record id of attribute value.</param>
    private void copyTranslations(RefRecId _levelProfileRange, RefRecId _attributeValueText)
    {
        EcoResTextValueTranslation ecoResTextValueTranslation;
        LanguageTxt languageTxt;

        while select languageTxt where languageTxt.TxtTableId == tableName2Id(tableStr(RetailInventoryLevelProfileRange)) && languageTxt.TxtRecId == _levelProfileRange
        {
            ecoResTextValueTranslation.clear();
            ecoResTextValueTranslation.TextValue = languageTxt.Txt;
            ecoResTextValueTranslation.TextValueTable = _attributeValueText;
            ecoResTextValueTranslation.Language  = languageTxt.LanguageId;

            ecoResTextValueTranslation.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>name</Name>
				<Source><![CDATA[
    public str name()
    {
        return classStr(RetailInventoryAvailabilityPropertyBatchUIBuilder);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>