<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAllocateKeyDefaultData</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerAllocateKeyDefaultData extends SysDefaultDataAllocateKey
{
    LedgerAllocateKey           buffer;
    LedgerAllocateTrans         bufferTrans;

    Percent                     percent;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buffer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the table buffer that is declared in the <c>classDeclaration</c> method.
    /// </summary>
    /// <returns>
    ///    The table buffer that is used for the default data.
    /// </returns>
    public Common buffer()
    {
        return buffer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>bufferLine</Name>
				<Source><![CDATA[
    public AllocateTransMap bufferLine()
    {
        return bufferTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createdNumDB</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the number of records that already are in the current table.
    /// </summary>
    /// <returns>
    ///    An integer that contains the number of records.
    /// </returns>
    int64 createdNumDB()
    {
        int ret;

        switch (curTableNo)
        {
            case 1:
                ret = any2int((select count(RecId) from ledgerAllocateKey).RecId);

                break;

            case 2:
                ret = any2int((select count(RecId) from ledgerAllocateTrans).RecId);
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doKey</Name>
				<Source><![CDATA[
    void doKey(boolean _useCurBuffer = false)
    {
        int                 x;
        AllocateTransMap    line;

        if (! this.existDBKey(createName) && units > 0)
        {
            buffer.Txt = allocateKeyName;
            buffer.Fixed = fixedStartDate;

            this.doRecord(_useCurBuffer);

            total = real2int(periodLength / units);

            line = this.bufferLine();

            for (x = 0; x <= total-1; x++)
            {
                line.clear();
                line.initValue();

                line.Id = this.buffer().(this.keyFieldId());
                this.initRecordLine(x);

                switch (periodUnit)
                {
                    case PeriodUnit::Day:
                        line.FreqCode = PeriodUnit::Day;
                        line.Freq     = units * x;
                        break;
                    case PeriodUnit::Month:
                        line.FreqCode = PeriodUnit::Month;
                        line.Freq     = x;
                        break;
                    case PeriodUnit::Year:
                        line.FreqCode = PeriodUnit::Year;
                        line.Freq     = x;
                        break;
                }

                line.AllocateTransMap::setSort1980();
                line.doInsert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>existDBKey</Name>
				<Source><![CDATA[
    boolean existDBKey(LedgerAllocateKeyId keyTmp)
    {
        return (select ledgerAllocateKey where ledgerAllocateKey.Key == keyTmp).RecId ? true : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existTmp</Name>
				<Source><![CDATA[
    protected boolean existTmp(Common _cursor = null)
    {
        LedgerAllocateKey cursor = _cursor as LedgerAllocateKey;
        LedgerAllocateKey bufferExist;

        bufferExist = this.makeTmp();

        select firstonly RecId from bufferExist
            index hint KeyIdx
            where bufferExist.Key == cursor.Key;

        return bufferExist.RecId
            ? (bufferExist.RecId == cursor.RecId ? false : true)
            : false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordLine</Name>
				<Source><![CDATA[
    protected void initRecordLine(int  no)
    {
        bufferTrans.LineNum          = no;
        bufferTrans.PctProportion    = decround(100 / total,2);
        bufferTrans.DefaultDimension = defaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyFieldId</Name>
				<Source><![CDATA[
    protected fieldId keyFieldId()
    {
        return fieldnum(LedgerAllocateKey,Key);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuffer</Name>
				<Source><![CDATA[
    void setBuffer()
    {
        if (form_DS)
        {
            buffer = form_DS.cursor();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBufferLine</Name>
				<Source><![CDATA[
    void setBufferLine()
    {
        if (form_DSLine)
        {
            bufferTrans = form_DSLine.cursor();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateParm</Name>
				<Source><![CDATA[
    void updateParm()
    {
        LedgerAllocateKey   ledgerAllocateKeyFile;
        ReqParameters       reqParameters;

        super();

        if (!defaultRecId)
        {
            return;
        }

        ledgerAllocateKeyFile.setTmp();
        ledgerAllocateKeyFile.setTmpData(buffer);

        select firstonly RecId from ledgerAllocateKeyFile  where ledgerAllocateKeyFile.RecId == defaultRecId;

        if (ledgerAllocateKeyFile.RecId)
        {
            ttsbegin;
            reqParameters = ReqParameters::find(true);
            reqParameters.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreateName</Name>
				<Source><![CDATA[
    public void initCreateName()
    {
        super();

        buffer.Key = createName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>