<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxReportHrchyGTEReferenceNode_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class represents a reference node in the GTE tax hierarchy
/// </summary>
public class TaxReportHrchyGTEReferenceNode_IN extends TaxReportHrchyGTENode_IN
{
    SequenceNumber referenceSequence;
    RefRecId       referenceBindingVersion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNodeDisplayValueFromTaxTrans</Name>
				<Source><![CDATA[
    public container getNodeDisplayValueFromTaxTrans(TaxTrans_IN _taxTrans_IN, TaxSolutionScope _solutionScope)
    {
        TaxComponentTable_IN taxComponentTable = TaxComponentTable_IN::find(_taxTrans_IN.TaxComponentTable);

        TaxRuntimeDefContext defContext = 
            TaxRuntimeDefContext::findByScopeAndSolution(_solutionScope.RecId, _solutionScope.Solution);
        TaxRuntimeDefContextVersion defContextVersion = 
            TaxRuntimeDefContextVersion::findByDefContextAndSolutionVersion(defContext.RecId, _solutionScope.SolutionVersion);
        TaxRuntimeDocContext docContext =
            TaxRuntimeDocContext::findByScopeAndSolution(_solutionScope.RecId, _solutionScope.Solution);
        TaxRuntimeDocContextVersion docContextVersion = 
            TaxRuntimeDocContextVersion::findByDocContextAndSolutionVersion(docContext.RecId, _solutionScope.SolutionVersion);
        TaxRuntimeDocTaxType docTaxType = 
            TaxRuntimeSettingTaxTypeMapping_IN::findDocTaxTypeByVersionAndTaxType_IN(_solutionScope.RecId, docContextVersion.RecId, _taxTrans_IN.TaxType);
        TaxComponentRelationTable_IN taxComponentRelationTable = 
            TaxComponentRelationTable_IN::findByTaxComponentTableAndDefContext(taxComponentTable.recId, defContext.RecId);
        TaxRuntimeDocComponent taxDocComponent = 
            TaxRuntimeDocComponent::findByRuntimeComponent(taxComponentRelationTable.TaxRuntimeComponent, docContext.recId);
        TaxRtLookupStructFieldBindingVersion    fieldBindingVersion     = TaxRtLookupStructFieldBindingVersion::findByOwnerRefTypeAndSequence(taxDocComponent.TableId, taxDocComponent.RecId, TaxRuntimeLookupRefType::Settlement, this.parmReferenceSequence(), docContextVersion.RecId);
        str                                     bindingSourcePath       = fieldBindingVersion.BindingSourcePath;

        boolean                                 ret = false;
        TaxRegistrationNumber_IN                fieldValue;

        if (bindingSourcePath)
        {
            fieldValue = TaxRegistrationNumbers_IN::find(_taxTrans_IN.CompanyRegistrationNumber).RegistrationNumber;

            ret = true;
        }

        return [ret, fieldValue];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNodeTypeLabel</Name>
				<Source><![CDATA[
    public str getNodeTypeLabel()
    {
        str ret;

        ret = TaxRtLookupStructFieldBindingVersion::find(referenceBindingVersion).Description;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParentNode</Name>
				<Source><![CDATA[
    public void initFromParentNode(TaxReportHrchyNode_IN _parentNode)
    {
        TaxReportHrchyGTEReferenceNode_IN       parentReferenceNode;
        TaxReportHrchyGTENode_IN parentGTENode;

        super(_parentNode);

        parentGTENode = _parentNode as TaxReportHrchyGTENode_IN;
        if (parentGTENode)
        {
            this.parmTaxRuntimeRecId(parentGTENode.parmTaxRuntimeRecId());
            this.parmTaxRuntimeTableId(parentGTENode.parmTaxRuntimeTableId());
        }

        parentReferenceNode = _parentNode as TaxReportHrchyGTEReferenceNode_IN;
        if (parentReferenceNode)
        {
            this.parmReferenceSequence(parentReferenceNode.parmReferenceSequence() + 1);
        }
        else
        {
            this.parmReferenceSequence(1);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        this.parmNodeType(TaxReportHierarchyNodeType_IN::GTEReferenceNode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceBindingVersion</Name>
				<Source><![CDATA[
    public RefRecId parmReferenceBindingVersion(RefRecId _referenceBindingVersion = referenceBindingVersion)
    {
        referenceBindingVersion = _referenceBindingVersion;
        return referenceBindingVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReferenceSequence</Name>
				<Source><![CDATA[
    public SequenceNumber parmReferenceSequence(SequenceNumber _referenceSequence = referenceSequence)
    {
        referenceSequence = _referenceSequence;
        return referenceSequence;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persist</Name>
				<Source><![CDATA[
    public void persist()
    {
        TaxReportHierarchyNode_IN  tableNode;

        super();

        ttsBegin;

        tableNode = TaxReportHierarchyNode_IN::find(this.parmRecId(), true);

        if(tableNode.RecId)
        {
            tableNode.GTEReferenceSequence       = referenceSequence;
            tableNode.GTEReferenceBindingVersion = referenceBindingVersion;
            tableNode.update();
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c> TaxReportHrchyGTEReferenceNode_IN </c>.
    /// </summary>
    /// <returns>
    /// A new instance of <c> TaxReportHrchyGTEReferenceNode_IN </c>.
    /// </returns>
    public static TaxReportHrchyGTEReferenceNode_IN construct()
    {
        TaxReportHrchyGTEReferenceNode_IN taxHierarchyNode = new TaxReportHrchyGTEReferenceNode_IN();
        return taxHierarchyNode;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>