<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQSealedBidEncryptionManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PurchRFQSealedBidEncryptionManager</c> class handles the RFQ Sealed Bid encryption.
/// </summary>
[Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
public final class PurchRFQSealedBidEncryptionManager
{
    private PurchRFQSealedBidEncryptionHandler sealedBidEncryptionHandler;
    private PurchRFQReplyTableRecId rfqReplyRecId;
    private PurchRFQId rfqReplyRFQId;

    /// <summary>
    /// The <c>PurchRFQSealedBidEncryptionKeyCache</c> object instance caches encryption key data of the sealed RFQ reply.
    /// </summary>
    internal static PurchRFQSealedBidEncryptionKeyCache encryptionKeyCache = PurchRFQSealedBidEncryptionKeyCache::construct();
            
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        PurchRFQSealedBidFlightingManager::validatePreviewIsEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchRFQSealedBidEncryptionManager construct()
    {
        return new PurchRFQSealedBidEncryptionManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchRFQReplyTableRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the <c>PurchRFQSealedBidEncryptionManager</c> class.
    /// </summary>
    /// <param name ="_replyTableRecId">The <c>PurchRFQReplyTableRecId</c> of the <c>PurchRFQReplyTable</c> table.</param>
    /// <returns> An instance of the <c>PurchRFQSealedBidEncryptionManager</c> class. </returns>
    [Hookable(false)]
    internal static PurchRFQSealedBidEncryptionManager newFromPurchRFQReplyTableRecId(PurchRFQReplyTableRecId _replyTableRecId)
    {
        if (!_replyTableRecId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        PurchRFQSealedBidEncryptionManager encryptionManager = PurchRFQSealedBidEncryptionManager::construct();
        encryptionManager.initialize(_replyTableRecId);

        return encryptionManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editEncryptedField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Encrypt or decrypt table field.
    /// </summary>
    /// <param name ="_common">A table buffer.</param>
    /// <param name = "_value">The string value to be encrypted or decrypted.</param>
    /// <param name = "_fieldId">Id of the field to be encrypted or decrypted.</param>
    /// <param name = "_set">true when encrypt; false when decrypt.</param>
    /// <returns>The encrypted or Decrypted value.</returns>
    [Hookable(false)]
    public final str editEncryptedField(Common _common, str _value, FieldId _fieldId, boolean _set)
    {
        return sealedBidEncryptionHandler.editEncryptedField(_common, _value, _fieldId, _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editEncryptedString</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public final str editEncryptedString(str _value, boolean _set)
    {
        return sealedBidEncryptionHandler.editEncryptedString(_value, _set);
    }

]]></Source>
			</Method>
			<Method>
				<Name>logEncryptionActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Log encryption activity.
    /// </summary>
    /// <param name = "_set">true when encrypt; false when decrypt.</param>
    /// <param name = "_purchRFQSealedAuditLogParameters">The object containing audit log parameters.</param>
    [Hookable(false)]
    internal final void logEncryptionActivity(boolean _set, PurchRFQSealedAuditLogParameters _purchRFQSealedAuditLogParameters)
    {
        if (_purchRFQSealedAuditLogParameters.parmCanCreatePurchRFQEncryptionAuditLogEntry())
        {
            PurchRFQReplyEncryptionActivity encryptionActivity = _set ? PurchRFQReplyEncryptionActivity::Encrypt : PurchRFQReplyEncryptionActivity::Decrypt;
            PurchRFQReplyEncryptionAuditLog::logActivity(this.parmRFQReplyId(), _purchRFQSealedAuditLogParameters.parmActivity(), encryptionActivity);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isSealedBidEncryptionPrerequisiteConfigurede</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if encryption prerequisite for sealed bidding is correctly configured.
    /// </summary>
    /// <returns>true if the prerequisite is correctly configured; otherwise false. </returns>
    [Hookable(false)]
    internal final static boolean isSealedBidEncryptionPrerequisiteConfigurede()
    {
        var sealedBidEncryptionManager = PurchRFQSealedBidEncryptionManager::construct();
        var vaultParameters = PurchRFQSealedBidKeyVaultParametersTableHandler::findByEnabledForSealedBidding();

        return (sealedBidEncryptionManager.isValidKeyVaultEnabledForSealedBidding(vaultParameters)
                 && PurchRFQSealedBidIFXAuditHandler::getEncryptionCertThumbprint()
                 && sealedBidEncryptionManager.isValideSealedBidEncryptionKeyExpirationDayOffset());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRFQReplyId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal PurchRFQId parmRFQReplyId()
    {
        return rfqReplyRFQId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRFQReplyRecId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal PurchRFQReplyTableRecId parmRFQReplyRecId()
    {
        return rfqReplyRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEncryptionKey</Name>
				<Source><![CDATA[
    private final KeyVaultCertificateTable createEncryptionKey(PurchRFQReplyTableRecId _replyTableRecId, KeyVaultParameters _vaultParameters)
    {
        this.instantiateSealedBidEncryptionHandler(_vaultParameters, null);

        str encryptionKeyName = this.generateEncryptionKey(_replyTableRecId);
                
        this.createCertificateTableEntryForSealedRFQReply(_replyTableRecId, encryptionKeyName, _vaultParameters);

        KeyVaultCertificateTable  vaultCertificateTable = KeyVaultCertificateTable::findByName(encryptionKeyName);

        this.validateKeyVaultCertificateTable(vaultCertificateTable);

        return vaultCertificateTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCertificateTableEntryForSealedRFQReply</Name>
				<Source><![CDATA[
    private final void createCertificateTableEntryForSealedRFQReply(PurchRFQReplyTableRecId _replyTableRecId, str _encryptionKeyName, KeyVaultParameters _vaultParameters)
    {
        ttsbegin;

        var secretParameters = PurchRFQSealedBidKeyVaultCertificateTableParameters::construct(KeyVaultCertificateType::Key);
        secretParameters.name                   = _encryptionKeyName;
        secretParameters.description            = "@SCM:PurchRFQSealedBidKeyEncryptionKeyDiscription";
        secretParameters.keyVaultRef            = _vaultParameters.RecId;
        secretParameters.keyVaultCertificate    = strFmt("%1%2/%3", "@KeyVault:KeyVaultURIStartWith", this.getEncryptionKeyIdentifier(_vaultParameters.Url), _encryptionKeyName);

        PurchRFQSealedBidKeyVaultCertificateTableHandler::createCertificateTableEntryForSealedRFQReply(secretParameters);

        PurchRFQSealedBidKeyVaultCertificateTableHandler::linkeKeyVaultCertificateToSealedRFQReply(_replyTableRecId
                                                                                                   , KeyVaultCertificateTable::findByName(_encryptionKeyName).RecId );

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validatePurchRFQSealedBidEncryptionKeyExpirationDayOffset</Name>
				<Source><![CDATA[
    private final void validatePurchRFQSealedBidEncryptionKeyExpirationDayOffset()
    {
        if (!this.isValideSealedBidEncryptionKeyExpirationDayOffset())
        {
            this.throwError("@SCM:PurchRFQSealedBidEncryptionKeyExpirationDayOffsetValidationError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKeyVault</Name>
				<Source><![CDATA[
    private final void validateKeyVault(KeyVaultParameters _vaultParameters)
    {
        if (!this.isValidKeyVaultEnabledForSealedBidding(_vaultParameters))
        {
            this.throwError("@SCM:PurchRFQSealedBidCouldNotFindKeyVaultParameters");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateKeyVaultCertificateTable</Name>
				<Source><![CDATA[
    private final void validateKeyVaultCertificateTable(KeyVaultCertificateTable _vaultCertificateTable)
    {
        if (!_vaultCertificateTable.RecId || _vaultCertificateTable.KeyVaultCertificateType != KeyVaultCertificateType::Key)
        {
            this.throwError("@SCM:PurchRFQSealedBidCouldNotFindKeyVaultKey");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwError</Name>
				<Source><![CDATA[
    private final void throwError(str _error)
    {
        setprefix("@SCM:PurchRFQSealedBidEncryptionManagerErrorMessagePrefix");
        throw Error (_error);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(PurchRFQReplyTableRecId _replyTableRecId)
    {
        PurchRFQReplyTable replyTable = PurchRFQReplyTable::findRecId(_replyTableRecId);

        if (!replyTable.RecId)
        {
            throw error(Error::missingRecord(tableStr(PurchRFQReplyTable)));
        }

        rfqReplyRFQId = replyTable.RFQId;
        rfqReplyRecId = replyTable.RecId;

        container con = encryptionKeyCache.retrieveSealedBidEncryptionKey(_replyTableRecId);
        
        if (con != conNull())
        {
            this.instantiateSealedBidEncryptionHandler(conPeek(con, 1) as KeyVaultParameters, conPeek(con, 2) as KeyVaultCertificateTable);
            return;
        }

        KeyVaultCertificateTable vaultCertificateTable = PurchRFQSealedBidKeyVaultCertificateTableHandler::findCertificateTableEntryForSealedRFQReply(_replyTableRecId);

        KeyVaultParameters vaultParameters;

        if (!vaultCertificateTable.RecId)
        {
            vaultParameters = PurchRFQSealedBidKeyVaultParametersTableHandler::findByEnabledForSealedBidding();
            this.validateKeyVault(vaultParameters);
            this.validatePurchRFQSealedBidEncryptionKeyExpirationDayOffset();

            vaultCertificateTable = this.createEncryptionKey(_replyTableRecId, vaultParameters);
        }
        else
        {
            this.validateKeyVaultCertificateTable(vaultCertificateTable);

            vaultParameters = KeyVaultParameters::findRecId(vaultCertificateTable.KeyVaultRef);

            this.validateKeyVault(vaultParameters);
            this.instantiateSealedBidEncryptionHandler(vaultParameters, vaultCertificateTable);
        }

        encryptionKeyCache.setSealedBidEncryptionKey(_replyTableRecId, [vaultParameters, vaultCertificateTable]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>instantiateSealedBidEncryptionHandler</Name>
				<Source><![CDATA[
    private final void instantiateSealedBidEncryptionHandler(KeyVaultParameters _vaultParameters, KeyVaultCertificateTable _keyVaultCertificateTable)
    {
        unchecked(Uncheck::TableSecurityPermission)
        {
            sealedBidEncryptionHandler = PurchRFQSealedBidEncryptionHandler::newFromKeyVaultParameter(_vaultParameters.AppClientId
                                                                                                     , appl.convertToSecureString(_vaultParameters.getClientSecretKey())
                                                                                                     , _vaultParameters.Url);
        }

        if (_keyVaultCertificateTable && _keyVaultCertificateTable.Name != '')
        {
            sealedBidEncryptionHandler.parmEncryptionKey(_keyVaultCertificateTable.Name);
        }
        else
        {
            Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource::EventWriteApplicationDiagnostic(
                "Skipping setting encryption key parameter on the sealed bid encryption handler.",
                new System.Diagnostics.StackTrace().ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateEncryptionKey</Name>
				<Source><![CDATA[
    private final str generateEncryptionKey(PurchRFQReplyTableRecId _replyTableRecId)
    {
        return sealedBidEncryptionHandler.generateEncryptionKey(_replyTableRecId
                                                                , DateTimeUtil::utcNow()
                                                                , DateTimeUtil::addDays(DateTimeUtil::utcNow()
                                                                                       , PurchRFQParameters::find().SealedBidEncryptionKeyExpirationDayOffset));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValidKeyVaultEnabledForSealedBidding</Name>
				<Source><![CDATA[
    private final boolean isValidKeyVaultEnabledForSealedBidding(KeyVaultParameters _vaultParameters)
    {
        return (_vaultParameters.RecId && _vaultParameters.EnabledForSealedBidding);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isValideSealedBidEncryptionKeyExpirationDayOffset</Name>
				<Source><![CDATA[
    private final boolean isValideSealedBidEncryptionKeyExpirationDayOffset()
    {
        PurchRFQParameters purchRFQParameters = PurchRFQParameters::find();

        return (purchRFQParameters.SealedBidEncryptionKeyExpirationDayOffset >= purchRFQParameters.DaysOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEncryptionKeyIdentifier</Name>
				<Source><![CDATA[
    private str getEncryptionKeyIdentifier(KeyVaultDefaultUrl _url)
    {
        str keyVaultName = _url;
            
        if(strFind(keyVaultName, '.', 1, strLen(keyVaultName)))
        {
            keyVaultName = subStr(keyVaultName, 1, strFind(keyVaultName, '.', 1, strLen(keyVaultName))-1);
        }

        keyVaultName = strDel(keyVaultName, 1, strFind(keyVaultName, '//', 1, strLen(keyVaultName))+1);

        return keyVaultName;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>