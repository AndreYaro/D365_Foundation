<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCostPreCloseMatchReturn</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCostPreCloseMatchReturn</c> class matches return inventory transactions.
/// </summary>
/// <remarks>
///    Non return inventory transactions are not matching
/// </remarks>
class InventCostPreCloseMatchReturn extends InventCostPreCloseMatch
{
    boolean matchDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInventTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds an inventory transaction to match
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction to add.
    /// </param>
    public void addInventTrans(InventTrans _inventTrans)
    {
        if (_inventTrans.ReturnInventTransOrigin)
        {
            super(_inventTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMatching</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if an inventory transaction matches other inventory transactions.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction to add.
    /// </param>
    /// <returns>
    ///    true if the inventory transactions are matched to other inventory transactions; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    All inventory transactions must be added to match before calling this method.
    /// </remarks>
    public boolean isMatching(InventTrans _inventTrans)
    {
        if (_inventTrans.ReturnInventTransOrigin)
        {
            return super(_inventTrans);
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>key</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Computes the key that is used to match.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The inventory transaction.
    /// </param>
    /// <returns>
    ///    The key that is used to match.
    /// </returns>
    protected str key(InventTrans _inventTrans)
    {
        return this.keyDate(_inventTrans) + '#' + this.keyReturn(_inventTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyDate</Name>
				<Source><![CDATA[
    protected str keyDate(InventTrans _inventTrans)
    {
        #define.sequenceYYMMDD(321)

        if (matchDate)
        {
            return date2str(_inventTrans.DateFinancial,
                            #sequenceYYMMDD,
                            DateDay::Digits2,
                            DateSeparator::Hyphen, // separator1
                            DateMonth::Digits2,
                            DateSeparator::Hyphen, // separator2
                            DateYear::Digits4,
                            DateFlags::None);
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>keyReturn</Name>
				<Source><![CDATA[
    protected str keyReturn(InventTrans _inventTrans)
    {
        if (_inventTrans.Qty > 0)
        {
            return int642str(_inventTrans.InventTransOrigin) + '#' + int642str(_inventTrans.ReturnInventTransOrigin);
        }
        else if (_inventTrans.Qty < 0)
        {
            // <GEERU>
            if (countryRegion_RU && !_inventTrans.ReturnInventTransOrigin)
            {
                return int642str(_inventTrans.InventTransOrigin) + '#' + int642str(_inventTrans.InventTransOrigin);
            }
            else
            {
            // </GEERU>
                return int642str(_inventTrans.ReturnInventTransOrigin) + '#' + int642str(_inventTrans.InventTransOrigin);
            // <GEERU>
            }
            // </GEERU>
        }

        throw error(strFmt("@SYS19378", funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMatchDate</Name>
				<Source><![CDATA[
    protected boolean parmMatchDate(boolean _matchDate = matchDate)
    {
        matchDate = _matchDate;

        return matchDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventCostPreCloseMatchReturn construct(
        InventModelType         _inventModelType,
        InventTransCurrency_RU  _inventTransCurrency = InventTransCurrency_RU::PrimaryCur)
    {
        InventCostPreCloseMatchReturn inventCostPreCloseMatchReturn = new InventCostPreCloseMatchReturn();

        inventCostPreCloseMatchReturn.parmMatchDate(_inventModelType.matchDateInPreCloseReturns());
        inventCostPreCloseMatchReturn.parmInventTransCurrency(_inventTransCurrency);

        return inventCostPreCloseMatchReturn;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>