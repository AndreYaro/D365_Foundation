<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25RegCalc_PayRoll</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class encapsulates Russian payroll register calculation algorithm.
/// </summary>
final class RTax25RegCalc_PayRoll extends RTax25RegCalc implements BatchRetryable
{
    #OCCRetryCount
    #define.FieldNum2(2)
    TmpRTax25PayRoll        tmpRTax25PayRoll;
    RTax25RegisterId        rTax25RegisterId;

    RTax25ProfitId          profitId;

    RTax25LedgerRun         ledgerRun;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax register lines.
    /// </summary>
    public void calc()
    {
        container       contain;
        RefRecId        parentProfitRecId = 0;
        boolean         firstpass = true;
        AmountMst       sumAmount = 0;
        RHRMEmplTable   emplTable;
        int             total;

        while select tmpRTax25PayRoll
            group by ParentRTax25ProfitTable, EmplId, PayPeriod, RTax25ProfitTable
        {
            total ++;
        }

        this.progressInit('', tmpRTax25PayRoll.RecId);
        try
        {
            ttsbegin;

            super();

            while select sum(Amount) from tmpRTax25PayRoll
                group by ParentRTax25ProfitTable, EmplId, PayPeriod, RTax25ProfitTable

            {
                emplTable = RHRMEmplTable::find(tmpRTax25PayRoll.EmplId);
                progress.setText(strfmt("@RUP45", RTax25ProfitTable::find(parentProfitRecId).ProfitId, emplTable.personTable().fio()));

                if (parentProfitRecId != tmpRTax25PayRoll.ParentRTax25ProfitTable || firstpass)
                {
                    if (! firstpass)
                    {
                        regQuery.addFooterRecord(parentProfitRecId,
                                                 ['', '', dateNull(), '', sumAmount, ''],
                                                 #FieldNum2);
                    }

                    sumAmount = 0;
                    parentProfitRecId = tmpRTax25PayRoll.ParentRTax25ProfitTable;
                    regQuery.addHeaderRecord(parentProfitRecId, conNull(), #FieldNum2);
                }

                firstpass = false;
                contain = [tmpRTax25PayRoll.EmplId + ' ' + RHRMEmplTable::find(tmpRTax25PayRoll.EmplId).personTable().fio(),
                           RTax25ProfitTable::find(parentProfitRecId).Description,
                           tmpRTax25PayRoll.PayPeriod,
                           RTax25ProfitTable::find(tmpRTax25PayRoll.RTax25ProfitTable).Description,
                           tmpRTax25PayRoll.Amount,
                           ''];

                regQuery.addBodyRecord(tmpRTax25PayRoll.RTax25ProfitTable, contain, emplTable.TableId, emplTable.RecId);

                sumAmount += tmpRTax25PayRoll.Amount;

                progress.incCount();
            }

            if (! firstpass)
            {
                regQuery.addFooterRecord(parentProfitRecId,
                                         ['', '', dateNull(), '', sumAmount, ''],
                                         #FieldNum2);
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///  The method initializes register data.
    /// </summary>
    /// <param name="_journalTrans">
    ///  <c>RegisterJournalTrans</c> record being calculated.
    /// </param>
    /// <param name="_batch">
    ///  <c>Batch</c> record.
    /// </param>
    /// <returns>
    ///  True, if initialization succeed; Otherwise false.
    /// </returns>
    public boolean init(RTax25RegisterJournalTrans _journalTrans = null, Batch _batch = null)
    {
        super(_journalTrans, _batch);
        tmpRTax25PayRoll = this.initPayRollRange(registerId);
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPayRollRange</Name>
				<Source><![CDATA[
    private TmpRTax25PayRoll initPayRollRange(RTax25RegisterId _registerId)
    {
        RPayTrans                  rPayTrans;
        RefRecId                   lastProfitRecId;
        RTax25RegisterJournalTable registerJournalTableLocal = registerJournalTrans.registerJournalTable();

        rTax25RegisterId = _registerId;

        ledgerRun = RTax25LedgerRun::newRegisterId(this, '', _registerId);

        while select LedgerDimension, DefaultDimension, OffsetLedgerDimension, OffsetDefaultDimension,
                     Amount, Emplid, CorrectedPeriod
            from rPayTrans
                where rPayTrans.CorrectedPeriod     >= dateFrom                     &&
                      rPayTrans.CorrectedPeriod     <= dateTo                       &&
                      rPayTrans.AccountType         == LedgerJournalACType::Ledger  &&
                      rPayTrans.OffsetAccountType   == LedgerJournalACType::Ledger  &&
                      rPayTrans.PayPeriod           >= dateFrom                     &&
                      rPayTrans.PayPeriod           <= dateTo
        {
            lastProfitRecId = ledgerRun.checkAccountsInRange(LedgerDimensionFacade::getMainAccountFromLedgerDimension(rPayTrans.LedgerDimension).RecId,
                                                             LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(rPayTrans.LedgerDimension),
                                                             LedgerDimensionFacade::getMainAccountFromLedgerDimension(rPayTrans.OffsetLedgerDimension).RecId,
                                                             LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(rPayTrans.OffsetLedgerDimension));

            if (! lastProfitRecId ||
                ! ledgerRun.checkException(
                    registerId,
                    LedgerDimensionFacade::getMainAccountFromLedgerDimension(rPayTrans.LedgerDimension).RecId,
                    LedgerDimensionFacade::getMainAccountFromLedgerDimension(rPayTrans.OffsetLedgerDimension).RecId,
                    LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(rPayTrans.LedgerDimension),
                    LedgerDimensionFacade::getDefaultDimensionFromLedgerDimension(rPayTrans.OffsetLedgerDimension)))
            {
                continue;
            }

            tmpRTax25PayRoll.addRecord(_registerId,
                                       lastProfitRecId,
                                       rPayTrans.Amount,
                                       rPayTrans.Emplid,
                                       LedgerDimensionFacade::getMainAccountFromLedgerDimension(rPayTrans.LedgerDimension).RecId,
                                       LedgerDimensionFacade::getMainAccountFromLedgerDimension(rPayTrans.OffsetLedgerDimension).RecId,
                                       rPayTrans.CorrectedPeriod);
        }

        return tmpRTax25PayRoll;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>