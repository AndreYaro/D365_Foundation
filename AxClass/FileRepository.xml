<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FileRepository</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>FileRepository</c> class provides i/o directory operations.
/// </summary>
class FileRepository
{
    // Use UTF-16LE as the default code page.
    const int DefaultCodePage = 1200;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pathExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if path from file exists.
    /// </summary>
    ///	<param name="_folderPath">
    /// The folder path to be checked.
    /// </param>
    /// <returns>
    /// True if does and false its not.
    /// </returns>
    public static boolean pathExists(str _folderPath)
    {
        FileIOPermission fileIOPerm;
        InteropPermission interopPerm;
        boolean fexists;

        fileIOPerm = new FileIOPermission(_folderPath,'r');
        fileIOPerm.demand();

        interopPerm = new InteropPermission(InteropKind::ClrInterop);
        interopPerm.assert();

        fexists = System.IO.Directory::Exists(_folderPath);
        return fexists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the file exists.
    /// </summary>
    /// <param name="_fileName">
    /// The file name to be checked.
    /// </param>
    /// <returns>
    /// True if does and false its not.
    /// </returns>
    public static boolean fileExists(str _fileName, boolean _acceptFolder = true)
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the file.
    /// </summary>
    /// <param name="_fileName">
    /// The file name to be deleted.
    /// </param>
    /// <returns>
    /// True if does and false its not.
    /// </returns>
    public static boolean deleteFile(str _fileName)
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentDirectory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current directory.
    /// </summary>
    /// <returns>
    /// The directory path.
    /// </returns>
    public static str getCurrentDirectory()
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTempPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains temporary path from file.
    /// </summary>
    /// <returns>
    /// The temporary path from file.
    /// </returns>
    public static str getTempPath()
    {
        FileIOPermission fileIOPerm;
        InteropPermission interopPerm;
        str tempPath;

        fileIOPerm = new FileIOPermission('','r');
        fileIOPerm.demand();

        interopPerm = new InteropPermission(InteropKind::ClrInterop);
        interopPerm.assert();

        tempPath = System.IO.Path::GetTempPath();
        return tempPath;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the file type.
    /// </summary>
    /// <param name="_extension">
    /// The file extension.
    /// </param>
    /// <returns>
    /// The file type.
    /// </returns>
    public static str fileType(str _extension)
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileLocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the file is locked.
    /// </summary>
    /// <param name="_filename">
    /// The file name.
    /// </param>
    /// <returns>
    /// True if does and false its not.
    /// </returns>
    public static boolean fileLocked(Filename _filename)
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTempFilename</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the temporary file name.
    /// </summary>
    /// <param name="_dirname">
    /// The path of the file.
    /// </param>
    /// <param name="_prefix">
    /// The prefix of the file.
    /// </param>
    /// <returns>
    /// The temporary file name.
    /// </returns>
    public static str getTempFilename(str _dirname, str _prefix)
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFolderPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the folder path.
    /// </summary>
    /// <param name="_whatFolderCLSID">
    /// The folder CLSID.
    /// </param>
    /// <returns>
    /// The file path.
    /// </returns>
    public static str getFolderPath(int _whatFolderCLSID)
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
			<Method>
				<Name>showMruAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows the mru allowed.
    /// </summary>
    /// <returns>
    /// True if does and false its not.
    /// </returns>
    public static boolean showMruAllowed()
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
			<Method>
				<Name>browseForPath</Name>
				<Source><![CDATA[
    /// <summary>
    /// Browses for folder path.
    /// </summary>
    /// <param name="_title">
    /// The file title.
    /// </param>
    /// <returns>
    /// The folder path.
    /// </returns>
    public static str browseForPath(str _title = "@SYS63310")
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
			<Method>
				<Name>folderExists</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the folder exists.
    /// </summary>
    /// <param name="_filename">
    /// The file name.
    /// </param>
    /// <returns>
    /// True if does and false its not.
    /// </returns>
    public static boolean folderExists(Filename _filename)
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructForMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the file with a specific mode.
    /// </summary>
    /// <param name="_type">
    /// The file type.
    /// </param>
    /// <param name="_mode">
    /// The file mode.
    /// </param>
    /// <param name="_stream">
    /// The file stram.
    /// </param>
    /// <param name="_codePage">
    /// The file codePage(charset).
    /// </param>
    /// <returns>
    /// The stream of the file constructed.
    /// </returns>
    public static StreamIo constructForMode(str _type, str _mode = 'w', System.IO.Stream _stream = null, int _codePage = DefaultCodePage)
    {
        switch (_type)
        {
            case 'AsciiIo' :
                switch (_mode)
                {
                    case 'w': return AsciiStreamIo::constructForWrite();
                    case 'r': return AsciiStreamIo::constructForRead(_stream);
                    case 'a': return AsciiStreamIo::constructForAppend(_stream);
                    default:  throw error(Error::wrongUseOfFunction(funcname()));
                }

            case 'CommaIo' :
                switch (_mode)
                {
                    case 'w': return CommaStreamIo::constructForWrite();
                    case 'r': return CommaStreamIo::constructForRead(_stream);
                    case 'a': return CommaStreamIo::constructForAppend(_stream);
                    default:  throw error(Error::wrongUseOfFunction(funcname()));
                }

            case 'TextIo' :
                switch (_mode)
                {
                    case 'w': return TextStreamIo::constructForWrite(_codePage);
                    case 'r': return TextStreamIo::constructForRead(_stream, _codePage);
                    case 'a': return TextStreamIo::constructForAppend(_stream, _codePage);
                    default:  throw error(Error::wrongUseOfFunction(funcname()));
                }

            default :
                throw error(Error::wrongUseOfFunction(funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileSize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Obtains the file size.
    /// </summary>
    /// <param name="_filename">
    /// The file name.
    /// </param>
    /// <returns>
    /// The file size.
    /// </returns>
    public static int fileSize(Filename _filename)
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
			<Method>
				<Name>replace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces the file.
    /// </summary>
    /// <param name="_filename">
    /// The file name.
    /// </param>
    /// <param name="_from">
    /// The source path.
    /// </param>
    /// <param name="_to">
    /// The destination path.
    /// </param>
    public static void replace(str _fileName, str _from, str _to)
    {
        throw error("Not implemented");
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>