<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdSpecialDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The report data provider class for support <c>TaxWithholdSpecial</c>.
/// </summary>
[SRSReportParameterAttribute(classStr(TaxWithholdSpecialContract))]
public class TaxWithholdSpecialDP extends SRSReportDataProviderBase
{
    TaxWithholdSpecialTmp taxWithholdSpecialTmp;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceTH00007, funcName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query for the report.
    /// </summary>
    /// <param name = "_fromDate">A starting date.</param>
    /// <param name = "_toDate">An ending date.</param>
    /// <returns>A query run object of a main report query.</returns>
    public QueryRun getQueryRun(TransDate _fromDate, TransDate _toDate)
    {
        Query reportQuery = new Query();

        // TaxWithholdTrans
        QueryBuildDataSource queryDatasource = reportQuery.addDataSource(tableNum(TaxWithholdTrans));
        queryDatasource.orderMode(OrderMode::GroupBy);
        queryDatasource.addSortField(fieldnum(TaxWithholdTrans, TransDate));
        queryDatasource.addSelectionField(fieldnum(TaxWithholdTrans, TaxWithholdAmount), SelectionField::Sum);
        queryDatasource.addSelectionField(fieldnum(TaxWithholdTrans, TransDate)); 

        findOrCreateRange_W(queryDatasource, fieldNum(TaxWithholdTrans, Posted), queryValue(NoYes::Yes));
        findOrCreateRange_W(queryDatasource, fieldNum(TaxWithholdTrans, TransDate), queryRange(_fromDate, _toDate));

        // TaxWithholdTransExtensionTH        
        queryDatasource = queryDatasource.addDataSource(tableNum(TaxWithholdTransExtensionTH));
        queryDatasource.relations(true);
        queryDatasource.orderMode(OrderMode::GroupBy);
        queryDatasource.addSortField(fieldnum(TaxWithholdTransExtensionTH, ReceiptNumber));
        queryDatasource.addSelectionField(fieldnum(TaxWithholdTransExtensionTH, ReceiptNumber));        

        findOrCreateRange_W(queryDatasource, fieldNum(TaxWithholdTransExtensionTH, HideInReports), queryValue(NoYes::No));

        // VendTable
        queryDatasource = queryDatasource.addDataSource(tableNum(VendTable));
        queryDatasource.joinMode(JoinMode::ExistsJoin);
        str dataSourceName = reportQuery.dataSourceTable(tableNum(TaxWithholdTrans)).name();
        queryDatasource.relations(false);
        queryDatasource.addLink(fieldNum(TaxWithholdTrans, VendAccount), fieldNum(VendTable, AccountNum), dataSourceName);
                
        return new QueryRun(reportQuery);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts record into temp table.
    /// </summary>
    /// <param name = "_taxWithholdTrans">A tax withhold transaction record.</param>
    /// <param name = "_taxWithholdTransExtension">A tax withhold transaction extension table record.</param>
    /// <param name = "_specialFormType">A report form type.</param>
    protected void insertTmpRecord(
        TaxWithholdTrans _taxWithholdTrans,
        TaxWithholdTransExtensionTH _taxWithholdTransExtension,
        TaxWithholdSpecialFormType _specialFormType
        )
    {
        taxWithholdSpecialTmp.clear();

        taxWithholdSpecialTmp.TransDate                     = _taxWithholdTrans.TransDate;
        taxWithholdSpecialTmp.ReceiptNumber                 = _taxWithholdTransExtension.ReceiptNumber;
        taxWithholdSpecialTmp.TaxWithholdAmountIndividual   = _specialFormType == TaxWithholdSpecialFormType::Individual ? _taxWithholdTrans.TaxWithholdAmount : 0;
        taxWithholdSpecialTmp.TaxWithholdAmountCorporate    = _specialFormType == TaxWithholdSpecialFormType::Corporate ? _taxWithholdTrans.TaxWithholdAmount : 0;
        taxWithholdSpecialTmp.TaxWithholdAmount             = _taxWithholdTrans.TaxWithholdAmount;
        taxWithholdSpecialTmp.TaxWithholdSpecialForm        = _specialFormType;

        if (taxWithholdSpecialTmp.TaxWithholdAmountIndividual   != 0
                || taxWithholdSpecialTmp.TaxWithholdAmountCorporate != 0
                || taxWithholdSpecialTmp.TaxWithholdAmount          != 0)
        {
            taxWithholdSpecialTmp.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxWithholdSpecialTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates taxWithholdTransTmp_HT table.
    /// Uses this method to support taxWithholdSpecial report.
    /// </summary>
    /// <param name="_fromDate">
    /// The start time.
    /// </param>
    /// <param name="_toDate">
    /// The end time.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void createTaxWithholdSpecialTmp(TransDate _fromDate, TransDate _toDate)
    {
        QueryRun queryRun = this.getQueryRun(_fromDate,_toDate);
     
        // Create lines for "Person"
        QueryBuildDataSource queryDatasource = queryRun.query().dataSourceTable(tableNum(VendTable)).addDataSource(tableNum(DirPartyTable));
        queryDatasource.joinMode(JoinMode::ExistsJoin);
        queryDatasource.relations(true);
        findOrCreateRange_W(queryDatasource, fieldNum(DirPartyTable, InstanceRelationType), queryValue(tableNum(DirPerson)));

        while (queryRun.next())
        {
            this.insertTmpRecord(
                queryRun.get(tableNum(TaxWithholdTrans)),
                queryRun.get(tableNum(TaxWithholdTransExtensionTH)),
                TaxWithholdSpecialFormType::Individual
                );
        }

        // Create lines for "Organization"
        findOrCreateRange_W(queryDatasource, fieldNum(DirPartyTable, InstanceRelationType), queryValue(tableNum(DirOrganization)));

        queryRun.reset();        
        while (queryRun.next())
        {
            this.insertTmpRecord(
                queryRun.get(tableNum(TaxWithholdTrans)),
                queryRun.get(tableNum(TaxWithholdTransExtensionTH)),
                TaxWithholdSpecialFormType::Corporate
                );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWithholdSpecialTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrives the data table from the <c>TaxWithholdTransTmp_TH</c> table.
    /// </summary>
    /// <returns>
    /// Required report data table (temporary).
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(TaxWithholdSpecialTmp)), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public TaxWithholdSpecialTmp getTaxWithholdSpecialTmp()
    {
        return taxWithholdSpecialTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Uses this method to process the report businiess logic that is used by <c>TaxWithholdSpecial</c> report.
    /// </remarks>
    public void processReport()
    {
        FromDate                        fromDate;
        ToDate                          toDate;
        TaxWithholdSpecialContract      contract = this.parmDataContract() as TaxWithholdSpecialContract;

        // Get time variables
        fromDate = contract.parmFromDate();
        toDate   = contract.parmToDate();

        // Handling no time variables have been input
        if (!fromDate)
        {
            fromDate = dateNull();
        }
        if (!toDate)
        {
            toDate = dateMax();
        }

        this.createTaxWithholdSpecialTmp(fromDate, toDate);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>