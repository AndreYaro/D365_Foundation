<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransExplodeAdapter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class is to implement "explosion after planned order re-scheduling" functionality,
/// in a way that provides both optionality of re-explosion and saved settings (i.e.
/// the form "remembers" what was the user's last choice).
/// The explosion UI is mostly re-used from the system Explosion dialog, just a new
/// field is added ("Perform explosion after re-scheduling").
/// </summary>
class ReqTransExplodeAdapter extends RunBaseBatch implements SysPackable, BatchRetryable
{
    ReqCalcExplodePo        reqCalcExplode;

    NoYes                   doExplosion;
    DialogField             dialogDoExplosion;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        doExplosion
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    ///    interface.
    /// </summary>
    /// <param name="_dialog">
    ///    A dialog represents rescheduling dialog, optional.
    /// </param>
    /// <returns>
    ///    A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    public Object dialog(Dialog _dialog = null)
    {
        if (reqCalcExplode != null)
        {
            _dialog.addTabPage("@SYS9304");
            dialogDoExplosion = _dialog.addFieldValue(enumStr(NoYes), doExplosion, "@SYS4004360");

            reqCalcExplode.dialog(_dialog);
        }

        return _dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        if (dialogDoExplosion != null)
        {
            doExplosion = dialogDoExplosion.value();
        }

        if (reqCalcExplode != null)
        {
            reqCalcExplode.getFromDialog();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    public void getLast()
    {
        super();

        if (reqCalcExplode != null)
        {
            reqCalcExplode.getLast();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        if (reqCalcExplode != null)
        {
            reqCalcExplode.initParmDefault();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPErrorClassNewNotProtected', 'The constructor is preserved public due to API compatibility.')]
    public void new(ReqTrans _reqTrans = null, ReqPlanData _reqPlanData = null)
    {
        super();

        this.getLast();

        if (ReqTrans::refTypeIsPlannedOrder(_reqTrans.RefType) && ReqCalcExplode::canRunReqTrans(_reqTrans.RefType))
        {
            reqCalcExplode = ReqCalcExplode::newReqTrans(_reqTrans, _reqPlanData) as ReqCalcExplodePo;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [
            #CurrentVersion,
            #CurrentList,
            reqCalcExplode == null ? conNull() : reqCalcExplode.pack()
        ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (doExplosion && reqCalcExplode != null)
        {
            reqCalcExplode.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    public void saveLast()
    {
        super();

        if (doExplosion && reqCalcExplode != null)
        {
            reqCalcExplode.saveLast();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        int             version     = runbase::getVersion(packedClass);
        container       reqCalcExplodePacked;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, reqCalcExplodePacked] = packedClass;

                reqCalcExplode = ReqCalcExplodePo::construct();
                if (!reqCalcExplode.unpack(reqCalcExplodePacked))
                {
                    reqCalcExplode = null;
                }

                return true;

            default :
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReqTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Constructs a new instance of the explosion adapter class based on the specified requirements record and plan data.
    /// </summary>
    /// <param name="_reqTrans">
    ///     The specified requirement record.
    /// </param>
    /// <param name="_reqPlanData">
    ///     The specified plan data.
    /// </param>
    /// <returns>
    ///     An instance of the <c>ReqTransExplodeAdapter</c> class.
    /// </returns>
    public static ReqTransExplodeAdapter newReqTrans(ReqTrans _reqTrans, ReqPlanData _reqPlanData)
    {
        ReqTransExplodeAdapter explosionAdapter;

        explosionAdapter = new ReqTransExplodeAdapter(_reqTrans, _reqPlanData);

        return explosionAdapter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReqCalcExplodePo</Name>
				<Source><![CDATA[
    public void setReqCalcExplodePo(ReqCalcExplodePo _reqCalcExplode)
    {
        reqCalcExplode = _reqCalcExplode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDoExplosion</Name>
				<Source><![CDATA[
    public void setDoExplosion(NoYes _doExplosion)
    {
        doExplosion = _doExplosion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>