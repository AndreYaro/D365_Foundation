<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjTableFormHierarchyGridHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class contains all methods to create and update records in <c>ProjHierarchyTemp</c> table that stores the state of the grid.
/// </summary>
internal final class ProjTableFormHierarchyGridHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeProjHierarchyTemp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert records in the temp table for one hierarchy (forest) of <c>ProjTable</c> records.
    /// Sets the RefRecId and RefSortRecId fields to corresponding record identifiers of <c>ProjTable</c> and <c>ProjTableSorting</c>.
    /// </summary>
    /// <param name = "_refRootProjTable">The root node project table record identifier.</param>
    /// <param name = "_tempTablePhysicalName">Physical name of the temp table that stores the state of grid.</param>
    /// <param name = "_curProjId">Current project ID.</param>
    [Hookable(false)]
    public static void initializeProjHierarchyTemp(
        RecId _refRootProjTable,
        str _tempTablePhysicalName,
        ProjId _curProjId)
    {
        Partition currentPartition = getCurrentPartitionRecId();
        DataAreaId currentCompany = curExt();
        ProjTable rootProjTable = ProjTable::findRecId(_refRootProjTable);
  
        // Construct a query to insert all (ProjTable) records into the temp table
        str insertTempSQL = strFmt(@"INSERT INTO %1 (
                                    Partition, DataAreaId, RefRecId, RefSortRecId, RefNodeId, Expand, Visible, SelectionGroup, DiffNumDeletedChildren, RefTableId
                                ) SELECT
                                    %2, '%3', P1.RecId, Sort.RecId, P1.RecId, IIF(Sort.RefRootProjTable = Sort.RefProjTable, 1, 0), IIF(Sort.RefRootProjTable = Sort.RefProjTable OR P1.ParentId = '%5', 1, 0), 0, 0, '%6'
                                FROM ProjTable AS P1
                                INNER JOIN ProjTableSorting AS Sort ON
                                    Sort.Partition = %2 AND Sort.DataAreaId = '%3'
                                    AND Sort.RefProjTable = P1.RecId AND Sort.RefRootProjTable = %4
                                WHERE
                                    P1.Partition = %2 AND P1.DataAreaId = '%3'",
                                _tempTablePhysicalName,
                                currentPartition,
                                currentCompany,
                                _refRootProjTable,
                                rootProjTable.ProjId,
                                TableNum(ProjTable));

        ProjTableFormHierarchyGridHelper::executeSQLStatement(insertTempSQL, SqlParams::create());

        ProjTableFormHierarchyGridHelper::expandAllParentsOfCurProjAndMakeItVisible(_curProjId, _tempTablePhysicalName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandAllParentsOfCurProjAndMakeItVisible</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expands all parents of current project.
    /// </summary>
    /// <param name = "_projId">Project ID of project that is selected.</param>
    /// <param name = "_tempTablePhysicalName">Physical name of the temp table that stores the state of grid.</param>
    [Hookable(false)]
    public static void expandAllParentsOfCurProjAndMakeItVisible(ProjId _projId, str _tempTablePhysicalName)
    {
        ProjTable projTable = ProjTable::find(_projId);
        ProjTableSorting projTableSorting;
        while(projTable.ParentId != '')
        {
            projTableSorting = ProjTableSorting::findProjRecId(projTable.RecId);
            ProjTableFormHierarchyGridHelper::expandProject(projTable, projTableSorting, _tempTablePhysicalName);
            projTable = ProjTable::find(projTable.ParentId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteAllProjHierarchyTempTableRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes all records from <c>ProjHierarchyTemp</c> table.
    /// </summary>
    /// <param name = "_hierarchyTemp"><c>ProjHierarchyTemp</c> table record that stores the state of grid.</param>
    [Hookable(false)]
    public static void deleteAllProjHierarchyTempTableRecords(ProjHierarchyTemp _hierarchyTemp)
    {
        ttsbegin;
        delete_from _hierarchyTemp;
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHierarchyTempTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds record to <c>ProjHierarchyTemp</c> table.
    /// </summary>
    /// <param name = "_projHierarchyTemp"><c>ProjHierarchyTemp</c> table record that stores the state of grid.</param>
    /// <param name = "_projTable"><c>ProjTable</c> record that needs to be added to the temp table.</param>
    [Hookable(false)]
    public static void addHierarchyTempTableRecord(ProjHierarchyTemp _projHierarchyTemp, ProjTable _projTable)
    {
        ttsbegin;
        ProjTableSorting projTableSorting = ProjTableSorting::findProjRecId(_projTable.RecId);
        ProjHierarchyTemp hierarchyTemp;
        hierarchyTemp.linkPhysicalTableInstance(_projHierarchyTemp);
        hierarchyTemp.RefRecId = _projTable.RecId;
        hierarchyTemp.RefSortRecId = projTableSorting.RecId;
        hierarchyTemp.RefNodeId = _projTable.RecId;
        hierarchyTemp.Visible = FalseTrue::True;
        hierarchyTemp.Expand = FalseTrue::False;
        hierarchyTemp.RefTableId = TableNum(ProjTable);
        hierarchyTemp.insert();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteProjHierarchyTempTableRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes specific record from <c>ProjHierarchyTemp</c> table.
    /// </summary>
    /// <param name = "_projHierarchytemp"><c>ProjHierarchyTemp</c> table record that stores the state of grid.</param>
    /// <param name = "_recIdToDelete">Record identifier of the <c>ProjTable</c> record to be deleted.</param>
    [Hookable(false)]
    public static void deleteProjHierarchyTempTableRecord(ProjHierarchyTemp _projHierarchytemp, RecId _recIdToDelete)
    {
        ttsbegin;
        ProjHierarchyTemp projHierarchyTemp = _projHierarchytemp.findByReferenceV2(_recIdToDelete, true);
        projHierarchyTemp.delete();
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>collapseProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Collapse project by updating Expand and Visible fields in <c>ProjHierarchyTemp</c> table.
    /// </summary>
    /// <param name = "_projToCollapse"><c>ProjTable</c> record of project to collapse.</param>
    /// <param name = "_projToCollapseSortingRecord"><c>ProjTableSorting</c> record of project to collapse.</param>
    /// <param name = "_tempTablePhysicalName">Physical name of the temp table that stores the state of grid.</param>
    /// <remarks>
    /// Uses direct SQL for better performance as we need this operation to be quick.
    /// </remarks>
    [Hookable(false)]
    public static void collapseProject(
        ProjTable _projToCollapse,
        ProjTableSorting _projToCollapseSortingRecord,
        str _tempTablePhysicalName)
    {
        // Need to collapse everything that's a child of this
        Partition currentPartition = getCurrentPartitionRecId();
        DataAreaId currentCompany = curExt();

        // Construct a query to collapse and hide anything within the given task's hierarchy (except for the given task)
        str collapseSQL = strFmt(@"UPDATE Temp SET Expand = 0,
                                   Visible = IIF(Temp.RefRecId = %1, 1, 0)
                                FROM %2 AS Temp
                                INNER JOIN ProjTableSorting AS Sort ON
                                    Sort.Partition = %3 AND
                                    Sort.DataAreaId = '%4' AND
                                    Sort.RecId = Temp.RefSortRecId",
                                _projToCollapse.RecId,
                                _tempTablePhysicalName,
                                currentPartition,
                                currentCompany);

        // Build up a predicate for filtering things to within the given hierarchy
        for (int i = 1; i <= _projToCollapseSortingRecord.ProjHierarchyLevel; ++i)
        {
            int hierarchyLevelValue = _projToCollapseSortingRecord.getFieldValue(strFmt('HierarchyLevel%1', i));
            collapseSQL += strFmt(' AND Sort.HierarchyLevel%1 = %2', i, hierarchyLevelValue);
        }

        ProjTableFormHierarchyGridHelper::executeSQLStatement(collapseSQL, SqlParams::create());
    }

]]></Source>
			</Method>
			<Method>
				<Name>expandProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Expand project by updating Expand and Visible fields in <c>ProjHierarchyTemp</c> table.
    /// </summary>
    /// <param name = "_projToExpand"><c>ProjTable</c> record of project to expand.</param>
    /// <param name = "_projToExpandSortingRecord"><c>ProjTableSorting</c> record of project to expand.</param>
    /// <param name = "_tempTablePhysicalName">Physical name of the temp table that stores the state of grid.</param>
    /// <remarks>
    /// Uses direct SQL for better performance as we need this operation to be quick.
    /// </remarks>
    [Hookable(false)]
    public static void expandProject(
        ProjTable _projToExpand,
        ProjTableSorting _projToExpandSortingRecord,
        str _tempTablePhysicalName)
    {
        if (_projToExpandSortingRecord.EndNode)
        {
            return;
        }

        Partition currentPartition = getCurrentPartitionRecId();
        DataAreaId currentCompany = curExt();

        // Construct a query to mark the given task as expanded
        str expandTaskSQL = strFmt(@"UPDATE Temp SET
                                        Expand = 1
                                    FROM %1 AS Temp
                                    WHERE
                                        Temp.RefRecId = %2;",
                                    _tempTablePhysicalName,
                                    _projToExpand.RecId);

        str makeChildrenVisibleSQL = strFmt(@"UPDATE Temp Set
                                                Visible = 1
                                            FROM %1 AS Temp
                                            INNER JOIN ProjTable AS Proj ON
                                                Proj.Partition = %2 AND
                                                Proj.DataAreaId = '%3' AND
                                                Proj.RecId = Temp.RefRecId
                                            WHERE Proj.Partition = %2 AND
                                                Proj.DataAreaId = '%3' AND
                                                Proj.ParentId = '%4';",
                                            _tempTablePhysicalName,
                                            currentPartition,
                                            currentCompany,
                                            _projToExpand.ProjId);

        ProjTableFormHierarchyGridHelper::executeSQLStatement(expandTaskSQL + makeChildrenVisibleSQL, SqlParams::create());
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeSQLStatement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the given string SQL statement.
    /// </summary>
    /// <param name = "_statement">SQL statement to execute.</param>
    [Hookable(false)]
    private static void executeSQLStatement(
        str _statement,
        Map _paramMap = null)
    {
        ttsbegin;
        Connection userConnection = new Connection();
        Statement stmt = userConnection.createStatement();
        new SqlStatementExecutePermission(_statement).assert();
        stmt.executeUpdateWithParameters(_statement, _paramMap);
        CodeAccessPermission::revertAssert();
        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>