<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionTenderTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionTenderTransfer</c> class provides the functionality to transfer transactions between tender types.
/// </summary>
internal final class RetailTransactionTenderTransfer extends RunBaseBatch implements BatchRetryable
{
    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        fromTenderTypeId,
        toTenderTypeId,
        channel,
        store,
        dataAreaId
    #ENDMACRO

    internal RetailStoreTenderTypeTable retailStoreTenderTypeTable;
    internal RetailChannelRecId channel;
    internal RetailStoreId store;
    internal DataAreaId dataAreaId;

    internal DialogField dialogFromTenderTypeId;
    internal DialogField dialogToTenderTypeId;

    internal RetailStoreTenderTypeId fromTenderTypeId;
    internal RetailStoreTenderTypeId toTenderTypeId;

    private const int MaxRetryAttempts = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static RetailTransactionTenderTransfer construct()
    {
        return new RetailTransactionTenderTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    internal static void main(Args _args)
    {
        RetailTransactionTenderTransfer retailTransactionTransfer = RetailTransactionTenderTransfer::construct();
        retailTransactionTransfer.parmRecord(_args.record() as RetailStoreTenderTypeTable);
        
        //if user presses "OK", run
        if(retailTransactionTransfer.prompt())
        {
            retailTransactionTransfer.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecord</Name>
				<Source><![CDATA[
    internal RetailStoreTenderTypeTable parmRecord(RetailStoreTenderTypeTable _record)
    {
        this.retailStoreTenderTypeTable = _record;
        return this.retailStoreTenderTypeTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public void run()
    {
        this.performTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>performTransfer</Name>
				<Source><![CDATA[
    private void performTransfer()
    {
        RetailTransactionPaymentTrans retailTransactionPaymentTrans;
        MCRCustPaymTable mcrCustPaymTable;
        RetailStatementLine retailStatementLine;
        RetailStatementTrans retailStatementTrans;

        RetailCreditCardAuthTrans retailCreditCardAuthTrans;
        CreditCardAuthTrans creditCardAuthTrans;
        MCRCustPaymTable mcrCustPaymTableJoin;

        CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

        try
        {
            changeCompany(dataAreaId)
            {
                ttsBegin;
                update_recordset retailTransactionPaymentTrans
                    setting tenderType = this.toTenderTypeId
                    where retailTransactionPaymentTrans.Channel == channel
                    && retailTransactionPaymentTrans.tenderType == this.fromTenderTypeId;

                update_recordset mcrCustPaymTable
                    setting tenderTypeId = this.toTenderTypeId
                    where mcrCustPaymTable.Channel == channel
                    && mcrCustPaymTable.tenderTypeId == this.fromTenderTypeId;

                update_recordset retailStatementLine
                    setting tenderTypeId = this.toTenderTypeId
                    where retailStatementLine.storeId == store
                    && retailStatementLine.tenderTypeId == this.fromTenderTypeId;

                update_recordset retailStatementTrans
                    setting tenderTypeId = this.toTenderTypeId
                    where retailStatementTrans.storeId == store
                    && retailStatementTrans.tenderTypeId == this.fromTenderTypeId;

                update_recordset retailCreditCardAuthTrans
                    setting tenderTypeId = this.toTenderTypeId
                    where retailCreditCardAuthTrans.tenderTypeId == this.fromTenderTypeId
                    join creditCardAuthTrans
                    where retailCreditCardAuthTrans.CreditCardAuthTrans == creditCardAuthTrans.RecId
                    join mcrCustPaymTableJoin
                    where creditCardAuthTrans.McrPaymRecId == mcrCustPaymTableJoin.RecId;
                ttsCommit;
            }

            eventSource.EventWritePaymentsTenderTransferSuccess(channel, this.fromTenderTypeId, this.toTenderTypeId, this.currentBatch != null ? this.currentBatch.BatchJobId : 0);
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= MaxRetryAttempts)
            {
                eventSource.EventWritePaymentsTenderTransferError(channel, this.fromTenderTypeId, this.toTenderTypeId, "Deadlock", this.currentBatch != null ? this.currentBatch.BatchJobId : 0);
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (xSession::currentRetryCount() >= MaxRetryAttempts)
            {
                eventSource.EventWritePaymentsTenderTransferError(channel, this.fromTenderTypeId, this.toTenderTypeId, "Conflict", this.currentBatch != null ? this.currentBatch.BatchJobId : 0);
            }
            else
            {
                retry;
            }
        }
        catch
        {
            eventSource.EventWritePaymentsTenderTransferError(channel, this.fromTenderTypeId, this.toTenderTypeId, strMin(), this.currentBatch != null ? this.currentBatch.BatchJobId : 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupByChannel</Name>
				<Source><![CDATA[
    internal void lookupByChannel(FormStringControl _stringControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(RetailStoreTenderTypeTable), _stringControl);
        sysTableLookup.addLookupfield(fieldNum(RetailStoreTenderTypeTable, tenderTypeId));
        sysTableLookup.addLookupfield(fieldNum(RetailStoreTenderTypeTable, name));

        Query query = new Query();
        QueryBuildDataSource qbds_RetailStoreTenderTypeTable = query.addDataSource(tableNum(RetailStoreTenderTypeTable));
        qbds_RetailStoreTenderTypeTable.addRange(fieldNum(RetailStoreTenderTypeTable, Channel)).value(any2Str(this.channel));

        sysTableLookup.parmQuery(query);
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public Object dialog()
    {
        DialogRunbase dialogRunbase = new DialogRunbase("@Retail:RetailTransactionTenderTransfer", this);

        DialogGroup dialogGroupBase = dialogRunbase.addGroup(strMin());
        dialogGroupBase.frameType(FormFrameType::None);
        dialogGroupBase.columns(2);

        dialogFromTenderTypeId = dialogRunbase.addField(extendedTypeStr(RetailStoreTenderTypeId), "@Retail:RetailTransactionTenderTransferFromParameter", "@Retail:RetailTransactionTenderTransferFromParameterHelp");
        dialogToTenderTypeId = dialogRunbase.addField(extendedTypeStr(RetailStoreTenderTypeId), "@Retail:RetailTransactionTenderTransferToParameter", "@Retail:RetailTransactionTenderTransferToParameterHelp");

        channel = retailStoreTenderTypeTable.Channel;
        store = RetailStoreTable::findRecId(channel).StoreNumber;
        dataAreaId = retailStoreTenderTypeTable.DataAreaId;

        dialogFromTenderTypeId.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(RetailTransactionTenderTransfer, lookupByChannel), this);
        dialogToTenderTypeId.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(RetailTransactionTenderTransfer, lookupByChannel), this);

        return dialogRunbase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public boolean getFromDialog()
    {
        fromTenderTypeId = dialogFromTenderTypeId.value();
        toTenderTypeId = dialogToTenderTypeId.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public boolean validate(Object _object = null)
    {
        boolean isValid = super();

        if (isValid)
        {
            //if the channel is empty
            if(!channel)
            {
                isValid = checkFailed(strFmt("@Retail:RetailTransactionTenderTransferNoChannel"));
            }

            //if trying to transfer to the same tender type
            else if(fromTenderTypeId == toTenderTypeId)
            {
                isValid = checkFailed(strFmt("@Retail:RetailTransactionTenderTransferSameTenderType"));
            }

            //if "from" tender type isn't valid
            else if(!this.tenderTypeValid(fromTenderTypeId))
            {
                isValid = checkFailed(strFmt("@Retail:RetailTransactionTenderTransferFromInvalid"));
            }

            //if "to" tender type isn't valid
            else if(!this.tenderTypeValid(toTenderTypeId))
            {
                isValid = checkFailed(strFmt("@Retail:RetailTransactionTenderTransferToInvalid"));
            }

            //if there are no transactions to transfer
            else if(!this.hasTransactionsToTransfer())
            {
                isValid = checkFailed(strFmt("@Retail:RetailTransactionTenderTransferNoTransactions"));
            }

            //if cannot transfer
            else if(!this.isTransferValid())
            {
                isValid = checkFailed(strFmt("@Retail:RetailTransactionTenderTransferInvalidTransfer"));
            }

            //if not all records exist
            else if(!this.recordsExist())
            {
                isValid = checkFailed(strFmt("@Retail:RetailTransactionTenderTransferNonexistentRecords"));
            }

            //if user decides not to transfer
            else if (Box::yesNo(strFmt("@Retail:RetailTransactionTenderTransferConfirmation"), DialogButton::No, "@Retail:RetailTransactionTenderTransferConfirm", "@Retail:RetailTransactionTenderTransferConfirmHelp") == DialogButton::No)
            {
                isValid = checkFailed("@Retail:RetailTransactionTenderTransferCancelTransfer");
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tenderTypeValid</Name>
				<Source><![CDATA[
    private boolean tenderTypeValid(RetailStoreTenderTypeId _curTenderType)
    {
        RetailStoreTenderTypeTable retailStoreTenderTypeTableValid;

        select firstonly RecId from retailStoreTenderTypeTableValid
            where retailStoreTenderTypeTableValid.tenderTypeId == _curTenderType
            && retailStoreTenderTypeTableValid.Channel == channel;

        return retailStoreTenderTypeTableValid.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasTransactionsToTransfer</Name>
				<Source><![CDATA[
    private boolean hasTransactionsToTransfer()
    {
        RetailTransactionPaymentTrans retailTransactionPaymentTrans;

        select firstonly RecId from retailTransactionPaymentTrans
            where retailTransactionPaymentTrans.tenderType == fromTenderTypeId
            && retailTransactionPaymentTrans.store == store;

        return retailTransactionPaymentTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransferValid</Name>
				<Source><![CDATA[
    private boolean isTransferValid()
    {
        RetailTenderTypeTable retailTenderTypeTableFrom;
        RetailTenderTypeTable retailTenderTypeTableTo;
        boolean canTransfer = true;

        //get "from" tenderTypeId's tender type (ex: cards)
        select firstonly defaultFunction from retailTenderTypeTableFrom
               where retailTenderTypeTableFrom.tenderTypeId == this.fromTenderTypeId;

        //get "to" tenderTypeId's tender type
        select firstonly defaultFunction from retailTenderTypeTableTo
               where retailTenderTypeTableTo.tenderTypeId == this.toTenderTypeId;

        //if the tender types aren't the same
        if(retailTenderTypeTableFrom.defaultFunction != retailTenderTypeTableTo.defaultFunction)
        {
            canTransfer = false;
        }

        else if(retailTenderTypeTableFrom.defaultFunction == RetailTenderFunction::Card
            && retailTenderTypeTableTo.defaultFunction == RetailTenderFunction::Card)
        {
            //if both of their tender types are cards

            RetailTransactionPaymentTrans allTransactions;
            RetailStoreTenderTypeCardTable toCard;

            //check if there's a transaction that cannot be transferred (ex: transaction is of type VISA, and "to" doesn't have a VISA card)
            select firstonly RecId from allTransactions
                where allTransactions.tenderType == fromTenderTypeId
                && allTransactions.store == store
                notexists join toCard
                where toCard.tenderTypeId == this.toTenderTypeId
                && toCard.cardTypeId == allTransactions.cardTypeId;

            //if a transaction cannot be transferred to the destination tender type
            if(allTransactions.RecId != 0)
            {
                canTransfer = false;
            }
        }

        return canTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recordsExist</Name>
				<Source><![CDATA[
    private boolean recordsExist()
    {
        RetailTransactionPaymentTrans retailTransactionPaymentTrans;
        MCRCustPaymTable mcrCustPaymTable;
        
        RetailCreditCardAuthTrans retailCreditCardAuthTrans;
        CreditCardAuthTrans creditCardAuthTrans;
        MCRCustPaymTable mcrCustPaymTableJoin;

        select retailTransactionPaymentTrans
            where retailTransactionPaymentTrans.Channel == channel
            && retailTransactionPaymentTrans.tenderType == this.fromTenderTypeId;

        select mcrCustPaymTable
            where mcrCustPaymTable.Channel == channel
            && mcrCustPaymTable.tenderTypeId == this.fromTenderTypeId;

        select retailCreditCardAuthTrans
            where retailCreditCardAuthTrans.tenderTypeId == this.fromTenderTypeId
            join creditCardAuthTrans
            where retailCreditCardAuthTrans.CreditCardAuthTrans == creditCardAuthTrans.RecId
            join mcrCustPaymTableJoin
            where creditCardAuthTrans.McrPaymRecId == mcrCustPaymTableJoin.RecId;

        return retailTransactionPaymentTrans.RecId != 0 && mcrCustPaymTable.RecId != 0 && retailCreditCardAuthTrans.RecId != 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public boolean unpack(container _packed)
    {
        Version version = RunBase::getVersion(_packed);

        switch (version)
        {
            case version:
                [version, #CurrentList] = _packed;
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    public static ClassDescription description()
    {
        return "@Retail:RetailTransactionTenderTransfer";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    [Wrappable(false)]
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>