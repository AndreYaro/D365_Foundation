<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventBlockingTableType_InventoryStatus</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventBlockingTableType_InventoryStatus</c> class generates blocking transactions based on the inventory status dimension.
/// </summary>
[InventBlockingTypeFactory(InventBlockingType::InventoryStatus)]
class InventBlockingTableType_InventoryStatus extends InventBlockingTableType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowUnreservePhysicalReservedOnly</Name>
				<Source><![CDATA[
    public boolean allowUnreservePhysicalReservedOnly()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeDeletedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory blocking can be deleted by user.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean canBeDeletedByUser()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updated</Name>
				<Source><![CDATA[
    public void updated(InventBlocking _inventBlockingOrig)
    {
        super(_inventBlockingOrig);

        inventBlocking.SkipUnreservation = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeEditedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory blocking can be edited by user.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean canBeEditedByUser()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canExpectedReceiptBeDeletedByUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the expected receipt field value on the inventory blocking can be edited by user.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    public boolean canExpectedReceiptBeDeletedByUser()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventUpd_Reservation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>InventUpd_Reservation</c> class.
    /// </summary>
    /// <returns>
    ///     Returns a new instance of the <c>InventUpd_Reservation</c> class.
    ///  </returns>
    protected InventUpd_Reservation inventUpd_Reservation()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBlockedPhysically</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the inventory should be blocked physically.
    /// </summary>
    /// <returns>
    /// Always returns <c>NoYes::No</c>.
    /// </returns>
    public NoYes mustBeBlockedPhysically()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustClearAllBelowStatus</Name>
				<Source><![CDATA[
    public boolean mustClearAllBelowStatus()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that receipts are not expected for blocking transactions tied to inventory status.
    /// </summary>
    /// <param name="_fieldName">
    /// The field to validate.
    /// </param>
    /// <param name="_arrayIndex">
    /// The array index of the field to validate; optional.
    /// </param>
    /// <returns>
    /// True if receipts are not expected.
    /// </returns>
    public boolean validateFieldValue(FieldName _fieldName, int _arrayIndex = 1)
    {
        boolean ret = super(_fieldName, _arrayIndex);

        switch (_fieldName)
        {
            case fieldStr(InventBlocking, ExpectReceipt):
                if (inventBlocking.ExpectReceipt == NoYes::Yes)
                {
                    ret = checkFailed("@WAX4790");
                }
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static InventBlockingTableType_InventoryStatus construct()
    {
        return new InventBlockingTableType_InventoryStatus();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>