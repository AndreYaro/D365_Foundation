<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesFormLetter_Confirm</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::Confirmation)]
[SysOperationJournaledParametersAttribute(true)]
class       SalesFormLetter_Confirm
extends     SalesFormLetter implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    /// <summary>
    /// Microsoft internal use only.
    /// </summary>
    /// <returns>
    /// A <c>ClassDescription</c> value.
    /// </returns>
    public ClassDescription caption()
    {
        return SalesFormLetter_Confirm::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::Confirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>SalesFormLetter_Confirm</c> class.
    /// </summary>
    /// <param name="_className">
    /// The class name of the service class.
    /// </param>
    /// <param name="_methodName">
    /// The method name of the service operation.
    /// </param>
    /// <param name="_executionMode">
    /// The execution mode to use when executing the service operation.
    /// </param>
    /// <remarks>
    /// parm methods exist for each constructor parameter. The
    /// <c>SysOperationServiceController.initializeFromArgs</c> method can also be used to initialize a
    /// controller. If those options for initialization are used the default values can be used in the
    /// constructor.
    /// </remarks>
    void  new(
        IdentifierName _className = classStr(FormletterService),
        IdentifierName _methodName= methodStr(FormletterService, postSalesOrderConfirmation),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShowDialog</Name>
				<Source><![CDATA[
    public boolean parmShowDialog(boolean _showDialog = showDialog)
    {
        if (prmIsDefault(_showDialog) && this.parmCallerMenuItem() == menuitemActionStr(SalesFormLetter_Confirm))
        {
            return false;
        }

        return super(_showDialog);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for sales order confirmation.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::SalesOrderConfirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetParmListCommonCS</Name>
				<Source><![CDATA[
    public void resetParmListCommonCS()
    {
        super();

        lockSalesUpdate = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean  unpack(container  _packedClass)
    {
        Integer  version = conPeek(_packedClass,1);
        Integer  dlvDays;
        Code     dlvSpec;

        #LOCALMACRO.ParmList_v25sp2
            parmId,
            salesParmUpdate.proforma,
            salesParmUpdate.specQty,
            dlvSpec,
            dlvDays,
            printout,
            printFormletter,
            printerSettingsFormletter
        #ENDMACRO

        #LOCALMACRO.ParmList_v30
            parmId,
            salesParmUpdate,
            printout,
            printFormletter,
            printerSettingsFormletter
        #ENDMACRO

        #LOCALMACRO.ParmList_v401
            parmId,
            salesParmUpdate,
            printout,
            printFormletter,
            printerSettingsFormletter,
            printerSettingsFormletterCopy
        #ENDMACRO

        #LOCALMACRO.ParmList_v5
            parmId,
            salesParmUpdate,
            printout,
            printFormletter,
            printerSettingsFormletter,
            printerSettingsFormletterCopy,
            usePrintManagement
        #ENDMACRO

        ParmId          parmId;
        SalesParmUpdate salesParmUpdate;
        Printout        printout;
        NoYes           printFormletter;
        container       printerSettingsFormletter;
        container       printerSettingsFormletterCopy;
        boolean         usePrintManagement;

        switch (version)
        {
            case 6+1 /*case is old currentversion + old parentversion*/ :
                [version, #parmList_v5] = _packedClass;
                this.setNewContract(SalesFormLetterContract::construct(DocumentStatus::Confirmation));

                contractIsFromPreviousVersion = true;
                this.parmId(parmId);
                this.salesParmUpdate(salesParmUpdate);
                this.printout(printout);
                this.printFormLetter(printFormletter);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletter, PrintSetupOriginalCopy::Original);
                this.updatePrinterSettingsFormLetter(printerSettingsFormletterCopy, PrintSetupOriginalCopy::Copy);
                this.usePrintManagement(usePrintManagement);
                break;

            case 5                  :   [version, #ParmList_v401]               = _packedClass;
                                        break;

            case 4                  :   [version, #ParmList_v30]                = _packedClass;
                                        printerSettingsFormletterCopy           = printerSettingsFormletter;
                                        break;

            case 2                  :   [version, #ParmList_v25sp2]             = _packedClass;
                                        break;

            default :
                                        return super(_packedClass);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return this.checkRunInNewSession();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunAsRealAsync</Name>
				<Source><![CDATA[
    public boolean canRunAsRealAsync()
    {
        return SalesFormLetterConfirmRealAsyncFlight::instance().isEnabled()
            && !this.proforma();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSysRealAsyncOperationId</Name>
				<Source><![CDATA[
    public SysRealAsyncOperationId getSysRealAsyncOperationId()
    {
        Common sourceTable = this.parmSourceTable();
        str operationId;

        if (sourceTable && sourceTable is SalesTable)
        {
            SalesTable salesTable = sourceTable;
            operationId = salesTable.SalesId;
        }
        else
        {
            operationId = this.parmId();
        }

        return operationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    private static ClassDescription  description()
    {
        return "@SYS16351";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newConfirm</Name>
				<Source><![CDATA[
    [SysObsolete('Use SalesFormLetter::construct() instead.', false, 31\05\2017)]
    static public SalesFormLetter_Confirm newConfirm(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postSalesOrderConfirmation),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        return SalesFormLetter::construct(DocumentStatus::Confirmation, _className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeShowLink</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean errorMessageHelpScopeShowLink()
    {
        if (SalesFormLetterErrorMessageHelpScopeConfirmFlight::instance().isEnabled())
        {
            return super();
        }

        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>