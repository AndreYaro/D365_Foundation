<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResRequestDocumentLifecycle</Name>
	<SourceCode>
		<Declaration><![CDATA[
//-----------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//-----------------------------------------------------------------------------
/// <summary>
/// ResRequest data entity state machine.
/// </summary>
[SysObsolete('Resource Request Workflow is deprecated', false, 5\6\2023)]
public final class ResRequestDocumentLifecycle extends StateMachine
{
	#define.GraphSize(4)
	boolean graph[#GraphSize * #GraphSize];
	str transitionDescriptionGraph[#GraphSize * #GraphSize];
	str transitionLabelGraph[#GraphSize * #GraphSize];
	str description;
	str label;
	Set finalStates;
	Map indexesToStates;
	Map stateNamesToStates;
	Map statesToDescriptions;
	Map statesToIndexes;
	Map statesToLabels;
	ResRequest dataEntity;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Enter</Name>
				<Source><![CDATA[
    /// <summary>
/// Occures when a data entity instance state is entered.
/// </summary>
/// <param name="_eventArgs">
/// The enter event arguments.
/// </param>
delegate void Enter(ResRequestDocumentLifecycleEnterEventArgs _eventArgs)
{
}

]]></Source>
			</Method>
			<Method>
				<Name>Exit</Name>
				<Source><![CDATA[
    /// <summary>
/// Occures when a data entity instance state is exited.
/// </summary>
/// <param name="_eventArgs">
/// The exit event arguments.
/// </param>
delegate void Exit(ResRequestDocumentLifecycleExitEventArgs _eventArgs)
{
}

]]></Source>
			</Method>
			<Method>
				<Name>Transition</Name>
				<Source><![CDATA[
    /// <summary>
/// Occures when a data entity instance state is transitioned.
/// </summary>
/// <param name="_eventArgs">
/// The transition event arguments.
/// </param>
delegate void Transition(ResRequestDocumentLifecycleTransitionEventArgs _eventArgs)
{
}

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static main supports action menu binding
    /// </summary>
    /// <param name="_args">
    /// The action menu Args instance.
    /// </param>
    public static void main(Args _args)
    {
        boolean submit, submitSucceed;

	    if (!_args.record())
	    {
		    throw error(strfmt('@SYS:StateMachineTableSaveRequired', classStr(ResRequestDocumentLifecycle), staticmethodstr(ResRequestDocumentLifecycle, main), tableid2name(_args.record().TableId)));
	    }

	    if (!(_args.record() is ResRequest))
	    {
		    throw error(strfmt('@StateMachine:InvalidDataEntityType', tableStr(ResRequest), tableid2name(_args.record().TableId)));
	    }

        ResRequestDocumentLifecycle stateMachine = new ResRequestDocumentLifecycle(_args.record());
        ResApprovalStatus enterState = stateMachine.GetStateFromStateName(_args.stateMachineTransitionTo());

        ResApprovalStatus exitState = stateMachine.StateGetter();

        if (enterState == ResApprovalStatus::InReview && exitState == ResApprovalStatus::Draft)
        {
            // Submit scenario and launch the submit dialog form.
            submit = true;
            submitSucceed = ResRequestHelper::submitWorkflow(_args.record().RecId, workflowtypestr(ResRequest));
        }

        ttsbegin;
        if ((submit && submitSucceed) || (!submit))
        {
            stateMachine.TransitionTo(enterState);
	        if (_args.record().datasource())
	        {
		        _args.record().datasource().write();
	        }
	        else
	        {
		        _args.record().update();
	        }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
/// ResRequestDocumentLifecycle constructor
/// </summary>
/// <param name="_dataEntity">
/// The data entity instance.
/// </param>
/// <remarks>
/// Creates an instance of ResRequestDocumentLifecycle.
/// </remarks>
public void new(ResRequest _dataEntity)
{
	super('DocumentLifecycle');
	dataEntity = _dataEntity;
	this.BuildGraph();
}

]]></Source>
			</Method>
			<Method>
				<Name>DescriptionId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the state machine description label id.
/// </summary>
/// <returns>
/// The state machine description label id.
/// </returns>
public LabelId DescriptionId()
{
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>InitialState</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the initial state.
/// </summary>
/// <returns>
/// The initial state of the state machine.
/// </returns>
public ResApprovalStatus InitialState()
{
	return this.InitialStateGetter();
}

]]></Source>
			</Method>
			<Method>
				<Name>IsFinalState</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets a value indicating whether the input enum value is a final state.
/// </summary>
/// <param name="_state">
/// The enum value.
/// </param>
/// <returns>
/// true if the enum value is a final state; otherwise, false.
/// </returns>
public boolean IsFinalState(ResApprovalStatus _state)
{
	return finalStates.in(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>IsState</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets a value indicating whether the input enum value is a state.
/// </summary>
/// <param name="_state">
/// The enum value.
/// </param>
/// <returns>
/// true if the enum value is a state; otherwise, false.
/// </returns>
public boolean IsState(ResApprovalStatus _state)
{
	return statesToIndexes.exists(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>IsValidTransition</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets a value indicating whether the transition from the exit state to the enter state is valid.
/// </summary>
/// <param name="_exitState">
/// The exit state.
/// </param>
/// <param name="_enterState">
/// The exit state.
/// </param>
/// <returns>
/// true if the transition from the exit state to the enter state is valid; otherwise, false.
/// </returns>
public boolean IsValidTransition(ResApprovalStatus _exitState, ResApprovalStatus _enterState)
{
	if (this.IsState(_exitState) && this.IsState(_enterState))
	{
		return this.IsTransitionValid(_exitState, _enterState);
	}
	return false;
}

]]></Source>
			</Method>
			<Method>
				<Name>GetStateDescriptionLabelId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the state description label id for the input state.
/// </summary>
/// <param name="_state">
/// The state value.
/// </param>
/// <returns>
/// The description label id if the state exists, otherwise an empty string.
/// </returns>
public LabelId GetStateDescriptionLabelId(ResApprovalStatus _state)
{
	if (this.IsState(_state))
	{
		return statesToDescriptions.lookup(_state);
	}
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>GetStateFromStateName</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the state from the state.
/// </summary>
/// <param name="_stateName">
/// The state name.
/// </param>
/// <returns>
/// The state if the state name exists, otherwise it throws value not found exception.
/// </returns>
public ResApprovalStatus GetStateFromStateName(SysElementName _stateName)
{
	return stateNamesToStates.lookup(_stateName);
}

]]></Source>
			</Method>
			<Method>
				<Name>GetStateLabelId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the state label id for the input state.
/// </summary>
/// <param name="_state">
/// The state value.
/// </param>
/// <returns>
/// The label id if the state exists, otherwise an empty string.
/// </returns>
public LabelId GetStateLabelId(ResApprovalStatus _state)
{
	if (this.IsState(_state))
	{
		return statesToLabels.lookup(_state);
	}
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>GetTransitionDescriptionLabelId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the transition description label id for the input exit and enter state values.
/// </summary>
/// <param name="_exitState">
/// The exit state value.
/// </param>
/// <param name="_enterState">
/// The enter state value.
/// </param>
/// <returns>
/// The description label id if the transtion exists, otherwise an empty string.
/// </returns>
public LabelId GetTransitionDescriptionLabelId(ResApprovalStatus _exitState, ResApprovalStatus _enterState)
{
	if (this.IsState(_exitState) && this.IsState(_enterState))
	{
		return transitionDescriptionGraph[this.GetRowIndexFromState(_exitState) + this.GetColumnIndexFromState(_enterState)];
	}
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>GetTransitionLabelId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the transition label id for the input exit and enter state values.
/// </summary>
/// <param name="_exitState">
/// The exit state value.
/// </param>
/// <param name="_enterState">
/// The enter state value.
/// </param>
/// <returns>
/// The label id if the transtion exists, otherwise an empty string.
/// </returns>
public LabelId GetTransitionLabelId(ResApprovalStatus _exitState, ResApprovalStatus _enterState)
{		
	if (this.IsState(_exitState) && this.IsState(_enterState))
	{
		return transitionLabelGraph[this.GetRowIndexFromState(_exitState) + this.GetColumnIndexFromState(_enterState)];
	}
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>LabelId</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the state machine label id.
/// </summary>
/// <returns>
/// The state machine label id.
/// </returns>
public LabelId LabelId()
{
	return '';
}

]]></Source>
			</Method>
			<Method>
				<Name>NextStates</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets a list of next states for a given source state.
/// </summary>
/// <param name="_state">
/// The source state.
/// </param>
/// <returns>
/// The list of next states for the given source state.
/// </returns>
public List NextStates(ResApprovalStatus _state)
{
	List nextStates = new List(Types::Enum);
	int columnIndex;

	if (this.IsState(_state))
	{
        int rowIndex = this.GetRowIndexFromState(_state);
		for(columnIndex = 1; columnIndex <= #GraphSize; columnIndex++)
		{
			if (graph[rowIndex + columnIndex])
			{
				nextStates.addEnd(this.GetStateFromColumnIndex(columnIndex));
			}
		}
	}
	return nextStates;
}

]]></Source>
			</Method>
			<Method>
				<Name>State</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the current state of the data entity instance.
/// </summary>
/// <returns>
/// The current state of the data entity instance.
/// </returns>
public ResApprovalStatus State()
{
	return this.StateGetter();
}

]]></Source>
			</Method>
			<Method>
				<Name>DataEntity</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the data entity instance.
/// </summary>
/// <returns>
/// The data entity instance.
/// </returns>
public ResRequest DataEntity()
{
	return this.DataEntityGetter();
}

]]></Source>
			</Method>
			<Method>
				<Name>TransitionTo</Name>
				<Source><![CDATA[
    /// <summary>
/// Transitions the data entity instance to the input state.
/// </summary>
/// <param name="_state">
/// The enter state value.
/// </param>
/// <remarks>
/// InvalidOperationException is thrown when the transition from the exit state to the enter state is invalid.
/// </remarks>
public void TransitionTo(ResApprovalStatus _state)
{
	this.TransitionToState(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>InitialStateGetter</Name>
				<Source><![CDATA[
    protected int InitialStateGetter()
{
	return ResApprovalStatus::Draft;
}

]]></Source>
			</Method>
			<Method>
				<Name>InvalidStateTransitionMessage</Name>
				<Source><![CDATA[
    protected str InvalidStateTransitionMessage()
{
	return strfmt('@StateMachine:InvalidTransition',
		enum2Symbol(enumNum(ResApprovalStatus), this.ExitState()),
		enum2Symbol(enumNum(ResApprovalStatus), this.EnterState()));
}

]]></Source>
			</Method>
			<Method>
				<Name>IsTransitionValid</Name>
				<Source><![CDATA[
    protected boolean IsTransitionValid(int _exitState, int _enterState)
{
	if (this.IsState(_exitState) && this.IsState(_enterState))
	{
		return graph[this.GetRowIndexFromState(_exitState) + this.GetColumnIndexFromState(_enterState)];
	}
	return false;
}

]]></Source>
			</Method>
			<Method>
				<Name>OnEnter</Name>
				<Source><![CDATA[
    protected void OnEnter()
{
	ResRequestDocumentLifecycleEnterEventArgs eventArgs = new ResRequestDocumentLifecycleEnterEventArgs(this.DataEntity(), this.StateMachineName(), this.EnterState());
	super();
	this.Enter(eventArgs);
}

]]></Source>
			</Method>
			<Method>
				<Name>OnExit</Name>
				<Source><![CDATA[
    protected void OnExit()
{
	ResRequestDocumentLifecycleExitEventArgs eventArgs = new ResRequestDocumentLifecycleExitEventArgs(this.DataEntity(), this.StateMachineName(), this.ExitState());
	super();
	this.Exit(eventArgs);
}

]]></Source>
			</Method>
			<Method>
				<Name>OnTransition</Name>
				<Source><![CDATA[
    protected void OnTransition()
{
	ResRequestDocumentLifecycleTransitionEventArgs eventArgs = new ResRequestDocumentLifecycleTransitionEventArgs(this.DataEntity(), this.StateMachineName(), this.ExitState(), this.EnterState());
	super();
	this.Transition(eventArgs);
}

]]></Source>
			</Method>
			<Method>
				<Name>StateDescriptionLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId StateDescriptionLabelIdGetter(int _state)
{
	return this.GetStateDescriptionLabelId(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>StateGetter</Name>
				<Source><![CDATA[
    protected int StateGetter()
{
	return dataEntity.ApprovalStatus;
}

]]></Source>
			</Method>
			<Method>
				<Name>StateKindGetter</Name>
				<Source><![CDATA[
    protected StateMachineStateKind StateKindGetter(int _state)
{
	if (this.InitialState() == _state)
	{
		return StateMachineStateKind::Initial;
	}
	else if (this.IsFinalState(_state))
	{
		return StateMachineStateKind::Final;
	}
	return StateMachineStateKind::Intermediate;
}

]]></Source>
			</Method>
			<Method>
				<Name>StateLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId StateLabelIdGetter(int _state)
{
	return this.GetStateLabelId(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>StateSetter</Name>
				<Source><![CDATA[
    protected void StateSetter(int _state)
{
	dataEntity.ApprovalStatus = _state;
}

]]></Source>
			</Method>
			<Method>
				<Name>DataEntityGetter</Name>
				<Source><![CDATA[
    protected Common DataEntityGetter()
{
	return dataEntity;
}

]]></Source>
			</Method>
			<Method>
				<Name>TransitionDescriptionLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId TransitionDescriptionLabelIdGetter(int _exitState, int _enterState)
{
	return this.GetTransitionDescriptionLabelId(_exitState, _enterState);
}

]]></Source>
			</Method>
			<Method>
				<Name>TransitionLabelIdGetter</Name>
				<Source><![CDATA[
    protected LabelId TransitionLabelIdGetter(int _exitState, int _enterState)
{	
	return this.GetTransitionLabelId(_exitState, _enterState);
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildFinalStates</Name>
				<Source><![CDATA[
    private void BuildFinalStates()
{
	finalStates = new Set(Types::Enum);
	finalStates.add(ResApprovalStatus::Completed);
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildGraph</Name>
				<Source><![CDATA[
    private void BuildGraph()
{
	graph[2] = true;
	graph[7] = true;
	graph[8] = true;
	graph[10] = true;
	this.BuildTransitionDescriptionGraph();
	this.BuildTransitionLabelGraph();
	this.BuildIndexesToStates();
	this.BuildStatesToIndexes();
	this.BuildStatesToDescriptions();
	this.BuildStatesToLabels();
	this.BuildStateNamesToStates();
	this.BuildFinalStates();
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildIndexesToStates</Name>
				<Source><![CDATA[
    private void BuildIndexesToStates()
{
	indexesToStates = new Map(Types::Integer, Types::Enum);
	indexesToStates.insert(1, ResApprovalStatus::Draft);
	indexesToStates.insert(2, ResApprovalStatus::InReview);
	indexesToStates.insert(3, ResApprovalStatus::Returned);
	indexesToStates.insert(4, ResApprovalStatus::Completed);
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildStateNamesToStates</Name>
				<Source><![CDATA[
    private void BuildStateNamesToStates()
{
	stateNamesToStates = new Map(Types::String, Types::Enum);
	stateNamesToStates.insert('Draft', ResApprovalStatus::Draft);
	stateNamesToStates.insert('InReview', ResApprovalStatus::InReview);
	stateNamesToStates.insert('Returned', ResApprovalStatus::Returned);
	stateNamesToStates.insert('Completed', ResApprovalStatus::Completed);
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildStatesToDescriptions</Name>
				<Source><![CDATA[
    private void BuildStatesToDescriptions()
{
	statesToDescriptions = new Map(Types::Integer, Types::String);
	statesToDescriptions.insert(ResApprovalStatus::Draft, '');
	statesToDescriptions.insert(ResApprovalStatus::InReview, '');
	statesToDescriptions.insert(ResApprovalStatus::Returned, '');
	statesToDescriptions.insert(ResApprovalStatus::Completed, '');
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildStatesToIndexes</Name>
				<Source><![CDATA[
    private void BuildStatesToIndexes()
{
	statesToIndexes = new Map(Types::Enum, Types::Integer);
	statesToIndexes.insert(ResApprovalStatus::Draft, 1);
	statesToIndexes.insert(ResApprovalStatus::InReview, 2);
	statesToIndexes.insert(ResApprovalStatus::Returned, 3);
	statesToIndexes.insert(ResApprovalStatus::Completed, 4);
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildStatesToLabels</Name>
				<Source><![CDATA[
    private void BuildStatesToLabels()
{
	statesToLabels = new Map(Types::Integer, Types::String);
	statesToLabels.insert(ResApprovalStatus::Draft, literalStr('@Res:Draft'));
	statesToLabels.insert(ResApprovalStatus::InReview, literalStr('@Res:InReview'));
	statesToLabels.insert(ResApprovalStatus::Returned, literalStr('@Res:Returned'));
	statesToLabels.insert(ResApprovalStatus::Completed, literalStr('@Res:Completed'));
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildTransitionDescriptionGraph</Name>
				<Source><![CDATA[
    private void BuildTransitionDescriptionGraph()
{
	transitionDescriptionGraph[2] = '';
	transitionDescriptionGraph[7] = '';
	transitionDescriptionGraph[8] = '';
	transitionDescriptionGraph[10] = '';
}

]]></Source>
			</Method>
			<Method>
				<Name>BuildTransitionLabelGraph</Name>
				<Source><![CDATA[
    private void BuildTransitionLabelGraph()
{
	transitionLabelGraph[2] = literalStr('@Res:InReview');
	transitionLabelGraph[7] = '';
	transitionLabelGraph[8] = literalStr('@Res:Completed');
	transitionLabelGraph[10] = literalStr('@Res:InReview');
}

]]></Source>
			</Method>
			<Method>
				<Name>GetColumnIndexFromState</Name>
				<Source><![CDATA[
    private int GetColumnIndexFromState(int _state)
{
	return statesToIndexes.lookup(_state);
}

]]></Source>
			</Method>
			<Method>
				<Name>GetRowIndexFromState</Name>
				<Source><![CDATA[
    private int GetRowIndexFromState(int _state)
{
	return #GraphSize * (statesToIndexes.lookup(_state) - 1);
}

]]></Source>
			</Method>
			<Method>
				<Name>GetStateFromColumnIndex</Name>
				<Source><![CDATA[
    private ResApprovalStatus GetStateFromColumnIndex(int _index)
{
	return indexesToStates.lookup(_index);
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>