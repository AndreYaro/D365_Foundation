<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlBudgetTransactionDataMaintenance</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlBudgetTransactionDataMaintenance</c> class is responsible for reprocessing budget transaction data.
/// </summary>
internal static class BudgetControlBudgetTransactionDataMaintenance
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>reprocessBudgetTransactionHeader</Name>
				<Source><![CDATA[
    internal static BudgetCheckResult reprocessBudgetTransactionHeader(RecId _budgetTransactionHeaderRecId)
    {
        BudgetTransactionHeader budgetTransactionHeader = BudgetTransactionHeader::find(_budgetTransactionHeaderRecId);
        boolean isDraftCheck = budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Draft;

        ttsbegin;

        // Remove all budget data for this document so the entire document can be reprocessed correctly.
        BudgetControlBudgetTransactionBudgetSourcePopulator populator = BudgetControlBudgetTransactionBudgetSourcePopulator::construct(_budgetTransactionHeaderRecId);
        BudgetControlBudgetSourceRemover::removeBudgetSourceData(populator);

        BudgetTransactionLine budgetTransactionLine;

        if (BudgetControlBudgetTransactionDataMaintenance::isTransactionTypeEffectPositive(budgetTransactionHeader))
        {
            // Process all BudgetTransactionLine with positive amounts from largest to smallest.
            while select RecId from budgetTransactionLine
                order by budgetTransactionLine.AccountingCurrencyAmount desc
                where budgetTransactionLine.BudgetTransactionHeader == _budgetTransactionHeaderRecId
                    && budgetTransactionLine.BudgetType == BudgetType::Expense
            {
                BudgetControlBudgetTransactionProcessor::submitBudgetTransLineToCheckBudget(budgetTransactionLine.RecId, isDraftCheck);
            }
        }
        else
        {
            // Process all BudgetTransactionLine with negative amounts from smallest to largest.
            while select RecId from budgetTransactionLine
                order by budgetTransactionLine.AccountingCurrencyAmount asc
                where budgetTransactionLine.BudgetTransactionHeader == _budgetTransactionHeaderRecId
                && budgetTransactionLine.BudgetType == BudgetType::Expense
            {
                BudgetControlBudgetTransactionProcessor::submitBudgetTransLineToCheckBudget(budgetTransactionLine.RecId, isDraftCheck);
            }
        }

        ttscommit;

        return budgetTransactionHeader.getBudgetCheckResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransactionTypeEffectPositive</Name>
				<Source><![CDATA[
    internal static boolean isTransactionTypeEffectPositive(BudgetTransactionHeader _budgetTransactionHeader)
    {
        boolean isPostiveAmountForTransactionTypeIncreaseToBudget;

        switch (_budgetTransactionHeader.BudgetTransactionType)
        {
            case BudgetTransactionType::OriginalBudget,
                 BudgetTransactionType::FixedAsset,
                 BudgetTransactionType::Project,
                 BudgetTransactionType::PurchForecast,
                 BudgetTransactionType::SalesForecast,
                 BudgetTransactionType::Amendment,
                 BudgetTransactionType::CarryForwardBudget,
                 BudgetTransactionType::Transfer,
                 BudgetTransactionType::PreliminaryBudget:

                isPostiveAmountForTransactionTypeIncreaseToBudget = true;
                break;

            case BudgetTransactionType::PreEncumbrance,
                BudgetTransactionType::Encumbrance,
                BudgetTransactionType::Apportionment:

                isPostiveAmountForTransactionTypeIncreaseToBudget = false;
                break;

            default:
                // Not supported
                Debug::assert(false);
                break;
        }

        return isPostiveAmountForTransactionTypeIncreaseToBudget;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>