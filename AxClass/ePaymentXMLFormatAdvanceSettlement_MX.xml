<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ePaymentXMLFormatAdvanceSettlement_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ePaymentXMLFormatAdvanceSettlement_MX extends EPaymentXMLFormat_MX
{
    real settleCoeficient;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createCFDIRelacionadosElement</Name>
				<Source><![CDATA[
    protected XmlElement createCFDIRelacionadosElement()
    {
        XmlElement relaciaonadosElement, singleRelacionadoElement;

        EInvoiceJour_MX eInvJour;

        select firstonly eInvJour
        where eInvJour.RefTableId == payment.TableId
            && eInvJour.RefRecId == payment.RecId;

        if (!eInvJour)
        {
            throw error("@MexicoCFDIWithholding:PrepaymentSettledIsNotCFDIdocument_error");
        }

        if (!eInvJour.cfdiuuid)
        {
            throw error("@MexicoCFDIWithholding:PrepaymentSettledIsNotApproved_error");
        }

        relaciaonadosElement = this.createElement('CfdiRelacionados');

        singleRelacionadoElement = this.createElement('CfdiRelacionado');
        singleRelacionadoElement.setAttribute('UUID', eInvJour.cfdiuuid);
        relaciaonadosElement.appendChild(singleRelacionadoElement);

        relaciaonadosElement.setAttribute('TipoRelacion', '07');

        return relaciaonadosElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createComprobanteElement</Name>
				<Source><![CDATA[
    protected XmlElement createComprobanteElement()
    {
        XmlElement comprobanteElement;

        comprobanteElement = super();

        comprobanteElement.setAttribute('Moneda', XXXcurrency);
        comprobanteElement.setAttribute('FormaPago', this.getFormattedPaymentType());
        comprobanteElement.setAttribute('MetodoPago', 'PUE');
        comprobanteElement.setAttribute('TipoDeComprobante', 'I');
        comprobanteElement.setAttribute('SubTotal', this.formatXmlAmount(subtotalAmount, XXXcurrency));
        comprobanteElement.setAttribute('Total', this.formatXmlAmount(subtotalAmount + totalNegativeTaxAmount + totalPositiveTaxAmount, XXXcurrency));

        return comprobanteElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createConceptoElement</Name>
				<Source><![CDATA[
    protected XmlElement createConceptoElement(Common _conceptoSource = null)
    {
        XmlElement conceptoElement;
        MarkupTrans markupTrans;
        CustInvoiceTrans custInvoiceTrans;
        AmountCur settledAmount;

        conceptoElement = super(_conceptoSource);

        switch (_conceptoSource.TableId)
        {
            case tableNum(CustInvoiceTrans):

                custInvoiceTrans = _conceptoSource;
                settledAmount = CurrencyExchangeHelper::amount(settleCoeficient * custInvoiceTrans.LineAmount, custInvoiceTrans.CurrencyCode);
                subtotalAmount += custInvoiceTrans.LineAmount;

                conceptoElement.setAttribute('Cantidad', num2str(custInvoiceTrans.Qty, 0, 0, 1, 0));
                conceptoElement.setAttribute('Descripcion', custInvoiceTrans.Name + '; CFDI por remanente de un anticipo');
                conceptoElement.setAttribute('Importe', this.formatXmlAmount(custInvoiceTrans.LineAmount));
                conceptoElement.setAttribute('ValorUnitario', this.formatXmlAmount(custInvoiceTrans.LineAmount / custInvoiceTrans.Qty));
                conceptoElement.setAttribute('Descuento', this.formatXmlAmount(settledAmount));
                break;
            case tableNum(MarkupTrans):
                markupTrans = _conceptoSource;
                settledAmount = CurrencyExchangeHelper::amount(settleCoeficient * markupTrans.CalculatedAmount, markupTrans.CurrencyCode);
                subtotalAmount += markupTrans.CalculatedAmount;

                conceptoElement.setAttribute('Cantidad', '1');
                conceptoElement.setAttribute('Descripcion', (markupTrans.MarkupCode ? markupTrans.MarkupCode : markupTrans.markupTable().Txt) + '; CFDI por remanente de un anticipo');
                conceptoElement.setAttribute('Importe', this.formatXmlAmount(markupTrans.CalculatedAmount));
                conceptoElement.setAttribute('ValorUnitario', this.formatXmlAmount(markupTrans.CalculatedAmount));
                conceptoElement.setAttribute('Descuento', this.formatXmlAmount(settledAmount));
                break;
        }

        return conceptoElement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchTaxes</Name>
				<Source><![CDATA[
    protected void fetchTaxes(Common _taxSource)
    {
        TaxTable taxTable;
        TaxTrans taxTrans;
        List positiveTaxesList;
        List negativeTaxesList;

        positiveTaxesList = new List(Types::Record);
        negativeTaxesList = new List(Types::Record);

        while select taxTrans
        where taxTrans.SourceRecId == _taxSource.RecId
            && taxTrans.SourceTableId == _taxSource.TableId
        join NegativeTax from taxTable
        where taxTable.TaxCode == taxTrans.TaxCode
        {
            if (taxTable.NegativeTax)
            {
                positiveTaxesList.addEnd(taxTrans);
            }
            else
            {
                negativeTaxesList.addEnd(taxTrans);
            }
        }

        conceptoTaxesMap.insert([_taxSource.RecId, 'positive'], positiveTaxesList);
        conceptoTaxesMap.insert([_taxSource.RecId, 'negative'], negativeTaxesList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConceptoSourceList</Name>
				<Source><![CDATA[
    protected List getConceptoSourceList()
    {
        CustTrans invoiceCustTrans;
        CustInvoiceTrans custInvoiceTrans;
        CustInvoiceJour custInvoiceJour;
        List conceptoSourceList;
        MarkupTrans markupTrans;
        Set custInvoiceTransRecIdSet = new Set(Types::Int64);

        conceptoSourceList = new List(Types::Record);
        invoiceCustTrans = CustTrans::findByCompany(paymentSettlement.OffsetCompany, paymentSettlement.OffsetRecid);
        custInvoiceJour = invoiceCustTrans.custInvoiceJour_RU();

        changecompany(invoiceCustTrans.DataAreaId)
        {
            while select custInvoiceTrans
            where custInvoiceTrans.SalesId == custInvoiceJour.SalesId
               && custInvoiceTrans.InvoiceId == custInvoiceJour.InvoiceId
               && custInvoiceTrans.InvoiceDate == custInvoiceJour.InvoiceDate
               && custInvoiceTrans.NumberSequenceGroup == custInvoiceJour.NumberSequenceGroup
            outer join markupTrans
            where markupTrans.TransTableId == custInvoiceTrans.TableId
               && markupTrans.TransRecId == custInvoiceTrans.RecId
            {
                if (!custInvoiceTransRecIdSet.in(custInvoiceTrans.RecId))
                {
                    conceptoSourceList.addEnd(custInvoiceTrans);
                    custInvoiceTransRecIdSet.add(custInvoiceTrans.RecId);
                }

                if (markupTrans)
                {
                    conceptoSourceList.addEnd(markupTrans);
                }
            }

            while select markupTrans
            where markupTrans.TransTableId == custInvoiceJour.TableId
               && markupTrans.TransRecId == custInvoiceJour.RecId
            {
                conceptoSourceList.addEnd(markupTrans);
            }
        }

        return conceptoSourceList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(CustTrans _payment, CustSettlement _paymentSettlement)
    {
        super(_payment,_paymentSettlement);

        CustTrans invoiceCustTrans = CustTrans::findByCompany(_paymentSettlement.OffsetCompany, _paymentSettlement.OffsetRecid);
        settleCoeficient = invoiceCustTrans.AmountCur ? paymentSettlement.SettleAmountCur / invoiceCustTrans.AmountCur : 0;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>