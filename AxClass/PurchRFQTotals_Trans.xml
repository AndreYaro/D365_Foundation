<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchRFQTotals_Trans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchRFQTotals_Trans
extends PurchRFQTotals
{
    PurchRFQTableMap   purchRFQTableMap;
    PurchRFQLineMap    purchRFQLineMap;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashDiscCode</Name>
				<Source><![CDATA[
    CashDiscCode cashDiscCode()
    {
        return purchRFQTableMap.CashDisc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructCalcTax</Name>
				<Source><![CDATA[
    protected TradeCalcTax constructCalcTax()
    {
        PurchCalcTax_RFQ    purchCalcTax = PurchCalcTax::construct(purchRFQTableMap);
        purchCalcTax.setSpecQtyRFQ(specQty);
        return purchCalcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the currency code of the record in the <c>Currency</c> table.
    /// </summary>
    /// <returns>
    /// The currency code of the record in the <c>Currency</c> table.
    /// </returns>
    public CurrencyCode currencyCode()
    {
        return purchRFQTableMap.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>discPercent</Name>
				<Source><![CDATA[
    protected DiscPct  discPercent()
    {
        return purchRFQTableMap.DiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecordSortedListLine</Name>
				<Source><![CDATA[
    protected void initRecordSortedListLine()
    {
        recordSortedListLine = new RecordSortedList(tablenum(PurchRFQLine));
        recordSortedListLine.sortOrder      (fieldnum(PurchRFQLine, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransId</Name>
				<Source><![CDATA[
    protected InventTransId inventTransId()
    {
        return purchRFQLineMap.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    VendAccount invoiceAccount()
    {
        return purchRFQTableMap.VendAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    protected TransDate invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryBased</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether the order line is category based.
    /// </summary>
    /// <returns>
    /// true if the order line is category based; otherwise, false.
    /// </returns>
    protected boolean isCategoryBased()
    {
        switch (purchRFQLineMap.TableId)
        {
            case tableNum(PurchRFQCaseLine):
            case tableNum(PurchRFQLine):
                return purchRFQLineMap.isCategoryBased();
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    protected ItemId itemId()
    {
        return purchRFQLineMap.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    protected LineAmount  lineAmount(PurchQty purchQty, TransDate transDate)
    {
        return purchRFQLineMap.calcLineAmountExclTax(purchQty, transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineDiscAmount</Name>
				<Source><![CDATA[
    protected DiscAmount lineDiscAmount(UnitQty unitQty, TransDate transDate)
    {
        DiscAmount  discAmount = 0;

        if (purchRFQLineMap.PurchPrice)
            discAmount += purchRFQLineMap.calcLineDiscExclTax(unitQty, transDate);

        return discAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupLine</Name>
				<Source><![CDATA[
    protected Common markupLine()
    {
        return purchRFQLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(Common         _orderTable,
             PurchRFQUpdate _specQty)
    {
        super(_orderTable, _specQty);

        if (SysDictTable::isTableMapped(tablenum(PurchRFQTableMap), _orderTable.TableId))
            purchRFQTableMap = _orderTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderLine_orderTable</Name>
				<Source><![CDATA[
    protected Common orderLine_orderTable()
    {
        return purchRFQTableMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWQtyUnit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    protected PdsCWInventQty pdsCWQtyUnit()
    {
        return PurchRFQQuantity::construct().pdsCalcCWQty(purchRFQLineMap, null,
            specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyInvent</Name>
				<Source><![CDATA[
    protected InventQty  qtyInvent()
    {
        return PurchRFQQuantity::construct().calcInventQty(purchRFQLineMap, null, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyUnit</Name>
				<Source><![CDATA[
    protected UnitQty qtyUnit()
    {
        return PurchRFQQuantity::construct().calcPurchQty(purchRFQLineMap, null, specQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuild</Name>
				<Source><![CDATA[
    protected QueryRun  queryBuild()
    {
        QueryRun                query;
        QueryBuildDataSource    qbds;

        query   = new QueryRun(querystr(purchRFQLine));
        qbds    = query.query().dataSourceTable(tablenum(PurchRFQLine));
        qbds.rangeField(fieldnum(PurchRFQLine, rfqId)).value(queryValue(purchRFQTableMap.rfqId));

        // Do not include the alternative lines unless marked
        if (specQty!= PurchRFQUpdate::Marked)
        {
            qbds.addRange(fieldnum(PurchRFQLine, IsAlternate)).value(queryValue(NoYes::No));
        }
        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryBuildOrderTable</Name>
				<Source><![CDATA[
    protected QueryRun queryBuildOrderTable()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;

        qbds = query.addDataSource(tablenum(PurchRFQTable));
        qbds.firstFast(true);
        qbds.update(true);
        qbds.addRange(fieldnum(PurchRFQTable, rfqId)).value(purchRFQTableMap.rfqId);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGet</Name>
				<Source><![CDATA[
    protected Common queryGet(QueryRun  _queryRun)
    {
        if (_queryRun.changed(tablenum(PurchRFQLine)))
        {
            purchRFQLineMap = _queryRun.get(tablenum(PurchRFQLine));
        }
        else
        {
            purchRFQLineMap = null;
        }

        return purchRFQLineMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryGetOrderTable</Name>
				<Source><![CDATA[
    protected Common queryGetOrderTable(QueryRun _queryRun)
    {
        PurchRFQTable   queryPurchRFQTable;

        if (_queryRun.changed(tablenum(PurchRFQTable)))
            queryPurchRFQTable = _queryRun.get(tablenum(PurchRFQTable));

        return queryPurchRFQTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchRFQTotals_Trans construct(PurchRFQTable     _purchRFQTable,
                                          PurchRFQUpdate    _specQty)
    {
        return new PurchRFQTotals_Trans(_purchRFQTable, _specQty);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>