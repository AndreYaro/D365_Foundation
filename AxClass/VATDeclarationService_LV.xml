<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VATDeclarationService_LV</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics365.LocalizationFramework;

/// <summary>
/// The service of ER VAT declaration file generation.
/// </summary>
public class VATDeclarationService_LV extends VATDeclarationService_W
{
    private const TaxReportField TaxReportField41 = 41;
    private const TaxReportField TaxReportField41_1 = 411;
    private const TaxReportField TaxReportField42 = 42;
    private const TaxReportField TaxReportField42_1 = 421;
    private const TaxReportField TaxReportField48_2 = 482;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    protected ERModelDefinitionParamsUIActionComposite initParameters(VATDeclaraitonContract_W _contract)
    {
        ERModelDefinitionParamsUIActionComposite parameters = super(_contract);

        TmpTaxReportTaxTransData_LV tmpTaxReportTaxTransData_LV = this.getAppendixData(_contract);

        parameters.add(new ERModelDefinitionDatabaseContext().addTemporaryTable(tmpTaxReportTaxTransData_LV));

        return parameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxReportField</Name>
				<Source><![CDATA[
    private TaxReportField getTaxReportField(TaxTrans _taxTrans, boolean _isCreditNote)
    {
        TmpTaxReportById taxReportById;

        _taxTrans.taxAmountByTaxDirectionAndReportId(taxReportById, _isCreditNote);

        TaxReportField taxReportFieldTmp = taxReportById.TaxReportField;

        select firstonly TaxReportField from taxReportById
            where taxReportById.TaxReportField == TaxReportField41
                || taxReportById.TaxReportField == TaxReportField41_1
                || taxReportById.TaxReportField == TaxReportField42
                || TaxReportById.TaxReportField == TaxReportField42_1
                || taxReportById.TaxReportField == TaxReportField48_2;

        return taxReportById.TaxReportField ? taxReportById.TaxReportField : taxReportFieldTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromTaxTrans</Name>
				<Source><![CDATA[
    private boolean loadFromTaxTrans(VATDeclaraitonContract_W _contract, TmpTaxReportTaxTransData_LV _reportData, TaxTrans _taxTrans)
    {
        TmpTaxTransInfo_W taxTransInfo;
        boolean isProcessed = taxTransInfo.loadFromTaxTrans(_taxTrans);

        if (isProcessed)
        {
            _reportData.initFromTaxTransInfo(taxTransInfo);
        }

        _reportData.CountryRegionISOCode = LogisticsAddressCountryRegion::find(_reportData.CountryRegionId).ISOcode;
        _reportData.CountryRegionType    = IntrastatCountryRegionParameters::find(_reportData.CountryRegionId).CountryRegionType;

        CurrencyCode currencyCode = IntrastatCountryRegionParameters::find(_reportData.CountryRegionId).CurrencyCode;
        currencyCode = currencyCode ? currencyCode : _taxTrans.SourceCurrencyCode;
        int sign = taxTransInfo.IsCreditNote ? -1 : 1;

        _reportData.TaxAmount = sign * abs(_taxTrans.totalTaxAmountCur());
        _reportData.TaxBaseAmount = sign * abs(_taxTrans.taxCodeCurrencyOriginAmount());
        _reportData.AmountCur = sign * abs(CurrencyExchangeHelper::curAmount(_taxTrans.TaxBaseAmount, currencyCode, _taxTrans.TransDate));

        _reportData.TaxCodeType = TaxItemGroupHeading::find(_taxTrans.TaxItemGroup).EUSalesListType;
        _reportData.CurrencyCode = currencyCode;
        _reportData.TaxReportField = this.getTaxReportField(_taxTrans, taxTransInfo.IsCreditNote);

        LvBusinessType businessType = TaxTable::find(_taxTrans.TaxCode).BusinessType_LV;

        if (abs(_reportData.DocumentAmountMST) >= _contract.parmThresHoldAmount()
            || businessType == LvBusinessType::ConstructionServices
            || businessType == LvBusinessType::DealsWithScrapMetal
            || businessType == LvBusinessType::DealsWithTimber)
        {
            _reportData.AggregationType = LvDocumentAggregationType::None;
            _reportData.BusinessType = businessType;
        }
        else
        {
            _reportData.AggregationType = LvDocumentAggregationType::All;
        }

        if (isProcessed)
        {
            if (taxTransInfo.TaxTransDataOrigin == TaxTransDataOrigin_W::RCashModule)
            {
                _reportData.DocumentType = LvDocumentType::CashCheck;
            }
            else if (taxTransInfo.IsPrepayment)
            {
                _reportData.DocumentType = LvDocumentType::PaymentDocument;
            }
            else if (taxTransInfo.IsCreditNote)
            {
                _reportData.DocumentType = LvDocumentType::CreditInvoice;
            }
            else
            {
                _reportData.DocumentType = LvDocumentType::VatInvoice;
            }
        }
        else
        {
            _reportData.DocumentType = LvDocumentType::Other;
        }

        return this.postProcessReportData(_contract, _reportData, _taxTrans, currencyCode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAppendixData</Name>
				<Source><![CDATA[
    private TmpTaxReportTaxTransData_LV getAppendixData(VATDeclaraitonContract_W _contract)
    {
        TmpTaxReportTaxTransData_LV reportData;

        QueryRun queryRun = new QueryRun(_contract.parmQuery());
        while (queryRun.next())
        {
            Set taxTransRecIds = new Set(Types::Int64);
            TaxReportVoucher taxReportVoucher = queryRun.get(tableNum(TaxReportVoucher));
            if (taxReportVoucher)
            {
                TaxTrans taxTrans;
                while select taxTrans
                    where taxTrans.TaxPeriod      == taxReportVoucher.TaxPeriod
                        && taxTrans.TaxRepCounter == taxReportVoucher.TaxRepCounter
                        && taxtrans.TransDate     >= _contract.parmFromDate()
                        && taxtrans.TransDate     <= _contract.parmToDate()
                        && taxTrans.Source        != TaxModuleType::Tax
                        && taxTrans.TaxOrigin     != TaxOrigin::TaxReversed
                {
                    if (!taxTransRecIds.in(taxTrans.RecId))
                    {
                        taxTransRecIds.add(taxTrans.RecId);

                        reportData.clear();

                        if (this.loadFromTaxTrans(_contract, reportData, taxTrans))
                        {
                            reportData.insert();
                        }
                    }
                }
            }
        }

        TmpTaxReportTaxTransData_LV reportDataAggregated;
        reportDataAggregated.setTmpData(reportData);

        while select CompanyName, Direction, CountryRegionType, VATNum, CountryRegionISOCode, sum(TaxBaseAmount)
            from reportDataAggregated
            group by CompanyName, Direction, CountryRegionType, VATNum, CountryRegionISOCode
            where reportDataAggregated.AggregationType == LvDocumentAggregationType::All
                && reportDataAggregated.CountryRegionType == CountryRegionType::Domestic
        {
            if (reportDataAggregated.TaxBaseAmount >= _contract.parmThresHoldAmount())
            {
                update_recordset reportData
                    setting AggregationType = LvDocumentAggregationType::Group
                    where  reportData.CompanyName == reportDataAggregated.CompanyName
                        && reportData.Direction == reportDataAggregated.Direction
                        && reportData.CountryRegionType == CountryRegionType::Domestic
                        && reportData.VATNum == reportDataAggregated.VATNum
                        && reportData.CountryRegionISOCode == reportDataAggregated.CountryRegionISOCode
                        && reportData.AggregationType == LvDocumentAggregationType::All;
            }
        }

        return reportData;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcessReportData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs additional processing of <c>TmpTaxReportTaxTransData_LV</c> record and determines if it must be inserted or not.
    /// </summary>
    /// <param name="_contract">
    /// Data contract.
    /// </param>
    /// <param name="_reportData">
    /// A record in the temporary table.
    /// </param>
    /// <param name="_taxTrans">
    /// The tax transaction being processed.
    /// </param>
    /// <param name="_currencyCode">
    /// The currency into which amount in currency should be converted.
    /// </param>
    /// <returns>
    /// True, if the record must be inserted in the temporary table; otherwise, false.
    /// </returns>
    /// <remarks>
    /// <list type="bullet">
    /// <item>
    /// <description>if customer invoice is equal to credit note and they are in one period, both of them should be removed from appendix III;</description>
    /// </item>
    /// <item>
    /// <description>if customer invoice is not equal to credit-note or they are in different periods, credit-note should be shown in appendix I with the opposite sign;</description>
    /// </item>
    /// <item>
    /// <description>if prepayment and invoice are equal and in one period, only invoice should be shown;</description>
    /// </item>
    /// <item>
    /// <description>if invoice and credit-note are equal and in one period, both of them should be removed from report;</description>
    /// </item>
    /// </list>
    /// </remarks>
    private boolean postProcessReportData(
        VATDeclaraitonContract_W    _contract,
        TmpTaxReportTaxTransData_LV _reportData,
        TaxTrans                    _taxTrans,
        CurrencyCode                _currencyCode)
    {
        boolean         insertReportData = true;

        // process customer credit-notes
        if (_reportData.Direction == ModuleCustVend::Cust
            && (_reportData.DocumentType == LvDocumentType::VatInvoice
            || _reportData.DocumentType == LvDocumentType::CreditInvoice))
        {
            CustTrans custTrans = CustTrans::findVoucherDate(_taxTrans.Voucher, _taxTrans.TransDate);

            if (custTrans.Closed)
            {
                CustSettlement custSettlement;
                select count(RecId) from custSettlement
                    where custSettlement.TransRecId == custTrans.RecId;

                if (custSettlement.RecId == 1)
                {
                    CustTrans custTransOffset;
                    CustSettlement custSettlementOffset;

                    select firstOnly custTransOffset
                    exists join custSettlementOffset
                        where custSettlementOffset.OffsetRecid == custTransOffset.RecId
                            && custSettlementOffset.TransRecId == custTrans.RecId;

                    select count(RecId) from custSettlementOffset
                        where custSettlementOffset.TransRecId == custTransOffset.RecId;

                    if (custSettlementOffset.RecId == 1
                        && custTransOffset.Closed
                        && ((custTrans.Invoice && custTransOffset.Invoice)
                        || (!custTrans.Invoice && !custTransOffset.Invoice)))
                    {
                        if (custTransOffset.TransDate >= _contract.parmFromDate()
                            && custTransOffset.TransDate <= _contract.parmToDate())
                        {
                            // this is the case when invoice and credit-note are fully settled with each other in one period
                            insertReportData = false;
                        }
                    }
                }
            }

            // in case invoice and credit-note are not fully settled with each other or exist in different periods,
            // credit-note should be reflected in Appendix I
            if (insertReportData
                && _reportData.DocumentType == LvDocumentType::CreditInvoice
                && taxReportField41
                && _reportData.TaxReportField == taxReportField41)
            {
                _reportData.Direction = ModuleCustVend::Vend;
                _reportData.CountryRegionType = CountryRegionType::Domestic;
                _reportData.TaxAmount = abs(_reportData.TaxAmount);
                _reportData.TaxBaseAmount = abs(_reportData.TaxBaseAmount);
                _reportData.AmountCur = abs(_reportData.AmountCur);
            }
        }

        // process vendor credit-notes
        if (_reportData.Direction == ModuleCustVend::Vend
            && _reportData.DocumentType == LvDocumentType::CreditInvoice
            && IntrastatCountryRegionParameters::find(_reportData.CountryRegionId).CountryRegionType != CountryRegionType::Domestic)
        {
            // move vendor credit-notes to Appendix I
            _reportData.CountryRegionType = CountryRegionType::Domestic;
        }

        // process prepayments
        if (insertReportData
            && (_reportData.DocumentType == LvDocumentType::VatInvoice
            || _reportData.DocumentType == LvDocumentType::PaymentDocument))
        {
            FromDate fromDateLocal = _reportData.DocumentType == LvDocumentType::PaymentDocument ? _contract.parmFromDate() : dateNull();
            ToDate toDateLocal = _reportData.DocumentType == LvDocumentType::PaymentDocument ? _contract.parmToDate() : _contract.parmFromDate() - 1;

            if (_reportData.Direction == ModuleCustVend::Cust)
            {
                CustTrans custTrans = CustTrans::findVoucherDate(_taxTrans.Voucher, _taxTrans.TransDate), custTransOffset;
                TaxTrans taxTrans;
                CustSettlement custSettlement;

                // search for any settled amounts in the current period (for prepayment) or in the previous periods (for invoice)
                select sum(TaxBaseAmount), sum(TaxAmount) from taxTrans
                    where taxTrans.TaxCode == _taxTrans.TaxCode
                exists join custSettlement
                    where custSettlement.SettlementVoucher == taxTrans.Voucher
                        && custSettlement.TransDate        == taxTrans.TransDate
                        && custSettlement.TransCompany     == custTrans.dataAreaId
                        && custSettlement.TransRecId       == custTrans.RecId
                        && custSettlement.AccountNum       == custTrans.AccountNum
                exists join custTransOffset
                    where custTransOffset.RecId == custSettlement.OffsetRecid
                        && custTransOffset.TransDate >= fromDateLocal
                        && custTransOffset.TransDate <= toDateLocal;

                // in case settled amounts exist decrease the amount to be printed
                if (taxTrans.TaxBaseAmount || taxTrans.TaxAmount)
                {
                    _reportData.TaxBaseAmount -= abs(taxTrans.TaxBaseAmount);
                    _reportData.AmountCur     -= CurrencyExchangeHelper::curAmount(abs(taxTrans.TaxBaseAmount), _currencyCode, _taxTrans.TransDate);
                    _reportData.TaxAmount     -= abs(taxTrans.TaxAmount);

                    insertReportData = _reportData.TaxBaseAmount || _reportData.TaxAmount;
                }
            }
            else
            {
                VendTrans vendTrans = VendTrans::findVoucherDate(_taxTrans.Voucher, _taxTrans.TransDate), vendTransOffset;
                TaxTrans taxTrans;
                VendSettlement vendSettlement;

                select sum(TaxBaseAmount), sum(TaxAmount) from taxTrans
                    where taxTrans.TaxCode == _taxTrans.TaxCode
                exists join vendSettlement
                    where vendSettlement.SettlementVoucher == taxTrans.Voucher
                        && vendSettlement.TransDate        == taxTrans.TransDate
                        && vendSettlement.TransCompany     == vendTrans.dataAreaId
                        && vendSettlement.TransRecId       == vendTrans.RecId
                        && vendSettlement.AccountNum       == vendTrans.AccountNum
                exists join vendTransOffset
                    where vendTransOffset.RecId == vendSettlement.OffsetRecid
                        && vendTransOffset.TransDate >= fromDateLocal
                        && vendTransOffset.TransDate <= toDateLocal;

                if (taxTrans.TaxBaseAmount || taxTrans.TaxAmount)
                {
                    _reportData.TaxBaseAmount -= abs(taxTrans.TaxBaseAmount);
                    _reportData.AmountCur     -= CurrencyExchangeHelper::curAmount(abs(taxTrans.TaxBaseAmount), _currencyCode, _taxTrans.TransDate);
                    _reportData.TaxAmount     -= abs(taxTrans.TaxAmount);

                    insertReportData = _reportData.TaxBaseAmount || _reportData.TaxAmount;
                }
            }
        }

        return insertReportData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>