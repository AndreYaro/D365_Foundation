<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PlanActivityCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>PlanActivityCreate</c> class is responsible for creating all the necessary records for
///    creating a <c>PlanActivity</c> record.
/// </summary>
public abstract class PlanActivityCreate
{
    PlanConstraint                      sequencePlanConstraint;
    PlanConstraint                      aggregationPlanConstraint;
    PlanActivityTime                    planActivityTime;
    InventQty                           processQuantity;
    RefRecId                            quantityUnitOfMeasure;
    PlanActivityName                    activityName;
    PlanActivityType                    activityType;
    OnHandUpdate                        onHandUpdate;
    RefRecId                            planReference;
    LeanFeederBridge                    feederBridge;
    LeanCycleTimeInUnit                 cycleTime;
    LeanPickUpSemiFinished              pickupSemiFinished;
    LeanReceiveSemiFinished             receiveSemiFinished;
    WMSFreightedBy                      freightedBy;
    PlanActivityTmpActivityTimes        activityTimes;
    recId                               plan;
    recId                               highLevelPlanActivityTime;
    RefRecId                            wrkResourceGroup;
    recId                               operatingUnit;

    #LOCALMACRO.CurrentList
        activityType,
        activityName,
        planReference,
        plan,
        processQuantity,
        quantityUnitOfMeasure,
        feederBridge,
        pickupSemiFinished,
        receiveSemiFinished,
        operatingUnit,
        freightedBy
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canHaveInventoryFlagsSet</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether a plan activity type can have inventory flags set.
    /// </summary>
    /// <param name="_planActivityType">
    ///    A <c>PlanActivityType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    true if the type can set inventory flags; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    Inventory flags indicate the on-hand inventory update and the pickup or receive semi-finished
    ///    settings.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean canHaveInventoryFlagsSet(PlanActivityType _planActivityType)
    {
        return    _planActivityType != PlanActivityType::Move
               && _planActivityType != PlanActivityType::Operate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates all the necessary objects that are related to the <c>PlanActivity</c> being created.
    /// </summary>
    /// <returns>
    ///    The newly created high-level <c>PlanActivity</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity createActivity()
    {
        PlanActivity                highLevelPlanActivity;
        PlanActivityTimeRefRecId    highLevelPlanActivityTimeRefRecId;

        ttsbegin;
        this.initPlanConstraints();
        this.createPlanActivityTime();

        if (this.mustSetPlanActivityTimeAtHighLevel())
        {
            highLevelPlanActivityTimeRefRecId = planActivityTime.RecId;
        }

        // Create the high level activity
        highLevelPlanActivity = this.createAtomicActivity(activityType,
                                                          NoYes::Yes,
                                                          onHandUpdate,
                                                          highLevelPlanActivityTimeRefRecId,
                                                          feederBridge,
                                                          pickupSemiFinished,
                                                          receiveSemiFinished,
                                                          NoYes::No,
                                                          wrkResourceGroup,
                                                          cycleTime,
                                                          freightedBy);

        ttscommit;

        return highLevelPlanActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAtomicActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an atomic <c>PlanActivity</c> record.
    /// </summary>
    /// <param name="_activityType">
    ///    The activity type.
    /// </param>
    /// <param name="_relateToPlan">
    ///    A <c>NoYes</c> enumeration value that indicates whether a <c>PlanPlanActivity</c> should be
    ///    created; optional.
    /// </param>
    /// <param name="_onhandUpdate">
    ///    The on-hand update flag; optional.
    /// </param>
    /// <param name="_planActivityTime">
    ///    A foreign key to the <c>PlanActivityTime</c> record; optional.
    /// </param>
    /// <param name="_feederBridge">
    ///    A <c>NoYes</c> enumeration value that indicates whether the activity can be used to feed into
    ///    another production flow.
    /// </param>
    /// <param name="_pickUpSemiFinished">
    ///    The pick up semi-finished flag; optional.
    /// </param>
    /// <param name="_receiveSemiFinished">
    ///    The receive semi-finished flag; optional.
    /// </param>
    /// <param name="_registerScrap">
    ///    The register scrap flag; optional.
    /// </param>
    /// <param name="_wrkCtrResourceGroup">
    ///    The record ID of the corresponding <c>WrkCtrResourceGroup</c> record; optional.
    /// </param>
    /// <param name="_cycleTime">
    ///    The activity cycle time; optional.
    /// </param>
    /// <param name="_freightedBy">
    ///    The activity freighted by information; optional.
    /// </param>
    /// <returns>
    ///    The newly created atomic <c>PlanActivity</c> record.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public PlanActivity createAtomicActivity(
        PlanActivityType    _activityType,
        NoYes               _relateToPlan           = NoYes::Yes,
        NoYes               _onhandUpdate           = onHandUpdate,
        recId               _planActivityTime       = 0,
        NoYes               _feederBridge           = NoYes::No,
        NoYes               _pickUpSemiFinished     = NoYes::No,
        NoYes               _receiveSemiFinished    = NoYes::No,
        NoYes               _registerScrap          = NoYes::No,
        recId               _wrkCtrResourceGroup    = 0,
        LeanCycleTimeInUnit _cycleTime              = 0,
        WMSFreightedBy      _freightedBy            = WMSFreightedBy::Carrier)
    {
        PlanActivity                    planActivity;
        LeanProductionFlowActivity      leanProductionFlowActivity;
        PlanPlanActivity                planPlanActivity;

        planActivity.PlanActivityId   = NumberSeq::newGetNum(ProdParameters::numRefActivityId()).num();
        planActivity.Name             = activityName;
        planActivity.PlanReference    = planReference;
        planActivity.PlanActivityType = _activityType;
        planActivity.ActivityTime     = _planActivityTime;
        planActivity.OnHandUpdate     =    _onhandUpdate
                                        && this.canHaveInventoryFlagsSet(_activityType)
                                        && !this.isHighLevelActivity(_activityType);
        planActivity.OperatingUnit    = operatingUnit;
        planActivity.FreightedBy      = _freightedBy;

        planActivity.initFromPlanReference();

        this.validateAndInsert(planActivity);

        leanProductionFlowActivity.PlanActivity        = planActivity.RecId;
        leanProductionFlowActivity.FeederBridge        = _feederBridge;
        leanProductionFlowActivity.PickUpSemiFinished  =    _pickUpSemiFinished
                                                         && this.canHaveInventoryFlagsSet(_activityType)
                                                         && this.isHighLevelActivity(_activityType);
        leanProductionFlowActivity.ReceiveSemiFinished =    _receiveSemiFinished
                                                         && this.canHaveInventoryFlagsSet(_activityType)
                                                         && this.isHighLevelActivity(_activityType);
        leanProductionFlowActivity.RegisterScrap       =    _registerScrap
                                                         && planActivity.OnHandUpdate;
        leanProductionFlowActivity.WrkCtrResourceGroup = _wrkCtrResourceGroup;
        leanProductionFlowActivity.CycleTime           = _cycleTime;

        this.validateAndInsert(leanProductionFlowActivity);

        if (_relateToPlan)
        {
            // Relate the new activity to the plan
            planPlanActivity.Plan         = plan;
            planPlanActivity.PlanActivity = planActivity.RecId;
            this.validateAndInsert(planPlanActivity);
        }

        return planActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPlanActivityTime</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        protected PlanActivityTime createPlanActivityTime()
    {
        PlanActivityTimeComponent   planActivityTimeComponent;

        planActivityTime.ProcessQuantity       = processQuantity;
        planActivityTime.QuantityUnitOfMeasure = quantityUnitOfMeasure;
        this.validateAndInsert(planActivityTime);

        // Activity times are related to the high level activity or a resource requirement
        while select activityTimes
            where activityTimes.ValueAddingActivity == NoYes::Yes
               || activityTimes.Time != 0
        {
            if (   activityTimes.ValueAddingActivity == NoYes::Yes
                && !activityTimes.Time)
            {
                throw error("@SYS305508");
            }

            planActivityTimeComponent.PlanActivityTime      = planActivityTime.RecId;
            planActivityTimeComponent.TimeType              = activityTimes.PlanActivityTimeTypes;
            planActivityTimeComponent.Time                  = activityTimes.Time;
            planActivityTimeComponent.TimeRelatedQuantity   = activityTimes.Qty;
            planActivityTimeComponent.IsValueAddedTime      = activityTimes.ValueAddingActivity;
            planActivityTimeComponent.TimeUnitOfMeasure     = activityTimes.TimeUnitOfMeasure;
            planActivityTimeComponent.QuantityUnitOfMeasure = activityTimes.QuantityUnitOfMeasure;

            this.validateAndInsert(planActivityTimeComponent);
        }

        return planActivityTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromContainer</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the current instance with the parameters in the container.
    /// </summary>
    /// <param name="_parameters">
    ///    A container that has the parameters.
    /// </param>
    /// <remarks>
    ///    This method is a virtual method; in this case, only the common parameters are initialized.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initFromContainer(container _parameters)
    {
        container   activityTimesContainer;
        int         conIdx, conLength;

        [#CurrentList, activityTimesContainer] = _parameters;

        conLength = conlen(activityTimesContainer);

        // if there're any activity times - add them to the temp table
        for (conIdx = 1; conIdx <= conLength; conIdx++)
        {
            activityTimes.clear();
            con2Buf(conpeek(activityTimesContainer, conIdx), activityTimes);
            activityTimes.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPlanConstraints</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the necessary <c>PlanConstraint</c> records when it creates a new <c>PlanActivity</c>
    ///    record.
    /// </summary>
    /// <remarks>
    ///    As activities are only created through the wizard, the constraints are shared for all atomic
    ///    activities.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initPlanConstraints()
    {
        aggregationPlanConstraint = PlanConstraint::findOrCreate(ConstraintTypes::Aggregation,
                                                                 SequenceTypes::EndStart);
        sequencePlanConstraint    = PlanConstraint::findOrCreate(ConstraintTypes::Sequence,
                                                                 SequenceTypes::EndStart,
                                                                 ConstraintRoleTypes::Minimum,
                                                                 1,
                                                                 ProdParameters::find().ProductionFlowDefaultTimeUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isHighLevelActivity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a plan activity type is a high level activity.
    /// </summary>
    /// <param name="_planActivityType">
    ///    A <c>PlanActivityType</c> enumeration value.
    /// </param>
    /// <returns>
    ///    A Boolean that indicates whether the type is a high level type of plan activity.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean isHighLevelActivity(PlanActivityType _planActivityType)
    {
        return    _planActivityType == PlanActivityType::Process
               || _planActivityType == PlanActivityType::Transfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetPlanActivityTimeAtHighLevel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the <c>PlanActivityTime</c> record must be set at the high level.
    /// </summary>
    /// <returns>
    /// true if a <c>PlanActivityTime</c> record must be created; otherwise, false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean mustSetPlanActivityTimeAtHighLevel()
    {
        return this.isHighLevelActivity(activityType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityName</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public PlanActivityName parmActivityName(PlanActivityName _activityName = activityName)
    {
        activityName = _activityName;

        return activityName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityTimes</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public PlanActivityTmpActivityTimes parmActivityTimes(PlanActivityTmpActivityTimes _activityTimes = activityTimes)
    {
        activityTimes = _activityTimes;

        return activityTimes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityType</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public PlanActivityType parmActivityType(PlanActivityType _activityType = activityType)
    {
        activityType = _activityType;

        return activityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAggregationPlanConstraint</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public PlanConstraint parmAggregationPlanConstraint(PlanConstraint _aggregationPlanConstraint = aggregationPlanConstraint)
    {
        aggregationPlanConstraint = _aggregationPlanConstraint;

        return aggregationPlanConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCycleTime</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public LeanCycleTimeInUnit parmCycleTime(LeanCycleTimeInUnit _cycleTime = cycleTime)
    {
        cycleTime = _cycleTime;

        return cycleTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFeederBridge</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public LeanFeederBridge parmFeederBridge(LeanFeederBridge _feederBridge = feederBridge)
    {
        feederBridge = _feederBridge;

        return feederBridge;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFreightedBy</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public WMSFreightedBy parmFreightedBy(WMSFreightedBy _freightedBy = freightedBy)
    {
        freightedBy = _freightedBy;

        return freightedBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOnhandUpdate</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public OnHandUpdate parmOnhandUpdate(OnHandUpdate _onHandUpdate = onHandUpdate)
    {
        onHandUpdate = _onHandUpdate;

        return onHandUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOperatingUnit</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public recId parmOperatingUnit(recId _operatingUnit = operatingUnit)
    {
        operatingUnit = _operatingUnit;

        return operatingUnit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPickUpSemiFinished</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public LeanPickUpSemiFinished parmPickUpSemiFinished(LeanPickUpSemiFinished _pickUpSemiFinished = pickUpSemiFinished)
    {
        pickUpSemiFinished = _pickUpSemiFinished;

        return pickUpSemiFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlan</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RefRecId parmPlan(RefRecId _plan = plan)
    {
        plan = _plan;

        return plan;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPlanReference</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RefRecId parmPlanReference(RefRecId _planReference = planReference)
    {
        planReference = _planReference;

        return planReference;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessQuantity</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public InventQty parmProcessQuantity(InventQty _processQuantity = processQuantity)
    {
        processQuantity = _processQuantity;

        return processQuantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityUnitOfMeasure</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public RefRecId parmQuantityUnitOfMeasure(RefRecId _quantityUnitOfMeasure = quantityUnitOfMeasure)
    {
        quantityUnitOfMeasure = _quantityUnitOfMeasure;

        return quantityUnitOfMeasure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReceiveSemiFinished</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public LeanReceiveSemiFinished parmReceiveSemiFinished(LeanReceiveSemiFinished _receiveSemiFinished = receiveSemiFinished)
    {
        receiveSemiFinished = _receiveSemiFinished;

        return receiveSemiFinished;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSequencePlanConstraint</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public PlanConstraint parmSequencePlanConstraint(PlanConstraint _sequencePlanConstraint = sequencePlanConstraint)
    {
        sequencePlanConstraint = _sequencePlanConstraint;

        return sequencePlanConstraint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAndInsert</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the record and inserts it into the database.
    /// </summary>
    /// <param name="_buffer">
    ///    The buffer to validate and insert.
    /// </param>
    /// <param name="_silent">
    ///    Determines whether an exception is thrown in case of a validation failure.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void validateAndInsert(
        Common  _buffer,
        boolean _silent = false)
    {
        if (_buffer.validateWrite())
        {
            _buffer.insert();
        }
        else
        {
            if (!_silent)
            {
                throw error("@SYS138340");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPlanActivityType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>PlanActivityCreate</c> class.
    /// </summary>
    /// <param name="_activityType">
    ///    The activity type.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PlanActivityCreate</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityCreate newPlanActivityType(PlanActivityType _activityType)
    {
        PlanActivityCreate  planActivityCreate;

        switch (_activityType)
        {
            case PlanActivityType::Process :
                planActivityCreate =  PlanActivityCreateProcess::construct();
                break;

            case PlanActivityType::Transfer :
                planActivityCreate = PlanActivityCreateTransfer::construct();
                break;
        }

        planActivityCreate.parmActivityType(_activityType);

        return planActivityCreate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    A constructor method for the <c>PlanActivityCreate</c> class.
    /// </summary>
    /// <param name="_activityType">
    ///    The activity type.
    /// </param>
    /// <param name="_params">
    ///    The parameters with which to use to initialize the instance.
    /// </param>
    /// <returns>
    ///    An instance of the <c>PlanActivityCreate</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static PlanActivityCreate newStandard(
        PlanActivityType _activityType,
        container        _params)
    {
        PlanActivityCreate  planActivityCreate = PlanActivityCreate::newPlanActivityType(_activityType);
        planActivityCreate.initFromContainer(_params);

        return planActivityCreate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>