<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SqlDatabaseInit</Name>
	<SourceCode>
		<Declaration><![CDATA[
// This is a framework class. Customizing this class may cause problems with future upgrades to the software.
public class SqlDatabaseInit
{

    #DEFINE.currentSysVarId(34)         // version 2.5 was #11 (sysvar id now follows application version numbers)
    #DEFINE.version25Changes(11)        // misc changes for 2.5
    #DEFINE.version30Changes(30)        // misc changes for 3.0

    #DEFINE.indexSupported(1)
    #DEFINE.indexQualifier(8)
    #DEFINE.recidsPerCompany(32)
    #DEFINE.transidsPerCompany(256)

    str 16 notNull;
    str 16 allowNull;
    str 30 number;
    str 30 nvarChar;
    str 30 primaryKey;
    DatabaseId dbId;

    SqlDataDictionary D;
    Connection con;
    Statement stmt;
    ResultSet res;
    SqlSystem   sqlSystem;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createSystemVariablesTable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        boolean createSystemVariablesTable()
    {
        str dbSchema;
        SqlStatementExecutePermission ssep;
        str sqlString;
        ;

        if (dbId == DatabaseId::MS_Sql_Server)
        {
            dbSchema = xSession::getDbSchema();
            sqlString =  'CREATE TABLE "' + dbSchema
                         + '".SQLSYSTEMVARIABLES'
                         + '('
                         + '  PARM     ' + nvarChar+ '(30) '+ notNull    +  ','
                         + '  VALUE    ' + nvarChar+ '(254)'+ allowNull    + ','
                         + '  IPARM    ' + number + ' '    + allowNull    + ','
                         + '  IVALUE   ' + number + ' '    + allowNull    + ')';
        }
        else
        {
            sqlString =  'CREATE TABLE SQLSYSTEMVARIABLES'
                         + '('
                         + '  PARM     ' + 'nvarchar2(30) '+ allowNull    + ','
                         + '  VALUE    ' + 'nvarchar2(254)'+ allowNull    + ','
                         + '  IPARM    ' + number + ' '    + allowNull    + ','
                         + '  IVALUE   ' + number + ' '    + allowNull    + ')';        // dangerous API mitigation
        }
        // dangerous API mitigation
        ssep =  new SqlStatementExecutePermission(sqlString);
        ssep.assert();
        stmt.executeUpdate(sqlString);
        CodeAccessPermission::revertAssert();

        // Set up primary key for Oracle.
        if (dbId == DatabaseId::MS_Sql_Server)
        {
            sqlString = 'ALTER TABLE SQLSYSTEMVARIABLES ADD CONSTRAINT iSV ' + primaryKey + ' (PARM)';
        }
        else
        {
            sqlString = 'CREATE UNIQUE INDEX iSV ON SQLSYSTEMVARIABLES(PARM)';
        }

        // dangerous API mitigation
        ssep =  new SqlStatementExecutePermission(sqlString);
        ssep.assert();
        stmt.executeUpdate(sqlString);
        CodeAccessPermission::revertAssert();
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dataBaseId</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        DatabaseId dataBaseId()
    {
        return dbId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>detectDatabaseVendor</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        int detectDatabaseVendor( boolean initializing = false )
    {
        #define.SQL_DBMS_NAME(17)
        str 50 dbms_name;
        str 80 odbcValue;
        ;

        if ( initializing || !isNative() )
        {
            con = new Connection();
            dbms_name = con.odbcGetInfoStr(#SQL_DBMS_NAME);

            if ( strscan(dbms_name,'Microsoft',1,999) )
            {
                // Microsoft SQL Server

                dbId = DatabaseId::MS_Sql_Server;
                odbcValue = con.odbcGetInfoStr(17);         // Request DBMS Name
                if (odbcValue == 'Microsoft SQL Server')
                {
                    odbcValue = con.odbcGetInfoStr(18);     // Request DBMS Version
                }

                notNull   = 'NOT NULL';
                allowNull = 'NULL';
                number    = 'INT';     // Database-name of internal-type 'INT'
                nvarChar   = 'NVARCHAR'; // Database-name of internal-type 'STR'
                primaryKey = 'PRIMARY KEY';
            }
            else if ( strscan(dbms_name,'Oracle',1,999) )
            {
                // Oracle

                dbId = DatabaseId::Oracle;

                notNull   = 'NOT NULL';
                allowNull = '';
                number    = 'NUMBER(10,0)';     // Database-name of internal-type 'NUMBER(10,3)' (SQL_INTEGER)
                nvarChar   = 'NVARCHAR2';   // Database-name of internal-type 'STR'
                primaryKey = 'PRIMARY KEY';
            }
            else
                return 0;
        }
        else // native/isam mode
        {
            dbId = DatabaseId::ISAM;
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSystemVariables</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        boolean initSystemVariables()
    {
        if ( this.createSystemVariablesTable() )
        {
            switch (dbId)
            {
                case DatabaseId::MS_Sql_Server:
                    return this.insertSystemVariablesSqlServer();
            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSystemVariablesSqlServer</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        boolean insertSystemVariablesSqlServer()
    {
        int indexValue =    #indexSupported+
                            #indexQualifier+
                            #recidsPerCompany+
                            #TransidsPerCompany;

        int i;
        container initVarsContainer;
        str uniCodeEnabled;
        str variableAndValue;
        SqlStatementExecutePermission ssep;
        str sqlString;

        uniCodeEnabled = int2str(sqlSystem.dbRequestedUnicodeEnabled());

        initVarsContainer = conins(initVarsContainer, 1, '(\'GETINDEX\',\'SELECT name FROM sysindexes WHERE indid>0 AND indid<255 AND id=object_id(\'\'\%s\'\') AND INDEXPROPERTY(id, name, \'\'IsStatistics\'\') = 0\',3,NULL)');
        initVarsContainer = conins(initVarsContainer, 2, '(\'RENAME\',\'EXECUTE SP_RENAME \%s,\%s\',3,NULL)');
        initVarsContainer = conins(initVarsContainer, 3, '(\'KEYWORDS\',\'PROC,SUM,LINENO,OPEN,TRANSACTION,BY,PERCENT,PROCEDURE,CURRENT_DATE,CURRENT_TIME,CURRENT_USER,DUMMY,PERMANENT,PIPE\',4,NULL)');
        initVarsContainer = conins(initVarsContainer, 4, '(\'SHADOW\',\'$\',5,NULL)');
        initVarsContainer = conins(initVarsContainer, 5, '(\'INDEXCLUSTER\', \'CLUSTERED\',5,NULL)');
        initVarsContainer = conins(initVarsContainer, 6, '(\'QUOTEPRE\',\'\',6,NULL)');
        initVarsContainer = conins(initVarsContainer, 7, '(\'QUOTEPOST\',\'_\',6,NULL)');
        initVarsContainer = conins(initVarsContainer, 8, '(\'DBNAME\',\'Microsoft SQL Server\',7,NULL)');
        initVarsContainer = conins(initVarsContainer, 9, '(\'DUPLICATEKEY\',\'+2601,+2627\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 10, '(\'DEADLOCKCODES\',\'+1205\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 11, '(\'TIMESTAMPCODES\',\'+532\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 12, '(\'DISCONNECTCODES\',\'+230,+10054\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 13, '(\'CTRLBRKCODES\',\'\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 14, '(\'SHARINGCODES\',\'\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 15, '(\'RECORDLOCKCODES\',\'\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 16, '(\'DONTRETRYCODES\',\'+100\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 17, '(\'INDEXEXISTCODES\',\'\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 18, '(\'ENDOFDATACODES\',\'+100\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 19, '(\'LOGFULLCODES\',\'+1105\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 20, '(\'SYNCHRONIZECODES\',\'+207,+208,+1913,+3701,+3702,+3703\',9,NULL)');
        initVarsContainer = conins(initVarsContainer, 21, '(\'TABLENAMELEN\',\'40\',10,NULL)');
        initVarsContainer = conins(initVarsContainer, 22, '(\'FIELDNAMELEN\',\'30\',10,NULL)');
        initVarsContainer = conins(initVarsContainer, 23, '(\'CHARSET\',\'1\', 11,NULL)');
        initVarsContainer = conins(initVarsContainer, 24, '(\'SORTMODE\',\'1\',11,NULL)');
        initVarsContainer = conins(initVarsContainer, 25, '(\'CONCURRENCY\',\'6\',11,NULL)');
        initVarsContainer = conins(initVarsContainer, 26, '(\'NULLSUPPORT\',\'3\',11,NULL)');
        initVarsContainer = conins(initVarsContainer, 27, '(\'DBID\',\'2\',12,NULL)');
        initVarsContainer = conins(initVarsContainer, 28, '(\'SYSVARID\',\''+ int2str(#currentSysVarId) +'\',12,NULL)');
        initVarsContainer = conins(initVarsContainer, 29, '(\'RESERVED\',\'0\',12,NULL)');
        initVarsContainer = conins(initVarsContainer, 30, '(\'ALTERTABLE\',\'1\',13,NULL)');
        initVarsContainer = conins(initVarsContainer, 31, '(\'GETDATA\',\'0\',13,NULL)');
        initVarsContainer = conins(initVarsContainer, 32, '(\'SQLFUNCTIONS\',\'0\',13,NULL)'); // 2000/8/10: MAX() and MIN() handled by the SQL backend
        initVarsContainer = conins(initVarsContainer, 33, '(\'INDEX\',\''+int2str(indexValue)+'\',13,NULL)');
        initVarsContainer = conins(initVarsContainer, 34, '(\'APICALLSPINCNT\',\'0\',15,NULL)');
        initVarsContainer = conins(initVarsContainer, 35, '(\'APICALLSLEEP\',\'10\',15,NULL)');
        initVarsContainer = conins(initVarsContainer, 36, '(\'CASESENSITIVE\',\'0\',20,NULL)');
        initVarsContainer = conins(initVarsContainer, 37, '(\'ALLOWEMPTYSTRING\',\'1\',20,NULL)');
        initVarsContainer = conins(initVarsContainer, 38, '(\'COMMENTSTRING\',\'1\',20,NULL)');
        initVarsContainer = conins(initVarsContainer, 39, '(\'NAMETRUNCFIX\',\'0\',20,NULL)');
        initVarsContainer = conins(initVarsContainer, 40, '(\'UNICODEENABLED\',\''+uniCodeEnabled+'\',20,NULL)');
        initVarsContainer = conins(initVarsContainer, 41, '(\'ORDERBYSELECT\',\'0\',21,NULL)');

        for (i = 1; i <= conlen(initVarsContainer); i++)
        {
            variableAndValue = conpeek(initVarsContainer, i);
            // dangerous API mitigation
            sqlString = 'INSERT INTO SQLSYSTEMVARIABLES (PARM, VALUE, IPARM, IVALUE) VALUES '+variableAndValue;
            ssep =  new SqlStatementExecutePermission(sqlString);
            ssep.assert();
            stmt.executeUpdate(sqlString);
            CodeAccessPermission::revertAssert();
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        void new()
    {
        con = new Connection();
        stmt = con.createStatement();
        sqlSystem = new SqlSystem();

        // Default values, needed for ModelStore
        notNull   = 'NOT NULL';
        allowNull = 'NULL';
        number    = 'INT';     // Database-name of internal-type 'INT'
        nvarChar   = 'NVARCHAR'; // Database-name of internal-type 'STR'
        primaryKey = 'PRIMARY KEY';
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeMSSQLStorage</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        void upgradeMSSQLStorage()
    {
        Connection  consql;
        Statement   stmtsql;
        str         sqls;
        SqlStatementExecutePermission ssep;
        ;

        consql = new Connection();
        stmtsql = consql.createStatement();

        sqls = strfmt('delete from %1',tablestr(SqlStorage));
        // dangerous API mitigation
        ssep =  new SqlStatementExecutePermission(sqls);
        ssep.assert();
        stmtsql.executeUpdate(sqls);
        CodeAccessPermission::revertAssert();

        /* Update all columns, not container or memo, that allows NULL to correct Axapta null value */
        /* Mark all tables with at least one updated column to be rebuilt at next Axapta synchronize */

        sqls =
                'set quoted_identifier off';
        // dangerous API mitigation
        ssep =  new SqlStatementExecutePermission(sqls);
        ssep.assert();
        stmtsql.executeUpdate(sqls);
        CodeAccessPermission::revertAssert();

        sqls =
                'DECLARE    @exec_stmt      nvarchar(680), ' +
                '           @tablename      sysname, ' +
                '           @colname        sysname, ' +
                '           @axnullvalue    nvarchar(32), ' +
                '           @coltype        sysname ' +
                'DECLARE ' +
                '    colnames_cursor CURSOR FORWARD_ONLY FAST_FORWARD READ_ONLY FOR ' +
                '    SELECT table_name, column_name, data_type ' +
                '    FROM information_schema.columns ' +
                '    JOIN sqldictionary ON sqldictionary.sqlname = table_name AND sqldictionary. fieldid = 0 ' +
                '    WHERE is_nullable = \'YES\' AND table_schema = USER_NAME() ' +
                'OPEN colnames_cursor ' +
                'FETCH NEXT FROM colnames_cursor INTO @tablename, @colname, @coltype ' +
                'WHILE (@@fetch_status <> -1) ' +
                'BEGIN ' +
                '    IF (@@fetch_status <> -2) ' +
                '    BEGIN ' +
                '        SELECT @axnullvalue = ' +
                '        CASE @coltype ' +
                '            WHEN \'image\'     THEN \'NULL\' ' +
                '            WHEN \'text\'      THEN \'NULL\' ' +
                '            WHEN \'int\'       THEN \'0\' ' +
                '            WHEN \'varchar\'   THEN \'\'\'\'\'\' ' +
                '            WHEN \'nvarchar\'  THEN \'\'\'\'\'\' ' +
                '            WHEN \'numeric\'   THEN \'0.0\' ' +
                '            WHEN \'datetime\'  THEN \'{ts \'\'1900-01-01 00:00:00.000\'\'}\' ' +
                '            ELSE \'\' ' +
                '        END ' +
                '        IF ((len(@axnullvalue) > 0) AND (@axnullvalue <> \'NULL\')) ' +
                '            BEGIN ' +
                '                SELECT @exec_stmt = \'UPDATE \' + @tablename + \' SET \' + @colname + \' = \' + @axnullvalue + \' WHERE \' + @colname + \' IS NULL\' ' +
                '                EXEC (@exec_stmt) ' +
                '            END ' +
                '        ELSE ' +
                '            if (@axnullvalue <> \'NULL\') ' +
                '                PRINT \'Unknown Axapta DataType:\' + convert( VARCHAR, @coltype ) ' +
                '    END ' +
                '    FETCH NEXT FROM colnames_cursor INTO @tablename, @colname, @coltype ' +
                'END ' +
                'DEALLOCATE colnames_cursor ';
        // dangerous API mitigation
        ssep =  new SqlStatementExecutePermission(sqls);
        ssep.assert();
        stmtsql.executeUpdate(sqls);
        CodeAccessPermission::revertAssert();

        sqls =
                'DECLARE @recid integer ' +
                'SELECT @recid = max(recid) from sqldictionary WHERE recid < 0 ' +
                'IF @recid IS NULL ' +
                '  SELECT @recid = max(recid) from sqldictionary ' +
                'INSERT INTO sqldictionary SELECT tableid, 55000, 1, \'££SyncMe\', \'££SyncMe\', 0, 10, 0, 0, 0, 0, @recid + tableid ' +
                'FROM sqldictionary A WHERE A.fieldid = 0 and A.tableid < 55555 AND ' +
                'sqlname IN ' +
                '(SELECT DISTINCT table_name ' +
                '    FROM information_schema.columns ' +
                '    JOIN sqldictionary ON sqldictionary.sqlname = table_name AND sqldictionary.fieldid = 0 ' +
                '    WHERE is_nullable = \'YES\' AND table_schema = USER_NAME() AND ' +
                '    data_type <> \'image\' AND data_type <> \'text\' AND ' +
                '    NOT EXISTS (SELECT 1 FROM sqldictionary B WHERE B.tableid = A.tableid AND B.fieldid = 55000))';
        // dangerous API mitigation
        ssep =  new SqlStatementExecutePermission(sqls);
        ssep.assert();
        stmtsql.executeUpdate(sqls);
        CodeAccessPermission::revertAssert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeMSSQLSystemVariables</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        void upgradeMSSQLSystemVariables(int fromVersion)
    {
        int i;
        container updateVarsCon;
        str varValue;
        SqlStatementExecutePermission ssep;
        str sqlString;

        if (fromVersion<#version30Changes)
        {
            // Axapta 1.5 SQL Server 6.5 to 7.0 Updates
            updateVarsCon = conins(updateVarsCon, 1, 'VALUE =\'SELECT name FROM sysindexes WHERE indid>0 AND indid<255 AND id=object_id(\'\'\%s\'\') AND INDEXPROPERTY(id, name, \'\'IsStatistics\'\') = 0\' WHERE PARM = \'GETINDEX\'');

            // Axapta 1.5 to 2.0 update, Ensure Clustered enabled
            updateVarsCon = conins(updateVarsCon, 2, 'VALUE = \'CLUSTERED\' WHERE PARM = \'INDEXCLUSTER\'');

            // Axapta 1.5 to 2.0 update, Catch 'Primary Key Constraint violation
            updateVarsCon = conins(updateVarsCon, 3, 'VALUE = \'+2601,+2627\' WHERE PARM = \'DUPLICATEKEY\'');

            // Axapta 2.0 to 2.1/2.11, Catch Disconnected Error, to allow AOS to kill User Session gracefully
            updateVarsCon = conins(updateVarsCon, 4, 'VALUE = \'+230,+10054\' WHERE PARM = \'DISCONNECTCODES\'');

            // Axapta 2.1 to 2.5, Let MS SQL Server handle MAX() and MIN() rather than simulating it in Axapta
            updateVarsCon = conins(updateVarsCon, 5, 'VALUE = \'0\' WHERE PARM = \'SQLFUNCTIONS\'');

            for (i = 1; i <= conlen(updateVarsCon); i++)
            {
                varValue = conpeek(updateVarsCon, i);
                // dangerous API mitigation
                sqlString = 'UPDATE SQLSYSTEMVARIABLES SET '+varValue;
                ssep =  new SqlStatementExecutePermission(sqlString);
                ssep.assert();
                stmt.executeUpdate(sqlString);
                CodeAccessPermission::revertAssert();
            }

            // --- Non SqlSystemVariables stuff ---
            if (fromVersion<#version25Changes)
            {
                // IRL, FILLFACTOR, SEGMENT settings from older SQL Server 6.5 installations are removed
                // Improper NULL values from older SQL Server 6.5 installations are converted
                this.upgradeMSSQLStorage();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>upgradeSystemVariables</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        void upgradeSystemVariables()
    {
        int sysVarId;
        SqlStatementExecutePermission ssep;
        str sqlString;
        str sqlStringPrimaryKey;
        str sqlStringPrimaryKey2;
        str updateSqlString;
        ;

        // dangerous API mitigation
        sqlString = 'SELECT VALUE FROM SQLSYSTEMVARIABLES WHERE PARM=\'SYSVARID\'';
        ssep =  new SqlStatementExecutePermission(sqlString);
        ssep.assert();
        res = stmt.executeQuery(sqlString);
        CodeAccessPermission::revertAssert();
        if (res.next())
        {
            sysVarId = str2int(res.getString(1));
            // dangerous API mitigation
            sqlString = 'SELECT VALUE FROM SQLSYSTEMVARIABLES WHERE PARM=\'DBID\'';
            ssep =  new SqlStatementExecutePermission(sqlString);
            ssep.assert();
            res = stmt.executeQuery(sqlString);
            CodeAccessPermission::revertAssert();
            if (res.next())
            {
                dbId = str2int(res.getString(1));
                if (sysVarId<#currentSysVarId)
                {
                    switch (dbId)
                    {
                        case DatabaseId::MS_Sql_Server:
                            this.upgradeMSSQLSystemVariables(sysVarId);
                            break;
                    }
                }
                updateSqlString = 'UPDATE SQLSYSTEMVARIABLES SET VALUE=\''+int2str(#currentSysVarId)+'\' WHERE PARM=\'SYSVARID\'';
                ssep =  new SqlStatementExecutePermission(updateSqlString);
                ssep.assert();
                stmt.executeUpdate(updateSqlString);
                CodeAccessPermission::revertAssert();
            }
        }

        // Set primary key on SQL server.
        if ((dbId == DatabaseId::MS_Sql_Server) && (notNull == '' || primaryKey == ''))
        {
            this.detectDatabaseVendor(true);
        }

        // Upgrade the table if we find a missing index. Upgrade steps involve
        //  * alter columns PARM & VALUE to unicode datatypes
        //  * create unique index
        switch (dbId)
        {
            case DatabaseId::Oracle:
                sqlString = 'declare index_cnt int; begin index_cnt := 0; ';
                sqlString += 'select count(*) into index_cnt from all_indexes where UPPER(table_name) = \'SQLSYSTEMVARIABLES\' ';
                sqlString += 'AND UPPER(owner) = UPPER(\'' + xSession::getDbSchema() + '\');';
                sqlString += 'if (index_cnt = 0) then execute immediate \'ALTER TABLE SQLSYSTEMVARIABLES MODIFY ( PARM NVARCHAR2(30), VALUE NVARCHAR2(254) )\';';
                sqlString += 'execute immediate \'create unique index iSV on SQLSYSTEMVARIABLES(PARM)\'; end if; end;';
                break;
            case DatabaseId::MS_Sql_Server:
                sqlString = 'declare @i int ';
                sqlString += 'select @i = count(*) from sysindexes where name = \'iSV\' and id = object_id(\'SQLSYSTEMVARIABLES\') ';
                sqlString += 'if ( @i = 0) begin alter table SQLSYSTEMVARIABLES alter column PARM nvarchar(30); ';
                sqlString += 'alter table SQLSYSTEMVARIABLES alter column VALUE nvarchar(254) end ';
                sqlString += 'else begin select @i = count(*) from sysconstraints where id = object_id(\'SQLSYSTEMVARIABLES\') and (status & 0xf) = 1 ';
                sqlString += ' if ( @i = 0) begin drop index SQLSYSTEMVARIABLES.iSV end end';

                sqlStringPrimaryKey = 'declare @i int ';
                sqlStringPrimaryKey += 'select @i = count(*) from sysconstraints where id = object_id(\'SQLSYSTEMVARIABLES\') and (status & 0xf) = 1 ';
                sqlStringPrimaryKey2 = sqlStringPrimaryKey;
                // Set the column not to take NULl
                sqlStringPrimaryKey += 'if ( @i = 0) begin alter table SQLSYSTEMVARIABLES alter column PARM nvarchar(30) ' + notNull + ' end ';
                // Set the primay key
                sqlStringPrimaryKey2 += 'if ( @i = 0) begin ALTER TABLE SQLSYSTEMVARIABLES ADD CONSTRAINT iSV ' + primaryKey + ' (PARM) end ';
                break;
        }

    // dangerous API mitigation
        ssep =  new SqlStatementExecutePermission(sqlString);
        ssep.assert();
        stmt.executeUpdate(sqlString);
        CodeAccessPermission::revertAssert();

        // Set up the primary key on SQl
        if (dbId == DatabaseId::MS_Sql_Server)
        {
            ssep =  new SqlStatementExecutePermission(sqlStringPrimaryKey);
            ssep.assert();
            stmt.executeUpdate(sqlStringPrimaryKey);
            CodeAccessPermission::revertAssert();

            ssep =  new SqlStatementExecutePermission(sqlStringPrimaryKey2);
            ssep.assert();
            stmt.executeUpdate(sqlStringPrimaryKey2);
            CodeAccessPermission::revertAssert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        static void main(Args args)
    {
        SqlDatabaseInit sv = new SqlDatabaseInit();
        boolean configMode = args.parmEnum();

        ;

        if (configMode)
        {
            // detect which database we're up against
            if (! sv.detectDatabaseVendor(true) )
                return;

            // create the SqlSystemVariables table, and insert the database specific variables
            if (! sv.initSystemVariables() )
                return;
        }
        else
        {
            sv.upgradeSystemVariables();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>