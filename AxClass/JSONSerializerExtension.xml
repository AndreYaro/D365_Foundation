<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JSONSerializerExtension</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Globalization;

class JsonSerializerExtension
{
    System.IO.StringWriter stringWriter;
    Newtonsoft.Json.JsonTextWriter jsonWriter;
    str nullPlaceholder;
    utcDateTime dateTimeBase;
    static Map theDataContractClass;
    static MapEnumerator theDataContractClassEnumerator;
    private static int dateTimeIso8601Type = extendedTypeName2Id(ExtendedTypeStr(DateTimeIso8601));
    private static int dateTimeIso8601WithMillisecondsType = extendedTypeName2Id(ExtendedTypeStr(DateTimeIso8601WithMilliseconds));

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>extendsDateTimeIso8601Type</Name>
				<Source><![CDATA[
    private static boolean extendsDateTimeIso8601Type(int _typeId)
    {
        if (_typeId == 0)
        {
            return false;
        }

        if (_typeId == dateTimeIso8601Type)
        {
            return true;
        }

        DictType dp = new DictType(_typeId);      return dp.isExtendedFrom(ExtendedTypeStr(DateTimeIso8601));
    }

]]></Source>
			</Method>
			<Method>
				<Name>extendsDateTimeIso8601WithMillisecondsType</Name>
				<Source><![CDATA[
    private static boolean extendsDateTimeIso8601WithMillisecondsType(int _typeId)
    {
        if (_typeId == 0)
        {
            return false;
        }

        if (_typeId == dateTimeIso8601WithMillisecondsType)
        {
            return true;
        }

        DictType dp = new DictType(_typeId);
        return dp.isExtendedFrom(ExtendedTypeStr(DateTimeIso8601WithMilliseconds));
    }

]]></Source>
			</Method>
			<Method>
				<Name>json</Name>
				<Source><![CDATA[
    private str json()
    {
        str json;

        json = stringWriter.ToString();
        json = strReplace(json, strFmt('"%1"', nullPlaceholder), 'null');

        return json;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        stringWriter = new System.IO.StringWriter();
        jsonWriter = new Newtonsoft.Json.JsonTextWriter(stringWriter);
        nullPlaceholder = guid2str(newGuid());
        dateTimeBase = JsonSerializerExtension::dateTimeBase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateTimeBase</Name>
				<Source><![CDATA[
    private static utcdatetime dateTimeBase()
    {
        return DateTimeUtil::newDateTime(1\1\1970, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeDataContract</Name>
				<Source><![CDATA[
    private void serializeDataContract(Object _dataContract)
    {
        SysDictClass dictClass;
        DataContractAttribute dataContractAttribute;
        DataMemberAttribute dataMemberAttribute;
        Set methods;
        SetEnumerator se;
        SysDictMethod dictMethod;
        str dataMemberName;
        Object dataMemberValueObject;
        container dataMemberValuePrimitive;

        Map theDataContractClassMember;
        MapEnumerator theDataContractClassMemberEnumerator;
        theDataContractClassMember = new Map(Types::String, Types::AnyType);

        container memberValues;

        if (theDataContractClass == null)
        {
            theDataContractClass = new Map(Types::string, Types::AnyType);
        }

        jsonWriter.WriteStartObject();

        dictClass = new SysDictClass(classIdGet(_dataContract));
            
        dataContractAttribute = dictClass.getAttribute(classStr(DataContractAttribute));
        if (dataContractAttribute == null)
        {
            throw error(strFmt("@SYS134831", dictClass.name(), dictClass.id()));
        }

        // check if it exists if not create it
        if (!theDataContractClass.exists(dictClass.name()))
        {
            methods = dictClass.methods(true, false, true);
            se = methods.getEnumerator();
            while (se.moveNext())
            {
                dictMethod = se.current();
                dataMemberAttribute = dictMethod.getAttribute(classStr(DataMemberAttribute));
                if (dataMemberAttribute != null)
                {
                    dataMemberName = dataMemberAttribute.Name();
                    if (!dataMemberName)
                    {
                        dataMemberName = dictMethod.name();
                    }
                    memberValues = [dataMemberName, dictMethod.name(), dictMethod.returnType(), dictMethod.returnId()];
                    theDataContractClassMember.insert(dataMemberName,memberValues);
                }
                theDataContractClass.insert(dictClass.name(),theDataContractClassMember);
            }
        }

        theDataContractClassMember = theDataContractClass.lookup(dictClass.name());
        theDataContractClassMemberEnumerator = new MapEnumerator(theDataContractClassMember);
        while (theDataContractClassMemberEnumerator.moveNext())
        {
            anytype memberMethodReturn;
            int memberMethodReturnId;
            str memberName;
            str memberMethodName;

            [ memberName, memberMethodName, memberMethodReturn, memberMethodReturnId] = theDataContractClassMemberEnumerator.currentValue();
            jsonWriter.WritePropertyName(memberName);

            if (memberMethodReturn == Types::Class)
            {
                this.serializeObject(dictClass.callObject(memberMethodName, _dataContract));
            }
            else
            {
                this.writePrimitiveValue(memberMethodReturn, dictClass.callObject(memberMethodName, _dataContract), memberMethodReturnId);
            }
        }
        jsonWriter.WriteEndObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeList</Name>
				<Source><![CDATA[
    private void serializeList(List _list, int typeId)
    {
        Types listItemType;
        ListEnumerator le;


        if (_list == null)
        {
            jsonWriter.WriteValue(nullPlaceholder);
            return;
        }

        jsonWriter.WriteStartArray();

        listItemType = _list.typeId();
        le = _list.getEnumerator();
        while (le.moveNext())
        {
            if (listItemType == Types::Class)
            {
                this.serializeObject(le.current());
            }
            else
            {
                this.writePrimitiveValue(listItemType, le.current(), typeId);
            }
        }

        jsonWriter.WriteEndArray();
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeArray</Name>
				<Source><![CDATA[
    private void serializeArray(Array _array, int typeId)
    {
        Types arrayItemType;
        int arrayIndex;

        if (_array == null)
        {
            jsonWriter.WriteValue(nullPlaceholder);
            return;
        }

        jsonWriter.WriteStartArray();

        arrayItemType = _array.typeId();
        for(arrayIndex = 1; arrayIndex <= _array.lastIndex(); arrayIndex++)
        {
            if (arrayItemType == Types::Class)
            {
                this.serializeObject(_array.value(arrayIndex));
            }
            else
            {
                this.writePrimitiveValue(arrayItemType, _array.value(arrayIndex), typeId);
            }
        }

        jsonWriter.WriteEndArray();
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeMap</Name>
				<Source><![CDATA[
    private void serializeMap(Map _map, int typeId)
    {
        Types arrayItemType;
        int arrayIndex;

        if (_map == null)
        {
            jsonWriter.WriteValue(nullPlaceholder);
            return;
        }

        jsonWriter.WriteStartObject();

        Types valueType = _map.valueType();
        Types keyType = _map.keyType();

        MapEnumerator mapEnumerator = new MapEnumerator(_map);

        while (mapEnumerator.moveNext())
        {
            var key = mapEnumerator.currentKey();
            var value = mapEnumerator.currentValue();
            this.writePrimitiveProperty(key, typeId); // Todo: return id
            

            if (valueType == Types::Class || valueType == Types::AnyType)
            {
                this.serializeObject(value);
            }
            else
            {
                this.writePrimitiveValue(valueType, value, typeId); // Todo: return id
            }
        }
        jsonWriter.WriteEndObject();
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeObject</Name>
				<Source><![CDATA[
    private void serializeObject(Object _object)
    {
        ClassId classId;

        if (_object == null)
        {
            jsonWriter.WriteValue(nullPlaceholder);
            return;
        }

        classId = classIdGet(_object);

        switch (classId)
        {
            case classNum(List):
                this.serializeList(_object, 0);
                break;

            case classNum(Array):
                this.serializeArray(_object, 0);
                break;

            case classNum(Map):
                this.serializeMap(_object, 0);
                break;

            default:
                this.serializeDataContract(_object);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeDateTimeValue</Name>
				<Source><![CDATA[
    private void writeDateTimeValue(utcDateTime _value, int typeId)
    {
        str result = this.getDateTimeValue(_value, typeId);
        if (result != null)
        {
            jsonWriter.WriteValue(result);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDateTimeValue</Name>
				<Source><![CDATA[
    private str getDateTimeValue(utcDateTime _value, int typeId)
    {
        str result;
        utcDateTime dateTimeValue = _value;

        if (JsonSerializerExtension::extendsDateTimeIso8601WithMillisecondsType(typeId))
        {
            var dt = Global::utcDateTime2SystemDateTime(dateTimeValue);
            
            result = any2Str(dt);
        }
        else if (JsonSerializerExtension::extendsDateTimeIso8601Type(typeId))
        {
            // If the incoming type is derived from the special DateTimeIso8601Type EDT then assume
            // that the user wants the ISO formating.
            var dt = new System.DateTime(
                        DateTimeUtil::year(_value), DateTimeUtil::month(_value), DateTimeUtil::day(_value),
                        DateTimeUtil::hour(_value), DateTimeUtil::minute(_value), DateTimeUtil::second(_value),
                        System.DateTimeKind::Utc);
            result = any2Str(dt);

        }
        else
        {
            int64 jsDateTimeStamp = DateTimeUtil::getDifference(dateTimeValue, dateTimeBase) * 1000;
            result = strFmt("\/Date(%1)\/", jsDateTimeStamp);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePrimitiveValue</Name>
				<Source><![CDATA[
    private void writePrimitiveValue(Types valueType, anytype _value, int typeId)
    {
        str strValue;
        int intValue;
        int64 int64Value;
        real realValue;
        enumId enumId;
        boolean boolValue;
        str guidValue;
        SysDictEnum dictEnum;

        if (_value != null)
        {
            valueType = typeOf(_value);
        }

        switch (valueType)
        {
            case Types::String:
                strValue = _value;
                jsonWriter.WriteValue(strValue);
                break;

            case Types::Integer:
                intValue = _value;
                jsonWriter.WriteValue(intValue);
                break;

            case Types::Int64:
                int64Value = _value;
                jsonWriter.WriteValue(int64Value);
                break;

            case Types::Real:
                realValue = _value;
                jsonWriter.WriteValue(realValue);
                break;

            case Types::UtcDateTime:
                this.writeDateTimeValue(_value, typeId);
                break;

            case Types::Date:
                this.writeDateTimeValue(DateTimeUtil::newDateTime(_value, 0), typeId);
                break;

            case Types::Enum:
                enumId = DictEnum::value2id(_value);

                if (enumId == enumNum(boolean))
                {
                    boolValue = _value;
                    jsonWriter.WriteValue(boolValue);
                }
                else
                {
                    dictEnum = new SysDictEnum(enumId);
                    if (dictEnum != null)
                    {
                        strValue = dictEnum.value2Symbol(_value);
                        jsonWriter.WriteValue(strValue);
                    }
                    else
                    {
                        throw error(strFmt("@SYS57821", enumId));
                    }
                }

                break;
            
            case Types::Guid:
                guidValue = guid2str(_value);
                jsonWriter.WriteValue(guidValue);
                break;

            default:
                throw error(strFmt("@SYS73815", valueType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>writePrimitiveProperty</Name>
				<Source><![CDATA[
    private void writePrimitiveProperty(anytype _value, int typeId)
    {
        str result;
        str strValue;
        int intValue;
        int64 int64Value;
        real realValue;
        enumId enumId;
        boolean boolValue;
        str guidValue;
        SysDictEnum dictEnum;
        Types valueType;

        if (_value != null)
        {
            valueType = typeOf(_value);
        }

        switch (valueType)
        {
            case Types::String:
                result = _value;
                break;

            case Types::Integer:
            case Types::Int64:
            case Types::Real:
                result = any2Str(_value);
                break;

            case Types::UtcDateTime:
                result = this.getDateTimeValue(_value, typeId);
                break;

            case Types::Date:
                // Todo: typeId?
                result = this.getDateTimeValue(DateTimeUtil::newDateTime(_value, 0), typeId);
                break;

            case Types::Enum:
                enumId = DictEnum::value2id(_value);

                if (enumId == enumNum(boolean))
                {
                    result = any2Str(_value);
                }
                else
                {
                    dictEnum = new SysDictEnum(enumId);
                    if (dictEnum != null)
                    {
                        result = dictEnum.value2Symbol(_value);
                    }
                    else
                    {
                        throw error(strFmt("@SYS57821", enumId));
                    }
                }

                break;
            
            case Types::Guid:
                result = guid2str(_value);
                break;

            default:
                throw error(strFmt("@SYS73815", valueType));
        }
            
        jsonWriter.WritePropertyName(result);
    }

]]></Source>
			</Method>
			<Method>
				<Name>serializeClass</Name>
				<Source><![CDATA[
    public static str serializeClass(Object _object)
    {
        JsonSerializerExtension serializer;

        if (_object == null)
        {
            return 'null';
        }

        serializer = new JsonSerializerExtension();
        serializer.serializeObject(_object);

        return serializer.json();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>