<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransReport_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxTransReport_W</c> class is the child class derived from the <c>TaxTransReport</c> class.
///    It's used to customize filling temporary tables for swedish and finnish functionality.
/// </summary>
class TaxTransReport_W extends TaxTransReport
{
    CurrencyCode        taxCurrencyCode, reportingCurrencyCode;
    boolean             currencyRateOnReportingDate;
    TransDate           reportingDate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the amount in the tax transactions according to the parameters set by the user.
    /// </summary>
    /// <param name="_taxTrans">
    ///    Tax transaction to process.
    /// </param>
    /// <returns>
    ///    Processed tax transaction.
    /// </returns>
    private TaxTrans processAmounts(TaxTrans   _taxTrans)
    {
        CurrencyCode    companyCurrencyCode = CompanyInfoHelper::standardCurrency();
        TransDate       convertDate;
        ;
        if (taxCurrencyCode == reportingCurrencyCode)
        {
            _taxTrans.TaxAmount         = _taxTrans.TaxAmountCur;
            _taxTrans.TaxBaseAmount     = _taxTrans.TaxBaseAmountCur;
            _taxTrans.TaxInCostPriceMST = _taxTrans.TaxInCostPriceCur;
        }
        else
        {
            convertDate = currencyRateOnReportingDate ? reportingDate : _taxTrans.TransDate;

            _taxTrans.TaxAmount         = CurrencyExchangeHelper::curAmount2CurAmount(_taxTrans.TaxAmount, companyCurrencyCode, reportingCurrencyCode, convertDate);
            _taxTrans.TaxBaseAmount     = CurrencyExchangeHelper::curAmount2CurAmount(_taxTrans.TaxBaseAmount, companyCurrencyCode, reportingCurrencyCode, convertDate);
            _taxTrans.TaxInCostPriceMST = CurrencyExchangeHelper::curAmount2CurAmount(_taxTrans.TaxInCostPriceMST, companyCurrencyCode, reportingCurrencyCode, convertDate);
        }

        return _taxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxAmountByReportId_Table</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a table containing records with all reportIds and Amounts for a given period.
    /// </summary>
    /// <param name="_fromDate">
    /// Period start date.
    /// </param>
    /// <param name="_toDate">
    /// Period end date.
    /// </param>
    /// <param name="_taxPeriod">
    /// Tax period.
    /// </param>
    /// <param name="_taxRepVersion">
    /// Sales tax payment version.
    /// </param>
    /// <param name="_taxRepCounter">
    /// Tax report version.
    /// </param>
    /// <param name="_reported">
    /// Parameter showing if the tax report was called with <c>update</c> parameter.
    /// </param>
    /// <param name="_debitCredit">
    /// Debit/credit.
    /// </param>
    /// <param name="_versionMin">
    /// Report min version.
    /// </param>
    /// <param name="_versionMax">
    /// Report max version.
    /// </param>
    /// <returns>
    /// Table containing records with all reportIds and Amounts for a given period.
    /// </returns>
    TmpTaxReportById taxAmountByReportId_Table(
        TransDate           _fromDate,
        TransDate           _toDate,
        TaxPeriod           _taxPeriod,
        TaxRepVersion       _taxRepVersion,
        TaxVersion          _taxRepCounter,
        NoYes               _reported,
        DebCredProposal     _debitCredit,
        Counter             _versionMin,
        Counter             _versionMax
        )
    {
        TaxTrans            taxTrans;
        TmpTaxReportById    tmpTaxReportById;
        boolean             useVatDueDate_W = TaxParameters::reportUseVatDueDate_W();
        TaxTrans_W          taxTrans_W;
        ;

        taxCurrencyCode             = propertiesBag.parmTaxCurrencyCode();
        reportingCurrencyCode       = propertiesBag.parmReportingCurrencyCode();
        currencyRateOnReportingDate = propertiesBag.parmCurrencyRateOnReportingDate();
        reportingDate               = propertiesBag.parmReportingDate();

        ttsbegin;

        if (_debitCredit == DebCredProposal::None ||
            _debitCredit == DebCredProposal::Debit)
        {
            if (!useVatDueDate_W)
            {
                //Selects only transactions that are not caused by credit notes.
                while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST), sum(TaxAmountCur), sum(TaxBaseAmountCur), sum(TaxInCostPriceCur)
                     from taxTrans
                     group by TaxDirection, TaxCode, TaxOrigin, TransDate
                     // <GEEU>
                     where (taxTrans.TransDate       >= _fromDate                       &&
                           taxTrans.TransDate       <= _toDate)                        &&
                    // </GEEU>
                           taxTrans.TaxPeriod       == _taxPeriod       &&
                           taxTrans.TaxRepCounter   >= _versionMin      &&
                           taxTrans.TaxRepCounter   <= _versionMax      &&
                           taxTrans.Source          != TaxModuleType::Tax &&
                          (taxTrans.CurrencyCode    == taxCurrencyCode                 ||
                           taxCurrencyCode          == "")                             &&
                          (((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)    &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                          ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)    &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                           ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)   &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                           ((taxTrans.TaxBaseAmount   > 0 || taxTrans.TaxAmount > 0)   &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                {
                    taxTrans = this.processAmounts(taxTrans);
                    tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::No);
                }
            }
            else
            {
                //Selects only transactions that are not caused by credit notes.
                while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST), sum(TaxAmountCur), sum(TaxBaseAmountCur), sum(TaxInCostPriceCur)
                     from taxTrans
                     group by TaxDirection, TaxCode, TaxOrigin, TransDate
                     // <GEEU>
                     where !taxTrans.PostponeVAT                                        &&
                    // </GEEU>
                           taxTrans.TaxPeriod       == _taxPeriod       &&
                           taxTrans.TaxRepCounter   >= _versionMin      &&
                           taxTrans.TaxRepCounter   <= _versionMax      &&
                           taxTrans.Source          != TaxModuleType::Tax &&
                          (taxTrans.CurrencyCode    == taxCurrencyCode                 ||
                           taxCurrencyCode          == "")                             &&
                          (((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)    &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                          ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)    &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax            ||
                            taxTrans.TaxDirection   == TaxDirection::TaxTransaction))  ||
                           ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)   &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                           ((taxTrans.TaxBaseAmount   > 0 || taxTrans.TaxAmount > 0)   &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                        // <GEEU>
                        join RecId from taxTrans_W
                            where taxTrans_W.TaxTrans == taxTrans.RecId
                                && (useVatDueDate_W
                                && taxTrans_W.VatDueDate_W    >= _fromDate
                                && taxTrans_W.VatDueDate_W    <= _toDate)
                        // </GEEU>
                {
                    taxTrans = this.processAmounts(taxTrans);
                    tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::No);
                }
            }
        }

        if (_debitCredit == DebCredProposal::None ||
            _debitCredit == DebCredProposal::Credit)
        {
            if (!useVatDueDate_W)
            {
                //Selects only transactions there is caused by credit notes.
                while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST), sum(TaxAmountCur), sum(TaxBaseAmountCur), sum(TaxInCostPriceCur)
                     from taxTrans
                     group by TaxDirection, TaxCode, TransDate
                     // <GEEU>
                     where (taxTrans.TransDate       >= _fromDate                       &&
                           taxTrans.TransDate       <= _toDate)                        &&
                     // </GEEU>
                           taxTrans.TaxPeriod       == _taxPeriod       &&
                           taxTrans.TaxRepCounter   >= _versionMin      &&
                           taxTrans.TaxRepCounter   <= _versionMax      &&
                           taxTrans.Source          != TaxModuleType::Tax              &&
                          (taxTrans.CurrencyCode    == taxCurrencyCode                 ||
                           taxCurrencyCode          == "")                             &&
                          (((taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0)     &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                           ((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)    &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                           ((taxTrans.TaxBaseAmount   > 0 || taxTrans.TaxAmount > 0)   &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                           ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)   &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                {
                    taxTrans = this.processAmounts(taxTrans);
                    tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::Yes);
                }
            }
            else
            {
                //Selects only transactions there is caused by credit notes.
                while select sum(TaxAmount), sum(TaxBaseAmount), sum(TaxInCostPriceMST), sum(TaxAmountCur), sum(TaxBaseAmountCur), sum(TaxInCostPriceCur)
                     from taxTrans
                     group by TaxDirection, TaxCode, TransDate
                     // <GEEU>
                     where !taxTrans.PostponeVAT                                        &&
                     // </GEEU>
                           taxTrans.TaxPeriod       == _taxPeriod       &&
                           taxTrans.TaxRepCounter   >= _versionMin      &&
                           taxTrans.TaxRepCounter   <= _versionMax      &&
                           taxTrans.Source          != TaxModuleType::Tax              &&
                          (taxTrans.CurrencyCode    == taxCurrencyCode                 ||
                           taxCurrencyCode          == "")                             &&
                          (((taxTrans.TaxBaseAmount < 0 || taxTrans.TaxAmount < 0)     &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                           ((taxTrans.TaxBaseAmount  > 0 || taxTrans.TaxAmount > 0)    &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::IncomingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::UseTax))          ||
                           ((taxTrans.TaxBaseAmount   > 0 || taxTrans.TaxAmount > 0)   &&
                            taxTrans.TaxOrigin      != TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales))  ||
                           ((taxTrans.TaxBaseAmount   < 0 || taxTrans.TaxAmount < 0)   &&
                            taxTrans.TaxOrigin      == TaxOrigin::TaxReversed          &&
                           (taxTrans.TaxDirection   == TaxDirection::OutgoingTax       ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptPurchase ||
                            taxTrans.TaxDirection   == TaxDirection::TaxExemptSales)))
                         // <GEEU>
                        outer join Recid from taxTrans_W
                            where taxTrans_W.TaxTrans == taxTrans.RecId
                                && (useVatDueDate_W
                                && taxTrans_W.VatDueDate_W    >= _fromDate
                                && taxTrans_W.VatDueDate_W    <= _toDate)
                        // </GEEU>
                {
                    taxTrans = this.processAmounts(taxTrans);
                    tmpTaxReportById = taxTrans.taxAmountByTaxDirectionAndReportId(tmpTaxReportById, NoYes::Yes);
                }
            }
        }

        ttscommit;
        return tmpTaxReportById;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>