<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjWorkerLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ProjWorkerLookup
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    public void updateQuery(Query _query, Args _args)
    {
        ProjValCheckTrans       projValTrans;
        QueryBuildDataSource    qbdsHcmWorker;
        QueryBuildDataSource    qbdsResourceWorker;
        QueryBuildDataSource    qbdsProjEmployeeAssoc;
        QueryBuildDataSource    qbdsProjEmplCategoryAssoc;

        ProjCategoryId          categoryId;
        ProjId                  projId;
        boolean                 serviceItem;

        boolean                 createProjConnection;
        boolean                 createCategoryConnection;

        if (_args && _args.dataset())
        {
            projValTrans    = new ProjValCheckTrans();
            if (projValTrans.checkBuffer(_args))
            {
                projValTrans.setVariablesFromBuffer(_args);
            }

            projId          = projValTrans.parmProjId();
            categoryId      = projValTrans.parmCategoryId();
            serviceItem     = projValTrans.parmServiceItem();

            qbdsHcmWorker = _query.dataSourceTable(tableNum(HcmWorker));

            createProjConnection = (projId && ResourceLookup::createProjConnection() ? true : false);
            createCategoryConnection = (categoryId && !serviceItem && ResourceLookup::createCategoryConnection() ? true : false);

            if (createProjConnection || createCategoryConnection)
            {
                qbdsResourceWorker = qbdsHcmWorker.addDataSource(tableNum(ResourceWorkerView));
                qbdsResourceWorker.relations(false);
                qbdsResourceWorker.joinMode(JoinMode::InnerJoin);
                qbdsResourceWorker.addLink(fieldNum(HcmWorker, RecId), fieldNum(ResourceWorkerView, Worker));
            }

            if (createProjConnection)
            {
                qbdsProjEmployeeAssoc = qbdsResourceWorker.addDataSource(tableNum(ProjProjectEmployeeAssoc));
                qbdsProjEmployeeAssoc.relations(false);
                qbdsProjEmployeeAssoc.joinMode(JoinMode::ExistsJoin);
                qbdsProjEmployeeAssoc.addLink(fieldNum(ResourceWorkerView, RecId), fieldNum(ProjProjectEmployeeAssoc, Resource));
                qbdsProjEmployeeAssoc.addRange(fieldNum(ProjProjectEmployeeAssoc, ProjId)).value(projId);
            }

            if (createCategoryConnection)
            {
                qbdsProjEmplCategoryAssoc = qbdsResourceWorker.addDataSource(tableNum(ProjEmplCategoryAssoc));
                qbdsProjEmplCategoryAssoc.relations(false);
                qbdsProjEmplCategoryAssoc.joinMode(JoinMode::ExistsJoin);
                qbdsProjEmplCategoryAssoc.addLink(fieldNum(ResourceWorkerView, RecId), fieldNum(ProjEmplCategoryAssoc, Resource));
                qbdsProjEmplCategoryAssoc.addRange(fieldNum(ProjEmplCategoryAssoc, CategoryId)).value(categoryId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getHcmWorkerLookup</Name>
				<Source><![CDATA[
    private static HcmWorkerLookup getHcmWorkerLookup(Common _record = null, boolean _lockLegalEntityFilters = true)
    {
        ProjParameters  projParameters = ProjParameters::find();

        if (ProjWorkerLookup::showOnlyActiveWorkers(_record.TableId) ||
       (ProjWorkerLookup::isJournal(_record.TableId) && projParameters.ShowInactiveEmployees == NoYes::No))
        {
            if (_lockLegalEntityFilters)
            {
                return HcmWorkerLookup::newOnlyActiveWorkersWithinCompany();
            }
            else
            {
                return HcmWorkerLookup::newOnlyActiveWorkers();
            }
        }

        return HcmWorkerLookup::newAllWorkersWithinCompany(_lockLegalEntityFilters);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournal</Name>
				<Source><![CDATA[
    private static boolean isJournal(TableId _tmpTableId)
    {
        boolean ret = false;

        if (_tmpTableId == tableNum(ProjJournalTrans)        ||
        _tmpTableId == tableNum(InventJournalTrans)      ||
        _tmpTableId == tableNum(LedgerJournalTrans)      ||
        _tmpTableId == tableNum(TmpProjAdjustmentCreate) ||
        _tmpTableId == tableNum(SalesTable)              ||
        _tmpTableId == tableNum(SalesLine)               ||
        _tmpTableId == tableNum(PurchTable)              ||
        _tmpTableId == tableNum(ProjForecastEmpl)        ||
        _tmpTableId == tableNum(ProjForecastRevenue)     ||
        _tmpTableId == tableNum(ProjJournalTable)        ||
        _tmpTableId == tableNum(ProjForecastCost)        ||
        _tmpTableId == tableNum(SMAServiceOrderLine)     ||
        _tmpTableId == tableNum(SMAAgreementLine)        ||
        _tmpTableId == tableNum(SMAServiceOrderTable)    ||
        _tmpTableId == tableNum(SMAAgreementTable)       ||
        _tmpTableId == tableNum(SalesQuotationLine)      ||
        _tmpTableId == tableNum(LedgerJournalTrans_Project)
        )
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the worker lookup with an applied filter to restrict the lookup to the specified subset of
    /// workers.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The form control that opens the worker lookup.
    /// </param>
    /// <param name="_record">
    /// A table buffer.
    /// </param>
    /// <param name="_lockLegalEntityFilters">
    /// true if you want disable legal entity filters. otherwise false
    /// </param>
    /// <returns>
    /// A <c>HcmWorker</c> record buffer that references the selected record.
    /// </returns>
    public static HcmWorker lookupWorker(FormReferenceControl _formReferenceControl, Common _record = null, boolean _lockLegalEntityFilters = true)
    {
        HcmWorkerLookup   hcmWorkerLookup = ProjWorkerLookup::workerLookup(_record, _lockLegalEntityFilters);
        return hcmWorkerLookup.lookupWorker(_formReferenceControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupResourceWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Opens the worker lookup for a new resource with an applied filter to restrict the lookup to the specified subset of
    /// workers.
    /// </summary>
    /// <param name="_callerFormControl">
    /// The form control that opens the worker lookup.
    /// </param>
    /// <param name="_record">
    /// A table buffer.
    /// </param>
    /// <param name="_lockLegalEntityFilters">
    /// true if you want to disable legal entity filters. otherwise false
    /// </param>
    /// <returns>
    /// A <c>HcmWorker</c> record buffer that references the selected record.
    /// </returns>
    public static HcmWorker lookupResourceWorker(FormControl _callerFormControl, Common _record = null, boolean _lockLegalEntityFilters = true)
    {
        HcmWorkerLookup   hcmWorkerLookup = ProjWorkerLookup::resourceWorkerLookup(_record, _lockLegalEntityFilters);
        return hcmWorkerLookup.lookupWorker(_callerFormControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showOnlyActiveWorkers</Name>
				<Source><![CDATA[
    private static boolean showOnlyActiveWorkers(TableId _tmpTableId)
    {
        boolean ret = false;

        if (_tmpTableId == tableNum(SalesQuotationTable)    ||
            _tmpTableId == tableNum(TSAppEmplSub)           ||
            _tmpTableId == tableNum(ProjTable))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorker</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a given <c>ProjWorkerRecId</c> is valid under the filter restrictions of the
    /// lookup object.
    /// </summary>
    /// <param name="_workerRecId">
    /// The record ID of the <c>HcmWorker</c> to validate.
    /// </param>
    /// <param name="_record">
    /// A table buffer.
    /// </param>
    /// <param name="_lockLegalEntityFilters">
    /// true to allow workers only on the current legal entity; false to allow workers from other LE's.
    /// </param>
    /// <returns>
    /// true if the worker is valid under the filter restrictions; otherwise, false.
    /// </returns>
    public static boolean validateWorker(ProjWorkerRecId _workerRecId, Common _record = null, boolean _lockLegalEntityFilters = true)
    {
        boolean ret = true;
        HcmWorkerLookup   hcmWorkerLookup = ProjWorkerLookup::workerLookup(_record, _lockLegalEntityFilters);

        if (!hcmWorkerLookup.validateWorker(_workerRecId))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workerLookup</Name>
				<Source><![CDATA[
    private static HcmWorkerLookup workerLookup(Common _record = null, boolean _lockLegalEntityFilters = true)
    {
        HcmWorkerLookup         workerLookup;
        Args                    args = new Args();
        Query                   query = new Query();
        ProjWorkerLookup        projWorkerLookup = new ProjWorkerLookup();

        workerLookup = ProjWorkerLookup::getHcmWorkerLookup(_record, _lockLegalEntityFilters);
        query = workerLookup.updateQuery();

        args.record(_record);
        projWorkerLookup.updateQuery(query, args);

        return workerLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resourceWorkerLookup</Name>
				<Source><![CDATA[
    private static HcmWorkerLookup resourceWorkerLookup(Common _record = null, boolean _lockLegalEntityFilters = true)
    {
        HcmWorkerLookup         workerLookup;

        if (_lockLegalEntityFilters)
        {
            workerLookup = HcmWorkerLookup::newOnlyActiveWorkersWithinCompany();
        }
        else
        {
            workerLookup = HcmWorkerLookup::newOnlyActiveWorkers();
        }

        Query query = workerLookup.updateQuery();

        // Building query for filtering out the workers who are already a resource.
        QueryBuildDataSource dsEmployment = query.dataSourceTable(tableNum(HcmEmployment));

        QueryBuildDataSource dsCreatedResources = dsEmployment.addDataSource(tablenum(ResourceWorkerView));
        dsCreatedResources.addLink(fieldNum(HcmEmployment, Worker), fieldNum(ResourceWorkerView, Worker));
        dsCreatedResources.addLink(fieldNum(HcmEmployment, LegalEntity), fieldNum(ResourceWorkerView, ResourceLegalEntity));
        dsCreatedResources.joinMode(JoinMode::NoExistsJoin);

        QueryBuildDataSource dsWorkerView = query.dataSourceTable(tablenum(HcmWorker)).addDataSource(tableNum(HcmWorkerCubeDimension));
        dsWorkerView.addLink(fieldNum(HcmWorker, PersonnelNumber), fieldNum(HcmWorkerCubeDimension, PersonnelNumber));
        dsWorkerView.joinMode(JoinMode::ExistsJoin);

        return workerLookup;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>