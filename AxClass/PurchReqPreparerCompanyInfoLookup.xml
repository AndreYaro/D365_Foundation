<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchReqPreparerCompanyInfoLookup</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchReqPreparerCompanyInfo</c> class is used to look up and validate the default legal
/// entity on <c>PurchReqTable</c> records.
/// </summary>
class PurchReqPreparerCompanyInfoLookup
{
    Query               companyInfoQuery;
    Set                 dataAreaSet;
    boolean             dataFetched;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        dataFetched
    ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fetchData</Name>
				<Source><![CDATA[
        private void fetchData(HcmWorkerRecId _preparer)
    {
        CompanyInfo                      companyInfo;
        PurchReqAuthorizationOrigination origination;
        int64                            totalCompanies;
        QueryBuildDataSource             qbds;
        SetEnumerator                    se;
        Set                              hcmWorkerCompanySet;

        boolean insertForWorker(HcmWorkerRecId _hcmWorker)
        {
            hcmWorkerCompanySet = Set::create(PurchReqInternalOrgManager_LegalEntity::createRequisitionerList(_hcmWorker));

            dataAreaSet = Set::union(dataAreaSet, hcmWorkerCompanySet);

            if (dataAreaSet.elements() == totalCompanies)
            {
                //we have already selected all possible companies.
                return false;
            }

            return true;
        }

        dataFetched         = true;

        select count(RecId) from companyInfo;

        totalCompanies = companyInfo.RecId;

        if (insertForWorker(_preparer))
        {
            while select origination where origination.Originator == _preparer
            {
                if (!insertForWorker(origination.Requisitioner))
                {
                    break;
                }
            }
        }

        qbds = companyInfoQuery.addDataSource(tableNum(CompanyInfo));

        se = dataAreaSet.getEnumerator();

        while (se.moveNext())
        {
            //since the number of companies is not a huge number, adding range in this pattern should not affect performance.
            qbds.addRange(fieldNum(CompanyInfo, RecId)).value(queryValue(se.current()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a lookup on the company information table.
    /// </summary>
    /// <param name="_formReferenceControl">
    /// The reference to the calling form reference control from where the lookup was requested.
    /// </param>
    /// <param name="_preparer">
    /// The record ID of the worker that is preparing the purchase requisition.
    /// </param>
    /// <returns>
    /// A record in the <c>CompanyInfo</c> table.
    /// </returns>
    public Common lookup(FormReferenceControl _formReferenceControl, HcmWorkerRecId _preparer)
    {
        SysReferenceTableLookup referenceTablLookup = SysReferenceTableLookup::newParameters(tableNum(CompanyInfo), _formReferenceControl);

        if (!dataFetched)
        {
            this.fetchData(_preparer);
        }

        referenceTablLookup.parmQuery(companyInfoQuery);

        referenceTablLookup.addLookupfield(fieldNum(CompanyInfo, DataArea));
        referenceTablLookup.addLookupfield(fieldNum(CompanyInfo, Name));

        return referenceTablLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        dataFetched       = false;
        companyInfoQuery  = new Query();
        dataAreaSet       = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes the current instance of the PurchReqPreparerCompanyInfoLookup class
    /// </summary>
    /// <returns>
    /// A container that contains the current instance of the PurchReqPreparerCompanyInfoLookup class
    /// </returns>
    public container pack()
    {
        return [ #CurrentVersion, #CurrentList, companyInfoQuery.pack(), dataAreaSet.pack() ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        private boolean unpack(container _pack)
    {
        boolean   ret     = false;
        int       version = conPeek(_pack, 1);
        container packedQuery;
        container packedDataAreaSet;

        switch (version)
        {
            case #CurrentVersion:
                [ version, #CurrentList, packedQuery, packedDataAreaSet ] = _pack;
                dataAreaSet      = Set::create(packedDataAreaSet);
                companyInfoQuery = new Query(packedQuery);
                ret              = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the reference to a <c>CompanyInfo</c> record.
    /// </summary>
    /// <param name="_companyInfoRecId">
    /// The ID of the <c>CompanyInfo</c> record to validate.
    /// </param>
    /// <param name="_preparer">
    /// The record ID of the worker that is creating the purchase requisition.
    /// </param>
    /// <returns>
    /// true if the reference is valid; otherwise, false.
    /// </returns>
    public boolean validate(CompanyInfoRecId _companyInfoRecId, HcmWorkerRecId _preparer)
    {
        if (!dataFetched)
        {
            this.fetchData(_preparer);
        }

        if (!dataAreaSet.in(_companyInfoRecId))
        {
            //Invalid buying legal entity
            return checkFailed("@SYS342434");
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>PurchReqPreparerCompanyInfoLookup</c> class from the container that
    /// was obtained from a prior call to the <c>PurchReqPreparerCompanyInfoLookup.pack</c> method.
    /// </summary>
    /// <param name="_pack">
    /// The container that holds the packed instance of the <c>PurchReqPreparerCompanyInfoLookup</c> class.
    /// </param>
    /// <returns>
    /// A <c>PurchReqPreparerCompanyInfoLookup</c> object, which is the same as the one returned by the
    /// <c>PurchReqPreparerCompanyInfoLookup.pack</c> method.
    /// </returns>
    public static PurchReqPreparerCompanyInfoLookup create(container _pack)
    {
        boolean unpackSuccessful;

        PurchReqPreparerCompanyInfoLookup purchReqPreparerCompanyInfoLookup =
            new PurchReqPreparerCompanyInfoLookup();

        unpackSuccessful = purchReqPreparerCompanyInfoLookup.unpack(_pack);

        return unpackSuccessful ? purchReqPreparerCompanyInfoLookup : null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>