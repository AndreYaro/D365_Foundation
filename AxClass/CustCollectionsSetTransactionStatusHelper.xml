<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsSetTransactionStatusHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is the helper class for <c>CustCollectionsSetTransactionStatus</c> form it controls the
/// visibility of fields and the process of updating the transaction status and creating associated activities
/// </summary>
class CustCollectionsSetTransactionStatusHelper
{
    CustCollectionsISetTransactionStatusCallerForm callerForm;
    FormDataSource custTrans_ds;
    Set validReasons;

    FormCheckBoxControl actionForStatusChange, createFollowUpTask, sendEmailToSalesPerson;

    FormComboBoxControl collectionsStatus;

    FormStringControl reasonCode, reasonComment, userMemo;

    FormDateControl followUpAndPromiseToPay;

    FormRealControl amountCurControl;

    FormCommandButtonControl okButton;

    boolean actionForStatusChangeValue, sendEmailToSalesPersonValue, createFollowUpTaskValue;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        actionForStatusChangeValue,
        sendEmailToSalesPersonValue,
        createFollowUpTaskValue
    #ENDMACRO

    #LOCALMACRO.CurrentListValues
        actionForStatusChange.value(),
        sendEmailToSalesPerson.value(),
        createFollowUpTask.value()
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new (FormRun _caller, FormDataSource _custTrans_ds)
    {
        if (_caller is CustCollectionsISetTransactionStatusCallerForm)
        {
            this.parmCallerForm(_caller as CustCollectionsISetTransactionStatusCallerForm);
        }

        custTrans_ds = _custTrans_ds;

        validReasons = new Set(Types::String);

        validReasons.add(''); // blank is allowed

        ReasonTable reasonTable;

        while select Reason from reasonTable
            where reasonTable.Bank == NoYes::Yes || reasonTable.Cust == NoYes::Yes
        {
            validReasons.add(reasonTable.Reason);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a new instance of <c>CustCollectionsSetTransactionStatusHelper</c>
    /// </summary>
    /// <param name = "_caller">The caller of the form that the helper is being used on</param>
    /// <param name = "_custTrans_ds">The <c>CustTrans</c> data source on the calling form</param>
    /// <returns>A new instance of <c>CustcollectionsSEtTransactionStatusHelper</c></returns>
    public static CustCollectionsSetTransactionStatusHelper construct(FormRun _caller, FormDataSource _custTrans_ds)
    {
        return new CustCollectionsSetTransactionStatusHelper(_caller, _custTrans_ds);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerForm</Name>
				<Source><![CDATA[
    public CustCollectionsISetTransactionStatusCallerForm parmCallerForm(CustCollectionsISetTransactionStatusCallerForm _callerForm = callerForm)
    {
        if (!prmIsDefault(_callerForm))
        {
            callerForm = _callerForm;
        }

        return callerForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the <c>ResonCode</c> control
    /// </summary>
    /// <param name = "_control">The <c>FormStringControl</c> used for Reason code entry</param>
    public FormStringControl parmReasonCode(FormStringControl _control = reasonCode)
    {
        if (!prmIsDefault(_control))
        {
            reasonCode = _control;
        }

        return reasonCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReasonComment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the <c>ReasonComment</c> control
    /// </summary>
    /// <param name = "_control">The <c>FormStringControl</c> used for Reason comment entry</param>
    public FormStringControl parmReasonComment(FormStringControl _control = reasonComment)
    {
        if (!prmIsDefault(_control))
        {
            reasonComment = _control;
        }

        return reasonComment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserMemo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the user memo control
    /// </summary>
    /// <param name = "_control">The <c>FormStringControl</c> used for user memo entry</param>
    public FormStringControl parmUserMemo(FormStringControl _control = userMemo)
    {
        if (!prmIsDefault(_control))
        {
            userMemo = _control;
        }

        return userMemo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActionForStatusChange</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the check box for creating actions when the status is changed
    /// </summary>
    /// <param name = "_control">The <c>FormCheckBoxControl</c> that determines if an action will be created</param>
    public FormCheckBoxControl parmActionForStatusChange(FormCheckBoxControl _control = actionForStatusChange)
    {
        if (!prmIsDefault(_control))
        {
            actionForStatusChange = _control;
        }

        return actionForStatusChange;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateFollowUpTask</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the check box for creating follow up tasks
    /// </summary>
    /// <param name = "_control">The <c>FormCheckBoxControl</c> that determines if a task will be created</param>
    public FormCheckBoxControl parmCreateFollowUpTask(FormCheckBoxControl _control = createFollowUpTask)
    {
        if (!prmIsDefault(_control))
        {
            createFollowUpTask = _control;
        }

        return createFollowUpTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSendEmailToSalesPerson</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the check box for sending an email to the sales person
    /// </summary>
    /// <param name = "_control">The <c>FormCheckBoxControl</c> that determines if an email will be sent</param>
    public FormCheckBoxControl parmSendEmailToSalesPerson(FormCheckBoxControl _control = sendEmailToSalesPerson)
    {
        if (!prmIsDefault(_control))
        {
            sendEmailToSalesPerson = _control;
        }

        return sendEmailToSalesPerson;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollectionsStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the combo box used to determine the status
    /// </summary>
    /// <param name = "_control">The <c>FormComboBoxControl</c> used to set the status of the transaction</param>
    public FormComboBoxControl parmCollectionsStatus(FormComboBoxControl _control = collectionsStatus)
    {
        if (!prmIsDefault(_control))
        {
            collectionsStatus = _control;
        }

        return collectionsStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFollowUpAndPromiseToPay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the date control used to determine the promise to pay date or the follow up date
    /// </summary>
    /// <param name = "_control">The <c>FormDateControl</c> used to determine the follow up date</param>
    public FormDateControl parmFollowUpAndPromiseToPay(FormDateControl _control = followUpAndPromiseToPay)
    {
        if (!prmIsDefault(_control))
        {
            followUpAndPromiseToPay = _control;
        }

        return followUpAndPromiseToPay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAmountCurControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the control that holds the promise to pay or disputed amount
    /// </summary>
    /// <param name = "_control">The <c>FormRealControl</c> used to set the value</param>
    public FormRealControl parmAmountCurControl(FormRealControl _control = amountCurControl)
    {
        if (!prmIsDefault(_control))
        {
            amountCurControl = _control;
        }

        return amountCurControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOkButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets and sets the ok button control
    /// </summary>
    /// <param name = "_control">The <c>FormCommandButtonControl</c> when clicked updates the status</param>
    public FormCommandButtonControl parmOkButton(FormCommandButtonControl _control = okButton)
    {
        if (!prmIsDefault(_control))
        {
            okButton = _control;
        }

        return okButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>packValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// This packs the values of check box controls to be saved when the form is closed
    /// </summary>
    /// <returns><c>container</c> having the check box control values [CreateActivity, SendEmailToSalesPerson, CreateFollowUpTask]</returns>
    public container packValues()
    {
        [#CurrentList] = [#CurrentListValues];
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpacks and sets the values of the check boxs when the form is opened
    /// </summary>
    /// <param name = "_values"><c>container</c> having the check box control values [CreateActivity, SendEmailToSalesPerson, CreateFollowUpTask]</param>
    public void unpackValues(container _values)
    {
        Version version = RunBase::getVersion(_values);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _values;
                break;
            default:
                [#CurrentList] = [true, false, true];
                break;
        }

        actionForStatusChange.checked(actionForStatusChangeValue);

        if (sendEmailToSalesPerson.enabled())
        {
            sendEmailToSalesPerson.checked(sendEmailToSalesPersonValue);
        }

        createFollowUpTask.checked(createFollowUpTaskValue);

        if (!(actionForStatusChange.checked() || (createFollowUpTask.visible() && createFollowUpTask.checked())))
        {
            userMemo.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes and defaults the controls on the form
    /// </summary>
    public void init()
    {
        CustVendDisputeStatus newStatus;
        CustDispute custDispute = CustDispute::findByCustTrans(custTrans_ds.cursor().RecId);

        switch (custDispute.Status)
        {
            case CustVendDisputeStatus::None:
                newStatus = CustVendDisputeStatus::Disputed;
                break;
            case CustVendDisputeStatus::Disputed:
                newStatus = CustVendDisputeStatus::Resolved;
                break;
            case CustVendDisputeStatus::PromiseToPay:
                if (custDispute.FollowUpDate < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
                {
                    newStatus = CustVendDisputeStatus::PromiseToPayBroken;
                }
                else
                {
                    newStatus = CustVendDisputeStatus::PromiseToPayKept;
                }

                break;
            case CustVendDisputeStatus::PromiseToPayKept:
                newStatus = CustVendDisputeStatus::Resolved;
                break;
            case CustVendDisputeStatus::PromiseToPayBroken:
                newStatus = CustVendDisputeStatus::Resolved;
                break;
            case CustVendDisputeStatus::Resolved:
                newStatus = CustVendDisputeStatus::None;
                break;
        }

        collectionsStatus.selection(enum2Int(newStatus));

        if (this.parmCallerForm())
        {
            sendEmailToSalesPerson.enabled(this.parmCallerForm().canSendEMailToSalesperson());
            sendEmailToSalesPerson.value(sendEmailToSalesPerson.enabled());
        }

        this.enableControls();
        this.defaultControls();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables the controls on the form
    /// </summary>
    public void enableControls()
    {
        boolean followUpDateVisible, amountCurVisible, createTaskVisible;

        switch (any2Enum(collectionsStatus.selection()))
        {
            case CustVendDisputeStatus::PromiseToPayBroken:
                createTaskVisible = true;
                followUpDateVisible = true;
                amountCurVisible = false;
                break;
            case CustVendDisputeStatus::None, CustVendDisputeStatus::PromiseToPayKept, CustVendDisputeStatus::Resolved:
                followUpDateVisible = false;
                amountCurVisible = false;
                break;
            case CustVendDisputeStatus::Disputed, CustVendDisputeStatus::PromiseToPay:
                createTaskVisible = true;
                followUpDateVisible = true;
                amountCurVisible = true;
                break;
        }

        followUpAndPromiseToPay.visible(followUpDateVisible);
        amountCurControl.visible(amountCurVisible);

        createFollowUpTask.visible(createTaskVisible);

        if (actionForStatusChange.checked() || (createFollowUpTask.visible() && createFollowUpTask.checked()))
        {
            userMemo.visible(true);
        }
        else
        {
            userMemo.visible(false);
            userMemo.text('');
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultControls</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defaults the values of the controls on the form
    /// </summary>
    public void defaultControls()
    {
        boolean isDisputed = (any2Enum(collectionsStatus.selection()) == CustVendDisputeStatus::Disputed);
        boolean isResolved = (collectionsStatus.selection() == CustVendDisputeStatus::Resolved);

        if (amountCurControl.visible())
        {
            boolean enabledAmountControl;
            Amount amountValue;
            str label, multiSelectMessage;

            if (custTrans_ds && custTrans_ds.getFirst(true) && custTrans_ds.getNext())
            {
                enabledAmountControl = false;
                amountValue = 0.0;
                multiSelectMessage = strFmt("@AccountsReceivable:CustCollectionsSetTransactionStatusMsgMultiSelect", (isDisputed ? "@AccountsReceivable:LowerCaseDisputed" : "@AccountsReceivable:LowerCasePromised"));
            }
            else
            {
                CustTrans custTrans = custTrans_ds.cursor();
                enabledAmountControl = true;
                amountValue = custTrans.remainAmountCur();
            }

            label = strFmt('%1 %2', (isDisputed ? enum2Str(CustVendDisputeStatus::Disputed) : enum2Str(CustVendDisputeStatus::PromiseToPay)), "@AccountsReceivable:LowerCaseAmount");

            amountCurControl.helpText(multiSelectMessage);
            amountCurControl.enabled(enabledAmountControl);
            amountCurControl.realValue(amountValue);
            amountCurControl.label(label);
            amountCurControl.resetUserSetting();
        }
        else
        {
            amountCurControl.realValue(0.0);
        }

        if (followUpAndPromiseToPay.visible())
        {
            followUpAndPromiseToPay.label((isDisputed || any2Enum(collectionsStatus.selection()) == CustVendDisputeStatus::PromiseToPayBroken ? "@AccountsReceivable:CustCollectionsSetTransactionStatusFollowUpDate" : strFmt("@AccountsReceivable:CustCollectionsSetTransactionStatusPromisetoPay", enum2Str(CustVendDisputeStatus::PromiseToPay))));
            followUpAndPromiseToPay.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()) + 1);
        }
        else if (isResolved)
        {
            followUpAndPromiseToPay.dateValue(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));
        }
        else
        {
            followUpAndPromiseToPay.dateValue(dateNull());
        }

        if (createFollowUpTask.visible())
        {
            createFollowUpTask.helpText(strFmt("@AccountsReceivable:CustCollectionsSetTransactionStatusCreateFollowUpTaskHelpText", followUpAndPromiseToPay.label()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the contents of the controls on the form
    /// </summary>
    /// <returns>True if the controls have valid values</returns>
    public boolean validate()
    {
        boolean ret = true;
        if (followUpAndPromiseToPay.visible() && followUpAndPromiseToPay.dateValue() < DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
        {
            ret = checkFailed("@AccountsReceivable:DateMustBeAfterCurrentDate");
        }

        if (ret && amountCurControl.visible() && amountCurControl.enabled())
        {
            CustTrans localCustTrans = custTrans_ds.cursor();
            if (amountCurControl.realValue() > localCustTrans.remainAmountCur())
            {
                ret = checkFailed(strFmt("@AccountsReceivable:CustCollectionsSetTransactionStatusAmountGreaterThenTotal", amountCurControl.label()));
            }
        }

        if (ret && !validReasons.in(reasonCode.text()))
        {
            ret = checkFailed("@SYS138238");
        }

        okButton.enabled(ret);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates activites based on the categroy passed in
    /// </summary>
    /// <param name = "_custTrans">The <c>CustTrans</c> the activity is for</param>
    /// <param name = "_custRecId">The customer the activity is for</param>
    /// <param name = "_context"><c>CustCollectionsSetTransactionStatusContext</c> to pull values from</param>
    /// <param name = "_category">The activity category</param>
    public static void createActivity(CustTrans _custTrans, RefRecId _custRecId, CustCollectionsSetTransactionStatusContext _context, smmActivityCategory _category)
    {
        RefRecId caseRecId;
        smmActivities activity;

        activity.initValue(_category);
        activity.setActivityNum();

        _context.parmCreateTask(_category == smmActivityCategory::Task || _category == smmActivityCategory::Appointment);

        if (_category == smmActivityCategory::Action || _category == smmActivityCategory::Event)
        {
            activity.Closed = NoYes::Yes;
            activity.modifiedField(fieldNum(smmActivities, Closed));
        }

        activity.Purpose = CustCollectionsSetTransactionStatusHelper::purposeForActivity(_context.parmStatus(), _category);
        activity.UserMemo = CustCollectionsSetTransactionStatusHelper::userMemo(_context, _custTrans.Voucher);

        activity.insertParentLink(smmActivityParentType::Customer, _custRecId, true);
        activity.insertParentLink(smmActivityParentType::Collections, _custRecId);

        activity.ResponsibleWorker = smmUtility::getCurrentContactHcmWorker().RecId;

        if (_category == smmActivityCategory::Action || _category == smmActivityCategory::Event)
        {
            utcdatetime sessionDate = DateTimeUtil::getSystemDateTime();
            activity.StartDateTime = sessionDate;
            activity.EndDateTime = sessionDate;
            activity.ActualEndDateTime = sessionDate;
        }
        else
        {
            activity.StartDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(_context.parmFollowUpDate(), 0), DateTimeUtil::getUserPreferredTimeZone());
            if (_context.parmStatus() == CustVendDisputeStatus::Resolved)
            {
                activity.EndDateTime = activity.StartDateTime;
            }
            else
            {
                activity.EndDateTime = DateTimeUtil::removeTimeZoneOffset(DateTimeUtil::newDateTime(_context.parmFollowUpDate(), 24 * 60 * 60), DateTimeUtil::getUserPreferredTimeZone());
            }
        }

        activity.insert();

        CustCollectionsSetTransactionStatusHelper::linkActivityToTransaction(activity, _custTrans);
        CustCollectionsSetTransactionStatusHelper::linkActivityToCases(activity, _custTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActivityToTransaction</Name>
				<Source><![CDATA[
    private static void linkActivityToTransaction(smmActivities _activity, CustTrans _custTrans)
    {
        List primaryList = new List(Types::Int64);
        List referenceList = new List(Types::Int64);

        primaryList.addEnd(_activity.RecId);
        referenceList.addEnd(_custTrans.RecId);

        CustCollectionsLinkContext linkContext = CustCollectionsLinkContext::construct();
        linkContext.parmAction(CustCollectionsLinkAction::LinkActivityAndTransaction);
        linkContext.parmPrimaryList(primaryList);
        linkContext.parmReferenceList(referenceList);

        CustCollectionsLinkHandler linkHandler = CustCollectionsLinkHandler::construct();
        linkHandler.parmContext(linkContext);
        linkHandler.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkActivityToCases</Name>
				<Source><![CDATA[
    private static void linkActivityToCases(smmactivities _activity, CustTrans _custTrans)
    {
        List primaryList = new List(Types::Int64);
        List referenceList = new List(Types::Int64);

        referenceList.addEnd(_activity.RecId);

        CaseAssociation caseAssociation;

        while select CaseRecId from caseAssociation
            where caseAssociation.EntityType == CaseEntityType::CustTrans &&
                  caseAssociation.RefRecId == _custTrans.RecId
        {
            primaryList.addEnd(caseAssociation.CaseRecId);
        }

        CustCollectionsLinkContext linkContext = CustCollectionsLinkContext::construct();
        linkContext.parmAction(CustCollectionsLinkAction::LinkActivitiesToCase);
        linkContext.parmPrimaryList(primaryList);
        linkContext.parmReferenceList(referenceList);

        CustCollectionsLinkHandler linkHandler = CustCollectionsLinkHandler::construct();
        linkHandler.parmContext(linkContext);
        linkHandler.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>purposeForActivity</Name>
				<Source><![CDATA[
    private static smmActivityPurpose purposeForActivity(CustVendDisputeStatus _disputeStatus, smmActivityCategory _category)
    {
        if (_category == smmActivityCategory::Task || _category == smmActivityCategory::Appointment)
        {
            return strFmt("@AccountsReceivable:FollowUpOn", enum2Str(_disputeStatus));
        }
        else
        {
            return "@SYS24620";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>userMemo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the user memo/note that is based on the context and voucher
    /// </summary>
    /// <param name = "_context"><c>CustCollectionsSetTransactionStatusContext</c> with the values to build off of</param>
    /// <param name = "_voucher">The <c>Voucher</c> of the transaction</param>
    /// <returns>The memo/note</returns>
    public static smmActivityUserMemo userMemo(CustCollectionsSetTransactionStatusContext _context, Voucher _voucher)
    {
        smmActivityUserMemo userMemoTxt;

        if (_context.parmUseUserMemo())
        {
            userMemoTxt = _context.parmNote();
        }
        else
        {
            userMemoTxt = strFmt("@SYS136795", _voucher, _context.parmStatus());

            if (_context.parmCreateTask())
            {
                userMemoTxt = strFmt('%1, %2', userMemoTxt, strFmt("@AccountsReceivable:CustCollectionsSetTransactionStatusTaskFollowUp", _context.parmFollowUpDate()));
            }
        }

        return userMemoTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createActions</Name>
				<Source><![CDATA[
    protected void createActions()
    {
        recId custRecId;

        CustCollectionsSetTransactionStatusContext context = this.buildContext();

        for (CustTrans custTrans = (custTrans_ds.getFirst(true) ? custTrans_ds.getFirst(true) : custTrans_ds.cursor()) as CustTrans; custTrans; custTrans = custTrans_ds.getNext() as CustTrans)
        {
            this.createAction(context, custTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAction</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates activites based on the category passed in.
    /// </summary>
    /// <param name = "_context">
    ///     An instance of <c>CustCollectionsSetTransactionStatusContext</c> class.
    /// </param>
    /// <param name = "_custTrans">
    ///     The <c>CustTrans</c> table buffer for creating activity.
    /// </param>
    protected void createAction(CustCollectionsSetTransactionStatusContext _context, CustTrans _custTrans)
    {
        RecId custRecId = (select firstonly custTable where custTable.AccountNum == _custTrans.AccountNum).RecId;
        CustCollectionsSetTransactionStatusHelper::createActivity(_custTrans, custRecId, _context, smmActivityCategory::Action);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTask</Name>
				<Source><![CDATA[
    protected void createTask()
    {
        recId custRecId;

        CustCollectionsSetTransactionStatusContext context = this.buildContext();

        for (CustTrans custTrans = (custTrans_ds.getFirst(true) ? custTrans_ds.getFirst(true) : custTrans_ds.cursor()) as CustTrans; custTrans; custTrans = custTrans_ds.getNext() as CustTrans)
        {
            custRecId = (select firstonly custTable where custTable.AccountNum == custTrans.AccountNum).RecId;
            CustCollectionsSetTransactionStatusHelper::createActivity(custTrans, custRecId, context, smmActivityCategory::Task);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when the form is closed to update the status, create activities, and send the email
    /// </summary>
    public void close()
    {
        ttsbegin;

        this.updateCustTrans(custTrans_ds.cursor() as CustTrans, this.buildContext());

        if (actionForStatusChange.checked())
        {
            this.createActions();
        }

        if (createFollowUpTask.checked())
        {
            this.createTask();
        }

        ttscommit;

        custTrans_ds.reread();
        custTrans_ds.refresh();

        if (this.parmCallerForm())
        {
            this.parmCallerForm().refreshActivities();
        }

        if (sendEmailToSalesPerson.visible() && sendEmailToSalesPerson.checked())
        {
            this.sendEMail();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildContext</Name>
				<Source><![CDATA[
    private CustCollectionsSetTransactionStatusContext buildContext()
    {
        CustCollectionsSetTransactionStatusContext context = CustCollectionsSetTransactionStatusContext::contruct();

        context.parmReasonCode(reasonCode.text());
        context.parmReasonComment(reasonComment.text());
        context.parmAmountCur(amountCurControl.realValue());
        context.parmFollowUpDate(followUpAndPromiseToPay.dateValue());
        context.parmStatus(any2Enum(collectionsStatus.selection()));
        context.parmNote(userMemo.text());
        context.parmUseUserMemo(userMemo.visible() && userMemo.text() != '');
        context.parmRecordAction(actionForStatusChange.visible() && actionForStatusChange.checked());
        context.parmCreateTask(createFollowUpTask.visible() && createFollowUpTask.checked());

        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendEMail</Name>
				<Source><![CDATA[
    protected void sendEMail()
    {
        if (this.parmCallerForm())
        {
            this.parmCallerForm().sendEmailToSalespersonWithTransactions();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustTrans</Name>
				<Source><![CDATA[
    protected void updateCustTrans(CustTrans _custTrans, CustCollectionsSetTransactionStatusContext _context)
    {
        CustDisputeCustTrans custDisputeCustTrans = CustDisputeCustTrans::contructFromContext(_custTrans, _context);
        custDisputeCustTrans.run();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reasonCodeLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets up and executes a Query that will pull back all of the records
    /// from <c>ReasonTable</c> that have their Cust field set to yes
    /// </summary>
    public void reasonCodeLookup()
    {
        // Create an instance of SysTableLookup with the form control passed in
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(ReasonTable), reasonCode, true);

        // Add the fields to be shown in the lookup form
        sysTableLookup.addLookupfield(fieldNum(ReasonTable, Reason));
        sysTableLookup.addLookupfield(fieldNum(ReasonTable, Description));

        Query query = new Query();
        // Create the datasource, the range and limit to just 'Cust' reason codes
        query.addDataSource(tableNum(ReasonTable)).addRange(fieldNum(ReasonTable, Cust)).value(enum2str(NoYes::Yes));

        // Add the query to the lookup form
        sysTableLookup.parmQuery(query);

        // Perform lookup
        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>