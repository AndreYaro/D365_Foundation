<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRFraudHold</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>MCRFraudHold</c> class places or removes customers from a fraud hold.
/// </summary>
class MCRFraudHold
{
    CustTable custTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>insertFraudDataRecord</Name>
				<Source><![CDATA[
    private void insertFraudDataRecord(MCRFraudType _fraudType, MCRFraudDataValue _value)
    {
        MCRFraudData    mcrFraudData;
        MCRFraudData    mcrFraudDataExisting;

        select firstonly RecId from mcrFraudDataExisting
            where  mcrFraudDataExisting.MCRValue == _value
                && mcrFraudDataExisting.MCRType  == _fraudType
                && mcrFraudDataExisting.MCRSysGenerated != NoYes::Yes; // We don't want write the data if the system already has generated that data.

        if (!mcrFraudDataExisting)
        {
            ttsBegin;
            mcrFraudData.MCRType  = _fraudType;
            mcrFraudData.MCRValue = _value;
            mcrFraudData.MCRScore = this.getMCRScore(_fraudType);
            mcrFraudData.mcrSetUserGenerated(NoYes::Yes);

            if (mcrFraudData.validateWrite())
            {
                mcrFraudData.insert();
            }
            else
            {
                throw error("@SYS104318");
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMCRScore</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns <c>MCRScore</c> from order parameters based on the <c>MCRFraudType</c>.
    /// </summary>
    /// <param name = "_fraudType">
    /// The fraud type that was found.
	/// </param>
    /// <returns>
    /// Returns <c>MCRScore</c> from order parameters.
	/// </returns>
    protected MCRScore getMCRScore(MCRFraudType _fraudType)
    {
        MCRScore  mcrScore;

        switch (_fraudType)
        {
            case MCRFraudType::BadEmail :
                mcrScore = MCROrderParameters::find().MCRFraudBadEmailScore;
                break;
            case MCRFraudType::BadPhone :
                mcrScore = MCROrderParameters::find().MCRFraudBadPhoneScore;
                break;
            case MCRFraudType::BadZipAddress :
                mcrScore = MCROrderParameters::find().MCRFraudBadZipAddressScore;
                break;
        }

        return mcrScore;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrAddToFraudDataTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the phone number, zipcode, zip address and email to the fraud static data table.
    /// </summary>
    /// <remarks>
    /// When a customer is put on manual fraud hold, this method adds all of their main data
    /// (phone, zipcode, zipaddress, and email) to the fraud static data table(MCRFraudData).
    /// The scores are set by the scores set in the MCROrderParameters. The records are marked
    /// as user generated so they can be removed if the customer is taken off of fraud hold.
    /// </remarks>
    public void mcrAddToFraudDataTable()
    {
        LogisticsElectronicAddressLocator   validatedPhone;
        LogisticsAddressZipCodeId           zipCode;

        // Add email
        if (custTable.email())
        {
            this.insertFraudDataRecord(MCRFraudType::BadEmail,
                                        custTable.email());
        }

        // Add phone
        if (custTable.phone())
        {
            validatedPhone = strKeep(custTable.phone(), '0123456789');  //"0123456789"
            this.insertFraudDataRecord(MCRFraudType::BadPhone,
                                        validatedPhone);
        }

        // ZipAddress
        zipCode = custTable.postalAddress().ZipCode;
        if (zipCode && custTable.address())
        {
            this.insertFraudDataRecord(MCRFraudType::BadZipAddress,
                                        MCRFraudCheckEngine::mcrZipAddress(custTable.address(), zipCode));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCustManualFraudClear</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Clears a customer on hold for possible fraud.
    /// </summary>
    /// <returns>
    /// true if the fraud was cleared; otherwise, false.
    /// </returns>
    public boolean mcrCustManualFraudClear()
    {
        boolean     promptClosedOk;
        boolean     custHoldCleared = false;

        promptClosedOk = this.promptFraudHoldCommentForm();

        if (promptClosedOk)
        {
            // Call to the update, which has been modified to call the MCRCustEvent table.
            this.mcrSetCustomerStatus(MCRCustStatus::Blank);
            // Removes the customers data to the fraud static data.
            this.mcrRemoveFromFraudDataTable();
            custHoldCleared = true;
        }

        return custHoldCleared;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrCustManualFraudHold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Places a customer on hold for possible fraud.
    /// </summary>
    /// <returns>
    /// true if customer was placed on fraud hold; otherwise, false.
    /// </returns>
    public boolean mcrCustManualFraudHold()
    {
        boolean     promptClosedOk;
        boolean     custOnFraud = false;

        promptClosedOk = this.promptFraudHoldCommentForm();

        if (promptClosedOk)
        {
            // Adds the customers data to the fraud static data.
            this.mcrSetCustomerStatus(MCRCustStatus::Fraudulent);
            this.mcrAddToFraudDataTable();
            custOnFraud = true;
        }

        return custOnFraud;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrPutOrderOnHold</Name>
				<Source><![CDATA[
    private void mcrPutOrderOnHold(SalesId _salesId, MCRHoldCodeComment _mcrHoldCodeComment)
    {
        MCRHoldCodeTrans mcrHoldCodeTrans;

        //put order on hold.  (note - order status changed in Hold table update)
        ttsBegin;

        mcrHoldCodeTrans.InventRefId = _salesId;
        mcrHoldCodeTrans.MCRHoldCode = MCROrderParameters::find().MCRFraudManualHoldCode;
        mcrHoldCodeTrans.MCRHoldCodeComment = _mcrHoldCodeComment;

        if (mcrHoldCodeTrans.validateWrite())
        {
            mcrHoldCodeTrans.insert();
        }
        else
        {
            throw error("@SYS104318");
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrRemoveFromFraudDataTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the data from the fraud static data table.
    /// </summary>
    public void mcrRemoveFromFraudDataTable()
    {
        LogisticsElectronicAddressLocator   validatedPhone;

        // Remove customer data from static fraud table.
        ttsBegin;

        // Remove email
        if (custTable.email())
        {
            this.removeFraudDataRecord(MCRFraudType::BadEmail,
                                        custTable.email());
        }

        // Remove phone
        if (custTable.phone())
        {
            validatedPhone = strKeep(custTable.phone(), '0123456789');  //"0123456789"
            this.removeFraudDataRecord(MCRFraudType::BadPhone,
                                        validatedPhone);
        }

        // ZipAddress
        if (custTable.address() && custTable.postalAddress().ZipCode)
        {
            this.removeFraudDataRecord(MCRFraudType::BadZipAddress,
                                        MCRFraudCheckEngine::mcrZipAddress(custTable.address(), custTable.postalAddress().ZipCode));
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetCustomerStatus</Name>
				<Source><![CDATA[
    private void mcrSetCustomerStatus(MCRCustStatus _mcrCustStatus)
    {
        MCRCustTable mcrCustTable;

        ttsBegin;

        custTable = CustTable::findRecId(custTable.RecId, true);

        //set customer status to fraudulent.
        mcrCustTable = custTable.mcrCustTable();
        mcrCustTable.CustStatus = _mcrCustStatus;
        custTable.mcrPackMCRCustTable(mcrCustTable);

        if (custTable.validateWrite())
        {
            custTable.update();
        }
        else
        {
            throw error("@SYS104318");
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>promptFraudHoldCommentForm</Name>
				<Source><![CDATA[
    private boolean promptFraudHoldCommentForm()
    {
        FormRun     formRun;
        Args        formArgs = new Args();
        str         formArgsFormStr;
        Common      formArgsRecord;
        boolean     ret = false;

        // Pop up form for user to enter a comment
        // as to why the order is going to be removed from fraud hold
        formArgsRecord = custTable;
        formArgsFormStr = formStr(MCRFraudHoldCommentDialog);
        formArgs.name(formArgsFormStr);
        formArgs.record(formArgsRecord);
        formRun = classfactory.formRunClass(formArgs);
        formRun.init();
        formRun.run();
        formRun.wait();

        if (formRun.closedOk())
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeFraudDataRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes the data from the fraud static data table based on fraud type.
    /// </summary>
    /// <param name = "_fraudType">
    /// The fraud type that was found.
	/// </param>
    /// <param name = "_value">
    /// The mcr value.
	/// </param>
    protected final void removeFraudDataRecord(MCRFraudType _fraudType, MCRFraudDataValue _value)
    {
        MCRFraudData    mcrFraudData;

        select firstonly forupdate mcrFraudData
            where  mcrFraudData.MCRValue == _value
                && mcrFraudData.MCRType == _fraudType
                && mcrFraudData.MCRUserGenerated == NoYes::Yes;

        if (mcrFraudData)
        {
            if (mcrFraudData.validateDelete())
            {
                mcrFraudData.delete();
            }
            else
            {
                throw error("@SYS104318");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustTable</Name>
				<Source><![CDATA[
    private void setCustTable(CustTable _custTable)
    {
        custTable = _CustTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the class <c>MCRFraudHold</c>.
    /// </summary>
    /// <returns>
    /// An instantiation of the <c>MCRFraudHold</c> class.
    /// </returns>
    public static MCRFraudHold construct()
    {
        MCRFraudHold mcrFraudHold = new mcrFraudHold();

        return mcrFraudHold;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCustTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the class <c>MCRFraudHold</c> with a customer record.
    /// </summary>
    /// <param name="_custTable">
    /// The customer record.
    /// </param>
    /// <returns>
    /// An instantiation of the <c>MCRFraudHold</c> class with the customer record set.
    /// </returns>
    public static MCRFraudHold newCustTable(CustTable _custTable)
    {
        MCRFraudHold mcrFraudHold = MCRFraudHold::construct();

        mcrFraudHold.setCustTable(_custTable);

        return mcrFraudHold;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>