<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ELedgerAccountingBalanceSheetClosingAmountSumQuery</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ELedgerAccountingBalanceSheetClosingAmountSumQuery</c> class creates queries related to the <c>ELedgerAccountingBalanceSheet</c> class.
/// </summary>
public final class ELedgerAccountingBalanceSheetClosingAmountSumQuery
{
    private DimensionAttributeValueTotallingCriteria totallingCriteria;
    private MainAccount intervalMainAccount;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(DimensionAttributeValueTotallingCriteria _totallingCriteria, MainAccount _intervalMainAccount)
    {
        totallingCriteria = _totallingCriteria;
        intervalMainAccount = _intervalMainAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSearchObject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects records from the <c>MainAccount</c> table.
    /// </summary>
    /// <param name = "_totallingCriteria">
    /// The <c>DimensionAttributeValueTotallingCriteria</c> buffer.
    /// </param>
    /// <param name = "_intervalMainAccount">
    /// The <c>MainAccount</c> buffer.
    /// </param>
    /// <returns>
    /// The selected records.
    /// </returns>
    internal static SysDaSearchObject createSearchObject(DimensionAttributeValueTotallingCriteria _totallingCriteria, MainAccount _intervalMainAccount)
    {
        ELedgerAccountingBalanceSheetClosingAmountSumQuery eLedgerAccountingBalanceSheetClosingAmountSumQuery = new ELedgerAccountingBalanceSheetClosingAmountSumQuery();

        ELedgerAccountingBalanceSheetClosingAmountSumQuery.initialize(_totallingCriteria, _intervalMainAccount);

        SysDaQueryObject query = eLedgerAccountingBalanceSheetClosingAmountSumQuery.addFieldsToQueryObjectWhereClause();
        SysDaSearchObject searchObject = new SysDaSearchObject(query);

        return searchObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFieldsToQueryObjectWhereClause</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the where clause expression to a query.
    /// </summary>
    /// <returns>
    /// The query to select records.
    /// </returns>
    [Wrappable(true)]
    protected final SysDaQueryObject addFieldsToQueryObjectWhereClause()
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(intervalMainAccount);

        queryObject.whereClause(new SysDaAndExpression(
            new SysDaGreaterThanOrEqualsExpression(new SysDaFieldExpression(intervalMainAccount, fieldStr(MainAccount, MainAccountId)),
                new SysDaFieldExpression(totallingCriteria, fieldStr(DimensionAttributeValueTotallingCriteria, FromValue))),
            new SysDaLessThanOrEqualsExpression(new SysDaFieldExpression(intervalMainAccount, fieldStr(MainAccount, MainAccountId)),
                new SysDaFieldExpression(totallingCriteria, fieldStr(DimensionAttributeValueTotallingCriteria, ToValue))))
            .and(new SysDaEqualsExpression(new SysDaFieldExpression(intervalMainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Equity))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(intervalMainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Liability)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(intervalMainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Asset)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(intervalMainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::BalanceSheet)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(intervalMainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Expense)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(intervalMainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::Revenue)))
                .or(new SysDaEqualsExpression(new SysDaFieldExpression(intervalMainAccount, fieldStr(MainAccount, Type)), new SysDaValueExpression(DimensionLedgerAccountType::ProfitAndLoss)))));

        return queryObject;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>