<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ConfigHierarchy</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class ConfigHierarchy implements SysPackable
{
    TransDate           versDate;
    FromQty             fromQty;
    InventSiteId        siteId;     // the siteId for all levels.

    Counter             presLevel;
    RunbaseProgress     progress;

    Level               maxLevel;
    Level               stopLevel;

    RecordSortedList    validConfigRoute;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        versDate,
        siteId,
        maxLevel,
        stopLevel
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bomSearch</Name>
				<Source><![CDATA[
    BOMSearch bomSearch(
        BOMId               bomId,
        ConfigGroupId       groupId
        )
    {
        return BOMSearch::newConfigGroupId(bomId,versDate,groupId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkMaxLevel</Name>
				<Source><![CDATA[
    boolean checkMaxLevel()
    {
        if (! maxLevel)
            return true;

        if (presLevel+1 > maxLevel)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkStopLevel</Name>
				<Source><![CDATA[
    boolean checkStopLevel()
    {
        if (! stopLevel)
            return true;

        if (presLevel+1 > stopLevel)
            return false;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doBOM</Name>
				<Source><![CDATA[
    boolean doBOM(BOM bomLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRoute</Name>
				<Source><![CDATA[
    boolean doRoute(
        BOMId               bomNum,
        ConfigGroupId       groupId,
        RecId               configRouteRecId
    )
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimSiteMerged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Finds the <c>InventDim</c> record that should be used to find <c>BOMVersion</c> records.
    /// </summary>
    /// <param name="_inventDimId">
    ///    A string that holds the inventory dimension ID.
    /// </param>
    /// <returns>
    ///    An <c>InventDim</c> record.
    /// </returns>
    protected InventDim inventDimSiteMerged(InventDimId  _inventDimId)
    {
        InventDim   inventDim = InventDim::find(_inventDimId);

        if (siteId)
        {
            inventDim.InventSiteId = siteId;
            inventDim = InventDim::findOrCreate(inventDim);
        }

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(TransDate _versDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        versDate = _versDate;

        maxLevel = 0;

        validConfigRoute = new RecordSortedList(tableNum(BOMConfigRoute));
        validConfigRoute.sortOrder(fieldNum(BOMConfigRoute,bomId),fieldNum(BOMConfigRoute,ConfigGroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSiteId</Name>
				<Source><![CDATA[
    public InventSiteId parmSiteId(InventSiteId _siteId = siteId)
    {
        siteId = _siteId;

        return siteId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStopLevel</Name>
				<Source><![CDATA[
    Level parmStopLevel(Level _stopLevel = stopLevel)
    {
        stopLevel = _stopLevel;

        return stopLevel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersDate</Name>
				<Source><![CDATA[
    TransDate parmVersDate(TransDate _versDate = versDate)
    {
        versDate = _versDate;

        return versDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersQty</Name>
				<Source><![CDATA[
    FromQty parmVersQty(FromQty _fromQty = fromQty)
    {
        fromQty = _fromQty;

        return fromQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    void reset()
    {
        presLevel = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDown</Name>
				<Source><![CDATA[
    void scanDown(
        ItemId  itemId,
        BOMId   _bomId = '')
    {
        BOMId       bomId = _bomId;
        InventDim   inventDim;
        if (prmisDefault (_bomId))
        {
            inventDim.InventSiteId = InventTable::find(itemId).inventInventSiteId();

            if (inventDim.InventSiteId)
            {
                inventDim.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
            }
            else
            {
                inventDim.InventDimId = InventDim::inventDimIdBlank();
            }

            bomId = InventTable::find(itemId).bomId(versDate,
                                            InventTable::find(itemId).inventStandardQty(inventDim.InventDimId),
                                            inventDim);
        }
        this.searchDownRoute(itemId,bomId,0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownBOM</Name>
				<Source><![CDATA[
    boolean scanDownBOM(
        BOMId               bomNum,
        ConfigGroupId       groupId,
        RecId               configRouteRecId
        )
    {
        this.searchDownBOM(bomNum,groupId,configRouteRecId);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>scanDownRoute</Name>
				<Source><![CDATA[
    protected boolean scanDownRoute(BOM bomLine)
    {
        InventTable inventTable = InventTable::find(bomLine.ItemId);
        InventDim   inventDim   = this.inventDimSiteMerged(bomLine.InventDimId);

        this.searchDownRoute(bomLine.ItemId,
                             bomLine.BOMMap::itemBOMId(versDate,inventTable.inventStandardQty(inventDim.InventDimId),inventDim),
                             bomLine.RecId);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchDownBOM</Name>
				<Source><![CDATA[
    protected boolean searchDownBOM(
        BOMId               bomId,
        ConfigGroupId       groupId,
        RecId               configRouteRecId
        )
    {
        BOMSearch   search;
        BOM         bom;
        if (! this.checkMaxLevel())
            return false;

        presLevel++;

        setPrefix(groupId);

        search  = this.bomSearch(bomId,groupId);
        while (search.next())
        {
            bom = search.bom();
            if (this.doBOM(bom))
                if (this.checkStopLevel())
                    this.scanDownRoute(bom);
        }

        presLevel--;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchDownRoute</Name>
				<Source><![CDATA[
    protected boolean searchDownRoute(
        ItemId  itemId,
        BOMId   bomId,
        RecId   bomRecId
        )
    {
        BOMConfigRoute      configRoute;
        BOM                 bom;
        Counter             i;
        Integer             numOf;
        container           configGroups;
        RecId               configRouteRecId[,1];
        BOMSearch           search;
        ConfigGroupId       curConfigGroupId;

        void add()
        {
            numOf++;
            configGroups            += configRoute.ConfigGroupId;
            configRouteRecId[numOf] =  configRoute.RecId;
        }

        void testAdd()
        {
            if (validConfigRoute.find(configRoute))
                add();
            else
            {
                search = this.bomSearch(bomId,configRoute.ConfigGroupId);
                if (search.next())
                {
                    add();
                    validConfigRoute.ins(configRoute);
                }
            }
        }

        if (! bomId)
            return true;

        if (! this.checkMaxLevel())
            return false;

        presLevel++;

        setPrefix(strFmt('%1 %2',itemId,presLevel));

        configRoute.bomId = bomId;

        // Find groups in route
        numOf = 0;
        while select configRoute
            index BOMIdx
            where configRoute.bomId == bomId
        {
            testAdd();
        }

        configRoute.bomId   = bomId;
        configRoute.RecId   = 0;

        // Find groups in BOm
        while select bom
            index hint ConfigGroupIdx
            group ConfigGroupId
            where bom.bomId         == bomId &&
                  bom.ConfigGroupId != ''
        {
            if (! conFind(configGroups,bom.ConfigGroupId))
            {
                configRoute.ConfigGroupId = bom.ConfigGroupId;

                testAdd();
            }
        }

        if (presLevel == 1 && progress)
            progress.setTotal(numOf);

        for (i=1; i<=numOf; i++)
        {
            curConfigGroupId = conPeek(configGroups,i);

            if (progress)
            {
                progress.setText(strFmt("@SYS28658",presLevel)+' '+fieldLabelValue(
                    tableNum(ConfigGroup),
                    fieldNum(ConfigGroup,ConfigGroupId),
                    curConfigGroupId));

                if (presLevel == 1)
                    progress.setCount(i);
            }

            if (this.doRoute(bomId,curConfigGroupId,configRouteRecId[i]))
                if (this.checkStopLevel())
                    this.scanDownBOM(bomId,curConfigGroupId,configRouteRecId[i]);
        }

        presLevel--;

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean ret;
        Integer version = conPeek(_packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>