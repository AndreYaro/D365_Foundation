<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetEncumbranceInquiryProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class generates data for the encumbrance reconciliation inquiry.
/// </summary>
public final class BudgetEncumbranceInquiryProcessor
{
    private BudgetAnalysisDimensionSummaryTmp budgetAnalysisDimensionSummaryTmp;
    private LedgerTrialBalanceTmp ledgerTrialBalanceTmp;
    private DimensionFocusNameTmp dimensionFocusNameTmp;
    private GeneralLedgerBalanceDimensionDescriptionsTmp balanceDimensionDescriptionsTmp;

    private BudgetTrialEncumbranceInquirySummaryTmp budgetLedgerBalanceSummary;
    private BudgetTrialEncumbranceInquirySummaryTmp totalsTmpTable;
    private BudgetTrialEncumbranceInquiryDetailTmp budgetLedgerBalanceDetail;
    private BudgetEncumbranceLedgerAccountTransactionTmp ledgerTransactionDetail;
    private BudgetEncumbranceBudgetControlTransactionTmp budgetTransactionDetail;

    private BudgetEncumbranceDistinctLedgerDocumentTmp uniqueBudgetAccountDocumentAmounts;
    private BUdgetEncumbranceBudgetControlSourceDocumentReferenceTmp budgetControlSourceDocumentReference;

    private BudgetAnalysisRequest analysisRequest;
    private LedgerTrialBalanceListPageBalanceParms trialBalanceParameter;
    private BudgetEncumbranceInquiryDetailParameter currentDetailParameter;

    private BudgetEncumbranceInquiryBudgetControlProcessor budgetControlProcessor;
    private BudgetEncumbranceInquiryGeneralLedgerProcessor generalLedgerProcessor;

    private boolean isLedgerBalanceFeatureEnabled = FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance());

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the instance of the processor to retrieve ledger and encumbrance data with parameters.
    /// </summary>
    /// <param name = "_encumbranceInquiryParameter">The parameters to retrieve encumbrance data.</param>
    /// <returns>The instance of the <c>BudgetEncumbranceInquiryProcessor</c>.</returns>
    internal static BudgetEncumbranceInquiryProcessor construct(BudgetEncumbranceInquiryParameter _encumbranceInquiryParameter)
    {
        BudgetEncumbranceInquiryProcessor encumbranceInquiryProcessor = new BudgetEncumbranceInquiryProcessor();

        encumbranceInquiryProcessor.initializeParameters(_encumbranceInquiryParameter);

        return encumbranceInquiryProcessor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetLedgerTransactionDetailData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the encumbrance inquiry detail data.
    /// </summary>
    /// <returns>The data of the table <c>BudgetTrialEncumbranceInquiryDetailTmp</c>.</returns>
    internal BudgetTrialEncumbranceInquiryDetailTmp getBudgetLedgerTransactionDetailData()
    {
        select budgetLedgerBalanceDetail;

        return budgetLedgerBalanceDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetTransactionDetailData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the budget transaction detail data.
    /// </summary>
    /// <returns>The data of the table <c>BudgetEncumbranceBudgetControlTransactionTmp</c>.</returns>
    internal BudgetEncumbranceBudgetControlTransactionTmp getBudgetTransactionDetailData()
    {
        select budgetTransactionDetail;

        return budgetTransactionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransactionDetailData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the general journal transaction detail data.
    /// </summary>
    /// <returns>The data of the table <c>BudgetEncumbranceLedgerAccountTransactionTmp</c>.</returns>
    internal BudgetEncumbranceLedgerAccountTransactionTmp getLedgerTransactionDetailData()
    {
        select ledgerTransactionDetail;

        return ledgerTransactionDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the balance amounts for each ledger account from general journal and budget control tables.
    /// </summary>
    /// <param name = "_budgetTrialBalanceSummary">The data buffer of the encumbrance inquiry summary.</param>
    /// <param name = "_totalsTmpTable">The data buffer of the encumbrance inquiry summary total.</param>
    internal void calculateBalance(BudgetTrialEncumbranceInquirySummaryTmp _budgetTrialBalanceSummary, BudgetTrialEncumbranceInquirySummaryTmp _totalsTmpTable)
    {
        this.resetDataBuffer(_budgetTrialBalanceSummary, _totalsTmpTable);

        this.retrieveBudgetBalance();

        this.retrieveLedgerBalance();

        this.mergeTrialBalanceAndBudgetAnalysisData();

        this.populateBudgetTrialEncumbranceInquirySummaryTotal();

        if (isLedgerBalanceFeatureEnabled)
        {
            this.populateDimensionDescriptions();
        }
        else
        {
            this.populateDimensionNames();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrentDetailParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets encumbrance inquiry detail parameter to retrieve specific data for current selection.
    /// </summary>
    /// <param name = "_focusLedgerDimension">The ledger account of current selection.</param>
    /// <param name = "_documentNumber">The document number of current selection.</param>
    /// <param name = "_type">The source document type of current selection.</param>
    /// <param name = "_sourceDocumentHeaderRecId">The source document header record Id.</param>
    internal void setCurrentDetailParameter(
        LedgerDimensionAccount _focusLedgerDimension,
        DocumentNum _documentNumber = '',
        BudgetControlSourceIntegrator _type = BudgetControlSourceIntegrator::PurchaseOrder,
        SourceDocumentHeaderRecId _sourceDocumentHeaderRecId = 0)
    {
        if (!currentDetailParameter)
        {
            currentDetailParameter = BudgetEncumbranceInquiryDetailParameter::construct();
        }

        currentDetailParameter.parmFocusLedgerDimension(_focusLedgerDimension);
        currentDetailParameter.parmDocumentNumber(_documentNumber);
        currentDetailParameter.parmDocumentType(_type);
        currentDetailParameter.parmSourceDocumentHeader(_sourceDocumentHeaderRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>viewOriginalDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Views the original document for specific selection.
    /// </summary>
    /// <param name = "_budgetSourceIntegrator">The source document type.</param>
    /// <param name = "_sourceHeaderRecId">The source document header record Id.</param>
    /// <param name = "_documentNumber">The document number.</param>
    internal void viewOriginalDocument(
        BudgetControlSourceIntegrator _budgetSourceIntegrator,
        SourceDocumentHeaderRecId _sourceHeaderRecId,
        DocumentNum _documentNumber)
    {
        Common documentRecord = this.getOriginalDocumentRecordByTypeAndSourceHeader(
            _budgetSourceIntegrator,
            _sourceHeaderRecId,
            _documentNumber);

        if (documentRecord)
        {
            if (isConfigurationkeyEnabled(configurationKeyNum(BudgetReservation_PSN))
                && documentRecord is BudgetReservationHeader_PSN)
            {
                BudgetAnalysisInquiryHelper_PSN::jumpRefBudgetReservation(documentRecord);
            }
            else
            {
                this.openSourceDocument(documentRecord);
            }
        }
        else
        {
            warning("@Budget:BudgetEncumbranceNoDocumentError");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentDetailParameter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the detail parameter for encumbrance inquiry.
    /// </summary>
    /// <returns>Budget encumbrance inquiry detail parameter.</returns>
    internal BudgetEncumbranceInquiryDetailParameter getCurrentDetailParameter()
    {
        return currentDetailParameter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetDataBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reset the data buffer for the table.
    /// </summary>
    /// <param name = "_budgetTrialBalanceSummary"><C>BudgetTrialEncumbranceInquirySummaryTmp</C> data buffer to link with the physical table.</param>
    /// <param name = "_totalsTmpTable"><C>BudgetTrialEncumbranceInquirySummaryTmp</C> summary total data buffer to link with physical table.</param>
    private void resetDataBuffer(BudgetTrialEncumbranceInquirySummaryTmp _budgetTrialBalanceSummary, BudgetTrialEncumbranceInquirySummaryTmp _totalsTmpTable)
    {
        budgetLedgerBalanceSummary.linkPhysicalTableInstance(_budgetTrialBalanceSummary);
        totalsTmpTable.linkPhysicalTableInstance(_totalsTmpTable);
        dimensionFocusNameTmp.linkPhysicalTableInstance(analysisRequest.parmDimensionFocusNameTmp());
        budgetAnalysisDimensionSummaryTmp.linkPhysicalTableInstance(analysisRequest.parmSummaryTempTable());
        balanceDimensionDescriptionsTmp.linkPhysicalTableInstance(analysisRequest.parmBalanceDimensionDescriptionsTmp());

        this.cleanupBudgetTrialBalanceData();

        if (FeatureStateProvider::IsFeatureEnabled(GeneralLedgerBalanceFeature::instance()))
        {
            GeneralLedgerBalanceProvider::getBalanceStatus(Ledger::current());
        }
        else
        {
            BudgetDimensionFocusUpdateBalance::updateBudgetBalance(trialBalanceParameter.parmDimensionSetHierarchy());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalDocumentRecordByTypeAndSourceHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the original document records by type of document and source header recid.
    /// </summary>
    /// <param name = "_budgetSourceIntegrator">Budget control source integrator which defines the type of transaction.</param>
    /// <param name = "_sourceHeaderRecId">Source header recid.</param>
    /// <param name = "_documentNumber">Document number.</param>
    /// <returns>Original document record</returns>
    private Common getOriginalDocumentRecordByTypeAndSourceHeader(
        BudgetControlSourceIntegrator _budgetSourceIntegrator,
        SourceDocumentHeaderRecId _sourceHeaderRecId,
        DocumentNum _documentNumber)
    {
        Common commonRecord;

        if (_sourceHeaderRecId)
        {
            switch (_budgetSourceIntegrator)
            {
                case BudgetControlSourceIntegrator::BudgetTransaction:
                    commonRecord = BudgetTransactionHeader::findByTransactionNumber(_documentNumber, Ledger::current());
                    break;

                case BudgetControlSourceIntegrator::PurchaseOrder:
                    commonRecord = PurchTable::findSourceDocumentHeader(_sourceHeaderRecId);
                    break;

                case BudgetControlSourceIntegrator::PurchaseRequisition:
                    commonRecord = PurchReqTable::findBySourceDocumentHeader(_sourceHeaderRecId);
                    break;

                case BudgetControlSourceIntegrator::VendorInvoice:
                    commonRecord = VendInvoiceJour::findSourceDocumentHeader(_sourceHeaderRecId);

                    if (!commonRecord)
                    {
                        commonRecord = VendInvoiceInfoTable::findSourceDocumentHeader(_sourceHeaderRecId);
                    }
                    break;

                case BudgetControlSourceIntegrator::AdvancedLedgerEntry:
                    commonRecord = AdvancedLedgerEntryHeader::findByTransactionNumber(_documentNumber);
                    break;

                case BudgetControlSourceIntegrator::BudgetReservation_PSN:
                    commonRecord = BudgetReservationHeader_PSN::findByDocumentNumber(_documentNumber);
                    break;
            }
        }

        if (!commonRecord)
        {
            commonRecord = this.getGeneralJournalByDocumentNumber(_documentNumber);
        }

        return commonRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Open particular source document page.
    /// </summary>
    /// <param name = "_sourceDocument">Source document.</param>
    private void openSourceDocument(Common _sourceDocument)
    {
        if (_sourceDocument)
        {
            MenuItemNameDisplay menuItemDisplayName;
            MenuName menuName;
            Args args = new Args();

            switch (_sourceDocument.TableId)
            {
                case tableNum(PurchTable):
                    menuItemDisplayName = MenuItemDisplayStr(PurchTable);
                    break;

                case tableNum(VendInvoiceTrans):
                    menuItemDisplayName = MenuItemDisplayStr(VendInvoiceJournal);
                    break;

                case tableNum(PurchReqTable):
                    menuItemDisplayName = MenuItemDisplayStr(PurchReqTable);
                    break;

                case tableNum(VendInvoiceInfoTable):
                    menuItemDisplayName = MenuItemDisplayStr(VendInvoiceInfoListPage);
                    break;

                case tableNum(CustInvoiceTable):
                    menuItemDisplayName = menuitemDisplayStr(CustFreeInvoice);
                    break;

                case tableNum(TrvExpTrans):
                    menuItemDisplayName = menuitemDisplayStr(TrvExpenses);
                    break;

                default:
                    menuItemDisplayName = new DictTable(_sourceDocument.TableId).formRef();
            }

            args.record(_sourceDocument);
            args.lookupRecord(_sourceDocument);

            new MenuFunction(menuItemDisplayName, MenuItemType::Display).run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGeneralJournalByDocumentNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get generalJournalEntry based on document number.
    /// </summary>
    /// <param name = "_documentNumber">Document number.</param>
    /// <returns>GeneralJournalEntry buffer data.</returns>
    private GeneralJournalEntry getGeneralJournalByDocumentNumber(DocumentNum _documentNumber)
    {
        GeneralJournalEntry generalJournalEntry;

        if (_documentNumber)
        {
            select firstonly generalJournalEntry
                where generalJournalEntry.DocumentNumber == _documentNumber
                    || generalJournalEntry.SubledgerVoucher == _documentNumber;
        }

        return generalJournalEntry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the encumbrance reconciliation parameter.
    /// </summary>
    /// <param name = "_encumbranceInquiryParameter">Encumbrance inquiry parameter</param>
    private void initializeParameters(BudgetEncumbranceInquiryParameter _encumbranceInquiryParameter)
    {
        analysisRequest = _encumbranceInquiryParameter.parmAnalysisRequest();
        trialBalanceParameter = _encumbranceInquiryParameter.parmTrialBalanceParameter();

        analysisRequest.parmdisplayDimensionInSeparateColumns(false);
        analysisRequest.parmDisplayAccountNameColumn(false);
        trialBalanceParameter.parmDisplaySeparateDimensionValues(false);

        budgetControlProcessor = BudgetEncumbranceInquiryBudgetControlProcessor::construct(analysisRequest);
        generalLedgerProcessor = BudgetEncumbranceInquiryGeneralLedgerProcessor::construct(trialBalanceParameter);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeTrialBalanceAndBudgetAnalysisData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merge the trial balance and budget analysis data.
    /// </summary>
    private void mergeTrialBalanceAndBudgetAnalysisData()
    {
        this.updateLedgerTransactionDocumentNumberByBudgetControlReference();

        this.mergeInquirySummaryData();

        this.mergeInquiryDetailData();

        this.updateBalanceStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBalanceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the balance status.
    /// </summary>
    private void updateBalanceStatus()
    {
        this.updateDetailBalanceStatus();

        this.updateSummaryBalanceStatus();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeInquirySummaryData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merge encumbrance reconciliation summary data.
    /// </summary>
    private void mergeInquirySummaryData()
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset budgetLedgerBalanceSummary
            (
                TrialBalance,
                ReportingDimension,
                Encumbrance,
                PreEncumbrance
            )
            select
                EndingBalance
                from ledgerTrialBalanceTmp
                join
                    ReportingDimension,
                    Encumbrance,
                    PreEncumbrance
                from budgetAnalysisDimensionSummaryTmp
                    where budgetAnalysisDimensionSummaryTmp.ReportingDimension == ledgerTrialBalanceTmp.LedgerDimension;

            insert_recordset budgetLedgerBalanceSummary
            (
                ReportingDimension,
                Encumbrance,
                PreEncumbrance
            )
            select
                ReportingDimension,
                Encumbrance,
                PreEncumbrance
                from budgetAnalysisDimensionSummaryTmp
                notexists join ledgerTrialBalanceTmp
                    where ledgerTrialBalanceTmp.LedgerDimension == budgetAnalysisDimensionSummaryTmp.ReportingDimension;

            insert_recordset budgetLedgerBalanceSummary
            (
                TrialBalance,
                ReportingDimension
            )
            select
                EndingBalance,
                LedgerDimension
                from ledgerTrialBalanceTmp
                notexists join budgetAnalysisDimensionSummaryTmp
                    where budgetAnalysisDimensionSummaryTmp.ReportingDimension == ledgerTrialBalanceTmp.LedgerDimension;
        }
        else
        {
            insert_recordset budgetLedgerBalanceSummary
            (
                FocusLedgerDimension,
                TrialBalance,
                Encumbrance,
                PreEncumbrance
            )
            select
                LedgerDimension,
                EndingBalance
                from ledgerTrialBalanceTmp
                join
                    Encumbrance,
                    PreEncumbrance
                from budgetAnalysisDimensionSummaryTmp
                    where ledgerTrialBalanceTmp.LedgerDimension == budgetAnalysisDimensionSummaryTmp.FocusLedgerDimension;

            insert_recordset budgetLedgerBalanceSummary
            (
                FocusLedgerDimension,
                Encumbrance,
                PreEncumbrance
            )
            select
                FocusLedgerDimension,
                Encumbrance,
                PreEncumbrance
                from budgetAnalysisDimensionSummaryTmp
                notexists join ledgerTrialBalanceTmp
                    where ledgerTrialBalanceTmp.LedgerDimension == budgetAnalysisDimensionSummaryTmp.FocusLedgerDimension;

            insert_recordset budgetLedgerBalanceSummary
            (
                FocusLedgerDimension,
                TrialBalance
            )
            select
                LedgerDimension,
                EndingBalance
                from ledgerTrialBalanceTmp
                notexists join budgetAnalysisDimensionSummaryTmp
                    where ledgerTrialBalanceTmp.LedgerDimension == budgetAnalysisDimensionSummaryTmp.FocusLedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateUniqueBudgetData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate unique budget data from <C>BudgetTransactionDetail</C>.
    /// </summary>
    private void generateUniqueBudgetData()
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset uniqueBudgetAccountDocumentAmounts
            (
                LedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                EncumbranceType,
                Amount
            )
            select
                ReportingDimension,
                DocumentNumber,
                OriginalSourceDocumentHeader,
                EncumbranceType,
                sum(Amount)
                from budgetTransactionDetail
                    group by budgetTransactionDetail.ReportingDimension,
                        budgetTransactionDetail.DocumentNumber,
                        budgetTransactionDetail.OriginalSourceDocumentHeader,
                        budgetTransactionDetail.EncumbranceType;
        }
        else
        {
            insert_recordset uniqueBudgetAccountDocumentAmounts
            (
                LedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                EncumbranceType,
                Amount
            )
            select
                FocusLedgerDimension,
                DocumentNumber,
                OriginalSourceDocumentHeader,
                EncumbranceType,
                sum(Amount)
                from budgetTransactionDetail
                    group by budgetTransactionDetail.FocusLedgerDimension,
                        budgetTransactionDetail.DocumentNumber,
                        budgetTransactionDetail.OriginalSourceDocumentHeader,
                        budgetTransactionDetail.EncumbranceType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the description of the document.
    /// </summary>
    private void updateDocumentDescription()
    {
        BudgetEncumbranceBudgetSourceIntegratorLabelTmp sourceLabelTmp = this.getSourceIntegratorLabelData();

        update_recordset budgetLedgerBalanceDetail
            setting Description = sourceLabelTmp.Description
            join sourceLabelTmp
                where sourceLabelTmp.BudgetControlSourceIntegrator == budgetLedgerBalanceDetail.DocumentType
                    && budgetLedgerBalanceDetail.SourceDocumentHeader > 0;

        // Ledger journal without source document header
        str journalType = "@SYS6790";
        update_recordset budgetLedgerBalanceDetail
            setting Description = journalType
            where budgetLedgerBalanceDetail.SourceDocumentHeader == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the type of the document.
    /// </summary>
    private void updateDocumentType()
    {
        update_recordset budgetLedgerBalanceDetail
            setting DocumentType = budgetControlSourceDocumentReference.BudgetControlSourceIntegrator
            join budgetControlSourceDocumentReference
                where budgetControlSourceDocumentReference.SourceDocumentHeader == budgetLedgerBalanceDetail.SourceDocumentHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceIntegratorLabelData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the budget control source integrator label data.
    /// </summary>
    /// <returns><C>BudgetEncumbranceBudgetSourceIntegratorLabelTmp</C>data buffer.</returns>
    private BudgetEncumbranceBudgetSourceIntegratorLabelTmp getSourceIntegratorLabelData()
    {
        BudgetEncumbranceBudgetSourceIntegratorLabelTmp sourceIntegratorTmp;

        DictEnum sourceIntegrators = new DictEnum(enumnum(BudgetControlSourceIntegrator));

        RecordInsertList sourceIntegratorTmpRecordInsertList = this.initializeInsertList(tableNum(BudgetEncumbranceBudgetSourceIntegratorLabelTmp), sourceIntegratorTmp);

        for (int sourceIntegratorIndex = 0; sourceIntegratorIndex < sourceIntegrators.values(); sourceIntegratorIndex++)
        {
            BudgetControlSourceIntegrator sourceIntegrator = any2Enum(sourceIntegrators.index2Value(sourceIntegratorIndex));
            sourceIntegratorTmp.BudgetControlSourceIntegrator = sourceIntegrator;
            sourceIntegratorTmp.Description = sourceIntegrators.value2Label(sourceIntegrator);

            // Replace the original enum label with new labels for some of source document integrator
            this.setNewLabelForSourceIntegrator(sourceIntegratorTmp);

            sourceIntegratorTmpRecordInsertList.add(sourceIntegratorTmp);
        }

        sourceIntegratorTmpRecordInsertList.insertDatabase();

        select sourceIntegratorTmp;

        return sourceIntegratorTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeInsertList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the insert list.
    /// </summary>
    /// <param name = "_tableNum">Table id.</param>
    /// <param name = "_temp">Temp</param>
    /// <returns>RecordInsertList</returns>
    private RecordInsertList initializeInsertList(TableId _tableNum, Common _temp)
    {
        RecordInsertList recordInsertList = new RecordInsertList(
            _tableNum, // table id
            false, // skip insert
            false, // skip database log
            false, // skip events
            false, // skip aos validation
            false, // skip RLS validation
            _temp);

        return recordInsertList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewLabelForSourceIntegrator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the label for budget control source integrator label data.
    /// </summary>
    /// <param name = "_sourceIntegratorTmp"><C>BudgetEncumbranceBudgetSourceIntegratorLabelTmp</C> buffer data.</param>
    private void setNewLabelForSourceIntegrator(BudgetEncumbranceBudgetSourceIntegratorLabelTmp _sourceIntegratorTmp)
    {
        switch (_sourceIntegratorTmp.BudgetControlSourceIntegrator)
        {
            case BudgetControlSourceIntegrator::AdvancedLedgerEntry:
                _sourceIntegratorTmp.Description = "@SPS1174";
                break;

            case BudgetControlSourceIntegrator::LedgerEntry:
                _sourceIntegratorTmp.Description = "@SYS317091";
                break;

            case BudgetControlSourceIntegrator::PurchCommitment_PSN:
            _sourceIntegratorTmp.Description = "@SPS1843";
                break;

            case BudgetControlSourceIntegrator::PurchaseOrder:
                _sourceIntegratorTmp.Description = "@SYS136944";
                break;

            case BudgetControlSourceIntegrator::PurchaseRequisition:
            _sourceIntegratorTmp.Description = "@SYS94925";
                break;

            case BudgetControlSourceIntegrator::TravelRequisition:
            _sourceIntegratorTmp.Description = "@SYS153179";
                break;

            case BudgetControlSourceIntegrator::VendorInvoice:
            _sourceIntegratorTmp.Description = "@SYS119252";
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanupBudgetTrialBalanceData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clean the budget trial balance data before processing.
    /// </summary>
    private void cleanupBudgetTrialBalanceData()
    {
        delete_from budgetLedgerBalanceSummary;
        delete_from totalsTmpTable;
        delete_from ledgerTrialBalanceTmp;
        delete_from budgetAnalysisDimensionSummaryTmp;
        delete_from budgetLedgerBalanceDetail;
        delete_from budgetTransactionDetail;
        delete_from balanceDimensionDescriptionsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveBudgetBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the budget balance data.
    /// </summary>
    private void retrieveBudgetBalance()
    {
        budgetControlProcessor.run(budgetTransactionDetail, budgetAnalysisDimensionSummaryTmp);

        budgetControlSourceDocumentReference = budgetControlProcessor.getbudgetControlSourceDocumentReferenceTmp();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentOperationTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the posting layer of type <C>CurrentOperationsTax</C>
    /// </summary>
    /// <returns>CurrentOperationTax type</returns>
    private CurrentOperationsTax getCurrentOperationTax()
    {
        CurrentOperationsTax currentOperationsTax;

        switch (analysisRequest.parmPostingLayer())
        {
            case OperationsTax::Current:
                currentOperationsTax = CurrentOperationsTax::Current;
                break;

            case OperationsTax::Operations:
                currentOperationsTax = CurrentOperationsTax::Operations;
                break;

            case OperationsTax::Tax:
                currentOperationsTax = CurrentOperationsTax::Tax;
                break;

            default:
                currentOperationsTax = CurrentOperationsTax::None;
                break;
        }

        return currentOperationsTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerTransactionDocumentNumberByBudgetControlReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the document number of the ledger transaction by budget control reference
    /// </summary>
    private void updateLedgerTransactionDocumentNumberByBudgetControlReference()
    {
        // For those source document without Document Number and SubledgerVoucher in general journal tables.
        update_recordset ledgerTransactionDetail
            setting DocumentNumber = budgetControlSourceDocumentReference.DocumentNumber
            join budgetControlSourceDocumentReference
                where budgetControlSourceDocumentReference.SourceDocumentHeader == ledgerTransactionDetail.SourceDocumentHeader
                    && ledgerTransactionDetail.DocumentNumber == '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensionNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the dimension name.
    /// </summary>
    /// <returns><C>DimensionFocusNameTmp</C> buffer data.</returns>
    private DimensionFocusNameTmp populateDimensionNames()
    {
        delete_from dimensionFocusNameTmp;

        insert_recordset dimensionFocusNameTmp (LedgerDimension)
            select FocusLedgerDimension
                from budgetLedgerBalanceSummary;

        DimensionFocusNameTmp::generateFocusDescriptions(
            dimensionFocusNameTmp,
            DimensionHierarchy::find(analysisRequest.parmDimensionHierarchyId()).Name,
            new UserConnection());

        return dimensionFocusNameTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateDimensionDescriptions</Name>
				<Source><![CDATA[
    private GeneralLedgerBalanceDimensionDescriptionsTmp populateDimensionDescriptions()
    {
        insert_recordset balanceDimensionDescriptionsTmp (ReportingDimension)
            select ReportingDimension from budgetLedgerBalanceSummary
                group by ReportingDimension;

        GeneralLedgerBalanceDimensionDescriptionsTmp::generateFocusDescriptions(
            balanceDimensionDescriptionsTmp,
            DimensionHierarchy::find(analysisRequest.parmDimensionHierarchyId()).Name);

        return balanceDimensionDescriptionsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateBudgetTrialEncumbranceInquirySummaryTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate the summary total for encumbrance reconciliation summary data.
    /// </summary>
    [Hookable(false)]
    public void populateBudgetTrialEncumbranceInquirySummaryTotal(boolean _showAllDimensionRows = true, boolean _showVarianceEntryOnly = false)
    {
        delete_from totalsTmpTable;

        select firstonly Recid from budgetLedgerBalanceSummary;

        if (budgetLedgerBalanceSummary.RecId)
        {
            if (isLedgerBalanceFeatureEnabled)
            {
                if (_showAllDimensionRows && !_showVarianceEntryOnly)
                {
                    insert_recordset totalsTmpTable(TrialBalance, Encumbrance, PreEncumbrance)
                    select firstonly sum(TrialBalance), sum(Encumbrance), sum(PreEncumbrance)
                        from budgetLedgerBalanceSummary
                            where budgetLedgerBalanceSummary.ReportingDimension != 0;
                }
                else if (!_showAllDimensionRows && !_showVarianceEntryOnly)
                {
                    insert_recordset totalsTmpTable(TrialBalance, Encumbrance, PreEncumbrance)
                        select firstonly sum(TrialBalance), sum(Encumbrance), sum(PreEncumbrance)
                            from budgetLedgerBalanceSummary
                                where budgetLedgerBalanceSummary.isBalanced == NoYes::No
                                    && budgetLedgerBalanceSummary.ReportingDimension != 0;
                }
                else if (_showAllDimensionRows && _showVarianceEntryOnly)
                {
                    insert_recordset totalsTmpTable(TrialBalance, Encumbrance, PreEncumbrance)
                        select firstonly sum(TrialBalance), sum(Encumbrance), sum(PreEncumbrance)
                            from budgetLedgerBalanceSummary
                                where (budgetLedgerBalanceSummary.TrialBalance - budgetLedgerBalanceSummary.Encumbrance - budgetLedgerBalanceSummary.PreEncumbrance) != 0
                                    && budgetLedgerBalanceSummary.ReportingDimension != 0;
                }
                else
                {
                    insert_recordset totalsTmpTable(TrialBalance, Encumbrance, PreEncumbrance)
                        select firstonly sum(TrialBalance), sum(Encumbrance), sum(PreEncumbrance)
                            from budgetLedgerBalanceSummary
                                where (budgetLedgerBalanceSummary.TrialBalance - budgetLedgerBalanceSummary.Encumbrance - budgetLedgerBalanceSummary.PreEncumbrance) != 0
                                    && budgetLedgerBalanceSummary.isBalanced == NoYes::No
                                    && budgetLedgerBalanceSummary.ReportingDimension != 0;
                }
            }
            else
            {
                if (_showAllDimensionRows && !_showVarianceEntryOnly)
                {
                    insert_recordset totalsTmpTable(TrialBalance, Encumbrance, PreEncumbrance)
                    select firstonly sum(TrialBalance), sum(Encumbrance), sum(PreEncumbrance)
                        from budgetLedgerBalanceSummary
                            where budgetLedgerBalanceSummary.FocusLedgerDimension != 0;
                }
                else if (!_showAllDimensionRows && !_showVarianceEntryOnly)
                {
                    insert_recordset totalsTmpTable(TrialBalance, Encumbrance, PreEncumbrance)
                        select firstonly sum(TrialBalance), sum(Encumbrance), sum(PreEncumbrance)
                            from budgetLedgerBalanceSummary
                                where budgetLedgerBalanceSummary.isBalanced == NoYes::No
                                    && budgetLedgerBalanceSummary.FocusLedgerDimension != 0;
                }
                else if (_showAllDimensionRows && _showVarianceEntryOnly)
                {
                    insert_recordset totalsTmpTable(TrialBalance, Encumbrance, PreEncumbrance)
                        select firstonly sum(TrialBalance), sum(Encumbrance), sum(PreEncumbrance)
                            from budgetLedgerBalanceSummary
                                where (budgetLedgerBalanceSummary.TrialBalance - budgetLedgerBalanceSummary.Encumbrance - budgetLedgerBalanceSummary.PreEncumbrance) != 0
                                    && budgetLedgerBalanceSummary.FocusLedgerDimension != 0;
                }
                else
                {
                    insert_recordset totalsTmpTable(TrialBalance, Encumbrance, PreEncumbrance)
                        select firstonly sum(TrialBalance), sum(Encumbrance), sum(PreEncumbrance)
                            from budgetLedgerBalanceSummary
                                where (budgetLedgerBalanceSummary.TrialBalance - budgetLedgerBalanceSummary.Encumbrance - budgetLedgerBalanceSummary.PreEncumbrance) != 0
                                    && budgetLedgerBalanceSummary.isBalanced == NoYes::No
                                    && budgetLedgerBalanceSummary.FocusLedgerDimension != 0;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveLedgerBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieve the ledger transaction balance.
    /// </summary>
    private void retrieveLedgerBalance()
    {
        generalLedgerProcessor.run(ledgerTransactionDetail, ledgerTrialBalanceTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDetailBalanceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the status of the encumbrance reconciliation detail data based on encumbrance amount and preencumbrance amount.
    /// </summary>
    private void updateDetailBalanceStatus()
    {
        update_recordset budgetLedgerBalanceDetail
            setting IsBalanced = NoYes::Yes
                where budgetLedgerBalanceDetail.GeneralLedgerAmount == (budgetLedgerBalanceDetail.EncumbranceAmount + budgetLedgerBalanceDetail.PreEncumbranceAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSummaryBalanceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the status of the encumbrance reconciliation summary data based of encumbrance amount and preencumbrance amount.
    /// </summary>
    private void updateSummaryBalanceStatus()
    {
        //Find all unbalanced ledger accounts from detail transactions.
        BudgetEncumbranceDistinctLedgerDocumentTmp ledgerAccountUnBalanced;

        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset ledgerAccountUnBalanced(LedgerDimension)
            select ReportingDimension
                from budgetLedgerBalanceDetail
                    group by budgetLedgerBalanceDetail.ReportingDimension
                    where budgetLedgerBalanceDetail.IsBalanced == NoYes::No;

            BudgetBalanceReportingDimensionReference dimensionReference;

            // Set the balance flag in summary table for those balanced ledger accounts.
            update_recordset budgetLedgerBalanceSummary
                setting IsBalanced = NoYes::Yes
                notexists join ledgerAccountUnBalanced
                    where ledgerAccountUnBalanced.LedgerDimension == budgetLedgerBalanceSummary.ReportingDimension;
        }
        else
        {
            insert_recordset ledgerAccountUnBalanced(LedgerDimension)
            select FocusLedgerDimension
                from budgetLedgerBalanceDetail
                    group by budgetLedgerBalanceDetail.FocusLedgerDimension
                    where budgetLedgerBalanceDetail.IsBalanced == NoYes::No;

            // Set the balance flag in summary table for those balanced ledger accounts.
            update_recordset budgetLedgerBalanceSummary
                setting IsBalanced = NoYes::Yes
                notexists join ledgerAccountUnBalanced
                    where ledgerAccountUnBalanced.LedgerDimension == budgetLedgerBalanceSummary.FocusLedgerDimension;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeInquiryDetailData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merge the encumbrance reconciliation detail data.
    /// </summary>
    private void mergeInquiryDetailData()
    {
        // Update source document header in Detail data
        this.updateGroupSourceDocumentHeaderAndGroupTransactionDetail();

        this.generateUniqueBudgetData();

        this.performTransactionDetailMerging();

        this.updateInquiryDetailTypeAndDescriptionForDocument();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniqueLedgerDetailData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get unique ledger detail data.
    /// </summary>
    /// <returns><c>BudgetTrialEncumbranceInquiryDetailTmp</c> buffer</returns>
    private BudgetTrialEncumbranceInquiryDetailTmp getUniqueLedgerDetailData()
    {
        BudgetTrialEncumbranceInquiryDetailTmp uniqueLedgerDetail;

        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset uniqueLedgerDetail
            (
                ReportingDimension,
                DocumentNumber,
                GeneralLedgerAmount
            )
            select
                ReportingDimension,
                SubledgerVoucher,
                sum(Amount)
                from ledgerTransactionDetail
                    group by ledgerTransactionDetail.ReportingDimension, 
                        ledgerTransactionDetail.SubledgerVoucher
                    where ledgerTransactionDetail.GroupSourceDocumentHeader == 0;

            insert_recordset uniqueLedgerDetail
            (
                ReportingDimension,
                DocumentNumber,
                SourceDocumentHeader,
                GeneralLedgerAmount
            )
            select
                ReportingDimension,
                DocumentNumber,
                GroupSourceDocumentHeader,
                sum(Amount)
                from ledgerTransactionDetail
                    group by ledgerTransactionDetail.ReportingDimension,
                        ledgerTransactionDetail.GroupSourceDocumentHeader,
                        ledgerTransactionDetail.DocumentNumber
                    where ledgerTransactionDetail.GroupSourceDocumentHeader > 0;

            update_recordset uniqueLedgerDetail
                setting AccountingDate = ledgerTransactionDetail.AccountingDate,
                    GeneralJournalAccountEntry = ledgerTransactionDetail.GeneralJournalAccountEntry
                join firstonly ledgerTransactionDetail
                    where ledgerTransactionDetail.ReportingDimension == uniqueLedgerDetail.ReportingDimension
                        && (ledgerTransactionDetail.DocumentNumber == uniqueLedgerDetail.DocumentNumber
                            || ledgerTransactionDetail.SubledgerVoucher == uniqueLedgerDetail.DocumentNumber)
                        && ledgerTransactionDetail.GroupSourceDocumentHeader == uniqueLedgerDetail.SourceDocumentHeader;
        }
        else
        {
            insert_recordset uniqueLedgerDetail
            (
                FocusLedgerDimension,
                DocumentNumber,
                GeneralLedgerAmount
            )
            select
                FocusLedgerDimension,
                SubledgerVoucher,
                sum(Amount)
                from ledgerTransactionDetail
                    group by ledgerTransactionDetail.FocusLedgerDimension,
                        ledgerTransactionDetail.SubledgerVoucher
                    where ledgerTransactionDetail.GroupSourceDocumentHeader == 0;

            insert_recordset uniqueLedgerDetail
            (
                FocusLedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                GeneralLedgerAmount
            )
            select
                FocusLedgerDimension,
                DocumentNumber,
                GroupSourceDocumentHeader,
                sum(Amount)
                from ledgerTransactionDetail
                    group by ledgerTransactionDetail.FocusLedgerDimension,
                        ledgerTransactionDetail.GroupSourceDocumentHeader,
                        ledgerTransactionDetail.DocumentNumber
                    where ledgerTransactionDetail.GroupSourceDocumentHeader > 0;

            update_recordset uniqueLedgerDetail
                setting AccountingDate = ledgerTransactionDetail.AccountingDate,
                    GeneralJournalAccountEntry = ledgerTransactionDetail.GeneralJournalAccountEntry
                join firstonly ledgerTransactionDetail
                    where ledgerTransactionDetail.FocusLedgerDimension == uniqueLedgerDetail.FocusLedgerDimension
                        && (ledgerTransactionDetail.DocumentNumber == uniqueLedgerDetail.DocumentNumber
                            || ledgerTransactionDetail.SubledgerVoucher == uniqueLedgerDetail.DocumentNumber)
                        && ledgerTransactionDetail.GroupSourceDocumentHeader == uniqueLedgerDetail.SourceDocumentHeader;
        }

        return uniqueLedgerDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniqueEncumbranceDetailData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get unique encumbrance detail data.
    /// </summary>
    /// <returns><C>BudgetTrialEncumbranceInquiryDetailTmp</C> buffer containing encumbrance data.</returns>
    private BudgetTrialEncumbranceInquiryDetailTmp getUniqueEncumbranceDetailData()
    {
        BudgetEncumbranceDistinctLedgerDocumentTmp ledgerAccountAmount = this.getUniqueLedgerAccountDocumentByFlag(EncumbranceType::Encumbrance);
        BudgetTrialEncumbranceInquiryDetailTmp uniqueEncumbranceDetail;

        if (isLedgerBalanceFeatureEnabled)
        {
            // Insert not existing documents in General journal side.
            insert_recordset uniqueEncumbranceDetail
            (
                ReportingDimension,
                DocumentNumber,
                EncumbranceAmount,
                AccountingDate,
                SourceDocumentHeader
            )
            select
                LedgerDimension,
                DocumentNumber,
                Amount,
                AccountingDate,
                SourceDocumentHeader
                from ledgerAccountAmount;
        }
        else
        {
            // Insert not existing documents in General journal side.
            insert_recordset uniqueEncumbranceDetail
            (
                FocusLedgerDimension,
                DocumentNumber,
                EncumbranceAmount,
                AccountingDate,
                SourceDocumentHeader
            )
            select
                LedgerDimension,
                DocumentNumber,
                Amount,
                AccountingDate,
                SourceDocumentHeader
                from ledgerAccountAmount;
        }

        return uniqueEncumbranceDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniquePreEncumbranceDetailData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get unique pre-encumbrance detail data.
    /// </summary>
    /// <returns><C>BudgetTrialEncumbranceInquiryDetailTmp</C> buffer containing pre-encumbrance detail data.</returns>
    private BudgetTrialEncumbranceInquiryDetailTmp getUniquePreEncumbranceDetailData()
    {
        BudgetEncumbranceDistinctLedgerDocumentTmp ledgerAccountAmount = this.getUniqueLedgerAccountDocumentByFlag(EncumbranceType::PreEncumbrance);

        BudgetTrialEncumbranceInquiryDetailTmp uniquePreEncumbranceDetail;

        if (isLedgerBalanceFeatureEnabled)
        {
            // Insert unique pre-encumbrance detail.
            insert_recordset uniquePreEncumbranceDetail
            (
                ReportingDimension,
                DocumentNumber,
                PreEncumbranceAmount,
                AccountingDate,
                SourceDocumentHeader
            )
            select
                LedgerDimension,
                DocumentNumber,
                Amount,
                AccountingDate,
                SourceDocumentHeader
                from ledgerAccountAmount;
        }
        else
        {
            // Insert unique pre-encumbrance detail.
            insert_recordset uniquePreEncumbranceDetail
            (
                FocusLedgerDimension,
                DocumentNumber,
                PreEncumbranceAmount,
                AccountingDate,
                SourceDocumentHeader
            )
            select
                LedgerDimension,
                DocumentNumber,
                Amount,
                AccountingDate,
                SourceDocumentHeader
                from ledgerAccountAmount;
        }

        return uniquePreEncumbranceDetail;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLedgerDetailWithoutSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Insert the encumbrance inquiry detail record which doesn't have source document header.
    /// </summary>
    /// <param name = "_ledgerDetail"><C>BudgetTrialEncumbranceInquiryDetailTmp</C> buffer data</param>
    private void insertLedgerDetailWithoutSourceDocument(BudgetTrialEncumbranceInquiryDetailTmp _ledgerDetail)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset budgetLedgerBalanceDetail
            (
                ReportingDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
            )
            select
                ReportingDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
                from _ledgerDetail
                    where _ledgerDetail.SourceDocumentHeader == 0;
        }
        else
        {
            insert_recordset budgetLedgerBalanceDetail
            (
                FocusLedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
            )
            select
                FocusLedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
                from _ledgerDetail
                    where _ledgerDetail.SourceDocumentHeader == 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWithBudgetDetailWithoutSourceDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the encumbrance and preencumbrance amount of the encumbrance reconciliation detail which doesn't have source document.
    /// </summary>
    /// <param name = "_encumbranceDetail">Encumbrance detail buffer.</param>
    /// <param name = "_preEncumbranceDetail">Preencumbrance detail buffer.</param>
    private void updateWithBudgetDetailWithoutSourceDocument(
        BudgetTrialEncumbranceInquiryDetailTmp _encumbranceDetail,
        BudgetTrialEncumbranceInquiryDetailTmp _preEncumbranceDetail)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            update_recordset budgetLedgerBalanceDetail
                setting
                    EncumbranceAmount = _encumbranceDetail.EncumbranceAmount
                    join EncumbranceAmount from _encumbranceDetail
                        where budgetLedgerBalanceDetail.ReportingDimension == _encumbranceDetail.ReportingDimension
                            && budgetLedgerBalanceDetail.SourceDocumentHeader == _encumbranceDetail.SourceDocumentHeader;

            update_recordset budgetLedgerBalanceDetail
                setting
                    PreEncumbranceAmount = _preEncumbranceDetail.PreEncumbranceAmount
                    join PreEncumbranceAmount from _preEncumbranceDetail
                        where budgetLedgerBalanceDetail.ReportingDimension == _preEncumbranceDetail.ReportingDimension
                            && budgetLedgerBalanceDetail.SourceDocumentHeader == _preEncumbranceDetail.SourceDocumentHeader;
        }
        else
        {
            update_recordset budgetLedgerBalanceDetail
                setting
                    EncumbranceAmount = _encumbranceDetail.EncumbranceAmount
                    join EncumbranceAmount from _encumbranceDetail
                        where budgetLedgerBalanceDetail.FocusLedgerDimension == _encumbranceDetail.FocusLedgerDimension
                            && budgetLedgerBalanceDetail.SourceDocumentHeader == _encumbranceDetail.SourceDocumentHeader;

            update_recordset budgetLedgerBalanceDetail
                setting
                    PreEncumbranceAmount = _preEncumbranceDetail.PreEncumbranceAmount
                    join PreEncumbranceAmount from _preEncumbranceDetail
                        where budgetLedgerBalanceDetail.FocusLedgerDimension == _preEncumbranceDetail.FocusLedgerDimension
                            && budgetLedgerBalanceDetail.SourceDocumentHeader == _preEncumbranceDetail.SourceDocumentHeader;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertThreeCommonAccountBufferDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add encumbrance reconciliation detail which has ledger detail, encumbrance detail and preencumbrance detail.
    /// </summary>
    /// <param name = "_ledgerDetail">ledger detail buffer.</param>
    /// <param name = "_encumbranceDetail">Encumbrance detail buffer.</param>
    /// <param name = "_preEncumbranceDetail">Preencumbrance detail buffer.</param>
    private void insertThreeCommonAccountBufferDetails(
        BudgetTrialEncumbranceInquiryDetailTmp _ledgerDetail,
        BudgetTrialEncumbranceInquiryDetailTmp _encumbranceDetail,
        BudgetTrialEncumbranceInquiryDetailTmp _preEncumbranceDetail)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset budgetLedgerBalanceDetail
            (
                ReportingDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount,
                DocumentNumber,
                EncumbranceAmount,
                PreEncumbranceAmount
            )
            select
                ReportingDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
                from _ledgerDetail
                join DocumentNumber, EncumbranceAmount from _encumbranceDetail
                    where _ledgerDetail.ReportingDimension == _encumbranceDetail.ReportingDimension
                        && _ledgerDetail.SourceDocumentHeader == _encumbranceDetail.SourceDocumentHeader
                join PreEncumbranceAmount from _preEncumbranceDetail
                    where _preEncumbranceDetail.ReportingDimension == _encumbranceDetail.ReportingDimension
                        && _preEncumbranceDetail.SourceDocumentHeader == _encumbranceDetail.SourceDocumentHeader;
        }
        else
        {
            insert_recordset budgetLedgerBalanceDetail
            (
                FocusLedgerDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount,
                DocumentNumber,
                EncumbranceAmount,
                PreEncumbranceAmount
            )
            select
                FocusLedgerDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
                from _ledgerDetail
                join DocumentNumber, EncumbranceAmount from _encumbranceDetail
                    where _ledgerDetail.FocusLedgerDimension == _encumbranceDetail.FocusLedgerDimension
                        && _ledgerDetail.SourceDocumentHeader == _encumbranceDetail.SourceDocumentHeader
                join PreEncumbranceAmount from _preEncumbranceDetail
                    where _preEncumbranceDetail.FocusLedgerDimension == _encumbranceDetail.FocusLedgerDimension
                        && _preEncumbranceDetail.SourceDocumentHeader == _encumbranceDetail.SourceDocumentHeader;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTwoCommonAccountBufferDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the encumbrance reconciliation detail having two thing common out of ledger detail, encumbrance detail and preencumbrance detail.
    /// </summary>
    /// <param name = "_ledgerDetail">ledger detail buffer.</param>
    /// <param name = "_encumbranceDetail">Encumbrance detail buffer.</param>
    /// <param name = "_preEncumbranceDetail">Preencumbrance detail buffer.</param>
    private void insertTwoCommonAccountBufferDetails(
        BudgetTrialEncumbranceInquiryDetailTmp _ledgerDetail,
        BudgetTrialEncumbranceInquiryDetailTmp _encumbranceDetail,
        BudgetTrialEncumbranceInquiryDetailTmp _preEncumbranceDetail)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset budgetLedgerBalanceDetail
            (
                ReportingDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount,
                DocumentNumber,
                EncumbranceAmount
            )
            select
                ReportingDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
                from _ledgerDetail
                join DocumentNumber, EncumbranceAmount from _encumbranceDetail
                    where _ledgerDetail.ReportingDimension == _encumbranceDetail.ReportingDimension
                        && _ledgerDetail.SourceDocumentHeader == _encumbranceDetail.SourceDocumentHeader;

            insert_recordset budgetLedgerBalanceDetail
            (
                ReportingDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount,
                DocumentNumber,
                PreEncumbranceAmount
            )
            select
                ReportingDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
                from _ledgerDetail
                join DocumentNumber, PreEncumbranceAmount from _preEncumbranceDetail
                    where _ledgerDetail.ReportingDimension == _preEncumbranceDetail.ReportingDimension
                        && _ledgerDetail.SourceDocumentHeader == _preEncumbranceDetail.SourceDocumentHeader;

            insert_recordset budgetLedgerBalanceDetail
            (
                ReportingDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                EncumbranceAmount,
                PreEncumbranceAmount
            )
            select
                ReportingDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                EncumbranceAmount
                from _encumbranceDetail
                join PreEncumbranceAmount from _preEncumbranceDetail
                    where _preEncumbranceDetail.ReportingDimension == _encumbranceDetail.ReportingDimension
                        && _preEncumbranceDetail.SourceDocumentHeader == _encumbranceDetail.SourceDocumentHeader;
        }
        else
        {
            insert_recordset budgetLedgerBalanceDetail
            (
                FocusLedgerDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount,
                DocumentNumber,
                EncumbranceAmount
            )
            select
                FocusLedgerDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
                from _ledgerDetail
                join DocumentNumber, EncumbranceAmount from _encumbranceDetail
                    where _ledgerDetail.FocusLedgerDimension == _encumbranceDetail.FocusLedgerDimension
                        && _ledgerDetail.SourceDocumentHeader == _encumbranceDetail.SourceDocumentHeader;

            insert_recordset budgetLedgerBalanceDetail
            (
                FocusLedgerDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount,
                DocumentNumber,
                PreEncumbranceAmount
            )
            select
                FocusLedgerDimension,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
                from _ledgerDetail
                join DocumentNumber, PreEncumbranceAmount from _preEncumbranceDetail
                    where _ledgerDetail.FocusLedgerDimension == _preEncumbranceDetail.FocusLedgerDimension
                        && _ledgerDetail.SourceDocumentHeader == _preEncumbranceDetail.SourceDocumentHeader;

            insert_recordset budgetLedgerBalanceDetail
            (
                FocusLedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                EncumbranceAmount,
                PreEncumbranceAmount
            )
            select
                FocusLedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                EncumbranceAmount
                from _encumbranceDetail
                join PreEncumbranceAmount from _preEncumbranceDetail
                    where _preEncumbranceDetail.FocusLedgerDimension == _encumbranceDetail.FocusLedgerDimension
                        && _preEncumbranceDetail.SourceDocumentHeader == _encumbranceDetail.SourceDocumentHeader;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertSingleAccountBufferDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add encumbrance reconciliation detail for single account detail buffer.
    /// </summary>
    /// <param name = "_ledgerDetail">ledger detail buffer.</param>
    /// <param name = "_encumbranceDetail">Encumbrance detail buffer.</param>
    /// <param name = "_preEncumbranceDetail">Preencumbrance detail buffer.</param>
    private void insertSingleAccountBufferDetails(
        BudgetTrialEncumbranceInquiryDetailTmp _ledgerDetail,
        BudgetTrialEncumbranceInquiryDetailTmp _encumbranceDetail,
        BudgetTrialEncumbranceInquiryDetailTmp _preEncumbranceDetail)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            insert_recordset budgetLedgerBalanceDetail
            (
                ReportingDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
            )
            select
                ReportingDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
                from _ledgerDetail;

            insert_recordset budgetLedgerBalanceDetail
            (
                ReportingDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                EncumbranceAmount
            )
            select
                ReportingDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                EncumbranceAmount
                from _encumbranceDetail;

            insert_recordset budgetLedgerBalanceDetail
            (
                ReportingDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                PreEncumbranceAmount
            )
            select
                ReportingDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                PreEncumbranceAmount
                from _preEncumbranceDetail;
        }
        else
        {
            insert_recordset budgetLedgerBalanceDetail
            (
                FocusLedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
            )
            select
                FocusLedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                GeneralLedgerAmount
                from _ledgerDetail;

            insert_recordset budgetLedgerBalanceDetail
            (
                FocusLedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                EncumbranceAmount
            )
            select
                FocusLedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                EncumbranceAmount
                from _encumbranceDetail;

            insert_recordset budgetLedgerBalanceDetail
            (
                FocusLedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                PreEncumbranceAmount
            )
            select
                FocusLedgerDimension,
                DocumentNumber,
                SourceDocumentHeader,
                AccountingDate,
                PreEncumbranceAmount
                from _preEncumbranceDetail;
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteMergedDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the data that has been merged.
    /// </summary>
    /// <param name = "_ledgerDetail">ledger detail buffer.</param>
    /// <param name = "_encumbranceDetail">Encumbrance detail buffer.</param>
    /// <param name = "_preEncumbranceDetail">Preencumbrance detail buffer.</param>
    private void deleteMergedDetails(
        BudgetTrialEncumbranceInquiryDetailTmp _ledgerDetail,
        BudgetTrialEncumbranceInquiryDetailTmp _encumbranceDetail,
        BudgetTrialEncumbranceInquiryDetailTmp _preEncumbranceDetail)
    {
        if (isLedgerBalanceFeatureEnabled)
        {
            delete_from _ledgerDetail
                exists join budgetLedgerBalanceDetail
                    where _ledgerDetail.ReportingDimension == budgetLedgerBalanceDetail.ReportingDimension
                        && _ledgerDetail.SourceDocumentHeader == budgetLedgerBalanceDetail.SourceDocumentHeader;

            delete_from _encumbranceDetail
                exists join budgetLedgerBalanceDetail
                    where _encumbranceDetail.ReportingDimension == budgetLedgerBalanceDetail.ReportingDimension
                        && _encumbranceDetail.SourceDocumentHeader == budgetLedgerBalanceDetail.SourceDocumentHeader;

            delete_from _preEncumbranceDetail
                exists join budgetLedgerBalanceDetail
                    where _preEncumbranceDetail.ReportingDimension == budgetLedgerBalanceDetail.ReportingDimension
                        && _preEncumbranceDetail.SourceDocumentHeader == budgetLedgerBalanceDetail.SourceDocumentHeader;
        }
        else
        {
            delete_from _ledgerDetail
                exists join budgetLedgerBalanceDetail
                    where _ledgerDetail.FocusLedgerDimension == budgetLedgerBalanceDetail.FocusLedgerDimension
                        && _ledgerDetail.SourceDocumentHeader == budgetLedgerBalanceDetail.SourceDocumentHeader;

            delete_from _encumbranceDetail
                exists join budgetLedgerBalanceDetail
                    where _encumbranceDetail.FocusLedgerDimension == budgetLedgerBalanceDetail.FocusLedgerDimension
                        && _encumbranceDetail.SourceDocumentHeader == budgetLedgerBalanceDetail.SourceDocumentHeader;

            delete_from _preEncumbranceDetail
                exists join budgetLedgerBalanceDetail
                    where _preEncumbranceDetail.FocusLedgerDimension == budgetLedgerBalanceDetail.FocusLedgerDimension
                        && _preEncumbranceDetail.SourceDocumentHeader == budgetLedgerBalanceDetail.SourceDocumentHeader;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateEncumbranceInquiryDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generate encumbrance reconciliation detail buffer.
    /// </summary>
    /// <param name = "_ledgerDetail">ledger detail buffer.</param>
    /// <param name = "_encumbranceDetail">Encumbrance detail buffer.</param>
    /// <param name = "_preEncumbranceDetail">Preencumbrance detail buffer.</param>
    private void generateEncumbranceInquiryDetails(
        BudgetTrialEncumbranceInquiryDetailTmp _ledgerDetail,
        BudgetTrialEncumbranceInquiryDetailTmp _encumbranceDetail,
        BudgetTrialEncumbranceInquiryDetailTmp _preEncumbranceDetail)
    {
        // Add no source document header ledger transaction
        this.insertLedgerDetailWithoutSourceDocument(_ledgerDetail);
        this.updateWithBudgetDetailWithoutSourceDocument(_encumbranceDetail, _preEncumbranceDetail);
        this.deleteMergedDetails(_ledgerDetail, _encumbranceDetail, _preEncumbranceDetail);

        // Merge three of them for common ledger dimension
        this.insertThreeCommonAccountBufferDetails(_ledgerDetail, _encumbranceDetail, _preEncumbranceDetail);
        this.deleteMergedDetails(_ledgerDetail, _encumbranceDetail, _preEncumbranceDetail);

        // Merge two of them for common ledger dimension
        this.insertTwoCommonAccountBufferDetails(_ledgerDetail, _encumbranceDetail, _preEncumbranceDetail);
        this.deleteMergedDetails(_ledgerDetail, _encumbranceDetail, _preEncumbranceDetail);

        // Merge one detail at time for ledger dimension
        this.insertSingleAccountBufferDetails(_ledgerDetail, _encumbranceDetail, _preEncumbranceDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>performTransactionDetailMerging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the merging of the encumbrance reconciliation detail data.
    /// </summary>
    private void performTransactionDetailMerging()
    {
        // Get unique Ledger detail buffer
        BudgetTrialEncumbranceInquiryDetailTmp ledgerDetailData = this.getUniqueLedgerDetailData();

        // Get unique encumbrance detail buffer
        BudgetTrialEncumbranceInquiryDetailTmp encumbranceDetailData = this.getUniqueEncumbranceDetailData();

        // Get unique pre-encumbrance detail buffer
        BudgetTrialEncumbranceInquiryDetailTmp preEncumbranceDetailData = this.getUniquePreEncumbranceDetailData();

        this.generateEncumbranceInquiryDetails(ledgerDetailData, encumbranceDetailData, preEncumbranceDetailData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGroupSourceDocumentHeaderAndGroupTransactionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the group source document and group transaction detail for encumbrance reconciliation detail data.
    /// </summary>
    private void updateGroupSourceDocumentHeaderAndGroupTransactionDetail()
    {
        // Update PR transaction group source based on relieving in budget reference relieved by PO.  
        this.updatePRGroupSourceDocumentBasedOnRelievingDocumentPO();

        update_recordset ledgerTransactionDetail
            setting GroupSourceDocumentHeader = ledgerTransactionDetail.SourceDocumentHeader
                where ledgerTransactionDetail.GroupSourceDocumentHeader == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePRGroupSourceDocumentBasedOnRelievingDocumentPO</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the group source document of the purchase requisition based on relieving document of purchase order.
    /// </summary>
    private void updatePRGroupSourceDocumentBasedOnRelievingDocumentPO()
    {
        // Update PR transaction group source via pairing up for the relived and relieving documents by JournalNumber or SubledgerVoucher.
        BudgetEncumbranceLedgerPRTransactionTmp relievingDocumentTransaction;
        insert_recordset relievingDocumentTransaction(JournalNumber, SubledgerVoucher, SourceDocumentHeader)
            select JournalNumber, SubledgerVoucher, SourceDocumentHeader from ledgerTransactionDetail
                join budgetControlSourceDocumentReference
                    group by ledgerTransactionDetail.JournalNumber, ledgerTransactionDetail.SubledgerVoucher, ledgerTransactionDetail.SourceDocumentHeader
                        where ledgerTransactionDetail.DocumentNumber == budgetControlSourceDocumentReference.DocumentNumber
                            && ledgerTransactionDetail.SourceDocumentHeader == budgetControlSourceDocumentReference.SourceDocumentHeader
                            && budgetControlSourceDocumentReference.BudgetControlSourceIntegrator == BudgetControlSourceIntegrator::PurchaseOrder
                            && budgetControlSourceDocumentReference.BudgetControlSourceIntegratorReference == BudgetControlSourceIntegrator::PurchaseRequisition;

        update_recordset ledgerTransactionDetail
            setting GroupSourceDocumentHeader = budgetControlSourceDocumentReference.SourceDocumentHeader,
                SourceDocumentHeader = budgetControlSourceDocumentReference.SourceDocumentHeader,
                DocumentNumber = budgetControlSourceDocumentReference.DocumentNumber
           join relievingDocumentTransaction
                where (relievingDocumentTransaction.JournalNumber == ledgerTransactionDetail.JournalNumber
                    || relievingDocumentTransaction.SubledgerVoucher == ledgerTransactionDetail.SubledgerVoucher)
            join budgetControlSourceDocumentReference
                where budgetControlSourceDocumentReference.SourceDocumentHeader == relievingDocumentTransaction.SourceDocumentHeader
                    && budgetControlSourceDocumentReference.SourceDocumentHeaderReference == ledgerTransactionDetail.SourceDocumentHeader
                    && budgetControlSourceDocumentReference.BudgetControlSourceIntegratorReference == BudgetControlSourceIntegrator::PurchaseRequisition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateInquiryDetailTypeAndDescriptionForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update type and description of the encumbrance reconciliation detail document.
    /// </summary>
    private void updateInquiryDetailTypeAndDescriptionForDocument()
    {
        this.updateDocumentType();

        this.updateDocumentDescription();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUniqueLedgerAccountDocumentByFlag</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the unique ledger data on the basis of whether the document is encumbrance or pre-encumbrance.
    /// </summary>
    /// <param name = "_isEncumbrance">true if the document is encumbrance else false</param>
    /// <returns><C>BudgetEncumbranceDistinctLedgerDocumentTmp</C> buffer.</returns>
    private BudgetEncumbranceDistinctLedgerDocumentTmp getUniqueLedgerAccountDocumentByFlag(EncumbranceType _encumbranceType)
    {
        BudgetEncumbranceDistinctLedgerDocumentTmp ledgerAccountAmountDocument;

        insert_recordset ledgerAccountAmountDocument(LedgerDimension, DocumentNumber, AccountingDate, SourceDocumentHeader, Amount)
            select LedgerDimension, DocumentNumber, AccountingDate, SourceDocumentHeader, sum(Amount)
                from uniqueBudgetAccountDocumentAmounts
                    group by LedgerDimension, DocumentNumber, AccountingDate, SourceDocumentHeader
                        where uniqueBudgetAccountDocumentAmounts.EncumbranceType == _encumbranceType;

        return ledgerAccountAmountDocument;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>