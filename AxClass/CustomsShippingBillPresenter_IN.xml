<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustomsShippingBillPresenter_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Presenter class for customs shipping bill data.
/// </summary>
internal static class CustomsShippingBillPresenter_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateTmpForlookupCustomsExportOrder_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provide the lookup data for shipping bill, only show the project invoice which has not been posted with tax.
    /// </summary>
    internal static TaxTmpCustomsExportOrder_IN populateTmpForlookupCustomsExportOrder_IN()
    {
        SalesTable                     salesTable;
        TaxTmpCustomsExportOrder_IN    tmpCustomsExportOrder_IN;

        while select DocumentStatus, SalesId, SalesName, SalesStatus, CustAccount from salesTable
            where salesTable.CustomsExportOrder_IN == NoYes::Yes
                && salesTable.CustomsShippingBill_IN == NoYes::No
                && (salesTable.DocumentStatus == DocumentStatus::Invoice
                    || salesTable.DocumentStatus == DocumentStatus::ShippingBill_IN
                    || salesTable.DocumentStatus == DocumentStatus::ProjectInvoice)
        {
            if (salesTable.DocumentStatus == DocumentStatus::ProjectInvoice)
            {
                ProjInvoiceJour projInvoiceJour;
                TaxTrans        taxTrans;
                ProjInvoiceItem projInvoiceItem;

                select firstonly LedgerVoucher, InvoiceDate, RecId from projInvoiceJour
                    exists join projInvoiceItem
                        where projInvoiceJour.InvoiceDate == projInvoiceItem.InvoiceDate
                            && projInvoiceJour.ProjInvoiceId == projInvoiceItem.ProjInvoiceId
                            && projInvoiceItem.SalesId == salesTable.SalesId;

                if (projInvoiceJour)
                {
                    taxTrans = TaxTrans::find(projInvoiceJour.LedgerVoucher, projInvoiceJour.InvoiceDate);

                    if (taxTrans)
                    {
                        continue;
                    }
                }
            }

            tmpCustomsExportOrder_IN.SalesId        = salesTable.SalesId;
            tmpCustomsExportOrder_IN.SalesName      = salesTable.SalesName;
            tmpCustomsExportOrder_IN.SalesStatus    = salesTable.SalesStatus;
            tmpCustomsExportOrder_IN.CustAccount    = salesTable.CustAccount;
            tmpCustomsExportOrder_IN.insert();
        }

        return tmpCustomsExportOrder_IN;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>