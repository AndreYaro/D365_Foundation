<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustParameters_ApplicationSuite_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustParameters_ApplicationSuite_Extension</c> class is an extension class which extends the <c>CustParameters</c> form initialization functionality.
/// </summary>
[ExtensionOf(formStr(CustParameters))]
public final class CustParameters_ApplicationSuite_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    void init()
    {
        next init();

        this.visibleDocParametersTab();

        this.updateCreditInvoicingReportVisibility();
    }

]]></Source>
			</Method>
			<Method>
				<Name>visibleDocParametersTab</Name>
				<Source><![CDATA[
    private void visibleDocParametersTab()
    {
        if (BusinessDocumentParameters::isAnyFeatureForCountryEnabled())
        {
            FormTabPageControl docParametersTabPage = this.design().controlName(formControlStr(CustParameters, TabAxdDocumentParameters)) as FormTabPageControl;

            if (docParametersTabPage)
            {
                docParametersTabPage.visible(false);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCreditInvoicingReportVisibility</Name>
				<Source><![CDATA[
    private void updateCreditInvoicingReportVisibility()
    {
        FormCheckBoxControl creditInvoicingReport = this.design().controlName(formControlStr(CustParameters, Invoice_CreditInvoicingReport)) as FormCheckBoxControl;

        if (creditInvoicingReport)
        {
            creditInvoicingReport.visible(CreditInvoicingToggle::isCreditInvoicingEnabled());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CustParametersDynamicQRCode_ERFormatMappingDynamicQRCode_OnLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Implements the form control OnLookup event handler for the SalesParameters_ERFormatMappingDynamicQRCode_IN control of the CustParameters form.
    /// </summary>
    /// <param name="_sender">The form control raising the event.</param>
    /// <param name="_e">Args for the event.</param>
    [FormControlEventHandler(formControlStr(CustParameters, SalesParameters_ERFormatMappingDynamicQRCode_IN), FormControlEventType::Lookup)]
    public static void CustParametersDynamicQRCode_ERFormatMappingDynamicQRCode_OnLookup(FormControl _sender, FormControlEventArgs _e)
    {
        ERFormatMappingTable::lookup(
            _sender,
            OnlineInvoicingHelper_IN::ModelName,
            OnlineInvoicingHelper_IN::RootDefinitionTaxInvoice);

        FormControlCancelableSuperEventArgs ce = _e as FormControlCancelableSuperEventArgs;
        if (ce)
        {
            ce.CancelSuperCall();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>