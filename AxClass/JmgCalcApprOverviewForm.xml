<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgCalcApprOverviewForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>JmgCalcApprOverviewForm</c> class supports the <c>JmgCalcApprOverview</c> form.
/// </summary>
class JmgCalcApprOverviewForm
{
    FormRun                 calcApproveForm;
    FormDataSource          calcApprDataSource;
    QueryRun                queryRun;
    JmgStampJournalTable    stampJournalTable;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>clearStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the internal status buffer.
    /// </summary>
    private void clearStatus()
    {
        JmgStampJournalTable    tmpref = stampJournalTable;
        Integer                 wrkint;

        ttsbegin;
        wrkint = 1;
        while (wrkint)
        {
            wrkint = 0;
            while select tmpref
            {
                wrkint++;
                if (wrkint > 30)
                    break;
                tmpref.delete();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>JmgCalcApprOverviewForm</c> class.
    /// </summary>
    /// <param name="_calcApproveForm">
    /// A reference to the <c>JmgCalcApprOverview</c> form.
    /// </param>
    /// <param name="_formDataSource">
    /// A reference to the data source.
    /// </param>
    /// <param name="_jmgStampJournalTable">
    /// A reference to the temporary buffer where values are inserted.
    /// </param>
    void new (FormRun _calcApproveForm,FormDataSource _formDataSource, JmgStampJournalTable _jmgStampJournalTable)
    {
        calcApproveForm     = _calcApproveForm;
        stampJournalTable   = _jmgStampJournalTable;
        calcApprDataSource  = _formDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Generates a query and initializes the internal temporary buffer based on query results.
    /// </summary>
    /// <param name="_forcerun">
    ///    A Boolean value that specifies whether the query must be run even though the user cancelled the
    ///    query.
    /// </param>
    /// <returns>
    ///    true if the query was run and the temporary buffer was updated; otherwise, false.
    /// </returns>
    boolean query(boolean _forcerun = false)
    {
        Query                   query;
        QueryBuildDataSource    dataSource;
        QueryRun                qR;
        JmgStampJournalTable    tmpref                  = stampJournalTable;
        JmgStampJournalTable    getstampJournalTable;
        JmgEmployee             grpEmployee;
        Integer                 wrkNo;
        query               = new Query();
        query.recordLevelSecurity(true);
        dataSource          = query.addDataSource(tablenum(JmgStampJournalTable));
        dataSource.allowAdd(false);
        dataSource.orderMode(OrderMode::GroupBy);
        dataSource.addSortField(fieldnum(JmgStampJournalTable,ProfileDate),SortOrder::Ascending);
        dataSource.addSortField(fieldnum(JmgStampJournalTable,ApproveGroupId),SortOrder::Ascending);
        dataSource.addSortField(fieldnum(JmgStampJournalTable,CalculateGroupId),SortOrder::Ascending);
        dataSource.addSelectionField(fieldnum(JmgStampJournalTable,Calculated),SelectionField::Min);
        dataSource.addSelectionField(fieldnum(JmgStampJournalTable,Approved),SelectionField::Min);
        dataSource.addSelectionField(fieldnum(JmgStampJournalTable,Transferred),SelectionField::Min);
        dataSource.addRange(fieldnum(JmgStampJournalTable,ProfileDate));
        dataSource.addRange(fieldnum(JmgStampJournalTable,CalculateGroupId));
        dataSource.addRange(fieldnum(JmgStampJournalTable,ApproveGroupId));

        qR = new QueryRun(query);
        if (_forcerun || qR.prompt())
        {
            this.clearStatus();
            while (qR.next())
            {
                getstampJournalTable                    = qR.get(tablenum(JmgStampJournalTable));
                select firstonly RecId from tmpref
                    where tmpref.ProfileDate       == getstampJournalTable.ProfileDate         &&
                          tmpref.ApproveGroupId    == getstampJournalTable.ApproveGroupId      &&
                          tmpref.CalculateGroupId  == getstampJournalTable.CalculateGroupId    &&
                          tmpref.Worker;

                if (! tmpref)
                {
                    tmpref.data(getstampJournalTable);
                    wrkNo++;
                    tmpref.Worker                          = wrkNo;
                    tmpref.insert();
                }
            }

            query               = new Query();
            query.recordLevelSecurity(true);
            dataSource          = query.addDataSource(tablenum(JmgEmployee));
            dataSource.orderMode(OrderMode::GroupBy);
            dataSource.addSortField(fieldnum(JmgEmployee,ApproveGroupId),SortOrder::Ascending);
            dataSource.addSelectionField(fieldnum(JmgEmployee,ApproveGroupId),SelectionField::Min);
            if (qR && qR.query().dataSourceTable(tablenum(JmgStampJournalTable)).findRange(fieldnum(JmgStampJournalTable,ApproveGroupId)))
            {
                dataSource.addRange(fieldnum(JmgEmployee,ApproveGroupId)).value(
                    qR.query().dataSourceTable(tablenum(JmgStampJournalTable)).findRange(fieldnum(JmgStampJournalTable,ApproveGroupId)).value());
            }

            dataSource.addSortField(fieldnum(JmgEmployee,CalculateGroupId),SortOrder::Ascending);
            dataSource.addSelectionField(fieldnum(JmgEmployee,CalculateGroupId),SelectionField::Min);
            if (qR && qR.query().dataSourceTable(tablenum(JmgStampJournalTable)).findRange(fieldnum(JmgStampJournalTable,CalculateGroupId)))
            {
                dataSource.addRange(fieldnum(JmgEmployee,CalculateGroupId)).value(
                    qR.query().dataSourceTable(tablenum(JmgStampJournalTable)).findRange(fieldnum(JmgStampJournalTable,CalculateGroupId)).value());
            }

            dataSource          = dataSource.addDataSource(tablenum(JmgStampJournalTrans));
            dataSource.orderMode(OrderMode::GroupBy);
            dataSource.addSortField(fieldnum(JmgStampJournalTrans,ProfileDate),SortOrder::Ascending);
            dataSource.addSelectionField(fieldnum(JmgStampJournalTrans,ProfileDate),SelectionField::Min);
            if (qR && qR.query().dataSourceTable(tablenum(JmgStampJournalTable)).findRange(fieldnum(JmgStampJournalTable,ProfileDate)))
            {
                dataSource.addRange(fieldnum(JmgStampJournalTrans,ProfileDate)).value(
                    qR.query().dataSourceTable(tablenum(JmgStampJournalTable)).findRange(fieldnum(JmgStampJournalTable,ProfileDate)).value());
            }
            dataSource.relations(false);
            dataSource.addLink(fieldnum(JmgEmployee,Worker),fieldnum(JmgStampJournalTrans,Worker));

            dataSource          = dataSource.addDataSource(tablenum(JmgStampJournalTable));
            dataSource.joinMode(JoinMode::NoExistsJoin);
            dataSource.relations(true);

            qR = new QueryRun(query);

            JmgStampJournalTrans    grpstampJournalTrans;
            while (qR.next())
            {
                grpEmployee                                     = qR.get(tablenum(JmgEmployee));
                grpstampJournalTrans                            = qR.get(tablenum(JmgStampJournalTrans));

                if (grpstampJournalTrans.ProfileDate && grpEmployee.ApproveGroupId && grpEmployee.CalculateGroupId)
                {
                    select firstonly forupdate tmpref
                        where tmpref.ProfileDate       == grpstampJournalTrans.ProfileDate &&
                              tmpref.ApproveGroupId    == grpEmployee.ApproveGroupId       &&
                              tmpref.CalculateGroupId  == grpEmployee.CalculateGroupId     &&
                              tmpref.Worker;
                    if (tmpref)
                    {
                        tmpref.Calculated                      = NoYes::No;
                        tmpref.Approved                        = NoYes::No;
                        tmpref.Transferred                     = NoYes::No;
                        tmpref.update();
                    }
                    else
                    {
                        getstampJournalTable.ProfileDate        = grpstampJournalTrans.ProfileDate;
                        getstampJournalTable.ApproveGroupId     = grpEmployee.ApproveGroupId;
                        getstampJournalTable.CalculateGroupId   = grpEmployee.CalculateGroupId;
                        tmpref.data(getstampJournalTable);
                        wrkNo++;
                        tmpref.Worker                          = wrkNo;
                        tmpref.insert();
                    }
                }
            }

            calcApprDataSource.executeQuery();
        }
        else
        {
            return false;
        }
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>