<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchNonStockedValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
class PurchNonStockedValidator extends TradeNonStockedValidator
{
    PurchLine purchLine;

    UnitQty         registered;
    UnitQty         received;
    UnitQty         invoiced;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantities and sets the <c>totalsHasBeenCalculated</c> value to true.
    /// </summary>
    protected void calcSum()
    {
        if (!totalsHasBeenCalculated)
        {
            registered  = this.registered();
            received    = this.received();
            invoiced    = this.invoiced();
            totalsHasBeenCalculated = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiced</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the invoiced quantity for the line.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    protected UnitQty invoiced()
    {
        return purchLine.invoicedInTotalServer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the allowed over-delivery percent for the purchase line.
    /// </summary>
    /// <returns>
    /// A <c>Percent</c> value.
    /// </returns>
    public Percent overDeliveryPct()
    {
        return purchLine.overDeliveryPct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPurchLine</Name>
				<Source><![CDATA[
        public PurchLine parmPurchLine(PurchLine _purchLine = purchLine)
    {
        purchLine = _purchLine;
        return purchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesPurchLine</Name>
				<Source><![CDATA[
        public SalesPurchLine parmSalesPurchLine(SalesPurchLine _salesPurchLine = salesPurchLine)
    {
        salesPurchLine  = _salesPurchLine;
        purchLine       = _salesPurchLine;

        return salesPurchLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyFinancialUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates and returns the quantity that has been financially updated.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    public UnitQty qtyFinancialUpdated()
    {
        this.calcSum();

        return invoiced;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyphysicalUpdated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates quantity that has been packing slip updated, but not yet financially updated.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    public UnitQty qtyphysicalUpdated()
    {
        this.calcSum();

        return received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>qtyphysicalUpdatedAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the quantity that has been physically updated by either registering or receiving.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    public UnitQty qtyphysicalUpdatedAll()
    {
        this.calcSum();

        return  registered + received;
    }

]]></Source>
			</Method>
			<Method>
				<Name>received</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the received quantity for the line.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    protected UnitQty received()
    {
        return purchLine.receivedOnPackingSlipInTotal()
        - purchLine.invoicedOnPackingSlipInTotal()
        ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the registered quantity for the line.
    /// </summary>
    /// <returns>
    /// A <c>UnitQty</c> value.
    /// </returns>
    protected UnitQty registered()
    {
        return purchLine.registeredInPurchUnit();
    }

]]></Source>
			</Method>
			<Method>
				<Name>underDeliveryPct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the allowed under-delivery percent for the line.
    /// </summary>
    /// <returns>
    /// A <c>Percent</c> value.
    /// </returns>
    public Percent underDeliveryPct()
    {
        return purchLine.underDeliveryPct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        protected static PurchNonStockedValidator construct()
    {
        return new PurchNonStockedValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>PurchNonStockedValidator</c> class by using the given
    /// <c>PurchLine</c> .
    /// </summary>
    /// <param name="_purchLine">
    /// A <c>PurchLine</c> object to use to create the <c>PurchNonStockedValidator</c> class.
    /// </param>
    /// <returns>
    /// A <c>PurchNonStockedValidator</c> object.
    /// </returns>
    public static PurchNonStockedValidator newFromPurchLine(PurchLine _purchLine)
    {
        PurchNonStockedValidator purchNonStockedValidator;

        purchNonStockedValidator = PurchNonStockedValidator::construct();
        purchNonStockedValidator.parmPurchLine(_purchLine);
        purchNonStockedValidator.parmSalesPurchLine(_purchLine);

        return purchNonStockedValidator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>