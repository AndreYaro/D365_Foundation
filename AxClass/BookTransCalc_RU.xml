<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BookTransCalc_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class BookTransCalc_RU
{
    SalesPurchBookDataMap_RU              salesPurchBookDataMap;
    ToDate                                toDate;
    FromDate                              fromDate;
    FactureJour_RU                        factureJour;
    SalesBookVatProcessParametersRecId_RU operationRecId;
    boolean                               fullCheck;

    #VATTransitionPeriod_RU
    SalesPurchBookLineNum_RU    lineNum;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    public void calc()
    {
        switch (factureJour.FactureType)
        {
            case FactureType_RU::AmoutDifference   :
            case FactureType_RU::ExchAdj           :
            case FactureType_RU::AdvanceAdjustment :
            case FactureType_RU::VATAdjustment     :
                if (this.isAmountAdjustment())
                {
                    this.processAmountAdjustment();
                }
                else
                {
                    this.processAmountDiff();
                }
                break;

            case FactureType_RU::Invoice :
                this.processInvoice();
                break;

            case FactureType_RU::Prepayment :
                if (this.isPrepaymentStorno())
                {
                    this.processPrepaymentStorno();
                }
                else
                {
                    this.processPrepayment();
                }
                break;

            case FactureType_RU::AdvanceReport :
                this.processAdvanceReport();
                break;

            case FactureType_RU::TaxCorrection :
                this.processTaxCorrection();
                break;

            case FactureType_RU::Facture :
                this.processFacture();
                break;

            case FactureType_RU::GTD, FactureType_RU::CustomCorrection:
                this.processCustom();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkDate</Name>
				<Source><![CDATA[
    protected boolean checkDate(TransDate _transDate)
    {
        return (_transDate >= fromDate) && (_transDate <= toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCustVendName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds customer, vendor or employee name.
    /// </summary>
    /// <param name="_module">
    /// The facture source module.
    /// </param>
    /// <param name="_account">
    /// The account number.
    /// </param>
    /// <returns>
    /// The name of customer, vendor or employee name.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// If used unknown facture source module.
    /// </exception>
    protected Name findCustVendName(FactureModule_RU _module, CustVendAC _account)
    {
        Name      ret;

        switch (_module)
        {
            case FactureModule_RU::Cust                    :
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
                ret = conPeek(BookTransCalc_RU::getContragentData(factureJour), 1);
                break;

            case FactureModule_RU::Vend                    :
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                ret = conPeek(BookTransCalc_RU::getCompanyData(factureJour), 1);                
                break;

            case FactureModule_RU::Empl :
                ret = EmployeeTable_RU::findByEmployeeId(_account).employeeName();
                break;

            default                     :
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAmountAdjustment</Name>
				<Source><![CDATA[
    protected boolean isAmountAdjustment()
    {
        return factureJour.AmountAdjustment == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBadAmortisation</Name>
				<Source><![CDATA[
    protected boolean isBadAmortisation(CustVendTrans _custVendTrans)
    {
        return _custVendTrans.TransType == LedgerTransType::RTax25_BadDebtCreditAmortisation ||
               _custVendTrans.TransType == LedgerTransType::RTax25_BadDebtDebitAmortisation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrepaymentStorno</Name>
				<Source><![CDATA[
    protected boolean isPrepaymentStorno()
    {
        return factureJour.FactureType == FactureType_RU::Prepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRestoredVAT</Name>
				<Source><![CDATA[
    protected boolean isRestoredVAT()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    // method should exists to suppress BP deviations
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataMap</Name>
				<Source><![CDATA[
    public SalesPurchBookDataMap_RU parmDataMap(SalesPurchBookDataMap_RU _salesPurchBookDataMap = salesPurchBookDataMap)
    {
        salesPurchBookDataMap = _salesPurchBookDataMap;

        return salesPurchBookDataMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFactureJour</Name>
				<Source><![CDATA[
    public FactureJour_RU parmFactureJour(FactureJour_RU _factureJour = factureJour)
    {
        factureJour = _factureJour;

        return factureJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    public FromDate parmFromDate(FromDate _fromDate = fromDate)
    {
        ;
        fromDate = _fromDate;

        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFullCheck</Name>
				<Source><![CDATA[
    public boolean parmFullCheck(boolean _fullCheck = fullCheck)
    {
        fullCheck = _fullCheck;
        return fullCheck;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    public SalesPurchBookLineNum_RU parmLineNum(SalesPurchBookLineNum_RU _lineNum = lineNum)
    {
        lineNum = _lineNum;

        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOperationRecId</Name>
				<Source><![CDATA[
    public SalesBookVatProcessParametersRecId_RU parmOperationRecId(SalesBookVatProcessParametersRecId_RU _operationRecId = operationRecId)
    {
        operationRecId = _operationRecId;
        return operationRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    public ToDate parmToDate(ToDate _toDate = toDate)
    {
        ;
        toDate = _toDate;

        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAdvanceReport</Name>
				<Source><![CDATA[
    protected void processAdvanceReport()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAmountAdjustment</Name>
				<Source><![CDATA[
    abstract protected void processAmountAdjustment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processAmountDiff</Name>
				<Source><![CDATA[
    abstract protected void processAmountDiff()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCustom</Name>
				<Source><![CDATA[
    protected void processCustom()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFacture</Name>
				<Source><![CDATA[
    protected void processFacture()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInvoice</Name>
				<Source><![CDATA[
    abstract protected void processInvoice()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPrepayment</Name>
				<Source><![CDATA[
    abstract protected void processPrepayment()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processPrepaymentStorno</Name>
				<Source><![CDATA[
    abstract protected void processPrepaymentStorno()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRestoredVAT</Name>
				<Source><![CDATA[
    protected void processRestoredVAT()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTaxCorrection</Name>
				<Source><![CDATA[
    abstract protected void processTaxCorrection()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container with company data, such as name, inn, kpp.
    /// </summary>
    /// <param name="_factureJour">
    /// <c>FactureJour_RU</c> record data fetched for.
    /// </param>
    /// <returns>
    /// Container with company data, such as name, inn, kpp.
    /// </returns>
    static container getCompanyData(FactureJour_RU _factureJour)
    {
        container            ret;
        FactureHeaderData_RU headerData;
        FactureJourParm_RU   factureJourParm;

        #FactureHeader_RU

        factureJourParm = FactureJourParm_RU::newParameters(_factureJour, true);
        headerData = FactureHeaderData_RU::newFromCaller(factureJourParm);

        ret = [headerData.getHeaderAttribute(#CompanyName), headerData.getHeaderAttribute(#CompanyINN), headerData.getHeaderAttribute(#CompanyKPP)];

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContragentData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns container with contragent data, such as name, inn, kpp.
    /// </summary>
    /// <param name="_factureJour">
    /// <c>FactureJour_RU</c> record data fetched for.
    /// </param>
    /// <returns>
    /// Container with contragent data, such as name, inn, kpp.
    /// </returns>
    static container getContragentData(FactureJour_RU _factureJour)
    {
        container            ret;
        FactureHeaderData_RU headerData;
        FactureJourParm_RU   factureJourParm;

        #FactureHeader_RU

        factureJourParm = FactureJourParm_RU::newParameters(_factureJour, true);
        headerData = FactureHeaderData_RU::newFromCaller(factureJourParm);

        ret = [headerData.getHeaderAttribute(#ContragentName), headerData.getHeaderAttribute(#ContragentINN), headerData.getHeaderAttribute(#ContragentKPP)];

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>