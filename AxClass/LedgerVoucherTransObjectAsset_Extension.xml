<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerVoucherTransObjectAsset_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Extension of LedgerVoucherTransObject
/// </summary>
[ExtensionOf(classStr(LedgerVoucherTransObject))]
internal final class LedgerVoucherTransObjectAsset_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>newTransactionAmountDefault</Name>
				<Source><![CDATA[
    public static LedgerVoucherTransObject newTransactionAmountDefault(
        LedgerVoucherObject _defaultLedgerPostingReference,
        LedgerPostingType _postingType,
        LedgerDimensionAccount _ledgerDimensionId,
        CurrencyCode _transactionCurrencyCode,
        Money _transactionCurrencyAmount,
        CurrencyExchangeHelper _exchangeRateHelper)
    {
        LedgerVoucherTransObject voucherTransObject = next newTransactionAmountDefault(_defaultLedgerPostingReference, _postingType, _ledgerDimensionId, _transactionCurrencyCode, _transactionCurrencyAmount, _exchangeRateHelper);

        container fixedAssetPostingTypes = [LedgerPostingType::FixedAssetsDebit,
            LedgerPostingType::FixedAssetsCredit,
            LedgerPostingType::FixedAssetsDebit_RU,
            LedgerPostingType::FixedAssetsCredit_RU];

        // Check if is Fixed Asset (or RU) LedgerPostingType
        if (conFind(fixedAssetPostingTypes, _postingType) > 0)
        {
            if (AssetSkipDimensionValidationReversalFlight::instance().isEnabled())
            {
                if (tableNum(LedgerJournalTrans) == voucherTransObject.parmSourceTableId()
                    && voucherTransObject.parmSourceRecId()
                    && !voucherTransObject.parmSkipDimensionValidation())
                {
                    LedgerJournalTrans_Asset ledgerJournalTrans_Asset;

                    // Query the LJT_Asset alone to check if is Fixed Asset transaction
                    select firstonly RecId from LedgerJournalTrans_Asset
                        where LedgerJournalTrans_Asset.RefRecId == voucherTransObject.parmSourceRecid();
 
                    if (LedgerJournalTrans_Asset.RecId)
                    {
                        LedgerJournalTrans ledgerJournalTrans;
                        LedgerJournalTrans ledgerJournalTransReverse;

                        // If is Fixed Asset transaction, than check if this is reversing another LJT
                        select firstonly RecId from ledgerJournalTransReverse
                          exists join ledgerJournalTrans where ledgerJournalTransReverse.RecId == ledgerJournalTrans.RevRecId
                               && ledgerJournalTrans.RecId == voucherTransObject.parmSourceRecId();

                        if (ledgerJournalTransReverse.RecId)
                        {
                            voucherTransObject.parmSkipDimensionValidation(true);
                        }
                    }
                }
            }
        }

        return voucherTransObject;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>