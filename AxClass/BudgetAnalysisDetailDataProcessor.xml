<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetAnalysisDetailDataProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is a derived class that is responsible for processing data for the budget analysis details form.
/// </summary>
public class BudgetAnalysisDetailDataProcessor extends BudgetAnalysisDataProcessor
{

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addBudgetSourceTransactionFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields for budget source tracking tables.
    /// </summary>
    /// <param name="_fieldMapping">
    /// A <c>Map</c> object to be used to insert fields mappings.
    /// </param>
    /// <param name="_budgetAnalysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <param name="_addReferenceDocumentField">
    /// A boolean value to indicate whether or not to add relieving source tracking field.
    /// </param>
    /// <param name="_forCarryForwardBudgetSource">
    /// A boolean value to indicate whether or not to add carry forward field.
    /// </param>
    /// <param name="_forPreEncumbrance">
    /// A boolean value to indicate whether or not to add encumbrance field or pre-encumbrance field.
    /// </param>
    /// <param name="_addBudgetSourceField">
    /// A boolean value to indicate whether or not to add budget source field.
    /// </param>
    /// <param name="_forActuals">
    /// A boolean value to indicate whether add fields related to actuals.
    /// </param>
    protected void addBudgetSourceTransactionFieldMapping(
        Map                 _fieldMapping,
        BudgetAnalysisQuery _budgetAnalysisQuery,
        boolean             _addReferenceDocumentField,
        boolean             _forCarryForwardBudgetSource,
        boolean             _forPreEncumbrance,
        boolean             _addBudgetSourceField,
        boolean             _forActuals = false)
    {
        QueryBuildDataSource budgetSourceTrackingDS;
    
        if (_budgetAnalysisQuery.parmAnalysisQuery().dataSourceName(RelievingBudgetSourceTrackingDataSourceName))
        {
            budgetSourceTrackingDS = _budgetAnalysisQuery.parmAnalysisQuery().dataSourceName(RelievingBudgetSourceTrackingDataSourceName);
        }
        else
        {
            budgetSourceTrackingDS = _budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(BudgetSourceTracking));
        }
    
        budgetAnalysisTransactionDataSource = budgetAnalysisTransactionDataSource::BudgetSource;
    
    
    
        _fieldMapping.insert(
            fieldStr(BudgetAnalysisDimensionDetailTmp, DocumentNumber),
            [budgetSourceTrackingDS.uniqueId(),
                fieldStr(BudgetSourceTracking, TrackingNumber)]);
    
        _fieldMapping.insert(
            fieldStr(BudgetAnalysisDimensionDetailTmp, TransactionDate),
            [budgetSourceTrackingDS.uniqueId(),
                fieldStr(BudgetSourceTracking, TrackingDate)]);
    
        if (_addReferenceDocumentField)
        {
            _fieldMapping.insert(
                fieldStr(BudgetAnalysisDimensionDetailTmp, ReferenceSourceTracking),
                [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(
                    tableNum(BudgetSourceTrackingRelievingDetail)).uniqueId(),
                    fieldStr(BudgetSourceTrackingRelievingDetail, RelievedBudgetSourceTrackingDetail)]);
    
            _fieldMapping.insert(
                fieldStr(BudgetAnalysisDimensionDetailTmp, Amount),
                [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(
                    tableNum(BudgetSourceTrackingRelievingDetail)).uniqueId(),
                    fieldStr(BudgetSourceTrackingRelievingDetail, AccountingCurrencyAmount)]);
    
            _fieldMapping.insert(
                fieldStr(BudgetAnalysisDimensionDetailTmp, TransactionRecId),
                [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceName(
                    RelievedBudgetSourceTrackingDataSourceName).uniqueId(),
                    fieldStr(BudgetSourceTracking, BudgetSource)]);

            _fieldMapping.insert(
                fieldStr(BudgetAnalysisDimensionDetailTmp, RelievingBudgetSource),
                [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceName(RelievingBudgetSourceTrackingDataSourceName).uniqueId(),
                    fieldStr(BudgetSourceTracking, BudgetSource)]);

            showReferenceDocument = true;
        }
        else
        {
            _fieldMapping.insert(
                fieldStr(BudgetAnalysisDimensionDetailTmp, Amount),
                [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(
                    tableNum(BudgetSourceTrackingDetail)).uniqueId(),
                    fieldStr(BudgetSourceTrackingDetail, AccountingCurrencyAmount)]);
    
            _fieldMapping.insert(
                fieldStr(BudgetAnalysisDimensionDetailTmp, TransactionRecId),
                [budgetSourceTrackingDS.uniqueId(),
                    fieldStr(BudgetSourceTracking, BudgetSource)]);

            _fieldMapping.insert(
                fieldStr(BudgetAnalysisDimensionDetailTmp, IsCarryForward),
                [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(
                    tableNum(BudgetSourceTrackingDetail)).uniqueId(),
                    fieldStr(BudgetSourceTrackingDetail, IsCarryForward)]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addBudgetTransactionFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields for budget register entries related tables.
    /// </summary>
    /// <param name="_fieldMapping">
    /// A <c>Map</c> object to be used to insert field mappings.
    /// </param>
    /// <param name="_budgetAnalysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <param name="_forCarryForward">
    /// A boolean value to indicate whether or not to add carry forward field.
    /// </param>
    /// <param name="_forRevisedBudget">
    /// A boolean value to indicate whether or not to add fields related to revised budget.
    /// </param>
    protected void addBudgetTransactionFieldMapping(
        Map                 _fieldMapping,
        BudgetAnalysisQuery _budgetAnalysisQuery,
        boolean             _forCarryForward,
        boolean             _forRevisedBudget = false)
    {
        budgetAnalysisTransactionDataSource = budgetAnalysisTransactionDataSource::BudgetTransaction;
    
        _fieldMapping.insert(
            fieldStr(BudgetAnalysisDimensionDetailTmp, Amount),
            [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(BudgetTransactionLine))
                .uniqueId(), fieldStr(BudgetTransactionLine, AccountingCurrencyAmount)]);
    
        _fieldMapping.insert(
            fieldStr(BudgetAnalysisDimensionDetailTmp, DocumentNumber),
            [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(
                tableNum(BudgetTransactionHeader)).uniqueId(),
                fieldStr(BudgetTransactionHeader, TransactionNumber)]);

        _fieldMapping.insert(
        fieldStr(BudgetAnalysisDimensionDetailTmp, TransactionDate),
        [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(
            tableNum(BudgetTransactionLine)).uniqueId(),
            fieldStr(BudgetTransactionLine, Date)]);

        _fieldMapping.insert(
            fieldStr(BudgetAnalysisDimensionDetailTmp, TransactionRecId),
            [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(
                tableNum(BudgetTransactionHeader)).uniqueId(),
                fieldStr(BudgetTransactionHeader, RecId)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneralJournalTransactionFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields for budget register entries related tables.
    /// </summary>
    /// <param name="_fieldMapping">
    /// A <c>Map</c> object to be used to insert field mappings.
    /// </param>
    /// <param name="_budgetAnalysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <param name="_forRevenue">
    /// A boolean value to indicate whether or not to add fields related to revenue.
    /// </param>
    protected void addGeneralJournalTransactionFieldMapping(
        Map                 _fieldMapping,
        BudgetAnalysisQuery _budgetAnalysisQuery,
        boolean             _forRevenue)
    {
        budgetAnalysisTransactionDataSource = budgetAnalysisTransactionDataSource::GeneralJournal;
        showTransactonNumber = true;
    
        _fieldMapping.insert(
            fieldStr(BudgetAnalysisDimensionDetailTmp, Amount),
            [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(GeneralJournalAccountEntry))
                .uniqueId(), fieldStr(GeneralJournalAccountEntry, AccountingCurrencyAmount)]);
    
        _fieldMapping.insert(
            fieldStr(BudgetAnalysisDimensionDetailTmp, DocumentNumber),
            [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(
                tableNum(GeneralJournalEntry)).uniqueId(),
                fieldStr(GeneralJournalEntry, DocumentNumber)]);
    
        _fieldMapping.insert(
            fieldStr(BudgetAnalysisDimensionDetailTmp, TransactionNumber),
            [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(
                tableNum(GeneralJournalEntry)).uniqueId(),
                fieldStr(GeneralJournalEntry, JournalNumber)]);
    
        _fieldMapping.insert(
            fieldStr(BudgetAnalysisDimensionDetailTmp, TransactionDate),
            [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(
                tableNum(GeneralJournalEntry)).uniqueId(),
                fieldStr(GeneralJournalEntry, AccountingDate)]);
    
        _fieldMapping.insert(
            fieldStr(BudgetAnalysisDimensionDetailTmp, TransactionRecId),
            [_budgetAnalysisQuery.parmAnalysisQuery().dataSourceTable(
                tableNum(GeneralJournalAccountEntry)).uniqueId(),
                fieldStr(GeneralJournalAccountEntry, RecId)]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAnalysisQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the object of <c>BudgetAnalysisQuery</c>.
    /// </summary>
    /// <returns>
    /// The object of <c>BudgetAnalysisQuery</c>.
    /// </returns>
    protected BudgetAnalysisQuery constructAnalysisQuery()
    {
        return BudgetAnalysisQuery::constructForTransaction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBaseBudgetQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for budget.
    /// </summary>
    /// <returns>
    /// An object of the class <c>BudgetAnalysisQuery</c>;
    /// </returns>
    protected BudgetAnalysisQuery createBaseBudgetQuery()
    {
        BudgetAnalysisQuery budgetAnalysisQuery = super();
    
        if (isLedgerBalanceFeatureEnabled)
        {
            budgetAnalysisQuery.applyReportingDimensionFilter(request.parmFocusLedgerDimensionId());
        }
        else
        {
            budgetAnalysisQuery.applyFocusLedgerDimensionFilter(request.parmFocusLedgerDimensionId());
        }
    
        return budgetAnalysisQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBaseBudgetSourceTrackingQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for budget source tracking related tables.
    /// </summary>
    /// <param name="_addBudgetSourceField">
    /// A boolean value that indicates whether or not to add budget source field in the selection list.
    /// </param>
    /// <returns>
    /// An object of the class <c>BudgetAnalysisQuery</c>;
    /// </returns>
    protected BudgetAnalysisQuery createBaseBudgetSourceTrackingQuery(boolean _addBudgetSourceField = false)
    {
        BudgetAnalysisQuery budgetAnalysisQuery = super();
    
        if (isLedgerBalanceFeatureEnabled)
        {
            budgetAnalysisQuery.applyReportingDimensionFilter(request.parmFocusLedgerDimensionId());
        }
        else
        {
            budgetAnalysisQuery.applyFocusLedgerDimensionFilter(request.parmFocusLedgerDimensionId());
        }
    
        return budgetAnalysisQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBaseGeneralJournalActualsQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for general journal related tables.
    /// </summary>
    /// <returns>
    /// An object of the class <c>BudgetAnalysisQuery</c>;
    /// </returns>
    protected BudgetAnalysisQuery createBaseGeneralJournalActualsQuery()
    {
        BudgetAnalysisQuery budgetAnalysisQuery = super();
    
        if (isLedgerBalanceFeatureEnabled)
        {
            budgetAnalysisQuery.applyReportingDimensionFilter(request.parmFocusLedgerDimensionId());
        }
        else
        {
            budgetAnalysisQuery.applyFocusLedgerDimensionFilter(request.parmFocusLedgerDimensionId());
        }
    
        return budgetAnalysisQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFieldsMappingWithBaseFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the selection fields that are used in all of the queries.
    /// </summary>
    /// <param name="_analysisQuery">
    /// The object of <c>BudgetAnalysisQuery</c> class.
    /// </param>
    /// <returns>
    /// A <c>Map</c> that contains field mappings.
    /// </returns>
    protected Map createFieldsMappingWithBaseFields(BudgetAnalysisQuery _analysisQuery)
    {
        Map fieldMapping = new Map(Types::String, Types::Container);

        if (isLedgerBalanceFeatureEnabled)
        {
            if (_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)))
            {
                fieldMapping.insert(fieldStr(BudgetAnalysisDimensionDetailTmp, LedgerDimension), [_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(GeneralLedgerBalanceReportingDimensionReference)).uniqueId(), fieldStr(GeneralLedgerBalanceReportingDimensionReference, AccountEntryLedgerDimension)]);
            }
            else
            {
                fieldMapping.insert(fieldStr(BudgetAnalysisDimensionDetailTmp, LedgerDimension), [_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(BudgetBalanceReportingDimensionReference)).uniqueId(), fieldStr(BudgetBalanceReportingDimensionReference, BudgetLedgerDimension)]);
            }
        }
        else
        {
            if (_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)))
            {
                fieldMapping.insert(fieldStr(BudgetAnalysisDimensionDetailTmp, LedgerDimension), [_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(DimensionFocusLedgerDimensionReference)).uniqueId(), fieldStr(DimensionFocusLedgerDimensionReference, AccountEntryLedgerDimension)]);
            }
            else
            {
                fieldMapping.insert(fieldStr(BudgetAnalysisDimensionDetailTmp, LedgerDimension), [_analysisQuery.parmAnalysisQuery().dataSourceTable(tableNum(BudgetDimensionFocusDimensionReference)).uniqueId(), fieldStr(BudgetDimensionFocusDimensionReference, BudgetLedgerDimension)]);
            }
        }

        return fieldMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRelievingBudgetSourceTrackingQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query for relieving source tracking tables.
    /// </summary>
    /// <param name="_addBudgetSourceField">
    /// A boolean value that indicates whether or not to add budget source field in the selection field.
    /// </param>
    /// <returns>
    /// An object of the class <c>BudgetAnalysisQuery</c>;
    /// </returns>
    protected BudgetAnalysisQuery createRelievingBudgetSourceTrackingQuery(boolean _addBudgetSourceField = false)
    {
        BudgetAnalysisQuery budgetAnalysisQuery = super();
    
        if (isLedgerBalanceFeatureEnabled)
        {
            budgetAnalysisQuery.applyReportingDimensionFilter(request.parmFocusLedgerDimensionId());
        }
        else
        {
            budgetAnalysisQuery.applyFocusLedgerDimensionFilter(request.parmFocusLedgerDimensionId());
        }
    
        return budgetAnalysisQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountFieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the field name for the transaction amount field.
    /// </summary>
    /// <param name="_fieldName">
    /// The name of the field.
    /// </param>
    /// <returns>
    /// The name of the field.
    /// </returns>
    protected FieldName getAmountFieldName(FieldName _fieldName)
    {
        return fieldStr(BudgetAnalysisDimensionDetailTmp, Amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTempTableToInsert</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the temporary table to be used to insert the records.
    /// </summary>
    /// <param name="_inCarryForwardTable">
    /// A boolean value that indicates whether or not to insert records in carry forward table.
    /// </param>
    /// <returns>
    /// A buffer temporary table to be used to insert the records.
    /// </returns>
    protected Common getTempTableToInsert(boolean _inCarryForwardTable)
    {
        Common tempTableForInsert;
    
        if (_inCarryForwardTable)
        {
            tempTableForInsert = carryForwardDetailTempTable;
        }
        else
        {
            tempTableForInsert = detailTempTable;
        }
    
        return tempTableForInsert;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data for budget analysis summary form.
    /// </summary>
    public void process()
    {
        BudgetAnalysisColumns  columns = request.parmColumn();
        
        switch (columns)
        {
            case BudgetAnalysisColumns::ExpenseColumnSetOriginalBudget:
                this.processOriginalBudget();
                break;
    
            case BudgetAnalysisColumns::ExpenseColumnSetRevisedBudget:
                this.processRevisedBudget();
                break;
    
            case BudgetAnalysisColumns::ExpenseColumnSetEncumbrance:
                this.processEncumbrance(BudgetControlCategory::Encumbrance);
                break;
    
            case BudgetAnalysisColumns::ExpenseColumnSetPreEncumbrance:
                this.processEncumbrance(BudgetControlCategory::PreEncumbrance);
                break;
    
            case BudgetAnalysisColumns::ExpenseColumnSetActuals:
                this.processActuals();
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFActualsCF:
                this.processActualsWithCarryForward();
                this.populateCarryForwardTempTable();
                this.filterDetailRecordsForActuals(true);
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFActualsLessCF:
                this.processActualsWithCarryForward();
                this.populateCarryForwardTempTable();
                this.filterDetailRecordsForActuals();
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFBudgetCF:
                this.processCarryForwardBudget();
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFBudgetLessCF:
                this.processBudgetLessCarryForward();
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFEncumbranceCF:
                this.processEncumbranceWithCarryForward();
                this.populateCarryForwardTempTable();
                this.filterDetailRecords(true);
                break;

            case BudgetAnalysisColumns::ExpenseWithCFPreEncumbranceCF:
                this.processPreEncumbranceWithCarryForward();
                this.populateCarryForwardTempTable();
                this.filterDetailRecords(true);
                break;
    
            case BudgetAnalysisColumns::ExpenseWithCFEncumbranceLessCF:
                this.processEncumbranceWithCarryForward();
                this.populateCarryForwardTempTable();
                this.filterDetailRecords(false);
                break;

            case BudgetAnalysisColumns::ExpenseWithCFPreEncumbranceLessCF:
                this.processPreEncumbranceWithCarryForward();
                this.populateCarryForwardTempTable();
                this.filterDetailRecords(false);
                break;
    
            case BudgetAnalysisColumns::RevenueColumnSetActualLedgerRevenues:
                this.processActualRevenues();
                break;
    
            case BudgetAnalysisColumns::RevenueColumnSetOriginalEstimate:
                this.processOriginalEstimates();
                break;
    
            case BudgetAnalysisColumns::RevenueColumnSetRevisedEstimate:
                this.processRevisedEstimates();
                break;
    
            case BudgetAnalysisColumns::OperatingResultColumnSetActualRevenues:
                this.processActualRevenues();
                break;
    
            case BudgetAnalysisColumns::OperatingResultColumnSetExpenditures:
                this.processActualExpenditures();
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>