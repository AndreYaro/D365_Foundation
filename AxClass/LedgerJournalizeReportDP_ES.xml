<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalizeReportDP_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalizeReportDP_ES</c> class is the Report Data Provider class for the
///    <c>LedgerJournalizeReport_ES</c> SSRS report.
/// </summary>
[SRSReportQueryAttribute(queryStr(LedgerJournalizeReport_ES))]
public class LedgerJournalizeReportDP_ES extends SRSReportDataProviderPreProcessTempDB
{
    private LedgerJournalizeReportTmp_ES ledgerJournalizeReportTmp_ES;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getledgerJournalizeReportTmp_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>LedgerJournalizeReportTmp_ES</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>LedgerJournalizeReportTmp_ES</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tableStr(ledgerJournalizeReportTmp_ES))]
    public ledgerJournalizeReportTmp_ES getledgerJournalizeReportTmp_ES()
    {
        select ledgerJournalizeReportTmp_ES;
        return ledgerJournalizeReportTmp_ES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by
    ///    <c>LedgerJournalizeReport_ES</c> SSRS report.
    /// </remarks>
    public void processReport()
    {
        RecordInsertList recordInsertList = new RecordInsertList(tableNum(LedgerJournalizeReportTmp_ES), true, true, true, false, true, ledgerJournalizeReportTmp_ES);
        QueryRun queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            GeneralJournalEntry generalJournalEntry = queryRun.get(tablenum(GeneralJournalEntry)) as GeneralJournalEntry;
            GeneralJournalAccountEntry generalJournalAccountEntry = queryRun.get(tablenum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            LedgerEntryJournalizing ledgerEntryJournalizing = queryRun.get(tablenum(LedgerEntryJournalizing)) as LedgerEntryJournalizing;
            MainAccountLedgerDimensionView mainAccountLedgerDimensionView = queryRun.get(tablenum(MainAccountLedgerDimensionView)) as MainAccountLedgerDimensionView;

            ledgerJournalizeReportTmp_ES.clear();
            ledgerJournalizeReportTmp_ES.AccountingCurrencyAmount = generalJournalAccountEntry.AccountingCurrencyAmount;
            ledgerJournalizeReportTmp_ES.IsCorrection = generalJournalAccountEntry.IsCorrection;
            ledgerJournalizeReportTmp_ES.Text = generalJournalAccountEntry.Text;
            ledgerJournalizeReportTmp_ES.AccountingDate = generalJournalEntry.AccountingDate;
            ledgerJournalizeReportTmp_ES.GeneralJournalAccountEntry = ledgerEntryJournalizing.GeneralJournalAccountEntry;
            ledgerJournalizeReportTmp_ES.Journal = ledgerEntryJournalizing.Journal;
            ledgerJournalizeReportTmp_ES.SequenceNumber = ledgerEntryJournalizing.SequenceNumber;
            ledgerJournalizeReportTmp_ES.MainAccount = mainAccountLedgerDimensionView.MainAccount;
            ledgerJournalizeReportTmp_ES.MainAccountRecId = mainAccountLedgerDimensionView.MainAccountRecId;
            ledgerJournalizeReportTmp_ES.Name = mainAccountLedgerDimensionView.Name;
            recordInsertList.add(ledgerJournalizeReportTmp_ES);
        }

        if (recordInsertList.usageCount())
        {
            recordInsertList.insertDatabase();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>