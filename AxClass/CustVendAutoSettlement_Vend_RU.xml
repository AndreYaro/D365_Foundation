<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendAutoSettlement_Vend_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CustVendAutoSettlement_Vend_RU extends CustVendAutoSettlement_RU implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findCustVendTable</Name>
				<Source><![CDATA[
        protected CustVendTable findCustVendTable(CustVendAC _custVendAC)
    {
        return VendTable::find(_custVendAC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>module</Name>
				<Source><![CDATA[
        SysModule module()
    {
        return SysModule::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>moduleCustVend</Name>
				<Source><![CDATA[
        public ModuleCustVend moduleCustVend()
    {
        return ModuleCustVend::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
        protected Query query()
    {
        Query                   query = new Query();
        QueryBuildDataSource    qbds;
        QueryBuildRange         qr;

        // VendTransOpen -->
        qbds = query.addDataSource(tablenum(VendTransOpen));
        qbds.addRange(fieldnum(VendTransOpen, DueDate)).value(SysQuery::range(dateFrom, dateTo));
        qbds.addRange(fieldnum(VendTransOpen, AccountNum));

        qbds.addSortField(fieldnum(VendTransOpen, AccountNum));
        qbds.addSortField(fieldnum(VendTransOpen, DueDate));
        qbds.orderMode(OrderMode::OrderBy);

        // VendTrans -->
        qbds = qbds.addDataSource(tablenum(VendTrans));
        qbds.relations(true);
        qbds.joinMode(JoinMode::InnerJoin);

        qr = qbds.addRange(fieldnum(VendTrans, Invoice));
        qr.value(SysQuery::valueNotEmptyString());
        qr.status(RangeStatus::Locked);

        qr = qbds.addRange(fieldnum(VendTrans, AccountNum));
        qr.status(RangeStatus::Hidden);

        // VendTrans_W
        qbds = VendTrans_W::addToQuery(qbds, JoinMode::OuterJoin);

        qr = qbds.addRange(fieldnum(VendTrans_W, BankCurrencyTransferId_RU));
        qr.value(SysQuery::valueEmptyString());
        qr.status(RangeStatus::Hidden);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
        protected void updateQuery()
    {
        Query           query = queryRun.query();
        QueryBuildRange qbr;

        qbr = query.dataSourceTable(tablenum(VendTransOpen)).findRange(fieldnum(VendTransOpen, AccountNum));

        if (qbr)
        {
            custVendAC = this.stringValueFromRange(qbr.value());
        }

        qbr = query.dataSourceTable(tablenum(VendTransOpen)).findRange(fieldnum(VendTransOpen, DueDate));

        if (qbr)
        {
            this.updatePeriodInterval(qbr.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRanges</Name>
				<Source><![CDATA[
        protected void updateRanges()
    {
        this.findOrCreateRange(tablenum(VendTransOpen), fieldnum(VendTransOpen, DueDate), SysQuery::range(dateFrom, dateTo));
        this.findOrCreateRange(tablenum(VendTransOpen), fieldnum(VendTransOpen, AccountNum), custVendAC);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>