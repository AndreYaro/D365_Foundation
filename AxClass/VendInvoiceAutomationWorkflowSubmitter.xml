<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceAutomationWorkflowSubmitter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Concrete implementation of <c>VendInvoiceAutomationIWorkflowSubmitter</c> for submitting vendor invoices to workflow.
/// </summary>
internal final class VendInvoiceAutomationWorkflowSubmitter implements VendInvoiceAutomationIWorkflowSubmitter
{
    private VendInvoiceInfoTable vendorInvoice;
    private VendInvoiceAutomationIWorkflowSubmissionPreparer invoicePreparer;
    private VendInvoiceAutomationIWorkflowSubmissionValidator invoiceValidator;
    private VendInvoiceAutomationIWorkflowSubmissionHandler invoiceHandler;
    private VendInvoiceAutomationInstrumentationWorkflowSubmissionActivities instrumentationWorkflowSubmissionActivities;
    private ProcessScheduleWorkItem processWorkItem;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        instrumentationWorkflowSubmissionActivities = VendInvoiceAutomationInstrumentationWorkflowSubmissionActivities::createFromLoggerName(
            classStr(VendInvoiceAutomationWorkflowSubmitter));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInvoiceWorkflowSubmission</Name>
				<Source><![CDATA[
    internal static VendInvoiceAutomationWorkflowSubmitter newFromInvoiceWorkflowSubmission(
        VendInvoiceInfoTable _vendorInvoice,
        VendInvoiceAutomationIWorkflowSubmissionPreparer _invoicePreparer,
        VendInvoiceAutomationIWorkflowSubmissionValidator _invoiceValidator,
        VendInvoiceAutomationIWorkflowSubmissionHandler _invoiceHandler,
        ProcessScheduleWorkItem _processWorkItem)
    {
        VendInvoiceAutomationWorkflowSubmitter submitter =  new VendInvoiceAutomationWorkflowSubmitter();
        submitter.vendorInvoice = _vendorInvoice;
        submitter.invoicePreparer = _invoicePreparer;
        submitter.invoiceValidator = _invoiceValidator;
        submitter.invoiceHandler = _invoiceHandler;
        submitter.processWorkItem = _processWorkItem;

        return submitter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitToWorkflow</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void submitToWorkflow()
    {

        System.Exception exception;
        try
        {
            if (invoiceValidator.validateStillEligibleForAutomaticWorkflowSubmission())
            {
                using (var submitToWorkflowContext = instrumentationWorkflowSubmissionActivities.submitToWorkflowContext(vendorInvoice.RecId, processWorkItem.parmExecutionId()))
                {
                    invoicePreparer.prepareForSubmissionToWorkflow();

                    boolean isInvoiceValid;

                    isInvoiceValid = invoiceValidator.validate();

                    if (isInvoiceValid)
                    {
                        using (var performSubmitToWorkflowContext = instrumentationWorkflowSubmissionActivities.performWorkflowSubmissionContext())
                        {
                            invoiceHandler.performWorkflowSubmission();
                        }

                        using (var successContext = instrumentationWorkflowSubmissionActivities.successWorkflowSubmissionContext())
                        {
                            invoiceHandler.handleSuccessfulWorkflowSubmission();
                        }
                    }
                    else
                    {
                        using (var failedContext = instrumentationWorkflowSubmissionActivities.failureWorkflowSubmissionContext())
                        {
                            invoiceHandler.handleFailedWorkflowSubmission();
                        }
                    }
                }
            }
            else
            {
                // Immediately cancel workflow submission if the invoice is no longer eligible
                // to ensure no submission logging occurs
                return;
            }
        }
        catch (exception)
        {
            using (var exceptionContext = instrumentationWorkflowSubmissionActivities.exceptionWorkflowSubmissionContext(exception))
            {
                invoiceHandler.handleExceptionOnWorkflowSubmission();
            }
        }
        finally
        {
            invoiceHandler.handleCompletionOfWorkflowSubmission();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>