<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventStdFormM17_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class InventStdFormM17_RU extends RunBaseBatch implements BatchRetryable
{
    ItemId              itemId;
    boolean             isItemIdFixed;
    InventLocationId    inventLocationId;
    int                 totalLoops;

    DialogField dialogItemId;
    DialogField dialogInventLocationId;

    private const Version CurrentVersion = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog(DialogRunbase _dialog        = null,
                         boolean       _forceOnClient = false)
    {
        DialogRunbase dialog = super();

        dialog.addGroup("@SYS28952");

        dialogItemId = dialog.addFieldValue(extendedtypestr(ItemId), itemId);

        dialogItemId.control().registerOverrideMethod(methodstr(FormStringControl, lookup),
                                                      methodstr(InventStdFormM17_RU, itemIdLookup),
                                                      this);

        if (isItemIdFixed)
        {
            dialogItemId.enabled(false);
        }

        dialogInventLocationId = dialog.addFieldValue(extendedtypestr(InventLocationId), inventLocationId);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixItemId</Name>
				<Source><![CDATA[
    public boolean fixItemId(ItemId _itemId)
    {
        itemId = _itemId;
        isItemIdFixed = true;

        return this.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (ret)
        {
            itemId           = dialogItemId.value();
            inventLocationId = dialogInventLocationId.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemIdLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a custom lookup for the <c>ItemId</c> field.
    /// </summary>
    /// <param name="_formControl">
    ///    The <c>FormControl</c> object that needs the lookup
    /// </param>
    private void itemIdLookup(FormControl _formControl)
    {
        SysTableLookup sysTableLookup = SysTableLookup::newParameters(tableNum(InventTable), _formControl, true);

        Query query = new Query();

        InventInventoriedPolicy::addInventoriedRangeToInventTable(query.addDataSource(tableNum(InventTable)));

        sysTableLookup.parmQuery(query);

        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemId));
        sysTableLookup.addLookupfield(fieldNum(InventTable, NameAlias));
        sysTableLookup.addLookupfield(fieldNum(InventTable, ItemType));
        sysTableLookup.addLookupfield(fieldNum(InventTable, Product));

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, itemId, inventLocationId, super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of Excel report and executes it
    /// </summary>
    public void run()
    {
        OXMLExcelReport_M17 excelReport = OXMLExcelReport_M17::construct();

        excelReport.parmItemId(itemId);
        excelReport.parmInventLocationId(inventLocationId);

        excelReport.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        container       base;
        Integer         version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case CurrentVersion:
                [version, itemId, inventLocationId, base] = _packedClass;
                if (base)
                    ret = super(base);
                break;

            default:
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean res = super();

        if (itemId)
        {
            if (!InventTable::checkExist(itemId))
            {
                res = false;
            }
        }
        else
        {
            res = checkFailed("@GLS103508");
        }

        if (inventLocationId)
        {
            if (!InventLocation::checkExist(inventLocationId))
            {
                res = false;
            }
        }
        else
        {
            res = checkFailed(strfmt("@SYS50104", extendedTypeId2pname(extendedtypenum(InventLocationId))));
        }

        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS103509";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        InventStdFormM17_RU runObject = new InventStdFormM17_RU();

        runObject.getLast();

        if (_args && _args.dataset() == tablenum(InventTable))
        {
            if (! runObject.fixItemId(_args.record().(fieldnum(InventTable, ItemId))))
                throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (runObject.prompt())
        {
            runObject.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>