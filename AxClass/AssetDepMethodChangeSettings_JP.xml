<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepMethodChangeSettings_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A class to hold depreciation method change settings
/// </summary>
class AssetDepMethodChangeSettings_JP
{
    AssetType   assetType;

    Map         validChangeToMethods;
    Set         validChanges;
    Set         updateServiceLifeEnabledChanges;
    Set         changeInFirstYearForbiddenChanges;
    Set         alwaysAllowMethodChangeEnabledChanges;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is depreciation method change enabled for the specific depreciation method
    /// </summary>
    /// <param name="_method">
    /// Fixed asset depreciation method
    /// </param>
    /// <returns>
    /// true if enabled
    /// </returns>
    public boolean enabled(AssetDepreciationMethod _method)
    {
        boolean ret;

        ret = validChangeToMethods.exists(_method);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidToMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets valid depreciation methods that the specific depreciation method can be changed to
    /// </summary>
    /// <param name="_method">
    /// Fixed asset depreciation method
    /// </param>
    /// <returns>
    /// Return a <c>container</c> that contains the valid depreciation methods
    /// </returns>
    public container getValidToMethods(AssetDepreciationMethod _method)
    {
        container c = conNull();

        if (validChangeToMethods.exists(_method))
        {
            c = validChangeToMethods.lookup(_method);
        }

        return c;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Do all necessary initialization.
    /// </summary>
    protected void init()
    {
        this.initValidChangeToMethods();
        this.initValidChanges();
        this.initIsChangeInFirstYearAllowed();
        this.initIsUpdateServiceLifeEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsChangeInFirstYearAllowed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes changes in the first year allowed or not.
    /// </summary>
    protected void initIsChangeInFirstYearAllowed()
    {
        changeInFirstYearForbiddenChanges = new Set(Types::Container);

        switch (assetType)
        {
            case AssetType::Tangible:
                changeInFirstYearForbiddenChanges.add([AssetDepreciationMethod::OldStraightLine_JP, AssetDepreciationMethod::OldDecliningBalance_JP]);
            case AssetType::Intangible:
                changeInFirstYearForbiddenChanges.add([AssetDepreciationMethod::NewStraightLine_JP, AssetDepreciationMethod::NewDecliningBalance200_JP]);
                changeInFirstYearForbiddenChanges.add([AssetDepreciationMethod::NewStraightLine_JP, AssetDepreciationMethod::NewDecliningBalance250_JP]);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIsUpdateServiceLifeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes update service life enabled or not.
    /// </summary>
    protected void initIsUpdateServiceLifeEnabled()
    {
        updateServiceLifeEnabledChanges = new Set(Types::Container);

        switch (assetType)
        {
            case AssetType::Tangible:
                updateServiceLifeEnabledChanges.add([AssetDepreciationMethod::OldDecliningBalance_JP, AssetDepreciationMethod::OldStraightLine_JP]);
            case AssetType::Intangible:
                updateServiceLifeEnabledChanges.add([AssetDepreciationMethod::NewDecliningBalance200_JP, AssetDepreciationMethod::NewStraightLine_JP]);
                updateServiceLifeEnabledChanges.add([AssetDepreciationMethod::NewDecliningBalance250_JP, AssetDepreciationMethod::NewStraightLine_JP]);
                updateServiceLifeEnabledChanges.add([AssetDepreciationMethod::NewDecliningBalance250_JP, AssetDepreciationMethod::NewDecliningBalance200_JP]);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValidChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize valid depreciation method change pairs
    /// </summary>
    /// <remarks>
    /// This is generated from valid change to method settings
    /// </remarks>
    protected void initValidChanges()
    {
        int                         i;
        container                   toMethods;
        AssetDepreciationMethod     fromMethod;
        MapEnumerator               mapEnumerator;

        validChanges = new Set(Types::Container);

        mapEnumerator = validChangeToMethods.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            fromMethod = mapEnumerator.currentKey();
            toMethods  = mapEnumerator.currentValue();
            for (i=1; i<=conLen(toMethods); i++)
            {
                validChanges.add([fromMethod, conPeek(toMethods, i)]);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValidChangeToMethods</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize valid depreciation methods which can be changed to
    /// </summary>
    protected void initValidChangeToMethods()
    {
        validChangeToMethods = new Map(Types::Enum, Types::Container);

        switch (assetType)
        {
            // All method changes valid to Intangible assets are also valid to Tangible assets
            case AssetType::Tangible:
                validChangeToMethods.insert(
                    AssetDepreciationMethod::OldDecliningBalance_JP,
                    [AssetDepreciationMethod::OldStraightLine_JP]);
                validChangeToMethods.insert(
                    AssetDepreciationMethod::OldStraightLine_JP,
                    [AssetDepreciationMethod::OldDecliningBalance_JP]);
            case AssetType::Intangible:
                validChangeToMethods.insert(
                    AssetDepreciationMethod::NewStraightLine_JP,
                    [AssetDepreciationMethod::NewDecliningBalance200_JP, AssetDepreciationMethod::NewDecliningBalance250_JP]);
                validChangeToMethods.insert(
                    AssetDepreciationMethod::NewDecliningBalance200_JP,
                    [AssetDepreciationMethod::NewStraightLine_JP]);
                validChangeToMethods.insert(
                    AssetDepreciationMethod::NewDecliningBalance250_JP,
                    [AssetDepreciationMethod::NewStraightLine_JP, AssetDepreciationMethod::NewDecliningBalance200_JP]);
                break;
            default:
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isChangeInFirstYearForbidden</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if depreciation method change in the first year (placed in service date) is
    /// not allowed for the specific depreciation method changed from
    /// </summary>
    /// <param name="_methodChange">
    /// Method change container [fromMethod, toMethod]
    /// </param>
    /// <returns>
    /// ture if forbidden
    /// </returns>
    public boolean isChangeInFirstYearForbidden(container _methodChange)
    {
        boolean ret;

        ret = changeInFirstYearForbiddenChanges.in(_methodChange);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUpdateServiceLifeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if update service life is enabled for the specific depreciation method changed from
    /// </summary>
    /// <param name="_methodChange">
    /// Method change container [fromMethod, toMethod]
    /// </param>
    /// <returns>
    /// ture if allowed
    /// </returns>
    public boolean isUpdateServiceLifeEnabled(container _methodChange)
    {
        boolean ret = false;

        ret = updateServiceLifeEnabledChanges.in(_methodChange);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUseEquallyDividedFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if use equally divided formula is enabled for the deprciation profile change
    /// </summary>
    /// <param name="_methodChange">
    /// Method change container [fromMethod, toMethod]
    /// </param>
    /// <returns>
    /// ture if enabled
    /// </returns>
    public AssetDepUseEquallyDividedFormula_JP isUseEquallyDividedFormulaEnabled(container _methodChange)
    {
        AssetDepUseEquallyDividedFormula_JP ret;

        ret = (_methodChange == [AssetDepreciationMethod::OldDecliningBalance_JP, AssetDepreciationMethod::OldStraightLine_JP]);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isUseEquallyDividedFormulaEnabledMethod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if use equally divided formula is enabled for the deprciation profile change
    /// </summary>
    /// <param name="_method">
    /// Asset depreciation method
    /// </param>
    /// <returns>
    /// ture if enabled
    /// </returns>
    public AssetDepUseEquallyDividedFormula_JP isUseEquallyDividedFormulaEnabledMethod(AssetDepreciationMethod _method)
    {
        AssetDepUseEquallyDividedFormula_JP ret;

        ret = (_method == AssetDepreciationMethod::OldDecliningBalance_JP);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds an instance of <C>AssetDepMethodChangeSettings_JP</C>
    /// </summary>
    /// <param name="_assetType">
    /// Asset type
    /// </param>
    protected void new(AssetType _assetType)
    {
        assetType = _assetType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the depreciation method change is valid or not
    /// </summary>
    /// <param name="_methodChange">
    /// Method change container [fromMethod, toMethod]
    /// </param>
    /// <returns>
    /// true if valid
    /// </returns>
    public boolean validate(container _methodChange)
    {
        boolean     ret;

        ret = validChanges.in(_methodChange);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an instance of <C>AssetDepMethodChangeSettings_JP</C> and initialize it.
    /// </summary>
    /// <param name="_assetType">
    /// Asset type, currently only Tangible and Intangible are available
    /// </param>
    /// <returns>
    /// An instance of <C>AssetDepMethodChangeSettings_JP</C>
    /// </returns>
    public static AssetDepMethodChangeSettings_JP construct(AssetType _assetType)
    {
        AssetDepMethodChangeSettings_JP ret;

        ret = new AssetDepMethodChangeSettings_JP(_assetType);
        ret.init();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>