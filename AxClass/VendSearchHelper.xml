<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendSearchHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendSearchHelper
{
    Map                                sourceMap;
    VendCurrentVendorSearchRequest     currentVendorSearchRequest;
    VendProspectiveVendorSearchRequest prospectiveVendorSearchRequest;
    VendUnsolicitedVendorSearchRequest unsolicitedVendorSearchRequest;
    Object                             callerFormObject;
    boolean                            includeAllLegalEntity;
    boolean                            includeEmployeesThatAreVendors;

    const str ExpressionDelimiter = ';';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addChildDataSouce</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method joins the child table to parent table in a query with specific join mode.
    /// </summary>
    /// <param name="_parentDataSource">
    /// The parent data source to which the child table must be joined.
    /// </param>
    /// <param name="_childTable">
    /// The child table to be joined.
    /// </param>
    /// <param name="_joinMode">
    /// The join mode.
    /// </param>
    /// <returns>
    /// The data source with the child table joined to the parent table.
    /// </returns>
    public QueryBuildDataSource addChildDataSouce(QueryBuildDataSource _parentDataSource, TableId _childTable, JoinMode _joinMode)
    {
        QueryBuildDataSource childDataSource = _parentDataSource.addDataSource(_childTable);
        childDataSource.joinMode(_joinMode);
        childDataSource.relations(true);
        childDataSource.fetchMode(QueryFetchMode::One2One);

        return childDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSearchSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the specified table to a map.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the table that must be added to the map.
    /// </param>
    public void addSearchSource(TableId _tableId)
    {
        switch (_tableId)
        {
            case tableNum(VendTable):
                if (currentVendorSearchRequest == null)
                {
                    currentVendorSearchRequest = new VendCurrentVendorSearchRequest();
                    currentVendorSearchRequest.parmIncludeAllLegalEntities(includeAllLegalEntity);
                    currentVendorSearchRequest.parmIncludeEmployees(includeEmployeesThatAreVendors);
                    sourceMap.insert(_tableId, currentVendorSearchRequest);
                }
                break;

            case tableNum(VendRequest):
                if (prospectiveVendorSearchRequest == null)
                {
                    prospectiveVendorSearchRequest = new VendProspectiveVendorSearchRequest();
                    prospectiveVendorSearchRequest.parmIncludeAllLegalEntities(includeAllLegalEntity);
                    sourceMap.insert(_tableId, prospectiveVendorSearchRequest);
                }
                break;

            case tableNum(VendRequestSignup):
                if (unsolicitedVendorSearchRequest == null)
                {
                    unsolicitedVendorSearchRequest = new VendUnsolicitedVendorSearchRequest();
                    sourceMap.insert(_tableId, unsolicitedVendorSearchRequest);
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSearchExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a search expression.
    /// </summary>
    /// <param name="_form">
    /// An instance of a <c>VendSearchCriteria</c> form.
    /// </param>
    public void buildSearchExpression(FormRun _form)
    {
        TextBuffer        searchExpression;
        VendSearchRequest searchRequest;
        boolean           isCommonBuilt = false;

        // clear all previous values from ranges
        MapEnumerator sourceEnumerator = sourceMap.getEnumerator();
        while (sourceEnumerator.moveNext())
        {
            searchRequest = sourceEnumerator.currentValue();
            searchRequest.clearAllRanges();
        }

        this.getFormParameters(_form);
        searchExpression = new TextBuffer();

        sourceEnumerator = sourceMap.getEnumerator();
        while (sourceEnumerator.moveNext())
        {
            searchRequest = sourceEnumerator.currentValue();
            if (!isCommonBuilt)
            {
                searchExpression.appendText(searchRequest.buildCommonSearchExpression());
                isCommonBuilt = true;
            }
            searchExpression.appendText(searchRequest.buildSearchExpression());
        }
        this.parmSearchString(_form, searchExpression.getText());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the parameters from the specified form.
    /// </summary>
    /// <param name="_form">
    /// An instance of the <c>VendSearchCriteria</c> form.
    /// </param>
    public void getFormParameters(FormRun _form)
    {
        VendSearchRequest searchRequest;

        callerFormObject = _form;

        MapEnumerator sourceMapEnumerator = sourceMap.getEnumerator();
        while (sourceMapEnumerator.moveNext())
        {
            searchRequest = sourceMapEnumerator.currentValue();
            searchRequest.getFormParameters(callerFormObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the search query from all the child classes of the <c>VendSearchRequest</c> class.
    /// </summary>
    /// <param name="_isEmployeesIncluded">
    /// A Boolean value that indicates whether employees are included.
    /// </param>
    /// <returns>
    /// An instance of the <c>Map</c> class.
    /// </returns>

    public Map getQueries(boolean _isEmployeesIncluded)
    {
        VendSearchRequest              searchRequest;
        VendCurrentVendorSearchRequest currentSearchRequest;

        Map queries = new Map(Types::Int64, Types::Class);
        queries.insert(tableNum(VendTable), null);
        queries.insert(tableNum(VendRequest), null);
        queries.insert(tableNum(VendRequestSignup), null);

        MapEnumerator sourceEnumerator = sourceMap.getEnumerator();
        while (sourceEnumerator.moveNext())
        {
            searchRequest = sourceEnumerator.currentValue();
            if (sourceEnumerator.currentKey() == tableNum(VendTable))
            {
                currentSearchRequest = searchRequest as VendCurrentVendorSearchRequest;
                if (currentSearchRequest != null)
                {
                    currentSearchRequest.parmIncludeEmployees(_isEmployeesIncluded);
                }
            }
            queries.insert(sourceEnumerator.currentKey(), searchRequest.buildQuery());
        }

        return queries;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRecordCounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the record count information from the search results.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Map</c> class.
    /// </returns>

    public Map getRecordCounts()
    {
        VendSearchRequest searchRequest;

        Map recordCounts = new Map(Types::Int64, Types::Int64);
        recordCounts.insert(tableNum(VendTable), 0);
        recordCounts.insert(tableNum(VendRequest), 0);
        recordCounts.insert(tableNum(VendRequestSignup), 0);

        MapEnumerator sourceEnumerator = sourceMap.getEnumerator();
        while (sourceEnumerator.moveNext())
        {
            searchRequest = sourceEnumerator.currentValue();
            recordCounts.insert(sourceEnumerator.currentKey(), searchRequest.getResultCount(includeAllLegalEntity));
        }

        return recordCounts;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new()
    {
        sourceMap = new Map(Types::Int64, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeAllLegalEntity</Name>
				<Source><![CDATA[
    public boolean parmIncludeAllLegalEntity(boolean _value = includeAllLegalEntity)
    {
        VendSearchRequest searchRequest;

        MapEnumerator sourceEnumerator = sourceMap.getEnumerator();
        while (sourceEnumerator.moveNext())
        {
            searchRequest = sourceEnumerator.currentValue();
            searchRequest.parmIncludeAllLegalEntities(_value);
        }

        includeAllLegalEntity = _value;

        return includeAllLegalEntity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeEmployees</Name>
				<Source><![CDATA[
    public boolean parmIncludeEmployees(boolean _isEmployeesIncluded = includeEmployeesThatAreVendors)
    {
        VendCurrentVendorSearchRequest currentSearchRequest;

        if (sourceMap.elements())
        {
            if (sourceMap.exists(tableNum(VendTable)))
            {
                currentSearchRequest = sourceMap.lookup(tableNum(VendTable));
            }
            else
            {
                currentSearchRequest = null;
            }

            if (currentSearchRequest != null)
            {
                currentSearchRequest.parmIncludeEmployees(_isEmployeesIncluded);
            }
        }
        includeEmployeesThatAreVendors = _isEmployeesIncluded;

        return includeEmployeesThatAreVendors;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSearchString</Name>
				<Source><![CDATA[
    public str parmSearchString(FormRun _form, str _searchString = strMin())
    {
        callerFormObject = _form;
        callerFormObject.parmSearchExpression(_searchString);

        return callerFormObject.parmSearchExpression();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseSearchExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the specified search expression.
    /// </summary>
    /// <param name="_searchExpression">
    /// A string variable that contains the search expression.
    /// </param>
    /// <param name="_form">
    /// An instance of <c>VendSearchCriteria</c> form.
    /// </param>
    public void parseSearchExpression(str _searchExpression, FormRun _form)
    {
        VendSearchRequest searchRequest;
        str               strAttributeValuePair = strMin();
        int               positionStart         = 1;
        int               positionNext          = 0;
        int               positionMax           = 0;

        // clear all previous values from ranges
        MapEnumerator sourceMapEnumerator = sourceMap.getEnumerator();
        while (sourceMapEnumerator.moveNext())
        {
            searchRequest = sourceMapEnumerator.currentValue();
            searchRequest.clearAllRanges();
        }

        positionMax = strLen(_searchExpression);
        while (positionStart > 0 && positionStart < positionMax)
        {
            positionNext = strFind(_searchExpression, ExpressionDelimiter, positionStart, positionMax - positionStart + 1);
            positionNext = positionNext <= 0 ? positionMax + 1 : positionNext;

            sourceMapEnumerator = sourceMap.getEnumerator();
            while (sourceMapEnumerator.moveNext())
            {
                searchRequest = sourceMapEnumerator.currentValue();
                strAttributeValuePair = subStr(_searchExpression, positionStart, positionNext - positionStart);
                searchRequest.parse(strAttributeValuePair);
            }
            positionStart = positionNext + 1;
        }
        this.setFormParameters(_form);
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeSearchSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the specified table instance.
    /// </summary>
    /// <param name="_tableId">
    /// The table ID of the table that must be removed from the memory.
    /// </param>
    public void removeSearchSource(TableId _tableId)
    {
        switch (_tableId)
        {
            case tableNum(VendTable):
                currentVendorSearchRequest = null;
                break;

            case tableNum(VendRequest):
                prospectiveVendorSearchRequest = null;
                break;

            case tableNum(VendRequestSignup):
                unsolicitedVendorSearchRequest = null;
                break;
        }

        sourceMap.remove(_tableId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets all the parameters of the specified form.
    /// </summary>
    /// <param name="_form">
    /// An instance of <c>VendSearchCriteria</c> form.
    /// </param>
    /// <remarks>
    /// This method in turn calls the <c>setFormParameters</c> method for every data source, to set control
    /// values of form with the attribute values from the class. Currently it will set multiple times if
    /// multiple data sources are selected as this is the way it has been documented in the design.
    /// </remarks>
    public void setFormParameters(FormRun _form)
    {
        VendSearchRequest searchRequest;
        MapEnumerator     sourceMapEnumerator;
        boolean           isCommonBuilt = false;

        callerFormObject = _form;

        sourceMapEnumerator = sourceMap.getEnumerator();
        while (sourceMapEnumerator.moveNext())
        {
            searchRequest = sourceMapEnumerator.currentValue();
            if (!isCommonBuilt)
            {
                searchRequest.setCommonFormParameters(callerFormObject);
                isCommonBuilt = true;
            }
            searchRequest.setFormParameters(callerFormObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNewRequestClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new vendor request.
    /// </summary>
    /// <param name="_vendRequestSignup">
    /// An unsolicited vendor profile record.
    /// </param>
    public static void createNewRequestClicked(VendRequestSignup _vendRequestSignup)
    {
        VendRequestCompany::createFromUnsolicited(_vendRequestSignup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates Vendor from a vendor request generated for an unsolicited vendor profile.
    /// </summary>
    /// <param name="_requestRecId">
    /// Reference to vendor request <c>VendRequestCompany</c> .
    /// </param>
    /// <param name="_vendGroup">
    /// Vendor group specified for a new vendor.
    /// </param>
    /// <param name="_currency">
    /// Vendor currency specified for a new vendor.
    /// </param>
    public static void createVendor(RefRecId _requestRecId, VendGroupId _vendGroup, VendCurrencyCode _currency)
    {
        VendRequestCompany            vendRequestCompany;
        VendRequestProspectiveProfile vendRequestProspectiveProfile;

        ttsbegin;
        vendRequestCompany = VendRequestCompany::findRecId(_requestRecId, true);
        if (vendRequestCompany.RecId != 0)
        {
            vendRequestCompany.VendRequestCompanyType   = VendRequestCompanyType::NewVendorCompanyProfile;
            vendRequestCompany.VendRequestCompanyStatus = VendRequestCompanyStatus::VendorApproved;
            vendRequestCompany.VendRequestWorkflowState = VendRequestWorkflowState::Approved;
            vendRequestCompany.update();

            vendRequestProspectiveProfile           = VendRequestProspectiveProfile::find(vendRequestCompany.ProspectiveProfile, true);
            vendRequestProspectiveProfile.VendGroup = _vendGroup;
            vendRequestProspectiveProfile.Currency  = _currency;
            vendRequestProspectiveProfile.update();
        }
        ttscommit;

        // create vendor and add categories from prospective profile
        VendRequestCompanyWorkflowManager::convertProspectToVendor(vendRequestCompany);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createContactClicked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new contact for existing vendor.
    /// </summary>
    /// <param name="_vendRequestSignup">
    /// An unsolicited vendor profile record.
    /// </param>
    public static void createContactClicked(VendRequestSignup _vendRequestSignup)
    {
        ContactPerson contactPerson;
        VendTable vendTable;
        SysInfoAction_FormRun infoAction = SysInfoAction_FormRun::newFormName(formStr(smmContactPerson));

        contactPerson = VendRequestCompany::createContactForExistingVendor(_vendRequestSignup);

        changeCompany(CompanyInfo::findRecId(_vendRequestSignup.CompanyInfo).DataArea)
        {
            vendTable = VendTable::findRecId(_vendRequestSignup.VendTable);
        }

        _vendRequestSignup.ContactPerson = contactPerson.RecId;

        infoAction.parmDescription("@SYS105530");
        infoAction.parmCallerBuffer(contactPerson);
        info(strFmt("@SYP4950031",_vendRequestSignup.ContactName, vendTable.nameAlias()), '', infoAction);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>