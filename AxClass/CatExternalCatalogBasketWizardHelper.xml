<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatExternalCatalogBasketWizardHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
      
/// <summary>
/// This class performs common functionalities for the basket wizard and associated form parts.
/// </summary>
public final class CatExternalCatalogBasketWizardHelper
{
    private TmpVendLookup  tmpVendLookup = null;
    private Set            categorySet;

          
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
            public static CatExternalCatalogBasketWizardHelper construct(TmpVendLookup _tmpVendLookup)
    {
        CatExternalCatalogBasketWizardHelper basketWizardHelper = new CatExternalCatalogBasketWizardHelper();
        basketWizardHelper.parmTmpVendLookup(_tmpVendLookup);      
        return basketWizardHelper;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTmpVendLookup</Name>
				<Source><![CDATA[
    public TmpVendLookup parmTmpVendLookup(TmpVendLookup _tmpVendLookup = tmpVendLookup)
    {
        tmpVendLookup = _tmpVendLookup;
        return tmpVendLookup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCategoryValid</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the procurement category is allowed.
    /// </summary>
    /// <param name = "_ecoResCategoryRecId">The <c>EcoResCategoryId</c> of the <c>EcoResCategory</c> to be checked.</param>
    /// <returns>True if the category is allowed; otherwise, false.</returns>
    public boolean isCategoryValid(EcoResCategoryId _ecoResCategoryRecId)
    {
        return categorySet.in(_ecoResCategoryRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupCategorySet</Name>
				<Source><![CDATA[
    private void setupCategorySet()
    {
        categorySet = new Set(Types::Int64);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTmpVendLookupTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the <c>TmpVendLookup</c> temporaty table with the cross company vendors.
    /// </summary>
    /// <param name = "_catPunchOutRequest">The punchout request intance to use for data population information.</param>
    public void populateTmpVendLookupTable(CatPunchoutRequest _catPunchOutRequest)
    {
        CompanyInfo buyingLegalEntity   = CompanyInfo::findDataArea(_catPunchOutRequest.BuyingLegalEntity);
        RefRecId receivingOperatingUnit = _catPunchOutRequest.ReceivingOperatingUnit;
            
        if (buyingLegalEntity)
        {
            ttsbegin;            

            delete_from tmpVendLookup;
            EcoResCategoryHierarchy ecoResCategoryHierarchy = EcoResCategoryHierarchy::find(EcoResCategoryHierarchyRole::getHierarchiesByRole
                                                                                                (EcoResCategoryNamedHierarchyRole::Procurement)
                                                                                                .CategoryHierarchy);

            ProcCategoryTmpPolicyRule procCategoryTmpPolicyRule;
            procCategoryTmpPolicyRule.setTmpData(EcoResCategory::getProcCategoryRules(SysPolicyRuleTypeEnum::CategoryAccessPolicyRule,
                                                                                    buyingLegalEntity.RecId,
                                                                                    receivingOperatingUnit));

            ProcCategoryTmpPolicyRule tmpCategoryPolicyRule = EcoResCategory::getProcCategoryRules(SysPolicyRuleTypeEnum::CategoryPolicyRule,
                                                                        buyingLegalEntity.RecId,
                                                                        receivingOperatingUnit,
                                                                        receivingOperatingUnit ? ProcCategoryOrganizationOption::BuyingLegalEntityAndCombination : ProcCategoryOrganizationOption::BuyingLegalEntity);

            select firstonly RecId from procCategoryTmpPolicyRule;

            if (procCategoryTmpPolicyRule.RecId)
            {
                this.initCategoryBasedOnPolicy(_catPunchOutRequest, procCategoryTmpPolicyRule, ecoResCategoryHierarchy, buyingLegalEntity, tmpCategoryPolicyRule);
            }
            else
            {
                this.initCategoryNotBasedOnPolicy(_catPunchOutRequest, ecoResCategoryHierarchy, buyingLegalEntity, tmpCategoryPolicyRule);
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCategoryBasedOnPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes categories to be inserted into the <c>TmpVendTable</c>, given there are procurement categories applied to the buying legal entity or receiving operating unit.
    /// </summary>
    /// <param name = "_catPunchOutRequest">The <c>CatPunchoutRequest</c> record containing the vendor information.</param>
    /// <param name = "_procCategoryTmpPolicyRule">The <c>ProcCategoryTmpPolicyRule</c> associated with the buying legal entity/receiving operating unit.</param>
    /// <param name = "_ecoResCategoryHierarchy">The <c>EcoResHierarchy</c> associated with the category.</param>
    /// <param name = "_buyingLegalEntity">The <c>CompanyInfo</c> buffer of the buying legal entity associated with the category.</param>
    /// <param name = "_tmpCategoryPolicyRule">The <c>ProcCategoryTmpPolicyRule</c> associated with the buying legal entity/receiving operating unit.</param>
    private void initCategoryBasedOnPolicy(CatPunchoutRequest _catPunchOutRequest,
                                           ProcCategoryTmpPolicyRule _procCategoryTmpPolicyRule, 
                                           EcoResCategoryHierarchy _ecoResCategoryHierarchy,
                                           CompanyInfo _buyingLegalEntity,
                                           ProcCategoryTmpPolicyRule _tmpCategoryPolicyRule)
    {
        EcoResCategory                              ecoResCategory;
        CatExternalCatalogProcurementCategories     catExternalCatalogCategories;
        ProcCategoryAccessPolicyParameter           procCategoryAccessPolicyParameter;
        CatExternalCatalogVendor                    catExternalCatalogVendor;
            
        this.setupCategorySet();

        while select _procCategoryTmpPolicyRule
                join TableId From procCategoryAccessPolicyParameter
                    where _procCategoryTmpPolicyRule.PolicyRule == procCategoryAccessPolicyParameter.ProcurementCategoryAccessPolicyRule
                join VendorAccountNumber, VendorDataAreaId from catExternalCatalogVendor
                    where catExternalCatalogVendor.ExternalCatalog == _catPunchOutRequest.ExternalCatalog
                        && catExternalCatalogVendor.VendorDataAreaId == _catPunchOutRequest.BuyingLegalEntity
                join Name, RecId from ecoResCategory
                    where ecoResCategory.RecId == procCategoryAccessPolicyParameter.ProcurementCategory
                        && ecoResCategory.CategoryHierarchy == _ecoResCategoryHierarchy.RecId        
                join Category from catExternalCatalogCategories
                    where catExternalCatalogCategories.Category == ecoResCategory.RecId
                        && catExternalCatalogCategories.ExternalCatalog == _catPunchOutRequest.ExternalCatalog
        {
            
            if (!categorySet.in(ecoResCategory.RecId) && this.isVendorAllowedForSelectedCategory(catExternalCatalogVendor.VendorAccountNumber, ecoResCategory.RecId, _buyingLegalEntity, _tmpCategoryPolicyRule))
            {
                this.insertIntoTempTable(catExternalCatalogCategories.Category, ecoResCategory.Name, _ecoResCategoryHierarchy.Name);
                categorySet.add(catExternalCatalogCategories.Category);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCategoryNotBasedOnPolicy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes categories to be inserted into the <c>TmpVendTable</c>, given there are no procurement categories applied to the buying legal entity or receiving operating unit.
    /// </summary>
    /// <param name = "_catPunchOutRequest">The <c>CatPunchoutRequest</c> record containing the vendor information.</param>
    /// <param name = "_ecoResCategoryHierarchy">The <c>EcoResHierarchy</c> associated with the category.</param>
    /// <param name = "_buyingLegalEntity">The <c>CompanyInfo</c> buffer of the buying legal entity associated with the category.</param>
    /// <param name = "_tmpCategoryPolicyRule">The <c>ProcCategoryTmpPolicyRule</c> associated with the buying legal entity/receiving operating unit.</param>
    private void initCategoryNotBasedOnPolicy(CatPunchoutRequest _catPunchOutRequest,
                                              EcoResCategoryHierarchy _ecoResCategoryHierarchy,
                                              CompanyInfo _buyingLegalEntity,
                                              ProcCategoryTmpPolicyRule _tmpCategoryPolicyRule)
    {
        EcoResCategory                          ecoResCategory;
        CatExternalCatalogProcurementCategories catExternalCatalogCategories;
        CatExternalCatalogVendor                catExternalCatalogVendor;

        this.setupCategorySet();

        while select Name, RecId from ecoResCategory
                    where ecoResCategory.CategoryHierarchy == _ecoResCategoryHierarchy.RecId            
                join VendorAccountNumber, VendorDataAreaId from catExternalCatalogVendor
                    where catExternalCatalogVendor.ExternalCatalog == _catPunchOutRequest.ExternalCatalog
                        && catExternalCatalogVendor.VendorDataAreaId == _catPunchOutRequest.BuyingLegalEntity
                join Category from catExternalCatalogCategories
                    where catExternalCatalogCategories.ExternalCatalog == _catPunchOutRequest.ExternalCatalog
                        && ecoResCategory.RecId == catExternalCatalogCategories.Category
        {
            if (!categorySet.in(ecoResCategory.RecId) && this.isVendorAllowedForSelectedCategory(catExternalCatalogVendor.VendorAccountNumber, ecoResCategory.RecId, _buyingLegalEntity, _tmpCategoryPolicyRule))
            {
                this.insertIntoTempTable(catExternalCatalogCategories.Category, ecoResCategory.Name, _ecoResCategoryHierarchy.Name);
                categorySet.add(catExternalCatalogCategories.Category);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendorAllowedForSelectedCategory</Name>
				<Source><![CDATA[
    private boolean isVendorAllowedForSelectedCategory(VendAccount _vendAccount,
                                                       EcoResCategoryId _ecoResCategoryId,
                                                       CompanyInfo _buyingLegalEntity,
                                                       ProcCategoryTmpPolicyRule _tmpCategoryPolicyRule)
                                                                    
    {
        ProcCategoryVendorSelection procCategoryVendorSelection = CatPunchoutRequestAddToPurchRequisition::getVendorSelectionForCategory(_ecoResCategoryId,_tmpCategoryPolicyRule);

        boolean ret = true;

        changecompany(_buyingLegalEntity.DataArea)
        {
            ret = PurchReqVendorPolicyValidation::validateCategoryPolicyForVendor(procCategoryVendorSelection,
                                                                                 _vendAccount,
                                                                                 _ecoResCategoryId,
                                                                                 DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                                                                 _buyingLegalEntity.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a category with its corresponding category hierarchy into the <c>TmpVendTable</c>.
    /// </summary>
    /// <param name = "_categoryRecId">The <c>RefRecId</c> of the category to be inserted.</param>
    /// <param name = "_categoryName">The <c>EcoResCategoryName</c> of the category to be inserted</param>
    /// <param name = "_categoryHierarchyName">The <c>EcoResCategoryHierarchyName</c> of the category hierarchy to be inserted</param>
    private void insertIntoTempTable(RefRecId _categoryRecId, 
                                     EcoResCategoryName _categoryName, 
                                     EcoResCategoryHierarchyName _categoryHierarchyName)
    {
        tmpVendLookup.clear();
        tmpVendLookup.Category = int642str(_categoryRecId);
        tmpVendLookup.Name = _categoryName;
        tmpVendLookup.CategoryHierarchyName = _categoryHierarchyName;
        tmpVendLookup.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupCategories</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls the <c>CatExternalAvailableCategoriesLookup</c> form for the specific vendor given a punchout request.
    /// </summary>
    /// <param name = "_catPunchOutRequest">The <c>CatPunchoutRequest</c> record containing the vendor information.</param>
    /// <param name = "_formReferenceControl">The <c>FormReferenceControl</c> whose value will be set.</param>
    /// <returns>A <c>Common</c> record containing the <c>EcoResCategory</c> that was selected.</returns>
    public static EcoResCategory lookupCategories(CatPunchoutRequest _catPunchOutRequest, FormReferenceControl _formReferenceControl)
    {
        Args args = new Args();
        args.name(formstr(CatExternalAvailableCategoriesLookup));
        args.caller(_formReferenceControl);

        FormRun formRun = classfactory.formRunClass(args);
        formRun.setCatPunchoutRequest(_catPunchOutRequest);
        formRun.init();
       
        _formReferenceControl.performFormLookup(formRun);
        return formRun.selectRecordModeSelectedRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWarningIfLinesContainIncorrectInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Show warning if any of the <c>CartLine</c> contains incorrect information.
    /// </summary>
    public static void showWarningIfLinesContainIncorrectInformation()
    {
        CatCartLineState cartLineState;
        CatCartLine cartLine;
        CatPunchoutRequest punchoutRequest;

        PurchReqPreparerRefRecId originator = HcmWorkerLookup::currentWorker();
        
        select firstonly punchoutRequest
            where punchoutRequest.Originator == originator
                  && punchoutRequest.RequestStatus == CatPunchoutRequestStatus::BasketConsumed
            join cartLine
                where cartLine.PunchoutRequest == punchoutRequest.RecId
            exists join cartLineState
                where cartLineState.CartLine == cartLine.RecId
                    && cartLineState.IsValidProduct == NoYes::No;

        if (punchoutRequest.RecId)
        {
            warning("@SCM:CartLinesWarning");
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>