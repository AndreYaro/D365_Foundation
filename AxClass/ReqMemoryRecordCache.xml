<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqMemoryRecordCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal abstract class ReqMemoryRecordCache
{
    private ReqMemoryCacheCrossSessionScope scope;
    private ReqMemoryCacheItemPolicy policy;
    private const str PrimaryKeyPrefix = 'PK:';
    private const str AlternateKeyPrefix = 'AK:';
    private Set uncommittedPrimaryKeys = new Set(Types::String);
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        scope = ReqMemoryCacheCrossSessionScope::newDataAreaScope(classId2Name(classIdGet(this)));
        policy = new ReqMemoryCacheItemPolicy();
        policy.parmSlidingExpirationHours(this.slidingExpirationHours());
    }

]]></Source>
			</Method>
			<Method>
				<Name>primaryKeyValueForRecord</Name>
				<Source><![CDATA[
    abstract protected str primaryKeyValueForRecord(Common _record)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>alternateKeyValuesForRecord</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Set alternateKeyValuesForRecord(Common _record)
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>slidingExpirationHours</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected real slidingExpirationHours()
    {
        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRecordByPrimaryKey</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected common lookupRecordByPrimaryKey(str _primaryKeyValue)
    {
        if (_primaryKeyValue)
        {
            container cachedValue = ReqMemoryCache::getFromCrossSessionScope(strLwr(PrimaryKeyPrefix+_primaryKeyValue), scope, conNull());

            if (cachedValue)
            {
                return con2Buf(cachedValue);
            }
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupRecordByAlternateKey</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected common lookupRecordByAlternateKey(str _alternateKeyValue)
    {
        if (_alternateKeyValue)
        {
            str primaryKeyValue = ReqMemoryCache::getFromCrossSessionScope(strLwr(AlternateKeyPrefix+_alternateKeyValue), scope, '');
            return this.lookupRecordByPrimaryKey(primaryKeyValue);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRecord</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void addRecord(Common _record)
    {
        if (_record &&
            _record.RecId)
        {
            str primaryKeyValue = this.primaryKeyValueForRecord(_record);
            if (primaryKeyValue &&
                !uncommittedPrimaryKeys.in(primaryKeyValue))
            {
                ReqMemoryCache::addToCrossSessionScope(strLwr(PrimaryKeyPrefix+primaryKeyValue), buf2Con(_record), scope, policy);
            
                Set alternateKeyValuesForRecord = this.alternateKeyValuesForRecord(_record);
                if (alternateKeyValuesForRecord)
                {
                    var enum = alternateKeyValuesForRecord.getEnumerator();
                    while (enum.moveNext())
                    {
                        str alternateKeyValue =  enum.current();

                        if (alternateKeyValue)
                        {
                            ReqMemoryCache::addToCrossSessionScope(strLwr(AlternateKeyPrefix+alternateKeyValue), primaryKeyValue, scope, policy);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeRecord</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void removeRecord(Common _record)
    {
        str primaryKeyValue = this.primaryKeyValueForRecord(_record);
        if (primaryKeyValue)
        {
            ReqMemoryCache::removeFromCrossSessionScope(strLwr(PrimaryKeyPrefix+primaryKeyValue), scope);
            
            Set alternateKeyValuesForRecord = this.alternateKeyValuesForRecord(_record);
            if (alternateKeyValuesForRecord)
            {
                var enum = alternateKeyValuesForRecord.getEnumerator();
                while (enum.moveNext())
                {
                    str alternateKeyValue =  enum.current();

                    if (alternateKeyValue)
                    {
                        ReqMemoryCache::removeFromCrossSessionScope(strLwr(AlternateKeyPrefix+alternateKeyValue), scope);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createEmptyAlternateKeyValues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected Set createEmptyAlternateKeyValues()
    {
        return new Set(Types::String);
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerUncommittedRecordChange</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void registerUncommittedRecordChange(Common _record)
    {
        // To avoid leaking uncommitted data, track records inserted or updated in the current session
        str primaryKeyValue = this.primaryKeyValueForRecord(_record);
        if (primaryKeyValue)
        {
            uncommittedPrimaryKeys.add(primaryKeyValue);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>