<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAdvRuleExecutor_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The asset advanced rule executor
/// </summary>
abstract public class AssetAdvRuleExecutor_JP
{
    AssetAdvRuleType_JP     assetAdvRuleType;
    AssetAdvRuleContext_JP  assetAdvRuleContext;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>doRuleAction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Doese rule action
    /// </summary>
    /// <returns>
    /// Returns true if did successfully, otherwise false
    /// </returns>
    abstract public boolean doRuleAction()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>executeRule</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the rule.
    /// </summary>
    /// <returns>
    /// Returns true if executes successfully otherwise false
    /// </returns>
    public boolean executeRule()
    {
        boolean     ret = true;

        ret = this.isRuleMatched();
        if (ret)
        {
            ret = this.doRuleAction();
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>getLogger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the logger instance.
    /// </summary>
    /// <returns>
    /// Returns the logger instance
    /// </returns>
    protected AssetAdvRuleLogger_JP getLogger()
    {
        AssetAdvRuleLogger_JP   ret;

        ret = assetAdvRuleContext.getLogger();

        if (ret)
        {
            ret.setAssetAdvancedRule(assetAdvRuleType.rule());
        }

        return ret;
    }
]]></Source>
			</Method>
			<Method>
				<Name>initForConstruct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes for construct
    /// </summary>
    /// <param name="_assetAdvRuleType">
    /// The <C>AssetAdvRuleType_JP</C>
    /// </param>
    /// <param name="_assetAdvRuleContext">
    /// The context instance
    /// </param>
    protected void initForConstruct(AssetAdvRuleType_JP _assetAdvRuleType, AssetAdvRuleContext_JP _assetAdvRuleContext)
    {
        assetAdvRuleType    = _assetAdvRuleType;
        assetAdvRuleContext = _assetAdvRuleContext;
    }
]]></Source>
			</Method>
			<Method>
				<Name>isRuleMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the rule matches
    /// </summary>
    /// <returns>
    /// Returns true if matches, otherwise false
    /// </returns>
    abstract public boolean isRuleMatched()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }
]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <C>AssetAdvRuleExecutor_JP</C>.
    /// </summary>
    /// <param name="_assetAdvRuleType">
    /// The advanced rule type
    /// </param>
    /// <param name="_assetAdvRuleContext">
    /// The context instance
    /// </param>
    /// <returns>
    /// Returns the initialized instance
    /// </returns>
    public static AssetAdvRuleExecutor_JP construct(AssetAdvRuleType_JP _assetAdvRuleType, AssetAdvRuleContext_JP _assetAdvRuleContext)
    {
        AssetAdvRuleExecutor_JP     assetAdvRuleExecutor;

        if (_assetAdvRuleType)
        {
            assetAdvRuleExecutor = SysExtensionAppClassFactory::getClassFromSysAttribute(
                classStr(AssetAdvRuleExecutor_JP),
                new AssetAdvancedRuleTypeAttribute_JP(
                    _assetAdvRuleType.rule().TypeEnumName,
                    _assetAdvRuleType.rule().TypeEnumValue));
        }

        if (assetAdvRuleExecutor)
        {
            assetAdvRuleExecutor.initForConstruct(_assetAdvRuleType, _assetAdvRuleContext);
        }

        return assetAdvRuleExecutor;
    }
]]></Source>
			</Method>
			<Method>
				<Name>executeRuleSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the rule set
    /// </summary>
    /// <param name="_context">
    /// The context instance
    /// </param>
    /// <param name="_ruleGroupType">
    /// The advanced rule group type
    /// </param>
    /// <param name="_ruleGroupSourceTableId">
    /// The table id group source table
    /// </param>
    /// <param name="_ruleGroupSourceRecId">
    /// The rec id of group souce table
    /// </param>
    public static void executeRuleSet(
        AssetAdvRuleContext_JP          _context,
        AssetAdvancedRuleGroupType_JP   _ruleGroupType,
        RefTableId                      _ruleGroupSourceTableId = 0,
        RefRecId                        _ruleGroupSourceRecId   = 0)
    {
        AssetAdvancedRuleGroup_JP       assetAdvancedRuleGroup;
        AssetAdvancedRule_JP            assetAdvancedRule;
        AssetAdvRuleExecutor_JP         assetAdvRuleExecutor;

        if (_context)
        {
            while select assetAdvancedRule
                where assetAdvancedRule.Enabled == NoYes::Yes
                exists join assetAdvancedRuleGroup
                    where assetAdvancedRuleGroup.RecId          == assetAdvancedRule.AssetAdvancedRuleGroup_JP
                        && assetAdvancedRuleGroup.Type          == _ruleGroupType
                        && assetAdvancedRuleGroup.SourceRecId   == _ruleGroupSourceRecId
                        && assetAdvancedRuleGroup.SourceTableId == _ruleGroupSourceTableId
            {
                assetAdvRuleExecutor = AssetAdvRuleExecutor_JP::construct(assetAdvancedRule.type(), _context);
                assetAdvRuleExecutor.executeRule();
            }
        }
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>