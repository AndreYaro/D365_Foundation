<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSUpdateSourceInventoryTransactionsForRMPickBasedOnInventTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSUpdateSourceInventoryTransactionsForRMPickBasedOnInventTrans</c> class performs an update of the production order picking
/// transactions based on the executed warehouse production picking work.
/// The class assumes that the warehouse production picking work is executed using the InventTrans transactions.
/// </summary>
internal final class WHSUpdateSourceInventoryTransactionsForRMPickBasedOnInventTrans extends WHSUpdateSourceInventoryTransactionsForRawMaterialPicking
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>updateSourceInventoryTransactionsForRawMaterialPick</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the production raw material picking inventory transactions based on raw material policy.
    /// </summary>
    protected void updateSourceInventoryTransactionsForRawMaterialPick()
    {
        WHSWorkInventTrans workInventTrans;

        InventTrans         inventTrans;
        InventTransOrigin   inventTransOrigin;
        InventTransOrigin   reservedInventTransOrigin;
        InventDim           inventDim;
        ItemId              prevItemId;
        InventDimParm       inventDimParmAboveLocation;

        ttsbegin;

        WHSRawMaterialPolicy warehouseRawMaterialPolicy = InventLocation::find(workTable.InventLocationId).WHSRawMaterialPolicy;

        while select workInventTrans
            order by ItemId
            where workInventTrans.WorkId   == workTable.WorkId
               && workInventTrans.LineNum  == putWorkLine.LineNum
            join RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == workInventTrans.InventTransIdTo            
            join InventDimId, Qty, PdsCWQty from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                  &&  inventTrans.StatusReceipt     == StatusReceipt::Purchased
                  &&  inventTrans.StatusIssue       == StatusIssue::None
            join inventDim
                where inventDim.inventDimId   == inventTrans.inventDimId
            outer join RecId from reservedInventTransOrigin
                where reservedInventTransOrigin.InventTransId == workInventTrans.InventTransIdParent
        {            
            WHSRawMaterialPolicy rawMaterialPolicyPerItem = this.determineRawMaterialPolicyForItem(workInventTrans.ItemId, warehouseRawMaterialPolicy);

            switch (rawMaterialPolicyPerItem)
            {
                case WHSRawMaterialPolicy::Reserve:
                    if (reservedInventTransOrigin.RecId)
                    {
                        this.reserveAtProductionInputLocation(WHSWorkPutLineSourceInventoryRawMaterialPickingParameters::constructFromParameters(
                            inventDim,
                            workInventTrans,
                            inventTrans,
                            reservedInventTransOrigin));
                    }
                    break;               

                case WHSRawMaterialPolicy::Pick:
                    if (prevItemId != workInventTrans.ItemId)
                    {
                        inventDimParmAboveLocation = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(workInventTrans.ItemId));
                    }
                    
                    using (WHSDeprTransactionsForRMPickBasedOnInventTransContext context = WHSDeprTransactionsForRMPickBasedOnInventTransContext::construct())
                    {
                        context.parmSelectMarkedTransFirst(true);
                        WHSWorkPutLineSourceInventoryPickingFactory::newPickingFromPutWorkLine(putWorkLine).pickWorkInventTrans(workInventTrans, inventTrans, inventDimParmAboveLocation);
                    }
                    
                    break;                                                     
            }
            prevItemId = workInventTrans.ItemId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveProdInventoryOnLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reserves inventory at production input location.
    /// </summary>
    /// <param name="_workLineNum">
    /// The work line number.
    /// </param>
    protected void reserveProdInventoryOnLocation(LineNum _workLineNum)
    {
        WHSWorkInventTrans workInventTrans;

        InventTrans inventTrans;
        InventTransOrigin inventTransOrigin;
        InventTransOrigin reservedInventTransOrigin;
        InventDim inventDim;

        ttsbegin;

        while select workInventTrans
            order by ItemId
            where workInventTrans.WorkId   == workTable.WorkId
              &&  workInventTrans.LineNum  == _workLineNum
            join RecId from inventTransOrigin
                where inventTransOrigin.InventTransId == workInventTrans.InventTransIdTo
            join RecId from reservedInventTransOrigin
                where reservedInventTransOrigin.InventTransId == workInventTrans.InventTransIdParent
            join InventDimId, Qty, PdsCWQty from inventTrans
                where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                  &&  inventTrans.StatusReceipt     == StatusReceipt::Purchased
                  &&  inventTrans.StatusIssue       == StatusIssue::None
            join inventDim
                where inventDim.inventDimId   == inventTrans.inventDimId
        {
            this.reserveAtProductionInputLocation(WHSWorkPutLineSourceInventoryRawMaterialPickingParameters::constructFromParameters(
                inventDim,
                workInventTrans,
                inventTrans,
                reservedInventTransOrigin));
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>