<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventPriceOverviewDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The InventPriceOverviewDP class is the report data provider class for the invent price overview
///    report.
/// </summary>
/// <remarks>
///    This is the report data provider class for the invent price overview SRS report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(InventPriceOverview)),
    SRSReportParameterAttribute(classStr(InventPriceOverviewContract))
]
public class InventPriceOverviewDP extends SrsReportDataProviderPreProcessTempDB
{
    InventPriceOverviewTmp  inventPriceOverviewTmp;

    FromDate                asPerDate;
    InventItemCostingType   costingType;
    CostingVersionId        costingVersionId;
    InventSiteId            inventSiteId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addActiveFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds filters to the main data source in order to select only the active prices.
    /// </summary>
    /// <param name="_dsInventItemPrices">
    ///    The main data source of the report.
    /// </param>
    /// <returns>
    ///    The data source that contains the filter, already linked to the main data source.
    /// </returns>
    private QueryBuildDataSource addActiveFilter(QueryBuildDataSource _dsInventItemPrices)
    {
        QueryBuildDataSource dsActivePriceFilter = _dsInventItemPrices.addDataSource(tableNum(InventItemPrice));
        dsActivePriceFilter.joinMode(JoinMode::InnerJoin);
        dsActivePriceFilter.fetchMode(QueryFetchMode::One2One);
        dsActivePriceFilter.addLink(fieldNum(InventItemPrices, ItemId),         fieldNum(InventItemPrice, ItemId));
        dsActivePriceFilter.addLink(fieldNum(InventItemPrices, InventDimId),    fieldNum(InventItemPrice, InventDimId));
        dsActivePriceFilter.addLink(fieldNum(InventItemPrices, PriceType),      fieldNum(InventItemPrice, PriceType));
        dsActivePriceFilter.addLink(fieldNum(InventItemPrices, ActivationDate), fieldNum(InventItemPrice, ActivationDate));
        dsActivePriceFilter.addLink(fieldNum(InventItemPrices, VersionId),      fieldNum(InventItemPrice, VersionId));

        if (costingType != InventItemCostingType::Default)
        {
            QueryBuildRange qbRange = dsActivePriceFilter.addRange(fieldNum(InventItemPrice,CostingType));
            qbRange.value(queryValue(costingType));
        }

        return dsActivePriceFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addFallbackFilter</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a fallback filter to the main data source of the report.
    /// </summary>
    /// <param name="_dsInventItemPrices">
    ///    The main data source of the report.
    /// </param>
    /// <returns>
    ///    The data source that contains the filter, already linked to the main data source.
    /// </returns>
    /// <remarks>
    ///    Changes the main data source so that it will search for the fallback version information and
    ///    filters those results.
    /// </remarks>
    private QueryBuildDataSource addFallbackFilter(QueryBuildDataSource _dsInventItemPrices)
    {
        CostingVersionId fallbackCostingVersionId = CostingVersion::find(costingVersionId).bomFallBackVersion;
        QueryBuildRange qbRange = _dsInventItemPrices.addRange(fieldNum(InventItemPrices,VersionId));
        qbRange.value(queryValue(fallbackCostingVersionId));

        QueryBuildDataSource dsFallbackFilter = _dsInventItemPrices.addDataSource(tableNum(InventItemPrices));
        dsFallbackFilter.joinMode(JoinMode::NoExistsJoin);
        dsFallbackFilter.fetchMode(QueryFetchMode::One2One);
        dsFallbackFilter.addLink(fieldNum(InventItemPrices, ItemId),        fieldNum(InventItemPrices,ItemId));
        dsFallbackFilter.addLink(fieldNum(InventItemPrices, InventDimId),   fieldNum(InventItemPrices, InventDimId));
        dsFallbackFilter.addLink(fieldNum(InventItemPrices, PriceType),     fieldNum(InventItemPrices, PriceType));

        qbRange                 = dsFallbackFilter.addRange(fieldNum(InventItemPrices, VersionId));
        qbRange.value(queryValue(costingVersionId));

        return dsFallbackFilter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchActiveNoAsPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retreives the data for active prices without a date specified.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object that holds the query.
    /// </param>
    /// <param name="_dsInventItemPrices">
    ///    The main data source of the report.
    /// </param>
    private void fetchActiveNoAsPerDate(
        QueryRun                _queryRun,
        QueryBuildDataSource    _dsInventItemPrices)
    {
        this.addActiveFilter(_dsInventItemPrices);

        this.printQuery(_queryRun, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchActiveWithAsPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retreives the data for active prices with date specified.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object that holds the query.
    /// </param>
    /// <param name="_dsInventItemPrices">
    ///    The main data source of the report.
    /// </param>
    private void fetchActiveWithAsPerDate(
        QueryRun                _queryRun,
        QueryBuildDataSource    _dsInventItemPrices)
    {
        QueryBuildDataSource dsActivePriceFilter = this.addActiveFilter(_dsInventItemPrices);

        QueryBuildRange qbRange = dsActivePriceFilter.addRange(fieldNum(InventItemPrice,ActivationDate));
        qbRange.value(queryValue(dateNull()) + '..' + queryValue(asPerDate));

        this.printQueryFilteredByAsPerDate(_queryRun, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchVersionNoAsPerDateNoFallback</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data for version without a date and no fallback version specified.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object that holds the query.
    /// </param>
    /// <param name="_dsInventItemPrices">
    ///    The main data source of the report.
    /// </param>
    private void fetchVersionNoAsPerDateNoFallback(
        QueryRun                _queryRun,
        QueryBuildDataSource    _dsInventItemPrices)
    {
        QueryBuildRange qbRange = _dsInventItemPrices.addRange(fieldNum(InventItemPrices,VersionId));
        qbRange.value(queryValue(costingVersionId));

        this.printQuery(_queryRun, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchVersionNoAsPerDateWithFallback</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retreives the data for version without a date and fallback version specified.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object that holds the query.
    /// </param>
    /// <param name="_dsInventItemPrices">
    ///    The main data source of the report.
    /// </param>
    private void fetchVersionNoAsPerDateWithFallback(
        QueryRun                _queryRun,
        QueryBuildDataSource    _dsInventItemPrices)
    {
        // get the data from the Version
        this.fetchVersionNoAsPerDateNoFallback(_queryRun, _dsInventItemPrices);

        _queryRun.reset();

        this.addFallbackFilter(_dsInventItemPrices);

        this.printQuery(_queryRun, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchVersionWithAsPerDateNoFallback</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retreives the data for version with date and no fallback version specified.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object that holds the query.
    /// </param>
    /// <param name="_dsInventItemPrices">
    ///    The main data source of the report.
    /// </param>
    private void fetchVersionWithAsPerDateNoFallback(
        QueryRun                _queryRun,
        QueryBuildDataSource    _dsInventItemPrices)
    {
        QueryBuildRange qbRange = _dsInventItemPrices.addRange(fieldNum(InventItemPrices,VersionId));
        qbRange.value(queryValue(costingVersionId));

        qbRange                 = _dsInventItemPrices.addRange(fieldNum(InventItemPrices,ActivationDate));
        qbRange.value(queryValue(dateNull()) + '..' + queryValue(asPerDate));

        this.printQueryFilteredByAsPerDate(_queryRun, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchVersionWithAsPerDateWithFallback</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retreives the data for version with date and fallback version specified.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object that holds the query.
    /// </param>
    /// <param name="_dsInventItemPrices">
    ///    The main data source of the report.
    /// </param>
    private void fetchVersionWithAsPerDateWithFallback(
        QueryRun                _queryRun,
        QueryBuildDataSource    _dsInventItemPrices)
    {
        // get the data from the version
        this.fetchVersionWithAsPerDateNoFallback(_queryRun, _dsInventItemPrices);

        _queryRun.reset();

        QueryBuildRange qbRange = _dsInventItemPrices.addRange(fieldNum(InventItemPrices,ActivationDate));
        qbRange.value(queryValue(dateNull()) + '..' + queryValue(asPerDate));

        QueryBuildDataSource dsFallbackFilter = this.addFallbackFilter(_dsInventItemPrices);

        // no need to get only one price, just get every price with a date < than the as per date
        // if the version has at least one such price, there is no need for a fallback one.
        qbRange                 = dsFallbackFilter.addRange(fieldNum(InventItemPrices,ActivationDate));
        qbRange.value(queryValue(dateNull()) + '..' + queryValue(asPerDate));

        this.printQueryFilteredByAsPerDate(_queryRun, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventPriceOverviewTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>InventPriceOverviewTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>InventPriceOverviewTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute('InventPriceOverviewTmp')
    ]
    public InventPriceOverviewTmp getInventPriceOverviewTmp()
    {
        select * from inventPriceOverviewTmp;
        return inventPriceOverviewTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts data into the temporary table.
    /// </summary>
    /// <param name="_insertCostingType">
    ///    A Boolean value that indicates whether to insert the costing type.
    /// </param>
    /// <param name="_printInventItemPrices">
    ///    The <c>InventItemPrices</c> buffer.
    /// </param>
    /// <param name="_printInventDim">
    ///    The <c>InventDim</c> buffer.
    /// </param>
    /// <param name="_printInventTable">
    ///    The <c>InventTable</c> buffer.
    /// </param>
    /// <param name="_printInventItemPrice">
    ///    The <c>InventItemPrice</c> buffer.
    /// </param>
    private void insertIntoTempTable(boolean            _insertCostingType,
                                     InventItemPrices   _printInventItemPrices,
                                     InventDim          _printInventDim,
                                     InventTable        _printInventTable,
                                     InventItemPrice    _printInventItemPrice
                                     )
    {
        //Body 1
        inventPriceOverviewTmp.ItemId               = _printInventItemPrices.ItemId;
        inventPriceOverviewTmp.ItemName             = _printInventTable.defaultProductName();
        inventPriceOverviewTmp.ItemType             = _printInventTable.ItemType;
        inventPriceOverviewTmp.InventDimId          = _printInventItemPrices.InventDimId;

        // Group
        inventPriceOverviewTmp.InventDimFieldsMap::initAllDimensionsFrom(_printInventDim);

        // Body
        inventPriceOverviewTmp.PriceType            = _printInventItemPrices.PriceType;
        inventPriceOverviewTmp.Price                = _printInventItemPrices.Price;
        if (_insertCostingType)
        {
            inventPriceOverviewTmp.CostingType      = _printInventItemPrice.CostingType;
        }
        inventPriceOverviewTmp.PriceUnit            = _printInventItemPrices.PriceUnit;
        inventPriceOverviewTmp.Markup               = _printInventItemPrices.Markup;
        inventPriceOverviewTmp.PriceAllocateMarkup  = _printInventItemPrices.PriceAllocateMarkup;
        inventPriceOverviewTmp.UnitId               = _printInventItemPrices.UnitId;
        inventPriceOverviewTmp.PriceQty             = _printInventItemPrices.PriceQty;
        inventPriceOverviewTmp.ActivationDate       = _printInventItemPrices.ActivationDate;
        inventPriceOverviewTmp.Status               = _printInventItemPrices.status();
        inventPriceOverviewTmp.VersionId            = _printInventItemPrices.VersionId;

        inventPriceOverviewTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>printQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs through the query and sends the data to the report engine.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object that holds the query.
    /// </param>
    /// <param name="_activePrices">
    ///    A Boolean value that specifies whether the report is printing only active prices, or both active
    ///    and simulated.
    /// </param>
    private void printQuery( QueryRun   _queryRun,
                             boolean    _activePrices)
    {
        InventItemPrice             printInventItemPrice;

        while (_queryRun.next())
        {
            boolean insertCostingType = false;

            InventItemPrices printInventItemPrices = _queryRun.get(tableNum(InventItemPrices));
            InventTable      printInventTable      = _queryRun.get(tableNum(InventTable));
            InventDim        printInventDim        = _queryRun.get(tableNum(InventDim));

            if (_activePrices && printInventItemPrices.TableSourceId == tableNum(InventItemPriceSim))
            {
                continue;
            }

            if (_activePrices)
            {
                printInventItemPrice                    = _queryRun.get(tableNum(InventItemPrice));
                insertCostingType                       = true;
            }

            this.insertIntoTempTable(insertCostingType,printInventItemPrices, printInventDim, printInventTable,
                                        printInventItemPrice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printQueryFilteredByAsPerDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs through the query and sends the filtered data to the report engine.
    /// </summary>
    /// <param name="_queryRun">
    ///    The <c>QueryRun</c> object that holds the query.
    /// </param>
    /// <param name="_activePrices">
    ///    A Boolean value that specifies whether the report is printing only active prices, or both active
    ///    and simulated.
    /// </param>
    /// <remarks>
    ///    The method filters the results returned by the query. It assumes the query is ordered by the
    ///    activation date.
    /// </remarks>
    private void printQueryFilteredByAsPerDate( QueryRun    _queryRun,
                                                boolean     _activePrices)
    {
        InventItemPrice             printInventItemPrice;
        Set                         priceSet = new Set(Types::Container);

        while (_queryRun.next())
        {
            boolean          insertCostingType     = false;
            InventItemPrices printInventItemPrices = _queryRun.get(tableNum(InventItemPrices));
            InventTable      printInventTable      = _queryRun.get(tableNum(InventTable));
            InventDim        printInventDim        = _queryRun.get(tableNum(InventDim));

            if (_activePrices && printInventItemPrices.TableSourceId == tableNum(InventItemPriceSim))
            {
                continue;
            }

            if (priceSet.in([printInventItemPrices.InventDimId, printInventItemPrices.ItemId, printInventItemPrices.PriceType]))
            {
                continue;
            }
            else
            {
                priceSet.add([printInventItemPrices.InventDimId, printInventItemPrices.ItemId, printInventItemPrices.PriceType]);
            }

            if (_activePrices)
            {
                printInventItemPrice                        = _queryRun.get(tableNum(InventItemPrice));
                insertCostingType                           = true;
            }
            this.insertIntoTempTable(insertCostingType, printInventItemPrices, printInventDim,
                                        printInventTable, printInventItemPrice);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Calls sub methods depending on the parameters.
    /// </remarks>
    public void processReport()
    {
        boolean                     orderByActivationDate = false;
        int                         i;
        InventPriceOverviewContract contract = this.parmDataContract() as InventPriceOverviewContract;

        asPerDate               = contract.parmAsPerDate();
        costingType             = contract.parmInventItemCostingType();
        costingVersionId        = contract.parmCostingVersionId();
        inventSiteId            = contract.parmInventSiteId();
        boolean activePrices    = contract.parmActivePrices();
        boolean fallbackVersion = contract.parmFallback();

        QueryRun qrun = new QueryRun(this.parmQuery());

        QueryBuildDataSource dsInventItemPrices = qrun.query().dataSourceTable(tableNum(InventItemPrices),1);

        // If as per date is selected, add order by activation date and created datetime if it doesn't exist
        if (asPerDate)
        {
            boolean orderByCreatedDateTime = false;
            for (i = 1; i <= qrun.query().orderByFieldCount(); i++)
            {
                if (fieldId2name(tableNum(InventItemPrices), qrun.query().orderByField(i).fieldID()) == fieldStr(InventItemPrices, ActivationDate))
                {
                    orderByActivationDate = true;
                }
                if (fieldId2name(tableNum(InventItemPrices), qrun.query().orderByField(i).fieldID()) == fieldStr(InventItemPrices, CreatedDateTimeOrig))
                {
                    orderByCreatedDateTime = true;
                }
            }

            if (!orderByActivationDate)
            {
                dsInventItemPrices.addOrderByField(fieldNum(InventItemPrices, ActivationDate), SortOrder::Descending);
            }

            if (!orderByCreatedDateTime)
            {
                dsInventItemPrices.addOrderByField(fieldNum(InventItemPrices, CreatedDateTimeOrig), SortOrder::Descending);
            }
        }

        // Make sure that the pending price comes first; used in as per date
        dsInventItemPrices.addOrderByField(fieldNum(InventItemPrices, TableSourceId),(tableNum(InventItemPriceSim) > tableNum(InventItemPrice)) ? SortOrder::Descending : SortOrder::Ascending);

        if (inventSiteId)
        {
            QueryBuildRange qbRange = qrun.query().dataSourceTable(tableNum(InventDim),1).addRange(fieldNum(InventDim, InventSiteId));
            qbRange.value(queryValue(inventSiteId));
        }

        if (activePrices)
        {
            if (asPerDate)
            {
                this.fetchActiveWithAsPerDate(qrun, dsInventItemPrices);
            }
            else
            {
                this.fetchActiveNoAsPerDate(qrun, dsInventItemPrices);
            }
        }
        else
        {
            if (asPerDate)
            {
                if (fallbackVersion)
                {
                    this.fetchVersionWithAsPerDateWithFallback(qrun, dsInventItemPrices);
                }
                else
                {
                    this.fetchVersionWithAsPerDateNoFallback(qrun, dsInventItemPrices);
                }
            }
            else
            {
                if (fallbackVersion)
                {
                    this.fetchVersionNoAsPerDateWithFallback(qrun, dsInventItemPrices);
                }
                else
                {
                    this.fetchVersionNoAsPerDateNoFallback(qrun, dsInventItemPrices);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>