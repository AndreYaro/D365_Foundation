<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureDelete_Cust_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class FactureDelete_Cust_RU extends FactureDelete_CustVendInvoice_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        protected void check()
    {
        super();

        if (jour.ExportProcessing && (jour.ProcessingType != SalesBookFactureProcessingType_RU::None))
        {
            this.addError(strfmt("@GLS112993", jour.ProcessingType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        protected void delete()
    {
        PurchBookVATProcessLogTrans_RU      logTrans;
        PurchBookVATProcessLogTransOper_RU  logTransOper;

        NumberSequenceCode                  releaseCode;
        RefRecId                            numberSequenceId;
        RefRecId                            scopeId   = NumberSeqScopeFactory::createDefaultScope().getId();

        super();

        while select forupdate logTrans
            where logTrans.FactureId    == jour.FactureId                               &&
                  logTrans.TransType    == SalesPurchBookTransType_RU::PrepaymentStorno
        {
            delete_from logTransOper
                where logTransOper.RefRecId == logTrans.RecId                               &&
                      logTransOper.CanceledRefRecId;
            logTrans.doDelete();
        }

        if (jour.NumberSequenceGroupId)
        {
            numberSequenceId = NumberSequenceGroupRef::findNaturalKey(jour.CorrectedFactureExternalId                                ?
                                                                        CustParameters::numRefCorrectFactureExternalId_RU().NumberSequenceDatatype :
                                                                        CustParameters::numRefFactureExternalId_RU().NumberSequenceDatatype,
                                                                        scopeId,
                                                                        jour.NumberSequenceGroupId).NumberSequenceId;

            releaseCode = NumberSequenceTable::find(NumberSequenceId).NumberSequence;
        }

        if (jour.CorrectionType != FactureCorrectionType_RU::Revision)
        {
            NumberSeq::releaseNumber(numberSequenceId ?
                               numberSequenceId :
                               (jour.CorrectedFactureExternalId                                    ?
                                CustParameters::numRefCorrectFactureExternalId_RU().NumberSequenceId :
                                CustParameters::numRefFactureExternalId_RU().NumberSequenceId),
                               jour.FactureExternalId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorClosedBook</Name>
				<Source><![CDATA[
        protected str errorClosedBook(SalesPurchBookId_RU _bookId)
    {
        return strfmt("@GLS112043", _bookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJour</Name>
				<Source><![CDATA[
        protected CustVendInvoiceJour getInvoiceJour(CustVendInvoiceTrans _trans)
    {
        CustInvoiceTrans localCustInvoiceTrans = _trans;

        return CustInvoiceJour::findFromCustInvoiceTrans(localCustInvoiceTrans.SalesId,
                                                         localCustInvoiceTrans.InvoiceId,
                                                         localCustInvoiceTrans.InvoiceDate,
                                                         localCustInvoiceTrans.NumberSequenceGroup,
                                                         true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJourRecId</Name>
				<Source><![CDATA[
        protected CustVendInvoiceJour getInvoiceJourRecId(RecId _recId)
    {
        return CustInvoiceJour::findRecId(_recId, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTrans</Name>
				<Source><![CDATA[
        protected CustVendInvoiceTrans getInvoiceTrans(FactureTrans_RU _trans)
    {
        return CustInvoiceTrans::findFacture_RU(_trans, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTransRecId</Name>
				<Source><![CDATA[
        protected CustVendInvoiceTrans getInvoiceTransRecId(recId _recId)
    {
        return CustInvoiceTrans::findRecId(_recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourTableId</Name>
				<Source><![CDATA[
        protected tableId jourTableId()
    {
        return tablenum(CustInvoiceJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(FactureJour_RU _jour)
    {
        super(_jour);

        bookTable = new DictTable(tablenum(SalesBookTable_RU)).makeRecord();
        bookTrans = new DictTable(tablenum(SalesBookTrans_RU)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
        protected tableId transTableId()
    {
        return tablenum(CustInvoiceTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExtra</Name>
				<Source><![CDATA[
        protected void updateExtra(FactureTrans_RU   _trans)
    {
        this.updateInvoiceJour(CustInvoiceJour::findFromCustInvoiceTrans(_trans.SalesPurchId,
                                                                         _trans.InvoiceId,
                                                                         _trans.InvoiceDate,
                                                                         _trans.NumberSequenceGroup,
                                                                         true));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceOrder</Name>
				<Source><![CDATA[
        protected void updateSourceOrder(CustVendInvoiceJour _jour)
    {
        CustInvoiceJour localCustInvoiceJour = _jour;
        SalesTable      table;

        ttsbegin;

        table = localCustInvoiceJour.salesTable(true);

        if (table && table.factureJourSortedList_RU().len() == 1) // the last facture is being deleted
        {
            table.DocumentStatus = DocumentStatus::Invoice;
            table.doUpdate();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>