<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventTransOriginFormDataSourceDynalinkWithInventTransArchive</Name>
	<SourceCode>
		<Declaration><![CDATA[
final internal class InventTransOriginFormDataSourceDynalinkWithInventTransArchive extends InventTransOriginFormDataSourceDynalink
{    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCallerDynalink</Name>
				<Source><![CDATA[
    public void addCallerDynalink(
        FormDataSource _inventTransOriginDataSource,
        FormDataSource _inventTransArchiveDataSource,
        Args           _callerArgs)
    {
        InventTransRelationType relationType = _callerArgs.parmEnum();
        
        if (!_callerArgs.record() && (relationType != InventTransRelationType::ItemIdx))
        {
            return;
        }

        InventTransArchiveFormHelper::formQueryAddDefaultOriginLink(_inventTransOriginDataSource, _inventTransArchiveDataSource);
       
        Query  query = new Query();

        if (relationType != InventTransRelationType::Default)
        {
            if (this.addDynalinkByRelationType(relationType, query, _inventTransOriginDataSource, _inventTransArchiveDataSource, _callerArgs))
            {
                return;
            }
        }
        else
        {
            if (this.addDynalinkByRelation(query, _inventTransOriginDataSource, _inventTransArchiveDataSource, _callerArgs))
            {
                return;
            }
        }       

        _inventTransOriginDataSource.query(query);
        if (_inventTransArchiveDataSource && _inventTransArchiveDataSource.masterObjectSet() == _inventTransArchiveDataSource)
        {
            //Queries can only be set on Master DataSources.
            _inventTransArchiveDataSource.query(query);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynalinkByRelationType</Name>
				<Source><![CDATA[
    protected boolean addDynalinkByRelationType(
        InventTransRelationType _relationType,
        Query                   _query,
        FormDataSource          _inventTransOriginDataSource,
        FormDataSource          _inventTransArchiveDataSource,
        Args                    _callerArgs)
    {
        QueryBuildDataSource    inventTransOriginQueryDataSource;
        QueryBuildDataSource    inventTransArchiveQueryDataSource;

        switch (_relationType)
        {
            case InventTransRelationType::ItemIdx:
                _inventTransOriginDataSource.query().dataSourceTable(tableNum(InventTransOrigin)).addSortField(fieldNum(InventTransOrigin, ItemId));
                _inventTransOriginDataSource.query().dataSourceTable(tableNum(InventTransArchive)).addSortField(fieldNum(InventTransArchive, DatePhysical));

                _inventTransOriginDataSource.query().dataSourceTable(tableNum(InventTransOrigin)).addDynalink(fieldNum(InventTransOrigin, ItemId), _callerArgs.record(),
                                                                                                        fieldName2id(_callerArgs.dataset(),fieldStr(InventTransOrigin, ItemId)));

                //we allow the join on itemId so SQL can pick a more optimal query plan and filter by inventtrans itemId
                _inventTransOriginDataSource.query().dataSourceTable(tableNum(InventTransArchive)).addLink(fieldNum(InventTransOrigin, ItemId), fieldNum(InventTransArchive, ItemId));
                return true;

            case InventTransRelationType::InventDim:
                inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
                inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

                inventTransOriginQueryDataSource.addDynalink(fieldNum(InventTransOrigin, ItemId), _callerArgs.record(),
                                    fieldName2id(_callerArgs.dataset(), fieldStr(InventTransOrigin,ItemId)));

                inventTransOriginQueryDataSource.addSortField(fieldNum(InventTransOrigin, ItemId));

                if (_inventTransArchiveDataSource)
                {
                    inventTransArchiveQueryDataSource = inventTransOriginQueryDataSource.addDataSource(tableNum(InventTransArchive));
                    inventTransArchiveQueryDataSource.name(_inventTransArchiveDataSource.name());
                    inventTransArchiveQueryDataSource.joinMode(JoinMode::InnerJoin);
                    inventTransArchiveQueryDataSource.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransArchive, InventTransOrigin));
                    inventTransArchiveQueryDataSource.addSortField(fieldNum(InventTransArchive, DatePhysical));
                }
                break;

            case InventTransRelationType::InventTransId:  // Set by menu item InventTransLot, fall through by using ItemId to query
            case InventTransRelationType::ItemId:
                inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
                inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

                inventTransOriginQueryDataSource.addDynalink(fieldNum(InventTransOrigin, ItemId), _callerArgs.record(),
                                    fieldName2id(_callerArgs.dataset(), fieldStr(InventTransOrigin, ItemId)));

                inventTransOriginQueryDataSource.addSortField(fieldNum(InventTransOrigin,ItemId));
                if (_inventTransArchiveDataSource)
                {
                    inventTransArchiveQueryDataSource = inventTransOriginQueryDataSource.addDataSource(tableNum(InventTransArchive));
                    inventTransArchiveQueryDataSource.name(_inventTransArchiveDataSource.name());
                    inventTransArchiveQueryDataSource.joinMode(JoinMode::InnerJoin);
                    inventTransArchiveQueryDataSource.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransArchive, InventTransOrigin));
                    //we allow the join on itemId so SQL can pick a more optimal query plan and filter by inventtransArchive itemId
                    inventTransArchiveQueryDataSource.addLink(fieldNum(InventTransOrigin, ItemId), fieldNum(InventTransArchive, ItemId));
                    inventTransArchiveQueryDataSource.addSortField(fieldNum(InventTransArchive, DatePhysical));
                }
                break;

            case InventTransRelationType::PurchaseOrderConsignment:
                PurchLine purchLine = _callerArgs.record();
                if (!purchLine
                        || purchLine.PurchaseOrderLineCreationMethod != PurchPurchaseOrderCreationMethod::Consignment)
                {
                    return true;
                }

                inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
                inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

                var qbS_Link = inventTransOriginQueryDataSource.addDataSource(tableNum(InventTransOriginOwnershipChangeJournalTransPurchLineLink));
                qbS_Link.joinMode(JoinMode::InnerJoin);
                qbS_Link.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransOriginOwnershipChangeJournalTransPurchLineLink, OwnershipChangeJournalLine));
                qbS_Link.addRange(fieldNum(InventTransOriginOwnershipChangeJournalTransPurchLineLink, PurchaseOrderLine)).value(queryValue(InventTransOriginPurchLine::findInventTransOriginId(purchLine.DataAreaId, purchLine.InventTransId)));

                if (_inventTransArchiveDataSource)
                {
                    this.addJoinToInventTransArchive(inventTransOriginQueryDataSource, _inventTransArchiveDataSource);
                }
                break;

            case InventTransRelationType::ProductionBOMConsignment:
                boolean viewingJournalLineTransForProdBom = _callerArgs.dataset() == tableNum(ProdBOM);
                boolean viewingProdBomTransForJournalLine = _callerArgs.dataset() == tableNum(InventJournalTrans);

                if (!viewingJournalLineTransForProdBom && !viewingProdBomTransForJournalLine)
                {
                    return true;
                }

                inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
                inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

                var qbsLink = inventTransOriginQueryDataSource.addDataSource(tableNum(InventTransOriginProdBomOwnershipChangeJournalTransLink));
                qbsLink.joinMode(JoinMode::InnerJoin);

                if (viewingJournalLineTransForProdBom)
                {
                    ProdBOM prodBom = _callerArgs.record();
                    qbsLink.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransOriginProdBomOwnershipChangeJournalTransLink, JournalLineInventTransOrigin));
                    qbsLink.addRange(fieldNum(InventTransOriginProdBomOwnershipChangeJournalTransLink, ProductionBOMLine)).value(queryValue(InventTransOriginProdBOM::findInventTransOriginId(prodBom.DataAreaId, prodBom.InventTransId)));
                }
                else
                {
                    InventJournalTrans journalLine = _callerArgs.record();
                    qbsLink.addLink(fieldNum(InventTransOrigin, RecId), fieldNum(InventTransOriginProdBomOwnershipChangeJournalTransLink, ProductionBOMLine));
                    qbsLink.addRange(fieldNum(InventTransOriginProdBomOwnershipChangeJournalTransLink, JournalLine)).value(queryValue(journalLine.RecId));
                }

                if (_inventTransArchiveDataSource)
                {
                    this.addJoinToInventTransArchive(inventTransOriginQueryDataSource, _inventTransArchiveDataSource);
                }
                break;

                // <GEERU>
            case InventTransRelationType::InventTransIdGoodsInRoute_RU:
                if (_callerArgs.dataset() == tableNum(SalesLine))
                {
                    // Link added in formQueryPreExecute. Need to link to several InventTransOrigin's at the same time
                    return true;
                }
                // </GEERU>
                break;

        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    public static InventTransOriginFormDataSourceDynalinkWithInventTransArchive construct()
    {
        return new InventTransOriginFormDataSourceDynalinkWithInventTransArchive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDynalinkByRelation</Name>
				<Source><![CDATA[
    protected boolean addDynalinkByRelation(
        Query           _query,
        FormDataSource  _inventTransOriginDataSource,
        FormDataSource  _inventTransArchiveDataSource,
        Args            _callerArgs)
    {
        if (_callerArgs.dataset() == tableNum(InventTransArchive))
        {
            this.addDirectJoin(_query, _inventTransOriginDataSource, _inventTransArchiveDataSource, _callerArgs);
            return false;
        } 

        return this.addDynalinkByRelationHelper(_query, _inventTransOriginDataSource, _inventTransArchiveDataSource, _callerArgs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJoinUsingRelationshipTable</Name>
				<Source><![CDATA[
    protected void addJoinUsingRelationshipTable(
        Query           _query,
        FormDataSource  _inventTransOriginDataSource,
        FormDataSource  _inventTransArchiveDataSource,
        Args            _callerArgs,
        TableId         _relationshipTableTableId)
    {
        QueryBuildDataSource inventTransOriginQueryDataSource =
            this.addInventTransOriginJoinUsingRelationshipTable(_query, _inventTransOriginDataSource, _callerArgs, _relationshipTableTableId);

        if (_inventTransArchiveDataSource)
        {
            this.addJoinToInventTransArchive(inventTransOriginQueryDataSource, _inventTransArchiveDataSource);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJoinUsingForeignKey</Name>
				<Source><![CDATA[
    protected void addJoinUsingForeignKey(
        Query           _query,
        FormDataSource  _inventTransOriginDataSource,
        FormDataSource  _inventTransArchiveDataSource,
        Args            _callerArgs)
    {
        // Using FK on caller to join with InventTransOrigin
        QueryBuildDataSource inventTransOriginQueryDataSource = this.addInventTransOriginJoinUsingForeignKey(_query, _inventTransOriginDataSource, _callerArgs);

        if (_inventTransArchiveDataSource)
        {
            this.addJoinToInventTransArchive(inventTransOriginQueryDataSource, _inventTransArchiveDataSource);
            QueryBuildDataSource inventTransQueryDataSource = SysQuery::findOrCreateDataSourceByName(_query, _inventTransArchiveDataSource.name(), tableNum(InventTransArchive));
            inventTransQueryDataSource.addSortField(fieldNum(InventTransArchive, StatusIssue));
            inventTransQueryDataSource.addSortField(fieldNum(InventTransArchive, StatusReceipt));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addDirectJoin</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    protected void addDirectJoin(
        Query           _query,
        FormDataSource  _inventTransOriginDataSource,
        FormDataSource  _inventTransArchiveDataSource,
        Args            _callerArgs)
    {
        QueryBuildDataSource inventTransOriginQueryDataSource = _query.addDataSource(tableNum(InventTransOrigin));
        inventTransOriginQueryDataSource.name(_inventTransOriginDataSource.name());

        inventTransOriginQueryDataSource.addDynalink(fieldNum(InventTransOrigin, RecId), _callerArgs.record(), fieldName2Id(_callerArgs.dataset(), fieldStr(InventTrans, InventTransOrigin)));

        if (_inventTransArchiveDataSource)
        {
            this.addJoinToInventTransArchive(inventTransOriginQueryDataSource, _inventTransArchiveDataSource);
            QueryBuildDataSource inventTransArchiveQueryDataSource = SysQuery::findOrCreateDataSourceByName(_query, _inventTransArchiveDataSource.name(), tableNum(InventTransArchive));
            inventTransArchiveQueryDataSource.addDynalink(fieldNum(InventTransArchive, RecId), _callerArgs.record(), fieldName2Id(_callerArgs.dataset(), fieldStr(InventTransArchive, RecId)));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addJoinToInventTransArchive</Name>
				<Source><![CDATA[
    private void addJoinToInventTransArchive(
        QueryBuildDataSource    _inventTransOriginQueryDataSource,
        FormDataSource          _inventTransArchiveDataSource)
    {
        QueryBuildDataSource inventTransQueryDataSource = _inventTransOriginQueryDataSource.addDataSource(tableNum(InventTransArchive));
        inventTransQueryDataSource.name(_inventTransArchiveDataSource.name());
        inventTransQueryDataSource.joinMode(JoinMode::InnerJoin);
        inventTransQueryDataSource.addLink(fieldNum(InventTransOrigin, RecId),fieldNum(InventTransArchive, InventTransOrigin));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>