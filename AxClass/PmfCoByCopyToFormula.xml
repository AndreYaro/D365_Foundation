<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfCoByCopyToFormula</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Co/By copy destination for copying to a formula.
/// </summary>
public class PmfCoByCopyToFormula extends PmfCoByCopyTo
{
    BOMId               toBOMId;
    InventSiteId        toSiteId;
    RecId               bomVersionRecId;
    Set                 set;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>copyTo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy the from Co/By records to this destination.
    /// </summary>
    /// <param name="_copyFrom">Formula Co/By  copy source parameters.</param>
    /// <param name="_search">Formula Co/By  copy search.</param>
    /// <param name="_toFormulaCoBy">Formula Co/By  destination record.</param>
    /// <param name="_copyRef">flag to copy.</param>
    public void copyTo(
        PmfCoByCopyFrom         _copyFrom,
        PmfCoBySearchBase       _search,
        PmfCoByMap              _toFormulaCoBy,
        boolean                 _copyRef = false)
    {
        PmfCoByMap          fromCoby =  _search.coBy();
        InventDim           fromInventDim;
        InventDim           inventDim;
        InventTable         inventTable;
        BOMVersion          bomVersion = BOMVersion::findRecId(bomVersionRecId);

        // This will also copy the inventDimId
        _toFormulaCoBy.initFromCoBy(_search.coBy());
        inventDim = _toFormulaCoBy.inventDim();
        _copyFrom.initToPmfFormulaCoBy(_toFormulaCoBy,inventDim,inventTable);
        _toFormulaCoBy.bomId = toBOMId;

        // Use the from storage dimensions
        fromInventDim = fromCoby.inventDim();

        if (!inventDim.InventLocationId || !inventDim.InventSiteId)
        {
            inventDim.InventSiteId      = fromInventDim.InventSiteId;
            inventDim.InventLocationId  = fromInventDim.InventLocationId;
        }

        // If the to site is different then warehouse is cleared and the site set
        if (fromInventDim.InventSiteId != toSiteId)
        {
            inventDim.InventSiteId      = toSiteId;
            inventDim.InventLocationId  = '';
        }

        _toFormulaCoBy.InventDimId = InventDim::findOrCreate(inventDim).InventDimId;
        _toFormulaCoBy.bomVersionRefRecId = bomVersionRecId;
        _toFormulaCoBy.CoByQty  = fromCoby.CoByQty;
        _toFormulaCoBy.PdsCWQty = fromCoby.PdsCWQty;
        _toFormulaCoBy.CoByQtySerie = fromCoby.CoByQtySerie;

        super(_copyFrom,_search,_toFormulaCoBy,_copyRef);
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCoBy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the default Co/By record that is to be set.
    /// </summary>
    /// <returns>The default Co/By record to be set.</returns>
    public PmfCoByMap defaultCoBy()
    {
        PmfFormulaCoBy pmfFormulaCoBy;

        return pmfFormulaCoBy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the Co/By records from the destination formula.
    /// </summary>
    public void delete()
    {
        PmfCoBySearch search;

        ttsbegin;

        search = PmfCoBySearch_FormulaCopyType::newFormulaCopyDelete(toBOMId,bomVersionRecId);

        while (search.next())
        {
            if (! search.coBy().validateDelete())
            {
                throw error("@SYS18722");
            }

            search.coBy().delete();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard protected new.
    /// </summary>
    /// <param name="_toId">Formula identifier for the copy destination.</param>
    /// <param name="_siteId">Inventory site identifier for the copy destination.</param>
    /// <param name="_bomVersionRecId">Destination formula version record id.</param>
    protected void new(
        BOMId           _toId,
        InventSiteId    _siteId,
        RecId           _bomVersionRecId = 0)
    {
        super();

        toBOMId     = _toId;
        toSiteId    = _siteId;
        bomVersionRecId = _bomVersionRecId;

        set = new Set(Types::Container);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Static constructor to create the base instance of PmfCoByCopyToFormula.
    /// </summary>
    /// <param name="_toId">Formula identifier for the copy destination.</param>
    /// <param name="_siteId">Inventory site identifier for the copy destination.</param>
    /// <param name="_bomVersionRecId">Destination formula version record id.</param>
    /// <returns>returns instance</returns>
    public static PmfCoByCopyToFormula construct(
        BOMId           _toId,
        InventSiteId    _siteId,
        RecId           _bomVersionRecId = 0)
    {
        return new PmfCoByCopyToFormula(_toId, _siteId, _bomVersionRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMRouteCopy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Special static constructor to create an instance of PmfCoByCopyToFormula from copy parameters.
    /// </summary>
    /// <param name="_bomRouteCopy">Formula copy parameters.</param>
    /// <returns>returns instance</returns>
    public static PmfCoByCopyToFormula newBOMRouteCopy(
        BOMRouteCopyJob _bomRouteCopy)
    {
        PmfCoByCopyToFormula   pmfCoByCopyToFormula;

        pmfCoByCopyToFormula = PmfCoByCopyToFormula::construct(
            _bomRouteCopy.parmToBOMId(),
            _bomRouteCopy.parmToSiteId(),
            _bomRouteCopy.parmPmfToVerRecId());

        return pmfCoByCopyToFormula;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>