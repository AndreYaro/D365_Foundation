<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPropertyHeaderPublishService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Publish pricing property definition changes on header level, refresh all records in <c>RetailPriceGroupApplicabilityRule</c> to align with the latest definition.
/// </summary>
internal final class RetailPricingPropertyHeaderPublishService extends SysOperationServiceBase
{
    private const str RetailInstrumentationSegmentArea = 'PricingPropertyPublish.HeaderLevel';

    internal container propValueFieldNumsPendingDeletion, salesOrderAttrPropertiesPendingValueDeletion;
    internal container propValueFieldNums =
        [
            fieldNum(RetailPriceGroupApplicabilityRule, PropValue0),
            fieldNum(RetailPriceGroupApplicabilityRule, PropValue1),
            fieldNum(RetailPriceGroupApplicabilityRule, PropValue2),
            fieldNum(RetailPriceGroupApplicabilityRule, PropValue3),
            fieldNum(RetailPriceGroupApplicabilityRule, PropValue4),
            fieldNum(RetailPriceGroupApplicabilityRule, PropValue5),
            fieldNum(RetailPriceGroupApplicabilityRule, PropValue6),
            fieldNum(RetailPriceGroupApplicabilityRule, PropValue7),
            fieldNum(RetailPriceGroupApplicabilityRule, PropValue8),
            fieldNum(RetailPriceGroupApplicabilityRule, PropValue9)
        ];
    internal container tmpPropValueFieldNums =
        [
            fieldNum(RetailPriceGroupApplicabilityRuleTmp, PropValue0),
            fieldNum(RetailPriceGroupApplicabilityRuleTmp, PropValue1),
            fieldNum(RetailPriceGroupApplicabilityRuleTmp, PropValue2),
            fieldNum(RetailPriceGroupApplicabilityRuleTmp, PropValue3),
            fieldNum(RetailPriceGroupApplicabilityRuleTmp, PropValue4),
            fieldNum(RetailPriceGroupApplicabilityRuleTmp, PropValue5),
            fieldNum(RetailPriceGroupApplicabilityRuleTmp, PropValue6),
            fieldNum(RetailPriceGroupApplicabilityRuleTmp, PropValue7),
            fieldNum(RetailPriceGroupApplicabilityRuleTmp, PropValue8),
            fieldNum(RetailPriceGroupApplicabilityRuleTmp, PropValue9)
        ];

    internal boolean isChannelPropertyPendingDeletion = false;
    internal boolean isCustomerPropertyPendingDeletion = false;
    internal boolean isCustomerGroupPropertyPendingDeletion = false;
    internal boolean isAffiliationPropertyPendingDeletion = false;
    internal boolean isLoyaltyTierPropertyPendingDeletion = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refresh all records in <c>RetailPriceGroupApplicabilityRule</c> to align with the latest header property definition.
    /// </summary>
    public void process()
    {
        System.Exception ex;

        try
        {
            using(var PublishTelemetry = RetailPricingInstrumentationSegment::construct(
                RetailInstrumentationSegmentArea, methodStr(RetailPricingPropertyHeaderPublishService, process)))
            {
                this.initPendingDeletionInfo();
                
                ttsbegin;

                if (conLen(propValueFieldNumsPendingDeletion) > 0)
                {
                    using(var PublishPerCompanyTelemetry = RetailPricingInstrumentationSegment::construct(
                        RetailInstrumentationSegmentArea,
                        methodStr(RetailPricingPropertyHeaderPublishService, processRetailPriceGroupApplicabilityRulePerCompany)))
                    {
                        this.processRetailPriceGroupApplicabilityRulePerCompany();
                    }
                }

                RetailPricingAttributePropertyHelper::deleteEcoResAttributeValuesForPricingSimulator(salesOrderAttrPropertiesPendingValueDeletion);
                
                RetailPricingPropertyDefinition headerProperty;
                delete_from headerProperty where headerProperty.PropertyLevel == RetailPricingPropertyLevel::Header
                    && headerProperty.IsPendingDeletion == NoYes::Yes;

                // Create new published properties
                // Keep the draft copy, so that users can immediately view them when research on the property definition form.
                RetailPricingPropertyDefinition::copyPropertyDefinitions(RetailPricingPropertyLevel::Header, RetailPricingPropertyProcessStatus::Draft, RetailPricingPropertyProcessStatus::Published);

                RetailPricingSharedParameters retailPricingSharedParameters = RetailPricingSharedParameters::find(true);
                retailPricingSharedParameters.PriceGroupApplicabilityRuleProcessStatus = RetailPricingPropertyProcessStatus::Published;
                retailPricingSharedParameters.update();

                ttscommit;

                RetailPriceGroupApplicabilityRuleEntity::generatMapping();

                this.addSystemNotification(
                    strFmt("@RetailPricing:RetailPricingPropertyPublishBatchSucceedTitle", "@RetailPricing:RetailPricingPropertyPublishHeaderBatchLabel"),
                    "@RetailPricing:RetailPricingPropertyPublishHeaderBatchSucceedMessage");
            }
        }
        catch(ex)
        {
            ttsbegin;
            RetailPricingSharedParameters retailPricingSharedParameters = RetailPricingSharedParameters::find(true);
            retailPricingSharedParameters.PriceGroupApplicabilityRuleProcessStatus = RetailPricingPropertyProcessStatus::Draft;
            retailPricingSharedParameters.update();
            ttscommit;

            var exceptionTelemetry = RetailPricingInstrumentatioBatchFailureSegment::construct(
                    classStr(RetailPricingPropertyHeaderPublishService),
                    methodStr(RetailPricingPropertyHeaderPublishService, process));
            exceptionTelemetry.addException(ex);
            exceptionTelemetry.log();
            
            this.addSystemNotification(
                strFmt("@RetailPricing:RetailPricingPropertyPublishBatchFailTitle", "@RetailPricing:RetailPricingPropertyPublishHeaderBatchLabel"),
                "@RetailPricing:RetailPricingPropertyPublishHeaderBatchFailMessage");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPendingDeletionInfo</Name>
				<Source><![CDATA[
    internal void initPendingDeletionInfo()
    {
        RetailPricingPropertyDefinition headerProperty;

        int propValueIndex = 1;
        while select headerProperty
            where headerProperty.PropertyLevel == RetailPricingPropertyLevel::Header && headerProperty.Status == RetailPricingPropertyProcessStatus::Draft
        {
            if (headerProperty.IsPendingDeletion == NoYes::Yes)
            {
                propValueFieldNumsPendingDeletion += conPeek(propValueFieldNums, propValueIndex);
                if (headerProperty.PropertyType == RetailPricingPropertyType::Predefined)
                {
                    switch(headerProperty.PredefinedProperty)
                    {
                        case RetailPricingPredefinedProperty::Channel:
                            isChannelPropertyPendingDeletion = true;
                            break;
                        case RetailPricingPredefinedProperty::Customer:
                            isCustomerPropertyPendingDeletion = true;
                            break;
                        case RetailPricingPredefinedProperty::CustomerGroup:
                            isCustomerGroupPropertyPendingDeletion = true;
                            break;
                        case RetailPricingPredefinedProperty::Affiliation:
                            isAffiliationPropertyPendingDeletion = true;
                            break;
                        case RetailPricingPredefinedProperty::LoyaltyTier:
                            isLoyaltyTierPropertyPendingDeletion = true;
                            break;
                        default:
                            break;
                    }
                }
                else if (headerProperty.PropertyType == RetailPricingPropertyType::EcoResAttribute
                    && headerProperty.PropertySource == RetailPricingPropertySource::SalesOrderHeader)
                {
                    salesOrderAttrPropertiesPendingValueDeletion += headerProperty;
                }
            }

            propValueIndex ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processRetailPriceGroupApplicabilityRulePerCompany</Name>
				<Source><![CDATA[
    internal void processRetailPriceGroupApplicabilityRulePerCompany()
    {
        RetailPricingPropertyDefinition headerProperty;
        RetailPriceGroupApplicabilityRule priceGroupApplicabilityRule;

        // RecordInsertList will automatically write into DB when the stored data is large enough,
        // so we target RecordInsertList at temp table first, then dump all from temp table into the formal table.
        RetailPriceGroupApplicabilityRuleTmp newPriceGroupApplicabilityRule;
        RecordInsertList newPriceGroupApplicabilityRuleList = new RecordInsertList(
            tableNum(RetailPriceGroupApplicabilityRuleTmp),
            true, // skip insert
            true, // skip database log
            true, // skip events
            true, // skip aos validation
            true, // skip RLS validation
            newPriceGroupApplicabilityRule); // buffer where records will be inserted

        int priceGroupApplicabilityRuleFieldNum, newPriceGroupApplicabilityRuleFieldNum;
        int lastFieldNumIndex = conLen(propValueFieldNums);
        while select priceGroupApplicabilityRule
        {
            newPriceGroupApplicabilityRule.clear();

            boolean hasPropValue = false;
            for(int fieldNumIndex = 1, newFieldNumIdex = 1; fieldNumIndex <= lastFieldNumIndex; fieldNumIndex ++)
            {
                priceGroupApplicabilityRuleFieldNum = conPeek(propValueFieldNums, fieldNumIndex);
                newPriceGroupApplicabilityRuleFieldNum = conPeek(tmpPropValueFieldNums, newFieldNumIdex);

                if (conFind(propValueFieldNumsPendingDeletion, priceGroupApplicabilityRuleFieldNum) == 0)
                {
                    str propValue = priceGroupApplicabilityRule.(priceGroupApplicabilityRuleFieldNum);
                    newPriceGroupApplicabilityRule.(newPriceGroupApplicabilityRuleFieldNum) = propValue;
                    newFieldNumIdex ++;

                    // If all values for the remaining properties are empty, we should not include the new line.
                    hasPropValue = hasPropValue ? hasPropValue : propValue != '';
                }
            }

            if (hasPropValue)
            {
                // Dump RefRecId fields to the new line.
                newPriceGroupApplicabilityRule.PriceDiscGroup = priceGroupApplicabilityRule.PriceDiscGroup;
                if (!isChannelPropertyPendingDeletion)
                {
                    newPriceGroupApplicabilityRule.RetailChannelTableRefRecId = priceGroupApplicabilityRule.RetailChannelTableRefRecId;
                }
                if (!isCustomerPropertyPendingDeletion)
                {
                    newPriceGroupApplicabilityRule.CustTableRefRecId = priceGroupApplicabilityRule.CustTableRefRecId;
                }
                if (!isCustomerGroupPropertyPendingDeletion)
                {
                    newPriceGroupApplicabilityRule.CustGroupRefRecId = priceGroupApplicabilityRule.CustGroupRefRecId;
                }
                if (!isAffiliationPropertyPendingDeletion)
                {
                    newPriceGroupApplicabilityRule.RetailAffiliationRefRecId = priceGroupApplicabilityRule.RetailAffiliationRefRecId;
                }
                if (!isLoyaltyTierPropertyPendingDeletion)
                {
                    newPriceGroupApplicabilityRule.RetailLoyaltyProgramRefRecId = priceGroupApplicabilityRule.RetailLoyaltyProgramRefRecId;
                    newPriceGroupApplicabilityRule.RetailLoyaltyTierRefRecId = priceGroupApplicabilityRule.RetailLoyaltyTierRefRecId;
                }

                newPriceGroupApplicabilityRuleList.add(newPriceGroupApplicabilityRule);
            }
        }

        // Write into DB.
        newPriceGroupApplicabilityRuleList.insertDatabase();

        delete_from priceGroupApplicabilityRule;
        insert_recordset priceGroupApplicabilityRule
        (
            PropValue0, PropValue1, PropValue2, PropValue3, PropValue4, PropValue5, PropValue6, PropValue7, PropValue8, PropValue9,
            PriceDiscGroup, CustGroupRefRecId, CustTableRefRecId, RetailAffiliationRefRecId, RetailChannelTableRefRecId, RetailLoyaltyProgramRefRecId, RetailLoyaltyTierRefRecId
        )
        select
            PropValue0, PropValue1, PropValue2, PropValue3, PropValue4, PropValue5, PropValue6, PropValue7, PropValue8, PropValue9,
            PriceDiscGroup, CustGroupRefRecId, CustTableRefRecId, RetailAffiliationRefRecId, RetailChannelTableRefRecId, RetailLoyaltyProgramRefRecId, RetailLoyaltyTierRefRecId
        from newPriceGroupApplicabilityRule;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addSystemNotification</Name>
				<Source><![CDATA[
    private void addSystemNotification(str _title, str _message)
    {
        SystemNotificationDataContract notification = new SystemNotificationDataContract();
        notification.Users().value(1, curUserId());
        notification.RuleId(classStr(RetailPricingPropertyHeaderPublishService));
        notification.Title(_title);
        notification.Message(_message);
        notification.ExpirationDateTime(DateTimeUtil::addHours(DateTimeUtil::utcNow(), 1));

        SystemNotificationsManager::AddSystemNotification(notification);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>