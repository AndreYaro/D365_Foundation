<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustTmpAccountSumFromCustBalanceList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CustTmpAccSumFromCustBalanceList</c> class copies values from the <c>CustVendAgingCalculatedTmp</c> and <c>CustVendTransAging</c> records into the <c>CustTmpAccountSum</c>
/// </summary>
public final class CustTmpAccountSumFromCustBalanceList extends SysQueryInsertRecordSet
{
    private CustBalanceListParameters custBalanceListParameters;

    private int custAgingCalculatedDataSourceId;
    private int custVendTransAgingDataSourceId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCustAgingCalculatedDataSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data source ID for <c>CustVendAgingCalculatedTmp</c> table.
    /// </summary>
    /// <returns>The unique ID.</returns>
    protected int getCustAgingCalculatedDataSourceId()
    {
        return custAgingCalculatedDataSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransAgingDataSourceId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data source ID for <c>CustVendTransAging</c> table.
    /// </summary>
    /// <returns>The unique ID.</returns>
    protected int getCustVendTransAgingDataSourceId()
    {
        return custVendTransAgingDataSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldMapping</Name>
				<Source><![CDATA[
    /// <summary>
    /// Map fields from the <c>CustVendAgingCalculatedTmp</c> and <c>CustVendTransAging</c> records into the <c>CustTmpAccountSum</c>.
    /// </summary>
    protected void initFieldMapping()
    {
        this.mapField(custAgingCalculatedDataSourceId, fieldStr(CustVendAgingCalculatedTmp, CurrencyCode), fieldStr(CustTmpAccountSum, CurrencyCode));
        this.mapField(custAgingCalculatedDataSourceId, fieldStr(CustVendAgingCalculatedTmp, InvoiceId), fieldStr(CustTmpAccountSum, InvoiceId));
        this.mapField(custAgingCalculatedDataSourceId, fieldStr(CustVendAgingCalculatedTmp, TransDate), fieldStr(CustTmpAccountSum, TransDate));
        this.mapField(custAgingCalculatedDataSourceId, fieldStr(CustVendAgingCalculatedTmp, Txt), fieldStr(CustTmpAccountSum, Txt));
        this.mapField(custAgingCalculatedDataSourceId, fieldStr(CustVendAgingCalculatedTmp, Voucher), fieldStr(CustTmpAccountSum, Voucher));

        this.mapField(custVendTransAgingDataSourceId, fieldStr(CustVendTransAging, AccountNum), fieldStr(CustTmpAccountSum, AccountNum));
        this.mapField(custVendTransAgingDataSourceId, fieldStr(CustVendTransAging, Name), fieldStr(CustTmpAccountSum, Name));
        this.mapField(custVendTransAgingDataSourceId, fieldStr(CustVendTransAging, GroupId), fieldStr(CustTmpAccountSum, GroupId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query to insert records into <c>CustTmpAccountSum</c> table.
    /// </summary>
    /// <returns>
    /// Query to insert records into <c>CustTmpAccountSum</c> table.
    /// </returns>
    protected Query initQuery()
    {
        Query q = new Query();
        QueryBuildDataSource qbdsCustomers = q.addDataSource(tableNum(CustVendTransAging));
        qbdsCustomers.addGroupByField(fieldNum(CustVendTransAging, AccountNum));
        qbdsCustomers.addGroupByField(fieldNum(CustVendTransAging, Name));
        qbdsCustomers.addGroupByField(fieldNum(CustVendTransAging, GroupId));
        qbdsCustomers.cursor(custBalanceListParameters.custVendTransAging);

        QueryBuildDataSource qbdsAgingCalculated = qbdsCustomers.addDataSource(tableNum(CustVendAgingCalculatedTmp));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, CurrencyCode));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, BillingClassification));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, InvoiceId));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, TransDate));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, Txt));
        qbdsAgingCalculated.addGroupByField(fieldNum(CustVendAgingCalculatedTmp, Voucher));
        qbdsAgingCalculated.cursor(custBalanceListParameters.custVendAgingCalculatedTmp);

        QueryBuildDataSource qbdsCustTmpAccountSum = qbdsAgingCalculated.addDataSource(tableNum(CustTmpAccountSum));
        qbdsCustTmpAccountSum.joinMode(JoinMode::NoExistsJoin);
        qbdsCustTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, CurrencyCode), fieldNum(CustTmpAccountSum, CurrencyCode));
        qbdsCustTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, BillingClassification), fieldNum(CustTmpAccountSum, BillingClassification));
        qbdsCustTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, InvoiceId), fieldNum(CustTmpAccountSum, InvoiceId));
        qbdsCustTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, TransDate), fieldNum(CustTmpAccountSum, TransDate));
        qbdsCustTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, Txt), fieldNum(CustTmpAccountSum, Txt));
        qbdsCustTmpAccountSum.addLink(fieldNum(CustVendAgingCalculatedTmp, Voucher), fieldNum(CustTmpAccountSum, Voucher));
        qbdsCustTmpAccountSum.addLink(fieldNum(CustVendTransAging, AccountNum), fieldNum(CustTmpAccountSum, AccountNum), qbdsCustomers.name());
        qbdsCustTmpAccountSum.cursor(custBalanceListParameters.custTmpAccountSum);

        q.clearAllFields();

        custAgingCalculatedDataSourceId = qbdsAgingCalculated.uniqueId();
        custVendTransAgingDataSourceId = qbdsCustomers.uniqueId();

        return q;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTargetCursor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets current context of <c>CustTmpAccountSum</c>.
    /// </summary>
    /// <returns>
    /// The <c>CustTmpAccountSum</c> table buffer.
    /// </returns>
    protected Common initTargetCursor()
    {
        CustTmpAccountSum custTmpAccountSum = custBalanceListParameters.custTmpAccountSum;
        custTmpAccountSum.skipDataMethods(true);
        return custTmpAccountSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CustTmpAccountSumFromCustBalanceList construct()
    {
        return new CustTmpAccountSumFromCustBalanceList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCustBalanceList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>CustTmpAccSumFromCustBalanceList</c> class.
    /// </summary>
    /// <param name = "_custBalanceListParameters">
    /// An instance of <c>CustBalanceListParameters</c> object.
    /// </param>
    /// <returns>
    /// The instantiated <c>CustTmpAccSumFromCustBalanceList</c> object.
    /// </returns>
    public static CustTmpAccountSumFromCustBalanceList newFromCustBalanceList(CustBalanceListParameters _custBalanceListParameters)
    {
        CustTmpAccountSumFromCustBalanceList instance = CustTmpAccountSumFromCustBalanceList::construct();
        instance.custBalanceListParameters = _custBalanceListParameters;
        return instance;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>