<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendPaymModeTableForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
using IFeature = Microsoft.Dynamics.ApplicationPlatform.FeatureExposure.Implementation.IFeature;
abstract class CustVendPaymModeTableForm
{
    CustVendPaymModeTable   paymModeTable;
    FormDataSource          paymModeTable_ds;

    FormDataObject          dataObjectBankTransType;
    FormDataObject          dataObjectInterCompanyLedgerDimension;
    FormDataObject          dataObjectExportOnInvoice;
    private FormDataObject dataObjectAccountType;

    FormTableControl        ctrlTablePaymValidation;
    FormTableControl        ctrlTablePaymAttributes;

    // Column numbers for the Table control. These must be updated if adding or removing columns
    // from the Table.
    protected static int TableColumnMarked = 1;
    protected static int TableColumnDescription = 2;
    protected static int TableColumnEnumValue = 3;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPaymAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a payment attribute to the list of selected attributes.
    /// </summary>
    /// <param name = "_paymAttributeEnumValue">The enum value of the payment attribute.</param>
    public abstract void addPaymAttribute(int _paymAttributeEnumValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPaymValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a payment validation to the list of selected validations.
    /// </summary>
    /// <param name = "_paymValidationEnumValue">The enum value of the payment validation.</param>
    public abstract void addPaymValidation(int _paymValidationEnumValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTableItems</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the items in the table that are already selected.
    /// </summary>
    /// <param name = "_table"><c>FormTableControl</c> that contains the items to check.</param>
    /// <param name = "_setOfActiveEnums"><c>Set</c> of items to check.</param>
    protected void checkTableItems(FormTableControl _table,
        Set _setOfActiveEnums)
    {
        int dataValue = 0;
        boolean isInSet = false;

        for (int currentRowIdx = 1; currentRowIdx <= _table.rows(); currentRowIdx++)
        {
            dataValue = _table.data(TableColumnEnumValue, currentRowIdx);
            isInSet = _setOfActiveEnums.in(dataValue);
            _table.cell(TableColumnMarked, currentRowIdx).data(isInSet);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUnsavedTableItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether an item can be marked.
    /// </summary>
    /// <param name = "_checkBoxControl"><c>FormCheckBoxControl</c> for the item that is being marked.</param>
    /// <returns>boolean value indicating whether the item could be marked.</returns>
    public boolean checkUnsavedTableItem(FormCheckBoxControl _checkBoxControl)
    {
        boolean ret = true;

        if (!paymModeTable.RecId)
        {
            if (!paymModeTable.validateWrite())
            {
                _checkBoxControl.checked(false);
                ret = false;
            }
            else
            {
                paymModeTable_ds.write();
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>datasourceActivePost</Name>
				<Source><![CDATA[
    public void datasourceActivePost()
    {
        this.enableFieldsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFieldsActive</Name>
				<Source><![CDATA[
    public void enableFieldsActive()
    {
        dataObjectBankTransType.allowEdit(paymModeTable.AccountType == LedgerJournalACType::Bank);
        dataObjectExportOnInvoice.allowEdit(paymModeTable.PaymOnInvoice == NoYes::Yes);

        if (FeatureStateProvider::isFeatureEnabled(BankBridgedTransAutoClearingFeature::instance()))
        {
            dataObjectInterCompanyLedgerDimension.allowEdit(paymModeTable.FurtherPosting && !paymModeTable.BridgingAccountByBank);
            dataObjectAccountType.allowEdit(!paymModeTable.FurtherPosting || !paymModeTable.BridgingAccountByBank);
        }
        else
        {
            dataObjectInterCompanyLedgerDimension.allowEdit(paymModeTable.FurtherPosting);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldLookupPaymJournal</Name>
				<Source><![CDATA[
    public void fieldLookupPaymJournal(FormControl _formControl)
    {
        Query                   query = new Query();
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        SysTableLookup          sysTableLookup = SysTableLookup::newParameters(tablenum(LedgerJournalName), _formControl);

        sysTableLookup.addLookupfield(fieldnum(LedgerJournalName, JournalName));
        sysTableLookup.addLookupfield(fieldnum(LedgerJournalName, Name));
        sysTableLookup.addLookupfield(fieldnum(LedgerJournalName, JournalType));

        queryBuildDataSource = query.addDataSource(tablenum(LedgerJournalName));
        queryBuildDataSource.addSortField(fieldnum(LedgerJournalName, JournalName));
        queryBuildRange      = queryBuildDataSource.addRange(fieldnum(LedgerJournalName, JournalType));

        queryBuildRange.value(this.queryRangePaymJournals());

        sysTableLookup.parmQuery(query);

        sysTableLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedAccountType</Name>
				<Source><![CDATA[
    public void fieldModifiedAccountType()
    {
        this.enableFieldsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedFurtherPosting</Name>
				<Source><![CDATA[
    public void fieldModifiedFurtherPosting()
    {
        this.enableFieldsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldModifiedPaymOnInvoice</Name>
				<Source><![CDATA[
    public void fieldModifiedPaymOnInvoice()
    {
        this.enableFieldsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    public void formInitPost(CustVendPaymModeTable _paymModeTable)
    {
        paymModeTable       = _paymModeTable;
        paymModeTable_ds    = FormDataUtil::getFormDataSource(_paymModeTable);

        this.initTableFromEnum(enumnum(PaymAttribute), ctrlTablePaymAttributes);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTableFromEnum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the values in the <c>FormTableControl</c> based on the available values defined in the
    /// provided enum.
    /// </summary>
    /// <param name = "_enumId"><c>enumId</c> of the enum.</param>
    /// <param name = "_tableControl"><c>FormTableControl</c> in which to populate the data.</param>
    protected void initTableFromEnum(enumId _enumId,
        FormTableControl _tableControl)
    {
        DictEnum                dictEnum = new DictEnum(_enumId);
        DictConfigurationKey    dictConfigurationKey;

        _tableControl.rows(dictEnum.values());

        // Loop through all available payment attributes and add them to the Table control
        for (int elements = 0; elements < dictEnum.values(); elements++)
        {
            dictConfigurationKey = new DictConfigurationKey(dictEnum.index2ConfigurationKey(elements));
            FeatureName featureClassName = dictEnum.index2FeatureClassName(elements);
            boolean isFeatureEnabledOrFeatureClassIsEmpty = true;

            if (featureClassName != '')
            {
                IFeature featureInstance = DictClass::createObject(featureClassName) as IFeature;
                isFeatureEnabledOrFeatureClassIsEmpty = FeatureStateProvider::isFeatureEnabled(featureInstance);
            }

            if ((!dictConfigurationKey || dictConfigurationKey.enabled())
                && isFeatureEnabledOrFeatureClassIsEmpty)
            {
                _tableControl.cell(TableColumnDescription, elements + 1).data(dictEnum.index2Name(elements));
                _tableControl.cell(TableColumnEnumValue, elements + 1).data(dictEnum.index2Value(elements));
            }
            else
            {
                _tableControl.rows(_tableControl.rows() - 1);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableColumnLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the column label for the payment control and attribute tables.
    /// </summary>
    /// <param name = "_column">Number of the column.</param>
    /// <returns>Label for the specified column.</returns>
    public str getTableColumnLabel(int _column)
    {
        switch (_column)
        {
            case 1:
                return "@SYS60755";

            case 2:
                return "@SYS6303";

            default:
                return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTablePaymAttributes</Name>
				<Source><![CDATA[
    public FormTableControl parmCtrlTablePaymAttributes(FormTableControl _ctrlTablePaymAttributes = ctrlTablePaymAttributes)
    {
        ctrlTablePaymAttributes = _ctrlTablePaymAttributes;

        return ctrlTablePaymAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlTablePaymValidation</Name>
				<Source><![CDATA[
    public FormTableControl parmCtrlTablePaymValidation(FormTableControl _ctrlTablePaymValidation = ctrlTablePaymValidation)
    {
        ctrlTablePaymValidation = _ctrlTablePaymValidation;

        return ctrlTablePaymValidation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataObjectBankTransType</Name>
				<Source><![CDATA[
    public FormDataObject parmDataObjectBankTransType(FormDataObject _dataObjectBankTransType = dataObjectBankTransType)
    {
        dataObjectBankTransType = _dataObjectBankTransType;

        return dataObjectBankTransType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataObjectExportOnInvoice</Name>
				<Source><![CDATA[
    public FormDataObject parmDataObjectExportOnInvoice(FormDataObject _dataObjectExportOnInvoice = dataObjectExportOnInvoice)
    {
        dataObjectExportOnInvoice = _dataObjectExportOnInvoice;

        return dataObjectExportOnInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataObjectInterCompLedgerDimension</Name>
				<Source><![CDATA[
    public FormDataObject parmDataObjectInterCompLedgerDimension(FormDataObject _dataObjectInterCompanyLedgerDimension = dataObjectInterCompanyLedgerDimension)
    {
        dataObjectInterCompanyLedgerDimension = _dataObjectInterCompanyLedgerDimension;

        return dataObjectInterCompanyLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDataObjectAccountType</Name>
				<Source><![CDATA[
    internal FormDataObject parmDataObjectAccountType(FormDataObject _dataObjectAccountType = dataObjectAccountType)
    {
        dataObjectAccountType = _dataObjectAccountType;

        return dataObjectAccountType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRangePaymJournals</Name>
				<Source><![CDATA[
    protected str queryRangePaymJournals()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePaymAttribute</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a payment attribute from the list of selected attributes.
    /// </summary>
    /// <param name = "_paymAttributeEnumValue">The enum value of the payment attribute.</param>
    public abstract void removePaymAttribute(int  _paymAttributeEnumValue)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePaymValidation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes a payment validation from the list of selected validations.
    /// </summary>
    /// <param name = "_paymValidationEnumValue">The enum value of the payment validation.</param>
    public abstract void removePaymValidation(int  _paymValidationEnumValue)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>