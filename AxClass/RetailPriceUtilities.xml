<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPriceUtilities</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>RetailPriceUtilities</c> contain the utility methods to calculate and get the Retail price
/// based on the items and store selected.
/// </summary>
class RetailPriceUtilities
{
    str lastDiscOffer;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcComparisonPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the comparison sales price for the item selected.
    /// </summary>
    /// <param name="_itemId">
    /// The current value of Item ID for which the sales price to be calculated.
    /// </param>
    /// <param name="_basePrice">
    /// Compare with the base price of the item.
    /// </param>
    /// <returns>
    /// Calculated price for the item if the item unit can be converted, otherwise; 0.
    /// </returns>
    static real calcComparisonPrice(ItemId _itemId, real _basePrice)
    {
        //ATH
        RetailInventTable rboInventTable = RetailInventTable::find(_itemId);
        UnitOfMeasureRecId unitFrom = UnitOfMeasure::unitOfMeasureIDBySymbol(rboInventTable.baseComparisonUnitCode);
        UnitOfMeasureRecId unitTo = UnitOfMeasure::unitOfMeasureIDBySymbol(InventTableModule::find(_itemId, ModuleInventPurchSales::Sales).UnitId);
                                    
        if (UnitOfMeasureConverter::canBeConverted(unitTo, unitFrom))
        {
            return UnitOfMeasureConverter::convert(_basePrice, unitFrom, unitTo, NoYes::No);
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValidationPeriodOverlap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the validation period passed as parameter overlaps.
    /// </summary>
    /// <param name="_perA">
    /// The string value for the period1.
    /// </param>
    /// <param name="_perB">
    /// The string value for the period2.
    /// </param>
    /// <returns>
    /// true if either of periods are null, otherwise check for the period overlap.
    /// </returns>
    /// <remarks>
    /// Calls the method <c>doValidationPeriodOverlapCheck</c> for the periods.
    /// </remarks>
    static boolean checkValidationPeriodOverlap(str 10 _perA, str 10 _perB)
    {
        RetailDiscountValidationPeriod periodA,periodB;

        if (_perA != "")
            periodA = RetailDiscountValidationPeriod::find(_perA);
        else
            return true;

        if (_perB != "")
            periodB = RetailDiscountValidationPeriod::find(_perB);
        else
            return true;

        return RetailPriceUtilities::doValidationPeriodOverlapCheck(periodA,periodB);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doValidationPeriodOverlapCheck</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks for the overlap of the periods passed as parameters.
    /// </summary>
    /// <param name="_periodA">
    /// The current instance of <c>RetailDiscountValidationPeriod</c> for period1.
    /// </param>
    /// <param name="_periodB">
    /// The current instance of <c>RetailDiscountValidationPeriod</c> for period2.
    /// </param>
    /// <returns>
    /// True.
    /// </returns>
    static boolean doValidationPeriodOverlapCheck(RetailDiscountValidationPeriod _periodA, RetailDiscountValidationPeriod _periodB)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidRetailPrice2</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the price from one unit of measure to another.
    /// </summary>
    /// <param name="_storeId">
    /// The current value of Store ID.
    /// </param>
    /// <param name="_itemId">
    /// The current value of Item ID.
    /// </param>
    /// <param name="_dateValid">
    /// The current date.
    /// </param>
    /// <param name="_timeVal">
    /// The current time of day.
    /// </param>
    /// <param name="_salesUOM">
    /// The unit to be converted from.
    /// </param>
    /// <param name="_variant">
    /// The current value of the variant of the item.
    /// </param>
    /// <returns>
    /// The converted price from one unit of measure to another.
    /// </returns>
    static real getValidRetailPrice2(RetailStoreId _storeId,ItemId _itemId,Date _dateValid,timeOfDay _timeVal,UnitOfMeasureSymbol _salesUOM,RetailVariantId _variant)
    {
        InventTableModule   inventTableModule = InventTableModule::find(_itemId,ModuleInventPurchSales::Sales);

        return UnitOfMeasureConverter::convert(inventTableModule.price,
                                               UnitOfMeasure::unitOfMeasureIDBySymbol(_salesUOM),
                                               UnitOfMeasure::unitOfMeasureIDBySymbol(inventTableModule.UnitId),
                                               NoYes::No);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>