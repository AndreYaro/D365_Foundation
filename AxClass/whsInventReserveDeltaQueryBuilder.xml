<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>whsInventReserveDeltaQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInvBatchReserveDeltaQueryBuilder</c> class is used to build a<c>Query</c> for selecting quantities and dimensions for reservation from the <c>WHSInventReserveDeltaAggrReserveView</c> view.
/// </summary>
class whsInventReserveDeltaQueryBuilder extends WHSInventReservationQueryBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addWHSInventReserveDeltaAggrReserveView</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds and returns a datasource for the <c>WHSInventReserveDeltaAggrReserveView</c> view.
    /// </summary>
    /// <param name="_parentQBDS">
    /// The parent datasource that the <c>WHSInvnetReserveDeltaAggrReserveView</c> view datasource should be added to.
    /// If not passed in then the datasource is added to the top of the global query.
    /// </param>
    /// <returns>
    /// A datasource for the <c>WHSInventReserveDeltaAggrReserveView</c> view.
    /// </returns>
    protected QueryBuildDataSource addWHSInventReserveDeltaAggrReserveView(QueryBuildDataSource _parentQBDS = null)
    {
        QueryBuildDataSource    qbdsDeltaAggrView;
        str                     availRange;

        if (_parentQBDS)
        {
            qbdsDeltaAggrView = _parentQBDS.addDataSource(tableNum(WHSInventReserveDeltaAggrReserveView));
            qbdsDeltaAggrView.joinMode(JoinMode::InnerJoin);
        }
        else
        {
            qbdsDeltaAggrView = query.addDataSource(tableNum(WHSInventReserveDeltaAggrReserveView));
        }

        qbdsDeltaAggrView.addRange(fieldNum(WHSInventReserveDeltaAggrReserveView,ItemId)).value(queryValue(itemId));
        qbdsDeltaAggrView.addRange(fieldNum(WHSInventReserveDeltaAggrReserveView,HierarchyLevel)).value(queryValue(reservationHierarchyLevel));
        qbdsDeltaAggrView.addRange(fieldNum(WHSInventReserveDeltaAggrReserveView,ttsId)).value(queryValue(ttsId));

        // Min avail is either specified by parameters or greater than zero if unspecified.
        availRange = this.getAvailRange();

        if (includeOrdered)
        {
            if (includePhysical)
            {
                //the availOrdered includes the contribution from availphysical so we don't need to check both fields
                qbdsDeltaAggrView.addRange(fieldNum(WHSInventReserveDeltaAggrReserveView, AvailOrdered)).value(availRange);
            }
            else
            {
                // If we are not including physical avail then we can filter out all records where availOrdered isn't greater than availPHysical.
                // AvailOrdered bucket includes availPhysical
                qbdsDeltaAggrView.addRange(fieldNum(WHSInventReserveDeltaAggrReserveView, AvailOrdered)).value(strFmt('(%1.%2 > %1.%3)',
                                                                                                               qbdsDeltaAggrView.name(),
                                                                                                               fieldStr(WHSInventReserveDeltaAggrReserveView, AvailOrdered),
                                                                                                               fieldStr(WHSInventReserveDeltaAggrReserveView, AvailPhysical)));
            }
        }
        else if (includePhysical)
        {
            qbdsDeltaAggrView.addRange(fieldNum(WHSInventReserveDeltaAggrReserveView, AvailPhysical)).value(availRange);
        }
        else
        {
            // The query must either include Ordered or include Physical avail
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        return qbdsDeltaAggrView;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOnHandQuery</Name>
				<Source><![CDATA[
    public Query buildOnHandQuery()
    {
        QueryBuildDataSource qbdsWHSInventReserveDeltaAggrReserveView;

        this.initQuery();

        qbdsWHSInventReserveDeltaAggrReserveView = this.addWHSInventReserveDeltaAggrReserveView();

        this.addInventDimDS(qbdsWHSInventReserveDeltaAggrReserveView);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sumTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the tableId of the <c>WHSInventReserveDeltaAggrReserveView</c> view.
    /// </summary>
    /// <returns>
    /// The tableId of the <c>WHSInventReserveDeltaAggrReserveView</c> view.
    /// </returns>
    public TableId sumTableId()
    {
        return tableNum(WHSInventReserveDeltaAggrReserveView);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSInventReserveDeltaQueryBuilder construct()
    {
        return new WHSInventReserveDeltaQueryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSInventReserveDeltaQueryBuilder</c> instance from given parameters.
    /// </summary>
    /// <param name="_itemId">
    /// Item id.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// Dimensions criteria.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// Determines which dimensions are included.
    /// </param>
    /// <param name="_reservationHierarchyLevel">
    /// Reservation hierarchy level.
    /// </param>
    /// <param name="_ttsId">
    /// Created transaction id.
    /// </param>
    /// <param name="_includeOrdered">
    /// Determines whether ordered quantity is included.
    /// </param>
    /// <param name="_includePhysical">
    /// Determines whether physical quantity is included.
    /// </param>
    /// <param name="_sortByBatch">
    /// Determines whether the result is sorted by batch number.
    /// </param>
    /// <param name="_onlyReserveOnWHSEnabledWarehouses">
    /// Whether to allow reservation on non-WHS enabled warehouses.
    /// </param>
    /// <returns>
    /// The <c>WHSInventReserveDeltaQueryBuilder</c> instance with the parameters.
    /// </returns>
    public static WHSInventReserveDeltaQueryBuilder newFromParameters(
        ItemId                          _itemId,
        InventDim                       _inventDimCriteria,
        InventDimParm                   _inventDimParmCriteria,
        WHSReservationHierarchyLevel    _reservationHierarchyLevel,
        CreatedTransactionId            _ttsId,
        boolean                         _includeOrdered,
        boolean                         _includePhysical,
        boolean                         _sortByBatch,
        boolean                         _onlyReserveOnWHSEnabledWarehouses = false)
    {
        WHSInventReserveDeltaQueryBuilder whsInventReserveDeltaQueryBuilder = WHSInventReserveDeltaQueryBuilder::construct();

        whsInventReserveDeltaQueryBuilder.initializeFromParameters(
            _itemId,
            _inventDimCriteria,
            _inventDimParmCriteria,
            _reservationHierarchyLevel,
            _ttsId,
            _includeOrdered,
            _includePhysical,
            _onlyReserveOnWHSEnabledWarehouses);

        whsInventReserveDeltaQueryBuilder.parmSortByBatch(_sortByBatch);

        return whsInventReserveDeltaQueryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the current class instance from parameters.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID to select on-hand for.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// An <c>InventDimParm</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_reservationHierarchyLevel">
    /// The reservation level that should be used when selecting on-hand.
    /// </param>
    /// <param name="_ttsId">
    /// Current transaction ID.
    /// </param>
    /// <param name="_includeOrdered">
    /// A boolean indicating whether available ordered should be included.
    /// </param>
    /// <param name="_includePhysical">
    /// A boolean indicating whether available physical should be included.
    /// </param>
    /// <param name="_onlyReserveOnWHSEnabledWarehouses">
    /// A boolean indicating whether only advanced warehousing enabled warehouses should be reserved on.
    /// </param>
    protected void initializeFromParameters(
        ItemId                          _itemId,
        InventDim                       _inventDimCriteria,
        InventDimParm                   _inventDimParmCriteria,
        WHSReservationHierarchyLevel    _reservationHierarchyLevel,
        CreatedTransactionId            _ttsId,
        boolean                         _includeOrdered,
        boolean                         _includePhysical,
        boolean                         _onlyReserveOnWHSEnabledWarehouses)
    {
        this.parmItemId(_itemId);
        this.parmInventDimCriteria(_inventDimCriteria);
        this.parmInventDimParmCriteria(_inventDimParmCriteria);
        this.parmReservationHierarchyLevel(_reservationHierarchyLevel);
        this.parmTtsId(_ttsId);
        this.parmIncludeOrdered(_includeOrdered);
        this.parmIncludePhysical(_includePhysical);
        this.parmOnlyReserveOnWHSEnabledWarehouses(_onlyReserveOnWHSEnabledWarehouses);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>