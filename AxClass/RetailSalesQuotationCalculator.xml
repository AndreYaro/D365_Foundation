<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSalesQuotationCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
using CrtSalesTransaction = Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesTransaction;
using CrtSalesLine = Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine;
using CrtDiscountLine = Microsoft.Dynamics.Commerce.Runtime.DataModel.DiscountLine;

/// <summary>
/// Retail Sales order calculator.
/// </summary>
class RetailSalesQuotationCalculator extends RetailOrderCalculator
{
    QuotationId quotationId;
    SalesQuotationLine currentSalesQuotationLine;
    RetailSalesQuotationLine currentRetailSalesQuotationLine;

    SalesQuotationTable salesQuotationTable;
    RetailSalesQuotationTable retailSalesQuotationTable;

    RetailPriceOverrideWorkflowHelper retailPriceOverrideWorkflowHelper = RetailPriceOverrideWorkflowHelper::construct();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fixCurrentLineInRetailTmpOrderItemLegacy</Name>
				<Source><![CDATA[
    private void fixCurrentLineInRetailTmpOrderItemLegacy()
    {
        UserId userId = curUserId();
        ItemId currentItemId = currentSalesQuotationLine.ItemId;
        RetailValidationId currentRetailVariantId = currentSalesQuotationLine.RetailVariantId;

        // The current quotation line may not have been saved yet.
        if (currentRetailVariantId)
        {
            select firstOnly RecId from tempOrderItem
            where tempOrderItem.ItemId == currentItemId
            && tempOrderItem.retailVariantId == currentRetailVariantId;
            
            if (!tempOrderItem.RecId)
            {
                tempOrderItem.clear();
                tempOrderItem.ItemId = currentItemId;
                tempOrderItem.retailVariantId = currentRetailVariantId;
                tempOrderItem.LineNum = currentSalesQuotationLine.LineNum;
                
                tempOrderItem.insert();
            }
        }
        else if (currentItemId)
        {
            select firstOnly RecId from tempOrderItem
                where tempOrderItem.ItemId == currentItemId;
            
            if (!tempOrderItem.RecId)
            {
                tempOrderItem.clear();
                tempOrderItem.ItemId = currentItemId;
                tempOrderItem.LineNum = currentSalesQuotationLine.LineNum;
                
                tempOrderItem.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixCurrentLineInRetailTmpOrderItemWithSearchCriteria</Name>
				<Source><![CDATA[
    private void fixCurrentLineInRetailTmpOrderItemWithSearchCriteria()
    {
        UserId userId = curUserId();
        ItemId currentItemId = currentSalesQuotationLine.ItemId;
        RetailValidationId currentRetailVariantId = currentSalesQuotationLine.RetailVariantId;
        InventDim currentInventDim = InventDim::find(currentSalesQuotationLine.InventDimId);
        str currentInventSiteId = currentInventDim.InventSiteId;
        str currentInventLocationId = currentInventDim.InventLocationId;

        // The current quotation line may not have been saved yet.
        if (currentRetailVariantId)
        {
            select firstOnly RecId from tempOrderItem
                where tempOrderItem.ItemId == currentItemId
                    && tempOrderItem.retailVariantId == currentRetailVariantId
                    && tempOrderItem.InventSiteId == currentInventSiteId
                    && tempOrderItem.InventLocationId == currentInventLocationId;

            if (!tempOrderItem.RecId)
            {
                tempOrderItem.clear();
                tempOrderItem.ItemId = currentItemId;
                tempOrderItem.retailVariantId = currentRetailVariantId;
                tempOrderItem.InventSiteId = currentInventSiteId;
                tempOrderItem.InventLocationId = currentInventLocationId;
                tempOrderItem.LineNum = currentSalesQuotationLine.LineNum;

                tempOrderItem.insert();
            }
        }
        else if (currentItemId)
        {
            select firstOnly RecId from tempOrderItem
                where tempOrderItem.ItemId == currentItemId
                    && tempOrderItem.InventSiteId == currentInventSiteId
                    && tempOrderItem.InventLocationId == currentInventLocationId;

            if (!tempOrderItem.RecId)
            {
                tempOrderItem.clear();
                tempOrderItem.ItemId = currentItemId;
                tempOrderItem.InventSiteId = currentInventSiteId;
                tempOrderItem.InventLocationId = currentInventLocationId;
                tempOrderItem.LineNum = currentSalesQuotationLine.LineNum;

                tempOrderItem.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCrtTransactionInstanceVariable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the channel retail table (CRT) instance variable.
    /// </summary>
    internal protected void initializeCrtTransactionInstanceVariable()
    {
        if (retailSalesQuotationTable.RetailChannel == 0)
        {
            crtSalesTransaction = null;
        }
        else
        {
            crtSalesTransaction = this.initializeCrtTransaction();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculationResult</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal protected RetailSalesOrderCalculatorResult getCalculationResult()
    {
        CrtSalesLine crtSalesLine;
        CLRObject clrSalesLines, enumeratorSalesLine;
        CrtDiscountLine crtDiscountLine;
        CLRObject clrDiscountLines, enumeratorDiscountLine;
        Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceLine crtPriceLine;
        CLRObject clrPriceLines, enumeratorPriceLine;
        int crtDiscountType;
        int crtCustomerDiscountType;
        int crtManualDiscountType;
        str crtOfferId;
        RetailDiscountBundleId bundleId;

        RetailSalesQuotationLine retailSalesQuotationLineLocal;
        RetailSalesQuotationDiscountLine discountLine;
        RetailSalesQuotationPriceAdjustmentLine adjustmentLine;

        str lineId;
        InventTransId inventTransId;
        Price oldPrice, newPrice, dealPrice;
        DiscAmount discountAmount, unitDiscount, periodicDiscount, lineManualDiscountAmount, totalDiscount, lineDiscount;
        DiscPct percentageDiscount, periodicDiscountPercentage, lineManualDiscountPercent, totalDiscountPercent, linePercentageDiscount;
        int newLineCount;
        int oldDiscountCount, newDiscountCount;
        RetailSalesOrderCalculatorResult result = new RetailSalesOrderCalculatorResult();
        boolean requireRecalculation = false;

        CrtDiscountLine fineCrtDiscountLine(
            CLRObject _clrDiscountLines,
            int _discountType,
            int _customerDiscountType,
            int _manualDiscountType,
            RetailOfferIdEx3 _offerId)
        {
            CrtDiscountLine crtDiscountLineLocal, ret = null;

            enumeratorDiscountLine = _clrDiscountLines.GetEnumerator();
            while (enumeratorDiscountLine.MoveNext())
            {
                crtDiscountLineLocal = enumeratorDiscountLine.get_Current();
                crtDiscountType = crtDiscountLineLocal.get_DiscountLineTypeValue();
                crtCustomerDiscountType = crtDiscountLineLocal.get_CustomerDiscountTypeValue();
                crtManualDiscountType = crtDiscountLineLocal.get_ManualDiscountTypeValue();
                crtOfferId = crtDiscountLineLocal.get_OfferId();

                if (_discountType == crtDiscountType &&
                    _customerDiscountType == crtCustomerDiscountType &&
                    _manualDiscountType == crtManualDiscountType &&
                    _offerId == crtOfferId)
                {
                    ret = crtDiscountLineLocal;
                    break;
                }
            }

            return ret;
        }

        clrSalesLines = crtSalesTransaction.get_SalesLines();

        newLineCount = clrSalesLines.get_Count();

        requireRecalculation = (newLineCount != lineCount);

        enumeratorSalesLine = clrSalesLines.GetEnumerator();
        while (enumeratorSalesLine.MoveNext())
        {
            crtSalesLine = enumeratorSalesLine.get_Current();
            lineId = crtSalesLine.get_LineId();

            if (lineId != crtLineIdCurrentLine)
            {
                if (!requireRecalculation)
                {
                    newPrice = crtSalesLine.get_Price();
                    oldPrice = existingPricesExceptCurrentLine.lookup(lineId);
                    requireRecalculation = (newPrice != oldPrice);
                }

                if (!requireRecalculation)
                {
                    oldDiscountCount = 0;
                    inventTransId = lineId;
                    clrDiscountLines = crtSalesLine.get_DiscountLines();
                    newDiscountCount = clrDiscountLines.get_Count();
                    while select discountLine
                        where discountLine.InventTransId == inventTransId
                    {
                        oldDiscountCount++;

                        crtDiscountLine = fineCrtDiscountLine(clrDiscountLines, discountLine.DiscountOriginType, discountLine.CustomerDiscountType, discountLine.ManualDiscountType, discountLine.PeriodicDiscountOfferId);
                        requireRecalculation = (crtDiscountLine == null);

                        if (!requireRecalculation)
                        {
                            discountAmount = crtDiscountLine.get_EffectiveAmount();
                            requireRecalculation = (discountLine.Amount != discountAmount);
                        }

                        if (requireRecalculation)
                        {
                            break; // break while select discountLine
                        }
                    }

                    if (!requireRecalculation)
                    {
                        requireRecalculation = (newDiscountCount != oldDiscountCount);
                    }
                }
            }
            else
            {
                periodicDiscount = crtSalesLine.get_PeriodicDiscount();
                periodicDiscountPercentage = crtSalesLine.get_PeriodicPercentageDiscount();
                lineManualDiscountAmount = crtSalesLine.get_LineManualDiscountAmount();
                lineManualDiscountPercent = crtSalesLine.get_LineManualDiscountPercentage();
                totalDiscount = crtSalesLine.get_TotalDiscount();
                totalDiscountPercent = crtSalesLine.get_TotalPercentageDiscount();
                lineDiscount = crtSalesLine.get_LineDiscount();
                linePercentageDiscount = crtSalesLine.get_LinePercentageDiscount();

                retailSalesQuotationLineLocal.clear();
                retailSalesQuotationLineLocal.PeriodicDiscount = periodicDiscount;
                retailSalesQuotationLineLocal.PeriodicPercentageDiscount = periodicDiscountPercentage;
                retailSalesQuotationLineLocal.LineManualDiscountAmount = lineManualDiscountAmount;
                retailSalesQuotationLineLocal.LineManualDiscountPercentage = lineManualDiscountPercent;
                retailSalesQuotationLineLocal.TotalDiscount = totalDiscount;
                retailSalesQuotationLineLocal.TotalPctDiscount = totalDiscountPercent;
                retailSalesQuotationLineLocal.LineDscAmount = lineDiscount;
                retailSalesQuotationLineLocal.LinePercentageDiscount = linePercentageDiscount;

                result.parmRetailSalesQuotationLine(retailSalesQuotationLineLocal);

                clrDiscountLines = crtSalesLine.get_DiscountLines();
                enumeratorDiscountLine = clrDiscountLines.GetEnumerator();
                while (enumeratorDiscountLine.MoveNext())
                {
                    crtDiscountLine = enumeratorDiscountLine.get_Current();
                    discountLine = this.initDiscountLineFromCrtDiscountLine(crtDiscountLine);
                    result.addRetailSalesDiscountLine(discountLine);
                }

                clrPriceLines = crtSalesLine.get_PriceLines();
                enumeratorPriceLine = clrPriceLines.GetEnumerator();
                // add all the price adjustment lines related to the sales quotation line to the calculator result
                while (enumeratorPriceLine.MoveNext())
                {
                    crtPriceLine = enumeratorPriceLine.get_Current();

                    if(crtPriceLine is Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustmentPriceLine)
                    {
                        adjustmentLine = this.initRetailSalesPriceAdjustmentLineMap(adjustmentLine, currentSalesQuotationLine, crtPriceLine);
                        result.addRetailSalesPriceAdjustmentLine(adjustmentLine);
                    }
                }
            }
        }

        result.parmInventTransId(currentSalesQuotationLine.InventTransId);
        result.parmNeedsRecalculateWholeOrder(requireRecalculation);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForDataManagerPerformance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a temporary table for data manager performance.
    /// </summary>
    protected void initializeForDataManagerPerformance()
    {
        InventTable inventTable;
        InventDimCombination inventDimCombination;
        UserId userId = curUserId();

        if (tmpOrderItemInitialized)
        {
            return;
        }
        
        this.initTempOrderItem();

        this.fixCurrentLineInRetailTmpOrderItem();
        
        update_recordSet tempOrderItem
            setting Product = inventTable.Product,
                    Variant = inventDimCombination.DistinctProductVariant,
                    InventDimId = inventDimCombination.InventDimId
        join inventTable
            where tempOrderItem.ItemId == inventTable.ItemId
        outer join inventDimCombination
            where tempOrderItem.retailVariantId == inventDimCombination.RetailVariantId
                && tempOrderItem.retailVariantId;

        // If the feature is enabled, we need the Product to be the variant product id.
        if (RetailPricingFeatureToggle::shouldUseRetailPricingDataManagerV3())
        {
            update_recordSet tempOrderItem
                setting Product = inventDimCombination.DistinctProductVariant
                join inventDimCombination
                    where tempOrderItem.retailVariantId == inventDimCombination.RetailVariantId
                        && tempOrderItem.retailVariantId;
        }
        
        tmpOrderItemInitialized = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempOrderItem</Name>
				<Source><![CDATA[
    protected void initTempOrderItem()
    {
        SalesQuotationLine salesQuotationLineLocal;
        InventDim inventDim;

        if (RetailPricingDisableGetPriceTradeAgreementsBySearchCriteriaFlight::instance().isEnabled())
        {
            insert_recordset tempOrderItem(itemId, RetailVariantId, LineNum)
                select ItemId, RetailVariantId, LineNum from salesQuotationLineLocal
                    group by ItemId, RetailVariantId, LineNum
                        where salesQuotationLineLocal.QuotationId == quotationId;
        }
        else
        {
            try
            {
                insert_recordset tempOrderItem(itemId, retailVariantId, inventDimId, LineNum, InventSiteId, InventLocationId)
                    select ItemId, RetailVariantId, inventDimId, LineNum from salesQuotationLineLocal
                        group by ItemId, RetailVariantId, inventDimId, LineNum
                            where salesQuotationLineLocal.QuotationId == quotationId
                    join InventSiteId, InventLocationId from inventDim
                        group by InventSiteId, InventLocationId
                            where salesQuotationLineLocal.InventDimId == inventDim.inventDimId;
            }
            catch (Exception::Error)
            {
                throw error("@RetailPricing:InvalidInventDimIds");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fixCurrentLineInRetailTmpOrderItem</Name>
				<Source><![CDATA[
    protected void fixCurrentLineInRetailTmpOrderItem()
    {
        if (RetailPricingDisableGetPriceTradeAgreementsBySearchCriteriaFlight::instance().isEnabled())
        {
            this.fixCurrentLineInRetailTmpOrderItemLegacy();
        }
        else
        {
            this.fixCurrentLineInRetailTmpOrderItemWithSearchCriteria();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCrtTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize Crt transaction
    /// </summary>
    /// <returns>
    /// Crt transaction.
    /// </returns>
    protected CrtSalesTransaction initializeCrtTransaction()
    {
        lineIdToInventTransIdMap = new Map(Types::String, Types::String);

        CrtSalesTransaction crtSalesTransactionLocal;
        utcDateTime sessionDateTime = DateTimeUtil::getSystemDateTime();
        SalesParameters salesParameters = SalesParameters::find();
        RetailParameters retailParameters = RetailParameters::find();

        lineDisc = salesQuotationTable.LineDisc;
        multilineDisc = salesQuotationTable.MultiLineDisc;
        endDisc = salesQuotationTable.EndDisc;

        var currencyCode = currentSalesQuotationLine.CurrencyCode != '' ? currentSalesQuotationLine.CurrencyCode : salesQuotationTable.CurrencyCode;

        this.initializeCrt(retailSalesQuotationTable.RetailChannel, salesQuotationTable.CustAccount, currencyCode, sessionDateTime);

        crtSalesTransactionLocal = this.getSalesTransaction(salesQuotationTable, currentSalesQuotationLine, lineIdToInventTransIdMap);
        crtSalesTransactionLocal.set_IsTaxIncludedInPrice(priceIncludesTax);
        crtSalesTransactionLocal.set_IsTaxExemptedForPriceInclusive(exemptTaxesForPriceInclusive);

        return crtSalesTransactionLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(QuotationId _quotationId, SalesQuotationLine _currentSalesQuotationLine)
    {
        QuotationId = _quotationId;

        currentSalesQuotationLine = _currentSalesQuotationLine;

        currentInventTransId = _currentSalesQuotationLine.InventTransId;
        currentRetailSalesQuotationLine = currentSalesQuotationLine.retailSalesQuotationLine();

        if (RetailPricingCalcBulkInsertTempTableFlight::instance().isEnabled())
        {
            salesQuotationTable = SalesQuotationTable::find(quotationId);
            retailSalesQuotationTable = RetailSalesQuotationTable::findSalesQuotationTable(salesQuotationTable);
        }
        else
        {
            select firstonly salesQuotationTable
                where salesQuotationTable.QuotationId == quotationId
                join retailSalesQuotationTable
                    where retailSalesQuotationTable.SalesQuotationTable == salesQuotationTable.RecId;
        }

        priceCalculated = false;
        discountCalculated = false;

        crtSalesTransaction = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesTransaction</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal protected CrtSalesTransaction getSalesTransaction(
        SalesPurchTable _salesTable,
        SalesPurchLine _newSalesLine = null,
        Map _lineIdMap = new Map(Types::String, Types::String))
    {
        return RetailPricingEngineHelper::getSalesTransactionFromOrder(_salesTable, _newSalesLine, _lineIdMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveSalesQuote</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal protected void saveSalesQuote()
    {
        CLRObject clrSalesLines, enumeratorSalesLine;
        SalesQuotationLine salesQuotationLine;
        RecordInsertList discountRecordList = new RecordInsertList(tableNum(RetailSalesQuotationDiscountLine));
        RecordInsertList adjustmentRecordList = new RecordInsertList(tableNum(RetailSalesQuotationPriceAdjustmentLine));

        if (!priceCalculated || !discountCalculated)
        {
            return;
        }

        clrSalesLines = crtSalesTransaction.get_SalesLines();
        enumeratorSalesLine = clrSalesLines.GetEnumerator();
        ttsBegin;

        // Remove all discount and price history.
        this.deletePriceAndDiscountHistory();

        while (enumeratorSalesLine.MoveNext())
        {
            CrtSalesLine crtSalesLine = enumeratorSalesLine.get_Current();
            RetailSalesQuotationLine retailSalesQuotationLineLocal;
            [salesQuotationLine, retailSalesQuotationLineLocal] = this.createOrUpdateSalesQuotationLine(crtSalesLine);

            this.createDiscountRecords(discountRecordList, crtSalesLine, salesQuotationLine);

            if (!RetailPreservePriceHistoryFlight::instance().isEnabled() || this.shouldUpdatePriceHistoryForSalesQuotationLine(salesQuotationLine, retailSalesQuotationLineLocal))
            {    
                this.createPriceAdjustmentRecords(adjustmentRecordList, crtSalesLine, salesQuotationLine);
            }
        }

        discountRecordList.insertDatabase();
        adjustmentRecordList.insertDatabase();
        this.updateSalesQuotationTable();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailOrderLineMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes sales quotation line buffer.
    /// </summary>
    /// <param name = "_originalSalesQuotationLine">Original sales quotation line.</param>
    /// <param name = "_crtSalesLine">CRT sales line.</param>
    /// <returns>Sales quotation line.</returns>
    public RetailOrderLineMap initRetailOrderLineMap(RetailOrderLineMap _originalSalesQuotationLine, CrtSalesLine _crtSalesLine )
    {
        SalesQuotationLine salesQuotationLine;
        salesQuotationLine.QuotationId = salesQuotationTable.QuotationId;
        salesQuotationLine.initFromSalesQuotationLine(_originalSalesQuotationLine, true, true, true, _crtSalesLine.get_Quantity());

        if (!RetailPricingKillSwitch::disableCopyOtherFieldsDuringLineSplit())
        {
            salesQuotationLine.ShippingDateRequested = _originalSalesQuotationLine.ShippingDateRequested;
            salesQuotationLine.ReceiptDateRequested = _originalSalesQuotationLine.ReceiptDateRequested;

            salesQuotationLine.CurrencyCode = _originalSalesQuotationLine.CurrencyCode;
        }

        salesQuotationLine.SalesPrice = _crtSalesLine.get_Price();;
        salesQuotationLine.LineDisc = this.getUnitDiscountAmount(_crtSalesLine);
        salesQuotationLine.setLineAmount();
        return salesQuotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePriceAndDiscountOnSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the price and discount on the sales quotation line.
    /// </summary>
    /// <param name = "_salesQuotationLine">Sales quotaion line.</param>
    /// <param name = "_crtSalesLine">CRT sales line.</param>
    protected void updatePriceAndDiscountOnSalesQuotationLine(SalesQuotationLine _salesQuotationLine, CrtSalesLine _crtSalesLine)
    {
        Qty qty = _crtSalesLine.get_Quantity();
        if (qty != _salesQuotationLine.SalesQty)
        {
            _salesQuotationLine.SalesQty = qty;
        }
        _salesQuotationLine.SalesPrice = _crtSalesLine.get_Price();
        _salesQuotationLine.LineDisc = this.getUnitDiscountAmount(_crtSalesLine);
        _salesQuotationLine.setLineAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findQuotationLineAndRelatedTables</Name>
				<Source><![CDATA[
    private static SalesQuotationLine findQuotationLineAndRelatedTables(InventTransId _inventTransId)
    {
        SalesQuotationLine quotationLine;
        RetailSalesQuotationLine retailQuotationLine;

        select firstonly forupdate quotationLine
            where quotationLine.InventTransId == _inventTransId
        outer join retailQuotationLine
            where retailQuotationLine.SalesQuotationLine == quotationLine.RecId;
        
        quotationLine.SysExtensionSerializerMap::packExtensionTable(retailQuotationLine);

        return quotationLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDiscountOnCurrentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set discount on current line.
    /// </summary>
    public void setDiscountOnCurrentLine()
    {
        using(var t = RetailPricingTimedEventInstrumentation::construct(
            classstr(RetailSalesQuotationCalculator), methodStr(RetailSalesQuotationCalculator, setDiscountOnCurrentLine)))
        {
            t.addExtendedData(RetailPricingInstrumentationSegmentConstants::TableName, tableStr(salesQuotationTable));
            t.addExtendedData(RetailPricingInstrumentationSegmentConstants::RecordId, int642Str(salesQuotationTable.RecId));
            this.setEngineAndDataAccessorInfoInTelemetry(t.getExtendDataMap());

            RetailParameters retailParameters = RetailParameters::find();
            boolean calculateSimpleDiscountOnly = retailParameters.EnableDelayedPriceAndDiscountCalculation == NoYes::Yes;
            t.addExtendedData('calculateSimpleDiscountOnly', int2Str(calculateSimpleDiscountOnly));

            currentSalesQuotationLine.LineDisc = this.getDiscountOnCurrentLineV2(calculateSimpleDiscountOnly);

            // Update calculation result on RetailSalesTable.
            ttsBegin;
            retailSalesQuotationTable = RetailSalesQuotationTable::find(salesQuotationTable.QuotationId, true);
            retailSalesQuotationTable.TmpPriceDiscountData = this.getCalculationResult().pack();

            // Requires later recalculation on the whole order when only simple discount is considered on the current line.
            retailSalesQuotationTable.IsPriceAndDiscountRecalculationRequired = calculateSimpleDiscountOnly;

            retailSalesQuotationTable.update();
            ttsCommit;

            t.parmIsSuccessful(true);
            t.parmRowCount(lineCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTransactionForShippingDiscCalcOnOrder</Name>
				<Source><![CDATA[
    protected void prepareTransactionForShippingDiscCalcOnOrder(CLRObject _clrSalesLinesWithDlvMode)
    {
        CLRObject transactionSalesLine = crtSalesTransaction.get_SalesLines();
        transactionSalesLine.clear();

        CLRObject enumeratorSalesLine = _clrSalesLinesWithDlvMode.GetEnumerator();
        while (enumeratorSalesLine.MoveNext())
        {
            CrtSalesLine crtSalesLine = enumeratorSalesLine.get_Current();
            SalesQuotationLine quoteLine = SalesQuotationLine::findInventTransId(crtSalesLine.get_LineId());

            if (quoteLine)
            {
                crtSalesLine.set_Price(crtSalesLine.get_Price() - quoteLine.discAmount());
            }

            transactionSalesLine.add(crtSalesLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyShippingDiscountToOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies a discount pct to misc. charges to sales order shipping charges.
    /// </summary>
    /// <param name = "_dlvModeId">The delivery mode.</param>
    /// <param name = "_discPct">The discount percentage.</param>
    /// <param name = "_offerId">The shipping discount offer id.</param>
    /// <param name = "_offerName">The shipping discount offer name.</param>
    /// <param name = "_headingLine">Indicates if discount should be applied to header or line.</param>
    /// <param name = "_moduleType">Charge code type.</param>
    protected internal void applyShippingDiscountToOrder(
        DlvModeId _dlvModeId,
        DiscPct _discPct,
        RetailOfferIdEx3 _offerId,
        Name _offerName,
        HeadingLine _headingLine,
        MarkupModule _moduleType)
    {
        MarkupTrans markupTrans;
        MarkupTable markupTable;

        if (_headingLine == HeadingLine::Heading)
        {
            // Applies discount to header shipping charges
            while select forupdate markupTrans
                where markupTrans.ModuleCategory == _headingLine
                    && markupTrans.ModuleType == _moduleType
                    && markupTrans.TransTableId == salesQuotationTable.TableId
                    && markupTrans.TransRecId == salesQuotationTable.RecId
            exists join markupTable
                where markupTable.MarkupCode == markupTrans.MarkupCode
                    && markupTable.ModuleType == _moduleType
                    && markupTable.IsShipping == true
            {
                markupTrans.RetailShippingPromotionDiscount = _discPct;
                markupTrans.Txt += strFmt(' (%1:%2)' , _offerId, _offerName);
                markupTrans.update();
            }

            SalesQuotationLine salesQuotationLine;

            if (!crtSalesTransaction || !RetailProrateShippingChargeWithDiscountFlight::instance().isEnabled())
            {
                while select forupdate markupTrans
                    where markupTrans.ModuleCategory == _headingLine
                        && markupTrans.ModuleType == _moduleType
                    exists join salesQuotationLine
                        where salesQuotationLine.TableId == markupTrans.TransTableId
                            && salesQuotationLine.RecId == markupTrans.TransRecId
                            && salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                            && salesQuotationLine.DlvMode == _dlvModeId
                    exists join markupTable
                        where markupTable.MarkupCode == markupTrans.MarkupCode
                            && markupTable.ModuleType == markupTrans.ModuleType
                            && markupTable.IsShipping == true
                {
                    markupTrans.RetailShippingPromotionDiscount = _discPct;
                    markupTrans.Txt += strFmt(' (%1:%2)' , _offerId, _offerName);
                    markupTrans.update();
                }
            }
            else
            {
                CLRObject clrSalesLines  = crtSalesTransaction.get_SalesLines();
                CLRObject enumeratorSalesLine = clrSalesLines.GetEnumerator();

                while (enumeratorSalesLine.MoveNext())
                {
                    Microsoft.Dynamics.Commerce.Runtime.DataModel.SalesLine crtSalesLine = enumeratorSalesLine.get_Current();
                    str lineId = crtSalesLine.get_OriginLineId();
                    CLRObject crtDiscountLines = crtSalesLine.get_DiscountLines();
                    CLRObject enumeratorDiscountline = crtDiscountLines.GetEnumerator();

                    while (enumeratorDiscountline.MoveNext())
                    {
                        Microsoft.Dynamics.Commerce.Runtime.DataModel.DiscountLine discountLine = enumeratorDiscountline.get_Current();

                        if (discountLine.DiscountLineTypeValue == enum2int(RetailDiscountOriginType::Periodic)
                            && discountLine.PeriodicDiscountTypeValue == enum2int(RetailDiscountOfferTypeBase::Shipping)
                            && discountLine.get_OfferId() == _offerId)
                        {
                            while select forupdate markupTrans
                                where markupTrans.ModuleCategory == _headingLine
                                   && markupTrans.ModuleType == _moduleType
                                exists join salesQuotationLine
                                    where salesQuotationLine.TableId == markupTrans.TransTableId
                                       && salesQuotationLine.RecId == markupTrans.TransRecId
                                       && salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                                       && salesQuotationLine.DlvMode == _dlvModeId
                                       && salesQuotationLine.InventTransId == lineId
                                exists join markupTable
                                    where markupTable.MarkupCode == markupTrans.MarkupCode
                                       && markupTable.ModuleType == markupTrans.ModuleType
                                       && markupTable.IsShipping == true
                            {
                                markupTrans.RetailShippingPromotionDiscount = _discPct;
                                markupTrans.Txt += strFmt(' (%1:%2)' , _offerId, _offerName);
                                markupTrans.update();
                            }

                            break;
                        }
                    }
                }
            }
        }

        if (_headingLine == HeadingLine::Line && currentSalesQuotationLine.DlvMode == _dlvModeId)
        {
            // Applies discount to lines shipping charges
            while select forupdate markupTrans
                where markupTrans.ModuleCategory == _headingLine
                    && markupTrans.ModuleType == _moduleType
                    && markupTrans.TransTableId == currentSalesQuotationLine.TableId
                    && markupTrans.TransRecId == currentSalesQuotationLine.RecId
                exists join markupTable
                    where markupTable.MarkupCode == markupTrans.MarkupCode
                        && markupTable.ModuleType == _moduleType
                        && markupTable.IsShipping == true
            {
                markupTrans.RetailShippingPromotionDiscount = _discPct;
                markupTrans.Txt += strFmt(' (%1:%2)' , _offerId, _offerName);
                markupTrans.update();
            }
        }
        // Re-assign discounts for all shipment charges
        else if (_headingLine == HeadingLine::Line && currentSalesQuotationLine.RecId == 0)
        {
            SalesQuotationLine salesQuotationLine;
            while select forupdate markupTrans
                where markupTrans.ModuleCategory == _headingLine
                    && markupTrans.ModuleType == _moduleType
                exists join salesQuotationLine
                    where salesQuotationLine.TableId == markupTrans.TransTableId
                        && salesQuotationLine.RecId == markupTrans.TransRecId
                        && salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                        && salesQuotationLine.DlvMode == _dlvModeId
                exists join markupTable
                    where markupTable.MarkupCode == markupTrans.MarkupCode
                        && markupTable.ModuleType == markupTrans.ModuleType
                        && markupTable.IsShipping == true
            {
                str offerTxt = strFmt(' (%1:%2)' , _offerId, _offerName);

                // Re-assign discounts if changed
                if (markupTrans.RetailShippingPromotionDiscount != _discPct
                    || strScan(markupTrans.Txt, offerTxt, 1, strLen(markupTrans.Txt)) == 0)
                {
                    markupTrans.Txt = MarkupTable::find(markupTrans.ModuleType, markupTrans.MarkupCode).Txt;
                    markupTrans.Txt += offerTxt;
                    markupTrans.RetailShippingPromotionDiscount = _discPct;
                    markupTrans.update();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPriceOnCurrentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set price on the current sales line.
    /// </summary>
    public void setPriceOnCurrentLine()
    {
        CLRObject clrSalesLines, enumeratorSalesLine;

        using(var t = RetailPricingTimedEventInstrumentation::construct(
            classstr(RetailSalesQuotationCalculator), methodStr(RetailSalesQuotationCalculator, setPriceOnCurrentLine)))
        {
            t.addExtendedData(RetailPricingInstrumentationSegmentConstants::TableName, tableStr(salesQuotationTable));
            t.addExtendedData(RetailPricingInstrumentationSegmentConstants::RecordId, int642Str(salesQuotationTable.RecId));
            this.setEngineAndDataAccessorInfoInTelemetry(t.getExtendDataMap());

            // Initialize calculation result on RetailSalesQuotationTable.
            ttsBegin;
            retailSalesQuotationTable = RetailSalesQuotationTable::find(salesQuotationTable.QuotationId, true);
            if (retailSalesQuotationTable.TmpPriceDiscountData)
            {
                retailSalesQuotationTable.TmpPriceDiscountData = conNull();
                retailSalesQuotationTable.update();
            }
            ttsCommit;

            this.calculatePricesForOrder();

            clrSalesLines = crtSalesTransaction.get_SalesLines();
            enumeratorSalesLine = clrSalesLines.GetEnumerator();
            while (enumeratorSalesLine.MoveNext())
            {
                CrtSalesLine crtSalesLine = enumeratorSalesLine.get_Current();
                str lineId = crtSalesLine.get_LineId();
                if (lineId == crtLineIdCurrentLine)
                {
                    this.setSalesPrice(crtSalesLine, currentSalesQuotationLine);

                    this.setTaxExemptPriceInclusiveValues(crtSalesLine, currentRetailSalesQuotationLine);
                    currentSalesQuotationLine.retailPackRetailSalesQuotationLine(currentRetailSalesQuotationLine);
                }
            }

            t.parmIsSuccessful(true);
            t.parmRowCount(lineCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPricesDiscountsOnOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set prices and discounts on the order.
    /// </summary>
    /// <param name="_totalManualDiscountPercent">
    /// Total manual discount percent.
    /// </param>
    public void setPricesDiscountsOnOrder(DiscPct _totalManualDiscountPercent)
    {
        SalesQuotationLine salesQuotationLine;
        System.Exception exception;

        using(var t = RetailPricingTimedEventInstrumentation::construct(
            classstr(RetailSalesQuotationCalculator), methodStr(RetailSalesQuotationCalculator, setPricesDiscountsOnOrder)))
        {
            t.addExtendedData(RetailPricingInstrumentationSegmentConstants::TableName, tableStr(salesQuotationTable));
            t.addExtendedData(RetailPricingInstrumentationSegmentConstants::RecordId, int642Str(salesQuotationTable.RecId));
            this.setEngineAndDataAccessorInfoInTelemetry(t.getExtendDataMap());

            try
            {
                select count(RecId) from salesQuotationLine
                where salesQuotationLine.QuotationId == quotationId;

                if (salesQuotationLine.RecId == 0)
                {
                    return;
                }

                this.calculatePricesForOrder();
                crtSalesTransaction.set_TotalManualDiscountPercentage(_totalManualDiscountPercent);
                this.calculateDiscountsForOrder();

                if (RetailShippingDiscountFeature::existsConfiguration())
                {
                    RetailOrderCalculator shippingDiscountCalculator = RetailOrderCalculator::construct(salesQuotationTable.TableId, salesQuotationTable.QuotationId);
                    shippingDiscountCalculator.initializeCrtTransactionInstanceVariable();

                    if (RetailPricingConsolidateShippingDiscountCalculationFlight::instance().isEnabled())
                    {
                        Map dlvModeIdDiscountMap = shippingDiscountCalculator.calculateShippingDiscountsBySalesLineDlvMode();
                        shippingDiscountCalculator.applyShippingDiscountsByDlvModeToOrder(dlvModeIdDiscountMap, HeadingLine::Line, MarkupModuleType::Cust);
                        shippingDiscountCalculator.applyShippingDiscountsByDlvModeToOrder(dlvModeIdDiscountMap, HeadingLine::Line, MarkupModuleType::Delivery);
                    }
                    else
                    {
                        shippingDiscountCalculator.calculateShippingDiscountsForOrder(HeadingLine::Line, MarkupModuleType::Cust);
                        shippingDiscountCalculator.calculateShippingDiscountsForOrder(HeadingLine::Line, MarkupModuleType::Delivery);
                    }
                }

                this.saveSalesQuote();

                tmpOrderItemInitialized = false;

                t.parmIsSuccessful(true);
                t.parmRowCount(lineCount);
            }
            catch (Exception::CLRError)
            {
                exception = CLRInterop::getLastException();

                if (exception != null)
                {
                    exception = exception.get_InnerException();

                    if (exception != null)
                    {
                        warning(exception.ToString());
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance of <c>RetailSalesOrderCalculator</c>.
    /// </summary>
    /// <param name="_quotationId">
    /// QuotationId.
    /// </param>
    /// <param name="_currentSalesQuotationLine">
    /// SalesQuotationLine.
    /// </param>
    /// <returns>
    /// A new instance of <c>RetailSalesOrderCalculator</c>.
    /// </returns>
    /// <remarks>
    /// Use <c>RetailOrderCalculator::construct()</c> instead.
    /// This method does not use SysPlugin to do the instantiation of the object and does not take extensibility into consideration.
    /// </remarks>
    [SysObsolete('This method was replaced by RetailOrderCalculator::construct to enable extensibility scenarios.', false, 30\11\2017)]
    public static RetailSalesQuotationCalculator construct(QuotationId _quotationId, SalesQuotationLine _currentSalesQuotationLine = null)
    {
        return new RetailSalesQuotationCalculator(_quotationId, _currentSalesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new instance of the default/built-in <c>RetailSalesOrderCalculator</c>.
    /// </summary>
    /// <param name="_quotationId">
    /// QuotationId.
    /// </param>
    /// <param name="_currentSalesQuotationLine">
    /// SalesQuotationLine.
    /// </param>
    /// <returns>
    /// A new instance of <c>RetailSalesOrderCalculator</c>.
    /// </returns>
    internal static RetailSalesQuotationCalculator constructDefault(QuotationId _quotationId, SalesQuotationLine _currentSalesQuotationLine = null)
    {
        return new RetailSalesQuotationCalculator(_quotationId, _currentSalesQuotationLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPricesDiscountsOnOrderOnServer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set prices and discounts on the quotation.
    /// </summary>
    /// <param name="_quotationId">
    /// The quotation id.
    /// </param>
    /// <param name="_discPct">
    /// Discount percentage.
    /// </param>
    public static void setPricesDiscountsOnOrderOnServer(QuotationId _quotationId, DiscPct _discPct)
    {
        RetailOrderCalculator retailCalculator = RetailOrderCalculator::construct(tableNum(SalesQuotationTable), _quotationId);

        retailCalculator.setPricesDiscountsOnOrder(_discPct);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// get the Transaction Id.
    /// </summary>
    /// <returns>quotation id as transaction id.</returns>
    public TransactionID getTransactionId()
    {
        return quotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateSalesQuotationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update sales quotation line when save quotation
    /// </summary>
    /// <param name="_crtSalesLine">
    /// The crt sales line
    /// </param>
    /// <returns>
    /// A container of <c>SalesQuotationLine</c> and <c>RetailSalesQuotationLine</c>
    /// </returns>
    [Hookable(false), Wrappable(false)]
    internal protected container createOrUpdateSalesQuotationLine(
        CrtSalesLine _crtSalesLine)
    {
        SalesQuotationLine salesQuotationLine;
        RetailSalesQuotationLine retailSalesQuotationLineLocal;
        str originalLineId = _crtSalesLine.get_OriginLineId();
        str lineId = _crtSalesLine.get_LineId();

        salesQuotationLine.clear();

        if (originalLineId && originalLineId != lineId)
        {
            SalesQuotationLine originalSalesQuotationLine = RetailSalesQuotationCalculator::findQuotationLineAndRelatedTables(originalLineId);
            salesQuotationLine = this.initRetailOrderLineMap(originalSalesQuotationLine, _crtSalesLine);
            salesQuotationLine.insert();

            retailPriceOverrideWorkflowHelper.autoActivateWorkflowForSalesQuotationLine(salesQuotationLine, originalSalesQuotationLine);

            RetailSalesQuotationLine originalRetailSalesQuotationLine = originalSalesQuotationLine.retailSalesQuotationLine();

            retailSalesQuotationLineLocal = salesQuotationLine.retailSalesQuotationLine();
            retailSalesQuotationLineLocal.selectForUpdate(true);
            retailSalesQuotationLineLocal.LineManualDiscountAmount = originalRetailSalesQuotationLine.LineManualDiscountAmount;
            retailSalesQuotationLineLocal.LineManualDiscountPercentage = originalRetailSalesQuotationLine.LineManualDiscountPercentage;
        }
        else
        {
            salesQuotationLine = RetailSalesQuotationCalculator::findQuotationLineAndRelatedTables(originalLineId);
            this.updatePriceAndDiscountOnSalesQuotationLine(salesQuotationLine, _crtSalesLine);
            salesQuotationLine.update();

            retailSalesQuotationLineLocal = salesQuotationLine.retailSalesQuotationLine();
            retailSalesQuotationLineLocal.selectForUpdate(true);
        }

        retailSalesQuotationLineLocal = this.initRetailSalesPurchLineMap(retailSalesQuotationLineLocal, salesQuotationLine, _crtSalesLine);
        retailSalesQuotationLineLocal.write();

        return [salesQuotationLine, retailSalesQuotationLineLocal];
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeAllDiscountLines</Name>
				<Source><![CDATA[
    private void removeAllDiscountLines()
    {
        RetailSalesQuotationDiscountLine discountLine;
        SalesQuotationLine salesQuotationLine;
        
        delete_from discountLine
            exists join salesQuotationLine
                where discountLine.InventTransId == salesQuotationLine.InventTransId
                    && salesQuotationLine.QuotationId == salesQuotationTable.QuotationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removePriceAdjustmentHistory</Name>
				<Source><![CDATA[
    private void removePriceAdjustmentHistory()
    {
        RetailSalesQuotationPriceAdjustmentLine adjustmentLine;
        SalesQuotationLine salesQuotationLine;

        if (RetailPreservePriceHistoryFlight::instance().isEnabled())
        {
            RetailSalesQuotationLine retailSalesQuotationLine;

            delete_from adjustmentLine
                exists join salesQuotationLine
                    where adjustmentLine.InventTransId == salesQuotationLine.InventTransId
                        && salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                        && salesQuotationLine.InventTransId != ''
                exists join retailSalesQuotationLine
                    where salesQuotationLine.RecId == retailSalesQuotationLine.SalesQuotationLine
                        && retailSalesQuotationLine.isPriceLocked == NoYes::No;
        }
        else
        {
            delete_from adjustmentLine
                exists join salesQuotationLine
                    where adjustmentLine.InventTransId == salesQuotationLine.InventTransId
                        && salesQuotationLine.QuotationId == salesQuotationTable.QuotationId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUpdatePriceHistoryForSalesQuotationLine</Name>
				<Source><![CDATA[
    private boolean shouldUpdatePriceHistoryForSalesQuotationLine(SalesQuotationLine _salesQuotationLine, retailSalesQuotationLine _retailSalesQuotationLine)
    {
        if (_retailSalesQuotationLine.RecId == 0)
        {
            _retailSalesQuotationLine = _salesQuotationLine.retailSalesQuotationLine();
        }

        if (_salesQuotationLine.InventTransId == ''
            || _retailSalesQuotationLine.isPriceLocked == NoYes::Yes)
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePriceAndDiscountHistory</Name>
				<Source><![CDATA[
    private void deletePriceAndDiscountHistory()
    {
        // Remove all the discount lines related to the sales transaction.
        this.removeAllDiscountLines();

        // Remove all the price adjustment lines related to the sales transaction.
        this.removePriceAdjustmentHistory();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDiscountRecords</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal protected void createDiscountRecords(
        RecordInsertList _discountRecordList,
        CrtSalesLine _crtSalesLine,
        SalesQuotationLine _salesQuotationLine)
    {
        CLRObject clrDiscountLines = _crtSalesLine.get_DiscountLines();
        CLRObject enumeratorDiscountLine = clrDiscountLines.GetEnumerator();
        RetailSalesQuotationDiscountLine discountLine;

        // Add discount lines related to the sales quotation line to the discountRecordList.
        while (enumeratorDiscountLine.MoveNext())
        {
            CrtDiscountLine crtDiscountLine = enumeratorDiscountLine.get_Current();
            discountLine = this.initRetailSalesQuotationDiscountLine(discountLine, _salesQuotationLine, crtDiscountLine);
            _discountRecordList.add(discountLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRetailSalesQuotationDiscountLine</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal protected RetailSalesQuotationDiscountLine initRetailSalesQuotationDiscountLine(RetailSalesQuotationDiscountLine _discountLine, SalesQuotationLine _salesQuotationLine, CrtDiscountLine _crtDiscountLine)
    {
        return this.initRetailSalesQuotesDiscountLineMap(_discountLine, _salesQuotationLine, _crtDiscountLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPriceAdjustmentRecords</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal protected void createPriceAdjustmentRecords(
        RecordInsertList _adjustmentRecordList,
        CrtSalesLine _crtSalesLine,
        SalesQuotationLine _salesQuotationLine)
    {
        CLRObject clrPriceLines = _crtSalesLine.get_PriceLines();
        CLRObject enumeratorPriceLine = clrPriceLines.GetEnumerator();
        RetailSalesQuotationPriceAdjustmentLine adjustmentLine;

        // Add price adjustment lines related to the sales quotation line to the adjustmentRecordList.
        while (enumeratorPriceLine.MoveNext())
        {
            Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceLine crtPriceLine = enumeratorPriceLine.get_Current();

            if(crtPriceLine is Microsoft.Dynamics.Commerce.Runtime.DataModel.PriceAdjustmentPriceLine)
            {
                adjustmentLine = this.initRetailSalesPriceAdjustmentLineMap(adjustmentLine, _salesQuotationLine, crtPriceLine);
                _adjustmentRecordList.add(adjustmentLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationTable</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal protected void updateSalesQuotationTable()
    {
        retailSalesQuotationTable = RetailSalesQuotationTable::find(salesQuotationTable.QuotationId, true);

        if (retailSalesQuotationTable)
        {
            if (retailSalesQuotationTable.TmpPriceDiscountData || retailSalesQuotationTable.TotalManualDiscountAmount)
            {
                retailSalesQuotationTable.TmpPriceDiscountData = conNull();

                // User can update total manual discount percentage in AX.
                Percent totalManualDiscountPercent = crtSalesTransaction.get_TotalManualDiscountPercentage();
                if (totalManualDiscountPercent)
                {
                    retailSalesQuotationTable.TotalManualDiscountAmount = 0;
                }
            }
            retailSalesQuotationTable.IsPriceAndDiscountRecalculationRequired = NoYes::No;

            retailSalesQuotationTable.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDiscountLineFromCrtDiscountLine</Name>
				<Source><![CDATA[
    [Hookable(false), Wrappable(false)]
    internal protected RetailSalesQuotationDiscountLine initDiscountLineFromCrtDiscountLine(CrtDiscountLine _crtDiscountLine)
    {
        RetailSalesQuotationDiscountLine discountLine;
        discountLine.Amount = _crtDiscountLine.get_EffectiveAmount();
        discountLine.CustomerDiscountType = _crtDiscountLine.get_CustomerDiscountTypeValue();
        discountLine.DiscountAmount = _crtDiscountLine.get_Amount();
        discountLine.DiscountOriginType = _crtDiscountLine.get_DiscountLineTypeValue();
        discountLine.ManualDiscountType = _crtDiscountLine.get_ManualDiscountTypeValue();
        discountLine.PeriodicDiscountOfferId = _crtDiscountLine.get_OfferId();
        discountLine.Percentage = _crtDiscountLine.get_Percentage();
        discountLine.DealPrice = _crtDiscountLine.get_DealPrice();
        discountLine.BundleId = _crtDiscountLine.BundleId;
        discountLine.DiscountCode = _crtDiscountLine.get_DiscountCode();
        return discountLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>