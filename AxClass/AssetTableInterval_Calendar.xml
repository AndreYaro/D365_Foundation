<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetTableInterval_Calendar</Name>
	<SourceCode>
		<Declaration><![CDATA[
///  <summary>
///     Interval details of Calendar
/// </summary>
/// <remarks>
///     extends AssetTableInterval
/// </remarks>
class AssetTableInterval_Calendar extends AssetTableInterval
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetDepreciationTime</Name>
				<Source><![CDATA[
    public AssetDepreciationTime assetDepreciationTime(AssetTransDate _assetTransDate)
    {
        AssetDepreciationTime   assetDepreciationTime;

        switch (assetAccrual)
        {
            case AssetAccrual::Daily:
                assetDepreciationTime = dayOfYr(DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _assetTransDate));
                break;
            case AssetAccrual::Monthly:
                assetDepreciationTime = 12;
                break;
            case AssetAccrual::Quarterly:
                assetDepreciationTime =  4;
                break;
            case AssetAccrual::HalfYearly:
                assetDepreciationTime =  2;
                break;
            default:
                assetDepreciationTime =  1;
        }
        return assetDepreciationTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dateToPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of periods for the provided date.
    /// </summary>
    /// <param name="_date">
    /// The date for which the period will be determined.
    /// </param>
    /// <returns>
    /// The number of the periods.
    /// </returns>
    public int dateToPeriod(TransDate _date)
    {
        return mthOfYr(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dayOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the number of the day in the month for the specified asset transaction date.
    /// </summary>
    /// <param name="_assetTransDate">
    /// Asset transaction date.
    /// </param>
    /// <returns>
    /// Number of day in the month.
    /// </returns>
    public int dayOfPeriod(AssetTransDate _assetTransDate)
    {
        return dayOfMth(_assetTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>endPeriod</Name>
				<Source><![CDATA[
    public AssetTransDate endPeriod(AssetTransDate _assetTransDate)
    {
        AssetTransDate  assetTransDate;

        switch (assetAccrual)
        {
            case AssetAccrual::Daily:
                assetTransDate = _assetTransDate;
                break;
            case AssetAccrual::Monthly:
                assetTransDate = dateEndMth(_assetTransDate);
                break;
            case AssetAccrual::Quarterly:
                assetTransDate = dateEndQtr(_assetTransDate);
                break;
            case AssetAccrual::HalfYearly:
                if (_assetTransDate < mkDate(1,7,year(_assetTransDate)))
                {
                    assetTransDate = mkDate(30,6,year(_assetTransDate));
                }
                else
                {
                    assetTransDate = mkDate(31,12,year(_assetTransDate));
                }

                break;
            default:
                assetTransDate = dateMthFwd(DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate), 12) - 1;
        }
        return assetTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findCurrentQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number of the quarter in the year for a specified date.
    /// </summary>
    /// <param name="_date">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The number of the quarter in the given year.
    /// </returns>
    public int findCurrentQuarter(TransDate _date)
    {
        return date2Qtr(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the first day of the month to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The first day of the month to which the date belongs.
    /// </returns>
    public TransDate findFirstDayOfMonth(TransDate _date)
    {
        return mkDate(1, mthOfYr(_date), year(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the first day of the period to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The first day of the period to which the date belongs.
    /// </returns>
    public TransDate findFirstDayOfPeriod(TransDate _date)
    {
        return this.findFirstDayOfMonth(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the first day of the quarter to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The first day of the quarter to which the date belongs.
    /// </returns>
    public TransDate findFirstDayOfQuarter(TransDate _date)
    {
        return dateStartQtr(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findFirstDayOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the first date of a fiscal year for a specified date.
    /// </summary>
    /// <param name="_date">
    /// The date to find the first date of the year.
    /// </param>
    /// <returns>
    /// The first date of the year.
    /// </returns>
    public TransDate findFirstDayOfYear(TransDate _date)
    {
        return DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfMonth</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the last day of the month to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The last day of the month to which the date belongs.
    /// </returns>
    public TransDate findLastDayOfMonth(TransDate _date)
    {
        return dateEndMth(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the last day of the period to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The last day of the period to which the date belongs.
    /// </returns>
    public TransDate findLastDayOfPeriod(TransDate _date)
    {
        return this.findLastDayOfMonth(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfQuarter</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the last day of the quarter to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The last day of the quarter to which the date belongs.
    /// </returns>
    public TransDate findLastDayOfQuarter(TransDate _date)
    {
        return dateEndQtr(_date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLastDayOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the last date of a fiscal year for a specified date.
    /// </summary>
    /// <param name="_date">
    /// The date for which the last date of the year will be found.
    /// </param>
    /// <returns>
    /// The last date of the year.
    /// </returns>
    public TransDate findLastDayOfYear(TransDate _date)
    {
        return DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMiddleOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the middle day of the period to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The middle day of the period to which the date belongs.
    /// </returns>
    public TransDate findMiddleOfPeriod(TransDate _date)
    {
        int numberOfDay = mthOfYr(_date) == 2 ? 14 : 15;

        return mkDate(numberOfDay, mthOfYr(_date), year(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>findMiddleOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Finds the middle day of the year to which the date belongs.
    /// </summary>
    /// <param name="_date">
    ///     The specified date.
    /// </param>
    /// <returns>
    ///    The middle day of the year to which the date belongs.
    /// </returns>
    public TransDate findMiddleOfYear(TransDate _date)
    {
        return mkDate(1, 7, year(_date));
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasYearChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if two dates are in a different calendar year.
    /// </summary>
    /// <param name="_oldDate">
    /// The first date for which to check is done.
    /// </param>
    /// <param name="_newDate">
    /// The second date for which to check is done.
    /// </param>
    /// <returns>
    /// true if the dates in different fiscal or calendar year; otherwise, false.
    /// </returns>
    public boolean hasYearChanged(AssetTransDate _oldDate, AssetTransDate _newDate)
    {
        return year(_oldDate) != year(_newDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>indexOfPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The index of the monthly period for the <c>AssetAccural</c> enumeration type.
    ///    depreciation method.
    /// </summary>
    /// <param name="_date">
    ///    The start of the depreciation period.
    /// </param>
    /// <returns>
    ///    The index of the period for the specified date.
    /// </returns>
    public int indexOfPeriod(TransDate _date)
    {
        int periodIndex;
        int monthIndex;

        monthIndex = mthOfYr(_date);
        switch (assetAccrual)
        {
            case AssetAccrual::Monthly:
                periodIndex = monthIndex;
                break;
            case AssetAccrual::Quarterly:
                switch (monthIndex)
                {
                    case 10,11,12:
                        periodIndex = 4;
                    break;
                    case 9,8,7:
                        periodIndex = 3;
                    break;
                    case 6,5,4:
                        periodIndex = 2;
                    break;
                    default:
                        periodIndex = 1;
                    break;
                }
                break;
            case AssetAccrual::HalfYearly:
                switch (monthIndex)
                {
                    case 7,8,9,10,11,12:
                        periodIndex = 2;
                    break;
                    default:
                        periodIndex = 1;
                    break;
                }
                break;

            default:
                periodIndex = 1;
        }
        return periodIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(AssetAccrual _assetAccrual)
    {
        ;
        assetAccrual = _assetAccrual;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriodsLeftInYear</Name>
				<Source><![CDATA[
    ///  <summary>
    ///     This method calculates the number of periods left in that year
    /// </summary>
    /// <param name="_date">
    ///     Input date
    /// </param>
    /// <returns>
    ///     number of periods
    /// </returns>
    /// <remarks>
    ///     number of periods left in that year
    /// </remarks>
    public int numOfPeriodsLeftInYear(TransDate _date)
    {
        return this.numOfPeriodsPerYear() - (mthOfYr(_date) - 1) div real2int(12 / this.numOfPeriodsPerYear());
    }

]]></Source>
			</Method>
			<Method>
				<Name>numOfPeriodsPerYear</Name>
				<Source><![CDATA[
    public int numOfPeriodsPerYear(AssetTransDate  _assetTransDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        return any2int(this.assetDepreciationTime(_assetTransDate));
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodOfYear</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of the month in a year for a given asset transaction date.
    /// </summary>
    /// <param name="_assetTransDate">
    /// Asset transaction date.
    /// </param>
    /// <returns>
    /// Number of the month.
    /// </returns>
    public int periodOfYear(AssetTransDate _assetTransDate)
    {
        return mthOfYr(_assetTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>startOfPeriod</Name>
				<Source><![CDATA[
    public AssetTransDate startOfPeriod(AssetTransDate _assetTransDate)
    {
        AssetTransDate  assetTransDate;

        switch (assetAccrual)
        {
            case AssetAccrual::Daily:
                assetTransDate = _assetTransDate;
                break;
            case AssetAccrual::Monthly:
                assetTransDate = dateStartMth(_assetTransDate);
                break;
            case AssetAccrual::Quarterly:
                assetTransDate = dateStartQtr(_assetTransDate);
                break;
            case AssetAccrual::HalfYearly:
                if (_assetTransDate < mkDate(1,7,year(_assetTransDate)))
                {
                    assetTransDate = mkDate(1,1,year(_assetTransDate));
                }
                else
                {
                    assetTransDate = mkDate(1,7,year(_assetTransDate));
                }
                break;

            default:
                assetTransDate = DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _assetTransDate);
        }
        return assetTransDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>yearToPeriod</Name>
				<Source><![CDATA[
    public AssetLifeTime yearToPeriod(AssetServiceLife _assetServiceLife,
                                      AssetTransDate   _depreciationStartDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        AssetTransDate  assetTransDate = _depreciationStartDate;
        AssetLifeTime   assetLifeTime;
        real            temp;
        #TimeConstants
        ;

        if (_assetServiceLife)
        {
            switch (assetAccrual)
            {
                case AssetAccrual::Daily:

                    assetLifeTime = this.calcAssetLifeTime(assetTransDate, real2int(_assetServiceLife * #monthsPerYear));
                    break;

                default:

                    temp = _assetServiceLife * this.numOfPeriodsPerYear();
                    assetLifeTime = real2int(round(temp, 0));
            }
        }

        return assetLifeTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcAssetLifeTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns assetLifeTime calculated based on transDate and serviceLife.
    /// </summary>
    /// <param name="_transDate">
    /// Date of asset transaction.
    /// </param>
    /// <param name="_serviceLife">
    /// service life in months.
    /// </param>
    /// <returns>
    /// assetLifeTime calculated based on transDate and serviceLife.
    /// </returns>
    protected AssetLifeTime calcAssetLifeTime(date _transDate, int _serviceLife)
    {
        return this.calcAssetLifeTimeInDays(_transDate, _serviceLife);
    }

]]></Source>
			</Method>
			<Method>
				<Name>openingPeriodDate</Name>
				<Source><![CDATA[
    public TransDate openingPeriodDate(TransDate _date)
    {
        return DateTimeUtil::getStartOfYearDate(new Session().preferredLocale(), _date);
    }

]]></Source>
			</Method>
			<Method>
				<Name>closingPeriodDate</Name>
				<Source><![CDATA[
    public TransDate closingPeriodDate(TransDate _date)
    {
        return DateTimeUtil::getEndOfYearDate(new Session().preferredLocale(), _date);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>