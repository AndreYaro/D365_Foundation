<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventCountStatisticsDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InventCountStatisticsDP</c> class is the Report Data Provider class for the
///    <c>InventCountStatistics</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(InventCountStatistics)),
    SRSReportParameterAttribute(classStr(InventCountStatisticsContract))
]
public class  InventCountStatisticsDP extends SRSReportDataProviderPreProcessTempDB
{
    InventCountStatisticsTmp        inventCountStatisticsTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInventCountStatisticstmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the temporary table and returns the data table to the calling method.
    /// </summary>
    /// <returns>
    /// The required report data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(InventCountStatisticsTmp))
    ]
    public InventCountStatisticsTmp getInventCountStatisticstmp()
    {
        select inventCountStatisticsTmp;
        return inventCountStatisticsTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the required data and inserts it into the temporary table.
    /// </summary>
    /// <param name="_tmpInventCountStatistics">
    /// Table buffer of <c>TmpInventCountStatistics</c> table.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> table buffer.
    /// </param>
    private void insertTmpTable(TmpInventCountStatistics _tmpInventCountStatistics, InventDim _inventDim)
    {
        inventCountStatisticsTmp.ItemId             = _tmpInventCountStatistics.ItemId;
        inventCountStatisticsTmp.InventDimFieldsMap::initAllDimensionsFrom(_inventDim);
        inventCountStatisticsTmp.QtyOK              = _tmpInventCountStatistics.QtyOK;
        inventCountStatisticsTmp.QtyNotOK           = _tmpInventCountStatistics.QtyNotOK;
        inventCountStatisticsTmp.PercentageOK       = _tmpInventCountStatistics.percentageOK();
        inventCountStatisticsTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a query with <c>TmpInventCountStatistics</c> temporary table and <c>InventDim</c> table.
    /// </summary>
    /// <param name="_inventDimParm">
    /// Table buffer of <c>InventDimParm</c> table.
    /// </param>
    /// <returns>
    /// returns the query run object which is created by joining two tables <c>TmpInventCountStatistics</c> and <c>InventDim></c>.
    /// </returns>
    private QueryRun makeQueryRun(InventDimParm _inventDimParm)
    {
        Query                   queryLocal = new Query();

        QueryBuildDataSource queryBuildDataSourceTmp = queryLocal.addDataSource(tableNum(TmpInventCountStatistics));

        if (_inventDimParm.ItemIdFlag)
        {
            queryBuildDataSourceTmp.addSortField(fieldNum(TmpInventCountStatistics, ItemId));
        }
        
		QueryBuildDataSource queryBuildDataSourceDim = queryBuildDataSourceTmp.addDataSource(tableNum(InventDim));
        _inventDimParm.queryAddSortField(queryBuildDataSourceDim);
        queryBuildDataSourceDim.orderMode(OrderMode::OrderBy);
        queryBuildDataSourceDim.joinMode(JoinMode::InnerJoin);
        queryBuildDataSourceDim.relations(true);

        return new SysQueryRun(queryLocal);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by  at runtime.
    /// The method should compute data and populate the data tables that will be returned to .
    /// </remarks>
    public void processReport()
    {
        TmpInventCountStatistics        data;
        InventDim                       inventDim;

        inventCountStatisticsTmp.setConnection(this.parmUserConnection());

        InventCountStatisticsCreate inventCountStatisticsCreate = new InventCountStatisticsCreate();
        inventCountStatisticsCreate.parmQueryRun(new QueryRun(this.parmQuery()));
        InventCountStatisticsContract contract = this.parmDataContract() as InventCountStatisticsContract;

        InventDimParm inventDimParm = contract.parmInventDimViewContract().parmInventDimParm();
        inventDimParm.ItemIdFlag = contract.parmViewItemId();

        inventCountStatisticsCreate.parmInventDimParm(inventDimParm);
        inventCountStatisticsCreate.run();

        QueryRun queryRun = this.makeQueryRun(inventDimParm);

        data.setTmpData(inventCountStatisticsCreate.parmTmpInventCountStatistics());
        queryRun.setRecord(data);

        while (queryRun.next())
        {
            TmpInventCountStatistics tmpInventCountStatistics = queryRun.get(tableNum(TmpInventCountStatistics));

            if (queryRun.query().dataSourceTable(tableNum(InventDim)))
            {
                inventDim = queryRun.get(tableNum(InventDim));
            }

            this.insertTmpTable(tmpInventCountStatistics, inventDim);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>