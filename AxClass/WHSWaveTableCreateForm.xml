<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveTableCreateForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WHSWaveTableCreateForm</c> provides business lofic for the <c>WHSWaveTableCreate</c> form.
/// </summary>
public class WhsWaveTableCreateForm extends WHSWaveTableCreateFormBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcTotalsShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates totals for the shipment.
    /// </summary>
    /// <returns>
    ///    A container with totals.
    /// </returns>
    public container calcTotalsShipment()
    {
        WHSShipmentTable    rec;
        WHSLoadLine         loadLine;
        InventTable         inventTable;
        Weight              totalWeightShipments = 0;
        Volume              totalVolumeShipments = 0;
        Qty                 totalQtyShipments    = 0;
        int                 numLinesShipments    = 0;

        for (rec = source_ds.getFirst(true) ? source_ds.getFirst(true) : source_ds.cursor();
             rec;
             rec = source_ds.getNext())
        {
            while select ItemId, InventQty from loadLine
                where loadLine.ShipmentId == rec.ShipmentId
            {
                inventTable = InventTable::find(loadLine.ItemId);

                totalWeightShipments    += inventTable.grossWeight() * loadLine.InventQty;
                totalVolumeShipments    += inventTable.UnitVolume * loadLine.InventQty;
                totalQtyShipments       += loadLine.InventQty;
            }

            ++numLinesShipments;
        }

        return [totalWeightShipments, totalVolumeShipments, totalQtyShipments, numLinesShipments];
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAddLineToWave</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if wave lines can be added to the wave. Used by Maintain Shipment form
    /// </summary>
    /// <param name="_whsWaveTable">
    ///     Wave to add lines to.
    /// </param>
    /// <param name="_common">
    ///     Wave lines pool.
    /// </param>
    /// <returns>
    ///     true if can add lines to the wave.
    /// </returns>
    public boolean canAddLineToWave(WHSWaveTable _whsWaveTable, Common _common)
    {
        WHSShipmentTable shipmentTable;

        if (!(_common is WHSShipmentTable))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        shipmentTable = _common as WHSShipmentTable;

        return super(_whsWaveTable, shipmentTable)
            && shipmentTable.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWaveLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a wave line for the given record.
    /// </summary>
    /// <param name="_waveId">
    ///    The wave ID.
    /// </param>
    /// <param name="_common">
    ///    The record.
    /// </param>
    protected void createWaveLine(
        WHSWaveId _waveId,
        Common    _common)
    {
        WHSWaveLine::createFromWaveIdAndShipment(_waveId,_common,true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editPutOnWaveShipment</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Edit method for the put on wave checkbox.
    /// </summary>
    /// <param name="_set">
    ///    A Boolean value that indicates if the value should be set.
    /// </param>
    /// <param name="_shipmentTable">
    ///    The <c>WHSShipmentTable</c> record.
    /// </param>
    /// <param name="_putOnWave">
    ///    The field.
    /// </param>
    /// <param name="_waveTable">
    ///    The <c>WHSWaveTable</c> record.
    /// </param>
    /// <returns>
    ///    A container with totals.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    A wave tabkle record was not specified.
    /// </exception>
    public container editPutOnWaveShipment(
        boolean          _set,
        WHSShipmentTable _shipmentTable,
        NoYes            _putOnWave,
        WHSWaveTable     _waveTable)
    {
        NoYes   ret;
        Weight  totalWeightShipments;
        Volume  totalVolumeShipments;
        Qty     totalQtyShipment;
        int     numLinesShipments;

        ttsbegin;

        if (_set)
        {
            if (!_waveTable.RecId)
            {
                throw error("@WAX1951");
            }

            WHSWaveLine::createFromWaveIdAndShipment(_waveTable.WaveId, _shipmentTable, true);
            waveTable_ds.research(true);
            source_ds.research(true);
            waveLine_ds.research(true);
            [totalWeightShipments, totalVolumeShipments, totalQtyShipment, numLinesShipments] = this.calcTotalsShipment();
            ret = true;
        }

        ttscommit;

        return [ret, totalWeightShipments, totalVolumeShipments, totalQtyShipment, numLinesShipments];
    }

]]></Source>
			</Method>
			<Method>
				<Name>openShipmentDetails</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Opens the shipment details form.
    /// </summary>
    /// <param name="_waveLine">
    ///    A <c>WHSWaveLine</c> record.
    /// </param>
    public void openShipmentDetails(WHSWaveLine _waveLine)
    {
        FormRun formRun;
        Args    args = new Args();

        args.name(formStr(WHSShipmentDetails));
        args.record(WHSShipmentTable::find(_waveLine.ShipmentId));

        formRun = classfactory.formRunClass(args);
        formRun.init();
        formRun.run();
        formRun.wait();
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the source table ID.
    /// </summary>
    /// <returns>
    ///    The source table ID.
    /// </returns>
    protected TableId sourceTableId()
    {
        return tableNum(WHSShipmentTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSWaveTableCreateForm construct()
    {
        return new WHSWaveTableCreateForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>WHSWaveTableCreateForm</c> class.
    /// </summary>
    /// <param name="_waveTable_ds">
    ///    The wave table datasource.
    /// </param>
    /// <param name="_waveLine_ds">
    ///    The wave line datasource
    /// </param>
    /// <param name="_source_ds">
    ///    The source datasource.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>WHSWaveTableCreateForm</c> class.
    /// </returns>
    public static WHSWaveTableCreateForm newStandard(
        FormDataSource _waveTable_ds,
        FormDataSource _waveLine_ds,
        FormDataSource _source_ds)
    {
        WHSWaveTableCreateForm  whsWaveTableCreateForm = WHSWaveTableCreateForm::construct();

        whsWaveTableCreateForm.parmWaveTable_ds(_waveTable_ds);
        whsWaveTableCreateForm.parmWaveLine_ds(_waveLine_ds);
        whsWaveTableCreateForm.parmSource_ds(_source_ds);

        return whsWaveTableCreateForm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>