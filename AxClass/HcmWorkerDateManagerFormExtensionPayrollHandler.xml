<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>HcmWorkerDateManagerFormExtensionPayrollHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles the Payroll module form extension events for the HcmWorkerDateManager form.
/// </summary>
public final class HcmWorkerDateManagerFormExtensionPayrollHandler
{
    boolean initialized;
    FormRun element;

    // Extension controls
    FormReferenceGroupControl earningCodeControl;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of this form extension event handler class and registers it with the base form.
    /// </summary>
    /// <param name = "_formRunInstance">An instance of the form being extended.</param>
    public void new(FormRun _formRunInstance)
    {
        initialized = false;
        element = _formRunInstance;

        // Register this extension with the main form
        element.registerExtensionInstance(classStr(HcmWorkerDateManagerFormExtensionPayrollHandler), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes this form extension handler instance
    /// </summary>
    private void init()
    {
        if (initialized)
        {
            return;
        }

        initialized = true;

        // Cache of the extension controls
        earningCodeControl = element.design().controlName(formControlStr(HcmWorker, PayrollWorkerPositionEarningCode_EarningCode)) as FormReferenceGroupControl;

        // Register overrides
        earningCodeControl.registerOverrideMethod(methodStr(FormReferenceControl, lookupReference), methodStr(HcmWorkerDateManagerFormExtensionPayrollHandler, onEarningCodeLookupReference), this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorker_OnInitializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// An OnInitializing event handler for the HcmWorkerDateManager.ExtensionPayroll form extension which controls the <c>PayrollPositionDetails</c> table's
    /// ability to create and edit records.
    /// </summary>
    /// <param name="_sender">The HcmWorkerDateManager form.</param>
    /// <param name="_e">The args for the event.</param>
    [FormEventHandler(formStr(HcmWorkerDateManager), FormEventType::Initializing)]
    public static void HcmWorker_OnInitializing(xFormRun _sender, FormEventArgs _e)
    {
        HcmWorkerDateManagerFormExtensionPayrollHandler extensionInstance = new HcmWorkerDateManagerFormExtensionPayrollHandler(_sender);
    }

]]></Source>
			</Method>
			<Method>
				<Name>HcmWorkerDateManager_OnInitialized</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form OnInitialized event handler for HcmWorkerDateManager form extension.
    /// </summary>
    /// <param name="_sender">The HcmWorkerDateManager form.</param>
    /// <param name="_e">Args for the event.</param>
    [FormEventHandler(formStr(HcmWorkerDateManager), FormEventType::Initialized)]
    public static void HcmWorkerDateManager_OnInitialized(xFormRun _sender, FormEventArgs _e)
    {
        FormRun workerDateManagerForm = _sender as FormRun;

        // Initialize the instance of this form extension handler now that the controls exist
        HcmWorkerDateManagerFormExtensionPayrollHandler extensionInstance = workerDateManagerForm.getExtensionInstance(classStr(HcmWorkerDateManagerFormExtensionPayrollHandler));
        extensionInstance.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>EarningCode_OnModified</Name>
				<Source><![CDATA[
    /// <summary>
    /// Form extension data source field event handler for OnModified of the EarningCode field.
    /// </summary>
    /// <param name="sender">The PayrollWorkerPositionEarningCode data source of the form extension.</param>
    /// <param name="e">Args for the event.</param>
    [FormDataFieldEventHandler(formDataFieldStr(HcmWorkerDateManager, PayrollWorkerPositionEarningCode, EarningCode), FormDataFieldEventType::Modified)]
    public static void EarningCode_OnModified(FormDataObject _sender, FormDataFieldEventArgs _e)
    {
        PayrollEarningCodeRecId earningCodeRecId = _sender.getValue();
        PayrollWorkerPositionEarningCode payrollWorkerPositionEarningCode = _sender.datasource().cursor();

        if (PayrollEarningCodeDetail::hasFutureRateBasisChange(earningCodeRecId, payrollWorkerPositionEarningCode.ValidFrom))
        {
            info("@PayrollProcessing:RateBasisValueChangedInfo");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onEarningCodeLookupReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Custom override method for handling the PayrollWorkerPositionEarningCode_EarningCode control's lookupReference.
    /// </summary>
    /// <param name = "_sender">The control initiating the lookup.</param>
    private Common onEarningCodeLookupReference(FormReferenceGroupControl _sender)
    {
        return PayrollEarningCode::lookupEarningCodeForWorkerPosition(_sender);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>