<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DueDateComplianceDP_ES</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>DueDateComplianceDP_ES</c> class declares the variables, tables, and so on, that are used
///    in the <c>DueDateCompliance_ES</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(DueDateCompliance_ES)),
    SRSReportParameterAttribute(classStr(DueDateComplianceContract_ES))
]
class DueDateComplianceDP_ES extends SrsReportDataProviderPreProcessTempDB
{
    private const str FeatureReference = 'ES-00004';

    TmpDueDateCompliance_ES     tmpDueDateCompliance_ES;

    FromDate                    fromDateCurrent;
    ToDate                      toDateCurrent;
    FromDate                    fromDateComparative;
    ToDate                      toDateComparative;
    DueDateComplianceCalculationMethod_ES calculationMethod;

    AmountMST                   exceededDaysByAmountPaidCurrentPeriod;
    AmountMST                   exceededDaysByAmountPaidComparativePeriod;

    AmountMST                   totalPaymentsCurrentPeriod;
    AmountMST                   totalPaymentsComparativePeriod;
    AmountMST                   totalAmountWithinCurrentPeriod;
    AmountMST                   totalAmountWithinComparativePeriod;
    AmountMST                   totalAmountOutsideCurrentPeriod;
    AmountMST                   totalAmountOutsideComparativePeriod;

    AmountMST                   outstandingAmountByOutstandingDaysTmp;
    AmountMST                   outstandingAmountByOutstandingDaysCurrentPeriod;
    AmountMST                   outstandingAmountByOutstandingDaysComparativePeriod;

    AmountMST                   totalOutstandingAmountCurrentPeriod;
    AmountMST                   totalOutstandingAmountComparativePeriod;

    TempStr                     accountNumber;
    FromDate                    firstDateComparative;

    CustVendOpenTransManager    transManager;
    int                         maxDueLimit;
    int                         minDueLimit;
    private const int           MaxMonthDays = 31;
    private const int           MinMonthDays = 28;

    private TempStr             isVendTransApproved;
    private NoYesUnchanged      isApproved = NoYesUnchanged::Unchanged;
    private readonly boolean    useDueDate;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());
        useDueDate = FeatureStateProvider::isFeatureEnabled(UseDueDateAvgPeriodInvoiceFeature_ES::instance());
    }

]]></Source>
			</Method>
			<Method>
				<Name>addHiddenVendTransRange</Name>
				<Source><![CDATA[
    private void addHiddenVendTransRange(Query _query, FieldId _fieldId, str _value)
    {
        QueryBuildRange qbr;

        qbr = _query.dataSourceTable(tableNum(VendTrans), 1).addRange(_fieldId);
        qbr.value(_value);
        qbr.status(RangeStatus::Hidden);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTransDateRange</Name>
				<Source><![CDATA[
    private void addTransDateRange(Query _query, int _dsNo, str _queryValue)
    {
        _query.dataSourceTable(tablenum(VendSettlement), _dsNo).addRange(fieldnum(VendSettlement, TransDate)).value(_queryValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isVendInvoiceJourDateInRange</Name>
				<Source><![CDATA[
    private boolean isVendInvoiceJourDateInRange(VendInvoiceJour _vendInvoiceJour,
                                               FromDate _fromDate,
                                               ToDate _toDate)
    {
        date comparisonDate = useDueDate ? _vendInvoiceJour.DueDate : _vendInvoiceJour.InvoiceDate;

        return (!_fromDate || comparisonDate >= _fromDate) && (!_toDate || comparisonDate <= _toDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcOutstandingAmount</Name>
				<Source><![CDATA[
    private AmountMST calcOutstandingAmount(FromDate _fromDate,
                                    ToDate _toDate,
                                    VendInvoiceJour _vendInvoiceJour,
                                    vendTrans _vendTrans)
    {
        CustVendTransDetails_ES transDetails;
        TransDate               allowedDueDate;
        AmountMST               outstandingAmountInvoice;
        AmountMST               returnAmount;
        TransDate               exceededDaysBaseDate;

        allowedDueDate = this.getAllowedDueDate(_vendInvoiceJour, _vendTrans.TransDate);

        exceededDaysBaseDate = calculationMethod == DueDateComplianceCalculationMethod_ES::InvoiceDate ? _vendTrans.TransDate : allowedDueDate;

        if (allowedDueDate && this.isVendInvoiceJourDateInRange(_vendInvoiceJour, _fromDate, _toDate))
        {
            transDetails = new CustVendTransDetails_ES(_vendTrans, _toDate);
            outstandingAmountInvoice = -(_vendTrans.AmountMST - transDetails.amountMSTSettled());
            if (outstandingAmountInvoice > 0.00)
            {
                returnAmount = outstandingAmountInvoice;
                if (   _toDate != maxDate()
                    && _toDate > exceededDaysBaseDate)
                {
                    outstandingAmountByOutstandingDaysTmp += (_toDate - exceededDaysBaseDate) * outstandingAmountInvoice;
                }
            }
        }

        return returnAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExceededDaysByAmountPaid</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the multiplication of the payment amount by the days elapsed from the invoice date or the due date.
    /// </summary>
    /// <param name="_dueDate">
    ///    Due date of the payment.
    /// </param>
    /// <param name="_paymentDate">
    ///    Actual payment date.
    /// </param>
    /// <param name="_settleAmountMST">
    ///    Payment amount.
    /// </param>
    /// <param name="_exceededDaysBaseDate">
    ///    The date which should be used as a base to calculate the quantity of the exceeded days.
    /// </param>
    /// <returns>
    ///    The multiplication of the payment amount by the days elapsed from the invoice date or the due date.
    /// </returns>
    /// <remarks>
    ///    The date which should be used as a base date to calculate the quantity
    ///    of the exceeded days is defined by the parameter in the report dialog.
    /// </remarks>
    private AmountMST calculateExceededDaysByAmountPaid(TransDate _dueDate, TransDate _paymentDate, AmountMST _settleAmountMST, TransDate _exceededDaysBaseDate)
    {
        if (   _paymentDate > _dueDate      // payment is overdue
            && _paymentDate > _exceededDaysBaseDate)
        {
            return (_paymentDate - _exceededDaysBaseDate) * _settleAmountMST;
        }

        return 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalPayment</Name>
				<Source><![CDATA[
    private AmountMST calculateTotalPayment(AmountMST _settleAmountMST)
    {
        return -_settleAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalPaymentOutsidePeriod</Name>
				<Source><![CDATA[
    private AmountMST calculateTotalPaymentOutsidePeriod(TransDate _dueDate, TransDate _paymentDate, AmountMST _settleAmountMST)
    {
        AmountMST settlementAmount;

        if (_paymentDate > _dueDate)
        {
            settlementAmount = -_settleAmountMST;
        }

        return settlementAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalPaymentWithinPeriod</Name>
				<Source><![CDATA[
    private AmountMST calculateTotalPaymentWithinPeriod(TransDate _dueDate, TransDate _paymentDate, AmountMST _settleAmountMST)
    {
        AmountMST settlementAmount;

        if (_paymentDate <= _dueDate)
        {
            settlementAmount = -_settleAmountMST;
        }

        return settlementAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    private void fetch()
    {
        QueryRun        queryRun;

        VendTrans       invoices;
        VendTrans       paymOffset,
                        paymBOE,
                        paymRegular;
        VendInvoiceJour vendInvoiceJours;

        Voucher         voucherCurrent;
        AmountMST       voucherPaymentsCurrentPeriod;
        AmountMST       voucherPaymentsComparativePeriod;
        AmountMST       voucherAmountWithinCurrentPeriod;
        AmountMST       voucherAmountWithinComparativePeriod;
        AmountMST       voucherAmountOutsideCurrentPeriod;
        AmountMST       voucherAmountOutsideComparativePeriod;

        TransDate       dueDateLocal;
        AmountMST       settleAmountMSTLocal;
        TransDate       paymentDateLocal;
        TransDate       exceededDaysBaseDate;

        QueryBuildDataSource    qbds;
        QueryBuildRange         qbr;
        Set                     setVendSettlement = new Set(Types::Int64);

        DueDateComplianceContract_ES contract = this.parmDataContract() as DueDateComplianceContract_ES;

        boolean isPromissoryNoteSettledInPeriod(TransDate _fromDate, TransDate _toDate)
        {
            VendTrans               paymBOELocal;
            CustVendNegInstSeqNum   seqNum;

            select maxof(PromissoryNoteSeqNum) from paymBOELocal
                where paymBOELocal.AccountNum        == paymOffset.AccountNum       &&
                      paymBOELocal.PromissoryNoteID  == paymOffset.PromissoryNoteID &&
                      paymBOELocal.TransDate         <= _toDate;

            seqNum = paymBOELocal.PromissoryNoteSeqNum;
            select firstonly paymBOELocal
                where paymBOELocal.AccountNum            == paymOffset.AccountNum           &&
                      paymBOELocal.PromissoryNoteID      == paymOffset.PromissoryNoteID     &&
                      paymBOELocal.PromissoryNoteSeqNum  == seqNum                          &&
                      paymBOELocal.PromissoryNoteStatus  == CustVendNegInstStatus::Honored  &&
                      paymBOELocal.TransDate             >= _fromDate                       &&
                      paymBOELocal.TransDate             <= _toDate                         &&
                      paymBOELocal.LastSettleVoucher     == paymBOE.LastSettleVoucher;

            return paymBOELocal.RecId && paymBOELocal.RecId == paymBOE.RecId;
        }

        void processSettlement(VendSettlement _settlement, int _type)
        {
            if (! _settlement.RecId || setVendSettlement.in(_settlement.RecId))
            {
                return;
            }

            setVendSettlement.add(_settlement.RecId);

            paymentDateLocal        = _settlement.TransDate;
            settleAmountMSTLocal    = _settlement.SettleAmountMST;
            exceededDaysBaseDate    = calculationMethod == DueDateComplianceCalculationMethod_ES::InvoiceDate ? invoices.TransDate : dueDateLocal;

            if (voucherCurrent != invoices.Voucher)
            {
                totalPaymentsCurrentPeriod          += voucherPaymentsCurrentPeriod > 0.00 ? voucherPaymentsCurrentPeriod : 0.00;
                totalPaymentsComparativePeriod      += voucherPaymentsComparativePeriod > 0.00 ? voucherPaymentsComparativePeriod : 0.00;
                totalAmountWithinCurrentPeriod      += voucherAmountWithinCurrentPeriod > 0.00 ? voucherAmountWithinCurrentPeriod : 0.00;
                totalAmountWithinComparativePeriod  += voucherAmountWithinComparativePeriod > 0.00 ? voucherAmountWithinComparativePeriod : 0.00;
                totalAmountOutsideCurrentPeriod     += voucherAmountOutsideCurrentPeriod > 0.00 ? voucherAmountOutsideCurrentPeriod : 0.00;
                totalAmountOutsideComparativePeriod += voucherAmountOutsideComparativePeriod > 0.00 ? voucherAmountOutsideComparativePeriod : 0.00;

                voucherCurrent = invoices.Voucher;

                voucherPaymentsCurrentPeriod = 0.00;
                voucherPaymentsComparativePeriod = 0.00;
                voucherAmountWithinCurrentPeriod = 0.00;
                voucherAmountWithinComparativePeriod = 0.00;
                voucherAmountOutsideCurrentPeriod = 0.00;
                voucherAmountOutsideComparativePeriod = 0.00;
            }

            if ((_type == 1 || isPromissoryNoteSettledInPeriod(fromDateCurrent, toDateCurrent)) &&
                _settlement.TransDate      >= fromDateCurrent                                   &&
                _settlement.TransDate      <= toDateCurrent)
            {
                exceededDaysByAmountPaidCurrentPeriod += this.calculateExceededDaysByAmountPaid(dueDateLocal, paymentDateLocal, settleAmountMSTLocal, exceededDaysBaseDate);
                voucherPaymentsCurrentPeriod += this.calculateTotalPayment(settleAmountMSTLocal);
                voucherAmountWithinCurrentPeriod += this.calculateTotalPaymentWithinPeriod(dueDateLocal, paymentDateLocal, settleAmountMSTLocal);
                voucherAmountOutsideCurrentPeriod += this.calculateTotalPaymentOutsidePeriod(dueDateLocal, paymentDateLocal, settleAmountMSTLocal);
            }

            if (!firstDateComparative || invoices.TransDate < firstDateComparative)
            {
                firstDateComparative = invoices.TransDate;
            }
            // Comparative period values are only calculated in case todate is set
            if (toDateComparative                                                                       &&
                (_type == 1 || isPromissoryNoteSettledInPeriod(fromDateComparative, toDateComparative)) &&
                _settlement.TransDate      >= fromDateComparative                                       &&
                _settlement.TransDate      <= toDateComparative)
            {
                exceededDaysByAmountPaidComparativePeriod += this.calculateExceededDaysByAmountPaid(dueDateLocal, paymentDateLocal, settleAmountMSTLocal, exceededDaysBaseDate);
                voucherPaymentsComparativePeriod += this.calculateTotalPayment(settleAmountMSTLocal);
                voucherAmountWithinComparativePeriod += this.calculateTotalPaymentWithinPeriod(dueDateLocal, paymentDateLocal, settleAmountMSTLocal);
                voucherAmountOutsideComparativePeriod += this.calculateTotalPaymentOutsidePeriod(dueDateLocal, paymentDateLocal, settleAmountMSTLocal);
            }
        }

        fromDateCurrent = contract.parmFromDateCurrent();
        toDateCurrent = contract.parmToDateCurrent();
        fromDateComparative = contract.parmFromDateComparative();
        toDateComparative = contract.parmToDateComparative();
        calculationMethod = contract.parmCalculationMethod();

        queryRun = new QueryRun(this.updateQuery(this.parmQuery()));
        boolean isEmpty = true;
        qbds = queryRun.query().dataSourceTable(tableNum(VendTrans));
        if (qbds)
        {
            qbr = SysQuery::findOrCreateRange(qbds, fieldNum(VendTrans, AccountNum));
            accountNumber = qbr.value();

            QueryBuildRange vendTransRangeApproved = SysQuery::findOrCreateRange(qbds, fieldNum(VendTrans, Approved));
            isVendTransApproved = vendTransRangeApproved.value();
            if (isVendTransApproved)
            {
                isApproved  = str2Enum(isApproved, isVendTransApproved);
            }
        }

        while (queryRun.next())
        {
            isEmpty = false;
            if (queryRun.changed(tablenum(VendTrans), 1))
            {
                invoices = queryRun.get(tablenum(VendTrans), 1);

                vendInvoiceJours    = VendInvoiceJour::findFromVendTransVoucher(invoices.Invoice,
                                                                                invoices.Voucher,
                                                                                invoices.TransDate,
                                                                                invoices.AccountNum);
            }

            paymRegular = queryRun.get(tablenum(VendTrans), 2);
            paymOffset  = queryRun.get(tablenum(VendTrans), 3);
            paymBOE     = queryRun.get(tablenum(VendTrans), 4);

            dueDateLocal = this.getAllowedDueDate(vendInvoiceJours, invoices.TransDate);
            if (!dueDateLocal)
            {
                continue;
            }

            if (paymRegular.RecId)
            {
                processSettlement(queryRun.get(tablenum(VendSettlement), 1), 1);
            }
            if (paymBOE.RecId)
            {
                processSettlement(queryRun.get(tablenum(VendSettlement), 2), 2);
            }
        }
        if (isEmpty)
        {
            tmpDueDateCompliance_ES.clear();
            tmpDueDateCompliance_ES.CurrentPeriod = this.getCurrentPeriod();
            tmpDueDateCompliance_ES.ComparativePeriod = this.getComparativePeriod();
            tmpDueDateCompliance_ES.insert();
        }
        else
        {
            exceededDaysByAmountPaidCurrentPeriod = abs(exceededDaysByAmountPaidCurrentPeriod);
            exceededDaysByAmountPaidComparativePeriod = abs(exceededDaysByAmountPaidComparativePeriod);

            totalPaymentsCurrentPeriod          += voucherPaymentsCurrentPeriod > 0.00 ? voucherPaymentsCurrentPeriod : 0.00;
            totalPaymentsComparativePeriod      += voucherPaymentsComparativePeriod > 0.00 ? voucherPaymentsComparativePeriod : 0.00;
            totalAmountWithinCurrentPeriod      += voucherAmountWithinCurrentPeriod > 0.00 ? voucherAmountWithinCurrentPeriod : 0.00;
            totalAmountWithinComparativePeriod  += voucherAmountWithinComparativePeriod > 0.00 ? voucherAmountWithinComparativePeriod : 0.00;
            totalAmountOutsideCurrentPeriod     += voucherAmountOutsideCurrentPeriod > 0.00 ? voucherAmountOutsideCurrentPeriod : 0.00;
            totalAmountOutsideComparativePeriod += voucherAmountOutsideComparativePeriod > 0.00 ? voucherAmountOutsideComparativePeriod : 0.00;

            tmpDueDateCompliance_ES.CurrentPeriod       = this.getCurrentPeriod();
            tmpDueDateCompliance_ES.ComparativePeriod   = this.getComparativePeriod();

            tmpDueDateCompliance_ES.TotalAmountWithinCurrentPeriod = totalAmountWithinCurrentPeriod;
            tmpDueDateCompliance_ES.TotalAmountWithinComparativePeriod = totalAmountWithinComparativePeriod;
            tmpDueDateCompliance_ES.TotalAmountOutsideCurrentPeriod = totalAmountOutsideCurrentPeriod;
            tmpDueDateCompliance_ES.TotalAmountOutsideComparativePeriod = totalAmountOutsideComparativePeriod;
            tmpDueDateCompliance_ES.TotalPaymentCurrentPeriod = totalPaymentsCurrentPeriod;
            tmpDueDateCompliance_ES.TotalPaymentComparativePeriod = totalPaymentsComparativePeriod;

            tmpDueDateCompliance_ES.PercentageWithinCurrentPeriod = this.getPercentageWithinCurrentPeriod();
            tmpDueDateCompliance_ES.PercentageWithinComparativePeriod = this.getPercentageWithinComparativePeriod();
            tmpDueDateCompliance_ES.PercentageOutsideCurrentPeriod = this.getPercentageOutsideCurrentPeriod();
            tmpDueDateCompliance_ES.PercentageOutsideComparativePeriod = this.getPercentageOutsideComparativePeriod();

            tmpDueDateCompliance_ES.OutstandingAmountCurrentPeriod = this.getTotalOutstandingCurrentPeriod();
            tmpDueDateCompliance_ES.OutstandingAmountComparativePeriod = this.getTotalOutstandingComparativePeriod();

            tmpDueDateCompliance_ES.RatioPaidCurrentPeriod = this.getRatioPaidCurrentPeriod();
            tmpDueDateCompliance_ES.RatioPaidComparativePeriod = this.getRatioPaidComparativePeriod();
            tmpDueDateCompliance_ES.RatioOutstandingCurrentPeriod = this.getRatioOutstandingCurrentPeriod();
            tmpDueDateCompliance_ES.RatioOutstandingComparativePeriod = this.getRatioOutstandingComparativePeriod();

            tmpDueDateCompliance_ES.WATECurrentPeriod = this.getWATECurrentPeriod();
            tmpDueDateCompliance_ES.WATEComparativePeriod = this.getWATEComparativePeriod();

            tmpDueDateCompliance_ES.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllowedDueDate</Name>
				<Source><![CDATA[
    private TransDate getAllowedDueDate(VendInvoiceJour _vendInvoiceJour, TransDate _transDate)
    {
        InventItemGroupItem inventItemGroupItem;
        PaymDueDateLimit_ES itemDueDateLimit;
        VendInvoiceTrans    vendInvoiceTrans;
        InventItemGroup     inventItemGroup;
        TransDate           deliveryDate;
        TransDate           lastValidDate;
        PaymTerm            paymTerm;

        paymTerm = PaymTerm::find(_vendInvoiceJour.Payment);
        if (paymTerm.UseDeliveryDateForDueDate_ES)
        {
            deliveryDate = _vendInvoiceJour.DeliveryDate_ES;
        }
        else
        {
            deliveryDate = _transDate;
        }

        if (deliveryDate)
        {
            if (paymTerm.DueDateLimitGroupId_ES)
            {
                lastValidDate = PaymDueDateLimit_ES::getCurrentValues(paymTerm.DueDateLimitGroupId_ES).getLastValidDate(deliveryDate);
            }

            while select PeriodUnit, QtyUnit from itemDueDateLimit
                where itemDueDateLimit.GroupId             != paymTerm.DueDateLimitGroupId_ES
                exists join inventItemGroup
                    where itemDueDateLimit.GroupId         == inventItemGroup.DueDateLimitGroupId_ES
                exists join inventItemGroupItem
                    where inventItemGroup.ItemGroupId      == inventItemGroupItem.ItemGroupId
                exists join vendInvoiceTrans
                   where inventItemGroupItem.ItemId        == vendInvoiceTrans.ItemId
                        && inventItemGroupItem.ItemDataAreaId   == vendInvoiceTrans.DataAreaId
                        && vendInvoiceTrans.PurchID             == _vendInvoiceJour.PurchId
                        && vendInvoiceTrans.InvoiceId           == _vendInvoiceJour.InvoiceId
                        && vendInvoiceTrans.InvoiceDate         == _vendInvoiceJour.InvoiceDate
                        && vendInvoiceTrans.NumberSequenceGroup == _vendInvoiceJour.NumberSequenceGroup
                        && vendInvoiceTrans.InternalInvoiceId   == _vendInvoiceJour.InternalInvoiceId
            {
                if (!lastValidDate || (itemDueDateLimit && itemDueDateLimit.getLastValidDate(deliveryDate) < lastValidDate))
                {
                    lastValidDate = itemDueDateLimit.getLastValidDate(deliveryDate);
                }
            }
        }

        return lastValidDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getComparativePeriod</Name>
				<Source><![CDATA[
    private str getComparativePeriod()
    {
        FromDate    fromDate;
        str         returnString;

        // Not set - show the date of the first transaction.
        fromDate = fromDateComparative ? fromDateComparative : firstDateComparative;

        returnString = strFmt(
            "%1 - %2",
            toDateComparative ? fromDate : dateNull(),
            toDateComparative);

        return returnString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPeriod</Name>
				<Source><![CDATA[
    private str getCurrentPeriod()
    {
        return strFmt("%1 - %2", fromDateCurrent, toDateCurrent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMaxDueLimit</Name>
				<Source><![CDATA[
    private int getMaxDueLimit()
    {
        PaymDueDateLimitValues_ES limitValues;

        if (!maxDueLimit)
        {
            select maxof(QtyUnit) from limitValues
                where limitValues.PeriodUnit == DueDateLimitPeriodUnit_ES::Day;

            maxDueLimit = limitValues.QtyUnit;

            select maxof(QtyUnit) from limitValues
                where limitValues.PeriodUnit == DueDateLimitPeriodUnit_ES::Month;

            if (limitValues.QtyUnit * MaxMonthDays > maxDueLimit)
            {
                maxDueLimit = limitValues.QtyUnit * MaxMonthDays;
            }
        }

        return maxDueLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinDueLimit</Name>
				<Source><![CDATA[
    private int getMinDueLimit()
    {
        PaymDueDateLimitValues_ES limitValues;

        if (!minDueLimit)
        {
            select minof(QtyUnit) from limitValues
                where limitValues.PeriodUnit == DueDateLimitPeriodUnit_ES::Day;

            minDueLimit = limitValues.QtyUnit;

            select minof(QtyUnit) from limitValues
                where limitValues.PeriodUnit == DueDateLimitPeriodUnit_ES::Month;

            if (!minDueLimit || (limitValues.QtyUnit && (limitValues.QtyUnit * MinMonthDays < minDueLimit)))
            {
                minDueLimit = limitValues.QtyUnit * MinMonthDays;
            }
        }

        return minDueLimit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOutstandingAmountInPeriod</Name>
				<Source><![CDATA[
    private AmountMST getOutstandingAmountInPeriod(FromDate _fromDate, ToDate _toDate)
    {
        VendTrans               vendTrans;
        VendTable               vendTable;
        VendTable               vendTableTmp;
        VendInvoiceJour         vendInvoiceJour;
        AmountMST               outstandingAmount;
        Query                   queryTmp;
        QueryRun                queryRunTmp;


        outstandingAmountByOutstandingDaysTmp = 0;

        queryTmp = new Query();
        queryTmp.addDataSource(tableNum(VendTable)).addRange(fieldNum(VendTable, AccountNum)).value(accountNumber);
        queryRunTmp = new QueryRun(queryTmp);

        vendTableTmp.setTmp();

        while (queryRunTmp.next())
        {
            vendTable = queryRunTmp.getNo(1);

            vendTableTmp.AccountNum = vendTable.AccountNum;
            vendTableTmp.Party      = vendTable.Party;
            vendTableTmp.doInsert();
        }

        while select TableId from vendTableTmp
            join vendTrans
            where vendTrans.AccountNum == vendTableTmp.AccountNum
                && vendTrans.Invoice
                && (isApproved == NoYesUnchanged::Unchanged || vendTrans.Approved == any2Enum(isApproved))
            join vendInvoiceJour
            where vendTrans.AccountNum    == vendInvoiceJour.InvoiceAccount                                                             &&
                  vendTrans.TransDate     == vendInvoiceJour.InvoiceDate                                                                &&
                  vendTrans.Invoice       == vendInvoiceJour.InvoiceId                                                                  &&
                  vendTrans.Voucher       == vendInvoiceJour.LedgerVoucher                                                              &&
                  (!_fromDate || ((useDueDate && vendTrans.DueDate >= _fromDate) || (!useDueDate && vendTrans.TransDate >= _fromDate))) &&
                  (!_toDate   || ((useDueDate && vendTrans.DueDate <= _toDate)   || (!useDueDate && vendTrans.TransDate <= _toDate)))
        {
            outstandingAmount += this.calcOutstandingAmount(_fromDate, _toDate, vendInvoiceJour, vendTrans);
        }

        return outstandingAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPercentageOutsideComparativePeriod</Name>
				<Source><![CDATA[
    private AmountMST getPercentageOutsideComparativePeriod()
    {
        AmountMST   periodAmount;

        if (totalPaymentsComparativePeriod)
        {
            periodAmount = totalAmountOutsideComparativePeriod / totalPaymentsComparativePeriod * 100.00;
        }
        return periodAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPercentageOutsideCurrentPeriod</Name>
				<Source><![CDATA[
    private AmountMST getPercentageOutsideCurrentPeriod()
    {
        if (totalPaymentsCurrentPeriod)
        {
            return totalAmountOutsideCurrentPeriod / totalPaymentsCurrentPeriod * 100.00;
        }
        return 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPercentageWithinComparativePeriod</Name>
				<Source><![CDATA[
    private AmountMST getPercentageWithinComparativePeriod()
    {
        if (totalPaymentsComparativePeriod)
        {
            return totalAmountWithinComparativePeriod / totalPaymentsComparativePeriod * 100.00;
        }
        return 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPercentageWithinCurrentPeriod</Name>
				<Source><![CDATA[
    private AmountMST getPercentageWithinCurrentPeriod()
    {
        if (totalPaymentsCurrentPeriod)
        {
            return totalAmountWithinCurrentPeriod / totalPaymentsCurrentPeriod * 100.00;
        }
        return 0.00;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpDueDateCompliance_ES</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>TmpDueDateCompliance_ES</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>TmpDueDateCompliance_ES</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(TmpDueDateCompliance_ES))
    ]
    public TmpDueDateCompliance_ES getTmpDueDateCompliance_ES()
    {
        select tmpDueDateCompliance_ES;
        return tmpDueDateCompliance_ES;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOutstandingComparativePeriod</Name>
				<Source><![CDATA[
    private AmountMST getTotalOutstandingComparativePeriod()
    {
        // Comparative period values are only calculated in case todate is set
        if (toDateComparative)
        {
            totalOutstandingAmountComparativePeriod = this.getOutstandingAmountInPeriod(fromDateComparative, toDateComparative);
            outstandingAmountByOutstandingDaysComparativePeriod = outstandingAmountByOutstandingDaysTmp;
        }

        return totalOutstandingAmountComparativePeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTotalOutstandingCurrentPeriod</Name>
				<Source><![CDATA[
    private AmountMST getTotalOutstandingCurrentPeriod()
    {
        totalOutstandingAmountCurrentPeriod = this.getOutstandingAmountInPeriod(fromDateCurrent, toDateCurrent);
        outstandingAmountByOutstandingDaysCurrentPeriod = outstandingAmountByOutstandingDaysTmp;

        return totalOutstandingAmountCurrentPeriod;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWATEComparativePeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates average payment period to suppliers for the comparative period.
    /// </summary>
    /// <returns>
    ///    Calculated average payment period to suppliers for the comparative period.
    /// </returns>
    /// <remarks>
    ///    Previously this parameter was named Weighted Average Term Exceeded (WATE).
    /// </remarks>
    private AmountMST getWATEComparativePeriod()
    {
        AmountMST   ret;

        if (totalPaymentsComparativePeriod + totalOutstandingAmountComparativePeriod)
        {
            ret = (exceededDaysByAmountPaidComparativePeriod + outstandingAmountByOutstandingDaysComparativePeriod) /
              (totalPaymentsComparativePeriod + totalOutstandingAmountComparativePeriod);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWATECurrentPeriod</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates average payment period to suppliers for the current period.
    /// </summary>
    /// <returns>
    ///    Calculated average payment period to suppliers for the current period.
    /// </returns>
    /// <remarks>
    ///    Previously this parameter was named Weighted Average Term Exceeded (WATE).
    /// </remarks>
    private AmountMST getWATECurrentPeriod()
    {
        AmountMST   ret;

        if (totalPaymentsCurrentPeriod + totalOutstandingAmountCurrentPeriod)
        {
            ret =  (exceededDaysByAmountPaidCurrentPeriod + outstandingAmountByOutstandingDaysCurrentPeriod) /
               (totalPaymentsCurrentPeriod + totalOutstandingAmountCurrentPeriod);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRatioOutstandingComparativePeriod</Name>
				<Source><![CDATA[
    private AmountMST getRatioOutstandingComparativePeriod()
    {
        AmountMST   ret;

        if (totalOutstandingAmountComparativePeriod)
        {
            ret = outstandingAmountByOutstandingDaysComparativePeriod / totalOutstandingAmountComparativePeriod;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRatioOutstandingCurrentPeriod</Name>
				<Source><![CDATA[
    private AmountMST getRatioOutstandingCurrentPeriod()
    {
        AmountMST   ret;

        if (totalOutstandingAmountCurrentPeriod)
        {
            ret = outstandingAmountByOutstandingDaysCurrentPeriod / totalOutstandingAmountCurrentPeriod;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRatioPaidComparativePeriod</Name>
				<Source><![CDATA[
    private AmountMST getRatioPaidComparativePeriod()
    {
        AmountMST   ret;

        if (totalPaymentsComparativePeriod)
        {
            ret = exceededDaysByAmountPaidComparativePeriod / totalPaymentsComparativePeriod;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRatioPaidCurrentPeriod</Name>
				<Source><![CDATA[
    private AmountMST getRatioPaidCurrentPeriod()
    {
        AmountMST   ret;

        if (totalPaymentsCurrentPeriod)
        {
            ret = exceededDaysByAmountPaidCurrentPeriod / totalPaymentsCurrentPeriod;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <remarks>
    /// Provides the ability to write the report business logic. This method will be called by
    /// SSRS at runtime. The method should compute data and populate the data tables that will be
    /// returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        this.fetch();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    private Query updateQuery(Query _query)
    {
        if (fromDateCurrent && fromDateComparative)
        {
            this.addTransDateRange(_query, 1, queryRange(fromDateCurrent, ''));
            this.addTransDateRange(_query, 1, queryRange(fromDateComparative, ''));
            this.addTransDateRange(_query, 2, queryRange(fromDateCurrent, ''));
            this.addTransDateRange(_query, 2, queryRange(fromDateComparative, ''));
        }

        if (toDateCurrent && toDateComparative)
        {
            this.addTransDateRange(_query, 1, queryRange('', toDateCurrent));
            this.addTransDateRange(_query, 1, queryRange('', toDateComparative));
            this.addTransDateRange(_query, 2, queryRange('', toDateCurrent));
            this.addTransDateRange(_query, 2, queryRange('', toDateComparative));
        }

        this.addHiddenVendTransRange(_query, fieldNum(VendTrans, Invoice),   SysQuery::valueNotEmptyString());
        this.addHiddenVendTransRange(_query, fieldNum(VendTrans, DueDate),   SysQuery::valueNotEmptyString());
        this.addHiddenVendTransRange(_query, fieldNum(VendTrans, TransType), SysQuery::value(LedgerTransType::None));
        this.addHiddenVendTransRange(_query, fieldNum(VendTrans, TransType), SysQuery::value(LedgerTransType::Purch));
        this.addHiddenVendTransRange(_query, fieldNum(VendTrans, TransType), SysQuery::value(LedgerTransType::Vend));
        this.addHiddenVendTransRange(_query, fieldNum(VendTrans, TransType), SysQuery::value(LedgerTransType::GeneralJournal));

        return _query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>