<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineReallocatorBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineReallocatorBase</c> class is responsible for reallocating a work line.
/// </summary>
public abstract class WHSWorkLineReallocatorBase
{
    protected WHSWorkLine         workLineToReallocate;
    protected LineNum             lastLineNumOfWorkBeforeReallocatedLinesAreCreated;
    protected WHSWorkException    workException;
    protected Qty                 initialWorkLineInventQty, inventQtyToReallocate, reallocatedInventQty;
    protected WHSWorkLineCache    workLineCache;
    protected WHSWorkTable        workTable;
    protected InventQty           shortPickInventQty;
    protected WHSUserId           userId;

    internal protected InventHandlingQty shortPickInventHandlingQty;
    internal protected InventHandlingQty initialWorkLineInventHandlingQty;
    internal protected InventHandlingQty inventHandlingQtyToReallocate;
    internal protected InventHandlingQty reallocatedInventHandlingQty;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReallocateItemId</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal ItemId parmReallocateItemId()
    {
        return workLineToReallocate.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsReallocateCWItem</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal boolean parmIsReallocateCWItem()
    {
        return PdsGlobal::pdsIsCWItem(this.parmReallocateItemId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    protected WHSUserId parmUserId(WHSUserId _userId = userId)
    {
        userId = _userId;

        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitialWorkLineInventQty</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Please file an extensibility request if access is required.', false, 30\9\2019)]
    protected Qty parmInitialWorkLineInventQty(Qty _initialWorkLineInventQty = initialWorkLineInventQty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());

        return this.parmInitialWorkLineInventHandlingQty(_initialWorkLineInventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitialWorkLineInventHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal protected InventHandlingQty parmInitialWorkLineInventHandlingQty(InventHandlingQty _initialWorkLineInventHandlingQty = initialWorkLineInventHandlingQty)
    {
        initialWorkLineInventHandlingQty = _initialWorkLineInventHandlingQty;

        return initialWorkLineInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkException</Name>
				<Source><![CDATA[
    protected WHSWorkException parmWorkException(WHSWorkException _workException = workException)
    {
        workException = _workException;

        return workException;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkTable</Name>
				<Source><![CDATA[
    protected WHSWorkTable parmWorkTable(WHSWorkTable _workTable = workTable)
    {
        workTable = _workTable;

        return workTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShortPickInventQty</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Please file an extensibility request if access is required.', false, 30\9\2019)]
    protected InventQty parmShortPickInventQty(InventQty _shortPickInventQty = shortPickInventQty)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());

        return this.parmShortPickInventHandlingQty(_shortPickInventQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmShortPickInventHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal protected InventHandlingQty parmShortPickInventHandlingQty(InventHandlingQty _shortPickInventHandlingQty = shortPickInventHandlingQty)
    {
        shortPickInventHandlingQty = _shortPickInventHandlingQty;

        return shortPickInventHandlingQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkLineToReallocate</Name>
				<Source><![CDATA[
    protected WHSWorkLine parmWorkLineToReallocate(WHSWorkLine _workLineToReallocate = workLineToReallocate)
    {
        workLineToReallocate = _workLineToReallocate;
        lastLineNumOfWorkBeforeReallocatedLinesAreCreated = WHSWorkLine::lastLineNum(workLineToReallocate.WorkId);
        workLineCache = WHSWorkLineCache::newFromWorkId(workLineToReallocate.WorkId);
        userId = workLineToReallocate.UserId;

        return workLineToReallocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLine</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the reallocateWorkLineHandlingQty method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public abstract InventQty reallocateWorkLine()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reallocateWorkLineHandlingQty</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public InventHandlingQty reallocateWorkLineHandlingQty()
    {
        return this.reallocateWorkLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkLineReallocationValidator</Name>
				<Source><![CDATA[
    protected abstract WHSWorkLineReallocationValidator getWorkLineReallocationValidator()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateQtyAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the available reserved quantity on the above location dimensions level
    /// of the initial order line for which work has not yet been created.
    /// </summary>
    /// <returns>The available reserved quantity remaining to create work for</returns>
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the calculateHandlingQtyAvailForWorkCreationAboveLocationDims method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    public InventQty calculateQtyAvailForWorkCreationAboveLocationDims()
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());

        return this.calculateHandlingQuantityAvailForWorkCreationAboveLocationDims();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHandlingQtyAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the available reserved handling quantity on the above location dimensions level
    /// of the initial order line for which work has not yet been created.
    /// </summary>
    /// <returns>
    /// The available reserved handling quantity remaining to create work for.
    /// </returns>
    [Hookable(false)]
    public InventHandlingQty calculateHandlingQtyAvailForWorkCreationAboveLocationDims()
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            return this.calculateHandlingQuantityAvailForWorkCreationAboveLocationDims();
        }

        return this.calculateQtyAvailForWorkCreationAboveLocationDims();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateHandlingQuantityAvailForWorkCreationAboveLocationDims</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal protected InventHandlingQty calculateHandlingQuantityAvailForWorkCreationAboveLocationDims()
    {
        WHSLoadLine loadLine = WHSLoadLine::findbyRecId(workLineToReallocate.LoadLineRefRecId);

        InventHandlingQty availQtyForWorkCreation, qtyNotPhysicallyReserved;

        [availQtyForWorkCreation, qtyNotPhysicallyReserved] = loadLine.calculateQtyDemandForWorkAndQtyNotPhysRes(false);

        return availQtyForWorkCreation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustHandlingQuantitiesPostShortPickConfirmation</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal protected void adjustHandlingQuantitiesPostShortPickConfirmation(InventHandlingQty _reallocatedInventHandlingQty, InventHandlingQty _handlingQuantityNotReallocated)
    {
        this.adjustAllHandlingQuantitiesPostShortPickConfirmation(_reallocatedInventHandlingQty, _handlingQuantityNotReallocated);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustAllHandlingQuantitiesPostShortPickConfirmation</Name>
				<Source><![CDATA[
    private void adjustAllHandlingQuantitiesPostShortPickConfirmation(InventHandlingQty _reallocatedInventHandlingQty, InventHandlingQty _handlingQuantityNotReallocated)
    {
        ttsbegin;

        if (_reallocatedInventHandlingQty > 0)
        {
            this.cancelAndRecreateRemainingLinesHandlingQty(-_handlingQuantityNotReallocated);
        }

        if (_handlingQuantityNotReallocated > 0)
        {
            this.adjustContainerLinesHandlingQuantitiesOfReallocatedWorkLine(-_handlingQuantityNotReallocated);
            this.adjustPrintAndCustomLinesHandlingQuantities(-_handlingQuantityNotReallocated);

            boolean shouldSyncWorkHeaderStatus;

            //If not any quantity was reallocated, we have not executed yet the logic to update the quantities of the lines starting from the first put and we need to do it now.
            if (_reallocatedInventHandlingQty <= 0)
            {
                this.adjustWorkLineAndWITHandlingQuantitiesForAllLinesAfterFirstPut(-_handlingQuantityNotReallocated);
                shouldSyncWorkHeaderStatus = this.adjustClusteredWorkLines() || this.shouldSyncWorkHeaderStatusWhenNoQtyReallocated();
            }

            if (shouldSyncWorkHeaderStatus)
            {
                WHSWorkTable::updateWorkStatusFromWorkLines(workLineToReallocate.WorkId, userId);
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSyncWorkHeaderStatusWhenNoQtyReallocated</Name>
				<Source><![CDATA[
    protected boolean shouldSyncWorkHeaderStatusWhenNoQtyReallocated()
    {
        /*
          When qtywork = 0 on the short pick work line and no quantity was reallocated,
          the work status of final put work line could be closed when there is only one pick line.
          In this scenario, we need update work status.
        */
        return workLineToReallocate.QtyWork == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustClusteredWorkLines</Name>
				<Source><![CDATA[
    protected boolean adjustClusteredWorkLines()
    {
        WHSWorkLine         clusteredWorkLines;
        WHSWorkClusterLine  clusterLine, workClusterLine;
        InventDim           inventDim;
        InventDim           workLineInventDim = workLineToReallocate.inventDim();
        InventDimParm       dimParm = WhsReservationHierarchyInventDimUtil::initInventDimParmAboveLocation(InventTable::find(workLineToReallocate.ItemId));
        boolean				workLineCancelled;

        while select WorkId, LineNum, InventQtyRemain, ItemId from clusteredWorkLines
            where  clusteredWorkLines.WorkType      == WHSWorkType::Pick
                && clusteredWorkLines.WMSLocationId == workLineToReallocate.WMSLocationId
                && clusteredWorkLines.ItemId        == workLineToReallocate.ItemId
                && clusteredWorkLines.WorkId        != workLineToReallocate.WorkId
                && clusteredWorkLines.QtyRemain     != 0
            exists join workClusterLine
                where  workClusterLine.WorkId    == clusteredWorkLines.WorkId
                exists join clusterLine
                    where  clusterLine.ClusterId == workClusterLine.ClusterId
                        && clusterLine.WorkId    == workLineToReallocate.WorkId
            #InventDimExistsJoin(clusteredWorkLines.InventDimId, inventDim, workLineInventDim, dimParm)
        {
            WHSWorkLine::cancelLine(clusteredWorkLines.WorkId, clusteredWorkLines.LineNum, clusteredWorkLines.InventQtyRemain, clusteredWorkLines.ItemId, true, false, false, true);
            workLineCancelled = true;
        }

        return workLineCancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLoadLineHandlingQuantities</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal protected WHSLoadLine adjustLoadLineHandlingQuantities(WHSWorkLine _workLine, InventHandlingQty _inventHandlingQtyToAdjust, boolean _adjustLoadLineQty)
    {
        return this.adjustLoadLineAllQuantities(_workLine, _inventHandlingQtyToAdjust, _adjustLoadLineQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustLoadLineAllQuantities</Name>
				<Source><![CDATA[
    private WHSLoadLine adjustLoadLineAllQuantities(WHSWorkLine _workLine, InventHandlingQty _inventHandlingQtyToAdjust, boolean _adjustLoadLineQty)
    {
        if (_adjustLoadLineQty)
        {
            WHSLoadLine::updateWorkCreatedQtyAndQty(_workLine.LoadLineRefRecId, _inventHandlingQtyToAdjust, _workLine.InventDimId);
        }
        else
        {
            WHSLoadLine::updateWorkCreatedQty(_workLine.LoadLineRefRecId, _inventHandlingQtyToAdjust);
        }

        return WHSLoadLine::findbyRecId(_workLine.LoadLineRefRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustPrintAndCustomLinesHandlingQuantities</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal protected void adjustPrintAndCustomLinesHandlingQuantities(InventHandlingQty _inventHandlingQtyToAdjust)
    {
        this.adjustPrintAndCustomLinesAllQuantities(_inventHandlingQtyToAdjust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustPrintAndCustomLinesAllQuantities</Name>
				<Source><![CDATA[
    private void adjustPrintAndCustomLinesAllQuantities(InventHandlingQty _inventHandlingQtyToAdjust)
    {
        LineNum firstNonCancelledPutLineNumAfterReallocatedWorkLine = workLineCache.parmFirstPutLineNum();

        workLineToReallocate.adjustFollowingPrintAndCustomLineQuantities(firstNonCancelledPutLineNumAfterReallocatedWorkLine, _inventHandlingQtyToAdjust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustContainerLinesHandlingQuantitiesOfReallocatedWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal protected void adjustContainerLinesHandlingQuantitiesOfReallocatedWorkLine(InventHandlingQty _inventHandlingQtyToAdjust)
    {
        this.adjustContainerLinesAllQuantitiesOfReallocatedWorkLine(_inventHandlingQtyToAdjust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustContainerLinesAllQuantitiesOfReallocatedWorkLine</Name>
				<Source><![CDATA[
    private void adjustContainerLinesAllQuantitiesOfReallocatedWorkLine(InventHandlingQty _inventHandlingQtyToAdjust)
    {
        WHSContainerLine::adjustQuantityBasedOnWorkLine(workLineToReallocate, _inventHandlingQtyToAdjust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustWorkLineAndWITHandlingQuantitiesForAllLinesAfterFirstPut</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final internal protected void adjustWorkLineAndWITHandlingQuantitiesForAllLinesAfterFirstPut(InventHandlingQty _inventHandlingQtyToAdjust)
    {
        this.adjustWorkLineAndWITAllQuantitiesForAllLinesAfterFirstPut(_inventHandlingQtyToAdjust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustWorkLineAndWITAllQuantitiesForAllLinesAfterFirstPut</Name>
				<Source><![CDATA[
    private void adjustWorkLineAndWITAllQuantitiesForAllLinesAfterFirstPut(InventHandlingQty _inventHandlingQtyToAdjust)
    {
        WHSWorkLine workLineToUpdate;
        LineNum     firstPutLineNumAfterReallocatedWorkLine = workLineCache.parmFirstPutLineNum();

        while select forUpdate workLineToUpdate
            where workLineToUpdate.WorkId   == workLineToReallocate.WorkId
                && workLineToUpdate.LineNum >= firstPutLineNumAfterReallocatedWorkLine
        {
            this.adjustWorkLineAndWITHandlingQuantities(workLineToUpdate, _inventHandlingQtyToAdjust);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelAndRecreateRemainingLinesHandlingQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cancels all work lines that were not already canceled or closed, recreates them and
    /// updates the work inventory transactions line number accordingly.
    /// If needed, the quantity of the put and their following pick-put lines together with their work inventory transactions is updated too.
    /// </summary>
    /// <param name = "_inventHandlingQtyToAdjust">
    /// The handling quantity that was not possible to reallocate.
    /// </param>
    protected void cancelAndRecreateRemainingLinesHandlingQty(InventHandlingQty _inventHandlingQtyToAdjust)
    {
        this.cancelAndRecreateRemainingLinesHandlingQuantities(_inventHandlingQtyToAdjust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelAndRecreateRemainingLinesHandlingQuantities</Name>
				<Source><![CDATA[
    private void cancelAndRecreateRemainingLinesHandlingQuantities(InventHandlingQty _inventHandlingQtyToAdjust)
    {
        WHSWorkLine         workLineToCancel, newWorkLine;
        WHSWorkInventTrans  workInventTrans;
        LineNum             lastLineNumOfWorkWithReallocatedLines = WHSWorkLine::lastLineNum(workLineToReallocate.WorkId);
        LineNum             newLineNum = lastLineNumOfWorkWithReallocatedLines + 1;
        LineNum             firstPutLineNumAfterReallocatedWorkLine = workLineCache.parmFirstPutLineNum();

        while select forupdate workLineToCancel
            order by LineNum
            where workLineToCancel.WorkId == workLineToReallocate.WorkId
                && workLineToCancel.WorkStatus != WHSWorkStatus::Cancelled
                && workLineToCancel.WorkStatus != WHSWorkStatus::InProcess
                && workLineToCancel.WorkStatus != WHSWorkStatus::Closed
                && workLineToCancel.LineNum <= lastLineNumOfWorkBeforeReallocatedLinesAreCreated
                && workLineToCancel.LineNum != workLineToReallocate.LineNum
        {
            if ((_inventHandlingQtyToAdjust != 0)
                && (workLineToCancel.LineNum >= firstPutLineNumAfterReallocatedWorkLine))
            {
                this.adjustWorkLineAndWITHandlingQuantities(workLineToCancel, _inventHandlingQtyToAdjust);
            }

            newWorkLine.clear();
            buf2Buf(workLineToCancel, newWorkLine);
            newWorkLine.LineNum = newLineNum;
            newWorkLine.insert();

            this.updateReplWorkLink(workLineToCancel, newLineNum);

            while select forupdate workInventTrans
                where workInventTrans.WorkId == workLineToCancel.WorkId
                    && workInventTrans.LineNum == workLineToCancel.LineNum
            {
                workInventTrans.LineNum = newWorkLine.LineNum;
                workInventTrans.update();
            }

            newLineNum++;

            workLineToCancel.InventQtyRemain = 0;
            workLineToCancel.QtyRemain = 0;
            workLineToCancel.WorkStatus = WHSWorkStatus::Cancelled;
            workLineToCancel.update();
        }

        //The first (valid) put line has been copied to a new line number and the cache needs to be cleared.
        WHSWorkLineCache::remove(workLineToReallocate.WorkId);
        workLineCache = WHSWorkLineCache::newFromWorkId(workLineToReallocate.WorkId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReplWorkLink</Name>
				<Source><![CDATA[
    private void updateReplWorkLink(WHSWorkLine _workLineToCancel, LineNum _newLineNum)
    {
        if (_workLineToCancel.ReplenDemand)
        {
            WHSReplenWorkLink replenWorkLink;

            update_recordset replenWorkLink
                setting DemandLineNum = _newLineNum
                where replenWorkLink.DemandWorkId == _workLineToCancel.WorkId
                    && replenWorkLink.DemandLineNum == _workLineToCancel.LineNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustWorkLineAndWITQuantities</Name>
				<Source><![CDATA[
    [SysObsolete('Method is obsoleted to support catch weight items. Callers should redirect their calls to the adjustWorkLineAndWITHandlingQuantities method. Please file an extensibility request if other access is required.', false, 30\9\2019)]
    protected void adjustWorkLineAndWITQuantities(WHSWorkLine _workLine, Qty _inventQtyToAdjust)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId());
        
        this.adjustWorkLineAndWITAllQuantities(_workLine, _inventQtyToAdjust);
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustWorkLineAndWITHandlingQuantities</Name>
				<Source><![CDATA[
    protected void adjustWorkLineAndWITHandlingQuantities(WHSWorkLine _workLine, InventHandlingQty _inventHandlingQtyToAdjust)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightItemLogic(funcName(), this.parmReallocateItemId()))
        {
            this.adjustWorkLineAndWITAllQuantities(_workLine, _inventHandlingQtyToAdjust);
        }
        else
        {
            this.adjustWorkLineAndWITQuantities(_workLine, _inventHandlingQtyToAdjust);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustWorkLineAndWITAllQuantities</Name>
				<Source><![CDATA[
    private void adjustWorkLineAndWITAllQuantities(WHSWorkLine _workLine, InventHandlingQty _inventHandlingQtyToAdjust)
    {
        _workLine.adjustWorkLineQuantities(_inventHandlingQtyToAdjust);

        if (_workLine.WorkType == WHSWorkType::Pick)
        {
            _workLine.adjustWorkInventTransQuantitiesAndToLocation(workLineToReallocate.InventTransId, _inventHandlingQtyToAdjust, userId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkInventTransForReallocatedLine</Name>
				<Source><![CDATA[
    protected void createWorkInventTransForReallocatedLine(WHSWorkLine _reallocatedPickWorkLine)
    {
        WHSWorkInventTrans workInventTrans;

        workInventTrans.initFromWorkLine(_reallocatedPickWorkLine);

        if (workInventTrans.Qty)
        {
            workInventTrans.WorkHasReservation = NoYes::Yes;
            workInventTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReallocatedWorkLine</Name>
				<Source><![CDATA[
    protected WHSWorkLine initReallocatedWorkLine()
    {
        WHSWorkLine reallocatedWorkLine;

        reallocatedWorkLine.WorkId      = workLineToReallocate.WorkId;
        reallocatedWorkLine.WorkType    = WHSWorkType::Pick;
        reallocatedWorkLine.ItemId      = workLineToReallocate.ItemId;
        reallocatedWorkLine.Mandatory   = NoYes::Yes;
        reallocatedWorkLine.WorkClassId = workLineToReallocate.WorkClassId;
        reallocatedWorkLine.OrderNum    = workLineToReallocate.OrderNum;
        reallocatedWorkLine.LoadId      = workLineToReallocate.LoadId;
        reallocatedWorkLine.ShipmentId  = workLineToReallocate.ShipmentId;
        reallocatedWorkLine.fefoBatchId = workLineToReallocate.fefoBatchId;

        reallocatedWorkLine.LoadLineRefRecId = workLineToReallocate.LoadLineRefRecId;

        return reallocatedWorkLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineItemReallocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the item reallocation process that will be used, based on the selected work exception,
    /// the rights of the user running the process and the work table.
    /// </summary>
    /// <param name = "_workException">The selected work exception record</param>
    /// <param name = "_workUser">The work user processing the work</param>
    /// <param name = "_workTable">The work table being processed</param>
    /// <returns>The item reallocation process that can be used</returns>
    public static WHSItemReallocation determineItemReallocation(
                                                    WHSWorkException    _workException,
                                                    WHSWorkUser         _workUser,
                                                    WHSWorkTable        _workTable)
    {
        if (_workException.ItemReallocation == WHSItemReallocation::None)
        {
            return WHSItemReallocation::None;
        }

        WHSItemReallocation determinedReallocation = _workException.determineItemReallocationForWorkUser(_workUser);

        if (determinedReallocation == WHSItemReallocation::None)
        {
            WHSWorkCreateHistory::createWorkHistoryLine(
                                        _workTable.WorkBuildId,
                                        "@WAX:ReallocationCannotRunBecauseOfWorkUserPolicies",
                                        false);

            return WHSItemReallocation::None;
        }

        determinedReallocation = _workException.determineSupportedItemReallocationForWorkOrderType(_workTable.WorkTransType);

        if (determinedReallocation == WHSItemReallocation::None)
        {
            WHSWorkCreateHistory::createWorkHistoryLine(
                                        _workTable.WorkBuildId,
                                        "@WAX:AutoReallocationEnabledForSalesTransferIssueReplenishmentProdPick",
                                        false);

            WHSWorkCreateHistory::createWorkHistoryLine(
                                        _workTable.WorkBuildId,
                                        "@WAX:ManualReallocationEnabledForSalesTransferIssueAndRawMatPicking",
                                        false);

            return WHSItemReallocation::None;
        }

        return determinedReallocation;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>