<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdPostPurch_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class initialized to post withhold taxes for Purchase order invoice.Class extends from TaxWithholdPost_IN.
/// </summary>
class TaxWithholdPostPurch_IN extends TaxWithholdPost_IN
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInitializationClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the initialization class.
    /// </summary>
    /// <returns>
    /// The purch calculation tax object.
    /// </returns>
    protected Object getInitializationClass()
    {
        return purchCalcTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original heading rec id.
    /// </summary>
    /// <returns>
    /// The original heading rec id.
    /// </returns>
    protected RefRecId getOriginalHeadingRecId()
    {
        return origHeadingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalHeadingTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the original heading table id.
    /// </summary>
    /// <returns>
    /// The original heading table id.
    /// </returns>
    protected RefTableId getOriginalHeadingTableId()
    {
        return origHeadingTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new instance of the <c>TaxWithholdPostPurch_IN</c> class.
    /// </summary>
    /// <param name="_post">
    /// Yes if the instance will be posted.
    /// </param>
    /// <param name="_initializationClass">
    /// The initialization class.
    /// </param>
    /// <param name="_tmpTaxWithholdWorkTrans">
    /// The temporary tax withhold work transaction.
    /// </param>
    void new(
        NoYes                       _post,
        Object                      _initializationClass,
        TmpTaxWithholdWorkTrans_IN  _tmpTaxWithholdWorkTrans = null)
    {
        purchCalcTax = _initializationClass as PurchCalcTax;
        if (purchCalcTax == null)
        {
            throw error("@SYS95118");
        }

        post                 = _post;
        taxWithholdWorkTrans = _tmpTaxWithholdWorkTrans;

        taxModuleType       = TaxModuleType::PurchInvoice;

        headingTableId      = purchCalcTax.tableId();
        headingRecId        = purchCalcTax.recID();
        origHeadingTableId  = purchCalcTax.origHeadingTableID();
        origHeadingRecId    = purchCalcTax.origHeadingRecID();

        if (!headingRecId)
        {
            throw error("@SYS18447");
        }
        else
        {
            taxDate             = purchCalcTax.invoiceDate();
            sourceCurrencyCode  = purchCalcTax.currencyCode();
            triangulation       = purchCalcTax.triangulation(taxDate);
        }

        this.setExchRates(purchCalcTax.currencyCode(),
                            purchCalcTax.exchRate(purchCalcTax.invoiceDate()),
                            purchCalcTax.exchRateSecondary(purchCalcTax.invoiceDate()),
                            Currency::noYes2UnknownNoYes(purchCalcTax.triangulation(purchCalcTax.invoiceDate())),
                            purchCalcTax.invoiceDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>postToTaxWithHoldTrans</Name>
				<Source><![CDATA[
    protected void postToTaxWithHoldTrans(LedgerPostingController _ledgerPostingController, TaxWithholdTrans_IN _taxWithholdTrans, CurrencyExchangeHelper _exchangeRateHelper, container _taxWithholdData)
    {
        VendInvoiceTrans            vendInvoiceTrans;
        VendTable                   vendTableLoc;
        TaxInformationVendTable_IN  taxInformationVendTableLoc;
        TransTaxInformation         transTaxInformationLoc;
        TaxWithholdTable            taxWithholdTable;

        taxWithholdTable = TaxWithholdTable::find(_taxWithholdTrans.TaxWithholdCode);

        if (_taxWithholdTrans.SourceTableId == tableNum(PurchLine))
        {
            vendInvoiceTrans = VendInvoiceTrans::findRecId(_taxWithholdTrans.SourceRecId);
        }
        else if (_taxWithholdTrans.SourceTableId == tableNum(VendInvoiceTrans))
        {
            vendInvoiceTrans = VendInvoiceTrans::findRecId(_taxWithholdTrans.SourceRecId);
        }

        else if (_taxWithholdTrans.SourceTableId == tableNum(Vendinvoiceinfoline))
        {
            vendInvoiceTrans = VendInvoiceTrans::findRecId(_taxWithholdTrans.SourceRecId);
        }

        _taxWithholdTrans.VendAccount = vendInvoiceTrans.vendTable_InvoiceAccount().AccountNum;

        vendTableLoc = VendTable::find(_taxWithholdTrans.VendAccount);
        taxInformationVendTableLoc           = vendTableLoc.getTaxInformationVendTable_IN();

        _taxWithholdTrans.pan                = taxInformationVendTableLoc.PANNumber;
        _taxWithholdTrans.panReferenceNumber = taxInformationVendTableLoc.PANReferenceNumber;
        _taxWithholdTrans.panStatus          = taxInformationVendTableLoc.PANStatus;
        _taxWithholdTrans.PurchId            = vendInvoiceTrans.PurchID;
        _taxWithholdTrans.LineNum            = vendInvoiceTrans.LineNum;
        _taxWithholdTrans.Nameofdeductee     = DirPartyTable::findRec(vendTableLoc.Party).Name;
        _taxWithholdTrans.RecoverableAccount = vendInvoiceTrans.TCSGroup_IN ? true : false;
        _taxWithholdTrans.Invoice            = vendInvoiceTrans.InvoiceId;
        _taxWithholdTrans.CostLedgerVoucher  = VendInvoiceJour::findFromVendInvoiceTrans(vendInvoiceTrans.PurchID,
                                                  vendInvoiceTrans.InvoiceId,
                                                  vendInvoiceTrans.InvoiceDate,
                                                  vendInvoiceTrans.numberSequenceGroup,
                                                  vendInvoiceTrans.InternalInvoiceId).CostLedgerVoucher;

        transTaxInformationLoc = TransTaxInformationHelper::findOrCreateTransTaxInformationByRecord(vendInvoiceTrans);

        _taxWithholdTrans.TaxWithholdRegNumber = transTaxInformationLoc.TaxWithholdTAN;

        super(_ledgerPostingController, _taxWithholdTrans, _exchangeRateHelper, _taxWithholdData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    public recId sourceRecId()
    {
        return sourceRecord.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    public tableId sourceTableId()
    {
        return sourceRecord.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAndPost</Name>
				<Source><![CDATA[
    public TaxAmount updateAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount       taxAmount;
        boolean         moreLines;

        if (!this.existsTax())
        {
            return 0;
        }

        this.initLedgerPosting(_ledgerPostingController);

        ttsbegin;

        this.validateWithholdTax();

        purchCalcTax.initCursor();
        moreLines   = true;
        while (moreLines)
        {
            sourceRecord= purchCalcTax.nextLine();
            if (sourceRecord)
            {
                this.moveTaxLineToNewOwner(purchCalcTax.transTableId(),
                                   purchCalcTax.transRecId());
            }
            else
                moreLines   = false;
        }
        ttscommit;

        if (post)
        {
            this.saveAndPostWHT(_ledgerPostingController);
            taxAmount = TaxWithholdPost_IN::taxTotalVoucherDate(voucher, taxDate);
        }
        else
        {
            taxAmount = this.totalTaxWithholdAmount();
        }

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    public boolean useSubLedgerJournalLines()
    {
        return purchCalcTax.useSubLedgerJournalLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    public boolean useTaxUncommitted()
    {
        return purchCalcTax.useTaxUncommitted();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxWithholdUncommitted_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if there is an uncomitted WHT record after posting WHT tax.
    /// </summary>
    /// <param name = "_taxWithholdPost">The <c>TaxWithholdPost_IN</c> object instance.</param>
    /// <param name = "_headingTableSourceDocumentRecId">The <c>SourceDocumentLine</c> RecId for heading table.</param>
    /// <param name = "_taxWithholdCalculation">The <c>TaxWithholdCalculation_IN</c> object instance.</param>
    /// <returns>True if the uncomitted WHT record doesn't exist, otherwise, false.</returns>
    public boolean validateTaxWithholdUncommitted_IN(
        TaxWithholdPost_IN _taxWithholdPost, 
        RefRecId _headingTableSourceDocumentRecId,
        TaxWithholdCalculation_IN _taxWithholdCalculation)
    {
        boolean isValid = true;

        if (TaxWithholdValidateUncommittedFlight::instance())
        {
            isValid = TaxWithholdValidateUncommitted_IN::validate(_taxWithholdPost, _headingTableSourceDocumentRecId, _taxWithholdCalculation);
        }

        return isValid;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>