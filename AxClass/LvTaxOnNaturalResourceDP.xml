<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LvTaxOnNaturalResourceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The data provider class for the <c>LvTaxOnNaturalResource</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(LvTaxOnNaturalResource)),
    SRSReportParameterAttribute(classStr(LvTaxOnNaturalResourceContract))
]
class LvTaxOnNaturalResourceDP extends SRSReportDataProviderBase
{
    LVTaxOnNaturalResourceTmp lvTaxOnNaturalResourceTmp;
    StartDate   startDate;
    EndDate     endDate;

    Map                     lineAmounts;
    Map                     totalAmounts;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addQtyToLineMap</Name>
				<Source><![CDATA[
    private void addQtyToLineMap(LvNRTaxReportSetup _nrTaxReportSetup, Qty _qty)
    {
        this.addValueToMap(lineAmounts, [_nrTaxReportSetup.FormNumber, _nrTaxReportSetup.SeqNumber], _qty, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addQtyToTotalMap</Name>
				<Source><![CDATA[
    private void addQtyToTotalMap(LvNRTaxReportSetup _nrTaxReportSetup, Qty _qty)
    {
        this.addValueToMap(totalAmounts, [_nrTaxReportSetup.FormNumber, _nrTaxReportSetup.TotalLineCode], _qty, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxAmount</Name>
				<Source><![CDATA[
    private void addTaxAmount(LvNRTaxReportSetup _nrTaxReportSetup)
    {
        LvNRTaxTrans            nrTaxTrans;

        if (_nrTaxReportSetup.TaxCode)
        {
            select sum(TaxAmount) from nrTaxTrans
                where nrTaxTrans.TaxCode == _nrTaxReportSetup.TaxCode
                    && nrTaxTrans.TransDate >= startDate
                    && nrTaxTrans.TransDate <= endDate;
        }
        else if (_nrTaxReportSetup.PackMaterialCode)
        {
            select sum(TaxAmount) from nrTaxTrans
                where nrTaxTrans.PackingMaterialCode == _nrTaxReportSetup.PackMaterialCode
                    && nrTaxTrans.TransDate >= startDate
                    && nrTaxTrans.TransDate <= endDate;
        }

        this.addTaxAmountToLineMap(_nrTaxReportSetup, nrTaxTrans.TaxAmount);

        if (_nrTaxReportSetup.TotalLineCode)
        {
            this.addTaxAmountToTotalMap(_nrTaxReportSetup, nrTaxTrans.TaxAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertInventTransTypeToModuleType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the correct <c>ModuleInventPurchSales</c> enum value based on the <c>InventTransType</c> value.
    /// </summary>
    /// <param name = "_inventTransType">Inventory transaction type</param>
    /// <returns><c>ModuleInventPurchSales</c> value corresponding to the inventory transaction type</returns>
    protected ModuleInventPurchSales convertInventTransTypeToModuleType(InventTransType _inventTransType)
    {
        return _inventTransType == InventTransType::Sales ? ModuleInventPurchSales::Sales : ModuleInventPurchSales::Invent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxAmountQty</Name>
				<Source><![CDATA[
    private void addTaxAmountQty(LvNRTaxReportSetup _nrTaxReportSetup)
    {
        LvNRTaxTrans            nrTaxTrans;

        Qty                     qty;
        TaxAmount               taxAmount;

        InventPackagingUnit     inventPackagingUnit;
        InventPackingUnitWeight packingUnitWeight;
        TaxBaseType             taxBase = TaxTable::find(_nrTaxReportSetup.TaxCode).TaxBase;
        real                    base;

        if (_nrTaxReportSetup.TaxCode)
        {
            while select TaxCode, TransDate, InventTransType, ItemId, ItemQty, TaxBaseAmount, TaxAmount, InventDimId from nrTaxTrans
                where nrTaxTrans.TaxCode == _nrTaxReportSetup.TaxCode
                    && nrTaxTrans.TransDate >= startDate
                    && nrTaxTrans.TransDate <= endDate
            {
                ModuleInventPurchSales moduleType = this.convertInventTransTypeToModuleType(nrTaxTrans.InventTransType);
                UnitOfMeasureSymbol unit = InventTableModule::find(nrTaxTrans.ItemId, moduleType).UnitId;

                base = (taxBase == TaxBaseType::AmountByUnit) ? nrTaxTrans.ItemQty : nrTaxTrans.TaxBaseAmount;
                qty += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(nrTaxTrans.ItemId, 
                                                                                             nrTaxTrans.InventDimId, 
                                                                                             base,
                                                                                             unit,
                                                                                             _nrTaxReportSetup.unit(),
                                                                                             NoYes::Yes);
                taxAmount += nrTaxTrans.TaxAmount;
            }
        }
        else if (_nrTaxReportSetup.PackMaterialCode)
        {
            while select PackingMaterialCode, TransDate, ItemId, InventDimId, PackingUnit, PackingQty, TaxAmount from nrTaxTrans
                where nrTaxTrans.PackingMaterialCode == _nrTaxReportSetup.PackMaterialCode
                    && nrTaxTrans.TransDate >= startDate
                    && nrTaxTrans.TransDate <= endDate
            {
                inventPackagingUnit = InventPackagingUnit::findFirstUnit(nrTaxTrans.ItemId, InventDim::find(nrTaxTrans.InventDimId), nrTaxTrans.PackingUnit);
                packingUnitWeight   = InventPackagingUnitMaterial::find(inventPackagingUnit.RecId, nrTaxTrans.PackingMaterialCode).PackingUnitWeight;
                qty += packingUnitWeight * nrTaxTrans.PackingQty;
                taxAmount += nrTaxTrans.TaxAmount;
            }
        }

        this.addQtyToLineMap(_nrTaxReportSetup, qty);
        this.addTaxAmountToLineMap(_nrTaxReportSetup, taxAmount);

        if (_nrTaxReportSetup.TotalLineCode)
        {
            this.addQtyToTotalMap(_nrTaxReportSetup, qty);
            this.addTaxAmountToTotalMap(_nrTaxReportSetup, taxAmount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxAmountToLineMap</Name>
				<Source><![CDATA[
    private void addTaxAmountToLineMap(LvNRTaxReportSetup _nrTaxReportSetup, TaxAmount _taxAmount)
    {
        this.addValueToMap(lineAmounts, [_nrTaxReportSetup.FormNumber, _nrTaxReportSetup.SeqNumber], _taxAmount, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTaxAmountToTotalMap</Name>
				<Source><![CDATA[
    private void addTaxAmountToTotalMap(LvNRTaxReportSetup _nrTaxReportSetup, TaxAmount _taxAmount)
    {
        this.addValueToMap(totalAmounts, [_nrTaxReportSetup.FormNumber, _nrTaxReportSetup.TotalLineCode], _taxAmount, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addValueToMap</Name>
				<Source><![CDATA[
    private void addValueToMap(Map _map, container _key, real _addedValue, int _valueConIdx)
    {
        container               valueCon;

        if (_map.exists(_key))
        {
            valueCon = _map.lookup(_key);
        }
        else
        {
            valueCon = [0, 0];
        }
        valueCon = conPoke(valueCon, _valueConIdx, conPeek(valueCon, _valueConIdx) + _addedValue);
        _map.insert(_key, valueCon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLVTaxOnNaturalResourceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the <c>LVTaxOnNaturalResourceTmp</c> table and retrieves the data table.
    /// </summary>
    /// <returns>
    ///    The required report data table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(LVTaxOnNaturalResourceTmp))
    ]
    public LVTaxOnNaturalResourceTmp getLVTaxOnNaturalResourceTmp()
    {
        return lvTaxOnNaturalResourceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertLVTaxOnNaturalResourceTmp</Name>
				<Source><![CDATA[
    private void insertLVTaxOnNaturalResourceTmp(LVNRTaxReportSetup _lvNRTaxReportSetup)
    {
        lvTaxOnNaturalResourceTmp.clear();
        lvTaxOnNaturalResourceTmp.TaxFormNumber     = _lvNRTaxReportSetup.FormNumber;
        lvTaxOnNaturalResourceTmp.SeqNumber         = _lvNRTaxReportSetup.SeqNumber;

        lvTaxOnNaturalResourceTmp.LineCode          = _lvNRTaxReportSetup.LineCode;
        lvTaxOnNaturalResourceTmp.Description       = _lvNRTaxReportSetup.Description;
        lvTaxOnNaturalResourceTmp.TaxReportLineType = _lvNRTaxReportSetup.LineType;
        lvTaxOnNaturalResourceTmp.InventLocationId  = _lvNRTaxReportSetup.location();

        switch (_lvNRTaxReportSetup.LineType)
        {
            case LvNRTaxReportLineType::Line:
                if (lineAmounts.exists([_lvNRTaxReportSetup.FormNumber, _lvNRTaxReportSetup.SeqNumber]))
                {
                    lvTaxOnNaturalResourceTmp.TaxAmount = conPeek(lineAmounts.lookup([_lvNRTaxReportSetup.FormNumber, _lvNRTaxReportSetup.SeqNumber]), 1);
                }
                break;
            case LvNRTaxReportLineType::TotalLine:
                if (_lvNRTaxReportSetup.LineCode && totalAmounts.exists([_lvNRTaxReportSetup.FormNumber, _lvNRTaxReportSetup.LineCode]))
                {
                    lvTaxOnNaturalResourceTmp.TaxAmount = conPeek(totalAmounts.lookup([_lvNRTaxReportSetup.FormNumber, _lvNRTaxReportSetup.LineCode]), 1);
                }
                break;
        }
        if (_lvNRTaxReportSetup.FormNumber == LvNRTaxFormNumber::Form3)
        {
            lvTaxOnNaturalResourceTmp.UnitId    = _lvNRTaxReportSetup.unit();
            lvTaxOnNaturalResourceTmp.TaxValue  = _lvNRTaxReportSetup.taxValue(endDate);
            switch (_lvNRTaxReportSetup.LineType)
            {
                case LvNRTaxReportLineType::Line:
                    if (lineAmounts.exists([_lvNRTaxReportSetup.FormNumber, _lvNRTaxReportSetup.SeqNumber]))
                    {
                        lvTaxOnNaturalResourceTmp.Qty = conPeek(lineAmounts.lookup([_lvNRTaxReportSetup.FormNumber, _lvNRTaxReportSetup.SeqNumber]), 2);
                    }
                    break;
                case LvNRTaxReportLineType::TotalLine:
                    if (_lvNRTaxReportSetup.LineCode && totalAmounts.exists([_lvNRTaxReportSetup.FormNumber, _lvNRTaxReportSetup.LineCode]))
                    {
                        lvTaxOnNaturalResourceTmp.Qty = conPeek(totalAmounts.lookup([_lvNRTaxReportSetup.FormNumber, _lvNRTaxReportSetup.LineCode]), 2);
                    }
                    break;
            }
        }
        lvTaxOnNaturalResourceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareData</Name>
				<Source><![CDATA[
    private void prepareData(QueryRun _queryRun)
    {
        container               keyConCur, valueConCur;
        LvNRTaxReportSetup      nrTaxReportSetup;
        QueryBuildDataSource    qbds;

        lineAmounts     = new Map(Types::Container, Types::Container);//[FormNumber, SeqNumber] -> [TaxAmount, Qty]
        totalAmounts    = new Map(Types::Container, Types::Container);//[FormNumber, LineCode] -> [TaxAmount, Qty]

        qbds = _queryRun.query().dataSourceTable(tableNum(LvNRTaxReportSetup));
        findOrCreateRange_W(qbds, fieldNum(LvNRTaxReportSetup, LineType), SysQuery::value(LvNRTaxReportLineType::Line));

        while (_queryRun.next())
        {
            nrTaxReportSetup = _queryRun.get(tableNum(LvNRTaxReportSetup));
            if (nrTaxReportSetup.TaxCode || nrTaxReportSetup.PackMaterialCode)
            {
                if (nrTaxReportSetup.FormNumber == LvNRTaxFormNumber::Form3)
                {
                    this.addTaxAmountQty(nrTaxReportSetup);
                }
                else
                {
                    this.addTaxAmount(nrTaxReportSetup);
                }
            }
        }

        findOrCreateRange_W(qbds, fieldNum(LvNRTaxReportSetup, LineType), SysQuery::value(LvNRTaxReportLineType::TotalLine));
        findOrCreateRange_W(qbds, fieldNum(LvNRTaxReportSetup, TotalLineCode), SysQuery::valueNotEmptyString());
        _queryRun.reset();
        while (_queryRun.next())
        {
            nrTaxReportSetup = _queryRun.get(tableNum(LvNRTaxReportSetup));

            keyConCur = [nrTaxReportSetup.FormNumber, nrTaxReportSetup.LineCode];
            if (totalAmounts.exists(keyConCur))
            {
                valueConCur = totalAmounts.lookup(keyConCur);

                this.addTaxAmountToTotalMap(nrTaxReportSetup, conPeek(valueConCur, 1));
                this.addQtyToTotalMap(nrTaxReportSetup, conPeek(valueConCur, 2));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic for the <c>InventScrapStatement</c> report.
    /// </summary>
    public void processReport()
    {
        QueryRun                        queryRun;
        LvNRTaxReportSetup              lvNRTaxReportSetup;
        LvTaxOnNaturalResourceContract  contract = this.parmDataContract();

        [startDate, endDate] = LvNRTaxCreate::quarterDates(contract.parmQuarter(), contract.parmYr());
        queryRun = new QueryRun(this.parmQuery());
        this.prepareData(queryRun);

        queryRun.query().dataSourceTable(tableNum(LvNRTaxReportSetup)).clearRanges();
        queryRun.reset();
        while (queryRun.next())
        {
            lvNRTaxReportSetup = queryRun.get(tableNum(LvNRTaxReportSetup));
            this.insertLVTaxOnNaturalResourceTmp(lvNRTaxReportSetup);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>