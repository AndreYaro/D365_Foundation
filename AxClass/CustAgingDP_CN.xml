<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustAgingDP_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Data provider class for report <c>CustAging_CN</c>.
/// </summary>
public class CustAgingDP_CN
{
    CustAgingContract_CN contract;
    AgingAndDueAmountTmp_CN  tmpCustomerAging_CN;

    CustTable custTable;
    CustTrans custTrans;
    CustGroup custGroup;
    CommissionSalesGroup salesGroup;

    AmountMST amountArray[6];

    const int AgingPeriodOne = 1;
    const int AgingPeriodTwo = 2;
    const int AgingPeriodThree = 3;
    const int AgingPeriodFour = 4;
    const int AgingPeriodFive = 5;
    const int AgingPeriodSix = 6;
    const int DefaultPeriod = 30;
    const int AmountOverCount = 7;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to calculate Balance for Aging periods.
    /// </summary>
    /// <param name="timeArray">
    /// Contains the time left for the customer to pay the amount.
    /// </param>
    /// <param name="amountMst">
    /// Amount under transaction.
    /// </param>
    /// <param name="settledAmountMst">
    /// Amount for settlement.
    /// </param>
    /// <param name="dates">
    /// Due date for the customer.
    /// </param>
    private void calcAmount(TransDate timeArray[], AmountMST amountMst, AmountMST settledAmountMst, TransDate dates)
    {
        boolean isAdded = false;
        Integer agingPeriodCounter;
        for (agingPeriodCounter = AgingPeriodOne; agingPeriodCounter < AgingPeriodSix; agingPeriodCounter++)
        {
            if (dates >= timeArray[agingPeriodCounter])
            {
                amountArray[agingPeriodCounter] += amountMst - settledAmountMst;
                isAdded = true;
                break;
            }
        }

        if (!isAdded)
        {
            amountArray[AgingPeriodSix] += amountMst - settledAmountMst;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAgingTmp_CN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Used to store the customer data buffer for the report.
    /// </summary>
    /// <returns>
    /// Returns the Temperory table <c>AgingAndDueAmountTmp_CN</c> to the report for displaying customer data.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AgingAndDueAmountTmp_CN))
    ]
    public AgingAndDueAmountTmp_CN getCustAgingTmp_CN()
    {
        return tmpCustomerAging_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustAgingDP_CN construct()
    {
        CustAgingDP_CN  dataProvider;

        dataProvider = new CustAgingDP_CN();

        return dataProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTmpTable</Name>
				<Source><![CDATA[
    private AgingAndDueAmountTmp_CN insertTmpTable(
                                CustAccount         _custAccount,
                                AccountName         _name,
                                AmountMST           _creditLimit,
                                AmountMST           _balance,
                                AmountMST           _inDueAmount,
                                AmountMST           _amountMST[],
                                CustGroupId         _custGroupId,
                                Description         _custGroupName,
                                CommissSalesGroup   _salesGroupId,
                                Name                _salesGroupName)
    {
        tmpCustomerAging_CN.AccountNum = _custAccount;
        tmpCustomerAging_CN.AccountName = _name;
        tmpCustomerAging_CN.AccountGroup = _custGroupId;
        tmpCustomerAging_CN.AccountGroupName = _custGroupName;
        tmpCustomerAging_CN.OperatorGroup = _salesGroupId;
        tmpCustomerAging_CN.OperatorGroupName = _salesGroupName;
        tmpCustomerAging_CN.CreditLimit = _creditLimit;
        tmpCustomerAging_CN.BalanceAmount = _balance;
        tmpCustomerAging_CN.UndueAmount= _inDueAmount;
        tmpCustomerAging_CN.Period1Amount = _amountMST[AgingPeriodOne];
        tmpCustomerAging_CN.Period2Amount = _amountMST[AgingPeriodTwo];
        tmpCustomerAging_CN.Period3Amount = _amountMST[AgingPeriodThree];
        tmpCustomerAging_CN.Period4Amount = _amountMST[AgingPeriodFour];
        tmpCustomerAging_CN.Period5Amount = _amountMST[AgingPeriodFive];
        tmpCustomerAging_CN.DueAmount = _amountMST[AgingPeriodSix];
        tmpCustomerAging_CN.insert();

        return tmpCustomerAging_CN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAging</Name>
				<Source><![CDATA[
    public AgingAndDueAmountTmp_CN getCustAging(CustAgingContract_CN _contract, Query _query)
    {
        Query query;
        QueryRun qr;
        QueryBuildDataSource qbdsCustTrans;

        Integer periodArray[AgingPeriodFive];
        TransDate timeArray[AgingPeriodFive];
        Integer counter;

        AmountMST amountMST;
        LedgerTransType transType;
        CustAccount accountNum;
        AmountMST settledAmountMst;
        TransDate transDate;
        TransDate dueDate;
        boolean indx;
        AccountNum lastCustNum;
        Name lastName;
        AmountMSt lastCreditLimit, Balance;
        CustVendAgingType_CN agingType;
        AmountMST inDueAmount;
        CurrencyCode currencyCode;
        CustGroupId lastCustGroupId;
        Description lastCustGroupName;
        CommissSalesGroup lastSalesGroupId;
        Name lastSalesGroupName;
        TransDate dueDay,dueDayRange, temp;

        contract = _contract;
        indx = true;

        dueDay = contract.parmDueDate();
        agingType = contract.parmAgingType();

        currencyCode = CompanyInfoHelper::standardCurrency();
        contract.parmCurrencyCode(currencyCode);

        if (contract.parmPeriodOne() <=0)
        {
            contract.parmPeriodOne(DefaultPeriod);
        }
        if (contract.parmPeriodTwo() <= 0)
        {
            contract.parmPeriodTwo(DefaultPeriod);
        }
        if (contract.parmPeriodThree() <= 0)
        {
            contract.parmPeriodThree(DefaultPeriod);
        }
        if (contract.parmPeriodFour() <= 0)
        {
            contract.parmPeriodFour(DefaultPeriod);
        }
        if (contract.parmPeriodFive() <= 0)
        {
            contract.parmPeriodFive(DefaultPeriod);
        }

        if (dueDay == dateNull())
        {
            dueDay = DateTimeUtil::date(DateTimeUtil::utcNow());
        }

        periodArray[AgingPeriodOne] = contract.parmPeriodOne();
        periodArray[AgingPeriodTwo] = contract.parmPeriodTwo();
        periodArray[AgingPeriodThree] = contract.parmPeriodThree();
        periodArray[AgingPeriodFour] = contract.parmPeriodFour();
        periodArray[AgingPeriodFive] = contract.parmPeriodFive();

        temp = dueDay;
        for (counter = AgingPeriodOne; counter < AgingPeriodSix; counter++)
        {
            timeArray[counter] = temp-periodArray[counter];
            temp = timeArray[counter];
        }
        dueDayRange = dueDay;
        query = _query;
        qbdsCustTrans = query.dataSourceTable(tableNum(CustTrans));
        qbdsCustTrans.addOrderByField(fieldNum(CustTrans, AccountNum));

        SysQuery::findOrCreateRange(qbdsCustTrans, fieldNum(CustTrans, TransDate)).value(SysQuery::range(dateNull(), dueDayRange));

        qr=new QueryRun(query);

        while (qr.next())
        {
            custTable = qr.get(tableNum(CustTable));
            custTrans = qr.get(tableNum(CustTrans));
            custGroup = qr.get(tableNum(CustGroup));
            salesGroup = qr.get(tableNum(CommissionSalesGroup));

            amountMst = custTrans.AmountMST;
            settledAmountMst = custTrans.SettleAmountMST;
            accountNum = custTable.AccountNum;
            transType = custTrans.TransType;

            if (amountMst > settledAmountMst && (transType == LedgerTransType::Cust || transType == LedgerTransType::Sales))
            {
                transDate = custTrans.TransDate;
                if (custTrans.DueDate == dateNull())
                {
                    continue;
                }
                dueDate =custTrans.DueDate;

                if (indx)
                {
                    lastCustNum = accountNum;
                    lastName = DirPartyTable::getName(custTable.Party);
                    lastCreditLimit = custTable.CreditMax;
                    lastCustGroupId = custTable.CustGroup;
                    lastCustGroupName = custGroup.Name;
                    lastSalesGroupId = custTable.SalesGroup;
                    lastSalesGroupName = salesGroup.Name;
                    indx = false;
                }
                if (lastCustNum == accountNum)
                {
                    Balance += amountMst - settledAmountMst;
                    if (agingType == CustVendAgingType_CN::Payment)
                    {
                        if (dueDate >= dueDay)
                        {
                            inDueAmount += amountMst - settledAmountMst;
                        }
                        else
                        {
                            this.calcAmount(timeArray, amountMst, settledAmountMst, dueDate);
                        }
                    }
                    else
                    {
                        this.calcAmount(timeArray, amountMst, settledAmountMst, transDate);
                    }
                }
                else
                {
                    this.insertTmpTable(lastCustNum, lastName, lastCreditLimit, Balance, inDueAmount, amountArray, lastCustGroupId, lastCustGroupName, lastSalesGroupId, lastSalesGroupName);

                    lastCustNum = accountNum;
                    lastName = DirPartyTable::getName(custTable.Party);
                    lastCreditLimit = custTable.CreditMax;
                    lastCustGroupId = custTable.CustGroup;
                    lastCustGroupName = custGroup.Name;
                    lastSalesGroupId = custTable.SalesGroup;
                    lastSalesGroupName = salesGroup.Name;
                    Balance = 0;
                    inDueAmount = 0;
                    //Clearing AmountArray.
                    for (counter = 1; counter < AmountOverCount; counter++)
                    {
                        amountArray[counter] = 0;
                    }

                    Balance += amountMst - settledAmountMst;
                    if (agingType == CustVendAgingType_CN::Payment)
                    {
                        if (dueDate >= dueDay)
                        {
                            inDueAmount += amountMst - settledAmountMst;
                        }
                        else
                        {
                            this.calcAmount(timeArray, amountMst, settledAmountMst, dueDate);
                        }
                    }
                    else
                    {
                        this.calcAmount(timeArray, amountMst, settledAmountMst, transDate);
                    }
                }
            }
        }

        return this.insertTmpTable(lastCustNum, lastName, lastCreditLimit, Balance, inDueAmount, amountArray, lastCustGroupId, lastCustGroupName, lastSalesGroupId, lastSalesGroupName);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>