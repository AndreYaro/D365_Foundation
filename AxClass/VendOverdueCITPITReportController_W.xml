<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOverdueCITPITReportController_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendOverdueCITPITReportController_W</c> class is the controller class for the <c>VendOverdueCITPITReport_W</c> report.
/// </summary>
public class VendOverdueCITPITReportController_W extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
        protected void preRunModifyContract()
    {
        VendOverdueCITPITJournalTable_W     overdueJournalTable = this.parmArgs().record();
        VendOverdueCITPITReportContract_W   contract = this.parmReportContract().parmRdpContract() as VendOverdueCITPITReportContract_W;

        contract.parmJournalId(overdueJournalTable.JournalId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        static void main(Args _args)
    {
        const str LocalizationFeatureReference = 'PL-00014';
        GlobalizationInstrumentationHelper::featureRun(LocalizationFeatureReference, funcName());

        VendOverdueCITPITReportController_W     controller = new VendOverdueCITPITReportController_W();

        controller.parmReportName(ssrsReportStr(VendOverdueCITPITReport_W, Report));
        controller.parmShowDialog(false);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>