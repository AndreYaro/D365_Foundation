<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBasisDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Report Data Provider <c>AssetBasisDP_IN</c> class for <c>AssetBasis_IN</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetBasis_IN)),
    SRSReportParameterAttribute(classstr(AssetBasisContract_IN))
]
class AssetBasisDP_IN extends SrsReportDataProviderPreProcessTempDB
{
    AssetBasisTmp_IN assetBasisTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetBasisTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes temporary table.
    /// </summary>
    /// <returns>
    /// Temporary table <c>AssetBasisTmp_IN</c>.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetBasisTmp_IN))
    ]
    public AssetBasisTmp_IN getAssetBasisTmp()
    {
        return assetBasisTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetGroupNetBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is to calculate AssetGroupNetBookValue.
    /// </summary>
    /// <param name="_assetGroupId">
    /// Passes AssetGroupId.
    /// </param>
    /// <param name="_bookId">
    /// Passes BookId.
    /// </param>
    /// <param name="_fromDate">
    /// Passes FromDate.
    /// </param>
    /// <param name="_toDate">
    /// Passes ToDate.
    /// </param>
    /// <returns>
    /// Value for AssetGroupNetBookValue.
    /// </returns>
    public AssetNetBookValue getAssetGroupNetBookValue(
        AssetGroupId _assetGroupId,
        AssetBookId  _bookId,
        TransDate    _fromDate,
        TransDate    _toDate )
    {
        AssetSumCalc_Trans_IN assetSumCalc_Trans;

        assetSumCalc_Trans = AssetSumCalc_Trans_IN::newAssetPeriod(_assetGroupId, _bookId, _fromDate, _toDate);
        assetSumCalc_Trans.parmAllAssetsSold_IN(AssetBook::checkAllAssetsSold_IN(_assetGroupId, _bookId));
        assetSumCalc_Trans.parmGroup_IN(NoYes::Yes);

        return assetSumCalc_Trans.netBookValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetBasisTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into temporary table <c>AssetBasisTmp_IN</c>.
    /// </summary>
    /// <param name="_assetBook">
    /// Passes AssetBook.
    /// </param>
    /// <param name="_assetTable">
    /// Passes AssetTable.
    /// </param>
    /// <param name="_assetSumCalc">
    /// Passes AssetSumCalc.
    /// </param>
    /// <param name="_bookId">
    /// passes Book ID.
    /// </param>
    /// <param name="_fromDate">
    /// Passes From date.
    /// </param>
    /// <param name="_toDate">
    /// Passes To date.
    /// </param>
    private void insertAssetBasisTmp(
        AssetBook               _assetBook,
        AssetTable              _assetTable,
        AssetSumCalc            _assetSumCalc,
        AssetBookId             _bookId,
        TransDate               _fromDate,
        TransDate               _toDate)
    {
        assetBasisTmp.AssetGroupId           = _assetBook.AssetGroup;
        assetBasisTmp.AssetId                = _assetBook.AssetId;
        assetBasisTmp.AssetName              = _assetTable.Name;
        assetBasisTmp.AcquisitionValue       = _assetSumCalc.acquisitionValue();
        assetBasisTmp.BonusValue             = _assetSumCalc.bonusDepreciationValue();

        assetBasisTmp.MiscValue              = (_assetSumCalc.acquisitionAdjValue() +
                                                _assetSumCalc.writeUpDownAdjValue() +
                                                _assetSumCalc.revaluationValue()    +
                                                _assetSumCalc.capitalReserveTransferValue());

        assetBasisTmp.NetBookValue           = _assetSumCalc.netBookValue();
        assetBasisTmp.BookId                 = _bookId;

        assetBasisTmp.AssetGroupNetBookValue = this.getAssetGroupNetBookValue(
            _assetBook.AssetGroup,
            _bookId,
            _fromDate,
            _toDate);

        if (AssetParameters::find().DepreciationIncomeTaxAct_IN)
        {
            assetBasisTmp.GroupNetBookValueFlag = NoYes::No;
        }
        else
        {
            assetBasisTmp.GroupNetBookValueFlag = NoYes::Yes;
        }

        assetBasisTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        QueryRun                qr;
        QueryBuildDataSource    qbs;
        QueryBuildRange         rangeBookId;
        AssetBook               assetBook;
        AssetTable              assetTable;
        AssetSumCalc            assetSumCalc;
        AssetBookId             bookId;
        TransDate               fromDate;
        TransDate               toDate;

        AssetBasisContract_IN contract = this.parmDataContract() as AssetBasisContract_IN;

        if (AssetParameters::checkAssetParameters_IN())
        {
            bookId  = contract.parmBookId();
            fromDate = contract.parmFromDate();
            toDate   = contract.parmToDate();

            qr  = new QueryRun(this.parmQuery());
            qbs = qr.query().dataSourceNo(1).addDataSource(tablenum(AssetBook));

            SysQuery::findOrCreateRange(qbs, fieldnum(AssetBook, UsedFromDate)).value(queryRange(fromDate, toDate));

            rangeBookId = SysQuery::findOrCreateRange(qbs, fieldnum(AssetBook, BookId));
            rangeBookId.value(SysQuery::value(bookId));

            qbs.joinMode(JoinMode::InnerJoin);
            qbs.relations(true);

            while (qr.next())
            {
                assetBook = qr.get(tablenum(AssetBook));
                assetTable   = qr.get(tablenum(AssetTable));

                assetSumCalc = AssetSumCalc_Trans::newAssetYear(assetBook.AssetId, assetBook.BookId);
                this.insertAssetBasisTmp(assetBook, assetTable, assetSumCalc, bookId, fromDate, toDate);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>