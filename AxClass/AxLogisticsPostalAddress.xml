<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxLogisticsPostalAddress</Name>
	<SourceCode>
		<Declaration><![CDATA[
class AxLogisticsPostalAddress extends AxApplicationBase
{
    LogisticsPostalAddress     logisticsPostalAddress;

    int         zipCodeIdx;
    int         state_LogisticsAddressStateIdx;
    int         zipCode_LogisticsAddressZipCodeIdx;
    int         countryRegionId_LogisticsAddressCountryRegionIdx;
    str         state;
    str         county;

    ValidTimeStateUpdate    updateMode;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addressTable</Name>
				<Source><![CDATA[
    public LogisticsPostalAddress addressTable(LogisticsPostalAddress _logisticsPostalAddress = logisticsPostalAddress)
    {
        if (!prmisDefault(_logisticsPostalAddress))
        {
            this.setCurrentRecordFromExternal(_logisticsPostalAddress);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>countryRegionId_CountryRegionRecord</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegion countryRegionId_CountryRegionRecord(LogisticsAddressCountryRegion _logisticsAddressCountryRegion = null)
    {
        LogisticsAddressCountryRegion   logisticsAddressCountryRegion;

        if (!countryRegionId_LogisticsAddressCountryRegionIdx)
        {
            countryRegionId_LogisticsAddressCountryRegionIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_logisticsAddressCountryRegion))
        {
            this.tableCacheInsert(countryRegionId_LogisticsAddressCountryRegionIdx, _logisticsAddressCountryRegion);
            logisticsAddressCountryRegion = _logisticsAddressCountryRegion;
        }
        else
        {
            if (this.tableCacheExist(countryRegionId_LogisticsAddressCountryRegionIdx))
            {
                logisticsAddressCountryRegion = this.tableCacheLookup(countryRegionId_LogisticsAddressCountryRegionIdx);
            }
            else
            {
                this.setCountryRegionId();
                logisticsAddressCountryRegion = LogisticsAddressCountryRegion::find(this.parmCountryRegionId());
                this.tableCacheInsert(countryRegionId_LogisticsAddressCountryRegionIdx, logisticsAddressCountryRegion);
            }
        }

        return logisticsAddressCountryRegion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    public Common currentRecord(Common _logisticsPostalAddress = logisticsPostalAddress)
    {
        if (!prmisDefault(_logisticsPostalAddress))
        {
            super(_logisticsPostalAddress);
            logisticsPostalAddress = _logisticsPostalAddress as LogisticsPostalAddress;
        }
        else
        {
            super();
        }

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an empty record from the table to which this AxBC class relates.
    /// </summary>
    /// <returns>
    ///    An empty record from the table to which this AxBC class relates.
    /// </returns>
    /// <remarks>
    ///    The table to which this AxBC class relates has the same name as the class without the first two
    ///    letters, a and x.
    /// </remarks>
    protected Common emptyRecord()
    {
        LogisticsPostalAddress localAddress;
        return localAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAddressFieldsSet</Name>
				<Source><![CDATA[
    protected boolean isAddressFieldsSet()
    {
        return (this.isFieldSet(fieldNum(LogisticsPostalAddress, ZipCode))         ||
                this.isFieldSet(fieldNum(LogisticsPostalAddress, City))            ||
                this.isFieldSet(fieldNum(LogisticsPostalAddress, Street))          ||
                this.isFieldSet(fieldNum(LogisticsPostalAddress, County))          ||
                this.isFieldSet(fieldNum(LogisticsPostalAddress, State))           ||
                this.isFieldSet(fieldNum(LogisticsPostalAddress, CityRecId))       ||
                this.isFieldSet(fieldNum(LogisticsPostalAddress, District))        ||
                this.isFieldSet(fieldNum(LogisticsPostalAddress, StreetNumber))    ||
                this.isFieldSet(fieldNum(LogisticsPostalAddress, BuildingCompliment)) ||
                this.isFieldSet(fieldNum(LogisticsPostalAddress, PostBox))         ||
                this.isFieldSet(fieldNum(LogisticsPostalAddress, CountryRegionId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isZipCodeRecordFieldsSet</Name>
				<Source><![CDATA[
    protected boolean isZipCodeRecordFieldsSet()
    {
        return (this.isFieldSet(fieldNum(LogisticsPostalAddress, ZipCode))
            ||  this.isFieldSet(fieldNum(LogisticsPostalAddress, City))
            ||  this.isFieldSet(fieldNum(LogisticsPostalAddress, CityRecId))
            ||  this.isFieldSet(fieldNum(LogisticsPostalAddress, District))
            ||  this.isFieldSet(fieldNum(LogisticsPostalAddress, DistrictName))
            ||  this.isFieldSet(fieldNum(LogisticsPostalAddress, CountryRegionId)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddress</Name>
				<Source><![CDATA[
    public Addressing parmAddress(Addressing _logisticsPostalAddress = logisticsPostalAddress.Address)
    {
        return logisticsPostalAddress.Address;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmApartment_RU</Name>
				<Source><![CDATA[
    public LogisticsAddressApartment_RU parmApartment_RU(LogisticsAddressApartment_RU _apartment = '')
    {
        if (! prmisDefault(_apartment))
        {
            this.setField(fieldNum(LogisticsPostalAddress, Apartment_RU), _apartment);
        }

        return logisticsPostalAddress.Apartment_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuilding_RU</Name>
				<Source><![CDATA[
    public LogisticsAddressBuilding_RU parmBuilding_RU(LogisticsAddressBuilding_RU _building = '')
    {
        if (! prmisDefault(_building))
        {
            this.setField(fieldNum(LogisticsPostalAddress, Building_RU), _building);
        }

        return logisticsPostalAddress.Building_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuildingCompliment</Name>
				<Source><![CDATA[
    public LogisticsAddressBuildingCompliment parmBuildingCompliment(LogisticsAddressPostBox _buildingCompliment = '')
    {
        if (!prmisDefault(_buildingCompliment))
        {
            this.setField(fieldNum(LogisticsPostalAddress, BuildingCompliment), _buildingCompliment);
        }

        return logisticsPostalAddress.BuildingCompliment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCity</Name>
				<Source><![CDATA[
    public LogisticsAddressCityName parmCity(LogisticsAddressCityName _city = '')
    {
        if (!prmisDefault(_city))
        {
            this.setField(fieldNum(LogisticsPostalAddress, City), _city);
        }

        return logisticsPostalAddress.City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCityKana_JP</Name>
				<Source><![CDATA[
    public AssetCityKana_JP parmCityKana_JP(AssetCityKana_JP _cityKana_JP = '')
    {
        if (!prmisDefault(_cityKana_JP))
        {
            this.setField(fieldNum(LogisticsPostalAddress, CityKana_JP), _cityKana_JP);
        }

        return logisticsPostalAddress.CityKana_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCityRecId</Name>
				<Source><![CDATA[
    public LogisticsAddressCityRecId parmCityRecId(LogisticsAddressCityRecId _cityRecId = 0)
    {
        if (!prmisDefault(_cityRecId))
        {
            this.setField(fieldNum(LogisticsPostalAddress, CityRecId), _cityRecId);
        }

        return logisticsPostalAddress.CityRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegionId</Name>
				<Source><![CDATA[
    public str parmCountryRegionId(str _countryRegionId = '')
    {
        DictField   dictField;
        str         countryRegionId = _countryRegionId;

        if (!prmisDefault(_countryRegionId))
        {
            dictField = new DictField(tableNum(LogisticsPostalAddress),fieldNum(LogisticsPostalAddress,CountryRegionId));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(countryRegionId,dictField,this.mapPolicy().xMLMapCountryRegion());
                countryRegionId = this.axLogisticsAddressCountryRegionId(countryRegionId);
            }
            else
            {
                this.validateInboundString(countryRegionId,dictField);
            }

            this.setField(fieldNum(LogisticsPostalAddress, CountryRegionId), countryRegionId);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressCountryRegionId(logisticsPostalAddress.CountryRegionId);
        }
        else
        {
            return logisticsPostalAddress.CountryRegionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCounty</Name>
				<Source><![CDATA[
    public str parmCounty(str _county = '')
    {
        DictField   dictField;
        if (!prmisDefault(_county))
        {
            dictField = new DictField(tableNum(LogisticsPostalAddress),fieldNum(LogisticsPostalAddress,County));
            if (this.valueMappingInbound())
            {
                county = _county;
                this.validateInboundString(_county,dictField,this.mapPolicy().xMLMapCounty());
            }
            else
            {
                this.validateInboundString(_county,dictField);
            }

            this.setField(fieldNum(LogisticsPostalAddress, County), _county);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressCountyId(logisticsPostalAddress.County,logisticsPostalAddress.CountryRegionId,logisticsPostalAddress.State);
        }
        else
        {
            return logisticsPostalAddress.County;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistrict</Name>
				<Source><![CDATA[
    public LogisticsAddressDistrictRecId parmDistrict(LogisticsAddressDistrictRecId _district = 0)
    {
        if (!prmisDefault(_district))
        {
            this.setField(fieldNum(LogisticsPostalAddress, District), _district);
        }

        return logisticsPostalAddress.District;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDistrictName</Name>
				<Source><![CDATA[
    public LogisticsAddressDistrictName parmDistrictName(LogisticsAddressDistrictName _districtName = '')
    {
        if (!prmisDefault(_districtName))
        {
            this.setField(fieldNum(LogisticsPostalAddress, DistrictName), _districtName);
        }

        return logisticsPostalAddress.DistrictName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFlatId_RU</Name>
				<Source><![CDATA[
    public LogisticsAddressFlatId_RU parmFlatId_RU(LogisticsAddressFlatId_RU _flat = 0)
    {
        if (! prmisDefault(_flat))
        {
            this.setField(fieldNum(LogisticsPostalAddress, FlatId_RU), _flat);
        }

        return logisticsPostalAddress.FlatId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHouseId_RU</Name>
				<Source><![CDATA[
    public LogisticsAddressHouseId_RU parmHouseId_RU(LogisticsAddressHouseId_RU _house = 0)
    {
        if (! prmisDefault(_house))
        {
            this.setField(fieldNum(LogisticsPostalAddress, HouseId_RU), _house);
        }

        return logisticsPostalAddress.HouseId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSteadId_RU</Name>
				<Source><![CDATA[
    public LogisticsAddressSteadId_RU parmSteadId_RU(LogisticsAddressSteadId_RU _stead = 0)
    {
        if (! prmisDefault(_stead))
        {
            this.setField(fieldNum(LogisticsPostalAddress, SteadId_RU), _stead);
        }

        return logisticsPostalAddress.SteadId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsPrivate</Name>
				<Source><![CDATA[
    public LogisticsIsPrivate parmIsPrivate(LogisticsIsPrivate _isPrivate = NoYes::No)
    {
        if (!prmisDefault(_isPrivate))
        {
            this.setField(fieldNum(LogisticsPostalAddress, IsPrivate), _isPrivate);
        }

        return logisticsPostalAddress.IsPrivate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLatitude</Name>
				<Source><![CDATA[
    public AddressLatitude parmLatitude(AddressLatitude _latitude = 0)
    {
        if (!prmisDefault(_latitude))
        {
            this.setField(fieldNum(LogisticsPostalAddress, Latitude), _latitude);
        }

        return logisticsPostalAddress.Latitude;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLocation</Name>
				<Source><![CDATA[
    public LogisticsLocationRecId parmLocation(LogisticsLocationRecId _location = 0)
    {
        if (!prmisDefault(_location))
        {
            this.setField(fieldNum(LogisticsPostalAddress, Location), _location);
        }

        return logisticsPostalAddress.Location;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLongitude</Name>
				<Source><![CDATA[
    public AddressLongitude parmLongitude(AddressLongitude _longitude = 0)
    {
        if (!prmisDefault(_longitude))
        {
            this.setField(fieldNum(LogisticsPostalAddress, Longitude), _longitude);
        }

        return logisticsPostalAddress.Longitude;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPostBox</Name>
				<Source><![CDATA[
    public LogisticsAddressPostBox parmPostBox(LogisticsAddressPostBox _postBox = '')
    {
        if (!prmisDefault(_postBox))
        {
            this.setField(fieldNum(LogisticsPostalAddress, PostBox), _postBox);
        }

        return logisticsPostalAddress.PostBox;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrivateForParty</Name>
				<Source><![CDATA[
    public DirPartyPrivateLocationRecId parmPrivateForParty(DirPartyPrivateLocationRecId _privateForParty = 0)
    {
        if (!prmisDefault(_privateForParty))
        {
            this.setField(fieldNum(LogisticsPostalAddress, PrivateForParty), _privateForParty);
        }

        return logisticsPostalAddress.PrivateForParty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmState</Name>
				<Source><![CDATA[
    public str parmState(str _state = '')
    {
        DictField   dictField;
        if (!prmisDefault(_state))
        {
            dictField = new DictField(tableNum(LogisticsPostalAddress),fieldNum(LogisticsPostalAddress,State));
            if (this.valueMappingInbound())
            {
                state = _state;
                this.validateInboundString(_state,dictField,this.mapPolicy().xMLMapState());
            }
            else
            {
                this.validateInboundString(_state,dictField);
            }

            this.setField(fieldNum(LogisticsPostalAddress, State), _state);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressStateId(logisticsPostalAddress.State,logisticsPostalAddress.CountryRegionId);
        }
        else
        {
            return logisticsPostalAddress.State;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStreet</Name>
				<Source><![CDATA[
    public AddressStreet parmStreet(AddressStreet _street = '')
    {
        if (!prmisDefault(_street))
        {
            this.setField(fieldNum(LogisticsPostalAddress, Street), _street);
        }

        return logisticsPostalAddress.Street;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStreetId_RU</Name>
				<Source><![CDATA[
    public LogisticsAddressStreetID_RU parmStreetId_RU(LogisticsAddressStreetID_RU _street = 0)
    {
        if (! prmisDefault(_street))
        {
            this.setField(fieldNum(LogisticsPostalAddress, StreetId_RU), _street);
        }

        return logisticsPostalAddress.StreetId_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStreetKana_JP</Name>
				<Source><![CDATA[
    public AssetStreetKana_JP parmStreetKana_JP(AssetStreetKana_JP _streetKana_JP = '')
    {
        if (!prmisDefault(_streetKana_JP))
        {
            this.setField(fieldNum(LogisticsPostalAddress, StreetKana_JP), _streetKana_JP);
        }

        return logisticsPostalAddress.StreetKana_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStreetNumber</Name>
				<Source><![CDATA[
    public LogisticsAddressStreetNumber parmStreetNumber(LogisticsAddressStreetNumber _streetNumber = '')
    {
        if (!prmisDefault(_streetNumber))
        {
            this.setField(fieldNum(LogisticsPostalAddress, StreetNumber), _streetNumber);
        }

        return logisticsPostalAddress.StreetNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTimeZone</Name>
				<Source><![CDATA[
    public Timezone parmTimeZone(Timezone _timezone = 0)
    {
        if (!prmisDefault(_timezone))
        {
            this.setField(fieldNum(LogisticsPostalAddress, TimeZone), _timezone);
        }

        return logisticsPostalAddress.TimeZone;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidFrom</Name>
				<Source><![CDATA[
    public EffectiveDateTime parmValidFrom(EffectiveDateTime _validFrom = DateTimeUtil::utcNow())
    {
        if (!prmisDefault(_validFrom))
        {
            this.setField(fieldNum(LogisticsPostalAddress, ValidFrom), _validFrom);
        }

        return logisticsPostalAddress.ValidFrom;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmValidTo</Name>
				<Source><![CDATA[
    public ExpirationDateTime parmValidTo(ExpirationDateTime _validTo = DateTimeUtil::maxValue())
    {
        if (!prmisDefault(_validTo))
        {
            this.setField(fieldNum(LogisticsPostalAddress, ValidTo), _validTo);
        }

        return logisticsPostalAddress.ValidTo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmZipCode</Name>
				<Source><![CDATA[
    public str parmZipCode(str _zipCode = '')
    {
        DictField   dictField;
        str         zipCode;

        if (!prmisDefault(_zipCode))
        {
            dictField = new DictField(tableNum(LogisticsPostalAddress),fieldNum(LogisticsPostalAddress,ZipCode));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_zipCode,dictField,this.mapPolicy().xMLMapZipCode());
                zipCode = this.axLogisticsAddressZipCodeId(_zipCode);
            }
            else
            {
                this.validateInboundString(_zipCode,dictField);
            }

            if (zipCode)
            {
                this.setField(fieldNum(LogisticsPostalAddress, ZipCode), zipCode);
            }
            else
            {
                this.setField(fieldNum(LogisticsPostalAddress, ZipCode), _zipCode);
            }
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressZipCodeId(logisticsPostalAddress.ZipCode);
        }
        else
        {
            return logisticsPostalAddress.ZipCode;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmZipCodeRecId</Name>
				<Source><![CDATA[
    public LogisticsAddressZipCodeRecId parmZipCodeRecId(LogisticsAddressZipCodeRecId _zipCodeRecId = 0)
    {
        if (!prmisDefault(_zipCodeRecId))
        {
            this.setField(fieldNum(LogisticsPostalAddress, ZipCodeRecId), _zipCodeRecId);
        }

        return logisticsPostalAddress.ZipCodeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>save</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts or updates the current record for the class.
    /// </summary>
    /// <remarks>
    ///    Execute this method on the AxBC class after new values are assigned to fields.The actual work to
    ///    save and update a record is performed in the <c>doSave</c> method, which is called by this method.
    /// </remarks>
    public void save()
    {
        if (!updateMode)
        {
            updateMode = ValidTimeStateUpdate::Correction;
        }

        logisticsPostalAddress.validTimeStateUpdateMode(updateMode);

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddress</Name>
				<Source><![CDATA[
    protected void setAddress()
    {
        if (this.isMethodExecuted(funcName()))
        {
            return;
        }

        this.setAddressFields();

        if (this.isAddressFieldsSet())
        {
            var addressStringBuilderParameters = new LogisticsPostalAddressStringBuilderParameters();
            addressStringBuilderParameters.parmStreet(this.parmStreet());
            addressStringBuilderParameters.parmZipCodeId(this.parmZipCode());
            addressStringBuilderParameters.parmCityName(this.parmCity());
            addressStringBuilderParameters.parmCountryRegionId(this.parmCountryRegionId());
            addressStringBuilderParameters.parmStateId(this.parmState());
            addressStringBuilderParameters.parmCountyId(this.parmCounty());
            addressStringBuilderParameters.parmDistrictName(LogisticsAddressDistrict::getDistrictName(this.parmDistrict()));
            addressStringBuilderParameters.parmStreetNumber(this.parmStreetNumber());
            addressStringBuilderParameters.parmBuildingCompliment(this.parmBuildingCompliment());
            addressStringBuilderParameters.parmPostBox(this.parmPostBox());
            addressStringBuilderParameters.parmCityRecId(this.parmCityRecId());
            addressStringBuilderParameters.parmDistrictRecId(this.parmDistrict());
            addressStringBuilderParameters.parmStreetRecId(this.parmStreetId_RU());
            addressStringBuilderParameters.parmHouseRecId(this.parmHouseId_RU());
            addressStringBuilderParameters.callParmSteadRecId(this.parmSteadId_RU());
            addressStringBuilderParameters.parmFlatRecId(this.parmFlatId_RU());
            addressStringBuilderParameters.parmBuilding(this.parmBuilding_RU());
            addressStringBuilderParameters.parmApartment(this.parmApartment_RU());

            logisticsPostalAddress.Address = LogisticsPostalAddressStringBuilder::buildAddressStringFromParameters(addressStringBuilderParameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAddressFields</Name>
				<Source><![CDATA[
    protected void setAddressFields()
    {
        this.setZipCode();
        this.setCity();
        this.setStreet();
        this.setCounty();
        this.setState();
        this.setCountryRegionId();
        this.setCityRecId();
        this.setDistrictName();
        this.setDistrict();
        this.setBuildingCompliment();
        this.setStreetNumber();
        this.setPostBox();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBuildingCompliment</Name>
				<Source><![CDATA[
    protected void setBuildingCompliment()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, BuildingCompliment)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCity</Name>
				<Source><![CDATA[
    protected void setCity()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, City)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCityRecId</Name>
				<Source><![CDATA[
    protected void setCityRecId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, CityRecId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCountryRegionId</Name>
				<Source><![CDATA[
    protected void setCountryRegionId()
    {
        LogisticsAddressZipCode logisticsAddressZipCode;
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, CountryRegionId)))
        {
            return;
        }

        this.setZipCodeRecordFields();

        if (this.isZipCodeRecordFieldsSet())
        {
            logisticsAddressZipCode = this.zipCodeRecord();
            if (logisticsAddressZipCode && logisticsAddressZipCode.CountryRegionId)
            {
                this.parmCountryRegionId(logisticsAddressZipCode.CountryRegionId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCounty</Name>
				<Source><![CDATA[
    protected void setCounty()
    {
        LogisticsAddressZipCode logisticsAddressZipCode;

        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, County)))
        {
            return;
        }

        this.setZipCodeRecordFields();

        if (this.isZipCodeRecordFieldsSet())
        {
            logisticsAddressZipCode = this.zipCodeRecord();
            if (logisticsAddressZipCode && logisticsAddressZipCode.County)
            {
                this.parmCounty(logisticsAddressZipCode.County);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDistrict</Name>
				<Source><![CDATA[
    protected void setDistrict()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, District)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDistrictName</Name>
				<Source><![CDATA[
    protected void setDistrictName()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, DistrictName)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLocation</Name>
				<Source><![CDATA[
    protected void setLocation()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, Location)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPostBox</Name>
				<Source><![CDATA[
    protected void setPostBox()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, PostBox)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setState</Name>
				<Source><![CDATA[
    protected void setState()
    {
        LogisticsAddressZipCode logisticsAddressZipCode;

        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, State)))
        {
            return;
        }

        this.setZipCodeRecordFields();

        if (this.isZipCodeRecordFieldsSet())
        {
            logisticsAddressZipCode = this.zipCodeRecord();
            if (logisticsAddressZipCode && logisticsAddressZipCode.State)
            {
                this.parmState(logisticsAddressZipCode.State);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStreet</Name>
				<Source><![CDATA[
    protected void setStreet()
    {
        LogisticsAddressZipCode logisticsAddressZipCode;

        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, Street)))
        {
            return;
        }

        this.setZipCodeRecordFields();

        if (this.isZipCodeRecordFieldsSet())
        {
            if (this.zipCodeRecord().StreetName)
            {
                logisticsAddressZipCode = this.zipCodeRecord();
                if (logisticsAddressZipCode && logisticsAddressZipCode.StreetName)
                {
                    this.parmStreet(logisticsAddressZipCode.StreetName);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStreetNumber</Name>
				<Source><![CDATA[
    protected void setStreetNumber()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, StreetNumber)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
    protected void setTableFields()
    {
        super();

        useMapPolicy = false;

        this.setAddress();
        this.setCity();
        this.setCountryRegionId();
        this.setCounty();
        this.setState();
        this.setStreet();
        this.setZipCode();
        this.setTimezone();
        this.setLocation();

        useMapPolicy = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTimezone</Name>
				<Source><![CDATA[
    protected void setTimezone()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, TimeZone)))
        {
            return;
        }

        this.setState();
        this.setCountryRegionId();
        this.setZipCode();

        if (this.isFieldSet(fieldNum(LogisticsPostalAddress,CountryRegionId)) && !this.parmState() && !this.parmZipCode())
        {
            this.parmTimeZone(this.countryRegionId_CountryRegionRecord().TimeZone);
        }
        else if (this.isFieldSet(fieldNum(LogisticsPostalAddress,State)) && !this.parmZipCode())
        {
            if (this.parmState())
            {
                this.parmTimeZone(this.state_LogisticsAddressStateRecord().TimeZone);
            }
            else
            {
                this.parmTimeZone(this.countryRegionId_CountryRegionRecord().TimeZone);
            }
        }
        else if (this.isFieldSet(fieldNum(LogisticsPostalAddress,ZipCode)))
        {
            if (this.parmZipCode())
            {
                this.parmTimeZone(this.zipCode_LogisticsAddressZipCodeRecord().TimeZone);
            }
            else if (this.parmState())
            {
                this.parmTimeZone(this.state_LogisticsAddressStateRecord().TimeZone);
            }
            else
            {
                this.parmTimeZone(this.countryRegionId_CountryRegionRecord().TimeZone);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setZipCode</Name>
				<Source><![CDATA[
    protected void setZipCode()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, ZipCode)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setZipCodeRecId</Name>
				<Source><![CDATA[
    protected void setZipCodeRecId()
    {
        if (this.isMethodExecuted(funcName(), fieldNum(LogisticsPostalAddress, ZipCodeRecId)))
        {
            return;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setZipCodeRecordFields</Name>
				<Source><![CDATA[
    protected void setZipCodeRecordFields()
    {
        if (!this.isZipCodeRecordFieldsSet())
        {
            this.setZipCode();
            this.setCity();
            this.setCityRecId();
            this.setDistrictName();
            this.setDistrict();
            this.setCountryRegionId();
            this.setTimezone();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>state_LogisticsAddressStateRecord</Name>
				<Source><![CDATA[
    public LogisticsAddressState state_LogisticsAddressStateRecord(LogisticsAddressState _logisticsAddressState = null)
    {
        LogisticsAddressState   logisticsAddressState;

        if (!state_LogisticsAddressStateIdx)
        {
            state_LogisticsAddressStateIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_logisticsAddressState))
        {
            this.tableCacheInsert(state_LogisticsAddressStateIdx, _logisticsAddressState);
            logisticsAddressState = _logisticsAddressState;
        }
        else
        {
            if (this.tableCacheExist(state_LogisticsAddressStateIdx))
            {
                logisticsAddressState = this.tableCacheLookup(state_LogisticsAddressStateIdx);
            }
            else
            {
                this.setCountryRegionId();
                this.setState();
                logisticsAddressState = LogisticsAddressState::find(this.parmCountryRegionId(), this.parmState());
                this.tableCacheInsert(state_LogisticsAddressStateIdx, logisticsAddressState);
            }
        }

        return logisticsAddressState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validTimeStateUpdateMode</Name>
				<Source><![CDATA[
    public ValidTimeStateUpdate validTimeStateUpdateMode(ValidTimeStateUpdate _updateMode = updateMode)
    {
        updateMode = _updateMode;
        return updateMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueMapDependingFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the incoming value mapping of fields that depend on another field, such as the item,
    ///    state, and county fields.
    /// </summary>
    /// <remarks>
    ///    This method is used in the save method. Therefore the incoming value mapping is performed before
    ///    the fields are defaulted.
    /// </remarks>
    protected void valueMapDependingFields()
    {
        if (this.valueMappingInbound())
        {
            if (state && logisticsPostalAddress.CountryRegionId)
            {
                this.parmState(this.axLogisticsAddressStateId(state,logisticsPostalAddress.CountryRegionId));

                if (county)
                {
                    this.parmCounty(this.axLogisticsAddressCountyId(county,logisticsPostalAddress.CountryRegionId,logisticsPostalAddress.State));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>zipCode_LogisticsAddressZipCodeRecord</Name>
				<Source><![CDATA[
    public LogisticsAddressZipCode zipCode_LogisticsAddressZipCodeRecord(LogisticsAddressZipCode _logisticsAddressZipCode = null)
    {
        LogisticsAddressZipCode   logisticsAddressZipCode;
        if (!zipCode_LogisticsAddressZipCodeIdx)
        {
            zipCode_LogisticsAddressZipCodeIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_logisticsAddressZipCode))
        {
            this.tableCacheInsert(zipCode_LogisticsAddressZipCodeIdx, _logisticsAddressZipCode);
            logisticsAddressZipCode = _logisticsAddressZipCode;
        }
        else
        {
            if (this.tableCacheExist(zipCode_LogisticsAddressZipCodeIdx))
            {
                logisticsAddressZipCode = this.tableCacheLookup(zipCode_LogisticsAddressZipCodeIdx);
            }
            else
            {
                this.setZipCode();
                if (this.parmZipCodeRecId())
                {
                    logisticsAddressZipCode = LogisticsAddressZipCode::findRecId(this.parmZipCodeRecId());
                }
                else
                {
                    logisticsAddressZipCode = LogisticsAddressZipCode::find(this.parmZipCode());
                }
                this.tableCacheInsert(zipCode_LogisticsAddressZipCodeIdx, logisticsAddressZipCode);
            }
        }

        return logisticsAddressZipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>zipCodeRecord</Name>
				<Source><![CDATA[
    public LogisticsAddressZipCode zipCodeRecord(LogisticsAddressZipCode _zipCode = null)
    {
        LogisticsAddressZipCode  zipCode;

        if (!zipCodeIdx)
        {
            zipCodeIdx = this.nextCacheIdx();
        }

        if (!prmisDefault(_zipCode))
        {
            this.tableCacheInsert(zipCodeIdx, _zipCode);
            zipCode = _zipCode;
        }
        else
        {
            if (this.tableCacheExist(zipCodeIdx))
            {
                zipCode = this.tableCacheLookup(zipCodeIdx);
            }
            else
            {
                this.setZipCodeRecordFields();
                if (this.parmZipCodeRecId())
                {
                    zipCode = LogisticsAddressZipCode::findRecId(this.parmZipCodeRecId());
                }
                else
                {
                    zipCode = LogisticsAddressZipCode::findBestMatch(this.currentRecord());
                }
                this.tableCacheInsert(zipCodeIdx, zipCode);
            }
        }
        return zipCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static AxLogisticsPostalAddress construct()
    {
        return new AxLogisticsPostalAddress();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLogisticsPostalAddress</Name>
				<Source><![CDATA[
    public static AxLogisticsPostalAddress newLogisticsPostalAddress(LogisticsPostalAddress _logisticsPostalAddress)
    {
        AxLogisticsPostalAddress axLogisticsPostalAddress = AxLogisticsPostalAddress::construct();
        axLogisticsPostalAddress.addressTable(_logisticsPostalAddress);

        return axLogisticsPostalAddress;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>