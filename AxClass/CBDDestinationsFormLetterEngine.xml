<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CBDDestinationsFormLetterEngine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>CBDDestinationsFormLetterEngine</c> provides functionality to support
/// Electronic reporting destinations on runtime forms.
/// </summary>
public final class CBDDestinationsFormLetterEngine
{
    private CBDDestinationsFormLetterContextInterface context;
    private CBDDestinationsFormLetterContextQueryInterface contextQuery;
    private Object formLetter;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isSupportedPrintMgmtDocType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies if ER destination on runtime form is supported for the particular document type.
    /// </summary>
    /// <param name="_docType">
    /// The print management document type.
    /// </param>
    /// <returns>true if ER destination on runtime form is supported for the particular document type; otherwise, false.</returns>
    public static boolean isSupportedPrintMgmtDocType(PrintMgmtDocumentType _docType)
    {
        container listOfSupportedDocTypes = conNull();

        if (FeatureStateProvider::isFeatureEnabled(CBDAllowERDestinationsAdjustmentRuntimePhase2Feature::instance()))
        {
            listOfSupportedDocTypes += [
                PrintMgmtDocumentType::SalesOrderInvoice,
                PrintMgmtDocumentType::Quotation,
                PrintMgmtDocumentType::Confirmation,
                PrintMgmtDocumentType::SalesOrderPackingSlip,
                PrintMgmtDocumentType::SalesOrderConfirmation,
                PrintMgmtDocumentType::SalesAgreementConfirmation,
                PrintMgmtDocumentType::InventPickList
            ];
        }
        if (FeatureStateProvider::isFeatureEnabled(CBDAllowERDestinationsAdjustmentRuntimePhase3Feature::instance()))
        {
            listOfSupportedDocTypes += [
                PrintMgmtDocumentType::PurchaseOrderInvoice,
                PrintMgmtDocumentType::PurchAgreementConfirmation,
                PrintMgmtDocumentType::PurchaseOrderRequisition,
                PrintMgmtDocumentType::PurchaseOrderPackingSlip,
                PrintMgmtDocumentType::PurchaseOrderConfirmationRequest,
                PrintMgmtDocumentType::PurchRFQ,
                PrintMgmtDocumentType::PurchRFQAccept,
                PrintMgmtDocumentType::PurchRFQReject,
                PrintMgmtDocumentType::PurchRFQReturn
            ];
        }

        if (FeatureStateProvider::isFeatureEnabled(CBDAllowERDestinationsAdjustmentRuntimePhase4Feature::instance()))
        {
            listOfSupportedDocTypes += [
                PrintMgmtDocumentType::SIProjInvoice,
                PrintMgmtDocumentType::SIManagedProjInvoice,
                PrintMgmtDocumentType::SIProjInvoiceWithBR,
                PrintMgmtDocumentType::ProjCustRetentionReleaseInvoice,
                PrintMgmtDocumentType::ProjectQuotation
            ];
        }

        if (FeatureStateProvider::isFeatureEnabled(CBDAllowERDestinationsAdjustmentRuntimePhase5Feature::instance()))
        {
            listOfSupportedDocTypes += [
                PrintMgmtDocumentType::SalesFreeTextInvoice
            ];
        }

        return conFind(listOfSupportedDocTypes, _docType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>analyzePrintManagementSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Analyzes the print management setup for the particular document type.
    /// </summary>
    /// <param name="_formLetter">
    /// The instance of Form Letter.
    /// </param>
    /// <param name="_printMgmtDocumentType">
    /// The print management document type.
    /// </param>
    /// <returns>A container of analyze results.</returns>
    [Hookable(false)]
    public static container analyzePrintManagementSetup(Object _formLetter, PrintMgmtDocumentType _printMgmtDocumentType)
    {
        CBDDestinationsFormLetterContextInterface contextInstance =
            CBDDestinationsFormLetterContextFactory::newFromDocType(_printMgmtDocumentType);

        CBDDestinationsFormLetterEngine instance = new CBDDestinationsFormLetterEngine();
        instance.context = contextInstance;
        instance.contextQuery = contextInstance as CBDDestinationsFormLetterContextQueryInterface;
        instance.formLetter = _formLetter;

        return instance.doAnalyzePrintManagementSetup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doAnalyzePrintManagementSetup</Name>
				<Source><![CDATA[
    private container doAnalyzePrintManagementSetup()
    {
        List printSettingList = this.getPrintSettingList();

        boolean isERSetupExists = false;
        boolean isSSRSSetupExists = false;

        ListEnumerator le = printSettingList.getEnumerator();

        while (le.moveNext())
        {
            PrintMgmtPrintSetting printSetting = le.current();

            for (int i = 1; i <= printSetting.numDetails(); i++)
            {
                PrintMgmtPrintSettingDetail printSettingDetail = printSetting.getDetailByPos(i);

                if (printSettingDetail.parmSSRS() == PrintMgmtSSRS::NonSSRS)
                {
                    isERSetupExists = true;
                }
                else
                {
                    isSSRSSetupExists = true;
                }

                if (isERSetupExists && isSSRSSetupExists)
                {
                    break;
                }
            }

            if (isERSetupExists && isSSRSSetupExists)
            {
                break;
            }
        }

        return [isSSRSSetupExists, isERSetupExists];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFormatNamesDestinationMapByFormLetter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a Map of format names and named destinations that has been setup in print management setup.
    /// for the particular document type.
    /// </summary>
    /// <param name="_formLetter">
    /// The instance of Form Letter.
    /// </param>
    /// <param name="_printMgmtDocumentType">
    /// The print management document type.
    /// </param>
    /// <returns>The Map of format names and named destinations that has been setup in print management setup.</returns>
    [Hookable(false)]
    public static Map getFormatNamesDestinationMapByFormLetter(Object _formLetter, PrintMgmtDocumentType _printMgmtDocumentType)
    {
        CBDDestinationsFormLetterContextInterface contextInstance =
            CBDDestinationsFormLetterContextFactory::newFromDocType(_printMgmtDocumentType);

        CBDDestinationsFormLetterEngine instance = new CBDDestinationsFormLetterEngine();
        instance.context = contextInstance;
        instance.formLetter = _formLetter;

        return instance.doGetFormatNamesDestinationMap();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doGetFormatNamesDestinationMap</Name>
				<Source><![CDATA[
    private Map doGetFormatNamesDestinationMap()
    {
        List printSettingList = this.getPrintSettingList();

        Map ret = new Map(Types::String, Types::Int64);
        ListEnumerator le = printSettingList.getEnumerator();

        while (le.moveNext())
        {
            ret = this.updateFormatNamesByPrintSetting(ret, le.current());
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintSettingList</Name>
				<Source><![CDATA[
    private List getPrintSettingList()
    {
        List printSettingList = new List(Types::Class);

        if (this.shouldAllAvailableDetailsRetrieved())
        {
            printSettingList.addEnd(this.getAllAvailableDetails());
        }
        else
        {
            Common reference = context.getReferenceBuffer(formLetter);

            while (reference.RecId != 0)
            {
                PrintMgmtPrintContext printMgmtPrintContext = this.createPrintContextByReference(reference);

                printSettingList.addEnd(PrintMgmt::getSettings(printMgmtPrintContext));

                reference = this.getNextReference(reference);
            }
        }

        return printSettingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAllAvailableDetailsRetrieved</Name>
				<Source><![CDATA[
    private boolean shouldAllAvailableDetailsRetrieved()
    {
        NumberOfRecords ret;

        if (contextQuery)
        {
            ret = contextQuery.getCountReferencesWithLimit(formLetter, this.thresholdForAllDetails() + 1);
        }
        else
        {
            ret = context.getCountReferences(formLetter);
        }

        return ret > this.thresholdForAllDetails();
    }

]]></Source>
			</Method>
			<Method>
				<Name>thresholdForAllDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the threshold number of documents after which the print management setup
    /// is scaned for print setup not associated to the current documents.
    /// </summary>
    /// <returns>The threshold number of documents after which the print management setup
    /// is scaned for print setup not associated to the current documents.</returns>
    public NumberOfRecords thresholdForAllDetails()
    {
        return 10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrintContextByReference</Name>
				<Source><![CDATA[
    private PrintMgmtPrintContext createPrintContextByReference(Common _reference)
    {
        Common printMgmtReferencedTable = context.getPrintMgmtRefTableBuffer(_reference);
        Common queryTableBuffer = context.getQueryTableBuffer(_reference, formLetter);

        return context.getPrintContext(printMgmtReferencedTable, queryTableBuffer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormatNamesByPrintSetting</Name>
				<Source><![CDATA[
    private Map updateFormatNamesByPrintSetting(Map _formatNamesDestinationMap, PrintMgmtPrintSetting _printSetting)
    {
        for (int i = 1; i <= _printSetting.numDetails(); i++)
        {
            PrintMgmtPrintSettingDetail printSettingDetail = _printSetting.getDetailByPos(i);
            _formatNamesDestinationMap.insert(printSettingDetail.parmReportFormatName(), printSettingDetail.parmNamedDestination());
        }

        return _formatNamesDestinationMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllAvailableDetails</Name>
				<Source><![CDATA[
    private PrintMgmtPrintSetting getAllAvailableDetails()
    {
        PrintMgmtPrintContext printContext = this.createPrintContext();

        return CBDDestinationsController::getSettings(printContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPrintContext</Name>
				<Source><![CDATA[
    private PrintMgmtPrintContext createPrintContext()
    {
        Common common;

        return context.getPrintContext(common, common);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNextReference</Name>
				<Source><![CDATA[
    private Common getNextReference(Common _reference)
    {
        if (contextQuery)
        {
            _reference = contextQuery.getNextReference();
        }
        else
        {
            next _reference;
        }

        return _reference;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>