<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqSetupCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ReqSetupCache</c> class caches item coverage setup data.
/// </summary>
class ReqSetupCache
{
    // Parameters of the cache

    private boolean                             useSetupCache;
    private boolean                             useSetupDimCache;
    private boolean                             disableDbCache;
    private ReqMemoryCacheCurrentSessionScope   memoryCacheCurrentSessionScope;
    private ReqMemoryCacheCrossSessionScope     memoryCacheCrossSessionScope;
    
    // The variables below are initialized on demand and must be accessed through corresponding private getters
    
    private ReqMemoryCacheItemPolicy            memoryCachePolicy;

    // Cached variables

    private ReqSetup                            lastReqSetup;
    private ReqSetupDim                         lastReqSetupDim;
    private System.Collections.IDictionary      lastReqSetupDimPerInventDimId;

    // These caches are used if useSetupCache == true or useSetupDimCache == true but storing data in MemoryCache is not allowed
    private System.Collections.IDictionary      reqSetupByItemId;
    private System.Collections.IDictionary      reqSetupDimsByItemId;


}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        memoryCachePolicy = new ReqMemoryCacheItemPolicy();
        memoryCachePolicy.parmSlidingExpirationHours(this.memoryCacheSlidingExpirationHours());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCacheBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of <c>ReqSetupCache</c> from the specified cache builder.
    /// </summary>
    /// <param name = "_cacheBuilder">The cache builder.</param>
    protected void initFromCacheBuilder(ReqSetupCacheBuilder _cacheBuilder)
    {
        useSetupCache = _cacheBuilder.parmUseSetupCache();
        useSetupDimCache = _cacheBuilder.parmUseSetupDimCache();
        disableDbCache = _cacheBuilder.parmDisableDbCache();
        memoryCacheCurrentSessionScope = _cacheBuilder.parmMemoryCacheCurrentSessionScope();
        memoryCacheCrossSessionScope = _cacheBuilder.parmMemoryCacheCrossSessionScope();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCacheBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of <c>ReqSetupCache</c> from sthe specified cache builder.
    /// </summary>
    /// <param name = "_cacheBuilder">The cache builder.</param>
    /// <returns>A new instance of <c>ReqSetupCache</c>.</returns>
    [Hookable(false)]
    public static ReqSetupCache newFromCacheBuilder(ReqSetupCacheBuilder _cacheBuilder)
    {
        ReqSetupCache cache = new ReqSetupCache();
        cache.initFromCacheBuilder(_cacheBuilder);
        return cache;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqSetup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>ReqSetup</c> object which describes item coverage setup for the specified item.
    /// </summary>
    /// <param name = "_itemId">The ID of the item.</param>
    /// <param name = "_inventTable">The <c>InventTable</c> record.</param>
    /// <returns>A <c>ReqSetup</c> object.</returns>
    [Hookable(false)]
    public ReqSetup reqSetup(ItemId _itemId, InventTable _inventTable = null)
    {
        if (lastReqSetup && lastReqSetup.itemId() == _itemId)
        {
            return lastReqSetup;
        }

        if (useSetupCache)
        {
            if (this.canUseCurrentSessionMemoryCacheScope())
            {
                lastReqSetup = this.getReqSetupFromMemoryCache(_itemId, _inventTable);
            }
            else
            {
                lastReqSetup = this.getReqSetupFromLocalMap(_itemId, _inventTable);
            }
        }
        else
        {
            lastReqSetup = ReqSetup::newItemId(_itemId, _inventTable);
        }

        return lastReqSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqSetupDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>ReqSetupDim</c> object which describes item coverage setup for the specified item and coverage inventory dimensions.
    /// </summary>
    /// <param name = "_reqSetup">The coverage setup for the specified item.</param>
    /// <param name = "_covInventDimId">The ID of the coverage inventory dimension values combination.</param>
    /// <returns>A <c>ReqSetupDim</c> object.</returns>
    [Hookable(false)]
    public ReqSetupDim reqSetupDim(ReqSetup _reqSetup, ReqCovInventDimId _covInventDimId)
    {
        ItemId itemId = _reqSetup.itemId();
        
        if (lastReqSetupDim && lastReqSetupDim.itemId() == itemId)
        {
            if (lastReqSetupDim.parmCovInventDimId() == _covInventDimId)
            {
                return lastReqSetupDim;
            }
        }
        else
        {
            if (useSetupDimCache)
            {
                if (this.canUseCurrentSessionMemoryCacheScope())
                {
                    lastReqSetupDimPerInventDimId = this.getReqSetupDimsFromMemoryCache(itemId);
                }
                else 
                {
                    lastReqSetupDimPerInventDimId = this.getReqSetupDimsFromLocalMap(itemId);
                }
            }
            else
            {
                lastReqSetupDimPerInventDimId = new System.Collections.Generic.Dictionary<str, ReqSetupDim>();
            }
        }

        lastReqSetupDim = lastReqSetupDimPerInventDimId.get_Item(_covInventDimId);

        if (!lastReqSetupDim)
        {
            lastReqSetupDim = this.createReqSetupDim(_reqSetup, _covInventDimId);
            lastReqSetupDimPerInventDimId.Add(_covInventDimId, lastReqSetupDim);
        }

        return lastReqSetupDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReqSetupDim</Name>
				<Source><![CDATA[
    private ReqSetupDim createReqSetupDim(ReqSetup _reqSetup, ReqCovInventDimId _covInventDimId)
    {
        return ReqSetupDim::newFromBuilder(this.createReqSetupDimBuilder(_reqSetup, _covInventDimId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReqSetupDimBuilder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>ReqSetupBuilder</c> instance.
    /// </summary>
    /// <param name = "_reqSetup">A <c>ReqSetup</c> record to initialize the builder with.</param>
    /// <param name = "_covInventDimId">A <c>ReqCovInventDimId</c> to initialize the builder with.</param>
    /// <returns>A <c>ReqSetupBuilder</c> instance.</returns>
    protected ReqSetupDimBuilder createReqSetupDimBuilder(ReqSetup _reqSetup, ReqCovInventDimId _covInventDimId)
    {
        ReqSetupDimBuilder builder = new ReqSetupDimBuilder();

        builder.reqSetup(_reqSetup);
        builder.covInventDimId(_covInventDimId);
        builder.distinctInventDimFlagsList = this.reqItemTableDistinctInventDimFlagsList(_reqSetup.itemId());

        return builder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseCurrentSessionMemoryCacheScope</Name>
				<Source><![CDATA[
    private boolean canUseCurrentSessionMemoryCacheScope()
    {
        return memoryCacheCurrentSessionScope && !memoryCacheCurrentSessionScope.isDisposed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqSetupFromMemoryCache</Name>
				<Source><![CDATA[
    private ReqSetup getReqSetupFromMemoryCache(ItemId _itemId, InventTable _inventTable)
    {
        str key = 'ReqSetup#' + _itemId;

        ReqSetup reqSetup = ReqMemoryCache::getFromCurrentSessionScope(key, memoryCacheCurrentSessionScope);
            
        if (!reqSetup)
        {
            reqSetup = ReqSetup::newItemId(_itemId, _inventTable, disableDbCache);
            ReqMemoryCache::addToCurrentSessionScope(key, reqSetup, memoryCacheCurrentSessionScope, memoryCachePolicy);
        }

        return reqSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqSetupFromLocalMap</Name>
				<Source><![CDATA[
    private ReqSetup getReqSetupFromLocalMap(ItemId _itemId, InventTable _inventTable)
    {
        if (!reqSetupByItemId)
        {
            reqSetupByItemId = new System.Collections.Generic.Dictionary<str, ReqSetup>();
        }

        ReqSetup reqSetup = reqSetupByItemId.get_Item(_itemId);
            
        if (!reqSetup)
        {
            reqSetup = ReqSetup::newItemId(_itemId, _inventTable, disableDbCache);
            reqSetupByItemId.Add(_itemId, reqSetup);
        }

        return reqSetup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqSetupDimsFromMemoryCache</Name>
				<Source><![CDATA[
    private System.Collections.IDictionary getReqSetupDimsFromMemoryCache(ItemId _itemId)
    {
        str key = 'ReqSetupDim#' + _itemId;
                
        System.Collections.IDictionary reqSetupDims = ReqMemoryCache::getFromCurrentSessionScope(key, memoryCacheCurrentSessionScope);
            
        if (!reqSetupDims)
        {
            reqSetupDims = new System.Collections.Generic.Dictionary<str, ReqSetupDim>();
            ReqMemoryCache::addToCurrentSessionScope(key, reqSetupDims, memoryCacheCurrentSessionScope, memoryCachePolicy);
        }

        return reqSetupDims;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReqSetupDimsFromLocalMap</Name>
				<Source><![CDATA[
    private System.Collections.IDictionary getReqSetupDimsFromLocalMap(ItemId _itemId)
    {
        if (!reqSetupDimsByItemId)
        {
            reqSetupDimsByItemId = new System.Collections.Generic.Dictionary<str, System.Collections.IDictionary>();
        }

        System.Collections.IDictionary reqSetupDims = reqSetupDimsByItemId.get_Item(_itemId);
            
        if (!reqSetupDims)
        {
            reqSetupDims = new System.Collections.Generic.Dictionary<str, ReqSetupDim>();
            reqSetupDimsByItemId.Add(_itemId, reqSetupDims);
        }

        return reqSetupDims;
    }

]]></Source>
			</Method>
			<Method>
				<Name>memoryCacheSlidingExpirationHours</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the length of the sliding expiration time span in hours for data stored in the memory cache.
    /// </summary>
    /// <returns>The length of the sliding expiration time span in hours for data stored in the memory cache.</returns>
    protected real memoryCacheSlidingExpirationHours()
    {
        return 2;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqItemTableDistinctInventDimFlagsList</Name>
				<Source><![CDATA[
    private List reqItemTableDistinctInventDimFlagsList(ItemId _itemId)
    {
        List distinctInventDimFlagsList;
        str cacheKey = 'DistinctInventDimList#' + _itemId;

        if (memoryCacheCrossSessionScope)
        {
            distinctInventDimFlagsList = ReqMemoryCache::getFromCrossSessionScope(cacheKey, memoryCacheCrossSessionScope);
        }
        else if (this.canUseCurrentSessionMemoryCacheScope())
        {
            distinctInventDimFlagsList = ReqMemoryCache::getFromCurrentSessionScope(cacheKey, memoryCacheCurrentSessionScope);
        }

        if (!distinctInventDimFlagsList)
        {
            distinctInventDimFlagsList = ReqItemTableDistinctInventDimFlags::createReqItemTableDistinctInventDimFlagsList(_itemId);
        }

        if (memoryCacheCrossSessionScope)
        {
            ReqMemoryCache::addToCrossSessionScope(cacheKey, distinctInventdimFlagsList, memoryCacheCrossSessionScope, memoryCachePolicy);
        }
        else if (this.canUseCurrentSessionMemoryCacheScope())
        {
            ReqMemoryCache::addToCurrentSessionScope(cacheKey, distinctInventdimFlagsList, memoryCacheCurrentSessionScope, memoryCachePolicy);
        }

        return distinctInventDimFlagsList;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>