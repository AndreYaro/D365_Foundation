<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ResResourceAvailabilityCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Resource availability collection controller.
/// </summary>
public class ResResourceAvailabilityCollection extends ResResourceCollection implements IAVCollectionController
{
    private const str cacheScope = "RM";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getExternalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the ResourceId.
    /// </summary>
    /// <param name = "_internalId">RecordId of the Collection item.</param>
    /// <returns>ResourceId of the Collection item.</returns>
    public str getExternalId(str _internalId)
    {
        ResourceRecId resource = str2Int64(_internalId);
        ResResourceDataEntity entity = ResResourceDataEntity::find(resource);
        return entity.ResourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInternalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the RecordId of the collection item.
    /// </summary>
    /// <param name = "_externalId">ResourceId of the Collection item.</param>
    /// <returns>RecordId of the Collection item.</returns>
    public str getInternalId(str _externalId)
    {
        ResourceRecId resource = ResourceFacade::findByResourceId(_externalId);
        return int642Str(resource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectionItemPreviewContent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves collection item preview content.
    /// </summary>
    /// <param name = "_arguments">Collection item identifier data.</param>
    /// <returns>Preview content.</returns>
    public str getCollectionItemPreviewContent(str _arguments)
    {
        ResourceRecId resource;
        if (_arguments)
        {
            resource = this.parseResource(_arguments);
        }

        str content;
        IResourcePreview ciPreview = this.previewProvider();
        if (resource && ciPreview)
        {
            ciPreview.control(this.control());
            ResAvailabilityViewContext context = this.getContext();
            content = ciPreview.getPreviewContent(resource, context.startDateTime());
        }

        return content;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parseResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses resource record Id from the string argument.
    /// </summary>
    /// <param name = "_arguments">Arguments string.</param>
    /// <returns>Resource record Id.</returns>
    protected ResourceRecId parseResource(str _arguments)
    {
        ActivityRecId           activity;
        ResourceRecId           resource;
        Activityresourcerecid   activityResource;

        if (_arguments)
        {
            [activity, resource, activityResource] = str2con(_arguments, ResUtil::collectionItemDataDelimiter);
        }

        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollectionQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the query for all resources of the company.
    /// </summary>
    /// <returns>Instance of query object.</returns>
    public Query getCollectionQuery()
    {
        Query query = super();
        ResAvailabilityViewContext context = this.getContext();

        if (context)
        {
            QueryBuildDataSource qDS = query.dataSourceNo(1);
            qDS.range(1).value(queryValue(curext()));
            qDS.range(2).value(strfmt('..%1', queryValue(context.endDateTime())));
            qDS.range(3).value(strfmt('%1..', queryValue(context.startDateTime())));

            // apply legal entity filters
            str legalEntities = context.LegalEntities();
            // replace space character with comma since ProjResourceCompanyLookup form uses space character as delimeter
            legalEntities = strReplace(legalEntities, ProjConstants::multipleSelectLEDelimiter, ',');
            if (legalEntities)
            {
                qDS.range(4).value(legalEntities); // legal entities
            }

            ResourceRecId resource = context.resource();
            if (resource)
            {
                qDS.range(5).value(queryValue(resource)); // specific resource
            }

            // apply department filters
            str departments = context.Departments();
            if (departments)
            {
                QueryBuildDataSource dataSource = qDS.childDataSourceNo(1); // resource deparments
                dataSource.enabled(true);
                dataSource.range(1).value(departments); // department
            }

            // apply resource category filters
            str categories = context.ResourceCategories();
            if (categories)
            {
                QueryBuildDataSource dataSource = qDS.childDataSourceNo(2); // resource categories
                dataSource.enabled(true);
                dataSource.range(1).value(categories); // resource category id

                ProjActivityRoleRecency roleRecency = context.ResourceCategoriesRecency();
                if (roleRecency != ProjActivityRoleRecency::NoRange)
                {
                    dataSource = qDS.childDataSourceNo(3); // activity resource categories
                    dataSource.enabled(true);

                    utcdatetime currentDateTime = DateTimeUtil::getSystemDateTime();
                    utcdatetime dateTimeInThePast;

                    switch (roleRecency)
                    {
                        case ProjActivityRoleRecency::Past6Months:
                            dateTimeInThePast = DateTimeUtil::addMonths(currentDateTime, -6);
                            break;
                        case ProjActivityRoleRecency::Past12Months:
                            dateTimeInThePast = DateTimeUtil::addMonths(currentDateTime, -12);
                            break;
                    }

                    QueryBuildRange range;
                    range = dataSource.range(1);
                    // start date earlier than current date/time
                    range.value(strfmt('..%1', queryValue(currentDateTime)));

                    range = dataSource.range(2);
                    // end date should be later than specified date/time in the past
                    range.value(strFmt('%1..', queryValue(dateTimeInThePast)));
                }
            }
        }

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveEntity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Serializes common record to data contract instance.
    /// </summary>
    /// <param name = "entity">Record instance.</param>
    /// <returns>Instance of <c>CollectionItemDataContract</c>.</returns>
    public CollectionItemDataContract resolveEntity(Common entity)
    {
        List properties = new List(Types::Class);

        EntityFieldDataContract kvPair = EntityFieldDataContract::construct('Name', entity.getFieldValue('Name'));
        properties.addEnd(kvPair);
        kvPair = EntityFieldDataContract::construct('Role', entity.getFieldValue('SourceCompany'));
        properties.addEnd(kvPair);
        kvPair = EntityFieldDataContract::construct('ResourceId', entity.getFieldValue('ResourceId'));
        properties.addEnd(kvPair);

        ResourceRecId resourceRecId = entity.getFieldValue('Resource');
        SysGlobalObjectCache cache = new SysGlobalObjectCache();
        cache.insert(cacheScope, ['Resource', resourceRecId], [entity.getFieldValue('SourceLegalEntity')]);

        CollectionItemDataContract resource = CollectionItemDataContract::construct();
        resource.CollectionKey(this.buildCollectionItemKey(0, resourceRecId, 0));
        resource.Properties(properties);
        return resource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildCollectionItemKey</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds item collection key using activity, resource and activity resource properties of the collection item.
    /// </summary>
    /// <param name = "_activity">Activity that collection item is associated with.</param>
    /// <param name = "_resource">Resource that collection item is associated with.</param>
    /// <param name = "_activityResource">Activity resource that collection item is associated with.</param>
    /// <returns>Returns activity,resource and activity resource of the collection item.</returns>
    protected str buildCollectionItemKey(ActivityRecId _activity, ResourceRecId _resource, Activityresourcerecid _activityResource)
    {
        return strFmt(ResUtil::activityResourceIdStrFormat,
            _activity,
            _resource,
            _activityResource);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of the resource availability collection controller.
    /// </summary>
    /// <returns>Instance of <c>ResResourceAvailabilityCollection</c>.</returns>
    public static IAVCollectionController construct()
    {
        IAVCollectionController controller = new ResResourceAvailabilityCollection();
        return controller;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>