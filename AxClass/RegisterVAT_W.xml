<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RegisterVAT_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Wrapper for date of VAT register dialog.
/// </summary>
final class RegisterVAT_W extends RunBase
{
    private container    taxTransRecId;
    private DialogField  newVATDateField;
    private VatDueDate_W vatDueDate;
    static Common common;

    private const Integer CurrentVersion = 1;

    #localmacro.CurrentList
        taxTransRecId,
        vatDueDate
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        Dialog ret = super();

        newVATDateField = ret.addFieldValue(extendedTypeStr(VatDueDate_W), vatDueDate);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        vatDueDate = newVATDateField.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxPeriodClosed</Name>
				<Source><![CDATA[
    private boolean isTaxPeriodClosed(TaxPeriod _taxPeriod, TaxTrans _updateTrans)
    {
        #ISOCountryRegionCodes
        TaxTrans_W taxTrans_W = _updateTrans.taxTrans_W();
        TaxReportPeriod taxReportPeriodFrom = TaxReportPeriod::find(_taxPeriod, taxTrans_W.VatDueDate_W);
        TaxReportPeriod taxReportPeriodTo = TaxReportPeriod::find(_taxPeriod, vatDueDate);
        boolean isIT = MultipleTaxIdReportingHelper::isLegalEntityOrTaxPeriodInCountryRegion(
            _taxPeriod, [#isoIT], MultipleTaxIdScope::VATDeclaration);
        boolean isCZ = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]);

        // Can not change VAT register date from a closed period
        if ((isCZ && taxReportPeriodFrom.Closed_CZ) || (isIT && taxReportPeriodFrom.Closed))
        {
            error(strFmt("@GLS113703", taxTrans_W.VatDueDate_W, _taxPeriod));
            return true;
        }

        // Can not change VAT register date to a closed period
        if ((isCZ && taxReportPeriodTo.Closed_CZ) || (isIT && taxReportPeriodTo.Closed))
        {
            error(strFmt("@GLS113704", _updateTrans.Voucher, _updateTrans.TaxCode, vatDueDate, _taxPeriod));
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxTransRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets record Ids for TaxTrans referred to <c>RegisterVAT_W</c> instance.
    /// </summary>
    /// <param name = "_taxTransRecId">Record Ids for TaxTrans to be involved.</param>
    /// <returns>Record Ids for TaxTrans referred.</returns>
    public container parmTaxTransRecId(container _taxTransRecId = taxTransRecId)
    {
        taxTransRecId = _taxTransRecId;

        return taxTransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVatDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets date of VAT register to <c>RegisterVAT_W</c> instance.
    /// </summary>
    /// <param name = "_vatDueDate">Date of VAT register to be involved.</param>
    /// <returns>Date of VAT register referred.</returns>
    public VatDueDate_W parmVatDueDate(VatDueDate_W _vatDueDate = vatDueDate)
    {
        vatDueDate = _vatDueDate;

        return vatDueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceEEU00008, funcName());

        TaxTrans                updateTrans;
        FiscalCalendarRecId     fiscalCalendarRecId     = Ledger::fiscalCalendar(CompanyInfo::current());
        TaxParameters taxParameters = TaxParameters::find();

        try
        {
            ttsbegin;

            for (int conIdx = conLen(taxTransRecId); conIdx; conIdx--)
            {
                RecId updateTransRecId = conPeek(taxTransRecId, conIdx);

                select firstonly forupdate updateTrans
                    where updateTrans.RecId == updateTransRecId;

                TaxPeriod taxPeriod = updateTrans.TaxPeriod? updateTrans.TaxPeriod : TaxTable::taxPeriod(updateTrans.TaxCode);

                //Cannot post to or from a closed period
                if (this.isTaxPeriodClosed(taxPeriod, updateTrans))
                {
                    continue;
                }

                TaxTrans_W taxTrans_W = updateTrans.taxTrans_W();
                taxTrans_W.VatDueDate_W   = vatDueDate;
                updateTrans.packTaxTrans_W(taxTrans_W);
                updateTrans.PostponeVAT    = NoYes::No;

                if (updateTrans.TaxOrigin != TaxOrigin::TaxReporting)
                {
                    if (TaxParameters::reportUseVatDueDate_W() == NoYes::Yes)
                    {
                        updateTrans.TaxRepCounter = TaxReportPeriod::version(taxPeriod, taxTrans_W.VatDueDate_W);
                    }
                    else
                    {
                        updateTrans.TaxRepCounter = TaxReportPeriod::version(taxPeriod, updateTrans.TransDate);
                    }
                }

                updateTrans.update();
            }

            if (common)
            {
                FormDataSource formDS = FormDataUtil::getFormDataSource(common);

                for (TmpRegisterVAT tmpRegisterVAT = formDS.getFirst(true) ? formDS.getFirst(true) : common;
                        tmpRegisterVAT;
                        tmpRegisterVAT = formDS.getNext())
                {
                    tmpRegisterVAT.selectForUpdate(true); 
                    tmpRegisterVAT.VatDueDate_W = vatDueDate;
                    tmpRegisterVAT.update();
                }
            }
            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);

        switch (version)
        {
            case CurrentVersion:
                [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the VAT due date in addition to the usual validation implemented in the parent class.
    /// </summary>
    /// <param name="calledFrom">
    /// The caller object.
    /// </param>
    /// <returns>
    /// True if the validation passed; otherwise false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        return super(calledFrom) && this.validateVATDueDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVATDueDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks that the VAT due date was specified and falls within an open ledger period.
    /// </summary>
    /// <returns>
    /// True if the validation passed; otherwise false.
    /// </returns>
    public boolean validateVATDueDate()
    {
        boolean ret = true;

        if (vatDueDate)
        {
            FiscalCalendarRecId fiscalCalendarRecId  = Ledger::fiscalCalendar(CompanyInfo::current());
            FiscalCalendarPeriod fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(fiscalCalendarRecId, vatDueDate, FiscalPeriodType::Operating);

            ret = LedgerFiscalCalendar::checkModuleIsOpen(SysModule::Ledger, vatDueDate, fiscalCalendarPeriod, false)
                  && fiscalCalendarPeriod.currentLedgerPeriodStatus() == FiscalPeriodStatus::Open;
            if (!ret)
            {
                checkFailed(strFmt("@SYS62278", SysModule::Ledger, vatDueDate));
            }
        }
        else
        {
            ret = checkFailed(strFmt("@SYS4080022", "@GLS109142"));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static RegisterVAT_W construct()
    {
        return new RegisterVAT_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static Name description()
    {
        return "@GLS109142";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        container      taxTransRecId = conNull();

        RegisterVAT_W  registerVAT = RegisterVAT_W::construct();

        if (! _args                             ||
            ! _args.record()                    ||
            ! FormDataUtil::isFormDataSource(_args.record()) ||
              _args.dataset() != tableNum(TmpRegisterVAT))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (registerVAT.prompt())
        {
            common = _args.record();
            FormDataSource formDS = FormDataUtil::getFormDataSource(common);

            for (TmpRegisterVAT tmpRegisterVAT = formDS.getFirst(true) ? formDS.getFirst(true) : common;
                    tmpRegisterVAT;
                    tmpRegisterVAT = formDS.getNext())
            {
                taxTransRecId += tmpRegisterVAT.TaxTrans;
            }

            registerVAT.parmTaxTransRecId(taxTransRecId);

            registerVAT.runOperation();
            formDS.research();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>