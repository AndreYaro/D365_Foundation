<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqEventProcessParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqEventProcessParm</c> class is a data carrier class that holds parameters to be used by the requirement event process.
/// </summary>
public class ReqEventProcessParm
{
    InventMovement      inventMovement;
    InventTransIdSum    inventTransIdSumOrig;
    InventTransIdSum    inventTransIdSum;
    ReqPeggingEvent     reqPeggingEvent;
    InventDimId         origInventDimId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes class instance variables.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        if (inventMovement)
        {
            inventTransIdSumOrig = inventMovement.transIdSum();
            inventTransIdSumOrig.calcSum();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransIdSum</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the <c>InventTransIdSum</c> instance of the class.
    /// </summary>
    /// <returns>
    ///    A <c>InventTransIdSum</c> instance; otherwise, null.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected InventTransIdSum inventTransIdSum()
    {
        if (!inventTransIdSum)
        {
            if (inventMovement)
            {
                inventTransIdSum = inventMovement.transIdSum(true);
            }
        }

        return inventTransIdSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the original quantity of the related event.
    /// </summary>
    /// <returns>
    ///    The original quantity.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty originalQuantity()
    {
        InventQty   qty;

        if (inventTransIdSumOrig)
        {
            qty = min(0,inventTransIdSumOrig.issue() + inventTransIdSumOrig.receipt());
        }
        else
        {
            if (reqPeggingEvent)
            {
                qty = reqPeggingEvent.OriginalQty;
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventMovement</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventMovement parmInventMovement(InventMovement _inventMovement = inventMovement)
    {
        inventMovement = _inventMovement;
        return inventMovement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the original inventDim Id of the source line before updating.
    /// </summary>
    /// <param name="_origInventDimId">
    ///    An inventDim Id string value.
    /// </param>
    /// <returns>
    ///    The original inventDimId.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventDimId parmOrigInventDimId(InventDimId _origInventDimId  = origInventDimId)
    {
            origInventDimId = _origInventDimId;
            return origInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPeggingEvent</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReqPeggingEvent parmReqPeggingEvent(ReqPeggingEvent _reqPeggingEvent = reqPeggingEvent)
    {
        reqPeggingEvent = _reqPeggingEvent;
        return reqPeggingEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reservedPhysicalQtyDelta</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the delta of the physical reserved quantity of the related event.
    /// </summary>
    /// <returns>
    ///    The delta of the physical reserved quantity.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The method was called incorrectly.
    /// </exception>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQty reservedPhysicalQtyDelta()
    {
        InventQty   qty;

        if (inventTransIdSumOrig)
        {
            if (!this.inventTransIdSum())
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            qty = inventTransIdSumOrig.reservPhysical() - this.inventTransIdSum().reservPhysical();
        }
        else
        {
            if (reqPeggingEvent)
            {
                qty = reqPeggingEvent.ReservedPhysicalQtyDelta;
            }
        }

        return qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a mew instance of the <c>ReqEventProcessParm</c> class.
    /// </summary>
    /// <returns>
    ///    A mew instance of the <c>ReqEventProcessParm</c> class.
    /// </returns>
    private static ReqEventProcessParm construct()
    {
        return new ReqEventProcessParm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newInventMovement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a mew instance of the <c>ReqEventProcessParm</c> class.
    /// </summary>
    /// <param name="_inventMovement">
    ///    A inventory movement that is used to initialize the class.
    /// </param>
    /// <returns>
    ///    A mew instance of the <c>ReqEventProcessParm</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessParm newInventMovement(InventMovement _inventMovement)
    {
        ReqEventProcessParm reqEventProcessParm = ReqEventProcessParm::construct();

        reqEventProcessParm.parmInventMovement(_inventMovement);
        reqEventProcessParm.init();

        return reqEventProcessParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newReqPeggingEvent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a mew instance of the <c>ReqEventProcessParm</c> class.
    /// </summary>
    /// <param name="_reqPeggingEvent">
    ///    A <c>ReqPeggingEvent</c> table record that is used to initialize the class.
    /// </param>
    /// <returns>
    ///    A mew instance of the <c>ReqEventProcessParm</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqEventProcessParm newReqPeggingEvent(ReqPeggingEvent _reqPeggingEvent)
    {
        ReqEventProcessParm reqEventProcessParm = ReqEventProcessParm::construct();

        reqEventProcessParm.parmReqPeggingEvent(_reqPeggingEvent);
        reqEventProcessParm.init();

        return reqEventProcessParm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>