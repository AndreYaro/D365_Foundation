<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustEntryCertificateChangeStatus_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustEntryCertificateChangeStatus_W</c> class is intended to change
///    the status of entry certificates.
/// </summary>
class CustEntryCertificateChangeStatus_W extends RunBase
{
    EntryCertificateStatus_W    curStatus, newStatus;
    RefRecId                    jourRecId;

    DialogField                 fieldCurStatus;
    DialogField                 fieldNewStatus;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
         curStatus,
         newStatus,
         jourRecId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the dialog box to ask for the new status.
    /// </summary>
    /// <returns>
    ///    An object that contains the dialog box.
    /// </returns>
    public Object dialog()
    {
        Dialog  dialog;

        dialog = super();

        fieldCurStatus = dialog.addFieldValue(enumStr(EntryCertificateStatus_W), curStatus, "@SYS33664");
        fieldCurStatus.allowEdit(false);

        fieldNewStatus = dialog.addField(enumStr(EntryCertificateStatus_W), "@SYS33665");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the new status from the dialog.
    /// </summary>
    /// <returns>
    ///     boolean.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        newStatus = fieldNewStatus.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get the last value from SysLastValue.  Overriden so that no record is retrieved.
    /// </summary>
    public void getLast()
    {
        // We do not want to call super here as we do not want to get the record from SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes internal variables and creates an object of the class.
    /// </summary>
    /// <param name="_entryCertificateJour">
    ///    An entry certificate journal which status has to be changed.
    /// </param>
    void new(CustEntryCertificateJour_W     _entryCertificateJour)
    {
        super();

        jourRecId = _entryCertificateJour.RecId;
        curStatus = _entryCertificateJour.Status;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>, which is defined in the <c>ClassDeclaration</c> method.
    /// </summary>
    /// <returns>
    ///    A container that holds the macros for <c>CurrentVersion</c> and <c>CurrentList</c>.
    /// </returns>
    public container pack()
    {
        return [#CurrentVersion,#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Performs the main logic of the class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount
        CustEntryCertificateJour_W  entryCertificateJourUpd;

        try
        {
            ttsbegin;

            entryCertificateJourUpd = CustEntryCertificateJour_W::findRecId(jourRecId, true);
            entryCertificateJourUpd.Status = newStatus;
            entryCertificateJourUpd.update();

            ttscommit;

            info(strfmt("@SYS4004124", entryCertificateJourUpd.EntryCertificateId, curStatus, newStatus));
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveLast</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Save the last value to SysLastValue.  Overriden so that no record is saved.
    /// </summary>
    public void saveLast()
    {
        // We do not want to call super here as we do not want to save the record to SysLastValue.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Unpacks what the <c>pack</c> method has packed.
    /// </summary>
    /// <param name="packedClass">
    ///    The packed class in a container.
    /// </param>
    /// <returns>
    ///    true if the container has been unpacked successfully; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    When the <c>isSwappingPrompt</c> method returns a value of true, it may be necessary to unpack some prompt-related variables as well.
    /// </remarks>
    public boolean unpack(container packedClass)
    {
        Integer     version     = conpeek(packedClass,1);

        switch (version)
        {
            case #CurrentVersion :
                  [version,#CurrentList] = packedClass;
                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates if the status can be changed.
    /// </summary>
    /// <param name="_calledFrom">
    ///    Caller.
    /// </param>
    /// <returns>
    ///    True if the status can be changed, false otherwise.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        boolean                     ret;
        CustEntryCertificateJour_W  entryCertificateJour = CustEntryCertificateJour_W::findRecId(jourRecId);

        ret = super(_calledFrom);

        if (ret)
        {
            if (curStatus == newStatus)
            {
                ret = checkFailed("@SYS4004121");
            }

            if (curStatus == EntryCertificateStatus_W::Cancelled)
            {
                ret = checkFailed("@SYS4004122");
            }

            if (   entryCertificateJour.SourceRefTableId == tableNum(CustInvoiceJour)
                && CustInvoiceJour::findRecId(entryCertificateJour.SourceRefRecId).custInvoiceJour_W().EntryCertificateReceiptStatus_W == EntryCertificateReceiptStatus_W::Received)
            {
                ret = checkFailed(strfmt("@SYS4004123", EntryCertificateReceiptStatus_W::Received));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Method returns a new instance of the <c>CustEntryCertificateChangeStatus_W</c> class.
    /// </summary>
    /// <param name="_entryCertificateJour">
    ///    <c>CustEntryCertificateJour_W</c> record which status has to be changed.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>CustEntryCertificateChangeStatus_W</c> class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public CustEntryCertificateChangeStatus_W construct(CustEntryCertificateJour_W    _entryCertificateJour)
    {
        return new CustEntryCertificateChangeStatus_W(_entryCertificateJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Description of the class.
    /// </summary>
    /// <returns>
    ///    Text description of the class.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return "@SYS4004135";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Starts the status changing.
    /// </summary>
    /// <param name = "_args">
    ///    Arguments.
    /// </param>
    static void main(Args _args)
    {
        CUstEntryCertificateChangeStatus_W  runClass;
        FormDataSource                      formDataSource;

        if (   _args
            && _args.record()
            && _args.dataset() == tableNum(CustEntryCertificateJour_W))
        {
            runClass = CustEntryCertificateChangeStatus_W::construct(_args.record());

            if (runClass.prompt())
            {
                runClass.runOperation();

                formDataSource = FormDataUtil::getFormDataSource(_args.record());
                if (formDataSource)
                {
                    formDataSource.reread();
                    formDataSource.refresh();
                    formDataSource.active();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>