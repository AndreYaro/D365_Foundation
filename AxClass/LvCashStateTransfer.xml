<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LvCashStateTransfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides a dialog for selecting date ranges for transactions in cash.
/// </summary>
public class LvCashStateTransfer extends RunBase
{
    FromDate        fromDate;
    ToDate          toDate;

    DialogField     dialogFromDate;
    DialogField     dialogToDate;

    #define.CurrentVersion(1)

    #localmacro.CurrentList
        fromDate,
        toDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        DialogGroup     periodGroup;

        periodGroup     = dialog.addGroup("@SYS40");

        dialogFromDate  = dialog.addFieldValue(identifierStr(FromDate), fromDate, '', "@SYS12292");
        dialogToDate    = dialog.addFieldValue(identifierStr(ToDate), toDate, '', "@SYS6962");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value from the dialog.
    /// </summary>
    /// <returns>
    /// True if successful; otherwise false.
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        fromDate = dialogFromDate.value();
        toDate   = dialogToDate.value();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTableIdByRepresType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the appropriate <c>TableId</c> based on RCashDocrepresType.
    /// </summary>
    /// <param name = "_represType">Representation type for Ledger account type</param>
    /// <returns><c>TableId</c> based on RCashDocrepresType</returns>
    protected TableId getTableIdByRepresType(RCashDocRepresType _represType)
    {
        TableId ret;

        switch (_represType)
        {
            case RCashDocRepresType::Customer:
                ret = tablenum(CustTable);
                break;

            case RCashDocRepresType::Vendor:
                ret = tablenum(VendTable);
                break;

            case RCashDocRepresType::Other:
                ret = tablenum(LvOtherClients);
                break;

            default:
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTableIdFromRCashTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the appropriate <c>TableId</c> based on journal account type.
    /// </summary>
    /// <param name="_rCashTrans">
    /// The <c>RCashTrans</c> record.
    /// </param>
    /// <returns>
    /// A <c>TableId</c> based on journal account type.
    /// </returns>
    public TableId getSourceTableIdFromRCashTrans(RCashTrans _rCashTrans)
    {
        TableId     tableId;

        switch (_rCashTrans.OffsetAccountType)
        {
            case LedgerJournalACType::Cust:
                tableId = tablenum(CustTable);
                break;

            case LedgerJournalACType::Vend:
                tableId = tablenum(VendTable);
                break;

            case LedgerJournalACType::Employee_RU:
                tableId = tablenum(EmployeeTable_RU);
                break;

            case LedgerJournalACType::Ledger:
                if (_rCashTrans.DocRepresPersonId)
                {
                    tableId = this.getTableIdByRepresType(_rCashTrans.DocRepresType);
                }
                break;

            case LedgerJournalACType::Project:
                tableId = tablenum(CustTable);
                break;

            default:
                break;
        }

        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00012, funcName());

        RCashTrans           cashTrans;
        LvCashStateTrans     lvCashStateTrans;
        LvCashStateTrans     cashStateTrans;
        boolean              isLvOtherClients;

        ttsBegin;

        while select cashTrans
            order by TransDate
            where cashTrans.TransDate >= fromDate                           &&
                  cashTrans.TransDate <= toDate                             &&
                  cashTrans.DocType   != RCashDocType::ExchRateDifference   &&
                  ( cashTrans.OffsetAccountType     == LedgerJournalACType::Cust        ||
                    cashTrans.OffsetAccountType     == LedgerJournalACType::Vend        ||
                    cashTrans.OffsetAccountType     == LedgerJournalACType::Project     ||
                    cashTrans.OffsetAccountType     == LedgerJournalACType::Employee_RU ||
                    (   cashTrans.OffsetAccountType    == LedgerJournalACType::Ledger  &&
                        cashTrans.DocRepresType        != RCashDocRepresType::Employee &&
                        cashTrans.DocRepresPersonId
                    )
                  )
            notexists join cashStateTrans
               where cashTrans.RecId == cashStateTrans.RefRecId
        {
            lvCashStateTrans.clear();

            lvCashStateTrans.initFromRCashTrans(cashTrans);

            switch (this.getSourceTableIdFromRCashTrans(cashTrans))
            {
                case tablenum(CustTable):
                    lvCashStateTrans.initFromCustTable(cashTrans);
                    break;

                case tablenum(VendTable):
                    lvCashStateTrans.initFromVendTable(cashTrans);
                    break;

                case tableNum(EmployeeTable_RU):
                    lvCashStateTrans.initFromEmployeeTable(cashTrans);
                    break;

                case tablenum(LvOtherClients):
                    isLvOtherClients = true;
                    lvCashStateTrans.initFromOtherClients(cashTrans);
                    break;

                default:
                    break;
            }

            lvCashStateTrans.initPaymCode(cashTrans);
            lvCashStateTrans.initCountryCode();

            lvCashStateTrans.insert();
        }

        ttsCommit;

        if (isLvOtherClients)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceLV00001, funcName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int version = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version,#CurrentList] = _packedClass;
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine if the dates selected are valid date ranges.
    /// </summary>
    /// <param name="_caller">
    /// The caller object, optional.
    /// </param>
    /// <returns>
    /// True if valid; otherwise false.
    /// </returns>
    public boolean validate(Object _caller = null)
    {
        boolean isValid = true;

        isValid = super(_caller);

        if (fromDate > toDate)
        {
            isValid = checkFailed("@SYS22806");
        }

        if (!fromDate || !toDate)
        {
            isValid = checkFailed("@SYS24455");
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static LvCashStateTransfer construct()
    {
        return new LvCashStateTransfer();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS113193";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        LvCashStateTransfer lvCashStateTransfer = LvCashStateTransfer::construct();
        FormRun             formRun;

        if (_args && _args.caller() && _args.dataset())
        {
            formRun = _args.caller();
        }
        else
        {
            throw error(Error::wrongUseOfFunction("@GLS113193"));
        }

        if (lvCashStateTransfer.prompt())
        {
            lvCashStateTransfer.runOperation();

            if (formRun && formRun.dataSource())
            {
                formRun.dataSource().research(true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>