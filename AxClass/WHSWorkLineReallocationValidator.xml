<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkLineReallocationValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWorkLineReallocationValidator</c> class is responsible for validating if it is possible to run the work line reallocation logic.
/// </summary>
public class WHSWorkLineReallocationValidator
{
    protected WHSWorkLine         workLineToReallocate;
    protected Qty                 initialWorkLineInventQty;
    protected Qty                 inventQtyToReallocate;
    protected WHSWorkException    workException;
    protected WHSUserId           userId;

    protected WHSWorkTable    workTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSWorkLineReallocationValidator construct()
    {
        return new WHSWorkLineReallocationValidator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromWorkLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>WHSWorkLineReallocationValidator</c> instance with the specified parameters.
    /// </summary>
    /// <param name = "_workLineToReallocate">The work line that needs to be reallocated</param>
    /// <param name = "_initialWorkLineInventQty">The total initial work inventory quantity</param>
    /// <param name = "_inventQtyToReallocate">The inventory quantity needed to be reallocated</param>
    /// <param name = "_workException">The selected work exception</param>
    /// <param name = "_userId">The user ID</param>
    /// <returns>A new instance of the <c>WHSWorkLineReallocator</c> class</returns>
    public static WHSWorkLineReallocationValidator newFromWorkLine(
                                                        WHSWorkLine         _workLineToReallocate,
                                                        Qty                 _initialWorkLineInventQty,
                                                        Qty                 _inventQtyToReallocate,
                                                        WHSWorkException    _workException,
                                                        WHSUserId           _userId)
    {
        WHSWorkLineReallocationValidator workLineReallocatorValidator = WHSWorkLineReallocationValidator::construct();
        workLineReallocatorValidator.parmWorkLineToReallocate(_workLineToReallocate);
        workLineReallocatorValidator.parmInitialWorkLineInventQty(_initialWorkLineInventQty);
        workLineReallocatorValidator.parmInventQtyToReallocate(_inventQtyToReallocate);
        workLineReallocatorValidator.parmWorkException(_workException);
        workLineReallocatorValidator.parmUserId(_userId);

        return workLineReallocatorValidator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkException</Name>
				<Source><![CDATA[
    public WHSWorkException parmWorkException(WHSWorkException _workException = workException)
    {
        workException = _workException;

        return workException;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUserId</Name>
				<Source><![CDATA[
    public WHSUserId parmUserId(WHSUserId _userId = userId)
    {
        userId = _userId;

        return userId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventQtyToReallocate</Name>
				<Source><![CDATA[
    public Qty parmInventQtyToReallocate(Qty _inventQtyToReallocate = inventQtyToReallocate)
    {
        inventQtyToReallocate = _inventQtyToReallocate;

        return inventQtyToReallocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitialWorkLineInventQty</Name>
				<Source><![CDATA[
    public Qty parmInitialWorkLineInventQty(Qty _initialWorkLineInventQty = initialWorkLineInventQty)
    {
        initialWorkLineInventQty = _initialWorkLineInventQty;

        return initialWorkLineInventQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkLineToReallocate</Name>
				<Source><![CDATA[
    public WHSWorkLine parmWorkLineToReallocate(WHSWorkLine _workLineToReallocate = workLineToReallocate)
    {
        workLineToReallocate = _workLineToReallocate;
        workTable = WHSWorkTable::find(workLineToReallocate.WorkId);

        return workLineToReallocate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkUserPolicy</Name>
				<Source><![CDATA[
    protected boolean validateWorkUserPolicy()
    {
        WHSWorkUser workUser = WHSWorkUser::find(this.parmUserId());

        if (workException.determineItemReallocationForWorkUser(workUser) == WHSItemReallocation::None)
        {
            WHSWorkCreateHistory::createWorkHistoryLine(
                                            workTable.WorkBuildId,
                                            "@WAX:ReallocationCannotRunBecauseOfWorkUserPolicies",
                                            false);

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuantities</Name>
				<Source><![CDATA[
    protected boolean validateQuantities()
    {
        if (initialWorkLineInventQty < inventQtyToReallocate)
        {
            WHSWorkCreateHistory::createWorkHistoryLine(
                                            workTable.WorkBuildId,
                                            "@WAX:InitialWorkLineQtyLessThanRequestedForReallocation",
                                            false);

            return false;
        }

        if (inventQtyToReallocate < 0 || initialWorkLineInventQty < 0)
        {
            WHSWorkCreateHistory::createWorkHistoryLine(
                                            workTable.WorkBuildId,
                                            "@WAX:WorkLineQtyAndQtyToReallocateNeedToBePositive",
                                            false);

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        boolean ret = this.validateWorkTransType();

        if (ret)
        {
            ret = this.validateWorkUserPolicy();
            ret = ret && this.validateQuantities();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWorkTransType</Name>
				<Source><![CDATA[
    protected boolean validateWorkTransType()
    {
        boolean ret = WHSWorkLineReallocationValidator::canCreateReallocatorForWorkOrderType(workTable.WorkTransType);

        if (!ret)
        {
            WHSWorkCreateHistory::createWorkHistoryLine(
                                            workTable.WorkBuildId,
                                            "@WAX:AutoReallocationEnabledForSalesTransferIssueReplenishmentProdPick",
                                            false);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateReallocatorForWorkOrderType</Name>
				<Source><![CDATA[
    public static boolean canCreateReallocatorForWorkOrderType(WHSWorkTransType _workTransType)
    {
        return WhsWorkTransactionType::singletonFromTypeOrDefault(_workTransType).isAutoReallocationSupported();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>