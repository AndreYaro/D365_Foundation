<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendRequestAddVendorHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendRequestAddVendorHelper
{
    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createVendor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a vendor to a legal entity that is based on an existing <c>DirPartyTable</c> record.
    /// </summary>
    /// <param name="_addVendor">
    /// The <c>VendRequestAddVendor</c> record that contains the vendor information.
    /// </param>
    /// <param name="_partyId">
    /// The vendor party record ID.
    /// </param>
    public static void createVendor(VendRequestAddVendor _addVendor, recId _partyId)
    {
        VendTable                       vendor;
        VendRequestCompany              requestCompany;
        VendRequestCategory             requestCategory;
        VendRequestProspectiveProfile   prospectiveProfile;
        VendAccount                     vendAccountNum;
        ContactPerson                   contactPerson;

        select forUpdate firstOnly crossCompany requestCompany where requestCompany.RecId == _addVendor.VendRequest;

        ttsbegin;

        changecompany(_addVendor.Company)
        {
            if (VendParameters::numRefVendAccount().numberSequenceTable().Manual)
            {
                throw error("@SYS343009");
            }

            if (requestCompany.SignUp != 0 && requestCompany.VendRequestCompanyStatus == VendRequestCompanyStatus::Draft)
            {
                // if from unsolicited vendor then update prospective profile vendor group and currency
                // provided in Vendor Add record
                prospectiveProfile = VendRequestProspectiveProfile::find(requestCompany.ProspectiveProfile, true);
                prospectiveProfile.VendGroup    = _addVendor.VendGroup;
                prospectiveProfile.Currency     = _addVendor.Currency;
                prospectiveProfile.update();

                // update vendor request status
                requestCompany.VendRequestCompanyType   = VendRequestCompanyType::NewVendorCompanyProfile;
                requestCompany.VendRequestCompanyStatus = VendRequestCompanyStatus::RequestComplete;

                // update categories for a vendor request
                while select forupdate recId, VendRequest, VendorConfirmed
                from requestCategory
                    where requestCategory.VendRequest == requestCompany.RecId
                {
                    requestCategory.VendorConfirmed = VendRequestVendorConfirmed::Yes;
                    requestCategory.update();
                }

                VendRequestCompanyWorkflowManager::convertProspectToVendor(requestCompany);
                // get vendor account number
                vendAccountNum = vendRequestCompany::findRecId(_addVendor.VendRequest).AccountNum;
            }
            else
            {
                // if vendor is created from existing vendor profile
                // get a new Account number in requested company
                VendGroup vendGroup;

                if (_addVendor.VendGroup)
                {
                    vendGroup = VendGroup::find(_addVendor.VendGroup);
                }

                vendAccountNum = VendRequestAddVendorHelper::getVendorAccountNumberSequence(_addVendor, _partyId, vendGroup.VendAccountNumSeq);

                // insert vendor record with parameters set up in Vendor Add record
                vendor.clear();

                vendor.initValue();

                vendor.AccountNum   = vendAccountNum;
                vendor.VendGroup    = _addVendor.VendGroup;
                vendor.Currency     = _addVendor.Currency;
                vendor.Blocked      = _addVendor.Blocked;
                vendor.Party        = _partyId;

                if (vendGroup)
                {
                    vendor.initFromVendGroup(vendGroup);
                }

                if (BrazilParameters::isEnabled())
                {
                    FiscalInformationCopy_BR::copyFiscalInfoFromCustVend(vendor);
                }

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX]))
                {
                    // The copy is made from one record to another, therefore the source and target field groups are the same.
                    SysDictFieldGroup sourceTargetFieldGroup = new SysDictFieldGroup(
                        tableNum(VendTable),
                        tableFieldgroupStr(VendTable, MexicanSharedInfoByParty)
                    );

                    Set setSourceFieldGroups = new Set(Types::Class);
                    setSourceFieldGroups.add(sourceTargetFieldGroup);

                    DirPartyInformationCopy::copyInfoFromEntitiesThatShareSameParty(_partyId, setSourceFieldGroups, sourceTargetFieldGroup, vendor, false);
                }

                vendor.insert();

                if (requestCompany.RecId != 0)
                {
                    contactPerson.clear();
                    contactPerson.initValue();
                    contactPerson.Party = requestCompany.ContactParty;
                    contactPerson.initFromVendTable(vendor);
                    contactPerson.insert();
                }
            }
        }

        _addVendor.VendAccountNum = vendAccountNum;
        _addVendor.update();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendorAccountNumberSequence</Name>
				<Source><![CDATA[
    public static VendAccount getVendorAccountNumberSequence(VendRequestAddVendor _addVendor, recId _partyId, RefRecId _vendorGroupAccountNumberSequenceRecId)
    {
        VendAccount  vendAccountNum;

        if (_vendorGroupAccountNumberSequenceRecId)
        {
            vendAccountNum = NumberSeq::newGetNumFromId(_vendorGroupAccountNumberSequenceRecId).num();
        }
        else
        {
            vendAccountNum = smmParameters::getNumber(smmNumbSeqUsed::Vendor);
        }

        return vendAccountNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAvailableCompanyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Get the companies where there does not exist a vendor for an address book party.
    /// </summary>
    /// <param name="_vendPartyRecId">
    ///    The vendor party record ID for which to find available companies.
    /// </param>
    /// <returns>
    ///    A query that represents the available companies.
    /// </returns>
    public static Query getAvailableCompanyQuery(recId _vendPartyRecId)
    {
        Query query = new Query();
        QueryBuildDataSource dataArea_DS;
        QueryBuildDataSource vendTable_DS;

        query.allowCrossCompany(true);
        dataArea_DS = query.addDataSource(tablenum(DataArea));
        vendTable_DS = dataArea_DS.addDataSource(tablenum(VendTable));
        vendTable_DS.addRange(fieldnum(VendTable, Party)).value(queryValue(_vendPartyRecId));
        vendTable_DS.addLink(fieldnum(DataArea, Id), fieldnum(VendTable, DataAreaId));
        vendTable_DS.joinMode(JoinMode::NoExistsJoin);

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>