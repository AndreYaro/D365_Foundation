<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdRawmaterialInProgressDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProdRawmaterialInProgressDP</c> class is the report data Provider class for the
/// <c>ProdRawmaterialInProgress</c> report.
/// </summary>
/// <remarks>
/// This is the report data provider class for the <c>ProdRawmaterialInProgress</c> report.
/// </remarks>
[
    SRSReportQueryAttribute(queryStr(ProdRawmaterialInProgress)),
    SRSReportParameterAttribute(classstr(ProdRawmaterialInProgressContract))
]

public class ProdRawmaterialInProgressDP extends SRSReportDataProviderPreProcessTempDB
{
    ProdRawmaterialInProgressTmp prodRawmaterialInProgressTmp;
    InventTransOrigin            inventTransOrigin;
    InventTrans                  inventTrans;
    TransDate                    perDate;
    CostAmount                   cachePhysicalValue;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProdRawmaterialInProgressTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table and returns the data table to the calling method.
    /// </summary>
    /// <returns>
    ///    The required report data from temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute('ProdRawmaterialInProgressTmp')
    ]
    public ProdRawmaterialInProgressTmp getProdRawmaterialInProgressTmp()
    {
        select prodRawmaterialInProgressTmp;
        return prodRawmaterialInProgressTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    This method gets the required data and inserts it into the temporary table.
    /// </summary>
    public  void insertValues()
    {
        cachePhysicalValue = inventTrans.costAmountPhysicalAsPerDate(perDate);

        prodRawmaterialInProgressTmp.DateFinancial          = inventTrans.DateFinancial;
        prodRawmaterialInProgressTmp.DatePhysical           = inventTrans.DatePhysical;
        prodRawmaterialInProgressTmp.ItemId                 = inventTransOrigin.ItemId;
        prodRawmaterialInProgressTmp.ItemName               = inventTrans.itemName();
        prodRawmaterialInProgressTmp.PhysicalValue          = cachePhysicalValue;
        prodRawmaterialInProgressTmp.PostedPhysicalValue    = inventTrans.inventTransPostingPhysical().IsPosted ? cachePhysicalValue: 0;
        prodRawmaterialInProgressTmp.Qty                    = inventTrans.Qty;
        prodRawmaterialInProgressTmp.ReferenceId            = inventTransOrigin.ReferenceId;
        prodRawmaterialInProgressTmp.UnitId                 = inventTrans.inventUnit();
        prodRawmaterialInProgressTmp.pdsCWQty               = inventTrans.PdsCWQty;
        prodRawmaterialInProgressTmp.pdsCWUnitId            = inventTrans.pdsCWUnitId();
        prodRawmaterialInProgressTmp.PdsEnabled             = (isConfigurationkeyEnabled(configurationKeyNum(PDS))? NoYes::Yes: NoYes::No);
        prodRawmaterialInProgressTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
/// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    Calls sub-methods depending on the parameters that are passed to it.
    /// </remarks>
    public void processReport()
    {
        ProdRawmaterialInProgressContract contract = this.parmDataContract() as ProdRawmaterialInProgressContract;
        perDate = contract.parmPerDate();

        QueryBuildRange qbr = SysQuery::findOrCreateRange(this.parmQuery().dataSourceTable(tablenum(InventTrans)), fieldnum(InventTrans,DatePhysical));
        qbr.value(queryRange(nextyr(dateNull()), perDate));

        qbr = SysQuery::findOrCreateRange(this.parmQuery().dataSourceTable(tablenum(InventTrans)), fieldnum(InventTrans,DateFinancial));
        qbr.value(strfmt('%1..,%2',queryValue(perDate+1), SysQuery::valueEmptyString()));

        QueryRun qr = new QueryRun(this.parmQuery());
        prodRawmaterialInProgressTmp.setConnection(this.parmUserConnection());

        while (qr.next())
        {
            inventTransOrigin   = qr.get(tablenum(InventTransOrigin));
            inventTrans         = qr.get(tablenum(InventTrans));
            this.insertValues();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>