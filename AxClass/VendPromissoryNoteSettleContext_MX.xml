<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendPromissoryNoteSettleContext_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class enables a "context" for settling <c>TaxTrans</c> records against promissory notes. It stores the invoice being settled and the promissory note
/// ID when being settled from a tax settlement on the <c>CustVendSettle</c> class.
/// When the tax trans records are being inserted within this context, the invoice will be settled against this tax trans record to allow for easy invoice matching where
/// required
/// </summary>
internal final class VendPromissoryNoteSettleContext_MX implements System.IDisposable
{
    private InvoiceId                              currentSettleInvoice;
    private static VendPromissoryNoteSettleContext_MX context;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        if (context)
        {
            throw error("@AccountsPayable:PromissoryNoteSettleContextAlreadyExists");
        }
        context = this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the context available to match a TaxTrans record to
    /// </summary>
    /// <returns>The current context, if it exists</returns>
    public static VendPromissoryNoteSettleContext_MX getContext()
    {
        return context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentSettleInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets or retrieves the current settle invoice
    /// </summary>
    /// <param name = "_currentSettleInvoice">The invoice to settle</param>
    /// <returns>The current/new value</returns>
    public InvoiceId parmCurrentSettleInvoice(InvoiceId _currentSettleInvoice)
    {
        currentSettleInvoice = _currentSettleInvoice;

        return currentSettleInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContextOpen</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the context is open and populated with information for settling
    /// </summary>
    /// <returns>True if the context can match against transactions</returns>
    public boolean isContextOpen()
    {
        #ISOCountryRegionCodes
        
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoMX])
                && currentSettleInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    private void close()
    {
        currentSettleInvoice    = null;
        context                 = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Closes and disposes of the context, meaning that TaxTrans records associated with the context's settling voucher, will no longer be settled against invoices
    /// </summary>
    public void Dispose()
    {
        this.close();
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Settles the TaxTrans record against the invoice and promissory note stored in the context
    /// </summary>
    /// <param name = "_taxTrans">The tax trans record</param>
    public void settleTaxTrans(TaxTrans _taxTrans)
    {
        TaxTrans_W taxTrans_W;

        taxTrans_W.PromissoryNoteInvoice_MX = currentSettleInvoice;
        _taxTrans.packTaxTrans_W(taxTrans_W);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>