<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PmfFormCtrl_InventOnHandItemListPage</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Form control handler for the <c>InventOnHandItemListPage</c> list page
/// </summary>
[SysObsolete('The InventOnHandItemListPage form is obsolete, please use the InventOnHandItem form.', false, 30\06\2020)]
public class PmfFormCtrl_InventOnHandItemListPage extends PmfFormCtrl
{
    InventDim   inventDim;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bufferInventSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the buffer as an <c>InventSum</c> record.
    /// </summary>
    /// <returns>
    /// An <c>InventSum</c> record.
    /// </returns>
    public InventSum bufferInventSum()
    {
        return buffer as InventSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerCtrlRules</Name>
				<Source><![CDATA[
    protected void registerCtrlRules()
    {
        super();

        if (this.isFormulaEnabled())
        {
            this.registerCtrlRuleNoGroup(
                    formRun.design().controlName(formControlStr(InventOnhandItemListPage,PmfFormulaTableAction)),
                    methodstr(PmfFormCtrl_InventOnHandItemListPage, isFormulaItem),
                    ButtonRuleEffectType::Enabled);
        }

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItemListPage,PmfPackOnHand)),
                    methodstr(PmfFormCtrl_InventOnHandItemListPage, isBulkorPack),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItemListPage, InventDimTracking)),
                    methodstr(PmfFormCtrl_InventOnHandItemListPage, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItemListPage, PdsResetShelfDates)),
                    methodstr(PmfFormCtrl_InventOnHandItemListPage, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItemListPage, PdsResetVendorBatchInfo)),
                    methodstr(PmfFormCtrl_InventOnHandItemListPage, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItemListPage, PdsBatchAttributes)),
                    methodstr(PmfFormCtrl_InventOnHandItemListPage, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItemListPage, InventNonConformanceTable)),
                    methodstr(PmfFormCtrl_InventOnHandItemListPage, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItemListPage, PdsResetDispositionStatus)),
                    methodstr(PmfFormCtrl_InventOnHandItemListPage, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItemListPage, InventBlocking)),
                    methodstr(PmfFormCtrl_InventOnHandItemListPage, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);

        this.registerCtrlRuleNoGroup(formRun.design().controlName(formControlStr(InventOnhandItemListPage, InventQualityOrderTable)),
                    methodstr(PmfFormCtrl_InventOnHandItemListPage, isBatchEnabled),
                    ButtonRuleEffectType::Enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBatchEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the batch related functions should be enabled.
    /// </summary>
    /// <returns>
    ///     true if the batch functions should be enabled; otherwise false.
    /// </returns>
    public boolean isBatchEnabled()
    {
        inventDim.checkInvalidFieldAccess(false);
        return inventDim.inventBatchId != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>isBulkorPack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if item is bulk or pack item.
    /// </summary>
    /// <returns>
    /// True if item is bulk or pack item; otherwise false.
    /// </returns>
    public boolean isBulkorPack()
    {
        return #PmfEnabled && PmfBulkItemConv::isBulkorPack(this.bufferInventSum().ItemId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the process industries functionality is enabled
    /// </summary>
    /// <returns>
    /// true, if the configuration key is enabled
    /// </returns>
    /// <remarks>
    /// The method is required to feed into the button manager.
    /// </remarks>
    public boolean isFormulaEnabled()
    {
        return #PmfEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFormulaItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the item is of production type <c>PmfProductType::Formula</c> or <c>PmfProductType::MainItem</c>.
    /// </summary>
    /// <returns>
    /// True if the item can have a formula; otherwise false.
    /// </returns>
    public boolean isFormulaItem()
    {
        return InventTable::find(this.bufferInventSum().ItemId).isFormulaAllowed();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isShelfLifeEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the shelf life functions should be enabled.
    /// </summary>
    /// <returns>
    ///     true if the shelf life functions should be enabled; otherwise false.
    /// </returns>
    public boolean isShelfLifeEnabled()
    {
        inventDim.checkInvalidFieldAccess(false);
        return inventDim.inventBatchId != '' && this.bufferInventSum().inventTable().isShelfLifeItem();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        formButtonManager = FormButtonManager::construct();
        formButtonManager.parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the datasources that are to be used in the rule computation process.
    /// </summary>
    /// <param name="_datasources1">
    /// A table buffer (Common) belonging to the 1st datasource instance.
    /// </param>
    /// <param name="_datasources2">
    /// A table buffer (Common) belonging to the 2nd datasource instance.
    /// </param>
    /// <param name="_datasources3">
    /// A table buffer (Common) belonging to the 3rd datasource instance.
    /// </param>
    /// <param name="_datasources4">
    /// A table buffer (Common) belonging to the 4th datasource instance.
    /// </param>
    /// <param name="_datasources5">
    /// A table buffer (Common) belonging to the 5th datasource instance.
    /// </param>
    /// <remarks>
    /// Up to 5 datasources can be passed. If the implementation requires more datasources
    /// additional custom methods should be implemented on the rule implementer class.
    /// The method is called by FormButtonManager on the rule class implementing the ButtonStateProvider interface.
    /// </remarks>
    public void setDatasources(
        Common  _datasources1,
        Common  _datasources2 = null,
        Common  _datasources3 = null,
        Common  _datasources4 = null,
        Common  _datasources5 = null)
    {
        if (_datasources1.TableId != tablenum(InventSum))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        if (_datasources2.TableId != tablenum(InventDim))
        {
            throw error(Error::wrongUseOfFunction(funcname()));
        }
        inventDim = _datasources2 as InventDim;

        super(
            _datasources1,
            _datasources2,
            _datasources3,
            _datasources4,
            _datasources5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PmfFormCtrl_InventOnHandItemListPage construct()
    {
        return new PmfFormCtrl_InventOnHandItemListPage();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromForm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new form control handler from the form element
    /// </summary>
    /// <param name="_fr">
    /// The form element to create the form control handler for
    /// </param>
    /// <returns>
    /// The created form control handler
    /// </returns>
    public static PmfFormCtrl_InventOnHandItemListPage newFromForm(
        FormRun _fr)
    {
        PmfFormCtrl_InventOnHandItemListPage frmCtrl;

        frmCtrl = PmfFormCtrl_InventOnHandItemListPage::construct();
        frmCtrl.parmFormRun(_fr);

        return frmCtrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>