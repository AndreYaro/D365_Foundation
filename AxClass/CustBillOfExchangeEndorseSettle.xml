<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustBillOfExchangeEndorseSettle</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.CashManagement.Instrumentation;

/// <summary>
/// The <c>CustBillOfExchangeEndorseSettle</c> class handles the business logic for settling the
/// transaction which be endorsed to vendor.
/// </summary>
class CustBillOfExchangeEndorseSettle extends CustBillOfExchangeEndorsePost
{
    VendTrans   vendTrans_old;
    CustTrans   custTrans;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>custTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>CustTrans</c> record for the settle endorsed of a BOE.
    /// </summary>
    /// <returns>
    /// The <c>CustTrans</c> record.
    /// </returns>
    protected CustTrans custTrans()
    {
        return custTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the ledger posting type to settle endorsed bills of exchange.
    /// </summary>
    /// <returns>
    /// The ledger posting type.
    /// </returns>
    protected LedgerPostingType postingType()
    {
        return LedgerPostingType::VendBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>settleCustBOE</Name>
				<Source><![CDATA[
    /// <summary>
    /// Settles the cust trans generated by drawing BOE.
    /// </summary>
    private void settleCustBOE()
    {
        CustTrans                   custTransDr;
        CustTrans                   custTransCr;
        CustTransOpen               custTransOpenDr;
        CustTransOpen               custTransOpenCr;
        CustVendOpenTransManager    manager;

        // Gets Dr cust trans generated by drawing BOE
        custTransDr = this.getCustTransOfBOEDraw();
        custTransOpenDr = CustTransOpen::findRefId(custTransDr.RecId);

        // Gets Cr cust Trans by voucher
        custTransCr = CustTrans::find(this.custTrans().RecId);
        custTransOpenCr = CustTransOpen::findRefId(custTransCr.RecId);

        manager = CustVendOpenTransManager::construct(custTable::find(custBillOfExchangeJour.CustAccount));

        manager.updateTransMarked(custTransOpenDr, true);
        manager.updateTransMarked(custTransOpenCr, true);

        manager.updateSpecTransWithSelectedDate();

        CashManagementEventSource eventSource = CashManagementEventSource::Log;
        eventSource.EventWriteCustBillOfExchangeEndorseSettleSettleCustBOECalled();

        manager.settleMarkedTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>status</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the status for settle endorsed bills of exchange.
    /// </summary>
    /// <returns>
    /// The status of the bill of exchange.
    /// </returns>
    protected CustVendNegInstStatus status()
    {
        return CustVendNegInstStatus::EndorsementSettled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the customer trans generated by settlement EBOE.
    /// </summary>
    private void updateCustTrans()
    {
        CustTrans   custTransLoc;

        ttsBegin;
        custTransLoc = CustTrans::find(this.custTrans().RecId, true);
        custTransLoc.selectForUpdate(true);
        custTransLoc.BillOfExchangeID = custBillOfExchangeJour.BillOfExchangeId;
        custTransLoc.BillOfExchangeStatus = CustVendNegInstStatus::EndorsementSettled;
        custTransLoc.BillOfExchangeSeqNum = custBillOfExchangeJour.BillOfExchangeSeqNum;
        custTransLoc.update();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateNow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the business logic of settling the transaction which be endorsed to vendor.
    /// </summary>
    protected void updateNow()
    {
        LedgerPostingController         ledgerPostingController;
        CustBillOfExchangeJourExtensionJP   billOfExchEndorseJour;
        vendTrans_old = this.retrieveVendTrans();
        if (this.validate())
        {
            if (this.initPostTrans())
            {
                ledgerPostingController = LedgerPostingController::newForLedgerPostingJournal(ledgerVoucher);
                if (ledgerPostingController)
                {
                    ledgerPostingController.getReference().parmTransDate(postingDate);
                }
                billOfExchEndorseJour = CustBillOfExchangeJourExtensionJP::findByBillOfExchangeId(custBillOfExchangeJour.BillOfExchangeId);

                // get amount and currency code from vendtrans
                this.parmAmountCur(vendTrans_old.AmountCur);
                this.parmCurrencyCode(vendTrans_old.CurrencyCode);
                this.parmBillOfExchangeDefaultDimension(this.getEndorsedTrans().BillOfExchangeDefaultDimension);
                this.postTrans(LedgerJournalACType::Ledger, CustLedgerAccounts::endorseLedgerDimension(custBillOfExchangeJour.CustAccount));
                this.postTrans(LedgerJournalACType::Cust,  LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(custBillOfExchangeJour.CustAccount, LedgerJournalACType::Cust));
                this.endPostTrans();

                // settle BOE
                this.settleCustBOE();
                // update BillOfExchangeSeqNum and status of CustBillOfExchangeJour
                this.updateCustBillOfExchangeJour(custBillOfExchangeJour.BillOfExchangeId);
                // reread record for table buffer custBillOfExchangeJour after update
                custBillOfExchangeJour.reread();
                // update BillOfExchangeSeqNum, BillOfExchangeID and status of CustTrans
                this.updateCustTrans();
                // update date for BOE endorse settle
                this.updateCustBillOfExchangeJourExtensionJP(billOfExchEndorseJour);
                // insert BOE trans.
                this.insertCustBillOfExchangeTrans(custBillOfExchangeJour);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the remaining amount of a vendor transaction.
    /// </summary>
    /// <returns>
    /// true if the remaining amount is valid; otherwise, false.
    /// </returns>
    protected boolean validate()
    {
        if (vendTrans_old.remainAmountCur() != 0)
        {
            // You can settle the endorsed bill of exchange only after you settle the vendor invoice.
            return checkFailed("@GLS221470");
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>VendTrans</c> record buffer for the settle endorsed amount of a bill of exchange.
    /// </summary>
    /// <returns>
    /// The <c>VendTrans</c> record buffer.
    /// </returns>
    protected VendTrans vendTrans()
    {
        VendTrans   vendTrans;
        return vendTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>