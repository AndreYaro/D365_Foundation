<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BusinessDocumentApiConfigurationProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.ApplicationPlatform.Environment;
using Microsoft.Dynamics.ApplicationPlatform.Environment.Settings;
using Microsoft.Dynamics.AX.Security.AuthenticationCommon;
using Microsoft.Dynamics.AX.Security.ADALClientAuthentication;

/// <summary>
/// The class provides and maintains configuration settings for connecting to the Business Document Submission Service.
/// </summary>
internal final class BusinessDocumentApiConfigurationProvider
{
    private IApplicationEnvironment environment;
    private IAzureActiveDirectoryConfig aadConfig;
    private IInfrastructureConfig infrastructureConfig;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        environment = EnvironmentFactory::GetApplicationEnvironment();
        aadConfig = environment.Aad;
        infrastructureConfig = environment.Infrastructure;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static BusinessDocumentApiConfigurationProvider construct()
    {
        return new BusinessDocumentApiConfigurationProvider();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAXClientId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get AX CLient ID.
    /// </summary>
    /// <param name = "_realm">A protection space (Realm) value</param>
    /// <returns>The AX Client ID</returns>
    [Hookable(false)]
    public str getAXClientId(str _realm = aadConfig.Realm)
    {
        str realm = _realm; 
        
        if (! realm)
        {
            realm = aadConfig.Realm;
        }        

        if (strStartsWith(realm, "spn:"))
        {
            realm = subStr(realm, 5, strLen(realm) - 4);
        }
        
        return realm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getServiceAppId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the service Application ID.
    /// </summary>
    /// <param name = "_serviceAppId">A <c>String</c> containing Application ID.</param>
    /// <returns>The service Application ID.</returns>
    [Hookable(false)]
    public str getServiceAppId(str _serviceAppId = '')
    {
        if (BusinessDocumentParameters::exist())
        {
            _serviceAppId = BusinessDocumentParameters::find().ServiceAppId;
        }

        return  _serviceAppId ? _serviceAppId : '0cdb527f-a8d1-4bf8-9436-b352c68682b2';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentTenant</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns current tenant where D365FO is deployed.
    /// </summary>
    /// <returns>The Tenant ID from configuration settings.</returns>
    [Hookable(false)]
    public str getCurrentTenant()
    {
        return aadConfig.AADTenantId.ToLowerInvariant();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEnvironmentId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the environment ID defining the customer partition in the service DB.
    /// </summary>
    /// <param name = "_environmentId">A string containing environment ID.</param>
    /// <returns>The environment ID.</returns>
    [Hookable(false)]
    public str getEnvironmentId(str _environmentId = '')
    {
        if (BusinessDocumentParameters::exist())
        {
            _environmentId = BusinessDocumentParameters::find().SubscriptionId;
        }

        return _environmentId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>