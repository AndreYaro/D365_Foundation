<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RhrmJournalCheckPost_Transfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RhrmJournalCheckPost_Transfer extends RHRMJournalCheckPost implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkJournal</Name>
				<Source><![CDATA[
    protected boolean checkJournal(JournalTransList _journalTransList)
    {
        boolean ret;

        ret = super(_journalTransList);

        if (ret && isConfigurationkeyEnabled(configurationKeyNum(RPayroll)))
        {
            ret = this.checkTblExist(_journalTransList);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTrans</Name>
				<Source><![CDATA[
    protected boolean checkTrans(JournalTransData _journalTransData)
    {
        boolean            ret;
        RHRMOrderTrans     rhrmOrderTrans = _journalTransData.journalTrans();

        ret = super(_journalTransData);

        ret = ret && rhrmOrderTrans.validateWrite();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTrans</Name>
				<Source><![CDATA[
    protected void postTrans(JournalTransData _journalTransData)
    {
        RHRMOrderTrans     rhrmOrderTrans = _journalTransData.journalTrans();
        RHRMOrderTable     rhrmOrderTable = journalTableData.journalTable();
        RPayHistory        payHistory, payHistoryLast;

        super(_journalTransData);

        payHistory.HistType             = RPayHistType::Employment;
        payHistory.Number               = rhrmOrderTrans.EmplId;
        payHistory.EndDate              = rhrmOrderTrans.EndDate;
        payHistory.StartDate            = rhrmOrderTrans.StartDate;
        payHistory.HrmOrganizationId    = rhrmOrderTrans.OrganizationId;
        payHistory.OperationType        = RHRMJournalType::Transfer;
        payHistory.hrmStaffListRefRecId = rhrmOrderTrans.StaffListRefRecId;
        payHistory.AttachDocDate        = rhrmOrderTrans.AttachDocDate;
        payHistory.AttachDocNum         = rhrmOrderTrans.AttachDocNum;
        payHistory.TransferType         = rhrmOrderTrans.TransferType;
        payHistory.HrmKindOfWork        = rhrmOrderTrans.KindOfWork;
        payHistory.HrmReasonCodeId      = rhrmOrderTrans.ReasonCodeId;
        payHistory.Reason               = rhrmOrderTable.Reason;
        payHistory.TradeCategory        = rhrmOrderTrans.TradeCategory;
        payHistory.HrmOrderNum          = rhrmOrderTable.OrderNum;
        payHistory.HrmOrderDate         = rhrmOrderTable.TransDate;
        payHistory.HcmTitle             = rhrmOrderTrans.HcmTitle;
        payHistory.OrderTransRecId      = rhrmOrderTrans.RecId;

        payHistoryLast = RPayHistory::findLastSignOnMove(rhrmOrderTrans.EmplId, rhrmOrderTrans.StartDate, rhrmOrderTrans.RecId);
        payHistory.LastStaffListRefRecId = payHistoryLast.hrmStaffListRefRecId;
        payHistory.LastOrganizationId    = payHistoryLast.HrmOrganizationId;
        payHistory.LastTitle             = payHistoryLast.HcmTitle;
        payHistory.LastTradeCategory     = payHistoryLast.TradeCategory;

        payHistory.GradeScaleId          = rhrmOrderTrans.GradeScaleId;
        payHistory.GradeId               = rhrmOrderTrans.GradeId;

        payHistory.TransferWithoutTermChanges = rhrmOrderTrans.TransferWithoutTermChanges;
        if (! payHistory.TransferWithoutTermChanges)
        {
            payHistory.TransTime         = DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()) ? DateTimeUtil::getTimeNow(DateTimeUtil::getUserPreferredTimeZone()) : 1;
        }

        payHistory.insert();

        this.updateEmplTable(rhrmOrderTrans);

        if (updateTbl && isConfigurationkeyEnabled(configurationkeynum(RPayTbl)))
        {
            this.updateTimesheetTransfer(payHistory);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareRestoreValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the resolution journal line record to be used for restoring of journal trans values to resolution transfer journal line.
    /// </summary>
    /// <param name="_orderTrans">
    /// The initial resolution journal line to use values from.
    /// </param>
    /// <returns>
    /// The initialized resolution journal line with restoring values.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected RHRMOrderTrans prepareRestoreValue(RHRMOrderTrans _orderTrans)
    {
        RHRMEmplTable       emplTable       = RHRMEmplTable::find(_orderTrans.EmplId);
        RPayRateCallContext rateCallContext = new RPayRateCallContext();
        RPayRateObj         rateObj;
        RHRMOrderTrans      orderTrans;

        if (_orderTrans.EndDate)
        {
            orderTrans.data(_orderTrans);

            orderTrans.StartDate = _orderTrans.dayAfterOrderFinished();

            rateCallContext.parmRateDate(orderTrans.StartDate);
            rateCallContext.parmEmployeeId(orderTrans.EmplId);

            if (emplTable.WageRate)
            {
                rateObj    = RPayRateObj::constructFromRateCode(emplTable.WageRate, rateCallContext);
                orderTrans.ValueSum = rateObj.value();
            }

            if (emplTable.RiseInWages1Rate)
            {
                rateObj = RPayRateObj::constructFromRateCode(emplTable.RiseInWages1Rate, rateCallContext);
                orderTrans.RiseInWages = rateObj.value();
            }

            if (emplTable.RiseInWages2Rate)
            {
                rateObj = RPayRateObj::constructFromRateCode(emplTable.RiseInWages2Rate, rateCallContext);
                orderTrans.RiseInWages2 = rateObj.value();
            }

            if (emplTable.RiseInWages3Rate)
            {
                rateObj = RPayRateObj::constructFromRateCode(emplTable.RiseInWages3Rate, rateCallContext);
                orderTrans.RiseInWages3 = rateObj.value();
            }

            if (emplTable.EmploymentFactorRate)
            {
                rateObj = RPayRateObj::constructFromRateCode(emplTable.EmploymentFactorRate, rateCallContext);
                orderTrans.EmploymentFactor = rateObj.value();
            }
        }

        return orderTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateEmplTable</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateEmplTable(RHRMOrderTrans _orderTrans)
    {
        RPayHistory     rPayHistoryLast;
        RHRMEmplTable   emplTable = RHRMEmplTable::find(_orderTrans.EmplId, true);
        RHRMOrderTrans  restoreOrderTrans;

        rPayHistoryLast  = RPayHistory::findLastSignOnMove(_orderTrans.EmplId, _orderTrans.StartDate, _orderTrans.RecId);

        emplTable.HcmTitle = _orderTrans.HcmTitle;

        if (rPayHistoryLast.HcmTitle != _orderTrans.HcmTitle)
        {
            emplTable.PersonnelCategoryId = RHRMPersonTitleTable::find(emplTable.HcmTitle).PersonnelCategoryId;
        }

        emplTable.PayHRMOrganizationId  = _orderTrans.OrganizationId;
        emplTable.KindOfWork            = _orderTrans.KindOfWork;
        emplTable.TermDate              = _orderTrans.EndDate;

        emplTable.doUpdate();

        if (_orderTrans.EndDate)
        {
            restoreOrderTrans = this.prepareRestoreValue(_orderTrans);
        }

        this.fillPayrollRates(_orderTrans);

        if (_orderTrans.EndDate)
        {
            this.fillPayrollRates(restoreOrderTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTimesheetTransfer</Name>
				<Source><![CDATA[
    private void updateTimesheetTransfer(RPayHistory _rPayHistory)
    {
        ReportPeriod_RU lastTimesheetDate;

        if (updateTbl)
        {
            lastTimesheetDate = RPayTblTrans::lastTimesheetPeriod(_rPayHistory.emplId(), _rPayHistory.StartDate);
            this.updateTimesheet(_rPayHistory.emplId(),
                                 _rPayHistory.StartDate,
                                 max(dateEndMth(_rPayHistory.StartDate), lastTimesheetDate));
        }
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>