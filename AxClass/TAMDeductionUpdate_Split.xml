<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMDeductionUpdate_Split</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>TAMDeductionUpdate_Split</c> is used for splitting deductions.
/// </summary>
class TAMDeductionUpdate_Split extends TAMDeductionUpdate
{
    TmpTAMDeductionParmSplit tmpDeductionParmSplit;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createDeductionUpdateHistoryRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>TAMDeductionUpdateHistory</c> record for the split.
    /// </summary>
    /// <param name="_tamDeduction">
    /// The <c>TAMDeduction</c> record to be used to create history record.
    /// </param>
    /// <param name="_splitAmount">
    /// The amount to record in the history record.
    /// </param>
    /// <returns>
    /// The <c>TAMDeductionupdateHistory</c> that was created.
    /// </returns>
    private TAMDeductionUpdateHistory createDeductionUpdateHistoryRecord(TAMDeduction   _tamDeduction,
                                                                         Amount         _splitAmount)
    {
        LedgerJournalTrans          ledgerJournalTrans;
        TAMDeductionUpdateHistory   deductionUpdateHistory;
        HcmApprover                 hcmWorkerId;

        hcmWorkerId = HcmWorker::userId2Worker(curUserId());

        ledgerJournalTrans = _tamDeduction.ledgerJournalTrans();

        deductionUpdateHistory.tamDeductionID = _tamDeduction.TAMDeductionID;
        deductionUpdateHistory.tamDeductionUpdateType = TAMDeductionUpdateType::Split;
        deductionUpdateHistory.LedgerJournalId = ledgerJournalTrans.JournalNum;
        deductionUpdateHistory.LedgerJournalTransRecId = ledgerJournalTrans.RecId;
        deductionUpdateHistory.AmountCur = _splitAmount;
        deductionUpdateHistory.HcmWorkerId = hcmWorkerId;

        return deductionUpdateHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the class.
    /// </summary>
    /// <param name="_tmpDeductionParmSplit">
    /// The temporary record used to instantiate the class.
    /// </param>
    protected void new(TmpTAMDeductionParmSplit _tmpDeductionParmSplit)
    {
        super(_tmpDeductionParmSplit);
        tmpDeductionParmSplit.setTmpData(_tmpDeductionParmSplit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the temporary buffer that specifies split.
    /// </summary>
    /// <returns>
    /// The temporary buffer that specifies split.
    /// </returns>
    protected Common parmBuffer()
    {
        return tmpDeductionParmSplit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormString</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the split update form string.
    /// </summary>
    /// <returns>
    /// The split update form string.
    /// </returns>
    protected str parmFormString()
    {
        return formStr(TAMDeductionParmSplit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>splitDeduction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new deduction with all the same values
    /// and an amount equal to split amount given a deduction and a split amount.
    /// </summary>
    /// <param name="_deduction">
    /// The original deduction record to split from.
    /// </param>
    /// <param name="_splitAmount">
    /// The amount to split.
    /// </param>
    private void splitDeduction(TAMDeduction    _deduction,
                                AmountCur       _splitAmount)
    {
        TAMDeduction     deductionSplitFrom;
        TAMDeduction     deductionNew;
        NumberSeq        numberSeq;

        deductionNew.data(_deduction);

        // Amounts for new deduction
        deductionNew.AmountCur          = _splitAmount;
        deductionNew.RemainAmountCur    = _splitAmount;
        deductionNew.MatchAmountCur     = 0;
        deductionNew.DenyAmountCur      = 0;
        deductionNew.SplitAmountCur     = 0;
        deductionNew.WriteOffAmountCur  = 0;

        // Save deduction Id of deduction splitting from
        deductionNew.TAMDeductionOrigId = _deduction.TAMDeductionID;

        ttsBegin;
        numberSeq = NumberSeq::newGetNum(TAMPromotionParameters::numRefDeductionId());
        deductionNew.TAMDeductionID = numberSeq.num();
        if (deductionNew.validateWrite())
        {
            deductionNew.insert();
        }
        else
        {
            throw error("@SYS104318");
        }

        // Update deduction split from
        select forupdate deductionSplitFrom
            where deductionSplitFrom.TAMDeductionID == _deduction.TAMDeductionID;

        deductionSplitFrom.RemainAmountCur -= _splitAmount;
        deductionSplitFrom.SplitAmountCur  += _splitAmount;

        if (deductionSplitFrom.validateWrite())
        {
            deductionSplitFrom.update();
        }
        else
        {
            throw error("@SYS104318");
        }

        ttsCommit;

        info(strFmt("@MCR27825",
                    deductionNew.TAMDeductionID,
                    _deduction.TAMDeductionID));
    }

]]></Source>
			</Method>
			<Method>
				<Name>update</Name>
				<Source><![CDATA[
    /// <summary>
    /// Splits every deduction specified in the temporary table.
    /// </summary>
    protected void update()
    {
        #OCCRetryCount
        TAMDeduction            deduction;
        RecordSortedList        listTAMDeductionUpdateHistory;

        listTAMDeductionUpdateHistory = new RecordSortedList(tableNum(TAMDeductionUpdateHistory));
        listTAMDeductionUpdateHistory.sortOrder(fieldNum(TAMDeductionUpdateHistory, RecId));

        try
        {
            ttsBegin;

            // Split every deduction where amount to split greater than 0
            while select tmpDeductionParmSplit
                where tmpDeductionParmSplit.SplitAmount > 0
            {
                deduction = TAMDeduction::find(tmpDeductionParmSplit.DeductionID);

                this.splitDeduction(deduction, tmpDeductionParmSplit.SplitAmount);

                listTAMDeductionUpdateHistory.ins(this.createDeductionUpdateHistoryRecord(deduction,
                                                                                          tmpDeductionParmSplit.SplitAmount));
            }

            listTAMDeductionUpdateHistory.insertDatabase();

            ttsCommit;
            this.parmUpdateOccurred(true);
        }
        catch (Exception::Error)
        {
            error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    protected boolean validate()
    {
        TAMDeduction    deduction;
        boolean         ret;
        ret = true;

        setPrefix("@MCR27632");

        // Don't validate splits with a split amount of 0 (skipped over)
        while select tmpDeductionParmSplit
            where tmpDeductionParmSplit.SplitAmount > 0
        {
            deduction = TAMDeduction::find(tmpDeductionParmSplit.DeductionID);

            switch (deduction.TAMDeductionStatus)
            {
                // Can't split created/closed deductions
                case TAMDeductionStatus::Created:
                case TAMDeductionStatus::Closed:
                    ret = checkFailed(strFmt("@MCR27627",
                                      deduction.TAMDeductionID,
                                      deduction.TAMDeductionStatus,
                                      TAMDeductionStatus::Open))
                                      && ret;
                    break;
                case TAMDeductionStatus::Open:
                    if (deduction.RemainAmountCur <= tmpDeductionParmSplit.SplitAmount)
                    {
                        ret = checkFailed(strFmt("@MCR27628",
                                                 deduction.TAMDeductionID,
                                                 tmpDeductionParmSplit.SplitAmount,
                                                 deduction.RemainAmountCur))
                                                 && ret;
                    }
                    break;
                default:
                    throw error(strFmt("@MCR10766", funcName()));
            }
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds an update object that can perform a split, given a temporary table specifying which deductions should be split and the split amount for
    /// each split.
    /// </summary>
    /// <param name="_tmpDeductionParmSplit">
    /// The temporary table that specifes which deductions should be split and the split amount for each split.
    /// </param>
    /// <returns>
    /// And instance of class <c>TAMDeductionUpdate_Split</c>.
    /// </returns>
    public static TAMDeductionUpdate_Split construct(TmpTAMDeductionParmSplit _tmpDeductionParmSplit)
    {
        TAMDeductionUpdate_Split tamDeductionUpdate_Split;

        tamDeductionUpdate_Split = new TAMDeductionUpdate_Split(_tmpDeductionParmSplit);

        return tamDeductionUpdate_Split;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>