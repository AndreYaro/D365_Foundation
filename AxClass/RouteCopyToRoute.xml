<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RouteCopyToRoute</Name>
	<SourceCode>
		<Declaration><![CDATA[
/*
In 2.5 RouteCopy_FromRoute_ToRoute
*/
public class RouteCopyToRoute extends RouteCopyTo
{
    RouteId                     toRouteId;
    ItemId                      toItemId;
    EcoResItemConfigurationName toConfigId;
    RouteOprHandling            routeOprHandling;
    RouteOprReplace             routeOprReplace;
    InventSiteId                toSiteId;
    private boolean             hasSourceItemId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcOprOffset</Name>
				<Source><![CDATA[
    OprNum calcOprOffset()
    {
        return Route::lastOprNum(toRouteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>configId</Name>
				<Source><![CDATA[
    EcoResItemConfigurationName configId()
    {
        return toConfigId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySpecificRouteOpr</Name>
				<Source><![CDATA[
    private void copySpecificRouteOpr(
        RouteCopyFrom   copyFrom,
        Route           toRoute
        )
    {
        RouteOprMap fromRouteOpr;
        RouteOpr    toRouteOpr;

        fromRouteOpr = copyFrom.routeOpr();
        toRouteOpr.data(fromRouteOpr);

        switch (toRouteOpr.ItemCode)
        {
            case TableGroupAll::Table:
                if (toItemId)
                {
                    toRouteOpr.ItemRelation = toItemId;
                    toRouteOpr.ConfigId     = this.getConfigId(toRouteOpr);
                }
                // else fromItem is used
                break;
            case TableGroupAll::GroupId:
                if (toItemId)
                    toRouteOpr.ItemRelation   = InventTable::find(toItemId).itemGroupId();
                break;
        }
        switch (toRouteOpr.RouteCode)
        {
            case RouteAll::Route:
                if (toRouteId)
                    toRouteOpr.RouteRelation    = toRouteId;
                // else fromRouteId is used
                break;
        }

        if (toSiteId != toRouteOpr.SiteId)
        {
            toRouteOpr.SiteId = toSiteId;
        }

        if (! this.insertRouteOperation(copyFrom, toRouteOpr))
            info(strfmt("@SYS72843",toRoute.OprId,toRoute.OprNum));
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyTo</Name>
				<Source><![CDATA[
    public void copyTo(
        RouteCopyFrom       copyFrom,
        RouteSearchBase     search,
        RouteMap            _toRoute
        )
    {
        Route toRoute = _toRoute;
        toRoute.RouteMap::initFromRouteMap(search.route());
        toRoute.RouteId =  toRouteId;

        super(copyFrom,search,toRoute);

        if (search is RouteSearch_Config)
        {
            var routeSearchConfig = search as RouteSearch_Config;
            hasSourceItemId = routeSearchConfig.itemId() != '';
        }

        switch (routeOprHandling)
        {
            case RouteOprHandling::NoCopy:
                break;
            case RouteOprHandling::CopySpecific:
                this.copySpecificRouteOpr(copyFrom,toRoute);
                break;
            case RouteOprHandling::CreateSpecific:
                this.createSpecificRouteOpr(copyFrom,toRoute);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSpecificRouteOpr</Name>
				<Source><![CDATA[
    private void createSpecificRouteOpr(
        RouteCopyFrom   copyFrom,
        Route           toRoute
        )
    {
        RouteOprMap fromRouteOpr;
        RouteOpr    toRouteOpr;

        fromRouteOpr = copyFrom.routeOpr();
        toRouteOpr.data(fromRouteOpr);

        boolean createGenericOprRel = !hasSourceItemId && !toItemId && toRouteId;
        toRouteOpr.ItemCode         = createGenericOprRel ? TableGroupAll::All : TableGroupAll::Table;
        toRouteOpr.ItemRelation     = toItemId;
        toRouteOpr.ConfigId         = this.getConfigId(toRouteOpr);
        toRouteOpr.RouteCode        = RouteAll::Route;
        toRouteOpr.RouteRelation    = toRouteId;

        if (!this.insertRouteOperation(copyFrom, toRouteOpr))
        {
            info(strfmt("@SYS72935",toRoute.OprId,toRoute.OprNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRoute</Name>
				<Source><![CDATA[
    Common defaultRoute()
    {
        Route route;

        return route;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /*
    Method to delete the 'to' route
    */
    void delete()
    {
        RouteSearch toSearch;
        
        ttsbegin;

        toSearch  = RouteSearch::newRouteId(toRouteId,true,true,false);

        while (toSearch.next())
        {
            if (! toSearch.route().validateDelete())
                throw error("@SYS18722");
            toSearch.route().delete();
        }

        if (RouteCopyToRouteDeleteRouteOprFlight::instance().isEnabled())
        {
            RouteOpr routeOpr;
            delete_from RouteOpr
                    where RouteOpr.RouteRelation == toRouteId;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertRouteOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the new operation relation when it does not already exist, or if it exists and the replace route operation flag is set to true.
    /// </summary>
    /// <param name="_copyFrom">
    /// The <c>CopyFrom</c> class that determines from what route to copy.
    /// </param>
    /// <param name="_toRouteOperation">
    /// The target operation relation.
    /// </param>
    /// <returns>
    /// true if the operation relation was inserted successfully; otherwise, false.
    /// </returns>
    protected boolean insertRouteOperation(
        RouteCopyFrom   _copyFrom,
        RouteOpr        _toRouteOperation)
    {
        boolean insertRouteOpr = true;

        RouteOpr currentRouteOpr = RouteOpr::find(
                                _toRouteOperation.OprId,
                                _toRouteOperation.ItemCode,
                                _toRouteOperation.ItemRelation,
                                _toRouteOperation.ConfigId,
                                _toRouteOperation.RouteCode,
                                _toRouteOperation.RouteRelation,
                                _toRouteOperation.SiteId,
                                true);

        if (currentRouteOpr.RecId != 0)
        {
            if (routeOprReplace)
            {
                currentRouteOpr.delete();
            }
            else
            {
                insertRouteOpr = false;
            }
        }

        if (insertRouteOpr)
        {
            this.insertNewRouteOperation(_copyFrom, _toRouteOperation);
        }

        return insertRouteOpr;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertNewRouteOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the new route operation relation.
    /// </summary>
    /// <param name = "_copyFrom">
    /// The <c>CopyFrom</c> class that determines from what route to copy.
    /// </param>
    /// <param name = "_toRouteOpr">
    /// The target operation relation.
    /// </param>
    protected void insertNewRouteOperation(RouteCopyFrom _copyFrom, RouteOpr _toRouteOpr)
    {
        _toRouteOpr.insert();
        Docu::copy(_copyFrom.docuRefTable(), _toRouteOpr);

        //Also copy the requirements to the new route
        WrkCtrActivityRequirementSet::copyRequirements(_copyFrom.activity(), _toRouteOpr.activity());
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    ItemId itemId()
    {
        return toItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(
        RouteId                     _toId,
        ItemId                      _toItemId,
        EcoResItemConfigurationName _toConfigId,
        RouteOprHandling            _routeOprHandling,
        RouteOprReplace             _routeOprReplace,
        InventSiteId                _toSiteId
        )
    {
        toRouteId           = _toId;
        toItemId            = _toItemId;
        toConfigId          = _toConfigId;
        routeOprHandling    = _routeOprHandling;
        routeOprReplace     = _routeOprReplace;
        toSiteId            = _toSiteId;

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBOMRouteCopy</Name>
				<Source><![CDATA[
    static RouteCopyToRoute newBOMRouteCopy(BOMRouteCopyJob bomRouteCopy)
    {
        RouteCopyToRoute   routeCopyToRoute;
        routeCopyToRoute = new RouteCopyToRoute(
            bomRouteCopy.parmToRouteId(),
            bomRouteCopy.parmToItemId(),
            bomRouteCopy.parmToConfigId(),
            bomRouteCopy.parmRouteOprHandling(),
            bomRouteCopy.parmRouteOprReplace(),
            bomRouteCopy.parmToSiteId());

        return routeCopyToRoute;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>