<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutPaymNACHAPayroll</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Generates a direct deposit output file in the NACHA format
/// for the payroll application. The payroll class uses worker
/// related information for the receiver whereas the base class
/// uses vendor.
/// </summary>
/// <remarks>
/// This class will be called during the payroll check printing process.
/// </remarks>
class VendOutPaymNACHAPayroll extends VendOutPaym_NACHA
{
    NoYes                   printPayStatement;              // Print payroll Pay statemnt
    DialogField             dialogPrintPayStatement;
    VendOutPaymRecordPayrollPPD vendRecordNacha;
    str                     paymNum;
    int                     preNoteCount;

    #define.EndDigit(9)
    #define.cp_850(850)          // codepage
    #define.InterfaceName('Payroll electronic NACHA PPD')

    #DEFINE.SysLastValuesCurrentVersion(1)
    #LOCALMACRO.SysLastValuesList
        effectiveEntDate
    #ENDMACRO

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        ledgerJournalId,
        fileName,
        printControlReport,
        printPayStatement,
        accountId
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>close</Name>
				<Source><![CDATA[
    public void close()
    {
        file.writeExp(this.createBatchControlRecord());

        if (#DebugNACHA)
        {
            this.addBatchControlFieldPositions();
        }

        file.writeExp(this.createACH_ControlRecord());

        if (#DebugNACHA)
        {
            this.addACHControlFieldPositions();
        }
        
        this.createFillerRecordsToBlockTheFile();

        setPrefix(strFmt("@SYS73667", filename));                   // File name:
        info(strFmt("@SYS73668", numTransactions - preNoteCount));  // Number of transactions:
        info(strFmt("@SYS4090104", preNoteCount));                  // Number of prenotes:

        info(strFmt("@SYS73670", abs(totalCreditAmount), bankAccountTable.CurrencyCode));

        if (printPayStatement)
        {
            this.printPayStatement();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>codepage</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the codepage.
    /// </summary>
    /// <returns>
    ///     The integer of the codepage.
    /// </returns>
    protected int codepage()
    {
        #Localcodepage

        return #cp_850;
    }

]]></Source>
			</Method>
			<Method>
				<Name>configurationKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>ConfigurationKeyId</c> for this class instance.
    /// </summary>
    /// <returns>
    ///     Returns a <c>ConfigurationKeyId</c> value.
    /// </returns>
    public ConfigurationKeyId configurationKey()
    {
        return configurationKeyNum(PayrollAdministration);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBatchHeaderRecord</Name>
				<Source><![CDATA[
    protected container createBatchHeaderRecord()
    {
        container   headerBatch                 =   conNull();

        #define.recTypeCode('5')
        #define.classCode('220')    // file contains only credits
        #define.one('1')
        #define.zero('0')
        #define.spc(' ')
        #define.discData('AX PAYROLL DEPOSIT  ')
        #define.EntDesc('PAYROLL   ')
        #define.batchNum('0000001')
        #define.DateSeqMDY(213)
        #define.DateSeqYMD(321)
        #define.DateDay(2)
        #define.DateMonth(2)
        #define.DateYear(2)
        #define.CompStatementNameLen(16)
        #define.CompPaymIDLen(10)
                                                                            // Offset           Hardcoded       Value
        str 1       recordTypeCode              =   #recTypeCode;           // 01 - 01          5
        str 3       serviceClassCode            =   #classCode;             // 02 - 04          220             220 when generated from Accounts Payable -> Means "Credits Only"
        str 16      companyName                 =   strRep(#spc, 16);       // 05 - 20                          bankAccount.CompanyStatementName *NEW FIELD*
        str 20      companyDiscretionaryData    =   #discData;              // 21 - 40
        str 10      companyId                   =   strRep(#spc, 10);       // 41 - 50                          custVendPaym.SendersBanksIdentificationOfSender ~ bankAccount.CompanyId
        str 3       standardEntryClassCode      =   strRep(#spc, 3);        // 51 - 53                          CCD, CTX or PPD, depending on the payment.
        str 10      companyEntryDescription     =   #EntDesc;               // 54 - 63          PAYABLEs
        str 6       companyDescriptiveDate      =   strRep(#zero, 6);       // 64 - 69                          System Date
        str 6       effectiveEntryDate          =   strRep(#zero, 6);       // 70 - 75                          Default to System Date, but user will receive prompt to change
        str 3       settlementDate              =   strRep(#spc, 3);        // 76 - 78          BLANK           Julian Date inserted by ACH Operator
        str 1       originatorStatusCode        =   #one;                   // 79 - 79          1
        str 8       originationDFI_Id           =   strRep(#spc, 8);        // 80 - 87                          bankAccount.RoutingNumber
        str 7       batchNumber                 =   #batchNum;              // 88 - 94          0000001
        ;

        companyName = strLFix(bankAccountTable.BankCompanyStatementName, #CompStatementNameLen, #spc);
        companyId = strLFix(bankAccountTable.CompanyPaymId, #CompPaymIDLen, #spc);
        standardEntryClassCode = fileFormat;

        companyDescriptiveDate = date2str(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), #DateSeqMDY, #DateDay, 0, #DateMonth, 0, #DateYear, DateFlags::None);      // MMDDYy
        effectiveEntryDate = date2str(effectiveEntDate, #DateSeqYMD, #DateDay, 0, #DateMonth, 0, #DateYear, DateFlags::None);         // YYMMDd

        originationDFI_Id = this.getBankRoutingNumber(BankUSRoutingNumberFormat::WithoutCheckDigit);

        headerBatch = conIns(headerBatch, 1, recordTypeCode + serviceClassCode + companyName + companyDiscretionaryData + companyId +
               standardEntryClassCode + companyEntryDescription + companyDescriptiveDate + effectiveEntryDate + settlementDate +
               originatorStatusCode + originationDFI_Id + batchNumber);

        this.addHeaderControlRecord();
        return headerBatch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>custVendOutPaymRecordRootClassId</Name>
				<Source><![CDATA[
    public ClassId custVendOutPaymRecordRootClassId()
    {
        return classNum(VendOutPaymRecordPayrollPPD);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase  dialog = new DialogRunbase(#InterfaceName, this);

        this.dialogAddFileName(dialog);

        dialog.addGroup("@SYS95561");
        dialogEffectiveEntryDate = dialog.addFieldValue(extendedTypeStr(DueDate), dateNull(), "@SYS8280");

        dialogGroupPrint = dialog.addGroup("@SYS920");
        dialogPrintPayStatement = dialog.addFieldValue(enumStr(NoYes), printPayStatement, "@Payroll:PayStatement1", "@Payroll:PrintPayStatements");

        this.dialogAddPrintOption(PaymDocumentType::PayrollDisbursement, dialog);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generatePaymentLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Manages the generation of the payroll payment lines for the output file.
    /// </summary>
    /// <exception cref="Exception::Error">
    ///     The validation ofthe bank account number has failed.
    /// </exception>
    /// <exception cref="Exception::Error">
    ///     The transaction update has failed.
    /// </exception>
    /// <exception cref="Exception::UpdateConflictNotRecovered">
    ///     An unrecoverable update conflict has occurred.
    /// </exception>
    /// <exception cref="Exception::UpdateConflict">
    ///     An update conflict has occurred.
    /// </exception>
    public void generatePaymentLines()
    {
        #OCCRetryCount
        LedgerJournalTrans      ledgerJournalTrans;
        VendPaym                vendPaym;
        Amount                  amount;
        boolean                 writeEndRecord;
        QueryBuildDataSource    qbd, qbdsBankAccount, qbdsDisbursement;
        VendPaymModeTable       vendPaymModeTable;
        PayrollPayStatement     payStatement;
        PayrollPayStatementRecId   payStatementRecId;
        HcmWorker               worker;
        HcmWorkerBankAccount    localWorkerBankAccount;
        PayrollBankAccountDisbursement  localBankDisbursement;
        DirPartyTable           dirParty;
        boolean                 ok = true;

        try
        {
            ttsbegin;

            if (!this.checkBankAccountNumber())
            {
                throw error("@SYS18447");
            }

            setPrefix("@SYS17561");

            paymNum = "";
            queryRun.reset();

            qbd = queryRun.query().dataSourceTable(tableNum(LedgerJournalTransPayrollDisbursement));
            qbdsBankAccount = qbd.addDataSource(tableNum(HcmWorkerBankAccount));
            qbdsBankAccount.addLink(fieldNum(LedgerJournalTransPayrollDisbursement, WorkerBankAccount), fieldNum(HcmWorkerBankAccount, RecId), qbd.name());

            qbdsBankAccount.fetchMode(QueryFetchMode::One2One);
            qbdsBankAccount.joinMode(JoinMode::InnerJoin);
            qbdsBankAccount.addSelectionField(fieldNum(HcmWorkerBankAccount, AccountId));
            qbdsBankAccount.addSelectionField(fieldNum(HcmWorkerBankAccount, AccountNum));
            qbdsBankAccount.addSelectionField(fieldNum(HcmWorkerBankAccount, RegistrationNum));
            qbdsBankAccount.addSelectionField(fieldNum(HcmWorkerBankAccount, BankAccountType));

            qbdsDisbursement = qbd.addDataSource(tableNum(PayrollBankAccountDisbursement));
            qbdsDisbursement.addLink(fieldNum(PayrollBankAccountDisbursement, WorkerBankAccount), fieldNum(LedgerJournalTransPayrollDisbursement, WorkerBankAccount));
            qbdsDisbursement.fetchMode(QueryFetchMode::One2One);
            qbdsDisbursement.joinMode(JoinMode::InnerJoin);
            qbdsDisbursement.addSelectionField(fieldNum(PayrollBankAccountDisbursement, IsInPreNoteStatus));

            qbd = queryRun.query().dataSourceTable(tableNum(PayrollPayStatement));
            qbd.addOrderByField(fieldNum(PayrollPayStatement, DocumentNumber));

            while (queryRun.next())
            {
                ledgerJournalTrans = queryRun.get(tableNum(LedgerJournalTrans));

                if (!this.isOffsetAccountValid(ledgerJournalTrans))
                {
                    continue;
                }

                payStatement = queryRun.get(tableNum(PayrollPayStatement));

                // initialize the output record data
                vendRecordNacha = CustVendOutPaymRecord::construct(ledgerJournalTrans.PaymMode,
                                                                     ledgerJournalTrans.PaymSpec,
                                                                     this,
                                                                     null);

                vendRecordNacha.parmWorkerBankAccount(queryRun.get(tableNum(HcmWorkerBankAccount)));
                vendRecordNacha.parmWorkerDisbursement(queryRun.get(tableNum(PayrollBankAccountDisbursement)));
                vendRecordNacha.parmCustVendPaym(this.vendPaym(ledgerJournalTrans));

                writeEndRecord = true;
                amount += vendRecordNacha.parmCustVendPaym().paymAmountInSendersCurrency();

                vendRecordNacha.parmFile(file);

                setPrefix(strFmt("@Payroll:Date1PayStatement2Worker3",
                                 ledgerJournalTrans.TransDate,
                                 payStatement.DocumentNumber,
                                 vendRecordNacha.parmCustVendPaym().sendersIdentificationOfReciever()));

                if (vendRecordNacha.checkValues(ledgerJournalTrans, this.parmProgress()))
                {
                    vendRecordNacha.output();

                    if (!vendPaymModeTable.RecId)
                    {
                        vendPaymModeTable = VendPaymModeTable::find(ledgerJournalTrans.PaymMode);
                    }

                    this.trackSequenceOnPaymMode(CustVendPaymModeTable::findCommon(ledgerJournalTrans, true));
                    this.updateLedgerJournalTrans(ledgerJournalTrans, vendRecordNacha, true);

                    if (payStatementRecId != payStatement.RecId)
                    {
                        // update the PayrollPayStatement.PaymentStatus
                        payStatement.PaymentStatus = PayrollPaymentStatus::PaymentIssued;
                        payStatement.update();
                        payStatementRecId = payStatement.RecId;

                        if (paymNum == "")
                        {
                            paymNum = payStatement.DocumentNumber;
                        }
                        else
                        {
                            paymNum += ", " + payStatement.DocumentNumber;
                        }
                    }
                    ledgerJournalTrans.PaymentStatus = CustVendPaymStatus::Sent;
                    ledgerJournalTrans.update();
                }
                else
                {
                    ok = false;
                }
            }

            // process accounts in pre-note status
            while select RecId, RegistrationNum, AccountNum, BankAccountType from localWorkerBankAccount
                join RecId, IsInPreNoteStatus from localBankDisbursement
                join PersonnelNumber from worker
                join Name from dirParty
                where localWorkerBankAccount.RecId == localBankDisbursement.WorkerBankAccount
                    && localBankDisbursement.LegalEntity == CompanyInfo::current()
                    && localBankDisbursement.IsInPreNoteStatus == NoYes::Yes
                    && worker.RecId == localWorkerBankAccount.Worker
                    && dirParty.RecId == worker.Person
            {
                ledgerJournalTrans.clear();
                ledgerJournalTrans.JournalNum = this.parmLedgerJournalId();
                vendRecordNacha = new VendOutPaymRecordPayrollPPD();
                vendRecordNacha.parmFile(file);
                vendRecordNacha.parmCustVendOutPaym(this);
                vendPaym = new VendPaym();
                vendPaym.ledgerJournalTrans(ledgerJournalTrans);
                vendRecordNacha.parmCustVendPaym(vendPaym);
                vendRecordNacha.parmWorkerBankAccount(localWorkerBankAccount);
                vendRecordNacha.parmWorkerDisbursement(localBankDisbursement);

                vendPaym.sendersIdentificationOfReciever(worker.PersonnelNumber);
                vendPaym.recieversCompanyName(dirParty.Name);
                vendPaym.recieversBankRegistrationNumber(localWorkerBankAccount.RegistrationNum);
                vendPaym.recieversBankAccountId         (localWorkerBankAccount.AccountId);
                vendPaym.recieversBankAccount           (localWorkerBankAccount.AccountNum);

                vendRecordNacha.output();
                ++preNoteCount;
            }

            if (!ok)
            {
                throw error("@Payroll:UpdateHasBeenCanceledDirectDepositFileHasBeenGenerated");
            }

            ttscommit;
        }

        catch (Exception::Deadlock)
        {
            retry;
        }

        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addGeneratePaymentLinesSort</Name>
				<Source><![CDATA[
    protected void addGeneratePaymentLinesSort(QueryRun _queryRun)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEffectiveDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the <c>effectiveEntDate</c> property.
    /// </summary>
    /// <returns>
    ///     A <c>Date</c> value.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public date getEffectiveDate()
    {
        return effectiveEntDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (dialogPrintPayStatement)
        {
            printPayStatement = dialogPrintPayStatement.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCodeEmployeeDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delegate for the NACHA transaction code.
    /// </summary>
    /// <param name = "_emplBankAccount">The account to which funds wll be deposited.</param>
    /// <param name = "_accountDisbursement">Deposit information related to the legal entity deposting the funds.</param>
    /// <param name = "_eventHandlerResult">An <c>EventHandlerResult</c> where the transaction code can be returned.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static delegate void getTransactionCodeEmployeeDelegate(
        HcmWorkerBankAccount _emplBankAccount, 
        PayrollBankAccountDisbursement _accountDisbursement,
        EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionCodeEmployee</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return the approprite NACHA Transaction Code based on the Bank Account Type
    /// </summary>
    /// <param name="_emplBankAccount">
    /// The account to which funds will be deposited.
    /// </param>
    /// <param name="_accountDisbursement">
    /// Deposit information related to the legal entity depositing the funds.
    /// </param>
    /// <returns>
    /// The transaction code associated with the bank account.
    /// </returns>
    /// <remarks>
    /// Transaction Codes:
    ///     Module               Bank Account Type   Transaction Code Value
    ///     -------------------- ------------------- ----------------------
    ///     Payroll              Checking            22
    ///     Payroll              Savings             32
    ///     Payroll prenote      Checking            23
    ///     Payroll prenote      Savings             33
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int getTransactionCodeEmployee(HcmWorkerBankAccount _emplBankAccount, PayrollBankAccountDisbursement _accountDisbursement)
    {
        #define.Checking(22)
        #define.Savings(32)
        #define.PreNoteChecking(23)
        #define.PreNoteSavings(33)

        int     transactionCode = #Checking;           // Default to Checking Account

        switch (_emplBankAccount.BankAccountType)
        {
            case BankAccountType::CheckingAccount:
                if (_accountDisbursement.IsInPreNoteStatus == NoYes::No)
                {
                    transactionCode = #Checking;
                }
                else
                {
                    transactionCode = #PreNoteChecking;
                }
                break;

            case BankAccountType::SavingsAccount:
                if (_accountDisbursement.IsInPreNoteStatus == NoYes::No)
                {
                    transactionCode = #Savings;
                }
                else
                {
                    transactionCode = #PreNoteSavings;
                }
                break;

            default:
                EventHandlerResult result = new EventHandlerResult();
                VendOutPaymNACHAPayroll::getTransactionCodeEmployeeDelegate(_emplBankAccount, _accountDisbursement, result);
                if (result.hasResult())
                {
                    transactionCode = result.result();
                }
                break;
        }

        return transactionCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    public PaymInterfaceName interfaceName()
    {
        return #interfaceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>packSysLastValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Packs the data required for <c>SysLastValues</c>.
    /// </summary>
    /// <returns>
    /// A container storing the data to be persisted by <c>SysLastValues</c>.
    /// </returns>
    /// <remarks>
    /// The pack and unpack pattern does not have provisions for supporting different serialization and
    /// <c>SysLastValues</c> pack lists. This separate packing mechanism has been implemented for
    /// <c>SysLastValues</c> and is first defined on the class from which the RunBase or RunBaseBatch
    /// classes inherit. Derivative classes also implement this method so that the whole object can be
    /// packed for <c>SysLastValues</c>.
    /// </remarks>
    public container packSysLastValues()
    {
        return [#SysLastValuesCurrentVersion, #SysLastValuesList, custVendPaymPrinterSettings.getAllPrinterSettingsPacked(), super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPayStatement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Prints the Pay statement report upon completion of generating the payments.
    /// </summary>
    /// <remarks>
    ///    The option to print the Pay statement report is a check box in the dialog box when the user
    ///    selects to generate payments, and the selected method of payment is the electronic method of
    ///    payment defined in payroll parameters.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void printPayStatement()
    {
        MenuFunction    menuFunction;
        Args            args;

        // only call the report if direct deposits were found for the pay run
        if (paymNum)
        {
            args = new Args();

            args.caller(this);
            //args.parmObject(this.getOutPaymRecords());

            menuFunction = new MenuFunction(menuitemOutputStr(PayrollPayStatementReportPaymJur), MenuItemType::Output);
            menuFunction.parameters(paymNum);
            menuFunction.run(args);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEffectiveDate</Name>
				<Source><![CDATA[
    // This method should be called whenever a detail record is added to the NACHA EFt
    public void setEffectiveDate(date effEntDate)
    {
        effectiveEntDate = effEntDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Version version = RunBase::getVersion(_packedClass);
        container   base;
        boolean     ret;

        #LOCALMACRO.CurrentListV3
            fileName,
            printControlReport,
            effectiveEntDate
        #ENDMACRO
        #define.V3(3)

        #LOCALMACRO.CurrentListV4
            effectiveEntDate
        #ENDMACRO

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList, base] = _packedClass;
                ret = super(base);
                break;

            case 4 :
                [version, #CurrentListV4, base] = _packedClass;
                ret = super(base);
                break;

            case #V3 :
                [version, #CurrentListV3] = _packedClass;
                ret = true;
                break;

            default :
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackSysLastValues</Name>
				<Source><![CDATA[
    public void unpackSysLastValues(container _packedValues)
    {
        container baseClassPackedValues;
        container packedPrinterSettings;
        Version   version = RunBase::getVersion(_packedValues);

        switch (version)
        {
            case #SysLastValuesCurrentVersion:
                [version, #SysLastValuesList, packedPrinterSettings, baseClassPackedValues] = _packedValues;
                super(baseClassPackedValues);
                break;
        }
        if (packedPrinterSettings)
        {
            // Recreate the object from the packed values.
            custVendPaymPrinterSettings = CustVendPaymPrinterSettings::newForPackedPrinterSettings(packedPrinterSettings);
        }
        else
        {
            custVendPaymPrinterSettings = new CustVendPaymPrinterSettings();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate(Object _calledFrom = null)
    {
        // Validates the effective date for the transaction has been supplied.
        boolean             ret;

        ret = super(_calledFrom);

        if (!this.getEffectiveDate())
        {
            ret = checkFailed("@SYS4090032");
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendPaym</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the <c>VendPaym</c> instance for a supplied <c>LedgerJournalTrans</c> buffer.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     A <c>LedgerJournalTrans</c> buffer.
    /// </param>
    /// <returns>
    ///     A <c>VendPaym</c> class instance.
    /// </returns>
    VendPaym vendPaym(LedgerJournalTrans _ledgerJournalTrans)
    {
        VendPaym                vendPaym;
        DirPartyTable           party;
        HcmWorker               worker;

        vendPaym = this.vendPaymPayroll(_ledgerJournalTrans);

        // get party info from the query
        party = queryRun.get(tableNum(DirPartyTable));
        worker = queryRun.get(tableNum(HcmWorker));

        vendPaym.sendersIdentificationOfReciever(worker.PersonnelNumber);
        vendPaym.recieversCompanyName           (party.Name);

        vendPaym.recieversBankAccountId         (vendRecordNacha.parmWorkerBankAccount().AccountId);
        vendPaym.recieversBankRegistrationNumber(vendRecordNacha.parmWorkerBankAccount().RegistrationNum);
        vendPaym.recieversBankAccount           (vendRecordNacha.parmWorkerBankAccount().AccountNum);

        vendPaym.recieversBankName                  (vendRecordNacha.parmWorkerBankAccount().Name);
        vendPaym.recieversBankCodeType              (vendRecordNacha.parmWorkerBankAccount().BankCodeType);

        return vendPaym;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ClassDescription description()
    {
        return new VendOutPaymNACHAPayroll().interfaceName();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>