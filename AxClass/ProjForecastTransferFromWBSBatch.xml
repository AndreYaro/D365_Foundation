<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjForecastTransferFromWBSBatch</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// Does forecast transfer in a batch
/// </summary>
class ProjForecastTransferFromWBSBatch extends RunBaseBatch implements BatchRetryable
{
    List                psaActivityEstimatesRecIds;
    ProjId              projId;
    ForecastModelId     forecastModelId;

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        projId,
        forecastModelId
    #ENDMACRO
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>allowSaveLast</Name>
        <Source><![CDATA[
    /// <summary>
    /// Determines whether or not to save and load last values.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    public boolean allowSaveLast()
    {
        return false;
    }

]]></Source>
      </Method>
      <Method>
        <Name>pack</Name>
        <Source><![CDATA[
    container pack()
    {
        container packedList = psaActivityEstimatesRecIds.pack();
        return [#CurrentVersion, #CurrentList, packedList];
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmForecastModelId</Name>
        <Source><![CDATA[
    public ForecastModelId parmForecastModelId(ForecastModelId _forecastModelId = forecastModelId)
    {
        forecastModelId = _forecastModelId;
        return forecastModelId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmProjId</Name>
        <Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;
        return projId;
    }

]]></Source>
      </Method>
      <Method>
        <Name>parmPSAActivityEstimatesRecIds</Name>
        <Source><![CDATA[
    public List parmPSAActivityEstimatesRecIds(List _psaActivityEstimatesRecIds = psaActivityEstimatesRecIds)
    {
        psaActivityEstimatesRecIds = _psaActivityEstimatesRecIds;
        return psaActivityEstimatesRecIds;
    }

]]></Source>
      </Method>
      <Method>
        <Name>run</Name>
        <Source><![CDATA[
    public void run()
    {
        PSAActivityEstimates        tmpPSAActivityEstimates;
        PSAActivityEstimates        psaActivityEstimatesLocal;
        ProjForecastTransferFromWbs transferFromWBS;
        ListEnumerator              enumeratorRecIds;
        Query                       query;
        QueryRun                    qr;
        boolean                     nextQuery;

        //The purpose of this function is to break down the query
        //into managable size. A query that is too long will break.
        //Instead of creating a query for 2000+ psaActivityEstimates
        //by RecId, we instead create 4+ queries for 500 RecIds each.
        boolean setNextPSAActivityEstimatesQuery(int size)
        {
            int                     curSize;
            boolean                 more = true;
            QueryBuildDataSource    qbds;
            RecId                   recId;

            query = new Query();
            qbds = query.addDataSource(tableNum(PSAActivityEstimates));

            for (curSize = 0; curSize < size && more; curSize++)
            {
                more = enumeratorRecIds.moveNext();
                if (more)
                {
                    recId = enumeratorRecIds.current();
                    qbds.addRange(fieldNum(PSAActivityEstimates, RecId)).value(queryValue(recId));
                }
            }
            return more;
        }

        #define.QuerySize(500);

        enumeratorRecIds = psaActivityEstimatesRecIds.getEnumerator();

        tmpPSAActivityEstimates.setTmp();

        nextQuery = true;
        while (nextQuery)
        {
            nextQuery   = setNextPSAActivityEstimatesQuery(#QuerySize);
            qr          = new QueryRun(query);

            while (qr.next())
            {
                psaActivityEstimatesLocal = qr.get(tableNum(PSAActivityEstimates));
                tmpPSAActivityEstimates.data(psaActivityEstimatesLocal);
                tmpPSAActivityEstimates.doInsert();
            }
        }
        transferFromWBS = new ProjForecastTransferFromWbs(tmpPSAActivityEstimates, projId, forecastModelId);
        transferFromWBS.transfer();
    }

]]></Source>
      </Method>
      <Method>
        <Name>unpack</Name>
        <Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        container   packedList;
        int         version = conPeek(_packedClass,1);
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedList] = _packedClass;
                psaActivityEstimatesRecIds = List::create(packedList);
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args args)
    {
        ProjForecastTransferFromWBSBatch   batch;
        BatchHeader                         batchHeader;
        BatchInfo                           batchInfo;
        //Expects the argument to be a ProjForecastTransferFromWBSBatch object
        //either run it, or schedule it as a batch
        batch = args.parmObject();
        if (batch.parmInBatch())
        {
            batchInfo = batch.batchInfo();
            batchInfo.parmCaption("@GLS360171");
            batchHeader = BatchHeader::construct();
            batchHeader.addTask(batch);
            batchHeader.save();
            info(strFmt("@SYS73254",''));
        }
        else
        {
            batch.runOperation();
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>canRunInNewSession</Name>
        <Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>