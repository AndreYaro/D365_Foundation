<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRGiftCard</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The class <c>MCRGiftCard</c> manages all
/// gift card activity for call center.
/// </summary>
class MCRGiftCard
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>availableBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the available balance on the passed gift card.
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The ID of the gift card used to get the balance.
    /// </param>
    /// <returns>
    /// The available balance of the gift card.
    /// </returns>
    public static RetailBalance availableBalance(RetailGiftCardId _retailGiftCardId)
    {
        container giftCardStatus;
        if (_retailGiftCardId)
        {
            giftCardStatus = RetailTransactionService::getGiftCardBalance(_retailGiftCardId);

            if (conPeek(giftCardStatus, 1))
            {
                return conPeek(giftCardStatus, 4);
            }
        }
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateGiftCardSerialNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a gift card serial number.
    /// </summary>
    /// <returns>
    /// A new serial number for a gift card.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Error thrown if an active <c>MCRGiftCardSerialTemplate</c> record is not found.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Error thrown if the active <c>MCRGiftCardSerialTemplate</c> record is not correctly setup.
    /// </exception>
    public static RetailGiftCardId generateGiftCardSerialNumber()
    {
        boolean             found        = false;
        RetailGiftCardId    template;
        int                 numAttempts     = 0;
        int                 maxNumAttempts  = 500;
        int                 position;
        RandomGenerate      random          = RandomGenerate::construct();
        RetailGiftCardId    retailGiftCardId;
        MCRGiftCardSerialTemplate mcrGiftCardSerialTemplate;

        mcrGiftCardSerialTemplate = MCRGiftCardSerialTemplate::findActive(DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        if (mcrGiftCardSerialTemplate)
        {
            template             = mcrGiftCardSerialTemplate.SerialTemplate;
        }
        else
        {
            throw error(strfmt("@MCR30413",tableId2name(tablenum(mcrGiftCardSerialTemplate)),DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        //if a '#' character is not found in the SerialTemplate field of the
        //template record then a unique serial number won't be created.
        if (strfind(template, '#', 0, strlen(template)) == 0)
        {
            throw error(strfmt("@MCR30414", template,DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone())));
        }

        do
        {
            numAttempts++;
            // Generate a new serial number
            retailGiftCardId = template;
            position = strfind(retailGiftCardId, '#', 0, strlen(retailGiftCardId));
            while ( position != 0)
            {
                retailGiftCardId = strpoke(retailGiftCardId, int2str(random.randomInt(0, 9)), position);
                position          = strfind(retailGiftCardId, '#', position + 1, strlen(retailGiftCardId));
            }

            // Add checksum
            retailGiftCardId = MCRGiftCard::insertCheckDigit(retailGiftCardId);

            // If already in table then keep trying, otherwise insert.
            if (MCRGiftCard::giftCardNumberInUse(retailGiftCardId))
            {
                continue;
            }
            else
            {
                found = true;
            }
        } while (!found && numAttempts < maxNumAttempts);

        if (!found)
        {
            error("@MCR10972");
        }
        return retailGiftCardId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>giftCardNumberInUse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the passed gift card ID exists.
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The ID of the gift card to find.
    /// </param>
    /// <returns>
    /// true if the gift card exists in the <c>RetailGiftCardTable</c> table
    /// or on a sales line; otherwise, false.
    /// </returns>
    public static boolean giftCardNumberInUse(RetailGiftCardId _retailGiftCardId)
    {
        MCRSalesLine mcrSalesLine;

        if (RetailGiftCardTable::find(_retailGiftCardId))
        {
            return true;
        }

        select firstOnly crossCompany RecId from mcrSalesLine
            where mcrSalesLine.GiftCardNumber == _retailGiftCardId;

        if (mcrSalesLine)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>giftCardType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the type of gift card that was ordered.
    /// </summary>
    /// <param name="_inventTransId">
    /// The inventory transaction ID of the original sales line.
    /// </param>
    /// <returns>
    /// The gift card type that relates to the corresponding sales line.
    /// </returns>
    public static MCRGiftCardType giftCardType(InventTransId _inventTransId)
    {
        RetailGiftCardTable retailGiftCardTable;
        RetailGiftCardTransactions retailGiftCardTransactions;

        select firstOnly crossCompany MCRGiftCardType from retailGiftCardTable
            exists join retailGiftCardTransactions
            where retailGiftCardTransactions.CardNumber == retailGiftCardTable.EntryId
                && retailGiftCardTransactions.MCRInventTransId == _inventTransId;

        return retailGiftCardTable.MCRGiftCardType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBeenIssued</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the passed gift card ID has been issued.
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The ID of the gift card to find.
    /// </param>
    /// <returns>
    /// true if the gift card has been issued, including whether
    /// or not it has ever been used; otherwise, false.
    /// </returns>
    public static boolean hasBeenIssued(RetailGiftCardId _retailGiftCardId)
    {
        RetailGiftCardTransactions retailGiftCardTransactions;

        if (_retailGiftCardId)
        {
            select firstOnly crossCompany RecId from retailGiftCardTransactions
                where retailGiftCardTransactions.CardNumber == _retailGiftCardId
                    && retailGiftCardTransactions.Operation == RetailGiftCardOperation::Issue;
        }

        if (retailGiftCardTransactions)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBeenUsed</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the passed gift card ID has been used.
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The ID of the gift card to find.
    /// </param>
    /// <returns>
    /// true if the gift card has been used; otherwise, false.
    /// </returns>
    public static boolean hasBeenUsed(RetailGiftCardId _retailGiftCardId)
    {
        RetailGiftCardTransactions retailGiftCardTransactions;

        boolean isRefundIssue()
        {
            boolean isRefundIssue = false;

            if (retailGiftCardTransactions.operation == RetailGiftCardOperation::Refund && RetailParameters::find().UseGiftCardPolicies)
            {
                select firstOnly crossCompany count(RecId) from retailGiftCardTransactions
                    where retailGiftCardTransactions.CardNumber == _retailGiftCardId &&
					retailGiftCardTransactions.Operation  != RetailGiftCardOperation::Issue &&
                    retailGiftCardTransactions.Operation != RetailGiftCardOperation::ManualUnlock &&
					retailGiftCardTransactions.Operation != RetailGiftCardOperation::OfflineUnlock;

                if (retailGiftCardTransactions.RecId == 1)
                {
                    select firstOnly crossCompany RecId, Amount from retailGiftCardTransactions
                        where retailGiftCardTransactions.CardNumber == _retailGiftCardId &&
						retailGiftCardTransactions.Operation  == RetailGiftCardOperation::Issue &&
						retailGiftCardTransactions.Operation != RetailGiftCardOperation::ManualUnlock &&
						retailGiftCardTransactions.Operation != RetailGiftCardOperation::OfflineUnlock;

                    if (retailGiftCardTransactions && !retailGiftCardTransactions.amount)
                    {
                        isRefundIssue = true;
                    }
                }
            }

            return isRefundIssue;
        }

        if (_retailGiftCardId)
        {
            select firstOnly crossCompany RecId, operation from retailGiftCardTransactions
                where retailGiftCardTransactions.CardNumber == _retailGiftCardId &&
				retailGiftCardTransactions.Operation != RetailGiftCardOperation::Issue &&
				retailGiftCardTransactions.Operation != RetailGiftCardOperation::ManualUnlock &&
				retailGiftCardTransactions.Operation != RetailGiftCardOperation::OfflineUnlock;
        }

        if (retailGiftCardTransactions)
        {
            // If a)GiftPolicies is ON, 
			// b) GiftCard issued with zero balance and
			// c) one time refunded then this card is not used
            // this is issue by refund
            if (isRefundIssue())
            {
                return false;
            }
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasBeenVoided</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the passed gift card ID has been voided.
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The ID of the gift card to find.
    /// </param>
    /// <returns>
    /// true if the gift card has been voided; otherwise, false.
    /// </returns>
    public static boolean hasBeenVoided(RetailGiftCardId _retailGiftCardId)
    {
        RetailGiftCardTransactions retailGiftCardTransactions;

        if (_retailGiftCardId)
        {
            select firstOnly crossCompany RecId from retailGiftCardTransactions
                where retailGiftCardTransactions.CardNumber == _retailGiftCardId
                    && retailGiftCardTransactions.Operation == RetailGiftCardOperation::MCRVoid;
        }

        if (retailGiftCardTransactions)
        {
            return true;
        }
        else
        {
            return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCheckDigit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts check digit(s).
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The serial number to prepend the check digit(s) to.
    /// </param>
    /// <returns>
    /// The serial number with the prepended check digit(s).
    /// </returns>
    private static RetailGiftCardId insertCheckDigit(RetailGiftCardId _retailGiftCardId)
    {
        MCRCheckDigit checkDigit = new MCRCheckDigit_Mod97();
        return checkDigit.insertCheckDigit(_retailGiftCardId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceAccount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the invoice account of the sales order
    /// the gift card was originally purchased on.
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The ID of the gift card to find.
    /// </param>
    /// <returns>
    /// The invoice account of the sales order the card
    /// was purchsed on.
    /// </returns>
    public static CustAccount invoiceAccount(RetailGiftCardId _retailGiftCardId)
    {
        RetailGiftCardTransactions retailGiftCardTransactions;

        if (_retailGiftCardId)
        {
            select firstOnly crossCompany MCRInvoiceAccount from retailGiftCardTransactions
                order by RecId desc
                where retailGiftCardTransactions.cardNumber == _retailGiftCardId
                    && (retailGiftCardTransactions.Operation == RetailGiftCardOperation::AddTo
                        || retailGiftCardTransactions.Operation == RetailGiftCardOperation::Issue);
        }
        if (retailGiftCardTransactions)
        {
            return retailGiftCardTransactions.MCRInvoiceAccount;
        }
        else
        {
            return '';
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>issuedTransaction</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the issuing <c>RetailGiftCardTransactions</c> record.
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The ID of the gift card to find.
    /// </param>
    /// <returns>
    /// A <c>RetailGiftCardTransactions</c> table with an issue status.
    /// </returns>
    public static RetailGiftCardTransactions issuedTransaction(RetailGiftCardId _retailGiftCardId)
    {
        RetailGiftCardTransactions retailGiftCardTransactions;

        if (_retailGiftCardId)
        {
            select firstOnly crossCompany retailGiftCardTransactions
                where retailGiftCardTransactions.Operation == RetailGiftCardOperation::Issue
                    && retailGiftCardTransactions.CardNumber == _retailGiftCardId;
        }
        return retailGiftCardTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maskCardNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces all but the last four characters in the passed
    /// gift card with asterisks.
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The gift card number to be masked.
    /// </param>
    /// <returns>
    /// A masked gift card number.
    /// </returns>
    public static RetailGiftCardId maskCardNum(RetailGiftCardId _retailGiftCardId)
    {
        return strPoke(_retailGiftCardId, strRep('*', strLen(_retailGiftCardId) - 4), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>originalBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the original balance of the passed gift card.
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The gift card ID that the method is finding the original balance for.
    /// </param>
    /// <returns>
    /// The original balance of the passed gift card.
    /// </returns>
    public static AmountMST originalBalance(RetailGiftCardId _retailGiftCardId)
    {
        RetailGiftCardTransactions retailGiftCardTransactions;

        if (_retailGiftCardId)
        {
            select firstOnly crossCompany Amount from retailGiftCardTransactions
                where retailGiftCardTransactions.CardNumber == _retailGiftCardId
                    && retailGiftCardTransactions.Operation == RetailGiftCardOperation::Issue;
        }

        return retailGiftCardTransactions.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateGiftCardSerialNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether or not the passed gift card is in a
    /// valid format.
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The ID of the gift card being validated.
    /// </param>
    /// <returns>
    /// true if it is in a valid format; otherwise, false.
    /// </returns>
    public static boolean validateGiftCardSerialNum(RetailGiftCardId _retailGiftCardId)
    {
        RetailGiftCardTable retailGiftCardTableLocal;
        MCRSalesLine        mcrSalesLine;

        if (_retailGiftCardId)
        {
            select firstOnly crossCompany RecId from retailGiftCardTableLocal
                where retailGiftCardTableLocal.entryId == _retailGiftCardId;

            if (!retailGiftCardTableLocal)
            {
                select firstOnly crossCompany RecId from mcrSalesLine
                    where mcrSalesLine.GiftCardNumber == _retailGiftCardId;
            }

            if (retailGiftCardTableLocal || mcrSalesLine)
            {
                info("@MCR34373");
                return false;
            }
        }
        else
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>voidGiftCard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Voids the passed gift card.
    /// </summary>
    /// <param name="_retailGiftCardId">
    /// The ID of the gift card being voided.
    /// </param>
    /// <returns>
    /// true if the gift card was successfully voided; otherwise, false.
    /// </returns>
    public static boolean voidGiftCard(RetailGiftCardId _retailGiftCardId)
    {
        RetailGiftCardTable retailGiftCardTable, lockRetailGiftCardTable;
        RetailGiftCardTransactions retailGiftCardTransactions;
        MCRCreateJournalGiftCardVoid mcrCreateJournalGiftCardVoid;
        MCROrderEventTable  mcrOrderEventTable;
        boolean wasCardLockSuccessful = false;
        container companiesToAttemptToLocateTheRecordIn = [curExt(), RetailParameters::find().GiftCardCompany];

        void doVoid()
        {
            RetailParameters retailParameters = RetailParameters::find();
            // <GEERU>
            boolean isPrepaymentOn = retailParameters.ProcessGiftCardsAsPrepayments_RU;
            // </GEERU>
            boolean isGiftCardPolicyEnabled = retailParameters.UseGiftCardPolicies;
            RetailGiftCardClosing retailGiftCardClosing;

            // <GEERU> || isPrepaymentOn </GEERU>
            if (isGiftCardPolicyEnabled || isPrepaymentOn)
            {
                retailGiftCardClosing = RetailGiftCardClosing::construct();
                retailGiftCardClosing.parmGiftCardId(_retailGiftCardId);
                retailGiftCardClosing.parmSkipGiftCardUpdate(true);
                retailGiftCardClosing.runOperation();

                if (isGiftCardPolicyEnabled)
                {
                    retailGiftCardTable.Status = RetailGiftCardStatus::Closed;
                    retailGiftCardTable.update();
                }
            }
            else
            {
                    mcrCreateJournalGiftCardVoid = new MCRCreateJournalGiftCardVoid(retailGiftCardTable);
                    if (!mcrCreateJournalGiftCardVoid.createGeneralLedgerVoid())
                    {
                        throw Exception::Error;
                    }
            }

            // Insert order event
            mcrOrderEventTable.insertFromSalesLine(
                    SalesLine::find(MCRGiftCard::issuedTransaction(_retailGiftCardId).MCRInventTransId),
                    MCROrderEventType::VoidGiftCertificate);

            retailGiftCardTransactions.Amount       = -abs(retailGiftCardTable.balance());
            retailGiftCardTransactions.CardNumber   = _retailGiftCardId;
            retailGiftCardTransactions.Operation    = isGiftCardPolicyEnabled ? RetailGiftCardOperation::Close : RetailGiftCardOperation::MCRVoid;
            retailGiftCardTransactions.TransDate    = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
            retailGiftCardTransactions.TransTime    = DateTimeUtil::time(DateTimeUtil::applyTimeZoneOffset(DateTimeUtil::getSystemDateTime(), DateTimeUtil::getUserPreferredTimeZone()));
            retailGiftCardTransactions.Channel      = MCRGiftCard::issuedTransaction(_retailGiftCardId).Channel;
            retailGiftCardTransactions.insert();
        }

        try
        {
            if (_retailGiftCardId)
            {
                // Locate the gift card across all companies.
                lockRetailGiftCardTable = RetailGiftCardTable::findCrossCompany(_retailGiftCardId, companiesToAttemptToLocateTheRecordIn, true);

                // Throw an error if we are unable to locate the gift card record.
                if (!lockRetailGiftCardTable)
                {
                    throw Global::error("@RET2431");
                }

                // Change the company to the gift card company before any changes are made.
                changecompany(lockRetailGiftCardTable.DataAreaId)
                {
                    // Reserve the gift card to prevent anyone else from using it.
                    ttsbegin;
                    lockRetailGiftCardTable = RetailGiftCardTable::find(_retailGiftCardId, true);
                    lockRetailGiftCardTable.reserveCard();
                    wasCardLockSuccessful = true;
                    ttscommit;

                    // Check to ensure Gift card has been issue but not used nor voided.
                    boolean hasGiftCardBeenIssuedButNotUsedNorVoided = MCRGiftCard::hasBeenIssued(_retailGiftCardId)
                                    && !MCRGiftCard::hasBeenUsed(_retailGiftCardId)
                                    && !MCRGiftCard::hasBeenVoided(_retailGiftCardId);
                    if (!hasGiftCardBeenIssuedButNotUsedNorVoided)
                    {
                        throw Global::error(strfmt("@MCR11181", _retailGiftCardId));
                    }

                    // Check to ensure that there are no unposted transactions for the gift card.
                    if (RetailGiftCardTransactions::unpostedTransactionExist(_retailGiftCardId))
                    {
                        // Throw an error message saying =>
                        // You cannot void a gift card when the financial transactions for the gift card are not posted in Dynamics 365 for Finance and Operations.
                        throw Global::error("@SYP4860867");
                    }

                    // Check policy conditions for gift card void operation.
                    if (!retailGiftCardTable.checkPolicy(RetailGiftCardOperation::MCRVoid))
                    {
                        throw Exception::Error;
                    }

                    // Perform the void gift card operation.
                    ttsBegin;
                    retailGiftCardTable = RetailGiftCardTable::find(_retailGiftCardId, true);
                    doVoid();
                    ttsCommit;
                }
            }
        }
        catch
        {
            // Since we experienced an error, unlock the gift card for use.
			// We only do this if we originally we able to successfully lock the card.
			if (wasCardLockSuccessful)
            {
                ttsbegin;

                lockRetailGiftCardTable = RetailGiftCardTable::findCrossCompany(_retailGiftCardId, companiesToAttemptToLocateTheRecordIn, true);
                changecompany(lockRetailGiftCardTable.DataAreaId)
                {
                    lockRetailGiftCardTable = RetailGiftCardTable::find(_retailGiftCardId, true);
                    lockRetailGiftCardTable.unlockCard();
                }

                ttscommit;
            }

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGiftCardOperation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Verify if a SalesTable and ItemId are part of a valid call center gift card operation.
    /// </summary>
    /// <param name="_salesTable">
    /// SalesTable instance where the item is being sold.
    /// </param>
    /// <param name="_itemId">
    /// The itemId of the salesLine being checked.
    /// </param>
    /// <returns>
    /// Returns if it is an GiftCard itemId inside a CallCenter SalesTable instance.
    /// </returns>
    public static boolean isGiftCardOperation(SalesTable _salesTable, ItemId _itemId)
    {
        boolean             isGiftCard = false;
        RefRecId            retailChannel;
        RetailParameters    retailParameters;

        retailChannel = _salesTable.retailSalesTable().RetailChannel;
        retailParameters = RetailParameters::find();

        isGiftCard = isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter))
                        && retailChannel
                        && !RetailStoreTable::findRecId(retailChannel)  // is in a channel that is not in a channel of type store
                        && retailParameters.GiftcardItem                // a gift card item has been specified
                        && _itemId == retailParameters.GiftcardItem;    // the item in sales line is the specified gift card item

        return isGiftCard;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExternalGiftCardExpiration</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check the external gift card expiration is in the format MMYY.
    /// </summary>
    /// <param name = "_expiration">The expiration to validate.</param>
    /// <returns></returns>
    [Hookable(false)]
    public static boolean validateExternalGiftCardExpiration(str _expiration)
    {
        if (_expiration == "")
        {
            checkFailed("@Retail:RetailGiftCardExpirationRequired");
            eventSource.EventWritePaymentsExternalGiftCardExpirationEmpty();
            return false;
        }
        else
        {
            if (strLen(_expiration) != 4)
            {
                checkFailed("@Retail:RetailGiftCardExpirationInvalid");
                eventSource.EventWritePaymentsExternalGiftCardExpirationInvalidLength(strLen(_expiration));
                return false;
            }
            else
            {
                int month = str2Int(subStr(_expiration, 1, 2));
                if (month == 0 || month > 12)
                {
                    checkFailed("@Retail:RetailGiftCardExpirationInvalid");
                    eventSource.EventWritePaymentsExternalGiftCardExpirationInvalidMonth(month);
                    return false;
                }
            }
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>