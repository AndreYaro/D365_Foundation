<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMAnalyticFormEditCommitChanges</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The base class for implementation of handling apply and revert operations on uncommitted changes in cash flow journals.
/// </summary>
abstract class CFMAnalyticFormEditCommitChanges extends RunBase
{
    CFMJournalEditActionType actionType;
    CFMJournalTable journalTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CFMAnalyticFormEditCommitChanges construct(CFMJournalEditActionType _actionType)
    {
        CFMAnalyticFormEditCommitAttribute editCommitAttribute = new CFMAnalyticFormEditCommitAttribute(_actionType);

        CFMAnalyticFormEditCommitChanges commitChanges = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMAnalyticFormEditCommitChanges), editCommitAttribute);
        return commitChanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromArgs</Name>
				<Source><![CDATA[
    public static CFMAnalyticFormEditCommitChanges constructFromArgs(Args _args)
    {
        if (_args.parmEnumType() != enumnum(CFMJournalEditActionType))
        {
            throw error(error::missingParameter(null));
        }

        if (!_args.record() || _args.dataset() != tableNum(CFMJournalTable) || _args.record().RecId == 0)
        {
            throw error(error::missingRecord(tableStr(CFMJournalTable)));
        }

        CFMJournalEditActionType actionType = _args.parmEnum();

        CFMAnalyticFormEditCommitChanges commitChanges = CFMAnalyticFormEditCommitChanges::construct(actionType);

        if (commitChanges)
        {
            commitChanges.parmJournalTable(_args.record());
            commitChanges.parmActionType(actionType);
        }

        return commitChanges;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CFMAnalyticFormEditCommitChanges commitChanges = CFMAnalyticFormEditCommitChanges::constructFromArgs(_args);

        if (commitChanges && commitChanges.validate())
        {
            commitChanges.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActionType</Name>
				<Source><![CDATA[
    public CFMJournalEditActionType parmActionType(CFMJournalEditActionType _actionType = actionType)
    {
        actionType = _actionType;

        return actionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public CFMJournalTable parmJournalTable(CFMJournalTable _journalTable = journalTable)
    {
        journalTable = _journalTable;

        return journalTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ttsBegin;
        this.runChanges();
        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runChanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs implementation of concrete command Apply or Revert.
    /// </summary>
    abstract protected void runChanges()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = true;

        if (!CFMAnalyticDataEditUncommitted::isJournalExistUncommittedValues(journalTable.RecId))
        {
            ret = checkFailed("@Cashflowmanagement:JourDoesNotContainUncommittedChanges");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>