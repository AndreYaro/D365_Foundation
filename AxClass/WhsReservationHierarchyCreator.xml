<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WhsReservationHierarchyCreator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSReservationHierarchyCreator</c> class is used to create reservation hierarchy records.
/// </summary>
public class WhsReservationHierarchyCreator
{
    #WHSReservationHierarchy

    Map mapOfDimensionsThatCannotBeAboveFieldID;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkCanFieldBeRemovedFromHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if a field can be removed from the hierarchy.
    /// </summary>
    /// <param name="_inventDimFieldId">
    /// fieldId of the field being removed.
    /// </param>
    /// <returns>
    /// true if the field can be removed; Otherwise, false.
    /// </returns>
    public boolean checkCanFieldBeRemovedFromHierarchy(FieldId _inventDimFieldId)
    {
        boolean ret = true;
        switch (_inventDimFieldId)
        {
            case fieldNum(InventDim, InventSiteId)      :
            case fieldNum(InventDim, InventLocationId)  : //fallthrough
            case fieldNum(InventDim, InventStatusId)    : //fallthrough
            case fieldNum(InventDim, wmsLocationId)     : //fallthrough
            case fieldNum(InventDim, LicensePlateId)    : //fallthrough
                ret = checkFailed(strFmt("@WAX4718", fieldId2pname(tableNum(InventDim),_inventDimFieldId)));
                break;

            default :
                ret = true;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkHierarchyList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the list representation of a reservation hierarchy.
    /// </summary>
    /// <param name="_reservationHierarchyList">
    /// The list representation of the hierarchy.
    /// </param>
    /// <returns>
    /// true if the validation succeded; Otherwise, false.
    /// </returns>
    protected boolean checkHierarchyList(List _reservationHierarchyList)
    {
        ListEnumerator  reservationHierarchyListEnumerator;
        FieldId         fieldId;
        boolean         ret = true;
        Set             setOfFieldIds = new Set(Types::Integer);
        Set             setOfDimensionsMustBeIncuded = this.getSetOfDimensionsThatMustBeIncluded();
        Set             setOfDimensionsCannotBeAboveFieldId;
        Set             setErrors;
        SetEnumerator   setErrorsEnumerator;
        FieldId         lastFieldId;

        reservationHierarchyListEnumerator = _reservationHierarchyList.getEnumerator();

        while (reservationHierarchyListEnumerator.moveNext())
        {
            fieldId = reservationHierarchyListEnumerator.current();

            if (   lastFieldId == fieldNum(InventDim, WMSLocationId)
                && fieldId != fieldNum(InventDim, LicensePlateId))
            {
                ret = checkFailed(strFmt("@SYS4160059",
                                  fieldId2name(tableNum(InventDim), fieldNum(InventDim, WMSLocationId)),
                                  fieldId2name(tableNum(InventDim), fieldNum(InventDim, LicensePlateId))));
            }

            setOfDimensionsCannotBeAboveFieldId = this.dimensionsThatCannotBeAboveField(reservationHierarchyListEnumerator.current());

            setErrors = Set::intersection(setOfFieldIds, setOfDimensionsCannotBeAboveFieldId);
            if (   setErrors
                && setErrors.elements())
            {
                setErrorsEnumerator  = setErrors.getEnumerator();

                while (setErrorsEnumerator.moveNext())
                {
                    ret = checkFailed(strFmt("@WAX4717",
                                      fieldId2pname(tableNum(InventDim),reservationHierarchyListEnumerator.current()),
                                      fieldId2pname(tableNum(InventDim),setErrorsEnumerator.current())));
                }
            }

            setOfFieldIds.add(fieldId);

            lastFieldId = fieldId;
        }

        if (Set::intersection(setOfDimensionsMustBeIncuded,setOfFieldIds).empty())
        {
            ret = checkFailed("@WAX4719");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a hierarchy in the database.
    /// </summary>
    /// <param name="_name">
    /// Name of the hierarchy.
    /// </param>
    /// <param name="_description">
    /// Description of the hierarchy.
    /// </param>
    /// <param name="_orderedListOfDimensionFields">
    /// The list representation of the hierarchy.
    /// </param>
    /// <returns>
    /// The <c>recId</c> ID of the created reservation hierarchy.
    /// </returns>
    public WHSReservationHierarchyRecId createHierarchy(
        WHSReservationHierarchyName         _name,
        WHSReservationHierarchyDescription  _description,
        List                                _orderedListOfDimensionFields)
    {
        return WHSReservationHierarchyCreator::createHierarchyFromPackedList(_name,_description,_orderedListOfDimensionFields.pack());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultWarehouseList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list with a default hierarchy for a warehouse setup where tracking dimensions are specified during warehouse operations such as picking.
    /// </summary>
    /// <returns>
    /// A list with a default hierarchy for a warehouse setup where tracking dimensions are specified during warehouse operations such as picking.
    /// </returns>
    public List getDefaultWarehouseList()
    {
        List            hierarchyList;
        ListEnumerator  le;
        FieldId         fieldId;
        Set             dimensionMustBeIncluded;
        InventDimParm   storageInventDimParm, trackingInventDimParm;

        hierarchyList = this.initialMandatoryFieldsList();

        dimensionMustBeIncluded = this.getSetOfDimensionsThatMustBeIncluded();

        EcoResStorageDimGroupSetupCache::inventDimParmInitAllActivePhysicalDim(storageInventDimParm);
        le = storageInventDimParm.selectedDimFields().getEnumerator();
        while (le.moveNext())
        {
            fieldId = le.current();
            if (this.mustIncludeField(fieldId, dimensionMustBeIncluded))
            {
                hierarchyList.addEnd(fieldId);
            }
        }

        EcoResTrackingDimGroupSetupCache::inventDimParmInitAllActivePhysicalDim(trackingInventDimParm);
        le = trackingInventDimParm.selectedDimFields().getEnumerator();
        while (le.moveNext())
        {
            fieldId = le.current();
            if (this.mustIncludeField(fieldId, dimensionMustBeIncluded))
            {
                hierarchyList.addEnd(fieldId);
            }
        }

        return hierarchyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSetOfDimensionsThatMustBeIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>Set</c> set of fieldId's that must be included in the hierarchy.
    /// </summary>
    /// <returns>
    /// A <c>Set</c> set of fieldId's that must be included in the hierarchy.
    /// </returns>
    protected Set getSetOfDimensionsThatMustBeIncluded()
    {
        ListEnumerator le;
        Set set =  new Set(Types::Integer);

        le = this.initialMandatoryFieldsList().getEnumerator();

        while (le.moveNext())
        {
            set.add(le.current());
        }

        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildDimensionsThatCannotBeAboveFieldId</Name>
				<Source><![CDATA[
    protected Set buildDimensionsThatCannotBeAboveFieldId(FieldId _fieldId)
    {
        Set dimensionsNotAbove;

        switch (_fieldId)
        {
            case fieldNum(InventDim, InventSiteId):
                dimensionsNotAbove = this.dimensionsThatCannotBeAboveField(fieldNum(InventDim, InventLocationId));
                dimensionsNotAbove.add(fieldNum(InventDim, InventLocationId));
                break;

            case fieldNum(InventDim, InventLocationId):
                dimensionsNotAbove = this.dimensionsThatCannotBeAboveField(fieldNum(InventDim, InventStatusId));
                dimensionsNotAbove.add(fieldNum(InventDim, InventStatusId));
                break;

            case fieldNum(InventDim, InventStatusId):
                dimensionsNotAbove = this.dimensionsThatCannotBeAboveField(fieldNum(InventDim, WMSLocationId));
                dimensionsNotAbove.add(fieldNum(InventDim, WMSLocationId));

                // Ensure no tracking dimensions are above Inventory Status
                List trackingDimList = EcoResTrackingDimensionGroup::dimEnabledFieldList();

                if (trackingDimList)
                {
                    ListEnumerator trackingDimListLe = trackingDimList.getEnumerator();

                    while (trackingDimListLe.moveNext())
                    {
                        dimensionsNotAbove.add(trackingDimListLe.current());
                    }
                }

                break;

            case fieldNum(InventDim, InventOwnerId_RU):
                dimensionsNotAbove = this.dimensionsThatCannotBeAboveField(fieldNum(InventDim, WMSLocationId));
                dimensionsNotAbove.add(fieldNum(InventDim, WMSLocationId));
                break;

            case fieldNum(InventDim, WMSLocationId):
                dimensionsNotAbove = this.dimensionsThatCannotBeAboveField(fieldNum(InventDim, LicensePlateId));
                dimensionsNotAbove.add(fieldNum(InventDim, LicensePlateId));
                break;

            case fieldNum(InventDim, InventBatchId):
                dimensionsNotAbove = this.dimensionsThatCannotBeAboveField(fieldNum(InventDim, InventSerialId));
                dimensionsNotAbove.add(fieldNum(InventDim, InventSerialId));
                break;

            default:
                dimensionsNotAbove = new Set(Types::Integer);
        }
        return dimensionsNotAbove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dimensionsThatCannotBeAboveField</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a set of inventory dimension fields IDs that cannot be above
    /// the given field ID in the reservation hierarchy.
    /// </summary>
    /// <param name="_fieldId">
    /// The field ID.
    /// </param>
    /// <returns>
    /// The set of field IDs for the inventory dimensions that cannot be above the specified field ID.
    /// </returns>
    /// <remarks>
    /// The returned set of field IDs is cached in a map for each particular field ID parameter. The set
    /// is build up by using recursion using knowledge about the fields that must be directly below.
    /// </remarks>
    [Hookable(false)]
    protected Set dimensionsThatCannotBeAboveField(FieldId _fieldId)
    {
        Set dimensionsNotAbove;

        if (mapOfDimensionsThatCannotBeAboveFieldID.exists(_fieldId))
        {
            dimensionsNotAbove = mapOfDimensionsThatCannotBeAboveFieldID.lookup(_fieldId);
        }
        else
        {
            dimensionsNotAbove = this.buildDimensionsThatCannotBeAboveFieldId(_fieldId);
            mapOfDimensionsThatCannotBeAboveFieldID.insert(_fieldId, Set::create(dimensionsNotAbove.pack()));
        }

        return dimensionsNotAbove;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialMandatoryFieldsList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a list containing the fields that are mandatory in the hierarchy.
    /// </summary>
    /// <returns>
    /// A list containing the fields that are mandatory in the hierarchy.
    /// </returns>
    protected List initialMandatoryFieldsList()
    {
        List hierarchyList = new List(Types::Integer);

        hierarchyList.addEnd(fieldNum(InventDim,InventSiteId));
        hierarchyList.addEnd(fieldNum(InventDim, InventLocationId));
        hierarchyList.addEnd(fieldNum(InventDim, InventStatusId));
        hierarchyList.addEnd(fieldNum(InventDim, wmsLocationId));
        hierarchyList.addEnd(fieldNum(InventDim, LicensePlateId));

        return hierarchyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertHierarchyElements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>WHSReservationHierarchyElement</c> records for a hierarchy.
    /// </summary>
    /// <param name="_whsReservationHierarchyRecId">
    /// ID of the reservation hierarchy.
    /// </param>
    /// <param name="_orderedListOfDimensionFields">
    /// The list representation of the hierarchy.
    /// </param>
    private void insertHierarchyElements(
        WHSReservationHierarchyRecId    _whsReservationHierarchyRecId,
        List                            _orderedListOfDimensionFields)
    {
        WHSReservationHierarchyElement      whsReservationHierarchyElement;
        WHSReservationHierarchyLevel        level;
        ListEnumerator                      le;
        FieldId                             dimensionFieldId;

        le = _orderedListOfDimensionFields.getEnumerator();

        level = #ITEMHIERARCHYLEVEL + 1; //item is always top level
        ttsbegin;
        while (le.moveNext())
        {
            dimensionFieldId = le.current();
            whsReservationHierarchyElement.clear();
            whsReservationHierarchyElement.ReservationHierarchy         = _whsReservationHierarchyRecId;
            whsReservationHierarchyElement.DimensionFieldId             = dimensionFieldId;
            whsReservationHierarchyElement.ReservationHierarchyLevel    = level;
            whsReservationHierarchyElement.insert();
            level++;
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustIncludeField</Name>
				<Source><![CDATA[
        private boolean mustIncludeField(
        FieldId _inventDimFieldId,
        Set     _setOfIncluded)
    {
        boolean ret = true;

        if (_setOfIncluded.in(_inventDimFieldId))
        {
            return false;
        }

        switch (_inventDimFieldId)
        {
            case fieldNum(InventDim, wmsPalletId):
                ret = false;
                break;
            default:
                ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        mapOfDimensionsThatCannotBeAboveFieldID = new Map(Types::Integer, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateHierarchy</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that a hierarchy can be created based on the arguments.
    /// </summary>
    /// <param name="_reservationHierarchyName">
    /// Name of the hierarchy.
    /// </param>
    /// <param name="_reservationHierarchyList">
    ///  The list representation of the hierarchy.
    /// </param>
    /// <returns>
    /// true if the validation succeded; Otherwise, false.
    /// </returns>
    public boolean validateHierarchy(
        WHSReservationHierarchyName _reservationHierarchyName,
        List                        _reservationHierarchyList)
    {
        boolean ret = true;

        if (!_reservationHierarchyName)
        {
            ret = checkFailed(strFmt("@SYS4080022", fieldId2pname(tableNum(WHSReservationHierarchy), fieldNum(WHSReservationHierarchy,Name))));
        }

        if (WHSReservationHierarchy::findByName(_reservationHierarchyName).RecId)
        {
            ret = checkFailed(strFmt("@WAX4716",_reservationHierarchyName));
        }

        ret = this.checkHierarchyList(_reservationHierarchyList) && ret;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static WHSReservationHierarchyCreator construct()
    {
        return new WHSReservationHierarchyCreator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createHierarchyFromPackedList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a hierarchy in the database.
    /// </summary>
    /// <param name="_name">
    /// Name of the hierarchy.
    /// </param>
    /// <param name="_description">
    /// Description of the hierarchy.
    /// </param>
    /// <param name="_packedOrderedListOfDimensionFields">
    /// The container with the packed list representation of the hierarchy.
    /// </param>
    /// <returns>
    /// The <c>recId</c> ID of the created reservation hierarchy.
    /// </returns>
    protected static WHSReservationHierarchyRecId createHierarchyFromPackedList(
        WHSReservationHierarchyName         _name,
        WHSReservationHierarchyDescription  _description,
        container                           _packedOrderedListOfDimensionFields)
    {
        WHSReservationHierarchy     whsReservationHierarchy;
        List                        hierarchyList;
        ttsbegin;
        whsReservationHierarchy.Name = _name;
        whsReservationHierarchy.Description = _description;
        whsReservationHierarchy.insert();

        hierarchyList = List::create(_packedOrderedListOfDimensionFields);

        WHSReservationHierarchyCreator::construct().insertHierarchyElements(whsReservationHierarchy.RecId, hierarchyList);
        ttscommit;
        return whsReservationHierarchy.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>