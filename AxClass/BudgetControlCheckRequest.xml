<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlCheckRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlCheckRequest</c> class is used to capture the information that is required to
/// check for an available budget that relates an integrator to a budgetary control.
/// </summary>
/// <remarks>
/// This class is extended by subsystems that are integrated with budgetary control.
/// </remarks>
public class BudgetControlCheckRequest implements SysPackable
{
    BudgetControlCategory category;
    userId user;
    date budgetDate;
    CurrencyCode currency;
    BudgetModelId modelId;
    dataAreaId modelDataAreaId;
    BudgetSourceRecId budgetSourceId;
    Num transactionNumber;
    recId simulatedBudgetSourceId;
    boolean isCarryforward;

    Set budgetCheckDetails;
    Set budgetRelievingDetails;
    Set budgetReturnDetails;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        category,
        user,
        budgetDate,
        currency,
        modelId,
        modelDataAreaId,
        budgetSourceId,
        transactionNumber,
        simulatedBudgetSourceId,
        isCarryforward
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addLedgerDimensionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an instance of the <c>BudgetCheckDetail</c> class.
    /// </summary>
    /// <param name="_budgetCheckDetail">
    /// The <c>BudgetCheckDetail</c> object.
    /// </param>
    public final void addLedgerDimensionDetail(
        BudgetCheckDetail _budgetCheckDetail)
    {
        budgetCheckDetails.add(_budgetCheckDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRelievingLedgerDimensionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an instance of the <c>BudgetRelievingDetail</c> class.
    /// </summary>
    /// <param name="_budgetRelievingDetail">
    /// The <c>BudgetRelievingDetail</c> object.
    /// </param>
    /// <exception cref="M:Exception::Error">
    /// Cannot relieve budget funds and perform a budget funds carryforward for a budget source at the same
    /// time.
    /// </exception>
    public final void addRelievingLedgerDimensionDetail(BudgetRelievingDetail _budgetRelievingDetail)
    {
        if (isCarryforward)
        {
            // Performing budget funds carryforward with budget funds relieving or return is not supported.
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        budgetRelievingDetails.add(_budgetRelievingDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReturnLedgerDimensionDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an instance of the <c>BudgetReturnDetail</c> class.
    /// </summary>
    /// <param name="_budgetReturnDetail">
    /// The <c>BudgetReturnDetail</c> object.
    /// </param>
    public final void addReturnLedgerDimensionDetail(
        BudgetReturnDetail _budgetReturnDetail)
    {
        budgetReturnDetails.add(_budgetReturnDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>areAnyDetailsAdded</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether there are any details added for the budget control check request.
    /// </summary>
    /// <returns>
    ///     true if there are any details added for the budget control check request; otherwise, false.
    /// </returns>
    public boolean areAnyDetailsAdded()
    {
        return (budgetCheckDetails.elements() > 0 ||
                budgetRelievingDetails.elements() > 0 ||
                BudgetReturnDetails.elements() > 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        user = '';
        budgetDate = dateNull();
        currency = '';
        modelId = '';
        modelDataAreaId = '';
        budgetSourceId = 0;
        transactionNumber = '';
        isCarryforward = false;

        budgetCheckDetails = new Set(Types::Class);
        budgetReturnDetails = new Set(Types::Class);
        budgetRelievingDetails = new Set(Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public final container pack()
    {
        // Pack all class member variables - maps must be packed & added separately
        return [#CurrentVersion,
                    [#CurrentList,
                        budgetCheckDetails.pack(),
                        budgetRelievingDetails.pack(),
                        budgetReturnDetails.pack()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetControlCategory</Name>
				<Source><![CDATA[
        public final BudgetControlCategory parmBudgetControlCategory(BudgetControlCategory _budgetControlCategory = category)
    {
        category = _budgetControlCategory;

        return category;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetDate</Name>
				<Source><![CDATA[
        public final date parmBudgetDate(date _budgetDate = budgetDate)
    {
        budgetDate = _budgetDate;

        return budgetDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetModelDataAreaId</Name>
				<Source><![CDATA[
        public final dataAreaId parmBudgetModelDataAreaId()
    {
        return modelDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetModelId</Name>
				<Source><![CDATA[
        public final BudgetModelId parmBudgetModelId()
    {
        return modelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetSourceId</Name>
				<Source><![CDATA[
        public final BudgetSourceRecId parmBudgetSourceId(BudgetSourceRecId _budgetSourceId = budgetSourceId)
    {
        budgetSourceId = _budgetSourceId;

        return budgetSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsCarryforward</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets or sets the <c>IsCarryforward</c> parameter.
    /// </summary>
    /// <param name="_isCarryforward">
    ///    The value to set.
    /// </param>
    /// <returns>
    ///    The value of the <c>IsCarryforward</c> parameter.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    Cannot relieve budget funds and perform budget funds carryforward
    ///    for a budget source at the same time.
    /// </exception>
    public final boolean parmIsCarryforward(boolean _isCarryforward = isCarryforward)
    {
        isCarryforward = _isCarryforward;

        if (isCarryforward && budgetRelievingDetails.elements() > 0)
        {
            // Performing budget funds carryforward with budget funds relieving or return is not supported.
            throw error(Error::wrongUseOfFunction(funcname()));
        }

        return isCarryforward;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDetails</Name>
				<Source><![CDATA[
        public final Set parmLedgerDimensionDetails()
    {
        return budgetCheckDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRelievingLedgerDimensionDetails</Name>
				<Source><![CDATA[
        public final Set parmRelievingLedgerDimensionDetails()
    {
        return budgetRelievingDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReturnLedgerDimensionDetails</Name>
				<Source><![CDATA[
        public final Set parmReturnLedgerDimensionDetails()
    {
        return budgetReturnDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSimulatedBudgetSourceId</Name>
				<Source><![CDATA[
        public final BudgetSourceRecId parmSimulatedBudgetSourceId(BudgetSourceRecId _simulatedBudgetSourceId = simulatedBudgetSourceId)
    {
        simulatedBudgetSourceId = _simulatedBudgetSourceId;

        return simulatedBudgetSourceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionNumber</Name>
				<Source><![CDATA[
        public final Num parmTransactionNumber(Num _transactionNumber = transactionNumber)
    {
        transactionNumber = _transactionNumber;

        return transactionNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUser</Name>
				<Source><![CDATA[
        public final userId parmUser(userId _user = user)
    {
        user = _user;

        return user;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetModel</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the budget model.
    /// </summary>
    /// <param name="_modelId">
    ///    The budget model identifier.
    /// </param>
    /// <param name="_modelDataAreaId">
    ///    The budget model data area.
    /// </param>
    public final void setBudgetModel(
        BudgetModelId _modelId,
        dataAreaId _modelDataAreaId)
    {
        modelId = _modelId;
        modelDataAreaId = _modelDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public final boolean unpack(container _packedBudgetControlCheckRequest)
    {
        int version = conpeek(_packedBudgetControlCheckRequest, 1);
        container packedClassMembers;
        container packedBudgetCheckDetails;
        container packedBudgetRelievingDetails;
        container packedBudgetReturnDetails;

        switch (version)
        {
            case #CurrentVersion:
                // Extract the packed values.
                [version, packedClassMembers] = _packedBudgetControlCheckRequest;

                // Extract the #CurrentList and packed maps.
                [#CurrentList,
                    packedBudgetCheckDetails,
                    packedBudgetRelievingDetails,
                    packedBudgetReturnDetails] = packedClassMembers;

                break;

            default:
                return false;
        }

        if (packedBudgetCheckDetails != connull())
        {
            budgetCheckDetails = Set::create(packedBudgetCheckDetails);
        }

        if (packedBudgetRelievingDetails != connull())
        {
            budgetRelievingDetails = Set::create(packedBudgetRelievingDetails);
        }

        if (packedBudgetReturnDetails != connull())
        {
            budgetReturnDetails = Set::create(packedBudgetReturnDetails);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static BudgetControlCheckRequest construct()
    {
        return new BudgetControlCheckRequest();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>BudgetControlCheckRequest</c> class from a packed copy.
    /// </summary>
    /// <param name="_packedBudgetControlCheckRequest">
    /// The packed instance of the <c>BudgetControlCheckRequest</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>BudgetControlCheckRequest</c> class.
    /// </returns>
    public static BudgetControlCheckRequest create(container _packedBudgetControlCheckRequest)
    {
        BudgetControlCheckRequest checkRequest = new BudgetControlCheckRequest();

        checkRequest.unpack(_packedBudgetControlCheckRequest);

        return checkRequest;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isControlConfigured</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the system has configuration enabled for budgetary control.
    /// </summary>
    /// <returns>
    ///    true if the <c>LedgerAdv2BudgetCtrl</c> configuration key is enabled; otherwise, false.
    /// </returns>
    public static boolean isControlConfigured()
    {
        return BudgetControlConfiguration::isControlConfigured();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>