<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckParameters</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class is used to store values needed when performing the validation that a license plate only have physical inventory on a single location.
/// </summary>
public final class WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckParameters
{
    private Set     excludedWarehouses;
    private boolean excludeUserLocations;
    private Set     nestedLicensePlates;
    private InventLocationId singleExcludedInventLocationId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public static WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckParameters construct()
    {
        return new WHSLicensePlateOnMultipleLocationFinalOnhandUpdateCheckParameters();
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeWarehouse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Stores that a warehouse should be excluded from the validation.
    /// </summary>
    /// <param name = "_inventLocationIdExcluded">The Id of the warehouse.</param>
    [Hookable(false)]
    internal void excludeWarehouse(InventLocationId _inventLocationIdExcluded)
    {
        if (!_inventLocationIdExcluded)
        {
            excludedWarehouses = null;
            singleExcludedInventLocationId = '';
        }
        else if (!singleExcludedInventLocationId && _inventLocationIdExcluded)
        {
            singleExcludedInventLocationId = _inventLocationIdExcluded;
        }
        else if (_inventLocationIdExcluded != singleExcludedInventLocationId) //second excluded location
        {
            if (!excludedWarehouses)
            {
                excludedWarehouses = new Set(Types::String);
                //when we have more warehouses excluded we need to use the Set to track them
                excludedWarehouses.add(singleExcludedInventLocationId);
                singleExcludedInventLocationId = '';
            }

            excludedWarehouses.add(_inventLocationIdExcluded);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSingleExcludesWarehouseId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Id of a single warehouse that should be excluded from the validation.
    /// If multiple warehouses excluded the value is blank.
    /// </summary>
    /// <returns>A Id of a single warehouse.</returns>
    [Hookable(false)]
    public InventLocationId parmSingleExcludesWarehouseId()
    {
        return singleExcludedInventLocationId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludedWarehouses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>Set</c> containing Id's of excluded warehouses.
    /// </summary>
    /// <returns>A <c>Set</c> containing Id's of excluded warehouses.</returns>
    /// <remarks>This set is only populated if multiple warehouses are excluded</remarks>
    [Hookable(false)]
    public Set parmExcludedWarehouses()
    {
        return excludedWarehouses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcludeUserLocations</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns Boolean value if user location must be excluded.
    /// </summary>
    /// <param name = "_excludeUserLocations">Boolean value excluding the user location.</param>
    /// <returns>true if user location must be excluded; otherwise, false.</returns>
    [Hookable(false)]
    public boolean parmExcludeUserLocations(boolean _excludeUserLocations = excludeUserLocations)
    {
        excludeUserLocations = _excludeUserLocations;
        return excludeUserLocations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearExcludedWarehouses</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the <c>Set</c> containing Id's of excluded warehouses.
    /// </summary>
    [Hookable(false)]
    internal void clearExcludedWarehouses()
    {
        excludedWarehouses = null;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>