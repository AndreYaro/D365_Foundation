<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerCovTotal</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerCovTotal</c> class creates a dialog for performing
/// cash flow forecasting calculations.
/// </summary>
public class LedgerCovTotal extends RunBaseBatch implements BatchRetryable
{
    protected AllNew allNew;
    private RecId processExecutionSourceLinkRecId;
    private boolean isChildBatchTask;
    private boolean isChildBatchFinalTask;
    private ClassId ledgerCovIDocumentClassId;
    private TransDate fromCov;
    private boolean isAutomation;
    private DialogField dialogAllNew;
    private LedgerCovTotalProcessAutomationRuntimeMonitor runtimeMonitor;

    #define.CurrentVersion(3)

    #LocalMacro.CurrentList
        allNew,
        isChildBatchTask,
        ledgerCovIDocumentClassId,
        isChildBatchFinalTask,
        fromCov
    #EndMacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the class is shown in the list of <c>Journal</c> types.
    /// </summary>
    /// <returns>
    /// true if the class is shown in the list of <c>Journal</c> types; otherwise, false.
    /// </returns>
    /// <remarks>
    /// A class that can be used in a batch journal is a class for which the same parameters can be used
    /// repeatedly. The dialog can be shown and the parameters can be changed but parameters of some
    /// classes might build on data that is only valid for a short time. Not all classes can be run two
    /// times with the same parameters. If the <c>canGoBatch</c> method returns false, this method will not
    /// have any effect.
    /// </remarks>
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase("@SYS23118", this);

        FormBuildGroupControl formBuildGroupControl = dialog.curFormGroup();
        formBuildGroupControl.columns(1);

        TransDate lastTransDateCashflowWasRun = this.getLastTransDateCashflowWasRun();
        if (lastTransDateCashflowWasRun != dateNull())
        {
            DialogField dialogLastTransDateCashFlowWasRun = dialog.addFieldValue(
                extendedTypeStr(TransDate),
                lastTransDateCashflowWasRun,
                "@CashManagement:CashBankMgmt_CashFlow_DialogField_LastTransDateCashFlowWasRun");

            dialogLastTransDateCashFlowWasRun.enabled(false);
        }

        if (LedgerCovTotalDisplayAllNewOnDialogFlight::instance().isEnabled())
        {
            dialogAllNew = dialog.addFieldValue(
                enumstr(AllNew),
                allNew,
                "@CashManagement:CashBankMgmt_CashFlow_DialogField_CalculationMethod",
                "@FieldDescriptions_CashAndBankManagement:LedgerCovTotal_CalculationMethod");
        }
        else
        {
            dialogAllNew = dialog.addField(
                enumstr(AllNew),
                "@CashManagement:CashBankMgmt_CashFlow_DialogField_CalculationMethod",
                "@FieldDescriptions_CashAndBankManagement:LedgerCovTotal_CalculationMethod");
        }

        this.batchInfo().parmBatchExecute(NoYes::Yes);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLastTransDateCashflowWasRun</Name>
				<Source><![CDATA[
    private TransDate getLastTransDateCashflowWasRun()
    {
        LedgerCov ledgerCov;

        select firstonly TransDate from ledgerCov 
            where ledgerCov.TransTableId == tableNum(GeneralJournalAccountEntry)
				&& ledgerCov.TransRecId == 0
				&& ledgerCov.IsBeginningBalance == NoYes::Yes;

        return ledgerCov.TransDate;
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        allNew = dialogAllNew.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllNew</Name>
				<Source><![CDATA[
    public AllNew parmAllNew(AllNew _allNew = allNew)
    {
        allNew = _allNew;
        return allNew;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsChildBatchTask</Name>
				<Source><![CDATA[
    public boolean parmIsChildBatchTask(boolean _isChildBatchTask = isChildBatchTask)
    {
        isChildBatchTask = _isChildBatchTask;
        return isChildBatchTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProcessExecutionSourceLinkRecId</Name>
				<Source><![CDATA[
    public RecId parmProcessExecutionSourceLinkRecId(RecId _processExecutionSourceLinkRecId = processExecutionSourceLinkRecId)
    {
        processExecutionSourceLinkRecId = _processExecutionSourceLinkRecId;
        return processExecutionSourceLinkRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsAutomation</Name>
				<Source><![CDATA[
    public boolean parmIsAutomation(boolean _isAutomation = isAutomation)
    {
        isAutomation = _isAutomation;
        return isAutomation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsChildBatchFinalTask</Name>
				<Source><![CDATA[
    public boolean parmIsChildBatchFinalTask(boolean _isChildBatchFinalTask = isChildBatchFinalTask)
    {
        isChildBatchFinalTask = _isChildBatchFinalTask;
        return isChildBatchFinalTask;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerCovIDocumentClassId</Name>
				<Source><![CDATA[
    public ClassId parmLedgerCovIDocumentClassId(ClassId _ledgerCovIDocumentClassId = ledgerCovIDocumentClassId)
    {
        ledgerCovIDocumentClassId = _ledgerCovIDocumentClassId;
        return ledgerCovIDocumentClassId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container packed = [#CurrentVersion, #CurrentList];
        packed = this.appendVariableToPack(packed, varStr(isAutomation), isAutomation);
        packed = this.appendVariableToPack(packed, varStr(processExecutionSourceLinkRecId), processExecutionSourceLinkRecId);
        return packed;
    }

]]></Source>
			</Method>
			<Method>
				<Name>appendVariableToPack</Name>
				<Source><![CDATA[
    private container appendVariableToPack(container _pack, str _variableName, anytype _value)
    {
        XppPrePostArgs packArgs = this.createXppPrePostArgsWithPack(_pack);
        SysPackExtensions::pack(packArgs, this.getVariablePackKey(_variableName), [_value]);
        return packArgs.getReturnValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createXppPrePostArgsWithPack</Name>
				<Source><![CDATA[
    private XppPrePostArgs createXppPrePostArgsWithPack(container _pack)
    {
        XppPrePostArgs prePostArgs = new XppPrePostArgs(_pack, '',  XppEventHandlerCalledWhen::Post);
        prePostArgs.setReturnValue(_pack);
        return prePostArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVariablePackKey</Name>
				<Source><![CDATA[
    private ClassName getVariablePackKey(str _variableName)
    {
        return classStr(LedgerCovTotal) + '.' + _variableName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the main processing for the <c>LedgerCovTotal</c> class.
    /// </summary>
    public void run()
    {
        #OCCRetryCount

        System.Exception exception;

        if (isChildBatchTask)
        {
            SysInstrumentationProgressLogger progressLogger = SysInstrumentationProgressLogger::createLogger(CustVendInstrumentationConstants::SourceNameCashFlowForecasting, CustVendInstrumentationConstants::InstrumentationNamespace);

            using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextForStage(CustVendInstrumentationConstants::CashFlowCalculateCashFlowForecast))
            {
                activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyCashFlowAllNew, enum2Symbol(enumNum(AllNew), allNew));
                activityContext.addCustomProperty(CustVendInstrumentationConstants::BatchJobId, int642Str(this.parmCurrentBatch().BatchJobId));
                activityContext.addCustomProperty(CustVendInstrumentationConstants::CurrentLedger, int642Str(Ledger::current()));

                if (isChildBatchFinalTask)
                {
                    try
                    {
                        activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyCashFlowDocument, CustVendInstrumentationConstants::CashFlowProcessFinalTask);

                        ttsbegin;
                        this.processFinalTasks();
                        ttscommit;
                    }
                    catch (exception)
                    {
                        this.logMessage(Exception::Internal, strFmt("@CashFlowManagement:LedgerCovTotalUnknownError", exception.Message));
                        throw;
                    }
                }
                else
                {
                    if (this.ledgerCovIDocumentClassId)
                    {
                        this.processChildBatchTask(progressLogger, activityContext);
                    }
                }
            }

            return;
        }

        LedgerCovAvgBatchControllerMaintainer::run();

        fromCov = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        if (this.isInBatch())
        {
            ttsbegin;

            BatchHeader batchHeader = BatchHeader::construct(this.parmCurrentBatch().BatchJobId);

            // Add a final task based on the settings from the parent batch task.
            LedgerCovTotal childLedgerCovTotalFinal = new LedgerCovTotal();
            childLedgerCovTotalFinal.unpack(this.pack());
            childLedgerCovTotalFinal.parmIsChildBatchTask(true);
            childLedgerCovTotalFinal.parmIsChildBatchFinalTask(true);
            childLedgerCovTotalFinal.batchInfo().parmCaption(strFmt("@SYS4080918", this.parmCurrentBatch().Caption));

            batchHeader.addRuntimeTask(childLedgerCovTotalFinal, this.parmCurrentBatch().RecId);

            if (this.parmIsAutomation())
            {
                runtimeMonitor = this.createRuntimeMonitorTask(batchHeader);
                batchHeader.addTask(runtimeMonitor);
            }

            Array providers = this.getAllDocumentProviders();
            for (int i = 1; i <= providers.lastIndex(); i++)
            {
                LedgerCovIDocument iDocument = providers.value(i);

                LedgerCovTotal childLedgerCovTotal = new LedgerCovTotal();
                childLedgerCovTotal.unpack(this.pack());
                childLedgerCovTotal.parmIsChildBatchTask(true);
                childLedgerCovTotal.parmLedgerCovIDocumentClassId(classIdGet(iDocument));

                childLedgerCovTotal.batchInfo().parmCaption(strFmt("@CashManagement:CashFlowForecastingCalculating", curExt(), iDocument.getDocumentName()));

                batchHeader.addRuntimeTask(childLedgerCovTotal, this.parmCurrentBatch().RecId);
                batchHeader.addDependency(childLedgerCovTotalFinal, childLedgerCovTotal);

                if (this.parmIsAutomation())
                {
                    BatchHeader.addDependency(runtimeMonitor, childLedgerCovTotal,  BatchDependencyStatus::FinishedOrError);
                }
            }

            batchHeader.save();

            ttscommit;
        }
        else
        {
            Array providers = this.getAllDocumentProviders();
            for (int i = 1; i <= providers.lastIndex(); i++)
            {
                Object document = providers.value(i);

                LedgerCovIDocument iDocument = document;

                SysDictClass sysDictClass = this.constructSysDictClass(classIdGet(document));
                boolean doesImplementLedgerCovIDocumentSingleTransactionScope = this.doesImplementLedgerCovIDocumentSingleTransactionScope(sysDictClass);

                if (doesImplementLedgerCovIDocumentSingleTransactionScope)
                {
                    this.initLedgerCovContext(document);
                    iDocument.generateCashFlow(allNew);
                }
                else
                {
                    ttsbegin;
                    iDocument.generateCashFlow(allNew);
                    ttscommit;
                }
            }

            ttsbegin;
            this.processFinalTasks();
            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processChildBatchTask</Name>
				<Source><![CDATA[
    private void processChildBatchTask(SysInstrumentationProgressLogger _progressLogger, SysInstrumentationActivityContext _activityContext)
    {
        #OCCRetryCount
        System.Exception exception;

        SysDictClass sysDictClass = this.constructSysDictClass(this.ledgerCovIDocumentClassId);
        Object document = sysDictClass.makeObject();
        LedgerCovIDocument iDocument = document;
        boolean doesImplementLedgerCovIDocumentSingleTransactionScope = this.doesImplementLedgerCovIDocumentSingleTransactionScope(sysDictClass);

        _activityContext.addCustomProperty(CustVendInstrumentationConstants::CustomPropertyCashFlowDocument, iDocument.getDocumentName());

        if (doesImplementLedgerCovIDocumentSingleTransactionScope)
        {
            this.initLedgerCovContext(document);
            iDocument.generateCashFlow(allNew);
        }
        else
        {
            int BackOffWait = RandomGenerate::construct().randomInt(50, 1000);

            try
            {
                ttsbegin;
                iDocument.generateCashFlow(allNew);
                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.logMessage(Exception::Deadlock, "@CashFlowManagement:LedgerCovTotalExecutionDeadlock");
                    throw Exception::Deadlock;
                }
                else
                {
                    _progressLogger.logRetryOnDeadlock();

                    sleep(xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        this.logMessage(Exception::UpdateConflictNotRecovered, "@CashFlowManagement:LedgerCovTotalForecastUpdateConflict");
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        _progressLogger.logRetryOnUpdateConflict();

                        sleep(xSession::currentRetryCount() * BackOffWait);
                        retry;
                    }
                }
                else
                {
                    this.logMessage(Exception::UpdateConflict, "@CashFlowManagement:LedgerCovTotalForecastUpdateConflict");
                    throw Exception::UpdateConflict;
                }
            }
            catch (Exception::DuplicateKeyException)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        this.logMessage(Exception::DuplicateKeyExceptionNotRecovered, "@CashFlowManagement:LedgerCovTotalDuplicateKeyError");
                        throw Exception::DuplicateKeyExceptionNotRecovered;
                    }
                    else
                    {
                        sleep(xSession::currentRetryCount() * BackOffWait);
                        retry;
                    }
                }
                else
                {
                    this.logMessage(Exception::DuplicateKeyException, "@CashFlowManagement:LedgerCovTotalDuplicateKeyError");
                    throw Exception::DuplicateKeyException;
                }
            }
            catch (exception)
            {
                this.logMessage(Exception::Internal, strFmt("@CashFlowManagement:LedgerCovTotalUnknownError",  exception.Message));
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructSysDictClass</Name>
				<Source><![CDATA[
    private SysDictClass constructSysDictClass(ClassId _classId)
    {
        return new SysDictClass(_classId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doesImplementLedgerCovIDocumentSingleTransactionScope</Name>
				<Source><![CDATA[
    private boolean doesImplementLedgerCovIDocumentSingleTransactionScope(SysDictClass _sysDictClass)
    {
        return _sysDictClass.isImplementing(classNum(LedgerCovIDocumentSingleTransactionScope));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerCovContext</Name>
				<Source><![CDATA[
    private void initLedgerCovContext(Object _documentClass)
    {
        LedgerCovIDocumentSingleTransactionScope iDocumentSingleTransactionScope = _documentClass;

        LedgerCovContext context = LedgerCovContext::construct();
        context.parmProcessExecutionSourceLinkRecId(this.processExecutionSourceLinkRecId);
        iDocumentSingleTransactionScope.initLedgerCovContext(context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalances</Name>
				<Source><![CDATA[
    private void calculateBalances()
    {
        RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();

        date periodOpenDate = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(calendarRecId, fromCov);
        date cashFlowFutureDate = dateMax();

        // Aggregate historical cashflow
        CashFlowForecastProcessBalanceContract actualsContract = CashFlowForecastProcessBalanceContract::construct();
        actualsContract.periodOpenDate = periodOpenDate;
        actualsContract.periodCloseDate = fromCov;
        actualsContract.deleteMode = CashFlowProcessBalanceDeleteMode::DeleteAll;

        CashFlowForecastProcessBalance::run(actualsContract, classStr(CashFlowForecastProcessActualsBalanceStrategy));

        // Aggregate future cashflow
        CashFlowForecastProcessBalanceContract futuresContract = CashFlowForecastProcessBalanceContract::construct();
        futuresContract.periodOpenDate = fromCov;
        futuresContract.periodCloseDate = cashFlowFutureDate;
        futuresContract.deleteMode = CashFlowProcessBalanceDeleteMode::DeleteAll;

        CashFlowForecastProcessBalance::run(futuresContract, classStr(CashFlowForecastProcessFutureBalanceStrategy));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAllDocumentProviders</Name>
				<Source><![CDATA[
    protected Array getAllDocumentProviders()
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();

        return SysPluginFactory::Instances(
            identifierStr(Dynamics.AX.Application),
            classStr(LedgerCovIDocument), metadataCollection);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the batch task is run on the server or on a client.
    /// </summary>
    /// <returns>
    /// true if the task is run on the server; otherwise, false.
    /// </returns>
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer version = conpeek(packedClass, 1);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                isAutomation = this.extractPackedVariable(packedClass, varStr(isAutomation));
                processExecutionSourceLinkRecId = this.extractPackedVariable(packedClass, varStr(processExecutionSourceLinkRecId));
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>extractPackedVariable</Name>
				<Source><![CDATA[
    private anytype extractPackedVariable(container _pack, str _variableName)
    {
        anytype value;
        [value] = SysPackExtensions::unpack(this.createXppPrePostArgsWithPack(_pack), this.getVariablePackKey(_variableName));
        return value;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS23118";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        LedgerCovTotal ledgerCovTotal = new LedgerCovTotal();

        if (ledgerCovTotal.prompt())
        {
            ledgerCovTotal::runIL(ledgerCovTotal.pack());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runIL</Name>
				<Source><![CDATA[
    private static container runIL(container _pack)
    {
        LedgerCovTotal ledgerCovTotal = new LedgerCovTotal();
        ledgerCovTotal.unpack(_pack);
        ledgerCovTotal.runOperation();
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFinalTasks</Name>
				<Source><![CDATA[
    private void processFinalTasks()
    {
        this.deleteBeginningBalances();
        this.determineBeginningBalances();

        this.deleteLedgerCovBankAccounts();
        this.createLedgerCovBankAccounts();

        this.deleteZeroAmountsForMainAccountAndTransDate();
        this.generateZeroAmountsForMainAccountAndTransDate();

        this.calculateBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteZeroAmountsForMainAccountAndTransDate</Name>
				<Source><![CDATA[
    private void deleteZeroAmountsForMainAccountAndTransDate()
    {
        LedgerCov ledgerCov;

        delete_from ledgerCov where LedgerCov.TransTableId == tableNum(LedgerCov);
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateZeroAmountsForMainAccountAndTransDate</Name>
				<Source><![CDATA[
    private void generateZeroAmountsForMainAccountAndTransDate()
    {
        LedgerLiquidity ledgerLiquidity;
        LedgerCov ledgerCov;

        TransDate minTransDate;
        select minof(TransDate)
            from ledgerCov
            join ledgerLiquidity
                where ledgerLiquidity.MainAccount == ledgerCov.MainAccount
					&& ledgerCov.TransTableId == tableNum(GeneralJournalAccountEntry)
					&& ledgerCov.TransRecId == 0
                    && ledgerCov.IsBeginningBalance == NoYes::Yes;

        if (ledgerCov.TransDate == Global::dateNull())
        {
            minTransDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            minTransDate = ledgerCov.TransDate;
        }

        TransDate maxTransDate;
        select maxof(TransDate)
            from ledgerCov
            join ledgerLiquidity
                where ledgerLiquidity.MainAccount == ledgerCov.MainAccount
                    && ledgerCov.TransTableId != tableNum(LedgerCov);
        if (ledgerCov.TransDate == Global::dateNull())
        {
            maxTransDate = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());
        }
        else
        {
            maxTransDate = ledgerCov.TransDate;
        }

        int dateCount;
        Set allDates = new Set(Types::Date);
        TransDate currentDate = minTransDate;
        while (currentDate <= maxTransDate)
        {
            allDates.add(currentDate);
            currentDate++;
            dateCount++;

            if (dateCount > 365)
            {
                break;
            }
        }

        Set allMainAccountsAndCurrencies = new Set(Types::Container);
        while select MainAccount, CurrencyCode from ledgerCov
            group by ledgerCov.MainAccount, ledgerCov.CurrencyCode
            join ledgerLiquidity
                where ledgerLiquidity.MainAccount == ledgerCov.MainAccount
        {
            allMainAccountsAndCurrencies.add([ledgerCov.MainAccount, ledgerCov.CurrencyCode]);
        }

        Set allMainAccountTransDateCurrencyCodeHashes = new Set(Types::Integer);
        while select MainAccount, TransDate, CurrencyCode from ledgerCov
            group by ledgerCov.MainAccount, ledgerCov.TransDate, LedgerCov.CurrencyCode
            join ledgerLiquidity
                where ledgerLiquidity.MainAccount == ledgerCov.MainAccount
        {
            allMainAccountTransDateCurrencyCodeHashes.add(this.getHashKeyForMainAccountTransDateCurrencyCode(ledgerCov.MainAccount, ledgerCov.TransDate, ledgerCov.CurrencyCode));
        }

        BankAccountMainAccount bankAccountMainAccount = BankAccountMainAccount::construct();
        RecordInsertList ledgerCovRecordInsertList = new RecordInsertList(tableNum(LedgerCov), true, true, true, true, true);

        SetEnumerator allMainAccountsAndCurrenciesEnumerator = allMainAccountsAndCurrencies.getEnumerator();
        while (allMainAccountsAndCurrenciesEnumerator.moveNext())
        {
            MainAccountRecId currentMainAccount;
            CurrencyCode currentCurrencyCode;

            [currentMainAccount, currentCurrencyCode] = allMainAccountsAndCurrenciesEnumerator.current();

            SetEnumerator allDatesEnumerator = allDates.getEnumerator();
            while (allDatesEnumerator.moveNext())
            {
                currentDate = allDatesEnumerator.current();

                int hashKeyForMainAccountTransDateCurrencyCode = this.getHashKeyForMainAccountTransDateCurrencyCode(currentMainAccount, currentDate, currentCurrencyCode);

                if (!allMainAccountTransDateCurrencyCodeHashes.in(hashKeyForMainAccountTransDateCurrencyCode))
                {
                    ledgerCov.clear();
                    ledgerCov.TransTableId = tableNum(LedgerCov);
                    ledgerCov.MainAccount = currentMainAccount;
                    ledgerCov.TransDate = currentDate;
                    ledgerCov.CurrencyCode = currentCurrencyCode;
                    ledgerCov.BankAccount = bankAccountMainAccount.findBankAccountForMainAccount(currentMainAccount);

                    ledgerCovRecordInsertList.add(LedgerCov);
                }
            }
        }

        ledgerCovRecordInsertList.insertDatabase();

    }

]]></Source>
			</Method>
			<Method>
				<Name>getHashKeyForMainAccountTransDateCurrencyCode</Name>
				<Source><![CDATA[
    private int getHashKeyForMainAccountTransDateCurrencyCode(MainAccountRecId _mainAccountRecId, TransDate _transDate, CurrencyCode _currencyCode)
    {
        str hashValue = int642Str(_mainAccountRecId)
                + date2Str(_transDate, 321, DateDay::Digits2, DateSeparator::Hyphen, DateMonth::Digits2, DateSeparator::Hyphen, DateYear::Digits4)
                + _currencyCode;

        int hashKey = strHash(hashValue);

        return hashKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLedgerCovBankAccounts</Name>
				<Source><![CDATA[
    private void deleteLedgerCovBankAccounts()
    {
        LedgerCovBankAccount ledgerCovBankAccount;

        delete_from ledgerCovBankAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLedgerCovBankAccounts</Name>
				<Source><![CDATA[
    private void createLedgerCovBankAccounts()
    {
        BankAccountMainAccountView bankAccountMainAccountView;
        LedgerCovBankAccount ledgerCovBankAccount;

        insert_recordset ledgerCovBankAccount
            (AccountID)
            select BankAccount 
                from bankAccountMainAccountView
                where bankAccountMainAccountView.BankAccountCompany == curExt();

        ledgerCovBankAccount.AccountID = strRep(' ', 10);
        ledgerCovBankAccount.insert();

    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBeginningBalances</Name>
				<Source><![CDATA[
    private void deleteBeginningBalances()
    {
        LedgerCov ledgerCov;

        delete_from ledgerCov 
            where ledgerCov.TransTableId == tableNum(GeneralJournalAccountEntry)
				&& ledgerCov.TransRecId == 0
                && ledgerCov.isBeginningBalance == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineBeginningBalances</Name>
				<Source><![CDATA[
    private void determineBeginningBalances()
    {
        LedgerCov ledgerCov;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        GeneralJournalEntry generalJournalEntry;
        LedgerLiquidity ledgerLiquidity;
        TransDate fromReal;
        TransDate toReal;
        RecId calendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        BankAccountMainAccount bankAccountMainAccount = BankAccountMainAccount::construct();

        fromReal = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(calendarRecId, fromCov);
        toReal = fromCov;

        CurrencyCode enterpriseCurrencyCode = SystemParameters::find().SystemCurrencyCode;
        CurrencyCode companyCurrencyCode = Ledger::accountingCurrency();
        CurrencyCode previousCurrencyCode;

        while select ledgerLiquidity
        {
            ledgerCov.clear();
            previousCurrencyCode = '';
 
            while select TransactionCurrencyCode, MainAccount, sum(TransactionCurrencyAmount), sum(AccountingCurrencyAmount)
                from generalJournalAccountEntry
                order by generalJournalAccountEntry.MainAccount, generalJournalAccountEntry.TransactionCurrencyCode, generalJournalEntry.AccountingDate
                group by generalJournalAccountEntry.MainAccount, generalJournalAccountEntry.TransactionCurrencyCode, generalJournalEntry.AccountingDate
                    join RecId, AccountingDate from generalJournalEntry
                        where generalJournalAccountEntry.GeneralJournalEntry == generalJournalEntry.RecId
                            && generalJournalAccountEntry.MainAccount == ledgerLiquidity.MainAccount
                            && generalJournalAccountEntry.PostingType != LedgerPostingType::TransferOpeningClosing
                            && generalJournalEntry.AccountingDate >= fromReal
                            && generalJournalEntry.AccountingDate <= toReal
                            && generalJournalEntry.Ledger == Ledger::current()
            {

                if (previousCurrencyCode != '' && previousCurrencyCode != generalJournalAccountEntry.TransactionCurrencyCode)
                {
                    ledgerCov.insert();
                    ledgerCov.clear();
                }

                CurrencyExchangeHelper currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::current(), generalJournalEntry.AccountingDate);

                ledgerCov.TransDate = toReal;
                ledgerCov.TransTableId = generalJournalAccountEntry.TableId;
                ledgerCov.IsBeginningBalance = NoYes::Yes;
                ledgerCov.MainAccount = generalJournalAccountEntry.MainAccount;
                ledgerCov.CurrencyCode = generalJournalAccountEntry.TransactionCurrencyCode;

                ledgerCov.BankAccount = bankAccountMainAccount.findBankAccountForMainAccount(ledgerCov.MainAccount);

                ledgerCov.AmountCur += generalJournalAccountEntry.TransactionCurrencyAmount;
                ledgerCov.AmountMST += generalJournalAccountEntry.AccountingCurrencyAmount;

                AmountCur enterpriseCurrencyAmount = LedgerCov::determineEnterpriseCurrencyAmountWithCurrentRate(
                    ledgerCov.CurrencyCode,
                    generalJournalAccountEntry.TransactionCurrencyAmount,
                    companyCurrencyCode,
                    generalJournalAccountEntry.AccountingCurrencyAmount,
                    enterpriseCurrencyCode);
                ledgerCov.EnterpriseCurrencyAmount += enterpriseCurrencyAmount;

                ledgerCov.BankAccountCurrencyAmount += LedgerCov::determineBankAccountCurrencyAmountFromTransactionDate(
                    bankAccountMainAccount,
                    currencyExchangeHelper,
                    ledgerCov.MainAccount,
                    ledgerCov.CurrencyCode,
                    generalJournalAccountEntry.TransactionCurrencyAmount,
                    companyCurrencyCode,
                    generalJournalAccountEntry.AccountingCurrencyAmount);

                previousCurrencyCode = generalJournalAccountEntry.TransactionCurrencyCode;

            }

            if (previousCurrencyCode != '')
            {
                ledgerCov.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromAutomationExecutionContract</Name>
				<Source><![CDATA[
    internal static LedgerCovTotal constructFromAutomationExecutionContract(LedgerCovTotalProcessAutomationExecutionContract _automationExecutionContract)
    {
        LedgerCovTotal ledgerCovTotal = new LedgerCovTotal();
        ledgerCovTotal.parmAllNew(_automationExecutionContract.getForecastCalculationMethod());
        ledgerCovTotal.parmIsAutomation(true);
        ledgerCovTotal.parmProcessExecutionSourceLinkRecId(_automationExecutionContract.getProcessExecutionSourceLinkRecId());
        ledgerCovTotal.parmInBatch(true);

        return ledgerCovTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logMessage</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected void logMessage(Exception _exceptionType, SysInfoLogStr _message, URL _helpUrl = '', SysInfoAction _sysInfoAction = null)
    {
        if (this.parmIsAutomation() && this.parmProcessExecutionSourceLinkRecId() != 0)
        {
            ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::construct();
            messageLogItem.parmException(_exceptionType);
            messageLogItem.parmProcessExecutionSourceLink(this.parmProcessExecutionSourceLinkRecId());
            messageLogItem.parmMessage(_message);

            ProcessExecutionMessageLog::insertMessage(messageLogItem);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createRuntimeMonitorTask</Name>
				<Source><![CDATA[
    private LedgerCovTotalProcessAutomationRuntimeMonitor createRuntimeMonitorTask(BatchHeader _batchHeader)
    {
        LedgerCovTotalProcessAutomationRuntimeMonitor monitor = new LedgerCovTotalProcessAutomationRuntimeMonitor(
            classStr(LedgerCovTotalProcessAutomationRuntimeMonitor),
            methodStr(LedgerCovTotalProcessAutomationRuntimeMonitor, runMonitor),
            SysOperationExecutionMode::Synchronous);

        LedgerCovTotalProcessAutomationRuntimeMonitorContract contract = monitor.getDataContractInfoObject().dataContractObject() as LedgerCovTotalProcessAutomationRuntimeMonitorContract;
        contract.parmProcessExecutionSourceLinkRecId(this.parmProcessExecutionSourceLinkRecId());
        contract.parmBatchJobId(_batchHeader.parmBatchHeaderId());
        contract.parmIsFinalRuntimeMonitor(false);

        return monitor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>