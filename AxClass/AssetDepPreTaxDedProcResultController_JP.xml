<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepPreTaxDedProcResultController_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AssetDepPreTaxDedSettleRptController_JP</c> class is the controller class for the
///    <c>AssetDepPreTaxDedSettlement</c> report.
/// </summary>
class AssetDepPreTaxDedProcResultController_JP extends SrsReportRunController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes the report contract before running the report.
    /// </summary>
    protected void preRunModifyContract()
    {
        AssetDepPreTaxDedProcResultContract_JP  contract = this.parmReportContract().parmRdpContract();
        AssetDepPreTaxDedProcess_JP             assetDepPreTaxDedProcess;
        AssetDepPreTaxDedProcessContext_JP      assetDepPreTaxDedProcessContext;
        Common                                  callerRecord;

        callerRecord = this.parmArgs().record();
        ISrsReportFileFormatExportable caller = this.parmArgs().caller();

        if (caller != null)
        {
            contract.parmFileFormat(caller.parmFileFormat());
        }

        if (this.parmArgs().dataset() == tableNum(AssetDepPreTaxDedProcess_JP))
        {
            assetDepPreTaxDedProcess = callerRecord as AssetDepPreTaxDedProcess_JP;
            contract.parmAssetDepPreTaxDedProcessRecId(assetDepPreTaxDedProcess.RecId);
        }
        else if (this.parmArgs().dataset() == tableNum(AssetDepPreTaxDedProcessContext_JP))
        {
            assetDepPreTaxDedProcessContext = callerRecord as AssetDepPreTaxDedProcessContext_JP;
            contract.parmAssetDepPreTaxDedProcessRecId(assetDepPreTaxDedProcessContext.AssetDepPreTaxDedProcess_JP);
        }

        SRSPrintDestinationSettings printSetting  = this.parmReportContract().parmPrintSettings();
        ISrsReportFileFormatContract fileFormatContract = this.parmReportContract().parmRdpContract() as ISrsReportFileFormatContract;

        if (this.isInBatch())
        {
            printSetting.printMediumType(SRSPrintMediumType::Archive);
        }
        else
        {
            SrsReportFileFormatControllerHelper::setPrintMedium(printSetting, fileFormatContract.parmFileFormat(), this.parmReportName());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    /// Suppress print setting.
    /// </summary>
    /// <returns>false</returns>
    public boolean showPrintSettings()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        const str FeatureReference = 'JP-00026';
        GlobalizationInstrumentationHelper::featureRun(FeatureReference, funcName());

        AssetDepPreTaxDedProcResultController_JP controller  = new AssetDepPreTaxDedProcResultController_JP();

        controller.parmReportName(ssrsReportStr(AssetDepPreTaxDedProcResult_JP, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        ISrsReportFileFormatExportable callerForm = _args.caller();
        if (callerForm)
        {
            controller.getReportContract().parmRdpContract().parmFileFormat(callerForm.parmFileFormat());
        }
        else
        {
            controller.getReportContract().parmRdpContract().parmFileFormat(SRSReportFileFormat::PDF);
        }
        controller.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>