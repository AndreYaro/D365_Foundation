<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
  <Name>ProjListProjTableController</Name>
  <SourceCode>
    <Declaration><![CDATA[
/// <summary>
/// The <c>ProjListProjTableController</c> class is the controller class for the
/// <c>ProjListProjTableReport</c> report.
/// </summary>
class ProjListProjTableController extends SrsReportRunController implements BatchRetryable
{
    boolean    active;
    boolean    finished;
    boolean    timeMaterial;
    boolean    fixedPrice;
    boolean    investment;
    boolean    internalCost;
    boolean    time;

    #define.ReportName('ProjListProjTable.Report')
    #define.ParameterActive('Active')
    #define.ParameterFinished('Finished')

    #ProjReports
}
]]></Declaration>
    <Methods>
      <Method>
        <Name>addParameterValueRangeToQuery</Name>
        <Source><![CDATA[
    /// <summary>
    /// Modifies the query by adding a range value to the query.
    /// </summary>
    /// <param name="_reportRunQuery">
    /// The query to modify.
    /// </param>
    /// <param name="_rangeTable">
    /// The table in the query on which to set the range.
    /// </param>
    /// <param name="_rangeField">
    /// The field on which to apply the range value.
    /// </param>
    /// <param name="_parameterValue">
    /// The value to set on the query range.
    /// </param>
    /// <remarks>
    /// Any string value that is passed be set on the range.
    /// </remarks>
    private void addParameterValueRangeToQuery(Query _reportRunQuery, tableId _rangeTable, fieldId _rangeField, str _parameterValue)
    {
        QueryBuildRange         queryBuildRange;
        QueryBuildDataSource    queryBuildDataSource;

        queryBuildDataSource    = SysQuery::findOrCreateDataSource(_reportRunQuery, _rangeTable);
        queryBuildRange         = queryBuildDataSource.addRange(_rangeField);
        queryBuildRange.value(_parameterValue);
        queryBuildRange.status(RangeStatus::Hidden);
    }

]]></Source>
      </Method>
      <Method>
        <Name>getReportParameterValues</Name>
        <Source><![CDATA[
    private void getReportParameterValues()
    {
        SrsReportRdlDataContract    rdlContract;

        rdlContract     = this.parmReportContract().parmRdlContract();

        active          = rdlContract.getValue(#ParameterActive);
        finished        = rdlContract.getValue(#ParameterFinished);
        timeMaterial    = rdlContract.getValue(#ParameterTimeMaterial);
        fixedPrice      = rdlContract.getValue(#ParameterFixedPrice);
        investment      = rdlContract.getValue(#ParameterInvestment);
        internalCost    = rdlContract.getValue(#ParameterInternal);
        time            = rdlContract.getValue(#ParameterTime);
    }

]]></Source>
      </Method>
      <Method>
        <Name>preRunModifyContract</Name>
        <Source><![CDATA[
    /// <summary>
    /// Changes the report contract before the report is run.
    /// </summary>
    protected void preRunModifyContract()
    {
        Query      queryContract;

        queryContract   = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());

        this.setRanges(queryContract, timeMaterial, fixedPrice, investment, internalCost, time, active, finished);
    }

]]></Source>
      </Method>
      <Method>
        <Name>setRanges</Name>
        <Source><![CDATA[
    /// <summary>
    /// Applies filters to the report.
    /// </summary>
    /// <param name="_queryContract">
    /// The report query to modify.
    /// </param>
    /// <param name="_timeMaterial">
    /// The Project type - Time and Material.
    /// </param>
    /// <param name="_fixedPrice">
    /// The Project type - Fixed Price.
    /// </param>
    /// <param name="_investment">
    /// The Project type – Investment.
    /// </param>
    /// <param name="_internalCost">
    /// The Project type - Internal Cost.
    /// </param>
    /// <param name="_time">
    /// The Project type – Time.
    /// </param>
    /// <param name="_active">
    /// The Project status – Active.
    /// </param>
    /// <param name="_finished">
    /// The Project status – Finished.
    /// </param>
    /// <remarks>
    /// This method sets ranges on the data source based on the values that are selected in the report
    /// parameters dialog box.
    /// </remarks>
    public void setRanges(Query _queryContract, boolean _timeMaterial, boolean _fixedPrice, boolean _investment, boolean _internalCost, boolean _time, boolean _active, boolean _finished)
    {
        if (!ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            if (_timeMaterial)
            {
                this.addParameterValueRangeToQuery(_queryContract, tableNum(ProjTable), fieldNum(ProjTable, Type), queryValue(ProjType::TimeMaterial));
            }

            if (_fixedPrice)
            {
                this.addParameterValueRangeToQuery(_queryContract, tableNum(ProjTable), fieldNum(ProjTable, Type), queryValue(ProjType::FixedPrice));
            }

            if (_investment)
            {
                this.addParameterValueRangeToQuery(_queryContract, tableNum(ProjTable), fieldNum(ProjTable, Type), queryValue(ProjType::Investment));
            }

            if (_internalCost)
            {
                this.addParameterValueRangeToQuery(_queryContract, tableNum(ProjTable), fieldNum(ProjTable, Type), queryValue(ProjType::Internal));
            }

            if (_time)
            {
                this.addParameterValueRangeToQuery(_queryContract, tableNum(ProjTable), fieldNum(ProjTable, Type), queryValue(ProjType::Time));
            }
        }

        if (_active == true && _finished == false)
        {
            this.addParameterValueRangeToQuery(_queryContract, tableNum(ProjTable), fieldNum(ProjTable, Status), strFmt('(%1 != %2)', fieldStr(ProjTable, Status), enum2int(ProjStatus::Completed)));
        }

        if (_finished == true && _active == false)
        {
            this.addParameterValueRangeToQuery(_queryContract, tableNum(ProjTable), fieldNum(ProjTable, Status), queryValue(ProjStatus::Completed));
        }
    }

]]></Source>
      </Method>
      <Method>
        <Name>validate</Name>
        <Source><![CDATA[
    Public boolean validate()
    {
        boolean isValid;

        isValid = super();

        this.getReportParameterValues();

        if (!(timeMaterial || fixedPrice || investment || internalCost || time) &&
            !ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
             isValid = checkFailed("@SYS91026");
        }

        if (!(active || finished))
        {
            isValid = checkFailed("@SYS98960");
        }

        return isValid;
    }

]]></Source>
      </Method>
      <Method>
        <Name>main</Name>
        <Source><![CDATA[
    public static void main(Args _args)
    {
        ProjListProjTableController controller  = new ProjListProjTableController();
        controller.parmReportName(#ReportName);
        controller.parmArgs(_args);
        controller.startOperation();
    }

]]></Source>
      </Method>
      <Method>
        <Name>isRetryable</Name>
        <Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source>
      </Method>
    </Methods>
  </SourceCode>
</AxClass>