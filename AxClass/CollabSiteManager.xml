<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CollabSiteManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
[SysObsolete('Project Collaboration Workspace is deprecated.', false, 20\09\2022)]
class CollabSiteManager
{
    CollabSiteParameters    collabSiteParameters;
    CollabSiteEntityType    entityType;
    RefTableId              tableId;
    RefRecId                refRecId;
    ProjId                  projId;
    ProjType                projType;
    boolean                 skipCreateSite;
    str                     urlSuffix;
    const str               urlSeparator = "/";
    const str               siteNameSeparator = "_";
    const str               userLoginSeparator = "\\";

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>autoCreateSite</Name>
				<Source><![CDATA[
    public void autoCreateSite(boolean _showPrompt = true, boolean _createSite = false, boolean _throwError = true)
    {
        CollabSiteURL           siteUrl;
        CollabSiteTemplateName  templateName;
        CollabSiteTitle         title;
        CollabSiteDescription   description;
        boolean                 createSite = false;

        if (collabSiteParameters.AutoCreateSite)
        {
            createSite = this.isAutoCreateParameterSetForType(entityType);
        }
        else
        {
            if (collabSiteParameters.PromptCreateSite)
            {
                if (_showPrompt)
                {
                    if (Box::yesNo(strFmt("@SYS132336",enum2str(entityType)) ,DialogButton::No) == DialogButton::Yes)
                    {
                        createSite = true;
                    }
                }
                else
                {
                    createSite = _createSite;
                }
            }
        }

        if (createSite)
        {
            siteUrl = this.defaultRootUrl();
            templateName = this.defaultTemplateName();
            title = this.defaultTitle();
            description = this.defaultDescription();

            if (!skipCreateSite)
            {
                if (CollabSiteSharePointOnlineProxy::checkSiteExists(siteUrl))
                {
                    warning(strFmt("@SYS139098", siteUrl));
                }
                else
                {
                    this.createSite(siteUrl, templateName, title, description, _throwError);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAutoCreateParameterSetForType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines of a collaboration site should be automatically created based on parameter settings for the given entity type.
    /// </summary>
    /// <param name = "_entityType">A <c>CollabSiteEntityType</c> enum value.</param>
    /// <returns>true if a collaboration site should be created automatically; otherwise false.</returns>
    protected boolean isAutoCreateParameterSetForType(CollabSiteEntityType _entityType)
    {
        boolean createSite;

        if (_entityType == CollabSiteEntityType::Project)
        {
            // collabSiteParameters for project was found. check for project type
            if (collabSiteParameters.EntityType == CollabSiteEntityType::Project)
            {
                if (CollabSiteParameters::checkAutoCreateProjType(projType))
                {
                    createSite = true;
                }
            }
            else if (collabSiteParameters.EntityType == CollabSiteEntityType::All)
                // using collabSiteParameters for entityType = ALL
            {
                if (collabSiteParameters.AutoCreateSite)
                {
                    createSite = true;
                }
            }
        }
        else
        {
            createSite = true;
        }

        return createSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSiteNameFromURL</Name>
				<Source><![CDATA[
    private str getSiteNameFromURL(CollabSiteURL _siteUrl)
    {
        int length = strLen(_siteUrl);
        int lastPos = length -1;
        int targetPos = strFind(_siteUrl, "/", lastPos, -lastPos);
        return subStr(_siteUrl, targetPos+1, length);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSite</Name>
				<Source><![CDATA[
    public void createSite(CollabSiteURL _siteUrl, CollabSiteTemplateName _templateName,
        CollabSiteTitle _title, CollabSiteDescription _desc, boolean _throwError = true)
    {
        guid            siteId;
        RecId           locRefRecId;
        str             siteName;
        if (!this.existCollabSiteLink())
        {
            // skipCreateSite flag is used to bypass unit test
            if (!skipCreateSite)
            {
                siteName = this.getSiteNameFromURL(_siteUrl);
                siteId = CollabSiteSharePointOnlineProxy::createSite(this.sharepointServerRootUrl(), siteName, _templateName, _title, _desc, _throwError);
                if (!siteId)
                {
                    warning ("@SYS137323");
                }
            }

            if (siteId || skipCreateSite)
            {
                locRefRecId = this.insertCollabSiteLink();
                this.insertCollabSiteTable(locRefRecId, _siteUrl, _siteUrl);
            }
        }
        else
        {
            warning (strFmt("@SYS138687", entityType));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDescription</Name>
				<Source><![CDATA[
    public CollabSiteDescription defaultDescription()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>sharepointServerRootUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns default root url without the suffix.
    /// </summary>
    /// <returns>Root url without suffix.</returns>
    public CollabSiteURL sharepointServerRootUrl()
    {
        return collabSiteParameters.RootURL + urlSeparator ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultRootUrl</Name>
				<Source><![CDATA[
    public CollabSiteURL defaultRootUrl()
    {
        return collabSiteParameters.RootURL + urlSeparator + curExt() + siteNameSeparator + urlSuffix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTemplateName</Name>
				<Source><![CDATA[
    public CollabSiteTemplateName defaultTemplateName()
    {
        return collabSiteParameters.TemplateName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultTitle</Name>
				<Source><![CDATA[
    public CollabSiteTitle  defaultTitle()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCollabSiteLink</Name>
				<Source><![CDATA[
    public void deleteCollabSiteLink(CollabSiteEntityType _entityType)
    {
        switch (entityType)
        {
            case CollabSiteEntityType::Project :
                CollabSiteLink::deleteCollabSiteProject(this.parmProjId());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSite</Name>
				<Source><![CDATA[
    public void deleteSite(boolean _deleteCollabSite = true, boolean _showPrompt = true)
    {
        CollabSiteTable collabSiteTable;
        boolean         deleteCollabSite = _deleteCollabSite;

        if (this.existCollabSiteLink())
        {
            if (_showPrompt)
            {
                if (this.parmCollabSiteParameters().PromptDeleteSite)
                {
                    if (Box::yesNo("@SYS132338", DialogButton::No) == DialogButton::No)
                    {
                        deleteCollabSite = false;
                    }
                    else
                    {
                        deleteCollabSite = true;
                    }
                }
            }

            // delete SharePoint site
            if (deleteCollabSite)
            {
                collabSiteTable = this.getCollabSiteTable(this.parmEntityType());

                // check if site is linked to other entities
                if (!CollabSiteTable::isSiteLinkToOtherEntity(collabSiteTable.InternalURL, collabSiteTable.RefRecId))
                {
                    if (!CollabSiteSharePointOnlineProxy::deleteSite(collabSiteTable.InternalURL))
                    {
                        // The Collaboration Workspace cannot be deleted because it includes one or more sub-sites. The workspace will be delinked from the %1 instead.
                        warning(strFmt("@SYS137262", enum2str(this.parmEntityType())));
                    }
                }
                else
                {
                    warning("@SYS132506");
                }
            }

            // delete CollabSiteLink and CollabSiteTable
            this.deleteCollabSiteLink(this.parmEntityType());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCollabSiteTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a <c>CollabSiteTable</c> record for the given <c>CollabSiteEntityType</c> enum value.
    /// </summary>
    /// <param name = "_entityType">A CollabSiteEntityType.</param>
    /// <returns>The <c>CollabSiteTable</c> record.</returns>
    protected CollabSiteTable getCollabSiteTable(CollabSiteEntityType _entityType)
    {
        CollabSiteTable collabSiteTable;
        switch (entityType)
        {
            case CollabSiteEntityType::Project :
                collabSiteTable = CollabSiteLink::getCollabSiteProject(this.parmProjId());
                break;
        }
        return collabSiteTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existCollabSiteLink</Name>
				<Source><![CDATA[
    public boolean existCollabSiteLink()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCollabSiteLink</Name>
				<Source><![CDATA[
    public RecId insertCollabSiteLink()
    {
        CollabSiteLink         collabSiteLink;

        collabSiteLink.clear();
        collabSiteLink.EntityType = entityType;

        this.initCollabSiteLinkFromEntityType(entityType, collabSiteLink);
        collabSiteLink.insert();

        return collabSiteLink.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCollabSiteLinkFromEntityType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fields in a <c>CollabSiteLink</c> record based on entity type.
    /// </summary>
    /// <param name = "_entityType">A <c>CollabSiteEntityType</c> enum value.</param>
    /// <param name = "_collabSiteLink">A <c>CollabSiteLink</c> record.</param>
    public void initCollabSiteLinkFromEntityType(CollabSiteEntityType _entityType, CollabSiteLink _collabSiteLink)
    {
        switch (_entityType)
        {
            case CollabSiteEntityType::Project :
                _collabSiteLink.ProjId = this.parmProjId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCollabSiteTable</Name>
				<Source><![CDATA[
    public void insertCollabSiteTable(RefRecId _refRecId, CollabSiteURL _internalUrl, CollabSiteURL _externalUrl)
    {
        CollabSiteTable         collabSiteTable;

        collabSiteTable.clear();
        collabSiteTable.RefRecId = _refRecId;
        collabSiteTable.InternalURL = _internalUrl;
        collabSiteTable.ExternalURL = _externalUrl;

        collabSiteTable.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the site url for the url type.
    /// </summary>
    /// <param name = "urlType">Url type to get the site for. Values could be InternalUrl or ExternalUrl</param>
    /// <returns>Site url for the requested url type.</returns>
    public CollabSiteURL getSite(CollabSiteUrlType urlType)
    {
        CollabSiteTable collabSiteTable;
        CollabSiteURL   siteUrl;

        collabSiteTable = this.getCollabSiteTable(this.parmEntityType());

        if (urlType == CollabSiteUrlType::InternalUrl)
        {
            siteUrl = urlSeparator + collabSiteTable.InternalURL;
        }
        else if (urlType == CollabSiteUrlType::ExternalUrl)
        {
            siteUrl = urlSeparator + collabSiteTable.ExternalURL;
        }

        return   siteUrl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkSite</Name>
				<Source><![CDATA[
    public void linkSite(CollabSiteURL _internalUrl, CollabSiteURL _externalUrl)
    {
        RefRecId        locRefRecId;

        try
        {
            if (!this.existCollabSiteLink())
            {
                ttsbegin;
                locRefRecId = this.insertCollabSiteLink();
                this.insertCollabSiteTable(locRefRecId, _internalUrl, _externalUrl);
                ttscommit;
            }
        }
        catch( Exception::Internal )
        {
            CollabSiteSharePointOnlineProxy::processCLRInternalException();
        }
        catch( Exception::CLRError )
        {
            CollabSiteSharePointOnlineProxy::processCLRErrorException();
        }
        catch
        {
            CollabSiteSharePointOnlineProxy::processCLRErrorException();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCollabSiteParameters</Name>
				<Source><![CDATA[
    public CollabSiteParameters parmCollabSiteParameters(CollabSiteParameters _collabSiteParameters = collabSiteParameters)
    {
        collabSiteParameters = _collabSiteParameters;

        return collabSiteParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEntityType</Name>
				<Source><![CDATA[
    public CollabSiteEntityType parmEntityType(CollabSiteEntityType _entityType = entityType)
    {
        entityType = _entityType;

        return entityType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjId</Name>
				<Source><![CDATA[
    public ProjId parmProjId(ProjId _projId = projId)
    {
        projId = _projId;

        return projId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjType</Name>
				<Source><![CDATA[
    public ProjType parmProjType(ProjType _projType = projType)
    {
        projType = _projType;

        return projType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipCreateSite</Name>
				<Source><![CDATA[
    public boolean parmSkipCreateSite(boolean _skipCreateSite = skipCreateSite)
    {
        skipCreateSite = _skipCreateSite;

        return skipCreateSite;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUrlSuffix</Name>
				<Source><![CDATA[
    public str parmUrlSuffix(str _urlSuffix = urlSuffix)
    {
        urlSuffix = CollabSiteManager::getValidUrl(_urlSuffix);

        return urlSuffix;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unlinkSite</Name>
				<Source><![CDATA[
    public void unlinkSite()
    {
        this.deleteCollabSiteLink(this.parmEntityType());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CollabSiteManager construct(Common _common)
    {
        CollabSiteManager   collabSiteManager;

        switch (_common.TableId)
        {
            case tableNum(ProjTable):
                collabSiteManager = new CollabSiteManagerProject(_common);
                break;
        }

        return collabSiteManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createCollab</Name>
				<Source><![CDATA[
    static void createCollab(Common _common, boolean _showPrompt, boolean _createSite)
    {
        CollabSiteManager   collabSiteManager;

        collabSiteManager = CollabSiteManager::construct(_common);
        collabSiteManager.autoCreateSite(_showPrompt, _createSite);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValidUrl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Removes invalid characters in the URL of the Collaboration Sharepoint site.
    /// </summary>
    /// <param name="_urlSuffix">
    /// The URL Suffix of the new collaboration workspace site.
    /// </param>
    /// <returns>
    /// A String that removes the invalid URL characters.
    /// </returns>
    public static str getValidUrl(str _urlSuffix)
    {
        str regexPattern = '["#%&*:<>?/{}~|]';
        str newUrl = _urlSuffix;
        int matchCount;

        System.Text.RegularExpressions.MatchCollection matches;

        // remove the escape character first
        _urlSuffix = strReplace(_urlSuffix,@'\','');

        matches = System.Text.RegularExpressions.Regex::Matches(_urlSuffix, regexPattern);
        matchCount = CLRInterop::getAnyTypeForObject(matches.get_Count());

        if (matchCount > 0)
        {
            // remove invalid characters for Sharepoint URL
            newUrl = System.Text.RegularExpressions.Regex::Replace(_urlSuffix, regexPattern, '');
        }

        return newUrl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>