<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchFormLetter_ApproveJournal</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       PurchFormLetter_ApproveJournal
extends     PurchFormLetter_Invoice implements BatchRetryable
{
    PurchFormLetterApprovalContract purchFormLetterApprovalContract;

    TransDate               newTransDate;
    boolean                 wasQueryFormCancelled;
    boolean                 retrieveRelatedInvoices;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Microsoft internal use only.
    /// </summary>
    /// <returns>
    /// A Boolean value.
    /// </returns>
    /// <remarks>
    /// This method must be in this class because it is called from the <c>dialogRunbase</c> class.
    /// </remarks>
    public boolean  canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>chooseLinesServer</Name>
				<Source><![CDATA[
    protected container chooseLinesServer(boolean _append = false)
    {
        return PurchFormletterParmDataApproveJournal::chooseLinesServer(this.packDataContract(purchFormLetterApprovalContract),
                                                                        _append,
                                                                        this.parmId() ? true : false,
                                                                        false,
                                                                        false,
                                                                        this.parmInvoiceType(),
                                                                        this.parmLedgerJournalTrans());
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogRun</Name>
				<Source><![CDATA[
    protected SysOperationStartResult dialogRun()
    {
        SysOperationStartResult result;

        if (wasQueryFormCancelled)
        {
            result = SysOperationStartResult::Canceled;
        }
        else
        {
            result = super();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCheckAdvancePaymentsOnValidate_RU</Name>
				<Source><![CDATA[
    protected boolean doCheckAdvancePaymentsOnValidate_RU()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    public DocumentStatus documentStatus()
    {
        return DocumentStatus::ApproveJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getValuesFormletterParmData</Name>
				<Source><![CDATA[
    protected void getValuesFormletterParmData(FormLetterParmDataOutputContract _outputContract)
    {
        super(_outputContract);
        wasQueryFormCancelled = _outputContract.parmWasQueryFormCancelled();
        purchFormLetterApprovalContract.parmWasQueryFormCancelled(wasQueryFormCancelled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        super();
        this.showQueryForm(true);
        wasQueryFormCancelled = purchFormLetterApprovalContract.parmWasQueryFormCancelled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDataSourceRecordsPacked</Name>
				<Source><![CDATA[
    protected Map initDataSourceRecordsPacked(VendInvoiceInfoTable _vendInvoiceInfoTable)
    {
        Map mapSavedInvoiceRecord;
        VendInvoiceInfoTable vendInvoiceInfoTableRelated;

        mapSavedInvoiceRecord = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Record);
        if (this.parmRetrieveRelatedInvoices())
        {
            while select * from vendInvoiceInfoTableRelated
                where vendInvoiceInfoTableRelated.PoolRecId == _vendInvoiceInfoTable.PoolRecId
            {
                mapSavedInvoiceRecord.insert(vendInvoiceInfoTableRelated.RecId, vendInvoiceInfoTableRelated);
                this.setQueryRangePendingInvoice(vendInvoiceInfoTableRelated);
            }
        }
        else
        {
            mapSavedInvoiceRecord = super(_vendInvoiceInfoTable);
        }

        return mapSavedInvoiceRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLedgerJournalTrans</Name>
				<Source><![CDATA[
    protected void  initLedgerJournalTrans(LedgerJournalTrans  _ledgerJournalTrans)
    {
        LedgerJournalTrans          ledgerJournalTransTmp;
        LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
        VendTrans                   vendTrans;
        LedgerJournalTrans          ledgerJournalTrans;

        ledgerJournalTrans = _ledgerJournalTrans;

        if (!ledgerJournalTrans.VendTransId || !_ledgerJournalTrans.RecId)
        {
            select firstonly ledgerJournalTransTmp
                where ledgerJournalTransTmp.JournalNum == _ledgerJournalTrans.JournalNum
                   && ledgerJournalTransTmp.Voucher    == _ledgerJournalTrans.Voucher
                   && ledgerJournalTransTmp.VendTransId;

            ledgerJournalTrans = ledgerJournalTransTmp;
        }

        vendTrans = VendTrans::find(ledgerJournalTrans.VendTransId);

        if (vendTrans.RecId != 0)
        {
            select firstonly ledgerJournalVoucherChanged
            where ledgerJournalVoucherChanged.FromVoucher   == vendTrans.Voucher
               && ledgerJournalVoucherChanged.FromDate      == vendTrans.TransDate
               && ledgerJournalVoucherChanged.JournalNum    == ledgerJournalTrans.JournalNum;

            if (!ledgerJournalVoucherChanged)
            {
                this.parmOrigTransDate(ledgerJournalTrans.TransDate);
                this.parmOrigVoucher(ledgerJournalTrans.Voucher);

                LedgerJournalVoucherChanged::modifyOrigVoucherDate(ledgerJournalTrans.JournalNum, this.parmOrigVoucher(), this.parmOrigTransDate(), ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate);
            }
            else
            {
                this.parmOrigTransDate(ledgerJournalVoucherChanged.FromDate);
                this.parmOrigVoucher(ledgerJournalVoucherChanged.FromVoucher);
            }
        }

        this.parmDefaultTransDate(this.transDate());

        purchFormLetterInvoiceContract.parmLedgerJournalTrans(ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyVoucherDate</Name>
				<Source><![CDATA[
    public void  modifyVoucherDate(TransDate  _transDate)
    {
        LedgerJournalVoucherChanged::modifyOrigVoucherDate(this.parmLedgerJournalTrans().JournalNum,
                                                           this.parmOrigVoucher(),
                                                           this.parmOrigTransDate(),
                                                           this.parmLedgerJournalTrans().Voucher,
                                                           _transDate);

        newTransDate = _transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void  new(
        IdentifierName _className = classStr(FormletterService),
        IdentifierName _methodName= methodStr(FormletterService, postPurchaseOrderApproval),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        super(_className, _methodName, _executionMode);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallerTable</Name>
				<Source><![CDATA[
    public Common parmCallerTable(Common _callerTable = contract.parmCallerTable())
    {
        if (!prmIsDefault(_callerTable) && _callerTable && _callerTable.TableId == tableNum(VendInvoiceInfoTable))
        {
            VendInvoiceInfoTable vendInvoiceInfoTableLocal = _callerTable as VendInvoiceInfoTable;
            this.parmLedgerJournalTrans(LedgerJournalTrans::findRecId(vendInvoiceInfoTableLocal.PoolRecId, false));
            this.parmRetrieveRelatedInvoices(true);
        }

        return super(_callerTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDefaultTransDate</Name>
				<Source><![CDATA[
    public TransDate parmDefaultTransDate(TransDate _defaultTransDate = purchFormLetterApprovalContract.parmDefaultTransDate())
    {
        return purchFormLetterApprovalContract.parmDefaultTransDate(_defaultTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalTrans</Name>
				<Source><![CDATA[
    public LedgerJournalTrans parmLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = purchFormLetterInvoiceContract.parmLedgerJournalTrans())
    {
        if (!prmisDefault(_ledgerJournalTrans) && (_ledgerJournalTrans != purchFormLetterInvoiceContract.parmLedgerJournalTrans()))
        {
            // If this is a new or different LedgerJournalTrans record, initialize variables based on it
            this.initLedgerJournalTrans(_ledgerJournalTrans);
        }

        return super(_ledgerJournalTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigTransDate</Name>
				<Source><![CDATA[
    public TransDate parmOrigTransDate(TransDate _origTransDate = purchFormLetterApprovalContract.parmOrigTransDate())
    {
        return purchFormLetterApprovalContract.parmOrigTransDate(_origTransDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOrigVoucher</Name>
				<Source><![CDATA[
    public Voucher parmOrigVoucher(Voucher _origVoucher = purchFormLetterApprovalContract.parmOrigVoucher())
    {
        return purchFormLetterApprovalContract.parmOrigVoucher(_origVoucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRetrieveRelatedInvoices</Name>
				<Source><![CDATA[
    public boolean parmRetrieveRelatedInvoices(boolean _retrieveRelatedInvoices = retrieveRelatedInvoices)
    {
        retrieveRelatedInvoices = _retrieveRelatedInvoices;
        return retrieveRelatedInvoices;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printMgmtDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Identifies the print management document type.
    /// </summary>
    /// <returns>
    /// The print management document type for purchase order invoice.
    /// </returns>
    protected PrintMgmtDocumentType printMgmtDocumentType()
    {
        return PrintMgmtDocumentType::PurchaseOrderInvoice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetParmListCommonCS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the packed variables from the previous run.
    /// </summary>
    public void resetParmListCommonCS()
    {
        super();

        this.parmOrigTransDate(dateNull());
        this.parmOrigVoucher('');
        this.parmDefaultTransDate(dateNull());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setNewContract</Name>
				<Source><![CDATA[
    protected void setNewContract(FormLetterContract _contract)
    {
        super(_contract);
        if (!contractIsFromPreviousVersion)
        {
            purchFormLetterApprovalContract = _contract;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSkipPrompt</Name>
				<Source><![CDATA[
    protected boolean shouldSkipPrompt()
    {
        return super() || wasQueryFormCancelled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    public TransDate transDate(TransDate _transDate = purchFormLetterContract.parmTransDate())
    {
        VendDocumentTableMap localParmTable = this.initParmTable();

        if (purchFormLetterContract.parmLedgerJournalTrans().Voucher != '')
        {
            // Always default the date from the invoice register
            localParmTable.Ordering = this.documentStatus();
            localParmTable.defaultField(
                            VendDocumentUtil::fieldNum(fieldNum(VendDocumentTableMap, TransDate), localParmTable.TableId),
                            this.purchTable(),
                            purchFormLetterContract.parmLedgerJournalTrans());
            _transDate = localParmTable.TransDate;
        }

        return purchFormLetterContract.parmTransDate(_transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    boolean  unpack(container  _packedClass)
    {
        Integer     version = conPeek(_packedClass,1);
        boolean     ret;

        LedgerJournalTrans ledgerJournalTrans;

        #LOCALMACRO.parmlist_v5
            ledgerJournalTrans
        #ENDMACRO

        switch (version)
        {
            case 1:
                [version, #parmList_v5] = _packedClass;
                this.setNewContract(PurchFormLetterInvoiceContract::construct());

                contractIsFromPreviousVersion = true;
                this.parmLedgerJournalTrans(ledgerJournalTrans);
                ret = true;
                break;
        }

        return super(_packedClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@SYS28947";
    }

]]></Source>
			</Method>
			<Method>
				<Name>newApprovalFromSavedInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a <c>PurchFormLetter_ApproveJournal</c> from a given saved <c>VendInvoiceInfoTable</c> and <c>LedgerJournalTrans</c>.
    /// </summary>
    ///<param name="_savedInvoice">
    /// The saved <c>VendInvoiceInfoTable</c>.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    /// The saved <c>LedgerJournalTrans</c>.
    /// </param>
    /// <param name="_retrieveRelatedInvoices">
    /// This boolean value determines if we want all the related Invoices from the same Pool to be retrieved.
    /// </param>
    /// <param name="_reArrange">
    /// This boolean value arranges the related Invoices from the same Pool.
    /// </param>
    /// <returns>
    /// Returns a <c>PurchFormLetter_ApproveJournal</c>.
    /// </returns>
    public static PurchFormLetter_ApproveJournal newApprovalFromSavedInvoice(VendInvoiceInfoTable _savedInvoice, LedgerJournalTrans _ledgerJournalTrans = null, boolean _retrieveRelatedInvoices = false, boolean _reArrange = false)
    {
        PurchFormLetter_ApproveJournal purchFormLetterApprovalJournal;
        LedgerJournalTrans             ledgerJournalTrans = _ledgerJournalTrans;

        if (!ledgerJournalTrans)
        {
            ledgerJournalTrans = LedgerJournalTrans::findRecId(_savedInvoice.PoolRecId, false);
        }
        purchFormLetterApprovalJournal = PurchFormLetter::construct(DocumentStatus::ApproveJournal);
        purchFormLetterApprovalJournal.parmRetrieveRelatedInvoices(_retrieveRelatedInvoices);
        purchFormLetterApprovalJournal.initNewFromSaved(_savedInvoice);
        purchFormLetterApprovalJournal.parmLedgerJournalTrans(ledgerJournalTrans);
        if (_reArrange)
        {
            purchFormLetterApprovalJournal.reArrangeNow(true);
        }

        return purchFormLetterApprovalJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newApproveJournal</Name>
				<Source><![CDATA[
    static public PurchFormLetter_ApproveJournal newApproveJournal(
        IdentifierName _className  = classStr(FormletterService),
        IdentifierName _methodName = methodStr(FormletterService, postPurchaseOrderApproval),
        SysOperationExecutionMode _executionMode = SysOperationExecutionMode::Synchronous)
    {
        PurchFormLetter_ApproveJournal formletter = new PurchFormLetter_ApproveJournal(_className, _methodName, _executionMode);
        formletter.init();
        return formletter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if it is ok to continue.
    /// </summary>
    /// <param name="_calledFrom">
    /// Identifies the object from which this method is called. The default value is null.
    /// </param>
    /// <returns>
    /// true if it is ok to continue; otherwise, false.
    /// </returns>
    public boolean validate(Object _calledFrom = null)
    {
        #ISOCountryRegionCodes

        boolean ret = super(_calledFrom);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoBE]))
        {
            ret = this.validateVoucherSeries() && ret;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateVoucherSeries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the transaction date fits in voucher series date range. If validation fails, then a message is displayed.
    /// </summary>
    /// <returns>
    /// true if the transaction date fits in voucher series date range; otherwise, false.
    /// </returns>
    protected boolean validateVoucherSeries()
    {
        boolean isValid = true;

        if (purchFormLetterApprovalContract)
        {
            NumberSequenceReference numberSequenceReference = PurchParameters::numRefPurchInvoiceVoucher();

            if (numberSequenceReference.AllowSameAs)
            {
                numberSequenceReference = NumberSeqReference::findReference(NumberSequenceDatatype::find(numberSequenceReference.NumberSequenceDatatype).DataTypeSameAsId);
            }

            NumberSequenceCode voucherSeries = NumberSequenceTable::find(numberSequenceReference.NumberSequenceId).NumberSequence;
            LedgerPostingJournalVoucherSeries ledgerPostingJournalVoucherSeries = LedgerPostingJournalVoucherSeries::find(voucherSeries);

            if (ledgerPostingJournalVoucherSeries)
            {
                LedgerJournalTrans ledgerJournalTrans = purchFormLetterApprovalContract.parmLedgerJournalTrans();
                VendTrans vendTrans = VendTrans::find(ledgerJournalTrans.VendTransId);
                LedgerJournalVoucherChanged ledgerJournalVoucherChanged;
                select firstonly ToDate from ledgerJournalVoucherChanged
                    where ledgerJournalVoucherChanged.FromVoucher == vendTrans.Voucher
                        && ledgerJournalVoucherChanged.FromDate == vendTrans.TransDate
                        && ledgerJournalVoucherChanged.JournalNum == ledgerJournalTrans.JournalNum;

                TransDate effectiveDate = ledgerJournalVoucherChanged
                    ? ledgerJournalVoucherChanged.ToDate
                    : ledgerJournalTrans.TransDate;

                if (effectiveDate != dateNull() && !ledgerPostingJournalVoucherSeries.isDateValid(effectiveDate))
                {
                    Voucher voucher = purchFormLetterApprovalContract.parmVoucher();
                    isValid = checkFailed(strFmt("@SYS62685", voucher, voucherSeries, ledgerPostingJournalVoucherSeries.LedgerPostingJournalId));
                }
            }
        }

        return isValid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>