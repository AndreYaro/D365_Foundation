<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SubledgerJourFinalNetAmountEntryProvider_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Find amounts and entries for final relieving for Russian functionality.
/// </summary>
public class SubledgerJourFinalNetAmountEntryProvider_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getFinalRelievingEntriesWithNetAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sum up amounts for final relieving entries
    /// </summary>
    /// <param name="_entriesToRelieve">
    /// The <c>SubledgerJournalAccountEntryRelievingTmp</c> records representing the subledger journal account entries for the independent source document.
    /// </param>
    /// <param name="_entriesAlreadyRelieved">
    /// The <c>SubledgerJournalAccountEntryRelievingTmp</c> records representing the relieved subledger journal account entries for the indepenent source document.
    /// </param>
    /// <param name="_relievingExtToRelieve">
    /// The <c>SubledgerJournalAccountEntryRelievingTmpExt_RU</c> an extension table for entries to relieve.
    /// </param>
    /// <param name="_relievingExtAlreadyRelieved">
    /// The <c>SubledgerJournalAccountEntryRelievingTmpExt_RU</c> an extension table for entries which are already relieved.
    /// </param>
    /// <returns>
    /// The <c>SubledgerJournalAccountEntryRelievingTmp</c> records containing subledger journal account entry details with final relieving amounts.
    /// </returns>
    public SubledgerJournalAccountEntryRelievingTmp getFinalRelievingEntriesWithNetAmounts(
        SubledgerJournalAccountEntryRelievingTmp _entriesToRelieve,
        SubledgerJournalAccountEntryRelievingTmp _entriesAlreadyRelieved,
        SubledgerJournalAccountEntryRelievingTmpExt_RU  _relievingExtToRelieve,
        SubledgerJournalAccountEntryRelievingTmpExt_RU  _relievingExtAlreadyRelieved)
    {
        SubledgerJournalAccountEntryRelievingTmp    entriesForFinalRelieving;

        while select
            maxOf(AccountingDate),
            maxOf(AccountingEvent),
            maxOf(DependentAccountingDate),
            SubledgerJournalAccountEntry,
            IndependentSourceDocumentHeader,
            LegalEntity,
            sum(TransactionCurrencyAmount),
            sum(AccountingCurrencyAmount),
            sum(ReportingCurrencyAmount),
            ExchangeRate1,
            PostingType,
            ReportingExchangeRate1,
            LedgerDimension,
            IsCorrection,
            Side,
            ExchangeRate2,
            ReportingExchangeRate2,
            ExchangeRateDate,
            HistoricalExchangeRateDate,
            OriginalTransferPolicy,
            TransactionCurrency,
            SubledgerJournalEntryType,
            PostingLayer,
            AccountingCurrency,
            LedgerName,
            Ledger,
            ReportingCurrency
            from _entriesToRelieve
        join _relievingExtToRelieve
            group by _entriesToRelieve.PostingType,
                    _entriesToRelieve.LedgerDimension,
                    _entriesToRelieve.SubledgerJournalAccountEntry,
                    _entriesToRelieve.IndependentSourceDocumentHeader,
                    _entriesToRelieve.Side,
                    _entriesToRelieve.AccountingCurrency,
                    _entriesToRelieve.TransactionCurrency,
                    _entriesToRelieve.ReportingCurrency,
                    _entriesToRelieve.Ledger,
                    _entriesToRelieve.LedgerName,
                    _entriesToRelieve.PostingLayer,
                    _entriesToRelieve.SubledgerJournalEntryType,
                    _entriesToRelieve.LegalEntity,
                    _entriesToRelieve.ExchangeRate1,
                    _entriesToRelieve.ExchangeRate2,
                    _entriesToRelieve.ExchangeRateDate,
                    _entriesToRelieve.ReportingExchangeRate1,
                    _entriesToRelieve.ReportingExchangeRate2,
                    _entriesToRelieve.HistoricalExchangeRateDate,
                    _entriesToRelieve.IsCorrection,
                    _entriesToRelieve.OriginalTransferPolicy,
                    _relievingExtToRelieve.OffsetLedgerDimension
            where _relievingExtToRelieve.SubledgerJournalAccountEntryRelievingTmp == _entriesToRelieve.RecId
            {
                select
                    sum(TransactionCurrencyAmount),
                    sum(AccountingCurrencyAmount),
                    sum(ReportingCurrencyAmount)
                    from _entriesAlreadyRelieved
                        group by _entriesAlreadyRelieved.PostingType,
                            _entriesAlreadyRelieved.LedgerDimension,
                            _entriesAlreadyRelieved.SubledgerJournalAccountEntry,
                            _entriesAlreadyRelieved.IndependentSourceDocumentHeader,
                            _entriesAlreadyRelieved.AccountingCurrency,
                            _entriesAlreadyRelieved.TransactionCurrency,
                            _entriesAlreadyRelieved.ReportingCurrency,
                            _entriesAlreadyRelieved.Ledger,
                            _entriesAlreadyRelieved.LedgerName,
                            _entriesAlreadyRelieved.PostingLayer,
                            _entriesAlreadyRelieved.SubledgerJournalEntryType,
                            _entriesAlreadyRelieved.LegalEntity,
                            _entriesAlreadyRelieved.OriginalTransferPolicy,
                            _relievingExtAlreadyRelieved.OffsetLedgerDimension
                        where _entriesAlreadyRelieved.PostingType == _entriesToRelieve.PostingType
                            && _entriesAlreadyRelieved.LedgerDimension == _entriesToRelieve.LedgerDimension
                            && _entriesAlreadyRelieved.TransactionCurrency == _entriesToRelieve.TransactionCurrency
                            && _entriesAlreadyRelieved.AccountingCurrency == _entriesToRelieve.AccountingCurrency
                            && _entriesAlreadyRelieved.ReportingCurrency == _entriesToRelieve.ReportingCurrency
                            && _entriesAlreadyRelieved.Ledger == _entriesToRelieve.Ledger
                            && _entriesAlreadyRelieved.LedgerName == _entriesToRelieve.LedgerName
                            && _entriesAlreadyRelieved.PostingLayer == _entriesToRelieve.PostingLayer
                            && _entriesAlreadyRelieved.SubledgerJournalEntryType == _entriesToRelieve.SubledgerJournalEntryType
                            && _entriesAlreadyRelieved.LegalEntity == _entriesToRelieve.LegalEntity
                            && (
                                // Relieving entries have the opposite side, so by adding them we will find their delta.
                                (_entriesAlreadyRelieved.Side != _entriesToRelieve.Side
                                    && _entriesAlreadyRelieved.IsCorrection == _entriesToRelieve.IsCorrection)
                                //If RU Physical storno enabled, already relieved transactions will be posted as corrections
                                || (_entriesAlreadyRelieved.Side == _entriesToRelieve.Side
                                    && _entriesAlreadyRelieved.IsCorrection != _entriesToRelieve.IsCorrection)
                                    )
                            && _entriesAlreadyRelieved.OriginalTransferPolicy == _entriesToRelieve.OriginalTransferPolicy
                            // Do not compare on SLJAE, or some relieving scenarios involving correction will break. Compare on Independent SDH instead of SLJAE.
                            // For example, in the scenario where the independent source document is corrected after being partially relieved, comparing to the SLJAEs
                            // would yield incorrect relieving entries on final relieving. This is because final relieving will look at the original SLJAEs on the
                            // independent document instead of the corrected (i.e., the new original) entries.
                            && _entriesAlreadyRelieved.IndependentSourceDocumentHeader == _entriesToRelieve.IndependentSourceDocumentHeader
                join OffsetLedgerDimension from _relievingExtAlreadyRelieved
                    where _relievingExtAlreadyRelieved.SubledgerJournalAccountEntryRelievingTmp == _entriesAlreadyRelieved.RecId
                        && _relievingExtAlreadyRelieved.OffsetLedgerDimension == _relievingExtToRelieve.OffsetLedgerDimension;

            entriesForFinalRelieving.data(_entriesToRelieve);
            // Relieving entries transfer policy should follow the entries to relieve their original transfer policy
            entriesForFinalRelieving.IsTransferredInDetail = _entriesToRelieve.OriginalTransferPolicy;
            entriesForFinalRelieving.TransactionCurrencyAmount = _entriesToRelieve.TransactionCurrencyAmount + _entriesAlreadyRelieved.TransactionCurrencyAmount;
            entriesForFinalRelieving.AccountingCurrencyAmount = _entriesToRelieve.AccountingCurrencyAmount + _entriesAlreadyRelieved.AccountingCurrencyAmount;
            entriesForFinalRelieving.ReportingCurrencyAmount = _entriesToRelieve.ReportingCurrencyAmount + _entriesAlreadyRelieved.ReportingCurrencyAmount;

            entriesForFinalRelieving.insert();
        }

        return  entriesForFinalRelieving;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SubledgerJourFinalNetAmountEntryProvider_RU construct()
    {
        return new SubledgerJourFinalNetAmountEntryProvider_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>