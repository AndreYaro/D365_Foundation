<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailAnalyticsQueryExpressions</Name>
	<SourceCode>
		<Declaration><![CDATA[
using ACM = Microsoft.Dynamics.AX.Analytics.CalculationModel;
using Microsoft.Dynamics.AX.Analytics.CalculationModel;
using AQ = Microsoft.Dynamics.AX.Framework.Analytics.AggregateQuery.QueryModel.Core;
using Microsoft.Dynamics.AX.Framework.Analytics.AggregateQuery.MDXTranslator;
using Microsoft.Dynamics.AX.Framework.Analytics.Runtime;
using System.Data;

/// <summary>
/// Analytics query expressions.
/// </summary>
class RetailAnalyticsQueryExpressions
{
    public static AQ.ScopeExpression ProjCube = new AQ.ScopeExpression("RetailCube");

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLevelExpression</Name>
				<Source><![CDATA[
    public static LevelExpression createLevelExpression(str _hierarchy1, str _hierarchy2, str _level)
    {
        HierarchyExpression hiearchy = new HierarchyExpression(_hierarchy1, _hierarchy2);
        LevelExpression level = new LevelExpression(hiearchy, _level);

        return level;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createFilterExpression</Name>
				<Source><![CDATA[
    public static FilterExpression createFilterExpression(str _hierarchy1, str _hierarchy2, str _level, str _value)
    {
        HierarchyExpression hiearchy = new HierarchyExpression(_hierarchy1, _hierarchy2);
        LevelExpression level = new LevelExpression(hiearchy, _level);
        MemberExpression value = new MemberExpression(hiearchy, new KeyExpression(_value));
        FilterExpression filter = new FilterExpression(level, new ACM.Exists(value));

        return filter;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLagCustomSetExpression</Name>
				<Source><![CDATA[
    public static CustomSet createLagCustomSetExpression(str _lagFromDate, int _numLag, str level)
    {
        CustomSet lagCustomSet;
        MemberExpression lagFromDate;

        lagFromDate = new MemberExpression(new LevelExpression(new HierarchyExpression("Date", level), level), _lagFromDate);

        // current month included in number of lag

        switch (_numLag)
        {
            case 2:
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(1),
                lagFromDate.Lag(0));
                break;
            case 3:
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(2),
                lagFromDate.Lag(1),
                lagFromDate.Lag(0));
                break;
            case 4:
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(3),
                lagFromDate.Lag(2),
                lagFromDate.Lag(1),
                lagFromDate.Lag(0));
                break;
            case 5:
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(4),
                lagFromDate.Lag(3),
                lagFromDate.Lag(2),
                lagFromDate.Lag(1),
                lagFromDate.Lag(0));
                break;
            case 6:
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(5),
                lagFromDate.Lag(4),
                lagFromDate.Lag(3),
                lagFromDate.Lag(2),
                lagFromDate.Lag(1),
                lagFromDate.Lag(0));
                break;
            case 7:
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(6),
                lagFromDate.Lag(5),
                lagFromDate.Lag(4),
                lagFromDate.Lag(3),
                lagFromDate.Lag(2),
                lagFromDate.Lag(1),
                lagFromDate.Lag(0));
                break;
            case 8:
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(7),
                lagFromDate.Lag(6),
                lagFromDate.Lag(5),
                lagFromDate.Lag(4),
                lagFromDate.Lag(3),
                lagFromDate.Lag(2),
                lagFromDate.Lag(1),
                lagFromDate.Lag(0));
                break;
            case 9:
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(8),
                lagFromDate.Lag(7),
                lagFromDate.Lag(6),
                lagFromDate.Lag(5),
                lagFromDate.Lag(4),
                lagFromDate.Lag(3),
                lagFromDate.Lag(2),
                lagFromDate.Lag(1),
                lagFromDate.Lag(0));
                break;
            case 10:
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(9),
                lagFromDate.Lag(8),
                lagFromDate.Lag(7),
                lagFromDate.Lag(6),
                lagFromDate.Lag(5),
                lagFromDate.Lag(4),
                lagFromDate.Lag(3),
                lagFromDate.Lag(2),
                lagFromDate.Lag(1),
                lagFromDate.Lag(0));
                break;
            case 11:
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(10),
                lagFromDate.Lag(9),
                lagFromDate.Lag(8),
                lagFromDate.Lag(7),
                lagFromDate.Lag(6),
                lagFromDate.Lag(5),
                lagFromDate.Lag(4),
                lagFromDate.Lag(3),
                lagFromDate.Lag(2),
                lagFromDate.Lag(1),
                lagFromDate.Lag(0));
                break;
            case 12:
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(11),
                lagFromDate.Lag(10),
                lagFromDate.Lag(9),
                lagFromDate.Lag(8),
                lagFromDate.Lag(7),
                lagFromDate.Lag(6),
                lagFromDate.Lag(5),
                lagFromDate.Lag(4),
                lagFromDate.Lag(3),
                lagFromDate.Lag(2),
                lagFromDate.Lag(1),
                lagFromDate.Lag(0));
                break;
            default: // return current month
                lagCustomSet = new CustomSet(
                lagFromDate.Lag(0));
                break;
        }

        return lagCustomSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAggregateQuery</Name>
				<Source><![CDATA[
    public static AQ.AggregateQuery createAggregateQuery(AQ.ScopeExpression _scope, CustomSet _lagSet, MeasureExpression _measure1, MeasureExpression _measure3 = null, MeasureExpression _measure4 = null, MeasureExpression _measure2 = null, LevelExpression _level = null, FilterExpression _filter = null)
    {
        AQ.AggregateQuery query = new AQ.AggregateQuery().From(_scope);

        // Add measures
        query.AddSelect(_measure1);
        if (!prmisdefault(_measure2))
        {
            query.AddSelect(_measure2);
        }

        if (!prmisdefault(_measure3))
        {
            query.AddSelect(_measure3);
        }

        if (!prmisdefault(_measure4))
        {
            query.AddSelect(_measure4);
        }

        // Add lagged set
        if (!CLRInterop::isNull(_lagSet))
        {
            query.AddSelect(_lagSet);
        }

        // Add group by member
        if (!prmisdefault(_level))
        {
            query.AddSelect(_level);
        }

        // Add member filter
        if (!prmisdefault(_filter))
        {
            query.AddSelect(_filter);
        }

        query.NonEmpty();

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Str2UtcDateTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Formats the given date string into a utc date string.
    /// </summary>
    /// <param name = "dateStr">The date string to reformat.</param>
    /// <returns>UTC formatted date string.  For example: "January 2012" ==> "2012-01-01T00:00:00".</returns>
    public static str Str2UtcDateTime(str dateStr)
    {
        // "January 2012" ==> 2012-01-01T00:00:00
        System.DateTime parsedDate;
        str formattedDate;

        if (!System.DateTime::TryParse(
            dateStr,
            System.Globalization.CultureInfo::InvariantCulture,
            System.Globalization.DateTimeStyles::None,
            byref parsedDate))
        {
            parsedDate = new System.DateTime(1900, 1, 1);
        }

        formattedDate = parsedDate.ToString('s');
        return formattedDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRealValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert to real value.
    /// </summary>
    /// <param name = "clrObj">A clrobject value.</param>
    /// <returns>The decimal value represented by the CLR object, or zero.</returns>
    public static real checkRealValue(CLRObject clrObj)
    {
        boolean isDbNull = false;
        real realValue;

        if (clrObj is System.DBNull)
        {
            isDbNull = true;
        }

        if (isDbNull)
        {
            realValue = 0.0;
        }
        else
        {
            realValue = System.Convert::ToDecimal(clrObj);
        }

        return realValue;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>