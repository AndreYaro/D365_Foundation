<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendCreatePaymJournal_Vend</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class CustVendCreatePaymJournal_Vend extends CustVendCreatePaymJournal implements BatchRetryable
{
    #ISOCountryRegionCodes

    protected DialogField PSNDialogVendRoutingSlip;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    protected boolean calc(CustVendTransOpen _vendTransOpen)
    {
        boolean ret = super(_vendTransOpen);

        if (ret)
        {
            paymProposal.parmPaymProposalCalcPaym().calc(_vendTransOpen);
            ret = paymProposal.parmPaymProposalCalcPaym().paymDate() != dateNull();
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSNVendRoutingSlipLookup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs a form lookup on the <c>VendRoutingSlip_PSN</c> table to retrieve the
    /// unique existing <c>VendRoutingSlipId</c> field values
    /// </summary>
    /// <param name = "_ctrl">
    /// The control for which to perform the lookup.
    /// </param>
    public void PSNVendRoutingSlipLookup(FormStringControl _ctrl)
    {
        const str UnassignedRoutingSlipId = '';
        
        SysTableLookup vendRoutingSlipLookup = SysTableLookup::newParameters(tablenum(VendRoutingSlip_PSN), _ctrl, false);
        vendRoutingSlipLookup.addLookupfield(fieldnum(VendRoutingSlip_PSN, VendRoutingSlipId), true);

        // Create the query datasource
        Query query = new Query();
        QueryBuildDataSource queryBuildDataSource;
        queryBuildDataSource = query.addDataSource(tablenum(VendRoutingSlip_PSN));
        queryBuildDataSource.addGroupByAndSelectionField(fieldNum(VendRoutingSlip_PSN, VendRoutingSlipId));
        queryBuildDataSource.addRange(fieldNum(VendRoutingSlip_PSN, VendRoutingSlipId)).value(SysQuery::valueNot(UnassignedRoutingSlipId));

        // Add the query to the lookup form
        vendRoutingSlipLookup.parmQuery(query);

        // Perform lookup
        vendRoutingSlipLookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddInvoiceSelectionCriteriaFields</Name>
				<Source><![CDATA[
    protected void dialogAddInvoiceSelectionCriteriaFields()
    {
        super();

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            PSNDialogVendRoutingSlip = dialog.addField(extendedTypeStr(VendRoutingSlipId_PSN), '', '', true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>consIdLookup</Name>
				<Source><![CDATA[
     /// <summary>
    ///     Provides an API to lookup the <c>VendConsInvoice_JP</c> table for consolidate ID.
    /// </summary>
    /// <param name="_formControl">
    ///     The form string control object with which to perform the lookup.
    /// </param>
    public void consIdLookup(FormControl _formControl)
    {
        VendConsInvoice_JP::lookupConsIdforSettle(_formControl);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCustVendSpecificLabels</Name>
				<Source><![CDATA[
    protected void updateCustVendSpecificLabels()
    {
        dialogIncludeInvoicesFromOtherCompanies.label("@SYS115160");
        dialogProposeSeparatePaymentPerCompany.label("@SYS115161");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddBalanceCheckField</Name>
				<Source><![CDATA[
    protected void dialogAddBalanceCheckField()
    {
        dialogBalanceCheck = dialog.addFieldValue(enumStr(NoYes), balanceCheck, "@CashManagement:CheckVendorBalance");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddPaymWeekDayFixedField_Vend</Name>
				<Source><![CDATA[
    protected void dialogAddPaymWeekDayFixedField_Vend()
    {
        dialogPaymWeekDayFixed = dialog.addFieldValue(enumStr(WeekDays), paymWeekDayFixed, "@SYS60655");
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddMinimumPaymentDateField</Name>
				<Source><![CDATA[
    protected void dialogAddMinimumPaymentDateField()
    {
        earlyPaymDate = this.getMinimumPaymentDate();

        dialogEarlyPaymDate = dialog.addFieldValue(extendedTypeStr(DueDate), earlyPaymDate, "@CashManagement:MinPaymDate");
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMinimumPaymentDate</Name>
				<Source><![CDATA[
    private date getMinimumPaymentDate()
    {
        date earlyPaymDateLocal = earlyPaymDate;

        if (!earlyPaymDateLocal)
        {
            earlyPaymDateLocal = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }

        if (VendParameters::find().DueToTransDate)
        {
            LedgerJournalType ledgerJournalType = LedgerJournalTable::find(ledgerJournalId).JournalType;

            if (ledgerJournalType == LedgerJournalType::VendPromissoryNoteDraw
                || ledgerJournalType == LedgerJournalType::VendPaymRemittance)
            {
                earlyPaymDateLocal = dateNull();
            }
        }

        return earlyPaymDateLocal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddPostingDateOptionFields_IT</Name>
				<Source><![CDATA[
    protected void dialogAddPostingDateOptionFields_IT()
    {
        postingDateOption_IT = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIT]);
        if (postingDateOption_IT)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIT00008, funcName());

            dialogPostingDate = dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS14475");
            dialogUseFutureDueDate = dialog.addFieldValue(extendedTypeStr(NoYesId), NoYes::No, "@SYS95966");
            dialogPostingDate.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogAddConsolidationInvoiceFields_JP</Name>
				<Source><![CDATA[
    protected void dialogAddConsolidationInvoiceFields_JP()
    {
        #define.columnNum(2)

        if (VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
        {
            // Invoice date
            dialogGroupConsDate = dialog.addGroup("@SYS57610");
            dialogGroupConsDate.columns(#columnNum);
            dialogConsFrom = dialog.addFieldValue(extendedTypeStr(TransDate), consFromDate);
            dialogConsTo = dialog.addFieldValue(extendedTypeStr(TransDate), consToDate);

            // Monthly consolidation
            dialogGroupConsId = dialog.addGroup("@AccountsPayable:MonthlyConsolidation");
            dialogConsId = dialog.addFieldValue(extendedTypeStr(VendConsId_JP), consId);
            dialogConsId.registerOverrideMethod(methodStr(FormStringControl, lookup), methodStr(CustVendCreatePaymJournal_Vend, consIdLookup), this);
            dialogConsDay = dialog.addFieldValue(extendedTypeStr(VendConsDay_JP), consDay);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Transfers values from dialog box fields to the class member values that represent the user input.
    /// </summary>
    /// <returns>
    ///     The return value of a call to the <c>super</c> method.
    /// </returns>
    /// <remarks>
    /// This method is invoked by the <c>RunBase</c> framework when the OK button of the dialog box is
    /// pressed.
    /// </remarks>
    public boolean getFromDialog()
    {
        earlyPaymDate = dialogEarlyPaymDate.value();
        deleteCredit = dialogDeleteCredit.value();

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            PSNVendRoutingSlipId = PSNdialogVendRoutingSlip.value();
        }

        // Italian only feature so only retrieve then
        if (postingDateOption_IT)
        {
            postingDate = earlyPaymDate;
            useFutureDueDate = dialogUseFutureDueDate.value();
        }

        // <GJP>
        if (VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
        {
            consFromDate = dialogConsFrom.value();
            consToDate = dialogConsTo.value();
            consId = dialogConsId.value();
            consDay = dialogConsDay.value();
        }
        // </GJP>
        if (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)))
        {
            defaultOffsetAccountType = dialogDynamicAccountType.value();
            defaultOffsetLedgerDimension = dialogDynamicAccount.value();
        }

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when calling the
    /// <c>SysLastValue.GetLast</c> method. Remember to call the <c>super</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        super();

        Query query;

        if (PaymProposalQueryImproveFlight::instance().isEnabled()
            && !this.parmIsAutomation())
        {
            query = CustVendCreatePaymJournal_Vend::getPerfImprovedQuery();
        }
        else
        {
            query = new Query(queryStr(VendPaymProposal));
        }

        query.recordLevelSecurity(true);
        
        queryCreatePayment = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>searchTransactions</Name>
				<Source><![CDATA[
    protected void searchTransactions()
    {
        LedgerDimensionDefaultAccount defaultOffsetLedgerAccount = this.parmDefaultOffsetLedgerDimension();
        boolean isSetupDimensions = (defaultOffsetLedgerAccount != 0) && (paymProposal.parmDefaultOffsetAccountType() == LedgerJournalACType::Ledger);

        queryCreatePayment.reset();

        Counter numberOfTransactions = QueryRun::getQueryRowCount(queryCreatePayment.query(), intMax());

        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(CustVendInstrumentationConstants::PaymentProposalSearchTransactions, numberOfTransactions);

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            Counter transactionsSearched;
            boolean contextChanged;
            CompanyId lastProposalCompany;
            VendAccount lastVendNumber;
            CompanyId lastVendTableCompany;
            VendTable vendTable;
            CustVendPaymProposalCalcPaym paymProposalCalcPaym = paymProposal.parmPaymProposalCalcPaym();
            AmountMST mstBalance;

            while (queryCreatePayment.next())
            {
                transactionsSearched++;
                progressLogger.trackProgress(transactionsSearched);

                if (this.skipCreatePaymentRecord())
                {
                    continue;
	            }

                if (balanceCheck)
                {
                    // Determine if the VendTable record from the query is referencing a different logical vendor
                    // than the previous transaction. This is needed because Query.changed(VendTable) will not
                    // return true if the vendor differs only by company in the shared table scenario. See also kernel bug 47368.
                    vendTable = queryCreatePayment.get(tableNum(VendTable));
                    if (queryCreatePayment.changed(tableNum(VendTable))
                        || vendTable.company() != lastVendTableCompany)
                    {
                        lastVendTableCompany = vendTable.company();
                        mstBalance = this.getCachedMstBalance(vendTable);
                    }
                    if (mstBalance > 0)
                    {
                        continue;
                    }
                }

                if (queryCreatePayment.changed(tableNum(VendTransOpen)))
                {
                    VendTransOpen vendTransOpen = queryCreatePayment.get(tableNum(VendTransOpen));

                    if (isPaymentRequestsEnabled)
                    {
                        paymentRequestTable = queryCreatePayment.get(tableNum(CFMPaymentRequestTable));
                    }

                    // The invocation of calc() determines the appropriate payment date which is stored on the paymProposalCalcPaym object.
                    boolean includeTransaction = this.calc(vendTransOpen);

                    if (includeTransaction)
                    {
                        // Setup dimensions for current customer
                        if (isSetupDimensions)
                        {
                            // Check if vendor changed
                            if (lastVendNumber != vendTransOpen.AccountNum)
                            {
                                lastVendNumber = vendTransOpen.AccountNum;
                                contextChanged = true;
                            }

                            // Check if company changed
                            if (lastProposalCompany != vendTransOpen.DataAreaId)
                            {
                                lastProposalCompany = vendTransOpen.DataAreaId;
                                contextChanged = true;
                            }

                            if (contextChanged)
                            {
                                contextChanged = false;

                                DimensionDefault headerDefaultDimension = this.getJournalHeaderDefaultDimension(vendTransOpen.DataAreaId);
                                vendTable = queryCreatePayment.get(tableNum(VendTable));
                                LedgerDimensionAccount ledgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(defaultOffsetLedgerAccount, headerDefaultDimension, vendTable.DefaultDimension, this.parmMainAccountDefaultDimension());

                                paymProposal.parmDefaultOffsetLedgerDimension(ledgerDimension);
                            }
                        }

                        VendTrans vendTrans = queryCreatePayment.get(tableNum(VendTrans));

                        // <GBR>
                        if (BrazilParameters::isEnabled())
                        {
                            CustVendPaymProposalEditForm::calculateAndUpdateFineAmount_BR(
                                vendTransOpen.company(),
                                paymProposal.parmLedgerJournalTableCompany(),
                                vendTransOpen,
                                paymProposalCalcPaym.paymDate(),
                                this.paymCurrency(vendTrans.CurrencyCode));

                            CustVendPaymProposalEditForm::calculateAndUpdateInterestAmount_BR(
                                vendTransOpen.company(),
                                paymProposal.parmLedgerJournalTableCompany(),
                                vendTransOpen,
                                paymProposalCalcPaym.paymDate(),
                                this.paymCurrency(vendTrans.CurrencyCode));
                        }
                        // </GBR>

                        if (PublicSectorUtils::isFrenchRegulatoryEnabled()
                            && VendInvoiceHoldHistory::isPlaceInHold(vendTrans.RecId, tableNum(VendTrans)))
                        {
                            continue;
                        }

                        AmountCur paymentAmount = paymProposalCalcPaym.paymAmountInvoiceCur();

                        if (this.canContinueSearchTransactions(paymentAmount, vendTrans))
                        {
                            continue;
                        }
                   
                        if (this.shouldAddCustVendTransOpen(vendTrans))
                        {
                            paymProposal.addCustVendTransOpen(
                                vendTransOpen,
                                paymProposalCalcPaym.paymDate(),
                                this.paymCurrency(isPaymentRequestsEnabled && paymentRequestTable.PaymentCurrency ? paymentRequestTable.PaymentCurrency: vendTrans.CurrencyCode),
                                paymentAmount);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipCreatePaymentRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the record should be skipped.
    /// </summary>
    /// <returns>
    /// true if the record should be skipped; otherwise, false.
    /// </returns>
    protected boolean skipCreatePaymentRecord()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canContinueSearchTransactions</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the calculated payment amount of the invoice to pay.
    /// </summary>
    /// <param name = "paymentAmount">
    ///     Payment amount to check.
    /// </param>///
    /// <param name = "vendTrans">
    ///     Current <c>VendTrans</c> buffer.
    /// </param>
    /// <returns>
    ///     true if the calculated payment amount of the invoice to pay is zero; otherwise, false.
    /// </returns>
    protected boolean canContinueSearchTransactions(AmountCur _paymentAmount, VendTrans _vendTrans)
    {
        return _paymentAmount == 0.0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldAddCustVendTransOpen</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks if the specified vendor transaction is marked for pay when paid.
    /// </summary>
    /// <param name = "_vendTrans">
    ///     Current vendor transaction to be added.
    /// </param>
    /// <returns>
    ///     true if the specified vendor transaction is marked for pay when paid; otherwise, false.
    /// </returns>
    protected boolean shouldAddCustVendTransOpen(VendTrans _vendTrans)
    {
        return !this.isProjectInvoiceWithPayWhenPaid(_vendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isProjectInvoiceWithPayWhenPaid</Name>
				<Source><![CDATA[
    private boolean isProjectInvoiceWithPayWhenPaid(VendTrans _vendTrans)
    {       
        boolean isProjectInvoiceWithPayWhenPaid = false;
        LedgerJournalTrans ledgerJournalTrans;
        LedgerJournalTrans_Project ledgerJournalTrans_Project;

        select RecId, IsPwp, ReadyForPayment from ledgerJournalTrans_Project
            exists join RecId from ledgerJournalTrans
                where ledgerJournalTrans.RecId == ledgerJournalTrans_Project.RefRecId
                    && ledgerJournalTrans.VendTransId == _vendTrans.RecId;

        if (ledgerJournalTrans_Project.RecId
            && ledgerJournalTrans_Project.ReadyForPayment == NoYesCombo::Yes
            && ledgerJournalTrans_Project.IsPwp == NoYes::Yes)
        {
            isProjectInvoiceWithPayWhenPaid = true;
        }

        return isProjectInvoiceWithPayWhenPaid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        return super(_packedClass);
    }

]]></Source>
			</Method>
			<Method>
				<Name>PSNApplyRoutingSlipFilterToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies a <c>VendRoutingSlipId_PSN</c> filter associated to the <c>VendRoutingSlip_PSN</c> table
    /// in the <c>PSNVendInvoiceRoutingSlipView</c> view based off the <c>VendTrans</c> data source
    /// to a query with a <c>VendTrans</c> data source.
    /// </summary>
    /// <param name = "_qbdsVendTrans">
    /// A datasource for the <c>VendTrans</c> table.
    /// </param>
    /// <param name = "_routingSlipId">
    /// The <c>VendRoutingSlipId_PSN</c> value to apply as a filter to the _qbdsVendTrans data source parameter.
    /// </param>
    protected void PSNApplyRoutingSlipFilterToQuery(QueryBuildDataSource _qbdsVendTrans, VendRoutingSlipId_PSN _routingSlipId)
    {
        QueryBuildDataSource qbdsVendInvoiceJour = _qbdsVendTrans.addDataSource(tableNum(VendInvoiceJour));
        qbdsVendInvoiceJour.addLink(fieldNum(VendTrans, Voucher), fieldNum(VendInvoiceJour, LedgerVoucher));
        qbdsVendInvoiceJour.addLink(fieldNum(VendTrans, AccountNum), fieldNum(VendInvoiceJour, InvoiceAccount));
        qbdsVendInvoiceJour.addLink(fieldNum(VendTrans, TransDate), fieldNum(VendInvoiceJour, InvoiceDate));
        qbdsVendInvoiceJour.joinMode(JoinMode::ExistsJoin);

        QueryBuildDataSource dsVendRoutingSlipQuery = qbdsVendInvoiceJour.addDataSource(tableNum(PSNVendInvoiceRoutingSlipView));
        dsVendRoutingSlipQuery.addLink(fieldNum(VendInvoiceJour, PurchID), fieldNum(PSNVendInvoiceRoutingSlipView, PurchId));
        dsVendRoutingSlipQuery.addLink(fieldNum(VendInvoiceJour, InvoiceId), fieldNum(PSNVendInvoiceRoutingSlipView, InvoiceId));
        dsVendRoutingSlipQuery.addLink(fieldNum(VendInvoiceJour, InvoiceDate), fieldNum(PSNVendInvoiceRoutingSlipView, InvoiceDate));
        dsVendRoutingSlipQuery.addLink(fieldNum(VendInvoiceJour, numberSequenceGroup), fieldNum(PSNVendInvoiceRoutingSlipView, numberSequenceGroup));
        dsVendRoutingSlipQuery.addLink(fieldNum(VendInvoiceJour, internalInvoiceId), fieldNum(PSNVendInvoiceRoutingSlipView, internalInvoiceId));
        dsVendRoutingSlipQuery.joinMode(JoinMode::ExistsJoin);
        dsVendRoutingSlipQuery.addRange(fieldNum(PSNVendInvoiceRoutingSlipView, VendRoutingSlipId)).value(queryValue(_routingSlipId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyVendBlockedRangeToQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Appends a filter to a <c>QueryBuildDataSource</c> based on parameters provided.
    /// </summary>
    /// <param name = "_qbdsVendTable">The datasource representing a <c>VendTable</c> to which the filter will be applied.</param>
    /// <param name = "_paymentDate">The payment date to base the filter values on.</param>
    protected void applyVendBlockedRangeToQuery(QueryBuildDataSource _qbdsVendTable, TransDate _paymentDate)
    {
        QueryBuildRange vendBlockedRange = SysQuery::findOrCreateRange(_qbdsVendTable, fieldNum(VendTable, Blocked));

        vendBlockedRange.value(strFmt('((%1.%2 != %3) && (%1.%2 != %4)) || ((%1.%5 <= %6) && (%1.%5 != %7))',
            _qbdsVendTable.name(),
            fieldStr(VendTable, Blocked),
            enum2int(CustVendorBlocked::All),
            enum2int(CustVendorBlocked::Payment),
            fieldStr(VendTable, BlockedReleaseDate),
            date2StrXpp(_paymentDate),
            date2StrXpp(dateNull())));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    protected void updateQuery()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQueryWithQueryRun</Name>
				<Source><![CDATA[
    protected void updateQueryWithQueryRun(QueryRun _queryRun)
    {
        TransDate paymentDate;

        if (toDate != maxDate())
        {
            paymentDate = toDate + 1;
        }
        else
        {
            paymentDate = toDate;
        }

        QueryBuildDataSource qbdsVendTable = _queryRun.query().dataSourceTable(tableNum(VendTable));
        QueryBuildDataSource qbdsVendTrans = _queryRun.query().dataSourceTable(tableNum(VendTrans));

        this.applyVendBlockedRangeToQuery(qbdsVendTable, paymentDate);
       
        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            if (PSNVendRoutingSlipId != '')
            {
                this.PSNApplyRoutingSlipFilterToQuery(qbdsVendTrans, PSNVendRoutingSlipId);
            }
        }

        if (paymentDate != maxDate())
        {
            QueryBuildRange vendTransReleaseDateRange = SysQuery::findOrCreateRange(qbdsVendTrans, fieldNum(VendTrans, InvoiceReleaseDate));
            vendTransReleaseDateRange.value(strFmt('((%1.%2 == %4) || (%1.%2 < %3))',
                qbdsVendTrans.name(),
                fieldStr(VendTrans, InvoiceReleaseDate),
                date2StrXpp(paymentDate),
                date2StrXpp(dateNull())));
        }

        SysQuery::findOrCreateRange(qbdsVendTrans, fieldNum(VendTrans, Approved)).value(queryValue(NoYes::Yes));

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            QueryBuildDataSource qbdsVendTrans_W = VendTrans_W::addToQuery(qbdsVendTrans, JoinMode::OuterJoin);
            SysQuery::findOrCreateRange(qbdsVendTrans_W, fieldNum(VendTrans_W, BankCurrencyTransferId_RU)).value(SysQuery::valueEmptyString());
        }

        if (paymProposalType == CustVendCreatePaymProposalType::DueDate
            && (LedgerJournalTable::find(ledgerJournalId).JournalType == LedgerJournalType::Payment
            || LedgerJournalTable::find(ledgerJournalId).JournalType == LedgerJournalType::VendPromissoryNoteDraw))
        {
            QueryBuildDataSource qbdsVendTransOpen = _queryRun.query().dataSourceTable(tableNum(VendTransOpen));

            SysQuery::findOrCreateRange(qbdsVendTransOpen, fieldNum(VendTransOpen, DueDate)).value(SysQuery::range(fromDate, toDate));
        }

        if (Project::Enabled())
        {
            QueryBuildDataSource qbdsVendInvoiceJour = _queryRun.query().dataSourceTable(tableNum(VendTrans)).addDataSource(tableNum(VendInvoiceJour));
            qbdsVendInvoiceJour.fetchMode(QueryFetchMode::One2One);
            qbdsVendInvoiceJour.joinMode(JoinMode::NoExistsJoin);
            qbdsVendInvoiceJour.relations(true);

            QueryBuildDataSource qbdsVendInvoiceTrans = qbdsVendInvoiceJour.addDataSource(tableNum(VendInvoiceTrans));
            qbdsVendInvoiceTrans.fetchMode(QueryFetchMode::One2One);
            qbdsVendInvoiceTrans.relations(true);

            // Ready for payment is set to No for transactions subjected to PwP amd Payment criteria has not been met, otherwise Yes
            SysQuery::findOrCreateRange(qbdsVendInvoiceTrans, fieldNum(VendInvoiceTrans, IsPwp)).value(queryValue(NoYes::Yes));
            SysQuery::findOrCreateRange(qbdsVendInvoiceTrans, fieldNum(VendInvoiceTrans, ReadyForPayment)).value(queryValue(NoYes::No));

            QueryBuildDataSource qbdsLedgerJournalTrans = _queryRun.query().dataSourceTable(tableNum(VendTrans)).addDataSource(tableNum(LedgerJournalTrans));
            qbdsLedgerJournalTrans.fetchMode(QueryFetchMode::One2One);
            qbdsLedgerJournalTrans.joinMode(JoinMode::NoExistsJoin);
            
            qbdsLedgerJournalTrans.addLink(fieldNum(VendTrans, Voucher), fieldNum(LedgerJournalTrans, Voucher));
            qbdsLedgerJournalTrans.addLink(fieldNum(VendTrans, TransDate), fieldNum(LedgerJournalTrans, TransDate));
            
            QueryBuildDataSource qbdsProjLedgerJournalTrans = qbdsLedgerJournalTrans.addDataSource(tableNum(LedgerJournalTrans_Project));
            qbdsProjLedgerJournalTrans.fetchMode(QueryFetchMode::One2One);
            qbdsProjLedgerJournalTrans.relations(true);
            
            SysQuery::findOrCreateRange(qbdsProjLedgerJournalTrans, fieldNum(LedgerJournalTrans_Project, IsPwp)).value(queryValue(NoYes::Yes));
            SysQuery::findOrCreateRange(qbdsProjLedgerJournalTrans, fieldNum(LedgerJournalTrans_Project, ReadyForPayment)).value(queryValue(NoYes::No));
        }

        // <GJP>
        if ((consFromDate
            || consToDate
            || consId
            || consDay)
            && VendConsInvoiceType_JP::isVendConsInvoiceEnabled())
        {
            _queryRun.query(CustVendConsInvoiceSettleQuery_JP::updateQuery(
                _queryRun.query(),
                tableNum(VendTrans),
                tableNum(VendInvoiceJour),
                tableNum(VendTable),
                tableNum(VendConsInvoice_JP),
                fromDate,
                toDate,
                consId,
                consDay));
        }
        // </GJP>

        // <GTH>
        if (taxBranchCode && isTaxBranchEnabled)
        {
            taxBranchRecId = TaxBranch::findByCode(taxBranchCode).RecId;
            this.updateQueryWithQueryRun_TH(tableNum(VendTrans),_queryRun);
        }
        // </GTH>

        if (isPaymentRequestsEnabled)
        {
            this.updateQueryCashFlowWithQueryRun(tableNum(VendTransOpen),_queryRun);
        }

        super(_queryRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS75713";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        CustVendCreatePaymJournal_Vend::runPaymentProposal(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static CustVendCreatePaymJournal_Vend construct()
    {
        return new CustVendCreatePaymJournal_Vend();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPaymentProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Performs the payment proposal processing logic.
    /// </summary>
    /// <param name = "_args">A set of arguments for running payment proposal.</param>
    /// <returns>A <c>CustVendCreatePaymJournal_Vend</c> object containing the results of the payment proposal.</returns>
    protected static CustVendCreatePaymJournal_Vend runPaymentProposal(Args _args)
    {
        CustVendCreatePaymJournal_Vend createPaymJournal = new CustVendCreatePaymJournal_Vend();
        LedgerJournalTable ledgerJournalTable = createPaymJournal.userInteraction(_args).getLedgerJournalTable();

        if (ledgerJournalTable)
        {
            if (!createPaymJournal.isInBatch())
            {
                CustVendPaymProposalLine::deleteByJournalId(ledgerJournalTable.JournalNum);
            }
            createPaymJournal.getLast();
            createPaymJournal.parmLedgerJournalId(ledgerJournalTable.JournalNum);
        }

        boolean canProceed = createPaymJournal.userInteraction(_args).doPromptForCreatingPaymentProposal();

        if (canProceed)
        {
            createPaymJournal.runOperation();
        }

        return createPaymJournal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryNonUserInteractive</Name>
				<Source><![CDATA[
    protected void initQueryNonUserInteractive(CustVendCreatePaymJournalDialogValues _dialogValues)
    {
        super(_dialogValues);

        QueryBuildDataSource qbdsVendTable;

        if (_dialogValues.parmAccountNum())
        {
            qbdsVendTable = this.queryRun().query().dataSourceTable(tableNum(VendTable));
            SysQuery::findOrCreateRange(qbdsVendTable, fieldNum(VendTable, AccountNum)).value(_dialogValues.parmAccountNum());
        }

        if (_dialogValues.parmGroup())
        {
            qbdsVendTable = this.queryRun().query().dataSourceTable(tableNum(VendTable));
            SysQuery::findOrCreateRange(qbdsVendTable, fieldNum(VendTable, VendGroup)).value(_dialogValues.parmGroup());
        }

        if (_dialogValues.parmPaymMode())
        {
            QueryBuildDataSource qbdsVendTrans = this.queryRun().query().dataSourceTable(tableNum(VendTrans));
            SysQuery::findOrCreateRange(qbdsVendTrans, fieldNum(VendTrans, PaymMode)).value(_dialogValues.parmPaymMode());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseSpecTransSetBasedInsert</Name>
				<Source><![CDATA[
    protected boolean canUseSpecTransSetBasedInsert()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for executing the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogPostRun</Name>
				<Source><![CDATA[
    public void dialogPostRun(DialogRunbase _dialog)
    {
        super(_dialog);

        if (PublicSectorUtils::isFrenchRegulatoryEnabled())
        {
            PSNdialogVendRoutingSlip.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(CustVendCreatePaymJournal_Vend, PSNvendRoutingSlipLookup), this);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenAccountNumFieldId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransOpenAccountNumFieldId()
    {
        return fieldNum(VendTransOpen, AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenRecIdFieldId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTransOpenRecIdFieldId()
    {
        return fieldNum(VendTransOpen, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenTableId</Name>
				<Source><![CDATA[
    protected TableId getCustVendTransOpenTableId()
    {
        return tableNum(VendTransOpen);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTableId</Name>
				<Source><![CDATA[
    protected TableId getCustVendTableId()
    {
        return tableNum(VendTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTableRecIdFieldId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTableRecIdFieldId()
    {
        return fieldNum(VendTable, RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTableAccountNumFieldId</Name>
				<Source><![CDATA[
    protected FieldId getCustVendTableAccountNumFieldId()
    {
        return fieldNum(VendTable, AccountNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseCustVendPaymProposalLineSetBasedInsert</Name>
				<Source><![CDATA[
    protected boolean canUseCustVendPaymProposalLineSetBasedInsert()
    {
        // SPECTRANS must be set based before CustVendPaymProposalLine can be set based.
        return !SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) && this.canUseSpecTransSetBasedInsert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPerfImprovedQuery</Name>
				<Source><![CDATA[
    internal static Query getPerfImprovedQuery()
    {
        Query query = new Query(queryStr(VendPaymProposalPerf));
        query.forceSelectOrder(true);
        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>