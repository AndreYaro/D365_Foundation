<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SIIGetTaxRegData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SIIGetTaxRegData</c> determines tax registration data for the specified element of the global address book.
/// </summary>
public class SIIGetTaxRegData
{
    private TaxRegistrationNumber nif, taxId;
    private str taxIdType;
    private LogisticsAddressCountryRegionISOCode isoCode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmNif</Name>
				<Source><![CDATA[
    public TaxRegistrationNumber parmNif(TaxRegistrationNumber _nif = nif)
    {
        nif = _nif;
        return nif;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxId</Name>
				<Source><![CDATA[
    public TaxRegistrationNumber parmTaxId(TaxRegistrationNumber _taxId = taxId)
    {
        taxId = _taxId;
        return taxId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxIdType</Name>
				<Source><![CDATA[
    public str  parmTaxIdType(TaxRegistrationNumber _taxIdType = taxIdType)
    {
        taxIdType = _taxIdType;
        return taxIdType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsoCode</Name>
				<Source><![CDATA[
    public LogisticsAddressCountryRegionISOCode  parmIsoCode(TaxRegistrationNumber _isoCode = isoCode)
    {
        isoCode = _isoCode;
        return isoCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByCustVendInvoiceJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines tax regisration data for the specified element of the global address book.
    /// </summary>
    /// <param name="_custVendInvoiceJour">
    /// Customer/vendor/project invoice journal header.
    /// </param>
    /// <returns>
    /// The <c>SIIGetTaxRegData</c> class.
    /// </returns>
    public static SIIGetTaxRegData findByCustVendInvoiceJour(CustVendInvoiceJour _custVendInvoiceJour)
    {
        DirPartyTable dirPartyTable; 
        const str thirdCountryRegionTaxIDType = '04';

        switch (_custVendInvoiceJour.tableId)
        {
            case tableNum(CustInvoiceJour):
            case tableNum(ProjInvoiceJour):
                CustTable custTable = CustTable::find(_custVendInvoiceJour.InvoiceAccount);
                dirPartyTable = DirPartyTable::findRec(custTable.Party);
                break;
            case tableNum(VendInvoiceJour):
                VendTable vendTable = VendTable::find(_custVendInvoiceJour.InvoiceAccount);
                dirPartyTable = DirPartyTable::findRec(vendTable.Party);
                break;
            default:
        }
        LogisticsPostalAddress postalAddress = DirParty::primaryPostalAddress(dirPartyTable.RecId);

        #ISOCountryRegionCodes
        TaxRegistrationNumber nif, taxId;
        str taxIdType;
        boolean useTAXID;
        TransDate transDate = _custVendInvoiceJour.InvoiceDate;

        if (dirPartyTable.partyType() == DirPartyType::LegalEntity)
        {
            nif         = TaxRegistration::getCompanyTaxRegNum_W(transDate, fieldNum(companyInfo, CoRegNum));
            taxIdType   = '';
            taxId       = '';
        }
        else if (_custVendInvoiceJour.VATNum)
        {
            IntrastatCountryRegionParameters intrastatCountryRegionParameters = IntrastatCountryRegionParameters::find(postalAddress.CountryRegionId);

            if (intrastatCountryRegionParameters)
            {
                switch (intrastatCountryRegionParameters.CountryRegionType)
                {
                    case CountryRegionType::Domestic:
                        nif         = _custVendInvoiceJour.VATNum;
                        taxIdType   = '';
                        taxId       = '';
                        break;

                    case CountryRegionType::EU:
                    case CountryRegionType::ThirdCountryRegion:
                        nif         = '';
                        taxIdType   = thirdCountryRegionTaxIDType;
                        taxId       = _custVendInvoiceJour.VATNum;
                        break;

                    default:
                        useTAXID = true;
                        break;
                }
            }
            else
            {
                useTAXID = true;
            }
        }
        else
        {
            useTAXID = true;
        }

        if (useTAXID)
        {
            nif = TaxRegistration::legislationRegistrationValue(dirPartyTable.recId, TaxRegistrationTypesList::TAXID, transDate, postalAddress.RecId);
        }

        if (!nif && !taxIdType && !taxId)
        {
            //Creates container with matching type of TaxRegistrationTypesList and numbers to report
            container regTypesCon = [[TaxRegistrationTypesList::Passport, '03'],
                [TaxRegistrationTypesList::OfficialIdDoc, '04'],
                [TaxRegistrationTypesList::ResidenceCertificate, '05'],
                [TaxRegistrationTypesList::OtherIdDoc, '06'],
                [TaxRegistrationTypesList::NotCensused,'07']];
            TaxRegistrationTypesList taxRegistrationTypesList;
            str taxIdTypeLocal;

            //Finds the only possible variant of tax registration number
            for (int i = 1; i <= conLen(regTypesCon); i++)
            {
                [taxRegistrationTypesList, taxIdTypeLocal] = conPeek(regTypesCon, i);
                taxId = TaxRegistration::legislationRegistrationValue(dirPartyTable.RecId, taxRegistrationTypesList, transDate, postalAddress.RecId);

                if (taxId)
                {
                    taxIdType = taxIdTypeLocal;
                    break;
                }
            }
        }

        LogisticsAddressCountryRegionISOCode isoCode = LogisticsAddressCountryRegion::find(postalAddress.CountryRegionId).ISOcode;

        var siiGetTaxRegData = new SIIGetTaxRegData();

        siiGetTaxRegData.parmNif(nif);
        siiGetTaxRegData.parmTaxIdType(taxIdType);
        siiGetTaxRegData.parmTaxId(taxId);
        siiGetTaxRegData.parmIsoCode(isoCode);

        return siiGetTaxRegData;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>