<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerAccountRestrictionV2ConsistencyCheck_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransDateOfVATConsistencyCheck</c> is used to copy settings from 
/// <c>LedgerAccountRestriction_CN</c> table to <c>LedgerAccountRestrictionV2_CN</c> table.
/// </summary>
class LedgerAccountRestrictionV2ConsistencyCheck_CN extends SysConsistencyCheck implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        if (LedgerAccountRestrictionV2Feature_CN::isEnabled())
        {
            LedgerAccountRestrictionV2_CN ledgerAccountRestrictionV2;
            select firstonly RecId from ledgerAccountRestrictionV2;

            if (!ledgerAccountRestrictionV2)
            {
                // copy settings only in case there are no records in LedgerAccountRestrictionV2_CN
                this.copySettings();
            }
        }
        else
        {
            warning(strFmt("@LedgerAccountRestrictionV2_CN:CheckConsistencyPrerequisiteMessage", "@LedgerAccountRestrictionV2_CN:FeatureLabel"));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copySettings</Name>
				<Source><![CDATA[
    private void copySettings()
    {
        Counter numOfRecords;
        LedgerAccountRestriction_CN ledgerAccountRestriction;
        LedgerAccountRestrictionV2_CN ledgerAccountRestrictionV2;

        if (this.checkFix() == CheckFix::Fix)
        {
            RecordInsertList ledgerAccountRestrictionV2RecordInsertList = new RecordInsertList(tableNum(LedgerAccountRestrictionV2_CN));

            while select ledgerAccountRestriction
                notexists join ledgerAccountRestrictionV2
                where ledgerAccountRestrictionV2.LedgerVoucherType == ledgerAccountRestriction.LedgerVoucherType
                    && ledgerAccountRestrictionV2.AccountType      == ledgerAccountRestriction.AccountType
                    && ledgerAccountRestrictionV2.AccountCode      == TableGroupAll::Table
                    && ledgerAccountRestrictionV2.AccountRelation  == ''
                    && ledgerAccountRestrictionV2.LedgerDimension  == ledgerAccountRestriction.LedgerDimension
                    && ledgerAccountRestrictionV2.RestrictionType  == ledgerAccountRestriction.RestrictionType
            {
                ledgerAccountRestrictionV2.LedgerVoucherType  = ledgerAccountRestriction.LedgerVoucherType;
                ledgerAccountRestrictionV2.AccountType        = ledgerAccountRestriction.AccountType;
                ledgerAccountRestrictionV2.AccountCode        = TableGroupAll::Table;
                ledgerAccountRestrictionV2.AccountRelation    = '';
                ledgerAccountRestrictionV2.LedgerDimension    = ledgerAccountRestriction.LedgerDimension;
                ledgerAccountRestrictionV2.RestrictionType    = ledgerAccountRestriction.RestrictionType;
                ledgerAccountRestrictionV2RecordInsertList.add(ledgerAccountRestrictionV2);
            }

            numOfRecords = ledgerAccountRestrictionV2RecordInsertList.insertDatabase();
            info(strFmt("@LedgerAccountRestrictionV2_CN:CheckConsistencyResultFixMessage", numOfRecords, "@LedgerAccountRestrictionV2_CN:RestrictionTypeForVoucherV2"));
        }
        else
        {
            select count(RecId) from ledgerAccountRestriction
                notexists join ledgerAccountRestrictionV2
                where ledgerAccountRestrictionV2.LedgerVoucherType == ledgerAccountRestriction.LedgerVoucherType
                    && ledgerAccountRestrictionV2.AccountType      == ledgerAccountRestriction.AccountType
                    && ledgerAccountRestrictionV2.AccountCode      == TableGroupAll::Table
                    && ledgerAccountRestrictionV2.AccountRelation  == ''
                    && ledgerAccountRestrictionV2.LedgerDimension  == ledgerAccountRestriction.LedgerDimension
                    && ledgerAccountRestrictionV2.RestrictionType  == ledgerAccountRestriction.RestrictionType;

            numOfRecords = ledgerAccountRestriction.RecId;
            if (numOfRecords > 0)
            {
                info(strFmt("@LedgerAccountRestrictionV2_CN:CheckConsistencyResultCheckMessage", numOfRecords, "@LedgerAccountRestrictionV2_CN:RestrictionTypeForVoucherV2", CheckFix::Fix));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>treeParentClassId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the Id of the parent class in the tree.
    /// </summary>
    /// <returns>
    /// The Id of the parent class in the tree.
    /// </returns>
    public ClassId treeParentClassId()
    {
        return classNum(LedgerConsistencyCheck);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS54952";
    }

]]></Source>
			</Method>
			<Method>
				<Name>helpText</Name>
				<Source><![CDATA[
    public static HelpTxt helpText()
    {
        return strFmt("@LedgerAccountRestrictionV2_CN:CheckConsistencyHelpText", "@GLS54952", "@LedgerAccountRestrictionV2_CN:RestrictionTypeForVoucherV2");
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>