<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendUnsolicitedVendorSearchRequest</Name>
	<SourceCode>
		<Declaration><![CDATA[
class VendUnsolicitedVendorSearchRequest extends VendSearchRequest
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addProcurementCategoryDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the procurement category data source to the vendor search query.
    /// </summary>
    private void addProcurementCategoryDataSource()
    {
        QueryBuildDataSource    qbdsVendRequestSignUp;
        QueryBuildDataSource    qbdsVendRequestSignUpCategory;
        QueryBuildDataSource    qbdsEcoResCategory;
        List                    list;
        ListEnumerator          items;
        str                     currentItem;
        str                     selectedCategories;

        qbdsVendRequestSignUp = query.dataSourceTable(tablenum(VendRequestSignup));
        qbdsVendRequestSignUpCategory = this.addAttributeDataSouce(qbdsVendRequestSignUp, tablenum(VendRequestSignupCategory), JoinMode::ExistsJoin);
        qbdsEcoResCategory = this.addAttributeDataSouce(qbdsVendRequestSignUpCategory, tablenum(EcoResCategory), JoinMode::ExistsJoin);

        selectedCategories = this.parmProcurementCategory();
        list = new List(Types::String);

        if (selectedCategories != strMin())
        {
            list = strSplit(selectedCategories, ValueDelimiter);
            items = list.getEnumerator();
            while (items.moveNext())
            {
                currentItem = items.current();
                if (currentItem != strMin())
                {
                    this.addSearchCriteriaString(tablenum(EcoResCategory), fieldnum(EcoResCategory, Name), currentItem);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addVendRequestSignUpNameSearchCriteria</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add the specified unsolicited vendor name to the vendor search criteria.
    /// </summary>
    /// <param name="_partyName">
    /// A string value that contains an unsolicited vendor name.
    /// </param>
    private void addVendRequestSignUpNameSearchCriteria(str _partyName)
    {
        QueryBuildDataSource    qbdsVendRequestSignUp;
        List                    list;
        ListEnumerator          items;
        str                     currentItem;

        list = new List(Types::String);
        qbdsVendRequestSignUp = query.dataSourceTable(tablenum(VendRequestSignup));

        if (_partyName != strMin())
        {
            list = strSplit(_partyName, ValueDelimiter);
            items = list.getEnumerator();
            while (items.moveNext())
            {
                currentItem = items.current();
                if (currentItem != strMin())
                {
                    currentItem = FreeTextCharacter + Global::strLRTrim(currentItem) + FreeTextCharacter;
                    qbdsVendRequestSignUp.addRange(fieldnum(VendRequestSignup, Name)).value(
                    strfmt('((%1.%2 LIKE "%5") || (%3.%4 LIKE "%5"))',
                    queryValue(qbdsVendRequestSignUp.name()), fieldstr(VendRequestSignup, Name),
                    queryValue(qbdsVendRequestSignUp.name()), fieldstr(VendRequestSignup, dba),
                    queryValue(currentItem)));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds a query for the search on unsolicited vendor using attributes to create ranges.
    /// </summary>
    /// <returns>
    /// An instance of the <c>Query</c> class.
    /// </returns>
    public Query buildQuery()
    {
        query = new Query(querystr(VendSearchUnsolicitedVendor));

        if (!(Global::strLRTrim(this.parmName()) == strMin()))
        {
            this.addVendRequestSignUpNameSearchCriteria(this.parmName());
        }

        if (Global::strLRTrim(this.parmProcurementCategory()) != strMin())
        {
            this.addProcurementCategoryDataSource();
        }

        this.addRangeMultipleValue(tablenum(VendRequestSignup), fieldnum(VendRequestSignup, City), this.parmAddressCity());
        this.addRangeMultipleValue(tablenum(VendRequestSignup), fieldnum(VendRequestSignup, State), this.parmAddressState());
        this.addRangeMultipleValue(tablenum(VendRequestSignup), fieldnum(VendRequestSignup, CountryRegionId), this.parmAddressCountry());

        //Below lines are common attributes
        this.addSearchCriteriaNoYes(tablenum(VendRequestSignup), fieldnum(VendRequestSignup, FemaleOwned), this.parmFemaleOwned());
        this.addSearchCriteriaNoYes(tablenum(VendRequestSignup), fieldnum(VendRequestSignup, MinorityOwned), this.parmMinorityOwned());
        this.addSearchCriteriaNoYes(tablenum(VendRequestSignup), fieldnum(VendRequestSignup, SmallBusiness), this.parmSmallBusiness());
        this.addSearchCriteriaNoYes(tablenum(VendRequestSignup), fieldnum(VendRequestSignup, LocallyOwned), this.parmLocallyOwned());

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildSearchExpression</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the vendor search expression for unsolicited vendors.
    /// </summary>
    /// <returns>
    /// An empty string value that contains the search expression.
    /// This method implements the parent abstract method declaration,
    /// and for unsolicited vendors the additional search expression should be always empty.
    /// </returns>
    public str buildSearchExpression()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of records for respective vendors on selection of refresh button.
    /// </summary>
    /// <param name="_isAllLEIncluded">
    /// A Boolean value that indicates whether a vendor that belongs to all legal entities is considered
    /// for a vendor search.
    /// </param>
    /// <returns>
    /// An integer value that contains the record count.
    /// </returns>
    public int getResultCount(boolean _isAllLEIncluded)
    {
        TableId  vendRequestTableId = tablenum(VendRequestSignup);
        FieldId  recIdFieldId       = fieldnum(VendRequestSignup, RecId);

        int ret = this.calculateResultCount(vendRequestTableId, recIdFieldId, _isAllLEIncluded);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parse</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parses the specified string pair.
    /// </summary>
    /// <param name="_searchString">
    /// A string value that contains a key and values separated by a comma.
    /// </param>
    /// <returns>
    /// A string value that contains the unparsed value.
    /// </returns>
    public str parse(str _searchString)
    {
        int             positionMaxPair = strlen(_searchString);
        int             positionPair    = 0;
        str             singleAttribute = strMin();
        str             singlevalue     = strMin();
        str             returnString    = strMin();
        VendIgnoreNoYes vendIgnoreNoYes = VendIgnoreNoYes::Ignore;

        if (_searchString != strMin())
        {
            //analyze pair left=right
            positionPair = strfind(_searchString, pairDelimiter, 1, positionMaxPair);
            if (positionPair)
            {
                singleAttribute = substr(_searchString, 1, positionPair -1);
                singlevalue = substr(_searchString, positionPair+1, positionMaxPair - positionPair);
                if (singleAttribute != strMin() && singlevalue != strMin())
                {
                    switch (singleAttribute)
                    {
                        case this.labelName():
                            this.parmName(singlevalue);
                            break;

                        case this.labelCity():
                            this.parmAddressCity(singlevalue);
                            break;

                        case this.labelState():
                            this.parmAddressState(singlevalue);
                            break;

                        case this.labelCountry():
                            this.parmAddressCountry(singlevalue);
                            break;

                        case this.labelMinorityOwner():
                            this.parmMinorityOwned(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelFemaleOwned():
                            this.parmFemaleOwned(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelSmallBusiness():
                            this.parmSmallBusiness(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        case this.labelLocallyOwned():
                            this.parmLocallyOwned(str2enum(vendIgnoreNoYes, singlevalue));
                            break;

                        default:
                            returnString = _searchString;
                            break;
                    }
                }
            }
        }

        return returnString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFormParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets all of the parameters of the specified form.
    /// </summary>
    /// <param name="_form">
    /// An instance of <c>VendSearchCriteria</c> form.
    /// </param>
    public void setFormParameters(FormRun _form)
    {
        // No Unsolicited Vendor specific parameters to set up
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>