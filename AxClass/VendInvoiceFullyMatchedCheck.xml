<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendInvoiceFullyMatchedCheck</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendInvoiceFullyMatchedCheck</c> class provides validation whether the invoices are fully matched or not.
/// </summary>
internal final class VendInvoiceFullyMatchedCheck
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getInvoicesFullyMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets all the invoices with invoice lines reference to PO and three way matching policy are fully matched.
    /// </summary>
    /// <param name = "_invoicesEligibleForMatching">List of invoices to be evaluated.</param>
    /// <param name = "_dataAreaId">Company where these invoices belongs.</param>
    /// <returns>Fully matched list of invoices.</returns>
    internal static VendInvoiceAutomationInvoiceTmp getInvoicesFullyMatched(
        VendInvoiceAutomationInvoiceTmp _invoicesEligibleForMatching,
        DataAreaId _dataAreaId)
    {
        VendInvoiceLineMatchingTmp eligibleVendInvoiceLines;
        PurchLine purchLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceAutomationInvoiceTmp invoicesFullyMatched;

        // Get all the eligible lines for given invoices
        // 1- invoice lines with reference to purchase order lines
        // 2- invoice lines with three way matching policy.
        insert_recordset eligibleVendInvoiceLines (RefRecId, ParmId, TableRefId, ReceiveNow)
            select RecId, ParmId, TableRefId, ReceiveNow from vendInvoiceInfoLine
                exists join _invoicesEligibleForMatching
                    where _invoicesEligibleForMatching.VendInvoiceParmId == vendInvoiceInfoLine.ParmId
                        && _invoicesEligibleForMatching.VendInvoiceTableRefId == vendInvoiceInfoLine.TableRefId
                exists join purchLine
                    where purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
                        && purchLine.MatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch;
        
        VendInvoiceInfoSubLineSumAll vendInvoiceInfoSubLineSumAll;
        
        // Invoices with eligible lines fully matched
        // 1- invoice lines with reference to purchase order lines
        // 2- invoice lines with three way matching policy.
        insert_recordset invoicesFullyMatched(
                VendInvoiceRecId,
                VendInvoiceDataAreaId,
                VendInvoiceParmId,
                VendInvoiceTableRefId,
                VendInvoiceNum)
            select VendInvoiceRecId, VendInvoiceDataAreaId, VendInvoiceParmId, VendInvoiceTableRefId, VendInvoiceNum
            from _invoicesEligibleForMatching
                where _invoicesEligibleForMatching.VendInvoiceDataAreaId == _dataAreaId
            notexists join eligibleVendInvoiceLines
                where eligibleVendInvoiceLines.ParmId == _invoicesEligibleForMatching.VendInvoiceParmId
                    && eligibleVendInvoiceLines.TableRefId == _invoicesEligibleForMatching.VendInvoiceTableRefId
            notexists join vendInvoiceInfoSubLineSumAll
                where vendInvoiceInfoSubLineSumAll.LineRefRecId == eligibleVendInvoiceLines.RefRecId
                    && vendInvoiceInfoSubLineSumAll.SumOfReceiveNow == eligibleVendInvoiceLines.ReceiveNow;
        
        return invoicesFullyMatched;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInvoiceFullyMatched</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates whether given invoice with invoice lines reference to PO and three way matching policy are fully matched.
    /// </summary>
    /// <param name = "_invoiceRecId">Recid of invoice to be evaluated.</param>
    /// <returns>true if the invoice is fully matched; otherwise false.</returns>
    internal static boolean isInvoiceFullyMatched(VendInvoiceInfoTableRecId _invoiceRecId)
    {
        VendInvoiceLineMatchingTmp eligibleVendInvoiceLines;
        PurchLine purchLine;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        VendInvoiceInfoTable vendInvoiceInfoTable;

        // Get all the eligible lines for given invoice
        // 1- invoice lines with reference to purchase order lines
        // 2- invoice lines with three way matching policy.
        insert_recordset eligibleVendInvoiceLines (RefRecId, ParmId, TableRefId, ReceiveNow)
            select RecId, ParmId, TableRefId, ReceiveNow from vendInvoiceInfoLine
                exists join vendInvoiceInfoTable
                    where vendInvoiceInfoTable.Recid == _invoiceRecId
                        && vendInvoiceInfoTable.ParmId == vendInvoiceInfoLine.ParmId
                        && vendInvoiceInfoTable.TableRefId == vendInvoiceInfoLine.TableRefId
                exists join purchLine
                    where purchLine.RecId == vendInvoiceInfoLine.PurchLineRecId
                        && purchLine.MatchingPolicy == PurchMatchingPolicyOption::ThreeWayMatch;

        VendInvoiceInfoSubLineSumAll vendInvoiceInfoSubLineSumAll;
        boolean isInvoiceFullyMatched = false;

        // Invoice with eligible lines fully matched
        // 1- invoice lines with reference to purchase order lines
        // 2- invoice lines with three way matching policy.
        select RecId from vendInvoiceInfoTable
            where vendInvoiceInfoTable.Recid == _invoiceRecId
            notexists join eligibleVendInvoiceLines
                where eligibleVendInvoiceLines.ParmId == vendInvoiceInfoTable.ParmId
                    && eligibleVendInvoiceLines.TableRefId == vendInvoiceInfoTable.TableRefId
            notexists join vendInvoiceInfoSubLineSumAll
                where vendInvoiceInfoSubLineSumAll.LineRefRecId == eligibleVendInvoiceLines.RefRecId
                    && vendInvoiceInfoSubLineSumAll.SumOfReceiveNow ==  eligibleVendInvoiceLines.ReceiveNow;

        if(vendInvoiceInfoTable.RecId != 0)
        {
            isInvoiceFullyMatched = true;
        }

        return isInvoiceFullyMatched;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>