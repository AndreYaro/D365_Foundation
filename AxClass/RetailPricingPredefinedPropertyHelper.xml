<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailPricingPredefinedPropertyHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// A helper class to categorize all predefined properties, indicating their level, source and mandatory.
/// </summary>
internal final class RetailPricingPredefinedPropertyHelper
{
    private static const container predefinedProperties = [
        [RetailPricingPredefinedProperty::Channel, RetailPricingPropertyLevel::Header, RetailPricingPropertySource::SalesOrderHeader],
        [RetailPricingPredefinedProperty::Customer, RetailPricingPropertyLevel::Header, RetailPricingPropertySource::SalesOrderHeader],
        [RetailPricingPredefinedProperty::Category, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::SalesOrderLine],
        [RetailPricingPredefinedProperty::Product, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::SalesOrderLine],
        [RetailPricingPredefinedProperty::Variant, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::SalesOrderLine],
        [RetailPricingPredefinedProperty::UnitOfMeasure, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::SalesOrderLine],
        [RetailPricingPredefinedProperty::Affiliation, RetailPricingPropertyLevel::Header, RetailPricingPropertySource::Customer],
        [RetailPricingPredefinedProperty::LoyaltyTier, RetailPricingPropertyLevel::Header, RetailPricingPropertySource::Customer],
        [RetailPricingPredefinedProperty::DeliveryMode, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::SalesOrderLine],
        [RetailPricingPredefinedProperty::Site, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::SalesOrderLine],
        [RetailPricingPredefinedProperty::Warehouse, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::SalesOrderLine],
        [RetailPricingPredefinedProperty::Catalog, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::SalesOrderLine],
        [RetailPricingPredefinedProperty::Style, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::Product],
        [RetailPricingPredefinedProperty::Size, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::Product],
        [RetailPricingPredefinedProperty::Color, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::Product],
        [RetailPricingPredefinedProperty::Configuration, RetailPricingPropertyLevel::Line, RetailPricingPropertySource::Product],
        [RetailPricingPredefinedProperty::CustomerGroup, RetailPricingPropertyLevel::Header, RetailPricingPropertySource::Customer]
    ];

    private static const container predefinedPropertyFieldNum = [
        // Headers
        [RetailPricingPredefinedProperty::Channel, fieldNum(RetailPriceGroupApplicabilityRule, RetailChannelTableRefRecId)],
        [RetailPricingPredefinedProperty::Customer, fieldNum(RetailPriceGroupApplicabilityRule, CustTableRefRecId)],
        [RetailPricingPredefinedProperty::Affiliation, fieldNum(RetailPriceGroupApplicabilityRule, RetailAffiliationRefRecId)],
        [RetailPricingPredefinedProperty::LoyaltyTier, fieldNum(RetailPriceGroupApplicabilityRule, RetailLoyaltyTierRefRecId)],
        [RetailPricingPredefinedProperty::CustomerGroup, fieldNum(RetailPriceGroupApplicabilityRule, CustGroupRefRecId)],

        // Lines
        [RetailPricingPredefinedProperty::Category, fieldNum(RetailDiscountApplicabilityRule, EcoResCategoryRefRecId)],
        [RetailPricingPredefinedProperty::Product, fieldNum(RetailDiscountApplicabilityRule, EcoResProductRefRecId)],
        [RetailPricingPredefinedProperty::Variant, fieldNum(RetailDiscountApplicabilityRule, EcoResDistinctProductVariantRefRecId)],
        [RetailPricingPredefinedProperty::UnitOfMeasure, fieldNum(RetailDiscountApplicabilityRule, UnitOfMeasureSymbol)],
        [RetailPricingPredefinedProperty::DeliveryMode, fieldNum(RetailDiscountApplicabilityRule, DlvModeCode)],
        [RetailPricingPredefinedProperty::Site, fieldNum(RetailDiscountApplicabilityRule, InventSiteId)],
        [RetailPricingPredefinedProperty::Warehouse, fieldNum(RetailDiscountApplicabilityRule, InventLocationId)],
        [RetailPricingPredefinedProperty::Catalog, fieldNum(RetailDiscountApplicabilityRule, CatalogRefRecId)],
        [RetailPricingPredefinedProperty::Style, fieldNum(RetailDiscountApplicabilityRule, EcoResStyleName)],
        [RetailPricingPredefinedProperty::Size, fieldNum(RetailDiscountApplicabilityRule, EcoResSizeName)],
        [RetailPricingPredefinedProperty::Color, fieldNum(RetailDiscountApplicabilityRule, EcoResColorName)],
        [RetailPricingPredefinedProperty::Configuration, fieldNum(RetailDiscountApplicabilityRule, EcoResConfigurationName)]
    ];

    /// <summary>
    /// We have a few properties that are mandatory - which cannot be deleted.
    /// </summary>
    private static const container mandatoryProperties = [
        RetailPricingPredefinedProperty::Category, RetailPricingPredefinedProperty::Product, RetailPricingPredefinedProperty::Variant
    ];
    
    /// <summary>
    /// 6 properties are added automatically when the feature is enabled - we call them seed property.
    /// </summary>
    private static const container seedProperties = [
        RetailPricingPredefinedProperty::Channel, RetailPricingPredefinedProperty::Affiliation, RetailPricingPredefinedProperty::LoyaltyTier,
        RetailPricingPredefinedProperty::Category, RetailPricingPredefinedProperty::Product, RetailPricingPredefinedProperty::Variant
    ];

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getPredefinedPropertyLevel</Name>
				<Source><![CDATA[
    internal static RetailPricingPropertyLevel getPredefinedPropertyLevel(RetailPricingPredefinedProperty property)
    {
        if (property == RetailPricingPredefinedProperty::None)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        container propertyDefinition = conPeek(predefinedProperties, enum2int(property));

        return conPeek(propertyDefinition, 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPredefinedPropertySource</Name>
				<Source><![CDATA[
    internal static RetailPricingPropertySource getPredefinedPropertySource(RetailPricingPredefinedProperty property)
    {
        if (property == RetailPricingPredefinedProperty::None)
        {
            throw Error(Error::wrongUseOfFunction(funcName()));
        }

        container propertyDefinition = conPeek(predefinedProperties, enum2int(property));

        return conPeek(propertyDefinition, 3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPredefinedPropertyFieldNum</Name>
				<Source><![CDATA[
    internal static FieldId getPredefinedPropertyFieldNum(RetailPricingPredefinedProperty property)
    {
        for (int idx = 1; idx <= conLen(predefinedPropertyFieldNum); idx++)
        {
            container definition = conPeek(predefinedPropertyFieldNum, idx);
            if (conPeek(definition, 1) == property)
            {
                return conPeek(definition, 2);
            }
        }

        throw Error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMandatoryProperty</Name>
				<Source><![CDATA[
    internal static boolean isMandatoryProperty(RetailPricingPredefinedProperty property)
    {
        return conFind(mandatoryProperties, property) > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getMandatoryProperties</Name>
				<Source><![CDATA[
    internal static container getMandatoryProperties()
    {
        return mandatoryProperties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSeedProperties</Name>
				<Source><![CDATA[
    internal static container getSeedProperties()
    {
        return seedProperties;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>