<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Transfer</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventMov_Transfer extends InventMovement
{
    InventTransferLine  inventTransferLine;
    InventTransferTable inventTransferTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountBalanceSheet()
    {
        if (! cacheAccountBalanceSheet)
        {
            if (InventPostingExtendParm_CN::checkExtendParmEnabled())
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventReceipt,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().itemGroupId());
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemExtendParm_CN(
                        InventAccountType::InventIssue,
                        InventPostingExtendParm_CN::constructInventDim(this.inventdim()),
                        this.itemId(),
                        this.inventTable().itemGroupId());
                }
            }
            else
            {
                if (this.transQty() >= 0)
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventReceipt));
                }
                else
                {
                    cacheAccountBalanceSheet = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventIssue));
                }
            }
        }

        return cacheAccountBalanceSheet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountOperations</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount accountOperations()
    {
        if (! cacheAccountOperations)
        {

            if (this.transQty() >= 0)
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventInterUnitPayable));
            }
            else
            {
                cacheAccountOperations = InventPosting::itemLedgerDimensionFromParameter(this.createInventPostingItemLedgerDimensionParameters(InventAccountType::InventInterUnitReceivable));
            }
        }

        return cacheAccountOperations;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canAutoReserveOnorderChangeInventDim</Name>
				<Source><![CDATA[
    public boolean canAutoReserveOnorderChangeInventDim()
    {
        return this.canBeReserved() && this.mustBeAutoReserved();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeAutoRepAsFinished</Name>
				<Source><![CDATA[
    public boolean  canBeAutoRepAsFinished()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventLocations</Name>
				<Source><![CDATA[
    public boolean  canBeOnAllInventLocations()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnAllInventSites</Name>
				<Source><![CDATA[
    public boolean  canBeOnAllInventSites()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkInventLocationId</Name>
				<Source><![CDATA[
    abstract protected boolean checkInventLocationId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdateEstimated</Name>
				<Source><![CDATA[
    public boolean checkUpdateEstimated(
        InventUpd_Estimated     _updateNow,
        InventMovement          _this_orig)
    {
        if (this.inventMovSubType() != InventMovSubType::None)
        {
            return true;
        }

        if (!this.isTransQtyPositive())
        {
            return checkFailed("@SYS78485");
        }

        if (this.isRemainPhysicalNegative())
        {
            return checkFailed("@SYS78942");
        }

        if (!this.inventDimGroupSetup().isDimensionActive(fieldNum(InventDim,InventLocationId)))
        {
            return checkFailed(strFmt("@SYS78486",fieldPName(InventDim,InventLocationId)));
        }

        if (! this.checkInventLocationId())
        {
            return false;
        }

        return super(_updateNow, _this_orig);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransQtyPositive</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if transaction quantity is positive.
    /// </summary>
    /// <returns>true if positive; false otherwise.</returns>
    protected boolean isTransQtyPositive()
    {
        return this.transQty() * this.transSign() > 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRemainPhysicalNegative</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if remaining physical quantity is negative.
    /// </summary>
    /// <returns>true if negative; false otherwise.</returns>
    protected boolean isRemainPhysicalNegative()
    {
        return this.remainPhysical() * this.transSign() < 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePicked</Name>
				<Source><![CDATA[
    public boolean checkUpdatePicked(InventUpd_Picked _updateNow)
    {
        boolean ok = true;

        if (this.transQtyUnit() == 0)
        {
            ok = checkFailed("@SYS12170");
        }

        ok = super(_updateNow) && ok;

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>correctionSwapOnItem_RU</Name>
				<Source><![CDATA[
    protected boolean correctionSwapOnItem_RU(Amount _amount)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return InventSite::changeDimension(this.inventTableDefaultDimension(), this.inventDim().InventSiteId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTableDefaultDimension</Name>
				<Source><![CDATA[
    protected LedgerDefaultDimensionValueSet inventTableDefaultDimension()
    {
        return this.inventTable().DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the postal delivery address of the inventory movement.
    /// </summary>
    /// <returns>
    ///    An ID of a <c>LogisticsPostalAddress</c> record; otherwise 0.
    /// </returns>
    /// <remarks>
    ///    Only used for shipping deliveries such as sales orders and transfer orders etc.
    /// </remarks>
    protected LogisticsPostalAddressRecId deliveryPostalAddress()
    {
        return inventTransferTable.ToPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvMode</Name>
				<Source><![CDATA[
    protected DlvModeId dlvMode()
    {
        return inventTransferTable.DlvModeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dlvTerm</Name>
				<Source><![CDATA[
    protected DlvTermId dlvTerm()
    {
        return inventTransferTable.DlvTermId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>financialUpdateReceiptQty_IN</Name>
				<Source><![CDATA[
    public container financialUpdateReceiptQty_IN(InventTrans _inventTrans)
    {
        InventQty               qty;
        InventQty               cwQty;
        InventTransferParmLine  inventTransferParmLine;
        InventTransferParmTable inventTransferParmTable;

        if (inventTransferLine.checkForUnitID_IN())
        {
            select firstonly ParmId, QtyShipNow, QtyReceiveNow, PdsCWQtyShipNow, PdsCWQtyReceiveNow
                from inventTransferParmLine
                where inventTransferParmLine.ParmId == this.parmInventParmID_IN()
                join UpdateType from inventTransferParmTable
                    where inventTransferParmTable.ParmId == inventTransferParmLine.ParmId;

            qty = inventTransferParmLine.qtyNowByUpdateType(inventTransferParmTable.UpdateType);
            cwQty = inventTransferParmLine.pdsCWQtyNowByUpdateType(inventTransferParmTable.UpdateType);
        }
        else
        {
            return super(_inventTrans);
        }

        return [qty, cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>freightSlipType</Name>
				<Source><![CDATA[
    protected FreightSlipType freightSlipType()
    {
        return inventTransferTable.FreightSlipType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>freightZone</Name>
				<Source><![CDATA[
    protected FreightZoneId freightZone()
    {
        return inventTransferTable.FreightZoneId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyPreForNotOverDeliveryCheck_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets quantity preservation for not over delivery check.
    /// </summary>
    /// <returns>
    /// The instance of the <c>UnitQty</c> class.
    /// </returns>
    protected UnitQty getQtyPreForNotOverDeliveryCheck_IN()
    {
        UnitQty ret;

        if (inventTransferLine.checkForUnitID_IN())
        {
            ret = abs(inventTransferLine.converUnit_IN(inventTransferLine.QtyTransfer * this.transSign()));
        }
        else
        {
            ret = super();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyRemainReceive</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quantity that remains to be received.
    /// </summary>
    /// <returns>
    ///     A quantity value.
    /// </returns>
    public InventQty getQtyRemainReceive()
    {
        return inventTransferLine.QtyRemainReceive * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQtyRemainShip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the quantity that remains to be shipped.
    /// </summary>
    /// <returns>
    ///     A quantity value.
    /// </returns>
    public InventQty getQtyRemainShip()
    {
        return inventTransferLine.QtyRemainShip * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimFrom</Name>
				<Source><![CDATA[
    abstract protected InventDim inventDimFrom()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmMatchTransferTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventDimParm</c> table buffer that is used to find the related <c>InventTrans</c>
    ///    records.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimParm</c> table buffer.
    /// </returns>
    /// <remarks>
    ///    This method is used for movements that represent transfers.
    /// </remarks>
    public InventDimParm inventDimParmMatchTransferTrans()
    {
        InventDimParm inventDimParmMatchTransferTrans;
         // we want to search for an exact match on dimensions that are being transferred, which also means match on blank dimensions.
        inventDimParmMatchTransferTrans.setAllInventDim();
        //clear non transferable dimensions since we don't need to look for these when we look for related transactions
        inventDimParmMatchTransferTrans.clearNonTransferReceiptMergeable();

        return inventDimParmMatchTransferTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimTo</Name>
				<Source><![CDATA[
    abstract protected InventDim inventDimTo()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isStockTransfer_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the transfer type is stock transfer.
    /// </summary>
    /// <returns>
    /// Returns true if the transfer type is stock transfer.
    /// </returns>
    protected boolean isStockTransfer_IN()
    {
        boolean ret;

        if (inventTransferTable.TransferType_IN == TransferType_IN::StockTransfer)
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTransfer</Name>
				<Source><![CDATA[
    // returns true if the movement is a transfer of items. This includes transfer orders and quarantine orders
    public NoYes isTransfer()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemDescription</Name>
				<Source><![CDATA[
    public ItemFreeTxt itemDescription()
    {
        return inventTransferLine.itemName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    public ItemId  itemId()
    {
        return inventTransferLine.ItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeAutoReserved</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the <c>inventMovement</c> object must be auto-reserved.
    /// </summary>
    /// <returns>
    ///    true if the <c>inventMovement</c> object must be auto-reserved; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    This method is often called together with the <c>canBeReserved</c> method, which returns a default
    ///    Boolean value from the <c>inventType</c> class hierarchy.
    /// </remarks>
    public boolean  mustBeAutoReserved()
    {
        return inventTransferLine.AutoReservation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinancially</Name>
				<Source><![CDATA[
    public boolean  mustBeBookedFinancially()
    {
        // <GEERU>
        InventMovement  movementIssue;
        InventMovement  movementReceipt;

        // <GIN>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN])
            && this.isStockTransfer_IN()
            && inventTransferTable.StockTransferCostPriceHandlingImprovement_IN == NoYes::No)
        {
            return false;
        }
        // </GIN>

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            switch (classIdGet(this))
            {
                case classNum(InventMov_TransferFrom):
                    movementIssue   = this;
                    movementReceipt = InventMovement::construct(this.buffer(), InventMovSubType::TransferOrderTransitTo, this.childBuffer());
                    break;
                case classNum(InventMov_TransferTo):
                    movementIssue   = InventMovement::construct(this.buffer(), InventMovSubType::TransferOrderTransitFrom, this.childBuffer());
                    movementReceipt = this;
                    break;
                case classNum(InventMov_TransferTransitFrom):
                    movementIssue   = this;
                    movementReceipt = InventMovement::construct(this.buffer(), InventMovSubType::TransferOrderTo, this.childBuffer());
                    break;
                case classNum(InventMov_TransferTransitTo):
                    movementIssue   = InventMovement::construct(this.buffer(), InventMovSubType::None, this.childBuffer());
                    movementReceipt = this;
                    break;
            }

            if ( movementIssue                                                                  &&
                 movementReceipt                                                                &&
                (movementIssue.accountBalanceSheet() != movementReceipt.accountBalanceSheet()   ||
                 movementIssue.defaultDimension()    != movementReceipt.defaultDimension()))
            {
                return true;
            }

            if (!InventParameters::find().EnableTransferFinancialPosting_RU)
            {
                return false;
            }
        }
        // </GEERU>

        // transfer orders created in version 4 and before didn't have separate transaction ids for transit warehouse
        if (inventTransferLine.InventTransId == inventTransferLine.InventTransIdTransitTo)
        {
            return false;
        }

        if (!super())
        {
            return false;
        }

        InventDim inventDimShip = this.inventDimFrom();
        InventDim inventDimReceive = this.inventDimTo();

        InventDimGroupFieldSetup inventDimGroupFieldSetup = this.inventDimGroupSetup().getFieldSetup(fieldNum(InventDim, InventLocationId));

        if (inventDimShip.InventSiteId != inventDimReceive.InventSiteId
            || (inventDimGroupFieldSetup != null
                && inventDimGroupFieldSetup.isFinancialInventoryEnabled()
                && TransferFinancialWarehousePostVoucherToggle::instance().isEnabled()
                && !TransferFinancialWarehouseSkipVoucherToggle::instance().isEnabled()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedFinanciallyForLedgerUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the invent movement must be booked financially during ledger update.
    /// </summary>
    /// <returns>
    /// true if it must be booked; otherwise, false.
    /// </returns>
    protected boolean mustBeBookedFinanciallyForLedgerUpdate()
    {
        return this.mustBeBookedFinancially();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeBookedPhysically</Name>
				<Source><![CDATA[
    public boolean  mustBeBookedPhysically()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeRemainControlled</Name>
				<Source><![CDATA[
    public boolean  mustBeRemainControlled()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeSameTransSign</Name>
				<Source><![CDATA[
    public boolean mustBeSameTransSign()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTableCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the movement can update the cost price on the related <c>InventTable</c> table.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    public boolean mustUpdateInventTableCostPrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(
        InventTransferLine   _inventTransferLine,
        InventType           _inventType = new InventType(_inventTransferLine))
    {
        inventTransferLine  = _inventTransferLine;
        inventTransferTable = InventTransferTable::find(_inventTransferLine.TransferId);

        super(inventTransferLine,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overDeliveryPct</Name>
				<Source><![CDATA[
    public Percent overDeliveryPct()
    {
        if (! InventParameters::find().InventTransferOverDelivery)
        {
            return 0;
        }

        return inventTransferLine.OverDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsAdjustInventoryQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the inventory quantity on the <c>InventJournalTrans</c> record.
    /// </summary>
    /// <param name="_inventQty">
    /// A quantity in inventory units.
    /// </param>
    public void pdsAdjustInventoryQuantity(InventQty _inventQty)
    {
        if (inventTransferLine.PdsCWQtyRemainShip)
        {
            this.setQtyRemainShip(this.getQtyRemainShip()       + _inventQty);
        }
        if (inventTransferLine.PdsCWQtyRemainReceive)
        {
            this.setQtyRemainReceive(this.getQtyRemainReceive() + _inventQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWIsBufferInWeightAdjustment</Name>
				<Source><![CDATA[
    private boolean pdsCWIsBufferInWeightAdjustment()
    {
        if (!this.pdsCWItem())
        {
            return false;
        }

        InventTransferLine inventTransferLineOrig = inventTransferLine.orig();
        InventQty deltaQty = inventTransferLineOrig.QtyRemainShip - inventTransferLine.QtyRemainShip;
        PdsCWInventQty deltaCWQty = inventTransferLineOrig.PdsCWQtyRemainShip - inventTransferLine.PdsCWQtyRemainShip;

        if (deltaQty && !deltaCWQty)
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWSetTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the catch weight transaction quantity.
    /// </summary>
    /// <param name="_qty">
    /// A catch weight quantity to set.
    /// </param>
    public void pdsCWSetTransQty(PdsCWInventQty _qty)
    {
        inventTransferLine.PdsCWQtyTransfer = _qty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the catch weight transaction quantity.
    /// </summary>
    /// <returns>
    /// The catch weight quantity.
    /// </returns>
    public PdsCWInventQty pdsCWTransQty()
    {
        return inventTransferLine.PdsCWQtyTransfer * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsMustConsiderBatchAttrib</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if batch attributes should be concerned for reservation
    /// </summary>
    /// <returns>
    /// true if batch attributes should be concerned for reservation; otherwise, false.
    /// </returns>
    public PdsBatchAttribAutoRes pdsMustConsiderBatchAttrib()
    {
        return pdsUseBAForRes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalUpdateIssueRemainQty_IN</Name>
				<Source><![CDATA[
    public container physicalUpdateIssueRemainQty_IN(InventTrans _inventTrans)
    {
        InventQty               qty;
        InventQty               cwQty;
        InventTransferParmLine  inventTransferParmLine;
        InventTransferParmTable inventTransferParmTable;

        if (inventTransferLine.checkForUnitID_IN())
        {
            select firstonly ParmId, QtyShipNow, QtyReceiveNow, PdsCWQtyShipNow, PdsCWQtyReceiveNow
                from inventTransferParmLine
                where inventTransferParmLine.ParmId == this.parmInventParmID_IN()
                join UpdateType from inventTransferParmTable
                    where inventTransferParmTable.ParmId == inventTransferParmLine.ParmId;

            qty = inventTransferParmLine.qtyNowByUpdateType(inventTransferParmTable.UpdateType);
            cwQty = inventTransferParmLine.pdsCWQtyNowByUpdateType(inventTransferParmTable.UpdateType);
        }
        else
        {
            return super(_inventTrans);
        }

        return [qty, cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalUpdateReceiptRemainQty_IN</Name>
				<Source><![CDATA[
    public container physicalUpdateReceiptRemainQty_IN(InventTrans _inventTrans)
    {
        InventQty               qty;
        InventQty               cwQty;
        InventTransferParmLine  inventTransferParmLine;
        InventTransferParmTable inventTransferParmTable;

        if (inventTransferLine.checkForUnitID_IN())
        {
            select firstonly ParmId, QtyShipNow, QtyReceiveNow, PdsCWQtyShipNow, PdsCWQtyReceiveNow
                from inventTransferParmLine
                where inventTransferParmLine.ParmId == this.parmInventParmID_IN()
                join UpdateType from inventTransferParmTable
                    where inventTransferParmTable.ParmId == inventTransferParmLine.ParmId;

            qty = inventTransferParmLine.qtyNowByUpdateType(inventTransferParmTable.UpdateType);
            cwQty = inventTransferParmLine.pdsCWQtyNowByUpdateType(inventTransferParmTable.UpdateType);

            if (inventTransferParmTable.UpdateType == InventTransferUpdateType::Receive)
            {
                qty = -qty;
                cwQty = -cwQty;
            }
        }
        else
        {
            return super(_inventTrans);
        }

        return [qty, cwQty];
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingBalanceSheet</Name>
				<Source><![CDATA[
    public LedgerPostingType postingBalanceSheet()
    {
        if (this.transQty() >= 0)
        {
            return LedgerPostingType::InventReceipt;
        }

        return LedgerPostingType::InventIssue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postingOperations</Name>
				<Source><![CDATA[
    public LedgerPostingType postingOperations()
    {
        if (this.transQty() >= 0)
        {
            return LedgerPostingType::InventInterUnitPayable;
        }

        return LedgerPostingType::InventInterUnitReceivable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveQty</Name>
				<Source><![CDATA[
    public InventQty   reserveQty()
    {
        if (this.transSign() > 0)
        {
            return 0;
        }

        if (! inventTransferLine.AutoReservation)
        {
            return 0;
        }

        return abs(inventTransferLine.QtyRemainShip) * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnedSpecialCheckUpdate_RU</Name>
				<Source><![CDATA[
    UnknownNoYes returnedSpecialCheckUpdate_RU(UnknownNoYes _returnedSpecialCheckUpdate = returnedSpecialCheckUpdate)
    {
        returnedSpecialCheckUpdate = _returnedSpecialCheckUpdate;
        return returnedSpecialCheckUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyRemainReceive</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the remaining quantity to be received.
    /// </summary>
    /// <param name="_qtyRemainReceive">
    ///     The quantity to set.
    /// </param>
    public void setQtyRemainReceive(InventQty _qtyRemainReceive)
    {
        inventTransferLine.QtyRemainReceive = _qtyRemainReceive * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQtyRemainShip</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets the remaining quantity to be shipped.
    /// </summary>
    /// <param name="_qtyRemainShip">
    ///     The quantity to set.
    /// </param>
    public void setQtyRemainShip(InventQty _qtyRemainShip)
    {
        inventTransferLine.QtyRemainShip = _qtyRemainShip * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    public void setTransQty(InventQty  _qtyInvent)
    {
        inventTransferLine.QtyTransfer = _qtyInvent * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subDeliveryPct</Name>
				<Source><![CDATA[
    protected Percent subDeliveryPct()
    {
        if (!InventParameters::find().InventTransferUnderDelivery)
        {
            return 0;
        }

        return inventTransferLine.UnderDeliveryPct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferIssueCostPriceInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    ///    For a transfer issue the inventory dimension are returned.
    /// </summary>
    /// <returns>
    ///    The inventory dimension where the transfer was issued.
    /// </returns>
    /// <remarks>
    ///    Only the inventory dimension of the originating buffer are returned.
    /// </remarks>
    public InventDim transferIssueCostPriceInventDim()
    {
        return inventTransferLine.inventDim();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transIdSum</Name>
				<Source><![CDATA[
    public InventTransIdSum transIdSum(boolean _reRead = false)
    {
        if (! transIdSum || _reRead)
        {
            transIdSum = InventTransIdSum_InventLocation::newStandard(this.inventTransOriginId(), this.transChildType() != InventTransChildType::None, this.transChildType(), this.transChildRefId());
        }

        return transIdSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transIdSumTransId</Name>
				<Source><![CDATA[
    protected InventTransIdSum transIdSumTransId(boolean _reRead = false)
    {
        if (this.transChildType() != InventTransChildType::None)
        {
            if (! transIdSumTransId || _reRead)
            {
                transIdSumTransId = InventTransIdSum_InventLocation::newStandard(this.inventTransOriginId());
            }
        }
        else
        {
            transIdSumTransId = this.transIdSum(_reRead);
        }

        return transIdSumTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transInventRefType</Name>
				<Source><![CDATA[
    public InventRefType transInventRefType()
    {
        return  InventRefType::InventTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    public InventQty   transQty()
    {
        return inventTransferLine.QtyTransfer * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    public InventTransRefId transRefId()
    {
        return inventTransferLine.TransferId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLedgerFinancial</Name>
				<Source><![CDATA[
    public CostAmount updateLedgerFinancial(
        LedgerVoucher           _ledgerVoucher,
        InventUpd_Financial     _updateNow,
        boolean                 _allowNegative = false)
    {
        CostAmount costAmountMST;
        // Creating ledger transactions
        if (this.mustBeBookedFinanciallyForLedgerUpdate())
        {
            costAmountMST = super(_ledgerVoucher, _updateNow, _allowNegative);
        }
        else
        {
            if (_updateNow.parmFinancial() > 0 || 
                (!(SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]) || BrazilParameters::isEnabled()) 
                 && this.isReturned(_updateNow.parmFinancial())))
            {
                if (_updateNow.parmCurrencyCode() != CompanyInfoHelper::standardCurrency())
                {
                    throw error("@SYS2009");
                }

                costAmountMST = _updateNow.parmCostAmountCur();

                _updateNow.updOperationsAmountLedger(-_updateNow.parmCostAmountCur());
            }
            else
            {
                costAmountMST = 0;
            }
        }
        return costAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useParmLineDefaultDimension_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines is parm line default dimension should be used.
    /// </summary>
    /// <returns>true if Parm line Default dimension shoud be used for posting; otherwise false.</returns>
    protected boolean useParmLineDefaultDimension_IN()
    {
        boolean useParmLineDefaultDimension;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            InventTransferTable locInventTransferTable = inventTransferLine.inventTransferTable();

            if (locInventTransferTable.TransferType_IN == TransferType_IN::StockTransfer &&
                locInventTransferTable.StockTransferCostPriceHandlingImprovement_IN == NoYes::No)
            {
                useParmLineDefaultDimension = true;
            }
        }

        return useParmLineDefaultDimension;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>