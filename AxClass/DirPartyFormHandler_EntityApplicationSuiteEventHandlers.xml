<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DirPartyFormHandler_EntityApplicationSuiteEventHandlers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Application Suite module event handlers for the <c>DirPartyFormHandler_Entity</c> class events.
/// </summary>
public final class DirPartyFormHandler_EntityApplicationSuiteEventHandlers
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>defaultingPartyTypeFromTableIdEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assigns the default party type based on the <c>TableId</c> from the event.
    /// </summary>
    /// <param name = "_callerTableId">The <c>TableId</c> of the calling record.</param>
    /// <param name = "_partyTypeResult">The <c>EventHandlerResult</c> object containing the result from the subscribing event handlers.</param>
    [SubscribesTo(classStr(DirPartyFormHandler_Entity), delegateStr(DirPartyFormHandler_Entity, onDefaultingPartyTypeFromTableId))]
    public static void defaultingPartyTypeFromTableIdEventHandler(TableId _callerTableId, EventHandlerResult _partyTypeResult)
    {
        _partyTypeResult.result(DirAppParameters::defaultPartyType(_callerTableId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSkipRecordTemplateValuesForDerivedTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Allow templates for tables using inheritance for <c>DirPartyTable</c> alone.
    /// </summary>
    /// <param name = "_formRunContext">Form context instance.</param>
    /// <param name = "_derivedTableId">Tables used in the template.</param>
    /// <param name = "_acceptTemplateValuesForDerivedTable">Whether to accept templates for the table.</param>
    [SubscribesTo(classStr(SysRecordTemplate), delegateStr(SysRecordTemplate, onSkipRecordTemplateValuesForDerivedTable))]
    static public void onSkipRecordTemplateValuesForDerivedTable(xFormRun _formRunContext, TableId _derivedTableId, EventHandlerAcceptResult _acceptTemplateValuesForDerivedTable)
    {
        if (VendTableFormCopyLanguageFromTemplateFlight::instance().isEnabled() 
            && _formRunContext 
            && _formRunContext.form() 
            && _formRunContext.form().name() == formStr(VendTable))
        {
            SysDictTable derivedTable = new SysDictTable(_derivedTableId);

            if (derivedTable.isDerivedFrom(tableStr(DirPartyTable)))
            {
                _acceptTemplateValuesForDerivedTable.accept();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onCopyingTemplateFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// By default, all fields which allow edit on create and which are not themselves unique, will be copied. To exclude a specific field, then subscribe
    /// to this delegate.
    /// </summary>
    /// <param name = "_formRunContext">FormRun context for the templates in question.</param>
    /// <param name = "_tableId">The table ID for the field being considered for copying.</param>
    /// <param name = "_fieldId">The field ID for the field being considered for copying.</param>
    /// <param name = "_rejectRecordTemplateForDerivedTable">Whether to reject (override the default) copying the field in question.</param>
    [SubscribesTo(classStr(SysRecordTemplate), delegateStr(SysRecordTemplate, onCopyingTemplateFieldValue))]
    public static void onCopyingTemplateFieldValue(xFormRun _formRunContext, 
        TableId _tableId, 
        FieldId _fieldId, 
        EventHandlerRejectResult _rejectRecordTemplateForDerivedTable)
    {
        if (VendTableFormCopyLanguageFromTemplateFlight::instance().isEnabled() 
            && _formRunContext 
            && _formRunContext.form() 
            && _formRunContext.form().name() == formStr(VendTable))
        {
            SysDictTable table = new SysDictTable(_tableId);

            if (table.isDerivedFrom(tableStr(DirPartyTable)))
            {
                if (fieldName2Id(tableNum(DirPartyTable), fieldStr(DirPartyTable, LanguageId)) != _fieldId)
                {
                    _rejectRecordTemplateForDerivedTable.reject();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>