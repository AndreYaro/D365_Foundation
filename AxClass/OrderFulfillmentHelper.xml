<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OrderFulfillmentHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
public static class OrderFulfillmentHelper
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOrUpdateSplitQuantitySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update a sales line based on quantity information.
    /// This method is used to support sales line splitting.
    /// </summary>
    /// <param name = "_salesOrder">Sales header record.</param>
    /// <param name = "_originalSalesLine">Original sales line.</param>
    /// <param name = "_quantity">Line quantity.</param>
    /// <param name = "_isUpdateOriginalLine">True if it is an update of the original sales line; false, otherwise.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static SalesLine createOrUpdateSplitQuantitySalesLine(SalesTable _salesOrder, SalesLine _originalSalesLine, Qty _quantity, boolean _isUpdateOriginalLine)
    {
        Qty originalQty = _originalSalesLine.SalesQty;
        str originalInventTransId = _originalSalesLine.InventTransId;
        SalesLine currentSalesLine;

        ttsbegin;

        if (_isUpdateOriginalLine)
        {
            currentSalesLine = _originalSalesLine;
            if (_originalSalesLine.QtyOrdered != _quantity)
            {
                currentSalesLine.selectForUpdate(true);
                currentSalesLine.SalesQty = currentSalesLine.unitConvertInvent2Sales(_quantity);
                currentSalesLine.LineAmount = currentSalesLine.calcLineAmount(currentSalesLine.SalesQty);
                currentSalesLine.salesQtyModified();
                currentSalesLine.update();

                RetailSalesDiscountLine discountLine;

                while select forupdate discountLine
                    where discountLine.InventTransId == originalInventTransId
                {
                    DiscAmount newAmount = CurrencyExchangeHelper::amount((discountLine.Amount / originalQty) * currentSalesLine.SalesQty, currentSalesLine.CurrencyCode);
                    discountLine.Amount = newAmount;
                    discountLine.update();
                }
            }
        }
        else
        {
            currentSalesLine.clear();
            currentSalesLine.initFromSalesTable(_salesOrder);
            currentSalesLine.initFromSalesLine(_originalSalesLine, true, true, false, _quantity);

            currentSalesLine.SalesId        = _originalSalesLine.SalesId;
            currentSalesLine.SalesQty       = currentSalesLine.unitConvertInvent2Sales(_quantity);
            currentSalesLine.InventDimId    = _originalSalesLine.InventDimId;
            currentSalesLine.SalesStatus    = SalesStatus::None;
            currentSalesLine.Reservation    = ItemReservation::None;

            // Create a new line without updating inventory reservation as it is created when fulfillment plan is provided
            currentSalesLine.createLine(true, true, true, true, true, true, false);
            currentSalesLine.DeliveryPostalAddress = _originalSalesLine.DeliveryPostalAddress;
            currentSalesLine.DeliveryName = _originalSalesLine.DeliveryName;
            currentSalesLine.TaxGroup = _originalSalesLine.TaxGroup;

            // Price is overriden by inventory API, so we need to force recalculation
            currentSalesLine.selectForUpdate(true);
            currentSalesLine.SalesPrice     = _originalSalesLine.SalesPrice;
            currentSalesLine.LineDisc       = _originalSalesLine.LineDisc;
            currentSalesLine.LineAmount     = currentSalesLine.calcLineAmountForcedInteraction(fieldNum(SalesLine, SalesPrice));
            
            // Delivery dates are overriden in method setPriceDiscForDimensionsSpecificDefaulting once parameter initDateFields is always true.
            currentSalesLine.ShippingDateRequested = _originalSalesLine.ShippingDateRequested;
            currentSalesLine.ReceiptDateRequested  = _originalSalesLine.ReceiptDateRequested;

            // Dlvmode is inherited from sales order header, not the original sales line, so we manually set.
            currentSalesLine.DlvMode = _originalSalesLine.DlvMode;
            currentSalesLine.mcrDlvModeModified();
            currentSalesLine.salesQtyModified();
            currentSalesLine.update();

            RetailSalesDiscountLine discountLine, origDiscountLine;
            RecordInsertList discountLines = new RecordInsertList(tableNum(RetailSalesDiscountLine));

            while select origDiscountLine
                where origDiscountLine.InventTransId == originalInventTransId
            {
                discountLine.clear();
                discountLine.InventTransId = currentSalesLine.InventTransId;
                discountLine.initFromRetailSalesDiscountLineWithQty(origDiscountLine, originalQty, currentSalesLine.SalesQty, currentSalesLine.CurrencyCode);
                discountLines.add(discountLine);
            }

            discountLines.insertDatabase();
        }

        ttscommit;

        return currentSalesLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>