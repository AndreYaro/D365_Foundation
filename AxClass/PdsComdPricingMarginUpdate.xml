<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PdsComdPricingMarginUpdate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Job class to create pricing margin update records.
/// </summary>
class PdsComdPricingMarginUpdate extends RunBaseBatch implements BatchRetryable
{
    PdsParameters               pdsParameters;
    PdsComdPricingRunId         pricingRunId;
    PdsComdPricingTemplateId    pricingTemplateId;
    CostProfitSet               profitSet;
    QueryRun                    itemQueryRun;

    TransDate                   calcDate;

    PdsComdPricingRun           pdsComdPricingRun;
    PdsComdPricingMargin        pdsComdPricingMargin;
    PdsComdPricingMargin        prevPricingMargin;
    BOMCalcJob                  bomCalcJob;

    PdsComdPricingTemplateLine  templateLine;
    InventTable                 inventTable;

    CurrencyCode                defaultCurrency;
    real                        costRoundUnit;

    #define.CurrentVersion(1)
    #LocalMacro.CurrentList
        pricingRunId,
        pricingTemplateId,
        profitSet,
        calcDate
    #EndMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addPricingMarginLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a line for the current pricing margin and tempalte line using the given cost.
    /// </summary>
    /// <param name="_cost">
    /// Computed cost for the pricing margin line.
    /// </param>
    /// <remarks>
    /// This method will add a new line to PdsPricingMarginLine table using the
    /// current PdsPricingTemplateLine (templateLine) and PdsPricingMargin. This
    /// calls the necessary methods to compute the margin and price on the
    /// PdsPricingMarginLine table and sets up any previous field values
    /// if <c>PdsPreviousMarginId</c> has been set.
    /// </remarks>
    protected void addPricingMarginLine(Amount _cost)
    {
        PdsComdPricingMarginLine        pdsComdPricingMarginLine;
        PdsComdPricingMarginLine        prevPricingMarginLine;

        pdsComdPricingMarginLine.initValue();

        pdsComdPricingMarginLine.PricingMarginId =
            pdsComdPricingMargin.PricingMarginId;

        pdsComdPricingMarginLine.ItemId            = inventTable.ItemId;
        pdsComdPricingMarginLine.InventDimId       = templateLine.InventDimId;
        pdsComdPricingMarginLine.bomId             = bomCalcJob.parmBOMId();
        pdsComdPricingMarginLine.RouteId           = bomCalcJob.parmRouteId();
        pdsComdPricingMarginLine.InventQty         = templateLine.InventQty;
        pdsComdPricingMarginLine.InventQtyFrom     = templateLine.InventQtyFrom;
        pdsComdPricingMarginLine.InventQtyTo       = templateLine.InventQtyTo;
        pdsComdPricingMarginLine.DefaultDimension  = inventTable.DefaultDimension;
        pdsComdPricingMarginLine.Cost              = _cost;
        pdsComdPricingMarginLine.UpdateAgreement   = NoYes::Yes;

        if (pdsParameters.KeepPriceCalc)
        {
            pdsComdPricingMarginLine.PriceCalcId   = bomCalcJob.priceCalcId();
        }

        pdsComdPricingMarginLine.UnitID =
            inventTable.inventTableModuleInvent().UnitId;
        pdsComdPricingMarginLine.MarginAccountCode =
            templateLine.MarginAccountCode;
        pdsComdPricingMarginLine.MarginAccountRelation =
            templateLine.MarginAccountRelation;

        prevPricingMarginLine = pdsComdPricingMarginLine.findPrevious(
            prevPricingMargin.PricingMarginId);
        if (prevPricingMarginLine)
        {
            pdsComdPricingMarginLine.PrevCost   = prevPricingMarginLine.Cost;
            pdsComdPricingMarginLine.PrevMargin = prevPricingMarginLine.Margin;
            pdsComdPricingMarginLine.PrevPrice  = prevPricingMarginLine.Price;

            pdsComdPricingMarginLine.UpdateAgreement =
                prevPricingMarginLine.UpdateAgreement;
        }

        pdsComdPricingMarginLine.Margin =
            pdsComdPricingMarginLine.computeMargin(templateLine, defaultCurrency);
        pdsComdPricingMarginLine.updatePrice(defaultCurrency);

        pdsComdPricingMarginLine.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcItemPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate the base price for the given formula item using the current template line.
    /// </summary>
    /// <param name="_inventTable">
    /// InventTable buffer for the formula item that is to be recalculated.
    /// </param>
    /// <returns>
    /// Base price for the item.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// protected Amount calcItemPrice(InventTable _inventTable)
    /// </syntax>
    /// </remarks>
    protected Amount calcItemPrice(InventTable _inventTable)
    {
        PmfBOMCalcJob_Commodity     calcJob = bomCalcJob;
        BOMCalcTable                bomCalcTable;
        BOMVersion                  bomVersion;
        BOMId                       bomId;
        RouteId                     routeId;

        bomVersion = BOMVersion::findActive(_inventTable.ItemId, calcDate,
                        templateLine.InventQty, templateLine.inventDim());
        bomId      = bomVersion.bomId;
        routeId    = RouteVersion::findActive(_inventTable.ItemId, calcDate,
                        templateLine.InventQty, templateLine.inventDim()).RouteId;

        calcJob.initForNewItem(_inventTable.ItemId, templateLine.InventDimId,
            bomId, routeId);
        // use the batch size, if available
        calcJob.parmItemQty(bomVersion.PmfBatchSize
                                ? bomVersion.PmfBatchSize
                                : templateLine.InventQty);
        //
        // use the site of the templateline to calcualte the price
        //
        calcJob.parmSiteId(templateLine.inventDim().InventSiteId);

        if (bomVersion.PmfTypeId == PmfBOMFormula::Formula)
        {
            calcJob.parmPmfYieldPct(bomVersion.PmfYieldPct);
        }

        calcJob.runOperation();

        bomCalcTable = BOMCalcTable::find(calcJob.priceCalcId());

        if (!bomCalcTable)
        {
            return 0;
        }

        return roundUp((bomCalcTable.SalesPrice + bomCalcTable.SalesMarkup)
            / bomCalcTable.Qty, costRoundUnit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPricingMargin</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a new PdsPricingMargin record.
    /// </summary>
    /// <remarks>
    /// This creates a new PdsPricingMargin record using the current parameter values
    /// and will set the object variable pdsPricingMargin to the new record contents.
    /// <syntax>
    /// protected void createPricingMargin()
    /// </syntax>
    /// </remarks>
    protected void createPricingMargin()
    {
        ttsbegin;

        pdsComdPricingMargin.initValue();

        pdsComdPricingMargin.PricingRunId        = pricingRunId;
        pdsComdPricingMargin.PricingTemplateId   = pricingTemplateId;
        pdsComdPricingMargin.ProfitSet           = profitSet;
        pdsComdPricingMargin.PricingMarginId     =
            PdsComdPricingMargin::numberSeqPdsPricingMarginId().num();

        pdsComdPricingMargin.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultItemQueryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create a default QueryRun for the selection criteria.
    /// </summary>
    /// <returns>
    /// QueryRun for use in the selection dialog.
    /// </returns>
    protected QueryRun defaultItemQueryRun()
    {
        Query                   query = new Query();
        QueryBuildDataSource    ds;

        ds = query.addDataSource(tablenum(InventTable));
        ds.addRange(fieldnum(InventTable, ItemId));
        ds = ds.addDataSource(tablenum(InventItemGroupItem));
        ds.addRange(fieldnum(InventItemGroupItem, ItemGroupId));
        ds.joinMode(JoinMode::InnerJoin);
        ds.addLink(fieldnum(InventTable, ItemId), fieldnum(InventItemGroupItem, ItemId));
        ds.addLink(fieldnum(InventTable, DataAreaId), fieldnum(InventItemGroupItem, ItemDataAreaId));

        ds.addRange(fieldnum(InventItemGroupItem, ItemGroupId));

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteCalcJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delete the calculation job data for the current calculation id.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// protected void deleteCalcJob()
    /// </syntax>
    /// </remarks>
    protected void deleteCalcJob()
    {
        if (!pdsParameters.KeepPriceCalc)
        {
            BOMCalcTable::deletePriceCalc(bomCalcJob.priceCalcId());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard RunBaseBatch method to get the dialog box.
    /// </summary>
    /// <returns>
    /// Dialog to interact with the user.
    /// </returns>
    /// <remarks>
    /// This creates a dialog from the PdsPricingMarginDialog form.
    /// <syntax>
    /// public Object dialog()
    /// </syntax>
    /// </remarks>
    public Object dialog()
    {
        return this.dialogInternal(Dialog::newFormnameRunbase(formstr(PdsComdPricingMarginDialog),this));
    }

]]></Source>
			</Method>
			<Method>
				<Name>estimateWork</Name>
				<Source><![CDATA[
    /// <summary>
    /// Estimate the number of lines that will be generated.
    /// </summary>
    /// <param name="_queryRun">
    /// QueryRun containing the user query used to select the items to process.
    /// </param>
    /// <returns>
    /// Estimated number of lines to generate.
    /// </returns>
    /// <remarks>
    /// This is useful for providing the total amount of work for a progress indicator.
    /// <syntax>
    /// protected Int64 estimateWork(QueryRun _queryRun)
    /// </syntax>
    /// </remarks>
    protected int64 estimateWork(QueryRun _queryRun)
    {
        PdsComdPricingTemplateLine  pdsTemplateLine;

        int64                   cnt = 0;

        _queryRun.reset();
        while (_queryRun.next())
        {
            cnt++;
        }

        select count(RecId)
            from pdsTemplateLine
            where pdsTemplateLine.PricingTemplateId == pricingTemplateId;

        return cnt * pdsTemplateLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>explodeTemplateAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add an entry for all template lines with item code 'All' for the current item.
    /// </summary>
    /// <remarks>
    /// The current item is in the object variable <c>inventTable</c>.
    /// <syntax>
    /// protected void explodeTemplateAll()
    /// </syntax>
    /// </remarks>
    protected void explodeTemplateAll()
    {
        while select templateLine
            where templateLine.PricingTemplateId == pricingTemplateId
                && templateLine.MarginItemCode   == PriceDiscProductCodeType::All
        {
            this.processTemplateLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>explodeTemplateGroup</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add an entry for all template lines with item code 'Group' where the group relation matches the  current item's group.
    /// </summary>
    /// <remarks>
    /// The current item is in the object variable <c>inventTable</c>.
    /// </remarks>
    protected void explodeTemplateGroup()
    {
        while select templateLine
            where  templateLine.PricingTemplateId    == pricingTemplateId
                && templateLine.MarginItemCode       == PriceDiscProductCodeType::GroupId
                && templateLine.MarginItemRelation   == inventTable.ItemGroupId()
        {
            this.processTemplateLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>explodeTemplateTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Add an entry for all template lines with item code 'Table' where the item relation matches the current item's id.
    /// </summary>
    /// <remarks>
    /// The current item is in the object variable <c>inventTable</c>.
    /// <syntax>
    /// protected void explodeTemplateTable()
    /// </syntax>
    /// </remarks>
    protected void explodeTemplateTable()
    {
        while select templateLine
            where  templateLine.PricingTemplateId    == pricingTemplateId
                && templateLine.MarginItemCode       == PriceDiscProductCodeType::Table
                && templateLine.MarginItemRelation   == inventTable.ItemId
        {
            this.processTemplateLine();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard RunBaseBatch method to initial the class parameters to their default values.
    /// </summary>
    /// <remarks>
    /// This initializes the internal QueryRun to the default Item Query Run and sets
    /// the calculation date to the current system date.
    /// <syntax>
    /// public void initParmDefault()
    /// </syntax>
    /// </remarks>
    public void initParmDefault()
    {
        super();

        itemQueryRun = this.defaultItemQueryRun();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override the standard new method to protect it.
    /// </summary>
    /// <remarks>
    /// Best practice requirement.
    /// <syntax>
    /// protected void new()
    /// </syntax>
    /// </remarks>
    protected void new()
    {
        super();
        calcDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard pack method to save the important properties of this class.
    /// </summary>
    /// <returns>
    /// container holding the packed properties
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public Container pack()
    /// </syntax>
    /// </remarks>
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, itemQueryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcDate</Name>
				<Source><![CDATA[
    public TransDate parmCalcDate(TransDate _calcDate = calcDate)
    {
        calcDate = _calcDate;
        return calcDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmComdPricingRunId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parameter method for the pricing run id property.
    /// </summary>
    /// <param name="_newRunId">
    /// Optional. The PdsPricingRunId is to use when computing commodity prices.
    /// </param>
    /// <returns>
    /// Current pricing run id propety value.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public PdsPricingRunId parmPricingRunId(PdsPricingRunId _newRunId)
    /// </syntax>
    /// </remarks>
    public PdsComdPricingRunId parmComdPricingRunId(
        PdsComdPricingRunId _newRunId = pricingRunId)
    {
        pricingRunId = _newRunId;
        return pricingRunId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostProfitSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parameter method for the profitSet property.
    /// </summary>
    /// <param name="_newProfitSet">
    /// Optional. CostProfitSet to use when calculating the prices. Default is CostProfitSet::Standard.
    /// </param>
    /// <returns>
    /// Current profitSet propety value.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public CostProfitSet parmCostProfitSet(CostProfitSet _newProfitSet)
    /// </syntax>
    /// </remarks>
    public CostProfitSet parmCostProfitSet(CostProfitSet _newProfitSet = profitSet)
    {
        profitSet = _newProfitSet;
        return profitSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPricingTemplateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Parameter method for the pricing template id property.
    /// </summary>
    /// <param name="_templateId">
    /// Optional. The PdsPricingTemplateId to use when pricing and generating margin lines.
    /// </param>
    /// <returns>
    /// Current pricing template id propety value.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public PdsPricingTemplateId parmPricingTemplateId(PdsPricingTemplateId _templateId)
    /// </syntax>
    /// </remarks>
    public PdsComdPricingTemplateId parmPricingTemplateId(
        PdsComdPricingTemplateId _templateId = pricingTemplateId)
    {
        pricingTemplateId = _templateId;
        return pricingTemplateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTemplateLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a margin line for the current template line if it does not already exist.
    /// </summary>
    /// <remarks>
    /// This method computes the cost for the item and calls addPricingMarginLine to
    /// create create the line in the margin line table. If there are any error
    /// exceptions this will capture those and write a warning to the info log.
    /// </remarks>
    protected void processTemplateLine()
    {
        Amount                      cost;

        progress.incCount();

        if (templateLine && !PdsComdPricingMarginLine::existPricingMarginId(
                pdsComdPricingMargin.PricingMarginId,
                inventTable.ItemId,
                templateLine.InventDimId, templateLine.MarginAccountCode,
                templateLine.MarginAccountRelation,
                templateLine.InventQtyFrom))
        {
            this.setupCalcJob();

            try
            {
                cost = this.calcItemPrice(inventTable);

                this.addPricingMarginLine(cost);
            }
            catch (Exception::Error)
            {
                warning(strfmt("@PDS484", inventTable.ItemId));
            }

            this.deleteCalcJob();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard RunBaseBatch method to get the job's QueryRun object.
    /// </summary>
    /// <returns>
    /// QueryRun for use in the selection dialog.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public QueryRun queryRun()
    /// </syntax>
    /// </remarks>
    public QueryRun queryRun()
    {
        return itemQueryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard RunBaseBatch method to execute the job.
    /// </summary>
    /// <remarks>
    /// This will initialize the progress indicator and internal object variables
    /// needed by the other operational methods of the class. Locates a previous
    /// PdsMarginTable record if there is a previous run on the given pricing run
    /// record. Then a new PdsPricingMargin record is created or existing one
    /// retrieve. Finally the main loop retrieves the items selected by the user
    /// (the query is modified to ensure only valid items are returned) and 'exlodes'
    /// all the template lines to generate the new pricing margin.
    /// <syntax>
    /// public void run()
    /// </syntax>
    /// </remarks>
    public void run()
    {
        boolean         hasAll = PdsComdPricingTemplate::find(pricingTemplateId)
                                    .hasItemAll();
        setprefix(PdsComdPricingMarginUpdate::description());

        pdsParameters = PdsParameters::find();

        if (!itemQueryRun)
        {
            itemQueryRun = this.defaultItemQueryRun();
        }

        pdsComdPricingRun   = PdsComdPricingRun::find(pricingRunId);
        defaultCurrency = CompanyInfoHelper::standardCurrency();
        costRoundUnit   = power(0.1, new SysDictType(extendedtypenum(PdsCost))
                            .noOfDecimals());

        pdsComdPricingMargin = PdsComdPricingMargin::find(pricingRunId, pricingTemplateId,
            profitSet);
        if (!pdsComdPricingMargin)
        {
            this.createPricingMargin();
        }
        prevPricingMargin = pdsComdPricingMargin.findPrevious(
            pdsComdPricingRun.PreviousRunId);

        itemQueryRun = InventTable::queryIsBomOrFormulaAllowed(itemQueryRun);

        this.progressInit("@SYS13118", this.estimateWork(itemQueryRun), #AviUpdate);

        itemQueryRun.reset();
        while (itemQueryRun.next())
        {
            inventTable = itemQueryRun.get(tablenum(InventTable));

            if (inventTable.PmfProductType == PmfProductType::MainItem)
            {
                continue;
            }

            setprefix(strfmt("@SYS24300", inventTable.ItemId));

            this.explodeTemplateTable();
            this.explodeTemplateGroup();

            if (hasAll)
            {
                this.explodeTemplateAll();
            }
        }

        info("@PDS475");
    }

]]></Source>
			</Method>
			<Method>
				<Name>setupCalcJob</Name>
				<Source><![CDATA[
    /// <summary>
    /// Setup the PmfBOMCalcJob class to compute the prices for the current pricing run, profit set, and calculation date.
    /// </summary>
    /// <remarks>
    /// <syntax>
    /// protected void setupCalcJob()
    /// </syntax>
    /// </remarks>
    protected void setupCalcJob()
    {
        PmfBOMCalcJob_Commodity     calcJob;

        calcJob = PmfBOMCalcJob_Commodity::construct();
        calcJob.parmPdsComdPricingRun(pdsComdPricingRun);
        calcJob.parmProfitSet(profitSet);
        calcJob.parmCalcDate(calcDate ? calcDate : DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()));

        bomCalcJob = calcJob;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard RunBaseBatch method to specify if the query run values should be shown in the job dialog.
    /// </summary>
    /// <returns>
    /// true to show the query run selection values.
    /// </returns>
    /// <remarks>
    /// This implementation always returns <c>true</c>.
    /// <syntax>
    /// public boolean showQueryValues()
    /// </syntax>
    /// </remarks>
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard unpack method to restore the important properties of this class.
    /// </summary>
    /// <param name="_packedClass">
    /// container holding the packed properties
    /// </param>
    /// <returns>
    /// true if the properties could be restored successfully; false otherwise.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public Enum unpack(Container _packedClass)
    /// </syntax>
    /// </remarks>
    public boolean unpack(container _packedClass)
    {
        Integer         version = conpeek(_packedClass, 1);
        container       packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList, packedQuery] = _packedClass;
                if (!packedQuery)
                {
                    return false;
                }
                itemQueryRun = new QueryRun(packedQuery);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard method expected by RunBaseBatch if there is any parameter validation required.
    /// </summary>
    /// <param name="calledFrom">
    /// object called from
    /// </param>
    /// <returns>
    /// true if all parameters are valid; false otherwise.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public boolean validate(Object calledFrom = null)
    /// </syntax>
    /// </remarks>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(this);

        if (!pricingRunId)
        {
            ret = checkFailed("@PDS429") && ret;
        }

        if (!pricingTemplateId)
        {
            ret = checkFailed("@PDS450") && ret;
        }

        if (ret && !PdsComdPricingTemplateLine::hasDataForTemplate(pricingTemplateId))
        {
            ret = checkFailed("@PDS452");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard constructor pattern to create a new instance of PdsPricingMarginUpdate.
    /// </summary>
    /// <returns>
    /// New instance of PdsPricingMarginUpdate
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public static PdsPricingMarginUpdate construct()
    /// </syntax>
    /// </remarks>
    public static PdsComdPricingMarginUpdate construct()
    {
        return new PdsComdPricingMarginUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provide the description for this job class.
    /// </summary>
    /// <returns>
    /// Description for this job class.
    /// </returns>
    /// <remarks>
    /// <syntax>
    /// public static ClassDescription description()
    /// </syntax>
    /// </remarks>
    public static ClassDescription description()
    {
        return "@PDS487";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Standard entry point method for any RunBase class.
    /// </summary>
    /// <param name="_args">
    /// Run time arguments.
    /// </param>
    /// <exception cref="Exception::Error" label="@PDS531">PMF configuration key is disabled.</exception>
    /// <remarks>
    /// As this class only works with formula items and PMF module must be available to
    /// do the pricing calculation, this method will fail if PMF configuration is
    /// disabled.
    /// <syntax>
    /// public static void main(Args _args)
    /// </syntax>
    /// </remarks>
    public static void main(Args _args)
    {
        PdsComdPricingMarginUpdate      marginUpdate;

        marginUpdate = PdsComdPricingMarginUpdate::construct();

        if (marginUpdate.prompt())
        {
            marginUpdate.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>