<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPOTileDataProviderTypeQuery_Extension</Name>
	<SourceCode>
		<Declaration><![CDATA[
[ExtensionOf(classStr(TileDataProviderTypeQuery))]
public final class ReqPOTileDataProviderTypeQuery_Extension
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initializeQueryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Replaces the existing plan version ranges on the planned orders form.
    /// These ranges are a part of the query that gets persisted in the db when creating a workspace tile. 
    /// If MRP created a new one since then, the range values should be equal to a new RecId.
    /// </summary>
    /// <param name="_queryableType">
    /// The queryable type for which the class should be initialized.
    /// </param>
    /// <param name="_queryableIdentifier">
    /// The queryable identifier for which the class should be initialized.
    /// </param>
    /// <param name="_packedQueryable">
    /// The packed queryable.
    /// </param>
    protected void initializeQueryable(SysQueryableTypeEnum   _queryableType,
                                       SysQueryableIdentifier _queryableIdentifier,
                                       SysQueryablePacked     _packedQueryable)
    {
        next initializeQueryable(_queryableType, _queryableidentifier, _packedQueryable);

        if (ReqPOTileDataProviderTypeQueryToggle::instance().isEnabled() && queryable is SysQueryableQuery)
        {
            SysQueryableQuery sqq = queryable;

            Query q = sqq.parmQueryableObject();

            if (q.dataSourceCount() == 0 || q.dataSourceNo(1).table() != tableNum(ReqPO))
            {
                return;
            }

            QueryBuildDataSource qbds = q.dataSourceTable(tableNum(ReqPlanVersion));

            if (qbds == null)
            {
                return;
            }

            QueryBuildRange qbr = qbds.findRange(fieldnum(ReqPlanVersion, ReqPlanId));

            if (qbr == null)
            {
                return;
            }

            ReqPlanId planId                 = qbr.value();
            RefRecId  activePlanVersionRecId = ReqPlanVersion::findActiveReqPlanId(planId, curext()).RecId;
             
            ReqTransPoFormPlanVersionFilterManager::updatePlanVersionQueryRanges(q, activePlanVersionRecId);

            sqq.initialize(new QueryRun(q));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>