<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsBillOfLadingController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSBillOfLadingHelper</c> class is a helper class for the   <c>WMSBillOfLading</c> reports.
/// </summary>
public class WmsBillOfLadingController extends SrsPrintMgmtController implements BatchRetryable
{
    //<GEERU>
    #ISOCountryRegionCodes
    SalesInvoiceJournalPrint    salesInvoiceJournalPrint;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>billOfLadingList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns list of bills of lading selected
    /// </summary>
    /// <returns>
    /// Record sorted list with bills of lading selected
    /// </returns>
    public RecordSortedList billOfLadingList()
    {
        RecordSortedList    billOfLadingList = new RecordSortedList(tableNum(WMSBillOfLading));

        Query               queryLocal    = this.getFirstQuery();
        QueryRun            queryRunLocal = new QueryRun(queryLocal);
        WMSBillOfLading     wmsBillOfLading;

        billOfLadingList.sortOrder(fieldNum(WMSBillOfLading, RecId));

        while (queryRunLocal.next())
        {
            if (queryRunLocal.changed(tableNum(WMSBillOfLading)))
            {
                wmsBillOfLading = queryRunLocal.get(tableNum(WMSBillOfLading));

                billOfLadingList.ins(wmsBillOfLading);
            }
        }

        return billOfLadingList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrintCopyOriginal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets printing mode
    /// </summary>
    /// <returns>
    /// Value from caller arguments, if set. Otherwise, returns Original.
    /// </returns>
    private PrintCopyOriginal getPrintCopyOriginal()
    {
        PrintCopyOriginal printCopyOriginal;

        if (this.parmArgs().parmEnumType() == enumNum(PrintCopyOriginal))
        {
            if (salesInvoiceJournalPrint)
            {
                if (salesInvoiceJournalPrint.parmUsePrintManagement())
                {
                    printCopyOriginal = PrintCopyOriginal::OriginalPrint;
                }
                else
                {
                    printCopyOriginal = PrintCopyOriginal::Original;
                }
            }
            else
            {
                printCopyOriginal = this.parmArgs().parmEnum();
            }
        }
        else
        {
            // same behavior for original print and print without print management set up
            printCopyOriginal = PrintCopyOriginal::Original;
        }

        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrintMgmtReportRun</Name>
				<Source><![CDATA[
    protected void initPrintMgmtReportRun()
    {
        printMgmtReportRun = PrintMgmtReportRun::construct(
            PrintMgmtHierarchyType::Sales,
            PrintMgmtNodeType::Sales,
            PrintMgmtDocumentType::WMSBillOfLading_RU);

        printMgmtReportRun.parmReportRunController(this);

        if (salesInvoiceJournalPrint)
        {
            printMgmtReportRun.parmDefaultCopyPrintJobSettings    (new SRSPrintDestinationSettings(salesInvoiceJournalPrint.parmPrinterSettingsFormLetter()));
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(salesInvoiceJournalPrint.parmPrinterSettingsFormLetterCopy()));
            printMgmtReportRun.parmForcePrintJobSettings          (!salesInvoiceJournalPrint.parmUsePrintManagement());
        }
        // for non-RU context need to pick user's choice on printing settings
        // for RU context still need to look up print management setup
        else if (this.parmReportContract().parmPrintSettings()
              && this.parmArgs().parmEnumType() != enumNum(PrintCopyOriginal)
              && !SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]))
        {
            printMgmtReportRun.parmDefaultOriginalPrintJobSettings(this.parmReportContract().parmPrintSettings());
        }
        else if (this.getPrintCopyOriginal() == PrintCopyOriginal::OriginalPrint)
        {
            printMgmtReportRun.parmForcePrintJobSettings(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPrintSettings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads instances of the <c>PrintMgmtPrintSettingDetail</c> class that are used for printing the report.
    /// </summary>
    /// <param name="_jourTable">
    ///    The journal table that is currently being printed.
    /// </param>
    /// <param name="_transTable">
    ///    The table to which print management information has been related.
    /// </param>
    /// <param name="_languageId">
    ///    The language ID that should be used to retrieve footer text.
    /// </param>
    /// <param name="_documentKeyValue">
    ///    A human readable value that uniquely identifies the document to be printed.
    /// </param>
    /// <remarks>
    ///    Start by calling the <c>loadPrintSettings</c> method to load print settings for the current
    ///    instance of the <c>FormLetterReport</c> class. Next, call the <c>moveNextPrintSetting</c> method to
    ///    iterate over the print settings that have been found. The <c>getCurrentPrintSetting</c> method will
    ///    then return the current instance of the <c>PrintMgmtPrintSettingDetail</c> class which can be used
    ///    to retrieve printer settings for the current copy of the report.
    /// </remarks>
    public void loadPrintSettings(Common _jourTable, Common _transTable, str _languageId, str _documentKeyValue = '')
    {
        PrintCopyOriginal printCopyOriginal;

        boolean isValidReference(Common _referencedTableBuffer)
        {
            PrintMgmtNodeInstance nodeInstance = new PrintMgmtNodeInstance();

            nodeInstance.parmNodeDefinition(PrintMgmtNode::construct(PrintMgmtNodeType::SalesTable));
            nodeInstance.parmReferencedTableBuffer(_referencedTableBuffer);

            return nodeInstance.isValidReference();
        }

        void setSettingDetail(PrintMgmtDocInstanceType _type, SRSPrintDestinationSettings _defaultSettings)
        {
            PrintMgmtPrintSettingDetail printSettingDetail = new PrintMgmtPrintSettingDetail();

            PrintMgmtReportFormat       printMgmtReportFormat;

            printMgmtReportFormat = PrintMgmtReportFormat::findSystem(PrintMgmtDocumentType::WMSBillOfLading_RU);

            printSettingDetail.parmReportFormatName(printMgmtReportFormat.Name);
            printSettingDetail.parmSSRS(printMgmtReportFormat.SSRS);

            printSettingDetail.parmType(_type);

            printSettingDetail.parmInstanceName(enum2str(_type));

            // Since this will be reported to the screen, one copy is the only thing that makes sense
            printSettingDetail.parmNumberOfCopies(1);

            printSettingDetail.parmPrintJobSettings(_defaultSettings);

            printMgmtReportRun.loadSettingDetail(printSettingDetail, _documentKeyValue);
        }

        printCopyOriginal = this.getPrintCopyOriginal();

        if (printCopyOriginal == PrintCopyOriginal::OriginalPrint && isValidReference(_transTable))
        {
            // Print an original
            printMgmtReportRun.load(_jourTable, _transTable, _languageId, _documentKeyValue);
        }
        else if (printCopyOriginal == PrintCopyOriginal::Copy)
        {
            // Print a copy
            setSettingDetail(PrintMgmtDocInstanceType::Copy, printMgmtReportRun.parmDefaultCopyPrintJobSettings());
        }
        else
        {
            // Print an original.  We also default to print one original when we are trying to
            // print using Print Mgmt information, but don't have a valid table reference.
            // This covers the reprint case where the original transaction record may not be present.
            setSettingDetail(PrintMgmtDocInstanceType::Original, printMgmtReportRun.parmDefaultOriginalPrintJobSettings());
        }

        if (!printMgmtReportRun.more())
        {
            checkFailed("@SYS78951");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>prePromptModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Sets report query ranges according to the caller.
    /// </summary>
    public void prePromptModifyContract()
    {
        QueryBuildDataSource    queryBuildDataSource;
        QueryBuildRange         queryBuildRange;
        Query                   queryLocal;
        WMSBillOfLading         wmsBillOfLading;
        WMSShipment             wmsShipment;

        if (this.parmArgs() && this.parmArgs().dataset())
        {
            queryLocal       = this.getFirstQuery();
            if (this.parmArgs().record() is WMSBillOfLading)
            {
                wmsBillOfLading = this.parmArgs().record() as WMSBillOfLading;

                queryBuildDataSource = SysQuery::findOrCreateDataSource(queryLocal, tableNum(WMSBillOfLading));
                queryBuildDataSource.clearRanges();

                queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WMSBillOfLading, BillOfLadingId));
                queryBuildRange.value(wmsBillOfLading.BillOfLadingId);

                queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WMSBillOfLading, ShipmentId));
                queryBuildRange.status(RangeStatus::Hidden);
            }
            else if (this.parmArgs().record() is WMSShipment)
            {
                wmsShipment = this.parmArgs().record() as WMSShipment;

                queryBuildDataSource = SysQuery::findOrCreateDataSource(queryLocal, tableNum(WMSBillOfLading));
                queryBuildDataSource.clearRanges();

                queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WMSBillOfLading, ShipmentId));
                queryBuildRange.value(wmsShipment.ShipmentId);

                queryBuildRange = SysQuery::findOrCreateRange(queryBuildDataSource, fieldNum(WMSBillOfLading, BillOfLadingId));
                queryBuildRange.status(RangeStatus::Hidden);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    protected void runPrintMgmt()
    {
        RecordSortedList    billOfLadingList;
        WMSBillOfLading     wmsBillOfLading;

        // report is called from main menu
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) &&
            this.parmArgs().parmEnumType() != enumNum(PrintCopyOriginal))
        {
            this.parmArgs().object(this);
            if (!NonSSRSPrintMgmtAdapter::runPrintMgmtNonSSRS(PrintMgmtDocumentType::WMSBillOfLading_RU, this.parmArgs()))
            {
                return;
            }
        }

        salesInvoiceJournalPrint = this.parmArgs().caller() as salesInvoiceJournalPrint;

        billOfLadingList = this.billOfLadingList();

        while (billOfLadingList.next(wmsBillOfLading) && !this.parmCancelRun())
        {
            this.initPrintMgmtReportRun();

            this.loadPrintSettings(wmsBillOfLading, wmsBillOfLading.salesTable(), wmsBillOfLading.LanguageId);

            if (wmsBillOfLading.LanguageId)
            {
                this.parmReportContract().parmRdlContract().parmLanguageId(wmsBillOfLading.LanguageId);
                this.parmReportContract().parmRdlContract().parmLabelLanguageId(wmsBillOfLading.LanguageId);
            }
            this.outputReports();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WMSBillOfLadingController construct()
    {
        return new WMSBillOfLadingController();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WMSBillOfLadingController controller = WMSBillOfLadingController::newFromArgs(_args);

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([ #isoRU ]) &&
            _args.parmEnumType() == enumNum(PrintCopyOriginal))
        {
            if (!NonSSRSPrintMgmtAdapter::runPrintMgmtNonSSRS(PrintMgmtDocumentType::WMSBillOfLading_RU, _args))
            {
                return;
            }
            controller.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::WMSBillOfLading_RU).getDefaultReportFormat());
            controller.parmShowDialog(false);
        }
        // </GEERU>

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromArgs</Name>
				<Source><![CDATA[
    public static WMSBillOfLadingController newFromArgs(Args _args)
    {
        WMSBillOfLadingController controller = WMSBillOfLadingController::construct();
        controller.parmReportName(ssrsReportStr(WMSBillOfLading, Report));
        controller.parmArgs(_args);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>