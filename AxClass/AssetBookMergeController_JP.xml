<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetBookMergeController_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>AssetBookMergeController_JP</c> provide a common lookup functions for asset book regarding to the book type.
/// </summary>
class AssetBookMergeController_JP
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assetImpairmentLookupBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Asset book lookup method.
    /// </summary>
    /// <param name="_ctrl">
    /// The FormStringControl that handel this lookup.
    /// </param>
    /// <param name="_postingLayer">
    /// The posting layer; optional
    /// </param>
    /// <param name="_assetId">
    /// The asset id that filters the asset books; optional.
    /// </param>
    /// <remarks>
    /// If an asset id is given, the lookup will list books that belongs to the asset only.
    /// </remarks>
    public void assetImpairmentLookupBookId(FormStringControl _ctrl, CurrentOperationsTax _postingLayer = CurrentOperationsTax::Current, AssetId _assetId = '')
    {
        SysTableLookup              d_lookup;
        Query                       d_query = new Query();
        QueryBuildDataSource        qbds;

        if (_assetId == '')
        {
            d_lookup = SysTableLookup::newParameters(tableNum(AssetBookTable), _ctrl);
            d_lookup.addLookupfield(fieldNum(AssetBookTable, BookId));
            d_query.addDataSource(tableNum(AssetBookTable)).addRange(fieldNum(AssetBookTable, CurrentOperationsTax)).value(queryValue(_postingLayer));
        }
        else
        {
            d_lookup = SysTableLookup::newParameters(tableNum(AssetBook), _ctrl);

            d_lookup.addLookupfield(fieldNum(AssetBook, BookId));
            d_lookup.addLookupfield(fieldNum(AssetBook, AssetId));
            qbds = d_query.addDataSource(tableNum(AssetBook));
            qbds.addRange(fieldNum(AssetBook, AssetId)).value(queryValue(_assetId));

            qbds = qbds.addDataSource(tableNum(AssetBookTable));
            qbds.joinMode(JoinMode::InnerJoin);
            qbds.addLink(fieldNum(AssetBook, BookId), fieldNum(AssetBookTable, BookId));
            qbds.addRange(fieldNum(AssetBookTable, CurrentOperationsTax)).value(queryValue(_postingLayer));
        }

        d_lookup.parmQuery(d_query);
        d_lookup.performFormLookup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateBookId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate a book id.
    /// </summary>
    /// <param name="_assetId">
    /// The asset id
    /// </param>
    /// <param name="_bookId">
    /// The book id
    /// </param>
    /// <param name="_postinglayer">
    /// The posting layer; optional
    /// </param>
    /// <returns>
    /// If the combination of asset id and book is exists. If the posting layer of the book id is expected.
    /// </returns>
    public boolean validateBookId(AssetId _assetId, AssetBookId _bookId, CurrentOperationsTax _postinglayer = CurrentOperationsTax::Current)
    {
        AssetBook assetBook = AssetBook::find(_assetId, _bookId);
        AssetBookTable assetBookTable;
        boolean        ret;

        if (!assetBook)
        {
            return checkFailed(strFmt("@FixedAssets:FA_MessageError_BookDoesNotExistForFixedAsset", _bookId, _assetId));
        }

        assetBookTable = AssetBookTable::find(_bookId);
        ret = assetBookTable && assetBookTable.CurrentOperationsTax == _postinglayer;
        if (!ret)
        {
            checkFailed("@SYP4880632");
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>