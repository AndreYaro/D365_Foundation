<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustCollectionsEmail</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>CustCollectionsEmail</c> class generates Microsoft Outlook e-mail communications for
///    collections.
/// </summary>
class CustCollectionsEmail
{
    CustParameters custParameters;
    CustCollectionsEmailContext context;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateEmail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates a Microsoft Outlook e-mail with the appropriate attachments.
    /// </summary>
    protected void generateEmail()
    {
        // Tokens for email template replacement
        #define.AccountToken('CustomerAccount')
        #define.NameToken('CustomerName')

        Map templateTokens = new Map(Types::String, Types::String);

        templateTokens.insert(#AccountToken, context.parmCustTable().AccountNum);
        templateTokens.insert(#NameToken, context.parmCustTable().name());

        SysEmailId emailId;

        switch (context.parmEmailType())
        {
            case CustCollectionsEmailType::ContactWithStatement:
                emailId = custParameters.CollectionsStatementSysEmailId;
                break;

            case CustCollectionsEmailType::Salesperson:
                emailId = custParameters.CollectionsSalespersonSysEmailId;
                break;

            case CustCollectionsEmailType::Contact:
            default:
                emailId = custParameters.CollectionsGeneralSysEmailId;
                break;
        }

        str emailSenderName;
        str emailSenderAddr;
        str emailSubject;
        str emailBody;

        if (emailId)
        {
            [emailSubject, emailBody, emailSenderAddr, emailSenderName] = CustCollectionsEmail::getEmailTemplate(emailId, context.parmCustTable().languageId());
        }

        var statementGenerator = new CustCollectionsExcelStatement(context.parmCustTable(), context.parmCustTrans());
        statementGenerator.parmSelectedCompanies(context.parmSelectedCompanies());
        statementGenerator.parmAgedBy(context.parmAgedBy());
        statementGenerator.parmAgingDate(context.parmAgingDate());
        statementGenerator.parmIncludeSettledTransactions(context.parmIncludeSettledTransactions());
        statementGenerator.parmClosedTransDateRangeStart(context.parmClosedTransDateRangeStart());
        statementGenerator.parmGenerateSummaryStatement(context.parmEmailType() == CustCollectionsEmailType::ContactWithStatement);
        statementGenerator.parmContactPersonName(context.parmContactPerson());
        statementGenerator.parmAgingPeriodDefinition(context.parmAgingPeriodDefinition());

        using (System.IO.Stream attachmentStream = statementGenerator.generateStatement())
        {
            var messageBuilder = new SysMailerMessageBuilder();
            messageBuilder.addTo(context.parmEmailAddress())
                      .setSubject(emailSubject)
                      .setBody(SysEmailMessage::stringExpand(emailBody, SysEmailTable::htmlEncodeParameters(templateTokens)));

            if (emailSenderAddr)
            {
                messageBuilder.setFrom(emailSenderAddr, emailSenderName);
            }
            else if (custParameters.CollectionsOMTeam)
            {
                var collectionsEmail = OMTeam::find(custParameters.CollectionsOMTeam).primaryEmail();
                if (strLen(collectionsEmail) > 0)
                {
                    messageBuilder.setFrom(collectionsEmail);
                }
            }

            if (attachmentStream != null)
            {
                messageBuilder.addAttachment(
                    attachmentStream,
                    strFmt('%1%2', strReplace(DateTimeUtil::toStr(DateTimeUtil::utcNow()), ':', ''), '.xlsx'));
            }

            SysMailerFactory::sendInteractive(messageBuilder.getMessage());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>CustCollectionsEmail</c> class.
    /// </summary>
    /// <param name="_context">
    ///    The instance of the <c>CustCollectionsEmailContext</c> class that drives the e-mail generation.
    /// </param>
    protected void new(CustCollectionsEmailContext _context)
    {
        custParameters = CustParameters::find();
        context = _context;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        try
        {
            if (Debug::debugMode())
            {
                Debug::assert(context != null);
                Debug::assert(context.parmEmailType() != 0);
                Debug::assert(context.parmCustTable() != null);
            }

            this.generateEmail();
        }
        catch (Exception::Error)
        {
            error("@SYS135887");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static CustCollectionsEmail construct(CustCollectionsEmailContext _context)
    {
        return new CustCollectionsEmail(_context);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmailTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an e-mail subject and body based on a template.
    /// </summary>
    /// <param name="_emailId">
    ///    The ID of the e-mail template.
    /// </param>
    /// <param name="_languageId">
    ///    The language of the e-mail template.
    /// </param>
    /// <returns>
    ///    A container with the subject and body.
    /// </returns>
    /// <remarks>
    ///    If no template can be found a blank subject and body are returned and a warning is generated.
    /// </remarks>
    protected static container getEmailTemplate(SysEmailId _emailId, LanguageId _languageId)
    {
        var messageTable = SysEmailMessageTable::find(_emailId, _languageId);
        var emailTable = SysEmailTable::find(_emailId);
        if (!messageTable && emailTable)
        {
            // Try to find the email message using the default language from the email parameters
            messageTable = SysEmailMessageTable::find(_emailId, emailTable.DefaultLanguage);
        }

        if (messageTable)
        {
            return [messageTable.Subject, messageTable.Mail, emailTable.SenderAddr, emailTable.SenderName];
        }
        else
        {
            warning("@SYS135886"); // Let the user know we didn't find a template
            return ['', '', emailTable.SenderAddr, emailTable.SenderName];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        Debug::assert(_args.parmObject() is CustCollectionsEmailContext);

        CustCollectionsEmailContext context = _args.parmObject();
        var custCollectionsEmail = CustCollectionsEmail::construct(context);
        custCollectionsEmail.run();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>