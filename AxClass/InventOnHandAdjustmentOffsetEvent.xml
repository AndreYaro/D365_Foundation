<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventOnHandAdjustmentOffsetEvent</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DataContract]
public class InventOnHandAdjustmentOffsetEvent
{
    private str id;
    private Map dimensions;
    private Map quantities;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmId</Name>
				<Source><![CDATA[
    [DataMember('id')]
    public str parmId(str _id = id)
    {
        id = _id;
        return id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantities</Name>
				<Source><![CDATA[
    [DataMember('quantities')]
    public Map parmQuantities(Map _quantities = quantities)
    {
        quantities = _quantities;
        return quantities;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensions</Name>
				<Source><![CDATA[
    [DataMember('dimensions')]
    public Map parmDimensions(Map _dimensions = dimensions)
    {
        dimensions = _dimensions;
        return dimensions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFromQueue</Name>
				<Source><![CDATA[
    public static InventOnHandAdjustmentOffsetEvent buildFromQueue(InventInventoryDataServiceAdjustmentOffsetQueue offsetQueue)
    {
        var adjustmentOffsetEvent = new InventOnHandAdjustmentOffsetEvent();

        var offsetInventDimId = InventDim::findInLegalEntity(offsetQueue.OffsetInventDimId, offsetQueue.Company);
        if (offsetInventDimId)
        {
            adjustmentOffsetEvent.parmId(any2Str(offsetQueue.RecId));

            var dimensionSet = InventOnHandChangeEventDimensionSet::BuildNonEmptyDimensionMapFromInventDim(offsetInventDimId);

            var offsetMapping = InventInventoryDataServiceAdjustmentOffsetMappingV2::findByOffsetQueue(offsetQueue);
            if (offsetMapping && offsetMapping.shouldExcludeDimensions())
            {
                InventOnHandChangeEventDimensionSet::ExcludeDimensions(dimensionSet, offsetMapping.getExcludedDimensionFields());
            }

            adjustmentOffsetEvent.parmDimensions(dimensionSet);

            Map qtys = new Map(Types::String, Types::AnyType);
            Map qty = new Map(Types::String, Types::Real);

            // Backward compatibility for Commerce, remove it after 10.0.39.
            if (offsetQueue.StatusIssue != StatusIssue::None && !offsetQueue.Datasource && !offsetQueue.PhysicalMeasure)
            {
                offsetQueue.Datasource = InventInventoryDataServiceCommerceIntegrationHelper::Datasource;
                switch (offsetQueue.StatusIssue)
                {
                    case StatusIssue::OnOrder: 
                        offsetQueue.PhysicalMeasure = InventInventoryDataServiceCommerceIntegrationHelper::OnOrderOffset;
                        break;
                    case StatusIssue::ReservPhysical:
                        offsetQueue.PhysicalMeasure = InventInventoryDataServiceCommerceIntegrationHelper::ReservPhysicalOffset;
                        break;
                    case StatusIssue::Sold:
                        offsetQueue.PhysicalMeasure = InventInventoryDataServiceCommerceIntegrationHelper::SoldOffset;
                        break;
                }
            }

            qty.add(offsetQueue.PhysicalMeasure, offsetQueue.OffsetQty);
            qtys.add(offsetQueue.Datasource, qty);
            adjustmentOffsetEvent.parmQuantities(qtys);
        }

        return adjustmentOffsetEvent;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>