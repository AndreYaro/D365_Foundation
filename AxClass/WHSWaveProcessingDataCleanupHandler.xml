<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWaveProcessingDataCleanupHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSWaveProcessingDataCleanupHandler</c> is responsible for registering eventhandlers for data cleanup for waves that do not run in batch.
/// </summary>
[SysObsolete('This class is no longer used.', false, 26\05\2020)]
class WHSWaveProcessingDataCleanupHandler
{
    const str CacheKey = 'WaveCleanup';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cleanupWaves</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the cleanup for waves that have errored.
    /// </summary>
    /// <param name="_companyMap">
    /// A map containing the waves per company that are being handled within the transaction and should be cleaned up.
    /// </param>
    private static void cleanupWaves(Map _companyMap)
    {
        MapEnumerator                   companyMapEnum = _companyMap.getEnumerator();

        while (companyMapEnum.moveNext())
        {
            CompanyId companyId = companyMapEnum.currentKey();
            Set waveSet = companyMapEnum.currentValue();
            changeCompany(companyId)
            {
                SetEnumerator se = waveSet.getEnumerator();

                while (se.moveNext())
                {
                    WHSWaveId waveId = se.current();

                    var waveProcessingDataCleanup = WHSWaveProcessingDataCleanup::newFromWaveId(waveId);
                    waveProcessingDataCleanup.cleanupNonBatchErroredWave();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEventHandlerRegistered</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if an event handler has already been registered for wave processing cleanup.
    /// </summary>
    /// <returns>
    /// true if an event handler is registered; otherwise, false.
    /// </returns>
    private static boolean isEventHandlerRegistered()
    {
        return appl.globalCache().get(classStr(WHSWaveProcessingDataCleanupHandler), 0, false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsAbort</Name>
				<Source><![CDATA[
    /// <summary>
    /// During the even of a ttsAbort this method is called to begin the cleanup process the errored wave.
    /// </summary>
    public static void onTtsAbort()
    {
        Map companyMap = SysTransactionScopeCache::get(classStr(WHSWaveProcessingDataCleanupHandler), CacheKey, new Map(Types::String, Types::Class));

        WHSWaveProcessingDataCleanupHandler::unregisterEventHandler();
        WHSWaveProcessingDataCleanupHandler::cleanupWaves(companyMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>onTtsCommit</Name>
				<Source><![CDATA[
    /// <summary>
    /// During the event of a ttsCommit, this method makes sure wave cleanup event handlers have been unregistered.
    /// </summary>
    public static void onTtsCommit()
    {
        WHSWaveProcessingDataCleanupHandler::unregisterEventHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Registers the event handlers needed to cleanup a wave if it errors.
    /// </summary>
    private static void registerEventHandler()
    {
        if (!WHSWaveProcessingDataCleanupHandler::isEventHandlerRegistered())
        {
            appl.onTtsNotifyAbort += eventhandler(WHSWaveProcessingDataCleanupHandler::onTtsAbort);
            // We are registering an event on ttsCommit in order to remove the event handler on ttsAbort if ttsAbort is not hit.
            appl.onTtsNotifyCommit += eventhandler(WHSWaveProcessingDataCleanupHandler::onTtsCommit);
            appl.globalCache().set(classStr(WHSWaveProcessingDataCleanupHandler), 0, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>trackNonBatchWave</Name>
				<Source><![CDATA[
    /// <summary>
    /// Makes sure an event handler is registered for wave cleanup and the wave is tracked in transaction scope cache.
    /// </summary>
    /// <param name="_waveId">
    /// The wave Id being tracked for wave cleanup.
    /// </param>
    public static void trackNonBatchWave(WHSWaveId _waveId)
    {
        if (_waveId)
        {
            WHSWaveProcessingDataCleanupHandler::registerEventHandler();

            ttsBegin;

            Map companyMap = SysTransactionScopeCache::get(classStr(WHSWaveProcessingDataCleanupHandler), CacheKey, new Map(Types::String, Types::Class));

            if (companyMap.elements() == 0)
            {
                SysTransactionScopeCache::set(classStr(WHSWaveProcessingDataCleanupHandler), CacheKey, companyMap);
            }

            Set waveSet;

            if (companyMap.exists(curext()))
            {
                waveSet = companyMap.lookup(curext());
            }
            else
            {
                waveSet = new Set(Types::String);
                companyMap.insert(curext(), waveSet);
            }

            waveSet.add(_waveId);

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unregisters the event handlers used to track wave cleanup.
    /// </summary>
    private static void unregisterEventHandler()
    {
        if (WHSWaveProcessingDataCleanupHandler::isEventHandlerRegistered())
        {
            // Remove the event handler again
            appl.onTtsNotifyAbort -= eventhandler(WHSWaveProcessingDataCleanupHandler::onTtsAbort);
            appl.onTtsNotifyCommit -= eventhandler(WHSWaveProcessingDataCleanupHandler::onTtsCommit);
        }

        // Clear the flag to allow a new event to be handled
        appl.globalCache().clear(classStr(WHSWaveProcessingDataCleanupHandler));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>