<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPeggingTreeNode</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqPeggingTreeNode</c> abstract class represents a node in the pegging tree.
/// </summary>
/// <remarks>
///    Provides the default functionality of a node and a node factory.
/// </remarks>
public abstract class ReqPeggingTreeNode
{
    Common                  common;
    int                     nodeId;
    int                     parentNodeId;
    ReqPeggingTreeNodeCache reqPeggingListCache;

    #define.defaultIcon(2576)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the textual description of the node.
    /// </summary>
    /// <returns>
    /// A string containing the description text of the node.
    /// </returns>
    /// <remarks>
    /// This method should be overridden with node specific content.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str description()
    {
        return strFmt("%1", common.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>eventType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the event type for the current tree node.
    /// </summary>
    /// <returns>
    /// A <c>LeanPeggedEventType</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LeanPeggedEventType eventType()
    {
        return LeanPeggedEventType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>icon</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides the icon that graphically represents this node.
    /// </summary>
    /// <returns>
    /// An <c>Image</c> class instance with the image data of the icon.
    /// </returns>
    /// <remarks>
    /// There is no icon by default. This method should be overridden by the
    /// node subclasses that intend to show one.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Image icon()
    {
        return new Image(#defaultIcon);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>ReqPeggingTreeDetails</c> instance with data.
    /// </summary>
    /// <param name="_details">
    /// The object that holds the details.
    /// </param>
    [SuppressBpWarning('BPParameterNotUsed', 'The parameter is not used but it is mandate by the API it is extending, implementing or mocking.'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initializeDetails(ReqPeggingTreeDetails _details)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRoot</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the current node is a root node.
    /// </summary>
    /// <returns>
    /// true if the node is root; otherwise false.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean isRoot()
    {
        return parentNodeId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>listChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the list of children record buffers.
    /// </summary>
    /// <returns>
    /// An empty list.
    /// </returns>
    /// <remarks>
    /// This method should be overridden if a node can have children.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public List listChildren()
    {
        return new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPErrorClassNewNotProtected', 'The constructor is preserved public due to API compatibility.'), Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void new()
    {
        reqPeggingListCache = new ReqPeggingTreeNodeCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the record buffer of the parent node.
    /// </summary>
    /// <returns>
    /// Always null as this method is intended to be overridden.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Common parent()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCommon</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Common parmCommon(Common _common = common)
    {
        common = _common;
        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNodeId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int parmNodeId(int _nodeId = nodeId)
    {
        nodeId = _nodeId;

        return nodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentNodeId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int parmParentNodeId(int _parentNodeId = parentNodeId)
    {
        parentNodeId = _parentNodeId;

        return parentNodeId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDocNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the source document number.
    /// </summary>
    /// <returns>
    /// A source document number.
    /// </returns>
    /// <remarks>
    /// Implemented only for root level nodes.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str sourceDocNumber()
    {
        throw error(Error::wrongUseOfFunction(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a subtype node class instance based on the record buffer provided.
    /// </summary>
    /// <param name="_common">
    /// The record buffer that represents the node.
    /// </param>
    /// <returns>
    /// A new instance of one of the class subtypes or null if the record buffer
    /// is not recgnized.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqPeggingTreeNode newStandard(Common _common)
    {
        ReqPeggingTreeNode          result;
        Kanban                      kanban;
        KanbanBoardTmpProcessJob    kanbanBoardTmpProcessJob;
        KanbanJobTmpPegging         kanbanJobTmpPegging;

        if (isConfigurationkeyEnabled(configurationKeyNum(LeanManufacturing)))
        {
            switch (_common.TableId)
            {
                case tableNum(SalesTable):
                    result = ReqPeggingTreeNodeSalesOrder::newStandard(_common);
                    break;
                case tableNum(SalesLine):
                    result = ReqPeggingTreeNodeSalesLine::newStandard(_common);
                    break;
                case tableNum(Kanban):
                    result = ReqPeggingTreeNodeKanban::newStandard(_common);
                    break;
                case tableNum(KanbanJobIssue):
                    result = ReqPeggingTreeNodeKanbanJobIssue::newStandard(_common);
                    break;
                case tableNum(KanbanJobPickingList):
                    result = ReqPeggingTreeNodeKanbanJobPickList::newStandard(_common);
                    break;
                case tableNum(KanbanBoardTmpProcessJob):
                    kanbanBoardTmpProcessJob = _common as KanbanBoardTmpProcessJob;
                    kanban                   =
                                               kanbanBoardTmpProcessJob.kanban();

                    result                   = ReqPeggingTreeNodeKanban::newStandard(kanban);
                    break;
                case tableNum(KanbanJobTmpPegging):
                    kanbanJobTmpPegging = _common as KanbanJobTmpPegging;
                    kanban              = Kanban::findKanbanId(kanbanJobTmpPegging.KanbanId);
                    result              = ReqPeggingTreeNodeKanban::newStandard(kanban);
                    break;
                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
        else
        {
            result = ReqPeggingTreeNodeNull::newStandard();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>peggedKanbans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the list of kanban record buffers that supply a source document line requirement.
    /// </summary>
    /// <param name="_sourceDocumentLineRequirementRecId">
    /// The source document line record ID that acts as a requirement.
    /// </param>
    /// <returns>
    /// A list containing the kanbans that supply the source document line.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static List peggedKanbans(SourceDocumentLineRefRecId _sourceDocumentLineRequirementRecId)
    {
        Kanban                  kanban;
        KanbanJob               kanbanJob;
        KanbanJobReceipt        kanbanJobReceipt;
        ReqPeggingAssignment    reqPeggingAssignmentSupply;
        ReqPegging              reqPegging;
        ReqPeggingAssignment    reqPeggingAssignmentRequirement;
        List                    list = new List(Types::Record);

        if (   _sourceDocumentLineRequirementRecId != 0
            && ReqPeggingAssignment::existSourceDocumentLine(_sourceDocumentLineRequirementRecId,ReqPeggingAssignmentType::Requirement))
        {
            while select kanban
                exists join kanbanJob
                    where kanbanJob.Kanban == kanban.RecId
                exists join kanbanJobReceipt
                    where kanbanJobReceipt.KanbanJob == kanbanJob.RecId
                exists join reqPeggingAssignmentSupply
                    where reqPeggingAssignmentSupply.SourceDocumentLine       == kanbanJobReceipt.SourceDocumentLine
                       && reqPeggingAssignmentSupply.ReqPeggingAssignmentType == ReqPeggingAssignmentType::Supply
                exists join reqPegging
                    where reqPegging.PeggingAssignedSupply == reqPeggingAssignmentSupply.RecId
                exists join reqPeggingAssignmentRequirement
                    where reqPeggingAssignmentRequirement.RecId                    == reqPegging.PeggingAssignedRequirement
                       && reqPeggingAssignmentRequirement.SourceDocumentLine       == _sourceDocumentLineRequirementRecId
                       && reqPeggingAssignmentRequirement.ReqPeggingAssignmentType == ReqPeggingAssignmentType::Requirement
            {
                list.addEnd(kanban);
            }
        }

        return list;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>