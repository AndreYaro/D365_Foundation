<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>xmlExcelReport_Facture_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified form of facture to excel
/// </summary>
class xmlExcelReport_Facture_RU extends XMLExcelReport_RU implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    Object                 caller;

    FactureJour_RU         factureJour;
    FactureTrans_RU        factureTrans;

    Addressing             companyAddress;
    Name                   companyName;
    str                    consignor,
                           consignee;
    FreeTxt                custAddress;
    Name                   custName;
    INN_RU                 innOfBuyer,
                           innOfCompany;
    TransDate              factureDate;
    FactureExternalId_RU   factureId;
    FreeTxt                factureTxt;

    TaxAmountCur           totalVATAmount;
    AmountCur              totalLineAmount,
                           totalAmountWithVAT,
                           totalExcise;

    Name                   accountant,
                           director,
                           responsible;

    boolean                moreThenOnePage;

    boolean                isIndebtednessFacture;
    CustVendInvoiceJour    sourceIndebtednessInvoiceJour;
    PurchAgreementHeaderExt_RU sourceIndebtednessAgreementHeaderExt;
    VendTable              sourceIndebtednessVendTable;

    ExchRate               printExchRate;
    int                    creditNoteSign;
    OffReportType_RU       reportType;

    boolean                printHeader;
    int                    lineCount;
    KPPU_RU                kppOfBuyer,
                           kppOfCompany;

    Map                    currencyCache;
    Map                    isoCurrencyCache;
    CompanyInfo            companyInfo;
    LogisticsPostalAddress companyPostalAddress;
    boolean                prepayment;
    VATPartnerKind_RU      partnerKind;
    boolean                taxAgent;

    PrintCopyOriginal      printCopyOriginal;
    RecId                  recordId;

    int                    lineNo,  //line number of body
                           numOfLines,
                           pageNum;
    private Counter        numOfOrigLines;

    Currency               currency;
    str                    innStr;
    FactureHeaderData_RU   headerData;
    FactureJourParm_RU     factureJourParm;
    container              paymentInfo;
    Object                 calcAmountAdj;
    FactureJour_RU         factureCorrSource;

    boolean                isCustomUnionSale;
    boolean                isCustomUnionSaleSet;

    RecordSortedList        factureTransSortedList;

    #isoCountryRegionCodes
    private const int CurrentVersion = 1;

    #FactureHeader_RU
    FactureJour_RU       factureJourHeader;

    private const str VATValueTxtFmt = '\%1/\%2';
    private const int width = 202;

    private const str reportHeader = 'REPORTHEADER';
    private const str pageHeader = 'PAGEHEADER';
    private const str body = 'BODY';
    private const str reportFooter = 'REPORTFOOTER';
    private const str footer = 'FOOTER';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals
    /// </summary>
    protected void addTotals()
    {
        totalVATAmount     += this.getVATAmount();
        totalAmountWithVAT += this.getLineAmountWithVAT();
        totalExcise        += this.getExcise();
        totalLineAmount    += this.getLineAmountWithExcise();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of body section
    /// </summary>
    /// <param name="_bookmark">
    /// Name of section
    /// </param>
    /// <returns>
    /// height of body section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        real ret;

        switch (_bookmark)
        {
            case body:
                ret = max(document.getNamedRangeHeightWrapped('ItemName', this.getExternalName()),
                          document.getNamedRangeHeightWrapped('Country', this.getCountryName()),
                          document.getNamedRangeHeightWrapped('FEACCId', this.getFEACCId()));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void clearTotals()
    {
        totalVATAmount     = 0;
        totalAmountWithVAT = 0;
        totalExcise        = 0;
        totalLineAmount    = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report
    /// </summary>
    protected void createReport()
    {
        FactureJour_RU factureJourCaller;
        this.init();

        this.initSectionMap();

        this.setCurrentWorksheetNum(curWorksheetNum, widthCols);
 
        if (caller)
        {
            factureJourCaller = caller.getFactureJour();
        }
  
        if (caller && factureJourCaller.isTmp())
        {
            factureJour  = caller.getFactureJour();
            factureTrans = caller.getFactureTrans();

            select factureJour;
        }
        else if (recordId)
        {
            select factureJour
                where factureJour.RecId == recordId;
        }
        else if (args.record())
        {
            select factureJour
                where factureJour.RecId == args.record().RecId;
        }

        while (factureJour)
        {
            numOfLines = this.getNumOfLines(factureJour);
            numOfOrigLines = this.getNumOfOrigLines(factureJour);

            if (!(caller && caller.getFactureJour().isTmp()))
            {
                factureTrans.setTmpData(factureJour.getTmpTrans());
            }

            while select factureTrans
            {
                int abs = 1;
            }

            factureTransSortedList = this.getFactureTransSortedList();

            this.execute(reportHeader);

            this.execute(pageHeader);

            if (factureTransSortedList.first(factureTrans))
            {
                do
                {
                    lineNo++;

                    if (this.mustCreateNewPage())
                    {
                        this.execute(footer);

                        document.insertPageBreak(currentRow, curWorksheetNum);

                        pageNum++;
                        currentHeight = 0;
                        this.execute(pageHeader);
                    }

                    this.execute(body);

                    this.addTotals();

                } while (factureTransSortedList.next(factureTrans));
            }

            this.execute(reportFooter);

            this.execute(footer);

            this.clearTotals();

            this.setPrintArea();

            next factureJour;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return factureTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// facture Id
    /// </returns>
    protected Filename fileNamePostfix()
    {
        FactureJour_RU factureJourLocal;

        if (caller)
        {
            factureJourLocal = caller.getFactureJour();
        }
        else if (recordId)
        {
            factureJourLocal = FactureJour_RU::findRecId(recordId);
        }
        else if (args.record())
        {
            factureJourLocal = args.record();
        }

        return factureJourLocal.FactureId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'Facture';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data
    /// </summary>
    protected void fillBody()
    {
        this.initBody();

        this.insertValueToSection('LineNumber'      , this.getLineNum());
        this.insertValueToSection('ItemName'        , this.getExternalName());
        this.insertValueToSection('FEACCId'         , this.getFEACCId());
        this.insertValueToSection('Unit'            , this.getUnitIdCode());
        this.insertValueToSection('UnitName'        , this.getUnitIdTxt());
        this.insertValueToSection('Quantity'        , this.getQty());
        this.insertValueToSection('Price'           , this.getPrice());
        this.insertValueToSection('Amount'          , this.getLineAmountWithExciseTxt());
        this.insertValueToSection('Excise'          , this.getExciseTxt());
        this.insertValueToSection('TaxRate'         , this.getTaxRate());
        this.insertValueToSection('TaxAmount'       , this.getVATAmountTxt());
        this.insertValueToSection('AmountInclTax'   , this.getLineAmountWithVAT());
        this.insertValueToSection('CountryCode'     , this.getCountryCode());
        this.insertValueToSection('Country'         , this.getCountryName());
        this.insertValueToSection('GTD'             , this.getInventGTDId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillData</Name>
				<Source><![CDATA[
    protected void fillData(MSOfficeBookMark_RU _bookmark)
    {
        switch (_bookmark)
        {
            case reportHeader:
                this.fillReportHeader();
                break;
            case body:
                this.fillBody();
                break;
            case reportFooter:
                this.fillReportFooter();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data
    /// </summary>
    protected void fillReportFooter()
    {
        if (!prepayment || taxAgent)
        {
            this.insertValueToSection('AmountTotal', totalLineAmount);
        }

        this.insertValueToSection('TaxAmountTotal'     , totalVATAmount);
        this.insertValueToSection('AmountInclTaxTotal' , totalAmountWithVAT);

        this.insertValueToSection('DirectorName'  , director);
        this.insertValueToSection('AccountantName', accountant);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
        this.initHeader();

        this.insertValueToSection(          'Title'               , factureTxt);
        this.insertValueToSection(          'FactureNum'          , this.getFactureExternalId());
        this.insertValueToSection(          'FactureDate'         , this.getFactureDate());
        this.insertValueToSection(          'RevisionNum'         , this.getRevisionNum());
        this.insertValueToSection(          'RevisionDate'        , this.getRevisionDate());
        this.insertValueToSection(          'VATPartnerKind'      , this.getVATPartnerKind());
        this.insertValueToSection(          'SellerName'          , this.getCompanyName());
        this.insertValueToSectionNoOverflow('SellerAddress'       , this.getCompanyAddress());
        this.insertValueToSection(          'SellerINN'           , this.getINNOfCompany());
        this.insertValueToSectionNoOverflow('ConsignorAndAddress' , this.getConsignorAndHisAddress());
        this.insertValueToSectionNoOverflow('ConsigneeAndAddress' , this.getConsigneeAndHisAddress());
        this.insertValueToSection(          'DocumentNumDate'     , this.getPaymentInfo());
        this.insertValueToSection(          'InvoiceNumDate'      , this.getInvoiceInfo());
        this.insertValueToSection(          'BuyerName'           , this.getCustName());
        this.insertValueToSectionNoOverflow('BuyerAddress'        , this.getCustAddress());
        this.insertValueToSection(          'BuyerINN'            , this.getINNOfBuyer());
        this.insertValueToSection(          'CurrencyName'        , currency.Txt);
        this.insertValueToSection(          'CurrencyCode'        , this.getCurrencyCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns company address
    /// </summary>
    /// <returns>
    /// Company address
    /// </returns>
    protected Addressing getCompanyAddress()
    {
        return companyAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets company name in one line(if there are line breaks they are replaced with commas)
    /// </summary>
    /// <returns>
    /// Company name in one line
    /// </returns>
    protected Name getCompanyName()
    {
        return strReplace(companyName, '\n', ', ');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsigneeAndHisAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string which contains consignee name and his address
    /// </summary>
    /// <returns>
    /// String which contains consignee name and his address
    /// </returns>
    protected FreeTxt getConsigneeAndHisAddress()
    {
        return consignee;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getConsignorAndHisAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a string which contains consignor name and his address
    /// </summary>
    /// <returns>
    /// String which contains consignor name and his address
    /// </returns>
    protected FreeTxt getConsignorAndHisAddress()
    {
        return consignor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value of Country OKSM code.
    /// </summary>
    /// <returns>
    /// Value of Country OKSM code.
    /// </returns>
    protected CountryOKSMCode_RU getCountryCode()
    {
        LogisticsAddressCountryRegion   logisticsAddressCountryRegion;
        AddressCountryRegionId          addressCountryRegionId;
        CountryOKSMCode_RU              countryOKSMCode;

        if (prepayment || taxAgent)
        {
            countryOKSMCode = "@SYS77038";
        }
        else if (factureTrans.InventGTDId)
        {
            addressCountryRegionId        = InventGTD_RU::find(factureTrans.InventGTDId, factureTrans.ItemId).ItemOrigCountryRegionId;
            logisticsAddressCountryRegion = LogisticsAddressCountryRegion::find(addressCountryRegionId);
            countryOKSMCode               = logisticsAddressCountryRegion.oksmCode_RU;
        }

        return countryOKSMCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountryName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns country name for facture line(origin of products)
    /// </summary>
    /// <returns>
    /// Country name for facture line
    /// </returns>
    protected AddressCountryRegionName getCountryName()
    {
        AddressCountryRegionId      addressCountryRegionId;
        AddressCountryRegionName    countryName;

        if (prepayment || taxAgent)
        {
            countryName = "@SYS77038";
        }
        else if (factureTrans.InventGTDId && factureTrans.ItemId)
        {
            addressCountryRegionId        = InventGTD_RU::find(factureTrans.InventGTDId, factureTrans.ItemId).ItemOrigCountryRegionId;
            countryName                   = LogisticsAddressCountryRegionTranslation::find(addressCountryRegionId, factureJour.LanguageId).ShortName;
        }
        else if (factureTrans.CountryRegionName)
        {
            countryName = factureTrans.CountryRegionName;
        }

        return countryName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns currency code in ISO numbering
    /// </summary>
    /// <returns>
    /// If iso code not specified, currency code returned
    /// </returns>
    protected CurrencyCode getCurrencyCode()
    {
        CurrencyCode    currencyCode;
        ISOCurrencyCode isoCurrencyCode;

        if (isoCurrencyCache.exists(currency.CurrencyCode))
        {
            currencyCode = isoCurrencyCache.lookup(currency.CurrencyCode);
        }
        else
        {
            isoCurrencyCode = ISOCurrencyCode::find(currency.CurrencyCodeISO);

            if (isoCurrencyCode)
            {
                currencyCode = int2str(isoCurrencyCode.isoCurrencyCodeNum);
            }
            else
            {
                currencyCode = currency.CurrencyCode;
            }

            isoCurrencyCache.insert(currency.CurrencyCode, currencyCode);
        }

        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrencyExt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns facture currency extension
    /// </summary>
    /// <returns>
    /// Facture currency extension
    /// </returns>
    protected Name getCurrencyExt()
    {
        Name                      ret;
        CurrencyNameDeclension_RU currencyNameDeclension;

        if (! currencyCache.exists([ factureJour.CurrencyCode, factureJour.LanguageId ]))
        {
            currencyNameDeclension = CurrencyNameDeclension_RU::find(factureJour.CurrencyCode,
                                                                     factureJour.LanguageId);

            ret = con2Str([ currencyNameDeclension.ShortName, currencyNameDeclension.ShortNamePenny ], ', ');

            currencyCache.insert([ factureJour.CurrencyCode, factureJour.LanguageId ], ret);
        }
        else
        {
            ret = currencyCache.lookup([ factureJour.CurrencyCode, factureJour.LanguageId ]);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates customer address for facture
    /// </summary>
    /// <returns>
    /// Customer address for facture
    /// </returns>
    protected FreeTxt getCustAddress()
    {
        return custAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets customer name in one line(if there are line breaks they are replaced with commas)
    /// </summary>
    /// <returns>
    /// Customer name in one line
    /// </returns>
    protected Name getCustName()
    {
        return strReplace(custName, '\n', ', ');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excise amount for facture line
    /// </summary>
    /// <returns>
    /// Excise amount for facture line
    /// </returns>
    protected TaxAmountExcise_RU getExcise()
    {
        return (factureJour.PrintInMST       ?
                factureTrans.ExciseAmountMST :
                factureTrans.Excise) * creditNoteSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExciseTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets excise amount in digits
    /// </summary>
    /// <returns>
    /// Excise amount in digits
    /// </returns>
    protected anytype getExciseTxt()
    {
        TaxAmountExcise_RU taxAmountExcise;

        taxAmountExcise = (factureJour.PrintInMST       ?
                           factureTrans.ExciseAmountMST :
                           factureTrans.Excise) * creditNoteSign;

        if (prepayment && !taxAgent)
        {
            return "@SYS77038";
        }

        if (!taxAmountExcise)
        {
            return factureJour.LanguageId ? SysLabel::labelId2String(literalStr("@SYS4081841"), factureJour.LanguageId) : "@SYS4081841";
        }

        return taxAmountExcise;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFEACCInventTableSearchParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the search parameters for finding the <c>FEACCInventTable_RU</c> table.
    /// </summary>
    /// <param name="_factureTrans">
    /// <c>FactureTrans_RU</c> record being processed.
    /// </param>
    /// <param name="_date">
    /// The date to which the FEACCId should relate.
    /// </param>
    /// <returns>The search parameters.</returns>
    protected FEACCInventTable_RU initializeFEACCInventTableSearchParameters(FactureTrans_RU _factureTrans, TransDate _date)
    {
        FEACCInventTable_RU searchParameters;
        searchParameters.initValue();

        searchParameters.ItemId = _factureTrans.ItemId;
        searchParameters.ActivationDate = _date;

        return searchParameters;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFEACCId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns FEACCId for the current facture line.
    /// </summary>
    /// <returns>
    /// FEACCId for the current facture line.
    /// </returns>
    protected FEACCId_RU getFEACCId()
    {
        FEACCId_RU feaccId;

        if (this.isCustomUnionSale())
        {
            feaccId = FEACCInventTable_RU::findFEACCIdByNaturalKeyAndInventGTD(this.initializeFEACCInventTableSearchParameters(factureTrans, factureJour.FactureDate), factureTrans.InventGTDId);
        }

        if (!feaccId)
        {
            feaccId = "@SYS77038";
        }

        return feaccId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExternalName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates external item desciption(item Name) for facture
    /// </summary>
    /// <returns>
    /// External item desciption(item Name) for facture
    /// </returns>
    protected ExternalItemFreeTxt getExternalName()
    {
        FactureTrans_RU     prepaymentTrans;
        ExternalItemFreeTxt lineTxt;
        str                 agreementStr;

        if ((factureTrans.Module          == FactureModule_RU::Cust          &&
             factureTrans.FactureLineType == FactureLineType_RU::Prepayment) ||
             taxAgent)
        {
            select firstonly TransNotes from prepaymentTrans
                where prepaymentTrans.FactureId == factureTrans.FactureId &&
                      prepaymentTrans.Module    == factureTrans.Module;

            lineTxt = prepaymentTrans.TransNotes;
        }
        else
        {
            lineTxt = factureTrans.ItemName;
        }

        if (isIndebtednessFacture && sourceIndebtednessInvoiceJour.RecId)
        {
            agreementStr = sourceIndebtednessAgreementHeaderExt.RecId
                                ? #blank + strFmt("@GLS113549", sourceIndebtednessAgreementHeaderExt.AgreementId, sourceIndebtednessAgreementHeaderExt.AgreementDate)
                                : '';

            return strFmt("@GLS114566",
                          sourceIndebtednessVendTable.name(),
                          agreementStr,
                          sourceIndebtednessInvoiceJour.InvoiceId,
                          lineTxt);
        }

        return lineTxt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets facture date for current facture
    /// </summary>
    /// <returns>
    /// Facture date for current facture
    /// </returns>
    protected TransDate getFactureDate()
    {
        return factureCorrSource.FactureDate_External ?
               factureCorrSource.FactureDate_External :
               factureCorrSource.FactureDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureExternalId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets external(document) facture Id
    /// </summary>
    /// <returns>
    /// External(document) facture Id
    /// </returns>
    protected FactureExternalId_RU getFactureExternalId()
    {
        FactureExternalId_RU factureExternalId = factureCorrSource.isExportFacture() &&
                                                 factureCorrSource.SourceExportFactureIdExt ?
                                                 factureCorrSource.SourceExportFactureIdExt :
                                                 factureCorrSource.FactureExternalId;

        if (headerData.getHeaderAttribute(#SeparateDivisionId))
        {
            factureExternalId = strFmt("@GLS111217", factureExternalId, headerData.getHeaderAttribute(#SeparateDivisionId));
        }

        return factureExternalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getINNOfBuyer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates string containing INN and KPP of buyer
    /// </summary>
    /// <returns>
    /// String containing INN and KPP of buyer
    /// </returns>
    protected INN_RU getINNOfBuyer()
    {
        innStr = kppOfBuyer ? strFmt("@GLS111217", innOfBuyer, kppOfBuyer) : innOfBuyer;

        return innStr != '-' ? innStr : #ScorecardMissing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getINNOfCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates string containing INN and KPP of current company
    /// </summary>
    /// <returns>
    /// String containing INN and KPP of current company
    /// </returns>
    protected INN_RU getINNOfCompany()
    {
        innStr = kppOfCompany ? strFmt("@GLS111217", innOfCompany, kppOfCompany) : innOfCompany;
        return innStr != '-' ? innStr : #ScorecardMissing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInventGTDId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets GTD for facture line
    /// </summary>
    /// <returns>
    /// GTD for facture line
    /// </returns>
    /// <remarks>
    /// If prepayment, one dash returned, otherwise two dashes
    /// </remarks>
    protected CustFreeInvoiceGTDId_RU getInventGTDId()
    {
        CustomJournalTable_RU   customJournalTable;
        CustomJournalTrans_RU   customJournalTrans;
        CustFreeInvoiceGTDId_RU gtdString;

        if (prepayment || taxAgent)
        {
            gtdString = "@SYS77038";
        }
        else if (factureTrans.InventGTDId)
        {
            gtdString = factureTrans.InventGTDId;
            customJournalTable = CustomJournalTable_RU::findByGTDId(factureTrans.InventGTDId);
            if (customJournalTable)
            {
                select firstonly customJournalTrans
                    order by customJournalTrans.CustomPartition asc
                    where customJournalTrans.CustomJournalId == customJournalTable.CustomJournalId
                       && customJournalTrans.ItemId          == factureTrans.ItemId;

                if (customJournalTrans)
                {
                    gtdString += '/' + customJournalTrans.CustomPartition;
                }
            }
        }

        return gtdString;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmountWithExcise</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets line amount with excise(excluding VAT)
    /// </summary>
    /// <returns>
    /// Line amount with excise(excluding VAT)
    /// </returns>
    protected TaxAmount getLineAmountWithExcise()
    {
        return this.getLineAmountWithVAT() - this.getVATAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmountWithExciseTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets line amount with excise(excluding VAT), if zero, dash returned
    /// </summary>
    /// <returns>
    /// Line amount with excise(excluding VAT)
    /// </returns>
    protected anytype getLineAmountWithExciseTxt()
    {
        if (!prepayment || taxAgent)
        {
            return this.getLineAmountWithExcise();
        }
        return "@SYS77038";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineAmountWithVAT</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets line amount with VAT
    /// </summary>
    /// <returns>
    /// Facture line amount with VAT
    /// </returns>
    protected TaxAmount getLineAmountWithVAT()
    {
        return (factureJour.PrintInMST                                 ?
                factureTrans.LineAmountMST + factureTrans.TaxAmountMST :
                factureTrans.LineAmount    + factureTrans.TaxAmount) * creditNoteSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of lines in facture
    /// </summary>
    /// <param name="_factureJour">
    /// Facture Journal number should be calculated for
    /// </param>
    /// <returns>
    /// Number of lines in facture
    /// </returns>
    protected  int getNumOfLines(FactureJour_RU _factureJour = null)
    {
        FactureJour_RU  factureJourLocal;
        FactureTrans_RU tmpTrans;
        FactureJour_RU  factureJourCaller;

        if (_factureJour)
        {
            factureJourLocal = _factureJour;
        }
        else if (recordId)
        {
            factureJourLocal = FactureJour_RU::findRecId(recordId);
        }
        else
        {
            factureJourLocal = args.record() as FactureJour_RU;
        }

        tmpTrans.setTmp();

        if (caller)
        {
            factureJourCaller = caller.getFactureJour();
        }

        if (caller && factureJourCaller.isTmp())
        {
            tmpTrans.setTmpData(caller.getFactureTrans());
        }
        else
        {
            tmpTrans.setTmpData(factureJourLocal.getTmpTrans());
        }

        return factureJourLocal.numOfLines(tmpTrans, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets facture journal payment info
    /// </summary>
    /// <returns>
    /// facture journal payment info
    /// </returns>
    protected str getPaymentInfo()
    {
        Object factureCalcAdj;

        if (classIdGet(caller) == classNum(FactureCalcAmountAdjustments_RU))
        {
            factureCalcAdj = caller;
            return factureCalcAdj.getPaymentInfo();
        }

        return factureJour.LanguageId ? strFmt(SysLabel::labelId2String(literalStr("@GLS114490"),factureJour.LanguageId),
                        factureJour.DocumentNum, factureJour.DocumentDate) : strFmt("@GLS114490", factureJour.DocumentNum, factureJour.DocumentDate);

    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets price for current facture line
    /// </summary>
    /// <returns>
    /// Price for current facture line, dash if zero
    /// </returns>
    protected anytype getPrice()
    {
        Price ret;
        Qty   qty = factureTrans.Qty ? factureTrans.Qty : 1;

        if (factureTrans.Price)
        {
            if (factureJour.PrintInMST &&
                abs(CurrencyExchangeHelper::amount(factureTrans.Price * factureTrans.ExchRate / 100 * qty)) == abs(factureTrans.LineAmountMST))
            {
                ret = CurrencyExchangeHelper::price(factureTrans.Price * factureTrans.ExchRate / 100);
            }
            else
            {
                ret = CurrencyExchangeHelper::price(abs(this.getLineAmountWithExcise() / qty));
            }
        }

        if (prepayment)
        {
            return "@SYS77038";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets qty for current facture line
    /// </summary>
    /// <returns>
    /// Qty for current facture line
    /// </returns>
    /// <remarks>
    /// Dash if prepayment
    /// </remarks>
    protected anytype getQty()
    {
        if (isIndebtednessFacture && factureJour.Module == FactureModule_RU::Vend)
        {
            return factureTrans.Qty * creditNoteSign;
        }

        if (prepayment)
        {
            return "@SYS77038";
        }

        return abs(factureTrans.Qty) * (factureTrans.LineAmount * creditNoteSign >= 0 ? 1 : -1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevisionDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns value which should be printed at Revision date field.
    /// </summary>
    /// <returns>
    /// Value of revision date field.
    /// </returns>
    protected str getRevisionDate()
    {
        if (factureJourHeader.CorrectionType == FactureCorrectionType_RU::Revision)
        {
            return strFmt("@GLS106745", factureJour.FactureDate_External ?
                                        factureJour.FactureDate_External :
                                        factureJour.FactureDate);
        }
        else
        {
            return #ScorecardMissing;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRevisionNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed at revision num field.
    /// </summary>
    /// <returns>
    /// Value which should be printed at revision num field.
    /// </returns>
    protected str getRevisionNum()
    {
        if (factureJourHeader.CorrectionType == FactureCorrectionType_RU::Revision)
        {
            return strFmt("@GLS106745", factureJourHeader.revisionNumDisplay());
        }
        else
        {
            return #ScorecardMissing;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax rate for current facture line
    /// </summary>
    /// <returns>
    /// Tax rate value for current facture line
    /// </returns>
    protected anytype getTaxRate()
    {
        return this.getVATValueTxt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitIdCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed at Unit Id field.
    /// </summary>
    /// <returns>
    /// Value which should be printed at Unit Id field.
    /// </returns>
    protected UnitOKEI_RU getUnitIdCode()
    {
        UnitOKEI_RU ret;

        if (!prepayment)
        {
            ret = UnitOfMeasure_RU::unitOfMeasure_W(UnitOfMeasure::findBySymbol(factureTrans.Unit)).NationalCode;
        }

        if (prepayment || !ret)
        {
            ret = "@SYS77038";
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnitIdTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Return unit of measure for facture line
    /// </summary>
    /// <returns>
    /// Unit of measure for facture line
    /// </returns>
    protected UnitOfMeasureReportingText getUnitIdTxt()
    {
        UnitOfMeasureReportingText ret;

        ret = ! prepayment                       ?
              UnitOfMeasureReportingTranslation::unitOfMeasureReportingText(
                  UnitOfMeasure::unitOfMeasureIdBySymbol(factureTrans.Unit),
                  factureJour.LanguageId) :
              "@SYS77038";

        if (! ret)
        {
            ret = factureTrans.Unit;
        }

        return ret ? ret : "@SYS77038";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTranslatedAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets Address and userinfo.
    /// </summary>
    /// <param name="_address">
    /// Address that has to be translated.
    /// </param>
    /// <returns>
    /// Translated address.  
    /// </returns>
    protected Addressing getTranslatedAddress(LogisticsAddressing _address)
    {
        LogisticsAddressing ret;

        LogisticsAddressCountryRegionTranslation logisticsAddressCountryRegionTranslation = LogisticsAddressCountryRegionTranslation::find(companyPostalAddress.CountryRegionId, factureJourHeader.LanguageId);
        LogisticsAddressCountryRegionLongName userLanguageLongName = LogisticsAddressCountryRegionTranslation::find(companyPostalAddress.CountryRegionId, currentUserLanguage()).LongName;

        if (userLanguageLongName && logisticsAddressCountryRegionTranslation.RecId)
        {
            ret = strReplace(
                _address,
                userLanguageLongName,
                logisticsAddressCountryRegionTranslation.LongName);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets VAT amount for facture line
    /// </summary>
    /// <returns>
    /// VAT amount for facture line
    /// </returns>
    protected TaxAmount getVATAmount()
    {
        if (isIndebtednessFacture)
        {
            return factureTrans.vatValue * this.getLineAmountWithVAT() / (100 + factureTrans.vatValue);
        }

        return (factureJour.PrintInMST    ?
                factureTrans.vatAmountMST :
                factureTrans.vat) * creditNoteSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATAmountTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets value which should be printed at VATAmount field.
    /// </summary>
    /// <returns>
    /// Value which should be printed at VATAmount field.
    /// </returns>
    protected str getVATAmountTxt()
    {
        return factureTrans.vatType != VATType_RU::NonLiable ?
               strFmt("@SYS82282", this.getVATAmount())      :
               SysLabel::labelId2String(literalStr("@GLS101443"), factureJour.LanguageId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATPartnerKind</Name>
				<Source><![CDATA[
    /// <summary>
    /// If facture is external facture, returns partnerkind for it - non resident or state
    /// </summary>
    /// <returns>
    /// Partnerkind for facture - non resident or state or empty
    /// </returns>
    protected FreeTxt getVATPartnerKind()
    {
        return partnerKind == VATPartnerKind_RU::NonResident    ? "@GLS112888" :
               partnerKind == VATPartnerKind_RU::StateStructure ? "@GLS112889" :
               "";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVATValueTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets VAT value formatted to string as digits
    /// </summary>
    /// <returns>
    /// VAT value formatted to string as digits
    /// </returns>
    protected str getVATValueTxt()
    {
        if (factureTrans.vatType == VATType_RU::NonLiable)
        {
            return SysLabel::labelId2String(literalStr("@GLS101443"), factureJour.LanguageId);
        }

        if (prepayment)
        {
            return strFmt(VATValueTxtFmt, num2str(factureTrans.vatValue, 1, 0, 1, 0),
                                           num2str(factureTrans.vatValue + 100, 1, 0, 1, 0));
        }

        return strFmt("@SYS82282", factureTrans.vatValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report
    /// </summary>
    /// <returns>
    /// true, if report has correct structure
    /// </returns>
    public boolean init()
    {
        companyInfo            = CompanyInfo::find();
        companyPostalAddress   = companyInfo.postalAddress();
        currencyCache          = new Map(Types::Container, Types::String);
        isoCurrencyCache       = new Map(Types::String, Types::String);

        factureTrans.setTmp();

        this.initFactureTxt();

        if (args                      &&
            args.caller()             &&
            (classIdGet(args.caller()) == classNum(FactureJourCreate_RU)                      ||
             classIdGet(args.caller()) == classNum(FactureJourCreateCust_RU)                  ||
             classIdGet(args.caller()) == classNum(FactureJourCreateVend_RU)                  ||
             classIdGet(args.caller()) == classNum(FactureJourCreateEmpl_RU)                  ||
             classIdGet(args.caller()) == classNum(FactureJourCreateTaxCorrection_Purch_RU)   ||
             classIdGet(args.caller()) == classNum(FactureJourCreateTaxCorrection_Sales_RU)   ||
             classIdGet(args.caller()) == classNum(FactureCalcAmountAdjustments_RU)))
        {
            caller = args.caller();
        }

        widthCols = width;

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAdvanceReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes facture data if it's source is advance report
    /// </summary>
    private void initAdvanceReport()
    {
        responsible = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                  OffPosition_RU::Responsible,
                                                                  OffReportType_RU::EmplAdvanceReportFacture).Name;
        creditNoteSign = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmountDifference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Intitializes facture data if facture source is amount difference
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Facture can not be created for employee facture
    /// </exception>
    private void initAmountDifference()
    {
        switch (factureJour.Module)
        {
            case FactureModule_RU::Cust :
                this.initAmountDifferenceCust();
                break;
            case FactureModule_RU::Vend :
                this.initAmountDifferenceVend();
                break;
            case FactureModule_RU::Empl :
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        creditNoteSign = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmountDifferenceCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes facture data if source is Customer Amount Difference
    /// </summary>
    private void initAmountDifferenceCust()
    {
        creditNoteSign = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAmountDifferenceVend</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes facture data if source is Vendor Amount Difference
    /// </summary>
    private void initAmountDifferenceVend()
    {
        creditNoteSign = 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes parameters for facture printing, such as exchRate at which facture printed
    /// </summary>
    protected void initBody()
    {
        if (factureJour.PrintInMST && factureJour.CurrencyCode != CompanyInfoHelper::standardCurrency())
        {
            printExchRate = factureTrans.ExchRate;
        }
        else
        {
            printExchRate = 100;
        }
        printExchRate = printExchRate * creditNoteSign;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes facture data if facture source is customer invoice
    /// </summary>
    /// <param name="_reportType">
    /// ReportType for which facture officials should be taken
    /// </param>
    private void initCustInvoice(OffReportType_RU _reportType = OffReportType_RU::CustFacture)
    {
        reportType     = _reportType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustInvoiceCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes facture parameters if facture source is credit note to any invoice
    /// </summary>
    private void initCustInvoiceCreditNote()
    {
        reportType     = OffReportType_RU::CustFactureCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFactureHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data for facture header.
    /// </summary>
    private void initFactureHeader()
    {
        factureJourHeader = FactureJour_RU::find(factureJour.FactureId, factureJour.Module);

        factureJourParm = FactureJourParm_RU::newParameters(factureJour, true);
        if (factureTrans.isTmp())
        {
            select firstonly factureTrans;
            factureJourParm.setFactureTrans(factureTrans);
        }

        headerData = FactureHeaderData_RU::newFromCaller(factureJourParm);

        factureCorrSource = factureJourHeader.data();
        if (factureJourHeader.CorrectionType == FactureCorrectionType_RU::Revision)
        {
            factureCorrSource = FactureJour_RU::findRecId(factureJourHeader.RefRevisedFacture);
        }

        companyName = headerData.getHeaderAttribute(#CompanyName);
        if (companyPostalAddress.CountryRegionId && factureJour.LanguageId && factureJour.LanguageId != currentUserLanguage())
        {
            companyAddress = this.getTranslatedAddress(headerData.getHeaderAttribute(#CompanyAddress));
        }
        else
        {  
            companyAddress = headerData.getHeaderAttribute(#CompanyAddress);
        }
        innOfCompany = headerData.getHeaderAttribute(#CompanyINN);
        kppOfCompany = headerData.getHeaderAttribute(#CompanyKPP);

        if (factureJour.DeliveryInfoNoPrint || headerData.isTaxAgent())
        {
            consignor = #ScorecardMissing;
            consignee = #ScorecardMissing;
        }
        else
        {
            switch (factureJour.FactureType)
            {
                case FactureType_RU::Prepayment        :
                    consignor = #ScorecardMissing;
                    consignee = #ScorecardMissing;
                    break;
                case FactureType_RU::AmoutDifference   :
                case FactureType_RU::ExchAdj           :
                case FactureType_RU::AdvanceAdjustment :
                case FactureType_RU::VATAdjustment     :
                    consignor = SysLabel::labelId2String(literalStr("@GLS102741"), factureJour.LanguageId);
                    if (companyPostalAddress.CountryRegionId && factureJour.LanguageId && factureJour.LanguageId != currentUserLanguage())
                    {
                        consignee = this.getTranslatedAddress(headerData.getHeaderAttribute(#ConsigneeAddress)) ?
                             strFmt("@SYS26868", headerData.getHeaderAttribute(#ConsigneeName), this.getTranslatedAddress(headerData.getHeaderAttribute(#ConsigneeAddress))) :
                             any2str(headerData.getHeaderAttribute(#ConsigneeName));
                    }
                    else
                    {
                        consignee = headerData.getHeaderAttribute(#ConsigneeAddress) ?
                            strFmt("@SYS26868", headerData.getHeaderAttribute(#ConsigneeName), headerData.getHeaderAttribute(#ConsigneeAddress)) :
                            any2str(headerData.getHeaderAttribute(#ConsigneeName));
                    }
                    break;
                case FactureType_RU::Invoice           :
                case FactureType_RU::Facture           :
                case FactureType_RU::TaxCorrection     :
                    if (companyPostalAddress.CountryRegionId && factureJour.LanguageId && factureJour.LanguageId != currentUserLanguage())
                    {
                        consignor = this.getTranslatedAddress(headerData.getHeaderAttribute(#ConsignorAddress)) ?
                             strFmt("@SYS26868", headerData.getHeaderAttribute(#ConsignorName), this.getTranslatedAddress(headerData.getHeaderAttribute(#ConsignorAddress))) :
                             any2str(headerData.getHeaderAttribute(#ConsignorName));                   
                        consignee = this.getTranslatedAddress(headerData.getHeaderAttribute(#ConsigneeAddress)) ?
                             strFmt("@SYS26868", headerData.getHeaderAttribute(#ConsigneeName), this.getTranslatedAddress(headerData.getHeaderAttribute(#ConsigneeAddress))) :
                             any2str(headerData.getHeaderAttribute(#ConsigneeName));
                    }
					else
					{
                        consignor = headerData.getHeaderAttribute(#ConsignorAddress) ?
                            strFmt("@SYS26868", headerData.getHeaderAttribute(#ConsignorName), headerData.getHeaderAttribute(#ConsignorAddress)) :
                            any2str(headerData.getHeaderAttribute(#ConsignorName));
                        consignee = headerData.getHeaderAttribute(#ConsigneeAddress) ?
                            strFmt("@SYS26868", headerData.getHeaderAttribute(#ConsigneeName), headerData.getHeaderAttribute(#ConsigneeAddress)) :
                            any2str(headerData.getHeaderAttribute(#ConsigneeName));
                    }
                    break;
                case FactureType_RU::AdvanceReport    :
                    if (factureJour.Consignor)
                    {
                        if (companyPostalAddress.CountryRegionId && factureJour.LanguageId && factureJour.LanguageId != currentUserLanguage())
                        {
                            consignor = this.getTranslatedAddress(headerData.getHeaderAttribute(#ConsignorAddress)) ?
                             strFmt("@SYS26868", headerData.getHeaderAttribute(#ConsignorName), this.getTranslatedAddress(headerData.getHeaderAttribute(#ConsignorAddress))) :
                             any2str(headerData.getHeaderAttribute(#ConsignorName));
                        }
                        else
                        {
                            consignor = headerData.getHeaderAttribute(#ConsignorAddress) ?
                                strFmt("@SYS26868", headerData.getHeaderAttribute(#ConsignorName), headerData.getHeaderAttribute(#ConsignorAddress)) :
                                any2str(headerData.getHeaderAttribute(#ConsignorName));
                        }
                    }
                    if (companyPostalAddress.CountryRegionId && factureJour.LanguageId && factureJour.LanguageId != currentUserLanguage())
                    {
                        consignee = this.getTranslatedAddress(headerData.getHeaderAttribute(#ConsigneeAddress)) ?
                             strFmt("@SYS26868", headerData.getHeaderAttribute(#ConsigneeName), this.getTranslatedAddress(headerData.getHeaderAttribute(#ConsigneeAddress))) :
                             any2str(headerData.getHeaderAttribute(#ConsigneeName));
                    }
                    else
                    {
                        consignee = headerData.getHeaderAttribute(#ConsigneeAddress) ?
                            strFmt("@SYS26868", headerData.getHeaderAttribute(#ConsigneeName), headerData.getHeaderAttribute(#ConsigneeAddress)) :
                            any2str(headerData.getHeaderAttribute(#ConsigneeName));
                    }
                    break;
            }
        }

        custName = headerData.getHeaderAttribute(#ContragentName);
        if (companyPostalAddress.CountryRegionId && factureJour.LanguageId && factureJour.LanguageId != currentUserLanguage())
        {
            custAddress = this.getTranslatedAddress(headerData.getHeaderAttribute(#ContragentAddress));
        }
        else
        {
            custAddress = headerData.getHeaderAttribute(#ContragentAddress);
        }
        kppOfBuyer = headerData.getHeaderAttribute(#ContragentKPP);
        innOfBuyer = headerData.getHeaderAttribute(#ContragentINN);

        currency = Currency::find(factureJour.PrintInMST
                ? CompanyInfoHelper::standardCurrency()
                : factureJour.CurrencyCode);

        director = headerData.offDirector();
        accountant = headerData.offAccountant();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFactureTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates facture document name
    /// </summary>
    /// <remarks>
    /// Facture document name(original, copy, etc)
    /// </remarks>
    protected void initFactureTxt()
    {
        if (caller && caller.isProforma())
        {
            factureTxt = "@GLS100766";
        }
        else
        {
            switch (printCopyOriginal)
            {
                case PrintCopyOriginal::Original:
                    factureTxt = this.forceTranslateLabelToJourLanguageId(literalStr("@GLS100743"));
                    break;
                case PrintCopyOriginal::Copy:
                    factureTxt = this.forceTranslateLabelToJourLanguageId(literalStr("@GLS100804"));
                    break;
                default:
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceTranslateLabelToJourLanguageId</Name>
				<Source><![CDATA[
    private str forceTranslateLabelToJourLanguageId(str _labelId)
    {
        str txt = SysLabel::labelId2String(_labelId);

        if (args.record())
        {
            select firstonly factureJour
                where factureJour.RecId == args.record().RecId;

            if (factureJour.LanguageId)
            {
                txt = SysLabel::labelId2String(_labelId, factureJour.LanguageId);
            }
        }

        return txt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data for facture output
    /// </summary>
    protected void initHeader()
    {
        VendTable   vendTable,
                    tmpConsignor = VendTable::find(factureJour.Consignor);
        CustTable   custTable    = CustTable::find(factureJour.CustVendInvoiceAccount),
                    tmpConsignee = CustTable::find(factureJour.Consignee);
        HcmWorker   worker;
        FactureJour_RU factureJourCaller;

        FactureTrans_RU tmpTrans;
 
        if (caller)
        {
            factureJourCaller = caller.getFactureJour();
        }
  
        if (caller && factureJourCaller.isTmp())
        {
            tmpTrans.setTmp();
            tmpTrans.setTmpData(caller.getFactureTrans());
            select firstonly tmpTrans;
            vendTable = VendTable::find(factureJour.orderAccount(tmpTrans));
        }
        else
        {
            vendTable = VendTable::find(factureJour.orderAccount());
        }

        prepayment  = false;
        taxAgent    = false;

        this.initFactureHeader();

        factureDate = this.getFactureDate();

        switch (factureJour.FactureType)
        {
            case FactureType_RU::Invoice         :
            case FactureType_RU::Facture         :
                this.initInvoice(vendTable);
                break;
            case FactureType_RU::Prepayment      :
                if (factureJour.Module == FactureModule_RU::Vend)
                {
                    vendTable = VendTable::find(factureJour.CustVendInvoiceAccount);
                    this.initVendPrepayment(vendTable);
                }
                else
                {
                    this.initPrepayment();
                }
                break;
            case FactureType_RU::AmoutDifference   :
            case FactureType_RU::ExchAdj           :
            case FactureType_RU::AdvanceAdjustment :
            case FactureType_RU::VATAdjustment     :
                this.initAmountDifference();
                break;
            case FactureType_RU::AdvanceReport   :
                worker = HcmWorker::findByPersonnelNumber(factureJour.CustVendInvoiceAccount);
                this.initAdvanceReport();
                break;
            case FactureType_RU::TaxCorrection   :
                this.initTaxCorrection(vendTable);
                break;
        }

        totalLineAmount    = 0;
        totalExcise        = 0;
        totalVATAmount     = 0;
        totalAmountWithVAT = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method initializes report data if facture source is invoice of any type
    /// </summary>
    /// <param name="_vendTable">
    /// VendTable facture will be created for
    /// </param>
    /// <exception cref="Exception::Error">
    /// Method cannot be used for factures from Empl module
    /// </exception>
    private void initInvoice(VendTable _vendTable)
    {
        if (factureJour.Module == FactureModule_RU::Empl)
            throw error(Error::wrongUseOfFunction(funcName()));

        isIndebtednessFacture = factureJour.isIndebtednessFacture();

        if (! factureJour.creditNote()                                                                          ||
            (factureJour.creditNote()                                                                           &&
             ((factureJour.Module                             == FactureModule_RU::Cust                         &&
               CustFormletterParameters::find().CreditNotePrintType_RU == CreditNotePrintType_RU::SourceAmount) ||
              (factureJour.Module                             == FactureModule_RU::Vend                         &&
               VendFormletterParameters::find().CreditNotePrintType_RU == CreditNotePrintType_RU::SourceAmount  &&
               ! isIndebtednessFacture))))

        {
            switch (factureJour.Module)
            {
                case FactureModule_RU::Cust :
                    this.initCustInvoice();
                    break;
                case FactureModule_RU::Vend :
                    this.initVendInvoice(_vendTable);
                    break;
            }
            creditNoteSign = 1;
        }
        else
        {
            switch (factureJour.Module)
            {
                case FactureModule_RU::Cust :
                    this.initCustInvoiceCreditNote();
                    break;
                case FactureModule_RU::Vend :
                    this.initVendInvoiceCreditNote();
                    break;
            }
            creditNoteSign = -1;
        }

        responsible = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                  OffPosition_RU::Responsible,
                                                                  reportType).Name;

        if (isIndebtednessFacture)
        {
            sourceIndebtednessInvoiceJour        = factureJour.indebtednessSourceInvoiceJour();
            sourceIndebtednessVendTable          = VendTable::find(sourceIndebtednessInvoiceJour.InvoiceAccount);
            sourceIndebtednessAgreementHeaderExt = AgreementHeaderExt_RU::findByDefaultDimension(sourceIndebtednessInvoiceJour.DefaultDimension) as PurchAgreementHeaderExt_RU;

            if (factureJour.creditNote())
            {
                creditNoteSign = -1;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report data if facture source is prepayment
    /// </summary>
    private void initPrepayment()
    {
        creditNoteSign = 1;
        prepayment     = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    protected void initSectionMap()
    {
        this.addSection(reportHeader);
        this.addSection(pageHeader);
        this.addSection(body, true);
        this.addSection(reportFooter);
        this.addSection(footer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTaxCorrection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data for facture if it's source is tax correction
    /// </summary>
    /// <param name="_vendTable">
    /// Vend table corresponding to vendor
    /// </param>
    private void initTaxCorrection(VendTable _vendTable)

    {
        switch (factureJour.Module)
        {
            case FactureModule_RU::TaxCorrectionSales      :
            case FactureModule_RU::TaxCorrectionPurch_Cust :
                this.initCustInvoice(OffReportType_RU::TaxCorrectionFactureCust);
                break;
            case FactureModule_RU::TaxCorrectionPurch      :
            case FactureModule_RU::TaxCorrectionSales_Vend :
                this.initVendInvoice(_vendTable, OffReportType_RU::TaxCorrectionFactureVend);
                break;
        }
        creditNoteSign = 1;

        responsible = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                  OffPosition_RU::Responsible,
                                                                  reportType).Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data for facture if it's source is vend invoice
    /// </summary>
    /// <param name="_vendTable">
    /// Vend table corresponding to vendor
    /// </param>
    /// <param name="_reportType">
    /// report type to get right officials
    /// </param>
    private void initVendInvoice(VendTable        _vendTable,
                                 OffReportType_RU _reportType = OffReportType_RU::VendFacture)
    {
        reportType     = _reportType;
        partnerKind    = _vendTable.vatPartnerKind_RU;

        if (_vendTable.vatTaxAgent_RU && _reportType == OffReportType_RU::TaxCorrectionFactureVend)
        {
            prepayment = true;
            taxAgent   = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendInvoiceCreditNote</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data for facture if it's source is vend credit note
    /// </summary>
    private void initVendInvoiceCreditNote()
    {
        reportType     = OffReportType_RU::VendFactureCreditNote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initVendPrepayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes data for facture if it's source is vend prepayment
    /// </summary>
    /// <param name="_vendTable">
    /// Vend table corresponding to vendor
    /// </param>
    private void initVendPrepayment(VendTable _vendTable)
    {
        reportType     = OffReportType_RU::VendFacture;
        partnerKind    = _vendTable.vatPartnerKind_RU;

        responsible = OfficialsTrans_RU::findFirstSessionPosition(factureJour.OffSessionId,
                                                                  OffPosition_RU::Responsible,
                                                                  reportType).Name;

        creditNoteSign = 1;
        prepayment     = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCustomUnionSale</Name>
				<Source><![CDATA[
    private boolean isCustomUnionSale()
    {
        if (!isCustomUnionSaleSet)
        {
            isCustomUnionSaleSet = true;

            LogisticsAddressCountryRegion countryRegion = LogisticsAddressCountryRegion::find(DirParty::primaryPostalAddress(headerData.getHeaderAttribute(#ConsigneeParty)).CountryRegionId);

            isCustomUnionSale = countryRegion.MemberOfCustomsUnion_RU && countryRegion.ISOcode != #isoRU;
        }

        return isCustomUnionSale;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateNewPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method checks whether report should create new page
    /// </summary>
    /// <returns>
    /// Whether last fetched record should be printed on current page
    /// </returns>
    protected boolean mustCreateNewPage()
    {
        real    requiredHeight;

        requiredHeight = this.getRangeHeight(body);

        requiredHeight += conPeek(mapSections.lookup(footer), #posSectionHeight);

        if (lineNo == numOfLines && lineNo != 1)
        {
            requiredHeight += conPeek(mapSections.lookup(reportFooter), #posSectionHeight);
        }

        return pageHeight - currentHeight < requiredHeight;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container collerPack;

        if (caller)
        {
            collerPack = caller.packAll();
        }
        else
        {
            collerPack = conNull();
        }

        return [CurrentVersion, printCopyOriginal, recordId, super(), caller ? classId2Name(classIdGet(caller)) : '', collerPack];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPrintCopyOriginal</Name>
				<Source><![CDATA[
    public PrintCopyOriginal parmPrintCopyOriginal(PrintCopyOriginal _printCopyOriginal = printCopyOriginal)
    {
        printCopyOriginal = _printCopyOriginal;
        return printCopyOriginal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRecordId</Name>
				<Source><![CDATA[
    public RecId parmRecordId(RecId _recordId = recordId)
    {
        recordId = _recordId;
        return recordId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of template for report
    /// </summary>
    /// <returns>
    /// name of template for report
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(Facture_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of cells to be filled with data
    /// </summary>
    /// <returns>
    /// Number of cells to be filled with data
    /// </returns>
    #define.cellsBody(11)
    #define.cellsOther(29)
    protected Counter totalCells()
    {
        return this.getNumOfLines() * #cellsBody + #cellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static XMLExcelReport_Facture_RU construct()
    {
        return new XMLExcelReport_Facture_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns desription of run base operation.
    /// </summary>
    /// <returns>
    /// Desription of run base operation.
    /// </returns>
    public static Description description()
    {
        return "@GLS100743";
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeWithPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes facture report with specified print management setting details
    /// </summary>
    /// <param name="_args">
    /// Args
    /// </param>
    /// <param name="_settingDetail">
    /// print management setting details
    /// </param>
    /// <param name="_recordId">
    /// Facture journal record RecId
    /// </param>
    public static void executeWithPrintMgmt(Args _args, PrintMgmtPrintSettingDetail _settingDetail, RecId _recordId)
    {
        XMLExcelReport_Facture_RU   reportFacture = XMLExcelReport_Facture_RU::construct();
        PrintCopyOriginal           printCopyOriginal;

        if (_settingDetail.parmType() == PrintMgmtDocInstanceType::Copy)
        {
            printCopyOriginal = PrintCopyOriginal::Copy;
        }
        else
        {
            printCopyOriginal = PrintCopyOriginal::Original;
        }

        _settingDetail.parmPrintJobSettings().numberOfCopies(_settingDetail.parmNumberOfCopies());

        reportFacture.parmArgs(_args);
        reportFacture.parmRecordId(_recordId);
        reportFacture.parmPrintDestinationSettings(_settingDetail.parmPrintJobSettings());

        reportFacture.parmPrintCopyOriginal(printCopyOriginal);

        if (reportFacture.init())
        {
            reportFacture.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        int         version = RunBase::getVersion(_packedClass);
        boolean     ret = true;
        container   packedSuperClass, packedCaller;
        str         packedCallerName;

        switch (version)
        {
            case CurrentVersion:
                [version, printCopyOriginal, recordId, packedSuperClass, packedCallerName, packedCaller] = _packedClass;

                if (packedCallerName && packedCaller != conNull())
                {
                    caller = SysDictClass::newName(packedCallerName).makeObject();
                    ret = caller.unpackAll(packedCaller);
                }

                ret = ret && super(packedSuperClass);
                args.caller(caller);
                break;
            default:
                ret = false;
                break;

        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        XMLExcelReport_Facture_RU reportPrint;

        reportPrint = XMLExcelReport_Facture_RU::construct();

        reportPrint.parmArgs(_args);

        if (reportPrint.init())
        {
            reportPrint.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceInfo</Name>
				<Source><![CDATA[
    private str getInvoiceInfo()
    {
        boolean isInvoice;

        switch (factureJour.Module)
        {
            case FactureModule_RU::Vend :
            case FactureModule_RU::Cust :
                isInvoice = true;
                break;
        }

        str ret;

        if (isInvoice)
        {
            const str template = '№ п/п %1 № %2 от %3';

            Map invoiceLineNumbers = new Map(Types::Container, Types::String);
            FactureTrans_RU factureTransLocal;

            if (factureTransSortedList.first(factureTransLocal))
            {
                do
                {
                    container key = [factureTransLocal.InvoiceId, factureTransLocal.InvoiceDate];
                    invoiceLineNumbers.insert(key,
                        (invoiceLineNumbers.exists(key)
                            ? invoiceLineNumbers.lookup(key) + ';'
                            : '')
                        + num2Str(factureTransLocal.LineNum - numOfOrigLines, 0, 0, DecimalSeparator::Auto, ThousandSeparator::Auto));
                } while (factureTransSortedList.next(factureTransLocal));
            }

            MapEnumerator me = invoiceLineNumbers.getEnumerator();

            while (me.moveNext())
            {
                container key = me.currentKey();

                str lineNumbers = invoiceLineNumbers.exists(key) ? invoiceLineNumbers.lookup(key) : '';

                InvoiceId invoiceId;
                InvoiceDate invoiceDate;
                [invoiceId, invoiceDate] = key;

                ret += (ret != '' ? ';' : '') + strFmt(template, lineNumbers, invoiceId, invoiceDate);
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLineNum</Name>
				<Source><![CDATA[
    private str getLineNum()
    {
        return int2Str(any2int(factureTrans.LineNum - numOfOrigLines));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFactureTransSortedList</Name>
				<Source><![CDATA[
    private RecordSortedList getFactureTransSortedList()
    {
        factureTransSortedList = new RecordSortedList(tableNum(FactureTrans_RU));
        factureTransSortedList.sortOrder(fieldNum(FactureTrans_RU, LineNum));

        while select
            sum(LineAmount), sum(Qty), sum(Excise), sum(vat), sum(TaxAmount), sum(LineAmountMST),
            sum(ExciseAmountMST), sum(vatAmountMST), sum(TaxAmountMST), minof(LineNum), minof(InvoiceId), minof(InvoiceDate)
            from factureTrans
            group by FactureId, Price, FactureLineType, Module, ItemName, Unit, vatType, vatValue,
                CountryRegionName, ItemId, Category, InventDimId, InventGTDId, ExchRate
            where factureTrans.FactureId == factureJour.FactureId &&
                factureTrans.Module    == factureJour.Module
        {
            factureTransSortedList.ins(factureTrans, false);
        }

        return factureTransSortedList;

    }

]]></Source>
			</Method>
			<Method>
				<Name>getNumOfOrigLines</Name>
				<Source><![CDATA[
    private Counter getNumOfOrigLines(FactureJour_RU _factureJour)
    {
        Counter ret = 0;

        if (_factureJour.CorrectionType == FactureCorrectionType_RU::Revision)
        {
            FactureTaxCorrectionEngine_RU taxCorrectionEngine = FactureTaxCorrectionEngine_RU::newParameters(_factureJour, false, true, false, true);
            FactureTrans_RU factureTransLocal;
            factureTransLocal.setTmp();
            factureTransLocal.setTmpData(taxCorrectionEngine.getFactureTransOrig());

            select count(RecId) from factureTransLocal;

            ret = any2Int(factureTransLocal.RecId);
        }

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>