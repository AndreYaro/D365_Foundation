<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SmaServiceOrderActivityDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SMAServiceOrderActivityDP</c> class is the Report Data Provider class for the service
/// activities report.
/// </summary>
[
SRSReportParameterAttribute(classstr(SMAServiceOrderActivityContract))
]
class SmaServiceOrderActivityDP extends SRSReportDataProviderBase
{
    SMATmpServiceOrdersActivity smaTmpServiceOrdersActivity;

    // KPI Goal parameter values
    CustGroupId         custGroupId;
    SMAAgreementGroupId agreementGroupId;
    utcdatetime         dateFrom;
    utcdatetime         dateTo;

    boolean             noAgreementsSelected;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>countServiceOrdersWithAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of the service orders that have service agreements.
    /// </summary>
    /// <param name="_serviceActivitySRS_Query">
    /// An instance of the <c>QueryRun</c> class.
    /// </param>
    /// <param name="_dateValue">
    /// The date range.
    /// </param>
    /// <returns>
    /// The number of service orders with agreements for that date.
    /// </returns>
    protected int countServiceOrdersWithAgreements(QueryRun _serviceActivitySRS_Query, date _dateValue)
    {
        SMAServiceOrderTable    serviceOrder;
        Query                   serviceActivitySRS_Q;
        int                     result;

        serviceActivitySRS_Q = _serviceActivitySRS_Query.query();

        _serviceActivitySRS_Query.reset();

        // sets customer group and agreement group if any
        this.setRangesForServiceOrdersWithAgreements(serviceActivitySRS_Q);

        serviceActivitySRS_Q.dataSourceTable(tablenum(SMAServiceOrderTable)).findRange(fieldnum(SMAServiceOrderTable, ServiceDateTime)).value(SysQuery::range(_dateValue, _dateValue));

        //go through the records returned by query
        while (_serviceActivitySRS_Query.next())
        {
            serviceOrder = _serviceActivitySRS_Query.get(tablenum(SMAServiceOrderTable));
            result += str2int(serviceOrder.ServiceOrderId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countServiceOrdersWithoutAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the number of service orders that do not have service agreements.
    /// </summary>
    /// <param name="_serviceActivityWOAgreementSRS_Query">
    /// An instance of the <c>QueryRun</c> class.
    /// </param>
    /// <param name="_dateValue">
    /// The date range.
    /// </param>
    /// <returns>
    /// The number of service orders without agreements for that date.
    /// </returns>
    protected int countServiceOrdersWithoutAgreements(QueryRun _serviceActivityWOAgreementSRS_Query, date _dateValue)
    {
        SMAServiceOrderTable    serviceOrder;
        Query serviceActivityWOAgreementSRS_Q = _serviceActivityWOAgreementSRS_Query.query();
        int result;

        _serviceActivityWOAgreementSRS_Query.reset();

        // set range value to select only records with 'null' AgreementId
        this.setRangesForServiceOrdersWithoutAgree(serviceActivityWOAgreementSRS_Q);

        serviceActivityWOAgreementSRS_Q.dataSourceTable(tablenum(SMAServiceOrderTable)).findRange(fieldnum(SMAServiceOrderTable, ServiceDateTime)).value(SysQuery::range(_dateValue, _dateValue));

        //go through the records returned by query
        while (_serviceActivityWOAgreementSRS_Query.next())
        {
            serviceOrder = _serviceActivityWOAgreementSRS_Query.get(tablenum(SMAServiceOrderTable));
            result += str2int(serviceOrder.ServiceOrderId);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSMATmpServiceOrdersActivity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the temporary table and retrieves a data table to the calling method.
    /// </summary>
    /// <returns>
    /// The required report data from the temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(SMATmpServiceOrdersActivity))
    ]
    public SMATmpServiceOrdersActivity getSMATmpServiceOrdersActivity()
    {
        select smaTmpServiceOrdersActivity;
        return smaTmpServiceOrdersActivity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts data into the temporary table.
    /// </summary>
    /// <param name="_date">
    /// The date for the service orders.
    /// </param>
    /// <param name="_numberOfServiceOrders">
    /// The number of service orders.
    /// </param>
    protected  void insertIntoTable(
        date        _date,
        int         _numberOfServiceOrders
        )
    {
        smaTmpServiceOrdersActivity.ServiceDateTime         = DateTimeUtil::newDateTime(_date, 0);
        smaTmpServiceOrdersActivity.NumberOfServiceOrders   = _numberOfServiceOrders;
        smaTmpServiceOrdersActivity.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    public void processReport()
    {
        SysQueryRun                 serviceActivitySRS_Query = new SysQueryRun(querystr(SMAServiceOrdersActivitySRS));
        SysQueryRun                 serviceActivityWOAgreementSRS_Query = new SysQueryRun(querystr(SMAServiceOrdersNoAgreementActivitySRS));

        date dateToValue;
        date dateValue;
        int orderCount = 0;

        serviceActivitySRS_Query.init();
        serviceActivityWOAgreementSRS_Query.init();

        this.readParameterValues();

        dateToValue = DateTimeUtil::date(dateTo);

        for (dateValue = DateTimeUtil::date(dateFrom); dateValue <= dateToValue; dateValue++)
        {
            orderCount = 0;

            // only include the service orders that have an agreement if the no agreement value is not selected.
            if ( ! noAgreementsSelected )
            {
                // count the service orders that have agreements
                orderCount += this.countServiceOrdersWithAgreements(serviceActivitySRS_Query, dateValue);
            }

            // if the 'No agreement is selected or if All members are slected
            if (agreementGroupId == '')
            {
                //Count service orders without aggrements
                orderCount += this.countServiceOrdersWithoutAgreements(serviceActivityWOAgreementSRS_Query, dateValue);
            }

            this.insertIntoTable(dateValue, orderCount);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>readParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reads the parameters that are set in the report dialog box.
    /// </summary>
    protected void readParameterValues()
    {
        SMAServiceOrderActivityContract contract = this.parmDataContract();

        // check if the all parameter value has been selected
        custGroupId             = contract.shouldSelectAllCustGroup() ? '' : contract.parmCustGroupId();

        noAgreementsSelected    = contract.shouldSelectAgreementsWithoutGroup();

        agreementGroupId        = (contract.shouldSelectAllAgreementGroup() || noAgreementsSelected) ? '' : contract.parmSMAAgreementGroupId();

        dateFrom                = contract.parmFromDate();
        dateTo                  = contract.parmToDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangesForServiceOrdersWithAgreements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ranges for the service orders with agreements query.
    /// </summary>
    /// <param name="_serviceActivitySRS_Query">
    /// An instance of the <c>Query</c> class.
    /// </param>
    protected void setRangesForServiceOrdersWithAgreements(Query _serviceActivitySRS_Query)
    {
        // add customer group range
        if (custGroupId)
        {
             _serviceActivitySRS_Query.dataSourceTable(tablenum(CustTable)).findRange(fieldnum(CustTable, CustGroup)).value(custGroupId);
        }

         // add service agreement group range
        if (agreementGroupId)
        {
            _serviceActivitySRS_Query.dataSourceTable(tablenum(SMAAgreementTable)).findRange(fieldnum(SMAAgreementTable, AgreementGroupId)).value(agreementGroupId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRangesForServiceOrdersWithoutAgree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the ranges for the service orders without agreements query.
    /// </summary>
    /// <param name="_serviceActivitySRS_Query">
    /// An instance of the <c>Query</c> class.
    /// </param>
    protected void setRangesForServiceOrdersWithoutAgree(Query _serviceActivitySRS_Query)
    {
        // set range value to select only records with 'null' AgreementId
        _serviceActivitySRS_Query.dataSourceTable(tablenum(SMAServiceOrderTable)).findRange(fieldnum(SMAServiceOrderTable, AgreementId)).value(SysQuery::valueEmptyString());

        if (custGroupId)
        {
            _serviceActivitySRS_Query.dataSourceTable(tablenum(CustTable)).findRange(fieldnum(CustTable, CustGroup)).value(custGroupId);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
