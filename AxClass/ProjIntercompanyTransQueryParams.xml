<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjIntercompanyTransQueryParams</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class provides the query options to filter the transactions
/// that will be included in a project intercompany invoice.
/// </summary>
public class ProjIntercompanyTransQueryParams implements SysPackable
{
    DataAreaId          borrowingLE;
    ProjId              projectId;
    ProjInvoiceProjId   contractId;
    TransDate           fromDate;
    TransDate           toDate;
    boolean             includeSubprojects;
    boolean             includeHours;
    boolean             includeExpenses;
    boolean             includeVendorInvoiceLines;
    boolean             includeProjAdvancedJournalLines;
    Query               projectQuery;

    #define.CurrentVersion(2)
    #define.Attributes(
        borrowingLE,
        projectId,
        contractId,
        fromDate,
        toDate,
        includeSubProjects,
        includeHours,
        includeExpenses,
        includeVendorInvoiceLines,
        includeProjAdvancedJournalLines
        )
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        container packedProjQuery;

        if (projectQuery)
        {
            packedProjQuery = projectQuery.pack();
        }

        return [#CurrentVersion, #Attributes, packedProjQuery];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBorrowingLE</Name>
				<Source><![CDATA[
        public DataAreaId parmBorrowingLE(DataAreaId _borrowingLe = borrowingLE)
    {
        borrowingLE = _borrowingLe;
        return borrowingLE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmContractId</Name>
				<Source><![CDATA[
        public ProjInvoiceProjId parmContractId(ProjInvoiceProjId _contractId = contractId)
    {
        contractId = _contractId;
        return contractId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
        public TransDate parmFromDate(TransDate _fromDate = fromDate)
    {
        fromDate = _fromDate;
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeExpenses</Name>
				<Source><![CDATA[
        public boolean parmIncludeExpenses(boolean _includeExpenses = includeExpenses)
    {
        includeExpenses = _includeExpenses;
        return includeExpenses;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeHours</Name>
				<Source><![CDATA[
        public boolean parmIncludeHours(boolean _includeHours = includeHours)
    {
        includeHours = _includeHours;
        return includeHours;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeSubprojects</Name>
				<Source><![CDATA[
        public boolean parmIncludeSubprojects(boolean _includeSubprojects = includeSubprojects)
    {
        includeSubprojects = _includeSubprojects;
        return includeSubprojects;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeVendorInvoiceLines</Name>
				<Source><![CDATA[
        public boolean parmIncludeVendorInvoiceLines(boolean _includeVendorInvoiceLines = includeVendorInvoiceLines)
    {
        includeVendorInvoiceLines = _includeVendorInvoiceLines;
        return includeVendorInvoiceLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIncludeProjAdvancedJournalLines</Name>
				<Source><![CDATA[
    public boolean parmIncludeProjAdvancedJournalLines(boolean _includeProjAdvancedJournalLines = includeProjAdvancedJournalLines)
    {
        includeProjAdvancedJournalLines = _includeProjAdvancedJournalLines;
        return includeProjAdvancedJournalLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
        public ProjId parmProjectId(ProjId _projectId = projectId)
    {
        projectId = _projectId;
        return projectId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectQuery</Name>
				<Source><![CDATA[
        public Query parmProjectQuery(Query _projectQuery = projectQuery)
    {
        projectQuery = _projectQuery;
        return projectQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
        public TransDate parmToDate(TransDate _toDate = toDate)
    {
        toDate = _toDate;
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container packedClass)
    {
        int version = Runbase::getVersion(packedClass);
        container packedProjQuery;

        switch (version)
        {
            case #currentVersion:
                [version, #Attributes, packedProjQuery] = packedClass;
                if (packedProjQuery != conNull())
                {
                    projectQuery = new Query(packedProjQuery);
                }
                return true;

            default:
                return false;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>