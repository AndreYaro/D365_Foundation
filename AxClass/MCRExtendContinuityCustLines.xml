<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>MCRExtendContinuityCustLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>MCRExtendContinuityCustLines</c> creates
/// new <c>MCRContinuityCustLines</c> records when the related
/// <c>MCRContinuityScheduleLines</c> records <c>NumTimesToRepeat</c> field
/// is set.
/// </summary>
class MCRExtendContinuityCustLines extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatchJournal</Name>
				<Source><![CDATA[
    public boolean canGoBatchJournal()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRepeatingRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects all <c>ContinuityCustLines</c> records where the line needs to be repeated, and write those
    /// repeating lines.
    /// </summary>
    public void findRepeatingRecords()
    {
        MCRContinuityCustLine mcrContinuityCustLine;
        MCRContinuityCustLine mcrContinuityCustLineToRepeat;
        MCRContinuityCustLine mcrContinuityCustLineUpdateBuffer;

        MCRContinuityScheduleLine mcrContinuityScheduleLine;

        MCRContinuityCustHeader   mcrContinuityCustHeader;

        MCRLoadContinuityCustInfo mcrLoadContinuityCustInfo = new MCRLoadContinuityCustInfo();
        RecId updateRecordRecID;

        while select mcrContinuityCustLine
            join * from mcrContinuityCustHeader
                where mcrContinuityCustLine.NumTimesToRepeat > 0
                   && mcrContinuityCustHeader.InventTransId == mcrContinuityCustLine.InventTransId
                   && mcrContinuityCustHeader.Complete == false
        {
            updateRecordRecID = mcrContinuityCustLine.RecId;
            mcrContinuityCustLineToRepeat = mcrContinuityCustLine;
            mcrContinuityScheduleLine = MCRContinuityScheduleLine::findSchedIdEventId(mcrContinuityCustHeader.ScheduleId, mcrContinuityCustLine.EventId);
            mcrLoadContinuityCustInfo.LoadRepeatingRecords(mcrContinuityCustLineToRepeat, mcrContinuityScheduleLine,
                        mcrContinuityCustLineToRepeat.numTimesToRepeat);

            ttsBegin;
            select forupdate mcrContinuityCustLineUpdateBuffer where mcrContinuityCustLineUpdateBuffer.RecId == updateRecordRecID;
            mcrContinuityCustLineUpdateBuffer.NumTimesToRepeat = 0;
            if (mcrContinuityCustLineUpdateBuffer.ActionCode == MCRContinuityActionCode::End)
            {
                mcrContinuityCustLineUpdateBuffer.ActionCode = MCRContinuityActionCode::Normal;
            }

            if (mcrContinuityCustLineUpdateBuffer.validateWrite())
            {
                mcrContinuityCustLineUpdateBuffer.update();
            }
            else
            {
                throw error("@SYS104318");
            }

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.FindRepeatingRecords();
        info("@MCR12867");
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static MCRExtendContinuityCustLines construct()
    {
        return new MCRExtendContinuityCustLines();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@MCR12793";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        MCRExtendContinuityCustLines  mcrExtendContinuityCustLines;
        mcrExtendContinuityCustLines = MCRExtendContinuityCustLines::construct();

        if (mcrExtendContinuityCustLines.prompt())
        {
            mcrExtendContinuityCustLines.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>