<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostBudgetTransaction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Processes and posts fixed budget transactions based on run document parameters.
/// </summary>
[DemoDataPostBaseFactoryAttribute(DemoDataPostDocument::BudgetTransaction)]
public class DemoDataPostBudgetTransaction extends DemoDataPostBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>findBudgetTransactions</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Set findBudgetTransactions()
    {
        Query query = new Query();
        QueryBuildDataSource qbds = query.addDataSource(tableNum(BudgetTransactionHeader));

        // Static ranges
        qbds.addRange(fieldNum(BudgetTransactionHeader, InUseBy)).value(SysQuery::valueEmptyString());
        qbds.addRange(fieldNum(BudgetTransactionHeader, TransactionStatus)).value(queryValue(BudgetTransactionStatus::Draft));
        qbds.addRange(fieldNum(BudgetTransactionHeader, WorkflowStatus)).value(queryValue(BudgetTransactionWorkflowStatus::None));

        // Dynamic ranges
        str dateRange = DemoDataPostJournalHelper::buildDateRange(demoDataPostRunDocument.FromDocumentDate, demoDataPostRunDocument.ToDocumentDate);
        str idRange = DemoDataPostJournalHelper::buildIdentifierRange(
            fieldStr(BudgetTransactionHeader, TransactionNumber),
            demoDataPostRunDocument.FromDocumentId,
            demoDataPostRunDocument.ToDocumentId);

        if (dateRange)
        {
            qbds.addRange(fieldNum(BudgetTransactionHeader, Date)).value(dateRange);
        }

        if (idRange)
        {
            qbds.addRange(fieldNum(BudgetTransactionHeader, TransactionNumber)).value(idRange);
        }

        QueryRun queryRun = new QueryRun(query);
        Set budgetTransactionHeaderList = new Set(Types::String);
        BudgetTransactionHeader budgetTransactionHeader;

        while (queryRun.next())
        {
            budgetTransactionHeader = queryRun.get(tableNum(BudgetTransactionHeader));

            budgetTransactionHeaderList.add(budgetTransactionheader.TransactionNumber);
        }

        return budgetTransactionHeaderList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    public DemoDataPostDocument getDocument()
    {
        return DemoDataPostDocument::BudgetTransaction;
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    public void process()
    {
        Set budgetTransactions = this.findBudgetTransactions();

        this.initializeDocumentStatus(budgetTransactions);
        this.updateBudgetBalances(budgetTransactions);
        this.finalizeDocumentStatus(budgetTransactions);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBudgetBalances</Name>
				<Source><![CDATA[
    private void updateBudgetBalances(Set _budgetTransactions)
    {
        if (!_budgetTransactions || _budgetTransactions.elements() == 0)
        {
            return;
        }

        BudgetTransactionMultiPost budgetTransactionMultiPost = BudgetTransactionMultiPost::construct();
        SetEnumerator setEnumerator = _budgetTransactions.getEnumerator();

        while (setEnumerator.moveNext())
        {
            budgetTransactionMultiPost.addBudgetTransactionHeaderToPost(setEnumerator.current());
        }

        budgetTransactionMultiPost.runOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDocumentStatus</Name>
				<Source><![CDATA[
    private void initializeDocumentStatus(Set _budgetTransactions)
    {
        if (!_budgetTransactions || _budgetTransactions.elements() == 0)
        {
            return;
        }

        BudgetTransactionHeader budgetTransactionHeader;
        SetEnumerator setEnumerator = _budgetTransactions.getEnumerator();

        while (setEnumerator.moveNext())
        {
            budgetTransactionHeader = BudgetTransactionHeader::findByTransactionNumber(setEnumerator.current(), Ledger::current());

            if (budgetTransactionHeader)
            {
                DemoDataPostRunDocumentStatus::addDocumentForProcessing(
                    runId,
                    demoDataPostRunDocument.RecId,
                    budgetTransactionHeader.RecId,
                    budgetTransactionHeader.TableId,
                    budgetTransactionHeader.TransactionNumber);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>finalizeDocumentStatus</Name>
				<Source><![CDATA[
    private void finalizeDocumentStatus(Set _budgetTransactions)
    {
        if (!_budgetTransactions || _budgetTransactions.elements() == 0)
        {
            return;
        }

        SetEnumerator setEnumerator = _budgetTransactions.getEnumerator();

        ttsbegin;

        BudgetTransactionHeader budgetTransactionHeader;
        DemoDataPostRunDocumentStatus runDocumentStatus;

        while (setEnumerator.moveNext())
        {
            budgetTransactionHeader = BudgetTransactionHeader::findByTransactionNumber(setEnumerator.current(), Ledger::current());

            runDocumentStatus = DemoDataPostRunDocumentStatus::find(
                runId,
                demoDataPostRunDocument.RecId,
                budgetTransactionHeader.RecId,
                budgetTransactionHeader.TableId,
                true);

            if (runDocumentStatus)
            {
                if (budgetTransactionHeader && budgetTransactionHeader.TransactionStatus == BudgetTransactionStatus::Completed)
                {
                    runDocumentStatus.DocumentStatus = DemoDataPostDocumentStatus::Success;
                }
                else
                {
                    runDocumentStatus.DocumentStatus = DemoDataPostDocumentStatus::Failed;
                }

                runDocumentStatus.CompletionTime = DateTimeUtil::getSystemDateTime();
                runDocumentStatus.update();
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>