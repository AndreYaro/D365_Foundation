<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CostEventDatabaseUpdateManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>CostEventDatabaseUpdateManager</c> class inserts events and entries into the database.
/// </summary>
public class CostEventDatabaseUpdateManager
{
    Map             companyMap;
    boolean         subscribing;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the events for the current company.
    /// </summary>
    /// <returns>
    /// The events for the current company.
    /// </returns>
    private Set getEvents()
    {
        Set             events;
        DataAreaId      dataAreaId = curext();

        if (!companyMap)
        {
            companyMap = new Map(Types::String, Types::Class);
        }

        if (companyMap.exists(dataAreaId))
        {
            events = companyMap.lookup(dataAreaId);
        }
        else
        {
            events = new Set(Types::Class);
            companyMap.insert(dataAreaId, events);
        }

        return events;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEntries</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts event entries for the events in the event list into the database.
    /// </summary>
    /// <param name="_events">
    /// The event list.
    /// </param>
    private void insertEntries(Set _events)
    {
        CostEntryTable                      costEntryTable;

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(CostEntryTable));

        CostEventBaseEnumerator eventEnumerator = CostEventBaseEnumerator::construct(_events.getEnumerator());
        while (eventEnumerator.moveNext())
        {
            CostEntryEnumerator entryEnumerator = eventEnumerator.current().getEntries();
            while (entryEnumerator.moveNext())
            {
                CostEntry entry = entryEnumerator.current();

                costEntryTable.clear();
                this.mapEntryEventAssociation(costEntryTable, entry.parmEvent());
                this.mapEntryDescriptorAssociation(costEntryTable, entry.parmDescriptor());
                this.mapEntryAccountingDate(costEntryTable, entry.parmEvent().parmParentEvent());
                costEntryTable.Magnitude = entry.parmMagnitude();

                costEntryTable.PostingType = entry.parmPostingType();
                costEntryTable.LedgerDimension = entry.parmLedgerDimension();
                costEntryTable.OffsetPostingType = entry.parmOffsetPostingType();
                costEntryTable.OffsetLedgerDimension = entry.parmOffsetLedgerDimension();

                recordInsertList.add(costEntryTable);
            }
        }
        recordInsertList.insertDatabase();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertEvents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the events in the event list into the database.
    /// </summary>
    /// <param name="_events">
    /// The event list.
    /// </param>
    private void insertEvents(Set _events)
    {
        CostEventTable              costEventTable;
        systemSequence              systemSequence = new systemSequence();

        RecordInsertList recordInsertList = new RecordInsertList(tableNum(CostEventTable));

        appl.sysRecIdSequence().suspendRecIds(tableNum(CostEventTable));
        CostEventBaseEnumerator enumerator = CostEventBaseEnumerator::construct(_events.getEnumerator());
        while (enumerator.moveNext())
        {
            CostEvent costEvent = enumerator.current();
            if (costEvent.getEntries().moveNext())
            {
                costEventTable.clear();
                costEvent.parmId(systemSequence.reserveValues(1, tableNum(CostEventTable)));
                costEventTable.RecId = costEvent.parmId();
                costEventTable.CostEventRole = costEvent.parmRole();
                costEventTable.IsPosted = costEvent.parmIsPosted();

                CostInventoryEvent inventoryEvent = costEvent.parmParentEvent();
                if (inventoryEvent)
                {
                    costEventTable.InventTransOrigin    = inventoryEvent.parmInventTransOriginId();
                    costEventTable.TransDate            = inventoryEvent.parmTransDate();
                    costEventTable.Voucher              = inventoryEvent.parmVoucher();
                    costEventTable.OperatingEventType   = inventoryEvent.parmEventType();
                }
                recordInsertList.add(costEventTable);
            }
        }
        recordInsertList.insertDatabase();
        appl.sysRecIdSequence().removeRecIdSuspension(tableNum(CostEventTable));
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntryAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the <c>AccountingDate</c> in the <c>CostEntryTable</c> buffer to the accounting on a <c>CostInventoryEvent</c> object.
    /// </summary>
    /// <param name="_costEntryTable">
    /// The <c>CostEntryTable</c> buffer.
    /// </param>
    /// <param name="_event">
    /// The associated <c>CostEvent</c> object.
    /// </param>
    protected void mapEntryAccountingDate(CostEntryTable _costEntryTable, CostInventoryEvent _event)
    {
        _costEntryTable.AccountingDate = _event.parmTransDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntryCostObjectAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps an <c>CostObject</c> association to foreign keys in a <c>CostEntryTable</c> buffer.
    /// </summary>
    /// <param name="_costEntryTable">
    /// The <c>CostEntryTable</c> buffer.
    /// </param>
    /// <param name="_costObject">
    /// The associated <c>CostObject</c> object.
    /// </param>
    protected void mapEntryCostObjectAssociation(CostEntryTable _costEntryTable, CostObject _costObject)
    {
        switch (classIdGet(_costObject))
        {
            case classNum(CostInventoryCostObject):
                CostInventoryCostObject inventoryCostObject = _costObject;
                _costEntryTable.ItemId = inventoryCostObject.parmItemId();
                _costEntryTable.InventDimId = inventoryCostObject.parmInventDimId();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntryDescriptorAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps an <c>CostEntryDescriptorBase</c> association to foreign keys in a <c>CostEntryTable</c> buffer.
    /// </summary>
    /// <param name="_costEntryTable">
    /// The <c>CostEntryTable</c> buffer.
    /// </param>
    /// <param name="_descriptor">
    /// The associated <c>CostEntryDescriptorBase</c> object.
    /// </param>
    protected void mapEntryDescriptorAssociation(CostEntryTable _costEntryTable, CostEntryDescriptorBase _descriptor)
    {
        this.mapEntryReconciledEventAssociation(_costEntryTable, _descriptor.parmReconciledEvent());

        switch (classIdGet(_descriptor))
        {
            case classNum(CostProductCostQuantityDescriptor):
                CostProductCostQuantityDescriptor productCostQuantityDescriptor = _descriptor;
                _costEntryTable.Measure = productCostQuantityDescriptor.parmMeasure();
                this.mapEntryCostObjectAssociation(_costEntryTable, productCostQuantityDescriptor.parmCostObject());
                break;
            case classNum(CostProductCostDescriptor):
                CostProductCostDescriptor productCostDescriptor = _descriptor;
                _costEntryTable.Measure = productCostDescriptor.parmMeasure();
                _costEntryTable.CostGroupId = productCostDescriptor.parmCostGroupId();
                this.mapEntrySourceAssociation(_costEntryTable, productCostDescriptor.parmSource());
                this.mapEntryCostObjectAssociation(_costEntryTable, productCostDescriptor.parmCostObject());
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntryEventAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps an <c>CostEvent</c> association to foreign keys in a <c>CostEntryTable</c> buffer.
    /// </summary>
    /// <param name="_costEntryTable">
    /// The <c>CostEntryTable</c> buffer.
    /// </param>
    /// <param name="_event">
    /// The associated <c>CostEvent</c> object.
    /// </param>
    protected void mapEntryEventAssociation(CostEntryTable _costEntryTable, CostEvent _event)
    {
        _costEntryTable.CostEvent = _event.parmId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntryReconciledEventAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps an reconciled <c>CostEvent</c> association to foreign keys in a <c>CostEntryTable</c> buffer.
    /// </summary>
    /// <param name="_costEntryTable">
    /// The <c>CostEntryTable</c> buffer.
    /// </param>
    /// <param name="_reconciledEvent">
    /// The associated reconciled <c>CostEvent</c> object.
    /// </param>
    protected void mapEntryReconciledEventAssociation(CostEntryTable _costEntryTable, CostEvent _reconciledEvent)
    {
        if (_reconciledEvent)
        {
            _costEntryTable.ReconciledEvent = _reconciledEvent.parmId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mapEntrySourceAssociation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps an <c>CostEntrySource</c> association to foreign keys in a <c>CostEntryTable</c> buffer.
    /// </summary>
    /// <param name="_costEntryTable">
    /// The <c>CostEntryTable</c> buffer.
    /// </param>
    /// <param name="_source">
    /// The associated <c>CostEntrySource</c> object.
    /// </param>
    protected void mapEntrySourceAssociation(CostEntryTable _costEntryTable, CostEntrySource _source)
    {
        RefTableId  sourceRelationType = _source.parmSourceRelationType();

        if (sourceRelationType)
        {
            _costEntryTable.SourceRelationType = sourceRelationType;

            switch (sourceRelationType)
            {
                case tableNum(MarkupTrans):
                    _costEntryTable.SourceMarkupTrans = _source.parmSourceRecId();
                    break;

                default:
                    throw error(Error::wrongUseOfFunction(funcName()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the state of the object.
    /// </summary>
    private void reset()
    {
        companyMap = null;
        this.unsubscribe();
    }

]]></Source>
			</Method>
			<Method>
				<Name>subscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Subscribes to the TtsNotifyAbort and TtsNotifyPreCommit events.
    /// </summary>
    private void subscribe()
    {
        if (!subscribing)
        {
            appl.onTtsNotifyAbort += eventhandler(this.ttsNotifyAbort);
            appl.onTtsNotifyPreCommit += eventhandler(this.ttsNotifyPreCommit);

            subscribing = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyAbort</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the ttsNotifyAbort event.
    /// </summary>
    public void ttsNotifyAbort()
    {
        this.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ttsNotifyPreCommit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the ttsNotifyPreCommit event.
    /// </summary>
    /// <exception cref="Exception::Error">
    /// Unexpected tts level.
    /// </exception>
    public void ttsNotifyPreCommit()
    {
        if (appl.ttsLevel() != 1)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.commitAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitAll</Name>
				<Source><![CDATA[
    private void commitAll()
    {
        if (companyMap)
        {
            MapEnumerator enumerator = companyMap.getEnumerator();
            while (enumerator.moveNext())
            {
                DataAreaId dataAreaId = enumerator.currentKey();
                if (dataAreaId == curext())
                {
                    this.insertEvents(enumerator.currentValue());
                    this.insertEntries(enumerator.currentValue());
                }
                else
                {
                    changecompany(dataAreaId)
                    {
                        this.insertEvents(enumerator.currentValue());
                        this.insertEntries(enumerator.currentValue());
                    }
                }
            }
        }

        this.reset();
    }

]]></Source>
			</Method>
			<Method>
				<Name>unsubscribe</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unsubscribes from tts events.
    /// </summary>
    private void unsubscribe()
    {
        if (subscribing)
        {
            appl.onTtsNotifyAbort -= eventhandler(this.ttsNotifyAbort);
            appl.onTtsNotifyPreCommit -= eventhandler(this.ttsNotifyPreCommit);

            subscribing = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>add</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds an event to the update manager.
    /// </summary>
    /// <param name="_event">
    /// The event to add.
    /// </param>
    public static void add(CostEvent _event)
    {
        CostEventDatabaseUpdateManager updateManager = CostEventDatabaseUpdateManager::newFromCache();

        updateManager.getEvents().add(_event);
        updateManager.subscribe();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static CostEventDatabaseUpdateManager construct()
    {
        return new CostEventDatabaseUpdateManager();
    }

]]></Source>
			</Method>
			<Method>
				<Name>commitCurrentRecords</Name>
				<Source><![CDATA[
    public static void commitCurrentRecords()
    {
        CostEventDatabaseUpdateManager updateManager = CostEventDatabaseUpdateManager::newFromCache();
        
        updateManager.commitAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromCache</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns an instance of the <c>CostEventDatabaseUpdateManager</c> class for the transaction scope.
    /// </summary>
    /// <returns>
    /// An instance of the <c>CostEventDatabaseUpdateManager</c> class for the transaction scope.
    /// </returns>
    private static CostEventDatabaseUpdateManager newFromCache()
    {
        CostEventDatabaseUpdateManager  updateManager;

        updateManager = SysTransactionScopeCache::get(classStr(CostEventDatabaseUpdateManager), '', updateManager);

        if (!updateManager)
        {
            updateManager = CostEventDatabaseUpdateManager::construct();

            SysTransactionScopeCache::set(classStr(CostEventDatabaseUpdateManager), '', updateManager);
        }

        return updateManager;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>