<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqPeggingTreeFormControlHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqPeggingTreeFormControlHelper</c> class provides the default handling of the
///    <c>FormTreeControl</c> class that wraps up the internal handling of the <c>ReqPeggingTree</c> class.
/// </summary>
class ReqPeggingTreeFormControlHelper
{
    FormTreeControl formTreeControl;
    ReqPeggingTree  reqPeggingTree;

    Map             mapNode2FormNode;       // Node ID -> FormTreeControl node
    Map             mapFormNode2Node;       // FormTreeControl node -> Node ID
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the maps for tracking the Node to Form Tree Node maping.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void init()
    {
        mapNode2FormNode = new Map(Types::Integer,Types::Integer);
        mapFormNode2Node = new Map(Types::Integer,Types::Integer);

        reqPeggingTree.NodeAdded += eventhandler(this.onNodeAdded);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>onFormTreeNodeExpanding</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for node expansion event in the <c>FormTreeControl</c>.
    /// </summary>
    /// <param name="_idx">
    /// The node index.
    /// </param>
    /// <param name="_action">
    /// The expansion action.
    /// </param>
    /// <param name="_data">
    /// The node data.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void onFormTreeNodeExpanding(int _idx, FormTreeExpand _action, anytype _data)
    {
        ReqPeggingTreeNode  node = _data;
        int                 nodeId = node.parmNodeId();
        FormTreeItem        treeItem;

        if (_action == FormTreeExpand::Expand)
        {
            reqPeggingTree.expandNode(nodeId);

            // in case the node has no children, we need to get rid of the
            // little + in front of it, so it can't be expanded further
            if (!reqPeggingTree.nodeHasChildren(nodeId))
            {
                treeItem = formTreeControl.getItem(_idx);
                treeItem.children(0);
                formTreeControl.setItem(treeItem);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onNodeAdded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event handler for insertion of pegging tree nodes.
    /// </summary>
    /// <param name="_parentId">
    /// The identificator of the parent node.
    /// </param>
    /// <param name="_node">
    /// The node that was added.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void onNodeAdded(int _parentId, ReqPeggingTreeNode _node)
    {
        FormTreeItem    formTreeItem;
        int             formTreeParentNode;
        int             treeItemIdx;
        int             nodeId = _node.parmNodeId();

        formTreeItem       = new FormTreeItem(_node.description());
        formTreeItem.data(_node);

        // artificially mark the node has children so it is possible
        // to expand nodes without children
        formTreeItem.children(1);

        if (mapNode2FormNode.exists(_parentId))
        {
            formTreeParentNode = mapNode2FormNode.lookup(_parentId);
        }

        treeItemIdx        = formTreeControl.addItem(formTreeParentNode, 0, formTreeItem);

        mapNode2FormNode.insert(nodeId, treeItemIdx);
        mapFormNode2Node.insert(treeItemIdx, nodeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormTreeControl</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormTreeControl parmFormTreeControl(FormTreeControl _formTreeControl = formTreeControl)
    {
        formTreeControl = _formTreeControl;

        return formTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqPeggingTree</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReqPeggingTree parmReqPeggingTree(ReqPeggingTree _reqPeggingTree = reqPeggingTree)
    {
        reqPeggingTree = _reqPeggingTree;

        return reqPeggingTree;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFirstLevelNodes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ReqPeggingTreeFormHelper</c> instance.
    /// </summary>
    /// <param name="_formTreeControl">
    /// The tree control used for rendering the pegging tree.
    /// </param>
    /// <param name="_firstLevelNodes">
    /// The list that contains the first level nodes of the tree.
    /// </param>
    /// <returns>
    /// A <c>ReqPeggingTreeFormControlHelper</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqPeggingTreeFormControlHelper newFirstLevelNodes(FormTreeControl _formTreeControl, List _firstLevelNodes)
    {
        ReqPeggingTreeFormControlHelper result         = new ReqPeggingTreeFormControlHelper();
        ReqPeggingTree                  reqPeggingTree = ReqPeggingTree::newFirstLevelNodes(_firstLevelNodes);

        result.parmReqPeggingTree(reqPeggingTree);
        result.parmFormTreeControl(_formTreeControl);
        result.init();

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ReqPeggingTreeFormHelper</c> instance.
    /// </summary>
    /// <param name="_formTreeControl">
    /// The tree control used for rendering the pegging tree.
    /// </param>
    /// <param name="_reqPeggingTree">
    /// The pegging tree data source.
    /// </param>
    /// <returns>
    /// A <c>ReqPeggingTreeFormControlHelper</c> instance.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static ReqPeggingTreeFormControlHelper newStandard(FormTreeControl _formTreeControl, ReqPeggingTree _reqPeggingTree)
    {
        ReqPeggingTreeFormControlHelper result = new ReqPeggingTreeFormControlHelper();

        result.parmReqPeggingTree(_reqPeggingTree);
        result.parmFormTreeControl(_formTreeControl);

        result.init();

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>