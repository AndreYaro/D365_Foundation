<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CatAttributeProductCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CatAttributeProductCollection
{
    #define.TableStartTag('<table  border = 0 >')
    #define.TableEndTag('</table>')
    #define.TableRowTag('<tr>')
    #define.TableRowTagEnd('</tr>')
    #define.TableCellTag('<td>')
    #define.TableCellTagEnd('</td>')
    #define.Colon("&nbsp;:&nbsp;")
    #define.Space("&nbsp;&nbsp;&nbsp;&nbsp;")
    #define.SmallSpace("&nbsp;&nbsp;")
    #define.AttributeCountToBeDisplay("10")
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAttribute</Name>
				<Source><![CDATA[
        static str getAttribute(int64 _productID)
    {
        EcoResProduct               m_ecoResProduct;
        EcoResProductInstanceValue  m_ecoResProductInstanceValue;
        EcoResAttributeValue        m_ecoResAttributeValue;
        EcoResAttribute             m_ecoResAttribute;
        EcoResTextValue             m_ecoResTextValue;
        EcoResIntValue              m_ecoResIntValue;
        EcoResFloatValue            m_ecoResFloatValue;

        boolean isPriceDisplayed = false;
        int     colCount         = 0;
        str     displayText;

        displayText = #TableRowTag;
        //Select attribute name and value
        while select RecId, TextValue from m_ecoResTextValue
            join Attribute, Value from  m_ecoResAttributeValue
                where m_ecoResTextValue.RecId == m_ecoResAttributeValue.Value
            join RecId, Name from m_ecoResAttribute
                where m_ecoResAttribute.RecId == m_ecoResAttributeValue.Attribute
            join Product, RecId from m_ecoResProductInstanceValue
                where m_ecoResAttributeValue.InstanceValue == m_ecoResProductInstanceValue.RecId
            join RecId from m_ecoResProduct
                where m_ecoResProductInstanceValue.Product == m_ecoResProduct.RecId
                    && m_ecoResProduct.RecId == _productID
        {
            colCount++;
            //Get attribute int value and string value and form result string
            //m_ecoResIntValue  = (m_ecoResValue as EcoResIntValue);
            //m_ecoResTextValue = (m_ecoResValue as EcoResTextValue);
            //This section of the if loop will get the values for the attributes which are text value.
            //Ex: Attribute say Brand can have value say Microsoft
            //The value returned will look -> Brand : Microsoft
            if ( m_ecoResTextValue.RecId )
            {
                displayText += #TableCellTag + m_ecoResAttribute.Name + #Colon;
                displayText += m_ecoResTextValue.TextValue + #TableCellTagEnd;
                displayText += #TableCellTag + #Space + #TableCellTagEnd;
            }
            //This section of the if loop will get the values for the attributes which are int value.
            //Ex: Attribute say Hard Disc Size can have value say 10GB
            //The value returned will look -> Hard Disc Size : 10GB
            //Make four key:values per row
            if ( colCount == 4 )
            {
                displayText += #TableRowTagEnd+#TableRowTag;
                colCount     = 0;
            }
        }

        while select RecId, IntValue from m_ecoResIntValue
            join Attribute, Value from  m_ecoResAttributeValue
                where m_ecoResIntValue.RecId == m_ecoResAttributeValue.Value
            join RecId, Name from m_ecoResAttribute
                where m_ecoResAttribute.RecId == m_ecoResAttributeValue.Attribute
            join Product, RecId from m_ecoResProductInstanceValue
                where m_ecoResAttributeValue.InstanceValue == m_ecoResProductInstanceValue.RecId
            join RecId from m_ecoResProduct
                where m_ecoResProductInstanceValue.Product == m_ecoResProduct.RecId
                    && m_ecoResProduct.RecId == _productID
        {
            colCount++;
            if ( m_ecoResIntValue.RecId )
            {
                displayText += #TableCellTag + m_ecoResAttribute.Name + #Colon;
                displayText += int2str(m_ecoResIntValue.IntValue) + #TableCellTagEnd;
                displayText += #TableCellTag + #Space + #TableCellTagEnd;
            }
            //Make four key:values per row
            if ( colCount == 4 )
            {
                displayText += #TableRowTagEnd+#TableRowTag;
                colCount     = 0;
            }
        }

        while select RecId, FloatValue from m_ecoResFloatValue
            join Attribute, Value from  m_ecoResAttributeValue
                where m_ecoResFloatValue.RecId == m_ecoResAttributeValue.Value
            join RecId, Name from m_ecoResAttribute
                where m_ecoResAttribute.RecId == m_ecoResAttributeValue.Attribute
            join Product, RecId from m_ecoResProductInstanceValue
                where m_ecoResAttributeValue.InstanceValue == m_ecoResProductInstanceValue.RecId
            join RecId from m_ecoResProduct
                where m_ecoResProductInstanceValue.Product == m_ecoResProduct.RecId
                    && m_ecoResProduct.RecId == _productID
        {
            colCount++;
            if ( m_ecoResFloatValue.RecId )
            {
                displayText += #TableCellTag + m_ecoResAttribute.Name + #Colon;
                displayText += strfmt('%1',m_ecoResFloatValue.FloatValue) + #TableCellTagEnd;
                displayText += #TableCellTag + #Space + #TableCellTagEnd;
            }
            //Make four key:values per row
            if ( colCount == 4 )
            {
                displayText += #TableRowTagEnd+#TableRowTag;
                colCount     = 0;
            }
        }
        displayText += #TableRowTagEnd;
        return displayText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAttributeList</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Provides all the attributes and their values for the product.
    /// </summary>
    /// <param name="_productID">
    ///    An instance of the <c>RecId</c> class that represents the product ID.
    /// </param>
    /// <returns>
    ///    A string value that represents the list of attributes.
    /// </returns>
    static str getAttributeList(RecId _productID)
    {
        EcoResProduct               ecoResProduct;
        EcoResProductInstanceValue  ecoResProductInstanceValue;
        EcoResAttributeValue        ecoResAttributeValue;
        EcoResAttribute             ecoResAttribute;
        EcoResAttributeTranslation  ecoResAttributeTranslationPrimaryLang;
        EcoResValue                 ecoResValue;
        int                         recordCount = 0;
        str                         displayText = '';
        str                         attributeName = '';
        str                         attributeValue = '';

        //Select attribute name and value
        while select Attribute, Value from ecoResAttributeValue
            order by ecoResAttribute.Name
            join * from ecoResValue
                where ecoResValue.RecId == ecoResAttributeValue.Value
            join RecId, Name from ecoResAttribute
                where ecoResAttribute.RecId == ecoResAttributeValue.Attribute
            join Product, RecId from ecoResProductInstanceValue
                where ecoResAttributeValue.InstanceValue == ecoResProductInstanceValue.RecId
            join RecId from ecoResProduct
                where ecoResProductInstanceValue.Product == ecoResProduct.RecId
                    && ecoResProduct.RecId == _productID
            outer join FriendlyName from ecoResAttributeTranslationPrimaryLang
                where ecoResAttributeTranslationPrimaryLang.Attribute == ecoResAttribute.RecId
                    && ecoResAttributeTranslationPrimaryLang.Language == SysTranslationHelper::getPrimaryLanguage()
        {
            recordCount++;
            if (recordCount > str2int(#AttributeCountToBeDisplay))
            {
                break;
            }
            displayText += #TableRowTag;
            if (ecoResAttributeTranslationPrimaryLang)
            {
                attributeName = ecoResAttributeTranslationPrimaryLang.FriendlyName;
            }
            else
            {
                attributeName = ecoResAttribute.Name;
            }

            //Get attribute int value and string value and form result string
            if (ecoResAttributeValue)
            {
                attributeValue = ecoResValue.value();
                if (attributeValue == '')
                {
                    attributeValue = "@SYS136772";
                }
                displayText += strfmt('%1%2%3',#TableCellTag, attributeName, #TableCellTagEnd);
                displayText += strfmt('%1%2%3',#TableCellTag, attributeValue, #TableCellTagEnd);
            }
            displayText += #TableRowTagEnd;
        }

        return displayText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPricingSetupDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the pricing setup details for the items in the inventory.
    /// </summary>
    /// <param name="_inventTable">
    /// An instance of the <c>InventTable</c> class that represents the item ID.
    /// </param>
    /// <returns>
    /// A String that contains the HTML text of the pricing details that are displayed in shopping site.
    /// </returns>
    static str getPricingSetupDetails(InventTable _inventTable)
    {
        InventItemPurchSetup        inventItemPurchSetup;
        InventTable                 inventTableForDefaultQty;

        str     multiQuantity    ;
        str     minimumQuantity  ;
        str     maximumQuantity  ;
        str     standardQuantity ;
        str     displayText;

        // handle zero->any
        str quantityToString(Qty _quantity)
        {
            return ((_quantity==0) ? "@SYS114514" : strfmt('%1', _quantity));
        }

        displayText += #TableStartTag;

        if (_inventTable)
        {
            changeCompany(
                          _inventTable.company()
                          )
            {
                //Select attribute name and value
                //Get invent table for given itemid
                inventTableForDefaultQty = InventTable::find(_inventTable.ItemId);

                inventItemPurchSetup = inventTableForDefaultQty.inventItemPurchSetup();

                //Return highest quantity if found
                if (inventItemPurchSetup && inventItemPurchSetup.Stopped == false)
                {
                    multiQuantity    = quantityToString(inventItemPurchSetup.MultipleQty);
                    minimumQuantity  = quantityToString(inventItemPurchSetup.LowestQty  );
                    maximumQuantity  = quantityToString(inventItemPurchSetup.HighestQty );
                    standardQuantity = quantityToString(inventItemPurchSetup.StandardQty);

                    displayText += #TableRowTag;
                    displayText += #TableCellTag + "@SYS101266" + #TableCellTagEnd;
                    displayText += #TableCellTag + #Colon + multiQuantity + #TableCellTagEnd;
                    displayText += #TableRowTagEnd;

                    displayText += #TableRowTag;
                    displayText += #TableCellTag + "@SYS21995" +  #TableCellTagEnd;
                    displayText += #TableCellTag + #Colon + minimumQuantity + #TableCellTagEnd;
                    displayText += #TableRowTagEnd;

                    displayText += #TableCellTag + "@SYS22438" +  #TableCellTagEnd;
                    displayText += #TableCellTag + #Colon + maximumQuantity + #TableCellTagEnd;
                    displayText += #TableRowTagEnd;

                    displayText += #TableRowTag;
                    displayText += #TableCellTag + "@SYS19608" +  #TableCellTagEnd;
                    displayText += #TableCellTag + #Colon + standardQuantity + #TableCellTagEnd;
                    displayText += #TableRowTagEnd;

                    displayText += #TableRowTag;
                    displayText += #TableCellTag + "@SYS110981" + #TableCellTagEnd;
                    displayText += #TableCellTag + #Colon + strfmt('%1',  inventItemPurchSetup.LeadTime) + #SmallSpace + "@SYS101544" + #TableCellTagEnd;
                    displayText += #TableRowTagEnd;

                    displayText += #TableRowTag;
                    displayText += #TableCellTag + "@SYS22997" +  #TableCellTagEnd;
                    displayText += #TableCellTag + #Colon + _inventTable.inventTableModulePurch().UnitId + #TableCellTagEnd;
                    displayText += #TableRowTagEnd;
                }
            }
        }
        displayText += #TableEndTag;

        return displayText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryVendorName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the primary vendor name for the items in the inventory.
    /// </summary>
    /// <param name="_inventTable">
    ///    An instance of the <c>InventTable</c> class that represents the inventory.
    /// </param>
    /// <param name="_dataAreaId">
    ///    An instance of the <c>dataAreaId</c> class that represents the vendor data area ID.
    /// </param>
    /// <returns>
    ///    A string that contains the primary vendor name.
    /// </returns>
    public static str getPrimaryVendorName(InventTable _inventTable, dataAreaId _dataAreaId)
    {
        VendTable         vendTable;
        DirPartyTable     dirPartyTable;

        select firstonly crosscompany RecId from vendTable
            where vendTable.DataAreaId     == _dataAreaId
                && vendTable.AccountNum    == _inventTable.PrimaryVendorId
        join Name from dirPartyTable
            where dirPartyTable.RecId      == vendTable.Party;

        return dirPartyTable.Name;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>