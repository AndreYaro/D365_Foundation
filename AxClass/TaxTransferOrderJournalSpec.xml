<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxTransferOrderJournalSpec</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxTransferOrderJournalSpec</c> is used by invoice reports to hold and return several variables.
/// This class is derived from the <c>TaxSpec</c> class.
/// </summary>
public class TaxTransferOrderJournalSpec extends TaxSpec
{
    protected TableId sourceTableId;
    protected RecId sourceRecId;
    protected TaxTrans taxTrans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(TableId _sourceTableId, RecId _sourceRecId)
    {
        sourceTableId = _sourceTableId;
        sourceRecId = _sourceRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the information from tax trans to the table <c>TaxSpecTmp</c> and object <c>TaxSpec</c>.
    /// </summary>
    /// <param name = "_canGroupOnTaxDirection">
    /// The flag of group by tax direction.
    /// </param>
    /// <returns>
    /// true, if <c>TaxSpecTmp</c> exists; otherwise, false.
    /// </returns>
    public boolean parmTaxSpec(boolean _canGroupOnTaxDirection = true)
    {
        if (released == NoYes::No)
        {
            taxSpecTmp.setTmp();

            if (sourceRecId)
            {
                Query query = this.query();
                QueryRun queryRun = new QueryRun(query);

                while (queryRun.next())
                {
                    taxTrans = queryRun.get(tableNum(TaxTrans));
                    taxSpecTmp.clear();
                    taxSpecTmp.TaxCode = taxTrans.TaxCode;
                    taxSpecTmp.TaxDirection = taxTrans.TaxDirection;
                    taxSpecTmp.ExemptCode = taxTrans.ExemptCode;
                    taxSpecTmp.ExemptTax = taxTrans.ExemptTax;
                    taxSpecTmp.ReverseCharge_W = taxTrans.ReverseCharge_W;
                    taxSpecTmp.TransTableId = taxTrans.SourceTableId;
                    taxSpecTmp.TransRecId = taxTrans.SourceRecId;
                    taxSpecTmp.PrintCode = this.getTaxWriteCode();
                    taxSpecTmp.SourceBaseAmountCur = taxTrans.SourceBaseAmountCur;
                    taxSpecTmp.SourceRegulateAmountCur = taxTrans.SourceRegulateAmountCur;
                    taxSpecTmp.SourceCurrencyCode = taxTrans.SourceCurrencyCode;
                    taxSpecTmp.insert();
                }
            }
        }
        else
        {
            if (taxSpecTmp)
            {
                next taxSpecTmp;
            }
        }

        released = NoYes::Yes;

        if (taxSpecTmp)
        {
            taxWriteCode = taxSpecTmp.PrintCode;
            taxCode = taxSpecTmp.TaxCode;
            taxExemptTax = taxSpecTmp.ExemptTax;
            taxAmountCur = taxSpecTmp.SourceRegulateAmountCur;
            taxBaseAmountCur = taxSpecTmp.SourceBaseAmountCur;
            currencyCode = taxSpecTmp.SourceCurrencyCode;
            reverseCharge = taxSpecTmp.ReverseCharge_W;
            taxDirection = taxSpecTmp.TaxDirection;
            taxExemptDescription = this.getTaxExemptDecription();
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxWriteCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets <c>TaxWriteCode</c> value.
    /// </summary>
    /// <returns>
    /// The <c>TaxWriteCode</c> value.
    /// </returns>
    protected TaxWriteCode getTaxWriteCode()
    {
        TaxWriteCode result;

        if (taxTrans.TaxPrintDetail != TaxPrintDetail::NoDetail)
        {
            switch (taxTrans.TaxPrintDetail)
            {
                case TaxPrintDetail::TaxCode:
                    TaxWriteSelection taxWriteSelection = TaxTable::find(taxTrans.TaxCode).TaxWriteSelection;
                    if (taxWriteSelection == TaxWriteSelection::PrintCode)
                    {
                        if (taxTrans.PrintCode)
                        {
                            result = taxTrans.PrintCode;
                        }
                        else if (taxTrans.ExemptCode)
                        {
                            result = taxTrans.ExemptCode;
                        }
                        else
                        {
                            result = taxTrans.TaxCode;
                        }
                    }
                    if (taxWriteSelection == TaxWriteSelection::TaxRate)
                    {
                        SysDictType dictType = new SysDictType(extendedTypeNum(TaxValue));
                        result = num2Str(taxTrans.TaxValue, -1, dictType.noOfDecimals(), -1, -1);
                    }
                    break;
                case TaxPrintDetail::TaxGroup:
                    result = taxTrans.TaxGroup;
                    break;
            }
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxExemptDecription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax exempt description for tax code.
    /// </summary>
    /// <returns>
    /// Tax exempt description.
    /// </returns>
    protected LanguageTxtText getTaxExemptDecription()
    {
        LanguageTxtText result;

        if (taxSpecTmp.ExemptTax && taxSpecTmp.ExemptCode)
        {
            result = TaxExemptCodeTable::txt(taxSpecTmp.ExemptCode, languageId);
        }

        if (!result)
        {
            TaxTable taxTable = TaxTable::find(taxSpecTmp.TaxCode);
            result = LanguageTxt::find(tableNum(TaxTable), taxTable.RecId, languageId).Txt;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds query for <c>TaxTrans</c>.
    /// </summary>
    /// <returns>
    /// The query for <c>TaxTrans</c>.
    /// </returns>
    public Query query()
    {
        Query  query = new Query();
        QueryBuildDataSource qbds;
        qbds = query.addDataSource(tablenum(TaxTrans));

        qbds.addRange(FieldNum(TaxTrans, SourceTableId)).value(queryValue(sourceTableId));
        qbds.addRange(FieldNum(TaxTrans, SourceRecId)).value(queryValue(sourceRecId));

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>