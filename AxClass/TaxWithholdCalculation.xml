<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdCalculation</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>TaxWithholdCalculation</c> is used to calculate global Withholding tax.
/// </summary>
internal abstract class TaxWithholdCalculation
{
    protected RefTableId headingTableId;
    protected RefRecId headingRecId;
    protected TransDate invoiceDate;
    protected TaxWithholdUncommitted taxWithholdUncommitted;

    protected TaxWithholdCalcTmp taxWithholdCalcTmpSum;
    protected TaxWithholdCalcTmp taxWithholdCalcTmp;
    protected TaxWithholdCalcTmp taxWithholdCalcTmpMarkup;
    protected RecordInsertList taxWithholdCalcTmpList;
    protected RecordInsertList taxWithholdCalcTmpMarkupList;

    protected AmountCur totalTaxWithholdAmount;
    protected AmountCur totalInvoiceAmount; // Determine the total amount of all the invoice lines that will be used to dermine WHT tax.

    protected DiscPct endDiscPercent;
    protected CurrencyCode sourceCurrencyCode;
    protected boolean isEnabledWHTCurrencyExchRateFeature;
    protected LedgerParameters ledgerParameters;
    protected Tax tax;
    protected boolean doGenerateWHTUncommitted;
    protected boolean inclTax;

    #ISOCountryRegionCodes
    protected boolean isJPCountryRegion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init(Object _initializationClass)
    {
        ledgerParameters = LedgerParameters::find();
        isJPCountryRegion = SysCountryRegionCode::isLegalEntityInCountryRegion([#ISOJP]);

        isEnabledWHTCurrencyExchRateFeature = TaxWithholdSetupWithholdingTaxCurrencyExchRateHelper::isEnabledWHTCurrencyExchRateParam();

        this.initTmpTaxWithholdCalc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpTaxWithholdCalc</Name>
				<Source><![CDATA[
    private void initTmpTaxWithholdCalc()
    {
        taxWithholdCalcTmpSum.setTempDB();
        taxWithholdCalcTmp.setTempDB();
        taxWithholdCalcTmpList = new RecordInsertList(tableNum(TaxWithholdCalcTmp), false, false, false, false, false, taxWithholdCalcTmp);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTmpTaxWithholdCalcMarkup</Name>
				<Source><![CDATA[
    private void initTmpTaxWithholdCalcMarkup()
    {
        taxWithholdCalcTmpMarkup.setTempDB();
        taxWithholdCalcTmpMarkupList = new RecordInsertList(tableNum(TaxWithholdCalcTmp), false, false, false, false, false, taxWithholdCalcTmpMarkup);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates tax information.
    /// </summary>
    /// <returns>
    /// The instance of the <c>TaxAmountCur</c> class.
    /// </returns>
    public TaxAmountCur calculateTax()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalTaxWithholdAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the total tax withhold amount.
    /// </summary>
    /// <returns>
    /// The total tax withhold amount.
    /// </returns>
    public TaxAmountCur totalTaxWithholdAmount()
    {
        return totalTaxWithholdAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeadingRecID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the RecID of the Header table.
    /// </summary>
    /// <param name="_headingRecId">
    /// The new value of the RecID of the Header table; optional.
    /// </param>
    /// <returns>
    ///  The current value of RecID of the Header table
    /// </returns>
    public RefRecId parmHeadingRecID(RefRecId _headingRecId = headingRecId)
    {
        headingRecId = _headingRecId;

        return headingRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHeadingTableID</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the Table ID of the Header table.
    /// </summary>
    /// <param name="_headingTableId">
    /// The new value of the Table ID of the Header table; optional.
    /// </param>
    /// <returns>
    ///  The current value of Table ID of the Header table
    /// </returns>
    public RefTableId parmHeadingTableID(RefTableId _headingTableId = headingTableId)
    {
        headingTableId = _headingTableId;

        return headingTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCalcBasicDataForLine</Name>
				<Source><![CDATA[
    public void fillCalcBasicDataForLine()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDoGenerateWHTUncommitted</Name>
				<Source><![CDATA[
    public boolean parmDoGenerateWHTUncommitted(boolean _doGenerateWHTUncommitted = doGenerateWHTUncommitted)
    {
        doGenerateWHTUncommitted = _doGenerateWHTUncommitted;

        return doGenerateWHTUncommitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDiscPercent</Name>
				<Source><![CDATA[
    public DiscPct parmEndDiscPercent(DiscPct _endDiscPercent = endDiscPercent)
    {
        endDiscPercent = _endDiscPercent;

        return endDiscPercent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillCalcBasicDataForMarkupTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the calculation basic data for charges.
    /// </summary>
    /// <param name = "_markupTrans">An object instance of <c>MarkupTrans</c></param>
    /// <param name = "_markupValue">Markup value excludes sales tax.</param>
    /// <param name = "_markupTaxValue">Sales tax amount.</param>
    public void fillCalcBasicDataForMarkupTrans(MarkupTrans _markupTrans, AmountCur _markupValue, AmountCur _markupTaxValue)
    {
        TaxWithholdGroupData taxWithholdGroupData;
        TaxWithholdOnItem_TH taxWithholdOnItem_TH;

        if (_markupTrans && _markupValue && _markupTrans.TaxWithholdItemGroup && _markupTrans.TaxWithholdGroup)
        {
            AmountCur markupInvoiceAmount = _markupTrans.signedValue(_markupValue + _markupTaxValue);
            totalInvoiceAmount += markupInvoiceAmount;

            _markupValue = this.deducteCashDisc(_markupTrans.signedValue(_markupValue));

            while select TaxWithholdCode from taxWithholdOnItem_TH
                where taxWithholdOnItem_TH.TaxWithholdItemGroupHeading_TH == _markupTrans.TaxWithholdItemGroup
                    exists join taxWithholdGroupData
                        where taxWithholdGroupData.TaxWithholdGroup == _markupTrans.TaxWithholdGroup
                            && taxWithholdOnItem_TH.TaxWithholdCode == taxWithholdGroupData.TaxWithholdCode
            {
                if (!taxWithholdCalcTmpMarkupList)
                {
                    this.initTmpTaxWithholdCalcMarkup();
                }

                taxWithholdCalcTmpMarkup = this.fillTaxWithholdCalcTmp(
                    taxWithholdCalcTmpMarkup,
                    [_markupTrans.TaxWithholdGroup,
                    _markupTrans.TaxWithholdItemGroup,
                    taxWithholdOnItem_TH.TaxWithholdCode,
                    _markupValue,
                    _markupTaxValue
                    ]);

                taxWithholdCalcTmpMarkup.TransTableId = _markupTrans.TransTableId;
                taxWithholdCalcTmpMarkup.TransRecId = _markupTrans.TransRecId;

                taxWithholdCalcTmpMarkupList.add(taxWithholdCalcTmpMarkup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deducteCashDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deductes the cash discount amount before calculating withholding tax if cash discount is deducted before sales tax calculation.
    /// </summary>
    /// <param name = "_baseAmount">The base amount.</param>
    /// <returns>Amount after deducting cash discount.</returns>
    protected AmountCur deducteCashDisc(AmountCur _baseAmount)
    {
        if (_baseAmount && tax.taxParameters().TaxLessCashDisc)
        {
            AmountCur cashDiscAmount = tax.getCashDiscAmount();

            if (cashDiscAmount)
            {
                _baseAmount -= cashDiscAmount;
            }
            else
            {
                _baseAmount -= _baseAmount * tax.getCashDiscPercent() / 100;
            }
        }

        return _baseAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTaxWithholdCalcTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the basic data before withholding tax calculation.
    /// </summary>
    /// <param name = "_taxWithholdCalcTmp">The table buffer of <c>TaxWithholdCalcTmp</c>.</param>
    /// <param name = "_WHTInfo">A container of withholding tax information. </param>
    /// <returns>The updated table buffer of <c>TaxWithholdCalcTmp</c>.</returns>
    public TaxWithholdCalcTmp fillTaxWithholdCalcTmp(TaxWithholdCalcTmp _taxWithholdCalcTmp, container _WHTInfo)
    {
        TaxWithholdGroup taxWithholdGroup = conPeek(_WHTInfo, 1);
        TaxWithholdItemGroupId_TH taxWithholdItemGroup = conPeek(_WHTInfo, 2);
        TaxWithholdCode taxWithholdCode = conPeek(_WHTInfo, 3);
        Amount lineAmountExcludeTax = conPeek(_WHTInfo, 4);
        TaxAmount taxAmount = conPeek(_WHTInfo, 5);

        _taxWithholdCalcTmp.clear();

        if (taxWithholdGroup && taxWithholdItemGroup && lineAmountExcludeTax)
        {
            _taxWithholdCalcTmp.TaxWithholdGroup = taxWithholdGroup;
            _taxWithholdCalcTmp.TaxWithholdItemGroup = taxWithholdItemGroup;
            _taxWithholdCalcTmp.TaxWithholdCode = taxWithholdCode;
            _taxWithholdCalcTmp.InvoiceAmount = lineAmountExcludeTax + taxAmount;
            _taxWithholdCalcTmp.InvoiceTaxAmount = taxAmount;
            _taxWithholdCalcTmp.HeadingTableId = headingTableId;
            _taxWithholdCalcTmp.HeadingRecId = headingRecId;
        }

        return _taxWithholdCalcTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundOffTaxWithholdAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rounds off withholding tax amount by the round off value and type that sets in withholdng tax code.
    /// </summary>
    /// <param name = "_taxWithholdUncommitted">An object instance of <c>TaxWithholdUncommitted</c> table.</param>
    /// <param name = "_taxWithholdTable">Withholding tax code table record.</param>
    /// <returns>An updated object instance of <c>TaxWithholdUncommitted</c> table.</returns>
    protected TaxWithholdUncommitted roundOffTaxWithholdAmount(TaxWithholdUncommitted _taxWithholdUncommitted, TaxWithholdTable _taxWithholdTable)
    {
        _taxWithholdUncommitted.InvoiceTaxWithholdAmount = CurrencyExchange::roundWithRule(
            _taxWithholdUncommitted.InvoiceTaxWithholdAmount,
            _taxWithholdTable.TaxWithholdRoundOff,
            _taxWithholdTable.TaxWithholdRoundOffType);

        _taxWithholdUncommitted.TaxWithholdAmount = CurrencyExchange::roundWithRule(
            _taxWithholdUncommitted.TaxWithholdAmount,
            _taxWithholdTable.TaxWithholdRoundOff,
            _taxWithholdTable.TaxWithholdRoundOffType);

        _taxWithholdUncommitted.InvoiceTaxExemptedAmount = CurrencyExchange::roundWithRule(
            _taxWithholdUncommitted.InvoiceTaxExemptedAmount,
            _taxWithholdTable.TaxWithholdRoundOff,
            _taxWithholdTable.TaxWithholdRoundOffType);

        _taxWithholdUncommitted.TaxExemptedAmount = CurrencyExchange::roundWithRule(
            _taxWithholdUncommitted.TaxExemptedAmount,
            _taxWithholdTable.TaxWithholdRoundOff,
            _taxWithholdTable.TaxWithholdRoundOffType);

        return _taxWithholdUncommitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRatePerWHTExchRateType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets exchange rate per withholding tax currency exchange rate type.
    /// </summary>
    /// <param name = "_fromCurrency">From currency.</param>
    /// <param name = "_toCurrency">To currency.</param>
    /// <param name = "_exchRateDate">Exchange rate date.</param>
    /// <returns>Exchange rate value.</returns>
    internal ExchRate getExchRatePerWHTExchRateType(CurrencyCode _fromCurrency, CurrencyCode _toCurrency, TransDate _exchRateDate)
    {
        ExchRate taxWithholdExchRate;

        if (ledgerParameters.RecId && ledgerParameters.TaxWithholdExchangeRateType && _exchRateDate != dateNull())
        {
            ExchangeRateHelper exchangeRateHelper = ExchangeRateHelper::newCurrencyToCurrency(_fromCurrency, _toCurrency);
            exchangeRateHelper.parmExchangeDate(_exchRateDate);
            exchangeRateHelper.parmExchangeRateTypeRecId(ledgerParameters.TaxWithholdExchangeRateType);
            exchangeRateHelper.parmLedgerRecId(Ledger::current());

            ExchRate corssRate = exchangeRateHelper.getCrossRate();
            taxWithholdExchRate = corssRate ? corssRate : exchangeRateHelper.getExchangeRate1();
        }

        return taxWithholdExchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>any2TaxWithhold</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts amount from specified curreny code to withholding tax currency code.
    /// </summary>
    /// <param name = "_amount">The amount to be converted.</param>
    /// <param name = "_fromCurrency">Form currency code.</param>
    /// <param name = "_taxWithholdCurrency">The withholding tax currency code.</param>
    /// <param name = "_taxWithholdExchRate">The withholding tax currency exchange rate.</param>
    /// <param name = "_taxWithholdExchRateDate">The withholding tax currency exchange rate date.</param>
    /// <param name = "_roundResult">A boolean value indacates whether round the amount.</param>
    /// <returns>The conveted amount in withholding tax currency code.</returns>
    public AmountCur any2TaxWithhold(
        AmountCur _amount,
        CurrencyCode _fromCurrency,
        CurrencyCode _taxWithholdCurrency,
        ExchRate _taxWithholdExchRate,
        TransDate _taxWithholdExchRateDate,
        boolean _roundResult = false)
    {
        AmountCur withholdAmountInTaxCurrency;

        if (_amount == 0)
        {
            return 0;
        }

        if (_fromCurrency == _taxWithholdCurrency)
        {
            return _amount;
        }

        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newLedger(Ledger::current());
        exchangeRateHelper.parmExchangeRate1(_taxWithholdExchRate);
        exchangeRateHelper.parmExchangeDate(_taxWithholdExchRateDate);

        CurrencyCalculationResults calculationResults = exchangeRateHelper.calculateCurrencyToCurrencyAmounts(_fromCurrency, _taxWithholdCurrency, _amount);
        withholdAmountInTaxCurrency = _roundResult ? calculationResults.getRoundedAmount() : calculationResults.getUnroundedAmount();

        return withholdAmountInTaxCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithhold2Any</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts withholding tax currency amount to any other currency.
    /// </summary>
    /// <param name = "_amount">The amount to be converted.</param>
    /// <param name = "_taxWithholdCurrency">The withholding tax currency code.</param>
    /// <param name = "_toCurrency">To currency code.</param>
    /// <param name = "_taxWithholdExchRate">The withholding tax currency exchange rate</param>
    /// <param name = "_taxWithholdExchRateDate">The withholding tax currency exchange rate date.</param>
    /// <param name = "_roundResult">A boolean value indacates whether round the amount.</param>
    /// <returns>The conveted amount in currency code.</returns>
    public AmountCur taxWithhold2Any(
        AmountCur _amount,
        CurrencyCode _taxWithholdCurrency,
        CurrencyCode _toCurrency,
        ExchRate _taxWithholdExchRate,
        TransDate _taxWithholdExchRateDate,
        boolean _roundResult = false)
    {
        AmountCur withholdAmountInToCurrency;

        if (_amount == 0)
        {
            return 0;
        }

        if (_taxWithholdCurrency == _toCurrency)
        {
            return _amount;
        }

        CurrencyExchangeHelper exchangeRateHelper = CurrencyExchangeHelper::newLedger(Ledger::current());
        exchangeRateHelper.parmExchangeRate1(this.getExchRatePerWHTExchRateType(_taxWithholdCurrency, _toCurrency, _taxWithholdExchRateDate));
        exchangeRateHelper.parmExchangeDate(_taxWithholdExchRateDate);

        CurrencyCalculationResults calculationResults = exchangeRateHelper.calculateCurrencyToCurrencyAmounts(_taxWithholdCurrency, _toCurrency, _amount);
        withholdAmountInToCurrency = _roundResult ? calculationResults.getRoundedAmount() : calculationResults.getUnroundedAmount();

        return withholdAmountInToCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWithholdTaxes</Name>
				<Source><![CDATA[
    /// <summary>
    /// Shows withholding tax form.
    /// </summary>
    /// <param name = "_menuItemDisplayStr">Dispalyed menu item string.</param>
    /// <param name = "_taxWithholdCalculation">The <c>TaxWithholdCalculation</c> object.</param>
    /// <param name = "_record">The record.</param>
    /// <param name = "_formRun">The instance of the <c>FormRun</c> classs.</param>
    /// <param name = "_openMode">The form open mode.</param>
    /// <returns>The instance of the <c>FormRun</c> classs.</returns>
    public static FormRun showWithholdTaxes(
        str _menuItemDisplayStr,
        TaxWithholdCalculation _taxWithholdCalculation,
        Common  _record = null,
        FormRun _formRun = null,
        OpenMode _openMode = OpenMode::Auto)
    {
        Args args;
        FormRun formRun;

        args = new Args();
        args.caller(_taxWithholdCalculation);
        args.record(_record);
        args.parmObject(_formRun);
        args.openMode(_openMode);

        formRun = new MenuFunction(_menuItemDisplayStr, MenuItemType::Display).create(args);

        formRun.run();

        return formRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcExemptedAmountByInterval_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates exempted amount in invoice and withhold tax currency code by interval.
    /// </summary>
    /// <param name="_taxWithholdUncommitted">
    /// A <c>TaxWithholdUncommitted</c> table buffer.
    /// </param>
    /// <returns>
    /// A <c>TaxWithholdUncommitted</c> table buffer with calculated exempted amount in invoice and withhold tax currency code.
    /// </returns>
    public TaxWithholdUncommitted calcExemptedAmountByInterval_JP(TaxWithholdUncommitted _taxWithholdUncommitted)
    {
        TaxWithholdAmountCur invoiceExemptedAmount;
        TaxWithholdAmount taxExemptedAmount;
        TaxWithholdData taxWithholdData;
        AmountMST netTaxWithholdBaseAmount;
        AmountCur netInvoiceBaseAmount = _taxWithholdUncommitted.InvoiceTaxWithholdBaseAmount;

        if (netInvoiceBaseAmount)
        {
            if (isEnabledWHTCurrencyExchRateFeature)
            {
                netTaxWithholdBaseAmount = this.any2TaxWithhold(
                    netInvoiceBaseAmount,
                    _taxWithholdUncommitted.InvoiceCurrency,
                    _taxWithholdUncommitted.TaxWithholdCurrency,
                    _taxWithholdUncommitted.TaxWithholdExchRate,
                    _taxWithholdUncommitted.TaxWithholdExchRateDate);
            }
            else
            {
                netTaxWithholdBaseAmount = CurrencyExchangeHelper::curAmount2CurAmount(
                    netInvoiceBaseAmount,
                    _taxWithholdUncommitted.InvoiceCurrency,
                    _taxWithholdUncommitted.TaxWithholdCurrency,
                    _taxWithholdUncommitted.TransDate);
            }

            while select TaxWithholdLimitMax, TaxWithholdLimitMin, TaxWithholdExclude from taxWithholdData
                where taxWithholdData.TaxWithholdCode == _taxWithholdUncommitted.TaxWithholdCode
                    && taxWithholdData.TaxWithholdExclude != 0
                    && taxWithholdData.TaxWithholdLimitMin  < netTaxWithholdBaseAmount
                    && (!taxWithholdData.TaxWithholdFromDate
                        || taxWithholdData.TaxWithholdFromDate <= _taxWithholdUncommitted.TransDate)
                    && (!taxWithholdData.TaxWithholdToDate
                        || taxWithholdData.TaxWithholdToDate >= _taxWithholdUncommitted.TransDate)
            {
                if (taxWithholdData.TaxWithholdLimitMax == 0
                    || taxWithholdData.TaxWithholdLimitMax  >= netTaxWithholdBaseAmount)
                {
                    taxExemptedAmount += (netTaxWithholdBaseAmount - taxWithholdData.TaxWithholdLimitMin) * taxWithholdData.TaxWithholdExclude / 100;
                }
                else
                {
                    taxExemptedAmount += (taxWithholdData.TaxWithholdLimitMax - taxWithholdData.TaxWithholdLimitMin) * taxWithholdData.TaxWithholdExclude / 100;
                }
            }

            if (isEnabledWHTCurrencyExchRateFeature)
            {
                invoiceExemptedAmount = this.taxWithhold2Any(
                    taxExemptedAmount,
                    _taxWithholdUncommitted.TaxWithholdCurrency,
                    _taxWithholdUncommitted.InvoiceCurrency,
                    _taxWithholdUncommitted.TaxWithholdExchRate,
                    _taxWithholdUncommitted.TaxWithholdExchRateDate);
            }
            else
            {
                invoiceExemptedAmount = CurrencyExchangeHelper::curAmount2CurAmount(
                    taxExemptedAmount,
                    _taxWithholdUncommitted.TaxWithholdCurrency,
                    _taxWithholdUncommitted.InvoiceCurrency,
                    _taxWithholdUncommitted.TransDate);
            }

            _taxWithholdUncommitted.InvoiceTaxExemptedAmount = invoiceExemptedAmount;
            _taxWithholdUncommitted.TaxExemptedAmount = taxExemptedAmount;
        }

        return _taxWithholdUncommitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithholdTaxAmountByInterval_JP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates withholding tax amount by interval.
    /// </summary>
    /// <param name="_taxWithholdUncommitted">
    /// A <c>TaxWithholdUncommitted</c> table buffer.
    /// </param>
    /// <returns>
    /// Calculated withholding tax amount in tax currency.
    /// </returns>
    public TaxWithholdAmount calcWithholdTaxAmountByInterval_JP(TaxWithholdUncommitted _taxWithholdUncommitted)
    {
        TaxWithholdAmount withholdTaxAmount;
        TaxWithholdData taxWithholdData;

        if (_taxWithholdUncommitted.TaxWithholdBaseAmount)
        {
            while select TaxWithholdLimitMax, TaxWithholdLimitMin, TaxWithholdValue from taxWithholdData
                where taxWithholdData.TaxWithholdCode == _taxWithholdUncommitted.TaxWithholdCode
                    && taxWithholdData.TaxWithholdLimitMin  < _taxWithholdUncommitted.TaxWithholdBaseAmount
                    && (!taxWithholdData.TaxWithholdFromDate
                        || taxWithholdData.TaxWithholdFromDate <= _taxWithholdUncommitted.TransDate)
                    && (!taxWithholdData.TaxWithholdToDate
                        || taxWithholdData.TaxWithholdToDate >= _taxWithholdUncommitted.TransDate)
            {
                if (taxWithholdData.TaxWithholdLimitMax == 0
                    || taxWithholdData.TaxWithholdLimitMax  >= _taxWithholdUncommitted.TaxWithholdBaseAmount)
                {
                    withholdTaxAmount += (_taxWithholdUncommitted.TaxWithholdBaseAmount - taxWithholdData.TaxWithholdLimitMin) * taxWithholdData.TaxWithholdValue / 100;
                }
                else
                {
                    withholdTaxAmount += (taxWithholdData.TaxWithholdLimitMax - taxWithholdData.TaxWithholdLimitMin) * taxWithholdData.TaxWithholdValue / 100;
                }
            }
        }

        return withholdTaxAmount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>