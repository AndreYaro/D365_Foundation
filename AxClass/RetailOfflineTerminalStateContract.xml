<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailOfflineTerminalStateContract</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.IO;
using System.Runtime.Serialization.Json;
using System.Text;

/// <summary>
/// Data contract class for <c>RetailOfflineTerminalState</c> Data table.
/// </summary>
/// <remarks>
/// This is the Data Contract class for the <c>RetailOfflineTerminalState</c> Data table.
/// </remarks>
[DataContract]
public class RetailOfflineTerminalStateContract
{

    protected RetailStaffId OfflineOperatorId;
    protected Notes OfflineOperationError;
    protected RefRecId retailOfflineTerminalStateData;
    protected RetailTerminalId terminalId;
    protected CurrentVersion MPOSVersion;
    protected CurrentVersion offlineDBVersion;
    protected boolean offlineAvailable;
    protected RetailOfflineConnectionStatus offlineConnectionStatus;
    protected RetailOfflineOperation offlineOperation;
    protected RetailNumberOfTransactions pendingTransactions;
    protected RetailOfflineDBSize offlineDbDataSizeInMB;
    protected RetailOfflineDBSize offlineDbIndexSizeInMB;
    protected RetailOfflineDBSize unallocatedSpaceInMB;
    protected RetailOfflineDBSize unusedSpaceInMB;
    protected str terminalStateDateTime;
    protected RetailOfflineDBSize databaseSizeInMB;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmOfflineOperatorId</Name>
				<Source><![CDATA[
    [DataMember("OperatorId")]
    public RetailStaffId parmOfflineOperatorId(RetailStaffId _OfflineOperatorId = OfflineOperatorId)
    {
        OfflineOperatorId = _OfflineOperatorId;

        return OfflineOperatorId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOfflineOperationError</Name>
				<Source><![CDATA[
    [DataMember("OperationError")]
    public Notes parmOfflineOperationError(Notes _OfflineOperationError = OfflineOperationError)
    {
        OfflineOperationError = _OfflineOperationError;

        return OfflineOperationError;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTerminalId</Name>
				<Source><![CDATA[
    [DataMember("TerminalId")]
    public RetailTerminalId parmTerminalId(RetailTerminalId _terminalId = terminalId)
    {
        terminalId = _terminalId;

        return terminalId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMPOSVersion</Name>
				<Source><![CDATA[
    [DataMember("MposVersion")]
    public CurrentVersion parmMPOSVersion(CurrentVersion _MPOSVersion = MPOSVersion)
    {
        MPOSVersion = _MPOSVersion;

        return MPOSVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmofflineDBVersion</Name>
				<Source><![CDATA[
    [DataMember("DbVersion")]
    public CurrentVersion parmofflineDBVersion(CurrentVersion _offlineDBVersion = offlineDBVersion)
    {
        offlineDBVersion = _offlineDBVersion;

        return offlineDBVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmofflineAvailable</Name>
				<Source><![CDATA[
    [DataMember("OfflineAvailable")]
    public boolean parmofflineAvailable(boolean _offlineAvailable = offlineAvailable)
    {
        offlineAvailable = _offlineAvailable;

        return offlineAvailable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmofflineConnectionStatus</Name>
				<Source><![CDATA[
    [DataMember("ConnectionStatus")]
    public RetailOfflineConnectionStatus parmofflineConnectionStatus(RetailOfflineConnectionStatus _offlineConnectionStatus = offlineConnectionStatus)
    {
        offlineConnectionStatus = _offlineConnectionStatus;

        return offlineConnectionStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmofflineOperation</Name>
				<Source><![CDATA[
    [DataMember("Operation")]
    public RetailOfflineOperation parmofflineOperation(RetailOfflineOperation _offlineOperation = offlineOperation)
    {
        offlineOperation = _offlineOperation;

        return offlineOperation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmpendingTransactions</Name>
				<Source><![CDATA[
    [DataMember("PendingTransactions")]
    public RetailNumberOfTransactions parmpendingTransactions(RetailNumberOfTransactions _pendingTransactions = pendingTransactions)
    {
        pendingTransactions = _pendingTransactions;

        return pendingTransactions;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmofflineDbDataSizeInMB</Name>
				<Source><![CDATA[
    [DataMember("DbDataSize")]
    public RetailOfflineDBSize parmofflineDbDataSizeInMB(RetailOfflineDBSize _offlineDbDataSizeInMB = offlineDbDataSizeInMB)
    {
        offlineDbDataSizeInMB = _offlineDbDataSizeInMB;

        return offlineDbDataSizeInMB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmofflineDbIndexSizeInMB</Name>
				<Source><![CDATA[
    [DataMember("DbIndexSize")]
    public RetailOfflineDBSize parmofflineDbIndexSizeInMB(RetailOfflineDBSize _offlineDbIndexSizeInMB = offlineDbIndexSizeInMB)
    {
        offlineDbIndexSizeInMB = _offlineDbIndexSizeInMB;

        return offlineDbIndexSizeInMB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmunallocatedSpaceInMB</Name>
				<Source><![CDATA[
    [DataMember("DbUnallocatedSpace")]
    public RetailOfflineDBSize parmunallocatedSpaceInMB(RetailOfflineDBSize _unallocatedSpaceInMB = unallocatedSpaceInMB)
    {
        unallocatedSpaceInMB = _unallocatedSpaceInMB;

        return unallocatedSpaceInMB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmunusedSpaceInMB</Name>
				<Source><![CDATA[
    [DataMember("DbUnusedSpace")]
    public RetailOfflineDBSize parmunusedSpaceInMB(RetailOfflineDBSize _unusedSpaceInMB = unusedSpaceInMB)
    {
        unusedSpaceInMB = _unusedSpaceInMB;

        return unusedSpaceInMB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTerminalStateDateTime</Name>
				<Source><![CDATA[
    [DataMember("TerminalTimeUtc")]
    public str parmTerminalStateDateTime(str _terminalStateDateTime = terminalStateDateTime)
    {
        terminalStateDateTime = _terminalStateDateTime;

        return terminalStateDateTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmdatabaseSizeInMB</Name>
				<Source><![CDATA[
    [DataMember("DbSize")]
    public RetailOfflineDBSize parmdatabaseSizeInMB(RetailOfflineDBSize _databaseSizeInMB = databaseSizeInMB)
    {
        databaseSizeInMB = _databaseSizeInMB;

        return databaseSizeInMB;
    }

]]></Source>
			</Method>
			<Method>
				<Name>systemDateTimeStr2UtcDateTime</Name>
				<Source><![CDATA[
    public static utcdatetime systemDateTimeStr2UtcDateTime(str systemDateTimeStr)
    {
        return clrSystemDateTime2UtcDateTime(System.DateTime::Parse(systemDateTimeStr));
    }

]]></Source>
			</Method>
			<Method>
				<Name>serialize</Name>
				<Source><![CDATA[
    public str serialize(RetailOfflineTerminalStateContract _contract)
    {
        DataContractJsonSerializer dataContractJsonSerializer = new DataContractJsonSerializer(_contract.GetType());
        using (MemoryStream memoryStream = new MemoryStream())
        {
            dataContractJsonSerializer.WriteObject(memoryStream, _contract);
            return Encoding::UTF8.GetString(memoryStream.ToArray());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deserializeOfflineTerminalStateDataFromJSON</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deserializes offline terminal state data from JSON
    /// </summary>
    /// <param name = "jsonObject">JsonObject of retail terminal offline error string</param>
    /// <returns>RetailOfflineTerminalStateContract</returns>
    public static RetailOfflineTerminalStateContract deserializeOfflineTerminalStateDataFromJSON(System.String jsonObject)
    {
        RetailOfflineTerminalStateContract item = new RetailOfflineTerminalStateContract();
        using (MemoryStream ms = new MemoryStream(Encoding::UTF8.GetBytes(jsonObject)))
        {
            System.Type[] typeArray = new System.Type[1]();
            typeArray.SetValue(item.GetType(), 0);

            DataContractJsonSerializer serializer = new DataContractJsonSerializer(item.GetType(), typeArray);
            item = serializer.ReadObject(ms);
        }

        return item;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>