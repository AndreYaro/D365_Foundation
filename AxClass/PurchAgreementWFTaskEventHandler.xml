<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchAgreementWFTaskEventHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PurchAgreementWFTaskEventHandler</c> class is the event handler class
/// for managing the workflow task canceled event and the workflow task returned event.
/// </summary>
public class PurchAgreementWFTaskEventHandler implements WorkflowElementCanceledEventHandler,
                                                            WorkflowElementReturnedEventHandler
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canceled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the canceled event for the workflow task.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    public void canceled(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        PurchAgreementHeader::setWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                PurchAgreementWorkflowStatus::NotSubmitted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>returned</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the returned event for the workflow task.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    public void returned(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        PurchAgreementHeader::setWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                PurchAgreementWorkflowStatus::Returned);
    }

]]></Source>
			</Method>
			<Method>
				<Name>started</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>WorkflowStatus_PSN</c> field on the <c>PurchAgreementHeader</c> table to the <c>PurchAgreementWorkflowStatus::Pending</c> enumeration value.
    /// </summary>
    /// <param name="_workflowElementEventArgs">
    /// An instance of the <c>WorkflowElementEventArgs</c> class.
    /// </param>
    /// <remarks>
    /// This method is called from the workflow framework when the complete task is started.
    /// </remarks>
    public void started(WorkflowElementEventArgs _workflowElementEventArgs)
    {
        PurchAgreementHeader::setWorkflowStatus(_workflowElementEventArgs.parmWorkflowContext().parmRecId(),
                                                PurchAgreementWorkflowStatus::Pending);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>