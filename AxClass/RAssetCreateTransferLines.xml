<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetCreateTransferLines</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rAssetCreateTransferLines extends RunBaseBatch implements BatchRetryable
{
    QueryRun queryRun;
    RAssetTransferTable assetTransferTable;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    public boolean canGoBatch()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog = super();
        dialog.caption("@GLS116666");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(RAssetTransferTable _assetTransferTable)
    {
        assetTransferTable = _assetTransferTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        queryRun = new QueryRun(queryStr(RAssetTable));

        findOrCreateRange_W(queryRun.query().dataSourceTable(tableNum(RAssetTable)),
            fieldNum(RAssetTable, AssetType),
            queryRange(RAssetType::Tangible, RAssetType::Other)).status(RangeStatus::Locked);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        this.getFromDialog();

        ttsbegin;
        while (queryRun.next())
        {
            RAssetTable rAssetTable = queryRun.get(tableNum(RAssetTable));

            if (RAssetCreateTransferLines::checkCanCreate(assetTransferTable, rAssetTable))
            {
                RAssetTransferTrans::createLine(assetTransferTable, rAssetTable);
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkCanCreate</Name>
				<Source><![CDATA[
    public static boolean checkCanCreate(RAssetTransferTable _assetTransferTable, RAssetTable _assetTable, boolean _showWarning = false)
    {
        boolean ret = true;

        RAssetStatusType assetStatusType = RAssetStatusType::construct(_assetTable);
        RAssetMoveHist lastHist = RAssetMoveHist::findLastOperation(_assetTable.AccountNum, RAssetMoveType::Transfer);

        if (lastHist
            && _assetTable.AcquisitionDate > lastHist.ChangeDate)
        {
            ret = _showWarning ? checkFailed(strFmt("@GLS116735", _assetTable.AccountNum)) : false;
        }
        else if (assetStatusType.disposed())
        {
            ret = _showWarning ? checkFailed(strFmt("@GLS116565", _assetTable.AccountNum)) : false;
        }
        else if (lastHist
            && _assetTransferTable.TransDate <= lastHist.ChangeDate)
        {
            ret = _showWarning ? checkFailed(strFmt("@GLS116736", _assetTable.AccountNum)) : false;
        }
        else if (_assetTransferTable.OldLocation != lastHist.NewLocation
            || _assetTransferTable.OldEmployee != lastHist.NewEmployee)
        {
            ret = _showWarning ? checkFailed(strFmt("@GLS116668", _assetTable.AccountNum)) : false;
        }
        else if (_assetTransferTable.NewLocation == lastHist.NewLocation
            && _assetTransferTable.NewEmployee == lastHist.NewEmployee)
        {
            ret = _showWarning ? checkFailed(strFmt("@GLS220496", _assetTable.AccountNum)) : false;
        }
        else if (_assetTransferTable.OldLocation != _assetTransferTable.NewLocation)
        {
            if (RAssetInventoryTable::checkInventory(_assetTable, _assetTransferTable.TransDate, '', _showWarning, _assetTransferTable.NewLocation))
            {
                ret = false;
            }
            else if (RAssetInventoryTable::checkInventory(_assetTable, _assetTransferTable.TransDate, '', _showWarning, lastHist.NewLocation)) // check last location
            {
                ret = false;
            }
            else
            {
                RAssetStandards assetStandardsLocal;
                while select assetStandardsLocal
                where assetStandardsLocal.AssetId == _assetTable.AccountNum &&
                      assetStandardsLocal.Depreciation
                {
                    RAssetTransDate lastDepDate = assetStandardsLocal.LastDepDate;
                    RAssetTableInterval assetInterval = RAssetTableInterval::construct(assetStandardsLocal, lastDepDate);
                    if (lastDepDate
                        && _assetTransferTable.TransDate < assetInterval.getStartDate(lastDepDate))
                    {
                        ret = _showWarning ? checkFailed("@GLS116510") : false;
                    }
                }
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTransferLines</Name>
				<Source><![CDATA[
    public static void createTransferLines(RAssetTransferTable _assetTransferTable)
    {
        RAssetCreateTransferLines assetTransfer = new RAssetCreateTransferLines();
        assetTransfer.initValue(_assetTransferTable);

        if (assetTransfer.prompt()
            && !_assetTransferTable.Posted)
        {
            assetTransfer.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>