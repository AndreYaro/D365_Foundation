<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalAccountMovementDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Handles the business logic for the <c>LedgerJournalAccountMovement</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(LedgerJournalAccountMovementContract)),
    SRSReportQueryAttribute(queryStr(LedgerJournalAccountMovement))
]
class LedgerJournalAccountMovementDP extends SrsReportDataProviderPreProcessTempDB
{
    LedgerJournalAccountMovementTmp  ledgerJournalAccountMovementTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerJournalAccountMovementTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a temporary table to SSRS reports.
    /// </summary>
    /// <returns>
    ///    A <c>LedgerJournalAccountMovementTmp</c> temporary table.
    /// </returns>
    [SrsReportDataSetAttribute(tableStr(LedgerJournalAccountMovementTmp))]
    public LedgerJournalAccountMovementTmp getLedgerJournalAccountMovementTmp()
    {
        select ledgerJournalAccountMovementTmp;
        return ledgerJournalAccountMovementTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the business logic that is used to populate a <c>LedgerJournalAccountMovementTmp</c>
    ///    table.
    /// </summary>
    public void processReport()
    {
        this.takeOwnershipOfTempTable(ledgerJournalAccountMovementTmp);

        LedgerJournalAccountMovementTmp accountMovementTmpNotExists;
        this.takeOwnershipOfTempTable(accountMovementTmpNotExists);

        accountMovementTmpNotExists.setConnection(this.parmUserConnection());
        accountMovementTmpNotExists.linkPhysicalTableInstance(ledgerJournalAccountMovementTmp);

        QueryRun queryRun = new QueryRun(this.parmQuery());

        TransDate endDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        TransDate startDate = LedgerFiscalCalendar::findOpeningStartDateByDate(Ledger::FiscalCalendar(CompanyInfo::current()), endDate);

        if (DimensionFocusBalanceUpdateByLedgerFlight::instance().isEnabled())
        {
            MainAccountEventArgs args = MainAccountEventArgs::construct();
            args.parmBalanceLedgerRecId(Ledger::current());

            MainAccount::updateBalancesWithArgs(args);
        }
        else
        {
            MainAccount::updateBalances();
        }

        LedgerBalanceMainAccountAmounts ledgerBalance = LedgerBalanceMainAccountAmounts::construct();
        ledgerBalance.parmIncludeRegularPeriod(true);
        ledgerBalance.parmIncludeClosingPeriod(true);

        LedgerBalanceDimAttrValueComboAmounts accountBalance = LedgerBalanceDimAttrValueComboAmounts::construct();
        accountBalance.parmIncludeRegularPeriod(true);
        accountBalance.parmIncludeClosingPeriod(true);

        LedgerJournalAccountMovementContract contract = this.parmDataContract() as LedgerJournalAccountMovementContract;

        boolean useMainAccountOnly;
        if (contract)
        {
            useMainAccountOnly = contract.parmUseMainAccountOnly();
        }

        DimensionAttributeValueCombination dimAttrValueCombo;
        MainAccount mainAccount;
        LedgerJournalTable ledgerJournalTable;
        LedgerJournalTrans ledgerJournalTrans;

        while (queryRun.next())
        {
            ledgerJournalTable = queryRun.get(tablenum(LedgerJournalTable));
            boolean isLedgerJournalTableInserted = false;

            ledgerBalance.parmAccountingDateRange(startDate, endDate);
            ledgerBalance.parmIncludeOpeningPeriod(startDate != endDate);

            accountBalance.parmAccountingDateRange(startDate, endDate);
            accountBalance.parmIncludeOpeningPeriod(startDate != endDate);

            // Process asset transactions with LedgerJournalTrans_Asset record separately.
            isLedgerJournalTableInserted = this.processFixedAssetSpecificAccountTransaction(ledgerJournalTable, useMainAccountOnly, ledgerBalance, accountBalance, isLedgerJournalTableInserted);

            while select sum(AmountCurDebit), sum(AmountCurCredit) from ledgerJournalTrans
                group by Company, AccountType, LedgerDimension
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                    && ledgerJournalTrans.AccountType != LedgerJournalACType::FixedAssets
            {
                select firstonly DisplayValue from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == ledgerJournalTrans.LedgerDimension
                outer join * from mainAccount
                    where mainAccount.RecId == dimAttrValueCombo.MainAccount;

                accountMovementTmpNotExists = this.findLedgerJournalAccountMovementTmp(
                    accountMovementTmpNotExists, useMainAccountOnly, ledgerJournalTrans.Company,
                    ledgerJournalTrans.AccountType, ledgerJournalTable.JournalNum, dimAttrValueCombo.DisplayValue,
                    mainAccount.MainAccountId);

                if (accountMovementTmpNotExists != null)
                {
                    // the ledger dimension was already processed
                    continue;
                }

                this.initializeLedgerJournalAccountMovementTmp(
                    ledgerJournalTable.JournalName,
                    ledgerJournalTable.JournalNum,
                    ledgerJournalTable.Name,
                    ledgerJournalTrans.Company,
                    ledgerJournalTrans.AccountType,
                    ledgerJournalTrans.accountName());

                this.processSide(
                    ledgerJournalTable,
                    dimAttrValueCombo.DisplayValue,
                    ledgerJournalTrans.parmAccount(),
                    ledgerJournalTrans.LedgerDimension,
                    mainAccount,
                    ledgerBalance,
                    accountBalance,
                    useMainAccountOnly);

                isLedgerJournalTableInserted = true;
            }

            while select sum(AmountCurDebit), sum(AmountCurCredit) from ledgerJournalTrans
                group by OffsetCompany, OffsetAccountType, OffsetLedgerDimension
                where ledgerJournalTrans.JournalNum == ledgerJournalTable.JournalNum
                && ledgerJournalTrans.OffsetLedgerDimension != 0
                && ledgerJournalTrans.OffsetAccountType != LedgerJournalACType::FixedAssets
            {
                select firstonly DisplayValue from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == ledgerJournalTrans.OffsetLedgerDimension
                outer join * from mainAccount
                    where mainAccount.RecId == dimAttrValueCombo.MainAccount;

                accountMovementTmpNotExists = this.findLedgerJournalAccountMovementTmp(
                    accountMovementTmpNotExists, useMainAccountOnly, ledgerJournalTrans.OffsetCompany,
                    ledgerJournalTrans.OffsetAccountType, ledgerJournalTable.JournalNum, dimAttrValueCombo.DisplayValue,
                    mainAccount.MainAccountId);

                if (accountMovementTmpNotExists != null)
                {
                    // the offset ledger dimension was already processed as a ledger dimension
                    continue;
                }

                this.initializeLedgerJournalAccountMovementTmp(
                    ledgerJournalTable.JournalName,
                    ledgerJournalTable.JournalNum,
                    ledgerJournalTable.Name,
                    ledgerJournalTrans.getOffsetCompany(),
                    ledgerJournalTrans.OffsetAccountType,
                    ledgerJournalTrans.offsetAccountName());
                
                this.processSide(
                    ledgerJournalTable,
                    dimAttrValueCombo.DisplayValue,
                    ledgerJournalTrans.parmOffsetAccount(),
                    ledgerJournalTrans.OffsetLedgerDimension,
                    mainAccount,
                    ledgerBalance,
                    accountBalance,
                    useMainAccountOnly);

                isLedgerJournalTableInserted = true;
            }

            if (!isLedgerJournalTableInserted)
            {
                // create a single record if none were created above
                ledgerJournalAccountMovementTmp.clear();
                ledgerJournalAccountMovementTmp.JournalName = ledgerJournalTable.JournalName;
                ledgerJournalAccountMovementTmp.JournalNum  = ledgerJournalTable.JournalNum;
                ledgerJournalAccountMovementTmp.Name = ledgerJournalTable.Name;
                ledgerJournalAccountMovementTmp.insert();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processFixedAssetSpecificAccountTransaction</Name>
				<Source><![CDATA[
    private boolean processFixedAssetSpecificAccountTransaction(LedgerJournalTable _ledgerJournalTable, boolean _useMainAccountOnly, LedgerBalanceMainAccountAmounts _ledgerBalance, LedgerBalanceDimAttrValueComboAmounts _accountBalance, boolean _isLedgerJournalTableInserted)
    {
        LedgerJournalTrans_Asset ledgerJournalTransAsset;
        DimensionAttributeValueCombination dimAttrValueCombo;
        MainAccount mainAccount;
        LedgerJournalTrans ledgerJournalTrans;
        boolean isLedgerJournalTableInserted = _isLedgerJournalTableInserted;

        LedgerJournalAccountMovementTmp accountMovementTmpNotExists;
        this.takeOwnershipOfTempTable(accountMovementTmpNotExists);

        accountMovementTmpNotExists.setConnection(this.parmUserConnection());
        accountMovementTmpNotExists.linkPhysicalTableInstance(ledgerJournalAccountMovementTmp);

        while select sum(AmountCurDebit), sum(AmountCurCredit) from ledgerJournalTrans
                join ledgerJournalTransAsset
            group by ledgerJournalTrans.AccountType, ledgerJournalTrans.Company, ledgerJournalTransAsset.AssetId, 
                ledgerJournalTransAsset.BookId, ledgerJournalTrans.LedgerDimension
            where
                ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum
                && ledgerJournalTrans.AccountType == LedgerJournalACType::FixedAssets
        {
            select firstonly DisplayValue from dimAttrValueCombo
                where dimAttrValueCombo.RecId == ledgerJournalTrans.LedgerDimension
            outer join * from mainAccount
                where mainAccount.RecId == dimAttrValueCombo.MainAccount;

            accountMovementTmpNotExists = this.findLedgerJournalAccountMovementTmp(
                    accountMovementTmpNotExists, _useMainAccountOnly, ledgerJournalTrans.Company,
                    ledgerJournalTrans.AccountType, _ledgerJournalTable.JournalNum, dimAttrValueCombo.DisplayValue,
                    mainAccount.MainAccountId);

            if (accountMovementTmpNotExists != null)
            {
                // the fixed asset was already processed
                continue;
            }

            this.initializeLedgerJournalAccountMovementTmp(
                    _ledgerJournalTable.JournalName,
                    _ledgerJournalTable.JournalNum,
                    _ledgerJournalTable.Name,
                    ledgerJournalTrans.Company,
                    LedgerJournalACType::FixedAssets,
                    ledgerJournalTrans.accountName());

            this.processSide(
                    _ledgerJournalTable,
                    dimAttrValueCombo.DisplayValue,
                    ledgerJournalTransAsset.AssetId,
                    ledgerJournalTrans.LedgerDimension,
                    mainAccount,
                    _ledgerBalance,
                    _accountBalance,
                    _useMainAccountOnly,
                    ledgerJournalTransAsset.BookId);

            isLedgerJournalTableInserted = true;
        }

        while select sum(AmountCurDebit), sum(AmountCurCredit) from ledgerJournalTrans
                join ledgerJournalTransAsset
            group by ledgerJournalTrans.OffsetAccountType, ledgerJournalTrans.OffsetCompany, ledgerJournalTransAsset.AssetId,
                ledgerJournalTransAsset.BookId, ledgerJournalTrans.OffsetLedgerDimension
            where
                ledgerJournalTransAsset.RefRecId == ledgerJournalTrans.RecId
                && ledgerJournalTrans.JournalNum == _ledgerJournalTable.JournalNum
                && ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::FixedAssets
        {
            select firstonly DisplayValue from dimAttrValueCombo
                    where dimAttrValueCombo.RecId == ledgerJournalTrans.OffsetLedgerDimension
            join * from mainAccount
                    where mainAccount.RecId == dimAttrValueCombo.MainAccount;

            accountMovementTmpNotExists = this.findLedgerJournalAccountMovementTmp(
                    accountMovementTmpNotExists, _useMainAccountOnly, ledgerJournalTrans.Company,
                    ledgerJournalTrans.OffsetAccountType, _ledgerJournalTable.JournalNum, dimAttrValueCombo.DisplayValue,
                    mainAccount.MainAccountId);

            if (accountMovementTmpNotExists != null)
            {
                // the fixed asset was already processed
                continue;
            }

            this.initializeLedgerJournalAccountMovementTmp(
                    _ledgerJournalTable.JournalName,
                    _ledgerJournalTable.JournalNum,
                    _ledgerJournalTable.Name,
                    ledgerJournalTrans.OffsetCompany,
                    LedgerJournalACType::FixedAssets,
                    ledgerJournalTrans.offsetAccountName()); 

            this.processSide(
                    _ledgerJournalTable,
                    dimAttrValueCombo.DisplayValue,
                    ledgerJournalTransAsset.AssetId,
                    ledgerJournalTrans.OffsetLedgerDimension,
                    mainAccount,
                    _ledgerBalance,
                    _accountBalance,
                    _useMainAccountOnly,
                    ledgerJournalTransAsset.BookId);

            isLedgerJournalTableInserted = true;
        }

        return isLedgerJournalTableInserted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerJournalAccountMovementTmp</Name>
				<Source><![CDATA[
    private LedgerJournalAccountMovementTmp findLedgerJournalAccountMovementTmp(
        LedgerJournalAccountMovementTmp _accountMovementTmpNotExists,
        boolean _useMainAccountOnly,
        SelectableDataArea _companyId,
        LedgerJournalACType _journalAccountType,
        LedgerJournalId _ledgerJournalId,
        DimensionDisplayValue _accountDisplayValue,
        MainAccountNum _accountMainAccountId)
    {
        if (_useMainAccountOnly)
        {
            select firstOnly recId from _accountMovementTmpNotExists
                where _accountMovementTmpNotExists.CompanyId == _companyId
                    && _accountMovementTmpNotExists.LedgerJournalACType == _journalAccountType
                    && _accountMovementTmpNotExists.JournalNum == _ledgerJournalId
                    && (_accountMovementTmpNotExists.MainAccount == _accountDisplayValue
                    || _accountMovementTmpNotExists.MainAccount == _accountMainAccountId);
        }
        else
        {
            select firstOnly recId from _accountMovementTmpNotExists
                where _accountMovementTmpNotExists.CompanyId == _companyId
                    && _accountMovementTmpNotExists.LedgerJournalACType == _journalAccountType
                    && _accountMovementTmpNotExists.JournalNum == _ledgerJournalId
                    && _accountMovementTmpNotExists.FullyQualifiedAccount == _accountDisplayValue;
        }

        return _accountMovementTmpNotExists;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeLedgerJournalAccountMovementTmp</Name>
				<Source><![CDATA[
    private void initializeLedgerJournalAccountMovementTmp(
        LedgerJournalNameId _journalNameId,
        LedgerJournalId _journalNumber,
        Name _journalName,
        SelectableDataArea _companyId,
        LedgerJournalACType _journalAccountType,
        LedgerJournalAccountName _journalAccountName)
    {
        ledgerJournalAccountMovementTmp.clear();
        ledgerJournalAccountMovementTmp.JournalName = _journalNameId;
        ledgerJournalAccountMovementTmp.JournalNum = _journalNumber;
        ledgerJournalAccountMovementTmp.Name = _journalName;

        ledgerJournalAccountMovementTmp.CompanyId = _companyId;
        ledgerJournalAccountMovementTmp.LedgerJournalACType = _journalAccountType;
        ledgerJournalAccountMovementTmp.AccountName = _journalAccountName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processSide</Name>
				<Source><![CDATA[
    private void processSide(
        LedgerJournalTable _ledgerJournalTable,
        DimensionDisplayValue _dimDisplayValue,
        LedgerJournalAC _acountNumber,
        LedgerDimensionAccount _ledgerDimension,
        MainAccount _mainAccount,
        LedgerBalanceMainAccountAmounts _ledgerBalance,
        LedgerBalanceDimAttrValueComboAmounts _ledgerAccountBalance,
        boolean _useMainAccountOnly = false,
        AssetBookId _assetBookId = '')
    {
        AmountMST openingBalance;
        AmountMSTSecondary reportingOpeningBalance;
        AmountMST debits, reportingDebits;
        AmountMST credits, reportingCredits;
        LedgerJournalType ledgerJournalType = LedgerJournalName::find(ledgerJournalAccountMovementTmp.JournalName).JournalType;

        changecompany (ledgerJournalAccountMovementTmp.CompanyId)
        {
            ledgerJournalAccountMovementTmp.MainAccount = _dimDisplayValue;
            ledgerJournalAccountMovementTmp.FullyQualifiedAccount = _dimDisplayValue;

            switch (ledgerJournalAccountMovementTmp.LedgerJournalACType)
            {
                case LedgerJournalACType::Ledger:
                    if (_mainAccount != null)
                    {
                        ledgerJournalAccountMovementTmp.MainAccount = _mainAccount.MainAccountId;

                        if (_useMainAccountOnly)
                        {
                            _ledgerBalance.parmLedgerRecId(Ledger::current());
                            _ledgerBalance.calculateBalance(_mainAccount);

                            if (ledgerJournalType != LedgerJournalType::ReportingCurrencyAdjustment)
                            {
                                openingBalance = _ledgerBalance.getAccountingCurrencyBalance();
                            }
                            reportingOpeningBalance = _ledgerBalance.getReportingCurrencyBalance();
                        }
                        else
                        {
                            DimensionAttributeValueCombination davc = DimensionAttributeValueCombination::find(_ledgerDimension);
                            _ledgerAccountBalance.parmLedgerRecId(Ledger::current());
                            _ledgerAccountBalance.calculateBalance(davc);

                            if (ledgerJournalType != LedgerJournalType::ReportingCurrencyAdjustment)
                            {
                                openingBalance = _ledgerAccountBalance.getAccountingCurrencyBalance();
                            }
                            reportingOpeningBalance = _ledgerAccountBalance.getReportingCurrencyBalance();
                        }
                    }
                    break;

                case LedgerJournalACType::Cust:
                    openingBalance = CustTrans::balanceMST(_acountNumber);
                    reportingOpeningBalance = CustTrans::balanceReportingCurrency(_acountNumber);
                    break;

                case LedgerJournalACType::Vend:
                    openingBalance = VendTrans::balanceMST(_acountNumber);
                    reportingOpeningBalance = VendTrans::balanceReportingCurrency(_acountNumber);
                    break;

                case LedgerJournalACType::Bank:
                    openingBalance = BankAccountTrans::balanceMST(_acountNumber);
                    reportingOpeningBalance = BankAccountTrans::balanceReportingCurrency(_acountNumber);
                    break;

                // <GEEU>
                case LedgerJournalACType::RCash:
                    openingBalance = RCashTable::balanceMst(_acountNumber, maxDate());
                    break;
                // </GEEU>

                case LedgerJournalACType::FixedAssets:
                    AssetBookId assetBookId = _assetBookId;

                    if (!_assetBookId)
                    {
                        assetBookId = AssetBook::getTopDefaultBookIdForAssetId(_acountNumber, ledgerJournalAccountMovementTmp.CompanyId, _ledgerJournalTable.CurrentOperationsTax);
                    }

                    ledgerJournalAccountMovementTmp.MainAccount = _acountNumber;
                    ledgerJournalAccountMovementTmp.FullyQualifiedAccount = strFmt("@SYS311964", _acountNumber, _assetBookId);

                    AssetSumCalc assetSumCalc_Trans = AssetSumCalc_Trans::newAssetYear(_acountNumber, assetBookId);
                    openingBalance = assetSumCalc_Trans.netBookValue();

                    AssetSumCalc assetSumCalc_TransReporting = AssetSumCalc_Trans::newAssetYearByCurrency(
                        _acountNumber, assetBookId, DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), AssetYear::All, AssetSumCalcType::Reporting);

                    reportingOpeningBalance = assetSumCalc_TransReporting.netBookValue();

                    break;

                default :
                    openingBalance = 0;
            }
        }

        if (ledgerJournalType == LedgerJournalType::ReportingCurrencyAdjustment)
        {
            debits = 0;
            credits = 0;
        }
        else
        {
            debits = _ledgerJournalTable.journalTotalAccountDebitMST(
                _ledgerDimension,
                ledgerJournalAccountMovementTmp.LedgerJournalACType,
                ledgerJournalAccountMovementTmp.CompanyId,
                _useMainAccountOnly,
                _mainAccount.RecID);

            if (ledgerJournalAccountMovementTmp.LedgerJournalACType == LedgerJournalACType::FixedAssets)
            {
                credits = this.calculateTotalFixedAssetCreditMST(_ledgerJournalTable, _ledgerDimension, _assetBookId);
            }
            else
            {
                credits = _ledgerJournalTable.journalTotalAccountCreditMST(
                    _ledgerDimension,
                    ledgerJournalAccountMovementTmp.LedgerJournalACType,
                    ledgerJournalAccountMovementTmp.CompanyId,
                    _useMainAccountOnly,
                    _mainAccount.RecID);
            }
        }

        reportingDebits = _ledgerJournalTable.journalTotalAccountDebitReportingCurrency(
            _ledgerDimension,
            ledgerJournalAccountMovementTmp.LedgerJournalACType,
            ledgerJournalAccountMovementTmp.CompanyId,
            _useMainAccountOnly,
            _mainAccount.RecID);

        if (ledgerJournalAccountMovementTmp.LedgerJournalACType == LedgerJournalACType::FixedAssets)
        {
            reportingCredits = this.calculateTotalFixedAssetCreditReportingCurrency(_ledgerJournalTable, _ledgerDimension, _assetBookId);
        }
        else
        {
            reportingCredits = _ledgerJournalTable.journalTotalAccountCreditReportingCurrency(
                _ledgerDimension,
                ledgerJournalAccountMovementTmp.LedgerJournalACType,
                ledgerJournalAccountMovementTmp.CompanyId,
                _useMainAccountOnly,
                _mainAccount.RecID);
        }

        if (_ledgerJournalTable.Posted)
        {
            openingBalance = openingBalance - debits + credits;
            reportingOpeningBalance = reportingOpeningBalance - reportingDebits + reportingCredits;
        }

        ledgerJournalAccountMovementTmp.Credits = credits;
        ledgerJournalAccountMovementTmp.Debits = debits;
        ledgerJournalAccountMovementTmp.OpeningBalance = openingBalance;
        ledgerJournalAccountMovementTmp.EndingBalance = openingBalance + debits - credits;
        ledgerJournalAccountMovementTmp.ReportingCredits = reportingCredits;
        ledgerJournalAccountMovementTmp.ReportingDebits = reportingDebits;
        ledgerJournalAccountMovementTmp.ReportingOpeningBalance = reportingOpeningBalance;
        ledgerJournalAccountMovementTmp.ReportingEndingBalance = reportingOpeningBalance + reportingDebits - reportingCredits;
        ledgerJournalAccountMovementTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalFixedAssetCreditMST</Name>
				<Source><![CDATA[
    private AmountMST calculateTotalFixedAssetCreditMST(
        LedgerJournalTable _ledgerJournalTable,
        LedgerDimensionAccount _ledgerDimension,
        AssetBookId _assetBookId = '')
    {
        LedgerJournalTrans ledgerJournalTransFieldList;
        LedgerJournalTrans_Asset ledgerJournalTransAssetFieldList;
        AmountMST credits;

        while select LedgerDimension, Company, OffsetLedgerDimension, OffsetCompany, AmountCurDebit, AmountCurCredit,
                 CurrencyCode, TransDate, Triangulation, ExchRate, ExchRateSecond, JournalNum
            from ledgerJournalTransFieldList
            join ledgerJournalTransAssetFieldList
                where
                    ledgerJournalTransFieldList.RecId == ledgerJournalTransAssetFieldList.RefRecId
                    && ledgerJournalTransAssetFieldList.BookId == _assetBookId
                    && ledgerJournalTransFieldList.JournalNum == _ledgerJournalTable.JournalNum
                    && ((ledgerJournalTransFieldList.LedgerDimension == _ledgerDimension
                    && ledgerJournalTransFieldList.AccountType == LedgerJournalACType::FixedAssets
                    && ledgerJournalTransFieldList.AmountCurCredit != 0)
                    || (ledgerJournalTransFieldList.OffsetLedgerDimension == _ledgerDimension
                    && ledgerJournalTransFieldList.OffsetAccountType == LedgerJournalACType::FixedAssets
                    && ledgerJournalTransFieldList.AmountCurDebit != 0))

        {
            if (ledgerJournalTransFieldList.LedgerDimension == _ledgerDimension
                    && ledgerJournalTransFieldList.Company == ledgerJournalAccountMovementTmp.CompanyId)
            {
                credits += ledgerJournalTransFieldList.calcCreditMST();
            }

            if (ledgerJournalTransFieldList.OffsetLedgerDimension == _ledgerDimension
                    && (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)) == false
                    || ledgerJournalTransFieldList.OffsetCompany == ledgerJournalAccountMovementTmp.CompanyId))
            {
                credits += ledgerJournalTransFieldList.calcDebitMST();
            }
        }
        return credits;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalFixedAssetCreditReportingCurrency</Name>
				<Source><![CDATA[
    private AmountMST calculateTotalFixedAssetCreditReportingCurrency(
        LedgerJournalTable _ledgerJournalTable,
        LedgerDimensionAccount _ledgerDimension,
        AssetBookId _assetBookId = '')
    {
        LedgerJournalTrans ledgerJournalTransFieldList;
        LedgerJournalTrans_Asset ledgerJournalTransAssetFieldList;
        AmountMST reportingCredits;

        while select LedgerDimension, Company, OffsetLedgerDimension, OffsetCompany, AmountCurDebit, AmountCurCredit,
                 CurrencyCode, TransDate, Triangulation, ExchRate, ExchRateSecond, AccountType, JournalNum
            from ledgerJournalTransFieldList
            join ledgerJournalTransAssetFieldList
                where
                    ledgerJournalTransFieldList.RecId == ledgerJournalTransAssetFieldList.RefRecId
                    && ledgerJournalTransAssetFieldList.BookId == _assetBookId
                    && ledgerJournalTransFieldList.JournalNum == _ledgerJournalTable.JournalNum
                    && ((ledgerJournalTransFieldList.LedgerDimension == _ledgerDimension
                    && ledgerJournalTransFieldList.AccountType == LedgerJournalACType::FixedAssets
                    && ledgerJournalTransFieldList.AmountCurCredit != 0)
                    || (ledgerJournalTransFieldList.OffsetLedgerDimension == _ledgerDimension
                    && ledgerJournalTransFieldList.OffsetAccountType == LedgerJournalACType::FixedAssets
                    && ledgerJournalTransFieldList.AmountCurDebit != 0))

        {
            if (ledgerJournalTransFieldList.LedgerDimension == _ledgerDimension
                    && ledgerJournalTransFieldList.Company == ledgerJournalAccountMovementTmp.CompanyId)
            {
                reportingCredits += ledgerJournalTransFieldList.calcCreditReportingCurrency();
            }

            if (ledgerJournalTransFieldList.OffsetLedgerDimension == _ledgerDimension
                    && (isConfigurationkeyEnabled(configurationKeyNum(LedgerAdvIntercompanyAccounting)) == false
                    || ledgerJournalTransFieldList.OffsetCompany == ledgerJournalAccountMovementTmp.CompanyId))
            {
                reportingCredits += ledgerJournalTransFieldList.calcDebitReportingCurrency();
            }
        }
        return reportingCredits;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>