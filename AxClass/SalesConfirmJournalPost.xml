<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesConfirmJournalPost</Name>
	<SourceCode>
		<Declaration><![CDATA[
[DocumentStatusFactoryAttribute(DocumentStatus::Confirmation)]
class SalesConfirmJournalPost
extends FormletterJournalPost
{
    SalesParmTable      salesParmTable;
    CustConfirmJour     custConfirmJour;
    CustConfirmTrans    custConfirmTrans;
    SalesLine           salesLine;
    SalesTable          salesTable;
    SalesTotals         salesTotals;
    private SalesInstrumentationLogger instrumentationLogger;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addToInventReportDimHistory</Name>
				<Source><![CDATA[
    protected void addToInventReportDimHistory(Common _custConfirmTrans)
    {
        CustConfirmTrans        localCustConfirmTrans = _custConfirmTrans as CustConfirmTrans;
        InventTransOrigin       inventTransOrigin;
        InventTrans             inventTrans;
        InventQty               qtyRemain           = localCustConfirmTrans.InventQty;

        if (salesLine.isStocked())
        {
            InventTable                  inventTable = InventTable::find(localCustConfirmTrans.ItemId);
            WHSReservationHierarchyLevel reservationFlexibleLevel = WHSReservationHierarchyElementPolicyProvider::singleton().getLowestLevelWithEnabledReservationOnDemandOrder(inventTable.whsReservationHierarchy());

            if (reservationFlexibleLevel)
            {
                WHSOrderCommittedReservationAllView orderCommittedReservationAllView;
                InventDim                           inventDim;
                InventDim                           orderCommittedReservationInventDim;
                InventQty                           inventTransQtyRemain;
                InventDimId                         prevInventTransInventDimId;
                RecId                               prevInventTransRecId;
                InventDimParm                       inventDimParmReservationFlexible = WHSReservationHierarchyInventDimUtil::initInventDimParmAboveAndIncludingLevel(inventTable, reservationFlexibleLevel);

                while select TableId from inventTransOrigin
                where inventTransOrigin.InventTransId       == localCustConfirmTrans.InventTransId
                   && inventTransOrigin.ReferenceCategory   == InventTransType::Sales
                join InventDimId, Qty, RecId from inventTrans
                order by StatusIssue, InventDimId
                where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                  && inventTrans.StatusReceipt              == StatusReceipt::None
                  && (inventTrans.StatusIssue               == StatusIssue::OnOrder
                  ||  inventTrans.StatusIssue               == StatusIssue::ReservOrdered
                  ||  inventTrans.StatusIssue               == StatusIssue::ReservPhysical)
                outer join InventDimId, Qty from orderCommittedReservationAllView
                where orderCommittedReservationAllView.CommittingOriginInventTransId == localCustConfirmTrans.InventTransId
                join TableId from orderCommittedReservationInventDim
                    where orderCommittedReservationInventDim.inventDimId == orderCommittedReservationAllView.InventDimId
                #InventDimExistsJoinAllowBlank(inventTrans.InventDimId, inventDim, orderCommittedReservationInventDim, inventDimParmReservationFlexible, inventDimParmReservationFlexible)
                {
                    if (!qtyRemain)
                    {
                        break;
                    }

                    if (prevInventTransRecId != inventTrans.RecId)
                    {
                        if (inventTransQtyRemain)
                        {
                            qtyRemain = this.createInventReportDimHistory(localCustConfirmTrans.InventTransId, prevInventTransInventDimId, localCustConfirmTrans.ConfirmId, inventTransQtyRemain, qtyRemain);

                            if (!qtyRemain)
                            {
                                break;
                            }
                        }

                        inventTransQtyRemain       = inventTrans.Qty;
                        prevInventTransRecId       = inventTrans.RecId;
                        prevInventTransInventDimId = inventTrans.inventDimId;
                    }

                    if (orderCommittedReservationAllView)
                    {
                        if (inventTransQtyRemain)
                        {
                            qtyRemain = this.createInventReportDimHistory(localCustConfirmTrans.InventTransId, orderCommittedReservationAllView.InventDimId, localCustConfirmTrans.ConfirmId, -orderCommittedReservationAllView.Qty, qtyRemain);
                            inventTransQtyRemain = abs(inventTransQtyRemain) > abs(orderCommittedReservationAllView.Qty) ? inventTransQtyRemain + orderCommittedReservationAllView.Qty : 0;
                        }
                    }
                    else
                    {
                        qtyRemain = this.createInventReportDimHistory(localCustConfirmTrans.InventTransId, inventTrans.InventDimId, localCustConfirmTrans.ConfirmId, inventTrans.Qty, qtyRemain);
                        inventTransQtyRemain = 0;
                    }
                }

                if (qtyRemain && inventTransQtyRemain)
                {
                    this.createInventReportDimHistory(localCustConfirmTrans.InventTransId, prevInventTransInventDimId, localCustConfirmTrans.ConfirmId, inventTransQtyRemain, qtyRemain);
                }
            }
            else
            {
                while select TableId from inventTransOrigin
                    where inventTransOrigin.InventTransId       == localCustConfirmTrans.InventTransId
                       && inventTransOrigin.ReferenceCategory   == InventTransType::Sales
                    join InventDimId, Qty from inventTrans
                    order by StatusIssue, InventDimId
                    where inventTrans.InventTransOrigin         == inventTransOrigin.RecId
                      && inventTrans.StatusReceipt              == StatusReceipt::None
                      && (inventTrans.StatusIssue               == StatusIssue::OnOrder
                      ||  inventTrans.StatusIssue               == StatusIssue::ReservOrdered
                      ||  inventTrans.StatusIssue               == StatusIssue::ReservPhysical)
                {
                    if (qtyRemain)
                    {
                        qtyRemain = this.createInventReportDimHistory(localCustConfirmTrans.InventTransId, inventTrans.InventDimId,localCustConfirmTrans.ConfirmId, inventTrans.Qty, qtyRemain);
                    }
                    else
                        break;
                }
            }
        }
        else
        {
            this.createInventReportDimHistory(localCustConfirmTrans.InventTransId,
                                              localCustConfirmTrans.InventDimId,
                                              localCustConfirmTrans.ConfirmId,
                                              localCustConfirmTrans.Qty,
                                              localCustConfirmTrans.Qty );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canPostTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax can be posted.
    /// </summary>
    /// <returns>
    /// true if taxes can be posted; otherwise, false.
    /// </returns>
    protected boolean canPostTax()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportData</Name>
				<Source><![CDATA[
    public boolean createReportData(FormletterJournalPrint _formletterJournalPrint)
    {
        SRSTmpDataStore      srsTmpDataStore;
        SalesConfirmDP       salesConfirmDP = SalesConfirmDP::construct();
        SalesConfirmContract salesConfirmContract = new SalesConfirmContract();

        salesConfirmContract.parmRecordId(formletterJournal.RecId);

        if (_formletterJournalPrint)
        {
            // Pack the class and insert into the temporary store.
            srsTmpDataStore.Value = _formletterJournalPrint.pack();
            srsTmpDataStore.insert();
            salesConfirmContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
        }

        salesConfirmDP.createData(salesConfirmContract);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the type of document.
    /// </summary>
    /// <returns>
    /// A <c>DocumentStatus</c> enumeration value.
    /// </returns>
    protected DocumentStatus  documentStatus()
    {
        return DocumentStatus::Confirmation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formletterType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the value of the <c>FormletterType</c> enumeration.
    /// </summary>
    /// <returns>
    /// A <c>FormletterType</c> enumeration value.
    /// </returns>
    protected FormletterType formletterType()
    {
        return FormletterType::Sales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a voucher number.
    /// </summary>
    /// <returns>
    /// A voucher number.
    /// </returns>
    protected Num getVoucher()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class.
    /// </summary>
    public void init()
    {
        super();
        salesTable  = salesParmTable.salesTable();
        if (this.parmTotals())
        {
            salesTotals = this.parmTotals() as SalesTotals;
        }
        else
        {
            salesTotals = SalesTotals::construct(salesParmTable, any2Enum(this.parmSpecQty()), this.parmSumBy(), custConfirmJour.ParmId, this.parmSumOrderId(), this.documentStatus());
        }
        this.tax(salesTotals.tax());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRelatedLineTables</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the records that are related to the current journal line.
    /// </summary>
    protected void initRelatedLineTables()
    {
        super();

        salesLine = custConfirmTrans.salesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventReportDimHistoryLogType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory report dimension history type.
    /// </summary>
    /// <returns>
    /// An <c>InventReportDimHistoryLogType</c> enumeration value.
    /// </returns>
    protected InventReportDimHistoryLogType inventReportDimHistoryLogType()
    {
        return InventReportDimHistoryLogType::SalesConfirm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets or sets the current journal line record.
    /// </summary>
    /// <param name="_journalLine">
    /// A journal line record.
    /// </param>
    /// <returns>
    /// A journal line record.
    /// </returns>
    protected Common journalLine(Common _journalLine = custConfirmTrans)
    {
        custConfirmTrans = _journalLine as CustConfirmTrans;
        return custConfirmTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>journalLineTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the table ID for the journal line table.
    /// </summary>
    /// <returns>
    /// A table ID.
    /// </returns>
    protected TableId journalLineTableId()
    {
        return tableNum(CustConfirmTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newJournalList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a record sorted list.
    /// </summary>
    /// <returns>
    /// The constructed record sorted list.
    /// </returns>
    public RecordSortedList  newJournalList()
    {
        RecordSortedList recordSortedList = new RecordSortedList(this.parmJournalTable().TableId);

        return recordSortedList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmJournalTable</Name>
				<Source><![CDATA[
    public Common parmJournalTable(Common _journalTable = custConfirmJour)
    {
        custConfirmJour = _journalTable as CustConfirmJour;

        return custConfirmJour;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParmTable</Name>
				<Source><![CDATA[
    public Common parmParmTable(Common _parmTable = salesParmTable)
    {
        salesParmTable = _parmTable as SalesParmTable;
        return salesParmTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnJour</Name>
				<Source><![CDATA[
    protected void postMarkupOnJour(SalesTable _salesTableMarkup)
    {
        if (salesTable.mcrIsCallCenter())
        {
            markup.mcrPostJournal(1,
                             salesTotals.getMarkupTableSourceValue(_salesTableMarkup),
                             _salesTableMarkup,
                             _salesTableMarkup.DefaultDimension,
                             //  Pass along custom parameters so misc charges will be pro-rated on confirmation.
                             custConfirmJour,
                             0,
                             salesTotals.mcrTotalOrderBalanceAbsoluteValue(_salesTableMarkup.RecId),
                             salesParmTable.ParmId,
                             salesParmTable.TableRefId);
        }
        else
        {
            markup.postJournal(1,
                                salesTotals.getMarkupTableSourceValue(_salesTableMarkup),
                                _salesTableMarkup,
                                _salesTableMarkup.DefaultDimension,
                                custConfirmJour);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupOnTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the markup for the journal lines.
    /// </summary>
    protected void postMarkupOnTrans()
    {
        markup.postJournal(custConfirmTrans.Qty,
                           custConfirmTrans.LineAmount,
                           salesLine,
                           salesLine.DefaultDimension,
                           custConfirmTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postMarkupTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Posts the markup for the journal header.
    /// </summary>
    protected void postMarkupTable()
    {
        QueryRun queryRun = new QueryRun(salesParmTable.querySalesTable());
        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(SalesTable)))
            {
                SalesTable salesTableMarkup = queryRun.get(tableNum(SalesTable));
                this.postMarkupOnJour(salesTableMarkup);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnProforma</Name>
				<Source><![CDATA[
    protected boolean postTaxOnProforma()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxOnUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether tax should be posted on the update.
    /// </summary>
    /// <returns>
    /// true if tax should be posted on update; otherwise, false.
    /// </returns>
    protected boolean postTaxOnUpdate()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source line record for the current journal line.
    /// </summary>
    /// <returns>
    /// A source line record.
    /// </returns>
    protected Common sourceLine()
    {
        return salesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the source header record for the journal header.
    /// </summary>
    /// <returns>
    /// A source header record.
    /// </returns>
    protected Common sourceTable()
    {
        return salesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tradeCalcTax</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>TradeCalcTax</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TradeCalcTax</c> class.
    /// </returns>
    protected Object tradeCalcTax()
    {
        return SalesCalcTax::construct(custConfirmJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogTxt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets an instance of the <c>TransTxt</c> class.
    /// </summary>
    /// <returns>
    /// An instance of the <c>TransTxt</c> class.
    /// </returns>
    protected TransTxt  transactionLogTxt()
    {
        return "@SYS9032";
    }

]]></Source>
			</Method>
			<Method>
				<Name>transactionLogType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction log type.
    /// </summary>
    /// <returns>
    /// A <c>TransactionLogType</c> enumeration value.
    /// </returns>
    protected TransactionLogType  transactionLogType()
    {
        return TransactionLogType::SalesConfirm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the transaction date.
    /// </summary>
    /// <returns>
    /// A transaction date.
    /// </returns>
    protected TransDate updateDate()
    {
        return custConfirmJour.ConfirmDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the journal line.
    /// </summary>
    protected void updateJournalLine()
    {
        if (custConfirmJour.SalesId != custConfirmTrans.OrigSalesId)
        {
            this.updateSumSalesId();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSourceTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the source table for the journal header.
    /// </summary>
    protected void updateSourceTable()
    {
        SetEnumerator   se = ordersPosted.getEnumerator();

        ttsbegin;
        while (se.moveNext())
        {
            salesTable = SalesTable::find(se.current(),true);
            if (salesTable)
            {
                this.updateSalesTable();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Updates the sales table for the journal header.
    /// </summary>
    protected void updateSalesTable()
    {
        salesTable.updateDocumentStatus(this.documentStatus());
        salesTable.updateBackStatus();
        salesTable.updateSalesType();
        salesTable.updateDeadline(custConfirmJour.Deadline);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSumSalesId</Name>
				<Source><![CDATA[
    protected void  updateSumSalesId()
    {
        ttsbegin;

        SalesTable localSalesTable = custConfirmTrans.origSalesTable(true);
        localSalesTable.updateBackStatus();
        
        localSalesTable.reread();

        localSalesTable.write();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SalesConfirmJournalPost construct()
    {
        return new SalesConfirmJournalPost();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxableDocumentDescriptor</Name>
				<Source><![CDATA[
    public TaxableDocumentDescriptor parmTaxableDocumentDescriptor()
    {
        return TaxableDocumentDescriptorFactory::getTaxableDocumentDescriptor(custConfirmJour);
    }

]]></Source>
			</Method>
			<Method>
				<Name>postTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Post current tax doucment.
    /// </summary>
    // <GTE>
    public void postTaxDocument(boolean _checkLedgerVoucher = true)
    {
        super(false);
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    // </GTE>
    public void run()
    {
        using (var activityContext = instrumentationLogger.salesFormLetterActivities().confirmSingleOrder())
        {
            super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSingleLine</Name>
				<Source><![CDATA[
    protected void postSingleLine(boolean _countryRegion_RU,
                                  boolean _hasQualityOrder,
                                  boolean _isExciseEnableIN,
                                  boolean _isVATEnableIN,
                                  boolean _isCustomsEnableIN,
                                  boolean _isConfigurationkeyRetailEnabled)
    {
        using (var activityContext = instrumentationLogger.salesFormLetterActivities().confirmSingleLine())
        {
            super(_countryRegion_RU,
                  _hasQualityOrder,
                  _isExciseEnableIN,
                  _isVATEnableIN,
                  _isCustomsEnableIN,
                  _isConfigurationkeyRetailEnabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
        instrumentationLogger = SalesInstrumentationLogger::createLogger(classStr(SalesConfirmJournalPost));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>