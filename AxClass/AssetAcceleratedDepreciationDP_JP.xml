<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetAcceleratedDepreciationDP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetAcceleratedDepreciationDP_JP</c> class is the data provider class for the <c>AssetAcceleratedDepreciation_JP</c> SSRS report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetAcceleratedDepreciationContract_JP)),
    SRSReportQueryAttribute(queryStr(AssetAcceleratedDepreciation_JP))
]
class AssetAcceleratedDepreciationDP_JP extends SrsReportDataProviderPreProcessTempDB
{
    AssetAcceleratedDepreciationTmp_JP              assetAcceleratedDepreciationTmp;
    AssetDocumentAcceleratedDepTable_JP             assetDocumentAcceleratedDepTable;

    Addressing                                      legalRepresentativeAddress;

    TransDate                                       reportStartDate;
    TransDate                                       reportEndDate;
    TransDate                                       reportPrintingDate;

    private const String15 space = ' ';
    private const String15 parameterName = 'gg';
    private const String15 parameterReportDate = 'yy\'年\'MM\'月\'dd\'日\'';

    #AssetDepCalculation_JP
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getassetAcceleratedDepreciationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetAcceleratedDepreciationTmp_JP</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetAcceleratedDepreciationTmp_JP</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetAcceleratedDepreciationTmp_JP))
    ]
    public AssetAcceleratedDepreciationTmp_JP getassetAcceleratedDepreciationTmp()
    {
        select assetAcceleratedDepreciationTmp;
        return assetAcceleratedDepreciationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetAcceleratedDepreciationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into <c>AssetAcceleratedDepreciationTmp_JP</c> table.
    /// </summary>
    public void insertAssetAcceleratedDepreciationTmp()
    {
        CompanyInfo                         companyInfo   = CompanyInfo::find();
        LogisticsPostalAddress              postalAddress = companyInfo.postalAddress();
        LogisticsPostalAddress              assetLocationAddress;
        AssetAcceleratedDepGroup_JP         assetAcceleratedDepGroup;

        assetAcceleratedDepGroup = AssetAcceleratedDepGroup_JP::find(assetDocumentAcceleratedDepTable.AssetAcceleratedDepGroup_JP);

        assetLocationAddress = LogisticsPostalAddress::findByLocation(AssetLocation::find(assetDocumentAcceleratedDepTable.AssetLocation).LogisticsLocation);

        reportStartDate                     = assetDocumentAcceleratedDepTable.ValidFrom;
        reportEndDate                       = assetDocumentAcceleratedDepTable.ValidTo;
        reportPrintingDate                  = assetDocumentAcceleratedDepTable.ReportPrintDate;
        legalRepresentativeAddress          = assetDocumentAcceleratedDepTable.LegalRepresentativeAddress;

        assetAcceleratedDepreciationTmp.KanaCompanyName                 = companyInfo.PhoneticName;
        assetAcceleratedDepreciationTmp.CompanyName                     = companyInfo.Name;
        assetAcceleratedDepreciationTmp.PlaceForTaxPayment              = postalAddress.City + space + postalAddress.Street;
        assetAcceleratedDepreciationTmp.KanaLegalRepresentative         = assetDocumentAcceleratedDepTable.LegalRepresentativeName;
        assetAcceleratedDepreciationTmp.LegalRepresentative             = companyInfo.LegalRepresentative_JP;
        assetAcceleratedDepreciationTmp.BusinessItem                    = companyInfo.BusinessItem_JP;
        assetAcceleratedDepreciationTmp.CompanyPhone                    = companyInfo.phone();
        assetAcceleratedDepreciationTmp.CalculationMethod               = assetDocumentAcceleratedDepTable.CalculationMethod;

        if (currentUserLanguage() == #LanguageJA)
        {
            //insert the value for the fiscal year start date
            assetAcceleratedDepreciationTmp.StartFiscalDate = subStr(JapaneseDateTimeHelper::date2str(reportStartDate, #ParameterName), 0, 1)
                + JapaneseDateTimeHelper::date2str(reportStartDate, parameterReportDate);

            //insert the value for the fiscal year end date
            assetAcceleratedDepreciationTmp.EndFiscalDate   = subStr(JapaneseDateTimeHelper::date2str(reportEndDate, #ParameterName), 0, 1)
                + JapaneseDateTimeHelper::date2str(reportEndDate, parameterReportDate);

            //insert the value for the fiscal year print date
            assetAcceleratedDepreciationTmp.PrintingFiscalDate = subStr(JapaneseDateTimeHelper::date2str(reportPrintingDate, #ParameterName), 0, 1)
                + JapaneseDateTimeHelper::date2str(reportPrintingDate, parameterReportDate);
        }
        else
        {
            //insert the value for the fiscal year start date
            assetAcceleratedDepreciationTmp.StartFiscalDate = date2StrUsr(reportStartDate, DateFlags::FormatAll);

            //insert the value for the fiscal year end date
            assetAcceleratedDepreciationTmp.EndFiscalDate   = date2StrUsr(reportEndDate, DateFlags::FormatAll);

            //insert the value for the fiscal year print date
            assetAcceleratedDepreciationTmp.PrintingFiscalDate   = date2StrUsr(reportPrintingDate, DateFlags::FormatAll);
        }

        assetAcceleratedDepreciationTmp.ReasonForExceedingOperation     = assetDocumentAcceleratedDepTable.ReasonComment;
        assetAcceleratedDepreciationTmp.NameAndSealOfCertificateTaxAcc  = assetDocumentAcceleratedDepTable.AccountantName;
        assetAcceleratedDepreciationTmp.NameOfProofingDocumentForExcOpe = assetDocumentAcceleratedDepTable.ReferenceDocument;
        assetAcceleratedDepreciationTmp.City                            = assetDocumentAcceleratedDepTable.AssetLocation;

        assetAcceleratedDepreciationTmp.EquipmentType                   = assetAcceleratedDepGroup.EquipmentTypeId;
        assetAcceleratedDepreciationTmp.Datails                         = assetDocumentAcceleratedDepTable.Description;
        assetAcceleratedDepreciationTmp.Location                        = assetLocationAddress.City + space + assetLocationAddress.Street;

        assetAcceleratedDepreciationTmp.OperationDaysInThisFiscalYear   = assetDocumentAcceleratedDepTable.OperationDaysPerYear;
        assetAcceleratedDepreciationTmp.ExceedingOperationHourPerDay    = assetDocumentAcceleratedDepTable.AverageOveruseHours;
        assetAcceleratedDepreciationTmp.TotalExceedingOperationHoursInThisYear = assetDocumentAcceleratedDepTable.TotalOveruseHours;
        assetAcceleratedDepreciationTmp.StandardOperationHourPerDay     = assetAcceleratedDepGroup.AverageHours;
        assetAcceleratedDepreciationTmp.AcceleratedDepreciationRate     = assetDocumentAcceleratedDepTable.OveruseRate;
        assetAcceleratedDepreciationTmp.LegalRepresentativeAddress      = legalRepresentativeAddress ? legalRepresentativeAddress : postalAddress.City + space + postalAddress.Street;

        assetAcceleratedDepreciationTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the specified values.
    /// </summary>
    public void processReport()
    {
        Query                                   query;
        QueryRun                                queryRun;
        RecId                                   accDepDocTableRecId;
        AssetAcceleratedDepreciationContract_JP dataContract;

        dataContract        = this.parmDataContract() as AssetAcceleratedDepreciationContract_JP;
        accDepDocTableRecId = dataContract.parmAccDepDocTableRecId();

        query = this.parmQuery();

        if (accDepDocTableRecId)
        {
            select firstonly assetDocumentAcceleratedDepTable
                where assetDocumentAcceleratedDepTable.RecId == accDepDocTableRecId;
            this.insertAssetAcceleratedDepreciationTmp();
        }
        else
        {
            queryRun = new QueryRun(query);
            while (queryRun.next())
            {
                assetDocumentAcceleratedDepTable   = queryRun.get(tableNum(AssetDocumentAcceleratedDepTable_JP));
                this.insertAssetAcceleratedDepreciationTmp();
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>