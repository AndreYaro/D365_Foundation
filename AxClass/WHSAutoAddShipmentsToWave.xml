<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSAutoAddShipmentsToWave</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSAutoAddShipmentsToWave extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    private Query query;
    private QueryRun queryRun;
    
    private container shipmentsForRewaving;
    private boolean  errorsFound;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WHSAutoAddShipmentsToWave construct()
    {
        return new WHSAutoAddShipmentsToWave();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@WAX:WHSAutoAddShipmentToWave";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        WHSAutoAddShipmentsToWave autoAddShipToWave = WHSAutoAddShipmentsToWave::construct();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(autoAddShipToWave))
        {
            if (autoAddShipToWave.prompt())
            {
                autoAddShipToWave.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
        super();

        queryRun = new QueryRun(this.buildQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQuery</Name>
				<Source><![CDATA[
    public Query buildQuery()
    {
        query = new Query();
       
        QueryBuildDataSource dsFailedShipmentsTable = query.addDataSource(tableNum(WHSWaveProcessingRemovedShipment));
        QueryBuildRange rewaveCountRange = dsFailedShipmentsTable.addRange(fieldNum(WHSWaveProcessingRemovedShipment, RewaveCount));
        rewaveCountRange.value(SysQuery::range(0,5));
        rewaveCountRange.status(RangeStatus::Locked);

        QueryBuildRange errorTypeRange =  dsFailedShipmentsTable.addRange(fieldNum(WHSWaveProcessingRemovedShipment, ErrorType));
        errorTypeRange.status(RangeStatus::Hidden);

        QueryBuildDataSource dsShipmentTable = dsFailedShipmentsTable.addDataSource(tableNum(WHSShipmentTable));
        dsShipmentTable.addLink(fieldNum(WHSWaveProcessingRemovedShipment, ShipmentId), fieldNum(WHSShipmentTable, ShipmentId));
        dsShipmentTable.joinMode(JoinMode::ExistsJoin);
        dsShipmentTable.relations(true);
        
        return query;

    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            using (WHSInstrumentationAddToWavePerformanceTask perfTask = WHSInstrumentationAddToWavePerformanceTask::newFromAction(classStr(WHSAutoAddShipmentsToWave)))
            {
                ttsbegin;
                
                System.Text.StringBuilder recIdOfRewavedShipments = new System.Text.StringBuilder();

                while (queryRun.next())
                {
                    WHSWaveProcessingRemovedShipment rowFailedShipment = queryRun.get(tableNum(WHSWaveProcessingRemovedShipment));
                    shipmentsForRewaving += rowFailedShipment.ShipmentId;
                    recIdOfRewavedShipments.Append(' ');
                    recIdOfRewavedShipments.Append(rowFailedShipment.RecId);
                }
                
                perfTask.setRewavedShipments(recIdOfRewavedShipments.toString());

                WHSWaveTable::buildWaveFromShipments(shipmentsForRewaving);

                this.removeWavedShipmentsFromFailedShipmentTable();
                
                ttscommit;

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeWavedShipmentsFromFailedShipmentTable</Name>
				<Source><![CDATA[
    private void removeWavedShipmentsFromFailedShipmentTable()
    {
        using (WHSInstrumentationAddToWavePerformanceTask perfTask = WHSInstrumentationAddToWavePerformanceTask::newFromAction(classStr(WHSAutoAddShipmentsToWave)))
        {
            System.Text.StringBuilder successfullyRewavedAndRemovedShipments = new System.Text.StringBuilder();
            
            for (int i = 1; i<= conLen(shipmentsForRewaving); i++)
            {
                WHSShipmentId shipmentId = conPeek(shipmentsForRewaving, i);

                WHSShipmentTable shipmentTable = WHSShipmentTable::find(shipmentId);
            
                if (shipmentTable && shipmentTable.shipmentStatus != WHSShipmentStatus::Open)
                {
                    successfullyRewavedAndRemovedShipments.Append(' ');
                    successfullyRewavedAndRemovedShipments.Append(shipmentTable.RecId);
                
                    this.deleteFromFailedShipmentTable(shipmentId);
                }
            }
            perfTask.setSuccessfullyRewavedShipments(successfullyRewavedAndRemovedShipments.ToString());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteFromFailedShipmentTable</Name>
				<Source><![CDATA[
    private void deleteFromFailedShipmentTable(WHSShipmentId _rewavedFailedShipment)
    {
        WHSWaveProcessingRemovedShipment removedShipments;

        delete_from removedShipments
            where removedShipments.ShipmentId == _rewavedFailedShipment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    public boolean showQuerySelectButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean     ret = true;
        container   packedQuery;

        [packedQuery] = _packedClass;
        queryRun = packedQuery ? new QueryRun(packedQuery) : null;
        ret  = queryRun != null;
        
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WHSAutoAddShipmentsToWave));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSAutoAddShipmentsToWave);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>