<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rAssetAssessedTaxDeclaration</Name>
	<SourceCode>
		<Declaration><![CDATA[
#define.Section3("@GLS117049")
#define.Section2Type1("@GLS117050")
#define.Section2Type2("@GLS117051")
#define.Section2Type3("@GLS117052")
#define.Section2Type4("@GLS117053")
#define.Section2Type5("@SYS4083146")
#define.Section2Type6("@SYP4881058")
#define.Value11(11)
class rAssetAssessedTaxDeclaration extends rAssetTaxDeclaration implements BatchRetryable
{
    RAssetTaxDeclarationLocation    taxDeclarationLocation;
    RTax25RegisterJournalTrans      assessedTaxJour, totalDeprJour;
    RAssetAmount                    taxPay;

    int                             rcoadCount;
    int                             rcoadPages;
    int                             okatoPerPage;
    str                             reorgCell;
    boolean                         isDetached;     // new data model of rTax25 register transactions

    #define.RCOAD(1)
    #define.BudgetRevenueCode(2)
    #define.SalesTaxCode(3)
    #define.Section(4)
    #define.AverageCost(5)
    #define.NonTaxableAvgCost(6)
    #define.DistributedPropertyShare(7)
    #define.TaxBase(8)
    #define.AllowanceRateReduction(9)
    #define.TaxAmount(10)
    #define.PriorAdvPaymentAmount(11)
    #define.AllowanceTaxReduction(12)
    #define.TaxReductionAmount(13)
    #define.OutsideAmount(14)
    #define.Factor(15)
    #define.CadastralValue(16)
    #define.NonTaxableCadastralValue(17)
    #define.MovablesValue(18)
    #define.CadastralNum(19)
    #define.RoomCadastralNum(20)
    #define.AllowanceTaxExemption(21)

    #define.CurrentVersion(6)
    #localmacro.CurrentList
        employeeId,
        taxDeclarationLocation,
        reorganization,
        exportToER,
        reorganizationCode,
        reorganizationINN,
        reorganizationRRC
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public Description caption()
    {
        return RAssetAssessedTaxDeclaration::description();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkRegisterTrans</Name>
				<Source><![CDATA[
    private boolean checkRegisterTrans(RefTableId  _refTableId,
                                       RefRecId    _refRecId,
                                       VendAccount _lastVendAccount)
    {
        Branches_RU branch;
        RAssetLocationId location;
    
        if (taxDeclarationLocation == RAssetTaxDeclarationLocation::DetachedDepartment ||
            taxDeclarationLocation == RAssetTaxDeclarationLocation::ImmovableProperty)
        {
            if (_refTableId == tableNum(RAssetTable))
            {
                location = RAssetTable::findrec(_refRecId).location(journalTable.EndDate);
                if (location)
                {
                    branch = Branches_RU::find(RAssetLocation::find(location).BranchId);
                    if (branch.Independent)
                    {
                        return branch.VendAccount == curVendAccount;
                    }
                }
            }
            else if (_refTableId == tablenum(RAssetTaxAllowance) || _refTableId == tablenum(Branches_RU))
            {
                return _lastVendAccount == curVendAccount;
            }
    
            return !curVendAccount;
        }
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>create1To5Sections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reproduces copies of the second, third and the fourth pages of template report.
    /// </summary>
    #define.AverageCost(5)
    protected void create1To5Sections()
    {
    
        RTax25RegisterLineNum64                 curHeaderLine;
        OKATO_RU                                okato;
        PaymentOrderBudgetReceiptClassCode_RU   kbk;
        RAssetAmount                            taxPayGroup;
        MapEnumerator                           me;
        Map                                     section1Map = new Map(Types::Container, Types::Real);
        RTax25Query                             regQuery = RTax25Query::newParameters(RTax25RegisterType::AmountDifference,
                                                                                      assessedTaxJour,
                                                                                      isDetached);
    
        boolean createSection2and3()
        {
            RAssetSection   section;
            container       sectionBody;
            boolean         sectionOut;
            VendAccount     lastVendAccount;
            RTax25Query     queryCalc = RTax25Query::newParameters(RTax25RegisterType::AmountDifference,
                                                                   assessedTaxJour,
                                                                   isDetached);
    
            if (((taxDeclarationLocation != RAssetTaxDeclarationLocation::DetachedDepartment &&
                  taxDeclarationLocation != RAssetTaxDeclarationLocation::ImmovableProperty) ||
                 !curVendAccount)                                                            &&
                regQuery.getField(#RCOAD)!= curRCOAD)
            {
                return false;
            }
    
            curRCOAD = regQuery.getField(#RCOAD);
    
            queryCalc.createRegQuery(0, -1);
            queryCalc.addRangeValue(fieldName2Id(queryCalc.getRecord().TableId, 'LineNumber'), queryRange(curHeaderLine + 1, regQuery.getRecord().LineNumber - 1));
    
            if (queryCalc.first())
            {
                do
                {
                    section = queryCalc.getField(#Section);
    
                    if (section == #Section3      ||
                        section == #Section2Type1 ||
                        section == #Section2Type2 ||
                        section == #Section2Type3 ||
                        section == #Section2Type4 ||
                        section == #Section2Type5 ||
                        section == #Section2Type6)
                    {
                        sectionBody = [queryCalc.getField(#RCOAD),
                                       queryCalc.getField(#BudgetRevenueCode),
                                       queryCalc.getField(#SalesTaxCode),
                                       section];
                    }
    
                    if (queryCalc.getRecord().RefTableId == tablenum(Branches_RU))
                    {
                        lastVendAccount = (select branches_RU
                                               where branches_RU.RecId == queryCalc.getRecord().RefRecId
                                                  && branches_RU.Independent).VendAccount;
                    }
    
                    if (sectionBody                                                       &&
                        (queryCalc.getRecord().RefTableId == tablenum(RAssetTaxAllowance) ||
                         queryCalc.getRecord().RefTableId == tablenum(RAssetTable)        ||
                        (section                          == #Section2Type3               &&
                         queryCalc.getField(#AverageCost))                                ||
                        (section                          == #Section2Type4               &&
                         queryCalc.getField(#AverageCost))                                ||
                        (section                          == #Section2Type5               &&
                         queryCalc.getField(#AverageCost)))                               ||
                        (queryCalc.getRecord().RefTableId == tablenum(Branches_RU)        &&
                         queryCalc.getField(#AverageCost))                                &&
                         this.checkRegisterTrans(queryCalc.getRecord().RefTableId, queryCalc.getRecord().RefRecId, lastVendAccount))
                    {
                        totalPages++;
                        sectionOut = true;
                        if (conpeek(sectionBody, #Section) == #Section3)
                        {
                            excelDocument.insertSheet(#Value4, totalPages + 2);
                            this.fillHeaderPage(totalPages + #Value3);
                            this.fillSection3(totalPages + #Value3, sectionBody, queryCalc.getRecord());
                        }
                        else
                        {
                            excelDocument.insertSheet(#Value3, #Value4 + rcoadPages - 1);
                            this.fillHeaderPage(#Value4 + rcoadPages);
                            this.fillSection2(#Value4 + rcoadPages, sectionBody, queryCalc.getRecord());
                        }
                    }
                }
                while (queryCalc.next());
            }
    
            return sectionOut;
        }
    
        regQuery.createRegQuery();
        regQuery.addRangeValue(fieldName2Id(regQuery.getRecord().TableId, 'BlockType'),
                               queryRangeConcat(queryValue(ReportBlockType::Footer), ReportBlockType::Header));
    
        if (regQuery.first())
        {
            do
            {
                if (regQuery.getRecord().BlockType == ReportBlockType::Header)
                {
                    curHeaderLine = regQuery.getRecord().LineNumber;
                    taxPay        = 0;
                }
                else
                {
                    if (createSection2and3())
                    {
                        okato = regQuery.getField(#RCOAD);
                        kbk   = regQuery.getField(#BudgetRevenueCode);
    
                        if (section1Map.exists([okato, kbk]))
                        {
                            taxPayGroup  = section1Map.lookup([okato, kbk]);
                        }
                        else
                        {
                            taxPayGroup = 0;
                        }
    
                        taxPayGroup += taxPay;
                        section1Map.insert([okato, kbk], taxPayGroup);
                    }
                }
            }
            while (regQuery.next());
        }
    
        me = section1Map.getEnumerator();
        while (me.moveNext())
        {
            taxPay = me.currentValue();
    
            if (rcoadCount > okatoPerPage)
            {
                rcoadCount = 1;
                totalPages++;
                rcoadPages++;
                excelDocument.insertSheet(#Value2, rcoadPages + 2);
                this.fillHeaderPage(rcoadPages + #Value3);
            }
    
            this.fillSection1(rcoadPages + #Value3, rcoadCount - 1, me.currentKey());
            rcoadCount++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeader</Name>
				<Source><![CDATA[
    private void fillHeader()
    {
        #localMacro.ReportPeriodCode
            [3, 21, 51, 6, 31, 52, 9, 33, 53, 12, 34, 50]
        #endMacro
    
        this.fillCellsLeft(1, #X,  10, int2str(correctionNumber));
    
        this.fillCellsLeft(1, #BV, 10, int2str(conPeek(#ReportPeriodCode, conFind(#ReportPeriodCode, mthOfYr(journalTable.EndDate)) + 1 + reorganization)));
    
        this.fillCellsLeft(1, #DE, 10, int2str(year(journalTable.EndDate)));
        this.fillCellsLeft(1, #DH, 12, int2str(taxDeclarationLocation + 200));
    
        this.fillCellsLeft(1, #AY, 12, gniCode);
    
        this.fillCellsLeft(1, #A,  14, subStr(companyName,   1,  40), 40);
        this.fillCellsLeft(1, #A,  16, subStr(companyName,  41,  80), 40);
        this.fillCellsLeft(1, #A,  18, subStr(companyName,  81, 120), 40);
        this.fillCellsLeft(1, #A,  20, subStr(companyName, 121, 180), 40);
    
        this.fillCellsLeft(1, #CG, 23, subStr(okdp, 1, 2), 2);
        this.fillCellsLeft(1, #CP, 23, subStr(okdp, 4, 2), 2);
        this.fillCellsLeft(1, #CY, 23, subStr(okdp, 7, 2), 2);
    
        if (reorganization)
        {
            this.fillCellsLeft(1, reorgCell, 25, int2str(reorganizationCode));
            this.fillCellsLeft(1, #BJ, 25, reorganizationINN);
            this.fillCellsLeft(1, #CP, 25, reorganizationRRC);
        }
    
        this.fillCellsLeft(1, #AK, 27, companyPhone);
    
        this.fillCellsLeft(1, #M,  35, taxPayerSing);
        this.fillCellsLeft(1, #A,  37, lastName);
        this.fillCellsLeft(1, #A,  40, firstName);
        this.fillCellsLeft(1, #A,  44, middleName);
    
        this.fillHeaderPage(1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillHeaderPage</Name>
				<Source><![CDATA[
    #define.INNColumn("AK")
    #define.INNRow(1)
    #define.KPPColumn("AK")
    #define.KPPRow(4)
    private void fillHeaderPage(int _sheet)
    {
        this.fillCellsLeft(_sheet, #INNColumn, #INNRow, inn, 12, "@GLS109332");
        this.fillCellsLeft(_sheet, #KPPColumn, #KPPRow, kpp, 9);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection1</Name>
				<Source><![CDATA[
    protected void fillSection1(int _sheet, int _index, container _values)
    {
        this.fillCellsLeft(_sheet, #BI, 11 + _index * 8, conPeek(_values, 1), 11, "@GLS101637");
        this.fillCellsLeft(_sheet, #BI, 13 + _index * 8, conPeek(_values, 2), 20);
    
        this.fillCellsLeft(_sheet, #BI, 15 + _index * 8, this.roundAmountStr(taxPay),  15, "@GLS101637");
        this.fillCellsLeft(_sheet, #BI, 17 + _index * 8, this.roundAmountStr(-taxPay), 15, "@GLS101637");
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection2</Name>
				<Source><![CDATA[
    #define.Value11(11)
    #define.Period(5)
    #define.NetBookValueTotal(6)
    #define.Immovable(8)
    #define.NonTaxable(9)
    protected void fillSection2(int                    _sheet,
                                container              _sectionBody,
                                RTax25RegisterTransMap _trans)        // AssessedTax
    {
        RTax25RegisterTransMap  totalDepr;
        RTax25RegisterLineNum64 lineNumBegin;
        int                     row;
        str                     s, tmp;
        RAssetAmount            pay;
        RAssetTaxAllowance      allowance;
        Common                  common  = _trans;
        RTax25Query             rQuery  = RTax25Query::newParameters(RTax25RegisterType::AmountDifference, totalDeprJour, isDetached);
        container               fieldId = RTax25RegType::construct(RTax25RegisterType::AmountDifference,
                                                                   RAssetAssessedTaxRegType::AssessedTax,
                                                                   isDetached).fieldId();
    
        anytype getField(RTax25FieldId   _fieldId)
        {
            if (isDetached)
            {
                return common.(conpeek(fieldId, _fieldId));
            }
            return conpeek(_trans.RegisterValues, _fieldId);
        }
    
        totalDepr = this.getRegTrans(conpeek(_sectionBody, #BudgetRevenueCode),
                                     RTax25RegCalc_AssessedTax::taxCode(conpeek(_sectionBody, #SalesTaxCode)),
                                     conpeek(_sectionBody, #Section),
                                     _trans.RefTableId, _trans.RefRecId);
    
        if (totalDepr.RecId)
        {
            if (_trans.RefTableId == tableNum(RAssetTable))
            {
                allowance = RAssetTaxAllowance::find(RAssetTable::findrec(_trans.RefRecId).TaxAllowanceRecId);
            }
            else if (_trans.RefTableId == tableNum(RAssetTaxAllowance))
            {
                select firstonly allowance
                    where allowance.RecId == _trans.RefRecId;
            }
    
            lineNumBegin = totalDepr.LineNumber;
    
            rQuery.createRegQuery(0, -1);
            rQuery.addRangeValue(fieldName2Id(rQuery.getRecord().TableId, 'LineNumber'), queryRange(lineNumBegin + 1, ''));
    
            if (rQuery.first())
            {
                do
                {
                    if (! rQuery.getField(#Period))
                    {
                        break;
                    }
    
                    this.fillCellsLeft(_sheet,
                                       #Y,
                                       18 + row * 2,
                                       this.roundAmountStr(rQuery.getField(#NetBookValueTotal)),
                                       15,
                                       "@GLS109332");
                    this.fillCellsLeft(_sheet,
                                       #BU,
                                       18 + row * 2,
                                       this.roundAmountStr(rQuery.getField(#NonTaxable)),
                                       15,
                                       "@GLS109332");
                    row++;
                    if (row == 13)
                    {
                        this.fillCellsLeft(_sheet, #Y, 18 + row * 2,
                                           this.roundAmountStr(rQuery.getField(#Immovable)),
                                           15, "@GLS109332");
                        if (allowance.RecId)
                            this.fillCellsLeft(_sheet, #BU, 18 + row * 2,
                                               this.roundAmountStr(rQuery.getField(#Immovable)),
                                               15, "@GLS109332");
                    }
                }
                while (rQuery.next());
            }
    
            excelDocument.insertValue(#AK11, substr(conpeek(_sectionBody, #Section), strlen(conpeek(_sectionBody, #Section)), 1), _sheet);
    
            this.fillCellsLeft(_sheet, #BU, #Value11, conpeek(_sectionBody, #RCOAD), 11, "@GLS109332");
            this.fillCellsLeft(_sheet, #BF, 49, this.roundAmountStr(getField(#AverageCost)), 15, "@GLS109332");
    
            this.fillCellsLeft(_sheet, #BF, 51, strUpr(allowance.TaxAllowanceId));
            if (allowance.ArticleNumber)
                this.fillCellsRight(_sheet, #CM, 51, allowance.ArticleNumber, 4, "@SYS24272");
            if (allowance.ArticleClause)
                this.fillCellsRight(_sheet, #CY, 51, allowance.ArticleClause, 4, "@SYS24272");
            if (allowance.ArticleSubClause)
                this.fillCellsRight(_sheet, #DK, 51, allowance.ArticleSubClause, 4, "@SYS24272");
    
            this.fillCellsLeft(_sheet, #BF, 53, this.roundAmountStr(getField(#NonTaxableAvgCost)), 15, "@GLS109332");
            tmp = getField(#DistributedPropertyShare);
            row = strlen(tmp);
            s = substr(tmp, 1, strfind(tmp, "@SYS35673", 1, row)-1);
            this.fillCellsLeft(_sheet, #BF, 56, s, 10, "@GLS109332");
            s = substr(tmp, row ,-(row-strfind(tmp, "@SYS35673", 1, row)));
            this.fillCellsLeft(_sheet, #CM, 56, s, 10, "@GLS109332");
            this.fillCellsLeft(_sheet, #BF, 58, this.roundAmountStr(getField(#TaxBase)), 15, "@GLS109332");
    
            this.fillCellsLeft(_sheet, #BF, 60, strupr(getField(#AllowanceRateReduction)));
            allowance = RAssetTaxAllowance::findByTaxAllowanceId(getField(#AllowanceRateReduction));
            if (allowance.ArticleNumber)
                this.fillCellsRight(_sheet, #CM, 60, allowance.ArticleNumber, 4, "@SYS24272");
            if (allowance.ArticleClause)
                this.fillCellsRight(_sheet, #CY, 60, allowance.ArticleClause, 4, "@SYS24272");
            if (allowance.ArticleSubClause)
                this.fillCellsRight(_sheet, #DK, 60, allowance.ArticleSubClause, 4, "@SYS24272");
    
            s = RTax25RegCalc_AssessedTax::taxCodePercent(conpeek(_sectionBody, #SalesTaxCode));
            this.fillCellsLeft(_sheet, #BF, 62, subStr(s, 1, 1), 1, "@GLS109332");
            this.fillCellsLeft(_sheet, #BL, 62, subStr(s, strLen(s), -2), 2, "@GLS109332");
            this.fillCellsLeft(_sheet, #BF, 64, this.roundAmountStr(getField(#TaxAmount)), 15, "@GLS109332");
            this.fillCellsLeft(_sheet, #BF, 67, this.roundAmountStr(getField(#PriorAdvPaymentAmount)), 15, "@GLS109332");
    
            this.fillCellsLeft(_sheet, #BF, 70, strupr(getField(#AllowanceTaxReduction)));
            allowance = RAssetTaxAllowance::findByTaxAllowanceId(getField(#AllowanceTaxReduction));
            if (allowance.ArticleNumber)
                this.fillCellsRight(_sheet, #CM, 70, allowance.ArticleNumber, 4, "@SYS24272");
            if (allowance.ArticleClause)
                this.fillCellsRight(_sheet, #CY, 70, allowance.ArticleClause, 4, "@SYS24272");
            if (allowance.ArticleSubClause)
                this.fillCellsRight(_sheet, #DK, 70, allowance.ArticleSubClause, 4, "@SYS24272");
    
            this.fillCellsLeft(_sheet, #BF, 73, this.roundAmountStr(getField(#TaxReductionAmount)), 15, "@GLS109332");
            this.fillCellsLeft(_sheet, #BF, 76, this.roundAmountStr(getField(#OutsideAmount)), 15, "@GLS109332");
            this.fillCellsLeft(_sheet, #BF, 79, this.roundAmountStr(getField(#MovablesValue)), 15,"@GLS109332");
    
            pay = this.round(getField(#TaxAmount)) -
                  this.round(getField(#PriorAdvPaymentAmount)) -
                  this.round(getField(#TaxReductionAmount));
    
            if (conpeek(_sectionBody, #Section) == #Section2Type4)
            {
                taxPay -= min(pay, this.round(getField(#OutsideAmount)));
            }
            else
            {
                taxPay += pay;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSection3</Name>
				<Source><![CDATA[
    #define.Factor(15)
    protected void fillSection3(int                    _sheet,
                                container              _sectionBody,
                                RTax25RegisterTransMap _trans)        // AssessedTax
    {
        int                     i;
        str                     s, tmp;
        RAssetTaxAllowance      allowance;
        Common                  common  = _trans;
        container               fieldId = RTax25RegType::construct(RTax25RegisterType::AmountDifference,
                                                                   RAssetAssessedTaxRegType::AssessedTax,
                                                                   isDetached).fieldId();
    
        anytype getField(RTax25FieldId   _fieldId)
        {
            if (isDetached)
            {
                return common.(conpeek(fieldId, _fieldId));
            }
            return conpeek(_trans.RegisterValues, _fieldId);
        }
        #define.cadastralValueDate(01\01\2014)
        ;
    
        this.fillCellsLeft(_sheet, #AE, 10, conPeek(_sectionBody, #RCOAD), 11, "@GLS109332");
    
        if (companyInfo.rAlienCorpName && journalTable.toDate() < #cadastralValueDate)
        {
            this.fillCellsLeft(_sheet, #BF, 34, this.roundAmountStr(getField(#CadastralValue)), 15, "@GLS109332");
            this.fillCellsLeft(_sheet, #BF, 37, this.roundAmountStr(getField(#NonTaxableCadastralValue)), 15, "@GLS109332");
        }
        else
        {
            this.fillCellsLeft(_sheet, #BF, 28, this.roundAmountStr(getField(#CadastralValue)), 15, "@GLS109332");
            this.fillCellsLeft(_sheet, #BF, 31, this.roundAmountStr(getField(#NonTaxableCadastralValue)), 15, "@GLS109332");
        }
    
        if (_trans.RefTableId == tableNum(RAssetTable))
        {
            tmp = getField(#CadastralNum);
    
            if (tmp)
            {
                if (strLen(tmp) > 40)
                {
                    this.fillCellsLeft(_sheet, #A, 14, subStr(tmp, 1, 40), 40, "@GLS109332");
                    this.fillCellsLeft(_sheet, #A, 16, subStr(tmp, 41, 40), 40, "@GLS109332");
                }
                else
                {
                    this.fillCellsLeft(_sheet, #A, 14, tmp, 40, "@GLS109332");
                }
            }
    
            tmp = getField(#RoomCadastralNum);
    
            if (tmp)
            {
                if (strLen(tmp) > 40)
                {
                    this.fillCellsLeft(_sheet, #A, 20, subStr(tmp, 1, 40), 40, "@GLS109332");
                    this.fillCellsLeft(_sheet, #A, 22, subStr(tmp, 41, 40), 40, "@GLS109332");
                }
                else
                {
                    this.fillCellsLeft(_sheet, #A, 20, tmp, 40, "@GLS109332");
                }
            }
    
            tmp = getField(#AllowanceTaxExemption);
    
            if (tmp)
            {
                allowance = RAssetTaxAllowance::findByTaxAllowanceId(tmp);
    
                this.fillCellsLeft(_sheet, #BF, 40, strupr(allowance.TaxAllowanceId));
    
                if (allowance.ArticleNumber)
                    this.fillCellsRight(_sheet, #CM, 40, allowance.ArticleNumber, 4, "@SYS24272");
                if (allowance.ArticleClause)
                    this.fillCellsRight(_sheet, #CY, 40, allowance.ArticleClause, 4, "@SYS24272");
                if (allowance.ArticleSubClause)
                    this.fillCellsRight(_sheet, #DK, 40, allowance.ArticleSubClause, 4, "@SYS24272");
            }
        }
    
        tmp = getField(#DistributedPropertyShare);
        i = strlen(tmp);
        s = substr(tmp, 1, strfind(tmp, "@SYS35673", 1, i)-1);
        this.fillCellsLeft(_sheet, #BF, 42, s, 10, "@GLS109332");
    
        s = substr(tmp,i,-(i-strfind(tmp, "@SYS35673", 1, i)));
        this.fillCellsLeft(_sheet, #CM, 42, s, 10, "@GLS109332");
        this.fillCellsLeft(_sheet, #BF, 44, this.roundAmountStr(getField(#TaxBase)), 15, "@GLS109332");
        this.fillCellsLeft(_sheet, #BF, 46, strUpr(getField(#AllowanceRateReduction)), 7, "@GLS109332");
    
        allowance = RAssetTaxAllowance::findByTaxAllowanceId(getField(#AllowanceRateReduction));
        if (allowance.ArticleNumber)
            this.fillCellsRight(_sheet, #CM, 46, allowance.ArticleNumber, 4, "@SYS24272");
        if (allowance.ArticleClause)
            this.fillCellsRight(_sheet, #CY, 46, allowance.ArticleClause, 4, "@SYS24272");
        if (allowance.ArticleSubClause)
            this.fillCellsRight(_sheet, #DK, 46, allowance.ArticleSubClause, 4, "@SYS24272");
    
        s = RTax25RegCalc_AssessedTax::taxCodePercent(conpeek(_sectionBody, #SalesTaxCode));
        this.fillCellsLeft(_sheet, #BF, 48, subStr(s, 1, 1), 1, "@GLS109332");
        this.fillCellsLeft(_sheet, #BL, 48, subStr(s, strLen(s), -2), 2, "@GLS109332");
    
        tmp = getField(#Factor);
        i = strlen(tmp);
        s = substr(tmp, 1, strfind(tmp, "@SYS35673", 1, i)-1);
        this.fillCellsLeft(_sheet, #BF, 50, s, 2, "@GLS109332");
        s = substr(tmp,i,-(i-strfind(tmp, "@SYS35673", 1, i)));
        this.fillCellsLeft(_sheet, #BO, 50, s, 2, "@GLS109332");
    
        this.fillCellsLeft(_sheet, #BF, 52, this.roundAmountStr(getField(#TaxAmount)), 15, "@GLS109332");
        this.fillCellsLeft(_sheet, #BF, 55, this.roundAmountStr(getField(#PriorAdvPaymentAmount)), 15, "@GLS109332");
        this.fillCellsLeft(_sheet, #BF, 58, strUpr(getField(#AllowanceTaxReduction)));
        allowance = RAssetTaxAllowance::findByTaxAllowanceId(getField(#AllowanceTaxReduction));
        if (allowance.ArticleNumber)
            this.fillCellsRight(_sheet, #CM, 58, allowance.ArticleNumber, 4, "@SYS24272");
        if (allowance.ArticleClause)
            this.fillCellsRight(_sheet, #CY, 58, allowance.ArticleClause, 4, "@SYS24272");
        if (allowance.ArticleSubClause)
            this.fillCellsRight(_sheet, #DK, 58, allowance.ArticleSubClause, 4, "@SYS24272");
    
        this.fillCellsLeft(_sheet, #BF, 61, this.roundAmountStr(getField(#TaxReductionAmount)), 15, "@GLS109332");
    
        taxPay += (this.round(getField(#TaxAmount)) -
                   this.round(getField(#PriorAdvPaymentAmount)) -
                   this.round(getField(#TaxReductionAmount)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillTotalPages</Name>
				<Source><![CDATA[
    #define.KPPRow(4)
    #define.PageNumberColumn("BX")
    protected void fillTotalPages()
    {
        int page;
    
        this.fillCellsRight(1, #K, 29, int2str(totalPages), 3, #0);
    
        excelDocument.deleteWorkSheet(#Value4);
        excelDocument.deleteWorkSheet(#Value3);
        excelDocument.deleteWorkSheet(#Value2);
    
        for (page = totalPages; page > 1; page--)
        {
            this.fillCellsRight(page, #PageNumberColumn, #KPPRow, int2str(page), 3, #0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegTrans</Name>
				<Source><![CDATA[
    protected RTax25RegisterTransMap getRegTrans(PaymentOrderBudgetReceiptClassCode_RU _pobcC,
                                                 TaxCode                               _taxCode,
                                                 RAssetSection                         _section,
                                                 RefTableId                            _tableId,
                                                 RefRecId                              _refRecId)
    {
        RTax25Query qMain = RTax25Query::newParameters(RTax25RegisterType::AmountDifference, totalDeprJour, isDetached);
        RTax25Query qNext = RTax25Query::newParameters(RTax25RegisterType::AmountDifference, totalDeprJour, isDetached);
    
        if (qMain.first())
        {
            do
            {
                if (qMain.getField(#RCOAD)             == curRCOAD &&
                    qMain.getField(#BudgetRevenueCode) == _pobcC   &&
                    qMain.getField(#SalesTaxCode)      == _taxCode &&
                    qMain.getField(#Section)           == _section)
                {
                    if (_tableId && _refRecId)
                    {
                        qNext.createRegQuery(0, -1);
                        qNext.addRangeValue(fieldName2Id(qMain.getRecord().TableId, 'LineNumber'), queryRange(qMain.getRecord().LineNumber + 1, ''));
    
                        if (qNext.first())
                        {
                            do
                            {
                                if (qNext.getRecord().RefTableId == _tableId && qNext.getRecord().RefRecId == _refRecId)
                                {
                                    return qNext.getRecord();
                                }
    
                                if (qNext.getField(#RCOAD))
                                {
                                    return null;
                                }
                            }
                            while (qNext.next());
                        }
                    }
                    else
                    {
                        return qMain.getRecord();
                    }
                }
            }
            while (qMain.next());
        }
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    public void initValue(Args _args)
    {
        #define.okatoPerPage(6)
        #define.reorgCell('AB')
    
        super(_args);
        okatoPerPage  = #okatoPerPage;
        reorgCell     = #reorgCell;
    
        select firstonly assessedTaxJour
            where assessedTaxJour.JournalNum              == journalTable.JournalNum &&
                  assessedTaxJour.PeriodType              == journalTable.PeriodType &&
                  assessedTaxJour.PeriodNum               == journalTable.PeriodNum  &&
                  assessedTaxJour.FiscalYear              == journalTable.FiscalYear &&
                  assessedTaxJour.Cancelled               == NoYes::No               &&
                  assessedTaxJour.AssessedTaxRegisterType == RAssetAssessedTaxRegType::AssessedTax;
    
        select firstonly totalDeprJour
            where totalDeprJour.JournalNum              == journalTable.JournalNum &&
                  totalDeprJour.PeriodType              == journalTable.PeriodType &&
                  totalDeprJour.PeriodNum               == journalTable.PeriodNum  &&
                  totalDeprJour.FiscalYear              == journalTable.FiscalYear &&
                  totalDeprJour.Cancelled               == NoYes::No               &&
                  totalDeprJour.AssessedTaxRegisterType == RAssetAssessedTaxRegType::TotalDepreciatedCost;
    
        isDetached = (select firstonly RecId from RTax25RegisterTrans
                          where RTax25RegisterTrans.JournalNum              == journalTable.JournalNum &&
                                RTax25RegisterTrans.PeriodType              == journalTable.PeriodType &&
                                RTax25RegisterTrans.PeriodNum               == journalTable.PeriodNum  &&
                                RTax25RegisterTrans.FiscalYear              == journalTable.FiscalYear &&
                                RTax25RegisterTrans.AssessedTaxRegisterType == RAssetAssessedTaxRegType::DepreciatedCostCalc).RecId == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDocument</Name>
				<Source><![CDATA[
    protected boolean makeDocument(str _declarationFor)
    {
        excelDocument = new ComExcelDocument_RU();
    
        if (! excelDocument.newFile(TemplateProvider_RU::getFor(this).get(this.templateName()), false))
        {
            return false;
        }
    
        rcoadCount = okatoPerPage + 1;
    
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList, ''];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxDeclarationLocation</Name>
				<Source><![CDATA[
    public RAssetTaxDeclarationLocation parmTaxDeclarationLocation(RAssetTaxDeclarationLocation  _taxDeclarationLocation = taxDeclarationLocation)
    {
        taxDeclarationLocation = _taxDeclarationLocation;
        return taxDeclarationLocation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>printByAuthority</Name>
				<Source><![CDATA[
    private void printByAuthority()
    {
        SetEnumerator se;
        SetEnumerator rkoadSE;
    
        if(declarationSet && declarationSet.elements())
        {
            se = declarationSet.getEnumerator();
            while (se.moveNext())
            {
                rkoadSE = this.rcoadSet(se.current()).getEnumerator();
                if (rkoadSE.moveNext() && this.makeDocument(se.current()))
                {
                    totalPages  = 1;
                    rcoadPages  = 1;
                    gniCode     = (select GniCode_RU from taxAuthorityAddress where
                                        taxAuthorityAddress.TaxAuthority == se.current()).GniCode_RU;
                    this.fillHeader();
                    do
                    {
                        curRCOAD = rkoadSE.current();
                        this.create1To5Sections();
                    } while (rkoadSE.moveNext());
    
                    this.endDocument();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printByDetachedDepartment</Name>
				<Source><![CDATA[
    private void printByDetachedDepartment()
    {
        Set                 rcoadSet = this.rcoadSet();
        SetEnumerator       se;
        VendTable           vendTable;
        ContactPerson       contactPerson;
        DirPersonName       dirPersonName;
        boolean             findVendDirector = taxPayerSing == '1';
        Branches_RU         branch;
        RAssetLocationId    location;
        RTax25RegisterLineNum64         curHeaderLine;
        Set                 detachedSet = new Set(Types::String);
        RTax25Query         rQuery = RTax25Query::newParameters(RTax25RegisterType::AmountDifference, assessedTaxJour, isDetached);
        RTax25Query         rCalc  = RTax25Query::newParameters(RTax25RegisterType::AmountDifference, assessedTaxJour, isDetached);
    
        rQuery.createRegQuery();
        rQuery.addRangeValue(fieldName2Id(rQuery.getRecord().TableId, 'BlockType'),
                             queryRangeConcat(queryValue(ReportBlockType::Footer), ReportBlockType::Header));
    
        if (rQuery.first())
        {
            do
        {
                if (rQuery.getRecord().BlockType == ReportBlockType::Header)
            {
                    curHeaderLine = rQuery.getRecord().LineNumber;
            }
            else
            {
                    rCalc.createRegQuery(0, -1);
                    rCalc.addRangeValue(fieldName2Id(rCalc.getRecord().TableId, 'RefTableId'),
                                        queryRangeConcat(queryValue(tablenum(RAssetTable)), tablenum(Branches_RU)));
    
                    rCalc.addRangeValue(fieldName2Id(rCalc.getRecord().TableId, 'LineNumber'), queryRange(curHeaderLine + 1, rQuery.getRecord().LineNumber - 1));
    
                    if (rCalc.first())
                    {
                        do
                {
                            if (rCalc.getRecord().RefTableId == tablenum(RAssetTable))
                    {
                                location = RAssetTable::findrec(rCalc.getRecord().RefRecId).location(journalTable.EndDate);
                                if (location)
                        {
                                    branch = Branches_RU::find(RAssetLocation::find(location).BranchId);
                        }
                    }
                    else
                    {
                        select firstonly Independent, VendAccount from branch
                                    where branch.RecId == rCalc.getRecord().RefRecId;
                    }
    
                    if (branch.Independent)
                    {
                        if (declarationSet.in(branch.VendAccount))
                        {
                            detachedSet.add(branch.VendAccount);
                        }
                            }
                        }
                        while (rCalc.next());
                    }
                }
            }
            while (rQuery.next());
        }
    
        if (declarationSet.in(companyInfo.Name))
        {
            se = rcoadSet.getEnumerator();
            if (se.moveNext() && this.makeDocument(companyInfo.Name))
            {
                gniCode     = this.gniCode(CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, journalTable.EndDate));
                totalPages  = 1;
                rcoadPages  = 1;
                this.fillHeader();
    
                do
                {
                    curRCOAD = se.current();
                    this.create1To5Sections();
                } while (se.moveNext());
    
                this.endDocument();
            }
        }
    
        taxPayerSing = '2';
        se = detachedSet.getEnumerator();
        while (se.moveNext())
        {
            curVendAccount  = se.current();
            vendTable       = VendTable::find(curVendAccount);
            inn             = vendTable.partyINNasOfDate_RU(journalTable.EndDate);
            kpp             = vendTable.partyKPPasOfDate_RU(journalTable.EndDate);
            okdp            = vendTable.partyOKDPasOfDate_RU(journalTable.EndDate);
            companyPhone    = vendTable.phone();
            curRCOAD        = vendTable.partyOKATOasOfDate_RU(journalTable.EndDate);
            gniCode         = this.gniCode(curRCOAD);
    
            if (findVendDirector)
            {
                select firstonly Party from contactPerson
                    where contactPerson.ContactPersonId == vendTable.ContactPersonId;
    
                if (!contactPerson)
                {
                    select firstonly Party from contactPerson
                        where contactPerson.ContactForParty == vendTable.Party;
                }
    
                dirPersonName = DirPersonName::find(DirPerson::find(contactPerson.Party).RecId);
                firstName   = dirPersonName.FirstName;
                lastName    = dirPersonName.LastName;
                middleName  = dirPersonName.MiddleName;
            }
    
            if (this.makeDocument(curVendAccount))
            {
                totalPages      = 1;
                rcoadPages      = 1;
    
                this.fillHeader();
                this.create1To5Sections();
                this.endDocument();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printByMajorTaxPayer</Name>
				<Source><![CDATA[
    private void printByMajorTaxPayer()
    {
        SetEnumerator se = this.rcoadSet().getEnumerator();
    
        if (se.moveNext() && this.makeDocument(companyInfo.Name))
        {
            gniCode     = this.gniCode(CompanyInfoHelper::partyOKATOasOfDate_RU(companyInfo, journalTable.EndDate));
            totalPages  = 1;
            rcoadPages  = 1;
            this.fillHeader();
    
            do
            {
                curRCOAD = se.current();
                this.create1To5Sections();
            } while (se.moveNext());
    
            this.endDocument();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>rcoadSet</Name>
				<Source><![CDATA[
    private Set rcoadSet(TaxAuthority _taxAuthority = '')
    {
        Set         registerSet = new Set(Types::String);
        RTax25Query query = RTax25Query::newParameters(RTax25RegisterType::AmountDifference, assessedTaxJour, isDetached);
    
        if (query.first(0, ReportBlockType::Footer))
        {
            do
            {
                registerSet.add(query.getField(#RCOAD));
            }
            while (query.next());
        }
    
        if (_taxAuthority && registerSet.elements())
        {
            return Set::intersection(registerSet, TaxAuthorityAddress::find(_taxAuthority).okatoSet_RU());
        }
    
        return registerSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>roundAmountStr</Name>
				<Source><![CDATA[
    protected str roundAmountStr(RAssetAmount _amount, str _dash = '')
    {
        return _amount > 0 ? num2str(this.round(_amount), 0, 0, 1, 0) : _dash;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        DirPartyTable   leader;
        DirPersonName   responsible,
                        leaderName;
    
        this.getLast();
    
        setPrefix("@GLS101662");
    
        if (this.checkDocument())
        {
            inn             = companyInfo.partyINNasOfDate_RU(journalTable.EndDate);
            kpp             = companyInfo.partyKPPasOfDate_RU(journalTable.EndDate);
            okdp            = CompanyInfoHelper::partyOKDPasOfDate_RU(companyInfo, journalTable.EndDate);
            companyPhone    = companyInfo.phone();
            companyName     = companyInfo.Name;
    
            leader          = DirPartyTable::findByName(OfficialsTable_RU::nameDirector());
            responsible     = DirPersonName::find(EmployeeTable_RU::findByEmployeeId(employeeId).worker().Person);
            leaderName      = DirPersonName::find(leader.RecId);
    
            if (responsible.RecId)
            {
                taxPayerSing    = '2';
                firstName       = responsible.FirstName;
                lastName        = responsible.LastName;
                middleName      = responsible.MiddleName;
            }
            else if (leaderName.RecId)
            {
                taxPayerSing    = '1';
                firstName       = leaderName.FirstName;
                lastName        = leaderName.LastName;
                middleName      = leaderName.MiddleName;
            }
    
            try
            {
                switch (taxDeclarationLocation)
                {
                    case RAssetTaxDeclarationLocation::MajorTaxPayer,
                         RAssetTaxDeclarationLocation::RussianOrganization,
                         RAssetTaxDeclarationLocation::AssigneeAccounting,
                         RAssetTaxDeclarationLocation::AssigneeLocationNotFirstRate:
                        this.printByMajorTaxPayer();
                        break;
                    case RAssetTaxDeclarationLocation::DetachedDepartment,
                         RAssetTaxDeclarationLocation::ImmovableProperty:
                        this.printByDetachedDepartment();
                        break;
                    default:
                        this.printByAuthority();
                        break;
                }
            }
            catch (Exception::Error)
            {
                this.closeExcelDocument();
                throw error("@SYS18738");
            }
        }
    
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxDeclarationType</Name>
				<Source><![CDATA[
    public RAssetAssessedTaxRegType taxDeclarationType()
    {
        return RAssetAssessedTaxRegType::AssessedTax;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    protected str templateName()
    {
        return resourceStr(RAssetAssessedTaxDeclaration2013);
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer          version  = conPeek(packedClass,1);
    
        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = packedClass;
                break;
    
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS116807";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        RAssetAssessedTaxDeclaration taxDeclaration = new RAssetAssessedTaxDeclaration();
    
        taxDeclaration.initValue(_args);
    
        if (taxDeclaration.prompt())
        {
            taxDeclaration.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>