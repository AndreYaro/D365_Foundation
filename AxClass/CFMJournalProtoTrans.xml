<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMJournalProtoTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for creating CFMJournalTrans from different sources.
/// </summary>
public abstract class CFMJournalProtoTrans
{
    CFMJournalTable journalTable;
    CFMJournalUseCashDisc journalUseCashDisc;
    CFMJournalType journalType;
    CFMJournalTransSaver saver;
    DirPartyMap dirPartyMap;
    CFMCorrectionType correctionType;
    NoYes useUncommittedValues;
    CFMAnalyticDataEditUncommitted uncommittedValues;
    ExchangeRateTypeRecId exchangeRateTypeRecId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>constructFromCFMJournalSourceList</Name>
				<Source><![CDATA[
    public static CFMJournalProtoTrans constructFromCFMJournalSourceList(CFMJournalSourceList _journalSourceList)
    {
        return CFMJournalProtoTrans::constructFromJournalTransSourceType(_journalSourceList.CFMJournalTransSourceType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructFromJournalTransSourceType</Name>
				<Source><![CDATA[
    public static CFMJournalProtoTrans constructFromJournalTransSourceType(CFMJournalTransSourceType _journalTransSourceType)
    {
        CFMJournalSourceAttribute attribute = new CFMJournalSourceAttribute(_journalTransSourceType);

        CFMJournalProtoTrans protoTrans = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(CFMJournalProtoTrans), attribute);

        return protoTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>accountNumParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets party of account num (Customer or Vendor).
    /// </summary>
    /// <returns>
    /// <c>RecId</c> in Global address book.
    /// </returns>
    protected DirPartyRecId accountNumParty()
    {
        return dirPartyMap.Party;
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountSign</Name>
				<Source><![CDATA[
    protected Sign amountSign()
    {
        return this.parmCorrectionType() == CFMCorrectionType::Reverse ? -1 : 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashFlowDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cash flow direction of journalTrans.
    /// </summary>
    /// <returns>
    /// Cash flow direction of potential journalTrans.
    /// </returns>
    public CFMCashFlowDirection cashFlowDirection()
    {
        CFMCashFlowDirection ret = CFMCashFlowDirection::Inflow;

        if (this.paymentAmount() < 0)
        {
            ret = CFMCashFlowDirection::Outflow;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates journal trans from source data.
    /// </summary>
    /// <returns>
    /// Filled but not saved <c>CFMJournalTrans</c> record.
    /// </returns>
    protected CFMJournalTrans createTrans()
    {
        CFMJournalTrans journalTrans;

        journalTrans.clear();

        journalTrans.JournalId = journalTable.JournalId;
        this.setPaymentAmount(journalTrans);
        this.setTransDate(journalTrans);
        this.setSourceType(journalTrans);

        this.setLedgerDimension(journalTrans);
        this.setPaymentAccountType(journalTrans);
        this.setPaymentAccountNum(journalTrans);
        this.setCashFlowDirection(journalTrans);

        this.setCurrencyCode(journalTrans);
        this.setSourceDataArea(journalTrans);
        this.setPaymentPriority(journalTrans);
        this.setRequestStatus(journalTrans);
        this.setPaymMode(journalTrans);
        this.setAccountNumParty(journalTrans);

        journalTrans.CorrectionType = this.parmCorrectionType();
        journalTrans.Uncommitted = this.parmUseUncommittedValues();

        return journalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets currency code of journalTrans.
    /// </summary>
    /// <returns>
    /// Currency code of potential <c>CFMjournalTrans</c> record.
    /// </returns>
    abstract protected CurrencyCode currencyCode()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCFMJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets filled journal trans from source data.
    /// </summary>
    /// <returns>
    /// Filled but not saved <c>CFMJournalTrans</c> record.
    /// </returns>
    public CFMJournalTrans getCFMJournalTrans()
    {
        return this.createTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payment account num from source data.
    /// </summary>
    /// <returns>
    /// Payment account num from source data.
    /// </returns>
    public CFMPaymentAccountNum getPaymentAccountNum()
    {
        return this.paymentAccountNum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payment account type from source data.
    /// </summary>
    /// <returns>
    /// Payment account type from source data.
    /// </returns>
    public CFMPaymentAccountType getPaymentAccountType()
    {
        return this.paymentAccountType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCFMJournalTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize internal data from <c>CFMJournalTable</c> cursor
    /// </summary>
    /// <param name="_jour">
    /// Cursor of <c>CFMJournalTable</c> type
    /// </param>
    public void initFromCFMJournalTable(CFMJournalTable _jour)
    {
        journalTable = _jour;

        journalType = journalTable.JournalType;
        journalUseCashDisc = _jour.JournalUseCashDisc;

        if (journalType == CFMJournalType::Plan)
        {
            exchangeRateTypeRecId = CFMParameters::findInCentralizedPaymentsCompany().ExchangeRateType;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromParmContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes concrete successor from contract
    /// </summary>
    /// <param name="_parmContract">
    /// Instance of successor of <c>CFMJournalProtoTransParmContract</c> class
    /// </param>
    /// <exception cref="Exception::Error">
    /// Method throws exception if contract is incorrect or doesn't have expected type orits value is <c>null</c>
    /// </exception>
    public void initFromParmContract(CFMJournalProtoTransParmContract _parmContract)
    {
        if (_parmContract && _parmContract.validate() && this.validateParmContractType(_parmContract))
        {
            this.initSources(_parmContract);
        }
        else
        {
            throw error(error::missingParameter(null));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSources</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize internal data from <c>CFMJournalProtoTransParmContract</c> object.
    /// </summary>
    /// <param name="_parmContract">
    /// <c>CFMJournalProtoTransParmContract</c> source object.
    /// </param>
    abstract protected void initSources(CFMJournalProtoTransParmContract _parmContract)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>isConvertAsDefaultDim</Name>
				<Source><![CDATA[
    protected NoYes isConvertAsDefaultDim()
    {
        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isFieldActive</Name>
				<Source><![CDATA[
    private boolean isFieldActive(FieldId _fieldId)
    {
        return saver.isFieldActive(_fieldId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets cash flow ledger dimension from source data.
    /// </summary>
    /// <returns>
    /// Cash flow ledger dimension from source data.
    /// </returns>
    abstract protected CFMLedgerDimension ledgerDimension()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>logRefRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets record ids for logging source data.
    /// </summary>
    /// <returns>
    /// Record container of RecId of source records for logging.
    /// </returns>
    public container logRefRecId()
    {
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCorrectionType</Name>
				<Source><![CDATA[
    public CFMCorrectionType parmCorrectionType(CFMCorrectionType _correctionType = correctionType)
    {
        correctionType = _correctionType;
        return correctionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchangeRateTypeRecId</Name>
				<Source><![CDATA[
    public ExchangeRateTypeRecId parmExchangeRateTypeRecId(ExchangeRateTypeRecId _exchangeRateTypeRecId = exchangeRateTypeRecId)
    {
        exchangeRateTypeRecId = _exchangeRateTypeRecId;

        return exchangeRateTypeRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSaver</Name>
				<Source><![CDATA[
    public CFMJournalTransSaver parmSaver(CFMJournalTransSaver _saver = saver)
    {
        saver = _saver;

        return saver;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseUncommittedValues</Name>
				<Source><![CDATA[
    public NoYes parmUseUncommittedValues(NoYes _useUncommittedValues = useUncommittedValues)
    {
        useUncommittedValues = _useUncommittedValues;

        return useUncommittedValues;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payment account num from source data.
    /// </summary>
    /// <returns>
    /// Payment account num from source data.
    /// </returns>
    abstract protected CFMPaymentAccountNum paymentAccountNum()
    {

    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payment account type from source data.
    /// </summary>
    /// <returns>
    /// Payment account type from source data.
    /// </returns>
    abstract protected CFMPaymentAccountType paymentAccountType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payment amount from source data.
    /// </summary>
    /// <returns>
    /// Payment amount from source data.
    /// </returns>
    abstract protected CFMPaymentAmount paymentAmount()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymentPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets payment priority from source data.
    /// </summary>
    /// <returns>
    /// Payment priority from source data.
    /// </returns>
    protected CFMPaymentPriorityRecId paymentPriority()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>paymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets method of payment
    /// </summary>
    /// <returns>
    /// Method of payment from source data.
    /// </returns>
    protected PaymMOde paymMode()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>requestStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets status of payment request from source data.
    /// </summary>
    /// <returns>
    /// Status of payment priority from source data.
    /// </returns>
    protected CFMPaymentRequestStatus requestStatus()
    {
        return CFMPaymentRequestStatus::Opened;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setAccountNumParty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets party in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setAccountNumParty(CFMJournalTrans _journalTrans)
    {
        FieldId fieldId = fieldNum(CFMJournalTrans, AccountNumParty);

        if (this.isFieldActive(fieldId))
        {
            _journalTrans.(fieldId) = this.accountNumParty();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCashFlowDirection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets cash flow direction in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setCashFlowDirection(CFMJournalTrans _journalTrans)
    {
        FieldId fieldId = fieldNum(CFMJournalTrans, CashFlowDirection);

        if (this.isFieldActive(fieldId))
        {
            _journalTrans.(fieldId) = this.cashFlowDirection();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets currency code in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setCurrencyCode(CFMJournalTrans _journalTrans)
    {
        FieldId fieldId = fieldNum(CFMJournalTrans, CurrencyCode);

        if (this.isFieldActive(fieldId))
        {
            _journalTrans.(fieldId) = this.currencyCode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerDimension</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets cash flow ledger dimension in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setLedgerDimension(CFMJournalTrans _journalTrans)
    {
        FieldId fieldId = fieldNum(CFMJournalTrans, LedgerDimension);

        if (this.isFieldActive(fieldId))
        {
            _journalTrans.(fieldId) = saver.convertFinancialDimension(this.ledgerDimension(), this.isConvertAsDefaultDim());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentAccountNum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets payment account in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setPaymentAccountNum(CFMJournalTrans _journalTrans)
    {
        FieldId fieldId = fieldNum(CFMJournalTrans, PaymentAccountNum);

        if (this.isFieldActive(fieldId))
        {
            _journalTrans.(fieldId) = this.paymentAccountNum();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentAccountType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets payment account type in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setPaymentAccountType(CFMJournalTrans _journalTrans)
    {
        FieldId fieldId = fieldNum(CFMJournalTrans, PaymentAccountType);

        if (this.isFieldActive(fieldId))
        {
            _journalTrans.(fieldId) = this.paymentAccountType();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets payment amount in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setPaymentAmount(CFMJournalTrans _journalTrans)
    {
        _journalTrans.PaymentAmount = this.paymentAmount() * this.amountSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymentPriority</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets payment priority in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setPaymentPriority(CFMJournalTrans _journalTrans)
    {
        FieldId fieldId = fieldNum(CFMJournalTrans, PaymentPriority);

        if (this.isFieldActive(fieldId))
        {
            _journalTrans.(fieldId) = this.paymentPriority();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPaymMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets method of payment in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setPaymMode(CFMJournalTrans _journalTrans)
    {
        FieldId fieldId = fieldNum(CFMJournalTrans, PaymMode);

        if (this.isFieldActive(fieldId))
        {
            _journalTrans.(fieldId) = this.paymMode();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRequestStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets payment request status in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setRequestStatus(CFMJournalTrans _journalTrans)
    {
        FieldId fieldId = fieldNum(CFMJournalTrans, Status);

        if (this.isFieldActive(fieldId))
        {
            _journalTrans.(fieldId) = this.requestStatus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets organization unit code in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setSourceDataArea(CFMJournalTrans _journalTrans)
    {
        FieldId fieldId = fieldNum(CFMJournalTrans, SourceDataArea);

        if (this.isFieldActive(fieldId))
        {
            _journalTrans.(fieldId) = this.sourceDataArea();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets source type in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setSourceType(CFMJournalTrans _journalTrans)
    {
        FieldId fieldId = fieldNum(CFMJournalTrans, SourceType);

        if (this.isFieldActive(fieldId))
        {
            _journalTrans.(fieldId) = this.sourceType();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets transaction date in journal trans.
    /// </summary>
    /// <param name="_journalTrans">
    /// The <c>CFMJournalTrans</c> buffer to be updated.
    /// </param>
    protected void setTransDate(CFMJournalTrans _journalTrans)
    {
        TransDate transDate = this.transDate();

        if (transDate < journalTable.DateFrom)
        {
            _journalTrans.TransDate = dateNull();
        }
        else
        {
            _journalTrans.TransDate = transDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceDataArea</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets organization unit id from source data.
    /// </summary>
    /// <returns>
    /// Organization unit id from source data.
    /// </returns>
    abstract protected SelectableDataArea sourceDataArea()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets organization unit id from source data.
    /// </summary>
    /// <returns>
    /// Organization unit id from source data.
    /// </returns>
    abstract protected CFMJournalTransSourceType sourceType()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets transaction date from source data.
    /// </summary>
    /// <returns>
    /// Transaction date from source data.
    /// </returns>
    abstract protected TransDate transDate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateParmContractType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Method validates contract type for concrete successor of <c>CFMJournalProtoTrans</c>
    /// </summary>
    /// <param name="_parmContract">
    /// Instance of successor of <c>CFMJournalProtoTransParmContract</c>
    /// </param>
    /// <returns>
    /// <c>true</c> if type is equal of expected type otherwise <c>false</c>
    /// </returns>
    abstract protected boolean validateParmContractType(CFMJournalProtoTransParmContract _parmContract)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>