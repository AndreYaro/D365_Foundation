<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TradeWorkflow</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class TradeWorkflow
{
    Args                        args;
    RecId                       recId;
    TableId                     tableId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>actionDialog</Name>
				<Source><![CDATA[
    protected boolean actionDialog(WorkflowWorkItemActionDialog _workflowWorkItemActionDialog)
    {
        _workflowWorkItemActionDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
        _workflowWorkItemActionDialog.run();
        return _workflowWorkItemActionDialog.parmIsClosedOK();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmArgs</Name>
				<Source><![CDATA[
    public Args  parmArgs(Args _args = args)
    {
        args        = _args;
        recId       = args.record().RecId;
        tableId     = args.record().TableId;

        return args;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reSubmit</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reactivates the purchase order workflow.
    /// </summary>
    /// <returns>
    /// true if workflow was resubmitted; otherwise, false.
    /// </returns>
    /// <remarks>
    /// This method continues the workflow by calling the <c>dispatchWorkItemAction</c> method on the
    /// <c>WorkflowWorkItemActionManager</c> class that has information about the current work item.
    /// </remarks>
    public boolean reSubmit()
    {
        WorkflowWorkItemActionDialog    workflowWorkItemActionDialog;
        WorkflowWorkItemTable           workItem = args.caller().getActiveWorkflowWorkItem();
        boolean                         ret;
        boolean                         dispatchWorkItem = false;
        WorkflowComment                 comment;
        UserId                          targetUser;

        if (workItem.RecId)
        {
            workflowWorkItemActionDialog = WorkflowWorkItemActionDialog::construct( workItem,
                                                                                    WorkflowWorkItemActionType::Resubmit,
                                                                                    new MenuFunction(args.menuItemName(), args.menuItemType()));
            if (this.actionDialog(workflowWorkItemActionDialog))
            {
                comment = workflowWorkItemActionDialog.parmWorkflowComment();
                targetUser = workflowWorkItemActionDialog.parmTargetUser();

                dispatchWorkItem = true;
            }
        }

        if (dispatchWorkItem)
        {
            WorkflowWorkItemActionManager::dispatchWorkItemAction(workItem,
                                                                    comment,
                                                                    targetUser,
                                                                    WorkflowWorkItemActionType::Resubmit,
                                                                    args.menuItemName());
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preWorkflowDialogRun</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the workflow dialog run event.
    /// </summary>
    protected void preWorkflowDialogRun()
    {
        // The event is handled here to support extensibility of callers to respond to the event.
    }

]]></Source>
			</Method>
			<Method>
				<Name>submit</Name>
				<Source><![CDATA[
    abstract public void  submit()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitDialog</Name>
				<Source><![CDATA[
    protected boolean  submitDialog(WorkflowSubmitDialog  _workflowSubmitDialog)
    {
        _workflowSubmitDialog.preDialogRun += eventhandler(this.preWorkflowDialogRun);
        _workflowSubmitDialog.run();
        return _workflowSubmitDialog.parmIsClosedOK();
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkflow</Name>
				<Source><![CDATA[
    static void  cancelWorkflow(Common                   _buffer,
                                       WorkflowTypeName     _templateName)
    {
        ListEnumerator          listEnumerator;
        List                    workflowsToCancel;

        workflowsToCancel = TradeWorkflow::getWorkflowsToCancel(_buffer, _templateName);

        ttsbegin;

        listEnumerator = workflowsToCancel.getEnumerator();
        while (listEnumerator.moveNext())
        {
            Workflow::cancelWorkflow(listEnumerator.current(), "@SYS303429");
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkflowsToCancel</Name>
				<Source><![CDATA[
    public static List  getWorkflowsToCancel(Common                  _buffer,
                                                    WorkflowTypeName    _templateName)
    {
        List                            workflowsToCancel = new List(Types::Guid);

        WorkflowWorkItemTable           workflowWorkItemTable;
        WorkflowVersionTable            workflowVersionTable;
        WorkflowTable                   workflowTable;
        WorkflowTrackingStatusTable     workflowTrackingStatusTable;

        while select CorrelationId, ConfigurationId from workflowWorkItemTable
            where workflowWorkItemTable.Status      == WorkflowWorkItemStatus::Pending
               && workflowWorkItemTable.RefRecId    == _buffer.RecId
               && workflowWorkItemTable.RefTableId  == _buffer.TableId
            exists join workflowVersionTable
                where workflowVersionTable.ConfigurationId == workflowWorkItemTable.ConfigurationId
                exists join workflowTable
                    where workflowTable.RecId           == workflowVersionTable.WorkflowTable
                       && workflowTable.TemplateName    == _templateName
        {
            workflowsToCancel.addEnd(workflowWorkItemTable.CorrelationId);
        }

        while select CorrelationId from workflowTrackingStatusTable
            where workflowTrackingStatusTable.ContextCompanyId  == _buffer.DataAreaId
               && workflowTrackingStatusTable.ContextTableId    == _buffer.TableId
               && workflowTrackingStatusTable.ContextRecId      == _buffer.RecId
               && workflowTrackingStatusTable.TrackingStatus    == WorkflowTrackingStatus::Pending
            exists join workflowVersionTable
                where workflowVersionTable.RecId == workflowTrackingStatusTable.WorkflowVersionTable
                exists join workflowTable
                    where workflowTable.RecId           == workflowVersionTable.WorkflowTable
                       && workflowTable.TemplateName    == _templateName
        {
            workflowsToCancel.addEnd(workflowTrackingStatusTable.CorrelationId);
        }

        return workflowsToCancel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newTradeWorkflow</Name>
				<Source><![CDATA[
    public static TradeWorkflow  newTradeWorkflow(Args  _args)
    {
        TradeWorkflow  tradeWorkflow;

        switch (_args.record().TableId)
        {
            case tableNum(PurchTable)   :   tradeWorkflow = PurchTableWorkflow::construct();
                tradeWorkflow.parmArgs(_args);
                break;
            case tableNum(PurchLine)    :   tradeWorkflow = PurchLineWorkflow::construct();
                tradeWorkflow.parmArgs(_args);
                break;
        }

        return tradeWorkflow;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>