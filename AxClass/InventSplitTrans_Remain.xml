<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventSplitTrans_Remain</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventSplitTrans_Remain extends InventSplitTrans
{
    InventQtySettled    notAllocatableSettledQty;
    CostAmountSettled   notAllocatableSettledAmount;
    CostAmountAdjusted  notAllocatableAdjustedAmount;
    PdsCWSettled        pdsCWNotAllocatableSettledQty;

    InventQtySettled    notAllocatableSettledQtySec;
    CostAmountSettled   notAllocatableSettledAmountSec;
    CostAmountAdjusted  notAllocatableAdjustedAmountSec;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    boolean check(InventTrans _splitTrans, InventQty _splitQty, PdsCWInventQty _cwQty = 0)
    {
        boolean ok = super(_splitTrans, _splitQty, _cwQty);

        // <GEERU>
        ok = this.checkOpen_RU(_splitTrans, _splitQty) && ok;
        // </GEERU>

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkOpen_RU</Name>
				<Source><![CDATA[
    protected boolean checkOpen_RU(InventTrans _splitTrans, InventQty _splitQty)
    {
        boolean ok = true;

        if (! _splitTrans.ValueOpen)
        {
            ok = checkFailed(strFmt("@SCM:InventTransClosedForItem", _splitTrans.ItemId));
        }

        if (abs(_splitQty) > abs(_splitTrans.financialOpenQty()))
        {
            ok = checkFailed(strFmt("@SCM:InventTransSplitQtyMoreThanFinanciallyOpenedQtyForItemWithQty", _splitTrans.ItemId, int2Str(_splitQty), int2Str(_splitTrans.financialOpenQty())));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSplitFinancialOpenQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if an inventory transaction has enough financial open quantity to be split.
    /// </summary>
    /// <param name="_transFrom">
    /// An <c>InventTrans</c> table buffer.
    /// </param>
    /// <param name="_splitQty">
    /// A quantity to split.
    /// </param>
    /// <exception cref="Exception::Error">
    /// An inventory transaction has not enough financial open quantity to be split.
    /// </exception>
    protected void checkSplitFinancialOpenQty(InventTrans _transFrom, InventQty _splitQty)
    {
        if (_transFrom.RecId &&
            _transFrom.ValueOpen                   != InventTransOpen::Quotation &&
            abs(_transFrom.financialOpenQty())     <  abs(_splitQty))
        {
            throw error(strfmt("@SYS19378",funcname()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isQtyCompletelySettled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether inventory transaction quantity is completely settled.
    /// </summary>
    /// <param name="_inventTrans">
    ///    The <c>InventTrans</c> record to be investigated.
    /// </param>
    /// <returns>
    ///    true if the quantity on the inventory transaction is completely settled; otherwise, false.
    /// </returns>
    protected boolean isQtyCompletelySettled(InventTrans _inventTrans)
    {
        return (_inventTrans.isUpdatedFinancial() && _inventTrans.financialOpenQty() == 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSettlementBeSplited</Name>
				<Source><![CDATA[
    boolean  mustSettlementBeSplited(InventSettlement _inventSettlement)
    {
        if (_inventSettlement.Cancelled)
        {
            return true;
        }

        if (_inventSettlement.SettleModel == InventSettleModel::PhysicalValue)
        {
            return true;
        }

        if ((_inventSettlement.SettleType        == InventSettleType::Receipt ||
             _inventSettlement.SettleType        == InventSettleType::Issue)  &&
            (_inventSettlement.QtySettled        != 0                         ||
             _inventSettlement.CostAmountSettled != 0))

        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableAdjustedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an adjusted amount that will not be allocated when the inventory transaction is split.
    /// </summary>
    /// <returns>
    ///    The adjusted amount that will not be allocated.
    /// </returns>
    protected CostAmountAdjusted notAllocatableAdjustedAmount()
    {
        return notAllocatableAdjustedAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableAdjustedAmountSec_RU</Name>
				<Source><![CDATA[
    protected CostAmountAdjusted notAllocatableAdjustedAmountSec_RU()
    {
        return notAllocatableAdjustedAmountSec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableSettledAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a settled amount that will not be allocated when the inventory transaction is split.
    /// </summary>
    /// <returns>
    ///    The settled amount that will not be allocated.
    /// </returns>
    protected CostAmountSettled notAllocatableSettledAmount()
    {
        return notAllocatableSettledAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableSettledAmountSec_RU</Name>
				<Source><![CDATA[
    protected CostAmountSettled notAllocatableSettledAmountSec_RU()
    {
        return notAllocatableSettledAmountSec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableSettledQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a settled quantity that will not be allocated when the inventory transaction is split.
    /// </summary>
    /// <returns>
    ///    The settled quantity that will not be allocated.
    /// </returns>
    protected InventQtySettled notAllocatableSettledQty()
    {
        return notAllocatableSettledQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>notAllocatableSettledQtySec_RU</Name>
				<Source><![CDATA[
    protected InventQtySettled notAllocatableSettledQtySec_RU()
    {
        return notAllocatableSettledQtySec;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsCWNotAllocatableSettledQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a catch weight settled quantity that should not be allocated when splitting the inventory
    /// transaction.
    /// </summary>
    /// <returns>
    /// A catch weight settled quantity that should not be allocated.
    /// </returns>
    protected PdsCWSettled pdsCWNotAllocatableSettledQty()
    {
        return pdsCWNotAllocatableSettledQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSplitAdjustedAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Splits the adjustment amount based on the split quantity and the total quantity.
    /// </summary>
    /// <param name="_transFrom">
    ///    The <c>InventTrans</c> record that contains the adjustment amount that will be split.
    /// </param>
    /// <param name="_splitQty">
    ///    The multiplication factor used to split the adjustment amount.
    /// </param>
    /// <param name="_totalQty">
    ///    The division factor used to split the adjustment amount.
    /// </param>
    /// <param name="_transTo">
    ///    The <c>InventTrans</c> record that will be assigned the split adjustment amount.
    /// </param>
    /// <exception cref="M:Exception::Error">
    ///    The total quantity is equal to zero.
    /// </exception>
    protected void setSplitAdjustedAmount(InventTrans _transFrom, InventQty _splitQty, InventQty _totalQty, InventTrans _transTo)
    {
        notAllocatableAdjustedAmount        = _transFrom.costAmountSettlementAdjustment();
        // <GEERU>
        notAllocatableAdjustedAmountSec = _transFrom.costAmountSettlementAdjustment(InventTransCurrency_RU::SecondaryCur);
        // </GEERU>

        super(_transFrom, _splitQty, _totalQty, _transTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSplitAmount</Name>
				<Source><![CDATA[
    void setSplitAmount(
        InventTrans     _transFrom,
        InventQty       _splitQty,
        InventTrans     _transTo,
        PdsCWInventQty  _cwQty = 0)
    {
        this.checkSplitFinancialOpenQty(_transFrom, _splitQty);

        super(_transFrom,_splitQty,_transTo, _cwQty);

        this.updateCompletelyQtySettled(_transFrom, _transTo);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSplitSettledAmount</Name>
				<Source><![CDATA[
    void setSplitSettledAmount(InventTrans _transFrom,InventQty _splitQty, InventQty _totalQty, InventTrans  _transTo, PdsCWInventQty  _cwTotalQty, PdsCWInventQty  _cwQty)
    {
        notAllocatableSettledQty        = _transFrom.QtySettled;
        pdsCWNotAllocatableSettledQty   = _transFrom.PdsCWSettled;
        notAllocatableSettledAmount     = _transFrom.CostAmountSettled;

        // <GEERU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]))
        {
            notAllocatableSettledQtySec            = _transFrom.QtySettledSecCur_RU;
            notAllocatableSettledAmountSec         = _transFrom.CostAmountSettledSecCur_RU;
        }
        // </GEERU>

        _transTo.QtySettled         = 0;
        _transTo.PdsCWSettled       = 0;
        _transTo.CostAmountSettled  = 0;

        // <GEERU>
        _transTo.QtySettledSecCur_RU           = 0;
        _transTo.CostAmountSettledSecCur_RU    = 0;
        // </GEERU>

    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCompletelyQtySettled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adjusts the posted amount or adjusted amount if the quantity is completely settled and the settled
    ///    amount is not equal to the sum of the posted amount and adjusted amount.
    /// </summary>
    /// <param name="_transFrom">
    ///    The <c>InventTrans</c> record to split.
    /// </param>
    /// <param name="_transTo">
    ///    The <c>InventTrans</c> record that contains the split amounts and quantities.
    /// </param>
    protected void updateCompletelyQtySettled(InventTrans _transFrom,InventTrans  _transTo)
    {
        if (this.isQtyCompletelySettled(_transFrom))
        {
            CostAmount costAmountRounding = _transFrom.financialOpenValue();

            if (costAmountRounding != 0)
            {
                if ((_transFrom.CostAmountAdjustment - this.notAllocatableAdjustedAmount()) != 0 || _transTo.CostAmountAdjustment != 0)
                {
                    _transFrom.CostAmountAdjustment -= costAmountRounding;
                    _transTo.CostAmountAdjustment   += costAmountRounding;
                }
                else
                {
                    _transFrom.CostAmountPosted -= costAmountRounding;
                    _transTo.CostAmountPosted   += costAmountRounding;
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>