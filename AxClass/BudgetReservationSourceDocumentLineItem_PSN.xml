<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetReservationSourceDocumentLineItem_PSN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetReservationSourceDocumentLineItem_PSN</c> class provides the information to handle the
/// distributions and subledger journal account entries for a budget reservation line.
/// </summary>
[
    SourceDocumentEnumLiteralExtension(enumStr(BudgetReservation_SourceDocumentLine_PSN), enumLiteralStr(BudgetReservation_SourceDocumentLine_PSN, BudgetReservationLine))
]
public class BudgetReservationSourceDocumentLineItem_PSN extends SourceDocumentLineItem
    implements BudgetReservationISourceDocumentLineItem_PSN,
               SourceDocumentLineItemIDescription,
               SourceDocumentLineItemIFinalize,
               SourceDocumentLineItemIProjectRevenue,
               SourceDocumentLineItemIProduct,
               SourceDocumentLineItemIProductQuantity,
               SourceDocumentLineItemIAccDateUpdateable
{
    BudgetReservationHeader_PSN budgetReservationHeader_PSN;
    BudgetReservationLine_PSN   budgetReservationLine_PSN;
    AccountingDate openingDate;
    AccountingDate closingDate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateDefaultDimension</Name>
				<Source><![CDATA[
    protected DimensionDefault calculateDefaultDimension()
    {
        DimensionDefault dimensionDefault;
    
        if (this.parmProjectId() && budgetReservationHeader_PSN.DocumentStatus == BudgetReservationDocumentStatus_PSN::Draft)
        {
            dimensionDefault = ProjTable::find(this.parmProjectId()).DefaultDimension;
        }
        else
        {
            dimensionDefault = super();
        }
    
        return dimensionDefault;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLegalEntityRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the legal entity for the budget reservation line.
    /// </summary>
    /// <returns>
    /// Always returns the record ID of the current company of the budget reservation line.
    /// </returns>    
    protected LegalEntityRecId calculateLegalEntityRecId()
    {
        return CompanyInfo::current();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateSourceDocumentAmountMap</Name>
				<Source><![CDATA[
    protected SourceDocumentAmountMap calculateSourceDocumentAmountMap()
    {
        SourceDocumentAmountMap     sourceDocumentAmountMap;
        Amount                      extendedPriceAmount;
        SourceDocumentLine          sourceDocumentLineValue;
    
        // Create the map
        sourceDocumentAmountMap = SourceDocumentAmountMap::construct();
        sourceDocumentLineValue = this.parmSourceDocumentLine();
        extendedPriceAmount     = budgetReservationLine_PSN.LineAmount;
    
        sourceDocumentAmountMap.insert(SourceDocumentAmount::newFromParameters(sourceDocumentLineValue, extendedPriceAmount, MonetaryAmount::ExtendedPrice));
    
        return sourceDocumentAmountMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUpdateAccountingDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Check if the accounting date can be updated when it lies in a closed period.
    /// </summary>
    /// <returns>
    /// always returns false.
    /// </returns>
    public boolean canUpdateAccountingDate()
    {
        boolean canUpdateDate = false;

        if (BudgetReservationPeriodNotOpenAcctDateAdjustFlight::instance().isEnabled())
        {
            SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
            metadataCollection.SetManagedValue("SourceDocumentIFiscalCalendarProvider", "PrimaryLedgerFiscalCalendar");
            SourceDocumentIFiscalCalendarProvider fiscalCalendarProvider = SysPluginFactory::Instance("Dynamics.AX.Application",
            classStr(SourceDocumentIFiscalCalendarProvider), metadataCollection);

            if (fiscalCalendarProvider)
            {
                FiscalCalendarAccountingDateResolver accountingDateResolver = FiscalCalendarAccountingDateResolver::construct();
                accountingDateResolver.parmLegalEntityRecId(this.parmLegalEntityRecId());
                accountingDateResolver.parmAccountingDateProvidedOnDocument(this.parmAccountingDate());
                accountingDateResolver.parmDocumentLegalEntityPrimaryLedgerFiscalCalendar(fiscalCalendarProvider.getFiscalCalendarForPrimaryLedger(this.parmLegalEntityRecId()));
                accountingDateResolver.parmSysModule(this.parmSourceDocument().parmSourceDocumentType().parmModule());

                if (accountingDateResolver.getAccountingDateResolution().parmIsAccountingDateInFiscalPeriodWithOpenStatusFound())
                {
                    FiscalCalendar fiscalCalendar = FiscalCalendar::find(FiscalCalendars::callFindCalendarForCurrentLegalEntity());
                    AccountingDate newDate = accountingDateResolver.getAccountingDateResolution().parmAccountingDateInFiscalPeriodWithOpenStatus();
                    canUpdateDate = FiscalCalendars::areDatesInSameFiscalYear(fiscalCalendar.RecId, budgetReservationHeader_PSN.AccountingDate, newDate);
                }
            }
        }

        return canUpdateDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUseOriginLineDistForChildAmount</Name>
				<Source><![CDATA[
    public boolean canUseOriginLineDistForChildAmount()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentsBusinessEvent</Name>
				<Source><![CDATA[
    public BusinessEvent documentsBusinessEvent()
    {
        BusinessEvent businessEvent =
            new BusinessEvent(enumNum(BudgetReservation_BusinessEvent_PSN), enum2int(BudgetReservation_BusinessEvent_PSN::BudgetReservationPosting));
    
        return businessEvent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMatchedMainAccDerivationInputChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method determines whether changes to the matched source document line implementation should force a new main account to be redefaulted.
    /// </summary>
    /// <returns>
    /// True if a new main account is needed.
    /// </returns>    
    public boolean hasMatchedMainAccDerivationInputChanged()
    {
        boolean                         hasMainAccDerivationInputChanged;
        SourceDocumentLineMatchingList  lineMatchingList;
    
        lineMatchingList = this.parmSourceDocumentLineMatchingList();
    
        if (lineMatchingList)
        {
            hasMainAccDerivationInputChanged = this.hasMatchedStateDataChangedForBudgetRes(#mainAccountDerivationInputContainer, lineMatchingList);
        }
    
        return hasMainAccDerivationInputChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasMatchedStateDataChangedForBudgetRes</Name>
				<Source><![CDATA[
    private boolean hasMatchedStateDataChangedForBudgetRes(int _subElementToValidate, SourceDocumentLineMatchingList _list)
    {
        SourceDocumentLineMatchingListEnumerator    lineMatchingListEnumerator;
        SourceDocumentLineMatching                  sourceDocumentLineMatching;
        SourceDocumentLineItem                      matchedSourceDocumentLineItem;
        boolean                                     matchedStateDataChanged;
        PurchReqLine                                purchReqLine;
    
        lineMatchingListEnumerator = _list.getEnumerator();
    
        while (!matchedStateDataChanged && lineMatchingListEnumerator.moveNext())
        {
            sourceDocumentLineMatching      = lineMatchingListEnumerator.current();
            matchedSourceDocumentLineItem   = sourceDocumentLineMatching.parmIndependentSourceDocumentLineItem();
    
            if (matchedSourceDocumentLineItem is PurchReqSourceDocLineItem)
            {
                purchReqLine = PurchReqLine::findBySourceDocumentLine(matchedSourceDocumentLineItem.parmSourceDocumentLine().RecId);
    
                if (budgetReservationLine_PSN.ProjId != purchReqLine.ProjId)
                {
                    matchedStateDataChanged = true;
                }
            }
        }
    
        return matchedStateDataChanged;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeImplementation</Name>
				<Source><![CDATA[
    protected void initializeImplementation(SourceDocumentLineImplementation _sourceDocumentLineImplementation, Map _additionalInformation = null)
    {
        budgetReservationLine_PSN = _sourceDocumentLineImplementation;
    
        if (_additionalInformation && _additionalInformation.exists(tableNum(BudgetReservationHeader_PSN)))
        {
            budgetReservationHeader_PSN = _additionalInformation.lookup(tableNum(BudgetReservationHeader_PSN));
        }
        else
        {
            budgetReservationHeader_PSN = budgetReservationLine_PSN.getBudgetReservationHeader();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceDocumentLineMatchingList</Name>
				<Source><![CDATA[
    protected void initSourceDocumentLineMatchingList()
    {
        PurchReqLine purchReqLine;
    
        if (budgetReservationLine_PSN.PurchReqLine)
        {
            purchReqLine = PurchReqLine::find(budgetReservationLine_PSN.PurchReqLine);
    
            sourceDocumentLineMatchingList = SourceDocumentLineMatchingFacade::addSourceDocLineItemToList(this, purchReqLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>IsBudgetResLineProjAcctDistEditable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the accounting distribution on the budget reservation line is editable based on whether the budget
    /// reservation line references a purchase requisition and a project is present.
    /// </summary>
    /// <returns>
    /// true if the budget reservation line does not reference a purchase requisition line or does not have a project Id; otherwise, false.
    /// </returns>    
    private boolean IsBudgetResLineProjAcctDistEditable()
    {
        boolean IsBudgetResLineProjAcctDistEditable;
    
        IsBudgetResLineProjAcctDistEditable = !budgetReservationLine_PSN.PurchReqLine || budgetReservationLine_PSN.ProjId == '';
    
        return IsBudgetResLineProjAcctDistEditable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmOpeningDate</Name>
				<Source><![CDATA[
    public AccountingDate parmOpeningDate(AccountingDate _openingDate = openingDate)
    {
        openingDate = _openingDate;

        return openingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClosingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmClosingDate(AccountingDate _closingDate = closingDate)
    {
        closingDate = _closingDate;

        return closingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAccountingDate</Name>
				<Source><![CDATA[
    public AccountingDate parmAccountingDate()
    {
        AccountingDate ret;
        
        ret = super();

        if (closingDate)
        {
            ret = closingDate;
        }
        else if (openingDate)
        {
            ret = openingDate;
        }
        else
        {
            if (budgetReservationHeader_PSN.DocumentStatus == BudgetReservationDocumentStatus_PSN::Canceled)
            {
                ret = budgetReservationHeader_PSN.CancelDate;
            }
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetReservationTypeRecId</Name>
				<Source><![CDATA[
    public BudgetReservationTypeRecId_PSN parmBudgetReservationTypeRecId()
    {
        return budgetReservationHeader_PSN.BudgetReservationType_PSN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategory</Name>
				<Source><![CDATA[
    public Common parmCategory()
    {
        return EcoResCategory::find(budgetReservationLine_PSN.ProcurementCategory);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentStateDataAmountResolution</Name>
				<Source><![CDATA[
    protected SourceDocumentLineStateContainer parmCurrentStateDataAmountResolution()
    {
        SourceDocumentLineStateContainer sourceDocumentLineStateContainer;
    
        sourceDocumentLineStateContainer = super();
        sourceDocumentLineStateContainer += [budgetReservationLine_PSN.PurchReqLine];
    
        return sourceDocumentLineStateContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentStateDataDimensionDerivation</Name>
				<Source><![CDATA[
    protected SourceDocumentLineStateContainer parmCurrentStateDataDimensionDerivation()
    {
        SourceDocumentLineStateContainer sourceDocumentLineStateContainer;
    
        sourceDocumentLineStateContainer = super();
        sourceDocumentLineStateContainer += [budgetReservationLine_PSN.PurchReqLine];
    
        return sourceDocumentLineStateContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCurrentStateDataMainAccDerivation</Name>
				<Source><![CDATA[
    protected SourceDocumentLineStateContainer parmCurrentStateDataMainAccDerivation()
    {
        SourceDocumentLineStateContainer sourceDocumentLineStateContainer;
    
        sourceDocumentLineStateContainer = super();
        sourceDocumentLineStateContainer += [budgetReservationLine_PSN.PurchReqLine];
    
        return sourceDocumentLineStateContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the description of the budget reservation line.
    /// </summary>
    /// <returns>
    /// The description of the budget reservation line.
    /// </returns>
    /// <remarks>
    /// This is used on the accounting distributions form.
    /// </remarks>    
    public Description parmDescription()
    {
        return budgetReservationLine_PSN.TransactionText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInventTable</Name>
				<Source><![CDATA[
    public Common parmInventTable()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsDocumentLineEditable</Name>
				<Source><![CDATA[
    public boolean parmIsDocumentLineEditable()
    {
        boolean                 isEditable;
        BudgetReservation_PSN   budgetReservation;
    
        budgetReservation = BudgetReservation_PSN::newFromBudgetReservationHeader_PSN(budgetReservationHeader_PSN);
    
        isEditable = super();
    
        isEditable = isEditable && budgetReservation.canEditDocument() && this.IsBudgetResLineProjAcctDistEditable();
    
        return isEditable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmItemDataAreaId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    public ItemId parmItemId()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerDimensionDefaultAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionDefaultAccount parmLedgerDimensionDefaultAccount(LegalEntityRecId _legalEntityRecId = this.parmLegalEntityRecId())
    {
        LedgerDimensionDefaultAccount ledgerDimensionDefaultAccount;
    
        if (!this.parmProjectId())
        {
            ledgerDimensionDefaultAccount = budgetReservationLine_PSN.LedgerDimension;
        }
    
        return ledgerDimensionDefaultAccount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    public LineNum parmLineNum()
    {
        return budgetReservationLine_PSN.LineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectActivityNumber</Name>
				<Source><![CDATA[
    public ProjActivityNumber parmProjectActivityNumber()
    {
        return budgetReservationLine_PSN.ActivityNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectCategoryId</Name>
				<Source><![CDATA[
    public ProjCategoryId parmProjectCategoryId()
    {
        return budgetReservationLine_PSN.ProjCategoryId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectFundingSourceRecId</Name>
				<Source><![CDATA[
    public ProjFundingSourceRefId parmProjectFundingSourceRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectId</Name>
				<Source><![CDATA[
    public ProjId parmProjectId()
    {
        return budgetReservationLine_PSN.ProjId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectItemSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxItemGroup parmProjectItemSalesTaxGroup()
    {
        return budgetReservationLine_PSN.ProjTaxItemGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectLineProperty</Name>
				<Source><![CDATA[
    public ProjLinePropertyId parmProjectLineProperty()
    {
        return budgetReservationLine_PSN.ProjLinePropertyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesCurrencyCode</Name>
				<Source><![CDATA[
    public ProjSalesCurrencyCode parmProjectSalesCurrencyCode()
    {
        return budgetReservationLine_PSN.ProjSalesCurrencyId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesPrice</Name>
				<Source><![CDATA[
    public SalesPrice parmProjectSalesPrice()
    {
        return budgetReservationLine_PSN.ProjSalesPrice;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesTaxGroup</Name>
				<Source><![CDATA[
    public ProjTaxGroup parmProjectSalesTaxGroup()
    {
        return budgetReservationLine_PSN.ProjTaxGroupId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectSalesUnit</Name>
				<Source><![CDATA[
    public SalesUnit parmProjectSalesUnit()
    {
        return budgetReservationLine_PSN.ProjSalesUnitId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectTransactionId</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmProjectTransactionId()
    {
        return budgetReservationLine_PSN.ProjTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectWorkerRecId</Name>
				<Source><![CDATA[
    public HcmWorkerRecId parmProjectWorkerRecId()
    {
        return budgetReservationLine_PSN.ProjWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantity</Name>
				<Source><![CDATA[
    public Qty parmQuantity()
    {
        return budgetReservationLine_PSN.Quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocLineFinalizedDate</Name>
				<Source><![CDATA[
    public AccountingDate parmSourceDocLineFinalizedDate()
    {
        return budgetReservationHeader_PSN.FinalizeClosingDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStocked</Name>
				<Source><![CDATA[
    public TradeStockedProduct parmStocked()
    {
        return NoYes::No;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransactionCurrencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode parmTransactionCurrencyCode()
    {
        return budgetReservationLine_PSN.Currency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQuantityDecimalPlaces</Name>
				<Source><![CDATA[
    public Decimals parmQuantityDecimalPlaces()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceRecId</Name>
				<Source><![CDATA[
    public ResourceRecId parmProjectResourceRecId()
    {
        return budgetReservationLine_PSN.ProjWorker;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCategoryName</Name>
				<Source><![CDATA[
   public str parmCategoryName()
   {
        return budgetReservationLine_PSN.TransactionText;
   }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjectResourceCategoryRecId</Name>
				<Source><![CDATA[
    public ResourceCategoryRecId parmProjectResourceCategoryRecId()
    {
        return ResourceFacade::getResourceCategory(this.parmProjectResourceRecId(), this.parmAccountingDate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImplementsSourceDocOriginLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden to skip the origin source document line functionality when the relieving document
    /// is of type Vendor invoice, since it is not applicable in this scenario.
    /// </summary>
    /// <returns>
    /// true if the relieving type is other than Vendor invoice; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean parmImplementsSourceDocOriginLine()
    {
        boolean implementsSourceDocOriginLine = true;
        
        if (this.isGBRRelievedByInvoiceAndPerfFlightEnabled())
        {
            implementsSourceDocOriginLine = false;
        }
        
        return implementsSourceDocOriginLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowMatchSingleMonetaryAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Overridden to allow the matching on a single <c>MonetaryAmount</c> value functionality, 
    /// since there is only a single <c>MonetaryAmount</c> value on a GBR.
    /// </summary>
    /// <returns>
    /// true if the flight is enabled and the relieving type is Vendor invoice; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean allowMatchSingleMonetaryAmount()
    {
        boolean allowsMatchingOnSingleMonetaryAmount;
        
        if (this.isGBRRelievedByInvoiceAndPerfFlightEnabled())
        {
            allowsMatchingOnSingleMonetaryAmount = true;
        }
        
        return allowsMatchingOnSingleMonetaryAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGBRRelievedByInvoiceAndPerfFlightEnabled</Name>
				<Source><![CDATA[
    private boolean isGBRRelievedByInvoiceAndPerfFlightEnabled()
    {
        return BudgetReservationVendInvoicePerfFlight_PSN::instance().isEnabled()
            && BudgetReservationType_PSN::getRelievingTypeForBudgetReservation(budgetReservationHeader_PSN.RecId) == BudgetReservationRelievingDocument_PSN::VendorInvoice;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>