<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgDeactivatePastWorkers</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Batch job wich deactivates time registration workers whose employment end date is earlier than today.
/// </summary>
class JmgDeactivatePastWorkers extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        JmgEmployee             jmgEmployee;
        HcmEmployment           hcmEmployment;
        JmgStampJournalTable    jmgStampJournalTable;
        JmgDate                 invalidFromDate;
        JmgDate                 invalidToDate;
        JmgWorkerRecId          prevWorker;
        HcmEmploymentValidTo    datetimeNow = DateTimeUtil::utcNow();

        ttsbegin;

        update_recordset jmgEmployee
            setting Active = NoYes::No
            where jmgEmployee.Active == NoYes::Yes
            notexists join hcmEmployment
                where jmgEmployee.Worker        == hcmEmployment.Worker
                   && hcmEmployment.ValidTo     >= datetimeNow
                   && hcmEmployment.ValidFrom   <= datetimeNow;

        utcdatetime validFrom   = DateTimeUtil::minValue();
        utcdatetime validTo     = DateTimeUtil::maxValue();
        while select ValidTimeState(validFrom, validTo) ValidFrom, ValidTo, Worker from hcmEmployment
            order by Worker, ValidFrom
            where hcmEmployment.LegalEntity == CompanyInfo::current()
        {
            if (hcmEmployment.Worker != prevWorker)
            {
                // delete [maxof(validTo), dateMax()] for the previous worker
                if (prevWorker)
                {
                            delete_from jmgStampJournalTable
                                where jmgStampJournalTable.Worker       == prevWorker
                                   && jmgStampJournalTable.ProfileDate  >  invalidFromDate
                                   && jmgStampJournalTable.Calculated   == NoYes::No;
                }

                prevWorker = hcmEmployment.Worker;
                invalidFromDate = dateNull();
            }

            invalidToDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(hcmEmployment.ValidFrom, DateTimeUtil::getUserPreferredTimeZone()));

            // delete [prevValidTo, thisValidFrom]
            delete_from jmgStampJournalTable
                where jmgStampJournalTable.Worker       == hcmEmployment.Worker
                   && jmgStampJournalTable.ProfileDate  >  invalidFromDate
                   && jmgStampJournalTable.ProfileDate  <  invalidToDate
                   && jmgStampJournalTable.Calculated   == NoYes::No;

            invalidFromDate = DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(hcmEmployment.ValidTo, DateTimeUtil::getUserPreferredTimeZone()));
        }

        // delete [maxof(validTo), dateMax()] for the last worker
        if (prevWorker)
        {
            delete_from jmgStampJournalTable
                where jmgStampJournalTable.Worker       == prevWorker
                   && jmgStampJournalTable.ProfileDate  >  invalidFromDate
                   && jmgStampJournalTable.Calculated   == NoYes::No;
        }

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void main(Args args)
    {
        JmgDeactivatePastWorkers job = new JmgDeactivatePastWorkers();

        if (job.prompt())
        {
            job.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS4008455";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>