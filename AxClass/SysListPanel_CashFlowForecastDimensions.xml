<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SysListPanel_CashFlowForecastDimensions</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Provides a dimensions selection panel to the Cash flow forecast setup
/// </summary>
public class SysListPanel_CashFlowForecastDimensions extends SysListPanel
{
    private Set allowedDimensionAttributes;
    private DimensionTopicsPrioritizer dimensionTopicsPrioritizer;
    private DimensionHierarchyType dimensionHierarchyType = DimensionHierarchyType::CashFlowForecast;

    private const int MaxAllowedDimensions = 2;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addData</Name>
				<Source><![CDATA[
    public void addData(container data)
    {
        DimensionTopic dimensionTopic;
        DimensionAttributeRecId dimAttrRecId;
        int i;

        for (i = 1; i <= conlen(data); i++)
        {
            dimAttrRecId = conpeek(data, i);
            dimensionTopic = DimensionTopic::construct(dimAttrRecId);
            dimensionTopicsPrioritizer.addDimensionTopic(dimensionTopic);
            allowedDimensionAttributes.remove(dimensionTopic.getDimensionName());
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>getData</Name>
				<Source><![CDATA[
    public container getData()
    {
        ListEnumerator selectedListEnumerator = dimensionTopicsPrioritizer.getTopicsEnumerator(); 
        
        container selectedData;
        container availableData;
        DimensionTopic dimensionTopic;

        while (selectedListEnumerator.moveNext())
        {
            dimensionTopic = selectedListEnumerator.current();
            selectedData += [[dimensionTopic.parmDimensionAttributeId(), dimensionTopic.getDimensionName()]];
        }

        SetEnumerator allowedSetEnumerator = allowedDimensionAttributes.getEnumerator();
        while (allowedSetEnumerator.moveNext())
        {
            Name dimAttrName = allowedSetEnumerator.current();
            DimensionAttribute dimAttr = DimensionAttribute::findByName(dimAttrName);

            if (dimAttr.isBackingTableTypeAllowedForCashFlowForecasting())
            {
                dimensionTopic = DimensionTopic::construct(dimAttr.RecId);

                if (!dimensionTopicsPrioritizer.hasDimensionTopic(dimensionTopic))
                {
                    availableData += [[dimensionTopic.parmDimensionAttributeId(), dimensionTopic.getDimensionName()]];
                }
            }
        }

        return [availableData, selectedData];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAllowedDimensionAttributes</Name>
				<Source><![CDATA[
    public Set parmAllowedDimensionAttributes(Set _allowedDimensionAttributes = allowedDimensionAttributes)
    {
        allowedDimensionAttributes = _allowedDimensionAttributes;
        return allowedDimensionAttributes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaptionSelected</Name>
				<Source><![CDATA[
    public str parmCaptionSelected(str _captionSelected = captionSelected)
    {
        return "@SYS5965";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCaptionAvailable</Name>
				<Source><![CDATA[
    public str parmCaptionAvailable(str _captionAvailable = captionAvailable)
    {
        return "@SYS30545";
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDimensionTopicsPrioritizer</Name>
				<Source><![CDATA[
    public DimensionTopicsPrioritizer parmDimensionTopicsPrioritizer(DimensionTopicsPrioritizer _dimensionTopicsPrioritizer = dimensionTopicsPrioritizer)
    {
        dimensionTopicsPrioritizer = _dimensionTopicsPrioritizer;

        return dimensionTopicsPrioritizer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmHasRemoveAllButton</Name>
				<Source><![CDATA[
    public boolean parmHasRemoveAllButton(boolean _hasRemoveAllButton = hasRemoveAllButton)
    {
        hasRemoveAllButton = _hasRemoveAllButton;
        return hasRemoveAllButton && this.parmItemsNeeded() == 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmImageId</Name>
				<Source><![CDATA[
    public int parmImageId(int _imageId = imageId)
    {
        #resAppl

        return #ImageDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeData</Name>
				<Source><![CDATA[
    public void removeData(container data)
    {
        DimensionTopic dimensionTopic;
        DimensionAttributeRecId dimAttrRecId;
        int i;

        for (i = conlen(data); i; i--)
        {
            dimAttrRecId = conpeek(data, i);
            dimensionTopic = DimensionTopic::construct(dimAttrRecId);
            dimensionTopicsPrioritizer.removeDimensonTopic(dimensionTopic);
            allowedDimensionAttributes.add(dimensionTopic.getDimensionName());
        }
        
    }

]]></Source>
			</Method>
			<Method>
				<Name>panel_viewSelected_Up_clicked</Name>
				<Source><![CDATA[
    protected void panel_viewSelected_Up_clicked(FormButtonControl control)
    {
        control.clicked();
        this.moveUp_Selected();

        if(!control.enabled())
        {
            downButton.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>panel_viewSelected_Down_clicked</Name>
				<Source><![CDATA[
    protected void panel_viewSelected_Down_clicked(FormButtonControl control)
    {
        control.clicked();
        this.moveDown_Selected();

        if(!control.enabled())
        {
            upButton.setFocus();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sortMethod</Name>
				<Source><![CDATA[
    protected FormListSort sortMethod()
    {
        return FormListSort::NoSort;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static SysListPanel_CashFlowForecastDimensions construct()
    {
        return new SysListPanel_CashFlowForecastDimensions();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    public static SysListPanel newForm(
        FormRun formRun,
        int     parentId,
        boolean hasAddAllButton     = false,
        boolean hasRemoveAllButton  = false,
        boolean hasUpDownButton     = false)
    {
        SysListPanel_CashFlowForecastDimensions sysListPanel = SysListPanel_CashFlowForecastDimensions::construct();

        sysListPanel.parmFormRun(formRun);
        sysListPanel.parmParentId(parentId);
        sysListPanel.parmHasAddAllButton(hasAddAllButton);
        syslistPanel.parmHasRemoveAllButton(hasRemoveAllButton);
        syslistPanel.parmHasUpDownButton(hasUpDownButton);

        sysListPanel.build();

        return sysListPanel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionsUpdated</Name>
				<Source><![CDATA[
    protected container positionsUpdated()
    {
        Map positionMap = new Map(Types::String, Types::Integer);
        int idx = viewSelected.getNextItem(FormListNext::All);

        while (idx != -1)
        {
            DimensionAttributeRecId dimensionAttributeRecId = viewSelected.getItem(idx).data();
            positionMap.insert(int642str(dimensionAttributeRecId), idx);

            DimensionTopic dimensionTopic = DimensionTopic::construct(dimensionAttributeRecId);
            dimensionTopicsPrioritizer.removeDimensonTopic(dimensionTopic);
            dimensionTopicsPrioritizer.addDimensionTopic(dimensionTopic);

            idx = viewSelected.getNextItem(FormListNext::All, idx);
        }

        this.positionsUpdatedDelegate();

        return positionMap.pack();
    }

]]></Source>
			</Method>
			<Method>
				<Name>positionsUpdatedDelegate</Name>
				<Source><![CDATA[
    delegate void positionsUpdatedDelegate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(anytype _data, AddRemove _addRemove)
    {
        boolean ret = true;

        ret = this.callValidateListPanel(_data, _addRemove);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateListPanel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the signature of the event that will respond to the changes on data entity list panel.
    /// </summary>
    /// <param name = "_dimensionAttributeId">The record ID of the <c>DimensionAttribute</c> record.</param>
    /// <param name = "_addRemove">The action taken on the element in the panel.</param>
    /// <param name = "_ret">The <c>EventHandlerResult</c> of the method.</param>
    delegate void validateListPanel(DimensionAttributeRecId _dimensionAttributeId, AddRemove _addRemove, EventHandlerResult _ret)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>callValidateListPanel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the delegate class and executes the subscribers to the dimension entity list panel delegate.
    /// </summary>
    /// <param name = "_dimensionAttributeId">The record ID of the <c>DimensionAttribute</c> record.</param>
    /// <param name = "_addRemove">The action taken on the element in the panel.</param>
    /// <returns>true if the validation was successful; otherwise, false.</returns>
    private boolean callValidateListPanel(DimensionAttributeRecId _dimensionAttributeId, AddRemove _addRemove)
    {
        boolean isValid = true;
        EventHandlerResult ret = new EventHandlerResult();
        ret.result(isValid);
        this.validateListPanel(_dimensionAttributeId, _addRemove, ret);
        return ret.result();
    }

]]></Source>
			</Method>
			<Method>
				<Name>callAddRequiredDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates the delegate class and executes the subscribers to the dimension entity list panel delegate.
    /// </summary>
    public void callAddRequiredDimensions()
    {
        DimensionTopicsPrioritizer dimTopicsPrioritizer;
        EventHandlerResult ret = new EventHandlerResult();
        ret.result(dimTopicsPrioritizer);
        this.addRequiredDimensions(ret);
        dimTopicsPrioritizer = ret.result() as DimensionTopicsPrioritizer;

        ListEnumerator listEnumerator = dimTopicsPrioritizer.getTopicsEnumerator();
        
        while (listEnumerator.moveNext())
        {
            DimensionTopic dimensionTopic = listEnumerator.current();
            if (!dimensionTopicsPrioritizer.hasDimensionTopic(dimensionTopic))
            {
                dimensionTopicsPrioritizer.addDimensionTopic(dimensionTopic);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRequiredDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the signature of the event that will add predefined dimensions to the list panel.
    /// </summary>
    /// <param name = "_ret">The <c>EventHandlerResult</c> of the method.</param>
    delegate void addRequiredDimensions(EventHandlerResult _ret)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged_selected</Name>
				<Source><![CDATA[
    public void selectionChanged_selected(int _idx, anytype _Data)
    {
        super(_idx, _Data);

        this.enableAddButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fill</Name>
				<Source><![CDATA[
    public void fill()
    {
        super();

        this.enableAddButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableAddButton</Name>
				<Source><![CDATA[
    private void enableAddButton()
    {
        int selectedCount = viewSelected.getCount();
        int selectedAvailableCount = viewAvailable.getSelectedCount();
        boolean availableSelectedTwoOrLess = selectedAvailableCount + selectedCount <= MaxAllowedDimensions;
        boolean selectedBelowTwo = selectedCount < MaxAllowedDimensions;

        addButton.enabled(selectedBelowTwo && availableSelectedTwoOrLess);
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged_available</Name>
				<Source><![CDATA[
    public void selectionChanged_available(int _idx, anytype _Data)
    {
        super(_idx, _Data);
        
        this.enableAddButton();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>