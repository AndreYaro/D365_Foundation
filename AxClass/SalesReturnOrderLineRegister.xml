<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesReturnOrderLineRegister</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesReturnOrderLineRegister</c> class serves as a entry point to the product registration
/// process and is specialized for the sales return order process.
/// </summary>
/// <remarks>
/// The main purpose of this class is to prompt for the return disposition code and handle sales return
/// order specialties like creating inventory transactions.
/// </remarks>
class SalesReturnOrderLineRegister extends TradeOrderLineRegister
{
    ReturnDispositionCodeId returnDispositionCodeId;
    DialogField             dialogDispositionCodeId;
    SalesLine               salesLine;

    boolean             reverseInventTrans;
    boolean             recreateReservationLine;
    boolean             inRegistration;

        #LOCALMACRO.CurrentList
            returnDispositionCodeId
        #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the Application Object Tree (AOT).
    /// </remarks>
    public Object dialog()
    {
        DialogRunbase dialog = super();

        dialog.caption("@SYS332907");

        dialog.addText("@SYS332908");

        dialog.addText("@SYS332909");

        dialogDispositionCodeId = dialog.addFieldValue(extendedtypestr(ReturnDispositionCodeId), '');
        FormBuildStringControl formStringControlDispositionCodeId = dialogDispositionCodeId.control();
        formStringControlDispositionCodeId.registerOverrideMethod(methodstr(FormStringControl, lookup), methodstr(SalesReturnOrderLineRegister, lookupReturnDispositionCode), this);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the values from the dialog.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean getFromDialog()
    {
        returnDispositionCodeId = dialogDispositionCodeId.value();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        boolean ret = super();

        salesLine = salesPurchLine;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupReturnDispositionCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Provides a customized return disposition code drop down list to the dialog.
    /// </summary>
    /// <param name="_ctrl">
    ///     A <c>FormStringControl</c> object.
    /// </param>
    protected void lookupReturnDispositionCode(FormStringControl _ctrl)
    {
        Set dispositionActions = new Set(Types::Enum);

        if (salesLine.isStocked())
        {
            SalesTable::lookupDispositionCodeId(salesLine.SalesId, _ctrl);
        }
        else
        {
            dispositionActions.add(DispositionAction::Credit);
            dispositionActions.add(DispositionAction::ReturnToCust);
            dispositionActions.add(DispositionAction::Scrap);
            ReturnDispositionCode::lookupDispositionCode(_ctrl, '', dispositionActions);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    public void run()
    {
        this.runPreSuper();
        super();
        this.runPostSuper();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPostSuper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains logic to be executed after the call to the <c>super</c> class in the <c>run</c> method.
    /// </summary>
    public void runPostSuper()
    {
        ttsbegin;
        
        salesLine = SalesLine::findInventTransId(salesLine.InventTransId, true);

        if (inRegistration)
        {
            if (salesLine.ReturnStatus == ReturnStatusLine::Awaiting)
            {   //The registration form was closed without register anything.

                if (reverseInventTrans
                    && !salesLine.ReturnAllowReservation)
                {
                    SalesLine::changeReturnOrderType(salesLine.InventTransId, null, true);
                    salesLine = SalesLine::findInventTransId(salesLine.InventTransId, true);
                }

                if (salesLine.ReturnDispositionCodeId)
                {
                    salesLine.ReturnDispositionCodeId = '';
                    salesLine.update();
                }
            }
        }
        else
        {
            if (salesLine.ReturnStatus == ReturnStatusLine::Registered)
            {   //The registration form was closed without cancel anything.
                if (recreateReservationLine)
                {
                    salesLine.createReturnReservationLine();
                    salesLine = SalesLine::findInventTransId(salesLine.InventTransId, true);
                }
            }
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPreSuper</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains logic to be executed before the call to the <c>super</c> class in the <c>run</c> method
    /// </summary>
    public void runPreSuper()
    {
        SalesLine           reservationLine;

        if (salesLine.ReturnStatus == ReturnStatusLine::Awaiting)
        {
            ttsbegin;

            inRegistration = true;

            if (!salesLine.ReturnAllowReservation
                &&  salesPurchLine.salesPurchLineInterface().isStocked())
            {
                SalesLine::changeReturnOrderType(salesLine.InventTransId);
                salesLine = SalesLine::findInventTransId(salesLine.InventTransId, true);
                reverseInventTrans = true;
            }

            salesLine.ReturnDispositionCodeId = returnDispositionCodeId;
            salesLine.update();

            ttscommit;

            //Resetting the args.record() in order to ensure the disposition code is passed to the later update process.
            args.record().data(salesLine);
        }
        else
        if (salesLine.ReturnStatus == ReturnStatusLine::Registered)
        {
            ttsbegin;

            select forupdate firstonly reservationLine where reservationLine.InventRefTransId == salesLine.InventTransId;
            if (reservationLine
                || salesLine.qtyMarked())
            {
                if ((salesLine.returnDispositionCode().DispositionAction == DispositionAction::ReplaceScrap
                    || salesLine.returnDispositionCode().DispositionAction == DispositionAction::ReturnToCust
                    || salesLine.returnDispositionCode().DispositionAction == DispositionAction::Scrap))
                {
                    if (reservationLine.SalesQty == reservationLine.RemainSalesPhysical)
                    {
                        InventTransOriginId reservationLineInventTransOriginId = InventTransOriginSalesLine::findInventTransOriginId(reservationLine.DataAreaId, reservationLine.InventTransId);
                        InventTransOriginId salesLineInventTransOriginId = InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId, salesLine.InventTransId);
                        InventTransOrigin::deleteMarking(salesLineInventTransOriginId, reservationLineInventTransOriginId, -salesLine.QtyOrdered);
                        reservationLine.delete();
                        recreateReservationLine = true;
                    }
                }
                else
                {
                    throw error("@SYS332911");
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the dialog is to be launched.
    /// </summary>
    /// <returns>
    /// true if the return order line status is the <c>ReturnStatusLine::Awaiting</c> enumeration value;
    /// otherwise, false.
    /// </returns>
    public boolean showDialog()
    {
        return salesLine.ReturnStatus == ReturnStatusLine::Awaiting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the dialog input.
    /// </summary>
    /// <param name="calledFrom">
    ///     An object type.
    /// </param>
    /// <returns>
    ///     true if appropriate values are entered to the dialog; otherwise, false.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ret = super(calledFrom);

        if (ret && !returnDispositionCodeId)
        {
            return checkFailed("@SYS332910");
        }

        if (ret && ReturnDispositionCode::find(returnDispositionCodeId).DispositionAction == DispositionAction::CreditOnly)
        {
            return checkFailed(strFmt("@SYS121768", returnDispositionCodeId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static SalesReturnOrderLineRegister construct()
    {
        return new SalesReturnOrderLineRegister();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
