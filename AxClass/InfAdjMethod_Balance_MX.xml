<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InfAdjMethod_Balance_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>InfAdjMethod_Balance_MX</c> class handles the calculation of inflation adjustment for the
///    Balance adjustment method and returns the <c>InvAdjustmentReportTmp_MX</c> temporary table buffer
///    to use for posting and reports.
/// </summary>
public class InfAdjMethod_Balance_MX extends InfAdjMethod_MX
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateTmpTable</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the <c>InvAdjustmentReportTmp_MX</c> temporary table for the Balance adjustment method.
    /// </summary>
    /// <param name="_fromDate">
    ///    The From date to use when selecting the range of transactions.
    /// </param>
    /// <param name="_toDate">
    ///    The To date to use when selecting the range of transactions.
    /// </param>
    /// <returns>
    ///    The <c>InvAdjustmentReportTmp_MX</c> temporary table buffer after the inflation adjustment is
    ///    calculated for the Balance adjustment method.
    /// </returns>
    /// <remarks>
    ///    This method considers the main accounts that meet the criteria for the inventory accounts and
    ///    calculates the inflation adjustment based on the formula that is defined.
    /// </remarks>
    public Common populateTmpTable(
        FromDate  _fromDate,
        ToDate    _toDate)
    {
        MainAccount                         mainAccount;
        InvAdjustmentReportTmp_MX           invReportTmp;
        real                                adjustmentRatio;
        InpcRate_MX                         rateOfToDate;
        InpcRate_MX                         prevRate;
        CurrencyCode                        currencyCode;
        boolean                             insertedCurrencyCode = false;
        FromDate                            startOfYear;
        Amount                              transAmountBeforeFromDate;
        Amount                              openingBalanceStartOfYear;
        Amount                              openingBalanceCurrentMonth;
        Amount                              transAmountCurrentMonth;
        Amount                              closingBalance;
        int                                 diffInMonths;
        int                                 currentMonth;
        FromDate                            startDate;
        ToDate                              endDate;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;
        GeneralJournalAccountEntry          generalJournalAccountEntry;

        fromDate = _fromDate;
        toDate   = _toDate;

        rateOfToDate = this.getInflationRate(mthofyr(toDate), year(toDate));

        prevRate     = this.getInflationRate(mthofyr(mkdate(1, mthofyr(toDate), year(toDate)) - 1), year(mkdate(1, mthofyr(toDate), year(toDate)) - 1));

        adjustmentRatio = rateOfToDate / prevRate;
        adjustmentRatio = decround(adjustmentRatio, 4);
        currencyCode    = Ledger::accountingCurrency();
        startOfYear     = LedgerFiscalCalendar::findOpeningPeriodStartDateByDate(CompanyInfoHelper::fiscalCalendarRecId(), fromDate);

        diffInMonths = InfAdjValidation_MX::monthDifference(fromDate, toDate);

        while select Type, RecId from mainAccount
            where mainAccount.InflationAdjustment_MX
               && mainAccount.AdjustmentMethod_MX == AdjustmentMethod_MX::Balance
        {
            while select DisplayValue, RecId
                from  dimensionAttributeValueCombination
                exists join LedgerDimension from generalJournalAccountEntry
                where dimensionAttributeValueCombination.RecId == generalJournalAccountEntry.LedgerDimension
                   && dimensionAttributeValueCombination.MainAccount == mainAccount.RecId
            {
                startDate    = fromDate;
                endDate      = endmth(startDate);

                openingBalanceStartOfYear = 0;
                transAmountBeforeFromDate = 0;
                currentMonth = 1;

                openingBalanceStartOfYear = this.getAccountingCurrencyAmount(startOfYear, endmth(startOfYear), mainAccount.RecId, FiscalPeriodType::Opening, dimensionAttributeValueCombination.DisplayValue);

                if (startOfYear != fromDate)
                {
                    transAmountBeforeFromDate = this.getAccountingCurrencyAmount(startOfYear, fromDate - 1, mainAccount.RecId, FiscalPeriodType::Operating, dimensionAttributeValueCombination.DisplayValue, true);
                }
                openingBalanceCurrentMonth = openingBalanceStartOfYear + transAmountBeforeFromDate;
                closingBalance             = 0;

                invReportTmp.LedgerDimension = dimensionAttributeValueCombination.RecId;
                invReportTmp.DisplayValue    = dimensionAttributeValueCombination.DisplayValue;
                invReportTmp.MainAccountName = MainAccount::getLocalizedName(mainAccount.RecId);
                invReportTmp.Balance         = 0;

                invReportTmp.InpcToDate      = rateOfToDate;
                invReportTmp.InpcPrevToDate  = prevRate;
                invReportTmp.InflationRatio  = adjustmentRatio;

                while (currentMonth <= diffInMonths)
                {
                    transAmountCurrentMonth = 0;
                    transAmountCurrentMonth = this.getAccountingCurrencyAmount(startDate, endDate, mainAccount.RecId, FiscalPeriodType::Operating, dimensionAttributeValueCombination.DisplayValue);
                    closingBalance          = closingBalance + transAmountCurrentMonth;

                    startDate = endDate + 1;
                    endDate   = endmth(startDate);
                    currentMonth++;
                }

                closingBalance = closingBalance + openingBalanceCurrentMonth;

                invReportTmp.Balance = closingBalance;

                invReportTmp.BalanceAdjusted = (invReportTmp.Balance * adjustmentRatio) - invReportTmp.Balance;
                invReportTmp.BalanceAdjusted = CurrencyExchange::round(invReportTmp.BalanceAdjusted, currencyCode);

                if (!insertedCurrencyCode)
                {
                    invReportTmp.CurrencyCode = currencyCode;
                    insertedCurrencyCode      = true;
                }

                if (invReportTmp.Balance)
                {
                    invReportTmp.insert();
                }
            }
        }

        return invReportTmp;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>