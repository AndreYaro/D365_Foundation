<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CFMDistributionDocument_DistTmp</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This class represents the instance of <c>CFMDistributionDocument</c> based on <c>CFMReferenceDistributionHeaderTmp</c> and <c>CFMReferenceDistributionLinesTmp</c> temporary tables.
/// </summary>
class CFMDistributionDocument_DistTmp extends CFMDistributionDocument
{
    CFMReferenceDistributionHeaderTmp distributionHeader;
    CFMReferenceDistributionLinesTmp distributionLines;

    QueryBuildRange lineHeaderRange;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates instance of <c>CFMDistributionDocument_DistTmp</c> based on data from refernce distributions.
    /// </summary>
    /// <param name="_distributionsHeader">
    /// Headers of the document.
    /// </param>
    /// <param name="_distributionLines">
    /// Lines of the document.
    /// </param>
    /// <param name="_currency">
    /// Document currency code.
    /// </param>
    /// <returns>
    /// Instance of <c>CFMDistributionDocument_DistTmp</c>.
    /// </returns>
    public static CFMDistributionDocument_DistTmp construct(CFMReferenceDistributionHeaderTmp _distributionsHeader, CFMReferenceDistributionLinesTmp _distributionLines, CurrencyCode _currency)
    {
        CFMDistributionDocument_DistTmp distributionDocument = new CFMDistributionDocument_DistTmp();

        distributionDocument.initializeFromDistTmp(_distributionsHeader, _distributionLines, _currency);

        return distributionDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    public CurrencyCode currencyCode()
    {
        return currencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentHeader</Name>
				<Source><![CDATA[
    protected CFMReferenceDistributionHeaderTmp currentHeader()
    {
        CFMReferenceDistributionHeaderTmp header;

        if (this.existsHeader())
        {
            header = headerQueryRun.get(tableNum(CFMReferenceDistributionHeaderTmp));
        }

        return header;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentLine</Name>
				<Source><![CDATA[
    protected CFMReferenceDistributionLinesTmp currentLine()
    {
        return lineQueryRun.get(tableNum(CFMReferenceDistributionLinesTmp));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteHeader</Name>
				<Source><![CDATA[
    public void deleteHeader()
    {
        CFMReferenceDistributionHeaderTmp currentHeader = this.currentHeader();
        currentHeader.delete();

        headerSelected = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteLinesForHeader</Name>
				<Source><![CDATA[
    protected void deleteLinesForHeader()
    {
        delete_from distributionLines
            where distributionLines.DistributionHeader == this.currentHeader().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSelectedLinesForHeader</Name>
				<Source><![CDATA[
    protected void deleteSelectedLinesForHeader()
    {
        CFMReferenceDistributionHeaderTmp currentHeader = this.currentHeader();

        switch (lineSelectionType)
        {
            case CFMDistributionLineSelectionType::All:
                delete_from distributionLines
                    where distributionLines.DistributionHeader == currentHeader.RecId;
                break;

            case CFMDistributionLineSelectionType::Positive:
                delete_from distributionLines
                    where distributionLines.DistributionHeader == currentHeader.RecId
                       && distributionLines.Amount > 0;
                break;

            case CFMDistributionLineSelectionType::Negative:
                delete_from distributionLines
                    where distributionLines.DistributionHeader == currentHeader.RecId
                       && distributionLines.Amount < 0;
                break;

            case CFMDistributionLineSelectionType::Zero:
                delete_from distributionLines
                    where distributionLines.DistributionHeader == currentHeader.RecId
                       && distributionLines.Amount == 0;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromDistTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class from source temporary tables.
    /// </summary>
    /// <param name="_distributionHeader">
    /// Distribution headers.
    /// </param>
    /// <param name="_distributionLines">
    /// Distribution lines.
    /// </param>
    /// <param name="_currency">
    /// Document currency code.
    /// </param>
    protected void initializeFromDistTmp(CFMReferenceDistributionHeaderTmp _distributionHeader, CFMReferenceDistributionLinesTmp _distributionLines, CurrencyCode _currency)
    {
        distributionHeader = _distributionHeader;
        distributionLines = _distributionLines;
        currencyCode = _currency;

        headerQuery = new Query();

        QueryBuildDataSource qbds = headerQuery.addDataSource(tableNum(CFMReferenceDistributionHeaderTmp));

        qbds.addOrderByField(fieldNum(CFMReferenceDistributionHeaderTmp, TransDate));
        qbds.addOrderByField(fieldNum(CFMReferenceDistributionHeaderTmp, ReferenceDistributionId));

        qbds.update(true);

        headerQueryRun = new QueryRun(headerQuery);
        headerQueryRun.setRecord(distributionHeader);

        lineQuery = new Query();

        qbds = lineQuery.addDataSource(tableNum(CFMReferenceDistributionLinesTmp));

        qbds.update(true);

        lineAmountRange = qbds.addRange(fieldNum(CFMReferenceDistributionLinesTmp, Amount));
        lineLedgerDimensionRange = qbds.addRange(fieldNum(CFMReferenceDistributionLinesTmp, LedgerDimension));
        lineTaxGroupRange = qbds.addRange(fieldNum(CFMReferenceDistributionLinesTmp, TaxGroup));
        lineTaxItemGroupRange = qbds.addRange(fieldNum(CFMReferenceDistributionLinesTmp, TaxItemGroup));
        lineHeaderRange = qbds.addRange(fieldNum(CFMReferenceDistributionLinesTmp, DistributionHeader));

        this.lineQueryRunCreate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmount</Name>
				<Source><![CDATA[
    public AmountCur lineAmount()
    {
        return this.currentLine().Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineLedgerDimension</Name>
				<Source><![CDATA[
    public CFMLedgerDimension lineLedgerDimension()
    {
        return this.currentLine().LedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineQueryRunCreate</Name>
				<Source><![CDATA[
    protected void lineQueryRunCreate()
    {
        lineQueryRun = new QueryRun(lineQuery);
        lineQueryRun.setRecord(distributionLines);
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTaxGroup</Name>
				<Source><![CDATA[
    public TaxGroup lineTaxGroup()
    {
        return this.currentLine().TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineTaxItemGroup</Name>
				<Source><![CDATA[
    public TaxItemGroup lineTaxItemGroup()
    {
        return this.currentLine().TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetLineRanges</Name>
				<Source><![CDATA[
    protected void resetLineRanges()
    {
        super();

        if (this.existsHeader())
        {
            lineHeaderRange.value(queryValue(this.currentHeader().RecId));
        }
        else
        {
            lineHeaderRange.value(SysQuery::valueUnlimited());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLineAmount</Name>
				<Source><![CDATA[
    public void setLineAmount(AmountCur _amount)
    {
        CFMReferenceDistributionLinesTmp currentLine = this.currentLine();

        currentLine.Amount = _amount;
        currentLine.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalAmountForHeader</Name>
				<Source><![CDATA[
    public AmountCur totalAmountForHeader()
    {
        select sum(Amount) from distributionLines
            where distributionLines.DistributionHeader == this.currentHeader().RecId;

        return distributionLines.Amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalPositiveAmountForHeader</Name>
				<Source><![CDATA[
    public AmountCur totalPositiveAmountForHeader()
    {
        select sum(Amount) from distributionLines
            where distributionLines.DistributionHeader == this.currentHeader().RecId
               && distributionLines.Amount > 0;

        return distributionLines.Amount;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>