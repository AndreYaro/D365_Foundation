<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProdCalculatingWIPNormative_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProdCalculatingWIPNormative_RU extends ProdCalculatingWIPEngine_RU
{
    Map         cumulativeNormAmountsMap;
    CostAmount  factCostAmount;
    CostAmount  calculatedWIPAmount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcCostFactAmounts</Name>
				<Source><![CDATA[
    protected void calcCostFactAmounts()
    {
        ProdRouteTrans      prodRouteTrans;
        InventTrans         inventTrans;
        InventSettlement    inventSettlement;
        ProdIndirectTrans   prodIndirectTrans;

        CostAmount          costAmount;

        InventTransOriginAssemblyComponent  inventTransOriginAssemblyComponent;

        InventTransOrigin inventTransOrigin = InventTransOrigin::findByInventTransId(prodTable.InventTransId);

        while select CostAmountPosted, RecId from inventTrans
            where inventTrans.DateFinancial                                     != dateNull()              &&
                  inventTrans.DateFinancial                                     <= calculationDate
        exists join inventTransOriginAssemblyComponent
            where inventTransOriginAssemblyComponent.AssemblyInventTransOrigin  == inventTransOrigin.RecId &&
                  inventTransOriginAssemblyComponent.ComponentInventTransOrigin == inventTrans.InventTransOrigin
        {
            select sum(CostAmountAdjustment) from inventSettlement
                where inventSettlement.TransRecId   == inventTrans.RecId    &&
                      inventSettlement.TransDate    <= calculationDate      &&
                      inventSettlement.Cancelled    == NoYes::No;

            costAmount += inventTrans.CostAmountPosted + inventSettlement.CostAmountAdjustment;
        }

        select sum(Amount) from prodRouteTrans
            where prodRouteTrans.TransRefId == prodId           &&
                  prodRouteTrans.Calculated == NoYes::Yes       &&
                  prodRouteTrans.DateCalc   <= calculationDate  &&
                  prodRouteTrans.Cancelled  == NoYes::No;

        if (! prodTable.prodParametersDim().NoPostProdIndirect_RU)
        {
            select sum(Amount) from prodIndirectTrans
                where prodIndirectTrans.TransRefId == prodId           &&
                      prodIndirectTrans.Calculated == NoYes::Yes       &&
                      prodIndirectTrans.DateCalc   <= calculationDate  &&
                      prodIndirectTrans.Canceled   == NoYes::No;
        }

        factCostAmount = prodRouteTrans.Amount + prodIndirectTrans.Amount - costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcInitialData</Name>
				<Source><![CDATA[
    protected void calcInitialData()
    {
        ProdRoute       prodRoute;
        BOMCalcTrans    bomCalcTrans;

        InventItemPrice inventItemPrice = InventItemPrice::findCurrent(prodTable.ItemId, CostingVersionPriceType::Cost, prodTable.InventDimId, calculationDate);

        while select prodRoute
            group by OprNum
            where prodRoute.ProdId == prodId
        {
            select sum(CostPriceQty), sum(CostMarkupQty) from bomCalcTrans
                where bomCalcTrans.PriceCalcId  == inventItemPrice.PriceCalcId      &&
                      bomCalcTrans.OprNum       <= prodRoute.OprNum                 &&
                      bomCalcTrans.CalcType     != ItemCalcType::Production         &&
                      bomCalcTrans.CalcType     != ItemCalcType::CostGroup          &&
                      bomCalcTrans.CalcType     != ItemCalcType::BOM;

            cumulativeNormAmountsMap.insert(prodRoute.OprNum, bomCalcTrans.CostPriceQty + bomCalcTrans.CostMarkupQty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWIPAmounts</Name>
				<Source><![CDATA[
    protected void calcWIPAmounts()
    {
        ProdRoute               prodRoute;
        ProdReleaseKindTable_RU prodReleaseKindTable;
        ProdReleaseTrans_RU     prodReleaseTrans;
        ProdRouteTrans          prodRouteTrans;
        ProdRouteTrans          prevProdRouteTrans;

        InventQty               qtyStartUp;

        OprNum                  prevOprNum;

        if (isEndJob)
        {
            return;
        }

        if (!prodReportedGood)
        {
            calculatedWIPAmount = factCostAmount;
            return;
        }

        while select prodRoute
            group by OprNum
            where prodRoute.ProdId == prodId
        {
            InventQty qtyError = 0;

            if (prodRoute.OprNum == firstOprNum)
            {
                qtyStartUp = prodTable.QtyStUp;
            }
            else
            {
                select sum(QtyGood) from prevProdRouteTrans
                    where prevProdRouteTrans.TransRefId == prodId           &&
                          prevProdRouteTrans.Cancelled  == NoYes::No        &&
                          prevProdRouteTrans.Calculated == NoYes::Yes       &&
                          prevProdRouteTrans.DateCalc   <= calculationDate  &&
                          prevProdRouteTrans.OprNum     == prevOprNum;

                qtyStartUp = prevProdRouteTrans.QtyGood;
            }

            select sum(QtyGood) from prodRouteTrans
                where prodRouteTrans.TransRefId == prodId                                                       &&
                      prodRouteTrans.Cancelled  == NoYes::No                                                    &&
                      prodRouteTrans.Calculated == NoYes::Yes                                                   &&
                      prodRouteTrans.DateCalc   <= calculationDate                                              &&
                      ((prodRoute.OprNum        == firstOprNum && prodRouteTrans.OprNum <= firstOprNum)         ||
                       (prodRoute.OprNum        != firstOprNum && prodRouteTrans.OprNum == prodRoute.OprNum));

            while select sum(ReleaseQty) from prodReleaseTrans
                group by ItemId, UnitId, ReleaseKindId, InventDimId
                where prodReleaseTrans.ProdId       == prodId                                                       &&
                      prodReleaseTrans.Cancelled    == NoYes::No                                                    &&
                      prodReleaseTrans.Calculated   == NoYes::Yes                                                   &&
                      prodReleaseTrans.DateCalc     <= calculationDate                                              &&
                      ((prodRoute.OprNum            == firstOprNum && prodReleaseTrans.OprNum <= firstOprNum)       ||
                       (prodRoute.OprNum            != firstOprNum && prodReleaseTrans.OprNum == prodRoute.OprNum))
                exists join prodReleaseKindTable
                    where prodReleaseKindTable.ReleaseKindId == prodReleaseTrans.ReleaseKindId                      &&
                          prodReleaseKindTable.IsReject
            {
                qtyError += EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(prodReleaseTrans.ItemId,
                                                                                                  prodReleaseTrans.InventDimId,
                                                                                                  prodReleaseTrans.ReleaseQty,
                                                                                                  prodReleaseTrans.UnitId,
                                                                                                  prodInventTable.inventUnitId(),
                                                                                                  NoYes::No);
            }

            if (cumulativeNormAmountsMap.exists(prodRoute.OprNum))
            {
                calculatedWIPAmount += cumulativeNormAmountsMap.lookup(prodRoute.OprNum) * (qtyStartUp - prodRouteTrans.QtyGood - qtyError);
            }

            prevOprNum = prodRoute.OprNum;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValues</Name>
				<Source><![CDATA[
    public void initValues()
    {
        super();

        cumulativeNormAmountsMap = new Map(Types::Integer, Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>loopProdRelease</Name>
				<Source><![CDATA[
    protected void loopProdRelease()
    {
        ProdReleaseTrans_RU     prodReleaseTrans;

        InventDim               mainItemInventDim,
                                byProdItemInventDim;

        ProdReleaseKindTable_RU prodReleaseKindTable;
        InventByProductTable_RU inventByProductTable;

        Amount                  productAmountNow;

        InventQty               inventQty;
        InventQty               qtyTotal;

        int                     i;
        container               releaseTransByProductCon;
        Map                     byProductRecIdMap = new Map(Types::Int64, Types::Container);

        this.calcWIPAmounts();
        if (calculatedWIPAmount < 0)
        {
            if (inventCostItemDim == null)
            {
                throw error(strfmt("@GLS115871", prodTable.ProdId));
            }

            error(strfmt("@GLS115871", prodTable.ProdId));
            receiptCostAmount = 0;
            return;
        }

        receiptCostAmount = factCostAmount - calculatedWIPAmount;

        EcoResProductDimGroupSetup::copyProductDimensionsForItem(prodInventTable.ItemId, prodTable.inventDim(), mainItemInventDim);
        mainItemInventDim = InventDim::findOrCreate(mainItemInventDim);

        while select forupdate prodReleaseTrans
            order by OprNum
            where prodReleaseTrans.ProdId       == prodId                                   &&
                  prodReleaseTrans.Cancelled    == NoYes::No                                &&
                  prodReleaseTrans.Calculated   == NoYes::Yes                               &&
                  prodReleaseTrans.DateCalc     <= calculationDate
            join prodReleaseKindTable
                where prodReleaseKindTable.ReleaseKindId == prodReleaseTrans.ReleaseKindId
        {
            Amount amount = 0;
            boolean isInventByProduct = false;
            inventByProductTable.clear();

            InventTable inventTable = this.inventTable(prodReleaseTrans.ItemId);
            inventQty = prodReleaseTrans.inventReleaseQty();

            if (prodReleaseKindTable.ReleaseCalcPrinciple == ProdReleaseCalcPrinciple_RU::ByProduct)
            {
                EcoResProductDimGroupSetup::copyProductDimensionsForItem(inventTable.ItemId, prodTable.inventDim(), byProdItemInventDim);
                byProdItemInventDim = InventDim::findOrCreate(byProdItemInventDim);

                inventByProductTable = InventByProductTable_RU::find(prodTable.ItemId, mainItemInventDim.InventDimId, prodReleaseTrans.ItemId, byProdItemInventDim.InventDimId);
                if (!inventByProductTable.RecId)
                {
                    throw error(strfmt("@GLS115870",
                                       prodTable.ItemId, prodTable.InventDimId, prodReleaseTrans.ItemId, prodReleaseTrans.InventDimId));
                }
            }

            if (prodReleaseKindTable.ReleaseCalcPrinciple == ProdReleaseCalcPrinciple_RU::FixedPrice ||
                (inventByProductTable && inventByProductTable.ByProdCosting == ProdByProdCosting_RU::FixedPrice))
            {
                InventTableModule inventTableModuleInvent = inventTable.inventTableModuleInvent();
                amount = inventTableModuleInvent.price() * inventQty;
            }
            else if (prodReleaseKindTable.ReleaseCalcPrinciple == ProdReleaseCalcPrinciple_RU::Calculated)
            {
                amount = cumulativeNormAmountsMap.lookup(prodReleaseTrans.OprNum ? prodReleaseTrans.OprNum : firstOprNum) * prodReleaseTrans.prodReleaseQty();
            }
            else if (inventByProductTable && inventByProductTable.ByProdCosting == ProdByProdCosting_RU::Calculated)
            {
                isInventByProduct           = true;
                qtyTotal                    = 0;
                releaseTransByProductCon    = connull();

                if (byProductRecIdMap.exists(inventByProductTable.RecId))
                {
                    [qtyTotal, releaseTransByProductCon] = byProductRecIdMap.lookup(inventByProductTable.RecId);
                }

                releaseTransByProductCon += prodReleaseTrans.RecId;
                byProductRecIdMap.insert(inventByProductTable.RecId, [qtyTotal + inventQty, releaseTransByProductCon]);
            }

            if (!isInventByProduct)
            {
                receiptCostAmount -= amount;

                if (isEndJob && receiptCostAmount < 0)
                {
                    throw error("@GLS115920");
                }

                this.createReleaseAdjust(prodReleaseTrans, amount, inventQty);
            }
        }

        if (receiptCostAmount <= 0)
        {
            receiptCostAmount = 0;
            return;
        }

        Amount receiptCostAmountLoc = receiptCostAmount;

        MapEnumerator mapEnumerator = byProductRecIdMap.getEnumerator();
        while (mapEnumerator.moveNext())
        {
            inventByProductTable = InventByProductTable_RU::findRecId(mapEnumerator.currentKey());

            [qtyTotal, releaseTransByProductCon] = mapEnumerator.currentValue();

            if (!qtyTotal)
            {
                continue;
            }

            Amount productAmountTotal = CurrencyExchangeHelper::amount(receiptCostAmountLoc * inventByProductTable.Percentage / 100, standardCurrency);

            InventQty qtyRemain = qtyTotal;
            Amount productAmountRemain = productAmountTotal;

            for (i = 1; i <= conlen(releaseTransByProductCon); i++)
            {
                prodReleaseTrans    = ProdReleaseTrans_RU::findRecId(conpeek(releaseTransByProductCon, i), true);
                inventQty           = prodReleaseTrans.inventReleaseQty();

                if (inventQty >= qtyRemain)
                {
                    productAmountNow = productAmountRemain;
                }
                else
                {
                    productAmountNow = CurrencyExchangeHelper::amount(productAmountTotal * inventQty / qtyTotal, standardCurrency);
                    productAmountNow = productAmountNow > productAmountRemain ? productAmountRemain : productAmountNow;
                }

                productAmountRemain -= productAmountNow;
                receiptCostAmount   -= productAmountNow;

                if (isEndJob && receiptCostAmount < 0)
                {
                    throw error("@GLS115920");
                }

                this.createReleaseAdjust(prodReleaseTrans, productAmountNow, inventQty);

                qtyRemain -= inventQty;
                if (productAmountRemain <= 0 || qtyRemain <= 0)
                {
                    break;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate()
    {
        return super() && prodTable.checkNotMissingProdItemPrice_RU(calculationDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static ProdCalculatingWIPNormative_RU construct()
    {
        return new ProdCalculatingWIPNormative_RU();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>