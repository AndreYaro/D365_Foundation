<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>DemoDataPostBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Base class for processing documents under demo data automatic posting.
/// </summary>
public abstract class DemoDataPostBase
{
    protected DemoDataPostRunId runId;
    protected LineNum lineNum;
    protected RefRecId batchId;
    protected DemoDataPostRunDocument demoDataPostRunDocument;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>determineRunDocumentStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determine the success or failure a document task based on the status of the underlying processed documents.
    /// </summary>
    /// <returns>Successful if all document processing succeeded; otherwise, error.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected DemoDataPostRunStatus determineRunDocumentStatus()
    {
        DemoDataPostRunDocumentStatus documentStatus;
        DemoDataPostRunStatus runStatus;

        select firstonly RecId from documentStatus
            where documentStatus.RunId == runId
                && documentStatus.RunDocumentRecId == demoDataPostRunDocument.RecId
                && (documentStatus.DocumentStatus == DemoDataPostDocumentStatus::Failed
                    || documentStatus.DocumentStatus == DemoDataPostDocumentStatus::InProgress);

        if (documentStatus.RecId)
        {
            runStatus = DemoDataPostRunStatus::Error;
        }
        else
        {
            runStatus = DemoDataPostRunStatus::Successful;
        }

        return runStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get the processed document.
    /// </summary>
    /// <returns>The document.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract public DemoDataPostDocument getDocument()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBatchId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RefRecId parmBatchId(RefRecId _batchId = batchId)
    {
        batchId = _batchId;
        return batchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLineNum</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LineNum parmLineNum(LineNum _lineNum = lineNum)
    {
        lineNum = _lineNum;
        return lineNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRunId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DemoDataPostRunId parmRunId(DemoDataPostRunId _runId = runId)
    {
        runId = _runId;
        return runId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDemoDataPostRunDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public DemoDataPostRunDocument parmDemoDataPostRunDocument(DemoDataPostRunDocument _runDocument)
    {
        demoDataPostRunDocument = _runDocument;
        return demoDataPostRunDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>preProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Prepare the run for processing by completing validation and setting the run in progress.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void preProcess()
    {
        if (!demoDataPostRunDocument)
        {
            throw error(strfmt("@DemoDataPost:ProcessDocumentsNotFound", runId, lineNum));
        }

        try
        {
            DemoDataPostRun::setRunStatus(runId, DemoDataPostRunStatus::InProgress);
        }
        catch (Exception::UpdateConflict)
        {
            // Silently suppress; already in progress.
        }

        demoDataPostRunDocument = DemoDataPostRunDocument::setDocumentStatus(
            demoDataPostRunDocument.RunId,
            demoDataPostRunDocument.LineNum,
            DemoDataPostRunStatus::InProgress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process a set of documents based on criteria defined in the implementation.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    abstract public void process()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>postProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clean after processing to manage run status.
    /// This method should be run regardless of errors or exceptions during processing.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void postProcess()
    {
        DemoDataPostRunStatus documentPostingStatus = this.determineRunDocumentStatus();

        demoDataPostRunDocument = DemoDataPostRunDocument::setDocumentStatus(demoDataPostRunDocument.RunId, demoDataPostRunDocument.LineNum, documentPostingStatus);

        this.setRunComplete();
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Complete a posting run including the transition between states for records and error handling
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void run()
    {
        this.parmDemoDataPostRunDocument(DemoDataPostRunDocument::find(runId, lineNum, true));

        this.preProcess();

        try
        {
            this.process();
        }
        finally
        {
            this.postProcess();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRunComplete</Name>
				<Source><![CDATA[
    private void setRunComplete()
    {
        DemoDataPostRun demoDataPostRun = DemoDataPostRun::find(runId, true);

        if (demoDataPostRun)
        {
            DemoDataPostRunStatus runStatus;
            DemoDataPostRunDocument documentTaskResult;

            select firstonly RecId from documentTaskResult
                where documentTaskResult.RunId == runId
                    && (documentTaskResult.RunStatus == DemoDataPostRunStatus::Ready
                        || documentTaskResult.RunStatus == DemoDataPostRunStatus::Scheduled
                        || documentTaskResult.RunStatus == DemoDataPostRunStatus::InProgress);

            // No documents remain in queue; all tasks complete.
            if (documentTaskResult.RecId == 0)
            {
                select firstonly RecId from documentTaskResult
                    where documentTaskResult.RunId == runId
                        && documentTaskResult.RunStatus == DemoDataPostRunStatus::Error;

                if (documentTaskResult.RecId)
                {
                    runStatus = DemoDataPostRunStatus::Error;
                }
                else
                {
                    runStatus = DemoDataPostRunStatus::Successful;
                }
            }

            if (runStatus)
            {
                try
                {
                    demoDataPostRun = DemoDataPostRun::setRunStatus(demoDataPostRun.RunId, runStatus);
                }
                catch (Exception::UpdateConflict)
                {
                    if (appl.ttsLevel() == 0)
                    {
                        if (xSession::currentRetryCount() >= DemoDataPostConstants::MaxRetryCount)
                        {
                            throw Exception::UpdateConflictNotRecovered;
                        }
                        else
                        {
                            retry;
                        }
                    }
                    else
                    {
                        throw Exception::UpdateConflict;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Construct a new document to process and post.
    /// </summary>
    /// <param name = "_document">The document type.</param>
    /// <param name = "_runId">The run id.</param>
    /// <param name = "_lineNum">The document line number.</param>
    /// <param name = "_batchId">The associated batch id.</param>
    /// <returns>The document processor.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static DemoDataPostBase construct(DemoDataPostDocument _document, DemoDataPostRunId _runId, LineNum _lineNum, RefRecId _batchId = 0)
    {
        DemoDataPostBaseFactoryAttribute demoDataPostBaseFactoryAttribute = new DemoDataPostBaseFactoryAttribute(_document);
        DemoDataPostBase demoDataPostBase = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(DemoDataPostBase), demoDataPostBaseFactoryAttribute);

        demoDataPostBase.parmRunId(_runId);
        demoDataPostBase.parmLineNum(_lineNum);
        demoDataPostBase.parmBatchId(_batchId);

        return demoDataPostBase;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>