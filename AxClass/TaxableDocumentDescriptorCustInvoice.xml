<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxableDocumentDescriptorCustInvoice</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the tax document bundler for normal free text invoice.
/// </summary>
[TaxableDocumentDescriptorAttribute("Free text invoice", "CustInvoice")]
public class TaxableDocumentDescriptorCustInvoice extends TaxableDocumentDescriptorBase
    implements TaxableDocumentTypeDefinitionCustInvoice
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>setTaxableDocumentRootRecord</Name>
				<Source><![CDATA[
    protected void setTaxableDocumentRootRecord(Common _rootRecord)
    {
        super(_rootRecord);

        if (_rootRecord is CustInvoiceTable)
        {
            CustInvoiceTable custInvoiceTable = _rootRecord as CustInvoiceTable;
            CustInvoiceJour custInvoiceJour;

            select firstonly custInvoiceJour
                where custInvoiceJour.InvoiceId == custInvoiceTable.InvoiceId
                    && custInvoiceJour.InvoiceDate == custInvoiceTable.InvoiceDate
                    && custInvoiceJour.NumberSequenceGroup == custInvoiceTable.NumberSequenceGroup;

            if (custInvoiceJour)
            {
                // While posting FTI with tax inclusive, it calculates tax in process of create journal line.
                // In this case, the custInvoiceJour table is there but the tax document has not been transit yet.
                // Here check and make sure tax document transited before set rootTable to be journal table.
                TaxDocumentTransitDocument taxDocumentTransit;
                taxDocumentTransit = TransitDocumentManager_IN::newManager().findTransitDocument(custInvoiceJour, taxDocumentTransit);

                if (taxDocumentTransit)
                {
                    rootTable = custInvoiceJour;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceTaxableDocumentType</Name>
				<Source><![CDATA[
    public ClassName getSourceTaxableDocumentType()
    {
        return classStr(TaxableDocumentTypeDefinitionCustInvoice);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTaxableDocumentRootTableId</Name>
				<Source><![CDATA[
    public TableId getTaxableDocumentRootTableId()
    {
        return tableNum(CustInvoiceTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDistributionSide</Name>
				<Source><![CDATA[
    public TaxAccountingPostingProfileDistributionSide getDistributionSide()
    {
        return TaxAccountingPostingProfileDistributionSide::Credit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataProvider</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data provider.
    /// </summary>
    /// <returns>
    /// The data provider instance.
    /// </returns>
    public ITaxableDocumentDataProvider getDataProvider()
    {
        return new TaxableDocCustInvoiceDataProvider(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxAdjustable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Is tax adjustable for this transaction
    /// </summary>
    /// <returns>
    /// True if tax is adjustable; otherwise, false.
    /// </returns>
    public boolean isTaxAdjustable()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldPersistTaxDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates if tax document should be persisted in database.
    /// </summary>
    /// <returns>True if the tax document should be persisted; otherwise, false.</returns>
    public boolean shouldPersistTaxDocument()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>