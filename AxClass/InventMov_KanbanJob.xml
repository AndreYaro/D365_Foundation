<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_KanbanJob</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class InventMov_KanbanJob extends InventMovement
{
    KanbanJob       kanbanJob;
    KanbanJobType   kanbanJobType;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canBeAutoRepAsFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the automatic report is enabled as finished.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// This method overrides the base class method.
    /// </remarks>
    public boolean canBeAutoRepAsFinished()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canBeOnSupermarket</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether a movement can have an <c>InventDimId</c> value that represents a kanban
    ///    supermarket.
    /// </summary>
    /// <returns>
    ///    true if the transaction quantity is positive; otherwise, false.
    /// </returns>
    public boolean canBeOnSupermarket()
    {
        return this.transQty() >= 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Identifies the postal delivery address of the inventory movement.
    /// </summary>
    /// <returns>
    ///    An ID of a <c>LogisticsPostalAddress</c> record; otherwise 0.
    /// </returns>
    /// <remarks>
    ///    Only used for shipping deliveries such as sales orders and transfer orders.
    /// </remarks>
    protected LogisticsPostalAddressRecId deliveryPostalAddress()
    {
        return kanbanJob.inventDim().inventLocation().logisticsPostalAddress().RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves an <c>InventDimId</c> value.
    /// </summary>
    /// <returns>
    ///    An <c>InventDimId</c> value.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base method. Use the <c>InventDimId</c> field from the <c>KanbanJob</c>
    ///    table.
    /// </remarks>
    public InventDimId inventDimId()
    {
        return kanbanJob.InventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the movement <c>ItemId</c> value.
    /// </summary>
    /// <returns>
    ///    An item number.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base method. Use the <c>ItemId</c> field from the related <c>Kanban</c>
    ///    table.
    /// </remarks>
    public ItemId itemId()
    {
        return kanbanJob.itemId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeQuarantineControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the quarantine control is required.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public boolean mustBeQuarantineControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustBeWMSOrderControlled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether output orders must be used with the movement.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public boolean mustBeWMSOrderControlled()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new(
        KanbanJob       _kanbanJob,
        InventType      _inventType = KanbanJobType::construct(_kanbanJob))
    {
        kanbanJob     = _kanbanJob;
        kanbanJobType = _inventType as KanbanJobType;

        if (!kanbanJobType)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        super(kanbanJob,_inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>remainPhysical</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the physical quantity that remains.
    /// </summary>
    /// <returns>
    ///    The physical quantity that remains.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public InventQty remainPhysical()
    {
        return this.transQty() - this.transIdSum().physical();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the inventory dimension of the <c>KanbanJob</c> table.
    /// </summary>
    /// <param name="_inventDimId">
    ///    The new <c>InventDimId</c> value.
    /// </param>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public void setInventDimId(InventDimId _inventDimId)
    {
        kanbanJob.setInventDimId(_inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the transaction quantity in the <c>KanbanJob</c> table.
    /// </summary>
    /// <param name="_qtyInvent">
    ///    The new transaction quantity stated in inventory unit.
    /// </param>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public void setTransQty(InventQty _qtyInvent)
    {
        kanbanJob.QuantityOrdered = abs(_qtyInvent);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction date for the movement.
    /// </summary>
    /// <returns>
    ///    The kanban job expected date, if defined; otherwise, the kanban job due date.
    /// </returns>
    /// <remarks>
    ///    This method is an override of the base class method.
    /// </remarks>
    public TransDate transDate()
    {
        TransDateTime transDateTime;

        if (kanbanJob.ExpectedDateTime != DateTimeUtil::minValue())
        {
            transDateTime = kanbanJob.ExpectedDateTime;
        }
        else
        {
            transDateTime = kanbanJob.DueDateTime;
        }

        //date in company timezone
        return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(transDateTime, DateTimeUtil::getCompanyTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction ID from the <c>KanbanJob</c> table.
    /// </summary>
    /// <returns>
    ///    The issue inventory blocking transaction ID.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public InventTransId transId()
    {
        return kanbanJob.InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the inventory transaction quantity.
    /// </summary>
    /// <returns>
    ///    The inventory transaction quantity.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public InventQty transQty()
    {
        InventQty transQty = kanbanJob.status().canHaveReceivedQty() ? kanbanJob.QuantityReceived : kanbanJob.QuantityOrdered;

        return  transQty * this.transSign();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the transaction reference for the <c>KanbanJob</c> record.
    /// </summary>
    /// <returns>
    ///    A transaction reference.
    /// </returns>
    /// <remarks>
    ///    This method overrides the base class method.
    /// </remarks>
    public InventTransRefId transRefId()
    {
        return kanbanJob.kanban().KanbanId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsShipmentGroupingRefId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the grouping reference ID to be used with output orders.
    /// </summary>
    /// <returns>
    ///    The grouping reference ID.
    /// </returns>
    public WMSShipmentGroupingRefId wmsShipmentGroupingRefId()
    {
        InventMovement  inventMovement = kanbanJobType.wmsGroupingSourceRequirementMovement();

        return inventMovement ? inventMovement.transRefId() : super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>wmsShipmentGroupingTransType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the grouping transaction type to be used with output orders.
    /// </summary>
    /// <returns>
    ///    The grouping transaction type.
    /// </returns>
    public WMSShipmentGroupingTransType wmsShipmentGroupingTransType()
    {
        InventMovement  inventMovement = kanbanJobType.wmsGroupingSourceRequirementMovement();

        return inventMovement ? inventMovement.transType() : super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
