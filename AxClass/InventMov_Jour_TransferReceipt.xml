<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventMov_Jour_TransferReceipt</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class InventMov_Jour_TransferReceipt extends InventMov_Jour_Transfer
{
    CostAmount updCostAmountPhysical;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the relationship between the inventory transactions originator and the owner.
    /// </summary>
    public void createOriginOwnerRelationship()
    {
        InventTransOriginId originId = this.inventTransOriginId();

        if (originId && inventJournalTrans)
        {
            InventTransOriginJournalTransReceipt::writeOriginOwnerRelationship(inventJournalTrans.DataAreaId, inventJournalTrans.JournalId, inventJournalTrans.LineNum, originId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault defaultDimension()
    {
        return inventJournalTrans.toDimensionDefault(
                    inventJournalTrans.inventJournalTable(),
                    inventJournalTrans.toInventDim());
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteOriginOwnerRelationship</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Deletes the relationship between the inventory transactions originator and the owner that
    ///    corresponds.
    /// </summary>
    public void deleteOriginOwnerRelationship()
    {
        if (inventJournalTrans)
        {
            InventTransOriginJournalTransReceipt::deleteOwnerRelationship(inventJournalTrans.DataAreaId, inventJournalTrans.JournalId, inventJournalTrans.LineNum);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimId</Name>
				<Source><![CDATA[
    public InventDimId inventDimId()
    {
        return inventJournalTrans.ToInventDimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the ID of the inventory transaction originator that corresponds to the movement.
    /// </summary>
    /// <param name="_inventTransOriginId">
    ///    The new value of the ID of the inventory transaction originator.
    /// </param>
    /// <returns>
    ///    The ID of the inventory transaction originator that corresponds to the movement.
    /// </returns>
    public InventTransOriginId inventTransOriginId(InventTransOriginId _inventTransOriginId = inventTransOriginId)
    {
        if (_inventTransOriginId != inventTransOriginId)
        {
            inventTransOriginId = _inventTransOriginId;
        }
        else
        {
            if (!inventTransOriginId)
            {
                inventTransOriginId = InventTransOriginJournalTransReceipt::findInventTransOriginId(inventJournalTrans.DataAreaId, inventJournalTrans.JournalId, inventJournalTrans.LineNum);
            }
        }

        return inventTransOriginId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newMovement_Orig</Name>
				<Source><![CDATA[
    public InventMovement newMovement_Orig()
    {
        if (!inventJournalTrans.RecId)
        {
            return null;
        }
        return new InventMov_Jour_TransferReceipt(inventJournalTrans.orig(),inventType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventDimId</Name>
				<Source><![CDATA[
    public void setInventDimId(InventDimId _dimId)
    {
        inventJournalTrans.ToInventDimId = _dimId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferDirection</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the direction of the transfer movements.
    /// </summary>
    /// <returns>
    ///    The direction of the transfer movements.
    /// </returns>
    public InventDirection transferDirection()
    {
        return InventDirection::Receipt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferInventTransOriginId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the ID of the transfer counterpart inventory transaction originator that corresponds to
    ///    the movement.
    /// </summary>
    /// <returns>
    ///    The ID of the transfer counterpart inventory transaction originator that corresponds to the
    ///    movement.
    /// </returns>
    public InventTransOriginId transferInventTransOriginId()
    {
        return InventTransOrigin::findByInventTransId(inventJournalTrans.InventTransId).RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    public InventTransId transId()
    {
        return inventJournalTrans.ToInventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transSign</Name>
				<Source><![CDATA[
    public Integer transSign()
    {
        return  1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromInventJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>InventMov_Jour_TransferReceipt</c> class is based on the specified
    ///    record.
    /// </summary>
    /// <param name="_inventJournalTrans">
    ///    The <c>InventJournalTrans</c> record for which the class is instantiated.
    /// </param>
    /// <returns>
    ///    An instance of the <c>InventMov_Jour_TransferReceipt</c> class.
    /// </returns>
    public static InventMov_Jour_TransferReceipt newFromInventJournalTrans(InventJournalTrans _inventJournalTrans)
    {
        if (_inventJournalTrans.isJournalLineOwnerEnabled())
        {
            return InventMov_Jour_TransferReceipt_OwnerEnabled::newFromInventJournalTrans(_inventJournalTrans);
        }
        else
        {
            return new InventMov_Jour_TransferReceipt(_inventJournalTrans);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeTransDimTransferReceipt</Name>
				<Source><![CDATA[
    public InventDim mergeTransDimTransferReceipt(
        InventDim _toInventDim,
        InventDim _fromInventDim = this.inventdim(),
        InventDim _origFromDim = _fromInventDim)
    {
        // The method is called in a way that makes issueDim _toInventDim and receiptDim - _fromInventDim
        InventDim issueDim   = _toInventDim;
        InventDim receiptDim;

        receiptDim.data(_fromInventDim);
        this.mergeTransferIssueIntoFinalReceipt(this.inventDimGroupSetup(), receiptDim, issueDim);

        if (receiptDim.InventLocationId
            && !receiptDim.wMSLocationId
            && this.inventDimGroupSetup().isDimensionActive(fieldNum(InventDim, WMSLocationId)))
        {
            receiptDim.wMSLocationId = receiptDim.inventLocation().WMSLocationIdDefaultReceipt;
        }

        return receiptDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateInventTableCostPrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the movement can update the cost price on the related <c>InventTable</c> table.
    /// </summary>
    /// <returns>
    ///    Returns true if the site dimensions are different; otherwise, returns false.
    /// </returns>
    public boolean mustUpdateInventTableCostPrice()
    {
        if (inventJournalTrans.inventDim().InventSiteId != inventJournalTrans.toInventDim().InventSiteId)
        {
            return true;
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCheckAdvancedWarehousingInventoryOwner</Name>
				<Source><![CDATA[
    protected boolean mustCheckAdvancedWarehousingInventoryOwner()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mergeTransferIssueIntoFinalReceipt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Merges the issue dimensions into the receipt dimensions for the final destination of a transfer journal.
    /// </summary>
    /// <param name = "_dimGroupSetup">Dimension group setup to use.</param>
    /// <param name = "_inventDimReceipt">receipt dimensions to be merged.</param>
    /// <param name = "_inventDimIssue">Issue dimensions to merge.</param>
    public void mergeTransferIssueIntoFinalReceipt(
    InventDimGroupSetup _dimGroupSetup,
    InventDim           _inventDimReceipt,
    InventDim           _inventDimIssue)
    {
        InventDimGroupFieldSetupEnumerator enumerator = _dimGroupSetup.getFieldSetupEnumerator();

        while (enumerator.moveNext())
        {
            InventDimGroupFieldSetup inventDimGroupFieldSetup = enumerator.current();
            FieldId dimFieldId = inventDimGroupFieldSetup.dimFieldId();

            if (inventDimGroupFieldSetup.isActive())
            {
                if (!_inventDimReceipt.(dimFieldId) && _inventDimIssue.(dimFieldId) && InventDim::isFieldIdTransferReceiptMergeable(dimFieldId))
                {
                    _inventDimReceipt.(dimFieldId) = _inventDimIssue.(dimFieldId);
                }
            }
            else
            {
                _inventDimReceipt.clearField(dimFieldId);
            }
        }

        if (_inventDimReceipt.wmsLocationId && !_inventDimReceipt.wmsLocation())
        {
            _inventDimReceipt.wmsLocationId = '';
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>