<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcItemLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    Calculates the consumption line in a purchase cost calculation.
/// </summary>
/// <remarks>
///    The item ID, inventory dimensions, and quantity of the consumption line will always be identical
///    with the respective values in the corresponding instance of the <c>PurchCalcItem</c> class.
/// </remarks>
class PurchCalcItemLine extends BOMCalcItemLine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcConsumption</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates the consumed quantity of the line.
    /// </summary>
    /// <remarks>
    ///     In case of purchase cost, the consumed quantity will always be equal to the series size.
    /// </remarks>
    protected void calcConsumption()
    {
        calcConsumptionInventQty            = seriesSize;
        calcConsumpVariableQty              = seriesSize;
        calcConsumpConstantQty              = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcCost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the cost of the line.
    /// </summary>
    /// <param name="_consumptionInventQty">
    ///    The consumed quantity.
    /// </param>
    /// <param name="_calcTradeAgreements">
    ///    A Boolean value that indicates whether the trade agreements should be considered.
    /// </param>
    /// <returns>
    ///    true if the cost has been calculated; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    The method will return false if the cost will be calculated based on trade agreements.The consumed
    ///    quantity will be added to the parent calculation and the cost will be calculated at the end.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The line is not embedded in a purchase cost calculation object.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    The wrong cost calculation has been initialized and the <c>PurchCalcItemLine</c> object expects a
    ///    <c>PurchCalcCost</c> object for the cost calculation.
    /// </exception>
    protected boolean calcCost(Qty _consumptionInventQty, boolean _calcTradeAgreements = false)
    {
        BOMCalcItem         parentBomCalcItem = parentBOMCalc as BOMCalcItem;
        PurchPriceModel     parentPurchPriceModel;
        PurchCalcCost       purchPriceCost = bomCalcCost as PurchCalcCost;

        if (parentBOMCalc == null)
        {
            // A PurchCalcItemLine must be embedded in a PurchCalcLine
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (purchPriceCost == null)
        {
            // A PurchCalcItemLine must use a PurchCalcCost object
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        parentPurchPriceModel = parentBomCalcItem.parmPurchPriceModel();

        // If trade agreements are used as cost price model, collect total consumption and calculate this item later
        if (!_calcTradeAgreements && parentPurchPriceModel == PurchPriceModel::PriceDisc)
        {
            this.parmParentBOMCalc().addTotalItemConsumption(itemId, inventDimId, _consumptionInventQty);
            return false;
        }

        tradeAgreementQty = !_calcTradeAgreements ? 0 : this.parmParentBOMCalc().getTotalItemConsumption(itemId, inventDimId);

        purchPriceCost.initPurchCalc(this.parmParentBOMCalc().parmCalcDate(),
                                     itemId,
                                     inventDimId,
                                     _consumptionInventQty,
                                     tradeAgreementQty,
                                     vendAccount,
                                     this.parmParentBOMCalc().parmProfitSet(),
                                     costingVersionId,
                                     bomCalcFallBack,
                                     fallBackVersionId,
                                     parentPurchPriceModel,
                                     siteId);

        // calculate cost price
        bomCalcCost.calcPrimaryCostModel();

        switch (parentPurchPriceModel)
        {
            case PurchPriceModel::PriceDisc:
                costPriceModel = BOMCalcCostPrice::PriceDisc;
                break;
            case PurchPriceModel::PurchPrice:
                costPriceModel = BOMCalcCostPrice::PurchPrice;
                break;
        }

        // calculate sales price
        bomCalcCost.calcSalesPrice();
        salesPriceModel  = bomCalcGroup.getSalesPriceModel(parentBOMCalc.parmCostPriceModel());

        this.updateCalcData();

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initBOMCalcTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>BOMCalcTrans</c> record which will describe this item line in the calculation
    ///    hierarchy.
    /// </summary>
    /// <remarks>
    ///    Overridden in the <c>PurchCalcItemLine</c> class so that the line which corresponds to the
    ///    consumption of the purchased item will always have the <c>CalcType</c> field set to the <c>Item</c>
    ///    enumeration value. This is important for purchase overheads calculations.
    /// </remarks>
    protected void initBOMCalcTrans()
    {
        super();
        bomCalcTrans.CalcType = ItemCalcType::Item;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the internal variables of the current object.
    /// </summary>
    protected void initParameters()
    {
        super();

        bomCalcCost = PurchCalcCost::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalcCostBreakdown</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether a standard cost breakdown should be inserted.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    /// <remarks>
    /// A purchase price will never have a cost breakdown.
    /// </remarks>
    public boolean mustCalcCostBreakdown()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustExplodePrice</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines whether the cost of the components must be recalculated based on their subcomponents.
    /// </summary>
    /// <returns>
    ///     Always returns false.
    /// </returns>
    protected boolean mustExplodePrice()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmItemId</Name>
				<Source><![CDATA[
    ItemId parmItemId(ItemId _itemId = itemId)
    {
        ItemId localItemId = super(_itemId);

        //Only used for infolog prefix
        bom.ItemId = localItemId;
        return localItemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWarnings</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the warnings that are generated by the calculation.
    /// </summary>
    public void updateWarnings()
    {
        BOMCalcCheck bomCalcCheck = BOMCalcCheck::newBOMCalcItemLine(this);

        bomCalcCheck.checkNoConsumption(bomCalcTrans.ConsumptionVariable + bomCalcTrans.ConsumptionConstant);
        bomCalcCheck.checkZeroCostPrice(bomCalcTrans.CostPrice, bomCalcCost.costFound());
        bomCalcCheck.checkNoCostPrice(bomCalcCost.costFound());
        bomCalcCheck.checkSubBomWarnings(bomCalcCost.subBomWarningLink());
        bomCalcCheck.checkAgeCostPrice(bomCalcCost.costPriceDate(), costPriceModel);
        bomCalcCheck.checkMinContribution(bomCalcTrans.contributionRatio());
        bomCalcCheck.checkUseFallBack(bomCalcTrans.CostPriceFallBackVersion, bomCalcTrans.SalesPriceFallBackVersion);

        if (bomCalcCheck.hasMessages())
        {
            bomCalcTrans.Infolog = bomCalcCheck.getMessages();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Validates the current <c>PurchCalcItemLine</c> object.
    /// </summary>
    /// <param name="_checkBOM">
    ///     A Boolean value that indicates whether the associated <c>BOM</c> record should be validated.
    /// </param>
    /// <returns>
    ///     true if the validation is successful; otherwise, false.
    /// </returns>
    boolean validate(boolean _checkBOM = true)
    {
        boolean ret;

        ret = super(false);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchCalcItemLine construct()
    {
        return new PurchCalcItemLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newPurchCalcItem</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Create and initialize a new instance of the <c>PurchCalcItemLine</c> class.
    /// </summary>
    /// <param name="_itemId">
    ///    The ID of the item for which the purchase cost calculation is executed.
    /// </param>
    /// <param name="_inventDimId">
    ///    The ID of the inventory dimensions.
    /// </param>
    /// <param name="_parentBOMCalcItem">
    ///    The parent cost calculation.
    /// </param>
    /// <param name="_costingVersionId">
    ///    The ID of the costing version.
    /// </param>
    /// <param name="_bomCalcFallBack">
    ///    A <c>BOMCalcFallBack</c> enumeration value that specifies the fallback strategy used.
    /// </param>
    /// <param name="_fallBackVersionId">
    ///    The fallback costing version, if the <c>BOMCalcFallBack::Simulated</c> enumeration value is used.
    /// </param>
    /// <param name="_siteId">
    ///    The site for the calculation.
    /// </param>
    /// <param name="_bomCalcExplosionMode">
    ///    A value from the <c>BOMCalcExplosionMode</c> enumeration that represents the chosen explosion mode.
    /// </param>
    /// <returns>
    ///    The new instance of the <c>PurchCalcItemLine</c> class.
    /// </returns>
    static PurchCalcItemLine newPurchCalcItem(
        ItemId                  _itemId,
        InventDimId             _inventDimId,
        BOMCalcItem             _parentBOMCalcItem,
        CostingVersionId        _costingVersionId       = '',
        BOMCalcFallBack         _bomCalcFallBack        = BOMCalcFallBack::None,
        CostingVersionId        _fallBackVersionId      = '',
        InventSiteId            _siteId                 = '',
        BOMCalcExplosionMode    _bomCalcExplosionMode   = BOMCalcExplosionMode::MultiLevel
        )
    {
        PurchCalcItemLine purchCalcItemLine = PurchCalcItemLine::construct();

        purchCalcItemLine.parmItemId(_itemId);
        purchCalcItemLine.parmInventDimId(_inventDimId);
        purchCalcItemLine.parmParentBOMCalc(_parentBOMCalcItem);
        purchCalcItemLine.parmCostingVersionId(_costingVersionId);
        purchCalcItemLine.parmBOMCalcFallBack(_bomCalcFallBack);
        purchCalcItemLine.parmFallBackVersionId(_fallBackVersionId);
        purchCalcItemLine.parmSiteId(_siteId);
        purchCalcItemLine.parmBomCalcExplosionMode(_bomCalcExplosionMode);

        return purchCalcItemLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>