<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesPurchTableToLineField</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SalesPurchTableToLineField</c> class manages the table to line table during the field roll
/// down.
/// </summary>
/// <remarks>
/// There will be one child class for each type of document that has a table to line table.
/// </remarks>
abstract class SalesPurchTableToLineField
{
    fieldId                     fieldId;
    FieldLabel                  fieldName;
    FieldLabel                  lineUpdateDescription;
    TradeTable2LineUpdate       table2lineUpdate;
    NoYes                       updateLines;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        fieldId,
        fieldName,
        lineUpdateDescription,
        table2lineUpdate,
        updateLines
    #endmacro

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fieldGroupLabel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the label to use on the field group when the field is displayed in the dialog box.
    /// </summary>
    /// <returns>
    /// A <c>FieldLabel</c> string to use on the field group.
    /// </returns>
    public FieldLabel fieldGroupLabel()
    {
        return this.fieldName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fieldName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the user-friendly name of the current field.
    /// </summary>
    /// <returns>
    /// The name of the current field as a <c>FieldLabel</c> string.
    /// </returns>
    public FieldLabel fieldName()
    {
        return fieldName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findParametersTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the specified record in the parameters tables.
    /// </summary>
    /// <param name="_fieldId">
    /// The key field for the table to line parameters table.
    /// </param>
    /// <param name="_update">
    /// A Boolean value that indicates whether the record will be updated or deleted.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesPurchTableToLineParameters</c> map, which represents a record in the
    /// table to line parameters table.
    /// </returns>
    abstract protected SalesPurchTableToLineParameters findParametersTable(FieldId _fieldId, boolean _update = false)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldDescription</Name>
				<Source><![CDATA[
    abstract protected FieldLabel getFieldDescription(FieldId _fieldId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFieldId</Name>
				<Source><![CDATA[
    protected void initFieldId(fieldId _fieldId)
    {
        //call to database
        SalesPurchTableToLineParameters parameters = this.findParametersTable(_fieldId);

        fieldId = _fieldId;
        fieldName = parameters.fieldName();

        this.parmTableToLineUpdate(this.getTradeTable2LineUpdateFromSalesPurchTableToLineParameters(parameters));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTradeTable2LineUpdateFromSalesPurchTableToLineParameters</Name>
				<Source><![CDATA[
    private TradeTable2LineUpdate getTradeTable2LineUpdateFromSalesPurchTableToLineParameters(SalesPurchTableToLineParameters _parameters)
    {
        TradeTable2LineUpdate tradeTable2LineUpdate = _parameters.Table2LineUpdate;
        if (_parameters.FieldId
            && !_parameters.RecId
            && PurchTable2LineParametersInitTable2LineUpdateFlight::instance().isEnabled()
            && PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            container supplierDateFieldList = PurchTable2LineParameters::addPurchTableVendorDispatchDateFields(conNull());
            if (conFind(supplierDateFieldList, _parameters.FieldId) != 0)
            {
                // if PurchTable2LineParameters is not found we initialize the default value
                // TradeTable2LineUpdate::Prompt similar to PurchTable2LineParameters initializeFields
                return TradeTable2LineUpdate::Prompt;
            }
        }

        return tradeTable2LineUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineUpdateDescription</Name>
				<Source><![CDATA[
    public FieldLabel lineUpdateDescription()
    {
        if (lineUpdateDescription)
            return lineUpdateDescription;

        lineUpdateDescription = this.getFieldDescription(this.parmFieldId());

        return lineUpdateDescription;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameterHelp</Name>
				<Source><![CDATA[
    public FieldHelp parameterHelp()
    {
        return strfmt("@SYS62834", this.lineUpdateDescription(), this.fieldName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parameterLabel</Name>
				<Source><![CDATA[
    public FieldLabel parameterLabel()
    {
        return strfmt("@SYS62814", this.lineUpdateDescription());
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFieldId</Name>
				<Source><![CDATA[
    public fieldId parmFieldId(fieldId _fieldId = fieldId)
    {
        if (_fieldId != fieldId)
        {
            this.initFieldId(_fieldId);
        }
        return fieldId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableToLineUpdate</Name>
				<Source><![CDATA[
    public TradeTable2LineUpdate parmTableToLineUpdate(TradeTable2LineUpdate _table2LineUpdate = table2LineUpdate)
    {
        table2LineUpdate = _table2LineUpdate;
        return table2LineUpdate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUpdateLines</Name>
				<Source><![CDATA[
    public NoYes parmUpdateLines(NoYes _updateLines = updateLines)
    {
        updateLines = _updateLines;
        return updateLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>questionHelp</Name>
				<Source><![CDATA[
    public FieldHelp questionHelp()
    {
        return strfmt("@SYS62836", this.lineUpdateDescription());
    }

]]></Source>
			</Method>
			<Method>
				<Name>questionLabel</Name>
				<Source><![CDATA[
    public FieldLabel questionLabel()
    {
        return strfmt("@SYS62835", this.lineUpdateDescription());
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID for the header table of the document.
    /// </summary>
    /// <returns>
    /// The table ID of the header table of the document.
    /// </returns>
    abstract public tableId tableId()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean         ret;
        Integer         version    = RunBase::getVersion(_packedClass);

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                ret = true;
                break;
            default:
                ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesPurchTableToLineParameters</Name>
				<Source><![CDATA[
    public void updateSalesPurchTableToLineParameters()
    {
        //call to database
        SalesPurchTableToLineParameters parameters = this.findParametersTable(this.parmFieldId(), true);

        if (table2LineUpdate != parameters.Table2LineUpdate)
        {
            ttsbegin;

            // <GEERU>
            if (parameters.RecId)
            {
                // </GEERU>
                parameters.Table2LineUpdate = table2LineUpdate;
                parameters.update();
                // <GEERU>
            }
            else
            {
                parameters.FieldId          = this.parmFieldId();
                parameters.Table2LineUpdate = table2LineUpdate;
                parameters.insert();
            }
            // </GEERU>

            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>