<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjInvoiceDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>ProjInvoiceDP</c> class is the Report Data Provider class for the <c>ProjInvoice</c> SRS
/// Report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(ProjPrintInvoice)),
    SRSReportParameterAttribute(classStr(ProjInvoiceContract))
]
public class ProjInvoiceDP extends ProjInvoiceDPBase
{
    ProjInvoiceContract         projInvoiceContract;
    FormletterProformaPrint     formletterProformaPrint;
    TaxSpec                     taxSpec;
    FormLetterRemarks           formLetterRemarks;
    TaxCode                     taxCodeLine;
    boolean                     useJournalList;

    boolean                     printFooter;
    boolean                     printFooterEuro;
    boolean                     printFooterPayment;
    boolean                     printFooterPrepaid;
    boolean                     printFooterPrepaidEuro;
    boolean                     printFooterSepaNotification;
    boolean                     printGiro;

    CustSettlement              custSettlement;
    CustTrans                   custTransOffset;

    boolean                     printLabel;
    boolean                     printDocuHeader;

    PrintCopyOriginal           printCopyOriginal;
    container                   inventDimSetup;
    InventDimCtrl_Rep_Project   inventDimReport;
    str                         inventDimString;

    ProjFormletterParameters    projFormletterParameters;

    ProjParameters              projParameters;
    container                   taxCodesUsed;
    MarkupTrans                 markupTrans;
    MarkupTmpTrans_FI           tmpMarkupTrans;
    TaxCode                     taxCode;

    CustDirectDebitMandate          custDirectDebitMandate;
    CustBankAccount                 custDirectDebitMandateBankAccount;

    boolean                         showFooterGiro;

    CashDiscAmount                  cashDiscAmountTax;
    Amount                          amount;
    boolean                         cashDiscOnInvoice;
    boolean                         projCreditInvoicing;
    boolean                         projPreData;
    CustVendCorrectedInvoiceId      correctedInvoiceId;
    CustVendCorrectedInvoiceId      correctedInvoiceIdOldHeader;
    CustVendCorrectiveReason        correctiveReason;
    CustVendCorrectiveReason        correctiveReasonOldHeader;
    CustVendCreditInvoicingTable    custVendCreditInvoicingTable;
    CustVendCreditInvoicingJour     custVendCreditInvoicingJour;
    CustVendCreditInvoicingTrans    custVendCreditInvoicingTrans;
    ProjInvoiceCost                 projInvoiceCost;
    ProjInvoiceEmpl                 projInvoiceEmpl;
    ProjInvoiceItem                 projInvoiceItem;
    ProjInvoiceOnAcc                projInvoiceOnAcc;
    ProjInvoiceRevenue              projInvoiceRevenue;
    ProjInvoiceEmplDetail           projInvoiceEmplDetail;
    ProjInvoiceItemDetail           projInvoiceItemDetail;
    ProjInvoiceCostDetail           projInvoiceCostDetail;
    ProjInvoiceOnAccDetail          projInvoiceOnAccDetail;
    ProjInvoiceRevenueDetail        projInvoiceRevenueDetail;
    CustPaymSched                   custPaymSched;
    InventTrans                     inventTrans;
    TaxTrans                        taxTrans;
    str                             taxAmountMSTLabel,taxAmountLabel;

    DocuRef                 docuRef;
    DocuRef                 docuRefHeader;
    ProjInvoiceTmp          companyHeaderTemplate;
    boolean                 isInvoiceRefVisible;

    //Italian feature
    boolean                 goodsDiscount;
    CompanyName             companyName;
    Addressing              companyAddress;
    Phone                   companyPhone;
    TeleFax                 companyTeleFax;
    VATNum                  companyVATNum;
    TaxEnterpriseNumber     companyEnterpriseNumber;

    boolean                         taxPrintTaxFreeBalance;
    boolean                         showFooter;
    boolean                         showFooterPayment;
    boolean                         showFooterEuro;
    boolean                         showFooterPrepaid;
    boolean                         showFooterPrepaidEuro;
    boolean                         showFooterSepaNotification;
    boolean                         showFooterLocalCurAmt;
    CustParameters                  custParameters;
    boolean                         printEuroTotals;
    boolean                         showCashDiscOnInvoiceControls;
    PrintInvoiceVATNum              printFreeTextInvoiceVATNum;
    ProjInvoiceItem                 projectItemInvoiceTrans;
    CustVendCorrectiveReason        correctiveReason_lines;
    TmpTaxWorkTrans                 tmpTaxWorkTrans;
    SalesFormLetter_FreeText        salesFormLetter;
    SalesFormLetterReport_FreeText  salesFormLetterReport;
    boolean                         isCreditInvoicingReportEnabled;
    str                             backOrderName;
    CustPaymSchedLine               custPaymSchedLine;
    CustTrans                       custTrans;
    RecId                           tmpTableDataRecId;

    SRSReportParameter      reportParameter;
    str                     showCustTransOffset;
    str                     showInventTrans;
    str                     showProjInvoiceJour;
    str                     showProjInvoiceEmpl;
    str                     showProjInvoiceItem;
    str                     showProjInvoiceCost;
    str                     showProjInvoiceRevenue;
    str                     showProjInvoiceonAcc;
    str                     showTaxTrans;
    str                     showCustPaymSched;
    str                     showFormLetterRemarks;
    str                     showMarkupTrans;

    CustPaymSched           custPaymentSched;
    CustPaymSchedLine       custPaymentSchedLine;

    str                 externalItemVisibility;
    str                 inventTransVisibility;
    str                 projectRevenueInvoiceTransVisibility;
    str                 subRevenueInvoiceTransVisibility;
    str                 subRevenueInvoiceTransTxtVisibility;
    str                 docuRefVisibility;
    str                 showPrepaidTotals;
    str                 showPrepaidTotalsEuro;
    PrintCopyOriginal   printType;
    str                 companyVATNumVisibility;
    str                 vatNumVisibility;
    str                 projInvoiceReferenceNumber_FIVisibility;
    PrePrintLevel       prePrintLevel;
    str                 taxAmountMSTVisibility;
    str                 revenueInvTransCorrectReasonVisibility;
    str                 revenueInvTransCorrectInvIdVisibility;
    str                 onAccInvTransCorrectReasonVisibility;
    str                 onAccInvTransCorrectInvIdVisibility;
    str                 itemInvTransCorrectReasonVisibility;
    str                 itemInvTransCorrectInvIdVisibility;
    str                 emplInvTransCorrectReasonVisibility;
    str                 emplInvTransCorrectInvIdVisibility;
    str                 costInvTransCorrectReasonVisibility;
    str                 costInvTransCorrectInvIdVisibility;
    str                 npiBankingPaymIdVisibility;
    boolean             dataProcessed;
    RecId               formLetterRecId;
    boolean             isProforma;

    // <GEEU>
    ProjInvoiceLocalizationTmp projInvoiceLocalizationTmp;
    boolean isFirstRecord;

    #ISOCountryRegionCodes

    str                 originalInvoiceReference;
    ReasonComment       creditNoteReasonComment;
    // </GEEU>

    // <GEEHU>
    str                 taxAmountBaseWLabel, taxAmountTotalWLabel;
    str                 taxAmountBaseWVisibility;
    // </GEEHU>

    // <GEECZ>
    BankAccountTable    bankAccountTable;
    HcmWorker           salesResponsible;
    boolean             countryRegion_CZ;
    Map                 transOriginalInvoice_CZ;
    // </GEECZ>

    // <GEEPL>
    Counter lineNumber;
    boolean projCreditInvoicingSalesLine;
    // </GEEPL>

    #define.False               ('false')
    #define.True                ('true')

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>changeDesign</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the visibility of fields based on the <c>PrePrintLevel</c> values.
    /// </summary>
    private void changeDesign()
    {
        prePrintLevel = projFormletterParameters.PrePrintLevelInvoice;
        vatNumVisibility = #True;
        //PageHeader Invoice
        if (!CustParameters::find().CustNameFromVATNum  && !projFormletterParameters.PrintInvoiceVATNum)
        {
            companyVATNumVisibility = #False;
            vatNumVisibility        = #False;
        }

        if (!CustParameters::find().CustInvoiceRefNum_FI)
        {
            projInvoiceReferenceNumber_FIVisibility = #False;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTransportationDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears the transportation related fields from the temporary table.
    /// </summary>
    private void clearTransportationDetails()
    {
        projInvoiceLocalizationTmp.TransportationDataSection = NoYes::No;
        projInvoiceLocalizationTmp.DoPrintTransportationDocument = NoYes::No;
        projInvoiceLocalizationTmp.DeliveryName = '';
        projInvoiceLocalizationTmp.DeliveryAddress = '';

        projInvoiceLocalizationTmp.TransportationContactPersonName = '';
        projInvoiceLocalizationTmp.TransportationContactPersonTitle = '';

        projInvoiceLocalizationTmp.TransportationCarrierAddress = '';
        projInvoiceLocalizationTmp.TransportationCarrierName = '';

        projInvoiceLocalizationTmp.TransPortationIssuedByName = '';
        projInvoiceLocalizationTmp.TransportationIssuedByTitle = '';

        projInvoiceLocalizationTmp.TransportationLoadedDateTime = utcDateTimeNull();
        projInvoiceLocalizationTmp.TransportationLoadedAddress = '';
        projInvoiceLocalizationTmp.TransportationLoadedName = '';

        projInvoiceLocalizationTmp.TransportationPackageDangerDegree = '';
        projInvoiceLocalizationTmp.TransportationPackageDescription = '';

        projInvoiceLocalizationTmp.TransportationVehicleDescription = '';
        projInvoiceLocalizationTmp.TransportationVehicleDriverName = '';
        projInvoiceLocalizationTmp.TransportationVehiclePlateNumber = '';
        projInvoiceLocalizationTmp.TransportationVehicleTrailerNumber = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpTaxWorkTrans_CZ</Name>
				<Source><![CDATA[
    private void createTmpTaxWorkTrans_CZ(
        TableId     _tableIdTrans,
        TableId     _tableIdTransDetail)
    {
        #define.ProjInvoiceId('ProjInvoiceId')
        #define.InvoiceDate('InvoiceDate')

        Query                   query;
        QueryBuildDataSource    qbdsTrans;
        QueryBuildRange         qbr;
        QueryRun                queryRun;
        ProjInvoiceTransMap_CZ  projInvoiceTrans;
        RefRecId                origRefRecId;

        void addTmpTaxWorkFromProjInvoiceJour(
            TmpTaxWorkTrans         _tmpTaxWorkTrans,
            ProjInvoiceTransMap_CZ  _projectInvoiceTrans)
        {
            TmpTaxWorkTrans     tmpTaxWork;
            Tax                 tax = Tax::construct();

            tax.taxCalcWithoutSource(_projectInvoiceTrans.TaxGroupId,
                                        _projectInvoiceTrans.TaxItemGroupId,
                                        _projectInvoiceTrans.InvoiceDate,
                                        _projectInvoiceTrans.CurrencyId,
                                        -_projectInvoiceTrans.LineAmount,
                                        TaxModuleType::Project,
                                        0,
                                        '',
                                        '',
                                        TaxDirection::OutgoingTax);
            tmpTaxWork  = tax.tmpTaxWorkTrans();

            while select tmpTaxWork
            {
                _tmpTaxWorkTrans.data(tmpTaxWork);
                _tmpTaxWorkTrans.Voucher        = projInvoiceJour.LedgerVoucher;
                _tmpTaxWorkTrans.TransDate      = projInvoiceJour.InvoiceDate;
                _tmpTaxWorkTrans.HeadingTableId = projInvoiceJour.TableId;
                _tmpTaxWorkTrans.HeadingRecId   = projInvoiceJour.RecId;
                _tmpTaxWorkTrans.InvoiceRecId   = _tmpTaxWorkTrans.HeadingRecId;
                _tmpTaxWorkTrans.TransDate      = projInvoiceJour.InvoiceDate;

                _tmpTaxWorkTrans.SourceTableId  = _projectInvoiceTrans.TableId;
                _tmpTaxWorkTrans.SourceRecId    = _projectInvoiceTrans.RecId;
                _tmpTaxWorkTrans.InvoiceId      = _projectInvoiceTrans.ProjInvoiceId;
                _tmpTaxWorkTrans.insert();
            }
        }

        query       = new query();
        qbdsTrans   = query.addDataSource(_tableIdTrans);
        qbr         = qbdsTrans.addRange(fieldName2id(_tableIdTrans, #ProjInvoiceId));
        qbr.value(SysQuery::value(projInvoiceJour.ProjInvoiceId));
        qbr         = qbdsTrans.addRange(fieldName2id(_tableIdTrans, #InvoiceDate));
        qbr.value(SysQuery::value(projInvoiceJour.InvoiceDate));

        queryRun    = new queryRun(query);

        while (queryRun.next())
        {
            projInvoiceTrans    = queryRun.get(_tableIdTrans);
            addTmpTaxWorkFromProjInvoiceJour(tmpTaxWorkTrans, projInvoiceTrans);

            origRefRecId        = projInvoiceJour.returnOriginalTransRecId_CZ(_tableIdTrans, _tableIdTransDetail, projInvoiceTrans.RecId);
            if (origRefRecId)
            {
                projInvoiceTrans    = ProjInvoiceTransMap_CZ::findRecId(_tableIdTrans, origRefRecId);
                addTmpTaxWorkFromProjInvoiceJour(tmpTaxWorkTrans, projInvoiceTrans);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditInvoicingLines</Name>
				<Source><![CDATA[
    private void creditInvoicingLines(Common _caller, Common _callerDetail)
    {
        switch (_caller.TableId)
        {
            case tableNum(ProjInvoiceJour):
                select CustVendCorrectedInvoiceId, CustVendCorrectiveReason
                    from custVendCreditInvoicingJour
                    where custVendCreditInvoicingJour.InvoiceRecId   == _caller.RecId
                       && custVendCreditInvoicingJour.InvoiceTableId == _caller.TableId;

                if (custVendCreditInvoicingJour.RecId)
                {
                    projPreData                     = true;
                    correctedInvoiceIdOldHeader     = custVendCreditInvoicingJour.CustVendCorrectedInvoiceId;
                    correctiveReasonOldHeader       = custVendCreditInvoicingJour.CustVendCorrectiveReason;
                }
                else
                {
                    projPreData = false;
                }
                break;

            case tableNum(ProjInvoiceCost):
                projInvoiceCost = _caller;
                projInvoiceCostDetail = _callerDetail;
                select RefTableId, RefRecId, CustVendCorrectiveReason, CustVendCorrectedInvoiceId
                    from custVendCreditInvoicingTable
                    where custVendCreditInvoicingTable.RefTableId == projInvoiceCostDetail.TableId
                       && custVendCreditInvoicingTable.RefRecId   == projInvoiceCostDetail.RecId;

                if (custVendCreditInvoicingTable.RecId)
                {
                    costInvTransCorrectInvIdVisibility = #True;
                    costInvTransCorrectReasonVisibility = #True;
                    correctedInvoiceId  = custVendCreditInvoicingTable.CustVendCorrectedInvoiceId;
                    correctiveReason    = custVendCreditInvoicingTable.CustVendCorrectiveReason;
                }
                else
                {
                    costInvTransCorrectInvIdVisibility = #False;
                    costInvTransCorrectReasonVisibility = #False;
                    correctedInvoiceId  = Blank;
                    correctiveReason    = Blank;
                }
                break;

            case tableNum(ProjInvoiceEmpl):
                projInvoiceEmpl = _caller;
                projInvoiceEmplDetail = _callerDetail;
                select RefTableId, RefRecId, CustVendCorrectiveReason, CustVendCorrectedInvoiceId
                    from custVendCreditInvoicingTable
                    where custVendCreditInvoicingTable.RefTableId == projInvoiceEmplDetail.TableId
                       && custVendCreditInvoicingTable.RefRecId   == projInvoiceEmplDetail.RecId;

                if (custVendCreditInvoicingTable.RecId)
                {
                    emplInvTransCorrectInvIdVisibility = #True;
                    emplInvTransCorrectReasonVisibility = #True;
                    correctedInvoiceId  = custVendCreditInvoicingTable.CustVendCorrectedInvoiceId;
                    correctiveReason    = custVendCreditInvoicingTable.CustVendCorrectiveReason;
                }
                else
                {
                    emplInvTransCorrectInvIdVisibility = #False;
                    emplInvTransCorrectReasonVisibility = #False;
                    correctedInvoiceId  = Blank;
                    correctiveReason    = Blank;
                }
                break;

            case tableNum(ProjInvoiceItem):
                projInvoiceItem = _caller;
                projInvoiceItemDetail = _callerDetail;
                if (projPreData)
                {
                    select CustVendCorrectiveReason, RecId, TransRecId, TransTableId
                        from custVendCreditInvoicingTrans
                        where custVendCreditInvoicingTrans.TransRecId   == _caller.RecId
                           && custVendCreditInvoicingTrans.TransTableId == _caller.TableId;

                    itemInvTransCorrectInvIdVisibility = #True;
                    itemInvTransCorrectReasonVisibility = #True;

                    if (custVendCreditInvoicingTrans.RecId)
                    {
                        correctedInvoiceId = correctedInvoiceIdOldHeader;
                        correctiveReason   = custVendCreditInvoicingTrans.CustVendCorrectiveReason;
                    }
                    else
                    {
                        correctedInvoiceId = correctedInvoiceIdOldHeader;
                        correctiveReason   = correctiveReasonOldHeader;
                    }
                }
                else
                {
                    select RefTableId, RefRecId, CustVendCorrectiveReason, CustVendCorrectedInvoiceId
                        from custVendCreditInvoicingTable
                        where custVendCreditInvoicingTable.RefTableId == projInvoiceItemDetail.TableId
                           && custVendCreditInvoicingTable.RefRecId   == projInvoiceItemDetail.RecId;

                    if (custVendCreditInvoicingTable.RecId)
                    {
                        itemInvTransCorrectInvIdVisibility = #True;
                        itemInvTransCorrectReasonVisibility = #True;
                        correctedInvoiceId  = custVendCreditInvoicingTable.CustVendCorrectedInvoiceId;
                        correctiveReason    = custVendCreditInvoicingTable.CustVendCorrectiveReason;
                    }
                    else
                    {
                        itemInvTransCorrectInvIdVisibility = #False;
                        itemInvTransCorrectReasonVisibility = #False;
                        correctedInvoiceId  = Blank;
                        correctiveReason    = Blank;
                    }
                }
                break;

            case tableNum(ProjInvoiceOnAcc):
                projInvoiceOnAcc = _caller;
                projInvoiceOnAccDetail = _callerDetail;
                if (projPreData)
                {
                    select CustVendCorrectiveReason, RecId, TransRecId, TransTableId from custVendCreditInvoicingTrans
                        index TransactionIdx
                        where custVendCreditInvoicingTrans.TransRecId   == _caller.RecId
                           && custVendCreditInvoicingTrans.TransTableId == _caller.TableId;

                    onAccInvTransCorrectInvIdVisibility = #True;
                    onAccInvTransCorrectReasonVisibility = #True;

                    if (custVendCreditInvoicingTrans.RecId)
                    {
                        correctedInvoiceId = correctedInvoiceIdOldHeader;
                        correctiveReason   = custVendCreditInvoicingTrans.CustVendCorrectiveReason;
                    }
                    else
                    {
                        correctedInvoiceId = correctedInvoiceIdOldHeader;
                        correctiveReason   = correctiveReasonOldHeader;
                    }
                }
                else
                {
                    select RefTableId, RefRecId, CustVendCorrectiveReason, CustVendCorrectedInvoiceId
                        from custVendCreditInvoicingTable
                        where custVendCreditInvoicingTable.RefTableId == projInvoiceOnAccDetail.TableId
                           && custVendCreditInvoicingTable.RefRecId   == projInvoiceOnAccDetail.RecId;

                    if (custVendCreditInvoicingTable.RecId)
                    {
                        onAccInvTransCorrectInvIdVisibility     = #True;
                        onAccInvTransCorrectReasonVisibility    = #True;
                        correctedInvoiceId  = custVendCreditInvoicingTable.CustVendCorrectedInvoiceId;
                        correctiveReason    = custVendCreditInvoicingTable.CustVendCorrectiveReason;
                    }
                    else
                    {
                        onAccInvTransCorrectInvIdVisibility     = #False;
                        onAccInvTransCorrectReasonVisibility    = #False;
                        correctedInvoiceId                      = Blank;
                        correctiveReason                        = Blank;
                    }
                }
                break;

            case tableNum(ProjInvoiceRevenue):
                projInvoiceRevenue = _caller;
                projInvoiceRevenueDetail = _callerDetail;
                select RefTableId, RefRecId, CustVendCorrectiveReason, CustVendCorrectedInvoiceId
                    from custVendCreditInvoicingTable
                    where custVendCreditInvoicingTable.RefTableId == projInvoiceRevenueDetail.TableId
                       && custVendCreditInvoicingTable.RefRecId   == projInvoiceRevenueDetail.RecId;

                if (custVendCreditInvoicingTable.RecId)
                {
                    revenueInvTransCorrectInvIdVisibility   = #True;
                    revenueInvTransCorrectReasonVisibility  = #True;
                    correctedInvoiceId  = custVendCreditInvoicingTable.CustVendCorrectedInvoiceId;
                    correctiveReason    = custVendCreditInvoicingTable.CustVendCorrectiveReason;
                }
                else
                {
                    revenueInvTransCorrectInvIdVisibility = #False;
                    revenueInvTransCorrectReasonVisibility = #False;
                    correctedInvoiceId  = Blank;
                    correctiveReason    = Blank;
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispitemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>ItemId</c> value for each record on the SRS Report.
    /// </summary>
    /// <returns>
    /// The <c>ItemId</c> value that is based on the <c>ItemNum</c> value.
    /// </returns>
    private ItemId dispitemId()
    {
        CustExternalItemDescription custExternalItemDescription;
        ItemId                      itemId;
        ExternalItemId              externalItemId;

        if (CustFormletterParameters::find().BlankItemId == projInvoiceItem.ItemId)
        {
           itemId = Blank;
        }
        else
        {
            custExternalItemDescription = new CustExternalItemDescription(projInvoiceItem.ItemId, projInvoiceItem.inventDim(), projInvoiceJour.InvoiceAccount);
            custExternalItemDescription.findExternalDescription();
            externalItemId = custExternalItemDescription.externalItemId();

            switch (ProjFormletterParameters::find().ItemNum)
            {
                case OurYourBoth::Our   :   return projInvoiceItem.ItemId;
                case OurYourBoth::Your  :   return externalItemId;
                case OurYourBoth::Both  :   return projInvoiceItem.ItemId;
            }
        }
        return itemId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>externalItemId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the value for the <c>ExternalItemId</c> field.
    /// </summary>
    /// <returns>
    /// The value of the <c>ExternalItemId</c> field.
    /// </returns>
    private ExternalItemId externalItemId()
    {
        CustExternalItemDescription custExternalItemDescription;

        custExternalItemDescription = new CustExternalItemDescription(projInvoiceItem.ItemId, projInvoiceItem.inventDim(), projInvoiceJour.InvoiceAccount);
        custExternalItemDescription.findExternalDescription();

        if (ProjFormletterParameters::find().ItemNum == OurYourBoth::Both && projInvoiceItem.ItemId && (custExternalItemDescription.externalItemId() || projInvoiceItem.ExternalItemId))
        {
            externalItemVisibility = #True;
        }
        else
        {
            externalItemVisibility = #False;
        }

        if (ProjFormletterParameters::find().ItemNum == OurYourBoth::Your || ProjFormletterParameters::find().ItemNum == OurYourBoth::Both)
        {
            if (!projInvoiceItem.ExternalItemId)
            {
                return custExternalItemDescription.externalItemId();
            }
            else
            {
                return projInvoiceItem.ExternalItemId;
            }
        }
        else
        {
            return Blank;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isGiroType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Checks the giro type.
    /// </summary>
    /// <returns>
    ///     true if the giro type is not none; otherwise, false.
    /// </returns>
    protected boolean isGiroType()
    {
        return giroType != PaymentStub::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data and inserts the data into the temporary table.
    /// </summary>
    public void fetch()
    {
        AmountCur               prepaidAmount;
        boolean                 feeFound;
        boolean                 firstSubscriptionFee;
        ProjTrans               projTrans;
        int                     taxCodeCounter;
        ProjInvoiceTable        projInvoiceTable;
        Common                  tmpCommon;
        ProjProposalJour        proposalJour;
        TaxSpecPrintLevel       taxSpecPrintLevel = ProjFormletterParameters::find().TaxSpecPrintLevel;

        // <GEEPL>
        ProjInvoiceItem         loopProjInvoiceItem;
        // </GEEPL>

        #ISOCountryRegionCodes

        this.initTempTableForPaymentSlip();

        projInvoiceEmpl.recordLevelSecurity(true);
        projInvoiceItem.recordLevelSecurity(true);
        projInvoiceCost.recordLevelSecurity(true);
        projInvoiceOnAcc.recordLevelSecurity(true);
        projInvoiceRevenue.recordLevelSecurity(true);
        custPaymSched.recordLevelSecurity(false);

        if (ProjFormletterParameters::find().PckSlpInfoOnInvoice)
        {
            inventTransVisibility = #True;
        }

        if (!projInvoiceJour)
        {
            throw error("@SYS26348");
        }

        showFooterGiro = this.isGiroType();

        if (isProforma)
        {
            prepaidAmount = this.prepaidAmountProforma();
        }
        else
        {
            prepaidAmount = projInvoiceJour.prepaidAmount();
        }
        this.initPrepaidTotals(prepaidAmount);

        showFooterPrepaid       = prepaidAmount != 0;
        showFooterPrepaidEuro   = showFooterPrepaid && this.printEuroTotals();
        showFooterSepaNotification = this.printSepaNotification();

        projInvoiceTable = ProjInvoiceTable::find(projInvoiceJour.ProjInvoiceProjId);

        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            bankAccountTable = BankAccountTable::find(projInvoiceTable.BankAccount);
            salesResponsible = HcmWorker::find(projInvoiceTable.SalesResponsible);
        }
        // </GEECZ>

        printDocuHeader = false;

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoNO]))
        {
            if (projInvoiceJour.PaymId)
            {
                npiBankingPaymIdVisibility = 'true';
            }
            else
            {
                npiBankingPaymIdVisibility = 'false';
            }
        }

        if (projCreditInvoicing)
        {
            this.creditInvoicingLines(projInvoiceJour, tmpCommon);
        }

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU, #isoCZ, #isoPL]))
        {
            this.setOriginalInvoiceReference();

            if (originalInvoiceReference)
            {
                // If the projInvoiceJour has credit note lines, get the reason for the credit note.
                creditNoteReasonComment = ReasonTableRef::find(projInvoiceJour.ReasonTableRef).ReasonComment;
            }
        }
        // </GEEU>

        taxAmountLabel           = "@SYS22646";
        taxAmountMSTVisibility   = #False;
        taxAmountBaseWVisibility = #False;

        if (taxSpecPrintLevel == TaxSpecPrintLevel::CurrencyMST)
        {
            if (projInvoiceJour.CurrencyId != Ledger::accountingCurrency())
            {
                taxAmountMSTVisibility = #True;
                taxAmountMSTLabel      = strFmt('%1 %2', "@SYS22646", Ledger::accountingCurrency());
                taxAmountLabel         = strFmt('%1 %2', "@SYS22646", projInvoiceJour.CurrencyId);

                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
                {
                    taxAmountBaseWVisibility = #True;
                    taxAmountBaseWLabel      = strFmt('%1 %2', "@SYS79745", Ledger::accountingCurrency());
                    taxAmountTotalWLabel     = strFmt('%1 %2', "@SYS79746", Ledger::accountingCurrency());
                }
            }
        }
        // <GEEHU>
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]) &&
                        TaxParameters::find().BankExchRate_W                  &&
                 taxSpecPrintLevel          == TaxSpecPrintLevel::Currency    &&
                 projInvoiceJour.CurrencyId != Ledger::accountingCurrency())
        {
            taxAmountMSTVisibility   = #True;
            taxAmountBaseWVisibility = #True;
            taxAmountMSTLabel        = strFmt('%1 %2', "@SYS22646", Ledger::accountingCurrency());
            taxAmountBaseWLabel      = strFmt('%1 %2', "@SYS79745", Ledger::accountingCurrency());
            taxAmountTotalWLabel     = strFmt('%1 %2', "@SYS79746", Ledger::accountingCurrency());
        }
        // <GEEHU>

        this.insertIntoProjInvoiceTmp(projInvoiceJour);

        while select projInvoiceEmpl
            where projInvoiceEmpl.ProjInvoiceId == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceEmpl.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            // Display zero sales price only if invoice line property is set.
            projTrans = ProjTrans::newProjInvoiceEmpl(projInvoiceEmpl);
            if (this.isPrintInvoiceLine(projTrans))
            {
                if (projCreditInvoicing)
                {
                    while select firstonly projInvoiceEmplDetail
                        where projInvoiceEmpl.RecId == projInvoiceEmplDetail.InvoiceRefRecId
                    {
                        this.creditInvoicingLines(projInvoiceEmpl, projInvoiceEmplDetail);
                    }
                }
                // <GEECZ>
                this.setOriginalInvoiceForTrans_CZ(projInvoiceEmpl.RecId);
                // </GEECZ>
                showProjInvoiceEmpl = #True;
                this.insertIntoProjInvoiceTmp(projInvoiceEmpl);
                showProjInvoiceEmpl = #False;
                this.printDocumentLine(projInvoiceEmpl);
            }
        }

        while select projInvoiceItem
            where projInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceItem.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            // Display zero sales price only if invoice line property is set.
            projTrans = ProjTrans::newProjInvoiceItem(projInvoiceItem);
            if (this.isPrintInvoiceLine(projTrans))
            {
                if (projCreditInvoicing)
                {
                    while select firstonly projInvoiceItemDetail
                        where projInvoiceItem.RecId == projInvoiceItemDetail.InvoiceRefRecId
                    {
                        this.creditInvoicingLines(projInvoiceItem, projInvoiceItemDetail);
                    }
                }

                showProjInvoiceItem = #True;

                // <GEEPL>
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
                {
                    if (!projCreditInvoicingSalesLine && projInvoiceItem.LineAmount < 0)
                    {
                        // Since this is not a sales line based invoice, simulate correction and corrective lines by
                        // showing two report lines per project invoice item line.
                        projInvoiceItem.Qty = abs(projInvoiceItem.Qty);
                        projInvoiceItem.TaxAmount = abs(projInvoiceItem.TaxAmount);
                        projInvoiceItem.LineAmount = abs(projInvoiceItem.LineAmount);
                        this.insertIntoProjInvoiceTmp(projInvoiceItem, '-');

                        projInvoiceItem.Qty = 0;
                        projInvoiceItem.TaxAmount = 0;
                        projInvoiceItem.LineAmount = 0;
                        this.insertIntoProjInvoiceTmp(projInvoiceItem, '+');
                    }
                    else
                    {
                        if (projCreditInvoicingSalesLine && projInvoiceItem.RefReturnInvoiceTrans_W)
                        {
                            projInvoiceItem.Qty        = abs(projInvoiceItem.Qty);
                            projInvoiceItem.LineAmount = abs(projInvoiceItem.LineAmount);
                            projInvoiceItem.TaxAmount  = abs(projInvoiceItem.TaxAmount);
                        }

                        this.insertIntoProjInvoiceTmp(projInvoiceItem);

                        if (projCreditInvoicingSalesLine && projInvoiceItem.CreditNoteInternalRef_PL)
                        {
                            while select loopProjInvoiceItem
                                where loopProjInvoiceItem.ProjInvoiceId == projInvoiceItem.ProjInvoiceId &&
                                      loopProjInvoiceItem.InvoiceDate   == projInvoiceItem.InvoiceDate   &&
                                     !loopProjInvoiceItem.RefReturnInvoiceTrans_W &&
                                      loopProjInvoiceItem.CreditNoteInternalRef_PL == projInvoiceItem.CreditNoteInternalRef_PL
                            {
                                this.insertIntoProjInvoiceTmp(loopProjInvoiceItem);
                            }
                        }
                    }
                }
                else
                {
                // </GEEPL>
                    // <GEECZ>
                    this.setOriginalInvoiceForTrans_CZ(projInvoiceItem.RecId);
                    // </GEECZ>

                    this.insertIntoProjInvoiceTmp(projInvoiceItem);
                // <GEEPL>
                }
                // </GEEPL>

                if (projInvoiceItem.ItemType == ProjItemType::SalesOrder)
                {
                    this.printInventTrans();
                }

                showProjInvoiceItem = #False;

                this.printDocumentLine(projInvoiceItem);
            }
        }

        while select projInvoiceCost
            where projInvoiceCost.ProjInvoiceId == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceCost.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            // Display zero sales price only if invoice line property is set.
            projTrans = ProjTrans::newProjInvoiceCost(projInvoiceCost);
            if (this.isPrintInvoiceLine(projTrans))
            {
                if (projCreditInvoicing)
                {
                    while select firstonly projInvoiceCostDetail
                        where projInvoiceCost.RecId == projInvoiceCostDetail.InvoiceRefRecId
                    {
                        this.creditInvoicingLines(projInvoiceCost, projInvoiceCostDetail);
                    }
                }
                // <GEECZ>
                this.setOriginalInvoiceForTrans_CZ(projInvoiceCost.RecId);
                // </GEECZ>
                showProjInvoiceCost = #True;
                this.insertIntoProjInvoiceTmp(projInvoiceCost);
                showProjInvoiceCost = #False;
                this.printDocumentLine(projInvoiceCost);
            }
        }

        while select projInvoiceRevenue
            where projInvoiceRevenue.ProjInvoiceId  == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceRevenue.InvoiceDate    == projInvoiceJour.InvoiceDate    &&
                  ! projInvoiceRevenue.smaSubscriptionId

        {
            // Display zero sales price only if invoice line property is set.
            projTrans = ProjTrans::newProjInvoiceRevenue(projInvoiceRevenue);
            if (this.isPrintInvoiceLine(projTrans))
            {
                if (projCreditInvoicing)
                {
                    while select firstonly projInvoiceRevenueDetail
                        where projInvoiceRevenue.RecId == projInvoiceRevenueDetail.InvoiceRefRecId
                    {
                        this.creditInvoicingLines(projInvoiceRevenue, projInvoiceRevenueDetail);
                    }
                }

                if (ProjRevenueTrans::find(projInvoiceRevenue.TransId).TransactionOrigin == ProjOrigin::FeeJournal)
                {
                    projectRevenueInvoiceTransVisibility = #True;
                }
                if (ProjRevenueTrans::find(projInvoiceRevenue.TransId).TransactionOrigin == ProjOrigin::ProjAdvancedJournal)
                {
                    projectRevenueInvoiceTransVisibility = #True;
                }
                if (ProjRevenueTrans::find(projInvoiceRevenue.TransId).TransactionOrigin == ProjOrigin::Subscription)
                {
                    subRevenueInvoiceTransVisibility = #True;
                }
                if (ProjRevenueTrans::find(projInvoiceRevenue.TransId).TransactionOrigin == ProjOrigin::Subscription)
                {
                    subRevenueInvoiceTransTxtVisibility = #True;
                }
                // <GEECZ>
                this.setOriginalInvoiceForTrans_CZ(projInvoiceRevenue.RecId);
                // </GEECZ>

                showProjInvoiceRevenue = #True;
                this.insertIntoProjInvoiceTmp(projInvoiceRevenue);
                showProjInvoiceRevenue = Blank;
                this.printDocumentLine(projInvoiceRevenue);
                feeFound = true;
                projectRevenueInvoiceTransVisibility= Blank;
                subRevenueInvoiceTransVisibility = Blank;
                subRevenueInvoiceTransTxtVisibility = Blank;
            }
        }

        firstSubscriptionFee    = true;

        while select projInvoiceRevenue
            order by smaSubscriptionId, smaStartDate desc, smaEnddate desc, TransId desc
            where projInvoiceRevenue.ProjInvoiceId  == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceRevenue.InvoiceDate    == projInvoiceJour.InvoiceDate    &&
                  projInvoiceRevenue.smaSubscriptionId
        {
            if (feeFound && firstSubscriptionFee)
            {
                firstSubscriptionFee = false;
            }

            // Display zero sales price only if invoice line property is set.
            projTrans = ProjTrans::newProjInvoiceRevenue(projInvoiceRevenue);
            if (this.isPrintInvoiceLine(projTrans))
            {
                if (projCreditInvoicing)
                {
                    while select firstonly projInvoiceRevenueDetail
                        where projInvoiceRevenue.RecId == projInvoiceRevenueDetail.InvoiceRefRecId
                    {
                        this.creditInvoicingLines(projInvoiceRevenue, projInvoiceRevenueDetail);
                    }
                }
                // <GEECZ>
                this.setOriginalInvoiceForTrans_CZ(projInvoiceRevenue.RecId);
                // </GEECZ>
                showProjInvoiceRevenue = #True;
                this.insertIntoProjInvoiceTmp(projInvoiceRevenue);
                showProjInvoiceRevenue = #False;

                if (ProjRevenueTrans::find(projInvoiceRevenue.TransId).TransactionOrigin == ProjOrigin::FeeJournal)
                {
                    projectRevenueInvoiceTransVisibility = #True;
                }
                if (ProjRevenueTrans::find(projInvoiceRevenue.TransId).TransactionOrigin == ProjOrigin::ProjAdvancedJournal)
                {
                    projectRevenueInvoiceTransVisibility = #True;
                }
                if (ProjRevenueTrans::find(projInvoiceRevenue.TransId).TransactionOrigin == ProjOrigin::Subscription)
                {
                    subRevenueInvoiceTransVisibility = #True;
                }
                if (ProjRevenueTrans::find(projInvoiceRevenue.TransId).TransactionOrigin == ProjOrigin::Subscription)
                {
                    subRevenueInvoiceTransTxtVisibility = #True;
                }

                showProjInvoiceRevenue = #True;
                this.insertIntoProjInvoiceTmp(projInvoiceRevenue);
                showProjInvoiceRevenue = Blank;
                this.printDocumentLine(projInvoiceRevenue);
                projectRevenueInvoiceTransVisibility= Blank;
                subRevenueInvoiceTransVisibility = Blank;
                subRevenueInvoiceTransTxtVisibility = Blank;
            }
        }

        while select projInvoiceOnAcc
            where projInvoiceOnAcc.ProjInvoiceId    == projInvoiceJour.ProjInvoiceId  &&
                  projInvoiceOnAcc.InvoiceDate      == projInvoiceJour.InvoiceDate
        {
            if (projCreditInvoicing)
            {
                while select firstonly projInvoiceOnAccDetail
                    where projInvoiceOnAcc.RecId == projInvoiceOnAccDetail.InvoiceRefRecId
                {
                    this.creditInvoicingLines(projInvoiceOnAcc, projInvoiceOnAccDetail);
                }
            }

            // <GEECZ>
            this.setOriginalInvoiceForTrans_CZ(projInvoiceOnAcc.RecId);
            // </GEECZ>

            showProjInvoiceOnAcc = #True;
            this.insertIntoProjInvoiceTmp(projInvoiceOnAcc);
            showProjInvoiceOnAcc = #False;
            this.printDocumentLine(projInvoiceOnAcc);
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoFI]))
        {
            // Print miscellaneous charges
            this.markupSpec();
        }

        if (ProjFormletterParameters::find().TaxSpecPrintLevel != TaxSpecPrintLevel::None)
        {
            // <GEECZ>
            if (!countryRegion_CZ)
            {
            // </GEECZ>
                if (isProforma)
                {
                    taxSpec = TaxSpec::construct(Blank, naDate(), projInvoiceJour.RecId);
                    taxSpec.setTmpTaxWorkTrans(formletterProformaPrint.tmpTaxWorkTrans(projInvoiceJour.RecId));
                }
                else
                {
                    taxSpec = TaxSpec::construct(projInvoiceJour.LedgerVoucher, projInvoiceJour.InvoiceDate, projInvoiceJour.RecId);
                }

                taxSpec.parmLanguageId(projInvoiceJour.LanguageId);

                while (taxSpec.parmTaxSpec(false))
                {
                    if (cashDiscOnInvoice)
                    {
                        if (projInvoiceJour.CashDiscPercent == 100)
                        {
                            amount            = 0;
                            cashDiscAmountTax = 0;
                        }
                        else
                        {
                            amount            = taxSpec.taxBaseAmount() / ((100 - projInvoiceJour.CashDiscPercent) / 100);
                            cashDiscAmountTax = amount * (projInvoiceJour.CashDiscPercent / 100);
                        }
                    }

                    showTaxTrans = #True;
                    this.insertIntoProjInvoiceTmp(taxTrans);
                    showTaxTrans = #False;
                }

            // <GEECZ>
            }
            else
            {
                this.insertTaxes_CZ();
            }
            // </GEECZ>
        }

        if (projInvoiceJour.PaymentSched)
        {
            proposalJour = ProjProposalJour::find(projInvoiceJour.ProposalId);
            showCustPaymSched = #True;

            while select custPaymSched
                where custPaymSched.ExtRecId == proposalJour.RecId
                && custPaymSched.ExtTableId == proposalJour.TableId
            {
                while select custPaymSchedLine
                    where custPaymSchedLine.ParentRecID == custPaymSched.RecId
                {
                    this.insertIntoProjInvoiceTmp(custPaymSchedLine);
                }
            }

            showCustPaymSched = #False;
        }

        if (projInvoiceJour.InvoiceAmount > 0)
        {
            switch (projInvoiceJour.ProjInvoiceType)
            {
                case ProjInvoiceType::OnAccount:
                    formLetterRemarks = FormLetterRemarks::find(projInvoiceJour.LanguageId,FormTextType::ProjectAcontoInvoice);
                    break;
                case ProjInvoiceType::Invoice:
                    formLetterRemarks = FormLetterRemarks::find(projInvoiceJour.LanguageId,FormTextType::ProjectInvoice);
                    break;
            }
        }
        else
        {
            formLetterRemarks = FormLetterRemarks::find(projInvoiceJour.LanguageId,FormTextType::ProjectCreditNote);
        }

        if (prepaidAmount)
        {
            if (isProforma)
            {
                this.printPrepaidCustTransProforma();
            }
            else
            {
                this.printPrepaidCustTrans();
            }
        }

        this.printDocumentHeader();
        showFormLetterRemarks = #True;
        this.insertIntoProjInvoiceTmp(formLetterRemarks);
        showFormLetterRemarks = #False;

        if (!printDocuHeader)
        {
            docuRefVisibility = #False;
        }
        else
        {
            docuRefVisibility = #True;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formatPackingSlipInfo</Name>
				<Source><![CDATA[
    private str formatPackingSlipInfo(InventQty _qty, PackingSlipId _packingSlipId, date _shippingDate)
    {
        str infoStr = "@SYS14578" + strFmt(' : %1  ', _qty);

        if (_packingSlipId)
        {
            infoStr += "@SYS23437" + ': ' + _packingSlipId + '  ';
        }

        infoStr += "@SYS16056" + ': ' + date2str(_shippingDate,-1,-1,-1,-1,-1,-1, DateFlags::FormatAll);

        if (_qty || _shippingDate)
        {
            return infoStr;
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAccountingExchangeRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a triangulated exchange rate for translating the specified currency to monetary standard
    /// (MST) currency.
    /// </summary>
    /// <param name="_projInvoiceJour">
    /// A <c>ProjInvoiceJour</c> table buffer.
    /// </param>
    /// <returns>
    /// A triangulated exchange rate.
    /// </returns>
    private CurrencyExchangeRate getAccountingExchangeRate(ProjInvoiceJour _projInvoiceJour)
    {
        CurrencyExchangeRate currentTransactionCurrencyExchangeRate;

        currentTransactionCurrencyExchangeRate = ExchangeRateHelper::getCrossRate_Static(
            Ledger::current(),
            _projInvoiceJour.CurrencyId,
            _projInvoiceJour.InvoiceDate);

        return CurrencyEuroDenomination::displayStoredExchangeRate_Static(currentTransactionCurrencyExchangeRate, 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>ProjInvoiceLocalizationTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>ProjInvoiceLocalizationTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(ProjInvoiceLocalizationTmp))
    ]
    public ProjInvoiceLocalizationTmp getProjInvoiceLocalizationTmp()
    {
        select projInvoiceLocalizationTmp;
        return projInvoiceLocalizationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data from the <c>ProjInvoiceTmp</c> temporary table.
    /// </summary>
    /// <returns>
    /// Data from the <c>ProjInvoiceTmp</c> temporary table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(ProjInvoiceTmp))
    ]
    public ProjInvoiceTmp getProjInvoiceTmp()
    {
        select projInvoiceTmp;
        return projInvoiceTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public void init()
    {
        SRSTmpDataStore srsTmpDataStore;
        container       formLetterPackedValue;

        printLabel          = true;
        projFormletterParameters = ProjFormletterParameters::find();
        projParameters           = ProjParameters::find();
        this.changeDesign();

        cashDiscOnInvoice   = TaxParameters::find().CashDiscOnInvoice;
        projCreditInvoicing = CustParameters::find().CreditInvoicingReport;

        inventDimReport = InventDimCtrl_Rep_Project::construct();
        inventDimReport.parmDocumentStatus(DocumentStatus::Invoice);
        inventDimReport.parmDisableLabel(projFormletterParameters.PrePrintLevelInvoice == PrePrintLevel::PrePrinted);
        inventDimReport.initDimParmVisible();
        inventdimSetup = inventDimReport.dimFieldsActive(inventDimReport.parmDimParmVisible());

        isProforma      = projInvoiceContract.parmProforma();
        formLetterRecId = projInvoiceContract.parmFormLetterRecordId();

        // Init formletter
        if (formLetterRecId)
        {
            ttsbegin;
            // need to use the default transaction, since we are reading data that is not yet committed.
            select forupdate firstonly Value from srsTmpDataStore
            where srsTmpDataStore.RecId == formLetterRecId;

            if (srsTmpDataStore.RecId)
            {
                // get and delete first.
                formLetterPackedValue = srsTmpDataStore.Value;
                srsTmpDataStore.delete();

                // then create form letter
                if (isProforma)
                {
                    formletterProformaPrint = FormletterProformaPrint::newUnpack(formLetterPackedValue);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPrepaidTotals</Name>
				<Source><![CDATA[
    private void initPrepaidTotals(AmountCur prepaidAmount)
    {
        showPrepaidTotals = prepaidAmount ? #True : #False;
        showPrepaidTotalsEuro = prepaidAmount && this.printEuroTotals() ? #True : #False;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initTempTableFromCompanyInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the temporary <c>projInvoiceTmp</c> table from the data in the <c>CompanyInfo</c>
    /// table.
    /// </summary>
    protected void initTempTableFromCompanyInfo()
    {
        // <GEEU>
        BankAccountTable bankAccount;
        // </GEEU>

        super();

        select firstonly InvoiceDate from projInvoiceJour
             where projInvoiceJour.RecId == projInvoiceContract.parmProjJourRecId();

        projInvoiceTmp.EnterpriseNumber         = companyEnterpriseNumber;

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU, #isoCZ, #isoPL]))
        {
            projInvoiceLocalizationTmp.PrintLogo   = projInvoiceTmp.PrintLogo;
            projInvoiceLocalizationTmp.CompanyLogo = projInvoiceTmp.CompanyLogo;

            projInvoiceLocalizationTmp.CompanyName              = companyInfo.Name;
            projInvoiceLocalizationTmp.CompanyAddress           = companyInfo.postalAddress().Address;
            projInvoiceLocalizationTmp.CompanyPhone             = companyInfo.phone();
            projInvoiceLocalizationTmp.CompanyTeleFax           = companyInfo.teleFax();
            projInvoiceLocalizationTmp.CompanyCoRegNum          = companyInfo.CoRegNum;
            projInvoiceLocalizationTmp.CompanyVATNum            = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, projInvoiceJour.InvoiceDate);
            projInvoiceLocalizationTmp.CompanyRegNum            = companyInfo.RegNum;
            projInvoiceLocalizationTmp.CompanyDebitDirectId     = BankAccountTable::findByCompany(companyInfo.DataArea, companyInfo.Bank).DebitDirectId;

            if (companyInfo.Bank)
            {
                bankAccount = BankAccountTable::find(companyInfo.Bank);

                projInvoiceLocalizationTmp.CompanyBankAccountName   = bankAccount.Name;
                projInvoiceLocalizationTmp.CompanyBankAccountNum    = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                        bankAccount.AccountNum : "@AccountsReceivable:FiveAsterisk";
                projInvoiceLocalizationTmp.CompanyBankAccountRegNum = bankAccount.RegistrationNum;
            }
        }
        // </GEEU>

        // <GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
        {
            projInvoiceLocalizationTmp.CompanyEnterpriseCode = companyInfo.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, projInvoiceJour.InvoiceDate);
        }
        // </GEELT>

        // <GEECZ>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            projInvoiceLocalizationTmp.RegNumCompaniesFieldMap::initCommercialRegisterFromTaxRegistration(companyInfo, projInvoiceJour.InvoiceDate);

            projInvoiceLocalizationTmp.CompanyEmail = companyInfo.email();
        }
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoProjInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into the temporary table.
    /// </summary>
    /// <param name="_cursor">
    /// The common object to hold table data.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp table record; optional.
    /// </param>
    protected void insertIntoProjInvoiceLocalizationTmp(Common _cursor, char _lineSign = '')
    {
        this.populateProjInvoiceLocalizationTmp(_cursor, _lineSign);

        // <GEEPL>
        if (originalInvoiceReference && (projInvoiceJour.InvoiceAmount < 0) && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            if ((_cursor.TableId == tableNum(ProjInvoiceEmpl)) ||
                (_cursor.TableId == tableNum(ProjInvoiceCost)) ||
                (_cursor.TableId == tableNum(ProjInvoiceRevenue)) ||
                (_cursor.TableId == tableNum(ProjInvoiceOnAcc)))
            {
                // For a credit note, show two report lines per Empl, Cost, Revenue, or OnAccount invoice line.
                projInvoiceLocalizationTmp.Qty = -projInvoiceLocalizationTmp.Qty;
                projInvoiceLocalizationTmp.TaxAmount = -projInvoiceLocalizationTmp.TaxAmount;
                projInvoiceLocalizationTmp.LineAmount = -projInvoiceLocalizationTmp.LineAmount;
                projInvoiceLocalizationTmp.LineSign = '-';
                projInvoiceLocalizationTmp.insert();

                projInvoiceLocalizationTmp.Qty = 0;
                projInvoiceLocalizationTmp.TaxAmount = 0;
                projInvoiceLocalizationTmp.LineAmount = 0;
                projInvoiceLocalizationTmp.LineSign = '+';
                projInvoiceLocalizationTmp.insert();
            }
            else
            {
                projInvoiceLocalizationTmp.insert();
            }
        }
        else
        {
            // </GEEPL>
            projInvoiceLocalizationTmp.insert();
            // <GEEPL>
        }
        // </GEEPL>
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjInvoiceLocalizationTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates data into the temporary table.
    /// </summary>
    /// <param name="_cursor">
    /// The common object to hold table data.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp table record.
    /// </param>
    protected void populateProjInvoiceLocalizationTmp(Common _cursor, char _lineSign)
    {
        CustTable buyer;
        // <GEEPL>
        CustTable remitter;
        // </GEEPL>

        // <GEELT>
        TransportationDocument transportationDocument;
        TransportationVehicle transportationVehicle;
        // </GEELT>

        ProjFundingSource projFundingSource;
        projFundingSource = ProjFundingSource::find(ProjProposalJour::find(projInvoiceJour.ProposalId).FundingSource);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU, #isoCZ, #isoPL]))
        {
            buyer = CustTable::find(projInvoiceJour.OrderAccount);
        }

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            remitter = CustTable::find(projInvoiceJour.InvoiceAccount);
            projInvoiceLocalizationTmp.AccountingCurrency = Ledger::accountingCurrency();
            projInvoiceLocalizationTmp.ExchangeRate = this.getAccountingExchangeRate(projInvoiceJour);
            projInvoiceLocalizationTmp.LineSign = '';

            if (projInvoiceJour.CurrencyId != Ledger::accountingCurrency())
            {
                projInvoiceLocalizationTmp.AccountingCurrencyAmountVisibility = NoYes::Yes;
            }

            if (projFormletterParameters.PrintInvoiceVATNum)
            {
                projInvoiceLocalizationTmp.InvoiceVATNumVisibility = NoYes::Yes;
            }

            if (projInvoiceJour.InvoiceAccount != projInvoiceJour.OrderAccount)
            {
                projInvoiceLocalizationTmp.InvoiceAccountVisibility = NoYes::Yes;
            }
        }
        // </GEEPL>

        if (vatNumVisibility == #True)
        {
            projInvoiceLocalizationTmp.InvoiceAccountAddress                = CustTable::find(projInvoiceJour.InvoiceAccount).invoiceAddress().Address;
        }
        else
        {
            projInvoiceLocalizationTmp.InvoiceAccountAddress                = LogisticsPostalAddress::findByLocation(projFundingSource.InvoiceLocation).Address;
        }

        projInvoiceLocalizationTmp.vatNum                               = projInvoiceJour.vatNum;
        projInvoiceLocalizationTmp.InvoiceDate                          = projInvoiceJour.InvoiceDate;
        projInvoiceLocalizationTmp.SalesOrdernum                        = projInvoiceJour.ProjInvoiceProjId;
        projInvoiceLocalizationTmp.PaymentCondition                     = projInvoiceJour.paymentCondition();
        projInvoiceLocalizationTmp.InvoiceAccount                       = projInvoiceJour.InvoiceAccount;
        projInvoiceLocalizationTmp.InvoiceNum                           = projInvoiceJour.ProjInvoiceId;
        projInvoiceLocalizationTmp.smaSpecIndexCalc                     = projInvoiceJour.smaSpecIndexCalc;
        projInvoiceLocalizationTmp.TaxPrintTaxFreeBalance               = projFormletterParameters.TaxPrintTaxFreeBalance;
        projInvoiceLocalizationTmp.CreditNoteReasonComment              = creditNoteReasonComment;
        projInvoiceLocalizationTmp.OriginalInvoiceReference             = originalInvoiceReference;

        if (_cursor.TableId == tableNum(ProjInvoiceItem))
        {
            projInvoiceLocalizationTmp.Project                          = projInvoiceItem.ProjId;
            projInvoiceLocalizationTmp.Txt                              = projInvoiceItem.Txt;
            projInvoiceLocalizationTmp.Qty                              = projInvoiceItem.Qty;
            projInvoiceLocalizationTmp.SalesPrice                       = projInvoiceItem.salesPrice();
            projInvoiceLocalizationTmp.DiscPercent                      = projInvoiceItem.LinePercent;
            projInvoiceLocalizationTmp.DiscAmount                       = projInvoiceItem.LineDisc;
            projInvoiceLocalizationTmp.LineAmount                       = projInvoiceItem.LineAmount;
            projInvoiceLocalizationTmp.TaxWriteCode                     = projInvoiceItem.TaxWriteCode;

            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoCZ]))
            {
                projInvoiceLocalizationTmp.SalesUnit                    = projInvoiceItem.SalesUnit;
            }

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                projInvoiceLocalizationTmp.LineTaxAmount                = projInvoiceItem.TaxAmount;
            }
            // </GEEPL></GEEHU>

            // <GEEHU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                projInvoiceLocalizationTmp.LineTaxAmount                -= ProjInvoiceDP::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }
            // </GEEHU>

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                projInvoiceLocalizationTmp.pkWiUCode_PL                 = InventTable::find(projInvoiceItem.ItemId).pkWiUCode_PL;
                projInvoiceLocalizationTmp.ItemPriceAfterDiscount       = CurrencyExchangeHelper::price((projInvoiceLocalizationTmp.SalesPrice - projInvoiceLocalizationTmp.DiscAmount) * (1 - projInvoiceLocalizationTmp.DiscPercent / 100), projInvoiceItem.CurrencyId);

                if (projInvoiceItem.RefReturnInvoiceTrans_W || !projCreditInvoicingSalesLine)
                {
                    // If the line is not a credit note line or a correction line, show the line number.
                    lineNumber = lineNumber + 1;
                    projInvoiceLocalizationTmp.LineNumber               = lineNumber;
                }

                if (_lineSign)
                {
                    projInvoiceLocalizationTmp.LineSign                 = _lineSign;
                }
                else
                {
                    projInvoiceLocalizationTmp.LineSign                 = projCreditInvoicingSalesLine ? (projInvoiceItem.RefReturnInvoiceTrans_W ? '-' : '+') : '';
                }

                if (!projInvoiceItem.TaxWriteCode &&
                     projInvoiceItem.TaxGroupId   &&
                     projInvoiceItem.TaxItemGroupId)
                {
                    projInvoiceLocalizationTmp.TaxWriteCode             = TaxTable::getTaxWriteCodeVat(projInvoiceItem.TaxGroupId, projInvoiceItem.TaxItemGroupId);
                }
            }
            // </GEEPL>

            // <GEEHU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                projInvoiceLocalizationTmp.Intracode                    = EcoResCategory::commodityCode(projInvoiceItem.IntrastatCommodity);
                projInvoiceLocalizationTmp.ItemName                     = InventTable::find(projInvoiceItem.ItemId).itemName();
            }
            // </GEEHU>
        }

        if (_cursor.TableId == tableNum(ProjInvoiceEmpl))
        {
            projInvoiceLocalizationTmp.Project                          = projInvoiceEmpl.ProjId;
            projInvoiceLocalizationTmp.Category                         = projInvoiceEmpl.CategoryId;
            projInvoiceLocalizationTmp.TransDate                        = projInvoiceEmpl.TransDate;
            projInvoiceLocalizationTmp.Txt                              = projInvoiceEmpl.Txt;
            projInvoiceLocalizationTmp.Qty                              = projInvoiceEmpl.Qty;
            projInvoiceLocalizationTmp.SalesPrice                       = projInvoiceEmpl.salesPrice();
            projInvoiceLocalizationTmp.LineAmount                       = projInvoiceEmpl.LineAmount;
            projInvoiceLocalizationTmp.TaxWriteCode                     = projInvoiceEmpl.TaxWriteCode;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                projInvoiceLocalizationTmp.LineTaxAmount                = projInvoiceEmpl.TaxAmount;
            }
            // </GEEPL></GEEHU>

            // <GEEHU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                projInvoiceLocalizationTmp.LineTaxAmount                -= ProjInvoiceDP::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }
            // </GEEHU>
        }

        if (_cursor.TableId == tableNum(ProjInvoiceCost))
        {
            projInvoiceLocalizationTmp.Project                          = projInvoiceCost.ProjId;
            projInvoiceLocalizationTmp.Category                         = projInvoiceCost.CategoryId;
            projInvoiceLocalizationTmp.Txt                              = projInvoiceCost.Txt;
            projInvoiceLocalizationTmp.Qty                              = projInvoiceCost.Qty;
            projInvoiceLocalizationTmp.SalesPrice                       = projInvoiceCost.salesPrice();
            projInvoiceLocalizationTmp.LineAmount                       = projInvoiceCost.LineAmount;
            projInvoiceLocalizationTmp.TaxWriteCode                     = projInvoiceCost.TaxWriteCode;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                projInvoiceLocalizationTmp.LineTaxAmount                = projInvoiceCost.TaxAmount;
            }
            // </GEEPL></GEEHU>

            // <GEEHU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                projInvoiceLocalizationTmp.LineTaxAmount                -= ProjInvoiceDP::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }
            // </GEEHU>

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                projInvoiceLocalizationTmp.TransDate                    = projInvoiceCost.TransDate;
            }
            // </GEEPL>
        }

        if (_cursor.TableId == tableNum(ProjInvoiceRevenue))
        {
            projInvoiceLocalizationTmp.Project                          = projInvoiceRevenue.ProjId;
            projInvoiceLocalizationTmp.Category                         = projInvoiceRevenue.CategoryId;
            projInvoiceLocalizationTmp.Txt                              = projInvoiceRevenue.Txt;
            projInvoiceLocalizationTmp.LineAmount                       = projInvoiceRevenue.LineAmount;
            projInvoiceLocalizationTmp.TaxWriteCode                     = projInvoiceRevenue.TaxWriteCode;
            projInvoiceLocalizationTmp.smaSubscriptionId                = projInvoiceRevenue.smaSubscriptionId;
            projInvoiceLocalizationTmp.smaBasePrice                     = projInvoiceRevenue.smaBasePrice;
            projInvoiceLocalizationTmp.smaIndex                         = projInvoiceRevenue.smaIndex;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                projInvoiceLocalizationTmp.LineTaxAmount                = projInvoiceRevenue.TaxAmount;
            }
            // </GEEPL></GEEHU>

            // <GEEHU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                projInvoiceLocalizationTmp.LineTaxAmount                -= ProjInvoiceDP::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }
            // </GEEHU>

            // <GEELT>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
            {
                projInvoiceLocalizationTmp.SalesPrice                   = projInvoiceRevenue.salesPrice();
            }
            // </GEELT>

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                projInvoiceLocalizationTmp.TransDate                    = projInvoiceRevenue.TransDate;
                projInvoiceLocalizationTmp.Qty                          = projInvoiceRevenue.Qty;
            }
            // </GEEPL>
        }

        if (_cursor.TableId == tableNum(ProjInvoiceOnAcc))
        {
            projInvoiceLocalizationTmp.Project                          = projInvoiceOnAcc.ProjId;
            projInvoiceLocalizationTmp.Txt                              = projInvoiceOnAcc.Txt;
            projInvoiceLocalizationTmp.LineAmount                       = projInvoiceOnAcc.Amount;
            projInvoiceLocalizationTmp.TaxWriteCode                     = projInvoiceOnAcc.TaxWriteCode;

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                projInvoiceLocalizationTmp.LineTaxAmount                = projInvoiceOnAcc.TaxAmount;
            }
            // </GEEPL></GEEHU>

            // <GEEHU>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
            {
                // There may be tax amounts that should be excluded from the invoice. Remove the excluded amounts from the line's tax amount.
                projInvoiceLocalizationTmp.LineTaxAmount                -= ProjInvoiceDP::getExcludedTaxAmount(projInvoiceJour.LedgerVoucher, _cursor);
            }
            // </GEEHU>

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                projInvoiceLocalizationTmp.TransDate                    = projInvoiceOnAcc.TransDate;
            }
            // </GEEPL>
        }

        projInvoiceLocalizationTmp.Periods                              = strFmt("@SYS76785", date2str(projInvoiceRevenue.smaStartDate,123,2,3,2,3,2, DateFlags::FormatAll),
                                                                    date2str(projInvoiceRevenue.smaEnddate,123,2,3,2,3,2, DateFlags::FormatAll));
        projInvoiceLocalizationTmp.ItemId                               = this.dispitemId();

        projInvoiceLocalizationTmp.CorrectedInvoiceId                   = correctedInvoiceId;
        projInvoiceLocalizationTmp.CorrectiveReason                     = correctiveReason;
        projInvoiceLocalizationTmp.ExternalItemId                       = this.externalItemId();

        if (_cursor.TableId == tableNum(InventTrans))
        {
            projInvoiceLocalizationTmp.PackingSlipInfoVisibility        = ProjFormletterParameters::find().PckSlpInfoOnInvoice;
            projInvoiceLocalizationTmp.PackingSlipInfo                  = this.printPackingSlipInfo();
        }
        else
        {
            projInvoiceLocalizationTmp.PackingSlipInfoVisibility        = NoYes::No;
        }

        if (_cursor.TableId == tableNum(CustPaymSchedLine))
        {
            custPaymentSchedLine = _cursor;
            projInvoiceLocalizationTmp.DueDate                          = custPaymentSchedLine.DueDate;
            projInvoiceLocalizationTmp.DueAmount                        = custPaymentSchedLine.DueAmount;
            projInvoiceLocalizationTmp.DiscDate                         = custPaymentSchedLine.DiscDate;
            projInvoiceLocalizationTmp.DiscAmount                       = custPaymentSchedLine.DiscAmount;
        }
        else
        {
            projInvoiceLocalizationTmp.DueDate                          = projInvoiceJour.DueDate;
        }

        projInvoiceLocalizationTmp.PrepaidNetAmount                     = custTrans.prepaidNetAmount();
        projInvoiceLocalizationTmp.PrepaidTaxAmount                     = custTrans.prepaidTaxAmount();
        projInvoiceLocalizationTmp.SettleAmountCur                      = custTrans.SettleAmountCur;
        projInvoiceLocalizationTmp.CurrencyCode                         = custTrans.CurrencyCode;

        if (taxSpec)
        {
            projInvoiceLocalizationTmp.PrintCode                        = taxSpec.taxWriteCode();
            projInvoiceLocalizationTmp.TaxCode                          = taxSpec.taxCode();
            projInvoiceLocalizationTmp.Amount                           = -amount;
            projInvoiceLocalizationTmp.CashDiscAmount                   = -cashDiscAmountTax;
            projInvoiceLocalizationTmp.TaxBaseQty                       = -taxSpec.taxBaseQty();
            projInvoiceLocalizationTmp.TaxAmount                        = -taxSpec.taxAmount();
            projInvoiceLocalizationTmp.TaxAmountMST                     = -taxSpec.taxAmountMST();
            projInvoiceLocalizationTmp.TaxExemptDescription             = taxSpec.taxExemptDescription();
            projInvoiceLocalizationTmp.TaxBaseAmount                    = -taxSpec.taxBaseAmount();

            // <GEEHU><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
            {
                projInvoiceLocalizationTmp.TaxBaseAmount_W              = -taxSpec.taxBaseAmountMST();
            }
            // </GEEPL></GEEHU>

            // <GEECZ>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
            {
                projInvoiceLocalizationTmp.TaxValue                     = TaxData::find(taxSpec.taxCode(), projInvoiceJour.InvoiceDate, taxSpec.taxBaseQty()).TaxValue;
            }
            // </GEECZ>

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                projInvoiceLocalizationTmp.TaxValue                     = TaxData::percent(taxSpec.taxCode(), projInvoiceJour.InvoiceDate, taxSpec.taxBaseAmountMST());
            }
            // </GEEPL>

            projInvoiceLocalizationTmp.TaxDirective                     = LanguageTxt::find(tableNum(TaxTable), TaxTable::find(taxSpec.taxCode()).RecId, taxSpec.parmLanguageId()).Txt;

            // <GEEHU><GEELT>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
            {
                projInvoiceLocalizationTmp.TaxExcludeFromInvoice        = taxSpec.parmExcludeFromInvoice();

                if (projInvoiceLocalizationTmp.TaxExcludeFromInvoice == NoYes::Yes)
                {
                    // Set the tax amount in Euro so that it can be subtracted from the total tax amount in Euro on the report.
                    projInvoiceLocalizationTmp.TaxAmountEuro            = projInvoiceJour.amountCur2Euro(projInvoiceLocalizationTmp.TaxAmount);

                    // Set the tax amount that was excluded so it can be subtracted from the invoice amount on the report.
                    projInvoiceLocalizationTmp.TaxAmountExcluded        = projInvoiceLocalizationTmp.TaxAmount;

                    // Set the tax amounts to zero so they aren't included on the invoice.
                    projInvoiceLocalizationTmp.TaxAmount                = 0;
                    projInvoiceLocalizationTmp.TaxAmountMST             = 0;
                }
                else
                {
                    projInvoiceLocalizationTmp.TaxAmountEuro            = 0;
                    projInvoiceLocalizationTmp.TaxAmountExcluded        = 0;
                }
            }
            // </GEELT></GEEHU>
        }

        // <GEEHU><GEELT>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoLT]))
        {
            // Clear the TaxAmount fields if this is not a tax temp table record because the tax fields are summed in the SSRS report.
            projInvoiceLocalizationTmp.TaxAmount                        = (showTaxTrans == #True) ? projInvoiceLocalizationTmp.TaxAmount : 0;
            projInvoiceLocalizationTmp.TaxAmountExcluded                = (showTaxTrans == #True) ? projInvoiceLocalizationTmp.TaxAmountExcluded : 0;
            projInvoiceLocalizationTmp.TaxAmountMST                     = (showTaxTrans == #True) ? projInvoiceLocalizationTmp.TaxAmountMST : 0;
            projInvoiceLocalizationTmp.TaxAmountEuro                    = (showTaxTrans == #True) ? projInvoiceLocalizationTmp.TaxAmountEuro : 0;
        }
        // </GEELT></GEEHU>

        if (formLetterRemarks)
        {
            projInvoiceLocalizationTmp.FormLetterTxt                    = formLetterRemarks.Txt;
        }

        projInvoiceLocalizationTmp.ShowCustTransOffset                  = showCustTransOffset;
        projInvoiceLocalizationTmp.ShowInventTrans                      = showInventTrans;
        projInvoiceLocalizationTmp.ShowMarkupTrans                      = showMarkupTrans;
        projInvoiceLocalizationTmp.ShowFormLetters                      = showFormLetterRemarks;
        projInvoiceLocalizationTmp.ShowCustPaymSched                    = showCustPaymSched;
        projInvoiceLocalizationTmp.ShowTaxTrans                         = showTaxTrans;
        projInvoiceLocalizationTmp.ShowProjInvoiceItem                  = showProjInvoiceItem;
        projInvoiceLocalizationTmp.ShowProjInvoiceEmpl                  = showProjInvoiceEmpl;
        projInvoiceLocalizationTmp.ShowProjInvoiceCost                  = showProjInvoiceCost;
        projInvoiceLocalizationTmp.ShowProjInvoiceRevenue               = showProjInvoiceRevenue;
        projInvoiceLocalizationTmp.ShowProjInvoiceOnAcc                 = showProjInvoiceOnAcc;

        projInvoiceLocalizationTmp.SalesBalance                         = projInvoiceJour.SalesOrderbalance;
        projInvoiceLocalizationTmp.EndDisc                              = projInvoiceJour.EndDisc;
        projInvoiceLocalizationTmp.CashDisc                             = projInvoiceJour.CashDisc;
        projInvoiceLocalizationTmp.TaxableBalance                       = projInvoiceJour.taxableBalanceMST(this.tmpTaxWorkTrans());
        projInvoiceLocalizationTmp.SumMarkup                            = projInvoiceJour.SumMarkup;
        projInvoiceLocalizationTmp.TaxFreeBalance                       = projInvoiceJour.taxFreeBalance(this.tmpTaxWorkTrans());
        projInvoiceLocalizationTmp.SumTax                               = projInvoiceJour.SumTax;
        projInvoiceLocalizationTmp.InvoiceRoundOff                      = projInvoiceJour.InvoiceRoundOff;
        projInvoiceLocalizationTmp.InvoiceAmount                        = projInvoiceJour.InvoiceAmount;
        projInvoiceLocalizationTmp.CurrencyCode                         = projInvoiceJour.CurrencyId;
        projInvoiceLocalizationTmp.NetAmount                            = projInvoiceJour.netAmount();

        projInvoiceLocalizationTmp.TaxableBalanceEuro                   = projInvoiceJour.taxableBalanceEuro(this.tmpTaxWorkTrans());
        projInvoiceLocalizationTmp.TaxFreeBalanceEuro                   = projInvoiceJour.taxFreeBalanceEuro(this.tmpTaxWorkTrans());
        projInvoiceLocalizationTmp.SalesBalanceEuro                     = projInvoiceJour.salesBalanceEuro();
        projInvoiceLocalizationTmp.EndDiscEuro                          = projInvoiceJour.endDiscEuro();
        projInvoiceLocalizationTmp.SumMarkupEuro                        = projInvoiceJour.sumMarkupEuro();
        projInvoiceLocalizationTmp.NetAmountEuro                        = projInvoiceJour.netAmountEuro();
        projInvoiceLocalizationTmp.SumTaxEuro                           = projInvoiceJour.sumTaxEuro();
        projInvoiceLocalizationTmp.InvoiceRoundOffEuro                  = projInvoiceJour.invoiceRoundOffEuro();
        projInvoiceLocalizationTmp.InvoiceAmountEuro                    = projInvoiceJour.invoiceAmountEuro();
        projInvoiceLocalizationTmp.CurrencyCodeEuro                     = Currency::findEuroCurrencyCode();
        projInvoiceLocalizationTmp.CashDiscTxt                          = projInvoiceJour.cashDiscTxtOnInvoice();
        projInvoiceLocalizationTmp.PrepaidAmount                        = projInvoiceJour.prepaidAmount();
        projInvoiceLocalizationTmp.RemainAmountToBePaid                 = projInvoiceJour.remainAmountToBePaid();

        // <GEEPL>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            projInvoiceLocalizationTmp.SalesBalanceAccountingCurrency   = projInvoiceJour.amountMST(projInvoiceJour.SalesOrderbalance);
            projInvoiceLocalizationTmp.SumTaxAccountingCurrency         = projInvoiceJour.amountMST(projInvoiceJour.SumTax);
            projInvoiceLocalizationTmp.InvoiceAmountAccountingCurrency  = projInvoiceJour.amountMST(projInvoiceJour.InvoiceAmount);
        }
        // </GEEPL>

        projInvoiceLocalizationTmp.PrepaidAmountEuro                    = projInvoiceJour.prepaidAmountEuro();
        projInvoiceLocalizationTmp.RemainAmountToBePaidEuro             = projInvoiceJour.remainAmountToBePaidEuro();

        projInvoiceLocalizationTmp.ExternalItemVisibility               = externalItemVisibility;
        projInvoiceLocalizationTmp.InventTransVisibility                = inventTransVisibility;
        projInvoiceLocalizationTmp.ProjectRevenueInvoiceTransVisibility = projectRevenueInvoiceTransVisibility;
        projInvoiceLocalizationTmp.SubRevenueInvoiceTransVisibility     = subRevenueInvoiceTransVisibility;
        projInvoiceLocalizationTmp.SubRevenueInvoiceTransTxtVisibility  = subRevenueInvoiceTransTxtVisibility;
        projInvoiceLocalizationTmp.DocuRefVisibility                    = docuRefVisibility;

        projInvoiceLocalizationTmp.PrintFooter                          = printFooter ? #True : #False;
        projInvoiceLocalizationTmp.PrintFooterEuro                      = printFooterEuro ? #True : #False;
        projInvoiceLocalizationTmp.PrintFooterPayment                   = printFooterPayment ? #True : #False;
        projInvoiceLocalizationTmp.PrintFooterPrepaid                   = printFooterPrepaid ? #True : #False;
        projInvoiceLocalizationTmp.PrintFooterPrepaidEuro               = printFooterPrepaidEuro ? #True : #False;
        projInvoiceLocalizationTmp.PrintFooterSepaNotification          = printFooterSepaNotification ? #True : #False;

        projInvoiceLocalizationTmp.PrePrintLevelShow                    = prePrintLevel;

        projInvoiceLocalizationTmp.TaxAmountMSTLabel                    = taxAmountMSTLabel;
        projInvoiceLocalizationTmp.TaxAmountLabel                       = taxAmountLabel;
        projInvoiceLocalizationTmp.TaxAmountMSTVisibility               = taxAmountMSTVisibility;

        projInvoiceLocalizationTmp.CostInvTransCorrectInvIdVisibility   = costInvTransCorrectInvIdVisibility;
        projInvoiceLocalizationTmp.CostInvTransCorrectReasonVisibility  = costInvTransCorrectReasonVisibility;
        projInvoiceLocalizationTmp.EmplInvTransCorrectInvIdVisibility   = emplInvTransCorrectInvIdVisibility;
        projInvoiceLocalizationTmp.EmplInvTransCorrectReasonVisibility  = emplInvTransCorrectReasonVisibility;
        projInvoiceLocalizationTmp.ItemInvTransCorrectInvIdVisibility   = itemInvTransCorrectInvIdVisibility;
        projInvoiceLocalizationTmp.ItemInvTransCorrectReasonVisibility  = itemInvTransCorrectReasonVisibility;
        projInvoiceLocalizationTmp.RevenueInvTransCorrectInvIdVisibility = revenueInvTransCorrectInvIdVisibility;
        projInvoiceLocalizationTmp.RevenueInvTransCorrectReasonVisibility = revenueInvTransCorrectReasonVisibility;
        projInvoiceLocalizationTmp.OnAccInvTransCorrectInvIdVisibility  = onAccInvTransCorrectInvIdVisibility;
        projInvoiceLocalizationTmp.OnAccInvTransCorrectReasonVisibility = onAccInvTransCorrectReasonVisibility;

        projInvoiceLocalizationTmp.MandateReference                     = custDirectDebitMandate.MandateReference;
        projInvoiceLocalizationTmp.ProjInvoiceJourDueDate               = projInvoiceJour.DueDate;
        projInvoiceLocalizationTmp.MandateSWIFTNo                       = custDirectDebitMandateBankAccount.SWIFTNo;

        unchecked (Uncheck::TableSecurityPermission)
        {
            projInvoiceLocalizationTmp.MandateBankIBAN                  = custDirectDebitMandateBankAccount.BankIBAN;
        }

        // <GEEHU><GEEPL>
        if (isFirstRecord && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU, #isoPL]))
        {
            projInvoiceLocalizationTmp.DocumentDate                     = projInvoiceJour.DocumentDate_W;
        }
        // </GEEPL></GEEHU>

        // <GEECZ>
        if (countryRegion_CZ)
        {
            if (correctedInvoiceId
                &&  correctedInvoiceId != projInvoiceJour.ProjInvoiceId)
            {
                projInvoiceLocalizationTmp.OriginalInvoiceId_CZ        = correctedInvoiceId;
            }
            else
            {
                projInvoiceLocalizationTmp.OriginalInvoiceId_CZ        = '';
            }
        }
        // </GEECZ>

        // <GEEHU>
        if (isFirstRecord && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            projInvoiceLocalizationTmp.TaxAmountBaseWLabel              = taxAmountBaseWLabel;
            projInvoiceLocalizationTmp.TaxAmountTotalWLabel             = taxAmountTotalWLabel;
            projInvoiceLocalizationTmp.TaxAmountBaseWVisibility         = taxAmountBaseWVisibility;
            projInvoiceLocalizationTmp.SalesTaxExchangeRate             = SalesTaxTransactionExchangeRate::findBySourceRecord(projInvoiceJour.TableId, projInvoiceJour.RecId).SalesTaxExchangeRate;
        }
        // </GEEHU>

        if (IntrastatCountryRegionParameters::isInEUByIsoCode())
        {
            this.clearTransportationDetails();

            if (isFirstRecord)
            {
                // Since only one temp table manages all the header and details, we should avoid inserting header information more than once.
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
                {
                    projInvoiceLocalizationTmp.InvoiceDateInWords = this.invoiceDateText();
                    projInvoiceLocalizationTmp.AmountInWords = RNumDateInWordConverter::construct(projInvoiceJour.LanguageId).numeralsToCurrency(
                        projInvoiceJour.InvoiceAmount - ProjInvoiceDP::calculateTotalExcludedTaxAmount(projInvoiceJour.LedgerVoucher),
                        projInvoiceJour.CurrencyId);
                }

                projInvoiceLocalizationTmp.TransportationDataSection = NoYes::Yes;
                transportationDocument = TransportationDocument::find(projInvoiceJour.TransportationDocument);

                if (transportationDocument)
                {
                    projInvoiceLocalizationTmp.DoPrintTransportationDocument    = transportationDocument.DoPrintTransportationDocument;
                    projInvoiceLocalizationTmp.TransportationContactPersonName  = transportationDocument.contactPersonName(projInvoiceJour);
                    projInvoiceLocalizationTmp.TransportationContactPersonTitle = transportationDocument.contactPersonTitle(projInvoiceJour);
                    projInvoiceLocalizationTmp.TransPortationIssuedByName       = transportationDocument.issuedByName();
                    projInvoiceLocalizationTmp.TransportationIssuedByTitle      = transportationDocument.issuedByTitle();

                    if (projInvoiceLocalizationTmp.DoPrintTransportationDocument)
                    {
                        // Identifies the record having the transporation data.

                        projInvoiceLocalizationTmp.DeliveryName     = projInvoiceJour.DeliveryName;
                        projInvoiceLocalizationTmp.DeliveryAddress  = projInvoiceJour.deliveryAddress();

                        // Set values from transportation document.

                        projInvoiceLocalizationTmp.TransportationCarrierAddress = transportationDocument.carrierAddress(buyer.Party);
                        projInvoiceLocalizationTmp.TransportationCarrierName    = transportationDocument.carrierName(buyer.Party);

                        projInvoiceLocalizationTmp.TransportationLoadedDateTime = transportationDocument.LoadedDateTime;
                        projInvoiceLocalizationTmp.TransportationLoadedAddress  = transportationDocument.displayLoadedPostalAddressing();
                        projInvoiceLocalizationTmp.TransportationLoadedName     = transportationDocument.LoadedAddressName;

                        projInvoiceLocalizationTmp.TransportationPackageDangerDegree    = transportationDocument.PackageDangerDegree;
                        projInvoiceLocalizationTmp.TransportationPackageDescription     = transportationDocument.PackageDescription;

                        // Set values from transportation vehicle.
                        transportationVehicle = TransportationVehicle::findByTransportationDocument(transportationDocument.RecId);

                        if (transportationVehicle)
                        {
                            projInvoiceLocalizationTmp.TransportationVehicleDescription     = transportationVehicle.modelDescription();
                            projInvoiceLocalizationTmp.TransportationVehicleDriverName      = transportationVehicle.DriverName;
                            projInvoiceLocalizationTmp.TransportationVehiclePlateNumber     = transportationVehicle.PlateNumber;
                            projInvoiceLocalizationTmp.TransportationVehicleTrailerNumber   = transportationVehicle.TrailerNumber;
                        }
                    }
                }
            }
        }

        // <GEEPL>
        if (isFirstRecord && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
        {
            RNumDateInWordConverter dateInWordConverter = RNumDateInWordConverter::construct(projInvoiceJour.LanguageId);
            projInvoiceLocalizationTmp.AmountInWords = dateInWordConverter.numeralsToTxt(projInvoiceJour.InvoiceAmount);

            projInvoiceLocalizationTmp.InvoiceAccountName = remitter.name();
            projInvoiceLocalizationTmp.InvoiceAccountAddress = remitter.address();
            projInvoiceLocalizationTmp.InvoiceAccountVATNum = remitter.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, projInvoiceJour.InvoiceDate);

            projInvoiceLocalizationTmp.ProposalId = projInvoiceJour.ProposalId;
        }
        // </GEEPL>

        // <GEECZ><GEEPL>
        if (isFirstRecord && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoPL]))
        {
            projInvoiceLocalizationTmp.SalesDate = projInvoiceJour.SalesDate_CZ;
        }
        // </GEEPL></GEECZ>

        // <GEECZ>
        if (isFirstRecord && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]))
        {
            // Use the bank account specified on the project contract to populate the bank fields on the invoice.
            projInvoiceLocalizationTmp.CompanyBankAccountName   = bankAccountTable.Name;
            projInvoiceLocalizationTmp.CompanyBankAccountNum    = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, AccountNum)) ?
                                                                    bankAccountTable.AccountNum : "@AccountsReceivable:FiveAsterisk";
            projInvoiceLocalizationTmp.CompanyBankAccountRegNum = bankAccountTable.RegistrationNum;
            projInvoiceLocalizationTmp.CompanyBankSpecificSymbol = bankAccountTable.SpecificSymbol;
            projInvoiceLocalizationTmp.IBAN = hasFieldAccess(tableNum(BankAccountTable), fieldNum(BankAccountTable, IBAN)) ?
                                                bankAccountTable.IBAN : "@AccountsReceivable:FiveAsterisk";
            projInvoiceLocalizationTmp.swiftNo = bankAccountTable.swiftNo;
            projInvoiceLocalizationTmp.ConstantSymbol = BankConstantSymbol::find(bankAccountTable.BankConstantSymbol).ConstantSymbol;

            projInvoiceLocalizationTmp.SalesResponsible = salesResponsible.name();
            projInvoiceLocalizationTmp.SalesResponsiblePhone = salesResponsible.phone();
            projInvoiceLocalizationTmp.SalesResponsibleEmail = salesResponsible.email();

            projInvoiceLocalizationTmp.VatDueDate_W = projInvoiceJour.vatDueDate_W();
        }
        // </GEECZ>

        if (isFirstRecord && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU, #isoCZ, #isoPL]))
        {
            projInvoiceLocalizationTmp.BuyerName = buyer.name();
            projInvoiceLocalizationTmp.BuyerAddress = buyer.address();
            projInvoiceLocalizationTmp.BuyerRegNum_W = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, projInvoiceJour.InvoiceDate);

            // <GEELT>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT]))
            {
                projInvoiceLocalizationTmp.BuyerEnterpriseCode = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::UID, projInvoiceJour.InvoiceDate);
            }
            // </GEELT>

            // <GEECZ><GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ, #isoPL]))
            {
                projInvoiceLocalizationTmp.BuyerVATNum = buyer.getPrimaryRegistrationNumber(TaxRegistrationTypesList::TAXID, projInvoiceJour.InvoiceDate);
            }
            // </GEEPL></GEECZ>

            isFirstRecord = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoProjInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the data into the temporary table.
    /// </summary>
    /// <param name="_cursor">
    /// The common object to hold table data.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp table record; optional.
    /// </param>
    protected void insertIntoProjInvoiceTmp(Common _cursor, char _lineSign = '')
    {
        if (this.mustCreateProjectInvoiceLine(_cursor, _lineSign))
        {
            this.populateProjInvoiceTmp(_cursor, _lineSign);

            projInvoiceTmp.insert();
        }

        // <GEEU>
        if (this.mustCreateProjectInvoiceLocalizationLine(_cursor, _lineSign))
        {
            this.insertIntoProjInvoiceLocalizationTmp(_cursor, _lineSign);
        }
        // </GEEU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateProjectInvoiceLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the project invoice line must be created.
    /// </summary>
    /// <param name="_cursor">
    /// The common object to hold table data.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp table record.
    /// </param>
    /// <returns>
    /// true if the project invoice line must be created; otherwise, false.
    /// </returns>
    protected boolean mustCreateProjectInvoiceLine(Common _cursor, char _lineSign = '')
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateProjectInvoiceLocalizationLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the project invoice localization line must be created.
    /// </summary>
    /// <param name="_cursor">
    /// The common object to hold table data.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp table record.
    /// </param>
    /// <returns>
    /// true if the project invoice localization line must be created; otherwise, false.
    /// </returns>
    protected boolean mustCreateProjectInvoiceLocalizationLine(Common _cursor, char _lineSign = '')
    {
        return SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU, #isoCZ, #isoPL]);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjInvoiceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates data in the temporary table.
    /// </summary>
    /// <param name="_cursor">
    /// The common object to hold table data.
    /// </param>
    /// <param name="_lineSign">
    /// A <c>char</c> that represents the sign that should be placed on the temp
    /// table record.
    /// </param>
    protected void populateProjInvoiceTmp(Common _cursor, char _lineSign)
    {
        ProjFundingSource projFundingSource=ProjFundingSource::find(ProjProposalJour::find(projInvoiceJour.ProposalId).FundingSource);

        if (vatNumVisibility == #True)
        {
            projInvoiceTmp.InvoiceName                          = TaxVATNumTable::find(projInvoiceJour.vatNum,projInvoiceJour.countryRegionId()).Name;
            projInvoiceTmp.InvoiceAccountAddress                = CustTable::find(projInvoiceJour.InvoiceAccount).invoiceAddress().Address;
        }
        else
        {
            projInvoiceTmp.InvoiceAccountAddress                = LogisticsPostalAddress::findByLocation(projFundingSource.InvoiceLocation).Address;
            projInvoiceTmp.InvoiceName                          = this.retCustTableBuf().name();
        }

        projInvoiceTmp.vatNum                               = projInvoiceJour.vatNum;
        projInvoiceTmp.InvoiceDate                          = projInvoiceJour.InvoiceDate;
        projInvoiceTmp.SalesOrdernum                        = projInvoiceJour.ProjInvoiceProjId;
        projInvoiceTmp.PaymentCondition                     = projInvoiceJour.paymentCondition();
        projInvoiceTmp.InvoiceAccount                       = projInvoiceJour.InvoiceAccount;
        projInvoiceTmp.CustAccountExt                       = projInvoiceJour.ourAccountNum();
        projInvoiceTmp.EnterpriseNumber                     = projInvoiceJour.EnterpriseNumber;
        projInvoiceTmp.ReferenceNumber_FI                   = CustParameters::find().CustInvoiceRefNum_FI ? projInvoiceJour.invoiceReferenceNumberFI() : Blank;
        projInvoiceTmp.InvoiceNum                           = projInvoiceJour.ProjInvoiceId;
        projInvoiceTmp.npiBankingPaymId                     = projInvoiceJour.PaymId;
        projInvoiceTmp.InvoiceReferenceNumberFI             = CustParameters::find().CustInvoiceRefNum_FI ? projInvoiceJour.invoiceReferenceNumberFI() : Blank;
        projInvoiceTmp.smaSpecIndexCalc                     = projInvoiceJour.smaSpecIndexCalc;
        projInvoiceTmp.TaxPrintTaxFreeBalance               = ProjFormletterParameters::find().TaxPrintTaxFreeBalance;
        projInvoiceTmp.CashAccountingRegime_ES              = CashAccountingRegime_ES::isEnabled(projInvoiceJour.InvoiceDate);

        if (CompanyInfo::find().PrintEnterpriseregister_NO)
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceNO00011, funcName());
            projInvoiceTmp.Enterpriseregister_NO = SysLabel::labelId2String(literalStr("@SYS4002065"),
                                                                            projInvoiceJour.LanguageId);
        }

        switch (_cursor.TableId)
        {
            case tableNum(ProjInvoiceItem):
                this.initFromProjInvoiceItem(_cursor);
                break;

            case tableNum(ProjInvoiceEmpl):
                this.initFromProjInvoiceEmpl(_cursor);
                break;

            case tableNum(ProjInvoiceCost):
                this.initFromProjInvoiceCost(_cursor);
                break;

            case tableNum(ProjInvoiceRevenue):
                this.initFromProjInvoiceRevenue(_cursor);
                break;

            case tableNum(ProjInvoiceOnAcc):
                this.initFromProjInvoiceOnAcc(_cursor);
                break;
        }

        projInvoiceTmp.Periods                              = strFmt("@SYS76785", date2str(projInvoiceRevenue.smaStartDate,123,2,3,2,3,2, DateFlags::FormatAll),
                                                                    date2str(projInvoiceRevenue.smaEnddate,123,2,3,2,3,2, DateFlags::FormatAll));
        projInvoiceTmp.ItemId                               = this.dispitemId();

        projInvoiceTmp.CorrectedInvoiceId                   = correctedInvoiceId;
        projInvoiceTmp.CorrectiveReason                     = correctiveReason;
        projInvoiceTmp.ExternalItemId                       = this.externalItemId();

        if (_cursor.TableId == tableNum(InventTrans))
        {
            projInvoiceTmp.PackingSlipInfoVisibility        = ProjFormletterParameters::find().PckSlpInfoOnInvoice;
            projInvoiceTmp.PackingSlipInfo                  = this.printPackingSlipInfo();
        }

        if (_cursor.TableId == tableNum(CustPaymSchedLine))
        {
            custPaymentSchedLine = _cursor;
            projInvoiceTmp.DueDate                          = custPaymentSchedLine.DueDate;
            projInvoiceTmp.DueAmount                        = custPaymentSchedLine.DueAmount;
            projInvoiceTmp.DiscDate                         = custPaymentSchedLine.DiscDate;
            projInvoiceTmp.DiscAmount                       = custPaymentSchedLine.DiscAmount;
        }
        else
        {
            projInvoiceTmp.DueDate                          = projInvoiceJour.DueDate;
        }

        projInvoiceTmp.PrepaidNetAmount                     = custTrans.prepaidNetAmount();
        projInvoiceTmp.PrepaidTaxAmount                     = custTrans.prepaidTaxAmount();
        projInvoiceTmp.SettleAmountCur                      = custTrans.SettleAmountCur;
        projInvoiceTmp.CurrencyCode                         = custTrans.CurrencyCode;

        projInvoiceTmp.MarkupCode_FI                        = (projInvoiceJour.isProforma()) ? tmpMarkupTrans.MarkupCode : markupTrans.MarkupCode;

        projInvoiceTmp.MarkupAmount_FI                      = (projInvoiceJour.isProforma()) ? tmpMarkupTrans.MarkupValue : markupTrans.Value;

        if (taxSpec)
        {
            projInvoiceTmp.SalesTaxCode_FI                  = taxSpec.taxCode();
            projInvoiceTmp.PrintCode                        = taxSpec.taxWriteCode();
            projInvoiceTmp.TaxCode                          = taxSpec.taxCode();
            projInvoiceTmp.Amount                           = -amount;
            projInvoiceTmp.CashDiscAmount                   = -cashDiscAmountTax;
            projInvoiceTmp.TaxBaseQty                       = -taxSpec.taxBaseQty();
            projInvoiceTmp.TaxAmount                        = -taxSpec.taxAmount();
            projInvoiceTmp.TaxAmountMST                     = -taxSpec.taxAmountMST();
            projInvoiceTmp.TaxExemptDescription             = taxSpec.taxExemptDescription();
            projInvoiceTmp.TaxBaseAmount                    = -taxSpec.taxBaseAmount();
        }

        if (formLetterRemarks)
        {
            projInvoiceTmp.FormLetterTxt                    = formLetterRemarks.Txt;
        }

        projInvoiceTmp.ShowCustTransOffset                  = showCustTransOffset;
        projInvoiceTmp.ShowInventTrans                      = showInventTrans;
        projInvoiceTmp.ShowMarkupTrans                      = showMarkupTrans;
        projInvoiceTmp.ShowFormLetters                      = showFormLetterRemarks;
        projInvoiceTmp.ShowCustPaymSched                    = showCustPaymSched;
        projInvoiceTmp.ShowTaxTrans                         = showTaxTrans;
        projInvoiceTmp.ShowProjInvoiceItem                  = showProjInvoiceItem;
        projInvoiceTmp.ShowProjInvoiceEmpl                  = showProjInvoiceEmpl;
        projInvoiceTmp.ShowProjInvoiceCost                  = showProjInvoiceCost;
        projInvoiceTmp.ShowProjInvoiceRevenue               = showProjInvoiceRevenue;
        projInvoiceTmp.ShowProjInvoiceOnAcc                 = showProjInvoiceOnAcc;

        projInvoiceTmp.SalesBalance                         = projInvoiceJour.SalesOrderbalance;
        projInvoiceTmp.EndDisc                              = projInvoiceJour.EndDisc;
        projInvoiceTmp.CashDisc                             = projInvoiceJour.CashDisc;
        projInvoiceTmp.TaxableBalance                       = projInvoiceJour.taxableBalanceMST(this.tmpTaxWorkTrans());
        projInvoiceTmp.SumMarkup                            = projInvoiceJour.SumMarkup;
        projInvoiceTmp.TaxFreeBalance                       = projInvoiceJour.taxFreeBalance(this.tmpTaxWorkTrans());
        projInvoiceTmp.SumTax                               = projInvoiceJour.SumTax;
        projInvoiceTmp.InvoiceRoundOff                      = projInvoiceJour.InvoiceRoundOff;
        projInvoiceTmp.InvoiceAmount                        = projInvoiceJour.InvoiceAmount;
        projInvoiceTmp.CurrencyCode                         = projInvoiceJour.CurrencyId;
        projInvoiceTmp.NetAmount                            = projInvoiceJour.netAmount();

        projInvoiceTmp.TaxableBalanceEuro                   = projInvoiceJour.taxableBalanceEuro(this.tmpTaxWorkTrans());
        projInvoiceTmp.TaxFreeBalanceEuro                   = projInvoiceJour.taxFreeBalanceEuro(this.tmpTaxWorkTrans());
        projInvoiceTmp.SalesBalanceEuro                     = projInvoiceJour.salesBalanceEuro();
        projInvoiceTmp.EndDiscEuro                          = projInvoiceJour.endDiscEuro();
        projInvoiceTmp.SumMarkupEuro                        = projInvoiceJour.sumMarkupEuro();
        projInvoiceTmp.NetAmountEuro                        = projInvoiceJour.netAmountEuro();
        projInvoiceTmp.SumTaxEuro                           = projInvoiceJour.sumTaxEuro();
        projInvoiceTmp.InvoiceRoundOffEuro                  = projInvoiceJour.invoiceRoundOffEuro();
        projInvoiceTmp.InvoiceAmountEuro                    = projInvoiceJour.invoiceAmountEuro();
        projInvoiceTmp.CurrencyCodeEuro                     = Currency::findEuroCurrencyCode();
        projInvoiceTmp.CashDiscTxt                          = projInvoiceJour.cashDiscTxtOnInvoice();
        projInvoiceTmp.PrepaidInvoiceAmount                 = projInvoiceJour.InvoiceAmount;
        projInvoiceTmp.PrepaidAmount                        = projInvoiceJour.prepaidAmount();
        projInvoiceTmp.RemainAmountToBePaid                 = projInvoiceJour.remainAmountToBePaid();
        projInvoiceTmp.PrepaidCurrencyCode                  = projInvoiceJour.CurrencyId;
        projInvoiceTmp.PrepaidInvoiceAmountEuro             = projInvoiceJour.invoiceAmountEuro();
        projInvoiceTmp.PrepaidAmountEuro                    = projInvoiceJour.prepaidAmountEuro();
        projInvoiceTmp.RemainAmountToBePaidEuro             = projInvoiceJour.remainAmountToBePaidEuro();

        projInvoiceTmp.PrepaidCurrencyCodeEuro              = Currency::findEuroCurrencyCode();

        projInvoiceTmp.ExternalItemVisibility               = externalItemVisibility;
        projInvoiceTmp.InventTransVisibility                = inventTransVisibility;
        projInvoiceTmp.ProjectRevenueInvoiceTransVisibility = projectRevenueInvoiceTransVisibility;
        projInvoiceTmp.SubRevenueInvoiceTransVisibility     = subRevenueInvoiceTransVisibility;
        projInvoiceTmp.SubRevenueInvoiceTransTxtVisibility  = subRevenueInvoiceTransTxtVisibility;
        projInvoiceTmp.DocuRefVisibility                    = docuRefVisibility;

        projInvoiceTmp.PrintFooter                          = printFooter ? #True : #False;
        projInvoiceTmp.PrintFooterEuro                      = printFooterEuro ? #True : #False;
        projInvoiceTmp.PrintFooterPayment                   = printFooterPayment ? #True : #False;
        projInvoiceTmp.PrintFooterPrepaid                   = printFooterPrepaid ? #True : #False;
        projInvoiceTmp.PrintFooterPrepaidEuro               = printFooterPrepaidEuro ? #True : #False;
        projInvoiceTmp.PrintFooterSepaNotification          = printFooterSepaNotification ? #True : #False;
        projInvoiceTmp.PrintGiro                            = printGiro ? #True : #False;

        projInvoiceTmp.GiroType                             = giroType;
        projInvoiceTmp.GiroSection                          = giroSection;

        projInvoiceTmp.ShowPrepaidTotals                    = showPrepaidTotals;
        projInvoiceTmp.ShowPrepaidTotalsEuro                = showPrepaidTotalsEuro;

        projInvoiceTmp.CompanyVATNumVisibility              = companyVATNumVisibility;
        projInvoiceTmp.vatNumVisibility                     = vatNumVisibility;
        projInvoiceTmp.ProjInvRefNum_FIVisibility           = projInvoiceReferenceNumber_FIVisibility;
        projInvoiceTmp.PrePrintLevelShow                    = prePrintLevel;

        projInvoiceTmp.CashDiscOnInvoice                    = cashDiscOnInvoice ? #True : #False;

        projInvoiceTmp.TaxAmountMSTLabel                    = taxAmountMSTLabel;
        projInvoiceTmp.TaxAmountLabel                       = taxAmountLabel;
        projInvoiceTmp.TaxAmountMSTVisibility               = taxAmountMSTVisibility;
        projInvoiceTmp.npiBankingPaymIdVisibility           = npiBankingPaymIdVisibility;

        projInvoiceTmp.CostInvTransCorrectInvIdVisibility
                                                            = costInvTransCorrectInvIdVisibility;
        projInvoiceTmp.CostInvTransCorrectReasonVisibility
                                                            = costInvTransCorrectReasonVisibility;
        projInvoiceTmp.EmplInvTransCorrectInvIdVisibility
                                                            = emplInvTransCorrectInvIdVisibility;
        projInvoiceTmp.EmplInvTransCorrectReasonVisibility
                                                            = emplInvTransCorrectReasonVisibility;
        projInvoiceTmp.ItemInvTransCorrectInvIdVisibility
                                                            = itemInvTransCorrectInvIdVisibility;
        projInvoiceTmp.ItemInvTransCorrectReasonVisibility
                                                            = itemInvTransCorrectReasonVisibility;
        projInvoiceTmp.RevenueInvTransCorrectInvIdVisibility
                                                            = revenueInvTransCorrectInvIdVisibility;
        projInvoiceTmp.RevenueInvTransCorrectReasonVisibility
                                                            = revenueInvTransCorrectReasonVisibility;
        projInvoiceTmp.OnAccInvTransCorrectInvIdVisibility
                                                            = onAccInvTransCorrectInvIdVisibility;
        projInvoiceTmp.OnAccInvTransCorrectReasonVisibility
                                                            = onAccInvTransCorrectReasonVisibility;

        // GIRO: Remove this block of code when GIRO no longer prints as a separate report
        if (GiroReportController::needGiroReport(projInvoiceTmp.GiroType))
        {
            GiroReportTmp::populate(this.parmUserConnection(), projInvoiceTmp);
            projInvoiceTmp.GiroType = PaymentStub::None;
            projInvoiceTmp.GiroSection = '';
        }

        projInvoiceTmp.MandateReference                     = custDirectDebitMandate.MandateReference;
        projInvoiceTmp.ProjInvoiceJourDueDate               = projInvoiceJour.DueDate;
        projInvoiceTmp.MandateBankIBAN                      = custDirectDebitMandateBankAccount.BankIBAN;
        projInvoiceTmp.MandateSWIFTNo                       = custDirectDebitMandateBankAccount.SWIFTNo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceEmpl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on an invoice employee line.
    /// </summary>
    /// <param name = "_projInvoiceEmpl">The invoice employee line used when initializing the project invoice line.</param>
    protected void initFromProjInvoiceEmpl(ProjInvoiceEmpl _projInvoiceEmpl)
    {
        projInvoiceTmp.Project      = _projInvoiceEmpl.ProjId;
        projInvoiceTmp.Category     = _projInvoiceEmpl.CategoryId;
        projInvoiceTmp.TransDate    = _projInvoiceEmpl.TransDate;
        projInvoiceTmp.Txt          = _projInvoiceEmpl.Txt;
        projInvoiceTmp.Qty          = _projInvoiceEmpl.Qty;
        projInvoiceTmp.SalesPrice   = _projInvoiceEmpl.salesPrice();
        projInvoiceTmp.LineAmount   = _projInvoiceEmpl.LineAmount;
        projInvoiceTmp.TaxWriteCode = _projInvoiceEmpl.TaxWriteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on an invoice item line.
    /// </summary>
    /// <param name = "_projInvoiceItem">The invoice item line used when initializing the project invoice line.</param>
    protected void initFromProjInvoiceItem(ProjInvoiceItem _projInvoiceItem)
    {
        projInvoiceTmp.Project      = _projInvoiceItem.ProjId;
        projInvoiceTmp.Txt          = _projInvoiceItem.Txt;
        projInvoiceTmp.Qty          = _projInvoiceItem.Qty;
        projInvoiceTmp.SalesPrice   = _projInvoiceItem.salesPrice();
        projInvoiceTmp.DiscPercent  = _projInvoiceItem.LinePercent;
        projInvoiceTmp.DiscAmount   = _projInvoiceItem.LineDisc;
        projInvoiceTmp.LineAmount   = _projInvoiceItem.LineAmount;
        projInvoiceTmp.TaxWriteCode = _projInvoiceItem.TaxWriteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceCost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on an invoice expense line.
    /// </summary>
    /// <param name = "_projInvoiceCost">The invoice expense line used when initializing the project invoice line.</param>
    protected void initFromProjInvoiceCost(ProjInvoiceCost _projInvoiceCost)
    {
        projInvoiceTmp.Project      = _projInvoiceCost.ProjId;
        projInvoiceTmp.Category     = _projInvoiceCost.CategoryId;
        projInvoiceTmp.Txt          = _projInvoiceCost.Txt;
        projInvoiceTmp.Qty          = _projInvoiceCost.Qty;
        projInvoiceTmp.SalesPrice   = _projInvoiceCost.salesPrice();
        projInvoiceTmp.LineAmount   = _projInvoiceCost.LineAmount;
        projInvoiceTmp.TaxWriteCode = _projInvoiceCost.TaxWriteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceRevenue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on an invoice fee line.
    /// </summary>
    /// <param name = "_projInvoiceRevenue">The invoice fee line used when initializing the project invoice line.</param>
    protected void initFromProjInvoiceRevenue(ProjInvoiceRevenue _projInvoiceRevenue)
    {
        projInvoiceTmp.Project              = _projInvoiceRevenue.ProjId;
        projInvoiceTmp.Category             = _projInvoiceRevenue.CategoryId;
        projInvoiceTmp.Txt                  = _projInvoiceRevenue.Txt;
        projInvoiceTmp.LineAmount           = _projInvoiceRevenue.LineAmount;
        projInvoiceTmp.TaxWriteCode         = _projInvoiceRevenue.TaxWriteCode;
        projInvoiceTmp.smaSubscriptionId    = _projInvoiceRevenue.smaSubscriptionId;
        projInvoiceTmp.smaBasePrice         = _projInvoiceRevenue.smaBasePrice;
        projInvoiceTmp.smaIndex             = _projInvoiceRevenue.smaIndex;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjInvoiceOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project invoice line based on an invoice on-account line.
    /// </summary>
    /// <param name = "_projInvoiceOnAcc">The invoice on-account line used when initializing the project invoice line.</param>
    protected void initFromProjInvoiceOnAcc(ProjInvoiceOnAcc _projInvoiceOnAcc)
    {
        projInvoiceTmp.Project      = _projInvoiceOnAcc.ProjId;
        projInvoiceTmp.Txt          = _projInvoiceOnAcc.Txt;
        projInvoiceTmp.LineAmount   = _projInvoiceOnAcc.Amount;
        projInvoiceTmp.TaxWriteCode = _projInvoiceOnAcc.TaxWriteCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxes_CZ</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts the project taxes information.
    /// </summary>
    /// <remarks>
    ///     This method is used for Czech Republic.
    /// </remarks>
    public void insertTaxes_CZ()
    {
        TmpTaxWorkTrans             tmpTaxWorkTransTotals;
        TmpTaxWorkTrans             tmpTaxWorkTransRecord;

        str                         totalStr;
        boolean                     isInvoiceCreditNote = projInvoiceJour.isCreditNote_CZ();

        TaxProformaSpec             taxProformaSpec;

        if (!isInvoiceCreditNote)
        {
            if (isProforma)
            {
                tmpTaxWorkTrans = this.tmpTaxWorkTrans();
            }
            else
            {
                while select taxTrans
                    where   taxTrans.Voucher    == projInvoiceJour.LedgerVoucher
                       &&   taxTrans.TransDate  == projInvoiceJour.InvoiceDate
                {
                    tmpTaxWorkTrans.clear();
                    tmpTaxWorkTrans.initFromTaxTrans(taxTrans);
                    tmpTaxWorkTrans.HeadingTableId  = projInvoiceJour.TableId;
                    tmpTaxWorkTrans.HeadingRecId    = projInvoiceJour.RecId;
                    tmpTaxWorkTrans.insert();
                }
            }
        }
        else
        {
            if (!isProforma)
            {
                select firstonly taxTrans
                    where   taxTrans.Voucher    == projInvoiceJour.LedgerVoucher
                       &&   taxTrans.TransDate  == projInvoiceJour.InvoiceDate;
            }

            if (isProforma || taxTrans)
            {
                this.createTmpTaxWorkTrans_CZ(tableNum(ProjInvoiceItem), tableNum(ProjInvoiceItemDetail));
                this.createTmpTaxWorkTrans_CZ(tableNum(ProjInvoiceEmpl), tableNum(ProjInvoiceEmplDetail));
                this.createTmpTaxWorkTrans_CZ(tableNum(ProjInvoiceCost), tableNum(ProjInvoiceCostDetail));
                this.createTmpTaxWorkTrans_CZ(tableNum(ProjInvoiceOnAcc), tableNum(ProjInvoiceOnAccDetail));
                this.createTmpTaxWorkTrans_CZ(tableNum(ProjInvoiceRevenue), tableNum(ProjInvoiceRevenueDetail));
            }
        }

        taxProformaSpec = new TaxProformaSpec(projInvoiceJour.RecId);
        taxProformaSpec.setTmpTaxWorkTrans(tmpTaxWorkTrans);
        taxProformaSpec.parmLanguageId(projInvoiceJour.LanguageId);
        while (taxProformaSpec.parmTaxSpec(false))
        {
            if (cashDiscOnInvoice)
            {
                if (projInvoiceJour.CashDiscPercent == 100)
                {
                    amount              = 0;
                    cashDiscAmountTax   = 0;
                }
                else
                {
                    amount              = taxProformaSpec.taxBaseAmount() / (100 - projInvoiceJour.CashDiscPercent) / 100;
                    cashDiscAmountTax   = amount * (projInvoiceJour.CashDiscPercent / 100);
                }
            }

            taxSpec             = taxProformaSpec;
            showTaxTrans        = #True;
            correctedInvoiceId  = taxProformaSpec.parmInvoiceId();
            this.insertIntoProjInvoiceTmp(taxTrans);
            showTaxTrans        = #False;
            correctedInvoiceId  = '';

            if (isInvoiceCreditNote)
            {
                select firstonly forupdate tmpTaxWorkTransTotals
                    where   tmpTaxWorkTransTotals.TaxCode               == taxProformaSpec.taxCode()
                       &&   tmpTaxWorkTransTotals.SourceCurrencyCode    == taxProformaSpec.currencyCode();

                if (!tmpTaxWorkTransTotals)
                {
                    tmpTaxWorkTransTotals.TaxCode               = taxProformaSpec.taxCode();
                    tmpTaxWorkTransTotals.HeadingTableId        = projInvoiceJour.TableId;
                    tmpTaxWorkTransTotals.HeadingRecId          = projInvoiceJour.RecId;
                    tmpTaxWorkTransTotals.SourceTableId         = tmpTaxWorkTransTotals.HeadingTableId;
                    tmpTaxWorkTransTotals.SourceRecId           = tmpTaxWorkTransTotals.HeadingRecId;
                    tmpTaxWorkTransTotals.SourceCurrencyCode    = taxProformaSpec.currencyCode();
                    tmpTaxWorkTransTotals.TransDate             = projInvoiceJour.InvoiceDate;
                }

                tmpTaxWorkTransTotals.SourceRegulateAmountCur   += taxProformaSpec.taxAmount();
                tmpTaxWorkTransTotals.TaxAmount                 += taxProformaSpec.taxAmountMST();
                tmpTaxWorkTransTotals.SourceBaseAmountCur       += taxProformaSpec.taxBaseAmount();
                tmpTaxWorkTransTotals.TaxBaseAmount             += taxProformaSpec.taxBaseAmountMST();
                tmpTaxWorkTransTotals.TaxBaseQty                += taxProformaSpec.taxBaseQty();
                tmpTaxWorkTransTotals.write();
            }
        }

        totalStr        = "@SYS14107";
        while select tmpTaxWorkTransTotals
        {
            if (!isInvoiceCreditNote)
            {
                tmpTaxWorkTransTotals.TaxCode       = strFmt("@SYS90673", tmpTaxWorkTransTotals.TaxCode);
            }

            // create new tmp buffer with one record - workaround grouping in TaxSpec class
            tmpTaxWorkTransRecord   = null;
            buf2Buf(tmpTaxWorkTransTotals, tmpTaxWorkTransRecord);
            tmpTaxWorkTransRecord.insert();

            taxProformaSpec = new TaxProformaSpec(projInvoiceJour.RecId);
            taxProformaSpec.setTmpTaxWorkTrans(tmpTaxWorkTransRecord);

            taxProformaSpec.parmLanguageId(projInvoiceJour.LanguageId);

            while (taxProformaSpec.parmTaxSpec(false))
            {
                if (cashDiscOnInvoice)
                {
                    if (projInvoiceJour.CashDiscPercent == 100)
                    {
                        amount              = 0;
                        cashDiscAmountTax   = 0;
                    }
                    else
                    {
                        amount              = taxProformaSpec.taxBaseAmount() / (100 - projInvoiceJour.CashDiscPercent) / 100;
                        cashDiscAmountTax   = amount * (projInvoiceJour.CashDiscPercent / 100);
                    }
                }

                taxSpec             = taxProformaSpec;
                showTaxTrans        = #True;
                correctedInvoiceId  = isInvoiceCreditNote ? totalStr : '';
                this.insertIntoProjInvoiceTmp(taxTrans);
                showTaxTrans        = #False;
                totalStr            = '';
                correctedInvoiceId  = '';
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDateText</Name>
				<Source><![CDATA[
    private FreeTxt invoiceDateText()
    {
        FreeText text = RNumDateInWordConverter::construct(projInvoiceJour.LanguageId).date2strMonth(projInvoiceJour.InvoiceDate);

        text = strFmt("@SYS53179", year(projInvoiceJour.InvoiceDate), text, dayOfMth(projInvoiceJour.InvoiceDate));

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPrintInvoiceLine</Name>
				<Source><![CDATA[
    private boolean isPrintInvoiceLine(ProjTrans projTrans)
    {
        boolean ret = true;

        // If printing an invoice and zero sales price item, need to check On Invoice line property.
        if ((projTrans.salesPrice() == 0) &&
           ((projTrans.linePropertyId()) &&
           (!ProjLineProperty::find(projTrans.linePropertyId()).OnInvoice)))
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupSpec</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the data from the <c>MarkuptTrans</c> table and displays the data on the report.
    /// </summary>
    private void markupSpec()
    {
        SalesTable          salesTable;
        SalesLine           salesLine;
        TaxGroupData        taxGroupData;
        TaxOnItem           taxOnItem;
        ProjProposalItem    projProposalItem;

        #define.EmptyString(Blank)

        if (projInvoiceJour.isProforma())
        {
            select SalesId, RecId, TableId from salesTable join projProposalItem where salesTable.SalesId == projProposalItem.SalesId &&
                projProposalItem.ProposalId == projInvoiceJour.ProposalId;

            while select TransRecId,TransTableId,LineNum,MarkupCode,Value,TaxGroup,TaxItemGroup from markupTrans where markupTrans.TransRecId == salesTable.RecId &&
                markupTrans.TransTableId == salesTable.TableId &&
               !markupTrans.IsDeleted
            {
                tmpMarkupTrans.TransTableId = markupTrans.TransTableId;
                tmpMarkupTrans.TransRecId   = markupTrans.TransRecId;
                tmpMarkupTrans.LineNum      = markupTrans.LineNum;
                tmpMarkupTrans.MarkupCode   = markupTrans.MarkupCode;
                tmpMarkupTrans.MarkupValue  = markupTrans.Value;
                tmpMarkupTrans.TaxGroup     = markupTrans.TaxGroup;
                tmpMarkupTrans.TaxItemGroup = markupTrans.TaxItemGroup;
                tmpMarkupTrans.SalesId      = projProposalItem.SalesId;
                if (!MarkupTmpTrans_FI::doesExist(markupTrans.TransTableId,markupTrans.TransRecId,markupTrans.LineNum))
                {
                    tmpMarkupTrans.insert();
                }
            }

            while select SalesId, RecId, TableId from salesLine where salesLine.SalesId == salesTable.SalesId
            {
                while select TransRecId,TransTableId,LineNum,MarkupCode,Value,TaxGroup,TaxItemGroup from markupTrans where markupTrans.TransRecId == salesLine.RecId &&
                    markupTrans.TransTableId == salesLine.TableId
                {
                    tmpMarkupTrans.TransTableId = markupTrans.TransTableId;
                    tmpMarkupTrans.TransRecId   = markupTrans.TransRecId;
                    tmpMarkupTrans.LineNum      = markupTrans.LineNum;
                    tmpMarkupTrans.MarkupCode   = markupTrans.MarkupCode;
                    tmpMarkupTrans.MarkupValue  = markupTrans.Value;
                    tmpMarkupTrans.TaxGroup     = markupTrans.TaxGroup;
                    tmpMarkupTrans.TaxItemGroup = markupTrans.TaxItemGroup;
                    tmpMarkupTrans.SalesId      = projProposalItem.SalesId;
                    if (!MarkupTmpTrans_FI::doesExist(markupTrans.TransTableId,markupTrans.TransRecId,markupTrans.LineNum))
                    {
                        tmpMarkupTrans.insert();
                    }
                }
            }

            while select SalesId, MarkupCode, TaxGroup, TaxItemGroup, sum(MarkupValue) from tmpMarkupTrans
                group by SalesId, MarkupCode, TaxGroup, TaxItemGroup
                where tmpMarkupTrans.SalesId == projProposalItem.SalesId
            {
                select firstonly taxGroupData where taxGroupData.TaxGroup == tmpMarkupTrans.TaxGroup
                    join TaxItemGroup, TaxCode from taxOnItem
                    where taxOnItem.TaxItemGroup == tmpMarkupTrans.TaxItemGroup &&
                    taxOnItem.TaxCode == taxGroupData.TaxCode;

                if (taxGroupData)
                {
                    taxCode = taxGroupData.TaxCode;
                }
                else
                {
                    taxCode = #EmptyString;
                }

                showMarkupTrans = #True;
                this.insertIntoProjInvoiceTmp(markupTrans);
                showMarkupTrans = #False;
            }
        }
        else
        {
            while select MarkupCode, Voucher, TaxGroup, TaxItemGroup, sum(Value) from markupTrans
            group by Voucher, MarkupCode, TaxGroup, TaxItemGroup
            where markupTrans.Voucher == projInvoiceJour.ProjInvoiceId
            {
                select firstonly taxTrans
                    where taxTrans.Voucher == markupTrans.Voucher &&
                          taxTrans.TaxGroup == markupTrans.TaxGroup &&
                          taxTrans.TaxItemGroup == markupTrans.TaxItemGroup;
                if (taxTrans)
                {
                    taxCode = taxTrans.TaxCode;
                }
                else
                {
                    taxCode = #EmptyString;
                }

                showMarkupTrans = #True;
                this.insertIntoProjInvoiceTmp(markupTrans);
                showMarkupTrans = #False;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();

        // <GEECZ>
        countryRegion_CZ        = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoCZ]);
        transOriginalInvoice_CZ = new Map(Types::Int64, Types::String);
        // </GEECZ>
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentHeader</Name>
				<Source><![CDATA[
    private void printDocumentHeader()
    {
        printDocuHeader = true;

        if ((ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::Head) ||
            (ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::All))

        {
            docuRefHeader = DocuRefSearch::newTypeIdAndRestriction(projInvoiceJour,
                                                                    ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                    DocuRestriction::External).docuRef();
            printDocuHeader = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printDocumentLine</Name>
				<Source><![CDATA[
    private void printDocumentLine(Common   buffer)
    {
        ProjInvoiceItem     projItem;
        ProjInvoiceCost     projCost;
        ProjInvoiceEmpl     projEmpl;
        ProjInvoiceRevenue  projRevenue;
        ProjInvoiceOnAcc    projOnAcc;

        if ((ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::Line) ||
            (ProjFormletterDocument::find().DocuOnInvoice == DocuOnFormular::All))
        {
            switch (buffer.TableId)
            {
                case tableNum(ProjInvoiceItem)  :
                    projItem    = buffer;
                    docuRef = DocuRefSearch::newTypeIdAndRestriction(projItem,
                                                                            ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                            DocuRestriction::External).docuRef();
                    break;

                case tableNum(ProjInvoiceCost)  :
                    projCost    = buffer;
                    docuRef = DocuRefSearch::newTypeIdAndRestriction(projCost,
                                                                            ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                            DocuRestriction::External).docuRef();
                    break;

                case tableNum(ProjInvoiceEmpl)  :
                    projEmpl    = buffer;
                    docuRef = DocuRefSearch::newTypeIdAndRestriction(projEmpl,
                                                                            ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                            DocuRestriction::External).docuRef();

                    break;

                case tableNum(ProjInvoiceRevenue)  :
                    projRevenue    = buffer;
                    docuRef = DocuRefSearch::newTypeIdAndRestriction(projRevenue,
                                                                            ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                            DocuRestriction::External).docuRef();

                    break;

                case tableNum(ProjInvoiceOnAcc)  :
                    projOnAcc      = buffer;
                    docuRef = DocuRefSearch::newTypeIdAndRestriction(projOnAcc,
                                                                            ProjFormletterDocument::find().DocuTypeOnInvoice,
                                                                            DocuRestriction::External).docuRef();

                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printEuroTotals</Name>
				<Source><![CDATA[
    private boolean printEuroTotals()
    {
        return (projFormletterParameters.PrintEuroAmount && Currency::findEuroCurrencyCode());
    }

]]></Source>
			</Method>
			<Method>
				<Name>printInventTrans</Name>
				<Source><![CDATA[
    private void printInventTrans()
    {
        InventTransOriginId inventTransOriginId;
        ProjItemTrans       localProjItemTrans;

        inventTransOriginId = InventTransOrigin::findByInventTransId(projInvoiceItem.InventTransId).RecId;

        if (projInvoiceItem.ProjTransId)
        {
            localProjItemTrans = ProjItemTrans::find(projInvoiceItem.ProjTransId);
        }

        if (localProjItemTrans)
        {
            while select inventTrans
                  where inventTrans.InventTransOrigin == inventTransOriginId &&
                    inventTrans.ProjAdjustRefId == localProjItemTrans.ProjAdjustRefId &&
                    inventTrans.PackingSlipId
            {
                showInventTrans = #True;
                this.insertIntoProjInvoiceTmp(inventTrans);
                showInventTrans = #False;
            }
        }
        else
        {
            while select inventTrans
                  where inventTrans.InventTransOrigin == inventTransOriginId &&
                    !inventTrans.ProjAdjustRefId &&
                    inventTrans.PackingSlipId
            {
                showInventTrans = #True;
                this.insertIntoProjInvoiceTmp(inventTrans);
                showInventTrans = #False;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPackingSlipInfo</Name>
				<Source><![CDATA[
    private str printPackingSlipInfo()
    {
        SalesShippingDate shippingDate;
        InventTransOrigin inventTransOrigin = inventTrans.inventTransOrigin();

        InventQty salesQty = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(inventTransOrigin.ItemId,
																								   inventTrans.InventDimId,
																								   inventTrans.Qty,
                                                                                                   inventTransOrigin.inventTable().inventUnitId(),
																								   projInvoiceItem.SalesUnit,
																								   NoYes::Yes);

        if (inventTrans.PackingSlipId)
        {
            shippingDate = (select custPackingSlipTrans
                    where inventTrans.PackingSlipId == custPackingSlipTrans.PackingSlipId).DeliveryDate;
        }
        else
        {
            shippingDate = projInvoiceItem.DlvDate;
        }

        return this.formatPackingSlipInfo(salesQty * -1, inventTrans.PackingSlipId, shippingDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPrepaidCustTrans</Name>
				<Source><![CDATA[
    private void printPrepaidCustTrans()
    {
        CompanyId offsetCompany;

        while select crossCompany RecId from custTrans
            where custTrans.AccountNum  == projInvoiceJour.InvoiceAccount   &&
                  custTrans.Invoice     == projInvoiceJour.ProjInvoiceId    &&
                  custTrans.TransDate   == projInvoiceJour.InvoiceDate
            join custSettlement
               where custSettlement.TransRecId == custTrans.RecId
        {
            offsetCompany = custSettlement.OffsetCompany ? custSettlement.OffsetCompany : curext();

            changecompany (offsetCompany)
            {
                // This is necessary to clear the DataAreaId in order to get
                // data from other companies.
                custTransOffset = null;

                select firstonly custTransOffset
                    where custTransOffset.RecId == custSettlement.OffsetRecid
                        && custTransOffset.Prepayment == NoYes::Yes;

                if (custTransOffset)
                {
                    showCustTransOffset = #True;
                    this.insertIntoProjInvoiceTmp(custTransOffset);
                    showCustTransOffset = #False;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printPrepaidCustTransProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills the preapyment lines for proforma invoice
    /// </summary>
    protected void printPrepaidCustTransProforma()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>printSepaNotification</Name>
				<Source><![CDATA[
    private boolean printSepaNotification()
    {
        if (projInvoiceJour.DirectDebitMandate)
        {
            select firstOnly custDirectDebitMandate
                    where custDirectDebitMandate.RecId == projInvoiceJour.DirectDebitMandate
                join custDirectDebitMandateBankAccount
                    where custDirectDebitMandateBankAccount.AccountID == custDirectDebitMandate.BankAccount &&
                            custDirectDebitMandateBankAccount.CustAccount == custDirectDebitMandate.CustAccount;

            if (custDirectDebitMandate && custDirectDebitMandateBankAccount)
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the data into the <c>ProjInvoiceTmp</c> temporary table.
    /// </summary>
    public void processReport()
    {
        projInvoiceContract = this.parmDataContract() as ProjInvoiceContract;

        // Set the userconnection to use on table.
        // This is required to ensure that createdTransactionId of inserted record is different than default transaction.
        projInvoiceTmp.setConnection(this.parmUserConnection());

        // <GEEU>
        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoLT, #isoHU, #isoCZ, #isoPL]))
        {
            projInvoiceLocalizationTmp.setConnection(this.parmUserConnection());
            isFirstRecord = true;
        }
        // </GEEU>

        this.init();

        this.initTempTableFromCompanyInfo();

        // init based on parameters.
        // if JournalList is present, use it, else create the journal list based on query and use that.
        if (projInvoiceContract.parmProjJourRecId())
        {
            // from the Recid list, get the actual table records
            select projInvoiceJour where projInvoiceJour.RecId == projInvoiceContract.parmProjJourRecId();
            this.fetch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retCustTableBuf</Name>
				<Source><![CDATA[
    private CustTable retCustTableBuf()
    {
        CustTable custTable;
        ProjFundingSource projFundingSource;

        projFundingSource=ProjFundingSource::find(ProjProposalJour::find(projInvoiceJour.ProposalId).FundingSource);

        if (projFundingSource.FundingType ==ProjFundingType::Customer)
        {
            custTable=CustTable::findByPartyRecId(projFundingSource.Party);
        }

        if (projFundingSource.FundingType ==ProjFundingType::Grant)
        {
            custTable=CustTable::find(projFundingSource.CustAccount);
        }
        return custTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOriginalInvoiceForTrans_CZ</Name>
				<Source><![CDATA[
    private void setOriginalInvoiceForTrans_CZ(RecId    _transRecId)
    {
        if (!countryRegion_CZ
            || !projInvoiceJour.isCreditNote_CZ())
        {
            return;
        }

        if (transOriginalInvoice_CZ.exists(_transRecId))
        {
            correctedInvoiceId  = transOriginalInvoice_CZ.lookup(_transRecId);
        }
        else
        {
            correctedInvoiceId  = Blank;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepaidAmountProforma</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the prepayment amounts.
    /// </summary>
    /// <returns>Prepayment amount of proforma invoice.</returns>
    protected AmountCur prepaidAmountProforma()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOriginalInvoiceReference</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the original invoice information for a project credit note.
    /// </summary>
    /// <remarks>
    /// Each original invoice found will be returned in the format: Invoice ID, Invoice date.
    /// </remarks>
    private void setOriginalInvoiceReference()
    {
        str         value;
        Set         originalInvoiceSet = new Set(Types::String);
        SetIterator setIterator;

        ProjInvoiceEmpl         creditNoteProjInvoiceEmpl;
        ProjInvoiceEmplDetail   creditNoteProjInvoiceEmplDetail;
        ProjInvoiceEmplDetail   originalProjInvoiceEmplDetail;
        ProjInvoiceEmpl         originalProjInvoiceEmpl;

        ProjInvoiceCost         creditNoteProjInvoiceCost;
        ProjInvoiceCostDetail   creditNoteProjInvoiceCostDetail;
        ProjInvoiceCostDetail   originalProjInvoiceCostDetail;
        ProjInvoiceCost         originalProjInvoiceCost;

        ProjInvoiceItem         creditNoteProjInvoiceItem;
        ProjInvoiceItemDetail   creditNoteProjInvoiceItemDetail;
        ProjInvoiceItemDetail   originalProjInvoiceItemDetail;
        ProjInvoiceItem         originalProjInvoiceItem;

        ProjInvoiceRevenue         creditNoteProjInvoiceRevenue;
        ProjInvoiceRevenueDetail   creditNoteProjInvoiceRevenueDetail;
        ProjInvoiceRevenueDetail   originalProjInvoiceRevenueDetail;
        ProjInvoiceRevenue         originalProjInvoiceRevenue;

        ProjInvoiceOnAcc         creditNoteProjInvoiceOnAcc;
        ProjInvoiceOnAccDetail   creditNoteProjInvoiceOnAccDetail;
        ProjInvoiceOnAccDetail   originalProjInvoiceOnAccDetail;
        ProjInvoiceOnAcc         originalProjInvoiceOnAcc;

        #define.Separator(", ")
        #define.InvoicePattern("\%1 \%2")

        while select ProjInvoiceId, InvoiceDate, RecId from originalProjInvoiceItem
            join RecId from creditNoteProjInvoiceItem
                where creditNoteProjInvoiceItem.RefReturnInvoiceTrans_W == originalProjInvoiceItem.RecId  &&
                      creditNoteProjInvoiceItem.ProjInvoiceId           == projInvoiceJour.ProjInvoiceId   &&
                      creditNoteProjInvoiceItem.InvoiceDate             == projInvoiceJour.InvoiceDate
        {
            // The RefReturnInvoiceTrans_W field will only be populated when there is a Sales Order
            // associated to the Project Invoice.

            // <GEEPL>
            if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoPL]))
            {
                projCreditInvoicingSalesLine = true;
            }
            // </GEEPL>

            value = strFmt(#InvoicePattern, originalProjInvoiceItem.ProjInvoiceId, originalProjInvoiceItem.InvoiceDate);
            originalInvoiceSet.add(value);
            // <GEECZ>
            transOriginalInvoice_CZ.insert(creditNoteProjInvoiceItem.RecId, originalProjInvoiceItem.ProjInvoiceId);
            // </GEECZ>
        }

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceItem
            join TableId from originalProjInvoiceItemDetail
                where originalProjInvoiceItemDetail.InvoiceRefRecId == originalProjInvoiceItem.RecId
            join TableId from creditNoteProjInvoiceItemDetail
                where creditNoteProjInvoiceItemDetail.RecId == originalProjInvoiceItemDetail.RefRecId
            join RecId from creditNoteProjInvoiceItem
                where creditNoteProjInvoiceItem.RecId == creditNoteProjInvoiceItemDetail.InvoiceRefRecId &&
                      creditNoteProjInvoiceItem.ProjInvoiceId == projInvoiceJour.ProjInvoiceId &&
                      creditNoteProjInvoiceItem.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            value = strFmt(#InvoicePattern, originalProjInvoiceItem.ProjInvoiceId, originalProjInvoiceItem.InvoiceDate);
            originalInvoiceSet.add(value);
            // <GEECZ>
            transOriginalInvoice_CZ.insert(creditNoteProjInvoiceItem.RecId, originalProjInvoiceItem.ProjInvoiceId);
            // </GEECZ>
        }

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceRevenue
            join TableId from originalProjInvoiceRevenueDetail
                where originalProjInvoiceRevenueDetail.InvoiceRefRecId == originalProjInvoiceRevenue.RecId
            join TableId from creditNoteProjInvoiceRevenueDetail
                where creditNoteProjInvoiceRevenueDetail.RecId == originalProjInvoiceRevenueDetail.RefRecId
            join RecId from creditNoteProjInvoiceRevenue
                where creditNoteProjInvoiceRevenue.RecId == creditNoteProjInvoiceRevenueDetail.InvoiceRefRecId &&
                      creditNoteProjInvoiceRevenue.ProjInvoiceId == projInvoiceJour.ProjInvoiceId &&
                      creditNoteProjInvoiceRevenue.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            value = strFmt(#InvoicePattern, originalProjInvoiceRevenue.ProjInvoiceId, originalProjInvoiceRevenue.InvoiceDate);
            originalInvoiceSet.add(value);
            // <GEECZ>
            transOriginalInvoice_CZ.insert(creditNoteProjInvoiceRevenue.RecId, originalProjInvoiceRevenue.ProjInvoiceId);
            // </GEECZ>
        }

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceCost
            join TableId from originalProjInvoiceCostDetail
                where originalProjInvoiceCostDetail.InvoiceRefRecId == originalProjInvoiceCost.RecId
            join TableId from creditNoteProjInvoiceCostDetail
                where creditNoteProjInvoiceCostDetail.RecId == originalProjInvoiceCostDetail.RefRecId
            join RecId from creditNoteProjInvoiceCost
                where creditNoteProjInvoiceCost.RecId == creditNoteProjInvoiceCostDetail.InvoiceRefRecId &&
                      creditNoteProjInvoiceCost.ProjInvoiceId == projInvoiceJour.ProjInvoiceId &&
                      creditNoteProjInvoiceCost.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            value = strFmt(#InvoicePattern, originalProjInvoiceCost.ProjInvoiceId, originalProjInvoiceCost.InvoiceDate);
            originalInvoiceSet.add(value);
            // <GEECZ>
            transOriginalInvoice_CZ.insert(creditNoteProjInvoiceCost.RecId, originalProjInvoiceCost.ProjInvoiceId);
            // </GEECZ>
        }

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceEmpl
            join TableId from originalProjInvoiceEmplDetail
                where originalProjInvoiceEmplDetail.InvoiceRefRecId == originalProjInvoiceEmpl.RecId
            join TableId from creditNoteProjInvoiceEmplDetail
                where creditNoteProjInvoiceEmplDetail.RecId == originalProjInvoiceEmplDetail.RefRecId
            join RecId from creditNoteProjInvoiceEmpl
                where creditNoteProjInvoiceEmpl.RecId == creditNoteProjInvoiceEmplDetail.InvoiceRefRecId &&
                      creditNoteProjInvoiceEmpl.ProjInvoiceId == projInvoiceJour.ProjInvoiceId &&
                      creditNoteProjInvoiceEmpl.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            value = strFmt(#InvoicePattern, originalProjInvoiceEmpl.ProjInvoiceId, originalProjInvoiceEmpl.InvoiceDate);
            originalInvoiceSet.add(value);
            // <GEECZ>
            transOriginalInvoice_CZ.insert(creditNoteProjInvoiceEmpl.RecId, originalProjInvoiceEmpl.ProjInvoiceId);
            // </GEECZ>
        }

        while select ProjInvoiceId, InvoiceDate from originalProjInvoiceOnAcc
            join TableId from originalProjInvoiceOnAccDetail
                where originalProjInvoiceOnAccDetail.InvoiceRefRecId == originalProjInvoiceOnAcc.RecId
            join TableId from creditNoteProjInvoiceOnAccDetail
                where creditNoteProjInvoiceOnAccDetail.RecId == originalProjInvoiceOnAccDetail.RefRecId
            join RecId from creditNoteProjInvoiceOnAcc
                where creditNoteProjInvoiceOnAcc.RecId == creditNoteProjInvoiceOnAccDetail.InvoiceRefRecId &&
                      creditNoteProjInvoiceOnAcc.ProjInvoiceId == projInvoiceJour.ProjInvoiceId &&
                      creditNoteProjInvoiceOnAcc.InvoiceDate   == projInvoiceJour.InvoiceDate
        {
            value = strFmt(#InvoicePattern, originalProjInvoiceOnAcc.ProjInvoiceId, originalProjInvoiceOnAcc.InvoiceDate);
            originalInvoiceSet.add(value);
            // <GEECZ>
            transOriginalInvoice_CZ.insert(creditNoteProjInvoiceOnAcc.RecId, originalProjInvoiceOnAcc.ProjInvoiceId);
            // </GEECZ>
        }

        setIterator = new SetIterator(originalInvoiceSet);

        while (setIterator.more())
        {
            // Generate the string to display based on the original invoices that were found.
            originalInvoiceReference += (originalInvoiceReference ? #Separator : "") + setIterator.value();
            setIterator.next();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tmpTaxWorkTrans</Name>
				<Source><![CDATA[
    private TmpTaxWorkTrans tmpTaxWorkTrans()
    {
        if (projInvoiceJour.isProforma() && formletterProformaPrint)
        {
            return formletterProformaPrint.tmpTaxWorkTrans(projInvoiceJour.RecId);
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateTotalExcludedTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of all <c>TaxTrans</c> records for the specified project invoice that
    /// have been excluded from the invoice.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The voucher number of the project invoice.
    /// </param>
    /// <returns>
    /// The total tax amount that has been excluded from the invoice.
    /// </returns>
    private static TaxRegulationAmountCur calculateTotalExcludedTaxAmount(Voucher _ledgerVoucher)
    {
        TaxTrans taxTrans;
        TaxTransExcludeFromInvoice taxTransExcludeFromInvoice;

        select sum(SourceRegulateAmountCur) from taxTrans
            where taxTrans.Voucher == _ledgerVoucher
            exists join taxTransExcludeFromInvoice
                where taxTransExcludeFromInvoice.TaxTrans == taxTrans.RecId;

        return -taxTrans.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExcludedTaxAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the sum of all TaxTrans records for the specified invoice line record that
    /// have been excluded from the invoice.
    /// </summary>
    /// <param name="_ledgerVoucher">
    /// The voucher number.
    /// </param>
    /// <param name="_invoiceLine">
    /// The invoice line record.
    /// </param>
    /// <returns>
    /// The total tax amount that was excluded from the invoice.
    /// </returns>
    private static TaxRegulationAmountCur getExcludedTaxAmount(Voucher _ledgerVoucher, Common _invoiceLine)
    {
        TaxTrans taxTrans;
        TaxTransExcludeFromInvoice taxTransExcludeFromInvoice;

        // Find the sum of all TaxTrans records for the passed in invoice line record that have been excluded.
        select sum(SourceRegulateAmountCur) from taxTrans
            where taxTrans.Voucher       == _ledgerVoucher &&
                  taxTrans.SourceTableId == _invoiceLine.TableId &&
                  taxTrans.SourceRecId   == _invoiceLine.RecId
            exists join taxTransExcludeFromInvoice
                where taxTransExcludeFromInvoice.TaxTrans == taxTrans.RecId;

        return -taxTrans.SourceRegulateAmountCur;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>