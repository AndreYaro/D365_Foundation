<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FactureDelete_VendPrepayment_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class FactureDelete_VendPrepayment_RU extends FactureDelete_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>bookName</Name>
				<Source><![CDATA[
        // will be deleted
    protected void bookName()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
        protected void check()
    {
        super();

        this.checkPurchBook();
        this.checkSalesBook();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPurchBook</Name>
				<Source><![CDATA[
        protected void checkPurchBook()
    {
        PurchBookVATProcessLogTrans_RU     logTrans;
        PurchBookVATProcessLogTransOper_RU logTransOper;

        select firstonly bookTable
            where bookTable.ClosingDate
        join bookTrans
            where bookTrans.SalesPurchBookTable_RU == bookTable.RecId &&
                  bookTrans.FactureId              == jour.FactureId  &&
                  bookTrans.TransType              == SalesPurchBookTransType_RU::Prepayment;

        if (bookTable)
        {
            this.addError(this.errorClosedBook(bookTable.BookId));
        }

        select firstonly logTrans
            where logTrans.FactureId    == jour.FactureId                        &&
                  logTrans.TransType    == SalesPurchBookTransType_RU::Prepayment
        exists join logTransOper
            where logTransOper.RefRecId         == logTrans.RecId  &&
                  logTransOper.Blocked          == NoYes::No       &&
                  logTransOper.CanceledRefRecId == 0;

        if (logTrans)
        {
            this.addError("@GLS104932");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkSalesBook</Name>
				<Source><![CDATA[
        protected void checkSalesBook()
    {
        SalesBookTable_RU  salesBookTable;
        SalesBookTrans_RU  salesBookTrans;
        SalesBookVATProcessLogTrans_RU      logTrans;
        SalesBookVATProcessLogTransOper_RU  logTransOper;

        select firstonly salesBookTable
            where salesBookTable.ClosingDate
        join TableId from salesBookTrans
            where salesBookTrans.SalesBookTable_RU == salesBookTable.RecId &&
                  salesBookTrans.FactureId         == jour.FactureId       &&
                  salesBookTrans.TransType         == SalesPurchBookTransType_RU::PrepaymentStorno;

        if (salesBookTable)
        {
            this.addError(this.errorClosedBook(salesBookTable.BookId));
        }

        select firstonly logTrans
            where logTrans.FactureId    == jour.FactureId                        &&
                  logTrans.TransType    == SalesPurchBookTransType_RU::PrepaymentStorno
        exists join logTransOper
            where logTransOper.RefRecId         == logTrans.RecId  &&
                  logTransOper.Blocked          == NoYes::No       &&
                  logTransOper.CanceledRefRecId == 0;

        if (logTrans)
        {
            this.addError("@GLS104932");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
        protected void delete()
    {
        PurchBookVATProcessLogTrans_RU      logTrans;
        PurchBookVATProcessLogTransOper_RU  logTransOper;
        SalesBookVATProcessLogTrans_RU      salesLogTrans;
        SalesBookVATProcessLogTransOper_RU  salesLogTransOper;

        super();

        while select forupdate logTrans
            where logTrans.FactureId  == jour.FactureId                         &&
                  logTrans.TransType  == SalesPurchBookTransType_RU::Prepayment
        {
            delete_from logTransOper
                where logTransOper.RefRecId         == logTrans.RecId &&
                      logTransOper.CanceledRefRecId != 0;
            logTrans.doDelete();
        }

        while select forupdate salesLogTrans
            where salesLogTrans.FactureId  == jour.FactureId                    &&
                  salesLogTrans.TransType  == SalesPurchBookTransType_RU::PrepaymentStorno
        {
            delete_from salesLogTransOper
                where salesLogTransOper.RefRecId         == logTrans.RecId &&
                      salesLogTransOper.CanceledRefRecId != 0;
            salesLogTrans.doDelete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteBookTrans</Name>
				<Source><![CDATA[
        protected void deleteBookTrans()
    {
        this.deletePurchBookTrans();
        this.deleteSalesBookTrans();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deletePurchBookTrans</Name>
				<Source><![CDATA[
        protected void deletePurchBookTrans()
    {
         delete_from bookTrans
            where bookTrans.FactureId == jour.FactureId &&
                  bookTrans.TransType == SalesPurchBookTransType_RU::Prepayment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteSalesBookTrans</Name>
				<Source><![CDATA[
        protected void deleteSalesBookTrans()
    {
         SalesBookTrans_RU salesBookTrans;

         delete_from salesBookTrans
            where salesBookTrans.FactureId == jour.FactureId &&
                  salesBookTrans.TransType == SalesPurchBookTransType_RU::PrepaymentStorno;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorClosedBook</Name>
				<Source><![CDATA[
        protected str errorClosedBook(SalesPurchBookId_RU _bookId)
    {
        return strfmt("@GLS104929", _bookId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceJour</Name>
				<Source><![CDATA[
        protected CustVendInvoiceJour getInvoiceJour(CustVendInvoiceTrans _trans)
    {
        container dummy()
        {
            return [ _trans ];
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getInvoiceTrans</Name>
				<Source><![CDATA[
        protected CustVendInvoiceTrans getInvoiceTrans(FactureTrans_RU _trans)
    {
        container dummy()
        {
            return [ _trans ];
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>jourTableId</Name>
				<Source><![CDATA[
        protected tableId jourTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(FactureJour_RU _jour)
    {
        super(_jour);

        bookTable = new DictTable(tablenum(PurchBookTable_RU)).makeRecord();
        bookTrans = new DictTable(tablenum(PurchBookTrans_RU)).makeRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
        protected tableId transTableId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateExtra</Name>
				<Source><![CDATA[
        protected void updateExtra(FactureTrans_RU _trans)
    {
        VendTrans_W vendTrans_W;

        super(_trans);

        update_recordset vendTrans_W setting PrepaymentFactureId_W = ""
            where vendTrans_W.PrepaymentFactureId_W == _trans.FactureId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMarkup</Name>
				<Source><![CDATA[
        protected void updateMarkup(FactureTrans_RU _trans)
    {
        container dummy()
        {
            return [ _trans.RecId ];
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>