<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayAverageEarnEngine_BusinessTrip</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class rPayAverageEarnEngine_BusinessTrip extends RPayAverageEarnEngine
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateNow</Name>
				<Source><![CDATA[
    public void calculateNow()
    {
        ;
        if (rPayAverageEarnEmplPeriodTable.PrevBusinessTripStartDate)
        {
            this.updateAverageEarnTrans_Previous();
        }
        else
        {
            super();
        }

        this.updateAverageEarnValue();
        formController.refreshDatasources();
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    public boolean check()
    {
        boolean ret;
        ;
        ret  = super();

        if (! rPayAverageEarnEmplPeriodTable.StartDate)
        {
            ret = checkFailed("@RUP2614");
        }

        if (ret && rPayAverageEarnEmplPeriodTable.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTripBreaking)
        {
            if (! rPayAverageEarnEmplPeriodTable.PrevBusinessTripStartDate)
            {
                ret = checkFailed("@RUP2615");
            }
        }

        if (ret && rPayAverageEarnEmplPeriodTable.PrevBusinessTripStartDate)
        {
            if (rPayAverageEarnEmplPeriodTable.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTrip &&
                rPayAverageEarnEmplPeriodTable.previousBusinessTrip().EndDate > rPayAverageEarnEmplPeriodTable.StartDate)
            {
                ret = checkFailed("@RUP2616");
            }

            if (rPayAverageEarnEmplPeriodTable.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTripBreaking)
            {
                if (rPayAverageEarnEmplPeriodTable.previousBusinessTrip().EndDate   < rPayAverageEarnEmplPeriodTable.EndDate ||
                    rPayAverageEarnEmplPeriodTable.previousBusinessTrip().StartDate > rPayAverageEarnEmplPeriodTable.StartDate)
                {
                    ret = checkFailed("@RUP2617");
                }
            }
        }

        if (ret)
        {
            if (rPayAverageEarnEmplPeriodTable.EndDate)
            {
                ret = this.checkEndDate();
            }
            else
            {
                ret = checkFailed("@RUP2618");
            }
        }

        if (ret && !rPayAverageEarnEmplPeriodTable.BusinessTripTypeId)
        {
            ret = checkFailed("@RUP2619");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEndDate</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean checkEndDate()
    {
        RPayAverageEarnEmplPeriodTable rPayAverageEarnEmplPeriodLocal;
        TransLink_RU                   transLink;

        if (rPayAverageEarnEmplPeriodTable.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTrip)
        {
            while select rPayAverageEarnEmplPeriodLocal
                where rPayAverageEarnEmplPeriodLocal.EmplId                 == emplTable.EmployeeId                               &&
                      rPayAverageEarnEmplPeriodLocal.AverageEarnCodeType    == rPayAverageEarnEmplPeriodTable.AverageEarnCodeType &&
                      rPayAverageEarnEmplPeriodLocal.RecId                  != rPayAverageEarnEmplPeriodTable.RecId               &&
                      rPayAverageEarnEmplPeriodLocal.StartDate              <= rPayAverageEarnEmplPeriodTable.EndDate             &&
                      rPayAverageEarnEmplPeriodLocal.EndDate                >= rPayAverageEarnEmplPeriodTable.StartDate           &&
                      rPayAverageEarnEmplPeriodLocal.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTrip
                #transLinkNotExistsReversed_RU(transLink, rPayAverageEarnEmplPeriodLocal)
            {
                if (rPayAverageEarnEmplPeriodLocal)
                {
                    return checkFailed("@RUP2620");
                }
            }
        }

        if (rPayAverageEarnEmplPeriodTable.BusinessTripRecordType == RPayBusinessTripRecordType::BusinessTripBreaking)
        {
            select firstonly rPayAverageEarnEmplPeriodLocal
                where rPayAverageEarnEmplPeriodLocal.EmplId                    == emplTable.EmployeeId                                     &&
                      rPayAverageEarnEmplPeriodLocal.AverageEarnCodeType       == rPayAverageEarnEmplPeriodTable.AverageEarnCodeType       &&
                      rPayAverageEarnEmplPeriodLocal.RecId                     != rPayAverageEarnEmplPeriodTable.RecId                     &&
                      rPayAverageEarnEmplPeriodLocal.PrevBusinessTripStartDate == rPayAverageEarnEmplPeriodTable.PrevBusinessTripStartDate &&
                      rPayAverageEarnEmplPeriodLocal.BusinessTripRecordType    == RPayBusinessTripRecordType::BusinessTripBreaking         &&
                      rPayAverageEarnEmplPeriodLocal.StartDate                 <= rPayAverageEarnEmplPeriodTable.EndDate                   &&
                      rPayAverageEarnEmplPeriodLocal.EndDate                   >= rPayAverageEarnEmplPeriodTable.StartDate
                #transLinkNotExistsReversed_RU(transLink, rPayAverageEarnEmplPeriodLocal);

            if (rPayAverageEarnEmplPeriodLocal)
            {
                return checkFailed("@RUP2621");
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAverageEarnTransDialog</Name>
				<Source><![CDATA[
    public void createAverageEarnTransDialog()
    {
        super();

        if (formController.isRPayAverageEarnValueDsExists())
        {
            this.updateAverageEarnValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBusinessTripIntervals</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getBusinessTripIntervals()
    {
        RPayAverageEarnEmplPeriodTable payAverageEarnEmplPeriodTable;
        TransLink_RU                   transLink;
        container                      intervals;
        int                            i;
        StartDate                      startDateLocal, startDateBreaking;
        EndDate                        endDateLocal, endDateBreaking;

        startDateLocal = rPayAverageEarnEmplPeriodTable.StartDate;

        while select StartDate, EndDate from payAverageEarnEmplPeriodTable order by StartDate
            where payAverageEarnEmplPeriodTable.EmplId                    == rPayAverageEarnEmplPeriodTable.EmplId              &&
                  payAverageEarnEmplPeriodTable.PrevBusinessTripStartDate == rPayAverageEarnEmplPeriodTable.StartDate           &&
                  payAverageEarnEmplPeriodTable.AverageEarnCodeType       == rPayAverageEarnEmplPeriodTable.AverageEarnCodeType &&
                  payAverageEarnEmplPeriodTable.BusinessTripRecordType    == RPayBusinessTripRecordType::BusinessTripBreaking
            #transLinkNotExistsReversed_RU(transLink, payAverageEarnEmplPeriodTable)
        {
            if (payAverageEarnEmplPeriodTable.StartDate - 1 > endDateBreaking)
            {
                startDateBreaking = payAverageEarnEmplPeriodTable.StartDate;
                if (startDateLocal < startDateBreaking)
                {
                    i++;
                    endDateLocal = payAverageEarnEmplPeriodTable.StartDate - 1;
                    intervals = conPoke(intervals, i, [startDateLocal, endDateLocal]);
                }
            }
            endDateBreaking = payAverageEarnEmplPeriodTable.EndDate;
            startDateLocal  = payAverageEarnEmplPeriodTable.EndDate + 1;
        }

        endDateLocal = rPayAverageEarnEmplPeriodTable.EndDate;

        if (endDateLocal >= startDateLocal)
        {
            i++;
            intervals = conPoke(intervals, i, [startDateLocal, endDateLocal]);
        }

        return intervals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromPreviousBusinessTrip</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromPreviousBusinessTrip()
    {
        RPayAverageEarnEmplPeriodTable  payAverageEarnEmplPeriodTable;
        RPayBusinessTripRecordType      businessTripRecordType;
        ;
        payAverageEarnEmplPeriodTable = rPayAverageEarnEmplPeriodTable.previousBusinessTrip();
        businessTripRecordType        = rPayAverageEarnEmplPeriodTable.BusinessTripRecordType;

        if (payAverageEarnEmplPeriodTable)
        {
            buf2Buf(payAverageEarnEmplPeriodTable, rPayAverageEarnEmplPeriodTable);
            rPayAverageEarnEmplPeriodTable.PrevBusinessTripStartDate = payAverageEarnEmplPeriodTable.StartDate;
            rPayAverageEarnEmplPeriodTable.BusinessTripRecordType    = businessTripRecordType;

            if (businessTripRecordType == RPayBusinessTripRecordType::BusinessTrip)
            {
                rPayAverageEarnEmplPeriodTable.StartDate = payAverageEarnEmplPeriodTable.EndDate + 1;
            }

            rPayAverageEarnEmplPeriodTable.EndDate   = dateNull();
            rPayAverageEarnEmplPeriodTable.Included  = NoYes::No;
            rPayAverageEarnEmplPeriodTable.DayNumber = 0;
            rPayAverageEarnEmplPeriodTable.PayPeriod = dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCalendarId</Name>
				<Source><![CDATA[
    protected void setCalendarId()
    {
        RPayCalendarId  calendarId;

        super();

        if (rPayAverageEarnEmplPeriodTable.rPayWeekDuration == RPayWeekDuration::FiveDays)
        {
            calendarId = RHRMEmplTable::find(rPayAverageEarnEmplPeriodTable.EmplId).PayCalendarId;
            if (calendarId)
                rPayCalendarId = calendarId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAverageEarnTrans_Previous</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateAverageEarnTrans_Previous()
    {
        RPayAverageEarnTrans           rPayAverageEarnTrans;
        RecordInsertList               averageEarnTransList = new RecordInsertList(tableNum(RPayAverageEarnTrans));
        RPayAverageEarnEmplPeriodTable previousAverageEarnEmplPeriodTable = rPayAverageEarnEmplPeriodTable.previousBusinessTrip();
        ;
        if (! this.check())
        {
            return;
        }

        ttsbegin;

        delete_from rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == rPayAverageEarnEmplPeriodTable.RecId;

        while select rPayAverageEarnTrans
            where rPayAverageEarnTrans.AverageEarnEmplPeriodRecId == previousAverageEarnEmplPeriodTable.RecId
        {
            rPayAverageEarnTrans.AverageEarnEmplPeriodRecId = rPayAverageEarnEmplPeriodTable.RecId;
            averageEarnTransList.add(rPayAverageEarnTrans);
        }

        averageEarnTransList.insertDatabase();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBusinessTripValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void updateBusinessTripValue()
    {
        RPayAverageEarnValue rPayAverageEarnValue;
        //TOOD need another way to check form
        if (formController.isRPayAverageEarnValueDsExists())
        {
            rPayAverageEarnValue = formController.getRPayAverageEarnValueCursor();
            rPayAverageEarnValue.AverageRate = this.calcAverageAmount(rPayAverageEarnValue.PayAverageSourceType);
            rPayAverageEarnValue.Amount      = CurrencyExchangeHelper::amount(rPayAverageEarnValue.AverageRate * rPayAverageEarnValue.PayDayHour);
            formController.researchRPayAverageEarValue();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDayNumber</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean updateDayNumber()
    {
        Days    dayNumber, calendarDayNumber;
        ;
        if (rPayAverageEarnEmplPeriodTable.EndDate)
        {
            if (! rPayCalendarId)
                return checkFailed(strFmt("@GLS106104", rPayAverageEarnEmplPeriodTable.rPayWeekDuration));

            [dayNumber, calendarDayNumber]  = RPayAverageEarnEngine_BusinessTrip::numDaysBetweenDates(rPayCalendarId, rPayAverageEarnEmplPeriodTable.StartDate, rPayAverageEarnEmplPeriodTable.EndDate);
            if (calendarDayNumber == (rPayAverageEarnEmplPeriodTable.EndDate - rPayAverageEarnEmplPeriodTable.StartDate + 1))
                rPayAverageEarnEmplPeriodTable.DayNumber = dayNumber;
            else
                return checkFailed(strFmt("@RUP2622", rPayCalendarId));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>numDaysBetweenDates</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static container numDaysBetweenDates(RPayCalendarId _rPayCalendarId, StartDate _startDate, EndDate _endDate)
    {
        RPayCalendarDate  rPayCalendarDate;
        int               workDays, days;
        ;
        select count(RecId) from rPayCalendarDate index hint CalendarDateIdx
            where rPayCalendarDate.CalendarId == _rPayCalendarId      &&
                  rPayCalendarDate.PayDayType == RPayDayType::WorkDay &&
                  rPayCalendarDate.TransDate  >= _startDate           &&
                  rPayCalendarDate.TransDate  <= _endDate;
        workDays = any2int(rPayCalendarDate.RecId);

        select count(RecId) from rPayCalendarDate index hint CalendarDateIdx
            where rPayCalendarDate.CalendarId == _rPayCalendarId      &&
                  rPayCalendarDate.TransDate  >= _startDate           &&
                  rPayCalendarDate.TransDate  <= _endDate;
        days = any2int(rPayCalendarDate.RecId);

        return [workDays, days];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
