<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rDeferralsTableInterval</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class rDeferralsTableInterval
{
    StartDate               startDeferralsDate;
    EndDate                 endDeferralsDate;
    RDeferralsProfile       deferralsProfile;

    private const int Yearly = 12;
    private const int Quarterly = 3;
    private const int HalfYearly = 6;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmStartDeferralsDate</Name>
				<Source><![CDATA[
    public StartDate parmStartDeferralsDate(StartDate _startDeferralsDate = startDeferralsDate)
    {
        startDeferralsDate = _startDeferralsDate;
        return startDeferralsDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEndDeferralsDate</Name>
				<Source><![CDATA[
    public EndDate parmEndDeferralsDate(EndDate _endDeferralsDate = endDeferralsDate)
    {
        endDeferralsDate = _endDeferralsDate;
        return endDeferralsDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDeferralsProfile</Name>
				<Source><![CDATA[
    public RDeferralsProfile parmDeferralsProfile(RDeferralsProfile _deferralsProfile = deferralsProfile)
    {
        deferralsProfile = _deferralsProfile;
        return deferralsProfile;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEndDate</Name>
				<Source><![CDATA[
        public RDeferralsTransDate getEndDate(RDeferralsTransDate _transDate)
    {
        EndDate endDate =  endmth(mkDate(dayOfMth(_transDate),
                                         real2int(((mthOfYr(_transDate) div this.periodMultiplier()) +
                                         (mthOfYr(_transDate) mod this.periodMultiplier() ? 1 : 0)) *
                                          this.periodMultiplier()),
                                         year(_transDate)));

        return endDate >= endDeferralsDate ? endDeferralsDate : endDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getStartDate</Name>
				<Source><![CDATA[
        public RDeferralsTransDate getStartDate(RDeferralsTransDate _transDate)
    {
        StartDate startDate = mkDate(1,
                                     real2int(((mthOfYr(_transDate) - 1) div this.periodMultiplier()) *
                                      this.periodMultiplier() + 1),
                                     year(_transDate));

        return startDate <= startDeferralsDate ? startDeferralsDate : startDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>interval</Name>
				<Source><![CDATA[
        public RDeferralsLifeTime interval(RDeferralsTransDate  _defStart,
                                       RDeferralsTransDate  _runDate)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLastInterval</Name>
				<Source><![CDATA[
        public boolean isLastInterval(StartDate _startIntervalDate)
    {
        return this.getEndDate(_startIntervalDate) >= endDeferralsDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(RDeferralsProfile _deferralsProfile,
                    StartDate         _startDeferralsDate,
                    EndDate           _endDeferralsDate)
    {
        deferralsProfile    = _deferralsProfile;
        startDeferralsDate  = _startDeferralsDate;
        endDeferralsDate    = _endDeferralsDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>periodMultiplier</Name>
				<Source><![CDATA[
    public int periodMultiplier()
    {
        switch (deferralsProfile.DeferralsInterval)
        {
            case RDeferralsInterval::Monthly:
                return 1;

            case RDeferralsInterval::Quarterly:
                return Quarterly;

            case RDeferralsInterval::HalfYearly:
                return HalfYearly;

            case RDeferralsInterval::Yearly:
                return Yearly;
        }

        throw error("@GLS106494");
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalInterval</Name>
				<Source><![CDATA[
        public RDeferralsPeriod totalInterval()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static RDeferralsTableInterval construct(RDeferralsProfile _deferralsProfile,
                                                    StartDate         _startPeriodDate,
                                                    EndDate           _endPeriodDate)
    {
        RDeferralsTableInterval rDeferralsTableInterval;

        if (_deferralsProfile.DeferralsMethod == RDeferralsMethod::Manual)
        {
            rDeferralsTableInterval = new RDeferralsTableInterval_Month(_deferralsProfile, _startPeriodDate, _endPeriodDate);
        }

        if (!rDeferralsTableInterval)
        {
            RDeferralsTableIntervalFactoryAttribute attr = new RDeferralsTableIntervalFactoryAttribute(_deferralsProfile.CalculatePeriod);
            rDeferralsTableInterval = SysExtensionAppClassFactory::getClassFromSysAttribute(classStr(RDeferralsTableInterval), attr) as RDeferralsTableInterval;
        }

        if (rDeferralsTableInterval)
        {
            rDeferralsTableInterval.parmDeferralsProfile(_deferralsProfile);
            rDeferralsTableInterval.parmStartDeferralsDate(_startPeriodDate);
            rDeferralsTableInterval.parmEndDeferralsDate(_endPeriodDate);
        }
        else
        {
            throw error("@GLS106494");
        }

        return rDeferralsTableInterval;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>