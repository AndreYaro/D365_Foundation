<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JmgPayRule_HcmPersonCertificate</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JmgPayRule_HcmPersonCertificate</c> class represents the pay rule of the certificate.
/// </summary>
/// <remarks>
///    This class lets users delimit pay agreement lines by certificates.
/// </remarks>
class JmgPayRule_HcmPersonCertificate extends JmgPayRule
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the pay rule description of the certificate.
    /// </summary>
    /// <returns>
    ///    The pay rule description of the certificate.
    /// </returns>
    public JmgDescription description()
    {
        return "@SYS32377";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDesignTimeCustomDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the design time data source for the pay rule of the certificate.
    /// </summary>
    /// <returns>
    ///    An <c>ExpressionDataSource</c> object that contains the design time data source.
    /// </returns>
    /// <remarks>
    ///    The pay rule of the certificate adds a <c>HcmPersonRecId</c> field and a <c>JmgProfileDate</c>
    ///    field to the custom design data source.
    /// </remarks>
    protected ExpressionDataSource getDesignTimeCustomDataSource()
    {
        ExpressionDataSource ret;

        ret = super();
        this.addDesignTimeFieldToDataSource(ret, extendedtypestr(HcmPersonRecId));
        this.addDesignTimeFieldToDataSource(ret, extendedtypestr(JmgProfileDate));

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getJoinConditions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieve join expressions for the Certificates pay rule.
    /// </summary>
    /// <returns>
    ///    An expression for the Certificates pay rule.
    /// </returns>
    /// <remarks>
    ///    The Certificates pay rule adds three conditions: the <c>Person</c> value equals the
    ///    <c>Query.Person</c> field, the <c>ProfileDate</c> value is on or after the <c>Query.IssueDate</c>
    ///    field and the <c>ProfileDate</c> value is on or before the <c>Query.ExpirationDate</c> field.
    /// </remarks>
    public Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionOrElement getJoinConditions()
    {
        Query q = this.getQuery();

        Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionProjection designTimeProjection =
            SysExpression::getDesignTimeProjectionModel(classstr(JmgPayRule_HcmPersonCertificate), this.getDesignTimeCustomDataSources());

        Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionOrElement expressionDefinition =
            Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionOrElement::Create();

        Microsoft.Dynamics.AX.Framework.Expression.Model.Field issueDateField;
        Microsoft.Dynamics.AX.Framework.Expression.Model.Field expirationDateField;
        Microsoft.Dynamics.AX.Framework.Expression.Model.Field transactionDateField;

        Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionAndElement andElement =
            Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionAndElement::Create();

        issueDateField = designTimeProjection.GetField(q.dataSourceTable(tablenum(HcmPersonCertificate)).name(), fieldstr(HcmPersonCertificate, IssueDate));
        expirationDateField = designTimeProjection.GetField(q.dataSourceTable(tablenum(HcmPersonCertificate)).name(), fieldstr(HcmPersonCertificate, ExpirationDate));
        transactionDateField = designTimeProjection.GetField(#TransactionDataSourceId, extendedtypestr(JmgProfileDate));

        andElement.AddDesignElement(
            Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionFieldDateElement::Create(
                issueDateField,
                Microsoft.Dynamics.AX.Framework.Expression.Model.DateOperator::OnOrBefore,
                transactionDateField));

        andElement.AddDesignElement(
            Microsoft.Dynamics.AX.Framework.Expression.Model.ExpressionFieldDateElement::Create(
                expirationDateField,
                Microsoft.Dynamics.AX.Framework.Expression.Model.DateOperator::OnOrAfter,
                transactionDateField));

        expressionDefinition.AddAndElement(andElement);

        return expressionDefinition;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the name of the <c>JmgPayRuleHcmPersonCertificate</c> query.
    /// </summary>
    /// <returns>
    ///    The name of the <c>JmgPayRuleHcmPersonCertificate</c> query.
    /// </returns>
    queryName getQueryName()
    {
        return querystr(JmgPayRuleHcmPersonCertificate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRuntimeCustomDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the runtime custom time data source for the pay rule of the certificate.
    /// </summary>
    /// <param name="_jmgStampJournalTrans">
    ///    The transaction where the values of the runtime fields are initialized.
    /// </param>
    /// <returns>
    ///    An <c>ExpressionDataSource</c> object that contains the run time data source for the pay rule of
    ///    the certificate.
    /// </returns>
    /// <remarks>
    ///    Adds two run time fields: the <c>HcmPersonRecId</c> that is initialized from the <c>Worker</c>
    ///    field of the transaction and the <c>JmgProfileDate</c> field that is initialized from the
    ///    <c>ProfileDate</c> field of the transaction.
    /// </remarks>
    protected ExpressionDataSource getRuntimeCustomDataSource(JmgStampJournalTrans _jmgStampJournalTrans)
    {
        ExpressionDataSource expressionDataSource = super(_jmgStampJournalTrans);

        this.addRunTimeFieldToDataSource(expressionDataSource, extendedtypestr(HcmPersonRecId), HcmWorker::find(_jmgStampJournalTrans.Worker).Person);
        this.addRunTimeFieldToDataSource(expressionDataSource, extendedtypestr(JmgProfileDate), _jmgStampJournalTrans.ProfileDate);

        return expressionDataSource;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>