<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailTransactionAuditLogTelemetry</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// The <c>RetailTransactionAuditLogTelemetry</c> class is a helper class to add instrumentation/telemetry to the audit flow.
/// </summary>
[Wrappable(false)]
internal class RetailTransactionAuditLogTelemetry implements System.IDisposable
{
    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;

    private System.Diagnostics.Stopwatch stopwatch;
    private guid correlationId;
    private Common targetRecord;
    private str operationName;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new(str _operationName, Common _targetRecord)
    {
        this.correlationId = newGuid();
        this.targetRecord = _targetRecord;
        this.operationName = _operationName;

        this.stopwatch = System.Diagnostics.Stopwatch::StartNew();

        eventSource.EventWriteEditAuditStartOperation(this.correlationId, this.operationName, tableId2Name(this.targetRecord.TableId), this.targetRecord.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a telemetry context.
    /// </summary>
    /// <param name = "_operationName">The name of the operation being instrumented.</param>
    /// <param name = "_targetRecord">The record being audited.</param>
    /// <returns>An instance of <c>RetailTransactionAuditLogTelemetry</c>.</returns>
    [Hookable(false)]
    public static RetailTransactionAuditLogTelemetry construct(str _operationName, Common _targetRecord)
    {
        RetailTransactionAuditLogTelemetry telemetry = new RetailTransactionAuditLogTelemetry(_operationName, _targetRecord);
        return telemetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logAdditionalInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Logs additional information to telemetry to the same context.
    /// </summary>
    /// <param name = "_message">The message to log.</param>
    [Hookable(false), SysObsolete('Not used anymore.', false, 30\06\2020)]
    public void logAdditionalInfo(str _message)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>dispose</Name>
				<Source><![CDATA[
    /// <summary>
    /// Disposes the instrumentation context and logs to telemetry the duration of the operation.
    /// </summary>
    [Hookable(false)]
    public void dispose()
    {
        stopwatch.Stop();

        eventSource.EventWriteEditAuditFinishOperation(this.correlationId, this.operationName, tableId2Name(this.targetRecord.TableId), this.targetRecord.RecId, stopwatch.ElapsedMilliseconds);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>