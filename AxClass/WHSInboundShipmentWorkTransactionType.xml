<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInboundShipmentWorkTransactionType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInboundShipmentWorkTransactionType</c> class handles common logic specific to the work transaction types for inbound orders.
/// </summary>
public abstract class WHSInboundShipmentWorkTransactionType extends WhsWorkTransactionType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isInbound</Name>
				<Source><![CDATA[
    public boolean isInbound()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForShipment</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isForShipment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isForExternalInboundShipment</Name>
				<Source><![CDATA[
    internal boolean isForExternalInboundShipment()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receivingOrderProvider</Name>
				<Source><![CDATA[
    internal abstract WHSWorkExecuteDisplayReceivingOrderProvider receivingOrderProvider()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canHaveAccountNumber</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canHaveAccountNumber()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canMoveReservationFromWorkLine</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean canMoveReservationFromWorkLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isLicensePlateSpecificReservationRequired</Name>
				<Source><![CDATA[
    internal boolean isLicensePlateSpecificReservationRequired()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInboundClusterSupported</Name>
				<Source><![CDATA[
    internal boolean isInboundClusterSupported()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addRangeLicensePlate</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean addRangeLicensePlate(WhsLocationDirectiveTableQueryParameters _parameters)
    {
        if (_parameters.locDirTable.isLocatingWholeLP())
        {
            switch (_parameters.locDirTable.locateBy)
            {
                case WHSLocDirLocateBy::ASN:
                    SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(WHSUOMStructure)), fieldNum(WHSUOMStructure, LicensePlateId)).value(queryValue(_parameters.targetLicensePlateId));
                    SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(WHSUOMStructure)), fieldNum(WHSUOMStructure, ShipmentId)).value(queryValue(_parameters.shipmentId));

                    QueryBuildDataSource qbds = _parameters.query.dataSourceTable(tableNum(WHSUOMStructure), 2);
                    if (qbds)
                    {
                        SysQuery::findOrCreateRange(qbds, fieldNum(WHSUOMStructure, LicensePlateParent)).value(queryValue(_parameters.targetLicensePlateId));
                        SysQuery::findOrCreateRange(qbds, fieldNum(WHSUOMStructure, ShipmentId)).value(queryValue(_parameters.shipmentId));
                    }
                    return true;

                case WHSLocDirLocateBy::MixedLP:
                    SysQuery::findOrCreateRange(_parameters.query.dataSourceTable(tableNum(WHSMixedLicensePlateReceipt)), fieldNum(WHSMixedLicensePlateReceipt, LicensePlateId)).value(queryValue(_parameters.targetLicensePlateId));
                    return true;

            }
        }
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasInventTransOrigin</Name>
				<Source><![CDATA[
    protected boolean hasInventTransOrigin()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateLocDirCodeForWorkTemplateLine</Name>
				<Source><![CDATA[
    public WHSWorkTemplateErrorText validateLocDirCodeForWorkTemplateLine(WHSWorkTemplateLine _templateLine, boolean _isLastLine)
    {
        if (_templateLine.WorkType == WHSWorkType::Put
            && ((!_isLastLine && !_templateLine.LocDirHintCode) || (_isLastLine && _templateLine.LocDirHintCode)))
        {
            return "@WAX1365";
        }
        
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWorkLineQuantity</Name>
				<Source><![CDATA[
    public void cancelWorkLineQuantity(WHSWorkLine _workLine, Qty _inventQty)
    {
        if (_inventQty && WHSParameters::find().UnregisterAtWorkCancel)
        {
            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;
            InventDimId inventDimIdForUnregistration;
            Counter numOfTransWithDiffInventDim;

            //determine if we have different dimensions registered and get the dimension to un-register
            while select inventDimId from inventTrans
                group by inventDimId
                    where inventTrans.StatusReceipt == StatusReceipt::Registered
                    &&    inventTrans.StatusIssue   == StatusIssue::None
                exists join inventTransOrigin
                    where inventTransOrigin.RecId == inventTrans.inventTransOrigin
                    &&    inventTransOrigin.InventTransId == _workLine.InventTransId
            {
                numOfTransWithDiffInventDim++;
                inventDimIdForUnregistration = inventTrans.inventDimId;

                if (numOfTransWithDiffInventDim > 1)
                {
                    break;
                }
            }

            //If we don't find any registered trans we get 0. We let this go through to get a proper message although 0 is not expected
            if (numOfTransWithDiffInventDim <= 1)
            {
                InventDim inventDimUnRegister = InventDim::find(inventDimIdForUnregistration);
                this.registerQuantities(_workLine.InventTransId,
                    -1 * _inventQty,
                    0,
                    inventDimUnRegister);
            }
            else
            {
                warning("@WAX:WHSWorkLinePartialCancelNotPossible");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>cancelWork</Name>
				<Source><![CDATA[
    public void cancelWork(WHSWorkTable _workTable, boolean _cancellingProductReceipt)
    {
        if (!_cancellingProductReceipt &&
            WHSParameters::find().UnregisterAtWorkCancel)
        {
            if (this.canUnregisterWork(_workTable))
            {
                this.unregisterOrderLines(_workTable);
            }
            else
            {
                this.createWorkExceptionForWorkThatCannotBeUnregistered(_workTable);
            }

            this.updateUnitStructureWhenWorkIsCanceled(_workTable.WorkId);
        }
        if (this.parmDecrementLoadLineWorkCreatedQty())
        {
            _workTable.decreaseLoadLineWorkCreatedQtyForPurchaseWork();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unregisterOrderLines</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void unregisterOrderLines(WHSWorkTable _workTable)
    {
        if (appl.ttsLevel() == 0)
        {
            throw error(strFmt("@SCM:TransactionExpected", funcName()));
        }

        InventSum       inventSum;
        Set             inventTransIdSet = new Set(Types::Container);
        WHSWorkLine     workLine;
        InventDim       workLineInventDim;
        InventDimParm   inventDimParmProductDim;

        inventDimParmProductDim.toggleAllProductDim();

        WMSLocationId recvLocation = WHSWorkLine::find(_workTable.WorkId, 1).WMSLocationId;

        boolean someTransCouldNotBeUnregistered = false;
        
        if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
        {
            while select InventQtyRemain, InventTransId from workLine
                where workLine.WorkId         == _workTable.WorkId
                    && workLine.InventTransId != ''
                    && workLine.ItemId        != ''
                    join workLineInventDim
                        where workLineInventDim.InventDimId == workLine.inventDimId
                    join PhysicalInvent, PdsCWPhysicalInvent, ItemId, inventDimId from inventSum
                        where  inventSum.ClosedQty          == NoYes::No
                            && inventSum.PhysicalInvent     > 0
                            && inventSum.ItemId             == workLine.ItemId
                            && inventSum.InventSiteId       == _workTable.InventSiteId
                            && inventSum.InventLocationId   == _workTable.InventLocationId
                            && inventSum.wMSLocationId      == recvLocation
                            && inventSum.LicensePlateId     == _workTable.TargetLicensePlateId
                            && #InventDimFieldsFilter(inventSum, workLineInventDim, inventDimParmProductDim)
                            && (!workLineInventDim.inventBatchId     || inventSum.inventBatchId == workLineInventDim.inventBatchId)
                            && (!workLineInventDim.inventSerialId    || inventSum.inventSerialId == workLineInventDim.inventSerialId)
            {
                if (!this.unRegisterQuantities(inventSum.inventDim(), inventSum, workLine, inventTransIdSet))
                {
                    someTransCouldNotBeUnregistered = true;
                }
            }
        }
        else
        {
            #InventDimDevelop
            InventDim inventDim;
         
            while select inventDim
            where inventDim.InventSiteId        == _workTable.InventSiteId
                && inventDim.InventLocationId   == _workTable.InventLocationId
                && inventDim.wmsLocationId      == recvLocation
                && inventDim.LicensePlateId     == _workTable.TargetLicensePlateId
                join PhysicalInvent, PdsCWPhysicalInvent, ItemId
                    from inventSum
                    where inventSum.InventDimId     == inventDim.InventDimId
                        && inventSum.ClosedQty      == NoYes::No
                        && inventSum.PhysicalInvent  > 0
            {
                while select InventQtyRemain, InventTransId from workLine
                    where workLine.WorkId         == _workTable.WorkId
                        && workLine.ItemId        == inventSum.ItemId
                        && workLine.InventTransId != ''
                    join workLineInventDim
                        where workLineInventDim.InventDimId == workLine.inventDimId
                            && #InventDimFieldsFilter(inventDim, workLineInventDim, inventDimParmProductDim)
                            && (!workLineInventDim.inventBatchId     || inventDim.inventBatchId == workLineInventDim.inventBatchId)
                            && (!workLineInventDim.inventSerialId    || inventDim.inventSerialId == workLineInventDim.inventSerialId)
                {
                    if (!this.unRegisterQuantities(inventDim, inventSum, workLine, inventTransIdSet))
                    {
                        someTransCouldNotBeUnregistered = true;
                    }
                }
            }
        }
        if (someTransCouldNotBeUnregistered)
        {
            if (WHSPOCancelWorkSkipUnregisteringContext::current())
            {
                var skippedUnregistering  = WHSPOCancelWorkSkipUnregisteringContext::current();
                skippedUnregistering.parmSkipUnregistering(true);
            }
            warning(strFmt("@WAX:CancelWorkNoTransactionsToUnregisterWarning", _workTable.WorkId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unRegisterQuantities</Name>
				<Source><![CDATA[
    private boolean unRegisterQuantities(
        InventDim   _inventDim,
        InventSum   _inventSum,
        WHSWorkLine _workLine,
        Set         _inventTransIdSet)
    {
        if (!_inventTransIdSet.in([_workLine.InventTransId, _inventDim.inventDimId]))
        {
            _inventTransIdSet.add([_workLine.InventTransId, _inventDim.inventDimId]);

            InventQty       registerQty;
            PdsInventQty    registerCWQty;

            if (PdsGlobal::pdsIsCWItem(_inventSum.ItemId))
            {
                // We are not supporting scenarios where the on hand qty is greater than
                // the workLine qty because we are not supporting base AX Mixed LP receiving flow.
                registerQty     = _inventSum.PhysicalInvent;
                registerCWQty   = _inventSum.PdsCWPhysicalInvent;
            }
            else
            {
                registerQty     = min(_inventSum.PhysicalInvent, _workLine.InventQtyRemain);
                registerCWQty   = 0;
            }

            InventTrans inventTrans;
            InventTransOrigin inventTransOrigin;

            select firstonly inventTransOrigin
                where inventTransOrigin.InventTransId == _workLine.InventTransId
                    exists join inventTrans
                        where inventTrans.InventTransOrigin == inventTransOrigin.RecId
                            && inventTrans.StatusReceipt    == StatusReceipt::Registered
                            && inventTrans.StatusIssue      == StatusIssue::None
                            && inventTrans.inventDimId      == _inventDim.inventDimId
                            && (_workLine.LoadId == '' || inventTrans.LoadId == _workLine.LoadId);
               
            if (!inventTransOrigin)
            {
                return false;
            }

            // Negative quantities since we are unregistering.
            this.registerQuantities(_workLine.InventTransId,
                -registerQty,
                -registerCWQty,
                _inventDim);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerQuantities</Name>
				<Source><![CDATA[
    protected abstract void registerQuantities(
        InventTransId        _inventTransId,
        InventQty            _registerQty,
        PdsInventQty         _registerCWQty,
        InventDim            _inventDim)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>canUnregisterWork</Name>
				<Source><![CDATA[
    private boolean canUnregisterWork(WHSWorkTable _workTable)
    {
        WHSClusterProfile clusterProfile = WHSClusterProfile::find(_workTable.ClusterProfileId);

        // Cannot unregister work for consolidated putaway clusters at cluster close
        // because inventTransIds have been removed from consolidated work lines.
        return !(clusterProfile.ClusterType == WHSClusterType::Putaway
                 && clusterProfile.WorkUnitBreak == WHSWorkUnitBreak::Consolidate
                 && clusterProfile.PutawayClusterLocate == WHSPutawayClusterLocate::ClusterClose);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createWorkExceptionForWorkThatCannotBeUnregistered</Name>
				<Source><![CDATA[
    private void createWorkExceptionForWorkThatCannotBeUnregistered(WHSWorkTable _workTable)
    {
        ttsbegin;

        WHSWorkExceptionLog workExceptionLog;

        workExceptionLog.WorkId             = _workTable.WorkId;
        workExceptionLog.ExceptionType      = WHSExceptionType::Work;
        workExceptionLog.InventLocationId   = _workTable.InventLocationId;
        workExceptionLog.WMSLocationId      = _workTable.getFinalPutLocation();
        workExceptionLog.Message            = "@WAX:CouldNotUnregisterConsolidatedPutawayClusterWork";
        workExceptionLog.LicensePlateId     = _workTable.TargetLicensePlateId;
        workExceptionLog.WorkTransType      = _workTable.WorkTransType;
        workExceptionLog.insert();

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>filterLocationDirectiveTableQuery</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal Query filterLocationDirectiveTableQuery(Query _query, WHSLocDirTable _locDirTable)
    {
        switch (_locDirTable.LocateBy)
        {
            case WHSLocDirLocateBy::Standard:
                this.applyFilterCriteriaToLocDirOrderLineQuery(_query, _locDirTable.InventSiteId, _locDirTable.InventLocationId);
                break;

            case WHSLocDirLocateBy::ASN:
                this.applyFilterCriteriaToLocDirASNQuery(_query, _locDirTable.InventSiteId, _locDirTable.InventLocationId);
                break;

            case WHSLocDirLocateBy::MixedLP:
                this.applyFilterCriteriaToLocDirMixedLPQuery(_query, _locDirTable.InventSiteId, _locDirTable.InventLocationId);
                break;

            case WHSLocDirLocateBy::Cluster:
                this.applyFilterCriteriaToWorkQuery(_query, _locDirTable.InventSiteId, _locDirTable.InventLocationId, _locDirTable.WorkType);
                break;
        }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOrderLineTableNum</Name>
				<Source><![CDATA[
    protected abstract TableId getOrderLineTableNum()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFilterCriteriaToLocDirOrderLineQuery</Name>
				<Source><![CDATA[
    private Query applyFilterCriteriaToLocDirOrderLineQuery(Query _query, InventSiteId _siteId, InventLocationId _warehouseId)
    {
        QueryBuildDataSource qbdsPurchLine = _query.dataSourceTable(this.getOrderLineTableNum());
        QueryBuildDataSource qbdsInventDim = qbdsPurchLine.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);

        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventSiteId)).value(queryValue(_siteId));
        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventLocationId)).value(queryValue(_warehouseId));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFilterCriteriaToLocDirASNQuery</Name>
				<Source><![CDATA[
    private Query applyFilterCriteriaToLocDirASNQuery(Query _query, InventSiteId _siteId, InventLocationId _warehouseId)
    {
        QueryBuildDataSource qbdsASNItem = _query.dataSourceTable(tableNum(WHSASNItem));
        QueryBuildDataSource qbdsInventDim = qbdsASNItem.addDataSource(tableNum(InventDim));
        qbdsInventDim.relations(true);
        qbdsInventDim.joinMode(JoinMode::ExistsJoin);

        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventSiteId)).value(queryValue(_siteId));
        SysQuery::findOrCreateRange(qbdsInventDim, fieldNum(InventDim, InventLocationId)).value(queryValue(_warehouseId));

        QueryBuildDataSource qbdsASNItem2 = _query.dataSourceTable(tableNum(WHSASNItem), 2);
        QueryBuildDataSource qbdsInventDim2 = qbdsASNItem2.addDataSource(tableNum(InventDim));
        qbdsInventDim2.relations(true);
        qbdsInventDim2.joinMode(JoinMode::ExistsJoin);

        SysQuery::findOrCreateRange(qbdsInventDim2, fieldNum(InventDim, InventSiteId)).value(queryValue(_siteId));
        SysQuery::findOrCreateRange(qbdsInventDim2, fieldNum(InventDim, InventLocationId)).value(queryValue(_warehouseId));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFilterCriteriaToLocDirMixedLPQuery</Name>
				<Source><![CDATA[
    private Query applyFilterCriteriaToLocDirMixedLPQuery(Query _query, InventSiteId _siteId, InventLocationId _warehouseId)
    {
        QueryBuildDataSource qbdsMixedLicensePlateReceipt = _query.dataSourceTable(tableNum(WHSMixedLicensePlateReceipt));
        SysQuery::findOrCreateRange(qbdsMixedLicensePlateReceipt, fieldNum(WHSMixedLicensePlateReceipt, InventSiteId)).value(queryValue(_siteId));
        SysQuery::findOrCreateRange(qbdsMixedLicensePlateReceipt, fieldNum(WHSMixedLicensePlateReceipt, InventLocationId)).value(queryValue(_warehouseId));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFilterCriteriaToWorkQuery</Name>
				<Source><![CDATA[
    private Query applyFilterCriteriaToWorkQuery(Query _query, InventSiteId _siteId, InventLocationId _warehouseId, WHSWorkType _workType)
    {
        QueryBuildDataSource qbdsWorkTable = _query.dataSourceTable(tableNum(WHSWorkTable));
        SysQuery::findOrCreateRange(qbdsWorkTable, fieldNum(WHSWorkTable, InventSiteId)).value(queryValue(_siteId));
        SysQuery::findOrCreateRange(qbdsWorkTable, fieldNum(WHSWorkTable, InventLocationId)).value(queryValue(_warehouseId));

        QueryBuildDataSource qbdsWorkLine = _query.dataSourceTable(tableNum(WHSWorkLine));
        SysQuery::findOrCreateRange(qbdsWorkLine, fieldNum(WHSWorkLine, WorkType)).value(queryValue(_workType));

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>workExecuteMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the work executed mode.
    /// </summary>
    /// <param name="_hasTargetLicensePlate">
    /// true if the work has a target license plate; otherwise, false.
    /// </param>
    /// <returns>
    /// The work execute mode.
    /// </returns>
    WHSWorkExecuteMode workExecuteMode(boolean _hasTargetLicensePlate)
    {
        return _hasTargetLicensePlate ? WHSWorkExecuteMode::PurchaseOrderLine : WHSWorkExecuteMode::ASNLicensePlate;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>