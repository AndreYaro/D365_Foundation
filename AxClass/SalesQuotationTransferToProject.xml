<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationTransferToProject</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesQuotationTransferToProject
{
    ProjTable               projTable;
    SalesQuotationTable     salesQuotationTable;

    ForecastModelId         modelId;

    NoYes                   transferHours2Forecast;
    NoYes                   transferExpenses2Forecast;
    NoYes                   transferFees2Forecast;
    NoYes                   transferItems2Forecast;

    NoYes                   transferItemReq;

    NoYes                   transferActivityInfo;
    Map                     activityNumberMapping;
    SalesQuotationTransferToProjectContract salesQuotationTransferToProjectContract;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkTransferItemsToItemReq</Name>
				<Source><![CDATA[
    boolean checkTransferItemsToItemReq()
    {
        return (transferItemReq);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTransferToForecast</Name>
				<Source><![CDATA[
    boolean checkTransferToForecast()
    {
        return (transferHours2Forecast      ||
                transferExpenses2Forecast   ||
                transferFees2Forecast       ||
                transferItems2Forecast);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForecastOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the on account forecast.
    /// </summary>
    /// <param name = "_projTable"><c>ProjTable</c> buffer.</param>
    /// <param name = "_marked">true if transferToProject checkbox is marked; otherwise false.</param>
    public void createForecastOnAcc(ProjTable _projTable, boolean _marked = false)
    {
        if (!salesQuotationTransferToProjectContract)
        {
            this.parmSalesQuotationTransferToProjectContract(SalesQuotationTransferToProjectContract::construct());
        }
        salesQuotationTransferToProjectContract.parmSalesQuotationTable(salesQuotationTable);
        salesQuotationTransferToProjectContract.parmTransferToProjFlag(_marked);
        salesQuotationTransferToProjectContract.parmProjTable(_projTable);
        this.createForecastOnAccUsingContractParams(salesQuotationTransferToProjectContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForecastOnAccUsingContractParams</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Creates the on account forecast using the parameters class <c>SalesQuotationTransferToProjectContract</c> object.
    /// </summary>
    /// <param name = "_salesQuotationTransferToProjectContract">Parameters class <c>SalesQuotationTransferToProjectContract</c> instance.</param>
    public void createForecastOnAccUsingContractParams(SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract)
    {
        this.initializeFromContractParams(_salesQuotationTransferToProjectContract);
        this.calculateAmountFromSalesQuotationLines(_salesQuotationTransferToProjectContract);
        this.getTransactionDate(_salesQuotationTransferToProjectContract);
        this.writeProjForecastOnAcc(_salesQuotationTransferToProjectContract);
        this.populateProjOnAccTrans(_salesQuotationTransferToProjectContract);
        // Create an on account transaction record by splitting amount across funding sources based on the funding source allocation rule.
        ProjOnAccTrans::createOnAccTrans(_salesQuotationTransferToProjectContract.paramProjOnAccTrans(), _salesQuotationTransferToProjectContract.parmAmount());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromContractParams</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Extracts out variables from given parameters class <c>SalesQuotationTransferToProjectContract</c> object.
    /// </summary>
    /// <param name = "_salesQuotationTransferToProjectContract">Parameters class <c>SalesQuotationTransferToProjectContract</c> instance.</param>
    protected void initializeFromContractParams(SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract)
    {
        salesQuotationTable = _salesQuotationTransferToProjectContract.parmSalesQuotationTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAmountFromSalesQuotationLines</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Calculates total amount associated with salesQuotationLines.
    /// </summary>
    /// <param name = "_salesQuotationTransferToProjectContract">Parameters class <c>SalesQuotationTransferToProjectContract</c> instance.</param>
    protected void calculateAmountFromSalesQuotationLines(SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract)
    {
        SalesQuotationLine salesQuotationLine;
        AmountMST amount = 0;
        ProjTable projTableLocal = _salesQuotationTransferToProjectContract.parmProjTable();

        boolean enableMultipleContractLinesForProjectFeature = ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled();
        
        while select LineAmount, LinePropertyId, SalesPrice, PriceUnit, LineDisc, SalesQty, SalesMarkup, LinePercent, CurrencyCode, ProjTransType from salesQuotationLine
            where salesQuotationLine.QuotationId == salesQuotationTable.QuotationId
        {
            if (ProjLineProperty::find(salesQuotationLine.LinePropertyId).ToBeInvoiced == NoYes::Yes)
            {
                boolean validForOnAcc = false;
                if (enableMultipleContractLinesForProjectFeature)
                {
                    PSAContractLineItems contractLine = ProjMultipleContractLinesForProjectFeatureHelper::getProjContractLineByContractIdTransType(projTableLocal.ProjId, projTableLocal.ProjInvoiceProjId, ProjMultipleContractLinesForProjectFeatureHelper::quotationTransType2ProjTransType(salesQuotationLine.ProjTransType));
                    if (contractLine && contractLine.BillingMethod == ProjContractBillingMethod::FixedPrice)
                    {
                        validForOnAcc = true;
                    }
                }
                else
                {
                    validForOnAcc = true;
                }
                
                if (validForOnAcc)
                {
                    amount += PriceDisc::price2Amount(salesQuotationLine.SalesPrice,
                                                    salesQuotationLine.PriceUnit,
                                                    salesQuotationLine.LineDisc,
                                                    salesQuotationLine.SalesQty,
                                                    salesQuotationLine.SalesQty,
                                                    salesQuotationLine.SalesMarkup,
                                                    salesQuotationLine.LinePercent,
                                                    salesQuotationLine.CurrencyCode,
                                                    0);
                }
            }
        }
        _salesQuotationTransferToProjectContract.parmAmount(amount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets transaction date from the <c>SalesQuotationTable</c> and saves it on _salesQuotationTransferToProjectContract argument.
    /// </summary>
    /// <param name = "_salesQuotationTransferToProjectContract">Parameters class <c>SalesQuotationTransferToProjectContract</c> instance.</param>
    protected void getTransactionDate(SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract)
    {
        TransDate transactionDate;
        if (salesQuotationTable.psaEstProjEndDate)
        {
            transactionDate = salesQuotationTable.psaEstProjEndDate;
        }
        else if (salesQuotationTable.psaEstProjStartDate)
        {
            transactionDate = salesQuotationTable.psaEstProjStartDate;
        }
        else
        {
            transactionDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
        }
        _salesQuotationTransferToProjectContract.parmTransactionDate(transactionDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeProjForecastOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Create and insert <c>ProjForecastOnAcc</c> table buffer.
    /// </summary>
    /// <param name = "_salesQuotationTransferToProjectContract">Parameters class <c>SalesQuotationTransferToProjectContract</c> instance.</param>
    protected void writeProjForecastOnAcc(SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract)
    {
        boolean marked = _salesQuotationTransferToProjectContract.parmTransferToProjFlag();
        if (marked)
        {
            this.populateProjForecastOnAcc(_salesQuotationTransferToProjectContract);
            this.insertProjForecastOnAcc(_salesQuotationTransferToProjectContract);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjForecastOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Build <c>ProjForecastOnAcc</c> object from <c>SalesQuotationTransferToProjectContract</c> object.
    /// </summary>
    /// <param name = "_salesQuotationTransferToProjectContract">Parameters class <c>SalesQuotationTransferToProjectContract</c> instance.</param>
    protected void populateProjForecastOnAcc(SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract)
    {
        ProjForecastOnAcc projForecastOnAcc;
        TransDate transactionDate = _salesQuotationTransferToProjectContract.parmTransactionDate();
        ProjTable projTableLocal = _salesQuotationTransferToProjectContract.parmProjTable();
        AmountMST amount = _salesQuotationTransferToProjectContract.parmAmount();

        projForecastOnAcc.ProjId = projTableLocal.ProjId;
        projForecastOnAcc.initValue();
        projForecastOnAcc.TransDate = transactionDate;
        projForecastOnAcc.initFromProjTable(projTableLocal);
        projForecastOnAcc.InvoiceDate = transactionDate;
        projForecastOnAcc.SalesPrice = amount;

        _salesQuotationTransferToProjectContract.paramProjForecastOnAcc(projForecastOnAcc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjForecastOnAcc</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Insert <c>ProjForecastOnAcc</c> object if valid.
    /// </summary>
    /// <param name = "_salesQuotationTransferToProjectContract">Parameter class object for <c>SalesQuotationTransferToProjectContract</c>.</param>
    protected void insertProjForecastOnAcc(SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract)
    {
        ProjForecastOnAcc projForecastOnAcc = _salesQuotationTransferToProjectContract.paramProjForecastOnAcc();
        if (projForecastOnAcc.validateWrite())
        {
            projForecastOnAcc.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Insert <c>ProjOnAccTrans</c> object if valid.
    /// </summary>
    /// <param name = "_salesQuotationTransferToProjectContract">Parameters class <c>SalesQuotationTransferToProjectContract</c> instance.</param>
    protected void insertProjOnAccTrans(SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract)
    {
        ProjOnAccTrans projOnAccTrans = _salesQuotationTransferToProjectContract.paramProjOnAccTrans();
        if (projOnAccTrans.validateWrite())
        {
            projOnAccTrans.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjOnAccTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Insert <c>ProjOnAccTransSale</c> object if valid.
    /// </summary>
    /// <param name = "_salesQuotationTransferToProjectContract">Parameters class <c>SalesQuotationTransferToProjectContract</c> instance.</param>
    protected void insertProjOnAccTransSale(SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract)
    {
        ProjOnAccTransSale projOnAccTransSale = _salesQuotationTransferToProjectContract.paramProjOnAccTransSale();
        ProjOnAccTrans projOnAccTrans = _salesQuotationTransferToProjectContract.paramProjOnAccTrans();

        if (projOnAccTrans && projOnAccTransSale.validateWrite())
        {
            projOnAccTransSale.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjOnAccTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the record for <c>ProjOnAccTrans</c> table.
    /// </summary>
    /// <param name = "_salesQuotationTransferToProjectContract">Parameters class <c>SalesQuotationTransferToProjectContract</c> instance.</param>
    protected void populateProjOnAccTrans(SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract)
    {
        ProjOnAccTrans  projOnAccTrans;
        ProjTable projTableLocal = _salesQuotationTransferToProjectContract.parmProjTable();

        projOnAccTrans.initValue();
        projOnAccTrans.initFromProjTable(projTableLocal.ProjId);
        projOnAccTrans.TransDate = _salesQuotationTransferToProjectContract.parmTransactionDate();

        _salesQuotationTransferToProjectContract.paramProjOnAccTrans(projOnAccTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateProjOnAccTransSale</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Populates the record for <c>ProjOnAccTransSale</c> table.
    /// </summary>
    /// <param name = "_salesQuotationTransferToProjectContract">Parameters class <c>SalesQuotationTransferToProjectContract</c> instance.</param>
    protected void populateProjOnAccTransSale(SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract)
    {
        ProjOnAccTransSale  projOnAccTransSale;
        ProjOnAccTrans  projOnAccTrans = _salesQuotationTransferToProjectContract.paramProjOnAccTrans();

        projOnAccTransSale.initValue();
        projOnAccTransSale.initFromProjOnAccTrans(projOnAccTrans);
        projOnAccTransSale.Amount = _salesQuotationTransferToProjectContract.parmAmount();

        _salesQuotationTransferToProjectContract.paramProjOnAccTransSale(projOnAccTransSale);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParameters</Name>
				<Source><![CDATA[
    void  initParameters(NoYes              _transferHours2Forecast     = transferHours2Forecast,
                         NoYes              _transferExpenses2Forecast  = transferExpenses2Forecast,
                         NoYes              _transferFees2Forecast      = transferFees2Forecast,
                         NoYes              _transferItems2Forecast     = transferItems2Forecast,
                         NoYes              _transferItemReq            = transferItemReq)

    {
        transferHours2Forecast      = _transferHours2Forecast;
        transferExpenses2Forecast   = _transferExpenses2Forecast;
        transferFees2Forecast       = _transferFees2Forecast;
        transferItems2Forecast      = _transferItems2Forecast;
        transferItemReq             = _transferItemReq;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActivityNumberMapping</Name>
				<Source><![CDATA[
    Map parmActivityNumberMapping(Map _activityNumberMapping = activityNumberMapping)
    {
        activityNumberMapping = _activityNumberMapping;

        return activityNumberMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModelId</Name>
				<Source><![CDATA[
    ForecastModelId parmModelId(ForecastModelId _modelId = modelId)
    {
        modelId = _modelId;

        return modelId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjTable</Name>
				<Source><![CDATA[
    ProjTable parmProjTable(ProjTable        _projTable = projTable)
    {
        projTable = _projTable;

        return projTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationTable</Name>
				<Source><![CDATA[
    SalesQuotationTable parmSalesQuotationTable(SalesQuotationTable _salesQuotationTable = salesQuotationTable)
    {
        salesQuotationTable = _salesQuotationTable;

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransferActivityInfo</Name>
				<Source><![CDATA[
    NoYes parmTransferActivityInfo(NoYes _transferActivityInfo = transferActivityInfo)
    {
        transferActivityInfo = _transferActivityInfo;

        return transferActivityInfo;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesQuotationTransferToProjectContract</Name>
				<Source><![CDATA[
    SalesQuotationTransferToProjectContract parmSalesQuotationTransferToProjectContract(
        SalesQuotationTransferToProjectContract _salesQuotationTransferToProjectContract = salesQuotationTransferToProjectContract)
    {
        salesQuotationTransferToProjectContract = _salesQuotationTransferToProjectContract;
        return salesQuotationTransferToProjectContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    void run()
    {
        if (this.validate())
        {
            try
            {
                ttsbegin;
                if (this.checkTransferToForecast())
                {
                    this.transferToForecast();
                }
                if (this.checkTransferItemsToItemReq())
                {
                    if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
                    {
                        SalesQuotationTransferToProject::transferItemsToItemReq(salesQuotationTable, this);
                    }
                    else
                    {
                        SalesQuotationTransferToProject::transferItemsToItemReq(salesQuotationTable);
                    }
                }
                ttscommit;
            }
            catch (Exception::Error)
            {
                throw error("@SYS84631");
            }
        }
        else
        {
            throw error("@SYS84631");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferExpensesToForecast</Name>
				<Source><![CDATA[
    void transferExpensesToForecast()
    {
        SalesQuotationLine      salesQuotationLine;
        ProjForecastCost        projForecastCost;

        salesQuotationLine.selectForUpdate(true);
        while select salesQuotationLine
            where salesQuotationLine.QuotationId            == salesQuotationTable.QuotationId
               && salesQuotationLine.Transferred2Forecast   == NoYes::No
               && salesQuotationLine.ProjTransType          == QuotationProjTransType::Expense
        {
            projForecastCost.clear();
            projForecastCost.CurrencyId = salesQuotationLine.CurrencyCode;
            projForecastCost.initValue();
            projForecastCost.initFromSalesQuotationLine(salesQuotationLine);
            projForecastCost.ModelId = this.parmModelId();
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
            {
                if (this.parmTransferActivityInfo())
                {
                    if (salesQuotationLine.ProjActivity &&
                        activityNumberMapping &&
                        activityNumberMapping.exists(salesQuotationLine.ProjActivity))
                    {
                        projForecastCost.ActivityNumber = activityNumberMapping.lookup(salesQuotationLine.ProjActivity);
                    }
                }
                // Must set this so class: ProjControlPeriod calculates correct percent complete
                projForecastCost.Active = NoYes::Yes;
            }

            projForecastCost.initSchedFromDateToSourceActivity();

            if (projForecastCost.validateWrite())
            {
                projForecastCost.insert();

                salesQuotationLine.Transferred2Forecast = NoYes::Yes;
                salesQuotationLine.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferFeesToForecast</Name>
				<Source><![CDATA[
    void transferFeesToForecast()
    {
        SalesQuotationLine      salesQuotationLine;
        ProjForecastRevenue     projForecastRevenue;

        salesQuotationLine.selectForUpdate(true);
        while select salesQuotationLine
            where salesQuotationLine.QuotationId            == salesQuotationTable.QuotationId
               && salesQuotationLine.Transferred2Forecast   == NoYes::No
               && salesQuotationLine.ProjTransType          == QuotationProjTransType::Fee
        {
            projForecastRevenue.clear();
            projForecastRevenue.CurrencyId = salesQuotationLine.CurrencyCode;
            projForecastRevenue.initValue();
            projForecastRevenue.initFromSalesQuotationLine(salesQuotationLine);
            projForecastRevenue.ModelId = this.parmModelId();
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.parmTransferActivityInfo())
            {
                if (salesQuotationLine.ProjActivity &&
                    activityNumberMapping &&
                    activityNumberMapping.exists(salesQuotationLine.ProjActivity))
                {
                    projForecastRevenue.ActivityNumber = activityNumberMapping.lookup(salesQuotationLine.ProjActivity);
                }
            }

            projForecastRevenue.initSchedFromDateToSourceActivity();

            if (projForecastRevenue.validateWrite())
            {
                projForecastRevenue.insert();

                salesQuotationLine.Transferred2Forecast = NoYes::Yes;
                salesQuotationLine.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferHoursToForecast</Name>
				<Source><![CDATA[
    void transferHoursToForecast()
    {
        SalesQuotationLine      salesQuotationLine;
        ProjForecastEmpl        projForecastEmpl;

        salesQuotationLine.selectForUpdate(true);
        while select salesQuotationLine
            where salesQuotationLine.QuotationId            == salesQuotationTable.QuotationId
               && salesQuotationLine.Transferred2Forecast   == NoYes::No
               && salesQuotationLine.ProjTransType          == QuotationProjTransType::Hour
        {
            projForecastEmpl.clear();
            projForecastEmpl.CurrencyId = salesQuotationLine.CurrencyCode;
            projForecastEmpl.initValue();
            projForecastEmpl.initFromSalesQuotationLine(salesQuotationLine);
            projForecastEmpl.ModelId = this.parmModelId();
            if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.parmTransferActivityInfo())
            {
                if (salesQuotationLine.ProjActivity &&
                    activityNumberMapping &&
                    activityNumberMapping.exists(salesQuotationLine.ProjActivity))
                {
                    projForecastEmpl.ActivityNumber = activityNumberMapping.lookup(salesQuotationLine.ProjActivity);
                }
            }

            projForecastEmpl.initSchedFromDateToSourceActivity();
            projForecastEmpl.ResourceValidationSkipped = NoYes::Yes;

            if (projForecastEmpl.validateWrite())
            {
                projForecastEmpl.insert();

                salesQuotationLine.Transferred2Forecast = NoYes::Yes;
                salesQuotationLine.doUpdate();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferItemsToForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfer <c>SalesQuotationLine</c> records to <c>ForecasSales</c> records.
    /// </summary>
    public void transferItemsToForecast()
    {
        SalesQuotationLine      salesQuotationLine;

        boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());

        salesQuotationLine.selectForUpdate(true);
        while select salesQuotationLine
            where salesQuotationLine.QuotationId            == salesQuotationTable.QuotationId
               && salesQuotationLine.Transferred2Forecast   == NoYes::No
               && salesQuotationLine.SalesQty                > 0
               && salesQuotationLine.ProjTransType          == QuotationProjTransType::Item
        {
            if (this.mustTransferItemToForecast(salesQuotationLine))
            {
                if (isKittingEnabled)
                {
                    if (!SalesQuotationTransferToProject::kittingCanTransferToProject(salesQuotationLine))
                    {
                        continue;
                    }
                }

                if (!salesQuotationLine.checkInventDim())
                {
                    throw error("@SYS319221");
                }

                ForecastSales forecastSales = this.createForecastSalesFromItem(salesQuotationLine);
            
                if (forecastSales)
                {
                    this.updateSalesQuotationLineAsTransferredToForecast(salesQuotationLine);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustTransferItemToForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether to transfer the specified <c>SalesQuotationLine</c> record to a <c>ForecasSales</c> record.
    /// </summary>
    /// <param name = "_salesQuotationLine">The <c>SalesQuotationLine</c> used to create the <c>ForecastSales</c></param>
    /// <returns>true if the specified <c>SalesQuotationLine</c> must be transferred to a <c>ForecasSales</c> record; otherwise, false.</returns>
    /// <remarks>This method is meant to be an extension point.</remarks>
    protected boolean mustTransferItemToForecast(SalesQuotationLine _salesQuotationLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createForecastSalesFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>ForecastSales</c> record based on the specified <c>SalesQuotationLine</c>.
    /// </summary>
    /// <param name = "_salesQuotationLine">The <c>SalesQuotationLine</c> used to create the <c>ForecastSales</c></param>
    /// <returns>A valid <c>ForecastSales</c> record or null.</returns>
    protected ForecastSales createForecastSalesFromItem(SalesQuotationLine _salesQuotationLine)
    {
        ForecastSales forecastSales = this.initForecastSalesFromItem(_salesQuotationLine);
                
        if (forecastSales.validateWrite())
        {
            this.insertForecastSalesFromItem(forecastSales);
            if (FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance()))
            {
                SalesQuotationTransferToProject::kittingUpdatePartsFromSalesQuotation_delegate(forecastSales, _salesQuotationLine);
            }
            return ForecastSales;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForecastSalesFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a <c>ForecastSales</c> record based on the specified <c>SalesQuotationLine</c>.
    /// </summary>
    /// <param name = "_salesQuotationLine">The <c>SalesQuotationLine</c> used to initialize the <c>ForecastSales</c></param>
    /// <returns>The initialized <c>ForecastSales</c> record.</returns>
    protected ForecastSales initForecastSalesFromItem(SalesQuotationLine _salesQuotationLine)
    {
        ForecastSales forecastSales;
        forecastSales.clear();
        forecastSales.initValue();
        forecastSales.initFromSalesQuotationLine(_salesQuotationLine);
        if (forecastSales.CostPrice == 0  && _salesQuotationLine.CostPrice != 0 && (_salesQuotationLine.SalesCategory != 0 || !(_salesQuotationLine.isStocked())))
        {
            forecastSales.CostPrice = _salesQuotationLine.CostPrice;
        }
        forecastSales.ModelId = this.parmModelId();
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)) && this.parmTransferActivityInfo())
        {
            if (_salesQuotationLine.ProjActivity &&
                    activityNumberMapping &&
                    activityNumberMapping.exists(_salesQuotationLine.ProjActivity))
            {
                forecastSales.ActivityNumber = activityNumberMapping.lookup(_salesQuotationLine.ProjActivity);
            }
        }

        return forecastSales;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertForecastSalesFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the <c>ForecastSales</c> record that is initialized based on a <c>SalesQuotationLine</c> record.
    /// </summary>
    /// <param name = "_forecastSales">The initialized <c>ForecastSales</c> record to insert.</param>
    protected void insertForecastSalesFromItem(ForecastSales _forecastSales)
    {
        _forecastSales.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationLineAsTransferredToForecast</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the specified <c>SalesQuotationLine</c> as transferred to forecast.
    /// </summary>
    /// <param name = "_salesQuotationLine">The <c>SalesQuotationLine</c> to update.</param>
    protected void updateSalesQuotationLineAsTransferredToForecast(SalesQuotationLine _salesQuotationLine)
    {
        _salesQuotationLine.Transferred2Forecast = NoYes::Yes;
        _salesQuotationLine.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferToForecast</Name>
				<Source><![CDATA[
    void transferToForecast()
    {
        SalesQuotationLine  localSalesQuotationLine;

        if (transferHours2Forecast)
        {
            this.transferHoursToForecast();
        }

        if (transferExpenses2Forecast)
        {
            this.transferExpensesToForecast();
        }

        if (this.canTransferFeesToForecast())
        {
            this.transferFeesToForecast();
        }

        if (transferItems2Forecast)
        {
            this.transferItemsToForecast();
        }

        //test if all the lines were transffered before setting the field on the header
        select firstonly localSalesQuotationLine
            where localSalesQuotationLine.QuotationId == salesQuotationTable.QuotationId
                && localSalesQuotationLine.Transferred2Forecast   == NoYes::No;
        if (!localSalesQuotationLine)
        {
            salesQuotationTable.selectForUpdate(true);
            salesQuotationTable.TransferredToForecast = NoYes::Yes;
            salesQuotationTable.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canTransferFeesToForecast</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Verifies if fees can be transferred to forecast.
    /// </summary>
    /// <returns>
    ///     true if fees can be transferred to forecast; otherwise, false.
    /// </returns>
    protected boolean canTransferFeesToForecast()
    {
        boolean ret = false;;

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            ret = transferFees2Forecast && ProjMultipleContractLinesForProjectFeatureHelper::isTransTypeIncludedByBillingMethod(this.parmProjTable().ProjId, this.parmProjTable().ProjInvoiceProjId, ProjTransType::Revenue, ProjContractBillingMethod::TimeMaterial);
        }
        else
        {
            ret = transferFees2Forecast && this.parmProjTable().Type != ProjType::FixedPrice;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    boolean validate()
    {
        boolean     ok  = true;

        if (! salesQuotationTable.RecId)
        {
            ok = checkFailed(strFmt("@SYS84605",salesQuotationTable.QuotationId));
        }

        if (! projTable.RecId)
        {
            ok = checkFailed(strFmt("@SYS11217",salesQuotationTable.ProjIdRef));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countForecastTransactions</Name>
				<Source><![CDATA[
    static NumberOfRecords countForecastTransactions(
        QuotationIdBase         _quotationId,
        QuotationProjTransType  _quotationProjTransType,
        boolean                 _itemReq = false)
    {
        SalesQuotationLine  salesQuotationLine;
        NumberOfRecords     no;
        SalesQuotationTransferToProject quoteTransfer = new SalesQuotationTransferToProject();

        if (_quotationProjTransType == QuotationProjTransType::Item && _itemReq)
        {
            select count(RecId) from salesQuotationLine
                where salesQuotationLine.QuotationId   == _quotationId
                   && salesQuotationLine.ProjTransType == QuotationProjTransType::Item
                   && salesQuotationLine.Transferred2ItemReq == NoYes::No;

            no = salesQuotationLine.RecId;
        }
        else
        {
            if (_quotationProjTransType == QuotationProjTransType::Fee)
            {
                select sum(SalesQty) from salesQuotationLine
                    where salesQuotationLine.QuotationId   == _quotationId
                       && salesQuotationLine.ProjTransType == _quotationProjTransType && salesQuotationLine.SalesQty >0;

                no = any2int64(salesQuotationLine.SalesQty);

                select sum(SalesQty) from salesQuotationLine
                    where salesQuotationLine.QuotationId   == _quotationId
                       && salesQuotationLine.ProjTransType == _quotationProjTransType && salesQuotationLine.SalesQty < 0;

                no += any2int64(abs(salesQuotationLine.SalesQty));
            }
            else
            {
                select count(RecId) from salesQuotationLine
                    where salesQuotationLine.QuotationId   == _quotationId
                       && salesQuotationLine.ProjTransType == _quotationProjTransType;
                no = salesQuotationLine.RecId;
            }
        }

        return no;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeProjectFromParameters</Name>
				<Source><![CDATA[
   /// <summary>
    /// This method should only be used for initializing <c>ProjTable</c> table record.
   /// </summary>
   /// <param name = "_projTable">
   /// <c>ProjTable</c> table buffer.
   /// </param>
   /// <param name = "_projType">
   /// Project type.
   /// </param>
   /// <param name = "_projId">
   /// Project ID.
   /// </param>
   /// <param name = "_projGroupId">
   ///  Project group ID.
   /// </param>
   /// <param name = "_projName">
   /// Project name.
   /// </param>
   /// <param name = "_projInvoiceProjId">
   /// Project invoice project ID.
   /// </param>
   /// <param name = "_numberSequenceFormat">
   /// Number sequence format.
   /// </param>
   /// <param name = "_projLinePropertyId">
   /// Project line property ID.
   /// </param>
   /// <param name = "_projWipId">
   /// Project WIP ID.
   /// </param>
   /// <param name = "_salesQuotationTable">
   /// <c>SalesQuotationTable</c> table buffer.
   /// </param>
    /// <remarks>
    /// This method can also be used for extension\CoC to initialize any additional custom fields.
    /// </remarks>
    protected static void initializeProjectFromParameters(ProjTable _projTable, ProjType _projType,
            ProjId _projId,
            ProjGroupId _projGroupId,
            ProjName _projName,
            ProjInvoiceProjId _projInvoiceProjId,
            NumberSequenceFormat _numberSequenceFormat,
            ProjLinePropertyId _projLinePropertyId,
            ProjWipId _projWipId,
            SalesQuotationTable _salesQuotationTable)
    {
        _projTable.clear();
        _projTable.initValue();

        _projTable.Type = _projType;
        _projTable.type().initProjTable(_projTable);

        _projTable.ProjId = _projId;

        _projTable.StartDate = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        _projTable.ProjGroupId = _projGroupId;
        ProjGroup projGroup = ProjGroup::find(_projTable.ProjGroupId);
        _projTable.initFromProjGroup(projGroup);

        _projTable.Name = _projName;

        _projTable.ProjInvoiceProjId = _projInvoiceProjId;
        _projTable.initFromInvoice(ProjInvoiceTable::find(_projTable.ProjInvoiceProjId));

        _projTable.CustAccount = _salesQuotationTable.CustAccount;
        CustTable custTable = CustTable::find(_projTable.CustAccount);
        _projTable.initFromCustTable(custTable);

        _projTable.Format = _numberSequenceFormat;
        //Transfer the  dimensions to the new project.
        _projTable.DefaultDimension = _salesQuotationTable.DefaultDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProject</Name>
				<Source><![CDATA[
    public static ProjTable createProject(
            ProjType _projType,
            ProjId _projId,
            ProjGroupId _projGroupId,
            ProjName _projName,
            ProjInvoiceProjId _projInvoiceProjId,
            NumberSequenceFormat _numberSequenceFormat,
            ProjLinePropertyId _projLinePropertyId,
            ProjWipId _projWipId,
            SalesQuotationTable _salesQuotationTable)
    {
        ProjTable                       newProjTable;
        CustQuotationConfirmSalesLink   custQuotationConfirmSalesLink;

        ttsbegin;

        // Initialization of the new project table.
        SalesQuotationTransferToProject::initializeProjectFromParameters(newProjTable, _projType, _projId,_projGroupId,
                                                       _projName,_projInvoiceProjId,_numberSequenceFormat,
                                                       _projLinePropertyId,_projWipId,_salesQuotationTable);

        if (newProjTable.validateWrite())
        {
            newProjTable.insert();

            if (_projLinePropertyId)
            {
                ProjLinePropertySetup::updateLinePropertyProj(newProjTable.ProjId,
                                                              _projLinePropertyId,
                                                              TableGroupAll::Table,
                                                              true);
            }
        }

        // Check if Project Id is just recently assigned in the wizard.
        SalesQuotationTable salesQuotationTable = SalesQuotationTable::find(_salesQuotationTable.QuotationId, true);
        if (!salesQuotationTable.ProjIdRef)
        {
            salesQuotationTable.initProjQuotationFromProject(_projId);

            salesQuotationTable.ProjIdRef           = _projId;
            salesQuotationTable.ProjInvoiceProjId   = _projInvoiceProjId;

            salesQuotationTable.doUpdate();
        }

        //link Confirmation to Project
        select custQuotationConfirmSalesLink where custQuotationConfirmSalesLink.OrigQuotationId == salesQuotationTable.QuotationId;

        if (custQuotationConfirmSalesLink)
        {
            CustQuotationConfirmJour custQuotationConfirmJour = CustQuotationConfirmJour::findFromSalesQuotationQuotation(custQuotationConfirmSalesLink.QuotationConfirmId,true);
            if (custQuotationConfirmJour)
            {
                custQuotationConfirmJour.ProjIdRef           = _projId;
                custQuotationConfirmJour.ProjInvoiceProjId   = _projInvoiceProjId;

                custQuotationConfirmJour.doUpdate();
            }
        }

        ttscommit;

        return newProjTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projQuoteLink</Name>
				<Source><![CDATA[
    static NoYes projQuoteLink(SalesQuotationTable _salesQuotationTable, ProjTable _projTable)
    {
        try
        {
            ttsbegin;
            // Check if Project Id is just recently assigned in the wizard.
            SalesQuotationTable salesQuotationTable = SalesQuotationTable::find(_salesQuotationTable.QuotationId, true);
            if (!salesQuotationTable.ProjIdRef)
            {
                salesQuotationTable.initProjQuotationFromProject(_projTable.ProjId);

                salesQuotationTable.ProjIdRef           = _projTable.ProjId;
                salesQuotationTable.ProjInvoiceProjId   = _projTable.ProjInvoiceProjId;

                salesQuotationTable.doUpdate();
            }
            ttscommit;
        }
        catch (Exception::Error)
        {
            throw error("@SYS84631");
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projQuoteTransfer</Name>
				<Source><![CDATA[
    static NoYes projQuoteTransfer(
        ForecastModelId _modelId,
        SalesQuotationTable _salesQuotationTable,
        ProjTable _projTable,
        NoYes _transferToForecast,
        NoYes _transferToItemReq,
        SalesQuotationTransferToProject _sqtr)
    {
        SalesQuotationTransferToProject quoteTransfer = SalesQuotationTransferToProject::projQuoteTransferCreateQuoteTransfer(_modelId, 
            _salesQuotationTable, 
            _projTable, 
            _transferToForecast,
            _transferToItemReq,
            _sqtr);

        if (quoteTransfer.validate())
        {
            try
            {
                ttsbegin;
                // Check if Project Id is just recently assigned in the wizard.
                SalesQuotationTable salesQuotationTable = SalesQuotationTable::find(_salesQuotationTable.QuotationId, true);
                if (!salesQuotationTable.ProjIdRef)
                {
                    salesQuotationTable.initProjQuotationFromProject(_projTable.ProjId);

                    salesQuotationTable.ProjIdRef           = _projTable.ProjId;
                    salesQuotationTable.ProjInvoiceProjId   = _projTable.ProjInvoiceProjId;

                    salesQuotationTable.doUpdate();
                }

                CustQuotationConfirmSalesLink custQuotationConfirmSalesLink;
                //link Confirmation to Project
                select custQuotationConfirmSalesLink where custQuotationConfirmSalesLink.OrigQuotationId == salesQuotationTable.QuotationId;

                if (custQuotationConfirmSalesLink)
                {
                    CustQuotationConfirmJour custQuotationConfirmJour = CustQuotationConfirmJour::findFromSalesQuotationQuotation(custQuotationConfirmSalesLink.QuotationConfirmId, true);
                    if (custQuotationConfirmJour)
                    {
                        custQuotationConfirmJour.ProjIdRef           = _projTable.ProjId;
                        custQuotationConfirmJour.ProjInvoiceProjId   = _projTable.ProjInvoiceProjId;

                        custQuotationConfirmJour.doUpdate();
                    }
                }

                if (quoteTransfer.checkTransferToForecast())
                {
                    quoteTransfer.transferToForecast();
                }
                if (quoteTransfer.checkTransferItemsToItemReq())
                {
                    SalesQuotationTransferToProject::transferItemsToItemReq(_salesQuotationTable, _sqtr);
                }
                ttscommit;
            }
            catch (Exception::Error)
            {
                throw error("@SYS84631");
            }
        }
        else
        {
            throw error("@SYS84631");
        }

        return NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projQuoteTransferCreateQuoteTransfer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an instance of the <c>SalesQuotationTransferToProject</c> class.
    /// </summary>
    /// <param name = "_modelId">
    /// A forecast model Id.
    /// </param>
    /// <param name = "_salesQuotationTable">
    /// A <c>SalesQuotationTable</c> table buffer.
    /// </param>
    /// <param name = "_projTable">
    /// A <c>ProjTable</c> table buffer.
    /// </param>
    /// <param name = "_transferToForecast">
    /// Indicates if transfer to forecast should be performed.
    /// </param>
    /// <param name = "_transferToItemReq">
    /// Indicates if transfer to item should be performed.
    /// </param>
    /// <param name = "_sqtr">
    /// An instance of the <c>SalesQuotationTransferToProject</c> class.
    /// </param>
    /// <returns>
    /// An instance of the <c>SalesQuotationTransferToProject</c> class.
    /// </returns>
    protected static SalesQuotationTransferToProject projQuoteTransferCreateQuoteTransfer(
        ForecastModelId _modelId,
        SalesQuotationTable _salesQuotationTable,
        ProjTable _projTable,
        NoYes _transferToForecast,
        NoYes _transferToItemReq,
        SalesQuotationTransferToProject _sqtr)
    {
        SalesQuotationTransferToProject quoteTransfer = new SalesQuotationTransferToProject();

        quoteTransfer.parmModelId(_modelId);
        quoteTransfer.parmProjTable(_projTable);
        quoteTransfer.parmSalesQuotationTable(_salesQuotationTable);
        quoteTransfer.initParameters(_transferToForecast, _transferToForecast, _transferToForecast, _transferToForecast, _transferToItemReq);

        return quoteTransfer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transferItemsToItemReq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Transfers the specified <c>SalesQuotationLine</c> record to a <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_salesQuotationTable">The <c>SalesQuotationLine</c> used to create the <c>SalesLine</c>.</param>
    /// <param name = "_sqtr">An instance of <c>SalesQuotationTransferToProject</c>.</param>
    public static void transferItemsToItemReq(SalesQuotationTable _salesQuotationTable,
                                              SalesQuotationTransferToProject _sqtr = null)
    {
        SalesQuotationLine      salesQuotationLine;
        SalesLine               salesLine;
        boolean                 ok = false;
        Map                     activityMap;

        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            activityMap = _sqtr.parmActivityNumberMapping();
        }

        salesQuotationLine.selectForUpdate(true);
        while select salesQuotationLine
                where salesQuotationLine.QuotationId==_salesQuotationTable.QuotationId &&
                    salesQuotationLine.ProjTransType==QuotationProjTransType::Item &&
                    salesQuotationLine.Transferred2ItemReq==NoYes::No &&
                    salesQuotationLine.SalesQty
        {
            try
            {
                EventHandlerRejectResult result = EventHandlerRejectResult::newSingleResponse();
                SalesQuotationTransferToProject::mustTransferItemToItemReqDelegate(salesQuotationLine, result);
                if (!result.isRejected())
                {
                    if (!salesQuotationLine.checkInventDim())
                    {
                        throw error("@SYS319221");
                    }

                    SalesQuotationTransferToProject::createItemReqfromItem(salesQuotationLine, activityMap, _sqtr);

                    SalesQuotationTransferToProject::updateSalesQuotationLineAsTransferredToItemReq(salesQuotationLine);

                    ok = true;
                }
            }

            catch (Exception::Error)
            {
                checkFailed("@SYS18447");
            }
        }

        // Update Sales Quotation so it points to the right Sales Order
        if (ok)
        {
            _salesQuotationTable.selectForUpdate(true);
            _salesQuotationTable.TransferredToItemReq = NoYes::Yes;
            _salesQuotationTable.SalesIdRef = _salesQuotationTable.salesTable_ItemReq().SalesId;
            _salesQuotationTable.doUpdate();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustTransferItemToItemReqDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// A delegate for determining whether to transfer the specified <c>SalesQuotationLine</c> record to a <c>SalesLine</c> record.
    /// </summary>
    /// <param name = "_salesQuotationLine">The <c>SalesQuotationLine</c> used to create the <c>SalesLine</c>.</param>
    /// <param name = "_result">An <c>EventHandlerRejectResult</c> object which determines whether to transfer the line.</param>
    static delegate void mustTransferItemToItemReqDelegate(SalesQuotationLine _salesQuotationLine, EventHandlerRejectResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createItemReqFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesLine</c> record based on the specified <c>SalesQuotationLine</c>.
    /// </summary>
    /// <param name = "_salesQuotationLine">The <c>SalesQuotationLine</c> used to create the <c>SalesLine</c>.</param>
    /// <param name = "_activityMap">Map of activity numbers.</param>
    /// <param name = "_sqtr">The <c>SalesQuotationTransferToProject</c> used to create the <c>SalesLine</c>.</param>
    static void createItemReqFromItem(SalesQuotationLine _salesQuotationLine, Map _activityMap, SalesQuotationTransferToProject _sqtr)
    {
        boolean isKittingEnabled = FeatureStateProvider::IsFeatureEnabled(KittingFeature::instance());
        if (isConfigurationkeyEnabled(configurationKeyNum(Project)))
        {
            smmActivityNumber activityNumber;
            if (_sqtr.parmTransferActivityInfo())
            {
                if (_salesQuotationLine.ProjActivity &&
                            _activityMap &&
                            _activityMap.exists(_salesQuotationLine.ProjActivity))
                {
                    activityNumber = _activityMap.lookup(_salesQuotationLine.ProjActivity);
                }
            }
            
            SalesLine salesLine = SalesQuotationTransferToProject::createProjectItemReqfromItem(_salesQuotationLine, activityNumber);
            if (isKittingEnabled && SalesQuotationTransferToProject::kittingCanTransferToProject(_salesQuotationLine))
            {
                SalesQuotationTransferToProject::kittingUpdatePartsFromSalesQuotation_delegate(salesLine, _salesQuotationLine);
            }
        }
        else
        {
            SalesLine salesLine = SalesQuotationTransferToProject::createNonProjectItemReqfromItem(_salesQuotationLine);
            if (isKittingEnabled && SalesQuotationTransferToProject::kittingCanTransferToProject(_salesQuotationLine))
            {
                SalesQuotationTransferToProject::kittingUpdatePartsFromSalesQuotation_delegate(salesline, _salesQuotationLine);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProjectItemReqFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesLine</c> record based on the specified <c>SalesQuotationLine</c> in case Project is enabled.
    /// </summary>
    /// <param name = "_salesQuotationLine">
	/// The <c>SalesQuotationLine</c> used to create the <c>SalesLine</c>.
	/// </param>
    /// <param name = "_activityNumber">
	/// The activity number.
	/// </param>
    /// <returns>
    /// The created <c>SalesLine></c> record.
	/// </returns>
    static SalesLine createProjectItemReqFromItem(SalesQuotationLine _salesQuotationLine, smmActivityNumber _activityNumber)
    {
        SalesLine salesLine;
        salesLine.createFromSalesQuotationLine(_salesQuotationLine, _activityNumber);
        return SalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createNonProjectItemReqFromItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a <c>SalesLine</c> record based on the specified <c>SalesQuotationLine</c> in case Project is not enabled.
    /// </summary>
    /// <param name = "_salesQuotationLine">
	/// The <c>SalesQuotationLine</c> used to create the <c>SalesLine</c>.
	/// </param>
    /// <returns>
	/// The created <c>SalesLine</c> record.
	/// </returns>
    static SalesLine createNonProjectItemReqFromItem(SalesQuotationLine _salesQuotationLine)
    {
        SalesLine salesLine;
        salesLine.createFromSalesQuotationLine(_salesQuotationLine);
        return SalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSalesQuotationLineAsTransferredToItemReq</Name>
				<Source><![CDATA[
    /// <summary>
    /// Marks the specified <c>SalesQuotationLine</c> as transferred to itemReq.
    /// </summary>
    /// <param name = "_salesQuotationLine">The <c>SalesQuotationLine</c> to update.</param>
    static void updateSalesQuotationLineAsTransferredToItemReq(SalesQuotationLine _salesQuotationLine)
    {
        _salesQuotationLine.Transferred2ItemReq = NoYes::Yes;
        _salesQuotationLine.doUpdate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCanTransferToProject_delegate</Name>
				<Source><![CDATA[
    static delegate void kittingCanTransferToProject_delegate(SalesQuotationLine _salesQuotationLine, EventHandlerResult _eventHandlerResult)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingCanTransferToProject</Name>
				<Source><![CDATA[
    /// <summary>
    /// Helper method to invoke the kitting delegate kittingCanTransferToProject_delegate
    /// </summary>
    /// <param name = "_salesQuotationLine">SalesQuotationLine being checked</param>
    /// <returns>True if delete allowed</returns>
    protected static boolean kittingCanTransferToProject(SalesQuotationLine _salesQuotationLine)
    {
        EventHandlerResult resultValue = new EventHandlerResult();
        SalesQuotationTransferToProject::kittingCanTransferToProject_delegate(_salesQuotationLine, resultValue);
        return !resultValue.hasResult() || resultValue.booleanResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>kittingUpdatePartsFromSalesQuotation_delegate</Name>
				<Source><![CDATA[
    static delegate void kittingUpdatePartsFromSalesQuotation_delegate(Common _targetLine, SalesQuotationLine _line)
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>