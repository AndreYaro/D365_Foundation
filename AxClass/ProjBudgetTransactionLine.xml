<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjBudgetTransactionLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjBudgetTransactionLine</c> class is used to hold the transaction information about the
///    journal or document line.
/// </summary>
class ProjBudgetTransactionLine
{
    ProjTransIdBase projTransIdBase;
    CostAmount      costAmount;
    SalesAmount     salesAmount;
    InventQty       quantity;
    RefRecId        sourceDocumentLine;

    private ProjBudget projBudget;
    private ProjBudgetLine projBudgetLineCost, projBudgetLineRevenue;
    private ProjBudgetAllocationLine projBudgetAllocationLineCost, projBudgetAllocationLineRevenue;
    private ProjBudgetReductionHistory projBudgetReductionHistory;
    private ProjOpsFinancialsLogger logger;
    private ExchRate exchRate;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>activityNumber</Name>
				<Source><![CDATA[
    /// <summary>
    /// Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    /// An empty string.
    /// </returns>
    public ProjActivityNumber activityNumber()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>categoryId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    ///    The category ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method is not overridden.
    /// </exception>
    public ProjCategoryId categoryId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    ///    The cost amount.
    /// </returns>
    /// <remarks>
    ///    The amount must be of the <c>AmountCurr</c> data type.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The method is not overridden.
    /// </exception>
    public CostAmount costAmount()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>costAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    ///    The currency code of the cost amount.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method is not overridden.
    /// </exception>
    public CurrencyCode costAmountCurrencyCode()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>linePropertyId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    ///    The Line Property ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method is not overridden.
    /// </exception>
    public ProjLinePropertyId linePropertyId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        sourceDocumentLine = 0;
        logger = ProjOpsFinancialsLogger::createLogger(classStr(ProjBudgetTransactionLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCostAmount</Name>
				<Source><![CDATA[
    public CostAmount parmCostAmount(CostAmount _costAmount = costAmount)
    {
        costAmount = _costAmount;

        return costAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmQty</Name>
				<Source><![CDATA[
    public InventQty parmQty(InventQty _quantity = quantity)
    {
        quantity = _quantity;

        return quantity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSalesAmount</Name>
				<Source><![CDATA[
    public SalesAmount parmSalesAmount(SalesAmount _salesAmount = salesAmount)
    {
        salesAmount = _salesAmount;

        return salesAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceDocumentLine</Name>
				<Source><![CDATA[
    public RefRecId parmSourceDocumentLine(RefRecId _sourceDocumentLine = sourceDocumentLine)
    {
        sourceDocumentLine = _sourceDocumentLine;

        return sourceDocumentLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransIdRef</Name>
				<Source><![CDATA[
    public ProjTransIdBase parmTransIdRef(ProjTransIdBase _projTransIdBase = projTransIdBase)
    {
        projTransIdBase = _projTransIdBase;

        return _projTransIdBase;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExchRate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the <c>ExchRate</c> of the selected record.
    /// </summary>
    /// <param name = "_exchRate">A <c>ExchRate</c> field value.</param>
    /// <returns>Returns <c>ExchRate</c> field value</returns>
    [Hookable(false), Wrappable(false)]
    internal ExchRate parmExchRate(ExchRate _exchRate = exchRate)
    {
        exchRate = _exchRate;

        return _exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBudget</Name>
				<Source><![CDATA[
    public ProjBudget parmProjBudget(ProjBudget _projBudget = projBudget)
    {
        projBudget = _projBudget;

        return _projBudget;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBudgetLineCost</Name>
				<Source><![CDATA[
    public ProjBudgetLine parmProjBudgetLineCost(ProjBudgetLine _projBudgetLineCost = projBudgetLineCost)
    {
        projBudgetLineCost = _projBudgetLineCost;

        return _projBudgetLineCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBudgetLineRevenue</Name>
				<Source><![CDATA[
    public ProjBudgetLine parmProjBudgetLineRevenue(ProjBudgetLine _projBudgetLineRevenue = projBudgetLineRevenue)
    {
        projBudgetLineRevenue = _projBudgetLineRevenue;

        return _projBudgetLineRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBudgetAllocationLineCost</Name>
				<Source><![CDATA[
    public ProjBudgetAllocationLine parmProjBudgetAllocationLineCost(ProjBudgetAllocationLine _projBudgetAllocationLineCost = projBudgetAllocationLineCost)
    {
        projBudgetAllocationLineCost = _projBudgetAllocationLineCost;

        return _projBudgetAllocationLineCost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBudgetAllocationLineRevenue</Name>
				<Source><![CDATA[
    public ProjBudgetAllocationLine parmProjBudgetAllocationLineRevenue(ProjBudgetAllocationLine _projBudgetAllocationLineRevenue = projBudgetAllocationLineRevenue)
    {
        projBudgetAllocationLineRevenue = _projBudgetAllocationLineRevenue;

        return _projBudgetAllocationLineRevenue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProjBudgetReductionHistory</Name>
				<Source><![CDATA[
    public ProjBudgetReductionHistory parmProjBudgetReductionHistory(ProjBudgetReductionHistory _projBudgetReductionHistory = projBudgetReductionHistory)
    {
        projBudgetReductionHistory = _projBudgetReductionHistory;

        return _projBudgetReductionHistory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    ///    The project ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method is not overridden.
    /// </exception>
    public ProjId projId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    ///    The sales amount.
    /// </returns>
    /// <remarks>
    ///    The amount must be of the <c>AmountCurr</c> data type.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The method is not overridden.
    /// </exception>
    public SalesAmount salesAmount()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesAmountCurrencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    ///    The currency code of the sales amount.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method is not overridden.
    /// </exception>
    public CurrencyCode salesAmountCurrencyCode()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    ///    The transaction date.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method is not overridden.
    /// </exception>
    public TransDate transDate()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    ///    The transaction ID.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method is not overridden.
    /// </exception>
    public ProjTransIdBase transId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Throws an exception if this method is not overridden.
    /// </summary>
    /// <returns>
    ///    The transaction type.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    The method is not overridden.
    /// </exception>
    public ProjTransType transType()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of a specific transaction line class.
    /// </summary>
    /// <param name="_buffer">
    ///    A table buffer for which the <c>ProjBudgetTransactionLine</c> object is to be constructed.
    /// </param>
    /// <returns>
    ///    A new instance of the <c>ProjBudgetTransactionLine</c> class.
    /// </returns>
    public static ProjBudgetTransactionLine construct(Common _buffer)
    {
        ProjBudgetTransactionLine           retProjBudgetTransactionLine;
        ProjJournalTrans                    projJournalTrans;
        ProjBegBalJournalTrans_CostSales    projBegBalJournalTrans_CostSales;

        switch (_buffer.TableId)
        {
            case tableNum(PurchReqLine):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_PurchReq(_buffer);
                break;

            case tableNum(PurchLine):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_PurchOrder(_buffer);
                break;

            case tableNum (ProjEmplTrans):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_HourTrans(_buffer);
                break;

            case tableNum (ProjItemTrans):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_ItemTrans(_buffer);
                break;

            case tableNum (TmpProjAdjustmentCreate):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_AdjCreate(_buffer);
                break;

            case tableNum (ProjRevenueTrans):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_RevenueTrans(_buffer);
                break;

            case tableNum (ProjCostTrans):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_ExpenseTrans(_buffer);
                break;

            case tableNum(ProjJournalTrans):
                projJournalTrans = _buffer as ProjJournalTrans;
                if (ProjCategory::find(projJournalTrans.CategoryId).CategoryType == ProjCategoryType::Hour)
                {
                    retProjBudgetTransactionLine = new ProjBudgetTransactionLine_HourJournal(projJournalTrans);
                }
                else
                {
                    retProjBudgetTransactionLine = new ProjBudgetTransactionLine_RevenueJournal(projJournalTrans);
                }
                break;

            case tableNum(InventJournalTrans):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_ItemJournal(_buffer);
                break;

            case tableNum(LedgerJournalTrans):
            case tableNum(LedgerJournalTrans_Project):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_ExpenseJournal(_buffer);
                break;

            case tableNum(ProdTable):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_Production(_buffer);
                break;

            case tableNum(ProdRouteProj):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_HourProdLine(_buffer);
                break;

            case tableNum(ProdBOM):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_ItemProdLine(_buffer);
                break;

            case tableNum(SalesLine):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_SalesOrder(_buffer);
                break;

            case tableNum(ProjBegBalJournalTrans_CostSales):
                projBegBalJournalTrans_CostSales = _buffer as ProjBegBalJournalTrans_CostSales;
                
                switch (projBegBalJournalTrans_CostSales.ProjTransType)
                {
                    case BegBalProjTransTypeCost::Hour  :
                        retProjBudgetTransactionLine = new ProjBudgetTransactionLine_BegBalHour(_buffer);
                        break;
                    case BegBalProjTransTypeCost::Cost :
                        retProjBudgetTransactionLine = new ProjBudgetTransactionLine_BegBalCost(_buffer);
                        break;
                    case  BegBalProjTransTypeCost::Item :
                        retProjBudgetTransactionLine = new ProjBudgetTransactionLine_BegBalItem(_buffer);
                        break;

                    default:
                        retProjBudgetTransactionLine = ProjBudgetTransactionLine::getProjBudgetTransactionLine_CustomType(_buffer);
                        break;
                }
                break;

            case tableNum(ProjBegBalJournalTrans_Fee):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_BegBalFee(_buffer);
                break;

            case tableNum(ProjProposalEmplDetail):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_ProposalEmpl(_buffer);
                break;

            case tableNum(ProjProposalCostDetail):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_ProposalCost(_buffer);
                break;

            case tableNum(ProjProposalItemDetail):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_ProposalItem(_buffer);
                break;

            case tableNum(ProjCostTransSale):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_CostTransSale(_buffer);
                break;

            case tableNum(ProjEmplTransSale):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_EmplTransSale(_buffer);
                break;

            case tableNum(ProjItemTransSale):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_ItemTransSale(_buffer);
                break;

            case tableNum(TSTimesheetTrans):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_Timesheet(_buffer);
                break;

            case tableNum(CustPackingSlipTrans):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_PackingSlip(_buffer);
                break;

            case tableNum(ProjProposalItem):
                retProjBudgetTransactionLine = new ProjBudgetTransactionLine_ProposalSale(_buffer);
                break;

            default :
                throw error(strFmt("@SYS23396",funcName()));
        }

        return retProjBudgetTransactionLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjBudgetTransactionLine_CustomType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>ProjBudgetTransactionLine</c> class
    /// </summary>
    /// <param name="_projBegBalJournalTrans_CostSales">
    ///    A <c>projBegBalJournalTrans_CostSales</c> buffer.
    /// </param>
    /// <returns>  A new instance of <c>ProjBudgetTransactionLine</c> </returns>
    protected static ProjBudgetTransactionLine getProjBudgetTransactionLine_CustomType(ProjBegBalJournalTrans_CostSales _projBegBalJournalTrans_CostSales)
    {
        return null;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasChanged</Name>
				<Source><![CDATA[
    public static boolean hasChanged(Common _old, Common _new)
    {
        ProjBudgetTransactionLine    oldProjBudgetTransactionLine;
        ProjBudgetTransactionLine    newProjBudgetTransactionLine;
        boolean                      ret;

        oldProjBudgetTransactionLine = ProjBudgetTransactionLine::construct(_old);
        newProjBudgetTransactionLine = ProjBudgetTransactionLine::construct(_new);

        if (oldProjBudgetTransactionLine.categoryId() != newProjBudgetTransactionLine.categoryId()
         || oldProjBudgetTransactionLine.costAmount() != newProjBudgetTransactionLine.costAmount()
         || oldProjBudgetTransactionLine.costAmountCurrencyCode() != newProjBudgetTransactionLine.costAmountCurrencyCode()
         || oldProjBudgetTransactionLine.projId() != newProjBudgetTransactionLine.projId()
         || oldProjBudgetTransactionLine.salesAmount() != newProjBudgetTransactionLine.salesAmount()
         || oldProjBudgetTransactionLine.salesAmountCurrencyCode() != newProjBudgetTransactionLine.salesAmountCurrencyCode()
         || oldProjBudgetTransactionLine.transDate() != newProjBudgetTransactionLine.transDate()
         || oldProjBudgetTransactionLine.transId() != newProjBudgetTransactionLine.transId()
         || oldProjBudgetTransactionLine.transType() != newProjBudgetTransactionLine.transType())
        {
            ret = true;
        }
        else
        {
            ret = false;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetInformation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the budget information on the <c>ProjBudgetTransactionLine</c> instance.
    /// </summary>
    /// <param name="_budgetProjId">
    ///    ProjId of the project used for budgeting.
    /// </param>
    public void setBudgetInformation(ProjId _budgetProjId)
    {
        this.parmProjBudgetReductionHistory(ProjBudgetReductionHistory::findByProjTransId(this.transId()));
        this.setBudgetAllocationInformation(_budgetProjId, ProjBudgetLineType::Cost);
        this.setBudgetAllocationInformation(_budgetProjId, ProjBudgetLineType::Revenue);
        this.setBudgetLineInformation(ProjBudgetLineType::Cost);
        this.setBudgetLineInformation(ProjBudgetLineType::Revenue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetAllocationInformation</Name>
				<Source><![CDATA[
    private void setBudgetAllocationInformation(ProjId _budgetProjId, ProjBudgetLineType _projBudgetLineType)
    {
        ProjBudgetAllocationLine budgetAllocationLine = this.getCurrentPeriodBudget(
            _budgetProjId,
            _projBudgetLineType,
            this.transDate(),
            this.categoryId(),
            this.activityNumber());

        ProjBudgetReductionHistory budgetReductionHistory = this.parmProjBudgetReductionHistory();

        RefRecId historyAllocationLineId = 0;
        if (budgetReductionHistory)
        {
            if (_projBudgetLineType == ProjBudgetLineType::Cost)
            {
                historyAllocationLineId = budgetReductionHistory.ProjBudgetAllocationLineIdCost;
            }
            else
            {
                historyAllocationLineId = budgetReductionHistory.ProjBudgetAllocationLineIdSales;
            }
        }

        if (budgetAllocationLine && historyAllocationLineId)
        {
            str expectedValue = int642Str(budgetAllocationLine.RecId);

            if (budgetAllocationLine.RecId != historyAllocationLineId)
            {
                // The allocation line in history can be valid if it is for the same category
                if (this.activityNumber())
                {
                    // Get current allocation line without Activity number
                    ProjBudgetAllocationLine allocationLineNoActivity = this.getCurrentPeriodBudget(
                        _budgetProjId,
                        _projBudgetLineType,
                        this.transDate(),
                        this.categoryId(),
                         '');

                    if (allocationLineNoActivity)
                    {
                        expectedValue = strFmt('%1 or %2', expectedValue, allocationLineNoActivity.RecId);

                        if (allocationLineNoActivity.RecId == historyAllocationLineId)
                        {
                            // Allocation line in history is valid
                            if (_projBudgetLineType == ProjBudgetLineType::Cost)
                            {
                                this.parmProjBudgetAllocationLineCost(allocationLineNoActivity);
                                logger.logInformation(strFmt('Using ProjBudgetAllocationLineIdCost value found in ProjBudgetReductionHistory: TransId: %1, RecId: %2, ProjBudgetAllocationLineIdCost: %3, Expected value: %4.',
                                this.transId(), budgetReductionHistory.RecId, historyAllocationLineId, budgetAllocationLine.RecId));
                            }
                            else
                            {
                                this.parmProjBudgetAllocationLineRevenue(allocationLineNoActivity);
                                logger.logInformation(strFmt('Using ProjBudgetAllocationLineIdSales value found in ProjBudgetReductionHistory: TransId: %1, RecId: %2, ProjBudgetAllocationLineIdSales: %3, Expected value: %4.',
                                this.transId(), budgetReductionHistory.RecId, historyAllocationLineId, budgetAllocationLine.RecId));
                            }
                        }
                    }
                }
            }
            else
            {
                // Allocation line in history = expected allocation line
                if (_projBudgetLineType == ProjBudgetLineType::Cost)
                {
                    this.parmProjBudgetAllocationLineCost(budgetAllocationLine);
                }
                else
                {
                    this.parmProjBudgetAllocationLineRevenue(budgetAllocationLine);
                }
            }

            // Allocation line in history is invalid
            if (_projBudgetLineType == ProjBudgetLineType::Cost && !this.parmProjBudgetAllocationLineCost())
            {
                // Assign expected allocation line and log error
                this.parmProjBudgetAllocationLineCost(budgetAllocationLine);
                logger.logError(strFmt('Invalid ProjBudgetAllocationLineIdCost value in ProjBudgetReductionHistory: TransId: %1, RecId: %2, Current value: %3, Expected value: %4.',
                    this.transId(), budgetReductionHistory.RecId, historyAllocationLineId, expectedValue));
            }
            else if (_projBudgetLineType == ProjBudgetLineType::Revenue && !this.parmProjBudgetAllocationLineRevenue())
            {
                // Assign expected allocation line and log error
                this.parmProjBudgetAllocationLineRevenue(budgetAllocationLine);
                logger.logError(strFmt('Invalid ProjBudgetAllocationLineIdSales value in ProjBudgetReductionHistory: TransId: %1, RecId: %2, Current value: %3, Expected value: %4.',
                    this.transId(), budgetReductionHistory.RecId, historyAllocationLineId, expectedValue));
            }
        }
        else if (budgetAllocationLine)
        {
            // No reduction history
            if (_projBudgetLineType == ProjBudgetLineType::Cost)
            {
                this.parmProjBudgetAllocationLineCost(budgetAllocationLine);
            }
            else
            {
                this.parmProjBudgetAllocationLineRevenue(budgetAllocationLine);
            }
        }
        else if (historyAllocationLineId)
        {
            // Allocation line in history is invalid
            if (_projBudgetLineType == ProjBudgetLineType::Cost)
            {
                logger.logError(
                    strFmt('Invalid ProjBudgetAllocationLineIdCost value in ProjBudgetReductionHistory: RecId: %1, Current value: %2, no expected value.',
                    budgetReductionHistory.RecId, historyAllocationLineId));
            }
            else
            {
                logger.logError(
                    strFmt('Invalid ProjBudgetAllocationLineIdSales value in ProjBudgetReductionHistory: RecId: %1, Current value: %2, no expected value.',
                    budgetReductionHistory.RecId, historyAllocationLineId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetLineInformation</Name>
				<Source><![CDATA[
    private void setBudgetLineInformation(ProjBudgetLineType _projBudgetLineType)
    {
        RefRecId budgetLineRecId;
        if (_projBudgetLineType == ProjBudgetLineType::Cost)
        {
            if (!this.parmProjBudgetAllocationLineCost())
            {
                return;
            }

            budgetLineRecId = this.parmProjBudgetAllocationLineCost().ProjBudgetLine;
        }

        if (_projBudgetLineType == ProjBudgetLineType::Revenue)
        {
            if (!this.parmProjBudgetAllocationLineRevenue())
            {
                return;
            }

            budgetLineRecId = this.parmProjBudgetAllocationLineRevenue().ProjBudgetLine;
        }

        ProjBudget budget;
        ProjBudgetLine budgetLine;

        select budget
            join budgetLine
                where budgetLine.ProjBudget == budget.RecId
                && budgetLine.RecId == budgetLineRecId
                && budget.BudgetState != ProjBudgetState::Created
                && budgetLine.ProjBudgetLineType == _projBudgetLineType;

        if (budget && budgetLine)
        {
            this.parmProjBudget(budget);
            if (_projBudgetLineType == ProjBudgetLineType::Cost)
            {
                this.parmProjBudgetLineCost(budgetLine);
            }
            else
            {
                this.parmProjBudgetLineRevenue(budgetLine);
            }
        }
        else
        {
            RefRecId allocationLineRecId;
            if (_projBudgetLineType == ProjBudgetLineType::Cost)
            {
                allocationLineRecId = this.parmProjBudgetAllocationLineCost().RecId;
            }
            else
            {
                allocationLineRecId = this.parmProjBudgetAllocationLineRevenue().RecId;
            }

            logger.logError(strFmt('Invalid ProjBudgetLine value in ProjBudgetAllocationLine. RecId: %1, ProjBudgetLine: %2', allocationLineRecId, budgetLineRecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCurrentPeriodBudget</Name>
				<Source><![CDATA[
    private ProjBudgetAllocationLine getCurrentPeriodBudget(
        ProjId _projId,
        ProjBudgetLineType _budgetLineType,
        ProjTransDate _projTransDate,
        ProjCategoryId _projCategoryId,
        ProjActivityNumber _activityNumber)
    {
        ProjBudgetLine projBudgetLine, projBudgetLineLoc;
        ProjBudgetAllocationLine projBudgetAllocationLine, projBudgetAllocationLineLoc;

        FiscalCalendarRecId fiscalCalendarRecId = CompanyInfoHelper::fiscalCalendarRecId();
        FiscalCalendarYear fiscalCalendarYear = FiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId, _projTransDate);
        FiscalCalendarPeriod fiscalCalendarPeriod = LedgerFiscalCalendar::findPeriodByPeriodCodeDate(fiscalCalendarRecId, _projTransDate);

        if ((fiscalCalendarYear || fiscalCalendarPeriod))
        {
            if (_activityNumber)
            {
                select firstonly projBudgetAllocationLine
                join RecId from projBudgetLine
                    where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                        projBudgetLine.ProjId == _projId &&
                        projBudgetLine.CategoryId == _projCategoryId &&
                        projBudgetLine.ProjBudgetLineType == _budgetLineType &&
                        projBudgetLine.ActivityNumber == _activityNumber &&
                        ((projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Yearly && projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId) ||
                        (projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Periods && projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId) ||
                        (projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Quarter && projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                        projBudgetAllocationLine.Quarter == fiscalCalendarPeriod.Quarter));
            }

            if (!projBudgetAllocationLine.RecId)
            {
                select firstonly projBudgetAllocationLine
                join RecId from projBudgetLine
                    where projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                        projBudgetLine.ProjId == _projId &&
                        projBudgetLine.CategoryId == _projCategoryId &&
                        projBudgetLine.ActivityNumber == '' &&
                        projBudgetLine.ProjBudgetLineType == _budgetLineType &&
                        ((projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Yearly && projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId) ||
                        (projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Periods && projBudgetAllocationLine.FiscalCalendarPeriod == fiscalCalendarPeriod.RecId) ||
                        (projBudgetLine.ProjAllocationMethod == ProjAllocationMethod::Quarter && projBudgetAllocationLine.FiscalCalendarYear == fiscalCalendarYear.RecId &&
                        projBudgetAllocationLine.Quarter == fiscalCalendarPeriod.Quarter));
            }
        }

        select firstonly projBudgetAllocationLineLoc
            join RecId, ProjAllocationMethod from  projBudgetLineLoc
                where projBudgetAllocationLineLoc.ProjBudgetLine == projBudgetLineLoc.RecId &&
                      projBudgetLineLoc.ProjId == _projId &&
                      projBudgetLineLoc.CategoryId == _projCategoryId &&
                      projBudgetLineLoc.ProjBudgetLineType == _budgetLineType &&
                      projBudgetLineLoc.ActivityNumber == _activityNumber;

        if (projBudgetLineLoc.ProjAllocationMethod != ProjAllocationMethod::Periods)
        {
            if (!projBudgetAllocationLine)
            {
                select firstonly projBudgetAllocationLine
                join RecId from  projBudgetLine
                    where   projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                            projBudgetLine.ProjId == _projId &&
                            projBudgetLine.CategoryId == _projCategoryId &&
                            projBudgetLine.ProjBudgetLineType == _budgetLineType &&
                            projBudgetLine.ActivityNumber == _activityNumber;
            }

            if (!projBudgetAllocationLine)
            {
                select firstonly projBudgetAllocationLine
                join RecId from  projBudgetLine
                    where   projBudgetAllocationLine.ProjBudgetLine == projBudgetLine.RecId &&
                            projBudgetLine.ProjId == _projId &&
                            projBudgetLine.CategoryId == _projCategoryId &&
                            projBudgetLine.ProjBudgetLineType == _budgetLineType &&
                            projBudgetLine.ActivityNumber == '';
            }
        }

        return projBudgetAllocationLine;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>