<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDepreciationSummaryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetDepreciationSummaryDP</c> class is the data provider for the <c>AssetDepreciationSummary</c> report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(AssetDepreciationSummary)),
    SRSReportParameterAttribute(classStr(AssetDepreciationSummaryContract))
]
public class AssetDepreciationSummaryDP extends SrsReportDataProviderPreProcessTempDB
{
    AssetDepreciationSummaryTmp assetDepreciationSummaryTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetDepreciationSummaryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>AssetDepreciationSummaryTmp</c> record.
    /// </summary>
    /// <returns>
    /// The <c>AssetDepreciationSummaryTmp</c> record.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetDepreciationSummaryTmp))
    ]
    public AssetDepreciationSummaryTmp getAssetDepreciationSummaryTmp()
    {
        select assetDepreciationSummaryTmp;
        return assetDepreciationSummaryTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the results returned by the query and uses <c>AssetSumCalc</c> class to perform calculations.
    /// The results are populated in the <c>AssetDepreciationSummaryTmp</c> table and provided to the report.
    /// </summary>
    public void processReport()
    {
        AssetBook assetBook;
        AssetTable assetTable;
        AssetSumCalc_Trans prev, curr;
        AssetDepreciationSummaryContract contract;
        Range assetIdRange, bookIdRange;
        QueryRun queryRun;
        FromDate fromDate;
        ToDate toDate;
        TransDate acquisitionDate;

        contract = this.parmDataContract() as AssetDepreciationSummaryContract;
        fromDate = contract.parmFromDate();
        toDate = contract.parmToDate();

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            assetBook = queryRun.get(tableNum(AssetBook)) as AssetBook;
            assetTable = queryRun.get(tableNum(AssetTable)) as AssetTable;
            assetIdRange = queryValue(assetTable.AssetId);
            bookIdRange = queryValue(assetBook.BookId);

            acquisitionDate = AssetTrans::findFirstType_W(assetTable.AssetId, assetBook.BookId, AssetTransType::Acquisition).TransDate;

            if (acquisitionDate <= toDate)
            {
                prev = AssetSumCalc_Trans::newAssetPeriod(assetIdRange, bookIdRange, dateNull(), fromDate - 1);

                if (!prev.isScrapped())
                {
                    curr = AssetSumCalc_Trans::newAssetPeriod(assetIdRange, bookIdRange, fromDate, toDate);

                    assetDepreciationSummaryTmp.clear();

                    assetDepreciationSummaryTmp.AssetGroup = assetTable.AssetGroup;
                    assetDepreciationSummaryTmp.AssetId = assetTable.AssetId;
                    assetDepreciationSummaryTmp.CategoryId = assetTable.CategoryId_LV;
                    assetDepreciationSummaryTmp.Name = assetTable.Name;

                    assetDepreciationSummaryTmp.AcquisitionDate = acquisitionDate;
                    assetDepreciationSummaryTmp.BookId = assetBook.BookId;

                    assetDepreciationSummaryTmp.FinancialValuePrev = prev.financialValue();

                    if (curr.isScrapped())
                    {
                        assetDepreciationSummaryTmp.FinancialValueCurr = -assetDepreciationSummaryTmp.FinancialValuePrev;
                        assetDepreciationSummaryTmp.FinancialValueEndb = 0;
                        assetDepreciationSummaryTmp.NetBookValue = 0;
                    }
                    else
                    {
                        assetDepreciationSummaryTmp.FinancialValueCurr = curr.financialValue();
                        assetDepreciationSummaryTmp.FinancialValueEndb = assetDepreciationSummaryTmp.FinancialValuePrev +
                                                                            assetDepreciationSummaryTmp.FinancialValueCurr;
                        assetDepreciationSummaryTmp.NetBookValue = prev.netBookValue() + curr.netBookValue();
                    }

                    assetDepreciationSummaryTmp.DepreciationStart = -prev.depreciation();
                    assetDepreciationSummaryTmp.DepreciationPeriod = -curr.depreciation();
                    assetDepreciationSummaryTmp.DepreciationEnd = assetDepreciationSummaryTmp.DepreciationStart + assetDepreciationSummaryTmp.DepreciationPeriod;

                    assetDepreciationSummaryTmp.insert();
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>