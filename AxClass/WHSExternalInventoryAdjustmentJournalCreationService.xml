<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSExternalInventoryAdjustmentJournalCreationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSExternalInventoryAdjustmentJournalCreationService</c> class is used to create inventory journals based on the <c>WHSExternalInventoryAdjustment</c> records.
/// </summary>
internal final class WHSExternalInventoryAdjustmentJournalCreationService extends SysOperationServiceBase
{
    private WHSExternalInventoryAdjustmentExternalSystemType externalSystemType;
    private WHSExternalInventoryAdjustmentSystemId externalSystemId;
    private JournalNumOfLines maxJournalLineNumber;

    private InventJournalTable journal;

    private WHSInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>execute</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void execute(WHSExternalInventoryAdjustmentJournalCreationContract _contract)
    {
        using (var activityContextExecute = this.instrumentationLogger().externalInventoryAdjustmentJournalCreationServiceActivities().execute())
        {
            this.validateContract(_contract);
            this.initFromContract(_contract);

            JournalNumOfLines currentJournalLinesNumber;

            WHSInventAdjustmentCreate inventAdjustmentCreate = WHSInventAdjustmentCreate::newFromParams(null);
            WHSInventAdjustmentCreateParameters params = WHSInventAdjustmentCreateParameters::construct();

            RecordInsertList externalInventoryAdjustmentArchiveList = new RecordInsertList(tableNum(WHSExternalInventoryAdjustmentArchive));

            WHSExternalInventoryAdjustment externalInventoryAdjustment;

            ttsbegin;

            while select forupdate externalInventoryAdjustment
                order by externalInventoryAdjustment.CreatedDateTime asc, externalInventoryAdjustment.RecId asc
                where externalInventoryAdjustment.ExternalSystemType == externalSystemType
                    && externalInventoryAdjustment.ExternalSystemId == externalSystemId
            {
                using (var activityContextProcessExternalInventoryAdjustment = this.instrumentationLogger().externalInventoryAdjustmentJournalCreationServiceActivities().processExternalInventoryAdjustment())
                {
                    this.instrumentationLogger().externalInventoryAdjustmentJournalCreationServiceActivities().externalInventoryAdjustmentRecId(activityContextProcessExternalInventoryAdjustment, externalInventoryAdjustment.RecId);

                    if (this.isMaxJournalLinesNumberReached(currentJournalLinesNumber))
                    {
                        break;
                    }

                    this.validateExternalInventoryAdjustment(externalInventoryAdjustment);

                    currentJournalLinesNumber++;

                    InventDim journalLineInventDim = this.findOrCreateJournalLineInventDim(externalInventoryAdjustment.InventDimId);

                    this.createMissingInventoryDimensionRecords(externalInventoryAdjustment.ItemNumber, journalLineInventDim);
                    this.initInventAdjustmentParameters(params, journalLineInventDim.InventDimId, externalInventoryAdjustment, currentJournalLinesNumber);

                    InventTransId inventJournalTransInventTransId = inventAdjustmentCreate.createJournalLineHandlingQuantityFromParams(params);

                    WHSExternalInventoryAdjustmentArchive externalInventoryAdjustmentArchive;
                    externalInventoryAdjustmentArchive.initFromExternalInventoryAdjustment(externalInventoryAdjustment);
                    externalInventoryAdjustmentArchive.InventJournalTransInventTransId = inventJournalTransInventTransId;
                    externalInventoryAdjustmentArchiveList.add(externalInventoryAdjustmentArchive);

                    using (var activityContextDeleteExternalInventoryAdjustment = this.instrumentationLogger().externalInventoryAdjustmentJournalCreationServiceActivities().deleteExternalInventoryAdjustment())
                    {
                        externalInventoryAdjustment.delete();
                    }
                }
            }

            if (currentJournalLinesNumber)
            {
                using (var activityContextInsertExternalInventoryAdjustmentArchiveList = this.instrumentationLogger().externalInventoryAdjustmentJournalCreationServiceActivities().insertExternalInventoryAdjustmentArchiveList())
                {
                    externalInventoryAdjustmentArchiveList.insertDatabase();
                }
                this.updateJournalNumberOfLines(currentJournalLinesNumber);
            }

            ttscommit;

            if (currentJournalLinesNumber)
            {
                info(strFmt("@WAX:WHSExternalInventoryAdjustmentJournalCreationService_NumberOfCreatedJournalLines", currentJournalLinesNumber));
            }
            else
            {
                info("@WAX:WHSExternalInventoryAdjustmentJournalCreationService_NoJournalCreated");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateContract</Name>
				<Source><![CDATA[
    private void validateContract(WHSExternalInventoryAdjustmentJournalCreationContract _contract)
    {
        if (_contract.parmMaxJournalLineNumber() <= 0)
        {
            throw error("@WAX:WHSExternalInventoryAdjustmentJournalCreationContractMaxJournalLineNumberZeroNegative_Error");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromContract</Name>
				<Source><![CDATA[
    private void initFromContract(WHSExternalInventoryAdjustmentJournalCreationContract _contract)
    {
        externalSystemType = _contract.parmExternalSystemType();
        externalSystemId = _contract.parmExternalSystemId();
        maxJournalLineNumber = _contract.parmMaxJournalLineNumber();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isMaxJournalLinesNumberReached</Name>
				<Source><![CDATA[
    private boolean isMaxJournalLinesNumberReached(JournalNumOfLines _currentJournalLinesNumber)
    {
        return _currentJournalLinesNumber >= maxJournalLineNumber;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateExternalInventoryAdjustment</Name>
				<Source><![CDATA[
    private void validateExternalInventoryAdjustment(WHSExternalInventoryAdjustment _externalInventoryAdjustment)
    {
        this.validateCatchWeightItem(_externalInventoryAdjustment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightItem</Name>
				<Source><![CDATA[
    private void validateCatchWeightItem(WHSExternalInventoryAdjustment _externalInventoryAdjustment)
    {
        if (PdsGlobal::pdsIsCWItem(_externalInventoryAdjustment.ItemNumber))
        {
            UnitOfMeasureSymbol inventoryUOM = InventTableModule::find(_externalInventoryAdjustment.ItemNumber, ModuleInventPurchSales::Invent).UnitId;

            if (_externalInventoryAdjustment.WeightUnitId != inventoryUOM)
            {
                throw error(strFmt("@WAX:WHSExternalInventoryAdjustmentJournalCreationServiceWeightUnitMismatch", _externalInventoryAdjustment.WeightUnitId, inventoryUOM));
            }

            WHSCatchWeightHelper::validateCatchWeightQuantity(
                _externalInventoryAdjustment.ItemNumber,
                _externalInventoryAdjustment.InventDimId,
                _externalInventoryAdjustment.Quantity,
                _externalInventoryAdjustment.QuantityUnitId,
                _externalInventoryAdjustment.Weight,
                _externalInventoryAdjustment.WeightUnitId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>journal</Name>
				<Source><![CDATA[
    private InventJournalTable journal()
    {
        if (!journal.RecId)
        {
            this.createJournal();
        }

        return journal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createJournal</Name>
				<Source><![CDATA[
    private void createJournal()
    {
        this.initJournalTable(journal);
        journal.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateJournalLineInventDim</Name>
				<Source><![CDATA[
    private InventDim findOrCreateJournalLineInventDim(InventDimId _externalInventoryAdjustmentInventDimId)
    {
        InventDim journalLineInventDim = InventDim::find(_externalInventoryAdjustmentInventDimId);

        if (!journalLineInventDim.InventStatusId)
        {
            journalLineInventDim.InventStatusId = InventLocation::find(journalLineInventDim.InventLocationId).DefaultStatusId;
            journalLineInventDim = InventDim::findOrCreate(journalLineInventDim);
        }

        return journalLineInventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createMissingInventoryDimensionRecords</Name>
				<Source><![CDATA[
    private void createMissingInventoryDimensionRecords(ItemId _itemId, InventDim _inventDim)
    {
        if (_inventDim.inventBatchId
            && !InventBatch::exist(_inventDim.inventBatchId, _itemId))
        {
            InventBatch inventBatch;
            inventBatch.itemId = _itemId;
            inventBatch.inventBatchId = _inventDim.inventBatchId;
            inventBatch.insert();
        }

        if (_inventDim.inventSerialId
            && !InventSerial::exist(_inventDim.inventSerialId, _itemId))
        {
            InventSerial inventSerial;
            inventSerial.ItemId = _itemId;
            inventSerial.InventSerialId = _inventDim.inventBatchId;
            inventSerial.insert();
        }

        if (_inventDim.LicensePlateId
            && !WHSLicensePlate::exist(_inventDim.LicensePlateId))
        {
            WHSLicensePlate licensePlate;
            licensePlate.LicensePlateId = _inventDim.LicensePlateId;
            licensePlate.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initInventAdjustmentParameters</Name>
				<Source><![CDATA[
    private void initInventAdjustmentParameters(
        WHSInventAdjustmentCreateParameters _params,
        InventDimId                         _journalLineInventDimId,
        WHSExternalInventoryAdjustment      _externalInventoryAdjustment,
        JournalNumOfLines                   _currentJournalLinesNumber)
    {
        _params.InventDim                            = InventDim::find(_journalLineInventDimId);
        _params.ItemId                               = _externalInventoryAdjustment.ItemNumber;
        _params.AdjustmentQty                        = _externalInventoryAdjustment.Quantity;
        _params.AdjustmentUnit                       = _externalInventoryAdjustment.QuantityUnitId;
        _params.AdjustmentCatchWeight                = _externalInventoryAdjustment.Weight;
        _params.IsCatchWeight                        = _externalInventoryAdjustment.Weight != 0;
        _params.LineNum                              = _currentJournalLinesNumber;
        _params.InventJournalTable                   = this.journal();
        _params.MustIncludeExistingOnHandCalculation = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalTable</Name>
				<Source><![CDATA[
    private void initJournalTable(InventJournalTable _inventJournalTable)
    {
        InventJournalName journalName = this.retrieveJournalName();

        _inventJournalTable.initFromInventJournalName(journalName);
        _inventJournalTable.initValue();
        _inventJournalTable.Description = "@WAX:WHSExternalInventoryAdjustmentJournalDescription";
        _inventJournalTable.JournalOriginType = InventJournalOriginType::ExternalIntegration;
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveJournalName</Name>
				<Source><![CDATA[
    private InventJournalName retrieveJournalName()
    {
        InventParameters inventParameters = InventParameters::find();
        InventJournalNameLossProfit standardJournalName = InventJournalName::standardJournalName(InventJournalType::LossProfit);
        InventJournalName journalName = InventJournalName::find(standardJournalName);

        if (!journalName)
        {
            throw error("@WAX:WHSExternalInventoryAdjustmentJournalCreationService_NoJournalName_Error");
        }

        return journalName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateJournalNumberOfLines</Name>
				<Source><![CDATA[
    private void updateJournalNumberOfLines(JournalNumOfLines _numberOfLines)
    {
        this.journal().NumOfLines = _numberOfLines;
        this.journal().update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>