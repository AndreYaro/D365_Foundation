<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSWorkCreateMixedLPReceiving</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class WHSWorkCreateMixedLPReceiving extends WhsWorkCreateReceiving
{
    protected WHSWorkCreateId   workCreateId;
    protected WHSLicensePlate   licensePlate;
    protected WHSLicensePlateId licensePlateId;
    protected WHSLoadId         loadId;
    private   boolean           isLoadItemReceiving;
    private   boolean           mustUpdateOutboundLoadLineWorkCreatedQty = true;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>populateTmpWorkLineFromOrder</Name>
				<Source><![CDATA[
    protected void populateTmpWorkLineFromOrder(
        WHSWorkTransType _workTransType,
        InventTransId	 _inventTransId)
    {
        switch (_workTransType)
        {
            case WHSWorkTransType::TransferReceipt:
                InventTransferLine	   transferLine = InventTransferLine::findTransIdShip(_inventTransId);
                TMSInventTransferTable inventTransferTable = TMSInventTransferTable::find(transferLine.TransferId);
    
                tmpWorkLine.OriginType           = WHSOriginType::Load;
                tmpWorkLine.OriginRefId          = transferLine.TransferId;
                tmpWorkLine.OrderNum             = transferLine.TransferId;
                tmpWorkLine.ItemId               = transferLine.ItemId;
                tmpWorkLine.RefTableId           = tableNum(InventTransferLine);
                tmpWorkLine.RefRecId             = transferLine.RecId;
                tmpWorkLine.ToWarehouse          = transferLine.inventTransferTable().InventLocationIdTo;
                tmpWorkLine.CarrierCode          = inventTransferTable.CarrierCode;
                tmpWorkLine.CarrierServiceCode   = inventTransferTable.CarrierServiceCode;
                tmpWorkLine.ModeCode             = inventTransferTable.ModeCode;
                break;

            case WHSWorkTransType::ReturnOrder:
                SalesLine salesLine = SalesLine::findInventTransId(_inventTransId);

                tmpWorkLine.OriginType      = WHSOriginType::ReturnOrder;
                tmpWorkLine.OriginRefId     = salesLine.SalesId;
                tmpWorkLine.OrderNum        = salesLine.SalesId;
                tmpWorkLine.ItemId          = salesLine.ItemId;
                tmpWorkLine.RefTableId      = tableNum(SalesLine);
                tmpWorkLine.RefRecId        = salesLine.RecId;
                tmpWorkLine.TransTxt        = SalesTable::find(salesLine.SalesId).ReturnItemNum;
                tmpWorkLine.CustVendAC      = salesLine.CustAccount;
                break;

            default:
                var inboundTransactionType = WhsWorkTransactionType::singletonFromType(_workTransType) as WHSInboundShipmentWorkTransactionType;
                if (inboundTransactionType)
                {
                    WHSReceiptOrderLine orderLine = inboundTransactionType.receivingOrderProvider().findInventTransId(_inventTransId);
                    TMSPurchTable tmsPurch;
                    if (orderLine is PurchLine)
                    {
                        tmsPurch = TMSPurchTable::find(orderLine.OrderNumber);
                    }

                    tmpWorkLine.OriginType          = orderLine.originType();
                    tmpWorkLine.OriginRefId         = orderLine.OrderNumber;
                    tmpWorkLine.OrderNum            = orderLine.OrderNumber;
                    tmpWorkLine.ItemId              = orderLine.ItemId;
                    tmpWorkLine.RefTableId          = orderLine.TableId;
                    tmpWorkLine.RefRecId            = orderLine.RecId;
                    tmpWorkLine.CarrierCode         = tmsPurch.CarrierCode;
                    tmpWorkLine.CarrierServiceCode  = tmsPurch.CarrierServiceCode;
                    tmpWorkLine.ModeCode            = tmsPurch.ModeCode;
                    tmpWorkLine.CustVendAC          = orderLine.vendAccount();
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMixedLicensePlateReceivingLineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the mixed licence plate receiving line query.
    /// </summary>
    /// <param name = "_mixedLPReceivingTableRecId">The id of the header.</param>
    /// <param name = "_mixedLPLines">The lines table to query.</param>
    /// <param name = "_inventDim">The inventory dimensions table to query.</param>
    /// <returns>The created query.</returns>
    protected SysDaQueryObject buildMixedLicensePlateReceivingLineQuery(
        RefRecId                        _mixedLPReceivingTableRecId,
        WHSMixedLicensePlateReceiptLine _mixedLPLines,
        InventDim                       _inventDim)
    {
        SysDaQueryObject mixedLPReceivingLineQueryObject = new SysDaQueryObject(_mixedLPLines);

        mixedLPReceivingLineQueryObject.whereClause(
            new SysDaEqualsExpression(
                new SysDaFieldExpression(_mixedLPLines, fieldStr(WHSMixedLicensePlateReceiptLine, MixedLPReceivingTable)),
                new SysDaValueExpression(_mixedLPReceivingTableRecId)));

        SysDaQueryObject inventDimQueryObject = new SysDaQueryObject(_inventDim);
        inventDimQueryObject.projection()
            .add(fieldStr(InventDim, InventBatchId))
            .add(fieldStr(InventDim, InventSerialId));
        inventDimQueryObject.whereClause(
            new SysDaEqualsExpression(
                    new SysDaFieldExpression(_inventDim, fieldStr(InventDim, InventDimId)),
                    new SysDaFieldExpression(_mixedLPLines, fieldStr(WHSMixedLicensePlateReceiptLine, InventDimId))));
        
        mixedLPReceivingLineQueryObject.joinClause(SysDaJoinKind::InnerJoin, inventDimQueryObject);

        return mixedLPReceivingLineQueryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateWork</Name>
				<Source><![CDATA[
    internal boolean canCreateWork(WHSMixedLicensePlateReceipt _mixedLicensePlateReceipt)
    {
        boolean ret = true;

        if (this.isReturnReceivingFlow())
        {
            ret = WhsWorkCreateReturnOrder::canCreateWorkForDispositionCode(this.parmDispositionCode());
        }

        ret = ret && this.isWorkAllowedToBeCreatedBasedOnWorkPolicy(_mixedLicensePlateReceipt);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorkAllowedToBeCreatedBasedOnWorkPolicy</Name>
				<Source><![CDATA[
    private boolean isWorkAllowedToBeCreatedBasedOnWorkPolicy(WHSMixedLicensePlateReceipt _mixedLicensePlateReceipt)
    {
        if (WHSDeferredReceivingWorkPolicyFlight::instance().isEnabled())
        {
            WHSRFMenuItemTable rfMenuItem = WHSRFMenuItemTable::find(_mixedLicensePlateReceipt.MenuItemName);

            if(!WHSWorkPolicy::isWorkAllowedToBeCreatedForWorkProcess(_mixedLicensePlateReceipt.WorkTransType,
                    _mixedLicensePlateReceipt.InventLocationId,
                    _mixedLicensePlateReceipt.WMSLocationId,
                    WHSWorkProcessMapper::workCreationProcess2WorkProcess(rfMenuItem.WorkCreationProcess)))
            {
                return false;
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isReturnReceivingFlow</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean isReturnReceivingFlow()
    {
        return this.parmWorkTransType() == WHSWorkTransType::ReturnOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTempTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the temporary work line(s) for mixed license plate registration.
    /// </summary>
    public void createTempTable()
    {
        WHSTmpWorkLine                  tmpTmpWorkLine;
        WHSTmpWorkLine                  findTmpWorkLine;

        tmpTmpWorkLine.setTmp();
        findTmpWorkLine.setTmp();

        isLoadItemReceiving = (loadId != '');

        startLocationId = InventLocation::find(inventLocationId).wmsLocationIdDefaultReceipt;

        ttsBegin;

        WHSMixedLicensePlateReceipt mixedLP = WHSMixedLicensePlateReceipt::findOpenByLicensePlateId(targetLicensePlateId, true);

        this.parmWorkTransType(mixedLP.WorkTransType);
        
        WHSLoadLineInventTransReceiptIdAllocator loadLineInventTransReceiptIdAllocator = WHSLoadLineInventTransReceiptIdAllocator::newFromDispositionCode(dispositionCode);


        if (this.canCreateWork(mixedLP))
        {
            WHSMixedLicensePlateReceiptLine mixedLPLines;
            InventDim inventDim;

            SysDaSearchObject searchObject = new SysDaSearchObject(
                this.buildMixedLicensePlateReceivingLineQuery(
                    mixedLP.RecId,
                    mixedLPLines,
                    inventDim));
        
            SysDaSearchStatement statement = new SysDaSearchStatement();

            while (statement.findNext(searchObject))
            {
                tmpTmpWorkLine.clear();

                // Need this here, instead of else statement below to load ItemId field
                this.populateTmpWorkLineFromOrder(mixedLP.WorkTransType, mixedLPLines.InventTransId);
                tmpTmpWorkLine.data(tmpWorkLine);
   
                workInventDim = InventDim::find(mixedLPLines.InventDimId);
                workInventDim.clearLocationAndBelowDim(tmpTmpWorkLine.ItemId);
                workInventDim = InventDim::findOrCreate(workInventDim);

                // Determine if we need to group with another tmpWorkLine.
                findTmpWorkLine.setTmpData(tmpTmpWorkLine);

                select firstonly findTmpWorkLine
                    where findTmpWorkLine.InventTransId == mixedLPLines.InventTransId
                        && findTmpWorkLine.InventDimId  == workInventDim.InventDimId;

                if (findTmpWorkLine)
                {
                    tmpTmpWorkLine.data(findTmpWorkLine);
                    tmpTmpWorkLine.InventQty += mixedLPLines.InventQty;
                    tmpTmpWorkLine.update();

                    if (this.shouldSetLoadId(mixedLPLines))
                    {
                        loadId = tmpTmpWorkLine.LoadId;
                    }
                }
                else
                {
                    tmpTmpWorkLine.WorkType         = WHSWorkType::Put;
                    tmpTmpWorkLine.WorkTransType    = mixedLP.WorkTransType;
                    tmpTmpWorkLine.WorkCreateId     = workCreateId;
                    tmpTmpWorkLine.InventBatchId    = inventDim.inventBatchId;
                    tmpTmpWorkLine.StartLocationId  = startLocationId;
                    tmpTmpWorkLine.ShipmentId       = mixedLP.ShipmentId;
                    tmpTmpWorkLine.InventTransId    = mixedLPLines.InventTransId;
                    tmpTmpWorkLine.InventQty        = mixedLPLines.InventQty;
                    tmpTmpWorkLine.InventDimId      = workInventDim.InventDimId;
                    tmpTmpWorkLine.InventUnitizeQty = mixedLPLines.InventUnitizeQty;

                    WHSLoadLine relatedLoadLine = this.findAndSetRelatedLoad(mixedLPLines, tmpTmpWorkLine);

                    this.createLoadLineInventoryReceipt(mixedLP, loadLineInventTransReceiptIdAllocator, relatedLoadLine.RecId);

                    tmpTmpWorkLine.LoadId           = loadId;
                    tmpTmpWorkLine.insert();
                }

                this.registerLPItem(mixedLPLines, inventDim, mixedLP.WorkTransType);
            }

            this.initializeCrossDockQuantityAllocation();

            // Use summarized temp lines to create actual tmpWorkLines
            while select tmpTmpWorkLine
            {
                WHSLoadLine relatedLoadLine;

                tmpWorkLine.data(tmpTmpWorkLine);

                tmpWorkLine.LineNum     = 0;
                InventQty qtyToCreateWork  = tmpWorkLine.InventQty;
                tmpWorkLine.InventQty   = 0;
                workInventDim           = InventDim::find(tmpWorkLine.InventDimId);
                tmpWorkLine.InventDimId = '';

                relatedLoadLine = WHSLoadLine::findbyRecId(tmpWorkLine.LoadLineRefRecId, true);

                this.setGlobals();
                WHSWorkBuildId crossDockWorkBuildId = WHSWorkTable::findCrossDockWorkBuildId(targetLicensePlateId);

                if (crossDockWorkBuildId)
                {
                    this.parmWorkCreateId(crossDockWorkBuildId);
                    qtyToCreateWork = this.getWorkCreateQuantityAfterCrossDock(qtyToCreateWork,
                                                                                crossDockWorkBuildId,
                                                                                tmpWorkLine.ItemId,
                                                                                targetLicensePlateId,
                                                                                workInventDim);
                }

                WHSWorkBuildId qualityItemSamplingWorkBuildId = WHSWorkTable::findQualityItemSamplingWorkBuildId(targetLicensePlateId);
                qtyToCreateWork = this.getWorkCreateQuantityAfterQualityItemSampling(qtyToCreateWork,
                                                                                     qualityItemSamplingWorkBuildId,
                                                                                     tmpWorkLine.InventTransId,
                                                                                     targetLicensePlateId,
                                                                                     workInventDim);

                tmpWorkLine.WorkCreateId = workCreateId;

                if (qtyToCreateWork > 0)
                {
                    this.createTempLine(tmpWorkLine, qtyToCreateWork);
                }

                if (this.mustUpdateLoadLineWorkCreatedQty())
                {
                    this.updateLoadLineWorkCreatedQty(relatedLoadLine);
                }
            }
        
        }
        else

        {
            this.registerLPItems(mixedLP, mixedLP.WorkTransType, loadLineInventTransReceiptIdAllocator);
        }

        loadLineInventTransReceiptIdAllocator.allocationComplete();

        mixedLP.MixedLPComplete = NoYes::Yes;
        mixedLP.WorkCreateId    = workCreateId;
        mixedLP.update();

        ttsCommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createLoadLineInventoryReceipt</Name>
				<Source><![CDATA[
    private void createLoadLineInventoryReceipt(
        WHSMixedLicensePlateReceipt                 _mixedLicensePlateReceipt,
        WHSLoadLineInventTransReceiptIdAllocator    _loadLineInventTransReceiptIdAllocator,
        WHSLoadLineRefRecId                         _loadLineRecId)
    {
        if (this.mustCreateLoadLineInventoryReceipts(_mixedLicensePlateReceipt, _loadLineRecId))
        {
            WhsLoadLineInventoryReceiptId newLoadLineInventoryReceiptId = _loadLineInventTransReceiptIdAllocator.allocateReceiptId(_loadLineRecId);

            this.parmLoadLineInventoryReceiptId(newLoadLineInventoryReceiptId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCreateLoadLineInventoryReceipts</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustCreateLoadLineInventoryReceipts(WHSMixedLicensePlateReceipt _mixedLicensePlateReceipt, WHSLoadLineRefRecId _loadLineRecId)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustFindAndSetRelatedLoadWithoutWorkCreation</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustFindAndSetRelatedLoadWithoutWorkCreation(WHSMixedLicensePlateReceipt _mixedLicensePlateReceipt)
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processTempTable</Name>
				<Source><![CDATA[
    public WHSWorkBuildId processTempTable()
    {
        WHSWorkBuildId workBuildId = super();

        // Combine similar cross docking work for a work created ID.
        WhsWorkCreateLP::combineLikeWork(workBuildId);

        return workBuildId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findAndSetRelatedLoad</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal WHSLoadLine findAndSetRelatedLoad(WHSMixedLicensePlateReceiptLine _mixedLPLine, WHSTmpWorkLine _tmpWorkLine)
    {
        WHSLoadLine loadLine = this.findRelatedLoadLineForMixedLPLine(_mixedLPLine);
        this.setRelatedLoad(_mixedLPLine, _tmpWorkLine, loadLine);


        return loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedLoadLineForMixedLPLine</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal WHSLoadLine findRelatedLoadLineForMixedLPLine(WHSMixedLicensePlateReceiptLine _mixedLPLine)
    {
        WHSLoadLine loadLine;

        SysDaFindObject qf = new SysDaFindObject(
        this.buildQueryForLoadLineUpdateWorkCreatedQty(loadId, loadLine, _mixedLPLine));

        new SysDaFindStatement().executeQuery(qf);

        if (!loadLine
            && this.shouldSetLoadIdForPOReceiving(_mixedLPLine))
        {
            PurchLine orderLine = PurchLine::findInventTransId(_mixedLPLine.InventTransId);
            loadLine = WhsAutoCreateLoadLinePurch::newFromBuffer(orderLine, true)
                .autoCreateInboundLoadLine(orderLine, InventTransType::Purch);

            if (!loadLine)
            {
                throw error("@WAX:POReceiving_CannotReceiveWithoutLoad");
            }
        }

        return loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRelatedLoad</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal void setRelatedLoad(WHSMixedLicensePlateReceiptLine _mixedLPLine, WHSTmpWorkLine _tmpWorkLine, WHSLoadLine _loadLine)
    {
        _tmpWorkLine.LoadLineRefRecId = _loadLine.RecId;

        if (this.shouldSetLoadId(_mixedLPLine))
        {
            loadId = _loadLine.LoadId;

            if (!_tmpWorkLine.ShipmentId)
            {
                _tmpWorkLine.ShipmentId = _loadLine.ShipmentId;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findRelatedLoadLine</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal WHSLoadLine findRelatedLoadLine(WHSMixedLicensePlateReceipt _mixedLP, WHSTmpWorkLine _tmpWorkLine)
    {
        WHSLoadLine loadLine;

        WHSMixedLicensePlateReceiptLine mixedLPLines;

        SysDaFindObject qf = new SysDaFindObject(
            this.buildMixedLicensePlateReceiptLineQueryForUpdateWorkCreatedQty(mixedLPLines, _mixedLP, _tmpWorkLine));

        new SysDaFindStatement().executeQuery(qf);
            
        qf = new SysDaFindObject(
            this.buildQueryForLoadLineUpdateWorkCreatedQty(loadId, loadLine, mixedLPLines));

        new SysDaFindStatement().executeQuery(qf);

        return loadLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustUpdateLoadLineWorkCreatedQty</Name>
				<Source><![CDATA[
    private boolean mustUpdateLoadLineWorkCreatedQty()
    {
        return mustUpdateOutboundLoadLineWorkCreatedQty
            || WHSLoadTable::find(loadId).LoadDirection != WHSLoadDirection::Outbound;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLoadLineWorkCreatedQty</Name>
				<Source><![CDATA[
    private void updateLoadLineWorkCreatedQty(WHSLoadLine _loadLine)
    {
        if (_loadLine)
        {
            _loadLine.WorkCreatedQty += workCreatedQty;
            _loadLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildMixedLicensePlateReceiptLineQueryForUpdateWorkCreatedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query for mixed license plate receiving lines used when updating load line work created quantity.
    /// </summary>
    /// <param name = "_mixedLPRecieptLine">The mixed license plate receiving line record.</param>
    /// <param name = "_mixedLPReceipt">The mixed license plate receiving record.</param>
    /// <param name = "_tmpWorkLine">The temporary work line record.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c>.</returns>
    protected SysDaQueryObject buildMixedLicensePlateReceiptLineQueryForUpdateWorkCreatedQty(
        WHSMixedLicensePlateReceiptLine _mixedLPRecieptLine,
        WHSMixedLicensePlateReceipt     _mixedLPReceipt,
        WHSTmpWorkLine                  _tmpWorkLine)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_mixedLPRecieptLine);
        queryObject.firstOnlyHint = true;
        queryObject.whereClause(new SysDaEqualsExpression(
                new SysDaFieldExpression(_mixedLPRecieptLine, fieldStr(WHSMixedLicensePlateReceiptLine, MixedLPReceivingTable)),
                new SysDaValueExpression(_mixedLPReceipt.RecId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_mixedLPRecieptLine, fieldStr(WHSMixedLicensePlateReceiptLine, InventTransId)),
                new SysDaValueExpression(_tmpWorkLine.InventTransId))));

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateWorkCreatedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update work created qty on the related load line
    /// </summary>
    /// <param name = "_mixedLPLines">
    /// Mixed license plate receipt line
    /// </param>
    /// <remarks>
    /// Reference the method createTempTable() of <c>WHSWorkCreatePurchLine</c>
    /// </remarks>
    private void updateWorkCreatedQty(WHSMixedLicensePlateReceiptLine _mixedLPLines)
    {
        WHSLoadLine loadLine;

        SysDaFindObject qf = new SysDaFindObject(
                this.buildQueryForLoadLineUpdateWorkCreatedQty(loadId, loadLine, _mixedLPLines));
        new SysDaFindStatement().executeQuery(qf);
       
        if (loadLine)
        {
            loadLine.WorkCreatedQty += workCreatedQty;
            loadLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildQueryForLoadLineUpdateWorkCreatedQty</Name>
				<Source><![CDATA[
    /// <summary>
    /// Build query for load line work create quantity updates based on the mixed license plate receiving line record.
    /// </summary>
    /// <param name = "_loadId">The load Id.</param>
    /// <param name = "_loadLine">The load line record.</param>
    /// <param name = "_mixedLPRecieptLine">The mixed license plate receiving line record.</param>
    /// <returns>An instance of <c>SysDaQueryObject</c>.</returns>
    protected SysDaQueryObject buildQueryForLoadLineUpdateWorkCreatedQty(
        WHSLoadId                       _loadId,
        WHSLoadLine                     _loadLine,
        WHSMixedLicensePlateReceiptLine _mixedLPRecieptLine)
    {
        SysDaQueryObject queryObject = new SysDaQueryObject(_loadLine);
        queryObject.firstOnlyHint = true;

        SysDaQueryExpression loadIdFilter = new SysDaEqualsExpression(
                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, LoadId)),
                new SysDaValueExpression(_loadId));

        SysDaQueryExpression inventTransIdAndTypeFilter = new SysDaEqualsExpression(
                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, InventTransId)),
                new SysDaValueExpression(_mixedLPRecieptLine.InventTransId))
            .and(new SysDaEqualsExpression(
                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, InventTransType)),
                new SysDaValueExpression(_mixedLPRecieptLine.InventTransType)));

        SysDaQueryExpression whereClause = !this.shouldSetLoadId(_mixedLPRecieptLine)
            ? loadIdFilter.and(inventTransIdAndTypeFilter)
            : inventTransIdAndTypeFilter;

        queryObject.whereClause(whereClause);
        
        if (WhsWorkCreateMixedLPReceivingIgnoreReceivedLoadsFlight::instance().isEnabled())
        {
            WHSLoadTable openLoad;
            SysDaQueryObject openLoadQueryObject = new SysDaQueryObject(openLoad);
        
            var receivingCompletedDateTimeBlank = new SysDaEqualsExpression(
                new SysDaFieldExpression(openLoad, fieldStr(WHSLoadTable, LoadReceivingCompletedUTCDateTime)),
                new SysDaValueExpression(DateTimeUtil::minValue()));

            var loadStatusNotReceived = new SysDaNotEqualsExpression(
                new SysDaFieldExpression(openLoad, fieldStr(WHSLoadTable, LoadStatus)),
                new SysDaValueExpression(WHSLoadStatus::Received));

            var loadLineLoadTableJoinExpression = new SysDaEqualsExpression(
                new SysDaFieldExpression(openLoad, fieldStr(WHSLoadTable, LoadId)),
                new SysDaFieldExpression(_loadLine, fieldStr(WHSLoadLine, loadId)));

            openLoadQueryObject.whereClause(receivingCompletedDateTimeBlank.and(loadStatusNotReceived).and(loadLineLoadTableJoinExpression));

            queryObject.joinClause(SysDaJoinKind::ExistsJoin, openLoadQueryObject);
        }

        return queryObject;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetLoadId</Name>
				<Source><![CDATA[
    private boolean shouldSetLoadId(WHSMixedLicensePlateReceiptLine _mixedLPReceiptLine)
    {
        return !isLoadItemReceiving && this.shouldSetLoadIdForOrderReceiving(_mixedLPReceiptLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetLoadIdForPOReceiving</Name>
				<Source><![CDATA[
    private boolean shouldSetLoadIdForPOReceiving(WHSMixedLicensePlateReceiptLine _mixedLPReceiptLine)
    {
        return _mixedLPReceiptLine.InventTransType == InventTransType::Purch
            &&  WHSParameters::find().AutoCreateLoadAtPOReceiving == NoYes::Yes;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldSetLoadIdForOrderReceiving</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean shouldSetLoadIdForOrderReceiving(WHSMixedLicensePlateReceiptLine _mixedLPReceiptLine)
    {
        return this.shouldSetLoadIdForPOReceiving(_mixedLPReceiptLine);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(Common _common, WHSWorkCreateId _workCreateId = '')
    {
        licensePlate = _common;

        workCreateId = _workCreateId ? _workCreateId : NumberSeq::newGetNum(WHSParameters::numRefWHSWorkCreateId()).num();

        super(licensePlate, workCreateId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadId</Name>
				<Source><![CDATA[
    public WHSLoadId parmLoadId(WHSLoadId _loadId = loadId)
    {
        loadId = _loadId;

        return loadId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmWorkCreateId</Name>
				<Source><![CDATA[
    public WHSWorkCreateId parmWorkCreateId(WHSWorkCreateId _workCreateId = workCreateId)
    {
        workCreateId = _workCreateId;

        return workCreateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMustUpdateOutboundLoadLineWorkCreatedQty</Name>
				<Source><![CDATA[
    internal boolean parmMustUpdateOutboundLoadLineWorkCreatedQty(boolean _mustUpdateOutboundLoadLineWorkCreatedQty = mustUpdateOutboundLoadLineWorkCreatedQty)
    {
        mustUpdateOutboundLoadLineWorkCreatedQty = _mustUpdateOutboundLoadLineWorkCreatedQty;

        return mustUpdateOutboundLoadLineWorkCreatedQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerLPItems</Name>
				<Source><![CDATA[
    private void registerLPItems(
        WHSMixedLicensePlateReceipt                 _mixedLP,
        WHSWorkTransType                            _workTransType,
        WHSLoadLineInventTransReceiptIdAllocator    _loadLineInventTransReceiptIdAllocator)
    {
        if (WHSWorkCreateMixedLPReceivingCreateLoadsWithoutWorkFlight::instance().isEnabled())
        {
            boolean mustFindAndSetRelatedLoadWithoutWorkCreation = _loadLineInventTransReceiptIdAllocator != null && this.mustFindAndSetRelatedLoadWithoutWorkCreation(_mixedLP);

            WHSMixedLicensePlateReceiptLine mixedLPLines;
            InventDim                       inventDim;

            // Loop all records on LP to register items.
            while select mixedLPLines
                where mixedLPLines.MixedLPReceivingTable == _mixedLP.RecId
                join InventBatchId, InventSerialId from inventDim
                    where inventDim.inventDimId == mixedLPLines.InventDimId
            {
                if (mustFindAndSetRelatedLoadWithoutWorkCreation)
                {
                    WHSLoadLine relatedLoadLine = this.findRelatedLoadLineForMixedLPLine(mixedLPLines);

                    this.createLoadLineInventoryReceipt(_mixedLP, _loadLineInventTransReceiptIdAllocator, relatedLoadLine.RecId);
                }

                this.registerLPItem(mixedLPLines, inventDim, _workTransType);
            }
        }
        else
        {
            WHSMixedLicensePlateReceiptLine mixedLPLines;
            InventDim                       inventDim;

            // Loop all records on LP to register items.
            while select InventDimId, InventTransId, InventQty, CapturedWeight from mixedLPLines
                where mixedLPLines.MixedLPReceivingTable == _mixedLP.RecId
                join InventBatchId, InventSerialId from inventDim
                    where inventDim.inventDimId == mixedLPLines.InventDimId
            {
                this.registerLPItem(mixedLPLines, inventDim, _workTransType);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerLPItem</Name>
				<Source><![CDATA[
    private void registerLPItem(WHSMixedLicensePlateReceiptLine _mixedLPLine, InventDim _inventDim, WHSWorkTransType _workTransType)
    {
        if (_inventDim.inventBatchId
        ||  _inventDim.inventSerialId)
        {
            ItemId itemId = _mixedLPLine.getItemId();

            if (_inventDim.InventBatchId)
            {
                this.createBatch(_inventDim.InventBatchId, itemId);
            }

            if (_inventDim.InventSerialId)
            {
                this.createSerial(_inventDim.InventSerialId, itemId);
            }
        }

        this.registerOrderLine(_mixedLPLine, _workTransType);

        if (!inventBatchId)
        {
            inventBatchId = _inventDim.InventBatchId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerOrderLine</Name>
				<Source><![CDATA[
    protected void registerOrderLine(
        WHSMixedLicensePlateReceiptLine _mixedLPLine,
        WHSWorkTransType                _workTransType)
    {
        switch (_workTransType)
        {
            case WHSWorkTransType::TransferReceipt:
                InventTransferLine transferLine = InventTransferLine::findTransIdShip(_mixedLPLine.InventTransId);

                if (WHSWorkCreateTransferMixedLPLineUpdateRecLocFlight::instance().isEnabled())
                {
                    WHSUpdateReceivingTransReceiptLocation updateReceivingTransReceiptLocation = WHSUpdateReceivingTransReceiptLocation::newFromTransferLineAndStartLocationId(transferLine, startLocationId);
                    updateReceivingTransReceiptLocation.updateReceivingTransReceiptLocation();
                }

                this.registerInventTransferLineNonLicensePlate(transferLine, targetLicensePlateId, _mixedLPLine.InventQty, InventDim::find(_mixedLPLine.InventDimId), _mixedLPLine.CapturedWeight);
                this.receiveTransferLineNonLP(transferLine);
                break;

            case WHSWorkTransType::ReturnOrder:
                _mixedLPLine.reread(); // Registering partial quantity of a return line will split the remaining quantity to a new line with a new inventTransId.  We need to reread the mixed license plate line incase it has been updated with the new transaction ID.
                this.createAndPostSalesReturnOrderArrivalJournal(_mixedLPLine.InventTransId, _mixedLPLine.InventQty, _mixedLPLine.InventDimId, _mixedLPLine.CapturedWeight);
                break;

            default:
                if (WhsWorkTransactionType::singletonFromType(_workTransType) is WHSInboundShipmentWorkTransactionType)
                {
                    using (var receivingLoadContext = WHSWorkCreateReceivingLoadContext::constructWithReceivingLoadId(loadId))
                    {
                        this.registerInboundOrderLine(_mixedLPLine);
                    }
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>registerInboundOrderLine</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal void registerInboundOrderLine(WHSMixedLicensePlateReceiptLine _mixedLPLine)
    {
        if (this.mustRegisterInboundOrderLineHandlingQty())
        {
            boolean isCWItem = PdsGlobal::pdsIsCWItem(_mixedLPLine.getItemId());

            this.registerPurchLineHandlingQty(_mixedLPLine.InventTransId, isCWItem ? _mixedLPLine.CapturedWeight : _mixedLPLine.InventQty, targetLicensePlateId, _mixedLPLine.InventDimId, isCWItem ? _mixedLPLine.InventQty : 0);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustRegisterInboundOrderLineHandlingQty</Name>
				<Source><![CDATA[
    [Wrappable(true)]
    internal boolean mustRegisterInboundOrderLineHandlingQty()
    {
        return true; // Used as an extension point.
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndPostSalesReturnOrderArrivalJournal</Name>
				<Source><![CDATA[
    private void createAndPostSalesReturnOrderArrivalJournal(
        InventTransId _inventTransId,
        InventQty	  _inventQty,
        InventDimId   _inventDimId,
        WHSTransWeight	_captureWeight = 0)
    {
        if (!WHSCatchWeightConfigurationKeyManager::instance().mustExecuteNonCatchWeightQuantityLogic(funcName(), SalesLine::findInventTransId(_inventTransId).ItemId, _captureWeight))
        {
            this.createAndPostROArrivalJournal(_inventTransId, _inventQty, _inventDimId, _captureWeight);
        }
        else
        {
            this.createAndPostReturnOrderArrivalJournal(_inventTransId, _inventQty, _inventDimId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndPostReturnOrderArrivalJournal</Name>
				<Source><![CDATA[
    private void createAndPostReturnOrderArrivalJournal(
        InventTransId _inventTransId,
        InventQty	  _inventQty,
        InventDimId   _inventDimId)
    {
        WHSCatchWeightConfigurationKeyManager::instance().executingNonCatchWeightItemLogic(funcName(), SalesLine::findInventTransId(_inventTransId).ItemId);

        this.createAndPostROArrivalJournal(_inventTransId, _inventQty, _inventDimId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createAndPostROArrivalJournal</Name>
				<Source><![CDATA[
    private void createAndPostROArrivalJournal(
        InventTransId _inventTransId,
        InventQty	  _inventQty,
        InventDimId   _inventDimId,
        WHSTransWeight	_captureWeight = 0)
    {
        SalesLine returnLine = SalesLine::findInventTransId(_inventTransId);
        InventDim lineDim = returnLine.inventDim();

        InventDim receiveDim = InventDim::find(_inventDimId);

        boolean isCWItem = PdsGlobal::pdsIsCWItem(returnLine.ItemId);

        receiveDim.InventStatusId = inventStatusId ? inventStatusId : lineDim.InventStatusId;
        receiveDim = InventDim::findOrCreate(receiveDim);

        ttsbegin;
        if (WHSUseReturnsArrivalJournalServiceFlight::instance().isEnabled())
        {
            WHSReturnsArrivalJournalCreator returnsArrivalJournalCreator = WHSReturnsArrivalJournalCreator::createFromParameters(
                 returnLine,
                _inventQty,
                receiveDim.inventDimId,
                dispositionCode,
                _captureWeight);

            WMSJournalTable journalTable = returnsArrivalJournalCreator.createReturnOrderArrivalJournalWithSingleLine();

            if (receiveDim.InventStatusId && receiveDim.InventStatusId != lineDim.InventStatusId)
            {
                WHSWorkCreateMixedLPReceiving::updateMixedLPReceiptLineWithInventDim(receiveDim, _inventDimId, returnLine.InventTransId);
            }

            WHSReturnsArrivalJournalPoster returnsArrivalJournalPoster = WHSReturnsArrivalJournalPoster::createFromParameters(journalTable);
            returnsArrivalJournalPoster.postReturnOrderArrivalJournal();
        } 
        else
        {
            // Create the journal header
            WMSJournalTable journalTable;
            journalTable.initFromWMSJournalName(WMSJournalName::find(WHSParameters::find().DefaultReturnJournal));
            journalTable.InventTransType        = InventTransType::Sales;
            journalTable.VendAccount            = returnLine.CustAccount;
            journalTable.InventTransRefId       = returnLine.SalesId;
            journalTable.ReturnItemNum          = SalesTable::find(returnLine.SalesId).ReturnItemNum;
            journalTable.CheckPickingLocation   = NoYes::Yes;
            journalTable.InventDimId            = InventDim::inventDimIdBlank();
            journalTable.NumOfLines             = 1;
            journalTable.insert();

            // Create the journal line
            WMSJournalTrans journalTrans;
            ++journalTrans.LineNum;
            journalTrans.initFromWMSJournalTable(journalTable);
            journalTrans.initValue();
            journalTrans.IsReturnOrder              = 1;
            journalTrans.ReturnDispositionCodeId    = WHSDispositionTable::find(dispositionCode).ReturnDispositionCodeId;
            journalTrans.ItemId                     = returnLine.ItemId;
            journalTrans.Qty                        = isCWItem ? _captureWeight :_inventQty;
            journalTrans.PdsCWQty                   = isCWItem ? _inventQty : 0;
            journalTrans.InventTransId              = returnLine.InventTransId;
            journalTrans.CheckPickingLocation       = NoYes::No;
            journalTrans.InventDimId                = receiveDim.inventDimId;
            journalTrans.insert();

            if (receiveDim.InventStatusId
            && receiveDim.InventStatusId != lineDim.InventStatusId)
            {
                WHSWorkCreateMixedLPReceiving::updateMixedLPReceiptLineWithInventDim(receiveDim, _inventDimId, returnLine.InventTransId);
            }

            // Post the Arrival Journal
            WMSJournalCheckPostReception journalCheckPost = WMSJournalCheckPostReception::construct();
            journalCheckPost.parmAutoBlock(true);
            journalCheckPost.parmShowInfoResult(true);
            journalCheckPost.parmThrowCheckFailed(true);
            journalCheckPost.parmJournalCheckPostType(JournalCheckPostType::Post);
            journalCheckPost.parmJournalTableId(journalTable.TableId);
            journalCheckPost.parmJournalId(journalTable.JournalId);
            journalCheckPost.runOperation();
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateMixedLPReceiptLineWithInventDim</Name>
				<Source><![CDATA[
    private static void updateMixedLPReceiptLineWithInventDim(InventDim _receiveDim, InventDimId _prevInventDimId, InventTransId _lineInventTransId)
    {
        WHSMixedLicensePlateReceipt     mixedReceipt;
        WHSMixedLicensePlateReceiptLine mixedLine;

        select forUpdate mixedLine
            exists join mixedReceipt
                where mixedReceipt.RecId == mixedLine.MixedLPReceivingTable
                    && mixedReceipt.LicensePlateId == _receiveDim.LicensePlateId
                    && mixedReceipt.MixedLPComplete == NoYes::No
                    && mixedLine.InventDimId == _prevInventDimId
                    && mixedLine.InventTransId  == _lineInventTransId;

        if (mixedLine)
        {
            mixedLine.InventDimId = _receiveDim.inventDimId;
            mixedLine.update();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSuppressPhysicalRereservationOnNonWorkEnabledIssues</Name>
				<Source><![CDATA[
    [Hookable(false)]
    protected boolean mustSuppressPhysicalRereservationOnNonWorkEnabledIssues()
    {
        return true; // Work is always created for mixed LP receiving
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>