<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>XMLWordDocument</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The document controller.
/// </summary>
public class XMLWordDocument implements System.IDisposable
{
    private const str fileExtension = '.docx';

    private Map bookmarks = new Map(Types::String, Types::Class);

    protected NetDFOXMLPackagingWordprocessingDocumentProxy document;
    protected System.IO.Stream documentStream;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new(NetDFOXMLPackagingWordprocessingDocumentProxy _document)
    {
        document = _document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        if (document != null)
        {
            document.Dispose();
        }

        if (documentStream != null)
        {
            documentStream.Dispose();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the document stream.
    /// </summary>
    /// <param name = "_stream">The stram.</param>
    protected void setStream(System.IO.Stream _stream)
    {
        documentStream = _stream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeDocumentType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the document type.
    /// </summary>
    protected void initializeDocumentType()
    {
        if (document.documentType() != DocumentFormat.OpenXml.WordprocessingDocumentType::Document)
        {
            document.changeDocumentType(DocumentFormat.OpenXml.WordprocessingDocumentType::Document);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the document controller from file.
    /// </summary>
    /// <param name = "_path">The file path.</param>
    /// <returns>The document controller.</returns>
    public static XMLWordDocument newFromFile(str _path)
    {
        XMLWordDocument xmlWordDocument = null;

        if (System.IO.File::Exists(_path))
        {
            System.Byte[] byteArray = System.IO.File::ReadAllBytes(_path);

            System.IO.MemoryStream stream = new System.IO.MemoryStream();
            stream.Write(byteArray, 0, byteArray.Length);

            xmlWordDocument = XMLWordDocument::newFromStream(stream);
        }

        return xmlWordDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromResource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the document controller from AOT resource.
    /// </summary>
    /// <param name="_resourceName">The AOT resource name.</param>
    /// <returns>The document controller.</returns>
    public static XMLWordDocument newFromResource(str _resourceName)
    {
        XMLWordDocument xmlWordDocument = null;

        using (System.IO.Stream templateStream = Microsoft.Dynamics.Ax.Xpp.MetadataSupport::GetResourceContentStream(_resourceName))
        {
            templateStream.Seek(0, System.IO.SeekOrigin::Begin);
            System.IO.Stream stream = new System.IO.MemoryStream();
            templateStream.CopyTo(stream);

            xmlWordDocument = XMLWordDocument::newFromStream(stream);
        }
        
        return xmlWordDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the document controller from stream.
    /// </summary>
    /// <param name = "_stream">The stream.</param>
    /// <returns>The document controller.</returns>
    public static XMLWordDocument newFromStream(System.IO.Stream _stream)
    {
        XMLWordDocument xmlWordDocument = null;

        try
        {
            NetDFOXMLPackagingWordprocessingDocumentProxy documentProxy = NetDFOXMLPackagingWordprocessingDocumentProxy::construct(
                DocumentFormat.OpenXml.Packaging.WordprocessingDocument::Open(_stream, true));

            if (documentProxy != null)
            {
                xmlWordDocument = new XMLWordDocument(documentProxy);
                xmlWordDocument.setStream(_stream);
                xmlWordDocument.initializeDocumentType();
                xmlWordDocument.initializeBookmarks();
            }
        }
        catch
        {
        }
            
        return xmlWordDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToStream</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document to stream.
    /// </summary>
    /// <returns>The document stream.</returns>
    public System.IO.Stream saveToStream()
    {
        document.close();

        documentStream.Position = 0;

        return documentStream;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFileToBrowser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides file for downloading.
    /// </summary>
    /// <param name = "_fileName">The file name.</param>
    public void sendFileToBrowser(str _fileName)
    {
        document.close();

        Browser browser = new Browser();

        str downloadUrl = File::SendFileToTempStore(documentStream, System.IO.Path::ChangeExtension(_fileName, fileExtension), classstr(FileUploadTemporaryStorageStrategy), true);

        if (downloadUrl != '')
        {
            browser.navigate(downloadUrl, true, false);
        }
        else
        {
            warning("@ApplicationPlatform:DownloadFailed");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToByteArray</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document to byte array.
    /// </summary>
    /// <returns>The document byte array.</returns>
    public System.Byte[] saveToByteArray()
    {
        using (System.IO.MemoryStream memoryStream = new System.IO.MemoryStream())
        {
            this.saveToStream().CopyTo(memoryStream);
            return memoryStream.ToArray();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveToFile</Name>
				<Source><![CDATA[
    /// <summary>
    /// Saves the document to file.
    /// </summary>
    /// <param name = "_path">The file path.</param>
    public void saveToFile(str _path)
    {
        System.IO.File::WriteAllBytes(_path, this.saveToByteArray());
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFieldValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts a value into a bookmark.
    /// </summary>
    /// <param name = "_bookmarkName">The bookmark name.</param>
    /// <param name = "_value">The value.</param>
    public void insertFieldValue(str _bookmarkName, anytype _value)
    {
        XMLWordDocumentBookmark xmlWordDocumentBookmark = this.findBookmark(_bookmarkName);
        if (xmlWordDocumentBookmark != null)
        {
            xmlWordDocumentBookmark.setText(any2Str(_value));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBookmarks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tje bookmarks.
    /// </summary>
    /// <returns>The mookmarks.</returns>
    public Map getBookmarks()
    {
        return bookmarks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findBookmark</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the bookmark.
    /// </summary>
    /// <param name = "_name">The bookmark name.</param>
    /// <returns>The bookmark controller.</returns>
    public XMLWordDocumentBookmark findBookmark(str _name)
    {
        XMLWordDocumentBookmark result = null;

        if (bookmarks.exists(_name))
        {
            result = bookmarks.lookup(_name);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeBookmarks</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes bookmarks.
    /// </summary>
    protected void initializeBookmarks()
    {
        System.Collections.IEnumerable enumerableBookmarksStart = document.mainDocumentPartRootElement().descendantsBookmarkStart();
        System.Collections.IEnumerator enumeratorBookmarksStart = enumerableBookmarksStart.GetEnumerator();
        while (enumeratorBookmarksStart.MoveNext())
        {
            NetDFOXMLWordprocessingBookmarkStartProxy bookmarkStart = ERCast::asAny(enumeratorBookmarksStart.Current) as NetDFOXMLWordprocessingBookmarkStartProxy;

            XMLWordDocumentBookmark bookmark = XMLWordDocumentBookmark::construct(bookmarkStart);
            bookmarks.insert(bookmark.name(), bookmark);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>