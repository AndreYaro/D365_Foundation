<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AlcoholDeclarationOXML12_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>AlcoholDeclarationOXML12_RU</c> class performs printing to Excel of the 12th form of the alcohol declaration.
/// </summary>
class AlcoholDeclarationOXML12_RU extends AlcoholDeclarationOXML11_RU
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>declarationType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the declaration type of the current child of the <c>AlcoholDeclarationOXML_RU</c> class.
    /// </summary>
    /// <returns>
    ///    Retail12.
    /// </returns>
    protected AlcoholDeclarationType_RU declarationType()
    {
        return AlcoholDeclarationType_RU::Retail12;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSheet1</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the first sheet of Excel document with data.
    /// </summary>
    protected void fillSheet1()
    {
        const str CellINN = 'CJ7';
        const str CellPP = 'AG9';
        const str Uno = '1';
        const str Three = '3';
        const str MarkSign = 'V';
        const str CorrectionNumCell = 'DI14';
        const str PeriodNumCell = 'BB15';
        const str ByOrganizationCell = 'AU26';
        const str CompanyNameCell = 'B28';
        const str AddressCell = 'B36';
        const str PhoneCell = 'X45';
        const str EmailCell = 'AN49';
        const str DirectorCell = 'Y61';
        const str AccountantCell = 'AB67';
        str getPeriodStr()
        {
            switch (journalTableCaller.PeriodType)
            {
                case AlcoholDeclarationPeriodType_RU::Quarter:
                    return '3';

                case AlcoholDeclarationPeriodType_RU::HalfYear:
                    return '6';

                case AlcoholDeclarationPeriodType_RU::NineMonths:
                    return '9';

                case AlcoholDeclarationPeriodType_RU::Year:
                    return '0';

                default:
                    return '';
            }
        }

        this.fillCellsRight(CellINN, CompanyInfoHelper::partyINN_RU(companyInfo), 12, '0', 5);
        this.fillCellsLeft (CellPP, CompanyInfoHelper::partyKPP_RU(companyInfo), 9, 5);

        if (journalTableCaller.isCorrectionJournal())
        {
            document.insertValue(CorrectionNumCell, strfmt("@GLS111217", Three, journalTableCaller.CorrectionNum), curWorksheetNum);
        }
        else
        {
            document.insertValue(CorrectionNumCell, Uno, curWorksheetNum);
        }

        document.insertValue(PeriodNumCell,       getPeriodStr(), curWorksheetNum);
        document.insertValue(ByOrganizationCell,  MarkSign, curWorksheetNum);
        document.insertValue(CompanyNameCell,     companyInfo.Name, curWorksheetNum);
        document.insertValue(AddressCell,         strRemoveCr(companyInfo.postalAddress().Address), curWorksheetNum);
        document.insertValue(PhoneCell,           companyInfo.phone(), curWorksheetNum);
        document.insertValue(EmailCell,           companyInfo.email(), curWorksheetNum);

        document.insertValue(DirectorCell,    OfficialsTable_RU::find(OffReportType_RU::General, OffPosition_RU::Director).Name,   curWorksheetNum);
        document.insertValue(AccountantCell,  OfficialsTable_RU::find(OffReportType_RU::General, OffPosition_RU::Accountant).Name, curWorksheetNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>footerRowsQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the heigth of the footer (in rows) of the document on sheets 3 and 4, which can't be alone on the page without data lines.
    /// </summary>
    /// <returns>
    ///    The footer height in rows.
    /// </returns>
    protected int footerRowsQty()
    {
        return 10;
    }

]]></Source>
			</Method>
			<Method>
				<Name>movementColQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity of rows on the sheet with movement data.
    /// </summary>
    /// <returns>
    ///    Quantity of rows on the sheet with movement data.
    /// </returns>
    protected int movementColQty()
    {
        return 19;
    }

]]></Source>
			</Method>
			<Method>
				<Name>receiptIssueColQty</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the quantity of rows on the sheet with receipt and issue data.
    /// </summary>
    /// <returns>
    ///    Quantity of rows on the sheet with receipt and issue data.
    /// </returns>
    protected int receiptIssueColQty()
    {
        return 13;
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns name of template for report.
    /// </summary>
    /// <returns>
    ///    Name of template for report.
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(AlcoholDeclarationOXML12_RU);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>