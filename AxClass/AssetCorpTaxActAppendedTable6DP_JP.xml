<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetCorpTaxActAppendedTable6DP_JP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AssetCorpTaxActAppendedTable6DP_JP</c> class is the data provider class for the <c>AssetCorpTaxActAppendedTable6_JP</c> SSRS report.
/// The report is about Deferred assets.
/// </summary>
[
    SRSReportParameterAttribute(classStr(AssetCorpTaxActAppendedTablesContract_JP)),
    SRSReportQueryAttribute(queryStr(AssetCorpTaxActAppendTables_JP))
]
class AssetCorpTaxActAppendedTable6DP_JP extends SrsReportDataProviderPreProcessTempDB
{
    AssetCorpTaxActAppendedTable6Tmp_JP assetCorpTaxActAppendedTable6Tmp;
    AssetCorpTaxActAppendedHeaderTmp_JP assetCorpTaxActAppendedHeaderTmp;

    TransDate startDate;
    TransDate endDate;
    PrintDate printDate;
    FiscalYearName fiscalYearName;
    AssetCorpTaxActAppendedTableGroupBy_JP groupBy;

    AssetTable assetTable;
    AssetBook assetBook;
    AssetBook refAssetBook;
    AssetBookTable assetBookTable;
    AssetMajorType assetMajorType;
    AssetDepreciationProfile assetDepreciationProfile;
    AssetDepreciationProfile refAssetDepreciationProfileExt;
    AssetDepreciationProfile assetDepreciationProfileExt;
    int rowCount;
    Currency currency;
    LanguageId currentUserLanguage;
    CurrencyExchangeHelper currencyExchangeHelper;

    #define.DefaultAmount(0.00)
    #define.GroupNum(5)
    #define.ParameterYearJP('gg yy . M')

    #AssetDepCalculation_JP
    #TimeConstants

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountFromAccounttingToJPY</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates all transaction currency amounts from the specified accounting currency amounts.
    /// </summary>
    public void amountFromAccounttingToJPY()
    {
        // 16.6-2
        assetCorpTaxActAppendedTable6Tmp.AcquisitionPriceEquallyDivided = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.AcquisitionPriceEquallyDivided);
        // 16.6-6
        assetCorpTaxActAppendedTable6Tmp.AllowableDepreciationAmounEquallyDivided = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.AllowableDepreciationAmounEquallyDivided);
        // 16.6-7
        assetCorpTaxActAppendedTable6Tmp.DepAmountInCurrentTermEquallyDivided = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.DepAmountInCurrentTermEquallyDivided);
        // 16.6-8
        assetCorpTaxActAppendedTable6Tmp.UnderDepreciationEquallyDivided = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.UnderDepreciationEquallyDivided);
        // 16.6-9
        assetCorpTaxActAppendedTable6Tmp.OverDepreciationEquallyDivided = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.OverDepreciationEquallyDivided);
        // 16.6-10
        assetCorpTaxActAppendedTable6Tmp.AmountFromPreviousTermEquallyDivided = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.AmountFromPreviousTermEquallyDivided);
        // 16.6-11
        assetCorpTaxActAppendedTable6Tmp.LossAmountEquallyDivided = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.LossAmountEquallyDivided);
        // 16.6-12
        assetCorpTaxActAppendedTable6Tmp.AmountCarriedToNextTermEquallyDivided = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.AmountCarriedToNextTermEquallyDivided);
        // 16.6-14
        assetCorpTaxActAppendedTable6Tmp.AcquisitionPrice = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.AcquisitionPrice);
        // 16.6-15
        assetCorpTaxActAppendedTable6Tmp.AccumulatedDepAmount = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.AccumulatedDepAmount);
        // 16.6-16
        assetCorpTaxActAppendedTable6Tmp.DepAmountInCurrentTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.DepAmountInCurrentTerm);
        // 16.6-17
        assetCorpTaxActAppendedTable6Tmp.BookValueAtEndCurentTerm = this.amountMST2LocalCurrencyAmount(assetCorpTaxActAppendedTable6Tmp.BookValueAtEndCurentTerm);
    }

]]></Source>
			</Method>
			<Method>
				<Name>amountMST2LocalCurrencyAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the local currency amount from the specified accounting currency amount.
    /// </summary>
    /// <param name="_amountMST">
    /// The accounting currency amount used to calculate.
    /// </param>
    /// <returns>
    /// A Local currency amount that has been calculated from the accounting currency amount.
    /// </returns>
    public AmountCur amountMST2LocalCurrencyAmount(AmountMST _amountMST)
    {
        AmountCur amount;

        if (_amountMST != 0)
        {
            currencyExchangeHelper.parmRoundingRuleType(CurrencyRoundingRuleType::AssetDep_JP);

            amount = currencyExchangeHelper.calculateAccountingToTransaction(#CurrencyJPY, _amountMST, true);
        }

        return amount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetCorpTaxActAppendedHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetCorpTaxActAppendedHeaderTmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetCorpTaxActAppendedHeaderTmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetCorpTaxActAppendedHeaderTmp_JP))
    ]
    public AssetCorpTaxActAppendedHeaderTmp_JP getAssetCorpTaxActAppendedHeaderTmp()
    {
        select assetCorpTaxActAppendedHeaderTmp;
        return assetCorpTaxActAppendedHeaderTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetCorpTaxActAppendedTable6Tmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the data <c>AssetCorpTaxActAppendedTable6Tmp</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>AssetCorpTaxActAppendedTable6Tmp</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(AssetCorpTaxActAppendedTable6Tmp_JP))
    ]
    public AssetCorpTaxActAppendedTable6Tmp_JP getAssetCorpTaxActAppendedTable6Tmp()
    {
        select assetCorpTaxActAppendedTable6Tmp;
        return assetCorpTaxActAppendedTable6Tmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountOfDepMonths</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the count of depreciation months.
    /// </summary>
    /// <returns>
    /// The count of depreciation months.
    /// </returns>
    public int getCountOfDepMonths()
    {
        AssetTrans  assetTrans;

        select count(RecId) from assetTrans
            where assetTrans.AssetId == assetTable.AssetId
            && assetTrans.TransDate >= startDate
            && assetTrans.TransDate <= EndDate
            && assetTrans.TransType == AssetTransType::Depreciation
            && assetTrans.BookId == refAssetBook.BookId
            && assetTrans.AmountMST < 0;

        return int642int(assetTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcDepreciationAmountForReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates allowable depreciation amount for the period.
    /// </summary>
    /// <param name="_assetBook">
    /// The value model that depreciation amount posted to.
    /// </param>
    /// <param name="_fromDate">
    /// The from date that depreciation amount calculated from.
    /// </param>
    /// <param name="_toDate">
    /// The to date that depreciation amount calculated to.
    /// </param>
    /// <returns>
    /// Total depreciation amount that has been calculated for the period.
    /// </returns>
    private AssetAmount calcDepreciationAmountForReport(AssetBook _assetBook, TransDate _fromDate, TransDate _toDate)
    {
        AssetAmount specialDirectOffDepAmount;
    
        AssetAmount depAmount = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(_assetBook, _fromDate, _toDate);
        AssetAmount acceleratedDepAmount = AssetDepTransMap_JP::calcAccumulatedAcceleratedDepAmountMst(_assetBook, _fromDate, _toDate);
    
        if (refAssetDepreciationProfileExt
            && refAssetDepreciationProfileExt.SpecialDepAccountingMethod_JP == AssetSpecialDepAccountingMethod_JP::DirectOff)
        {
            specialDirectOffDepAmount = AssetDepTransMap_JP::calcAccumulatedAmtMstPerDateTranstype(
            refAssetBook,
            _fromDate,
            _toDate,
            AssetTransType::ExtraordinaryDepreciation,
            0,
            true);
        }

        return depAmount + acceleratedDepAmount - specialDirectOffDepAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOverDepAmountFromPreviousTerm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the over depreciation amount with specific date;
    /// </summary>
    /// <param name="_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The over depreciation amount.
    /// </returns>
    public AssetAmount getOverDepAmountFromPreviousTerm(AssetTransDate  _transDate)
    {
        AssetDepEntityInquiry_PreTaxDeduction_JP assetDepEntityInquiry_PreTaxDeduction;
        AssetTableInterval assetTableInterval;
        AssetAmount carryFormardAmount;

        assetTableInterval = assetBook.AssetDepBookMap_JP::assetTableInterval(_transDate);
        assetDepEntityInquiry_PreTaxDeduction = AssetDepEntityInquiry_PreTaxDeduction_JP::construct(
            assetTable.AssetId,
            assetBook.BookId,
            assetTableInterval);

        carryFormardAmount = assetDepEntityInquiry_PreTaxDeduction.calcOverUnderBalanceCarryForward(
            [AssetDepEntityType_JP::OrdinaryDepreciation],
            _transDate);

        return max(carryFormardAmount, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the report parameters from a data contract to the member variables.
    /// </summary>
    public void getReportParameters()
    {
        FiscalCalendarYear fiscalCalendarYear;
        AssetCorpTaxActAppendedTablesContract_JP contract = this.parmDataContract();

        if (contract)
        {
            fiscalYearName = contract.parmFiscalYearName();
            fiscalCalendarYear = FiscalCalendarYear::findByCalendarYearName(Ledger::fiscalCalendar(), fiscalYearName);
            startDate = fiscalCalendarYear.StartDate;
            endDate = fiscalCalendarYear.EndDate;
            printDate = contract.parmPrintDate();
            groupBy = contract.parmGroupBy();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetCorpTaxActAppendedHeaderTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AssetCorpTaxActAppendedHeaderTmp_JP</c> table.
    /// </summary>
    public void initAssetCorpTaxActAppendedHeaderTmp()
    {
        CompanyInfo  companyInfo = CompanyInfo::find();

        if (currentUserLanguage == #LanguageJA)
        {
            //insert the value for the fiscal year start date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearStartDate = subStr(JapaneseDateTimeHelper::getEraName(startDate), 0, 1)
                + JapaneseDateTimeHelper::date2str(startDate, #ParameterDate);

            //insert the value for the fiscal year end date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearEndDate   = subStr(JapaneseDateTimeHelper::getEraName(endDate), 0, 1)
                + JapaneseDateTimeHelper::date2str(endDate, #ParameterDate);

            //insert the value for the fiscal year start date by the capital date
            assetCorpTaxActAppendedHeaderTmp.YearOfStartDateAppended = JapaneseDateTimeHelper::getEraName(startDate)
                + (str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterYear)) == 1 ? JapaneseDateTimeHelper::getYearStr(startDate) : Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterYear)), true, false, #GroupNum))
                + enum2str(DateSeparator::Dot) + Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterMonth)), true, false, #GroupNum)
                + enum2str(DateSeparator::Dot) + Global_CN::numeralsToTxt(str2int(JapaneseDateTimeHelper::date2str(startDate, #ParameterDay)), true, false, #GroupNum);
        }
        else
        {
            //insert the value for the fiscal year start date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearStartDate = date2StrUsr(startDate, DateFlags::FormatAll);

            //insert the value for the fiscal year end date
            assetCorpTaxActAppendedHeaderTmp.FiscalYearEndDate = date2StrUsr(endDate, DateFlags::FormatAll);

            //insert the value for the fiscal year start date by the capital date
            assetCorpTaxActAppendedHeaderTmp.YearOfStartDateAppended = date2StrUsr(StartDate, DateFlags::FormatAll);
        }

        //insert the value of company's name
        assetCorpTaxActAppendedHeaderTmp.Name = companyInfo.Name;

        //insert the value of company's Kana name
        assetCorpTaxActAppendedHeaderTmp.PhoneticName = companyInfo.PhoneticName;

        assetCorpTaxActAppendedHeaderTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initAssetCorpTaxActAppendedTable6Tmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the <c>AssetCorpTaxActAppendedTable6Tmp_JP</c> table.
    /// </summary>
    public void initAssetCorpTaxActAppendedTable6Tmp()
    {
        AssetSumCalc_Trans          assetSumCalcAcq;
        Set                         docTypes;
        AssetDocumentSumCalcUtil_JP docSumCalcUtil;
        assetSumCalcAcq = AssetSumCalc_Trans::newAssetPeriod(assetTable.AssetId, assetBook.BookId, dateNull(), endDate);
        docTypes = new Set(Types::Container);
        docTypes.add([AssetTransType::Acquisition, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::AcquisitionAdj, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::Depreciation, AssetDocumentType_JP::AssetRetirementObligation]);
        docTypes.add([AssetTransType::DepreciationAdj, AssetDocumentType_JP::AssetRetirementObligation]);
        docSumCalcUtil = AssetDocumentSumCalcUtil_JP::construct(docTypes);
        assetSumCalcAcq.parmDocSumCalcUtil_JP(docSumCalcUtil);

        assetCorpTaxActAppendedTable6Tmp.MajorTypeId = assetMajorType.MajorType;
        assetCorpTaxActAppendedTable6Tmp.SummarizeByMajorType = assetBook.SummarizeByMajorType_JP;

        if (this.isDeferredEquallyDivided())
        {
            // inserts field 16(6)-1
            assetCorpTaxActAppendedTable6Tmp.MajorTypeEquallyDivided = assetMajorType.Description;
            // inserts field 16(6)-2
            if (currentUserLanguage == #LanguageJA)
            {
                if (str2Int(JapaneseDateTimeHelper::date2str(startDate, 'yy')) == 1)
                {
                    assetCorpTaxActAppendedTable6Tmp.AcquisitionDateEquallyDivided = strFmt("%1 %2 . %3", JapaneseDateTimeHelper::getEraName(assetBook.AcquisitionDate), JapaneseDateTimeHelper::getYearStr(assetBook.AcquisitionDate), JapaneseDateTimeHelper::date2str(assetBook.AcquisitionDate, 'MM'));
                }
                else
                {
                    assetCorpTaxActAppendedTable6Tmp.AcquisitionDateEquallyDivided = JapaneseDateTimeHelper::date2str(assetBook.AcquisitionDate, #ParameterYearJP);
                }
            }
            else
            {
                assetCorpTaxActAppendedTable6Tmp.AcquisitionDateEquallyDivided = date2StrUsr(assetBook.AcquisitionDate, DateFlags::FormatAll);
            }

            // inserts field 16(6)-3
            assetCorpTaxActAppendedTable6Tmp.AcquisitionPriceEquallyDivided = assetSumCalcAcq.acquisitionValue() + assetSumCalcAcq.acquisitionAdjValue() - assetSumCalcAcq.getRetirementObligationAcquisitionValue_JP();
            // inserts field 16(6)-4
            assetCorpTaxActAppendedTable6Tmp.DepreciationPeriodsEquallyDivided = assetDepreciationProfile.NumOfYearsEquallyDivided_JP * #monthsPerYear;
            // inserts field 16(6)-5
            assetCorpTaxActAppendedTable6Tmp.MonthsNumberInCurrentTermEquallyDivided = this.getCountOfDepMonths();

            if (assetCorpTaxActAppendedTable6Tmp.DepreciationPeriodsEquallyDivided)
            {
                // inserts field 16(6)-6
                assetCorpTaxActAppendedTable6Tmp.AllowableDepreciationAmounEquallyDivided = this.calcDepreciationAmountForReport(
                refAssetBook,
                startDate,
                endDate);
            }

            // inserts field 16(6)-7
            assetCorpTaxActAppendedTable6Tmp.DepAmountInCurrentTermEquallyDivided = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(refAssetBook, startDate, endDate);

            // inserts field 16(6)-8 and field 16(6)-9
            if ((assetCorpTaxActAppendedTable6Tmp.AllowableDepreciationAmounEquallyDivided - assetCorpTaxActAppendedTable6Tmp.DepAmountInCurrentTermEquallyDivided) > #DefaultAmount)
            {
                assetCorpTaxActAppendedTable6Tmp.UnderDepreciationEquallyDivided =
                    assetCorpTaxActAppendedTable6Tmp.AllowableDepreciationAmounEquallyDivided - assetCorpTaxActAppendedTable6Tmp.DepAmountInCurrentTermEquallyDivided;
            }
            else
            {
                assetCorpTaxActAppendedTable6Tmp.OverDepreciationEquallyDivided =
                    assetCorpTaxActAppendedTable6Tmp.DepAmountInCurrentTermEquallyDivided - assetCorpTaxActAppendedTable6Tmp.AllowableDepreciationAmounEquallyDivided;
            }
            // inserts field 16(6)-10
            assetCorpTaxActAppendedTable6Tmp.AmountFromPreviousTermEquallyDivided = this.getOverDepAmountFromPreviousTerm(startDate -1);

            // inserts field 16(6)-11
            assetCorpTaxActAppendedTable6Tmp.LossAmountEquallyDivided =
                min(assetCorpTaxActAppendedTable6Tmp.UnderDepreciationEquallyDivided, assetCorpTaxActAppendedTable6Tmp.AmountFromPreviousTermEquallyDivided);

            // inserts field 16(6)-12
            // AmountCarriedToNextTermEquallyDivided equls to the AmountFromPreviousTermEquallyDivided of next term
            assetCorpTaxActAppendedTable6Tmp.AmountCarriedToNextTermEquallyDivided = this.getOverDepAmountFromPreviousTerm(endDate);
        }
        else if (assetTable.AssetDeferredType_JP == AssetDeferredType_JP::OneTime)
        {
            // inserts field 16(6)-13
            assetCorpTaxActAppendedTable6Tmp.MajorType = assetMajorType.Description;
            // inserts field 16(6)-14
            assetCorpTaxActAppendedTable6Tmp.AcquisitionPrice = assetSumCalcAcq.acquisitionValue() + assetSumCalcAcq.acquisitionAdjValue() - assetSumCalcAcq.getRetirementObligationAcquisitionValue_JP();
            // inserts field 16(6)-15
            assetCorpTaxActAppendedTable6Tmp.AccumulatedDepAmount = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetBook, dateNull(), startDate - 1);
            // inserts field 16(6)-16
            assetCorpTaxActAppendedTable6Tmp.DepAmountInCurrentTerm = AssetDepTransMap_JP::calcAccumulatedDepAmountMst(assetBook, startDate, endDate);
            // inserts field 16(6)-17
            assetCorpTaxActAppendedTable6Tmp.BookValueAtEndCurentTerm = assetSumCalcAcq.netBookValue() - assetSumCalcAcq.getRetirementObligationNBV_JP();
        }

        //inserts the row number
        assetCorpTaxActAppendedTable6Tmp.RowGroupNum    = rowCount div #GroupNum;
        //inserts the colunm number
        assetCorpTaxActAppendedTable6Tmp.ColunmGroupNum = rowCount mod #GroupNum;
        if (assetCorpTaxActAppendedTable6Tmp.DepAmountInCurrentTermEquallyDivided > 0
            || assetCorpTaxActAppendedTable6Tmp.DepAmountInCurrentTerm > 0)
        {
            if (currency.CurrencyCode != #CurrencyJPY)
            {
                this.amountFromAccounttingToJPY();
            }
            assetCorpTaxActAppendedTable6Tmp.insert();
            rowCount ++;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBlankData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts the blank data.
    /// </summary>
    /// <param name="_blankColumnCount">
    /// Inserts the number of blank columns.
    /// </param>
    public void insertBlankData(int _blankColumnCount)
    {
        while (_blankColumnCount > 0)
        {
            assetCorpTaxActAppendedTable6Tmp.clear();

            //inserts the row number
            assetCorpTaxActAppendedTable6Tmp.RowGroupNum    = rowCount div #GroupNum;

            //inserts the colunm number
            assetCorpTaxActAppendedTable6Tmp.ColunmGroupNum = rowCount mod #GroupNum;

            assetCorpTaxActAppendedTable6Tmp.Insert();

            rowCount++;
            _blankColumnCount--;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeferredEquallyDivided</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the fixed asset is deferred equally divided.
    /// </summary>
    /// <returns>
    /// true if it is deferred equally divided type; otherwise, return false.
    /// </returns>
    public boolean isDeferredEquallyDivided()
    {
        return AssetTable.AssetType == AssetType::Deferred_JP
            && assetTable.AssetDeferredType_JP == AssetDeferredType_JP::EquallyDivided
            && assetDepreciationProfile.Method == AssetDepreciationMethod::EquallyDivided_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the records based on the specified values.
    /// </summary>
    public void processReport()
    {
        Query query;
        QueryRun queryRun;
        QueryBuildRange range;
        QueryBuildDataSource assetTable_ds;

        this.getReportParameters();

        // Initialize global variables, those variables are added in order to improve the performance.
        currency = Currency::find(Ledger::find(Ledger::current()).AccountingCurrency);
        currentUserLanguage = currentUserLanguage();
        currencyExchangeHelper = CurrencyExchangeHelper::newExchangeDate(
            Ledger::current(),
            printDate);

        rowCount = 0;
        query = this.parmQuery();

        AssetCorpTaxActAppendTablesHelper_JP::useAssetBookForAssetDepreciationProfileJoin(query);

        assetTable_ds = query.addDataSource(tableNum(AssetTable));
        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetBook)), fieldNum(AssetBook, UsedFromDate)).value(queryRange(dateNull(), endDate));
        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetBook)), fieldNum(AssetBook, Status)).value(SysQuery::valueNot(enum2str(AssetStatus::NoAcquisition)));
        range = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(AssetTable)), fieldNum(AssetTable, AssetType));
        range.value(enum2str(AssetType::Deferred_JP));
        assetTable_ds.addOrderByField(fieldNum(AssetTable, MajorType), SortOrder::Descending);
        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            if (queryRun.changed(tableNum(AssetTable)))
            {
                assetTable = queryRun.get(tableNum(AssetTable));
                assetBook = queryRun.get(tableNum(AssetBook));
                assetBookTable = queryRun.get(tableNum(AssetBookTable));
                assetMajorType = queryRun.get(tableNum(assetMajorType));
                assetDepreciationProfile = queryRun.get(tableNum(AssetDepreciationProfile));

                refAssetBook = null;
                if (assetBookTable.LinkedCurrentLayerAssetBookTable_JP)
                {
                    refAssetBook = AssetBook::find(assetTable.AssetId, assetBookTable.LinkedCurrentLayerAssetBookTable_JP);
                }
                if (!refAssetBook)
                {
                    // If the referenced value model isn't setup, take the related value from current value model,
                    // So assign current value model to refAssetBook variable.
                    refAssetBook = assetBook;
                }
                if (refAssetBook)
                {
                    assetDepreciationProfileExt     = AssetDepreciationProfile::find(assetBook.DepreciationExtProfile_JP);
                    refAssetDepreciationProfileExt  = AssetDepreciationProfile::find(refAssetBook.DepreciationExtProfile_JP);

                    assetCorpTaxActAppendedTable6Tmp.clear();
                    this.initAssetCorpTaxActAppendedTable6Tmp();
                }
            }
        }

        if (groupBy == AssetCorpTaxActAppendedTableGroupBy_JP::FixedAssetMajorType)
        {
            this.summarizeDataByMajorType();
            this.regenerateGroupNum();
        }

        this.insertGrandTotal();

        this.initAssetCorpTaxActAppendedHeaderTmp();
        // if the data less than 5, will insert the blank data
        if (rowCount == 0
            || rowCount mod #GroupNum)
        {
            this.insertBlankData(#GroupNum - (rowCount mod #GroupNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>summarizeDataByMajorType</Name>
				<Source><![CDATA[
    private void summarizeDataByMajorType()
    {
        AssetCorpTaxActAppendedTable6Tmp_JP assetCorpTaxActAppendedTable6TmpSum;

        //assetCorpTaxActAppendedTable6Tmp.clear();

        insert_recordset assetCorpTaxActAppendedTable6TmpSum (
            MajorTypeId, MajorTypeEquallyDivided, AcquisitionPriceEquallyDivided, AllowableDepreciationAmounEquallyDivided, DepAmountInCurrentTermEquallyDivided,
            UnderDepreciationEquallyDivided, OverDepreciationEquallyDivided, AmountFromPreviousTermEquallyDivided,
            LossAmountEquallyDivided, AmountCarriedToNextTermEquallyDivided)
            select MajorTypeId, MajorTypeEquallyDivided, sum(AcquisitionPriceEquallyDivided), sum(AllowableDepreciationAmounEquallyDivided), sum(DepAmountInCurrentTermEquallyDivided),
                sum(UnderDepreciationEquallyDivided), sum(OverDepreciationEquallyDivided), sum(AmountFromPreviousTermEquallyDivided), sum(LossAmountEquallyDivided),
                sum(AmountCarriedToNextTermEquallyDivided)
                from assetCorpTaxActAppendedTable6Tmp
                group by MajorTypeId, MajorTypeEquallyDivided
                where assetCorpTaxActAppendedTable6Tmp.SummarizeByMajorType == NoYes::Yes
                    && assetCorpTaxActAppendedTable6Tmp.MajorTypeEquallyDivided != '';

        delete_from assetCorpTaxActAppendedTable6Tmp
            where assetCorpTaxActAppendedTable6Tmp.SummarizeByMajorType == NoYes::Yes
                && assetCorpTaxActAppendedTable6Tmp.MajorTypeEquallyDivided != '';

        insert_recordset assetCorpTaxActAppendedTable6Tmp (MajorTypeId, MajorTypeEquallyDivided, AcquisitionPriceEquallyDivided, AllowableDepreciationAmounEquallyDivided, DepAmountInCurrentTermEquallyDivided,
            UnderDepreciationEquallyDivided, OverDepreciationEquallyDivided, AmountFromPreviousTermEquallyDivided, LossAmountEquallyDivided,
            AmountCarriedToNextTermEquallyDivided)
            select MajorTypeId, MajorTypeEquallyDivided, AcquisitionPriceEquallyDivided, AllowableDepreciationAmounEquallyDivided, DepAmountInCurrentTermEquallyDivided,
                UnderDepreciationEquallyDivided, OverDepreciationEquallyDivided, AmountFromPreviousTermEquallyDivided, LossAmountEquallyDivided,
                AmountCarriedToNextTermEquallyDivided
                from assetCorpTaxActAppendedTable6TmpSum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>regenerateGroupNum</Name>
				<Source><![CDATA[
    private void regenerateGroupNum()
    {
        rowCount = 0;

        ttsbegin;
        while select forupdate RowGroupNum, ColunmGroupNum from assetCorpTaxActAppendedTable6Tmp
            order by MajorTypeId, MajorTypeEquallyDivided desc
        {
            assetCorpTaxActAppendedTable6Tmp.RowGroupNum    = rowCount div #GroupNum;
            assetCorpTaxActAppendedTable6Tmp.ColunmGroupNum = rowCount mod #GroupNum;
            assetCorpTaxActAppendedTable6Tmp.update();

            rowCount++;
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertGrandTotal</Name>
				<Source><![CDATA[
    private void insertGrandTotal()
    {
        str majorType = SysLabel::labelId2String(literalstr("@FixedAssetsIncentiveDepreciation:Report16GrandTotal"));

        assetCorpTaxActAppendedTable6Tmp.clear();

        select sum(AcquisitionPriceEquallyDivided), sum(AllowableDepreciationAmounEquallyDivided), sum(DepAmountInCurrentTermEquallyDivided),
            sum(UnderDepreciationEquallyDivided), sum(OverDepreciationEquallyDivided), sum(AmountFromPreviousTermEquallyDivided),
            sum(LossAmountEquallyDivided), sum(AmountCarriedToNextTermEquallyDivided), sum(AcquisitionPrice), sum(AccumulatedDepAmount),
            sum(DepAmountInCurrentTerm), sum(BookValueAtEndCurentTerm) from assetCorpTaxActAppendedTable6Tmp;

        assetCorpTaxActAppendedTable6Tmp.MajorType                  = majorType;
        assetCorpTaxActAppendedTable6Tmp.MajorTypeEquallyDivided    = majorType;
        assetCorpTaxActAppendedTable6Tmp.RowGroupNum                = rowCount div #GroupNum;
        assetCorpTaxActAppendedTable6Tmp.ColunmGroupNum             = rowCount mod #GroupNum;

        assetCorpTaxActAppendedTable6Tmp.insert();

        rowCount ++;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>