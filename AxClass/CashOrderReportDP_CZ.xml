<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashOrderReportDP_CZ</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///     The <c>CashOrderReportDP_CZ</c> class extends the base class to add Czech specific functionality
///     for the Czech cash voucher report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(CashOrder))
]
class CashOrderReportDP_CZ extends CashOrderReportDP
{
    LedgerJournalTrans            ledgerJournalTrans;
    LedgerJournalTrans_RCash      ledgerJournalTrans_RCash;
    CashRegisterFiscalTrans_W     cashRegisterFiscalTrans;
    CashRegisterFiscalTransCode_W cashRegisterFiscalTransCode;
    CashRegisterTerminal_W        cashRegisterTerminal;
    CashRegisterLocation_W        cashRegisterLocation;
    CashRegisterOperator_W        cashRegisterOperator;
    boolean                       showVAT;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountNumName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Determines the account name based on the account type.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     <c>LedgerJournalTrans</c> table buffer.
    /// </param>
    /// <returns>
    ///     The account name.
    /// </returns>
    private AccountName accountNumName(LedgerJournalTrans _ledgerJournalTrans)
    {
        AccountName accountNumName;

        if (_ledgerJournalTrans.AccountType == LedgerJournalACType::Ledger && _ledgerJournalTrans.Company == curext())
        {
            accountNumName = _ledgerJournalTrans.accountName();
        }
        else
        {
            accountNumName = strFmt('%1 : %2', _ledgerJournalTrans.parmAccount(), _ledgerJournalTrans.accountName());
        }

        return accountNumName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTmpTransactions</Name>
				<Source><![CDATA[
    protected void createTmpTransactions(QueryRun _queryRun)
    {
        ledgerJournalTrans = _queryRun.get(tableNum(ledgerJournalTrans));
        cashTrans          = _queryRun.get(tablenum(RCashTrans));

        select firstonly RecId from ledgerJournalTrans_RCash
            where ledgerJournalTrans_RCash.RefRecId  == ledgerJournalTrans.RecId
               && ledgerJournalTrans_RCash.CashDocId == cashTrans.DocId;

        super(_queryRun);

        if (ledgerJournalTrans_RCash.RecId)
        {
            this.insertFromLedgerJournalTrans();

            if (newCashTrans && showVAT)
            {
                this.insertFromTaxTrans();
            }
        }

        if (newCashTrans)
        {
            RCashDocId cashTransDocId = cashTrans.DocId;
            NoYes cashRegisterCodeFlag = NoYes::Yes;

            insert_recordset cashOrderLines (DocId, CashRegisterCodeFlag,
                CashRegisterCodeName, CashRegisterCodeLabel, CashRegisterCodeValue)
            select cashTransDocId, cashRegisterCodeFlag, Name, Label, Value from cashRegisterFiscalTransCode
            exists join cashRegisterFiscalTrans
                where cashRegisterFiscalTrans.RecId      == cashRegisterFiscalTransCode.FiscalTrans
                    && cashRegisterFiscalTrans.Voucher   == ledgerJournalTrans.Voucher
                    && cashRegisterFiscalTrans.TransDate == ledgerJournalTrans.TransDate;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCompanyAddress</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Retrieves the address of the company in a format required for Czech cash order report.
    /// </summary>
    /// <returns>
    ///     The address of the company.
    /// </returns>
    protected LogisticsAddressing getCompanyAddress()
    {
        LogisticsAddressing  address = super();

        return strfmt("@GLS111171",
            strline(address, 0),
            strline(address, 1),
            strline(address, 2));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContactName</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the contact name based on the representative type.
    /// </summary>
    /// <returns>
    ///     The contact name.
    /// </returns>
    protected Name getContactName()
    {
        Name contactName;

        switch (cashTrans.DocRepresType)
        {
            case RCashDocRepresType::Employee:
                switch (cashTrans.OffsetAccountType)
                {
                    case LedgerJournalACType::Cust,
                        LedgerJournalACType::Vend:
                        contactName = ContactPerson::find(cashTrans.DocRepresPersonId).personName();
                        break;
                    default:
                        contactName = EmployeeTable_RU::findByEmployeeId(cashTrans.DocRepresPersonId).employeeName();
                }
                break;
            case RCashDocRepresType::Customer:
                contactName = CustTable::find(cashTrans.DocRepresPersonId).name();
                break;
            case RCashDocRepresType::Vendor:
                contactName = VendTable::find(cashTrans.DocRepresPersonId).name();
                break;
        }

        return contactName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Overrides the base method to make Czech specific changes to cash order query.
    /// </summary>
    /// <returns>
    ///     The query to retrieve data for cash order report.
    /// </returns>
    protected Query getQuery()
    {
        Query ret = super();

        ret.dataSourceTable(tableNum(LedgerJournalTrans)).enabled(true);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCashOrderLinesTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Overrides the base methd to perform Czech specific initializations for <c>CashOrderLinesTmp</c> table buffer.
    /// </summary>
    /// <returns>
    /// The <c>CashOrderLinesTmp</c> table buffer.
    /// </returns>
    protected CashOrderLinesTmp initializeCashOrderLinesTmp()
    {
        cashOrderLines                  = super();
        cashOrderLines.RepresPersonCard = transType.represPersonCard();
        cashOrderLines.ContactName      = this.getContactName();

        showVAT = cashOrderLines.OffsetAccountType != LedgerJournalACType::Cust
            && cashOrderLines.OffsetAccountType != LedgerJournalACType::Vend;

        this.initializeFromLedgerJournalTrans(cashOrderLines, ledgerJournalTrans);

        cashRegisterFiscalTrans = CashRegisterFiscalTrans_W::findVoucherDate(cashOrderLines.Voucher, cashOrderLines.TransDate);
        if (cashRegisterFiscalTrans)
        {
            cashRegisterTerminal    = CashRegisterTerminal_W::find(cashRegisterFiscalTrans.Terminal);
            cashRegisterLocation    = CashRegisterLocation_W::find(cashRegisterTerminal.Location);
            cashRegisterOperator    = CashRegisterOperator_W::find(cashRegisterFiscalTrans.Operator);
            cashOrderLines.CashRegisterCode                 = CashRegister_W::find(cashRegisterFiscalTrans.CashRegister).Code;
            cashOrderLines.CashRegisterLocationCode         = cashRegisterLocation.Code;
            cashOrderLines.CashRegisterBusinessPremisesID   = cashRegisterLocation.businessPremisesIdAsOfDate_CZ();
            cashOrderLines.CashRegisterOperatorCode         = cashRegisterOperator.Code;
            cashOrderLines.CashRegisterOperatorName         = HcmWorker::find(cashRegisterOperator.HcmWorker).name();
            cashOrderLines.CashRegisterReceiptNumber        = cashRegisterFiscalTrans.ReceiptNumber;
            cashOrderLines.CashRegisterTransDateTime        = cashRegisterFiscalTrans.TransDateTime;
            cashOrderLines.CashRegisterTerminalCode         = cashRegisterTerminal.Code;
        }

        return cashOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Performs initialization of <c>CashOrderLinesTmp</c> table buffer from <c>LedgerJournalTrans</c> table.
    /// </summary>
    /// <param name="_cashOrderLines">
    ///     The <c>CashOrderLinesTmp</c> table buffer to initialize.
    /// </param>
    /// <param name="_ledgerJournalTrans">
    ///     The <c>LedgerJournalTrans</c> table buffer to initialize from.
    /// </param>
    /// <returns>
    ///     The initialized <c>CashOrderLinesTmp</c> table buffer.
    /// </returns>
    protected CashOrderLinesTmp initializeFromLedgerJournalTrans(
        CashOrderLinesTmp   _cashOrderLines,
        LedgerJournalTrans  _ledgerJournalTrans)
    {
        LedgerJournalTrans                          ledgerJournalTransLocal;
        if (ledgerJournalTrans_RCash)
        {
            cashOrderLines.Txt                          = _ledgerJournalTrans.Txt? _ledgerJournalTrans.Txt + ' - ' : "";
            cashOrderLines.Txt                          += this.accountNumName(_ledgerJournalTrans);
            cashOrderLines.LedgerJournalTransAmtCurDb   = _ledgerJournalTrans.AmountCurDebit;
            cashOrderLines.LedgerJournalTransAmtCurCr   = _ledgerJournalTrans.AmountCurCredit;
            cashOrderLines.DimensionDisplayValue        = LedgerDimensionFacade::getDisplayValueForLedgerDimension(_ledgerJournalTrans.LedgerDimension);
            cashOrderLines.Voucher                      = cashTrans.Voucher;
            cashOrderLines.DocId                        = cashTrans.DocId;
            cashOrderLines.PaymReference                = _ledgerJournalTrans.PaymReference;
            cashOrderLines.VatDueDate_W                 = _ledgerJournalTrans.VatDueDate_W;
            if (!cashOrderLines.VatDueDate_W && showVAT && newCashTrans)
            {
                select firstOnly maxOf(VatDueDate_W) from ledgerJournalTransLocal
                    where ledgerJournalTransLocal.Voucher       == _ledgerJournalTrans.Voucher
                       && ledgerJournalTransLocal.TransDate     == _ledgerJournalTrans.Transdate;

                cashOrderLines.VatDueDate_W                 = ledgerJournalTransLocal.VatDueDate_W;
            }
        }

        return _cashOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts additional records into <c>CashOrderLinesTmp</c> table based on the
    ///     ledger journal lines.
    /// </summary>
    /// <returns>
    ///     <c>CashOrderLinesTmp</c> table buffer.
    /// </returns>
    protected CashOrderLinesTmp insertFromLedgerJournalTrans()
    {
        cashOrderLines.clear();

        if (!newCashTrans)
        {
            cashOrderLines = this.initializeFromLedgerJournalTrans(cashOrderLines, LedgerJournalTrans);
            cashOrderLines.insert();
        }

        if (ledgerJournalTrans.parmOffsetLedgerDimension())
        {
           cashOrderLines = this.initializeFromLedgerJournalTrans(cashOrderLines, this.ledgerJournalTransOffset(LedgerJournalTrans));
           cashOrderLines.insert();
        }

        return cashOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertFromTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Inserts additional records into <c>CashOrderLinesTmp</c> table based on the
    ///     summarized tax transactions.
    /// </summary>
    /// <returns>
    ///     <c>CashOrderLinesTmp</c> table buffer.
    /// </returns>
    protected CashOrderLinesTmp insertFromTaxTrans()
    {
        TaxTrans                taxTrans;
        TaxCalculationJournal   taxCalculationJournal;
        TmpTaxWorkTrans         tmpTaxWorkTrans;

        if (cashTrans.Posted)
        {
            if (CashOrderReportCZTaxRegulationFlight::instance().isEnabled())
            {
                while select taxTrans
                    where taxTrans.Voucher == cashTrans.Voucher
                        && taxTrans.TransDate == cashTrans.TransDate
                        && taxTrans.TaxDirection != TaxDirection::OutgoingTax_W
                        && taxTrans.TaxDirection != TaxDirection::IncomingTax_W
                {
                    tmpTaxWorkTrans.clear();
                    tmpTaxWorkTrans.initFromTaxTrans(taxTrans);
                    tmpTaxWorkTrans.CalculationDate = cashTrans.TransDate;
                    tmpTaxWorkTrans.insert();
                }
            }
            else
            {
                while select taxTrans
                    where taxTrans.Voucher == cashTrans.Voucher
                        && taxTrans.TransDate == cashTrans.TransDate
                {
                    tmpTaxWorkTrans.clear();
                    tmpTaxWorkTrans.initFromTaxTrans(taxTrans);
                    tmpTaxWorkTrans.CalculationDate = cashTrans.TransDate;
                    tmpTaxWorkTrans.insert();
                }
            }
        }
        else
        {
            taxCalculationJournal = LedgerJournalTrans::getTaxInstance(ledgerJournalTrans.JournalNum, ledgerJournalTrans.Voucher, ledgerJournalTrans.Invoice, false);
            tmpTaxWorkTrans = taxCalculationJournal.tmpTaxWorkTrans();
        }

        while select sum(TaxBaseQty),
                     sum(SourceTaxAmountCur),
                     sum(SourceBaseAmountCur),
                     sum(SourceRegulateAmountCur),
                     sum(SourceBaseAmountCurRegulated),
                     sum(TaxAmount),
                     sum(TaxBaseAmount)
            from tmpTaxWorkTrans
            group by TaxCode, TaxDirection, SourceCurrencyCode, TaxAutogenerated, TransDate,
                euroTriangulation, LedgerDimension, OperationLedgerDimension, CalculationDate
        {
            cashOrderLines.clear();
            cashOrderLines.TaxAmountCur = abs(tmpTaxWorkTrans.transactionCurrencyTaxAmount());
            cashOrderLines.TaxBaseAmountCur = abs(tmpTaxWorkTrans.taxBaseCur_W());

            if (CashOrderReportCZTaxRegulationFlight::instance().isEnabled())
            {
                SalesTaxTransactionExchangeRate salesTaxTransactionExchangeRate = SalesTaxTransactionExchangeRate::findBySourceRecord(tableNum(LedgerJournalTrans), ledgerJournalTrans.RecId);
                CurrencyExchangeRate currencyExchangeRate = ledgerJournalTrans.ExchRate;
                if (salesTaxTransactionExchangeRate)
                {
                    currencyExchangeRate = salesTaxTransactionExchangeRate.SalesTaxExchangeRate;
                    cashOrderLines.ExchRate = salesTaxTransactionExchangeRate.SalesTaxExchangeRate / 100;
                }
                else
                {
                    cashOrderLines.ExchRate = cashTrans.AmountCur ? (cashTrans.AmountMST / cashTrans.AmountCur) : 0;
                }
                cashOrderLines.TaxBaseAmount = ledgerJournalTrans.ExchRate ? abs(tmpTaxWorkTrans.TaxBaseAmount) * currencyExchangeRate / ledgerJournalTrans.ExchRate : abs(tmpTaxWorkTrans.TaxBaseAmount);
                if (tmpTaxWorkTrans.SourceRegulateAmountCur != 0)
                {
                    cashOrderLines.TaxAmount = abs(tmpTaxWorkTrans.SourceRegulateAmountCur) * currencyExchangeRate / 100;
                }
                else
                {
                    cashOrderLines.TaxAmount = abs(tmpTaxWorkTrans.TaxAmount);
                }
            }
            else
            {
                cashOrderLines.TaxAmount = abs(tmpTaxWorkTrans.TaxAmount);
                cashOrderLines.TaxBaseAmount = abs(tmpTaxWorkTrans.TaxBaseAmount);
                cashOrderLines.ExchRate = cashTrans.AmountCur ? (cashTrans.AmountMST / cashTrans.AmountCur) : 0;
            }

            cashOrderLines.TaxValue = abs(tmpTaxWorkTrans.showTaxValue());
            cashOrderLines.DocId = cashTrans.DocId;
            cashOrderLines.insert();
        }

        return cashOrderLines;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTransOffset</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Swaps some of the values in the <c>ledgerJournalTrans</c> table buffer with offset values
    ///     so that same fields can be used to initialize from.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    ///     The <c>ledgerJournalTrans</c> table buffer.
    /// </param>
    /// <returns>
    ///     The <c>ledgerJournalTrans</c> table buffer with swapped values.
    /// </returns>

    private LedgerJournalTrans ledgerJournalTransOffset(LedgerJournalTrans _ledgerJournalTrans)
    {
        _ledgerJournalTrans.parmLedgerDimension(_ledgerJournalTrans.parmOffsetLedgerDimension());
        _ledgerJournalTrans.AccountType     = _ledgerJournalTrans.OffsetAccountType;
        _ledgerJournalTrans.Company         = _ledgerJournalTrans.OffsetCompany ? _ledgerJournalTrans.OffsetCompany : _ledgerJournalTrans.Company;
        _ledgerJournalTrans.Txt             = _ledgerJournalTrans.OffsetTxt ? _ledgerJournalTrans.OffsetTxt : _ledgerJournalTrans.Txt;
        AmountCur amountCurLocal            = ledgerJournalTrans.AmountCurDebit;
        _ledgerJournalTrans.AmountCurDebit  = _ledgerJournalTrans.AmountCurCredit;
        _ledgerJournalTrans.AmountCurCredit = amountCurLocal;
        return _ledgerJournalTrans;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>