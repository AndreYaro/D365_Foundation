<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntercompanySalesAtCostPriceFormLetterHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntercompanySalesAtCostPriceFormLetterHandler</c> is responsible for updating sales price to cost price 
/// for sales order lines which are being selected for a packing slip or invoice update.
/// </summary>
class IntercompanySalesAtCostPriceFormLetterHandler
{
    Set                     intercompanyPurchOrderDataAreaAndIds;
    CreatedTransactionId    selectionStartedTTSId;
    int                     nestingLevel;
    
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntercompanySalesAtCostPriceFormLetterHandler construct()
    {
        return new IntercompanySalesAtCostPriceFormLetterHandler();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentTTSId</Name>
				<Source><![CDATA[
    private CreatedTransactionId currentTTSId()
    {
        return appl.ttsLevel() > 0 ? appl.curTransactionId(true) : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSalesLinesSelectionStarted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when the sales line selection for packing slip or invoice update has just started.
    /// </summary>
    /// <remarks>
    /// When this method is called in a transaction scope you must ensure that 
    /// the <c>onSalesLineSelected</c> and <c>onSalesLinesSelectionFinished</c> methods are called in the same transaction scope.
    /// </remarks>
    public void onSalesLinesSelectionStarted()
    {
        // Ensure that we are not calling the onSalesLinesSelectionStarted method twice before calling onSalesLinesSelectionFinished
        Debug::assert((intercompanyPurchOrderDataAreaAndIds == null && selectionStartedTTSId == 0) || selectionStartedTTSId == this.currentTTSId());

        selectionStartedTTSId = this.currentTTSId();
        nestingLevel++;
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSalesLineSelected</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when the specified sales line has just been selected for packing slip or invoice update.
    /// </summary>
    /// <param name="_salesLine">The sales line that has just been selected for packing slip or invoice update.</param>
    /// <remarks>
    /// When this method is called in a transaction scope you must ensure that
    /// the <c>onSalesLinesSelectionStarted</c> and <c>onSalesLinesSelectionFinished</c> methods are called in the same transaction scope.
    /// </remarks>
    public void onSalesLineSelected(SalesLine _salesLine)
    {
        if (_salesLine.InterCompanyInventTransId
            && _salesLine.salesTable().interCompanyEndpointActionPolicy().UnitPriceEqualsCostPrice
            && !_salesLine.isInterCompanyOrderLineInvoiceMatched())
        {
            ttsbegin;

            SalesPrice origSalesPrice = _salesLine.SalesPrice;
            _salesLine.SalesPrice = _salesLine.type().interCompanyCalcSalesPrice();

            if (_salesLine.SalesPrice != origSalesPrice)
            {
                boolean delayDistribution = selectionStartedTTSId && selectionStartedTTSId == this.currentTTSId();

                _salesLine.LineAmount = _salesLine.calcLineAmount();

                SalesLine salesLineLocal = SalesLine::findRecId(_salesLine.RecId, true);
                salesLineLocal.SalesPrice = _salesLine.SalesPrice;
                salesLineLocal.LineAmount = _salesLine.LineAmount;
                salesLineLocal.SkipUpdate = InterCompanySkipUpdate::Internal;
                salesLineLocal.SkipIntercompanyPurchOrderAccountingDistribution = delayDistribution;
                salesLineLocal.update();
                
                if (delayDistribution)
                {
                    PurchLine intercompanyPurchLine = salesLineLocal.interCompanyPurchLine();

                    if (!intercompanyPurchOrderDataAreaAndIds)
                    {
                        intercompanyPurchOrderDataAreaAndIds = new Set(Types::Container);
                    }

                    intercompanyPurchOrderDataAreaAndIds.add([intercompanyPurchLine.DataAreaId, intercompanyPurchLine.PurchId]);
                }
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onSalesLinesSelectionFinished</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles the event when the sales line selection for packing slip or invoice update has just finished.
    /// </summary>
    /// <remarks>
    /// When this method is called in a transaction scope you must ensure that
    /// the <c>onSalesLinesSelectionStarted</c> and <c>onSalesLineSelected</c> methods are called in the same transaction scope.
    /// </remarks>
    public void onSalesLinesSelectionFinished()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>