<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BankCurrencyRevalPostingCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class BankCurrencyRevalPostingCalculator
{
    private BankCurrencyRevalTmp bankCurrencyRevalTmp;
    private BankCurrencyRevalTmp expandedBankCurrencyRevalTmp;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    internal void new(BankCurrencyRevalTmp _bankCurrencyRevalTmp, BankCurrencyRevalTmp _expandedBankCurrencyRevalTmp)
    {
        bankCurrencyRevalTmp.useExistingTempDBTable(_bankCurrencyRevalTmp.getPhysicalTableName());
        expandedBankCurrencyRevalTmp.useExistingTempDBTable(_expandedBankCurrencyRevalTmp.getPhysicalTableName());
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCalculation</Name>
				<Source><![CDATA[
    internal BankCurrencyRevalTmp doCalculation()
    {
        BankCurrencyRevalTmp bankCurrencyRevalTmpLocal;
        bankCurrencyRevalTmpLocal.useExistingTempDBTable(bankCurrencyRevalTmp.getPhysicalTableName());

        while select LegalEntity from bankCurrencyRevalTmpLocal
            group by LegalEntity
        {
            CompanyInfo companyInfo = CompanyInfo::find(false, bankCurrencyRevalTmpLocal.LegalEntity);
            
            changecompany(companyInfo.DataArea)
            {
                this.calculateBalanceAcrossDimension(expandedBankCurrencyRevalTmp);
                this.calculateExchAdjAcrossDimension(expandedBankCurrencyRevalTmp);
            }
        }
        
        BankCurrencyRevalDataTrimmer trimmer = BankCurrencyRevalDataTrimmer::newFromBankCurrencyRevalTmp(expandedBankCurrencyRevalTmp);
        trimmer.trim();

        return expandedBankCurrencyRevalTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBalanceAcrossDimension</Name>
				<Source><![CDATA[
    private void calculateBalanceAcrossDimension(BankCurrencyRevalTmp _expandedBankCurrencyRevalTmp)
    {
        SysInstrumentationProgressLogger progressLogger = this.createProgressLogger();
        SysInstrumentationProgressStage progressStage = progressLogger.createStage(BankInstrumentationConstants::BankCurrencyRevaluationCalculateByDimension, this.getCountOfRevaluations());

        using (SysInstrumentationActivityContext activityContext = progressLogger.activityContextWithProgressMonitor(progressStage))
        {
            BankAccountTable bankAccountTable;
            int distributionCount;

            while select bankCurrencyRevalTmp
                where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                exists join bankAccountTable
                    where bankCurrencyRevalTmp.BankAccountId == bankAccountTable.AccountID
                        && bankAccountTable.RevalDimensionSetting == BankCurrencyRevalDimensionSetting::None
            {
                _expandedBankCurrencyRevalTmp.clear();
                _expandedBankCurrencyRevalTmp.data(bankCurrencyRevalTmp);
                _expandedBankCurrencyRevalTmp.DefaultDimension = 0;
                _expandedBankCurrencyRevalTmp.insert();

                distributionCount++;
                progressLogger.trackProgress(distributionCount);
            }

            while select bankCurrencyRevalTmp
                where bankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
                join bankAccountTable
                    where bankCurrencyRevalTmp.BankAccountId == bankAccountTable.AccountID
                        && bankAccountTable.RevalDimensionSetting == BankCurrencyRevalDimensionSetting::All
            {
                BankAccountBalanceCalculator bankAccountBalanceCalculator = BankAccountBalanceCalculator::newFromBankAccountTable(bankAccountTable);

                List bankAccountDefaultDimensionBalanceList = new List(Types::Class);
                bankAccountDefaultDimensionBalanceList.appendList(bankAccountBalanceCalculator.calculateByDefaultDimension(bankCurrencyRevalTmp.TransDate));

                ListEnumerator bankAccountDefaultDimensionBalanceListEnumerator = bankAccountDefaultDimensionBalanceList.getEnumerator();

                while (bankAccountDefaultDimensionBalanceListEnumerator.moveNext())
                {
                    BankAccountDefaultDimensionBalance bankAccountDefaultDimensionBalance = bankAccountDefaultDimensionBalanceListEnumerator.current() as BankAccountDefaultDimensionBalance;
                    BankAccountBalance bankAccountBalance = bankAccountDefaultDimensionBalance.parmBankAccountBalance();

                    _expandedBankCurrencyRevalTmp.clear();
                    _expandedBankCurrencyRevalTmp.data(bankCurrencyRevalTmp);
                    _expandedBankCurrencyRevalTmp.DefaultDimension = bankAccountDefaultDimensionBalance.parmDefaultDimension();
                    _expandedBankCurrencyRevalTmp.BankCurrencyAmount = bankAccountBalance.parmAmountCurBalance();
                    _expandedBankCurrencyRevalTmp.AccountingCurrencyAmount = bankAccountBalance.parmAmountMstBalance();
                    _expandedBankCurrencyRevalTmp.ReportingCurrencyAmount = bankAccountBalance.parmReportingCurrencyBalance();
                    _expandedBankCurrencyRevalTmp.insert();
                }
                distributionCount++;
                progressLogger.trackProgress(distributionCount);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExchAdjAcrossDimension</Name>
				<Source><![CDATA[
    private void calculateExchAdjAcrossDimension(BankCurrencyRevalTmp _expandedBankCurrencyRevalTmp)
    {
        ttsbegin;

        while select forupdate _expandedBankCurrencyRevalTmp
            where _expandedBankCurrencyRevalTmp.LegalEntity == CompanyInfo::current()
        {
            BankCurrencyRevalAdjustmentCalculator bankCurrencyRevalAdjustmentCalculator = BankCurrencyRevalAdjustmentCalculator::newFromCompanyExchangeDate(CompanyInfo::current(), _expandedBankCurrencyRevalTmp.ExchangeRateDate);

            _expandedBankCurrencyRevalTmp.AccountingCurrencyAdjustmentAmount = bankCurrencyRevalAdjustmentCalculator.calculateAccountingCurrencyAdjustmentAmount(_expandedBankCurrencyRevalTmp);
            _expandedBankCurrencyRevalTmp.ReportingCurrencyAdjustmentAmount = bankCurrencyRevalAdjustmentCalculator.calculateReportingCurrencyAdjustmentAmount(_expandedBankCurrencyRevalTmp);
            
            _expandedBankCurrencyRevalTmp.update();
        }

        ttscommit;

    }

]]></Source>
			</Method>
			<Method>
				<Name>createProgressLogger</Name>
				<Source><![CDATA[
    private SysInstrumentationProgressLogger createProgressLogger()
    {
        return SysInstrumentationProgressLogger::createLogger(BankInstrumentationConstants::SourceNameBankCurrencyRevaluation, BankInstrumentationConstants::BankNamespace);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCountOfRevaluations</Name>
				<Source><![CDATA[
    private int64 getCountOfRevaluations()
    {
        select count(RecId) from bankCurrencyRevalTmp;

        return bankCurrencyRevalTmp.RecId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>