<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransFormPo</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ReqTransFormPo extends ReqTransFormInventDim implements ReqTransFormMultiSelectionObserver
{
    ReqRefType                  reqRefType;

    boolean                     useCheckmarks;
    private boolean reqPODSMarkChangedIsUsed;

    #Define.CurrentVersion(6)

    #Localmacro.CurrentList
        LockReqPOStatus,
        ReqPOStatus,
        LockItemGroupId,
        ItemGroupId,
        LockBuyerGroupId,
        BuyerGroupId,
        LockVendId,
        VendId,
        LockReqDateOrder,
        ReqDateOrder,
        lockReqFirmDate,
        reqFirmDate,
        lockReqFirmUserId,
        reqFirmUserId,
        LockReqPOType,
        ReqPOType,
        pmfLockReqPlannedType,
        PmfBOMFormula,
        lockSiteId,
        inventSiteId
    #endMacro

    // Query ranges
    QueryBuildRange             rangeRefId;
    QueryBuildRange             rangeRefType;
    QueryBuildRange             rangeReqPOStatus;
    QueryBuildRange             rangeInventSiteId;

    QueryBuildDataSource rootQbds;
    ReqTransFormMultiSelectionState multiSelectionState;

    // ReqPo
    ReqPO                       reqPO;
    FormDataSource              reqPo_DS;

    boolean                     createByForm;

    PurchId                     callerPurchId;
    VendAccount                 callerVendId;
    InventTransRefId            callerRefId;

    boolean                     doReReadReqTrans;

    // global objects

    Map                         mapFromInventLocationId;

    FormCheckBoxControl        pmfCtrlLockReqPlannedType;
    FormComboBoxControl        pmfCtrlBOMFormula;
    NoYes                      pmfLockReqPlannedType;
    PmfBOMFormula              pmfBOMFormula;
    boolean                    pmfFilter;
    QueryBuildRange            pmfBOMFormulaRange,pmfLogRange;
    FormDataSource             batchReqTrans_ds;
    boolean                    isBatch;

    ReqPeggingBatchQueryBuilder reqPeggingBatchQueryBuilder;

    //
    // Keeps track whether multiple orders are being deleted.
    // isDeletingMultiOrders is true within the timeframe between calls to
    // reqPoDSDeleteMarkedPre and reqPoDSDeleteMarkedPost methods.
    //
    boolean                     isDeletingMultiOrders;
    //
    // Keeps track whether a production order is being deleted.
    // isDeletingProductionOrder might be true only within one of the following timeframes:
    // - between calls to reqPoDSDeletePre and reqPoDSDeletePost methods.
    // - between calls to reqPoDSDeleteMarkedPre and reqPoDSDeleteMarkedPost methods.
    //
    boolean                     isDeletingProductionOrder;

    ReqTransFormButtonStateProviderDetail buttonStateProvider;
    QueryBuildRange             rangeVendId;

    FormDataSource              reqTransFilterTempdb_ds;
    boolean                     reqTransFormPoRefreshEnabled;
    private readonly boolean    reqTransFormPoDeletingMultiOrdersFlightIsEnabled;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>batchReqTransDSExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called before the executequery on the form.
    /// it builds a query related to batch reqtrans for a formula
    /// or by recid if its a non-formula
    /// </summary>
    public void batchReqTransDSExecuteQueryPre()
    {
        isBatch = reqPeggingBatchQueryBuilder.batchReqTransDsExecuteQueryPre(reqTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>batchReqTransDSInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initilized the datasource for the form.
    /// Here querybuildranges are added.
    /// </summary>
    /// <param name="_reqTrans">planned transaction buffer</param>
    public void batchReqTransDSInitPost(ReqTrans _reqTrans)
    {
        batchReqTrans_ds    = FormDataUtil::getFormDataSource(_reqTrans);

        reqPeggingBatchQueryBuilder = new ReqPeggingBatchQueryBuilder();
        reqPeggingBatchQueryBuilder.batchReqTransDsInit(batchReqTrans_ds.query());
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonReqCalcScheduleExpPOClickedPre</Name>
				<Source><![CDATA[
    public void buttonReqCalcScheduleExpPOClickedPre()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>buttonStateProvider</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns an instance of the <c>ReqTransFormButtonStateProviderDetail</c> class that controls the
    ///    rules for enabling and disabling buttons.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>ReqTransFormButtonStateProviderDetail</c> class.
    /// </returns>
    public ReqTransFormButtonStateProviderDetail buttonStateProvider()
    {
        return buttonStateProvider;
    }

]]></Source>
			</Method>
			<Method>
				<Name>callerPurchId</Name>
				<Source><![CDATA[
    PurchId callerPurchId()
    {
        return callerPurchId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBOMIdChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Refreshes the planned order view if the bill of materials ID has changed.
    /// </summary>
    /// <remarks>
    ///    If BOM has changed for a planned production order, you must refresh the orders view because BOM is
    ///    exploded into new orders which have to be displayed.
    /// </remarks>
    public void checkBOMIdChanged()
    {
        if (ReqTrans::refTypeCanHaveBOM(reqPO.RefType))
        {
            if (reqPO.orig().ItemBomId != reqPO.ItemBomId)
            {
                this.updatePlannedOrderView();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearCache</Name>
				<Source><![CDATA[
    void clearCache()
    {
        markedRecordsCached = false;
        reqTransCurrentCached = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultReqPlanIdSched</Name>
				<Source><![CDATA[
    ReqPlanId defaultReqPlanIdSched()
    {
        return ReqPlanSched::defaultStaticId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReqPoFormCache</Name>
				<Source><![CDATA[
    public void deleteReqPoFormCache(container _con) // Packed map with ReqPo
    {
        if (! reqPo_DS.getFirst(0,false) && ! reqPo_DS.getFirst(1,false))
        {
            reqPo_DS.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteReqTransFormCache</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPParameterNotUsed', 'The parameter is not used but it is mandate by the API it is extending, implementing or mocking.')]
    public void deleteReqTransFormCache(container _con) // Packed map with ReqTrans
    {
        // nothing
    }

]]></Source>
			</Method>
			<Method>
				<Name>doReread</Name>
				<Source><![CDATA[
    public void doReread()
    {
        reqPo_DS.reread();
        reqTrans_ds.reread();
        reqPo_DS.active();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doResearch</Name>
				<Source><![CDATA[
    public void doResearch()
    {
        reqPo_DS.research(true);
        // reqTransCov_ds is null if the class is used on the list page.
        if (reqTransCov_ds)
        {
            reqTransCov_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>doRereadRefreshAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Rereads and refreshes all form data sources. If there are a lot of planned orders the research could consume some time.
    /// Research is used by default because it fetches newly created planned orders as well.
    /// Customers could instead use refresh to get better form performance.
    /// </summary>
    internal void doRereadRefreshAll()
    {
        for (int i = 1; i <= formRun.dataSourceCount(); i++)
        {
            FormDataSource fds = formRun.dataSource(i);

            fds.cursor().data(this.findSourceRecord(fds.name()));
            fds.setCurrent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findSourceRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the record for the datasource. 
    /// This method could be extended in case form's customization has new data sources that should be refreshed.
    /// </summary>
    /// <param name = "_dataSourceName">Form datasource name</param>
    /// <returns>Refreshed record</returns>
    public Common findSourceRecord(str _dataSourceName)
    {
        Common record;

        switch (_dataSourceName)
        {
            case formDataSourceStr(ReqTransPo, ReqTrans) :
                record = reqPO.reqTrans();
                break;

            case formDataSourceStr(ReqTransPo, InventDim) :
                record = InventDim::find(reqPO.CovInventDimId);
                break;

            case formDataSourceStr(ReqTransPo, ReqPlanVersion) :
                record = ReqPlanVersion::find(reqPO.PlanVersion);
                break;

            case formDataSourceStr(ReqTransPo, ReqPlan) :
                record = ReqPlan::findReqPlanId(ReqPlanVersion::find(reqPO.PlanVersion).ReqPlanId);
                break;

            case formDataSourceStr(ReqTransPo, ReqTransTransferIssue) :
                if (reqPO.reqTrans().RefType == ReqRefType::TransferPlannedOrder)
                {
                    record = reqPO.reqTrans().selectDerived();
                }
                break;

            case formDataSourceStr(ReqTransPo, InventDimTransferIssue) :
                if (reqPO.reqTrans().RefType == ReqRefType::TransferPlannedOrder)
                {
                    record = reqPO.reqTrans().selectDerived().inventDim();
                }
                break;

            default:
                record = formRun.dataSource(_dataSourceName).cursor();
        }

        return record;
    }

]]></Source>
			</Method>
			<Method>
				<Name>editFromInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets and sets the originating warehouse that is related to a planned transfer order.
    /// </summary>
    /// <param name="_set">
    ///    true if the originating warehouse is set; otherwise, false.
    /// </param>
    /// <param name="_reqTrans">
    ///    A record of the <c>reqTrans</c> type.
    /// </param>
    /// <param name="_inventLocationId">
    ///    The new warehouse ID when <paramref name="_set" /> is true.
    /// </param>
    /// <returns>
    ///    A string that holds the from warehouse ID.
    /// </returns>
    InventLocationId editFromInventLocationId(
        boolean             _set,
        ReqTrans            _reqTrans,
        InventLocationId    _inventLocationId)
    {
        if (! mapFromInventLocationId)
        {
            mapFromInventLocationId = new Map(typeName2Type(extendedTypeStr(recId)), Types::String);
        }

        if (_set)
        {
            if (ReqTransFormPO::changeFromInventLocationId(_reqTrans,_inventLocationId))
            {
                if (mapFromInventLocationId.exists(_reqTrans.RecId))
                {
                    mapFromInventLocationId.remove(_reqTrans.RecId);
                }
            }
        }

        if (! mapFromInventLocationId.exists(_reqTrans.RecId))
        {
            mapFromInventLocationId.insert(_reqTrans.RecId,_reqTrans.reqPo().fromInventLocationId());
        }

        return mapFromInventLocationId.lookup(_reqTrans.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>editReqTransMark</Name>
				<Source><![CDATA[
    public NoYes editReqTransMark(
        boolean      _set,
        ReqTrans     _reqTrans,
        NoYes        _mark
        )
    {
        NoYes   click;

        if (_set)
        {
            if (_mark)
            {
                click = NoYes::Yes;
                multiSelectionState.addRecord(_reqTrans,true);
            }
            else
            {
                click = NoYes::No;
                multiSelectionState.removeRecord(_reqTrans);
            }
        }
        else
        {
            click = multiSelectionState.isRecordMarked(_reqTrans);
        }

        return click;
    }

]]></Source>
			</Method>
			<Method>
				<Name>formPreClose</Name>
				<Source><![CDATA[
    public void formPreClose(boolean _saveLast = true)
    {
        super(this.callerPurchId() || callerRefId ? false : true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>formUpdateDesign</Name>
				<Source><![CDATA[
    void formUpdateDesign(InventDimFormDesignUpdate mode)
    {
        switch (mode)
        {
            case InventDimFormDesignUpdate::Init        :
                InventDimParm enabledInventDimParm = this.parmInventDimParmEnabled();

                if (reqRefType == ReqRefType::TransferPlannedOrder)
                {
                    enabledInventDimParm.InventLocationIdFlag = NoYes::Yes;
                }

                this.parmInventDimFormSetup().parmDimParmVisibleGrid(enabledInventDimParm.data());

            case InventDimFormDesignUpdate::Active      :
                if (reqTrans.RecId)
                {
                    this.parmInventDimFormSetup().parmDimParmEnabled(this.parmActiveCoverageInventDimParm().data());
                }

                this.parmInventDimFormSetup().formSetControls(true);

                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmActiveCoverageInventDimParm</Name>
				<Source><![CDATA[
    private InventDimParm parmActiveCoverageInventDimParm()
    {
        InventDimParm activeCoverageInventDimParm;

        activeCoverageInventDimParm.initCovPrDimension(InventDimGroupSetup::newItemId(reqTrans.ItemId));

        return activeCoverageInventDimParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initButtonRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes button rules.
    /// </summary>
    void initButtonRules()
    {
        this.parmFormButtonManager(FormButtonManager::construct());
        this.parmFormButtonManager().parmRuleImplementer(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromCaller</Name>
				<Source><![CDATA[
    public void initFromCaller()
    {
        xArgs       args = formRun.args();
        ReqPOType   reqPoTypeParm = -1;

        if (args.parmEnumType() == enumNum(ReqPOType))
        {
            reqPoTypeParm = args.parmEnum();
            reqRefType = ReqPO::reqPoType2ReqRefType(reqPoTypeParm);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSelectionFromReqTransMap</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Marks the <c>ReqTrans</c> records in the map for selection.
    /// </summary>
    /// <param name="_map">
    ///    A <c>Map</c> that contains <c>ReqTrans</c> records.
    /// </param>
    public void initSelectionFromReqTransMap(Map _map)
    {
        multiSelectionState.init();
        multiSelectionState.addRecords(_map, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertReqTransFormCache</Name>
				<Source><![CDATA[
    public void insertReqTransFormCache(ReqTrans _reqTrans)
    {
        createByForm = false;
        reqPo_DS.create();
        createByForm = true;

        reqTrans.data(_reqTrans);
        reqPO.data(_reqTrans.reqPo());
        inventDim.data(_reqTrans.inventDim());

        reqPo_DS.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimDSInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds a range to the query held by the <c>inventDim</c> data source based on the <c>InventSiteId</c>
    ///    field.
    /// </summary>
    /// <param name="_inventDim">
    ///    A record in the <c>InventDim</c> table that is held by a <c>formdatasource</c> object.
    /// </param>
    /// <remarks>
    ///    The added range appears as unlocked to the user when they make in inquiry to the advanced filter
    ///    dialog box.
    /// </remarks>
    public void inventDimDSInitPost(InventDim _inventDim)
    {
        QueryBuildDataSource qbs;

        super(_inventDim);

        qbs = inventDim_DS.query().dataSourceTable(tableNum(InventDim));

        rangeInventSiteId = qbs.findRange(fieldNum(InventDim, InventSiteId));
        if (!rangeInventSiteId)
        {
            rangeInventSiteId = qbs.addRange(fieldNum(InventDim, InventSiteId));
        }   
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDeletingMultiOrders</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Indicates whether multiple planned orders are being deleted.
    /// </summary>
    /// <returns>
    ///     true if multiple planned orders are being deleted; otherwise, false.
    /// </returns>
    public boolean isDeletingMultiOrders()
    {
        return isDeletingMultiOrders;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastValueDesignName</Name>
				<Source><![CDATA[
    public identifierName lastValueDesignName()
    {
        if (formRun && formRun.args().parmEnumType())
        {
            return enum2str(ReqPO::reqPoType2ReqRefType(formRun.args().parmEnum()));
        }

        return enum2str(ReqRefType::None);
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiSelectionState</Name>
				<Source><![CDATA[
    public ReqTransFormMultiSelectionState multiSelectionState()
    {
        return multiSelectionState;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [SuppressBpWarning('BPErrorClassNewNotProtected', 'The constructor is preserved public due to API compatibility.')]
    public void new(FormRun    _formRun)
    {
        super(_formRun);

        this.parmCreateByForm(true);
        this.parmUseCheckmarks(false);

        // Create observable multi selection state and subscribe to its update event.
        multiSelectionState = ReqTransFormMultiSelectionState::newObserver(this);

        buttonStateProvider = ReqTransFormButtonStateProviderDetail::construct();
        buttonStateProvider.parmReqPO(reqPO);
        buttonStateProvider.parmReqTrans(reqTrans);
        buttonStateProvider.setMultiSelectionState(multiSelectionState);

        reqTransFormPoRefreshEnabled = ReqTransFormPoRefreshToggle::instance().isEnabled();
        reqTransFormPoDeletingMultiOrdersFlightIsEnabled = ReqTransFormPoDeletingMultiOrdersFlight::instance().isEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>onMultiSelectionUpdated</Name>
				<Source><![CDATA[
    public void onMultiSelectionUpdated(ReqTransFormMultiSelectionState _state)
    {
        if (isDeletingMultiOrders && reqTransFormPoDeletingMultiOrdersFlightIsEnabled)
        {
            return;
        }

        buttonStateProvider.parmReqPO(reqPO);
        buttonStateProvider.parmReqTrans(reqTrans);
        buttonStateProvider.setMultiSelectionState(_state);
        
        if (SysFormRun::hasMethod(formRunObject, identifierStr(enableButtonsActive)))
        {
            formRunObject.enableButtonsActive();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion] + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCreateByForm</Name>
				<Source><![CDATA[
    boolean parmCreateByForm(boolean _createByForm = createByForm)
    {
        createByForm = _createByForm;
        return createByForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormButtonManager</Name>
				<Source><![CDATA[
    FormButtonManager parmFormButtonManager(FormButtonManager _formButtonManager = formButtonManager)
    {
        if (!prmisDefault(_formButtonManager))
        {
            formButtonManager = _formButtonManager;
        }
        return formButtonManager;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmReqRefType</Name>
				<Source><![CDATA[
    public ReqRefType parmReqRefType(ReqRefType _reqRefType = reqRefType)
    {
        reqRefType = _reqRefType;
        return reqRefType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseCheckmarks</Name>
				<Source><![CDATA[
    public boolean parmUseCheckmarks(boolean _useCheckmarks = useCheckmarks)
    {
        useCheckmarks = _useCheckmarks;

        return useCheckmarks;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPo_DS</Name>
				<Source><![CDATA[
    FormDataSource reqPo_DS()
    {
        return reqPo_DS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSActivePost</Name>
				<Source><![CDATA[
    public void reqPoDSActivePost()
    {
        if (!reqPODSMarkChangedIsUsed || !reqTrans_ds.anyMarked())
        {
            // Auto-select current record
            multiSelectionState.removeNotMarkedRecords();
            multiSelectionState.addRecord(reqTrans);
        }

        formRunObject.enableFieldsActive();

        this.elementUpdateDesign(InventDimFormDesignUpdate::Active);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSCreatePost</Name>
				<Source><![CDATA[
    void reqPoDSCreatePost(ReqPO _newReqPo)
    {
        InventDim       newInventDim;
        ReqTrans        newReqTrans;

        if (_newReqPo.RecId)
        {
            newInventDim    = InventDim::find(_newReqPo.CovInventDimId);
            newReqTrans     = _newReqPo.reqTrans();

            reqTrans.data(newReqTrans);
            inventDim.data(newInventDim);
            inventDim_DS.setCurrent();
            reqPO.data(_newReqPo);
            reqPo_DS.write();

            // Added this check in order to not calling research multiple times and avoid breaking change.
            // updateBOMPlannedOrderView method is calling research as well.
            if (!reqTransFormPoRefreshEnabled && !this.isPlannedOrderWithDerivedDemand(reqTrans))
            {
                reqPo_ds.research(true);
            }

            // Refresh the view if current order is a planned order and its reference type is derived.
            this.updateBOMPlannedOrderView();
        }

        formRunObject.enableButtonsActive();
        formRunObject.enableFieldsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSCreatePre</Name>
				<Source><![CDATA[
    ReqPO reqPoDSCreatePre()
    {
        Args            args;
        FormRun         formCreate;
        ReqPO           newReqPo;

        newReqPo.PlanVersion            = this.reqPlanVersionRefRecId();
        newReqPo.RefType                = reqRefType;

        args = new Args();
        args.name(formStr(reqTransPoCreate));
        args.caller(formRun);
        args.record(newReqPo);
        args.parm(reqPlanId);

        formCreate = classfactory.formRunClass(args);
        formCreate.init();
        formCreate.run();

        formCreate.wait();

        if (newReqPo.RecId && formCreate.closedOk())
        {
            return newReqPo;
        }

        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSDeleteMarkedPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements form behavior after it deletes multiple planned orders.
    /// </summary>
    public void reqPoDSDeleteMarkedPost()
    {
        // Set isDeletingMultiOrders to its default value.
        isDeletingMultiOrders = false;

        if (isDeletingProductionOrder)
        {
            //
            // If a planned production order was among marked records,
            // we have to refresh a view, since its BOM exploded orders were also deleted.
            //
            this.updatePlannedOrderView();

            // Set isDeletingProductionOrder to its default value.
            isDeletingProductionOrder = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSDeleteMarkedPre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Implements form behavior before deleting multiple planned orders.
    /// </summary>
    public void reqPoDSDeleteMarkedPre()
    {
        isDeletingMultiOrders       = true;
        isDeletingProductionOrder   = false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSDeletePost</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Implements form behavior after deleting a single planned order.
    /// </summary>
    /// <param name="_reqTransDelete">
    ///     A planned order which has been deleted. The deleted order has to be
    ///     passed via this parameter because current record in data source will
    ///     no longer contain the deleted order.
    /// </param>
    public void reqPoDSDeletePost(ReqTrans _reqTransDelete)
    {
        this.editReqTransMark(true, _reqTransDelete, false);

        if (!isDeletingMultiOrders)
        {
            //
            // Refresh grid if a planned production order was deleted.
            // Grid must be refreshed only when a single order is deleted.
            //
            this.updateBOMPlannedOrderView(_reqTransDelete);

            // Set isDeletingProductionOrder to its default value.
            isDeletingProductionOrder = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSDeletePre</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Implements form behavior before deleting a single planned order.
    /// </summary>
    /// <returns>
    ///     A copy of the order which will be deleted.
    /// </returns>
    public ReqTrans reqPoDSDeletePre()
    {
        ReqTrans reqTransDelete;

        reqTransDelete.data(reqTrans);

        // isDeletingProductionOrder keeps track, whether a planned production order is being deleted.
        isDeletingProductionOrder = isDeletingProductionOrder
            || reqTransDelete.RefType == ReqRefType::BOMPlannedOrder;

        return reqTransDelete;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSExecuteQueryPost</Name>
				<Source><![CDATA[
    public void reqPoDSExecuteQueryPost()
    {
        formRunObject.enableButtonsActive();
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSExecuteQueryPre</Name>
				<Source><![CDATA[
    public void reqPoDSExecuteQueryPre()
    {
        str rangeValue;

        if (callerRefId)
        {
            if (!rangeRefId)
            {
                rangeRefId = SysQuery::findOrCreateRange(rootQbds,fieldNum(ReqPO, RefId));
            }

            rangeRefId.value(queryValue(callerRefId));
        }
        else
        {
            if (reqRefType != ReqRefType::None)
            {
                if (#PmfEnabled && reqRefType == ReqRefType::BOMPlannedOrder)
                {
                    rangeValue = queryRangeConcat(queryValue(reqRefType::BOMPlannedOrder), queryValue(reqRefType::PmfPlannedProdBatch));
                }
                else
                {
                    rangeValue = queryValue(reqRefType);
                }

                if (!rangeRefType)
                {
                    rangeRefType = SysQuery::findOrCreateRange(rootQbds, fieldNum(ReqPO, RefType));
                }

                rangeRefType.value(rangeValue);

                if (#PmfEnabled)
                {
                    pmfBOMFormulaRange.value(rangeValue);
                }
            }
            else
            {
                if (rangeRefType)
                {
                    rangeRefType.value(SysQuery::valueUnlimited());
                }

                if (#PmfEnabled)
                {
                    pmfBOMFormulaRange.value(SysQuery::valueUnlimited());
                }
            }

            if (callerVendId)
            {
                if (!rangeVendId)
                {
                    rangeVendId = SysQuery::findOrCreateRange(rootQbds,fieldNum(ReqPO, VendId));
                }

                rangeVendId.value(queryValue(callerVendId));
            }

            if (#PmfEnabled
                && reqRefType == ReqRefType::BOMPlannedOrder
                && pmfFilter)
            {
                pmfBOMFormulaRange.value(queryValue(ReqRefType::PmfPlannedProdBatch));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ReqPO</c> data source in the class.
    /// </summary>
    /// <param name="_reqPO">
    ///    The <c>ReqPO</c> table buffer.
    /// </param>
    public void reqPoDSInitPost(ReqPO _reqPO)
    {
        Query                   query;
        QueryBuildDataSource    qbs;

        reqPO           = _reqPO;
        reqPo_DS        = FormDataUtil::getFormDataSource(_reqPO);
        query           = reqPo_DS.query();

        qbs = query.dataSourceTable(tablenum(ReqPO));
        qbs.clearDynalinks();

        if (formRun.args() && formRun.args().refField())
        {
            qbs.clearRange(fieldNum(ReqPO, RefType));
        }

        if (#PmfEnabled)
        {
            pmfBOMFormulaRange   = SysQuery::findOrCreateRange(qbs,fieldnum(ReqPO,RefType));
        }

        rootQbds = qbs;

        if (formRun.args().menuItemName() == menuitemDisplayStr(ReqPoGridViewPurchaseTodayOrOverdue))
        {
            var rangeDateOrder    = SysQuery::findOrCreateRange(qbs,fieldNum(ReqPO, ReqDateOrder));
            rangeDateOrder.value('((ReqDateOrder <= currentDate()))');
            rangeDateOrder.status(RangeStatus::Locked);
        }

        // hide planned orders that are forecast reduced to zero
        SysQuery::findOrCreateRange(qbs,fieldnum(ReqPO,Qty)).value(SysQuery::valueNot(0));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSLinkActivePre</Name>
				<Source><![CDATA[
    public void reqPoDSLinkActivePre()
    {
        fieldId     purchFieldId;
        ReqTrans    callerReqTrans;

        callerPurchId   = '';
        callerRefId     = '';

        if (formRun.args().caller() && formRun.args().dataset() == tableNum(ReqTrans))
        {
            callerReqTrans  = formRun.args().record();
            callerRefId     = callerReqTrans.RefId;
        }
        else if (formRun.args().record() && formRun.args().dataset() == tableNum(ReqPlannedOrderStaging))
        {
            ReqPlannedOrderStaging callerReqPlannedOrderStaging = formRun.args().record();
            callerRefId = callerReqPlannedOrderStaging.PlannedOrderNumber;
        }
        else
        {
            if (formRun.args().caller() && formRun.args().dataset() )
            {
                purchFieldId = fieldName2id(formRun.args().dataset(),fieldStr(PurchTable,PurchId));

                if (purchFieldId)
                {
                    callerPurchId = formRun.args().record().(purchFieldId);
                    callerVendId  = PurchTable::find(callerPurchId).OrderAccount;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPODSMarkChanged</Name>
				<Source><![CDATA[
    public void reqPODSMarkChanged()
    {
        ReqTrans    reqTransSelected;
        Map         selectedRecords;

        multiSelectionState.removeNotMarkedRecords();

        if ( reqTrans_ds.anyMarked() )
        {
            reqTransSelected = reqTrans_ds.getFirst(1);
            selectedRecords = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);
            do
            {
                selectedRecords.insert(reqTransSelected.RecId, reqTransSelected);
                reqTransSelected = reqTrans_ds.getNext();
            } while (reqTransSelected);

            multiSelectionState.addRecords(selectedRecords);
        }
        else if (formRunObject.getViewOption() == FormViewOption::Details)
        {
            multiSelectionState.addRecord(reqTrans);
        }

        reqPODSMarkChangedIsUsed = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPlannedOrdersFromQueryToSelectionState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds planned orders from query to the selection state.
    /// </summary>
    /// <param name = "_query">A planned order query.</param>
    [Hookable(false)]
    public void addPlannedOrdersFromQueryToSelectionState(Query _query)
    {
        Map     recordsToAdd    = new Map(typeName2Type(extendedTypeStr(recId)), Types::Record);
        TableId reqTransTableId = tableNum(ReqTrans);

        multiSelectionState.removeNotMarkedRecords();

        QueryRun queryRun = new QueryRun(_query);
        ReqTrans reqTransToAdd;

        while (queryRun.next())
        {
            reqTransToAdd = queryRun.get(reqTransTableId);

            if (reqTransToAdd)
            {
                recordsToAdd.insert(reqTransToAdd.RecId, reqTransToAdd);
            }
        }

        multiSelectionState.addRecords(recordsToAdd);
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSWritePost</Name>
				<Source><![CDATA[
    void reqPoDSWritePost()
    {
        if (reqPO.CovInventDimId != inventDim.InventDimId)
        {
            inventDim.data(InventDim::find(reqPO.CovInventDimId));
            inventDim_DS.setCurrent();
        }

        if (doReReadReqTrans)
        {
            // reqPo_ds.reread();
            reqPo_DS.refresh();

            reqTrans.data(reqPO.reqTrans());
            reqTrans_ds.setCurrent();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqPoDSWritePre</Name>
				<Source><![CDATA[
    void reqPoDSWritePre()
    {
        reqPO.CovInventDimId = InventDim::findOrCreate(inventDim).InventDimId;

        doReReadReqTrans = false;
        if (reqPO.RecId)
        {
            if (reqPO.Qty               != reqPO.orig().Qty                 ||
                reqPO.PurchQty          != reqPO.orig().PurchQty            ||
                reqPO.PurchUnit         != reqPO.orig().PurchUnit           ||
                reqPO.CovInventDimId    != reqPO.orig().CovInventDimId      ||
                reqPO.ItemBomId         != reqPO.orig().ItemBomId           ||
                reqPO.ItemRouteId       != reqPO.orig().ItemRouteId
               )
            {
                doReReadReqTrans = true;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransCovDSExecuteQueryPre</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is called before the executequery on the form.
    /// this builds a comma delimited query of recid for the reqtrans datasource to use
    ///  by looping the batchReqTrans datasource
    /// </summary>
    /// <param name="_recId">The recId of the reqtrans to use</param>
    public void reqTransCovDSExecuteQueryPre(recId _recId = reqTrans.RecId)
    {
        ReqTrans    tmpReqTrans;
        str         qStr = '';
        RecId       lclRecId = _recId;
        #define.Or(',')

        if (isBatch)
        {
            tmpReqTrans = batchReqTrans_ds.getFirst(0,false);
            while (tmpReqTrans.RecId)
            {
                if (qStr)
                {
                    qStr += #Or;
                }

                qStr += queryValue(tmpReqTrans.RecId);
                tmpReqTrans = batchReqTrans_ds.getNext();
            }
            rangeReceiptRecId.value(
                reqTrans.Qty >= 0
                    ? qStr
                    : SysQuery::valueUnlimited());
            rangeIssueRecId.value(
                reqTrans.Qty >= 0
                    ? SysQuery::valueUnlimited()
                    : qStr);
        }
        else
        {
            if (lclRecId == 0)
            {
                lclRecId = reqTrans.RecId;
            }
            rangeReceiptRecId.value(
                reqTrans.Qty >= 0
                    ? queryValue(lclRecId)
                    : SysQuery::valueUnlimited());
            rangeIssueRecId.value(
                reqTrans.Qty >= 0
                    ? SysQuery::valueUnlimited()
                    : queryValue(lclRecId));
        }

        reqTransCov_ds.query().dataSourceTable(tablenum(ReqTrans)).clearLinks();

        if (reqTrans.Qty >= 0)
        {
            reqTransCov_ds.query().dataSourceTable(
                tablenum(ReqTrans)).addLink(
                    fieldnum(ReqTransCov,IssueRecId),
                    fieldnum(ReqTrans,RecId));
        }
        else
        {
            reqTransCov_ds.query().dataSourceTable(
                tablenum(ReqTrans)).addLink(
                    fieldnum(ReqTransCov,ReceiptRecId),
                    fieldnum(ReqTrans,RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqTransDSInitPost</Name>
				<Source><![CDATA[
    public void reqTransDSInitPost(ReqTrans _reqTrans)
    {
        QueryBuildDataSource    qbs;

        super(_reqTrans);

        qbs = reqTrans_ds.query().dataSourceTable(tableNum(ReqTrans));
        qbs.addSortIndex(indexNum(ReqTrans,RefIdx));
        qbs.indexIsHint(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetMapFromInventLocationId</Name>
				<Source><![CDATA[
    public void resetMapFromInventLocationId()
    {
        mapFromInventLocationId = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveBOMPlannedOrderReqPo</Name>
				<Source><![CDATA[
    void saveBOMPlannedOrderReqPo()
    {
        if (reqTrans.RefType == ReqRefType::BOMPlannedOrder)
        {
            reqPo_DS.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveItemPlannedOrderReqPo</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Saves <c>reqTrans</c> and <c>reqPo</c> data sources if current planned order is a purchase order.
    /// </summary>
    public void saveItemPlannedOrderReqPo()
    {
        if (reqTrans.RefType == ReqRefType::ItemPlannedOrder)
        {
            reqTrans_ds.write();
            reqPo_DS.write();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Specifies the data sources to use for rule evaluation.
    /// </summary>
    /// <param name="datasources1">
    ///    A <c>Common</c> table buffer that belongs to the first data source instance.
    /// </param>
    /// <param name="datasources2">
    ///    A <c>Common</c> table buffer that belongs to the second data source instance; optional.
    /// </param>
    /// <param name="datasources3">
    ///    A <c>Common</c> table buffer that belongs to the third data source instance; optional.
    /// </param>
    /// <param name="datasources4">
    ///    A <c>Common</c> table buffer that belongs to the 4 data source instance; optional.
    /// </param>
    /// <param name="datasources5">
    ///    A <c>Common</c> table buffer that belongs to the 5 data source instance; optional.
    /// </param>
    /// <remarks>
    ///    Usually the rules perform evaluation on a table buffer which is obtained from a data source.This
    ///    method lets the user set up several data sources that are used by the rule implementer helper class
    ///    during rule evaluation.Up to 5 data sources can be passed. If the implementation requires more data
    ///    sources additional custom methods should be implemented on the rule implementer class.
    /// </remarks>
    public void setDatasources(Common datasources1, Common datasources2 = null, Common datasources3 = null, Common datasources4 = null, Common datasources5 = null)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRefTypeFilterValue</Name>
				<Source><![CDATA[
    public void setRefTypeFilterValue(ReqRefType _reqRefType)
    {
        Query   query;

        query = reqPo_DS.query();

        if (ReqTrans::refTypeIsPlannedOrder(_reqRefType))
        {
            query.dataSourceTable(tableNum(ReqPO)).addRange(fieldNum(ReqPO,RefType)).value(queryValue(_reqRefType));
        }
        else
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Integer     version     = conPeek(packedClass,1);
        container   base;

        switch (version)
        {
            case #CurrentVersion :
                [version,base] = packedClass;

                super(base);

                break;
            default :
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateBOMPlannedOrderView</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Researches all data sources for a planned production order.
    /// </summary>
    /// <param name="_reqTrans">
    ///    If this parameter is specified, it is used to decide whether a planned order is a production order
    ///    or not.
    /// </param>
    /// <remarks>
    ///    This method should be called when a planned production order is changed and this change leads to
    ///    creation or deletion of new records. For example, when the planned production order is created, its
    ///    BOM is exploded and new orders are created. In this case, data sources must be refreshed in order
    ///    to show newly created orders.
    /// </remarks>
    public void updateBOMPlannedOrderView(ReqTrans _reqTrans = null)
    {
        ReqTrans reqTransChecked;

        reqTransChecked = _reqTrans.RecId ? _reqTrans : reqTrans;

        if (reqTransFormPoRefreshEnabled || this.isPlannedOrderWithDerivedDemand(reqTransChecked))
        {
            this.updatePlannedOrderView();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isPlannedOrderWithDerivedDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the requirement transaction is planned order and its reference type is derived.
    /// </summary>
    /// <param name = "_reqTrans">Given requirement transaction.</param>
    /// <returns>True, if given ReqTrans is planned order and its type is derived; otherwise false.</returns>
    private boolean isPlannedOrderWithDerivedDemand(ReqTrans _reqTrans)
    {
        if (!_reqTrans.RecId)
        {
            return false;
        }

        return _reqTrans.isPlannedOrder() && ReqTrans::derivedRefType(_reqTrans.RefType) != ReqRefType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormChangeType</Name>
				<Source><![CDATA[
    void updateFormChangeType(
        container   _conReqPoDeleted,
        container   _conReqTransDeleted
        )
    {
        if (this.parmReqRefType() == ReqRefType::None)
        {
            this.doReread();
            this.updateReqTransFormCache(_conReqTransDeleted);
            this.updateReqPoFormCache(_conReqPoDeleted);
        }
        else
        {
            this.deleteReqPoFormCache(_conReqPoDeleted);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFormFirmPo</Name>
				<Source><![CDATA[
    void updateFormFirmPo(
        container   _conReqPoDeleted,
        container   _conReqTransDeleted    )
    {
        this.deleteReqPoFormCache(_conReqPoDeleted);
        this.deleteReqTransFormCache(_conReqTransDeleted);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePlannedOrderView</Name>
				<Source><![CDATA[
    void updatePlannedOrderView()
    {
        if (reqTransFormPoRefreshEnabled)
        {
            this.doRereadRefreshAll();
        }
        else
        {
            this.doResearch();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqPoFormCache</Name>
				<Source><![CDATA[
    public void updateReqPoFormCache(container _con)
    {
        Map         mapReqPoUpdate = (_con) ? Map::create(_con) : null;

        Integer     formMarked;
        ReqPO       reqPoCache;
        ReqPO       reqPoMap;

        while (formMarked <= 1)
        {
            reqPoCache = reqPo_DS.getFirst(formMarked,false);
            while (reqPoCache)
            {
                if (mapReqPoUpdate && mapReqPoUpdate.exists(reqPoCache.RecId))
                {
                    reqPoMap = mapReqPoUpdate.lookup(reqPoCache.RecId);
                    reqPoCache.data(reqPoMap);
                    if (reqPoMap.RecId == reqPO.RecId)
                    {
                        reqPO.data(reqPoMap);
                        reqPo_DS.setCurrent();
                    }
                }
                reqPoCache = reqPo_DS.getNext();
            }
            formMarked++;
        }

        reqPo_DS.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateReqTransFormCache</Name>
				<Source><![CDATA[
    public void updateReqTransFormCache(container _con)
    {
        Map         mapReqTransUpdate = (_con) ? Map::create(_con) : null;

        Integer     formMarked;
        ReqTrans    reqTransCache;
        ReqTrans    reqTransMap;

        while (formMarked <= 1)
        {
            reqTransCache = reqTrans_ds.getFirst(formMarked,false);
            while (reqTransCache)
            {
                if (mapReqTransUpdate && mapReqTransUpdate.exists(reqTransCache.RecId))
                {
                    reqTransMap = mapReqTransUpdate.lookup(reqTransCache.RecId);
                    reqTransCache.data(reqTransMap);
                    if (reqTransMap.RecId == reqTrans.RecId)
                    {
                        reqTrans.data(reqTransMap);
                        reqTrans_ds.setCurrent();

                        formRunObject.enableButtonsActive();
                        formRunObject.enableFieldsActive();
                    }
                }
                reqTransCache = reqTrans_ds.getNext();
            }
            formMarked++;
        }

        reqTrans_ds.refresh();
    }

]]></Source>
			</Method>
			<Method>
				<Name>changeFromInventLocationId</Name>
				<Source><![CDATA[
    static boolean changeFromInventLocationId(
        ReqTrans            _reqTrans,
        InventLocationId    _fromInventLocationId
        )
    {
        ReqTrans            transferDemand;
        InventDim           inventDim;
        boolean             ret;

        ret = ReqTransFormPO::validateFromInventLocationId(_fromInventLocationId, '', _reqTrans.reqPo());

        if (ret)
        {
            ttsbegin;

            transferDemand      = _reqTrans.selectDerived(true);
            inventDim           =  transferDemand.inventDim();

            inventDim.InventLocationId      = _fromInventLocationId;
            inventDim.initFromInventLocation(inventDim.inventLocation());
            transferDemand.CovInventDimId   = InventDim::findOrCreate(inventDim).InventDimId;
            transferDemand.update();

            ttscommit;
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFormRun</Name>
				<Source><![CDATA[
    public static ReqTransFormPO newFormRun(FormRun _formRun)
    {
        if (_formRun.args().caller() && _formRun.args().caller() is FormRun  && !_formRun.args().refField())
        {
            switch (_formRun.args().caller().name())
            {
                case formStr(ReqTransExplosion),
                            formStr(ReqMultiLevelPegging):
                    return new ReqTransFormPoExplosion(_formRun);

                case formStr(ReqSupplyDemandSchedule):
                    return new ReqTransFormPoPeriodFilter(_formRun);
            }
        }

        return new ReqTransFormPO(_formRun);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFromInventLocationId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the from warehouse related to a planned transfer order.
    /// </summary>
    /// <param name="_fromInventLocationId">
    /// A string that holds the from warehouse ID.
    /// </param>
    /// <param name="_toInventLocationId">
    /// A string that holds the to warehouse ID.
    /// </param>
    /// <param name="_reqPO">
    /// A <c>ReqPO</c> record that represents a planned order.
    /// </param>
    /// <returns>
    /// true, if the from warehouse is valid; otherwise false.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The to warehouse cannot be determined.
    /// </exception>
    static boolean validateFromInventLocationId(
        InventLocationId            _fromInventLocationId,
        InventLocationId            _toInventLocationId,
        ReqPO                       _reqPO)
    {
        InventLocation      inventLocation;
        InventLocationId    toInventLocationId;

        toInventLocationId = _toInventLocationId ? _toInventLocationId : _reqPO.inventDimAndDefault().InventLocationId;

        if (! toInventLocationId)
        {
            if (! InventTable::find(_reqPO.ItemId).inventDimParmCovDimensions().InventLocationIdFlag)
            {
                throw error (strFmt("@SYS73924","@SYS107384", _reqPO.ItemId));
            }
            else
            {
                throw error ("@SYS85069");
            }
        }

        if (toInventLocationId == _fromInventLocationId)
        {
            return checkFailed("@SYS70035");
        }

        inventLocation = InventLocation::find(_fromInventLocationId);

        if (!inventLocation)
        {
            return checkFailed(strFmt("@SYS5001", _fromInventLocationId));
        }

        boolean ret = ReqTransFormPO::validateFromWarehouseType(inventLocation.InventLocationType);

        if (ret && _reqPO.RefType == ReqRefType::TransferPlannedOrder
            && ! inventLocation.InventLocationIdTransit)
        {
            return checkFailed("@SYS101202");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFromWarehouseType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates from warehouse type related to a planned transfer order.
    /// </summary>
    /// <param name = "_inventLocationType">The type of the from warehouse.</param>
    /// <returns>true if the warehouse type is valid; otherwise, false.</returns>
    protected static boolean validateFromWarehouseType(InventLocationType _inventLocationType)
    {
        Set validTypesSet = ReqTransFormPO::buildValidFromWarehouseTypesSet();
        if (!validTypesSet.in(_inventLocationType))
        {
            if(validTypesSet.elements() == 1)
            {
                SetEnumerator  enumerator = validTypesSet.getEnumerator();
                enumerator.moveNext();
                InventLocationType inventLocationType = enumerator.current();
                return checkFailed(strFmt("@SYS101201", inventLocationType));
            }
            else
            {
                return checkFailed(strFmt("@SCM:FromWarehouseTypeMustBeOneOf", validTypesSet.toString()));
            }
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildValidFromWarehouseTypesSet</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the set of valid from warehouse types.
    /// </summary>
    /// <returns>The set of valid from warehouse types.</returns>
    protected static Set buildValidFromWarehouseTypesSet()
    {
        Set set = new Set(Types::Enum);

        set.add(InventLocationType::Standard);
        
        return set;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reqReqTransFilterDSInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method initializes tempdb form datasource used as a filter for explosion subset in planned orders view
    /// for other usages the datasource is disabled
    /// </summary>
    /// <param name = "_reqTransFilterTmp">A tempdb form datasource</param>
    /// <returns>
    /// A QueryBuildDataSource object
    /// </returns>
    public QueryBuildDataSource reqReqTransFilterDSInitPost(ReqTransFilterTmp _reqTransFilterTmp)
    {
        reqTransFilterTempdb_ds = _reqTransFilterTmp.dataSource();

        QueryBuildDataSource qbdsReqTransFilter_ds;
        qbdsReqTransFilter_ds = reqPo_DS.query().dataSourceTable(tablenum(ReqTransFilterTmp));
        qbdsReqTransFilter_ds.enabled(this.enableReqTransFilterDataSource());

        return qbdsReqTransFilter_ds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableReqTransFilterDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables/disables reqTransFilter tempdb datasource usage
    /// </summary>
    /// <returns>
    /// Disables the datasource for non-explosion scenario
    /// </returns>
    protected boolean enableReqTransFilterDataSource()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>