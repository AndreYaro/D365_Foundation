<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchLineType_ReturnItem</Name>
	<SourceCode>
		<Declaration><![CDATA[
class       PurchLineType_ReturnItem
extends     PurchLineType
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canAgreementBeLinked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the purchase line can be linked to an agreement line.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    public boolean canAgreementBeLinked()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkUpdatePhysical</Name>
				<Source><![CDATA[
    boolean checkUpdatePhysical()
    {
        boolean ret;

        ret = super();

        if (!purchLine.ReturnActionId)
        {
            setPrefix(#PreFixField(purchLine, itemId));
            ret = checkFailed("@SYS24906");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>creditNoteLine</Name>
				<Source><![CDATA[
    boolean creditNoteLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDefaultProjectGlobalCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project category based on the procurement category.
    /// </summary>
    /// <param name="_ecoResCategory">
    /// The procurement category
    /// </param>
    /// <returns>
    /// true if the project category has been initialized; otherwise, false.
    /// </returns>
    private boolean initDefaultProjectGlobalCategory(RefRecId _ecoResCategory)
    {
        boolean         ret;
        ProjCategoryId  projCategoryId = ProjCategory::getDefaultProjectGlobalCategory(_ecoResCategory);

        if (projCategoryId)
        {
            purchLine.ProjCategoryId = projCategoryId;
            ret = true;
        }

        return ret;        
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromEcoResCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the project fields based on the procurement category.
    /// </summary>
    /// <param name="_procurementCategory">
    /// The <c>ProcurementCategory</c> record with which to initialize the purchase line.
    /// </param>
    /// <param name="_name">
    /// The name to be assigned to the line.
    /// </param>
    protected void initFromEcoResCategory(PurchCategory _procurementCategory, ItemFreeTxt _name)
    {
        super(_procurementCategory, _name);
        
        if (purchLine.ProjId)
        {
            InventTable inventTable;

            if (purchLine.ItemId)
            {
                inventTable = purchLine.inventTable();
            }
            
            if (!inventTable.ProjCategoryId && _procurementCategory)
            {
                boolean ret = this.initDefaultProjectGlobalCategory(_procurementCategory);

                if (ret)
                {
                    purchLine.ProjLinePropertyId = ProjLinePropertySetup::findLinePropertyId(purchLine.ProjId,purchLine.ProjCategoryId);
                    purchLine.ProjTaxItemGroupId = ProjParameters::taxItemGroupItem(purchLine.ProjCategoryId,purchLine.ItemId);
                }
                
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInventTable</Name>
				<Source><![CDATA[
    void  initFromInventTable(
        InventTable     inventTable,
        boolean         _searchPrice = true,
        boolean         _setAddressFromInventDim = true,
        boolean         _initDateFields = true,
        boolean			_executeOnlyIfProductIsFullySpecified = false)
    {
        super(inventTable, _searchPrice, _setAddressFromInventDim, _initDateFields, _executeOnlyIfProductIsFullySpecified);

        if (purchLine.PurchQty > 0)
        {
            purchLine.PurchQty      = 0;
            purchLine.QtyOrdered    = 0;

            if (purchLine.PdsCWQty > 0)
            {
                purchLine.PdsCWQty = 0;
            }
        }

        purchLine.ReturnActionId = PurchParameters::find().ReturnActionDefault;
        purchLine.returnActionChanged();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPurchQty</Name>
				<Source><![CDATA[
    void  initPurchQty()
    {
         purchLine.QtyOrdered = purchLine.calcQtyOrdered();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanySyncEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the line-level synchronization engine for intercompany trade.
    /// </summary>
    /// <returns>A new instance of <c>InterCompanySyncPurchLineType</c> or one of its subclasses.</returns>
    public InterCompanySyncPurchLineType interCompanySyncEngine()
    {
        return InterCompanySyncPurchLineType_ReturnItem::newFromPurchLineType(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyCreateReturnMarkupTrans</Name>
				<Source><![CDATA[
    protected void interCompanyCreateReturnMarkupTrans(AxSalesLine _axSalesLine)
    {
        _axSalesLine.salesLine().createReturnMarkupTrans(_axSalesLine.salesLine().salesTable());
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyValidateDeleteQty</Name>
				<Source><![CDATA[
    protected boolean interCompanyValidateDeleteQty(SalesLine _salesLine)
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInventDirection</Name>
				<Source><![CDATA[
    public InventDirection defaultInventDirection()
    {
        return InventDirection::Issue;
    }

]]></Source>
			</Method>
			<Method>
				<Name>returnExpectedRetQty</Name>
				<Source><![CDATA[
    protected ReturnExpectedRetQty returnExpectedRetQty(SalesQty _salesQty)
    {
        return _salesQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePendingRegistrationsNonStocked</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Updates the pending registrations for non-stocked lines.
    /// </summary>
    /// <param name="_isNewLine">
    ///    A Boolean value that indicates whether the line is a new line.
    /// </param>
    /// <remarks>
    ///    Arrival registrations cannot be done for purchase return orders.
    /// </remarks>
    public void updatePendingRegistrationsNonStocked(boolean _isNewLine)
    {
        return;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateWrite</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates a <see cref="T:PurchLine" /> buffer based on logic that spans several current table
    /// buffers.
    /// </summary>
    /// <returns>
    /// true if the table buffer has valid information and may be saved; otherwise, false.
    /// </returns>
    boolean  validateWrite()
    {
        boolean  ok = true;

        ok = super();

        if (purchLine.PurchQty > 0
        &&  purchLine.SkipUpdate == InterCompanySkipUpdate::No)
            ok = checkFailed("@SYS53512");

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static PurchLineType construct(PurchLine purchLine, PurchTable purchTable = purchLine.purchTable())
    {
        if (purchTable.ProjId && !purchTable.isProjectSalesItemReqPO()
            && !purchLine.getProjCreditNoteSource().purchTable().isProjectSalesItemReqPO())
            return new PurchLineType_ProjectReturnItem(purchLine,purchTable);
        else
            return new PurchLineType_ReturnItem(purchLine,purchTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pdsApprovedVendorListCheck</Name>
				<Source><![CDATA[
    public PdsApprovedVendorListCheck pdsApprovedVendorListCheck()
    {        
        return PdsApprovedVendorListCheck::newFromTable(purchLine);        
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>