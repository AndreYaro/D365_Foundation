<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerExceptionHandler</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal static class LedgerExceptionHandler
{
    private const int MaxRetryCount = 5;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>shouldExceptionBeRetried</Name>
				<Source><![CDATA[
    internal static boolean shouldExceptionBeRetried(System.Exception _exception)
    {
        boolean shouldExceptionBeRetried = false;

        if (_exception is Microsoft.Dynamics.Ax.Xpp.DeadlockException)
        {
            shouldExceptionBeRetried = LedgerExceptionHandler::shouldRetryDeadlockError();
        }
        else if (_exception is Microsoft.Dynamics.Ax.Xpp.DuplicateKeyException)
        {
            shouldExceptionBeRetried = LedgerExceptionHandler::shouldRetryDuplicateKey();
        }

        LedgerExceptionHandler::logExceptionRetryAttempt(_exception, shouldExceptionBeRetried);

        return shouldExceptionBeRetried;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRetryDeadlockError</Name>
				<Source><![CDATA[
    private static boolean shouldRetryDeadlockError()
    {
        // If retried the default maximum number of times, this wait multiple will equate to about 16 seconds of total wait time
        const int DeadlockErrorWaitMultipleInMilliseconds = 500;

        int currentRetryCount = xSession::currentRetryCount();
        boolean shouldRetry = currentRetryCount < MaxRetryCount;

        if (shouldRetry)
        {
            LedgerExceptionHandler::delayRetry(currentRetryCount, DeadlockErrorWaitMultipleInMilliseconds);
        }

        return shouldRetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldRetryDuplicateKey</Name>
				<Source><![CDATA[
    private static boolean shouldRetryDuplicateKey()
    {
        // DuplicateKeyExceptions require random waits to ensure no thread locking.
        int backOffWait = RandomGenerate::construct().randomInt(500, 2000);

        int currentRetryCount = xSession::currentRetryCount();
        boolean shouldRetry = currentRetryCount < MaxRetryCount;

        if (shouldRetry)
        {
            sleep(backOffWait);
        }

        return shouldRetry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>delayRetry</Name>
				<Source><![CDATA[
    /// <summary>
    /// Delays the executing thread for a calculated amount of time to allow for an increasing
    /// amount of time before process retries.
    /// </summary>
    /// <param name = "_retryCount">The number of times the failing process has already been retried.</param>
    /// <param name = "_retryWaitMultiple">The base amount of time, in milliseconds, that should be used when calculating the amount of time to wait.</param>
    /// <remarks>
    /// The max delay per iteration is 60 seconds. Depending on the passed in _retryWaitMultiple it will determine the length of time to sleep
    /// Sample progression: 500ms
    ///   Retry 1 - 10 seconds
    ///   Retry 2 - 20 seconds
    ///   Retry 3 - 40 seconds
    ///   Retry 4 - 60 seconds
    ///   Retry 5 - 60 seconds
    /// </remarks>
    private static void delayRetry(int _retryCount, int _retryWaitMultiple)
    {
        var delay = _retryWaitMultiple * power(2, min(_retryCount, 5));
        sleep(min(60 * 1000, delay));
    }

]]></Source>
			</Method>
			<Method>
				<Name>logExceptionRetryAttempt</Name>
				<Source><![CDATA[
    private static void logExceptionRetryAttempt(System.Exception _exception, boolean _shouldRetry)
    {
        int currentRetryCount = xSession::currentRetryCount();

        str exceptionThrowingClassName = _exception.TargetSite != null ? _exception.TargetSite.DeclaringType.FullName
                                                                       : classStr(LedgerExceptionHandler);

        str exceptionThrowingMethodName = _exception.TargetSite != null ? _exception.TargetSite.Name
                                                                        : funcName();

        str exceptionTypeName = _exception.GetType().Name;

        SysInstrumentationLogger instrumentationLogger = SysInstrumentationLoggerFactory::CreateLogger(exceptionThrowingClassName);

        if (_shouldRetry)
        {
            str exceptionWillBeRetried = 'The statement for method %1 failed %2 times with exception %3 and will be retried';
            instrumentationLogger.logWarning(strFmt(exceptionWillBeRetried,
                exceptionThrowingMethodName,
                currentRetryCount,
                exceptionTypeName));
        }
        else
        {
            str exceptionWillNotBeRetried = 'The statement for method %1 failed %2 times with exception %3 and will no longer be retried';
            instrumentationLogger.logWarning(strFmt(exceptionWillNotBeRetried,
                exceptionThrowingMethodName,
                currentRetryCount,
                exceptionTypeName));
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>