<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashRegisterProcessingBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>CashRegisterProcessingBase</c> is an abstract class for processing
/// communications with third-party Cash Register system.
/// </summary>
public abstract class CashRegisterProcessingBase
{
    CashRegisterFiscalTrans_W          cashRegisterFiscalTrans;
    CashRegisterOperator_W             operator;
    CashRegisterTerminal_W             terminal;

    CustTrans                          custTransPayment;
    LedgerJournalTrans                 ledgerJournalTrans;
    CustTrans                          custTransToCancel;

    CashRegisterWebRequestLogHelper_W  logHelper;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>cashRegisterFiscalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>cashRegisterFiscalTrans</c> parameter.
    /// </summary>
    /// <param name="_cashRegisterFiscalTrans">
    /// The new value of the <c>cashRegisterFiscalTrans</c> parameter.
    /// </param>
    /// <returns>
    /// The current object.
    /// </returns>
    public CashRegisterProcessingBase cashRegisterFiscalTrans(CashRegisterFiscalTrans_W _cashRegisterFiscalTrans)
    {
        cashRegisterFiscalTrans = _cashRegisterFiscalTrans;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashRegisterOperator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>operator</c> parameter.
    /// </summary>
    /// <param name="_cashRegisterOperator">
    /// The new value of the <c>Operator</c> parameter.
    /// </param>
    /// <returns>
    /// The current object.
    /// </returns>
    public CashRegisterProcessingBase cashRegisterOperator(CashRegisterOperator_W _cashRegisterOperator)
    {
        operator = _cashRegisterOperator;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cashRegisterTerminal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>cashRegisterTerminal</c> parameter.
    /// </summary>
    /// <param name="_cashRegisterTerminal">
    /// The new value of the <c>CashRegisterTerminal</c> parameter.
    /// </param>
    /// <returns>
    /// The current object.
    /// </returns>
    public CashRegisterProcessingBase cashRegisterTerminal(CashRegisterTerminal_W _cashRegisterTerminal)
    {
        terminal = _cashRegisterTerminal;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledForCurrentUser</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks Cash Register processing being enabled for current user.
    /// </summary>
    /// <returns>
    /// True, if the Cash regiser processing is enabled.
    /// </returns>
    public static boolean isEnabledForCurrentUser()
    {
        CashRegisterOperator_W currentOperator = CashRegisterOperator_W::currentOperator();
        boolean isEnabled = false;
        if (currentOperator)
        {
            CashRegisterTerminalRecId_W cashRegisterTerminalRecId = currentOperator.Terminal;
            isEnabled = CashRegisterProcessingBase::isEnabledForTerminal(cashRegisterTerminalRecId);
        }

        return isEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledForTerminal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Cjecks Cash Register processing being enabled for selected terminal.
    /// </summary>
    /// <param name = "_terminalRecId">Selected terminal.</param>
    /// <returns>True, if the Cash regiser processing is enabled.</returns>
    public static boolean isEnabledForTerminal(CashRegisterTerminalRecId_W _terminalRecId)
    {
        CashRegisterTerminal_W cashRegisterTerminal = CashRegisterTerminal_W::find(_terminalRecId);
        boolean isEnabled = false;
        if (cashRegisterTerminal)
        {
            ClassId cashRegisterProcessingClassId = CashRegister_W::find(cashRegisterTerminal.CashRegister).ProcessingClassId;
            isEnabled = CashRegisterProcessingBase::isEnabled(cashRegisterProcessingClassId);
        }
        return isEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks Cash regiser processing being enabled.
    /// </summary>
    /// <param name="_processingClassId">
    /// Class ID of currect class for processing communications with
    /// third-party Cash Register.
    /// </param>
    /// <returns>
    /// True, if the Cash regiser processing is enabled.
    /// </returns>
    public static boolean isEnabled(ClassId _processingClassId)
    {
        switch (_processingClassId)
        {
            case classNum(CashRegisterProcessingEFSTA_W) :
                return CashRegisterProcessingEFSTA_W::isEnabled();

            default:
                return false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isEnabledLedgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks is <c>LedgerJournalTrans</c> enabled for Cash Register processing.
    /// </summary>
    /// <param name = "_ledgerJournalTrans"><c>LedgerJournalTrans</c> object.</param>
    /// <param name="_paymMode">
    /// The payment mode ID on the journal line.
    /// </param>
    /// <returns>
    /// True, if the Cash Regiser processing is enabled, false - otherwise.
    /// </returns>
    public static boolean isEnabledLedgerJournal(
        LedgerJournalTrans  _ledgerJournalTrans,
        PaymMode            _paymMode   = _ledgerJournalTrans.PaymMode)
    {
        CashRegisterOperator_W currentOperator = CashRegisterOperator_W::currentOperator();
        boolean isEnabled = false;
        if (currentOperator)
        {
            CashRegisterTerminalRecId_W cashRegisterTerminalRecId = currentOperator.Terminal;
            CashRegisterTerminal_W cashRegisterTerminal = CashRegisterTerminal_W::find(cashRegisterTerminalRecId);
            ClassId cashRegisterProcessingClassId = CashRegister_W::find(cashRegisterTerminal.CashRegister).ProcessingClassId;

            switch (cashRegisterProcessingClassId)
            {
                case classNum(CashRegisterProcessingEFSTA_W) :
                    isEnabled = CashRegisterProcessingEFSTA_W::isEnabledLedgerJournal(_ledgerJournalTrans, _paymMode);
                    break;

                default:
                    isEnabled = false;
                    break;
            }
        }

        return isEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFiscalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes cash register fiscal transaction.
    /// </summary>
    /// <returns>
    /// The current object.
    /// </returns>
    public abstract CashRegisterProcessingBase initFiscalTrans()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromPaymentTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new <c>CashRegisterProcessing_W</c> object and sets up Cust Trans Payment.
    /// </summary>
    /// <param name="_custTransPayment">Current Cust Trans Payment.</param>
    /// <returns><c>CashRegisterProcessingBase</c> object.</returns>
    public abstract CashRegisterProcessingBase newFromPaymentTrans(CustTrans _custTransPayment)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the basic parameters.
    /// </summary>
    /// <returns>
    /// The current object.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// Cash register operator cannot be defined.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Cash register terminal cannot be defined.
    /// </exception>
    public abstract CashRegisterProcessingBase validate()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateAlreadySent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if the cash register reciept was already sent.
    /// If client is working on local machine - there is an API for request fiscal transaction by API.
    /// If client is working through web - in request we will get last transaction.
    /// </summary>
    /// <returns>
    /// The current object.
    /// </returns>
    /// <remarks>
    /// The <c>ReceiptNumber</c>, when assigned, is assumed to be a unique ID (within the terminal at least).
    /// </remarks>
    /// <exception cref="Exception::Error">
    /// Request to the cash register returned an error.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Cash receipt is being manually registered (sent) not in the order of their creation.
    /// </exception>
    public abstract CashRegisterProcessingBase validateAlreadySent()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateFiscalTransStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the status of the cash register fiscal transaction.
    /// </summary>
    /// <returns>
    /// The current object.
    /// </returns>
    /// <exception cref="Exception::Error">
    /// The status of the cash register fiscal transaction is wrong.
    /// </exception>
    public abstract CashRegisterProcessingBase validateFiscalTransStatus()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>withCustTransToCancel</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>custTransToCancel</c> parameter.
    /// </summary>
    /// <param name="_custTransToCancel">
    /// The new value of the <c>custTransToCancel</c> parameter.
    /// </param>
    /// <returns>
    /// The current object.
    /// </returns>
    public CashRegisterProcessingBase withCustTransToCancel(CustTrans _custTransToCancel)
    {
        custTransToCancel = _custTransToCancel;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>withLedgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>ledgerJournalTrans</c> parameter.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The new value of the <c>ledgerJournalTrans</c> parameter.
    /// </param>
    /// <returns>
    /// The current object.
    /// </returns>
    public CashRegisterProcessingBase withLedgerJournalTrans(LedgerJournalTrans _ledgerJournalTrans = ledgerJournalTrans)
    {
        ledgerJournalTrans = _ledgerJournalTrans;
        return this;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates new object of needed type.
    /// </summary>
    /// <param name="_terminalRecId">
    /// Current Cash Register Terminal.
    /// </param>
    /// <returns><c>CashRegisterProcessingBase</c> object.</returns>
    /// <exception cref="Exception::Error">
    /// <c>ClassId</c> doesn't refer to class which extends <c>CashRegisterProcessingBase</c>.
    /// </exception>
    public static CashRegisterProcessingBase construct(CashRegisterTerminalRecId_W _terminalRecId)
    {
        CashRegisterTerminal_W terminal = CashRegisterTerminal_W::find(_terminalRecId);
        ClassId cashRegisterProcessingClassId = CashRegister_W::find(terminal.CashRegister).ProcessingClassId;
        CashRegisterProcessingBase cashRegisterProcessing;

        switch (cashRegisterProcessingClassId)
        {
            case classNum(CashRegisterProcessingEFSTA_W) :
                cashRegisterProcessing = CashRegisterProcessingEFSTA_W::construct();
                break;

            default:
                cashRegisterProcessing = null;
                break;
        }

        if (!cashRegisterProcessing)
        {
            throw error("@FiscalServices:CashRegisterProcessing_construct_wrongType");
        }

        return cashRegisterProcessing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFromCustInvoiceJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the cash register information using the Customer invoice journal record.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// The Customer invoice journal record.
    /// </param>
    public static void sendFromCustInvoiceJournal(CustInvoiceJour _custInvoiceJour)
    {
        CustTrans      custTrans = _custInvoiceJour.custTrans(), custTransPaym;
        CustSettlement custSettlement;

        select firstonly custTransPaym
        exists join custSettlement
            where custSettlement.OffsetRecid == custTransPaym.RecId
                && custSettlement.TransRecId == custTrans.RecId
                && custSettlement.TransCompany == custTrans.dataAreaId
                && custSettlement.AccountNum == custTrans.AccountNum;

        CashRegisterProcessingBase::sendFromCashRegisterFiscalTrans(
            CashRegisterFiscalTrans_W::findCustTrans(custTransPaym));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFromCancellingCustTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the cash register information using the Customer cancelling transaction record.
    /// </summary>
    /// <param name="_cancellingCustTrans">
    /// The Customer cancelling transaction record.
    /// </param>
    public static void sendFromCancellingCustTrans(CustTrans _cancellingCustTrans)
    {
        CashRegisterProcessingBase::sendFromCashRegisterFiscalTrans(
            CashRegisterFiscalTrans_W::findCustTrans(_cancellingCustTrans));
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendAllCreatedFiscalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends all unregistered transactions to fiscal service.
    /// </summary>
    public static void sendAllCreatedFiscalTrans()
    {
        CashRegisterFiscalTrans_W cashRegisterFiscalTransaction;
        while select cashRegisterFiscalTransaction
            where cashRegisterFiscalTransaction.Status == CashRegisterFiscalTransStatus_W::Created
        {
            CashRegisterProcessingBase::sendFromCashRegisterFiscalTrans(cashRegisterFiscalTransaction);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendCreatedFiscalTransToSpecialCashRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends all unregistered transactions with selected Cash Register to fiscal service.
    /// </summary>
    /// <param name = "_cashRegisterRecId">Selected Cash Register.</param>
    public static void sendCreatedFiscalTransToSpecialCashRegister(CashRegisterRecId_W _cashRegisterRecId)
    {
        CashRegisterFiscalTrans_W cashRegisterFiscalTransaction;
        while select cashRegisterFiscalTransaction
            where cashRegisterFiscalTransaction.Status == CashRegisterFiscalTransStatus_W::Created
                && cashRegisterFiscalTransaction.CashRegister == _cashRegisterRecId
        {
            CashRegisterProcessingBase::sendFromCashRegisterFiscalTrans(cashRegisterFiscalTransaction);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFromLedgerJournal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends the cash register information using the ledger journal record.
    /// </summary>
    /// <param name="_table">
    /// The ledger journal record.
    /// </param>
    public static void sendFromLedgerJournal(LedgerJournalTable _table)
    {
        LedgerJournalTrans          trans;
        TransDate                   transDate;
        Voucher                     voucher;
        CustTrans                   custTransInvoice, custTransPayment;
        CustSettlement              custSettlement;

        if (LedgerJournalTable::findByRecId(_table.RecId).Posted)
        {
            while select trans
                where trans.JournalNum == _table.JournalNum
                    && (trans.AccountType       == LedgerJournalACType::Cust
                    || trans.OffsetAccountType  == LedgerJournalACType::Cust)
            {
                if (PaymTerm::isCashAccount(trans.Payment))
                {
                    select firstonly transDate, Voucher, OffsetRecid from custTransPayment
                    exists join custSettlement
                        where custSettlement.TransCompany   == custTransPayment.dataAreaId
                            && custSettlement.TransRecId    == custTransPayment.RecId
                            && custSettlement.AccountNum    == custTransPayment.AccountNum
                    exists join custTransInvoice
                        where custTransInvoice.RecId        == custSettlement.OffsetRecid
                            && custTransInvoice.TransDate   == trans.TransDate
                            && custTransInvoice.Voucher     == trans.Voucher
                            && ((custTransInvoice.AccountNum == trans.parmAccount() 
                                && trans.AccountType == LedgerJournalACType::Cust)
                            || (custTransInvoice.AccountNum == trans.parmOffsetAccount()
                                && trans.OffsetAccountType == LedgerJournalACType::Cust));

                    if(custTransPayment.RecId)
                    {
                        CashRegisterFiscalTrans_W cashRegisterFiscalTrans_W =
                            CashRegisterFiscalTrans_W::findVoucherDate(
                                custTransPayment.Voucher,
                                custTransPayment.TransDate);

                        if (cashRegisterFiscalTrans_W && cashRegisterFiscalTrans_W.Status == CashRegisterFiscalTransStatus_W::Created)
                        {
                            CashRegisterProcessingBase::sendFromCashRegisterFiscalTrans(cashRegisterFiscalTrans_W);
                        }
                    }
                }

                CashRegisterProcessingBase::sendFromCashRegisterFiscalTrans(
                        CashRegisterFiscalTrans_W::findVoucherDate(
                            trans.Voucher,
                            trans.TransDate));

            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendXMLToFiscalRegister</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sends cash transaction to EFR-client.
    /// </summary>
    /// <returns><c>CashRegisterProcessingEFSTA_W</c> object.</returns>
    /// <exception cref="Exception::Error">
    /// The mandatory parameters are missing.
    /// </exception>
    /// <exception cref="Exception::Error">
    /// Request to the cash register returned an error.
    /// </exception>
    public abstract CashRegisterProcessingBase sendXMLToFiscalRegister()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>sendFromCashRegisterFiscalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates sending information to the cash register process using the fiscal transactions record.
    /// </summary>
    /// <param name="_trans">
    /// The fiscal transactions record.
    /// </param>
    public static client void sendFromCashRegisterFiscalTrans(CashRegisterFiscalTrans_W _trans)
    {
        CashRegister_W cashRegister = CashRegister_W::find(_trans.CashRegister);
        if (CashRegisterProcessingBase::isEnabled(cashRegister.ProcessingClassId) && _trans.RecId)
        {
            CashRegisterProcessingBase cashRegisterProcessing = CashRegisterProcessingBase::construct(_trans.Terminal);
            cashRegisterProcessing.cashRegisterFiscalTrans(_trans)
                .validate()
                .validateFiscalTransStatus()
                .validateAlreadySent()
                .sendXMLToFiscalRegister();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    // <exception cref="Exception::Error">
    // The mandatory parameters are missing or have wrong values.
    // </exception>
    public static void main(Args _args)
    {
        if (!_args || _args.parmEnumType() != enumNum(CashRegisterTransSendMode_W))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        switch(_args.parmEnum())
        {
            case CashRegisterTransSendMode_W::All:
                CashRegisterProcessingBase::sendAllCreatedFiscalTrans();
                break;

            case CashRegisterTransSendMode_W::Specific:
                if (_args.dataset() != tableNum(CashRegisterFiscalTrans_W))
                {
                    throw error(Error::wrongUseOfFunction(funcName()));
                }

                CashRegisterProcessingBase::sendFromCashRegisterFiscalTrans(_args.record());
                break;

            case CashRegisterTransSendMode_W::SpecificRegister:
                var cashRegister = any2Int64(_args.parm());
                CashRegisterProcessingBase::sendCreatedFiscalTransToSpecialCashRegister(cashRegister);
                break;

            default:
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>