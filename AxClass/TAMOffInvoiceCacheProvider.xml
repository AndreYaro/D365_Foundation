<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMOffInvoiceCacheProvider</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// A concrete class used provide the functionality around caching Off-Invoice discounts from Trade allowances.
/// </summary>
[ExportMetadataAttribute(classStr(PriceComponentCriteria), classStr(TAMOffInvoiceComponentCriteria)),
    ExportAttribute(identifierStr(Dynamics.AX.Application.PriceComponentCacheProvider))]
public class TAMOffInvoiceCacheProvider extends PriceComponentCacheProvider
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getCacheScope</Name>
				<Source><![CDATA[
    protected GlobalObjectCacheScope getCacheScope()
    {
        // Adding curExt to the scope because OffInvoice discounts are company specific.
        return classStr(TAMOffInvoiceCacheProvider) + curExt();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDataStore</Name>
				<Source><![CDATA[
    protected PriceComponentResult getFromDataStore(PriceComponentCriteria _priceComponentCriteria)
    {
        TAMOffInvoiceComponentCriteria offInvoiceComponentCriteria =
            _priceComponentCriteria as TAMOffInvoiceComponentCriteria;

        var result = new TAMOffInvoiceComponentResult();

        if (offInvoiceComponentCriteria != null)
        {
            MCRPriceDiscGroupItem       priceDiscGroupItems;
            container                   discValues;
            InventDim                   inventDimPrice;
            TAMPromotionItem            tamPromotionItem;
            TAMPromotionCust            tamPromotionCust;
            TAMMerchEventPricing        tamMerchEventPricing;
            TAMMerchandisingEvent       tamMerchEvents;
            TAMTradePromotion           tamTradePromotion;
            DiscAmount                  discAmount;
            DiscPct                     discPct;
            Qty                         offInvoiceComponentQtyUnitOfMeasure;
            container                   merchEventPricingRecIds;
            int                         counter = 1;

            InventDim       inventDim = inventDim::find(offInvoiceComponentCriteria.parmInventDimId());
            InventDimParm   prodDims = InventDimParm::allProductDim();
            SalesParameters salesParameters = SalesParameters::find();

            while select RecId from priceDiscGroupItems
            where priceDiscGroupItems.ItemId == offInvoiceComponentCriteria.parmItemId()
            #InventDimJoinCoveragePriority(priceDiscGroupItems.InventDimId, inventDimPrice, inventDim, prodDims, false)
            join UnitID from tamPromotionItem
            where tamPromotionItem.ItemID == offInvoiceComponentCriteria.parmItemId()
                && tamPromotionItem.MerchandisingEventID == priceDiscGroupItems.GroupId
                && tamPromotionItem.InventDimID == priceDiscGroupItems.InventDimId
            join RecId from tamPromotionCust
            where tamPromotionCust.PromotionID == tamPromotionItem.PromotionID
                && tamPromotionCust.CustAccount == offInvoiceComponentCriteria.parmAccount()
            join tamMerchEventPricing
            where tamMerchEventPricing.MerchandisingEventID == tamPromotionItem.MerchandisingEventID
                && (((tamPromotionItem.UnitID == offInvoiceComponentCriteria.parmUnitId())
                && ((tamMerchEventPricing.Quantity <= abs(offInvoiceComponentCriteria.parmQty()))
                && (tamMerchEventPricing.QuantityTo > abs(offInvoiceComponentCriteria.parmQty())
                    || tamMerchEventPricing.QuantityTo == 0)))
                || ((tamPromotionItem.UnitID != offInvoiceComponentCriteria.parmUnitId())))
                && (tamMerchEventPricing.DiscountAmt || tamMerchEventPricing.DiscountPercent)
            join RecId from tamMerchEvents
            where tamMerchEvents.MerchandisingEventID == tamPromotionItem.MerchandisingEventID
                && tamMerchEvents.MerchandisingEventCategory == MCRMerchandisingEventCategory::OffInvoice
            join Currency from tamTradePromotion
            where tamTradePromotion.PromotionID == tamMerchEvents.PromotionID
                && tamTradePromotion.PromotionStatus == TAMStatus::CustomerApproved
                && ((salesParameters.PriceDateType == SalesPriceDateType::ShippingDateRequested
                     && (!tamTradePromotion.RequestedShipmentStartDate
                         || tamTradePromotion.RequestedShipmentStartDate <= offInvoiceComponentCriteria.parmDiscDate())
                     && (!tamTradePromotion.RequestedShipmentEndDate
                         || tamTradePromotion.RequestedShipmentEndDate >= offInvoiceComponentCriteria.parmDiscDate()))
                    || (salesParameters.PriceDateType == SalesPriceDateType::ReceiptDateRequested
                        && (!tamTradePromotion.ShipmentStartDate
                            || tamTradePromotion.ShipmentStartDate <= offInvoiceComponentCriteria.parmDiscDate())
                        && (!tamTradePromotion.ShipmentEndDate
                            || tamTradePromotion.ShipmentEndDate >= offInvoiceComponentCriteria.parmDiscDate()))
                    || (salesParameters.PriceDateType == SalesPriceDateType::Today
                        && (!tamTradePromotion.OrdersStartDate
                            || tamTradePromotion.OrdersStartDate <= offInvoiceComponentCriteria.parmDiscDate())
                        && (!tamTradePromotion.OrdersEndDate
                            || tamTradePromotion.OrdersEndDate >= offInvoiceComponentCriteria.parmDiscDate())))
            {

                if (tamPromotionItem.UnitID != offInvoiceComponentCriteria.parmUnitId())
                {
                    offInvoiceComponentQtyUnitOfMeasure = EcoResProductUnitConverter::convertGivenUnitSymbolsForReleasedProduct(
                        offInvoiceComponentCriteria.parmItemId(),
                        offInvoiceComponentCriteria.parmInventDimId(),
                        abs(offInvoiceComponentCriteria.parmQty()),
                        offInvoiceComponentCriteria.parmUnitId(),
                        tamPromotionItem.UnitID);
                }
                if ((tamPromotionItem.UnitID == offInvoiceComponentCriteria.parmUnitId())
                    || (tamMerchEventPricing.Quantity <= offInvoiceComponentQtyUnitOfMeasure
                        && (tamMerchEventPricing.QuantityTo > offInvoiceComponentQtyUnitOfMeasure || tamMerchEventPricing.QuantityTo == 0)))
                {
                    if (tamMerchEventPricing.DiscountAmt != 0)
                    {
                        // the amount /sales unit
                        // Add discount amount found based on offInvoice search criteria above.
                        discAmount += ExchangeRateHelper::curPrice2CurPrice(tamMerchEventPricing.DiscountAmt, tamTradePromotion.Currency, offInvoiceComponentCriteria.parmCurCode());
                    }
                    else if (tamMerchEventPricing.DiscountPercent != 0)
                    {
                        // Code for the  percent here
                        // Add discount percentage found based on offInvoice search criteria above.
                        discPct += tamMerchEventPricing.DiscountPercent;
                    }

                    merchEventPricingRecIds = conIns(merchEventPricingRecIds, counter, tamMerchEventPricing.RecId);
                    counter++;
                }
            }

            discValues = conIns(discValues, 1, discAmount);
            discValues = conIns(discValues, 2, discPct);
            discValues = conIns(discValues, 3, merchEventPricingRecIds);

            result.unpack(discValues);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmClassName</Name>
				<Source><![CDATA[
    protected ClassName parmClassName()
    {
        return classStr(TAMOffInvoiceCacheProvider);
    }

]]></Source>
			</Method>
			<Method>
				<Name>TAMTradePromotionUpdateCommittedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event Handler for the update committed event of table <c>TAMTradePromotion</c>. Used to flush the cache storing off-invoice discounts.
    /// </summary>
    [SubscribesTo(tableStr(TAMTradePromotion), staticDelegateStr(TAMTradePromotion, publishUpdateCommittedEvent))]
    public static void TAMTradePromotionUpdateCommittedEventHandler()
    {
        new TAMOffInvoiceCacheProvider().flushCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>TAMTradePromotionDeleteCommittedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Event Handler for the delete committed event of table <c>TAMTradePromotion</c>. Used to flush the cache storing off-invoice discounts.
    /// </summary>
    [SubscribesTo(tableStr(TAMTradePromotion), staticDelegateStr(TAMTradePromotion, publishDeleteCommittedEvent))]
    public static void TAMTradePromotionDeleteCommittedEventHandler()
    {
        new TAMOffInvoiceCacheProvider().flushCache();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>