<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EximAuthorizationListPageInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The exim authorization list page interaction class.
/// </summary>
class EximAuthorizationListPageInteraction extends ListPageInteraction
{
    EximAuthorizationSchemesTable_IN    eximAuthorizationSchemesTable;
    FormDataSource                      eximAuthorizationSchemesTableDS;
    EximAuthorizationType_IN            authType;
    boolean                             isOnlyAAEnable;
    boolean                             isOnlyDFIAEnable;
    #DEFINE.EximAuthorizationListPage (EximAuthorizationSchemesTableListPage_IN)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>enableAttachButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the attach button of the exim authorization list page.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void enableAttachButton()
    {
        FormControlName eximAuthorizationSchemesAttach = formcontrolstr(#EximAuthorizationListPage, EximAuthorizationSchemesAttach);

        this.enableButton(eximAuthorizationSchemesAttach, eximAuthorizationSchemesTable.AuthorizationBasis != EximAuthorizationBasis_IN::Purchase
                       && (eximAuthorizationSchemesTable.Status == EximAuthorizationStatus_IN::Applied
                       || eximAuthorizationSchemesTable.Status  == EximAuthorizationStatus_IN::Created));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableButton</Name>
				<Source><![CDATA[
        private void enableButton(str _controlName, boolean _enabled = true)
    {
        this.listPage().actionPaneControlEnabled(_controlName, _enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableFunctionsButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the function button of the exim authorization list page.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void enableFunctionsButton()
    {
        EximAuthorizationSchemesTable_IN authorizationSchemesTableLoc;
        EximParameters_IN                eximParameters = EximParameters_IN::find();
        container                        selectedAuthorizations;
        boolean                          isAuthorizationApproved;
        boolean                          isAuthorizationApplied;
        boolean                          isAuthorizationMerged;
        boolean                          isPurchaseAllowed;
        boolean                          isSaleAllowed;
        boolean                          isMergeEnabled;
        boolean                          isSplitEnabled;

        FormControlName approve  = formcontrolstr(#EximAuthorizationListPage, Approve);
        FormControlName purchase = formcontrolstr(#EximAuthorizationListPage, Purchase);
        FormControlName sale     = formcontrolstr(#EximAuthorizationListPage, Sale);
        FormControlName reject   = formcontrolstr(#EximAuthorizationListPage, Reject);
        FormControlName split    = formcontrolstr(#EximAuthorizationListPage, Split);
        FormControlName merge    = formcontrolstr(#EximAuthorizationListPage, Merge);

        isAuthorizationApproved = (eximAuthorizationSchemesTable.Status == EximAuthorizationStatus_IN::Approved);
        isAuthorizationApplied  = (eximAuthorizationSchemesTable.Status == EximAuthorizationStatus_IN::Applied);
        isAuthorizationMerged   = (eximAuthorizationSchemesTable.Status == EximAuthorizationStatus_IN::Merged);

        switch (authType)
        {
            case EximAuthorizationType_IN::AA:
                isPurchaseAllowed = eximParameters.aaAllowPurchase;
                isSaleAllowed     = eximParameters.aaAllowSale;
                break;

            case EximAuthorizationType_IN::DFIA:
                isPurchaseAllowed = eximParameters.dfiaAllowPurchase;
                isSaleAllowed     = eximParameters.dfiaAllowSale;
                isSplitEnabled    = true;
                break;
        }

        this.enableButton(approve, isAuthorizationApplied);

        this.visibleButton(purchase, isPurchaseAllowed);
        this.enableButton(purchase, eximAuthorizationSchemesTable.AuthorizationBasis == EximAuthorizationBasis_IN::Purchase
                                    && eximAuthorizationSchemesTable.Status          == EximAuthorizationStatus_IN::Created);

        this.visibleButton(sale, isSaleAllowed);
        this.enableButton(sale, isSaleAllowed
                                && isAuthorizationApproved
                                && eximAuthorizationSchemesTable.Transferable
                                && eximAuthorizationSchemesTable.enableSale());

        this.enableButton(reject, eximAuthorizationSchemesTable.RecId && !isAuthorizationApproved && !isAuthorizationMerged);

        this.visibleButton(split, isSplitEnabled);
        isSplitEnabled = ((eximAuthorizationSchemesTable.AuthorizationType == EximAuthorizationType_IN::DFIA)
                         && !eximAuthorizationSchemesTable.Closed
                         && (eximAuthorizationSchemesTable.Status == EximAuthorizationStatus_IN::Approved)
                         && EximAuthorization_Split_IN::canAuthorizationBeSplit(eximAuthorizationSchemesTable.RecId));
        this.enableButton(split, isSplitEnabled);

        for (authorizationSchemesTableLoc = eximAuthorizationSchemesTableDS.getFirst(true);
             authorizationSchemesTableLoc;
             authorizationSchemesTableLoc = eximAuthorizationSchemesTableDS.getNext())
        {
            selectedAuthorizations += authorizationSchemesTableLoc.RecId;
        }

        if (conlen(selectedAuthorizations) > 1)
        {
            isMergeEnabled = EximAuthorization_Merge_IN::canAuthorizationBeMerged(selectedAuthorizations);
        }
        else
        {
            isMergeEnabled =  false;
        }

        this.enableButton(merge, isMergeEnabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableInquiryButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the inquiry button of the exim authorization list page.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void enableInquiryButton()
    {
        boolean isAuthorizationApproved;
        boolean createdByMergeOrSplit;

        FormControlName exportObligation = formcontrolstr(#EximAuthorizationListPage, ExportObligation);
        FormControlName eximExportOrderTrans = formcontrolstr(#EximAuthorizationListPage, EximExportOrderTrans);
        FormControlName confirmOrderTrans = formcontrolstr(#EximAuthorizationListPage, ConfirmOrderTrans);
        FormControlName eximAnnualConsumptionTrans = formcontrolstr(#EximAuthorizationListPage, EximAnnualConsumptionTrans);

        isAuthorizationApproved = (eximAuthorizationSchemesTable.Status == EximAuthorizationStatus_IN::Approved
                                   || eximAuthorizationSchemesTable.Status == EximAuthorizationStatus_IN::Merged);

        createdByMergeOrSplit   = EximAuthorizationSchemeReference_IN::existsReferenceType(eximAuthorizationSchemesTable.RecId,
                                                                                           EximMergeSplit_IN::None);

        this.enableButton(exportObligation, (eximAuthorizationSchemesTable.AuthorizationBasis != EximAuthorizationBasis_IN::Purchase
                                             && !eximAuthorizationSchemesTable.SplitApproved));

        this.enableButton(eximExportOrderTrans, (isAuthorizationApproved
                                                 && eximAuthorizationSchemesTable.AuthorizationBasis == EximAuthorizationBasis_IN::ExportOrder
                                                 && !createdByMergeOrSplit));

        this.enableButton(confirmOrderTrans, (isAuthorizationApproved
                                              && eximAuthorizationSchemesTable.AuthorizationBasis == EximAuthorizationBasis_IN::ConfirmedOrder
                                              && !createdByMergeOrSplit));

        this.enableButton(eximAnnualConsumptionTrans, (isAuthorizationApproved
                                                       && eximAuthorizationSchemesTable.AuthorizationBasis == EximAuthorizationBasis_IN::AnnualConsumption
                                                       && !createdByMergeOrSplit));
    }

]]></Source>
			</Method>
			<Method>
				<Name>enableMenuButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enable the menu button of the exim authorization list page.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void enableMenuButton()
    {
        boolean isAuthorizationCreated;
        boolean isAuthorizationRejected;

        FormControlName eximAuthorizationSchemesFunctions = formcontrolstr(#EximAuthorizationListPage, EximAuthorizationSchemesFunctions);
        FormControlName eximAuthorizationSchemesInquiry = formcontrolstr(#EximAuthorizationListPage, EximAuthorizationSchemesInquiry);
        FormControlName eximAuthorizationSchemesSummary = formcontrolstr(#EximAuthorizationListPage, EximAuthorizationSchemesSummary);
        FormControlName confirmedOrders = formcontrolstr(#EximAuthorizationListPage, ConfirmedOrders);
        FormControlName annualConsumption = formcontrolstr(#EximAuthorizationListPage, AnnualConsumption);
        FormControlName exportOrderDetails = formcontrolstr(#EximAuthorizationListPage, ExportOrderDetails);

        isAuthorizationCreated  = (eximAuthorizationSchemesTable.Status == EximAuthorizationStatus_IN::Created);
        isAuthorizationRejected = (eximAuthorizationSchemesTable.Status == EximAuthorizationStatus_IN::Rejected);

        this.enableButton(eximAuthorizationSchemesFunctions, !isAuthorizationRejected);
        this.enableButton(eximAuthorizationSchemesInquiry, !isAuthorizationRejected);
        this.enableButton(eximAuthorizationSchemesSummary, !isAuthorizationCreated && !isAuthorizationRejected);

        this.enableButton(confirmedOrders, eximAuthorizationSchemesTable.RecId
                          && eximAuthorizationSchemesTable.AuthorizationBasis == EximAuthorizationBasis_IN::ConfirmedOrder);
        this.enableButton(annualConsumption, eximAuthorizationSchemesTable.AuthorizationBasis == EximAuthorizationBasis_IN::AnnualConsumption);
        this.enableButton(exportOrderDetails, eximAuthorizationSchemesTable.AuthorizationBasis == EximAuthorizationBasis_IN::ExportOrder);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the instance of the <c>EximAuthorizationListPageInteraction</c> class.
    /// </summary>
    public void initializing()
    {
        boolean  check = TaxParameters::find().EximIncentiveSchemes_IN;

        if (check)
        {
            if (!EximParameters_IN::find().ActivateDFIA
                && EximParameters_IN::find().ActivateAA)
            {
                isOnlyAAEnable = true;
            }
            else if (!EximParameters_IN::find().ActivateAA
                    && EximParameters_IN::find().ActivateDFIA)
            {
                isOnlyDFIAEnable = true;
            }
        }
        if (!EximParameters_IN::checkParameters())
        {
            // '%1' parameter or '%2' parameter must be selected in the incentive scheme parameters to activate the '%3' form.
            // %1 = Advance Authorization, %2 = DFIA, %3 = EXIM Authorization schemes
            throw error(strfmt("@GLS61668", "@GLS61572","@GLS61510", "@GLS61540" ));
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAuthType</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public EximAuthorizationType_IN parmAuthType(EximAuthorizationType_IN _authType = authType)
    {
        authType  = _authType;

        return authType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmEximAuthorizationSchemesTable_IN_DS</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public FormDataSource parmEximAuthorizationSchemesTable_IN_DS(FormDataSource _formDataSource = eximAuthorizationSchemesTableDS)
    {
        eximAuthorizationSchemesTableDS = _formDataSource;
        return eximAuthorizationSchemesTableDS;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsOnlyAAEnable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmIsOnlyAAEnable(boolean _isOnlyAAEnable = isOnlyAAEnable)
    {
        isOnlyAAEnable  = _isOnlyAAEnable;

        return isOnlyAAEnable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIsOnlyDFIAEnable</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public boolean parmIsOnlyDFIAEnable(boolean _isOnlyDFIAEnable = isOnlyDFIAEnable)
    {
        isOnlyDFIAEnable  = _isOnlyDFIAEnable;

        return isOnlyDFIAEnable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// The calling method when the page selection changed.
    /// </summary>
    public void selectionChanged()
    {
        super();
        eximAuthorizationSchemesTable = this.listPage().activeRecord(querydatasourcestr(EximAuthorizationSchemes_IN, EximAuthorizationSchemesTable_IN)) as EximAuthorizationSchemesTable_IN;
        this.setButtonAccess();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonAccess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the button access of the exim authorization list page.
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    void setButtonAccess()
    {
        this.enableMenuButton();
        this.enableAttachButton();
        this.enableFunctionsButton();
        this.enableInquiryButton();
    }

]]></Source>
			</Method>
			<Method>
				<Name>visibleButton</Name>
				<Source><![CDATA[
        private void visibleButton(str _controlName, boolean _visible = true)
    {
        this.listPage().actionPaneControlVisible(_controlName, _visible);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>