<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjAdvancedJournalAutoPostBatch</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Batch job to post all unposted project advanced journals from PSA integration, triggered from <c>ProjAdvancedJournalAutoPostBatch</c> periodic job.
/// </summary>
class ProjAdvancedJournalAutoPostBatch extends RunBaseBatch implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        ProjOpsIntegrationLogger logger = ProjOpsIntegrationLogger::createLogger(classStr(ProjAdvancedJournalAutoPostBatch));
        boolean enableProjAdvancedJournalLineMultipleBatchTaskFeature = FeatureStateProvider::isFeatureEnabled(ProjEnableAdvancedJournalMultipleBatchTaskFeature::instance());
        int journalListLength = 0;

        using (var activityContext = logger.integrationJournalActivity().postAllDraftContext())
        {
            if (this.isInBatch() && enableProjAdvancedJournalLineMultipleBatchTaskFeature)
            {
                activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsIntegrationJournalInstrumentationActivites::PostingUsingMultipleBatchTasks);
            }
            else
            {
                activityContext.addCustomProperty(ProjOpsInstrumentationBaseActitivies::ActionProperty, ProjOpsIntegrationJournalInstrumentationActivites::PostingWithoutMultipleBatchTasks);
            }

            ProjAdvancedJournal journal;
            while select journal
                where journal.Status == ProjAdvancedJournalStatus::Draft
            {
                try
                {

                    logger.logInformation(strFmt(ProjOpsIntegrationJournalInstrumentationActivites::PostAdvancedJournalInfoMessage, journal.ProjAdvancedJournalId));

                    journalListLength ++;
                    
                    ProjAdvancedJournalPost projAdvancedJournalPost = ProjAdvancedJournalPost::construct(journal);
                    if (this.isInBatch() && enableProjAdvancedJournalLineMultipleBatchTaskFeature)
                    {
                        projAdvancedJournalPost.postAdvancedJournalInBatch(journal);
                    }
                    else
                    {
                        projAdvancedJournalPost.runOperation();
                    }
                }
                catch (Exception::Error)
                {
                    logger.logError(strFmt("@Proj:ProjAdvancedJournalPostingError", this.parmCurrentBatch(), journal.ProjAdvancedJournalId, journal.numOfLines(), Exception::Error, 0));
                    Global::exceptionTextFallThrough();
                }
            }

            activityContext.addCustomProperty(ProjOpsIntegrationJournalInstrumentationActivites::JournalListLength, int2Str(journalListLength));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static ProjAdvancedJournalAutoPostBatch construct()
    {
        ProjAdvancedJournalAutoPostBatch batch = new ProjAdvancedJournalAutoPostBatch();

        return batch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@Proj:PostAllIntegrationJournals";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(xArgs _args)
    {
        ProjAdvancedJournalAutoPostBatch task = ProjAdvancedJournalAutoPostBatch::construct();

        if (task.prompt())
        {
            task.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>