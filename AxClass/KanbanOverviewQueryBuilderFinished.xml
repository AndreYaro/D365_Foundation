<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanOverviewQueryBuilderFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The AIF query builder class for the kanban quantity overview.
/// </summary>
public class KanbanOverviewQueryBuilderFinished extends KanbanOverviewQueryBuilderCell
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addNotExistOpenKanbansRange</Name>
				<Source><![CDATA[
        private void addNotExistOpenKanbansRange(QueryBuildDataSource _qbdsKanbanRule)
    {
        // Jobs that belong to a created kanban which must belong to a not expired rule
        QueryBuildDataSource qbdsKanban = _qbdsKanbanRule.addDataSource(tableNum(Kanban));
        qbdsKanban.fields().clearFieldList();
        qbdsKanban.fields().addField(fieldNum(Kanban, RecId));
        qbdsKanban.fields().addField(fieldNum(Kanban, KanbanRule));
        qbdsKanban.fields().addField(fieldNum(Kanban, Type));
        qbdsKanban.fields().addField(fieldNum(Kanban, Status));
        qbdsKanban.fields().addField(fieldNum(Kanban, LegalEntity));

        qbdsKanban.joinMode(JoinMode::NoExistsJoin);
        qbdsKanban.addLink(fieldNum(KanbanRule, RecId), fieldNum(Kanban, KanbanRule));

        // Only manufacture kanbans can have process jobs
        QueryBuildRange queryBuildRange = qbdsKanban.addRange(fieldNum(Kanban, Type));
        queryBuildRange.value(SysQuery::value(LeanKanbanType::Manufacturing));

        queryBuildRange = qbdsKanban.addRange(fieldNum(Kanban, Status));
        queryBuildRange.value(SysQuery::valueNot(LeanKanbanStatus::Emptied));

        queryBuildRange = qbdsKanban.addRange(fieldNum(Kanban, LegalEntity));
        queryBuildRange.value(SysQuery::value(this.legalEntity()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes the query to fetch the products for the finished goods overview control.
    /// </summary>
    public void initialize()
    {
        LegalEntity             legalEntity              = this.legalEntity();
        RefRecId                wrkCtrResourceGroupRecId = this.wrkCtrResourceGroupRecId();
        str                     activeDateTime           = DateTimeUtil::toStr(this.getArgs().parmActiveDateTime());

        query = this.buildItemRelationQueryBase();

        // Kanban Rule
        QueryBuildDataSource qbdsKanbanRule = query.dataSourceTable(tableNum(KanbanRule));
        QueryBuildRange queryBuildRange = qbdsKanbanRule.addRange(fieldNum(KanbanRule, KanbanType));
        queryBuildRange.value(SysQuery::value(LeanKanbanType::Manufacturing));

        // Kanban Flow
        QueryBuildDataSource qbdsKanbanFlow = qbdsKanbanRule.addDataSource(tableNum(KanbanFlow));
        qbdsKanbanFlow.fields().clearFieldList();
        qbdsKanbanFlow.fields().addField(fieldNum(KanbanFlow, RecId));
        qbdsKanbanFlow.fields().addField(fieldNum(KanbanFlow, FirstPlanPlanActivity));

        qbdsKanbanFlow.joinMode(JoinMode::ExistsJoin);
        qbdsKanbanFlow.addLink(fieldNum(KanbanRule, KanbanFlow), fieldNum(KanbanFlow, RecId));

        // Plan Plan Activity
        QueryBuildDataSource qbdsPlanPlanActivityFirst = qbdsKanbanFlow.addDataSource(tableNum(PlanPlanActivity));
        qbdsPlanPlanActivityFirst.fetchMode(QueryFetchMode::One2One);
        qbdsPlanPlanActivityFirst.joinMode(JoinMode::InnerJoin);
        qbdsPlanPlanActivityFirst.addLink(fieldNum(KanbanFlow, FirstPlanPlanActivity), fieldNum(PlanPlanActivity, RecId));

        // Kanban Flow Activity Relationship
        QueryBuildDataSource qbdsKanbanFlowActivityRelationship = qbdsKanbanFlow.addDataSource(tableNum(KanbanFlowActivityRelationship));
        qbdsKanbanFlowActivityRelationship.fields().clearFieldList();
        qbdsKanbanFlowActivityRelationship.fields().addField(fieldNum(KanbanFlowActivityRelationship, RecId));
        qbdsKanbanFlowActivityRelationship.fields().addField(fieldNum(KanbanFlowActivityRelationship, KanbanFlow));
        qbdsKanbanFlowActivityRelationship.fields().addField(fieldNum(KanbanFlowActivityRelationship, LeanProdFlowActivityRelation));

        qbdsKanbanFlowActivityRelationship.fetchMode(QueryFetchMode::One2One);
        qbdsKanbanFlowActivityRelationship.joinMode(JoinMode::OuterJoin);
        qbdsKanbanFlowActivityRelationship.addLink(fieldNum(KanbanFlow, RecId), fieldNum(KanbanFlowActivityRelationship, KanbanFlow));

        // Lean Prod Flow Plan Activity Relation
        QueryBuildDataSource qbdsLeanProdFlowPlanActivityRelation = qbdsKanbanFlowActivityRelationship.addDataSource(tableNum(LeanProdFlowPlanActivityRelation));
        qbdsLeanProdFlowPlanActivityRelation.fields().clearFieldList();
        qbdsLeanProdFlowPlanActivityRelation.fields().addField(fieldNum(LeanProdFlowPlanActivityRelation, RecId));
        qbdsLeanProdFlowPlanActivityRelation.fields().addField(fieldNum(LeanProdFlowPlanActivityRelation, PlanActivityRelationship));

        qbdsLeanProdFlowPlanActivityRelation.joinMode(JoinMode::OuterJoin);
        qbdsLeanProdFlowPlanActivityRelation.addLink(fieldNum(KanbanFlowActivityRelationship, LeanProdFlowActivityRelation), fieldNum(LeanProdFlowPlanActivityRelation, RecId));

        // Sequence Plan Activity Relationship
        QueryBuildDataSource qbdsSequencePlanActivityRelationship = qbdsLeanProdFlowPlanActivityRelation.addDataSource(tableNum(PlanActivityRelationship));
        qbdsSequencePlanActivityRelationship.fields().clearFieldList();
        qbdsSequencePlanActivityRelationship.fields().addField(fieldNum(PlanActivityRelationship, RecId));
        qbdsSequencePlanActivityRelationship.fields().addField(fieldNum(PlanActivityRelationship, IndependentPlanActivity));
        qbdsSequencePlanActivityRelationship.fields().addField(fieldNum(PlanActivityRelationship, DependentPlanActivity));

        qbdsSequencePlanActivityRelationship.joinMode(JoinMode::OuterJoin);
        qbdsSequencePlanActivityRelationship.addLink(fieldNum(LeanProdFlowPlanActivityRelation, PlanActivityRelationship), fieldNum(PlanActivityRelationship, RecId));

        // Lean Production Flow Activity Work Cell - Plan Activity
        QueryBuildDataSource qbdsLeanProductionFlowActivity = qbdsKanbanFlow.addDataSource(tableNum(LeanProductionFlowActivity));
        qbdsLeanProductionFlowActivity.fields().clearFieldList();
        qbdsLeanProductionFlowActivity.fields().addField(fieldNum(LeanProductionFlowActivity, RecId));
        qbdsLeanProductionFlowActivity.fields().addField(fieldNum(LeanProductionFlowActivity, PlanActivity));
        qbdsLeanProductionFlowActivity.fields().addField(fieldNum(LeanProductionFlowActivity, WrkCtrResourceGroup));

        qbdsLeanProductionFlowActivity.fetchMode(QueryFetchMode::One2One);
        qbdsLeanProductionFlowActivity.joinMode(JoinMode::ExistsJoin);
        queryBuildRange = qbdsLeanProductionFlowActivity.addRange(fieldNum(LeanProductionFlowActivity, PlanActivity));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.value(strFmt('((%1.%2 == %3.%4) || (%5.%6 == %7.%8) || (%9.%10 == %11.%12))',
            qbdsSequencePlanActivityRelationship.name(),
            fieldStr(PlanActivityRelationship, IndependentPlanActivity),
            qbdsLeanProductionFlowActivity.name(),
            fieldStr(LeanProductionFlowActivity, PlanActivity),
            qbdsSequencePlanActivityRelationship.name(),
            fieldStr(PlanActivityRelationship, DependentPlanActivity),
            qbdsLeanProductionFlowActivity.name(),
            fieldStr(LeanProductionFlowActivity, PlanActivity),
            qbdsPlanPlanActivityFirst.name(),
            fieldStr(PlanPlanActivity, PlanActivity),
            qbdsLeanProductionFlowActivity.name(),
            fieldStr(LeanProductionFlowActivity, PlanActivity)));

        queryBuildRange = qbdsLeanProductionFlowActivity.addRange(fieldNum(LeanProductionFlowActivity, WrkCtrResourceGroup));
        queryBuildRange.value(SysQuery::value(wrkCtrResourceGroupRecId));

        // Kanban Rule inverted - First criteria - Exclude expired rules without open jobs

        QueryBuildDataSource qbdsKanbanRuleInvert = qbdsKanbanRule.addDataSource(tableNum(KanbanRule));
        qbdsKanbanRuleInvert.fields().clearFieldList();
        qbdsKanbanRuleInvert.fields().addField(fieldNum(KanbanRule, RecId));
        qbdsKanbanRuleInvert.fields().addField(fieldNum(KanbanRule, LegalEntity));

        qbdsKanbanRuleInvert.joinMode(JoinMode::NoExistsJoin);
        qbdsKanbanRuleInvert.addLink(fieldNum(KanbanRule, RecId), fieldNum(KanbanRule, RecId));

        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldNum(KanbanRule, LegalEntity));
        queryBuildRange.value(SysQuery::value(legalEntity));

        // has not started, or has already ended
        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldNum(KanbanRule, RecId));
        QueryBuildDataSource qbdsLeanCoverageKanbanRule = query.dataSourceTable(tableNum(LeanCoverageKanbanRule));
        queryBuildRange.status(RangeStatus::Locked);
        queryBuildRange.value(strFmt('((%1.%2 > %3) || ((%4.%5 < %6) && (%7.%8 != %9)))',
            qbdsLeanCoverageKanbanRule.name(), fieldStr(LeanCoverageKanbanRule, ValidFrom), activeDateTime,
            qbdsLeanCoverageKanbanRule.name(), fieldStr(LeanCoverageKanbanRule, ValidTo), activeDateTime,
            qbdsLeanCoverageKanbanRule.name(), fieldStr(LeanCoverageKanbanRule, ValidTo), KanbanOverviewQueryBuilderCriteria::dateTimeNull2Str()));

        this.addNotExistOpenKanbansRange(qbdsKanbanRuleInvert);

        // Kanban Rule inverted - Second criteria - Exclude rules without open jobs that do not have minimum alert level

        qbdsKanbanRuleInvert = qbdsKanbanRule.addDataSource(tableNum(KanbanRule));
        qbdsKanbanRuleInvert.fields().clearFieldList();
        qbdsKanbanRuleInvert.fields().addField(fieldNum(KanbanRule, RecId));
        qbdsKanbanRuleInvert.fields().addField(fieldNum(KanbanRule, MinimumAlertLevel));
        qbdsKanbanRuleInvert.fields().addField(fieldNum(KanbanRule, LegalEntity));

        qbdsKanbanRuleInvert.joinMode(JoinMode::NoExistsJoin);
        qbdsKanbanRuleInvert.addLink(fieldNum(KanbanRule, RecId), fieldNum(KanbanRule, RecId));

        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldNum(KanbanRule, MinimumAlertLevel));
        queryBuildRange.value(queryValue(0));

        queryBuildRange = qbdsKanbanRuleInvert.addRange(fieldNum(KanbanRule, LegalEntity));
        queryBuildRange.value(SysQuery::value(legalEntity));

        this.addNotExistOpenKanbansRange(qbdsKanbanRuleInvert);

        // Initialize query run
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        public static KanbanOverviewQueryBuilderFinished construct()
    {
        return new KanbanOverviewQueryBuilderFinished();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
