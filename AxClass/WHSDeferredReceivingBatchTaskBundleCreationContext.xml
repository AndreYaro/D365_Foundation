<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSDeferredReceivingBatchTaskBundleCreationContext</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class WHSDeferredReceivingBatchTaskBundleCreationContext implements System.IDisposable
{
    private static WHSDeferredReceivingBatchTaskBundleCreationContext instance;
    private int nestingLevel = 0;

    private WHSReceivingProcessingID receivingProcessingID;
    private RefRecId batchHeaderId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isBatchCreated</Name>
				<Source><![CDATA[
    private boolean isBatchCreated()
    {
        return batchHeaderId && receivingProcessingID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceivingProcessingId</Name>
				<Source><![CDATA[
    internal WHSReceivingProcessingID getReceivingProcessingId()
    {
        return receivingProcessingID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isAtRootLevel</Name>
				<Source><![CDATA[
    internal boolean isAtRootLevel()
    {
        return nestingLevel == 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>Dispose</Name>
				<Source><![CDATA[
    public void Dispose()
    {
        nestingLevel--;
        if (nestingLevel <= 0 || !WHSDeferredReceivingBatchTaskBundleContextHardeningFlight::instance().isEnabled())
        {
            instance = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSDeferredReceivingBatchTaskBundleCreationContext construct()
    {
        if (instance && !WHSDeferredReceivingBatchTaskBundleContextHardeningFlight::instance().isEnabled())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!instance)
        {
            instance = new WHSDeferredReceivingBatchTaskBundleCreationContext();
        }

        instance.nestingLevel++;
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static boolean isInContext()
    {
        return instance != null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getContext</Name>
				<Source><![CDATA[
    [Hookable(false)]
    internal static WHSDeferredReceivingBatchTaskBundleCreationContext getContext()
    {
        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>addReceiptIdToProcess</Name>
				<Source><![CDATA[
    internal void addReceiptIdToProcess(WHSReceiptId _receiptId)
    {
        if (!_receiptId && WHSDeferredReceivingBatchTaskBundleContextHardeningFlight::instance().isEnabled())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!this.isBatchCreated())
        {
            [receivingProcessingID, batchHeaderId] = WHSDeferredReceiving::createBatchTaskToProcessDeferredReceivingInBundle();
        }

        WHSMixedLicensePlateReceipt mixedLicensePlateReceipt = WHSMixedLicensePlateReceipt::find(_receiptId, true);
        WHSDeferredReceiving::addMixLPReceiptToBatchTask(mixedLicensePlateReceipt, receivingProcessingID, batchHeaderId);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>