<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSReplenishment</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;

/// <summary>
/// The <c>WhsReplenishment</c> class is used to run batch job for replenishment.
/// </summary>
public class WhsReplenishment extends RunBaseBatch implements BatchRetryable, SysErrorMessageHelpScopeIBatchProvider
{
    QueryRun        queryRun;
    WHSWorkBuildId  workBuildId;
    private Set		zoneWorkBuildIds; 
	private Set		currentItemProductDimsEvaluated;
    private Map     itemInventDimIsStoppedMap = new Map(Types::Container, Types::Enum);
    const int       CommitSize = 100;

    private WHSInstrumentationLogger    instrumentationLogger;

    #define.CurrentVersion(1)

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateReplenishQty</Name>
				<Source><![CDATA[
    protected Qty calculateReplenishQty(
        WHSReplenishmentTemplateLine    _templateLine,
        ItemId                          _itemId,
        InventQty                       _curQty,
        InventDimId                     _inventDimId)
    {
        Qty                                 maxQty;
        Qty                                 convertedQty;
        InventQty                           replenQty;
        InventHandlingUnitId                inventHandlingUnitId            = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);
        EcoResReleasedProductUnitConverter  releasedProductUnitConverter    = EcoResReleasedProductUnitConverter::construct();

        if ((PdsGlobal::pdsIsCWItem(_itemId))
        &&  !WHSUOMSeqGroupLine::findByUnitId(WHSInventTable::find(_itemId).UOMSeqGroupId, _templateLine.ReplenishmentUOM))
        {
            warning(strFmt("@WAX:CWCannotReplenishForSequenceWrongUnit_Error", 
                           _itemId, 
                           _templateLine.SeqNum,
                           _templateLine.ReplenishTemplateId));

            return 0;
        }

        if (inventHandlingUnitId != _templateLine.ReplenishmentUOM &&
            !releasedProductUnitConverter.canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(inventHandlingUnitId),
                                                    UnitOfMeasure::unitOfMeasureIdBySymbol(_templateLine.ReplenishmentUOM),
                                                    _itemId,
                                                    _inventDimId))
        {
            warning(strFmt("@WAX2624",
                    _itemId, _templateLine.SeqNum, inventHandlingUnitId, _templateLine.ReplenishmentUOM));
            return 0;
        }

        if (WHSReplenishmentTemplate::find(_templateLine.ReplenishTemplateId).ReplenishmentType == WHSReplenishmentType::MinMax)
        {
            maxQty = WHSCatchWeightHelper::convertInventQuantity(_itemId,
                                                            _templateLine.QtyUOM,
                                                            _templateLine.MaxQty,
                                                            _inventDimId);

            convertedQty = releasedProductUnitConverter.convert(maxQty - _curQty,
                                                           UnitOfMeasure::unitOfMeasureIdBySymbol(inventHandlingUnitId),
                                                           UnitOfMeasure::unitOfMeasureIdBySymbol(_templateLine.ReplenishmentUOM),
                                                           NoYes::No,
                                                           _itemId,
                                                           _inventDimId,
                                                           NoYes::No);

            convertedQty = _templateLine.DemandIncrement == WHSDemandIncrement::RoundDown ? Global::roundDown(convertedQty, 1) : Global::roundUp(convertedQty, 1);
        }
        else
        {
            convertedQty = releasedProductUnitConverter.convert(_curQty,
                                                           UnitOfMeasure::unitOfMeasureIdBySymbol(inventHandlingUnitId),
                                                           UnitOfMeasure::unitOfMeasureIdBySymbol(_templateLine.ReplenishmentUOM),
                                                           NoYes::No,
                                                           _itemId,
                                                           _inventDimId,
                                                           NoYes::No);
            convertedQty = Global::roundUp(convertedQty, 1);
        }

        replenQty = WHSCatchWeightHelper::convertInventQuantity(_itemId,
                                                           _templateLine.ReplenishmentUOM,
                                                           convertedQty,
                                                           _inventDimId);

        return replenQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canConvertToEvalUOM</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the item has unit conversion to the evaluation UOM specified on the replenishment template Line.
    /// </summary>
    /// <param name="_templateLine">
    /// The Replenishment template line being run.
    /// </param>
    /// <param name="_itemId">
    /// The item to be replenished.
    /// </param>
    /// <param name="_inventDimId">
    /// An <c>InventDim</c> containing product dimensions.
    /// </param>
    /// <returns>
    /// true, if the item has unit of measure conversions setup to convert to the evaluation UOM; otherwise, false.
    /// </returns>
    protected boolean canConvertToEvalUOM(
        WHSReplenishmentTemplateLine        _templateLine,
        ItemId                              _itemId,
        InventDimId                         _inventDimId)
    {
        UnitOfMeasureSymbol handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);

        // Do not try to convert until we know we want to try and replenish this item.
        if (handlingUnitId != _templateLine.QtyUOM
            &&  !EcoResReleasedProductUnitConverter::construct().canBeConverted(UnitOfMeasure::unitOfMeasureIdBySymbol(handlingUnitId),
                                                                                UnitOfMeasure::unitOfMeasureIdBySymbol(_templateLine.QtyUOM),
                                                                                _itemId,
                                                                                _inventDimId))
        {
            return checkFailed(strFmt("@WAX2624", _itemId, _templateLine.SeqNum, handlingUnitId, _templateLine.QtyUOM));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanUpWork</Name>
				<Source><![CDATA[
    /// <summary>
	/// Cleans up replenishment works that didn't apply.
	/// </summary>
	/// <param name="_workBuildId">
	/// Work build id.
	/// </param>
    void cleanUpWork(WHSWorkBuildId _workBuildId)
    {
        if (_workBuildId)
        {
            WHSWorkTable    workTable;
            WHSTmpWorkLine  tmpWorkLine;

            while select workTable
                where workTable.WorkBuildId  == _workBuildId
                exists join tmpWorkLine
                    where tmpWorkLine.WorkCreateId == _workBuildId
                       && tmpWorkLine.WorkId == workTable.WorkId
            {
                WHSWorkLine     workLine;

                select firstonly workLine
                    where workLine.WorkId    == workTable.WorkId &&
                          workLine.WorkType  == WHSWorkType::Pick;

                if (!workLine.wmsLocationId)
                {
                    select firstonly workLine
                        where workLine.WorkId   == workTable.WorkId &&
                              workLine.WorkType == WHSWorkType::Put;

                    info(strFmt("@WAX2014", workLine.wmsLocationId, workLine.ItemId));
                    workLine.clear();

                    ttsbegin;

                    WHSWorkTable workTableToDelete;
                    delete_from workTableToDelete
                        where workTableToDelete.RecId == workTable.RecId;

                    ttscommit;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineFixedLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the location is a fixed location for the item/product variant.
    /// </summary>
    /// <param name="_itemId">
    /// The itemId of the item.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> containing the location and product dimensions. InventDimID can be blank.
    /// </param>
    /// <param name="_templateLine">
    /// The Replenishment template line.
    /// </param>
    /// <returns>
    /// true, if the location is a fixed location for the item/product variant; otherwise, false.
    /// </returns>
    private boolean determineFixedLocation(
        ItemId                          _itemId,
        InventDim                       _inventDim,
        WHSReplenishmentTemplateLine    _templateLine)
    {
        if (_templateLine.ProductQueryMode == WHSProductQueryMode::Item)
        {
            return WHSInventFixedLocation::exist(_itemId, _inventDim.InventLocationId, _inventDim.InventSiteId, _inventDim.wmsLocationId);
        }
        else if (_templateLine.ProductQueryMode == WHSProductQueryMode::Variant)
        {
            InventDim  productDims;
            productDims.initFromInventDim(_inventDim, InventDim::dimProductDimensionEnabledFieldList());
            productDims = InventDim::findOrCreate(productDims);

            return WHSProductVariantFixedLocation::exist(_itemId, productDims.inventDimId, _inventDim.InventLocationId, _inventDim.wMSLocationId);
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>evaluateReplenishment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates if replenishment is needed for the item in a location.
    /// </summary>
    /// <param name="_inventTable">
    /// The item to be replenished.
    /// </param>
    /// <param name="_wmsLocation">
    /// The location to be replenished.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> containing location and product dimensions. InventDimID can be blank.
    /// </param>
    /// <param name="_templateLine">
    /// The Replenishment template line being run.
    /// </param>
    /// <param name="_isFixedLoc">
    /// A value to determine if the location is a fixed location for the item; optional.
    /// </param>
    /// <returns>
    /// true if replenishment work is needed; otherwise, false.
    /// </returns>
    protected boolean evaluateReplenishment(
        InventTable                     _inventTable,
        WMSLocation                     _wmsLocation,
        InventDim                       _inventDim,
        WHSReplenishmentTemplateLine    _templateLine,
        UnknownNoYes                    _isFixedLoc = UnknownNoYes::Unknown)
    {
        ItemId      itemId;
        InventQty   qty;
        InventQty   minQtyConverted;
        InventQty   replenQty;
        InventDim   inventDimSiteAndProductDim;
        boolean     isFixedLoc;
        boolean     replenishmentWorkNeeded;

        itemId = _inventTable.ItemId;
        inventDimSiteAndProductDim.InventSiteId = _inventDim.InventSiteId;
        inventDimSiteAndProductDim.initFromInventDim(_inventDim, inventDim::dimProductDimFieldList());
        inventDimSiteAndProductDim = InventDim::findOrCreate(inventDimSiteAndProductDim);

        if (this.isItemStoppedForInventTransactions(itemId, inventDimSiteAndProductDim.inventDimId))
        {
            return false;
        }    

        // Get physical inventory of the item in the location.
        InventHandlingQty physQty = WHSInventOnHand::getWorkPhysicalInventHandlingQtyByInventDim(itemId, _inventDim);

        switch (_isFixedLoc)
        {
            case UnknownNoYes::Unknown:
                // We only need to know if the location is fixed when there is no physical qty and we evaluate empty fixed locations.
                if (!physQty && _templateLine.EvalEmptyFixed)
                {
                    isFixedLoc = this.determineFixedLocation(itemId, _inventDim, _templateLine);
                }
                else
                {
                    isFixedLoc = false;
                }
                break;
            case UnknownNoYes::Yes:
                isFixedLoc = true;
                break;
            case UnknownNoYes::No:
                isFixedLoc = false;
                break;
        }

        if (this.canCreateWork(_inventTable, _wmsLocation, _inventDim, _templateLine, isFixedLoc, physQty))
        {
            InventDim inventDim = InventDim::findOrCreate(_inventDim);

            qty = physQty + this.getWorkQtyGoingToLocation(itemId, inventDim);

            if (this.canConvertToEvalUOM(_templateLine, itemId, inventDim.inventDimId))
            {
                minQtyConverted = WHSCatchWeightHelper::convertInventQuantity(itemId,
                                                                         _templateLine.QtyUOM, 
                                                                         _templateLine.MinQty, 
                                                                         inventDim.inventDimId);

                if (qty <= minQtyConverted)
                {
                    replenQty = this.calculateReplenishQty(_templateLine, itemId, qty, inventDim.inventDimId);

                    if (replenQty
                    &&  this.validateMixingRules(itemId, inventDim))
                    {
                        replenishmentWorkNeeded = true;
                        // Clean up errored waves so any orphaned WHSTmpWorklines records are deleted prior to replenishment allocation.
                        WHSWaveProcessingDataCleanup::identifyAndCleanupErroredWavesForWarehouse(inventDim.InventLocationId);

                        using (var workCreate = new WHSWorkCreateReplenishment(_templateLine, workBuildId))
                        {
                            // Specify the location for Replenishment, along with the qty and item to be replenished.
                            workCreate.parmReplenQty(replenQty);
                            workCreate.parmReplenItemId(itemId);
                            workCreate.parmReplenInventDim(inventDim);
                            workCreate.parmLocDirHintCode(_templateLine.LocDirHintCode);

                            workCreate.parmAllowMixedBatches(_wmsLocation.whsLocationProfile().AllowMixedBatches);
                            
                            workCreate.createTempTable();
                            workBuildId = workCreate.parmWorkCreateId();
                        }
                    }
                }
            }
        }

        return replenishmentWorkNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isItemStoppedForInventTransactions</Name>
				<Source><![CDATA[
    private ItemStopped isItemStoppedForInventTransactions(ItemId _itemId, InventDimId _inventDimId)
    {
        if (itemInventDimIsStoppedMap.exists([_itemId, _inventDimId]))
        {
            return itemInventDimIsStoppedMap.lookup([_itemId, _inventDimId]);
        }

        ItemStopped isStopped = InventItemOrderSetupMap::find(_itemId, InventItemOrderSetupType::Invent, _inventDimId).stopped();

        itemInventDimIsStoppedMap.add([_itemId, _inventDimId], isStopped);

        return isStopped;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canCreateWork</Name>
				<Source><![CDATA[
    protected boolean canCreateWork(
        InventTable                     _inventTable,
        WMSLocation                     _wmsLocation,
        InventDim                       _inventDim,
        WHSReplenishmentTemplateLine    _templateLine,
        UnknownNoYes                    _isFixedLoc,
        Qty                             _physQty)
    {
        return (_physQty || (_templateLine.EvalEmptyFixed && _isFixedLoc));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkQtyGoingToLocation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total quantity of work for an item that is being put down to that the replenishment location.
    /// </summary>
    /// <param name="_itemId">
    /// The item to be replenished.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> containing location and product dimensions.
    /// </param>
    /// <returns>
    /// The total invent qty of work for the item that will be put down to the replenishment location.
    /// </returns>
    protected InventQty getWorkQtyGoingToLocation(
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        WHSWorkLine  workLineLastPut;
        WHSWorkLine  workLinePick;
        WHSWorkLine  workLinePutMiddle;        
        WHSWorkTable workTable;

        if (_inventDim.anyProductDimensionSpecified())
        {
            InventDimParm inventDimParm;
            InventDim inventDimTemp;
            inventDimParm.initProductDimensionsAllGroups();

            select sum(InventQtyWork) from workLinePick
                where  workLinePick.WorkStatus != WHSWorkStatus::Cancelled
                    && workLinePick.WorkType   == WHSWorkType::Pick
                    && workLinePick.ItemId     == _itemId
                #InventDimJoin(workLinePick.InventDimId, inventDimTemp, _inventDim, inventDimParm)
                join TableId from workTable
                    where  workTable.WorkId           == workLinePick.WorkId
                        && workTable.InventLocationId == _inventDim.InventLocationId
                join TableId from workLineLastPut
                    where  workLineLastPut.WorkStatus     <= WHSWorkStatus::InProcess
                        && workLineLastPut.WorkType       == WHSWorkType::Put
                        && workLineLastPut.wmsLocationId  == _inventDim.wmsLocationId
                        && workLineLastPut.WorkId         == workLinePick.WorkId
                notexists join workLinePutMiddle
                    where workLinePutMiddle.WorkType     == WHSWorkType::Put
                        && (workLinePutMiddle.LineNum    <  workLinePick.LineNum
                            || workLinePutMiddle.LineNum >  workLineLastPut.LineNum)
                        && workLinePutMiddle.WorkId      == workLinePick.WorkId;
        }
        else
        {
            select sum(InventQtyWork) from workLinePick
                where workLinePick.WorkStatus != WHSWorkStatus::Cancelled
                    && workLinePick.WorkType  == WHSWorkType::Pick
                    && workLinePick.ItemId    == _itemId
                join TableId from workTable
                    where workTable.WorkId            == workLinePick.WorkId
                        && workTable.InventLocationId == _inventDim.InventLocationId
                join TableId from workLineLastPut
                    where  workLineLastPut.WorkStatus     <= WHSWorkStatus::InProcess
                        && workLineLastPut.WorkType       == WHSWorkType::Put
                        && workLineLastPut.wmsLocationId  == _inventDim.wmsLocationId
                        && workLineLastPut.WorkId         == workLinePick.WorkId
                notexists join workLinePutMiddle
                    where workLinePutMiddle.WorkType      == WHSWorkType::Put
                        && (workLinePutMiddle.LineNum     <  workLinePick.LineNum
                            || workLinePutMiddle.LineNum  >  workLineLastPut.LineNum)
                        && workLinePutMiddle.WorkId       == workLinePick.WorkId;
        }

        return workLinePick.InventQtyWork;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    public void initParmDefault()
    {
        super();

        Query q = new Query();
        q.addDataSource(tableNum(WHSReplenishmentTemplate));
        queryRun = new QueryRun(q);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchServer(this))
        {
            this.progressInit("@WAX1905", SysQuery::countTotal(queryRun), #AviUpdate, 2);
        
            using (var activityContext = this.instrumentationLogger().replenishmentActivities().runReplenishmentForTemplate())
            {
                while (queryRun.next())
                {
                    WHSReplenishmentTemplate templateTable = queryRun.get(tableNum(WHSReplenishmentTemplate));
                    
                    this.instrumentationLogger().logRecordInformation(templateTable);
                    this.instrumentationLogger().replenishmentActivities().logReplenishmentForTemplateType(templateTable.ReplenishmentType);

                    if (this.validateRunTemplateTable(templateTable))
                    {
                        this.runTemplateTable(templateTable);
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateRunTemplateTable</Name>
				<Source><![CDATA[
    protected boolean validateRunTemplateTable(WHSReplenishmentTemplate _templateTable)
    {
        if (_templateTable.ReplenishmentType == WHSReplenishmentType::WaveDemand)
        {
            return checkFailed(strFmt("@WAX:WHSReplenishmentInvalidTemplateWarning", strLwr(_templateTable.ReplenishTemplateId), strLwr(enum2Value(WHSReplenishmentType::WaveDemand))));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTemplateTable</Name>
				<Source><![CDATA[
    protected void runTemplateTable(WHSReplenishmentTemplate _templateTable)
    {
        #OCCRetryCount

        WHSReplenishmentTemplateLine templateLine;

        while select templateLine
            order by templateLine.SeqNum
            where templateLine.ReplenishTemplateId == _templateTable.ReplenishTemplateId
        {
            try
            {
                this.runReplenishment(templateLine);
            }
            catch (Exception::Deadlock)
            {
                retry;
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    throw;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    throw;
                }
            }
            catch
            {
                warning (strFmt("@WAX:ReplenishmentProcessingError", templateLine.ReplenishTemplateId, templateLine.SeqNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReplenishment</Name>
				<Source><![CDATA[
	private void runReplenishment(WHSReplenishmentTemplateLine _templateLine)
    {  
        this.runReplenQueries(_templateLine);

        switch (_templateLine.ReplenishmentThresholdScope)
        {
            case WHSReplenishmentThresholdScope::WMSLocation:
                this.showLocationReplenishmentWorkResults(workBuildId, _templateLine);
                break;
		
			case WHSReplenishmentThresholdScope::Zone:
				this.showWorkCreationInfoForZoneReplenishment();
                break;
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFixedLocQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs a single query to replenish items for fixed locations.
    /// </summary>
    /// <param name="_templateLine">
    ///    Replenishment template line
    /// </param>
    public void runFixedLocQuery(WHSReplenishmentTemplateLine _templateLine)
    {
        QueryRun                fixedLocQuery;
        WMSLocation             wmsLocation;
        InventTable             inventTable;
        InventDimCombination    inventDimCombination;
        boolean                 replenishLocation;
        boolean                 explictTransactionHandling = appl.ttsLevel() == 0;

        if (_templateLine.ProductQueryMode == WHSProductQueryMode::Item)
        {
            fixedLocQuery = new QueryRun(_templateLine.ItemQuery);
        }
        else if (_templateLine.ProductQueryMode == WHSProductQueryMode::Variant)
        {
            fixedLocQuery = new QueryRun(_templateLine.ProductVariantQuery);
        }

        int numberOfLocationsExamined;
        int numberOfItemsExamined;

        while (fixedLocQuery.next())
        {
            numberOfItemsExamined++;

            if (explictTransactionHandling &&
                appl.ttsLevel() == 0)
            {
                ttsbegin;
            }

            if (fixedLocQuery.changed(tableNum(wmsLocation)))
            {
                // Reset the value when we are evaluating a new location.
                replenishLocation = false;
                numberOfLocationsExamined++;
            }

            InventDim inventDim;
            if (_templateLine.ProductQueryMode == WHSProductQueryMode::Item)
            {
                inventTable = fixedLocQuery.get(tableNum(InventTable));
            }
            else if (_templateLine.ProductQueryMode == WHSProductQueryMode::Variant)
            {
                inventDimCombination = fixedLocQuery.get(tableNum(InventDimCombination));
                inventTable = inventDimCombination.inventTable();
                inventDim.initFromInventDim(InventDim::find(inventDimCombination.inventDimId), InventDim::dimProductDimFieldList());
            }

            wmsLocation = fixedLocQuery.get(tableNum(WMSLocation));

            inventDim.InventSiteId      = wmsLocation.inventSiteId();
            inventDim.InventLocationId  = wmsLocation.InventLocationId;
            inventDim.wmsLocationId     = wmsLocation.wmsLocationId;

            // Must run evaluateReplenishment method even if replenishLocation is already true;
            replenishLocation = this.evaluateReplenishment(inventTable, wmsLocation, inventDim, _templateLine, UnknownNoYes::Yes) || replenishLocation;

            if (replenishLocation)
            {
                using (var workCreate = new WHSWorkCreateReplenishment(_templateLine, workBuildId))
                {
                    workCreate.parmWorkTemplateCode(_templateLine.WorkTemplateCode);
                    workCreate.processTempTable();
                    this.cleanUpWork(workBuildId);
                    workCreate.cleanupTempTable();

                    workCreate.blockReplenishmentOverflowWorkExceedingCapacity();
                }
            }

            if (explictTransactionHandling &&
                numberOfItemsExamined mod CommitSize == 0)
            {
                ttscommit;
            }
        }

        if (explictTransactionHandling &&
            appl.ttsLevel() > 0)
        {
            ttscommit;
        }

        if (numberOfItemsExamined > WHSTelemetryThreshold::minMaxReplenishmentNumOfItemThreshold)
        {            
            ApplicationEventSource::EventWriteWhsMinMaxReplenishTemplateValidation(
                methodStr(WHSReplenishment, runFixedLocQuery),
                _templateLine.ReplenishTemplateId,
                numberOfLocationsExamined,
                WHSTelemetryThreshold::minMaxReplenishmentNumOfItemThreshold,
                numberOfItemsExamined);

            Map parameters = new Map(Types::String, Types::String);
            parameters.insert('method', methodStr(WHSReplenishment, runFixedLocQuery));
            parameters.insert('replenishmentTemplateId', _templateLine.ReplenishTemplateId);
            parameters.insert('numberOfLocationsExamined', int2Str(numberOfLocationsExamined));
            parameters.insert('minMaxReplenishmentNumOfItemThreshold', int2Str(WHSTelemetryThreshold::minMaxReplenishmentNumOfItemThreshold));
            parameters.insert('numberOfItemsExamined', int2Str(numberOfItemsExamined));

            WHSInstrumentationLogger::createLogger('WriteWhsMinMaxReplenishTemplateValidation').logAttributeValueInformation(parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReplenQueries</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the query strategy that should be used for replenishment and runs it.
    /// </summary>
    /// <param name="_templateLine">
    ///    Replenishment template line
    /// </param>
    public void runReplenQueries(WHSReplenishmentTemplateLine _templateLine)
    {
        using (var activityContext = this.instrumentationLogger().replenishmentActivities().lineReplenishment(_templateLine.ReplenishmentThresholdScope))
        {
            this.instrumentationLogger().logRecordInformation(_templateLine);

            switch (_templateLine.ReplenishmentThresholdScope)
            {
                case WHSReplenishmentThresholdScope::WMSLocation:
                    this.runLocationReplenishmentQueries(_templateLine);
                    break;
  
                case WHSReplenishmentThresholdScope::Zone:
                    this.runZoneReplenishmentQueriesForWarehouseOrGroup(_templateLine);
                    break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runZoneReplenishmentQueriesForWarehouseOrGroup</Name>
				<Source><![CDATA[
    private void runZoneReplenishmentQueriesForWarehouseOrGroup(WHSReplenishmentTemplateLine _templateLine)
    {
        switch (_templateLine.WarehouseGroupAll)
        {
            case WhsWarehouseGroupAll::Warehouse:
                this.runZoneReplenishmentQueries(_templateLine , _templateLine.InventLocationId);
                break;
            case WhsWarehouseGroupAll::Group:
                this.runZoneReplenishmentQueriesForWarehouseGroup(_templateLine);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runZoneReplenishmentQueriesForWarehouseGroup</Name>
				<Source><![CDATA[
    private void runZoneReplenishmentQueriesForWarehouseGroup(WHSReplenishmentTemplateLine _templateLine)
    {
        if (_templateLine.WarehouseGroupId)
        {
            WhsWarehouseGroupLink warehouseGroupLink;

            while select InventLocationId from warehouseGroupLink
                where warehouseGroupLink.WarehouseGroupId == _templateLine.WarehouseGroupId
            {
                this.runZoneReplenishmentQueries(_templateLine, warehouseGroupLink.InventLocationId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildItemAndDimensionsSet</Name>
				<Source><![CDATA[
    protected Set buildItemAndDimensionsSet(WHSReplenishmentTemplateLine _templateLine)
    {
        Set itemAndDimensionsSet = new Set(Types::Container);

        if (_templateLine.ProductQueryMode == WHSProductQueryMode::Item)
        {
            var itemQuery = new QueryRun(_templateLine.ItemQuery);

            while (itemQuery.next())
            {
                InventTable inventTable = itemQuery.get(tableNum(InventTable));

                if (inventTable)
                {
                    itemAndDimensionsSet.add([inventTable.ItemId, '']);
                }
            }
        }
        else if (_templateLine.ProductQueryMode == WHSProductQueryMode::Variant)
        {
            var productVariantQuery = new QueryRun(_templateLine.ProductVariantQuery);

            while (productVariantQuery.next())
            {
                InventDimCombination inventDimCombination = productVariantQuery.get(tableNum(InventDimCombination));

                if (inventDimCombination)
                {
                    itemAndDimensionsSet.add([InventDimCombination.ItemId, inventDimCombination.InventDimId]);
                }
            }
        }

        return itemAndDimensionsSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runSeparateItemLocQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Runs a separate location and item query to determine if the combination needs to be replenished.
    /// </summary>
    /// <param name="_templateLine">
    ///    Replenishment template line
    /// </param>
    void runSeparateItemLocQuery(WHSReplenishmentTemplateLine _templateLine)
    {
        Set     itemAndDimensionsSet        = this.buildItemAndDimensionsSet(_templateLine);
        boolean explictTransactionHandling  = appl.ttsLevel() == 0;

        var locQuery =  new QueryRun(_templateLine.LocationQuery);
        int numberOfLocationsExamined;

        while (locQuery.next())
        {
            if (explictTransactionHandling &&
                appl.ttsLevel() == 0)
            {
                ttsbegin;
            }

            numberOfLocationsExamined++;
            WMSLocation wmsLocation = locQuery.get(tableNum(WMSLocation));
            InventSiteId inventSiteId = wmsLocation.inventSiteId();

            boolean replenishLocation = false;

            SetEnumerator itemAndDimensionsSetEnumerator = itemAndDimensionsSet.getEnumerator();
            while (itemAndDimensionsSetEnumerator.moveNext())
            {
                container itemAndDimensions = itemAndDimensionsSetEnumerator.current();
                ItemId itemId = conPeek(itemAndDimensions, 1);
                InventTable inventTable = inventTable::find(itemId);
                InventDimId inventDimId = conPeek(itemAndDimensions, 2);

                inventDim inventDim;
                inventDim.InventSiteId      = inventSiteId;
                inventDim.InventLocationId  = wmsLocation.InventLocationId;
                inventDim.wmsLocationId     = wmsLocation.wmsLocationId;

                if (inventDimId)
                {
                    inventDim.initFromInventDim(InventDim::find(inventDimId), inventDim::dimProductDimFieldList());
                }

                // Must run evaluateReplenishment method even if replenishLocation is already true;
                replenishLocation = this.evaluateReplenishment(inventTable, wmsLocation, inventDim, _templateLine) || replenishLocation;
            }

            if (replenishLocation)
            {
                using (var workCreate = new WHSWorkCreateReplenishment(_templateLine, workBuildId))
                {
                    workCreate.parmWorkTemplateCode(_templateLine.WorkTemplateCode);
                    workCreate.processTempTable();
                    this.cleanUpWork(workBuildId);
                    workCreate.cleanupTempTable();

                    workCreate.blockReplenishmentOverflowWorkExceedingCapacity();
                }
            }

            if (explictTransactionHandling &&
                numberOfLocationsExamined mod CommitSize == 0)
            {
                ttscommit;
            }
        }

        if (explictTransactionHandling &&
            appl.ttsLevel() > 0)
        {
            ttscommit;
        }

        if (numberOfLocationsExamined * itemAndDimensionsSet.elements() > WHSTelemetryThreshold::minMaxReplenishmentNumOfItemThreshold)
        {
            ApplicationEventSource::EventWriteWhsMinMaxReplenishTemplateValidation(
                methodStr(WHSReplenishment, runSeparateItemLocQuery),
                _templateLine.ReplenishTemplateId,
                numberOfLocationsExamined,
                WHSTelemetryThreshold::minMaxReplenishmentNumOfItemThreshold,
                numberOfLocationsExamined * itemAndDimensionsSet.elements());

            Map parameters = new Map(Types::String, Types::String);
            parameters.insert('method', methodStr(WHSReplenishment, runSeparateItemLocQuery));
            parameters.insert('replenishmentTemplateId', _templateLine.ReplenishTemplateId);
            parameters.insert('numberOfLocationsExamined', int2Str(numberOfLocationsExamined));
            parameters.insert('minMaxReplenishmentNumOfItemThreshold', int2Str(WHSTelemetryThreshold::minMaxReplenishmentNumOfItemThreshold));
            parameters.insert('numberOfItemsExamined', int2Str(numberOfLocationsExamined * itemAndDimensionsSet.elements()));

            WHSInstrumentationLogger::createLogger('WriteWhsMinMaxReplenishTemplateValidation').logAttributeValueInformation(parameters);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQuerySelectButton</Name>
				<Source><![CDATA[
    /// <summary>
	/// Determines whether to show query select button.
	/// </summary>
	/// <returns>
	/// true if to show query select button.
	/// </returns>
    boolean showQuerySelectButton()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showLocationReplenishmentWorkResults</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an info log message summarizing the results for location replenishment work creation.
    /// </summary>
    /// <param name="_workBuildId">
    /// The work Build Id that the work headers are related to.
    /// </param>
    /// <param name="_templateLine">
    /// The replenishment template line that generate the work.
    /// </param>
    private void showLocationReplenishmentWorkResults(
        WHSWorkBuildId                  _workBuildId,
        WHSReplenishmentTemplateLine    _templateLine)
    {
        int numOfWorkHeaders = WHSWorkTable::countWorkHeaders(_workBuildId);
        if (numOfWorkHeaders > 0)
        {
            info(strFmt("@WAX:ReplenishmentWorkHeadersCreated",
                        _templateLine.ReplenishTemplateId,
                        _templateLine.SeqNum,
                        numOfWorkHeaders,
                        _workBuildId));
        }
        else
        {
            info(strFmt("@WAX:ReplenishmentWorkHeadersNotCreated",
                        _templateLine.ReplenishTemplateId,
                        _templateLine.SeqNum));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        boolean     ret = true;
        container   packedQuery;

        switch (version)
        {
            case #CurrentVersion:
                [version, packedQuery] = packedClass;
                if (!packedQuery)
                {
                    ret = false;
                }
                else
                {
                    queryRun = new QueryRun(packedQuery);
                }
                break;

            default:
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateMixingRules</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates if location mixing rules allow for the item to be replenished.
    /// </summary>
    /// <param name="_itemId">
    /// The item to be replenished.
    /// </param>
    /// <param name="_inventDim">
    /// An <c>InventDim</c> containing location and product dimensions.
    /// It can get updated with additional dimensions required by mixing rules.
    /// </param>
    /// <returns>
    /// true, if location mixing rules are not broken by the replenishment; otherwise, false.
    /// </returns>
    private boolean validateMixingRules(
        ItemId      _itemId,
        InventDim   _inventDim)
    {
        var locationMixingValidator = WHSLocationMixingConstraintValidator::newFromReceiptItemDim(_itemId, _inventDim);
        locationMixingValidator.parmCheckTmpWorkLine(true);
        locationMixingValidator.parmCanChangeBlankDimensions(true);

        boolean valid = locationMixingValidator.isReplenishmentValid();
        if (valid)
        {
            InventDim updatedDimensions;
            updatedDimensions.data(_inventDim);
            locationMixingValidator.applyChangedDimensions(updatedDimensions);
            updatedDimensions = InventDim::findOrCreate(updatedDimensions);

            _inventDim.data(updatedDimensions);
        }

        return valid;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static ClassDescription description()
    {
        return "@WAX1905";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        var replenishment = new WHSReplenishment();

        using (SysErrorMessageHelpScope scope = SysErrorMessageHelpScope::newErrorContextBatchController(replenishment))
        {
            if (replenishment.prompt())
            {
                replenishment.runOperation();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineAndCreateZoneReplenishment</Name>
				<Source><![CDATA[
    private void determineAndCreateZoneReplenishment(
        InventTable                     _inventTable,
        InventDim                       _inventDim,
        WHSReplenishmentTemplateLine    _templateLine,
        WHSZoneId                       _zoneId)
    {
        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_inventDim);
    
        InventSum inventSum;
        InventDim inventDimJoin;
        WMSLocation wmsLocation;

        // Get physical inventory of the item in the zone.
        if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
        {
            select sum(PhysicalInvent), sum(PdsCWPhysicalInvent) from inventSum
                where inventSum.ItemId == _inventTable.ItemId &&
                #InventDimFieldsFilter(inventSum, _inventDim, inventDimParm)
                exists join wmsLocation
                    where wmsLocation.wMSLocationId == inventSum.wMSLocationId
                        && wmsLocation.inventLocationId  == inventSum.InventLocationId
                        && (wmsLocation.ZoneId == _zoneId
                            || wmsLocation.AdditionalZone1 == _zoneId
                            || wmsLocation.AdditionalZone2 == _zoneId
                            || wmsLocation.AdditionalZone3 == _zoneId);
        }
        else
        {
            select sum(PhysicalInvent), sum(PdsCWPhysicalInvent) from inventSum
                where inventSum.ItemId == _inventTable.ItemId
                #InventDimExistsJoin(inventSum.inventDimId, inventDimJoin, _inventDim, inventDimParm)
			    exists join wmsLocation
                    where wmsLocation.wMSLocationId == inventDimJoin.wMSLocationId
                        && wmsLocation.inventLocationId  == inventDimJoin.InventLocationId
                        && (wmsLocation.ZoneId == _zoneId
                            || wmsLocation.AdditionalZone1 == _zoneId
                            || wmsLocation.AdditionalZone2 == _zoneId
                            || wmsLocation.AdditionalZone3 == _zoneId);
        }
    
        InventHandlingQty qty = PdsGlobal::pdsIsCWItem(_inventTable.ItemId) ? InventSum.PdsCWPhysicalInvent : inventSum.PhysicalInvent;
        
        WHSWorkLine     workLine;
        WHSWorkTable    workTable;

        // Sum up quantity of work that is going to the replen zone.
        select sum(InventQtyRemain) from workLine
            exists join workTable
				where (workLine.WorkStatus == WHSWorkStatus::Open
						|| workLine.WorkStatus == WHSWorkStatus::InProcess)
					&& workLine.WorkType == WHSWorkType::Put 
					&& workLine.ItemId == _inventTable.ItemId 
					&& workLine.WorkId == workTable.WorkId
                exists join wmsLocation
                where wmsLocation.wMSLocationId == workLine.WMSLocationId
                    && wmsLocation.inventLocationId == workTable.InventLocationId
                    && (wmsLocation.ZoneId == _zoneId
						|| wmsLocation.AdditionalZone1 == _zoneId
						|| wmsLocation.AdditionalZone2 == _zoneId
						|| wmsLocation.AdditionalZone3 == _zoneId)
                #InventDimExistsJoin(workLine.InventDimId, inventDimJoin, _inventDim, inventDimParm);
    
        qty += workLine.InventQtyRemain;
    
        if (this.canReplenishBetweenReplenUnitAndHandlingUnit(_inventTable.ItemId, _templateLine.QtyUOM, _templateLine.SeqNum, _inventDim.inventDimId))
        {
            this.createZoneReplenishmentPutTmpWorkLine(_inventTable.ItemId, qty, _templateLine, _inventDim);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canReplenishBetweenReplenUnitAndHandlingUnit</Name>
				<Source><![CDATA[
	private boolean canReplenishBetweenReplenUnitAndHandlingUnit(
		ItemId					_itemId,
		UnitOfMeasureSymbol		_toUOMSymbol,
        WHSSeqNum				_seqNum,
		InventDimId				_inventDimId)
    {  
        boolean ret = true;
        EcoResReleasedProductUnitConverter unitConverter = EcoResReleasedProductUnitConverter::construct();
        InventHandlingUnitId handlingUnitId = WHSCatchWeightHelper::inventHandlingUnitId(_itemId);

        // Do not try to convert until we know we want to try and replenish this item.
        if (handlingUnitId != _toUOMSymbol
            && !unitConverter.canBeConvertedGivenUnitSymbols(handlingUnitId, _toUOMSymbol, _itemId, _inventDimId))
        {
            warning(strfmt("@WAX2624", _itemId, _seqNum, handlingUnitId, _toUOMSymbol));
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createZoneReplenishmentPutTmpWorkLine</Name>
				<Source><![CDATA[
	private void createZoneReplenishmentPutTmpWorkLine(
		ItemId							_itemId,
        InventHandlingQty				_qtyInZone,
        WHSReplenishmentTemplateLine	_templateLine,
		InventDim						_inventDim)
    {  
        InventHandlingQty convertedQty = WHSCatchWeightHelper::convertInventQuantity(_itemId,
                                                                                _templateLine.QtyUOM,
                                                                                _templateLine.MinQty,
                                                                                _inventDim.inventDimId);

		// Compare to min convertQty
        if (_qtyInZone <= convertedQty)
        {
            InventHandlingQty replenQty = this.calculateReplenishQty(_templateLine, _itemId, _qtyInZone, _inventDim.inventDimId);
    
            if (replenQty)
            {
                WHSWorkCreateZoneReplenishment workCreate = new WHSWorkCreateZoneReplenishment(_templateLine, workBuildId);
                workBuildId = workCreate.parmWorkCreateId();
                this.zoneWorkBuildIds().add(workBuildId);
                workCreate.parmReplenishmentTemplateLine(_templateLine);
                workCreate.parmLocDirHintCode(_templateLine.LocDirHintCode);
                workCreate.parmReplenUOM(_templateLine.ReplenishmentUOM);
                workCreate.parmReplenQty(replenQty);
                workCreate.parmReplenItemId(_itemId);
                workCreate.parmReplenInventDim(_inventDim);

                // Create the put first
                // In the future if we can get createRemainingWorkLine to create Multiple puts we should call normal work create
                // Currently we must call createTempTablePut to create puts first in order to respect stocking limits.
                // We don't support batch rules since we don't know what batch we will be picking.
                workCreate.createTempTablePut();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>findInventDimAtWarehouseLevel</Name>
				<Source><![CDATA[
	private InventDim findInventDimAtWarehouseLevel(InventLocationId _inventLocationId)
    {  
        InventDim inventDim;
        inventDim.InventSiteId      = InventLocation::find(_inventLocationId).InventSiteId;
        inventDim.InventLocationId  = _inventLocationId;
        inventDim = InventDim::findOrCreate(inventDim);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runLocationReplenishmentQueries</Name>
				<Source><![CDATA[
    private void runLocationReplenishmentQueries(WHSReplenishmentTemplateLine _templateLine)
    {
        workBuildId = '';
        
        if (_templateLine.ReplenFixedOnly)
        {
            this.runFixedLocQuery(_templateLine);
        }
        else
        {
            this.runSeparateItemLocQuery(_templateLine);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runZoneReplenishmentQueries</Name>
				<Source><![CDATA[
    private void runZoneReplenishmentQueries(WHSReplenishmentTemplateLine _templateLine, InventLocationId _warehouseId) 
    {
        using (var activityContext = this.instrumentationLogger().replenishmentActivities().zoneReplenishment())
        {
            this.instrumentationLogger().logRecordInformation(InventLocation::find(_warehouseId));
            
            ttsBegin;
    
            QueryRun zoneQuery =  new QueryRun(_templateLine.ZoneQuery);
    
            while (zoneQuery.next())
            {
                WHSZone zone = zoneQuery.get(tableNum(WHSZone));

                using (var context = WHSSkipInventStatusCheckReplenPutContext::newFromParameter(true))
                {
                    this.runItemZoneReplenishment(_templateLine, _warehouseId, zone);
                }

            }
    
            WHSTmpWorkLine replenPutTmpWorkLine;
    
            // If we have any put replenishment lines then create work
            select firstOnly RecId, RefRecId from replenPutTmpWorkLine
                    where replenPutTmpWorkLine.WorkCreateId == workBuildId
                        && replenPutTmpWorkLine.WorkType == WHSWorkType::Put
                        && replenPutTmpWorkLine.WorkTransType == WHSWorkTransType::Replenishment;
    
            if (replenPutTmpWorkLine.RecId)
            {
                this.createZoneReplenishmentWorkHeaders(replenPutTmpWorkLine.RefRecId);
            }
    
            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runItemZoneReplenishment</Name>
				<Source><![CDATA[
    private void runItemZoneReplenishment(WHSReplenishmentTemplateLine _templateLine, InventLocationId _warehouseId, WHSZone _zone)
    {
        using (var activityContext = this.instrumentationLogger().replenishmentActivities().itemZoneReplenishment())
        {
            this.instrumentationLogger().logRecordInformation(_zone);

            InventDim inventDim = this.findInventDimAtWarehouseLevel(_warehouseId);
    
            QueryRun itemQuery = new QueryRun(_templateLine.ItemQuery);

            boolean mustCheckOnHandOutsideZoneToReplenishFrom = WHSLocDirFailure::find(WHSWorkTransType::Replenishment).LocDirFailWork == NoYes::Yes;
                
            while (itemQuery.next())
            {
                InventTable inventTable = itemQuery.get(tableNum(InventTable));
                currentItemProductDimsEvaluated = new Set(Types::String);
                
                if (!inventTable.hasProductDimensions())
                {
                    InventDim productInventDim;
                    productInventDim.clear();

                    InventDim inventDimForZoneReplenishment = this.inventDimForZoneReplenishment(_warehouseId, inventTable, productInventDim);

                    if (!mustCheckOnHandOutsideZoneToReplenishFrom ||
                        this.hasOnHandOutsideZoneToReplenishFrom(inventTable, inventDimForZoneReplenishment, _zone.ZoneId))
                    {
                        this.determineAndCreateZoneReplenishment(inventTable, inventDimForZoneReplenishment, _templateLine, _zone.ZoneId);
                    }
                }
                else
                {
                    InventSum       inventSum;
                    InventDim       inventDimJoin;
                    InventDimParm   inventDimParm = InventDimParm::siteAndWarehouse();
                    WMSLocation     wmsLocation;
                    
                    if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
                    {
                        while select InventDimId from inventSum
                            where #InventDimFieldsFilter(inventSum, inventDim, inventDimParm)
                            && inventSum.PhysicalInvent > 0
                            && inventSum.ItemId == inventTable.ItemId
                            exists join wmsLocation
                                where wmslocation.wMSLocationId == inventSum.wMSLocationId
                                    && wmsLocation.inventLocationId == inventSum.InventLocationId
                                    && (wmsLocation.ZoneId == _zone.ZoneId
                                        || wmsLocation.AdditionalZone1 == _zone.ZoneId
                                        || wmsLocation.AdditionalZone2 == _zone.ZoneId
                                        || wmsLocation.AdditionalZone3 == _zone.ZoneId)
                        {
                            this.runItemZoneReplenishmentUptake(inventSum, inventTable, _templateLine, _warehouseId, _zone, mustCheckOnHandOutsideZoneToReplenishFrom);
                        }
                    }
                    else
                    {
                        while select InventDimId from inventSum
                            #InventDimExistsJoin(inventSum.InventDimId, inventDimJoin, inventDim, inventDimParm)
                        && inventSum.PhysicalInvent > 0
                            && inventSum.ItemId == inventTable.ItemId
                            exists join wmsLocation
                                where wmslocation.wMSLocationId == inventDimJoin.wMSLocationId
                                    && wmsLocation.inventLocationId == inventDimJoin.InventLocationId
                                    && (wmsLocation.ZoneId == _zone.ZoneId
                                        || wmsLocation.AdditionalZone1 == _zone.ZoneId
                                        || wmsLocation.AdditionalZone2 == _zone.ZoneId
                                        || wmsLocation.AdditionalZone3 == _zone.ZoneId)
                        {
                            this.runItemZoneReplenishmentUptake(inventSum, inventTable, _templateLine, _warehouseId, _zone, mustCheckOnHandOutsideZoneToReplenishFrom);
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>hasOnHandOutsideZoneToReplenishFrom</Name>
				<Source><![CDATA[
    private boolean hasOnHandOutsideZoneToReplenishFrom(InventTable _inventTable, InventDim _inventDim, WHSZoneId _zoneId)
    {
        boolean ret = true;

        InventDimParm inventDimParm;
        inventDimParm.initFromInventDim(_inventDim);

        InventSum       inventSum;
        InventDim       inventDimJoin;
        WMSLocation     wmsLocation;

        if (PdsGlobal::pdsIsCWItem(_inventTable.ItemId))
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select firstonly RecId from inventSum
                    where inventSum.ItemId == _inventTable.ItemId
                       && inventSum.PdsCWPhysicalInvent > 0
                       && inventSum.ClosedQty == NoYes::No
                       && #InventDimFieldsFilter(inventSum, _inventDim, inventDimParm)
                exists join wmsLocation
                    where wmslocation.wMSLocationId == inventSum.wMSLocationId
                       && wmsLocation.inventLocationId == inventSum.InventLocationId
                       && wmsLocation.ZoneId != _zoneId
                       && wmsLocation.AdditionalZone1 != _zoneId
                       && wmsLocation.AdditionalZone2 != _zoneId
                       && wmsLocation.AdditionalZone3 != _zoneId;
            }
            else
            {
                select firstonly RecId from inventSum
                    where inventSum.ItemId == _inventTable.ItemId
                       && inventSum.PdsCWPhysicalInvent > 0
                       && inventSum.ClosedQty == NoYes::No
                #InventDimExistsJoin(inventSum.InventDimId, inventDimJoin, _inventDim, inventDimParm)
                exists join wmsLocation
                    where wmslocation.wMSLocationId == inventDimJoin.wMSLocationId
                       && wmsLocation.inventLocationId == inventDimJoin.InventLocationId
                       && wmsLocation.ZoneId != _zoneId
                       && wmsLocation.AdditionalZone1 != _zoneId
                       && wmsLocation.AdditionalZone2 != _zoneId
                       && wmsLocation.AdditionalZone3 != _zoneId;
            }
        }
        else
        {
            if (InventUseDimOfInventSumToggle::instance().isEnabled())
            {
                select firstonly RecId from inventSum
                        where inventSum.ItemId == _inventTable.ItemId
                           && inventSum.PhysicalInvent > 0
                           && inventSum.ClosedQty == NoYes::No 
                           && #InventDimFieldsFilter(inventSum, _inventDim, inventDimParm)
                    exists join wmsLocation
                        where wmslocation.wMSLocationId == inventSum.wMSLocationId
                           && wmsLocation.inventLocationId == inventSum.InventLocationId
                           && wmsLocation.ZoneId != _zoneId
                           && wmsLocation.AdditionalZone1 != _zoneId
                           && wmsLocation.AdditionalZone2 != _zoneId
                           && wmsLocation.AdditionalZone3 != _zoneId;
            }
            else
            {
                select firstonly RecId from inventSum
                    where inventSum.ItemId == _inventTable.ItemId
                       && inventSum.PhysicalInvent > 0
                       && inventSum.ClosedQty == NoYes::No
                #InventDimExistsJoin(inventSum.InventDimId, inventDimJoin, _inventDim, inventDimParm)
                exists join wmsLocation
                    where wmslocation.wMSLocationId == inventDimJoin.wMSLocationId
                       && wmsLocation.inventLocationId == inventDimJoin.InventLocationId
                       && wmsLocation.ZoneId != _zoneId
                       && wmsLocation.AdditionalZone1 != _zoneId
                       && wmsLocation.AdditionalZone2 != _zoneId
                       && wmsLocation.AdditionalZone3 != _zoneId;
            }
        }

        if (inventSum.RecId == 0)
        {
            warning(strFmt("@WAX:WHSZoneReplenishmentNoOnHandError", _inventTable.ItemId));

            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimForZoneReplenishment</Name>
				<Source><![CDATA[
    private InventDim inventDimForZoneReplenishment(InventLocationId _inventLocationId, InventTable _inventTable, InventDim _productInventDim)
    {
        InventDim inventDim = this.findInventDimAtWarehouseLevel(_inventLocationId);
    
        if (_productInventDim)
        {
            InventDimParm inventDimparmProductDims;
            inventDimParmProductDims.initFromInventDim(_productInventDim);
            inventDim.copyDimParmDim(InventDimGroupSetup::newInventTable(_inventTable), _productInventDim, inventDimParmProductDims);
        }

        inventDim = InventDim::findOrCreate(inventDim);

        return inventDim;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runItemZoneReplenishmentUptake</Name>
				<Source><![CDATA[
    private void runItemZoneReplenishmentUptake(InventSum _inventSum, InventTable _inventTable, WHSReplenishmentTemplateLine _templateLine, InventLocationId _warehouseId, WHSZone _zone, boolean _mustCheckOnHandOutsideZoneToReplenishFrom)
    {
        InventDim productInventDim = _inventSum.inventDim();
        productInventDim.clearNotProductDim(InventDimGroupSetup::newItemIdProductDimensionsOnly(_inventTable.ItemId));
        productInventDim = InventDim::findOrCreate(productInventDim);

        InventDim inventDimForZoneReplenishment = this.inventDimForZoneReplenishment(_warehouseId, _inventTable, productInventDim);

        if (!currentItemProductDimsEvaluated.in(productInventDim.inventDimId) &&
            (!_mustCheckOnHandOutsideZoneToReplenishFrom ||
            this.hasOnHandOutsideZoneToReplenishFrom(_inventTable, inventDimForZoneReplenishment, _zone.ZoneId)))
        {
            currentItemProductDimsEvaluated.add(productInventDim.inventDimId);

            this.determineAndCreateZoneReplenishment(_inventTable, inventDimForZoneReplenishment, _templateLine, _zone.ZoneId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createZoneReplenishmentWorkHeaders</Name>
				<Source><![CDATA[
	private void createZoneReplenishmentWorkHeaders(RefRecId _replenPutTmpWorkLineRefRecId)
    {		
		// Create instance of work create class
        WHSWorkCreateZoneReplenishment workCreate = new WHSWorkCreateZoneReplenishment(WHSReplenishmentTemplateLine::findByRecId(_replenPutTmpWorkLineRefRecId), workBuildId);
		
        WHSTmpWorkLine replenPutTmpWorkLine;

		// Combine replenishment Put TmpWorkLines that are for the same location and inventDimId
		select sum(InventQty), ItemId, WMSLocationId, InventDimId from replenPutTmpWorkLine
			group by replenPutTmpWorkLine.ItemId, replenPutTmpWorkLine.WMSLocationId, replenPutTmpWorkLine.InventDimId
			where replenPutTmpWorkLine.WorkCreateId == workBuildId
				&& replenPutTmpWorkLine.WorkType == WHSWorkType::Put
				&& replenPutTmpWorkLine.WorkTransType == WHSWorkTransType::Replenishment;
    
		// Delete unneeded replenishment tmpWorkLines that are puts
        this.deleteTmpWorkLinesForWorkBuildId();
    
		// Now we know item, demand Qty, and put location: Create replen pick work lines (createTempTable)
		while (replenPutTmpWorkLine.ItemId)
		{
			InventDim replenDim;
			replenDim = InventDim::find(replenPutTmpWorkLine.inventDimId);
			replenDim.wMSLocationId = replenPutTmpWorkLine.WMSLocationId;
			replenDim = InventDim::findOrCreate(replenDim);
    
			workCreate.parmReplenQty(replenPutTmpWorkLine.InventQty);
			workCreate.parmReplenItemId(replenPutTmpWorkLine.ItemId);
			workCreate.parmReplenInventDim(InventDim::find(replenDim.inventDimId));
    
			// Create tmp table (pick replenishment lines)
			workCreate.createTempTable();
    
			// Process tmpTable for replenishment
			if (workCreate != null)
			{
				workCreate.processTempTable();
				workCreate.cleanupTempTable();

                workCreate.blockReplenishmentOverflowWorkExceedingCapacity();
			}
    
			next replenPutTmpWorkLine;
		}
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTmpWorkLinesForWorkBuildId</Name>
				<Source><![CDATA[
	private void deleteTmpWorkLinesForWorkBuildId()
    {
        WHSTmpWorkLine deleteReplenTmpWorkLine;
        delete_from deleteReplenTmpWorkLine
            where deleteReplenTmpWorkLine.WorkCreateId == workBuildId
                && deleteReplenTmpWorkLine.WorkType == WHSWorkType::Put
                && deleteReplenTmpWorkLine.WorkTransType == WHSWorkTransType::Replenishment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showWorkCreationInfoForZoneReplenishment</Name>
				<Source><![CDATA[
    private void showWorkCreationInfoForZoneReplenishment()
    {
        SetEnumerator   workBuildEnumerator = this.zoneWorkBuildIds().getEnumerator();
        WHSWorkBuildId  prevBuildId;
    
        while (workBuildEnumerator.moveNext())
        {
            WHSWorkBuildId locWorkBuildId = workBuildEnumerator.current();
    
            int numOfWorkHeaders = WHSWorkTable::countWorkHeaders(locWorkBuildId);
    
            if (locWorkBuildId != prevBuildId)
            {
                if (numOfWorkHeaders > 0)
                {
                    info(strFmt("@WAX2010", numOfWorkHeaders, locWorkBuildId));
                }
                else
                {
                    info("@WAX2013");
                }
            }
    
            prevBuildId = locWorkBuildId;
        }
    
        if (!this.zoneWorkBuildIds().elements())
        {
            info("@WAX2013");
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
			<Method>
				<Name>zoneWorkBuildIds</Name>
				<Source><![CDATA[
    private Set zoneWorkBuildIds()
    {
        if (!zoneWorkBuildIds)
        {
            zoneWorkBuildIds = new Set(Types::String);
        }

        return zoneWorkBuildIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeFormName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the form name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The form name used for the error context.</returns>
    [Hookable(false)]
    public FormName errorMessageHelpScopeFormName()
    {
        return strFmt('%1_%2', formStr(Dialog), classStr(WhsReplenishment));
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessageHelpScopeActionName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the action name used for the error context using a <c>SysErrorMessageHelpScope</c> class.
    /// </summary>
    /// <returns>The action name used for the error context.</returns>
    [Hookable(false)]
    public str errorMessageHelpScopeActionName()
    {
        return menuItemActionStr(WHSReplenishment);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object _calledFrom = null)
    {
        boolean ret = super(_calledFrom);

        if (ret 
            && !this.validateQuery())
        {
            ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateQuery</Name>
				<Source><![CDATA[
    private boolean validateQuery()
    {
        Query query = new Query(queryRun.query());

        QueryBuildRange replenishTemplateIdRange = SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(WHSReplenishmentTemplate)), fieldNum(WHSReplenishmentTemplate, ReplenishTemplateId));

        if (!replenishTemplateIdRange.value())
        {
            error(strFmt("@WAX:WHSReplenishmentNoRange", strLwr(fieldPName(WHSReplenishmentTemplate, ReplenishTemplateId))));
            return false;
        }

        SysQuery::findOrCreateRange(query.dataSourceTable(tableNum(WHSReplenishmentTemplate)), fieldNum(WHSReplenishmentTemplate, ReplenishmentType)).value(SysQuery::value(WHSReplenishmentType::WaveDemand));

        QueryRun qr = new QueryRun(query);
        if (qr.next())
        {
            error(strFmt("@WAX:WHSReplenishmentInvalidRange", strLwr(fieldPName(WHSReplenishmentTemplate, ReplenishTemplateId)), strLwr(enum2Str(WHSReplenishmentType::WaveDemand))));

            return false;
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>