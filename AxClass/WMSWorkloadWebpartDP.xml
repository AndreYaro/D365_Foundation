<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WmsWorkloadWebpartDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WMSWorkloadWebpartDP</c> class is the report rata provider class for the <c>WMSWorkloadWebpart</c> report.
/// </summary>
[SRSReportParameterAttribute(classStr(WMSWorkloadReportDataContract))]
class WmsWorkloadWebpartDP extends SRSReportDataProviderBase
{
    WMSWorkloadWebpartTMP   wmsWorkloadWebpartTMP;

    #define.Combined('Full')
    #define.Inbound('Left')
    #define.Outbound('Right')
    #define.Green('green')
    #define.Red('red')
    #define.Unknown('orange')
    #define.NoBacklog('empty')
    #define.Backlog('icon')
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateImageName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the name of the image to be displayed on the report.
    /// </summary>
    /// <param name="_inventDirection">
    /// The quantity direction for inventory transaction.
    /// </param>
    /// <param name="_color">
    /// The color value.
    /// </param>
    /// <param name="_backlog">
    /// A value that indicates whether to show the backlog indicator on the icon.
    /// </param>
    /// <returns>
    /// The name of the image to be displayed on the report.
    /// </returns>
    protected str generateImageName(InventDirection _inventDirection,
                                    str             _color,
                                    boolean         _backlog)
    {
        str iconName;

        str direction;
        str backlog;

        switch (_inventDirection)
        {
            case InventDirection::Receipt :
                direction = #Inbound;
                break;
            case InventDirection::Issue   :
                direction = #Outbound;
                break;
            case InventDirection::None    :
                direction = #Combined;
                break;
        }

        backlog = _backlog ? #Backlog : #NoBacklog;

        iconName = strFmt("%1_%2_%3", direction, _color, backlog);
        return iconName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWMSWorkloadWebpartTMP</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from the <c>WMSWorkloadWebpartTMP</c> table.
    /// </summary>
    /// <returns>
    /// The data from the <c>WMSWorkloadWebpartTMP</c> table.
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(WMSWorkloadWebpartTMP))
    ]
    public WMSWorkloadWebpartTMP getWMSWorkloadWebpartTMP()
    {
        select wmsWorkloadWebpartTMP;
        return wmsWorkloadWebpartTMP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic by obtaining records from the <c>WMSWorkloadForecast</c> table
    /// as required for the report into the <c>WMSWorkloadWebpartTMP</c> table.
    /// </summary>
    public void processReport()
    {
        WMSWorkloadReportDataContract   wmsWorkloadReportDataContract;
        WMSWorkLoadForecast             wmsWorkLoadForecast;
        WMSWorkLoadForecast             wmsWorkLoadForecastTmp;
        WMSWorkloadCapacityWarehouse    wmsWorkloadCapacityWarehouse;

        int                             currentValueField;
        int                             maxValueFieldInbound;
        int                             maxValueFieldOutbound;

        real                            maxValue;

        str                             color;
        str                             imageName;

        date                            todayDate;
        Map                             inboundMax = new Map(Types::String, Types::Real);
        Map                             outboundMax = new Map(Types::String, Types::Real);
        InventDirection                 combinedDirection = InventDirection::None;
        WMSSpaceUtilInconsistencyType   inconsistencyType;

        wmsWorkloadReportDataContract = this.parmDataContract() as WMSWorkloadReportDataContract;

        todayDate = WMSReportSetup::getCompanyTodayDate();

        switch (wmsWorkloadReportDataContract.parmStorageLoadUnitType())
        {
            case WMSStorageLoadUnitType::Pallet:
                currentValueField     = fieldNum(WMSWorkLoadForecast, CurrentPalletCount);
                maxValueFieldInbound  = fieldNum(WMSWorkloadCapacityWarehouse, MaxPalletCountInbound);
                maxValueFieldOutbound = fieldNum(WMSWorkloadCapacityWarehouse, MaxPalletCountOutbound);
                inconsistencyType     = WMSSpaceUtilInconsistencyType::Pallet;
                break;
            case WMSStorageLoadUnitType::Volume:
                currentValueField     = fieldNum(WMSWorkLoadForecast, CurrentVolume);
                maxValueFieldInbound  = fieldNum(WMSWorkloadCapacityWarehouse, MaxVolumeInbound);
                maxValueFieldOutbound = fieldNum(WMSWorkloadCapacityWarehouse, MaxVolumeOutbound);
                inconsistencyType     = WMSSpaceUtilInconsistencyType::Volume;
                break;
            case WMSStorageLoadUnitType::Weight:
                currentValueField     = fieldNum(WMSWorkLoadForecast, CurrentWeight);
                maxValueFieldInbound  = fieldNum(WMSWorkloadCapacityWarehouse, MaxWeightInbound);
                maxValueFieldOutbound = fieldNum(WMSWorkloadCapacityWarehouse, MaxWeightOutbound);
                inconsistencyType     = WMSSpaceUtilInconsistencyType::Weight;
                break;
        }

        wmsWorkLoadForecastTmp.setTmp();

        //insert warehouses for which inbound and outbaund are separated
        insert_recordset wmsWorkLoadForecastTmp (CurrentPalletCount, CurrentVolume, CurrentWeight, HasBacklog, Direction, InventLocationId, TrackingDate)
        select sum(CurrentPalletCount), sum(CurrentVolume), sum(CurrentWeight), maxof(HasBacklog), Direction, InventLocationID, TrackingDate
        from wmsWorkLoadForecast
        group by InventLocationID, TrackingDate, Direction
        where wmsWorkLoadForecast.wmsReportSetup == wmsWorkloadReportDataContract.parmReportSetupRecId()
                && (wmsWorkloadReportDataContract.parmReqTransMovementStatus() == WMSReqTransMovementStatus::All
                    || wmsWorkLoadForecast.MovementStatus == wmsWorkloadReportDataContract.parmReqTransMovementStatus())
                && wmsWorkLoadForecast.TrackingDate >= todayDate
                exists join wmsWorkloadCapacityWarehouse
                where wmsWorkloadCapacityWarehouse.wmsReportSetup == wmsWorkLoadForecast.wmsReportSetup
                   && wmsWorkloadCapacityWarehouse.InventLocation == wmsWorkLoadForecast.InventLocationID
                && wmsWorkloadCapacityWarehouse.AddInboundOutbound == NoYes::No;

        //insert warehouses for which inbound and outbaund are combineded
        insert_recordset wmsWorkLoadForecastTmp (CurrentPalletCount, CurrentVolume, CurrentWeight, HasBacklog, Direction, InventLocationId, TrackingDate)
        select sum(CurrentPalletCount), sum(CurrentVolume), sum(CurrentWeight), maxof(HasBacklog), combinedDirection, InventLocationID, TrackingDate
        from wmsWorkLoadForecast
        group by InventLocationID, TrackingDate
        where wmsWorkLoadForecast.wmsReportSetup == wmsWorkloadReportDataContract.parmReportSetupRecId()
                && (wmsWorkloadReportDataContract.parmReqTransMovementStatus() == WMSReqTransMovementStatus::All
                    || wmsWorkLoadForecast.MovementStatus == wmsWorkloadReportDataContract.parmReqTransMovementStatus())
                && wmsWorkLoadForecast.TrackingDate >= todayDate
                exists join wmsWorkloadCapacityWarehouse
                where wmsWorkloadCapacityWarehouse.wmsReportSetup == wmsWorkLoadForecast.wmsReportSetup
                   && wmsWorkloadCapacityWarehouse.InventLocation == wmsWorkLoadForecast.InventLocationID
                && wmsWorkloadCapacityWarehouse.AddInboundOutbound == NoYes::Yes;

        while select wmsWorkloadCapacityWarehouse
              where wmsWorkloadCapacityWarehouse.wmsReportSetup == wmsWorkloadReportDataContract.parmReportSetupRecId()
        {
            inboundMax.insert(wmsWorkloadCapacityWarehouse.InventLocation, wmsWorkloadCapacityWarehouse.(maxValueFieldInbound));
            outboundMax.insert(wmsWorkloadCapacityWarehouse.InventLocation, wmsWorkloadCapacityWarehouse.(maxValueFieldOutbound));
        }

        while select maxof(CurrentPalletCount), maxof(CurrentVolume), maxof(CurrentWeight), maxof(HasBacklog)
              from wmsWorkLoadForecastTmp
              group by InventLocationID, Direction
        {
            //check whether it is new location
            if (wmsWorkLoadForecastTmp.InventLocationID != wmsWorkloadWebpartTMP.InventLocationID)
            {
                //insert the last record if any
                if (wmsWorkloadWebpartTMP.InventLocationID)
                {
                    wmsWorkloadWebpartTMP.insert();
                }

                wmsWorkloadWebpartTMP.clear();
                wmsWorkloadWebpartTMP.InventLocationID    = wmsWorkLoadForecastTmp.InventLocationID;
            }

            if (wmsWorkLoadForecastTmp.Direction == InventDirection::Receipt)
            {
                maxValue = inboundMax.lookup(wmsWorkLoadForecastTmp.InventLocationID);
            }
            else if (wmsWorkLoadForecastTmp.Direction == InventDirection::Issue)
            {
                maxValue = outboundMax.lookup(wmsWorkLoadForecastTmp.InventLocationID);
            }
            else
            {
                maxValue = inboundMax.lookup(wmsWorkLoadForecastTmp.InventLocationID) + outboundMax.lookup(wmsWorkLoadForecastTmp.InventLocationID);
            }

            if (maxValue == 0)
            {
                color = #Unknown;
            }
            else if (maxValue < wmsWorkLoadForecastTmp.(currentValueField))
            {
                color = #Red;
            }
            else
            {
                color = #Green;
            }

            imageName = this.generateImageName(wmsWorkLoadForecastTmp.Direction, color, wmsWorkLoadForecastTmp.HasBacklog);

            if (wmsWorkLoadForecastTmp.Direction == InventDirection::Issue)
            {
                wmsWorkloadWebpartTMP.OutboundImageName = imageName;
            }
            else
            {
                wmsWorkloadWebpartTMP.InboundImageName = imageName;
            }
        }

        //insert the last record if any
        if (wmsWorkloadWebpartTMP.InventLocationID)
        {
            wmsWorkloadWebpartTMP.InconsistencyExists = WMSSpaceUtilInconsistencies::exist(wmsWorkloadReportDataContract.parmReportSetupRecId(), inconsistencyType);
            wmsWorkloadWebpartTMP.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
