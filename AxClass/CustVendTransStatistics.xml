<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustVendTransStatistics</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustVendTransStatistics
{
    ModuleCustVend module;
    NoYes calc;
    InvoiceId fromInvoiceId;
    InvoiceId toInvoiceId;
    TradeInventTransId fromInventTransId;
    TradeInventTransId toInventTransId;
    ItemId fromItemId;
    ItemId toItemId;
    TransDate fromDate;
    TransDate toDate;

    AmountMST lineAmountMST;
    Qty qty;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accumulateTrans</Name>
				<Source><![CDATA[
    protected void accumulateTrans(CustVendInvoiceTrans custInvoiceTrans)
    {
        lineAmountMST += CurrencyExchangeHelper::amountCur2MST(custInvoiceTrans.LineAmount, custInvoiceTrans.CurrencyCode, custInvoiceTrans.exchRate());
        qty += custInvoiceTrans.Qty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calc</Name>
				<Source><![CDATA[
    void calc()
    {
        CustVendInvoiceTrans custVendInvoiceTrans = this.defaultInvoiceTrans();

        if ((!fromInventTransId && !toInventTransId) &&
            (!fromInvoiceId && !toInvoiceId)
           )
        {
            if (fromItemId == toItemId)
            {
                while select custVendInvoiceTrans
                where custVendInvoiceTrans.ItemId == fromItemId &&
                      custVendInvoiceTrans.InvoiceDate >= fromDate &&
                      custVendInvoiceTrans.InvoiceDate <= toDate
                {
                    this.accumulateTrans(custVendInvoiceTrans);
                }
            }
            else
            {
                while select custVendInvoiceTrans
                where custVendInvoiceTrans.ItemId >= fromItemId &&
                      (!toItemId || custVendInvoiceTrans.ItemId <= toItemId) &&
                      custVendInvoiceTrans.InvoiceDate >= fromDate &&
                      custVendInvoiceTrans.InvoiceDate <= toDate
                {
                    this.accumulateTrans(custVendInvoiceTrans);
                }
            }
        }
        else
        {
            if (fromItemId == toItemId)
            {
                while select custVendInvoiceTrans
                where custVendInvoiceTrans.InvoiceNum >= fromInvoiceId &&
                      (!toInvoiceId || custVendInvoiceTrans.InvoiceNum <= toInvoiceId) &&
                      custVendInvoiceTrans.InventTransId >= fromInventTransId &&
                      (!toInventTransId || custVendInvoiceTrans.InventTransId <= toInventTransId) &&
                      custVendInvoiceTrans.ItemId == fromItemId &&
                      custVendInvoiceTrans.InvoiceDate >= fromDate &&
                      custVendInvoiceTrans.InvoiceDate <= toDate
                {
                    this.accumulateTrans(custVendInvoiceTrans);
                }
            }
            else
            {
                while select custVendInvoiceTrans
                where custVendInvoiceTrans.InvoiceNum >= fromInvoiceId &&
                      (!toInvoiceId || custVendInvoiceTrans.InvoiceNum <= toInvoiceId) &&
                      custVendInvoiceTrans.InventTransId >= fromInventTransId &&
                      (!toInventTransId || custVendInvoiceTrans.InventTransId <= toInventTransId) &&
                      custVendInvoiceTrans.ItemId >= fromItemId &&
                      (!toItemId || custVendInvoiceTrans.ItemId <= toItemId) &&
                      custVendInvoiceTrans.InvoiceDate >= fromDate &&
                      custVendInvoiceTrans.InvoiceDate <= toDate
                {
                    this.accumulateTrans(custVendInvoiceTrans);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultInvoiceTrans</Name>
				<Source><![CDATA[
    CustVendInvoiceTrans defaultInvoiceTrans()
    {
        throw error(Error::missingOverload(funcname()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineAmountMST</Name>
				<Source><![CDATA[
    AmountMST lineAmountMST()
    {
        return lineAmountMST;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(boolean _calc = false,
             ItemId _fromItemId = '',
             TradeInventTransId _fromInventTransId = '',
             InvoiceId _fromInvoiceId = '',
             TransDate _fromDate = dateNull(),
             ItemId _toItemId = _fromItemId,
             TradeInventTransId _toInventTransId = _fromInventTransId,
             InvoiceId _toInvoiceId = _fromInvoiceId,
             TransDate _toDate = _fromDate
             )
    {
        calc = _calc;
        fromInvoiceId = _fromInvoiceId;
        fromInventTransId = _fromInventTransId;
        fromItemId = _fromItemId;
        fromDate = _fromDate;
        toInventTransId = _toInventTransId;
        toInvoiceId = _toInvoiceId;
        toItemId = _toItemId;
        toDate = _toDate ? _toDate : dateMax();

        if (calc)
        {
            this.calc();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>qty</Name>
				<Source><![CDATA[
    Qty qty()
    {
        return qty;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
