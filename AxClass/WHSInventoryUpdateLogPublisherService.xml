<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventoryUpdateLogPublisherService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Warehouse inventory update log publisher service.
/// </summary>
public final class WHSInventoryUpdateLogPublisherService
{

    private WhsInstrumentationLogger instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Publish updates to the warehouse inventory log.
    /// </summary>
    private void run()
    {
        #OCCRetryCount
        int infologLine = infologLine();

        try
        {
            ttsbegin;
            using (var activityContext = this.instrumentationLogger().inventoryUpdateLogPublisherActivities().publishLoggedInventoryTransactions())
            {
                guid updateReferenceId = WHSSequentialGuidGenerator::generateSequentialGuid();
                SysDictTable dictInventoryUpdateLog = new SysDictTable(tableNum(WHSInventoryUpdateLog));
                str updateReferenceIdField = dictInventoryUpdateLog.fieldName(fieldnum(WHSInventoryUpdateLog, UpdateReferenceId), DbBackend::Sql);
                str partitionField = dictInventoryUpdateLog.fieldName(fieldnum(WHSInventoryUpdateLog, Partition), DbBackend::Sql);
                SysSqlSystem sqlSystem = new SysSqlSystem();

                str sqlStmt = @'UPDATE ' + dictInventoryUpdateLog.name(DbBackend::Sql) +
                    ' SET ' + updateReferenceIdField + '=' + sqlSystem.sqlLiteral(updateReferenceId) +
                    ' WHERE ' + partitionField + '=' + sqlSystem.sqlLiteral(getcurrentpartitionrecid()) +
                    ' AND ' + updateReferenceIdField + '=' + sqlSystem.sqlLiteral(emptyGuid());

                new SqlStatementExecutePermission(sqlStmt).assert();
                Statement statement = new Connection().createStatement();
                int updatedRows = statement.executeUpdateWithParameters(sqlStmt, null);

                WHSInventoryUpdateLog inventoryUpdateLog;

                while select crosscompany inventoryUpdateLog
                    group by DataAreaId
                    where inventoryUpdateLog.UpdateReferenceId == updateReferenceId
                {
                    changecompany(inventoryUpdateLog.DataAreaId)
                    {
                        this.onPublishInventoryUpdateLog(updateReferenceId);
                    }
                }

                this.instrumentationLogger().inventoryUpdateLogPublisherActivities().logPublishMetadata(
                    activityContext,
                    updatedRows);
            }
            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>onPublishInventoryUpdateLog</Name>
				<Source><![CDATA[
    public void onPublishInventoryUpdateLog(WHSInventoryUpdateLogUpdateReferenceId _updateReferenceId)
    {
        WHSInventoryUpdateLogBusinessEvent::newFromParameters(_updateReferenceId).send();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runTask</Name>
				<Source><![CDATA[
    internal void runTask(ProcessScheduleWorkItem _processScheduleWorkItem)
    {
        ProcessExecutionSourceStatus processExecutionSourceStatus = ProcessExecutionSourceStatus::Success;
        int startLine = infologLine();

        try 
        {
            new WHSInventoryUpdateLogPublisherService().run();
        }

        // Some batch maintenance required by process automation to ensure we persist a record for the batch task execution.
        catch
        {
            // Don't throw, just record that we failed.
            processExecutionSourceStatus = ProcessExecutionSourceStatus::Error;
        }
        finally 
        {
            ProcessExecutionSourceLink processExecutionSourceLink = ProcessExecutionSourceLink::writeSourceLinkItem(this.createExecutionSourceLinkItem(_processScheduleWorkItem, processExecutionSourceStatus));

            if (processExecutionSourceStatus == ProcessExecutionSourceStatus::Error)
            {
                Integer currentLine = infologLine();

                container infoLogData = infolog.copy(startLine + 1, currentLine);

                SysInfologEnumerator infoLogEnumerator = SysInfologEnumerator::newData(infoLogData);
                while (infoLogEnumerator.moveNext())
                {
                    ProcessExecutionMessageLogItem messageLogItem = ProcessExecutionMessageLogItem::newFromProcessExecutionSourceLinkAndMessage(processExecutionSourceLink.RecId, infoLogEnumerator.currentException(), infoLogEnumerator.currentMessage());
                    ProcessExecutionMessageLog::insertMessage(messageLogItem);
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createExecutionSourceLinkItem</Name>
				<Source><![CDATA[
    private ProcessExecutionSourceLinkItem createExecutionSourceLinkItem(ProcessScheduleWorkItem _contract, ProcessExecutionSourceStatus _processExecutionSourceStatus)
    {
        ProcessExecutionSourceLinkItem linkItem = ProcessExecutionSourceLinkItem::construct();

        linkItem.parmExecutionId(_contract.parmExecutionId());
        linkItem.parmExecutionSourceStatus(_processExecutionSourceStatus);
        linkItem.parmHeader("@WAX:WHSInventoryUpdateLogPublisherDescription");
        if (_processExecutionSourceStatus == ProcessExecutionSourceStatus::Error)
        {
            linkItem.parmMessage("@WAX:WHSInventoryUpdateLogPublisherServiceError");
        }
        else
        {
            linkItem.parmMessage("@WAX:WHSInventoryUpdateLogPublisherServiceSuccess");
        }
        linkItem.parmProcessScheduleSeriesPatternRecId(_contract.parmProcessScheduleSeriesPatternRecId());
        linkItem.parmProcessScheduleOccurrenceRecId(_contract.parmProcessScheduleOccurrenceRecId());
        linkItem.parmSourceRecId(0);
        linkItem.parmSourceTableId(0);

        return linkItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>instrumentationLogger</Name>
				<Source><![CDATA[
    private final WHSInstrumentationLogger instrumentationLogger()
    {
        if (!instrumentationLogger)
        {
            instrumentationLogger = WHSInstrumentationLogger::createLogger(classId2Name(classIdGet(this)));
        }

        return instrumentationLogger;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>