<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InterCompanySyncSalesLineType</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Synchronization engine at order line level for intercompany trade.
/// </summary>
public class InterCompanySyncSalesLineType
{
    SalesLineType                       salesLineType;
    SalesLine                           salesLine;
    InventDim                           salesLineInventDim;
    SalesTable                          salesTable;
    CustTable                           custTable;

    InterCompanyTradingValueMap         fromInterCompanyTradingValueMap;
    InterCompanyTradingValueMap         toInterCompanyTradingValueMap;
    InterCompanyEndpointActionPolicy    toEndpointActionPolicy;

    AxPurchLine                         axPurchLine;
    PurchTable                          purchTable;
    PurchLine                           purchLineLocal;
    VendTable                           vendTable;

    private boolean                     forceSync;

    boolean                             create;

    private ItemId                      axItemId;
    private InventDim                   axInventDim;

    protected TradeInterCompanyConv     convItem;
    private TradeInterCompanyConv       convReturnDispositionCode;
    private TradeInterCompanyConv       convInventProfile;

    private InventRefTransId            interCompanyInventTransIdPurch;
    private PurchInstrumentationLogger  instrumentationLogger;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        instrumentationLogger = PurchInstrumentationLogger::createLogger(classStr(InterCompanySyncSalesLineType));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a new instance of <c>InterCompanySyncSalesLineType</c> class.
    /// </summary>
    /// <returns>The constructed instance.</returns>
    public static InterCompanySyncSalesLineType construct()
    {
        return new InterCompanySyncSalesLineType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>interCompanyInventTransIdPurch</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the related intercompany purchase inventory transaction Id
    /// </summary>
    /// <returns>
    /// The related intercompany purchase inventory transaction Id
    /// </returns>
    protected InventRefTransId interCompanyInventTransIdPurch()
    {
        return interCompanyInventTransIdPurch;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromSalesLineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal state of the synchronization engine from the <c>SalesLineType</c> instance.
    /// </summary>
    /// <param name = "_salesLineType">An instance of <c>SalesLineType</c> class.</param>
    protected void initFromSalesLineType(SalesLineType _salesLineType)
    {
        salesLineType = _salesLineType;
        salesLine = salesLineType.parmSalesLine();
        salesLineInventDim = SalesLine.inventDim();
        salesTable = salesLineType.parmSalesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromSalesLineType</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate a new intercompany synchronization engine for the provided <c>SalesLineType</c> instance.
    /// </summary>
    /// <param name = "_salesLineType">An instance of <c>SalesLineType</c> class representing the sales order line.</param>
    /// <returns>The instantiated instance.</returns>
    public static InterCompanySyncSalesLineType newFromSalesLineType(SalesLineType _salesLineType)
    {
        InterCompanySyncSalesLineType syncEngine = InterCompanySyncSalesLineType::construct();
        syncEngine.initFromSalesLineType(_salesLineType);

        return syncEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if synchronization should run regardless of the order line state.
    /// </summary>
    /// <param name = "_forceSync">Force synchronization?</param>
    /// <returns>true, if synchronization should be run regardless of the order line state; otherwise, false.</returns>
    public boolean forceSync(boolean _forceSync = forceSync)
    {
        forceSync = _forceSync;
        return forceSync;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipSynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if intercompany synchronization should be skipped.
    /// </summary>
    /// <returns>true, if synchronization should be skipped; otherwise, false.</returns>
    protected boolean skipSynchronization()
    {
        if (!forceSync)
        {
            if (salesLine.SkipUpdate == InterCompanySkipUpdate::InterCompany
                || salesLine.SkipUpdate == InterCompanySkipUpdate::Both
                || !salesTable.isInterCompanyOrder()
                || !SalesTableType::construct(salesTable).interCompanyCreateAllowed()
                || !salesLine.interCompanyUpdateNow())
            {
                return true;
            }
        }

        if (! TradeInterCompany::checkDataAreaAccess(salesTable.InterCompanyCompanyId))
        {
            return true;
        }

        if (this.isOriginalScrapReplacement())
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOriginalScrapReplacement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the original order line is a return with scrap (and replacement) selected as the return action.
    /// </summary>
    /// <returns>true if the original order line is a return with scrap; otherwise, false.</returns>
    protected boolean isOriginalScrapReplacement()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronize</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the actions necessary to synchronize the sales order line with the intercompany purchase order line.
    /// </summary>
    public void synchronize()
    {
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.purchOrderLineCreationActivities().interCompanySynchronize(salesTable, salesLine))
        {
            boolean skipSynchronization = this.skipSynchronization();

            activityContext
                .addCustomProperty('SkipSynchronization', int2Str(skipSynchronization));

            if (this.skipSynchronization())
            {
                return;
            }

            using (var activityContextPrepare = instrumentationLogger.purchOrderLineCreationActivities().prepareSynchronization())
            {
                this.prepareSynchronization();
            }

            changecompany (salesTable.InterCompanyCompanyId)
            {
                using (var activityContextTradeCompany = instrumentationLogger.purchOrderLineCreationActivities().synchronizeInTradeCompany())
                {
                    this.synchronizeInTradeCompany();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareSynchronization</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes any additional internal state necessary for synchronization.
    /// </summary>
    protected void prepareSynchronization()
    {
        custTable                       = CustTable::find(salesTable.CustAccount);
        fromInterCompanyTradingValueMap = custTable.interCompanyTradingPartner().interCompanyTradingValueMap();

        convItem = TradeInterCompanyConv::construct();
        convItem.axSalesItemId(fromInterCompanyTradingValueMap,
                               salesTable.CustAccount,
                               salesLine.ItemId,
                               salesLine.inventDim());

        if (salesLine.ReturnDispositionCodeId)
        {
            convReturnDispositionCode = TradeInterCompanyConv::construct();
            convReturnDispositionCode.axReturnDispositionCodeId(fromInterCompanyTradingValueMap, salesLine.ReturnDispositionCodeId);
        }
        
        if (salesLine.creditNoteLine())
        {
            interCompanyInventTransIdPurch = CustInvoiceTrans::findInventTransid(salesLine.InventTransIdReturn).InterCompanyInventTransId;
        }

        if (salesLine.inventDim().InventProfileId_RU)
        {
            convInventProfile = TradeInterCompanyConv::construct();
            convInventProfile.axInventProfileId(fromInterCompanyTradingValueMap, salesLine.inventDim().InventProfileId_RU);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSynchronization</Name>
				<Source><![CDATA[
    private void postSynchronization()
    {
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            PurchRequestedShipDate origPurchRequestedShipDate = axPurchLine.purchLine().RequestedShipDate;

            if (salesLine.ShippingDateRequested && salesLine.ShippingDateRequested != origPurchRequestedShipDate)
            {
                salesLine.ShippingDateRequested = origPurchRequestedShipDate;
            }
            
            PurchLineRequestedReceiptDate origPurchRequestedReceiptDate = axPurchLine.purchLine().DeliveryDate;
            if (salesLine.ReceiptDateRequested && salesLine.ReceiptDateRequested != origPurchRequestedReceiptDate)
            {
                salesLine.ReceiptDateRequested = origPurchRequestedReceiptDate;
            }            
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>retrieveItemIdInventDim</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the item number and inventory dimension combination.
    /// </summary>
    /// <param name = "_purchTable">
    /// A <c>PurchTable</c> record buffer
    /// </param>
    /// <returns>
    /// The container with item number and inventory dimension combination.
    /// </returns>
    protected container retrieveItemIdInventDim(PurchTable _purchTable)
    {
        return convItem.axPurchItemId(toInterCompanyTradingValueMap, _purchTable.OrderAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>synchronizeInTradeCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the synchronization of the order line in the trade company.
    /// </summary>
    protected void synchronizeInTradeCompany()
    {
        setPrefix(strFmt("@SYS93821",TradeInterCompany::curCompanyName()));

        vendTable                       = VendTable::find(custTable.interCompanyTradingPartnerAccount());

        this.validateInterCompanyPOFromDirectDeliverySOAllowsVendorCollaboration();

        toInterCompanyTradingValueMap   = vendTable.interCompanyTradingPartner().interCompanyTradingValueMap();
        toEndpointActionPolicy          = vendTable.interCompanyTradingPartner().interCompanyEndpointActionPolicy();

        purchTable                       = PurchTable::find(salesTable.InterCompanyPurchId);
        [axItemId, axInventDim]          = this.retrieveItemIdInventDim(PurchTable);

        this.validateItemSetupInSync();

        this.createOrUpdatePurchaseOrderLine();
        
        salesLine.InterCompanyInventTransId = axPurchLine.purchLine().InventTransId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateItemSetupInSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that item is setup correctly in both trade companies.
    /// </summary>
    protected void validateItemSetupInSync()
    {
        if (! axItemId)
        {
            EcoResProduct ecoResProduct;
            changecompany (salesLine.company())
            {
                ecoResProduct = EcoResProduct::find(InventTable::find(salesLine.ItemId).Product);
            }
            throw error(strFmt("@SYS329423", ecoResProduct.productNumber(), ecoResProduct.productName(), salesTable.InterCompanyCompanyId));
        }

        if (PdsGlobal::pdsIsCWItem(axItemId))
        {
            this.validateCatchWeightProductSetupInSync();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdatePurchaseOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates or updates the intercompany order line in the trade company.
    /// </summary>
    protected void createOrUpdatePurchaseOrderLine()
    {
        using (SysInstrumentationActivityContext activityContext = instrumentationLogger.purchOrderLineCreationActivities().interCompanySync(classStr(AxPurchLine)))
        {
            axPurchLine = AxPurchLine::newPurchLine(PurchLine::findInventTransId(salesLine.InterCompanyInventTransId, true));
            axPurchLine.axPurchTable(AxPurchTable::newPurchTable(purchTable));
            
            create = axPurchLine.purchLine().RecId == 0;

            activityContext
                .addCustomProperty(tableStr(PurchLine), int642Str(axPurchLine.purchLine().RecId))
                .addCustomProperty('Create', int2Str(create));

            // Set proj related fields on new line creation
            if (create && purchTable.ProjId)
            {
                axPurchLine.parmProjId(purchTable.ProjId);
                // Need to set item id to avoid resetting of unit prices later.
                axPurchLine.parmItemId(salesLine.ItemId);
                axPurchLine.parmProjCategoryId(InventTable::find(salesLine.ItemId).projCategoryId);
                axPurchLine.parmProjSalesPrice(salesLine.SalesPrice);
            }

            this.setPurchaseOrderLineData();

            axPurchLine.validateInput(true);
            axPurchLine.save();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPurchaseOrderLineData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate the intercompany order line record with data from the sales order line.
    /// </summary>
    protected void setPurchaseOrderLineData()
    {
        #ISOCountryRegionCodes
        
        if (create)
        {
            axPurchLine.purchLine().initFromPurchTable(purchTable);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, ItemId)))
        {
            axPurchLine.parmItemId(axItemId);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, InventDimId)))
        {
            InventDimId currentProductDimensionsDimId;
            boolean productVariantItemSalesTaxGroupFeatureEnabled = EcoResProductVariantItemSalesTaxGroupFeature::isFeatureEnabled()
                && (!EcoResProductVariantItemSalesTaxGroupNoBRFlight::instance().isEnabled() || !(BrazilParameters::isEnabled() && axPurchLine.purchLine().CFOPTable_BR));
            if (productVariantItemSalesTaxGroupFeatureEnabled
                && !create)
            {
                currentProductDimensionsDimId = InventDim::findOrCreate(axPurchLine.axInventDim().productDimensions()).InventDimId;
            }

            axPurchLine.axInventDim().productDimensions(axInventDim);

            if (productVariantItemSalesTaxGroupFeatureEnabled
                && (create
                    || currentProductDimensionsDimId != InventDim::findOrCreate(axPurchLine.axInventDim().productDimensions()).InventDimId))
            {
                axPurchLine.parmTaxItemGroup(InventTable::getTaxItemGroupId(ModuleInventPurchSales::Purch, axItemId, axInventDim.InventDimId));
            }
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, RetailVariantId)))
        {
            axPurchLine.parmVariantId(InventDimCombination::find(axItemId, axInventDim.inventDimId).RetailVariantId);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, MatchingAgreementLine)))
        {
            axPurchLine.parmMatchingAgreementLine(AgreementLine::find(salesLine.MatchingAgreementLine).intercompanyAgreementLine().RecId);
        }

        this.setInventoryDimensions();

        // always set the inventDimId on the axPurchLine, so item dimensions are not overwritten by axClass defaulting
        axPurchLine.parmInventDimId(InventDim::findOrCreate(axPurchLine.axInventDim().inventDim()).InventDimId);

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, InventTransId)))
        {
            axPurchLine.parmInterCompanyInventTransId(salesLine.InventTransId);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, Complete)))
        {
            axPurchLine.parmComplete(salesLine.Complete);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, Blocked)))
        {
            axPurchLine.parmBlocked(salesLine.Blocked);
        }

        if (create
                &&  purchTable.InterCompanyOrder
                &&  purchTable.InterCompanyDirectDelivery)
        {
            axPurchLine.parmDeliveryType(TradeLineDlvType::DropShip);
        }

        if (this.mustSetCatchWeightQuantity())
        {
            this.setCatchWeightQuantity();
        }

        if (this.mustSetQuantity())
        {
            this.setQuantity();
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, SalesUnit)))
        {
            axPurchLine.parmPurchUnit(salesLine.SalesUnit);
        }
        if (create || salesLine.fieldChanged(fieldNum(SalesLine, ReturnDispositionCodeId)))
        {
            axPurchLine.parmReturnDispositionCodeId(salesLine.ReturnDispositionCodeId ? convReturnDispositionCode.axReturnDispositionCodeId(toInterCompanyTradingValueMap) : "");
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, ReturnStatus)))
        {
            axPurchLine.parmReturnStatus(salesLine.ReturnStatus);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, OverDeliveryPct)))
        {
            axPurchLine.parmOverDeliveryPct(salesLine.OverDeliveryPct);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, UnderDeliveryPct)))
        {
            axPurchLine.parmUnderDeliveryPct(salesLine.UnderDeliveryPct);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, PlanningPriority)))
        {
            axPurchLine.parmPlanningPriority(salesLine.PlanningPriority);
        }

        this.syncPricingInformation();

        if (!create || IntercompanySetPricePolicyWhenCreateFlight::instance().isEnabled())
        {
            axPurchLine.purchLine().setManualEntryChangePolicyFromSalesLine(salesLine);
        }
        
        // Delivery dates changed
        if (salesTable.InterCompanyDirectDeliveryOrig)
        {
            if (new DictConfigurationKey(configurationKeyNum(SalesDeliveryDateControl)).enabled())
            {
                axPurchLine.parmDeliveryDate         (salesLine.ReceiptDateRequested);
                axPurchLine.parmConfirmedDlv         (salesLine.ReceiptDateConfirmed);
                axPurchLine.parmShippingDateRequested(salesLine.ShippingDateRequested);
                axPurchLine.parmShippingDateConfirmed(salesLine.ShippingDateConfirmed);
            }
            else
            {
                axPurchLine.parmDeliveryDate(salesLine.ShippingDateRequested);
                axPurchLine.parmConfirmedDlv(salesLine.ShippingDateConfirmed);
            }

            if (create || salesLine.fieldChanged(fieldNum(SalesLine, OverDeliveryPct)))
            {
                axPurchLine.parmOverDeliveryPct(salesLine.OverDeliveryPct);
            }

            if (create || salesLine.fieldChanged(fieldNum(SalesLine, UnderDeliveryPct)))
            {
                axPurchLine.parmUnderDeliveryPct(salesLine.UnderDeliveryPct);
            }
        }
        else
        {
            if (new DictConfigurationKey(configurationKeyNum(SalesDeliveryDateControl)).enabled())
            {
                InterCompanyEndpointActionPolicyTransfer transferExternal = salesTable.interCompanyEndpointActionPolicy()
                    .getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External);
                boolean shouldDlvDateBeUpdatedFromSalesLine = create ||
                    !(transferExternal.DisableRequestedDatesSync && IntercompanySyncDlvDatesFeature::instance().isEnabled());
                
                axPurchLine.parmDeliveryDate(shouldDlvDateBeUpdatedFromSalesLine ? salesLine.ReceiptDateRequested : axPurchLine.parmDeliveryDate());
                axPurchLine.parmConfirmedDlv(salesLine.ReceiptDateConfirmed);
            }
            else
            {
                axPurchLine.parmDeliveryDate(salesLine.ShippingDateRequested);
                axPurchLine.parmConfirmedDlv(salesLine.ShippingDateConfirmed);
            }
        }
        
        this.syncDeliveryDates();
        
        SalesLineType::syncDeliveryAddress(salesLine, axPurchLine, salesTable.InterCompanyDirectDeliveryOrig, create);

        axPurchLine.parmSkipUpdate(InterCompanySkipUpdate::InterCompany);

        if (create)
        {
            this.setReturnActionId();
            axPurchLine.parmInterCompanyOrigin(InterCompanyOrigin::Derived);

            if (purchTable.ProjId && !purchTable.isProjectSalesItemReqPO() && purchTable.isInterCompanyOrder())
            {
                axPurchLine.parmScrap(NoYes::Yes);
            }
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, InventDimId)))
        {
            axPurchLine.parmIntercompanyOSOSourcingInventSiteId(salesLineInventDim.InventSiteId);
            axPurchLine.parmIntercompanyOSOSourcingInventLocationId(salesLineInventDim.InventLocationId);
        }
        
        if (interCompanyInventTransIdPurch && axPurchLine.purchLine().creditNoteLine())
        {
            VendInvoiceTrans vendInvoiceTrans = VendInvoiceTrans::findInventTransId(interCompanyInventTransIdPurch);
            axPurchLine.parmInventRefTransId(vendInvoiceTrans.InventTransId);
            axPurchLine.parmInventRefId(vendInvoiceTrans.OrigPurchId);
            axPurchLine.parmItemRefType(InventRefType::None);
        }

        if (create
             || salesLine.fieldChanged(fieldNum(SalesLine, IntrastatCommodity))
             || salesLine.fieldChanged(fieldNum(SalesLine, OrigCountryRegionId))
             || salesLine.fieldChanged(fieldNum(SalesLine, OrigStateId)))
        {
            this.initForeignTradeFromInventTable(InventTable::find(axPurchLine.parmItemId()));
        }

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]))
        {
            GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceIN00118, funcName());
        }

        if (TaxParameters::checkTaxParameters_IN())
        {
            SalesLine salesLine_Orig;
            VendInvoiceTrans vendInvoiceTransLocal;
            CustInvoiceTrans custInvoiceTransLocal;

            select firstonly crosscompany InventTransId from salesLine_Orig
                join RecId from custInvoiceTransLocal
                    where salesLine_Orig.SalesId == custInvoiceTransLocal.SalesId
                        && salesLine_Orig.LineNum == custInvoiceTransLocal.LineNum
                        && custInvoiceTransLocal.RecId == salesLine.RefReturnInvoiceTrans_W;

            if (salesLine_Orig.InventTransId)
            {
                select firstonly vendInvoiceTransLocal
                    join RecId from purchLineLocal
                        where vendInvoiceTransLocal.PurchID == purchLineLocal.PurchId
                            && vendInvoiceTransLocal.LineNum == purchLineLocal.LineNumber
                            && purchLineLocal.InterCompanyInventTransId == salesLine_Orig.InventTransId;
            }

            axPurchLine.axPurchLine_IN().parmTaxWithholdLineNum_IN(vendInvoiceTransLocal.LineNum);
            axPurchLine.axPurchLine_IN().parmTaxWithholdVoucher_IN(vendInvoiceTransLocal.vendInvoiceJour().LedgerVoucher);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectDateForSynchronization</Name>
				<Source><![CDATA[
    private TransDate selectDateForSynchronization(InterCompanyEndpointActionPolicyTransfer _transferExternal,
        TransDate _dateFromSalesLine, TransDate _dateFromPurchLine)
    {
        if ((!_transferExternal.DisableRequestedDatesSync && _dateFromSalesLine)
            || !_dateFromPurchLine || !IntercompanySyncDlvDatesFeature::instance().isEnabled())
        {
            return _dateFromSalesLine;
        }
        else
        {
            return _dateFromPurchLine;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncDeliveryDates</Name>
				<Source><![CDATA[
    private void syncDeliveryDates()
    {
        if (PurchParameters::find().IsSupplierShipmentDatesEnabled)
        {
            PurchLine localPurchline = axPurchLine.purchLine();
            localPurchline.SkipShipReceiptDateCalculation = true;

            InterCompanyEndpointActionPolicyTransfer transferExternal = salesTable.interCompanyEndpointActionPolicy()
                    .getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External);

            axPurchLine.parmRequestedShipDate(this.selectDateForSynchronization(transferExternal,
                salesLine.ShippingDateRequested, axPurchLine.parmRequestedShipDate()));
            axPurchLine.parmDeliveryDate(this.selectDateForSynchronization(transferExternal,
               salesLine.ReceiptDateRequested, axPurchLine.parmDeliveryDate()));

            if (salesLine.ShippingDateConfirmed)
            {
                axPurchLine.parmConfirmedShipDate(salesLine.ShippingDateConfirmed);
            }
            if (salesLine.ReceiptDateConfirmed)
            {
                axPurchLine.parmConfirmedDlv(salesLine.ReceiptDateConfirmed);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateInterCompanyPOFromDirectDeliverySOAllowsVendorCollaboration</Name>
				<Source><![CDATA[
    private void validateInterCompanyPOFromDirectDeliverySOAllowsVendorCollaboration()
    {
        if (!vendTable && InterCompanySyncSalesLineVendCollabRefPOErrorFlight::instance().isEnabled())
        {
            changecompany(salesTable.company())
            {
                PurchTable referencePurchTable = salesTable.referencePurchTable();
                if (referencePurchTable && referencePurchTable.vendTable_OrderAccount().VendVendorCollaborationType != VendVendorCollaborationType::Disabled)
                {
                    throw error(strFmt("@SCM:InterCompanySyncSalesLineVendCollabRefPOErrorLabel", custTable.AccountNum));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForeignTradeFromInventTable</Name>
				<Source><![CDATA[
    private void initForeignTradeFromInventTable(InventTable _inventTable)
    {
        axPurchLine.purchLine().IntrastatCommodity = _inventTable.IntrastatCommodity;
        axPurchLine.purchLine().OrigCountryRegionId = _inventTable.OrigCountryRegionId;
        axPurchLine.purchLine().OrigStateId = _inventTable.OrigStateId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSyncManualChangePolicy</Name>
				<Source><![CDATA[
    private boolean mustSyncManualChangePolicy()
    {
        return axPurchLine.parmManualEntryChangepolicy() || salesLine.ManualEntryChangepolicy;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCatchWeightProductSetupInSync</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates that the product setup is synchronized correctly for catch weight items.
    /// </summary>
    protected void validateCatchWeightProductSetupInSync()
    {
        if (!PdsCatchWeight::validateQty(axItemId,
                                            salesLine.SalesQty,
                                            UnitOfMeasure::unitOfMeasureIdBySymbol(salesLine.SalesUnit),
                                            salesLine.PdsCWQty,
                                            false))
        {
            throw error("@PRO1523");
        }

        UnitOfMeasureRecId fromUnitRecId;
        UnitOfMeasureRecId fromCWUnitRecId;

        changeCompany (salesLine.company())
        {
            fromUnitRecId   = UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(salesLine.ItemId).inventUnitId());
            fromCWUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(PdsCatchWeight::cwUnitId(salesLine.ItemId));
        }

        UnitOfMeasureRecId toUnitRecId   = UnitOfMeasure::unitOfMeasureIdBySymbol(InventTable::find(axItemId).inventUnitId());
        UnitOfMeasureRecId toCWUnitRecId = UnitOfMeasure::unitOfMeasureIdBySymbol(PdsCatchWeight::cwUnitId(axItemId));

        if (fromUnitRecId != toUnitRecId
            || fromCWUnitRecId != toCWUnitRecId)
        {
            throw error("@SCM:IntercompanyCatchWeightUnitError");
        }

        PdsCatchWeightItem::compareInterCompanyCatchWeightQuantities(salesLine.ItemId, salesLine.company());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTrackingInventoryDimensionFromSalesLine</Name>
				<Source><![CDATA[
    private void setTrackingInventoryDimensionFromSalesLine()
    {
        InterCompanyEndpointActionPolicyTransfer transferExternal = salesTable.interCompanyEndpointActionPolicy().getOrCreateInterCompanyPolicyTransfer(InterCompanyFieldTransferType::External);
       
        if (transferExternal && (transferExternal.InventBatchIdOnLines || transferExternal.InventSerialIdOnLines))
        {
            InventTable inventTable                 = axPurchLine.inventTableRecord();
            InventDimGroupSetup inventDimGroupSetup = InventDimGroupSetup::newInventTable(inventTable);

            boolean transferBatch = transferExternal.InventBatchIdOnLines
                             && inventDimGroupSetup.isDimensionActive(fieldNum(InventDim,InventBatchId))
                             && !WHSReservationHierarchyInventDimUtil::isBatchBelowLocation(inventTable);

            boolean transferSerial = transferExternal.InventSerialIdOnLines
                             && inventDimGroupSetup.isDimensionActive(fieldNum(InventDim,InventSerialId))
                             && !WHSReservationHierarchyInventDimUtil::isSerialBelowLocation(inventTable);

            if (transferBatch || transferSerial)
            {
                InventDim salesInventDim;
                InventDim inventDim = axPurchLine.axInventDim().inventDim();

                changecompany (salesLine.company())
                {
                    salesInventDim = salesLine.inventDim();
                }

                if (transferBatch)
                {
                    inventDim.InventBatchId = salesInventDim.InventBatchId;

                    if (!InventBatch::exist(salesInventDim.InventBatchId, axItemId))
                    {
                        InventBatch salesInventBatch;
                        changecompany (salesLine.company())
                        {
                            salesInventBatch = InventBatch::find(salesInventDim.inventBatchId, axItemId);
                        }
                        if (salesInventBatch)
                        {
                            salesInventBatch.createInterCompanyBatch(axItemId, salesInventDim);
                        }
                    }
                }

                if (transferSerial)
                {
                    inventDim.InventSerialId = salesInventDim.InventSerialId;
                    if (!InventSerial::exist(salesInventDim.inventSerialId, axItemId))
                    {
                        InventSerial salesInventSerial;
                        changecompany (salesLine.company())
                        {
                            salesInventSerial = InventSerial::find(salesInventDim.InventSerialId, axItemId);
                        }
                        if (salesInventSerial)
                        {
                            salesInventSerial.createInterCompanySerial(axItemId, salesInventDim);
                        }
                    }
                }

                axPurchLine.parmInventDimId(InventDim::findOrCreate(inventDim).InventDimId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryDimensions</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the inventory dimension fields on the purchase order line.
    /// </summary>
    protected void setInventoryDimensions()
    {
        InventDim inventDimPurch;

        if (create && !salesLine.InterCompanyInventTransId && salesLineType.parmInterCompanyInventTransId() && salesLineType.returnItem())
        {
            inventDimPurch = PurchLine::findInventTransId(salesLineType.parmInterCompanyInventTransId()).inventDim();
        }
        else if (interCompanyInventTransIdPurch && salesLine.creditNoteLine())
        {
            inventDimPurch = PurchLine::findInventTransId(interCompanyInventTransIdPurch).inventDim();
        }

        if (create)
        {
            if (inventDimPurch.RecId)
            {
                axPurchLine.axInventDim().parmInventLocationId(inventDimPurch.InventLocationId);
            }
            else
            {
                axPurchLine.axInventDim().setInventLocationId();
            }
        }
            
        if (inventDimPurch.RecId)
        {
            axPurchLine.axInventDim().parmInventSiteId(inventDimPurch.InventSiteId);
        }
        else
        {
            axPurchLine.axInventDim().setInventSiteId();
        }

        if (InventDimGroupSetup::newItemId(axPurchLine.parmItemId()).isDimensionActive(fieldNum(InventDim, InventProfileId_RU)))
        {
            if (axPurchLine.axPurchTable().axPurchTable_RU().parmInventProfileId_RU())
            {
                axPurchLine.axInventDim().parmInventProfileId_RU(axPurchLine.axPurchTable().axPurchTable_RU().parmInventProfileId_RU());
            }
            else if (convInventProfile)
            {
                axPurchLine.axInventDim().parmInventProfileId_RU(convInventProfile.axInventProfileId(toInterCompanyTradingValueMap));
            }
            else
            {
                axPurchLine.axInventDim().parmInventProfileId_RU(SalesParameters::find().InventProfileId_RU);
            }
        }
        
        this.setTrackingInventoryDimensionFromSalesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setReturnActionId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the return action.
    /// </summary>
    protected void setReturnActionId()
    {
        axPurchLine.parmReturnActionId('');
    }

]]></Source>
			</Method>
			<Method>
				<Name>needRecalcPricingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the order line pricing field values need to be recalculated.
    /// </summary>
    /// <returns>true, if pricing information needs to be recalculated; otherwise, false.</returns>
    protected boolean needRecalcPricingInfo()
    {         
        return toEndpointActionPolicy.PriceDiscountSearch
            &&  axPurchLine.purchLine().PurchQty > 0
            && (create || salesLineType.interCompanyIsPriceDiscSearchNeeded())
            && !this.mustSyncManualChangePolicy();
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalcPricingInfo</Name>
				<Source><![CDATA[
    /// <summary>
    /// Recalculate pricing information based on trade agreements.
    /// </summary>
    protected void recalcPricingInfo()
    {
        buf2Buf(axPurchLine.purchLine(),purchLineLocal);
        purchLineLocal.initFromPurchTable(purchTable);
        purchLineLocal.setPriceDisc(axPurchLine.purchLine().inventDim());

        if (axPurchLine.parmMatchingAgreementLine())
        {
            purchLineLocal.salesPurchLineInterface().setAgreementQtyAndPrice(axPurchLine.agreementLineRecord());
        }

        axPurchLine.parmPurchPrice    (purchLineLocal.PurchPrice);
        axPurchLine.parmPriceUnit     (purchLineLocal.PriceUnit);
        axPurchLine.parmPurchMarkup   (purchLineLocal.PurchMarkup);
        axPurchLine.parmLinePercent   (purchLineLocal.LinePercent);
        axPurchLine.parmLineDisc      (purchLineLocal.LineDisc);
        axPurchLine.parmMultiLnPercent(purchLineLocal.MultiLnPercent);
        axPurchLine.parmMultiLnDisc   (purchLineLocal.MultiLnDisc);

        this.setSalesLinePricingFieldsFromPurchLine(purchLineLocal);
                
        if (TaxParameters::checkTaxParameters_IN())
        {
            PurchLine_IN purchLineLoc_IN = purchLineLocal.purchLine_IN();
            SalesLine_IN salesLine_IN = salesLine.salesLine_IN();
            salesLine_IN.MaximumRetailPrice = purchLineLoc_IN.MaximumRetailPrice;
            salesLine_IN.AssessableValueTransactionCurrency    = salesLine.getMiscChargesAmount_IN();
            salesLine.packSalesLine_IN(salesLine_IN);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesLinePricingFieldsFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the pricing field values on the intercompany sales line buffer based on the recalculated pricing information.
    /// </summary>
    /// <param name = "_purchLine">Purchase order line with updated pricing information.</param>
    protected void setSalesLinePricingFieldsFromPurchLine(PurchLine _purchLine)
    {
        salesLine.SalesPrice        = purchLineLocal.PurchPrice;
        salesLine.PriceUnit         = purchLineLocal.PriceUnit;
        salesLine.SalesMarkup       = purchLineLocal.PurchMarkup;
        salesLine.LinePercent       = purchLineLocal.LinePercent;
        salesLine.LineDisc          = purchLineLocal.LineDisc;
        salesLine.MultiLnPercent    = purchLineLocal.MultiLnPercent;
        salesLine.MultiLnDisc       = purchLineLocal.MultiLnDisc;
        salesLine.LineAmount        = salesLine.calcPrice2LineAmount(salesLine.SalesQty, true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyModifiedPricingFieldsFromPurchLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy over the changed pricing field values from the intercompany sales order line.
    /// </summary>
    protected void copyModifiedPricingFieldsFromPurchLine()
    {
        if (create || salesLine.fieldChanged(fieldNum(SalesLine, SalesPrice)))
        {
            axPurchLine.parmPurchPrice(salesLine.SalesPrice);
        }
        else
        {
            axPurchLine.parmPurchPrice(axPurchLine.purchLine().PurchPrice);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, PriceUnit)))
        {
            axPurchLine.parmPriceUnit(salesLine.PriceUnit);
        }
        else
        {
            axPurchLine.parmPriceUnit(axPurchLine.purchLine().PriceUnit);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, SalesMarkup)))
        {
            axPurchLine.parmPurchMarkup(salesLine.SalesMarkup);
        }
        else
        {
            axPurchLine.parmPurchMarkup(axPurchLine.purchLine().PurchMarkup);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, LinePercent)))
        {
            axPurchLine.parmLinePercent(salesLine.LinePercent);
        }
        else
        {
            axPurchLine.parmLinePercent(axPurchLine.purchLine().LinePercent);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, LineDisc)))
        {
            axPurchLine.parmLineDisc(salesLine.LineDisc);
        }
        else
        {
            axPurchLine.parmLineDisc(axPurchLine.purchLine().LineDisc);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, MultiLnPercent)))
        {
            axPurchLine.parmMultiLnPercent(salesLine.MultiLnPercent);
        }
        else
        {
            axPurchLine.parmMultiLnPercent(axPurchLine.purchLine().MultiLnPercent);
        }

        if (create || salesLine.fieldChanged(fieldNum(SalesLine, MultiLnDisc)))
        {
            axPurchLine.parmMultiLnDisc(salesLine.MultiLnDisc);
        }
        else
        {
            axPurchLine.parmMultiLnDisc(axPurchLine.purchLine().MultiLnDisc);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>syncPricingInformation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Synchronize the pricing information, whether through recalculation or by directly copying from the intercompany sales line.
    /// </summary>
    protected void syncPricingInformation()
    {
        if (this.needRecalcPricingInfo())
        {
            this.recalcPricingInfo();
        }
        else
        {
            this.copyModifiedPricingFieldsFromPurchLine();
        }

        axPurchLine.parmLineAmount(salesLine.LineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the purchase order line quantity needs to be set.
    /// </summary>
    /// <returns>true, if purchase order line quantity needs to be set; otherwise, false.</returns>
    protected boolean mustSetQuantity()
    {
        return create
            ||  salesLine.fieldChanged(fieldNum(SalesLine, SalesQty))
            ||  salesLine.fieldChanged(fieldNum(SalesLine, ExpectedRetQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the purchase order line quantity based on the corresponding sales line field.
    /// </summary>
    protected void setQuantity()
    {
        axPurchLine.parmPurchQty(salesLine.SalesQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustSetCatchWeightQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines if the purchase order line catch weight quantity needs to be set.
    /// </summary>
    /// <returns>true, if purchase order line catch weight quantity needs to be set; otherwise, false.</returns>
    protected boolean mustSetCatchWeightQuantity()
    {
        return create 
            || salesLine.fieldChanged(fieldNum(SalesLine, PdsCWQty))
            || salesLine.fieldChanged(fieldNum(SalesLine, PdsCWExpectedRetQty));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCatchWeightQuantity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the purchase order line catch weight quantity based on the corresponding sales line field.
    /// </summary>
    protected void setCatchWeightQuantity()
    {
        axPurchLine.parmPdsCWQty(salesLine.PdsCWQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkProductBlocked</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks if the item added on the sales order line is blocked for intercompany use.
    /// </summary>
    /// <returns>true, if the item is allowed on the order; otherwise, false.</returns>
    /// <remarks>
    /// Description-based lines are not allowed on intercompany orders either.
    /// </remarks>
    public boolean checkProductBlocked()
    {
        InventTable inventTable = salesLine.inventTable();
        if (!inventTable || inventTable.interCompanyBlockedSales())
        {
            if (salesLine.isCategoryBased())
            {
                return checkFailed("@SYS313739");
            }

            return checkFailed(strFmt("@SYS74812", salesLine.ItemId));
        }

        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>