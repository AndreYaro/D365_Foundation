<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlCheckBudgetProc</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// The <c>BudgetControlCheckBudgetProc</c> is a budget control stored procedure.
/// </summary>
[ExportMetadata(enumStr(BudgetControlSQLObjectType), BudgetControlSQLObjectType::StoredProcedure),
 ExportAttribute(identifierstr(Dynamics.AX.Application.BudgetControlISQLObject))]
internal final class BudgetControlCheckBudgetProc implements BudgetControlISQLObject
{
    private const str procName = 'BudgetControlCheckBudgetProc';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getName</Name>
				<Source><![CDATA[
    public str getName()
    {
        return procName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceTrackingRelievingDetailIndexHint</Name>
				<Source><![CDATA[
    private str getBudgetSourceTrackingRelievingDetailIndexHint()
    {
        return this.getIndexHint(tableNum(BudgetSourceTrackingRelievingDetail), indexNum(BudgetSourceTrackingRelievingDetail, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceTrackingIndexHint</Name>
				<Source><![CDATA[
    private str getBudgetSourceTrackingIndexHint()
    {
        return this.getIndexHint(tableNum(BudgetSourceTracking), indexNum(BudgetSourceTracking, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetSourceIndexHint</Name>
				<Source><![CDATA[
    private str getBudgetSourceIndexHint()
    {
        return this.getIndexHint(tableNum(BudgetSource), indexNum(BudgetSource, RecId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIndexHint</Name>
				<Source><![CDATA[
    private str getIndexHint(TableId _tableId, IndexId _indexId)
    {
        str indexHint;
        DictIndex dictIndex = new DictIndex(_tableId, _indexId);
        if (dictIndex)
        {
            str indexName = dictIndex.name(DbBackend::Sql);
            // Example: WITH (FORCESEEK, INDEX(I_5959RECID))
            indexHint = strFmt('WITH (FORCESEEK, INDEX(%1))', indexName);
        }

        return indexHint;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefinition</Name>
				<Source><![CDATA[
    public str getDefinition()
    {
        str sqlStatementText;

        sqlStatementText = @"
    CREATE PROCEDURE [BudgetControlCheckBudgetProc]
    (
         @PartitionId                   BIGINT
        ,@BudgetCheckGroup              BIGINT
        ,@ApplockTimeoutMs              INT
        ,@IsSerialize                   INT
        ,@IsAnyRelieved                 INT
        ,@logErrorFl                    CHAR(1)
        ,@BudgetControlProcessingHeader BIGINT
        ,@ReturnCode                    INT OUTPUT
        ,@ReturnMsg                     NVARCHAR(4000) OUTPUT
        ,@IsPurchYearEndProcess         INT
    )

    AS

    SET NOCOUNT ON;

    -- declarations

    DECLARE  @SPName                 VARCHAR(126) = OBJECT_NAME(@@PROCID) -- the name of the stored proc
            ,@RetCode                INT = 0
            ,@ResultCode_Succesful   INT = 0
            ,@ResultCode_Error       INT = -1
            ,@ErrorTrying            NVARCHAR(4000) -- string describing command that failed
            ,@Rowcount               INT -- local variable for @@ROWCOUNT
            ,@Error_Number           INT -- from ERROR_NUMBER()
            ,@Error_Line             INT -- from ERROR_LINE()
            ,@Error_State            INT = 1 -- from ERROR_STATE()
            ,@Error_Severity         INT = 16 -- from ERROR_SEVERITY()
            ,@Error_Procedure        NVARCHAR(126) = OBJECT_NAME(@@PROCID) -- from ERROR_PROCEDURE()
            ,@ErrorMessage           NVARCHAR(4000) = N'' -- from ERROR_MESSAGE()
            ,@isIncludeErrorLineNum  CHAR(1) = 'Y'
            ,@BudgetControlCalculateAvailableFundsProcReturnMsg NVARCHAR(4000)
            ,@BudgetControlGetSummaryDatesProcReturnMsg NVARCHAR(4000)
            ,@BudgetControlUpdateTrackingSummaryProcReturnMsg NVARCHAR(4000)
            ,@BudgetCheckBuildErrorMsg NVARCHAR(4000)
        

            ,@i                     INT         = 1
            ,@max                   INT
            ,@IsAnyFailed                               BIT         = 0
            ,@IsAnySummarized                           BIT         = 0
            ,@IsAnyPriorErrorWarning                    BIT         = 0
            ,@IsAnyDeleted                              BIT         = 0
            ,@IsOverridePermitted                       BIT         = 0
            ,@IsOverThreshold                           BIT         = 0
            ,@IsOverRemaining                           BIT         = 0

            ,@IsApplockHeld_Main                        BIT         = 0
            ,@applock_LockMode                          NVARCHAR(32)

            ,@ModifiedDateTime                          DATETIME

            ,@CheckResultMax                                INT         = 2

            ,@rowcount_BudgetSource                         INT         = 0
            ,@rowcount_BudgetSourceTracking                 INT         = 0
            ,@rowcount_BudgetSourceTrackingDetail           INT         = 0
            ,@rowcount_BudgetSourceTrackingRelievingDetail  INT         = 0
            ,@rowcount_Detail                               INT         = 0
            ,@rowcount_Merge                                INT         = 0

            ,@BudgetSourceTrackingDetailBegin           BIGINT
            ,@BudgetSourceTrackingDetailEnd             BIGINT

            ,@SummaryTrackingDateBegin                  DATETIME
            ,@SummaryTrackingDateEnd                    DATETIME

            ,@IsSummarized_cur                          BIT
            ,@IsSummarized_upd                          BIT
            ,@Status_cur                                INT
            ,@Status_upd                                INT

            ,@ID_Cur                                    INT
            ,@IsRelieved_cur                            BIT
            ,@BudgetSourceTrackingDetail_cur            BIGINT
            ,@BudgetSourceTrackingRelievingDetail_cur   BIGINT
            ,@PrimaryLedger_cur                         BIGINT
            ,@BudgetSourceLedgerDimension_Cur           BIGINT
            ,@BudgetControlLedgerDimension_Cur          BIGINT
            ,@AccountingCurrencyAmount_cur              NUMERIC(32,16)
            ,@IsReturnOfBudgetFunds_cur                 INT
            ,@IntegratorType_cur                        INT
            ,@Category_cur                              INT
            ,@TrackingDate_cur                          DATETIME
            ,@BudgetSource_cur                          BIGINT
            ,@BudgetModelType_cur                       INT
            ,@BudgetModelID_cur                         NVARCHAR(10)
            ,@IsDefaultBudgetModel_cur                  INT
            ,@TrackingUser_cur                          NVARCHAR(20)
            ,@BudgetModelSubModelID_cur                 NVARCHAR(10)
            ,@BudgetModelDataAreaId_cur                 NCHAR(4)
            ,@TrackingNumber_cur                        NVARCHAR(255)
            ,@IsSimulation_cur                          INT
            ,@IsDraft_cur                               INT
            ,@IsDeletePending_cur                       BIT
            ,@MaxCarryForward_cur                       INT
            ,@BudgetControlRule_cur                     BIGINT
            ,@BudgetGroupMember_cur                     BIGINT
            ,@IsBudgetSourceFailed_cur                  BIT
            ,@IsCarryForward_cur                        INT

            ,@BudgetCycleTimeSpan_rule_cur              BIGINT
            ,@Interval_rule_cur                         INT
            ,@ThresholdRate_rule_cur                    NUMERIC(32,16)
            ,@AccountingCurrencyAmountOverThreshold_rule_cur        NUMERIC(32,16)
            ,@AccountingCurrencyAmountOverRemaining_rule_cur        NUMERIC(32,16)
            ,@BudgetCycle_rule_cur                      BIGINT
            ,@BudgetCycleBudgetModelType_rule_cur       INT
            ,@BudgetCycleBudgetModelID_rule_cur         NVARCHAR(10)
            ,@BudgetCycleBudgetModelSubModelID_rule_cur NVARCHAR(10)
            ,@BudgetCycleBudgetModelDataAreaId_rule_cur NCHAR(4)
            ,@OverbudgetOption_rule_cur                 INT
            ,@OverbudgetGroupCheckOption_rule_cur       INT
            ,@CheckResult_rule_upd                      INT
            ,@CheckResultErrorWarningType_rule_upd      INT
            ,@CheckResultErrorWarning_rule_upd          INT

            ,@BudgetCycleTimeSpan_group_cur             BIGINT
            ,@Interval_group_cur                        INT
            ,@ThresholdRate_group_cur                   NUMERIC(32,16)
            ,@AccountingCurrencyAmountOverThreshold_group_cur       NUMERIC(32,16)
            ,@AccountingCurrencyAmountOverRemaining_group_cur       NUMERIC(32,16)
            ,@BudgetCycle_group_cur                     BIGINT
            ,@OverbudgetOption_group_cur                INT
            ,@CheckResult_group_upd                     INT
            ,@CheckResultErrorWarningType_group_upd     INT
            ,@CheckResultErrorWarning_group_upd         INT

            ,@BudgetGroup_cur                           BIGINT
            ,@IsOverrunApproved_cur                     INT
            ,@WarnOnOverBudgetThreshold_cur             INT
            ,@IsChecked_cur                             BIT         = 0

            ,@BudgetControlRule_upd                     BIGINT
            ,@BudgetGroupMember_upd                     BIGINT
            ,@BudgetControlRule_reset                   BIGINT      = 0
            ,@BudgetGroupMember_reset                   BIGINT      = 0

            ,@TrackingDate_revert                       DATETIME
            ,@PrimaryLedger_revert                      BIGINT
            ,@BudgetControlLedgerDimension_revert       BIGINT
            ,@AccountingCurrencyAmount_revert           NUMERIC(32,16)
            ,@IsDraft_revert                            BIT
            ,@IsSimulation_revert                       BIT
            ,@IsCarryForward_revert                     BIT
            ,@IntegratorType_revert                     INT
            ,@BudgetModelID_revert                      NVARCHAR(10)
            ,@BudgetModelSubModelID_revert              NVARCHAR(10)
            ,@BudgetModelType_revert                    INT
            ,@BudgetModelDataAreaId_revert              NVARCHAR(4)
            ,@Category_revert                           INT
            ,@IsTrackBudgetFundsAvailableOnlyEnabled    BIT = 0
            ,@ProcessingLogEventLevel                   INT
            ,@LogMessage                                NVARCHAR(1000)
            ,@DoLogCritical                             BIT = 0
            ,@DoLogError                                BIT = 0
            ,@DoLogWarning                              BIT = 0
            ,@DoLogInformational                        BIT = 0
            ,@DoLogVerbose                              BIT = 0
    ;

    --Constants match up with x++ BudgetControlCategory enum values
    DECLARE  @_CATEGORY_Orig                                        INT     = 1
            ,@_CATEGORY_Amend                                       INT     = 2
            ,@_CATEGORY_XferIn                                      INT     = 3
            ,@_CATEGORY_XferOut                                     INT     = 4
            ,@_CATEGORY_CFwd                                        INT     = 5
            ,@_CATEGORY_PreEnc                                      INT     = 6
            ,@_CATEGORY_Enc                                         INT     = 7
            ,@_CATEGORY_Act                                         INT     = 8
            ,@_CATEGORY_EncReduction                                INT     = 11
            -- <PubSect>
            ,@_CATEGORY_Apportionment                               INT     = 12
            ,@_CATEGORY_PreliminaryBudget                           INT     = 13
            -- </PubSect>

            ,@_STATUS_Draft                                         INT     = 1
            ,@_STATUS_Confirmed                                     INT     = 3
            
            --Constants match up with x++ BudgetCheckOverbudgetOption enum values
            ,@_OVERBUDGETOPTION_Prevent                             INT     = 0
            ,@_OVERBUDGETOPTION_Allow                               INT     = 1
            ,@_OVERBUDGETOPTION_PreventAtThreshold                  INT     = 2

            ,@_GROUPCHECKOPTION_Perform                             INT     = 0
            ,@_GROUPCHECKOPTION_Prevent                             INT     = 1

            --Constants match up with x++ BudgetInterval enum values
            ,@_INTERVAL_FiscalYear                                  INT     = 1
            ,@_INTERVAL_FiscalYearToDate                            INT     = 2
            ,@_INTERVAL_FiscalPeriod                                INT     = 3
            ,@_INTERVAL_TotalBudget                                 INT     = 4
            ,@_INTERVAL_BudgetToDate                                INT     = 5
            ,@_INTERVAL_Month                                       INT     = 6
            ,@_INTERVAL_Quarter                                     INT     = 7
            ,@_INTERVAL_MonthsToDate                                INT     = 8
            ,@_INTERVAL_QuartersToDate                              INT     = 9

            --Constants match up with x++ BudgetCheckResult enum values
            ,@_CHECKRESULT_NoCheck                                  INT     = 1
            ,@_CHECKRESULT_Passed                                   INT     = 2
            ,@_CHECKRESULT_PassedWithWarnings                       INT     = 3
            ,@_CHECKRESULT_Failed                                   INT     = 4
            
            --Constants match up with x++ BudgetControlErrorWarning enum values
            ,@_ERRORWARNING_LegalEntityInvalid                      INT     = 1
            ,@_ERRORWARNING_BudgetCycleInvalid                      INT     = 3
            ,@_ERRORWARNING_UserIdInvalid                           INT     = 4
            ,@_ERRORWARNING_DateInvalid                             INT     = 5
            ,@_ERRORWARNING_BudgetModelInvalid                      INT     = 6
            ,@_ERRORWARNING_BudgetSourceInvalid                     INT     = 7
            ,@_ERRORWARNING_BudgetThresholdExceeded                 INT     = 9
            ,@_ERRORWARNING_BudgetFundsAvailableExceeded            INT     = 10
            ,@_ERRORWARNING_RelievingBudgetSourceInvalid            INT     = 11
            ,@_ERRORWARNING_RelievingBudgetCategoryInvalid          INT     = 13
            ,@_ERRORWARNING_BudgetFundsAvailableExceededAllowed     INT     = 14
            ,@_ERRORWARNING_BudgetFundsAvailableExceededApproved    INT     = 15
            ,@_ERRORWARNING_BudgetThresholdExceededApproved         INT     = 16
            ,@_ERRORWARNING_BudgetThresholdExceededAllowed          INT     = 17
            ,@_ERRORWARNING_CurrencyInvalid                         INT     = 18
            ,@_ERRORWARNING_BudgetAvailExceededUnderThreshAllowed   INT     = 19
            ,@_ERRORWARNING_BudgetFundsRuleOverGroupUnderAvailable  INT     = 20
            --<PubSect>
            ,@_ERRORWARNING_ApportionmentBudgetExceeds                INT     = 21
             --</PubSect>

            --Constants match up with x++ BudgetControlErrorWarningType enum values
            ,@_ERRORWARNINGTYPE_InvalidRequest                      INT     = 1
            ,@_ERRORWARNINGTYPE_BudgetAvailableCheck                INT     = 2
            
            ,@_APPLOCKRESOURCE_Main                                 NVARCHAR(255)   = N'BudgetCheck_Main'

            ,@_TABLE_BudgetSource                                   SMALLINT    = 1
            ,@_TABLE_BudgetSourceTracking                           SMALLINT    = 2
            ,@_TABLE_BudgetSourceTrackingDetail                     SMALLINT    = 3
            ,@_TABLE_BudgetSourceTrackingRelievingDetail            SMALLINT    = 4

            ,@_RETCODE_IsFailure                                    INT = -1
            ,@_RETCODE_IsSuccess                                    INT = 0

            --Constants match up with x++ BudgetControlEventLevel enum values
            ,@_EVENTLEVEL_None          INT     = 0
            ,@_EVENTLEVEL_Critical      INT     = 1
            ,@_EVENTLEVEL_Error         INT     = 2
            ,@_EVENTLEVEL_Warning       INT     = 3
            ,@_EVENTLEVEL_Informational INT     = 4
            ,@_EVENTLEVEL_Verbose       INT     = 5
    ;

    -- Added for X++ compiler string limitation
    --" + @"

    --work table
    CREATE TABLE #BSTDStage
        ([ID]                                           INT IDENTITY (1,1) PRIMARY KEY CLUSTERED
        ,[IsRelieved]                                   BIT
        ,[BudgetSourceTrackingDetail]                   BIGINT
        ,[BudgetSourceTrackingRelievingDetail]          BIGINT
        ,[BudgetSourceTracking]                         BIGINT
        ,[BudgetSource]                                 BIGINT
        ,[IsSummarized]                                 BIT NOT NULL
        ,[IntegratorType]                               INT
        ,[Status]                                       INT
        ,[IsDraft]  AS
            (CASE WHEN [Status] = 1 THEN 1 ELSE 0 END) PERSISTED
        ,[Category]                                     INT
        ,[TrackingDate]                                 DATETIME
        ,[BudgetModelType]                              INT
        ,[BudgetModelID]                                NVARCHAR(10) COLLATE database_default
        ,[IsDefaultBudgetModel]                         INT
        ,[TrackingUser]                                 NVARCHAR(20) COLLATE database_default
        ,[BudgetModelSubModelID]                        NVARCHAR(10) COLLATE database_default
        ,[BudgetModelDataareaId]                        NCHAR(4) COLLATE database_default   -- special capitalization to prevent issues due to collation
        ,[TrackingNumber]                               NVARCHAR(255) COLLATE database_default
        ,[IsSimulation]                                 INT
        ,[PrimaryLedger]                                BIGINT
        ,[BudgetSourceLedgerDimension]                  BIGINT
        ,[BudgetControlLedgerDimension]                 BIGINT
        ,[AccountingCurrencyAmountOrig]                 NUMERIC(32,16)
        ,[AmountSign]                                   SMALLINT
        ,[IsReturnOfBudgetFunds]                        INT
        ,[IsCarryForward]                               INT
        ,[IsDeletePending]                              INT
        ,[MaxCarryForward]                              INT
        ,[IsProcessed]                                  BIT
        ,[BudgetControlRule]                            BIGINT
        ,[BudgetGroupMember]                            BIGINT
        ,[BudgetGroup]                                  BIGINT
        ,[IsOverrunApproved]                            INT
        ,[WarnOnOverBudgetThreshold]                    INT

        ,[BudgetCycleTimeSpan_rule]                     BIGINT
        ,[Interval_rule]                                INT
        ,[ThresholdRate_rule]                           NUMERIC(32,16)
        ,[AccountingCurrencyAmountOverThreshold_rule]   NUMERIC(32,16)
        ,[AccountingCurrencyAmountOverRemaining_rule]   NUMERIC(32,16)
        ,[BudgetCycle_rule]                             BIGINT
        ,[BudgetCycleBudgetModelType_rule]              INT
        ,[BudgetCycleBudgetModelID_rule]                NVARCHAR(10) COLLATE database_default
        ,[BudgetCycleBudgetModelSubModelID_rule]        NVARCHAR(10) COLLATE database_default
        ,[BudgetCycleBudgetModelDataareaId_rule]        NCHAR(4) COLLATE database_default   -- special capitalization to prevent issues due to collation
        ,[OverbudgetOption_rule]                        INT
        ,[OverbudgetGroupCheckOption_rule]              INT
        ,[CheckResult_rule]                             INT
        ,[CheckResultErrorWarningType_rule]             INT
        ,[CheckResultErrorWarning_rule]                 INT

        ,[BudgetCycleTimeSpan_group]                    BIGINT
        ,[Interval_group]                               INT
        ,[ThresholdRate_group]                          NUMERIC(32,16)
        ,[AccountingCurrencyAmountOverThreshold_group]  NUMERIC(32,16)
        ,[AccountingCurrencyAmountOverRemaining_group]  NUMERIC(32,16)
        ,[BudgetCycle_group]                            BIGINT
        ,[OverbudgetOption_group]                       INT
        ,[CheckResult_group]                            INT
        ,[CheckResultErrorWarningType_group]            INT
        ,[CheckResultErrorWarning_group]                INT

        ,[AccountingCurrencyAmount] AS
            [AccountingCurrencyAmountOrig] * [AmountSign] PERSISTED
        ,[BudgetCheckGroupSequence]                     INT
        ,[RecVersion]                                   BIGINT
        ,[IsBudgetSourceFailed]                         BIT
        ,[IsChecked] AS
            CASE
                WHEN ([BudgetControlRule] = 0
                      OR [IsDeletePending] = 1
                      OR [IsRelieved] = 1
                      OR [IsReturnOfBudgetFunds] = 1
                     )
                    THEN 0
                WHEN ([IsDefaultBudgetModel] = 0
                       AND (NOT [BudgetCycleBudgetModelType_rule] = [BudgetModelType]
                            OR NOT [BudgetCycleBudgetModelID_rule] = [BudgetModelID]
                            OR NOT [BudgetCycleBudgetModelSubModelID_rule] = [BudgetModelSubModelID]
                            OR NOT [BudgetCycleBudgetModelDataareaId_rule] = [BudgetModelDataareaId]
                           )
                     )
                    THEN 0
                ELSE 1
            END PERSISTED
        ,[IsUntrackedBudgetFundsAvailable]                                     BIT
        )
    ;

    CREATE TABLE #BSTDSort
        ([SortID]                                   INT IDENTITY (1,2) PRIMARY KEY CLUSTERED
        ,[BSTDID]                                   INT
        )
    ;

    CREATE TABLE #ResetRecVersion
        ([Table]                SMALLINT NOT NULL
        ,[RecId]                BIGINT NOT NULL
        ,[OrigRecVersion]       INT
        ,[NewRecVersion]        AS
            CAST(CAST(RIGHT(CAST(CAST((RAND(CAST(RIGHT(CAST(([OrigRecVersion]+[RecId])AS CHAR(14)),8) AS BIGINT)))
                *100000000000 AS BIGINT) AS CHAR(11)),9) AS INT) AS INT) PERSISTED
        ,PRIMARY KEY ([RecId],[Table])
        )
    ;

    -- initialization

    SELECT @IsTrackBudgetFundsAvailableOnlyEnabled = TrackBudgetFundsAvailableOnly
         , @ProcessingLogEventLevel = CASE WHEN [IsProcessingLogEnabled] = 1 THEN [ProcessingLogEventLevel] ELSE @_EVENTLEVEL_None END
    FROM BUDGETCONTROLPARAMETERS BCP
    WHERE BCP.[PARTITION] = @PartitionId

    -- Validate that the record for the passed in parameter exists
    IF NOT EXISTS(SELECT TOP 1 1 FROM BUDGETCONTROLPROCESSINGHEADER WHERE RECID = @BudgetControlProcessingHeader)
    BEGIN
        SET @BudgetControlProcessingHeader = 0;
    END;

    SELECT   @logErrorFl = UPPER(@logErrorFl)
    ;

    IF @IsSerialize = 1
      BEGIN
        SELECT @applock_LockMode = N'Exclusive'
      END;
    ELSE
      BEGIN
        SELECT @applock_LockMode = N'Shared'
      END;

    BEGIN TRY
        SELECT @RetCode = 0;
        WHILE @RetCode = 0
          BEGIN
            EXEC @RetCode = sp_releaseapplock
                @DBPrincipal = N'public'
                ,@Resource = @_APPLOCKRESOURCE_Main
                ,@LockOwner = N'Transaction'
            ;
          END;
    END TRY
    BEGIN CATCH
    END CATCH;

    IF @BudgetCheckGroup IS NULL
      BEGIN
        SELECT @ErrorTrying = N'NULL value passed for @BudgetCheckGroup parameter';
        GOTO lblErrorTrap;
      END;

    IF NOT EXISTS
        (   SELECT TOP 1 1
            FROM    [BUDGETSOURCE] bs
            WHERE   bs.[BUDGETCHECKGROUP] = @BudgetCheckGroup
            AND bs.[PARTITION] = @PartitionId
        )
      BEGIN
        SELECT  @ErrorTrying = N'BudgetCheckGroup ' + CAST(@BudgetCheckGroup AS NVARCHAR(20))
                             + N' was not found';
        GOTO lblErrorTrap;
      END;


    BEGIN TRY
    SET @LogMessage = 'BudgetControlCheckBudgetProc - Start';
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    --======
    -- BG L02.01:Populate work table
    --======
        SELECT   @ErrorTrying = N'Initial insert #BSTDStage - BudgetSourceTrackingDetail';
        INSERT INTO #BSTDStage
            (    [IsRelieved]
                ,[BudgetSourceTrackingDetail]
                ,[BudgetSourceTracking]
                ,[BudgetSource]
                ,[IsSummarized]
                ,[IntegratorType]
                ,[Status]
                ,[Category]
                ,[TrackingDate]
                ,[BudgetModelType]
                ,[BudgetModelID]
                ,[IsDefaultBudgetModel]
                ,[TrackingUser]
                ,[BudgetModelSubModelID]
                ,[BudgetModelDataareaId]
                ,[TrackingNumber]
                ,[IsSimulation]
                ,[PrimaryLedger]
                ,[BudgetSourceLedgerDimension]
                ,[BudgetControlLedgerDimension]
                ,[AccountingCurrencyAmountOrig]
                ,[AmountSign]
                ,[IsReturnOfBudgetFunds]
                ,[IsCarryforward]
                ,[IsDeletePending]
                ,[MaxCarryForward]
                ,[IsProcessed]
                ,[BudgetControlRule]
                ,[BudgetGroupMember]
                ,[BudgetGroup]
                ,[IsOverrunApproved]
                ,[WarnOnOverBudgetThreshold]

                --rule
                ,[BudgetCycleTimeSpan_rule]
                ,[Interval_rule]
                ,[ThresholdRate_rule]
                ,[BudgetCycle_rule]
                ,[BudgetCycleBudgetModelType_rule]
                ,[BudgetCycleBudgetModelID_rule]
                ,[BudgetCycleBudgetModelSubModelID_rule]
                ,[BudgetCycleBudgetModelDataareaId_rule]
                ,[AccountingCurrencyAmountOverThreshold_rule]
                ,[AccountingCurrencyAmountOverRemaining_rule]
                ,[OverbudgetOption_rule]
                ,[OverbudgetGroupCheckOption_rule]
                ,[CheckResult_rule]
                ,[CheckResultErrorWarningType_rule]
                ,[CheckResultErrorWarning_rule]

                --group
                ,[BudgetCycleTimeSpan_group]
                ,[Interval_group]
                ,[ThresholdRate_group]
                ,[BudgetCycle_group]
                ,[AccountingCurrencyAmountOverThreshold_group]
                ,[AccountingCurrencyAmountOverRemaining_group]
                ,[OverbudgetOption_group]
                ,[CheckResult_group]
                ,[CheckResultErrorWarningType_group]
                ,[CheckResultErrorWarning_group]

                ,[BudgetCheckGroupSequence]
                ,[RecVersion]
                ,[IsBudgetSourceFailed]
                ,[IsUntrackedBudgetFundsAvailable]
            )
        SELECT   0
                ,bstd.[RECID]
                ,bst.[RECID]
                ,bs.[RECID]
                ,bstd.[ISSUMMARIZED]
                ,bs.[BUDGETCONTROLSOURCEINTEGRATOR]
                ,bst.[STATUS]
                ,bst.[CATEGORY]
                ,bst.[TRACKINGDATE]
                ,bst.[BUDGETMODELTYPE]
                ,bst.[BUDGETMODELID]
                ,bst.[ISDEFAULTBUDGETMODEL]
                ,bst.[TRACKINGUSER]
                ,bst.[BUDGETMODELSUBMODELID]
                ,bst.[BUDGETMODELDATAAREAID]
                ,bst.[TRACKINGNUMBER]
                ,bst.[ISSIMULATION]
                ,bstd.[PRIMARYLEDGER]
                ,bstd.[BUDGETSOURCELEDGERDIMENSION]
                ,bstd.[BUDGETCONTROLLEDGERDIMENSION]
                ,bstd.[ACCOUNTINGCURRENCYAMOUNT]
                ,dbo.[BudgetControlAdjustAmountSignFunction](bst.[CATEGORY],bstd.[ISDELETEPENDING])
                ,bstd.[ISRETURNOFBUDGETFUNDS]
                ,bstd.[ISCARRYFORWARD]
                ,bstd.[ISDELETEPENDING]
                ,c.[INCLUDECARRYFORWARDAMOUNTS]
                ,0
                ,bstd.[BUDGETCONTROLRULE] --bcr.[RECID]
                ,bstd.[BUDGETGROUPMEMBER]
                ,bg.[RECID]
                ,bs.[ISOVERRUNAPPROVED]
                ,c.[WARNONOVERBUDGETTHRESHOLD]

                --rule
                ,bcr.[BUDGETCYCLETIMESPAN]
                ,bcr.[INTERVAL]
                ,(bcr.[THRESHOLDPERCENT]/100)
                ,bc_rule.[RECID]
                ,bc_rule.[BUDGETMODELTYPE]
                ,bc_rule.[BUDGETMODELID]
                ,bc_rule.[BUDGETMODELSUBMODELID]
                ,bc_rule.[BUDGETMODELDATAAREAID]
                ,0.0
                ,0.0
                ,COALESCE(
                    (  SELECT  TOP 1 vopt_rule.[OVERBUDGETOPTION]
                        FROM    [BUDGETCONTROLRULEUSEROVERBUDGETOPTVIEW] vopt_rule
                        WHERE   vopt_rule.[PRIMARYLEDGER] = bstd.[PRIMARYLEDGER]
                        AND     vopt_rule.[BUDGETCONTROLRULE] = bcr.[RECID]
                        AND     vopt_rule.[USERID] = bst.[TRACKINGUSER]
                        ORDER BY vopt_rule.[PRECEDENCE] DESC
                     ), @_OVERBUDGETOPTION_Prevent
                   )
                   AS [OverbudgetOption_rule]
                ,COALESCE(
                    (   SELECT TOP 1 vopt_rule.[OVERBUDGETBUDGETGROUPCHECKOPTION]
                        FROM    [BUDGETCONTROLRULEUSEROVERBUDGETOPTVIEW] vopt_rule
                        WHERE   vopt_rule.[PRIMARYLEDGER] = bstd.[PRIMARYLEDGER]
                        AND     vopt_rule.[BUDGETCONTROLRULE] = bcr.[RECID]
                        AND     vopt_rule.[USERID] = bst.[TRACKINGUSER]
                        ORDER BY vopt_rule.[PRECEDENCE] DESC,
                                 vopt_rule.[OVERBUDGETBUDGETGROUPCHECKOPTION] DESC
                    ), @_GROUPCHECKOPTION_Perform
                ) AS [OverbudgetGroupCheckOption_rule]
                ,0--@_CHECKRESULT_Passed
                ,0
                ,0

                --group
                ,bg.[BUDGETCYCLETIMESPAN]
                ,bg.[INTERVAL]
                ,(bg.[THRESHOLDPERCENT]/100)
                ,bc_group.[RECID]
                ,0.0
                ,0.0
                ,COALESCE(
                    (  SELECT  TOP 1 vopt_group.[OVERBUDGETOPTION]
                        FROM    [BUDGETCONTROLGROUPUSEROVERBUDGETOPTVIEW] vopt_group
                        WHERE   vopt_group.[PRIMARYLEDGER] = bstd.[PRIMARYLEDGER]
                        AND     vopt_group.[BUDGETGROUP] = bg.[RECID]
                        AND     vopt_group.[USERID] = bst.[TRACKINGUSER]
                        ORDER BY vopt_group.[PRECEDENCE] DESC
                     ), @_OVERBUDGETOPTION_Prevent
                   )
                   AS [OverbudgetOption_group]
                ,0--@_CHECKRESULT_Passed
                ,0
                ,0

                ,bs.[BUDGETCHECKGROUPSEQUENCE]
                ,bstd.[RECVERSION]
                ,0
                , CASE WHEN -- If the configuration setting is enabled and the Draft/Category is not in Budget Funds Available
                    @IsTrackBudgetFundsAvailableOnlyEnabled = 1
                    AND NOT EXISTS
                    (   SELECT  1
                        FROM    [BudgetControlConfigDraftCategoryView] v
                        WHERE   v.[IsDraft] = CASE WHEN bst.[Status] = 1 THEN 1 ELSE 0 END
                        AND     v.[Category] = bst.[CATEGORY]
                        AND		v.PrimaryLedger = bstd.[PRIMARYLEDGER]
                    ) THEN 1 ELSE 0 END
        FROM    [BUDGETSOURCETRACKINGDETAIL] bstd
        JOIN    [BUDGETSOURCETRACKING] bst
            ON      bstd.[BUDGETSOURCETRACKING] = bst.[RECID]
            AND     bst.[PARTITION] = @PartitionId
        JOIN    [BUDGETSOURCE] bs
            ON      bst.[BUDGETSOURCE] = bs.[RECID]
            AND     bs.[PARTITION] = @PartitionId
        JOIN    [BUDGETCONTROLCONFIGURATION] c
            ON      bstd.[PRIMARYLEDGER] = c.[PRIMARYLEDGER]
            AND     c.[PARTITION] = @PartitionId
        LEFT JOIN    [BUDGETCONTROLRULE] bcr
            ON      bstd.[BUDGETCONTROLRULE] = bcr.[RECID]
            AND     bcr.[PARTITION] = @PartitionId
        LEFT JOIN    [BUDGETCONTROLCYCLEVIEW] bc_rule
            ON  (bcr.[BUDGETCYCLETIMESPAN] = bc_rule.[BUDGETCYCLETIMESPAN]
                AND bst.[TRACKINGDATE] BETWEEN bc_rule.[STARTDATE] AND bc_rule.[ENDDATE]
                AND c.[RECID] = bc_rule.[BUDGETCONTROLCONFIGURATION])
        LEFT JOIN [BUDGETGROUPMEMBER] bgm
            ON      bstd.[BUDGETGROUPMEMBER] = bgm.[RECID]
            AND     bgm.[PARTITION] = @PartitionId
        LEFT JOIN [BUDGETGROUP] bg
            ON      bgm.[BUDGETGROUP] = bg.[RECID]
        LEFT JOIN [BUDGETCONTROLCYCLEVIEW] bc_group
            ON  (bg.[BUDGETCYCLETIMESPAN] = bc_group.[BUDGETCYCLETIMESPAN]
            AND bst.[TRACKINGDATE] BETWEEN bc_group.[STARTDATE] AND bc_group.[ENDDATE]
            AND c.[RECID] = bc_group.[BUDGETCONTROLCONFIGURATION])
        WHERE   bs.[BUDGETCHECKGROUP] = @BudgetCheckGroup
        AND     bstd.[PARTITION] = @PartitionId
        AND     c.[ISACTIVE] = 1
        AND     (bstd.[ISSUMMARIZED] = 0
                 OR bstd.[ISDELETEPENDING] = 1
                )
    ;

        SELECT   @rowcount_BudgetSourceTrackingDetail = @@ROWCOUNT;
        SELECT  @max = @rowcount_BudgetSourceTrackingDetail;

        IF @IsAnyRelieved = 1
            BEGIN -- insert relieved details to stage table
            SELECT   @ErrorTrying = N'Initial insert #BSTDStage - BudgetSourceTrackingRelievingDetail';
            EXEC [BudgetControlLogMessageProc] @ErrorTrying, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

            INSERT INTO #BSTDStage
            (    [IsRelieved]
                ,[BudgetSourceTrackingRelievingDetail]
                ,[BudgetSourceTracking]
                ,[BudgetSource]
                ,[IsSummarized]
                ,[IntegratorType]
                ,[Status]
                ,[Category]
                ,[TrackingDate]
                ,[BudgetModelType]
                ,[BudgetModelID]
                ,[IsDefaultBudgetModel]
                ,[TrackingUser]
                ,[BudgetModelSubModelID]
                ,[BudgetModelDataareaId]
                ,[TrackingNumber]
                ,[IsSimulation]
                ,[PrimaryLedger]
                ,[BudgetSourceLedgerDimension]
                ,[BudgetControlLedgerDimension]
                ,[AccountingCurrencyAmountOrig]
                ,[AmountSign]
                ,[IsReturnOfBudgetFunds]
                ,[IsCarryforward]
                ,[IsDeletePending]
                ,[MaxCarryForward]

                ,[IsProcessed]
                ,[CheckResult_rule]
                ,[CheckResultErrorWarningType_rule]
                ,[CheckResultErrorWarning_rule]

                ,[CheckResult_group]
                ,[CheckResultErrorWarningType_group]
                ,[CheckResultErrorWarning_group]

                ,[BudgetCheckGroupSequence]
                ,[RecVersion]
                ,[IsBudgetSourceFailed]
                ,[IsUntrackedBudgetFundsAvailable]
            )
            SELECT   1
                    ,bstrd.[RECID]
                    ,bst.[RECID]
                    ,bs.[RECID]
                    ,bstrd.[ISSUMMARIZED]
                    ,bs.[BUDGETCONTROLSOURCEINTEGRATOR]
                    ,relieved_bst.[STATUS]
                    ,relieved_bst.[CATEGORY]
                    ,bst.[TRACKINGDATE]
                    ,bst.[BUDGETMODELTYPE]
                    ,bst.[BUDGETMODELID]
                    ,bst.[ISDEFAULTBUDGETMODEL]
                    ,bst.[TRACKINGUSER]
                    ,bst.[BUDGETMODELSUBMODELID]
                    ,bst.[BUDGETMODELDATAAREAID]
                    ,bst.[TRACKINGNUMBER]
                    ,bst.[ISSIMULATION]
                    ,relieved_bstd.[PRIMARYLEDGER]
                    ,relieved_bstd.[BUDGETSOURCELEDGERDIMENSION]
                    ,relieved_bstd.[BUDGETCONTROLLEDGERDIMENSION]
                    ,bstrd.[ACCOUNTINGCURRENCYAMOUNT]
                    ,dbo.[BudgetControlAdjustAmountSignFunction](bst.[CATEGORY],bstrd.[ISDELETEPENDING])
                    ,bstrd.[ISRETURNOFBUDGETFUNDS]
                    ,relieved_bstd.[ISCARRYFORWARD]
                    ,bstrd.[ISDELETEPENDING]
                    ,c.[INCLUDECARRYFORWARDAMOUNTS]

                    ,0
                    ,0
                    ,0
                    ,0

                    ,0
                    ,0
                    ,0

                    ,bs.[BUDGETCHECKGROUPSEQUENCE]
                    ,bstrd.[RECVERSION]
                    ,0
                    , CASE WHEN -- If the configuration setting is enabled and the Draft/Category is not in Budget Funds Available
                        @IsTrackBudgetFundsAvailableOnlyEnabled = 1
                        AND NOT EXISTS
                        (   SELECT  1
                            FROM    [BudgetControlConfigDraftCategoryView] v
                            WHERE   v.[IsDraft] = CASE WHEN bst.[Status] = 1 THEN 1 ELSE 0 END
                            AND     v.[Category] = bst.[CATEGORY]
                            AND     v.PrimaryLedger = relieved_bstd.[PRIMARYLEDGER]
                        ) THEN 1 ELSE 0
                    END
            FROM    [BUDGETSOURCETRACKINGRELIEVINGDETAIL] bstrd
            JOIN    [BUDGETSOURCETRACKINGDETAIL] relieved_bstd
                ON      bstrd.[RELIEVEDBUDGETSOURCETRACKINGDETAIL] = relieved_bstd.[RECID]
                AND     relieved_bstd.[PARTITION] = @PartitionId
            JOIN    [BUDGETSOURCETRACKING] relieved_bst
                ON      relieved_bstd.[BUDGETSOURCETRACKING] = relieved_bst.[RECID]
                AND     relieved_bst.[PARTITION] = @PartitionId
            JOIN    [BUDGETSOURCETRACKING] bst
                ON      bstrd.[RELIEVINGBUDGETSOURCETRACKING] = bst.[RECID]
                AND     bst.[PARTITION] = @PartitionId
            JOIN    [BUDGETSOURCE] bs
                ON      bst.[BUDGETSOURCE] = bs.[RECID]
                AND     bs.[PARTITION] = @PartitionId
            JOIN    [BUDGETCONTROLCONFIGURATION] c
                ON      relieved_bstd.[PRIMARYLEDGER] = c.[PRIMARYLEDGER]
                AND     c.[PARTITION] = @PartitionId
            WHERE   bs.[BUDGETCHECKGROUP] = @BudgetCheckGroup
            AND     bstrd.[PARTITION] = @PartitionId
            AND     c.[ISACTIVE] = 1
            AND     (bstrd.[ISSUMMARIZED] = 0
                        OR bstrd.[ISDELETEPENDING] = 1
                    )
            ;

            SELECT  @rowcount_BudgetSourceTrackingRelievingDetail = @@ROWCOUNT;
            SELECT  @max = @max + @rowcount_BudgetSourceTrackingRelievingDetail;
            IF @rowcount_BudgetSourceTrackingRelievingDetail = 0
            BEGIN
                SET @IsAnyRelieved = 0;
                SET @LogMessage = 'IsAnyRelieved set to 0';
                EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId
            END;
            END; -- insert relieved details to stage table

        SELECT @ErrorTrying = N'Insert #ResetRecversion - BudgetSource';
        INSERT INTO #ResetRecversion
            ([Table]
            ,[RecId]
            ,[OrigRecversion]
            )
        SELECT  @_TABLE_BudgetSource
                ,bs.[RECID]
                ,bs.[RECVERSION]
        FROM    [BUDGETSOURCE] bs
        WHERE   bs.[RECID] IN
                    (SELECT t.[BudgetSource]
                     FROM   #BSTDStage t
                    )
                AND     bs.[PARTITION] = @PartitionId
        ;

        SELECT @rowcount_BudgetSource = @@ROWCOUNT;
        IF @rowcount_BudgetSource = 0
            BEGIN
                SELECT @ErrorTrying = N'No BudgetSource rows for BudgetCheckGroup = '
                                + CAST(@BudgetCheckGroup AS NVARCHAR);
                GOTO lblErrorTrap;
            END;

        SELECT @ErrorTrying = N'Insert #ResetRecversion - BudgetSourceTracking';
        INSERT INTO #ResetRecversion
            ([Table]
            ,[RecId]
            ,[OrigRecversion]
            )
        SELECT  @_TABLE_BudgetSourceTracking
                ,bst.[RECID]
                ,bst.[RECVERSION]
        FROM    [BUDGETSOURCETRACKING] bst
        WHERE bst.[RECID] IN
            (SELECT     t.[BudgetSourceTracking]
             FROM       #BSTDStage t
            )
            AND     bst.[PARTITION] = @PartitionId
        ;

        SELECT @rowcount_BudgetSourceTracking = @@ROWCOUNT;
        IF @rowcount_BudgetSourceTracking = 0
            BEGIN
                SELECT @ErrorTrying = N'No BudgetSourceTracking rows for BudgetCheckGroup = '
                                + CAST(@BudgetCheckGroup AS NVARCHAR);
                GOTO lblErrorTrap;
            END;

        SELECT @ErrorTrying = N'Insert #ResetRecversion - BudgetSourceTrackingDetail';
        INSERT INTO #ResetRecversion
            ([Table]
            ,[RecId]
            ,[OrigRecversion]
            )
        SELECT  @_TABLE_BudgetSourceTrackingDetail
                ,bstd.[RECID]
                ,bstd.[RECVERSION]
        FROM    [BUDGETSOURCETRACKINGDETAIL] bstd
        WHERE   bstd.[RECID] IN
            (SELECT     t.[BudgetSourceTrackingDetail]
             FROM       #BSTDStage t
             WHERE      t.[IsRelieved] = 0
            )
            AND     bstd.[PARTITION] = @PartitionId
        ;

        SELECT @rowcount_BudgetSourceTrackingDetail = @@ROWCOUNT;

        SELECT @ErrorTrying = N'Insert #ResetRecversion - BudgetSourceTrackingRelievingDetail';
        INSERT INTO #ResetRecversion
            ([Table]
            ,[RecId]
            ,[OrigRecversion]
            )
        SELECT  @_TABLE_BudgetSourceTrackingRelievingDetail
                ,bstrd.[RECID]
                ,bstrd.[RECVERSION]
        FROM    [BUDGETSOURCETRACKINGRELIEVINGDETAIL] bstrd
        WHERE   bstrd.[RECID] IN
            (SELECT     t.[BudgetSourceTrackingRelievingDetail]
             FROM       #BSTDStage t
             WHERE      t.[IsRelieved] = 1
            )
            AND     bstrd.[PARTITION] = @PartitionId
        ;

        SELECT  @rowcount_BudgetSourceTrackingRelievingDetail = @@rowcount
                ,@rowcount_detail = @rowcount_BudgetSourceTrackingDetail + @rowcount_BudgetSourceTrackingRelievingDetail
        ;

        --======
        -- L02.03 Populate sort work table
        --======
        SELECT   @ErrorTrying = N'Insert #BSTDSort';

        -- Process all IsDeletePending records first.
        -- Secondly, process return remaining funds before budget check details to allow funds to be used by any BudgetSource.
        -- Thirdly, process all relieving details to relieve budget funds regardless of the BudgetCheckGroupSequence. This allows the relief to be shared across all budget checks in this BudgetCheckGroup.
        --          This does have the natural consequence that if the relieved funds have been used by another budget source, those funds are no longer available to the original owner of the relief.
        --          This is fine if the document as a whole will pass, but if not, the failure might show on a budget source that would pass budget on its own.
        -- Fourthly, if 'Purchase order year end process' is performed, give all budget checks the best possible chance of succeeding. Process anything contributing to budget
           -- (all the budget transactions that fall under category 1 - Original, 2 - Amendment, 3 - TransferIn, 4 - TransferOut, 5 - CarryForwardBudget, 13 - PreliminaryBudget)
           -- before amounts consuming from budget (all transactions having category 6 - PreEncumbrance, 7 - Encumbrance, 8 - ActualExpenditure, 11 - EncumbranceReduction, 12 - Apportionment).
           -- Whether an amount is contributing vs consuming budget is dependent on category. If it is contributing to budget, sort by the amount descending. If consuming, sort by ascending.

        IF @IsPurchYearEndProcess = 1
            BEGIN

                INSERT INTO #BSTDSort ([BSTDID])
                SELECT  t.[ID]
                FROM    #BSTDStage t
                ORDER BY    t.[IsDeletePending] DESC
                            ,t.[IsReturnOfBudgetFunds] DESC
                            ,t.[IsRelieved] DESC
                            ,CASE WHEN Category in (1,2,3,4,5,13) THEN t.AccountingCurrencyAmountOrig * -1 ELSE t.AccountingCurrencyAmountOrig END
                ;
            END;
        ELSE
            BEGIN
            
                INSERT INTO #BSTDSort ([BSTDID])
                SELECT  t.[ID]
                FROM    #BSTDStage t
                ORDER BY    t.[IsDeletePending] DESC
                            ,t.[IsReturnOfBudgetFunds] DESC
                            ,t.[IsRelieved] DESC
                            ,t.[BudgetCheckGroupSequence] ASC
                            ,t.[AccountingCurrencyAmount] DESC
                ;
            END;

        -- Check if RecVersions changed after they were saved

        IF EXISTS
            (   SELECT  1
                FROM    #BSTDStage t
                JOIN    #ResetRecversion r
                    ON      t.[BudgetSourceTrackingDetail] = r.[RecId]
                    AND r.[Table] = 3 --@_TABLE_BudgetSourceTrackingDetail - Numeric value used for performance optimization
                WHERE t.[IsRelieved] = 0
                AND   t.[RecVersion] <> r.[OrigRecVersion]
            )
          BEGIN
            SELECT @ErrorTrying = N'Recversion mismatch BudgetSourceTrackingDetail before budget check invoked';
            GOTO lblErrorTrap;
          END;

        IF @rowcount_BudgetSourceTrackingRelievingDetail > 0
        AND EXISTS
            (   SELECT  1
                FROM    #BSTDStage t
                JOIN    #ResetRecversion r
                    ON      t.[BudgetSourceTrackingDetail] = r.[RecId]
                    AND     r.[Table] = 4 --@_TABLE_BudgetSourceTrackingRelievingDetail - Numeric value used for performance optimization
                WHERE t.[IsRelieved] = 1
                AND   t.[RecVersion] <> r.[OrigRecVersion]
            )
          BEGIN
            SELECT @ErrorTrying = N'Recversion mismatch BudgetSourceTrackingRelievingDetail before budget check invoked';
            GOTO lblErrorTrap;
          END;

    END TRY
    BEGIN CATCH
        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH;
    --======
    -- EX L02.01:Populate work table
    --======

    --======
    -- BG L03.01:Budget Check Loop through work table
    --======
    BEGIN TRY -- serialize budget check main

        SELECT   @ErrorTrying = N'catch: get applock ' + @_APPLOCKRESOURCE_Main;
        EXEC @RetCode = sp_getapplock
            @DBPrincipal = N'public'
            ,@Resource = @_APPLOCKRESOURCE_Main
            ,@LockMode = @applock_LockMode
            ,@LockOwner = N'Transaction'
            ,@LockTimeout = @ApplockTimeoutMs
        ;
        IF @RetCode < 0
          BEGIN
            SELECT @ErrorTrying = N'get applock' + @_APPLOCKRESOURCE_Main + N' returned ' + CAST(@RetCode AS NVARCHAR);
            GOTO lblErrorTrap;
          END;

        SELECT @IsApplockHeld_Main = 1;

    END TRY
    BEGIN CATCH
        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH; -- serialize budget check main

    SELECT @ErrorTrying = N'Budget check loop';
    EXEC [BudgetControlLogMessageProc] @ErrorTrying, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    BEGIN TRY
    WHILE @i <= (@max * 2)
      BEGIN -- budget check loop
        SELECT   @ID_cur                                    = t.[ID]
                ,@IsRelieved_cur                            = t.[IsRelieved]
                ,@IsSummarized_cur                          = t.[IsSummarized]
                ,@BudgetSourceTrackingDetail_cur            = t.[BudgetSourceTrackingDetail]
                ,@BudgetSource_cur                          = t.[BudgetSource]
                ,@IntegratorType_cur                        = t.[IntegratorType]
                ,@PrimaryLedger_cur                         = t.[PrimaryLedger]
                ,@BudgetSourceLedgerDimension_Cur           = t.[BudgetSourceLedgerDimension]
                ,@BudgetControlLedgerDimension_Cur          = t.[BudgetControlLedgerDimension]
                ,@AccountingCurrencyAmount_cur              = t.[AccountingCurrencyAmount]
                ,@IsReturnOfBudgetFunds_cur                 = t.[IsReturnOfBudgetFunds]
                ,@Status_cur                                = t.[Status]
                ,@IsDraft_cur                               = t.[IsDraft]
                ,@Category_cur                              = t.[Category]
                ,@TrackingDate_cur                          = t.[TrackingDate]
                ,@BudgetModelType_cur                       = t.[BudgetModelType]
                ,@IsDefaultBudgetModel_cur                  = t.[IsDefaultBudgetModel]
                ,@TrackingUser_cur                          = t.[TrackingUser]
                ,@BudgetModelID_cur                         = t.[BudgetModelID]
                ,@BudgetModelSubModelID_cur                 = t.[BudgetModelSubModelID]
                ,@BudgetModelDataAreaId_cur                 = t.[BudgetModelDataareaId]
                ,@TrackingNumber_cur                        = t.[TrackingNumber]
                ,@IsSimulation_cur                          = t.[IsSimulation]
                ,@MaxCarryForward_cur                       = t.[MaxCarryForward]
                ,@IsDeletePending_cur                       = t.[IsDeletePending]
                ,@BudgetControlRule_cur                     = t.[BudgetControlRule]
                ,@BudgetGroupMember_cur                     = t.[BudgetGroupMember]
                ,@BudgetGroup_cur                           = t.[BudgetGroup]
                ,@IsOverrunApproved_cur                     = t.[IsOverrunApproved]
                ,@WarnOnOverbudgetThreshold_cur             = t.[WarnOnOverbudgetThreshold]
                ,@IsBudgetSourceFailed_cur                  = t.[IsBudgetSourceFailed]
                ,@IsCarryForward_cur                        = t.[IsCarryForward]

                ,@BudgetCycleTimeSpan_rule_cur              = t.[BudgetCycleTimeSpan_rule]
                ,@Interval_rule_cur                         = t.[Interval_rule]
                ,@ThresholdRate_rule_cur                    = t.[ThresholdRate_rule]
                ,@BudgetCycle_rule_cur                      = t.[BudgetCycle_rule]
                ,@BudgetCycleBudgetModelType_rule_cur       = t.[BudgetCycleBudgetModelType_rule]
                ,@BudgetCycleBudgetModelID_rule_cur         = t.[BudgetCycleBudgetModelID_rule]
                ,@BudgetCycleBudgetModelSubModelID_rule_cur = t.[BudgetCycleBudgetModelSubModelID_rule]
                ,@BudgetCycleBudgetModelDataAreaId_rule_cur = t.[BudgetCycleBudgetModelDataareaId_rule]
                ,@OverbudgetOption_rule_cur                 = t.[OverbudgetOption_rule]
                ,@OverbudgetGroupCheckOption_rule_cur       = t.[OverbudgetGroupCheckOption_rule]
                ,@AccountingCurrencyAmountOverThreshold_rule_cur    = 0.0
                ,@AccountingCurrencyAmountOverRemaining_rule_cur    = 0.0
                ,@CheckResult_rule_upd                      = t.[CheckResult_rule]
                ,@CheckResultErrorWarningType_rule_upd      = t.[CheckResultErrorWarningType_rule]
                ,@CheckResultErrorWarning_rule_upd          = t.[CheckResultErrorWarning_rule]
                ,@BudgetCycleTimeSpan_group_cur             = t.[BudgetCycleTimeSpan_group]
                ,@Interval_group_cur                        = t.[Interval_group]
                ,@ThresholdRate_group_cur                   = t.[ThresholdRate_group]
                ,@BudgetCycle_group_cur                     = t.[BudgetCycle_group]
                ,@OverbudgetOption_group_cur                    = t.[OverbudgetOption_group]
                ,@AccountingCurrencyAmountOverThreshold_group_cur   = 0.0
                ,@AccountingCurrencyAmountOverRemaining_group_cur   = 0.0
                ,@CheckResult_group_upd                         = t.[CheckResult_group]
                ,@CheckResultErrorWarningType_group_upd         = t.[CheckResultErrorWarningType_group]
                ,@CheckResultErrorWarning_group_upd             = t.[CheckResultErrorWarning_group]
                ,@IsChecked_cur                                 = t.[IsChecked]

        FROM    #BSTDStage t
        JOIN    #BSTDSort s
            ON      t.[ID] = s.[BSTDID]
        WHERE   s.[SortID] = @i
        ;

        SELECT @IsSummarized_upd = @IsSummarized_cur
                ,@BudgetControlRule_upd = @BudgetControlRule_reset
                ,@BudgetGroupMember_upd = @BudgetGroupMember_reset
        ;

        SET @LogMessage = N'New Iteration ID = ' + CONVERT(varchar(32), @ID_cur)
        EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    -- Added for X++ compiler string limitation
    --" + @"

        IF (@AccountingCurrencyAmount_cur >= 0
            OR @IsChecked_cur = 0 -- we don't check delete pending, relieving detail, return of funds, or non-default budget model
           )
          BEGIN
            SET @LogMessage = N'Force Summarized AccountingCurrencyAmount='+CAST(@AccountingCurrencyAmount_cur AS VARCHAR(40)) + ' IsChecked=' + CONVERT(varchar(40), @IsChecked_cur);
            EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

            SELECT  @IsSummarized_upd = 1
                    ,@IsAnySummarized = 1;
            
            EXEC @RetCode = [BudgetControlUpdateTrackingSummaryProc]
                 @PartitionId = @PartitionId
                ,@TrackingDate = @TrackingDate_cur
                ,@PrimaryLedger = @PrimaryLedger_cur
                ,@BudgetControlLedgerDimension = @BudgetControlLedgerDimension_Cur
                ,@AccountingCurrencyAmount = @AccountingCurrencyAmount_cur
                ,@IsDraft = @IsDraft_cur
                ,@IsSimulation = @IsSimulation_cur
                ,@IsCarryForward = @IsCarryForward_cur
                ,@IntegratorType = @IntegratorType_cur
                ,@BudgetModelID = @BudgetModelID_cur
                ,@BudgetModelSubModelID = @BudgetModelSubModelID_cur
                ,@BudgetModelType = @BudgetModelType_cur
                ,@BudgetModelDataAreaID = @BudgetModelDataAreaId_cur
                ,@logErrorFl = @logErrorFl
                --<PubSect>
                ,@Category = @Category_cur
                --</PubSect>
                ,@ReturnMsg = @BudgetControlUpdateTrackingSummaryProcReturnMsg OUTPUT
            ;
            
            IF (@RetCode < 0)
                BEGIN
                    SELECT @ErrorTrying = @ErrorTrying + N': call BudgetControlUpdateTrackingSummaryProc failed with message: ' + @BudgetControlUpdateTrackingSummaryProcReturnMsg;
                    GOTO lblErrorTrap;
                END;

          END;
        ELSE --IF @AccountingCurrencyAmount_cur < 0
          BEGIN --check budget

            --bg check budget rule
            EXEC @RetCode = [BudgetControlGetSummaryDatesProc]
                 @PartitionId = @PartitionId
                ,@Interval = @Interval_rule_cur
                ,@BudgetCycle = @BudgetCycle_rule_cur
                ,@TrackingDate = @TrackingDate_cur
                ,@SummaryTrackingDateBegin = @SummaryTrackingDateBegin OUTPUT
                ,@SummaryTrackingDateEnd = @SummaryTrackingDateEnd OUTPUT
                ,@ReturnMsg = @BudgetControlGetSummaryDatesProcReturnMsg OUTPUT
            ;

            IF (@RetCode < 0)
                BEGIN
                    SELECT @ErrorTrying = @ErrorTrying + N': call BudgetControlGetSummaryDatesProc failed with message: ' + @BudgetControlGetSummaryDatesProcReturnMsg;
                    GOTO lblErrorTrap;
                END;

            IF @SummaryTrackingDateBegin IS NULL
            OR @SummaryTrackingDateEnd IS NULL
              BEGIN
                SELECT @ErrorTrying = N'Failed to obtain summary date boundaries for '
                                      + CASE
                                          WHEN @IsRelieved_cur = 0
                                            THEN N'BudgetSourceTrackingDetail.RecId='
                                                 + CAST(@BudgetSourceTrackingDetail_cur AS NVARCHAR)
                                          ELSE N'BudgetSourceTrackingRelievingDetail.RecId='
                                               + CAST(@BudgetSourceTrackingRelievingDetail_cur AS NVARCHAR)
                                        END
                                      + N' (rule)'
                 ;
                GOTO lblErrorTrap;
              END;

            SET @LogMessage = 'Interval = ' + CAST(@Interval_rule_cur as VARCHAR)+ ', Dates = ' + CONVERT(VARCHAR(20), @SummaryTrackingDateBegin, 1) + ' - ' + CONVERT(VARCHAR(20), @SummaryTrackingDateEnd, 1);
            EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId



            EXEC @RetCode = [BudgetControlCalculateAvailableFundsProc]
                 @PartitionId = @PartitionId
                ,@SummaryTrackingDateBegin = @SummaryTrackingDateBegin
                ,@SummaryTrackingDateEnd = @SummaryTrackingDateEnd
                ,@AccountingCurrencyAmount = @AccountingCurrencyAmount_cur
                ,@PrimaryLedger = @PrimaryLedger_cur
                ,@BudgetControlRule = @BudgetControlRule_cur
                ,@MaxCarryForward = @MaxCarryForward_cur
                ,@IsSimulation = @IsSimulation_cur
                ,@BudgetControlLedgerDimension = @BudgetControlLedgerDimension_cur
                ,@ThresholdRate = @ThresholdRate_rule_cur
                ,@OverbudgetOption = @OverbudgetOption_rule_cur
                ,@IsOverrunApproved = @IsOverrunApproved_cur
                ,@WarnOnOverbudgetThreshold = @WarnOnOverbudgetThreshold_cur
                ,@BudgetModelID = @BudgetCycleBudgetModelID_rule_cur
                ,@BudgetModelType = @BudgetCycleBudgetModelType_rule_cur
                ,@BudgetModelSubModelID = @BudgetCycleBudgetModelSubModelID_rule_cur
                ,@BudgetModelDataAreaID = @BudgetCycleBudgetModelDataAreaId_rule_cur
                ,@IsAnySummarized = @IsAnySummarized
                ,@AccountingCurrencyAmountOverRemaining = @AccountingCurrencyAmountOverRemaining_rule_cur OUTPUT
                ,@AccountingCurrencyAmountOverThreshold = @AccountingCurrencyAmountOverThreshold_rule_cur OUTPUT
                ,@CheckResult = @CheckResult_rule_upd OUTPUT
                ,@CheckResultErrorWarning = @CheckResultErrorWarning_rule_upd OUTPUT
                ,@CheckResultErrorWarningType = @CheckResultErrorWarningType_rule_upd OUTPUT
                ,@ReturnMsg = @BudgetControlCalculateAvailableFundsProcReturnMsg OUTPUT
                ,@logErrorFl = @logErrorFl
                --<PubSect>
                ,@Category = @Category_cur
                --</PubSect>
                ,@BudgetControlProcessingHeader = @BudgetControlProcessingHeader
                ,@ProcessingLogEventLevel = @ProcessingLogEventLevel
            ;

            IF (@RetCode < 0)
                BEGIN
                    SELECT @ErrorTrying = @ErrorTrying + N': call BudgetControlCalculateAvailableFundsProc failed with message: ' + @BudgetControlCalculateAvailableFundsProcReturnMsg;
                    GOTO lblErrorTrap;
                END;

            IF (@BudgetGroupMember_cur <> 0
                AND (
                        (@OverbudgetGroupCheckOption_rule_cur = @_GROUPCHECKOPTION_Perform)
                        OR
                        (@OverbudgetGroupCheckOption_rule_cur = @_GROUPCHECKOPTION_Prevent
                            AND @CheckResult_rule_upd <> @_CHECKRESULT_Failed)
                    )
                )
              BEGIN -- budget check for budget group

                EXEC @RetCode = [BudgetControlGetSummaryDatesProc]
                     @PartitionId = @PartitionId
                    ,@Interval = @Interval_group_cur
                    ,@BudgetCycle = @BudgetCycle_group_cur
                    ,@TrackingDate = @TrackingDate_cur
                    ,@SummaryTrackingDateBegin = @SummaryTrackingDateBegin OUTPUT
                    ,@SummaryTrackingDateEnd = @SummaryTrackingDateEnd OUTPUT
                    ,@ReturnMsg = @BudgetControlGetSummaryDatesProcReturnMsg OUTPUT
                ;
        
                IF (@RetCode < 0)
                BEGIN
                    SELECT @ErrorTrying = @ErrorTrying + N': call @BudgetControlGetSummaryDatesProc failed with message: ' + @BudgetControlGetSummaryDatesProcReturnMsg;
                    GOTO lblErrorTrap;
                END;

                IF @SummaryTrackingDateBegin IS NULL
                OR @SummaryTrackingDateEnd IS NULL
                  BEGIN
                    SELECT @ErrorTrying = N'Failed to obtain summary date boundaries for '
                                        + CASE
                                            WHEN @IsRelieved_cur = 0
                                              THEN N'BudgetSourceTrackingDetail.RecId='
                                                   + CAST(@BudgetSourceTrackingDetail_cur AS NVARCHAR)
                                            ELSE N'BudgetSourceTrackingRelievingDetail.RecId='
                                                   + CAST(@BudgetSourceTrackingRelievingDetail_cur AS NVARCHAR)
                                          END
                                        + N' using BudgetGroupMember=' + CAST(@BudgetGroupMember_cur AS NVARCHAR)
                    GOTO lblErrorTrap;
                  END;

                EXEC @RetCode = [BudgetControlCalculateAvailableFundsProc]
                     @PartitionId = @PartitionId
                    ,@SummaryTrackingDateBegin = @SummaryTrackingDateBegin
                    ,@SummaryTrackingDateEnd = @SummaryTrackingDateEnd
                    ,@AccountingCurrencyAmount = @AccountingCurrencyAmount_cur
                    ,@PrimaryLedger = @PrimaryLedger_cur
                    ,@BudgetGroup = @BudgetGroup_cur
                    ,@MaxCarryForward = @MaxCarryForward_cur
                    ,@IsSimulation = @IsSimulation_cur
                    ,@ThresholdRate = @ThresholdRate_group_cur
                    ,@OverbudgetOption = @OverbudgetOption_group_cur
                    ,@IsOverrunApproved = @IsOverrunApproved_cur
                    ,@WarnOnOverBudgetThreshold = @WarnOnOverbudgetThreshold_cur
                    ,@BudgetModelID = @BudgetCycleBudgetModelID_rule_cur
                    ,@BudgetModelType = @BudgetCycleBudgetModelType_rule_cur
                    ,@BudgetModelSubModelID = @BudgetCycleBudgetModelSubModelID_rule_cur
                    ,@BudgetModelDataAreaID = @BudgetCycleBudgetModelDataAreaId_rule_cur
                    ,@IsAnySummarized = @IsAnySummarized
                    ,@AccountingCurrencyAmountOverRemaining = @AccountingCurrencyAmountOverRemaining_group_cur OUTPUT
                    ,@AccountingCurrencyAmountOverThreshold = @AccountingCurrencyAmountOverThreshold_group_cur OUTPUT
                    ,@CheckResult = @CheckResult_group_upd OUTPUT
                    ,@CheckResultErrorWarning = @CheckResultErrorWarning_group_upd OUTPUT
                    ,@CheckResultErrorWarningType = @CheckResultErrorWarningType_group_upd OUTPUT
                    ,@ReturnMsg = @BudgetControlCalculateAvailableFundsProcReturnMsg OUTPUT
                    ,@logErrorFl = @logErrorFl
                    --<PubSect>
                    ,@Category = @Category_cur
                    --</PubSect>
                    ,@BudgetControlProcessingHeader = @BudgetControlProcessingHeader
                    ,@ProcessingLogEventLevel = @ProcessingLogEventLevel
                ;

                IF (@RetCode < 0)
                BEGIN
                    SELECT @ErrorTrying = @ErrorTrying + N': call BudgetControlCalculateAvailableFundsProc failed with message: ' + @BudgetControlCalculateAvailableFundsProcReturnMsg;
                    GOTO lblErrorTrap;
                END;

                IF @CheckResult_rule_upd = @_CHECKRESULT_Failed
                  AND @CheckResult_group_upd = @_CHECKRESULT_Passed
                    BEGIN
                        SELECT @CheckResult_rule_upd = @_CHECKRESULT_PassedWithWarnings;
                        SET @LogMessage = 'Group check passed - check result updated';
                        EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId
                    END;
              END; -- budget check for budget group

            -- Process IsOverrunApproved Rule
            IF @CheckResult_rule_upd = @_CHECKRESULT_Failed
                AND @IsOverrunApproved_cur = 1
                BEGIN
                    SET @CheckResult_rule_upd = @_CHECKRESULT_PassedWithWarnings;
                    
                    IF @CheckResultErrorWarning_rule_upd IN (@_ERRORWARNING_BudgetAvailExceededUnderThreshAllowed
                                                            ,@_ERRORWARNING_BudgetFundsAvailableExceeded
                                                            ,@_ERRORWARNING_BudgetFundsAvailableExceededAllowed)
                        BEGIN
                            SET @CheckResultErrorWarning_rule_upd = @_ERRORWARNING_BudgetFundsAvailableExceededApproved;
                        END
                    ELSE IF @CheckResultErrorWarning_rule_upd IN (@_ERRORWARNING_BudgetThresholdExceeded
                                                            ,@_ERRORWARNING_BudgetThresholdExceededAllowed)
                        BEGIN
                            SET @CheckResultErrorWarning_rule_upd = @_ERRORWARNING_BudgetThresholdExceededApproved;
                        END

                    SET @LogMessage = 'Rule - IsOverrunApproved = 1 - CheckResultErrorWarning_rule_upd = ' + CAST(@CheckResultErrorWarning_rule_upd as VARCHAR(2));
                    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

                END;
      
            -- Process IsOverrunApproved Group
            IF @CheckResult_group_upd = @_CHECKRESULT_Failed
                AND @IsOverrunApproved_cur = 1
                BEGIN
                    SET @CheckResult_group_upd = @_CHECKRESULT_PassedWithWarnings;
                    IF @CheckResultErrorWarning_group_upd IN (@_ERRORWARNING_BudgetAvailExceededUnderThreshAllowed
                                                            ,@_ERRORWARNING_BudgetFundsAvailableExceeded
                                                            ,@_ERRORWARNING_BudgetFundsAvailableExceededAllowed)
                        BEGIN
                            SET @CheckResultErrorWarning_group_upd = @_ERRORWARNING_BudgetFundsAvailableExceededApproved;
                        END
                    ELSE IF @CheckResultErrorWarning_group_upd IN (@_ERRORWARNING_BudgetThresholdExceeded
                                                            ,@_ERRORWARNING_BudgetThresholdExceededAllowed)
                        BEGIN
                            SET @CheckResultErrorWarning_group_upd = @_ERRORWARNING_BudgetThresholdExceededApproved;
                        END

                    SET @LogMessage = 'Group - IsOverrunApproved = 1 - CheckResultErrorWarning_group_upd = ' + CAST(@CheckResultErrorWarning_group_upd as VARCHAR(2));
                    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

                END;

            IF (@CheckResult_group_upd = @_CHECKRESULT_Failed
                    OR (@CheckResult_group_upd = 0 AND @CheckResult_rule_upd = @_CHECKRESULT_Failed)
               )
              BEGIN

                SELECT  @IsAnyFailed = 1
                        ,@IsBudgetSourceFailed_cur = 1
                        ,@IsSummarized_upd = 0;
                SET @LogMessage = 'Check failed ID ' + CAST(@ID_Cur as VARCHAR(32));
                EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

              END;
            ELSE
              BEGIN
                SELECT  @IsSummarized_upd = 1
                
                SET @LogMessage = 'Summarizing ID ' + CAST(@ID_Cur as VARCHAR(32));
                EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

                EXEC @RetCode = [BudgetControlUpdateTrackingSummaryProc]
                     @PartitionId = @PartitionId
                    ,@TrackingDate = @TrackingDate_cur
                    ,@PrimaryLedger = @PrimaryLedger_cur
                    ,@BudgetControlLedgerDimension = @BudgetControlLedgerDimension_Cur
                    ,@AccountingCurrencyAmount = @AccountingCurrencyAmount_cur
                    ,@IsDraft = @IsDraft_cur
                    ,@IsSimulation = @IsSimulation_cur
                    ,@IsCarryForward = @IsCarryForward_cur
                    ,@IntegratorType = @IntegratorType_cur
                    ,@BudgetModelID = @BudgetModelID_cur
                    ,@BudgetModelSubModelID = @BudgetModelSubModelID_cur
                    ,@BudgetModelType = @BudgetModelType_cur
                    ,@BudgetModelDataAreaID = @BudgetModelDataAreaId_cur
                    ,@logErrorFl = @logErrorFl
                    --<PubSect>
                    ,@Category = @Category_cur
                    --</PubSect>
                    ,@ReturnMsg = @BudgetControlUpdateTrackingSummaryProcReturnMsg OUTPUT
                ;

                IF (@RetCode < 0)
                    BEGIN
                        SELECT @ErrorTrying = @ErrorTrying + N': call BudgetControlUpdateTrackingSummaryProc failed with message: ' + @BudgetControlUpdateTrackingSummaryProcReturnMsg;
                        GOTO lblErrorTrap;
                    END;
              END;
          END;  --check budget

        BEGIN TRY -- update #BSTDStage
            UPDATE #BSTDStage
                SET [IsBudgetSourceFailed] = @IsBudgetSourceFailed_cur
                    ,[IsSummarized] = @IsSummarized_upd
                    ,[IsProcessed] = 1
                    ,[AccountingCurrencyAmountOverThreshold_rule] = @AccountingCurrencyAmountOverThreshold_rule_cur
                    ,[AccountingCurrencyAmountOverRemaining_rule] = @AccountingCurrencyAmountOverRemaining_rule_cur
                    ,[AccountingCurrencyAmountOverThreshold_group] = @AccountingCurrencyAmountOverThreshold_group_cur
                    ,[AccountingCurrencyAmountOverRemaining_group] = @AccountingCurrencyAmountOverRemaining_group_cur
                    ,[CheckResult_rule] = @CheckResult_rule_upd
                    ,[CheckResultErrorWarningType_rule] = @CheckResultErrorWarningType_rule_upd
                    ,[CheckResultErrorWarning_rule] = @CheckResultErrorWarning_rule_upd
                    ,[CheckResult_group] = @CheckResult_group_upd
                    ,[CheckResultErrorWarningType_group] = @CheckResultErrorWarningType_group_upd
                    ,[CheckResultErrorWarning_group] = @CheckResultErrorWarning_group_upd
            WHERE [ID] = @ID_cur;

            IF @IsAnySummarized = 0
              BEGIN
                SELECT @IsAnySummarized = @IsSummarized_upd
              END;

        END TRY
        BEGIN CATCH
            SELECT   @Error_Number     = ERROR_NUMBER()
                    ,@Error_Line       = ERROR_LINE()
                    ,@Error_State      = ERROR_STATE()
                    ,@Error_Severity   = ERROR_SEVERITY()
                    ,@Error_Procedure  = ERROR_PROCEDURE()
                    ,@ErrorMessage     = ERROR_MESSAGE();
            SELECT   @ErrorTrying = 'UPDATE #BSTDStage failed for BudgetSourceTrackingDetail = '
                                    + CASE
                                        WHEN @IsRelieved_cur = 0
                                          THEN CAST(@BudgetSourceTrackingDetail_cur AS NVARCHAR)
                                        ELSE CAST(@BudgetSourceTrackingRelievingDetail_cur AS NVARCHAR)
                                      END
            ;

            GOTO lblErrorTrap;
        END CATCH; -- update #BSTDStage

        IF  @IsAnyFailed = 1
        AND EXISTS
            (   SELECT TOP 1 1
                FROM    #BSTDStage
                WHERE   [BudgetSource] = @BudgetSource_Cur
                AND     [IsBudgetSourceFailed] = 1
            )
        AND NOT EXISTS
            (   SELECT TOP 1 1
                FROM    #BSTDStage
                WHERE   [BudgetSource] = @BudgetSource_Cur
                AND     [IsProcessed] = 0
            )
          BEGIN
            BEGIN TRY
                SET @LogMessage = 'Partial failure revert - Start';
                EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

                -- It's possible that some BSTD amounts were successfully summarized for this budget source.
                -- Revert any summarized amounts since this budget source has failed.
                -- Do not revert any amounts to be deleted since those should continue to be summarized.
                -- For example, the case when a new failing BST replaces an old valid BST. The valid BST must be summarized since it will be deleted.
                DECLARE SummarizedAmountsForBudgetSource CURSOR FAST_FORWARD
                FOR
                SELECT  t.[TrackingDate]
                        ,t.[PrimaryLedger]
                        ,t.[BudgetControlLedgerDimension]
                        ,t.[AccountingcurrencyAmount]
                        ,t.[IsDraft]
                        ,t.[IsSimulation]
                        ,t.[IsCarryForward]
                        ,t.[IntegratorType]
                        ,t.[BudgetModelID]
                        ,t.[BudgetModelSubModelID]
                        ,t.[BudgetModelType]
                        ,t.[BudgetModelDataAreaId]
                        ,t.[Category]
                FROM #BSTDStage t
                WHERE t.BudgetSource = @BudgetSource_cur AND t.IsSummarized = 1 AND t.IsDeletePending = 0

                OPEN SummarizedAmountsForBudgetSource
                FETCH NEXT FROM SummarizedAmountsForBudgetSource
                INTO	@TrackingDate_revert
                        ,@PrimaryLedger_revert
                        ,@BudgetControlLedgerDimension_revert
                        ,@AccountingCurrencyAmount_revert
                        ,@IsDraft_revert
                        ,@IsSimulation_revert
                        ,@IsCarryForward_revert
                        ,@IntegratorType_revert
                        ,@BudgetModelID_revert
                        ,@BudgetModelSubModelID_revert
                        ,@BudgetModelType_revert
                        ,@BudgetModelDataAreaId_revert
                        ,@Category_revert

                WHILE @@FETCH_STATUS = 0
                BEGIN
                    SET @AccountingCurrencyAmount_revert = (@AccountingCurrencyAmount_revert * -1);
                    SET @LogMessage = 'Revert ' + CAST(@AccountingCurrencyAmount_revert AS VARCHAR(40));
                    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId


                    -- Revert any amounts that were summarized previously
                    EXEC @RetCode = [BudgetControlUpdateTrackingSummaryProc]
                         @PartitionId = @PartitionId
                        ,@TrackingDate = @TrackingDate_revert
                        ,@PrimaryLedger = @PrimaryLedger_revert
                        ,@BudgetControlLedgerDimension = @BudgetControlLedgerDimension_revert
                        ,@AccountingCurrencyAmount = @AccountingCurrencyAmount_revert
                        ,@IsDraft = @IsDraft_revert
                        ,@IsSimulation = @IsSimulation_revert
                        ,@IsCarryForward = @IsCarryForward_revert
                        ,@IntegratorType = @IntegratorType_revert
                        ,@BudgetModelID = @BudgetModelID_revert
                        ,@BudgetModelSubModelID = @BudgetModelSubModelID_revert
                        ,@BudgetModelType = @BudgetModelType_revert
                        ,@BudgetModelDataAreaID = @BudgetModelDataAreaId_revert
                        ,@logErrorFl = @logErrorFl
                        --<PubSect>
                        ,@Category = @Category_revert
                        --</PubSect>
                        ,@ReturnMsg = @BudgetControlUpdateTrackingSummaryProcReturnMsg OUTPUT
                    ;

                    IF (@RetCode < 0)
                        BEGIN
                            SELECT @ErrorTrying = @ErrorTrying + N': call BudgetControlUpdateTrackingSummaryProc failed with message: ' + @BudgetControlUpdateTrackingSummaryProcReturnMsg;
                            GOTO lblErrorTrap;
                        END;

                    FETCH NEXT FROM SummarizedAmountsForBudgetSource
                    INTO @TrackingDate_revert
                        ,@PrimaryLedger_revert
                        ,@BudgetControlLedgerDimension_revert
                        ,@AccountingCurrencyAmount_revert
                        ,@IsDraft_revert
                        ,@IsSimulation_revert
                        ,@IsCarryForward_revert
                        ,@IntegratorType_revert
                        ,@BudgetModelID_revert
                        ,@BudgetModelSubModelID_revert
                        ,@BudgetModelType_revert
                        ,@BudgetModelDataAreaId_revert
                        ,@Category_revert
                END;

                CLOSE SummarizedAmountsForBudgetSource;
                DEALLOCATE SummarizedAmountsForBudgetSource;

                -- Set all records associated to a failed budget source as failed and not summarized once all records are processed.
                UPDATE  #BSTDStage
                SET     [IsBudgetSourceFailed] = 1
                        ,[IsSummarized] = [IsDeletePending] -- unwind deleted rows from summary on failed BudgetSource
                WHERE   [BudgetSource] = @BudgetSource_Cur
                ;

                IF @IsAnySummarized = 1
                AND NOT EXISTS
                    (   SELECT  TOP 1 1
                        FROM    #BSTDStage
                        WHERE   [IsSummarized] = 1
                    )
                    BEGIN
                        -- Reset @IsAnySummarized as there are no longer any summarized records.
                        SELECT @IsAnySummarized = 0
                        ;
                    END;

                SET @LogMessage = 'Partial failure revert - End';
                EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

            END TRY
            BEGIN CATCH
                SELECT   @Error_Number     = ERROR_NUMBER()
                        ,@Error_Line       = ERROR_LINE()
                        ,@Error_State      = ERROR_STATE()
                        ,@Error_Severity   = ERROR_SEVERITY()
                        ,@Error_Procedure  = ERROR_PROCEDURE()
                        ,@ErrorMessage     = ERROR_MESSAGE();
                SELECT   @ErrorTrying = N'Update #BSTDStage for any failed BudgetSource';
                GOTO lblErrorTrap;
            END CATCH;
          END;

        SELECT @i = @i + 2;

     END; -- budget check loop

    END TRY
    BEGIN CATCH
            SELECT   @Error_Number     = ERROR_NUMBER()
                    ,@Error_Line       = ERROR_LINE()
                    ,@Error_State      = ERROR_STATE()
                    ,@Error_Severity   = ERROR_SEVERITY()
                    ,@Error_Procedure  = ERROR_PROCEDURE()
                    ,@ErrorMessage     = ERROR_MESSAGE();
            GOTO lblErrorTrap;
    END CATCH;

    --=====
    --Revert NonBFA amounts.
    --=====
    CREATE TABLE #BSTDStageToRevert (ID INT, IsChecked bit);

    IF @IsTrackBudgetFundsAvailableOnlyEnabled = 1
    AND EXISTS
    (   SELECT TOP 1 1
        FROM    #BSTDStage
        WHERE IsSummarized = 1 AND IsDeletePending = 0 and IsUntrackedBudgetFundsAvailable = 1 and IsBudgetSourceFailed != 1
    )
    BEGIN
        SET @LogMessage = 'BFA Only revert - Start';
        EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

        /*
            Temp table is to reduce duplicate where clauses since we are reading/updating the same records multiple times.
                -- IsSummarized = 1 - we only care if it has already been added to summary in the first place
                -- IsDeletePending = 0 - Do not revert amounts that were intended to be deleted - they are supposed to be summarized.
                -- IsUntrackedBudgetFundsAvailable = 1 - If an amount does not affect budget funds available, then it should be reverted and deleted.
                -- IsBudgetSourceFailed != 1 - Do not revert any failed records - these have already been reverted above, if needed. The BST and BSTD records will be deleted based on IsBudgetSourceFailed.
                -- IsChecked - since we will be setting IsDeletePending = 1, that will affect the IsChecked calculation. Store the current value to determine if it was originally meant to be checked.
        */
        INSERT INTO #BSTDStageToRevert (ID, IsChecked)
        SELECT ID, IsChecked FROM #BSTDStage
        WHERE IsSummarized = 1 AND IsDeletePending = 0 and IsUntrackedBudgetFundsAvailable = 1 and IsBudgetSourceFailed != 1

        BEGIN TRY
            /*
                Revert all previously summarized amounts that are NonBFA.
            */
            DECLARE SummarizedAmountsForBudgetSource CURSOR FAST_FORWARD
            FOR
            SELECT  t.[TrackingDate]
                    ,t.[PrimaryLedger]
                    ,t.[BudgetControlLedgerDimension]
                    ,SUM(t.[AccountingcurrencyAmount])
                    ,t.[IsDraft]
                    ,t.[IsSimulation]
                    ,t.[IsCarryForward]
                    ,t.[IntegratorType]
                    ,t.[BudgetModelID]
                    ,t.[BudgetModelSubModelID]
                    ,t.[BudgetModelType]
                    ,t.[BudgetModelDataAreaId]
                    ,t.[Category]
            FROM #BSTDStage t
            JOIN #BSTDStageToRevert r on r.ID = t.ID
            GROUP BY t.[TrackingDate]
                    ,t.[PrimaryLedger]
                    ,t.[BudgetControlLedgerDimension]
                    ,t.[IsDraft]
                    ,t.[IsSimulation]
                    ,t.[IsCarryForward]
                    ,t.[IntegratorType]
                    ,t.[BudgetModelID]
                    ,t.[BudgetModelSubModelID]
                    ,t.[BudgetModelType]
                    ,t.[BudgetModelDataAreaId]
                    ,t.[Category]

            OPEN SummarizedAmountsForBudgetSource
            FETCH NEXT FROM SummarizedAmountsForBudgetSource
            INTO	@TrackingDate_revert
                    ,@PrimaryLedger_revert
                    ,@BudgetControlLedgerDimension_revert
                    ,@AccountingCurrencyAmount_revert
                    ,@IsDraft_revert
                    ,@IsSimulation_revert
                    ,@IsCarryForward_revert
                    ,@IntegratorType_revert
                    ,@BudgetModelID_revert
                    ,@BudgetModelSubModelID_revert
                    ,@BudgetModelType_revert
                    ,@BudgetModelDataAreaId_revert
                    ,@Category_revert

            WHILE @@FETCH_STATUS = 0
            BEGIN
                SET @AccountingcurrencyAmount_revert = (@AccountingcurrencyAmount_revert * -1);
                SET @LogMessage = 'Revert ' + CAST(@AccountingCurrencyAmount_revert AS VARCHAR(40));
                EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

                -- Revert any amounts that were summarized previously
                EXEC @RetCode = [BudgetControlUpdateTrackingSummaryProc]
                        @PartitionId = @PartitionId
                    ,@TrackingDate = @TrackingDate_revert
                    ,@PrimaryLedger = @PrimaryLedger_revert
                    ,@BudgetControlLedgerDimension = @BudgetControlLedgerDimension_revert
                    ,@AccountingCurrencyAmount = @AccountingCurrencyAmount_revert
                    ,@IsDraft = @IsDraft_revert
                    ,@IsSimulation = @IsSimulation_revert
                    ,@IsCarryForward = @IsCarryForward_revert
                    ,@IntegratorType = @IntegratorType_revert
                    ,@BudgetModelID = @BudgetModelID_revert
                    ,@BudgetModelSubModelID = @BudgetModelSubModelID_revert
                    ,@BudgetModelType = @BudgetModelType_revert
                    ,@BudgetModelDataAreaID = @BudgetModelDataAreaId_revert
                    ,@logErrorFl = @logErrorFl
                    --<PubSect>
                    ,@Category = @Category_revert
                    --</PubSect>
                    ,@ReturnMsg = @BudgetControlUpdateTrackingSummaryProcReturnMsg OUTPUT
                ;
            

                IF (@RetCode < 0)
                BEGIN
                    SELECT @ErrorTrying = @ErrorTrying + N': call BudgetControlUpdateTrackingSummaryProc failed with message: ' + @BudgetControlUpdateTrackingSummaryProcReturnMsg;
                    GOTO lblErrorTrap;
                END;

                FETCH NEXT FROM SummarizedAmountsForBudgetSource
                INTO @TrackingDate_revert
                    ,@PrimaryLedger_revert
                    ,@BudgetControlLedgerDimension_revert
                    ,@AccountingCurrencyAmount_revert
                    ,@IsDraft_revert
                    ,@IsSimulation_revert
                    ,@IsCarryForward_revert
                    ,@IntegratorType_revert
                    ,@BudgetModelID_revert
                    ,@BudgetModelSubModelID_revert
                    ,@BudgetModelType_revert
                    ,@BudgetModelDataAreaId_revert
                    ,@Category_revert
            END;

            CLOSE SummarizedAmountsForBudgetSource;
            DEALLOCATE SummarizedAmountsForBudgetSource;

            UPDATE BST
            SET ISDELETEPENDING = 1
            FROM BUDGETSOURCETRACKING BST
            WHERE EXISTS
            (
                SELECT 'X'
                FROM #BSTDStage t
                JOIN #BSTDStageToRevert r on r.ID = t.ID
                WHERE t.BudgetSourceTracking = BST.RECID
            )

            -- Update all BSTD and BSTRD records to IsDeletePending so they get deleted later
            UPDATE t
            SET IsDeletePending = 1
            FROM #BSTDStage t
            JOIN #BSTDStageToRevert r on r.ID = t.ID
                
        END TRY
        BEGIN CATCH
            SELECT   @Error_Number     = ERROR_NUMBER()
                    ,@Error_Line       = ERROR_LINE()
                    ,@Error_State      = ERROR_STATE()
                    ,@Error_Severity   = ERROR_SEVERITY()
                    ,@Error_Procedure  = ERROR_PROCEDURE()
                    ,@ErrorMessage     = ERROR_MESSAGE();
            SELECT @ErrorTrying = @ErrorTrying + N'Error reverting NonBFA amounts'
            GOTO lblErrorTrap;
        END CATCH;

        SET @LogMessage = 'BFA Only revert - END';
        EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId
    END;

    IF @ProcessingLogEventLevel != 0
       AND @BudgetControlProcessingHeader != 0
    BEGIN
        INSERT INTO [dbo].[BUDGETCONTROLPROCESSINGDETAIL]
                (
                [BUDGETCONTROLPROCESSINGHEADER]
                ,[ID]
                ,[IsRelieved]
                ,[BudgetSourceTrackingDetail]
                ,[BudgetSourceTrackingRelievingDetail]
                ,[BudgetSourceTracking]
                ,[BudgetSource]
                ,[BudgetCheckGroupSequence]
                ,[IsSummarized]
                ,[IntegratorType]
                ,[Status]
                ,[Category]
                ,[TrackingDate]
                ,[TrackingNumber]
                ,[PrimaryLedger]
                ,[BudgetSourceLedgerDimension]
                ,[BudgetControlLedgerDimension]
                ,[AccountingCurrencyAmount]
                ,[IsReturnOfBudgetFunds]
                ,[IsCarryForward]
                ,[IsDeletePending]
                ,[IsProcessed]
                ,[BudgetControlRule]
                ,[BudgetGroupMember]
                ,[IsOverrunApproved]
                ,[AccountingCurrencyAmountOverThresholdRule]
                ,[AccountingCurrencyAmountOverRemainingRule]
                ,[CheckResultRule]
                ,[CheckResultErrorWarningRule]
                ,[AccountingCurrencyAmountOverThresholdGroup]
                ,[AccountingCurrencyAmountOverRemainingGroup]
                ,[CheckResultGroup]
                ,[CheckResultErrorWarningGroup]
                ,[IsBudgetSourceFailed]
                ,[IsChecked]
                ,[IsUntrackedBudgetFundsAvailable]
                ,[Partition]
                )
        SELECT
            @BudgetControlProcessingHeader
            ,COALESCE([ID], 0)
            ,COALESCE([IsRelieved], 0)
            ,COALESCE([BudgetSourceTrackingDetail], 0)
            ,COALESCE([BudgetSourceTrackingRelievingDetail], 0)
            ,COALESCE([BudgetSourceTracking], 0)
            ,COALESCE([BudgetSource], 0)
            ,COALESCE([BudgetCheckGroupSequence], 0)
            ,COALESCE([IsSummarized], 0)
            ,COALESCE([IntegratorType], 0)
            ,COALESCE([Status], 0)
            ,COALESCE([Category], 0)
            ,COALESCE([TrackingDate], '1900-01-01 00:00:00.000')
            ,COALESCE([TrackingNumber], '')
            ,COALESCE([PrimaryLedger], 0)
            ,COALESCE([BudgetSourceLedgerDimension], 0)
            ,COALESCE([BudgetControlLedgerDimension], 0)
            ,COALESCE([AccountingCurrencyAmountOrig], 0)
            ,COALESCE([IsReturnOfBudgetFunds], 0)
            ,COALESCE([IsCarryForward], 0)
            ,COALESCE([IsDeletePending], 0)
            ,COALESCE([IsProcessed], 0)
            ,COALESCE([BudgetControlRule], 0)
            ,COALESCE([BudgetGroupMember], 0)
            ,COALESCE([IsOverrunApproved], 0)
            ,COALESCE([AccountingCurrencyAmountOverThreshold_rule], 0)
            ,COALESCE([AccountingCurrencyAmountOverRemaining_rule], 0)
            ,COALESCE([CheckResult_rule], 0)
            ,COALESCE([CheckResultErrorWarning_rule], 0)
            ,COALESCE([AccountingCurrencyAmountOverThreshold_group], 0)
            ,COALESCE([AccountingCurrencyAmountOverRemaining_group], 0)
            ,COALESCE([CheckResult_group], 0)
            ,COALESCE([CheckResultErrorWarning_group], 0)
            ,COALESCE([IsBudgetSourceFailed], 0)
            ,COALESCE([IsChecked], 0)
            ,COALESCE([IsUntrackedBudgetFundsAvailable], 0)
            ,@PartitionId
        FROM #BSTDStage
    END

    --======
    -- Process summary, error/warn
    --======
    BEGIN TRY

        IF @IsAnyDeleted = 0
          BEGIN
            IF EXISTS
                (   SELECT TOP 1 1
                    FROM    #BSTDStage
                    WHERE   [IsDeletePending] = 1
                )
              BEGIN
                SET @IsAnyDeleted = 1
              END
          END;

        IF @IsAnyFailed = 1
          BEGIN
            UPDATE  #BSTDStage
            SET     [Status] = @_STATUS_Draft
            WHERE   [IsRelieved] = 0
            ;
          END;



    BEGIN TRY -- release applock main
    SELECT   @ErrorTrying = N'catch: release applock ' + @_APPLOCKRESOURCE_Main;
    EXEC @RetCode = sp_releaseapplock
        @DBPrincipal = N'public'
        ,@Resource = @_APPLOCKRESOURCE_Main
        ,@LockOwner = N'Transaction'
    ;

    IF @RetCode < 0
        BEGIN
            SELECT @ErrorTrying = 'release applock ' + @_APPLOCKRESOURCE_Main + ' returned ' + CAST(@RetCode AS NVARCHAR);
            GOTO lblErrorTrap;
        END;

    SELECT @IsApplockHeld_Main = 0;

    END TRY
    BEGIN CATCH
        SELECT   @Error_Number     = ERROR_NUMBER()
                ,@Error_Line       = ERROR_LINE()
                ,@Error_State      = ERROR_STATE()
                ,@Error_Severity   = ERROR_SEVERITY()
                ,@Error_Procedure  = ERROR_PROCEDURE()
                ,@ErrorMessage     = ERROR_MESSAGE();
        GOTO lblErrorTrap;
    END CATCH;  -- release applock main

    --=====
    --Delete IsDeletePending tracking details and relieving details
    --=====
        IF @IsAnyDeleted = 1
        OR @IsAnyFailed = 1
          BEGIN --delete detail

            SELECT   @ErrorTrying = 'DELETE BudgetSourceTrackingDetail';

            DELETE  [BUDGETSOURCETRACKINGDETAIL] WITH (ROWLOCK)
            FROM    [BUDGETSOURCETRACKINGDETAIL] b
            JOIN    #BSTDStage t
                ON      b.[RECID] = t.[BudgetSourceTrackingDetail]
            JOIN    #ResetRecversion rv
                ON      rv.[RecId] = b.[RECID]
                AND     rv.[Table] = 3 --@_TABLE_BudgetSourceTrackingDetail - Numeric value used for performance optimization
                AND     rv.[OrigRecVersion] = b.[RECVERSION]
            WHERE   (t.[IsDeletePending] = 1
                     OR t.[IsBudgetSourceFailed] = 1
                    )
            AND     t.[IsRelieved] = 0
            AND     b.[PARTITION] = @PartitionId
            ;

            IF EXISTS (
                SELECT b.[RECID]
                FROM   [BUDGETSOURCETRACKINGDETAIL] b
                JOIN    #BSTDStage t
                    ON      b.[RECID] = t.[BudgetSourceTrackingDetail]
                JOIN    #ResetRecversion rv
                    ON      rv.[RecId] = b.[RECID]
                    AND     rv.[Table] = 3 --@_TABLE_BudgetSourceTrackingDetail - Numeric value used for performance optimization
                WHERE   (t.[IsDeletePending] = 1
                         OR t.[IsBudgetSourceFailed] = 1
                        )
                AND     t.[IsRelieved] = 0
                AND     b.[RECVERSION] <> rv.[OrigRecVersion]
                AND     b.[PARTITION] = @PartitionId
                )
              BEGIN
                SELECT @ErrorTrying = @ErrorTrying + N':RecVersion Mismatch';
                GOTO lblErrorTrap;
              END;

            IF @IsAnyRelieved = 1
              BEGIN

                SELECT   @ErrorTrying = 'DELETE BudgetSourceTrackingRelievingDetail';

                DELETE  [BUDGETSOURCETRACKINGRELIEVINGDETAIL] WITH (ROWLOCK)
                FROM    [BUDGETSOURCETRACKINGRELIEVINGDETAIL] b
                JOIN    #BSTDStage t
                    ON      b.[RECID] = t.[BudgetSourceTrackingRelievingDetail]
                JOIN    #ResetRecversion rv
                    ON      rv.[RecId] = b.[RECID]
                    AND     rv.[Table] = 4 --@_TABLE_BudgetSourceTrackingRelievingDetail - Numeric value used for performance optimization
                    AND     rv.[OrigRecVersion] = b.[RECVERSION]
                WHERE   (t.[IsDeletePending] = 1
                         OR t.[IsBudgetSourceFailed] = 1
                        )
                AND     t.[IsRelieved] = 1
                AND     b.[PARTITION] = @PartitionId
                ;

                IF EXISTS (
                    SELECT b.[RECID]
                    FROM    [BUDGETSOURCETRACKINGRELIEVINGDETAIL] b
                    JOIN    #BSTDStage t
                        ON      b.[RECID] = t.[BudgetSourceTrackingRelievingDetail]
                    JOIN    #ResetRecversion rv
                        ON      rv.[RecId] = b.[RECID]
                        AND     rv.[Table] = 4 --@_TABLE_BudgetSourceTrackingRelievingDetail - Numeric value used for performance optimization
                    WHERE   (t.[IsDeletePending] = 1
                             OR t.[IsBudgetSourceFailed] = 1
                            )
                    AND     t.[IsRelieved] = 1
                    AND     rv.[OrigRecVersion] <> b.[RECVERSION]
                    AND     b.[PARTITION] = @PartitionId
                    )
                  BEGIN
                    SELECT @ErrorTrying = @ErrorTrying + N':RecVersion Mismatch';
                    GOTO lblErrorTrap;
                  END;

              END;
          END; -- delete detail

    --=====
    --Reset the tracking detail after budget check has been performed
    --=====

        SELECT   @ErrorTrying = 'UPDATE BudgetSourceTrackingDetail';
        SELECT  @ModifiedDateTime = GETUTCDATE();

        UPDATE  [BUDGETSOURCETRACKINGDETAIL] WITH (ROWLOCK)
        SET      [BUDGETCONTROLRULE] = @BudgetControlRule_reset
            ,[BUDGETGROUPMEMBER] = @BudgetGroupMember_reset
            ,[ISSUMMARIZED] = t.[IsSummarized]
            ,[RECVERSION] = COALESCE(rv.[NewRecVersion], -1)
            ,[MODIFIEDBY] = @Trackinguser_cur
            ,[MODIFIEDDATETIME] = @ModifiedDateTime
        FROM    [BUDGETSOURCETRACKINGDETAIL] b
        JOIN    #BSTDStage t
            ON      b.[RECID] = t.[BudgetSourceTrackingDetail]
        LEFT JOIN    #ResetRecversion rv
            ON      b.[RECID] = rv.[RecId]
            AND     rv.[Table] = 3 -- @_TABLE_BudgetSourceTrackingDetail - Numeric value used for performance optimization
            AND     rv.[OrigRecVersion] = b.[RECVERSION]
        WHERE   t.[IsRelieved] = 0
            AND b.[PARTITION] = @PartitionId
        ;

        IF EXISTS (
            SELECT TOP 1 bstd.[RECID]
            FROM    [BUDGETSOURCETRACKINGDETAIL] bstd
            JOIN    #BSTDStage t
                ON      bstd.[RECID] = t.[BudgetSourceTrackingDetail]
            WHERE   t.[IsRelieved] = 0
            AND     t.[IsDeletePending] = 0
            AND     bstd.[RECVERSION] = -1
            AND     bstd.[PARTITION] = @PartitionId
            )
          BEGIN
            SELECT @ErrorTrying = @ErrorTrying + N':RecVersion mismatch';
            GOTO lblErrorTrap;
          END;

        IF @IsAnyRelieved = 1
          BEGIN
            SELECT   @ErrorTrying = 'UPDATE BudgetSourceTrackingRelievingDetail';

            UPDATE  [BUDGETSOURCETRACKINGRELIEVINGDETAIL] WITH (ROWLOCK)
            SET     [ISSUMMARIZED] = t.[IsSummarized]
                ,[RECVERSION] = COALESCE(rv.[NewRecVersion], -1)
                ,[MODIFIEDBY] = @Trackinguser_cur
                ,[MODIFIEDDATETIME] = @ModifiedDateTime
            FROM    [BUDGETSOURCETRACKINGRELIEVINGDETAIL] b %1
            JOIN    #BSTDStage t
                ON      b.[RECID] = t.[BudgetSourceTrackingRelievingDetail]
            LEFT JOIN    #ResetRecversion rv
                ON      b.[RECID] = rv.[RecId]
                AND     rv.[Table] = 4 -- @_TABLE_BudgetSourceTrackingRelievingDetail - Numeric value used for performance optimization
                AND     rv.[OrigRecVersion] = b.[RECVERSION]
            WHERE   t.[IsRelieved] = 1
            AND     b.[PARTITION] = @PartitionId
            ;

            IF EXISTS (
                SELECT TOP 1 bstrd.[RECID]
                FROM    [BUDGETSOURCETRACKINGRELIEVINGDETAIL] bstrd
                JOIN    #BSTDStage t
                    ON      bstrd.[RECID] = t.[BudgetSourceTrackingDetail]
                WHERE   t.[IsRelieved] = 1
                AND     bstrd.[RECVERSION] = -1
                AND     bstrd.[PARTITION] = @PartitionId
                )
              BEGIN
                SELECT @ErrorTrying = @ErrorTrying + N':RecVersion mismatch';
                GOTO lblErrorTrap;
              END;

          END;

    --=====
    --Delete IsDeletePending BudgetSourceTracking
    --No RecVersion checks on DeletePending, as we depend on app to honor
    --=====
        IF @IsAnyDeleted = 1
          BEGIN

            SELECT   @ErrorTrying = 'DELETE BudgetSourceTracking - delete pending';

            IF EXISTS
                (   SELECT  1
                    FROM    [BUDGETSOURCETRACKING] bst
                    WHERE   bst.[ISDELETEPENDING] = 1
                    AND     bst.[RECID] IN
                            (SELECT rv.[RecId]
                             FROM   #ResetRecVersion rv
                             WHERE  rv.[Table] = 2
                            )
                    AND     bst.[PARTITION] = @PartitionId
                )
              BEGIN
                DELETE  [BUDGETSOURCETRACKING] WITH (ROWLOCK)
                FROM    [BUDGETSOURCETRACKING] bst %2
                WHERE   bst.[ISDELETEPENDING] = 1
                AND     bst.[RECID] IN
                            (SELECT rv.[RecId]
                             FROM   #ResetRecVersion rv
                             WHERE  rv.[Table] = 2
                            )
                AND     bst.[PARTITION] = @PartitionId
                ;
              END;
          END;

    -- Added for X++ compiler string limitation
    --" + @"
    --=====
    --Delete BudgetSourceTracking that failed processing
    --=====
        IF @IsAnyFailed = 1
          BEGIN -- begin budget check failure handling
            SELECT   @ErrorTrying = 'DELETE BudgetSourceTracking - delete for failed BudgetSource';

            IF EXISTS
                (   SELECT  1
                    FROM    [BUDGETSOURCETRACKING] bst
                    WHERE   bst.[RECID] IN
                        (SELECT b.[BudgetSourceTracking]
                            FROM   #BSTDStage b
                            WHERE  b.[IsBudgetSourceFailed] = 1
                        )
                        AND     bst.[PARTITION] = @PartitionId
                )
              BEGIN
                DELETE  [BUDGETSOURCETRACKING] WITH (ROWLOCK)
                FROM    [BUDGETSOURCETRACKING] bst
                JOIN    #ResetRecversion rv
                    ON      rv.[RecId] = bst.[RECID]
                    AND     rv.[Table] = 2 --@_TABLE_BudgetSourceTracking - Numeric value used for performance optimization
                    AND     rv.[OrigRecVersion] = bst.[RECVERSION]
                WHERE   bst.[RECID] IN
                    (SELECT b.[BudgetSourceTracking]
                     FROM   #BSTDStage b
                     WHERE  b.[IsBudgetSourceFailed] = 1
                    )
                    AND     bst.[PARTITION] = @PartitionId
                ;

                IF EXISTS (
                    SELECT TOP 1 bst.[RECID]
                    FROM    [BUDGETSOURCETRACKING] bst
                    JOIN    #ResetRecversion rv
                        ON      rv.[RecId] = bst.[RECID]
                        AND     rv.[Table] = 2 --@_TABLE_BudgetSourceTracking - Numeric value used for performance optimization
                    WHERE   bst.[RECID] IN
                        (SELECT b.[BudgetSourceTracking]
                         FROM   #BSTDStage b
                         WHERE  b.[IsBudgetSourceFailed] = 1
                        )
                    AND bst.[PARTITION] = @PartitionId
                    AND rv.[OrigRecVersion] <> bst.[RECVERSION]
                    )
                  BEGIN
                    SELECT @ErrorTrying = @ErrorTrying + N':RecVersion mismatch';
                    GOTO lblErrorTrap;
                  END;

              END;
          END; -- end budget check failure handling

    --=====
    --Delete IsDeletePending BudgetSource
    --=====
        IF @IsAnyDeleted = 1
          BEGIN

            SELECT   @ErrorTrying = 'DELETE BudgetSource';

            DELETE  [BUDGETSOURCE] WITH (ROWLOCK)
            FROM    [BUDGETSOURCE] bs %3
            WHERE   bs.[ISDELETEPENDING] = 1
            AND     bs.[BUDGETCHECKGROUP] = @BUDGETCHECKGROUP
            AND     bs.[PARTITION] = @PartitionId
            AND     bs.[RECID] IN
                        (SELECT     rv.[RecId]
                         FROM       #ResetRecVersion rv
                         WHERE      rv.[Table] = 1
                        )
            ;
          END;

    --=====
    --Delete the old errors/warnings for budget checked BudgetSources
    --=====
        SELECT  @ErrorTrying = N'Delete BudgetCheckResultErrorWarningDetail';

        DELETE  [BUDGETCHECKRESULTERRORWARNINGDETAIL] WITH (ROWLOCK)
        FROM    [BUDGETCHECKRESULTERRORWARNINGDETAIL] e
        WHERE   e.[BUDGETSOURCE] IN
            (   SELECT  rv.[RecId]
                FROM    #ResetRecVersion rv
                WHERE   rv.[Table] = 1
            )
            AND     e.[PARTITION] = @PartitionId
        ;

    --=====
    -- Update BudgetSource with new error warning details, check result, and tracking status
    --=====
        SELECT @ErrorTrying = N'INSERT [BudgetCheckResultErrorWarningDetail]';

        INSERT INTO [BUDGETCHECKRESULTERRORWARNINGDETAIL]
            ( [BUDGETSOURCELEDGERDIMENSION]
            , [BUDGETSOURCE]
            , [ACCOUNTINGCURRENCYAMOUNTOVERTHRESHOLD]
            , [ACCOUNTINGCURRENCYAMOUNTOVERAVAILABLE]
            , [SEQUENCENUMBER]
            , [BUDGETCONTROLLEDGERDIMENSION]
            , [PRIMARYLEDGER]
            , [BUDGETGROUPMEMBER]
            , [CHECKRESULT]
            , [CHECKRESULTERRORWARNINGTYPE]
            , [CHECKRESULTERRORWARNING]
            , [RECVERSION]
            , [PARTITION]
            )
        SELECT   0
                ,t.[BudgetSource]
                ,ABS(t.[AccountingCurrencyAmountOverThreshold_group])
                ,ABS(t.[AccountingCurrencyAmountOverRemaining_group])
                ,s.[SortID]  --sequence, group must be first if present
                ,t.[BudgetControlLedgerDimension]
                ,t.[PrimaryLedger]
                ,t.[BudgetGroupMember]
                ,t.[CheckResult_group]
                ,t.[CheckResultErrorWarningType_group]
                ,t.[CheckResultErrorWarning_group]
                ,1
                ,@PartitionId
        FROM    #BSTDStage t
        JOIN    #BSTDSort s
            ON      t.[ID] = s.[BSTDID]
        WHERE   t.[CheckResult_group] IN (@_CHECKRESULT_Failed, @_CHECKRESULT_PassedWithWarnings)
        AND     t.[BudgetGroupMember] > 0
        UNION ALL
        SELECT   t.[BudgetSourceLedgerDimension]
                ,t.[BudgetSource]
                ,ABS(t.[AccountingCurrencyAmountOverThreshold_rule])
                ,ABS(t.[AccountingCurrencyAmountOverRemaining_rule])
                ,s.[SortID] + 1
                ,t.[BudgetControlLedgerDimension]
                ,t.[PrimaryLedger]
                ,t.[BudgetGroupMember]
                ,t.[CheckResult_rule]
                ,t.[CheckResultErrorWarningType_rule]
                ,CASE   -- Adjust rule error-warning when rule-level check exceeded but group-level check passed
                    WHEN (t.[CheckResultErrorWarning_rule] IN (@_ERRORWARNING_BudgetFundsAvailableExceeded
                                                            ,@_ERRORWARNING_BudgetFundsAvailableExceededAllowed
                                                            ,@_ERRORWARNING_BudgetThresholdExceeded
                                                            ,@_ERRORWARNING_BudgetThresholdExceededAllowed)
                        AND (t.[BudgetGroupMember] > 0
                        AND    t.[CheckResult_group] = @_CHECKRESULT_Passed))
                    THEN @_ERRORWARNING_BudgetFundsRuleOverGroupUnderAvailable
                    ELSE t.[CheckResultErrorWarning_rule]
                 END
                ,1
                ,@PartitionId
        FROM    #BSTDStage t
        JOIN    #BSTDSort s
            ON      t.[ID] = s.[BSTDID]
        WHERE   (t.[CheckResult_rule] IN (@_CHECKRESULT_Failed, @_CHECKRESULT_PassedWithWarnings)
                 OR t.[CheckResult_group] IN (@_CHECKRESULT_Failed, @_CHECKRESULT_PassedWithWarnings)
                )
        ;

    --=====
    -- Update tracking status for budget source and delete tracking details for any budget check failure in the budget check group.
    --=====
        IF @IsAnyFailed = 1
          BEGIN

            SET @ErrorTrying = N'DELETE BudgetSourceTracking for failed detail';

            IF EXISTS
            (   SELECT  1
                FROM    [BUDGETSOURCETRACKING] b
                JOIN    #BSTDStage t
                    ON      b.[RECID] = t.[BudgetSourceTracking]
                WHERE   ((t.[CheckResult_rule] = @_CHECKRESULT_Failed
                         AND t.[BudgetGroupMember] = 0
                        )
                OR      t.[CheckResult_group] = @_CHECKRESULT_Failed)
                AND     b.[PARTITION] = @PartitionId
            )
            BEGIN
                DELETE  [BUDGETSOURCETRACKING] WITH (ROWLOCK)
                FROM    [BUDGETSOURCETRACKING] b
                JOIN    #BSTDStage t
                    ON      b.[RECID] = t.[BudgetSourceTracking]
                JOIN    #ResetRecversion rv
                    ON      rv.[RecId] = b.[RECID]
                    AND     rv.[Table] = 2 --@_TABLE_BudgetSourceTracking - Numeric value used for performance optimization
                    AND     rv.[OrigRecVersion] = b.[RECVERSION]
                WHERE   ((t.[CheckResult_rule] = @_CHECKRESULT_Failed
                         AND t.[BudgetGroupMember] = 0
                        )
                OR      t.[CheckResult_group] = @_CHECKRESULT_Failed)
                AND     b.[PARTITION] = @PartitionId
                ;

                IF EXISTS (
                    SELECT b.[RECID]
                    FROM    [BUDGETSOURCETRACKING] b
                    JOIN    #BSTDStage t
                        ON      b.[RECID] = t.[BudgetSourceTracking]
                    JOIN    #ResetRecversion rv
                        ON      rv.[RecId] = b.[RECID]
                        AND     rv.[Table] = 2 --@_TABLE_BudgetSourceTracking - Numeric value used for performance optimization
                    WHERE   ((t.[CheckResult_rule] = @_CHECKRESULT_Failed
                              AND t.[BudgetGroupMember] = 0
                             )
                             OR t.[CheckResult_group] = @_CHECKRESULT_Failed
                            )
                    AND     b.[PARTITION] = @PartitionId
                    AND rv.[OrigRecVersion] <> b.[RECVERSION]
                    )
                  BEGIN
                    SELECT @ErrorTrying = @ErrorTrying + N':Recversion Mismatch';
                    GOTO lblErrorTrap;
                  END;

            END;

            SET @ErrorTrying = N'DELETE BudgetSourceTrackingDetail for failed';

            DELETE  [BUDGETSOURCETRACKINGDETAIL] WITH (ROWLOCK)
            FROM    [BUDGETSOURCETRACKINGDETAIL] d
            JOIN    #BSTDStage t
                ON      d.[RECID] = t.[BudgetSourceTrackingDetail]
            JOIN    #ResetRecversion rv
                ON      rv.[RecId] = d.[RECID]
                AND     rv.[Table] = 3 --@_TABLE_BudgetSourceTrackingDetail - Numeric value used for performance optimization
                AND     rv.[OrigRecVersion] = d.[RECVERSION]
            WHERE   ((t.[CheckResult_rule] = @_CHECKRESULT_Failed
                      AND t.[BudgetGroupMember] = 0
                     )
                     OR t.[CheckResult_group] = @_CHECKRESULT_Failed
                    )
            AND     d.[PARTITION] = @PartitionId
            AND     t.[IsRelieved] = 0

            IF EXISTS (
                SELECT d.[RECID]
                FROM    [BUDGETSOURCETRACKINGDETAIL] d
                JOIN    #BSTDStage t
                    ON      d.[RECID] = t.[BudgetSourceTrackingDetail]
                JOIN    #ResetRecversion rv
                    ON      rv.[RecId] = d.[RECID]
                    AND     rv.[Table] = 3 --@_TABLE_BudgetSourceTrackingDetail - Numeric value used for performance optimization
                WHERE   ((t.[CheckResult_rule] = @_CHECKRESULT_Failed
                          AND t.[BudgetGroupMember] = 0
                         )
                         OR t.[CheckResult_group] = @_CHECKRESULT_Failed
                        )
                AND     d.[PARTITION] = @PartitionId
                AND     t.[IsRelieved] = 0
                AND     rv.[OrigRecVersion] <> d.[RECVERSION]
                )
              BEGIN
                SELECT @ErrorTrying = @ErrorTrying + N':Recversion Mismatch';
                GOTO lblErrorTrap;
              END;
            ;

          END;

        SET @ErrorTrying = N'UPDATE BudgetSourceTracking';

        UPDATE  [BUDGETSOURCETRACKING] WITH (ROWLOCK)
        SET      [RECVERSION] = rv.[NewRecVersion]
                ,[MODIFIEDBY] = @TrackingUser_cur
                ,[MODIFIEDDATETIME] = @ModifiedDateTime
                ,[STATUS] = bst.[STATUS]
        FROM    [BUDGETSOURCETRACKING] bst WITH (READPAST)
        JOIN    #ResetRecversion rv
            ON      bst.[RECID] = rv.[RecId]
            AND     rv.[Table] = 2 --@_TABLE_BudgetSourceTracking - Numeric value used for performance optimization
            AND     bst.[RECVERSION] = rv.[OrigRecVersion]
            AND     bst.[PARTITION] = @PartitionId
        ;

        IF EXISTS (
            SELECT TOP 1 bst.[RECID]
            FROM    [BUDGETSOURCETRACKING] bst WITH (UPDLOCK, ROWLOCK, READPAST)
            JOIN    #ResetRecversion rv
                ON      bst.[RECID] = rv.[RecId]
                AND     rv.[Table] = 2 --@_TABLE_BudgetSourceTracking - Numeric value used for performance optimization
            WHERE rv.[NewRecVersion] <> bst.[RECVERSION]
                AND     bst.[PARTITION] = @PartitionId
            )
          BEGIN
            SELECT @ErrorTrying = @ErrorTrying + N':Recverion mismatch';
            GOTO lblERrorTrap;
          END;

    -- Added for X++ compiler string limitation
    --" + @"

        SET @ErrorTrying = N'UPDATE BudgetSource';

        UPDATE  [BUDGETSOURCE] WITH (ROWLOCK)
        SET     [CHECKRESULT] =
                    CASE
                        WHEN EXISTS
                            (   SELECT 1
                                FROM #BSTDStage t
                                WHERE t.[BudgetSource] = bs.[RECID]
                                AND   t.[IsChecked] = 1
                                OR EXISTS
                                (
                                    SELECT 'X' FROM
                                    #BSTDStageToRevert R
                                    WHERE R.ID = T.ID AND R.[IsChecked] = 1
                                )
                            )
                                THEN COALESCE(e.[CHECKRESULT],@_CHECKRESULT_Passed)
                                    
                        ELSE @_CHECKRESULT_NoCheck
                    END
                ,[CHECKRESULTERRORWARNINGTYPE]  = COALESCE(e.[CHECKRESULTERRORWARNINGTYPE],0)
                ,[CHECKRESULTERRORWARNING]      = COALESCE(e.[CHECKRESULTERRORWARNING],0)
                ,[BUDGETCHECKGROUP]             = 0
                ,[BUDGETCHECKGROUPSEQUENCE]     = 0
                ,[RECVERSION]                   = COALESCE(rv.[NewRecVersion], -1)
        FROM    [BUDGETSOURCE] bs
        LEFT JOIN [BUDGETCHECKRESULTERRORWARNINGDETAIL] e
            ON      e.[BUDGETSOURCE] = bs.[RECID]
            AND     e.[PARTITION] = @PartitionId
            AND     e.[CHECKRESULTERRORWARNING] =
                (       SELECT  TOP 1 p.[CheckResultErrorWarning]
                        FROM    [BudgetControlErrorWarningPrecedenceView] p
                        WHERE   p.[CheckResultErrorWarning] IN
                            (       SELECT  x.[CHECKRESULTERRORWARNING]
                                    FROM    [BUDGETCHECKRESULTERRORWARNINGDETAIL] x
                                    WHERE   x.[BUDGETSOURCE] = e.[BUDGETSOURCE]
                                        AND x.[PARTITION] = @PartitionId
                                        AND NOT EXISTS
                                        (
                                            -- Do not include the budget control rule check result when there is a budget group check result that supersedes it.
                                            SELECT TOP 1 1
                                            FROM [BUDGETCHECKRESULTERRORWARNINGDETAIL] y
                                            WHERE
                                            (    y.[BUDGETSOURCE] = x.[BUDGETSOURCE]
                                                AND y.[PARTITION] = @PartitionId
                                                AND y.[BUDGETCONTROLLEDGERDIMENSION] = x.[BUDGETCONTROLLEDGERDIMENSION]
                                                AND x.[BUDGETSOURCELEDGERDIMENSION] <> 0
                                                AND y.[BUDGETSOURCELEDGERDIMENSION] = 0
                                                AND y.[SEQUENCENUMBER] = x.[SEQUENCENUMBER]-1
                                            )
                                        )
                            )
                        ORDER BY p.[Precedence]
                )
        LEFT JOIN    #ResetRecversion rv
            ON      rv.[RecId] = bs.[RECID]
            AND     rv.[Table] = 1 --@_TABLE_BudgetSource - Numeric value used for performance optimization
            AND     rv.[OrigRecVersion] = bs.[RECVERSION]
        WHERE bs.[BUDGETCHECKGROUP] = @BudgetCheckGroup
        AND   bs.[RECID] IN
                (   SELECT  rv.[RecId]
                    FROM    #ResetRecVersion rv
                    WHERE   rv.[Table] = 1
                )
        AND   bs.[CHECKRESULTERRORWARNINGTYPE] <> @_ERRORWARNINGTYPE_InvalidRequest
        AND   bs.[PARTITION] = @PartitionId
        ;

        IF EXISTS (
            SELECT TOP 1 bs.[RECID]
            FROM    [BUDGETSOURCE] bs
            WHERE bs.[RECID] IN
                (   SELECT  rv.[RecId]
                    FROM    #ResetRecVersion rv
                    WHERE   rv.[Table] = 1
                )
            AND   bs.[RECVERSION] = -1
            AND   bs.[PARTITION] = @PartitionId
            )
          BEGIN
            SELECT @ErrorTrying = @ErrorTrying + N':Recversion Mismatch';
            GOTO lblErrorTrap;
          END;

    -- end Update BudgetSource with new error warning details, check result, and tracking status
    END TRY
    BEGIN CATCH
            SELECT   @Error_Number     = ERROR_NUMBER()
                    ,@Error_Line       = ERROR_LINE()
                    ,@Error_State      = ERROR_STATE()
                    ,@Error_Severity   = ERROR_SEVERITY()
                    ,@Error_Procedure  = ERROR_PROCEDURE()
                    ,@ErrorMessage     = ERROR_MESSAGE();
            GOTO lblErrorTrap;
    END CATCH;

    UPDATE BUDGETCONTROLPROCESSINGHEADER
    SET [IsAnyRelieved] = @IsAnyRelieved, [IsAnyFailed] = @IsAnyFailed, [IsAnyDeleted] = @IsAnyDeleted
    WHERE [RECID] = @BudgetControlProcessingHeader

    SET @LogMessage = 'BudgetControlCheckBudgetProc - END';
    EXEC [BudgetControlLogMessageProc] @LogMessage, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    -- normal termination

    --lblNormalTerm:

    SET @ErrorTrying = N'BudgetControlCheckBudgetProc completed without error.';
    
    EXEC [BudgetControlLogMessageProc] @ErrorTrying, @_EVENTLEVEL_Informational, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    SELECT @ReturnCode = @ResultCode_Succesful, @ReturnMsg = @ErrorTrying;

    RETURN (@ResultCode_Succesful)

    -- error termination

    lblErrorTrap:

    BEGIN TRY -- make a best effort to release the applocks
        EXEC @RetCode = sp_releaseapplock
            @DBPrincipal = N'public'
            ,@Resource = @_APPLOCKRESOURCE_Main
            ,@LockOwner = N'Transaction'
        ;
    END TRY
    BEGIN CATCH
    END CATCH;

    EXEC [BudgetControlBuildErrorMessageProc]
         @callerProcedure       = @SPName
        ,@Error_Number          = @Error_Number
        ,@Error_Line            = @Error_Line
        ,@Error_State           = @Error_State
        ,@Error_Severity        = @Error_Severity
        ,@Error_Message         = @ErrorMessage
        ,@Error_Procedure       = @Error_Procedure
        ,@ErrorTrying           = @ErrorTrying
        ,@isIncludeErrorLineNum = @isIncludeErrorLineNum
        ,@ReturnErrorMsg = @BudgetCheckBuildErrorMsg OUTPUT
    ;

    EXEC [BudgetControlLogMessageProc] @BudgetCheckBuildErrorMsg, @_EVENTLEVEL_Error, @BudgetControlProcessingHeader, @ProcessingLogEventLevel, @PartitionId

    SELECT @ReturnCode = @ResultCode_Error, @ReturnMsg = @BudgetCheckBuildErrorMsg;
    
    RETURN (@ResultCode_Error)
    ";

        // Without these index hints, the queries don't choose an optimal query plan and thereby cause more rows to be read/locked than are needed.
        // By specifying the index hint, only those rows that are being updated/deleted will be locked and not the entire index.
        // Deadlocking occurs when these index hints do not exist and multiple budget checks are updating the same BudgetSourceTrackingSummary table record.
        str bstrdIndexHint = this.getBudgetSourceTrackingRelievingDetailIndexHint();
        str bstIndexHint = this.getBudgetSourceTrackingIndexHint();
        str bsIndexHint = this.getBudgetSourceIndexHint();

        return strFmt(sqlStatementText, bstrdIndexHint, bstIndexHint, bsIndexHint);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>