<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetResponsibleUserManager</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetResponsibleUserManager</c> class manages the budget responsible user associated with a
///    budget control dimension.
/// </summary>
public class BudgetResponsibleUserManager
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>existResponsibleUser_Empl</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the budget responsible user is associated with an employee record.
    /// </summary>
    /// <param name="_responsibleUser">
    ///    The budget responsible user to check.
    /// </param>
    /// <returns>
    ///    true if the budget responsible user is associated with an employee; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A blank value for the budget responsible user is valid and will cause a return value of true.
    /// </remarks>
    public static boolean existResponsibleUser_Empl(BudgetResponsibleUser _responsibleUser)
    {
        boolean ok = true;

        if (_responsibleUser != '' && DirPersonUserEx::worker(DirPersonUser::find(_responsibleUser)) == 0)
        {
            ok = false;
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>existResponsibleUser_User</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the budget responsible user is associated with a user record.
    /// </summary>
    /// <param name="_responsibleUser">
    ///    The budget responsible user to check.
    /// </param>
    /// <returns>
    ///    true if the budget responsible user is associated with a user; otherwise, false.
    /// </returns>
    /// <remarks>
    ///    A blank value for the budget responsible user is valid and will cause a return value of true.
    /// </remarks>
    public static boolean existResponsibleUser_User(BudgetResponsibleUser _responsibleUser)
    {
        boolean ok = true;
        UserInfo userInfo;

        if (_responsibleUser != '')
        {
            select firstonly RecId
                from userInfo
                where userInfo.Id == _responsibleUser;

            if (userInfo.RecId == 0)
            {
                ok = false;
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponsibleUserFromBudgetControlRule</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the budget responsible user who is associated with the budget control rule.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The record ID of the ledger dimension record.
    /// </param>
    /// <returns>
    ///    The budget responsible user who is associated with the budget control rule.
    /// </returns>
    public static BudgetResponsibleUser getResponsibleUserFromBudgetControlRule(
        RecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension)
    {
        BudgetControlRule budgetControlRule;
        BudgetResponsibleUser responsibleUser;

        budgetControlRule = BudgetControlLedgerDimensionHelper::findBudgetControlRuleByLedgerDimension(_primaryLedgerRecId, _ledgerDimension);

        if (BudgetResponsibleUserManager::existResponsibleUser_User(budgetControlRule.OverrideResponsibleUser) &&
            BudgetResponsibleUserManager::existResponsibleUser_Empl(budgetControlRule.OverrideResponsibleUser))
        {
            responsibleUser = budgetControlRule.OverrideResponsibleUser;
        }

        return responsibleUser;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResponsibleUserFromBudgetGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the budget responsible user who is associated with the budget group.
    /// </summary>
    /// <param name="_primaryLedgerRecId">
    ///    The record ID of the primary ledger record.
    /// </param>
    /// <param name="_ledgerDimension">
    ///    The record ID of the ledger dimension record.
    /// </param>
    /// <returns>
    ///    The budget responsible user who is associated with the budget group.
    /// </returns>
    public static BudgetResponsibleUser getResponsibleUserFromBudgetGroup(
        RecId _primaryLedgerRecId,
        LedgerDimensionBase _ledgerDimension)
    {
        BudgetGroup budgetGroup;
        BudgetResponsibleUser responsibleUser;

        budgetGroup = BudgetControlLedgerDimensionHelper::findBudgetGroupByMemberLedgerDimension(_primaryLedgerRecId, _ledgerDimension);

        if (BudgetResponsibleUserManager::existResponsibleUser_User(budgetGroup.OverrideResponsibleUser) &&
            BudgetResponsibleUserManager::existResponsibleUser_Empl(budgetGroup.OverrideResponsibleUser))
        {
            responsibleUser = budgetGroup.OverrideResponsibleUser;
        }

        return responsibleUser;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>