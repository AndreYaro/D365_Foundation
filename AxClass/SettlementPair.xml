<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SettlementPair</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>SettlementPair</c> class represents a single debit-credit relationship during settlement.
/// </summary>
/// <remarks>
/// Debit is usually an invoice while credit is usually a payment.
/// Relationship between debits and credits is many-to-many, therefore single invoice or single payment can be partially present in multiple <c>SettlementPair</c> relationships.
/// This class should be instantiated and used only from inside <c>CustVendSettle</c> class.
/// Additional functionality currently present on <c>CustVendSettle</c> class will be moved to <c>SettlementPair</c> class and related classes in subsequent releases.
/// Get and set methods on this class exposing internals of the class are going to be removed in subsequent releases in favor of more coarse operations.
/// </remarks>
public abstract class SettlementPair
{
    protected SpecTrans specTransDebit;           // Debit transactions  (SpecTrans)
    protected SpecTrans specTransCredit;          // Credit transactions (SpecTrans)

    protected CustVendTrans custVendTransDebit;       // Invoice transactions  (CustTrans / VendTrans) - Invoices
    protected CustVendTransOpen custVendTransOpenDebit;
    protected CustVendTrans custVendTransCredit;      // Payment transactions (CustTrans / VendTrans) - Payments/credit notes
    protected CustVendTransOpen custVendTransOpenCredit;

    protected CurrencyCode debitCompanyCurrency;
    protected CurrencyCode creditCompanyCurrency;

    protected TransDate transactionDate;

    protected SettlementVoucher settlementVoucher;

    protected SettlementExchRate exchRate;
    protected SettlementCalculator calculator;
    protected SettlementPreviousTotals settlementPreviousTotals;
    protected SettlementCashDiscount settlementCashDiscount;

    //<GPL> 
    private boolean isExchRateRecalculationNeeded = true;
    //</GPL>
    private boolean isNewSettlementVoucherCreated = false;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        super();
        this.init();
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes internal state of the object.
    /// </summary>
    protected void init()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPreviousTotals</Name>
				<Source><![CDATA[
    public void setPreviousTotals(SettlementPreviousTotals _settlementPreviousTotals)
    {
        settlementPreviousTotals = _settlementPreviousTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getModule</Name>
				<Source><![CDATA[
    protected abstract SysModule getModule()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchInvoice</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the next invoice (debit) transaction to settle.
    /// </summary>
    /// <param name="_company">
    /// The company ID used to find the invoice.
    /// </param>
    /// <param name="_tableId">
    /// The table ID used to find the invoice.
    /// </param>
    /// <param name="_recId">
    /// The reference record ID used to find the invoice.
    /// </param>
    /// <returns>
    /// true if there is another invoice to settle; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The records are ordered by cash discount date, due date, and record ID.
    /// </remarks>
    public abstract boolean fetchInvoice(DataAreaId _company, TableId _tableId, RecId _recId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchPayment</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the next payment (credit) transaction to settle.
    /// </summary>
    /// <param name="_company">
    /// The company ID used to find the payment.
    /// </param>
    /// <param name="_tableId">
    /// The table ID used to find the payment.
    /// </param>
    /// <param name="_recId">
    /// The reference record ID used to find the payment.
    /// </param>
    /// <returns>
    /// true if there is another payment to settle; otherwise, false.
    /// </returns>
    /// <remarks>
    /// The records are ordered by transaction date and record ID.
    /// </remarks>
    public abstract boolean fetchPayment(DataAreaId _company, TableId _tableId, RecId _recId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransDebit</Name>
				<Source><![CDATA[
    // Refactor: Usage of this setter should be eliminated.
    // Setting table buffers on the SettlementPair class should only be done through other methods like fetchInvoice.
    public void setCustVendTransDebit(CustVendTrans _custVendTransDebit)
    {
        custVendTransDebit = _custVendTransDebit;
        settlementVoucher.setDebitCompany(custVendTransDebit.company());
        this.forceExchRateCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransDebit</Name>
				<Source><![CDATA[
    public CustVendTrans getCustVendTransDebit()
    {
        return custVendTransDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransCredit</Name>
				<Source><![CDATA[
    // Refactor: Usage of this setter should be eliminated.
    // Setting table buffers on the SettlementPair class should only be done through other methods like fetchPayment.
    public void setCustVendTransCredit(CustVendTrans _custVendTransCredit)
    {
        custVendTransCredit = _custVendTransCredit;
        settlementVoucher.setCreditCompany(custVendTransCredit.company());
        this.forceExchRateCalculation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransCredit</Name>
				<Source><![CDATA[
    public CustVendTrans getCustVendTransCredit()
    {
        return custVendTransCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransOpenDebit</Name>
				<Source><![CDATA[
    // Refactor: Usage of this setter should be eliminated.
    // Setting table buffers on the SettlementPair class should only be done through other methods like fetchInvoice.
    public void setCustVendTransOpenDebit(CustVendTransOpen _custVendTransOpenDebit)
    {
        custVendTransOpenDebit = _custVendTransOpenDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenDebit</Name>
				<Source><![CDATA[
    public CustVendTransOpen getCustVendTransOpenDebit()
    {
        return custVendTransOpenDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCustVendTransOpenCredit</Name>
				<Source><![CDATA[
    // Refactor: Usage of this setter should be eliminated.
    // Setting table buffers on the SettlementPair class should only be done through other methods like fetchPayment.
    public void setCustVendTransOpenCredit(CustVendTransOpen _custVendTransOpenCredit)
    {
        custVendTransOpenCredit = _custVendTransOpenCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCustVendTransOpenCredit</Name>
				<Source><![CDATA[
    public CustVendTransOpen getCustVendTransOpenCredit()
    {
        return custVendTransOpenCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransDebit</Name>
				<Source><![CDATA[
    public SpecTrans getSpecTransDebit()
    {
        return specTransDebit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransCredit</Name>
				<Source><![CDATA[
    public SpecTrans getSpecTransCredit()
    {
        return specTransCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDebitCompanyCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the debit company currency.
    /// </summary>
    protected void initDebitCompanyCurrency()
    {
        changecompany(this.getDebitCompany())
        {
            debitCompanyCurrency = CompanyInfoHelper::standardCurrency();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitCompanyCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode getDebitCompanyCurrency()
    {
        return debitCompanyCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCreditCompanyCurrency</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the credit company currency.
    /// </summary>
    protected void initCreditCompanyCurrency()
    {
        changecompany(this.getCreditCompany())
        {
            creditCompanyCurrency = CompanyInfoHelper::standardCurrency();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCompanyCurrency</Name>
				<Source><![CDATA[
    public CurrencyCode getCreditCompanyCurrency()
    {
        return creditCompanyCurrency;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDebitCompany</Name>
				<Source><![CDATA[
    public DataAreaId getDebitCompany()
    {
        return custVendTransDebit.company();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCreditCompany</Name>
				<Source><![CDATA[
    public DataAreaId getCreditCompany()
    {
        return custVendTransCredit.company();
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustSettleAmountForFullySettled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates full settlement amount in the accounting currency.
    /// </summary>
    /// <param name = "_settleAmountMstDebit">An original settlement amount.</param>
    /// <param name = "_realizedExchAdj">A realized exchange adjustment amount.</param>
    /// <param name = "_unrealizedExchAdj">An unreailzed exchange adjustment amount.</param>
    /// <param name = "_isFullySettled">A boolean flag, indicating whether transaction is fully settled.</param>
    /// <returns>The adjusted settlement amount in the accounting currency if transaction is fully settled; otherwise, the original settlement amount in the accounting currency.</returns>
    public AmountMST adjustSettleAmountForFullySettled(
        AmountMST _settleAmountMstDebit,
        AmountMST _realizedExchAdj,
        AmountMST _unrealizedExchAdj,
        boolean _isFullySettled)
    {
        AmountMST adjustedSettleAmountMst = _settleAmountMstDebit;

        if (_isFullySettled)
        {
            if (custVendTransDebit.AmountMST !=
                _settleAmountMstDebit
                + custVendTransDebit.SettleAmountMST
                - _realizedExchAdj
                - custVendTransDebit.ExchAdjustmentRealized)
            {
                adjustedSettleAmountMst =
                    custVendTransDebit.AmountMST
                    - custVendTransDebit.SettleAmountMST
                    + _realizedExchAdj
                    + custVendTransDebit.ExchAdjustmentRealized;
            }
        }
        else if (custVendTransOpenDebit.AmountCur == 0.0) // if the open transaction is fully settled
        {
            adjustedSettleAmountMst = custVendTransOpenDebit.AmountMST + _realizedExchAdj - _unrealizedExchAdj;
        }

        return adjustedSettleAmountMst;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustSettleAmountReportingForFullySettled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates full settlement amount in the reporting currency.
    /// </summary>
    /// <param name = "_settleAmountDebitReporting">An original settlement amount in reporting currency.</param>
    /// <param name = "_realizedExchAdjReporting">A realized exchange adjustment amount in reporting currency.</param>
    /// <param name = "_unrealizedExchAdjReporting">An unreailzed exchange adjustment amount in reporting currency.</param>
    /// <param name = "_isFullySettled">A boolean flag, indicating whether transaction is fully settled.</param>
    /// <returns>The adjusted settlement amount in the reporting currency if transaction is fully settled; otherwise, original settlement amount in the reporting currency.</returns>
    public AmountMSTSecondary adjustSettleAmountReportingForFullySettled(
        AmountMSTSecondary _settleAmountDebitReporting,
        AmountMSTSecondary _realizedExchAdjReporting,
        AmountMSTSecondary _unrealizedExchAdjReporting,
        boolean _isFullySettled)
    {
        AmountMSTSecondary adjustedSettleAmountReporting = _settleAmountDebitReporting;

        if (_isFullySettled)
        {
            if (custVendTransDebit.ReportingCurrencyAmount !=
                _settleAmountDebitReporting
                + custVendTransDebit.SettleAmountReporting
                - _realizedExchAdjReporting
                - custVendTransDebit.ReportingExchAdjustmentRealized)
            {
                adjustedSettleAmountReporting =
                    custVendTransDebit.ReportingCurrencyAmount
                    - custVendTransDebit.SettleAmountReporting
                    + _realizedExchAdjReporting
                    + custVendTransDebit.ReportingExchAdjustmentRealized;
            }
        }
        else if (custVendTransOpenDebit.AmountCur == 0.0) // if the open transaction is fully settled
        {
            adjustedSettleAmountReporting = custVendTransOpenDebit.ReportingCurrencyAmount + _realizedExchAdjReporting - _unrealizedExchAdjReporting;
        }

        return adjustedSettleAmountReporting;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleAmountCurOnTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the amount settled in the transaction currency on both debit and credit transactions.
    /// </summary>
    /// <param name="_updateAmountDebit">
    /// The amount in transaction currency to update on the debit transaction.
    /// </param>
    /// <param name="_updateAmountCredit">
    /// The amount in transaction currency to update on ther credit transaction.
    /// </param>
    public void updateSettleAmountCurOnTrans(
        AmountCur _updateAmountDebit,
        AmountCur _updateAmountCredit)
    {
        custVendTransDebit.SettleAmountCur += _updateAmountDebit;
        custVendTransOpenDebit.AmountCur -= _updateAmountDebit;
        specTransDebit.Balance01 -= _updateAmountDebit;

        custVendTransCredit.SettleAmountCur += _updateAmountCredit;
        custVendTransOpenCredit.AmountCur -= _updateAmountCredit;
        specTransCredit.Balance01 -= _updateAmountCredit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleAmountMstOnDebitTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the amount settled in the accounting currency on the debit transaction.
    /// </summary>
    /// <param name="_roundedUpdateAmount">
    /// The rounded amount in accounting currency to update.
    /// </param>
    /// <param name="_exchAdjustmentRealized">
    /// The realized exchange adjustment amount for the accounting currency.
    /// </param>
    /// <param name="_isfullySettled">
    /// true if the transaction is fully settled; otherwise, false.
    /// </param>
    public void updateSettleAmountMstOnDebitTrans(
        AmountMST _roundedUpdateAmount,
        AmountMST _exchAdjustmentRealized,
        boolean _isfullySettled)
    {
        this.updateSettleAmountMstOnTrans(
            custVendTransDebit,
            custVendTransOpenDebit,
            _roundedUpdateAmount,
            _exchAdjustmentRealized,
            _isfullySettled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleAmountMstOnCreditTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the amount settled in the accounting currency on the credit transaction.
    /// </summary>
    /// <param name="_roundedUpdateAmount">
    /// The rounded amount in accounting currency to update.
    /// </param>
    /// <param name="_exchAdjustmentRealized">
    /// The realized exchange adjustment amount for the accounting currency.
    /// </param>
    /// <param name="_isfullySettled">
    /// true if the transaction is fully settled; otherwise, false.
    /// </param>
    public void updateSettleAmountMstOnCreditTrans(
        AmountMST _roundedUpdateAmount,
        AmountMST _exchAdjustmentRealized,
        boolean _isfullySettled)
    {
        this.updateSettleAmountMstOnTrans(
            custVendTransCredit,
            custVendTransOpenCredit,
            _roundedUpdateAmount,
            _exchAdjustmentRealized,
            _isfullySettled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleAmountMstOnTrans</Name>
				<Source><![CDATA[
    private void updateSettleAmountMstOnTrans(
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen,
        AmountMST _roundedUpdateAmount,
        AmountMST _exchAdjustmentRealized,
        boolean _isfullySettled)
    {
        // the trans records is only updated with the settle amount
        _custVendTrans.SettleAmountMST += _roundedUpdateAmount;
        // the open record needs to be updated with the settle amount plus realized exchange adjustment
        _custVendTransOpen.AmountMST -= _roundedUpdateAmount - _exchAdjustmentRealized;

        if (_isfullySettled
            && _custVendTransOpen.AmountCur == 0.0
            && _custVendTrans.ExchAdjustmentUnrealized == 0.0)
        {
            _custVendTransOpen.AmountMST = 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleAmountReportingOnDebitTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the amount settled in the reporting currency on the debit transaction.
    /// </summary>
    /// <param name="_roundedUpdateAmount">
    /// The rounded amount in reporting currency to update.
    /// </param>
    /// <param name="_exchAdjustmentRealized">
    /// The realized exchange adjustment amount for the reporting currency.
    /// </param>
    /// <param name="_isfullySettled">
    /// true if the transaction is fully settled; otherwise, false.
    /// </param>
    public void updateSettleAmountReportingOnDebitTrans(
        AmountMSTSecondary _roundedUpdateAmount,
        AmountMSTSecondary _exchAdjustmentRealized,
        boolean _isfullySettled)
    {
        this.updateSettleAmountReportingOnTrans(
            custVendTransDebit,
            custVendTransOpenDebit,
            _roundedUpdateAmount,
            _exchAdjustmentRealized,
            _isfullySettled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleAmountReportingOnCreditTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the amount settled in the reporting currency on the credit transaction.
    /// </summary>
    /// <param name="_roundedUpdateAmount">
    /// The rounded amount in reporting currency to update.
    /// </param>
    /// <param name="_exchAdjustmentRealized">
    /// The realized exchange adjustment amount for the reporting currency.
    /// </param>
    /// <param name="_isfullySettled">
    /// true if the transaction is fully settled; otherwise, false.
    /// </param>
    public void updateSettleAmountReportingOnCreditTrans(
        AmountMSTSecondary _roundedUpdateAmount,
        AmountMSTSecondary _exchAdjustmentRealized,
        boolean _isfullySettled)
    {
        this.updateSettleAmountReportingOnTrans(
            custVendTransCredit,
            custVendTransOpenCredit,
            _roundedUpdateAmount,
            _exchAdjustmentRealized,
            _isfullySettled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateSettleAmountReportingOnTrans</Name>
				<Source><![CDATA[
    private void updateSettleAmountReportingOnTrans(
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen,
        AmountMSTSecondary _roundedUpdateAmount,
        AmountMSTSecondary _exchAdjustmentRealized,
        boolean _isfullySettled)
    {
        // the trans records is only updated with the settle amount
        _custVendTrans.SettleAmountReporting += _roundedUpdateAmount;
        // the open record needs to be updated with the settle amount plus realized exchange adjustment
        _custVendTransOpen.ReportingCurrencyAmount -= _roundedUpdateAmount -_exchAdjustmentRealized;

        if (_isfullySettled
            && _custVendTransOpen.AmountCur == 0.0
            && _custVendTrans.ReportingExchAdjustmentUnrealized == 0.0)
        {
            _custVendTransOpen.ReportingCurrencyAmount = 0.0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwIfOversettled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether the settlement is oversettled.
    /// </summary>
    /// <remarks>
    /// If the settlement is about to be oversettled, an error is thrown.
    /// </remarks>
    protected void throwIfOversettled()
    {
        this.throwIfCustVendTransOversettled(custVendTransDebit);
        this.throwIfCustVendTransOversettled(custVendTransCredit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwIfCustVendTransOversettled</Name>
				<Source><![CDATA[
    private void throwIfCustVendTransOversettled(CustVendTrans _custVendTrans)
    {
        if (_custVendTrans)
        {
            if ((_custVendTrans.AmountCur < 0.0 && _custVendTrans.SettleAmountCur > 0.0)
                || (_custVendTrans.AmountCur > 0.0 && _custVendTrans.SettleAmountCur < 0.0)
                || (abs(_custVendTrans.AmountCur) < abs(_custVendTrans.SettleAmountCur)))
            {
                throw error(strFmt("@SYS119352", _custVendTrans.Voucher));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwIfDiffSign</Name>
				<Source><![CDATA[
    [SysObsolete('Not used anymore', false, 24\03\2022)]
    public void throwIfDiffSign()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwIfDebitTransAndTransOpenDiffSign</Name>
				<Source><![CDATA[
    internal void throwIfDebitTransAndTransOpenDiffSign()
    {
        this.throwIfTransAndTransOpenDiffSign(custVendTransDebit, custVendTransOpenDebit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwIfCreditTransAndTransOpenDiffSign</Name>
				<Source><![CDATA[
    internal void throwIfCreditTransAndTransOpenDiffSign()
    {
        this.throwIfTransAndTransOpenDiffSign(custVendTransCredit, custVendTransOpenCredit);
    }

]]></Source>
			</Method>
			<Method>
				<Name>throwIfTransAndTransOpenDiffSign</Name>
				<Source><![CDATA[
    private void throwIfTransAndTransOpenDiffSign(CustVendTrans _custVendTrans, CustVendTransOpen _custVendTransOpen)
    {
        if (_custVendTrans && _custVendTransOpen)
        {
            if ((_custVendTrans.AmountCur < 0.0 && _custVendTransOpen.AmountCur > 0.0)
                || (_custVendTrans.AmountCur > 0.0 && _custVendTransOpen.AmountCur < 0.0))
            {
                throw error(strFmt("@CashManagement:SettleDiffSignError", _custVendTrans.Voucher));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerTransactionType</Name>
				<Source><![CDATA[
    public LedgerTransType getLedgerTransactionType()
    {
        return settlementVoucher.getLedgerTransactionType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findNumberSequenceCodeByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the number sequence code that is used to create settlement transaction voucher numbers for
    /// the specified company.
    /// </summary>
    /// <param name="_company">
    /// The Company ID used to find the number sequence code.
    /// </param>
    /// <returns>
    /// The number sequence code for the company.
    /// </returns>
    public NumberSequenceCode findNumberSequenceCodeByCompany(CompanyId _company)
    {
        return settlementVoucher.findNumberSequenceCodeByCompany(_company);
    }

]]></Source>
			</Method>
			<Method>
				<Name>numRefCustVendPaymVoucher</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds number sequence reference for current settlement voucher.
    /// </summary>
    /// <returns>
    /// The number sequence reference.
    /// </returns>
    public NumberSequenceReference numRefCustVendPaymVoucher()
    {
        return settlementVoucher.numRefCustVendPaymVoucher();
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceNewVouchers</Name>
				<Source><![CDATA[
    /// <summary>
    /// Forces creation of new vouchers when needed by subsequent operations.
    /// </summary>
    public void forceNewVouchers()
    {
        settlementVoucher.forceNewVouchers();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLedgerVoucherGroup</Name>
				<Source><![CDATA[
    public LedgerVoucherGroup getLedgerVoucherGroup()
    {
        return settlementVoucher.getLedgerVoucherGroup();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setLedgerVoucherGroup</Name>
				<Source><![CDATA[
    public void setLedgerVoucherGroup(LedgerVoucherGroup _value)
    {
        settlementVoucher.setLedgerVoucherGroup(_value);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initForNewSettlement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the state of the the current settlement pair object for new settlement.
    /// </summary>
    public void initForNewSettlement()
    {
        settlementVoucher.initForNewSettlement(this.getDebitCompany(), this.getCreditCompany());
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateLedgerVoucherByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LedgerVoucher</c> instance for the specified company.
    /// </summary>
    /// <param name="_company">
    /// The company ID that is used to find the <c>LedgerVoucher</c> instance.
    /// </param>
    /// <returns>
    /// The <c>LedgerVoucher</c> instance for the company.
    /// </returns>
    /// <remarks>
    /// This method will create a new <c>LedgerVoucher</c> instance if one does not exist for the company ID.
    /// This method is useful in case the company you are searching the ledger voucher in differs from the debit or credit company.
    /// </remarks>
    public LedgerVoucher findOrCreateLedgerVoucherByCompany(CompanyId _company)
    {
        return settlementVoucher.findOrCreateLedgerVoucherByCompany(
            _company,
            this.getCustVendTransDebit().TransType,
            this.getCustVendTransCredit().TransType,
            transactionDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findLedgerVoucherByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the <c>LedgerVoucher</c> instance for the specified company.
    /// </summary>
    /// <param name="_company">
    /// The company ID that is used to find the <c>LedgerVoucher</c> instance.
    /// </param>
    /// <returns>
    /// The <c>LedgerVoucher</c> instance for the company.
    /// </returns>
    /// <remarks>
    /// This method will create a new <c>LedgerVoucher</c> instance if one does not exist for the company ID.
    /// </remarks>
    public LedgerVoucher findLedgerVoucherByCompany(CompanyId _company)
    {
        LedgerVoucher settlementVoucherCurrent = settlementVoucher.findLedgerVoucherByCompany(
            _company,
            this.getCustVendTransDebit().TransType,
            this.getCustVendTransCredit().TransType,
            transactionDate);

        if (!isNewSettlementVoucherCreated)
        {
            isNewSettlementVoucherCreated = settlementVoucher.getIsNewSettlementVoucherCreated();
        }

        return settlementVoucherCurrent;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOrCreateLedgerVoucherObjectByDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds or creates the <c>LedgerVoucherObject</c> instance for the specified date.
    /// </summary>
    /// <param name = "_ledgerVoucher">
    /// The <c>LedgerVoucher</c> instance which holds the <c>LedgerVoucherObject</c>
    /// </param>
    /// <param name = "_transDate">
    /// The transaction date.
    /// </param>
    /// <returns>
    /// The <c>LedgerVoucherObject</c> instance for the specified date.
    /// </returns>
    /// <remarks>
    /// This method will create a new <c>LedgerVoucherObject</c> instance if one does not exist for the specified date.
    /// </remarks>
    public LedgerVoucherObject findOrCreateLedgerVoucherObjectByDate(LedgerVoucher _ledgerVoucher, TransDate _transDate)
    {
        return settlementVoucher.findOrCreateLedgerVoucherObjectByDate(
            _ledgerVoucher,
            _transDate);
    }

]]></Source>
			</Method>
			<Method>
				<Name>findVoucherNumberByCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Finds the voucher number for the specified company.
    /// </summary>
    /// <param name="_company">
    /// The Company ID used to find the voucher number.
    /// </param>
    /// <returns>
    /// The voucher number for the specified company.
    /// </returns>
    public Voucher findVoucherNumberByCompany(CompanyId _company)
    {
        return settlementVoucher.findVoucherNumberByCompany(_company);
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherAdded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Notifies subscribers about voucher to process.
    /// </summary>
    /// <param name = "_voucher">
    /// The number of the voucher to be processed.
    /// </param>
    delegate void voucherAdded(str _voucher)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>voucherAddedEventHandler</Name>
				<Source><![CDATA[
    /// <summary>
    /// Invokes the voucherAdded delegate.
    /// </summary>
    /// <param name = "_voucher">
    /// The number of the voucher to be processed.
    /// </param>
    protected void voucherAddedEventHandler(str _voucher)
    {
        this.voucherAdded(_voucher);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTransactionDate</Name>
				<Source><![CDATA[
    public void setTransactionDate(TransDate _date)
    {
        transactionDate = _date;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTransactionDate</Name>
				<Source><![CDATA[
    public TransDate getTransactionDate()
    {
        return transactionDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>forceExchRateCalculation</Name>
				<Source><![CDATA[
    /// <summary>
    /// Refreshes the state of the exchange rate and amount calculations.
    /// </summary>
    protected void forceExchRateCalculation()
    {
        isExchRateRecalculationNeeded = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>recalculateExchRateAndRefreshCalculatorIfNeeded</Name>
				<Source><![CDATA[
    private void recalculateExchRateAndRefreshCalculatorIfNeeded()
    {
        if (isExchRateRecalculationNeeded)
        {
            ExchRate creditExchRateCurToMst = custVendTransCredit.exchRateCurToMst();

            exchRate = SettlementExchRate::constructV2(
                this.getDebitCompany(),
                this.getDebitCompanyCurrency(),
                custVendTransDebit.CurrencyCode,
                specTransDebit.CrossRate,
                this.getCreditCompany(),
                this.getCreditCompanyCurrency(),
                custVendTransCredit.CurrencyCode,
                custVendTransCredit.TransDate,
                creditExchRateCurToMst,
                custVendTransCredit.getReportingCombinedExchangeRate());

            calculator = SettlementCalculator::construct(
                exchRate,
                custVendTransDebit.exchRateCurToMst(),
                creditExchRateCurToMst);

            calculator.getSpecTransDebitBalance += eventhandler(this.getSpecTransDebitBalanceEventHandler);
            calculator.getSpecTransCreditBalance += eventhandler(this.getSpecTransCreditBalanceEventHandler);
            calculator.getAmountCurOpenDebit += eventhandler(this.getAmountCurOpenDebitEventHandler);
            calculator.getAmountCurOpenCredit += eventhandler(this.getAmountCurOpenCreditEventHandler);
            calculator.getAmountCurDebit += eventhandler(this.getAmountCurDebitEventHandler);
            calculator.getAmountCurCredit += eventhandler(this.getAmountCurCreditEventHandler);
            calculator.getAmountReportingCredit += eventhandler(this.getAmountReportingCreditEventHandler);
            calculator.getSettleAmountCurDebit += eventhandler(this.getSettleAmountCurDebitEventHandler);
            calculator.getSettleAmountCurCredit += eventhandler(this.getSettleAmountCurCreditEventHandler);
            calculator.getSettleAmountReportingCredit += eventhandler(this.getSettleAmountReportingCreditEventHandler);
            calculator.getAmountMstOpenDebit += eventhandler(this.getAmountMstOpenDebitEventHandler);
            calculator.getAmountMstOpenCredit += eventhandler(this.getAmountMstOpenCreditEventHandler);
            calculator.getAmountReportingOpenCredit += eventhandler(this.getAmountReportingOpenCreditEventHandler);
            calculator.getAmountMstDebit += eventhandler(this.getAmountMstDebitEventHandler);
            calculator.getAmountMstCredit += eventhandler(this.getAmountMstCreditEventHandler);
            calculator.getSettleAmountMstDebit += eventhandler(this.getSettleAmountMstDebitEventHandler);
            calculator.getSettleAmountMstCredit += eventhandler(this.getSettleAmountMstCreditEventHandler);
            calculator.getExchAdjustmentRealizedDebit += eventhandler(this.getExchAdjustmentRealizedDebitEventHandler);
            calculator.getExchAdjustmentRealizedCredit += eventhandler(this.getExchAdjustmentRealizedCreditEventHandler);
            calculator.getReportingExchAdjustmentRealizedCredit += eventhandler(this.getReportingExchAdjustmentRealizedCreditEventHandler);
            calculator.getExchAdjustmentUnrealizedOpenDebit += eventhandler(this.getExchAdjustmentUnrealizedOpenDebitEventHandler);
            calculator.getExchAdjustmentUnrealizedOpenCredit += eventhandler(this.getExchAdjustmentUnrealizedOpenCreditEventHandler);
            calculator.getReportingExchAdjustmentUnrealizedOpenCredit += eventhandler(this.getReportingExchAdjustmentUnrealizedOpenCreditEventHandler);

            settlementCashDiscount = SettlementCashDiscount::construct(
                this.getModule(),
                exchRate,
                settlementPreviousTotals,
                calculator);

            settlementCashDiscount.setSettlementPair(this);

            isExchRateRecalculationNeeded = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchRate</Name>
				<Source><![CDATA[
    public SettlementExchRate getExchRate()
    {
        this.recalculateExchRateAndRefreshCalculatorIfNeeded();
        return exchRate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCalculator</Name>
				<Source><![CDATA[
    public SettlementCalculator getCalculator()
    {
        this.recalculateExchRateAndRefreshCalculatorIfNeeded();
        return calculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCashDiscount</Name>
				<Source><![CDATA[
    public SettlementCashDiscount getCashDiscount()
    {
        this.recalculateExchRateAndRefreshCalculatorIfNeeded();
        return settlementCashDiscount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRealizedReportingExchAdjAmount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount of the realized exchange adjustment in the reporting currency.
    /// </summary>
    /// <param name="_settleAmountCurDebit">
    /// The amount to settle for the debit transaction in the transaction currency.
    /// </param>
    /// <param name="_cashDiscAmountCurDebit">
    /// The amount of cash discount for the debit transaction in the transaction currency.
    /// </param>
    /// <param name="_settleAmountReportingOnPaymDate">
    /// The amount to settle for the debit transaction in the reporting currency.
    /// </param>
    /// <param name="_cashDiscAmountReportingOnPaymDate">
    /// The amount of cash discount for the debit transaction in the reporting currency.
    /// </param>
    /// <param name="_isFullySettled">
    /// true if a debit transaction is fully settled; otherwise, false.
    /// </param>
    /// <returns>
    /// The realized exchange adjustment amount in the reporting currency.
    /// </returns>
    /// <remarks>
    /// The amount that is returned is rounded.
    /// </remarks>
    public AmountMSTSecondary calcRealizedReportingExchAdjAmount(
        AmountCur _settleAmountCurDebit,
        AmountCur _cashDiscAmountCurDebit,
        AmountMSTSecondary _settleAmountReportingOnPaymDate,
        AmountMSTSecondary _cashDiscAmountReportingOnPaymDate,
        boolean _isFullySettled)
    {
        AmountMSTSecondary settleAmountReportingOnInvDate;
        LedgerRecId ledgerRecId;
        CurrencyCode reportingCurrency;
        boolean needToCalculateRealizedReportingExchAdjAmount;

        ledgerRecId = Ledger::primaryLedger(CompanyInfo::current(this.getDebitCompany()));
        reportingCurrency = Ledger::reportingCurrencyByLedger(ledgerRecId);

        needToCalculateRealizedReportingExchAdjAmount = reportingCurrency != custVendTransDebit.CurrencyCode;

        if (!needToCalculateRealizedReportingExchAdjAmount)
        {
            return 0.0;
        }

        if (_isFullySettled)
        {
            settleAmountReportingOnInvDate = (custVendTransDebit.ReportingCurrencyAmount - custVendTransDebit.SettleAmountReporting) +
                custVendTransDebit.ReportingExchAdjustmentRealized + _cashDiscAmountReportingOnPaymDate;
        }
        else if (custVendTransOpenDebit.AmountCur == 0.0)
        {
            // this payment schedule is fully settled, but transaction isn't
            settleAmountReportingOnInvDate = custVendTransOpenDebit.ReportingCurrencyAmount - custVendTransOpenDebit.ExchAdjUnrealizedReporting;
        }
        else
        {
            CurrencyExchangeHelper currencyHelper;

            currencyHelper = CurrencyExchangeHelper::newExchangeDate(
                ledgerRecId,
                custVendTransDebit.TransDate);

            currencyHelper.parmReportingExchangeRate1(custVendTransDebit.ReportingCurrencyExchRate);
            currencyHelper.parmReportingExchangeRate2(custVendTransDebit.ReportingCurrencyExchRateSecondary);

            // Because the amount on the payment date is composed of adding the settle and discount amounts,
            // we need to calculate the amount on the invoice date the same way.           
           settleAmountReportingOnInvDate =
                currencyHelper.calculateTransactionCurrencyToReportingCurrency(custVendTransDebit.CurrencyCode, _settleAmountCurDebit) +
                currencyHelper.calculateTransactionCurrencyToReportingCurrency(custVendTransDebit.CurrencyCode, _cashDiscAmountCurDebit);
        }

        return _settleAmountReportingOnPaymDate - settleAmountReportingOnInvDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRealizedExchAdjAmountForPaymentCompany</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the amount of the realized exchange adjustment in accounting and reporting currencies of the credit company.
    /// </summary>
    /// <param name="_invoiceCompanyRealizedExchAdjAmount">
    /// The amount of the realized exchange adjustment in the accounting currency of the debit company.
    /// </param>
    /// <returns>
    /// A container that contains the amount of the realized exchange adjustment in the accounting currency of the
    /// credit company and the amount of the realized exchange adjustment in the reporting currency of
    /// the credit company.
    /// </returns>
    /// <remarks>
    /// The amounts returned are rounded.
    /// </remarks>
    public container calcRealizedExchAdjAmountForPaymentCompany(AmountMST _invoiceCompanyRealizedExchAdjAmount)
    {
        AmountMST paymentCompanyExchAdjMst;
        AmountMSTSecondary paymentCompanyExchAdjReporting;
        CurrencyExchangeHelper currencyHelper;

        if (this.getCreditCompany() != curExt())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        currencyHelper = CurrencyExchangeHelper::newExchangeDate(Ledger::primaryLedger(CompanyInfo::findDataArea(this.getCreditCompany()).RecId), this.getCustVendTransCredit().TransDate);

        if (this.getDebitCompanyCurrency() == this.getCreditCompanyCurrency())
        {
            // accounting currencies are the same in both companies so exchange adjustment amount will also be the same
            paymentCompanyExchAdjMst = _invoiceCompanyRealizedExchAdjAmount;
        }
        else
        {
            // convert to payment company accounting currency
            paymentCompanyExchAdjMst = currencyHelper.calculateTransactionToAccounting(this.getDebitCompanyCurrency(), _invoiceCompanyRealizedExchAdjAmount, true);
        }

        paymentCompanyExchAdjReporting = currencyHelper.calculateAccountingToReportingAdjustment(
            this.getDebitCompanyCurrency(),
            paymentCompanyExchAdjMst,
            true);

        return [paymentCompanyExchAdjMst, paymentCompanyExchAdjReporting];
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOtherSettlementFieldsOnTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the fields on the <c>CustVendTrans</c> and <c>SpecTrans</c> tables for settlement.
    /// </summary>
    /// <param name="_isDebitFullySettled">
    /// A Boolean value that indicates whether the debit transaction is fully settled.
    /// </param>
    /// <param name="_isCreditFullySettled">
    /// A Boolean value that indicates whether the credit transaction is fully settled.
    /// </param>
    public void updateOtherSettlementFieldsOnTrans(boolean _isDebitFullySettled, boolean _isCreditFullySettled)
    {
        // Update payment reference if not already set
        if (custVendTransDebit.PaymReference == '')
        {
            custVendTransDebit.PaymReference = custVendTransCredit.PaymReference;
        }
        else if (custVendTransCredit.PaymReference == '' && custVendTransDebit.TransType == LedgerTransType::Payment)
        {
            custVendTransCredit.PaymReference = custVendTransDebit.PaymReference;
        }

        if (_isDebitFullySettled)
        {
            custVendTransDebit.Closed = CustVendTransData::construct(custVendTransDebit).maxSettlementDate(this.getTransactionDate());
            specTransDebit.Balance01 = 0.0;
        }
        else
        {
            custVendTransDebit.Closed = dateNull();
        }

        custVendTransDebit.LastSettleDate = this.getTransactionDate();
        custVendTransDebit.LastSettleVoucher = custVendTransCredit.Voucher;
        custVendTransDebit.LastSettleAccountNum = custVendTransCredit.AccountNum;
        custVendTransDebit.LastSettleCompany = custVendTransCredit.company();
        custVendTransDebit.OffsetRecId = custVendTransCredit.RecId;

        if (_isCreditFullySettled)
        {
            custVendTransCredit.Closed = CustVendTransData::construct(custVendTransCredit).maxSettlementDate(this.getTransactionDate());
            specTransCredit.Balance01 = 0.0;
        }
        else
        {
            custVendTransCredit.Closed = dateNull();
        }

        custVendTransCredit.LastSettleDate = this.getTransactionDate();
        custVendTransCredit.LastSettleVoucher = custVendTransDebit.Voucher;
        custVendTransCredit.LastSettleAccountNum = custVendTransDebit.AccountNum;
        custVendTransCredit.LastSettleCompany = custVendTransDebit.company();
        custVendTransCredit.OffsetRecId = custVendTransDebit.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertFullSettlementAmountToCreditCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the full settlement amount to the currency of the credit transaction.
    /// </summary>
    /// <param name = "_fullSettlementAmount">The amount to convert.</param>
    /// <returns>The full settlement amount in the transaction of the credit transaction.</returns>
    public AmountCur convertFullSettlementAmountToCreditCur(AmountCur _fullSettlementAmount)
    {
        return SettlementUtility::convertFullSettlementAmount(
            specTransCredit,
            custVendTransCredit.CurrencyCode,
            _fullSettlementAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertFullSettlementAmountToDebitCur</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the full settlement amount to the currency of the debit transaction.
    /// </summary>
    /// <param name = "_fullSettlementAmount">The amount to convert.</param>
    /// <returns>The full settlement amount in the transaction of the debit transaction.</returns>
    public AmountCur convertFullSettlementAmountToDebitCur(AmountCur _fullSettlementAmount)
    {
        return SettlementUtility::convertFullSettlementAmount(
            specTransDebit,
            custVendTransDebit.CurrencyCode,
            _fullSettlementAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processCashDiscount</Name>
				<Source><![CDATA[
    // Refactor: In the future, this should be a calculation method with no return type. Calculated values should be retrieved with getter methods.
    /// <summary>
    /// Calculates the amount of the cash discount for the debit and credit transactions.
    /// </summary>
    /// <param name = "_isFullSettlement">true if full settlement is enabled; otherwise, false.</param>
    /// <param name = "_fullSettlementDiffAmountCur">The difference between the full settlement amount and the actual settlement amount.</param>
    /// <param name = "_remainingSpecTransRecords">The number of remaining <c>SpecTrans</c> records to be processed.</param>
    /// <returns>A container that contains the cash discount amounts.</returns>
    /// <remarks>
    /// The values returned in the container are as follows:
    /// 1. The cash discount amount in the debit transaction currency.
    /// 2. The cash discount amount in the credit transaction currency.
    /// 3. The cash discount amount in the debit transaction accounting currency.
    /// 4. The cash discount amount in the credit transaction accounting currency.
    /// 5. The cash discount amount in the debit transaction reporting currency.
    /// 6. The cash discount amount in the credit transaction reporting currency.
    /// 7. The cash discount code used on the debit transaction.
    /// </remarks>
    public container processCashDiscount(
        boolean _isFullSettlement,
        AmountCur _fullSettlementDiffAmountCur,
        NumberOfRecords _remainingSpecTransRecords)
    {
        SettlementCashDiscount cashDiscount = this.getCashDiscount();

        cashDiscount.calculateCashDiscount(
            _isFullSettlement,
            _fullSettlementDiffAmountCur,
            _remainingSpecTransRecords);

        return [cashDiscount.getActualCashDiscAmountDebit(),
            cashDiscount.getActualCashDiscAmountCredit(),
            cashDiscount.getActualCashDiscAmountMstDebit(),
            cashDiscount.getActualCashDiscAmountMstCredit(),
            cashDiscount.getActualCashDiscAmountReportingDebit(),
            cashDiscount.getActualCashDiscAmountReportingCredit(),
            cashDiscount.getCashDiscTransCodeDebit()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransDebitBalanceEventHandler</Name>
				<Source><![CDATA[
    private void getSpecTransDebitBalanceEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(specTransDebit.Balance01);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecTransCreditBalanceEventHandler</Name>
				<Source><![CDATA[
    private void getSpecTransCreditBalanceEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(specTransCredit.Balance01);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurOpenDebitEventHandler</Name>
				<Source><![CDATA[
    private void getAmountCurOpenDebitEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransOpenDebit.AmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurOpenCreditEventHandler</Name>
				<Source><![CDATA[
    private void getAmountCurOpenCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransOpenCredit.AmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurDebitEventHandler</Name>
				<Source><![CDATA[
    private void getAmountCurDebitEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransDebit.AmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountCurCreditEventHandler</Name>
				<Source><![CDATA[
    private void getAmountCurCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransCredit.AmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountReportingCreditEventHandler</Name>
				<Source><![CDATA[
    private void getAmountReportingCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransCredit.ReportingCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleAmountCurDebitEventHandler</Name>
				<Source><![CDATA[
    private void getSettleAmountCurDebitEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransDebit.SettleAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleAmountCurCreditEventHandler</Name>
				<Source><![CDATA[
    private void getSettleAmountCurCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransCredit.SettleAmountCur);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleAmountReportingCreditEventHandler</Name>
				<Source><![CDATA[
    private void getSettleAmountReportingCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransCredit.SettleAmountReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMstOpenDebitEventHandler</Name>
				<Source><![CDATA[
    private void getAmountMstOpenDebitEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransOpenDebit.AmountMst);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMstOpenCreditEventHandler</Name>
				<Source><![CDATA[
    private void getAmountMstOpenCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransOpenCredit.AmountMst);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountReportingOpenCreditEventHandler</Name>
				<Source><![CDATA[
    private void getAmountReportingOpenCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransOpenCredit.ReportingCurrencyAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMstDebitEventHandler</Name>
				<Source><![CDATA[
    private void getAmountMstDebitEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransDebit.AmountMst);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAmountMstCreditEventHandler</Name>
				<Source><![CDATA[
    private void getAmountMstCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransCredit.AmountMst);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleAmountMstDebitEventHandler</Name>
				<Source><![CDATA[
    private void getSettleAmountMstDebitEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransDebit.SettleAmountMst);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSettleAmountMstCreditEventHandler</Name>
				<Source><![CDATA[
    private void getSettleAmountMstCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransCredit.SettleAmountMst);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchAdjustmentRealizedDebitEventHandler</Name>
				<Source><![CDATA[
    private void getExchAdjustmentRealizedDebitEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransDebit.ExchAdjustmentRealized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchAdjustmentRealizedCreditEventHandler</Name>
				<Source><![CDATA[
    private void getExchAdjustmentRealizedCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransCredit.ExchAdjustmentRealized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingExchAdjustmentRealizedCreditEventHandler</Name>
				<Source><![CDATA[
    private void getReportingExchAdjustmentRealizedCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransCredit.ReportingExchAdjustmentRealized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchAdjustmentUnrealizedOpenDebitEventHandler</Name>
				<Source><![CDATA[
    private void getExchAdjustmentUnrealizedOpenDebitEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransOpenDebit.ExchAdjUnrealized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExchAdjustmentUnrealizedOpenCreditEventHandler</Name>
				<Source><![CDATA[
    private void getExchAdjustmentUnrealizedOpenCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransOpenCredit.ExchAdjUnrealized);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportingExchAdjustmentUnrealizedOpenCreditEventHandler</Name>
				<Source><![CDATA[
    private void getReportingExchAdjustmentUnrealizedOpenCreditEventHandler(EventHandlerResult _eventHandlerResult)
    {
        _eventHandlerResult.result(custVendTransOpenCredit.ExchAdjUnrealizedReporting);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSettlementForDebitTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates CustVendSettlement record for the debit transaction.
    /// </summary>
    /// <param name = "_custVendTransSettlement">Manages CustVendTrans and CustVendSettlement records created during settlement.</param>
    /// <param name = "_settlementGroupPlaceHolder">Identifies a settlement group.</param>
    /// <param name = "_settleAmountMst">The amount to settle in the monetary standard (MST) currency.</param>
    /// <param name = "_settleAmountCur">The amount to settle in transaction currency.</param>
    /// <param name = "_settleAmountReporting">The amount to settle in reporting currency.</param>
    /// <param name = "_realizedExchAdj">The amount of the realized exchange adjustment.</param>
    /// <param name = "_realizedReportingExchAdj">The amount of the realized exchange adjustment in reporting currency.</param>
    /// <param name = "_cashDiscAmount">The amount of the cash discount in the transaction currency.</param>
    /// <param name = "_cashDiscAmountMst">The amount of the cash discount in the MST currency.</param>
    /// <param name = "_cashDiscAmountReporting">The amount of the cash discount in the reporting currency.</param>
    /// <param name = "_canBeReversed">true if settlement can be reversed; otherwise, false.</param>
    /// <param name = "_settleTax1099Amount">The tax 1099 amount to settle in transaction currency.</param>
    /// <param name = "_settleTax1099StateAmount">The tax 1099 state amount to settle in transaction currency.</param>
    /// <param name = "_taxVoucher">The Tax Voucher.</param>
    /// <param name = "_vatTaxAgentAmountCur">The amount of the tax agent in the transaction currency.</param>
    /// <param name = "_vatTaxAgentAmountMST">The amount of the tax agent in the MST currency.</param>
    /// <param name = "_vatTaxAgentAmountReporting">The amount of the tax agent in the reporting currency.</param>
    /// <param name = "_interestAmount">The interest amount.</param>
    /// <param name = "_fineAmount">The fine amount.</param>
    public void createSettlementForDebitTrans(
        CustVendTransSettlement _custVendTransSettlement,
        Counter _settlementGroupPlaceHolder,
        AmountMST _settleAmountMst,
        AmountCur _settleAmountCur,
        AmountMSTSecondary _settleAmountReporting,
        AmountMST _realizedExchAdj,
        AmountMSTSecondary _realizedReportingExchAdj,
        DiscAmount _cashDiscAmount,
        AmountMST _cashDiscAmountMst,
        AmountMSTSecondary _cashDiscAmountReporting,
        NoYes _canBeReversed,
        Tax1099Amount _settleTax1099Amount,
        Tax1099StateAmount _settleTax1099StateAmount,
        Voucher _taxVoucher = '',
        AmountCur _vatTaxAgentAmountCur = 0,
        AmountMST _vatTaxAgentAmountMST = 0,
        AmountMSTSecondary _vatTaxAgentAmountReporting = 0,
        AmountCur _interestAmount = 0,
        AmountCur _fineAmount = 0)
    {
        this.createSettlementForDebitOrCreditTrans(
            _custVendTransSettlement, 
            _settlementGroupPlaceHolder, 
            custVendTransDebit, 
            custVendTransOpenDebit,
            _settleAmountMst,
            _settleAmountCur,
            _settleAmountReporting,
            _realizedExchAdj,
            _realizedReportingExchAdj,
            _cashDiscAmount,
            _cashDiscAmountMst,
            _cashDiscAmountReporting,
            _canBeReversed,
            _settleTax1099Amount,
            _settleTax1099StateAmount,
            _taxVoucher,
            _vatTaxAgentAmountCur,
            _vatTaxAgentAmountMST,
            _vatTaxAgentAmountReporting,
            _interestAmount,
            _fineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSettlementForCreditTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates CustVendSettlement record for the credit transaction.
    /// </summary>
    /// <param name = "_custVendTransSettlement">Manages CustVendTrans and CustVendSettlement records created during settlement.</param>
    /// <param name = "_settlementGroupPlaceHolder">Identifies a settlement group.</param>
    /// <param name = "_settleAmountMst">The amount to settle in the monetary standard (MST) currency.</param>
    /// <param name = "_settleAmountCur">The amount to settle in transaction currency.</param>
    /// <param name = "_settleAmountReporting">The amount to settle in reporting currency.</param>
    /// <param name = "_realizedExchAdj">The amount of the realized exchange adjustment.</param>
    /// <param name = "_realizedReportingExchAdj">The amount of the realized exchange adjustment in reporting currency.</param>
    /// <param name = "_cashDiscAmount">The amount of the cash discount in the transaction currency.</param>
    /// <param name = "_cashDiscAmountMst">The amount of the cash discount in the MST currency.</param>
    /// <param name = "_cashDiscAmountReporting">The amount of the cash discount in the reporting currency.</param>
    /// <param name = "_canBeReversed">true if settlement can be reversed; otherwise, false.</param>
    /// <param name = "_settleTax1099Amount">The tax 1099 amount to settle in transaction currency.</param>
    /// <param name = "_settleTax1099StateAmount">The tax 1099 state amount to settle in transaction currency.</param>
    /// <param name = "_taxVoucher">The Tax Voucher.</param>
    /// <param name = "_vatTaxAgentAmountCur">The amount of the tax agent in the transaction currency.</param>
    /// <param name = "_vatTaxAgentAmountMST">The amount of the tax agent in the MST currency.</param>
    /// <param name = "_vatTaxAgentAmountReporting">The amount of the tax agent in the reporting currency.</param>
    /// <param name = "_interestAmount">The interest amount.</param>
    /// <param name = "_fineAmount">The fine amount.</param>
    public void createSettlementForCreditTrans(
        CustVendTransSettlement _custVendTransSettlement,
        Counter _settlementGroupPlaceHolder,
        AmountMST _settleAmountMst,
        AmountCur _settleAmountCur,
        AmountMSTSecondary _settleAmountReporting,
        AmountMST _realizedExchAdj,
        AmountMSTSecondary _realizedReportingExchAdj,
        DiscAmount _cashDiscAmount,
        AmountMST _cashDiscAmountMst,
        AmountMSTSecondary _cashDiscAmountReporting,
        NoYes _canBeReversed,
        Tax1099Amount _settleTax1099Amount,
        Tax1099StateAmount _settleTax1099StateAmount,
        Voucher _taxVoucher = '',
        AmountCur _vatTaxAgentAmountCur = 0,
        AmountMST _vatTaxAgentAmountMST = 0,
        AmountMSTSecondary _vatTaxAgentAmountReporting = 0,
        AmountCur _interestAmount = 0,
        AmountCur _fineAmount = 0)
    {
        this.createSettlementForDebitOrCreditTrans(
            _custVendTransSettlement,
            _settlementGroupPlaceHolder,
            custVendTransCredit,
            custVendTransOpenCredit,
            _settleAmountMst,
            _settleAmountCur,
            _settleAmountReporting,
            _realizedExchAdj,
            _realizedReportingExchAdj,
            _cashDiscAmount,
            _cashDiscAmountMst,
            _cashDiscAmountReporting,
            _canBeReversed,
            _settleTax1099Amount,
            _settleTax1099StateAmount,
            _taxVoucher,
            _vatTaxAgentAmountCur,
            _vatTaxAgentAmountMST,
            _vatTaxAgentAmountReporting,
            _interestAmount,
            _fineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createSettlementForDebitOrCreditTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates CustVendSettlement record for the credit or debit transaction.
    /// </summary>
    /// <param name = "_custVendTransSettlement">Manages CustVendTrans and CustVendSettlement records created during settlement.</param>
    /// <param name = "_settlementGroupPlaceHolder">Identifies a settlement group.</param>
    /// <param name = "_custVendTrans">The CustVendTrans table used to create the settlement record.</param>
    /// <param name = "_custVendTransOpen">The CustVendTransOpen table used to create the settlement record.</param>
    /// <param name = "_settleAmountMst">The amount to settle in the monetary standard (MST) currency.</param>
    /// <param name = "_settleAmountCur">The amount to settle in transaction currency.</param>
    /// <param name = "_settleAmountReporting">The amount to settle in reporting currency.</param>
    /// <param name = "_realizedExchAdj">The amount of the realized exchange adjustment.</param>
    /// <param name = "_realizedReportingExchAdj">The amount of the realized exchange adjustment in reporting currency.</param>
    /// <param name = "_cashDiscAmount">The amount of the cash discount in the transaction currency.</param>
    /// <param name = "_cashDiscAmountMst">The amount of the cash discount in the MST currency.</param>
    /// <param name = "_cashDiscAmountReporting">The amount of the cash discount in the reporting currency.</param>
    /// <param name = "_canBeReversed">true if settlement can be reversed; otherwise, false.</param>
    /// <param name = "_settleTax1099Amount">The tax 1099 amount to settle in transaction currency.</param>
    /// <param name = "_settleTax1099StateAmount">The tax 1099 state amount to settle in transaction currency.</param>
    /// <param name = "_taxVoucher">The Tax Voucher.</param>
    /// <param name = "_vatTaxAgentAmountCur">The amount of the tax agent in the transaction currency.</param>
    /// <param name = "_vatTaxAgentAmountMST">The amount of the tax agent in the MST currency.</param>
    /// <param name = "_vatTaxAgentAmountReporting">The amount of the tax agent in the reporting currency.</param>
    /// <param name = "_interestAmount">The interest amount.</param>
    /// <param name = "_fineAmount">The fine amount.</param>
    protected void createSettlementForDebitOrCreditTrans(
        CustVendTransSettlement _custVendTransSettlement,
        Counter _settlementGroupPlaceHolder,
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen,
        AmountMST _settleAmountMst,
        AmountCur _settleAmountCur,
        AmountMSTSecondary _settleAmountReporting,
        AmountMST _realizedExchAdj,
        AmountMSTSecondary _realizedReportingExchAdj,
        DiscAmount _cashDiscAmount,
        AmountMST _cashDiscAmountMst,
        AmountMSTSecondary _cashDiscAmountReporting,
        NoYes _canBeReversed,
        Tax1099Amount _settleTax1099Amount,
        Tax1099StateAmount _settleTax1099StateAmount,
        Voucher _taxVoucher = '',
        AmountCur _vatTaxAgentAmountCur = 0,
        AmountMST _vatTaxAgentAmountMST = 0,
        AmountMSTSecondary  _vatTaxAgentAmountReporting = 0,
        AmountCur _interestAmount = 0,
        AmountCur _fineAmount = 0)
    {

        CustVendSettlement custVendSettlement = this.populateSettlementForDebitOrCreditTrans(
            _custVendTrans,
            _custVendTransOpen,
            _settleAmountMst,
            _settleAmountCur,
            _settleAmountReporting,
            _realizedExchAdj,
            _realizedReportingExchAdj,
            _cashDiscAmount,
            _cashDiscAmountMst,
            _cashDiscAmountReporting,
            _canBeReversed,
            _settleTax1099Amount,
            _settleTax1099StateAmount,
            _taxVoucher,
            _vatTaxAgentAmountCur,
            _vatTaxAgentAmountMST,
            _vatTaxAgentAmountReporting,
            _interestAmount,
            _fineAmount);

        _custVendTransSettlement.addSettlement(custVendSettlement, _settlementGroupPlaceHolder, _custVendTrans.TransType);

        this.accumulatePrevSettledAmountAndPrevCashDiscTaken(_custVendTransOpen, custVendSettlement);

        this.reverseAmounts(_custVendTrans);
    }

]]></Source>
			</Method>
			<Method>
				<Name>accumulatePrevSettledAmountAndPrevCashDiscTaken</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates accumulated settlement and cash discount information.
    /// </summary>
    /// <param name = "_custVendTransOpen"><c>CustVendTransOpen</c> map record.</param>
    /// <param name = "_custVendSettlement"><c>CustVendSettlement</c> map record.</param>
    protected void accumulatePrevSettledAmountAndPrevCashDiscTaken(CustVendTransOpen _custVendTransOpen, CustVendSettlement _custVendSettlement)
    {
        settlementPreviousTotals.accumulatePrevSettledAmountAndPrevCashDiscTaken(
                _custVendTransOpen.RecId,
                _custVendTransOpen.company(),
                _custVendSettlement.SettleAmountCur,
                _custVendSettlement.UtilizedCashDisc);
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateSettlementForDebitOrCreditTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate CustVendSettlement for debit or credit transaction.
    /// </summary>
    /// <param name = "_custVendTrans">The CustVendTrans table used to create the settlement record.</param>
    /// <param name = "_custVendTransOpen">The CustVendTransOpen table used to create the settlement record.</param>
    /// <param name = "_settleAmountMst">The amount to settle in the monetary standard (MST) currency.</param>
    /// <param name = "_settleAmountCur">The amount to settle in transaction currency.</param>
    /// <param name = "_settleAmountReporting">The amount to settle in reporting currency.</param>
    /// <param name = "_realizedExchAdj">The amount of the realized exchange adjustment.</param>
    /// <param name = "_realizedReportingExchAdj">The amount of the realized exchange adjustment in reporting currency.</param>
    /// <param name = "_cashDiscAmount">The amount of the cash discount in the transaction currency.</param>
    /// <param name = "_cashDiscAmountMst">The amount of the cash discount in the MST currency.</param>
    /// <param name = "_cashDiscAmountReporting">The amount of the cash discount in the reporting currency.</param>
    /// <param name = "_canBeReversed">true if settlement can be reversed; otherwise, false.</param>
    /// <param name = "_settleTax1099Amount">The tax 1099 amount to settle in transaction currency.</param>
    /// <param name = "_settleTax1099StateAmount">The tax 1099 state amount to settle in transaction currency.</param>
    /// <param name = "_taxVoucher">The Tax Voucher.</param>
    /// <param name = "_vatTaxAgentAmountCur">The amount of the tax agent in the transaction currency.</param>
    /// <param name = "_vatTaxAgentAmountMST">The amount of the tax agent in the MST currency.</param>
    /// <param name = "_vatTaxAgentAmountReporting">The amount of the tax agent in the reporting currency.</param>
    /// <param name = "_interestAmount">The interest amount.</param>
    /// <param name = "_fineAmount">The fine amount.</param>
    /// <returns>A populated CustVendSettlement record.</returns>
    protected CustVendSettlement populateSettlementForDebitOrCreditTrans(
        CustVendTrans _custVendTrans,
        CustVendTransOpen _custVendTransOpen,
        AmountMST _settleAmountMst,
        AmountCur _settleAmountCur,
        AmountMSTSecondary _settleAmountReporting,
        AmountMST _realizedExchAdj,
        AmountMSTSecondary _realizedReportingExchAdj,
        DiscAmount _cashDiscAmount,
        AmountMST _cashDiscAmountMst,
        AmountMSTSecondary _cashDiscAmountReporting,
        NoYes _canBeReversed,
        Tax1099Amount _settleTax1099Amount,
        Tax1099StateAmount _settleTax1099StateAmount,
        Voucher _taxVoucher = '',
        AmountCur _vatTaxAgentAmountCur = 0,
        AmountMST _vatTaxAgentAmountMST = 0,
        AmountMSTSecondary _vatTaxAgentAmountReporting = 0,
        AmountCur _interestAmount = 0,
        AmountCur _fineAmount = 0)
    {
        #ISOCountryRegionCodes

        CustVendSettlement custVendSettlement = this.initCustVendSettlementBuffer();
        AmountMST localSettleAmountMst = _settleAmountMst;
        AmountCur localSettleAmountCur = _settleAmountCur;
        AmountMSTSecondary localSettleAmountReporting = this.amount(_settleAmountReporting);
        AmountCur localRealizedExchAdj = _realizedExchAdj;
        DiscAmount localCashDiscAmount = _cashDiscAmount;
        AmountMST localCashDiscAmountMst = _cashDiscAmountMst;
        AmountMSTSecondary localRealizedReportingExchAdj = this.amount(_realizedReportingExchAdj);
        AmountMSTSecondary localCashDiscAmountReporting = this.amount(_cashDiscAmountReporting);

        // <GEERU>
        AmountCur localTaxAgentAmount = _vatTaxAgentAmountCur;
        AmountMST localTaxAgentAmountMST = _vatTaxAgentAmountMST;
        AmountMSTSecondary localTaxAgentAmountReporting = _vatTaxAgentAmountReporting;

        boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
        // </GEERU>

        VendTrans vendTrans;
        VendSettlement vendSettlement;

        Debug::assert(_custVendTrans.company() == curext());

        // Vendor transaction have their signs reversed so same code can be used for customer
        // and vendor transactions.
        this.reverseAmounts(_custVendTrans);

        // reverse signs if vendor
        localSettleAmountMst = this.amount(localSettleAmountMst);
        localSettleAmountCur = this.amount(localSettleAmountCur);
        localRealizedExchAdj = this.amount(localRealizedExchAdj);
        localCashDiscAmount = this.amount(localCashDiscAmount);
        localCashDiscAmountMst = this.amount(localCashDiscAmountMst);

        // <GEERU>
        localTaxAgentAmount = this.amount(localTaxAgentAmount);
        localTaxAgentAmountMST = this.amount(localTaxAgentAmountMST);
        localTaxAgentAmountReporting = this.amount(localTaxAgentAmountReporting);
        // </GEERU>

        custVendSettlement.clear();

        // set common fields
        custVendSettlement.AccountNum = _custVendTrans.AccountNum;
        custVendSettlement.OffsetTransVoucher = _custVendTrans.LastSettleVoucher;
        custVendSettlement.TransRecId = _custVendTrans.RecId;  
        custVendSettlement.TransOpen = _custVendTransOpen.RecId;
        custVendSettlement.TransType = _custVendTrans.TransType;

        custVendSettlement.DueDate = _custVendTransOpen.DueDate;
        custVendSettlement.OffsetCompany = _custVendTrans.LastSettleCompany;
        custVendSettlement.OffsetAccountNum = _custVendTrans.LastSettleAccountNum;
        if (custVendSettlement.TableId == tableNum(VendSettlement) && isConfigurationkeyEnabled(configurationKeyNum(PublicSector)))
        {
            custVendSettlement.ThirdPartyBankAccountId = _custVendTransOpen.ThirdPartyBankAccountId;
        }

        custVendSettlement.SettleAmountMST = localSettleAmountMst + localCashDiscAmountMst;
        custVendSettlement.SettleAmountCur = localSettleAmountCur + localCashDiscAmount;
        custVendSettlement.SettleAmountReporting = localSettleAmountReporting + localCashDiscAmountReporting;

        // <GEERU>
        if (countryRegion_RU)
        {
            custVendSettlement.SettleAmountMST += localTaxAgentAmountMST;
            custVendSettlement.SettleAmountCur += localTaxAgentAmount;
            custVendSettlement.SettleAmountReporting += localTaxAgentAmountReporting;
        }
        // </GEERU>

        custVendSettlement.ExchAdjustment = localRealizedExchAdj;
        custVendSettlement.ExchAdjustmentReporting = localRealizedReportingExchAdj;
        custVendSettlement.UtilizedCashDisc = localCashDiscAmount;

        // <GEERU>
        if (countryRegion_RU && custVendSettlement.TableId == tableNum(VendSettlement))
        {
            custVendSettlement.vatTaxAgentAmount_RU = localTaxAgentAmount;
        }
        // </GEERU>

        custVendSettlement.TransDate = max(_custVendTrans.TransDate, _custVendTrans.LastSettleDate);
        custVendSettlement.CashDiscDate = _custVendTransOpen.CashDiscDate;
        custVendSettlement.LastInterestDate = _custVendTransOpen.LastInterestDate;

        custVendSettlement.CashDiscountLedgerDimension = _custVendTransOpen.CashDiscountLedgerDimension;
        custVendSettlement.CanBeReversed = _canBeReversed;
        custVendSettlement.OffsetRecId = _custVendTrans.OffsetRecId;
        custVendSettlement.SettlementVoucher = this.findVoucherNumberByCompany(_custVendTrans.company());

        if (custVendSettlement.TableId == tableNum(VendSettlement))
        {
            vendTrans = _custVendTrans;
            vendSettlement = custVendSettlement;
            vendSettlement.VendPaymentGroup = vendTrans.VendPaymentGroup;
            vendSettlement.RemittanceAddress = vendTrans.RemittanceAddress;
            custVendSettlement = vendSettlement;
        }

        // when there is a utilized cash discount and transaction can be reversed set the dimension field on the settlement
        if (localCashDiscAmount != 0 && _canBeReversed)
        {
            custVendSettlement.DefaultDimension = _custVendTrans.DefaultDimension;
        }

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            custVendSettlement.InterestCode_BR = _custVendTransOpen.InterestCode_BR;
            custVendSettlement.InterestAmount_BR = this.amount(_interestAmount);

            custVendSettlement.FineCode_BR = _custVendTransOpen.FineCode_BR;
            custVendSettlement.FineAmount_BR =  this.amount(_fineAmount);
        }
        // </GBR>

        // set 1099 amounts
        if (this.getModule()  == SysModule::Vend)
        {
            custVendSettlement.SettleTax1099Amount = _settleTax1099Amount;
            custVendSettlement.SettleTax1099StateAmount = _settleTax1099StateAmount;

            // <GEERU>
            if (countryRegion_RU)
            {
                vendTrans = CustVendTransStatic::newTrans(_custVendTrans).findVoucherDate(this.getCustVendTransCredit().Voucher, this.getCustVendTransCredit().TransDate);

                if (vendTrans.vendTrans_W().EmplAccount_RU)
                {
                    custVendSettlement.ReversedRecId_RU = this.getCustVendTransCredit().RecId;
                    custVendSettlement.CanBeReversed = NoYes::No;
                }
            }
            // </GEERU>
        }

        // <GEERU>
        if (countryRegion_RU && _taxVoucher)
        {
            custVendSettlement.TaxVoucher_RU = _taxVoucher;
        }
        // </GEERU>

        return custVendSettlement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCustVendSettlementBuffer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize CustVendSettlement buffer.
    /// </summary>
    /// <returns>A CustVendSettlement buffer.</returns>
    protected abstract CustVendSettlement initCustVendSettlementBuffer()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>reverseAmounts</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverse amounts.
    /// </summary>
    /// <param name = "_custVendTrans">The CustVenTrans.</param>
    protected void reverseAmounts(CustVendTrans _custVendTrans)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>amount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the amount based on the module.
    /// </summary>
    /// <param name = "_amount">The amount.</param>
    /// <returns>The adjusted amount.</returns>
    protected AmountMST amount(AmountMST _amount)
    {
        return SettlementUtility::adjustAmountSign(_amount, this.getModule());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getIsNewSettlementVoucherCreated</Name>
				<Source><![CDATA[
    /// <summary>
    /// Whether a new settlement voucher is created.
    /// </summary>
    /// <returns>
    /// Returns true if new settlement voucher is created; otherwise, returns false.
    /// </returns>
    public boolean getIsNewSettlementVoucherCreated()
    {
        return isNewSettlementVoucherCreated;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>