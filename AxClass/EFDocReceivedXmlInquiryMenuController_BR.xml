<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EFDocReceivedXmlInquiryMenuController_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Represents the inquiry controller for the received XMLs that are selected from the database considering the parameters as criteria
/// </summary>
class EFDocReceivedXmlInquiryMenuController_BR extends SysOperationServiceController implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addReceivedXmlsToContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Queries the database for the received XML records that meet the criterias informed on the contract and adds them back to the contract
    /// </summary>
    protected void addReceivedXmlsToContract()
    {
        EFDocReceivedXmlInquiryContract_BR      contract = this.getDataContractObject();
        Set                                     receivedXmls;

        receivedXmls = this.getReceivedXmlsFromParameters();

        contract.parmReceivedXmlsPerFiscalEstablishment(EFDocReceivedXmlSetHelper_BR::getReceivedXmlsPerFiscalEstablishment(receivedXmls));
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultCaption</Name>
				<Source><![CDATA[
        protected ClassDescription defaultCaption()
    {
        return "@SYS4003323";
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReceivedXmlsFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Selects the received XMLs that meet the criterias specified on the contract from the database
    /// </summary>
    /// <returns>
    /// A set of received XML records
    /// </returns>
    protected Set getReceivedXmlsFromParameters()
    {
        EFDocReceivedXmlInquiryContract_BR      contract = this.getDataContractObject();

        EFDocRecXmlCancellationLimit_BR         cancellationLimit;
        EFDocRecXmlMinInquiryInterval_BR        minimumInquiryInterval;
        Set                                     receivedXmlSet;

        cancellationLimit = contract.parmCancellationLimit();
        minimumInquiryInterval = contract.parmMinimumInquiryInterval();

        receivedXmlSet = EFDocReceivedXmlToBeInquiredHelper_BR::getReceivedXmlsToBeInquired(cancellationLimit, minimumInquiryInterval);

        return receivedXmlSet;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super(classStr(EFDocReceivedXmlInquiryService_BR), methodStr(EFDocReceivedXmlInquiryService_BR, inquireAccessKeys));
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        this.addReceivedXmlsToContract();

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
        protected boolean validate()
    {
        EFDocReceivedXmlInquiryContract_BR      contract = this.getDataContractObject();

        boolean ret = super();

        if (contract.parmCancellationLimit() <= 0 || contract.parmMinimumInquiryInterval() <= 0)
        {
            ret = checkfailed("@SYS4003768");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs an <c>EFDocReceivedXmlInquiryMenuController_BR</c> object to inquire the set of received xmls records selected
    /// </summary>
    /// <returns>
    /// A new <c>EFDocReceivedXmlInquiryMenuController_BR</c> object
    /// </returns>
    protected static EFDocReceivedXmlInquiryMenuController_BR construct()
    {
        EFDocReceivedXmlInquiryMenuController_BR    controller = new EFDocReceivedXmlInquiryMenuController_BR();
        EFDocReceivedXmlInquiryContract_BR          contract = controller.getDataContractObject();

        controller.parmShowProgressForm(true);
        controller.parmShowDialog(true);

        return controller;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        EFDocReceivedXmlInquiryMenuController_BR    controller = EFDocReceivedXmlInquiryMenuController_BR::construct();

        controller.startOperation();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns true.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>