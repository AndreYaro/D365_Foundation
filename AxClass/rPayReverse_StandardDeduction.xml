<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayReverse_StandardDeduction</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayReverse_StandardDeduction extends RPayReverse
{
    DialogField                    dlgFieldReverseUpdateChoice;
    RpayReverseUpdateChoice        reverseUpdateChoice;
    TransDate                      correctedPeriod;
    boolean                        onlyCreate;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTrans</Name>
				<Source><![CDATA[
        private void createTrans()
    {
        RPayTrans rPayTransOrig;

        while select forupdate rPayTransOrig
            where rPayTransOrig.SourceTableId     == common.TableId &&
                    rPayTransOrig.SourceRecId     == common.RecId   &&
                    rPayTransOrig.CorrectedPeriod != correctedPeriod
        {
            this.createReversePayTrans(rPayTransOrig, common);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        DialogRunbase dialog;

        onlyCreate = !(rPayReverseMap.CorrectedPeriod && rPayReverseMap.CorrectedPeriod == correctedPeriod);

        dialog = super();

        dlgFieldReverseUpdateChoice = dialog.addFieldValue(enumstr(RpayReverseUpdateChoice), RpayReverseUpdateChoice::Update);

        dlgFieldReverseUpdateChoice.visible(!onlyCreate);

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogBoxText</Name>
				<Source><![CDATA[
        protected str dialogBoxText()
    {
        if (onlyCreate)
        {
            return "@RUP2967";
        }
        else
        {
            return "@RUP6262";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            reverseUpdateChoice = dlgFieldReverseUpdateChoice.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the class from arguments.
    /// </summary>
    /// <param name="_args">
    /// The arguments.
    /// </param>
    public void initFromArgs(Args _args)
    {
        RPayEmplStandardDeductionTable rPayEmplStandardDeductionTable;

        super(_args);

        if (common)
        {
            rPayEmplStandardDeductionTable = common;
            correctedPeriod                = RPayParameters::payPeriod(rPayEmplStandardDeductionTable.EmplId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runReverse</Name>
				<Source><![CDATA[
        void runReverse()
    {
        RPayTrans      rPayTransOrig;

        if (!rPayReverseMap.CorrectedPeriod)
        {
            rPayReverseMap.selectForUpdate(true);
            rPayReverseMap.CorrectedPeriod = correctedPeriod;
            rPayReverseMap.update();

            this.createTrans();

            delete_from rPayTransOrig
                where rPayTransOrig.SourceTableId   == common.TableId &&
                      rPayTransOrig.SourceRecId     == common.RecId   &&
                      rPayTransOrig.CorrectedPeriod == correctedPeriod;
        }
        else
        {
            delete_from rPayTransOrig
                where rPayTransOrig.SourceTableId == common.TableId &&
                      rPayTransOrig.SourceRecId   == common.RecId   &&
                      rPayTransOrig.PayPeriod     == correctedPeriod;

            if (reverseUpdateChoice == RpayReverseUpdateChoice::Undo)
            {
                rPayReverseMap.selectForUpdate(true);
                rPayReverseMap.CorrectedPeriod = dateNull();
                rPayReverseMap.update();
            }
            if (reverseUpdateChoice == RpayReverseUpdateChoice::Update)
            {
                this.createTrans();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static RPayReverse_StandardDeduction construct()
    {
        return new RPayReverse_StandardDeduction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>