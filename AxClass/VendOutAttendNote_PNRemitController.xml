<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendOutAttendNote_PNRemitController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>VendOutAttendNote_PNRemitController</c> class is the controller class for the
/// <c>VendOutAttendingNote_PNRemittance</c> report.
/// </summary>
public class VendOutAttendNote_PNRemitController extends SrsReportRunController implements BatchRetryable
{
    private CompanyInfo companyInfo;
    private BankAccountTable bankAccountTable;
    private BankRemittanceFilesVend bankRemittanceFilesVend;
    private VendPromissoryNoteInvoice vendPromissoryNoteInvoice;
    private SpecTrans specTrans;
    private VendTable vendTable;
    private VendTrans vendTrans;
    private VendTransOpen vendTransOpen;
    private TransDate dueDate;
    private NoYes ledgerJournalPosted;
    private Counter numOfRecord;
    private Amount sumAmount;
    private CurrencyCode sumCurrencyCode;
    private int localNumOfSum;
    private container sumContainer[];
    private container recordContainer[];
    private int currentSessionId;
    private VendOutAttendingNote_PNRemittanceTmp vendOutAttendingNote_PNRemittanceTmp;
    private LedgerJournalTrans ledgerJournalTrans;
    private int total;
    private CustVendOutPaym custVendOutPaym;

    private Query query;
    private QueryBuildRange qbr;

    private const Timezone GMT = Timezone::GMT_DUBLIN_EDINBURGH_LISBON_LONDON;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the data records for the remittances.
    /// </summary>
    /// <param name="arg">
    /// The arguments for the <c>VendOutAttendingNote_PNRemittanceHelper</c> class.
    /// </param>
    private void buildRecords(Args arg)
    {
        ListEnumerator le;
        VendOutPaymRecord vendOutPaymRecord;
        CustVendPaym custVendPaym;

        custVendOutPaym = arg.caller();

        le = custVendOutPaym.getOutPaymRecords().getEnumerator();

        while (le.moveNext())
        {
            vendOutPaymRecord = le.current();
            custVendPaym = vendOutPaymRecord.parmCustVendPaym();
            this.fillReport([custVendPaym.ledgerJournalTrans(), custVendPaym.bankAccountTable()]);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcSum</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the total of amount and the currency code.
    /// </summary>
    /// <param name="_currencyCode">
    /// The currency code.
    /// </param>
    /// <param name="_amountCur">
    /// The amount in the specified currency.
    /// </param>
    private void calcSum(CurrencyCode _currencyCode, AmountCur _amountCur)
    {
        for (int i = 1; i <= localNumOfSum + 1; i++)
        {
            if (sumContainer[i])
            {
                if (conPeek(sumContainer[i], 1) == _currencyCode)
                {
                    sumContainer[i] = conPoke(sumContainer[i], 2, _amountCur + conPeek(sumContainer[i], 2));
                    break;
                }
            }
            else
            {
                localNumOfSum++;
                sumContainer[i] = [_currencyCode, _amountCur];
                break;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the value of the currency code.
    /// </summary>
    /// <returns>
    /// The currency code.
    /// </returns>
    private CurrencyCode currencyCode()
    {
        return vendTrans ? vendTrans.CurrencyCode : ledgerJournalTrans.CurrencyCode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Places the record into a container.
    /// </summary>
    /// <param name="_recordContainer">
    /// The container that will hold the record.
    /// </param>
    private void fillReport(container _recordContainer)
    {
        // Container is expected to contain:
        // Pos 1: LedgerJournalTrans
        // Pos 2: VendBankAccount
        numOfRecord++;
        recordContainer[numOfRecord] = _recordContainer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVendOutAttendNote_PNRemittanceTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts records into the temporary table.
    /// </summary>
    private void insertVendOutAttendNote_PNRemittanceTmp()
    {
        vendOutAttendingNote_PNRemittanceTmp.BankAccountName = bankAccountTable.Name;
        vendOutAttendingNote_PNRemittanceTmp.BankAccountAddress = bankAccountTable.postalAddress().Address;
        vendOutAttendingNote_PNRemittanceTmp.CompanyName = CompanyInfo::find().name();
        vendOutAttendingNote_PNRemittanceTmp.CompanyAddress = companyInfo.postalAddress().Address;
        vendOutAttendingNote_PNRemittanceTmp.CompanyPhone = companyInfo.phone();
        vendOutAttendingNote_PNRemittanceTmp.CompanyTelefax = companyInfo.teleFax();
        vendOutAttendingNote_PNRemittanceTmp.CompanyCoRegNum = companyInfo.CoRegNum;
        vendOutAttendingNote_PNRemittanceTmp.PromissoryNoteID = vendTrans.PromissoryNoteID;
        vendOutAttendingNote_PNRemittanceTmp.Invoice = vendTrans.Invoice;
        vendOutAttendingNote_PNRemittanceTmp.CompanyAccount = vendTrans.DataAreaId;
        vendOutAttendingNote_PNRemittanceTmp.AccountNum = vendTrans.AccountNum;
        vendOutAttendingNote_PNRemittanceTmp.VendName = vendTable.name();
        vendOutAttendingNote_PNRemittanceTmp.AmountCur = vendTrans.AmountCur;
        vendOutAttendingNote_PNRemittanceTmp.CurrencyCode = vendTrans.CurrencyCode;
        vendOutAttendingNote_PNRemittanceTmp.County = vendTable.postalAddress().County;
        vendOutAttendingNote_PNRemittanceTmp.VendCity = this.vendCity();
        vendOutAttendingNote_PNRemittanceTmp.FileId = bankRemittanceFilesVend.FileId;
        vendOutAttendingNote_PNRemittanceTmp.DueDate = dueDate;
        vendOutAttendingNote_PNRemittanceTmp.SessionId = currentSessionId;
        vendOutAttendingNote_PNRemittanceTmp.Total = total;
        vendOutAttendingNote_PNRemittanceTmp.SumAmount = sumAmount;
        vendOutAttendingNote_PNRemittanceTmp.SumCurrencyCode = sumCurrencyCode;
        vendOutAttendingNote_PNRemittanceTmp.DateOfCreation = DateTimeUtil::getToday(GMT);
        vendOutAttendingNote_PNRemittanceTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerJournalTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the first record from the container.
    /// </summary>
    /// <param name="_counter">
    /// A <c>Counter</c> object.
    /// </param>
    /// <returns>
    /// The container that holds the records.
    /// </returns>
    private LedgerJournalTrans ledgerJournalTrans(Counter _counter)
    {
        return conPeek(recordContainer[_counter], 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    protected void preRunModifyContract()
    {
        Query reportQuery;

        this.processReport(this.parmArgs());

        reportQuery = this.parmReportContract().parmQueryContracts().lookup(this.getFirstQueryContractKey());
        SrsReportHelper::addParameterValueRangeToQuery(
            reportQuery,
            tableNum(VendOutAttendingNote_PNRemittanceTmp),
            fieldNum(VendOutAttendingNote_PNRemittanceTmp, SessionId),
            int2str(currentSessionId));
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the report business logic.
    /// </summary>
    /// <param name="_paramArg">
    /// The parameter arguments are specified in the <c>main</c> method.
    /// </param>
    /// <remarks>
    /// This method processes the business logic that is used by the
    /// <c>VendOutAttendingNote_PNRemittance</c> report.
    /// </remarks>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void processReport(Args _paramArg)
    {
        LedgerJournalTrans ledgerJournalTransFieldList;
        LedgerJournalTrans ledgerJournalTransLocal;
        Counter numOfSum;
        int curRecord;

        args = _paramArg;

        currentSessionId = new xSession().sessionId();

        //Delete the previous records if there are existing record corresponding
        //to the current session or there are existing records
        //more than two days old.
        delete_from vendOutAttendingNote_PNRemittanceTmp
            where ((vendOutAttendingNote_PNRemittanceTmp.SessionId == currentSessionId)
                || (vendOutAttendingNote_PNRemittanceTmp.DateOfCreation < DateTimeUtil::getToday(GMT) - 2));

        companyInfo = CompanyInfo::find();

        if (args.dataset() == tableNum(BankRemittanceFilesVend))
        {
            bankRemittanceFilesVend = args.record();

            select firstonly ledgerJournalTransLocal
                where ledgerJournalTransLocal.JournalNum == bankRemittanceFilesVend.JournalId;

            ledgerJournalPosted = ledgerJournalTransLocal.ledgerJournalTable().Posted;

            if (!ledgerJournalPosted)
            {
                numOfRecord = 0;
                ledgerJournalTrans = ledgerJournalTransLocal;
                bankAccountTable = BankAccountTable::find(ledgerJournalTransLocal.BankAccountId);
            }
        }
        if (args.dataset() == tableNum(LedgerJournalTrans))
        {
            numOfRecord = 0;
            ledgerJournalTrans = args.record();
            bankAccountTable = BankAccountTable::find(ledgerJournalTrans.BankAccountId);
        }
        else
        {
            if (args.dataset() == tableNum(BankRemittanceFilesVend))
            {
                if (ledgerJournalPosted)
                {
                    numOfRecord = 0;
                    bankRemittanceFilesVend = args.record();
                    bankAccountTable = BankAccountTable::find(bankRemittanceFilesVend.BankAccountId);
                }
            }
            else
            {
                if (numOfRecord >= 1)
                {
                    bankRemittanceFilesVend = BankRemittanceFilesVend::find(ledgerJournalTrans.BankRemittanceFileId);
                    bankAccountTable = BankAccountTable::find(bankRemittanceFilesVend.BankAccountId);
                }
            }
        }

        this.buildRecords(args);

        if (args.dataset() == tableNum(LedgerJournalTrans)
            || (args.dataset() == tableNum(BankRemittanceFilesVend)
                && !ledgerJournalPosted))
        {
            while select TableId, RecId, Due from ledgerJournalTransFieldList
                where ledgerJournalTransFieldList.JournalNum == ledgerJournalTrans.JournalNum
            {
                while select crossCompany specTrans
                    where specTrans.SpecCompany == ledgerJournalTransFieldList.DataAreaId
                        && specTrans.SpecTableId == ledgerJournalTransFieldList.TableId
                        && specTrans.SpecRecId == ledgerJournalTransFieldList.RecId
                    join vendTransOpen
                        where vendTransOpen.DataAreaId == specTrans.RefCompany
                            && vendTransOpen.TableId == specTrans.RefTableId
                            && vendTransOpen.RecId == specTrans.RefRecId
                    join vendTrans
                        where vendTrans.RecId == vendTransOpen.RefRecId
                {
                    changecompany(vendTrans.company())
                    {
                        vendTable = VendTable::find(vendTrans.AccountNum);
                    }
                    dueDate = ledgerJournalTransFieldList.Due;
                    if (vendTrans)
                    {
                        this.insertVendOutAttendNote_PNRemittanceTmp();
                    }
                }
            }
        }
        else
        {
            if (args.dataset() == tableNum(BankRemittanceFilesVend))
            {
                while select crossCompany vendTrans
                    where vendTrans.BankRemittanceFileId == bankRemittanceFilesVend.FileId
                        && vendTrans.AmountCur < 0
                {
                    changecompany(vendTrans.company())
                    {
                        select maxof(DueDate) from vendPromissoryNoteInvoice
                            where vendPromissoryNoteInvoice.PromissoryNoteId == vendTrans.PromissoryNoteID;

                        dueDate = vendPromissoryNoteInvoice.DueDate;
                        vendTable = VendTable::find(vendTrans.AccountNum);
                    }

                    this.calcSum(vendTrans.CurrencyCode, vendTrans.AmountCur);

                    if (vendTrans)
                    {
                        this.insertVendOutAttendNote_PNRemittanceTmp();
                    }
                }
            }
            else
            {
                for (curRecord = 1; curRecord <= numOfRecord; curRecord++)
                {
                    if (conLen(recordContainer[curRecord]) > 0)
                    {
                        ledgerJournalTrans = this.ledgerJournalTrans(curRecord);

                        bankRemittanceFilesVend = BankRemittanceFilesVend::find(ledgerJournalTrans.BankRemittanceFileId);
                        bankAccountTable = BankAccountTable::find(bankRemittanceFilesVend.BankAccountId);

                        while select crossCompany specTrans
                            where specTrans.SpecCompany == ledgerJournalTrans.DataAreaId
                                && specTrans.SpecTableId == ledgerJournalTrans.TableId
                                && specTrans.SpecRecId == ledgerJournalTrans.RecId
                            join vendTransOpen
                                where vendTransOpen.DataAreaId == specTrans.RefCompany
                                    && vendTransOpen.TableId == specTrans.RefTableId
                                    && vendTransOpen.RecId == specTrans.RefRecId
                            join vendTrans
                                where vendTrans.RecId == vendTransOpen.RefRecId
                        {
                            changecompany(vendTrans.company())
                            {
                                select maxof(DueDate) from vendPromissoryNoteInvoice
                                    where vendPromissoryNoteInvoice.PromissoryNoteId == vendTrans.PromissoryNoteID;

                                dueDate = vendPromissoryNoteInvoice.DueDate;

                                vendTable = VendTable::find(vendTrans.AccountNum);
                            }

                            this.calcSum(vendTrans.CurrencyCode, vendTrans.AmountCur);

                            if (vendTrans)
                            {
                                this.insertVendOutAttendNote_PNRemittanceTmp();
                            }
                        }
                    }
                }
            }
        }

        for (numOfSum = 1; numOfSum <= localNumOfSum; numOfSum++)
        {
            [sumCurrencyCode, sumAmount] = sumContainer[numOfSum];
            total = 1;
            this.insertVendOutAttendNote_PNRemittanceTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates the city in which the vendor is located.
    /// </summary>
    /// <returns>
    /// The city in which the vendor is located.
    /// </returns>
    private AddressCity vendCity()
    {
        return (select logisticsaddressZipCode
            where logisticsaddressZipCode.ZipCode == vendTable.postalAddress().ZipCode).City;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        SrsReportRunController controller = new VendOutAttendNote_PNRemitController();
        controller.parmReportName(ssrsReportStr(VendOutAttendingNote_PNRemittance, Report));
        controller.parmArgs(_args);
        controller.parmShowDialog(false);
        controller.startOperation();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>