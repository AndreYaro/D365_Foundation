<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqCalcRecordCache</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqCalcRecordCache</c> implements a record cache using a <c>Map</c> with containers as keys and records as values.
/// </summary>
public abstract class ReqCalcRecordCache
{
    Map     mapCache;
    TableId tableId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the number of elements in the cache.
    /// </summary>
    /// <returns>
    ///    The number of elements in the cache.
    /// </returns>
    public int elements()
    {
        return mapCache ? mapCache.elements() : 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts a key/value pair into the cache.
    /// </summary>
    /// <param name="_key">
    ///    A container that represents the key.
    /// </param>
    /// <param name="_common">
    ///    A <c>Common</c> record that represents the value.
    /// </param>
    /// <returns>
    ///    true if the key/value pair was inserted; otherwise, false.
    /// </returns>
    /// <exception cref="Exception::Error">
    ///    The cache is restricted to hold a specific type of record and the operation was called with an invalid record.
    /// </exception>
    protected boolean insertKey(
        container _key,
        Common    _common)
    {
        boolean result;

        if (   tableId
            && tableId != _common.TableId)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (!mapCache)
        {
            mapCache = new Map(Types::Container,Types::Record);
        }

        result = mapCache.insert(_key,_common);

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lookupKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Looks up the specified key in the cache.
    /// </summary>
    /// <param name="_key">
    ///    A container that represents the key.
    /// </param>
    /// <returns>
    ///    A <c>Common</c> record; otherwise an empty buffer.
    /// </returns>
    /// <remarks>
    ///    No error is thrown if the key does not exist.
    /// </remarks>
    protected Common lookupKey(container _key)
    {
        Common  common;

        if (   mapCache
            && mapCache.exists(_key))
        {
            common = mapCache.lookup(_key);
        }

        return common;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableId</Name>
				<Source><![CDATA[
        public TableId parmTableId(TableId _tableId = tableId)
    {
        tableId = _tableId;
        return tableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>removeKey</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Removes a key/value pair from the cache.
    /// </summary>
    /// <param name="_key">
    ///    A container that represents the key.
    /// </param>
    /// <returns>
    ///    true if the key/value pair was removed; otherwise, false.
    /// </returns>
    protected boolean removeKey(container _key)
    {
        boolean result;

        if (   mapCache
            && mapCache.exists(_key))
        {
            result = mapCache.remove(_key);
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>