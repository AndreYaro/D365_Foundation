<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSAutoRTWReleaseEnumerator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSAutoRTWReleaseEnumerator</c> class is responsible
/// for providing a mechanism of enumerating over the sales orders
/// and the order lines based on the specified query.
/// </summary>
class WHSAutoRTWReleaseEnumerator
{
    private Query   query;
    QueryRun        queryRun;

    boolean end;
    boolean firstLineInOrder;

    SalesTable  currentSalesTable;
    SalesLine   currentSalesLine;
    SalesId     salesOrderLoopSalesId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>currentSalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales line that the enumerator is currently pointing at.
    /// </summary>
    /// <returns>
    /// The sales line that the enumerator is currently pointing at.
    /// </returns>
    public SalesLine currentSalesLine()
    {
        return currentSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentSalesTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the sales order that the enumerator is currently pointing at.
    /// </summary>
    /// <returns>
    /// The sales order that the enumerator is currently pointing at.
    /// </returns>
    public SalesTable currentSalesTable()
    {
        return currentSalesTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromQuery</Name>
				<Source><![CDATA[
    private void initFromQuery(Query _query)
    {
        query = _query;
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSalesLine</Name>
				<Source><![CDATA[
    private void nextSalesLine()
    {
        end = !queryRun.next();

        currentSalesLine = queryRun.get(tableNum(SalesLine));
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSalesLineInOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the cursor to the next sales line within the sales order that enumerator is currently pointing at.
    /// </summary>
    /// <returns>
    /// true if there is another line for the current sales order; otherwise, false.
    /// </returns>
    public boolean nextSalesLineInOrder()
    {
        if (!firstLineInOrder)
        {
            this.nextSalesLine();
        }

        firstLineInOrder = salesOrderLoopSalesId != currentSalesLine.SalesId;

        return !end && !firstLineInOrder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryRunPointToFirstLineOfCurrentSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a new instance of the <c>QueryRun</c> class which points to the first line of the current Sales Order.
    /// </summary>
    private QueryRun getQueryRunPointToFirstLineOfCurrentSalesOrder()
    {
        QueryRun queryRunPointToFirstSalesLine = new QueryRun(query);
        SalesTable localSalesTable = queryRunPointToFirstSalesLine.get(tableNum(SalesTable)).data();

        while (localSalesTable.SalesId != salesOrderLoopSalesId)
        {
            if (!queryRunPointToFirstSalesLine.next())
            {
                break;
            }
            localSalesTable = queryRunPointToFirstSalesLine.get(tableNum(SalesTable)).data();
        }

        return queryRunPointToFirstSalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>restartFromFirstSalesOrderLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the queryRun to point again in the first line of the current Sales Order.
    /// </summary>
    public void restartFromFirstSalesOrderLine()
    {
        queryRun = this.getQueryRunPointToFirstLineOfCurrentSalesOrder();

        currentSalesLine = queryRun.get(tableNum(SalesLine));
        currentSalesTable = queryRun.get(tableNum(SalesTable)).data();
        salesOrderLoopSalesId = currentSalesLine.SalesId;
        firstLineInOrder = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextSalesOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the cursor to the next sales order.
    /// </summary>
    /// <returns>
    /// true if there is another sales order that fits the query; otherwise, false.
    /// </returns>
    public boolean nextSalesOrder()
    {
        while (!end && salesOrderLoopSalesId == currentSalesLine.SalesId)
        {
            this.nextSalesLine();
        }

        firstLineInOrder = true;
        salesOrderLoopSalesId = currentSalesLine.SalesId;

        if (currentSalesTable.SalesId != salesOrderLoopSalesId)
        {
            currentSalesTable = queryRun.get(tableNum(SalesTable)).data();
        }

        return !end;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static WHSAutoRTWReleaseEnumerator construct()
    {
        return new WHSAutoRTWReleaseEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the enumerator based on the specified query.
    /// </summary>
    /// <param name="_query">
    /// A query for iterating over sales orders and their lines.
    /// </param>
    /// <returns>
    /// A new instance of the <c>WHSAutoRTWReleaseEnumerator</c> class.
    /// </returns>
    public static WHSAutoRTWReleaseEnumerator newFromQuery(Query _query)
    {
        WHSAutoRTWReleaseEnumerator enumerator = WHSAutoRTWReleaseEnumerator::construct();

        enumerator.initFromQuery(_query);

        return enumerator;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>