<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntrastatTransferBE</Name>
	<SourceCode>
		<Declaration><![CDATA[
#ISOCountryRegionCodes
[IntrastatCountryRegion(#isoBE)]
class IntrastatTransferBE  extends IntrastatTransfer implements BatchRetryable
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getTaxRegistrationValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets tax registration number either from the given party address or a primary address of the party.
    /// </summary>
    /// <param name = "_party">A party.</param>
    /// <param name = "_date">An effective date on what to find tax registration number.</param>
    /// <param name = "_postalAddress">A link to postal address.</param>
    /// <returns>A tax registration number.</returns>
    protected VATNum getTaxRegistrationValue(
        DirPartyMap _party,
        date _date,
        LogisticsPostalAddress _postalAddress)
    {
        return super(
            _party,
            _date,
            _postalAddress);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static IntrastatTransferBE construct()
    {
        return new IntrastatTransferBE();
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args args)
    {
        IntrastatTransferBE intraTransfer;
        FormDataSource    intrastat_ds;

        if (args && args.dataset() == tablenum(Intrastat))
        {
            intraTransfer = IntrastatTransferBE::construct();

            intrastat_ds  = FormDataUtil::getFormDataSource(args.record());

            if (intraTransfer.prompt())
            {
                intraTransfer.runOperation();
            }
            intrastat_ds.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates an <c>Intrastat</c> line from a <c>CustInvoiceTrans</c> line of a sales order.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// <c>CustInvoiceJour</c> record realted to the <c>CustInvoiceTrans</c> line.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The source <c>CustInvoiceTrans</c> line.
    /// </param>
    /// <param name="_custInvoiceJour_Intrastat">
    /// The extension table record for <c>CustInvoiceJour</c> record.
    /// </param>
    /// <param name="_custInvoiceTrans_Intrastat">
    /// The extension table record for <c>CustInvoiceTrans</c> record.
    /// </param>
    /// <returns>
    /// The initalized <c>Intrastat</c> line.
    /// </returns>
    protected Intrastat initIntrastatFromCustInvoiceTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans, CustInvoiceJour_Intrastat _custInvoiceJour_Intrastat = null, CustInvoiceTrans_Intrastat _custInvoiceTrans_Intrastat = null)
    {
        Intrastat ret;

        ret = super(_custInvoiceJour, _custInvoiceTrans, _custInvoiceJour_Intrastat, _custInvoiceTrans_Intrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            VATNum vatNum = this.getTaxRegistrationValue(CustTable::find(ret.AccountNum), ret.TransDate, deliveryPostalAddress);
            ret.VATNum = vatNum ? vatNum : ret.VATNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromCustPckSlpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes an <c>Intrastat</c> line from a <c>CustPackingSlipTrans</c> line.
    /// </summary>
    /// <param name="_custPackingSlipJour">
    /// <c>CustPackingSlipJour</c> record realted to the <c>CustPackingSlipTrans</c> line.
    /// </param>
    /// <param name="_custPackingSlipTrans">
    /// The source <c>CustPackingSlipTrans</c> line.
    /// </param>
    /// <param name="_custPackingSlipJour_Intrastat">
    /// The extension table record for <c>CustPackingSlipJour</c> record.
    /// </param>
    /// <param name="_custPackingSlipTrans_Intrastat">
    /// The extension table record for <c>CustPackingSlipTrans</c> record.
    /// </param>
    /// <returns>
    /// The initialized <c>Intrastat</c> line.
    /// </returns>
    protected Intrastat initIntrastatFromCustPckSlpTrans(CustPackingSlipJour _custPackingSlipJour, CustPackingSlipTrans _custPackingSlipTrans, CustPackingSlipJour_Intrastat _custPackingSlipJour_Intrastat = null, CustPackingSlipTrans_Intrastat _custPackingSlipTrans_Intrastat = null)
    {
        Intrastat ret;

        ret = super(_custPackingSlipJour, _custPackingSlipTrans, _custPackingSlipJour_Intrastat, _custPackingSlipTrans_Intrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            VATNum vatNum = this.getTaxRegistrationValue(CustTable::find(ret.AccountNum), ret.TransDate, deliveryPostalAddress);
            ret.VATNum = vatNum ? vatNum : ret.VATNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromFreeCustInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates an <c>Intrastat</c> line from a <c>CustInvoiceTrans</c> line of a free text invoice.
    /// </summary>
    /// <param name="_custInvoiceJour">
    /// <c>CustPackingSlipJour</c> record realted to the <c>CustPackingSlipTrans</c> line.
    /// </param>
    /// <param name="_custInvoiceTrans">
    /// The source <c>CustPackingSlipTrans</c> line.
    /// </param>
    /// <returns>
    /// The initalized <c>Intrastat</c> line.
    /// </returns>
    protected Intrastat initIntrastatFromFreeCustInvoiceTrans(CustInvoiceJour _custInvoiceJour, CustInvoiceTrans _custInvoiceTrans)
    {
        Intrastat ret;

        ret = super(_custInvoiceJour, _custInvoiceTrans);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            VATNum vatNum = this.getTaxRegistrationValue(CustTable::find(ret.AccountNum), ret.TransDate, deliveryPostalAddress);
            ret.VATNum = vatNum ? vatNum : ret.VATNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromInventTransferJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes intrastat data from the transfer order.
    /// </summary>
    /// <param name="_direction">
    /// The direction of the transfer.
    /// </param>
    /// <param name="_inventTransferJour">
    /// The <c>InventTransferJour</c> buffer.
    /// </param>
    /// <param name="_inventTransferJourLine">
    /// The <c>InventTransferJourLine</c> buffer.
    /// </param>
    /// <returns>
    /// The <c>Intrastat</c> buffer.
    /// </returns>
    protected Intrastat initIntrastatFromInventTransferJour(IntrastatDirection _direction, InventTransferJour _inventTransferJour, InventTransferJourLine _inventTransferJourLine)
    {
        Intrastat ret;

        ret = super(_direction, _inventTransferJour, _inventTransferJourLine);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromProjInvoiceItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates an <c>Intrastat</c> line from a <c>ProjInvoiceItem</c> line
    /// </summary>
    /// <param name="_projInvoiceJour">
    /// <c>ProjInvoiceJour</c> record realted to the <c>ProjInvoiceItem</c> line.
    /// </param>
    /// <param name="_projInvoiceItem">
    /// The source <c>ProjInvoiceItem</c> line.
    /// </param>
    /// <returns>
    /// The initalized <c>Intrastat</c> line.
    /// </returns>
    protected Intrastat initIntrastatFromProjInvoiceItem(ProjInvoiceJour _projInvoiceJour, ProjInvoiceItem _projInvoiceItem)
    {
        Intrastat ret;

        ret = super(_projInvoiceJour, _projInvoiceItem);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            VATNum vatNum = this.getTaxRegistrationValue(CustTable::find(ret.AccountNum), ret.TransDate, deliveryPostalAddress);
            ret.VATNum = vatNum ? vatNum : ret.VATNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceIntrastat</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates an <c>Intrastat</c> line from a <c>VendInvoiceIntrastat</c> line of a free text invoice.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// <c>VendInvoiceJour</c> record realted to the <c>VendInvoiceIntrastat</c> line.
    /// </param>
    /// <param name="_vendInvoiceIntrastat">
    /// The source <c>VendInvoiceIntrastat</c> line.
    /// </param>
    /// <returns>
    /// The initalized <c>Intrastat</c> line.
    /// </returns>
    protected Intrastat initIntrastatFromVendInvoiceIntrastat(VendInvoiceJour _vendInvoiceJour, VendInvoiceIntrastat _vendInvoiceIntrastat)
    {
        Intrastat ret;

        ret = super(_vendInvoiceJour, _vendInvoiceIntrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            VATNum vatNum = this.getTaxRegistrationValue(
                VendTable::find(ret.AccountNum),
                ret.TransDate,
                this.primaryPostalAddress(_vendInvoiceJour.vendTable_OrderAccount().Party));
            ret.VATNum = vatNum ? vatNum : ret.VATNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendInvoiceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates an <c>Intrastat</c> line from a <c>VendInvoiceTrans</c> line.
    /// </summary>
    /// <param name="_vendInvoiceJour">
    /// <c>VendInvoiceJour</c> record realted to the <c>VendInvoiceTrans</c> line.
    /// </param>
    /// <param name="_vendInvoiceTrans">
    /// The source <c>VendInvoiceTrans</c> line.
    /// </param>
    /// <param name="_vendInvoiceJour_Intrastat">
    /// The extension table record for <c>VendInvoiceJour</c> record.
    /// </param>
    /// <param name="_vendInvoiceTrans_Intrastat">
    /// The extension table record for <c>VendInvoiceTrans</c> record.
    /// </param>
    /// <returns>
    /// The initalized <c>Intrastat</c> line.
    /// </returns>
    protected Intrastat initIntrastatFromVendInvoiceTrans(VendInvoiceJour _vendInvoiceJour, VendInvoiceTrans _vendInvoiceTrans, VendInvoiceJour_Intrastat _vendInvoiceJour_Intrastat = null, VendInvoiceTrans_Intrastat _vendInvoiceTrans_Intrastat = null)
    {
        Intrastat ret;

        ret = super(_vendInvoiceJour, _vendInvoiceTrans, _vendInvoiceJour_Intrastat, _vendInvoiceTrans_Intrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            VATNum vatNum = this.getTaxRegistrationValue(
                VendTable::find(ret.AccountNum),
                ret.TransDate,
                this.primaryPostalAddress(_vendInvoiceJour.vendTable_OrderAccount().Party));
            ret.VATNum = vatNum ? vatNum : ret.VATNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initIntrastatFromVendPckSlpTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates an <c>Intrastat</c> line from a <c>VendPackingSlipTrans</c> line.
    /// </summary>
    /// <param name="_vendPackingSlipJour">
    /// <c>VendPackingSlipJour</c> record realted to the <c>VendPackingSlipTrans</c> line.
    /// </param>
    /// <param name="_vendPackingSlipTrans">
    /// The source <c>VendPackingSlipTrans</c> line.
    /// </param>
    /// <param name="vendPackingSlipJour_Intrastat">
    /// The extension table record for <c>VendPackingSlipJour</c> record.
    /// </param>
    /// <param name="vendPackingSlipTrans_Intrastat">
    /// The extension table record for <c>VendPackingSlipTrans</c> record.
    /// </param>
    /// <returns>
    /// The initalized <c>Intrastat</c> line.
    /// </returns>
    protected Intrastat initIntrastatFromVendPckSlpTrans(VendPackingSlipJour _vendPackingSlipJour, VendPackingSlipTrans _vendPackingSlipTrans, VendPackingSlipJour_Intrastat vendPackingSlipJour_Intrastat = null, VendPackingSlipTrans_Intrastat vendPackingSlipTrans_Intrastat = null)
    {
        Intrastat ret;

        ret = super(_vendPackingSlipJour, _vendPackingSlipTrans, vendPackingSlipJour_Intrastat, vendPackingSlipTrans_Intrastat);

        if (!FeatureStateProvider::isFeatureEnabled(IntrastatTransferPartnerVATIDFeature::instance()))
        {
            VATNum vatNum = this.getTaxRegistrationValue(
                VendTable::find(ret.AccountNum),
                ret.TransDate,
                this.primaryPostalAddress(_vendPackingSlipJour.vendTable_OrderAccount().Party));
            ret.VATNum = vatNum ? vatNum : ret.VATNum;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>