<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LeanItemSupplyDemandCalculator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Calculates demand and supply statistics of an item or a group of related to kanban rule.
/// If kanban rule covers a group of items, aggregated statistic across all items is calculated.
/// Product dimensions are taken into account.
/// </summary>
public class LeanItemSupplyDemandCalculator
{
    private KanbanRule      kanbanRule;
    private LeanCoverage    leanCoverage;
    private KanbanFlow      kanbanFlow;
    private InventDim       leanCoverage_InventDim;

    private boolean isWarehousePhysicalInventoryEnabled;
    private boolean isWarehousePlanCoverageEnabled;

    private boolean isLocationPhysicalInventoryEnabled;
    private boolean isLocationPlanCoverageEnabled;

    private ReqQty                  demandQtyInLeadTime;
    private ReqQty                  demandQtyInDoubleLeadTime;
    private InventQtyAvailPhysical  physicalOnHand;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate demand and supply statistics for a given kanban rule.
    /// </summary>
    /// <param name = "_kanbanRule">Kanban rule record for which to calculate demand and supply statistics.</param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void calculate(KanbanRule _kanbanRule)
    {
        demandQtyInLeadTime         = 0;
        demandQtyInDoubleLeadTime   = 0;
        physicalOnHand              = 0;

        kanbanRule               = _kanbanRule;
        leanCoverage             = LeanCoverage::findKanbanRule(_kanbanRule.RecId);
        kanbanFlow               = _kanbanRule.kanbanFlow();
        leanCoverage_InventDim   = InventDim::find(leanCoverage.InventDimId);

        if (leanCoverage.ItemId)
        {
            this.calculateAndAggregateItemDemandAndOnHandStatistics(leanCoverage.ItemId);
        }
        else if (leanCoverage.AllocationId)
        {
            ForecastItemAllocationLine forecastItemAllocationLine;

            while select ItemId from forecastItemAllocationLine
                where forecastItemAllocationLine.AllocationId == leanCoverage.AllocationId
            {
                this.calculateAndAggregateItemDemandAndOnHandStatistics(forecastItemAllocationLine.ItemId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>demandQtyInLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get calculated demand quantity in a lead time.
    /// </summary>
    /// <returns>Calculated demand quantity in a lead time.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReqQty demandQtyInLeadTime()
    {
        return demandQtyInLeadTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>demandQtyInDoubleLeadTime</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get calculated demand quantity in double lead time.
    /// </summary>
    /// <returns>Calculated demand quantity in double lead time.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ReqQty demandQtyInDoubleLeadTime()
    {
        return demandQtyInDoubleLeadTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>physicalOnHand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get calculated physical on-hand.
    /// </summary>
    /// <returns>Calculated physical on-hand.</returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public InventQtyAvailPhysical physicalOnHand()
    {
        return physicalOnHand;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateAndAggregateItemDemandAndOnHandStatistics</Name>
				<Source><![CDATA[
    private void calculateAndAggregateItemDemandAndOnHandStatistics(ItemId _itemId)
    {
        InventTable item = InventTable::find(_itemId);

        this.getItemStorageDimensions(item);
        this.calculateOnHandForItem(item);
        this.calculateDemandForItem(item);
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventDimParmCriteria</Name>
				<Source><![CDATA[
    private InventDimParm inventDimParmCriteria(
        NoYes _inventLocationFlag,
        NoYes _wmsLocationFlag,
        InventDim _productDimsOverride)
    {
        InventDimParm inventDimParmCriteria;
        inventDimParmCriteria.InventSiteIdFlag = NoYes::Yes;
        inventDimParmCriteria.InventLocationIdFlag = _inventLocationFlag;
        inventDimParmCriteria.WmsLocationIdFlag = _wmsLocationFlag;
        inventDimParmCriteria.initFromInventDim(_productDimsOverride, InventDim::dimProductDimFieldList());
        return inventDimParmCriteria;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOnHandForItem</Name>
				<Source><![CDATA[
    private void calculateOnHandForItem(InventTable _item)
    {
        InventSum inventSum;
        InventDim inventDim;
        
        InventDim inventDimCriteria = kanbanFlow.receiptInventDim();
        inventDimCriteria.inventDimFieldsMap::initProductDimensionsFrom(leanCoverage_InventDim);

        InventDimParm inventDimParmCriteria = this.inventDimParmCriteria(isWarehousePhysicalInventoryEnabled, isLocationPhysicalInventoryEnabled, leanCoverage_InventDim);

        if (InventUseDimOfInventSumForPublicQueryToggle::instance().isEnabled())
        {
            select sum(AvailPhysical) from inventSum
                where inventSum.ItemId == _item.ItemId &&
                #InventDimFieldsFilter(inventSum, inventDimCriteria, inventDimParmCriteria);
        }
        else
        {
            select sum(AvailPhysical) from inventSum
                where inventSum.ItemId == _item.ItemId
                #InventDimExistsJoin(inventSum.InventDimId, inventDim, inventDimCriteria, inventDimParmCriteria);
        }
        
        physicalOnHand += inventSum.AvailPhysical;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateDemandForItem</Name>
				<Source><![CDATA[
    private void calculateDemandForItem(InventTable _item)
    {
        ReqTrans                reqTrans;
        ReqPlanVersion          reqPlanVersion;
        InventDim               inventDim;
        LeadTimeInventDefault   itemDefaultInventoryLeadTime;

        InventDim receiptInventDim = InventDim::findOrCreate(kanbanFlow.receiptInventDim());

        InventItemInventSetup inventItemInventSetup = InventItemInventSetup::find(_item.ItemId, receiptInventDim.InventDimId);
        if (inventItemInventSetup.Override == NoYes::Yes)
        {
            itemDefaultInventoryLeadTime = inventItemInventSetup.LeadTime;
        }
        else
        {
            itemDefaultInventoryLeadTime = InventItemInventSetup::findDefault(_item.ItemId).LeadTime;
        }

        if (itemDefaultInventoryLeadTime)
        {
            date today = DateTimeUtil::getToday(DateTimeUtil::getUserPreferredTimeZone());

            date leadTime       = today + itemDefaultInventoryLeadTime;
            date doubleLeadTime = today + (2 * itemDefaultInventoryLeadTime);

            InventDim inventDimCriteria = receiptInventDim;
            InventDimParm inventDimParmCriteria = this.inventDimParmCriteria(isWarehousePlanCoverageEnabled, isLocationPlanCoverageEnabled, leanCoverage_InventDim);
          
            while select ReqDate, Qty from reqTrans
                where reqTrans.ItemId == _item.ItemId
                    && reqTrans.ReqDate >= today
                    && reqTrans.ReqDate <= doubleLeadTime
                    && reqTrans.Direction == InventDirection::Issue
                exists join reqPlanVersion where reqPlanVersion.RecId == reqTrans.PlanVersion
                    && reqPlanVersion.ReqPlanId == ReqPlanSched::defaultDynamicId()
                    && reqPlanVersion.Active == NoYes::Yes
                #InventDimExistsJoin(reqTrans.CovInventDimId, inventDim, inventDimCriteria, inventDimParmCriteria)                
            {
                demandQtyInDoubleLeadTime += reqTrans.Qty;

                if (reqTrans.ReqDate <= leadTime)
                {
                    demandQtyInLeadTime += reqTrans.Qty;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemStorageDimensions</Name>
				<Source><![CDATA[
    private void getItemStorageDimensions(InventTable _item)
    {
        EcoResStorageDimensionGroupFldSetup ecoResStorageDimensionGroupFldSetup;
        EcoResStorageDimensionGroupRecId    ecoResStorageDimensionGroupRecId = EcoResStorageDimensionGroupItem::findByItem(_item.DataAreaId, _item.ItemId).StorageDimensionGroup;

        select firstonly IsPhysicalInventoryEnabled, IsCoveragePlanByDimensionEnabled from ecoResStorageDimensionGroupFldSetup
            where ecoResStorageDimensionGroupFldSetup.StorageDimensionGroup == ecoResStorageDimensionGroupRecId
                && ecoResStorageDimensionGroupFldSetup.DimensionFieldId     == fieldnum(InventDim, InventLocationId);

        isWarehousePhysicalInventoryEnabled = ecoResStorageDimensionGroupFldSetup.IsPhysicalInventoryEnabled;
        isWarehousePlanCoverageEnabled      = ecoResStorageDimensionGroupFldSetup.IsCoveragePlanByDimensionEnabled;

        select firstonly IsPhysicalInventoryEnabled, IsCoveragePlanByDimensionEnabled from ecoResStorageDimensionGroupFldSetup
            where ecoResStorageDimensionGroupFldSetup.StorageDimensionGroup == ecoResStorageDimensionGroupRecId
                && ecoResStorageDimensionGroupFldSetup.DimensionFieldId     == fieldnum(InventDim, WMSLocationId);

        isLocationPhysicalInventoryEnabled = ecoResStorageDimensionGroupFldSetup.IsPhysicalInventoryEnabled;
        isLocationPlanCoverageEnabled      = ecoResStorageDimensionGroupFldSetup.IsCoveragePlanByDimensionEnabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static LeanItemSupplyDemandCalculator construct()
    {
        LeanItemSupplyDemandCalculator leanItemSupplyDemandCalculator = new LeanItemSupplyDemandCalculator();

        return leanItemSupplyDemandCalculator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>