<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjUtilCategoryDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjUtilCategoryDP</c> class contains the declaration of the global variables that will be
///    used.
/// </summary>
/// <remarks>
///    This class provides methods to fetch the data that is used by the <c>ProjUtilCategory</c> report.
/// </remarks>

[
    SRSReportQueryAttribute(querystr(ProjUtilCategory)),
    SRSReportParameterAttribute(classstr(ProjUtilEmplContract))
]

public class ProjUtilCategoryDP extends SRSReportDataProviderBase
{
    ProjUtilReportParams    params;
    RealBase                utilizationHours;
    RealBase                burdenHours;
    RealBase                notIncludedHours;
    RealBase                overtimeHours;
    RealBase                normHours;
    RealBase                finalCalcResult;
    ProjHourUtilizationTmp  tmpProjUtilCategory;
    QueryRun                queryRun;
    int                     hourDec;
    int                     rateDec;
    ProjCategory            projCategoryTable;
    str                     headerLabel;
    str                     dateLabel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getProjUtilCategoryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required report data from the temporary table.
    /// </summary>
    /// <returns>
    ///    The required report data from temporary table.
    /// </returns>

    [
        SRSReportDataSetAttribute('ProjHourUtilizationTmp')
    ]
    public ProjHourUtilizationTmp getProjUtilCategoryTmp()
    {
        select tmpProjUtilCategory;
        return tmpProjUtilCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjUtilCategoryTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>

    public void insertProjUtilCategoryTmp()
    {
        tmpProjUtilCategory.Id                =   projCategoryTable.CategoryId;
        tmpProjUtilCategory.Name              =   projCategoryTable.Name;
        tmpProjUtilCategory.ConsumedHours     =   utilizationHours + burdenHours + notIncludedHours;
        tmpProjUtilCategory.NotIncludedHours  =   notIncludedHours;
        tmpProjUtilCategory.IncludedHours     =   utilizationHours + burdenHours;
        tmpProjUtilCategory.BurdenHours       =   burdenHours;
        tmpProjUtilCategory.UtilizationHours  =   utilizationHours;
        tmpProjUtilCategory.UtilizationRate   =   finalCalcResult;
        tmpProjUtilCategory.HourDec           =   hourDec;
        tmpProjUtilCategory.RateDec           =   rateDec;
        tmpProjUtilCategory.HeaderLabel       =   headerLabel;
        tmpProjUtilCategory.DateLabel         =   dateLabel;

        tmpProjUtilCategory.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        ProjUtilEmplContract contract = this.parmDataContract() as ProjUtilEmplContract;

        params = ProjUtilReportParams::construct();
        params.parmSkipZero(contract.parmProjSkipZero());

        if (contract.parmProjActualVsBudget() == ProjActualBudgetOnly::Actual)
        {
            params.parmProjUtilCalcParams().paramIsBudget(NoYes::No);
        }
        else
        {
            params.parmProjUtilCalcParams().paramIsBudget(NoYes::Yes);
            params.parmProjUtilCalcParams().paramForecastModelId(contract.parmProjForecastModelId());
        }

        params.parmProjUtilCalcParams().paramIsEfficiency(contract.parmProjIsEfficiency());
        params.parmProjUtilCalcParams().paramFromDate(contract.parmProjFromDate());
        params.parmProjUtilCalcParams().paramToDate(contract.parmProjToDate());

        hourDec = ProjParameters::find().HourQtyDecimals;
        rateDec = ProjParameters::find().UtilRateDecimals;

        this.setHeaderLabels();

        queryRun = new SysQueryRun(this.parmQuery());

        while (queryRun.next())
        {
            projCategoryTable = queryRun.get(tablenum(ProjCategory));
            params.parmProjUtilCalcParams().paramFilterValue(projCategoryTable.CategoryId);

            [utilizationHours, burdenHours, normHours, overtimeHours, notIncludedHours, finalCalcResult] =
            ProjUtilCalc::calculate(params.parmProjUtilCalcParams());

            //go on to next transaction if we don't need to display this one
            if (params.parmSkipZero())
            {
                if (utilizationHours == 0 && burdenHours == 0 && notIncludedHours == 0)
                {
                    continue;
                }
            }
            this.insertProjUtilCategoryTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setHeaderLabels</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the values for the header labels.
    /// </summary>

    public void setHeaderLabels()
    {
        str periodLbl;

        if (params.parmProjUtilCalcParams().paramIsBudget())
        {
            headerlabel=("@SYS80981" + ' ' + params.parmProjUtilCalcParams().paramForecastModelId()); //Budget
        }
        else
        {
            headerlabel="@SYS33313"; //Actual
        }

        //Date from: %1 to %2
        periodLbl = strfmt("@SYS104135", date2StrUsr(params.parmProjUtilCalcParams().paramFromDate(), DateFlags::FormatAll),
                                         date2StrUsr(params.parmProjUtilCalcParams().paramToDate() == dateMax() ? dateNull() : params.parmProjUtilCalcParams().paramToDate(), DateFlags::FormatAll));

        dateLabel = periodLbl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>
