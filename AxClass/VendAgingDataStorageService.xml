<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>VendAgingDataStorageService</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal class VendAgingDataStorageService extends SysOperationServiceBase
{
    VendAgingReportTmp vendAgingReportTmp;
    VendTmpAccountSum tmpAccountSum;
    CustVendBalanceList custVendBalanceList;
    VendAgingDataStorageContract contract;

    ColumnTxt headingDate;
    TransDate heading011;
    TransDate heading02;
    TransDate heading021;
    TransDate heading03;
    TransDate heading031;
    TransDate heading04;
    TransDate heading041;
    TransDate heading05;
    TransDate heading051;
    TransDate heading06;
    TransDate heading061;
    TransDate heading07;
    TransDate heading071;

    TransTxt heading01;
    TransTxt heading02Text;
    TransTxt heading07Text;
    TransTxt headingAgingBucketDescription02;
    TransTxt headingAgingBucketDescription03;
    TransTxt headingAgingBucketDescription04;
    TransTxt headingAgingBucketDescription05;
    TransTxt headingAgingBucketDescription06;
    TransTxt headingAgingBucketDescription07;

    private utcdatetime sysDateTime;
    private str batchRunTime;
    private str batchNameConcatRunTime;

    private const str EmptyString = '';
    private const int BackOffWait = 1000;

    #OCCRetryCount

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getReverseAmountsAndHeadings</Name>
				<Source><![CDATA[
    private static boolean getReverseAmountsAndHeadings(CustVendAgingBucketLookUp _agingBucket, ForwardBackwardPrinting _direction)
    {
        boolean reverseAmountsAndHeadings = false;

        if (_agingBucket == EmptyString && _direction == ForwardBackwardPrinting::Forward)
        {
            reverseAmountsAndHeadings = true;
        }

        return reverseAmountsAndHeadings;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cleanTempTableData</Name>
				<Source><![CDATA[
    private void cleanTempTableData()
    {
        if (vendAgingReportTmp.RecId)
        {
            vendAgingReportTmp.selectForUpdate(true);
            vendAgingReportTmp.delete();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setContractDefaults</Name>
				<Source><![CDATA[
    private void setContractDefaults()
    {
        if (!contract.parmZeroDate())
        {
            // When the zero date is not given then use the date now in user preferred time zone.
            contract.parmZeroDate(DateTimeUtil::date(sysDateTime));
        }

        if (!contract.parmBalanceAsOfDate())
        {
            // When balance as of date is not given then use the max date to include all transactions.
            contract.parmBalanceAsOfDate(dateMax());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareTmpAccountSum</Name>
				<Source><![CDATA[
    private void prepareTmpAccountSum(ForwardBackwardPrinting _tmpDirection)
    {
        QueryRun qr = new QueryRun(new Query(SysOperationHelper::base64Decode(contract.parmQuery())));
   
        custVendBalanceList = CustVendBalanceList::construct(SysModule::Vend,
                                contract.parmDateTransactionDuedate(),
                                contract.parmInterval(),
                                contract.parmBalanceAsOfDate(),
                                contract.parmZeroDate(),
                                contract.parmPayments(),
                                contract.parmPeriod(),
                                _tmpDirection,
                                contract.parmAgingBuckets(),
                                NoYes::Yes,
                                contract.parmDetailed(),
                                null,
                                NoYes::No,
                                contract.parmExcludeZeroBalanceVendor(),
                                !contract.parmPrintZeroOrNegative());

        Query query = CustVendAgingQueryConverter::convertVendors(qr.query());
        custVendBalanceList.calculateDetailsForMultiple(qr, query, contract.parmIncludeAmountCur());
        tmpAccountSum = custVendBalanceList.initTmpAccountSum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAgingDataStorageHeaderStatus</Name>
				<Source><![CDATA[
    private void updateAgingDataStorageHeaderStatus(VendAgingProcessingStatus _status)
    {
        VendAgingDataHeaderStorage vendAgingDataHeaderStorage;

        select forUpdate vendAgingDataHeaderStorage
            where vendAgingDataHeaderStorage.BatchName == batchNameConcatRunTime;
        
        vendAgingDataHeaderStorage.ProcessingStatus = _status;

        vendAgingDataHeaderStorage.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistVendAgingDataFromTmpData</Name>
				<Source><![CDATA[
    private void persistVendAgingDataFromTmpData(RefRecId _agingHeaderRecId)
    {
        VendAgingDataStorage vendAgingDataStorage;

        insert_recordset vendAgingDataStorage(agingDataHeader,
            VendAccount,
            vendName,
            vendGroup,
            criteriaDate,
            voucher,
            invoiceId,
            transactionCurrency,
            AsOfDateBalance,
            AsOfDateBalanceInTransCurrency,
            Period1Balance,
            Period1BalanceInTransCurrency,
            Period2Balance,
            Period2BalanceInTransCurrency,
            Period3Balance,
            Period3BalanceInTransCurrency,
            Period4Balance,
            Period4BalanceInTransCurrency,
            Period5Balance,
            Period5BalanceInTransCurrency,
            Period6Balance,
            Period6BalanceInTransCurrency)
        select _agingHeaderRecId, VendAccount, name, vendGroup, transDate, voucher, invoiceId, currencyCode, balance01, balance01Cur,
                   balance02, balance02Cur, balance03, balance03Cur, balance04, balance04Cur, balance05, balance05Cur, balance06, balance06Cur, balance07, balance07Cur
        from vendAgingReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistVendAgingDataHeader</Name>
				<Source><![CDATA[
    private RefRecId persistVendAgingDataHeader()
    {
        VendAgingDataHeaderStorage vendAgingDataHeaderStorage;

        try
        {
            vendAgingDataHeaderStorage.BatchName = batchNameConcatRunTime;
            vendAgingDataHeaderStorage.BatchRunTime = batchRunTime;
            vendAgingDataHeaderStorage.Filters = SysOperationHelper::base64Decode(contract.parmQuery());
            vendAgingDataHeaderStorage.AgingAsOfDate = contract.parmZeroDate();
            vendAgingDataHeaderStorage.BalanceAsOfDate = contract.parmBalanceAsOfDate();
            vendAgingDataHeaderStorage.CriteriaDateDescription = contract.parmDateTransactionDuedate();
            vendAgingDataHeaderStorage.AgingPeriodDefinition = contract.parmAgingBuckets();
            vendAgingDataHeaderStorage.IncludeAgingPeriodDescription = contract.parmIncludeAgingPeriodDescription();
            vendAgingDataHeaderStorage.CurrencySelection = contract.parmCurrencySelection();
            vendAgingDataHeaderStorage.Interval = contract.parmInterval();
            vendAgingDataHeaderStorage.DayMonth = contract.parmPeriod();
            vendAgingDataHeaderStorage.AgingDirection = contract.parmDirection();
            vendAgingDataHeaderStorage.Details = contract.parmDetailed();
            vendAgingDataHeaderStorage.IncludeAmountsInTransactionCurrency = contract.parmIncludeAmountCur();
            vendAgingDataHeaderStorage.ExcludeZeroBalanceAccounts = contract.parmExcludeZeroBalanceVendor();
            vendAgingDataHeaderStorage.NegativeBalance = contract.parmPrintZeroOrNegative();
            vendAgingDataHeaderStorage.PaymentPositioning = contract.parmPayments();
            vendAgingDataHeaderStorage.ProcessingStatus = VendAgingProcessingStatus::Started;

            var batchHeader = BatchHeader::getCurrentBatchHeader();
            if (batchHeader)
            {
                vendAgingDataHeaderStorage.BatchJobId = batchHeader.parmBatchHeaderId();
            }

            vendAgingDataHeaderStorage.insert();
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw;
            }
            else
            {
                sleep (xSession::currentRetryCount() * BackOffWait);
                retry;
            }
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }

        return vendAgingDataHeaderStorage.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>prepareVendAgingDataTmp</Name>
				<Source><![CDATA[
    private void prepareVendAgingDataTmp(boolean _reverseAmountsAndHeadings)
    {
        this.cleanTempTableData(); //ensure temp table is always empty before inserting. Relevant in retry scenario

        this.initHeadingValues();
        const int BalancePercentageAsOfDate = 100;

        CustVendTransAging custVendTransAging = custVendBalanceList.getCustVendTransAging();
        VendAgingReportDPParameters vendAgingDataDPParameters = VendAgingReportDPParameters::construct();

        vendAgingDataDPParameters.vendAgingReportTmp = vendAgingReportTmp;
        vendAgingDataDPParameters.vendTmpAccountSum = tmpAccountSum;
        vendAgingDataDPParameters.custVendTransAging = custVendTransAging;
        vendAgingDataDPParameters.reverseAmountsAndHeadings = _reverseAmountsAndHeadings;
        vendAgingDataDPParameters.ledgerCurrencySelection = contract.parmCurrencySelection();
        vendAgingDataDPParameters.balance = BalancePercentageAsOfDate;
        vendAgingDataDPParameters.headingDate = headingDate;
        vendAgingDataDPParameters.heading01 = heading01;
        vendAgingDataDPParameters.heading011 = heading011;
        vendAgingDataDPParameters.heading02 = heading02;
        vendAgingDataDPParameters.heading02Text = heading02Text;
        vendAgingDataDPParameters.heading021 = heading021;
        vendAgingDataDPParameters.heading03 = heading03;
        vendAgingDataDPParameters.heading031 = heading031;
        vendAgingDataDPParameters.heading04 = heading04;
        vendAgingDataDPParameters.heading041 = heading041;
        vendAgingDataDPParameters.heading05 = heading05;
        vendAgingDataDPParameters.heading051 = heading051;
        vendAgingDataDPParameters.heading06 = heading06;
        vendAgingDataDPParameters.heading061 = heading061;
        vendAgingDataDPParameters.heading07 = heading07;
        vendAgingDataDPParameters.heading07Text = heading07Text;
        vendAgingDataDPParameters.heading071 = heading071;
        vendAgingDataDPParameters.headingAgingBucketDescription02 = headingAgingBucketDescription02;
        vendAgingDataDPParameters.headingAgingBucketDescription03 = headingAgingBucketDescription03;
        vendAgingDataDPParameters.headingAgingBucketDescription04 = headingAgingBucketDescription04;
        vendAgingDataDPParameters.headingAgingBucketDescription05 = headingAgingBucketDescription05;
        vendAgingDataDPParameters.headingAgingBucketDescription06 = headingAgingBucketDescription06;
        vendAgingDataDPParameters.headingAgingBucketDescription07 = headingAgingBucketDescription07;
        vendAgingDataDPParameters.headingAccount = "@SYS24500";
        vendAgingDataDPParameters.headingName = "@SYS7399";
        vendAgingDataDPParameters.asOfDate = strFmt("@SYS84682", date2StrUsr(contract.parmBalanceAsOfDate(), DateFlags::FormatAll), contract.parmDateTransactionDuedate());

        VendAgingReportTmpFromVendTmpAccountSum vendAgingDataFromCustTmpAccountSum = VendAgingReportTmpFromVendTmpAccountSum::newFromCustAgingReportDP(vendAgingDataDPParameters);
        vendAgingDataFromCustTmpAccountSum.execute();
    }

]]></Source>
			</Method>
			<Method>
				<Name>persistVendAgingDataHeaderPeriodInfoFromTmpData</Name>
				<Source><![CDATA[
    private void persistVendAgingDataHeaderPeriodInfoFromTmpData()
    {
        VendAgingDataHeaderStorage vendAgingDataHeaderStorage;

        select forUpdate vendAgingDataHeaderStorage
        where vendAgingDataHeaderStorage.BatchName == batchNameConcatRunTime;

        select firstonly HeadingAgingBucketDescription02, HeadingAgingBucketDescription03, HeadingAgingBucketDescription04, HeadingAgingBucketDescription05,
            HeadingAgingBucketDescription06, HeadingAgingBucketDescription07, Heading2DateValue, Heading3, Heading4, Heading5, Heading6, Heading7DateValue,
            Heading8, Heading9, Heading10, Heading11, Heading12, Heading13, Heading14
        from vendAgingReportTmp;

        vendAgingDataHeaderStorage.BalanceAsOfDate = vendAgingReportTmp.Heading8;
        if (contract.parmAgingBuckets())
        {
            vendAgingDataHeaderStorage.AgingAsOfDate = contract.parmZeroDate();
        }
        else
        {
            vendAgingDataHeaderStorage.AgingAsOfDate = vendAgingReportTmp.Heading9;
        }

        vendAgingDataHeaderStorage.Period1Description = vendAgingReportTmp.HeadingAgingBucketDescription02;
        if (!contract.parmAgingBuckets() && contract.parmDirection() == ForwardBackwardPrinting::Backward)
        {
            vendAgingDataHeaderStorage.Period1StartDate = vendAgingReportTmp.Heading9;
            vendAgingDataHeaderStorage.Period1EndDate = dateMax();
        }
        else
        {
            vendAgingDataHeaderStorage.Period1StartDate = vendAgingReportTmp.Heading2DateValue;
            vendAgingDataHeaderStorage.Period1EndDate = vendAgingReportTmp.Heading9;
        }

        vendAgingDataHeaderStorage.Period2Description = vendAgingReportTmp.HeadingAgingBucketDescription03;
        vendAgingDataHeaderStorage.Period2StartDate = vendAgingReportTmp.Heading3;
        vendAgingDataHeaderStorage.Period2EndDate = vendAgingReportTmp.Heading10;

        vendAgingDataHeaderStorage.Period3Description = vendAgingReportTmp.HeadingAgingBucketDescription04;
        vendAgingDataHeaderStorage.Period3StartDate = vendAgingReportTmp.Heading4;
        vendAgingDataHeaderStorage.Period3EndDate = vendAgingReportTmp.Heading11;

        vendAgingDataHeaderStorage.Period4Description = vendAgingReportTmp.HeadingAgingBucketDescription05;
        vendAgingDataHeaderStorage.Period4StartDate = vendAgingReportTmp.Heading5;
        vendAgingDataHeaderStorage.Period4EndDate = vendAgingReportTmp.Heading12;

        vendAgingDataHeaderStorage.Period5Description = vendAgingReportTmp.HeadingAgingBucketDescription06;
        vendAgingDataHeaderStorage.Period5StartDate = vendAgingReportTmp.Heading6;
        vendAgingDataHeaderStorage.Period5EndDate = vendAgingReportTmp.Heading13;

        vendAgingDataHeaderStorage.Period6Description = vendAgingReportTmp.HeadingAgingBucketDescription07;
        if (!contract.parmAgingBuckets() && contract.parmDirection() == ForwardBackwardPrinting::Forward)
        {
            vendAgingDataHeaderStorage.Period6StartDate = vendAgingReportTmp.Heading14;
            vendAgingDataHeaderStorage.Period6EndDate = dateMax();
        }
        else
        {
            vendAgingDataHeaderStorage.Period6StartDate = vendAgingReportTmp.Heading7DateValue;
            vendAgingDataHeaderStorage.Period6EndDate = vendAgingReportTmp.Heading14;
        }

        vendAgingDataHeaderStorage.ProcessingStatus = VendAgingProcessingStatus::Completed;

        vendAgingDataHeaderStorage.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>process</Name>
				<Source><![CDATA[
    internal void process(VendAgingDataStorageContract _contract)
    {
        if (!FeatureStateProvider::isFeatureEnabled(VendAgingDataStorageFeature::instance()))
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.processInitialization(_contract);

        using (SysInstrumentationActivityContext activityContext = this.getActivityContext(batchNameConcatRunTime))
        {
            RefRecId agingHeaderRecId = this.persistVendAgingDataHeader();
            this.setContractDefaults();

            try
            {
                ttsbegin;

                ForwardBackwardPrinting tmpDirection = contract.parmAgingBuckets()?
                    StatRepInterval::find(contract.parmAgingBuckets()).PrintDirection: contract.parmDirection();

                this.prepareTmpAccountSum(tmpDirection);
                
                boolean reverseAmountsAndHeadings = VendAgingDataStorageService::getReverseAmountsAndHeadings(contract.parmAgingBuckets(), tmpDirection);
                this.prepareVendAgingDataTmp(reverseAmountsAndHeadings);

                this.persistVendAgingDataFromTmpData(agingHeaderRecId);
                this.persistVendAgingDataHeaderPeriodInfoFromTmpData();

                ttscommit;
            }
            catch (Exception::Deadlock)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.updateAgingDataStorageHeaderStatus(VendAgingProcessingStatus::Error);
                    throw;
                }
                else
                {
                    sleep (xSession::currentRetryCount() * BackOffWait);
                    retry;
                }
            }
            catch (Exception::UpdateConflict)
            {
                if (appl.ttsLevel() == 0)
                {
                    if (xSession::currentRetryCount() >= #RetryNum)
                    {
                        this.updateAgingDataStorageHeaderStatus(VendAgingProcessingStatus::Error);
                        throw Exception::UpdateConflictNotRecovered;
                    }
                    else
                    {
                        retry;
                    }
                }
                else
                {
                    this.updateAgingDataStorageHeaderStatus(VendAgingProcessingStatus::Error);
                    throw;
                }
            }
            catch (Exception::TransientSqlConnectionError)
            {
                if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
                {
                    retry;
                }
                else
                {
                    this.updateAgingDataStorageHeaderStatus(VendAgingProcessingStatus::Error);
                    throw;
                }
            }
            catch
            {
                this.updateAgingDataStorageHeaderStatus(VendAgingProcessingStatus::Error);
                throw;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initHeadingValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Assign and cache the heading values used for each record of the report
    /// </summary>
    private void initHeadingValues()
    {
        headingDate = this.headingDate();
        heading01 = this.heading01();
        heading011 = this.heading011();
        heading02 = this.heading02();
        heading02Text = this.heading02Text();
        heading021 = this.heading021();
        heading03 = this.heading03();
        heading031 = this.heading031();
        heading04 = this.heading04();
        heading041 = this.heading041();
        heading05 = this.heading05();
        heading051 = this.heading051();
        heading06 = this.heading06();
        heading061 = this.heading061();
        heading07 = this.heading07();
        heading07Text = this.heading07Text();
        heading071 = this.heading071();
        headingAgingBucketDescription02 = this.headingAgingBucketDescription02();
        headingAgingBucketDescription03 = this.headingAgingBucketDescription03();
        headingAgingBucketDescription04 = this.headingAgingBucketDescription04();
        headingAgingBucketDescription05 = this.headingAgingBucketDescription05();
        headingAgingBucketDescription06 = this.headingAgingBucketDescription06();
        headingAgingBucketDescription07 = this.headingAgingBucketDescription07();
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading01</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransTxt heading01()
    {
        return "@SYS137399";
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading011</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading011()
    {
        return contract.parmBalanceAsOfDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading02</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading02()
    {
        if (contract.parmAgingBuckets())
        {
            return custVendBalanceList.startdate(2);
        }
        else
        {
            return dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading021</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading021()
    {
        if (contract.parmAgingBuckets())
        {
            return custVendBalanceList.enddate(2);
        }
        else
        {
            return custVendBalanceList.enddate(3);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading02Text</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransTxt heading02Text()
    {
        if (contract.parmAgingBuckets())
        {
            return EmptyString;
        }
        else
        {
            return contract.parmDateTransactionDuedate() ? strFmt("@SYS60131", EmptyString) : "@SYS62491";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading03</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading03()
    {
        return custVendBalanceList.startdate(3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading031</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading031()
    {
        return custVendBalanceList.enddate(3);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading04</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading04()
    {
        return custVendBalanceList.startdate(4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading041</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading041()
    {
        return custVendBalanceList.enddate(4);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading05</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading05()
    {
        return custVendBalanceList.startdate(5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading051</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading051()
    {
        return custVendBalanceList.enddate(5);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading06</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading06()
    {
        return custVendBalanceList.startdate(6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading061</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading061()
    {
        return custVendBalanceList.enddate(6);
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading07</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading07()
    {
        if (contract.parmAgingBuckets())
        {
            return custVendBalanceList.startdate(7);
        }
        else
        {
            return dateNull();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading071</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransDate heading071()
    {
        if (contract.parmAgingBuckets())
        {
            return custVendBalanceList.enddate(7);
        }
        else
        {
            return custVendBalanceList.startdate(6);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>heading07Text</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading.
    /// </summary>
    /// <returns>
    /// The heading text.
    /// </returns>
    private TransTxt heading07Text()
    {
        if (contract.parmAgingBuckets())
        {
            return EmptyString;
        }
        else
        {
            return contract.parmDateTransactionDuedate() ? "@SYS29113" : "@SYS62492";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription02</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading description.
    /// </summary>
    /// <returns>
    /// The heading description text.
    /// </returns>
    private TransTxt headingAgingBucketDescription02()
    {
        if (contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(2));
        }
        else
        {
            return EmptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription03</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading description.
    /// </summary>
    /// <returns>
    /// The heading description text.
    /// </returns>
    private TransTxt headingAgingBucketDescription03()
    {
        if (contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(3));
        }
        else
        {
            return EmptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription04</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading description.
    /// </summary>
    /// <returns>
    /// The heading description text.
    /// </returns>
    private TransTxt headingAgingBucketDescription04()
    {
        if (contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(4));
        }
        else
        {
            return EmptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription05</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading description.
    /// </summary>
    /// <returns>
    /// The heading description text.
    /// </returns>
    private TransTxt headingAgingBucketDescription05()
    {
        if (contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(5));
        }
        else
        {
            return EmptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription06</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading description.
    /// </summary>
    /// <returns>
    /// The heading description text.
    /// </returns>
    private TransTxt headingAgingBucketDescription06()
    {
        if (contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(6));
        }
        else
        {
            return EmptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingAgingBucketDescription07</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the heading description.
    /// </summary>
    /// <returns>
    /// The heading description text.
    /// </returns>
    private TransTxt headingAgingBucketDescription07()
    {
        if (contract.parmAgingBuckets() && contract.parmIncludeAgingPeriodDescription())
        {
            return strFmt('%1', custVendBalanceList.getDescription(7));
        }
        else
        {
            return EmptyString;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets the heading date.
    /// </summary>
    /// <returns>
    ///     The heading date text.
    /// </returns>
    [Wrappable(true)]
    protected final ColumnTxt headingDate()
    {
        switch (contract.parmDateTransactionDuedate())
        {
            case DateTransactionDuedate::DocumentDate:
                return "@SYS2587";
            case DateTransactionDuedate::TransactionDate:
                return "@SYS67";
            case DateTransactionDuedate::DueDate:
                return "@SYS14588";
            default:
                return "@SYS14588";
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getActivityContext</Name>
				<Source><![CDATA[
    private SysInstrumentationActivityContext getActivityContext(str _activityName)
    {
        str instrumentationNamespace = classStr(VendAgingDataStorageService);

        SysInstrumentationLogger logger = SysInstrumentationLoggerFactory::CreateLogger(instrumentationNamespace);
        SysInstrumentationActivity activity = SysInstrumentationActivity::construct(_activityName, instrumentationNamespace);

        return logger.activityContextWithCustomProperties(activity);
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInitialization</Name>
				<Source><![CDATA[
    private void processInitialization(VendAgingDataStorageContract _contract)
    {
        sysDateTime = DateTimeUtil::getSystemDateTime();
        contract = _contract;
        batchRunTime = DateTimeUtil::toStr(sysDateTime);
        batchNameConcatRunTime = StrFmt('%1-%2', contract.parmBatchName(), batchRunTime);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>