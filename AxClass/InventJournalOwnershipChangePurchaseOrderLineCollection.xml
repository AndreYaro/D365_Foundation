<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>InventJournalOwnershipChangePurchaseOrderLineCollection</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>InventJournalOwnershipChangePurchaseOrderLineCollection</c> class holds a collection of inventory ownership change journal lines used when creating purchase orders.
/// </summary>
public class InventJournalOwnershipChangePurchaseOrderLineCollection
{
    Map ownershipChangeLines;
    MapEnumerator ownershipChangeLinesEnumerator;
    InventJournalOwnershipChangePurchaseOrderLine currentOwnershipChangeLine;
    Map journalLinesAdded;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addOwnershipChangeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds the <c>InventJournalTrans</c> record that contains the ownership change to the collection.
    /// </summary>
    /// <param name = "_inventOwnershipChangeJournalLine">The inventory ownership change journal line.</param>
    public void addOwnershipChangeLine(InventJournalTrans _inventOwnershipChangeJournalLine)
    {
        if (this.isOwnershipChangeJournalLineAdded(_inventOwnershipChangeJournalLine))
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        InventJournalOwnershipChangePurchaseOrderLine ownershipChangeLine = InventJournalOwnershipChangePurchaseOrderLine::newFromOwnershipChangeJournalLine(_inventOwnershipChangeJournalLine);

        var key = ownershipChangeLine.getIdentifier();

        if (journalLinesAdded.exists(key))
        {
            InventJournalOwnershipChangePurchaseOrderLine summarizedLine = ownershipChangeLines.lookup(key);

            summarizedLine.parmInventoryQuantity(summarizedLine.parmInventoryQuantity() + ownershipChangeLine.parmInventoryQuantity());
        }
        else
        {
            ownershipChangeLines.insert(key, ownershipChangeLine);

            journalLinesAdded.insert(key, new Set(Types::Real));
        }

        Set journalLines = journalLinesAdded.lookup(key);

        journalLines.add(_inventOwnershipChangeJournalLine.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentOwnershipChangeLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the <c>InventJournalOwnershipChangePurchaseOrderLine</c> class instance that the enumerator currently positions in the collection.
    /// </summary>
    /// <returns>An <c>InventJournalOwnershipChangePurchaseOrderLine</c> class instance.</returns>
    public InventJournalOwnershipChangePurchaseOrderLine currentOwnershipChangeLine()
    {
        return currentOwnershipChangeLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>elements</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the number of <c>InventJournalOwnershipChangePurchaseOrderLine</c> class instances in the collection.
    /// </summary>
    /// <returns>An integer that indicates the number of <c>InventJournalOwnershipChangePurchaseOrderLine</c> class instances in the collection.</returns>
    public int elements()
    {
        return ownershipChangeLines.elements();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeEnumerator</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the enumerator of the collection.
    /// </summary>
    /// <remarks>The enumerator can be used to enumerate through the collection.</remarks>
    public void initializeEnumerator()
    {
        ownershipChangeLinesEnumerator = ownershipChangeLines.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveNext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves the enumerator to the next <c>InventJournalOwnershipChangePurchaseOrderLine</c> class instance in the collection.
    /// </summary>
    /// <returns>A Boolean that indicates whether the enumerator successfully advances to the next <c>InventJournalOwnershipChangePurchaseOrderLine</c> class instance in the collection.</returns>
    public boolean moveNext()
    {
        boolean hasItem;

        if (ownershipChangeLinesEnumerator)
        {
            hasItem = ownershipChangeLinesEnumerator.moveNext();
        }
        else
        {
            hasItem = false;
        }

        if (hasItem)
        {
            currentOwnershipChangeLine = ownershipChangeLinesEnumerator.currentValue();
        }

        return hasItem;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reset</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the enumerator to the first <c>InventJournalOwnershipChangePurchaseOrderLine</c> class instance in the collection.
    /// </summary>
    public void reset()
    {
        if (ownershipChangeLinesEnumerator)
        {
            ownershipChangeLinesEnumerator.reset();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOwnershipChangeJournalLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the inventory ownership change journal lines associated with a purchase order line.
    /// </summary>
    /// <param name = "_purchaseOrderLine">The purchase order line.</param>
    /// <returns>A collection of inventory ownership change journal lines.</returns>
    public SetEnumerator getOwnershipChangeJournalLines(InventJournalOwnershipChangePurchaseOrderLine _purchaseOrderLine)
    {
        if (_purchaseOrderLine == null)
        {
            throw error(error::wrongUseOfFunction(funcName()));
        }

        Set journalLines = new Set(Types::Real);

        var key = _purchaseOrderLine.getIdentifier();

        if (journalLinesAdded.exists(key))
        {
            journalLines = journalLinesAdded.lookup(key);
        }

        return journalLines.getEnumerator();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOwnershipChangeJournalLineAdded</Name>
				<Source><![CDATA[
    private boolean isOwnershipChangeJournalLineAdded(InventJournalTrans _inventOwnershipChangeJournalLine)
    {
        var journalLines = journalLinesAdded.getEnumerator();

        while (journalLines.moveNext())
        {
            var journalLineIds = journalLines.currentValue();

            if (journalLineIds.in(_inventOwnershipChangeJournalLine.LineNum))
            {
                return true;
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        ownershipChangeLines = new Map(Types::String, Types::Class);
        journalLinesAdded = new Map(Types::String, Types::Class);
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static InventJournalOwnershipChangePurchaseOrderLineCollection construct()
    {
        return new InventJournalOwnershipChangePurchaseOrderLineCollection();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>