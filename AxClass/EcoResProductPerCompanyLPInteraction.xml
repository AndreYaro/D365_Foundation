<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EcoResProductPerCompanyLPInteraction</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class EcoResProductPerCompanyLPInteraction extends SysListPageInteractionBase
{
    boolean isRetailKitPerCompanyListPage;

    EcoResProductListPageButtonState listPageButtonState;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addRetailKitFilters</Name>
				<Source><![CDATA[
    private void addRetailKitFilters(Query _query)
    {
        QueryBuildDataSource queryBuildDataSource = _query.dataSourceTable(tableNum(EcoResProduct));
        queryBuildDataSource = queryBuildDataSource.addDataSource(tableNum(RetailKit));
        queryBuildDataSource.relations(true);
        queryBuildDataSource.joinMode(JoinMode::InnerJoin);
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecoResProduct</Name>
				<Source><![CDATA[
    private EcoResProduct ecoResProduct()
    {
        return this.listPage().activeRecord(
            queryDataSourceStr(EcoResProductPerCompanyListPage, EcoResProduct)) as EcoResProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ecoResProductDimensionGroupProduct</Name>
				<Source><![CDATA[
    private EcoResProductDimensionGroupProduct ecoResProductDimensionGroupProduct()
    {
        return this.listPage().activeRecord(
            queryDataSourceStr(EcoResProductPerCompanyListPage, EcoResProductDimensionGroupProduct)) as EcoResProductDimensionGroupProduct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialized</Name>
				<Source><![CDATA[
    public void initialized()
    {
        ListPageArgs args = this.listPage().listPageArgs();

        super();

        // disable New product button from the action pane if the released product listpage is opened in the context of a retail kit.
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)) && args.menuItemName() == menuitemDisplayStr(EcoResKitsPerCompanyListPage))
        {
            this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, EcoResProductCreate),
            false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeQuery</Name>
				<Source><![CDATA[
    public void initializeQuery(Query _query)
    {
        super(_query);
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            if (isRetailKitPerCompanyListPage)
            {
                this.addRetailKitFilters(_query);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializing</Name>
				<Source><![CDATA[
    public void initializing()
    {
        ListPageArgs args = this.listPage().listPageArgs();

        listPageButtonState = EcoResProductListPageButtonState::create();

        super();

        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)) && args.parameters() == 'RetailProductKitsPerCompany')
        {
            isRetailKitPerCompanyListPage = true;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>inventTable</Name>
				<Source><![CDATA[
    private InventTable inventTable()
    {
        return this.listPage().activeRecord(
            queryDataSourceStr(EcoResProductPerCompanyListPage, InventTable)) as InventTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mcrSetMCRFunctionButtonsEnabled</Name>
				<Source><![CDATA[
    private void mcrSetMCRFunctionButtonsEnabled()
    {
        // Enable or disable the installment setup button.
        this.listPage().actionPaneControlEnabled(
            formcontrolstr(EcoResProductPerCompanyListPage, MCRInstallmentSetup),
            listPageButtonState.parmMcrInstallmentEnabled());
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the enabling and disabling of Retail Kit Configure menu button based on Product Master.
    /// </summary>
    public void selectionChanged()
    {
        listPageButtonState = EcoResProductListPageButtonState::create(this.inventTable());

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setApplyTemplateButtonEnabled</Name>
				<Source><![CDATA[
    private void setApplyTemplateButtonEnabled()
    {
        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, EcoResProductTemplateApply),
            listPageButtonState.parmHasTemplate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the enabled property on the action pane buttons.
    /// </summary>
    /// <remarks>
    ///    This method should be overridden when you must disable or enable a button in the action pane. This
    ///    method is called every time that the selection of the record in the list page changes.
    /// </remarks>
    [Hookable]
    protected void setButtonEnabled()
    {
        super();

        InventTable inventTable = this.inventTable();

        this.setInventoryButtonsEnabled();
        this.setEngineerButtonsEnabled();
        this.setRetailButtonsEnabled();
        this.setPlanButtonsEnabled();
        this.setGeneralButtonsEnabled();
        if (isConfigurationkeyEnabled(configurationKeyNum(MCRCallCenter)))
        {
            this.mcrSetMCRFunctionButtonsEnabled();
        }
        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage,PdsBatchAttribByItemCustomer),
            inventTable.isItemBatchActivated() && PdsBatchAttribByItem::existItemIdAny(inventTable.ItemId));

        this.setApplyTemplateButtonEnabled();

        // <GBR>
        if (BrazilParameters::isEnabled())
        {
            this.setFciButtonEnable_BR(inventTable.ItemType == ItemType::Item);
        }
        // </GBR>

        this.setWHSButtonsEnabled(inventTable);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setButtonVisibility</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the visibility property on the buttons in the action pane.
    /// </summary>
    /// <remarks>
    ///    This method should be overridden when they must hide a button in the action pane at runtime. This
    ///    method is only called one time when the list page is opened.
    /// </remarks>
    protected void setButtonVisibility()
    {
        // <GIN>
        #ISOCountryRegionCodes
        // </GIN>

        super();

        //show invoice matching group depending on use invoice matching parameter setting
        this.listPage().actionPaneControlVisible(
            formControlStr(EcoResProductPerCompanyListPage, ButtonGroupPurchaseInvoiceMatching),
            listPageButtonState.parmEditUseInvoiceMatching());

        //show quality management group depending on use quality management parameter setting
        this.listPage().actionPaneControlVisible(
            formControlStr(EcoResProductPerCompanyListPage, ButtonGroupManageInventoryQuality),
            listPageButtonState.parmUseQualityManagement());

        // <GIN>
        this.listPage().actionPaneControlVisible(
               formControlStr(EcoResProductPerCompanyListPage, TransferPrice_IN),
               SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]));

        // </GIN>

        // <GEERU>
        this.listPage().actionPaneControlVisible(
            formControlStr(EcoResProductPerCompanyListPage, FEACCItemRelation_RU),
             listPageButtonState.parmIsLegalEntityInCountryRegionRU());
        //</GEERU>
    }

]]></Source>
			</Method>
			<Method>
				<Name>setEngineerButtonsEnabled</Name>
				<Source><![CDATA[
    private void setEngineerButtonsEnabled()
    {
        ///ActionPaneTab Engineer
        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, BOMConsistOfAction),
            listPageButtonState.parmCanHaveBOM() && listPageButtonState.parmIsInventoried());

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, BOMConsistOfActiveVersions),
            listPageButtonState.parmCanHaveBOM() && listPageButtonState.parmIsInventoried());

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, BOMDesignerAction),
            listPageButtonState.parmCanHaveBOM() && listPageButtonState.parmIsInventoried());

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, BOMConfigRouteAction),
            listPageButtonState.parmCanHaveBOM() && listPageButtonState.parmIsConfigActive() && listPageButtonState.parmIsInventoried());

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, BOMReportFinishedAction),
            listPageButtonState.parmCanBeProduced() && listPageButtonState.parmIsInventoried());

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, BOMReportFinishMaxAction),
            (listPageButtonState.parmCanBeProduced() && listPageButtonState.parmIsInventoried()) || listPageButtonState.parmIsCoByProduct()
            );

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, ConfigHierarchyAction),
            (listPageButtonState.parmCanHaveBOM()
            || listPageButtonState.parmIsFormulaAllowed())
            && listPageButtonState.parmIsConfigActive() && listPageButtonState.parmIsInventoried());

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, RouteInventProdAction),
            listPageButtonState.parmCanHaveRoute() && listPageButtonState.parmIsInventoried());

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, BOMPartOfAction),
            listPageButtonState.parmIsInventoried()
            && (listPageButtonState.parmCanHaveBOM() || listPageButtonState.parmIsServiceItem() || listPageButtonState.parmIsCoByProduct() || listPageButtonState.parmPmfProductType() == PmfProductType::None)
            );

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, ProdTableAction),
            listPageButtonState.parmIsInventoried()
            && listPageButtonState.parmCanHaveBOM()
            );

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, EcoResDimensionBasedConfiguration),
            listPageButtonState.parmIsDimensionBased() && listPageButtonState.parmIsInventoried());

        if (#PdsBatchAttribEnabled)
        {
            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductPerCompanyListPage, PdsBatchAttribByItem),
                listPageButtonState.parmBatchActivated());

            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductPerCompanyListPage, PdsBatchAttribByItemCustomer),
                listPageButtonState.parmBatchActivated());

            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductPerCompanyListPage, PdsBatchAttribInventOnhand),
                listPageButtonState.parmHasBatchAttributesItem());
        }

        if (#PmfEnabled)
        {
            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductPerCompanyListPage, PmfFormulaConsistOfAction),
                listPageButtonState.parmIsInventoried() && listPageButtonState.parmIsFormulaAllowed());

            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductPerCompanyListPage, PmfFormulaDesignerAction),
                listPageButtonState.parmIsInventoried() && listPageButtonState.parmIsFormulaAllowed());

            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductPerCompanyListPage, PmfFormulaPartOfAction),
                !listPageButtonState.parmCanHaveBOM());

            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductPerCompanyListPage, PmfPackOnHand),
                listPageButtonState.parmIsBulkorPack());

            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductPerCompanyListPage, PmfBulkItemConv),
                listPageButtonState.parmPmfProductType() == PmfProductType::Formula);

            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductPerCompanyListPage, PmfProdProcessBatchAction),
                listPageButtonState.parmIsFormulaAllowed());
        }

        this.listPage().actionPaneControlEnabled(
            formcontrolstr(EcoResProductPerCompanyListPage, ButtonGroupSequencing),
            listPageButtonState.parmIsFormulaAllowed());

        // Engineering Change Group
        this.listPage().actionPaneControlEnabled(
            formcontrolstr(EcoResProductPerCompanyListPage, EngineeringChangeGroupCreateCase),
            listPageButtonState.parmCategoryExists());

        this.listPage().actionPaneControlEnabled(
            formcontrolstr(EcoResProductPerCompanyListPage, EngineeringChangeGroupAssociateCase),
            listPageButtonState.parmCategoryExists());

        this.listPage().actionPaneControlEnabled(
            formcontrolstr(EcoResProductPerCompanyListPage, EngineeringChangeGroupAddToLog),
            listPageButtonState.parmCategoryExists());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFciButtonEnable_BR</Name>
				<Source><![CDATA[
    private void setFciButtonEnable_BR(boolean _enabled)
    {
        this.listPage().actionPaneControlEnabled(formControlStr(EcoResProductPerCompanyListPage, ButtonFci_BR),_enabled);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setGeneralButtonsEnabled</Name>
				<Source><![CDATA[
    private void setGeneralButtonsEnabled()
    {
        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, ExtCodeValueTableAction),
            !this.ecoResProduct().isProductMaster());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setInventoryButtonsEnabled</Name>
				<Source><![CDATA[
    private void setInventoryButtonsEnabled()
    {
        ///ActionPaneTab Inventory
        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, ButtonGroupManageInventoryView),
            listPageButtonState.parmIsInventoried());

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, ButtonGroupManageInventoryWarehouse),
            listPageButtonState.parmIsInventoried());

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, ButtonGroupManageInventoryQuality),
            listPageButtonState.parmIsInventoried());

        if (#PmfEnabled)
        {
            this.listPage().actionPaneControlEnabled(
                formControlStr(EcoResProductPerCompanyListPage, PdsButtonGroupDefineRegulatory),
                !listPageButtonState.parmIsServiceItem());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setPlanButtonsEnabled</Name>
				<Source><![CDATA[
    private void setPlanButtonsEnabled()
    {
        ///ActionPaneTab Plan
        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, ForecastInventAction),
            listPageButtonState.parmIsInventoried());

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, ButtonGroupPlanCoverage),
            listPageButtonState.parmIsInventoried());

        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, ButtonGroupPlanRequirement),
            listPageButtonState.parmIsInventoried());
    }

]]></Source>
			</Method>
			<Method>
				<Name>setRetailButtonsEnabled</Name>
				<Source><![CDATA[
    private void setRetailButtonsEnabled()
    {
        if (isConfigurationkeyEnabled(configurationKeyNum(Retail)))
        {
            RetailKit retailKit = RetailKit::findByProductmaster(this.inventTable().Product);

            // If the Product is not a Retail Kit disable the Retail Kit configure button
            this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, RetailKitMenuItem),
            listPageButtonState.parmisRetailKit());

            this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, RetailKitConfigurationsMenuItem),
            RetailKit::hasVariants(retailKit));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setWHSButtonsEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the WHS tab menu items.
    /// </summary>
    /// <param name="_inventTable">
    ///  An <c>InventTable</c> buffer.
    /// </param>
    protected void setWHSButtonsEnabled(InventTable _inventTable)
    {
        this.listPage().actionPaneControlEnabled(
            formControlStr(EcoResProductPerCompanyListPage, buttonWHSInventTableReservationHierarchy),
            listPageButtonState.parmIsWHSEnabled());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>