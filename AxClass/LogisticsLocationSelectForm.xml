<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LogisticsLocationSelectForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
class LogisticsLocationSelectForm
{
    FormRun callingForm;
    MCRString50 parmMCR;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allowedSources</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the entities from which the addresses can be selected.
    /// </summary>
    /// <returns>
    ///    A set of <c>LogisticsLocationSelectSourceType</c> enumeration values from which addresses can be
    ///    selected.
    /// </returns>
    public Set allowedSources()
    {
        Set allowedItems = new Set(Types::Enum);

        allowedItems.add(LogisticsLocationSelectSourceType::Customer);
        allowedItems.add(LogisticsLocationSelectSourceType::Vendor);
        allowedItems.add(LogisticsLocationSelectSourceType::Company);
        allowedItems.add(LogisticsLocationSelectSourceType::Site);
        allowedItems.add(LogisticsLocationSelectSourceType::Warehouse);

        return allowedItems;
    }

]]></Source>
			</Method>
			<Method>
				<Name>allowedSourcesWithConfigKeyEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Provides a set of entities, from which addresses can be selected, filtered by the
    /// currently enabled configuration keys.
    /// </summary>
    /// <returns>
    /// A set of <c>LogisticsLocationSelectSourceType</c> enumeration values filtered by the currently
    /// enabled configuration keys.
    /// </returns>
    public Set allowedSourcesWithConfigKeyEnabled()
    {
        Set allowedSources, allowedSourcesConfigCleanup = new Set(Types::Enum);
        SetEnumerator enumerator;
        TableId tableId;

        allowedSources = this.allowedSources();

        // Filter allowedSources on enabled Config keys
        enumerator = allowedSources.getEnumerator();
        while (enumerator.moveNext())
        {
            // Only include items that have the config key enabled
            tableId = LogisticsLocationSelectForm::sourceTypeToTableId(enumerator.current());
            if (isConfigurationkeyEnabled(new DictTable(tableId).configurationKeyId()))
            {
                allowedSourcesConfigCleanup.add(enumerator.current());
            }
        }

        return allowedSourcesConfigCleanup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyAddressToCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the selected address to the calling record.
    /// </summary>
    /// <param name="_transferFromTable">
    /// The source of the address.
    /// </param>
    /// <param name="_addressRecId">
    /// The selected address.
    /// </param>
    public void copyAddressToCaller(Common _transferFromTable, LogisticsPostalAddressRecId _addressRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateAddressName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates Loaded or Unloaded address name from <c>LogisticsPostalAddress</c> table
    /// </summary>
    /// <param name="_addressRecId">
    /// The selected address.
    /// </param>
    public void updateAddressName(LogisticsPostalAddressRecId _addressRecId)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>defaultSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    The initial selected source for addresses on the form.
    /// </summary>
    /// <returns>
    ///    The <c>LogisticsLocationSelectSourceType</c> enumeration value that corresponds to the address
    ///    source.
    /// </returns>
    public LogisticsLocationSelectSourceType defaultSource()
    {
        return LogisticsLocationSelectSourceType::BusinessRelation;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDefaultCFOP_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// gets default CFOP recid based on new address
    /// </summary>
    /// <param name="_common">
    /// Based table used to get the cfop required attributes
    /// </param>
    /// <returns>
    /// return the default CFOPTable_BR record id
    /// </returns>
    protected RecId getDefaultCFOP_BR(Common _common)
    {
        CFOPValidation_BR cfopValidation = CFOPValidation_BR::construct(_common);

        return cfopValidation.getDefaultCFOP();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLogisticsPostalAddressRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the record ID of the <c>LogisticsPostalAddress</c> that is currently selected.
    /// </summary>
    /// <returns>
    ///   The <c>LogisticsPostalAddress</c> record ID.
    /// </returns>
    public RecId getLogisticsPostalAddressRecId()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getLookupRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets the record the target form's grid should have selected upon openning.
    /// </summary>
    /// <returns>
    ///   The record to be selected.
    /// </returns>
    public Common getLookupRecord()
    {
        return null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCallingForm</Name>
				<Source><![CDATA[
    public FormRun parmCallingForm(FormRun _formRun = callingForm)
    {
        callingForm = _formRun;

        return callingForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMCRArgsParm</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Gets or sets the parm variable.
    /// </summary>
    /// <param name="_parm">
    ///     The value being passed in from args.parm(); optional.
    /// </param>
    /// <returns>
    ///     A string containing the contents of parm.
    /// </returns>
    MCRString50 parmMCRArgsParm(MCRString50 _parm = parmMCR)
    {
        parmMCR = _parm;

        return parmMCR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a <c>LogisticsLocationSelectForm</c> object.
    /// </summary>
    /// <param name="_buffer">
    ///    The record to which to copy the selected address.
    /// </param>
    /// <param name="_roleType">
    ///    Location role type that defines the field to copy the selected address reference to.
    /// </param>
    /// <returns>
    ///    A new <c>LogisticsLocationSelectForm</c> object.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    A buffer is not a supported type.
    /// </exception>
    public static LogisticsLocationSelectForm construct(Common _buffer
        , LogisticsLocationRoleType _roleType = LogisticsLocationRoleType::None
        )
    {
        switch (_buffer.TableId)
        {
            case tableNum(SalesLine):
                return LogisticsLocationSelectForm_SalesLine::construct(_buffer);

            case tableNum(SalesTable):
                return LogisticsLocationSelectForm_SalesTable::construct(_buffer);

            case tableNum(SalesCreateReleaseOrderTableTmp):
                return LogisticsLocationSelectForm_SalesCROTmp::construct(_buffer);

            case tableNum(SalesQuotationLine):
                return LogisticsLocationSelectForm_QuoteLine::construct(_buffer);

            case tableNum(SalesQuotationTable):
                return LogisticsLocationSelectForm_QuoteTable::construct(_buffer);

            case tableNum(LogisticsPostalAddress):
                return LogisticsLocationSelectForm_InventSupply::construct(_buffer);

            case tableNum(PurchRFQCaseTable):
                return LogisticsLocationSelectForm_RFQCaseTable::construct(_buffer);

            case tableNum(PurchRFQCaseLine):
                return LogisticsLocationSelectForm_RFQCaseLine::construct(_buffer);

            case tableNum(PurchRFQTable):
                return LogisticsLocationSelectForm_RFQTable::construct(_buffer);

            case tableNum(PurchRFQLine):
                return LogisticsLocationSelectForm_RFQLine::construct(_buffer);

            case tableNum(PurchTable):
                return LogisticsLocationSelectForm_PurchTable::construct(_buffer);

            case tableNum(TmpPurchTable):
                return LogisticsLocationSelectForm_TmpPurchTbl::construct(_buffer);

            case tableNum(PurchLine):
                return LogisticsLocationSelectForm_PurchLine::construct(_buffer);

            case tableNum(PurchReqLine):
                return LogisticsLocationSelectForm_PurchReqLine::construct(_buffer);

            case tableNum(ConsignmentReplenishmentOrderHeader):
                return LogisticsLocationSelectForm_ConsignmentReplenishmentOrder::construct(_buffer);

            case tableNum(ConsignmentReplenishmentOrderLine):
                return LogisticsLocationSelectForm_ConsignmentReplenishmentLine::construct(_buffer);

            case tableNum(SMAServiceOrderTable):
                return LogisticsLocationSelectForm_ServiceOrder::construct(_buffer);

            case tableNum(CustInvoiceTable):
                return LogisticsLocationSelectForm_CustFree::construct(_buffer);

            case tableNum(AgreementHeaderDefault):
                return LogisticsLocationSelectForm_Agreement::construct(_buffer);

            case tableNum(VendInvoiceInfoTable):
                return LogisticsLocationSelectForm_VendInvoiceInfoTable::construct(_buffer);

            case tableNum(VendInvoiceInfoLine):
                return LogisticsLocationSelectForm_VendInvoiceInfoLine::construct(_buffer);

            // <GTH>
            case tableNum(TaxBranch):
                return LogisticsLocationSelectForm_TaxBranch::construct(_buffer);
            // </GTH>

            // <GEEU>
            case tableNum(CzCustAdvanceInvoiceTable):
                return LogisticsLocationSelectForm_CustAdvance::construct(_buffer);

            case tableNum(CzVendAdvanceInvoiceTable):
                return LogisticsLocationSelectForm_VendAdvance::construct(_buffer);

            case tableNum(TransportationDocument):
                return LogisticsLocationSelectForm_Transptn::construct(_buffer, _roleType);
            // </GEEU>

            // <GBR>
            case tableNum(TaxFiscalDocument_BR):
                return LogisticsLocationSelectForm_TaxTransfer::construct(_buffer);
            // </GBR>

            // <GEERU>
            case tableNum(InventTransferTable):
                return LogisticsLocationSelectForm_InvTransTbl::construct(_buffer, _roleType);

            case tableNum(SalesParmTable):
                return LogisticsLocationSelectForm_SalesParmTbl::construct(_buffer, _roleType);

            case tableNum(WMSBillOfLading):
                return LogisticsLocationSelectForm_BOL::construct(_buffer, _roleType);
            case tableNum(RAssetTable):
                return LogisticsLocationSelectForm_RAssetTable::construct(_buffer);
            // </GEERU>
            default:
                var logisticsLocationSelectFormResult = new EventHandlerResult();
                LogisticsLocationSelectForm::constructDelegate(_buffer, _roleType, logisticsLocationSelectFormResult);
                if (logisticsLocationSelectFormResult.hasResult())
                {
                    return logisticsLocationSelectFormResult.result();
                }
        }

        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructDelegate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs a derived instance of <c>LogisticsLocationSelectForm</c> based on the <c>Common</c> buffer and <c>LogisticsLocationRoleType</c>.
    /// </summary>
    /// <param name = "_buffer">The record to which to copy the selected address.</param>
    /// <param name = "_roleType">Location role type that defines the field to copy the selected address reference to.</param>
    /// <param name = "_result">An <c>EventHandlerResult</c> instance, where subscribers can provide the result of type <c>LogisticsLocationSelectForm</c>.</param>
    static delegate void constructDelegate(Common _buffer, LogisticsLocationRoleType _roleType, EventHandlerResult _result)
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>findByRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns a record in the given table matching the given record ID.
    /// </summary>
    /// <param name="_tableId">
    ///   The ID of the table to find a record in.
    /// </param>
    /// <param name="_recId">
    ///   The record ID of the record to find.
    /// </param>
    /// <returns>
    ///   The record found (could be null.)
    /// </returns>
    public static Common findByRecId(RefTableId _tableId, RefRecId _recId)
    {
        Common      result;
        DictTable   dictTable = new SysDictTable(_tableId);

        if (dictTable)
        {
            result = dictTable.makeRecord();
            select firstonly result where result.RecId == _recId;
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Shows the <c>LogisticsLocationSelect</c> form.
    /// </summary>
    /// <param name="_args">
    ///    The <c>Args</c> object that is passed from the caller.
    /// </param>
    /// <param name="_showForm">
    ///    Indicates whether to show the form.
    /// </param>
    public static void main(Args _args, boolean _showForm = true)
    {
        Args callerArgs;
        FormRun formRun, callerForm;
        LogisticsLocationSelectForm selectForm;
        Common callerBuffer;
        Common lookupRecord;
        FormDataSource formDataSource;

        callerBuffer = _args.record();

        if (_args.caller())
        {
            callerForm = _args.caller();

            if (callerForm.name() == classstr(LogisticsLocationSelectionLookup))
            {
                callerArgs = _args.caller().args();
                callerBuffer = callerArgs.record();
                callerForm = callerArgs.caller();
            }
        }

        // <GEERU>
        if (! callerArgs)
        {
            callerArgs = _args;
        }
        if (callerArgs.parmEnumType() == enumNum(LogisticsLocationRoleType))
        {
            selectForm = LogisticsLocationSelectForm::construct(callerBuffer, callerArgs.parmEnum());
        }
        else
        {
            // </GEERU>
            selectForm = LogisticsLocationSelectForm::construct(callerBuffer);
            // <GEERU>
        }
        // </GEERU>
        selectForm.parmCallingForm(callerForm);

        Args thisArgs = 
            LogisticsLocationSelectForm::initLogisticsLocationSelectFormArgs(
                callerForm, callerBuffer, selectForm, _args.parm());

        formRun = classfactory.formRunClass(thisArgs);
        formRun.init();
        // make the grid of target form open with this record selected:
        lookupRecord = selectForm.getLookupRecord();
        if (lookupRecord)
        {
            // if the record is not a datasource
            // on the form, don't set thisArgs.lookupRecord
            if (formRun && formRun.dataSource(tableId2name(lookupRecord.TableId)))
            {
                formDataSource = formRun.dataSource(tableId2name(lookupRecord.TableId));
                if (!formDataSource.joinSource())
                {
                    thisArgs.lookupRecord(lookupRecord);
                }
            }
        }

        if (formRun)
        {
            if (_showForm)
            {
                formRun.run();
                formRun.wait();
            }
            if (formRun.closedOk())
            {
                // Refresh caller
                formDataSource = FormDataUtil::getFormDataSource(callerBuffer);
                formDataSource.rereadReferenceDataSources();
            }
            if (_args.caller() && _args.caller().name() == classstr(LogisticsLocationSelectionLookup))
            {
                _args.caller().close();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initLogisticsLocationSelectFormArgs</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>Args</c> instance from the given parameters.
    /// </summary>
    /// <param name = "_callerForm">The caller form.</param>
    /// <param name = "_callerBuffer">The caller buffer.</param>
    /// <param name = "_selectForm">The instance of <c>LogisticsLocationSelectForm</c>.</param>
    /// <param name = "_parm">The string parameter.</param>
    /// <returns>
    /// An instance of the <c>Args</c> class.
    /// </returns>
    protected static Args initLogisticsLocationSelectFormArgs(
        FormRun _callerForm, 
        Common _callerBuffer, 
        LogisticsLocationSelectForm _selectForm, 
        str _parm)
    {
        Args thisArgs = new Args();
        thisArgs.name(formstr(LogisticsLocationSelect));
        thisArgs.record(_callerBuffer);
        // we use parm to pass the LogisticsPostalAddress.RecId to callee:
        thisArgs.parm(int642str(_selectForm.getLogisticsPostalAddressRecId()));
        thisArgs.parmObject(_selectForm);
        // pass the calling form
        thisArgs.caller(_callerForm);
        // pass the parm
        thisArgs.parm(_parm);

        return thisArgs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resolveTaxGroup</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resolves the tax group based on the table ID of the buffer that is passed to this method.
    /// </summary>
    /// <param name="_bufferToCopyFrom">
    ///    The buffer from which to copy.
    /// </param>
    /// <returns>
    ///    The tax group.
    /// </returns>
    public static TaxGroup resolveTaxGroup(Common _bufferToCopyFrom)
    {
        TaxGroup            taxGroup;
        smmBusRelTable      smmBusRelTable;
        ProjTable           projTable;
        CustTable           custTable;
        VendTable           vendTable;
        SalesQuotationLine  salesQuotationLine;
        SalesLine           salesLine;
        PurchLine           purchLine;
        SalesTable          salesTable;
        SalesQuotationTable salesQuotationTable;
        PurchTable          purchTable;
        VendInvoiceInfoTable vendInvoiceInfoTable;
        VendInvoiceInfoLine vendInvoiceInfoLine;
        LogisticsLocation   location;

        switch (_bufferToCopyFrom.TableId)
        {
            case tableNum(smmBusRelTable):
                smmBusRelTable = _bufferToCopyFrom;
                taxGroup = smmBusRelTable.TaxGroup;
                break;

            case tableNum(CustTable):
                custTable = _bufferToCopyFrom;
                taxGroup = custTable.TaxGroup;
                break;

            case tableNum(VendTable):
                vendTable = _bufferToCopyFrom;
                taxGroup = vendTable.TaxGroup;
                break;

            case tableNum(ProjTable):
                projTable = _bufferToCopyFrom;
                taxGroup = projTable.TaxGroupId;
                break;

            case tableNum(SalesTable):
                salesTable = _bufferToCopyFrom;
                taxGroup = salesTable.TaxGroup;
                break;

            case tableNum(SalesQuotationTable):
                salesQuotationTable = _bufferToCopyFrom;
                taxGroup = salesQuotationTable.TaxGroup;
                break;

            case tableNum(PurchTable):
                purchTable = _bufferToCopyFrom;
                taxGroup = purchTable.TaxGroup;
                break;

            case tableNum(PurchLine):
                purchLine = _bufferToCopyFrom;
                taxGroup = purchLine.TaxGroup;
                break;

            case tableNum(SalesLine):
                salesLine = _bufferToCopyFrom;
                taxGroup = salesLine.TaxGroup;
                break;

            case tableNum(SalesQuotationLine):
                salesQuotationLine = _bufferToCopyFrom;
                taxGroup = salesQuotationLine.TaxGroup;
                break;

            case tableNum(LogisticsLocation):
                location = _bufferToCopyFrom;
                taxGroup = LogisticsLocationExt::find(location.RecId).TaxGroup;
                break;

            case tableNum(VendInvoiceInfoTable):
                vendInvoiceInfoTable = _bufferToCopyFrom;
                taxGroup = vendInvoiceInfoTable.TaxGroup;
                break;

            case tableNum(VendInvoiceInfoLine):
                vendInvoiceInfoLine = _bufferToCopyFrom;
                taxGroup = vendInvoiceInfoLine.TaxGroup;
                break;

            default:
                taxGroup = "";
        }

        return taxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTypeToTableId</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns the table ID for the given <c>LogisticsLocationSelectSourceType</c>.
    /// </summary>
    /// <param name="_sourceType">
    ///   The source type to get the table ID for.
    /// </param>
    /// <returns>
    ///   The table ID corresponding with the source type.
    /// </returns>
    public static TableId sourceTypeToTableId(
        LogisticsLocationSelectSourceType _sourceType)
    {
        switch (_sourceType)
        {
            case LogisticsLocationSelectSourceType::BusinessRelation:
                return tableNum(smmBusRelTable);
            case LogisticsLocationSelectSourceType::Customer:
                return tableNum(CustTable);
            case LogisticsLocationSelectSourceType::Vendor:
                return tableNum(VendTable);
            case LogisticsLocationSelectSourceType::Company:
                return tableNum(CompanyInfo);
            case LogisticsLocationSelectSourceType::Site:
                return tableNum(InventSite);
            case LogisticsLocationSelectSourceType::Warehouse:
                return tableNum(InventLocation);
            case LogisticsLocationSelectSourceType::SalesQuotation:
                return tableNum(SalesQuotationTable);
            case LogisticsLocationSelectSourceType::SalesQuotationLine:
                return tableNum(SalesQuotationLine);
            case LogisticsLocationSelectSourceType::SalesOrder:
                return tableNum(SalesTable);
            case LogisticsLocationSelectSourceType::SalesLine:
                return tableNum(SalesLine);
            case LogisticsLocationSelectSourceType::RequestForQuote:
                return tableNum(PurchRFQCaseTable);
            case LogisticsLocationSelectSourceType::RequestForQuoteLine:
                return tableNum(PurchRFQCaseLine);
            case LogisticsLocationSelectSourceType::PurchaseOrder:
                return tableNum(PurchTable);
            case LogisticsLocationSelectSourceType::PurchaseOrderLine:
                return tableNum(PurchLine);
            case LogisticsLocationSelectSourceType::PurchReqLine:
                return tableNum(PurchReqLine);
            case LogisticsLocationSelectSourceType::ServiceOrder:
                return tableNum(SMAServiceOrderTable);
            case LogisticsLocationSelectSourceType::Project:
                return tableNum(ProjTable);
            case LogisticsLocationSelectSourceType::PurchReqLineRequsterHCMWorker:
                return tableNum(HcmWorker);
            default:
                return 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableIdToSourceType</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Returns the <c>LogisticsLocationSelectSourceType</c> for the given table ID.
    /// </summary>
    /// <param name="_tableId">
    ///   The table ID to get source type for.
    /// </param>
    /// <param name="_defaultSourceType">
    ///   The source type to use when to matching value is found for the given table ID.
    /// </param>
    /// <returns>
    ///   The source type with the given table as address owner.
    /// </returns>
    public static LogisticsLocationSelectSourceType tableIdToSourceType(
        TableId                           _tableId,
        LogisticsLocationSelectSourceType _defaultSourceType
    )
    {
        LogisticsLocationSelectSourceType sourceType = _defaultSourceType;

        switch (_tableId)
        {
            case tableNum(smmBusRelTable)                       : sourceType = LogisticsLocationSelectSourceType::BusinessRelation                      ;   break;
            case tableNum(CustTable)                            : sourceType = LogisticsLocationSelectSourceType::Customer                              ;   break;
            case tableNum(VendTable)                            : sourceType = LogisticsLocationSelectSourceType::Vendor                                ;   break;
            case tableNum(CompanyInfo)                          : sourceType = LogisticsLocationSelectSourceType::Company                               ;   break;
            case tableNum(InventSite)                           : sourceType = LogisticsLocationSelectSourceType::Site                                  ;   break;
            case tableNum(InventLocation)                       : sourceType = LogisticsLocationSelectSourceType::Warehouse                             ;   break;
            case tableNum(SalesQuotationTable)                  : sourceType = LogisticsLocationSelectSourceType::SalesQuotation                        ;   break;
            case tableNum(SalesQuotationLine)                   : sourceType = LogisticsLocationSelectSourceType::SalesQuotationLine                    ;   break;
            case tableNum(SalesTable)                           : sourceType = LogisticsLocationSelectSourceType::SalesOrder                            ;   break;
            case tableNum(SalesLine)                            : sourceType = LogisticsLocationSelectSourceType::SalesLine                             ;   break;
            case tableNum(PurchRFQCaseTable)                    : sourceType = LogisticsLocationSelectSourceType::RequestForQuote                       ;   break;
            case tableNum(PurchRFQCaseLine)                     : sourceType = LogisticsLocationSelectSourceType::RequestForQuoteLine                   ;   break;
            case tableNum(PurchTable)                           : sourceType = LogisticsLocationSelectSourceType::PurchaseOrder                         ;   break;
            case tableNum(PurchLine)                            : sourceType = LogisticsLocationSelectSourceType::PurchaseOrderLine                     ;   break;
            case tableNum(PurchReqLine)                         : sourceType = LogisticsLocationSelectSourceType::PurchReqLine                          ;   break;
            case tableNum(SMAServiceOrderTable)                 : sourceType = LogisticsLocationSelectSourceType::ServiceOrder                          ;   break;
            case tableNum(ProjTable)                            : sourceType = LogisticsLocationSelectSourceType::Project                               ;   break;
            case tableNum(HcmWorker)                            : sourceType = LogisticsLocationSelectSourceType::PurchReqLineRequsterHCMWorker         ;   break;

            default:
                return _defaultSourceType;
        }
        return sourceType;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>