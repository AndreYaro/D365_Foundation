<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>rPayHRMPivotReportEngine_SheetTrans</Name>
	<SourceCode>
		<Declaration><![CDATA[
class rPayHRMPivotReportEngine_SheetTrans extends RPayHRMPivotReportEngine implements BatchRetryable
{
    ReportPeriod_RU           startPeriod;
    ReportPeriod_RU           endPeriod;
    DialogField               dfStartPeriod;
    DialogField               dfEndPeriod;

    #define.Amount("Amount")
    #define.EmplId("EmplId")
    #define.EmplName("EmplName")
    #define.OrganizationId("OrganizationId")
    #define.OrganizationName("OrganizationName")
    #define.PayPeriod("PayPeriod")
    #define.SheetType("SheetType")
    #define.SheetNum("SheetNum")
    #define.BankPayment("BankPayment")
    #define.SendToDeposit("SendToDeposit")
    #define.Deposit("Deposit")
    #define.BankGroup("BankGroup")
    #define.BankAccount("BankAccount")
    #define.Amount("Amount")
    #define.Qty("Qty")

    #DEFINE.EnumStrLen(100)

    #DEFINE.CurrentVersion(1)
    #LOCALMACRO.CurrentList
        startPeriod,
        endPeriod,
        conNameCodeFieldsSettings
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildData</Name>
				<Source><![CDATA[
    protected void buildData()
    {
        RHRMEmplTable      emplTable;
        RPaySheetTable rPaySheetTable;
        RPaySheetTrans rPaySheetTrans;
        Map            dataMap;

        this.updateQuery(queryRun.query());

        this.progressInit("@SYS60116",0, #AviTransfer);
        progress.setTotal(SysQuery::countTotal(queryRun));

        pivotTableData.rsOpen();

        while (queryRun.next())
        {
            rPaySheetTable = queryRun.get(tableNum(RPaySheetTable));
            rPaySheetTrans = queryRun.get(tableNum(RPaySheetTrans));
            emplTable      = queryRun.get(tableNum(RHRMEmplTable));

            progress.setText(strFmt("@RUP1998", emplTable.name()));
            progress.incCount();

            dataMap =  new Map(Types::String, Types::Container);

            dataMap.insert(#Amount,            [rPaySheetTrans.Amount]);
            dataMap.insert(#Qty,               [1]);
            dataMap.insert(#EmplId,            [emplTable.EmployeeId]);
            dataMap.insert(#EmplName,          [emplTable.name()]);
            dataMap.insert(#OrganizationId,    [rPaySheetTable.HrmOrganisationId]);
            dataMap.insert(#OrganizationName,  [RPayHRMOrganization::find(rPaySheetTable.HrmOrganisationId).Description]);
            dataMap.insert(#SheetNum,          [rPaySheetTable.PaySheetNum]);
            dataMap.insert(#PayPeriod,         [rPaySheetTable.PayPeriod]);
            dataMap.insert(#SheetType,         [enum2str(rPaySheetTable.PaySheetType)]);
            dataMap.insert(#BankPayment,       [enum2str(rPaySheetTrans.BankPayment)]);
            dataMap.insert(#SendToDeposit,     [enum2str(rPaySheetTrans.SendToDeposit)]);
            dataMap.insert(#Deposit,           [enum2str(rPaySheetTrans.Deposit)]);
            dataMap.insert(#BankGroup,         [RHRMPersonBankAccount::find(emplTable.rhrmPersonTable, rPaySheetTrans.EmplBankAccountId).BankGroupId]);
            dataMap.insert(#BankAccount,       [RHRMPersonBankAccount::find(emplTable.rhrmPersonTable, rPaySheetTrans.EmplBankAccountId).AccountNum]);

            pivotTableData.insertRecord(dataMap);
        }

        pivotTableData.rsUpdateBatch();

        this.progressHide();
        this.progressKill();
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
    public ClassDescription caption()
    {
        ;
        return "@RUP901";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase dialog;

        dialog = super() as DialogRunbase;
        dialog.caption(this.caption());

        dfStartPeriod = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), startPeriod, "@GLS106049");
        dfEndPeriod   = dialog.addFieldValue(extendedTypeStr(ReportPeriod_RU), endPeriod, "@GLS106050");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            pivotTableMetaData.updateCodeNameSettingsFromTable();
            startPeriod = dfStartPeriod.value();
            endPeriod   = dfEndPeriod.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPivotCodeNameFields</Name>
				<Source><![CDATA[
    protected void initPivotCodeNameFields()
    {
        DictType    dictTypeCode;

        void addCodeNameField(FieldName  _codeField,
                              FieldName  _nameField,
                              FieldLabel _fieldLabel = dictTypeCode.label())
        {
            pivotTableMetaData.addCodeNameField(_codeField,_nameField,_fieldLabel);
        }

        dictTypeCode = new DictType(extendedTypeNum(RHRMEmplId));
        addCodeNameField(#EmplId, #EmplName);

        dictTypeCode = new DictType(extendedTypeNum(RpayHRMOrganizationId));
        addCodeNameField(#OrganizationId, #OrganizationName);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initPivotMetadata</Name>
				<Source><![CDATA[
    protected void initPivotMetadata()
    {
        Map      metaDataMap;
        DictType dictType;
        DictEnum dictEnum;

        void addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup _fieldsGroup,
                                    FieldName                    _fieldName,
                                    FieldLabel                   _fieldLabel = dictType.label(),
                                    Types                        _baseType   = dictType.baseType(),
                                    int                          _stringLen  = dictType.stringLen())
        {
            metaDataMap.insert(_fieldName,[_fieldLabel, _fieldsGroup, _baseType, _stringLen]);
        }

        void addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup _fieldsGroup,
                                    FieldName                    _fieldName,
                                    FieldLabel                   _fieldLabel = dictEnum.label(),
                                    Types                        _baseType   = Types::String,
                                    int                          _stringLen  = #EnumStrLen)
        {
            metaDataMap.insert(_fieldName,[_fieldLabel, _fieldsGroup, _baseType, _stringLen]);
        }

        metaDataMap = new Map(Types::String, Types::Container);

        dictType = new DictType(extendedTypeNum(Qty));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields,#Qty);

        dictType = new DictType(extendedTypeNum(RHRMEmplId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #EmplId);

        dictType = new DictType(extendedTypeNum(DirPartyName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #EmplName);

        dictType = new DictType(extendedTypeNum(Amount));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::MeasureFields,#Amount);

        dictType = new DictType(extendedTypeNum(RpayHRMOrganizationId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #OrganizationId);

        dictType = new DictType(extendedTypeNum(RHRMOrganizationName));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::None, #OrganizationName);

        dictType = new DictType(extendedTypeNum(RPaySheetNum));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #SheetNum);

        dictType = new DictType(extendedTypeNum(ReportPeriod_RU));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #PayPeriod);

        dictEnum = new DictEnum(enumNum(RPaySheetType));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #SheetType);

        dictEnum = new DictEnum(enumNum(NoYes));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #BankPayment, "@RUP661");

        dictEnum = new DictEnum(enumNum(NoYes));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #SendToDeposit, "@RUP1258");

        dictEnum = new DictEnum(enumNum(NoYes));
        addMetaDataMapFromEnum(RPayHRMPivotTableFieldsGroup::DimensionFields, #Deposit, "@GLS105966");

        dictType = new DictType(extendedTypeNum(BankGroupId));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #BankGroup);

        dictType = new DictType(extendedTypeNum(BankAccount));
        addMetaDataMapFromType(RPayHRMPivotTableFieldsGroup::DimensionFields, #BankAccount);

        pivotTableMetaData.addFields(metaDataMap);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        container conQuery = this.queryRun().pack();
        ;

        conNameCodeFieldsSettings = pivotTableMetaData.codeNameFields().pack();
        return [#CurrentVersion, #CurrentList, conQuery];
    }

]]></Source>
			</Method>
			<Method>
				<Name>query</Name>
				<Source><![CDATA[
    public Query query()
    {
        Query                   query;
        QueryBuildDataSource    qbdsRPaySheetTable;
        QueryBuildDataSource    qbdsRPaySheetTrans;
        QueryBuildDataSource    qbdsEmplTable;

        query = new Query();

        qbdsRPaySheetTable = query.addDataSource(tableNum(RPaySheetTable));

        qbdsRPaySheetTrans = qbdsRPaySheetTable.addDataSource(tableNum(RPaySheetTrans));
        qbdsRPaySheetTrans.relations(true);

        qbdsEmplTable = qbdsRPaySheetTrans.addDataSource(tableNum(RHRMEmplTable));
        qbdsEmplTable.relations(true);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        boolean   ret;
        Version   version = RunBase::getVersion(_packedClass);
        container packedQuery = conPeek(_packedClass, conLen(_packedClass));
        ;

        switch (version)
        {
            case #CurrentVersion:
                [version, #CurrentList] = _packedClass;
                if (SysQuery::isPackedOk(packedQuery))
                {
                    queryRun = new SysQueryRun(packedQuery);
                }
                pivotTableMetaData.unpackCodeNameSettings(conNameCodeFieldsSettings);
                break;

            default :
                ret = false;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateQuery</Name>
				<Source><![CDATA[
    public void updateQuery(Query _query)
    {
        QueryBuildDataSource    qbdsRPaySheetTable;
        ;

        qbdsRPaySheetTable = _query.dataSourceTable(tableNum(RPaySheetTable));
        qbdsRPaySheetTable.addRange(fieldNum(RPaySheetTable, PayPeriod)).value(queryRange(dateStartMth(startPeriod), endmth(endPeriod)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    public boolean validate(Object calledFrom = null)
    {
        boolean ret;

        ret = super(calledFrom);

        if (ret && ! startPeriod)
        {
            ret = checkFailed("@RUP881");
        }

        if (ret && ! endPeriod)
        {
            ret = checkFailed("@RUP882");
        }

        if (ret && (startPeriod > endPeriod))
        {
            ret = checkFailed("@RUP883");
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>