<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ComplianceUserOperationLogConfHelper_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// This is helper class of form <C>ComplianceUserOperationLogConfig_CN</C>
/// </summary>
public class ComplianceUserOperationLogConfHelper_CN
{
    FormTreeControl             tables;

    Set                         setupTableIds;
    container                   tableIds;
    container                   configNames;

    #resAppl
    #ComplianceUserOperationLog_CN

    // To denote whether this node is table level or
    // configration key level
    #define.TableLevelNode(1)
    #define.ConfigKeyLevelNode(2)
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildTableTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// To build operation type tree list control.
    /// </summary>
    /// <param name="_displayAllTables">
    /// Determine whether to display all tables.
    /// </param>
    /// <param name="_force">
    /// Determine whether to force rebuild the tree list.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void buildTableTree(boolean _displayAllTables = false, boolean _force = false)
    {
        Dictionary              dict;
        int                     i;
        FormTreeItem            item;
        tableId                 tableId;
        SysDictTable            dictTable;
        int                     idx;
        FormTreeCheckedState    image;
        Map                     configKeyMap;
        str                     config;
        DatabaseLog             databaseLog;
        tableId                 sysDatabaseLogId;
        tableId                 sysUserLogId;
        TmpIdRef                tableRef;

        if (!tables || (tables.getRoot() && !_force))
        {
            return;
        }

        dict                = new Dictionary();
        configKeyMap        = new Map(Types::String, Types::Integer);
        sysDatabaseLogId    = tablenum(SysDataBaseLog);
        sysUserLogId        = tablenum(SysUserLog);

        tables.deleteAll();
        tableRef.clear();

        while select LogField, LogTable from databaseLog
            where (databaseLog.LogType  == DatabaseLogType::Delete
                    || databaseLog.LogType  == DatabaseLogType::Insert
                    || databaseLog.LogType  == DatabaseLogType::RenameKey
                    || databaseLog.LogType  == DatabaseLogType::Update)
                && databaseLog.LogTable
        {
            setupTableIds.add(databaseLog.LogTable);
        }

        for (i = dict.tableCnt(); i ; i--)
        {
            tableId                 = dict.tableCnt2Id(i);

            // All tables that are not temp table, map or system table will display
            // in the tree list control.
            if (tableId     != sysDatabaseLogId
                && tableId  != sysUserLogId
                && SysDatabaseLogWizard::tableAllowed(tableId))
            {
                dictTable           = new SysDictTable(tableId);

                if (dictTable
                    && dictTable.enabled()
                    && (dictTable.tableGroup() == TableGroup::Main
                        || _displayAllTables)
                    && !dictTable.isTmp()
                    && !dictTable.isMap()
                    && !dictTable.isTempDb())
                {
                    image           = FormTreeCheckedState::Unchecked;
                    config          = dictTable.getRootConfigKeyLabel();

                    if (!configKeyMap.exists(config))
                    {
                        item        = new FormTreeItem(config);
                        item.data(this.packData(#ConfigKeyLevelNode, 0));
                        idx         = tables.addItem(FormTreeAdd::Root, FormTreeAdd::Sort, item);
                        configKeyMap.insert(config, idx);
                    }

                    tableRef.Mode   = image;
                    tableRef.Id     = tableId;
                    tableRef.Data   = [config];
                    tableRef.insert();
                }
            }
        }

        while select tableRef
        {
            item    = new FormTreeItem(tableid2pname(any2int(tableRef.Id)), tableRef.Mode);
            item.data(this.packData(#TableLevelNode, any2int(tableRef.Id)));
            item.selectedImage(tableRef.Mode);
            tables.addItem(configKeyMap.lookup(conpeek(tableRef.Data, 1)), FormTreeAdd::Sort, item);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getItemHelpText</Name>
				<Source><![CDATA[
    /// <summary>
    /// To get help text for <C>FormTreeItem</C>.
    /// </summary>
    /// <param name="_item">
    /// Instance of <C>FormTreeItem</C>.
    /// </param>
    /// <returns>
    /// Help text of input <C>FormTreeItem</C>.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str getItemHelpText(FormTreeItem _item)
    {
        int             type;
        int             id;
        DictTable       dictTable;
        str             helpText;

        if (_item)
        {
            [type, id] = this.unpackData(_item.data());

            if (type == #TableLevelNode)
            {
                dictTable = new DictTable(id);

                if (dictTable)
                {
                    helpText = strFmt("@SYP4860130", dictTable.label(), dictTable.name());
                }
            }
        }

        if (!helpText)
        {
            helpText = "@SYS7728";
        }

        return helpText;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize instance of <C>ComplianceUserOperationLogConfHelper_CN</C>
    /// </summary>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void init()
    {
        setupTableIds       = new Set(Types::Integer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>packData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Pack of item type and id
    /// </summary>
    /// <param name="_type">
    /// Type of item
    /// </param>
    /// <param name="_id">
    /// Id of item
    /// </param>
    /// <returns>
    /// Packed result
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int packData(int _type, int _id)
    {
        return _type << 24 | _id;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedConfigNames</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmSelectedConfigNames()
    {
        return configNames;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSelectedTableIds</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container parmSelectedTableIds()
    {
        return tableIds;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTables</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public FormTreeControl parmTables(FormTreeControl _tables = tables)
    {
        tables = _tables;
        return tables;
    }

]]></Source>
			</Method>
			<Method>
				<Name>toggleItem</Name>
				<Source><![CDATA[
    /// <summary>
    /// Called when user toggle one item in the tree list control.
    /// </summary>
    /// <param name="_idx">
    /// Index of item.
    /// </param>
    /// <param name="_promptMsg">
    /// Determine whether to prompt warning message.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void toggleItem(int _idx, boolean _promptMsg = true)
    {
        int             type;
        int             id;
        FormTreeItem    item;

        item = tables.getItem(_idx);

        [type, id] = this.unpackData(item.data());

        if (type == #TableLevelNode)
        {
            if (item.stateChecked() == FormTreeCheckedState::Checked
                && _promptMsg
                && !setupTableIds.in(id))
            {
                checkFailed("@SYP4860124");
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>traverseTrees</Name>
				<Source><![CDATA[
    /// <summary>
    /// Traverse the tree to find selected node.
    /// </summary>
    /// <param name="_rootNodeIdx">
    /// Root node of the tree.
    /// </param>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void traverseTrees(int _rootNodeIdx)
    {
        FormTreeItem        rootNode;
        SysDictTable        dictTable;
        boolean             saveConfigLabel;
        int                 type;
        int                 id;

        if (!tables)
        {
            return;
        }

        rootNode            = tables.getItem(_rootNodeIdx);
        saveConfigLabel     = true;

        while (rootNode)
        {
            [type, id]      = this.unpackData(rootNode.data());

            switch (type)
            {
                case #TableLevelNode:
                    if (rootNode.stateChecked() == FormTreeCheckedState::Checked)
                    {
                        tableIds            += id;
                        if (saveConfigLabel)
                        {
                            dictTable = new SysDictTable(id);
                            configNames     += dictTable.getRootConfigKeyLabel();
                            saveConfigLabel = false;
                        }
                    }
                    break;
                case #ConfigKeyLevelNode:
                    this.traverseTrees(tables.getChild(rootNode.idx()));
                    break;
            }

            rootNode = tables.getItem(tables.getNextSibling(rootNode.idx()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpackData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Unpack to id and type
    /// </summary>
    /// <param name="_data">
    /// Packed data
    /// </param>
    /// <returns>
    /// Container of id and type of item
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container unpackData(int _data)
    {
        return [_data >> 24, _data & 0xffffff];
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>