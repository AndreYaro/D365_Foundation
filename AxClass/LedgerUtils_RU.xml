<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerUtils_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///   General ledger utilities
/// </summary>
class LedgerUtils_RU
{
    /// <summary>
    /// Creates storno ledger transactions based on _transDate, _voucher parameters.
    /// </summary>
    /// <param name="_voucherObject">
    ///   Ledgervoucher objec.
    /// </param>
    /// <param name="_transDate">
    ///   Transaction date.
    /// </param>
    /// <param name="_voucher">
    ///   Voucher
    /// </param>
    /// <param name="_taxLinks">
    ///   TaxTransGeneralJournalAccountEntry temporary table whith TaxTrans - recIDs of transactions to link to; LedgerEntry - recIDs of ledger entries being reversed.
    /// </param>
    /// <param name="_ledgerPostingType">
    ///   LedgerPostingType range for GeneralJournalAccountEntry query
    /// </param>
    /// <remarks>
    ///  Transaction date and voucher of storno transaction
    /// are inherited from this ledger voucher object;
    /// this method takes into account correspondence.
    /// </remarks>

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createLedgerTransStorno_RU</Name>
				<Source><![CDATA[
    public static void createLedgerTransStorno_RU(
        LedgerVoucherObject                _voucherObject,
        TransDate                          _transDate,
        Voucher                            _voucher,
        TaxTransGeneralJournalAccountEntry _taxLinks          = null,
        LedgerPostingType                  _ledgerPostingType = LedgerPostingType::None
    )
    {
        LedgerVoucherTransObject            ledgerVoucherTransObject;
        GeneralJournalAccountEntry          localGeneralJournalAccountEntry;
        GeneralJournalAccountEntry          offsetGeneralJournalAccountEntry;
        GeneralJournalAccountEntry_W        generalJournalAccountEntryW;
        LedgerEntry                         localLedgerEntry;
        GeneralJournalEntry                 localGeneralJournalEntry;
        SubledgerVoucherGeneralJournalEntry localSubledgerVoucherGeneralJournalEntry;
        Set                                 generalJournalAccountEntrySet = new Set(typeName2Type(extendedTypeStr(RecId)));
        LedgerBondClient_RU                 ledgerBondClient = _voucherObject.ledgerBondClient_RU();

        /// <summary>
        ///  Adds tax transaction links to given _transObject
        /// </summary>
        /// <param name="_transObject">
        ///  LedgerVoucherTransObject where tax transation relationships are inserted
        /// </param>
        /// <param name="_taxLinks">
        ///  Temporary table storing tax transaction links
        /// </param>
        /// <param name="_reversedGeneralJournalAccountEntryId">
        ///  RecID of GeneralJournalAccountEntry to filter _taxLinks
        /// </param>
        /// <remarks>
        ///  if _taxLinks is not a temporery table does nothing
        /// </remarks>
        void addStornoTaxLinks_RU(LedgerVoucherTransObject _transObject, TaxTransGeneralJournalAccountEntry _links, GeneralJournalAccountEntryRecId _reversedGeneralJournalAccountEntryId)
        {
            if (_links && _links.isTmp())
            {
                while select TaxTrans, TaxTransRelationship from _links
                    where _links.GeneralJournalAccountEntry == _reversedGeneralJournalAccountEntryId
                {
                    _transObject.addTaxTransRelationship(_links.TaxTrans, _links.TaxTransRelationship);
                }
            }
        }

        while select RecId from localSubledgerVoucherGeneralJournalEntry
            where localSubledgerVoucherGeneralJournalEntry.Voucher              == _voucher   &&
                  localSubledgerVoucherGeneralJournalEntry.VoucherDataAreaId    == curext()   &&
                  localSubledgerVoucherGeneralJournalEntry.AccountingDate       == _transDate
            join RecId, PostingLayer, JournalCategory from localGeneralJournalEntry
                where localGeneralJournalEntry.RecId  == localSubledgerVoucherGeneralJournalEntry.GeneralJournalEntry &&
                      localGeneralJournalEntry.Ledger == Ledger::current()
            join localGeneralJournalAccountEntry
                where localGeneralJournalAccountEntry.GeneralJournalEntry == localGeneralJournalEntry.RecId &&
                      (_ledgerPostingType                                 == LedgerPostingType::None        ||
                       localGeneralJournalAccountEntry.PostingType        == _ledgerPostingType)
            outer join localLedgerEntry
                where localLedgerEntry.GeneralJournalAccountEntry == localGeneralJournalAccountEntry.RecId
            outer join * from generalJournalAccountEntryW
                where generalJournalAccountEntryW.GeneralJournalAccountEntry == localGeneralJournalAccountEntry.RecId
        {
            if (generalJournalAccountEntrySet.add(localGeneralJournalAccountEntry.RecId))
            {
                ledgerVoucherTransObject = LedgerVoucherTransObject::newGeneralJournal(localGeneralJournalAccountEntry, localLedgerEntry);
                ledgerVoucherTransObject.parmTaxParentReferenceTableId(localGeneralJournalAccountEntry.TableId);
                ledgerVoucherTransObject.parmTaxParentReferenceRecId(localGeneralJournalAccountEntry.RecId);
                ledgerVoucherTransObject.invertAmounts();
                ledgerVoucherTransObject.parmIsCorrection(! localGeneralJournalAccountEntry.IsCorrection);
                addStornoTaxLinks_RU(ledgerVoucherTransObject, _taxLinks, localGeneralJournalAccountEntry.RecId);

                _voucherObject.parmPostingLayer(localGeneralJournalEntry.PostingLayer);
                _voucherObject.parmJournalCategory(localGeneralJournalEntry.JournalCategory);
                _voucherObject.addTrans(ledgerVoucherTransObject);

                if (ledgerBondClient && generalJournalAccountEntryW.hasBond_RU())
                {
                    offsetGeneralJournalAccountEntry = generalJournalAccountEntryW.bondedLine_RU();
                    generalJournalAccountEntrySet.add(offsetGeneralJournalAccountEntry.RecId);

                    ledgerVoucherTransObject = LedgerVoucherTransObject::newGeneralJournal(offsetGeneralJournalAccountEntry,
                                                                                           LedgerEntry::findByGeneralJournalAccountEntry(offsetGeneralJournalAccountEntry.RecId));
                    ledgerVoucherTransObject.parmTaxParentReferenceTableId(localGeneralJournalAccountEntry.TableId);
                    ledgerVoucherTransObject.parmTaxParentReferenceRecId(localGeneralJournalAccountEntry.RecId);
                    ledgerVoucherTransObject.invertAmounts();
                    ledgerVoucherTransObject.parmIsCorrection(!localGeneralJournalAccountEntry.IsCorrection);
                    addStornoTaxLinks_RU(ledgerVoucherTransObject, _taxLinks, offsetGeneralJournalAccountEntry.RecId);
                    _voucherObject.parmPostingLayer(localGeneralJournalEntry.PostingLayer);
                    _voucherObject.parmJournalCategory(localGeneralJournalEntry.JournalCategory);
                    _voucherObject.addTrans(ledgerVoucherTransObject);
                    ledgerBondClient.bondLast2();
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>postAmountsByTemplate</Name>
				<Source><![CDATA[
    /// <summary>
    ///  Posts given amounts using given ledger transaction object as a template.
    /// </summary>
    /// <param name="_ledgerVoucherObject">
    ///   Voucher to add transactions to.
    /// </param>
    /// <param name="_amounts">
    ///   Container of containers [correction, amount], where correction is a value of correction sign and
    /// amount is amount in transaction currency to be used.
    /// </param>
    /// <param name="_transactionTemplate">
    ///   Template storing common properties of ledger transactions. Method will clone it and replace amounts.
    /// </param>
    /// <param name="_currencyExchangeHelper">
    ///   Exchange rate parameters used to calculate accounting and reporting currency amounts.
    /// </param>
    /// <param name="_multiplier">
    ///   Each amount is multiplied by that number. Default value = 1.
    /// </param>
    /// <returns>
    ///   Container of correspondence identifiers.
    /// </returns>
    public static container postAmountsByTemplate(
        LedgerVoucherObject         _ledgerVoucherObject,
        container                   _amounts,
        LedgerVoucherTransObject    _transactionTemplate,
        CurrencyExchangeHelper      _currencyExchangeHelper,
        real                        _multiplier = 1
    )
    {
        int                         i;
        boolean                     correction;
        AmountCur                   balanceValue;
        LedgerVoucherTransObject    trans;
        container                   ret;
        LedgerBondClient_RU         bondClient = _ledgerVoucherObject.ledgerBondClient_RU();
        for (i = 1; i<=conLen(_amounts); i++)
        {
            [correction, balanceValue] = conPeek(_amounts, i);
            balanceValue = _multiplier * balanceValue;
            trans = _transactionTemplate.clone();
            trans.parmCorrect(correction);

            trans.parmTransactionCurrencyAmount(balanceValue);

            trans.parmAccountingCurrencyAmount(
                _currencyExchangeHelper.calculateTransactionToAccounting(
                    trans.parmCurrencyCode(),
                    balanceValue,
                    true
                    ));

            trans.parmReportingCurrencyAmount(
                _currencyExchangeHelper.calculateTransactionCurrencyToReportingCurrency(
                    trans.parmCurrencyCode(),
                    balanceValue));

            trans.parmGeneralJournalAccountEntry().calculateInternalValues();
            _ledgerVoucherObject.addTrans(trans);

            ret += bondClient ? bondClient.lastVrefId() : 0;
        }
        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>