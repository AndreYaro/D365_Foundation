<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TSPolicyCalendarHours</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Used to store the min and max hours obtained from the calendar for a timesheet week. This is used during policy evaluations for timesheets
/// </summary>
class TSPolicyCalendarHours
{
    Map mapMinHours;
    Map mapMaxHours;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getMaxHours</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets max hours for the given transaction date
/// </summary>
/// <param name="_transDate">
/// Date for which the hours are to be obtained
/// </param>
/// <returns>
/// Max hours for the date
/// </returns>
public Hours getMaxHours(TransDate _transDate)
{
    Hours maxDayHours = 0;

    if (mapMaxHours.exists(_transDate))
    {
        maxDayHours = mapMaxHours.lookup(_transDate);
    }

    return maxDayHours;
}

]]></Source>
			</Method>
			<Method>
				<Name>getMinHours</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets min hours for the given transaction date
/// </summary>
/// <param name="_transDate">
/// Date for which the hours are to be obtained
/// </param>
/// <returns>
/// Min hours for the date
/// </returns>
public Hours getMinHours(TransDate _transDate)
{
    Hours minDayHours = 0;

    if (mapMinHours.exists(_transDate))
    {
        minDayHours = mapMinHours.lookup(_transDate);
    }

    return minDayHours;
}

]]></Source>
			</Method>
			<Method>
				<Name>getTotalHours</Name>
				<Source><![CDATA[
    private Hours getTotalHours(Map _map)
{
    MapEnumerator   mapEnumerator;
    Hours           totalHours = 0;

    mapEnumerator = _map.getEnumerator();

    while (mapEnumerator.moveNext())
    {
       totalHours += mapEnumerator.currentValue();
    }

    return totalHours;
}

]]></Source>
			</Method>
			<Method>
				<Name>getTotalMaxHours</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the sum of all max hours stored in the map
/// </summary>
/// <returns>
/// Sum of all max hours
/// </returns>
public Hours getTotalMaxHours()
{
    return this.getTotalHours(mapMaxHours);
}

]]></Source>
			</Method>
			<Method>
				<Name>getTotalMinHours</Name>
				<Source><![CDATA[
    /// <summary>
/// Gets the sum of all min hours stored in the map
/// </summary>
/// <returns>
/// Sum of all min hours
/// </returns>
public Hours getTotalMinHours()
{
    return this.getTotalHours(mapMinHours);
}

]]></Source>
			</Method>
			<Method>
				<Name>insertMaxHours</Name>
				<Source><![CDATA[
    /// <summary>
/// Inserts the max hours for a date into the max hours map
/// </summary>
/// <param name="_transDate">
/// Date for which the hours are to be stored
/// </param>
/// <param name="_hours">
/// Hours to be stored for the date
/// </param>
public void insertMaxHours(TransDate _transDate, Hours _hours)
{
    mapMaxHours.insert(_transDate, _hours);
}

]]></Source>
			</Method>
			<Method>
				<Name>insertMinHours</Name>
				<Source><![CDATA[
    /// <summary>
/// Inserts the min hours for a date into the min hours map
/// </summary>
/// <param name="_transDate">
/// Date for which the hours are to be stored
/// </param>
/// <param name="_hours">
/// Hours to be stored for the date
/// </param>
public void insertMinHours(TransDate _transDate, Hours _hours)
{
    mapMinHours.insert(_transDate, _hours);
}

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
{
    mapMinHours = new Map(Types::Date, Types::Real);
    mapMaxHours = new Map(Types::Date, Types::Real);
}

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static TSPolicyCalendarHours  construct()
{
    return new TSPolicyCalendarHours();
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>