<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchInvoice4PaymController</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Handles form letter style print management for Purchase order - invoice for payment.
/// </summary>
class PurchInvoice4PaymController extends SrsPrintMgmtFormLetterController implements BatchRetryable
{
    PrintCopyOriginal                   printCopyOriginal;
    RecordSortedList                    journalList;
    PurchInvoice4PaymJournalPrint_RU    purchInvoice4PaymJournalPrint;
    VendInvoice4PaymJour_RU             vendInvoice4PaymJour;
    // There's no SSRS report on PurchInvoice4Paym, using VendInvoiceDocument
    VendInvoiceDocumentContract         vendInvoiceDocumentContract;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initFormLetterReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a report and sets the print management.
    /// </summary>
    protected void initFormLetterReport()
    {
        printCopyOriginal = this.parmArgs().parmEnum();

        if (classIdGet(this.parmArgs().caller()) == classNum(PurchInvoice4PaymJournalPrint_RU))
        {
            // Set the caller
            purchInvoice4PaymJournalPrint = this.parmArgs().caller();
        }

        if (this.parmArgs().record())
        {
            // Get journal list from the selected record/s
            journalList = FormLetter::createJournalListCopy(this.parmArgs().record());
        }
        else
        {
            journalList = this.parmArgs().object();
        }

        formLetterReport = FormLetterReport::construct(PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU);

        formLetterReport.parmPrintType(printCopyOriginal);

        if (purchInvoice4PaymJournalPrint)
        {
            // Get the print settings
            formLetterReport.parmDefaultCopyPrintJobSettings(new SRSPrintDestinationSettings(purchInvoice4PaymJournalPrint.parmPrinterSettingsFormLetterCopy()));
            formLetterReport.parmDefaultOriginalPrintJobSettings(new SRSPrintDestinationSettings(purchInvoice4PaymJournalPrint.parmPrinterSettingsFormLetter()));
            formLetterReport.parmUsePrintMgmtDestinations(purchInvoice4PaymJournalPrint.parmUsePrintManagement());
        }
        else if (printCopyOriginal == PrintCopyOriginal::OriginalPrint)
        {
            // Always use the print mgmt destinations when reprinting for the OriginalPrint case.
            formLetterReport.parmUsePrintMgmtDestinations(true);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>preRunModifyContract</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the <c>SRSReportParameters</c> values to a report contract.
    /// </summary>
    protected void preRunModifyContract()
    {
        SRSTmpDataStore srsTmpDataStore;

        if (!vendInvoiceDocumentContract)
        {
            vendInvoiceDocumentContract = this.parmReportContract().parmRdpContract();
        }

        vendInvoiceDocumentContract.parmPrintCopyOriginal(printCopyOriginal);

        vendInvoiceDocumentContract.parmRecordId(vendInvoice4PaymJour.RecId);
        SrsReportRdlDataContract rdlCotract = this.parmReportContract().parmRdlContract();

        rdlCotract.parmLanguageId(vendInvoice4PaymJour.LanguageId);
        rdlCotract.parmLabelLanguageId(vendInvoice4PaymJour.LanguageId);

        if (purchInvoice4PaymJournalPrint)
        {
            // Pack the class and insert into the temporary store.
            srsTmpDataStore.Value = purchInvoice4PaymJournalPrint.pack();
            srsTmpDataStore.insert();

            // Set the rec id to contract parameter
            vendInvoiceDocumentContract.parmFormLetterRecordId(srsTmpDataStore.RecId);
        }

        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>runPrintMgmt</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs a print report.
    /// </summary>
    protected void runPrintMgmt()
    {
        Common                  printMgmtReferencedTable;

        if (!journalList)
        {
            throw error("@SYS26348");
        }

        journalList.first(vendInvoice4PaymJour);

        do
        {
            if (!vendInvoice4PaymJour)
            {
                throw error("@SYS26348");
            }

            printMgmtReferencedTable = vendInvoice4PaymJour.purchTable();

            formLetterReport.loadPrintSettings(vendInvoice4PaymJour, printMgmtReferencedTable, vendInvoice4PaymJour.LanguageId);
            this.outputReports();
        }
        while (journalList.next(vendInvoice4PaymJour) && !this.parmCancelRun());
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initailzes the controller, sets the print management, assigns parameter values and runs the SRS report.
    /// </summary>
    /// <param name="_args">
    /// The <c>Args</c> object.
    /// </param>
    public static void main(Args _args)
    {
        PurchInvoice4PaymController formLetterController = new PurchInvoice4PaymController();

        if (!NonSSRSPrintMgmtAdapter::runPrintMgmtNonSSRS(PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU, _args))
        {
            return;
        }

        formLetterController.parmArgs(_args);
        formLetterController.parmReportName(PrintMgmtDocType::construct(PrintMgmtDocumentType::PurchOrderInvoice4Paym_RU).getDefaultReportFormat());
        formLetterController.parmShowDialog(false);
        formLetterController.startOperation();
    }

]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>