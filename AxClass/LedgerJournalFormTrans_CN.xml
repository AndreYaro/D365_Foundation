<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalFormTrans_CN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>LedgerJournalFormTable_CN</c> class is a helper class for the <c>LedgerJournalVoucher_CN</c> form.
/// It helps the form initialization and managing the enabled state of controls for journal hearder part.
/// </summary>
class LedgerJournalFormTrans_CN extends LedgerJournalFormTrans
{
    //"Add"
    FormCommandButtonControl    ctrlAddbutton;
    //"Remove"
    FormCommandButtonControl    ctrlDeleteButton;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>datasourceLinkActivePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the logic before the Datasouce.LinkActive super() method.
    /// </summary>
    public void datasourceLinkActivePre()
    {
        this.initJournalTransFromCaller();
        this.initDatasourceAllow();
        this.initButtons();

        this.initFormElementEnablingValues();
    }

]]></Source>
			</Method>
			<Method>
				<Name>formClosePre</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the logic before the form close super() method.
    /// </summary>
    public void formClosePre()
    {
        if (journalTableData)
        {
            this.updateJournalTableBlock(JournalBlockLevel::InUse,JournalBlockLevel::None);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>formInitPost</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the logic after form Init supper() method.
    /// </summary>
    public void formInitPost()
    {
        this.initJournalFormTable();

        initJournalTypeId = journalFormTable.journalTypeId();

        ledgerJournalEngine = formRunObject.ledgerJournalEngine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initButtons</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the form buttons state.
    /// </summary>
    protected void initButtons()
    {
        LedgerJournalTable              ledgerJournalTable = LedgerJournalEngine.parmLedgerJournalTable();
        boolean                         enabled;
        LedgerJournalEngine_Daily_CN    ledgerJournalEngine_Daily_CN = ledgerJournalEngine;
        ;
        enabled = ledgerJournalEngine_Daily_CN.allowEdit();

        if (ctrlAddbutton)
        {
            ctrlAddbutton.enabled(enabled);
        }

        if (ctrlDeleteButton)
        {
            ctrlDeleteButton.enabled(enabled);
        }

        if (ctrlDimensionMenu)
        {
            ctrlDimensionMenu.enabled(formRunObject.parmJournalBlockedSuccessful() && ledgerJournalTable.RecId);
        }

        if (ctrlFunctionMenu)
        {
            ctrlFunctionMenu.enabled(formRunObject.parmJournalBlockedSuccessful() && ledgerJournalTable.RecId);
        }

        this.setBalanceControlButtonEnabled();
        this.setSaveVoucherTemplateButtonEnabled();
        this.setSelectVoucherTemplateButtonEnabled();
        this.setVoucherTransButtonEnabled();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDatasourceAllow</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set the datasouce and related controls editable and enabled state.
    /// </summary>
    public void initDatasourceAllow()
    {
        boolean             allow;
        LedgerJournalTable  ledgerJournalTable;
        NumberSequenceTable numberSequenceTable;
        ;

        ledgerJournalTable  = ledgerJournalEngine.parmLedgerJournalTable();

        //Set the data source prop.
        if (formrunObject.parmJournalBlockedSuccessful() && !ledgerJournalTable.Posted )
        {
            JournalTrans_ds.allowEdit(true);
            JournalTrans_ds.allowCreate(true);
            JournalTrans_ds.allowDelete(true);
        }
        else
        {
            JournalTrans_ds.allowEdit(false);
            JournalTrans_ds.allowCreate(false);
            JournalTrans_ds.allowDelete(false);
        }

        //Set the voucher field prop.
        if (!ctrlVoucherGrid )
        {
            return;
        }

        allow = journalTrans_ds.allowEdit();

        if (allow)
        {
            numberSequenceTable = NumberSequenceTable::find(ledgerJournalTable.NumberSequenceTable);

            allow = allow && (ledgerJournalTable.ledgerJournalName().NewVoucher == NewVoucher::Manually ||
                              numberSequenceTable.AllowChangeDown                                       ||
                              numberSequenceTable.AllowChangeUp);
        }

        if (ctrlVoucherGrid)
        {
            ctrlVoucherGrid.enabled(allow);

            //if the voucher field is allowed to edit, show the voucher field in vouchers grid, otherwise hide it.
            if (allow)
                ctrlVoucherGrid.visible(true);
            else
                ctrlVoucherGrid.visible(false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalFormTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the caller and journalFormTable object reference.
    /// </summary>
    protected void initJournalFormTable()
    {
        Object  callerForm;

        callerForm = formRun;
        journalFormTable = callerForm.journalForm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initJournalTransFromCaller</Name>
				<Source><![CDATA[
    /// <summary>
    /// Perform the logic to lock/unlock the journal header, and do the corresponding refresh.
    /// </summary>
    protected void initJournalTransFromCaller()
    {
        FormDataSource      ledgerJournalTableDS;
        LedgerJournalTable  ledgerJournalTableLocal;

        JournalTableMap tmp = journalFormTable.journalTableData().journalTable().data();

        // Is journalId changed ?
        if (! journalTableData || journalTableData.journalTable().JournalId != tmp.JournalId)
        {
            if (journalTableData)
            {
                //Before trying to update the block level, check whether journal exits, since if the journal is deleted,
                //No need to update the Block level and call updateFormCacheJournalTable any more.
                if (LedgerJournalTable::exist(journalTableData.journalTable().JournalId))
                {
                    this.updateJournalTableBlock(JournalBlockLevel::InUse,JournalBlockLevel::None);
                    journalFormTable.updateFormCacheJournalTable(this.journalTableData().journalTable(),true);
                    //refresh the form datasouce, this is for refresh the 'In use' image field.
                    ledgerJournalTableDS = journalFormTable.journalTable_DS();
                    if (ledgerJournalTableDS)
                    {
                        ledgerJournalTableLocal = ledgerJournalTableDS.getFirst();
                        while (ledgerJournalTableLocal)
                        {
                            if (ledgerJournalTableLocal.RecId == journalTableData.journalTable().RecId)
                            {
                                ledgerJournalTableLocal.reread();
                                ledgerJournalTableDS.setRecord(ledgerJournalTableLocal);
                                ledgerJournalTableDS.refresh();
                                break;
                            }
                            ledgerJournalTableLocal = ledgerJournalTableDS.getNext();
                        }
                    }
                }

                if (journalTableData.journalVoucherNum())
                {
                    journalTableData.journalVoucherNum().abort();
                }
                journalTableData = null;
                journalTransData = null;
            }

            if (tmp.RecId && journalFormTable.journalTableData().journalTable().JournalType == initJournalTypeId)
            {
                journalTableData    = JournalTableData::newTable(tmp);
                journalTransData    = journalTableData.journalStatic().newJournalTransData(journalTrans,journalTableData);

                try
                {
                    this.updateJournalTableBlock(JournalBlockLevel::None, JournalBlockLevel::InUse);
                    journalFormTable.updateFormCacheCurrent(journalTableData.journalTable());

                    //Block the journal successful
                    formRunobject.parmJournalBlockedSuccessful(true);
                    //set the journal table data source
                    journalFormTable.initDatasourceAllow();
                    journalFormTable.enableButtonsActive(false);
                    journalFormTable.enableFieldsActive();

                    //refresh the form datasouce, this is for refresh the 'In use' image field.
                    ledgerJournalTableDS = journalFormTable.journalTable_DS();
                    if (ledgerJournalTableDS)
                    {
                        ledgerJournalTableLocal = ledgerJournalTableDS.getFirst();
                        while (ledgerJournalTableLocal)
                        {
                            if (ledgerJournalTableLocal.RecId == journalTableData.journalTable().RecId)
                            {
                                ledgerJournalTableLocal.reread();
                                ledgerJournalTableDS.setRecord(ledgerJournalTableLocal);
                                ledgerJournalTableDS.refresh();
                                break;
                            }
                            ledgerJournalTableLocal = ledgerJournalTableDS.getNext();
                        }
                    }
                }
                catch (Exception::Error)
                {
                    //Block the journal failed
                    formRunobject.parmJournalBlockedSuccessful(false);

                    ttsbegin;

                    journalFormTable.updateFormCacheCurrent(journalTableData.journalStatic().findJournalTable(tmp.JournalId,true),true);
                    if (journalFormTable.journalTable_DS())
                    {
                        journalFormTable.journalTable_DS().active();
                    }

                    ttscommit;

                    if (journalTableData.journalVoucherNum())
                    {
                        journalTableData.journalVoucherNum().abort();
                    }

                    journalTableData = null;
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isJournalEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicate whether the journal is enabled or not.
    /// </summary>
    /// <returns>a boolean value to indicate whether the journal is enabled or not.</returns>
    public boolean isJournalEnabled()
    {
        boolean                         enabled;
        LedgerJournalEngine_Daily_CN    ledgerJournalEngine_Daily_CN = ledgerJournalEngine;
        ;

        enabled = formRunObject.parmJournalBlockedSuccessful();
        enabled = enabled && ledgerJournalEngine_Daily_CN.allowEdit();

        return enabled;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlAddbutton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set or get the Add button control of the Journal lines.
    /// </summary>
    /// <param name="_ctrlAddbutton">Add button control to set</param>
    /// <returns>Return Add button control.</returns>
    public FormCommandButtonControl parmCtrlAddbutton(FormCommandButtonControl _ctrlAddbutton = ctrlAddbutton)
    {
        ctrlAddbutton = _ctrlAddbutton;

        return ctrlAddbutton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCtrlDeleteButton</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set or get the Delete button control of journal lines.
    /// </summary>
    /// <param name="_ctrlDeleteButton">the Delete button control to set.</param>
    /// <returns>Return the Delete button control.</returns>
    public FormCommandButtonControl parmCtrlDeleteButton(FormCommandButtonControl _ctrlDeleteButton = ctrlDeleteButton)
    {
        ctrlDeleteButton = _ctrlDeleteButton;

        return ctrlDeleteButton;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmInitJournalTypeId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get or set the Initialized journal type of the form.
    /// </summary>
    /// <param name="_initJournalTypeId">Ledger journal type to set.</param>
    /// <returns>return the Initialized journal type.</returns>
    public LedgerJournalType parmInitJournalTypeId(LedgerJournalType _initJournalTypeId = initJournalTypeId)
    {
        initJournalTypeId = _initJournalTypeId;

        return any2Enum(initJournalTypeId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLedgerJournalEngine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Set or get the LedgerJournalEngine object.
    /// </summary>
    /// <param name="_ledgerJournalEngine">The LedgerJournalEngine object to set.</param>
    /// <returns>Return the LedgerJournalEngine object.</returns>
    public LedgerJournalEngine parmLedgerJournalEngine(LedgerJournalEngine _ledgerJournalEngine = ledgerJournalEngine)
    {
        ledgerJournalEngine = _ledgerJournalEngine;

        return ledgerJournalEngine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setCheckMenuButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Override to suppress the supper call logic. the checkMenuButton is haddled by header part already.
    /// </summary>
    protected void setCheckMenuButtonEnabled()
    {
        //Suppress the supper call. the checkMenuButton is haddled by header part logic.
        //super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSelectVoucherTemplateButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Enables or disables the Select voucher template menu item on the lines form.
    /// </summary>
    protected void setSelectVoucherTemplateButtonEnabled()
    {
        boolean enabled;

        if (ctrlSelectVoucherTemplateButton)
        {
           enabled = this.isJournalEnabled();

           ctrlSelectVoucherTemplateButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setVoucherTransButtonEnabled</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the enabled state of the button.
    /// </summary>
    protected void setVoucherTransButtonEnabled()
    {
        boolean enabled = formRunObject.parmJournalBlockedSuccessful() && ledgerJournalEngine.posted();

        if (ctrlVoucherTransButton)
        {
            ctrlVoucherTransButton.enabled(enabled);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>