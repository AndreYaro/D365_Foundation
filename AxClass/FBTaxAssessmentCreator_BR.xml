<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>FBTaxAssessmentCreator_BR</Name>
	<SourceCode>
		<Declaration><![CDATA[
static class FBTaxAssessmentCreator_BR
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createTaxAssessmentICMS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ICMS tax assessment
    /// </summary>
    /// <param name="_fbBookingPeriod">
    /// A <c>FBBookingPeriod_BR</c> table record
    /// </param>
    /// <param name="_fbGeneralAdjustmentCodeRecId">
    /// The record ID of the <c>FBGeneralAdjustmentCodeICMS_BR</c> record
    /// </param>
    /// <param name="_fbGeneralAdjustmentCodeFixedAssetRecId">
    /// The record ID of the <c>FBGeneralAdjustmentCodeICMS_BR</c> record
    /// </param>
    /// <param name="_fbFiscalDocumentAdjustmentCodeRecId">
    /// The record ID of the <c>FBFiscalDocumentAdjustmentCodeICMS_BR</c> record
    /// </param>
    /// <param name="_fbFiscalDocumentAdjCodeFixedAssetRecId">
    /// The record ID of the <c>FBFiscalDocumentAdjustmentCodeICMS_BR</c> record for fixed asset
    /// </param>
    /// <param name="_fbObservationCodeRecId">
    /// The record ID of the <c>FBObservationCodeTable_BR</c> record
    /// </param>
    /// <returns>
    /// The <c>FBTaxAssessment_BR</c> table record created
    /// </returns>
    public static FBTaxAssessment_BR createTaxAssessmentICMS(FBBookingPeriod_BR                     _fbBookingPeriod,
                                                        FBGeneralAdjustmentCodeRecId_BR         _fbGeneralAdjustmentCodeRecId,
                                                        FBGeneralAdjustmentCodeRecId_BR         _fbGeneralAdjustmentCodeFixedAssetRecId,
                                                        FBFiscalDocumentAdjustmentCodeRecId_BR  _fbFiscalDocumentAdjustmentCodeRecId,
                                                        FBFiscalDocumentAdjustmentCodeRecId_BR  _fbFiscalDocumentAdjCodeFixedAssetRecId,
                                                        FBObservationCodeRecId_BR               _fbObservationCodeRecId)
    {
        FBTaxAssessment_BR  taxAssessmentIcms;

        taxAssessmentIcms.FBBookingPeriod_BR                        = _fbBookingPeriod.RecId;
        taxAssessmentIcms.FromDate                                  = _fbBookingPeriod.periodFrom();
        taxAssessmentIcms.ToDate                                    = _fbBookingPeriod.periodTo();
        taxAssessmentIcms.TaxType                                   = TaxType_BR::ICMS;
        taxAssessmentIcms.Status                                    = FBTaxAssessmentStatus_BR::Opened;
        taxAssessmentIcms.State                                     = _fbBookingPeriod.fiscalEstablishment().postalAddress().State;
        taxAssessmentIcms.FBGeneralAdjustmentCodeICMS_BR            = _fbGeneralAdjustmentCodeRecId;
        taxAssessmentIcms.FBGeneralAdjustmentCodeICMSFixedAsset_BR  = _fbGeneralAdjustmentCodeFixedAssetRecId;
        taxAssessmentIcms.FBFiscalDocumentAdjustmentCodeICMS_BR     = _fbFiscalDocumentAdjustmentCodeRecId;
        taxAssessmentIcms.FBFiscalDocumentAdjCodeICMSFixedAsset_BR  = _fbFiscalDocumentAdjCodeFixedAssetRecId;
        taxAssessmentIcms.FBObservationCodeTable_BR                 = _fbObservationCodeRecId;

        if (taxAssessmentIcms.validateWrite())
        {
            taxAssessmentIcms.insert();

            FBTaxAssessmentDetailCreator_BR::construct(taxAssessmentIcms).updateCreditBalanceFromPreviousPeriod();
        }

        return taxAssessmentIcms;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessmentICMSST</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ICMS-ST tax assessment
    /// </summary>
    /// <param name="_fbBookingPeriod">
    /// A <c>FBBookingPeriod_BR</c> table record
    /// </param>
    /// <param name="_state">
    /// The tax assessment state
    /// </param>
    /// <returns>
    /// The <c>FBTaxAssessment_BR</c> table record created
    /// </returns>
    public static FBTaxAssessment_BR createTaxAssessmentICMSST(FBBookingPeriod_BR _fbBookingPeriod, LogisticsAddressStateId _state)
    {
        #ISOCountryRegionCodes

        FBTaxAssessment_BR  taxAssessmentIcmsSt;

        taxAssessmentIcmsSt.FBBookingPeriod_BR = _fbBookingPeriod.RecId;
        taxAssessmentIcmsSt.FromDate           = _fbBookingPeriod.periodFrom();
        taxAssessmentIcmsSt.ToDate             = _fbBookingPeriod.periodTo();
        taxAssessmentIcmsSt.TaxType            = TaxType_BR::ICMSST;
        taxAssessmentIcmsSt.Status             = FBTaxAssessmentStatus_BR::Opened;
        taxAssessmentIcmsSt.State              = _state;

        if (taxAssessmentIcmsSt.validateWrite())
        {
            taxAssessmentIcmsSt.insert();

            FBTaxAssessmentDetailCreator_BR::construct(taxAssessmentIcmsSt).updateCreditBalanceFromPreviousPeriod();
        }

        return taxAssessmentIcmsSt;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessmentICMSDIF</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ICMS-DIF tax assessment
    /// </summary>
    /// <param name="_fbBookingPeriod">
    /// A <c>FBBookingPeriod_BR</c> table record
    /// </param>
    /// <param name="_state">
    /// The tax assessment state
    /// </param>
    /// <returns>
    /// The <c>FBTaxAssessment_BR</c> table record created
    /// </returns>
    public static FBTaxAssessment_BR createTaxAssessmentICMSDIF(FBBookingPeriod_BR _fbBookingPeriod, LogisticsAddressStateId _state)
    {
        #ISOCountryRegionCodes

        FBTaxAssessment_BR                  taxAssessmentICMSDIF;

        taxAssessmentICMSDIF.FBBookingPeriod_BR = _fbBookingPeriod.RecId;
        taxAssessmentICMSDIF.FromDate           = _fbBookingPeriod.periodFrom();
        taxAssessmentICMSDIF.ToDate             = _fbBookingPeriod.periodTo();
        taxAssessmentICMSDIF.TaxType            = TaxType_BR::ICMSDiff;
        taxAssessmentICMSDIF.Status             = FBTaxAssessmentStatus_BR::Opened;
        taxAssessmentICMSDIF.State              = _state;

        if (taxAssessmentICMSDIF.validateWrite())
        {
            taxAssessmentICMSDIF.insert();

            FBTaxAssessmentDetailCreator_BR::construct(taxAssessmentICMSDIF).updateCreditBalanceFromPreviousPeriod();
        }

        return taxAssessmentICMSDIF;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessmentIPI</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the IPI tax assessment.
    /// </summary>
    /// <param name="_fbBookingPeriod">
    /// A <c>FBBookingPeriod_BR</c> table record.
    /// </param>
    /// <param name="_assessmentPeriodicity">
    /// The ipi assessment periodicity.
    /// </param>
    /// <returns>
    /// The <c>FBTaxAssessment_BR</c> table record created.
    /// </returns>
    public static FBTaxAssessment_BR createTaxAssessmentIPI(FBBookingPeriod_BR _fbBookingPeriod, FBIPIAssessmentPeriodicity_BR _assessmentPeriodicity)
    {
        int                 i;
        int                 periodLen;
        int                 createdTaxAssessments = 0;

        date                previousPeriodEndDate;
        date                periodStartDate;
        date                periodEndDate;

        container           ipiAssessmentPeriods;

        FBTaxAssessment_BR  taxAssessmentIpi;

        if (_assessmentPeriodicity == FBIPIAssessmentPeriodicity_BR::Monthly)
        {
            periodLen = 31;
        }
        else
        {
            periodLen = 10;
        }

        previousPeriodEndDate = _fbBookingPeriod.periodFrom() - 1;

        while (periodEndDate < endmth(_fbBookingPeriod.periodFrom()))
        {
            periodStartDate = previousPeriodEndDate + 1;
            periodEndDate   = previousPeriodEndDate + periodLen;

            if (periodEndDate >= endmth(_fbBookingPeriod.periodFrom()) - 1)
            {
                periodEndDate = endmth(_fbBookingPeriod.periodFrom());
            }

            ipiAssessmentPeriods += [[periodStartDate, periodEndDate]];

            previousPeriodEndDate = periodEndDate;
        }

        ttsBegin;

        for (i = 1; i <= conLen(ipiAssessmentPeriods); i++)
        {
            periodStartDate = conPeek(conPeek(ipiAssessmentPeriods, i), 1);
            periodEndDate   = conPeek(conPeek(ipiAssessmentPeriods, i), 2);

            taxAssessmentIpi.clear();

            taxAssessmentIpi.FBBookingPeriod_BR = _fbBookingPeriod.RecId;
            taxAssessmentIpi.FromDate           = periodStartDate;
            taxAssessmentIpi.ToDate             = periodEndDate;
            taxAssessmentIpi.TaxType            = TaxType_BR::IPI;
            taxAssessmentIpi.Status             = FBTaxAssessmentStatus_BR::Opened;
            taxAssessmentIpi.State              = _fbBookingPeriod.fiscalEstablishment().postalAddress().State;

            if (taxAssessmentIpi.validateWrite())
            {
                taxAssessmentIpi.insert();

                FBTaxAssessmentDetailCreator_BR::construct(taxAssessmentIpi).updateCreditBalanceFromPreviousPeriod();

                createdTaxAssessments++;
            }
            else
            {
                break;
            }
        }

        FBProductionReportingPeriod_BR productionReportingPeriod;

        select count(RecId) from productionReportingPeriod
            where productionReportingPeriod.FBBookingPeriod_BR == _fbBookingPeriod.RecId;
        
        if (conLen(ipiAssessmentPeriods) > 1 || int642int(productionReportingPeriod.RecId) > 1)
        {
            delete_from productionReportingPeriod
                where productionReportingPeriod.FBBookingPeriod_BR == _fbBookingPeriod.RecId;
            
            RecordInsertList rilProductionReportingPeriod = new RecordInsertList(tableNum(FBProductionReportingPeriod_BR));

            for (i = 1; i <= conLen(ipiAssessmentPeriods); i++)
            {
                periodStartDate = conPeek(conPeek(ipiAssessmentPeriods, i), 1);
                periodEndDate   = conPeek(conPeek(ipiAssessmentPeriods, i), 2);
                
                productionReportingPeriod.FBBookingPeriod_BR = _fbBookingPeriod.RecId;
                productionReportingPeriod.FromDate = periodStartDate;
                productionReportingPeriod.ToDate = periodEndDate;

                rilProductionReportingPeriod.add(productionReportingPeriod);
            }
            
            rilProductionReportingPeriod.insertDatabase();

            FBFiscalDocumentBookProcessor_BR::bookApplicableProduction_FBProduction(_fbBookingPeriod);
        }

        ttsCommit;

        return taxAssessmentIpi;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessmentISS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the ISS tax assessment
    /// </summary>
    /// <param name="_fbBookingPeriod">
    /// A <c>FBBookingPeriod_BR</c> table record
    /// </param>
    /// <returns>
    /// The <c>FBTaxAssessment_BR</c> table record created
    /// </returns>
    public static FBTaxAssessment_BR createTaxAssessmentISS(FBBookingPeriod_BR _fbBookingPeriod)
    {
        FBTaxAssessment_BR      taxAssessmentIss;
        LogisticsPostalAddress  fiscalEstablishmentPostalAddress = _fbBookingPeriod.fiscalEstablishment().postalAddress();

        taxAssessmentIss.FBBookingPeriod_BR = _fbBookingPeriod.RecId;
        taxAssessmentIss.FromDate           = _fbBookingPeriod.periodFrom();
        taxAssessmentIss.ToDate             = _fbBookingPeriod.periodTo();
        taxAssessmentIss.TaxType            = TaxType_BR::ISS;
        taxAssessmentIss.Status             = FBTaxAssessmentStatus_BR::Opened;
        taxAssessmentIss.State              = fiscalEstablishmentPostalAddress.State;
        taxAssessmentIss.City               = fiscalEstablishmentPostalAddress.City;

        if (taxAssessmentIss.validateWrite())
        {
            taxAssessmentIss.insert();
        }

        return taxAssessmentIss;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessmentCOFINS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the COFINS tax assessment
    /// </summary>
    /// <param name="_fbBookingPeriod">
    /// A <c>FBBookingPeriod_BR</c> table record
    /// </param>
    /// <returns>
    /// The <c>FBTaxAssessment_BR</c> table record created
    /// </returns>
    public static FBTaxAssessment_BR createTaxAssessmentCOFINS(FBBookingPeriod_BR _fbBookingPeriod)
    {
        FBTaxAssessment_BR                          cofinsTaxAssessment;
        LogisticsPostalAddress                      fiscalEstablishmentPostalAddress = _fbBookingPeriod.fiscalEstablishment().postalAddress();
        FiscalOrganization_BR                       fiscalOrganization;
        FBTaxAssessmentDetailCreatorPISCOFINS_BR    fbTaxAssessmentDetailCreator;

        select cofinsTaxAssessment
            where cofinsTaxAssessment.FBBookingPeriod_BR == _fbBookingPeriod.RecId
                && cofinsTaxAssessment.FromDate          == _fbBookingPeriod.periodFrom()
                && cofinsTaxAssessment.ToDate            == _fbBookingPeriod.periodTo()
                && cofinsTaxAssessment.TaxType           == TaxType_BR::COFINS;

        if (cofinsTaxAssessment.RecId)
        {
            return cofinsTaxAssessment;
        }

        fiscalOrganization  = FiscalOrganization_BR::findByFiscalEstablishmentId(_fbBookingPeriod.FiscalEstablishmentId, _fbBookingPeriod.FiscalEstablishmentDataArea);

        // The booking period's fiscal establishment must be a fiscal organization root
        if (fiscalOrganization)
        {
            cofinsTaxAssessment.FBBookingPeriod_BR              = _fbBookingPeriod.RecId;
            cofinsTaxAssessment.FromDate                        = _fbBookingPeriod.periodFrom();
            cofinsTaxAssessment.ToDate                          = _fbBookingPeriod.periodTo();
            cofinsTaxAssessment.TaxType                         = TaxType_BR::COFINS;
            cofinsTaxAssessment.Status                          = FBTaxAssessmentStatus_BR::Opened;
            cofinsTaxAssessment.ContribAssessmentRegimen        = fiscalOrganization.AssessmentRegimen;
            cofinsTaxAssessment.ContribCreditAllocationMethod   = fiscalOrganization.CreditAllocationMethod;
            cofinsTaxAssessment.ContribContributionType         = fiscalOrganization.AssessmentContributionType;

            if (cofinsTaxAssessment.validateWrite())
            {
                cofinsTaxAssessment.insert();

                fbTaxAssessmentDetailCreator = FBTaxAssessmentDetailCreator_BR::construct(cofinsTaxAssessment) as FBTaxAssessmentDetailCreatorPISCOFINS_BR;
                fbTaxAssessmentDetailCreator.updateCreditBalanceFromPreviousPeriod();
            }
        }
        else
        {
            checkFailed("@SYP4930004");
        }

        return cofinsTaxAssessment;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocumentSpedRecordOnCreateTaxAssessmentPIS</Name>
				<Source><![CDATA[
    private static void updateDocumentSpedRecordOnCreateTaxAssessmentPIS(FBBookingPeriod_BR _bookingPeriod, FiscalOrganization_BR _fiscalOrganization)
    {
        FBBookingPeriodFiscalDocument_BR fiscalDocumentBookingPeriod;
        FiscalDocument_BR fiscalDocument;
        
        while select forupdate fiscalDocumentBookingPeriod
            where fiscalDocumentBookingPeriod.FBBookingPeriod_BR == _bookingPeriod.RecId
                join fiscalDocument
                    where fiscalDocument.RecId == fiscalDocumentBookingPeriod.FiscalDocument_BR
        {
            FBSpedRecordDeterminer_Contrib_BR contribRecordDeterminer = FBSpedRecordDeterminer_BR::constructForSpedContrib(fiscalDocument);
            contribRecordDeterminer.parmHasPisCofins(fiscalDocumentBookingPeriod.HasPis || fiscalDocumentBookingPeriod.HasCofins);
            contribRecordDeterminer.parmFiscalOrganization(_fiscalOrganization);
            FBSpedRecordDeterminer_Fiscal_BR fiscalRecordDeterminer = FBSpedRecordDeterminer_BR::constructForSpedFiscal(fiscalDocument);
            fiscalRecordDeterminer.parmHasIcmsIpi(fiscalDocumentBookingPeriod.HasIcms || fiscalDocumentBookingPeriod.HasIpi);

            fiscalDocumentBookingPeriod.SpedContribRecord = contribRecordDeterminer.determineRecord();
            fiscalDocumentBookingPeriod.SpedFiscalRecord = fiscalRecordDeterminer.determineRecord();

            if (fiscalDocumentBookingPeriod.isFieldModified(fieldNum(FBBookingPeriodFiscalDocument_BR, SpedContribRecord))
                || fiscalDocumentBookingPeriod.isFieldModified(fieldNum(FBBookingPeriodFiscalDocument_BR, SpedFiscalRecord)))
            {
                fiscalDocumentBookingPeriod.update();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTaxAssessmentPIS</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the PIS tax assessment
    /// </summary>
    /// <param name="_fbBookingPeriod">
    /// A <c>FBBookingPeriod_BR</c> table record
    /// </param>
    /// <returns>
    /// The <c>FBTaxAssessment_BR</c> table record created
    /// </returns>
    public static FBTaxAssessment_BR createTaxAssessmentPIS(FBBookingPeriod_BR _fbBookingPeriod)
    {
        FBTaxAssessment_BR                          pisTaxAssessment;
        LogisticsPostalAddress                      fiscalEstablishmentPostalAddress = _fbBookingPeriod.fiscalEstablishment().postalAddress();
        FiscalOrganization_BR                       fiscalOrganization;
        FBTaxAssessmentDetailCreatorPISCOFINS_BR    fbTaxAssessmentDetailCreator;

        select pisTaxAssessment
            where pisTaxAssessment.FBBookingPeriod_BR == _fbBookingPeriod.RecId
                && pisTaxAssessment.FromDate          == _fbBookingPeriod.periodFrom()
                && pisTaxAssessment.ToDate            == _fbBookingPeriod.periodTo()
                && pisTaxAssessment.TaxType           == TaxType_BR::PIS;

        if (pisTaxAssessment.RecId)
        {
            return pisTaxAssessment;
        }

        fiscalOrganization  = FiscalOrganization_BR::findByFiscalEstablishmentId(_fbBookingPeriod.FiscalEstablishmentId, _fbBookingPeriod.FiscalEstablishmentDataArea);

        // The booking period's fiscal establishment must be a fiscal organization root
        if (fiscalOrganization)
        {
            pisTaxAssessment.FBBookingPeriod_BR             = _fbBookingPeriod.RecId;
            pisTaxAssessment.FromDate                       = _fbBookingPeriod.periodFrom();
            pisTaxAssessment.ToDate                         = _fbBookingPeriod.periodTo();
            pisTaxAssessment.TaxType                        = TaxType_BR::PIS;
            pisTaxAssessment.Status                         = FBTaxAssessmentStatus_BR::Opened;
            pisTaxAssessment.ContribAssessmentRegimen       = fiscalOrganization.AssessmentRegimen;
            pisTaxAssessment.ContribCreditAllocationMethod  = fiscalOrganization.CreditAllocationMethod;
            pisTaxAssessment.ContribContributionType        = fiscalOrganization.AssessmentContributionType;

            if (pisTaxAssessment.validateWrite())
            {
                ttsbegin;

                pisTaxAssessment.insert();

                fbTaxAssessmentDetailCreator = FBTaxAssessmentDetailCreator_BR::construct(pisTaxAssessment) as FBTaxAssessmentDetailCreatorPISCOFINS_BR;
                fbTaxAssessmentDetailCreator.updateCreditBalanceFromPreviousPeriod();
                FBTaxAssessmentCreator_BR::updateDocumentSpedRecordOnCreateTaxAssessmentPIS(_fbBookingPeriod, fiscalOrganization);

                ttscommit;
            }
        }
        else
        {
            checkFailed("@SYP4930004");
        }

        return pisTaxAssessment;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>