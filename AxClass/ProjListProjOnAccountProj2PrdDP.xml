<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjListProjOnAccountProj2PrdDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjListProjOnAccountProj2PrdDP</c> class provides data for the
///    <c>ProjListProjOnAccountProj2ColumnPeriod</c> report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(ProjStatementProject)),
    SRSReportParameterAttribute(classstr(ProjListProjOnAccountProjContract))
]
class ProjListProjOnAccountProj2PrdDP extends SRSReportDataProviderPreProcessTempDB
{
    #ProjReports

    ProjOptionTM            timeMaterial;
    ProjOptionFixedPrice    fixedPrice;
    NoYes                   timeMaterialBillingMethod;
    NoYes                   fixedPriceBillingMethod;
    TransDate               ledgerFromDate;
    TransDate               ledgerToDate;
    TransDate               ledgerFromDate1;
    TransDate               ledgerToDate1;
    ProjListColumnData      actualVsBudget;
    ProjForecastModelId     forecastModelId;
    ProjListStateProjType   stateProjType;
    Level                   level;
    boolean                 skipBlankId;
    boolean                 skipZero;
    ProjShowAmount          showAmount;

    ProjListProjTrans_OnAccount     listProjTrans;
    projListProjTrans2Period        listProjTrans2Period;
    ProjListProjTransLayout         listProjTransLayout;
    ProjListProjHelpClass           period1ProjHelpClass, period2ProjHelpClass;
    ProjListProjOnAccountTmp        projListProjOnAccountTmp;

    ProjTable               projTable;

    QueryRun                queryRun;

    ProjId                  projIdFound, projId;
    NumberSequenceFormat    oldLevelFormat;

    int                     hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals;
    str                     totalCostLabel, period1Label, period2Label, headerLabel;
    AmountMST               period1OnAccount;
    AmountMST               period2OnAccount;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculate the amounts that are needed for the report.
    /// </summary>
    void calculate()
    {
        period1ProjHelpClass.parmProjStatement().parmProjId(projIdFound);
        period1ProjHelpClass.setParmField();
        period2ProjHelpClass.parmProjStatement().parmProjId(projIdFound);
        period2ProjHelpClass.setParmField();

        period1OnAccount    += period1ProjHelpClass.parmProjStatement().e100_Total_Revenue();
        period2OnAccount    += period2ProjHelpClass.parmProjStatement().e100_Total_Revenue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkPrintLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks the parameters to determine whether the line should be printed.
    /// </summary>
    /// <returns>
    ///    true if the line should be printed; otherwise, false.
    /// </returns>
    boolean checkPrintLine()
    {
        if ((!skipZero || this.lineValue()) && listProjTransLayout.canPrintId(period1ProjHelpClass.id()))
        {
            return true;
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeLineOne</Name>
				<Source><![CDATA[
    /// <summary>
    /// Evaluates whether the line should be printed and calls the insert to temporary table.
    /// </summary>
    /// <param name="projTableLocal">
    /// A record buffer that contains information about a project.
    /// </param>
    void executeLineOne(ProjTable projTableLocal)
    {
        if (listProjTransLayout.parmStateProjType() == ProjListStateProjType::Project)
        {
            if ((projTableLocal.level() <= listProjTransLayout.parmLevel()) ||
                (projTableLocal.levelFormat(listProjTransLayout.parmLevel())   != oldLevelFormat))
            {
                if (this.checkPrintLine())
                {
                    period1ProjHelpClass.setName();
                    this.insertProjListProjOnAccountTmp();
                    this.setFieldZero();
                }
            }
        }
        else if (this.checkPrintLine())
        {
            period1ProjHelpClass.setName();
            this.insertProjListProjOnAccountTmp();
            this.setFieldZero();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the parameter values and assigns them to the variables.
    /// </summary>
    private void getParameterValues()
    {
        ProjListProjOnAccountProjContract contract = this.parmDataContract() as ProjListProjOnAccountProjContract;

        timeMaterial = contract.parmTimeMaterial();
        fixedPrice = contract.parmFixedPrice();

        timeMaterialBillingMethod = contract.parmTimeMaterialBillingMethod();
        fixedPriceBillingMethod = contract.parmFixedPriceBillingMethod();

        ledgerFromDate = contract.parmLedgerFromDate();
        ledgerToDate = contract.parmLedgerToDate();
        ledgerFromDate1 = contract.parmLedgerFromDate1();
        ledgerToDate1 = contract.parmLedgerToDate1();

        actualVsBudget = contract.parmActualVsBudget();
        forecastModelId = contract.parmForecastModelId();

        stateProjType = contract.parmStateProjType();
        level = contract.parmLevel();
        skipBlankId = contract.parmSkipBlankId();
        skipZero = contract.parmSkipZero();

        showAmount = contract.parmShowAmount();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getProjListProjOnAccountTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the data from the <c>ProjListProjOnAccountTmp</c> table.
    /// </summary>
    /// <returns>
    ///    The data from the <c>ProjListProjOnAccountTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute('ProjListProjOnAccountTmp')]
    public ProjListProjOnAccountTmp getProjListProjOnAccountTmp()
    {
        select * from projListProjOnAccountTmp;

        return projListProjOnAccountTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initProjListTrans</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>ProjListProjTrans</c> class by using the parameters.
    /// </summary>
    private void initProjListTrans()
    {
        listProjTrans2Period = projListProjTrans2Period::construct(ProjListStateType::OnAccount, ProjListStateId::Project);
        listProjTrans = listProjTrans2Period.getProjListProjTrans1();
        listProjTransLayout = ProjListProjTransLayout::construct(listProjTrans2Period.getProjListProjTrans1());

        listProjTrans.parmTimeMaterial(timeMaterial);
        listProjTrans.parmFixedPrice(fixedPrice);

        listProjTrans2Period.parmPeriod1FromDate(ledgerFromDate);
        listProjTrans2Period.parmPeriod1ToDate(ledgerToDate);
        listProjTrans2Period.parmPeriod2FromDate(ledgerFromDate1);
        listProjTrans2Period.parmPeriod2ToDate(ledgerToDate1);
        listProjTrans2Period.parmColumnData(actualVsBudget);
        listProjTrans2Period.parmForecastModelId(forecastModelId);

        listProjTransLayout.parmStateProjType(stateProjType);
        listProjTransLayout.parmLevel(level);
        listProjTransLayout.parmSkipBlank(skipBlankId);
        listProjTransLayout.parmSkipZero(skipZero);

        listProjTransLayout.parmShowAmount(showAmount);

        if (listProjTransLayout.parmStateProjType() != ProjListStateProjType::Project)
        {
            listProjTransLayout.parmLevel(2);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProjListProjOnAccountTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the required data and inserts it into the temporary table.
    /// </summary>
    private void insertProjListProjOnAccountTmp()
    {
        projListProjOnAccountTmp.clear();

        projListProjOnAccountTmp.Id            = period1ProjHelpClass.id();
        projListProjOnAccountTmp.Name          = period1ProjHelpClass.name();

        projListProjOnAccountTmp.OnAccount     = -period1OnAccount;
        projListProjOnAccountTmp.OnAccount1    = -period2OnAccount;

        // set labels
        projListProjOnAccountTmp.HeaderLabel     = headerLabel;
        projListProjOnAccountTmp.PeriodLabel     = period1Label;
        projListProjOnAccountTmp.PeriodLabel1    = period2Label;
        projListProjOnAccountTmp.IdLabel         = strfmt('%1', stateProjType);

        // set decimal values
        projListProjOnAccountTmp.DecimalAmount      = amountDecimals;

        projListProjOnAccountTmp.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Checks whether the amounts are equal to zero.
    /// </summary>
    /// <returns>
    ///    true if the values are not zero; otherwise false.
    /// </returns>
    boolean lineValue()
    {
        return (period1OnAccount != 0) || (period2OnAccount != 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>modifyQuery</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the query ranges.
    /// </summary>
    void modifyQuery()
    {
        QueryBuildDataSource qbdsProjTable = queryRun.query().dataSourceTable(tablenum(ProjTable));
        qbdsProjTable.addSortField(fieldnum(ProjTable,ProjId));

        if (ProjMultipleContractLinesForProjectFeatureHelper::isFeatureEnabled())
        {
            QueryBuildDataSource qbdsPSAContractLineItems = queryRun.query().dataSourceTable(tableNum(PSAContractLineItems));
            qbdsPSAContractLineItems.enabled(true);
            PSAContractLineItemRangesHelper::addBillingMethodRangesToDS(
                qbdsPSAContractLineItems,
                timeMaterialBillingMethod,
                fixedPriceBillingMethod);
        }
        else
        {
            QueryBuildRange rangeHide = qbdsProjTable.addRange(fieldnum(ProjTable, Type));
            rangeHide.status(RangeStatus::Hidden);

            if (timeMaterial)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::TimeMaterial));
            }

            if (fixedPrice)
            {
                qbdsProjTable.addRange(fieldnum(ProjTable, Type)).value(queryValue(ProjType::FixedPrice));
            }

            if (!(timeMaterial || fixedPrice))
            {
                QueryBuildRange rangeDummy = qbdsProjTable.addRange(fieldnum(ProjTable, Type));
                rangeDummy.value(queryValue(SysQuery::valueEmptyString()));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>printProject</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the project level and calls the <c>calculate</c> method.
    /// </summary>
    void printProject()
    {
        ProjTable           projTableLocal;
        ProjFundingSource   projFundingSourceLocal;

        projTableLocal  = queryRun.get(tablenum(ProjTable));
        projIdFound     = projTableLocal.ProjId;
        projId          = ProjListProjHelpClass::setProjId(projTableLocal,stateProjType,level);

        if (stateProjType == ProjListStateProjType::FundingSource)
        {
            projFundingSourceLocal = queryRun.get(tablenum(ProjFundingSource));
        }
        period1ProjHelpClass.setId(projTableLocal, projId, projFundingSourceLocal);

        if (! listProjTransLayout.canPrintId(period1ProjHelpClass.idNew()))
        {
            period1ProjHelpClass.setOld();

            return;
        }

        if (period1ProjHelpClass.checkIdChanged())
        {
            this.executeLineOne(projTableLocal);
        }

        this.calculate();

        period1ProjHelpClass.setOld();
        oldLevelFormat  = projTableLocal.levelFormat(listProjTransLayout.parmLevel());
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. This method will be called by
    ///    SQL Server Reporting Services (SSRS) at run time. The method should compute data and populate the
    ///    data tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        this.getParameterValues();
        this.initProjListTrans();

        [hourQtyDecimals, amountDecimals, grossMarginDecimals, valueAddedDecimals] = listProjTrans.setNoOfDecimals(showAmount);

        period1Label = listProjTrans2Period.formatPeriodLabel("@SYS9308",1);
        period2Label = listProjTrans2Period.formatPeriodLabel("@SYS13183",2);
        headerLabel = listProjTrans2Period.formatSelection(showAmount);

        period1ProjHelpClass = ProjListProjHelpClass::newListProjConsumption(
                                            projStatement::newListProjOnAccount(listProjTrans2Period.getProjListProjTrans1(),
                                                projListProjTrans2Period::columnData2ActualBudget(actualVsBudget) , forecastModelId),
                                            stateProjType);

        period2ProjHelpClass = ProjListProjHelpClass::newListProjConsumption(
                                            projStatement::newListProjOnAccount(listProjTrans2Period.getProjListProjTrans2(),
                                                projListProjTrans2Period::columnData2ActualBudget(actualVsBudget) , forecastModelId),
                                            stateProjType);

        queryRun = new SysQueryRun(this.parmQuery());

        this.modifyQuery();
        this.setSortField();

        while (queryRun.next())
        {
           this.printProject();
        }

        if (this.checkPrintLine())
        {
            period1ProjHelpClass.setName();
            this.insertProjListProjOnAccountTmp();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>setFieldZero</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the variables to zero.
    /// </summary>
    void setFieldZero()
    {
        period1OnAccount   = 0;
        period2OnAccount   = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSortField</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Sets the sort field for the query.
    /// </summary>
    void setSortField()
    {
        queryRun.query().dataSourceTable(tablenum(ProjTable)).sortClear();

        switch (stateProjType)
        {
            case ProjListStateProjType::Project:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjId));
                break;

            case ProjListStateProjType::Customer:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,CustAccount));
                break;

            case ProjListStateProjType::ProjGroup:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjGroupId));
                break;

            case ProjListStateProjType::WIPProject:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,wipProject));
                break;

            case ProjListStateProjType::InvoiceProject:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));
                break;

            case ProjListStateProjType::ResponsibleSales:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleSales));
                break;

            case ProjListStateProjType::Responsible:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsible));
                break;

            case ProjListStateProjType::ResponsibleFinancial:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, WorkerResponsibleFinancial));
                break;

            case ProjListStateProjType::Type:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,Type));
                break;

            case ProjListStateProjType::Sorting1:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 1);
                break;

            case ProjListStateProjType::Sorting2:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 2);
                break;

            case ProjListStateProjType::Sorting3:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable, SortingId), SortOrder::Ascending, 3);
                break;

            case ProjListStateProjType::Asset:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,AssetId));
                break;

            case ProjListStateProjType::FundingSource:
                queryRun.query().dataSourceTable(tablenum(ProjTable)).addSortField(fieldnum(ProjTable,ProjInvoiceProjId));

                queryRun.query().dataSourceTable(tablenum(ProjTable)).addDataSource(tablenum(ProjInvoiceTable));
                queryRun.query().dataSourceTable(tablenum(ProjInvoiceTable)).joinMode(JoinMode::InnerJoin);
                queryRun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addLink(fieldnum(ProjTable,ProjInvoiceProjId),fieldnum(ProjInvoiceTable,ProjInvoiceProjId));

                queryRun.query().dataSourceTable(tablenum(ProjInvoiceTable)).addDataSource(tablenum(ProjFundingSource));
                queryRun.query().dataSourceTable(tablenum(ProjFundingSource)).joinMode(JoinMode::InnerJoin);
                queryRun.query().dataSourceTable(tablenum(ProjFundingSource)).addLink(fieldnum(ProjInvoiceTable,ProjInvoiceProjId), fieldnum(ProjFundingSource,ContractId));
                queryRun.query().dataSourceTable(tablenum(ProjFundingSource)).addSortField(fieldnum(ProjFundingSource,FundingSourceId));
                break;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>