<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>QueryLocalizationHelper</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>QueryLocalizationHelper</c> class handles the localization tables in query.
/// </summary>
public static class QueryLocalizationHelper
{
    private const str CacheLinkDataSourcesPrefix = 'excludeLocalLinkDS';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>excludeLocalizationLinkDataSourcesIfApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Excludes link data sources, if necessary for data source tables join to localization fields in query.
    /// </summary>
    /// <param name = "_query">The <c>Query</c> object.</param>
    /// <param name = "_cacheScope">The name of cache scope.</param>
    /// <param name = "_applicableFieldsMap">The map of localization fields (Key: name of the data source, Value: data source field id's container).</param>
    public static void excludeLocalizationLinkDataSourcesIfApplicable(
        Query _query,
        GlobalObjectCacheScope _cacheScope,
        Map _applicableFieldsMap = null)
    {
        SysGlobalObjectCache sysGlobalObjectCache = new SysGlobalObjectCache();
        GlobalObjectCacheScope cacheScope = CacheLinkDataSourcesPrefix +
            _cacheScope;

        for (int i = 1; i <= _query.dataSourceCount(); i++)
        {
            QueryBuildDataSource parentQbds = _query.dataSourceNo(i);

            if (parentQbds.enabled() && !parentQbds.joined())
            {
                QueryLocalizationHelper::excludeLocalizationLinkDataSource(
                    parentQbds,
                    sysGlobalObjectCache,
                    cacheScope,
                    _applicableFieldsMap);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeLocalizationTablesIfApplicable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Excludes, if necessary, localization tables in query.
    /// </summary>
    /// <param name="_query">
    /// The <c>Query</c> object.
    /// </param>
    /// <param name="_applicableTables">
    /// The container with localization tables.
    /// </param>
    /// <param name="_cacheScope">
    /// The name of cashe scope.
    /// </param>
    public static void excludeLocalizationTablesIfApplicable(Query _query, container _applicableTables, GlobalObjectCacheScope _cacheScope)
    {
        SysGlobalObjectCache sysGlobalObjectCache = new SysGlobalObjectCache();
        GlobalObjectCacheScope cacheScope = classStr(QueryLocalizationHelper) + _cacheScope;

        for (int idx = 1; idx <= _query.dataSourceCount(); idx++)
        {
            QueryBuildDataSource qbds = _query.dataSourceNo(idx);

            if (conFind(_applicableTables, qbds.table()))
            {
                boolean enabled = false;
                container cachedResults = sysGlobalObjectCache.find(cacheScope, [qbds.table(), curExt()]);

                if (cachedResults != conNull()
                    && conLen(cachedResults))
                {
                    [enabled] = cachedResults;
                }
                else
                {
                    DictTable dictTable = new DictTable(qbds.table());
                    container tableIsoCodes = dictTable.getCountryRegionCodes();

                    enabled = tableIsoCodes == conNull()
                        || !conLen(tableIsoCodes)
                        || SysCountryRegionCode::isLegalEntityInCountryRegion(tableIsoCodes);

                    sysGlobalObjectCache.insert(cacheScope, [qbds.table(), curExt()], [enabled]);
                }

                qbds.enabled(enabled);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>excludeLocalizationLinkDataSource</Name>
				<Source><![CDATA[
    private static void excludeLocalizationLinkDataSource(
        QueryBuildDataSource _parentQbds,
        SysGlobalObjectCache _sysGlobalObjectCashe,
        GlobalObjectCacheScope _cacheScope,
        Map _applicableFieldsMap = null)
    {
        container applicableFields;

        if (_applicableFieldsMap && _applicableFieldsMap.exists(_parentQbds.name()))
        {
            applicableFields = _applicableFieldsMap.lookup(_parentQbds.name());
        }

        for (int childQbdsNum = 1; childQbdsNum <= _parentQbds.childDataSourceCount(); childQbdsNum++)
        {
            QueryBuildDataSource chldQbds = _parentQbds.childDataSourceNo(childQbdsNum);

            if (chldQbds.enabled()
                && chldQbds.joinMode() == JoinMode::OuterJoin)
            {
                container tableIsoCodes = new DictTable(chldQbds.table()).getCountryRegionCodes();

                boolean enabled = tableIsoCodes == conNull()
                    || SysCountryRegionCode::isLegalEntityInCountryRegion(tableIsoCodes);

                if (enabled)
                {
                    for (int queryLinkNum = 1; queryLinkNum <= chldQbds.linkCount(); queryLinkNum++)
                    {
                        QueryBuildLink queryBuildLink = chldQbds.link(queryLinkNum);

                        if (queryBuildLink.table() == _parentQbds.table()
                            && (applicableFields == conNull()
                            || conFind(applicableFields, queryBuildLink.field()) > 0))
                        {
                            container cachedResults = _sysGlobalObjectCashe.find(
                                _cacheScope,
                                [_parentQbds.name(),
                                queryBuildLink.field(),
                                curExt()]);

                            if (conLen(cachedResults) > 0)
                            {
                                [enabled] = cachedResults;
                            }
                            else
                            {
                                container countryCodes = new DictField(_parentQbds.table(), queryBuildLink.field()).getCountryRegionCodes();

                                if (conLen(countryCodes) > 0
                                    && !SysCountryRegionCode::isLegalEntityInCountryRegion(countryCodes))
                                {
                                    enabled = false;
                                }

                                _sysGlobalObjectCashe.insert(
                                    _cacheScope,
                                    [_parentQbds.name(),
                                    queryBuildLink.field(),
                                    curExt()],
                                    [enabled]);

                            }

                            if (!enabled)
                            {
                                break;
                            }
                        }
                    }
                }

                if (enabled)
                {
                    if (chldQbds.childDataSourceCount() > 0)
                    {
                        QueryLocalizationHelper::excludeLocalizationLinkDataSource(
                            chldQbds,
                            _sysGlobalObjectCashe,
                            _cacheScope,
                            _applicableFieldsMap);
                    }
                }
                else
                {
                    chldQbds.enabled(false);
                }
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>