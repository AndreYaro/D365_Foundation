<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxGSTAuditFileDataProvider_MY</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>TaxGSTAuditFileDataProvider_MY</c> class provides data for GAF generating xml.
/// </summary>
/// <remarks>
/// This is base class of GAF data provider class.
/// </remarks>
class TaxGSTAuditFileDataProvider_MY
{
    StartDate                               periodStartDate;
    EndDate                                 periodEndDate;
    CreationDate                            creationDate;
    TransDate                               fromDate;
    TaxPeriod                               settlementPeriod;
    CurrencyCode                            accountingCurrency;
    CurrencyExchangeHelper                  currencyExchangeHelper;
    OperationsTax                           postingLayer;
    TaxGSTAuditFileTotalTmp_MY              taxGSTAuditFileTotalTmp_MY;
    FiscalCalendarRecId                     fiscalCalendarRecId;
    FiscalCalendarYear                      fiscalCalendarYear;
    date                                    previousPeriodEndDate;
    boolean                                 invalidRecordsOnly;

    const int LineNumberStart = 10;
    const int LineNumberStep = 10;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>parmTaxGSTAuditFileTotalTmp_MY</Name>
				<Source><![CDATA[
    public TaxGSTAuditFileTotalTmp_MY parmTaxGSTAuditFileTotalTmp_MY(TaxGSTAuditFileTotalTmp_MY _taxGSTAuditFileTotalTmp_MY = taxGSTAuditFileTotalTmp_MY)
    {
        if (prmIsDefault(_taxGSTAuditFileTotalTmp_MY))
        {
            taxGSTAuditFileTotalTmp_MY.write();
        }
        else
        {
            taxGSTAuditFileTotalTmp_MY = _taxGSTAuditFileTotalTmp_MY;
        }

        return taxGSTAuditFileTotalTmp_MY;
    }

]]></Source>
			</Method>
			<Method>
				<Name>countIntoTotal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Counts the new entry into total.
    /// </summary>
    /// <param name = "_entry">The entry to be counted into the total.</param>
    protected void countIntoTotal(Common _entry)
    {
        TaxGSTAuditFileLedgerTmp_MY     taxGSTAuditFileLedgerTmp_MY;
        TaxGSTAuditFilePurchaseTmp_MY   taxGSTAuditFilePurchaseTmp_MY;
        TaxGSTAuditFileSupplyTmp_MY     taxGSTAuditFileSupplyTmp_MY;

        switch (_entry.TableId)
        {
            case tableNum(TaxGSTAuditFileLedgerTmp_MY):
                taxGSTAuditFileLedgerTmp_MY = _entry;

                taxGSTAuditFileTotalTmp_MY.LedgerCount++;
                taxGSTAuditFileTotalTmp_MY.LedgerDebitAmountInAccountingCurrency += taxGSTAuditFileLedgerTmp_MY.DebitAmountInAccountingCurrency;
                taxGSTAuditFileTotalTmp_MY.LedgerCreditAmountInAccountingCurrency += taxGSTAuditFileLedgerTmp_MY.CreditAmountInAccountingCurrency;
                if (taxGSTAuditFileLedgerTmp_MY.IsOpeningBalance)
                {
                    taxGSTAuditFileTotalTmp_MY.LedgerOpeningBalanceAmountInAccountingCurrency += taxGSTAuditFileLedgerTmp_MY.BalanceAmountInAccountingCurrency;
                }
                break;

            case tableNum(TaxGSTAuditFilePurchaseTmp_MY):
                taxGSTAuditFilePurchaseTmp_MY = _entry;

                taxGSTAuditFileTotalTmp_MY.PurchaseCount++;
                taxGSTAuditFileTotalTmp_MY.PurchaseGSTValueMYR += taxGSTAuditFilePurchaseTmp_MY.GSTValueMYR;
                taxGSTAuditFileTotalTmp_MY.PurchaseValueMYR += taxGSTAuditFilePurchaseTmp_MY.PurchaseValueMYR;
                break;

            case tableNum(TaxGSTAuditFileSupplyTmp_MY):
                taxGSTAuditFileSupplyTmp_MY = _entry;

                taxGSTAuditFileTotalTmp_MY.SupplyCount++;
                taxGSTAuditFileTotalTmp_MY.SupplyGSTValueMYR += taxGSTAuditFileSupplyTmp_MY.GSTValueMYR;
                taxGSTAuditFileTotalTmp_MY.SupplyValueMYR += taxGSTAuditFileSupplyTmp_MY.SupplyValueMYR;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillGeneralLedger</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills general ledger table.
    /// </summary>
    /// <returns>
    /// A temporary table buffer that contains a list of ledger entries.
    /// </returns>
    public TaxGSTAuditFileLedgerTmp_MY fillGeneralLedger()
    {
        TaxGSTAuditFileLedgerTmp_MY         taxGSTAuditFileLedgerTmp_MY;
        Query                               query;
        QueryRun                            qr;
        GeneralJournalEntry                 generalJournalEntry;
        GeneralJournalAccountEntry          generalJournalAccountEntry;
        MainAccount                         mainAccount;
        DimensionAttributeValueCombination  dimCombination;
        LedgerTransModule                   ledgerTransModule;
        CustTable                           custTable;
        VendTable                           vendTable;

        str     previousMainAccount;
        Amount  balance;

        ledgerTransModule = LedgerTransModule::construct();

        query = new Query(queryStr(TaxGSTAuditFileGeneralJournal_MY));
        this.updateGeneralLedgerQuery(query);

        qr = new QueryRun(query);

        while (qr.next())
        {
            generalJournalEntry         = qr.get(tableNum(GeneralJournalEntry));
            generalJournalAccountEntry  = qr.get(tableNum(GeneralJournalAccountEntry));
            mainAccount                 = qr.get(tableNum(MainAccount));
            dimCombination              = qr.get(tableNum(DimensionAttributeValueCombination));
            custTable                   = qr.get(tableNum(CustTable));
            vendTable                   = qr.get(tableNum(VendTable));

            if (generalJournalAccountEntry.AccountingCurrencyAmount)
            {
                if (previousMainAccount != mainAccount.MainAccountId)
                {
                    // add openning balance
                    balance = this.getOpeningBalance(mainAccount);

                    taxGSTAuditFileLedgerTmp_MY.clear();

                    taxGSTAuditFileLedgerTmp_MY.TransDate = generalJournalEntry.AccountingDate;
                    taxGSTAuditFileLedgerTmp_MY.AccountID = mainAccount.MainAccountId;
                    taxGSTAuditFileLedgerTmp_MY.AccountName = TaxGSTAuditFileConstants_MY::OpeningBalanceAccountName;
                    taxGSTAuditFileLedgerTmp_MY.DebitAmountInAccountingCurrency = 0;
                    taxGSTAuditFileLedgerTmp_MY.CreditAmountInAccountingCurrency = 0;
                    taxGSTAuditFileLedgerTmp_MY.BalanceAmountInAccountingCurrency = balance;
                    taxGSTAuditFileLedgerTmp_MY.IsOpeningBalance = NoYes::Yes;
                    taxGSTAuditFileLedgerTmp_MY.insert();
                    this.countIntoTotal(taxGSTAuditFileLedgerTmp_MY);

                    // mark main account
                    previousMainAccount = mainAccount.MainAccountId;
                }

                taxGSTAuditFileLedgerTmp_MY.clear();

                balance += generalJournalAccountEntry.AccountingCurrencyAmount;

                taxGSTAuditFileLedgerTmp_MY.TransDate = generalJournalEntry.AccountingDate;
                taxGSTAuditFileLedgerTmp_MY.AccountID = mainAccount.MainAccountId;
                taxGSTAuditFileLedgerTmp_MY.AccountName = mainAccount.Name;
                taxGSTAuditFileLedgerTmp_MY.TransDescription = generalJournalAccountEntry.Text;

                switch (generalJournalAccountEntry.PostingType)
                {
                    case LedgerPostingType::CustBalance:
                        taxGSTAuditFileLedgerTmp_MY.Name = custTable.Name();
                        break;

                    case LedgerPostingType::VendBalance:
                        taxGSTAuditFileLedgerTmp_MY.Name = vendTable.Name();
                        break;

                    default:
                        taxGSTAuditFileLedgerTmp_MY.Name = '';
                        break;
                }

                taxGSTAuditFileLedgerTmp_MY.TransID = generalJournalEntry.SubledgerVoucher;
                taxGSTAuditFileLedgerTmp_MY.SourceDocumentID = generalJournalEntry.DocumentNumber;
                taxGSTAuditFileLedgerTmp_MY.SourceType = enum2Str(generalJournalEntry.JournalCategory);
                taxGSTAuditFileLedgerTmp_MY.DebitAmountInAccountingCurrency = generalJournalAccountEntry.IsCredit ? 0 : generalJournalAccountEntry.AccountingCurrencyAmount;
                taxGSTAuditFileLedgerTmp_MY.CreditAmountInAccountingCurrency = generalJournalAccountEntry.IsCredit ? generalJournalAccountEntry.AccountingCurrencyAmount * -1 : 0;
                taxGSTAuditFileLedgerTmp_MY.BalanceAmountInAccountingCurrency = balance;
                taxGSTAuditFileLedgerTmp_MY.IsOpeningBalance = NoYes::No;
                taxGSTAuditFileLedgerTmp_MY.insert();
                this.countIntoTotal(taxGSTAuditFileLedgerTmp_MY);
            }
        }

        return taxGSTAuditFileLedgerTmp_MY;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPurchaseListing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills purchase listing dataset.
    /// </summary>
    /// <returns>
    /// A temporary table buffer that contains a list of purchase entries.
    /// </returns>
    public TaxGSTAuditFilePurchaseTmp_MY fillPurchaseListing()
    {
        TaxGSTAuditFilePurchaseTmp_MY				taxGSTAuditFilePurchaseTmp_MY;
        TaxTrans                                    taxTrans;
        TaxTable                                    taxTable;
        TaxGSTTaxInformation_MY                     taxGSTTaxInformation_MY;

        while select RecId, TaxBaseAmount, TaxAmount, TaxCode, SourceCurrencyCode, SourceBaseAmountCur, SourceTaxAmountCur from taxTrans
            where taxTrans.TransDate        >= periodStartDate
                && taxTrans.TransDate       <= periodEndDate || periodEndDate == Global::dateNull()
                && (taxTrans.TaxDirection   == TaxDirection::IncomingTax || taxTrans.TaxDirection == TaxDirection::UseTax)
                && taxTrans.TaxPeriod       == settlementPeriod
                && taxTrans.SourceTableId   != 0                // Exclude tax trans generated by sales tax payment.
            outer join taxGSTTaxInformation_MY order by Name, InvoiceDate, InvoiceId, LineNumber
                where taxGSTTaxInformation_MY.SourceTableId == taxTrans.SourceTableId
                    && taxGSTTaxInformation_MY.SourceRecId  == taxTrans.SourceRecId
            exists join TaxCode, TaxPeriod from taxTable
                where taxTable.TaxCode      == taxTrans.TaxCode
                    && taxTable.TaxPeriod   == settlementPeriod
                    && taxTable.isGST_MY
        {
            taxGSTAuditFilePurchaseTmp_MY.clear();

            taxGSTAuditFilePurchaseTmp_MY.TaxTransRecId = taxTrans.RecId;
            taxGSTAuditFilePurchaseTmp_MY.SupplierName = taxGSTTaxInformation_MY.Name;
            taxGSTAuditFilePurchaseTmp_MY.SupplierBRN = taxGSTTaxInformation_MY.OrganizationNumber;
            taxGSTAuditFilePurchaseTmp_MY.InvoiceDate = taxGSTTaxInformation_MY.InvoiceDate;
            taxGSTAuditFilePurchaseTmp_MY.InvoiceNumber = taxGSTTaxInformation_MY.InvoiceId;
            taxGSTAuditFilePurchaseTmp_MY.ProductDescription = taxGSTTaxInformation_MY.Description;
            taxGSTAuditFilePurchaseTmp_MY.ImportDeclarationNo = taxGSTTaxInformation_MY.ImportDeclarationNo;
            taxGSTAuditFilePurchaseTmp_MY.LineNumber = int642int(taxGSTTaxInformation_MY.LineNumber);
            taxGSTAuditFilePurchaseTmp_MY.PurchaseValueMYR = taxTrans.TaxBaseAmount;
            taxGSTAuditFilePurchaseTmp_MY.GSTValueMYR = taxTrans.TaxAmount;
            taxGSTAuditFilePurchaseTmp_MY.TaxCode = taxTrans.TaxCode;

            if (taxTrans.SourceCurrencyCode == accountingCurrency)
            {
                taxGSTAuditFilePurchaseTmp_MY.FCYCode = '';
                taxGSTAuditFilePurchaseTmp_MY.PurchaseFCY = 0;
                taxGSTAuditFilePurchaseTmp_MY.GSTFCY = 0;
            }
            else
            {
                taxGSTAuditFilePurchaseTmp_MY.FCYCode = taxTrans.SourceCurrencyCode;
                taxGSTAuditFilePurchaseTmp_MY.PurchaseFCY = taxTrans.SourceBaseAmountCur;
                taxGSTAuditFilePurchaseTmp_MY.GSTFCY = taxTrans.SourceTaxAmountCur;
            }

            if (!invalidRecordsOnly || !taxGSTAuditFilePurchaseTmp_MY.isValid())
            {
                taxGSTAuditFilePurchaseTmp_MY.insert();
            }

            this.countIntoTotal(taxGSTAuditFilePurchaseTmp_MY);
        }

        return taxGSTAuditFilePurchaseTmp_MY;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillSupplyListing</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills supply listing dataset.
    /// </summary>
    /// <returns>
    /// A temporary table buffer that contains a list of supply entries.
    /// </returns>
    public TaxGSTAuditFileSupplyTmp_MY fillSupplyListing()
    {
        TaxGSTAuditFileSupplyTmp_MY                 taxGSTAuditFileSupplyTmp_MY;
        TaxTrans                                    taxTrans;
        TaxTable                                    taxTable;
        TaxGSTTaxInformation_MY                     taxGSTTaxInformation_MY;

        while select RecId, TaxBaseAmount, TaxAmount, TaxCode, SourceCurrencyCode, SourceBaseAmountCur, SourceTaxAmountCur, TaxDirection from taxTrans
            where taxTrans.TransDate        >= periodStartDate
                && taxTrans.TransDate       <= periodEndDate || periodEndDate == Global::dateNull()
                && (taxTrans.TaxDirection   == TaxDirection::OutgoingTax || taxTrans.TaxDirection == TaxDirection::UseTax)
                && taxTrans.TaxPeriod       == settlementPeriod
                && taxTrans.SourceTableId   != 0                // Exclude tax trans generated by sales tax payment.
            outer join taxGSTTaxInformation_MY order by Name, InvoiceDate, InvoiceId, LineNumber
                where taxGSTTaxInformation_MY.SourceTableId == taxTrans.SourceTableId
                    && taxGSTTaxInformation_MY.SourceRecId  == taxTrans.SourceRecId
            exists join TaxCode, TaxPeriod from taxTable
                where taxTable.TaxCode      == taxTrans.TaxCode
                    && taxTable.TaxPeriod   == settlementPeriod
                    && taxTable.isGST_MY
        {
            taxGSTAuditFileSupplyTmp_MY.clear();

            taxGSTAuditFileSupplyTmp_MY.TaxTransRecId       = taxTrans.RecId;
            taxGSTAuditFileSupplyTmp_MY.CustomerName        = taxGSTTaxInformation_MY.Name;
            taxGSTAuditFileSupplyTmp_MY.CustomerBRN         = taxGSTTaxInformation_MY.OrganizationNumber;
            taxGSTAuditFileSupplyTmp_MY.Country             = taxGSTTaxInformation_MY.Country;
            taxGSTAuditFileSupplyTmp_MY.InvoiceDate         = taxGSTTaxInformation_MY.InvoiceDate;
            taxGSTAuditFileSupplyTmp_MY.InvoiceNumber       = taxGSTTaxInformation_MY.InvoiceId;
            taxGSTAuditFileSupplyTmp_MY.ProductDescription  = taxGSTTaxInformation_MY.Description;
            taxGSTAuditFileSupplyTmp_MY.LineNumber          = int642int(taxGSTTaxInformation_MY.LineNumber);
            taxGSTAuditFileSupplyTmp_MY.SupplyValueMYR      = taxTrans.TaxDirection == TaxDirection::UseTax ? taxTrans.TaxBaseAmount : taxTrans.TaxBaseAmount * (-1);
            taxGSTAuditFileSupplyTmp_MY.GSTValueMYR         = taxTrans.TaxDirection == TaxDirection::UseTax ? taxTrans.TaxAmount : taxTrans.TaxAmount * (-1);
            taxGSTAuditFileSupplyTmp_MY.TaxCode             = taxTrans.TaxCode;

            if (taxTrans.SourceCurrencyCode == accountingCurrency)
            {
                taxGSTAuditFileSupplyTmp_MY.FCYCode = '';
                taxGSTAuditFileSupplyTmp_MY.SupplyFCY = 0;
                taxGSTAuditFileSupplyTmp_MY.GSTFCY = 0;
            }
            else
            {
                taxGSTAuditFileSupplyTmp_MY.FCYCode     = taxTrans.SourceCurrencyCode;
                taxGSTAuditFileSupplyTmp_MY.SupplyFCY   = taxTrans.TaxDirection == TaxDirection::UseTax ? taxTrans.SourceBaseAmountCur : taxTrans.SourceBaseAmountCur * (-1);
                taxGSTAuditFileSupplyTmp_MY.GSTFCY      = taxTrans.TaxDirection == TaxDirection::UseTax ? taxTrans.SourceTaxAmountCur : taxTrans.SourceTaxAmountCur * (-1);
            }

            if (!invalidRecordsOnly || !taxGSTAuditFileSupplyTmp_MY.isValid())
            {
                taxGSTAuditFileSupplyTmp_MY.insert();
            }

            this.countIntoTotal(taxGSTAuditFileSupplyTmp_MY);
        }

        return taxGSTAuditFileSupplyTmp_MY;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateOpeningBalanceByPostingLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate opening balance in specified posting layer for the main account
    /// </summary>
    /// <param name="_mainAccount">
    /// the main account that this method calculates opening balance for
    /// </param>
    /// <param name="_postingLayer">
    /// the posting layer specified for opening balance calculation
    /// </param>
    /// <returns>
    /// opening balance of the main account in specified posting layer
    /// </returns>
    private Amount calculateOpeningBalanceByPostingLayer(MainAccount _mainAccount, OperationsTax _postingLayer)
    {
        Amount balance;
        List postingLayerList = LedgerPostingLayerTmp::createPostingLayerList(_postingLayer);

        // Check whether it is first period of the fiscal year.
        if (previousPeriodEndDate < fiscalCalendarYear.StartDate)
        {
            // Calculate opening balance for first period, the opening balance of first period need substract first day's operating balance.
            balance = _mainAccount.calculateBalance(fiscalCalendarYear.StartDate, fiscalCalendarYear.StartDate, FiscalPeriodType::Opening, postingLayerList)
                        - _mainAccount.calculateBalance(fiscalCalendarYear.StartDate, fiscalCalendarYear.StartDate, FiscalPeriodType::Operating, postingLayerList);
        }
        else
        {
            // Calculate opening balance for other periods, use previous period balance as this period's opening balance.
            balance = _mainAccount.calculateBalance(fiscalCalendarYear.StartDate, previousPeriodEndDate, FiscalPeriodType::Opening, postingLayerList);
        }

        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOpeningBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculate opening balance for the main account
    /// </summary>
    /// <param name="_mainAccount">
    /// the main account that this method calculates opening balance for
    /// </param>
    /// <returns>
    /// opening balance of the main account
    /// </returns>
    private Amount getOpeningBalance(MainAccount _mainAccount)
    {
        Amount  balance, balanceCurrentLayer, balanceOperationsLayer, balanceTaxLayer;

        if (this.checkBalanceCurrentLayer(postingLayer))
        {
            balanceCurrentLayer = this.calculateOpeningBalanceByPostingLayer(_mainAccount, OperationsTax::Current);
        }

        if (this.checkBalanceOperationsLayer(postingLayer))
        {
            balanceOperationsLayer = this.calculateOpeningBalanceByPostingLayer(_mainAccount, OperationsTax::OnlyOperations);
        }

        if (this.checkBalanceTaxLayer(postingLayer))
        {
            balanceTaxLayer = this.calculateOpeningBalanceByPostingLayer(_mainAccount, OperationsTax::OnlyTax);
        }

        balance = balanceCurrentLayer + balanceOperationsLayer + balanceTaxLayer;
        return balance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBalanceCurrentLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the posting layer to calculate the balance.
    /// </summary>
    /// <param name = "_postingLayer">Posting layer.</param>
    /// <returns>true if the posting layer matches. Otherwise, false.</returns>
    public boolean checkBalanceCurrentLayer(OperationsTax _postingLayer)
    {
        boolean currentLayer;

        if (_postingLayer    == OperationsTax::Current
            || _postingLayer == OperationsTax::Operations
            || _postingLayer == OperationsTax::Tax
            || _postingLayer == OperationsTax::Total)
        {
            currentLayer = true;
        }

        return currentLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBalanceOperationsLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the posting layer to calculate the balance.
    /// </summary>
    /// <param name = "_postingLayer">Posting layer.</param>
    /// <returns>true if the posting layer matches. Otherwise, false.</returns>
    public boolean checkBalanceOperationsLayer(OperationsTax _postingLayer)
    {
        boolean operationsLayer;

        if (_postingLayer    == OperationsTax::OnlyOperations
            || _postingLayer == OperationsTax::Operations
            || _postingLayer == OperationsTax::OperationsPlusTax
            || _postingLayer == OperationsTax::Total)
        {
            operationsLayer = true;
        }

        return operationsLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkBalanceTaxLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the posting layer to calculate the balance.
    /// </summary>
    /// <param name = "_postingLayer">Posting layer.</param>
    /// <returns>true if the posting layer matches. Otherwise, false.</returns>
    public boolean checkBalanceTaxLayer(OperationsTax _postingLayer)
    {
        boolean taxLayer;

        if (_postingLayer    == OperationsTax::OnlyTax
            || _postingLayer == OperationsTax::Tax
            || _postingLayer == OperationsTax::OperationsPlusTax
            || _postingLayer == OperationsTax::Total)
        {
            taxLayer = true;
        }

        return taxLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateGeneralLedgerQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the query used to fill general ledger section of GAF
    /// </summary>
    /// <param name="_query">
    /// the query used to fill general ledger section of GAF
    /// </param>
    private void updateGeneralLedgerQuery(Query _query)
    {
        QueryBuildDataSource qbdsGeneralJournalEntry = _query.dataSourceTable(tableNum(GeneralJournalEntry));

        SysQuery::findOrCreateRange(qbdsGeneralJournalEntry, fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(periodStartDate, periodEndDate));
        SysQuery::findOrCreateRange(qbdsGeneralJournalEntry, fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(Ledger::current()));

        if (this.isCurrentLayer(postingLayer))
        {
            qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, PostingLayer)).value(queryValue(CurrentOperationsTax::Current));
        }

        if (this.isOperationsLayer(postingLayer))
        {
            qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, PostingLayer)).value(queryValue(CurrentOperationsTax::Operations));
        }

        if (this.isTaxLayer(postingLayer))
        {
            qbdsGeneralJournalEntry.addRange(fieldNum(GeneralJournalEntry, PostingLayer)).value(queryValue(CurrentOperationsTax::Tax));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isCurrentLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the posting layer matches.
    /// </summary>
    /// <param name = "_postingLayer">Posting layer.</param>
    /// <returns>true if the posting layer matches. Otherwise, false.</returns>
    public boolean isCurrentLayer(OperationsTax _postingLayer)
    {
        boolean currentLayer;

        if (_postingLayer    == OperationsTax::Current
            || _postingLayer == OperationsTax::Operations
            || _postingLayer == OperationsTax::Tax)
        {
            currentLayer = true;
        }

        return currentLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isOperationsLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the posting layer matches.
    /// </summary>
    /// <param name = "_postingLayer">Posting layer.</param>
    /// <returns>true if the posting layer matches. Otherwise, false.</returns>
    public boolean isOperationsLayer(OperationsTax _postingLayer)
    {
        boolean operationsLayer;

        if (_postingLayer    == OperationsTax::OnlyOperations
            || _postingLayer == OperationsTax::Operations
            || _postingLayer == OperationsTax::OperationsPlusTax)
        {
            operationsLayer = true;
        }

        return operationsLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxLayer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks the posting layer matches.
    /// </summary>
    /// <param name = "_postingLayer">Posting layer.</param>
    /// <returns>true if the posting layer matches. Otherwise, false.</returns>
    public boolean isTaxLayer(OperationsTax _postingLayer)
    {
        boolean taxLayer;

        if (_postingLayer    == OperationsTax::OnlyTax
            || _postingLayer == OperationsTax::Tax
            || _postingLayer == OperationsTax::OperationsPlusTax)
        {
            taxLayer = true;
        }

        return taxLayer;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize the instance of the <c>TaxGSTAuditFileDataProvider_MY</c> class.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The tax period
    /// </param>
    /// <param name="_taxSettlementPeriodStartDate">
    /// The start date of a tax period
    /// </param>
    /// <param name="_taxSettlementPeriodEndDate">
    /// The end date of a tax period
    /// </param>
    /// <param name="_creationDate">
    /// The creation date of a GST audit file
    /// </param>
    /// <param name="_fromDate">
    /// A date used to get a tax period
    /// </param>
    /// <param name="_postingLayer">
    /// A date used to get a posting layer
    /// </param>
    public void init(
        TaxPeriod       _taxPeriod,
        FromDate        _taxSettlementPeriodStartDate,
        ToDate          _taxSettlementPeriodEndDate,
        CreationDate    _creationDate,
        TransDate       _fromDate,
        OperationsTax   _postingLayer,
        boolean         _invalidRecordsOnly = false)
    {
        settlementPeriod = _taxPeriod;
        periodStartDate  = _taxSettlementPeriodStartDate;
        periodEndDate    = _taxSettlementPeriodEndDate;
        creationDate     = _creationDate;
        fromDate         = _fromDate;
        postingLayer     = _postingLayer;

        fiscalCalendarRecId = Ledger::fiscalCalendar();
        fiscalCalendarYear  = fiscalCalendarYear::findYearByCalendarDate(fiscalCalendarRecId, fromDate);
        if (!fiscalCalendarYear)
        {
            // @SYS328431: Fiscal year for %1 does not exist.
            throw error(strFmt("@SYS328431", fromDate));
        }

        previousPeriodEndDate   = FiscalCalendars::findPrevPeriodEndDateByDate(fiscalCalendarRecId, fromDate);

        accountingCurrency     = Ledger::accountingCurrency();
        currencyExchangeHelper = CurrencyExchangeHelper::construct();
        currencyExchangeHelper.parmExchangeRateTypeRecId(Ledger::defaultExchangeRateType());

        invalidRecordsOnly  = _invalidRecordsOnly;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Constructs the instance of the <c>TaxGSTAuditFileDataProvider_MY</c> class.
    /// </summary>
    /// <param name="_taxPeriod">
    /// The tax period
    /// </param>
    /// <param name="_taxSettlementPeriodStartDate">
    /// The start date of a tax period
    /// </param>
    /// <param name="_taxSettlementPeriodEndDate">
    /// The end date of a tax period
    /// </param>
    /// <param name="_creationDate">
    /// The creation date of a GST audit file
    /// </param>
    /// <param name="_fromDate">
    /// A date used to get a tax period
    /// </param>
    /// <param name="_postingLayer">
    /// A date used to get a posting layer
    /// </param>
    /// <returns>
    /// The instance of the <c>TaxGSTAuditFileDataProvider_MY</c> class.
    /// </returns>
    public static TaxGSTAuditFileDataProvider_MY construct(
        TaxPeriod       _taxPeriod,
        FromDate        _taxSettlementPeriodStartDate,
        ToDate          _taxSettlementPeriodEndDate,
        TransDate       _creationDate,
        TransDate       _fromDate,
        OperationsTax   _postingLayer,
        boolean         _invalidRecordsOnly = false)
    {
        TaxGSTAuditFileDataProvider_MY  dataProvider;

        dataProvider    = new TaxGSTAuditFileDataProvider_MY();

        dataProvider.init(_taxPeriod, _taxSettlementPeriodStartDate, _taxSettlementPeriodEndDate, _creationDate, _fromDate, _postingLayer, _invalidRecordsOnly);

        return dataProvider;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>