<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RHolderData_ActAdjustCustVend</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class RHolderData_ActAdjustCustVend extends RHolderData
{
//Name of fields for struct with data
#define.transDate("transDate")           //Document's date
#define.document("document")             //Document
#define.amountOfDoc("ammountOfDoc")      //Amount of document
#define.amountDebit("ammountDebit")      //Debit of document
#define.amountCredit("ammountCredit")    //Credit of document
#define.turnoverDebit("turnoverDebit")   //Amount of turnover by debit
#define.turnoverCredit("turnoverCredit") //Amount of turnover by credit
#define.tableID("tableID")               //Identifier of table for transition to original document
#define.recID("recID")                   //Identifier of record for transition to original document
#define.currencyCode("Currency")         //Currency of transaction (field can be absent)
#define.voucher("Voucher")               //Voucher (field can be absent)

#localMacro.fieldList
    #transDate,
    #document,
    #amountOfDoc,
    #amountDebit,
    #amountCredit,
    #turnoverDebit,
    #turnoverCredit,
    #tableID,
    #recID,
    #currencyCode,
    #voucher
#endMacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addSumInComplianceWithKey</Name>
				<Source><![CDATA[
        protected void addSumInComplianceWithKey(container _key, anytype _valueValue)
    {
        Struct oldValue, newValue;
        ;
        oldValue = map.lookup(_key);
        newValue = RHolderData_ActAdjustCustVend::addStruct(oldValue, _valueValue);

        map.insert(_key, newValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFieldNames</Name>
				<Source><![CDATA[
        //Return field names into "struct" with data.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public container getFieldNames()
    {
        return [ #fieldList ];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        // _keyLen               -> Count elements into key (length container).
    // _conColumnAsOneColumn -> There are column numbers used as one key (i.e. as one group).
    public void new(int       _keyLen,
                    container _conColumnAsOneColumn = connull())
    {
        super( _keyLen, Types::Class, _conColumnAsOneColumn, #defaultEmptyValue);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addStruct</Name>
				<Source><![CDATA[
        //Return result of operation (_a + _b)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public Struct addStruct(Struct _a, Struct _b)
    {
        Struct struct;
        int    cx, iCnt;
        Amount amount;

        if (_a && _b)
        {
            struct = Struct::create(_a.pack());

            iCnt = _a.index(#turnoverCredit);

            for (cx = _a.index(#amountDebit); cx <= iCnt; cx++)
            {
                amount = _a.valueIndex(cx) + _b.valueIndex(cx);
                struct.valueIndex(cx, amount);
            }
        }
        else
        {
            if (_a)
            {
                struct = Struct::create(_a.pack());
            }
            else
            {
                struct = Struct::create(_b.pack());
            }
        }

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createStruct</Name>
				<Source><![CDATA[
        //Create struct explotable as Value
    // _transDate       -> Document's date.
    // _document        -> Document.
    // _amountOfDoc     -> Amount of document.
    // _amountDebit     -> Debit of document.
    // _amountCredit    -> Credit of document.
    // _turnoverDebit   -> Amount of turnover by debit
    // _turnoverCredit  -> Amount of turnover by credit
    // _tableID         -> Identifier of table for transition to original document.
    // _recID           -> Identifier of record for transition to original document.
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public Struct createStruct(TransDate   _transDate,
                                      str         _document,
                                      Amount      _amountOfDoc,
                                      Amount      _amountDebit,
                                      Amount      _amountCredit,
                                      Amount      _turnoverDebit  = 0,
                                      Amount      _turnoverCredit = 0,
                                      tableId     _tableId        = 0,
                                      RecID       _recID          = 0)
    {
        Struct  struct;

        ;

        struct = new Struct(Types::Integer,             #tableID,
                            typeName2Type(extendedTypeStr(recId)), #recID,
                            Types::Date,                #transDate,
                            Types::String,              #document,
                            Types::Real,                #amountOfDoc,
                            Types::Real,                #amountDebit,
                            Types::Real,                #amountCredit,
                            Types::Real,                #turnoverDebit,
                            Types::Real,                #turnoverCredit);

        struct.value(#tableID,        _tableId);
        struct.value(#recID,          _recID);
        struct.value(#transDate,      _transDate);
        struct.value(#document,       _document);
        struct.value(#amountOfDoc,    _amountOfDoc);
        struct.value(#amountDebit,    _amountDebit);
        struct.value(#amountCredit,   _amountCredit);
        struct.value(#turnoverDebit,  _turnoverDebit);
        struct.value(#turnoverCredit, _turnoverCredit);

        return struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyStruct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static public Struct emptyStruct()
    {
    #define.emptyStr("")

        return RHolderData_ActAdjustCustVend::createStruct(dateNull(), #emptyStr, 0, 0, 0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertCurrencyCode</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static public Struct insertCurrencyCode(Struct _struct, CurrencyCode _currencyCode)
    {
        if (_struct.index(#CurrencyCode))
        {
            _struct.value(#CurrencyCode, _currencyCode);
        }
        else
        {
            _struct.add(#CurrencyCode, _currencyCode);
        }

        return _struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertVoucher</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static public Struct insertVoucher(Struct _struct, Voucher _voucher)
    {
        str sz = _voucher;

        if (_struct.index(#voucher))
        {
            _struct.value(#voucher, sz);
        }
        else
        {
            _struct.add(#voucher, sz);
        }

        return _struct;
    }

]]></Source>
			</Method>
			<Method>
				<Name>subStruct</Name>
				<Source><![CDATA[
        //Return result of operation (_a - _b)
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    static public Struct subStruct(Struct _a, Struct _b)
    {
        Struct struct;
        int    cx, iCnt;
        Amount amount;

        if (_a && _b)
        {
            struct = Struct::create(_a.pack());

            iCnt = _a.index(#turnoverCredit);

            for (cx = _a.index(#amountDebit); cx <= iCnt; cx++)
            {
                amount = _a.valueIndex(cx) - _b.valueIndex(cx);
                struct.valueIndex(cx, amount);
            }
        }
        else
        {
            if (_a)
            {
                struct = Struct::create(_a.pack());
            }
            if (_b)
            {
                struct = RHolderData_ActAdjustCustVend::subStruct(RHolderData_ActAdjustCustVend::emptyStruct(), _b);
            }
        }

        return struct;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>