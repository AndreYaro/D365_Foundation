<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerJournalizeReportDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>LedgerJournalizeReportDP</c> class is the Report Data Provider class for the
///    <c>LedgerJournalizeReport</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(LedgerJournalizeReport))
]
public class LedgerJournalizeReportDP extends SRSReportDataProviderBase
{
    LedgerJournalizeReportTmp ledgerJournalizeReportTmp;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getLedgerJournalizeReportTmp</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fetches the data from the <c>LedgerJournalizeReportTmp</c> temporary table.
    /// </summary>
    /// <returns>
    ///    Data from the <c>LedgerJournalizeReportTmp</c> table.
    /// </returns>
    [SRSReportDataSetAttribute(tablestr(LedgerJournalizeReportTmp))]
    public LedgerJournalizeReportTmp getLedgerJournalizeReportTmp()
    {
        select ledgerJournalizeReportTmp;
        return ledgerJournalizeReportTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the SSRS report business logic.
    /// </summary>
    /// <remarks>
    ///    This method is used to process the report business logic that is used by the
    ///    <c>LedgerJournalizeReport</c> SRS report.
    /// </remarks>
    public void processReport()
    {
        QueryRun queryRun;
        AmountMST accumulatedDebit;
        AmountMST accumulatedCredit;
        AmountMST amountDebit;
        AmountMST amountCredit;
       
        GeneralJournalEntry generalJournalEntry;
        GeneralJournalAccountEntry generalJournalAccountEntry;
        LedgerEntryJournalizing ledgerEntryJournalizing;
        MainAccountLedgerDimensionView mainAccountLedgerDimensionView;
        TransactionLog transactionLog;
        #ISOCountryRegionCodes

        queryRun = new QueryRun(this.parmQuery());

        while (queryRun.next())
        {
            transactionLog = queryRun.get(tablenum(TransactionLog)) as TransactionLog;
            generalJournalEntry = queryRun.get(tablenum(GeneralJournalEntry)) as  GeneralJournalEntry ;
            generalJournalAccountEntry = queryRun.get(tablenum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            ledgerEntryJournalizing = queryRun.get(tablenum(LedgerEntryJournalizing)) as LedgerEntryJournalizing;
            mainAccountLedgerDimensionView = queryRun.get(tablenum(MainAccountLedgerDimensionView)) as MainAccountLedgerDimensionView;
            
            ledgerJournalizeReportTmp.CreatedDate = transactionLog.CreatedDateTime;
            ledgerJournalizeReportTmp.UserId = transactionLog.CreatedBy;
            ledgerJournalizeReportTmp.JournalizeSeqNum = ledgerEntryJournalizing.SequenceNumber;
            ledgerJournalizeReportTmp.JournalNumber = generalJournalEntry.JournalNumber;
            ledgerJournalizeReportTmp.FunctionalCurrencyAmount = generalJournalAccountEntry.AccountingCurrencyAmount;
            ledgerJournalizeReportTmp.Text = generalJournalAccountEntry.Text;
            ledgerJournalizeReportTmp.Journal = ledgerEntryJournalizing.Journal;
            ledgerJournalizeReportTmp.AccountingDate = generalJournalEntry.AccountingDate;
            ledgerJournalizeReportTmp.DisplayValue = mainAccountLedgerDimensionView.FullyQualifiedAccount;

            if (generalJournalAccountEntry.IsCredit == NoYes::Yes)
            {
                amountCredit = generalJournalAccountEntry.AccountingCurrencyAmount;
                accumulatedCredit += generalJournalAccountEntry.AccountingCurrencyAmount;
            }
            else
            {
                amountDebit = generalJournalAccountEntry.AccountingCurrencyAmount;
                accumulatedDebit += generalJournalAccountEntry.AccountingCurrencyAmount;
            }

            ledgerJournalizeReportTmp.AccumulatedDebit = accumulatedDebit;
            ledgerJournalizeReportTmp.AccumulatedCredit = accumulatedCredit;
            ledgerJournalizeReportTmp.AmountDebit = amountDebit;
            ledgerJournalizeReportTmp.AmountCredit = amountCredit;
            ledgerJournalizeReportTmp.LastTxt = "@SYS77981";
            amountDebit = 0;
            amountCredit = 0;

            ledgerJournalizeReportTmp.insert();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>