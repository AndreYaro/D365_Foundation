<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailDocumentOperationProcessorTransferOrderBase</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Collections;
using System.Xml.Linq;
using Microsoft.Dynamics.Commerce.Runtime.TransactionService;
using CommerceRunTimeDataModel = Microsoft.Dynamics.Commerce.Runtime.DataModel;

/// <summary>
/// The <c>RetailDocumentOperationProcessorTransferOrderBase</c> class is a base retail inventory transfer order operation processor contains shared transfer order logic.
/// </summary>
internal abstract class RetailDocumentOperationProcessorTransferOrderBase extends RetailDocumentOperationProcessorInventoryDocumentBase
{
    internal const str DateFormat = 'MM/dd/yyy';
    internal const int defaultNumberOfCharacters = 5;
    internal const int defaultNumberOfDecimals = 3;
    internal const str WmsLocationIdAttribute = 'WmsLocationId';
    internal const str InventoryStatusIdAttribute = 'InventoryStatusId';
    internal const str UpdatedByWorkerAttributeName  = 'UpdatedByWorker';

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>processQuantityToUpdate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process update now quantity, should be implemented in subclasses.
    /// </summary>
    /// <param name = "_quantityToUpdate">The quantity to update.</param>
    /// <param name = "_inventTransferLine">The invent transfer line xml element.</param>
    /// <param name = "_numberOfCharacters">The number of characters when convert _quantityToUpdate value to string.</param>
    /// <param name = "_numberOfDecimals">The number of decimals when convert _quantityToUpdate value to string.</param>
    protected abstract void processQuantityToUpdate(real _quantityToUpdate, XmlElement _inventTransferLine, int _numberOfCharacters, int _numberOfDecimals)
    {
        // Abstract function is only implemented in subclasses.
    }

]]></Source>
			</Method>
			<Method>
				<Name>processLicensePlateId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Process license plate id, should be implemented in subclasses.
    /// </summary>
    /// <param name = "_originalInventTransferLine">The original invent transfer line.</param>
    /// <param name = "_inventoryDocumentLine"> The inventory document line.</param>
    /// <param name = "_inventTransferLine">The invent transfer line xml element.</param>
    protected abstract void processLicensePlateId(InventTransferLine _originalInventTransferLine, CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _inventoryDocumentLine, XmlElement _inventTransferLine)
    {
        // Abstract function is only implemented in subclasses.
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOrUpdateTransferOrder</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create or update transfer order, should be implemented in subclasses.
    /// </summary>
    /// <param name = "_transferXmlStr">An XML string containing details of a transfer order.</param>
    /// <returns>A container object to indicate the result document.</returns>
    protected abstract container createOrUpdateTransferOrder(str _transferXmlStr)
    {
        // Abstract function is only implemented in subclasses.
    }

]]></Source>
			</Method>
			<Method>
				<Name>processInternal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the document of transfer order operation.
    /// </summary>
    /// <returns>A container object to indicate the result document.</returns>
    protected container processInternal()
    {
        str inventoryDocumentJsonStr = conPeek(this.requestContainer, 1);

        CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument inventoryCommitDocument = RetailTransactionServiceJsonHelper::DeserializeInventoryInboundOutboundCommitDocumentFromJSON(inventoryDocumentJsonStr);
        this.validateInventoryInboundOutboundCommitDocument(inventoryCommitDocument);
        str transferXmlStr = this.convertInventoryInboundOutboundCommitDocumentToXml(inventoryCommitDocument);
        this.attachNoteForInventoryCommitDocument(inventoryCommitDocument);
        container result = this.createOrUpdateTransferOrder(transferXmlStr);
        boolean isSuccess = conPeek(result, RetailDocumentOperationProcessorInventoryDocumentBase::IsSuccessIndex);
        if (!isSuccess)
        {
            this.throwsException(false, conPeek(result, RetailDocumentOperationProcessorInventoryDocumentBase::ErrorMessageIndex), RetailDocumentOperationProcessingErrorCode::InternalProcessingFailed);
        }

        return [conPeek(result, RetailDocumentOperationProcessorInventoryDocumentBase::ResponseDocumentIndex)];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocument</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>InventTransferTable</c> table object from <c>InventoryInboundOutboundDocument</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocument">The inventory document.</param>
    /// <returns>
    /// An <c>InventTransferTable</c> table object with <c>Common</c> type.
    /// </returns>
    protected Common getDocument(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocument _inventoryInboundOutboundDocument)
    {
        Common ret;

        InventTransferId transferOrderId = _inventoryInboundOutboundDocument.get_SourceDocument().get_DocumentId();
        ret = InventTransferTable::find(transferOrderId);

        if (!ret)
        {
            throw error(strFmt("@Retail:InvalidTransferIdError", transferOrderId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDocumentLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get <c>InventTransferLine</c> table object from <c>InventoryInboundOutboundDocumentLine</c>.
    /// </summary>
    /// <param name = "_inventoryInboundOutboundDocument">The inventory document line.</param>
    /// <returns>
    /// An <c>InventTransferLine</c> table object with <c>Common</c> type.
    /// </returns>
    protected Common getDocumentLine(Microsoft.Dynamics.Commerce.Runtime.DataModel.InventoryInboundOutboundDocumentLine _inventoryInboundOutboundDocumentLine)
    {
        Common ret;

        RecId transferOrderLineRecId = _inventoryInboundOutboundDocumentLine.get_SourceDocumentLine().get_RecordId();
        InventTransferId transferOrderId = _inventoryInboundOutboundDocumentLine.get_SourceDocumentLine().get_DocumentId();
        ret = InventTransferLine::findRecId(transferOrderLineRecId);

        if (!ret)
        {
            throw error (strFmt("@Retail:CannotFindTranferOrderLineError", transferOrderLineRecId, transferOrderId));
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertInventoryInboundOutboundCommitDocumentToXml</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert <c>InventoryInboundOutboundCommitDocument</c> to XML string which represents transfer order details.
    /// </summary>
    /// <param name="_inventoryCommitDocument">
    /// The inventory commit document.
    /// </param>
    /// <returns>An XML string for transfer order details.</returns>
    protected str convertInventoryInboundOutboundCommitDocumentToXml(CommerceRunTimeDataModel.InventoryInboundOutboundCommitDocument _inventoryCommitDocument)
    {
        CommerceRunTimeDataModel.InventoryInboundOutboundDocument inventoryDocument = _inventoryCommitDocument.Document;
        IEnumerable lineList = _inventoryCommitDocument.DocumentLines as IEnumerable;

        XmlDocument doc = new XmlDocument();
        XmlElement transferTableElement = doc.CreateElement(tableStr(InventTransferTable));
        doc.AppendChild(transferTableElement);
        transferTableElement.setAttribute(fieldStr(InventTransferTable, TransferId), inventoryDocument.get_SourceDocument().get_DocumentId());
        transferTableElement.setAttribute(fieldStr(InventTransferTable, RecId), int642Str(inventoryDocument.get_SourceDocument().get_RecordId()));
        transferTableElement.setAttribute(fieldStr(InventTransferTable, InventLocationIdFrom), inventoryDocument.get_SourceDocument().get_Sender());
        transferTableElement.setAttribute(fieldStr(InventTransferTable, InventLocationIdTo), inventoryDocument.get_SourceDocument().get_Receiver());
        transferTableElement.setAttribute(fieldStr(InventTransferTable, ShipDate), inventoryDocument.get_SourceDocument().get_ShipDate().ToString(DateFormat));
        transferTableElement.setAttribute(fieldStr(InventTransferTable, ReceiveDate), inventoryDocument.get_SourceDocument().get_ReceiveDate().ToString(DateFormat));

        if (this.retailDocumentOperation.RetailStaffId)
        {
            transferTableElement.setAttribute(UpdatedByWorkerAttributeName, this.retailDocumentOperation.RetailStaffId);
        }
        if (inventoryDocument.TransactionDate)
        {
            System.Nullable<System.DateTimeOffset> transacationDate =  inventoryDocument.TransactionDate;
            System.DateTimeOffset datetime = transacationDate.get_Value();
            System.String strDateTime = datetime.ToString(RetailDocumentOperationProcessorTransferOrderBase::DateFormat);
            transferTableElement.setAttribute(RetailTransactionServiceInventory::TransactionDateAttributeName, strDateTime);
        }

        IEnumerator enumerator = lineList.GetEnumerator();
        while (enumerator.MoveNext())
        {
            CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine line = enumerator.Current as CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine;
            this.validateInventoryInboundOutboundDocumentLine(line);
            XmlElement inventTransferLine = this.createInventoryInboundOutboundDocumentLineElement(doc, line);

            transferTableElement.appendChild(inventTransferLine);
        }

        return doc.innerXml();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryInboundOutboundDocumentLineElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert <c>InventoryInboundOutboundDocumentLine</c> to XML element which represents transfer order line details.
    /// </summary>
    /// <param name="_doc">
    /// The XML document used to create the XML element.
    /// </param>
    /// <param name="_inventoryDocumentLine">
    /// The inventory document line.
    /// </param>
    /// <returns>
    /// An XML element for transfer order line details.
    /// </returns>
    protected XmlElement createInventoryInboundOutboundDocumentLineElement(XmlDocument _doc, CommerceRunTimeDataModel.InventoryInboundOutboundDocumentLine _inventoryDocumentLine)
    {
        UnitOfMeasure unitOfMeasure;
        int numberOfDecimals = defaultNumberOfDecimals;

        XmlElement inventTransferLine = _doc.CreateElement(tableStr(InventTransferLine));
        inventTransferLine.setAttribute(fieldStr(InventTransferLine, RecId), int642Str(_inventoryDocumentLine.get_SourceDocumentLine().get_RecordId()));
        inventTransferLine.setAttribute(WmsLocationIdAttribute, _inventoryDocumentLine.LocationId);

        RecId transferLineRecId = _inventoryDocumentLine.get_SourceDocumentLine().get_RecordId();
        InventTransferLine originalInventTransferLine = InventTransferLine::findRecId(transferLineRecId);
        if (originalInventTransferLine)
        {
            InventDimId inventDimId = originalInventTransferLine.InventDimId;
            InventDim inventDimLine = InventDim::find(inventDimId);

            inventTransferLine.setAttribute(fieldStr(InventDim, InventDimId), InventDimId);

            if (inventDimLine)
            {
                inventTransferLine.setAttribute(InventoryStatusIdAttribute, inventDimLine.InventStatusId);
            }

            unitOfMeasure = UnitOfMeasure::findBySymbol(originalInventTransferLine.UnitId);
            if (unitOfMeasure.RecId)
            {
                numberOfDecimals = unitOfMeasure.DecimalPrecision;
            }

            this.processQuantityToUpdate(_inventoryDocumentLine.QuantityToUpdate, inventTransferLine, defaultNumberOfCharacters, numberOfDecimals);
            this.processLicensePlateId(originalInventTransferLine, _inventoryDocumentLine, inventTransferLine);

            inventTransferLine.setAttribute(fieldStr(InventTransferParmLine, CloseLine), _inventoryDocumentLine.get_IsCloseLine() ? 'True' : 'False');
        }

        // Append serial number lines
        IEnumerable serialNumberLineList = _inventoryDocumentLine.SerialNumberLines as IEnumerable;
        IEnumerator enumerator = serialNumberLineList.GetEnumerator();
        while (enumerator.MoveNext())
        {
            CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine line = enumerator.Current as CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine;
            // We only deal with registering serial number line.
            if (line.Status == CommerceRunTimeDataModel.InventorySerialNumberLineStatus::Registering)
            {
                XmlElement serialNumberLineElement = this.createInventoryInboundOutboundDocumentSerialNumberLineElement(_doc, line);

                inventTransferLine.appendChild(serialNumberLineElement);
            }
        }

        return inventTransferLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createInventoryInboundOutboundDocumentSerialNumberLineElement</Name>
				<Source><![CDATA[
    /// <summary>
    /// Convert <c>InventoryDocumentSerialNumberLine</c> to XML element which represents purchase order serial number line details.
    /// </summary>
    /// <param name="_doc">
    /// The XML document used to create the XML element.
    /// </param>
    /// <param name="_inventoryDocumentSerialNumberLine">
    /// The inventory document serial number line.
    /// </param>
    /// <returns>
    /// An XML element for purchase order serial number line details.
    /// </returns>
    private XmlElement createInventoryInboundOutboundDocumentSerialNumberLineElement(XmlDocument _doc, CommerceRunTimeDataModel.InventoryDocumentSerialNumberLine _inventoryDocumentSerialNumberLine)
    {
        XmlElement serialNumberLineElement = _doc.CreateElement(RetailRTSSerialNumberLine::SerialNumberLineName);
        serialNumberLineElement.setAttribute(RetailRTSSerialNumberLine::LineIdAttribute, _inventoryDocumentSerialNumberLine.LineId);
        serialNumberLineElement.setAttribute(RetailRTSSerialNumberLine::InventSerialIdAttribute, _inventoryDocumentSerialNumberLine.SerialNumber);
        serialNumberLineElement.setAttribute(RetailRTSSerialNumberLine::QtyAttribute, num2Str(_inventoryDocumentSerialNumberLine.Quantity, defaultNumberOfCharacters, defaultNumberOfCharacters, DecimalSeparator::Dot, ThousandSeparator::None));

        if (_inventoryDocumentSerialNumberLine.SourceLine)
        {
            serialNumberLineElement.setAttribute(RetailRTSSerialNumberLine::SourceInventTransRecIdAttribute, int642Str(_inventoryDocumentSerialNumberLine.SourceLine.InventTransRecordId));
        }

        return serialNumberLineElement;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>