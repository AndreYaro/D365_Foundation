<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ECollectionGenerationService</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The service of collection letter generation.
/// </summary>
class ECollectionGenerationService extends SysOperationServiceBase
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>generateECollection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs full process of generating collection letter file.
    /// </summary>
    /// <param name="_contract">
    /// The contract instance.
    /// </param>
    public void generateECollection(ECollectionGenerationDataContract _contract)
    {
        RecId recId = _contract.parmRecId();
        CustAccount custAccount = _contract.parmCustAccount();
        ERFormatMappingId eRFormatMappingId = _contract.parmERFormatMappingId();

        OIOUBLReportController OIOUBLReportController = new OIOUBLReportController();
        OIOUBLReportController.parmReminderSequenceNumeric(this.getReminderSequenceNumeric(custAccount));

        ERObjectsFactory::createFormatMappingRunByFormatMappingId(eRFormatMappingId)
            .withParameter(new ERModelDefinitionDatabaseContext()
                .addValue(tableNum(CustCollectionLetterJour), fieldNum(CustCollectionLetterJour, RecId), recId)
                .addValue(tableNum(CompanyInfo), fieldNum(CompanyInfo, DataArea), curext()))
            .withCreatingObjectParameter(EInvoiceConstants::ERModelNameCollection, 'O_' + classStr(OIOUBLReportController), OIOUBLReportController)
            .withFileDestination(_contract.getFileDestination())
            .run();

        EInvoiceGenerationBatchLink_W::findOrCreate(
            _contract.parmFormatMappingRunJobId(),
            tableName2id(tableStr(CustCollectionLetterJour)),
            recId,
            curExt());
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReminderSequenceNumeric</Name>
				<Source><![CDATA[
    private int64 getReminderSequenceNumeric(CustAccount _accountNum)
    {
        CustCollectionLetterJour custCollectionLetterJour;

        select count(RecId) from custCollectionLetterJour
            where  custCollectionLetterJour.AccountNum == _accountNum
                && custCollectionLetterJour.SentElectronically == NoYes::Yes;

        return custCollectionLetterJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSentElectronicallyCustCollectionLetterJour</Name>
				<Source><![CDATA[
    /// <summary>
    /// The function sets SentElectronically for the <c>CustCollectionLetterJour</c> record.
    /// </summary>
    /// <param name = "_refTableId"> Reference of <c>CustCollectionLetterJour</c> table.</param>
    /// <param name = "_refRecId"> Reference of <c>CustCollectionLetterJour</c> record.</param>
    /// <param name = "_value"> New value.</param>
    internal static void setSentElectronicallyCustCollectionLetterJour(
        RefTableId _refTableId,
        RefRecId _refRecId,
        NoYes _value = NoYes::Yes)
    {
        CustCollectionLetterJour custCollectionLetterJour = CustCollectionLetterJour::findRecId(_refRecId);

        if (custCollectionLetterJour && custCollectionLetterJour.SentElectronically != _value)
        {
            ttsbegin;
            custCollectionLetterJour.selectForUpdate(true);
            custCollectionLetterJour.SentElectronically = _value;
            custCollectionLetterJour.update();
            ttscommit;
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>