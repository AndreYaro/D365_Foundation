<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EInvoiceSchemaValidation_MX</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.Xml.Linq;
using System.Xml.Schema;

/// <summary>
/// The <c>EInvoiceSchemaValidation_MX</c> class handles the schema validation for the eInvoice
/// functionality.
/// </summary>
public class EInvoiceSchemaValidation_MX extends XmlSchemaValidation
{
    private str foreignTradeSchema;
    private str cartaPorteSchema;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getNameSpace</Name>
				<Source><![CDATA[
    protected str getNameSpace()
    {
        return 'http://www.sat.gob.mx/cfd/2';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getForeignTradeNameSpace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the expected name space of the XML doc for foreign trade.
    /// </summary>
    /// <returns>
    /// The expected namespace.
    /// </returns>
    protected str getForeignTradeNameSpace()
    {
        return 'http://www.sat.gob.mx/ComercioExterior11';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getCartaPorteNameSpace</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the expected name space of the XML doc for transportation note.
    /// </summary>
    /// <returns>
    /// The expected namespace.
    /// </returns>
    [Hookable(false)]
    protected str getCartaPorteNameSpace()
    {
        return 'http://www.sat.gob.mx/CartaPorte';
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiate a new instance of the <c>EInvoiceSchemaValidation_MX</c> class
    /// </summary>
    /// <param name="_xsdFile">The schema file</param>
    /// <param name="_isCFDI">Indicates if the electronic invoice is a CFDI</param>
    /// <returns>The newly instantiated object</returns>
    public static EInvoiceSchemaValidation_MX construct(str _xsdFile, boolean _isCFDI = false)
    {
        if (_isCFDI)
        {
            return new EInvoiceCFDISchemaValidation_MX(_xsdFile);
        }
        else
        {
            return new EInvoiceSchemaValidation_MX(_xsdFile);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmForeignTradeSchema</Name>
				<Source><![CDATA[
    public str parmForeignTradeSchema(str _foreignTradeSchema = foreignTradeSchema)
    {
        foreignTradeSchema = _foreignTradeSchema;
        return foreignTradeSchema;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCartaPorteSchema</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public str parmCartaPorteSchema(str _cartaPorteSchema = cartaPorteSchema)
    {
        cartaPorteSchema = _cartaPorteSchema;
        return cartaPorteSchema;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validate the specified XML string.
    /// </summary>
    /// <param name="_xml">
    /// The XML string to validate.
    /// </param>
    public void validate(str _xml)
    {
        XDocument xDoc = XDocument::Parse(_xml);
        
        XmlSchemaSet schema = new XmlSchemaSet();
        schema.Add(this.getNameSpace(), xsdFile);
        
        if(foreignTradeSchema)
        {
            schema.add(this.getForeignTradeNameSpace(), foreignTradeSchema);
        }

        if (cartaPorteSchema)
        {
            schema.add(this.getCartaPorteNameSpace(), cartaPorteSchema);
        }

        ValidationEventHandler validationErrorHandler;
        validationErrorHandler += eventhandler(this.validationHandler);
        
        System.Xml.Schema.Extensions::Validate(xDoc, schema, validationErrorHandler);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>