<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AxLogisticsAddresssCity</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>AxLogisticsAddressCity</c> class is extension of a <c>AxBC</c> class.
/// </summary>
class AxLogisticsAddresssCity extends AxApplicationBase
{
    LogisticsAddressCity logisticsAddressCity;

    str             localCountyId;
    str             localStateId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>axOrig</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the original instance of a <c>AxBC</c> class.
    /// </summary>
    /// <returns>
    /// An instance of a <c>Axbc</c> class.
    /// </returns>
    public AxInternalBase axOrig()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentRecord</Name>
				<Source><![CDATA[
    public Common currentRecord(Common _logisticsAddressCity = logisticsAddressCity)
    {
        if (!prmisDefault(_logisticsAddressCity))
        {
            super(_logisticsAddressCity);
            logisticsAddressCity = _logisticsAddressCity;
        }
        else
        {
            super();
        }

        return logisticsAddressCity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>emptyRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an empty record for the table that the <c>AxBC</c> class relates to.
    /// </summary>
    /// <returns>
    /// An empty record from the table that the <c>AxBC</c> class relates to.
    /// </returns>

    protected Common emptyRecord()
    {
        LogisticsAddressCity localLogisticsAddressCity;
        return localLogisticsAddressCity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logisticsAddressCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a record of the <c>AxBC</c> class.
    /// </summary>
    /// <param name="_LogisticsAddressCity">
    /// The optional record parameter to set the to a <c>AxBC</c> instance.
    /// </param>
    /// <returns>
    /// The record corresponding to the <c>AxBC</c> object.
    /// </returns>
    public LogisticsAddressCity logisticsAddressCity(LogisticsAddressCity _LogisticsAddressCity = logisticsAddressCity)
    {
        if (!prmisDefault(_LogisticsAddressCity))
        {
            this.setCurrentRecordFromExternal(_LogisticsAddressCity);
        }

        return this.currentRecord();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCityKana_JP</Name>
				<Source><![CDATA[
    public AssetCityKana_JP parmCityKana_JP(AssetCityKana_JP _cityKana_JP = '')
    {
        if (!prmisDefault(_cityKana_JP))
        {
            this.setField(fieldNum(LogisticsAddressCity, CityKana_JP), _cityKana_JP);
        }

        return logisticsAddressCity.CityKana_JP;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountryRegionId</Name>
				<Source><![CDATA[
    public str parmCountryRegionId(str _countryRegionId = '')
    {
        DictField   dictField;
        if (!prmisDefault(_countryRegionId))
        {
            dictField = new DictField(tableNum(LogisticsAddressCity),fieldNum(LogisticsAddressCity,CountryRegionId));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_countryRegionId,dictField,this.mapPolicy().xMLMapCountryRegion());
                _countryRegionId = this.axLogisticsAddressCountryRegionId(_countryRegionId);
            }
            else
            {
                this.validateInboundString(_countryRegionId,dictField);
            }
            this.setField(fieldNum(LogisticsAddressCity, CountryRegionId), _countryRegionId);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressCountryRegionId(logisticsAddressCity.CountryRegionId);
        }
        else
        {
            return logisticsAddressCity.CountryRegionId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCountyId</Name>
				<Source><![CDATA[
    public str parmCountyId(str _countyId = '')
    {
        DictField   dictField;
        if (!prmisDefault(_countyId))
        {
            dictField = new DictField(tableNum(LogisticsAddressCity),fieldNum(LogisticsAddressCity,CountyId));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_countyId,dictField,this.mapPolicy().xMLMapCounty());
                localCountyId = _countyId;
            }
            else
            {
                this.validateInboundString(_countyId,dictField);
            }
            this.setField(fieldNum(LogisticsAddressCity, CountyId), _countyId);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressCountyId(logisticsAddressCity.CountyId, logisticsAddressCity.CountryRegionId, logisticsAddressCity.StateId);
        }
        else
        {
            return logisticsAddressCity.CountyId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDescription</Name>
				<Source><![CDATA[
    public LogisticsAddressCityDescr parmDescription(LogisticsAddressCityDescr _description = '')
    {
        if (!prmisDefault(_description))
        {
            this.setField(fieldNum(LogisticsAddressCity, Description), _description);
        }

        return logisticsAddressCity.Description;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmIBGECode_BR</Name>
				<Source><![CDATA[
    public CityIBGECode_BR parmIBGECode_BR(CityIBGECode_BR _code = '')
    {
        if (!prmisDefault(_code))
        {
            this.setField(fieldNum(LogisticsAddressCity, ibgeCode_BR), _code);
        }

        return logisticsAddressCity.ibgeCode_BR;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmMunicipalityCode_IT</Name>
				<Source><![CDATA[
    public AddressMunicipalityCode_IT parmMunicipalityCode_IT(AddressMunicipalityCode_IT _municipalityCode_IT = '')
    {
        if (!prmisDefault(_municipalityCode_IT))
        {
            this.setField(fieldNum(LogisticsAddressCity, MunicipalityCode_IT), _municipalityCode_IT);
        }

        return logisticsAddressCity.MunicipalityCode_IT;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmName</Name>
				<Source><![CDATA[
    public LogisticsAddressCityName parmName(LogisticsAddressCityName _name = '')
    {
        if (!prmisDefault(_name))
        {
            this.setField(fieldNum(LogisticsAddressCity, Name), _name);
        }

        return logisticsAddressCity.Name;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmProperties_RU</Name>
				<Source><![CDATA[
    public LogisticsAddressPropertiesId_RU parmProperties_RU(LogisticsAddressPropertiesId_RU _propertiesId = 0)
    {
        if (!prmisDefault(_propertiesId))
        {
            this.setField(fieldNum(LogisticsAddressCity, Properties_RU), _propertiesId);
        }

        return logisticsAddressCity.Properties_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCityKey</Name>
				<Source><![CDATA[
    public LogisticsAddressCityKey parmCityKey(LogisticsAddressCityKey _cityKey = '')
    {
        if (!prmIsDefault(_cityKey))
        {
            this.setField(fieldNum(LogisticsAddressCity, CityKey), _cityKey);
        }

        return logisticsAddressCity.CityKey;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmStateId</Name>
				<Source><![CDATA[
    public str parmStateId(str _stateId = '')
    {
        DictField   dictField;
        if (!prmisDefault(_stateId))
        {
            dictField = new DictField(tableNum(LogisticsAddressCity),fieldNum(LogisticsAddressCity,StateId));
            if (this.valueMappingInbound())
            {
                this.validateInboundString(_stateId,dictField,this.mapPolicy().xMLMapState());
                localStateId = _stateId;
            }
            else
            {
                this.validateInboundString(_stateId,dictField);
            }
            this.setField(fieldNum(LogisticsAddressCity, StateId), _stateId);
        }

        if (this.valueMappingOutbound())
        {
            return this.axLogisticsAddressStateId(logisticsAddressCity.StateId, logisticsAddressCity.CountryRegionId);
        }
        else
        {
            return logisticsAddressCity.StateId;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetInternalValues</Name>
				<Source><![CDATA[
    public void resetInternalValues()
    {
        super();

        localCountyId = '';
        localStateId = '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTableFields</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Ensures that all default methods are called before inserting or updating a record.
    /// </summary>
    /// <remarks>
    ///    In order to make sure that all defaulting methods are called before inserting or updating a record,
    ///    the <c>setTableFields</c> method on the <c>AxInternalBase</c> class must be overridden in the AxBC
    ///    class.The method should include a call to all defaulting methods (that is, setFieldName
    ///    methods).Code the defaulting business logic in the different setFieldName methods. Therefore, you
    ///    do not have to put the setFieldName methods in a specific order in this method.
    /// </remarks>
    protected void setTableFields()
    {
        this.currentRecord().defaultRow();
    }

]]></Source>
			</Method>
			<Method>
				<Name>valueMapDependingFields</Name>
				<Source><![CDATA[
    /// <summary>
    /// Maps the value of fields that depend on another field.
    /// </summary>
    protected void valueMapDependingFields()
    {
        super();

        if (this.valueMappingInbound())
        {
            if (localStateId && logisticsAddressCity.CountryRegionId)
            {
                this.parmStateId(this.axLogisticsAddressStateId(localStateId,logisticsAddressCity.CountryRegionId));

                if (localCountyId)
                {
                    this.parmCountyId(this.axLogisticsAddressCountyId(localCountyId,
                                                                    logisticsAddressCity.CountryRegionId,
                                                                    logisticsAddressCity.StateId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    static AxLogisticsAddresssCity construct()
    {
        return new AxLogisticsAddresssCity();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newLogisticsAddressCity</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>AxLogisticsAddressCity</c> class.
    /// </summary>
    /// <param name="_LogisticsAddressCity">
    /// A <c>LogisticsAddressCity</c> record.
    /// </param>
    /// <returns>
    /// An instance of the <c>AxLogisticsAddressCity</c> class.
    /// </returns>
    public static AxLogisticsAddresssCity newLogisticsAddressCity(LogisticsAddressCity _LogisticsAddressCity)
    {
        AxLogisticsAddresssCity axLogisticsAddressCity = AxLogisticsAddresssCity::construct();
        axLogisticsAddressCity.LogisticsAddressCity(_LogisticsAddressCity);

        return axLogisticsAddressCity;
    }

]]></Source>
			</Method>
			<Method>
				<Name>doSave</Name>
				<Source><![CDATA[
    public void doSave()
    {
        if (!this.isFieldModified(fieldNum(LogisticsAddressCity, CityKey)))
        {
            logisticsAddressCity.defaultCityKey();
            this.setFieldAsTouched(fieldNum(LogisticsAddressCity, CityKey));
        }
        super();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>