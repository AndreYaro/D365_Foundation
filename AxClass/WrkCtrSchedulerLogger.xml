<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WrkCtrSchedulerLogger</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>WrkCtrSchedulerLogger</c> class is a resource scheduling logger.
/// </summary>
class WrkCtrSchedulerLogger
{
    #define.LoggingKeyword(-9223369837831520256)

    WrkCtrSchedulerLoggerDisabledEvents disabledEvents;
    Set                                 disabledEventsSet;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>Instance</Name>
				<Source><![CDATA[
    public static WrkCtrSchedulerLogger Instance()
    {
        str owner = classstr(WrkCtrSchedulerLogger) + '_Singleton';
        str key = funcname();

        WrkCtrSchedulerLogger instance;
        SysGlobalCache    globalCache;

        globalCache = appl.globalCache();

        if (globalCache.isSet(owner,key))
        {
            instance = globalCache.get(owner,key);
        }
        else
        {
            instance = WrkCtrSchedulerLogger::construct();
            globalCache.set(owner,key,instance);
        }

        return instance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        disabledEventsSet = new Set(typeName2Type(enumstr(WrkCtrSchedulerLogEvent)));
    }

]]></Source>
			</Method>
			<Method>
				<Name>writeToLog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Writes a line to the log.
    /// </summary>
    /// <param name="_event">
    /// The logger event.
    /// </param>
    /// <param name="_logString">
    /// The string to log.
    /// </param>
    /// <param name="_logSession">
    /// A Boolean value that indicates whether to include the session ID in the log line; optional.
    /// </param>
    public void writeToLog(WrkCtrSchedulerLogEvent  _event,
                           str                      _logString,
                           boolean                  _logSession = true)
    {
        str                 logString;

        if ( !xClassTrace::isTracingEnabled(#LoggingKeyword))
        {
            return;
        }

        logString = strfmt('%1: %2', _event, _logString);

        if (_logSession)
        {
            logString = 'Session ' + int2str(sessionid()) + ' : ' + logString;
        }

        Microsoft.Dynamics.AX.Planning.JobScheduling.Logger::set_Enabled(true);
        Microsoft.Dynamics.AX.Planning.JobScheduling.Logger::Log(logString, WrkCtrSchedulerLogger::convertLogEvent(_event));
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static WrkCtrSchedulerLogger construct()
    {
        return new WrkCtrSchedulerLogger();
    }

]]></Source>
			</Method>
			<Method>
				<Name>convertLogEvent</Name>
				<Source><![CDATA[
    /// <summary>
    /// Converts the <c>WrkCtrSchedulerLogEvent</c> value to a
    /// <c>Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType</c> value.
    /// </summary>
    /// <param name="_event">
    /// A <c>WrkCtrSchedulerLogEvent</c> value that specifies the logging event type.
    /// </param>
    /// <returns>
    /// A <c>Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType</c> value.
    /// </returns>
    /// <remarks>
    /// This is necessary as a performance optimization to reduce interoperability overhead when you log is
    /// not enabled.
    /// </remarks>
    private static Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType convertLogEvent(WrkCtrSchedulerLogEvent _event)
    {
        Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType result;

        switch (_event)
        {
            case WrkCtrSchedulerLogEvent::ActionMessage:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::ActionMessage;
                break;

            case WrkCtrSchedulerLogEvent::BOMLevel:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::BOMLevel;
                break;

            case WrkCtrSchedulerLogEvent::Error:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::Error;
                break;

            case WrkCtrSchedulerLogEvent::Item:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::Item;
                break;

            case WrkCtrSchedulerLogEvent::PartitionOrders:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::PartitionOrders;
                break;

            case WrkCtrSchedulerLogEvent::Private:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::NetResourceScheduler;
                break;

            case WrkCtrSchedulerLogEvent::ReqProcessStatus:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::ReqProcessStatus;
                break;

            case WrkCtrSchedulerLogEvent::ReqTask:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::ReqTask;
                break;

            case WrkCtrSchedulerLogEvent::ReqTaskController:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::ReqTaskController;
                break;

            case WrkCtrSchedulerLogEvent::WrkCtrSchedulerLoadOrder:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::WrkCtrSchedulerLoadOrder;
                break;

            case WrkCtrSchedulerLogEvent::WrkCtrSchedulerSaveDerived:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::WrkCtrSchedulerSaveDerived;
                break;

            case WrkCtrSchedulerLogEvent::WrkCtrSchedulerSaveJobs:
                result = Microsoft.Dynamics.AX.Planning.JobScheduling.LoggingEventType::WrkCtrSchedulerSaveJobs;
                break;

            default:
                throw error(strfmt("@SYS54195",funcname()));
        }

        return result;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>