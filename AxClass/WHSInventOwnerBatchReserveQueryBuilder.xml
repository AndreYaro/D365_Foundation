<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSInventOwnerBatchReserveQueryBuilder</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSInventOwnerBatchReserveQueryBuilder</c> class is used to build a<c>Query</c> sorted by inventory owner type and batch values for selecting quantities and dimensions for reservation from the <c>WHSInventReserve</c> table.
/// </summary>
public class WHSInventOwnerBatchReserveQueryBuilder extends WHSInventBatchReserveQueryBuilder
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static WHSInventOwnerBatchReserveQueryBuilder construct()
    {
        return new WHSInventOwnerBatchReserveQueryBuilder();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newExcludeSumWithDeltaRecords</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initiates a new instance of this class based on the arguments together with excludeSumWithDeltaRecords field set to true.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID to select on-hand for.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// An <c>InventDimParm</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_reservationHierarchyLevel">
    /// The reservation level that should be used when selecting on-hand.
    /// </param>
    /// <param name="_ttsId">
    /// Created transaction id.
    /// </param>
    /// <param name="_includeOrdered">
    /// A boolean indicating of available ordered should be included.
    /// </param>
    /// <param name="_includePhysical">
    /// A boolean indicating if available physical should be included.
    /// </param>
    /// <param name="_minAvailQty">
    /// The minimum quantity availability to be used as a filter on the query.
    /// </param>
    /// <param name="_onlyReserveOnWHSEnabledWarehouses">
    /// Whether to allow reservation on non-WHS enabled warehouses.
    /// </param>
    /// <returns>
    /// A new instance of this class based on the arguments.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static WHSInventOwnerBatchReserveQueryBuilder newExcludeSumWithDeltaRecords(
        ItemId                          _itemId,
        InventDim                       _inventDimCriteria,
        InventDimParm                   _inventDimParmCriteria,
        WHSReservationHierarchyLevel    _reservationHierarchyLevel,
        CreatedTransactionId            _ttsId,
        boolean                         _includeOrdered,
        boolean                         _includePhysical,
        InventQty                       _minAvailQty,
        boolean                         _onlyReserveOnWHSEnabledWarehouses = false)
    {
        WHSInventOwnerBatchReserveQueryBuilder  whsInventBatchReserveQueryBuilder = WHSInventOwnerBatchReserveQueryBuilder::newFromParameters(_itemId,
                                                                                                 _inventDimCriteria,
                                                                                                 _inventDimParmCriteria,
                                                                                                 _reservationHierarchyLevel,
                                                                                                 _includeOrdered,
                                                                                                 _includePhysical,
                                                                                                 _minAvailQty);
        whsInventBatchReserveQueryBuilder.parmTtsId(_ttsId);
        whsInventBatchReserveQueryBuilder.parmExcludeSumWithDeltaRecords(true);
        whsInventBatchReserveQueryBuilder.parmOnlyReserveOnWHSEnabledWarehouses(_onlyReserveOnWHSEnabledWarehouses);

        return whsInventBatchReserveQueryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// Instantiates a new instance of this class based on the arguments.
    /// </summary>
    /// <param name="_itemId">
    /// The item ID to select on-hand for.
    /// </param>
    /// <param name="_inventDimCriteria">
    /// An <c>InventDim</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_inventDimParmCriteria">
    /// An <c>InventDimParm</c> buffer that will be used to filter the on-hand.
    /// </param>
    /// <param name="_reservationHierarchyLevel">
    /// The reservation level that should be used when selecting on-hand.
    /// </param>
    /// <param name="_includeOrdered">
    /// A boolean indicating of available ordered should be included.
    /// </param>
    /// <param name="_includePhysical">
    /// A boolean indicating if available physical should be included.
    /// </param>
    /// <param name="_minAvailQty">
    /// The minimum quantity availability to be used as a filter on the query.
    /// Note that the query only can filter availability at the _reservationHierarchLevel and not up the hierarchy.
    /// </param>
    /// <returns>
    /// A new instance of this class based on the arguments.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static WHSInventOwnerBatchReserveQueryBuilder newFromParameters(
        ItemId                          _itemId,
        InventDim                       _inventDimCriteria,
        InventDimParm                   _inventDimParmCriteria,
        WHSReservationHierarchyLevel    _reservationHierarchyLevel,
        boolean                         _includeOrdered,
        boolean                         _includePhysical,
        InventQty                       _minAvailQty)
    {
        WHSInventOwnerBatchReserveQueryBuilder whsInventBatchReserveQueryBuilder = WHSInventOwnerBatchReserveQueryBuilder::construct();

        whsInventBatchReserveQueryBuilder.initializeFromParameters(
            _itemId,
            _inventDimCriteria,
            _inventDimParmCriteria,
            _reservationHierarchyLevel,
            _includeOrdered,
            _includePhysical);

        whsInventBatchReserveQueryBuilder.parmExcludeSumWithDeltaRecords(false);
        whsInventBatchReserveQueryBuilder.parmMinAvailQty(_minAvailQty);

        return whsInventBatchReserveQueryBuilder;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildOnHandQuery</Name>
				<Source><![CDATA[
    public Query buildOnHandQuery()
    {
        this.initQuery();

        QueryBuildDataSource qbdsInventBatch = query.addDataSource(tableNum(InventBatch));
        qbdsInventBatch.addRange(fieldNum(InventBatch, ItemId)).value(queryValue(itemId));

        QueryBuildDataSource qbdsOwnerType = qbdsInventBatch.addDataSource(tableNum(InventOwnerType));
        // Make sure our own inventory (owned by the current legal entity) is reserved first
        qbdsOwnerType.fetchMode(QueryFetchMode::One2One);

        //add ordering on batch
        this.addBatchAndOwnerOrderByFields(qbdsInventBatch, qbdsOwnerType);
        
        QueryBuildDataSource qbdsInventDim = this.addInventDimDS(qbdsOwnerType);
        qbdsInventDim.addLink(fieldNum(InventBatch, InventBatchId),fieldNum(InventDim,InventBatchId), qbdsInventBatch.name());

        QueryBuildDataSource qbdsWHSInventReserve = qbdsInventDim.addDataSource(tableNum(WHSInventReserve));
        qbdsWHSInventReserve.joinMode(JoinMode::InnerJoin);
        qbdsWHSInventReserve.fetchMode(QueryFetchMode::One2One);
        qbdsWHSInventReserve.addLink(fieldNum(InventBatch, ItemId),fieldNum(WHSInventReserve, ItemId), qbdsInventBatch.name());
        qbdsWHSInventReserve.addLink(fieldNum(InventDim, InventDimId),fieldNum(WHSInventReserve, InventDimId), qbdsInventDim.name());

        this.addRangesToInventReserveQBDS(qbdsWHSInventReserve);

        if (advancedCriteria && advancedCriteria.mustBeApplied())
        {
            InventOnHandQueryWHSStandard onHandQuery = InventOnHandQueryWHSStandard::newFromQuery(query);
            onHandQuery.parmInventTable(InventTable::find(itemId));
            advancedCriteria.applyToOnHandQuery(onHandQuery);
        }

        this.addGroupByFields();
        this.addSelectionFields();

        if (this.parmExcludeSumWithDeltaRecords())
        {
            this.addWHSInventReserveDeltaDSNotExist(qbdsWHSInventReserve);
        }

        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>