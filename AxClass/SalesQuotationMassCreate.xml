<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>SalesQuotationMassCreate</Name>
	<SourceCode>
		<Declaration><![CDATA[
class SalesQuotationMassCreate
    extends SysOperationServiceBase
{
    #define.ZeroQuotationsCreated('No')

    DialogForm                      dialogForm;

    CustTable                       custTable;
    smmBusRelTable                  smmBusRelTable;
    ContactPerson                   contactPerson;
    SalesQuotationTable             salesQuotationTemplate;
    smmCampaignSelection            campaignSelection;
    smmActivities                   templateActivity;

    boolean                         showQueryValues;
    Counter                         numOf;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>createMassQuotations</Name>
				<Source><![CDATA[
    public void createMassQuotations(SalesQuotationMassCreateContract _dataContract)
    {
        QueryRun                queryRun;
        MCRsmmBusRelTable       mcrsmmBusRelTable;
        boolean isMCREnabledAndUsed = MCROrderParameters::isCallCenterEnabledAndInUse();

        #OCCRetryCount
        #macrolib.AviFiles

        // Do service really need to call validate one more time? framework should do it instead!
        if (!_dataContract.validate())
        {
            // Service should always revalidate parameters
            throw error("@SYS326740");
        }

        try
        {
            salesQuotationTemplate = SalesQuotationTable::findTemplate(
                _dataContract.parmQuotationType(),
                _dataContract.parmTemplateGroupId(),
                _dataContract.parmTemplateName());
            if (salesQuotationTemplate)
            {
                if (!templateActivity && (_dataContract.parmCampaignId()))
                {
                    templateActivity = smmActivities::find(smmActivityCreate::createActivity(salesQuotationTemplate, this.isExecutingInBatch()).ActivityNumber);
                }
                ttsbegin;

                numOf   = 0;

                Query query = new Query(SysOperationHelper::base64Decode(_dataContract.parmQuery()));
                // The Query object deserialized does not have FetchMode values set correctly
                this.updateFetchMode(query, QueryFetchMode::One2One);
                queryRun = new QueryRun(query);
                SysOperationProgress operationProgress = SysOperationProgress::newGeneral(#AviUpdate,
                    strfmt("@SYS84630", salesQuotationTemplate.TemplateName),
                    QueryRun::getQueryRowCount(queryRun.query(), maxInt()));
                while (queryRun.next())
                {
                    operationProgress.incCount();
                    if (_dataContract.parmCampaignId())
                    {
                        if (queryRun.changed(tableNum(smmCampaignSelection)))
                        {
                            campaignSelection       = queryRun.get(tableNum(smmCampaignSelection));
                            if (isMCREnabledAndUsed)
                            {
                                //Check for custtable first.
                                custTable               = CustTable::findByPartyRecId(campaignSelection.Party);
                                if (!custTable)
                                {
                                    smmBusRelTable      = smmBusRelTable::findByParty(campaignSelection.Party);
                                }
                            }
                            else
                            {
                                smmBusRelTable          = smmBusRelTable::findByParty(campaignSelection.Party);
                                if (!smmBusRelTable)
                                {
                                    custTable          = CustTable::findByPartyRecId(campaignSelection.Party);
                                }
                            }

                            contactPerson           = ContactPerson::find(campaignSelection.ContactPersonId);
                        }

                        if (isMCREnabledAndUsed)
                        {
                             // Prevent creation for merged & deleted business relation.
                            // Switched order for checking.
                            if (custTable && !custTable.MCRMergedParent)
                            {
                                this.createQuotationFromCustTable(_dataContract, custTable, salesQuotationTemplate, contactPerson);
                                numOf++;
                            }
                            else if (smmBusRelTable)
                            {
                                mcrsmmBusRelTable = MCRsmmBusRelTable::find(smmBusRelTable.RecId);
                                if (!mcrsmmBusRelTable
                                    || (!mcrsmmBusRelTable.MergedParent
                                    && !mcrsmmBusRelTable.IsListDeleted))
                                {
                                    this.createQuotationFromSmmBusRelTable(_dataContract, smmBusRelTable, salesQuotationTemplate, contactPerson, campaignSelection);
                                    numOf++;
                                }
                            }
                        }
                        else
                        {
                            if (smmBusRelTable)
                            {
                                this.createQuotationFromSmmBusRelTable(_dataContract, smmBusRelTable, salesQuotationTemplate, contactPerson, campaignSelection);
                                numOf++;
                            }
                            else if (custTable)
                            {
                                this.createQuotationFromCustTable(_dataContract, custTable, salesQuotationTemplate, contactPerson);
                                numOf++;
                            }
                        }
                    }
                    else
                    {
                        if (_dataContract.parmAccountType() == smmQuotationAccountType::BusRelAccount)
                        {
                            if (queryRun.changed(tableNum(smmBusRelTable)))
                            {
                                smmBusRelTable  = queryRun.get(tableNum(smmBusRelTable));
                                contactPerson   = queryRun.get(tableNum(ContactPerson));
                            }
                            if (isMCREnabledAndUsed)
                            {
                                mcrsmmBusRelTable = MCRsmmBusRelTable::find(smmBusRelTable.RecId);
                                // Prevent creation for merged & deleted business relation.
                                if (!mcrsmmBusRelTable
                                    || (!mcrsmmBusRelTable.MergedParent
                                    && !mcrsmmBusRelTable.IsListDeleted))
                                {
                                    this.createQuotationFromSmmBusRelTable(_dataContract, smmBusRelTable, salesQuotationTemplate, contactPerson, campaignSelection);
                                    numOf++;
                                }
                            }
                            else
                            {
                                this.createQuotationFromSmmBusRelTable(_dataContract, smmBusRelTable, salesQuotationTemplate, contactPerson, campaignSelection);
                                numOf++;
                            }
                        }
                        else
                        {
                            if (queryRun.changed(tableNum(CustTable)))
                            {
                                custTable       = queryRun.get(tableNum(CustTable));
                                contactPerson   = queryRun.get(tableNum(ContactPerson));
                            }
                            if (isMCREnabledAndUsed)
                            {
                                // Prevent creation for merged customers.
                                if (!custTable.MCRMergedParent)
                                {
                                    this.createQuotationFromCustTable(_dataContract, custTable, salesQuotationTemplate, contactPerson);
                                    numOf++;
                                }
                            }
                            else
                            {
                                this.createQuotationFromCustTable(_dataContract, custTable, salesQuotationTemplate, contactPerson);
                                numOf++;
                            }
                        }
                    }
                }

                ttscommit;
            }
        }
        catch (Exception::Error)
        {
            this.deleteTemplateActivity();
            throw error("@SYS21628");
        }
        catch (Exception::Deadlock)
        {
            queryRun.reset();
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    this.deleteTemplateActivity();
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    queryRun.reset();
                    retry;
                }
            }
            else
            {
                this.deleteTemplateActivity();
                throw Exception::UpdateConflict;
            }
        }

        this.deleteTemplateActivity();

        if (numOf)
            info(strFmt("@SYS99517",numOf));
        else
            info(strFmt("@SYS99517",#ZeroQuotationsCreated));
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuotationFromCustTable</Name>
				<Source><![CDATA[
    boolean createQuotationFromCustTable(
        SalesQuotationMassCreateContract    _dataContract,
        CustTable                           _custTable,
        SalesQuotationTable                 _salesQuotationTemplate,
        ContactPerson                       _contactPerson)
    {
        boolean ret = true;

        SalesQuotationTable salesQuotationTable = this.initSalesQuotationTable( _dataContract, _custTable, _salesQuotationTemplate, _contactPerson);

        salesQuotationTable.insert();

        SalesQuotationLine::createQuotationLineFromTemplate(
            _salesQuotationTemplate,
            salesQuotationTable,
            _dataContract.parmQuotationPriceConversion());

        if (_dataContract.parmQuotationPriceConversion() == SalesQuotationPriceConversion::Template)
        {
            SalesQuotationLine salesQuotationLine;

            update_recordset salesQuotationLine
                setting CurrencyCode                =   _salesQuotationTemplate.CurrencyCode
                where salesQuotationLine.QuotationId    ==  salesQuotationTable.QuotationId;

            salesQuotationTable.convertCurrencyCode(salesQuotationTable.CurrencyCode);
        }
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQuotationTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>SalesQuotationTable</c> record.
    /// </summary>
    /// <param name="_dataContract">The  <c>SalesQuotationMassCreateContract</c> data contract</param>
    /// <param name="_custTable">The  <c>CustTable</c> record</param>
    /// <param name="_salesQuotationTemplate">The <c>SalesQuotationTable</c> record</param>
    /// <param name="_contactPerson">The <c>ContactPerson</c> record</param>
    /// <returns>
    /// The  <c>SalesQuotationTable</c> record which is initialized
    /// </returns>
    protected SalesQuotationTable initSalesQuotationTable(
        SalesQuotationMassCreateContract    _dataContract,
        CustTable                           _custTable,
        SalesQuotationTable                 _salesQuotationTemplate,
        ContactPerson                       _contactPerson)
    {
        SalesQuotationTable salesQuotationTable;

        salesQuotationTable.QuotationType = _dataContract.parmQuotationType();
        salesQuotationTable.initFromSalesQuotationTemplate(_salesQuotationTemplate,
                                                           '',
                                                           _custTable.AccountNum);
        salesQuotationTable.setQuotationId();
        salesQuotationTable.QuotationExpiryDate = _dataContract.parmExpiryDate();
        salesQuotationTable.ContactPersonId     = _contactPerson.ContactPersonId;

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuotationFromSmmBusRelTable</Name>
				<Source><![CDATA[
    boolean createQuotationFromSmmBusRelTable(
        SalesQuotationMassCreateContract    _dataContract,
        smmBusRelTable                      _smmBusRelTable,
        SalesQuotationTable                 _salesQuotationTemplate,
        ContactPerson                       _contactPerson,
        smmCampaignSelection                _campaignSelection = null)
    {
        boolean ret = true;

        ttsbegin;

        SalesQuotationTable salesQuotationTable = this.initSalesQuotationTableFromSmmBusRelTable(_dataContract, _smmBusRelTable, _salesQuotationTemplate, _contactPerson, _campaignSelection);
        
        MCRSalesQuotationTable mcrSalesQuotationTable;
        boolean isMCREnabledAndUsed = MCROrderParameters::isCallCenterEnabledAndInUse();

        if (isMCREnabledAndUsed)
        {
            mcrSalesQuotationTable = salesQuotationTable.mcrSalesQuotationTable();
            mcrSalesQuotationTable.SourceId             = smmCampaignTable::find(_campaignSelection.CampaignId).MCRSourceID;
        }

        salesQuotationTable.insert();

        // Update quote based on source code if it exists.
        if (isMCREnabledAndUsed
            && mcrSalesQuotationTable.SourceId)
        {
            MCRSourceCode mcrSourceCode = MCRSourceCode::construct(salesQuotationTable);
            salesQuotationTable = mcrSourceCode.MCRInitFromSourceCodeSetup(MCRSourceCodeSetup::find(mcrSalesQuotationTable.SourceId), salesQuotationTable.CustAccount);

            salesQuotationTable.selectForUpdate();
            salesQuotationTable.updateFinalDisc();

            if (salesQuotationTable.validateWrite() && mcrSalesQuotationTable.validateWrite())
            {
                salesQuotationTable.mcrPackMCRSalesQuotationTable(mcrSalesQuotationTable);
                salesQuotationTable.update();
            }
            else
            {
                throw error("@SYS104318");
            }
        }

        SalesQuotationLine::createQuotationLineFromTemplate(_salesQuotationTemplate, salesQuotationTable, _dataContract.parmQuotationPriceConversion());

        if (_dataContract.parmQuotationPriceConversion() == SalesQuotationPriceConversion::Template)
        {
            salesQuotationLine salesQuotationLine;

            update_recordset salesQuotationLine
                setting CurrencyCode                =   _salesQuotationTemplate.CurrencyCode
                where salesQuotationLine.QuotationId    ==  salesQuotationTable.QuotationId;

            salesQuotationTable.convertCurrencyCode(salesQuotationTable.CurrencyCode);
        }

        ttscommit;

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSalesQuotationTableFromSmmBusRelTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>SalesQuotationTable</c> record.
    /// </summary>
    /// <param name="_dataContract">The  <c>SalesQuotationMassCreateContract</c> data contract</param>
    /// <param name="_smmBusRelTable">The  <c>smmBusRelTable</c> record</param>
    /// <param name="_salesQuotationTemplate">The <c>SalesQuotationTable</c> record</param>
    /// <param name="_contactPerson">The <c>ContactPerson</c> record</param>
    /// <param name="_campaignSelection">The <c>smmCampaignSelection</c> record</param>
    /// <returns>
    /// The  <c>SalesQuotationTable</c> record which is initialized
    /// </returns>
    protected SalesQuotationTable initSalesQuotationTableFromSmmBusRelTable(
        SalesQuotationMassCreateContract    _dataContract,
        smmBusRelTable                      _smmBusRelTable,
        SalesQuotationTable                 _salesQuotationTemplate,
        ContactPerson                       _contactPerson,
        smmCampaignSelection                _campaignSelection)
    {
        SalesQuotationTable salesQuotationTable;

        salesQuotationTable.QuotationType = _dataContract.parmQuotationType();
        salesQuotationTable.initFromSalesQuotationTemplate(_salesQuotationTemplate,
                                                           _smmBusRelTable.BusRelAccount,
                                                           '');
        salesQuotationTable.setQuotationId();
        salesQuotationTable.QuotationExpiryDate = _dataContract.parmExpiryDate();
        salesQuotationTable.initFollowUpDateFromExpiryDate();

        if (_campaignSelection)
        {
            salesQuotationTable.CampaignId              = _campaignSelection.CampaignId;
            salesQuotationTable.WorkerSalesResponsible  = _campaignSelection.FollowUpRespWorker;
            salesQuotationTable.ContactPersonId         = _campaignSelection.ContactPersonId;

            boolean isMCREnabledAndUsed = MCROrderParameters::isCallCenterEnabledAndInUse();

            if (isMCREnabledAndUsed)
            {
                salesQuotationTable.CallListID          = smmCampaignTable::find(_campaignSelection.CampaignId).TMCallListID;
            }
        }
        else
        {
            salesQuotationTable.WorkerSalesResponsible  = _smmBusRelTable.MainContactWorker;
            salesQuotationTable.ContactPersonId         = _contactPerson.ContactPersonId;
        }

        salesQuotationTable.QuotationFollowupActivity = smmActivityCreate::createActivity(salesQuotationTable, this.isExecutingInBatch(), templateActivity).ActivityNumber;

        return salesQuotationTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTemplateActivity</Name>
				<Source><![CDATA[
    void deleteTemplateActivity()
    {
        ttsbegin;
        if (templateActivity.ActivityNumber)
        {
            templateActivity = smmActivities::find(templateActivity.ActivityNumber,true);
            if (templateActivity)
            {
                templateActivity.doDelete();
            }
        }
        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateFetchMode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets fetch mode on all datasources for a query.
    /// </summary>
    /// <param name="_query">
    /// A <c>Query</c> instance to update.
    /// </param>
    /// <param name="_fetchMode">
    /// New <c>QueryFetchMode</c> value to set on all datasources.
    /// </param>
    protected void updateFetchMode(Query _query, QueryFetchMode _fetchMode)
    {
        int i, dsNo;

        dsNo = _query.dataSourceCount();

        for (i=1; i<=dsNo; i++)
        {
            _query.dataSourceNo(i).fetchMode(_fetchMode);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>