<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplSettlementDP_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// <c>EmplSettlementDP_RU</c> class handles the business logic for <c>EmplSettlement_RU</c> SSRS report.
/// </summary>
[
    SRSReportQueryAttribute(queryStr(EmplSettlement_RU)),
    SRSReportParameterAttribute(classStr(EmplSettlementContract_RU))
]
class EmplSettlementDP_RU extends SRSReportDataProviderBase
{
    EmplSettlementTmp_RU   emplSettlementTmp_RU;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>fetchDynamic</Name>
				<Source><![CDATA[
        private void fetchDynamic(EmplAccount_RU _account, ToDate _toDate)
    {
        EmplSettleDynamic_RU    settleDynamic;
        EmplSettlement_RU       tmpEmplSettlement;

        settleDynamic = new EmplSettleDynamic_RU(_toDate);
        settleDynamic.settleNow(_account);
        tmpEmplSettlement = settleDynamic.transSettle();

        while select tmpEmplSettlement
        {
            this.insertIntoEmplSettlementTmp_RU(tmpEmplSettlement, false);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getEmplSettlementTmp_RU</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns temporary table <c>EmplSettlementTmp_RU</c> for printing on ssrs report.
    /// </summary>
    /// <returns>
    /// Temporary table <c>EmplSettlementTmp_RU</c> .
    /// </returns>
    [
        SRSReportDataSetAttribute(tableStr(EmplSettlementTmp_RU))
    ]
    public EmplSettlementTmp_RU getEmplSettlementTmp_RU()
    {
        return emplSettlementTmp_RU;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertIntoEmplSettlementTmp_RU</Name>
				<Source><![CDATA[
        private void insertIntoEmplSettlementTmp_RU(EmplSettlement_RU _emplSettlement, boolean _settled)
    {
        emplSettlementTmp_RU.EmplAccount           = _emplSettlement.emplAccount();
        emplSettlementTmp_RU.TransDate             = _emplSettlement.TransDate;
        emplSettlementTmp_RU.VoucherDebit          = _emplSettlement.voucherDebit();
        emplSettlementTmp_RU.VoucherCredit         = _emplSettlement.voucherCredit();
        emplSettlementTmp_RU.DebitTransDate        = _emplSettlement.DebitTransDate;
        emplSettlementTmp_RU.CreditTransDate       = _emplSettlement.CreditTransDate;
        emplSettlementTmp_RU.SettleAmountCurCredit = _emplSettlement.SettleAmountCurCredit;
        emplSettlementTmp_RU.SettleAmountCurDebit  = _emplSettlement.SettleAmountCurDebit;
        emplSettlementTmp_RU.SettleAmountMST       = _emplSettlement.SettleAmountMST;
        emplSettlementTmp_RU.ExchAdjustment        = _emplSettlement.ExchAdjustment;
        emplSettlementTmp_RU.DebitCurrencyCode     = EmplTrans_RU::findRecId(_emplSettlement.DebitRecId).CurrencyCode;
        emplSettlementTmp_RU.CreditCurrencyCode    = EmplTrans_RU::findRecId(_emplSettlement.CreditRecId).CurrencyCode;
        emplSettlementTmp_RU.Settled               = _settled;
        emplSettlementTmp_RU.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Processes the business logic that is used to populate a temptable.
    /// </summary>
    public void processReport()
    {
        QueryRun                queryRun;
        EmplAccount_RU          emplAccount;
        ToDate                  toDate;
        boolean                 dynamic;
        Query                   query;
        EmplSettlement_RU       emplSettlement;
        EmplTrans_RU            emplTrans;
        EmplAccount_RU          lastAccount;
        EmplSettlementContract_RU   emplSettlementContract;

        emplSettlementContract = this.parmDataContract() as EmplSettlementContract_RU;

        emplAccount = emplSettlementContract.parmEmplAccount();
        toDate      = emplSettlementContract.parmToDate();
        dynamic     = emplSettlementContract.parmDynamic();

        query = this.parmQuery();

        if (emplAccount)
        {
            query.dataSourceTable(tableNum(EmplTrans_RU)).findRange(
                fieldNum(EmplTrans_RU, EmplAccount)).value(emplAccount);
        }

        query.dataSourceTable(tableNum(EmplSettlement_RU)).findRange(
            fieldNum(EmplSettlement_RU, TransDate)).value(queryRange(dateNull(), toDate));

        queryRun = new QueryRun(query);

        while (queryRun.next())
        {
            emplSettlement  = queryRun.get(tableNum(EmplSettlement_RU));
            emplTrans       = queryRun.get(tableNum(EmplTrans_RU));

            if (dynamic && lastAccount && emplTrans.EmplAccount != lastAccount)
            {
                this.fetchDynamic(lastAccount, toDate);
            }
            if (emplSettlement.RecId)
            {
                this.insertIntoEmplSettlementTmp_RU(emplSettlement, true);
            }
            lastAccount = emplTrans.EmplAccount;
        }

        if (dynamic && lastAccount)
        {
            this.fetchDynamic(lastAccount, toDate);
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>