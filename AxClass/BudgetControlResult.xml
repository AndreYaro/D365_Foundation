<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlResult</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>BudgetControlResult</c> class is used to capture the details of the result of the check for
///    available budget for a budget source.
/// </summary>
public class BudgetControlResult implements SysPackable
{
    BudgetCheckResult result;
    BudgetControlErrorWarningType errorWarningType;
    BudgetControlErrorWarning errorWarning;
    Set errorMessages;
    Set warningMessages;
    List resultDetails;

    #define.CurrentVersion(1)
    #localmacro.CurrentList
        result,
        errorWarningType,
        errorWarning
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addResultDetail</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds a <c>BudgetCheckResultErrorWarningDetail</c> record to the instance.
    /// </summary>
    /// <param name="_budgetCheckResultErrorWarningDetail">
    /// The <c>BudgetCheckResultErrorWarningDetail</c> record to add.
    /// </param>
    public void addResultDetail(BudgetCheckResultErrorWarningDetail _budgetCheckResultErrorWarningDetail)
    {
        resultDetails.addEnd(_budgetCheckResultErrorWarningDetail);
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetControlErrorWarning</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an indicator of the budget control error or warning result for the budget source.
    /// </summary>
    /// <returns>
    ///    The budget control error or warning result for the budget source.
    /// </returns>
    public BudgetControlErrorWarning budgetControlErrorWarning()
    {
        return errorWarning;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetControlErrorWarningType</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets an indicator of the budget control error or warning result type for the budget source.
    /// </summary>
    /// <returns>
    ///    The indicator of the budget control error or warning result type for the budget source.
    /// </returns>
    public BudgetControlErrorWarningType budgetControlErrorWarningType()
    {
        return errorWarningType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>budgetSourceAvailableCheckResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates the overall result of the check for the available budget of the budget source.
    /// </summary>
    /// <returns>
    ///    The result of the check for the available budget.
    /// </returns>
    public BudgetCheckResult budgetSourceAvailableCheckResult()
    {
        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>errorMessages</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>Set</c> that contains strings of error messages resulting from the check for budget
    /// available.
    /// </summary>
    /// <returns>
    /// A <c>Set</c> that contains strings of error messages.
    /// </returns>
    public Set errorMessages()
    {
        return errorMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getResultDetails</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets a <c>List</c> object that contains <c>BudgetCheckResultErrorWarningDetail</c> records.
    /// </summary>
    /// <returns>
    /// A <c>List</c> object.
    /// </returns>
    public List getResultDetails()
    {
        return resultDetails;
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoLogErrorMessages</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the error messages of the budget check result in the Infolog.
    /// </summary>
    public void infoLogErrorMessages()
    {
        SetEnumerator errorMessagesEnumerator;

        if (this.errorMessages() && this.errorMessages().elements() > 0)
        {
            errorMessagesEnumerator = this.errorMessages().getEnumerator();

            while (errorMessagesEnumerator.moveNext())
            {
                error(errorMessagesEnumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>infoLogWarningMessages</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the warning messages of the budget check result in the Infolog.
    /// </summary>
    public void infoLogWarningMessages()
    {
        SetEnumerator warningMessagesEnumerator;

        if (this.warningMessages() && this.warningMessages().elements() > 0)
        {
            warningMessagesEnumerator = this.warningMessages().getEnumerator();

            while (warningMessagesEnumerator.moveNext())
            {
                warning(warningMessagesEnumerator.current());
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the <c>BudgetControlResult</c> class.
    /// </summary>
    /// <param name="_result">
    ///    An indicator of the result of the check for budget available.
    /// </param>
    /// <param name="_errorWarningType">
    ///    An indicator of the budget control error or the warning type of the budget source.
    /// </param>
    /// <param name="_errorWarning">
    ///    An indicator of the budget control error or the warning of the budget source.
    /// </param>
    /// <param name="_errorMessages">
    ///    A <c>Set</c> of error messages resulting from the check for budget available.
    /// </param>
    /// <param name="_warningMessages">
    ///    A <c>Set</c> of warning messages that result from the check for budget available.
    /// </param>
    public void initialize(
        BudgetCheckResult _result,
        BudgetControlErrorWarningType _errorWarningType,
        BudgetControlErrorWarning _errorWarning,
        Set _errorMessages,
        Set _warningMessages)
    {
        result = _result;
        errorWarningType = _errorWarningType;
        errorWarning = _errorWarning;
        errorMessages = _errorMessages;
        warningMessages = _warningMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        result = BudgetCheckResult::NoCheck;
        errorMessages = new Set(Types::String);
        warningMessages = new Set(Types::String);
        resultDetails = new List(Types::Record);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        // Pack all class member variables - sets must be packed & added separately
        return [#CurrentVersion, [#CurrentList, errorMessages.pack(), warningMessages.pack()]];
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container _packedBudgetControlResult)
    {
        int version = conpeek(_packedBudgetControlResult, 1);
        container packedClassMembers, packedErrors, packedWarnings;

        switch (version)
        {
            case #CurrentVersion:
                // Extract the packed values.
                [version, packedClassMembers] = _packedBudgetControlResult;

                // Extract the #CurrentList and packed sets.
                [#CurrentList, packedErrors, packedWarnings] = packedClassMembers;

                break;

            default:
                return false;
        }

        if (packedErrors != connull())
        {
            // Unpack the packed errors set
            errorMessages = Set::create(packedErrors);
        }

        if (packedWarnings != connull())
        {
            // Unpack the packed warnings set
            warningMessages = Set::create(packedWarnings);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>warningMessages</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a <c>Set</c> that contains strings of warning messages that result from the check for
    ///    budget available.
    /// </summary>
    /// <returns>
    ///    A <c>Set</c> that contains strings of warning messages.
    /// </returns>
    public Set warningMessages()
    {
        return warningMessages;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetControlResult</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>BudgetControlResult</c> class.
    /// </returns>
    public static BudgetControlResult construct()
    {
        return new BudgetControlResult();
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>BudgetControlResult</c> class from a packed copy.
    /// </summary>
    /// <param name="_packedBudgetControlResult">
    ///    The packed instance of the <c>BudgetControlResult</c> class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetControlResult</c> class.
    /// </returns>
    public static BudgetControlResult create(container _packedBudgetControlResult)
    {
        BudgetControlResult controlResult = new BudgetControlResult();

        controlResult.unpack(_packedBudgetControlResult);

        return controlResult;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBudgetCheckResultImages</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an image list that displays the <c>BudgetCheckResult</c> values.
    /// </summary>
    /// <returns>
    ///    An image list that displays the <c>BudgetCheckResult</c> values.
    /// </returns>
    public static ImageListAppl_BudgetControlResult createBudgetCheckResultImages()
    {
        return ImageListAppl_BudgetControlResult::construct();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResultImagePos</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the budget check result image position in the image list that displays the
    ///    <c>BudgetCheckResult</c> values.
    /// </summary>
    /// <param name="_budgetCheckResult">
    ///    The budget check result.
    /// </param>
    /// <returns>
    ///    An Integer value that indicates the image position in the image list that displays the
    ///    <c>BudgetCheckResult</c> values.
    /// </returns>
    public static int getBudgetCheckResultImagePos(BudgetCheckResult _budgetCheckResult)
    {
        #BudgetCheckResultImages
        int image = #BudgetCheckNoImagePos;

        switch (_budgetCheckResult)
        {
            case BudgetCheckResult::Failed:
                image = #BudgetCheckFailedPos;
                break;

            case BudgetCheckResult::Passed:
                image = #BudgetCheckPassedPos;
                break;

            case BudgetCheckResult::PassedWithWarnings:
                image = #BudgetCheckPassedWithWarningsPos;
                break;

            default:
                break;
        }

        return image;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetCheckResultToolTip</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Gets the tool tip for the budget check result.
    /// </summary>
    /// <param name="_budgetCheckResult">
    ///    The budget check result.
    /// </param>
    /// <returns>
    ///    The tool tip for the budget check result.
    /// </returns>
    public static str getBudgetCheckResultToolTip(BudgetCheckResult _budgetCheckResult)
    {
        BudgetCheckResult toolTipBudgetCheckResult = BudgetCheckResult::NoCheck;
        DictEnum dictEnum = new DictEnum(enumnum(BudgetCheckResult));

        if (_budgetCheckResult != 0)
        {
            toolTipBudgetCheckResult = _budgetCheckResult;
        }

        return dictEnum.value2Label(toolTipBudgetCheckResult);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newBudgetControlResult</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs an instance of the <c>BudgetControlResult</c> class.
    /// </summary>
    /// <param name="_result">
    ///    The result of the check for budget available.
    /// </param>
    /// <param name="_errorWarningType">
    ///    The budget control error or warning type for the budget source.
    /// </param>
    /// <param name="_errorWarning">
    ///    The budget control error or warning for the budget source.
    /// </param>
    /// <param name="_errorMessages">
    ///    A set of error messages from the check for budget available.
    /// </param>
    /// <param name="_warningMessages">
    ///    A set of warning messages from the check for budget available.
    /// </param>
    /// <returns>
    ///    An instance of the <c>BudgetControlResult</c> class.
    /// </returns>
    public static BudgetControlResult newBudgetControlResult(
        BudgetCheckResult _result,
        BudgetControlErrorWarningType _errorWarningType,
        BudgetControlErrorWarning _errorWarning,
        Set _errorMessages,
        Set _warningMessages)
    {
        BudgetControlResult newResult;

        newResult = new BudgetControlResult();

        newResult.initialize(_result, _errorWarningType, _errorWarning, _errorMessages, _warningMessages);

        return newResult;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>