<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetPlanGenerateServiceGenJour</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetPlanGenerateServiceGenJour</c> is used to generate budget plan data from general journal data.
/// </summary>
public class BudgetPlanGenerateServiceGenJour extends BudgetPlanGenerateService
{
    BudgetPlanGenerateContractGenJour     budgetPlanGenerateContractGenJour;
    GeneralJournalEntry                   generalJournalEntry;
    GeneralJournalAccountEntry            generalJournalAccountEntry;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>applyAccountTypeRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the account type ranges on the query.
    /// </summary>
    /// <param name="_query">
    /// The query on which ranges need to be applied.
    /// </param>
    /// <returns>
    /// The instance of <c>Query</c> class.
    /// </returns>
    protected Query applyAccountTypeRanges(Query _query)
    {
        QueryBuildDataSource mainAccountQueryBuildDataSource;

        mainAccountQueryBuildDataSource = _query.dataSourceTable(tableNum(MainAccount));

        if (budgetPlanGenerateContractGenJour.parmAccountTypeAssetSelected())
        {
            mainAccountQueryBuildDataSource.addRange(fieldNum(MainAccount, Type)).value(queryValue(DimensionLedgerAccountType::Asset));
        }

        if (budgetPlanGenerateContractGenJour.parmAccountTypeBalanceSheetSelected())
        {
            mainAccountQueryBuildDataSource.addRange(fieldNum(MainAccount, Type)).value(queryValue(DimensionLedgerAccountType::BalanceSheet));
        }

        if (budgetPlanGenerateContractGenJour.parmAccountTypeExpenseSelected())
        {
            mainAccountQueryBuildDataSource.addRange(fieldNum(MainAccount, Type)).value(queryValue(DimensionLedgerAccountType::Expense));
        }

        if (budgetPlanGenerateContractGenJour.parmAccountTypeLiabilitySelected())
        {
            mainAccountQueryBuildDataSource.addRange(fieldNum(MainAccount, Type)).value(queryValue(DimensionLedgerAccountType::Liability));
        }

        if (budgetPlanGenerateContractGenJour.parmAccountTypeProfitandLossSelected())
        {
            mainAccountQueryBuildDataSource.addRange(fieldNum(MainAccount, Type)).value(queryValue(DimensionLedgerAccountType::ProfitAndLoss));
        }

        if (budgetPlanGenerateContractGenJour.parmAccountTypeTotalSelected())
        {
            mainAccountQueryBuildDataSource.addRange(fieldNum(MainAccount, Type)).value(queryValue(DimensionLedgerAccountType::Total));
        }

        if (budgetPlanGenerateContractGenJour.parmAccountTypeRevenueSelected())
        {
            mainAccountQueryBuildDataSource.addRange(fieldNum(MainAccount, Type)).value(queryValue(DimensionLedgerAccountType::Revenue));
        }

        if (budgetPlanGenerateContractGenJour.parmAccountTypeEquitySelected())
        {
            mainAccountQueryBuildDataSource.addRange(fieldNum(MainAccount, Type)).value(queryValue(DimensionLedgerAccountType::Equity));
    }

        return _query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>applyFiscalPeriodRanges</Name>
				<Source><![CDATA[
    /// <summary>
    /// Applies the period ranges in the query.
    /// </summary>
    /// <param name="_query">
    /// The query on which ranges need to apply.
    /// </param>
    protected void applyFiscalPeriodRanges(Query _query)
    {
        QueryBuildDataSource generalJournalEntryDataSource;
        FiscalCalendarPeriod fiscalCalendarPeriod;
        FiscalPeriodStart    fiscalPeriodStart;
        FiscalPeriodEnd      fiscalPeriodEnd;
        boolean              includeClosingTransaction;

        generalJournalEntryDataSource = _query.dataSourceTable(tableNum(GeneralJournalEntry));

        includeClosingTransaction = budgetPlanGenerateContractGenJour.parmIncludeClosingTransaction();

        // Finding the fiscalPeriod start and end dates.
        fiscalPeriodStart = FiscalCalendarPeriod::find(budgetPlanGenerateContractGenJour.parmFromFiscalCalendarPeriodRecId()).StartDate;
        fiscalPeriodEnd = FiscalCalendarPeriod::find(budgetPlanGenerateContractGenJour.parmToFiscalCalendarPeriodRecId()).EndDate;

        // Applying the accounting date range to improve the ability to hit a GeneralJournalEntry index.
        generalJournalEntryDataSource.addRange(fieldNum(GeneralJournalEntry, AccountingDate)).value(queryRange(fiscalPeriodStart, fiscalPeriodEnd));

        // Applying the fiscal year range on general journal entry table.
        generalJournalEntryDataSource.addRange(fieldNum(GeneralJournalEntry, FiscalCalendarYear)).value(queryValue(budgetPlanGenerateContractGenJour.parmFiscalCalendarYearRecId()));

        // Applying the fiscal period ranges on the GeneralJournalEntry.FiscalCalendarPeriod field.
        while select RecId from fiscalCalendarPeriod
            where fiscalCalendarPeriod.StartDate >= fiscalPeriodStart &&
                  fiscalCalendarPeriod.EndDate <= fiscalPeriodEnd &&
                  fiscalCalendarPeriod.FiscalCalendarYear == budgetPlanGenerateContractGenJour.parmFiscalCalendarYearRecId() &&
                  (
                      fiscalCalendarPeriod.Type == FiscalPeriodType::Operating ||
                      fiscalCalendarPeriod.Type == FiscalPeriodType::Opening ||
                      (fiscalCalendarPeriod.Type == FiscalPeriodType::Closing && includeClosingTransaction)
                  )

        {
            generalJournalEntryDataSource.addRange(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod)).value(queryValue(fiscalCalendarPeriod.RecId));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateBudgetPlanEffectiveDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the <c>BudgetPlanEffectiveDate</c> of <c>BudgetPlanLine</c> table.
    /// </summary>
    /// <returns>
    /// Returns the <c>BudgetPlanEffectiveDate</c> for <c>BudgetPlanLine</c> table.
    /// </returns>
    protected BudgetPlanLineEffectiveDate calculateBudgetPlanEffectiveDate()
    {
        BudgetPlanLineEffectiveDate budgetPlanEffectiveDate;

        switch (budgetPlanGenerateContractGenJour.parmTargetBudgetPlanGenerateAggregateBy())
        {
            case BudgetPlanGenerateAggregateBy::Day:
                budgetPlanEffectiveDate = generalJournalEntry.AccountingDate;
                break;

            case BudgetPlanGenerateAggregateBy::FiscalPeriod:
                budgetPlanEffectiveDate = FiscalCalendarPeriod::find(generalJournalEntry.FiscalCalendarPeriod).StartDate;
                break;

            case BudgetPlanGenerateAggregateBy::FiscalYear:
                budgetPlanEffectiveDate = FiscalCalendarYear::find(generalJournalEntry.FiscalCalendarYear).StartDate;
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        return budgetPlanEffectiveDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// The instance of <c>Query</c> class.
    /// </returns>
    protected Query createQuery()
    {
        Query                query;
        QueryBuildDataSource generalJournalEntryQueryBuildDataSource;
        QueryBuildDataSource generalJournalAccountEntryQueryDataSource;
        QueryBuildDataSource mainAccountCategoryQueryBuildDataSource;
        QueryBuildRange      mainAccountCategoryQueryBuildRange;

        query = new Query(SysOperationHelper::base64Decode(budgetPlanGenerateContractGenJour.parmQueryBudgetPlanGenerateGenJour()));

        generalJournalEntryQueryBuildDataSource = query.dataSourceTable(tableNum(GeneralJournalEntry));

        generalJournalEntryQueryBuildDataSource.addRange(fieldNum(GeneralJournalEntry, Ledger)).value(queryValue(budgetPlanGenerateContractGenJour.parmTargetLedgerRecId()));

        mainAccountCategoryQueryBuildDataSource = query.dataSourceTable(tableNum(MainAccountCategory));
        mainAccountCategoryQueryBuildRange      = mainAccountCategoryQueryBuildDataSource.findRange(fieldNum(MainAccountCategory, AccountCategory));

        if (!mainAccountCategoryQueryBuildRange || !mainAccountCategoryQueryBuildRange.value())
        {
            // Update JoinMode to outer join either account category range is not found or the account category filter is empty
            mainAccountCategoryQueryBuildDataSource.joinMode(JoinMode::OuterJoin);
        }

        // Grouping the data on the basis which user has set on the form.
        switch (budgetPlanGenerateContractGenJour.parmTargetBudgetPlanGenerateAggregateBy())
        {
            case BudgetPlanGenerateAggregateBy::Day:
                generalJournalEntryQueryBuildDataSource.addGroupByField(fieldNum(GeneralJournalEntry, AccountingDate));
                generalJournalEntryQueryBuildDataSource.addSelectionField(fieldNum(GeneralJournalEntry, AccountingDate));
                break;

            case BudgetPlanGenerateAggregateBy::FiscalPeriod:
                generalJournalEntryQueryBuildDataSource.addGroupByField(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod));
                generalJournalEntryQueryBuildDataSource.addSelectionField(fieldNum(GeneralJournalEntry, FiscalCalendarPeriod));
                break;

            case BudgetPlanGenerateAggregateBy::FiscalYear:
                generalJournalEntryQueryBuildDataSource.addGroupByField(fieldNum(GeneralJournalEntry, FiscalCalendarYear));
                break;

            default:
                throw error(Error::wrongUseOfFunction(funcName()));
        }

        this.applyFiscalPeriodRanges(query);
        this.applyAccountTypeRanges(query);

        generalJournalAccountEntryQueryDataSource = query.dataSourceTable(tableNum(GeneralJournalAccountEntry));
        generalJournalAccountEntryQueryDataSource.addGroupByField(fieldNum(GeneralJournalAccountEntry, LedgerDimension));
        generalJournalAccountEntryQueryDataSource.addGroupByField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyCode));
        generalJournalAccountEntryQueryDataSource.addSelectionField(fieldNum(GeneralJournalAccountEntry, TransactionCurrencyAmount), SelectionField::Sum);
        generalJournalAccountEntryQueryDataSource.addSelectionField(fieldNum(GeneralJournalAccountEntry, AccountingCurrencyAmount), SelectionField::Sum);
        generalJournalAccountEntryQueryDataSource.addSelectionField(fieldNum(GeneralJournalAccountEntry, ReportingCurrencyAmount), SelectionField::Sum);

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>generateData</Name>
				<Source><![CDATA[
    /// <summary>
    /// Generates the data in the budget plan tables.
    /// </summary>
    protected void generateData()
    {
        #OCCRetryCount

        Query                           userDefinedQuery;
        QueryRun                        userDefinedQueryRun;
        BudgetPlanHeader                budgetPlanHeader;
        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmp;
        boolean                         isValidQuery, isTotalSelected;
        int                             tryCount = 0;

        userDefinedQuery = this.createQuery();
        isTotalSelected = budgetPlanGenerateContractGenJour.parmAccountTypeTotalSelected();

        try
        {
            ttsbegin;

            // creating or finding the budget header record.
            budgetPlanHeader = this.createOrUpdateBudgetPlanHeader();

            userDefinedQueryRun = new QueryRun(userDefinedQuery);

            while (userDefinedQueryRun.next())
            {
                isValidQuery = true;

                generalJournalAccountEntry = userDefinedQueryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
                generalJournalEntry        = userDefinedQueryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;

                budgetPlanLineDataGenerationTmp = this.setBudgetPlanLineDataGenerationTmp(budgetPlanHeader.RecId);

                this.createOrUpdateBudgetPlanLine(budgetPlanLineDataGenerationTmp);
            }

            if (isValidQuery || isTotalSelected)
            {
                if (isTotalSelected)
                {
                   this.insertTotallingLines(budgetPlanHeader.RecId);
                }

                this.bulkInsertOrUpdateBudgetPlanLines();
            }

            if ((!isValidQuery && !isTotalSelected) || !isBudgetPlanLineCreated)
            {
                throw error(this.recordNotFoundErrorMessage());
            }

            if (budgetPlanHeader)
            {
                this.showTaskCompleteMessage();
            }

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            if (xSession::currentRetryCount() >= #RetryNum)
            {
                throw Exception::Deadlock;
            }
            else
            {
                retry;
            }
        }
        catch (Exception::DuplicateKeyException)
        {
            error("@SYS78886");
        }
        catch (Exception::Error)
        {
            exceptionTextFallThrough();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getBudgetClass</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the budget class for given ledger dimension account.
    /// </summary>
    /// <param name="_ledgerDimensionAccount">
    /// The Ledger dimension reference.
    /// </param>
    /// <returns>
    /// The Budget class of budgetPlanLine table.
    /// </returns>
    protected BudgetClass getBudgetClass(LedgerDimensionAccount _ledgerDimensionAccount)
    {
        BudgetClass budgetClass;
        MainAccount mainAccount;

        mainAccount = MainAccount::findByLedgerDimension(_ledgerDimensionAccount);

        if (mainAccount.RecId != 0)
        {
            switch (mainAccount.Type)
            {
                case DimensionLedgerAccountType::Expense:
                    budgetClass = BudgetClass::Expense;
                    break;

                case DimensionLedgerAccountType::Revenue:
                    budgetClass = BudgetClass::Revenue;
                    break;

                default:
                    budgetClass = budgetPlanGenerateContract.parmTargetBudgetClass();
                    break;
            }
        }

        return budgetClass;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserDefinedQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the query object according to the settings which the user defined on the dialog.
    /// </summary>
    /// <returns>
    /// The instance of <c>Query</c> class.
    /// </returns>
    public Query getUserDefinedQuery()
    {
        return this.createQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUserDefinedQueryRowCount</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines the amount of lines the user defined query will return.
    /// </summary>
    /// <param name = "_maxRowCount">
    /// The max amount of rows.
    /// </param>
    /// <returns>
    /// The amount of lines based on account type.
    /// </returns>
    [Wrappable(false)]
    protected int getUserDefinedQueryRowCount(int _maxRowCount = 1)
    {
        Query query;
        QueryBuildDataSource mainAccQueryBuildDataSource;
        QueryBuildDataSource totallingCriteriaQueryBuildDataSource;
        QueryBuildDataSource dimAttrValQueryBuildDataSource;
        QueryBuildRange totallingCriteriaQueryBuildRange;
        boolean isTotalSelected;
        RecId dimAttrMainAcc = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);

        query = this.getUserDefinedQuery();

        isTotalSelected = budgetPlanGenerateContractGenJour.parmAccountTypeTotalSelected();

        if (isTotalSelected)
        {
            mainAccQueryBuildDataSource = query.dataSourceTable(tableNum(MainAccount));
            mainAccQueryBuildDataSource.addSelectionField(fieldNum(MainAccount, MainAccountId));
            mainAccQueryBuildDataSource.clearRanges();

            totallingCriteriaQueryBuildDataSource = mainAccQueryBuildDataSource.addDataSource(tableNum(DimensionAttributeValueTotallingCriteria));
            totallingCriteriaQueryBuildRange = totallingCriteriaQueryBuildDataSource.addRange(fieldNum(DimensionAttributeValueTotallingCriteria, RecId));
            totallingCriteriaQueryBuildRange.value(strFmt('((%1.MainAccountId <= %2.ToValue) && (%1.MainAccountId >= %2.FromValue))', mainAccQueryBuildDataSource.name(), totallingCriteriaQueryBuildDataSource.name()));

            totallingCriteriaQueryBuildDataSource.fetchMode(QueryFetchMode::One2One);
            totallingCriteriaQueryBuildDataSource.addAllFields(tableStr(DimensionAttributeValueTotallingCriteria));

            dimAttrValQueryBuildDataSource = totallingCriteriaQueryBuildDataSource.addDataSource(tableNum(DimensionAttributeValue));
            dimAttrValQueryBuildDataSource.relations(true);
            dimAttrValQueryBuildDataSource.addRange(fieldNum(DimensionAttributeValue, DimensionAttribute)).value(queryValue(dimAttrMainAcc));
            dimAttrValQueryBuildDataSource.addGroupByField(fieldNum(DimensionAttributeValue, RecId));
            dimAttrValQueryBuildDataSource.addGroupByField(fieldNum(DimensionAttributeValue, HashKey));
            dimAttrValQueryBuildDataSource.addGroupByField(fieldNum(DimensionAttributeValue, DimensionAttribute));
            dimAttrValQueryBuildDataSource.addGroupByField(fieldNum(DimensionAttributeValue, EntityInstance));

            mainAccQueryBuildDataSource = dimAttrValQueryBuildDataSource.addDataSource(tableNum(MainAccount));
            mainAccQueryBuildDataSource.addLink(fieldNum(DimensionAttributeValue, EntityInstance), fieldNum(MainAccount, RecId));
            mainAccQueryBuildDataSource.addGroupByField(fieldNum(MainAccount, MainAccountId));
            mainAccQueryBuildDataSource.addRange(fieldNum(MainAccount, LedgerChartOfAccounts)).value(
                queryValue(Ledger::chartOfAccounts(Ledger::primaryForLegalEntity(budgetPlanGenerateContract.parmTargetLedgerRecId()))));
        }

        query.clearGroupBy();

        return QueryRun::getQueryRowCount(query, _maxRowCount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTotallingLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// For each line in general ledger falling under user-specified period, this method creates totalling lines based on
    /// <c>DimensionAttributeValueTotallingCriteria</c> for main accounts.
    /// </summary>
    /// <param name="_budgetPlanHeaderId">
    /// The record Id of <c>BudgetPlanHeader</c> record.
    /// </param>
    /// <remarks>
    /// The totalling lines have ledger dimensions with main accounts of type 'Total'.
    /// The new lines are inserted in the <c>BudgetPlanLineDataGenerationTmp</c> table.
    /// </remarks>
    private void insertTotallingLines(BudgetPlanHeaderRecId _budgetPlanHeaderId)
    {
        int                             hierarchySegmentCount, hierarchySegmentIndex, hierarchyCount, hierarchyIndex, segmentIndex, initSegIdxForHierarchy;
        Query                           query;
        RecId                           dimAttrMainAcc = DimensionAttribute::getWellKnownDimensionAttribute(DimensionAttributeType::MainAccount);
        QueryRun                        queryRun;
        MainAccount                     totalMainAcc;
        DimensionStorage                dimStorage, dimStorageNew;
        DimensionStorageSegment         dimStorageSeg;
        DimensionAttributeValue         dimAttrVal;
        DimensionDisplayValue           displayVal;
        QueryBuildDataSource            mainAccQueryBuildDataSource;
        QueryBuildDataSource            totallingCriteriaQueryBuildDataSource;
        QueryBuildDataSource            dimAttrValQueryBuildDataSource;
        QueryBuildRange                 totallingCriteriaQueryBuildRange;
        BudgetPlanLine                  budgetPlanLine;
        BudgetPlanLineItemLine          budgetPlanLineItem;
        GeneralJournalAccountEntry      genJourAccEntry;
        BudgetPlanLineDataGenerationTmp bpLineDataGenTmpTotal;

        // For generating totalling lines, remove the mainaccounttype ranges set on the original query to fetch all lines.
        query = this.createQuery();

        mainAccQueryBuildDataSource = query.dataSourceTable(tableNum(MainAccount));
        mainAccQueryBuildDataSource.addSelectionField(fieldNum(MainAccount, MainAccountId));
        mainAccQueryBuildDataSource.clearRanges();

        totallingCriteriaQueryBuildDataSource = mainAccQueryBuildDataSource.addDataSource(tableNum(DimensionAttributeValueTotallingCriteria), 'DAVTC');
        totallingCriteriaQueryBuildRange = totallingCriteriaQueryBuildDataSource.addRange(fieldNum(DimensionAttributeValueTotallingCriteria, RecId));
        totallingCriteriaQueryBuildRange.value(strFmt('((%1.MainAccountId <= DAVTC.ToValue) && (%1.MainAccountId >= DAVTC.FromValue))', mainAccQueryBuildDataSource.name()));

        totallingCriteriaQueryBuildDataSource.fetchMode(QueryFetchMode::One2One);
        totallingCriteriaQueryBuildDataSource.addAllFields(tableStr(DimensionAttributeValueTotallingCriteria));

        dimAttrValQueryBuildDataSource = totallingCriteriaQueryBuildDataSource.addDataSource(tableNum(DimensionAttributeValue));
        dimAttrValQueryBuildDataSource.relations(true);
        dimAttrValQueryBuildDataSource.addRange(fieldNum(DimensionAttributeValue, DimensionAttribute)).value(queryValue(dimAttrMainAcc));
        dimAttrValQueryBuildDataSource.addGroupByField(fieldNum(DimensionAttributeValue, RecId));
        dimAttrValQueryBuildDataSource.addGroupByField(fieldNum(DimensionAttributeValue, HashKey));
        dimAttrValQueryBuildDataSource.addGroupByField(fieldNum(DimensionAttributeValue, DimensionAttribute));
        dimAttrValQueryBuildDataSource.addGroupByField(fieldNum(DimensionAttributeValue, EntityInstance));

        mainAccQueryBuildDataSource = dimAttrValQueryBuildDataSource.addDataSource(tableNum(MainAccount), 'MA');
        mainAccQueryBuildDataSource.addLink(fieldNum(DimensionAttributeValue, EntityInstance), fieldNum(MainAccount, RecId));
        mainAccQueryBuildDataSource.addGroupByField(fieldNum(MainAccount, MainAccountId));
        mainAccQueryBuildDataSource.addRange(fieldNum(MainAccount, LedgerChartOfAccounts)).value(
            queryValue(Ledger::chartOfAccounts(Ledger::primaryForLegalEntity(budgetPlanGenerateContract.parmTargetLedgerRecId()))));

        queryRun = new QueryRun(query);

        // Loop through all the lines in GL which fall under the user-specified period.
        // The MainAccountId for all the lines fall under one or more DimensionAttributeValueTotallingCriteria.
        while (queryRun.next())
        {
            generalJournalEntry = queryRun.get(tableNum(GeneralJournalEntry)) as GeneralJournalEntry;
            genJourAccEntry = queryRun.get(tableNum(GeneralJournalAccountEntry)) as GeneralJournalAccountEntry;
            totalMainAcc = queryRun.get(tableNum(MainAccount), 2) as MainAccount;
            dimStorage = DimensionStorage::findById(genJourAccEntry.LedgerDimension);
            dimAttrVal = queryRun.get(tableNum(DimensionAttributeValue)) as DimensionAttributeValue;

            budgetPlanLine.BudgetPlanHeader = _budgetPlanHeaderId;
            budgetPlanLineItem = BudgetPlanLineItemLine::construct();
            budgetPlanLineItem.parmBudgetPlanLine(budgetPlanLine);
            budgetPlanLineItem.initValue();
            budgetPlanLineItem.defaultRow();

            dimStorageNew = DimensionStorage::construct(0, LedgerDimensionType::BudgetPlanning);
            hierarchyCount = dimStorage.hierarchyCount();

            // Loop through all hierarchies for the GeneralJournalAccountEntry ledgerDimension.
            for (hierarchyIndex = 1; hierarchyIndex <= hierarchyCount; hierarchyIndex++)
            {
                dimStorageNew.addHierarchy(dimStorage.getHierarchyId(hierarchyIndex));
                hierarchySegmentCount = dimStorage.segmentCountForHierarchy(hierarchyIndex);
                initSegIdxForHierarchy = dimStorage.initialSegmentForHierarchy(hierarchyIndex);

                // Loop through all segments in the current hierarchy.
                for (segmentIndex = 1; segmentIndex <= hierarchySegmentCount; segmentIndex++)
                {
                    hierarchySegmentIndex =  initSegIdxForHierarchy + segmentIndex - 1;

                    // If current segment is of type=MainAccount, replace this mainaccount with totalling main account before adding it to dimStorageNew.
                    // Otherwise, copy the segment as is to the dimStorageNew.
                    if (dimStorage.getAttributeIdForSegment(hierarchySegmentIndex) == dimAttrMainAcc)
                    {
                        displayVal = totalMainAcc.MainAccountId;
                        dimStorageSeg = DimensionStorageSegment::constructFromValue(displayVal, dimAttrVal);
                        dimStorageNew.setSegmentForHierarchy(hierarchyIndex, segmentIndex, dimStorageSeg);
                    }
                    else
                    {
                        dimStorageNew.setSegmentForHierarchy(hierarchyIndex, segmentIndex, dimStorage.getSegmentForHierarchy(hierarchyIndex, segmentIndex));
                    }
                }
            }

            bpLineDataGenTmpTotal.LedgerDimension           = dimStorageNew.save();
            bpLineDataGenTmpTotal.BudgetPlanHeader          = _budgetPlanHeaderId;
            bpLineDataGenTmpTotal.BudgetPlanScenario        = budgetPlanGenerateContract.parmTargetBudgetPlanScenario();
            bpLineDataGenTmpTotal.EstimateType              = budgetPlanLine.EstimateType;
            bpLineDataGenTmpTotal.IsRecurring               = NoYes::No;
            bpLineDataGenTmpTotal.AccountingCurrencyAmount  = genJourAccEntry.AccountingCurrencyAmount;
            bpLineDataGenTmpTotal.TransactionCurrencyAmount = genJourAccEntry.TransactionCurrencyAmount;
            bpLineDataGenTmpTotal.TransactionCurrencyCode   = genJourAccEntry.TransactionCurrencyCode;
            bpLineDataGenTmpTotal.BudgetClass               = this.getBudgetClass(bpLineDataGenTmpTotal.LedgerDimension);

            if (budgetPlanGenerateContract.parmTargetIsHistorical() == NoYes::Yes)
            {
                bpLineDataGenTmpTotal.EffectiveDate = this.calculateBudgetPlanEffectiveDate();
            }
            else
            {
                bpLineDataGenTmpTotal.EffectiveDate = budgetPlanLine.EffectiveDate;
            }

            this.createOrUpdateBudgetPlanLine(bpLineDataGenTmpTotal);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();

        useHistoricalAmount = true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmBudgetPlanGenerateContract</Name>
				<Source><![CDATA[
    public BudgetPlanGenerateContract parmBudgetPlanGenerateContract(BudgetPlanGenerateContract _budgetPlanGenerateContract = budgetPlanGenerateContract)
    {
        super(_budgetPlanGenerateContract);

        budgetPlanGenerateContractGenJour = _budgetPlanGenerateContract as BudgetPlanGenerateContractGenJour;

        return budgetPlanGenerateContract;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanHeader</Name>
				<Source><![CDATA[
    protected BudgetPlanHeader setBudgetPlanHeader()
    {
        BudgetPlanHeader    budgetPlanHeader;
        BudgetPlanningStage budgetPlanningStage;

        budgetPlanHeader = super();

        // Set the BudgetPlanningStage to last stage for historical plans
        if (budgetPlanGenerateContract.parmTargetIsHistorical() == NoYes::Yes)
        {
            budgetPlanningStage = BudgetPlanningWorkflowSetup::getLastPlanningStage(
                                    budgetPlanGenerateContract.parmTargetBudgetPlanningProcess(),
                                    budgetPlanGenerateContract.parmTargetResponsibilityCenter());

            budgetPlanHeader.BudgetPlanningStage = budgetPlanningStage.RecId;
            budgetPlanHeader.Layout              = BudgetPlanningStageRule::findByProcessOrganizationStage(
                                                        budgetPlanHeader.BudgetPlanningProcess,
                                                        budgetPlanHeader.BudgetingOrganization,
                                                        budgetPlanHeader.BudgetPlanningStage).Layout;
        }

        budgetPlanHeader.IsHistorical        = budgetPlanGenerateContract.parmTargetIsHistorical();
        budgetPlanHeader.DocumentStatus      = budgetPlanGenerateContract.parmTargetIsHistorical() == NoYes::Yes ? BudgetPlanStatus::Finalized : BudgetPlanStatus::Draft;
        budgetPlanHeader.WorkflowStatus      = budgetPlanGenerateContract.parmTargetIsHistorical() == NoYes::Yes ? BudgetPlanWorkflowStatus::Approved : BudgetPlanWorkflowStatus::NotSubmitted;

        return budgetPlanHeader;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setBudgetPlanLineDataGenerationTmp</Name>
				<Source><![CDATA[
    protected BudgetPlanLineDataGenerationTmp setBudgetPlanLineDataGenerationTmp(BudgetPlanHeaderRecId _budgetPlanHeaderRecId)
    {
        BudgetPlanLineDataGenerationTmp budgetPlanLineDataGenerationTmp;

        budgetPlanLineDataGenerationTmp = super(_budgetPlanHeaderRecId);

        budgetPlanLineDataGenerationTmp.TransactionCurrencyAmount = generalJournalAccountEntry.TransactionCurrencyAmount;
        budgetPlanLineDataGenerationTmp.AccountingCurrencyAmount = generalJournalAccountEntry.AccountingCurrencyAmount;
        budgetPlanLineDataGenerationTmp.ReportingCurrencyAmount = generalJournalAccountEntry.ReportingCurrencyAmount;
        budgetPlanLineDataGenerationTmp.TransactionCurrencyCode = generalJournalAccountEntry.TransactionCurrencyCode;
        budgetPlanLineDataGenerationTmp.BudgetClass = this.getBudgetClass(generalJournalAccountEntry.LedgerDimension);

        if (budgetPlanGenerateContract.parmTargetIsHistorical() == NoYes::Yes)
        {
            budgetPlanLineDataGenerationTmp.EffectiveDate = this.calculateBudgetPlanEffectiveDate();
        }

        budgetPlanLineDataGenerationTmp.LedgerDimension = this.generateBudgetPlanningLedgerDim(generalJournalAccountEntry.LedgerDimension);

        return budgetPlanLineDataGenerationTmp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>startProcess</Name>
				<Source><![CDATA[
    /// <summary>
    /// Starts the process of data generation.
    /// </summary>
    /// <param name="_contract">
    /// An object of <c>BudgetPlanGenerateContractGenJour</c> class.
    /// </param>
    public void startProcess(BudgetPlanGenerateContractGenJour _contract)
    {
        // the historical field is set to No (unmarked) , and the aggregate total by is set to day or fiscal period then must skip the process.
        if (!(_contract.parmTargetIsHistorical() == NoYes::No &&
                _contract.parmTargetBudgetPlanGenerateAggregateBy() != BudgetPlanGenerateAggregateBy::FiscalYear))
        {
            BudgetInstrumentationLogger budgetPlanLogger = BudgetInstrumentationLogger::createLogger(classStr(BudgetPlanGenerateServiceGenJour));
            using (SysInstrumentationActivityContext budgetPlanGenerateServiceGenJourContext = budgetPlanLogger.budgetPlanGeneration().genJourContext(_contract))
            {
                this.parmBudgetPlanGenerateContract(_contract);
                this.initialize();
                this.generateData();
            }
        }

    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates an object of <c>BudgetPlanGenerateServiceGenJour</c> class.
    /// </summary>
    /// <returns>
    /// An object of the <c>BudgetPlanGenerateServiceGenJour</c> class.
    /// </returns>
    public static BudgetPlanGenerateServiceGenJour construct()
    {
        return new BudgetPlanGenerateServiceGenJour();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>