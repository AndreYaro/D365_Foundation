<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ReqTransPoMarkChangeToRFQ</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ReqTransPoMarkChangeToRFQ</c> class enables changing a planned purchase order to a request
///    for quote.
/// </summary>
/// <remarks>
///    This class is called from the <c>ReqTransPoMarkChange2RFQ</c> menu item action
/// </remarks>
public class ReqTransPoMarkChangeToRFQ extends ReqTransPoMark implements BatchRetryable
{
    DialogField     dialogaddToSameRFQ;
    NoYes           addToSameRFQ;
    NoYes           useRequestForQuote;

    #DEFINE.CurrentVersion(3)
    #LOCALMACRO.CurrentList
        useRequestForQuote,
        addToSameRFQ
    #ENDMACRO

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canGoBatch</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns false to remove the batch tab of the dialog and disallow batch mode
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This is an overwritten method.
    /// </remarks>
    public boolean canGoBatch()
    {
        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>change2RFQ</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Changes marked planned purchase orders to request for quotes
    /// </summary>
    /// <remarks>
    ///    This is done by using autocreate framework classes for automatically generating purchase request
    ///    for quotes.
    /// </remarks>
    /// <exception cref="M:Exception::Error">
    ///    The planned order does not exist.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    Only planned purchase orders can be changed to requests for quotes.
    /// </exception>
    protected void change2RFQ()
    {
        MapEnumerator       me;
        ReqTrans            reqTransMark;
        ReqTrans            reqTrans;
        ReqPO               reqPO;
        ReqPO               reqPOTmp;

        PurchRFQCaseAutoCreate_PlanPurOrder autoCreateRFQ;

        ttsbegin;

        reqPOTmp.setTmp();

        this.mapReqTransMark();

        me = mapReqTransMark.getEnumerator();

        while (me.moveNext())
        {
            reqTransMark = me.currentValue();

            reqPO = reqTransMark.reqPo(true);
            if (!reqPO.RecId)
            {
                reqPO.insertFromReqTrans(reqTransMark);
            }

            reqTrans = reqPO.reqTrans(true);

            setPrefix(#prefixField(reqTrans,refId));

            if (!reqTrans.RecId)
            {
                throw error(strFmt("@SYS24774",reqTransMark.RefId));
            }

            if (!reqTrans.isPlannedOrder())
            {
                throw error("@SYS111762");
            }

            if (reqPO.RefType != ReqRefType::ItemPlannedOrder)
            {
                info("@SYS111762");
                info(strFmt("@SYS111763", reqPO.RefId, reqPO.RefType));
            }
            else if (ReqPoToRFQCheckProductNotStoppedToggle::instance().isEnabled() &&
                     !InventDistinctProductValidator::checkProductNotStopped(reqPO.ItemId, InventItemOrderSetupType::Purch, reqPO.inventDim(), false))
            {
                continue;
            }
            else
            {
                this.initReqPOTmpFromReqPO(reqPOTmp, reqPO);

                reqPOTmp.doInsert();

                if (!addToSameRFQ)
                {
                    autoCreateRFQ = PurchRFQCaseAutoCreate_PlanPurOrder::construct();
                    autoCreateRFQ.parmBuffer(reqPOTmp);
                    autoCreateRFQ.create();
                    select firstonly forupdate reqPOTmp;
                    reqPOTmp.doDelete();
                }

                mapReqTransDeleted.insert(reqTrans.RecId,reqTrans);
                mapReqPoDeleted.insert(reqPO.RecId,reqPO);
                InventTrans::updateMarkReqTransCov(reqTrans);
                reqPO.delete();
            }
        }

        if (addToSameRFQ && reqPOTmp)
        {
            autoCreateRFQ = PurchRFQCaseAutoCreate_PlanPurOrder::construct();
            autoCreateRFQ.parmBuffer(reqPOTmp);
            autoCreateRFQ.create();
        }

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initReqPOTmpFromReqPO</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initializes a temporary buffer <c>ReqPO</c> buffer from another <c>ReqPO</c> buffer.
    /// </summary>
    /// <param name = "_reqPOTmp">
    ///     The temporary <c>ReqPO</c> buffer.
    /// </param>
    /// <param name = "_reqPO">
    ///     The <c>ReqPO</c> buffer to initialize from.
    /// </param>
    protected void initReqPOTmpFromReqPO(ReqPO _reqPOTmp, ReqPO _reqPO)
    {
        _reqPOTmp.data(_reqPO);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates the dialog during run time to be shown to the user for obtaining confirmation of the action.
    /// </summary>
    /// <returns>
    ///    The dialog object.
    /// </returns>
    public Object dialog()
    {
        Integer countMarkedElements = this.countMarkedElements();

        dialog = super();

        this.dialogAddDefaultFields(dialog,true,false);

        if (countMarkedElements > 1)
        {
            dialogaddToSameRFQ = dialog.addFieldValue(enumStr(NoYes),addToSameRFQ,"@SYS111769","@SYS111770");
        }

        if (!useRequestForQuote)
        {
            dialog.addText("@SYS111771");
        }

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieving the value from the dialog whether the planned purchase orders should be to added to the same request for quote.
    /// </summary>
    /// <returns>
    /// returns a boolean
    /// </returns>
    public boolean getFromDialog()
    {
        boolean ret = super();

        if (dialogaddToSameRFQ)
        {
            addToSameRFQ = dialogaddToSameRFQ.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>labelDialogMarkedElements</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves a label to be used in the dialog for showing how many marked records were marked.
    /// </summary>
    /// <param name="_countMarkedElements">
    ///    The number of marked records.
    /// </param>
    /// <returns>
    ///    A label.
    /// </returns>
    protected str labelDialogMarkedElements(int _countMarkedElements)
    {
        str text;

        switch (_countMarkedElements)
        {
            case 0:
                text = "@SYS345110";
                break;
            case 1:
                text = "@SYS111767";
                break;
            default:
                text = strFmt("@SYS111768",_countMarkedElements);
                break;
        }

        return text;
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion,super(),#CurrentList];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmAddToSameRFQ</Name>
				<Source><![CDATA[
    public NoYes parmAddToSameRFQ(NoYes _addToSameRFQ = addToSameRFQ)
    {
        addToSameRFQ = _addToSameRFQ;
        return addToSameRFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmUseRequestForQuote</Name>
				<Source><![CDATA[
    public NoYes parmUseRequestForQuote(NoYes _useRequestForQuote = useRequestForQuote)
    {
        useRequestForQuote = _useRequestForQuote;
        return useRequestForQuote;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Standard run method, which is called from the <c>main</c> method.
    /// </summary>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    Update Conflict
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    Update Conflict Not Recovered
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    Invalid element
    /// </exception>
    public void run()
    {
        #OCCRetryCount
        setPrefix(ReqTransPoMarkChangeToRFQ::description());

        super();

        try
        {
            ttsBegin;

            if (!this.validate())
            {
                throw error("@SYS18447");
            }

            this.change2RFQ();
            this.removeDeletedFromMark();

            ttsCommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::TransientSqlConnectionError)
        {
            if (ReqTransientSqlConnectionErrorHandlingHelper::retryTransientSqlConnectionError())
            {
                retry;
            }
            else
            {
                throw;
            }
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer         version = conPeek(_packedClass,1);
        container       base;

        switch (version)
        {
            case #CurrentVersion:
                [version,base,#CurrentList] = _packedClass;
                super(base);
                break;
            default:
                return false;
        }
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new instance of the <c>ReqTransPoMarkChangeToRFQ</c> class.
    /// </summary>
    /// <returns>
    ///    A new instance of the <c>ReqTransPoMarkChangeToRFQ</c> class.
    /// </returns>
    /// <remarks>
    ///    Use the following procedure to customize or extend the
    ///    <c>
    ///       ReqTransPoMarkChangeToRFQ
    ///    </c>
    ///     class.
    ///    <list type="number">
    ///       <item>
    ///          <description>
    ///             Create a new class that derives from <c>ReqTransPoMarkChangeToRFQ</c>.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Overlayer the <c>construct</c> method on <c>ReqTransPoMarkChangeToRFQ</c> so that it returns an
    ///             instance of the derived class.
    ///          </description>
    ///       </item>
    ///       <item>
    ///          <description>
    ///             Override the methods from the <c>ReqTransPoMarkChangeToRFQ</c> class that you want to customize or
    ///             extend in your derived class.
    ///          </description>
    ///       </item>
    ///    </list>
    ///    This procedure helps make sure that your customizations are maintained if the base version of the
    ///    <c>
    ///       ReqTransPoMarkChangeToRFQ
    ///    </c>
    ///     class is changed, minimizing code conflicts during an upgrade. For more information, see <see cref="Best Practices for Static Construct Methods" />
    ///    .
    /// </remarks>
    private static ReqTransPoMarkChangeToRFQ construct()
    {
        return new ReqTransPoMarkChangeToRFQ();
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@SYS111761";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Main method that is called from the menu item action.
    /// </summary>
    /// <param name="_args">
    ///    Holds the reference to the form that called main.
    /// </param>
    public static void main(Args _args)
    {
        ReqTransPoMarkChangeToRFQ   reqTransPoMarkChangeToRFQ;

        reqTransPoMarkChangeToRFQ = ReqTransPoMarkChangeToRFQ::newForm(_args);
        reqTransPoMarkChangeToRFQ.executeAction();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newForm</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Constructs a new instance of the <c>ReqTransPoMarkChangeToRFQ</c> class and sets up various other
    ///    data
    /// </summary>
    /// <param name="_args">
    ///    Arguments that are sent by the caller.
    /// </param>
    /// <returns>
    ///    A <c>ReqTransPoMarkChangeToRFQ</c> object.
    /// </returns>
    public static ReqTransPoMarkChangeToRFQ newForm(Args _args)
    {
        ReqTransPoMarkChangeToRFQ   reqTransPoMarkChangeToRFQ   = ReqTransPoMarkChangeToRFQ::construct();
        ReqTrans                    reqTrans                    = ReqTransPoMark::getReqTransFromArgs(_args);

        ReqPlanId                   reqPlanId   = ReqPlanVersion::find(reqTrans.PlanVersion).ReqPlanId;
        ReqPlanData                 reqPlanData = ReqPlanData::newReqPlanId(reqPlanId);

        reqTransPoMarkChangeToRFQ.getLast();
        reqTransPoMarkChangeToRFQ.initFromArgs(_args);
        reqTransPoMarkChangeToRFQ.parmUseRequestForQuote(reqPlanData.useRequestsForQuote());

        reqTransPoMarkChangeToRFQ.init();

        return reqTransPoMarkChangeToRFQ;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    final boolean isRetryable() 
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>