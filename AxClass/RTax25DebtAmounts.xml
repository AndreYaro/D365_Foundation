<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RTax25DebtAmounts</Name>
	<SourceCode>
		<Declaration><![CDATA[
class RTax25DebtAmounts
{
    RTax25DebtType              debtType;
    NoYes                       checkApproval;
    NoYes                       calcTotals;
    TransDate                   transDate;
    TransDate                   fromDate;
    transDate                   toDate;
    RTax25RegisterJournalTrans  registerJournalTrans;
    RefTableId                  refTableId;
    RefRecId                    refRecId;
    CustVendTrans               custVendTrans;
    boolean                     taxModel;
    RTax25RegisterType          regTypeReservation;
    RTax25DebtModel             rTax25DebtModel;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBadDebtDebitAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST getBadDebtDebitAmount()
    {
        CustTrans                   custTrans,
                                    custTransOffset;
        CustSettlement              custSettlement;
        CustVendTransDetails        custVendTransDetails;
        VendTrans                   vendTrans,
                                    vendTransOffset;
        VendSettlement              vendSettlement;
        AmountMST                   amountTotal = 0;
        ToDate                      toDateLocal = toDate - this.hopelessDebtOffset();

        if (registerJournalTrans.RecId)
        {
            while select AccountNum, AmountMST, RecId from custTrans
                where custTrans.TransType         != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                      custTrans.TransType         != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                      custTrans.AmountMST         > 0                                                  &&
                      custTrans.TransDate         <= toDateLocal
            {
                custVendTransDetails = new CustTransDetails(custTrans);

                if (custVendTransDetails.firstDueDate() >= toDateLocal)
                    continue;

                select sum(SettleAmountMST) from custSettlement
                    join count(RecId) from custTransOffset
                    where custSettlement.TransRecId  == custTrans.RecId         &&
                          custSettlement.OffsetRecid == custTransOffset.RecId   &&
                          custTransOffset.TransDate  <= toDate;

                amountTotal += custTrans.AmountMST - abs(custSettlement.SettleAmountMST);
            }

            while select AccountNum, AmountMST, RecId from vendTrans
                where
                    vendTrans.TransType         != LedgerTransType::RTax25_BadDebtDebitAmortisation  &&
                    vendTrans.TransType         != LedgerTransType::RTax25_BadDebtCreditAmortisation &&
                    vendTrans.AmountMST         > 0                                                  &&
                    vendTrans.TransDate         <= toDateLocal
            {
                custVendTransDetails = new CustVendTransDetails(vendTrans);

                if (custVendTransDetails.firstDueDate() >= toDateLocal)
                    continue;

                select sum(SettleAmountMST) from vendSettlement
                    join count(RecId) from vendTransOffset
                    where vendSettlement.TransRecId  == vendTrans.RecId         &&
                          vendSettlement.OffsetRecid == vendTransOffset.RecId   &&
                          vendTransOffset.TransDate  <= toDate;

                amountTotal += vendTrans.AmountMST - abs(vendSettlement.SettleAmountMST);
            }
        }

        return amountTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getExclFromReserve</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a boolean value indicating if the document with the input dimesion should be excluded from reserve calculation.
    /// </summary>
    /// <param name="_defaultDimension">
    /// The default dimension from the document.
    /// </param>
    /// <returns>
    /// A boolean value indicating if the document with the input dimesion should be excluded from reserve calculation.
    /// </returns>

    public NoYes getExclFromReserve(DimensionDefault _defaultDimension = custVendTrans.DefaultDimension)
    {
        const int ExclFromReserve = 4;
        RTax25Query registerQuery;
        RTax25RegisterType inventRegType;
        AgreementHeaderExt_RU agreementHeader;
        RTax25RegisterJournalTrans journalTrans;
        NoYes ret;

        if (refTableId && refRecId && registerJournalTrans.RecId)
        {
            inventRegType = taxModel ?
                        RTax25RegisterType::DebtDebitInventory :
                        RTax25RegisterType::DebtDebitInventoryRAP;

            journalTrans = RTax25RegCalcController::findChildJournalTrans(inventRegType, registerJournalTrans);

            registerQuery  = RTax25Query::newParameters(inventRegType,
                                                    journalTrans,
                                                    ! RTax25RegisterTrans::existAny(journalTrans.JournalNum,
                                                                                    journalTrans.RegisterId,
                                                                                    journalTrans.PeriodType,
                                                                                    journalTrans.PeriodNum,
                                                                                    journalTrans.FiscalYear));
            registerQuery.createRegQuery();
            registerQuery.addRangeValue(fieldName2Id(registerQuery.getRecord().TableId, 'RefTableId'),
                                    queryValue(refTableId));
            registerQuery.addRangeValue(fieldName2Id(registerQuery.getRecord().TableId, 'RefRecId'),
                                    queryValue(refRecId));

            if (registerQuery.first())
            {
                return registerQuery.getField(ExclFromReserve);
            }
        }

        agreementHeader = AgreementHeaderExt_RU::findByDefaultDimension(_defaultDimension);

        if (agreementHeader)
        {
            ret = taxModel ? agreementHeader.ExcludeReserveCalcTax : agreementHeader.ExcludeReserveCalc;
        }
        else
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns starting date of the current profit tax reporting period.
    /// </summary>
    /// <returns>
    /// The starting date of the current profit tax reporting period.
    /// </returns>
    public TransDate getFromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegisterJour</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public RTax25RegisterJournalTable getRegisterJour()
    {
        return registerJournalTrans.registerJournalTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getRegisterJourTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns the tax register line used for debt amounts calculation.
    /// </summary>
    /// <returns>The tax register line used for debt amounts calculation.</returns>
    public RTax25RegisterJournalTrans getRegisterJourTrans()
    {
        return registerJournalTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReserve</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST getReserve()
    {
        RTax25Query registerQuery;
        AmountMST   amountTotal  = 0;

        if (debtType != RTax25DebtType::Debit)
            return 0;

        if (registerJournalTrans.RecId)
        {
            registerQuery  = RTax25Query::newParameters(regTypeReservation,
                registerJournalTrans,
                ! RTax25RegisterTrans::existAny(registerJournalTrans.JournalNum,
                                                registerJournalTrans.RegisterId,
                                                registerJournalTrans.PeriodType,
                                                registerJournalTrans.PeriodNum,
                                                registerJournalTrans.FiscalYear));
            
            if (refTableId && refRecId && ! calcTotals)
            {
                registerQuery.createRegQuery();
                registerQuery.addRangeValue(fieldName2Id(registerQuery.getRecord().TableId, 'RefTableId'),
                                        queryValue(refTableId));
                registerQuery.addRangeValue(fieldName2Id(registerQuery.getRecord().TableId, 'RefRecId'),
                                        queryValue(refRecId));
            }

            if (registerQuery.first())
            {
                amountTotal = calcTotals ?
                    registerQuery.getFieldTotal(this.reserveFieldId(), 0 ,'') :
                    any2real(registerQuery.getField(this.reserveFieldId()));
            }
        }

        return amountTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method returns ending date of the current profit tax reporting period.
    /// </summary>
    /// <returns>
    /// The ending date of the current profit tax reporting period.
    /// </returns>
    public TransDate getToDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUsedReserve</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST getUsedReserve()
    {
        CustTrans                   custTrans;
        CustTrans_W                 custTrans_W;
        VendTrans                   vendTrans;
        VendTrans_W                 vendTrans_W;
        AmountMST                   amountTotal  = 0;

        if (debtType != RTax25DebtType::Debit)
        return 0;

        select sum(RTax25Amortisation_RU), sum(RAPAmortisation_RU) from custTrans_W
            where (!custVendTrans.RecId                          ||
                   (custVendTrans.TableId == tableNum(CustTrans) &&
                    custTrans_W.OffsetCustTrans_RU == custVendTrans.RecId))
        exists join custTrans
            where custTrans.RecId     == custTrans_W.CustTrans   &&
                  custTrans.TransDate <= toDate                  &&
                  custTrans.TransDate >= fromDate                &&
                  custTrans.TransType == LedgerTransType::RTax25_BadDebtDebitAmortisation;

        amountTotal = taxModel                          ?
                  custTrans_W.RTax25Amortisation_RU :
                  custTrans_W.RAPAmortisation_RU;

        select sum(RTax25Amortisation_RU), sum(RAPAmortisation_RU) from vendTrans_W
            where (!custVendTrans.RecId                          ||
                   (custVendTrans.TableId == tableNum(VendTrans) &&
                    vendTrans_W.OffsetVendTrans_RU == custVendTrans.RecId))
        exists join vendTrans
            where vendTrans.RecId     == vendTrans_W.VendTrans  &&
                  vendTrans.TransDate <= toDate                 &&
                  vendTrans.TransDate >= fromDate               &&
                  vendTrans.TransType == LedgerTransType::RTax25_BadDebtDebitAmortisation;

        amountTotal += taxModel                          ?
                   vendTrans_W.RTax25Amortisation_RU :
                   vendTrans_W.RAPAmortisation_RU;

        return amountTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWrittenOffAmount</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public AmountMST getWrittenOffAmount()
    {
        LedgerTransType             ledgerTransType;
        CustTrans                   custTrans,
                                    custTransOffset;
        CustSettlement              custSettlement;
        VendTrans                   vendTrans,
                                    vendTransOffset;
        VendSettlement              vendSettlement;
        AmountMST                   amountTotal  = 0;

        switch (debtType)
        {
            case RTax25DebtType::Debit :
                ledgerTransType = LedgerTransType::RTax25_BadDebtDebitAmortisation;
                break;
            case RTax25DebtType::Credit :
                ledgerTransType = LedgerTransType::RTax25_BadDebtCreditAmortisation;
                break;
        }

        select TableId from custTrans
            join sum(SettleAmountMST) from custSettlement
            join TableId from custTransOffset
            where
                custTrans.RecId             == custSettlement.TransRecId        &&
                custTrans.TransType         != ledgerTransType                  &&
                custTransOffset.RecId       == custSettlement.OffsetRecid       &&
                custTransOffset.TransType   == ledgerTransType                  &&
               (!custVendTrans.RecId                                            ||
               (custVendTrans.TableId       == tableNum(CustTrans)              &&
                custTrans.RecId             == custVendTrans.RecId))            &&
                custTransOffset.TransDate   >= fromDate                         &&
                custTransOffset.TransDate   <= toDate;

        amountTotal = abs(custSettlement.SettleAmountMST);

        select TableId from vendTrans
            join sum(SettleAmountMST) from vendSettlement
            join TableId from vendTransOffset
            where
                vendTrans.RecId             == vendSettlement.TransRecId        &&
                vendTrans.TransType         != ledgerTransType                  &&
                vendTransOffset.RecId       == vendSettlement.OffsetRecid       &&
                vendTransOffset.TransType   == ledgerTransType                  &&
               (!custVendTrans.RecId                                            ||
               (custVendTrans.TableId       == tableNum(VendTrans)              &&
                vendTrans.RecId             == custVendTrans.RecId))            &&
                vendTransOffset.TransDate   >= fromDate                         &&
                vendTransOffset.TransDate   <= toDate;

        amountTotal += abs(vendSettlement.SettleAmountMST);

        return amountTotal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>hopelessDebtOffset</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public int hopelessDebtOffset()
    {
        RTax25DebtPeriod debtPeriod;
        RTax25DebtModelPeriod debtModelPeriod;

        switch (debtType)
        {
            case RTax25DebtType::Debit :
            select firstonly DaysFrom from debtModelPeriod
                where debtModelPeriod.DebtModel == rTax25DebtModel.RecId
                   && debtModelPeriod.BadDebtType == RTax25BadDebtType::Hopeless;

                if (! debtModelPeriod.DaysFrom)
                {
                    throw error("@GLS104244");
                }

                return debtModelPeriod.DaysFrom;

            case RTax25DebtType::Credit :
            default :
            select firstonly DaysFrom, DebtType, RecId from debtPeriod
                where debtPeriod.BadDebtType == RTax25BadDebtType::Hopeless &&
                      debtPeriod.DebtType    == debtType;

                if (! debtPeriod.RecId || (debtPeriod.DebtType == RTax25DebtType::Debit && ! debtPeriod.DaysFrom))
                {
                    throw error("@GLS104244");
                }

                return debtPeriod.DaysFrom;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    private void init()
    {
        RTax25RegisterTable         registerTable;
        int                         periodLag;
        Months                      month;
        RTax25PeriodNum             periodNum;
        real                        dummyNum;
        RTax25RegType               regType, movRegType;
        RTax25RegisterType          regTypeMovement;
        int                         monthLenReg, monthLenModel;
        int                         lastReserveCalcMthDelta;

        void calcPeriodNum(int _periodLag)
        {
            month     = mthofyr(transDate);
            periodLag = _periodLag;
            periodNum = month div periodLag;
            dummyNum  = month / periodLag;

            if (dummyNum > periodNum)
            {
                periodNum++;
            }
        }

        if (refTableId && refRecId)
        {
            this.initSourceTrans();
        }

        switch (debtType)
        {
            case RTax25DebtType::Debit :
                if (! taxModel && ! refRecId) //model = RAP, detail = Total
                {
                    regTypeReservation  = RTax25RegisterType::DebtDebitReservationRAP;
                    regTypeMovement     = RTax25RegisterType::DebtDebitMovementRAP;
                }
                else
                if (! taxModel && refRecId)  //model = RAP, detail = Detail
                {
                    regTypeReservation  = RTax25RegisterType::DebtDebitReservationDetailRAP;
                    regTypeMovement     = RTax25RegisterType::DebtDebitMovementRAP;
                }
                else
                if (taxModel && ! refRecId) //model = TAX, detail = Total
                {
                    regTypeReservation  = RTax25RegisterType::DebtDebitReservation;
                    regTypeMovement     = RTax25RegisterType::DebtDebitMovement;
                }
                else
                if (taxModel && refRecId) //model = TAX, detail = Detail
                {
                    regTypeReservation  = RTax25RegisterType::DebtDebitReservationDetail;
                    regTypeMovement     = RTax25RegisterType::DebtDebitMovement;
                }

                registerTable   = RTax25RegisterTable::find(regTypeReservation);
                if (registerTable)
                {
                    regType    = RTax25RegType::construct(regTypeReservation);
                    movRegType = RTax25RegType::construct(regTypeMovement);
                }
                else
                throw error(strfmt(RTax25RegisterTable::txtNotExist(), regTypeReservation));

                rTax25DebtModel = RTax25DebtModel::findRecId(taxModel                               ?
                                                         CustParameters::rTax25DebtModelTax()   :
                                                         CustParameters::rTax25DebtModel());

                monthLenModel   = RTax25RegisterJournalTable::periodMthLength(rTax25DebtModel.PeriodType);
                monthLenReg     = RTax25RegisterJournalTable::periodMthLength(registerTable.PeriodType);

                if (monthLenModel < monthLenReg)
                {
                    throw error(strFmt("@RTax25BadDebtReserve:TaxRegDebtModelPeriodCheck", regTypeReservation));
                }

                break;
            case RTax25DebtType::Credit :
                registerTable   = RTax25RegisterTable::find(RTax25RegisterType::DebtCreditInventory);
                if (registerTable)
                {
                    regType    = RTax25RegType::construct(RTax25RegisterType::DebtCreditInventory);
                    movRegType = RTax25RegType::construct(RTax25RegisterType::DebtCreditMovement);
                }
                else
                throw error(strfmt(RTax25RegisterTable::txtNotExist(), RTax25RegisterType::DebtCreditInventory));
                break;
        }

        calcPeriodNum(RTax25RegisterJournalTable::periodMthLength(registerTable.PeriodType));

        setprefix(strfmt("@GLS104944", periodLag));
        if (checkApproval == NoYes::Yes)
        {
            select firstonly Approved, JournalNum from registerJournalTrans
            where registerJournalTrans.FiscalYear          == year(transDate)                          &&
                  registerJournalTrans.PeriodNum           == periodNum                                &&
                  registerJournalTrans.PeriodType          == registerTable.PeriodType                 &&
                  registerJournalTrans.Status              == RTax25RegisterStatus::Calculated         &&
                  registerJournalTrans.Cancelled           == NoYes::No                                &&
                  registerJournalTrans.RegisterId          == movRegType.registerId();
            
            if (registerJournalTrans.Approved == NoYes::Yes)
            {
                throw error(strfmt("@GLS111167",
                               "@GLS101992",
                               "@GLS104369",
                               strlwr("@SYS8993"),
                               registerJournalTrans.JournalNum,
                               strlwr("@GLS104101"),
                               movRegType.getRegisterTypeStr()));
            }
        }

        if (debtType == RTax25DebtType::Debit)
        {
            calcPeriodNum(monthLenModel);
            registerJournalTrans.FiscalYear = year(transDate);
            registerJournalTrans.PeriodNum  = periodNum;
            registerJournalTrans.PeriodType = rTax25DebtModel.PeriodType;

            fromDate    = registerJournalTrans.fromDate();
            toDate      = registerJournalTrans.toDate();

            calcPeriodNum(monthLenReg);
            registerJournalTrans.PeriodNum  = periodNum;
            registerJournalTrans.PeriodType = registerTable.PeriodType;

            lastReserveCalcMthDelta = mthofyr(registerJournalTrans.toDate());
            lastReserveCalcMthDelta = -((lastReserveCalcMthDelta - 1) mod monthLenModel) - 1;

            registerJournalTrans = RTax25RegCalcController::findChildJournalTrans(regType.registerType(), registerJournalTrans, RAssetAssessedTaxRegType::None, lastReserveCalcMthDelta / monthLenReg);
        }
        else
        {
            select firstonly registerJournalTrans
            where   registerJournalTrans.FiscalYear == year(transDate)                      &&
                    registerJournalTrans.PeriodNum  == periodNum                            &&
                    registerJournalTrans.PeriodType == registerTable.PeriodType             &&
                    registerJournalTrans.Status     == RTax25RegisterStatus::Calculated     &&
                    registerJournalTrans.RegisterId == regType.registerId();

            fromDate    = registerJournalTrans.fromDate();
            toDate      = registerJournalTrans.toDate();
        }

        if (checkApproval == NoYes::Yes && registerJournalTrans.Approved == NoYes::No)
        {
            throw error(strfmt("@GLS111168",
                           "@GLS104250",
                           strlwr("@SYS8993"),
                           registerJournalTrans.JournalNum ? registerJournalTrans.JournalNum : "@GLS104367",
                           strlwr("@GLS104101"),
                           regType.getRegisterTypeStr()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSourceTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method seeks for the transaction of the source document used for debt calculation.
    /// </summary>
    public void initSourceTrans()
    {
        custVendTrans = RTax25DebtAmounts::getSourceDocTrans(refTableId, refRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCalcTotals</Name>
				<Source><![CDATA[
    private NoYes parmCalcTotals(NoYes _calcTotals = calcTotals)
    {
        calcTotals = _calcTotals;
        return calcTotals;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmCheckApproval</Name>
				<Source><![CDATA[
    private NoYes parmCheckApproval(NoYes _checkApproval = checkApproval)
    {
        ;
        checkApproval = _checkApproval;
        return checkApproval;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDebtType</Name>
				<Source><![CDATA[
    private RTax25DebtType parmDebtType(RTax25DebtType _debtType = debtType)
    {
        ;
        debtType = _debtType;
        return debtType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTransDate</Name>
				<Source><![CDATA[
    private TransDate parmTransDate(TransDate _transDate = transDate)
    {
        ;
        transDate = _transDate;
        return transDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefRecId</Name>
				<Source><![CDATA[
    public RefRecId parmRefRecId(RefRecId _refRecId = refRecId)
    {
        refRecId = _refRecId;
        return refRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRefTableId</Name>
				<Source><![CDATA[
    public RefTableId parmRefTableId(RefTableId _refTableId = refTableId)
    {
        refTableId = _refTableId;
        return refTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxModel</Name>
				<Source><![CDATA[
    private boolean parmTaxModel(boolean _taxModel = taxModel)
    {
        taxModel = _taxModel;
        return taxModel;
    }

]]></Source>
			</Method>
			<Method>
				<Name>reserveFieldId</Name>
				<Source><![CDATA[
    private RTax25FieldId reserveFieldId()
    {
        RTax25DebtModelPeriod debtPeriod;
        const int ReservePos = 3;
        const int ReservePosDetail = 6;

        select count(RecId) from debtPeriod
            where debtPeriod.DebtModel  == rTax25DebtModel.RecId
               && debtPeriod.Percent    != 0;

        return any2int(debtPeriod.RecId) + (refTableId && refRecId ? ReservePosDetail : ReservePos);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSourceDocTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns customer or vendor transaction related to the input document reference.
    /// </summary>
    /// <param name="_refTableId">
    /// The Table ID document reference.
    /// </param>
    /// <param name="_refRecId">
    /// The record ID document reference.
    /// </param>
    /// <returns>
    /// The customer or vendor transaction related to the input document reference.
    /// </returns>

    public static CustVendTrans getSourceDocTrans(RefTableId _refTableId, RefRecId _refRecId)
    {
        CustVendInvoiceJour custVendInvoiceJour;
        LedgerJournalTrans  ledgerJournalTrans;
        CustVendTrans custVendTrans;
        RefTableId refTableId = _refTableId;
        RefRecId refRecId = _refRecId;

        switch (refTableId)
        {
            case tableNum(CustInvoiceJour) :
                custVendInvoiceJour = CustInvoiceJour::findRecId(refRecId);
                custVendTrans = custVendInvoiceJour.custTrans();
                break;
            case tableNum(VendInvoiceJour) :
                custVendInvoiceJour = VendInvoiceJour::findRecId(refRecId);
                custVendTrans = custVendInvoiceJour.vendTrans();
                break;
            case tableNum(LedgerJournalTrans) :
                ledgerJournalTrans = LedgerJournalTrans::findByRef(curext(), refRecId);

                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Cust ||
                ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Cust)
                {
                    custVendTrans = CustTrans::findVoucherDate(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate);
                }

                if (ledgerJournalTrans.AccountType == LedgerJournalACType::Vend ||
                ledgerJournalTrans.OffsetAccountType == LedgerJournalACType::Vend)
                {
                    custVendTrans = VendTrans::findVoucherDate(ledgerJournalTrans.Voucher, ledgerJournalTrans.TransDate);
                }
                break;
            case tableNum(CustTrans) :
                custVendTrans = CustTrans::find(refRecId);
                break;
            case tableNum(VendTrans) :
                custVendTrans = VendTrans::find(refRecId);
                break;
        }

        return custVendTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25DebtAmounts construct()
    {
        return new RTax25DebtAmounts();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newParameters</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static RTax25DebtAmounts newParameters(TransDate _transDate, RTax25DebtType _debtType, NoYes _checkApproval = NoYes::No)
    {
        RTax25DebtAmounts ret = RTax25DebtAmounts::construct();

        ret.parmTransDate(_transDate);
        ret.parmDebtType(_debtType);
        ret.parmCheckApproval(_checkApproval);

        ret.init();

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newModelParameters</Name>
				<Source><![CDATA[
    /// <summary>
    /// The methods instantiates and initializes the class based on the input parameters related to the source document and calculation model.
    /// </summary>
    /// <param name = "_transDate">Calculation date.</param>
    /// <param name = "_debtType">The type of debt.</param>
    /// <param name = "_checkApproval">A flag indicating if an approval of a tax register journal should be checked.</param>
    /// <param name = "_refTableId">A Table ID of the source document.</param>
    /// <param name = "_refRecId">A Record ID of the source document.</param>
    /// <param name = "_taxModel">A flag indicating a debt model.</param>
    /// <param name = "_calcTotals">A flag specifying if totals should be calculated.</param>
    /// <returns></returns>
    public static RTax25DebtAmounts newModelParameters(
        TransDate _transDate,
        RTax25DebtType _debtType,
        NoYes _checkApproval = NoYes::No,
        RefTableId _refTableId = 0,
        RefRecId _refRecId = 0,
        NoYes _taxModel = NoYes::No, //No - business accounting, Yes - tax accounting
        NoYes _calcTotals = NoYes::No)
    {
        RTax25DebtAmounts ret = RTax25DebtAmounts::construct();

        ret.parmTransDate(_transDate);
        ret.parmDebtType(_debtType);
        ret.parmCheckApproval(_checkApproval);
        ret.parmRefTableId(_refTableId);
        ret.parmRefRecId(_refRecId);
        ret.parmTaxModel(_taxModel);
        ret.parmCalcTotals(_calcTotals);
  
        ret.init();

        return ret;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>