<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>IntercompanySalesCalcAvailableDlvDates_SalesLine</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>IntercompanySalesCalcAvailableDlvDates_SalesLine</c> class is the engine
/// for sales line delivery date calculation when it is sourced by an intercompany chain.
/// </summary>
class IntercompanySalesCalcAvailableDlvDates_SalesLine extends SalesCalcAvailableDlvDates_SalesLine
{
    /// <summary>
    /// Contains a state of this object, persisted when recursively traversing intercompany chain.
    /// </summary>
    Stack objectStates = new Stack();

    /// <summary>
    /// Data area ID of the company where temporary table, with shipping and receipt dates, was generated.
    /// </summary>
    DataAreaId salesAvailableDlvDatesTmpDataAreaId;

    /// <summary>
    /// Id of item in the sourcing company
    /// </summary>
    private ItemId interCompanySourcingCompanyItemId;

    /// <summary>
    /// Delivery mode id of a simulated sales line in the sourcing company
    /// </summary>
    private DlvModeId interCompanySourcingCompanyDlvModeId;

    /// <summary>
    /// Delivery term id of a simulated sales line in the sourcing company
    /// </summary>
    private DlvTermId interCompanySourcingCompanyDlvTermId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>shippingLocationDate</Name>
				<Source><![CDATA[
    // <remarks>Method overridden to be executed in shipping company context, when direct delivery used.</remarks>
    public TransDate shippingLocationDate()
    {
        TransDate result;

        if (salesLine.isDirectDelivery() && salesLine.isIntercompanyOrigin())
        {
            changecompany(salesLine.intercompanySourcingCompanyId())
            {
                this.moveStateToNextIntercompanySalesLine();
                result = this.shippingLocationDate();
                this.revertState();
            }
        }
        else
        {
            result = super();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getShippingLocationTimeZone</Name>
				<Source><![CDATA[
    // <remarks>Method overridden to be executed in shipping company context, when direct delivery used.</remarks>
    public Timezone getShippingLocationTimeZone()
    {
        Timezone result;

        if (salesLine.isDirectDelivery() && salesLine.isIntercompanyOrigin())
        {
            changecompany(salesLine.intercompanySourcingCompanyId())
            {
                this.moveStateToNextIntercompanySalesLine();
                result = this.getShippingLocationTimeZone();
                this.revertState();
            }
        }
        else
        {
            result = super();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPossibleShippingAndReceiptDates</Name>
				<Source><![CDATA[
    // <remarks>Method overridden to be executed in shipping company context, when direct delivery used.</remarks>
    public void createPossibleShippingAndReceiptDates(boolean  _createOnlyOneRecord = false)
    {
        if (salesLine.isDirectDelivery() && salesLine.isIntercompanyOrigin())
        {
            changecompany(salesLine.intercompanySourcingCompanyId())
            {
                this.moveStateToNextIntercompanySalesLine();
                this.createPossibleShippingAndReceiptDates(_createOnlyOneRecord);
                this.revertState();
            }
        }
        else
        {
            super(_createOnlyOneRecord);

            salesAvailableDlvDatesTmpDataAreaId = curExt();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportDays</Name>
				<Source><![CDATA[
    // <remarks>Method overridden to be executed in shipping company context, when direct delivery used.</remarks>
    public CustVendTransportDays transportDays()
    {
        CustVendTransportDays result;

        if (salesLine.isDirectDelivery())
        {
            if (salesLine.isIntercompanyOrigin())
            {
                changecompany(salesLine.intercompanySourcingCompanyId())
                {
                    this.moveStateToNextIntercompanySalesLine();
                    result = this.transportDays();
                    this.revertState();
                }
            }
            else
            {
                // For external vendors and direct delivery transport days should be 0
                result = 0;
            }
        }
        else
        {
            result = super();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>effectiveOrderDate</Name>
				<Source><![CDATA[
    // <remarks>Method overridden to be executed in shipping company context, when direct delivery used.</remarks>
    public TransDate effectiveOrderDate()
    {
        TransDate result;

        if (salesLine.isDirectDelivery() && salesLine.isIntercompanyOrigin())
        {
            changecompany(salesLine.intercompanySourcingCompanyId())
            {
                this.moveStateToNextIntercompanySalesLine();
                result = this.effectiveOrderDate();
                this.revertState();
            }
        }
        else
        {
            result = super();
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setOrderEntryDeadlines</Name>
				<Source><![CDATA[
    // <remarks>Method overridden to be executed in shipping company context, when direct delivery used.</remarks>
    public void setOrderEntryDeadlines(SalesCalcAvailableDlvDates _salesCalcAvailableDlvDates)
    {
        if (salesLine.isDirectDelivery() && salesLine.isIntercompanyOrigin())
        {
            changecompany(salesLine.intercompanySourcingCompanyId())
            {
                this.moveStateToNextIntercompanySalesLine();
                this.setOrderEntryDeadlines(_salesCalcAvailableDlvDates);
                this.revertState();
            }
        }
        else
        {
            super(_salesCalcAvailableDlvDates);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDatesForCalendar</Name>
				<Source><![CDATA[
    // <remarks>Method overridden to be executed in shipping company context, when direct delivery used.</remarks>
    public container adjustDatesForCalendar(FromDate _earliestShipDate, CustVendTransportDays _transportDays)
    {
        container result;

        if (salesLine.isDirectDelivery() && salesLine.isIntercompanyOrigin())
        {
            changecompany(salesLine.intercompanySourcingCompanyId())
            {
                this.moveStateToNextIntercompanySalesLine();
                result = this.adjustDatesForCalendar(_earliestShipDate, _transportDays);
                this.revertState();
            }
        }
        else
        {
            result = super(_earliestShipDate, _transportDays);
        }

        return result;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSalesAvailableDlvDatesTmpDataAreaId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves data area ID of the company where temporary table was generated.
    /// </summary>
    /// <returns>The <c>DataAreaId</c> value.</returns>
    public DataAreaId getSalesAvailableDlvDatesTmpDataAreaId()
    {
        return salesAvailableDlvDatesTmpDataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newSalesLine</Name>
				<Source><![CDATA[
    public static IntercompanySalesCalcAvailableDlvDates_SalesLine newSalesLine(SalesLine _salesLine,
                                                                           FieldId   _fieldId = 0,
                                                                           InventDim _inventDim = null)
    {
        IntercompanySalesCalcAvailableDlvDates_SalesLine            salesCalc       = IntercompanySalesCalcAvailableDlvDates_SalesLine::construct();
        SalesDlvDateType                                            masterDateType  = salesCalc.fieldId2DlvDateType(_fieldId);
        InventDim                                                   inventDim;

        salesCalc.parmSalesLine(_salesLine);
        salesCalc.parmDlvModeIdSelected(_salesLine.DlvMode);
        inventDim = salesCalc.initInventDim(_salesLine, _inventDim);

        salesCalc.parmRecalculateShippingDate(false);
        salesCalc.parmShowActualShipDates(true);
        salesCalc.parmShowConfirmation(true);

        salesCalc.initReqSetupDim(_salesLine.ItemId, inventDim, _salesLine.DeliveryDateControlType);
        salesCalc.initOrderEntryDeadline(_salesLine);
        salesCalc.initMaster(masterDateType);

        return salesCalc;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkReceiptDate</Name>
				<Source><![CDATA[
    // <remarks>Method overridden to be executed in shipping company context, when direct delivery used.</remarks>
    void checkReceiptDate(boolean _checkCalendar = false)
    {
        if (salesLine.isDirectDelivery() && salesLine.isIntercompanyOrigin())
        {
            changecompany(salesLine.intercompanySourcingCompanyId())
            {
                this.moveStateToNextIntercompanySalesLine();
                this.checkReceiptDate(_checkCalendar);
                this.revertState();
            }
        }
        else
        {
            super(_checkCalendar);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkShippingDate</Name>
				<Source><![CDATA[
    // <remarks>Method overridden to be executed in shipping company context, when direct delivery used.</remarks>
    void checkShippingDate(boolean _checkCalendar = false, boolean _modifiedField = true)
    {
        if (salesLine.isDirectDelivery())
        {
            // Note that for external vendors we should not check the shipping date
            if (salesLine.isIntercompanyOrigin())
            {
                changecompany(salesLine.intercompanySourcingCompanyId())
                {
                    this.moveStateToNextIntercompanySalesLine();
                    this.checkShippingDate(_checkCalendar, _modifiedField);
                    this.revertState();
                }
            }
        }
        else
        {
            super(_checkCalendar, _modifiedField);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    protected static IntercompanySalesCalcAvailableDlvDates_SalesLine construct()
    {
        return new IntercompanySalesCalcAvailableDlvDates_SalesLine();
    }

]]></Source>
			</Method>
			<Method>
				<Name>salesLeadTime</Name>
				<Source><![CDATA[
    public LeadTime salesLeadTime(CalendarDays _basedOnCalendarSetup = NoYes::Yes)
    {
        if (!salesLine.isSourcedViaProcurement())
        {
            return super(_basedOnCalendarSetup);
        }
        else if (!salesLeadTimeFound)
        {
            InventDim inventDim = InventDim::find(this.parmInventDimId());

            if (forceCalcToUseMarking)
            {
                salesLeadTime = this.leadTimeFromMarking(InventTransOriginSalesLine::findInventTransOriginId(salesLine.DataAreaId,salesLine.InventTransId));
                salesLeadTimeBasedOnCalendarSetup = salesLeadTime;

                if (salesLeadTime < 0)
                {
                    salesLeadTime = this.leadTime(inventDim);
                    salesLeadTimeBasedOnCalendarSetup = this.adjustLeadTimeForWorkingDays(salesLeadTime);
                }
            }
            else
            {
                MarginIssue margin = 0;

                if (!salesLine.isDirectDelivery())
                {
                    margin = IntercompanySalesCalcAvailableDlvDates_SalesLine::safetyMarginLeadTime(reqSetupDim);
                }

                if (salesLine.isExternalVendorOrigin())
                {
                    salesLeadTime = this.calculateLeadTimeFromPurchLeadTime();
                    salesLeadTime += margin;
                    salesLeadTimeBasedOnCalendarSetup = salesLeadTime;
                }
                else
                {
                    salesLeadTime = this.calculateLeadTimeFromSource(margin);
                    salesLeadTimeBasedOnCalendarSetup = salesLeadTime;
                }
            }
        }
        salesLeadTimeFound = true;

        return _basedOnCalendarSetup == NoYes::Yes ? salesLeadTimeBasedOnCalendarSetup : salesLeadTime;
    }

]]></Source>
			</Method>
			<Method>
				<Name>safetyMarginLeadTimeForSourcingPurchaseLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the lead time based on safety receipt and issue margin for a sourcing purchase line.
    /// </summary>
    /// <param name = "_purchLine">The purchase line record.</param>
    /// <returns>The lead time based on safety receipt and issue margin for a sourcing purchase line.</returns>
    public static Days safetyMarginLeadTimeForSourcingPurchaseLine(PurchLine _purchLine)
    {
        ReqSetupDim reqSetupDim = ReqSetupDim::newInventTable(_purchLine.inventTable(), _purchLine.InventDimId);
        return IntercompanySalesCalcAvailableDlvDates_SalesLine::safetyMarginLeadTime(reqSetupDim);
    }

]]></Source>
			</Method>
			<Method>
				<Name>safetyMarginLeadTime</Name>
				<Source><![CDATA[
    private static Days safetyMarginLeadTime(ReqSetupDim _reqSetupDim)
    {
        ReqPlanSched reqPlanSched = ReqPlanSched::find(ReqParameters::find().CurrentReqPlanIdSchedStatic);
        Days margin = reqPlanSched.IssueMargin + reqPlanSched.ReceiptMargin;

        if (_reqSetupDim)
        {
            margin += _reqSetupDim.marginIssue() + _reqSetupDim.marginReceipt();
        }

        return margin;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLeadTimeFromPurchLeadTime</Name>
				<Source><![CDATA[
    private LeadTime calculateLeadTimeFromPurchLeadTime()
    {
        date today = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());

        PurchTable purchTable;
        purchTable.PurchaseType = PurchaseType::Purch;
        purchTable.initFromVendTable(vendTable::find(salesLine.SourcingVendAccount));

        PurchLine purchLine;
        purchLine.DeliveryType = salesLine.DeliveryType;
        purchline.initFromPurchTable(purchTable);
        purchLine.InventDimId = salesLine.InventDimId;
        purchLine.DeliveryDate = today;
        purchLine.initFromInventTable(salesLine.inventTable());

        return purchLine.DeliveryDate - today;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateLeadTimeFromSource</Name>
				<Source><![CDATA[
    private LeadTime calculateLeadTimeFromSource(MarginIssue _marginIssue = 0)
    {
        int leadTimeFromSourcingCompany;

        if (salesLine.isDirectDelivery())
        {
            changecompany(salesLine.intercompanySourcingCompanyId())
            {
                this.moveStateToNextIntercompanySalesLine();
                leadTimeFromSourcingCompany = this.salesLeadTime();
                this.revertState();
            }
        }
        else
        {
            SalesLine intercompanySalesLine = this.simulateIntercompanySalesLine(salesLine);

            changecompany(salesLine.intercompanySourcingCompanyId())
            {
                date todayDate = DateTimeUtil::getToday(this.getShippingLocationTimeZone());

                SalesCalcAvailableDlvDates_SalesLine salesCalcAvailableDlvDates = SalesCalcAvailableDlvDates_SalesLine::newSalesLine(intercompanySalesLine);
                salesCalcAvailableDlvDates.parmReplacedIntercompanyChainInventTransIdsPerDataArea(replacedIntercompanyChainInventTransIdsPerDataArea);
                SalesCalcAvailableDlvDates::initDateFieldsForSalesCalc(intercompanySalesLine, salesCalcAvailableDlvDates, true);

                if (this.isMasterDateTypeConfirmed() && intercompanySalesLine.ReceiptDateConfirmed)
                {
                    leadTimeFromSourcingCompany = intercompanySalesLine.ReceiptDateConfirmed - todayDate;
                }
                else
                {
                    leadTimeFromSourcingCompany = intercompanySalesLine.ReceiptDateRequested - todayDate;
                }

                leadTimeFromSourcingCompany += _marginIssue;
            }
        }

        return leadTimeFromSourcingCompany;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSimulatedDeliveryPostalAddress</Name>
				<Source><![CDATA[
    private static LogisticsPostalAddressRecId getSimulatedDeliveryPostalAddress(SalesLine _salesLine)
    {
        if (_salesLine.isDirectDelivery())
        {
            return _salesLine.DeliveryPostalAddress;
        }
        else
        {
            LogisticsLocationRecId  locationRecId;
            boolean                 isCompanyAddress;
            InventDim               salesLineInventDim = _salesLine.inventDim();

            [locationRecId, isCompanyAddress] = PurchTableType::getDefaultDeliveryLocation(salesLineInventDim.inventSiteId, salesLineInventDim.InventLocationId);

            return LogisticsPostalAddress::addressRecIdFromLocationRecId(locationRecId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>moveStateToNextIntercompanySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Persists the current state of this object and moves to the state based on the next intercompany sales line in the chain.
    /// </summary>
    protected void moveStateToNextIntercompanySalesLine()
    {
        SalesLine intercompanySalesLine = this.simulateIntercompanySalesLine(salesLine);

        if (!intercompanySalesLine && intercompanySalesLine.ItemId == '')
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        objectStates.push([
            salesLine,
            inventLocationIdTransportShipping,
            inventDimId,
            orderEntryDeadlineGroupId,
            inventSiteIdSelected,
            inventLocationIdSelected,
            effectiveOrderDate,
            receiptCalendarId,
            dlvModeIdSelected]);

        changecompany (salesLine.DataAreaId)
        {
            // Receipt calendar of the original sales order delivery location must be propagated to the intercompany sales order delivery date calculation
            // The call to the receiptCalendarId() method will cache the receipt calendar of the original sales order company in a class variable
            this.receiptCalendarId();
        }

        // Initialize object based on intercompany sales line
        salesLine = intercompanySalesLine;

        this.initInventDim(salesLine);

        reqSetupDim = null;
        this.initReqSetupDim(salesLine.ItemId, InventDim::find(inventDimId), salesLine.DeliveryDateControlType);

        effectiveOrderDate = dateNull();
        this.initOrderEntryDeadline(salesLine);

        this.parmDlvModeIdSelected(salesLine.DlvMode);
        this.parmDeliveryDateControlType(salesLine.DeliveryDateControlType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>revertState</Name>
				<Source><![CDATA[
    /// <summary>
    /// Reverts state to the previous one.
    /// </summary>
    protected void revertState()
    {
        container previousState = objectStates.pop();

        if (previousState == conNull())
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        [salesLine,
            inventLocationIdTransportShipping,
            inventDimId,
            orderEntryDeadlineGroupId,
            inventSiteIdSelected,
            inventLocationIdSelected,
            effectiveOrderDate,
            receiptCalendarId,
            dlvModeIdSelected
        ] = previousState;

        reqSetupDim = null;
        this.initReqSetupDim(salesLine.ItemId, InventDim::find(inventDimId), salesLine.DeliveryDateControlType);
        this.parmDeliveryDateControlType(salesLine.DeliveryDateControlType);

        salesTable = salesLine.salesTable();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateCallerInventDimId</Name>
				<Source><![CDATA[
    protected void updateCallerInventDimId(salesLine _salesLineCaller)
    {
        // Update of inventory dimensions is not supported for intercompany sales lines
    }

]]></Source>
			</Method>
			<Method>
				<Name>simulateIntercompanySalesLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Simulates an intercompany sales line corresponding to the specified original sales line.
    /// </summary>
    /// <param name = "_originalSalesLine">The original sales order line.</param>
    /// <returns>Simulation of an intercompany sales line.</returns>
    private SalesLine simulateIntercompanySalesLine(SalesLine _originalSalesLine)
    {
        SalesLine       intercompanySalesLine;
        InventTransId   sourcingCompanyInventTransId;

        changecompany(_originalSalesLine.company())
        {
            sourcingCompanyInventTransId = _originalSalesLine.intercompanySalesLineInventTransId();

            if (sourcingCompanyInventTransId)
            {
                // If the sourcing company id have changed no line will be found below
                changecompany(_originalSalesLine.intercompanySourcingCompanyId())
                {
                    intercompanySalesLine = SalesLine::findInventTransId(sourcingCompanyInventTransId);
                }
            }
        }

        changecompany(_originalSalesLine.intercompanySourcingCompanyId())
        {
            if (!intercompanySalesLine)
            {
                // Simulate dates for non existing sales line in sourcing company
                this.initializeValueMappedIntercompanyValues(_originalSalesLine);
                InventTable interCompanySourcingItem = InventTable::find(interCompanySourcingCompanyItemId);
                intercompanySalesLine.ItemId = interCompanySourcingItem.ItemId;
                intercompanySalesLine.initFromInventTable(interCompanySourcingItem);

                changecompany(_originalSalesLine.company())
                {
                    intercompanySalesLine.CustAccount               = _originalSalesLine.intercompanySalesLineCustomer().AccountNum;
                    intercompanySalesLine.InventDimId               = _originalSalesLine.intercompanySourcingCompanyInventDim().inventDimId;
                    intercompanySalesLine.DeliveryPostalAddress     = IntercompanySalesCalcAvailableDlvDates_SalesLine::getSimulatedDeliveryPostalAddress(_originalSalesLine);
                }

                intercompanySalesLine.DlvMode = interCompanySourcingCompanyDlvModeId;
                intercompanySalesLine.DlvTerm = interCompanySourcingCompanyDlvTermId;
                intercompanySalesLine.DeliveryDateControlType = SalesATPCalculation::findSalesOrderSettings(intercompanySalesLine.ItemId, intercompanySalesLine.InventDimId).DeliveryDateControlType;

                intercompanySalesLine.SalesQty = _originalSalesLine.SalesQty;
                intercompanySalesLine.RemainSalesPhysical = _originalSalesLine.RemainSalesPhysical;

                // Inventory quantities (can not count on inventory unit being the same across companies)
                intercompanySalesLine.QtyOrdered = intercompanySalesLine.calcQtyOrdered(intercompanySalesLine.SalesQty);
                intercompanySalesLine.RemainInventPhysical = intercompanySalesLine.QtyOrdered;

                intercompanySalesLine.PdsCWQty = _originalSalesLine.PdsCWQty;
                intercompanySalesLine.PdsCWRemainInventPhysical = _originalSalesLine.PdsCWQty;
            }
            else
            {
                // When modifying the SalesQty on the original sales line a new calculation will be executed,
                // this happens before the line is saved and hence before the quantity is updated.
                // Therefore we need to set the quantity on the sales line used for the calculation.
                intercompanySalesLine.SalesQty = _originalSalesLine.SalesQty;
                intercompanySalesLine.QtyOrdered = _originalSalesLine.QtyOrdered;
            }
        }

        //Force the dates to be recalculated, regardless of the existing dates on a sales line
        intercompanySalesLine.RecId = 0;

        return intercompanySalesLine;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeValueMappedIntercompanyValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes global variables for sales line fields which need to be value mapped in order to be used on a sales line in a sourcing company.
    /// </summary>
    /// <param name = "_originalSalesLine">The <c>SalesLine</c> record in the original company.</param>
    private void initializeValueMappedIntercompanyValues(SalesLine _originalSalesLine)
    {
        changecompany(_originalSalesLine.company())
        {
            SalesTable originalSalesOrder = _originalSalesLine.salesTable();

            VendTable vendTable = vendTable::find(_originalSalesLine.SourcingVendAccount);
            InterCompanyTradingValueMap fromInterCompanyTradingValueMap = vendTable.interCompanyTradingPartner().interCompanyTradingValueMap();
            InterCompanyTradingValueMap toInterCompanyTradingValueMap;

            CustTable sourcingCompanyCustomer;
            changecompany(_originalSalesLine.SourcingCompanyId)
            {
                sourcingCompanyCustomer = CustTable::find(vendTable.interCompanyTradingPartnerAccount());
                toInterCompanyTradingValueMap = sourcingCompanyCustomer.interCompanyTradingPartner().interCompanyTradingValueMap();
            }

            // If original sales order has DlvMode, that one is used. Otherwise sourcing sales order will default it from customer
            if (originalSalesOrder.DlvMode)
            {
                TradeInterCompanyConv convertDlvMode = TradeInterCompanyConv::construct();
                convertDlvMode.axDlvModeId(fromInterCompanyTradingValueMap, originalSalesOrder.DlvMode);
                changecompany(_originalSalesLine.SourcingCompanyId)
                {
                    interCompanySourcingCompanyDlvModeId = convertDlvMode.axDlvModeId(toInterCompanyTradingValueMap);
                }
            }
            else
            {
                interCompanySourcingCompanyDlvModeId = sourcingCompanyCustomer.DlvMode;
            }

            if (originalSalesOrder.DlvTerm)
            {
                TradeInterCompanyConv convertDlvTerm = TradeInterCompanyConv::construct();
                convertDlvTerm.axDlvTermId(fromInterCompanyTradingValueMap, originalSalesOrder.DlvTerm);
                changecompany(_originalSalesLine.SourcingCompanyId)
                {
                    interCompanySourcingCompanyDlvTermId = convertDlvTerm.axDlvTermId(toInterCompanyTradingValueMap);
                }
            }
            else
            {
                interCompanySourcingCompanyDlvTermId = sourcingCompanyCustomer.DlvTerm;
            }

            // ItemId doesn't use value mapping, but is converted using product master
            interCompanySourcingCompanyItemId = _originalSalesLine.intercompanySourcingCompanyItemId();

            if (!interCompanySourcingCompanyItemId)
            {
                error(strFmt("@Intercompany:ErrorItemNotReleasedToSourcingCompany", _originalSalesLine.ItemId, _originalSalesLine.SourcingCompanyId, _originalSalesLine.SourcingVendAccount));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shippingCalendarId</Name>
				<Source><![CDATA[
    protected CalendarId shippingCalendarId()
    {
        if (salesLine.isDirectDelivery() && SalesLine.isExternalVendorOrigin())
        {
            return "";
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>transportCalendarId</Name>
				<Source><![CDATA[
    protected CalendarId transportCalendarId()
    {
        if (salesLine.isDirectDelivery() && SalesLine.isExternalVendorOrigin())
        {
            return "";
        }
        else
        {
            return super();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>