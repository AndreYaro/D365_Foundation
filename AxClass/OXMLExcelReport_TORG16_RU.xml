<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>OxmlExcelReport_TORG16_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class prints unified form TORG-16 to excel
/// </summary>
class OxmlExcelReport_TORG16_RU extends XMLExcelReport_Standard_RU implements BatchRetryable, ERIReportPostProcessingWithPrintMgmtSupported
{
    XmlNodeList         xmlNodeListProlog,
                        xmlNodeListInvoice,
                        xmlNodeListInventTable,
                        xmlNodeListChairman,
                        xmlNodeListMember,
                        xmlNodeListInCharge,
                        xmlNodeListTotals,
                        xmlNodeListFinal;

    XMLNodeListIterator xmlNodeListInvoiceIterator,
                        xmlNodeListPrologIterator,
                        xmlNodeListInventTableIterator,
                        xmlNodeListChairmanIterator,
                        xmlNodeListMemberIterator,
                        xmlNodeListInChargeIterator,
                        xmlNodeListTotalsIterator,
                        xmlNodeListFinalIterator;

    XmlDocument         xmlDocument;

    protected const int Page1 = 1;
    protected const int Page2 = 2;
    protected const str Line1 = '1';
    protected const str Line2 = '2';
    protected const str ReportHeader2 = 'REPORTHEADER2';
    protected const str PageHeader2 = 'PAGEHEADER2';
    protected const str Body2 = 'BODY2';
    protected const str PageFooter2 = 'PAGEFOOTER2';
    protected const str ReportFooter2 = 'REPORTFOOTER2';
    protected const str ItemName = "ItemName";
    protected const str ItemId = "ItemId";
    protected const str Remark = "Remark";
    protected const str DocumentNum ="DocumentNum";
    protected const str DocumentDate = "DocumentDate";
    protected const str AmountRTxt = "AmountRTxt";
    protected const str AmountCTxt = "AmountCTxt";
    protected const str PrologSection = "PrologSection";
    protected const str InvoiceSection = "InvoiceSection";
    protected const str InventTableSection = "InventTableSection";
    protected const str ChairmanSection = "ChairmanSection";
    protected const str MemberSection = "MemberSection";
    protected const str InChargeSection = "InChargeSection";
    protected const str TotalsTxtSection = "TotalsTxtSection";
    protected const str FinalSection = "FinalSection";
    protected const str ReportFooter = 'REPORTFOOTER';

    protected const int Width = 79;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void addTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>addTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adds current line values to totals on page
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void addTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcRangeHeight</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates height of resizeable sections for report
    /// </summary>
    /// <param name="_bookmark">
    /// section name
    /// </param>
    /// <returns>
    /// height of section
    /// </returns>
    protected real calcRangeHeight(Bookmark _bookmark)
    {
        real        ret;
        XmlElement  element;

        switch (curWorkSheetNum)
        {
            case Page1:
                ret = conPeek(mapSections.lookup(_bookmark), #posSectionHeight);
                break;
            case Page2:
                element = xmlNodeListInventTableIterator.value();
                ret = max(document.getNamedRangeHeightWrapped(ItemName, element.getAttribute(ItemName)),
                          document.getNamedRangeHeightWrapped(ItemId, element.getAttribute(ItemId)),
                          document.getNamedRangeHeightWrapped(Remark, element.getAttribute(Remark)));
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>check</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks in XML Document data for this report correct
    /// </summary>
    /// <returns>
    /// true if document correct, otherwise false
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected boolean check()
    {
        if (xmlNodeListInvoice.length() == 0 || xmlNodeListInventTable.length() == 0)
        {
            return checkFailed("@GLS101555");
        }

        if ((xmlNodeListProlog.length() != 1) ||
            (xmlNodeListTotals.length() != 1) ||
            (xmlNodeListFinal.length()  != 1))
        {
            return checkFailed(Error::wrongUseOfFunction(funcName()));
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotals</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears totals
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void clearTotals()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearTotalsOnPage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Clears page totals
    /// </summary>
    /// <remarks>
    /// Not used in this report
    /// </remarks>
    protected void clearTotalsOnPage()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes report, which consists of two pages
    /// </summary>
    protected void createReport()
    {
        GlobalizationInstrumentationHelper::featureRun(GlobalizationConstants::FeatureReferenceRU00122, funcName());

        widthCols       = Width;

        curWorkSheetNum = Page1;
        this.createStandardReport();

        currentRow = 0;

        curWorkSheetNum = Page2;
        this.createStandardReport();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through iterator which corresponds to report header
    /// </summary>
    /// <returns>
    /// if data still exists, true, otherwise false
    /// </returns>
    protected boolean fetchHeader()
    {
        boolean ret;

        switch (curWorkSheetNum)
        {
            case Page1:
                if (reportNum)
                {
                    xmlNodeListPrologIterator.next();
                }

                numOfLines = xmlNodeListInvoice.length();

                ret = xmlNodeListPrologIterator.more();
                break;
            case Page2:
                if (reportNum)
                {
                    xmlNodeListTotalsIterator.next();
                    xmlNodeListFinalIterator.next();
                }

                numOfLines = xmlNodeListInventTable.length();
                ret = xmlNodeListFinalIterator.more();
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fetchLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Moves through iterator which corresponds to report lines
    /// </summary>
    /// <returns>
    /// if data still exists, true, otherwise false
    /// </returns>
    protected boolean fetchLines()
    {
        if (lineNo)
        {
            switch (curWorkSheetNum)
            {
                case Page1:
                    xmlNodeListInvoiceIterator.next();
                    break;
                case Page2:
                    xmlNodeListInventTableIterator.next();
                    break;
            }
        }
        return curWorkSheetNum == Page1 ? xmlNodeListInvoiceIterator.more() : xmlNodeListInventTableIterator.more();
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Name of the new file
    /// </summary>
    /// <returns>
    /// Name of the new file
    /// </returns>
    protected Filename fileName()
    {
        return 'TORG16';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fileNamePostfix</Name>
				<Source><![CDATA[
    /// <summary>
    /// Postfix for a new file
    /// </summary>
    /// <returns>
    /// number of document and date of document
    /// </returns>
    protected Filename fileNamePostfix()
    {
        XmlElement elt = xmlNodeListProlog.item(0);

        return elt.getAttribute(DocumentNum) + '_' + strRem(elt.getAttribute(DocumentDate), '/');
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportFileName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report file.
    /// </summary>
    /// <returns>
    /// The name of the report file.
    /// </returns>
    public str getReportFileName()
    {
        return this.excelFileName();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getReportName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the name of the report.
    /// </summary>
    /// <returns>
    /// The name of the report.
    /// </returns>
    public str getReportName()
    {
        return 'TORG16';
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillBody</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills body section with data
    /// </summary>
    protected void fillBody()
    {
        XmlNamedNodeMap     nodeMap;
        XmlElement          elt;
        XmlAttribute        attr;
        int                 idx;

        switch (curWorkSheetNum)
        {
            case Page1:
                elt = xmlNodeListInvoiceIterator.value();
                nodeMap = elt.attributes();
                for (idx = 0; idx < nodeMap.length(); idx++)
                {
                    attr = nodeMap.item(idx);
                    this.insertValueToSection(attr.name(), attr.value());
                }
                break;
            case Page2:
                elt = xmlNodeListInventTableIterator.value();
                nodeMap = elt.attributes();
                for (idx = 0; idx < nodeMap.length(); idx++)
                {
                    attr = nodeMap.item(idx);
                    this.insertValueToSection(attr.name(), attr.value());
                }
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page footer section with data
    /// </summary>
    protected void fillPageFooter()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillPageHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills page header section with data
    /// </summary>
    protected void fillPageHeader()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportFooter</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report footer section with data
    /// </summary>
    protected void fillReportFooter()
    {
        const int StrLen = 70;
        XmlNamedNodeMap     nodeMap;
        XmlElement          elt;
        XmlAttribute        attr;
        int                 idx;
        int                 iteration;

        if (curWorkSheetNum == Page1)
        {
            return;
        }

        //fill Totals
        elt = xmlNodeListTotalsIterator.value();
        nodeMap = elt.attributes();
        for (idx = 0; idx < nodeMap.length(); idx++)
        {
            attr = nodeMap.item(idx);
            if (attr.name() == AmountRTxt)
            {
                this.insertValueToSection(AmountRTxt + Line1, subStr(attr.value(), 1, StrLen));
                this.insertValueToSection(AmountRTxt + Line2, subStr(attr.value(), StrLen+1, strLen(attr.value())));
            }
            else
            {
                this.insertValueToSection(attr.name(), attr.value());
            }
        }

        //fill chairman
        if (xmlNodeListChairman.length() > 0)
        {
            elt = xmlNodeListChairmanIterator.value();
            nodeMap = elt.attributes();
            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }
        }
        //fill members
        while (xmlNodeListMemberIterator.more() && iteration < 2)
        {
            iteration++;

            elt = xmlNodeListMemberIterator.value();
            nodeMap = elt.attributes();
            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name() + int2str(iteration), attr.value());
            }

            xmlNodeListMemberIterator.next();
        }

        //fill in charge
        while (xmlNodeListInChargeIterator.more())
        {
            elt = xmlNodeListInChargeIterator.value();
            nodeMap = elt.attributes();
            for (idx = 0; idx < nodeMap.length(); idx++)
            {
                attr = nodeMap.item(idx);
                this.insertValueToSection(attr.name(), attr.value());
            }

            xmlNodeListInChargeIterator.next();
        }

        //final
        elt = xmlNodeListFinalIterator.value();
        nodeMap = elt.attributes();
        for (idx = 0; idx < nodeMap.length(); idx++)
        {
            attr = nodeMap.item(idx);
            this.insertValueToSection(attr.name(), attr.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillReportHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fills report header section with data
    /// </summary>
    protected void fillReportHeader()
    {
        XmlNamedNodeMap     nodeMap;
        XmlElement          elt;
        XmlAttribute        attr;
        int                 idx;

        if (curWorkSheetNum != page1)
        {
            return;
        }

        elt = xmlNodeListPrologIterator.value();
        nodeMap = elt.attributes();
        for (idx = 0; idx < nodeMap.length(); idx++)
        {
            attr = nodeMap.item(idx);
            this.insertValueToSection(attr.name(), attr.value());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes report
    /// </summary>
    /// <returns>
    /// true, if report has correct structure
    /// </returns>
    public boolean init()
    {
        xmlDocument = XmlDocument::newXml(args.parm(), false);

        super();

        xmlNodeListProlog      = xmlDocument.getElementsByTagName(PrologSection);
        xmlNodeListInvoice     = xmlDocument.getElementsByTagName(InvoiceSection);
        xmlNodeListInventTable = xmlDocument.getElementsByTagName(InventTableSection);
        xmlNodeListChairman    = xmlDocument.getElementsByTagName(ChairmanSection);
        xmlNodeListMember      = xmlDocument.getElementsByTagName(MemberSection);
        xmlNodeListInCharge    = xmlDocument.getElementsByTagName(InChargeSection);
        xmlNodeListTotals      = xmlDocument.getElementsByTagName(TotalsTxtSection);
        xmlNodeListFinal       = xmlDocument.getElementsByTagName(FinalSection);

        return this.check();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunHeader</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query run which fetches lines for header, but in this report XMLNodeListIterator used instead
    /// </summary>
    protected void initQueryRunHeader()
    {
        switch (curWorkSheetNum)
        {
            case Page1:
                xmlNodeListPrologIterator = new XMLNodeListIterator(xmlNodeListProlog);
                break;
            case Page2:
                xmlNodeListChairmanIterator = new XMLNodeListIterator(xmlNodeListChairman);
                xmlNodeListMemberIterator = new XMLNodeListIterator(xmlNodeListMember);
                xmlNodeListInChargeIterator = new XMLNodeListIterator(xmlNodeListInCharge);
                xmlNodeListTotalsIterator = new XMLNodeListIterator(xmlNodeListTotals);
                xmlNodeListFinalIterator = new XMLNodeListIterator(xmlNodeListFinal);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQueryRunLines</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes query run which fetches data for lines, but in this report XMLNodeListIterator used instead
    /// </summary>
    protected void initQueryRunLines()
    {
        switch (curWorkSheetNum)
        {
            case Page1:
                xmlNodeListInvoiceIterator = new XMLNodeListIterator(xmlNodeListInvoice);
                break;
            case Page2:
                xmlNodeListInventTableIterator = new XMLNodeListIterator(xmlNodeListInventTable);
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionMap</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes sections which exist in this report
    /// </summary>
    protected void initSectionMap()
    {
        mapSections = null;

        switch (curWorksheetNum)
        {
            case Page1:
                this.addSection(reportHeaderName);
                this.addSection(pageHeaderName);
                this.addSection(bodyName);
                this.addSection(pageFooterName);
                this.addSection(reportFooterName);
                break;
            case Page2:
                super();
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSectionNames</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes section names for this report
    /// </summary>
    /// <remarks>
    /// They are different for different pages
    /// </remarks>
    protected void initSectionNames()
    {
        switch (curWorkSheetNum)
        {
            case Page1:
                super();
                break;
            case Page2:
                reportHeaderName = ReportHeader2;
                pageHeaderName   = PageHeader2;
                bodyName         = Body2;
                pageFooterName   = PageFooter2;
                reportFooterName = ReportFooter2;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initSkipSections</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines list of sections which should not be printed
    /// </summary>
    protected void initSkipSections()
    {
        skipSections = [ReportFooter, ReportHeader2];
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>templateName</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns name of the template for report
    /// </summary>
    /// <returns>
    /// name of the template for report
    /// </returns>
    protected Filename templateName()
    {
        return resourceStr(TORG16_RU);
    }

]]></Source>
			</Method>
			<Method>
				<Name>totalCells</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates number of cells to be filled with data
    /// </summary>
    /// <returns>
    /// Number of cells to be filled with data
    /// </returns>
    protected Counter totalCells()
    {
        const int CellsBody1 = 6;
        const int CellsBody2 = 10;
        const int CellsOther = 21;

        return CellsBody1 * xmlNodeListInvoice.length() + CellsBody2 * xmlNodeListInventTable.length() + CellsOther;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        public static OXMLExcelReport_TORG16_RU construct()
    {
        return new OXMLExcelReport_TORG16_RU();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>