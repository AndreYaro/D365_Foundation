<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PrintoutTableReports_SlipsM4M7_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class PrintoutTableReports_SlipsM4M7_RU extends PrintoutTableReports_RU implements BatchRetryable
{
    VendPackingSlipJour           vendPackingSlipJour;
    PurchPackingSlipJournalCreate journalCreate;
    DialogField                   dialogCreation;

    #define.CurrentVersion(1)
    #LOCALMACRO.ParmList
    #ENDMACRO
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>allocateNum</Name>
				<Source><![CDATA[
        protected NumberSeq  allocateNum(PrintoutTypeTable_RU  _transType,
                                     InventLocationId      _locationId)
    {
        NumberSequenceGroupId   numberSequenceGroup;
        NumberSequenceReference numberSequenceReference;
        NumberSeq               numberSeqNum;
        RefRecId                packingSlipNumberSeqId;
        RefRecId                scopeId  = NumberSeqScopeFactory::createDefaultScope().getId();
        ;

        switch (_transType)
        {
            case PrintoutTypeTable_RU::PurchReceiptM7:
                 numberSequenceReference = InventParameters::numRefInventReceiptsListId_RU();
                 break;
            case PrintoutTypeTable_RU::PurchReimbSlipM4:
                 numberSequenceReference = InventParameters::numRefInventReimbSlipId_RU();
                 break;
            case PrintoutTypeTable_RU::PurchReceiptTORG1:
                 numberSequenceReference = InventParameters::numRefInventReceiptsListforGoodsId_RU();
                 break;
            case PrintoutTypeTable_RU::PurchReceiptTORG2:
            case PrintoutTypeTable_RU::PurchReceiptTORG3:
                 numberSequenceReference = InventParameters::numRefInventReceiptsListId_RU();
                 break;
            default:
                throw error("@GLS106494");
        }

        if (! numberSequenceReference)
            throw error("@SYS25067");

        numberSequenceGroup = InventLocation::find(_locationId).NumberSequenceGroup_RU;

        if (numberSequenceGroup)
        {
            packingSlipNumberSeqId = NumberSequenceGroupRef::findNaturalKey(numberSequenceReference.NumberSequenceDatatype, scopeId, numberSequenceGroup).NumberSequenceId;

            if (! packingSlipNumberSeqId)
            {
                packingSlipNumberSeqId = NumberSequenceReference::findNaturalKey(numberSequenceReference.NumberSequenceDatatype, scopeId).NumberSequenceId;
            }

            this.checkNumSeq(NumberSequenceTable::find(packingSlipNumberSeqId).NumberSequence,
                             "@SYS25197",
                             NumberSequenceDatatype::find(numberSequenceReference.NumberSequenceDatatype).DatatypeId);

            numberSeqNum = NumberSeq::newGetNumFromId(packingSlipNumberSeqId);
        }
        else
        {
            this.checkNumSeq(numberSequenceReference.numberSequenceTable().NumberSequence,
                             "@SYS25197",
                             NumberSequenceDatatype::find(numberSequenceReference.NumberSequenceDatatype).DatatypeId);

            numberSeqNum = NumberSeq::newGetNum(numberSequenceReference);
        }

        return numberSeqNum;
    }

]]></Source>
			</Method>
			<Method>
				<Name>caption</Name>
				<Source><![CDATA[
        public ClassDescription caption()
    {
        return "@GLS106985";
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
        public Object dialog()
    {
        DialogRunbase dialog_orig = super();

        if (dialog_orig)
        {
            dialog_orig.caption("@SYS24381");
            dialogCreation = dialog_orig.addFieldValue(extendedTypeStr(NoYesId), creation, "@SYS36645");
        }
        return dialog_orig;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
        public boolean getFromDialog()
    {
        boolean ret;

        ret = super();

        if (ret)
        {
            creation = dialogCreation.value();
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmMode</Name>
				<Source><![CDATA[
        public void initParmMode()
    {
        this.showQueryDialog(true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initQuery</Name>
				<Source><![CDATA[
        public void initQuery()
    {
        Query                query = new Query();
        QueryBuildDataSource qbsVendPackingSlipJour, qbsVendPackingSlipTrans, qbsDim;
        QueryBuildRange      rangeStatus;
        ;

        // Journal table
        qbsVendPackingSlipJour = query.addDataSource(tableNum(VendPackingSlipJour));

        rangeStatus = qbsVendPackingSlipJour.addRange(fieldNum(VendPackingSlipJour, InvoiceAccount));
        if (custVendAccount)
        {
            rangeStatus.value(custVendAccount);
        }
        rangeStatus  = qbsVendPackingSlipJour.addRange(fieldNum(VendPackingSlipJour, PurchId));
        if (salesPurchId)
        {
            rangeStatus.value(salesPurchId);
        }
        rangeStatus  = qbsVendPackingSlipJour.addRange(fieldNum(VendPackingSlipJour, PackingSlipId));
        if (documentId)
        {
            rangeStatus.value(documentId);
        }
        rangeStatus  = qbsVendPackingSlipJour.addRange(fieldNum(VendPackingSlipJour, DeliveryDate));
        if (documentDate)
        {
            rangeStatus.value(documentDate);
        }

        // Journal lines
        qbsVendPackingSlipTrans = qbsVendPackingSlipJour.addDataSource(tableNum(VendPackingSlipTrans));

        qbsVendPackingSlipTrans.allowAdd(false);
        qbsVendPackingSlipTrans.joinMode(JoinMode::InnerJoin);
        qbsVendPackingSlipTrans.relations(true);

        // InventDim for Invent locations
        qbsDim = qbsVendPackingSlipTrans.addDataSource(tableNum(InventDim));

        qbsDim.joinMode(JoinMode::InnerJoin);
        qbsDim.relations(true);
        qbsDim.allowAdd(false);
        rangeStatus = qbsDim.addRange(fieldNum(InventDim, InventLocationId));
        if (locationId)
        {
            rangeStatus.value(locationId);
        }
        // Query Run initiate
        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
        public void initValue()
    {
        str locationIdFromVendPackingSlip(str _locationId = locationId)
        {
            VendPackingSlipTrans  tmpTrans;
            InventDim             inventDim;

            while select InventLocationId from inventDim
                group by InventLocationId
            join InventDimId from tmpTrans
                    where tmpTrans.VendPackingSlipJour == vendPackingSlipJour.RecId &&
                          tmpTrans.InventDimId         == inventDim.InventDimId
            {
                _locationId = this.addValueToStr(inventDim.InventLocationId, _locationId);
            }

            return this.removeSeparator(_locationId);
        }

        ;

        /* ------------------------------------------ Main body ------------------------------------------ */

        if (classIdGet(caller) == classNum(PurchPackingSlipJournalCreate))
        {
            journalCreate = caller;
        }

        if (common)
        {
            journalList = FormLetter::createJournalListCopy(common);
        }

        if (journalList)
        {
            journalList.first(vendPackingSlipJour);

            if (vendPackingSlipJour)
            {
                while (vendPackingSlipJour)
                {
                    custVendAccount     = this.addValueToStr(vendPackingSlipJour.InvoiceAccount, custVendAccount);
                    salesPurchId        = this.addValueToStr(vendPackingSlipJour.PurchId,        salesPurchId);
                    documentId          = this.addValueToStr(vendPackingSlipJour.PackingSlipId,  documentId);
                    documentDate        = this.addValueToStr(vendPackingSlipJour.DeliveryDate,   documentDate);
                    locationId         += locationIdFromVendPackingSlip(locationId);
                    if (! journalList.next(vendPackingSlipJour))
                    {
                        break;
                    }
                }
            }

            custVendAccount = custVendAccount ? this.removeSeparator(custVendAccount) : custVendAccount;
            salesPurchId    = salesPurchId    ? this.removeSeparator(salesPurchId)    : salesPurchId;
            documentId      = documentId      ? this.removeSeparator(documentId)      : documentId;
            documentDate    = documentDate    ? this.removeSeparator(documentDate)    : documentDate;
        }
        else
        {
            if (common)
            {
                switch (common.TableId)
                {
                    case tableNum(VendPackingSlipJour):
                        vendPackingSlipJour = common;
                        custVendAccount     = queryValue(vendPackingSlipJour.InvoiceAccount);
                        salesPurchId        = queryValue(vendPackingSlipJour.PurchId);
                        documentId          = queryValue(vendPackingSlipJour.PackingSlipId);
                        documentDate        = queryValue(vendPackingSlipJour.DeliveryDate);
                        locationId          = locationIdFromVendPackingSlip(locationId);
                        break;

                    default: // ranges are empty, create or show all documents
                }
            }
        }

        this.creation(true); // default option
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
        public container pack()
    {
        return [#CurrentVersion, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
        public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
        public void run()
    {
        PrintoutTable_RU     printoutJournal,
                             printoutJournalPrevious;
        VendPackingSlipTrans trans;
        PrintoutTypeTable_RU journalType;
        boolean              proforma;
        InventLocationId     tmpLocation;
        RefRecId             vendPackingSlipVersionRecId;

        this.cleanup();

        journalList = new RecordSortedList(tableNum(PrintoutTable_RU));
        journalList.sortOrder(fieldNum(PrintoutTable_RU, JournalNum),
                              fieldNum(PrintoutTable_RU, JournalType),
                              fieldNum(PrintoutTable_RU, InventLocationId));

        if (journalCreate)
        {
            proforma = journalCreate.parmProforma();
        }

        ttsbegin;

        while (queryRun.next())
        {
            trans               = queryRun.get(tableNum(VendPackingSlipTrans));
            vendPackingSlipJour = queryRun.get(tableNum(VendPackingSlipJour));

            tmpLocation         = trans.inventDim().InventLocationId;

            switch (journalCreate.parmReceiptListDeviationType_RU())
            {
                case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG1:
                    journalType = PrintoutTypeTable_RU::PurchReceiptTORG1;
                    break;

                case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG2:
                    journalType = PrintoutTypeTable_RU::PurchReceiptTORG2;
                    break;

                case ReceiptListDeviationType_RU::ReceiptListForGoodsTORG3:
                    journalType = PrintoutTypeTable_RU::PurchReceiptTORG3;
                    break;

                default:
                    journalType = PrintoutTypeTable_RU::PurchReimbSlipM4;

                    if (VendPackingSlipTrans::findDeviationQty_RU(trans.VendPackingSlipJour,
                                                                  tmpLocation))
                    {
                        journalType = PrintoutTypeTable_RU::PurchReceiptM7;
                    }
            }

            vendPackingSlipVersionRecId = VendPackingSlipVersion::findLatest(vendPackingSlipJour.RecId).RecId;
            if (creation)
            {
                update_recordset printoutJournal
                    setting Voided = NoYes::Yes
                    where printoutJournal.SalesPurchId == vendPackingSlipJour.PurchId       &&
                            printoutJournal.DocumentId   == vendPackingSlipJour.PackingSlipId &&
                            printoutJournal.DocumentDate == vendPackingSlipJour.DeliveryDate  &&
                            printoutJournal.VendPackingSlipVersion != vendPackingSlipVersionRecId;
            }

            if (!trans.Qty)
            {
                continue;
            }

            // find already created journal
            select firstonly forupdate printoutJournal
                where printoutJournal.SalesPurchId           == vendPackingSlipJour.PurchId       &&
                      printoutJournal.DocumentId             == vendPackingSlipJour.PackingSlipId &&
                      printoutJournal.DocumentDate           == vendPackingSlipJour.DeliveryDate  &&
                      printoutJournal.JournalType            == journalType                       &&
                      printoutJournal.InventLocationId       == tmpLocation                       &&
                      printoutJournal.VendPackingSlipVersion == vendPackingSlipVersionRecId;

            // create new journal
            if (! printoutJournal && creation)
            {
                printoutJournal.clear();
                printoutJournal.initFromCustVendInvoiceJour(vendPackingSlipJour);
                printoutJournal.JournalType      = journalType;
                printoutJournal.InventLocationId = tmpLocation;
                if (! proforma)
                {
                    printoutJournalPrevious = null;
                    if (journalCreate.parmPreserveReceiptStatement())
                    {
                        //look for previous version of journal
                        select firstonly JournalNum from printoutJournalPrevious
                            where printoutJournalPrevious.SalesPurchId           == vendPackingSlipJour.PurchId       &&
                                  printoutJournalPrevious.DocumentId             == vendPackingSlipJour.PackingSlipId &&
                                  printoutJournalPrevious.DocumentDate           == vendPackingSlipJour.DeliveryDate  &&
                                  printoutJournalPrevious.JournalType            == journalType                       &&
                                  printoutJournalPrevious.InventLocationId       == tmpLocation                       &&
                                  printoutJournalPrevious.VendPackingSlipVersion == VendPackingSlipVersion::findPrevious(vendPackingSlipJour.RecId).RecId;
                    }

                    if (printoutJournalPrevious.JournalNum)
                    {
                        printoutJournal.JournalNum = printoutJournalPrevious.JournalNum;
                    }
                    else
                    {
                        printoutJournal.JournalNum = this.allocateNum(
                            printoutJournal.JournalType,
                            tmpLocation).num();
                    }
                }
                printoutJournal.insert();
            }

            if (printoutJournal)
            {
                if (printoutJournal.OffSessionId != vendPackingSlipJour.OffSessionId_RU)
                {
                    if (printoutJournal.OffSessionId)
                    {
                        OfficialsServ_RU::releaseOffsessionId(printoutJournal.OffSessionId);
                    }
                    printoutJournal.OffSessionId = vendPackingSlipJour.OffSessionId_RU;
                    printoutJournal.update();
                }

                journalList.ins(printoutJournal);

                // for next form execution
                custVendAccount = this.addValueToStr(printoutJournal.CustVendAccount,  custVendAccount);
                salesPurchId    = this.addValueToStr(printoutJournal.SalesPurchId,     salesPurchId);
                documentId      = this.addValueToStr(printoutJournal.DocumentId,       documentId);
                documentDate    = this.addValueToStr(printoutJournal.DocumentDate,     documentDate);
                locationId      = this.addValueToStr(printoutJournal.InventLocationId, locationId);
            }
        }

        ttscommit;

        custVendAccount = this.removeSeparator(custVendAccount);
        salesPurchId    = this.removeSeparator(salesPurchId);
        documentId      = this.removeSeparator(documentId);
        documentDate    = this.removeSeparator(documentDate);
        locationId      = this.removeSeparator(locationId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryDialog</Name>
				<Source><![CDATA[
        public boolean showQueryDialog(boolean _showQueryDialog = showQueryDialog)
    {
        showQueryDialog = _showQueryDialog;

        return showQueryDialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
        public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
        public boolean unpack(container packedClass)
    {
        Version     version = RunBase::getVersion(packedClass);
        container   queryCon;

        switch (version)
        {
            case #CurrentVersion:
                if (vendPackingSlipJour)
                {
                    this.initQuery();
                }
                else
                {
                    [ version, queryCon ] = packedClass;
                    if (SysQuery::isPackedOk(queryCon))
                    {
                        queryRun = new QueryRun(queryCon);
                    }
                    else
                    {
                        this.initQuery();
                    }
                }
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        public static ClassDescription description()
    {
        return "@GLS106985";
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>