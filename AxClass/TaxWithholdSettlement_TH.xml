<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxWithholdSettlement_TH</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class <c>TaxWithholdSettlement_TH</c> prints diffent report by diffent vendor type.
/// </summary>
class TaxWithholdSettlement_TH extends RunBaseBatch implements BatchRetryable
{
    TaxWithholdPeriodId_TH      taxWithholdPeriodRecId;
    TaxWithholdPeriodDate_TH    fromDate;
    TaxWithholdPeriodDate_TH    toDate;
    TransDate                   transDate;

    TaxWithholdCalculate        taxWithholdingPost;

    TaxWithholdTrans            taxWithholdTrans;

    DialogField                 dialogTaxWithholdPeriod;
    DialogField                 dialogFromDate;
    DialogField                 dialogTransDate;
    DialogField                 dialogTaxWithholdingPost;

    boolean                     printTaxWithholdReportDomestic_TH;
    boolean                     printTaxWithholdReportForeign_TH;
    boolean                     printTaxWithholdReportIndividual_TH;

    Voucher                     taxSettlementVoucher_TH;
    LedgerVoucher               ledgerVoucher;
    LedgerVoucherObject         ledgerVoucherObject;
    LedgerVoucherTransObject    ledgerVoucherTransObject;
    NumberSeq                   numberSeq;

    protected AmountMSTSecondary taxWithholdAmountReportingCur;
    protected VendAccount taxAuthorityVendAccount;
    protected LedgerDimensionAccount taxAuthorityVendSummaryLedgerDimension;

    #define.CurrentVersion(4)
    #localMacro.CurrentList
        taxWithholdPeriodRecId,
        fromDate,
        transDate,
        toDate,
        taxWithholdingPost
    #endMacro

    #localMacro.CurrentList_v3
        taxWithholdPeriodRecId,
        fromDate,
        transDate,
        toDate
    #endMacro

    #ISOCountryRegionCodes
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>checkPrintReport</Name>
				<Source><![CDATA[
    private void checkPrintReport()
    {
        printTaxWithholdReportDomestic_TH   = false;
        printTaxWithholdReportForeign_TH    = false;
        printTaxWithholdReportIndividual_TH = false;

        switch (taxWithholdTrans.VendorType_TH)
        {
            case TaxWithholdVendorType_TH::Domestic   :
                printTaxWithholdReportDomestic_TH   = true;
                break;
            case TaxWithholdVendorType_TH::Foreign    :
                printTaxWithholdReportForeign_TH    = true;
                break;
            case TaxWithholdVendorType_TH::Individual :
                printTaxWithholdReportIndividual_TH = true;
                break;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkTaxAuthorityDefaultDimension</Name>
				<Source><![CDATA[
    private void checkTaxAuthorityDefaultDimension()
    {
        if (taxAuthorityVendAccount)
        {
            VendTable vendTable = VendTable::find(taxAuthorityVendAccount);
            if (vendTable.DefaultDimension == 0 && LedgerInterunitBalancer::isBalancingEnabled())
            {
                throw error(strFmt('@Tax_WithholdTax:DimensionMissing', vendTable.AccountNum));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createReportVoucher</Name>
				<Source><![CDATA[
    private void createReportVoucher()
    {
        TaxWithholdReportVoucher_TH     taxWithholdReportVoucher_TH;

        if (!TaxWithholdReportVoucher_TH::findByVoucher(taxSettlementVoucher_TH))
        {
            taxWithholdReportVoucher_TH.TransDate = transDate;
            taxWithholdReportVoucher_TH.Voucher   = taxSettlementVoucher_TH;
            taxWithholdReportVoucher_TH.TaxWithholdFromDate = fromDate;
            taxWithholdReportVoucher_TH.TaxWithholdToDate = toDate;
            taxWithholdReportVoucher_TH.TaxWithholdPeriodHead_TH = taxWithholdPeriodRecId;
            taxWithholdReportVoucher_TH.insert();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineToFromDate</Name>
				<Source><![CDATA[
    private void determineToFromDate()
    {
        TaxWithholdReportPeriod_TH taxWithholdReportPeriod;

        taxWithholdReportPeriod  = TaxWithholdReportPeriod_TH::findByPeriodWithholdDate(taxWithholdPeriodRecId, fromDate);
        fromDate    = taxWithholdReportPeriod.TaxWithholdFromDate;
        toDate      = taxWithholdReportPeriod.TaxWithholdToDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    Object dialog()
    {
        DialogRunbase dialog = new DialogRunbase("@SYS314146", this);
        dialogTaxWithholdPeriod = dialog.addFieldValue(extendedTypeStr(TaxWithholdPeriodId_TH), taxWithholdPeriodRecId);
        dialogFromDate  = dialog.addField(extendedTypeStr(TaxPeriodDate), "@SYS5209", "@SYS12292");
        dialogTransDate =  dialog.addFieldValue(extendedTypeStr(TransDate), DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()), "@SYS67", "@SYS60729");
        dialogTaxWithholdingPost = dialog.addFieldValue(enumStr(NoYes), taxWithholdingPost, "@SYS23285", "@SYS4000255");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findDimension</Name>
				<Source><![CDATA[
    private DimensionDefault findDimension()
    {
        DimensionDefault   dimension;

        if (taxWithholdTrans.CustAccount)
        {
            dimension = CustTrans::find(taxWithholdTrans.CustTransPaymId).DefaultDimension;
        }
        else
        {
            dimension = VendTrans::find(taxWithholdTrans.VendTransPaymId).DefaultDimension;
        }

        return dimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostingAccount</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount findPostingAccount()
    {
        TaxWithholdTable                    taxWithholdTable;
        TaxWithholdLedgerAccountGroup_TH    taxWithholdLedgerAccountGroup_TH;

        taxWithholdTable                 = TaxWithholdTable::find(taxWithholdTrans.TaxWithholdCode);
        taxWithholdLedgerAccountGroup_TH = TaxWithholdLedgerAccountGroup_TH::find(taxWithholdTable.TaxWithholdLedgerAccountGroup_TH);

        return taxWithholdLedgerAccountGroup_TH.TaxWithholdLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPostingAccountOffset</Name>
				<Source><![CDATA[
    private LedgerDimensionDefaultAccount findPostingAccountOffset()
    {
        TaxWithholdTable                    taxWithholdTable;
        TaxWithholdLedgerAccountGroup_TH    taxWithholdLedgerAccountGroup_TH;

        taxWithholdTable                 = TaxWithholdTable::find(taxWithholdTrans.TaxWithholdCode);
        taxWithholdLedgerAccountGroup_TH = TaxWithholdLedgerAccountGroup_TH::find(taxWithholdTable.TaxWithholdLedgerAccountGroup_TH);

        return taxWithholdLedgerAccountGroup_TH.TaxWithholdOffsetLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    boolean getFromDialog()
    {
        taxWithholdPeriodRecId = dialogTaxWithholdPeriod.value();
        fromDate            = dialogFromDate.value();
        transDate           = dialogTransDate.value();
        taxWithholdingPost  = dialogTaxWithholdingPost.value();

        return super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [#CurrentVersion, #CurrentList];// + [super()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFromDate</Name>
				<Source><![CDATA[
    TaxWithholdPeriodDate_TH parmFromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTaxWithholdingPost</Name>
				<Source><![CDATA[
    public NoYes parmTaxWithholdingPost(NoYes   _taxWithholdingPost = taxWithholdingPost)
    {
        taxWithholdingPost = _taxWithholdingPost;

        return taxWithholdingPost;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmToDate</Name>
				<Source><![CDATA[
    TaxWithholdPeriodDate_TH parmToDate()
    {
        return toDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postSettlement</Name>
				<Source><![CDATA[
    private void postSettlement()
    {
        AmountMSTSecondary amountReportingCur = 0;  //wht transactions do not keep track of the amounts in the reporting currency by default
        LedgerDimensionAccount taxWithholdingLedgerDimension =
            LedgerDimensionFacade::serviceCreateLedgerDimension(this.findPostingAccount(), this.findDimension());
        // Create credit transaction:
        if (this.needToPostVendTrans())
        {
            CurrencyExchangeHelper exchRateHelper = CurrencyExchangeHelper::newExchangeDate(
                Ledger::current(),
                transDate); // calculate the amounts in the reporting currency on the transDate
            amountReportingCur = exchRateHelper.calculateTransactionCurrencyToReportingCurrency(taxWithholdTrans.PaymCurrency, taxWithholdTrans.PaymTaxWithholdAmount);
            taxWithholdAmountReportingCur += amountReportingCur;
        }

        ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(
                                            ledgerVoucher.findLedgerVoucherObject(),
                                            LedgerPostingType::TaxWithhold,
                                            taxWithholdingLedgerDimension,
                                            taxWithholdTrans.PaymCurrency,
                                            taxWithholdTrans.PaymTaxWithholdAmount,
                                            taxWithholdTrans.TaxWithholdAmount,
                                            amountReportingCur);
        ledgerVoucher.addTrans(ledgerVoucherTransObject);
    }

]]></Source>
			</Method>
			<Method>
				<Name>printOut</Name>
				<Source><![CDATA[
    private void printOut()
    {
        Args args = new Args();
        args.parmObject(this);
        args.caller(this);

        if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoEG]))
        {
            new MenuFunction(menuitemoutputstr(TaxWithholdReport_EG), MenuItemType::Output).run(args);
        }
        else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoSA]))
        {
            new MenuFunction(menuitemoutputstr(TaxWithholdMonthlyReport_SA), MenuItemType::Output).run(args);
        }
        else
        {
            if (printTaxWithholdReportDomestic_TH)
            {
                if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoGB]))
                {
                    new MenuFunction(menuitemOutputStr(TaxWithholdVendStmtCIS), MenuItemType::Output).run(args);
                }
                else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
                {
                    new MenuFunction(menuitemOutputStr(TaxWithholdReportDomestic_TH), MenuItemType::Output).run(args);
                }
            }

            if (printTaxWithholdReportForeign_TH && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
            {
                new MenuFunction(menuitemOutputStr(TaxWithholdReportForeign_TH), MenuItemType::Output).run(args);
            }

            if (printTaxWithholdReportIndividual_TH && SysCountryRegionCode::isLegalEntityInCountryRegion([#isoTH]))
            {
                new MenuFunction(menuitemOutputStr(TaxWithholdReportIndividual_TH), MenuItemType::Output).run(args);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>procesReports</Name>
				<Source><![CDATA[
    private void procesReports()
    {
        // GWHT telemetry
        int64 groupedWithholdingTaxCount;
        TradeInstrumentationStopwatch stopWatch = TradeInstrumentationStopwatch::newStopwatch();

        while select taxWithholdTrans
            group by VendorType_TH
            where taxWithholdTrans.VendAccount           != ''
                && taxWithholdTrans.TaxWithholdPeriodHead_TH == taxWithholdPeriodRecId
                && taxWithholdTrans.TransDate            >= fromDate
                && taxWithholdTrans.TransDate            <= toDate
        {
            this.checkPrintReport();
            this.printOut();

            groupedWithholdingTaxCount++;
        }

        TaxWithHoldInstrumentationTelemetry::logGWHTTelemetry(
            GlobalizationConstants::FeatureReferenceTAX00038,
            funcName(),
            TaxWithHoldInstrumentationTelemetry::PrintReport,
            enum2Str(SalesPurch::Purch),
            true,
            groupedWithholdingTaxCount,
            stopwatch.elapsedMilliseconds());
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    /// Contains the code that does the actual job of the class.
    /// </summary>
    void run()
    {
        TaxWithholdAmountCur        taxWithholdAmountCur;
        TaxWithholdAmount           taxWithholdAmount;
        TaxWithholdTrans            taxWithholdTransGrouped;

        // GWHT telemetry
        int64 updatedWithholdingTaxCount;
        System.Diagnostics.Stopwatch stopWatch;

        try
        {
            stopWatch = new System.Diagnostics.Stopwatch();

            stopWatch.Start();

            taxAuthorityVendAccount = TaxAuthorityAddress::find(TaxWithholdPeriodHead_TH::find(taxWithholdPeriodRecId).TaxAuthority).AccountNum;;
            this.checkTaxAuthorityDefaultDimension();

            ttsbegin;

            numberSeq               = NumberSeq::newGetVoucher(TaxParameters::numRefTaxReportingVoucher(),false);
            taxSettlementVoucher_TH = numberSeq.voucher();
            ledgerVoucher           = LedgerVoucher::newLedgerPost(DetailSummary::Detail,
                                                                   SysModule::Tax,
                                                                   numberSeq.parmVoucherSequenceCode());
            ledgerVoucherObject     = LedgerVoucherObject::newVoucher(taxSettlementVoucher_TH, transDate);
            ledgerVoucherObject.parmLedgerTransType(LedgerTransType::Settlement);
            ledgerVoucher.addVoucher(ledgerVoucherObject);

            //grouped by currency and withholding tax code
            while select PaymCurrency, TaxWithholdCode from taxWithholdTransGrouped
                group by PaymCurrency, TaxWithholdCode
                where taxWithholdTransGrouped.VendAccount              != ''
                    && taxWithholdTransGrouped.TaxWithholdPeriodHead_TH == taxWithholdPeriodRecId
                    && taxWithholdTransGrouped.TransDate                >= fromDate
                    && taxWithholdTransGrouped.TransDate                <= toDate
                    && taxWithholdTransGrouped.Settled                  == NoYes::No
                    && taxWithholdTransGrouped.Posted                   == NoYes::Yes
            {
                while select forupdate taxWithholdTrans
                where taxWithholdTrans.VendAccount                  != ''
                    && taxWithholdTrans.TaxWithholdPeriodHead_TH    == taxWithholdPeriodRecId
                    && taxWithholdTrans.TransDate                   >= fromDate
                    && taxWithholdTrans.TransDate                   <= toDate
                    && taxWithholdTrans.Settled                     == NoYes::No
                    && taxWithholdTrans.Posted                      == NoYes::Yes
                    && taxWithholdTrans.PaymCurrency                == taxWithholdTransGrouped.PaymCurrency
                    && taxWithholdTrans.TaxWithholdCode             == taxWithholdTransGrouped.TaxWithholdCode
                {
                    this.postSettlement();
                    taxWithholdAmountCur    += taxWithholdTrans.PaymTaxWithholdAmount;
                    taxWithholdAmount       += taxWithholdTrans.TaxWithholdAmount;
                    taxWithholdTrans.Settled = NoYes::Yes;
                    taxWithholdTrans.doUpdate();
                    this.createReportVoucher();

                    updatedWithholdingTaxCount++;
                }
                this.saveAndPost(taxWithholdAmountCur, taxWithholdAmount, taxWithholdTransGrouped.TaxWithholdCode, taxWithholdTransGrouped.PaymCurrency);
                taxWithholdAmountCur = 0;
                taxWithholdAmount    = 0;
                taxWithholdAmountReportingCur = 0;
            }
            ledgerVoucher.end();
            ttscommit;
        }
        catch(Exception::Error)
        {
            stopwatch.stop();

            TaxWithHoldInstrumentationTelemetry::logGWHTTelemetry(
                GlobalizationConstants::FeatureReferenceTAX00038,
                funcName(),
                TaxWithHoldInstrumentationTelemetry::ReportUpdateWHTTransactions,
                enum2Str(SalesPurch::Purch),
                false,
                0,
                0);

            throw Exception::Error;
        }
        finally
        {
            stopwatch.stop();

            TaxWithHoldInstrumentationTelemetry::logGWHTTelemetry(
                GlobalizationConstants::FeatureReferenceTAX00038,
                funcName(),
                TaxWithHoldInstrumentationTelemetry::ReportUpdateWHTTransactions,
                enum2Str(SalesPurch::Purch),
                true,
                updatedWithholdingTaxCount,
                stopwatch.elapsedMilliseconds);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveAndPost</Name>
				<Source><![CDATA[
    private void saveAndPost(TaxWithholdAmountCur _amountCur,
                             TaxWithholdAmount    _amount,
                             TaxWithholdCode      _taxWithholdCode,
                             CurrencyCode         _currencyCode)
    {
        if (this.needToPostVendTrans())
        {
            this.postVendTrans(-_amountCur, -_amount, _currencyCode);
        }
        else
        {
            TaxWithholdTable taxWithholdTable = TaxWithholdTable::find(_taxWithholdCode);
            TaxWithholdLedgerAccountGroup_TH taxWithholdLedgerAccountGroup_TH = TaxWithholdLedgerAccountGroup_TH::find(taxWithholdTable.TaxWithholdLedgerAccountGroup_TH);
            LedgerDimensionAccount settlementLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(taxWithholdLedgerAccountGroup_TH.TaxWithhodlSettlementLedgerDimension);
            if (!settlementLedgerDimension)
            {
                settlementLedgerDimension = this.getVendSummaryLedgerDimension();
            }

            ledgerVoucherTransObject = LedgerVoucherTransObject::newBasicDefault(ledgerVoucher.findLedgerVoucherObject(),
                                            LedgerPostingType::TaxWithhold,
                                            settlementLedgerDimension,
                                            _currencyCode,
                                            -_amountCur,
                                            -_amount,
                                            0); //the wht transactions do not record the amounts in the reporting currency

            ledgerVoucher.addTrans(ledgerVoucherTransObject);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>needToPostVendTrans</Name>
				<Source><![CDATA[
    private boolean needToPostVendTrans()
    {
        return taxAuthorityVendAccount != '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getVendSummaryLedgerDimension</Name>
				<Source><![CDATA[
    private LedgerDimensionAccount getVendSummaryLedgerDimension()
    {
        if (!taxAuthorityVendSummaryLedgerDimension)
        {
            LedgerDimensionAccount ledgerDimensionAccount = VendLedgerAccounts::summaryLedgerDimension(taxAuthorityVendAccount);
            taxAuthorityVendSummaryLedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(ledgerDimensionAccount, VendTable::find(taxAuthorityVendAccount).DefaultDimension);
        }
        return taxAuthorityVendSummaryLedgerDimension;
    }

]]></Source>
			</Method>
			<Method>
				<Name>postVendTrans</Name>
				<Source><![CDATA[
    private VendTrans postVendTrans(
        TaxWithholdAmountCur _amountCur,
        TaxWithholdAmount _amount,
        CurrencyCode _currencyCode)
    {
        VendTrans ret;
        VendTable vendTable = VendTable::find(taxAuthorityVendAccount);
        VendVoucher vendVoucher  = CustVendVoucher::construct(
            SysModule::Vend,
            vendTable.AccountNum,
            _amountCur,
            _currencyCode,
            LedgerTransTxt::TaxWithholdReport,
            vendTable.DefaultDimension,
            VendParameters::find().PostingProfile,
            LedgerPostingType::VendBalance,
            vendTable.PaymTermId,
            SettlementType::None,
            HcmWorker::userId2Worker(curUserId()),
            NoYes::Yes,
            '',
            dateNull(),
            0,
            TaxWithholdPeriodHead_TH::taxReportDate(taxWithholdPeriodRecId, toDate),
            ret);

        vendVoucher.parmTransTxt("@SYS314146");
        vendVoucher.parmPaymMode(vendTable.PaymMode);
        vendVoucher.parmPaymSpec(vendTable.PaymSpec);
        vendVoucher.parmPaymId(vendTable.PaymId);
        vendVoucher.parmAmountMST(_amount);
        vendVoucher.parmReportingCurrencyAmount(-taxWithholdAmountReportingCur);

        vendVoucher.post(ledgerVoucher, ret, NoYes::No, UnknownNoYes::Unknown);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        boolean     ret;
        Version version = RunBase::getVersion(packedClass);

        switch (version)
        {
            case #CurrentVersion :
                [version, #CurrentList] = packedClass;
                ret = true;
                break;

            case 3:
                [version, #CurrentList_v3] = packedClass;
                ret = true;
                break;

            default :
                ret = false;
                break;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the instance of the <c>TaxWithholdSettlement</c> class.
    /// </summary>
    /// <param name="calledFrom">
    /// The called from object.
    /// </param>
    /// <returns>
    /// Returns true if the validation succeed.
    /// </returns>
    public boolean validate(Object calledFrom = null)
    {
        boolean ok = true;
        TaxWithholdReportPeriod_TH          taxWithholdReportPeriod_TH;
        TaxWithholdReportPeriod_TH          taxWithholdSettlementPeriod_TH;
        TaxWithholdTable                    taxWithHoldTable;
        TaxWithholdLedgerAccountGroup_TH    taxWithholdLedgerAccountGroup_TH;
        taxWithholdReportPeriod_TH = TaxWithholdReportPeriod_TH::findByPeriodWithholdDate(taxWithholdPeriodRecId, transDate);
        taxWithholdSettlementPeriod_TH = TaxWithholdReportPeriod_TH::findByPeriodWithholdDate(taxWithholdPeriodRecId, fromDate);

        select TaxWithholdPeriodHead_TH, TaxWithholdLedgerAccountGroup_TH from taxWithHoldTable
        where taxWithHoldTable.TaxWithholdPeriodHead_TH == taxWithholdPeriodRecId;

        taxWithholdLedgerAccountGroup_TH = TaxWithholdLedgerAccountGroup_TH::find(taxWithHoldTable.TaxWithholdLedgerAccountGroup_TH);

        if (!taxWithholdReportPeriod_TH || !taxWithholdSettlementPeriod_TH)
        {
            ok = checkFailed("@SYS4000256");
        }

        if (taxWithholdReportPeriod_TH
            && !taxWithholdLedgerAccountGroup_TH.TaxWithhodlSettlementLedgerDimension
            && !TaxAuthorityAddress::find(TaxWithholdPeriodHead_TH::find(taxWithholdPeriodRecId).TaxAuthority).AccountNum)
        {
            ok = checkFailed("@Tax_WithholdTax:SpecifyVendorAccountForTaxAuthorityOrSettlementAccountInWHTposting");
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    static public ClassDescription description()
    {
        return "@SYS316731";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    static void  main(Args  _args)
    {
        TaxWithholdSettlement_TH    taxWithholdSettlement;
        XppILExecutePermission      xppILExecutePermission;

        taxWithholdSettlement = new TaxWithholdSettlement_TH();

        if (taxWithholdSettlement.prompt())
        {
            if (taxWithholdSettlement.parmTaxWithholdingPost())
            {
                // Determine the from and to dates based on the posting periods.
                taxWithholdSettlement.determineToFromDate();

                TaxWithholdSettlement_TH::runIL(taxWithholdSettlement.pack());
            }
            else
            {
                taxWithholdSettlement.determineToFromDate();
            }

            taxWithholdSettlement.procesReports();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runIL</Name>
				<Source><![CDATA[
    public static container runIL(container _pack)
    {
        TaxWithholdSettlement_TH settlement = new TaxWithholdSettlement_TH();
        settlement.unpack(_pack);
        settlement.runOperation();
        return conNull();
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Describes whether the class is designed for execution in a new session.
    /// </summary>
    /// <returns>
    /// true if the class is designed for execution the operation in a new session; otherwise, false.
    /// </returns>
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxWithholdPeriodRecId</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the taxWithholdPeriodRecId variable.
    /// </summary>
    /// <returns>
    ///    The taxWithholdPeriodRecId variable.
    /// </returns>
    public TaxWithholdPeriodId_TH taxWithholdPeriodRecId()
    {
        return taxWithholdPeriodRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fromDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Displays the variable dateFrom
    /// </summary>
    /// <returns>
    ///    The value of the variable named dateFrom.
    /// </returns>
    public TaxWithholdPeriodDate_TH fromDate()
    {
        return fromDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isRetryable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the batch task should be retried in case of transient errors.
    /// </summary>
    /// <returns>
    /// Always returns false.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable() 
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>