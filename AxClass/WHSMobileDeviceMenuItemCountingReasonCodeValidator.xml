<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSMobileDeviceMenuItemCountingReasonCodeValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSMobileDeviceMenuItemCountingReasonCodeValidator</c> class is used by mobile device menu items
/// related to counting to retrieve information about the counting reason code.
/// </summary>
public final class WHSMobileDeviceMenuItemCountingReasonCodeValidator
{
    private InventCountingReasonCodePolicySearchParameters parameters;
    private InventCountingReasonCodePolicy inventCountingReasonCodePolicy;
    private boolean isCountingReasonCodeMandatory;
    private WhsrfPassthrough pass;
    private WHSMenuItemName menuItem;
    private WHSWorkExecuteMode mode;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParameters</Name>
				<Source><![CDATA[
    public static WHSMobileDeviceMenuItemCountingReasonCodeValidator newFromParameters(
        WhsrfPassthrough _pass,
        InventDimId _inventDimId,
        WHSWorkExecuteMode _mode,
        ItemId _itemId = '')
    {
        WHSMobileDeviceMenuItemCountingReasonCodeValidator validator = new WHSMobileDeviceMenuItemCountingReasonCodeValidator();
        ItemId itemId = _itemId? _itemId : _pass.parmItemId();

        validator.parameters = InventCountingReasonCodePolicySearchParameters::newfromItemInventDim(InventTable::find(itemId), InventDim::find(_inventDimId));
        validator.inventCountingReasonCodePolicy = InventCountingReasonCodePolicySearch::defaultSearch(validator.parameters);
        validator.isCountingReasonCodeMandatory = validator.inventCountingReasonCodePolicy.InventCountingReasonCodeType == InventCountingReasonCodeType::Mandatory;
        validator.pass = _pass;
        validator.menuItem = _pass.parmMenuItem();
        validator.mode = _mode;
        
        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateCountingReasonCode</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method will check if the reason code is mandatory.
    /// </summary>
    public void validateCountingReasonCode()
    {
        if (isCountingReasonCodeMandatory && !pass.hasValue(WHSWorkExecuteDisplayCycleCountControls::CountingReasonCode))
        {
            if (((mode == WHSWorkExecuteMode::AdjustmentIn || mode == WHSWorkExecuteMode::AdjustmentOut) 
                    && !WHSRFMenuItemTable::find(menuItem).EditCountingReasonCode)
                || (WHSRFMenuItemCycleCount::exist(menuItem) && !WHSRFMenuItemCycleCount::find(menuItem).EditReasonCode))
            {
                throw error("@WAX:ErrorMessageToDefaultCountingReasonCode");
            }
            else
            {
                throw error(strFmt("@SYS84753", "@SCM:InventCountingReasonCode"));
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>