<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PaymCalendarSourceVendor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>PaymCalendarSourceVendor</c> class provides an interface that is used to find payment
/// calendars when the source is a vendor table.
/// </summary>
public class PaymCalendarSourceVendor implements PaymCalendarIDerivationSource, PaymCalendarIBankAddress
{
    private VendTable vendTable;
    private PaymTermId paymTerm;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getBankPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address that is associated to a bank account.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getBankPostalAddress()
    {
        VendBankAccount vendBankAccount;
        LogisticsPostalAddress logisticsPostalAddress;

        vendBankAccount = VendBankAccount::find(vendTable.AccountNum, vendTable.BankAccount);
        logisticsPostalAddress = LogisticsLocationEntity::location2PostalAddress(vendBankAccount.Location);

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPrimaryPostalAddress</Name>
				<Source><![CDATA[
    /// <summary>
    /// Gets the postal address associated to a third-party entity.
    /// </summary>
    /// <returns>
    /// The <c>LogisticsPostalAddress</c> record that represents the postal address.
    /// </returns>
    public LogisticsPostalAddress getPrimaryPostalAddress()
    {
        LogisticsPostalAddress logisticsPostalAddress;

        logisticsPostalAddress = vendTable.postalAddress();

        return logisticsPostalAddress;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initialize</Name>
				<Source><![CDATA[
    private void initialize(VendTable _vendTable, PaymTermId _paymTerm)
    {
        vendTable = _vendTable;
        paymTerm = _paymTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmModuleType</Name>
				<Source><![CDATA[
    public PaymCalendarModuleType parmModuleType()
    {
        return PaymCalendarModuleType::Vendor;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymMode</Name>
				<Source><![CDATA[
    public PaymMode parmPaymMode()
    {
        return vendTable.PaymMode;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermDataAreaId</Name>
				<Source><![CDATA[
    public DataAreaId parmPaymTermDataAreaId()
    {
        return vendTable.dataAreaId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmPaymTermId</Name>
				<Source><![CDATA[
    public PaymTermId parmPaymTermId()
    {
        return paymTerm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>adjustDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Adjusts the due date so that it falls on a business day per specified calendar source.
    /// </summary>
    /// <param name="_dueDate">
    /// The original due date.
    /// </param>
    /// <param name="_updatePolicy">
    /// A value that specifies the search direction when seeking the next valid business day.
    /// </param>
    /// <param name="_vendTable">
    /// A reference to a populated <c>VendTable</c> record.
    /// </param>
    /// <param name="_paymTerm">
    /// The payment term that is used.
    /// </param>
    /// <returns>
    /// The adjusted due date.
    /// </returns>
    public static DueDate adjustDate(DueDate _dueDate, PaymentDueDateUpdatePolicy _updatePolicy, VendTable _vendTable, PaymTermId _paymTerm)
    {
        PaymCalendarProcessor paymCalendarProcessor;
        PaymCalendarSourceVendor calendarSource;
        DueDate dueDate;

        paymCalendarProcessor = PaymCalendarProcessor::construct();
        calendarSource = PaymCalendarSourceVendor::newCalendarSource(_vendTable, _paymTerm);

        dueDate = paymCalendarProcessor.adjustDate(_dueDate, _updatePolicy, calendarSource);

        return dueDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceVendor</c> class.
    /// </summary>
    /// <returns>
    /// A new instance of the <c>PaymCalendarSourceVendor</c> class.
    /// </returns>
    private static PaymCalendarSourceVendor construct()
    {
        return new PaymCalendarSourceVendor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newCalendarSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves an instance of the <c>PaymCalendarSourceVendor</c> class.
    /// </summary>
    /// <param name="_vendTable">
    /// A reference to a populated <c>VendTable</c> record.
    /// </param>
    /// <param name="_paymTerm">
    /// The payment term that is used.
    /// </param>
    /// <returns>
    /// A new instance of the <c>PaymCalendarSourceVendor</c> class.
    /// </returns>
    public static PaymCalendarSourceVendor newCalendarSource(VendTable _vendTable, PaymTermId _paymTerm)
    {
        PaymCalendarSourceVendor paymCalendarSourceVendor;

        paymCalendarSourceVendor = PaymCalendarSourceVendor::construct();
        paymCalendarSourceVendor.initialize(_vendTable, _paymTerm);

        return paymCalendarSourceVendor;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>