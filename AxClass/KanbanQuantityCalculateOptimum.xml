<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanQuantityCalculateOptimum</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanQuantityCalculateOptimum</c> class updates a <c>KanbanQuantityCalculationProposal</c>
///    record with new proposed values.
/// </summary>
/// <remarks>
///    The <c>KanbanQuantityCalculationProposal</c> record must be selected for update before this class
///    is called.
/// </remarks>
public class KanbanQuantityCalculateOptimum
{
    // input variables
    KanbanQuantityCalculationProposal   kanbanQuantityCalculationProposal;

    // cached variables
    ItemId                              itemId;
    InventDimId                         covInventDimId;
    UnitOfMeasureDecimalPrecision       itemDecimalPrecision;
    real                                replenishmentLeadTimeInDays;
    LeanRuleData                        leanRuleData;
    KanbanQuantityPolicy                kanbanQuantityPolicy;
    KanbanQuantityPolicySafetyStock     kanbanQuantityPolicySafetyStock;
    KanbanRuleFixed                     kanbanRuleFixed;
    KanbanQuantityCalculation           kanbanQuantityCalculation;
    PlanActivityResourceRequirement     lastProcessResourceRequirement;

    // result variables
    Map                                 mapAllDemand;                   // [date; demand] - only filled if safety stock is calculated
    real                                sumOfExpectedDemand;
    real                                sumOfFulfilledDemand;
    Days                                numOfOpenDaysExpectedDemand;
    Days                                numOfOpenDaysFulfilledDemand;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>averageDemandPerDay</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the average demand per day.
    /// </summary>
    /// <returns>
    /// A real value that represents the average demand per day.
    /// </returns>
    protected InventQty averageDemandPerDay()
    {
        real    averageDemandPerDay;

        Days numOfOpenDays = numOfOpenDaysExpectedDemand + numOfOpenDaysFulfilledDemand;

        if (numOfOpenDays)
        {
            averageDemandPerDay = (sumOfExpectedDemand+sumOfFulfilledDemand)/numOfOpenDays;
        }

        return averageDemandPerDay;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateExpectedDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the expected demand per day.
    /// </summary>
    protected void calculateExpectedDemand()
    {
        ReqTrans        reqTrans;

        RefRecId planVersionRecId =
                                    kanbanQuantityPolicy.reqPlan().findActiveVersion().RecId;

        if (!planVersionRecId)
        {
            return;
        }

        TransDate fromDate = this.utcDateTimeToCompanyDate(kanbanQuantityCalculation.ExpectedDemandPeriodStart);
        TransDate toDate = this.utcDateTimeToCompanyDate(kanbanQuantityCalculation.ExpectedDemandPeriodEnd);

        // find open days
        numOfOpenDaysExpectedDemand = this.findOpenDates(fromDate,toDate);

        if (numOfOpenDaysExpectedDemand)
        {
            if (this.mustCalculateSafetyStock())
            {
                while select sum(Qty) from reqTrans
                    group by ReqDate
                    where  reqTrans.PlanVersion     == planVersionRecId
                        && reqTrans.ItemId          == itemId
                        && reqTrans.CovInventDimId  == covInventDimId
                        && reqTrans.Direction       == InventDirection::Issue
                        && reqTrans.ReqDate         >= fromDate
                        && reqTrans.ReqDate         <= toDate
                {
                    this.saveDemandOnOpenDay(reqTrans.ReqDate,abs(reqTrans.Qty),fromDate,toDate);
                    sumOfExpectedDemand += -reqTrans.Qty;
                }
            }
            else
            {
                select sum(Qty) from reqTrans
                    where  reqTrans.PlanVersion     == planVersionRecId
                        && reqTrans.ItemId          == itemId
                        && reqTrans.CovInventDimId  == covInventDimId
                        && reqTrans.Direction       == InventDirection::Issue
                        && reqTrans.ReqDate         >= fromDate
                        && reqTrans.ReqDate         <= toDate;

                sumOfExpectedDemand = -reqTrans.Qty;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateFulfilledDemand</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the fulfilled demand per day.
    /// </summary>
    protected void calculateFulfilledDemand()
    {
        Kanban          kanban;

        TransDate fromDate = this.utcDateTimeToCompanyDate(kanbanQuantityCalculation.FulfilledDemandPeriodStart);
        TransDate toDate = this.utcDateTimeToCompanyDate(kanbanQuantityCalculation.FulfilledDemandPeriodEnd);

        numOfOpenDaysFulfilledDemand = this.findOpenDates(fromDate,toDate);

        if (numOfOpenDaysFulfilledDemand)
        {
            if (this.mustCalculateSafetyStock())
            {
                while select QuantityReceived, EmptiedDateTime from kanban
                    where   kanban.KanbanRule       == kanbanRuleFixed.ParentRecId
                        &&  kanban.EmptiedDateTime  >= kanbanQuantityCalculation.FulfilledDemandPeriodStart
                        &&  kanban.EmptiedDateTime  <= kanbanQuantityCalculation.FulfilledDemandPeriodEnd
                {
                    this.saveDemandOnOpenDay(this.utcDateTimeToCompanyDate(kanban.EmptiedDateTime),kanban.QuantityReceived,fromDate,toDate);
                    sumOfFulfilledDemand+= kanban.QuantityReceived;
                }
            }
            else
            {
                select sum(QuantityReceived) from kanban
                    where   kanban.KanbanRule       == kanbanRuleFixed.ParentRecId
                        &&  kanban.EmptiedDateTime  >= kanbanQuantityCalculation.FulfilledDemandPeriodStart
                        &&  kanban.EmptiedDateTime  <= kanbanQuantityCalculation.FulfilledDemandPeriodEnd;

                sumOfFulfilledDemand = kanban.QuantityReceived;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateStandardDeviation</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the population standard deviation per day of fulfilled demand and expected demand.
    /// </summary>
    /// <param name="_averageDemandPerDay">
    ///    A real value that represents the average demand per day.
    /// </param>
    /// <returns>
    ///    A real value that represents the standard deviation per day of demand.
    /// </returns>
    protected InventQty calculateStandardDeviation(InventQty     _averageDemandPerDay)
    {
        real            squaredDeviationSum;
        InventQty       stdevp;

        #define.squared(2)

        if (mapAllDemand.elements())
        {
            MapEnumerator me = mapAllDemand.getEnumerator();

            while (me.moveNext())
            {
                squaredDeviationSum += power(abs(_averageDemandPerDay - me.currentValue()),#squared);
            }
            // calculate the  population standard deviation (= the function stdevp in excel)
            stdevp = sqrt(squaredDeviationSum/mapAllDemand.elements());
        }

        return stdevp;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calendar</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the calendar related to the kanban rule for a specified date.
    /// </summary>
    /// <param name="_transDate">
    ///    A date value that represents the point in time to find the calendar.
    /// </param>
    /// <returns>
    ///    A container holding a string value and a date value. The string value represents a calendar ID. The
    ///    date value determines when the calendar expires.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    If a calendar cannot be found for the related resource group.
    /// </exception>
    /// <exception cref="M:Exception::Error">
    ///    If a calendar cannot be found for the related warehouse.
    /// </exception>
    protected container calendar(TransDate _transDate)
    {
        CalendarId                          calendarId;
        TransDate                           calendarValidTo;

        switch (leanRuleData.leanKanbanType())
        {
            case LeanKanbanType::Manufacturing:
                if (! lastProcessResourceRequirement)
                {
                    PlanActivity lastProcessActivity = leanRuleData.kanbanFlow().lastPlanActivityType(PlanActivityType::Process);
                    lastProcessResourceRequirement = lastProcessActivity.planActivityResourceRequirement();
                }

                if (lastProcessResourceRequirement)
                {
                    WrkCtrResourceCalendar wrkCtrResourceCalendar = WrkCtrResourceCalendar::findActiveForResourceGroup(lastProcessResourceRequirement.WrkCtrResourceGroup,_transDate);
                    calendarId = wrkCtrResourceCalendar.CalendarId;
                    calendarValidTo = wrkCtrResourceCalendar.ValidTo;
                    if (! calendarId)
                    {
                        wrkCtrResourceCalendar = WrkCtrResourceCalendar::findNextActiveForResourceGroup(lastProcessResourceRequirement.WrkCtrResourceGroup,_transDate);
                        // a default calendar will be valid forward to the next calendar definition exists
                        calendarValidTo             = wrkCtrResourceCalendar.ValidFrom ? wrkCtrResourceCalendar.ValidFrom-1 : dateNull();
                    }
                }
                break;

            case LeanKanbanType::Withdrawal:
                PlanActivityLocation planActivityLocation = leanRuleData.kanbanFlow().lastPlanActivity().receiptLocation();
                calendarId = planActivityLocation.inventLocation().ReqCalendarId;

                break;
        }

        if (! calendarId)
        {
            ReqSetupDim reqSetupDim = ReqSetupDim::newInventTable(InventTable::find(itemId),covInventDimId);
            calendarId = reqSetupDim.reqCalendarId();

            if (! calendarId)
            {
                throw error(strfmt("@SYS318738",reqSetupDim.reqGroupId()));
            }
        }

        calendarValidTo = calendarValidTo ? calendarValidTo : maxdate();

        return [calendarId, calendarValidTo];
    }

]]></Source>
			</Method>
			<Method>
				<Name>decRound</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates a rounded value.
    /// </summary>
    /// <param name="_value">
    /// A real value that represents an unrounded value.
    /// </param>
    /// <returns>
    /// A real value that is rounded according to the decimal precision setup for the item.
    /// </returns>
    protected real decRound(real _value)
    {
        return decround(_value,itemDecimalPrecision);
    }

]]></Source>
			</Method>
			<Method>
				<Name>doCalc</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates fulfilled and expected demand.
    /// </summary>
    protected void doCalc()
    {
        this.calculateExpectedDemand();
        this.calculateFulfilledDemand();
    }

]]></Source>
			</Method>
			<Method>
				<Name>findOpenDates</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines the number of open days between the specified dates.
    /// </summary>
    /// <param name="_fromDate">
    ///    A date value that represents the period start date.
    /// </param>
    /// <param name="_toDate">
    ///    A date value that represents the period end date.
    /// </param>
    /// <returns>
    ///    An integer value that represents the number of open days.
    /// </returns>
    protected Days findOpenDates(
        TransDate   _fromDate,
        TransDate   _toDate)
    {
        CalendarId          calendarId;
        TransDate           calendarValidTo;

        TransDate           loopDate;

        Days                numOfOpenDays;

        WorkCalendarSched workCalendarSched = new WorkCalendarSched(true);

        for (loopDate = _fromDate; loopDate <= _toDate; loopDate++)
        {
            if ( ! calendarId
                || calendarValidTo < loopDate)
            {
                [calendarId, calendarValidTo] = this.calendar(loopDate);
            }

            if (workCalendarSched.isDateOpen(calendarId,loopDate))
            {
                if (mapAllDemand)
                {
                    mapAllDemand.insert(loopDate,0);
                }
                numOfOpenDays++;
            }
        }

        return numOfOpenDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes internal variables.
    /// </summary>
    /// <returns>
    /// true if internal variables could be initialized; otherwise, false.
    /// </returns>
    protected boolean init()
    {
        boolean     ret = true;

        kanbanRuleFixed = KanbanRuleFixed::find(kanbanQuantityCalculationProposal.KanbanRuleFixed);

        if (!kanbanRuleFixed)
        {
            ret = checkFailed("@SYS309574");
        }

        if (ret)
        {
            leanRuleData = kanbanRuleFixed.ruleData();
        }

        if (ret && !leanRuleData)
        {
            ret = checkFailed(strfmt("@SYS22828",funcname()));
        }

        if (ret)
        {
            itemId                          = leanRuleData.parmLeanCoverage().ItemId;
            covInventDimId                  = leanRuleData.parmLeanCoverage().InventDimId;
            itemDecimalPrecision            = UnitOfMeasure::findBySymbol(InventTableModule::find(itemId,ModuleInventPurchSales::Invent).UnitId).DecimalPrecision;

            kanbanQuantityCalculation       = KanbanQuantityCalculation::find(kanbanQuantityCalculationProposal.KanbanQuantityCalculation);
            kanbanQuantityPolicy            = KanbanQuantityPolicy::find(kanbanQuantityCalculation.KanbanQuantityPolicy);
            kanbanQuantityPolicySafetyStock = KanbanQuantityPolicySafetyStock::findKanbanQuantityPolicy(kanbanQuantityPolicy.RecId);

            if (this.mustCalculateSafetyStock())
            {
                // initialize the below map in order to save demand per open day which allows us to calculate standard deviation for demand per day
                mapAllDemand   = new Map(Types::Date,Types::Real);
            }

            if (!itemId)
            {
                ret = checkFailed("@SYS59363");
            }

            if (!kanbanQuantityCalculation)
            {
                ret = checkFailed(strfmt("@SYS96267",tablepname(KanbanQuantityCalculation)));
            }

            if (!kanbanQuantityPolicy)
            {
                ret = checkFailed(strfmt("@SYS96267",tablepname(KanbanQuantityPolicy)));
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>mustCalculateSafetyStock</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether safety stock must be calculated.
    /// </summary>
    /// <returns>
    ///    true if safety stock must be calculated; otherwise, false.
    /// </returns>
    protected boolean mustCalculateSafetyStock()
    {
        if (  !kanbanQuantityPolicySafetyStock.RecId
           || kanbanQuantityPolicySafetyStock.ServiceLevel == ReqMinServiceLevel::SL50
           || !this.replenishmentLeadTimeInDays())
        {
            return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmKanbanQuantityCalculationProposal</Name>
				<Source><![CDATA[
    public KanbanQuantityCalculationProposal parmKanbanQuantityCalculationProposal(KanbanQuantityCalculationProposal _kanbanQuantityCalculationProposal = kanbanQuantityCalculationProposal)
    {
        kanbanQuantityCalculationProposal = _kanbanQuantityCalculationProposal;

        return kanbanQuantityCalculationProposal;
    }

]]></Source>
			</Method>
			<Method>
				<Name>replenishmentLeadTimeInDays</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the kanban replenishment time in days with two decimals.
    /// </summary>
    /// <returns>
    ///    A real value that represents the replenishment time in days.
    /// </returns>
    /// <exception cref="M:Exception::Error">
    ///    A required unit of measure is not set up.
    /// </exception>
    protected real replenishmentLeadTimeInDays()
    {
        #define.decimals(2)

        if (   !replenishmentLeadTimeInDays
            && kanbanRuleFixed.ReplenishmentLeadTime)
        {
            if (!kanbanRuleFixed.ReplenishmentTimeUnitOfMeasure)
            {
                throw error(strfmt("@SYS327435",kanbanRuleFixed.ruleData().parmKanbanRule().RuleId));
            }

            replenishmentLeadTimeInDays = decround(ProdTimeUnitOfMeasure::convertValueToTimeUnit(kanbanRuleFixed.ReplenishmentTimeUnitOfMeasure,
                                                                                                 kanbanRuleFixed.ReplenishmentLeadTime,
                                                                                                 ProdTimeUnitType::Days), #decimals);
        }

        return replenishmentLeadTimeInDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Implements the main logic for updating the <c>KanbanQuantityCalculationProposal</c> record.
    /// </summary>
    /// <exception cref="M:Exception::Error">
    ///    If related setup is missing, is wrong or the specified <c>KanbanQuantityCalculationProposal</c>
    ///    record does not allow for update.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflictNotRecovered">
    ///    An update conflict occurred and was not recovered.
    /// </exception>
    /// <exception cref="M:Exception::UpdateConflict">
    ///    An update conflict occurred.
    /// </exception>
    public void run()
    {
        #OCCRetryCount

        try
        {
            ttsbegin;

            if (   !this.init()
                || !this.validate())
            {
                throw error("@SYS18447");
            }

            this.updateKanbanQuantityCalculationProposal();

            ttscommit;
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
        catch (Exception::UpdateConflict)
        {
            if (appl.ttsLevel() == 0)
            {
                if (xSession::currentRetryCount() >= #RetryNum)
                {
                    throw Exception::UpdateConflictNotRecovered;
                }
                else
                {
                    retry;
                }
            }
            else
            {
                throw Exception::UpdateConflict;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>safetyStock</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates the safety stock based on fulfilled and expected demand.
    /// </summary>
    /// <returns>
    /// A real value that represents a safety stock.
    /// </returns>
    protected InventQty safetyStock()
    {
        if (!this.mustCalculateSafetyStock())
        {
            return 0;
        }

        // find average demand per day of all demand (fulfilled and expected)
        real averageDemandPerDay = this.averageDemandPerDay();

        // calculate the standard deviation for all demand (fulfilled and expected)
        real sigmaDemandPerDay = this.calculateStandardDeviation(averageDemandPerDay);

        return this.serviceLevelFactor() * sigmaDemandPerDay * sqrt(this.replenishmentLeadTimeInDays());
    }

]]></Source>
			</Method>
			<Method>
				<Name>saveDemandOnOpenDay</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Stores demand in a <c>map</c> on an open day.
    /// </summary>
    /// <param name="_transDate">
    ///    A date value for when the demand was recorded.
    /// </param>
    /// <param name="_demand">
    ///    A real value that represents a demand in inventory unit.
    /// </param>
    /// <param name="_periodStartDate">
    ///    A date value that represents the start date of a period in which demand must add on an open day.
    /// </param>
    /// <param name="_periodEndDate">
    ///    A date value that represents the end date of a period in which demand must add on an open day.
    /// </param>
    protected void saveDemandOnOpenDay(
        TransDate   _transDate,
        real        _demand,
        TransDate   _periodStartDate,
        TransDate   _periodEndDate)
    {
        TransDate demandDate = _transDate;

        // try to place demand on previous open day
        while (    !mapAllDemand.exists(demandDate)
                && demandDate > _periodStartDate)
        {
            demandDate--;
        }

        if (! mapAllDemand.exists(demandDate))
        {
            // try to place demand on next open day
            demandDate = _transDate+1;

            while (    !mapAllDemand.exists(demandDate)
                    && demandDate < _periodEndDate)
            {
                demandDate++;
            }
        }

        if (mapAllDemand.exists(demandDate))
        {
            real demand = mapAllDemand.lookup(demandDate) + _demand;
            mapAllDemand.insert(demandDate,demand);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>serviceLevelFactor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the service level factor used to calculate safety stock.
    /// </summary>
    /// <returns>
    /// A real value that represents a service level factor.
    /// </returns>
    protected real serviceLevelFactor()
    {
        return ReqItemJournalUpdate::serviceLevel2ServiceFactor(kanbanQuantityPolicySafetyStock.ServiceLevel);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateKanbanQuantityCalculationProposal</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the <c>KanbanQuantityCalculationProposal</c> record with calculated values.
    /// </summary>
    protected void updateKanbanQuantityCalculationProposal()
    {
        #define.roundingUnit(1)

        this.doCalc();

        kanbanQuantityCalculationProposal.ExpectedDemandPerDay          = this.decRound(numOfOpenDaysExpectedDemand > 0 ? sumOfExpectedDemand/numOfOpenDaysExpectedDemand : 0);
        kanbanQuantityCalculationProposal.FulfilledDemandPerDay         = this.decRound(numOfOpenDaysFulfilledDemand > 0 ? sumOfFulfilledDemand/numOfOpenDaysFulfilledDemand : 0);
        kanbanQuantityCalculationProposal.SafetyStock                   = this.decRound(this.safetyStock());
        kanbanQuantityCalculationProposal.AverageDemandDuringLeadTime   = this.decRound(this.averageDemandPerDay() * this.replenishmentLeadTimeInDays());
        kanbanQuantityCalculationProposal.KanbanQuantityProposal        = real2int(roundUp(kanbanQuantityCalculationProposal.kanbanQuantityCalculated(kanbanQuantityPolicy),#roundingUnit));

        kanbanQuantityCalculationProposal.update();
    }

]]></Source>
			</Method>
			<Method>
				<Name>utcDateTimeToCompanyDate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Converts a Universal Time Coordinate (UTC) date time value to a date in the company time zone.
    /// </summary>
    /// <param name="_dateTime">
    ///    A date time value that represents a UTC date time.
    /// </param>
    /// <returns>
    ///    A date in the company time zone.
    /// </returns>
    protected TransDate utcDateTimeToCompanyDate(utcdatetime _dateTime)
    {
        return DateTimeUtil::date(DateTimeUtil::applyTimeZoneOffset(_dateTime,DateTimeUtil::getCompanyTimeZone()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates whether the <c>KanbanQuantityCalculationProposal</c> record can be updated.
    /// </summary>
    /// <returns>
    ///    true if the <c>KanbanQuantityCalculationProposal</c> record is valid and can be updated; otherwise,
    ///    false.
    /// </returns>
    protected boolean validate()
    {
        return (kanbanQuantityCalculationProposal.selectForUpdate());
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanQuantityCalculateOptimum</c> class.
    /// </summary>
    /// <returns>
    /// A <c>KanbanQuantityCalculateOptimum</c> object.
    /// </returns>
    private static KanbanQuantityCalculateOptimum construct()
    {
        return new KanbanQuantityCalculateOptimum();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new instance of the <c>KanbanQuantityCalculateOptimum</c> class.
    /// </summary>
    /// <param name="_kanbanQuantityCalculationProposal">
    /// A <c>KanbanQuantityCalculationProposal</c> record.
    /// </param>
    /// <returns>
    /// A <c>KanbanQuantityCalculateOptimum</c> object.
    /// </returns>
    public static KanbanQuantityCalculateOptimum newStandard(
        KanbanQuantityCalculationProposal   _kanbanQuantityCalculationProposal)
    {
        KanbanQuantityCalculateOptimum kanbanQuantityCalculateOptimum = KanbanQuantityCalculateOptimum::construct();

        kanbanQuantityCalculateOptimum.parmKanbanQuantityCalculationProposal(_kanbanQuantityCalculationProposal);

        return kanbanQuantityCalculateOptimum;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>