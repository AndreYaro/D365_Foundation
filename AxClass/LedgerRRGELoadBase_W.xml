<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerRRGELoadBase_W</Name>
	<SourceCode>
		<Declaration><![CDATA[
public class LedgerRRGELoadBase_W extends RunBase
{
    Filename                        filename;
    NotesLine                       note;
    LedgerRRGEDocuments_W           document;
    BinData                         fileData;
    Map                             sectionMap;
    Map                             dynamicSectionsMap;
    int                             properiesCount;
    ComExcelDocument_RU             excelDocument;
    LedgerRRGEDocumentRecId_W       documentRecId;
    LedgerRRGETemplateRecId_W       templateRecId;
    Map                             dynamicPropertiesMap;
    LedgerRRGEDocumentVersions_W    documentVersion;
    LedgerRRGEVersionType_W         versionType;
    boolean                         loadStaticProperties;
    boolean                         createNewVersion;
    List                            propertyNumberList;
    int                             propertyNumber;
    Map                             sectionFlagsMap;
    int                             worksheetCount;
    int                             worksheetNum;
    List                            dynamicValuesPropertyList;
    Map                             sectionWorksheetOffsetMap;
    LedgerRRGEProperty_W            rootProperty;
    LedgerRRGEProperty_W            currentProperty;
    LedgerRRGEBufferEvalMultiline_W multiLineEvaluator;
    LedgerRRGEProperty_W            updatedProperty;
    List                            lateUpdatedPropertyList;
    boolean                         lateUpdatePropertyMode;
    LedgerRRGEDatasourceQuery_W     dialogDataSource;

    private const int               CurrentVersion	        = 1;
    private const int               SecondProgressId	    = 2;
    private const str               Exclamation	            = '!';
    private const int               MaxDynamicSectionId	    = 999999;
    private const int               IdxSize	                = 6;
    private const str               PathDelimiter	        = '\\';
    private const real              KeyInc	                = 0.000001;
    private const int               StructDatasourceIdx	    = 1;
    private const int               StructEvaluatorListIdx	= 2;
    private const int               StructTablesMapIdx	    = 3;
    private const str               Underline	            = '_';
    private const str               ZeroChar	            = '0';
    private const int               IdxLen	                = 3;
    private const int               SafeCallRetryCount	    = 4;
    private const str               SafeCallNotifyMethod	= 'notify';
    private const int               SafeCallTimeOut	        = 250;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addDynamicSectionProperty</Name>
				<Source><![CDATA[
    private void addDynamicSectionProperty(LedgerRRGESectionId_W    _sectionId,
                                           LedgerRRGESectionId_W    _dynamicSectionId   = '',
                                           LedgerRRGESectionId_W    _parentSectionId    = '')
    {
        LedgerRRGEProperty_W property = this.makeDynamicProperty(_sectionId);
       
        if (!prmisDefault(_dynamicSectionId))
        {
            property.dynamicSectionId(_dynamicSectionId);
        }

        if (!prmisDefault(_parentSectionId))
        {
            property.parentSectionId(_parentSectionId);
        }

        this.addProperty(property);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addProperty</Name>
				<Source><![CDATA[
    private void addProperty(LedgerRRGEProperty_W _property, LedgerRRGESectionId_W _sectionId = _property.property().SectionId)
    {
        List                            sectionPropertiesList;
        LedgerRRGESectionProperties_W   sectionProperty = _property.property();
       
        setPrefix(strFmt("@GLS112370", sectionProperty.PropertyId, sectionProperty.Description));

        if (!sectionProperty.Dynamic)
        {
            this.updatePropertyValue(_property);
        }

        if (sectionProperty.PropertyType    == LedgerRRGESectionPropertyType_W::Const &&
            sectionProperty.property().Type == LedgerRRGEPropertyType_W::PropertyNumber)
        {
            if(!propertyNumberList)
            {
                propertyNumberList = new List(Types::Class);
            }

            propertyNumberList.addEnd(_property);
        }

        if (!sectionProperty.Dynamic && this.isContentSection(sectionProperty.SectionId) && _property.valid())
        {
            propertyNumber++;
        }

        if (sectionMap.exists(_sectionId))
        {
            sectionPropertiesList = sectionMap.lookup(_sectionId);
        }
        else
        {
            sectionPropertiesList = new List(Types::Class);
        }

        sectionPropertiesList.addEnd(_property);
        sectionMap.insert(_sectionId, sectionPropertiesList);
    }

]]></Source>
			</Method>
			<Method>
				<Name>addPropertyToLateUpdate</Name>
				<Source><![CDATA[
    private void addPropertyToLateUpdate(LedgerRRGEProperty_W _property)
    {
        if (_property)
        {
            if (!lateUpdatedPropertyList)
            {
                lateUpdatedPropertyList = new List(Types::Class);
            }

            lateUpdatedPropertyList.addEnd(_property);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>addWorksheetToOffset</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method is used for section placed on several worksheets
    /// </summary>
    private void addWorksheetToOffset(RefRecId _sectionRecId, str _worksheet)
    {
        Map worksheetOffsetMap;

        if (!_sectionRecId || !_worksheet)
        {
            return;
        }

        if (!sectionWorksheetOffsetMap)
        {
            sectionWorksheetOffsetMap = new Map(Types::Int64, Types::Class);
        }

        if (sectionWorksheetOffsetMap.exists(_sectionRecId))
        {
            worksheetOffsetMap = sectionWorksheetOffsetMap.lookup(_sectionRecId);
        }
        else
        {
            worksheetOffsetMap = new Map(Types::String, Types::Integer);
        }

        if (!worksheetOffsetMap.exists(_worksheet))
        {
            worksheetOffsetMap.insert(_worksheet, worksheetOffsetMap.elements());
            sectionWorksheetOffsetMap.insert(_sectionRecId, worksheetOffsetMap);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeExcel</Name>
				<Source><![CDATA[
    private void closeExcel()
    {
        if (excelDocument)
        {
            excelDocument.closeDocument();
            excelDocument.finalize();
            excelDocument = null;
        }

        LedgerRRGEQueries_W::flushCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>closeExcelDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void closeExcelDocument()
    {
       
        LedgerRRGEProperties_W::clearClientServerCache();
        if (excelDocument && excelDocument.isDocumentValid())
        {
            excelDocument.closeDocument();
            excelDocument = null;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createDynamicSectionId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGESectionId_W createDynamicSectionId(LedgerRRGESectionId_W _sectionId)
    {
        LedgerRRGESectionId_W   dynSectoinId;
        LedgerRRGESectionId_W   sectionIdMask = _sectionId;
        int                     idNum;
        Set                     dynamicSectionSet;

        if (!dynamicSectionsMap)
        {
            dynamicSectionsMap = new Map(Types::String, Types::Class);
        }

        if (dynamicSectionsMap.exists(_sectionId))
        {
            dynamicSectionSet = dynamicSectionsMap.lookup(_sectionId);
            if (dynamicSectionSet)
            {
                idNum = dynamicSectionSet.elements();
            }
        }

        do
        {
            idNum++;
            if (idNum > MaxDynamicSectionId)
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }

            dynSectoinId = LedgerRRGELoadBase_W::strAddIndex(sectionIdMask, idNum, IdxSize);
        }
        while (LedgerRRGETemplateSections_W::existSection(document.LedgerRRGETemplates_W, dynSectoinId));

        if (!dynamicSectionSet)
        {
            dynamicSectionSet = new Set(Types::String);
        }

        dynamicSectionSet.add(dynSectoinId);

        dynamicSectionsMap.insert(_sectionId, dynamicSectionSet);

        return dynSectoinId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createProperties</Name>
				<Source><![CDATA[
    private List createProperties(LedgerRRGETableLayouts_W _tableLayout, str _worksheet = _tableLayout.ExcelSheet)
    {
        return LedgerRRGELoadTableProperties_W::loadTableProperties(this, _tableLayout, _worksheet);
    }

]]></Source>
			</Method>
			<Method>
				<Name>currentProperty</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEProperty_W currentProperty()
    {
        return currentProperty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialogDataSource</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the instance of the <c>LedgerRRGEDatasourceQuery_W</c> class, which is used by the <c>LedgerRRGEAlcoholDeclarationDlg_W</c> form.
    /// </summary>
    /// <returns>
    ///    The instance of the <c>LedgerRRGEDatasourceQuery_W</c> class, which is used by the <c>LedgerRRGEAlcoholDeclarationDlg_W</c> form.
    /// </returns>
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEDatasourceQuery_W dialogDataSource()
    {
        return dialogDataSource;
    }

]]></Source>
			</Method>
			<Method>
				<Name>document</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEDocuments_W document()
    {
        return document;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentVersion</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEDocumentVersions_W documentVersion()
    {
        return documentVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dynamicParentSection</Name>
				<Source><![CDATA[
    private LedgerRRGEProperty_W dynamicParentSection(LedgerRRGESectionProperties_W _dynamicIndetifier,
                                                      LedgerRRGEExcelSheet_W        _workSheet,
                                                      int                           _listIdx = 0,
                                                      container                     _dynIndetifiersDependentCon = conNull())
    {
        Map                     dynamicValueMap;
        List                    dynamicValueList;
        ListEnumerator          le;
        LedgerRRGEProperty_W    res, resDep;
        str                     value;
        int                     listIdx, i;
    
        setPrefix(strFmt("@LedgerRRG:LedgerRRG_CellArg", _workSheet + Exclamation + _dynamicIndetifier.cellStr()));
    
        if (excelDocument)
        {
            value = excelDocument.getValueStr(_workSheet, _dynamicIndetifier.cellStr());
    
            if (_workSheet && value && dynamicPropertiesMap.exists(_dynamicIndetifier.DynamicValueRefRecId))
            {
                dynamicValueList = dynamicPropertiesMap.lookup(_dynamicIndetifier.DynamicValueRefRecId);
                le = dynamicValueList.getEnumerator();
    
                while (le.moveNext())
                {
                    listIdx ++;
    
                    if (_listIdx == 0 || listIdx == _listIdx)
                    {
                        dynamicValueMap = le.current();
    
                        if (dynamicValueMap.exists(value))
                        {
                            res = dynamicValueMap.lookup(value);
                            for (i = 1; i <= conLen(_dynIndetifiersDependentCon); i++)
                            {
                                resDep = this.dynamicParentSection(conPeek(_dynIndetifiersDependentCon, i), _workSheet, listIdx);
                                res = resDep != null ? res : null;
                            }
                        }
    
                        if (res)
                        {
                            break;
                        }
                    }
                }
            }
        }
    
        return res;
    }

]]></Source>
			</Method>
			<Method>
				<Name>excelDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ComExcelDocument_RU excelDocument()
    {
        return excelDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findProperties</Name>
				<Source><![CDATA[
    private List findProperties(LedgerRRGEPropertyId_W _path, LedgerRRGEPropertyId_W _propertyId)
    {
        List                    propertyList = new List(Types::Class);
        MapEnumerator           me;
        List                    sectionPropertiesList;
        ListEnumerator          le;
        LedgerRRGEProperty_W    property;

        if (rootProperty)
        {
            propertyList = rootProperty.findProperties(_path, _propertyId);
        }
        else
        {
            if (sectionMap)
            {
                me = sectionMap.getEnumerator();
                while (me.moveNext())
                {
                    sectionPropertiesList = me.currentValue();
                    if (sectionPropertiesList)
                    {
                        le = sectionPropertiesList.getEnumerator();
                        while (le.moveNext())
                        {
                            property = le.current();
                            if(property && property.matchPropertyId(_propertyId))
                            {
                                propertyList.addEnd(property);
                            }
                        }
                    }
                }
            }
        }

        return propertyList;
    }

]]></Source>
			</Method>
			<Method>
				<Name>findPropertyValue</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public str findPropertyValue(LedgerRRGEPropertyId_W _propertyId)
    {
        List                    propertyList;
        ListEnumerator          le;
        LedgerRRGEProperty_W    property;
        LedgerRRGEPropertyId_W  path;
        LedgerRRGEPropertyId_W  propertyId;
        int                     idx;
        LedgerRRGEPropertyId_W  rest;

        if (lateUpdatePropertyMode)
        {
            [path, propertyId, idx, rest]   = LedgerRRGEProperty_W::splitPropertyId(_propertyId);
            propertyList                    = this.findProperties(path, propertyId);

            if (idx == maxInt())
            {
                idx = propertyList.elements();
            }

            if (idx > 0 && idx <= propertyList.elements())
            {
                le = propertyList.getEnumerator();
                while (idx && le.moveNext())
                {
                    idx--;
                    property = le.current();
                }

                if (!idx && property)
                {
                    return property.getExpressionValue(rest);
                }
            }
        }
        else
        {
            this.addPropertyToLateUpdate(updatedProperty);
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSectionFlags</Name>
				<Source><![CDATA[
    private container getSectionFlags(LedgerRRGESectionId_W _sectionId)
    {
        if (!sectionFlagsMap)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        if (sectionFlagsMap.exists(_sectionId))
        {
            return sectionFlagsMap.lookup(_sectionId);
        }

        return [false, false];
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorksheetOffset</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Is used for section placed on several worksheets
    /// </summary>
    private int getWorksheetOffset(RefRecId _sectionRecId, str _worksheet)
    {
        Map worksheetOffsetMap;

        if (_sectionRecId && _worksheet && sectionWorksheetOffsetMap && sectionWorksheetOffsetMap.exists(_sectionRecId))
        {
            worksheetOffsetMap = sectionWorksheetOffsetMap.lookup(_sectionRecId);
            if (worksheetOffsetMap.exists(_worksheet))
            {
                return worksheetOffsetMap.lookup(_worksheet);
            }
        }

        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    public boolean init()
    {
        if (document.RecId != documentRecId)
        {
            document = LedgerRRGEDocuments_W::find(documentRecId, true);
        }

        templateRecId       = document.LedgerRRGETemplates_W;
        sectionMap          = new Map(Types::String, Types::Class);
        workSheetNum        = 1;

        if (!multiLineEvaluator)
        {
            multiLineEvaluator  = LedgerRRGEBufferEvalMultiline_W::construct();
            multiLineEvaluator.parmLoadBase(this);
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDocumentVersion</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void initDocumentVersion(LedgerRRGEDocumentVersions_W _documentVersion)
    {
        _documentVersion.initFromDocument(document);
        _documentVersion.Type        = versionType;
        _documentVersion.Notes       = note;
        _documentVersion.FileName    = filename;

        if (fileData)
        {
            _documentVersion.File        = fileData.getData();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromArgs</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public void initFromArgs(Args _args)
    {
        this.getLast();

        if (_args)
        {
            switch (_args.dataset())
            {
                case tableNum(LedgerRRGEDocuments_W):
                    document = _args.record();
                    break;
                case tableNum(LedgerRRGEDocumentVersions_W):
                    documentVersion = _args.record();
                    document        = documentVersion.document();
                    break;
            }
        }

        documentRecId           = document.RecId;
        excelDocument           = ComExcelDocument_RU::construct();
        versionType             = LedgerRRGEVersionType_W::File;
        loadStaticProperties    = true;
        createNewVersion        = true;

        multiLineEvaluator      = LedgerRRGEBufferEvalMultiline_W::construct();
        multiLineEvaluator.parmLoadBase(this);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromDocumentVersion</Name>
				<Source><![CDATA[
    private void initFromDocumentVersion()
    {
        versionType         = documentVersion.Type;
        note                = documentVersion.Notes;
        filename            = documentVersion.FileName;
        documentRecId       = documentVersion.LedgerRRGEDocuments_W;
        versionType         = documentVersion.Type;
        document            = documentVersion.document();

        createNewVersion    = documentVersion.RecId == 0;

        if (!createNewVersion && !documentVersion.selectForUpdate())
        {
            documentVersion = LedgerRRGEDocumentVersions_W::find(documentVersion.RecId, true);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertProperties</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void insertProperties()
    {
        MapEnumerator                   me;
        List                            sectionPropertiesList;
        ListEnumerator                  le;
        LedgerRRGEProperty_W            property;

        this.initDocumentVersion(documentVersion);

        if (createNewVersion)
        {
            documentVersion.insert();
        }
        else
        {
            documentVersion.update();
        }

        if (rootProperty)
        {
            properiesCount = rootProperty.insert(documentVersion);
        }
        else
        {
            if (sectionMap)
            {
                me = sectionMap.getEnumerator();
                while (me.moveNext())
                {
                    sectionPropertiesList = me.currentValue();
                    if (sectionPropertiesList)
                    {
                        le = sectionPropertiesList.getEnumerator();
                        while (le.moveNext())
                        {
                            property = le.current();
                            if (property.valid())
                            {
                                property.insertPropertyVersion(documentVersion);
                                if (!property.property().Dynamic)
                                {
                                    properiesCount++;
                                }
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>isContentSection</Name>
				<Source><![CDATA[
    private boolean isContentSection(LedgerRRGESectionId_W _sectionId)
    {
        return conPeek(this.getSectionFlags(_sectionId), 1);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isDynamicSection</Name>
				<Source><![CDATA[
    private boolean isDynamicSection(LedgerRRGESectionId_W _sectionId)
    {
        return conPeek(this.getSectionFlags(_sectionId), 2);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isWorksheetDynamic</Name>
				<Source><![CDATA[
    private boolean isWorksheetDynamic(LedgerRRGESectionProperties_W _dynamicIndetifier, LedgerRRGEExcelSheet_W _workSheet)
    {
        if (excelDocument)
        {
            setPrefix(strFmt("@LedgerRRG:LedgerRRG_CellArg", _workSheet + Exclamation + _dynamicIndetifier.cellStr()));
            try
            {
                return strLRTrim(_dynamicIndetifier.Value) == strLRTrim(excelDocument.getValueStr(_workSheet, _dynamicIndetifier.cellStr()));
            }
            catch (Exception::Error)
            {
                if (xSession::currentRetryCount() >= SafeCallRetryCount)
                {
                    throw Exception::Error;
                }
                else
                {
                    infolog.clear(0);
                    infolog.addTimeOut(infolog, SafeCallNotifyMethod, SafeCallTimeOut);
                    infolog.wait();

                    retry;
                }
            }
        }

        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>lateUpdatePropertyValues</Name>
				<Source><![CDATA[
    private void lateUpdatePropertyValues()
    {
        ListEnumerator le;

        if (lateUpdatedPropertyList && lateUpdatedPropertyList.elements())
        {
            lateUpdatePropertyMode = true;
            le = lateUpdatedPropertyList.getEnumerator();
            while (le.moveNext())
            {
                this.updatePropertyValue(le.current());
            }
            lateUpdatePropertyMode = false;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDynamicPagesWithValues</Name>
				<Source><![CDATA[
    private void loadDynamicPagesWithValues()
    {
        ListEnumerator                  le;
        LedgerRRGEProperty_W            dynamicChild;
        LedgerRRGEProperty_W            dynamicParent;
        LedgerRRGEProperty_W            sectionProperty;
        str                             dynWorksheetName;
        LedgerRRGESectionProperties_W   dynamicIdentifier;
        container                       dynamicIdentifiersCon;
    
        if (dynamicValuesPropertyList)
        {
            for (worksheetNum = 1; worksheetNum <= worksheetCount; worksheetNum++)
            {
                dynWorksheetName = this.worksheetName(worksheetNum);
                progress.setText(dynWorksheetName, SecondProgressId);
    
                le = dynamicValuesPropertyList.getEnumerator();
                while (le.moveNext())
                {
                    dynamicIdentifiersCon = le.current();
    
                    dynamicIdentifier = conPeek(dynamicIdentifiersCon, 1);
                    dynamicParent = this.dynamicParentSection(dynamicIdentifier, dynWorksheetName, 0, condel(dynamicIdentifiersCon, 1, 1));
    
                    if (dynamicParent)
                    {
                        dynamicChild    = this.makeSectionProperty(dynamicIdentifier.section());
                        dynamicParent   = dynamicParent.findMatchSection(dynamicChild);
                        if (dynamicParent)
                        {
                            sectionProperty = dynamicParent.add(dynamicChild, false, true);
    
                            this.loadSection(sectionProperty, dynWorksheetName);
                        }
                    }
                }
    
                progress.setCount(worksheetNum, SecondProgressId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDynamicProperties</Name>
				<Source><![CDATA[
    private void loadDynamicProperties()
    {
        LedgerRRGESectionProperties_W   dynProperty;
        real                            keyNum;

        while select dynProperty order by LineNum
            where dynProperty.LedgerRRGETemplates_W == document.LedgerRRGETemplates_W   &&
                  dynProperty.PropertyType  == LedgerRRGESectionPropertyType_W::Cell    &&
                  dynProperty.Dynamic                                                   &&
                  dynProperty.Value
        {
            if (!dynamicPropertiesMap)
            {
                dynamicPropertiesMap = new Map(Types::Real, Types::Record);
            }

            if (!dynProperty.section().NextPageSection)
            {
                dynamicPropertiesMap.insert(-dynProperty.cellsCount() + keyNum, dynProperty);
                this.addProperty(LedgerRRGEProperty_W::newFromProperty(dynProperty));
                keyNum += KeyInc;
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDynamicSection</Name>
				<Source><![CDATA[
    private void loadDynamicSection(LedgerRRGETemplateSections_W _section, LedgerRRGEExcelSheet_W _excelSheet, LedgerRRGESectionId_W _parentDynamicId = _section.ParentId)
    {
        LedgerRRGESectionId_W           dynamicSectionId;
        LedgerRRGETemplateSections_W    childSection;
        LedgerRRGESectionProperties_W   dynamicProperty;
        str                             worksheetName;

        dynamicSectionId = this.createDynamicSectionId(_section.SectionId);

        this.addDynamicSectionProperty(_section.SectionId, dynamicSectionId, _parentDynamicId);
        this.loadStaticProperties(true, _section.SectionId, _parentDynamicId, dynamicSectionId);
        this.loadStaticExcelPropertiesSection(_section.SectionId, _excelSheet, _parentDynamicId, dynamicSectionId);
        this.loadDynamicTableSection(_section.SectionId, _excelSheet, _parentDynamicId);

        while select childSection order by LineNum
            where childSection.LedgerRRGETemplates_W == templateRecId &&
                  childSection.ParentId   == _section.SectionId
        {
            if (childSection.NextPageSection && worksheetNum <= worksheetCount)
            {
                worksheetName = this.worksheetName(worksheetNum + 1);
            }
            else
            {
                worksheetName = _excelSheet;
            }

            dynamicProperty = childSection.dynamicProperty();
            if (!dynamicProperty || this.isWorksheetDynamic(dynamicProperty, worksheetName))
            {
                this.loadDynamicSection(childSection, worksheetName, dynamicSectionId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDynamicSections</Name>
				<Source><![CDATA[
    private void loadDynamicSections(LedgerRRGEExcelSheet_W _workSheet)
    {
        LedgerRRGESectionProperties_W   dynamicIdentifier;
        LedgerRRGETemplateSections_W    dynamicSection;
        MapEnumerator                   me;
       
        if (dynamicPropertiesMap)
        {
            me = dynamicPropertiesMap.getEnumerator();
            while (me.moveNext())
            {
                dynamicIdentifier = me.currentValue();
                if (this.isWorksheetDynamic(dynamicIdentifier, _workSheet))
                {
                    dynamicSection = dynamicIdentifier.section();
                    this.loadDynamicSection(dynamicSection, _workSheet);
                    if (!dynamicSection.SearchAgain)
                    {
                        break;
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDynamicTable</Name>
				<Source><![CDATA[
    private void loadDynamicTable(LedgerRRGETableLayouts_W _dynamicTable, LedgerRRGEExcelSheet_W _worksheet, LineNum _corrLineNum, LedgerRRGESectionId_W _parentSectionId = '')
    {
        LedgerRRGEProperty_W    property;
        ListEnumerator          le = this.createProperties(_dynamicTable, _worksheet).getEnumerator();

        while (le.moveNext())
        {
            property = le.current();
            property.lineNum(property.lineNum() + _corrLineNum);
            if (!prmisDefault(_parentSectionId))
            {
                property.parentSectionId(_parentSectionId);
            }

            this.addProperty(property);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDynamicTableSection</Name>
				<Source><![CDATA[
    private void loadDynamicTableSection(LedgerRRGESectionId_W  _sectionId,
                                         LedgerRRGEExcelSheet_W _workSheet,
                                         LedgerRRGESectionId_W  _parentSectionId)
    {
        LedgerRRGETableLayouts_W dynamicTable;

        while select dynamicTable
            where dynamicTable.LedgerRRGETemplates_W == document.LedgerRRGETemplates_W &&
                  dynamicTable.SectionID             == _sectionId                     &&
                  dynamicTable.Dynamic
        {
            this.loadDynamicTable(dynamicTable,
                                  _workSheet,
                                  LedgerRRGESectionProperties_W::lastLineNum(templateRecId, dynamicTable.SectionID),
                                  _parentSectionId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDynamicTableWorksheet</Name>
				<Source><![CDATA[
    private void loadDynamicTableWorksheet(LedgerRRGEExcelSheet_W _workSheet)
    {
        LedgerRRGETableLayouts_W dynamicTable;

        while select dynamicTable
            where dynamicTable.LedgerRRGETemplates_W == document.LedgerRRGETemplates_W &&
                  dynamicTable.ExcelSheet            == _workSheet                     &&
                  dynamicTable.Dynamic
        {
            if (!this.isDynamicSection(dynamicTable.SectionID))
            {
                this.loadDynamicTable(dynamicTable, _workSheet,
                    LedgerRRGESectionProperties_W::lastLineNum(templateRecId, dynamicTable.SectionID));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDynamicValues</Name>
				<Source><![CDATA[
    private void loadDynamicValues()
    {
        LedgerRRGESectionProperties_W   dynProperty;
        Map                             sectionDynPropMap = new Map(Types::Int64, Types::Container);
        MapEnumerator                   me;
    
        while select dynProperty order by LineNum
            where dynProperty.LedgerRRGETemplates_W == document.LedgerRRGETemplates_W   &&
                  dynProperty.PropertyType  == LedgerRRGESectionPropertyType_W::Cell    &&
                  dynProperty.Dynamic                                                   &&
                  dynProperty.DynamicValueRefRecId
        {
            if (!dynamicPropertiesMap)
            {
                dynamicPropertiesMap = new Map(Types::Int64, Types::Class);
            }
    
            dynamicPropertiesMap.insert(dynProperty.DynamicValueRefRecId, new List(Types::Class));
            sectionDynPropMap.insert(dynProperty.SectionRefRecId,
                                     sectionDynPropMap.exists(dynProperty.SectionRefRecId) ?
                                            conPoke(sectionDynPropMap.lookup(dynProperty.SectionRefRecId), conLen(sectionDynPropMap.lookup(dynProperty.SectionRefRecId)) + 1, dynProperty) :
                                            [dynProperty]);
        }
    
        if (!dynamicValuesPropertyList)
        {
            dynamicValuesPropertyList = new List(Types::Container);
        }
    
        me = sectionDynPropMap.getEnumerator();
    
        while (me.moveNext())
        {
            dynamicValuesPropertyList.addEnd(me.currentValue());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadMultiLineProperties</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void loadMultiLineProperties()
    {
        MapEnumerator                   me;
        ListEnumerator                  le;
        LedgerRRGEDatasourceQuery_W     datasource;
        List                            evaluatorList;
        Struct                          datasourceStruct;
        Map                             tablesMap;
        MapEnumerator                   tablesEnum;
        LedgerRRGEBufferEvalProperty_W  propertyEvaluator;
        boolean                         isXML = document.isXML();
        LedgerRRGEProperty_W            dynamicChild;
        LedgerRRGEProperty_W            dynamicParent;
        LedgerRRGEProperty_W            property;

        if (loadStaticProperties && multiLineEvaluator.multiLineDatasources())
        {
            multiLineEvaluator.lock(true);

            me = multiLineEvaluator.multiLineDatasources().getEnumerator();
            while (me.moveNext())
            {
                datasourceStruct    = me.currentValue();
                datasource          = datasourceStruct.valueIndex(StructDatasourceIdx);
                tablesMap           = datasourceStruct.valueIndex(StructTablesMapIdx);

                if (datasource && tablesMap && tablesMap.elements())
                {
                    tablesEnum = tablesMap.getEnumerator();
                    while (tablesEnum.moveNext())
                    {
                        while (datasource.next(tablesEnum.currentKey()))
                        {
                            evaluatorList   = tablesEnum.currentValue();
                            le              = evaluatorList.getEnumerator();
                            if (le.moveNext())
                            {
                                propertyEvaluator = le.current();
                                propertyEvaluator.reset();
                                property = propertyEvaluator.property();

                                if (isXML)
                                {
                                    dynamicParent = property.parent();
                                    if (dynamicParent)
                                    {
                                        dynamicParent = dynamicParent.parent();
                                        if (dynamicParent)
                                        {
                                            dynamicChild    = this.makeSectionProperty(property.property().section());
                                            dynamicParent   = dynamicParent.findMatchSection(dynamicChild);
                                            if (dynamicParent)
                                            {
                                                this.loadSection(dynamicParent.add(dynamicChild));
                                            }
                                        }
                                    }
                                }
                                else
                                {
                                    this.loadDynamicSection(property.property().section(), property.excelSheet());
                                }
                            }
                        }
                    }
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadProperties</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void loadProperties()
    {
        if (!fileName || this.openExcel())
        {
            if (excelDocument)
            {
                try
                {
                    worksheetCount = excelDocument.getWorkSheetsCount();
                }
                catch (Exception::Error)
                {
                    if (xSession::currentRetryCount() >= SafeCallRetryCount)
                    {
                        throw Exception::Error;
                    }
                    else 
                    {
                        infolog.clear(0);
                        infolog.addTimeOut(infolog, SafeCallNotifyMethod, SafeCallTimeOut);
                        infolog.wait();

                        retry;
                    }
                }
                    progress.setTotal(workSheetCount + 1, SecondProgressId);
                }

            if (document.isXML())
            {
                this.loadDynamicValues();
                rootProperty = this.makeSectionProperty(this.rootSection());
                this.loadSection(rootProperty);
                this.loadDynamicPagesWithValues();
            }
            else
            {
                sectionFlagsMap = new Map(Types::String, Types::Container);
                this.loadSectionsStructure();
                this.loadDynamicProperties();
                this.loadWorksheets();
            }

            this.lateUpdatePropertyValues();

            this.closeExcel();

            this.loadMultiLineProperties();

            this.updatePropertyNumbers();

            if (excelDocument)
            {
                progress.setCount(worksheetCount + 1, SecondProgressId);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSection</Name>
				<Source><![CDATA[
    private void loadSection(
        LedgerRRGEProperty_W    _sectionProperty,
        str                     _worksheet          = '',
        str                     _baseWorksheet      = '',
        RefRecId                _baseSectionRecId   = 0)
    {
        LedgerRRGESectionProperties_W   dynamicIdentifier;
        str                             dynWorksheetName;
        LedgerRRGESectionId_W           dynamicSectionId;
        LedgerRRGETemplateSections_W    childSection;
        LedgerRRGEProperty_W            sectionTable;
        LedgerRRGESectionProperties_W   properties;
        LedgerRRGEProperty_W            property;
        ListEnumerator                  le;
        LedgerRRGETableColumns_W        column;
        LedgerRRGESectionProperties_W   parentSectionProperty = _sectionProperty.property();
        LedgerRRGETableLayouts_W        tableLayout           = _sectionProperty.dynamicTableLayout();
    
        void updateDynamicValuesMap(RecId _recId, LedgerRRGEProperty_W _parent, str _value)
        {
            Map dynamicValueMap = new Map(Types::String, Types::Class);
            List dynamicValueList;
    
            if (dynamicPropertiesMap && dynamicPropertiesMap.exists(_recId))
            {
                dynamicValueList = dynamicPropertiesMap.lookup(_recId);
                dynamicValueMap.insert(_value, _parent);
                dynamicValueList.addEnd(dynamicValueMap);
            }
        }
    
        void loadChildren(LedgerRRGEProperty_W _parent)
        {
            LedgerRRGEDatasourceQuery_W dataSource;
    
            while select childSection order by LineNum
                where childSection.ParentRecId == _parent.property().SectionRefRecId
            {
                if (childSection.QueryId)
                {
                    if (!dataSource || dataSource.parmEQuery().QueryId != childSection.QueryId)
                    {
                        dataSource = multiLineEvaluator.datasourceQuery(LedgerRRGEQueries_W::findByQueryId(childSection.QueryId).RecId, document);
                    }
    
                    while (dataSource.next(childSection.RefTableId))
                    {
                        this.loadSection(_parent.addSection(childSection, false, true), _worksheet, _baseWorksheet, _baseSectionRecId);
                    }
                }
                else
                {
                    dynamicIdentifier = childSection.dynamicProperty();
                    if (dynamicIdentifier)
                    {
                        if (!dynamicIdentifier.DynamicValueRefRecId)
                        {
                            for (worksheetNum = this.worksheetNum(_worksheet); worksheetNum <= worksheetCount; worksheetNum++)
                            {
                                dynWorksheetName = this.worksheetName(worksheetNum);
                                if (this.isWorksheetDynamic(dynamicIdentifier, dynWorksheetName))
                                {
                                    this.loadSection(_parent.addSection(childSection, false, true), dynWorksheetName, dynamicIdentifier.ExcelSheet, dynamicIdentifier.SectionRefRecId);
                                }
                            }
    
                            worksheetNum = this.worksheetNum(_worksheet);
                        }
                        else
                        {
                            this.loadSection(_parent.addSection(childSection, false, true), _worksheet, _baseWorksheet, _baseSectionRecId);
                        }
                    }
                    else
                    {
                        this.loadSection(_parent.addSection(childSection, false, true), _worksheet, _baseWorksheet, _baseSectionRecId);
                    }
                }
            }
        }
    
        currentProperty = _sectionProperty;
    
        if (tableLayout)
        {
            if (!_sectionProperty.parent())
            {
                throw error(Error::wrongUseOfFunction(funcName()));
            }
    
            le              = this.createProperties(tableLayout, _worksheet ? _worksheet : tableLayout.ExcelSheet).getEnumerator();
            sectionTable    = _sectionProperty;
            while (le.moveNext())
            {
                property = le.current();
                if (!dynamicSectionId)
                {
                    dynamicSectionId = property.dynamicSectionId();
                }
    
                if (dynamicSectionId != property.dynamicSectionId())
                {
                    loadChildren(sectionTable);
                    dynamicSectionId    = property.dynamicSectionId();
                    sectionTable        = LedgerRRGEProperty_W::makeDynamicProperty(parentSectionProperty.SectionId, document.LedgerRRGETemplates_W, parentSectionProperty.SectionRefRecId);
                    sectionTable.dynamicSectionId(dynamicSectionId);
                    _sectionProperty.parent().add(sectionTable);
                }
    
                sectionTable.add(property, true);
                updateDynamicValuesMap(property.property().RecId, sectionTable, property.value());
            }
    
            loadChildren(sectionTable);
        }
        else
        {
            while select properties order by LineNum
                where properties.SectionRefRecId    == parentSectionProperty.SectionRefRecId
                  && !properties.Dynamic
                notexists join TableId from column
                    where column.PropertyRefRecId   == properties.RecId
            {
                this.addWorksheetToOffset(_baseSectionRecId, properties.ExcelSheet);
    
                if (loadStaticProperties || properties.PropertyType == LedgerRRGESectionPropertyType_W::Cell)
                {
                    property = LedgerRRGEProperty_W::newFromProperty(properties);
    
                    if (!_sectionProperty.propertyExists(property))
                    {
                        if (_worksheet)
                        {
                            if (_baseWorksheet && properties.ExcelSheet != _baseWorksheet)
                            {
                                property.excelSheet(this.worksheetName(worksheetNum + this.getWorksheetOffset(_baseSectionRecId, properties.ExcelSheet)));
                            }
                            else
                            {
                                property.excelSheet(_worksheet);
                            }
                        }
    
                        this.updatePropertyValue(property);
                        _sectionProperty.add(property);
    
                        if (this.isNotPartOfDynTable(property))
                        {
                            updateDynamicValuesMap(property.property().RecId, _sectionProperty, property.value());
                        }
                    }
                }
            }
    
            loadChildren(_sectionProperty);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadSectionsStructure</Name>
				<Source><![CDATA[
    private void loadSectionsStructure(LedgerRRGESectionId_W _parentId = '', boolean _content = false, boolean _dynamic = false)
    {
        LedgerRRGETemplateSections_W sections;
        boolean content;
        boolean dynamic;

        while select SectionId, Content, LedgerRRGETemplates_W from sections
            where sections.LedgerRRGETemplates_W == document.LedgerRRGETemplates_W  &&
                  sections.ParentId              == _parentId
        {
            content = _content || sections.Content;
            dynamic = _dynamic || sections.dynamicSection();

            sectionFlagsMap.insert(sections.SectionId, [content, dynamic]);
            this.addDynamicSectionProperty(sections.SectionId);
            this.loadSectionsStructure(sections.SectionId, content, dynamic);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadStaticExcelPropertiesSection</Name>
				<Source><![CDATA[
    private void loadStaticExcelPropertiesSection(LedgerRRGESectionId_W     _sectionId,
                                                  LedgerRRGEExcelSheet_W    _workSheet,
                                                  LedgerRRGESectionId_W     _parentSectionId,
                                                  LedgerRRGESectionId_W     _dynamicSectionId)
    {
        LedgerRRGESectionProperties_W   properties;

        while select properties order by LineNum
            where properties.LedgerRRGETemplates_W == document.LedgerRRGETemplates_W    &&
                  properties.PropertyType   == LedgerRRGESectionPropertyType_W::Cell    &&
                  properties.SectionId      == _sectionId
        {
            if (!properties.tableColumn())
            {
                this.addProperty(this.newProperty(properties, _workSheet, _parentSectionId, _dynamicSectionId));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadStaticExcelPropertiesWorksheet</Name>
				<Source><![CDATA[
    private void loadStaticExcelPropertiesWorksheet(LedgerRRGEExcelSheet_W _workSheet)
    {
        LedgerRRGESectionProperties_W properties;

        while select properties order by LineNum
            where properties.LedgerRRGETemplates_W == document.LedgerRRGETemplates_W    &&
                  properties.PropertyType   == LedgerRRGESectionPropertyType_W::Cell    &&
                  properties.ExcelSheet     == _workSheet                               &&
                 !properties.Dynamic
        {
            if (!this.isDynamicSection(properties.SectionId))
            {
                this.addProperty(LedgerRRGEProperty_W::newFromProperty(properties));
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadStaticProperties</Name>
				<Source><![CDATA[
    private void loadStaticProperties(boolean               _allowLoadDynamic   = false,
                                      LedgerRRGESectionId_W _sectionId          = '',
                                      LedgerRRGESectionId_W _parentSectionId    = '',
                                      LedgerRRGESectionId_W _dynamicSectionId   = '')
    {
        LedgerRRGESectionProperties_W   properties;
       

        while select properties
            where properties.LedgerRRGETemplates_W == document.LedgerRRGETemplates_W  &&
                (!_sectionId                                        ||
                  properties.SectionId      == _sectionId)          &&
                  properties.PropertyType   != LedgerRRGESectionPropertyType_W::Cell
        {
            if (_allowLoadDynamic || !this.isDynamicSection(properties.SectionId))
            {
                if (prmisDefault(_sectionId))
                {
                    this.addProperty(this.newProperty(properties));
                }
                else
                {
                    this.addProperty(this.newProperty(properties, '', _parentSectionId, _dynamicSectionId));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadWorksheets</Name>
				<Source><![CDATA[
    private void loadWorksheets()
    {
        str worksheetName;

        if (loadStaticProperties)
        {
            this.loadStaticProperties();
        }

        for (worksheetNum = 1; worksheetNum <= workSheetCount; worksheetNum++)
        {
            worksheetName = this.worksheetName(worksheetNum);
            progress.setText(workSheetName, SecondProgressId);

            this.loadDynamicSections(worksheetName);
            this.loadStaticExcelPropertiesWorksheet(worksheetName);
            this.loadDynamicTableWorksheet(worksheetName);

            progress.setCount(worksheetNum, SecondProgressId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeDynamicProperty</Name>
				<Source><![CDATA[
    private LedgerRRGEProperty_W makeDynamicProperty(LedgerRRGESectionId_W _sectionId)
    {
        return LedgerRRGEProperty_W::makeDynamicProperty(_sectionId, document.LedgerRRGETemplates_W);
    }

]]></Source>
			</Method>
			<Method>
				<Name>makeSectionProperty</Name>
				<Source><![CDATA[
    private LedgerRRGEProperty_W makeSectionProperty(LedgerRRGETemplateSections_W _section)
    {
        return LedgerRRGEProperty_W::makeDynamicProperty(_section.SectionId, _section.LedgerRRGETemplates_W, _section.RecId, _section.LineNum);
    }

]]></Source>
			</Method>
			<Method>
				<Name>multiLineEvaluator</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEBufferEvalMultiline_W multiLineEvaluator()
    {
        return multiLineEvaluator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
        super();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newProperty</Name>
				<Source><![CDATA[
    private LedgerRRGEProperty_W newProperty(LedgerRRGESectionProperties_W _property, LedgerRRGEExcelSheet_W _workSheet = '', LedgerRRGESectionId_W _parentSectionId = '', LedgerRRGESectionId_W _dynamicSectionId = '')
    {
        LedgerRRGEProperty_W property = LedgerRRGEProperty_W::newFromProperty(_property);

        if (!prmisDefault(_workSheet))
        {
            property.excelSheet(_workSheet);
        }

        if (!prmisDefault(_parentSectionId))
        {
            property.parentSectionId(_parentSectionId);
        }

        if (!prmisDefault(_dynamicSectionId))
        {
            property.dynamicSectionId(_dynamicSectionId);
        }

        return property;
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextWorksheetName</Name>
				<Source><![CDATA[
    private str nextWorksheetName(str _worksheetName, int _startSearch = workSheetNum)
    {
        int i;
        str nextWorksheetName;

        if (_worksheetName)
        {
            for (i = _startSearch; i <= worksheetCount; i++)
            {
                if(this.worksheetName(i) == _worksheetName)
                {
                    if (i < worksheetCount)
                    {
                        nextWorksheetName = this.worksheetName(i + 1);
                    }

                    break;
                }
            }
        }

        return nextWorksheetName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>openExcel</Name>
				<Source><![CDATA[
    private boolean openExcel()
    {
        if (!excelDocument)
        {
            excelDocument = ComExcelDocument_RU::construct();
        }

        try
        {
            if (!excelDocument.getComDocument() && !excelDocument.newFile(filename, false))
            {
                return false;
            }
        }
        catch (Exception::Error)
        {
            if (xSession::currentRetryCount() >= SafeCallRetryCount)
            {
                throw Exception::Error;
            }
            else
            {
                infolog.clear(0);
                infolog.addTimeOut(infolog, SafeCallNotifyMethod, SafeCallTimeOut);
                infolog.wait();

                retry;
            }
        }

            return true;
        }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [CurrentVersion];
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentRecId</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEDocumentRecId_W parmDocumentRecId(LedgerRRGEDocumentRecId_W _documentRecId = documentRecId)
    {
        documentRecId = _documentRecId;

        return documentRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentVersion</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEDocumentVersions_W parmDocumentVersion(LedgerRRGEDocumentVersions_W _documentVersion = documentVersion)
    {
        if (!prmisDefault(_documentVersion))
        {
            documentVersion = _documentVersion;
            this.initFromDocumentVersion();
        }

        return documentVersion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmExcelDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public ComExcelDocument_RU parmExcelDocument(ComExcelDocument_RU _excelDocument = excelDocument)
    {
        excelDocument = _excelDocument;

        return excelDocument;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFileName</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public Filename parmFileName(Filename _filename = filename)
    {
        filename = _filename;

        return filename;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmLoadStaticProperties</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public boolean parmLoadStaticProperties(boolean _loadStaticProperties = loadStaticProperties)
    {
        loadStaticProperties = _loadStaticProperties;

        return loadStaticProperties;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmNote</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public NotesLine parmNote(NotesLine _note = note)
    {
        note = _note;

        return note;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmVersionType</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public LedgerRRGEVersionType_W parmVersionType(LedgerRRGEVersionType_W _versionType = versionType)
    {
        versionType = _versionType;

        return versionType;
    }

]]></Source>
			</Method>
			<Method>
				<Name>rootSection</Name>
				<Source><![CDATA[
    private LedgerRRGETemplateSections_W rootSection()
    {
        LedgerRRGETemplateSections_W rootSection;

        select firstonly rootSection
            where rootSection.LedgerRRGETemplates_W == templateRecId &&
                 !rootSection.ParentRecId;

        return rootSection;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        Version version = RunBase::getVersion(packedClass);
       
        switch (version)
        {
            case CurrentVersion:
                [version] = packedClass;
                break;
            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateDocument</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    protected void updateDocument()
    {
        if (document.Status < LedgeRRGEDocumentStatus_W::Received)
        {
            if (!document.selectForUpdate())
            {
                document = LedgerRRGEDocuments_W::find(documentRecId, true);
            }

            document.Status = LedgeRRGEDocumentStatus_W::Received;
            document.update();
        }

        LedgerRRGEQueries_W::flushCache();
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePropertyNumbers</Name>
				<Source><![CDATA[
    private void updatePropertyNumbers()
    {
        LedgerRRGEProperty_W    property;
        ListEnumerator          le;

        if (rootProperty)
        {
            rootProperty.updatePropertyNumbers();
        }
        else
        {
            if (propertyNumberList)
            {
                le = propertyNumberList.getEnumerator();
                while (le.moveNext())
                {
                    property = le.current();
                    property.value(int2str(propertyNumber));
                }
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePropertyValue</Name>
				<Source><![CDATA[
    private void updatePropertyValue(LedgerRRGEProperty_W _property)
    {
        if (_property)
        {
            updatedProperty = _property;
            try
            {
                _property.updateValue(excelDocument, document, true, multiLineEvaluator);
            }
            catch (Exception::Error)
            {
                if (xSession::currentRetryCount() >= SafeCallRetryCount)
                {
                    throw Exception::Error;
                }
                else
                {
                    infolog.clear(0);
                    infolog.addTimeOut(infolog, SafeCallNotifyMethod, SafeCallTimeOut);
                    infolog.wait();

                    retry;
                }
            }
            updatedProperty = null;
            }
    }

]]></Source>
			</Method>
			<Method>
				<Name>worksheetName</Name>
				<Source><![CDATA[
    private str worksheetName(int _worksheetNum)
    {
        if (excelDocument)
        {
            try
            {
                return excelDocument.getWorkSheetName(_worksheetNum, false);
            }
            catch (Exception::Error)
            {
                if (xSession::currentRetryCount() >= SafeCallRetryCount)
                {
                    throw Exception::Error;
                }
                else
                {
                    infolog.clear(0);
                    infolog.addTimeOut(infolog, SafeCallNotifyMethod, SafeCallTimeOut);
                    infolog.wait();

                    retry;
                }
            }
        }

        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>worksheetNum</Name>
				<Source><![CDATA[
    private int worksheetNum(str _worksheetName)
    {
        int i;

        if (_worksheetName)
        {
            for (i = 1; i <= worksheetCount; i++)
            {
                if (_worksheetName == this.worksheetName(i))
                {
                    return i;
                }
            }
        }

        return 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    client public static LedgerRRGELoadBase_W construct()
    {
        return new LedgerRRGELoadBase_W();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createPropertiesFromTableLayout</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static client List createPropertiesFromTableLayout(
        LedgerRRGETableLayouts_W        _tableLayout,
        ComExcelDocument_RU             _comExcelDocument)
    {
        LedgerRRGELoadBase_W  loadBase;

        if (!_tableLayout || !_comExcelDocument)
        {
            throw error(Error::missingParameter(null));
        }

        loadBase = LedgerRRGELoadBase_W::construct();
        loadBase.parmExcelDocument(_comExcelDocument);
        return loadBase.createProperties(_tableLayout);
    }

]]></Source>
			</Method>
			<Method>
				<Name>strAddIndex</Name>
				<Source><![CDATA[
    [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
    public static str strAddIndex(str _name, int _idx, int _idxLen = IdxLen, boolean _underline = true)
    {
        return _name + (_underline?Underline:'') + strRFix(int2str(_idx), _idxLen, ZeroChar);
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNotPartOfDynTable</Name>
				<Source><![CDATA[
    private boolean isNotPartOfDynTable(LedgerRRGEProperty_W _property)
    {
        boolean                         ret = true;
        LedgerRRGESectionProperties_W   sectionPropertyDyn, sectionPropertyDynTable, sectionPropertyRef;
        LedgerRRGETableLayouts_W        ledgerRRGETableLayouts;
        LedgerRRGETableColumns_W        ledgerRRGETableColumns;
    
        while select SectionRefRecId from sectionPropertyDyn
            where sectionPropertyDyn.LedgerRRGETemplates_W == document.LedgerRRGETemplates_W &&
                  sectionPropertyDyn.DynamicValueRefRecId == _property.property().RecId &&
                  sectionPropertyDyn.Dynamic == NoYes::Yes
        {
            select firstonly RecId from sectionPropertyDynTable
                where sectionPropertyDynTable.SectionRefRecId == sectionPropertyDyn.SectionRefRecId &&
                      sectionPropertyDynTable.Dynamic == NoYes::Yes &&
                      sectionPropertyDynTable.DynamicValueRefRecId != 0
            exists join sectionPropertyRef
                where sectionPropertyRef.RecId == sectionPropertyDynTable.DynamicValueRefRecId
            exists join ledgerRRGETableLayouts
                where ledgerRRGETableLayouts.SectionRefRecId == sectionPropertyRef.SectionRefRecId
            exists join ledgerRRGETableColumns
                where ledgerRRGETableColumns.TableLayoutRefRecId == ledgerRRGETableLayouts.RecId &&
                      ledgerRRGETableColumns.PropertyRefRecId == sectionPropertyRef.RecId;
    
            ret = ret && sectionPropertyDynTable.RecId == 0;
        }
    
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>