<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailCDXChannelSpecificData</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>RetailCDXChannelSpecificData</c> class is for using legacy query.
/// </summary>
public class RetailCDXChannelSpecificData extends RetailCDXDataFilterManagerBase
{
    // we are keeping these class level variables only for backward compat purpose, should not use them.
    RetailCDXDataSyncContext ctContext; // not used anymore

    RetailCDXChangeRefTable1 ref1; // not used anymore
    RetailCDXChangeRefTable2 ref2; // not used anymore
    RetailCDXChangeRefTable2 ref2_base; // not used anymore

    RetailCDXTargetChannel t0; // not used anymore

    container leContainer;
    Set newLEs;  // not used anymore
    Set newChannels; // not used anymore

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>paramDataSyncContext</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value of current data sync context.
    /// </summary>
    /// <param name="_ctContext">
    /// Thev value of <c>RetailCDXDataSyncContext</c>.
    /// </param>
    /// <returns>
    /// Current data sync context.
    /// </returns>
    public RetailCDXDataSyncContext paramDataSyncContext(RetailCDXDataSyncContext _ctContext)
    {
        ctContext = _ctContext;

        ref1 = ctContext.openChangeRefTable1();
        ref2 = ctContext.openChangeRefTable2();
        ref2_base = ctContext.openChangeRefTable2Base();

        t0.linkPhysicalTableInstance(ctContext.openTargetChannelTable());

        newLEs = new Set(Types::String);

        return super(_ctContext);
    }

]]></Source>
			</Method>
			<Method>
				<Name>paramLEContainer</Name>
				<Source><![CDATA[
    /// <summary>
    /// Get/Set container of companies that this data sync should go through.
    /// </summary>
    /// <param name="_leContainer">
    /// Container of companies that this data sync should go through.
    /// </param>
    /// <returns>
    /// Container of companies that this data sync should go through.
    /// </returns>
    public container paramLEContainer(container _leContainer = conNull())
    {
        leContainer = _leContainer;
        return super(_leContainer);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runQueryForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Run channel data filtering query for table.
    /// </summary>
    /// <param name = "tableName">Table name.</param>
    /// <param name = "isInitSync">True if this is initial sync; otherwise, false.</param>
    /// <param name = "isBaselineFullSync">True if the query is being run for calculate the baseline data set; otherwise, false. Optional, default false.</param>
    /// <remarks>
    /// The isBaselineFullSync argument name has nothing to do with the data sync type being full sync or delta sync, it is named incorrectly and the name is being kept for backward compatibility reasons.
    /// </remarks>
    public void runQueryForTable(TableName tableName, boolean isInitSync, boolean isBaselineFullSync = false)
    {
        super(tableName, isInitSync, isBaselineFullSync);
    }

]]></Source>
			</Method>
			<Method>
				<Name>executeBaselineDataSetExclusion</Name>
				<Source><![CDATA[
    /// <summary>
    /// Exclude baseline data from data set.
    /// </summary>
    /// <param name = "subJobAXSourceTables">The collection of the main table and its related tables for cases where the source table is a temp table.</param>
    internal void executeBaselineDataSetExclusion(container subJobAXSourceTables = conNull())
    {
        delete_from legacyFilteredRecordsTempTable
            exists join legacyFilteredRecordsTempTable_base
            where legacyFilteredRecordsTempTable.RefTableID == legacyFilteredRecordsTempTable_base.RefTableID
               && legacyFilteredRecordsTempTable.RefRecID == legacyFilteredRecordsTempTable_base.RefRecID;
    }

]]></Source>
			</Method>
			<Method>
				<Name>projectFields</Name>
				<Source><![CDATA[
    protected Query projectFields(Query query)
    {
        query.clearAllFields();
        QueryBuildDataSource sourceTableDS = RetailCDXCodeGen::getSourceTableDS(query);
        QueryBuildFieldList fieldList = sourceTableDS.fields();
        fieldList.addField(fieldName2id(sourceTableDS.table(), 'RecId'));

        return query;
    }

]]></Source>
			</Method>
			<Method>
				<Name>buildFieldMapping</Name>
				<Source><![CDATA[
    protected Map buildFieldMapping(Query query)
    {
        QueryBuildDataSource sourceTableDS = RetailCDXCodeGen::getSourceTableDS(query);
        Map fieldMap = new Map(Types::String, Types::Container);
        fieldMap.insert(fieldStr(RetailCDXChangeRefTable2, RefRecId), [sourceTableDS.uniqueId(), 'RecId']);

        return fieldMap;
    }

]]></Source>
			</Method>
			<Method>
				<Name>runInitQueryForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the full sync query for the table.
    /// </summary>
    /// <param name = "dataDistributionQuery">The <c>RetailCdxDataDistributionQuery</c> table buffer.</param>
    /// <param name = "isBaselineFullSync">Flag indicating if the full sync is for baseline data which will be used when handling new channels.</param>
    protected void runInitQueryForTable(RetailCdxDataDistributionQuery dataDistributionQuery, boolean isBaselineFullSync)
    {
        RetailTmpCDXTargetLegalEntity targetLegalEntities = this.dataSyncContext.openTargetLegalEntityTempTable();
        this.runFullSyncQueryForTable(dataDistributionQuery, isBaselineFullSync, targetLegalEntities);
    }

]]></Source>
			</Method>
			<Method>
				<Name>runFullSyncQueryForTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Runs the full sync query for the table using the specified list of legal entities in the RetailTmpCDXTargetLegalEntity table buffer.
    /// </summary>
    /// <param name = "dataDistributionQuery">The <c>RetailCdxDataDistributionQuery</c> table buffer.</param>
    /// <param name = "isBaselineFullSync">Flag indicating if the full sync is for baseline data which will be used when handling new channels.</param>
    /// <param name = "targetLegalEntities">The <c>RetailTmpCDXTargetLegalEntity</c> table buffer.</param>
    protected void runFullSyncQueryForTable(RetailCdxDataDistributionQuery dataDistributionQuery, boolean isBaselineFullSync, RetailTmpCDXTargetLegalEntity targetLegalEntities)
    {
        Query query = new Query(dataDistributionQuery.PackedQuery);

        if (dataSyncContext.paramIsDateFilterEnabled())
        {
            this.setQueryDateFilterField(query);
        }

        query = this.projectFields(query);
        query.skipAutoOrderBy(true);
        QueryRun queryRun = new QueryRun(query);

        QueryBuildDataSource targetChannelTempTableDS = queryRun.query().dataSourceName(#TargetChannelDSName);

        Map fieldMap = this.buildFieldMapping(query);
        QueryBuildDataSource sourceTableDS = RetailCDXCodeGen::getSourceTableDS(query);
        TableId sourceTableId = sourceTableDS.table();

        if (!isBaselineFullSync)
        {
            if (targetChannelTempTableDS)
            {
                queryRun.setRecord(targetChannelTempTable);
            }

            this.insert_QueryRecordset(legacyFilteredRecordsTempTable, fieldMap, queryRun, targetLegalEntities);
            update_recordset legacyFilteredRecordsTempTable 
                setting RefTableID = sourceTableId,
                        SkipRecord = dataDistributionQuery.shouldSkipDataSync() // if the table distribution node is tagged with entity type that is marked to be skipped then set skiprecord to true.
                where legacyFilteredRecordsTempTable.RefTableId == 0;
        }
        else
        {
            if (targetChannelTempTableDS)
            {
                queryRun.setRecord(targetChannelTempTable_baseline);
            }

            this.insert_QueryRecordset(legacyFilteredRecordsTempTable_base, fieldMap, queryRun, targetLegalEntities);
            update_recordset legacyFilteredRecordsTempTable_base 
                setting RefTableID = sourceTableId,
                        SkipRecord = dataDistributionQuery.shouldSkipDataSync()
                where legacyFilteredRecordsTempTable_base.RefTableId == 0;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>handleNewlyMappedChannels</Name>
				<Source><![CDATA[
    /// <summary>
    /// Handles data synchronization for channels that are mapped to an existing data group.
    /// The channels are considered as newly mapped to a datagroup if
    ///    - they are added to an existing datastore for a given datagroup or
    ///    - new datastore containing the channels is added to an existing datagroup 
    ///    - or an existing datastore is moved from one datagroup to another datagroup.
    /// </summary>
    /// <param name = "subJobAXSourceTables">A collection including the main source table for the data synchronization and all related tables if the source is a temp table.</param>
    internal void handleNewlyMappedChannels(container subJobAXSourceTables)
    {
        // delta sync which includes the newly mapped store will likely have more dataset as CDX will pick all relevant data for the newly mapped stores.
        // but some of the records which are picked as relevant for the new stores may have already been synced to the datastore. So to reduce the datasize we
        // calculate deltasyncOf(oldStores & newStores) - FullSyncOf(OldStores) + DeltaSyncOf(oldStores) -- this will give us the delta of the old stores and all records required
        // by the new stores excluding the records that are already synced to the existing datastore because the same data is also used by the oldStores.
        // Note that the deltasyncOf(oldStores & newStores) is already calculated before we call this method.

        RetailCdxChannelSpecificTable channelSpecificTable;
        str tableName;

        // for each table in axSourceTables && in RetailCdxChannelSpecificTable, run full sync on existing channels
        for (int i = 1; i <= conLen(subJobAXSourceTables); ++i)
        {
            tableName = conPeek(subJobAXSourceTables, i);

            select firstonly RecId from channelSpecificTable
                    where channelSpecificTable.RetailConnChannelSchema == this.dataSyncContext.getChannelSchema()
                       && channelSpecificTable.AXTableName == tableName;

            if (channelSpecificTable)
            {
                this.runQueryForTable(tableName, true, true);
            }
        }

        // exclude the fullsyncOf(oldstores) from the deltasyncOf(oldstore & newStores)
        this.executeBaselineDataSetExclusion(subJobAXSourceTables);

        // for each table in axSourceTables && in RetailCdxChannelSpecificTable, run delta sync on existing channels
        for (int i = 1; i <= conLen(subJobAXSourceTables); ++i)
        {
            tableName = conPeek(subJobAXSourceTables, i);

            select firstonly RecId from channelSpecificTable
                    where channelSpecificTable.RetailConnChannelSchema == dataSyncContext.getChannelSchema()
                       && channelSpecificTable.AXTableName == tableName;

            if (channelSpecificTable)
            {
                // note at this stage the new stores are removed from the target channel list.
                // so the below code calcuates the deltasyncOf(oldstores) and it adds it back to the RetailCDXChangeRefTable2,
                //  basically completing the deltasyncOf(oldStores & newStores) - FullSyncOf(OldStores) + DeltaSyncOf(oldStores) 
                this.runQueryForTable(tableName, false, true);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldUseCacheBasedQuery</Name>
				<Source><![CDATA[
    protected boolean shouldUseCacheBasedQuery()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getDataDistributionQueries</Name>
				<Source><![CDATA[
    internal container getDataDistributionQueries(TableId tableId)
    {
        return RetailCdxDataDistributionQuery::getLegacyDataDistributionQueries(tableId, dataSyncContext.getChannelSchema());
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>