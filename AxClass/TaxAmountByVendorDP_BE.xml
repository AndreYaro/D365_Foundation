<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxAmountByVendorDP_BE</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxAmountByVendorDP_BE</c> class is a report data provider to use to populate the temporary
///    table that is used by the <c>TaxAmountByVendor_BE</c> report.
/// </summary>
/// <remarks>
///    This section contains global variable declarations to be used in this class.
/// </remarks>
[SRSReportQuery(queryStr(TaxAmountByVendor_BE))]
public class TaxAmountByVendorDP_BE extends SrsReportDataProviderPreProcessTempDB
{
    TaxAmount   taxAmount;
    TaxAmount   amountPrVendor;

    TaxTrans    taxTransPrev;
    VendTrans   vendTransPrev;

    AmountMST   originPrCode;
    AmountMST   amountInclTaxPrCode;
    VendTrans   vendTrans_1;
    TaxTrans    taxTrans_1;
    TaxAmountByVendorTmp_BE     tmpTaxAmountByVendor_BE;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>amountInclTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the amount, including the tax value.
    /// </summary>
    /// <returns>
    ///    The amount value with tax.
    /// </returns>
    public AmountMST amountInclTax()
    {
        if (TaxGroupData::find(taxTrans_1.TaxGroup,taxTrans_1.TaxCode).UseTax)
        {
            return taxTrans_1.TaxBaseAmount;
        }
        else
        {
            return taxTrans_1.TaxBaseAmount + taxTrans_1.TaxInCostPriceMST + taxTrans_1.TaxAmount - taxTrans_1.TaxInCostPriceMST;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>baseAmount</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Calculates the basic amount to use to calculate the origin per code.
    /// </summary>
    /// <returns>
    ///    The basic amount.
    /// </returns>
    public AmountMST baseAmount()
    {
        if (TaxGroupData::find(taxTrans_1.TaxGroup,taxTrans_1.TaxCode).UseTax)
        {
            return taxTrans_1.TaxBaseAmount;
        }
        else
        {
            return taxTrans_1.TaxBaseAmount + taxTrans_1.TaxInCostPriceMST;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getTmpTaxAmountByVendor_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Queries the temporary table to retrieve the required date.
    /// </summary>
    /// <returns>
    ///    The required report data from temporary table.
    /// </returns>
    [
        SRSReportDataSet('TaxAmountByVendorTmp_BE')
    ]
    public TaxAmountByVendorTmp_BE getTmpTaxAmountByVendor_BE()
    {
        select tmpTaxAmountByVendor_BE;
        return tmpTaxAmountByVendor_BE;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeCodeValues</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Resets the values after calculating the totals for each tax code grouping.
    /// </summary>
    private void initializeCodeValues()
    {
        taxAmount           = 0;
        amountInclTaxPrCode = 0;
        originPrCode        = 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertTaxAmountByVendor_BE</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Inserts the required data into the temporary table.
    /// </summary>
    /// <param name="_vendTrans">
    ///    A <c>VendTrans</c> object to use to handle the data.
    /// </param>
    /// <param name="_taxTrans">
    ///    A <c>TaxTrans</c> object to use to handle the data.
    /// </param>
    public void insertTaxAmountByVendor_BE(VendTrans _vendTrans, TaxTrans _taxTrans)
    {
        tmpTaxAmountByVendor_BE.AccountNum          = _vendTrans.AccountNum;
        tmpTaxAmountByVendor_BE.VendorName          = this.vendorName();
        tmpTaxAmountByVendor_BE.TaxCode             = _taxTrans.TaxCode;
        tmpTaxAmountByVendor_BE.AmountInclTaxPrCode = amountInclTaxPrCode;
        tmpTaxAmountByVendor_BE.OriginPrCode        = originPrCode;
        tmpTaxAmountByVendor_BE.AmountPerVendor     = taxAmount;

        tmpTaxAmountByVendor_BE.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Processes the report business logic.
    /// </summary>
    /// <remarks>
    ///    This method provides the ability to write the report business logic. It will be called by SQL
    ///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
    ///    tables that will be returned to SSRS.
    /// </remarks>
    public void processReport()
    {
        QueryRun    qR;

        boolean     firstTime = true;
        qR = new QueryRun(this.parmQuery());

        while (qR.next())
        {
            vendTrans_1 = qR.get(tablenum(VendTrans));
            taxTrans_1  = qR.get(tablenum(TaxTrans));

            if (firstTime)
            {
                taxTransPrev  = taxTrans_1.data();
                vendTransPrev = vendTrans_1.data();
                firstTime     = false;
            }
            if (vendTransPrev.AccountNum == vendTrans_1.AccountNum)
            {
                if ( taxTrans_1.TaxCode != taxTransPrev.TaxCode)
                {
                    this.insertTaxAmountByVendor_BE(vendTransPrev,taxTransPrev);
                    this.initializeCodeValues();
                }
                if (! TaxGroupData::find(taxTrans_1.TaxGroup, taxTrans_1.TaxCode).UseTax)
                {
                    taxAmount           += taxTrans_1.TaxAmount - taxTrans_1.TaxInCostPriceMST;
                }
                originPrCode            += this.baseAmount();
                amountInclTaxPrCode     += this.amountInclTax();
            }
            else
            {
                this.insertTaxAmountByVendor_BE(vendTransPrev,taxTransPrev);
                this.initializeCodeValues();
                if (! TaxGroupData::find(taxTrans_1.TaxGroup, taxTrans_1.TaxCode).UseTax)
                {
                    taxAmount           += taxTrans_1.TaxAmount - taxTrans_1.TaxInCostPriceMST;
                }
                originPrCode          += this.baseAmount();
                amountInclTaxPrCode   += this.amountInclTax();
            }
            taxTransPrev  = taxTrans_1.data();
            vendTransPrev = vendTrans_1.data();
        }
        if (vendTransPrev)
        {
            this.insertTaxAmountByVendor_BE(vendTransPrev,taxTransPrev);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendorName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the vendor name for each vendor account.
    /// </summary>
    /// <returns>
    ///    The name value from the <c>VendTable</c> table.
    /// </returns>
    public Name vendorName()
    {
        VendTable   vendTable;

        select firstonly Party from vendTable
            where vendTable.AccountNum == vendTransPrev.AccountNum;

        return vendTable.name();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>