<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>WHSCatchWeightTagAutoSelectReportAsFinished</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>WHSCatchWeightTagAutoSelectReportAsFinished</c> class does automatic tag selection for inbound report as finished.
/// </summary>
internal final class WHSCatchWeightTagAutoSelectReportAsFinished extends WHSCatchWeightTagAutoSelect
{
    private InventTransId inventTransId;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>quantity</Name>
				<Source><![CDATA[
    protected InventHandlingQty quantity()
    {
        return pass.lookupNum(WHSWorkExecuteDisplayCatchWeightControls::CatchWeightTagQty);
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTagSelectionQuery</Name>
				<Source><![CDATA[
    protected Query createTagSelectionQuery()
    {
        return WHSCatchWeightTag::createRegisteredTagSelectionQuery(this.itemId(), this.inventDim(), inventTransId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updatePassOnCompletion</Name>
				<Source><![CDATA[
    protected void updatePassOnCompletion(WHSTransWeight _weight, container _selectedTags)
    {
        super(_weight, _selectedTags);

        pass.insert(WHSWorkExecuteDisplayCatchWeightControls::CatchWeight, _weight);
    }

]]></Source>
			</Method>
			<Method>
				<Name>newFromParams</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new instance of the <c>WHSCatchWeightTagAutoSelectReportAsFinished</c> class.
    /// </summary>
    /// <param name = "_mode">The work execution mode for the form.</param>
    /// <param name = "_pass">The form pass through.</param>
    /// <returns>A new instance of the <c>WHSCatchWeightTagAutoSelectReportAsFinished</c> class.</returns>
    internal static WHSCatchWeightTagAutoSelectReportAsFinished newFromParams(WHSWorkExecuteMode _mode, WHSRFPassThrough _pass)
    {
        WHSCatchWeightTagAutoSelectReportAsFinished autoSelect = new WHSCatchWeightTagAutoSelectReportAsFinished();

        if (InventTable::isCoByItem(_pass.parmItemId()))
        {
            autoSelect.inventTransId = PmfProdCoBy::findByProdIdItemIdInventDim(_pass.parmProdId(), _pass.parmItemId(), _pass.createInventDimFromPass()).InventTransId;
        }
        else
        {
            autoSelect.inventTransId = ProdTable::find(_pass.parmProdId()).InventTransId;
        }

        autoSelect.init(_mode, _pass);

        return autoSelect;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isInbound</Name>
				<Source><![CDATA[
    protected boolean isInbound()
    {
        return true;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>