<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjPriceListDP</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>ProjPriceListDP</c> class provides data for the <c>ProjPriceList</c> report.
/// </summary>
[
    SRSReportParameterAttribute(classStr(ProjPriceListContract))
]
class ProjPriceListDP extends SRSReportDataProviderBase
{
    TmpProjPriceList            tmpProjPriceList;
    PriceDiscGroup              priceDiscGroup;
    ProjHourSalesPrice          projHourSalesPrice;
    ProjCostSalesPrice          projCostSalesPrice;
    ProjRevenueSalesPrice       projRevenueSalesPrice;
    SMASalesPriceSubscription   smaSalesPriceSubscription;

    boolean                     salesPriceHour;
    boolean                     salesPriceExpense;
    boolean                     salesPriceFee;
    boolean                     salesPriceSubscription;

    ProjPriceGroupID            priceGroup;
    CurrencyCode                currencyId;
    ProjCategoryId              categoryId;
    ResourceRecId               resource;
    SMASubscriptionId           subscriptionId;
    TransDate                   validFrom;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getParameterValues</Name>
				<Source><![CDATA[
/// <summary>
///    Gets the parameter values and assigns them to the variables.
/// </summary>
private void getParameterValues()
{
    ProjPriceListContract contract = this.parmDataContract() as ProjPriceListContract;

    salesPriceHour = contract.parmSalesPriceHour();
    salesPriceExpense = contract.parmSalesPriceExpense();
    salesPriceFee = contract.parmSalesPriceFee();
    salesPriceSubscription = contract.parmSalesPriceSubscription();

    priceGroup = contract.parmPriceGroup();
    currencyId = contract.parmCurrencyId();
    categoryId = contract.parmCategoryId();
    resource = contract.parmResource();
    subscriptionId = contract.parmSubscriptionId();
    validFrom = contract.parmValidFrom();
}

]]></Source>
			</Method>
			<Method>
				<Name>getTmpProjPriceList</Name>
				<Source><![CDATA[
/// <summary>
///    Retrieves the data from the <c>TmpProjPriceList</c> table.
/// </summary>
/// <returns>
///    The data from the <c>TmpProjPriceList</c> table.
/// </returns>

[SRSReportDataSetAttribute('TmpProjPriceList')]
public TmpProjPriceList getTmpProjPriceList()
{
    select * from tmpProjPriceList;
    return tmpProjPriceList;
}

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjCostSalesPrice</Name>
				<Source><![CDATA[
void initFromProjCostSalesPrice()
{
    tmpProjPriceList.ProjPriceGroup      = priceDiscGroup.GroupId;
    tmpProjPriceList.ProjSalesPriceType  = ProjSalesPriceType::Expense;
    tmpProjPriceList.ValidFrom           = projCostSalesPrice.TransDate;
    tmpProjPriceList.CurrencyId          = projCostSalesPrice.CurrencyId;
    tmpProjPriceList.CategoryId          = projCostSalesPrice.CategoryId;
    tmpProjPriceList.Name                = ResourceFacade::getName(projCostSalesPrice.Resource);
    tmpProjPriceList.Resource            = projCostSalesPrice.Resource;
    tmpProjPriceList.ResourceId          = ResourceFacade::getID(projCostSalesPrice.Resource);
    tmpProjPriceList.ProjSalesPriceModel = projCostSalesPrice.ProjSalesPriceModel;
    tmpProjPriceList.ProjSalesPricing    = projCostSalesPrice.ProjSalesPricing;
}

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjHourSalesPrice</Name>
				<Source><![CDATA[
void initFromProjHourSalesPrice()
{
    tmpProjPriceList.ProjPriceGroup      = priceDiscGroup.GroupId;
    tmpProjPriceList.ProjSalesPriceType  = ProjSalesPriceType::Hour;
    tmpProjPriceList.ValidFrom           = projHourSalesPrice.TransDate;
    tmpProjPriceList.CurrencyId          = projHourSalesPrice.CurrencyId;
    tmpProjPriceList.CategoryId          = projHourSalesPrice.CategoryId;
    tmpProjPriceList.Name                = ResourceFacade::getName(projHourSalesPrice.Resource);
    tmpProjPriceList.Resource            = projHourSalesPrice.Resource;
    tmpProjPriceList.ResourceId          = ResourceFacade::getID(projHourSalesPrice.Resource);
    tmpProjPriceList.ProjSalesPriceModel = projHourSalesPrice.ProjSalesPriceModel;
    tmpProjPriceList.ProjSalesPricing    = projHourSalesPrice.ProjSalesPricing;
}

]]></Source>
			</Method>
			<Method>
				<Name>initFromProjRevenueSalesPrice</Name>
				<Source><![CDATA[
void initFromProjRevenueSalesPrice()
{
    tmpProjPriceList.ProjPriceGroup      = priceDiscGroup.GroupId;
    tmpProjPriceList.ProjSalesPriceType  = ProjSalesPriceType::Fee;
    tmpProjPriceList.ValidFrom           = projRevenueSalesPrice.TransDate;
    tmpProjPriceList.CurrencyId          = projRevenueSalesPrice.CurrencyId;
    tmpProjPriceList.CategoryId          = projRevenueSalesPrice.CategoryId;
    tmpProjPriceList.Name                = ResourceFacade::getName(projRevenueSalesPrice.Resource);
    tmpProjPriceList.Resource            = projRevenueSalesPrice.Resource;
    tmpProjPriceList.ResourceId          = ResourceFacade::getID(projRevenueSalesPrice.Resource);
    tmpProjPriceList.ProjSalesPricing    = projRevenueSalesPrice.SalesPrice;
}

]]></Source>
			</Method>
			<Method>
				<Name>initFromSMASalesPriceSubscription</Name>
				<Source><![CDATA[
void initFromSMASalesPriceSubscription()
{
    tmpProjPriceList.ProjPriceGroup      = priceDiscGroup.GroupId;
    tmpProjPriceList.ProjSalesPriceType  = ProjSalesPriceType::Subscription;
    tmpProjPriceList.ValidFrom           = smaSalesPriceSubscription.ValidFrom;
    tmpProjPriceList.CurrencyId          = smaSalesPriceSubscription.CurrencyCode;
    tmpProjPriceList.CategoryId          = smaSalesPriceSubscription.CategoryId;
    tmpProjPriceList.SubscriptionId      = smaSalesPriceSubscription.smaSubscriptionId;
    tmpProjPriceList.ProjSalesPricing    = smaSalesPriceSubscription.SalesPrice;
}

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
/// <summary>
///    Processes the report business logic.
/// </summary>
/// <remarks>
///    This method provides the ability to write the report business logic. It will be called by SQL
///    Server Reporting Services (SSRS) at run time. The method should compute data and populate the data
///    tables that will be returned to SSRS.
/// </remarks>
public void processReport()
{
    Query                   query;
    Query                   querySalesPrice;
    QueryRun                queryRun;
    QueryRun                queryRunSalesPrice;

    QueryBuildDataSource    queryBuildDS_PriceGroup;

    QueryBuildRange         criteriaProjPriceGroup;
    QueryBuildRange         criteriaPriceGroupType;
    QueryBuildRange         criteriaPriceGroupModule;
    QueryBuildRange         criteriaCurrencyId;
    QueryBuildRange         criteriaCategoryId;
    QueryBuildRange         criteriaEmployeeId;
    QueryBuildRange         criteriaValidFrom;
    QueryBuildRange         criteriaValidFor;

    this.getParameterValues();

    // Query in PriceDiscGroup, find matching price group
    query   =  new Query();
    queryBuildDS_PriceGroup  = query.addDataSource(tableNum(PriceDiscGroup));

    criteriaProjPriceGroup   = queryBuildDS_PriceGroup.addRange(fieldNum(PriceDiscGroup, GroupId));
    criteriaProjPriceGroup.value(priceGroup);
    criteriaPriceGroupType   = queryBuildDS_PriceGroup.addRange(fieldNum(PriceDiscGroup, Type));
    criteriaPriceGroupType.value(any2Str(PriceGroupType::PriceGroup));
    criteriaPriceGroupModule = queryBuildDS_PriceGroup.addRange(fieldNum(PriceDiscGroup, Module));
    criteriaPriceGroupModule.value(any2Str(ModuleInventCustVend::Cust));

    queryRun = new QueryRun(query);

    while (queryRun.next())
    {
        priceDiscGroup = queryRun.get(tableNum(PriceDiscGroup));

        if (salesPriceHour)
        {
            // Query in ProjHourSalesPrice, find matching records
            querySalesPrice         = new Query();
            queryBuildDS_PriceGroup = querySalesPrice.addDataSource(tableNum(ProjHourSalesPrice));

            criteriaValidFor        = queryBuildDS_PriceGroup.addRange(fieldNum(ProjHourSalesPrice, ProjValidFor));
            criteriaValidFor.value(int2str(TableGroupAll::GroupId));
            criteriaProjPriceGroup  = queryBuildDS_PriceGroup.addRange(fieldNum(ProjHourSalesPrice, ProjPriceGroup));
            criteriaProjPriceGroup.value(priceDiscGroup.GroupId);
            criteriaCurrencyId      = queryBuildDS_PriceGroup.addRange(fieldNum(ProjHourSalesPrice, CurrencyId));
            criteriaCurrencyId.value(currencyId);
            criteriaCategoryId      = queryBuildDS_PriceGroup.addRange(fieldNum(ProjHourSalesPrice, CategoryId));
            criteriaCategoryId.value(categoryId);
            criteriaEmployeeId      = queryBuildDS_PriceGroup.addRange(fieldNum(ProjHourSalesPrice, Resource));
            criteriaEmployeeId.value(queryValue(resource));
            criteriaValidFrom       = queryBuildDS_PriceGroup.addRange(fieldNum(ProjHourSalesPrice, TransDate));
            criteriaValidFrom.value(date2str(validFrom,-1,-1,-1,-1,-1,-1, DateFlags::FormatAll));

            queryRunSalesPrice      = new QueryRun(querySalesPrice);

            // Save to tmpProjPriceList table
            while (queryRunSalesPrice.next())
            {
                projHourSalesPrice = queryRunSalesPrice.get(tableNum(ProjHourSalesPrice));
                tmpProjPriceList.clear();
                this.initFromProjHourSalesPrice();
                tmpProjPriceList.insert();
            }
        }

        if (salesPriceExpense)
        {
            // Query in ProjCostSalesPrice, find matching records
            querySalesPrice         = new Query();
            queryBuildDS_PriceGroup = querySalesPrice.addDataSource(tableNum(ProjCostSalesPrice));

            criteriaValidFor        = queryBuildDS_PriceGroup.addRange(fieldNum(ProjCostSalesPrice, ProjValidFor));
            criteriaValidFor.value(int2str(TableGroupAll::GroupId));
            criteriaProjPriceGroup  = queryBuildDS_PriceGroup.addRange(fieldNum(ProjCostSalesPrice, ProjPriceGroup));
            criteriaProjPriceGroup.value(priceDiscGroup.GroupId);
            criteriaCurrencyId      = queryBuildDS_PriceGroup.addRange(fieldNum(ProjCostSalesPrice, CurrencyId));
            criteriaCurrencyId.value(currencyId);
            criteriaCategoryId      = queryBuildDS_PriceGroup.addRange(fieldNum(ProjCostSalesPrice, CategoryId));
            criteriaCategoryId.value(categoryId);
            criteriaEmployeeId      = queryBuildDS_PriceGroup.addRange(fieldNum(ProjCostSalesPrice, Resource));
            criteriaEmployeeId.value(queryValue(resource));
            criteriaValidFrom       = queryBuildDS_PriceGroup.addRange(fieldNum(ProjCostSalesPrice, TransDate));
            criteriaValidFrom.value(date2str(validFrom,-1,-1,-1,-1,-1,-1, DateFlags::FormatAll));

            queryRunSalesPrice      = new QueryRun(querySalesPrice);

            // Save to tmpProjPriceList table
            while (queryRunSalesPrice.next())
            {
                projCostSalesPrice = queryRunSalesPrice.get(tableNum(ProjCostSalesPrice));
                tmpProjPriceList.clear();
                this.initFromProjCostSalesPrice();
                tmpProjPriceList.insert();
            }
        }

        if (salesPriceFee)
        {
            // Query in ProjRevenueSalesPrice, find matching records
            querySalesPrice         = new Query();
            queryBuildDS_PriceGroup = querySalesPrice.addDataSource(tableNum(ProjRevenueSalesPrice));

            criteriaValidFor        = queryBuildDS_PriceGroup.addRange(fieldNum(ProjRevenueSalesPrice, ProjValidFor));
            criteriaValidFor.value(int2str(TableGroupAll::GroupId));
            criteriaProjPriceGroup  = queryBuildDS_PriceGroup.addRange(fieldNum(ProjRevenueSalesPrice, ProjPriceGroup));
            criteriaProjPriceGroup.value(priceDiscGroup.GroupId);
            criteriaCurrencyId      = queryBuildDS_PriceGroup.addRange(fieldNum(ProjRevenueSalesPrice, CurrencyId));
            criteriaCurrencyId.value(currencyId);
            criteriaCategoryId      = queryBuildDS_PriceGroup.addRange(fieldNum(ProjRevenueSalesPrice, CategoryId));
            criteriaCategoryId.value(categoryId);
            criteriaEmployeeId      = queryBuildDS_PriceGroup.addRange(fieldNum(ProjRevenueSalesPrice, Resource));
            criteriaEmployeeId.value(queryValue(resource));
            criteriaValidFrom       = queryBuildDS_PriceGroup.addRange(fieldNum(ProjRevenueSalesPrice, TransDate));
            criteriaValidFrom.value(date2str(validFrom,-1,-1,-1,-1,-1,-1, DateFlags::FormatAll));

            queryRunSalesPrice      = new QueryRun(querySalesPrice);

            // Save to tmpProjPriceList table
            while (queryRunSalesPrice.next())
            {
                projRevenueSalesPrice = queryRunSalesPrice.get(tableNum(ProjRevenueSalesPrice));
                tmpProjPriceList.clear();
                this.initFromProjRevenueSalesPrice();
                tmpProjPriceList.insert();
            }
        }

        if (salesPriceSubscription)
        {
            // Query in SMASalesPriceSubscription, find matching records
            querySalesPrice         = new Query();
            queryBuildDS_PriceGroup = querySalesPrice.addDataSource(tableNum(SMASalesPriceSubscription));

            criteriaValidFor        = queryBuildDS_PriceGroup.addRange(fieldNum(SMASalesPriceSubscription, ProjValidFor));
            criteriaValidFor.value(int2str(TableGroupAll::GroupId));
            criteriaProjPriceGroup  = queryBuildDS_PriceGroup.addRange(fieldNum(SMASalesPriceSubscription, ProjPriceGroup));
            criteriaProjPriceGroup.value(priceDiscGroup.GroupId);
            criteriaCurrencyId      = queryBuildDS_PriceGroup.addRange(fieldNum(SMASalesPriceSubscription, CurrencyCode));
            criteriaCurrencyId.value(currencyId);
            criteriaCategoryId      = queryBuildDS_PriceGroup.addRange(fieldNum(SMASalesPriceSubscription, CategoryId));
            criteriaCategoryId.value(categoryId);
            criteriaEmployeeId      = queryBuildDS_PriceGroup.addRange(fieldNum(SMASalesPriceSubscription, smaSubscriptionId));
            criteriaEmployeeId.value(subscriptionId);
            criteriaValidFrom       = queryBuildDS_PriceGroup.addRange(fieldNum(SMASalesPriceSubscription, ValidFrom));
            criteriaValidFrom.value(date2str(validFrom,-1,-1,-1,-1,-1,-1, DateFlags::FormatAll));

            queryRunSalesPrice      = new QueryRun(querySalesPrice);

            // Save to tmpProjPriceList table
            while (queryRunSalesPrice.next())
            {
                smaSalesPriceSubscription = queryRunSalesPrice.get(tableNum(SMASalesPriceSubscription));
                tmpProjPriceList.clear();
                this.initFromSMASalesPriceSubscription();
                tmpProjPriceList.insert();
            }
        }
    }
}

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>