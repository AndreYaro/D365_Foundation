<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TAMFundCategoryTreeDatasource</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The class <c>TAMFundCategoryTreeDatasource</c> controls the
/// category tree on the fund detail form.
/// </summary>
class TAMFundCategoryTreeDatasource extends CCFormTreeDatasource
{
    TAMFundTable                  currentSelectedFund;
    ImageListAppl_EcoResCategory    ecoresImageList;

    QueryBuildRange                 formDataSourceRange;
    #resAppl
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildSubTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Builds the subtree nodes in the tree control.
    /// </summary>
    /// <param name="_parentIdx">
    /// The index of the item in the tree for which to build the subtree.
    /// </param>
    /// <param name="_parentVaue">
    /// The <c>CategoryID</c> of the selected node.
    /// </param>
    /// <param name="_rebuild">
    /// A <c>Boolean</c> value that indicates whether to rebuild the tree from nothing.
    /// </param>
    /// <returns>
    /// The index of the currently selected item in the tree.
    /// </returns>
    public int buildSubTree(int _parentIdx, anytype _parentVaue, boolean _rebuild = false)
    {
        FormTreeItem    formTreeItem;
        int             children;
        int             idx, idxCurrentRecord;
        int             hdl;
        boolean         stateExpandedOnce, expandBranch;
        TAMFundCustCategory  tamFundCustCategory, tamFundCustCategoryParent;
        int             idxRoot            = tree.getRoot();
        boolean         isAMatch           = false;

        tree.lockWindowUpdate(true);

        if (!_rebuild)
        {
            formTreeItem = tree.getItem(_parentIdx);
            if (formTreeItem)
            {
                stateExpandedOnce = formTreeItem.stateExpandedOnce();
            }
        }

        if (_rebuild || !stateExpandedOnce)
        {
            // Delete existing subtree.
            if (_rebuild)
            {
                hdl = tree.getChild(_parentIdx);
                while (hdl)
                {
                    ttsBegin;
                    tree.delete(hdl);
                    ttsCommit;

                    hdl = tree.getChild(_parentIdx);
                }
            }
            [SelectedData] = selectionStack.pop();

            children = 0;

            tamFundCustCategoryParent    = TAMFundCustCategory::find(_parentVaue);

            // Refresh this node.
            formTreeItem = tree.getItem(_parentIdx);
            if (formTreeItem)
            {
                formTreeItem.text(this.itemTextEx(tamFundCustCategoryParent.RecId, this.itemDescription(tamFundCustCategoryParent), ''));
                tree.setItem(formTreeItem);
            }

            tamFundCustCategory          = tamFundCustCategoryParent.getChildren(false,
                                                                        true);

            while (tamFundCustCategory)
            {
                isAMatch     = false;
                expandBranch = false;

                formTreeItem = new FormTreeItem(this.itemTextEx(tamFundCustCategory.RecId, this.itemDescription(tamFundCustCategory), ''),
                                                this.image(),
                                                (tamFundCustCategory.getChildCount(true) != 0),
                                                tamFundCustCategory.RecId);

                idx = tree.addItem(_parentIdx, 0, formTreeItem);

                formTreeItem = tree.getItem(idx);
                formTreeItem.overlayImage(this.overlayImage(tamFundCustCategory));
                tree.setItem( formTreeItem );

                if (basicRecId == tamFundCustCategory.RecId)
                {
                    idxCurrentRecord = idx;
                }

                children++;

                if (selectionStack.qty())
                {
                    if (tamFundCustCategory.RecId == SelectedData)
                    {
                        tree.expand(idx, FormTreeExpand::Expand);
                    }
                }
                else
                {
                    if (tamFundCustCategory.RecId == SelectedData)
                    {
                        selectIdx = idx;
                    }
                }

                if (expandBranch)
                {
                    tree.expand(idx, FormTreeExpand::Expand);
                }

                next tamFundCustCategory;
            }

            formTreeItem = tree.getItem(_parentIdx);
            formTreeItem.children(children);
            formTreeItem.stateExpandedOnce(true);
            tree.setItem(formTreeItem);
        }
        tree.lockWindowUpdate(false);
        return idxCurrentRecord;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies a category from the customer hierarchy to the current fund hierarchy and all
    /// of it's children.
    /// </summary>
    /// <param name="_origTree">
    /// Form control that contains the tree being copied.
    /// </param>
    public void copyCategory(FormTreeControl _origTree)
    {
        MCRCustCategory mcrCustCategory;
        int idx;

        if (tree && tree.getRoot() == 0)
        {
            TAMFundCustCategory::createHierarchyRoot(currentSelectedFund.FundID, currentSelectedFund.FundID);
        }

        idx = _origTree.getFirstSelected();
        while (idx)
        {
            mcrCustCategory = MCRCustCategory::find(_origTree.getItem(idx).data());

            this.copyParents(_origTree, mcrCustCategory);
            // Must expand the node before the tree knows this node has children.
            _origTree.expand(idx, FormTreeExpand::Expand);
            this.copyChildren(_origTree, _origTree.getChild(idx));
            _origTree.expand(idx, FormTreeExpand::Collapse);

            idx = _origTree.getNextSelected(idx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyChildren</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies all the children from the passed tree to
    /// the fund hierarchy.
    /// </summary>
    /// <param name="_origTree">
    /// Form control of original tree.
    /// </param>
    /// <param name="_currentIdx">
    /// Numerical value that indicates which node
    /// in the passed tree structure that needs to be copied.
    /// </param>
    public void copyChildren(FormTreeControl _origTree, int _currentIdx)
    {
        FormTreeItem    node;
        int             idx;
        int             currentIdx;
        StackBase       nodeStack;

        if (_currentIdx)
        {
            nodeStack = new StackBase(Types::Integer);
            nodeStack.push(_currentIdx);

            // If node has no children, check for siblings.
            while (nodeStack.count())
            {
                currentIdx = nodeStack.pop();
                _origTree.expand(currentIdx, FormTreeExpand::Expand);
                node = _origTree.getItem(currentIdx);
                this.processNode(node);

                idx = _origTree.getNextSibling(currentIdx);

                if (idx)
                {
                    nodeStack.push(idx);
                }

                // Get index of next child.
                idx = _origTree.getChild(currentIdx);
                if (idx)
                {
                    nodeStack.push(idx);
                }

                // If no children or siblings, then it's a leaf and just need to create it and return.
                _origTree.expand(currentIdx, FormTreeExpand::Collapse);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>processNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copy current node and deal with the root.
    /// </summary>
    /// <param name="_node">
    /// A form tree item node.
    /// </param>
    private void processNode(FormTreeItem _node)
    {
        MCRCustCategory mcrCustCategory, mcrCustCategory_parent;
        TAMFundCustCategory tamFundCustCategory_parent;
        mcrCustCategory = MCRCustCategory::find(_node.data());

        // Copy current node.
        mcrCustCategory_parent = MCRCustCategory::find(mcrCustCategory.ParentCategory);
        if (mcrCustCategory_parent.ParentCategory)
        {
            tamFundCustCategory_parent = TAMFundCustCategory::findName(currentSelectedFund.FundID, mcrCustCategory_parent.Name);
        }
        // Dealing with the root.
        else
        {
            tamFundCustCategory_parent = TAMFundCustCategory::getRoot(currentSelectedFund.FundID);
        }
        if (tamFundCustCategory_parent)
        {
            this.CopyFromCust(mcrCustCategory, tamFundCustCategory_parent);
        }
        else
        {
            throw error(strFmt("@MCR39527", mcrCustCategory.Name));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyFromCust</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the category from the customer hierarchy to the fund
    /// hierarchy.
    /// </summary>
    /// <param name="_mcrCustCategory">
    /// Category being copied.
    /// </param>
    /// <param name="_tamFundCustCategory_parent">
    /// Parent of new category.
    /// </param>
    /// <returns>
    /// The new category.
    /// </returns>
    public TAMFundCustCategory copyFromCust(MCRCustCategory _mcrCustCategory, TAMFundCustCategory _tamFundCustCategory_parent)
    {
        TAMFundCustCategory tamFundCustCategory_new;
        const str hyphen = '-';

        tamFundCustCategory_new.initValue();
        tamFundCustCategory_new.initFromParent(_tamFundCustCategory_parent);
        tamFundCustCategory_new.Customer = _mcrCustCategory.Customer;

        CustTable custTable = CustTable::findRecId(_mcrCustCategory.Customer);

        if (custTable)
        {
            tamFundCustCategory_new.Name = custTable.AccountNum + hyphen + _mcrCustCategory.Name;
        }
        else
        {
            tamFundCustCategory_new.Name = _mcrCustCategory.Name;
        }

        tamFundCustCategory_new.addToHierarchy();

        return tamFundCustCategory_new;
    }

]]></Source>
			</Method>
			<Method>
				<Name>copyParents</Name>
				<Source><![CDATA[
    /// <summary>
    /// Copies the parents of the passed record, all the way up
    /// until the root or a node with the same name exists.
    /// </summary>
    /// <param name="_origTree">
    /// The tree that is being copied.
    /// </param>
    /// <param name="_selectedRecord">
    /// The current record in passed tree.
    /// </param>
    private void copyParents(FormTreeControl _origTree, MCRCustCategory _selectedRecord)
    {
        EcoResCategoryHierarchyId categoryHierarchy;
        MCRCustCategory mcrCustCategory, mcrCustCategory_parent;
        TAMFundCustCategory tamFundCustCategory_Exists, tamFundCustCategory_new, tamFundCustCategory_parent;
        RecordLinkList parentList = new RecordLinkList();
        boolean        moreRecs = false;

        mcrCustCategory = _selectedRecord;
        if (mcrCustCategory.ParentCategory)
        {
            categoryHierarchy = mcrCustCategory.CategoryHierarchy;
            parentList.ins(mcrCustCategory);
            mcrCustCategory_parent = MCRCustCategory::find(mcrCustCategory.ParentCategory);

            while (mcrCustCategory_parent)
            {
                tamFundCustCategory_Exists = TAMFundCustCategory::findName(currentSelectedFund.FundID, mcrCustCategory_parent.Name);

                if (tamFundCustCategory_Exists)
                {
                    break;
                }
                // Don't create root, it already exists, just may not have been created from this hierarchy.
                if (!mcrCustCategory_parent.ParentCategory)
                {
                    tamFundCustCategory_Exists = TAMFundCustCategory::find(tree.getItem(tree.getRoot()).data());
                    break;
                }
                parentList.ins(mcrCustCategory_parent);
                mcrCustCategory_parent = MCRCustCategory::find(mcrCustCategory_parent.ParentCategory);
            }
            tamFundCustCategory_parent = tamFundCustCategory_Exists;
            moreRecs = parentList.last();
            while (moreRecs)
            {
                mcrCustCategory = parentList.peek();
                tamFundCustCategory_new = this.CopyFromCust(mcrCustCategory, tamFundCustCategory_parent);
                tamFundCustCategory_parent.data(tamFundCustCategory_new);
                tamFundCustCategory_new.clear();

                moreRecs = parentList.prev();
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>create</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a node in the current tree.
    /// </summary>
    /// <param name="_custRecID">
    /// The <c>RecID</c> of the customer this relates to, if it is a normal
    /// node then no customer is associated.
    /// </param>
    /// <param name="_origName">
    /// The name to be given to the node.
    /// </param>
    public void create(RecId _custRecID = 0, EcoResCategoryName _origName = '')
    {
        int                     idx = tree.getSelection();
        int                     idxCurrentRecord;
        int                     children;
        TAMFundCustCategory          tamFundCustCategory;
        TAMFundCustCategory          tamFundCustParentCategory;
        FormTreeItem            formTreeItem;
        Common                  childRecord;

        if (!formDataSource.leaveRecord())
        {
            return;
        }

        tree.expand(idx, FormTreeExpand::Expand);

        tamFundCustParentCategory = TAMFundCustCategory::find(tree.getItem(idx).data());
        tamFundCustCategory.initValue();
        tamFundCustCategory.initFromParent(tamFundCustParentCategory);

        tamFundCustCategory.Customer = _custRecID;
        tamFundCustCategory.Name = _origName;
        if (!tamFundCustCategory.Name)
        {
            tamFundCustCategory.Name  = TAMFundCustCategory::findNonExistNameInHierarchy(currentSelectedFund.FundID);
        }

        if (tamFundCustCategory.addToHierarchy() && tamFundCustCategory.RecId)
        {
            formDataSource.research();
            basicRecId = tamFundCustCategory.RecId;
            childRecord = tamFundCustCategory;
            tree.setFocus();

            formTreeItem = tree.getItem(idx);
            children = formTreeItem.children();
            formTreeItem.children(children+1);
            formTreeItem.stateExpandedOnce(true);
            formTreeItem.data(tamFundCustParentCategory.RecId);
            tree.setItem(formTreeItem);

            formTreeItem = new FormTreeItem(this.itemTextEx(childRecord.(id), this.itemDescription(childRecord), ''),
                                            this.image(),
                                            0,
                                            basicRecId);

            idxCurrentRecord = tree.addItem(idx, 0, formTreeItem);
            formTreeItem = tree.getItem(idxCurrentRecord);
            formTreeItem.overlayImage(this.overlayImage(childRecord));
            tree.setItem( formTreeItem );
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>delete</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes the currently selected category nodes.
    /// </summary>
    /// <param name="_noConfirmationDialog">
    /// A <c>Boolean</c> value that indicates whether to display a confirmation dialog box.
    /// </param>
    public void delete(boolean _noConfirmationDialog = false)
    {
        int             idx;
        int             idxParent;
        FormTreeItem    formTreeItem;
        boolean         hasChildren;
        TAMFundCustCategory  tamFundCustCategory = null;
        container       c;
        int             counter = 1;

        if (_noConfirmationDialog || Box::yesNo("@MCR39528", DialogButton::No) == DialogButton::Yes)
        {
            // Deletion will remove the nodes from the selected list
            //  so need to store them before trying to delete and loop over the container.
            idx            = tree.getFirstSelected();
            while (idx)
            {
                c += idx;
                idx = tree.getNextSelected(idx);
            }
            idx = conPeek(c, counter);

            while (counter <= conLen(c))
            {
                idxParent      = tree.getParent(idx);
                formTreeItem   = tree.getItem(idx);
                // There's a chance the last deletion deleted the next node to be removed
                //      so need to check to be sure it still exists.
                if (formTreeItem)
                {
                    hasChildren   = formTreeItem.children();

                    tamFundCustCategory = TAMFundCustCategory::find(formTreeItem.data(), true);

                    formDataSource.reread();

                    tamFundCustCategory.deleteSubTree();
                    tree.select(idxParent);

                    formDataSource.reread();
                    formDataSource.refresh();

                    if (idxParent == 0)
                    {
                        tree.deleteAll();
                        return;
                    }

                    tree.setFocus();

                    ttsBegin;
                    tree.delete(idx);
                    ttsCommit;

                    tree.select(idxParent);
                    formTreeItem    = tree.getItem(idxParent);
                    formTreeItem.children(tree.getChild((formTreeItem.idx())));
                    tree.setItem(formTreeItem);
                }
                counter++;
                idx = conPeek(c, counter);
            }
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSelectedCategory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns the <c>TAMFundCustCategory</c> record that is currently
    /// selected in the form control.
    /// </summary>
    /// <param name="_forUpdate">
    /// A <c>Boolean</c> value that defines whether or not the tree is selected for update.
    /// </param>
    /// <returns>
    /// Returns the <c>TAMFundCustCategory</c> record that is currently
    /// selected in the form control.
    /// </returns>
    public TAMFundCustCategory getSelectedCategory(boolean _forUpdate = false)
    {
        TAMFundCustCategory tamFundCustCategory;

        tamFundCustCategory = TAMFundCustCategory::find(tree.getItem(tree.getSelection()).data(), _forUpdate);
        return tamFundCustCategory;
    }

]]></Source>
			</Method>
			<Method>
				<Name>image</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the image needed depending on the type of category element represented by the current
    /// record.
    /// </summary>
    /// <param name="_childRecord">
    /// The current record.
    /// </param>
    /// <returns>
    /// The ID of the image.
    /// </returns>
    public int image(Common _childRecord = null)
    {
        TAMFundCustCategory tamFundCustCategory;

        if (_childRecord.TableId == tableNum(TAMFundCustCategory))
        {
            tamFundCustCategory = _childRecord as TAMFundCustCategory;
            if (tamFundCustCategory.Customer)
            {
                // Both root & ancestor categories share the same icon.
                ecoresImageList.add(#ImageCustomer);
                return ecoresImageList.image(#ImageCustomer);
            }
            else
            {
                // Both root & ancestor categories share the same icon.
                ecoresImageList.add(#ImageSetupValidationAssignCategories);
                return ecoresImageList.image(#ImageSetupValidationAssignCategories);
            }
        }
        else
        {
            // Both root & ancestor categories share the same icon.
            ecoresImageList.add(#ImageSetupValidationAssignCategories);
            return ecoresImageList.image(#ImageSetupValidationAssignCategories);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>imageList</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a list of images referenced by the ID retrieved by the
    /// <c>TAMFundCategoryTreeDatasource.image</c> method.
    /// </summary>
    /// <returns>
    /// The image list.
    /// </returns>
    public Imagelist imageList()
    {
        return ecoresImageList.imageList();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRoot</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new root node in the tree control.
    /// </summary>
    /// <param name="_txt">
    ///    The category name text.
    /// </param>
    /// <param name="_rootValue">
    ///    The root node category ID.
    /// </param>
    /// <param name="_rootImage">
    ///    The ID of the image to be displayed for the root node.
    /// </param>
    public void initRoot(str 250 _txt, anytype _rootValue, int _rootImage = 1)
    {
        super(_txt, _RootValue, _rootImage);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initValue</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes a new tree record.
    /// </summary>
    /// <param name="_common">
    ///    The record to initialize.
    /// </param>
    /// <returns>
    ///    The initialized record.
    /// </returns>
    /// <remarks>
    ///    Default names and descriptions are given.
    /// </remarks>
    public Common initValue(Common _common)
    {
        Common ret;

        ret = super(_common);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>itemTextEx</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the tree node item text to be displayed.
    /// </summary>
    /// <param name="_idTxt">
    /// The category ID text.
    /// </param>
    /// <param name="_descriptionTxt">
    /// The current category name text.
    /// </param>
    /// <param name="_friendlyName">
    /// The current category friendly name text.
    /// </param>
    /// <returns>
    /// The concatenated tree node item text for display purposes.
    /// </returns>
    /// <remarks>
    /// This method is used to control whether the commodity code will be displayed together with the
    /// category name in the tree view control.
    /// </remarks>
    str itemTextEx(anytype _idTxt, anytype _descriptionTxt, str _friendlyName)
    {
        str ret;
        ret = this.itemText(_idTxt, _descriptionTxt);
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadPosition</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Loads the initial position in the tree control which is controlled by this class.
    /// </summary>
    public void loadPosition()
    {
        Integer         version;

        if (useLastValue)
        {
            if (xSysLastValue::getLast(this))
                [version, #CurrentList] = xSysLastValue::getValue(this.lastValueDataAreaId(),
                                                                 this.lastValueUserId(),
                                                                 this.lastValueType(),
                                                                 this.lastValueElementName());
        }

        // This is the reason to overload CCFormTreeDatasource.loadPosition(),
        // since the inherited code causes AnyType RecId data to change type to String.
        if (version != #CurrentVersion)
        {
            SelectedData = TAMFundCustCategory::getRoot(currentSelectedFund.FundID).RecId;
        }

        this.getRelations(SelectedData);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a new <c>TAMFundCustCategoryTreeDatasource</c> object.
    /// </summary>
    /// <param name="_formDataSource">
    /// Datasource of the related tree control.
    /// </param>
    /// <param name="_formTreeControl">
    /// The tree control being managed.
    /// </param>
    /// <param name="_id">
    /// The ID of the current node.
    /// </param>
    /// <param name="_parentId">
    /// The ID of the parent node.
    /// </param>
    /// <param name="_txtField">
    /// The field being used to set the name of the current node.
    /// </param>
    /// <param name="_showIdInDescription">
    /// A <c>boolean</c> value that determines whether or not to show
    /// the ID in the node description.
    /// </param>
    /// <param name="_useLastValue">
    /// A <c>boolean</c> value that determines whether or not to use
    /// the last value.
    /// </param>
    /// <param name="_id2">
    /// The second ID.
    /// </param>
    /// <param name="_tamFundTable">
    /// The related record the hierarchy is tied to.
    /// </param>
    /// <param name="_sortField">
    /// The field to sort the nodes on.
    /// </param>
    public void new(FormDataSource _formDataSource,
                    FormTreeControl _formTreeControl,
                    FieldId _id,
                    FieldId _parentId,
                    anytype _txtField,
                    boolean _showIdInDescription,
                    boolean _useLastValue,
                    FieldId _id2,
                    TAMFundTable         _tamFundTable,
                    FieldId _sortField = fieldNum(EcoResCategory, NestedSetLeft))
    {
        TAMFundCustCategory  tamFundCustCategory;
        Query           query = _formDataSource.query();
        #DEFINE.RECID('RecId')

        currentSelectedFund = _tamFundTable;
        ecoresImageList                  = new ImageListAppl_EcoResCategory();

        query.dataSourceTable(tamFundCustCategory.TableId).clearRanges();
        formDataSourceRange = query.dataSourceTable(tamFundCustCategory.TableId).findRange(fieldName2id(tamFundCustCategory.TableId, #RECID));
        if (!formDataSourceRange)
        {
            formDataSourceRange = query.dataSourceTable(tamFundCustCategory.TableId).addRange(fieldName2id(tamFundCustCategory.TableId, #RECID));
        }

        super( _formDataSource, _formTreeControl, _id, _parentId, _txtField, _showIdInDescription, _useLastValue, _id2, _sortField);
    }

]]></Source>
			</Method>
			<Method>
				<Name>overlayImage</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the overlay image needed depending on whether the category is active.
    /// </summary>
    /// <param name="_childRecord">
    /// The current record.
    /// </param>
    /// <returns>
    /// The ID of the overlay image.
    /// </returns>
    public int overlayImage(Common _childRecord)
    {
        int            ret            = 0;
        TAMFundCustCategory tamFundCustCategory = _childRecord;
        #resAppl

        if (!tamFundCustCategory.IsActive)
        {
            ret = ecoresImageList.image(#Image_NotOK);
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanged</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the form data source query whenever the current selection in the tree changes.
    /// </summary>
    /// <param name="oldItem">
    /// The previously selected item.
    /// </param>
    /// <param name="newItem">
    /// The item now selected.
    /// </param>
    /// <remarks>
    /// The <c>param name="oldItem"</c> parameter has been declared for this method on a base class but
    /// is not used here.
    /// </remarks>
    public void selectionChanged(FormTreeItem oldItem, FormTreeItem newItem)
    {
        SelectedData = newItem.data();
        if (SelectedData)
        {
            formDataSourceRange.value(strFmt('%1', SelectedData));
            formDataSource.executeQuery();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>selectionChanging</Name>
				<Source><![CDATA[
    /// <summary>
    /// Executes the form data source query whenever the current selection in the tree is changing.
    /// </summary>
    /// <param name="_oldItem">
    /// The current selected item.
    /// </param>
    /// <param name="_newItem">
    /// The item now being selected.
    /// </param>
    /// <param name="_how">
    /// The selection type used in selecting the new item.
    /// </param>
    /// <returns>
    /// true if the selection change should be vetoed; otherwise, false.
    /// </returns>
    public boolean selectionChanging(FormTreeItem _oldItem, FormTreeItem _newItem, FormTreeSelect _how)
    {
        boolean ret  = !formDataSource.leaveRecord();
        SelectedData = _oldItem.data();
        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setDatasourceStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Controls whether the tree data source should enable levels to be created.
    /// </summary>
    /// <param name="_idx">
    /// The index of the item in the tree for which to create a level child record.
    /// </param>
    public void setDatasourceStatus(int _idx)
    {
        super(_idx);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the tree nodes in the tree control.
    /// </summary>
    /// <param name="_idx">
    /// The item indicating the subtree to be updated.
    /// </param>
    /// <param name="_updateAncestors">
    /// A <c>Boolean</c> value that indicates whether to update its ancestors; optional.
    /// </param>
    public void updateTree(int _idx = 0, boolean _updateAncestors = false)
    {
        int             idx = _idx;
        int             selectedIdx;
        FormTreeItem    formTreeItem = tree.getItem(_idx);
        TAMFundCustCategory  specifiedRecord, currentRecord;

        tree.lockWindowUpdate(true);

        if (!_idx || !formTreeItem || !formTreeItem.data())
        {
            idx = tree.getRoot();
            formTreeItem = tree.getItem(idx);
        }

        selectedIdx     = idx;
        specifiedRecord = TAMFundCustCategory::find(tree.getItem(idx).data());
        currentRecord   = specifiedRecord;

        while (idx &&
                (currentRecord.NestedSetLeft >= specifiedRecord.NestedSetLeft
                    && currentRecord.NestedSetLeft <= specifiedRecord.NestedSetRight) )
        {
            formTreeItem = tree.getItem(idx);
            formTreeItem.overlayImage(this.overlayImage(currentRecord));
            tree.setItem( formTreeItem );

            idx = tree.getNextVisible(idx);
            if (idx)
            {
                currentRecord = TAMFundCustCategory::find(tree.getItem(idx).data());
            }
        }

        idx = tree.getParent(selectedIdx);
        while (_updateAncestors && idx)
        {
            formTreeItem  = tree.getItem(idx);
            currentRecord = TAMFundCustCategory::find(tree.getItem(idx).data());

            formTreeItem.overlayImage(this.overlayImage(currentRecord));
            tree.setItem( formTreeItem );
            idx = tree.getParent(idx);
        }

        tree.lockWindowUpdate(false);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>