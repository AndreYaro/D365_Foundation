<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>PurchCalcTax</Name>
	<SourceCode>
		<Declaration><![CDATA[
abstract class  PurchCalcTax
extends TradeCalcTax
{
    Common              source;
    MarkupTrans         markupTrans;
    PurchLine           purchLine;

    boolean             update;
    PurchUpdate         specQty;
    PurchTotals         purchTotals;
    Map                 orderBalances;

    SetEnumerator       markupRecIdEnum;

    TaxPost taxPost;

    // <GIN>
    DiscPct             endDiscPercentWht;
    // </GIN>

    boolean             loadFromTaxUncommitted;
    boolean             loadFromTaxTrans;
    boolean             salesTaxDetailIsNotNeeded;

    #ISOCountryRegionCodes

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>assessableValue_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method is used to set amount zero.
    /// </summary>
    /// <returns>
    /// Returns the amount.
    /// </returns>
    public AmountCur assessableValue_IN()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks whether TaxUncommitted records has been loaded.
    /// </summary>
    /// <returns>
    /// True if TaxUncommitted records has been loaded; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean loadFromTaxUncommitted()
    {
        return loadFromTaxUncommitted;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadFromTaxTrans</Name>
				<Source><![CDATA[
    /// <summary>
    /// Checks to see if the TaxUncommitted have already been posted to TaxTrans.
    /// </summary>
    /// <returns>
    /// True if TaxUncommitted have already been posted to TaxTrans; otherwise, false.
    /// </returns>
    [Hookable(false)]
    public boolean loadFromTaxTrans()
    {
        return loadFromTaxTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetICMSReceivableLongTerm_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the ICMS asset is receivable in long term.
    /// </summary>
    /// <returns>
    /// true if ICMS is receivable in long term; otherwise, false.
    /// </returns>
    public boolean assetICMSReceivableLongTerm_BR()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>assetPISCOFINSReceivableLongTerm</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a PISCONFINS asset is receivable long term.
    /// </summary>
    /// <returns>
    /// true if the PISCOFINS asset is receivable long term; otherwise, false.
    /// </returns>
    public boolean assetPISCOFINSReceivableLongTerm()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcTax</Name>
				<Source><![CDATA[
    TaxAmountCur calcTax(TradeTotalsBase    _purchTotals)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithholdTax_IN</Name>
				<Source><![CDATA[
    public TaxAmountCur calcWithholdTax_IN(TradeTotalsBase _purchTotals)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calcWithholdTax</Name>
				<Source><![CDATA[
    internal TaxAmountCur calcWithholdTax(TradeTotalsBase _purchTotals)
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>cfopTable_BR</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the <c>CFOPTable_BR</c> for the current record.
    /// </summary>
    /// <returns>
    ///     The <c>CFOPTable_BR</c> record.
    /// </returns>
    protected CFOPTable_BR cfopTable_BR()
    {
        CFOPTable_BR    cfopTable;

        switch (source.TableId)
        {
            case  tableNum(PurchRFQCaseTable)   :
            case  tableNum(PurchRFQTable)       :
            case  tableNum(PurchRFQReplyTable)  :
            case  tableNum(PurchRFQParmTable)   :
            case  tableNum(VendRFQJour)         :
                return CFOPTable_BR::find(PurchRFQLine::findRecId(this.transRecId()).cfopTable_BR);

            default:
                return cfopTable;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkIntersection</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves a Boolean value that indicates whether the tax intersection is verified.
    /// </summary>
    /// <returns>
    /// true if the tax code intersection is verified; otherwise false.
    /// </returns>
    public boolean checkIntersection()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>currencyCode</Name>
				<Source><![CDATA[
    CurrencyCode currencyCode()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDate</Name>
				<Source><![CDATA[
    DlvDate deliveryDate()
    {
        return this.invoiceDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>deliveryDateMarkup</Name>
				<Source><![CDATA[
    DlvDate deliveryDateMarkup()
    {
        return this.deliveryDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>directImport_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the purchase is direct import
    /// </summary>
    /// <returns>Returns false as default</returns>
    /// <remarks>This method is implemented in it sub classes</remarks>
    public boolean directImport_BR()
    {
        return this.cfopTable_BR().CustVendLocation == CustVendLocation_BR::OutsideCountry;
    }

]]></Source>
			</Method>
			<Method>
				<Name>documentDate</Name>
				<Source><![CDATA[
    public DocumentDate documentDate()
    {
        return purchTotals.documentDate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>doTaxGroupExistsForDocument</Name>
				<Source><![CDATA[
    /// <summary>
    ///   Gets a value that indicates if a tax group exists for on any line of the document.
    /// </summary>
    /// <returns>
    ///   true if a tax group exists for any line; otherwise, false.
    /// </returns>
    public boolean doTaxGroupExistsForDocument()
    {
        // Default is true to force the tax engine to calculate taxes.
        // Specific documents will override and return results as needed.
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDisc</Name>
				<Source><![CDATA[
    DiscAmount endDisc()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>endDiscPercentWht_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Ends disc percent wht.
    /// </summary>
    /// <returns>
    /// The instance of the <c>DiscPct</c> class.
    /// </returns>
    DiscPct endDiscPercentWht_IN()
    {
        return endDiscPercentWht;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRate</Name>
				<Source><![CDATA[
    VendExchRate exchRate(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>exchRateSecondary</Name>
				<Source><![CDATA[
    ExchrateSecondary exchRateSecondary(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>reportingCurrencyExchangeRate</Name>
				<Source><![CDATA[
    internal ReportingCurrencyExchRate reportingCurrencyExchangeRate(date _date = dateNull())
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPurchLine</Name>
				<Source><![CDATA[
    protected void getPurchLine()
    {
        purchLine = PurchLine::findInventTransId(this.transTransId());
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingRecID</Name>
				<Source><![CDATA[
    RecId headingRecID()
    {
        return this.recID();
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingTableID</Name>
				<Source><![CDATA[
    TableId headingTableID()
    {
        return this.tableId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSource</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates the source record.
    /// </summary>
    /// <returns>
    /// A source record.
    /// </returns>
    internal Common getSource()
    {
        return source;
    }

]]></Source>
			</Method>
			<Method>
				<Name>headingTableSourceDocumentRecId</Name>
				<Source><![CDATA[
    public RecId headingTableSourceDocumentRecId()
    {
        SourceDocumentHeaderImplementation sourceDocumentHeaderImplementation;
        SourceDocumentHeaderRecId sourceDocumentHeaderRecId;

        if (SysDictTable::isTableMapped(tableNum(SourceDocumentHeaderImplementation), this.source.TableId))
        {
            sourceDocumentHeaderImplementation = this.source;
            sourceDocumentHeaderRecId = sourceDocumentHeaderImplementation.SourceDocumentHeader;
        }
        return sourceDocumentHeaderRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ignoreCalculatedSalesTax</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines whether the calculated sales tax should be ignored and only tax amounts from the tax
    ///    adjustments should be used.
    /// </summary>
    /// <returns>
    ///    true if the calculated sales tax should be ignored; otherwise, false.
    /// </returns>
    public boolean ignoreCalculatedSalesTax()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursor</Name>
				<Source><![CDATA[
    void initCursor()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkup</Name>
				<Source><![CDATA[
    protected void initCursorMarkup(TableId tableId, RecId recId)
    {
        markupRecIdEnum = MarkupTrans::getMarkupRecIdsBySource(tableId, recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkupHeader</Name>
				<Source><![CDATA[
    void initCursorMarkupHeader(TableId tableId, RecId recId)
    {
        this.initCursorMarkup(tableId, recId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initCursorMarkupLine</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Initiates the cursor for line related markup transactions.
    /// </summary>
    /// <param name="_tableId">
    ///     A <c>RefTableId</c> type.
    /// </param>
    /// <param name="_recId">
    ///     A <c>RefRecId</c> type.
    /// </param>
    protected void initCursorMarkupLine(RefTableId  _tableId, RefRecId _recId)
    {
        if (!skipLineMarkup)
        {
            this.initCursorMarkup(_tableId, _recId);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>invoiceDate</Name>
				<Source><![CDATA[
    TransDate invoiceDate()
    {
        return DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone());
    }

]]></Source>
			</Method>
			<Method>
				<Name>isNewLine</Name>
				<Source><![CDATA[
    public boolean isNewLine()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>isTaxIncluded</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether tax is included in the item price for the purchasing documents.
    /// </summary>
    /// <returns>
    ///    Always returns false.
    /// </returns>
    /// <remarks>
    ///    This method is overridden in child classes to determine whether tax is included for purchasing
    ///    documents.
    /// </remarks>
    public boolean isTaxIncluded()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>keepSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether sales tax adjustments should be deleted when sales tax groups are changed on the
    ///    transaction.
    /// </summary>
    /// <returns>
    ///    true if sales tax adjustments should not be deleted when sales tax groups are changed on the
    ///    transaction; otherwise, false.
    /// </returns>
    public boolean keepSalesTaxAdjustments()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>ledgerVoucher</Name>
				<Source><![CDATA[
    Voucher ledgerVoucher()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>lineEndDisc</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the line is eligible for total discount.
    /// </summary>
    /// <returns>
    /// true if the order line is eligible for total discount; otherwise, false.
    /// </returns>
    public boolean lineEndDisc()
    {
        return purchLine.endDisc();
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupAmount</Name>
				<Source><![CDATA[
    MarkupAmount markupAmount()
    {
        AmountCur value;
        PurchTable purchTable;
        boolean isIntercompanyMarkup = true;

        if (purchLine
            || markupTrans.TransTableId == tableNum(VendInvoiceInfoLine))
        {
            value = this.transLineAmount(); // calculate line charges
        }
        else
        {
            value = this.orderBalance(this.markupTotalRecId()); // calculate header charges as sum of each line
        }

        if (source.TableId == tableNum(PurchTable))
        {
            purchTable = source as PurchTable;
            isIntercompanyMarkup = purchTable.isInterCompanyOrder();
        }

        return markupTrans.signedValue(Markup::calcTrans(markupTrans, this.transQty(), value, value, this.invoiceDate(), 0, '', false, isIntercompanyMarkup));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupDefaultDimension</Name>
				<Source><![CDATA[
    DimensionDefault markupDefaultDimension()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup markupTaxGroup()
    {
        return markupTrans.TaxGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup markupTaxItemGroup()
    {
        return markupTrans.TaxItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupWithholdTaxGroup</Name>
				<Source><![CDATA[
    internal TaxWithholdGroup markupWithholdTaxGroup()
    {
        return markupTrans.TaxWithholdGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTaxWithholdItemGroup</Name>
				<Source><![CDATA[
    internal TaxWithholdItemGroupId_TH markupTaxWithholdItemGroup()
    {
        return markupTrans.TaxWithholdItemGroup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>markupTotalRecId</Name>
				<Source><![CDATA[
    protected RecId markupTotalRecId()
    {
        return markupTrans.TransRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>maximumRetailPrice_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// The method is used to set amount zero.
    /// </summary>
    /// <returns>
    /// Returns the amount.
    /// </returns>
    public MaximumRetailPrice_IN maximumRetailPrice_IN()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns a new <c>PurchCalcTax</c> object.
    /// </summary>
    /// <param name="_source">
    ///    The record for which totals will be calculated.
    /// </param>
    protected void new(Common  _source)
    {
        source  = _source;
        update  = false;

        this.resetOrderBalances();
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextLine</Name>
				<Source><![CDATA[
    Common nextLine()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>nextMarkupLine</Name>
				<Source><![CDATA[
    MarkupTrans nextMarkupLine()
    {
        if (markupRecIdEnum && markupRecIdEnum.moveNext())
        {
            markupTrans = MarkupTrans::findRecId(markupRecIdEnum.current(), true);
        }
        else
        {
            markupTrans = null;
        }

        return markupTrans;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccount</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccount()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationAccountMarkup</Name>
				<Source><![CDATA[
    LedgerDimensionDefaultAccount operationAccountMarkup()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPosting</Name>
				<Source><![CDATA[
    LedgerPostingType operationPosting()
    {
        return LedgerPostingType::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>operationPostingMarkup</Name>
				<Source><![CDATA[
    LedgerPostingType operationPostingMarkup()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>orderBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the order balance for a table.
    /// </summary>
    /// <param name="_recId">The <c>RecId</c> of the table</param>
    /// <returns>The order balance for a table.</returns>
    protected AmountCur orderBalance(RecId _recId)
    {
        AmountCur   orderBalance;

        if (orderBalances.exists(_recId))
        {
            orderBalance = orderBalances.lookup(_recId);
        }

        return orderBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingRecID</Name>
				<Source><![CDATA[
    RecId origHeadingRecID()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>origHeadingTableID</Name>
				<Source><![CDATA[
    TableId origHeadingTableID()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        throw error(strFmt("@SYS19306",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmDocumentStatus_IN</Name>
				<Source><![CDATA[
    public DocumentStatus parmDocumentStatus_IN()
    {
        return DocumentStatus::None;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSkipLineMarkup</Name>
				<Source><![CDATA[
    public boolean parmSkipLineMarkup(boolean _skipLineMarkup = skipLineMarkup)
    {
        skipLineMarkup = _skipLineMarkup;
        return skipLineMarkup;
    }

]]></Source>
			</Method>
			<Method>
				<Name>post</Name>
				<Source><![CDATA[
    public void post(LedgerVoucher _ledgerVoucher, NoYes _post = NoYes::Yes)
    {
        // <GIN>
        TaxWithholdPost_IN  taxWithholdPost;
        // </GIN>

        // <GBR>
        if (BrazilParameters::isEnabled() && !this.validateTaxes_BR())
        {
            throw Exception::Error;
        }
        // </GBR>

        taxPost = TaxPost::newForSourceTypeWithTaxCalculation(TaxSourceType::PurchaseOrder, this, _post, this.tax());
        taxPost.updateAndPost(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher));

        // <GIN>
        if (TaxWithholdParameters_IN::checkTaxParameters())
        {
            taxWithholdPost = TaxWithholdPost_IN::newForSourceTypeWithTaxCalculation(TaxSourceType::PurchaseOrder, this, _post, this.taxWithholdCalculation_IN());

            if (this.taxWithholdCalculation_IN() != null)
            {
                taxWithholdPost.updateAndPost(LedgerPostingController::newForLedgerPostingJournal(_ledgerVoucher));
            }

            // Check if there is an uncomitted WHT record after posting WHT tax, if exists, posting should be canceled.
            if (this is PurchCalcTax_Invoice && !taxWithholdPost.validateTaxWithholdUncommitted_IN(taxWithholdPost, this.headingTableSourceDocumentRecId(), this.taxWithholdCalculation_IN()))
            {
                throw error("@TaxWithholdUncommitted_IN:WHTValidateUncommittedAfterPosting");
            }
        }
        // </GIN>

        if (TaxWithholdingGlobalFeature::isCalcWHTInInvoiceEnabled())
        {
            this.deleteTaxWithholdUncommitted(this.tableId(), this.recID());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>deleteTaxWithholdUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    /// Deletes <c>TaxWithholdUncommitted</c> records when posting.
    /// </summary>
    /// <param name = "_headingTableId">Heading table id.</param>
    /// <param name = "_headingRecId">Heading record id.</param>
    private void deleteTaxWithholdUncommitted(RefTableId _headingTableId, RefRecId _headingRecId)
    {
        TaxWithholdUncommitted::deleteForDocumentHeader(_headingTableId, _headingRecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupRecId</Name>
				<Source><![CDATA[
    RecId purchMarkupRecId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>purchMarkupTableId</Name>
				<Source><![CDATA[
    TableId purchMarkupTableId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>recID</Name>
				<Source><![CDATA[
    RecId recID()
    {
        return source.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetOrderBalances</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resets the order balances map.
    /// </summary>
    protected void resetOrderBalances()
    {
        orderBalances = new Map(typeName2Type(extendedTypeStr(RecId)), Types::Real);
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSpecQty</Name>
				<Source><![CDATA[
    void setSpecQty(PurchUpdate _specQty)
    {
        specQty = _specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getSpecQty</Name>
				<Source><![CDATA[
    internal PurchUpdate getSpecQty()
    {
        return specQty;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setSalesTaxDetailIsNotNeeded</Name>
				<Source><![CDATA[
    /// <summary>
    /// Sets the value for whether sales tax detail is not needed.
    /// </summary>
    /// <param name = "_salesTaxDetailNeeded">The boolean value determines whether sales tax detail is not needed.</param>
    [Hookable(false)]
    public boolean setSalesTaxDetailIsNotNeeded(boolean _salesTaxDetailNotNeeded = salesTaxDetailIsNotNeeded)
    {
        salesTaxDetailIsNotNeeded = _salesTaxDetailNotNeeded;

        return salesTaxDetailIsNotNeeded;
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTax</Name>
				<Source><![CDATA[
    void setTax(TaxCode       taxCode,
                 TaxAmount     taxAmount)
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>setTaxMarkup</Name>
				<Source><![CDATA[
    void setTaxMarkup(TaxWriteCode     taxWriteCode,
                      AmountCur        amountCur)
    {
        markupTrans.TaxWriteCode    = taxWriteCode;
        markupTrans.TaxAmount       = amountCur;
    }

]]></Source>
			</Method>
			<Method>
				<Name>skipTaxRecalculationsForLine</Name>
				<Source><![CDATA[
    /// <summary>
    /// Determines whether the tax should be recalculated for the current line.
    /// </summary>
    /// <returns>
    /// true if tax recalculation should be skipped; otherwise, false.
    /// </returns>
    public boolean skipTaxRecalculationsForLine()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>tableId</Name>
				<Source><![CDATA[
    TableId  tableId()
    {
        return source.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>taxCashDiscPercent</Name>
				<Source><![CDATA[
    DiscPct taxCashDiscPercent()
    {
        return purchTotals.taxCashDiscPercent();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDefaultDimension</Name>
				<Source><![CDATA[
    public DimensionDefault transDefaultDimension()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transDimensionAccount</Name>
				<Source><![CDATA[
    public LedgerDimensionAccount transDimensionAccount()
    {
        return LedgerDimensionFacade::serviceCreateLedgerDimension(this.operationAccount(), this.transDefaultDimension());
    }

]]></Source>
			</Method>
			<Method>
				<Name>transItemId</Name>
				<Source><![CDATA[
    public ItemId transItemId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transItemType</Name>
				<Source><![CDATA[
    /// <summary>
    ///     Returns the transaction item type
    /// </summary>
    /// <returns>
    ///     The item type
    /// </returns>
    public ItemType transItemType()
    {
        return purchLine.getItemType();
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxCalculationDate</Name>
				<Source><![CDATA[
    /// <summary>
    /// Resolves the calculation date which should be used for tax calculation.
    /// </summary>
    /// <returns>
    /// The calculation date which should be used for tax calculation.
    /// </returns>
    public TransDate transTaxCalculationDate()
    {
        TransDate               taxCalculationDate;
        TaxCalculationDateType  taxCalculationDateType;

        taxCalculationDateType = TaxParameters::find().TaxCalculationDateType;

        switch (taxCalculationDateType)
        {
            case TaxCalculationDateType::DeliveryDate:
                taxCalculationDate = this.deliveryDateMarkup();
                break;

            case TaxCalculationDateType::DocumentDate:
                taxCalculationDate = this.documentDate();
                break;

            case TaxCalculationDateType::InvoiceDate:
                taxCalculationDate = this.invoiceDate();
                break;
        }

        return taxCalculationDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmount</Name>
				<Source><![CDATA[
    AmountCur transLineAmount()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transLineAmountInclTax</Name>
				<Source><![CDATA[
    AmountCur transLineAmountInclTax()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPcsPrice</Name>
				<Source><![CDATA[
    PriceCur transPcsPrice()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transProcurementCategory</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Retrieves the <c>EcoResCategory</c> object for the current tax transaction.
    /// </summary>
    /// <returns>
    ///    The <c>PurchCategory</c> object for the current tax transaction.
    /// </returns>
    public PurchCategory transProcurementCategory()
    {
        return(0);
    }

]]></Source>
			</Method>
			<Method>
				<Name>transPurchUnit</Name>
				<Source><![CDATA[
    PurchUnit transPurchUnit()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transQty</Name>
				<Source><![CDATA[
    PurchQty transQty()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transRecId</Name>
				<Source><![CDATA[
    RecId transRecId()
    {
        return purchLine.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTableId</Name>
				<Source><![CDATA[
    TableId transTableId()
    {
        return purchLine.TableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxGroup</Name>
				<Source><![CDATA[
    TaxGroup transTaxGroup()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxItemGroup</Name>
				<Source><![CDATA[
    TaxItemGroup transTaxItemGroup()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxWithholdGroup</Name>
				<Source><![CDATA[
    internal TaxWithholdGroup transTaxWithholdGroup()
    {
        return '';
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTaxWithholdItemGroup</Name>
				<Source><![CDATA[
    internal TaxWithholdItemGroupId_TH transTaxWithholdItemGroup()
    {
        return 0;
    }

]]></Source>
			</Method>
			<Method>
				<Name>transTransId</Name>
				<Source><![CDATA[
    public TradeInventTransId transTransId()
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>triangulation</Name>
				<Source><![CDATA[
    EUROTriangulation triangulation(date _date = DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()))
    {
        throw error(Error::missingOverload(funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container packedClass)
    {
        throw error(strFmt("@SYS19306",funcName()));
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateOrderBalance</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the order balance of the current order.
    /// </summary>
    /// <param name="_transLineAmount">The line amount to add to the balance.</param>
    public void updateOrderBalance(AmountCur _transLineAmount)
    {
        RefRecId orderRecId;
        orderRecId = this.recID();
        orderBalances.insert(orderRecId, this.orderBalance(orderRecId) + _transLineAmount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>useAndConsumption_BR</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns if the purchase is for use and consumption
    /// </summary>
    /// <returns>Returns false as default</returns>
    /// <remarks>This method is implemented in it sub classes</remarks>
    public boolean useAndConsumption_BR()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSalesTaxAdjustments</Name>
				<Source><![CDATA[
    /// <summary>
    /// Indicates whether a tax calculation uses sales tax adjustments.
    /// </summary>
    /// <returns>
    /// true if the tax calculation uses sales tax adjustments; otherwise, false.
    /// </returns>
    public boolean useSalesTaxAdjustments()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useSubLedgerJournalLines</Name>
				<Source><![CDATA[
    boolean useSubLedgerJournalLines()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxUncommitted</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>Tax</c> class should use the <c>TaxUncommitted</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>Tax</c> class should use the <c>TaxUncommitted</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxUncommitted()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>useTaxWithholdUncommitted_IN</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the <c>TaxWithholdCalculation_IN</c> class should use the <c>TaxWithholdUncommitted_IN</c> table.
    /// </summary>
    /// <returns>
    ///    true if the <c>TaxWithholdCalculation_IN</c> class should use the <c>TaxWithholdUncommitted_IN</c> table; otherwise, false.
    /// </returns>
    public boolean useTaxWithholdUncommitted_IN()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canApplyRetention</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Indicates whether the retention can be applied.
    /// </summary>
    /// <returns>
    ///    true if retention can be applied; otherwise, false.
    /// </returns>
    protected boolean canApplyRetention()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validateTaxes_BR</Name>
				<Source><![CDATA[
    protected boolean validateTaxes_BR()
    {
        VendInvoiceInfoTable    vendInvoiceInfoTable;
        boolean ok = true;

        vendInvoiceInfoTable    = this.vendInvoiceInfoTable();

        if (vendInvoiceInfoTable.isForeignerVendor_BR())
        {
            TmpTaxWorkTrans taxworkTrans = this.tax().tmpTaxWorkTrans();
            select firstonly RecId from taxWorkTrans;

            if (salesTaxDetailIsNotNeeded && !taxWorkTrans)
            {
                TaxLoadToTmpTaxWorkTransWhileSalesTaxDetailIsNotNeededParameters  parameters = TaxLoadToTmpTaxWorkTransWhileSalesTaxDetailIsNotNeededParameters::construct();
                parameters.loadFromTaxUncommitted = loadFromTaxUncommitted;
                parameters.loadFromTaxTrans = loadFromTaxTrans;
                parameters.headingTableId = this.headingTableID();
                parameters.headingRecId = this.headingRecID();
                parameters.headingTableSourceDocumentRecId = this.headingTableSourceDocumentRecId();

                taxworkTrans = taxworkTrans.loadToTmpTaxWorkTransWhileSalesTaxDetailIsNotNeeded(parameters);
                this.tax().tmpTaxWorkTrans(taxworkTrans);
            }
            taxWorkTrans = this.tax().tmpTaxWorkTrans();

            select taxWorkTrans
            where taxWorkTrans.TaxDirection != TaxDirection::UseTax;

            if (taxWorkTrans)
            {
                ok = checkFailed("@GLS63161");
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>vatRegData_W</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method is used by various financial transactions to pass information from the financial transaction down to the tax calculation engine.
    /// </summary>
    /// <returns>
    /// A container loaded with various fields needed by the tax calculation engine.
    /// </returns>
    public container vatRegData_W()
    {
        VatDueDate_W           vatDate;
        DocumentDate           documentDate;
        PlCustVendName         custVendName;
        VATNum                 vatNum;
        Addressing             addressing;
        IntraComVATDueDate_W    useIntrComVatDate;
        PlTaxPeriodPaymentCode  taxPeriodPaymentCode;

        // derived class is expected to override and return actual value.
        return [ vatDate,
                 documentDate,
                 custVendName,
                 vatNum,
                 addressing,
                 taxPeriodPaymentCode,
                 useIntrComVatDate];
    }

]]></Source>
			</Method>
			<Method>
				<Name>vendInvoiceInfoTable</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populates a <c>VendInvoiceInfoTable</c> record.
    /// </summary>
    /// <returns>
    /// A <c>VendInvoiceInfoTable</c> record.
    /// </returns>
    public VendInvoiceInfoTable vendInvoiceInfoTable()
    {
        VendInvoiceInfoTable vendInvoiceInfoTable;

        if (source.TableId == tableNum(VendInvoiceInfoTable))
        {
            vendInvoiceInfoTable = source;
        }

        return vendInvoiceInfoTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static PurchCalcTax construct(
        Common              _source,
        ParmId              _parmId                 = '',
        PurchId             _sumPurchId             = '',
        DocumentStatus      _documentStatus         = DocumentStatus::None,
        VendPackingSlipJour _vendPackingSlipJour    = null)
    {
        #ISOCountryRegionCodes

        switch (_source.TableId)
        {
            // <GEERU>
            case tableNum(VendInvoice4PaymJour_RU)      :
                boolean countryRegion_RU = SysCountryRegionCode::isLegalEntityInCountryRegion([#isoRU]);
                if (countryRegion_RU)
                {
                    return new PurchCalcTax_Invoice4Paym_RU(_source, _parmId);
                }
                break;
            // </GEERU>
            case tableNum(PurchParmTable)               :
                if (_documentStatus == DocumentStatus::PackingSlip)
                {
                    PurchCalcTax_PackingSlip purchCalcTax_PackingSlip = new PurchCalcTax_PackingSlip(_source, _parmId, _sumPurchId, _documentStatus);
                    purchCalcTax_PackingSlip.setVendPackingSlipJour(_vendPackingSlipJour);
                    return purchCalcTax_PackingSlip;
                }
                // <GIN>
                else if (SysCountryRegionCode::isLegalEntityInCountryRegion([#isoIN]) && _documentStatus == DocumentStatus::BillOfEntry_IN)
                {
                    return new PurchCalcTax_ParmTransBOE_IN(_source, _parmId, _sumPurchId, _documentStatus);
                }
                // </GIN>
                else
                {
                    return new PurchCalcTax_ParmTrans(_source, _parmId, _sumPurchId, _documentStatus);
                }
            case tableNum(VendInvoiceInfoTable)         :
                return new PurchCalcTax_ParmTransInvoice(_source, _parmId, _sumPurchId, _documentStatus);
            case tableNum(VendPurchOrderJour)           :
                return PurchCalcTax_PurchConfirmation::construct(_source);
            case tableNum(PurchConfirmationRequestJour) :
                return PurchCalcTax_PurchConfirmationRequest::construct(_source);
            case tableNum(PurchReqTable)                :
                return PurchCalcTax_PurchReq::construct(_source);
            default:
                PurchCalcTaxFactoryAttribute        attribute = new PurchCalcTaxFactoryAttribute(tableId2Name(_source.TableId));
                SysExtensionGenericInstantiation    instantiation = new SysExtensionGenericInstantiation(_source);
                PurchCalcTax                        purchCalcTax = SysExtensionAppClassFactory::getClassFromSysAttributeWithInstantiationStrategy(classStr(PurchCalcTax), attribute, instantiation) as PurchCalcTax;

                if (classIdGet(purchCalcTax) != classNum(PurchCalcTax))
                {
                    return purchCalcTax;
                }
                break;
        }

        throw error(strFmt("@SYS19306", funcName()));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>