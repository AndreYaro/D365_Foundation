<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowForecastProcessTimeSeriesWeeklyActualsBalanceStrategy</Name>
	<SourceCode>
		<Declaration><![CDATA[
using System.ComponentModel.Composition;

/// <summary>
/// This is a strategy for processing cash flow forecasting weekly aggregation of actuals for timeseries forecasting.
/// </summary>
[Export(identifierStr(Dynamics.AX.Application.CashFlowIForecastProcessBalanceStrategy))]
[ExportMetadata(classStr(CashFlowIForecastProcessBalanceStrategy), classStr(CashFlowForecastProcessTimeSeriesWeeklyActualsBalanceStrategy))]
internal final class CashFlowForecastProcessTimeSeriesWeeklyActualsBalanceStrategy implements CashFlowIForecastProcessBalanceStrategy
{
    private CashFlowForecastProcessBalanceContract processBalanceContract;
    private CashFlowForecastProcessActualsLedgerDimensionLoader dimensionLoader;

    private date periodOpenDateStartOfWeek;
    private date periodCloseDateStartOfWeek;
    private date periodCloseDateEndOfWeek;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFromProcessBalanceContract</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void initializeFromProcessBalanceContract(CashFlowForecastProcessBalanceContract _processBalanceContract)
    {
        processBalanceContract = _processBalanceContract;
        dimensionLoader = CashFlowForecastProcessActualsLedgerDimensionLoader::construct();

        // Invariants are easier to enforce if we always operate on dates that are guaranteed to be at the same frequency. In this case weekly.
        periodOpenDateStartOfWeek = CashFlowForecastDateTimeUtil::getStartOfWeek(processBalanceContract.periodOpenDate, CashflowInsightsParameterConstants::DefaultFirstDayOfWeek);
        periodCloseDateStartOfWeek = CashFlowForecastDateTimeUtil::getStartOfWeek(processBalanceContract.periodCloseDate, CashflowInsightsParameterConstants::DefaultFirstDayOfWeek);
        periodCloseDateEndOfWeek = periodCloseDateStartOfWeek - 1;
    }

]]></Source>
			</Method>
			<Method>
				<Name>loadDimensionReferences</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void loadDimensionReferences()
    {
        dimensionLoader.loadDimensionReferences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearReferences</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void clearReferences()
    {
        dimensionLoader.clearReferences();
    }

]]></Source>
			</Method>
			<Method>
				<Name>clearBalances</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void clearBalances()
    {
        CashFlowForecastTimeSeriesBalance cashFlowForecastTimeSeriesBalance;

        if (processBalanceContract.deleteMode == CashFlowProcessBalanceDeleteMode::DeleteAll)
        {
            delete_from cashFlowForecastTimeSeriesBalance;
        }
        else if (processBalanceContract.deleteMode == CashFlowProcessBalanceDeleteMode::DeletePeriod)
        {
            delete_from cashFlowForecastTimeSeriesBalance
                where cashFlowForecastTimeSeriesBalance.AccountingDate >= periodOpenDateStartOfWeek
                    && cashFlowForecastTimeSeriesBalance.AccountingDate <= periodCloseDateEndOfWeek;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>createBalances</Name>
				<Source><![CDATA[
    [Hookable(false)]
    public void createBalances()
    {
        ttsbegin;

        if (this.shouldDateMappingBeExpanded())
        {
            this.regenerateDateMapping();
        }

        CashFlowForecastBalanceTmp balanceTmp;

        if (processBalanceContract.deleteMode == CashFlowProcessBalanceDeleteMode::DeleteAll)
        {
            this.createOpeningBalance(balanceTmp);
        }
        this.calculateWeeklyBalances(balanceTmp);

        CashFlowForecastBalanceTmp::updateEnterpriseCurrency(balanceTmp);

        this.insertBalances(balanceTmp);

        ttscommit;
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldDateMappingBeExpanded</Name>
				<Source><![CDATA[
    private boolean shouldDateMappingBeExpanded()
    {
        boolean expandDateMapping = false;

        List dates = new List(Types::Date);
        dates.addEnd(periodOpenDateStartOfWeek);
        dates.addEnd(periodCloseDateStartOfWeek);

        if (CashFlowTimeSeriesDateMapping::areAnyDatesOutsideOfRange(dates))
        {
            expandDateMapping = true;
        }

        return expandDateMapping;
    }

]]></Source>
			</Method>
			<Method>
				<Name>regenerateDateMapping</Name>
				<Source><![CDATA[
    private void regenerateDateMapping()
    {
        const int DaysInYear = 365;  // not technically a constant value (leap years) but we just want to make sure we populate the date mapping with more than enough dates for the current contract.
        const int BufferDays = DaysInYear * 5;

        CashFlowTimeSeriesDateMapping::rePopulateTableForDateRange(
            periodOpenDateStartOfWeek,
            periodCloseDateStartOfWeek,
            CashflowInsightsParameterConstants::DefaultFirstDayOfWeek,
            BufferDays);
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertBalances</Name>
				<Source><![CDATA[
    private void insertBalances(CashFlowForecastBalanceTmp _balanceTmp)
    {
        CashFlowForecastTimeSeriesBalance balances;
        const NoYes IsActual = NoYes::Yes;

        insert_recordset balances (AccountingDate, MainAccount, DefaultDimension, IsOpeningBalance, IsActuals, AccountingCurrencyAmountIn, AccountingCurrencyAmountOut, EnterpriseCurrencyAmountIn, EnterpriseCurrencyAmountOut)
            select AccountingDate, MainAccount, DefaultDimension, IsOpeningBalance, IsActual,
                sum(AccountingCurrencyAmountIn), sum(AccountingCurrencyAmountOut),
                sum(EnterpriseCurrencyAmountIn), sum(EnterpriseCurrencyAmountOut) from _balanceTmp
            group by AccountingDate, MainAccount, DefaultDimension, IsOpeningBalance;
    }

]]></Source>
			</Method>
			<Method>
				<Name>calculateWeeklyBalances</Name>
				<Source><![CDATA[
    private void calculateWeeklyBalances(CashFlowForecastBalanceTmp _balanceTmp)
    {
        // calculate all activity weekly from the start date forward to today
        // Insert each week into the balance table.
        CashFlowForecastBalanceActualsView balanceView;
        CashFlowTimeSeriesDateMapping dateMapping;
        const NoYes IsOpeningBalance = NoYes::No;

        // Credits = AccountingCurrencyAmountOut
        insert_recordset _balanceTmp (MainAccount, IsOpeningBalance, IsCredit, DefaultDimension, AccountingCurrencyAmountOut, AccountingDate)
            select  MainAccount, IsOpeningBalance, IsCredit, BalanceDefaultDimension, sum(AccountingCurrencyAmount) from balanceView
                join StartOfWeekDate from dateMapping
            group by dateMapping.StartOfWeekDate, balanceView.MainAccount, balanceView.IsCredit, balanceView.BalanceDefaultDimension
            where dateMapping.TransactionDate == balanceView.AccountingDate
                && balanceView.IsCredit == NoYes::Yes
                && dateMapping.StartOfWeekDate >= periodOpenDateStartOfWeek  // These boundary conditions are on StartOfWeekDate instead of AccountingDate. We don't want to aggregate any partial weeks.
                && dateMapping.StartOfWeekDate <= periodCloseDateEndOfWeek
                && balanceView.Type != FiscalPeriodType::Opening
                && balanceView.PostingType != LedgerPostingType::TransferOpeningClosing;

        // Debits = AccountingCurrencyAmountIn
        insert_recordset _balanceTmp (MainAccount, IsOpeningBalance, IsCredit, DefaultDimension, AccountingCurrencyAmountIn, AccountingDate)
            select MainAccount, IsOpeningBalance, IsCredit, BalanceDefaultDimension, sum(AccountingCurrencyAmount) from balanceView
                join StartOfWeekDate from dateMapping
            group by dateMapping.StartOfWeekDate, balanceView.MainAccount, balanceView.IsCredit, balanceView.BalanceDefaultDimension
            where dateMapping.TransactionDate == balanceView.AccountingDate
                && balanceView.IsCredit == NoYes::No
                && dateMapping.StartOfWeekDate >= periodOpenDateStartOfWeek  // These boundary conditions are on StartOfWeekDate instead of AccountingDate. We don't want to aggregate any partial weeks.
                && dateMapping.StartOfWeekDate <= periodCloseDateEndOfWeek
                && balanceView.Type != FiscalPeriodType::Opening
                && balanceView.PostingType != LedgerPostingType::TransferOpeningClosing;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createOpeningBalance</Name>
				<Source><![CDATA[
    private void createOpeningBalance(CashFlowForecastBalanceTmp _balanceTmp)
    {
        NoYes isOpeningBalance = NoYes::Yes;
        FiscalCalendarPeriod period = LedgerFiscalCalendar::findOpeningPeriodByDate(Ledger::fiscalCalendar(), periodOpenDateStartOfWeek);
        CashFlowForecastBalanceActualsView balanceView;

        // Credits = AccountingCurrencyAmountOut
        insert_recordset _balanceTmp (MainAccount, IsCredit, DefaultDimension, AccountingDate, IsOpeningBalance, AccountingCurrencyAmountOut)
            select MainAccount, IsCredit, BalanceDefaultDimension, periodOpenDateStartOfWeek, isOpeningBalance, sum(AccountingCurrencyAmount) from balanceView
                group by MainAccount, IsCredit, BalanceDefaultDimension
            where balanceView.IsCredit == NoYes::Yes
                && ((balanceView.AccountingDate >= period.StartDate 
                    && balanceView.AccountingDate <= periodOpenDateStartOfWeek 
                    && balanceView.Type == FiscalPeriodType::Opening)
                || (balanceView.AccountingDate >= period.StartDate 
                    && balanceView.AccountingDate < periodOpenDateStartOfWeek 
                    && balanceView.Type != FiscalPeriodType::Opening 
                    && balanceView.PostingType != LedgerPostingType::TransferOpeningClosing));

        // Debits = AccountingCurrencyAmountIn
        insert_recordset _balanceTmp (MainAccount, IsCredit, DefaultDimension, AccountingDate, IsOpeningBalance, AccountingCurrencyAmountIn)
            select MainAccount, IsCredit, BalanceDefaultDimension, periodOpenDateStartOfWeek, isOpeningBalance, sum(AccountingCurrencyAmount) from balanceView
                group by MainAccount, IsCredit, BalanceDefaultDimension
            where balanceView.IsCredit == NoYes::No
                && ((balanceView.AccountingDate >= period.StartDate
                    && balanceView.AccountingDate <= periodOpenDateStartOfWeek
                    && balanceView.Type == FiscalPeriodType::Opening)
                || (balanceView.AccountingDate >= period.StartDate
                    && balanceView.AccountingDate < periodOpenDateStartOfWeek
                    && balanceView.Type != FiscalPeriodType::Opening
                    && balanceView.PostingType != LedgerPostingType::TransferOpeningClosing));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>