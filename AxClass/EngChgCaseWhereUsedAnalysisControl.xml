<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EngChgCaseWhereUsedAnalysisControl</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// Class used to build the where-used analysis tree.
/// </summary>
public class EngChgCaseWhereUsedAnalysisControl
{
    FormTreeControl     formTreeControl;
    Map                 nodeTreeIdx;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Tree node is added to the form tree.
    /// </summary>
    /// <param name="_parentIdx">
    /// Tree item identifier for the parent node.
    /// </param>
    /// <param name="_nodeText">
    /// Text to be displayed as a label for the node.
    /// </param>
    /// <param name="_associated">
    /// Indicates if the record for which the tree node is added is associated to the case for which the tree is created.
    /// It is used to determine with image will be used in front of the node.
    /// </param>
    /// <returns>
    /// Newly created tree node identifier.
    /// </returns>
    /// <remarks>
    /// The following values are passed as parameters for each node for SysFormTreeControl::addTreeItem method:
    ///     _data = 0 (not used in the tree),
    ///     _children = true (set to true for all nodes for simplicity).
    /// </remarks>
    private TreeItemIdx addTreeNode(TreeItemIdx _parentIdx, LabelType _nodeText, boolean _associated = false)
    {
        str nodeLabel = _associated ? strfmt("@SYS76498", "@SCM:EntityAssociated", _nodeText) : strfmt("@SYS76498", "@SCM:EntityNotAssociated", _nodeText);

        FormTreeItem formTreeItem = new FormTreeItem(nodeLabel, 0, true, 0);
        TreeItemIdx treeItemIdx = formTreeControl.addItem(_parentIdx, FormTreeAdd::Last, formTreeItem);
        formTreeItem = formTreeControl.getItem(treeItemIdx);
        formTreeItem.stateBold(_associated);
        formTreeControl.setItem(formTreeItem);

        return treeItemIdx;
    }

]]></Source>
			</Method>
			<Method>
				<Name>createTreeNode</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create tree node. Meant to be used for item, BOM and route nodes.
    /// </summary>
    /// <param name="_currentId">
    /// ID of the current node in the nodeTreeIdx map.
    /// </param>
    /// <param name="_parentId">
    /// ID of the parent node in the nodeTreeIdx map.
    /// </param>
    /// <param name="_isAssociatedToCase">
    /// Indicates if the <c>InventTable</c>, <c>BOMTable</c> or <c>RouteTable</c> record is associated to the case the tree is created for.
    /// </param>
    /// <param name="_nodeText">
    /// Text for the node that is created.
    /// </param>
    /// <remarks>
    /// If node parent does not exist, a root node will be used as a parent.
    /// As part of node creation, nodeTreeIdx map is also updated with the newly created node identifier.
    /// Node is expanded after creation, if parent node exists (i.e. it is not a root node).
    /// </remarks>
    private void createTreeNode(int _currentId, int _parentId, boolean _isAssociatedToCase, str _nodeText)
    {
        TreeItemIdx     treeItemIdx;

        if (nodeTreeIdx.exists(_parentId))
        {
            treeItemIdx = this.addTreeNode(nodeTreeIdx.lookup(_parentId), _nodeText, _isAssociatedToCase);
            nodeTreeIdx.insert(_currentId, treeItemIdx);
            formTreeControl.expand(nodeTreeIdx.lookup(_parentId), FormTreeExpand::Expand);
        }
        else
        {
            treeItemIdx = this.addTreeNode(FormTreeAdd::Root, _nodeText, _isAssociatedToCase);
            nodeTreeIdx.insert(_currentId, treeItemIdx);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>init</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initialize <c>EngChgCaseWhereUsedAnalysisControl</c> class instance.
    /// Map of node tree indexes is created.
    /// Image list with images used for associated and not associated nodes to the case is created and attached to the form tree control.
    /// </summary>
    private void init()
    {
        nodeTreeIdx = new Map(Types::Integer, Types::AnyType);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmFormTreeControl</Name>
				<Source><![CDATA[
    public FormTreeControl parmFormTreeControl(FormTreeControl _formTreeControl = formTreeControl)
    {
        formTreeControl = _formTreeControl;
        return formTreeControl;
    }

]]></Source>
			</Method>
			<Method>
				<Name>populateTree</Name>
				<Source><![CDATA[
    /// <summary>
    /// Populate where-used analysis tree starting from the caller item record.
    /// </summary>
    /// <param name="_treeNodes">
    /// Container with the data necessary to build the tree.
    /// </param>
    /// <remarks>
    /// The data in the _treeNodes container should be of the following structure:
    ///     [int id, int parentId, RefTableId recordTableId, boolean isAssociatedToCase, str nodeText],
    ///     - id is the index of the current node (not the same as tree identifier),
    ///     - parentId is the index of the current node's parent,
    ///     - isAssociatedToCase indicates if the record is associated to the case for which the tree is created,
    ///     - nodeText is text for the node that is created.
    /// </remarks>
    public void populateTree(container _treeNodes)
    {
        int         nodeIndex;
        int         id;
        int         parentId;
        boolean     isAssociatedToCase;
        str         nodeText;

        for (nodeIndex = 1; nodeIndex <= conLen(_treeNodes); nodeIndex++)
        {
            [id, parentId, isAssociatedToCase, nodeText] = conPeek(_treeNodes, nodeIndex);

            this.createTreeNode(id, parentId, isAssociatedToCase, nodeText);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    private static EngChgCaseWhereUsedAnalysisControl construct()
    {
        return new EngChgCaseWhereUsedAnalysisControl();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAnalysisControl</Name>
				<Source><![CDATA[
    /// <summary>
    /// Create new instance of the <c>EngChgCaseWhereUsedAnalysisControl</c> class.
    /// </summary>
    /// <param name="_formTreeControl">
    /// Form tree control object for which the where-used analysis tree is created.
    /// </param>
    /// <returns>
    /// The <c>EngChgCaseWhereUsedAnalysisControl</c> class instance.
    /// </returns>
    public static EngChgCaseWhereUsedAnalysisControl newAnalysisControl(FormTreeControl _formTreeControl)
    {
        EngChgCaseWhereUsedAnalysisControl analysisControl = EngChgCaseWhereUsedAnalysisControl::construct();

        if (_formTreeControl)
        {
            analysisControl.parmFormTreeControl(_formTreeControl);
            analysisControl.init();
        }

        return analysisControl;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>