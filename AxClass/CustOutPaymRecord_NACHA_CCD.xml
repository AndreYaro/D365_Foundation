<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CustOutPaymRecord_NACHA_CCD</Name>
	<SourceCode>
		<Declaration><![CDATA[
class CustOutPaymRecord_NACHA_CCD extends CustOutPaymRecord_NACHA
{
    //***** NACHA CCD Record Layout *****
    //
    //      Field                           Offset  Value
    //--    ------------------------------- ------- -----------
    //01    recordTypeCode                  01 - 01 6
    //02    transactionCode                 02 - 03
    //03    receivingDFI_Identification     04 - 11
    //04    checkDigit                      12 - 12
    //05    DFI_AccountNumber               13 - 29
    //06    amount                          30 - 39
    //07    identificationNumber            40 - 54
    //08    receivingCompanyName            55 - 76
    //09    discretionaryData               77 - 78
    //10    addendaRecordIndicator          79 - 79 0 (ZERO)
    //11    traceNumber                     80 - 94

    #define.interfaceName('Standard NACHA - CCD')
    #define.formatType('CCD')

    //Offsets:
    #define.receivingCompanyNameOffset(55)

    //Field Lengths:
    #define.receivingCompanyNameLength(22)

    container nacha_ccd_Record;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addCCDFieldPositions</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Adds debug field information to the output file.
    /// </summary>
    /// <remarks>
    ///    ABBCCCCCCCCDEEEEEEEEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHIIJKKKKKKKKKKKKKKK -
    ///    CCD RECEIVABLES RECORD KKKKKKKKKKKKKKK - Trace Number [Journal ID + Line Number] J - Addenda Record
    ///    Indicator = "0" II - Discretionary Data &lt;BLANK&gt; HHHHHHHHHHHHHHHHHHHHHH - Receiving Company
    ///    Name/ID GGGGGGGGGGGGGGG - Identification Number FFFFFFFFFF - Amount [$$$$$$$$cc] EEEEEEEEEEEEEEEEE
    ///    - DFI Account Number D - Check Digit CCCCCCCC - Receiving DFI Identification BB - Transaction Code
    ///    = "27" for AR Checking, "37" for AR SavingsA - Record Type Code = "6"
    /// </remarks>
    private void addCCDFieldPositions()
    {
        #define.cCDRecordLayout         ('ABBCCCCCCCCDEEEEEEEEEEEEEEEEEFFFFFFFFFFGGGGGGGGGGGGGGGHHHHHHHHHHHHHHHHHHHHHHIIJKKKKKKKKKKKKKKK - CCD RECEIVABLES RECORD')
        #define.cCDTraceNumber          ('                                                                               KKKKKKKKKKKKKKK - Trace Number [Journal ID + Line Number]')
        #define.cCDAddendaIndicator     ('                                                                              J - Addenda Record Indicator = "0"')
        #define.cCDDiscretionayData     ('                                                                            II - Discretionary Data <BLANK>')
        #define.cCDReceivingCompanyName ('                                                      HHHHHHHHHHHHHHHHHHHHHH - Receiving Company Name/ID')
        #define.cCDIdentificationNumber ('                                       GGGGGGGGGGGGGGG - Identification Number')
        #define.cCDAmount               ('                             FFFFFFFFFF - Amount [$$$$$$$$cc]')
        #define.cCDDFIAccountNumber     ('            EEEEEEEEEEEEEEEEE - DFI Account Number')
        #define.cCDCheckDigit           ('           D - Check Digit')
        #define.cCDReceivingDFI_ID      ('   CCCCCCCC - Receiving DFI Identification')
        #define.cCDTransactionCode      (' BB - Transaction Code = "27" for AR Checking, "37" for AR Savings')
        #define.cCDRecordTypeCode       ('A - Record Type Code = "6"')

        file.write(#cCDRecordLayout);
        file.write(#cCDTraceNumber);
        file.write(#cCDAddendaIndicator);
        file.write(#cCDDiscretionayData);
        file.write(#cCDReceivingCompanyName);
        file.write(#cCDIdentificationNumber);
        file.write(#cCDAmount);
        file.write(#cCDDFIAccountNumber);
        file.write(#cCDCheckDigit);
        file.write(#cCDReceivingDFI_ID);
        file.write(#cCDTransactionCode);
        file.write(#cCDRecordTypeCode);
        file.write();
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkValues</Name>
				<Source><![CDATA[
    /// <summary>
    /// Validates the data that is needed, and that the payment specification has been assigned to the
    /// payment mode.
    /// </summary>
    /// <param name="_ledgerJournalTrans">
    /// The ledger journal transaction; optional.
    /// </param>
    /// <param name="_progress">
    /// Optional.
    /// </param>
    /// <returns>
    /// true if the data is valid; otherwise, false.
    /// </returns>
    public boolean checkValues(LedgerJournalTrans _ledgerJournalTrans = null, RunbaseProgress _progress = null)
    {
        boolean ok = super(_ledgerJournalTrans, _progress);

        if (!this.parmIsPrenote())
        {
            if (CustPaymMethodVal::exist(_ledgerJournalTrans.PaymMode, CustPaymentValidate::PaymReference)
                && !_ledgerJournalTrans.PaymReference)
            {
                ok = checkFailed("@SYS24523");
            }
        }

        if (ok)
        {
            // Only transactions with Credit Amounts can be used from Accounts Receivable
            if (custVendPaym.paymAmountInSendersCurrency() >= 0)
            {
                if (!this.parmIsPrenote())
                {
                    ok = checkFailed("@SYS98766");
                }
            }
            changecompany(_ledgerJournalTrans.Company)
            {
                custBankAccount = CustBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(), CustTable::findByLedgerDimension(custVendPaym.ledgerJournalTrans().parmLedgerDimension()).BankAccount);
                if (!custBankAccount)
                {
                    ok = checkFailed(strfmt("@SYS98117", custVendPaym.ledgerJournalTrans().parmAccount()));
                }
                else
                {
                    unchecked (Uncheck::TableSecurityPermission)
                    {
                        if (!custBankAccount.AccountNum)
                        {
                            ok = checkFailed(strfmt("@SYS98697", custBankAccount.AccountID, custVendPaym.ledgerJournalTrans().parmAccount()));
                        }
                    }
                }
            }
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillField08</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Fills the Receiving Company Name/ID in the NACHA CCD detail record. This field will contain the
    ///    receivers' company name.
    /// </summary>
    // Receiving Company Name/Id
    protected void fillField08()
    {
        this.strInsert(substr(custVendPaym.recieversCompanyName(), 1, #receivingCompanyNameLength), #receivingCompanyNameOffset);
    }

]]></Source>
			</Method>
			<Method>
				<Name>fillRecord</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calls each <c>fillFieldXX()</c> method to populate all of the CCD payment record.
    /// </summary>
    protected void fillRecord()
    {
        this.fillField01();
        this.fillField02();
        this.fillField03();
        this.fillField04();
        this.fillField05();
        this.fillField06();
        this.fillField07();
        this.fillField08();
        this.fillField09();
        this.fillField10();
        this.fillField11();
    }

]]></Source>
			</Method>
			<Method>
				<Name>initRecord</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Initializes the CCD payment output record.
    /// </summary>
    protected void initRecord()
    {
        #define.blankRoutingNumber('0')
        #define.blank(' ')

        nacha_ccd_Record = connull();
        outputRecord = strrep(#blank, 94);
        bankRoutingNumber = strrep(#blankRoutingNumber, 8);
        transactionAmount = 0;

        custBankAccount = CustBankAccount::find(custVendPaym.ledgerJournalTrans().parmAccount(), CustTable::findByCompany(custVendPaym.ledgerJournalTrans().Company, custVendPaym.ledgerJournalTrans().parmAccount()).BankAccount);
    }

]]></Source>
			</Method>
			<Method>
				<Name>interfaceName</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Returns the name of the specification to be displayed in the user interface (UI).
    /// </summary>
    /// <returns>
    ///    The name of the specification to be displayed in the UI.
    /// </returns>
    public PaymInterfaceName interfaceName()
    {
        return #interfaceName;
    }

]]></Source>
			</Method>
			<Method>
				<Name>output</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Writes the payment detail to the Electronic Funds Transfer (EFT) output file and increments the
    ///    totals for the transaction.
    /// </summary>
    public void output()
    {
        this.initRecord();
        this.fillRecord();
        custVendOutPaym.addDetailRecord(#formatType, bankRoutingNumber, transactionAmount, 0);

        nacha_ccd_Record = conins(nacha_ccd_Record, 1, outputRecord);

        file.writeExp(nacha_ccd_Record);

        if (custVendOutPaym.isDebug())
        {
            this.addCCDFieldPositions();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>