<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>LedgerSettlementsAutomationCriteriaForm</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.AX.Platform.Extensibility;
using System.ComponentModel.Composition;

/// <summary>
/// The <c>LedgerSettlementsAutomationCriteriaForm</c> class is designed to define form state for Ledger settlements automation form.
/// </summary>
[ExportMetadata(extendedTypeStr(ProcessScheduleTypeName), 'LedgerSettlementsAutomation')]
[Export(identifierStr(Dynamics.AX.Application.LedgerSettlementsAutomationCriteriaForm))]
internal class LedgerSettlementsAutomationCriteriaForm
{
    internal LedgerSettlementsAutomationCriteriaFormInteraction formInteraction;
    internal LedgerSettlementsAutomationCriteriaFormState formState;
    private Query originalBaselineQuery;
    private Query workingQuery;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    private void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>constructAutomationCriteriaForm</Name>
				<Source><![CDATA[
    internal static LedgerSettlementsAutomationCriteriaForm constructAutomationCriteriaForm(
        ProcessScheduleTypeName _typeName,
        ProcessScheduleSchedulingContract _schedulingContract,
        LedgerSettlementsAutomationCriteriaControls _controls)
    {
        SysPluginMetadataCollection metadataCollection = new SysPluginMetadataCollection();
        metadataCollection.SetManagedValue(extendedTypeStr(ProcessScheduleTypeName), _typeName);

        LedgerSettlementsAutomationCriteriaForm automationCriteriaForm =
            SysPluginFactory::Instance('Dynamics.AX.Application', classStr(LedgerSettlementsAutomationCriteriaForm), metadataCollection) as LedgerSettlementsAutomationCriteriaForm;
        
        if (_controls.checkInitialized())
        {
            automationCriteriaForm.initializeFormState(_schedulingContract, _controls);
            
            automationCriteriaForm.initializeFormInteraction(_typeName);
        }

        return automationCriteriaForm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFormState</Name>
				<Source><![CDATA[
    private void initializeFormState(ProcessScheduleSchedulingContract _schedulingContract, LedgerSettlementsAutomationCriteriaControls _controls)
    {
        formState = LedgerSettlementsAutomationCriteriaFormState::construct(
            _controls,
            _schedulingContract,
            this.getOriginalBaselineQuery(),
            this.getWorkingQuery());
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeFormInteraction</Name>
				<Source><![CDATA[
    private void initializeFormInteraction(ProcessScheduleTypeName _typeName)
    {
        formInteraction = LedgerSettlementsAutomationCriteriaFormInteraction::constructFromFormState(_typeName, formState);
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    internal boolean validate()
    {
        return formInteraction.validate();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduleSeries</Name>
				<Source><![CDATA[
    internal void createScheduleSeries(ProcessScheduleSchedulingContract _schedulingContract)
    {
        formInteraction.createScheduleSeries(_schedulingContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduleSeries</Name>
				<Source><![CDATA[
    internal void updateScheduleSeries()
    {
        formInteraction.updateScheduleSeries();
    }

]]></Source>
			</Method>
			<Method>
				<Name>createScheduledOccurrence</Name>
				<Source><![CDATA[
    internal void createScheduledOccurrence(ProcessScheduleSchedulingContract _schedulingContract)
    {
        formInteraction.createScheduledOccurrence(_schedulingContract);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateScheduledOccurrence</Name>
				<Source><![CDATA[
    internal void updateScheduledOccurrence()
    {
        formInteraction.updateScheduledOccurrence();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalQuery</Name>
				<Source><![CDATA[
    internal Query getOriginalQuery()
    {
        return formState.getOriginalLedgerSettlementsQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getQueryForApplicationOrExtraction</Name>
				<Source><![CDATA[
    internal Query getQueryForApplicationOrExtraction()
    {
        return formState.getWorkingLedgerSettlementsQuery();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getWorkingQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the working query used for the ledger settlements automation criteria setup and will be exposed for modification by the end user.
    /// </summary>
    /// <returns>The underlying query used for the payment proposal automation criteria setup.</returns>
    protected Query getWorkingQuery()
    {
        if (workingQuery == null)
        {
            workingQuery = this.getNewLedgerSettlementsQuery();
        }

        return workingQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getOriginalBaselineQuery</Name>
				<Source><![CDATA[
    /// <summary>
    /// Defines the original query used for a baseline when the framework applies or extracts query criteria modified by the end user.
    /// </summary>
    /// <returns>The original query used for used for a baseline.</returns>
    protected Query getOriginalBaselineQuery()
    {
        if (originalBaselineQuery == null)
        {
            originalBaselineQuery = this.getNewLedgerSettlementsQuery();
        }

        return originalBaselineQuery;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getNewLedgerSettlementsQuery</Name>
				<Source><![CDATA[
    private Query getNewLedgerSettlementsQuery()
    {
        Query query = new Query(queryStr(LedgerSettlements));
        
        return query;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>