<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>BudgetControlDataMaintenanceJournalProcessor</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The <c>BudgetControlDataMaintenanceJournalProcessor</c> extends BudgetControlAccountingJournalProcessor
/// for submitting budget check methods to be used in classes of budget control data maintenance processor.
/// </summary>
internal final class BudgetControlDataMaintenanceJournalProcessor extends BudgetControlAccountingJournalProcessor
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal static BudgetControlDataMaintenanceJournalProcessor construct()
    {
        return new BudgetControlDataMaintenanceJournalProcessor();
    }

]]></Source>
			</Method>
			<Method>
				<Name>submitLedgerJournalTableToCheckBudget</Name>
				<Source><![CDATA[
    /// <summary>
    ///  This method is the same functionality as submitting the ledger journal to be checked
    ///  for budget without checking ledger journal posting status.
    /// </summary>
    /// <param name="_ledgerJournalTableRecId">
    ///    The record ID of a <c>LedgerJournalTable</c> record.
    /// </param>
    /// <param name="_ignoreCheckOnLineItemEntry">
    ///    A Boolean value that indicates whether the budgetary control configuration for performing a budget
    ///    check for the journal line item on entry should be ignored; optional.
    /// </param>
    /// <param name="_userId">
    ///    The <c>UserId</c> value for which the budget check is performed; optional.
    /// </param>
    /// <param name="_showResultMessages">
    ///    A Boolean value that indicates whether any budget check result error or warning messages should be
    ///    displayed in the InfoLog; optional.
    /// </param>
    internal static void submitLedgerJournalTableToCheckBudget(
        RecId _ledgerJournalTableRecId,
        boolean _ignoreCheckOnLineItemEntry = true,
        userid _userId = curUserId(),
        boolean _showResultMessages = true)
    {
        if (BudgetControlConfiguration::isControlConfigured())
        {
            ttsBegin;

            BudgetControlDataMaintenanceJournalProcessor journalProcessor 
                = BudgetControlDataMaintenanceJournalProcessor::construct();

            journalProcessor.initializeForJournalBudgetCheck(
                _ledgerJournalTableRecId,
                _ignoreCheckOnLineItemEntry,
                _userId,
                _showResultMessages);

            journalProcessor.addJournalToProcess();

            ttsCommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initializeForJournalBudgetCheck</Name>
				<Source><![CDATA[
    protected void initializeForJournalBudgetCheck(
        recId _ledgerJournalTableRecId,
        boolean _ignoreCheckOnLineItemEntry,
        userid _userId,
        boolean _showResultMessages)
    {
        LedgerJournalTable ledgerJournalTable = LedgerJournalTable::findByRecId(_ledgerJournalTableRecId);

        if (!ledgerJournalTable)
        {
            throw error(Error::wrongUseOfFunction(funcName()));
        }

        ledgerJournalType = ledgerJournalTable.JournalType;
        journalNumber = ledgerJournalTable.JournalNum;
        journalLegalEntityDataArea = ledgerJournalTable.dataAreaId;
        userId = _userId;
        ignoreCheckOnLineItemEntry = _ignoreCheckOnLineItemEntry;
        showResultMessages = _showResultMessages;
        isConfirmationBudgetCheck = false;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>