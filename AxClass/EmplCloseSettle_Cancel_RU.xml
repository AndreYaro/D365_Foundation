<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>EmplCloseSettle_Cancel_RU</Name>
	<SourceCode>
		<Declaration><![CDATA[
class EmplCloseSettle_Cancel_RU extends RunBaseBatch implements BatchRetryable
{
    DialogField dialogTransDate;

    TransDate   transDate;
    QueryRun    queryRun;

    #define.CurrentVersion(2)

    #localmacro.CurrentList
        transDate
    #endmacro
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>buildInternalQueryRun</Name>
				<Source><![CDATA[
    protected QueryRun buildInternalQueryRun(QueryRun _queryRun)
    {
        Query                query;
        QueryBuildDataSource qbds, qbdsNew;
        QueryBuildRange      qbr;
        int                  i;

        query = new Query();

        qbds = _queryRun.query().dataSourceTable(tableNum(EmployeeTable_RU));

        qbdsNew = query.addDataSource(qbds.table());

        for (i = 1; i <= qbds.rangeCount(); i++)
        {
            qbr = qbds.range(i);
            qbdsNew.addRange(qbr.field()).value(qbr.value());
        }

        qbdsNew = qbdsNew.addDataSource(tableNum(EmplTrans_RU));
        qbdsNew.addSelectionField(fieldNum(EmplTrans_RU, EmplAccount));
        qbdsNew.orderMode(OrderMode::GroupBy);
        qbdsNew.joinMode(JoinMode::ExistsJoin);
        qbdsNew.relations(true);

        return new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    public Object dialog()
    {
        DialogRunbase   dialog = super();
        ;

        dialogTransDate = dialog.addFieldValue(extendedTypeStr(TransDate),
                                               transDate ?
                                               transDate :
                                               DateTimeUtil::getSystemDate(DateTimeUtil::getUserPreferredTimeZone()),
                                               "@SYS67515",
                                               "@GLS109127");

        return dialog;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getFromDialog</Name>
				<Source><![CDATA[
    public boolean getFromDialog()
    {
        boolean ret;
        ;

        ret = super();

        if (ret)
        {
            transDate = dialogTransDate.value();
            if (! transDate)
            {
                ret = checkFailed("@SYS56505");
            }
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new()
    {
        Query query;

        super();

        query = new Query("@GLS105057");

        query.addDataSource(tableNum(EmployeeTable_RU));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>pack</Name>
				<Source><![CDATA[
    public container pack()
    {
        return [ #CurrentVersion, #CurrentList, queryRun.pack()];
    }

]]></Source>
			</Method>
			<Method>
				<Name>queryRun</Name>
				<Source><![CDATA[
    public QueryRun queryRun()
    {
        return queryRun;
    }

]]></Source>
			</Method>
			<Method>
				<Name>run</Name>
				<Source><![CDATA[
    public void run()
    {
        EmplSettleReverse_RU  settleReverse;
        QueryRun              queryRunInternal;
        EmployeeTable_RU      emplTable;

        queryRunInternal = this.buildInternalQueryRun(queryRun);

        this.progressInit("@GLS105057", SysQuery::countLoops(queryRunInternal), #AviUpdate);

        try
        {
            while (queryRunInternal.next())
            {
                emplTable           = queryRunInternal.get(tableNum(EmployeeTable_RU));

                settleReverse       = new EmplSettleReverse_RU(transDate);

                progress.incCount();
                progress.setText("@GLS100699" + "@GLS116883" + emplTable.EmployeeId);

                settleReverse.reverseNow(emplTable.EmployeeId);
            }
        }
        catch (Exception::Deadlock)
        {
            retry;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>runsImpersonated</Name>
				<Source><![CDATA[
    public boolean runsImpersonated()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>showQueryValues</Name>
				<Source><![CDATA[
    public boolean showQueryValues()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>unpack</Name>
				<Source><![CDATA[
    public boolean unpack(container _packedClass)
    {
        Integer     version = RunBase::getVersion(_packedClass);
        container   conQueryRun;

        ;

        switch (version)
        {
            case #CurrentVersion:

                [version, #CurrentList, conQueryRun] = _packedClass;
                queryRun = new QueryRun(conQueryRun);
                break;

            default:
                return false;
        }

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
    public static ClassDescription description()
    {
        return "@GLS105057";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
    public static void main(Args _args)
    {
        EmplCloseSettle_Cancel_RU   cancelSettlement = new EmplCloseSettle_Cancel_RU();
        ;

        if (cancelSettlement.prompt())
        {
            cancelSettlement.runOperation();
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		<Method><Name>isRetryable</Name><Source><![CDATA[
    /// <summary>
    /// Specifies if the batch task is retryable for transient exceptions or not.
    /// </summary>
    /// <returns>
    /// If true is returned, the batch task is retryable, otherwise it is not.
    /// </returns>
    [Hookable(false)]
    public final boolean isRetryable()
    {
        return true;
    }
]]></Source></Method></Methods>
	</SourceCode>
</AxClass>