<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>JournalErrorVoucherList</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>JournalErrorVoucherList</c> class is a part of the error handling capability in the journal
///    framework.
/// </summary>
// This class contains a list of journalError buffers that contains the infolog per voucher
// It should normally not be overloaded.
class JournalErrorVoucherList extends JournalErrorList
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>addInfolog</Name>
				<Source><![CDATA[
    public boolean addInfolog(
        JournalCheckPost _journalCheckPost,
        JournalTransData _journalTransData)
    {
        JournalInfoAction   infoAction  = JournalInfoAction::newJournalTrans(_journalTransData.journalTrans());
        container           infologOrig;
        Integer             logPoint;

        if (this.find(_journalTransData.journalTrans().Voucher))
        {
            infologOrig = journalError.Infolog;
            this.remove();
        }

        journalError.RefTableId         =  journalTableData.journalTable().TableId;
        journalError.JournalId          = _journalTransData.journalTrans().JournalId;
        journalError.Voucher            = _journalTransData.journalTrans().Voucher;
        journalError.LineNum            = 0;
        [journalError.Exception,
         journalError.Infolog,
         journalError.InfologAction,
         logPoint]                      = JournalCheckPost::infologPack(_journalTransData.journalTrans().data(),_journalCheckPost.logPoint());

        _journalCheckPost.logPoint(logPoint);

        if (infologOrig)
        {
            journalError.Infolog        = infologOrig + journalError.Infolog;
        }

        this.add(journalError);

        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>find</Name>
				<Source><![CDATA[
    public boolean find(Voucher _voucher)
    {
        if (! this.selectDbCalled())
        {
            this.initDb();
        }

        journalError.Voucher = _voucher;

        return cacheJournalError.find(journalError);
    }

]]></Source>
			</Method>
			<Method>
				<Name>infolog</Name>
				<Source><![CDATA[
    public void infolog(Voucher _voucher)
    {
        if (this.find(_voucher))
        {
            JournalError::infolog(this.item());
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initDb</Name>
				<Source><![CDATA[
    public void initDb()
    {
        this.selectDb(journalTableData.journalTable(),true);
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    public void new(JournalTableData _journalTableData)
    {
        super(_journalTableData);

        cacheJournalError.sortOrder(fieldNum(JournalError,Voucher));
    }

]]></Source>
			</Method>
			<Method>
				<Name>packInitDb</Name>
				<Source><![CDATA[
    public static container packInitDb(JournalTableMap _journalTable)
    {
        JournalTableData        journalTableData        = JournalTableData::newTable(_journalTable);
        JournalErrorVoucherList journalErrorVoucherList = journalTableData.journalStatic().newJournalErrorVoucherList(journalTableData);

        journalErrorVoucherList.selectDb(_journalTable,true);

        return journalErrorVoucherList.pack();
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>