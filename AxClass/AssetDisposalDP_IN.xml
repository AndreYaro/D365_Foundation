<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>AssetDisposalDP_IN</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
/// The Report Data Provider <c>AssetDisposalDP_IN</c> class declares table for the <c>AssetDisposal_IN</c> Report.
/// </summary>
[
    SRSReportQueryAttribute(querystr(AssetDisposal_IN)),
    SRSReportParameterAttribute(classstr(AssetDisposalContract_IN))
]
public class AssetDisposalDP_IN extends SrsReportDataProviderPreProcessTempDB
{
    AssetDisposalTmp_IN          assetDisposalTmp_IN;
    AssetSumCalc_Trans_IN        assetSumCalc_Trans;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>getAssetDisposalTmp</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches data from <c>AssetDisposalTmp_IN</c> table.
    /// </summary>
    /// <returns>
    /// <c>AssetDisposalTmp_IN</c> data for the report.
    /// </returns>
    [
        SRSReportDataSetAttribute(tablestr(AssetDisposalTmp_IN))
    ]
    public AssetDisposalTmp_IN getAssetDisposalTmp()
    {
        return assetDisposalTmp_IN;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getAssetSaleValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the value for <c>SaleValue</c> field for the report.
    /// </summary>
    /// <param name="_assetGroupId">
    /// The <c>AssetGroupId</c> field to which to assign a value.
    /// </param>
    /// <param name="_assetBookId">
    /// The <c>AssetBookId</c> field to which to assign a value.
    /// </param>
    /// <returns>
    /// <c>SaleValue</c> field for the report.
    /// </returns>
    public AssetSaleValue getAssetSaleValue(
        AssetGroupId    _assetGroupId,
        AssetBookId     _assetBookId)
    {
        return AssetSumCalc_Trans_IN::newAssetYear(_assetGroupId, _assetBookId).disposalValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGroupAssetNetBookValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the Netbook value.
    /// </summary>
    /// <param name="_assetGroupId">
    /// The <c>AssetGroupId</c> field to which to assign a value.
    /// </param>
    /// <param name="_assetBookId">
    /// The <c>AssetBookId</c> field to which to assign a value.
    /// </param>
    /// <returns>
    /// The Netbook Value.
    /// </returns>
    public AssetNetBookValue getGroupAssetNetBookValue(
        AssetGroupId    _assetGroupId,
        AssetBookId     _assetBookId)
    {
        AssetSumCalc assetSumCalc;

        assetSumCalc = assetSumCalc_Trans;
        assetSumCalc.parmAllAssetsSold_IN(AssetBook::checkAllAssetsSold_IN(_assetGroupId, _assetBookId));
        assetSumCalc.parmGroup_IN(NoYes::Yes);

        return assetSumCalc.acquisitionValueAll();
    }

]]></Source>
			</Method>
			<Method>
				<Name>getGroupAssetProfitLossValue</Name>
				<Source><![CDATA[
    /// <summary>
    /// This method returns the Profit loss value.
    /// </summary>
    /// <param name="_assetGroupId">
    /// The <c>AssetGroupId</c> field to which to assign a value.
    /// </param>
    /// <param name="_assetBookId">
    /// The <c>AssetBookId</c> field to which to assign a value.
    /// </param>
    /// <returns>
    /// The Profit loss Value.
    /// </returns>
    public AssetProfitLossValue getGroupAssetProfitLossValue(
        AssetGroupId    _assetGroupId,
        AssetBookId     _assetBookId)
    {
        AssetSumCalc assetSumCalc;

        assetSumCalc = assetSumCalc_Trans;
        assetSumCalc.parmAllAssetsSold_IN(AssetBook::checkAllAssetsSold_IN(_assetGroupId, _assetBookId));

        assetSumCalc.parmGroup_IN(NoYes::Yes);

        return assetSumCalc.profitLossValue();
    }

]]></Source>
			</Method>
			<Method>
				<Name>insertAssetDisposalTmp_IN</Name>
				<Source><![CDATA[
    /// <summary>
    /// Inserts all the values into <c>AssetDisposalTmp_IN</c> temp table.
    /// </summary>
    /// <param name="_assetSumCalc">
    /// The <c>AssetSumCalc</c> field to which to assign a value.
    /// </param>
    /// <param name="_assetTable">
    /// The <c>AssetTable</c> field to which to assign a value.
    /// </param>
    /// <param name="_assetBook">
    /// The <c>AssetBook</c> field to which to assign a value.
    /// </param>
    /// <param name="_currentStatus">
    /// The <c>currentStatus</c> field to which to assign a value.
    /// </param>
    public void insertAssetDisposalTmp_IN(
        AssetSumCalc    _assetSumCalc,
        AssetTable      _assetTable,
        AssetBook  _assetBook,
        AssetStatus     _currentStatus)
    {
        assetDisposalTmp_IN.clear();

        assetDisposalTmp_IN.AssetGroup      = _assetBook.AssetGroup;
        assetDisposalTmp_IN.AssetId         = _assetBook.AssetId;
        assetDisposalTmp_IN.BookId          = _assetBook.BookId;
        assetDisposalTmp_IN.Status          = _assetBook.Status;

        assetDisposalTmp_IN.NetBookValue    = -(_assetSumCalc.disposalSaleValue()  +
                                            _assetSumCalc.disposalScrapValue()  +
                                            _assetSumCalc.profitLossValue()     +
                                            _assetSumCalc.capitalReserveValue());

        assetDisposalTmp_IN.SaleValue       = _assetSumCalc.disposalSaleValue();

        assetDisposalTmp_IN.ProfitLossValue = (_assetSumCalc.profitLossValue() +
                                            _assetSumCalc.capitalReserveValue());

        assetDisposalTmp_IN.Name            = _assetTable.Name;
        assetDisposalTmp_IN.DisposalDate    = _assetBook.DisposalDate;
        assetDisposalTmp_IN.GroupStatus     = _currentStatus;

        assetDisposalTmp_IN.GroupSaleValue  = this.getAssetSaleValue(
          _assetBook.AssetGroup,
          _assetBook.BookId);
        assetDisposalTmp_IN.GroupProfitLossValue = this.getGroupAssetProfitLossValue(
          _assetBook.AssetGroup,
          _assetBook.BookId);
        assetDisposalTmp_IN.GroupNetBookValue = this.getGroupAssetNetBookValue(
          _assetBook.AssetGroup,
          _assetBook.BookId);

        assetDisposalTmp_IN.insert();
    }

]]></Source>
			</Method>
			<Method>
				<Name>processReport</Name>
				<Source><![CDATA[
    /// <summary>
    /// Fetches the required data for the report.
    /// </summary>
    public void processReport()
    {
        Query                query;
        QueryRun             queryRun;
        QueryBuildDataSource qbds;
        AssetBook       assetBookLoc;
        AssetBook       assetBook;
        AssetSumCalc         assetSumCalc;
        AssetStatus          currentStatus;
        AssetTable           assetTable;
        AssetGroupId         currentAssetGroup;
        AssetDisposalDate    fromDate;
        AssetDisposalDate    toDate;

        AssetDisposalContract_IN contract = this.parmDataContract() as AssetDisposalContract_IN;

        fromDate = contract.parmFromDate();
        toDate   = contract.parmToDate();

        query = this.parmQuery();
        qbds  = query.dataSourceTable(tablenum(AssetBook));

        SysQuery::findOrCreateRange(qbds, fieldnum(AssetBook, DisposalDate)).value(queryRange(fromDate, toDate));

        queryRun = new QueryRun(query);

        if (AssetParameters::checkAssetParameters_IN())
        {
            while (queryRun.next())
            {
                assetTable     = queryRun.get(tablenum(AssetTable));
                assetBook = queryRun.get(tablenum(AssetBook));
                currentStatus  = assetBook.Status;

                if (currentAssetGroup != assetBook.AssetGroup)
                {
                    select firstOnly recId from assetBookLoc
                        where assetBookLoc.AssetGroup == assetBook.AssetGroup
                            && assetBookLoc.Status == AssetStatus::Open
                            && assetBookLoc.DisposalDate >= fromDate
                            && assetBookLoc.DisposalDate <= toDate;
                    currentAssetGroup = assetBook.AssetGroup;
                }

                if (assetBookLoc.RecId)
                {
                    currentStatus = AssetStatus::Open;
                }

                assetSumCalc = AssetSumCalc_Trans::newAssetYear(
                    assetBook.AssetId,
                    assetBook.BookId);

                assetSumCalc_Trans = AssetSumCalc_Trans_IN::newAssetYear(
                    assetBook.AssetGroup,
                    assetBook.bookId);

                this.insertAssetDisposalTmp_IN(assetSumCalc, assetTable, assetBook, currentStatus);
            }
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>