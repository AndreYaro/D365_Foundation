<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>GanttTable_ReqExplosion</Name>
	<SourceCode>
		<Declaration><![CDATA[
class GanttTable_ReqExplosion extends GanttTableBase
{
    GanttTmpReqExplosion ganttTmpReqExplosion;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>initRecordFromGanttColor</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes a record buffer based on the color settings.
    /// </summary>
    /// <param name = "_ganttTmpReqExplosion">The record to initialize</param>
    /// <param name = "_ganttColor">The color settings to apply.</param>
    public static void initRecordFromGanttColor(GanttTmpReqExplosion _ganttTmpReqExplosion, GanttColor_ReqExplosion _ganttColor)
    {
        _ganttTmpReqExplosion.NodeColor      = _ganttColor.getNodeColor(tablestr(GanttTmpReqExplosion),
                                                                       _ganttTmpReqExplosion.RecId,
                                                                       _ganttTmpReqExplosion);

        _ganttTmpReqExplosion.FuturesColor   = _ganttColor.getFuturesColor(tablestr(GanttTmpReqExplosion),
                                                                          _ganttTmpReqExplosion.RecId,
                                                                          _ganttTmpReqExplosion);

        _ganttTmpReqExplosion.ActionColor    = _ganttColor.getActionColor(tablestr(GanttTmpReqExplosion),
                                                                         _ganttTmpReqExplosion.RecId,
                                                                         _ganttTmpReqExplosion);

        _ganttTmpReqExplosion.MarginsColor   = _ganttColor.getMarginsColor(tablestr(GanttTmpReqExplosion),
                                                                          _ganttTmpReqExplosion.RecId,
                                                                          _ganttTmpReqExplosion);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromGanttColor</Name>
				<Source><![CDATA[
    public void initFromGanttColor(GanttColor_ReqExplosion _ganttColor)
    {
        GanttTable_ReqExplosion::initRecordFromGanttColor(ganttTmpReqExplosion, _ganttColor);
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromReqTrans</Name>
				<Source><![CDATA[
    public void initFromReqTrans(ReqTrans _reqTrans)
    {
        ReqPO reqPO;
        utcdatetime schedFromDateTime;
        utcdatetime schedToDateTime;
        ganttTmpReqExplosion.ItemId         = _reqTrans.ItemId;
        ganttTmpReqExplosion.InventDimId    = _reqTrans.CovInventDimId;
        ganttTmpReqExplosion.RefType        = _reqTrans.RefType;
        ganttTmpReqExplosion.RefId          = _reqTrans.RefId;
        ganttTmpReqExplosion.LineNum        = _reqTrans.Level;

        if (_reqTrans.isPlannedOrder())
        {
            reqPO = _reqTrans.reqPo();

            ganttTmpReqExplosion.FromDate       = reqPO.SchedFromDate;
            ganttTmpReqExplosion.FromTime       = reqPO.ReqTimeOrder;
            ganttTmpReqExplosion.ToDate         = reqPO.SchedToDate;
            ganttTmpReqExplosion.ToTime         = reqPO.ReqTime;

            ganttTmpReqExplosion.SchedFromDate  = reqPO.ReqDateOrder;
            ganttTmpReqExplosion.SchedFromTime  = reqPO.ReqTimeOrder;
            ganttTmpReqExplosion.SchedToDate    = reqPO.ReqDate;
            ganttTmpReqExplosion.SchedToTime    = reqPO.ReqTime;
        }
        else
        {
            ganttTmpReqExplosion.FromDate       = _reqTrans.fromDate();
            ganttTmpReqExplosion.FromTime       = _reqTrans.fromTime();
            ganttTmpReqExplosion.ToDate         = _reqTrans.toDate();
            ganttTmpReqExplosion.ToTime         = _reqTrans.toTime();

            ganttTmpReqExplosion.SchedFromDate  = ganttTmpReqExplosion.FromDate;
            ganttTmpReqExplosion.SchedFromTime  = ganttTmpReqExplosion.FromTime;
            ganttTmpReqExplosion.SchedToDate    = ganttTmpReqExplosion.ToDate;
            ganttTmpReqExplosion.SchedToTime    = ganttTmpReqExplosion.ToTime;
        }

        ganttTmpReqExplosion.FuturesDate    = _reqTrans.displayFuturesDate();
        ganttTmpReqExplosion.FuturesTime    = _reqTrans.FuturesTime;

        ganttTmpReqExplosion.ActionDate     = _reqTrans.displayActionDate();
        ganttTmpReqExplosion.ActionTime     = _reqTrans.ReqTime;

        ganttTmpReqExplosion.CalendarId     = _reqTrans.ganttCalenderId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmTableBuffer</Name>
				<Source><![CDATA[
    public Common parmTableBuffer(Common _ganttTmpReqExplosion = ganttTmpReqExplosion)
    {
        if (!prmisdefault(_ganttTmpReqExplosion))
        {
            ganttTmpReqExplosion.data(_ganttTmpReqExplosion);
        }

        return ganttTmpReqExplosion;
    }

]]></Source>
			</Method>
			<Method>
				<Name>resetTableBuffer</Name>
				<Source><![CDATA[
    protected void resetTableBuffer()
    {
        ganttTmpReqExplosion = null;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    public static GanttTable_ReqExplosion construct()
    {
        return new GanttTable_ReqExplosion();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newAllowUserModification</Name>
				<Source><![CDATA[
    public static GanttTable_ReqExplosion newAllowUserModification(boolean _allowUserModification,
                                                                   boolean _keepBaseData = _allowUserModification)
    {
        GanttTable_ReqExplosion ganttTable;
        ganttTable = GanttTable_ReqExplosion::construct();

        ganttTable.parmAllowUserModification(_allowUserModification);
        ganttTable.parmKeepBaseData(_keepBaseData);

        ganttTable.init();

        return ganttTable;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateColorOnAll</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the color on all temp records.
    /// </summary>
    /// <param name = "_ganttColor">The color settings to apply.</param>
    public void updateColorOnAll(GanttColor_ReqExplosion _ganttColor)
    {
        ttsbegin;

        while select forupdate ganttTmpReqExplosion
        {
            GanttTable_ReqExplosion::initRecordFromGanttColor(ganttTmpReqExplosion, _ganttColor);
            ganttTmpReqExplosion.update();
        }

        ttscommit;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>