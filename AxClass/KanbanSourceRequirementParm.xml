<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>KanbanSourceRequirementParm</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>KanbanSourceRequirementParm</c> class holds kanban source requirement data.
/// </summary>
public class KanbanSourceRequirementParm
{
    Common          sourceRequirement;
    RefTableId      sourceRequirementTableId;
    RefRecId        sourceRequirementRecId;
    RefTableId      parentSourceRequirementTableId;
    RefRecId        parentSourceRequirementRecId;
    RefTableId      rootSourceRequirementTableId;
    RefRecId        rootSourceRequirementRecId;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        protected void new()
    {
    }

]]></Source>
			</Method>
			<Method>
				<Name>parentSourceRequirementIsRoot</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the parent source requirement is identical with the root source requirement.
    /// </summary>
    /// <returns>
    ///    true if the parent source requirement is identical with the root source requirement; otherwise, false.
    /// </returns>>
    public boolean parentSourceRequirementIsRoot()
    {
        return    parentSourceRequirementTableId == rootSourceRequirementTableId
               && parentSourceRequirementRecId   == rootSourceRequirementRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceRequirementRecId</Name>
				<Source><![CDATA[
        public RefRecId parmParentSourceRequirementRecId(RefRecId _parentSourceRequirementRecId = parentSourceRequirementRecId)
    {
        parentSourceRequirementRecId = _parentSourceRequirementRecId;
        return parentSourceRequirementRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmParentSourceRequirementTableId</Name>
				<Source><![CDATA[
        public RefTableId parmParentSourceRequirementTableId(RefTableId _parentSourceRequirementTableId = parentSourceRequirementTableId)
    {
        parentSourceRequirementTableId = _parentSourceRequirementTableId;
        return parentSourceRequirementTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRootSourceRequirementRecId</Name>
				<Source><![CDATA[
        public RefRecId parmRootSourceRequirementRecId(RefRecId _rootSourceRequirementRecId = rootSourceRequirementRecId)
    {
        rootSourceRequirementRecId = _rootSourceRequirementRecId;
        return rootSourceRequirementRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmRootSourceRequirementTableId</Name>
				<Source><![CDATA[
        public RefTableId parmRootSourceRequirementTableId(RefTableId _rootSourceRequirementTableId = rootSourceRequirementTableId)
    {
        rootSourceRequirementTableId = _rootSourceRequirementTableId;
        return rootSourceRequirementTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRequirement</Name>
				<Source><![CDATA[
        public Common parmSourceRequirement(Common _sourceRequirement = sourceRequirement)
    {
        sourceRequirement = _sourceRequirement;
        return sourceRequirement;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRequirementRecId</Name>
				<Source><![CDATA[
        public RefRecId parmSourceRequirementRecId(RefRecId _sourceRequirementRecId = sourceRequirementRecId)
    {
        sourceRequirementRecId = _sourceRequirementRecId;
        return sourceRequirementRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>parmSourceRequirementTableId</Name>
				<Source><![CDATA[
        public RefTableId parmSourceRequirementTableId(RefTableId _sourceRequirementTableId = sourceRequirementTableId)
    {
        sourceRequirementTableId = _sourceRequirementTableId;
        return sourceRequirementTableId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRequirementIsParent</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the source requirement is identical with the parent source requirement.
    /// </summary>
    /// <returns>
    ///    true if the source requirement is identical with the parent source requirement; otherwise, false.
    /// </returns>>
    public boolean sourceRequirementIsParent()
    {
        return    sourceRequirementTableId == parentSourceRequirementTableId
               && sourceRequirementRecId   == parentSourceRequirementRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRequirementIsRoot</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Determines if the source requirement is identical with the root source requirement.
    /// </summary>
    /// <returns>
    ///    true if the source requirement is identical with the root source requirement; otherwise, false.
    /// </returns>>
    public boolean sourceRequirementIsRoot()
    {
        return    sourceRequirementTableId == rootSourceRequirementTableId
               && sourceRequirementRecId   == rootSourceRequirementRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>validate</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Validates the source requirement parameters.
    /// </summary>
    /// <returns>
    ///    true if the parameters are valid; otherwise, false.
    /// </returns>
    public boolean validate()
    {
        return    sourceRequirement
               && sourceRequirement.TableId == sourceRequirementTableId
               && sourceRequirement.RecId   == sourceRequirementRecId
               && parentSourceRequirementTableId
               && parentSourceRequirementRecId
               && rootSourceRequirementTableId
               && rootSourceRequirementRecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates an instance of the <c>KanbanSourceRequirementParm</c> class.
    /// </summary>
    /// <returns>
    ///    An instance of the <c>KanbanSourceRequirementParm</c> class.
    /// </returns>
    private static KanbanSourceRequirementParm construct()
    {
        return new KanbanSourceRequirementParm();
    }

]]></Source>
			</Method>
			<Method>
				<Name>newKanbanSourceRequirement</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>KanbanSourceRequirementParm</c> class.
    /// </summary>
    /// <param name="_kanbanSourceRequirement">
    ///    A <c>KanbanSourceRequirement</c> table record that is used to initialize the class.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanSourceRequirementParm</c> class.
    /// </returns>
    public static KanbanSourceRequirementParm newKanbanSourceRequirement(KanbanSourceRequirement _kanbanSourceRequirement)
    {
        KanbanSourceRequirementParm kanbanSourceRequirementParm = KanbanSourceRequirementParm::construct();

        kanbanSourceRequirementParm.parmSourceRequirement(_kanbanSourceRequirement.sourceRequirement());
        kanbanSourceRequirementParm.parmSourceRequirementTableId(_kanbanSourceRequirement.SourceRequirementTableId);
        kanbanSourceRequirementParm.parmSourceRequirementRecId(_kanbanSourceRequirement.SourceRequirementRecId);
        kanbanSourceRequirementParm.parmParentSourceRequirementTableId(_kanbanSourceRequirement.ParentSourceRequirementTableId);
        kanbanSourceRequirementParm.parmParentSourceRequirementRecId(_kanbanSourceRequirement.ParentSourceRequirementRecId);
        kanbanSourceRequirementParm.parmRootSourceRequirementTableId(_kanbanSourceRequirement.RootSourceRequirementTableId);
        kanbanSourceRequirementParm.parmRootSourceRequirementRecId(_kanbanSourceRequirement.RootSourceRequirementRecId);

        return kanbanSourceRequirementParm;
    }

]]></Source>
			</Method>
			<Method>
				<Name>newStandard</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Creates a new instance of the <c>KanbanSourceRequirementParm</c> class.
    /// </summary>
    /// <param name="_sourceRequirement">
    ///    The source requirement table buffer.
    /// </param>
    /// <param name="_parentSourceRequirementTableId">
    ///    The table ID of the parent source requirement.
    /// </param>
    /// <param name="_parentSourceRequirementRecId">
    ///    The record ID of the parent source requirement.
    /// </param>
    /// <param name="_rootSourceRequirementTableId">
    ///    The record ID of the root source requirement.
    /// </param>
    /// <param name="_rootSourceRequirementRecId">
    ///    The record ID of the root source requirement.
    /// </param>
    /// <returns>
    ///    An instance of the <c>KanbanSourceRequirementParm</c> class.
    /// </returns>
    public static KanbanSourceRequirementParm newStandard(
        Common     _sourceRequirement,
        RefTableId _parentSourceRequirementTableId,
        RefRecId   _parentSourceRequirementRecId,
        RefTableId _rootSourceRequirementTableId,
        RefRecId   _rootSourceRequirementRecId)
    {
        KanbanSourceRequirementParm kanbanSourceRequirementParm = KanbanSourceRequirementParm::construct();

        kanbanSourceRequirementParm.parmSourceRequirement(_sourceRequirement);
        kanbanSourceRequirementParm.parmSourceRequirementTableId(_sourceRequirement.TableId);
        kanbanSourceRequirementParm.parmSourceRequirementRecId(_sourceRequirement.RecId);
        kanbanSourceRequirementParm.parmParentSourceRequirementTableId(_parentSourceRequirementTableId);
        kanbanSourceRequirementParm.parmParentSourceRequirementRecId(_parentSourceRequirementRecId);
        kanbanSourceRequirementParm.parmRootSourceRequirementTableId(_rootSourceRequirementTableId);
        kanbanSourceRequirementParm.parmRootSourceRequirementRecId(_rootSourceRequirementRecId);

        return kanbanSourceRequirementParm;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>