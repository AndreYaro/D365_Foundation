<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>TaxCustCollectionLetter</Name>
	<SourceCode>
		<Declaration><![CDATA[
/// <summary>
///    The <c>TaxCustCollectionLetter</c> class derives from the <c>Tax</c> class and works as an extension of the main tax engine.
/// </summary>
/// <remarks>
///    It performs the calculation of tax for the customer collection letter, and is called from the class <c>CustCollectionLetterPost</c> and the report <c>CustCollectionJour</c>.
/// </remarks>
final class TaxCustCollectionLetter extends Tax
{
    CustCollectionLetter        custCollectionLetter;
    CustCollectionLetterJour    custCollectionLetterJour;

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calcAndPost</Name>
				<Source><![CDATA[
    /// <summary>
    ///    Performs the tax calculation for the collection letter per line or in total, based on the CustCollectionLetterJour variable. After the calculation, it calls the <c>saveAndPost</c> method, if posting
    ///    of the tax is required.
    /// </summary>
    /// <param name="_ledgerPostingController">
    /// The ledger posting controller to use for ledger posting.
    /// </param>
    /// <returns>
    ///    A <c>TaxAmount</c>.
    /// </returns>
    public TaxAmount calcAndPost(LedgerPostingController _ledgerPostingController)
    {
        TaxAmount                taxAmount;
        Integer                  sign;
        AmountCur                amountCur;
        TaxCalculationAdjustment taxCalculationAdjustment;
        LedgerDimensionAccount   ledgerDimensionMerged;

        this.initLedgerPosting(_ledgerPostingController);

        if (!headingRecId)
        {
            return 0;
        }

        if (TaxSolutionScopeIntegrationUtil::isCompanyEnabled())
        {
            return 0;
        }

        custCollectionLetter.initCursor();

        sign = 1;
        custCollectionLetterJour = custCollectionLetter.nextLine();

        amountCur = custCollectionLetter.amount();
        if (amountCur < 0)
        {
            sign = -1;
        }

        amountCur = amountCur * -1;

        temporaryLedgerPostingJournal = _ledgerPostingController.getJournal();

        ledgerDimensionMerged = LedgerDimensionFacade::serviceCreateLedgerDimension(custCollectionLetter.operationLedgerDimension(), custCollectionLetter.dimension());
        this.insertLineInInternal(amountCur,
                                    0,
                                    '',
                                    '',
                                    0,
                                    custCollectionLetter.dimension(),
                                    ledgerDimensionMerged);

        if (taxCalculateLine)
        {
            taxAmount = this.calcTax();
            this.saveInProcessTransaction();
        }

        if (! this.checkTaxCodesInTotal())
        {
            throw error("@SYS22772");
        }

        if (taxCalculateTotal)
        {
            this.insertTotalInInternal(0 /* baseInTotal*/ );
            taxAmount = this.calcTax();
            this.saveTotalInProcessTransaction();
        }

        this.roundTaxOnTaxGroup();

        taxCalculationAdjustment = TaxCalculationAdjustment::construct(taxWorkTrans, this);
        if (taxCalculationAdjustment)
        {
            taxCalculationAdjustment.loadTaxAdjustments();
        }

        custCollectionLetter.setTax(this.taxWriteCode(), this.lineTaxAmount(sign));
        custCollectionLetterJour.update();

        if (post)
        {
            this.saveAndPost(_ledgerPostingController);

            taxAmount = Tax::taxTotalVoucherDate(voucher, taxDate);
        }
        else
            taxAmount = this.totalTaxAmount();

        return taxAmount;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkParameters</Name>
				<Source><![CDATA[
    boolean checkParameters()
    {
        boolean ok = true;
        ;

        if (!custCollectionLetter)
        {
            throw error(strfmt("@SYS22533",funcname(),classidget(custCollectionLetter)));
        }

        return ok;
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
    void new(NoYes                  _post,
             CustCollectionLetter   _custCollectionLetter,
             Voucher                _referenceNumber,
             TransDate              _accountingDate)
    {
        super();

        post                    = _post;
        custCollectionLetter    = _custCollectionLetter;
        taxModuleType           = TaxModuleType::CustCollectionLetter;
        headingTableId          = custCollectionLetter.tableId();
        headingRecId            = custCollectionLetter.recId();
        sourceCurrencyCode      = custCollectionLetter.currencyCode();
        triangulation           = custCollectionLetter.triangulation();

        if (!headingTableId || !headingRecId)
            throw error("@SYS18447");

        if (! this.checkParameters())
            throw error("@SYS18447");

        voucher = _referenceNumber;
        if (_accountingDate == dateNull())
        {
            taxDate = custCollectionLetter.transDate();
        }
        else
        {
            taxDate = _accountingDate;
        }

        custCollectionLetter.initCursor();

        custCollectionLetterJour = custCollectionLetter.nextLine();

        this.insertIntersection(custCollectionLetter.taxGroup(),
                                custCollectionLetter.taxItemGroup(),
                                '',
                                enum2str(custCollectionLetterJour.CollectionLetterCode),
                                taxDate);

        if (! this.checkTaxCodesByLine())
            throw error("@SYS22772");
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceRecId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the record ID of the transaction line to calculate.
    /// </summary>
    /// <returns>
    /// The record ID of the transaction line to calculate.
    /// </returns>
    public recId sourceRecId()
    {
        return custCollectionLetterJour.RecId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>sourceTableId</Name>
				<Source><![CDATA[
    /// <summary>
    /// Retrieves the table ID of the transaction to tax.
    /// </summary>
    /// <returns>
    /// The ID of the transaction to tax.
    /// </returns>
    public RefTableId sourceTableId()
    {
        return custCollectionLetterJour.TableId;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>