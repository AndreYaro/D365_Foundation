<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailProductWarehouseInventoryCalculate</Name>
	<SourceCode>
		<Declaration><![CDATA[
using Microsoft.Dynamics.Application.Instrumentation;
using Microsoft.Dynamics.Commerce.Headquarters.Instrumentation;

/// <summary>
/// Calculates availability per Product Warehouse pair into the RetailProductWarehouseInventory table.
/// </summary>
internal class RetailProductWarehouseInventoryCalculate
{
    private const str calculatingUnprocessedQtyLookbackDaysKey = 'RETAIL_INVENT_AVAILABILITY_CALCULATING_UNPROCESSED_QTY_LOOKBACK_DAYS';
    private const str disableCalculatingUnprocessedQtyKey = 'RetailInventAvailabilityDisableUnprocessedQtyCalculation';
    private const int defaultUnprocessedQtyLookbackDays = 7;

    private static CommerceHQEventSource eventSource = CommerceHQEventSource::Log;
    private boolean isRetailProductWarehouseInventoryCalculateByInventUnitQtyFlight = RetailProductWarehouseInventoryCalculateByInventUnitQtyFlight::instance().isEnabled();

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>calculateProductWarehouseInventory</Name>
				<Source><![CDATA[
    /// <summary>
    /// Calculates inventory availability per Product/Warehouse pair into RetailProductWarehouseInventory table.
    /// </summary>
    /// <returns>The number of rows either Inserted, Updated, or Deleted.</returns>
    public void calculateProductWarehouseInventory()
    {
        int64 totalRowsAffected = 0;

        System.Diagnostics.Stopwatch totalJobStopWatch = new System.Diagnostics.Stopwatch();
        System.Diagnostics.Stopwatch subJobStopWatch = new System.Diagnostics.Stopwatch();

        int64 durationInMs;
  
        eventSource.EventWriteProductAvailabilityJobBegin(tableStr(RetailProductWarehouseInventory));
        this.startNewTiming(totalJobStopWatch);

        eventSource.EventWriteProductAvailabilityJobToggleStatus(true,
            InventUseDimOfInventSumToggle::instance().isEnabled(),
            InventUseDimOfWHSInventReserveToggle::instance().isEnabled());

        boolean useDenormalizedOnHand = InventUseDimOfInventSumToggle::instance().isEnabled()
            && InventUseDimOfWHSInventReserveToggle::instance().isEnabled();

        ttsBegin;

        CompanyInfo companyInfo;
        while select crosscompany DataArea from companyInfo
        {
            DataAreaId inventDataAreaId = companyInfo.DataArea;
            RecId dataAreaRecId = companyInfo.RecId;

            int64 dataAreaRowsInsertedTmpTable = 0;
            int64 dataAreaRowsInserted = 0;
            int64 dataAreaRowsUpdated = 0;
            int64 dataAreaRowsDeleted = 0;

            changeCompany(inventDataAreaId)
            {
                RetailProductWarehouseInventory retailProductWarehouseInventory;
                TmpRetailProductWarehouseInventory tmpRetailProductWarehouseInventory;
                InventTable inventTable;
                EcoResProduct ecoResProduct;
                InventDimCombination inventDimCombination;
                InventDim inventDim;
    
                tmpRetailProductWarehouseInventory.skipDatabaseLog(true);
                tmpRetailProductWarehouseInventory.skipEvents(true);
                retailProductWarehouseInventory.skipDatabaseLog(true);
                retailProductWarehouseInventory.skipEvents(true);

                // Log the beginning of inserting into the temp table and begin timing the operation.
                eventSource.EventWriteProductAvailabilityJobTempTableInsertBegin(tableStr(RetailProductWarehouseInventory), dataAreaRecId);
                this.startNewTiming(subJobStopWatch);
    
                if (useDenormalizedOnHand)
                {
                    RetailProductWarehouseInventoryOnInventSum retailProductWarehouseOnInventSum;
                    RetailProductWarehouseInventoryOnWHSItemReserve retailProductWarehouseOnWHSItem;

                    insert_recordset tmpRetailProductWarehouseInventory(
                        ItemId,
                        ConfigId,
                        InventColorId,
                        InventSizeId,
                        InventStyleId,
                        InventSiteId,
                        InventLocationId,
                        PhysicalInventory,
                        PhysicalReserved,
                        OrderedInTotal,
                        TotalAvailable
                    )
                    select ItemId, ConfigId, InventColorId, InventSizeId, InventStyleId, InventSiteId, InventLocationId, PhysicalInvent, PhysicalReserved, OrderedInTotal, TotalAvailable
                        from retailProductWarehouseOnInventSum;

                    update_recordset tmpRetailProductWarehouseInventory
                    setting
                        PhysicalReserved = retailProductWarehouseOnWHSItem.PhysicalReserved,
                        OrderedInTotal = retailProductWarehouseOnWHSItem.OrderedInTotal
                    join retailProductWarehouseOnWHSItem
                        where 
                            tmpRetailProductWarehouseInventory.ItemId == retailProductWarehouseOnWHSItem.ItemId &&
                            tmpRetailProductWarehouseInventory.InventLocationId == retailProductWarehouseOnWHSItem.InventLocationId &&
                            tmpRetailProductWarehouseInventory.ConfigId == retailProductWarehouseOnWHSItem.ConfigId &&
                            tmpRetailProductWarehouseInventory.InventColorId == retailProductWarehouseOnWHSItem.InventColorId &&
                            tmpRetailProductWarehouseInventory.InventSizeId == retailProductWarehouseOnWHSItem.InventSizeId &&
                            tmpRetailProductWarehouseInventory.InventStyleId == retailProductWarehouseOnWHSItem.InventStyleId &&
                            tmpRetailProductWarehouseInventory.InventSiteId == retailProductWarehouseOnWHSItem.InventSiteId;
                }
                else
                {
                    InventWarehouseOnHandV2Entity inventWarehouseOnHandV2Entity;

                    // Insert all rows within current DataAreaId from InventWarehouseOnHandEntity into Temp table.
                    // We insert all rows here because InventWarehouseOnHandEntity is expensive to compute, and would produce performance issues if queries below were run directly against it.
                    insert_recordset tmpRetailProductWarehouseInventory(
                        ItemId,
                        ConfigId,
                        InventColorId,
                        InventSizeId,
                        InventStyleId,
                        InventVersionId,
                        InventSiteId,
                        InventLocationId,
                        PhysicalInventory,
                        PhysicalReserved,
                        OrderedInTotal,
                        TotalAvailable
                    )
                    select ItemNumber, ProductConfigurationId, ProductColorId, ProductSizeId, ProductStyleId, ProductVersionId, InventorySiteId, InventoryWarehouseId, OnHandQuantity, ReservedOnHandQuantity, OrderedQuantity, TotalAvailableQuantity
                        from inventWarehouseOnHandV2Entity
                        where inventWarehouseOnHandV2Entity.InventoryWarehouseId != ''; // Filter out warehouse id empty rows.
                }

                dataAreaRowsInsertedTmpTable = tmpRetailProductWarehouseInventory.RowCount();

                // Finish timing the temp table insert, and log affected rows and time to complete.
                durationInMs = this.stopTimingAndGetDurationInMs(subJobStopWatch);
                eventSource.EventWriteProductAvailabilityJobTempTableInsertEnd(tableStr(RetailProductWarehouseInventory), dataAreaRecId, dataAreaRowsInsertedTmpTable, durationInMs);
    
                // Log the beginning of deleting removed rows from the table and begin timing the operation.
                eventSource.EventWriteProductAvailabilityJobDeleteBegin(tableStr(RetailProductWarehouseInventory), dataAreaRecId);
                this.startNewTiming(subJobStopWatch);

                // Delete rows that exist in RetailProductWarehouseInventory, and not in the temp table (in InventWarehouseOnHandEntity).
                delete_from retailProductWarehouseInventory
                notexists join tmpRetailProductWarehouseInventory
                    where retailProductWarehouseInventory.ItemId == tmpRetailProductWarehouseInventory.ItemId
                        && retailProductWarehouseInventory.ConfigId == tmpRetailProductWarehouseInventory.ConfigId
                        && retailProductWarehouseInventory.InventColorId == tmpRetailProductWarehouseInventory.InventColorId
                        && retailProductWarehouseInventory.InventSizeId == tmpRetailProductWarehouseInventory.InventSizeId
                        && retailProductWarehouseInventory.InventStyleId == tmpRetailProductWarehouseInventory.InventStyleId
                        && retailProductWarehouseInventory.InventVersionId == tmpRetailProductWarehouseInventory.InventVersionId
                        && retailProductWarehouseInventory.InventSiteId == tmpRetailProductWarehouseInventory.InventSiteId
                        && retailProductWarehouseInventory.InventLocationId == tmpRetailProductWarehouseInventory.InventLocationId;

                dataAreaRowsDeleted = retailProductWarehouseInventory.RowCount();
    
                // Finish timing the delete, and log affected rows and time to complete.
                durationInMs = this.stopTimingAndGetDurationInMs(subJobStopWatch);
                eventSource.EventWriteProductAvailabilityJobDeleteEnd(tableStr(RetailProductWarehouseInventory), dataAreaRecId, dataAreaRowsDeleted, durationInMs);
            
                // Log the beginning of updating rows from the table and begin timing the operation.
                eventSource.EventWriteProductAvailabilityJobUpdateBegin(tableStr(RetailProductWarehouseInventory), dataAreaRecId);
                this.startNewTiming(subJobStopWatch);

                // Update rows that currently exist in both RetailProductWarehouseInventory and the tmp table (in InventWarehouseOnHandEntity).
                update_recordset retailProductWarehouseInventory
                setting
                    PhysicalInventory = tmpRetailProductWarehouseInventory.PhysicalInventory,
                    PhysicalReserved = tmpRetailProductWarehouseInventory.PhysicalReserved,
                    OrderedInTotal = tmpRetailProductWarehouseInventory.OrderedInTotal,
                    TotalAvailable = tmpRetailProductWarehouseInventory.TotalAvailable
                join tmpRetailProductWarehouseInventory
                    where retailProductWarehouseInventory.ItemId == tmpRetailProductWarehouseInventory.ItemId
                        && retailProductWarehouseInventory.ConfigId == tmpRetailProductWarehouseInventory.ConfigId
                        && retailProductWarehouseInventory.InventColorId == tmpRetailProductWarehouseInventory.InventColorId
                        && retailProductWarehouseInventory.InventSizeId == tmpRetailProductWarehouseInventory.InventSizeId
                        && retailProductWarehouseInventory.InventStyleId == tmpRetailProductWarehouseInventory.InventStyleId
                        && retailProductWarehouseInventory.InventVersionId == tmpRetailProductWarehouseInventory.InventVersionId
                        && retailProductWarehouseInventory.InventSiteId == tmpRetailProductWarehouseInventory.InventSiteId
                        && retailProductWarehouseInventory.InventLocationId == tmpRetailProductWarehouseInventory.InventLocationId
                        && (
                                retailProductWarehouseInventory.PhysicalInventory != tmpRetailProductWarehouseInventory.PhysicalInventory
                                || retailProductWarehouseInventory.PhysicalReserved != tmpRetailProductWarehouseInventory.PhysicalReserved
                                || retailProductWarehouseInventory.OrderedInTotal != tmpRetailProductWarehouseInventory.OrderedInTotal
                                || retailProductWarehouseInventory.TotalAvailable != tmpRetailProductWarehouseInventory.TotalAvailable
                            );

                dataAreaRowsUpdated = retailProductWarehouseInventory.RowCount();
    
                // Finish timing the delete, and log affected rows and time to complete.
                durationInMs = this.stopTimingAndGetDurationInMs(subJobStopWatch);
                eventSource.EventWriteProductAvailabilityJobUpdateEnd(tableStr(RetailProductWarehouseInventory), dataAreaRecId, dataAreaRowsUpdated, durationInMs);

                // Log the beginning of deleting removed rows from the table and begin timing the operation.
                eventSource.EventWriteProductAvailabilityJobInsertBegin(tableStr(RetailProductWarehouseInventory), dataAreaRecId);
                this.startNewTiming(subJobStopWatch);

                // Insert rows that exist in tmp table (In InventWarehouseOnHandEntity) and not in RetailProductWarehouseInventory.
                // Insert new standalone product rows.
                insert_recordset retailProductWarehouseInventory(
                    ItemId,
                    ConfigId,
                    InventColorId,
                    InventSizeId,
                    InventStyleId,
                    InventVersionId,
                    InventSiteId,
                    InventLocationId,
                    PhysicalInventory,
                    PhysicalReserved,
                    OrderedInTotal,
                    TotalAvailable,
                    ProductId
                )
                select ItemId, ConfigId, InventColorId, InventSizeId, InventStyleId, InventVersionId, InventSiteId, InventLocationId, PhysicalInventory, PhysicalReserved, OrderedInTotal, TotalAvailable
                    from tmpRetailProductWarehouseInventory
                    join Product from inventTable
                        where inventTable.ItemId == tmpRetailProductWarehouseInventory.ItemId
                    join ecoResProduct
                        where ecoResProduct.RecId == inventTable.Product
                            && ecoResProduct.InstanceRelationType == tableNum(EcoResDistinctProduct)
                    notexists join retailProductWarehouseInventory
                        where retailProductWarehouseInventory.ItemId == tmpRetailProductWarehouseInventory.ItemId
                            && retailProductWarehouseInventory.ConfigId == tmpRetailProductWarehouseInventory.ConfigId
                            && retailProductWarehouseInventory.InventColorId == tmpRetailProductWarehouseInventory.InventColorId
                            && retailProductWarehouseInventory.InventSizeId == tmpRetailProductWarehouseInventory.InventSizeId
                            && retailProductWarehouseInventory.InventStyleId == tmpRetailProductWarehouseInventory.InventStyleId
                            && retailProductWarehouseInventory.InventVersionId == tmpRetailProductWarehouseInventory.InventVersionId
                            && retailProductWarehouseInventory.InventSiteId == tmpRetailProductWarehouseInventory.InventSiteId
                            && retailProductWarehouseInventory.InventLocationId == tmpRetailProductWarehouseInventory.InventLocationId;

                dataAreaRowsInserted = retailProductWarehouseInventory.RowCount();
    
                // Insert new variant product rows.
                insert_recordset retailProductWarehouseInventory(
                    ItemId,
                    ConfigId,
                    InventColorId,
                    InventSizeId,
                    InventStyleId,
                    InventVersionId,
                    InventSiteId,
                    InventLocationId,
                    PhysicalInventory,
                    PhysicalReserved,
                    OrderedInTotal,
                    TotalAvailable,
                    ProductId
                )
                select ItemId, ConfigId, InventColorId, InventSizeId, InventStyleId, InventVersionId, InventSiteId, InventLocationId, PhysicalInventory, PhysicalReserved, OrderedInTotal, TotalAvailable
                    from tmpRetailProductWarehouseInventory
                    join inventDim // InventDimCombination contains VariantInventDim, so we must explicitely query for the InventDimId with only the matching product dimensions.
                    where inventDim.configId == tmpRetailProductWarehouseInventory.ConfigId
                            && inventDim.InventSizeId == tmpRetailProductWarehouseInventory.InventSizeId
                            && inventDim.InventColorId == tmpRetailProductWarehouseInventory.InventColorId
                            && inventDim.InventStyleId == tmpRetailProductWarehouseInventory.InventStyleId
                            && inventDim.InventVersionId == tmpRetailProductWarehouseInventory.InventVersionId
                            && inventDim.inventSiteId == ''
                            && inventDim.InventLocationId == ''
                            && inventDim.InventStatusId == ''
                            && inventDim.WMSLocationId == ''
                            && inventDim.LicensePlateId == ''
                            && inventDim.inventBatchId == ''
                            && inventDim.inventSerialId == ''
                    join DistinctProductVariant from inventDimCombination // InventDimCombination allows us to convert from ItemId+InventDimId to ProductId
                        where inventDimCombination.InventDimId == inventDim.inventDimId
                            && inventDimCombination.ItemId == tmpRetailProductWarehouseInventory.ItemId
                    notexists join retailProductWarehouseInventory
                        where retailProductWarehouseInventory.ItemId == tmpRetailProductWarehouseInventory.ItemId
                            && retailProductWarehouseInventory.ConfigId == tmpRetailProductWarehouseInventory.ConfigId
                            && retailProductWarehouseInventory.InventColorId == tmpRetailProductWarehouseInventory.InventColorId
                            && retailProductWarehouseInventory.InventSizeId == tmpRetailProductWarehouseInventory.InventSizeId
                            && retailProductWarehouseInventory.InventStyleId == tmpRetailProductWarehouseInventory.InventStyleId
                            && retailProductWarehouseInventory.InventVersionId == tmpRetailProductWarehouseInventory.InventVersionId
                            && retailProductWarehouseInventory.InventSiteId == tmpRetailProductWarehouseInventory.InventSiteId
                            && retailProductWarehouseInventory.InventLocationId == tmpRetailProductWarehouseInventory.InventLocationId;
    
                dataAreaRowsInserted += retailProductWarehouseInventory.RowCount();

                // Log the beginning of deleting removed rows from the table and begin timing the operation.
                durationInMs = this.stopTimingAndGetDurationInMs(subJobStopWatch);
                eventSource.EventWriteProductAvailabilityJobInsertEnd(tableStr(RetailProductWarehouseInventory), dataAreaRecId, dataAreaRowsInserted, durationInMs);

                // Keep track of how many total rows are affected by the whole job
                totalRowsAffected += (dataAreaRowsDeleted + dataAreaRowsUpdated + dataAreaRowsInserted);
            }
        }

        this.updateRetailInventAvailabilityParameters();

        ttsCommit;

        if (!Global::isFlightEnabled(disableCalculatingUnprocessedQtyKey))
        {
            ttsbegin;

            this.updateLastTransDateTime();

            this.updateRetailUnprocessedQty();

            ttscommit;
        }

        RetailProductWarehouseInventory retailProductWarehouseInventoryCount;
        select crosscompany count(RecId)
            from retailProductWarehouseInventoryCount;
        int64 totalRows = retailProductWarehouseInventoryCount.RecId;
  
        durationInMs = this.stopTimingAndGetDurationInMs(totalJobStopWatch);
        eventSource.EventWriteProductAvailabilityJobEnd(tableStr(RetailProductWarehouseInventory), totalRows, totalRowsAffected, durationInMs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailInventAvailabilityParameters</Name>
				<Source><![CDATA[
    private void updateRetailInventAvailabilityParameters()
    {
        // Assign the RetailInventAvailabilityParameter entry to hold the latest Inventory Transaction.
        // This field will allow the Channel side to know the last Inventory transaction completed when this job ran.
        // Retail Server will then depend on this field to determine if the current Inventory quantity includes the transaction or not.
        // If Retail Server determines the transaction is not included, it can be subtracted from the current Inventory quantity.
        InventTrans inventTrans;
        select crosscompany maxof(RecId) from inventTrans;
        RetailInventAvailabilityParameters parameters = RetailInventAvailabilityParameters::find(true);
        if (parameters.LastInventTrans != inventTrans.RecId)
        {
            parameters.LastInventTrans = inventTrans.RecId;
        }

        parameters.LastProductAvailabilityJobEndDateTime = DateTimeUtil::utcNow();
        parameters.update();

    }

]]></Source>
			</Method>
			<Method>
				<Name>startNewTiming</Name>
				<Source><![CDATA[
    private void startNewTiming(System.Diagnostics.Stopwatch stopWatch)
    {
        stopWatch.Reset();
        stopWatch.Start();
    }

]]></Source>
			</Method>
			<Method>
				<Name>stopTimingAndGetDurationInMs</Name>
				<Source><![CDATA[
    private int64 stopTimingAndGetDurationInMs(System.Diagnostics.Stopwatch stopWatch)
    {
        stopWatch.Stop();
        System.TimeSpan timeSpan = stopWatch.Elapsed;
        int64 durationInMs = timeSpan.TotalMilliseconds;
        return durationInMs;
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateLastTransDateTime</Name>
				<Source><![CDATA[
    private void updateLastTransDateTime()
    {
        eventSource.EventWriteProductAvailabilityJobUpdateLastTransDateTimeBegin(tableStr(RetailProductWarehouseInventory));

        int lookbackDays = this.getUnprocessedQtyLookbackDays();

        System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
        this.startNewTiming(stopWatch);

        RetailChannelTable channelTable;
        while select RecId, inventLocationDataAreaId from channelTable
        {
            RetailTransactionTable transTable;
            RetailInventAvailabilityLastTransDateTime lastTransDateTime;

            // Find the max TransDate/TransTime of the channel from transTable and left join with lastTransDateTime
            select firstonly crosscompany transDate, transTime from transTable
                order by transTable.transDate desc, transTable.transTime desc
                where transTable.DataAreaId == channelTable.inventLocationDataAreaId
                    && transTable.Channel == channelTable.RecId
                outer join forupdate lastTransDateTime
                    where lastTransDateTime.ChannelId == channelTable.RecId;

            // Delete the row if no row found in transTable but exist in lastTransDateTime
            if (!transTable && lastTransDateTime)
            {
                lastTransDateTime.delete();
            }
            else if (transTable && !lastTransDateTime)  // Insert a new row if no row found in lastTransDateTime
            {
                lastTransDateTime.ChannelId = channelTable.RecId;
                lastTransDateTime.LastTransDate = transTable.transDate;
                lastTransDateTime.LastTransTime =  transTable.transTime;
                lastTransDateTime.UnprocessedStartTransDate = transTable.transDate - lookbackDays;
                lastTransDateTime.insert();
            }
            else  if (transTable && lastTransDateTime  // Update the row if lastTransDate and/or lastTransTime ha been changed since last time
                && (lastTransDateTime.LastTransDate != transTable.transDate || lastTransDateTime.LastTransTime != transTable.transTime))
            {
                lastTransDateTime.LastTransDate = transTable.transDate;
                lastTransDateTime.LastTransTime =  transTable.transTime;
                lastTransDateTime.UnprocessedStartTransDate = transTable.transDate - lookbackDays;
                lastTransDateTime.update();
            }
        }

        int64 durationInMs = this.stopTimingAndGetDurationInMs(stopWatch);
        eventSource.EventWriteProductAvailabilityJobUpdateLastTransDateTimeEnd(tableStr(RetailProductWarehouseInventory), durationInMs);
    }

]]></Source>
			</Method>
			<Method>
				<Name>updateRetailUnprocessedQty</Name>
				<Source><![CDATA[
    private void updateRetailUnprocessedQty()
    {
        eventSource.EventWriteProductAvailabilityJobUpdateUnprocessedQtyBegin(tableStr(RetailProductWarehouseInventory));

        System.Diagnostics.Stopwatch stopWatch = new System.Diagnostics.Stopwatch();
        System.Diagnostics.Stopwatch subJobStopWatch = new System.Diagnostics.Stopwatch();
        int64 durationInMS;
        RetailChannelTable channelTable;

        this.startNewTiming(stopWatch);

        while select inventLocationDataAreaId from channelTable
            group by channelTable.inventLocationDataAreaId
        {
            DataAreaId dataArea = channelTable.inventLocationDataAreaId;
            int64 totalUnprocessedProductCount;
            int64 updatedUnprocessedProductCount;
            int64 resetUnprocessedProductCount;

            changecompany(dataArea)
            {
                RetailTransactionSalesTrans salesTrans;
                RetailTransactionTable transTable;
                InventDimCombination inventDimComb;
                RetailTmpItemVariantQty tmpItemVariantQty;
                InventTable inventTable;
                EcoResProduct ecoResProduct;
                RetailProductWarehouseInventory productWarehouseInventory;
                RetailInventAvailabilityLastTransDateTime lastTransDateTime;

                eventSource.EventWriteProductAvailabilityJobUpdateUnprocessedQtyForCompanyBegin(tableStr(RetailProductWarehouseInventory), dataArea);
                this.startNewTiming(subJobStopWatch);

                // find out sum of qty grouped by InventLocationid, ItemId and VariantId
                if (isRetailProductWarehouseInventoryCalculateByInventUnitQtyFlight)
                {
                    // When the unit of measure used in transactions differs from the standard unit of measure configured in the headquarters (HQ),
                    // using the quantity of standard unit for inventory calculation if the flight is on
                    insert_recordset tmpItemVariantQty(InventLocationId, itemId, VariantId, Qty)
                    select InventLocationId, itemId, variantId, sum(UnitQty) from salesTrans
                    group by
                        salesTrans.InventLocationId, salesTrans.itemId, salesTrans.variantId
                    where
                        salesTrans.transactionStatus != RetailEntryStatus::Voided
                    join transTable  // only selected columns will be outputed
                        where transTable.Channel == salesTrans.Channel
                            && transTable.store == salesTrans.store
                            && transTable.terminal == salesTrans.terminalId
                            && transTable.transactionId == salesTrans.transactionId
                            && (transTable.type == RetailTransactionType::Sales // sales transactions
                                || transTable.type == RetailTransactionType::PendingSalesOrder) // online transactions
                            && transTable.salesOrderId == '' //sales order is not created yet
                            && transTable.entryStatus != RetailEntryStatus::Voided // transactions are not voided
                    join lastTransDateTime
                        where transTable.Channel == lastTransDatetime.ChannelId
                            && (transTable.transDate < lastTransDatetime.LastTransDate || (transTable.transDate == lastTransDatetime.LastTransDate && transTable.transTime <= lastTransDatetime.LastTransTime))
                            && transTable.transDate >= lastTransDatetime.UnprocessedStartTransDate;
                }
                else
                {
                    insert_recordset tmpItemVariantQty(InventLocationId, itemId, VariantId, Qty)
                    select InventLocationId, itemId, variantId, sum(Qty) from salesTrans
                    group by
                        salesTrans.InventLocationId, salesTrans.itemId, salesTrans.variantId
                    where
                        salesTrans.transactionStatus != RetailEntryStatus::Voided
                    join transTable  // only selected columns will be outputed
                        where transTable.Channel == salesTrans.Channel
                            && transTable.store == salesTrans.store
                            && transTable.terminal == salesTrans.terminalId
                            && transTable.transactionId == salesTrans.transactionId
                            && (transTable.type == RetailTransactionType::Sales // sales transactions
                                || transTable.type == RetailTransactionType::PendingSalesOrder) // online transactions
                            && transTable.salesOrderId == '' //sales order is not created yet
                            && transTable.entryStatus != RetailEntryStatus::Voided // transactions are not voided
                    join lastTransDateTime
                        where transTable.Channel == lastTransDatetime.ChannelId
                            && (transTable.transDate < lastTransDatetime.LastTransDate || (transTable.transDate == lastTransDatetime.LastTransDate && transTable.transTime <= lastTransDatetime.LastTransTime))
                            && transTable.transDate >= lastTransDatetime.UnprocessedStartTransDate;
                }

                totalUnprocessedProductCount = tmpItemVariantQty.RowCount();

                // update ProductId for variant products 
                update_recordset tmpItemVariantQty
                setting
                    ProductId = inventDimComb.DistinctProductVariant
                join inventDimComb
                    where tmpItemVariantQty.VariantId == inventDimComb.RetailVariantId;

                // update ProductId for standalone products
                update_recordset tmpItemVariantQty
                setting
                    ProductId = inventTable.Product
                join inventTable
                    where tmpItemVariantQty.ItemId == inventTable.ItemId
                join ecoResProduct
                    where inventTable.Product == ecoResProduct.RecId
                        && ecoResProduct.InstanceRelationType == tableNum(EcoResDistinctProduct);

                // update UnprocessedQty for products that are changed since last job run
                update_recordset productWarehouseInventory
                setting
                    UnprocessedQty = tmpItemVariantQty.Qty
                join tmpItemVariantQty
                    where tmpItemVariantQty.ProductId == productWarehouseInventory.ProductId
                        && tmpItemVariantQty.InventLocationId == productWarehouseInventory.InventLocationId
                        && tmpItemVariantQty.Qty != productWarehouseInventory.UnprocessedQty;
                updatedUnprocessedProductCount = productWarehouseInventory.RowCount();

                // reset UnprocessedQty for products that are not in the list of this run and UnprocessedQty are not 0
                update_recordset productWarehouseInventory
                setting
                    UnprocessedQty = 0
                where productWarehouseInventory.UnprocessedQty != 0
                notexists join tmpItemVariantQty
                    where tmpItemVariantQty.ProductId == productWarehouseInventory.ProductId
                        && tmpItemVariantQty.InventLocationId == productWarehouseInventory.InventLocationId;
                resetUnprocessedProductCount = productWarehouseInventory.RowCount();

                durationInMS = this.stopTimingAndGetDurationInMs(subJobStopWatch);
                eventSource.EventWriteProductAvailabilityJobUpdateUnprocessedQtyForCompanyEnd(
                    tableStr(RetailProductWarehouseInventory), 
                    dataArea, 
                    totalUnprocessedProductCount, 
                    updatedUnprocessedProductCount, 
                    resetUnprocessedProductCount, 
                    durationInMS);
            }
        }

        durationInMS = this.stopTimingAndGetDurationInMs(stopWatch);
        eventSource.EventWriteProductAvailabilityJobUpdateUnprocessedQtyEnd(tableStr(RetailProductWarehouseInventory), durationInMS);
    }

]]></Source>
			</Method>
			<Method>
				<Name>getUnprocessedQtyLookbackDays</Name>
				<Source><![CDATA[
    private int getUnprocessedQtyLookbackDays()
    {
        str strValue = RetailFeatureControl::getSharedFeatureFlightKeyValue(calculatingUnprocessedQtyLookbackDaysKey);

        int value = str2Int(strValue);

        if (value <= 0)
        {
            return defaultUnprocessedQtyLookbackDays;
        }

        return value;
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>