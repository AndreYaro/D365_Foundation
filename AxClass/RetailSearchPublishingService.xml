<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>RetailSearchPublishingService</Name>
	<SourceCode>
		<Declaration><![CDATA[
using AppLogging = Microsoft.Dynamics.Application.Instrumentation.ApplicationEventSource;

/// <summary>
/// The <c>RetailSearchPublishingService</c> class is a support class for the <c>CDXRealTimeService</c> class.
/// </summary>
/// <remarks>
/// This class is used for tracking publish session for data stores.
/// This is a framework class. Customizing this class may cause problems with Real-Time Service in channels.
/// </remarks>
public class RetailSearchPublishingService
{
    private const str PublishSessionLockName = 'PublishSessionLock\%1';
    private const str WhiteSpaceConst = ' '; // value is displayed in the UI, part of index, must be language agnostic.

}
]]></Declaration>
		<Methods>
			<Method>
				<Name>CreatePublishSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>RetailSearchPublishingSession</c>.
    /// </summary>
    /// <param name = "_dataStore">The data store..</param>
    /// <returns>The session id.</returns>
    internal static RetailSearchPublishingSession CreatePublishSession(RetailConnDatabaseProfile _dataStore)
    {
        RetailSearchPublishingSession publishSession;

        using (var lock = ReqReaderWriterLock::construct())
        {
            str lockName = strFmt(PublishSessionLockName, _dataStore.Name);

            if (!lock.tryEnterWriterLock(lockName))
            {
                // Some other process acquired the lock to initiate publish session.
                return publishSession;
            }

            RetailSearchPublishingService::UpdateTimedOutSessionsStatus(_dataStore.Name);

            publishSession = RetailSearchPublishingSession::findSessionInProgress(_dataStore.Name, false);

            if (!publishSession.RecId)
            {
                ttsbegin;

                publishSession.DataStore = _dataStore.Name;
                publishSession.Status = RetailSearchPublishingSessionStatus::InProgress;
                publishSession.Session = newGuid();
                publishSession.insert();

                ttscommit;
            }
            else
            {
                // Some other session is in InProgress state for this data store.
                publishSession.clear();
                return publishSession;
            }
        }
        return publishSession;
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdatePublishSessionStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Update the status of an existing session.
    /// </summary>
    /// <param name="_status">The <c>RetailSearchPublishingSessionUpdateStatus</c> contract data.</param>
    internal static void UpdatePublishSessionStatus(RetailSearchPublishingSessionUpdateStatus _status)
    {
        RetailSearchPublishingSession publishSession;

        publishSession = RetailSearchPublishingSession::findBySession(_status.parmSession(), true);

        if (publishSession.RecId && publishSession.DataStore == _status.parmDataStoreName())
        {
            ttsbegin;

            publishSession.Status = _status.parmStatus();
            publishSession.update();
            
            ttscommit;
        }
        else
        {
            throw Global::error(strFmt("@Retail:PublishUpdateFail", _status.parmSession(), _status.parmDataStoreName()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdateTimedOutSessionsStatus</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the long running sessions status to timed out.
    /// </summary>
    /// <param name = "_dataStore">The data store.</param>
    internal static void UpdateTimedOutSessionsStatus(str _dataStore)
    {
        RetailSearchPublishingSession publishSession;

        if (_dataStore)
        {
            ttsbegin;

            publishSession.selectForUpdate(true);

            while select publishSession
                where  publishSession.status == RetailSearchPublishingSessionStatus::InProgress
                    && publishSession.DataStore == _dataStore
                    && publishSession.CreatedDateTime < DateTimeUtil::addDays(DateTimeUtil::utcNow(), -1)
            {
                publishSession.Status = RetailSearchPublishingSessionStatus::TimedOut;
                publishSession.update();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>CreatePublishingSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Creates a new <c>RetailSearchPublishingSession</c>.
    /// </summary>
    /// <param name="_createRequest">The <c>RetailSearchPublishingSessionCreateRequest</c> contract data.</param>
    internal static void CreatePublishingSession(RetailSearchPublishingSessionCreateRequest _createRequest)
    {
        RetailSearchPublishingSessionData   publishSession;
        RetailSearchPublishingSessionData   publishSessionExistsCheck;

        if (_createRequest == null)
        {
            throw Global::error('CreatePublishSession: The request is null.');
        }

        if (!_createRequest.parmSessionId())
        {
            _createRequest.parmSessionId(Global::emptyGuid()); // default to empty guid if null passed.
        }

        _createRequest.ValidateAndProcessDetails();

        using (var lock = ReqReaderWriterLock::construct())
        {
            str lockNameFormat = 'PublishSessionLock\%1\%2\%3';
            str lockName = strFmt(lockNameFormat, _createRequest.parmSessionId(), _createRequest.parmDataStoreName(), _createRequest.parmEntityType());

            if (!lock.tryEnterWriterLock(lockName))
            {
                // Some other process acquired the lock to initiate publish session.
                return;
            }

            RetailCDXSessionIDGenerator::initialize();
            int64 sessionNumber = RetailCDXSessionIDGenerator::getNextSession();
            ListIterator iterator = new ListIterator(_createRequest.parmOperatingUnitNumbers());

            ttsbegin;

            while (iterator.more())
            {
                // Publisher can add new stores with already existing stores in some cases
                // To avoid batch insert fail we need to verify if record exists.
                publishSession = RetailSearchPublishingSessionData::findSession(_createRequest.parmSessionId(), _createRequest.parmDataStoreName(), _createRequest.parmEntityType(), iterator.value(), true);

                publishSession.DataStore = _createRequest.parmDataStoreName();
                publishSession.EntityType = _createRequest.parmEntityType();
                publishSession.OperatingUnitNumber = iterator.value();
                publishSession.ChangedEntitiesCount = _createRequest.parmChangedEntitiesCount();
                publishSession.PublishedEntitiesCount = _createRequest.parmPublishedEntitiesCount();
                publishSession.Message = _createRequest.parmMessage();
                publishSession.DetailsData = _createRequest.parmDetailsData();

                RetailSearchPublishingService::SetSessionDates(publishSession, _createRequest);

                _createRequest.parmStatus(_createRequest.parmStatus() ? _createRequest.parmStatus() : RetailSearchPublishingSessionStatus::Queued);

                publishSession.Status = _createRequest.parmStatus();

                if (!publishSession.RecId)
                {
                    publishSession.SessionNumber = sessionNumber;
                    publishSession.Session = _createRequest.parmSessionId();

                    publishSession.insert();
                }
                else
                {                    
                    publishSession.update();
                }

                iterator.next();
            }

            ttscommit;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>UpdatePublishingSession</Name>
				<Source><![CDATA[
    /// <summary>
    /// Updates the existing <c>RetailSearchPublishingSession</c>.
    /// </summary>
    /// <param name="_updateRequest">The <c>RetailSearchPublishingSessionUpdateRequest</c> contract data.</param>
    internal static void UpdatePublishingSession(RetailSearchPublishingSessionUpdateRequest _updateRequest)
    {
        RetailSearchPublishingSessionData publishSession;

        if (_updateRequest == null)
        {
            throw Global::error('UpdatePublishingSession: The request is null.');
        }

        if (!_updateRequest.parmSessionId())
        {
            throw Global::error('UpdatePublishingSession: The session id is null.');
        }

        _updateRequest.ValidateAndProcessDetails();

        publishSession = RetailSearchPublishingSessionData::findSession(_updateRequest.parmSessionId(), _updateRequest.parmDataStoreName(), _updateRequest.parmEntityType(), _updateRequest.parmOperatingUnitNumber(), true);
        
        // If session not found try find session 0 that was initially created.
        if (!publishSession.RecId)
        {
            publishSession = RetailSearchPublishingSessionData::findQueuedSession(_updateRequest.parmDataStoreName(), _updateRequest.parmEntityType(), _updateRequest.parmOperatingUnitNumber(), true);
        }

        if (publishSession.RecId)
        {
            ttsbegin;

            publishSession.Session = _updateRequest.parmSessionId();

            if (_updateRequest.parmChangedEntitiesCount())
            {
                publishSession.ChangedEntitiesCount = _updateRequest.parmChangedEntitiesCount();
            }

            if (_updateRequest.parmPublishedEntitiesCount())
            {
                publishSession.PublishedEntitiesCount = _updateRequest.parmPublishedEntitiesCount();
            }

            if (_updateRequest.parmMessage())
            {
                publishSession.Message = _updateRequest.parmMessage();
            }

            if (_updateRequest.parmDetailsData())
            {
                publishSession.DetailsData = _updateRequest.parmDetailsData();
            }

            publishSession.Status = _updateRequest.parmStatus();

            RetailSearchPublishingService::SetSessionDates(publishSession, _updateRequest);

            publishSession.update();
            
            ttscommit;
        }
        else if (!publishSession.RecId)
        {
            // CDX publishing 1 channel at a time.
            // We also have test app that publishes multiple channels.
            // This is catch all other publishing approaches.
            RetailCDXSessionIDGenerator::initialize();
            int64 sessionNumber = RetailCDXSessionIDGenerator::getNextSession();

            ttsbegin;

            publishSession.SessionNumber = sessionNumber;
            publishSession.Session = _updateRequest.parmSessionId();
            publishSession.DataStore = _updateRequest.parmDataStoreName();
            publishSession.EntityType = _updateRequest.parmEntityType();
            publishSession.OperatingUnitNumber = _updateRequest.parmOperatingUnitNumber();
            publishSession.Status = _updateRequest.parmStatus();
            publishSession.ChangedEntitiesCount = _updateRequest.parmChangedEntitiesCount();
            publishSession.PublishedEntitiesCount = _updateRequest.parmPublishedEntitiesCount();
            publishSession.Message = _updateRequest.parmMessage();
            publishSession.DetailsData = _updateRequest.parmDetailsData();

            RetailSearchPublishingService::SetSessionDates(publishSession, _updateRequest);

            publishSession.insert();
            
            ttscommit;
        }
        else
        {
            throw Global::error(strFmt("@Retail:RetailSearchPublishUpdateFailSessionNotFound", _updateRequest.parmSessionId(), _updateRequest.parmDataStoreName(), _updateRequest.parmEntityType(), _updateRequest.parmOperatingUnitNumber()));
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>SetSessionDates</Name>
				<Source><![CDATA[
    private static void SetSessionDates(RetailSearchPublishingSessionData _publishSession, RetailSearchPublishingSessionBaseRequest _baseRequest)
    {
        if(!_publishSession.QueuedDateTime && _baseRequest.parmQueuedDateTime())
        {
            _publishSession.QueuedDateTime = _baseRequest.parmQueuedDateTime();
        }

        if(!_publishSession.StartDateTime && _baseRequest.parmStartDateTime())
        {
            _publishSession.StartDateTime = _baseRequest.parmStartDateTime();
        }

        if(!_publishSession.CompletedDateTime && _baseRequest.parmCompletedDateTime())
        {
            _publishSession.CompletedDateTime = _baseRequest.parmCompletedDateTime();
        }
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>