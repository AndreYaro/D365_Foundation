<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CzAdvancePaymentProposal_Vend</Name>
	<SourceCode>
		<Declaration><![CDATA[
final class CzAdvancePaymentProposal_Vend extends CzAdvancePaymentProposal
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>accountType</Name>
				<Source><![CDATA[
        protected LedgerJournalACType accountType()
    {
        return LedgerJournalACType::Vend;
    }

]]></Source>
			</Method>
			<Method>
				<Name>dialog</Name>
				<Source><![CDATA[
    /// <summary>
    /// Returns a class that contains the methods that are described by the <c>RunBaseDialogable</c>
    /// interface.
    /// </summary>
    /// <returns>
    /// A class that contains the methods that are described by the <c>RunBaseDialogable</c> interface.
    /// </returns>
    /// <remarks>
    /// A dialog can be either built by using the <c>Dialog</c> class or by using a class that is created
    /// in the AOT.
    /// </remarks>
    public Object dialog()
    {
        Dialog ret = super();

        fieldCopyVAToptions.visible(false);

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymReference</Name>
				<Source><![CDATA[
        protected PaymReference getPaymReference(CzAdvanceInvoiceTable _invoiceTable)
    {
        CzVendAdvanceInvoiceTable vendAdvanceInvoiceTable = _invoiceTable;

        return vendAdvanceInvoiceTable.VendInvoiceId;
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceLine</Name>
				<Source><![CDATA[
        protected void initFromInvoiceLine(CzAdvanceInvoiceTable _invoiceTable,
                                       CzAdvanceInvoiceLine  _invoiceLine = null)
    {
        ledgerJournalTrans.AccountType     = LedgerJournalACType::Vend;
        ledgerJournalTrans.AmountCurCredit = 0;
        if (_invoiceLine)
        {
            ledgerJournalTrans.AmountCurDebit = _invoiceLine.AmountCur;
            ledgerJournalTrans.TaxGroup       = _invoiceLine.TaxGroup;
            ledgerJournalTrans.TaxItemGroup   = _invoiceLine.TaxItemGroup;
        }
        else
        {
            ledgerJournalTrans.AmountCurDebit = _invoiceTable.InvoiceAmount;
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initFromInvoiceTable</Name>
				<Source><![CDATA[
        protected void initFromInvoiceTable(
        LedgerJournalTable    _ledgerJournalTable,
        CzAdvanceInvoiceTable _invoiceTable)
    {
        CzVendAdvanceInvoiceLine    vendInvoiceLine;
        #ISOCountryRegionCodes

        if (_ledgerJournalTable.JournalType == LedgerJournalType::Payment &&
            SysCountryRegionCode::isLegalEntityInCountryRegion([#isoHU]))
        {
            while select vendInvoiceLine
                where vendInvoiceLine.ParentRecId == _invoiceTable.RecId
            {
                this.insertLedgerJournalTrans(_ledgerJournalTable, _invoiceTable, vendInvoiceLine);
            }
        }
        else
        {
            super(_ledgerJournalTable, _invoiceTable);
        }
    }

]]></Source>
			</Method>
			<Method>
				<Name>initParmDefault</Name>
				<Source><![CDATA[
    /// <summary>
    /// Initializes the internal variables.
    /// </summary>
    /// <remarks>
    /// This method is called when no <c>SysLastValue</c> record can be found when it calls the
    /// <c>SysLastValue.GetLast</c> method.
    /// </remarks>
    public void initParmDefault()
    {
        QueryBuildDataSource qbds;

        super();

        qbds  = query.addDataSource(tablenum(CzVendAdvanceInvoiceTable));

        findOrCreateRange_W(qbds,
                            fieldnum(CzVendAdvanceInvoiceTable, Posted),
                            queryValue(NoYes::Yes)).status(RangeStatus::Locked);

        findOrCreateRange_W(qbds,
                            fieldnum(CzVendAdvanceInvoiceTable, Status),
                            SysQuery::valueNot(CzAdvanceInvoiceStatus::Closed));

        queryRun = new QueryRun(query);
    }

]]></Source>
			</Method>
			<Method>
				<Name>linkExists</Name>
				<Source><![CDATA[
        protected boolean linkExists(CzAdvanceInvoiceTable _invoiceTable)
    {
        return CzVendAdvanceInvoiceLink::existsAdvance(_invoiceTable.company(), _invoiceTable.RecId);
    }

]]></Source>
			</Method>
			<Method>
				<Name>description</Name>
				<Source><![CDATA[
        [Microsoft.Dynamics.BusinessPlatform.SharedTypes.InternalUseOnlyAttribute]
        static ClassDescription description()
    {
        return "@GLS111723";
    }

]]></Source>
			</Method>
			<Method>
				<Name>main</Name>
				<Source><![CDATA[
        public static void main(Args _args)
    {
        CzAdvancePaymentProposal::createProposal(_args);
    }

]]></Source>
			</Method>
			<Method>
				<Name>canRunInNewSession</Name>
				<Source><![CDATA[
    protected boolean canRunInNewSession()
    {
        return false;
    }
]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>