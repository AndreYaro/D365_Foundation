<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>CashFlowForecastBalanceLastUpdatedValidator</Name>
	<SourceCode>
		<Declaration><![CDATA[
internal final class CashFlowForecastBalanceLastUpdatedValidator extends CashFlowLastUpdatedValidator
{
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>construct</Name>
				<Source><![CDATA[
    internal final static CashFlowForecastBalanceLastUpdatedValidator construct()
    {
        CashFlowForecastBalanceLastUpdatedValidator validator = new CashFlowForecastBalanceLastUpdatedValidator();
        validator.init();

        return validator;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getToleranceDays</Name>
				<Source><![CDATA[
    protected int getToleranceDays()
    {
        return this.determineToleranceDays();
    }

]]></Source>
			</Method>
			<Method>
				<Name>shouldLogOutsideToleranceWithZeroRows</Name>
				<Source><![CDATA[
    protected boolean shouldLogOutsideToleranceWithZeroRows()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineToleranceDays</Name>
				<Source><![CDATA[
    private int determineToleranceDays()
    {
        int defaultToleranceDays;

        if (FeatureStateProvider::isFeatureEnabled(LedgerCovTotalProcessAutomationFeature::instance()))
        {
            defaultToleranceDays = this.determineProcessAutomationToleranceDays();
        }
        else
        {
            defaultToleranceDays = this.determineLedgerCovTotalToleranceDays();
        }

        return defaultToleranceDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineProcessAutomationToleranceDays</Name>
				<Source><![CDATA[
    private int determineProcessAutomationToleranceDays()
    {
        ProcessScheduleSeriesPattern processScheduleSeriesPattern;
        ProcessScheduleSeries processScheduleSeries;
        ProcessScheduleSeriesCompany processScheduleSeriesCompany;
        ProcessScheduleType processScheduleType;
        int defaultToleranceDaysTmp;
        int defaultToleranceDays = 32;

        while select processScheduleSeriesPattern
                where processScheduleSeriesPattern.EndDate == DateTimeUtil::minValue()
                    || processScheduleSeriesPattern.EndDate >= DateTimeUtil::utcNow()
                exists join processScheduleSeriesCompany
                    where processScheduleSeriesCompany.LegalEntityId == curExt()
                exists join processScheduleSeries
                    where processScheduleSeries.RecId == processScheduleSeriesCompany.processScheduleSeries
                        && processScheduleSeries.IsEnabled == NoYes::Yes
                        && processScheduleSeries.RecId == processScheduleSeriesPattern.ProcessScheduleSeries
                exists join processScheduleType
                    where processScheduleType.RecId == processScheduleSeries.ProcessScheduleType
                        && processScheduleType.Name == LedgerCovTotalProcessAutomationConstants::RegisteredTypeName
                        && processScheduleType.IsEnabled == NoYes::Yes
        {
            switch (processScheduleSeriesPattern.Unit)
            {
                case ProcessScheduleUnit::Minute:
                case ProcessScheduleUnit::Hour:
                    defaultToleranceDaysTmp = 1;
                    break;
                case ProcessScheduleUnit::Day:
                    defaultToleranceDaysTmp = 2;
                    break;
                case ProcessScheduleUnit::Week:
                    defaultToleranceDaysTmp = 8;
                    break;
                case ProcessScheduleUnit::Month:
                    defaultToleranceDaysTmp = 32;
                    break;
            }

            if (defaultToleranceDaysTmp < defaultToleranceDays)
            {
                defaultToleranceDays = defaultToleranceDaysTmp;
            }
        }

        return defaultToleranceDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>determineLedgerCovTotalToleranceDays</Name>
				<Source><![CDATA[
    private int determineLedgerCovTotalToleranceDays()
    {
        BatchJob batchJob;
        Batch batch;
        int defaultToleranceDaysTmp;
        int defaultToleranceDays = 32;

        while select batchJob
            join batch
            where batchJob.RecId == batch.BatchJobId
                && batch.ClassNumber == classNum(LedgerCovTotal)
                && batch.Company == curExt()
                && (batch.Status == BatchStatus::Ready
                    || batch.Status == BatchStatus::Waiting
                    || batch.Status == BatchStatus::Scheduled
                    || batch.Status == BatchStatus::Executing)
        {
            SysRecurrenceData recurrenceData = batchjob.recurrenceData;
            SysRecurrenceUnit timeUnits = conPeek(recurrenceData, 7);
            switch (timeUnits)
            {
                case SysRecurrenceUnit::Minute:
                case SysRecurrenceUnit::Hour:
                    defaultToleranceDaysTmp = 1;
                    break;
                case SysRecurrenceUnit::Day:
                    defaultToleranceDaysTmp = 2;
                    break;
                case SysRecurrenceUnit::Week:
                    defaultToleranceDaysTmp = 8;
                    break;
                case SysRecurrenceUnit::Month:
                case SysRecurrenceUnit::Year:
                    defaultToleranceDaysTmp = 32;
                    break;
            }

            if (defaultToleranceDaysTmp < defaultToleranceDays)
            {
                defaultToleranceDays = defaultToleranceDaysTmp;
            }
        }

        return defaultToleranceDays;
    }

]]></Source>
			</Method>
			<Method>
				<Name>exists</Name>
				<Source><![CDATA[
    protected boolean exists()
    {
        return CashFlowForecastBalance::existForCompany();
    }

]]></Source>
			</Method>
			<Method>
				<Name>lastModifiedDateTime</Name>
				<Source><![CDATA[
    protected utcdatetime lastModifiedDateTime()
    {
        return CashFlowForecastBalance::lastModifiedDateTime();
    }

]]></Source>
			</Method>
			<Method>
				<Name>isActive</Name>
				<Source><![CDATA[
    protected boolean isActive()
    {
        return true;
    }

]]></Source>
			</Method>
			<Method>
				<Name>logOutsideTolerance</Name>
				<Source><![CDATA[
    protected void logOutsideTolerance()
    {
        logger.logWarning(strFmt('The CashFlowForecastBalance data has not been updated in company %1 for %2 days.', curExt(), this.getToleranceDays()));

        result.addMessage(FinanceInsightsPipelineMessage::newWarningMessage(strFmt("@CashFlowManagement:CashFlowForecastBalanceLastUpdatedOutOfTolerance", curExt(), this.getToleranceDays())));
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>