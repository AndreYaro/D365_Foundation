<?xml version="1.0" encoding="utf-8"?>
<AxClass xmlns:i="http://www.w3.org/2001/XMLSchema-instance">
	<Name>ProjForecastPostRevenue</Name>
	<SourceCode>
		<Declaration><![CDATA[
class ProjForecastPostRevenue extends ProjForecastPost
{
    ProjForecastRevenue  projForecastRevenue;
}
]]></Declaration>
		<Methods>
			<Method>
				<Name>canCreateTransBudget</Name>
				<Source><![CDATA[
        protected boolean canCreateTransBudget()
    {
        boolean ret = false;

        if ((projForecastRevenue.ExpandId == 0 && projForecastRevenue.AllocateMethod == BudgetAllocateMethod::None) ||
            (projForecastRevenue.ExpandId != 0))
        {
            ret = true;
        }

        return ret;
    }

]]></Source>
			</Method>
			<Method>
				<Name>canDeleteTransBudget</Name>
				<Source><![CDATA[
        protected boolean canDeleteTransBudget()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>checkEnterCost</Name>
				<Source><![CDATA[
        protected boolean checkEnterCost()
    {
        return false;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentDate</Name>
				<Source><![CDATA[
        // Method to get the payment date as per the crieteria
    public TransDate getPaymentDate(LedgerPostingType _postingType)
    {
        TransDate paymentDate;

        // The payment date and status are set depending on the
        // posting type and transaction type
        switch (_postingType)
        {
            case LedgerPostingType::ProjTurnover:
                paymentDate = projForecastRevenue.SalesPaymDate;
                break;
        }

        return paymentDate;
    }

]]></Source>
			</Method>
			<Method>
				<Name>getPaymentStatus</Name>
				<Source><![CDATA[
        // Method to get the payment status as per the crieteria
    public ProjPaymentStatus getPaymentStatus(LedgerPostingType _postingType)
    {
        ProjPaymentStatus paymentStatus;

        // The payment date and status are set depending on the
        // posting type and transaction type
        switch (_postingType)
        {
            case LedgerPostingType::ProjSalesvalue,
                 LedgerPostingType::ProjSalesvalueOffset,
                 LedgerPostingType::ProjAccruedTurnoverProd,
                 LedgerPostingType::ProjWIPProduction,
                 LedgerPostingType::ProJAccruedTurnoverProfit,
                 LedgerPostingType::ProjWIPProfit:
                paymentStatus = ProjPaymentStatus::NoPayment;
                break;
            case LedgerPostingType::ProjTurnover:
                paymentStatus = ProjPaymentStatus::Paid;
                break;
        }

        return paymentStatus;
    }

]]></Source>
			</Method>
			<Method>
				<Name>modelId</Name>
				<Source><![CDATA[
        ForecastModelId modelId()
    {
        return projTrans.forecastModelId();
    }

]]></Source>
			</Method>
			<Method>
				<Name>new</Name>
				<Source><![CDATA[
        public void new(Common _buffer)
    {
        projForecastRevenue = _buffer;
        projTrans           = ProjTrans::newProjForecastRevenue(projForecastRevenue);

        super(_buffer);
    }

]]></Source>
			</Method>
		</Methods>
	</SourceCode>
</AxClass>